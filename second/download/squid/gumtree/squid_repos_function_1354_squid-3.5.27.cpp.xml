<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1354_squid-3.5.27.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">peerHandleIcpReply<pos:position pos:line="2" pos:column="19"/></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name pos:line="2" pos:column="20">CachePeer<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type> <name pos:line="2" pos:column="32">p<pos:position pos:line="2" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="35">peer_t<pos:position pos:line="2" pos:column="41"/></name></type> <name pos:line="2" pos:column="42">type<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="48">icp_common_t<pos:position pos:line="2" pos:column="60"/></name> <modifier pos:line="2" pos:column="61">*<pos:position pos:line="2" pos:column="62"/></modifier></type> <name pos:line="2" pos:column="63">header<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="71">void<pos:position pos:line="2" pos:column="75"/></name> <modifier pos:line="2" pos:column="76">*<pos:position pos:line="2" pos:column="77"/></modifier></type><name pos:line="2" pos:column="77">data<pos:position pos:line="2" pos:column="81"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="82"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">ps_state<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">psstate<pos:position pos:line="4" pos:column="22"/></name> <init pos:line="4" pos:column="23">= <expr><operator pos:line="4" pos:column="25">(<pos:position pos:line="4" pos:column="26"/></operator><name pos:line="4" pos:column="26">ps_state<pos:position pos:line="4" pos:column="34"/></name> <operator pos:line="4" pos:column="35">*<pos:position pos:line="4" pos:column="36"/></operator><operator pos:line="4" pos:column="36">)<pos:position pos:line="4" pos:column="37"/></operator><name pos:line="4" pos:column="37">data<pos:position pos:line="4" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="42"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">icp_opcode<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">op<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><call><name><name pos:line="5" pos:column="21">header<pos:position pos:line="5" pos:column="27"/></name><operator pos:line="5" pos:column="27">-&gt;<pos:position pos:line="5" pos:column="32"/></operator><name pos:line="5" pos:column="29">getOpCode<pos:position pos:line="5" pos:column="38"/></name></name><argument_list pos:line="5" pos:column="38">()<pos:position pos:line="5" pos:column="40"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="41"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">debugs<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><literal type="number" pos:line="6" pos:column="12">44<pos:position pos:line="6" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="16">3<pos:position pos:line="6" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="19">"peerHandleIcpReply: "<pos:position pos:line="6" pos:column="41"/></literal> <operator pos:line="6" pos:column="42">&lt;&lt;<pos:position pos:line="6" pos:column="50"/></operator> <name><name pos:line="6" pos:column="45">icp_opcode_str<pos:position pos:line="6" pos:column="59"/></name><index pos:line="6" pos:column="59">[<expr><name pos:line="6" pos:column="60">op<pos:position pos:line="6" pos:column="62"/></name></expr>]<pos:position pos:line="6" pos:column="63"/></index></name> <operator pos:line="6" pos:column="64">&lt;&lt;<pos:position pos:line="6" pos:column="72"/></operator> <literal type="string" pos:line="6" pos:column="67">" "<pos:position pos:line="6" pos:column="70"/></literal> <operator pos:line="6" pos:column="71">&lt;&lt;<pos:position pos:line="6" pos:column="79"/></operator> <call><name><name pos:line="6" pos:column="74">psstate<pos:position pos:line="6" pos:column="81"/></name><operator pos:line="6" pos:column="81">-&gt;<pos:position pos:line="6" pos:column="86"/></operator><name pos:line="6" pos:column="83">url<pos:position pos:line="6" pos:column="86"/></name></name><argument_list pos:line="6" pos:column="86">()<pos:position pos:line="6" pos:column="88"/></argument_list></call></expr></argument>  )<pos:position pos:line="6" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="92"/></expr_stmt>
<cpp:if pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">if<pos:position pos:line="7" pos:column="4"/></cpp:directive> <expr><name pos:line="7" pos:column="5">USE_CACHE_DIGESTS<pos:position pos:line="7" pos:column="22"/></name> <operator pos:line="7" pos:column="23">&amp;&amp;<pos:position pos:line="7" pos:column="33"/></operator> <literal type="number" pos:line="7" pos:column="26">0<pos:position pos:line="7" pos:column="27"/></literal></expr></cpp:if>
    <comment type="block" pos:line="8" pos:column="5">/* do cd lookup to count false misses */</comment>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">p<pos:position pos:line="10" pos:column="10"/></name> <operator pos:line="10" pos:column="11">&amp;&amp;<pos:position pos:line="10" pos:column="21"/></operator> <name pos:line="10" pos:column="14">request<pos:position pos:line="10" pos:column="21"/></name></expr>)<pos:position pos:line="10" pos:column="22"/></condition><then pos:line="10" pos:column="22">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="9">peerNoteDigestLookup<pos:position pos:line="11" pos:column="29"/></name><argument_list pos:line="11" pos:column="29">(<argument><expr><name pos:line="11" pos:column="30">request<pos:position pos:line="11" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="39">p<pos:position pos:line="11" pos:column="40"/></name></expr></argument>,
                             <argument><expr><call><name pos:line="12" pos:column="30">peerDigestLookup<pos:position pos:line="12" pos:column="46"/></name><argument_list pos:line="12" pos:column="46">(<argument><expr><name pos:line="12" pos:column="47">p<pos:position pos:line="12" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="50">request<pos:position pos:line="12" pos:column="57"/></name></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="59">psstate<pos:position pos:line="12" pos:column="66"/></name><operator pos:line="12" pos:column="66">-&gt;<pos:position pos:line="12" pos:column="71"/></operator><name pos:line="12" pos:column="68">entry<pos:position pos:line="12" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="76"/></expr_stmt></block></then></if>

<cpp:endif pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">endif<pos:position pos:line="14" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><operator pos:line="16" pos:column="5">++<pos:position pos:line="16" pos:column="7"/></operator> <name><name pos:line="16" pos:column="8">psstate<pos:position pos:line="16" pos:column="15"/></name><operator pos:line="16" pos:column="15">-&gt;<pos:position pos:line="16" pos:column="20"/></operator><name pos:line="16" pos:column="17">ping<pos:position pos:line="16" pos:column="21"/></name><operator pos:line="16" pos:column="21">.<pos:position pos:line="16" pos:column="22"/></operator><name pos:line="16" pos:column="22">n_recv<pos:position pos:line="16" pos:column="28"/></name></name></expr>;<pos:position pos:line="16" pos:column="29"/></expr_stmt>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name pos:line="18" pos:column="9">op<pos:position pos:line="18" pos:column="11"/></name> <operator pos:line="18" pos:column="12">==<pos:position pos:line="18" pos:column="14"/></operator> <name pos:line="18" pos:column="15">ICP_MISS<pos:position pos:line="18" pos:column="23"/></name> <operator pos:line="18" pos:column="24">||<pos:position pos:line="18" pos:column="26"/></operator> <name pos:line="18" pos:column="27">op<pos:position pos:line="18" pos:column="29"/></name> <operator pos:line="18" pos:column="30">==<pos:position pos:line="18" pos:column="32"/></operator> <name pos:line="18" pos:column="33">ICP_DECHO<pos:position pos:line="18" pos:column="42"/></name></expr>)<pos:position pos:line="18" pos:column="43"/></condition><then pos:line="18" pos:column="43"> <block pos:line="18" pos:column="44">{
        <if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">type<pos:position pos:line="19" pos:column="17"/></name> <operator pos:line="19" pos:column="18">==<pos:position pos:line="19" pos:column="20"/></operator> <name pos:line="19" pos:column="21">PEER_PARENT<pos:position pos:line="19" pos:column="32"/></name></expr>)<pos:position pos:line="19" pos:column="33"/></condition><then pos:line="19" pos:column="33">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="13">peerIcpParentMiss<pos:position pos:line="20" pos:column="30"/></name><argument_list pos:line="20" pos:column="30">(<argument><expr><name pos:line="20" pos:column="31">p<pos:position pos:line="20" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="34">header<pos:position pos:line="20" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="42">psstate<pos:position pos:line="20" pos:column="49"/></name></expr></argument>)<pos:position pos:line="20" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="51"/></expr_stmt></block></then></if>
    }<pos:position pos:line="21" pos:column="6"/></block></then> <elseif pos:line="21" pos:column="7">else <if pos:line="21" pos:column="12">if <condition pos:line="21" pos:column="15">(<expr><name pos:line="21" pos:column="16">op<pos:position pos:line="21" pos:column="18"/></name> <operator pos:line="21" pos:column="19">==<pos:position pos:line="21" pos:column="21"/></operator> <name pos:line="21" pos:column="22">ICP_HIT<pos:position pos:line="21" pos:column="29"/></name></expr>)<pos:position pos:line="21" pos:column="30"/></condition><then pos:line="21" pos:column="30"> <block pos:line="21" pos:column="31">{
        <expr_stmt><expr><name><name pos:line="22" pos:column="9">psstate<pos:position pos:line="22" pos:column="16"/></name><operator pos:line="22" pos:column="16">-&gt;<pos:position pos:line="22" pos:column="21"/></operator><name pos:line="22" pos:column="18">hit<pos:position pos:line="22" pos:column="21"/></name></name> <operator pos:line="22" pos:column="22">=<pos:position pos:line="22" pos:column="23"/></operator> <name pos:line="22" pos:column="24">p<pos:position pos:line="22" pos:column="25"/></name></expr>;<pos:position pos:line="22" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="23" pos:column="9">psstate<pos:position pos:line="23" pos:column="16"/></name><operator pos:line="23" pos:column="16">-&gt;<pos:position pos:line="23" pos:column="21"/></operator><name pos:line="23" pos:column="18">hit_type<pos:position pos:line="23" pos:column="26"/></name></name> <operator pos:line="23" pos:column="27">=<pos:position pos:line="23" pos:column="28"/></operator> <name pos:line="23" pos:column="29">type<pos:position pos:line="23" pos:column="33"/></name></expr>;<pos:position pos:line="23" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">peerSelectFoo<pos:position pos:line="24" pos:column="22"/></name><argument_list pos:line="24" pos:column="22">(<argument><expr><name pos:line="24" pos:column="23">psstate<pos:position pos:line="24" pos:column="30"/></name></expr></argument>)<pos:position pos:line="24" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="32"/></expr_stmt>
        <return pos:line="25" pos:column="9">return;<pos:position pos:line="25" pos:column="16"/></return>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if></elseif></if>

    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><name><name pos:line="28" pos:column="9">psstate<pos:position pos:line="28" pos:column="16"/></name><operator pos:line="28" pos:column="16">-&gt;<pos:position pos:line="28" pos:column="21"/></operator><name pos:line="28" pos:column="18">ping<pos:position pos:line="28" pos:column="22"/></name><operator pos:line="28" pos:column="22">.<pos:position pos:line="28" pos:column="23"/></operator><name pos:line="28" pos:column="23">n_recv<pos:position pos:line="28" pos:column="29"/></name></name> <operator pos:line="28" pos:column="30">&lt;<pos:position pos:line="28" pos:column="34"/></operator> <name><name pos:line="28" pos:column="32">psstate<pos:position pos:line="28" pos:column="39"/></name><operator pos:line="28" pos:column="39">-&gt;<pos:position pos:line="28" pos:column="44"/></operator><name pos:line="28" pos:column="41">ping<pos:position pos:line="28" pos:column="45"/></name><operator pos:line="28" pos:column="45">.<pos:position pos:line="28" pos:column="46"/></operator><name pos:line="28" pos:column="46">n_replies_expected<pos:position pos:line="28" pos:column="64"/></name></name></expr>)<pos:position pos:line="28" pos:column="65"/></condition><then pos:line="28" pos:column="65">
        <block type="pseudo"><return pos:line="29" pos:column="9">return;<pos:position pos:line="29" pos:column="16"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="31" pos:column="5">peerSelectFoo<pos:position pos:line="31" pos:column="18"/></name><argument_list pos:line="31" pos:column="18">(<argument><expr><name pos:line="31" pos:column="19">psstate<pos:position pos:line="31" pos:column="26"/></name></expr></argument>)<pos:position pos:line="31" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="28"/></expr_stmt>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
