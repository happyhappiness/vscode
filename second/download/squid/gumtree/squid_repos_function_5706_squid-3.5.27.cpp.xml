<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5706_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Auth<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">User<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">removeIp<pos:position pos:line="2" pos:column="21"/></name></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><name><name pos:line="2" pos:column="22">Ip<pos:position pos:line="2" pos:column="24"/></name><operator pos:line="2" pos:column="24">::<pos:position pos:line="2" pos:column="26"/></operator><name pos:line="2" pos:column="26">Address<pos:position pos:line="2" pos:column="33"/></name></name></type> <name pos:line="2" pos:column="34">ipaddr<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="41"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">AuthUserIP<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">ipdata<pos:position pos:line="4" pos:column="23"/></name> <init pos:line="4" pos:column="24">= <expr><operator pos:line="4" pos:column="26">(<pos:position pos:line="4" pos:column="27"/></operator><name pos:line="4" pos:column="27">AuthUserIP<pos:position pos:line="4" pos:column="37"/></name> <operator pos:line="4" pos:column="38">*<pos:position pos:line="4" pos:column="39"/></operator><operator pos:line="4" pos:column="39">)<pos:position pos:line="4" pos:column="40"/></operator> <name><name pos:line="4" pos:column="41">ip_list<pos:position pos:line="4" pos:column="48"/></name><operator pos:line="4" pos:column="48">.<pos:position pos:line="4" pos:column="49"/></operator><name pos:line="4" pos:column="49">head<pos:position pos:line="4" pos:column="53"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="54"/></decl_stmt>

    <while pos:line="6" pos:column="5">while <condition pos:line="6" pos:column="11">(<expr><name pos:line="6" pos:column="12">ipdata<pos:position pos:line="6" pos:column="18"/></name></expr>)<pos:position pos:line="6" pos:column="19"/></condition> <block pos:line="6" pos:column="20">{
        <comment type="block" pos:line="7" pos:column="9">/* walk the ip list */</comment>

        <if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name><name pos:line="9" pos:column="13">ipdata<pos:position pos:line="9" pos:column="19"/></name><operator pos:line="9" pos:column="19">-&gt;<pos:position pos:line="9" pos:column="24"/></operator><name pos:line="9" pos:column="21">ipaddr<pos:position pos:line="9" pos:column="27"/></name></name> <operator pos:line="9" pos:column="28">==<pos:position pos:line="9" pos:column="30"/></operator> <name pos:line="9" pos:column="31">ipaddr<pos:position pos:line="9" pos:column="37"/></name></expr>)<pos:position pos:line="9" pos:column="38"/></condition><then pos:line="9" pos:column="38"> <block pos:line="9" pos:column="39">{
            <comment type="block" pos:line="10" pos:column="13">/* remove the node */</comment>
            <expr_stmt><expr><call><name pos:line="11" pos:column="13">dlinkDelete<pos:position pos:line="11" pos:column="24"/></name><argument_list pos:line="11" pos:column="24">(<argument><expr><operator pos:line="11" pos:column="25">&amp;<pos:position pos:line="11" pos:column="30"/></operator><name><name pos:line="11" pos:column="26">ipdata<pos:position pos:line="11" pos:column="32"/></name><operator pos:line="11" pos:column="32">-&gt;<pos:position pos:line="11" pos:column="37"/></operator><name pos:line="11" pos:column="34">node<pos:position pos:line="11" pos:column="38"/></name></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="40">&amp;<pos:position pos:line="11" pos:column="45"/></operator><name pos:line="11" pos:column="41">ip_list<pos:position pos:line="11" pos:column="48"/></name></expr></argument>)<pos:position pos:line="11" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="50"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="12" pos:column="13">delete<pos:position pos:line="12" pos:column="19"/></operator> <name pos:line="12" pos:column="20">ipdata<pos:position pos:line="12" pos:column="26"/></name></expr>;<pos:position pos:line="12" pos:column="27"/></expr_stmt>
            <comment type="block" pos:line="13" pos:column="13">/* catch incipient underflow */</comment>
            <expr_stmt><expr><call><name pos:line="14" pos:column="13">assert<pos:position pos:line="14" pos:column="19"/></name><argument_list pos:line="14" pos:column="19">(<argument><expr><name pos:line="14" pos:column="20">ipcount<pos:position pos:line="14" pos:column="27"/></name></expr></argument>)<pos:position pos:line="14" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="15" pos:column="13">--<pos:position pos:line="15" pos:column="15"/></operator> <name pos:line="15" pos:column="16">ipcount<pos:position pos:line="15" pos:column="23"/></name></expr>;<pos:position pos:line="15" pos:column="24"/></expr_stmt>
            <return pos:line="16" pos:column="13">return;<pos:position pos:line="16" pos:column="20"/></return>
        }<pos:position pos:line="17" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="19" pos:column="9">ipdata<pos:position pos:line="19" pos:column="15"/></name> <operator pos:line="19" pos:column="16">=<pos:position pos:line="19" pos:column="17"/></operator> <operator pos:line="19" pos:column="18">(<pos:position pos:line="19" pos:column="19"/></operator><name pos:line="19" pos:column="19">AuthUserIP<pos:position pos:line="19" pos:column="29"/></name> <operator pos:line="19" pos:column="30">*<pos:position pos:line="19" pos:column="31"/></operator><operator pos:line="19" pos:column="31">)<pos:position pos:line="19" pos:column="32"/></operator> <name><name pos:line="19" pos:column="33">ipdata<pos:position pos:line="19" pos:column="39"/></name><operator pos:line="19" pos:column="39">-&gt;<pos:position pos:line="19" pos:column="44"/></operator><name pos:line="19" pos:column="41">node<pos:position pos:line="19" pos:column="45"/></name><operator pos:line="19" pos:column="45">.<pos:position pos:line="19" pos:column="46"/></operator><name pos:line="19" pos:column="46">next<pos:position pos:line="19" pos:column="50"/></name></name></expr>;<pos:position pos:line="19" pos:column="51"/></expr_stmt>
    }<pos:position pos:line="20" pos:column="6"/></block></while>

}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
