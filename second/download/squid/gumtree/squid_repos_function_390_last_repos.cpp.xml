<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_390_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">WIN32_create_key<pos:position pos:line="2" pos:column="17"/></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><name pos:line="2" pos:column="18">void<pos:position pos:line="2" pos:column="22"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="23"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">index<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">HKEY<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">hKey<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">HKEY<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">hKeyNext<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">retval<pos:position pos:line="7" pos:column="15"/></name></decl>;<pos:position pos:line="7" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">LONG<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">rv<pos:position pos:line="8" pos:column="12"/></name></decl>;<pos:position pos:line="8" pos:column="13"/></decl_stmt>

    <expr_stmt><expr><name pos:line="10" pos:column="5">hKey<pos:position pos:line="10" pos:column="9"/></name> <operator pos:line="10" pos:column="10">=<pos:position pos:line="10" pos:column="11"/></operator> <name pos:line="10" pos:column="12">HKEY_LOCAL_MACHINE<pos:position pos:line="10" pos:column="30"/></name></expr>;<pos:position pos:line="10" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name pos:line="11" pos:column="5">index<pos:position pos:line="11" pos:column="10"/></name> <operator pos:line="11" pos:column="11">=<pos:position pos:line="11" pos:column="12"/></operator> <literal type="number" pos:line="11" pos:column="13">0<pos:position pos:line="11" pos:column="14"/></literal></expr>;<pos:position pos:line="11" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><name pos:line="12" pos:column="5">retval<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">=<pos:position pos:line="12" pos:column="13"/></operator> <literal type="number" pos:line="12" pos:column="14">0<pos:position pos:line="12" pos:column="15"/></literal></expr>;<pos:position pos:line="12" pos:column="16"/></expr_stmt>

    <comment type="block" pos:line="14" pos:column="5">/* Walk the tree, creating at each stage if necessary */</comment>

    <while pos:line="16" pos:column="5">while <condition pos:line="16" pos:column="11">(<expr><name><name pos:line="16" pos:column="12">keys<pos:position pos:line="16" pos:column="16"/></name><index pos:line="16" pos:column="16">[<expr><name pos:line="16" pos:column="17">index<pos:position pos:line="16" pos:column="22"/></name></expr>]<pos:position pos:line="16" pos:column="23"/></index></name></expr>)<pos:position pos:line="16" pos:column="24"/></condition> <block pos:line="16" pos:column="25">{
        <decl_stmt><decl><type><name pos:line="17" pos:column="9">unsigned<pos:position pos:line="17" pos:column="17"/></name> <name pos:line="17" pos:column="18">long<pos:position pos:line="17" pos:column="22"/></name></type> <name pos:line="17" pos:column="23">result<pos:position pos:line="17" pos:column="29"/></name></decl>;<pos:position pos:line="17" pos:column="30"/></decl_stmt>
        <expr_stmt><expr><name pos:line="18" pos:column="9">rv<pos:position pos:line="18" pos:column="11"/></name> <operator pos:line="18" pos:column="12">=<pos:position pos:line="18" pos:column="13"/></operator> <call><name pos:line="18" pos:column="14">RegCreateKeyEx<pos:position pos:line="18" pos:column="28"/></name><argument_list pos:line="18" pos:column="28">(<argument><expr><name pos:line="18" pos:column="29">hKey<pos:position pos:line="18" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="35">keys<pos:position pos:line="18" pos:column="39"/></name><index pos:line="18" pos:column="39">[<expr><name pos:line="18" pos:column="40">index<pos:position pos:line="18" pos:column="45"/></name></expr>]<pos:position pos:line="18" pos:column="46"/></index></name></expr></argument>,  <comment type="block" pos:line="18" pos:column="49">/* subkey */</comment>
                            <argument><expr><literal type="number" pos:line="19" pos:column="29">0<pos:position pos:line="19" pos:column="30"/></literal></expr></argument>,          <comment type="block" pos:line="19" pos:column="41">/* reserved */</comment>
                            <argument><expr><name pos:line="20" pos:column="29">NULL<pos:position pos:line="20" pos:column="33"/></name></expr></argument>,       <comment type="block" pos:line="20" pos:column="41">/* class */</comment>
                            <argument><expr><name pos:line="21" pos:column="29">REG_OPTION_NON_VOLATILE<pos:position pos:line="21" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="54">KEY_WRITE<pos:position pos:line="21" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="65">NULL<pos:position pos:line="21" pos:column="69"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="71">&amp;<pos:position pos:line="21" pos:column="76"/></operator><name pos:line="21" pos:column="72">hKeyNext<pos:position pos:line="21" pos:column="80"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="82">&amp;<pos:position pos:line="21" pos:column="87"/></operator><name pos:line="21" pos:column="83">result<pos:position pos:line="21" pos:column="89"/></name></expr></argument>)<pos:position pos:line="21" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="91"/></expr_stmt>

        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">rv<pos:position pos:line="23" pos:column="15"/></name> <operator pos:line="23" pos:column="16">!=<pos:position pos:line="23" pos:column="18"/></operator> <name pos:line="23" pos:column="19">ERROR_SUCCESS<pos:position pos:line="23" pos:column="32"/></name></expr>)<pos:position pos:line="23" pos:column="33"/></condition><then pos:line="23" pos:column="33"> <block pos:line="23" pos:column="34">{
            <expr_stmt><expr><call><name pos:line="24" pos:column="13">fprintf<pos:position pos:line="24" pos:column="20"/></name><argument_list pos:line="24" pos:column="20">(<argument><expr><name pos:line="24" pos:column="21">stderr<pos:position pos:line="24" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="29">"RegCreateKeyEx(%s),%d\n"<pos:position pos:line="24" pos:column="54"/></literal></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="56">keys<pos:position pos:line="24" pos:column="60"/></name><index pos:line="24" pos:column="60">[<expr><name pos:line="24" pos:column="61">index<pos:position pos:line="24" pos:column="66"/></name></expr>]<pos:position pos:line="24" pos:column="67"/></index></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="69">(<pos:position pos:line="24" pos:column="70"/></operator><name pos:line="24" pos:column="70">int<pos:position pos:line="24" pos:column="73"/></name><operator pos:line="24" pos:column="73">)<pos:position pos:line="24" pos:column="74"/></operator> <name pos:line="24" pos:column="75">rv<pos:position pos:line="24" pos:column="77"/></name></expr></argument>)<pos:position pos:line="24" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="79"/></expr_stmt>
            <expr_stmt><expr><name pos:line="25" pos:column="13">retval<pos:position pos:line="25" pos:column="19"/></name> <operator pos:line="25" pos:column="20">=<pos:position pos:line="25" pos:column="21"/></operator> <operator pos:line="25" pos:column="22">-<pos:position pos:line="25" pos:column="23"/></operator><literal type="number" pos:line="25" pos:column="23">4<pos:position pos:line="25" pos:column="24"/></literal></expr>;<pos:position pos:line="25" pos:column="25"/></expr_stmt>
        }<pos:position pos:line="26" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="28" pos:column="9">/* Close the old key */</comment>
        <expr_stmt><expr><name pos:line="29" pos:column="9">rv<pos:position pos:line="29" pos:column="11"/></name> <operator pos:line="29" pos:column="12">=<pos:position pos:line="29" pos:column="13"/></operator> <call><name pos:line="29" pos:column="14">RegCloseKey<pos:position pos:line="29" pos:column="25"/></name><argument_list pos:line="29" pos:column="25">(<argument><expr><name pos:line="29" pos:column="26">hKey<pos:position pos:line="29" pos:column="30"/></name></expr></argument>)<pos:position pos:line="29" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="32"/></expr_stmt>

        <if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><name pos:line="31" pos:column="13">rv<pos:position pos:line="31" pos:column="15"/></name> <operator pos:line="31" pos:column="16">!=<pos:position pos:line="31" pos:column="18"/></operator> <name pos:line="31" pos:column="19">ERROR_SUCCESS<pos:position pos:line="31" pos:column="32"/></name></expr>)<pos:position pos:line="31" pos:column="33"/></condition><then pos:line="31" pos:column="33"> <block pos:line="31" pos:column="34">{
            <expr_stmt><expr><call><name pos:line="32" pos:column="13">fprintf<pos:position pos:line="32" pos:column="20"/></name><argument_list pos:line="32" pos:column="20">(<argument><expr><name pos:line="32" pos:column="21">stderr<pos:position pos:line="32" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="29">"RegCloseKey %d\n"<pos:position pos:line="32" pos:column="47"/></literal></expr></argument>, <argument><expr><operator pos:line="32" pos:column="49">(<pos:position pos:line="32" pos:column="50"/></operator><name pos:line="32" pos:column="50">int<pos:position pos:line="32" pos:column="53"/></name><operator pos:line="32" pos:column="53">)<pos:position pos:line="32" pos:column="54"/></operator> <name pos:line="32" pos:column="55">rv<pos:position pos:line="32" pos:column="57"/></name></expr></argument>)<pos:position pos:line="32" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="59"/></expr_stmt>

            <if pos:line="34" pos:column="13">if <condition pos:line="34" pos:column="16">(<expr><name pos:line="34" pos:column="17">retval<pos:position pos:line="34" pos:column="23"/></name> <operator pos:line="34" pos:column="24">==<pos:position pos:line="34" pos:column="26"/></operator> <literal type="number" pos:line="34" pos:column="27">0<pos:position pos:line="34" pos:column="28"/></literal></expr>)<pos:position pos:line="34" pos:column="29"/></condition><then pos:line="34" pos:column="29"> <block pos:line="34" pos:column="30">{
                <comment type="block" pos:line="35" pos:column="17">/* Keep error status from RegCreateKeyEx, if any */</comment>
                <expr_stmt><expr><name pos:line="36" pos:column="17">retval<pos:position pos:line="36" pos:column="23"/></name> <operator pos:line="36" pos:column="24">=<pos:position pos:line="36" pos:column="25"/></operator> <operator pos:line="36" pos:column="26">-<pos:position pos:line="36" pos:column="27"/></operator><literal type="number" pos:line="36" pos:column="27">4<pos:position pos:line="36" pos:column="28"/></literal></expr>;<pos:position pos:line="36" pos:column="29"/></expr_stmt>
            }<pos:position pos:line="37" pos:column="14"/></block></then></if>
        }<pos:position pos:line="38" pos:column="10"/></block></then></if>

        <if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><name pos:line="40" pos:column="13">retval<pos:position pos:line="40" pos:column="19"/></name></expr>)<pos:position pos:line="40" pos:column="20"/></condition><then pos:line="40" pos:column="20"> <block pos:line="40" pos:column="21">{
            <break pos:line="41" pos:column="13">break;<pos:position pos:line="41" pos:column="19"/></break>
        }<pos:position pos:line="42" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="44" pos:column="9">hKey<pos:position pos:line="44" pos:column="13"/></name> <operator pos:line="44" pos:column="14">=<pos:position pos:line="44" pos:column="15"/></operator> <name pos:line="44" pos:column="16">hKeyNext<pos:position pos:line="44" pos:column="24"/></name></expr>;<pos:position pos:line="44" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="45" pos:column="9">++<pos:position pos:line="45" pos:column="11"/></operator><name pos:line="45" pos:column="11">index<pos:position pos:line="45" pos:column="16"/></name></expr>;<pos:position pos:line="45" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="46" pos:column="6"/></block></while>

    <if pos:line="48" pos:column="5">if <condition pos:line="48" pos:column="8">(<expr><name><name pos:line="48" pos:column="9">keys<pos:position pos:line="48" pos:column="13"/></name><index pos:line="48" pos:column="13">[<expr><name pos:line="48" pos:column="14">index<pos:position pos:line="48" pos:column="19"/></name></expr>]<pos:position pos:line="48" pos:column="20"/></index></name> <operator pos:line="48" pos:column="21">==<pos:position pos:line="48" pos:column="23"/></operator> <name pos:line="48" pos:column="24">NULL<pos:position pos:line="48" pos:column="28"/></name></expr>)<pos:position pos:line="48" pos:column="29"/></condition><then pos:line="48" pos:column="29"> <block pos:line="48" pos:column="30">{
        <comment type="block" pos:line="49" pos:column="9">/* Close the final key we opened, if we walked the entire
         * tree
         */</comment>
        <expr_stmt><expr><name pos:line="52" pos:column="9">rv<pos:position pos:line="52" pos:column="11"/></name> <operator pos:line="52" pos:column="12">=<pos:position pos:line="52" pos:column="13"/></operator> <call><name pos:line="52" pos:column="14">RegCloseKey<pos:position pos:line="52" pos:column="25"/></name><argument_list pos:line="52" pos:column="25">(<argument><expr><name pos:line="52" pos:column="26">hKey<pos:position pos:line="52" pos:column="30"/></name></expr></argument>)<pos:position pos:line="52" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="32"/></expr_stmt>

        <if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><name pos:line="54" pos:column="13">rv<pos:position pos:line="54" pos:column="15"/></name> <operator pos:line="54" pos:column="16">!=<pos:position pos:line="54" pos:column="18"/></operator> <name pos:line="54" pos:column="19">ERROR_SUCCESS<pos:position pos:line="54" pos:column="32"/></name></expr>)<pos:position pos:line="54" pos:column="33"/></condition><then pos:line="54" pos:column="33"> <block pos:line="54" pos:column="34">{
            <expr_stmt><expr><call><name pos:line="55" pos:column="13">fprintf<pos:position pos:line="55" pos:column="20"/></name><argument_list pos:line="55" pos:column="20">(<argument><expr><name pos:line="55" pos:column="21">stderr<pos:position pos:line="55" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="29">"RegCloseKey %d\n"<pos:position pos:line="55" pos:column="47"/></literal></expr></argument>, <argument><expr><operator pos:line="55" pos:column="49">(<pos:position pos:line="55" pos:column="50"/></operator><name pos:line="55" pos:column="50">int<pos:position pos:line="55" pos:column="53"/></name><operator pos:line="55" pos:column="53">)<pos:position pos:line="55" pos:column="54"/></operator> <name pos:line="55" pos:column="55">rv<pos:position pos:line="55" pos:column="57"/></name></expr></argument>)<pos:position pos:line="55" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="59"/></expr_stmt>

            <if pos:line="57" pos:column="13">if <condition pos:line="57" pos:column="16">(<expr><name pos:line="57" pos:column="17">retval<pos:position pos:line="57" pos:column="23"/></name> <operator pos:line="57" pos:column="24">==<pos:position pos:line="57" pos:column="26"/></operator> <literal type="number" pos:line="57" pos:column="27">0<pos:position pos:line="57" pos:column="28"/></literal></expr>)<pos:position pos:line="57" pos:column="29"/></condition><then pos:line="57" pos:column="29"> <block pos:line="57" pos:column="30">{
                <comment type="block" pos:line="58" pos:column="17">/* Keep error status from RegCreateKeyEx, if any */</comment>
                <expr_stmt><expr><name pos:line="59" pos:column="17">retval<pos:position pos:line="59" pos:column="23"/></name> <operator pos:line="59" pos:column="24">=<pos:position pos:line="59" pos:column="25"/></operator> <operator pos:line="59" pos:column="26">-<pos:position pos:line="59" pos:column="27"/></operator><literal type="number" pos:line="59" pos:column="27">4<pos:position pos:line="59" pos:column="28"/></literal></expr>;<pos:position pos:line="59" pos:column="29"/></expr_stmt>
            }<pos:position pos:line="60" pos:column="14"/></block></then></if>
        }<pos:position pos:line="61" pos:column="10"/></block></then></if>
    }<pos:position pos:line="62" pos:column="6"/></block></then></if>

    <return pos:line="64" pos:column="5">return <expr><name pos:line="64" pos:column="12">retval<pos:position pos:line="64" pos:column="18"/></name></expr>;<pos:position pos:line="64" pos:column="19"/></return>
}<pos:position pos:line="65" pos:column="2"/></block></function></unit>
