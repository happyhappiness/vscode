<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2091_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HttpStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">doneSendingRequestBody<pos:position pos:line="2" pos:column="38"/></name></name><parameter_list pos:line="2" pos:column="38">()<pos:position pos:line="2" pos:column="40"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name><name pos:line="4" pos:column="5">ServerStateData<pos:position pos:line="4" pos:column="20"/></name><operator pos:line="4" pos:column="20">::<pos:position pos:line="4" pos:column="22"/></operator><name pos:line="4" pos:column="22">doneSendingRequestBody<pos:position pos:line="4" pos:column="44"/></name></name><argument_list pos:line="4" pos:column="44">()<pos:position pos:line="4" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">debugs<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><literal type="number" pos:line="5" pos:column="12">11<pos:position pos:line="5" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="5" pos:column="15">5<pos:position pos:line="5" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="5" pos:column="18">HERE<pos:position pos:line="5" pos:column="22"/></name> <operator pos:line="5" pos:column="23">&lt;&lt;<pos:position pos:line="5" pos:column="31"/></operator> <name pos:line="5" pos:column="26">serverConnection<pos:position pos:line="5" pos:column="42"/></name></expr></argument>)<pos:position pos:line="5" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="44"/></expr_stmt>

    <comment type="line" pos:line="7" pos:column="5">// do we need to write something after the last body byte?</comment>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name><name pos:line="8" pos:column="9">flags<pos:position pos:line="8" pos:column="14"/></name><operator pos:line="8" pos:column="14">.<pos:position pos:line="8" pos:column="15"/></operator><name pos:line="8" pos:column="15">chunked_request<pos:position pos:line="8" pos:column="30"/></name></name> <operator pos:line="8" pos:column="31">&amp;&amp;<pos:position pos:line="8" pos:column="41"/></operator> <call><name pos:line="8" pos:column="34">finishingChunkedRequest<pos:position pos:line="8" pos:column="57"/></name><argument_list pos:line="8" pos:column="57">()<pos:position pos:line="8" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="60"/></condition><then pos:line="8" pos:column="60">
        <block type="pseudo"><return pos:line="9" pos:column="9">return;<pos:position pos:line="9" pos:column="16"/></return></block></then></if>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><operator pos:line="10" pos:column="9">!<pos:position pos:line="10" pos:column="10"/></operator><name><name pos:line="10" pos:column="10">flags<pos:position pos:line="10" pos:column="15"/></name><operator pos:line="10" pos:column="15">.<pos:position pos:line="10" pos:column="16"/></operator><name pos:line="10" pos:column="16">chunked_request<pos:position pos:line="10" pos:column="31"/></name></name> <operator pos:line="10" pos:column="32">&amp;&amp;<pos:position pos:line="10" pos:column="42"/></operator> <call><name pos:line="10" pos:column="35">finishingBrokenPost<pos:position pos:line="10" pos:column="54"/></name><argument_list pos:line="10" pos:column="54">()<pos:position pos:line="10" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="57"/></condition><then pos:line="10" pos:column="57">
        <block type="pseudo"><return pos:line="11" pos:column="9">return;<pos:position pos:line="11" pos:column="16"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="13" pos:column="5">sendComplete<pos:position pos:line="13" pos:column="17"/></name><argument_list pos:line="13" pos:column="17">()<pos:position pos:line="13" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="20"/></expr_stmt>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
