<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3647_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int64_t<pos:position pos:line="1" pos:column="8"/></name></type>
<name><name pos:line="2" pos:column="1">HttpHdrRange<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">lowestOffset<pos:position pos:line="2" pos:column="27"/></name></name><parameter_list pos:line="2" pos:column="27">(<parameter><decl><type><name pos:line="2" pos:column="28">int64_t<pos:position pos:line="2" pos:column="35"/></name></type> <name pos:line="2" pos:column="36">size<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="41"/></parameter_list> <specifier pos:line="2" pos:column="42">const<pos:position pos:line="2" pos:column="47"/></specifier>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int64_t<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">offset<pos:position pos:line="4" pos:column="19"/></name> <init pos:line="4" pos:column="20">= <expr><name><name pos:line="4" pos:column="22">HttpHdrRangeSpec<pos:position pos:line="4" pos:column="38"/></name><operator pos:line="4" pos:column="38">::<pos:position pos:line="4" pos:column="40"/></operator><name pos:line="4" pos:column="40">UnknownPosition<pos:position pos:line="4" pos:column="55"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="56"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">const_iterator<pos:position pos:line="5" pos:column="19"/></name></type> <name pos:line="5" pos:column="20">pos<pos:position pos:line="5" pos:column="23"/></name> <init pos:line="5" pos:column="24">= <expr><call><name pos:line="5" pos:column="26">begin<pos:position pos:line="5" pos:column="31"/></name><argument_list pos:line="5" pos:column="31">()<pos:position pos:line="5" pos:column="33"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="34"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><name pos:line="6" pos:column="12">this<pos:position pos:line="6" pos:column="16"/></name></expr></argument>)<pos:position pos:line="6" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="18"/></expr_stmt>

    <while pos:line="8" pos:column="5">while <condition pos:line="8" pos:column="11">(<expr><name pos:line="8" pos:column="12">pos<pos:position pos:line="8" pos:column="15"/></name> <operator pos:line="8" pos:column="16">!=<pos:position pos:line="8" pos:column="18"/></operator> <call><name pos:line="8" pos:column="19">end<pos:position pos:line="8" pos:column="22"/></name><argument_list pos:line="8" pos:column="22">()<pos:position pos:line="8" pos:column="24"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="25"/></condition> <block pos:line="8" pos:column="26">{
        <decl_stmt><decl><type><name pos:line="9" pos:column="9">int64_t<pos:position pos:line="9" pos:column="16"/></name></type> <name pos:line="9" pos:column="17">current<pos:position pos:line="9" pos:column="24"/></name> <init pos:line="9" pos:column="25">= <expr><name><operator pos:line="9" pos:column="27">(<pos:position pos:line="9" pos:column="28"/></operator><operator pos:line="9" pos:column="28">*<pos:position pos:line="9" pos:column="29"/></operator><name pos:line="9" pos:column="29">pos<pos:position pos:line="9" pos:column="32"/></name><operator pos:line="9" pos:column="32">)<pos:position pos:line="9" pos:column="33"/></operator><operator pos:line="9" pos:column="33">-&gt;<pos:position pos:line="9" pos:column="38"/></operator><name pos:line="9" pos:column="35">offset<pos:position pos:line="9" pos:column="41"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="42"/></decl_stmt>

        <if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">!<pos:position pos:line="11" pos:column="14"/></operator><call><name pos:line="11" pos:column="14">known_spec<pos:position pos:line="11" pos:column="24"/></name><argument_list pos:line="11" pos:column="24">(<argument><expr><name pos:line="11" pos:column="25">current<pos:position pos:line="11" pos:column="32"/></name></expr></argument>)<pos:position pos:line="11" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="34"/></condition><then pos:line="11" pos:column="34"> <block pos:line="11" pos:column="35">{
            <if pos:line="12" pos:column="13">if <condition pos:line="12" pos:column="16">(<expr><name><operator pos:line="12" pos:column="17">(<pos:position pos:line="12" pos:column="18"/></operator><operator pos:line="12" pos:column="18">*<pos:position pos:line="12" pos:column="19"/></operator><name pos:line="12" pos:column="19">pos<pos:position pos:line="12" pos:column="22"/></name><operator pos:line="12" pos:column="22">)<pos:position pos:line="12" pos:column="23"/></operator><operator pos:line="12" pos:column="23">-&gt;<pos:position pos:line="12" pos:column="28"/></operator><name pos:line="12" pos:column="25">length<pos:position pos:line="12" pos:column="31"/></name></name> <operator pos:line="12" pos:column="32">&gt;<pos:position pos:line="12" pos:column="36"/></operator> <name pos:line="12" pos:column="34">size<pos:position pos:line="12" pos:column="38"/></name> <operator pos:line="12" pos:column="39">||<pos:position pos:line="12" pos:column="41"/></operator> <operator pos:line="12" pos:column="42">!<pos:position pos:line="12" pos:column="43"/></operator><call><name pos:line="12" pos:column="43">known_spec<pos:position pos:line="12" pos:column="53"/></name><argument_list pos:line="12" pos:column="53">(<argument><expr><name><operator pos:line="12" pos:column="54">(<pos:position pos:line="12" pos:column="55"/></operator><operator pos:line="12" pos:column="55">*<pos:position pos:line="12" pos:column="56"/></operator><name pos:line="12" pos:column="56">pos<pos:position pos:line="12" pos:column="59"/></name><operator pos:line="12" pos:column="59">)<pos:position pos:line="12" pos:column="60"/></operator><operator pos:line="12" pos:column="60">-&gt;<pos:position pos:line="12" pos:column="65"/></operator><name pos:line="12" pos:column="62">length<pos:position pos:line="12" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="70"/></condition><then pos:line="12" pos:column="70">
                <block type="pseudo"><return pos:line="13" pos:column="17">return <expr><literal type="number" pos:line="13" pos:column="24">0<pos:position pos:line="13" pos:column="25"/></literal></expr>;<pos:position pos:line="13" pos:column="26"/></return></block></then></if>	<comment type="block" pos:line="13" pos:column="33">/* Unknown. Assume start of file */</comment>

            <expr_stmt><expr><name pos:line="15" pos:column="13">current<pos:position pos:line="15" pos:column="20"/></name> <operator pos:line="15" pos:column="21">=<pos:position pos:line="15" pos:column="22"/></operator> <name pos:line="15" pos:column="23">size<pos:position pos:line="15" pos:column="27"/></name> <operator pos:line="15" pos:column="28">-<pos:position pos:line="15" pos:column="29"/></operator> <name><operator pos:line="15" pos:column="30">(<pos:position pos:line="15" pos:column="31"/></operator><operator pos:line="15" pos:column="31">*<pos:position pos:line="15" pos:column="32"/></operator><name pos:line="15" pos:column="32">pos<pos:position pos:line="15" pos:column="35"/></name><operator pos:line="15" pos:column="35">)<pos:position pos:line="15" pos:column="36"/></operator><operator pos:line="15" pos:column="36">-&gt;<pos:position pos:line="15" pos:column="41"/></operator><name pos:line="15" pos:column="38">length<pos:position pos:line="15" pos:column="44"/></name></name></expr>;<pos:position pos:line="15" pos:column="45"/></expr_stmt>
        }<pos:position pos:line="16" pos:column="10"/></block></then></if>

        <if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">current<pos:position pos:line="18" pos:column="20"/></name> <operator pos:line="18" pos:column="21">&lt;<pos:position pos:line="18" pos:column="25"/></operator> <name pos:line="18" pos:column="23">offset<pos:position pos:line="18" pos:column="29"/></name> <operator pos:line="18" pos:column="30">||<pos:position pos:line="18" pos:column="32"/></operator> <operator pos:line="18" pos:column="33">!<pos:position pos:line="18" pos:column="34"/></operator><call><name pos:line="18" pos:column="34">known_spec<pos:position pos:line="18" pos:column="44"/></name><argument_list pos:line="18" pos:column="44">(<argument><expr><name pos:line="18" pos:column="45">offset<pos:position pos:line="18" pos:column="51"/></name></expr></argument>)<pos:position pos:line="18" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="53"/></condition><then pos:line="18" pos:column="53">
            <block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="13">offset<pos:position pos:line="19" pos:column="19"/></name> <operator pos:line="19" pos:column="20">=<pos:position pos:line="19" pos:column="21"/></operator> <name pos:line="19" pos:column="22">current<pos:position pos:line="19" pos:column="29"/></name></expr>;<pos:position pos:line="19" pos:column="30"/></expr_stmt></block></then></if>

        <expr_stmt><expr><operator pos:line="21" pos:column="9">++<pos:position pos:line="21" pos:column="11"/></operator><name pos:line="21" pos:column="11">pos<pos:position pos:line="21" pos:column="14"/></name></expr>;<pos:position pos:line="21" pos:column="15"/></expr_stmt>
    }<pos:position pos:line="22" pos:column="6"/></block></while>

    <return pos:line="24" pos:column="5">return <expr><ternary><condition><expr><call><name pos:line="24" pos:column="12">known_spec<pos:position pos:line="24" pos:column="22"/></name><argument_list pos:line="24" pos:column="22">(<argument><expr><name pos:line="24" pos:column="23">offset<pos:position pos:line="24" pos:column="29"/></name></expr></argument>)<pos:position pos:line="24" pos:column="30"/></argument_list></call></expr> ?<pos:position pos:line="24" pos:column="32"/></condition><then pos:line="24" pos:column="32"> <expr><name pos:line="24" pos:column="33">offset<pos:position pos:line="24" pos:column="39"/></name></expr> <pos:position pos:line="24" pos:column="40"/></then><else pos:line="24" pos:column="40">: <expr><literal type="number" pos:line="24" pos:column="42">0<pos:position pos:line="24" pos:column="43"/></literal></expr></else></ternary></expr>;<pos:position pos:line="24" pos:column="44"/></return>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
