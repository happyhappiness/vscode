<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2718_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">StoreEntry<pos:position pos:line="1" pos:column="11"/></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type>
<name><name pos:line="2" pos:column="1">MemStore<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">get<pos:position pos:line="2" pos:column="14"/></name></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><specifier pos:line="2" pos:column="15">const<pos:position pos:line="2" pos:column="20"/></specifier> <name pos:line="2" pos:column="21">cache_key<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type><name pos:line="2" pos:column="32">key<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="36"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">!<pos:position pos:line="4" pos:column="10"/></operator><name pos:line="4" pos:column="10">map<pos:position pos:line="4" pos:column="13"/></name></expr>)<pos:position pos:line="4" pos:column="14"/></condition><then pos:line="4" pos:column="14">
        <block type="pseudo"><return pos:line="5" pos:column="9">return <expr><name pos:line="5" pos:column="16">NULL<pos:position pos:line="5" pos:column="20"/></name></expr>;<pos:position pos:line="5" pos:column="21"/></return></block></then></if>

    <decl_stmt><decl><type><name pos:line="7" pos:column="5">sfileno<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">index<pos:position pos:line="7" pos:column="18"/></name></decl>;<pos:position pos:line="7" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="8" pos:column="5">const<pos:position pos:line="8" pos:column="10"/></specifier> <name><name pos:line="8" pos:column="11">Ipc<pos:position pos:line="8" pos:column="14"/></name><operator pos:line="8" pos:column="14">::<pos:position pos:line="8" pos:column="16"/></operator><name pos:line="8" pos:column="16">StoreMapAnchor<pos:position pos:line="8" pos:column="30"/></name></name> <modifier pos:line="8" pos:column="31">*<pos:position pos:line="8" pos:column="32"/></modifier><specifier pos:line="8" pos:column="32">const<pos:position pos:line="8" pos:column="37"/></specifier></type> <name pos:line="8" pos:column="38">slot<pos:position pos:line="8" pos:column="42"/></name> <init pos:line="8" pos:column="43">= <expr><call><name><name pos:line="8" pos:column="45">map<pos:position pos:line="8" pos:column="48"/></name><operator pos:line="8" pos:column="48">-&gt;<pos:position pos:line="8" pos:column="53"/></operator><name pos:line="8" pos:column="50">openForReading<pos:position pos:line="8" pos:column="64"/></name></name><argument_list pos:line="8" pos:column="64">(<argument><expr><name pos:line="8" pos:column="65">key<pos:position pos:line="8" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="70">index<pos:position pos:line="8" pos:column="75"/></name></expr></argument>)<pos:position pos:line="8" pos:column="76"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="77"/></decl_stmt>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">!<pos:position pos:line="9" pos:column="10"/></operator><name pos:line="9" pos:column="10">slot<pos:position pos:line="9" pos:column="14"/></name></expr>)<pos:position pos:line="9" pos:column="15"/></condition><then pos:line="9" pos:column="15">
        <block type="pseudo"><return pos:line="10" pos:column="9">return <expr><name pos:line="10" pos:column="16">NULL<pos:position pos:line="10" pos:column="20"/></name></expr>;<pos:position pos:line="10" pos:column="21"/></return></block></then></if>

    <comment type="line" pos:line="12" pos:column="5">// create a brand new store entry and initialize it with stored info</comment>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">StoreEntry<pos:position pos:line="13" pos:column="15"/></name> <modifier pos:line="13" pos:column="16">*<pos:position pos:line="13" pos:column="17"/></modifier></type><name pos:line="13" pos:column="17">e<pos:position pos:line="13" pos:column="18"/></name> <init pos:line="13" pos:column="19">= <expr><operator pos:line="13" pos:column="21">new<pos:position pos:line="13" pos:column="24"/></operator> <call><name pos:line="13" pos:column="25">StoreEntry<pos:position pos:line="13" pos:column="35"/></name><argument_list pos:line="13" pos:column="35">()<pos:position pos:line="13" pos:column="37"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="38"/></decl_stmt>

    <comment type="line" pos:line="15" pos:column="5">// XXX: We do not know the URLs yet, only the key, but we need to parse and</comment>
    <comment type="line" pos:line="16" pos:column="5">// store the response for the Root().get() callers to be happy because they</comment>
    <comment type="line" pos:line="17" pos:column="5">// expect IN_MEMORY entries to already have the response headers and body.</comment>
    <expr_stmt><expr><call><name><name pos:line="18" pos:column="5">e<pos:position pos:line="18" pos:column="6"/></name><operator pos:line="18" pos:column="6">-&gt;<pos:position pos:line="18" pos:column="11"/></operator><name pos:line="18" pos:column="8">makeMemObject<pos:position pos:line="18" pos:column="21"/></name></name><argument_list pos:line="18" pos:column="21">()<pos:position pos:line="18" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="24"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="20" pos:column="5">anchorEntry<pos:position pos:line="20" pos:column="16"/></name><argument_list pos:line="20" pos:column="16">(<argument><expr><operator pos:line="20" pos:column="17">*<pos:position pos:line="20" pos:column="18"/></operator><name pos:line="20" pos:column="18">e<pos:position pos:line="20" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="21">index<pos:position pos:line="20" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="28">*<pos:position pos:line="20" pos:column="29"/></operator><name pos:line="20" pos:column="29">slot<pos:position pos:line="20" pos:column="33"/></name></expr></argument>)<pos:position pos:line="20" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="35"/></expr_stmt>

    <decl_stmt><decl><type><specifier pos:line="22" pos:column="5">const<pos:position pos:line="22" pos:column="10"/></specifier> <name pos:line="22" pos:column="11">bool<pos:position pos:line="22" pos:column="15"/></name></type> <name pos:line="22" pos:column="16">copied<pos:position pos:line="22" pos:column="22"/></name> <init pos:line="22" pos:column="23">= <expr><call><name pos:line="22" pos:column="25">copyFromShm<pos:position pos:line="22" pos:column="36"/></name><argument_list pos:line="22" pos:column="36">(<argument><expr><operator pos:line="22" pos:column="37">*<pos:position pos:line="22" pos:column="38"/></operator><name pos:line="22" pos:column="38">e<pos:position pos:line="22" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="41">index<pos:position pos:line="22" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="48">*<pos:position pos:line="22" pos:column="49"/></operator><name pos:line="22" pos:column="49">slot<pos:position pos:line="22" pos:column="53"/></name></expr></argument>)<pos:position pos:line="22" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="22" pos:column="55"/></decl_stmt>

    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><name pos:line="24" pos:column="9">copied<pos:position pos:line="24" pos:column="15"/></name></expr>)<pos:position pos:line="24" pos:column="16"/></condition><then pos:line="24" pos:column="16"> <block pos:line="24" pos:column="17">{
        <expr_stmt><expr><call><name><name pos:line="25" pos:column="9">e<pos:position pos:line="25" pos:column="10"/></name><operator pos:line="25" pos:column="10">-&gt;<pos:position pos:line="25" pos:column="15"/></operator><name pos:line="25" pos:column="12">hashInsert<pos:position pos:line="25" pos:column="22"/></name></name><argument_list pos:line="25" pos:column="22">(<argument><expr><name pos:line="25" pos:column="23">key<pos:position pos:line="25" pos:column="26"/></name></expr></argument>)<pos:position pos:line="25" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="28"/></expr_stmt>
        <return pos:line="26" pos:column="9">return <expr><name pos:line="26" pos:column="16">e<pos:position pos:line="26" pos:column="17"/></name></expr>;<pos:position pos:line="26" pos:column="18"/></return>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="29" pos:column="5">debugs<pos:position pos:line="29" pos:column="11"/></name><argument_list pos:line="29" pos:column="11">(<argument><expr><literal type="number" pos:line="29" pos:column="12">20<pos:position pos:line="29" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="16">3<pos:position pos:line="29" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="19">HERE<pos:position pos:line="29" pos:column="23"/></name> <operator pos:line="29" pos:column="24">&lt;&lt;<pos:position pos:line="29" pos:column="32"/></operator> <literal type="string" pos:line="29" pos:column="27">"mem-loading failed; freeing "<pos:position pos:line="29" pos:column="57"/></literal> <operator pos:line="29" pos:column="58">&lt;&lt;<pos:position pos:line="29" pos:column="66"/></operator> <name pos:line="29" pos:column="61">index<pos:position pos:line="29" pos:column="66"/></name></expr></argument>)<pos:position pos:line="29" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="68"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="30" pos:column="5">map<pos:position pos:line="30" pos:column="8"/></name><operator pos:line="30" pos:column="8">-&gt;<pos:position pos:line="30" pos:column="13"/></operator><name pos:line="30" pos:column="10">freeEntry<pos:position pos:line="30" pos:column="19"/></name></name><argument_list pos:line="30" pos:column="19">(<argument><expr><name pos:line="30" pos:column="20">index<pos:position pos:line="30" pos:column="25"/></name></expr></argument>)<pos:position pos:line="30" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="27"/></expr_stmt> <comment type="line" pos:line="30" pos:column="28">// do not let others into the same trap</comment>
    <return pos:line="31" pos:column="5">return <expr><name pos:line="31" pos:column="12">NULL<pos:position pos:line="31" pos:column="16"/></name></expr>;<pos:position pos:line="31" pos:column="17"/></return>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
