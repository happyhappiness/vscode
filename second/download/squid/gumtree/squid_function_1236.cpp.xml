<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_function_1236.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">ParseAclWithAction<pos:position pos:line="2" pos:column="19"/></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name pos:line="2" pos:column="20">acl_access<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier><modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type><name pos:line="2" pos:column="33">access<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="41">const<pos:position pos:line="2" pos:column="46"/></specifier> <name pos:line="2" pos:column="47">allow_t<pos:position pos:line="2" pos:column="54"/></name> <modifier pos:line="2" pos:column="55">&amp;<pos:position pos:line="2" pos:column="60"/></modifier></type><name pos:line="2" pos:column="56">action<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="64">const<pos:position pos:line="2" pos:column="69"/></specifier> <name pos:line="2" pos:column="70">char<pos:position pos:line="2" pos:column="74"/></name> <modifier pos:line="2" pos:column="75">*<pos:position pos:line="2" pos:column="76"/></modifier></type><name pos:line="2" pos:column="76">desc<pos:position pos:line="2" pos:column="80"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="82">ACL<pos:position pos:line="2" pos:column="85"/></name> <modifier pos:line="2" pos:column="86">*<pos:position pos:line="2" pos:column="87"/></modifier></type><name pos:line="2" pos:column="87">acl<pos:position pos:line="2" pos:column="90"/></name> <init pos:line="2" pos:column="91">= <expr><literal type="null" pos:line="2" pos:column="93">nullptr<pos:position pos:line="2" pos:column="100"/></literal></expr></init></decl></parameter>)<pos:position pos:line="2" pos:column="101"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">access<pos:position pos:line="4" pos:column="18"/></name></expr></argument>)<pos:position pos:line="4" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="20"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">SBuf<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">name<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">!<pos:position pos:line="6" pos:column="10"/></operator><operator pos:line="6" pos:column="10">*<pos:position pos:line="6" pos:column="11"/></operator><name pos:line="6" pos:column="11">access<pos:position pos:line="6" pos:column="17"/></name></expr>)<pos:position pos:line="6" pos:column="18"/></condition><then pos:line="6" pos:column="18"> <block pos:line="6" pos:column="19">{
        <expr_stmt><expr><operator pos:line="7" pos:column="9">*<pos:position pos:line="7" pos:column="10"/></operator><name pos:line="7" pos:column="10">access<pos:position pos:line="7" pos:column="16"/></name> <operator pos:line="7" pos:column="17">=<pos:position pos:line="7" pos:column="18"/></operator> <operator pos:line="7" pos:column="19">new<pos:position pos:line="7" pos:column="22"/></operator> <name><name pos:line="7" pos:column="23">Acl<pos:position pos:line="7" pos:column="26"/></name><operator pos:line="7" pos:column="26">::<pos:position pos:line="7" pos:column="28"/></operator><name pos:line="7" pos:column="28">Tree<pos:position pos:line="7" pos:column="32"/></name></name></expr>;<pos:position pos:line="7" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="8" pos:column="9">name<pos:position pos:line="8" pos:column="13"/></name><operator pos:line="8" pos:column="13">.<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">Printf<pos:position pos:line="8" pos:column="20"/></name></name><argument_list pos:line="8" pos:column="20">(<argument><expr><literal type="string" pos:line="8" pos:column="21">"(%s rules)"<pos:position pos:line="8" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="35">desc<pos:position pos:line="8" pos:column="39"/></name></expr></argument>)<pos:position pos:line="8" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><call><name><operator pos:line="9" pos:column="9">(<pos:position pos:line="9" pos:column="10"/></operator><operator pos:line="9" pos:column="10">*<pos:position pos:line="9" pos:column="11"/></operator><name pos:line="9" pos:column="11">access<pos:position pos:line="9" pos:column="17"/></name><operator pos:line="9" pos:column="17">)<pos:position pos:line="9" pos:column="18"/></operator><operator pos:line="9" pos:column="18">-&gt;<pos:position pos:line="9" pos:column="23"/></operator><name pos:line="9" pos:column="20">context<pos:position pos:line="9" pos:column="27"/></name></name><argument_list pos:line="9" pos:column="27">(<argument><expr><call><name><name pos:line="9" pos:column="28">name<pos:position pos:line="9" pos:column="32"/></name><operator pos:line="9" pos:column="32">.<pos:position pos:line="9" pos:column="33"/></operator><name pos:line="9" pos:column="33">c_str<pos:position pos:line="9" pos:column="38"/></name></name><argument_list pos:line="9" pos:column="38">()<pos:position pos:line="9" pos:column="40"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="9" pos:column="42">config_input_line<pos:position pos:line="9" pos:column="59"/></name></expr></argument>)<pos:position pos:line="9" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="61"/></expr_stmt>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>
    <decl_stmt><decl><type><name><name pos:line="11" pos:column="5">Acl<pos:position pos:line="11" pos:column="8"/></name><operator pos:line="11" pos:column="8">::<pos:position pos:line="11" pos:column="10"/></operator><name pos:line="11" pos:column="10">AndNode<pos:position pos:line="11" pos:column="17"/></name></name> <modifier pos:line="11" pos:column="18">*<pos:position pos:line="11" pos:column="19"/></modifier></type><name pos:line="11" pos:column="19">rule<pos:position pos:line="11" pos:column="23"/></name> <init pos:line="11" pos:column="24">= <expr><operator pos:line="11" pos:column="26">new<pos:position pos:line="11" pos:column="29"/></operator> <name><name pos:line="11" pos:column="30">Acl<pos:position pos:line="11" pos:column="33"/></name><operator pos:line="11" pos:column="33">::<pos:position pos:line="11" pos:column="35"/></operator><name pos:line="11" pos:column="35">AndNode<pos:position pos:line="11" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="11" pos:column="43"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="12" pos:column="5">name<pos:position pos:line="12" pos:column="9"/></name><operator pos:line="12" pos:column="9">.<pos:position pos:line="12" pos:column="10"/></operator><name pos:line="12" pos:column="10">Printf<pos:position pos:line="12" pos:column="16"/></name></name><argument_list pos:line="12" pos:column="16">(<argument><expr><literal type="string" pos:line="12" pos:column="17">"(%s rule)"<pos:position pos:line="12" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="30">desc<pos:position pos:line="12" pos:column="34"/></name></expr></argument>)<pos:position pos:line="12" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="13" pos:column="5">rule<pos:position pos:line="13" pos:column="9"/></name><operator pos:line="13" pos:column="9">-&gt;<pos:position pos:line="13" pos:column="14"/></operator><name pos:line="13" pos:column="11">context<pos:position pos:line="13" pos:column="18"/></name></name><argument_list pos:line="13" pos:column="18">(<argument><expr><call><name><name pos:line="13" pos:column="19">name<pos:position pos:line="13" pos:column="23"/></name><operator pos:line="13" pos:column="23">.<pos:position pos:line="13" pos:column="24"/></operator><name pos:line="13" pos:column="24">c_str<pos:position pos:line="13" pos:column="29"/></name></name><argument_list pos:line="13" pos:column="29">()<pos:position pos:line="13" pos:column="31"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="13" pos:column="33">config_input_line<pos:position pos:line="13" pos:column="50"/></name></expr></argument>)<pos:position pos:line="13" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><ternary><condition><expr><name pos:line="14" pos:column="5">acl<pos:position pos:line="14" pos:column="8"/></name></expr> ?<pos:position pos:line="14" pos:column="10"/></condition><then pos:line="14" pos:column="10"> <expr><call><name><name pos:line="14" pos:column="11">rule<pos:position pos:line="14" pos:column="15"/></name><operator pos:line="14" pos:column="15">-&gt;<pos:position pos:line="14" pos:column="20"/></operator><name pos:line="14" pos:column="17">add<pos:position pos:line="14" pos:column="20"/></name></name><argument_list pos:line="14" pos:column="20">(<argument><expr><name pos:line="14" pos:column="21">acl<pos:position pos:line="14" pos:column="24"/></name></expr></argument>)<pos:position pos:line="14" pos:column="25"/></argument_list></call></expr> <pos:position pos:line="14" pos:column="26"/></then><else pos:line="14" pos:column="26">: <expr><call><name><name pos:line="14" pos:column="28">rule<pos:position pos:line="14" pos:column="32"/></name><operator pos:line="14" pos:column="32">-&gt;<pos:position pos:line="14" pos:column="37"/></operator><name pos:line="14" pos:column="34">lineParse<pos:position pos:line="14" pos:column="43"/></name></name><argument_list pos:line="14" pos:column="43">()<pos:position pos:line="14" pos:column="45"/></argument_list></call></expr></else></ternary></expr>;<pos:position pos:line="14" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><call><name><operator pos:line="15" pos:column="5">(<pos:position pos:line="15" pos:column="6"/></operator><operator pos:line="15" pos:column="6">*<pos:position pos:line="15" pos:column="7"/></operator><name pos:line="15" pos:column="7">access<pos:position pos:line="15" pos:column="13"/></name><operator pos:line="15" pos:column="13">)<pos:position pos:line="15" pos:column="14"/></operator><operator pos:line="15" pos:column="14">-&gt;<pos:position pos:line="15" pos:column="19"/></operator><name pos:line="15" pos:column="16">add<pos:position pos:line="15" pos:column="19"/></name></name><argument_list pos:line="15" pos:column="19">(<argument><expr><name pos:line="15" pos:column="20">rule<pos:position pos:line="15" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="26">action<pos:position pos:line="15" pos:column="32"/></name></expr></argument>)<pos:position pos:line="15" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="34"/></expr_stmt>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
