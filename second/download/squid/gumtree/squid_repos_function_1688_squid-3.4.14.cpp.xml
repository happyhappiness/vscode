<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1688_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HttpHdrSc<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">parse<pos:position pos:line="2" pos:column="17"/></name></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><specifier pos:line="2" pos:column="18">const<pos:position pos:line="2" pos:column="23"/></specifier> <name pos:line="2" pos:column="24">String<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type> <name pos:line="2" pos:column="33">str<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="37"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">HttpHdrSc<pos:position pos:line="4" pos:column="14"/></name> <modifier pos:line="4" pos:column="15">*<pos:position pos:line="4" pos:column="16"/></modifier></type> <name pos:line="4" pos:column="17">sc<pos:position pos:line="4" pos:column="19"/></name><init pos:line="4" pos:column="19">=<expr><name pos:line="4" pos:column="20">this<pos:position pos:line="4" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">char<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">item<pos:position pos:line="5" pos:column="21"/></name></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">char<pos:position pos:line="6" pos:column="15"/></name> <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type><name pos:line="6" pos:column="17">p<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>		<comment type="block" pos:line="6" pos:column="33">/* '=' parameter */</comment>
    <decl_stmt><decl><type><specifier pos:line="7" pos:column="5">const<pos:position pos:line="7" pos:column="10"/></specifier> <name pos:line="7" pos:column="11">char<pos:position pos:line="7" pos:column="15"/></name> <modifier pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></modifier></type><name pos:line="7" pos:column="17">pos<pos:position pos:line="7" pos:column="20"/></name> <init pos:line="7" pos:column="21">= <expr><name pos:line="7" pos:column="23">NULL<pos:position pos:line="7" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="8" pos:column="5">const<pos:position pos:line="8" pos:column="10"/></specifier> <name pos:line="8" pos:column="11">char<pos:position pos:line="8" pos:column="15"/></name> <modifier pos:line="8" pos:column="16">*<pos:position pos:line="8" pos:column="17"/></modifier></type><name pos:line="8" pos:column="17">target<pos:position pos:line="8" pos:column="23"/></name> <init pos:line="8" pos:column="24">= <expr><name pos:line="8" pos:column="26">NULL<pos:position pos:line="8" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="31"/></decl_stmt> <comment type="block" pos:line="8" pos:column="32">/* ;foo */</comment>
    <decl_stmt><decl><type><specifier pos:line="9" pos:column="5">const<pos:position pos:line="9" pos:column="10"/></specifier> <name pos:line="9" pos:column="11">char<pos:position pos:line="9" pos:column="15"/></name> <modifier pos:line="9" pos:column="16">*<pos:position pos:line="9" pos:column="17"/></modifier></type><name pos:line="9" pos:column="17">temp<pos:position pos:line="9" pos:column="21"/></name> <init pos:line="9" pos:column="22">= <expr><name pos:line="9" pos:column="24">NULL<pos:position pos:line="9" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="29"/></decl_stmt> <comment type="block" pos:line="9" pos:column="30">/* temp buffer */</comment>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">type<pos:position pos:line="10" pos:column="13"/></name></decl>;<pos:position pos:line="10" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">int<pos:position pos:line="11" pos:column="8"/></name></type> <name pos:line="11" pos:column="9">ilen<pos:position pos:line="11" pos:column="13"/></name></decl>, <decl><type ref="prev"/><name pos:line="11" pos:column="15">vlen<pos:position pos:line="11" pos:column="19"/></name></decl>;<pos:position pos:line="11" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">int<pos:position pos:line="12" pos:column="8"/></name></type> <name pos:line="12" pos:column="9">initiallen<pos:position pos:line="12" pos:column="19"/></name></decl>;<pos:position pos:line="12" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">HttpHdrScTarget<pos:position pos:line="13" pos:column="20"/></name> <modifier pos:line="13" pos:column="21">*<pos:position pos:line="13" pos:column="22"/></modifier></type><name pos:line="13" pos:column="22">sct<pos:position pos:line="13" pos:column="25"/></name></decl>;<pos:position pos:line="13" pos:column="26"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">assert<pos:position pos:line="14" pos:column="11"/></name><argument_list pos:line="14" pos:column="11">(<argument><expr><name pos:line="14" pos:column="12">str<pos:position pos:line="14" pos:column="15"/></name></expr></argument>)<pos:position pos:line="14" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="17"/></expr_stmt>

    <comment type="block" pos:line="16" pos:column="5">/* iterate through comma separated list */</comment>

    <while pos:line="18" pos:column="5">while <condition pos:line="18" pos:column="11">(<expr><call><name pos:line="18" pos:column="12">strListGetItem<pos:position pos:line="18" pos:column="26"/></name><argument_list pos:line="18" pos:column="26">(<argument><expr><name pos:line="18" pos:column="27">str<pos:position pos:line="18" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="18" pos:column="32">','<pos:position pos:line="18" pos:column="35"/></literal></expr></argument>, <argument><expr><operator pos:line="18" pos:column="37">&amp;<pos:position pos:line="18" pos:column="42"/></operator><name pos:line="18" pos:column="38">item<pos:position pos:line="18" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="44">&amp;<pos:position pos:line="18" pos:column="49"/></operator><name pos:line="18" pos:column="45">ilen<pos:position pos:line="18" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="51">&amp;<pos:position pos:line="18" pos:column="56"/></operator><name pos:line="18" pos:column="52">pos<pos:position pos:line="18" pos:column="55"/></name></expr></argument>)<pos:position pos:line="18" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="57"/></condition> <block pos:line="18" pos:column="58">{
        <expr_stmt><expr><name pos:line="19" pos:column="9">initiallen<pos:position pos:line="19" pos:column="19"/></name> <operator pos:line="19" pos:column="20">=<pos:position pos:line="19" pos:column="21"/></operator> <name pos:line="19" pos:column="22">ilen<pos:position pos:line="19" pos:column="26"/></name></expr>;<pos:position pos:line="19" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><name pos:line="20" pos:column="9">vlen<pos:position pos:line="20" pos:column="13"/></name> <operator pos:line="20" pos:column="14">=<pos:position pos:line="20" pos:column="15"/></operator> <literal type="number" pos:line="20" pos:column="16">0<pos:position pos:line="20" pos:column="17"/></literal></expr>;<pos:position pos:line="20" pos:column="18"/></expr_stmt>
        <comment type="block" pos:line="21" pos:column="9">/* decrease ilen to still match the token for  '=' statements */</comment>

        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><operator pos:line="23" pos:column="13">(<pos:position pos:line="23" pos:column="14"/></operator><name pos:line="23" pos:column="14">p<pos:position pos:line="23" pos:column="15"/></name> <operator pos:line="23" pos:column="16">=<pos:position pos:line="23" pos:column="17"/></operator> <call><name pos:line="23" pos:column="18">strchr<pos:position pos:line="23" pos:column="24"/></name><argument_list pos:line="23" pos:column="24">(<argument><expr><name pos:line="23" pos:column="25">item<pos:position pos:line="23" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="23" pos:column="31">'='<pos:position pos:line="23" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="35"/></argument_list></call><operator pos:line="23" pos:column="35">)<pos:position pos:line="23" pos:column="36"/></operator> <operator pos:line="23" pos:column="37">&amp;&amp;<pos:position pos:line="23" pos:column="47"/></operator> <operator pos:line="23" pos:column="40">(<pos:position pos:line="23" pos:column="41"/></operator><name pos:line="23" pos:column="41">p<pos:position pos:line="23" pos:column="42"/></name> <operator pos:line="23" pos:column="43">-<pos:position pos:line="23" pos:column="44"/></operator> <name pos:line="23" pos:column="45">item<pos:position pos:line="23" pos:column="49"/></name> <operator pos:line="23" pos:column="50">&lt;<pos:position pos:line="23" pos:column="54"/></operator> <name pos:line="23" pos:column="52">ilen<pos:position pos:line="23" pos:column="56"/></name><operator pos:line="23" pos:column="56">)<pos:position pos:line="23" pos:column="57"/></operator></expr>)<pos:position pos:line="23" pos:column="58"/></condition><then pos:line="23" pos:column="58"> <block pos:line="23" pos:column="59">{
            <expr_stmt><expr><name pos:line="24" pos:column="13">vlen<pos:position pos:line="24" pos:column="17"/></name> <operator pos:line="24" pos:column="18">=<pos:position pos:line="24" pos:column="19"/></operator> <name pos:line="24" pos:column="20">ilen<pos:position pos:line="24" pos:column="24"/></name> <operator pos:line="24" pos:column="25">-<pos:position pos:line="24" pos:column="26"/></operator> <operator pos:line="24" pos:column="27">(<pos:position pos:line="24" pos:column="28"/></operator><name pos:line="24" pos:column="28">p<pos:position pos:line="24" pos:column="29"/></name> <operator pos:line="24" pos:column="30">+<pos:position pos:line="24" pos:column="31"/></operator> <literal type="number" pos:line="24" pos:column="32">1<pos:position pos:line="24" pos:column="33"/></literal> <operator pos:line="24" pos:column="34">-<pos:position pos:line="24" pos:column="35"/></operator> <name pos:line="24" pos:column="36">item<pos:position pos:line="24" pos:column="40"/></name><operator pos:line="24" pos:column="40">)<pos:position pos:line="24" pos:column="41"/></operator></expr>;<pos:position pos:line="24" pos:column="42"/></expr_stmt>
            <expr_stmt><expr><name pos:line="25" pos:column="13">ilen<pos:position pos:line="25" pos:column="17"/></name> <operator pos:line="25" pos:column="18">=<pos:position pos:line="25" pos:column="19"/></operator> <name pos:line="25" pos:column="20">p<pos:position pos:line="25" pos:column="21"/></name> <operator pos:line="25" pos:column="22">-<pos:position pos:line="25" pos:column="23"/></operator> <name pos:line="25" pos:column="24">item<pos:position pos:line="25" pos:column="28"/></name></expr>;<pos:position pos:line="25" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="26" pos:column="13">++<pos:position pos:line="26" pos:column="15"/></operator><name pos:line="26" pos:column="15">p<pos:position pos:line="26" pos:column="16"/></name></expr>;<pos:position pos:line="26" pos:column="17"/></expr_stmt>
        }<pos:position pos:line="27" pos:column="10"/></block></then>

        <comment type="block" pos:line="29" pos:column="9">/* decrease ilen to still match the token for ';' qualified non '=' statments */</comment>
        <elseif pos:line="30" pos:column="9">else <if pos:line="30" pos:column="14">if <condition pos:line="30" pos:column="17">(<expr><operator pos:line="30" pos:column="18">(<pos:position pos:line="30" pos:column="19"/></operator><name pos:line="30" pos:column="19">p<pos:position pos:line="30" pos:column="20"/></name> <operator pos:line="30" pos:column="21">=<pos:position pos:line="30" pos:column="22"/></operator> <call><name pos:line="30" pos:column="23">strchr<pos:position pos:line="30" pos:column="29"/></name><argument_list pos:line="30" pos:column="29">(<argument><expr><name pos:line="30" pos:column="30">item<pos:position pos:line="30" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="30" pos:column="36">';'<pos:position pos:line="30" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="40"/></argument_list></call><operator pos:line="30" pos:column="40">)<pos:position pos:line="30" pos:column="41"/></operator> <operator pos:line="30" pos:column="42">&amp;&amp;<pos:position pos:line="30" pos:column="52"/></operator> <operator pos:line="30" pos:column="45">(<pos:position pos:line="30" pos:column="46"/></operator><name pos:line="30" pos:column="46">p<pos:position pos:line="30" pos:column="47"/></name> <operator pos:line="30" pos:column="48">-<pos:position pos:line="30" pos:column="49"/></operator> <name pos:line="30" pos:column="50">item<pos:position pos:line="30" pos:column="54"/></name> <operator pos:line="30" pos:column="55">&lt;<pos:position pos:line="30" pos:column="59"/></operator> <name pos:line="30" pos:column="57">ilen<pos:position pos:line="30" pos:column="61"/></name><operator pos:line="30" pos:column="61">)<pos:position pos:line="30" pos:column="62"/></operator></expr>)<pos:position pos:line="30" pos:column="63"/></condition><then pos:line="30" pos:column="63"> <block pos:line="30" pos:column="64">{
            <expr_stmt><expr><name pos:line="31" pos:column="13">ilen<pos:position pos:line="31" pos:column="17"/></name> <operator pos:line="31" pos:column="18">=<pos:position pos:line="31" pos:column="19"/></operator> <name pos:line="31" pos:column="20">p<pos:position pos:line="31" pos:column="21"/></name> <operator pos:line="31" pos:column="22">-<pos:position pos:line="31" pos:column="23"/></operator> <name pos:line="31" pos:column="24">item<pos:position pos:line="31" pos:column="28"/></name></expr>;<pos:position pos:line="31" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="32" pos:column="13">++<pos:position pos:line="32" pos:column="15"/></operator><name pos:line="32" pos:column="15">p<pos:position pos:line="32" pos:column="16"/></name></expr>;<pos:position pos:line="32" pos:column="17"/></expr_stmt>
        }<pos:position pos:line="33" pos:column="10"/></block></then></if></elseif></if>

        <comment type="block" pos:line="35" pos:column="9">/* find type */</comment>
        <comment type="block" pos:line="36" pos:column="9">/* TODO: use a type-safe map-based lookup */</comment>
        <expr_stmt><expr><name pos:line="37" pos:column="9">type<pos:position pos:line="37" pos:column="13"/></name> <operator pos:line="37" pos:column="14">=<pos:position pos:line="37" pos:column="15"/></operator> <call><name pos:line="37" pos:column="16">httpHeaderIdByName<pos:position pos:line="37" pos:column="34"/></name><argument_list pos:line="37" pos:column="34">(<argument><expr><name pos:line="37" pos:column="35">item<pos:position pos:line="37" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="41">ilen<pos:position pos:line="37" pos:column="45"/></name></expr></argument>,
                                  <argument><expr><name pos:line="38" pos:column="35">ScFieldsInfo<pos:position pos:line="38" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="49">SC_ENUM_END<pos:position pos:line="38" pos:column="60"/></name></expr></argument>)<pos:position pos:line="38" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="62"/></expr_stmt>

        <if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><name pos:line="40" pos:column="13">type<pos:position pos:line="40" pos:column="17"/></name> <operator pos:line="40" pos:column="18">&lt;<pos:position pos:line="40" pos:column="22"/></operator> <literal type="number" pos:line="40" pos:column="20">0<pos:position pos:line="40" pos:column="21"/></literal></expr>)<pos:position pos:line="40" pos:column="22"/></condition><then pos:line="40" pos:column="22"> <block pos:line="40" pos:column="23">{
            <expr_stmt><expr><call><name pos:line="41" pos:column="13">debugs<pos:position pos:line="41" pos:column="19"/></name><argument_list pos:line="41" pos:column="19">(<argument><expr><literal type="number" pos:line="41" pos:column="20">90<pos:position pos:line="41" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="24">2<pos:position pos:line="41" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="27">"hdr sc: unknown control-directive: near '"<pos:position pos:line="41" pos:column="70"/></literal> <operator pos:line="41" pos:column="71">&lt;&lt;<pos:position pos:line="41" pos:column="79"/></operator> <name pos:line="41" pos:column="74">item<pos:position pos:line="41" pos:column="78"/></name> <operator pos:line="41" pos:column="79">&lt;&lt;<pos:position pos:line="41" pos:column="87"/></operator> <literal type="string" pos:line="41" pos:column="82">"' in '"<pos:position pos:line="41" pos:column="90"/></literal> <operator pos:line="41" pos:column="91">&lt;&lt;<pos:position pos:line="41" pos:column="99"/></operator> <name pos:line="41" pos:column="94">str<pos:position pos:line="41" pos:column="97"/></name> <operator pos:line="41" pos:column="98">&lt;&lt;<pos:position pos:line="41" pos:column="106"/></operator> <literal type="string" pos:line="41" pos:column="101">"'"<pos:position pos:line="41" pos:column="104"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="105"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="106"/></expr_stmt>
            <expr_stmt><expr><name pos:line="42" pos:column="13">type<pos:position pos:line="42" pos:column="17"/></name> <operator pos:line="42" pos:column="18">=<pos:position pos:line="42" pos:column="19"/></operator> <name pos:line="42" pos:column="20">SC_OTHER<pos:position pos:line="42" pos:column="28"/></name></expr>;<pos:position pos:line="42" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="43" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="45" pos:column="9">/* Is this a targeted directive? */</comment>
        <comment type="block" pos:line="46" pos:column="9">/* TODO: remove the temporary useage and use memrchr and the information we have instead */</comment>
        <expr_stmt><expr><name pos:line="47" pos:column="9">temp<pos:position pos:line="47" pos:column="13"/></name> <operator pos:line="47" pos:column="14">=<pos:position pos:line="47" pos:column="15"/></operator> <call><name pos:line="47" pos:column="16">xstrndup<pos:position pos:line="47" pos:column="24"/></name> <argument_list pos:line="47" pos:column="25">(<argument><expr><name pos:line="47" pos:column="26">item<pos:position pos:line="47" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="32">initiallen<pos:position pos:line="47" pos:column="42"/></name> <operator pos:line="47" pos:column="43">+<pos:position pos:line="47" pos:column="44"/></operator> <literal type="number" pos:line="47" pos:column="45">1<pos:position pos:line="47" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="48"/></expr_stmt>

        <if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><operator pos:line="49" pos:column="13">!<pos:position pos:line="49" pos:column="14"/></operator><operator pos:line="49" pos:column="14">(<pos:position pos:line="49" pos:column="15"/></operator><operator pos:line="49" pos:column="15">(<pos:position pos:line="49" pos:column="16"/></operator><name pos:line="49" pos:column="16">target<pos:position pos:line="49" pos:column="22"/></name> <operator pos:line="49" pos:column="23">=<pos:position pos:line="49" pos:column="24"/></operator> <call><name pos:line="49" pos:column="25">strrchr<pos:position pos:line="49" pos:column="32"/></name> <argument_list pos:line="49" pos:column="33">(<argument><expr><name pos:line="49" pos:column="34">temp<pos:position pos:line="49" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="49" pos:column="40">';'<pos:position pos:line="49" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="44"/></argument_list></call><operator pos:line="49" pos:column="44">)<pos:position pos:line="49" pos:column="45"/></operator> <operator pos:line="49" pos:column="46">&amp;&amp;<pos:position pos:line="49" pos:column="56"/></operator> <operator pos:line="49" pos:column="49">!<pos:position pos:line="49" pos:column="50"/></operator><call><name pos:line="49" pos:column="50">strchr<pos:position pos:line="49" pos:column="56"/></name> <argument_list pos:line="49" pos:column="57">(<argument><expr><name pos:line="49" pos:column="58">target<pos:position pos:line="49" pos:column="64"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="49" pos:column="66">'"'<pos:position pos:line="49" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="70"/></argument_list></call> <operator pos:line="49" pos:column="71">&amp;&amp;<pos:position pos:line="49" pos:column="81"/></operator> <operator pos:line="49" pos:column="74">*<pos:position pos:line="49" pos:column="75"/></operator><operator pos:line="49" pos:column="75">(<pos:position pos:line="49" pos:column="76"/></operator><name pos:line="49" pos:column="76">target<pos:position pos:line="49" pos:column="82"/></name> <operator pos:line="49" pos:column="83">+<pos:position pos:line="49" pos:column="84"/></operator> <literal type="number" pos:line="49" pos:column="85">1<pos:position pos:line="49" pos:column="86"/></literal><operator pos:line="49" pos:column="86">)<pos:position pos:line="49" pos:column="87"/></operator> <operator pos:line="49" pos:column="88">!=<pos:position pos:line="49" pos:column="90"/></operator> <literal type="char" pos:line="49" pos:column="91">'\0'<pos:position pos:line="49" pos:column="95"/></literal><operator pos:line="49" pos:column="95">)<pos:position pos:line="49" pos:column="96"/></operator></expr>)<pos:position pos:line="49" pos:column="97"/></condition><then pos:line="49" pos:column="97">
            <block type="pseudo"><expr_stmt><expr><name pos:line="50" pos:column="13">target<pos:position pos:line="50" pos:column="19"/></name> <operator pos:line="50" pos:column="20">=<pos:position pos:line="50" pos:column="21"/></operator> <name pos:line="50" pos:column="22">NULL<pos:position pos:line="50" pos:column="26"/></name></expr>;<pos:position pos:line="50" pos:column="27"/></expr_stmt></block></then>
        <else pos:line="51" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><operator pos:line="52" pos:column="13">++<pos:position pos:line="52" pos:column="15"/></operator><name pos:line="52" pos:column="15">target<pos:position pos:line="52" pos:column="21"/></name></expr>;<pos:position pos:line="52" pos:column="22"/></expr_stmt></block></else></if>

        <expr_stmt><expr><name pos:line="54" pos:column="9">sct<pos:position pos:line="54" pos:column="12"/></name> <operator pos:line="54" pos:column="13">=<pos:position pos:line="54" pos:column="14"/></operator> <call><name><name pos:line="54" pos:column="15">sc<pos:position pos:line="54" pos:column="17"/></name><operator pos:line="54" pos:column="17">-&gt;<pos:position pos:line="54" pos:column="22"/></operator><name pos:line="54" pos:column="19">findTarget<pos:position pos:line="54" pos:column="29"/></name></name><argument_list pos:line="54" pos:column="29">(<argument><expr><name pos:line="54" pos:column="30">target<pos:position pos:line="54" pos:column="36"/></name></expr></argument>)<pos:position pos:line="54" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="38"/></expr_stmt>

        <if pos:line="56" pos:column="9">if <condition pos:line="56" pos:column="12">(<expr><operator pos:line="56" pos:column="13">!<pos:position pos:line="56" pos:column="14"/></operator><name pos:line="56" pos:column="14">sct<pos:position pos:line="56" pos:column="17"/></name></expr>)<pos:position pos:line="56" pos:column="18"/></condition><then pos:line="56" pos:column="18"> <block pos:line="56" pos:column="19">{
            <expr_stmt><expr><name pos:line="57" pos:column="13">sct<pos:position pos:line="57" pos:column="16"/></name> <operator pos:line="57" pos:column="17">=<pos:position pos:line="57" pos:column="18"/></operator> <operator pos:line="57" pos:column="19">new<pos:position pos:line="57" pos:column="22"/></operator> <call><name pos:line="57" pos:column="23">HttpHdrScTarget<pos:position pos:line="57" pos:column="38"/></name><argument_list pos:line="57" pos:column="38">(<argument><expr><name pos:line="57" pos:column="39">target<pos:position pos:line="57" pos:column="45"/></name></expr></argument>)<pos:position pos:line="57" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="47"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="58" pos:column="13">addTarget<pos:position pos:line="58" pos:column="22"/></name><argument_list pos:line="58" pos:column="22">(<argument><expr><name pos:line="58" pos:column="23">sct<pos:position pos:line="58" pos:column="26"/></name></expr></argument>)<pos:position pos:line="58" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="28"/></expr_stmt>
        }<pos:position pos:line="59" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="61" pos:column="9">safe_free<pos:position pos:line="61" pos:column="18"/></name> <argument_list pos:line="61" pos:column="19">(<argument><expr><name pos:line="61" pos:column="20">temp<pos:position pos:line="61" pos:column="24"/></name></expr></argument>)<pos:position pos:line="61" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="26"/></expr_stmt>

        <if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><call><name><name pos:line="63" pos:column="13">sct<pos:position pos:line="63" pos:column="16"/></name><operator pos:line="63" pos:column="16">-&gt;<pos:position pos:line="63" pos:column="21"/></operator><name pos:line="63" pos:column="18">isSet<pos:position pos:line="63" pos:column="23"/></name></name><argument_list pos:line="63" pos:column="23">(<argument><expr><cast type="static" pos:line="63" pos:column="24">static_cast<argument_list type="generic" pos:line="63" pos:column="35">&lt;<argument><expr><name pos:line="63" pos:column="36">http_hdr_sc_type<pos:position pos:line="63" pos:column="52"/></name></expr></argument>&gt;<pos:position pos:line="63" pos:column="56"/></argument_list><argument_list pos:line="63" pos:column="53">(<argument><expr><name pos:line="63" pos:column="54">type<pos:position pos:line="63" pos:column="58"/></name></expr></argument>)<pos:position pos:line="63" pos:column="59"/></argument_list></cast></expr></argument>)<pos:position pos:line="63" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="63" pos:column="61"/></condition><then pos:line="63" pos:column="61"> <block pos:line="63" pos:column="62">{
            <if pos:line="64" pos:column="13">if <condition pos:line="64" pos:column="16">(<expr><name pos:line="64" pos:column="17">type<pos:position pos:line="64" pos:column="21"/></name> <operator pos:line="64" pos:column="22">!=<pos:position pos:line="64" pos:column="24"/></operator> <name pos:line="64" pos:column="25">SC_OTHER<pos:position pos:line="64" pos:column="33"/></name></expr>)<pos:position pos:line="64" pos:column="34"/></condition><then pos:line="64" pos:column="34">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="65" pos:column="17">debugs<pos:position pos:line="65" pos:column="23"/></name><argument_list pos:line="65" pos:column="23">(<argument><expr><literal type="number" pos:line="65" pos:column="24">90<pos:position pos:line="65" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="65" pos:column="28">2<pos:position pos:line="65" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="31">"hdr sc: ignoring duplicate control-directive: near '"<pos:position pos:line="65" pos:column="85"/></literal> <operator pos:line="65" pos:column="86">&lt;&lt;<pos:position pos:line="65" pos:column="94"/></operator> <name pos:line="65" pos:column="89">item<pos:position pos:line="65" pos:column="93"/></name> <operator pos:line="65" pos:column="94">&lt;&lt;<pos:position pos:line="65" pos:column="102"/></operator> <literal type="string" pos:line="65" pos:column="97">"' in '"<pos:position pos:line="65" pos:column="105"/></literal> <operator pos:line="65" pos:column="106">&lt;&lt;<pos:position pos:line="65" pos:column="114"/></operator> <name pos:line="65" pos:column="109">str<pos:position pos:line="65" pos:column="112"/></name> <operator pos:line="65" pos:column="113">&lt;&lt;<pos:position pos:line="65" pos:column="121"/></operator> <literal type="string" pos:line="65" pos:column="116">"'"<pos:position pos:line="65" pos:column="119"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="120"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="121"/></expr_stmt></block></then></if>

            <expr_stmt><expr><operator pos:line="67" pos:column="13">++<pos:position pos:line="67" pos:column="15"/></operator> <name><name pos:line="67" pos:column="16">ScFieldsInfo<pos:position pos:line="67" pos:column="28"/></name><index pos:line="67" pos:column="28">[<expr><name pos:line="67" pos:column="29">type<pos:position pos:line="67" pos:column="33"/></name></expr>]<pos:position pos:line="67" pos:column="34"/></index></name><operator pos:line="67" pos:column="34">.<pos:position pos:line="67" pos:column="35"/></operator><name><name pos:line="67" pos:column="35">stat<pos:position pos:line="67" pos:column="39"/></name><operator pos:line="67" pos:column="39">.<pos:position pos:line="67" pos:column="40"/></operator><name pos:line="67" pos:column="40">repCount<pos:position pos:line="67" pos:column="48"/></name></name></expr>;<pos:position pos:line="67" pos:column="49"/></expr_stmt>

            <continue pos:line="69" pos:column="13">continue;<pos:position pos:line="69" pos:column="22"/></continue>
        }<pos:position pos:line="70" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="72" pos:column="9">/* process directives */</comment>
        <switch pos:line="73" pos:column="9">switch <condition pos:line="73" pos:column="16">(<expr><name pos:line="73" pos:column="17">type<pos:position pos:line="73" pos:column="21"/></name></expr>)<pos:position pos:line="73" pos:column="22"/></condition> <block pos:line="73" pos:column="23">{
        <case pos:line="74" pos:column="9">case <expr><name pos:line="74" pos:column="14">SC_NO_STORE<pos:position pos:line="74" pos:column="25"/></name></expr>:<pos:position pos:line="74" pos:column="26"/></case>
            <expr_stmt><expr><call><name><name pos:line="75" pos:column="13">sct<pos:position pos:line="75" pos:column="16"/></name><operator pos:line="75" pos:column="16">-&gt;<pos:position pos:line="75" pos:column="21"/></operator><name pos:line="75" pos:column="18">noStore<pos:position pos:line="75" pos:column="25"/></name></name><argument_list pos:line="75" pos:column="25">(<argument><expr><literal type="boolean" pos:line="75" pos:column="26">true<pos:position pos:line="75" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="32"/></expr_stmt>
            <break pos:line="76" pos:column="13">break;<pos:position pos:line="76" pos:column="19"/></break>

        <case pos:line="78" pos:column="9">case <expr><name pos:line="78" pos:column="14">SC_NO_STORE_REMOTE<pos:position pos:line="78" pos:column="32"/></name></expr>:<pos:position pos:line="78" pos:column="33"/></case>
            <expr_stmt><expr><call><name><name pos:line="79" pos:column="13">sct<pos:position pos:line="79" pos:column="16"/></name><operator pos:line="79" pos:column="16">-&gt;<pos:position pos:line="79" pos:column="21"/></operator><name pos:line="79" pos:column="18">noStoreRemote<pos:position pos:line="79" pos:column="31"/></name></name><argument_list pos:line="79" pos:column="31">(<argument><expr><literal type="boolean" pos:line="79" pos:column="32">true<pos:position pos:line="79" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="38"/></expr_stmt>
            <break pos:line="80" pos:column="13">break;<pos:position pos:line="80" pos:column="19"/></break>

        <case pos:line="82" pos:column="9">case <expr><name pos:line="82" pos:column="14">SC_MAX_AGE<pos:position pos:line="82" pos:column="24"/></name></expr>:<pos:position pos:line="82" pos:column="25"/></case> <block pos:line="82" pos:column="26">{
            <decl_stmt><decl><type><name pos:line="83" pos:column="13">int<pos:position pos:line="83" pos:column="16"/></name></type> <name pos:line="83" pos:column="17">ma<pos:position pos:line="83" pos:column="19"/></name></decl>;<pos:position pos:line="83" pos:column="20"/></decl_stmt>
            <if pos:line="84" pos:column="13">if <condition pos:line="84" pos:column="16">(<expr><name pos:line="84" pos:column="17">p<pos:position pos:line="84" pos:column="18"/></name> <operator pos:line="84" pos:column="19">&amp;&amp;<pos:position pos:line="84" pos:column="29"/></operator> <call><name pos:line="84" pos:column="22">httpHeaderParseInt<pos:position pos:line="84" pos:column="40"/></name><argument_list pos:line="84" pos:column="40">(<argument><expr><name pos:line="84" pos:column="41">p<pos:position pos:line="84" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="84" pos:column="44">&amp;<pos:position pos:line="84" pos:column="49"/></operator><name pos:line="84" pos:column="45">ma<pos:position pos:line="84" pos:column="47"/></name></expr></argument>)<pos:position pos:line="84" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="84" pos:column="49"/></condition><then pos:line="84" pos:column="49"> <block pos:line="84" pos:column="50">{
                <expr_stmt><expr><call><name><name pos:line="85" pos:column="17">sct<pos:position pos:line="85" pos:column="20"/></name><operator pos:line="85" pos:column="20">-&gt;<pos:position pos:line="85" pos:column="25"/></operator><name pos:line="85" pos:column="22">maxAge<pos:position pos:line="85" pos:column="28"/></name></name><argument_list pos:line="85" pos:column="28">(<argument><expr><name pos:line="85" pos:column="29">ma<pos:position pos:line="85" pos:column="31"/></name></expr></argument>)<pos:position pos:line="85" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="33"/></expr_stmt>

                <if pos:line="87" pos:column="17">if <condition pos:line="87" pos:column="20">(<expr><operator pos:line="87" pos:column="21">(<pos:position pos:line="87" pos:column="22"/></operator><name pos:line="87" pos:column="22">p<pos:position pos:line="87" pos:column="23"/></name> <operator pos:line="87" pos:column="24">=<pos:position pos:line="87" pos:column="25"/></operator> <call><name pos:line="87" pos:column="26">strchr<pos:position pos:line="87" pos:column="32"/></name> <argument_list pos:line="87" pos:column="33">(<argument><expr><name pos:line="87" pos:column="34">p<pos:position pos:line="87" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="87" pos:column="37">'+'<pos:position pos:line="87" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="41"/></argument_list></call><operator pos:line="87" pos:column="41">)<pos:position pos:line="87" pos:column="42"/></operator></expr>)<pos:position pos:line="87" pos:column="43"/></condition><then pos:line="87" pos:column="43"> <block pos:line="87" pos:column="44">{
                    <decl_stmt><decl><type><name pos:line="88" pos:column="21">int<pos:position pos:line="88" pos:column="24"/></name></type> <name pos:line="88" pos:column="25">ms<pos:position pos:line="88" pos:column="27"/></name></decl>;<pos:position pos:line="88" pos:column="28"/></decl_stmt>
                    <expr_stmt><expr><operator pos:line="89" pos:column="21">++<pos:position pos:line="89" pos:column="23"/></operator><name pos:line="89" pos:column="23">p<pos:position pos:line="89" pos:column="24"/></name></expr>;<pos:position pos:line="89" pos:column="25"/></expr_stmt> <comment type="line" pos:line="89" pos:column="26">//skip the + char</comment>
                    <if pos:line="90" pos:column="21">if <condition pos:line="90" pos:column="24">(<expr><call><name pos:line="90" pos:column="25">httpHeaderParseInt<pos:position pos:line="90" pos:column="43"/></name><argument_list pos:line="90" pos:column="43">(<argument><expr><name pos:line="90" pos:column="44">p<pos:position pos:line="90" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="90" pos:column="47">&amp;<pos:position pos:line="90" pos:column="52"/></operator><name pos:line="90" pos:column="48">ms<pos:position pos:line="90" pos:column="50"/></name></expr></argument>)<pos:position pos:line="90" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="90" pos:column="52"/></condition><then pos:line="90" pos:column="52"> <block pos:line="90" pos:column="53">{
                        <expr_stmt><expr><call><name><name pos:line="91" pos:column="25">sct<pos:position pos:line="91" pos:column="28"/></name><operator pos:line="91" pos:column="28">-&gt;<pos:position pos:line="91" pos:column="33"/></operator><name pos:line="91" pos:column="30">maxStale<pos:position pos:line="91" pos:column="38"/></name></name><argument_list pos:line="91" pos:column="38">(<argument><expr><name pos:line="91" pos:column="39">ms<pos:position pos:line="91" pos:column="41"/></name></expr></argument>)<pos:position pos:line="91" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="43"/></expr_stmt>
                    }<pos:position pos:line="92" pos:column="22"/></block></then> <else pos:line="92" pos:column="23">else <block pos:line="92" pos:column="28">{
                        <expr_stmt><expr><call><name pos:line="93" pos:column="25">debugs<pos:position pos:line="93" pos:column="31"/></name><argument_list pos:line="93" pos:column="31">(<argument><expr><literal type="number" pos:line="93" pos:column="32">90<pos:position pos:line="93" pos:column="34"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="93" pos:column="36">2<pos:position pos:line="93" pos:column="37"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="93" pos:column="39">"sc: invalid max-stale specs near '"<pos:position pos:line="93" pos:column="75"/></literal> <operator pos:line="93" pos:column="76">&lt;&lt;<pos:position pos:line="93" pos:column="84"/></operator> <name pos:line="93" pos:column="79">item<pos:position pos:line="93" pos:column="83"/></name> <operator pos:line="93" pos:column="84">&lt;&lt;<pos:position pos:line="93" pos:column="92"/></operator> <literal type="string" pos:line="93" pos:column="87">"'"<pos:position pos:line="93" pos:column="90"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="92"/></expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="94" pos:column="25">sct<pos:position pos:line="94" pos:column="28"/></name><operator pos:line="94" pos:column="28">-&gt;<pos:position pos:line="94" pos:column="33"/></operator><name pos:line="94" pos:column="30">clearMaxStale<pos:position pos:line="94" pos:column="43"/></name></name><argument_list pos:line="94" pos:column="43">()<pos:position pos:line="94" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="46"/></expr_stmt>
                        <comment type="block" pos:line="95" pos:column="25">/* leave the max-age alone */</comment>
                    }<pos:position pos:line="96" pos:column="22"/></block></else></if>
                }<pos:position pos:line="97" pos:column="18"/></block></then></if>
            }<pos:position pos:line="98" pos:column="14"/></block></then> <else pos:line="98" pos:column="15">else <block pos:line="98" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="99" pos:column="17">debugs<pos:position pos:line="99" pos:column="23"/></name><argument_list pos:line="99" pos:column="23">(<argument><expr><literal type="number" pos:line="99" pos:column="24">90<pos:position pos:line="99" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="99" pos:column="28">2<pos:position pos:line="99" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="99" pos:column="31">"sc: invalid max-age specs near '"<pos:position pos:line="99" pos:column="65"/></literal> <operator pos:line="99" pos:column="66">&lt;&lt;<pos:position pos:line="99" pos:column="74"/></operator> <name pos:line="99" pos:column="69">item<pos:position pos:line="99" pos:column="73"/></name> <operator pos:line="99" pos:column="74">&lt;&lt;<pos:position pos:line="99" pos:column="82"/></operator> <literal type="string" pos:line="99" pos:column="77">"'"<pos:position pos:line="99" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="99" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="82"/></expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="100" pos:column="17">sct<pos:position pos:line="100" pos:column="20"/></name><operator pos:line="100" pos:column="20">-&gt;<pos:position pos:line="100" pos:column="25"/></operator><name pos:line="100" pos:column="22">clearMaxAge<pos:position pos:line="100" pos:column="33"/></name></name><argument_list pos:line="100" pos:column="33">()<pos:position pos:line="100" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="36"/></expr_stmt>
            }<pos:position pos:line="101" pos:column="14"/></block></else></if>

            <break pos:line="103" pos:column="13">break;<pos:position pos:line="103" pos:column="19"/></break>
        }<pos:position pos:line="104" pos:column="10"/></block>

        <case pos:line="106" pos:column="9">case <expr><name pos:line="106" pos:column="14">SC_CONTENT<pos:position pos:line="106" pos:column="24"/></name></expr>:<pos:position pos:line="106" pos:column="25"/></case>

            <if pos:line="108" pos:column="13">if <condition pos:line="108" pos:column="16">( <expr><name pos:line="108" pos:column="18">p<pos:position pos:line="108" pos:column="19"/></name> <operator pos:line="108" pos:column="20">&amp;&amp;<pos:position pos:line="108" pos:column="30"/></operator> <call><name pos:line="108" pos:column="23">httpHeaderParseQuotedString<pos:position pos:line="108" pos:column="50"/></name><argument_list pos:line="108" pos:column="50">(<argument><expr><name pos:line="108" pos:column="51">p<pos:position pos:line="108" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="54">vlen<pos:position pos:line="108" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="108" pos:column="60">&amp;<pos:position pos:line="108" pos:column="65"/></operator><name><name pos:line="108" pos:column="61">sct<pos:position pos:line="108" pos:column="64"/></name><operator pos:line="108" pos:column="64">-&gt;<pos:position pos:line="108" pos:column="69"/></operator><name pos:line="108" pos:column="66">content_<pos:position pos:line="108" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="108" pos:column="75"/></argument_list></call></expr>)<pos:position pos:line="108" pos:column="76"/></condition><then pos:line="108" pos:column="76"> <block pos:line="108" pos:column="77">{
                <expr_stmt><expr><call><name><name pos:line="109" pos:column="17">sct<pos:position pos:line="109" pos:column="20"/></name><operator pos:line="109" pos:column="20">-&gt;<pos:position pos:line="109" pos:column="25"/></operator><name pos:line="109" pos:column="22">setMask<pos:position pos:line="109" pos:column="29"/></name></name><argument_list pos:line="109" pos:column="29">(<argument><expr><name pos:line="109" pos:column="30">SC_CONTENT<pos:position pos:line="109" pos:column="40"/></name></expr></argument>,<argument><expr><literal type="boolean" pos:line="109" pos:column="41">true<pos:position pos:line="109" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="109" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="47"/></expr_stmt> <comment type="line" pos:line="109" pos:column="48">// ugly but saves a copy</comment>
            }<pos:position pos:line="110" pos:column="14"/></block></then> <else pos:line="110" pos:column="15">else <block pos:line="110" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="111" pos:column="17">debugs<pos:position pos:line="111" pos:column="23"/></name><argument_list pos:line="111" pos:column="23">(<argument><expr><literal type="number" pos:line="111" pos:column="24">90<pos:position pos:line="111" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="111" pos:column="28">2<pos:position pos:line="111" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="111" pos:column="31">"sc: invalid content= quoted string near '"<pos:position pos:line="111" pos:column="74"/></literal> <operator pos:line="111" pos:column="75">&lt;&lt;<pos:position pos:line="111" pos:column="83"/></operator> <name pos:line="111" pos:column="78">item<pos:position pos:line="111" pos:column="82"/></name> <operator pos:line="111" pos:column="83">&lt;&lt;<pos:position pos:line="111" pos:column="91"/></operator> <literal type="string" pos:line="111" pos:column="86">"'"<pos:position pos:line="111" pos:column="89"/></literal></expr></argument>)<pos:position pos:line="111" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="91"/></expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="112" pos:column="17">sct<pos:position pos:line="112" pos:column="20"/></name><operator pos:line="112" pos:column="20">-&gt;<pos:position pos:line="112" pos:column="25"/></operator><name pos:line="112" pos:column="22">clearContent<pos:position pos:line="112" pos:column="34"/></name></name><argument_list pos:line="112" pos:column="34">()<pos:position pos:line="112" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="37"/></expr_stmt>
            }<pos:position pos:line="113" pos:column="14"/></block></else></if>
            <break pos:line="114" pos:column="13">break;<pos:position pos:line="114" pos:column="19"/></break>

        <case pos:line="116" pos:column="9">case <expr><name pos:line="116" pos:column="14">SC_OTHER<pos:position pos:line="116" pos:column="22"/></name></expr>:<pos:position pos:line="116" pos:column="23"/></case>
        <default pos:line="117" pos:column="9">default:<pos:position pos:line="117" pos:column="17"/></default>
            <break pos:line="118" pos:column="13">break;<pos:position pos:line="118" pos:column="19"/></break>
        }<pos:position pos:line="119" pos:column="10"/></block></switch>
    }<pos:position pos:line="120" pos:column="6"/></block></while>

    <return pos:line="122" pos:column="5">return <expr><name><name pos:line="122" pos:column="12">sc<pos:position pos:line="122" pos:column="14"/></name><operator pos:line="122" pos:column="14">-&gt;<pos:position pos:line="122" pos:column="19"/></operator><name pos:line="122" pos:column="16">targets<pos:position pos:line="122" pos:column="23"/></name><operator pos:line="122" pos:column="23">.<pos:position pos:line="122" pos:column="24"/></operator><name pos:line="122" pos:column="24">head<pos:position pos:line="122" pos:column="28"/></name></name> <operator pos:line="122" pos:column="29">!=<pos:position pos:line="122" pos:column="31"/></operator> <name pos:line="122" pos:column="32">NULL<pos:position pos:line="122" pos:column="36"/></name></expr>;<pos:position pos:line="122" pos:column="37"/></return>
}<pos:position pos:line="123" pos:column="2"/></block></function></unit>
