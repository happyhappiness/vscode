<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2104_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">BodyProducer<pos:position pos:line="1" pos:column="18"/></name><operator pos:line="1" pos:column="18">::<pos:position pos:line="1" pos:column="20"/></operator><name pos:line="1" pos:column="20">stopProducingFor<pos:position pos:line="1" pos:column="36"/></name></name><parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><name><name pos:line="1" pos:column="37">RefCount<pos:position pos:line="1" pos:column="45"/></name><argument_list type="generic" pos:line="1" pos:column="45">&lt;<argument><expr><name pos:line="1" pos:column="46">BodyPipe<pos:position pos:line="1" pos:column="54"/></name></expr></argument>&gt;<pos:position pos:line="1" pos:column="58"/></argument_list></name> <modifier pos:line="1" pos:column="56">&amp;<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="57">p<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="60">bool<pos:position pos:line="1" pos:column="64"/></name></type> <name pos:line="1" pos:column="65">atEof<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="71"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="3" pos:column="5">debugs<pos:position pos:line="3" pos:column="11"/></name><argument_list pos:line="3" pos:column="11">(<argument><expr><literal type="number" pos:line="3" pos:column="12">91<pos:position pos:line="3" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="3" pos:column="15">7<pos:position pos:line="3" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="3" pos:column="18">this<pos:position pos:line="3" pos:column="22"/></name> <operator pos:line="3" pos:column="23">&lt;&lt;<pos:position pos:line="3" pos:column="31"/></operator> <literal type="string" pos:line="3" pos:column="26">" will not produce for "<pos:position pos:line="3" pos:column="50"/></literal> <operator pos:line="3" pos:column="51">&lt;&lt;<pos:position pos:line="3" pos:column="59"/></operator> <name pos:line="3" pos:column="54">p<pos:position pos:line="3" pos:column="55"/></name> <operator pos:line="3" pos:column="56">&lt;&lt;<pos:position pos:line="3" pos:column="64"/></operator> <literal type="string" pos:line="3" pos:column="59">"; atEof: "<pos:position pos:line="3" pos:column="70"/></literal> <operator pos:line="3" pos:column="71">&lt;&lt;<pos:position pos:line="3" pos:column="79"/></operator> <name pos:line="3" pos:column="74">atEof<pos:position pos:line="3" pos:column="79"/></name></expr></argument>)<pos:position pos:line="3" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="81"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">p<pos:position pos:line="4" pos:column="13"/></name> <operator pos:line="4" pos:column="14">!=<pos:position pos:line="4" pos:column="16"/></operator> <name pos:line="4" pos:column="17">NULL<pos:position pos:line="4" pos:column="21"/></name></expr></argument>)<pos:position pos:line="4" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="23"/></expr_stmt> <comment type="line" pos:line="4" pos:column="24">// be strict: the caller state may depend on this</comment>
    <expr_stmt><expr><call><name><name pos:line="5" pos:column="5">p<pos:position pos:line="5" pos:column="6"/></name><operator pos:line="5" pos:column="6">-&gt;<pos:position pos:line="5" pos:column="11"/></operator><name pos:line="5" pos:column="8">clearProducer<pos:position pos:line="5" pos:column="21"/></name></name><argument_list pos:line="5" pos:column="21">(<argument><expr><name pos:line="5" pos:column="22">atEof<pos:position pos:line="5" pos:column="27"/></name></expr></argument>)<pos:position pos:line="5" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name pos:line="6" pos:column="5">p<pos:position pos:line="6" pos:column="6"/></name> <operator pos:line="6" pos:column="7">=<pos:position pos:line="6" pos:column="8"/></operator> <name pos:line="6" pos:column="9">NULL<pos:position pos:line="6" pos:column="13"/></name></expr>;<pos:position pos:line="6" pos:column="14"/></expr_stmt>
}<pos:position pos:line="7" pos:column="2"/></block></function></unit>
