<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2219_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HttpStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">decideIfWeDoRanges<pos:position pos:line="2" pos:column="34"/></name></name> <parameter_list pos:line="2" pos:column="35">(<parameter><decl><type><name pos:line="2" pos:column="36">HttpRequest<pos:position pos:line="2" pos:column="47"/></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type> <name pos:line="2" pos:column="50">request<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="58"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">bool<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">result<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><literal type="boolean" pos:line="4" pos:column="19">true<pos:position pos:line="4" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
    <comment type="block" pos:line="5" pos:column="5">/* decide if we want to do Ranges ourselves
     * and fetch the whole object now)
     * We want to handle Ranges ourselves iff
     *    - we can actually parse client Range specs
     *    - the specs are expected to be simple enough (e.g. no out-of-order ranges)
     *    - reply will be cachable
     * (If the reply will be uncachable we have to throw it away after
     *  serving this request, so it is better to forward ranges to
     *  the server and fetch only the requested content)
     */</comment>

    <decl_stmt><decl><type><name pos:line="16" pos:column="5">int64_t<pos:position pos:line="16" pos:column="12"/></name></type> <name pos:line="16" pos:column="13">roffLimit<pos:position pos:line="16" pos:column="22"/></name> <init pos:line="16" pos:column="23">= <expr><call><name><name pos:line="16" pos:column="25">request<pos:position pos:line="16" pos:column="32"/></name><operator pos:line="16" pos:column="32">-&gt;<pos:position pos:line="16" pos:column="37"/></operator><name pos:line="16" pos:column="34">getRangeOffsetLimit<pos:position pos:line="16" pos:column="53"/></name></name><argument_list pos:line="16" pos:column="53">()<pos:position pos:line="16" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="56"/></decl_stmt>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name pos:line="18" pos:column="9">NULL<pos:position pos:line="18" pos:column="13"/></name> <operator pos:line="18" pos:column="14">==<pos:position pos:line="18" pos:column="16"/></operator> <name><name pos:line="18" pos:column="17">request<pos:position pos:line="18" pos:column="24"/></name><operator pos:line="18" pos:column="24">-&gt;<pos:position pos:line="18" pos:column="29"/></operator><name pos:line="18" pos:column="26">range<pos:position pos:line="18" pos:column="31"/></name></name> <operator pos:line="18" pos:column="32">||<pos:position pos:line="18" pos:column="34"/></operator> <operator pos:line="18" pos:column="35">!<pos:position pos:line="18" pos:column="36"/></operator><name><name pos:line="18" pos:column="36">request<pos:position pos:line="18" pos:column="43"/></name><operator pos:line="18" pos:column="43">-&gt;<pos:position pos:line="18" pos:column="48"/></operator><name pos:line="18" pos:column="45">flags<pos:position pos:line="18" pos:column="50"/></name><operator pos:line="18" pos:column="50">.<pos:position pos:line="18" pos:column="51"/></operator><name pos:line="18" pos:column="51">cachable<pos:position pos:line="18" pos:column="59"/></name></name>
            <operator pos:line="19" pos:column="13">||<pos:position pos:line="19" pos:column="15"/></operator> <call><name><name pos:line="19" pos:column="16">request<pos:position pos:line="19" pos:column="23"/></name><operator pos:line="19" pos:column="23">-&gt;<pos:position pos:line="19" pos:column="28"/></operator><name pos:line="19" pos:column="25">range<pos:position pos:line="19" pos:column="30"/></name><operator pos:line="19" pos:column="30">-&gt;<pos:position pos:line="19" pos:column="35"/></operator><name pos:line="19" pos:column="32">offsetLimitExceeded<pos:position pos:line="19" pos:column="51"/></name></name><argument_list pos:line="19" pos:column="51">(<argument><expr><name pos:line="19" pos:column="52">roffLimit<pos:position pos:line="19" pos:column="61"/></name></expr></argument>)<pos:position pos:line="19" pos:column="62"/></argument_list></call> <operator pos:line="19" pos:column="63">||<pos:position pos:line="19" pos:column="65"/></operator> <name><name pos:line="19" pos:column="66">request<pos:position pos:line="19" pos:column="73"/></name><operator pos:line="19" pos:column="73">-&gt;<pos:position pos:line="19" pos:column="78"/></operator><name pos:line="19" pos:column="75">flags<pos:position pos:line="19" pos:column="80"/></name><operator pos:line="19" pos:column="80">.<pos:position pos:line="19" pos:column="81"/></operator><name pos:line="19" pos:column="81">connectionAuth<pos:position pos:line="19" pos:column="95"/></name></name></expr>)<pos:position pos:line="19" pos:column="96"/></condition><then pos:line="19" pos:column="96">
        <block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="9">result<pos:position pos:line="20" pos:column="15"/></name> <operator pos:line="20" pos:column="16">=<pos:position pos:line="20" pos:column="17"/></operator> <literal type="boolean" pos:line="20" pos:column="18">false<pos:position pos:line="20" pos:column="23"/></literal></expr>;<pos:position pos:line="20" pos:column="24"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="22" pos:column="5">debugs<pos:position pos:line="22" pos:column="11"/></name><argument_list pos:line="22" pos:column="11">(<argument><expr><literal type="number" pos:line="22" pos:column="12">11<pos:position pos:line="22" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="16">8<pos:position pos:line="22" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="19">"decideIfWeDoRanges: range specs: "<pos:position pos:line="22" pos:column="54"/></literal> <operator pos:line="22" pos:column="55">&lt;&lt;<pos:position pos:line="22" pos:column="63"/></operator>
           <name><name pos:line="23" pos:column="12">request<pos:position pos:line="23" pos:column="19"/></name><operator pos:line="23" pos:column="19">-&gt;<pos:position pos:line="23" pos:column="24"/></operator><name pos:line="23" pos:column="21">range<pos:position pos:line="23" pos:column="26"/></name></name> <operator pos:line="23" pos:column="27">&lt;&lt;<pos:position pos:line="23" pos:column="35"/></operator> <literal type="string" pos:line="23" pos:column="30">", cachable: "<pos:position pos:line="23" pos:column="44"/></literal> <operator pos:line="23" pos:column="45">&lt;&lt;<pos:position pos:line="23" pos:column="53"/></operator>
           <name><name pos:line="24" pos:column="12">request<pos:position pos:line="24" pos:column="19"/></name><operator pos:line="24" pos:column="19">-&gt;<pos:position pos:line="24" pos:column="24"/></operator><name pos:line="24" pos:column="21">flags<pos:position pos:line="24" pos:column="26"/></name><operator pos:line="24" pos:column="26">.<pos:position pos:line="24" pos:column="27"/></operator><name pos:line="24" pos:column="27">cachable<pos:position pos:line="24" pos:column="35"/></name></name> <operator pos:line="24" pos:column="36">&lt;&lt;<pos:position pos:line="24" pos:column="44"/></operator> <literal type="string" pos:line="24" pos:column="39">"; we_do_ranges: "<pos:position pos:line="24" pos:column="57"/></literal> <operator pos:line="24" pos:column="58">&lt;&lt;<pos:position pos:line="24" pos:column="66"/></operator> <name pos:line="24" pos:column="61">result<pos:position pos:line="24" pos:column="67"/></name></expr></argument>)<pos:position pos:line="24" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="69"/></expr_stmt>

    <return pos:line="26" pos:column="5">return <expr><name pos:line="26" pos:column="12">result<pos:position pos:line="26" pos:column="18"/></name></expr>;<pos:position pos:line="26" pos:column="19"/></return>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
