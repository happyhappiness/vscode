<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_549_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">u_char<pos:position pos:line="1" pos:column="7"/></name> <modifier pos:line="1" pos:column="8">*<pos:position pos:line="1" pos:column="9"/></modifier></type>
<name pos:line="2" pos:column="1">asn_build_length<pos:position pos:line="2" pos:column="17"/></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><name pos:line="2" pos:column="18">u_char<pos:position pos:line="2" pos:column="24"/></name> <modifier pos:line="2" pos:column="25">*<pos:position pos:line="2" pos:column="26"/></modifier></type> <name pos:line="2" pos:column="27">data<pos:position pos:line="2" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="33">int<pos:position pos:line="2" pos:column="36"/></name> <modifier pos:line="2" pos:column="37">*<pos:position pos:line="2" pos:column="38"/></modifier></type><name pos:line="2" pos:column="38">datalength<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>,
                 <parameter><decl><type><name pos:line="3" pos:column="18">int<pos:position pos:line="3" pos:column="21"/></name></type> <name pos:line="3" pos:column="22">length<pos:position pos:line="3" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="30">int<pos:position pos:line="3" pos:column="33"/></name></type> <name pos:line="3" pos:column="34">truth<pos:position pos:line="3" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="40"/></parameter_list>
<comment type="block" pos:line="4" pos:column="1">/*   u_char *data;       IN - pointer to start of object */</comment>
<comment type="block" pos:line="5" pos:column="1">/*   int    *datalength; IN/OUT - # of valid bytes left in buf */</comment>
<comment type="block" pos:line="6" pos:column="1">/*   int     length;     IN - length of object */</comment>
<comment type="block" pos:line="7" pos:column="1">/*   int     truth;      IN - If 1, this is the true len. */</comment>
<block pos:line="8" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">u_char<pos:position pos:line="9" pos:column="11"/></name> <modifier pos:line="9" pos:column="12">*<pos:position pos:line="9" pos:column="13"/></modifier></type><name pos:line="9" pos:column="13">start_data<pos:position pos:line="9" pos:column="23"/></name> <init pos:line="9" pos:column="24">= <expr><name pos:line="9" pos:column="26">data<pos:position pos:line="9" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="31"/></decl_stmt>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name pos:line="11" pos:column="9">truth<pos:position pos:line="11" pos:column="14"/></name></expr>)<pos:position pos:line="11" pos:column="15"/></condition><then pos:line="11" pos:column="15"> <block pos:line="11" pos:column="16">{

        <comment type="block" pos:line="13" pos:column="9">/* no indefinite lengths sent */</comment>
        <if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">length<pos:position pos:line="14" pos:column="19"/></name> <operator pos:line="14" pos:column="20">&lt;<pos:position pos:line="14" pos:column="24"/></operator> <literal type="number" pos:line="14" pos:column="22">0x80<pos:position pos:line="14" pos:column="26"/></literal></expr>)<pos:position pos:line="14" pos:column="27"/></condition><then pos:line="14" pos:column="27"> <block pos:line="14" pos:column="28">{
            <if pos:line="15" pos:column="13">if <condition pos:line="15" pos:column="16">(<expr><operator pos:line="15" pos:column="17">*<pos:position pos:line="15" pos:column="18"/></operator><name pos:line="15" pos:column="18">datalength<pos:position pos:line="15" pos:column="28"/></name> <operator pos:line="15" pos:column="29">&lt;<pos:position pos:line="15" pos:column="33"/></operator> <literal type="number" pos:line="15" pos:column="31">1<pos:position pos:line="15" pos:column="32"/></literal></expr>)<pos:position pos:line="15" pos:column="33"/></condition><then pos:line="15" pos:column="33"> <block pos:line="15" pos:column="34">{
                <expr_stmt><expr><call><name pos:line="16" pos:column="17">snmp_set_api_error<pos:position pos:line="16" pos:column="35"/></name><argument_list pos:line="16" pos:column="35">(<argument><expr><name pos:line="16" pos:column="36">SNMPERR_ASN_ENCODE<pos:position pos:line="16" pos:column="54"/></name></expr></argument>)<pos:position pos:line="16" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="56"/></expr_stmt>
                <return pos:line="17" pos:column="17">return <expr><operator pos:line="17" pos:column="24">(<pos:position pos:line="17" pos:column="25"/></operator><name pos:line="17" pos:column="25">NULL<pos:position pos:line="17" pos:column="29"/></name><operator pos:line="17" pos:column="29">)<pos:position pos:line="17" pos:column="30"/></operator></expr>;<pos:position pos:line="17" pos:column="31"/></return>
            }<pos:position pos:line="18" pos:column="14"/></block></then></if>
            <expr_stmt><expr><operator pos:line="19" pos:column="13">*<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="14">data<pos:position pos:line="19" pos:column="18"/></name><operator pos:line="19" pos:column="18">++<pos:position pos:line="19" pos:column="20"/></operator> <operator pos:line="19" pos:column="21">=<pos:position pos:line="19" pos:column="22"/></operator> <operator pos:line="19" pos:column="23">(<pos:position pos:line="19" pos:column="24"/></operator><name pos:line="19" pos:column="24">u_char<pos:position pos:line="19" pos:column="30"/></name><operator pos:line="19" pos:column="30">)<pos:position pos:line="19" pos:column="31"/></operator> <name pos:line="19" pos:column="32">length<pos:position pos:line="19" pos:column="38"/></name></expr>;<pos:position pos:line="19" pos:column="39"/></expr_stmt>

        }<pos:position pos:line="21" pos:column="10"/></block></then> <elseif pos:line="21" pos:column="11">else <if pos:line="21" pos:column="16">if <condition pos:line="21" pos:column="19">(<expr><name pos:line="21" pos:column="20">length<pos:position pos:line="21" pos:column="26"/></name> <operator pos:line="21" pos:column="27">&lt;=<pos:position pos:line="21" pos:column="32"/></operator> <literal type="number" pos:line="21" pos:column="30">0xFF<pos:position pos:line="21" pos:column="34"/></literal></expr>)<pos:position pos:line="21" pos:column="35"/></condition><then pos:line="21" pos:column="35"> <block pos:line="21" pos:column="36">{
            <if pos:line="22" pos:column="13">if <condition pos:line="22" pos:column="16">(<expr><operator pos:line="22" pos:column="17">*<pos:position pos:line="22" pos:column="18"/></operator><name pos:line="22" pos:column="18">datalength<pos:position pos:line="22" pos:column="28"/></name> <operator pos:line="22" pos:column="29">&lt;<pos:position pos:line="22" pos:column="33"/></operator> <literal type="number" pos:line="22" pos:column="31">2<pos:position pos:line="22" pos:column="32"/></literal></expr>)<pos:position pos:line="22" pos:column="33"/></condition><then pos:line="22" pos:column="33"> <block pos:line="22" pos:column="34">{
                <expr_stmt><expr><call><name pos:line="23" pos:column="17">snmp_set_api_error<pos:position pos:line="23" pos:column="35"/></name><argument_list pos:line="23" pos:column="35">(<argument><expr><name pos:line="23" pos:column="36">SNMPERR_ASN_ENCODE<pos:position pos:line="23" pos:column="54"/></name></expr></argument>)<pos:position pos:line="23" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="56"/></expr_stmt>
                <return pos:line="24" pos:column="17">return <expr><operator pos:line="24" pos:column="24">(<pos:position pos:line="24" pos:column="25"/></operator><name pos:line="24" pos:column="25">NULL<pos:position pos:line="24" pos:column="29"/></name><operator pos:line="24" pos:column="29">)<pos:position pos:line="24" pos:column="30"/></operator></expr>;<pos:position pos:line="24" pos:column="31"/></return>
            }<pos:position pos:line="25" pos:column="14"/></block></then></if>
            <expr_stmt><expr><operator pos:line="26" pos:column="13">*<pos:position pos:line="26" pos:column="14"/></operator><name pos:line="26" pos:column="14">data<pos:position pos:line="26" pos:column="18"/></name><operator pos:line="26" pos:column="18">++<pos:position pos:line="26" pos:column="20"/></operator> <operator pos:line="26" pos:column="21">=<pos:position pos:line="26" pos:column="22"/></operator> <call pos:line="26" pos:column="23">(<name pos:line="26" pos:column="24">u_char<pos:position pos:line="26" pos:column="30"/></name>) <argument_list pos:line="26" pos:column="32">(<argument><expr><literal type="number" pos:line="26" pos:column="33">0x01<pos:position pos:line="26" pos:column="37"/></literal> <operator pos:line="26" pos:column="38">|<pos:position pos:line="26" pos:column="39"/></operator> <name pos:line="26" pos:column="40">ASN_LONG_LEN<pos:position pos:line="26" pos:column="52"/></name></expr></argument>)<pos:position pos:line="26" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="54"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="27" pos:column="13">*<pos:position pos:line="27" pos:column="14"/></operator><name pos:line="27" pos:column="14">data<pos:position pos:line="27" pos:column="18"/></name><operator pos:line="27" pos:column="18">++<pos:position pos:line="27" pos:column="20"/></operator> <operator pos:line="27" pos:column="21">=<pos:position pos:line="27" pos:column="22"/></operator> <operator pos:line="27" pos:column="23">(<pos:position pos:line="27" pos:column="24"/></operator><name pos:line="27" pos:column="24">u_char<pos:position pos:line="27" pos:column="30"/></name><operator pos:line="27" pos:column="30">)<pos:position pos:line="27" pos:column="31"/></operator> <name pos:line="27" pos:column="32">length<pos:position pos:line="27" pos:column="38"/></name></expr>;<pos:position pos:line="27" pos:column="39"/></expr_stmt>
        }<pos:position pos:line="28" pos:column="10"/></block></then></if></elseif> <else pos:line="28" pos:column="11">else <block pos:line="28" pos:column="16">{		<comment type="block" pos:line="28" pos:column="33">/* 0xFF &lt; length &lt;= 0xFFFF */</comment>
            <if pos:line="29" pos:column="13">if <condition pos:line="29" pos:column="16">(<expr><operator pos:line="29" pos:column="17">*<pos:position pos:line="29" pos:column="18"/></operator><name pos:line="29" pos:column="18">datalength<pos:position pos:line="29" pos:column="28"/></name> <operator pos:line="29" pos:column="29">&lt;<pos:position pos:line="29" pos:column="33"/></operator> <literal type="number" pos:line="29" pos:column="31">3<pos:position pos:line="29" pos:column="32"/></literal></expr>)<pos:position pos:line="29" pos:column="33"/></condition><then pos:line="29" pos:column="33"> <block pos:line="29" pos:column="34">{
                <expr_stmt><expr><call><name pos:line="30" pos:column="17">snmp_set_api_error<pos:position pos:line="30" pos:column="35"/></name><argument_list pos:line="30" pos:column="35">(<argument><expr><name pos:line="30" pos:column="36">SNMPERR_ASN_ENCODE<pos:position pos:line="30" pos:column="54"/></name></expr></argument>)<pos:position pos:line="30" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="56"/></expr_stmt>
                <return pos:line="31" pos:column="17">return <expr><operator pos:line="31" pos:column="24">(<pos:position pos:line="31" pos:column="25"/></operator><name pos:line="31" pos:column="25">NULL<pos:position pos:line="31" pos:column="29"/></name><operator pos:line="31" pos:column="29">)<pos:position pos:line="31" pos:column="30"/></operator></expr>;<pos:position pos:line="31" pos:column="31"/></return>
            }<pos:position pos:line="32" pos:column="14"/></block></then></if>
            <expr_stmt><expr><operator pos:line="33" pos:column="13">*<pos:position pos:line="33" pos:column="14"/></operator><name pos:line="33" pos:column="14">data<pos:position pos:line="33" pos:column="18"/></name><operator pos:line="33" pos:column="18">++<pos:position pos:line="33" pos:column="20"/></operator> <operator pos:line="33" pos:column="21">=<pos:position pos:line="33" pos:column="22"/></operator> <call pos:line="33" pos:column="23">(<name pos:line="33" pos:column="24">u_char<pos:position pos:line="33" pos:column="30"/></name>) <argument_list pos:line="33" pos:column="32">(<argument><expr><literal type="number" pos:line="33" pos:column="33">0x02<pos:position pos:line="33" pos:column="37"/></literal> <operator pos:line="33" pos:column="38">|<pos:position pos:line="33" pos:column="39"/></operator> <name pos:line="33" pos:column="40">ASN_LONG_LEN<pos:position pos:line="33" pos:column="52"/></name></expr></argument>)<pos:position pos:line="33" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="54"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="34" pos:column="13">*<pos:position pos:line="34" pos:column="14"/></operator><name pos:line="34" pos:column="14">data<pos:position pos:line="34" pos:column="18"/></name><operator pos:line="34" pos:column="18">++<pos:position pos:line="34" pos:column="20"/></operator> <operator pos:line="34" pos:column="21">=<pos:position pos:line="34" pos:column="22"/></operator> <call pos:line="34" pos:column="23">(<name pos:line="34" pos:column="24">u_char<pos:position pos:line="34" pos:column="30"/></name>) <argument_list pos:line="34" pos:column="32">(<argument><expr><operator pos:line="34" pos:column="33">(<pos:position pos:line="34" pos:column="34"/></operator><name pos:line="34" pos:column="34">length<pos:position pos:line="34" pos:column="40"/></name> <operator pos:line="34" pos:column="41">&gt;&gt;<pos:position pos:line="34" pos:column="46"/></operator> <literal type="number" pos:line="34" pos:column="44">8<pos:position pos:line="34" pos:column="45"/></literal><operator pos:line="34" pos:column="45">)<pos:position pos:line="34" pos:column="46"/></operator> <operator pos:line="34" pos:column="47">&amp;<pos:position pos:line="34" pos:column="52"/></operator> <literal type="number" pos:line="34" pos:column="49">0xFF<pos:position pos:line="34" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="55"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="35" pos:column="13">*<pos:position pos:line="35" pos:column="14"/></operator><name pos:line="35" pos:column="14">data<pos:position pos:line="35" pos:column="18"/></name><operator pos:line="35" pos:column="18">++<pos:position pos:line="35" pos:column="20"/></operator> <operator pos:line="35" pos:column="21">=<pos:position pos:line="35" pos:column="22"/></operator> <call pos:line="35" pos:column="23">(<name pos:line="35" pos:column="24">u_char<pos:position pos:line="35" pos:column="30"/></name>) <argument_list pos:line="35" pos:column="32">(<argument><expr><name pos:line="35" pos:column="33">length<pos:position pos:line="35" pos:column="39"/></name> <operator pos:line="35" pos:column="40">&amp;<pos:position pos:line="35" pos:column="45"/></operator> <literal type="number" pos:line="35" pos:column="42">0xFF<pos:position pos:line="35" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="48"/></expr_stmt>
        }<pos:position pos:line="36" pos:column="10"/></block></else></if>

    }<pos:position pos:line="38" pos:column="6"/></block></then> <else pos:line="38" pos:column="7">else <block pos:line="38" pos:column="12">{

        <comment type="block" pos:line="40" pos:column="9">/* Don't know if this is the true length.  Make sure it's large
         * enough for later.
         */</comment>
        <if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><operator pos:line="43" pos:column="13">*<pos:position pos:line="43" pos:column="14"/></operator><name pos:line="43" pos:column="14">datalength<pos:position pos:line="43" pos:column="24"/></name> <operator pos:line="43" pos:column="25">&lt;<pos:position pos:line="43" pos:column="29"/></operator> <literal type="number" pos:line="43" pos:column="27">3<pos:position pos:line="43" pos:column="28"/></literal></expr>)<pos:position pos:line="43" pos:column="29"/></condition><then pos:line="43" pos:column="29"> <block pos:line="43" pos:column="30">{
            <expr_stmt><expr><call><name pos:line="44" pos:column="13">snmp_set_api_error<pos:position pos:line="44" pos:column="31"/></name><argument_list pos:line="44" pos:column="31">(<argument><expr><name pos:line="44" pos:column="32">SNMPERR_ASN_ENCODE<pos:position pos:line="44" pos:column="50"/></name></expr></argument>)<pos:position pos:line="44" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="52"/></expr_stmt>
            <return pos:line="45" pos:column="13">return <expr><operator pos:line="45" pos:column="20">(<pos:position pos:line="45" pos:column="21"/></operator><name pos:line="45" pos:column="21">NULL<pos:position pos:line="45" pos:column="25"/></name><operator pos:line="45" pos:column="25">)<pos:position pos:line="45" pos:column="26"/></operator></expr>;<pos:position pos:line="45" pos:column="27"/></return>
        }<pos:position pos:line="46" pos:column="10"/></block></then></if>
        <expr_stmt><expr><operator pos:line="47" pos:column="9">*<pos:position pos:line="47" pos:column="10"/></operator><name pos:line="47" pos:column="10">data<pos:position pos:line="47" pos:column="14"/></name><operator pos:line="47" pos:column="14">++<pos:position pos:line="47" pos:column="16"/></operator> <operator pos:line="47" pos:column="17">=<pos:position pos:line="47" pos:column="18"/></operator> <call pos:line="47" pos:column="19">(<name pos:line="47" pos:column="20">u_char<pos:position pos:line="47" pos:column="26"/></name>) <argument_list pos:line="47" pos:column="28">(<argument><expr><literal type="number" pos:line="47" pos:column="29">0x02<pos:position pos:line="47" pos:column="33"/></literal> <operator pos:line="47" pos:column="34">|<pos:position pos:line="47" pos:column="35"/></operator> <name pos:line="47" pos:column="36">ASN_LONG_LEN<pos:position pos:line="47" pos:column="48"/></name></expr></argument>)<pos:position pos:line="47" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="48" pos:column="9">*<pos:position pos:line="48" pos:column="10"/></operator><name pos:line="48" pos:column="10">data<pos:position pos:line="48" pos:column="14"/></name><operator pos:line="48" pos:column="14">++<pos:position pos:line="48" pos:column="16"/></operator> <operator pos:line="48" pos:column="17">=<pos:position pos:line="48" pos:column="18"/></operator> <call pos:line="48" pos:column="19">(<name pos:line="48" pos:column="20">u_char<pos:position pos:line="48" pos:column="26"/></name>) <argument_list pos:line="48" pos:column="28">(<argument><expr><operator pos:line="48" pos:column="29">(<pos:position pos:line="48" pos:column="30"/></operator><name pos:line="48" pos:column="30">length<pos:position pos:line="48" pos:column="36"/></name> <operator pos:line="48" pos:column="37">&gt;&gt;<pos:position pos:line="48" pos:column="42"/></operator> <literal type="number" pos:line="48" pos:column="40">8<pos:position pos:line="48" pos:column="41"/></literal><operator pos:line="48" pos:column="41">)<pos:position pos:line="48" pos:column="42"/></operator> <operator pos:line="48" pos:column="43">&amp;<pos:position pos:line="48" pos:column="48"/></operator> <literal type="number" pos:line="48" pos:column="45">0xFF<pos:position pos:line="48" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="51"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="49" pos:column="9">*<pos:position pos:line="49" pos:column="10"/></operator><name pos:line="49" pos:column="10">data<pos:position pos:line="49" pos:column="14"/></name><operator pos:line="49" pos:column="14">++<pos:position pos:line="49" pos:column="16"/></operator> <operator pos:line="49" pos:column="17">=<pos:position pos:line="49" pos:column="18"/></operator> <call pos:line="49" pos:column="19">(<name pos:line="49" pos:column="20">u_char<pos:position pos:line="49" pos:column="26"/></name>) <argument_list pos:line="49" pos:column="28">(<argument><expr><name pos:line="49" pos:column="29">length<pos:position pos:line="49" pos:column="35"/></name> <operator pos:line="49" pos:column="36">&amp;<pos:position pos:line="49" pos:column="41"/></operator> <literal type="number" pos:line="49" pos:column="38">0xFF<pos:position pos:line="49" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="50" pos:column="6"/></block></else></if>

    <expr_stmt><expr><operator pos:line="52" pos:column="5">*<pos:position pos:line="52" pos:column="6"/></operator><name pos:line="52" pos:column="6">datalength<pos:position pos:line="52" pos:column="16"/></name> <operator pos:line="52" pos:column="17">-=<pos:position pos:line="52" pos:column="19"/></operator> <operator pos:line="52" pos:column="20">(<pos:position pos:line="52" pos:column="21"/></operator><name pos:line="52" pos:column="21">data<pos:position pos:line="52" pos:column="25"/></name> <operator pos:line="52" pos:column="26">-<pos:position pos:line="52" pos:column="27"/></operator> <name pos:line="52" pos:column="28">start_data<pos:position pos:line="52" pos:column="38"/></name><operator pos:line="52" pos:column="38">)<pos:position pos:line="52" pos:column="39"/></operator></expr>;<pos:position pos:line="52" pos:column="40"/></expr_stmt>
    <return pos:line="53" pos:column="5">return <expr><operator pos:line="53" pos:column="12">(<pos:position pos:line="53" pos:column="13"/></operator><name pos:line="53" pos:column="13">data<pos:position pos:line="53" pos:column="17"/></name><operator pos:line="53" pos:column="17">)<pos:position pos:line="53" pos:column="18"/></operator></expr>;<pos:position pos:line="53" pos:column="19"/></return>
}<pos:position pos:line="54" pos:column="2"/></block></function></unit>
