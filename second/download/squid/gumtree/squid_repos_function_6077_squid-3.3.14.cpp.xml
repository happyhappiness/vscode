<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6077_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ESIVariableProcessor<pos:position pos:line="2" pos:column="21"/></name><operator pos:line="2" pos:column="21">::<pos:position pos:line="2" pos:column="23"/></operator><name pos:line="2" pos:column="23">doFunction<pos:position pos:line="2" pos:column="33"/></name></name><parameter_list pos:line="2" pos:column="33">()<pos:position pos:line="2" pos:column="35"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">!<pos:position pos:line="4" pos:column="10"/></operator><name pos:line="4" pos:column="10">currentFunction<pos:position pos:line="4" pos:column="25"/></name></expr>)<pos:position pos:line="4" pos:column="26"/></condition><then pos:line="4" pos:column="26">
        <block type="pseudo"><return pos:line="5" pos:column="9">return;<pos:position pos:line="5" pos:column="16"/></return></block></then></if>

    <comment type="block" pos:line="7" pos:column="5">/* stay in here whilst operating */</comment>
    <while pos:line="8" pos:column="5">while <condition pos:line="8" pos:column="11">(<expr><name pos:line="8" pos:column="12">pos<pos:position pos:line="8" pos:column="15"/></name> <operator pos:line="8" pos:column="16">&lt;<pos:position pos:line="8" pos:column="20"/></operator> <name pos:line="8" pos:column="18">len<pos:position pos:line="8" pos:column="21"/></name> <operator pos:line="8" pos:column="22">&amp;&amp;<pos:position pos:line="8" pos:column="32"/></operator> <name pos:line="8" pos:column="25">state<pos:position pos:line="8" pos:column="30"/></name></expr>)<pos:position pos:line="8" pos:column="31"/></condition>
        <block type="pseudo"><switch pos:line="9" pos:column="9">switch <condition pos:line="9" pos:column="16">(<expr><name pos:line="9" pos:column="17">state<pos:position pos:line="9" pos:column="22"/></name></expr>)<pos:position pos:line="9" pos:column="23"/></condition> <block pos:line="9" pos:column="24">{

        <case pos:line="11" pos:column="9">case <expr><literal type="number" pos:line="11" pos:column="14">2<pos:position pos:line="11" pos:column="15"/></literal></expr>:<pos:position pos:line="11" pos:column="16"/></case> <comment type="block" pos:line="11" pos:column="17">/* looking for variable name */</comment>

            <if pos:line="13" pos:column="13">if <condition pos:line="13" pos:column="16">(<expr><operator pos:line="13" pos:column="17">!<pos:position pos:line="13" pos:column="18"/></operator><call><name pos:line="13" pos:column="18">validChar<pos:position pos:line="13" pos:column="27"/></name><argument_list pos:line="13" pos:column="27">(<argument><expr><name><name pos:line="13" pos:column="28">string<pos:position pos:line="13" pos:column="34"/></name><index pos:line="13" pos:column="34">[<expr><name pos:line="13" pos:column="35">pos<pos:position pos:line="13" pos:column="38"/></name></expr>]<pos:position pos:line="13" pos:column="39"/></index></name></expr></argument>)<pos:position pos:line="13" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="41"/></condition><then pos:line="13" pos:column="41"> <block pos:line="13" pos:column="42">{
                <comment type="block" pos:line="14" pos:column="17">/* not a variable name char */</comment>

                <if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><name pos:line="16" pos:column="21">pos<pos:position pos:line="16" pos:column="24"/></name> <operator pos:line="16" pos:column="25">-<pos:position pos:line="16" pos:column="26"/></operator> <name pos:line="16" pos:column="27">var_pos<pos:position pos:line="16" pos:column="34"/></name></expr>)<pos:position pos:line="16" pos:column="35"/></condition><then pos:line="16" pos:column="35"> <block pos:line="16" pos:column="36">{
                    <expr_stmt><expr><name pos:line="17" pos:column="21">vartype<pos:position pos:line="17" pos:column="28"/></name> <operator pos:line="17" pos:column="29">=<pos:position pos:line="17" pos:column="30"/></operator> <call><name><name pos:line="17" pos:column="31">varState<pos:position pos:line="17" pos:column="39"/></name><operator pos:line="17" pos:column="39">-&gt;<pos:position pos:line="17" pos:column="44"/></operator><name pos:line="17" pos:column="41">GetVar<pos:position pos:line="17" pos:column="47"/></name></name> <argument_list pos:line="17" pos:column="48">(<argument><expr><name pos:line="17" pos:column="49">string<pos:position pos:line="17" pos:column="55"/></name> <operator pos:line="17" pos:column="56">+<pos:position pos:line="17" pos:column="57"/></operator> <name pos:line="17" pos:column="58">var_pos<pos:position pos:line="17" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="67">pos<pos:position pos:line="17" pos:column="70"/></name> <operator pos:line="17" pos:column="71">-<pos:position pos:line="17" pos:column="72"/></operator> <name pos:line="17" pos:column="73">var_pos<pos:position pos:line="17" pos:column="80"/></name></expr></argument>)<pos:position pos:line="17" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="82"/></expr_stmt>
                }<pos:position pos:line="18" pos:column="18"/></block></then></if>

                <expr_stmt><expr><name pos:line="20" pos:column="17">state<pos:position pos:line="20" pos:column="22"/></name> <operator pos:line="20" pos:column="23">=<pos:position pos:line="20" pos:column="24"/></operator> <literal type="number" pos:line="20" pos:column="25">3<pos:position pos:line="20" pos:column="26"/></literal></expr>;<pos:position pos:line="20" pos:column="27"/></expr_stmt>
            }<pos:position pos:line="21" pos:column="14"/></block></then> <else pos:line="21" pos:column="15">else <block pos:line="21" pos:column="20">{
                <expr_stmt><expr><operator pos:line="22" pos:column="17">++<pos:position pos:line="22" pos:column="19"/></operator><name pos:line="22" pos:column="19">pos<pos:position pos:line="22" pos:column="22"/></name></expr>;<pos:position pos:line="22" pos:column="23"/></expr_stmt>
            }<pos:position pos:line="23" pos:column="14"/></block></else></if>

            <break pos:line="25" pos:column="13">break;<pos:position pos:line="25" pos:column="19"/></break>

        <case pos:line="27" pos:column="9">case <expr><literal type="number" pos:line="27" pos:column="14">3<pos:position pos:line="27" pos:column="15"/></literal></expr>:<pos:position pos:line="27" pos:column="16"/></case> <comment type="block" pos:line="27" pos:column="17">/* looking for variable subref, end bracket or default indicator */</comment>

            <if pos:line="29" pos:column="13">if <condition pos:line="29" pos:column="16">(<expr><name><name pos:line="29" pos:column="17">string<pos:position pos:line="29" pos:column="23"/></name><index pos:line="29" pos:column="23">[<expr><name pos:line="29" pos:column="24">pos<pos:position pos:line="29" pos:column="27"/></name></expr>]<pos:position pos:line="29" pos:column="28"/></index></name> <operator pos:line="29" pos:column="29">==<pos:position pos:line="29" pos:column="31"/></operator> <literal type="char" pos:line="29" pos:column="32">')'<pos:position pos:line="29" pos:column="35"/></literal></expr>)<pos:position pos:line="29" pos:column="36"/></condition><then pos:line="29" pos:column="36"> <block pos:line="29" pos:column="37">{
                <comment type="block" pos:line="30" pos:column="17">/* end of string */</comment>
                <expr_stmt><expr><call><name pos:line="31" pos:column="17">eval<pos:position pos:line="31" pos:column="21"/></name><argument_list pos:line="31" pos:column="21">(<argument><expr><name pos:line="31" pos:column="22">vartype<pos:position pos:line="31" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="31">found_subref<pos:position pos:line="31" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="45">found_default<pos:position pos:line="31" pos:column="58"/></name></expr></argument>)<pos:position pos:line="31" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="60"/></expr_stmt>
                <expr_stmt><expr><name pos:line="32" pos:column="17">done_pos<pos:position pos:line="32" pos:column="25"/></name> <operator pos:line="32" pos:column="26">=<pos:position pos:line="32" pos:column="27"/></operator> <operator pos:line="32" pos:column="28">++<pos:position pos:line="32" pos:column="30"/></operator><name pos:line="32" pos:column="30">pos<pos:position pos:line="32" pos:column="33"/></name></expr>;<pos:position pos:line="32" pos:column="34"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="33" pos:column="17">safe_free<pos:position pos:line="33" pos:column="26"/></name><argument_list pos:line="33" pos:column="26">(<argument><expr><name pos:line="33" pos:column="27">found_subref<pos:position pos:line="33" pos:column="39"/></name></expr></argument>)<pos:position pos:line="33" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="41"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="34" pos:column="17">safe_free<pos:position pos:line="34" pos:column="26"/></name><argument_list pos:line="34" pos:column="26">(<argument><expr><name pos:line="34" pos:column="27">found_default<pos:position pos:line="34" pos:column="40"/></name></expr></argument>)<pos:position pos:line="34" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="42"/></expr_stmt>
                <expr_stmt><expr><name pos:line="35" pos:column="17">state<pos:position pos:line="35" pos:column="22"/></name> <operator pos:line="35" pos:column="23">=<pos:position pos:line="35" pos:column="24"/></operator> <name pos:line="35" pos:column="25">LOOKFORSTART<pos:position pos:line="35" pos:column="37"/></name></expr>;<pos:position pos:line="35" pos:column="38"/></expr_stmt>
            }<pos:position pos:line="36" pos:column="14"/></block></then> <elseif pos:line="36" pos:column="15">else <if pos:line="36" pos:column="20">if <condition pos:line="36" pos:column="23">(<expr><operator pos:line="36" pos:column="24">!<pos:position pos:line="36" pos:column="25"/></operator><name pos:line="36" pos:column="25">found_subref<pos:position pos:line="36" pos:column="37"/></name> <operator pos:line="36" pos:column="38">&amp;&amp;<pos:position pos:line="36" pos:column="48"/></operator> <operator pos:line="36" pos:column="41">!<pos:position pos:line="36" pos:column="42"/></operator><name pos:line="36" pos:column="42">found_default<pos:position pos:line="36" pos:column="55"/></name> <operator pos:line="36" pos:column="56">&amp;&amp;<pos:position pos:line="36" pos:column="66"/></operator> <name><name pos:line="36" pos:column="59">string<pos:position pos:line="36" pos:column="65"/></name><index pos:line="36" pos:column="65">[<expr><name pos:line="36" pos:column="66">pos<pos:position pos:line="36" pos:column="69"/></name></expr>]<pos:position pos:line="36" pos:column="70"/></index></name> <operator pos:line="36" pos:column="71">==<pos:position pos:line="36" pos:column="73"/></operator> <literal type="char" pos:line="36" pos:column="74">'{'<pos:position pos:line="36" pos:column="77"/></literal></expr>)<pos:position pos:line="36" pos:column="78"/></condition><then pos:line="36" pos:column="78"> <block pos:line="36" pos:column="79">{
                <expr_stmt><expr><call><name pos:line="37" pos:column="17">debugs<pos:position pos:line="37" pos:column="23"/></name><argument_list pos:line="37" pos:column="23">(<argument><expr><literal type="number" pos:line="37" pos:column="24">86<pos:position pos:line="37" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="28">6<pos:position pos:line="37" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="31">"ESIVarStateDoIt: Subref of some sort"<pos:position pos:line="37" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="71"/></expr_stmt>
                <comment type="block" pos:line="38" pos:column="17">/* subreference of some sort */</comment>
                <comment type="block" pos:line="39" pos:column="17">/* look for the entry name */</comment>
                <expr_stmt><expr><name pos:line="40" pos:column="17">var_pos<pos:position pos:line="40" pos:column="24"/></name> <operator pos:line="40" pos:column="25">=<pos:position pos:line="40" pos:column="26"/></operator> <operator pos:line="40" pos:column="27">++<pos:position pos:line="40" pos:column="29"/></operator><name pos:line="40" pos:column="29">pos<pos:position pos:line="40" pos:column="32"/></name></expr>;<pos:position pos:line="40" pos:column="33"/></expr_stmt>
                <expr_stmt><expr><name pos:line="41" pos:column="17">state<pos:position pos:line="41" pos:column="22"/></name> <operator pos:line="41" pos:column="23">=<pos:position pos:line="41" pos:column="24"/></operator> <literal type="number" pos:line="41" pos:column="25">4<pos:position pos:line="41" pos:column="26"/></literal></expr>;<pos:position pos:line="41" pos:column="27"/></expr_stmt>
            }<pos:position pos:line="42" pos:column="14"/></block></then></if></elseif> <elseif pos:line="42" pos:column="15">else <if pos:line="42" pos:column="20">if <condition pos:line="42" pos:column="23">(<expr><operator pos:line="42" pos:column="24">!<pos:position pos:line="42" pos:column="25"/></operator><name pos:line="42" pos:column="25">found_default<pos:position pos:line="42" pos:column="38"/></name> <operator pos:line="42" pos:column="39">&amp;&amp;<pos:position pos:line="42" pos:column="49"/></operator> <name><name pos:line="42" pos:column="42">string<pos:position pos:line="42" pos:column="48"/></name><index pos:line="42" pos:column="48">[<expr><name pos:line="42" pos:column="49">pos<pos:position pos:line="42" pos:column="52"/></name></expr>]<pos:position pos:line="42" pos:column="53"/></index></name> <operator pos:line="42" pos:column="54">==<pos:position pos:line="42" pos:column="56"/></operator> <literal type="char" pos:line="42" pos:column="57">'|'<pos:position pos:line="42" pos:column="60"/></literal></expr>)<pos:position pos:line="42" pos:column="61"/></condition><then pos:line="42" pos:column="61"> <block pos:line="42" pos:column="62">{
                <expr_stmt><expr><call><name pos:line="43" pos:column="17">debugs<pos:position pos:line="43" pos:column="23"/></name><argument_list pos:line="43" pos:column="23">(<argument><expr><literal type="number" pos:line="43" pos:column="24">86<pos:position pos:line="43" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="28">6<pos:position pos:line="43" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="31">"esiVarStateDoIt: Default present"<pos:position pos:line="43" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="67"/></expr_stmt>
                <comment type="block" pos:line="44" pos:column="17">/* extract default value */</comment>
                <expr_stmt><expr><name pos:line="45" pos:column="17">state<pos:position pos:line="45" pos:column="22"/></name> <operator pos:line="45" pos:column="23">=<pos:position pos:line="45" pos:column="24"/></operator> <literal type="number" pos:line="45" pos:column="25">5<pos:position pos:line="45" pos:column="26"/></literal></expr>;<pos:position pos:line="45" pos:column="27"/></expr_stmt>
                <expr_stmt><expr><name pos:line="46" pos:column="17">var_pos<pos:position pos:line="46" pos:column="24"/></name> <operator pos:line="46" pos:column="25">=<pos:position pos:line="46" pos:column="26"/></operator> <operator pos:line="46" pos:column="27">++<pos:position pos:line="46" pos:column="29"/></operator><name pos:line="46" pos:column="29">pos<pos:position pos:line="46" pos:column="32"/></name></expr>;<pos:position pos:line="46" pos:column="33"/></expr_stmt>
            }<pos:position pos:line="47" pos:column="14"/></block></then></if></elseif> <else pos:line="47" pos:column="15">else <block pos:line="47" pos:column="20">{
                <comment type="block" pos:line="48" pos:column="17">/* unexpected char, not a variable after all */</comment>
                <expr_stmt><expr><call><name pos:line="49" pos:column="17">debugs<pos:position pos:line="49" pos:column="23"/></name><argument_list pos:line="49" pos:column="23">(<argument><expr><literal type="number" pos:line="49" pos:column="24">86<pos:position pos:line="49" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="49" pos:column="28">6<pos:position pos:line="49" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="31">"esiVarStateDoIt: unexpected char after varname"<pos:position pos:line="49" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="81"/></expr_stmt>
                <expr_stmt><expr><name pos:line="50" pos:column="17">state<pos:position pos:line="50" pos:column="22"/></name> <operator pos:line="50" pos:column="23">=<pos:position pos:line="50" pos:column="24"/></operator> <name pos:line="50" pos:column="25">LOOKFORSTART<pos:position pos:line="50" pos:column="37"/></name></expr>;<pos:position pos:line="50" pos:column="38"/></expr_stmt>
                <expr_stmt><expr><name pos:line="51" pos:column="17">pos<pos:position pos:line="51" pos:column="20"/></name> <operator pos:line="51" pos:column="21">=<pos:position pos:line="51" pos:column="22"/></operator> <name pos:line="51" pos:column="23">done_pos<pos:position pos:line="51" pos:column="31"/></name> <operator pos:line="51" pos:column="32">+<pos:position pos:line="51" pos:column="33"/></operator> <literal type="number" pos:line="51" pos:column="34">2<pos:position pos:line="51" pos:column="35"/></literal></expr>;<pos:position pos:line="51" pos:column="36"/></expr_stmt>
            }<pos:position pos:line="52" pos:column="14"/></block></else></if>

            <break pos:line="54" pos:column="13">break;<pos:position pos:line="54" pos:column="19"/></break>

        <case pos:line="56" pos:column="9">case <expr><literal type="number" pos:line="56" pos:column="14">4<pos:position pos:line="56" pos:column="15"/></literal></expr>:<pos:position pos:line="56" pos:column="16"/></case> <comment type="block" pos:line="56" pos:column="17">/* looking for variable subref */</comment>

            <if pos:line="58" pos:column="13">if <condition pos:line="58" pos:column="16">(<expr><name><name pos:line="58" pos:column="17">string<pos:position pos:line="58" pos:column="23"/></name><index pos:line="58" pos:column="23">[<expr><name pos:line="58" pos:column="24">pos<pos:position pos:line="58" pos:column="27"/></name></expr>]<pos:position pos:line="58" pos:column="28"/></index></name> <operator pos:line="58" pos:column="29">==<pos:position pos:line="58" pos:column="31"/></operator> <literal type="char" pos:line="58" pos:column="32">'}'<pos:position pos:line="58" pos:column="35"/></literal></expr>)<pos:position pos:line="58" pos:column="36"/></condition><then pos:line="58" pos:column="36"> <block pos:line="58" pos:column="37">{
                <comment type="block" pos:line="59" pos:column="17">/* end of subref */</comment>
                <expr_stmt><expr><name pos:line="60" pos:column="17">found_subref<pos:position pos:line="60" pos:column="29"/></name> <operator pos:line="60" pos:column="30">=<pos:position pos:line="60" pos:column="31"/></operator> <call><name pos:line="60" pos:column="32">xstrndup<pos:position pos:line="60" pos:column="40"/></name> <argument_list pos:line="60" pos:column="41">(<argument><expr><operator pos:line="60" pos:column="42">&amp;<pos:position pos:line="60" pos:column="47"/></operator><name><name pos:line="60" pos:column="43">string<pos:position pos:line="60" pos:column="49"/></name><index pos:line="60" pos:column="49">[<expr><name pos:line="60" pos:column="50">var_pos<pos:position pos:line="60" pos:column="57"/></name></expr>]<pos:position pos:line="60" pos:column="58"/></index></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="60">pos<pos:position pos:line="60" pos:column="63"/></name> <operator pos:line="60" pos:column="64">-<pos:position pos:line="60" pos:column="65"/></operator> <name pos:line="60" pos:column="66">var_pos<pos:position pos:line="60" pos:column="73"/></name> <operator pos:line="60" pos:column="74">+<pos:position pos:line="60" pos:column="75"/></operator> <literal type="number" pos:line="60" pos:column="76">1<pos:position pos:line="60" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="79"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="61" pos:column="17">debugs<pos:position pos:line="61" pos:column="23"/></name><argument_list pos:line="61" pos:column="23">(<argument><expr><literal type="number" pos:line="61" pos:column="24">86<pos:position pos:line="61" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="61" pos:column="28">6<pos:position pos:line="61" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="31">"esiVarStateDoIt: found end of variable subref '"<pos:position pos:line="61" pos:column="80"/></literal> <operator pos:line="61" pos:column="81">&lt;&lt;<pos:position pos:line="61" pos:column="89"/></operator> <name pos:line="61" pos:column="84">found_subref<pos:position pos:line="61" pos:column="96"/></name> <operator pos:line="61" pos:column="97">&lt;&lt;<pos:position pos:line="61" pos:column="105"/></operator> <literal type="string" pos:line="61" pos:column="100">"'"<pos:position pos:line="61" pos:column="103"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="104"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="105"/></expr_stmt>
                <expr_stmt><expr><name pos:line="62" pos:column="17">state<pos:position pos:line="62" pos:column="22"/></name> <operator pos:line="62" pos:column="23">=<pos:position pos:line="62" pos:column="24"/></operator> <literal type="number" pos:line="62" pos:column="25">3<pos:position pos:line="62" pos:column="26"/></literal></expr>;<pos:position pos:line="62" pos:column="27"/></expr_stmt>
                <expr_stmt><expr><operator pos:line="63" pos:column="17">++<pos:position pos:line="63" pos:column="19"/></operator><name pos:line="63" pos:column="19">pos<pos:position pos:line="63" pos:column="22"/></name></expr>;<pos:position pos:line="63" pos:column="23"/></expr_stmt>
            }<pos:position pos:line="64" pos:column="14"/></block></then> <elseif pos:line="64" pos:column="15">else <if pos:line="64" pos:column="20">if <condition pos:line="64" pos:column="23">(<expr><operator pos:line="64" pos:column="24">!<pos:position pos:line="64" pos:column="25"/></operator><call><name pos:line="64" pos:column="25">validChar<pos:position pos:line="64" pos:column="34"/></name> <argument_list pos:line="64" pos:column="35">(<argument><expr><name><name pos:line="64" pos:column="36">string<pos:position pos:line="64" pos:column="42"/></name><index pos:line="64" pos:column="42">[<expr><name pos:line="64" pos:column="43">pos<pos:position pos:line="64" pos:column="46"/></name></expr>]<pos:position pos:line="64" pos:column="47"/></index></name></expr></argument>)<pos:position pos:line="64" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="64" pos:column="49"/></condition><then pos:line="64" pos:column="49"> <block pos:line="64" pos:column="50">{
                <expr_stmt><expr><call><name pos:line="65" pos:column="17">debugs<pos:position pos:line="65" pos:column="23"/></name><argument_list pos:line="65" pos:column="23">(<argument><expr><literal type="number" pos:line="65" pos:column="24">86<pos:position pos:line="65" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="65" pos:column="28">6<pos:position pos:line="65" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="31">"esiVarStateDoIt: found invalid char in variable subref"<pos:position pos:line="65" pos:column="87"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="89"/></expr_stmt>
                <comment type="block" pos:line="66" pos:column="17">/* not a valid subref */</comment>
                <expr_stmt><expr><call><name pos:line="67" pos:column="17">safe_free<pos:position pos:line="67" pos:column="26"/></name><argument_list pos:line="67" pos:column="26">(<argument><expr><name pos:line="67" pos:column="27">found_subref<pos:position pos:line="67" pos:column="39"/></name></expr></argument>)<pos:position pos:line="67" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="41"/></expr_stmt>
                <expr_stmt><expr><name pos:line="68" pos:column="17">state<pos:position pos:line="68" pos:column="22"/></name> <operator pos:line="68" pos:column="23">=<pos:position pos:line="68" pos:column="24"/></operator> <name pos:line="68" pos:column="25">LOOKFORSTART<pos:position pos:line="68" pos:column="37"/></name></expr>;<pos:position pos:line="68" pos:column="38"/></expr_stmt>
                <expr_stmt><expr><name pos:line="69" pos:column="17">pos<pos:position pos:line="69" pos:column="20"/></name> <operator pos:line="69" pos:column="21">=<pos:position pos:line="69" pos:column="22"/></operator> <name pos:line="69" pos:column="23">done_pos<pos:position pos:line="69" pos:column="31"/></name> <operator pos:line="69" pos:column="32">+<pos:position pos:line="69" pos:column="33"/></operator> <literal type="number" pos:line="69" pos:column="34">2<pos:position pos:line="69" pos:column="35"/></literal></expr>;<pos:position pos:line="69" pos:column="36"/></expr_stmt>
            }<pos:position pos:line="70" pos:column="14"/></block></then></if></elseif> <else pos:line="70" pos:column="15">else <block pos:line="70" pos:column="20">{
                <expr_stmt><expr><operator pos:line="71" pos:column="17">++<pos:position pos:line="71" pos:column="19"/></operator><name pos:line="71" pos:column="19">pos<pos:position pos:line="71" pos:column="22"/></name></expr>;<pos:position pos:line="71" pos:column="23"/></expr_stmt>
            }<pos:position pos:line="72" pos:column="14"/></block></else></if>

            <break pos:line="74" pos:column="13">break;<pos:position pos:line="74" pos:column="19"/></break>

        <case pos:line="76" pos:column="9">case <expr><literal type="number" pos:line="76" pos:column="14">5<pos:position pos:line="76" pos:column="15"/></literal></expr>:<pos:position pos:line="76" pos:column="16"/></case> <comment type="block" pos:line="76" pos:column="17">/* looking for a default value */</comment>

            <if pos:line="78" pos:column="13">if <condition pos:line="78" pos:column="16">(<expr><name><name pos:line="78" pos:column="17">string<pos:position pos:line="78" pos:column="23"/></name><index pos:line="78" pos:column="23">[<expr><name pos:line="78" pos:column="24">pos<pos:position pos:line="78" pos:column="27"/></name></expr>]<pos:position pos:line="78" pos:column="28"/></index></name> <operator pos:line="78" pos:column="29">==<pos:position pos:line="78" pos:column="31"/></operator> <literal type="char" pos:line="78" pos:column="32">'\''<pos:position pos:line="78" pos:column="36"/></literal></expr>)<pos:position pos:line="78" pos:column="37"/></condition><then pos:line="78" pos:column="37"> <block pos:line="78" pos:column="38">{
                <comment type="block" pos:line="79" pos:column="17">/* begins with a quote */</comment>
                <expr_stmt><expr><call><name pos:line="80" pos:column="17">debugs<pos:position pos:line="80" pos:column="23"/></name><argument_list pos:line="80" pos:column="23">(<argument><expr><literal type="number" pos:line="80" pos:column="24">86<pos:position pos:line="80" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="80" pos:column="28">6<pos:position pos:line="80" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="80" pos:column="31">"esiVarStateDoIt: found quoted default"<pos:position pos:line="80" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="72"/></expr_stmt>
                <expr_stmt><expr><name pos:line="81" pos:column="17">state<pos:position pos:line="81" pos:column="22"/></name> <operator pos:line="81" pos:column="23">=<pos:position pos:line="81" pos:column="24"/></operator> <literal type="number" pos:line="81" pos:column="25">6<pos:position pos:line="81" pos:column="26"/></literal></expr>;<pos:position pos:line="81" pos:column="27"/></expr_stmt>
                <expr_stmt><expr><name pos:line="82" pos:column="17">var_pos<pos:position pos:line="82" pos:column="24"/></name> <operator pos:line="82" pos:column="25">=<pos:position pos:line="82" pos:column="26"/></operator> <operator pos:line="82" pos:column="27">++<pos:position pos:line="82" pos:column="29"/></operator><name pos:line="82" pos:column="29">pos<pos:position pos:line="82" pos:column="32"/></name></expr>;<pos:position pos:line="82" pos:column="33"/></expr_stmt>
            }<pos:position pos:line="83" pos:column="14"/></block></then> <else pos:line="83" pos:column="15">else <block pos:line="83" pos:column="20">{
                <comment type="block" pos:line="84" pos:column="17">/* doesn't */</comment>
                <expr_stmt><expr><call><name pos:line="85" pos:column="17">debugs<pos:position pos:line="85" pos:column="23"/></name><argument_list pos:line="85" pos:column="23">(<argument><expr><literal type="number" pos:line="85" pos:column="24">86<pos:position pos:line="85" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="85" pos:column="28">6<pos:position pos:line="85" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="85" pos:column="31">"esiVarStateDoIt: found unquoted default"<pos:position pos:line="85" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="85" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="74"/></expr_stmt>
                <expr_stmt><expr><name pos:line="86" pos:column="17">state<pos:position pos:line="86" pos:column="22"/></name> <operator pos:line="86" pos:column="23">=<pos:position pos:line="86" pos:column="24"/></operator> <literal type="number" pos:line="86" pos:column="25">7<pos:position pos:line="86" pos:column="26"/></literal></expr>;<pos:position pos:line="86" pos:column="27"/></expr_stmt>
                <expr_stmt><expr><operator pos:line="87" pos:column="17">++<pos:position pos:line="87" pos:column="19"/></operator><name pos:line="87" pos:column="19">pos<pos:position pos:line="87" pos:column="22"/></name></expr>;<pos:position pos:line="87" pos:column="23"/></expr_stmt>
            }<pos:position pos:line="88" pos:column="14"/></block></else></if>

            <break pos:line="90" pos:column="13">break;<pos:position pos:line="90" pos:column="19"/></break>

        <case pos:line="92" pos:column="9">case <expr><literal type="number" pos:line="92" pos:column="14">6<pos:position pos:line="92" pos:column="15"/></literal></expr>:<pos:position pos:line="92" pos:column="16"/></case> <comment type="block" pos:line="92" pos:column="17">/* looking for a quote terminate default value */</comment>

            <if pos:line="94" pos:column="13">if <condition pos:line="94" pos:column="16">(<expr><name><name pos:line="94" pos:column="17">string<pos:position pos:line="94" pos:column="23"/></name><index pos:line="94" pos:column="23">[<expr><name pos:line="94" pos:column="24">pos<pos:position pos:line="94" pos:column="27"/></name></expr>]<pos:position pos:line="94" pos:column="28"/></index></name> <operator pos:line="94" pos:column="29">==<pos:position pos:line="94" pos:column="31"/></operator> <literal type="char" pos:line="94" pos:column="32">'\''<pos:position pos:line="94" pos:column="36"/></literal></expr>)<pos:position pos:line="94" pos:column="37"/></condition><then pos:line="94" pos:column="37"> <block pos:line="94" pos:column="38">{
                <comment type="block" pos:line="95" pos:column="17">/* end of default */</comment>
                <expr_stmt><expr><name pos:line="96" pos:column="17">found_default<pos:position pos:line="96" pos:column="30"/></name> <operator pos:line="96" pos:column="31">=<pos:position pos:line="96" pos:column="32"/></operator> <call><name pos:line="96" pos:column="33">xstrndup<pos:position pos:line="96" pos:column="41"/></name> <argument_list pos:line="96" pos:column="42">(<argument><expr><operator pos:line="96" pos:column="43">&amp;<pos:position pos:line="96" pos:column="48"/></operator><name><name pos:line="96" pos:column="44">string<pos:position pos:line="96" pos:column="50"/></name><index pos:line="96" pos:column="50">[<expr><name pos:line="96" pos:column="51">var_pos<pos:position pos:line="96" pos:column="58"/></name></expr>]<pos:position pos:line="96" pos:column="59"/></index></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="61">pos<pos:position pos:line="96" pos:column="64"/></name> <operator pos:line="96" pos:column="65">-<pos:position pos:line="96" pos:column="66"/></operator> <name pos:line="96" pos:column="67">var_pos<pos:position pos:line="96" pos:column="74"/></name> <operator pos:line="96" pos:column="75">+<pos:position pos:line="96" pos:column="76"/></operator> <literal type="number" pos:line="96" pos:column="77">1<pos:position pos:line="96" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="96" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="80"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="97" pos:column="17">debugs<pos:position pos:line="97" pos:column="23"/></name><argument_list pos:line="97" pos:column="23">(<argument><expr><literal type="number" pos:line="97" pos:column="24">86<pos:position pos:line="97" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="97" pos:column="28">6<pos:position pos:line="97" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="97" pos:column="31">"esiVarStateDoIt: found end of quoted default '"<pos:position pos:line="97" pos:column="79"/></literal> <operator pos:line="97" pos:column="80">&lt;&lt;<pos:position pos:line="97" pos:column="88"/></operator> <name pos:line="97" pos:column="83">found_default<pos:position pos:line="97" pos:column="96"/></name> <operator pos:line="97" pos:column="97">&lt;&lt;<pos:position pos:line="97" pos:column="105"/></operator> <literal type="string" pos:line="97" pos:column="100">"'"<pos:position pos:line="97" pos:column="103"/></literal></expr></argument>)<pos:position pos:line="97" pos:column="104"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="105"/></expr_stmt>
                <expr_stmt><expr><name pos:line="98" pos:column="17">state<pos:position pos:line="98" pos:column="22"/></name> <operator pos:line="98" pos:column="23">=<pos:position pos:line="98" pos:column="24"/></operator> <literal type="number" pos:line="98" pos:column="25">3<pos:position pos:line="98" pos:column="26"/></literal></expr>;<pos:position pos:line="98" pos:column="27"/></expr_stmt>
            }<pos:position pos:line="99" pos:column="14"/></block></then></if>

            <expr_stmt><expr><operator pos:line="101" pos:column="13">++<pos:position pos:line="101" pos:column="15"/></operator><name pos:line="101" pos:column="15">pos<pos:position pos:line="101" pos:column="18"/></name></expr>;<pos:position pos:line="101" pos:column="19"/></expr_stmt>
            <break pos:line="102" pos:column="13">break;<pos:position pos:line="102" pos:column="19"/></break>

        <case pos:line="104" pos:column="9">case <expr><literal type="number" pos:line="104" pos:column="14">7<pos:position pos:line="104" pos:column="15"/></literal></expr>:<pos:position pos:line="104" pos:column="16"/></case> <comment type="block" pos:line="104" pos:column="17">/* looking for } terminate default value */</comment>

            <if pos:line="106" pos:column="13">if <condition pos:line="106" pos:column="16">(<expr><name><name pos:line="106" pos:column="17">string<pos:position pos:line="106" pos:column="23"/></name><index pos:line="106" pos:column="23">[<expr><name pos:line="106" pos:column="24">pos<pos:position pos:line="106" pos:column="27"/></name></expr>]<pos:position pos:line="106" pos:column="28"/></index></name> <operator pos:line="106" pos:column="29">==<pos:position pos:line="106" pos:column="31"/></operator> <literal type="char" pos:line="106" pos:column="32">')'<pos:position pos:line="106" pos:column="35"/></literal></expr>)<pos:position pos:line="106" pos:column="36"/></condition><then pos:line="106" pos:column="36"> <block pos:line="106" pos:column="37">{
                <comment type="block" pos:line="107" pos:column="17">/* end of default - end of variable*/</comment>
                <expr_stmt><expr><name pos:line="108" pos:column="17">found_default<pos:position pos:line="108" pos:column="30"/></name> <operator pos:line="108" pos:column="31">=<pos:position pos:line="108" pos:column="32"/></operator> <call><name pos:line="108" pos:column="33">xstrndup<pos:position pos:line="108" pos:column="41"/></name> <argument_list pos:line="108" pos:column="42">(<argument><expr><operator pos:line="108" pos:column="43">&amp;<pos:position pos:line="108" pos:column="48"/></operator><name><name pos:line="108" pos:column="44">string<pos:position pos:line="108" pos:column="50"/></name><index pos:line="108" pos:column="50">[<expr><name pos:line="108" pos:column="51">var_pos<pos:position pos:line="108" pos:column="58"/></name></expr>]<pos:position pos:line="108" pos:column="59"/></index></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="61">pos<pos:position pos:line="108" pos:column="64"/></name> <operator pos:line="108" pos:column="65">-<pos:position pos:line="108" pos:column="66"/></operator> <name pos:line="108" pos:column="67">var_pos<pos:position pos:line="108" pos:column="74"/></name> <operator pos:line="108" pos:column="75">+<pos:position pos:line="108" pos:column="76"/></operator> <literal type="number" pos:line="108" pos:column="77">1<pos:position pos:line="108" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="108" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="80"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="109" pos:column="17">debugs<pos:position pos:line="109" pos:column="23"/></name><argument_list pos:line="109" pos:column="23">(<argument><expr><literal type="number" pos:line="109" pos:column="24">86<pos:position pos:line="109" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="109" pos:column="28">6<pos:position pos:line="109" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="109" pos:column="31">"esiVarStateDoIt: found end of variable (w/ unquoted default) '"<pos:position pos:line="109" pos:column="95"/></literal> <operator pos:line="109" pos:column="96">&lt;&lt;<pos:position pos:line="109" pos:column="104"/></operator> <name pos:line="109" pos:column="99">found_default<pos:position pos:line="109" pos:column="112"/></name> <operator pos:line="109" pos:column="113">&lt;&lt;<pos:position pos:line="109" pos:column="121"/></operator> <literal type="string" pos:line="109" pos:column="116">"'"<pos:position pos:line="109" pos:column="119"/></literal></expr></argument>)<pos:position pos:line="109" pos:column="120"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="121"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="110" pos:column="17">eval<pos:position pos:line="110" pos:column="21"/></name><argument_list pos:line="110" pos:column="21">(<argument><expr><name pos:line="110" pos:column="22">vartype<pos:position pos:line="110" pos:column="29"/></name></expr></argument>,<argument><expr><name pos:line="110" pos:column="30">found_subref<pos:position pos:line="110" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="110" pos:column="44">found_default<pos:position pos:line="110" pos:column="57"/></name></expr></argument>)<pos:position pos:line="110" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="59"/></expr_stmt>
                <expr_stmt><expr><name pos:line="111" pos:column="17">done_pos<pos:position pos:line="111" pos:column="25"/></name> <operator pos:line="111" pos:column="26">=<pos:position pos:line="111" pos:column="27"/></operator> <operator pos:line="111" pos:column="28">++<pos:position pos:line="111" pos:column="30"/></operator><name pos:line="111" pos:column="30">pos<pos:position pos:line="111" pos:column="33"/></name></expr>;<pos:position pos:line="111" pos:column="34"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="112" pos:column="17">safe_free<pos:position pos:line="112" pos:column="26"/></name><argument_list pos:line="112" pos:column="26">(<argument><expr><name pos:line="112" pos:column="27">found_default<pos:position pos:line="112" pos:column="40"/></name></expr></argument>)<pos:position pos:line="112" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="42"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="113" pos:column="17">safe_free<pos:position pos:line="113" pos:column="26"/></name><argument_list pos:line="113" pos:column="26">(<argument><expr><name pos:line="113" pos:column="27">found_subref<pos:position pos:line="113" pos:column="39"/></name></expr></argument>)<pos:position pos:line="113" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="41"/></expr_stmt>
                <expr_stmt><expr><name pos:line="114" pos:column="17">state<pos:position pos:line="114" pos:column="22"/></name> <operator pos:line="114" pos:column="23">=<pos:position pos:line="114" pos:column="24"/></operator> <name pos:line="114" pos:column="25">LOOKFORSTART<pos:position pos:line="114" pos:column="37"/></name></expr>;<pos:position pos:line="114" pos:column="38"/></expr_stmt>
            }<pos:position pos:line="115" pos:column="14"/></block></then></if>

            <expr_stmt><expr><operator pos:line="117" pos:column="13">++<pos:position pos:line="117" pos:column="15"/></operator><name pos:line="117" pos:column="15">pos<pos:position pos:line="117" pos:column="18"/></name></expr>;<pos:position pos:line="117" pos:column="19"/></expr_stmt>
            <break pos:line="118" pos:column="13">break;<pos:position pos:line="118" pos:column="19"/></break>

        <default pos:line="120" pos:column="9">default:<pos:position pos:line="120" pos:column="17"/></default>
            <expr_stmt><expr><call><name pos:line="121" pos:column="13">fatal<pos:position pos:line="121" pos:column="18"/></name><argument_list pos:line="121" pos:column="18">(<argument><expr><literal type="string" pos:line="121" pos:column="19">"esiVarStateDoIt: unexpected state\n"<pos:position pos:line="121" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="121" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="58"/></expr_stmt>
        }<pos:position pos:line="122" pos:column="10"/></block></switch></block></while>
}<pos:position pos:line="123" pos:column="2"/></block></function></unit>
