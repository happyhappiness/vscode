<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_360_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type>
<name pos:line="2" pos:column="1">RFCNB_Call<pos:position pos:line="2" pos:column="11"/></name><parameter_list pos:line="2" pos:column="11">(<parameter><decl><type><name pos:line="2" pos:column="12">char<pos:position pos:line="2" pos:column="16"/></name> <modifier pos:line="2" pos:column="17">*<pos:position pos:line="2" pos:column="18"/></modifier></type><name pos:line="2" pos:column="18">Called_Name<pos:position pos:line="2" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="31">char<pos:position pos:line="2" pos:column="35"/></name> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type><name pos:line="2" pos:column="37">Calling_Name<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="51">char<pos:position pos:line="2" pos:column="55"/></name> <modifier pos:line="2" pos:column="56">*<pos:position pos:line="2" pos:column="57"/></modifier></type><name pos:line="2" pos:column="57">Called_Address<pos:position pos:line="2" pos:column="71"/></name></decl></parameter>,
           <parameter><decl><type><name pos:line="3" pos:column="12">int<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">port<pos:position pos:line="3" pos:column="20"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="21"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="5" pos:column="5">struct<pos:position pos:line="5" pos:column="11"/></name> <name pos:line="5" pos:column="12">RFCNB_Con<pos:position pos:line="5" pos:column="21"/></name></name> <modifier pos:line="5" pos:column="22">*<pos:position pos:line="5" pos:column="23"/></modifier></type><name pos:line="5" pos:column="23">con<pos:position pos:line="5" pos:column="26"/></name></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">struct<pos:position pos:line="6" pos:column="11"/></name> <name pos:line="6" pos:column="12">in_addr<pos:position pos:line="6" pos:column="19"/></name></name></type> <name pos:line="6" pos:column="20">Dest_IP<pos:position pos:line="6" pos:column="27"/></name></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">Client<pos:position pos:line="7" pos:column="15"/></name></decl>;<pos:position pos:line="7" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">BOOL<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">redirect<pos:position pos:line="8" pos:column="18"/></name></decl>;<pos:position pos:line="8" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="9" pos:column="5">struct<pos:position pos:line="9" pos:column="11"/></name> <name pos:line="9" pos:column="12">redirect_addr<pos:position pos:line="9" pos:column="25"/></name></name> <modifier pos:line="9" pos:column="26">*<pos:position pos:line="9" pos:column="27"/></modifier></type><name pos:line="9" pos:column="27">redir_addr<pos:position pos:line="9" pos:column="37"/></name></decl>;<pos:position pos:line="9" pos:column="38"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">char<pos:position pos:line="10" pos:column="9"/></name> <modifier pos:line="10" pos:column="10">*<pos:position pos:line="10" pos:column="11"/></modifier></type><name pos:line="10" pos:column="11">Service_Address<pos:position pos:line="10" pos:column="26"/></name></decl>;<pos:position pos:line="10" pos:column="27"/></decl_stmt>

    <comment type="block" pos:line="12" pos:column="5">/* Now, we really should look up the port in /etc/services ... */</comment>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name pos:line="14" pos:column="9">port<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">==<pos:position pos:line="14" pos:column="16"/></operator> <literal type="number" pos:line="14" pos:column="17">0<pos:position pos:line="14" pos:column="18"/></literal></expr>)<pos:position pos:line="14" pos:column="19"/></condition><then pos:line="14" pos:column="19">
        <block type="pseudo"><expr_stmt><expr><name pos:line="15" pos:column="9">port<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">=<pos:position pos:line="15" pos:column="15"/></operator> <name pos:line="15" pos:column="16">RFCNB_Default_Port<pos:position pos:line="15" pos:column="34"/></name></expr>;<pos:position pos:line="15" pos:column="35"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="17" pos:column="5">/* Create a connection structure first */</comment>

    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><operator pos:line="19" pos:column="9">(<pos:position pos:line="19" pos:column="10"/></operator><name pos:line="19" pos:column="10">con<pos:position pos:line="19" pos:column="13"/></name> <operator pos:line="19" pos:column="14">=<pos:position pos:line="19" pos:column="15"/></operator> <operator pos:line="19" pos:column="16">(<pos:position pos:line="19" pos:column="17"/></operator>struct <name pos:line="19" pos:column="24">RFCNB_Con<pos:position pos:line="19" pos:column="33"/></name> <operator pos:line="19" pos:column="34">*<pos:position pos:line="19" pos:column="35"/></operator><operator pos:line="19" pos:column="35">)<pos:position pos:line="19" pos:column="36"/></operator> <call><name pos:line="19" pos:column="37">malloc<pos:position pos:line="19" pos:column="43"/></name><argument_list pos:line="19" pos:column="43">(<argument><expr><sizeof pos:line="19" pos:column="44">sizeof<argument_list pos:line="19" pos:column="50">(<argument><expr pos:line="19" pos:column="51">struct <name pos:line="19" pos:column="58">RFCNB_Con<pos:position pos:line="19" pos:column="67"/></name></expr></argument>)<pos:position pos:line="19" pos:column="68"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="19" pos:column="69"/></argument_list></call><operator pos:line="19" pos:column="69">)<pos:position pos:line="19" pos:column="70"/></operator> <operator pos:line="19" pos:column="71">==<pos:position pos:line="19" pos:column="73"/></operator> <name pos:line="19" pos:column="74">NULL<pos:position pos:line="19" pos:column="78"/></name></expr>)<pos:position pos:line="19" pos:column="79"/></condition><then pos:line="19" pos:column="79"> <block pos:line="19" pos:column="80">{	<comment type="block" pos:line="19" pos:column="89">/* Error in size */</comment>

        <expr_stmt><expr><name pos:line="21" pos:column="9">RFCNB_errno<pos:position pos:line="21" pos:column="20"/></name> <operator pos:line="21" pos:column="21">=<pos:position pos:line="21" pos:column="22"/></operator> <name pos:line="21" pos:column="23">RFCNBE_NoSpace<pos:position pos:line="21" pos:column="37"/></name></expr>;<pos:position pos:line="21" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><name pos:line="22" pos:column="9">RFCNB_saved_errno<pos:position pos:line="22" pos:column="26"/></name> <operator pos:line="22" pos:column="27">=<pos:position pos:line="22" pos:column="28"/></operator> <name pos:line="22" pos:column="29">errno<pos:position pos:line="22" pos:column="34"/></name></expr>;<pos:position pos:line="22" pos:column="35"/></expr_stmt>
        <return pos:line="23" pos:column="9">return <expr><operator pos:line="23" pos:column="16">(<pos:position pos:line="23" pos:column="17"/></operator><name pos:line="23" pos:column="17">NULL<pos:position pos:line="23" pos:column="21"/></name><operator pos:line="23" pos:column="21">)<pos:position pos:line="23" pos:column="22"/></operator></expr>;<pos:position pos:line="23" pos:column="23"/></return>

    }<pos:position pos:line="25" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="26" pos:column="5">con<pos:position pos:line="26" pos:column="8"/></name><operator pos:line="26" pos:column="8">-&gt;<pos:position pos:line="26" pos:column="13"/></operator><name pos:line="26" pos:column="10">fd<pos:position pos:line="26" pos:column="12"/></name></name> <operator pos:line="26" pos:column="13">=<pos:position pos:line="26" pos:column="14"/></operator> <operator pos:line="26" pos:column="15">-<pos:position pos:line="26" pos:column="16"/></operator><literal type="number" pos:line="26" pos:column="16">0<pos:position pos:line="26" pos:column="17"/></literal></expr>;<pos:position pos:line="26" pos:column="18"/></expr_stmt>		<comment type="block" pos:line="26" pos:column="33">/* no descriptor yet */</comment>
    <expr_stmt><expr><name><name pos:line="27" pos:column="5">con<pos:position pos:line="27" pos:column="8"/></name><operator pos:line="27" pos:column="8">-&gt;<pos:position pos:line="27" pos:column="13"/></operator><name pos:line="27" pos:column="10">rfc_errno<pos:position pos:line="27" pos:column="19"/></name></name> <operator pos:line="27" pos:column="20">=<pos:position pos:line="27" pos:column="21"/></operator> <literal type="number" pos:line="27" pos:column="22">0<pos:position pos:line="27" pos:column="23"/></literal></expr>;<pos:position pos:line="27" pos:column="24"/></expr_stmt>		<comment type="block" pos:line="27" pos:column="33">/* no error yet */</comment>
    <expr_stmt><expr><name><name pos:line="28" pos:column="5">con<pos:position pos:line="28" pos:column="8"/></name><operator pos:line="28" pos:column="8">-&gt;<pos:position pos:line="28" pos:column="13"/></operator><name pos:line="28" pos:column="10">timeout<pos:position pos:line="28" pos:column="17"/></name></name> <operator pos:line="28" pos:column="18">=<pos:position pos:line="28" pos:column="19"/></operator> <literal type="number" pos:line="28" pos:column="20">0<pos:position pos:line="28" pos:column="21"/></literal></expr>;<pos:position pos:line="28" pos:column="22"/></expr_stmt>		<comment type="block" pos:line="28" pos:column="33">/* no timeout   */</comment>
    <expr_stmt><expr><name><name pos:line="29" pos:column="5">con<pos:position pos:line="29" pos:column="8"/></name><operator pos:line="29" pos:column="8">-&gt;<pos:position pos:line="29" pos:column="13"/></operator><name pos:line="29" pos:column="10">redirects<pos:position pos:line="29" pos:column="19"/></name></name> <operator pos:line="29" pos:column="20">=<pos:position pos:line="29" pos:column="21"/></operator> <literal type="number" pos:line="29" pos:column="22">0<pos:position pos:line="29" pos:column="23"/></literal></expr>;<pos:position pos:line="29" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="30" pos:column="5">con<pos:position pos:line="30" pos:column="8"/></name><operator pos:line="30" pos:column="8">-&gt;<pos:position pos:line="30" pos:column="13"/></operator><name pos:line="30" pos:column="10">redirect_list<pos:position pos:line="30" pos:column="23"/></name></name> <operator pos:line="30" pos:column="24">=<pos:position pos:line="30" pos:column="25"/></operator> <name pos:line="30" pos:column="26">NULL<pos:position pos:line="30" pos:column="30"/></name></expr>;<pos:position pos:line="30" pos:column="31"/></expr_stmt>	<comment type="block" pos:line="30" pos:column="33">/* Fix bug still in version 0.50 */</comment>

    <comment type="block" pos:line="32" pos:column="5">/* Resolve that name into an IP address */</comment>

    <expr_stmt><expr><name pos:line="34" pos:column="5">Service_Address<pos:position pos:line="34" pos:column="20"/></name> <operator pos:line="34" pos:column="21">=<pos:position pos:line="34" pos:column="22"/></operator> <name pos:line="34" pos:column="23">Called_Name<pos:position pos:line="34" pos:column="34"/></name></expr>;<pos:position pos:line="34" pos:column="35"/></expr_stmt>
    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><call><name pos:line="35" pos:column="9">strcmp<pos:position pos:line="35" pos:column="15"/></name><argument_list pos:line="35" pos:column="15">(<argument><expr><name pos:line="35" pos:column="16">Called_Address<pos:position pos:line="35" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="32">""<pos:position pos:line="35" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="35"/></argument_list></call> <operator pos:line="35" pos:column="36">!=<pos:position pos:line="35" pos:column="38"/></operator> <literal type="number" pos:line="35" pos:column="39">0<pos:position pos:line="35" pos:column="40"/></literal></expr>)<pos:position pos:line="35" pos:column="41"/></condition><then pos:line="35" pos:column="41"> <block pos:line="35" pos:column="42">{	<comment type="block" pos:line="35" pos:column="49">/* If the Called Address = "" */</comment>
        <expr_stmt><expr><name pos:line="36" pos:column="9">Service_Address<pos:position pos:line="36" pos:column="24"/></name> <operator pos:line="36" pos:column="25">=<pos:position pos:line="36" pos:column="26"/></operator> <name pos:line="36" pos:column="27">Called_Address<pos:position pos:line="36" pos:column="41"/></name></expr>;<pos:position pos:line="36" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if>
    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><operator pos:line="38" pos:column="9">(<pos:position pos:line="38" pos:column="10"/></operator><name pos:line="38" pos:column="10">errno<pos:position pos:line="38" pos:column="15"/></name> <operator pos:line="38" pos:column="16">=<pos:position pos:line="38" pos:column="17"/></operator> <call><name pos:line="38" pos:column="18">RFCNB_Name_To_IP<pos:position pos:line="38" pos:column="34"/></name><argument_list pos:line="38" pos:column="34">(<argument><expr><name pos:line="38" pos:column="35">Service_Address<pos:position pos:line="38" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="52">&amp;<pos:position pos:line="38" pos:column="57"/></operator><name pos:line="38" pos:column="53">Dest_IP<pos:position pos:line="38" pos:column="60"/></name></expr></argument>)<pos:position pos:line="38" pos:column="61"/></argument_list></call><operator pos:line="38" pos:column="61">)<pos:position pos:line="38" pos:column="62"/></operator> <operator pos:line="38" pos:column="63">&lt;<pos:position pos:line="38" pos:column="67"/></operator> <literal type="number" pos:line="38" pos:column="65">0<pos:position pos:line="38" pos:column="66"/></literal></expr>)<pos:position pos:line="38" pos:column="67"/></condition><then pos:line="38" pos:column="67"> <block pos:line="38" pos:column="68">{	<comment type="block" pos:line="38" pos:column="73">/* Error */</comment>

        <comment type="block" pos:line="40" pos:column="9">/* No need to modify RFCNB_errno as it was done by RFCNB_Name_To_IP */</comment>
        <expr_stmt><expr><call><name pos:line="41" pos:column="9">free<pos:position pos:line="41" pos:column="13"/></name><argument_list pos:line="41" pos:column="13">(<argument><expr><name pos:line="41" pos:column="14">con<pos:position pos:line="41" pos:column="17"/></name></expr></argument>)<pos:position pos:line="41" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="19"/></expr_stmt>
        <return pos:line="42" pos:column="9">return <expr><operator pos:line="42" pos:column="16">(<pos:position pos:line="42" pos:column="17"/></operator><name pos:line="42" pos:column="17">NULL<pos:position pos:line="42" pos:column="21"/></name><operator pos:line="42" pos:column="21">)<pos:position pos:line="42" pos:column="22"/></operator></expr>;<pos:position pos:line="42" pos:column="23"/></return>

    }<pos:position pos:line="44" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="45" pos:column="5">/* Now connect to the remote end */</comment>

    <expr_stmt><expr><name pos:line="47" pos:column="5">redirect<pos:position pos:line="47" pos:column="13"/></name> <operator pos:line="47" pos:column="14">=<pos:position pos:line="47" pos:column="15"/></operator> <name pos:line="47" pos:column="16">TRUE<pos:position pos:line="47" pos:column="20"/></name></expr>;<pos:position pos:line="47" pos:column="21"/></expr_stmt>		<comment type="block" pos:line="47" pos:column="33">/* Fudge this one so we go once through */</comment>

    <while pos:line="49" pos:column="5">while <condition pos:line="49" pos:column="11">(<expr><name pos:line="49" pos:column="12">redirect<pos:position pos:line="49" pos:column="20"/></name></expr>)<pos:position pos:line="49" pos:column="21"/></condition> <block pos:line="49" pos:column="22">{		<comment type="block" pos:line="49" pos:column="33">/* Connect and get session info etc */</comment>

        <expr_stmt><expr><name pos:line="51" pos:column="9">redirect<pos:position pos:line="51" pos:column="17"/></name> <operator pos:line="51" pos:column="18">=<pos:position pos:line="51" pos:column="19"/></operator> <name pos:line="51" pos:column="20">FALSE<pos:position pos:line="51" pos:column="25"/></name></expr>;<pos:position pos:line="51" pos:column="26"/></expr_stmt>	<comment type="block" pos:line="51" pos:column="33">/* Assume all OK */</comment>

        <comment type="block" pos:line="53" pos:column="9">/* Build the redirect info. First one is first addr called */</comment>
        <comment type="block" pos:line="54" pos:column="9">/* And tack it onto the list of addresses we called        */</comment>

        <if pos:line="56" pos:column="9">if <condition pos:line="56" pos:column="12">(<expr><operator pos:line="56" pos:column="13">(<pos:position pos:line="56" pos:column="14"/></operator><name pos:line="56" pos:column="14">redir_addr<pos:position pos:line="56" pos:column="24"/></name> <operator pos:line="56" pos:column="25">=<pos:position pos:line="56" pos:column="26"/></operator> <operator pos:line="56" pos:column="27">(<pos:position pos:line="56" pos:column="28"/></operator>struct <name pos:line="56" pos:column="35">redirect_addr<pos:position pos:line="56" pos:column="48"/></name> <operator pos:line="56" pos:column="49">*<pos:position pos:line="56" pos:column="50"/></operator><operator pos:line="56" pos:column="50">)<pos:position pos:line="56" pos:column="51"/></operator> <call><name pos:line="56" pos:column="52">malloc<pos:position pos:line="56" pos:column="58"/></name><argument_list pos:line="56" pos:column="58">(<argument><expr><sizeof pos:line="56" pos:column="59">sizeof<argument_list pos:line="56" pos:column="65">(<argument><expr pos:line="56" pos:column="66">struct <name pos:line="56" pos:column="73">redirect_addr<pos:position pos:line="56" pos:column="86"/></name></expr></argument>)<pos:position pos:line="56" pos:column="87"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="56" pos:column="88"/></argument_list></call><operator pos:line="56" pos:column="88">)<pos:position pos:line="56" pos:column="89"/></operator> <operator pos:line="56" pos:column="90">==<pos:position pos:line="56" pos:column="92"/></operator> <name pos:line="56" pos:column="93">NULL<pos:position pos:line="56" pos:column="97"/></name></expr>)<pos:position pos:line="56" pos:column="98"/></condition><then pos:line="56" pos:column="98"> <block pos:line="56" pos:column="99">{	<comment type="block" pos:line="56" pos:column="105">/* Could not get space */</comment>

            <expr_stmt><expr><name pos:line="58" pos:column="13">RFCNB_errno<pos:position pos:line="58" pos:column="24"/></name> <operator pos:line="58" pos:column="25">=<pos:position pos:line="58" pos:column="26"/></operator> <name pos:line="58" pos:column="27">RFCNBE_NoSpace<pos:position pos:line="58" pos:column="41"/></name></expr>;<pos:position pos:line="58" pos:column="42"/></expr_stmt>
            <expr_stmt><expr><name pos:line="59" pos:column="13">RFCNB_saved_errno<pos:position pos:line="59" pos:column="30"/></name> <operator pos:line="59" pos:column="31">=<pos:position pos:line="59" pos:column="32"/></operator> <name pos:line="59" pos:column="33">errno<pos:position pos:line="59" pos:column="38"/></name></expr>;<pos:position pos:line="59" pos:column="39"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="60" pos:column="13">free<pos:position pos:line="60" pos:column="17"/></name><argument_list pos:line="60" pos:column="17">(<argument><expr><name pos:line="60" pos:column="18">con<pos:position pos:line="60" pos:column="21"/></name></expr></argument>)<pos:position pos:line="60" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="23"/></expr_stmt>
            <return pos:line="61" pos:column="13">return <expr><operator pos:line="61" pos:column="20">(<pos:position pos:line="61" pos:column="21"/></operator><name pos:line="61" pos:column="21">NULL<pos:position pos:line="61" pos:column="25"/></name><operator pos:line="61" pos:column="25">)<pos:position pos:line="61" pos:column="26"/></operator></expr>;<pos:position pos:line="61" pos:column="27"/></return>

        }<pos:position pos:line="63" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="64" pos:column="9">memcpy<pos:position pos:line="64" pos:column="15"/></name><argument_list pos:line="64" pos:column="15">(<argument><expr><operator pos:line="64" pos:column="16">(<pos:position pos:line="64" pos:column="17"/></operator><name pos:line="64" pos:column="17">char<pos:position pos:line="64" pos:column="21"/></name> <operator pos:line="64" pos:column="22">*<pos:position pos:line="64" pos:column="23"/></operator><operator pos:line="64" pos:column="23">)<pos:position pos:line="64" pos:column="24"/></operator> <operator pos:line="64" pos:column="25">&amp;<pos:position pos:line="64" pos:column="30"/></operator><operator pos:line="64" pos:column="26">(<pos:position pos:line="64" pos:column="27"/></operator><name><name pos:line="64" pos:column="27">redir_addr<pos:position pos:line="64" pos:column="37"/></name><operator pos:line="64" pos:column="37">-&gt;<pos:position pos:line="64" pos:column="42"/></operator><name pos:line="64" pos:column="39">ip_addr<pos:position pos:line="64" pos:column="46"/></name></name><operator pos:line="64" pos:column="46">)<pos:position pos:line="64" pos:column="47"/></operator></expr></argument>, <argument><expr><operator pos:line="64" pos:column="49">(<pos:position pos:line="64" pos:column="50"/></operator><name pos:line="64" pos:column="50">char<pos:position pos:line="64" pos:column="54"/></name> <operator pos:line="64" pos:column="55">*<pos:position pos:line="64" pos:column="56"/></operator><operator pos:line="64" pos:column="56">)<pos:position pos:line="64" pos:column="57"/></operator> <operator pos:line="64" pos:column="58">&amp;<pos:position pos:line="64" pos:column="63"/></operator><name pos:line="64" pos:column="59">Dest_IP<pos:position pos:line="64" pos:column="66"/></name></expr></argument>, <argument><expr><sizeof pos:line="64" pos:column="68">sizeof<argument_list pos:line="64" pos:column="74">(<argument><expr><name pos:line="64" pos:column="75">Dest_IP<pos:position pos:line="64" pos:column="82"/></name></expr></argument>)<pos:position pos:line="64" pos:column="83"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="64" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="85"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="65" pos:column="9">redir_addr<pos:position pos:line="65" pos:column="19"/></name><operator pos:line="65" pos:column="19">-&gt;<pos:position pos:line="65" pos:column="24"/></operator><name pos:line="65" pos:column="21">port<pos:position pos:line="65" pos:column="25"/></name></name> <operator pos:line="65" pos:column="26">=<pos:position pos:line="65" pos:column="27"/></operator> <name pos:line="65" pos:column="28">port<pos:position pos:line="65" pos:column="32"/></name></expr>;<pos:position pos:line="65" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="66" pos:column="9">redir_addr<pos:position pos:line="66" pos:column="19"/></name><operator pos:line="66" pos:column="19">-&gt;<pos:position pos:line="66" pos:column="24"/></operator><name pos:line="66" pos:column="21">next<pos:position pos:line="66" pos:column="25"/></name></name> <operator pos:line="66" pos:column="26">=<pos:position pos:line="66" pos:column="27"/></operator> <name pos:line="66" pos:column="28">NULL<pos:position pos:line="66" pos:column="32"/></name></expr>;<pos:position pos:line="66" pos:column="33"/></expr_stmt>

        <if pos:line="68" pos:column="9">if <condition pos:line="68" pos:column="12">(<expr><name><name pos:line="68" pos:column="13">con<pos:position pos:line="68" pos:column="16"/></name><operator pos:line="68" pos:column="16">-&gt;<pos:position pos:line="68" pos:column="21"/></operator><name pos:line="68" pos:column="18">redirect_list<pos:position pos:line="68" pos:column="31"/></name></name> <operator pos:line="68" pos:column="32">==<pos:position pos:line="68" pos:column="34"/></operator> <name pos:line="68" pos:column="35">NULL<pos:position pos:line="68" pos:column="39"/></name></expr>)<pos:position pos:line="68" pos:column="40"/></condition><then pos:line="68" pos:column="40"> <block pos:line="68" pos:column="41">{	<comment type="block" pos:line="68" pos:column="49">/* Stick on head */</comment>

            <expr_stmt><expr><name><name pos:line="70" pos:column="13">con<pos:position pos:line="70" pos:column="16"/></name><operator pos:line="70" pos:column="16">-&gt;<pos:position pos:line="70" pos:column="21"/></operator><name pos:line="70" pos:column="18">redirect_list<pos:position pos:line="70" pos:column="31"/></name></name> <operator pos:line="70" pos:column="32">=<pos:position pos:line="70" pos:column="33"/></operator> <name><name pos:line="70" pos:column="34">con<pos:position pos:line="70" pos:column="37"/></name><operator pos:line="70" pos:column="37">-&gt;<pos:position pos:line="70" pos:column="42"/></operator><name pos:line="70" pos:column="39">last_addr<pos:position pos:line="70" pos:column="48"/></name></name> <operator pos:line="70" pos:column="49">=<pos:position pos:line="70" pos:column="50"/></operator> <name pos:line="70" pos:column="51">redir_addr<pos:position pos:line="70" pos:column="61"/></name></expr>;<pos:position pos:line="70" pos:column="62"/></expr_stmt>

        }<pos:position pos:line="72" pos:column="10"/></block></then> <else pos:line="72" pos:column="11">else <block pos:line="72" pos:column="16">{

            <expr_stmt><expr><name><name pos:line="74" pos:column="13">con<pos:position pos:line="74" pos:column="16"/></name><operator pos:line="74" pos:column="16">-&gt;<pos:position pos:line="74" pos:column="21"/></operator><name pos:line="74" pos:column="18">last_addr<pos:position pos:line="74" pos:column="27"/></name><operator pos:line="74" pos:column="27">-&gt;<pos:position pos:line="74" pos:column="32"/></operator><name pos:line="74" pos:column="29">next<pos:position pos:line="74" pos:column="33"/></name></name> <operator pos:line="74" pos:column="34">=<pos:position pos:line="74" pos:column="35"/></operator> <name pos:line="74" pos:column="36">redir_addr<pos:position pos:line="74" pos:column="46"/></name></expr>;<pos:position pos:line="74" pos:column="47"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="75" pos:column="13">con<pos:position pos:line="75" pos:column="16"/></name><operator pos:line="75" pos:column="16">-&gt;<pos:position pos:line="75" pos:column="21"/></operator><name pos:line="75" pos:column="18">last_addr<pos:position pos:line="75" pos:column="27"/></name></name> <operator pos:line="75" pos:column="28">=<pos:position pos:line="75" pos:column="29"/></operator> <name pos:line="75" pos:column="30">redir_addr<pos:position pos:line="75" pos:column="40"/></name></expr>;<pos:position pos:line="75" pos:column="41"/></expr_stmt>

        }<pos:position pos:line="77" pos:column="10"/></block></else></if>

        <comment type="block" pos:line="79" pos:column="9">/* Now, make that connection */</comment>

        <if pos:line="81" pos:column="9">if <condition pos:line="81" pos:column="12">(<expr><operator pos:line="81" pos:column="13">(<pos:position pos:line="81" pos:column="14"/></operator><name pos:line="81" pos:column="14">Client<pos:position pos:line="81" pos:column="20"/></name> <operator pos:line="81" pos:column="21">=<pos:position pos:line="81" pos:column="22"/></operator> <call><name pos:line="81" pos:column="23">RFCNB_IP_Connect<pos:position pos:line="81" pos:column="39"/></name><argument_list pos:line="81" pos:column="39">(<argument><expr><name pos:line="81" pos:column="40">Dest_IP<pos:position pos:line="81" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="49">port<pos:position pos:line="81" pos:column="53"/></name></expr></argument>)<pos:position pos:line="81" pos:column="54"/></argument_list></call><operator pos:line="81" pos:column="54">)<pos:position pos:line="81" pos:column="55"/></operator> <operator pos:line="81" pos:column="56">&lt;<pos:position pos:line="81" pos:column="60"/></operator> <literal type="number" pos:line="81" pos:column="58">0<pos:position pos:line="81" pos:column="59"/></literal></expr>)<pos:position pos:line="81" pos:column="60"/></condition><then pos:line="81" pos:column="60"> <block pos:line="81" pos:column="61">{	<comment type="block" pos:line="81" pos:column="65">/* Error */</comment>

            <comment type="block" pos:line="83" pos:column="13">/* No need to modify RFCNB_errno as it was done by RFCNB_IP_Connect */</comment>
            <expr_stmt><expr><call><name pos:line="84" pos:column="13">free<pos:position pos:line="84" pos:column="17"/></name><argument_list pos:line="84" pos:column="17">(<argument><expr><name pos:line="84" pos:column="18">con<pos:position pos:line="84" pos:column="21"/></name></expr></argument>)<pos:position pos:line="84" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="23"/></expr_stmt>
            <return pos:line="85" pos:column="13">return <expr><operator pos:line="85" pos:column="20">(<pos:position pos:line="85" pos:column="21"/></operator><name pos:line="85" pos:column="21">NULL<pos:position pos:line="85" pos:column="25"/></name><operator pos:line="85" pos:column="25">)<pos:position pos:line="85" pos:column="26"/></operator></expr>;<pos:position pos:line="85" pos:column="27"/></return>

        }<pos:position pos:line="87" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name><name pos:line="88" pos:column="9">con<pos:position pos:line="88" pos:column="12"/></name><operator pos:line="88" pos:column="12">-&gt;<pos:position pos:line="88" pos:column="17"/></operator><name pos:line="88" pos:column="14">fd<pos:position pos:line="88" pos:column="16"/></name></name> <operator pos:line="88" pos:column="17">=<pos:position pos:line="88" pos:column="18"/></operator> <name pos:line="88" pos:column="19">Client<pos:position pos:line="88" pos:column="25"/></name></expr>;<pos:position pos:line="88" pos:column="26"/></expr_stmt>

        <comment type="block" pos:line="90" pos:column="9">/* Now send and handle the RFCNB session request              */</comment>
        <comment type="block" pos:line="91" pos:column="9">/* If we get a redirect, we will comeback with redirect true
         * and a new IP address in DEST_IP                            */</comment>

        <if pos:line="94" pos:column="9">if <condition pos:line="94" pos:column="12">(<expr><operator pos:line="94" pos:column="13">(<pos:position pos:line="94" pos:column="14"/></operator><name pos:line="94" pos:column="14">errno<pos:position pos:line="94" pos:column="19"/></name> <operator pos:line="94" pos:column="20">=<pos:position pos:line="94" pos:column="21"/></operator> <call><name pos:line="94" pos:column="22">RFCNB_Session_Req<pos:position pos:line="94" pos:column="39"/></name><argument_list pos:line="94" pos:column="39">(<argument><expr><name pos:line="94" pos:column="40">con<pos:position pos:line="94" pos:column="43"/></name></expr></argument>,
                                       <argument><expr><name pos:line="95" pos:column="40">Called_Name<pos:position pos:line="95" pos:column="51"/></name></expr></argument>,
                                       <argument><expr><name pos:line="96" pos:column="40">Calling_Name<pos:position pos:line="96" pos:column="52"/></name></expr></argument>,
                                       <argument><expr><operator pos:line="97" pos:column="40">&amp;<pos:position pos:line="97" pos:column="45"/></operator><name pos:line="97" pos:column="41">redirect<pos:position pos:line="97" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="97" pos:column="51">&amp;<pos:position pos:line="97" pos:column="56"/></operator><name pos:line="97" pos:column="52">Dest_IP<pos:position pos:line="97" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="97" pos:column="61">&amp;<pos:position pos:line="97" pos:column="66"/></operator><name pos:line="97" pos:column="62">port<pos:position pos:line="97" pos:column="66"/></name></expr></argument>)<pos:position pos:line="97" pos:column="67"/></argument_list></call><operator pos:line="97" pos:column="67">)<pos:position pos:line="97" pos:column="68"/></operator> <operator pos:line="97" pos:column="69">&lt;<pos:position pos:line="97" pos:column="73"/></operator> <literal type="number" pos:line="97" pos:column="71">0<pos:position pos:line="97" pos:column="72"/></literal></expr>)<pos:position pos:line="97" pos:column="73"/></condition><then pos:line="97" pos:column="73"> <block pos:line="97" pos:column="74">{

            <comment type="block" pos:line="99" pos:column="13">/* No need to modify RFCNB_errno as it was done by RFCNB_Session.. */</comment>
            <expr_stmt><expr><call><name pos:line="100" pos:column="13">RFCNB_Close<pos:position pos:line="100" pos:column="24"/></name><argument_list pos:line="100" pos:column="24">(<argument><expr><name><name pos:line="100" pos:column="25">con<pos:position pos:line="100" pos:column="28"/></name><operator pos:line="100" pos:column="28">-&gt;<pos:position pos:line="100" pos:column="33"/></operator><name pos:line="100" pos:column="30">fd<pos:position pos:line="100" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="100" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="34"/></expr_stmt>	<comment type="block" pos:line="100" pos:column="41">/* Close it */</comment>
            <expr_stmt><expr><call><name pos:line="101" pos:column="13">free<pos:position pos:line="101" pos:column="17"/></name><argument_list pos:line="101" pos:column="17">(<argument><expr><name pos:line="101" pos:column="18">con<pos:position pos:line="101" pos:column="21"/></name></expr></argument>)<pos:position pos:line="101" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="23"/></expr_stmt>
            <return pos:line="102" pos:column="13">return <expr><operator pos:line="102" pos:column="20">(<pos:position pos:line="102" pos:column="21"/></operator><name pos:line="102" pos:column="21">NULL<pos:position pos:line="102" pos:column="25"/></name><operator pos:line="102" pos:column="25">)<pos:position pos:line="102" pos:column="26"/></operator></expr>;<pos:position pos:line="102" pos:column="27"/></return>

        }<pos:position pos:line="104" pos:column="10"/></block></then></if>
        <if pos:line="105" pos:column="9">if <condition pos:line="105" pos:column="12">(<expr><name pos:line="105" pos:column="13">redirect<pos:position pos:line="105" pos:column="21"/></name></expr>)<pos:position pos:line="105" pos:column="22"/></condition><then pos:line="105" pos:column="22"> <block pos:line="105" pos:column="23">{

            <comment type="block" pos:line="107" pos:column="13">/* We have to close the connection, and then try again */</comment>

            <expr_stmt><expr><operator pos:line="109" pos:column="13">(<pos:position pos:line="109" pos:column="14"/></operator><name><name pos:line="109" pos:column="14">con<pos:position pos:line="109" pos:column="17"/></name><operator pos:line="109" pos:column="17">-&gt;<pos:position pos:line="109" pos:column="22"/></operator><name pos:line="109" pos:column="19">redirects<pos:position pos:line="109" pos:column="28"/></name></name><operator pos:line="109" pos:column="28">)<pos:position pos:line="109" pos:column="29"/></operator><operator pos:line="109" pos:column="29">++<pos:position pos:line="109" pos:column="31"/></operator></expr>;<pos:position pos:line="109" pos:column="32"/></expr_stmt>

            <expr_stmt><expr><call><name pos:line="111" pos:column="13">RFCNB_Close<pos:position pos:line="111" pos:column="24"/></name><argument_list pos:line="111" pos:column="24">(<argument><expr><name><name pos:line="111" pos:column="25">con<pos:position pos:line="111" pos:column="28"/></name><operator pos:line="111" pos:column="28">-&gt;<pos:position pos:line="111" pos:column="33"/></operator><name pos:line="111" pos:column="30">fd<pos:position pos:line="111" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="111" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="34"/></expr_stmt>	<comment type="block" pos:line="111" pos:column="41">/* Close it */</comment>

        }<pos:position pos:line="113" pos:column="10"/></block></then></if>
    }<pos:position pos:line="114" pos:column="6"/></block></while>

    <return pos:line="116" pos:column="5">return <expr><operator pos:line="116" pos:column="12">(<pos:position pos:line="116" pos:column="13"/></operator><name pos:line="116" pos:column="13">con<pos:position pos:line="116" pos:column="16"/></name><operator pos:line="116" pos:column="16">)<pos:position pos:line="116" pos:column="17"/></operator></expr>;<pos:position pos:line="116" pos:column="18"/></return>

}<pos:position pos:line="118" pos:column="2"/></block></function></unit>
