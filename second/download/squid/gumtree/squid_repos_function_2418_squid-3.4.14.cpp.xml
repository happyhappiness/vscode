<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2418_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">store_client<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">readHeader<pos:position pos:line="2" pos:column="25"/></name></name><parameter_list pos:line="2" pos:column="25">(<parameter><decl><type><name pos:line="2" pos:column="26">char<pos:position pos:line="2" pos:column="30"/></name> <specifier pos:line="2" pos:column="31">const<pos:position pos:line="2" pos:column="36"/></specifier> <modifier pos:line="2" pos:column="37">*<pos:position pos:line="2" pos:column="38"/></modifier></type><name pos:line="2" pos:column="38">buf<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="43">ssize_t<pos:position pos:line="2" pos:column="50"/></name></type> <name pos:line="2" pos:column="51">len<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="55"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">MemObject<pos:position pos:line="4" pos:column="14"/></name> <modifier pos:line="4" pos:column="15">*<pos:position pos:line="4" pos:column="16"/></modifier><specifier pos:line="4" pos:column="16">const<pos:position pos:line="4" pos:column="21"/></specifier></type> <name pos:line="4" pos:column="22">mem<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><name><name pos:line="4" pos:column="28">entry<pos:position pos:line="4" pos:column="33"/></name><operator pos:line="4" pos:column="33">-&gt;<pos:position pos:line="4" pos:column="38"/></operator><name pos:line="4" pos:column="35">mem_obj<pos:position pos:line="4" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="43"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><name><name pos:line="6" pos:column="12">flags<pos:position pos:line="6" pos:column="17"/></name><operator pos:line="6" pos:column="17">.<pos:position pos:line="6" pos:column="18"/></operator><name pos:line="6" pos:column="18">disk_io_pending<pos:position pos:line="6" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="7" pos:column="5">flags<pos:position pos:line="7" pos:column="10"/></name><operator pos:line="7" pos:column="10">.<pos:position pos:line="7" pos:column="11"/></operator><name pos:line="7" pos:column="11">disk_io_pending<pos:position pos:line="7" pos:column="26"/></name></name> <operator pos:line="7" pos:column="27">=<pos:position pos:line="7" pos:column="28"/></operator> <literal type="boolean" pos:line="7" pos:column="29">false<pos:position pos:line="7" pos:column="34"/></literal></expr>;<pos:position pos:line="7" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">assert<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><call><name><name pos:line="8" pos:column="12">_callback<pos:position pos:line="8" pos:column="21"/></name><operator pos:line="8" pos:column="21">.<pos:position pos:line="8" pos:column="22"/></operator><name pos:line="8" pos:column="22">pending<pos:position pos:line="8" pos:column="29"/></name></name><argument_list pos:line="8" pos:column="29">()<pos:position pos:line="8" pos:column="31"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="33"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="10" pos:column="5">unpackHeader<pos:position pos:line="10" pos:column="17"/></name> <argument_list pos:line="10" pos:column="18">(<argument><expr><name pos:line="10" pos:column="19">buf<pos:position pos:line="10" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="24">len<pos:position pos:line="10" pos:column="27"/></name></expr></argument>)<pos:position pos:line="10" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="29"/></expr_stmt>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><operator pos:line="12" pos:column="9">!<pos:position pos:line="12" pos:column="10"/></operator><name pos:line="12" pos:column="10">object_ok<pos:position pos:line="12" pos:column="19"/></name></expr>)<pos:position pos:line="12" pos:column="20"/></condition><then pos:line="12" pos:column="20">
        <block type="pseudo"><return pos:line="13" pos:column="9">return;<pos:position pos:line="13" pos:column="16"/></return></block></then></if>

    <comment type="block" pos:line="15" pos:column="5">/*
     * If our last read got some data the client wants, then give
     * it to them, otherwise schedule another read.
     */</comment>
    <decl_stmt><decl><type><name pos:line="19" pos:column="5">size_t<pos:position pos:line="19" pos:column="11"/></name></type> <name pos:line="19" pos:column="12">body_sz<pos:position pos:line="19" pos:column="19"/></name> <init pos:line="19" pos:column="20">= <expr><name pos:line="19" pos:column="22">len<pos:position pos:line="19" pos:column="25"/></name> <operator pos:line="19" pos:column="26">-<pos:position pos:line="19" pos:column="27"/></operator> <name><name pos:line="19" pos:column="28">mem<pos:position pos:line="19" pos:column="31"/></name><operator pos:line="19" pos:column="31">-&gt;<pos:position pos:line="19" pos:column="36"/></operator><name pos:line="19" pos:column="33">swap_hdr_sz<pos:position pos:line="19" pos:column="44"/></name></name></expr></init></decl>;<pos:position pos:line="19" pos:column="45"/></decl_stmt>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name><name pos:line="21" pos:column="9">copyInto<pos:position pos:line="21" pos:column="17"/></name><operator pos:line="21" pos:column="17">.<pos:position pos:line="21" pos:column="18"/></operator><name pos:line="21" pos:column="18">offset<pos:position pos:line="21" pos:column="24"/></name></name> <operator pos:line="21" pos:column="25">&lt;<pos:position pos:line="21" pos:column="29"/></operator> <cast type="static" pos:line="21" pos:column="27">static_cast<argument_list type="generic" pos:line="21" pos:column="38">&lt;<argument><expr><name pos:line="21" pos:column="39">int64_t<pos:position pos:line="21" pos:column="46"/></name></expr></argument>&gt;<pos:position pos:line="21" pos:column="50"/></argument_list><argument_list pos:line="21" pos:column="47">(<argument><expr><name pos:line="21" pos:column="48">body_sz<pos:position pos:line="21" pos:column="55"/></name></expr></argument>)<pos:position pos:line="21" pos:column="56"/></argument_list></cast></expr>)<pos:position pos:line="21" pos:column="57"/></condition><then pos:line="21" pos:column="57"> <block pos:line="21" pos:column="58">{
        <comment type="block" pos:line="22" pos:column="9">/*
         * we have (part of) what they want
         */</comment>
        <decl_stmt><decl><type><name pos:line="25" pos:column="9">size_t<pos:position pos:line="25" pos:column="15"/></name></type> <name pos:line="25" pos:column="16">copy_sz<pos:position pos:line="25" pos:column="23"/></name> <init pos:line="25" pos:column="24">= <expr><call><name pos:line="25" pos:column="26">min<pos:position pos:line="25" pos:column="29"/></name><argument_list pos:line="25" pos:column="29">(<argument><expr><name><name pos:line="25" pos:column="30">copyInto<pos:position pos:line="25" pos:column="38"/></name><operator pos:line="25" pos:column="38">.<pos:position pos:line="25" pos:column="39"/></operator><name pos:line="25" pos:column="39">length<pos:position pos:line="25" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="47">body_sz<pos:position pos:line="25" pos:column="54"/></name></expr></argument>)<pos:position pos:line="25" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="25" pos:column="56"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">debugs<pos:position pos:line="26" pos:column="15"/></name><argument_list pos:line="26" pos:column="15">(<argument><expr><literal type="number" pos:line="26" pos:column="16">90<pos:position pos:line="26" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="20">3<pos:position pos:line="26" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="23">"storeClientReadHeader: copying "<pos:position pos:line="26" pos:column="56"/></literal> <operator pos:line="26" pos:column="57">&lt;&lt;<pos:position pos:line="26" pos:column="65"/></operator> <name pos:line="26" pos:column="60">copy_sz<pos:position pos:line="26" pos:column="67"/></name> <operator pos:line="26" pos:column="68">&lt;&lt;<pos:position pos:line="26" pos:column="76"/></operator> <literal type="string" pos:line="26" pos:column="71">" bytes of body"<pos:position pos:line="26" pos:column="87"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="89"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">memmove<pos:position pos:line="27" pos:column="16"/></name><argument_list pos:line="27" pos:column="16">(<argument><expr><name><name pos:line="27" pos:column="17">copyInto<pos:position pos:line="27" pos:column="25"/></name><operator pos:line="27" pos:column="25">.<pos:position pos:line="27" pos:column="26"/></operator><name pos:line="27" pos:column="26">data<pos:position pos:line="27" pos:column="30"/></name></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="32">copyInto<pos:position pos:line="27" pos:column="40"/></name><operator pos:line="27" pos:column="40">.<pos:position pos:line="27" pos:column="41"/></operator><name pos:line="27" pos:column="41">data<pos:position pos:line="27" pos:column="45"/></name></name> <operator pos:line="27" pos:column="46">+<pos:position pos:line="27" pos:column="47"/></operator> <name><name pos:line="27" pos:column="48">mem<pos:position pos:line="27" pos:column="51"/></name><operator pos:line="27" pos:column="51">-&gt;<pos:position pos:line="27" pos:column="56"/></operator><name pos:line="27" pos:column="53">swap_hdr_sz<pos:position pos:line="27" pos:column="64"/></name></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="66">copy_sz<pos:position pos:line="27" pos:column="73"/></name></expr></argument>)<pos:position pos:line="27" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="75"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="29" pos:column="9">readBody<pos:position pos:line="29" pos:column="17"/></name><argument_list pos:line="29" pos:column="17">(<argument><expr><name><name pos:line="29" pos:column="18">copyInto<pos:position pos:line="29" pos:column="26"/></name><operator pos:line="29" pos:column="26">.<pos:position pos:line="29" pos:column="27"/></operator><name pos:line="29" pos:column="27">data<pos:position pos:line="29" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="33">copy_sz<pos:position pos:line="29" pos:column="40"/></name></expr></argument>)<pos:position pos:line="29" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="42"/></expr_stmt>

        <return pos:line="31" pos:column="9">return;<pos:position pos:line="31" pos:column="16"/></return>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="34" pos:column="5">/*
     * we don't have what the client wants, but at least we now
     * know the swap header size.
     */</comment>
    <expr_stmt><expr><call><name pos:line="38" pos:column="5">fileRead<pos:position pos:line="38" pos:column="13"/></name><argument_list pos:line="38" pos:column="13">()<pos:position pos:line="38" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="16"/></expr_stmt>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
