<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4824_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Parser<pos:position pos:line="2" pos:column="7"/></name><operator pos:line="2" pos:column="7">::<pos:position pos:line="2" pos:column="9"/></operator><name pos:line="2" pos:column="9">Tokenizer<pos:position pos:line="2" pos:column="18"/></name><operator pos:line="2" pos:column="18">::<pos:position pos:line="2" pos:column="20"/></operator><name pos:line="2" pos:column="20">skipSuffix<pos:position pos:line="2" pos:column="30"/></name></name><parameter_list pos:line="2" pos:column="30">(<parameter><decl><type><specifier pos:line="2" pos:column="31">const<pos:position pos:line="2" pos:column="36"/></specifier> <name pos:line="2" pos:column="37">SBuf<pos:position pos:line="2" pos:column="41"/></name> <modifier pos:line="2" pos:column="42">&amp;<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="43">tokenToSkip<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="55"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><call><name><name pos:line="4" pos:column="9">buf_<pos:position pos:line="4" pos:column="13"/></name><operator pos:line="4" pos:column="13">.<pos:position pos:line="4" pos:column="14"/></operator><name pos:line="4" pos:column="14">length<pos:position pos:line="4" pos:column="20"/></name></name><argument_list pos:line="4" pos:column="20">()<pos:position pos:line="4" pos:column="22"/></argument_list></call> <operator pos:line="4" pos:column="23">&lt;<pos:position pos:line="4" pos:column="27"/></operator> <call><name><name pos:line="4" pos:column="25">tokenToSkip<pos:position pos:line="4" pos:column="36"/></name><operator pos:line="4" pos:column="36">.<pos:position pos:line="4" pos:column="37"/></operator><name pos:line="4" pos:column="37">length<pos:position pos:line="4" pos:column="43"/></name></name><argument_list pos:line="4" pos:column="43">()<pos:position pos:line="4" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="46"/></condition><then pos:line="4" pos:column="46">
        <block type="pseudo"><return pos:line="5" pos:column="9">return <expr><literal type="boolean" pos:line="5" pos:column="16">false<pos:position pos:line="5" pos:column="21"/></literal></expr>;<pos:position pos:line="5" pos:column="22"/></return></block></then></if>

    <decl_stmt><decl><type><name><name pos:line="7" pos:column="5">SBuf<pos:position pos:line="7" pos:column="9"/></name><operator pos:line="7" pos:column="9">::<pos:position pos:line="7" pos:column="11"/></operator><name pos:line="7" pos:column="11">size_type<pos:position pos:line="7" pos:column="20"/></name></name></type> <name pos:line="7" pos:column="21">offset<pos:position pos:line="7" pos:column="27"/></name> <init pos:line="7" pos:column="28">= <expr><literal type="number" pos:line="7" pos:column="30">0<pos:position pos:line="7" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="32"/></decl_stmt>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><call><name><name pos:line="8" pos:column="9">tokenToSkip<pos:position pos:line="8" pos:column="20"/></name><operator pos:line="8" pos:column="20">.<pos:position pos:line="8" pos:column="21"/></operator><name pos:line="8" pos:column="21">length<pos:position pos:line="8" pos:column="27"/></name></name><argument_list pos:line="8" pos:column="27">()<pos:position pos:line="8" pos:column="29"/></argument_list></call> <operator pos:line="8" pos:column="30">&lt;<pos:position pos:line="8" pos:column="34"/></operator> <call><name><name pos:line="8" pos:column="32">buf_<pos:position pos:line="8" pos:column="36"/></name><operator pos:line="8" pos:column="36">.<pos:position pos:line="8" pos:column="37"/></operator><name pos:line="8" pos:column="37">length<pos:position pos:line="8" pos:column="43"/></name></name><argument_list pos:line="8" pos:column="43">()<pos:position pos:line="8" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="46"/></condition><then pos:line="8" pos:column="46">
        <block type="pseudo"><expr_stmt><expr><name pos:line="9" pos:column="9">offset<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">=<pos:position pos:line="9" pos:column="17"/></operator> <call><name><name pos:line="9" pos:column="18">buf_<pos:position pos:line="9" pos:column="22"/></name><operator pos:line="9" pos:column="22">.<pos:position pos:line="9" pos:column="23"/></operator><name pos:line="9" pos:column="23">length<pos:position pos:line="9" pos:column="29"/></name></name><argument_list pos:line="9" pos:column="29">()<pos:position pos:line="9" pos:column="31"/></argument_list></call> <operator pos:line="9" pos:column="32">-<pos:position pos:line="9" pos:column="33"/></operator> <call><name><name pos:line="9" pos:column="34">tokenToSkip<pos:position pos:line="9" pos:column="45"/></name><operator pos:line="9" pos:column="45">.<pos:position pos:line="9" pos:column="46"/></operator><name pos:line="9" pos:column="46">length<pos:position pos:line="9" pos:column="52"/></name></name><argument_list pos:line="9" pos:column="52">()<pos:position pos:line="9" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="55"/></expr_stmt></block></then></if>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><call><name><name pos:line="11" pos:column="9">buf_<pos:position pos:line="11" pos:column="13"/></name><operator pos:line="11" pos:column="13">.<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="14">substr<pos:position pos:line="11" pos:column="20"/></name></name><argument_list pos:line="11" pos:column="20">(<argument><expr><name pos:line="11" pos:column="21">offset<pos:position pos:line="11" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="29">SBuf<pos:position pos:line="11" pos:column="33"/></name><operator pos:line="11" pos:column="33">::<pos:position pos:line="11" pos:column="35"/></operator><name pos:line="11" pos:column="35">npos<pos:position pos:line="11" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="40"/></argument_list></call><operator pos:line="11" pos:column="40">.<pos:position pos:line="11" pos:column="41"/></operator><call><name pos:line="11" pos:column="41">cmp<pos:position pos:line="11" pos:column="44"/></name><argument_list pos:line="11" pos:column="44">(<argument><expr><name pos:line="11" pos:column="45">tokenToSkip<pos:position pos:line="11" pos:column="56"/></name></expr></argument>)<pos:position pos:line="11" pos:column="57"/></argument_list></call> <operator pos:line="11" pos:column="58">==<pos:position pos:line="11" pos:column="60"/></operator> <literal type="number" pos:line="11" pos:column="61">0<pos:position pos:line="11" pos:column="62"/></literal></expr>)<pos:position pos:line="11" pos:column="63"/></condition><then pos:line="11" pos:column="63"> <block pos:line="11" pos:column="64">{
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">debugs<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><literal type="number" pos:line="12" pos:column="16">24<pos:position pos:line="12" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="20">8<pos:position pos:line="12" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="23">"skipping "<pos:position pos:line="12" pos:column="34"/></literal> <operator pos:line="12" pos:column="35">&lt;&lt;<pos:position pos:line="12" pos:column="43"/></operator> <call><name><name pos:line="12" pos:column="38">tokenToSkip<pos:position pos:line="12" pos:column="49"/></name><operator pos:line="12" pos:column="49">.<pos:position pos:line="12" pos:column="50"/></operator><name pos:line="12" pos:column="50">length<pos:position pos:line="12" pos:column="56"/></name></name><argument_list pos:line="12" pos:column="56">()<pos:position pos:line="12" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="60"/></expr_stmt>
        <return pos:line="13" pos:column="9">return <expr><call><name pos:line="13" pos:column="16">successTrailing<pos:position pos:line="13" pos:column="31"/></name><argument_list pos:line="13" pos:column="31">(<argument><expr><call><name><name pos:line="13" pos:column="32">tokenToSkip<pos:position pos:line="13" pos:column="43"/></name><operator pos:line="13" pos:column="43">.<pos:position pos:line="13" pos:column="44"/></operator><name pos:line="13" pos:column="44">length<pos:position pos:line="13" pos:column="50"/></name></name><argument_list pos:line="13" pos:column="50">()<pos:position pos:line="13" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="54"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>
    <return pos:line="15" pos:column="5">return <expr><literal type="boolean" pos:line="15" pos:column="12">false<pos:position pos:line="15" pos:column="17"/></literal></expr>;<pos:position pos:line="15" pos:column="18"/></return>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
