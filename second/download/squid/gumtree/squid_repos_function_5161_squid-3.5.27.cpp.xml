<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5161_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Rock<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">SwapDir<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">writeCompleted<pos:position pos:line="2" pos:column="30"/></name></name><parameter_list pos:line="2" pos:column="30">(<parameter><decl><type><name pos:line="2" pos:column="31">int<pos:position pos:line="2" pos:column="34"/></name></type> <name pos:line="2" pos:column="35">errflag<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="44">size_t<pos:position pos:line="2" pos:column="50"/></name></type> <name pos:line="2" pos:column="51">rlen<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="57">RefCount<pos:position pos:line="2" pos:column="65"/></name><argument_list type="generic" pos:line="2" pos:column="65">&lt; <argument><expr><name><operator pos:line="2" pos:column="67">::<pos:position pos:line="2" pos:column="69"/></operator><name pos:line="2" pos:column="69">WriteRequest<pos:position pos:line="2" pos:column="81"/></name></name></expr></argument>&gt;<pos:position pos:line="2" pos:column="85"/></argument_list></name></type> <name pos:line="2" pos:column="83">r<pos:position pos:line="2" pos:column="84"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="85"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">Rock<pos:position pos:line="4" pos:column="9"/></name><operator pos:line="4" pos:column="9">::<pos:position pos:line="4" pos:column="11"/></operator><name pos:line="4" pos:column="11">WriteRequest<pos:position pos:line="4" pos:column="23"/></name></name> <modifier pos:line="4" pos:column="24">*<pos:position pos:line="4" pos:column="25"/></modifier></type><name pos:line="4" pos:column="25">request<pos:position pos:line="4" pos:column="32"/></name> <init pos:line="4" pos:column="33">= <expr><cast type="dynamic" pos:line="4" pos:column="35">dynamic_cast<argument_list type="generic" pos:line="4" pos:column="47">&lt;<argument><expr><name><name pos:line="4" pos:column="48">Rock<pos:position pos:line="4" pos:column="52"/></name><operator pos:line="4" pos:column="52">::<pos:position pos:line="4" pos:column="54"/></operator><name pos:line="4" pos:column="54">WriteRequest<pos:position pos:line="4" pos:column="66"/></name></name><operator pos:line="4" pos:column="66">*<pos:position pos:line="4" pos:column="67"/></operator></expr></argument>&gt;<pos:position pos:line="4" pos:column="71"/></argument_list><argument_list pos:line="4" pos:column="68">(<argument><expr><call><name><name pos:line="4" pos:column="69">r<pos:position pos:line="4" pos:column="70"/></name><operator pos:line="4" pos:column="70">.<pos:position pos:line="4" pos:column="71"/></operator><name pos:line="4" pos:column="71">getRaw<pos:position pos:line="4" pos:column="77"/></name></name><argument_list pos:line="4" pos:column="77">()<pos:position pos:line="4" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="80"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="4" pos:column="81"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><name pos:line="5" pos:column="12">request<pos:position pos:line="5" pos:column="19"/></name></expr></argument>)<pos:position pos:line="5" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><name><name pos:line="6" pos:column="12">request<pos:position pos:line="6" pos:column="19"/></name><operator pos:line="6" pos:column="19">-&gt;<pos:position pos:line="6" pos:column="24"/></operator><name pos:line="6" pos:column="21">sio<pos:position pos:line="6" pos:column="24"/></name></name> <operator pos:line="6" pos:column="25">!=<pos:position pos:line="6" pos:column="27"/></operator>  <name pos:line="6" pos:column="29">NULL<pos:position pos:line="6" pos:column="33"/></name></expr></argument>)<pos:position pos:line="6" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="35"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">IoState<pos:position pos:line="7" pos:column="12"/></name> <modifier pos:line="7" pos:column="13">&amp;<pos:position pos:line="7" pos:column="18"/></modifier></type><name pos:line="7" pos:column="14">sio<pos:position pos:line="7" pos:column="17"/></name> <init pos:line="7" pos:column="18">= <expr><operator pos:line="7" pos:column="20">*<pos:position pos:line="7" pos:column="21"/></operator><name><name pos:line="7" pos:column="21">request<pos:position pos:line="7" pos:column="28"/></name><operator pos:line="7" pos:column="28">-&gt;<pos:position pos:line="7" pos:column="33"/></operator><name pos:line="7" pos:column="30">sio<pos:position pos:line="7" pos:column="33"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="34"/></decl_stmt>

    <comment type="line" pos:line="9" pos:column="5">// quit if somebody called IoState::close() while we were waiting</comment>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><operator pos:line="10" pos:column="9">!<pos:position pos:line="10" pos:column="10"/></operator><call><name><name pos:line="10" pos:column="10">sio<pos:position pos:line="10" pos:column="13"/></name><operator pos:line="10" pos:column="13">.<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">stillWaiting<pos:position pos:line="10" pos:column="26"/></name></name><argument_list pos:line="10" pos:column="26">()<pos:position pos:line="10" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="29"/></condition><then pos:line="10" pos:column="29"> <block pos:line="10" pos:column="30">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">debugs<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><literal type="number" pos:line="11" pos:column="16">79<pos:position pos:line="11" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="20">3<pos:position pos:line="11" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="23">"ignoring closed entry "<pos:position pos:line="11" pos:column="47"/></literal> <operator pos:line="11" pos:column="48">&lt;&lt;<pos:position pos:line="11" pos:column="56"/></operator> <name><name pos:line="11" pos:column="51">sio<pos:position pos:line="11" pos:column="54"/></name><operator pos:line="11" pos:column="54">.<pos:position pos:line="11" pos:column="55"/></operator><name pos:line="11" pos:column="55">swap_filen<pos:position pos:line="11" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="67"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">noteFreeMapSlice<pos:position pos:line="12" pos:column="25"/></name><argument_list pos:line="12" pos:column="25">(<argument><expr><name><name pos:line="12" pos:column="26">request<pos:position pos:line="12" pos:column="33"/></name><operator pos:line="12" pos:column="33">-&gt;<pos:position pos:line="12" pos:column="38"/></operator><name pos:line="12" pos:column="35">sidNext<pos:position pos:line="12" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="44"/></expr_stmt>
        <return pos:line="13" pos:column="9">return;<pos:position pos:line="13" pos:column="16"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="16" pos:column="5">// TODO: Fail if disk dropped one of the previous write requests.</comment>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name pos:line="18" pos:column="9">errflag<pos:position pos:line="18" pos:column="16"/></name> <operator pos:line="18" pos:column="17">==<pos:position pos:line="18" pos:column="19"/></operator> <name pos:line="18" pos:column="20">DISK_OK<pos:position pos:line="18" pos:column="27"/></name></expr>)<pos:position pos:line="18" pos:column="28"/></condition><then pos:line="18" pos:column="28"> <block pos:line="18" pos:column="29">{
        <comment type="line" pos:line="19" pos:column="9">// do not increment sio.offset_ because we do it in sio-&gt;write()</comment>

        <comment type="line" pos:line="21" pos:column="9">// finalize the shared slice info after writing slice contents to disk</comment>
        <decl_stmt><decl><type><name><name pos:line="22" pos:column="9">Ipc<pos:position pos:line="22" pos:column="12"/></name><operator pos:line="22" pos:column="12">::<pos:position pos:line="22" pos:column="14"/></operator><name pos:line="22" pos:column="14">StoreMap<pos:position pos:line="22" pos:column="22"/></name><operator pos:line="22" pos:column="22">::<pos:position pos:line="22" pos:column="24"/></operator><name pos:line="22" pos:column="24">Slice<pos:position pos:line="22" pos:column="29"/></name></name> <modifier pos:line="22" pos:column="30">&amp;<pos:position pos:line="22" pos:column="35"/></modifier></type><name pos:line="22" pos:column="31">slice<pos:position pos:line="22" pos:column="36"/></name> <init pos:line="22" pos:column="37">=
            <expr><call><name><name pos:line="23" pos:column="13">map<pos:position pos:line="23" pos:column="16"/></name><operator pos:line="23" pos:column="16">-&gt;<pos:position pos:line="23" pos:column="21"/></operator><name pos:line="23" pos:column="18">writeableSlice<pos:position pos:line="23" pos:column="32"/></name></name><argument_list pos:line="23" pos:column="32">(<argument><expr><name><name pos:line="23" pos:column="33">sio<pos:position pos:line="23" pos:column="36"/></name><operator pos:line="23" pos:column="36">.<pos:position pos:line="23" pos:column="37"/></operator><name pos:line="23" pos:column="37">swap_filen<pos:position pos:line="23" pos:column="47"/></name></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="49">request<pos:position pos:line="23" pos:column="56"/></name><operator pos:line="23" pos:column="56">-&gt;<pos:position pos:line="23" pos:column="61"/></operator><name pos:line="23" pos:column="58">sidCurrent<pos:position pos:line="23" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="23" pos:column="70"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="24" pos:column="9">slice<pos:position pos:line="24" pos:column="14"/></name><operator pos:line="24" pos:column="14">.<pos:position pos:line="24" pos:column="15"/></operator><name pos:line="24" pos:column="15">size<pos:position pos:line="24" pos:column="19"/></name></name> <operator pos:line="24" pos:column="20">=<pos:position pos:line="24" pos:column="21"/></operator> <name><name pos:line="24" pos:column="22">request<pos:position pos:line="24" pos:column="29"/></name><operator pos:line="24" pos:column="29">-&gt;<pos:position pos:line="24" pos:column="34"/></operator><name pos:line="24" pos:column="31">len<pos:position pos:line="24" pos:column="34"/></name></name> <operator pos:line="24" pos:column="35">-<pos:position pos:line="24" pos:column="36"/></operator> <sizeof pos:line="24" pos:column="37">sizeof<argument_list pos:line="24" pos:column="43">(<argument><expr><name pos:line="24" pos:column="44">DbCellHeader<pos:position pos:line="24" pos:column="56"/></name></expr></argument>)<pos:position pos:line="24" pos:column="57"/></argument_list></sizeof></expr>;<pos:position pos:line="24" pos:column="58"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="25" pos:column="9">slice<pos:position pos:line="25" pos:column="14"/></name><operator pos:line="25" pos:column="14">.<pos:position pos:line="25" pos:column="15"/></operator><name pos:line="25" pos:column="15">next<pos:position pos:line="25" pos:column="19"/></name></name> <operator pos:line="25" pos:column="20">=<pos:position pos:line="25" pos:column="21"/></operator> <name><name pos:line="25" pos:column="22">request<pos:position pos:line="25" pos:column="29"/></name><operator pos:line="25" pos:column="29">-&gt;<pos:position pos:line="25" pos:column="34"/></operator><name pos:line="25" pos:column="31">sidNext<pos:position pos:line="25" pos:column="38"/></name></name></expr>;<pos:position pos:line="25" pos:column="39"/></expr_stmt>

        <if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><name><name pos:line="27" pos:column="13">request<pos:position pos:line="27" pos:column="20"/></name><operator pos:line="27" pos:column="20">-&gt;<pos:position pos:line="27" pos:column="25"/></operator><name pos:line="27" pos:column="22">eof<pos:position pos:line="27" pos:column="25"/></name></name></expr>)<pos:position pos:line="27" pos:column="26"/></condition><then pos:line="27" pos:column="26"> <block pos:line="27" pos:column="27">{
            <expr_stmt><expr><call><name pos:line="28" pos:column="13">assert<pos:position pos:line="28" pos:column="19"/></name><argument_list pos:line="28" pos:column="19">(<argument><expr><name><name pos:line="28" pos:column="20">sio<pos:position pos:line="28" pos:column="23"/></name><operator pos:line="28" pos:column="23">.<pos:position pos:line="28" pos:column="24"/></operator><name pos:line="28" pos:column="24">e<pos:position pos:line="28" pos:column="25"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="27"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="29" pos:column="13">assert<pos:position pos:line="29" pos:column="19"/></name><argument_list pos:line="29" pos:column="19">(<argument><expr><name><name pos:line="29" pos:column="20">sio<pos:position pos:line="29" pos:column="23"/></name><operator pos:line="29" pos:column="23">.<pos:position pos:line="29" pos:column="24"/></operator><name pos:line="29" pos:column="24">writeableAnchor_<pos:position pos:line="29" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="42"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="30" pos:column="13">sio<pos:position pos:line="30" pos:column="16"/></name><operator pos:line="30" pos:column="16">.<pos:position pos:line="30" pos:column="17"/></operator><name pos:line="30" pos:column="17">e<pos:position pos:line="30" pos:column="18"/></name><operator pos:line="30" pos:column="18">-&gt;<pos:position pos:line="30" pos:column="23"/></operator><name pos:line="30" pos:column="20">swap_file_sz<pos:position pos:line="30" pos:column="32"/></name></name> <operator pos:line="30" pos:column="33">=<pos:position pos:line="30" pos:column="34"/></operator> <name><name pos:line="30" pos:column="35">sio<pos:position pos:line="30" pos:column="38"/></name><operator pos:line="30" pos:column="38">.<pos:position pos:line="30" pos:column="39"/></operator><name pos:line="30" pos:column="39">writeableAnchor_<pos:position pos:line="30" pos:column="55"/></name><operator pos:line="30" pos:column="55">-&gt;<pos:position pos:line="30" pos:column="60"/></operator><name pos:line="30" pos:column="57">basics<pos:position pos:line="30" pos:column="63"/></name><operator pos:line="30" pos:column="63">.<pos:position pos:line="30" pos:column="64"/></operator><name pos:line="30" pos:column="64">swap_file_sz<pos:position pos:line="30" pos:column="76"/></name></name> <operator pos:line="30" pos:column="77">=<pos:position pos:line="30" pos:column="78"/></operator>
                                      <name><name pos:line="31" pos:column="39">sio<pos:position pos:line="31" pos:column="42"/></name><operator pos:line="31" pos:column="42">.<pos:position pos:line="31" pos:column="43"/></operator><name pos:line="31" pos:column="43">offset_<pos:position pos:line="31" pos:column="50"/></name></name></expr>;<pos:position pos:line="31" pos:column="51"/></expr_stmt>

            <comment type="line" pos:line="33" pos:column="13">// close, the entry gets the read lock</comment>
            <expr_stmt><expr><call><name><name pos:line="34" pos:column="13">map<pos:position pos:line="34" pos:column="16"/></name><operator pos:line="34" pos:column="16">-&gt;<pos:position pos:line="34" pos:column="21"/></operator><name pos:line="34" pos:column="18">closeForWriting<pos:position pos:line="34" pos:column="33"/></name></name><argument_list pos:line="34" pos:column="33">(<argument><expr><name><name pos:line="34" pos:column="34">sio<pos:position pos:line="34" pos:column="37"/></name><operator pos:line="34" pos:column="37">.<pos:position pos:line="34" pos:column="38"/></operator><name pos:line="34" pos:column="38">swap_filen<pos:position pos:line="34" pos:column="48"/></name></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="34" pos:column="50">true<pos:position pos:line="34" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="56"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="35" pos:column="13">sio<pos:position pos:line="35" pos:column="16"/></name><operator pos:line="35" pos:column="16">.<pos:position pos:line="35" pos:column="17"/></operator><name pos:line="35" pos:column="17">writeableAnchor_<pos:position pos:line="35" pos:column="33"/></name></name> <operator pos:line="35" pos:column="34">=<pos:position pos:line="35" pos:column="35"/></operator> <name pos:line="35" pos:column="36">NULL<pos:position pos:line="35" pos:column="40"/></name></expr>;<pos:position pos:line="35" pos:column="41"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="36" pos:column="13">sio<pos:position pos:line="36" pos:column="16"/></name><operator pos:line="36" pos:column="16">.<pos:position pos:line="36" pos:column="17"/></operator><name pos:line="36" pos:column="17">finishedWriting<pos:position pos:line="36" pos:column="32"/></name></name><argument_list pos:line="36" pos:column="32">(<argument><expr><name pos:line="36" pos:column="33">errflag<pos:position pos:line="36" pos:column="40"/></name></expr></argument>)<pos:position pos:line="36" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="42"/></expr_stmt>
        }<pos:position pos:line="37" pos:column="10"/></block></then></if>
    }<pos:position pos:line="38" pos:column="6"/></block></then> <else pos:line="38" pos:column="7">else <block pos:line="38" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="39" pos:column="9">noteFreeMapSlice<pos:position pos:line="39" pos:column="25"/></name><argument_list pos:line="39" pos:column="25">(<argument><expr><name><name pos:line="39" pos:column="26">request<pos:position pos:line="39" pos:column="33"/></name><operator pos:line="39" pos:column="33">-&gt;<pos:position pos:line="39" pos:column="38"/></operator><name pos:line="39" pos:column="35">sidNext<pos:position pos:line="39" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="44"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="41" pos:column="9">writeError<pos:position pos:line="41" pos:column="19"/></name><argument_list pos:line="41" pos:column="19">(<argument><expr><operator pos:line="41" pos:column="20">*<pos:position pos:line="41" pos:column="21"/></operator><name><name pos:line="41" pos:column="21">sio<pos:position pos:line="41" pos:column="24"/></name><operator pos:line="41" pos:column="24">.<pos:position pos:line="41" pos:column="25"/></operator><name pos:line="41" pos:column="25">e<pos:position pos:line="41" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="28"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="42" pos:column="9">sio<pos:position pos:line="42" pos:column="12"/></name><operator pos:line="42" pos:column="12">.<pos:position pos:line="42" pos:column="13"/></operator><name pos:line="42" pos:column="13">finishedWriting<pos:position pos:line="42" pos:column="28"/></name></name><argument_list pos:line="42" pos:column="28">(<argument><expr><name pos:line="42" pos:column="29">errflag<pos:position pos:line="42" pos:column="36"/></name></expr></argument>)<pos:position pos:line="42" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="38"/></expr_stmt>
        <comment type="line" pos:line="43" pos:column="9">// and hope that Core will call disconnect() to close the map entry</comment>
    }<pos:position pos:line="44" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name><name pos:line="46" pos:column="5">CollapsedForwarding<pos:position pos:line="46" pos:column="24"/></name><operator pos:line="46" pos:column="24">::<pos:position pos:line="46" pos:column="26"/></operator><name pos:line="46" pos:column="26">Broadcast<pos:position pos:line="46" pos:column="35"/></name></name><argument_list pos:line="46" pos:column="35">(<argument><expr><operator pos:line="46" pos:column="36">*<pos:position pos:line="46" pos:column="37"/></operator><name><name pos:line="46" pos:column="37">sio<pos:position pos:line="46" pos:column="40"/></name><operator pos:line="46" pos:column="40">.<pos:position pos:line="46" pos:column="41"/></operator><name pos:line="46" pos:column="41">e<pos:position pos:line="46" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="44"/></expr_stmt>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
