<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3223_squid-3.3.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">gopherReadReply<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><specifier pos:line="2" pos:column="17">const<pos:position pos:line="2" pos:column="22"/></specifier> <name><name pos:line="2" pos:column="23">Comm<pos:position pos:line="2" pos:column="27"/></name><operator pos:line="2" pos:column="27">::<pos:position pos:line="2" pos:column="29"/></operator><name pos:line="2" pos:column="29">ConnectionPointer<pos:position pos:line="2" pos:column="46"/></name></name> <modifier pos:line="2" pos:column="47">&amp;<pos:position pos:line="2" pos:column="52"/></modifier></type><name pos:line="2" pos:column="48">conn<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="54">char<pos:position pos:line="2" pos:column="58"/></name> <modifier pos:line="2" pos:column="59">*<pos:position pos:line="2" pos:column="60"/></modifier></type><name pos:line="2" pos:column="60">buf<pos:position pos:line="2" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="65">size_t<pos:position pos:line="2" pos:column="71"/></name></type> <name pos:line="2" pos:column="72">len<pos:position pos:line="2" pos:column="75"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="77">comm_err_t<pos:position pos:line="2" pos:column="87"/></name></type> <name pos:line="2" pos:column="88">flag<pos:position pos:line="2" pos:column="92"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="94">int<pos:position pos:line="2" pos:column="97"/></name></type> <name pos:line="2" pos:column="98">xerrno<pos:position pos:line="2" pos:column="104"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="106">void<pos:position pos:line="2" pos:column="110"/></name> <modifier pos:line="2" pos:column="111">*<pos:position pos:line="2" pos:column="112"/></modifier></type><name pos:line="2" pos:column="112">data<pos:position pos:line="2" pos:column="116"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="117"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">GopherStateData<pos:position pos:line="4" pos:column="20"/></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier></type><name pos:line="4" pos:column="22">gopherState<pos:position pos:line="4" pos:column="33"/></name> <init pos:line="4" pos:column="34">= <expr><operator pos:line="4" pos:column="36">(<pos:position pos:line="4" pos:column="37"/></operator><name pos:line="4" pos:column="37">GopherStateData<pos:position pos:line="4" pos:column="52"/></name> <operator pos:line="4" pos:column="53">*<pos:position pos:line="4" pos:column="54"/></operator><operator pos:line="4" pos:column="54">)<pos:position pos:line="4" pos:column="55"/></operator><name pos:line="4" pos:column="55">data<pos:position pos:line="4" pos:column="59"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="60"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">StoreEntry<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">entry<pos:position pos:line="5" pos:column="22"/></name> <init pos:line="5" pos:column="23">= <expr><name><name pos:line="5" pos:column="25">gopherState<pos:position pos:line="5" pos:column="36"/></name><operator pos:line="5" pos:column="36">-&gt;<pos:position pos:line="5" pos:column="41"/></operator><name pos:line="5" pos:column="38">entry<pos:position pos:line="5" pos:column="43"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="44"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">clen<pos:position pos:line="6" pos:column="13"/></name></decl>;<pos:position pos:line="6" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">bin<pos:position pos:line="7" pos:column="12"/></name></decl>;<pos:position pos:line="7" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">size_t<pos:position pos:line="8" pos:column="11"/></name></type> <name pos:line="8" pos:column="12">read_sz<pos:position pos:line="8" pos:column="19"/></name> <init pos:line="8" pos:column="20">= <expr><name pos:line="8" pos:column="22">BUFSIZ<pos:position pos:line="8" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="29"/></decl_stmt>
<cpp:if pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">if<pos:position pos:line="9" pos:column="4"/></cpp:directive> <expr><name pos:line="9" pos:column="5">USE_DELAY_POOLS<pos:position pos:line="9" pos:column="20"/></name></expr></cpp:if>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">DelayId<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">delayId<pos:position pos:line="10" pos:column="20"/></name> <init pos:line="10" pos:column="21">= <expr><call><name><name pos:line="10" pos:column="23">entry<pos:position pos:line="10" pos:column="28"/></name><operator pos:line="10" pos:column="28">-&gt;<pos:position pos:line="10" pos:column="33"/></operator><name pos:line="10" pos:column="30">mem_obj<pos:position pos:line="10" pos:column="37"/></name><operator pos:line="10" pos:column="37">-&gt;<pos:position pos:line="10" pos:column="42"/></operator><name pos:line="10" pos:column="39">mostBytesAllowed<pos:position pos:line="10" pos:column="55"/></name></name><argument_list pos:line="10" pos:column="55">()<pos:position pos:line="10" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="58"/></decl_stmt>
<cpp:endif pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">endif<pos:position pos:line="11" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="13" pos:column="5">/* Bail out early on COMM_ERR_CLOSING - close handlers will tidy up for us */</comment>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">flag<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">==<pos:position pos:line="15" pos:column="16"/></operator> <name pos:line="15" pos:column="17">COMM_ERR_CLOSING<pos:position pos:line="15" pos:column="33"/></name></expr>)<pos:position pos:line="15" pos:column="34"/></condition><then pos:line="15" pos:column="34"> <block pos:line="15" pos:column="35">{
        <return pos:line="16" pos:column="9">return;<pos:position pos:line="16" pos:column="16"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="19" pos:column="5">assert<pos:position pos:line="19" pos:column="11"/></name><argument_list pos:line="19" pos:column="11">(<argument><expr><name pos:line="19" pos:column="12">buf<pos:position pos:line="19" pos:column="15"/></name> <operator pos:line="19" pos:column="16">==<pos:position pos:line="19" pos:column="18"/></operator> <name><name pos:line="19" pos:column="19">gopherState<pos:position pos:line="19" pos:column="30"/></name><operator pos:line="19" pos:column="30">-&gt;<pos:position pos:line="19" pos:column="35"/></operator><name pos:line="19" pos:column="32">replybuf<pos:position pos:line="19" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="42"/></expr_stmt>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><call><name pos:line="21" pos:column="9">EBIT_TEST<pos:position pos:line="21" pos:column="18"/></name><argument_list pos:line="21" pos:column="18">(<argument><expr><name><name pos:line="21" pos:column="19">entry<pos:position pos:line="21" pos:column="24"/></name><operator pos:line="21" pos:column="24">-&gt;<pos:position pos:line="21" pos:column="29"/></operator><name pos:line="21" pos:column="26">flags<pos:position pos:line="21" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="33">ENTRY_ABORTED<pos:position pos:line="21" pos:column="46"/></name></expr></argument>)<pos:position pos:line="21" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="48"/></condition><then pos:line="21" pos:column="48"> <block pos:line="21" pos:column="49">{
        <expr_stmt><expr><call><name><name pos:line="22" pos:column="9">gopherState<pos:position pos:line="22" pos:column="20"/></name><operator pos:line="22" pos:column="20">-&gt;<pos:position pos:line="22" pos:column="25"/></operator><name pos:line="22" pos:column="22">serverConn<pos:position pos:line="22" pos:column="32"/></name><operator pos:line="22" pos:column="32">-&gt;<pos:position pos:line="22" pos:column="37"/></operator><name pos:line="22" pos:column="34">close<pos:position pos:line="22" pos:column="39"/></name></name><argument_list pos:line="22" pos:column="39">()<pos:position pos:line="22" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="42"/></expr_stmt>
        <return pos:line="23" pos:column="9">return;<pos:position pos:line="23" pos:column="16"/></return>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>

<cpp:if pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">if<pos:position pos:line="26" pos:column="4"/></cpp:directive> <expr><name pos:line="26" pos:column="5">USE_DELAY_POOLS<pos:position pos:line="26" pos:column="20"/></name></expr></cpp:if>
    <expr_stmt><expr><name pos:line="27" pos:column="5">read_sz<pos:position pos:line="27" pos:column="12"/></name> <operator pos:line="27" pos:column="13">=<pos:position pos:line="27" pos:column="14"/></operator> <call><name><name pos:line="27" pos:column="15">delayId<pos:position pos:line="27" pos:column="22"/></name><operator pos:line="27" pos:column="22">.<pos:position pos:line="27" pos:column="23"/></operator><name pos:line="27" pos:column="23">bytesWanted<pos:position pos:line="27" pos:column="34"/></name></name><argument_list pos:line="27" pos:column="34">(<argument><expr><literal type="number" pos:line="27" pos:column="35">1<pos:position pos:line="27" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="38">read_sz<pos:position pos:line="27" pos:column="45"/></name></expr></argument>)<pos:position pos:line="27" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="47"/></expr_stmt>
<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif<pos:position pos:line="28" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="30" pos:column="5">/* leave one space for \0 in gopherToHTML */</comment>

    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><name pos:line="32" pos:column="9">flag<pos:position pos:line="32" pos:column="13"/></name> <operator pos:line="32" pos:column="14">==<pos:position pos:line="32" pos:column="16"/></operator> <name pos:line="32" pos:column="17">COMM_OK<pos:position pos:line="32" pos:column="24"/></name> <operator pos:line="32" pos:column="25">&amp;&amp;<pos:position pos:line="32" pos:column="35"/></operator> <name pos:line="32" pos:column="28">len<pos:position pos:line="32" pos:column="31"/></name> <operator pos:line="32" pos:column="32">&gt;<pos:position pos:line="32" pos:column="36"/></operator> <literal type="number" pos:line="32" pos:column="34">0<pos:position pos:line="32" pos:column="35"/></literal></expr>)<pos:position pos:line="32" pos:column="36"/></condition><then pos:line="32" pos:column="36"> <block pos:line="32" pos:column="37">{
<cpp:if pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">if<pos:position pos:line="33" pos:column="4"/></cpp:directive> <expr><name pos:line="33" pos:column="5">USE_DELAY_POOLS<pos:position pos:line="33" pos:column="20"/></name></expr></cpp:if>
        <expr_stmt><expr><call><name><name pos:line="34" pos:column="9">delayId<pos:position pos:line="34" pos:column="16"/></name><operator pos:line="34" pos:column="16">.<pos:position pos:line="34" pos:column="17"/></operator><name pos:line="34" pos:column="17">bytesIn<pos:position pos:line="34" pos:column="24"/></name></name><argument_list pos:line="34" pos:column="24">(<argument><expr><name pos:line="34" pos:column="25">len<pos:position pos:line="34" pos:column="28"/></name></expr></argument>)<pos:position pos:line="34" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="30"/></expr_stmt>
<cpp:endif pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">endif<pos:position pos:line="35" pos:column="7"/></cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name pos:line="37" pos:column="9">kb_incr<pos:position pos:line="37" pos:column="16"/></name><argument_list pos:line="37" pos:column="16">(<argument><expr><operator pos:line="37" pos:column="17">&amp;<pos:position pos:line="37" pos:column="22"/></operator><operator pos:line="37" pos:column="18">(<pos:position pos:line="37" pos:column="19"/></operator><name><name pos:line="37" pos:column="19">statCounter<pos:position pos:line="37" pos:column="30"/></name><operator pos:line="37" pos:column="30">.<pos:position pos:line="37" pos:column="31"/></operator><name pos:line="37" pos:column="31">server<pos:position pos:line="37" pos:column="37"/></name><operator pos:line="37" pos:column="37">.<pos:position pos:line="37" pos:column="38"/></operator><name pos:line="37" pos:column="38">all<pos:position pos:line="37" pos:column="41"/></name><operator pos:line="37" pos:column="41">.<pos:position pos:line="37" pos:column="42"/></operator><name pos:line="37" pos:column="42">kbytes_in<pos:position pos:line="37" pos:column="51"/></name></name><operator pos:line="37" pos:column="51">)<pos:position pos:line="37" pos:column="52"/></operator></expr></argument>, <argument><expr><name pos:line="37" pos:column="54">len<pos:position pos:line="37" pos:column="57"/></name></expr></argument>)<pos:position pos:line="37" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="59"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="38" pos:column="9">kb_incr<pos:position pos:line="38" pos:column="16"/></name><argument_list pos:line="38" pos:column="16">(<argument><expr><operator pos:line="38" pos:column="17">&amp;<pos:position pos:line="38" pos:column="22"/></operator><operator pos:line="38" pos:column="18">(<pos:position pos:line="38" pos:column="19"/></operator><name><name pos:line="38" pos:column="19">statCounter<pos:position pos:line="38" pos:column="30"/></name><operator pos:line="38" pos:column="30">.<pos:position pos:line="38" pos:column="31"/></operator><name pos:line="38" pos:column="31">server<pos:position pos:line="38" pos:column="37"/></name><operator pos:line="38" pos:column="37">.<pos:position pos:line="38" pos:column="38"/></operator><name pos:line="38" pos:column="38">other<pos:position pos:line="38" pos:column="43"/></name><operator pos:line="38" pos:column="43">.<pos:position pos:line="38" pos:column="44"/></operator><name pos:line="38" pos:column="44">kbytes_in<pos:position pos:line="38" pos:column="53"/></name></name><operator pos:line="38" pos:column="53">)<pos:position pos:line="38" pos:column="54"/></operator></expr></argument>, <argument><expr><name pos:line="38" pos:column="56">len<pos:position pos:line="38" pos:column="59"/></name></expr></argument>)<pos:position pos:line="38" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="61"/></expr_stmt>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="41" pos:column="5">debugs<pos:position pos:line="41" pos:column="11"/></name><argument_list pos:line="41" pos:column="11">(<argument><expr><literal type="number" pos:line="41" pos:column="12">10<pos:position pos:line="41" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="16">5<pos:position pos:line="41" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="19">HERE<pos:position pos:line="41" pos:column="23"/></name> <operator pos:line="41" pos:column="24">&lt;&lt;<pos:position pos:line="41" pos:column="32"/></operator> <name pos:line="41" pos:column="27">conn<pos:position pos:line="41" pos:column="31"/></name> <operator pos:line="41" pos:column="32">&lt;&lt;<pos:position pos:line="41" pos:column="40"/></operator> <literal type="string" pos:line="41" pos:column="35">" read len="<pos:position pos:line="41" pos:column="47"/></literal> <operator pos:line="41" pos:column="48">&lt;&lt;<pos:position pos:line="41" pos:column="56"/></operator> <name pos:line="41" pos:column="51">len<pos:position pos:line="41" pos:column="54"/></name></expr></argument>)<pos:position pos:line="41" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="56"/></expr_stmt>

    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><name pos:line="43" pos:column="9">flag<pos:position pos:line="43" pos:column="13"/></name> <operator pos:line="43" pos:column="14">==<pos:position pos:line="43" pos:column="16"/></operator> <name pos:line="43" pos:column="17">COMM_OK<pos:position pos:line="43" pos:column="24"/></name> <operator pos:line="43" pos:column="25">&amp;&amp;<pos:position pos:line="43" pos:column="35"/></operator> <name pos:line="43" pos:column="28">len<pos:position pos:line="43" pos:column="31"/></name> <operator pos:line="43" pos:column="32">&gt;<pos:position pos:line="43" pos:column="36"/></operator> <literal type="number" pos:line="43" pos:column="34">0<pos:position pos:line="43" pos:column="35"/></literal></expr>)<pos:position pos:line="43" pos:column="36"/></condition><then pos:line="43" pos:column="36"> <block pos:line="43" pos:column="37">{
        <decl_stmt><decl><type><name><name pos:line="44" pos:column="9">AsyncCall<pos:position pos:line="44" pos:column="18"/></name><operator pos:line="44" pos:column="18">::<pos:position pos:line="44" pos:column="20"/></operator><name pos:line="44" pos:column="20">Pointer<pos:position pos:line="44" pos:column="27"/></name></name></type> <name pos:line="44" pos:column="28">nil<pos:position pos:line="44" pos:column="31"/></name></decl>;<pos:position pos:line="44" pos:column="32"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="45" pos:column="9">commSetConnTimeout<pos:position pos:line="45" pos:column="27"/></name><argument_list pos:line="45" pos:column="27">(<argument><expr><name pos:line="45" pos:column="28">conn<pos:position pos:line="45" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="34">Config<pos:position pos:line="45" pos:column="40"/></name><operator pos:line="45" pos:column="40">.<pos:position pos:line="45" pos:column="41"/></operator><name pos:line="45" pos:column="41">Timeout<pos:position pos:line="45" pos:column="48"/></name><operator pos:line="45" pos:column="48">.<pos:position pos:line="45" pos:column="49"/></operator><name pos:line="45" pos:column="49">read<pos:position pos:line="45" pos:column="53"/></name></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="55">nil<pos:position pos:line="45" pos:column="58"/></name></expr></argument>)<pos:position pos:line="45" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="60"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="46" pos:column="9">++<pos:position pos:line="46" pos:column="11"/></operator><name><name pos:line="46" pos:column="11">IOStats<pos:position pos:line="46" pos:column="18"/></name><operator pos:line="46" pos:column="18">.<pos:position pos:line="46" pos:column="19"/></operator><name pos:line="46" pos:column="19">Gopher<pos:position pos:line="46" pos:column="25"/></name><operator pos:line="46" pos:column="25">.<pos:position pos:line="46" pos:column="26"/></operator><name pos:line="46" pos:column="26">reads<pos:position pos:line="46" pos:column="31"/></name></name></expr>;<pos:position pos:line="46" pos:column="32"/></expr_stmt>

        <for pos:line="48" pos:column="9">for <control pos:line="48" pos:column="13">(<init><expr><name pos:line="48" pos:column="14">clen<pos:position pos:line="48" pos:column="18"/></name> <operator pos:line="48" pos:column="19">=<pos:position pos:line="48" pos:column="20"/></operator> <name pos:line="48" pos:column="21">len<pos:position pos:line="48" pos:column="24"/></name> <operator pos:line="48" pos:column="25">-<pos:position pos:line="48" pos:column="26"/></operator> <literal type="number" pos:line="48" pos:column="27">1<pos:position pos:line="48" pos:column="28"/></literal></expr><operator pos:line="48" pos:column="28">,<pos:position pos:line="48" pos:column="29"/></operator> <expr><name pos:line="48" pos:column="30">bin<pos:position pos:line="48" pos:column="33"/></name> <operator pos:line="48" pos:column="34">=<pos:position pos:line="48" pos:column="35"/></operator> <literal type="number" pos:line="48" pos:column="36">0<pos:position pos:line="48" pos:column="37"/></literal></expr>;<pos:position pos:line="48" pos:column="38"/></init> <condition><expr><name pos:line="48" pos:column="39">clen<pos:position pos:line="48" pos:column="43"/></name></expr>;<pos:position pos:line="48" pos:column="44"/></condition> <incr><expr><operator pos:line="48" pos:column="45">++<pos:position pos:line="48" pos:column="47"/></operator><name pos:line="48" pos:column="47">bin<pos:position pos:line="48" pos:column="50"/></name></expr></incr>)<pos:position pos:line="48" pos:column="51"/></control>
            <block type="pseudo"><expr_stmt><expr><name pos:line="49" pos:column="13">clen<pos:position pos:line="49" pos:column="17"/></name> <operator pos:line="49" pos:column="18">&gt;&gt;=<pos:position pos:line="49" pos:column="27"/></operator> <literal type="number" pos:line="49" pos:column="22">1<pos:position pos:line="49" pos:column="23"/></literal></expr>;<pos:position pos:line="49" pos:column="24"/></expr_stmt></block></for>

        <expr_stmt><expr><operator pos:line="51" pos:column="9">++<pos:position pos:line="51" pos:column="11"/></operator><name><name pos:line="51" pos:column="11">IOStats<pos:position pos:line="51" pos:column="18"/></name><operator pos:line="51" pos:column="18">.<pos:position pos:line="51" pos:column="19"/></operator><name pos:line="51" pos:column="19">Gopher<pos:position pos:line="51" pos:column="25"/></name><operator pos:line="51" pos:column="25">.<pos:position pos:line="51" pos:column="26"/></operator><name pos:line="51" pos:column="26">read_hist<pos:position pos:line="51" pos:column="35"/></name><index pos:line="51" pos:column="35">[<expr><name pos:line="51" pos:column="36">bin<pos:position pos:line="51" pos:column="39"/></name></expr>]<pos:position pos:line="51" pos:column="40"/></index></name></expr>;<pos:position pos:line="51" pos:column="41"/></expr_stmt>

        <decl_stmt><decl><type><name pos:line="53" pos:column="9">HttpRequest<pos:position pos:line="53" pos:column="20"/></name> <modifier pos:line="53" pos:column="21">*<pos:position pos:line="53" pos:column="22"/></modifier></type><name pos:line="53" pos:column="22">req<pos:position pos:line="53" pos:column="25"/></name> <init pos:line="53" pos:column="26">= <expr><name><name pos:line="53" pos:column="28">gopherState<pos:position pos:line="53" pos:column="39"/></name><operator pos:line="53" pos:column="39">-&gt;<pos:position pos:line="53" pos:column="44"/></operator><name pos:line="53" pos:column="41">fwd<pos:position pos:line="53" pos:column="44"/></name><operator pos:line="53" pos:column="44">-&gt;<pos:position pos:line="53" pos:column="49"/></operator><name pos:line="53" pos:column="46">request<pos:position pos:line="53" pos:column="53"/></name></name></expr></init></decl>;<pos:position pos:line="53" pos:column="54"/></decl_stmt>
        <if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><name><name pos:line="54" pos:column="13">req<pos:position pos:line="54" pos:column="16"/></name><operator pos:line="54" pos:column="16">-&gt;<pos:position pos:line="54" pos:column="21"/></operator><name pos:line="54" pos:column="18">hier<pos:position pos:line="54" pos:column="22"/></name><operator pos:line="54" pos:column="22">.<pos:position pos:line="54" pos:column="23"/></operator><name pos:line="54" pos:column="23">bodyBytesRead<pos:position pos:line="54" pos:column="36"/></name></name> <operator pos:line="54" pos:column="37">&lt;<pos:position pos:line="54" pos:column="41"/></operator> <literal type="number" pos:line="54" pos:column="39">0<pos:position pos:line="54" pos:column="40"/></literal></expr>)<pos:position pos:line="54" pos:column="41"/></condition><then pos:line="54" pos:column="41">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="55" pos:column="13">req<pos:position pos:line="55" pos:column="16"/></name><operator pos:line="55" pos:column="16">-&gt;<pos:position pos:line="55" pos:column="21"/></operator><name pos:line="55" pos:column="18">hier<pos:position pos:line="55" pos:column="22"/></name><operator pos:line="55" pos:column="22">.<pos:position pos:line="55" pos:column="23"/></operator><name pos:line="55" pos:column="23">bodyBytesRead<pos:position pos:line="55" pos:column="36"/></name></name> <operator pos:line="55" pos:column="37">=<pos:position pos:line="55" pos:column="38"/></operator> <literal type="number" pos:line="55" pos:column="39">0<pos:position pos:line="55" pos:column="40"/></literal></expr>;<pos:position pos:line="55" pos:column="41"/></expr_stmt></block></then></if>

        <expr_stmt><expr><name><name pos:line="57" pos:column="9">req<pos:position pos:line="57" pos:column="12"/></name><operator pos:line="57" pos:column="12">-&gt;<pos:position pos:line="57" pos:column="17"/></operator><name pos:line="57" pos:column="14">hier<pos:position pos:line="57" pos:column="18"/></name><operator pos:line="57" pos:column="18">.<pos:position pos:line="57" pos:column="19"/></operator><name pos:line="57" pos:column="19">bodyBytesRead<pos:position pos:line="57" pos:column="32"/></name></name> <operator pos:line="57" pos:column="33">+=<pos:position pos:line="57" pos:column="35"/></operator> <name pos:line="57" pos:column="36">len<pos:position pos:line="57" pos:column="39"/></name></expr>;<pos:position pos:line="57" pos:column="40"/></expr_stmt>
    }<pos:position pos:line="58" pos:column="6"/></block></then></if>

    <if pos:line="60" pos:column="5">if <condition pos:line="60" pos:column="8">(<expr><name pos:line="60" pos:column="9">flag<pos:position pos:line="60" pos:column="13"/></name> <operator pos:line="60" pos:column="14">!=<pos:position pos:line="60" pos:column="16"/></operator> <name pos:line="60" pos:column="17">COMM_OK<pos:position pos:line="60" pos:column="24"/></name></expr>)<pos:position pos:line="60" pos:column="25"/></condition><then pos:line="60" pos:column="25"> <block pos:line="60" pos:column="26">{
        <expr_stmt><expr><call><name pos:line="61" pos:column="9">debugs<pos:position pos:line="61" pos:column="15"/></name><argument_list pos:line="61" pos:column="15">(<argument><expr><literal type="number" pos:line="61" pos:column="16">50<pos:position pos:line="61" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="61" pos:column="20">DBG_IMPORTANT<pos:position pos:line="61" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="35">"gopherReadReply: error reading: "<pos:position pos:line="61" pos:column="69"/></literal> <operator pos:line="61" pos:column="70">&lt;&lt;<pos:position pos:line="61" pos:column="78"/></operator> <call><name pos:line="61" pos:column="73">xstrerror<pos:position pos:line="61" pos:column="82"/></name><argument_list pos:line="61" pos:column="82">()<pos:position pos:line="61" pos:column="84"/></argument_list></call></expr></argument>)<pos:position pos:line="61" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="86"/></expr_stmt>

        <if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><call><name pos:line="63" pos:column="13">ignoreErrno<pos:position pos:line="63" pos:column="24"/></name><argument_list pos:line="63" pos:column="24">(<argument><expr><name pos:line="63" pos:column="25">xerrno<pos:position pos:line="63" pos:column="31"/></name></expr></argument>)<pos:position pos:line="63" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="63" pos:column="33"/></condition><then pos:line="63" pos:column="33"> <block pos:line="63" pos:column="34">{
            <decl_stmt><decl><type><name><name pos:line="64" pos:column="13">AsyncCall<pos:position pos:line="64" pos:column="22"/></name><operator pos:line="64" pos:column="22">::<pos:position pos:line="64" pos:column="24"/></operator><name pos:line="64" pos:column="24">Pointer<pos:position pos:line="64" pos:column="31"/></name></name></type> <name pos:line="64" pos:column="32">call<pos:position pos:line="64" pos:column="36"/></name> <init pos:line="64" pos:column="37">= <expr><call><name pos:line="64" pos:column="39">commCbCall<pos:position pos:line="64" pos:column="49"/></name><argument_list pos:line="64" pos:column="49">(<argument><expr><literal type="number" pos:line="64" pos:column="50">5<pos:position pos:line="64" pos:column="51"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="64" pos:column="52">4<pos:position pos:line="64" pos:column="53"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="55">"gopherReadReply"<pos:position pos:line="64" pos:column="72"/></literal></expr></argument>,
                                                 <argument><expr><call><name pos:line="65" pos:column="50">CommIoCbPtrFun<pos:position pos:line="65" pos:column="64"/></name><argument_list pos:line="65" pos:column="64">(<argument><expr><name pos:line="65" pos:column="65">gopherReadReply<pos:position pos:line="65" pos:column="80"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="82">gopherState<pos:position pos:line="65" pos:column="93"/></name></expr></argument>)<pos:position pos:line="65" pos:column="94"/></argument_list></call></expr></argument>)<pos:position pos:line="65" pos:column="95"/></argument_list></call></expr></init></decl>;<pos:position pos:line="65" pos:column="96"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="66" pos:column="13">comm_read<pos:position pos:line="66" pos:column="22"/></name><argument_list pos:line="66" pos:column="22">(<argument><expr><name pos:line="66" pos:column="23">conn<pos:position pos:line="66" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="29">buf<pos:position pos:line="66" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="34">read_sz<pos:position pos:line="66" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="43">call<pos:position pos:line="66" pos:column="47"/></name></expr></argument>)<pos:position pos:line="66" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="49"/></expr_stmt>
        }<pos:position pos:line="67" pos:column="10"/></block></then> <else pos:line="67" pos:column="11">else <block pos:line="67" pos:column="16">{
            <decl_stmt><decl><type><name pos:line="68" pos:column="13">ErrorState<pos:position pos:line="68" pos:column="23"/></name> <modifier pos:line="68" pos:column="24">*<pos:position pos:line="68" pos:column="25"/></modifier></type><name pos:line="68" pos:column="25">err<pos:position pos:line="68" pos:column="28"/></name> <init pos:line="68" pos:column="29">= <expr><operator pos:line="68" pos:column="31">new<pos:position pos:line="68" pos:column="34"/></operator> <call><name pos:line="68" pos:column="35">ErrorState<pos:position pos:line="68" pos:column="45"/></name><argument_list pos:line="68" pos:column="45">(<argument><expr><name pos:line="68" pos:column="46">ERR_READ_ERROR<pos:position pos:line="68" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="62">HTTP_INTERNAL_SERVER_ERROR<pos:position pos:line="68" pos:column="88"/></name></expr></argument>, <argument><expr><name><name pos:line="68" pos:column="90">gopherState<pos:position pos:line="68" pos:column="101"/></name><operator pos:line="68" pos:column="101">-&gt;<pos:position pos:line="68" pos:column="106"/></operator><name pos:line="68" pos:column="103">fwd<pos:position pos:line="68" pos:column="106"/></name><operator pos:line="68" pos:column="106">-&gt;<pos:position pos:line="68" pos:column="111"/></operator><name pos:line="68" pos:column="108">request<pos:position pos:line="68" pos:column="115"/></name></name></expr></argument>)<pos:position pos:line="68" pos:column="116"/></argument_list></call></expr></init></decl>;<pos:position pos:line="68" pos:column="117"/></decl_stmt>
            <expr_stmt><expr><name><name pos:line="69" pos:column="13">err<pos:position pos:line="69" pos:column="16"/></name><operator pos:line="69" pos:column="16">-&gt;<pos:position pos:line="69" pos:column="21"/></operator><name pos:line="69" pos:column="18">xerrno<pos:position pos:line="69" pos:column="24"/></name></name> <operator pos:line="69" pos:column="25">=<pos:position pos:line="69" pos:column="26"/></operator> <name pos:line="69" pos:column="27">xerrno<pos:position pos:line="69" pos:column="33"/></name></expr>;<pos:position pos:line="69" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="70" pos:column="13">gopherState<pos:position pos:line="70" pos:column="24"/></name><operator pos:line="70" pos:column="24">-&gt;<pos:position pos:line="70" pos:column="29"/></operator><name pos:line="70" pos:column="26">fwd<pos:position pos:line="70" pos:column="29"/></name><operator pos:line="70" pos:column="29">-&gt;<pos:position pos:line="70" pos:column="34"/></operator><name pos:line="70" pos:column="31">fail<pos:position pos:line="70" pos:column="35"/></name></name><argument_list pos:line="70" pos:column="35">(<argument><expr><name pos:line="70" pos:column="36">err<pos:position pos:line="70" pos:column="39"/></name></expr></argument>)<pos:position pos:line="70" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="41"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="71" pos:column="13">gopherState<pos:position pos:line="71" pos:column="24"/></name><operator pos:line="71" pos:column="24">-&gt;<pos:position pos:line="71" pos:column="29"/></operator><name pos:line="71" pos:column="26">serverConn<pos:position pos:line="71" pos:column="36"/></name><operator pos:line="71" pos:column="36">-&gt;<pos:position pos:line="71" pos:column="41"/></operator><name pos:line="71" pos:column="38">close<pos:position pos:line="71" pos:column="43"/></name></name><argument_list pos:line="71" pos:column="43">()<pos:position pos:line="71" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="46"/></expr_stmt>
        }<pos:position pos:line="72" pos:column="10"/></block></else></if>
    }<pos:position pos:line="73" pos:column="6"/></block></then> <elseif pos:line="73" pos:column="7">else <if pos:line="73" pos:column="12">if <condition pos:line="73" pos:column="15">(<expr><name pos:line="73" pos:column="16">len<pos:position pos:line="73" pos:column="19"/></name> <operator pos:line="73" pos:column="20">==<pos:position pos:line="73" pos:column="22"/></operator> <literal type="number" pos:line="73" pos:column="23">0<pos:position pos:line="73" pos:column="24"/></literal> <operator pos:line="73" pos:column="25">&amp;&amp;<pos:position pos:line="73" pos:column="35"/></operator> <call><name><name pos:line="73" pos:column="28">entry<pos:position pos:line="73" pos:column="33"/></name><operator pos:line="73" pos:column="33">-&gt;<pos:position pos:line="73" pos:column="38"/></operator><name pos:line="73" pos:column="35">isEmpty<pos:position pos:line="73" pos:column="42"/></name></name><argument_list pos:line="73" pos:column="42">()<pos:position pos:line="73" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="73" pos:column="45"/></condition><then pos:line="73" pos:column="45"> <block pos:line="73" pos:column="46">{
        <expr_stmt><expr><call><name><name pos:line="74" pos:column="9">gopherState<pos:position pos:line="74" pos:column="20"/></name><operator pos:line="74" pos:column="20">-&gt;<pos:position pos:line="74" pos:column="25"/></operator><name pos:line="74" pos:column="22">fwd<pos:position pos:line="74" pos:column="25"/></name><operator pos:line="74" pos:column="25">-&gt;<pos:position pos:line="74" pos:column="30"/></operator><name pos:line="74" pos:column="27">fail<pos:position pos:line="74" pos:column="31"/></name></name><argument_list pos:line="74" pos:column="31">(<argument><expr><operator pos:line="74" pos:column="32">new<pos:position pos:line="74" pos:column="35"/></operator> <call><name pos:line="74" pos:column="36">ErrorState<pos:position pos:line="74" pos:column="46"/></name><argument_list pos:line="74" pos:column="46">(<argument><expr><name pos:line="74" pos:column="47">ERR_ZERO_SIZE_OBJECT<pos:position pos:line="74" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="69">HTTP_SERVICE_UNAVAILABLE<pos:position pos:line="74" pos:column="93"/></name></expr></argument>, <argument><expr><name><name pos:line="74" pos:column="95">gopherState<pos:position pos:line="74" pos:column="106"/></name><operator pos:line="74" pos:column="106">-&gt;<pos:position pos:line="74" pos:column="111"/></operator><name pos:line="74" pos:column="108">fwd<pos:position pos:line="74" pos:column="111"/></name><operator pos:line="74" pos:column="111">-&gt;<pos:position pos:line="74" pos:column="116"/></operator><name pos:line="74" pos:column="113">request<pos:position pos:line="74" pos:column="120"/></name></name></expr></argument>)<pos:position pos:line="74" pos:column="121"/></argument_list></call></expr></argument>)<pos:position pos:line="74" pos:column="122"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="123"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="75" pos:column="9">gopherState<pos:position pos:line="75" pos:column="20"/></name><operator pos:line="75" pos:column="20">-&gt;<pos:position pos:line="75" pos:column="25"/></operator><name pos:line="75" pos:column="22">serverConn<pos:position pos:line="75" pos:column="32"/></name><operator pos:line="75" pos:column="32">-&gt;<pos:position pos:line="75" pos:column="37"/></operator><name pos:line="75" pos:column="34">close<pos:position pos:line="75" pos:column="39"/></name></name><argument_list pos:line="75" pos:column="39">()<pos:position pos:line="75" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="76" pos:column="6"/></block></then></if></elseif> <elseif pos:line="76" pos:column="7">else <if pos:line="76" pos:column="12">if <condition pos:line="76" pos:column="15">(<expr><name pos:line="76" pos:column="16">len<pos:position pos:line="76" pos:column="19"/></name> <operator pos:line="76" pos:column="20">==<pos:position pos:line="76" pos:column="22"/></operator> <literal type="number" pos:line="76" pos:column="23">0<pos:position pos:line="76" pos:column="24"/></literal></expr>)<pos:position pos:line="76" pos:column="25"/></condition><then pos:line="76" pos:column="25"> <block pos:line="76" pos:column="26">{
        <comment type="block" pos:line="77" pos:column="9">/* Connection closed; retrieval done. */</comment>
        <comment type="block" pos:line="78" pos:column="9">/* flush the rest of data in temp buf if there is one. */</comment>

        <if pos:line="80" pos:column="9">if <condition pos:line="80" pos:column="12">(<expr><name><name pos:line="80" pos:column="13">gopherState<pos:position pos:line="80" pos:column="24"/></name><operator pos:line="80" pos:column="24">-&gt;<pos:position pos:line="80" pos:column="29"/></operator><name pos:line="80" pos:column="26">conversion<pos:position pos:line="80" pos:column="36"/></name></name> <operator pos:line="80" pos:column="37">!=<pos:position pos:line="80" pos:column="39"/></operator> <name><name pos:line="80" pos:column="40">gopher_ds<pos:position pos:line="80" pos:column="49"/></name><operator pos:line="80" pos:column="49">::<pos:position pos:line="80" pos:column="51"/></operator><name pos:line="80" pos:column="51">NORMAL<pos:position pos:line="80" pos:column="57"/></name></name></expr>)<pos:position pos:line="80" pos:column="58"/></condition><then pos:line="80" pos:column="58">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="81" pos:column="13">gopherEndHTML<pos:position pos:line="81" pos:column="26"/></name><argument_list pos:line="81" pos:column="26">(<argument><expr><name pos:line="81" pos:column="27">gopherState<pos:position pos:line="81" pos:column="38"/></name></expr></argument>)<pos:position pos:line="81" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="40"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name><name pos:line="83" pos:column="9">entry<pos:position pos:line="83" pos:column="14"/></name><operator pos:line="83" pos:column="14">-&gt;<pos:position pos:line="83" pos:column="19"/></operator><name pos:line="83" pos:column="16">timestampsSet<pos:position pos:line="83" pos:column="29"/></name></name><argument_list pos:line="83" pos:column="29">()<pos:position pos:line="83" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="84" pos:column="9">entry<pos:position pos:line="84" pos:column="14"/></name><operator pos:line="84" pos:column="14">-&gt;<pos:position pos:line="84" pos:column="19"/></operator><name pos:line="84" pos:column="16">flush<pos:position pos:line="84" pos:column="21"/></name></name><argument_list pos:line="84" pos:column="21">()<pos:position pos:line="84" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="85" pos:column="9">gopherState<pos:position pos:line="85" pos:column="20"/></name><operator pos:line="85" pos:column="20">-&gt;<pos:position pos:line="85" pos:column="25"/></operator><name pos:line="85" pos:column="22">fwd<pos:position pos:line="85" pos:column="25"/></name><operator pos:line="85" pos:column="25">-&gt;<pos:position pos:line="85" pos:column="30"/></operator><name pos:line="85" pos:column="27">complete<pos:position pos:line="85" pos:column="35"/></name></name><argument_list pos:line="85" pos:column="35">()<pos:position pos:line="85" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="86" pos:column="9">gopherState<pos:position pos:line="86" pos:column="20"/></name><operator pos:line="86" pos:column="20">-&gt;<pos:position pos:line="86" pos:column="25"/></operator><name pos:line="86" pos:column="22">serverConn<pos:position pos:line="86" pos:column="32"/></name><operator pos:line="86" pos:column="32">-&gt;<pos:position pos:line="86" pos:column="37"/></operator><name pos:line="86" pos:column="34">close<pos:position pos:line="86" pos:column="39"/></name></name><argument_list pos:line="86" pos:column="39">()<pos:position pos:line="86" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="87" pos:column="6"/></block></then></if></elseif> <else pos:line="87" pos:column="7">else <block pos:line="87" pos:column="12">{
        <if pos:line="88" pos:column="9">if <condition pos:line="88" pos:column="12">(<expr><name><name pos:line="88" pos:column="13">gopherState<pos:position pos:line="88" pos:column="24"/></name><operator pos:line="88" pos:column="24">-&gt;<pos:position pos:line="88" pos:column="29"/></operator><name pos:line="88" pos:column="26">conversion<pos:position pos:line="88" pos:column="36"/></name></name> <operator pos:line="88" pos:column="37">!=<pos:position pos:line="88" pos:column="39"/></operator> <name><name pos:line="88" pos:column="40">gopher_ds<pos:position pos:line="88" pos:column="49"/></name><operator pos:line="88" pos:column="49">::<pos:position pos:line="88" pos:column="51"/></operator><name pos:line="88" pos:column="51">NORMAL<pos:position pos:line="88" pos:column="57"/></name></name></expr>)<pos:position pos:line="88" pos:column="58"/></condition><then pos:line="88" pos:column="58"> <block pos:line="88" pos:column="59">{
            <expr_stmt><expr><call><name pos:line="89" pos:column="13">gopherToHTML<pos:position pos:line="89" pos:column="25"/></name><argument_list pos:line="89" pos:column="25">(<argument><expr><name pos:line="89" pos:column="26">gopherState<pos:position pos:line="89" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="39">buf<pos:position pos:line="89" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="44">len<pos:position pos:line="89" pos:column="47"/></name></expr></argument>)<pos:position pos:line="89" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="49"/></expr_stmt>
        }<pos:position pos:line="90" pos:column="10"/></block></then> <else pos:line="90" pos:column="11">else <block pos:line="90" pos:column="16">{
            <expr_stmt><expr><call><name><name pos:line="91" pos:column="13">entry<pos:position pos:line="91" pos:column="18"/></name><operator pos:line="91" pos:column="18">-&gt;<pos:position pos:line="91" pos:column="23"/></operator><name pos:line="91" pos:column="20">append<pos:position pos:line="91" pos:column="26"/></name></name><argument_list pos:line="91" pos:column="26">(<argument><expr><name pos:line="91" pos:column="27">buf<pos:position pos:line="91" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="32">len<pos:position pos:line="91" pos:column="35"/></name></expr></argument>)<pos:position pos:line="91" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="37"/></expr_stmt>
        }<pos:position pos:line="92" pos:column="10"/></block></else></if>
        <decl_stmt><decl><type><name><name pos:line="93" pos:column="9">AsyncCall<pos:position pos:line="93" pos:column="18"/></name><operator pos:line="93" pos:column="18">::<pos:position pos:line="93" pos:column="20"/></operator><name pos:line="93" pos:column="20">Pointer<pos:position pos:line="93" pos:column="27"/></name></name></type> <name pos:line="93" pos:column="28">call<pos:position pos:line="93" pos:column="32"/></name> <init pos:line="93" pos:column="33">= <expr><call><name pos:line="93" pos:column="35">commCbCall<pos:position pos:line="93" pos:column="45"/></name><argument_list pos:line="93" pos:column="45">(<argument><expr><literal type="number" pos:line="93" pos:column="46">5<pos:position pos:line="93" pos:column="47"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="93" pos:column="48">4<pos:position pos:line="93" pos:column="49"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="93" pos:column="51">"gopherReadReply"<pos:position pos:line="93" pos:column="68"/></literal></expr></argument>,
                                             <argument><expr><call><name pos:line="94" pos:column="46">CommIoCbPtrFun<pos:position pos:line="94" pos:column="60"/></name><argument_list pos:line="94" pos:column="60">(<argument><expr><name pos:line="94" pos:column="61">gopherReadReply<pos:position pos:line="94" pos:column="76"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="78">gopherState<pos:position pos:line="94" pos:column="89"/></name></expr></argument>)<pos:position pos:line="94" pos:column="90"/></argument_list></call></expr></argument>)<pos:position pos:line="94" pos:column="91"/></argument_list></call></expr></init></decl>;<pos:position pos:line="94" pos:column="92"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="95" pos:column="9">comm_read<pos:position pos:line="95" pos:column="18"/></name><argument_list pos:line="95" pos:column="18">(<argument><expr><name pos:line="95" pos:column="19">conn<pos:position pos:line="95" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="25">buf<pos:position pos:line="95" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="30">read_sz<pos:position pos:line="95" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="39">call<pos:position pos:line="95" pos:column="43"/></name></expr></argument>)<pos:position pos:line="95" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="96" pos:column="6"/></block></else></if>
}<pos:position pos:line="97" pos:column="2"/></block></function></unit>
