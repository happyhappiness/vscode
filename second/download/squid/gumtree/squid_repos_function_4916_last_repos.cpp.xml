<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4916_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Http<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">One<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">Tokenizer<pos:position pos:line="2" pos:column="21"/></name><operator pos:line="2" pos:column="21">::<pos:position pos:line="2" pos:column="23"/></operator><name pos:line="2" pos:column="23">qdText<pos:position pos:line="2" pos:column="29"/></name></name><parameter_list pos:line="2" pos:column="29">(<parameter><decl><type><name pos:line="2" pos:column="30">SBuf<pos:position pos:line="2" pos:column="34"/></name> <modifier pos:line="2" pos:column="35">&amp;<pos:position pos:line="2" pos:column="40"/></modifier></type><name pos:line="2" pos:column="36">returnedToken<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="51">const<pos:position pos:line="2" pos:column="56"/></specifier> <name pos:line="2" pos:column="57">bool<pos:position pos:line="2" pos:column="61"/></name></type> <name pos:line="2" pos:column="62">http1p0<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="70"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// the initial DQUOTE has been skipped by the caller</comment>

    <comment type="block" pos:line="6" pos:column="5">/*
     * RFC 1945 - defines qdtext:
     *   inclusive of LWS (which includes CR and LF)
     *   exclusive of 0x80-0xFF
     *   includes 0x5C ('\') as just a regular character
     */</comment>
    <decl_stmt><decl><specifier pos:line="12" pos:column="5">static<pos:position pos:line="12" pos:column="11"/></specifier> <type><specifier pos:line="12" pos:column="12">const<pos:position pos:line="12" pos:column="17"/></specifier> <name pos:line="12" pos:column="18">CharacterSet<pos:position pos:line="12" pos:column="30"/></name></type> <name pos:line="12" pos:column="31">qdtext1p0<pos:position pos:line="12" pos:column="40"/></name> <init pos:line="12" pos:column="41">= <expr><call><name pos:line="12" pos:column="43">CharacterSet<pos:position pos:line="12" pos:column="55"/></name><argument_list pos:line="12" pos:column="55">(<argument><expr><literal type="string" pos:line="12" pos:column="56">"qdtext (HTTP/1.0)"<pos:position pos:line="12" pos:column="75"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="77">0x23<pos:position pos:line="12" pos:column="81"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="83">0x7E<pos:position pos:line="12" pos:column="87"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="88"/></argument_list></call> <operator pos:line="12" pos:column="89">+<pos:position pos:line="12" pos:column="90"/></operator>
                                          <call><name pos:line="13" pos:column="43">CharacterSet<pos:position pos:line="13" pos:column="55"/></name><argument_list pos:line="13" pos:column="55">(<argument><expr><literal type="string" pos:line="13" pos:column="56">""<pos:position pos:line="13" pos:column="58"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="60">"!"<pos:position pos:line="13" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="64"/></argument_list></call> <operator pos:line="13" pos:column="65">+<pos:position pos:line="13" pos:column="66"/></operator>
                                          <name><name pos:line="14" pos:column="43">CharacterSet<pos:position pos:line="14" pos:column="55"/></name><operator pos:line="14" pos:column="55">::<pos:position pos:line="14" pos:column="57"/></operator><name pos:line="14" pos:column="57">CR<pos:position pos:line="14" pos:column="59"/></name></name> <operator pos:line="14" pos:column="60">+<pos:position pos:line="14" pos:column="61"/></operator> <name><name pos:line="14" pos:column="62">CharacterSet<pos:position pos:line="14" pos:column="74"/></name><operator pos:line="14" pos:column="74">::<pos:position pos:line="14" pos:column="76"/></operator><name pos:line="14" pos:column="76">LF<pos:position pos:line="14" pos:column="78"/></name></name> <operator pos:line="14" pos:column="79">+<pos:position pos:line="14" pos:column="80"/></operator> <name><name pos:line="14" pos:column="81">CharacterSet<pos:position pos:line="14" pos:column="93"/></name><operator pos:line="14" pos:column="93">::<pos:position pos:line="14" pos:column="95"/></operator><name pos:line="14" pos:column="95">HTAB<pos:position pos:line="14" pos:column="99"/></name></name> <operator pos:line="14" pos:column="100">+<pos:position pos:line="14" pos:column="101"/></operator> <name><name pos:line="14" pos:column="102">CharacterSet<pos:position pos:line="14" pos:column="114"/></name><operator pos:line="14" pos:column="114">::<pos:position pos:line="14" pos:column="116"/></operator><name pos:line="14" pos:column="116">SP<pos:position pos:line="14" pos:column="118"/></name></name></expr></init></decl>;<pos:position pos:line="14" pos:column="119"/></decl_stmt>
    <comment type="block" pos:line="15" pos:column="5">/*
     * RFC 7230 - defines qdtext:
     *   exclusive of CR and LF
     *   inclusive of 0x80-0xFF
     *   includes 0x5C ('\') but only when part of quoted-pair
     */</comment>
    <decl_stmt><decl><specifier pos:line="21" pos:column="5">static<pos:position pos:line="21" pos:column="11"/></specifier> <type><specifier pos:line="21" pos:column="12">const<pos:position pos:line="21" pos:column="17"/></specifier> <name pos:line="21" pos:column="18">CharacterSet<pos:position pos:line="21" pos:column="30"/></name></type> <name pos:line="21" pos:column="31">qdtext1p1<pos:position pos:line="21" pos:column="40"/></name> <init pos:line="21" pos:column="41">= <expr><call><name pos:line="21" pos:column="43">CharacterSet<pos:position pos:line="21" pos:column="55"/></name><argument_list pos:line="21" pos:column="55">(<argument><expr><literal type="string" pos:line="21" pos:column="56">"qdtext (HTTP/1.1)"<pos:position pos:line="21" pos:column="75"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="77">0x23<pos:position pos:line="21" pos:column="81"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="83">0x5B<pos:position pos:line="21" pos:column="87"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="88"/></argument_list></call> <operator pos:line="21" pos:column="89">+<pos:position pos:line="21" pos:column="90"/></operator>
                                          <call><name pos:line="22" pos:column="43">CharacterSet<pos:position pos:line="22" pos:column="55"/></name><argument_list pos:line="22" pos:column="55">(<argument><expr><literal type="string" pos:line="22" pos:column="56">""<pos:position pos:line="22" pos:column="58"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="60">"!"<pos:position pos:line="22" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="64"/></argument_list></call> <operator pos:line="22" pos:column="65">+<pos:position pos:line="22" pos:column="66"/></operator>
                                          <call><name pos:line="23" pos:column="43">CharacterSet<pos:position pos:line="23" pos:column="55"/></name><argument_list pos:line="23" pos:column="55">(<argument><expr><literal type="string" pos:line="23" pos:column="56">""<pos:position pos:line="23" pos:column="58"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="60">0x5D<pos:position pos:line="23" pos:column="64"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="66">0x7E<pos:position pos:line="23" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="71"/></argument_list></call> <operator pos:line="23" pos:column="72">+<pos:position pos:line="23" pos:column="73"/></operator>
                                          <name><name pos:line="24" pos:column="43">CharacterSet<pos:position pos:line="24" pos:column="55"/></name><operator pos:line="24" pos:column="55">::<pos:position pos:line="24" pos:column="57"/></operator><name pos:line="24" pos:column="57">HTAB<pos:position pos:line="24" pos:column="61"/></name></name> <operator pos:line="24" pos:column="62">+<pos:position pos:line="24" pos:column="63"/></operator> <name><name pos:line="24" pos:column="64">CharacterSet<pos:position pos:line="24" pos:column="76"/></name><operator pos:line="24" pos:column="76">::<pos:position pos:line="24" pos:column="78"/></operator><name pos:line="24" pos:column="78">SP<pos:position pos:line="24" pos:column="80"/></name></name> <operator pos:line="24" pos:column="81">+<pos:position pos:line="24" pos:column="82"/></operator>
                                          <name><name pos:line="25" pos:column="43">CharacterSet<pos:position pos:line="25" pos:column="55"/></name><operator pos:line="25" pos:column="55">::<pos:position pos:line="25" pos:column="57"/></operator><name pos:line="25" pos:column="57">OBSTEXT<pos:position pos:line="25" pos:column="64"/></name></name></expr></init></decl>;<pos:position pos:line="25" pos:column="65"/></decl_stmt>

    <comment type="line" pos:line="27" pos:column="5">// best we can do is a conditional reference since http1p0 value may change per-client</comment>
    <decl_stmt><decl><type><specifier pos:line="28" pos:column="5">const<pos:position pos:line="28" pos:column="10"/></specifier> <name pos:line="28" pos:column="11">CharacterSet<pos:position pos:line="28" pos:column="23"/></name> <modifier pos:line="28" pos:column="24">&amp;<pos:position pos:line="28" pos:column="29"/></modifier></type><name pos:line="28" pos:column="25">tokenChars<pos:position pos:line="28" pos:column="35"/></name> <init pos:line="28" pos:column="36">= <expr><operator pos:line="28" pos:column="38">(<pos:position pos:line="28" pos:column="39"/></operator><ternary><condition><expr><name pos:line="28" pos:column="39">http1p0<pos:position pos:line="28" pos:column="46"/></name></expr> ?<pos:position pos:line="28" pos:column="48"/></condition><then pos:line="28" pos:column="48"> <expr><name pos:line="28" pos:column="49">qdtext1p0<pos:position pos:line="28" pos:column="58"/></name></expr> <pos:position pos:line="28" pos:column="59"/></then><else pos:line="28" pos:column="59">: <expr><name pos:line="28" pos:column="61">qdtext1p1<pos:position pos:line="28" pos:column="70"/></name></expr></else></ternary><operator pos:line="28" pos:column="70">)<pos:position pos:line="28" pos:column="71"/></operator></expr></init></decl>;<pos:position pos:line="28" pos:column="72"/></decl_stmt>

    <for pos:line="30" pos:column="5">for <control pos:line="30" pos:column="9">(<init pos:line="30" pos:column="10">;<pos:position pos:line="30" pos:column="11"/></init><condition pos:line="30" pos:column="11">;<pos:position pos:line="30" pos:column="12"/></condition><incr/>)<pos:position pos:line="30" pos:column="13"/></control> <block pos:line="30" pos:column="14">{
        <decl_stmt><decl><type><name><name pos:line="31" pos:column="9">SBuf<pos:position pos:line="31" pos:column="13"/></name><operator pos:line="31" pos:column="13">::<pos:position pos:line="31" pos:column="15"/></operator><name pos:line="31" pos:column="15">size_type<pos:position pos:line="31" pos:column="24"/></name></name></type> <name pos:line="31" pos:column="25">prefixLen<pos:position pos:line="31" pos:column="34"/></name> <init pos:line="31" pos:column="35">= <expr><call><name pos:line="31" pos:column="37">buf<pos:position pos:line="31" pos:column="40"/></name><argument_list pos:line="31" pos:column="40">()<pos:position pos:line="31" pos:column="42"/></argument_list></call><operator pos:line="31" pos:column="42">.<pos:position pos:line="31" pos:column="43"/></operator><call><name pos:line="31" pos:column="43">findFirstNotOf<pos:position pos:line="31" pos:column="57"/></name><argument_list pos:line="31" pos:column="57">(<argument><expr><name pos:line="31" pos:column="58">tokenChars<pos:position pos:line="31" pos:column="68"/></name></expr></argument>)<pos:position pos:line="31" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="31" pos:column="70"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="32" pos:column="9">returnedToken<pos:position pos:line="32" pos:column="22"/></name><operator pos:line="32" pos:column="22">.<pos:position pos:line="32" pos:column="23"/></operator><name pos:line="32" pos:column="23">append<pos:position pos:line="32" pos:column="29"/></name></name><argument_list pos:line="32" pos:column="29">(<argument><expr><call><name pos:line="32" pos:column="30">consume<pos:position pos:line="32" pos:column="37"/></name><argument_list pos:line="32" pos:column="37">(<argument><expr><name pos:line="32" pos:column="38">prefixLen<pos:position pos:line="32" pos:column="47"/></name></expr></argument>)<pos:position pos:line="32" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="32" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="50"/></expr_stmt>

        <comment type="line" pos:line="34" pos:column="9">// HTTP/1.1 allows quoted-pair, HTTP/1.0 does not</comment>
        <if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><operator pos:line="35" pos:column="13">!<pos:position pos:line="35" pos:column="14"/></operator><name pos:line="35" pos:column="14">http1p0<pos:position pos:line="35" pos:column="21"/></name> <operator pos:line="35" pos:column="22">&amp;&amp;<pos:position pos:line="35" pos:column="32"/></operator> <call><name pos:line="35" pos:column="25">skip<pos:position pos:line="35" pos:column="29"/></name><argument_list pos:line="35" pos:column="29">(<argument><expr><literal type="char" pos:line="35" pos:column="30">'\\'<pos:position pos:line="35" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="36"/></condition><then pos:line="35" pos:column="36"> <block pos:line="35" pos:column="37">{
            <comment type="block" pos:line="36" pos:column="13">/* RFC 7230 section 3.2.6
             *
             * The backslash octet ("\") can be used as a single-octet quoting
             * mechanism within quoted-string and comment constructs.  Recipients
             * that process the value of a quoted-string MUST handle a quoted-pair
             * as if it were replaced by the octet following the backslash.
             *
             *   quoted-pair    = "\" ( HTAB / SP / VCHAR / obs-text )
             */</comment>
            <decl_stmt><decl><specifier pos:line="45" pos:column="13">static<pos:position pos:line="45" pos:column="19"/></specifier> <type><specifier pos:line="45" pos:column="20">const<pos:position pos:line="45" pos:column="25"/></specifier> <name pos:line="45" pos:column="26">CharacterSet<pos:position pos:line="45" pos:column="38"/></name></type> <name pos:line="45" pos:column="39">qPairChars<pos:position pos:line="45" pos:column="49"/></name> <init pos:line="45" pos:column="50">= <expr><name><name pos:line="45" pos:column="52">CharacterSet<pos:position pos:line="45" pos:column="64"/></name><operator pos:line="45" pos:column="64">::<pos:position pos:line="45" pos:column="66"/></operator><name pos:line="45" pos:column="66">HTAB<pos:position pos:line="45" pos:column="70"/></name></name> <operator pos:line="45" pos:column="71">+<pos:position pos:line="45" pos:column="72"/></operator> <name><name pos:line="45" pos:column="73">CharacterSet<pos:position pos:line="45" pos:column="85"/></name><operator pos:line="45" pos:column="85">::<pos:position pos:line="45" pos:column="87"/></operator><name pos:line="45" pos:column="87">SP<pos:position pos:line="45" pos:column="89"/></name></name> <operator pos:line="45" pos:column="90">+<pos:position pos:line="45" pos:column="91"/></operator> <name><name pos:line="45" pos:column="92">CharacterSet<pos:position pos:line="45" pos:column="104"/></name><operator pos:line="45" pos:column="104">::<pos:position pos:line="45" pos:column="106"/></operator><name pos:line="45" pos:column="106">VCHAR<pos:position pos:line="45" pos:column="111"/></name></name> <operator pos:line="45" pos:column="112">+<pos:position pos:line="45" pos:column="113"/></operator> <name><name pos:line="45" pos:column="114">CharacterSet<pos:position pos:line="45" pos:column="126"/></name><operator pos:line="45" pos:column="126">::<pos:position pos:line="45" pos:column="128"/></operator><name pos:line="45" pos:column="128">OBSTEXT<pos:position pos:line="45" pos:column="135"/></name></name></expr></init></decl>;<pos:position pos:line="45" pos:column="136"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="46" pos:column="13">SBuf<pos:position pos:line="46" pos:column="17"/></name></type> <name pos:line="46" pos:column="18">escaped<pos:position pos:line="46" pos:column="25"/></name></decl>;<pos:position pos:line="46" pos:column="26"/></decl_stmt>
            <if pos:line="47" pos:column="13">if <condition pos:line="47" pos:column="16">(<expr><operator pos:line="47" pos:column="17">!<pos:position pos:line="47" pos:column="18"/></operator><call><name pos:line="47" pos:column="18">prefix<pos:position pos:line="47" pos:column="24"/></name><argument_list pos:line="47" pos:column="24">(<argument><expr><name pos:line="47" pos:column="25">escaped<pos:position pos:line="47" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="34">qPairChars<pos:position pos:line="47" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="46">1<pos:position pos:line="47" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="49"/></condition><then pos:line="47" pos:column="49"> <block pos:line="47" pos:column="50">{
                <expr_stmt><expr><call><name><name pos:line="48" pos:column="17">returnedToken<pos:position pos:line="48" pos:column="30"/></name><operator pos:line="48" pos:column="30">.<pos:position pos:line="48" pos:column="31"/></operator><name pos:line="48" pos:column="31">clear<pos:position pos:line="48" pos:column="36"/></name></name><argument_list pos:line="48" pos:column="36">()<pos:position pos:line="48" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="39"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="49" pos:column="17">restoreLastCheckpoint<pos:position pos:line="49" pos:column="38"/></name><argument_list pos:line="49" pos:column="38">()<pos:position pos:line="49" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="41"/></expr_stmt>
                <return pos:line="50" pos:column="17">return <expr><literal type="boolean" pos:line="50" pos:column="24">false<pos:position pos:line="50" pos:column="29"/></literal></expr>;<pos:position pos:line="50" pos:column="30"/></return>
            }<pos:position pos:line="51" pos:column="14"/></block></then></if>
            <expr_stmt><expr><call><name><name pos:line="52" pos:column="13">returnedToken<pos:position pos:line="52" pos:column="26"/></name><operator pos:line="52" pos:column="26">.<pos:position pos:line="52" pos:column="27"/></operator><name pos:line="52" pos:column="27">append<pos:position pos:line="52" pos:column="33"/></name></name><argument_list pos:line="52" pos:column="33">(<argument><expr><name pos:line="52" pos:column="34">escaped<pos:position pos:line="52" pos:column="41"/></name></expr></argument>)<pos:position pos:line="52" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="43"/></expr_stmt>
            <continue pos:line="53" pos:column="13">continue;<pos:position pos:line="53" pos:column="22"/></continue>

        }<pos:position pos:line="55" pos:column="10"/></block></then> <elseif pos:line="55" pos:column="11">else <if pos:line="55" pos:column="16">if <condition pos:line="55" pos:column="19">(<expr><call><name pos:line="55" pos:column="20">skip<pos:position pos:line="55" pos:column="24"/></name><argument_list pos:line="55" pos:column="24">(<argument><expr><literal type="char" pos:line="55" pos:column="25">'"'<pos:position pos:line="55" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="30"/></condition><then pos:line="55" pos:column="30"> <block pos:line="55" pos:column="31">{
            <break pos:line="56" pos:column="13">break;<pos:position pos:line="56" pos:column="19"/></break> <comment type="line" pos:line="56" pos:column="20">// done</comment>

        }<pos:position pos:line="58" pos:column="10"/></block></then></if></elseif> <elseif pos:line="58" pos:column="11">else <if pos:line="58" pos:column="16">if <condition pos:line="58" pos:column="19">(<expr><call><name pos:line="58" pos:column="20">atEnd<pos:position pos:line="58" pos:column="25"/></name><argument_list pos:line="58" pos:column="25">()<pos:position pos:line="58" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="58" pos:column="28"/></condition><then pos:line="58" pos:column="28"> <block pos:line="58" pos:column="29">{
            <comment type="line" pos:line="59" pos:column="13">// need more data</comment>
            <expr_stmt><expr><call><name><name pos:line="60" pos:column="13">returnedToken<pos:position pos:line="60" pos:column="26"/></name><operator pos:line="60" pos:column="26">.<pos:position pos:line="60" pos:column="27"/></operator><name pos:line="60" pos:column="27">clear<pos:position pos:line="60" pos:column="32"/></name></name><argument_list pos:line="60" pos:column="32">()<pos:position pos:line="60" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="35"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="61" pos:column="13">restoreLastCheckpoint<pos:position pos:line="61" pos:column="34"/></name><argument_list pos:line="61" pos:column="34">()<pos:position pos:line="61" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="37"/></expr_stmt>
            <return pos:line="62" pos:column="13">return <expr><literal type="boolean" pos:line="62" pos:column="20">false<pos:position pos:line="62" pos:column="25"/></literal></expr>;<pos:position pos:line="62" pos:column="26"/></return>
        }<pos:position pos:line="63" pos:column="10"/></block></then></if></elseif></if>

        <comment type="line" pos:line="65" pos:column="9">// else, we have an error</comment>
        <expr_stmt><expr><call><name pos:line="66" pos:column="9">debugs<pos:position pos:line="66" pos:column="15"/></name><argument_list pos:line="66" pos:column="15">(<argument><expr><literal type="number" pos:line="66" pos:column="16">24<pos:position pos:line="66" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="66" pos:column="20">8<pos:position pos:line="66" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="23">"invalid bytes for set "<pos:position pos:line="66" pos:column="47"/></literal> <operator pos:line="66" pos:column="48">&lt;&lt;<pos:position pos:line="66" pos:column="56"/></operator> <name><name pos:line="66" pos:column="51">tokenChars<pos:position pos:line="66" pos:column="61"/></name><operator pos:line="66" pos:column="61">.<pos:position pos:line="66" pos:column="62"/></operator><name pos:line="66" pos:column="62">name<pos:position pos:line="66" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="66" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="67" pos:column="9">returnedToken<pos:position pos:line="67" pos:column="22"/></name><operator pos:line="67" pos:column="22">.<pos:position pos:line="67" pos:column="23"/></operator><name pos:line="67" pos:column="23">clear<pos:position pos:line="67" pos:column="28"/></name></name><argument_list pos:line="67" pos:column="28">()<pos:position pos:line="67" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="68" pos:column="9">restoreLastCheckpoint<pos:position pos:line="68" pos:column="30"/></name><argument_list pos:line="68" pos:column="30">()<pos:position pos:line="68" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="33"/></expr_stmt>
        <return pos:line="69" pos:column="9">return <expr><literal type="boolean" pos:line="69" pos:column="16">false<pos:position pos:line="69" pos:column="21"/></literal></expr>;<pos:position pos:line="69" pos:column="22"/></return>
    }<pos:position pos:line="70" pos:column="6"/></block></for>

    <comment type="line" pos:line="72" pos:column="5">// found the whole string</comment>
    <return pos:line="73" pos:column="5">return <expr><literal type="boolean" pos:line="73" pos:column="12">true<pos:position pos:line="73" pos:column="16"/></literal></expr>;<pos:position pos:line="73" pos:column="17"/></return>
}<pos:position pos:line="74" pos:column="2"/></block></function></unit>
