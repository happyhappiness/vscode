<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2413_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">store_client<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">readBody<pos:position pos:line="2" pos:column="23"/></name></name><parameter_list pos:line="2" pos:column="23">(<parameter><decl><type><specifier pos:line="2" pos:column="24">const<pos:position pos:line="2" pos:column="29"/></specifier> <name pos:line="2" pos:column="30">char<pos:position pos:line="2" pos:column="34"/></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="36">buf<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="41">ssize_t<pos:position pos:line="2" pos:column="48"/></name></type> <name pos:line="2" pos:column="49">len<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="53"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">parsed_header<pos:position pos:line="4" pos:column="22"/></name> <init pos:line="4" pos:column="23">= <expr><literal type="number" pos:line="4" pos:column="25">0<pos:position pos:line="4" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>

    <comment type="line" pos:line="6" pos:column="5">// Don't assert disk_io_pending here.. may be called by read_header</comment>
    <expr_stmt><expr><name><name pos:line="7" pos:column="5">flags<pos:position pos:line="7" pos:column="10"/></name><operator pos:line="7" pos:column="10">.<pos:position pos:line="7" pos:column="11"/></operator><name pos:line="7" pos:column="11">disk_io_pending<pos:position pos:line="7" pos:column="26"/></name></name> <operator pos:line="7" pos:column="27">=<pos:position pos:line="7" pos:column="28"/></operator> <literal type="boolean" pos:line="7" pos:column="29">false<pos:position pos:line="7" pos:column="34"/></literal></expr>;<pos:position pos:line="7" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">assert<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><call><name><name pos:line="8" pos:column="12">_callback<pos:position pos:line="8" pos:column="21"/></name><operator pos:line="8" pos:column="21">.<pos:position pos:line="8" pos:column="22"/></operator><name pos:line="8" pos:column="22">pending<pos:position pos:line="8" pos:column="29"/></name></name><argument_list pos:line="8" pos:column="29">()<pos:position pos:line="8" pos:column="31"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">debugs<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><literal type="number" pos:line="9" pos:column="12">90<pos:position pos:line="9" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="16">3<pos:position pos:line="9" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="19">"storeClientReadBody: len "<pos:position pos:line="9" pos:column="46"/></literal> <operator pos:line="9" pos:column="47">&lt;&lt;<pos:position pos:line="9" pos:column="55"/></operator> <name pos:line="9" pos:column="50">len<pos:position pos:line="9" pos:column="53"/></name> <operator pos:line="9" pos:column="54">&lt;&lt;<pos:position pos:line="9" pos:column="62"/></operator> <literal type="string" pos:line="9" pos:column="57">""<pos:position pos:line="9" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="61"/></expr_stmt>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name><name pos:line="11" pos:column="9">copyInto<pos:position pos:line="11" pos:column="17"/></name><operator pos:line="11" pos:column="17">.<pos:position pos:line="11" pos:column="18"/></operator><name pos:line="11" pos:column="18">offset<pos:position pos:line="11" pos:column="24"/></name></name> <operator pos:line="11" pos:column="25">==<pos:position pos:line="11" pos:column="27"/></operator> <literal type="number" pos:line="11" pos:column="28">0<pos:position pos:line="11" pos:column="29"/></literal> <operator pos:line="11" pos:column="30">&amp;&amp;<pos:position pos:line="11" pos:column="40"/></operator> <name pos:line="11" pos:column="33">len<pos:position pos:line="11" pos:column="36"/></name> <operator pos:line="11" pos:column="37">&gt;<pos:position pos:line="11" pos:column="41"/></operator> <literal type="number" pos:line="11" pos:column="39">0<pos:position pos:line="11" pos:column="40"/></literal> <operator pos:line="11" pos:column="41">&amp;&amp;<pos:position pos:line="11" pos:column="51"/></operator> <call><name><name pos:line="11" pos:column="44">entry<pos:position pos:line="11" pos:column="49"/></name><operator pos:line="11" pos:column="49">-&gt;<pos:position pos:line="11" pos:column="54"/></operator><name pos:line="11" pos:column="51">getReply<pos:position pos:line="11" pos:column="59"/></name></name><argument_list pos:line="11" pos:column="59">()<pos:position pos:line="11" pos:column="61"/></argument_list></call><operator pos:line="11" pos:column="61">-&gt;<pos:position pos:line="11" pos:column="66"/></operator><call><name><name pos:line="11" pos:column="63">sline<pos:position pos:line="11" pos:column="68"/></name><operator pos:line="11" pos:column="68">.<pos:position pos:line="11" pos:column="69"/></operator><name pos:line="11" pos:column="69">status<pos:position pos:line="11" pos:column="75"/></name></name><argument_list pos:line="11" pos:column="75">()<pos:position pos:line="11" pos:column="77"/></argument_list></call> <operator pos:line="11" pos:column="78">==<pos:position pos:line="11" pos:column="80"/></operator> <name><name pos:line="11" pos:column="81">Http<pos:position pos:line="11" pos:column="85"/></name><operator pos:line="11" pos:column="85">::<pos:position pos:line="11" pos:column="87"/></operator><name pos:line="11" pos:column="87">scNone<pos:position pos:line="11" pos:column="93"/></name></name></expr>)<pos:position pos:line="11" pos:column="94"/></condition><then pos:line="11" pos:column="94"> <block pos:line="11" pos:column="95">{
        <comment type="block" pos:line="12" pos:column="9">/* Our structure ! */</comment>
        <decl_stmt><decl><type><name pos:line="13" pos:column="9">HttpReply<pos:position pos:line="13" pos:column="18"/></name> <modifier pos:line="13" pos:column="19">*<pos:position pos:line="13" pos:column="20"/></modifier></type><name pos:line="13" pos:column="20">rep<pos:position pos:line="13" pos:column="23"/></name> <init pos:line="13" pos:column="24">= <expr><operator pos:line="13" pos:column="26">(<pos:position pos:line="13" pos:column="27"/></operator><name pos:line="13" pos:column="27">HttpReply<pos:position pos:line="13" pos:column="36"/></name> <operator pos:line="13" pos:column="37">*<pos:position pos:line="13" pos:column="38"/></operator><operator pos:line="13" pos:column="38">)<pos:position pos:line="13" pos:column="39"/></operator> <call><name><name pos:line="13" pos:column="40">entry<pos:position pos:line="13" pos:column="45"/></name><operator pos:line="13" pos:column="45">-&gt;<pos:position pos:line="13" pos:column="50"/></operator><name pos:line="13" pos:column="47">getReply<pos:position pos:line="13" pos:column="55"/></name></name><argument_list pos:line="13" pos:column="55">()<pos:position pos:line="13" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="58"/></decl_stmt> <comment type="line" pos:line="13" pos:column="59">// bypass const</comment>

        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><operator pos:line="15" pos:column="13">!<pos:position pos:line="15" pos:column="14"/></operator><call><name><name pos:line="15" pos:column="14">rep<pos:position pos:line="15" pos:column="17"/></name><operator pos:line="15" pos:column="17">-&gt;<pos:position pos:line="15" pos:column="22"/></operator><name pos:line="15" pos:column="19">parseCharBuf<pos:position pos:line="15" pos:column="31"/></name></name><argument_list pos:line="15" pos:column="31">(<argument><expr><name><name pos:line="15" pos:column="32">copyInto<pos:position pos:line="15" pos:column="40"/></name><operator pos:line="15" pos:column="40">.<pos:position pos:line="15" pos:column="41"/></operator><name pos:line="15" pos:column="41">data<pos:position pos:line="15" pos:column="45"/></name></name></expr></argument>, <argument><expr><call><name pos:line="15" pos:column="47">headersEnd<pos:position pos:line="15" pos:column="57"/></name><argument_list pos:line="15" pos:column="57">(<argument><expr><name><name pos:line="15" pos:column="58">copyInto<pos:position pos:line="15" pos:column="66"/></name><operator pos:line="15" pos:column="66">.<pos:position pos:line="15" pos:column="67"/></operator><name pos:line="15" pos:column="67">data<pos:position pos:line="15" pos:column="71"/></name></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="73">len<pos:position pos:line="15" pos:column="76"/></name></expr></argument>)<pos:position pos:line="15" pos:column="77"/></argument_list></call></expr></argument>)<pos:position pos:line="15" pos:column="78"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="79"/></condition><then pos:line="15" pos:column="79"> <block pos:line="15" pos:column="80">{
            <expr_stmt><expr><call><name pos:line="16" pos:column="13">debugs<pos:position pos:line="16" pos:column="19"/></name><argument_list pos:line="16" pos:column="19">(<argument><expr><literal type="number" pos:line="16" pos:column="20">90<pos:position pos:line="16" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="24">DBG_CRITICAL<pos:position pos:line="16" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="38">"Could not parse headers from on disk object"<pos:position pos:line="16" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="85"/></expr_stmt>
        }<pos:position pos:line="17" pos:column="10"/></block></then> <else pos:line="17" pos:column="11">else <block pos:line="17" pos:column="16">{
            <expr_stmt><expr><name pos:line="18" pos:column="13">parsed_header<pos:position pos:line="18" pos:column="26"/></name> <operator pos:line="18" pos:column="27">=<pos:position pos:line="18" pos:column="28"/></operator> <literal type="number" pos:line="18" pos:column="29">1<pos:position pos:line="18" pos:column="30"/></literal></expr>;<pos:position pos:line="18" pos:column="31"/></expr_stmt>
        }<pos:position pos:line="19" pos:column="10"/></block></else></if>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><specifier pos:line="22" pos:column="5">const<pos:position pos:line="22" pos:column="10"/></specifier> <name pos:line="22" pos:column="11">HttpReply<pos:position pos:line="22" pos:column="20"/></name> <modifier pos:line="22" pos:column="21">*<pos:position pos:line="22" pos:column="22"/></modifier></type><name pos:line="22" pos:column="22">rep<pos:position pos:line="22" pos:column="25"/></name> <init pos:line="22" pos:column="26">= <expr><call><name><name pos:line="22" pos:column="28">entry<pos:position pos:line="22" pos:column="33"/></name><operator pos:line="22" pos:column="33">-&gt;<pos:position pos:line="22" pos:column="38"/></operator><name pos:line="22" pos:column="35">getReply<pos:position pos:line="22" pos:column="43"/></name></name><argument_list pos:line="22" pos:column="43">()<pos:position pos:line="22" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="22" pos:column="46"/></decl_stmt>
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><name pos:line="23" pos:column="9">len<pos:position pos:line="23" pos:column="12"/></name> <operator pos:line="23" pos:column="13">&gt;<pos:position pos:line="23" pos:column="17"/></operator> <literal type="number" pos:line="23" pos:column="15">0<pos:position pos:line="23" pos:column="16"/></literal> <operator pos:line="23" pos:column="17">&amp;&amp;<pos:position pos:line="23" pos:column="27"/></operator> <name pos:line="23" pos:column="20">rep<pos:position pos:line="23" pos:column="23"/></name> <operator pos:line="23" pos:column="24">&amp;&amp;<pos:position pos:line="23" pos:column="34"/></operator> <name><name pos:line="23" pos:column="27">entry<pos:position pos:line="23" pos:column="32"/></name><operator pos:line="23" pos:column="32">-&gt;<pos:position pos:line="23" pos:column="37"/></operator><name pos:line="23" pos:column="34">mem_obj<pos:position pos:line="23" pos:column="41"/></name><operator pos:line="23" pos:column="41">-&gt;<pos:position pos:line="23" pos:column="46"/></operator><name pos:line="23" pos:column="43">inmem_lo<pos:position pos:line="23" pos:column="51"/></name></name> <operator pos:line="23" pos:column="52">==<pos:position pos:line="23" pos:column="54"/></operator> <literal type="number" pos:line="23" pos:column="55">0<pos:position pos:line="23" pos:column="56"/></literal> <operator pos:line="23" pos:column="57">&amp;&amp;<pos:position pos:line="23" pos:column="67"/></operator> <call><name><name pos:line="23" pos:column="60">entry<pos:position pos:line="23" pos:column="65"/></name><operator pos:line="23" pos:column="65">-&gt;<pos:position pos:line="23" pos:column="70"/></operator><name pos:line="23" pos:column="67">objectLen<pos:position pos:line="23" pos:column="76"/></name></name><argument_list pos:line="23" pos:column="76">()<pos:position pos:line="23" pos:column="78"/></argument_list></call> <operator pos:line="23" pos:column="79">&lt;=<pos:position pos:line="23" pos:column="84"/></operator> <operator pos:line="23" pos:column="82">(<pos:position pos:line="23" pos:column="83"/></operator><name pos:line="23" pos:column="83">int64_t<pos:position pos:line="23" pos:column="90"/></name><operator pos:line="23" pos:column="90">)<pos:position pos:line="23" pos:column="91"/></operator><name><name pos:line="23" pos:column="91">Config<pos:position pos:line="23" pos:column="97"/></name><operator pos:line="23" pos:column="97">.<pos:position pos:line="23" pos:column="98"/></operator><name pos:line="23" pos:column="98">Store<pos:position pos:line="23" pos:column="103"/></name><operator pos:line="23" pos:column="103">.<pos:position pos:line="23" pos:column="104"/></operator><name pos:line="23" pos:column="104">maxInMemObjSize<pos:position pos:line="23" pos:column="119"/></name></name> <operator pos:line="23" pos:column="120">&amp;&amp;<pos:position pos:line="23" pos:column="130"/></operator> <name><name pos:line="23" pos:column="123">Config<pos:position pos:line="23" pos:column="129"/></name><operator pos:line="23" pos:column="129">.<pos:position pos:line="23" pos:column="130"/></operator><name pos:line="23" pos:column="130">onoff<pos:position pos:line="23" pos:column="135"/></name><operator pos:line="23" pos:column="135">.<pos:position pos:line="23" pos:column="136"/></operator><name pos:line="23" pos:column="136">memory_cache_disk<pos:position pos:line="23" pos:column="153"/></name></name></expr>)<pos:position pos:line="23" pos:column="154"/></condition><then pos:line="23" pos:column="154"> <block pos:line="23" pos:column="155">{
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">storeGetMemSpace<pos:position pos:line="24" pos:column="25"/></name><argument_list pos:line="24" pos:column="25">(<argument><expr><name pos:line="24" pos:column="26">len<pos:position pos:line="24" pos:column="29"/></name></expr></argument>)<pos:position pos:line="24" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="31"/></expr_stmt>
        <comment type="line" pos:line="25" pos:column="9">// The above may start to free our object so we need to check again</comment>
        <if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name><name pos:line="26" pos:column="13">entry<pos:position pos:line="26" pos:column="18"/></name><operator pos:line="26" pos:column="18">-&gt;<pos:position pos:line="26" pos:column="23"/></operator><name pos:line="26" pos:column="20">mem_obj<pos:position pos:line="26" pos:column="27"/></name><operator pos:line="26" pos:column="27">-&gt;<pos:position pos:line="26" pos:column="32"/></operator><name pos:line="26" pos:column="29">inmem_lo<pos:position pos:line="26" pos:column="37"/></name></name> <operator pos:line="26" pos:column="38">==<pos:position pos:line="26" pos:column="40"/></operator> <literal type="number" pos:line="26" pos:column="41">0<pos:position pos:line="26" pos:column="42"/></literal></expr>)<pos:position pos:line="26" pos:column="43"/></condition><then pos:line="26" pos:column="43"> <block pos:line="26" pos:column="44">{
            <comment type="block" pos:line="27" pos:column="13">/* Copy read data back into memory.
             * but first we need to adjust offset.. some parts of the code
             * counts offset including headers, some parts count offset as
             * withing the body.. copyInto is including headers, but the mem
             * cache expects offset without headers (using negative for headers)
             * eventually not storing packed headers in memory at all.
             */</comment>
            <decl_stmt><decl><type><name pos:line="34" pos:column="13">int64_t<pos:position pos:line="34" pos:column="20"/></name></type> <name pos:line="34" pos:column="21">mem_offset<pos:position pos:line="34" pos:column="31"/></name> <init pos:line="34" pos:column="32">= <expr><call><name><name pos:line="34" pos:column="34">entry<pos:position pos:line="34" pos:column="39"/></name><operator pos:line="34" pos:column="39">-&gt;<pos:position pos:line="34" pos:column="44"/></operator><name pos:line="34" pos:column="41">mem_obj<pos:position pos:line="34" pos:column="48"/></name><operator pos:line="34" pos:column="48">-&gt;<pos:position pos:line="34" pos:column="53"/></operator><name pos:line="34" pos:column="50">endOffset<pos:position pos:line="34" pos:column="59"/></name></name><argument_list pos:line="34" pos:column="59">()<pos:position pos:line="34" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="34" pos:column="62"/></decl_stmt>
            <if pos:line="35" pos:column="13">if <condition pos:line="35" pos:column="16">(<expr><operator pos:line="35" pos:column="17">(<pos:position pos:line="35" pos:column="18"/></operator><name><name pos:line="35" pos:column="18">copyInto<pos:position pos:line="35" pos:column="26"/></name><operator pos:line="35" pos:column="26">.<pos:position pos:line="35" pos:column="27"/></operator><name pos:line="35" pos:column="27">offset<pos:position pos:line="35" pos:column="33"/></name></name> <operator pos:line="35" pos:column="34">==<pos:position pos:line="35" pos:column="36"/></operator> <name pos:line="35" pos:column="37">mem_offset<pos:position pos:line="35" pos:column="47"/></name><operator pos:line="35" pos:column="47">)<pos:position pos:line="35" pos:column="48"/></operator> <operator pos:line="35" pos:column="49">||<pos:position pos:line="35" pos:column="51"/></operator> <operator pos:line="35" pos:column="52">(<pos:position pos:line="35" pos:column="53"/></operator><name pos:line="35" pos:column="53">parsed_header<pos:position pos:line="35" pos:column="66"/></name> <operator pos:line="35" pos:column="67">&amp;&amp;<pos:position pos:line="35" pos:column="77"/></operator> <name pos:line="35" pos:column="70">mem_offset<pos:position pos:line="35" pos:column="80"/></name> <operator pos:line="35" pos:column="81">==<pos:position pos:line="35" pos:column="83"/></operator> <name><name pos:line="35" pos:column="84">rep<pos:position pos:line="35" pos:column="87"/></name><operator pos:line="35" pos:column="87">-&gt;<pos:position pos:line="35" pos:column="92"/></operator><name pos:line="35" pos:column="89">hdr_sz<pos:position pos:line="35" pos:column="95"/></name></name><operator pos:line="35" pos:column="95">)<pos:position pos:line="35" pos:column="96"/></operator></expr>)<pos:position pos:line="35" pos:column="97"/></condition><then pos:line="35" pos:column="97"> <block pos:line="35" pos:column="98">{
                <expr_stmt><expr><call><name><name pos:line="36" pos:column="17">entry<pos:position pos:line="36" pos:column="22"/></name><operator pos:line="36" pos:column="22">-&gt;<pos:position pos:line="36" pos:column="27"/></operator><name pos:line="36" pos:column="24">mem_obj<pos:position pos:line="36" pos:column="31"/></name><operator pos:line="36" pos:column="31">-&gt;<pos:position pos:line="36" pos:column="36"/></operator><name pos:line="36" pos:column="33">write<pos:position pos:line="36" pos:column="38"/></name></name><argument_list pos:line="36" pos:column="38">(<argument><expr><call><name pos:line="36" pos:column="39">StoreIOBuffer<pos:position pos:line="36" pos:column="52"/></name><argument_list pos:line="36" pos:column="52">(<argument><expr><name pos:line="36" pos:column="53">len<pos:position pos:line="36" pos:column="56"/></name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="58">copyInto<pos:position pos:line="36" pos:column="66"/></name><operator pos:line="36" pos:column="66">.<pos:position pos:line="36" pos:column="67"/></operator><name pos:line="36" pos:column="67">offset<pos:position pos:line="36" pos:column="73"/></name></name> <operator pos:line="36" pos:column="74">-<pos:position pos:line="36" pos:column="75"/></operator> <name><name pos:line="36" pos:column="76">rep<pos:position pos:line="36" pos:column="79"/></name><operator pos:line="36" pos:column="79">-&gt;<pos:position pos:line="36" pos:column="84"/></operator><name pos:line="36" pos:column="81">hdr_sz<pos:position pos:line="36" pos:column="87"/></name></name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="89">copyInto<pos:position pos:line="36" pos:column="97"/></name><operator pos:line="36" pos:column="97">.<pos:position pos:line="36" pos:column="98"/></operator><name pos:line="36" pos:column="98">data<pos:position pos:line="36" pos:column="102"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="103"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="36" pos:column="105">storeClientMemWriteComplete<pos:position pos:line="36" pos:column="132"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="134">this<pos:position pos:line="36" pos:column="138"/></name></expr></argument>)<pos:position pos:line="36" pos:column="139"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="140"/></expr_stmt>
            }<pos:position pos:line="37" pos:column="14"/></block></then></if>
        }<pos:position pos:line="38" pos:column="10"/></block></then></if>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="41" pos:column="5">callback<pos:position pos:line="41" pos:column="13"/></name><argument_list pos:line="41" pos:column="13">(<argument><expr><name pos:line="41" pos:column="14">len<pos:position pos:line="41" pos:column="17"/></name></expr></argument>)<pos:position pos:line="41" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="19"/></expr_stmt>
}<pos:position pos:line="42" pos:column="2"/></block></function></unit>
