<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_function_1533.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">ClientSocketContext<pos:position pos:line="1" pos:column="20"/></name> <modifier pos:line="1" pos:column="21">*<pos:position pos:line="1" pos:column="22"/></modifier></type>
<name><name pos:line="2" pos:column="1">Ftp<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">Server<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">parseOneRequest<pos:position pos:line="2" pos:column="29"/></name></name><parameter_list pos:line="2" pos:column="29">(<parameter><decl><type><name><name pos:line="2" pos:column="30">Http<pos:position pos:line="2" pos:column="34"/></name><operator pos:line="2" pos:column="34">::<pos:position pos:line="2" pos:column="36"/></operator><name pos:line="2" pos:column="36">ProtocolVersion<pos:position pos:line="2" pos:column="51"/></name></name> <modifier pos:line="2" pos:column="52">&amp;<pos:position pos:line="2" pos:column="57"/></modifier></type><name pos:line="2" pos:column="53">ver<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="57"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><name><name pos:line="4" pos:column="5">flags<pos:position pos:line="4" pos:column="10"/></name><operator pos:line="4" pos:column="10">.<pos:position pos:line="4" pos:column="11"/></operator><name pos:line="4" pos:column="11">readMore<pos:position pos:line="4" pos:column="19"/></name></name> <operator pos:line="4" pos:column="20">=<pos:position pos:line="4" pos:column="21"/></operator> <literal type="boolean" pos:line="4" pos:column="22">false<pos:position pos:line="4" pos:column="27"/></literal></expr>;<pos:position pos:line="4" pos:column="28"/></expr_stmt> <comment type="line" pos:line="4" pos:column="29">// common for all but one case below</comment>

    <comment type="line" pos:line="6" pos:column="5">// OWS &lt;command&gt; [ RWS &lt;parameter&gt; ] OWS LF</comment>

    <comment type="line" pos:line="8" pos:column="5">// InlineSpaceChars are isspace(3) or RFC 959 Section 3.1.1.5.2, except</comment>
    <comment type="line" pos:line="9" pos:column="5">// for the LF character that we must exclude here (but see FullWhiteSpace).</comment>
    <decl_stmt><decl><specifier pos:line="10" pos:column="5">static<pos:position pos:line="10" pos:column="11"/></specifier> <type><specifier pos:line="10" pos:column="12">const<pos:position pos:line="10" pos:column="17"/></specifier> <name pos:line="10" pos:column="18">char<pos:position pos:line="10" pos:column="22"/></name> <modifier pos:line="10" pos:column="23">*<pos:position pos:line="10" pos:column="24"/></modifier> <specifier pos:line="10" pos:column="25">const<pos:position pos:line="10" pos:column="30"/></specifier></type> <name pos:line="10" pos:column="31">InlineSpaceChars<pos:position pos:line="10" pos:column="47"/></name> <init pos:line="10" pos:column="48">= <expr><literal type="string" pos:line="10" pos:column="50">" \f\r\t\v"<pos:position pos:line="10" pos:column="61"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="62"/></decl_stmt>
    <decl_stmt><decl><specifier pos:line="11" pos:column="5">static<pos:position pos:line="11" pos:column="11"/></specifier> <type><specifier pos:line="11" pos:column="12">const<pos:position pos:line="11" pos:column="17"/></specifier> <name pos:line="11" pos:column="18">CharacterSet<pos:position pos:line="11" pos:column="30"/></name></type> <name pos:line="11" pos:column="31">InlineSpace<pos:position pos:line="11" pos:column="42"/></name> <init pos:line="11" pos:column="43">= <expr><call><name pos:line="11" pos:column="45">CharacterSet<pos:position pos:line="11" pos:column="57"/></name><argument_list pos:line="11" pos:column="57">(<argument><expr><literal type="string" pos:line="11" pos:column="58">"Ftp::Inline"<pos:position pos:line="11" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="73">InlineSpaceChars<pos:position pos:line="11" pos:column="89"/></name></expr></argument>)<pos:position pos:line="11" pos:column="90"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="91"/></decl_stmt>
    <decl_stmt><decl><specifier pos:line="12" pos:column="5">static<pos:position pos:line="12" pos:column="11"/></specifier> <type><specifier pos:line="12" pos:column="12">const<pos:position pos:line="12" pos:column="17"/></specifier> <name pos:line="12" pos:column="18">CharacterSet<pos:position pos:line="12" pos:column="30"/></name></type> <name pos:line="12" pos:column="31">FullWhiteSpace<pos:position pos:line="12" pos:column="45"/></name> <init pos:line="12" pos:column="46">= <expr><operator pos:line="12" pos:column="48">(<pos:position pos:line="12" pos:column="49"/></operator><name pos:line="12" pos:column="49">InlineSpace<pos:position pos:line="12" pos:column="60"/></name> <operator pos:line="12" pos:column="61">+<pos:position pos:line="12" pos:column="62"/></operator> <name><name pos:line="12" pos:column="63">CharacterSet<pos:position pos:line="12" pos:column="75"/></name><operator pos:line="12" pos:column="75">::<pos:position pos:line="12" pos:column="77"/></operator><name pos:line="12" pos:column="77">LF<pos:position pos:line="12" pos:column="79"/></name></name><operator pos:line="12" pos:column="79">)<pos:position pos:line="12" pos:column="80"/></operator><operator pos:line="12" pos:column="80">.<pos:position pos:line="12" pos:column="81"/></operator><call><name pos:line="12" pos:column="81">rename<pos:position pos:line="12" pos:column="87"/></name><argument_list pos:line="12" pos:column="87">(<argument><expr><literal type="string" pos:line="12" pos:column="88">"Ftp::FWS"<pos:position pos:line="12" pos:column="98"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="99"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="100"/></decl_stmt>
    <decl_stmt><decl><specifier pos:line="13" pos:column="5">static<pos:position pos:line="13" pos:column="11"/></specifier> <type><specifier pos:line="13" pos:column="12">const<pos:position pos:line="13" pos:column="17"/></specifier> <name pos:line="13" pos:column="18">CharacterSet<pos:position pos:line="13" pos:column="30"/></name></type> <name pos:line="13" pos:column="31">CommandChars<pos:position pos:line="13" pos:column="43"/></name> <init pos:line="13" pos:column="44">= <expr><call><name><name pos:line="13" pos:column="46">FullWhiteSpace<pos:position pos:line="13" pos:column="60"/></name><operator pos:line="13" pos:column="60">.<pos:position pos:line="13" pos:column="61"/></operator><name pos:line="13" pos:column="61">complement<pos:position pos:line="13" pos:column="71"/></name></name><argument_list pos:line="13" pos:column="71">(<argument><expr><literal type="string" pos:line="13" pos:column="72">"Ftp::Command"<pos:position pos:line="13" pos:column="86"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="87"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="88"/></decl_stmt>
    <decl_stmt><decl><specifier pos:line="14" pos:column="5">static<pos:position pos:line="14" pos:column="11"/></specifier> <type><specifier pos:line="14" pos:column="12">const<pos:position pos:line="14" pos:column="17"/></specifier> <name pos:line="14" pos:column="18">CharacterSet<pos:position pos:line="14" pos:column="30"/></name></type> <name pos:line="14" pos:column="31">TailChars<pos:position pos:line="14" pos:column="40"/></name> <init pos:line="14" pos:column="41">= <expr><call><name><name pos:line="14" pos:column="43">CharacterSet<pos:position pos:line="14" pos:column="55"/></name><operator pos:line="14" pos:column="55">::<pos:position pos:line="14" pos:column="57"/></operator><name pos:line="14" pos:column="57">LF<pos:position pos:line="14" pos:column="59"/></name><operator pos:line="14" pos:column="59">.<pos:position pos:line="14" pos:column="60"/></operator><name pos:line="14" pos:column="60">complement<pos:position pos:line="14" pos:column="70"/></name></name><argument_list pos:line="14" pos:column="70">(<argument><expr><literal type="string" pos:line="14" pos:column="71">"Ftp::Tail"<pos:position pos:line="14" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="83"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="84"/></decl_stmt>

    <comment type="line" pos:line="16" pos:column="5">// This set is used to ignore empty commands without allowing an attacker</comment>
    <comment type="line" pos:line="17" pos:column="5">// to keep us endlessly busy by feeding us whitespace or empty commands.</comment>
    <decl_stmt><decl><specifier pos:line="18" pos:column="5">static<pos:position pos:line="18" pos:column="11"/></specifier> <type><specifier pos:line="18" pos:column="12">const<pos:position pos:line="18" pos:column="17"/></specifier> <name pos:line="18" pos:column="18">CharacterSet<pos:position pos:line="18" pos:column="30"/></name> <modifier pos:line="18" pos:column="31">&amp;<pos:position pos:line="18" pos:column="36"/></modifier></type><name pos:line="18" pos:column="32">LeadingSpace<pos:position pos:line="18" pos:column="44"/></name> <init pos:line="18" pos:column="45">= <expr><name pos:line="18" pos:column="47">FullWhiteSpace<pos:position pos:line="18" pos:column="61"/></name></expr></init></decl>;<pos:position pos:line="18" pos:column="62"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="20" pos:column="5">SBuf<pos:position pos:line="20" pos:column="9"/></name></type> <name pos:line="20" pos:column="10">cmd<pos:position pos:line="20" pos:column="13"/></name></decl>;<pos:position pos:line="20" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="21" pos:column="5">SBuf<pos:position pos:line="21" pos:column="9"/></name></type> <name pos:line="21" pos:column="10">params<pos:position pos:line="21" pos:column="16"/></name></decl>;<pos:position pos:line="21" pos:column="17"/></decl_stmt>

    <decl_stmt><decl><type><name><name pos:line="23" pos:column="5">Parser<pos:position pos:line="23" pos:column="11"/></name><operator pos:line="23" pos:column="11">::<pos:position pos:line="23" pos:column="13"/></operator><name pos:line="23" pos:column="13">Tokenizer<pos:position pos:line="23" pos:column="22"/></name></name></type> <name pos:line="23" pos:column="23">tok<pos:position pos:line="23" pos:column="26"/></name><argument_list pos:line="23" pos:column="26">(<argument><expr><name><name pos:line="23" pos:column="27">in<pos:position pos:line="23" pos:column="29"/></name><operator pos:line="23" pos:column="29">.<pos:position pos:line="23" pos:column="30"/></operator><name pos:line="23" pos:column="30">buf<pos:position pos:line="23" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="34"/></argument_list></decl>;<pos:position pos:line="23" pos:column="35"/></decl_stmt>

    <expr_stmt><expr><operator pos:line="25" pos:column="5">(<pos:position pos:line="25" pos:column="6"/></operator><name pos:line="25" pos:column="6">void<pos:position pos:line="25" pos:column="10"/></name><operator pos:line="25" pos:column="10">)<pos:position pos:line="25" pos:column="11"/></operator><call><name><name pos:line="25" pos:column="11">tok<pos:position pos:line="25" pos:column="14"/></name><operator pos:line="25" pos:column="14">.<pos:position pos:line="25" pos:column="15"/></operator><name pos:line="25" pos:column="15">skipAll<pos:position pos:line="25" pos:column="22"/></name></name><argument_list pos:line="25" pos:column="22">(<argument><expr><name pos:line="25" pos:column="23">LeadingSpace<pos:position pos:line="25" pos:column="35"/></name></expr></argument>)<pos:position pos:line="25" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="37"/></expr_stmt> <comment type="line" pos:line="25" pos:column="38">// leading OWS and empty commands</comment>
    <decl_stmt><decl><type><specifier pos:line="26" pos:column="5">const<pos:position pos:line="26" pos:column="10"/></specifier> <name pos:line="26" pos:column="11">bool<pos:position pos:line="26" pos:column="15"/></name></type> <name pos:line="26" pos:column="16">parsed<pos:position pos:line="26" pos:column="22"/></name> <init pos:line="26" pos:column="23">= <expr><call><name><name pos:line="26" pos:column="25">tok<pos:position pos:line="26" pos:column="28"/></name><operator pos:line="26" pos:column="28">.<pos:position pos:line="26" pos:column="29"/></operator><name pos:line="26" pos:column="29">prefix<pos:position pos:line="26" pos:column="35"/></name></name><argument_list pos:line="26" pos:column="35">(<argument><expr><name pos:line="26" pos:column="36">cmd<pos:position pos:line="26" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="41">CommandChars<pos:position pos:line="26" pos:column="53"/></name></expr></argument>)<pos:position pos:line="26" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="26" pos:column="55"/></decl_stmt> <comment type="line" pos:line="26" pos:column="56">// required command</comment>

    <comment type="line" pos:line="28" pos:column="5">// note that the condition below will eat either RWS or trailing OWS</comment>
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><name pos:line="29" pos:column="9">parsed<pos:position pos:line="29" pos:column="15"/></name> <operator pos:line="29" pos:column="16">&amp;&amp;<pos:position pos:line="29" pos:column="26"/></operator> <call><name><name pos:line="29" pos:column="19">tok<pos:position pos:line="29" pos:column="22"/></name><operator pos:line="29" pos:column="22">.<pos:position pos:line="29" pos:column="23"/></operator><name pos:line="29" pos:column="23">skipAll<pos:position pos:line="29" pos:column="30"/></name></name><argument_list pos:line="29" pos:column="30">(<argument><expr><name pos:line="29" pos:column="31">InlineSpace<pos:position pos:line="29" pos:column="42"/></name></expr></argument>)<pos:position pos:line="29" pos:column="43"/></argument_list></call> <operator pos:line="29" pos:column="44">&amp;&amp;<pos:position pos:line="29" pos:column="54"/></operator> <call><name><name pos:line="29" pos:column="47">tok<pos:position pos:line="29" pos:column="50"/></name><operator pos:line="29" pos:column="50">.<pos:position pos:line="29" pos:column="51"/></operator><name pos:line="29" pos:column="51">prefix<pos:position pos:line="29" pos:column="57"/></name></name><argument_list pos:line="29" pos:column="57">(<argument><expr><name pos:line="29" pos:column="58">params<pos:position pos:line="29" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="66">TailChars<pos:position pos:line="29" pos:column="75"/></name></expr></argument>)<pos:position pos:line="29" pos:column="76"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="77"/></condition><then pos:line="29" pos:column="77"> <block pos:line="29" pos:column="78">{
        <comment type="line" pos:line="30" pos:column="9">// now params may include trailing OWS</comment>
        <comment type="line" pos:line="31" pos:column="9">// TODO: Support right-trimming using CharacterSet in Tokenizer instead</comment>
        <decl_stmt><decl><specifier pos:line="32" pos:column="9">static<pos:position pos:line="32" pos:column="15"/></specifier> <type><specifier pos:line="32" pos:column="16">const<pos:position pos:line="32" pos:column="21"/></specifier> <name pos:line="32" pos:column="22">SBuf<pos:position pos:line="32" pos:column="26"/></name></type> <name pos:line="32" pos:column="27">bufWhiteSpace<pos:position pos:line="32" pos:column="40"/></name><argument_list pos:line="32" pos:column="40">(<argument><expr><name pos:line="32" pos:column="41">InlineSpaceChars<pos:position pos:line="32" pos:column="57"/></name></expr></argument>)<pos:position pos:line="32" pos:column="58"/></argument_list></decl>;<pos:position pos:line="32" pos:column="59"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="33" pos:column="9">params<pos:position pos:line="33" pos:column="15"/></name><operator pos:line="33" pos:column="15">.<pos:position pos:line="33" pos:column="16"/></operator><name pos:line="33" pos:column="16">trim<pos:position pos:line="33" pos:column="20"/></name></name><argument_list pos:line="33" pos:column="20">(<argument><expr><name pos:line="33" pos:column="21">bufWhiteSpace<pos:position pos:line="33" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="33" pos:column="36">false<pos:position pos:line="33" pos:column="41"/></literal></expr></argument>, <argument><expr><literal type="boolean" pos:line="33" pos:column="43">true<pos:position pos:line="33" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="49"/></expr_stmt>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="36" pos:column="5">// Why limit command line and parameters size? Did not we just parse them?</comment>
    <comment type="line" pos:line="37" pos:column="5">// XXX: Our good old String cannot handle very long strings.</comment>
    <decl_stmt><decl><type><specifier pos:line="38" pos:column="5">const<pos:position pos:line="38" pos:column="10"/></specifier> <name><name pos:line="38" pos:column="11">SBuf<pos:position pos:line="38" pos:column="15"/></name><operator pos:line="38" pos:column="15">::<pos:position pos:line="38" pos:column="17"/></operator><name pos:line="38" pos:column="17">size_type<pos:position pos:line="38" pos:column="26"/></name></name></type> <name pos:line="38" pos:column="27">tokenMax<pos:position pos:line="38" pos:column="35"/></name> <init pos:line="38" pos:column="36">= <expr><call><name pos:line="38" pos:column="38">min<pos:position pos:line="38" pos:column="41"/></name><argument_list pos:line="38" pos:column="41">(
                                         <argument><expr><cast type="static" pos:line="39" pos:column="42">static_cast<argument_list type="generic" pos:line="39" pos:column="53">&lt;<argument><expr><name><name pos:line="39" pos:column="54">SBuf<pos:position pos:line="39" pos:column="58"/></name><operator pos:line="39" pos:column="58">::<pos:position pos:line="39" pos:column="60"/></operator><name pos:line="39" pos:column="60">size_type<pos:position pos:line="39" pos:column="69"/></name></name></expr></argument>&gt;<pos:position pos:line="39" pos:column="73"/></argument_list><argument_list pos:line="39" pos:column="70">(<argument><expr><literal type="number" pos:line="39" pos:column="71">32<pos:position pos:line="39" pos:column="73"/></literal><operator pos:line="39" pos:column="73">*<pos:position pos:line="39" pos:column="74"/></operator><literal type="number" pos:line="39" pos:column="74">1024<pos:position pos:line="39" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="79"/></argument_list></cast></expr></argument>, <comment type="line" pos:line="39" pos:column="81">// conservative</comment>
                                         <argument><expr><cast type="static" pos:line="40" pos:column="42">static_cast<argument_list type="generic" pos:line="40" pos:column="53">&lt;<argument><expr><name><name pos:line="40" pos:column="54">SBuf<pos:position pos:line="40" pos:column="58"/></name><operator pos:line="40" pos:column="58">::<pos:position pos:line="40" pos:column="60"/></operator><name pos:line="40" pos:column="60">size_type<pos:position pos:line="40" pos:column="69"/></name></name></expr></argument>&gt;<pos:position pos:line="40" pos:column="73"/></argument_list><argument_list pos:line="40" pos:column="70">(<argument><expr><name><name pos:line="40" pos:column="71">Config<pos:position pos:line="40" pos:column="77"/></name><operator pos:line="40" pos:column="77">.<pos:position pos:line="40" pos:column="78"/></operator><name pos:line="40" pos:column="78">maxRequestHeaderSize<pos:position pos:line="40" pos:column="98"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="99"/></argument_list></cast></expr></argument>)<pos:position pos:line="40" pos:column="100"/></argument_list></call></expr></init></decl>;<pos:position pos:line="40" pos:column="101"/></decl_stmt>
    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><call><name><name pos:line="41" pos:column="9">cmd<pos:position pos:line="41" pos:column="12"/></name><operator pos:line="41" pos:column="12">.<pos:position pos:line="41" pos:column="13"/></operator><name pos:line="41" pos:column="13">length<pos:position pos:line="41" pos:column="19"/></name></name><argument_list pos:line="41" pos:column="19">()<pos:position pos:line="41" pos:column="21"/></argument_list></call> <operator pos:line="41" pos:column="22">&gt;<pos:position pos:line="41" pos:column="26"/></operator> <name pos:line="41" pos:column="24">tokenMax<pos:position pos:line="41" pos:column="32"/></name> <operator pos:line="41" pos:column="33">||<pos:position pos:line="41" pos:column="35"/></operator> <call><name><name pos:line="41" pos:column="36">params<pos:position pos:line="41" pos:column="42"/></name><operator pos:line="41" pos:column="42">.<pos:position pos:line="41" pos:column="43"/></operator><name pos:line="41" pos:column="43">length<pos:position pos:line="41" pos:column="49"/></name></name><argument_list pos:line="41" pos:column="49">()<pos:position pos:line="41" pos:column="51"/></argument_list></call> <operator pos:line="41" pos:column="52">&gt;<pos:position pos:line="41" pos:column="56"/></operator> <name pos:line="41" pos:column="54">tokenMax<pos:position pos:line="41" pos:column="62"/></name></expr>)<pos:position pos:line="41" pos:column="63"/></condition><then pos:line="41" pos:column="63"> <block pos:line="41" pos:column="64">{
        <expr_stmt><expr><call><name pos:line="42" pos:column="9">changeState<pos:position pos:line="42" pos:column="20"/></name><argument_list pos:line="42" pos:column="20">(<argument><expr><name pos:line="42" pos:column="21">fssError<pos:position pos:line="42" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="31">"huge req token"<pos:position pos:line="42" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="43" pos:column="9">quitAfterError<pos:position pos:line="43" pos:column="23"/></name><argument_list pos:line="43" pos:column="23">(<argument><expr><name pos:line="43" pos:column="24">NULL<pos:position pos:line="43" pos:column="28"/></name></expr></argument>)<pos:position pos:line="43" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="30"/></expr_stmt>
        <return pos:line="44" pos:column="9">return <expr><call><name pos:line="44" pos:column="16">earlyError<pos:position pos:line="44" pos:column="26"/></name><argument_list pos:line="44" pos:column="26">(<argument><expr><name pos:line="44" pos:column="27">eekHugeRequest<pos:position pos:line="44" pos:column="41"/></name></expr></argument>)<pos:position pos:line="44" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="43"/></return>
    }<pos:position pos:line="45" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="47" pos:column="5">// technically, we may skip multiple NLs below, but that is OK</comment>
    <if pos:line="48" pos:column="5">if <condition pos:line="48" pos:column="8">(<expr><operator pos:line="48" pos:column="9">!<pos:position pos:line="48" pos:column="10"/></operator><name pos:line="48" pos:column="10">parsed<pos:position pos:line="48" pos:column="16"/></name> <operator pos:line="48" pos:column="17">||<pos:position pos:line="48" pos:column="19"/></operator> <operator pos:line="48" pos:column="20">!<pos:position pos:line="48" pos:column="21"/></operator><call><name><name pos:line="48" pos:column="21">tok<pos:position pos:line="48" pos:column="24"/></name><operator pos:line="48" pos:column="24">.<pos:position pos:line="48" pos:column="25"/></operator><name pos:line="48" pos:column="25">skipAll<pos:position pos:line="48" pos:column="32"/></name></name><argument_list pos:line="48" pos:column="32">(<argument><expr><name><name pos:line="48" pos:column="33">CharacterSet<pos:position pos:line="48" pos:column="45"/></name><operator pos:line="48" pos:column="45">::<pos:position pos:line="48" pos:column="47"/></operator><name pos:line="48" pos:column="47">LF<pos:position pos:line="48" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="51"/></condition><then pos:line="48" pos:column="51"> <block pos:line="48" pos:column="52">{ <comment type="line" pos:line="48" pos:column="54">// did not find terminating LF yet</comment>
        <comment type="line" pos:line="49" pos:column="9">// we need more data, but can we buffer more?</comment>
        <if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><call><name><name pos:line="50" pos:column="13">in<pos:position pos:line="50" pos:column="15"/></name><operator pos:line="50" pos:column="15">.<pos:position pos:line="50" pos:column="16"/></operator><name pos:line="50" pos:column="16">buf<pos:position pos:line="50" pos:column="19"/></name><operator pos:line="50" pos:column="19">.<pos:position pos:line="50" pos:column="20"/></operator><name pos:line="50" pos:column="20">length<pos:position pos:line="50" pos:column="26"/></name></name><argument_list pos:line="50" pos:column="26">()<pos:position pos:line="50" pos:column="28"/></argument_list></call> <operator pos:line="50" pos:column="29">&gt;=<pos:position pos:line="50" pos:column="34"/></operator> <name><name pos:line="50" pos:column="32">Config<pos:position pos:line="50" pos:column="38"/></name><operator pos:line="50" pos:column="38">.<pos:position pos:line="50" pos:column="39"/></operator><name pos:line="50" pos:column="39">maxRequestHeaderSize<pos:position pos:line="50" pos:column="59"/></name></name></expr>)<pos:position pos:line="50" pos:column="60"/></condition><then pos:line="50" pos:column="60"> <block pos:line="50" pos:column="61">{
            <expr_stmt><expr><call><name pos:line="51" pos:column="13">changeState<pos:position pos:line="51" pos:column="24"/></name><argument_list pos:line="51" pos:column="24">(<argument><expr><name pos:line="51" pos:column="25">fssError<pos:position pos:line="51" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="35">"huge req"<pos:position pos:line="51" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="47"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="52" pos:column="13">quitAfterError<pos:position pos:line="52" pos:column="27"/></name><argument_list pos:line="52" pos:column="27">(<argument><expr><name pos:line="52" pos:column="28">NULL<pos:position pos:line="52" pos:column="32"/></name></expr></argument>)<pos:position pos:line="52" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="34"/></expr_stmt>
            <return pos:line="53" pos:column="13">return <expr><call><name pos:line="53" pos:column="20">earlyError<pos:position pos:line="53" pos:column="30"/></name><argument_list pos:line="53" pos:column="30">(<argument><expr><name pos:line="53" pos:column="31">eekHugeRequest<pos:position pos:line="53" pos:column="45"/></name></expr></argument>)<pos:position pos:line="53" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="47"/></return>
        }<pos:position pos:line="54" pos:column="10"/></block></then> <else pos:line="54" pos:column="11">else <block pos:line="54" pos:column="16">{
            <expr_stmt><expr><name><name pos:line="55" pos:column="13">flags<pos:position pos:line="55" pos:column="18"/></name><operator pos:line="55" pos:column="18">.<pos:position pos:line="55" pos:column="19"/></operator><name pos:line="55" pos:column="19">readMore<pos:position pos:line="55" pos:column="27"/></name></name> <operator pos:line="55" pos:column="28">=<pos:position pos:line="55" pos:column="29"/></operator> <literal type="boolean" pos:line="55" pos:column="30">true<pos:position pos:line="55" pos:column="34"/></literal></expr>;<pos:position pos:line="55" pos:column="35"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="56" pos:column="13">debugs<pos:position pos:line="56" pos:column="19"/></name><argument_list pos:line="56" pos:column="19">(<argument><expr><literal type="number" pos:line="56" pos:column="20">33<pos:position pos:line="56" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="56" pos:column="24">5<pos:position pos:line="56" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="27">"Waiting for more, up to "<pos:position pos:line="56" pos:column="53"/></literal> <operator pos:line="56" pos:column="54">&lt;&lt;<pos:position pos:line="56" pos:column="62"/></operator>
                   <operator pos:line="57" pos:column="20">(<pos:position pos:line="57" pos:column="21"/></operator><name><name pos:line="57" pos:column="21">Config<pos:position pos:line="57" pos:column="27"/></name><operator pos:line="57" pos:column="27">.<pos:position pos:line="57" pos:column="28"/></operator><name pos:line="57" pos:column="28">maxRequestHeaderSize<pos:position pos:line="57" pos:column="48"/></name></name> <operator pos:line="57" pos:column="49">-<pos:position pos:line="57" pos:column="50"/></operator> <call><name><name pos:line="57" pos:column="51">in<pos:position pos:line="57" pos:column="53"/></name><operator pos:line="57" pos:column="53">.<pos:position pos:line="57" pos:column="54"/></operator><name pos:line="57" pos:column="54">buf<pos:position pos:line="57" pos:column="57"/></name><operator pos:line="57" pos:column="57">.<pos:position pos:line="57" pos:column="58"/></operator><name pos:line="57" pos:column="58">length<pos:position pos:line="57" pos:column="64"/></name></name><argument_list pos:line="57" pos:column="64">()<pos:position pos:line="57" pos:column="66"/></argument_list></call><operator pos:line="57" pos:column="66">)<pos:position pos:line="57" pos:column="67"/></operator></expr></argument>)<pos:position pos:line="57" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="69"/></expr_stmt>
            <return pos:line="58" pos:column="13">return <expr><name pos:line="58" pos:column="20">NULL<pos:position pos:line="58" pos:column="24"/></name></expr>;<pos:position pos:line="58" pos:column="25"/></return>
        }<pos:position pos:line="59" pos:column="10"/></block></else></if>
    }<pos:position pos:line="60" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="62" pos:column="5">Must<pos:position pos:line="62" pos:column="9"/></name><argument_list pos:line="62" pos:column="9">(<argument><expr><name pos:line="62" pos:column="10">parsed<pos:position pos:line="62" pos:column="16"/></name> <operator pos:line="62" pos:column="17">&amp;&amp;<pos:position pos:line="62" pos:column="27"/></operator> <call><name><name pos:line="62" pos:column="20">cmd<pos:position pos:line="62" pos:column="23"/></name><operator pos:line="62" pos:column="23">.<pos:position pos:line="62" pos:column="24"/></operator><name pos:line="62" pos:column="24">length<pos:position pos:line="62" pos:column="30"/></name></name><argument_list pos:line="62" pos:column="30">()<pos:position pos:line="62" pos:column="32"/></argument_list></call></expr></argument>)<pos:position pos:line="62" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="63" pos:column="5">consumeInput<pos:position pos:line="63" pos:column="17"/></name><argument_list pos:line="63" pos:column="17">(<argument><expr><call><name><name pos:line="63" pos:column="18">tok<pos:position pos:line="63" pos:column="21"/></name><operator pos:line="63" pos:column="21">.<pos:position pos:line="63" pos:column="22"/></operator><name pos:line="63" pos:column="22">parsedSize<pos:position pos:line="63" pos:column="32"/></name></name><argument_list pos:line="63" pos:column="32">()<pos:position pos:line="63" pos:column="34"/></argument_list></call></expr></argument>)<pos:position pos:line="63" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="36"/></expr_stmt> <comment type="line" pos:line="63" pos:column="37">// TODO: Would delaying optimize copying?</comment>

    <expr_stmt><expr><call><name pos:line="65" pos:column="5">debugs<pos:position pos:line="65" pos:column="11"/></name><argument_list pos:line="65" pos:column="11">(<argument><expr><literal type="number" pos:line="65" pos:column="12">33<pos:position pos:line="65" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="65" pos:column="16">2<pos:position pos:line="65" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="19">"&gt;&gt;ftp "<pos:position pos:line="65" pos:column="33"/></literal> <operator pos:line="65" pos:column="28">&lt;&lt;<pos:position pos:line="65" pos:column="36"/></operator> <name pos:line="65" pos:column="31">cmd<pos:position pos:line="65" pos:column="34"/></name> <operator pos:line="65" pos:column="35">&lt;&lt;<pos:position pos:line="65" pos:column="43"/></operator> <operator pos:line="65" pos:column="38">(<pos:position pos:line="65" pos:column="39"/></operator><ternary><condition><expr><call><name><name pos:line="65" pos:column="39">params<pos:position pos:line="65" pos:column="45"/></name><operator pos:line="65" pos:column="45">.<pos:position pos:line="65" pos:column="46"/></operator><name pos:line="65" pos:column="46">isEmpty<pos:position pos:line="65" pos:column="53"/></name></name><argument_list pos:line="65" pos:column="53">()<pos:position pos:line="65" pos:column="55"/></argument_list></call></expr> ?<pos:position pos:line="65" pos:column="57"/></condition><then pos:line="65" pos:column="57"> <expr><literal type="string" pos:line="65" pos:column="58">""<pos:position pos:line="65" pos:column="60"/></literal></expr> <pos:position pos:line="65" pos:column="61"/></then><else pos:line="65" pos:column="61">: <expr><literal type="string" pos:line="65" pos:column="63">" "<pos:position pos:line="65" pos:column="66"/></literal></expr></else></ternary><operator pos:line="65" pos:column="66">)<pos:position pos:line="65" pos:column="67"/></operator> <operator pos:line="65" pos:column="68">&lt;&lt;<pos:position pos:line="65" pos:column="76"/></operator> <name pos:line="65" pos:column="71">params<pos:position pos:line="65" pos:column="77"/></name></expr></argument>)<pos:position pos:line="65" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="79"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="67" pos:column="5">cmd<pos:position pos:line="67" pos:column="8"/></name><operator pos:line="67" pos:column="8">.<pos:position pos:line="67" pos:column="9"/></operator><name pos:line="67" pos:column="9">toUpper<pos:position pos:line="67" pos:column="16"/></name></name><argument_list pos:line="67" pos:column="16">()<pos:position pos:line="67" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="19"/></expr_stmt> <comment type="line" pos:line="67" pos:column="20">// this should speed up and simplify future comparisons</comment>

    <comment type="line" pos:line="69" pos:column="5">// interception cases do not need USER to calculate the uri</comment>
    <if pos:line="70" pos:column="5">if <condition pos:line="70" pos:column="8">(<expr><operator pos:line="70" pos:column="9">!<pos:position pos:line="70" pos:column="10"/></operator><call><name pos:line="70" pos:column="10">transparent<pos:position pos:line="70" pos:column="21"/></name><argument_list pos:line="70" pos:column="21">()<pos:position pos:line="70" pos:column="23"/></argument_list></call></expr>)<pos:position pos:line="70" pos:column="24"/></condition><then pos:line="70" pos:column="24"> <block pos:line="70" pos:column="25">{
        <if pos:line="71" pos:column="9">if <condition pos:line="71" pos:column="12">(<expr><operator pos:line="71" pos:column="13">!<pos:position pos:line="71" pos:column="14"/></operator><name><name pos:line="71" pos:column="14">master<pos:position pos:line="71" pos:column="20"/></name><operator pos:line="71" pos:column="20">-&gt;<pos:position pos:line="71" pos:column="25"/></operator><name pos:line="71" pos:column="22">clientReadGreeting<pos:position pos:line="71" pos:column="40"/></name></name></expr>)<pos:position pos:line="71" pos:column="41"/></condition><then pos:line="71" pos:column="41"> <block pos:line="71" pos:column="42">{
            <comment type="line" pos:line="72" pos:column="13">// the first command must be USER</comment>
            <if pos:line="73" pos:column="13">if <condition pos:line="73" pos:column="16">(<expr><operator pos:line="73" pos:column="17">!<pos:position pos:line="73" pos:column="18"/></operator><name><name pos:line="73" pos:column="18">pinning<pos:position pos:line="73" pos:column="25"/></name><operator pos:line="73" pos:column="25">.<pos:position pos:line="73" pos:column="26"/></operator><name pos:line="73" pos:column="26">pinned<pos:position pos:line="73" pos:column="32"/></name></name> <operator pos:line="73" pos:column="33">&amp;&amp;<pos:position pos:line="73" pos:column="43"/></operator> <name pos:line="73" pos:column="36">cmd<pos:position pos:line="73" pos:column="39"/></name> <operator pos:line="73" pos:column="40">!=<pos:position pos:line="73" pos:column="42"/></operator> <call><name pos:line="73" pos:column="43">cmdUser<pos:position pos:line="73" pos:column="50"/></name><argument_list pos:line="73" pos:column="50">()<pos:position pos:line="73" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="73" pos:column="53"/></condition><then pos:line="73" pos:column="53">
                <block type="pseudo"><return pos:line="74" pos:column="17">return <expr><call><name pos:line="74" pos:column="24">earlyError<pos:position pos:line="74" pos:column="34"/></name><argument_list pos:line="74" pos:column="34">(<argument><expr><name pos:line="74" pos:column="35">eekMissingLogin<pos:position pos:line="74" pos:column="50"/></name></expr></argument>)<pos:position pos:line="74" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="52"/></return></block></then></if>
        }<pos:position pos:line="75" pos:column="10"/></block></then></if>

        <comment type="line" pos:line="77" pos:column="9">// process USER request now because it sets FTP peer host name</comment>
        <if pos:line="78" pos:column="9">if <condition pos:line="78" pos:column="12">(<expr><name pos:line="78" pos:column="13">cmd<pos:position pos:line="78" pos:column="16"/></name> <operator pos:line="78" pos:column="17">==<pos:position pos:line="78" pos:column="19"/></operator> <call><name pos:line="78" pos:column="20">cmdUser<pos:position pos:line="78" pos:column="27"/></name><argument_list pos:line="78" pos:column="27">()<pos:position pos:line="78" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="78" pos:column="30"/></condition><then pos:line="78" pos:column="30"> <block pos:line="78" pos:column="31">{
            <if pos:line="79" pos:column="13">if <condition pos:line="79" pos:column="16">(<decl><type><name pos:line="79" pos:column="17">ClientSocketContext<pos:position pos:line="79" pos:column="36"/></name> <modifier pos:line="79" pos:column="37">*<pos:position pos:line="79" pos:column="38"/></modifier></type><name pos:line="79" pos:column="38">errCtx<pos:position pos:line="79" pos:column="44"/></name> <init pos:line="79" pos:column="45">= <expr><call><name pos:line="79" pos:column="47">handleUserRequest<pos:position pos:line="79" pos:column="64"/></name><argument_list pos:line="79" pos:column="64">(<argument><expr><name pos:line="79" pos:column="65">cmd<pos:position pos:line="79" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="70">params<pos:position pos:line="79" pos:column="76"/></name></expr></argument>)<pos:position pos:line="79" pos:column="77"/></argument_list></call></expr></init></decl>)<pos:position pos:line="79" pos:column="78"/></condition><then pos:line="79" pos:column="78">
                <block type="pseudo"><return pos:line="80" pos:column="17">return <expr><name pos:line="80" pos:column="24">errCtx<pos:position pos:line="80" pos:column="30"/></name></expr>;<pos:position pos:line="80" pos:column="31"/></return></block></then></if>
        }<pos:position pos:line="81" pos:column="10"/></block></then></if>
    }<pos:position pos:line="82" pos:column="6"/></block></then></if>

    <if pos:line="84" pos:column="5">if <condition pos:line="84" pos:column="8">(<expr><operator pos:line="84" pos:column="9">!<pos:position pos:line="84" pos:column="10"/></operator><call><name><name pos:line="84" pos:column="10">Ftp<pos:position pos:line="84" pos:column="13"/></name><operator pos:line="84" pos:column="13">::<pos:position pos:line="84" pos:column="15"/></operator><name pos:line="84" pos:column="15">SupportedCommand<pos:position pos:line="84" pos:column="31"/></name></name><argument_list pos:line="84" pos:column="31">(<argument><expr><name pos:line="84" pos:column="32">cmd<pos:position pos:line="84" pos:column="35"/></name></expr></argument>)<pos:position pos:line="84" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="84" pos:column="37"/></condition><then pos:line="84" pos:column="37">
        <block type="pseudo"><return pos:line="85" pos:column="9">return <expr><call><name pos:line="85" pos:column="16">earlyError<pos:position pos:line="85" pos:column="26"/></name><argument_list pos:line="85" pos:column="26">(<argument><expr><name pos:line="85" pos:column="27">eekUnsupportedCommand<pos:position pos:line="85" pos:column="48"/></name></expr></argument>)<pos:position pos:line="85" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="50"/></return></block></then></if>

    <decl_stmt><decl><type><specifier pos:line="87" pos:column="5">const<pos:position pos:line="87" pos:column="10"/></specifier> <name pos:line="87" pos:column="11">HttpRequestMethod<pos:position pos:line="87" pos:column="28"/></name></type> <name pos:line="87" pos:column="29">method<pos:position pos:line="87" pos:column="35"/></name> <init pos:line="87" pos:column="36">=
        <expr><ternary><condition><expr><name pos:line="88" pos:column="9">cmd<pos:position pos:line="88" pos:column="12"/></name> <operator pos:line="88" pos:column="13">==<pos:position pos:line="88" pos:column="15"/></operator> <call><name pos:line="88" pos:column="16">cmdAppe<pos:position pos:line="88" pos:column="23"/></name><argument_list pos:line="88" pos:column="23">()<pos:position pos:line="88" pos:column="25"/></argument_list></call> <operator pos:line="88" pos:column="26">||<pos:position pos:line="88" pos:column="28"/></operator> <name pos:line="88" pos:column="29">cmd<pos:position pos:line="88" pos:column="32"/></name> <operator pos:line="88" pos:column="33">==<pos:position pos:line="88" pos:column="35"/></operator> <call><name pos:line="88" pos:column="36">cmdStor<pos:position pos:line="88" pos:column="43"/></name><argument_list pos:line="88" pos:column="43">()<pos:position pos:line="88" pos:column="45"/></argument_list></call> <operator pos:line="88" pos:column="46">||<pos:position pos:line="88" pos:column="48"/></operator> <name pos:line="88" pos:column="49">cmd<pos:position pos:line="88" pos:column="52"/></name> <operator pos:line="88" pos:column="53">==<pos:position pos:line="88" pos:column="55"/></operator> <call><name pos:line="88" pos:column="56">cmdStou<pos:position pos:line="88" pos:column="63"/></name><argument_list pos:line="88" pos:column="63">()<pos:position pos:line="88" pos:column="65"/></argument_list></call></expr> ?<pos:position pos:line="88" pos:column="67"/></condition><then pos:line="88" pos:column="67">
        <expr><name><name pos:line="89" pos:column="9">Http<pos:position pos:line="89" pos:column="13"/></name><operator pos:line="89" pos:column="13">::<pos:position pos:line="89" pos:column="15"/></operator><name pos:line="89" pos:column="15">METHOD_PUT<pos:position pos:line="89" pos:column="25"/></name></name></expr> <pos:position pos:line="89" pos:column="26"/></then><else pos:line="89" pos:column="26">: <expr><name><name pos:line="89" pos:column="28">Http<pos:position pos:line="89" pos:column="32"/></name><operator pos:line="89" pos:column="32">::<pos:position pos:line="89" pos:column="34"/></operator><name pos:line="89" pos:column="34">METHOD_GET<pos:position pos:line="89" pos:column="44"/></name></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="89" pos:column="45"/></decl_stmt>

    <decl_stmt><decl><type><specifier pos:line="91" pos:column="5">const<pos:position pos:line="91" pos:column="10"/></specifier> <name pos:line="91" pos:column="11">SBuf<pos:position pos:line="91" pos:column="15"/></name> <modifier pos:line="91" pos:column="16">*<pos:position pos:line="91" pos:column="17"/></modifier></type><name pos:line="91" pos:column="17">path<pos:position pos:line="91" pos:column="21"/></name> <init pos:line="91" pos:column="22">= <expr><ternary><condition><expr><operator pos:line="91" pos:column="24">(<pos:position pos:line="91" pos:column="25"/></operator><call><name><name pos:line="91" pos:column="25">params<pos:position pos:line="91" pos:column="31"/></name><operator pos:line="91" pos:column="31">.<pos:position pos:line="91" pos:column="32"/></operator><name pos:line="91" pos:column="32">length<pos:position pos:line="91" pos:column="38"/></name></name><argument_list pos:line="91" pos:column="38">()<pos:position pos:line="91" pos:column="40"/></argument_list></call> <operator pos:line="91" pos:column="41">&amp;&amp;<pos:position pos:line="91" pos:column="51"/></operator> <call><name pos:line="91" pos:column="44">CommandHasPathParameter<pos:position pos:line="91" pos:column="67"/></name><argument_list pos:line="91" pos:column="67">(<argument><expr><name pos:line="91" pos:column="68">cmd<pos:position pos:line="91" pos:column="71"/></name></expr></argument>)<pos:position pos:line="91" pos:column="72"/></argument_list></call><operator pos:line="91" pos:column="72">)<pos:position pos:line="91" pos:column="73"/></operator></expr> ?<pos:position pos:line="91" pos:column="75"/></condition><then pos:line="91" pos:column="75">
                       <expr><operator pos:line="92" pos:column="24">&amp;<pos:position pos:line="92" pos:column="29"/></operator><name pos:line="92" pos:column="25">params<pos:position pos:line="92" pos:column="31"/></name></expr> <pos:position pos:line="92" pos:column="32"/></then><else pos:line="92" pos:column="32">: <expr><name pos:line="92" pos:column="34">NULL<pos:position pos:line="92" pos:column="38"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="92" pos:column="39"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="93" pos:column="5">calcUri<pos:position pos:line="93" pos:column="12"/></name><argument_list pos:line="93" pos:column="12">(<argument><expr><name pos:line="93" pos:column="13">path<pos:position pos:line="93" pos:column="17"/></name></expr></argument>)<pos:position pos:line="93" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="19"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="94" pos:column="5">char<pos:position pos:line="94" pos:column="9"/></name> <modifier pos:line="94" pos:column="10">*<pos:position pos:line="94" pos:column="11"/></modifier></type><name pos:line="94" pos:column="11">newUri<pos:position pos:line="94" pos:column="17"/></name> <init pos:line="94" pos:column="18">= <expr><call><name pos:line="94" pos:column="20">xstrdup<pos:position pos:line="94" pos:column="27"/></name><argument_list pos:line="94" pos:column="27">(<argument><expr><call><name><name pos:line="94" pos:column="28">uri<pos:position pos:line="94" pos:column="31"/></name><operator pos:line="94" pos:column="31">.<pos:position pos:line="94" pos:column="32"/></operator><name pos:line="94" pos:column="32">c_str<pos:position pos:line="94" pos:column="37"/></name></name><argument_list pos:line="94" pos:column="37">()<pos:position pos:line="94" pos:column="39"/></argument_list></call></expr></argument>)<pos:position pos:line="94" pos:column="40"/></argument_list></call></expr></init></decl>;<pos:position pos:line="94" pos:column="41"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="95" pos:column="5">HttpRequest<pos:position pos:line="95" pos:column="16"/></name> <modifier pos:line="95" pos:column="17">*<pos:position pos:line="95" pos:column="18"/></modifier><specifier pos:line="95" pos:column="18">const<pos:position pos:line="95" pos:column="23"/></specifier></type> <name pos:line="95" pos:column="24">request<pos:position pos:line="95" pos:column="31"/></name> <init pos:line="95" pos:column="32">= <expr><call><name><name pos:line="95" pos:column="34">HttpRequest<pos:position pos:line="95" pos:column="45"/></name><operator pos:line="95" pos:column="45">::<pos:position pos:line="95" pos:column="47"/></operator><name pos:line="95" pos:column="47">CreateFromUrlAndMethod<pos:position pos:line="95" pos:column="69"/></name></name><argument_list pos:line="95" pos:column="69">(<argument><expr><name pos:line="95" pos:column="70">newUri<pos:position pos:line="95" pos:column="76"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="78">method<pos:position pos:line="95" pos:column="84"/></name></expr></argument>)<pos:position pos:line="95" pos:column="85"/></argument_list></call></expr></init></decl>;<pos:position pos:line="95" pos:column="86"/></decl_stmt>
    <if pos:line="96" pos:column="5">if <condition pos:line="96" pos:column="8">(<expr><operator pos:line="96" pos:column="9">!<pos:position pos:line="96" pos:column="10"/></operator><name pos:line="96" pos:column="10">request<pos:position pos:line="96" pos:column="17"/></name></expr>)<pos:position pos:line="96" pos:column="18"/></condition><then pos:line="96" pos:column="18"> <block pos:line="96" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="97" pos:column="9">debugs<pos:position pos:line="97" pos:column="15"/></name><argument_list pos:line="97" pos:column="15">(<argument><expr><literal type="number" pos:line="97" pos:column="16">33<pos:position pos:line="97" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="97" pos:column="20">5<pos:position pos:line="97" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="97" pos:column="23">"Invalid FTP URL: "<pos:position pos:line="97" pos:column="42"/></literal> <operator pos:line="97" pos:column="43">&lt;&lt;<pos:position pos:line="97" pos:column="51"/></operator> <name pos:line="97" pos:column="46">uri<pos:position pos:line="97" pos:column="49"/></name></expr></argument>)<pos:position pos:line="97" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="51"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="98" pos:column="9">uri<pos:position pos:line="98" pos:column="12"/></name><operator pos:line="98" pos:column="12">.<pos:position pos:line="98" pos:column="13"/></operator><name pos:line="98" pos:column="13">clear<pos:position pos:line="98" pos:column="18"/></name></name><argument_list pos:line="98" pos:column="18">()<pos:position pos:line="98" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="21"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="99" pos:column="9">safe_free<pos:position pos:line="99" pos:column="18"/></name><argument_list pos:line="99" pos:column="18">(<argument><expr><name pos:line="99" pos:column="19">newUri<pos:position pos:line="99" pos:column="25"/></name></expr></argument>)<pos:position pos:line="99" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="27"/></expr_stmt>
        <return pos:line="100" pos:column="9">return <expr><call><name pos:line="100" pos:column="16">earlyError<pos:position pos:line="100" pos:column="26"/></name><argument_list pos:line="100" pos:column="26">(<argument><expr><name pos:line="100" pos:column="27">eekInvalidUri<pos:position pos:line="100" pos:column="40"/></name></expr></argument>)<pos:position pos:line="100" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="42"/></return>
    }<pos:position pos:line="101" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="103" pos:column="5">ver<pos:position pos:line="103" pos:column="8"/></name> <operator pos:line="103" pos:column="9">=<pos:position pos:line="103" pos:column="10"/></operator> <call><name><name pos:line="103" pos:column="11">Http<pos:position pos:line="103" pos:column="15"/></name><operator pos:line="103" pos:column="15">::<pos:position pos:line="103" pos:column="17"/></operator><name pos:line="103" pos:column="17">ProtocolVersion<pos:position pos:line="103" pos:column="32"/></name></name><argument_list pos:line="103" pos:column="32">(<argument><expr><call><name><name pos:line="103" pos:column="33">Ftp<pos:position pos:line="103" pos:column="36"/></name><operator pos:line="103" pos:column="36">::<pos:position pos:line="103" pos:column="38"/></operator><name pos:line="103" pos:column="38">ProtocolVersion<pos:position pos:line="103" pos:column="53"/></name></name><argument_list pos:line="103" pos:column="53">()<pos:position pos:line="103" pos:column="55"/></argument_list></call><operator pos:line="103" pos:column="55">.<pos:position pos:line="103" pos:column="56"/></operator><name pos:line="103" pos:column="56">major<pos:position pos:line="103" pos:column="61"/></name></expr></argument>, <argument><expr><call><name><name pos:line="103" pos:column="63">Ftp<pos:position pos:line="103" pos:column="66"/></name><operator pos:line="103" pos:column="66">::<pos:position pos:line="103" pos:column="68"/></operator><name pos:line="103" pos:column="68">ProtocolVersion<pos:position pos:line="103" pos:column="83"/></name></name><argument_list pos:line="103" pos:column="83">()<pos:position pos:line="103" pos:column="85"/></argument_list></call><operator pos:line="103" pos:column="85">.<pos:position pos:line="103" pos:column="86"/></operator><name pos:line="103" pos:column="86">minor<pos:position pos:line="103" pos:column="91"/></name></expr></argument>)<pos:position pos:line="103" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="93"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="104" pos:column="5">request<pos:position pos:line="104" pos:column="12"/></name><operator pos:line="104" pos:column="12">-&gt;<pos:position pos:line="104" pos:column="17"/></operator><name pos:line="104" pos:column="14">flags<pos:position pos:line="104" pos:column="19"/></name><operator pos:line="104" pos:column="19">.<pos:position pos:line="104" pos:column="20"/></operator><name pos:line="104" pos:column="20">ftpNative<pos:position pos:line="104" pos:column="29"/></name></name> <operator pos:line="104" pos:column="30">=<pos:position pos:line="104" pos:column="31"/></operator> <literal type="boolean" pos:line="104" pos:column="32">true<pos:position pos:line="104" pos:column="36"/></literal></expr>;<pos:position pos:line="104" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="105" pos:column="5">request<pos:position pos:line="105" pos:column="12"/></name><operator pos:line="105" pos:column="12">-&gt;<pos:position pos:line="105" pos:column="17"/></operator><name pos:line="105" pos:column="14">http_ver<pos:position pos:line="105" pos:column="22"/></name></name> <operator pos:line="105" pos:column="23">=<pos:position pos:line="105" pos:column="24"/></operator> <name pos:line="105" pos:column="25">ver<pos:position pos:line="105" pos:column="28"/></name></expr>;<pos:position pos:line="105" pos:column="29"/></expr_stmt>

    <comment type="line" pos:line="107" pos:column="5">// Our fake Request-URIs are not distinctive enough for caching to work</comment>
    <expr_stmt><expr><name><name pos:line="108" pos:column="5">request<pos:position pos:line="108" pos:column="12"/></name><operator pos:line="108" pos:column="12">-&gt;<pos:position pos:line="108" pos:column="17"/></operator><name pos:line="108" pos:column="14">flags<pos:position pos:line="108" pos:column="19"/></name><operator pos:line="108" pos:column="19">.<pos:position pos:line="108" pos:column="20"/></operator><name pos:line="108" pos:column="20">cachable<pos:position pos:line="108" pos:column="28"/></name></name> <operator pos:line="108" pos:column="29">=<pos:position pos:line="108" pos:column="30"/></operator> <literal type="boolean" pos:line="108" pos:column="31">false<pos:position pos:line="108" pos:column="36"/></literal></expr>;<pos:position pos:line="108" pos:column="37"/></expr_stmt> <comment type="line" pos:line="108" pos:column="38">// XXX: reset later by maybeCacheable()</comment>
    <expr_stmt><expr><name><name pos:line="109" pos:column="5">request<pos:position pos:line="109" pos:column="12"/></name><operator pos:line="109" pos:column="12">-&gt;<pos:position pos:line="109" pos:column="17"/></operator><name pos:line="109" pos:column="14">flags<pos:position pos:line="109" pos:column="19"/></name><operator pos:line="109" pos:column="19">.<pos:position pos:line="109" pos:column="20"/></operator><name pos:line="109" pos:column="20">noCache<pos:position pos:line="109" pos:column="27"/></name></name> <operator pos:line="109" pos:column="28">=<pos:position pos:line="109" pos:column="29"/></operator> <literal type="boolean" pos:line="109" pos:column="30">true<pos:position pos:line="109" pos:column="34"/></literal></expr>;<pos:position pos:line="109" pos:column="35"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="111" pos:column="5">request<pos:position pos:line="111" pos:column="12"/></name><operator pos:line="111" pos:column="12">-&gt;<pos:position pos:line="111" pos:column="17"/></operator><name pos:line="111" pos:column="14">header<pos:position pos:line="111" pos:column="20"/></name><operator pos:line="111" pos:column="20">.<pos:position pos:line="111" pos:column="21"/></operator><name pos:line="111" pos:column="21">putStr<pos:position pos:line="111" pos:column="27"/></name></name><argument_list pos:line="111" pos:column="27">(<argument><expr><name pos:line="111" pos:column="28">HDR_FTP_COMMAND<pos:position pos:line="111" pos:column="43"/></name></expr></argument>, <argument><expr><call><name><name pos:line="111" pos:column="45">cmd<pos:position pos:line="111" pos:column="48"/></name><operator pos:line="111" pos:column="48">.<pos:position pos:line="111" pos:column="49"/></operator><name pos:line="111" pos:column="49">c_str<pos:position pos:line="111" pos:column="54"/></name></name><argument_list pos:line="111" pos:column="54">()<pos:position pos:line="111" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="111" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="112" pos:column="5">request<pos:position pos:line="112" pos:column="12"/></name><operator pos:line="112" pos:column="12">-&gt;<pos:position pos:line="112" pos:column="17"/></operator><name pos:line="112" pos:column="14">header<pos:position pos:line="112" pos:column="20"/></name><operator pos:line="112" pos:column="20">.<pos:position pos:line="112" pos:column="21"/></operator><name pos:line="112" pos:column="21">putStr<pos:position pos:line="112" pos:column="27"/></name></name><argument_list pos:line="112" pos:column="27">(<argument><expr><name pos:line="112" pos:column="28">HDR_FTP_ARGUMENTS<pos:position pos:line="112" pos:column="45"/></name></expr></argument>, <argument><expr><call><name><name pos:line="112" pos:column="47">params<pos:position pos:line="112" pos:column="53"/></name><operator pos:line="112" pos:column="53">.<pos:position pos:line="112" pos:column="54"/></operator><name pos:line="112" pos:column="54">c_str<pos:position pos:line="112" pos:column="59"/></name></name><argument_list pos:line="112" pos:column="59">()<pos:position pos:line="112" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="112" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="63"/></expr_stmt> <comment type="line" pos:line="112" pos:column="64">// may be ""</comment>
    <if pos:line="113" pos:column="5">if <condition pos:line="113" pos:column="8">(<expr><name pos:line="113" pos:column="9">method<pos:position pos:line="113" pos:column="15"/></name> <operator pos:line="113" pos:column="16">==<pos:position pos:line="113" pos:column="18"/></operator> <name><name pos:line="113" pos:column="19">Http<pos:position pos:line="113" pos:column="23"/></name><operator pos:line="113" pos:column="23">::<pos:position pos:line="113" pos:column="25"/></operator><name pos:line="113" pos:column="25">METHOD_PUT<pos:position pos:line="113" pos:column="35"/></name></name></expr>)<pos:position pos:line="113" pos:column="36"/></condition><then pos:line="113" pos:column="36"> <block pos:line="113" pos:column="37">{
        <expr_stmt><expr><call><name><name pos:line="114" pos:column="9">request<pos:position pos:line="114" pos:column="16"/></name><operator pos:line="114" pos:column="16">-&gt;<pos:position pos:line="114" pos:column="21"/></operator><name pos:line="114" pos:column="18">header<pos:position pos:line="114" pos:column="24"/></name><operator pos:line="114" pos:column="24">.<pos:position pos:line="114" pos:column="25"/></operator><name pos:line="114" pos:column="25">putStr<pos:position pos:line="114" pos:column="31"/></name></name><argument_list pos:line="114" pos:column="31">(<argument><expr><name pos:line="114" pos:column="32">HDR_EXPECT<pos:position pos:line="114" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="114" pos:column="44">"100-continue"<pos:position pos:line="114" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="114" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="60"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="115" pos:column="9">request<pos:position pos:line="115" pos:column="16"/></name><operator pos:line="115" pos:column="16">-&gt;<pos:position pos:line="115" pos:column="21"/></operator><name pos:line="115" pos:column="18">header<pos:position pos:line="115" pos:column="24"/></name><operator pos:line="115" pos:column="24">.<pos:position pos:line="115" pos:column="25"/></operator><name pos:line="115" pos:column="25">putStr<pos:position pos:line="115" pos:column="31"/></name></name><argument_list pos:line="115" pos:column="31">(<argument><expr><name pos:line="115" pos:column="32">HDR_TRANSFER_ENCODING<pos:position pos:line="115" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="115" pos:column="55">"chunked"<pos:position pos:line="115" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="115" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="66"/></expr_stmt>
    }<pos:position pos:line="116" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="118" pos:column="5">ClientHttpRequest<pos:position pos:line="118" pos:column="22"/></name> <modifier pos:line="118" pos:column="23">*<pos:position pos:line="118" pos:column="24"/></modifier><specifier pos:line="118" pos:column="24">const<pos:position pos:line="118" pos:column="29"/></specifier></type> <name pos:line="118" pos:column="30">http<pos:position pos:line="118" pos:column="34"/></name> <init pos:line="118" pos:column="35">= <expr><operator pos:line="118" pos:column="37">new<pos:position pos:line="118" pos:column="40"/></operator> <call><name pos:line="118" pos:column="41">ClientHttpRequest<pos:position pos:line="118" pos:column="58"/></name><argument_list pos:line="118" pos:column="58">(<argument><expr><name pos:line="118" pos:column="59">this<pos:position pos:line="118" pos:column="63"/></name></expr></argument>)<pos:position pos:line="118" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="118" pos:column="65"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="119" pos:column="5">http<pos:position pos:line="119" pos:column="9"/></name><operator pos:line="119" pos:column="9">-&gt;<pos:position pos:line="119" pos:column="14"/></operator><name pos:line="119" pos:column="11">request<pos:position pos:line="119" pos:column="18"/></name></name> <operator pos:line="119" pos:column="19">=<pos:position pos:line="119" pos:column="20"/></operator> <name pos:line="119" pos:column="21">request<pos:position pos:line="119" pos:column="28"/></name></expr>;<pos:position pos:line="119" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="120" pos:column="5">HTTPMSGLOCK<pos:position pos:line="120" pos:column="16"/></name><argument_list pos:line="120" pos:column="16">(<argument><expr><name><name pos:line="120" pos:column="17">http<pos:position pos:line="120" pos:column="21"/></name><operator pos:line="120" pos:column="21">-&gt;<pos:position pos:line="120" pos:column="26"/></operator><name pos:line="120" pos:column="23">request<pos:position pos:line="120" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="120" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="121" pos:column="5">http<pos:position pos:line="121" pos:column="9"/></name><operator pos:line="121" pos:column="9">-&gt;<pos:position pos:line="121" pos:column="14"/></operator><name pos:line="121" pos:column="11">req_sz<pos:position pos:line="121" pos:column="17"/></name></name> <operator pos:line="121" pos:column="18">=<pos:position pos:line="121" pos:column="19"/></operator> <call><name><name pos:line="121" pos:column="20">tok<pos:position pos:line="121" pos:column="23"/></name><operator pos:line="121" pos:column="23">.<pos:position pos:line="121" pos:column="24"/></operator><name pos:line="121" pos:column="24">parsedSize<pos:position pos:line="121" pos:column="34"/></name></name><argument_list pos:line="121" pos:column="34">()<pos:position pos:line="121" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="122" pos:column="5">http<pos:position pos:line="122" pos:column="9"/></name><operator pos:line="122" pos:column="9">-&gt;<pos:position pos:line="122" pos:column="14"/></operator><name pos:line="122" pos:column="11">uri<pos:position pos:line="122" pos:column="14"/></name></name> <operator pos:line="122" pos:column="15">=<pos:position pos:line="122" pos:column="16"/></operator> <name pos:line="122" pos:column="17">newUri<pos:position pos:line="122" pos:column="23"/></name></expr>;<pos:position pos:line="122" pos:column="24"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="124" pos:column="5">ClientSocketContext<pos:position pos:line="124" pos:column="24"/></name> <modifier pos:line="124" pos:column="25">*<pos:position pos:line="124" pos:column="26"/></modifier><specifier pos:line="124" pos:column="26">const<pos:position pos:line="124" pos:column="31"/></specifier></type> <name pos:line="124" pos:column="32">result<pos:position pos:line="124" pos:column="38"/></name> <init pos:line="124" pos:column="39">=
        <expr><operator pos:line="125" pos:column="9">new<pos:position pos:line="125" pos:column="12"/></operator> <call><name pos:line="125" pos:column="13">ClientSocketContext<pos:position pos:line="125" pos:column="32"/></name><argument_list pos:line="125" pos:column="32">(<argument><expr><name pos:line="125" pos:column="33">clientConnection<pos:position pos:line="125" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="125" pos:column="51">http<pos:position pos:line="125" pos:column="55"/></name></expr></argument>)<pos:position pos:line="125" pos:column="56"/></argument_list></call></expr></init></decl>;<pos:position pos:line="125" pos:column="57"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="127" pos:column="5">StoreIOBuffer<pos:position pos:line="127" pos:column="18"/></name></type> <name pos:line="127" pos:column="19">tempBuffer<pos:position pos:line="127" pos:column="29"/></name></decl>;<pos:position pos:line="127" pos:column="30"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="128" pos:column="5">tempBuffer<pos:position pos:line="128" pos:column="15"/></name><operator pos:line="128" pos:column="15">.<pos:position pos:line="128" pos:column="16"/></operator><name pos:line="128" pos:column="16">data<pos:position pos:line="128" pos:column="20"/></name></name> <operator pos:line="128" pos:column="21">=<pos:position pos:line="128" pos:column="22"/></operator> <name><name pos:line="128" pos:column="23">result<pos:position pos:line="128" pos:column="29"/></name><operator pos:line="128" pos:column="29">-&gt;<pos:position pos:line="128" pos:column="34"/></operator><name pos:line="128" pos:column="31">reqbuf<pos:position pos:line="128" pos:column="37"/></name></name></expr>;<pos:position pos:line="128" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="129" pos:column="5">tempBuffer<pos:position pos:line="129" pos:column="15"/></name><operator pos:line="129" pos:column="15">.<pos:position pos:line="129" pos:column="16"/></operator><name pos:line="129" pos:column="16">length<pos:position pos:line="129" pos:column="22"/></name></name> <operator pos:line="129" pos:column="23">=<pos:position pos:line="129" pos:column="24"/></operator> <name pos:line="129" pos:column="25">HTTP_REQBUF_SZ<pos:position pos:line="129" pos:column="39"/></name></expr>;<pos:position pos:line="129" pos:column="40"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="131" pos:column="5">ClientStreamData<pos:position pos:line="131" pos:column="21"/></name></type> <name pos:line="131" pos:column="22">newServer<pos:position pos:line="131" pos:column="31"/></name> <init pos:line="131" pos:column="32">= <expr><operator pos:line="131" pos:column="34">new<pos:position pos:line="131" pos:column="37"/></operator> <call><name pos:line="131" pos:column="38">clientReplyContext<pos:position pos:line="131" pos:column="56"/></name><argument_list pos:line="131" pos:column="56">(<argument><expr><name pos:line="131" pos:column="57">http<pos:position pos:line="131" pos:column="61"/></name></expr></argument>)<pos:position pos:line="131" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="131" pos:column="63"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="132" pos:column="5">ClientStreamData<pos:position pos:line="132" pos:column="21"/></name></type> <name pos:line="132" pos:column="22">newClient<pos:position pos:line="132" pos:column="31"/></name> <init pos:line="132" pos:column="32">= <expr><name pos:line="132" pos:column="34">result<pos:position pos:line="132" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="132" pos:column="41"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="133" pos:column="5">clientStreamInit<pos:position pos:line="133" pos:column="21"/></name><argument_list pos:line="133" pos:column="21">(<argument><expr><operator pos:line="133" pos:column="22">&amp;<pos:position pos:line="133" pos:column="27"/></operator><name><name pos:line="133" pos:column="23">http<pos:position pos:line="133" pos:column="27"/></name><operator pos:line="133" pos:column="27">-&gt;<pos:position pos:line="133" pos:column="32"/></operator><name pos:line="133" pos:column="29">client_stream<pos:position pos:line="133" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="133" pos:column="44">clientGetMoreData<pos:position pos:line="133" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="133" pos:column="63">clientReplyDetach<pos:position pos:line="133" pos:column="80"/></name></expr></argument>,
                     <argument><expr><name pos:line="134" pos:column="22">clientReplyStatus<pos:position pos:line="134" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="134" pos:column="41">newServer<pos:position pos:line="134" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="134" pos:column="52">clientSocketRecipient<pos:position pos:line="134" pos:column="73"/></name></expr></argument>,
                     <argument><expr><name pos:line="135" pos:column="22">clientSocketDetach<pos:position pos:line="135" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="42">newClient<pos:position pos:line="135" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="53">tempBuffer<pos:position pos:line="135" pos:column="63"/></name></expr></argument>)<pos:position pos:line="135" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="65"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="137" pos:column="5">result<pos:position pos:line="137" pos:column="11"/></name><operator pos:line="137" pos:column="11">-&gt;<pos:position pos:line="137" pos:column="16"/></operator><name pos:line="137" pos:column="13">flags<pos:position pos:line="137" pos:column="18"/></name><operator pos:line="137" pos:column="18">.<pos:position pos:line="137" pos:column="19"/></operator><name pos:line="137" pos:column="19">parsed_ok<pos:position pos:line="137" pos:column="28"/></name></name> <operator pos:line="137" pos:column="29">=<pos:position pos:line="137" pos:column="30"/></operator> <literal type="number" pos:line="137" pos:column="31">1<pos:position pos:line="137" pos:column="32"/></literal></expr>;<pos:position pos:line="137" pos:column="33"/></expr_stmt>
    <return pos:line="138" pos:column="5">return <expr><name pos:line="138" pos:column="12">result<pos:position pos:line="138" pos:column="18"/></name></expr>;<pos:position pos:line="138" pos:column="19"/></return>
}<pos:position pos:line="139" pos:column="2"/></block></function></unit>
