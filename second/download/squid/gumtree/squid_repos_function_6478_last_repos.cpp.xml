<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6478_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">IpcIoFile<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">WaitBeforePop<pos:position pos:line="2" pos:column="25"/></name></name><parameter_list pos:line="2" pos:column="25">()<pos:position pos:line="2" pos:column="27"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">int<pos:position pos:line="4" pos:column="14"/></name></type> <name pos:line="4" pos:column="15">ioRate<pos:position pos:line="4" pos:column="21"/></name> <init pos:line="4" pos:column="22">= <expr><call><name><name pos:line="4" pos:column="24">queue<pos:position pos:line="4" pos:column="29"/></name><operator pos:line="4" pos:column="29">-&gt;<pos:position pos:line="4" pos:column="34"/></operator><name pos:line="4" pos:column="31">localRateLimit<pos:position pos:line="4" pos:column="45"/></name></name><argument_list pos:line="4" pos:column="45">()<pos:position pos:line="4" pos:column="47"/></argument_list></call><operator pos:line="4" pos:column="47">.<pos:position pos:line="4" pos:column="48"/></operator><call><name pos:line="4" pos:column="48">load<pos:position pos:line="4" pos:column="52"/></name><argument_list pos:line="4" pos:column="52">()<pos:position pos:line="4" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="55"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">double<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">maxRate<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><name pos:line="5" pos:column="28">ioRate<pos:position pos:line="5" pos:column="34"/></name><operator pos:line="5" pos:column="34">/<pos:position pos:line="5" pos:column="35"/></operator><literal type="number" pos:line="5" pos:column="35">1e3<pos:position pos:line="5" pos:column="38"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="39"/></decl_stmt> <comment type="line" pos:line="5" pos:column="40">// req/ms</comment>

    <comment type="line" pos:line="7" pos:column="5">// do we need to enforce configured I/O rate?</comment>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">maxRate<pos:position pos:line="8" pos:column="16"/></name> <operator pos:line="8" pos:column="17">&lt;=<pos:position pos:line="8" pos:column="22"/></operator> <literal type="number" pos:line="8" pos:column="20">0<pos:position pos:line="8" pos:column="21"/></literal></expr>)<pos:position pos:line="8" pos:column="22"/></condition><then pos:line="8" pos:column="22">
        <block type="pseudo"><return pos:line="9" pos:column="9">return <expr><literal type="boolean" pos:line="9" pos:column="16">false<pos:position pos:line="9" pos:column="21"/></literal></expr>;<pos:position pos:line="9" pos:column="22"/></return></block></then></if>

    <comment type="line" pos:line="11" pos:column="5">// is there an I/O request we could potentially delay?</comment>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">int<pos:position pos:line="12" pos:column="8"/></name></type> <name pos:line="12" pos:column="9">processId<pos:position pos:line="12" pos:column="18"/></name></decl>;<pos:position pos:line="12" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">IpcIoMsg<pos:position pos:line="13" pos:column="13"/></name></type> <name pos:line="13" pos:column="14">ipcIo<pos:position pos:line="13" pos:column="19"/></name></decl>;<pos:position pos:line="13" pos:column="20"/></decl_stmt>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><operator pos:line="14" pos:column="9">!<pos:position pos:line="14" pos:column="10"/></operator><call><name><name pos:line="14" pos:column="10">queue<pos:position pos:line="14" pos:column="15"/></name><operator pos:line="14" pos:column="15">-&gt;<pos:position pos:line="14" pos:column="20"/></operator><name pos:line="14" pos:column="17">peek<pos:position pos:line="14" pos:column="21"/></name></name><argument_list pos:line="14" pos:column="21">(<argument><expr><name pos:line="14" pos:column="22">processId<pos:position pos:line="14" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="33">ipcIo<pos:position pos:line="14" pos:column="38"/></name></expr></argument>)<pos:position pos:line="14" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="40"/></condition><then pos:line="14" pos:column="40"> <block pos:line="14" pos:column="41">{
        <comment type="line" pos:line="15" pos:column="9">// unlike pop(), peek() is not reliable and does not block reader</comment>
        <comment type="line" pos:line="16" pos:column="9">// so we must proceed with pop() even if it is likely to fail</comment>
        <return pos:line="17" pos:column="9">return <expr><literal type="boolean" pos:line="17" pos:column="16">false<pos:position pos:line="17" pos:column="21"/></literal></expr>;<pos:position pos:line="17" pos:column="22"/></return>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

    <decl_stmt><decl><specifier pos:line="20" pos:column="5">static<pos:position pos:line="20" pos:column="11"/></specifier> <type><name pos:line="20" pos:column="12">timeval<pos:position pos:line="20" pos:column="19"/></name></type> <name pos:line="20" pos:column="20">LastIo<pos:position pos:line="20" pos:column="26"/></name> <init pos:line="20" pos:column="27">= <expr><name pos:line="20" pos:column="29">current_time<pos:position pos:line="20" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="20" pos:column="42"/></decl_stmt>

    <decl_stmt><decl><type><specifier pos:line="22" pos:column="5">const<pos:position pos:line="22" pos:column="10"/></specifier> <name pos:line="22" pos:column="11">double<pos:position pos:line="22" pos:column="17"/></name></type> <name pos:line="22" pos:column="18">ioDuration<pos:position pos:line="22" pos:column="28"/></name> <init pos:line="22" pos:column="29">= <expr><literal type="number" pos:line="22" pos:column="31">1.0<pos:position pos:line="22" pos:column="34"/></literal> <operator pos:line="22" pos:column="35">/<pos:position pos:line="22" pos:column="36"/></operator> <name pos:line="22" pos:column="37">maxRate<pos:position pos:line="22" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="22" pos:column="45"/></decl_stmt> <comment type="line" pos:line="22" pos:column="46">// ideal distance between two I/Os</comment>
    <comment type="line" pos:line="23" pos:column="5">// do not accumulate more than 100ms or 100 I/Os, whichever is smaller</comment>
    <decl_stmt><decl><type><specifier pos:line="24" pos:column="5">const<pos:position pos:line="24" pos:column="10"/></specifier> <name pos:line="24" pos:column="11">int64_t<pos:position pos:line="24" pos:column="18"/></name></type> <name pos:line="24" pos:column="19">maxImbalance<pos:position pos:line="24" pos:column="31"/></name> <init pos:line="24" pos:column="32">= <expr><call><name pos:line="24" pos:column="34">min<pos:position pos:line="24" pos:column="37"/></name><argument_list pos:line="24" pos:column="37">(<argument><expr><cast type="static" pos:line="24" pos:column="38">static_cast<argument_list type="generic" pos:line="24" pos:column="49">&lt;<argument><expr><name pos:line="24" pos:column="50">int64_t<pos:position pos:line="24" pos:column="57"/></name></expr></argument>&gt;<pos:position pos:line="24" pos:column="61"/></argument_list><argument_list pos:line="24" pos:column="58">(<argument><expr><literal type="number" pos:line="24" pos:column="59">100<pos:position pos:line="24" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="63"/></argument_list></cast></expr></argument>, <argument><expr><cast type="static" pos:line="24" pos:column="65">static_cast<argument_list type="generic" pos:line="24" pos:column="76">&lt;<argument><expr><name pos:line="24" pos:column="77">int64_t<pos:position pos:line="24" pos:column="84"/></name></expr></argument>&gt;<pos:position pos:line="24" pos:column="88"/></argument_list><argument_list pos:line="24" pos:column="85">(<argument><expr><literal type="number" pos:line="24" pos:column="86">100<pos:position pos:line="24" pos:column="89"/></literal> <operator pos:line="24" pos:column="90">*<pos:position pos:line="24" pos:column="91"/></operator> <name pos:line="24" pos:column="92">ioDuration<pos:position pos:line="24" pos:column="102"/></name></expr></argument>)<pos:position pos:line="24" pos:column="103"/></argument_list></cast></expr></argument>)<pos:position pos:line="24" pos:column="104"/></argument_list></call></expr></init></decl>;<pos:position pos:line="24" pos:column="105"/></decl_stmt>

    <decl_stmt><decl><type><specifier pos:line="26" pos:column="5">const<pos:position pos:line="26" pos:column="10"/></specifier> <name pos:line="26" pos:column="11">double<pos:position pos:line="26" pos:column="17"/></name></type> <name pos:line="26" pos:column="18">credit<pos:position pos:line="26" pos:column="24"/></name> <init pos:line="26" pos:column="25">= <expr><name pos:line="26" pos:column="27">ioDuration<pos:position pos:line="26" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="26" pos:column="38"/></decl_stmt> <comment type="line" pos:line="26" pos:column="39">// what the last I/O should have cost us</comment>
    <decl_stmt><decl><type><specifier pos:line="27" pos:column="5">const<pos:position pos:line="27" pos:column="10"/></specifier> <name pos:line="27" pos:column="11">double<pos:position pos:line="27" pos:column="17"/></name></type> <name pos:line="27" pos:column="18">debit<pos:position pos:line="27" pos:column="23"/></name> <init pos:line="27" pos:column="24">= <expr><call><name pos:line="27" pos:column="26">tvSubMsec<pos:position pos:line="27" pos:column="35"/></name><argument_list pos:line="27" pos:column="35">(<argument><expr><name pos:line="27" pos:column="36">LastIo<pos:position pos:line="27" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="44">current_time<pos:position pos:line="27" pos:column="56"/></name></expr></argument>)<pos:position pos:line="27" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="27" pos:column="58"/></decl_stmt> <comment type="line" pos:line="27" pos:column="59">// actual distance from the last I/O</comment>
    <expr_stmt><expr><name pos:line="28" pos:column="5">LastIo<pos:position pos:line="28" pos:column="11"/></name> <operator pos:line="28" pos:column="12">=<pos:position pos:line="28" pos:column="13"/></operator> <name pos:line="28" pos:column="14">current_time<pos:position pos:line="28" pos:column="26"/></name></expr>;<pos:position pos:line="28" pos:column="27"/></expr_stmt>

    <decl_stmt><decl><type><name><name pos:line="30" pos:column="5">Ipc<pos:position pos:line="30" pos:column="8"/></name><operator pos:line="30" pos:column="8">::<pos:position pos:line="30" pos:column="10"/></operator><name pos:line="30" pos:column="10">QueueReader<pos:position pos:line="30" pos:column="21"/></name><operator pos:line="30" pos:column="21">::<pos:position pos:line="30" pos:column="23"/></operator><name pos:line="30" pos:column="23">Balance<pos:position pos:line="30" pos:column="30"/></name></name> <modifier pos:line="30" pos:column="31">&amp;<pos:position pos:line="30" pos:column="36"/></modifier></type><name pos:line="30" pos:column="32">balance<pos:position pos:line="30" pos:column="39"/></name> <init pos:line="30" pos:column="40">= <expr><call><name><name pos:line="30" pos:column="42">queue<pos:position pos:line="30" pos:column="47"/></name><operator pos:line="30" pos:column="47">-&gt;<pos:position pos:line="30" pos:column="52"/></operator><name pos:line="30" pos:column="49">localBalance<pos:position pos:line="30" pos:column="61"/></name></name><argument_list pos:line="30" pos:column="61">()<pos:position pos:line="30" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="30" pos:column="64"/></decl_stmt>
    <expr_stmt><expr><name pos:line="31" pos:column="5">balance<pos:position pos:line="31" pos:column="12"/></name> <operator pos:line="31" pos:column="13">+=<pos:position pos:line="31" pos:column="15"/></operator> <cast type="static" pos:line="31" pos:column="16">static_cast<argument_list type="generic" pos:line="31" pos:column="27">&lt;<argument><expr><name pos:line="31" pos:column="28">int64_t<pos:position pos:line="31" pos:column="35"/></name></expr></argument>&gt;<pos:position pos:line="31" pos:column="39"/></argument_list><argument_list pos:line="31" pos:column="36">(<argument><expr><name pos:line="31" pos:column="37">credit<pos:position pos:line="31" pos:column="43"/></name> <operator pos:line="31" pos:column="44">-<pos:position pos:line="31" pos:column="45"/></operator> <name pos:line="31" pos:column="46">debit<pos:position pos:line="31" pos:column="51"/></name></expr></argument>)<pos:position pos:line="31" pos:column="52"/></argument_list></cast></expr>;<pos:position pos:line="31" pos:column="53"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="33" pos:column="5">debugs<pos:position pos:line="33" pos:column="11"/></name><argument_list pos:line="33" pos:column="11">(<argument><expr><literal type="number" pos:line="33" pos:column="12">47<pos:position pos:line="33" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="16">7<pos:position pos:line="33" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="19">HERE<pos:position pos:line="33" pos:column="23"/></name> <operator pos:line="33" pos:column="24">&lt;&lt;<pos:position pos:line="33" pos:column="32"/></operator> <literal type="string" pos:line="33" pos:column="27">"rate limiting balance: "<pos:position pos:line="33" pos:column="52"/></literal> <operator pos:line="33" pos:column="53">&lt;&lt;<pos:position pos:line="33" pos:column="61"/></operator> <name pos:line="33" pos:column="56">balance<pos:position pos:line="33" pos:column="63"/></name> <operator pos:line="33" pos:column="64">&lt;&lt;<pos:position pos:line="33" pos:column="72"/></operator> <literal type="string" pos:line="33" pos:column="67">" after +"<pos:position pos:line="33" pos:column="77"/></literal> <operator pos:line="33" pos:column="78">&lt;&lt;<pos:position pos:line="33" pos:column="86"/></operator> <name pos:line="33" pos:column="81">credit<pos:position pos:line="33" pos:column="87"/></name> <operator pos:line="33" pos:column="88">&lt;&lt;<pos:position pos:line="33" pos:column="96"/></operator> <literal type="string" pos:line="33" pos:column="91">" -"<pos:position pos:line="33" pos:column="95"/></literal> <operator pos:line="33" pos:column="96">&lt;&lt;<pos:position pos:line="33" pos:column="104"/></operator> <name pos:line="33" pos:column="99">debit<pos:position pos:line="33" pos:column="104"/></name></expr></argument>)<pos:position pos:line="33" pos:column="105"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="106"/></expr_stmt>

    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><name><name pos:line="35" pos:column="9">ipcIo<pos:position pos:line="35" pos:column="14"/></name><operator pos:line="35" pos:column="14">.<pos:position pos:line="35" pos:column="15"/></operator><name pos:line="35" pos:column="15">command<pos:position pos:line="35" pos:column="22"/></name></name> <operator pos:line="35" pos:column="23">==<pos:position pos:line="35" pos:column="25"/></operator> <name><name pos:line="35" pos:column="26">IpcIo<pos:position pos:line="35" pos:column="31"/></name><operator pos:line="35" pos:column="31">::<pos:position pos:line="35" pos:column="33"/></operator><name pos:line="35" pos:column="33">cmdWrite<pos:position pos:line="35" pos:column="41"/></name></name> <operator pos:line="35" pos:column="42">&amp;&amp;<pos:position pos:line="35" pos:column="52"/></operator> <name pos:line="35" pos:column="45">balance<pos:position pos:line="35" pos:column="52"/></name> <operator pos:line="35" pos:column="53">&gt;<pos:position pos:line="35" pos:column="57"/></operator> <name pos:line="35" pos:column="55">maxImbalance<pos:position pos:line="35" pos:column="67"/></name></expr>)<pos:position pos:line="35" pos:column="68"/></condition><then pos:line="35" pos:column="68"> <block pos:line="35" pos:column="69">{
        <comment type="line" pos:line="36" pos:column="9">// if the next request is (likely) write and we accumulated</comment>
        <comment type="line" pos:line="37" pos:column="9">// too much time for future slow I/Os, then shed accumulated</comment>
        <comment type="line" pos:line="38" pos:column="9">// time to keep just half of the excess</comment>
        <decl_stmt><decl><type><specifier pos:line="39" pos:column="9">const<pos:position pos:line="39" pos:column="14"/></specifier> <name pos:line="39" pos:column="15">int64_t<pos:position pos:line="39" pos:column="22"/></name></type> <name pos:line="39" pos:column="23">toSpend<pos:position pos:line="39" pos:column="30"/></name> <init pos:line="39" pos:column="31">= <expr><name pos:line="39" pos:column="33">balance<pos:position pos:line="39" pos:column="40"/></name> <operator pos:line="39" pos:column="41">-<pos:position pos:line="39" pos:column="42"/></operator> <name pos:line="39" pos:column="43">maxImbalance<pos:position pos:line="39" pos:column="55"/></name><operator pos:line="39" pos:column="55">/<pos:position pos:line="39" pos:column="56"/></operator><literal type="number" pos:line="39" pos:column="56">2<pos:position pos:line="39" pos:column="57"/></literal></expr></init></decl>;<pos:position pos:line="39" pos:column="58"/></decl_stmt>

        <if pos:line="41" pos:column="9">if <condition pos:line="41" pos:column="12">(<expr><name pos:line="41" pos:column="13">toSpend<pos:position pos:line="41" pos:column="20"/></name><operator pos:line="41" pos:column="20">/<pos:position pos:line="41" pos:column="21"/></operator><literal type="number" pos:line="41" pos:column="21">1e3<pos:position pos:line="41" pos:column="24"/></literal> <operator pos:line="41" pos:column="25">&gt;<pos:position pos:line="41" pos:column="29"/></operator> <name pos:line="41" pos:column="27">Timeout<pos:position pos:line="41" pos:column="34"/></name></expr>)<pos:position pos:line="41" pos:column="35"/></condition><then pos:line="41" pos:column="35">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="42" pos:column="13">debugs<pos:position pos:line="42" pos:column="19"/></name><argument_list pos:line="42" pos:column="19">(<argument><expr><literal type="number" pos:line="42" pos:column="20">47<pos:position pos:line="42" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="24">DBG_IMPORTANT<pos:position pos:line="42" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="39">"WARNING: "<pos:position pos:line="42" pos:column="50"/></literal> <operator pos:line="42" pos:column="51">&lt;&lt;<pos:position pos:line="42" pos:column="59"/></operator> <name pos:line="42" pos:column="54">DbName<pos:position pos:line="42" pos:column="60"/></name> <operator pos:line="42" pos:column="61">&lt;&lt;<pos:position pos:line="42" pos:column="69"/></operator> <literal type="string" pos:line="42" pos:column="64">" delays "<pos:position pos:line="42" pos:column="74"/></literal> <operator pos:line="42" pos:column="75">&lt;&lt;<pos:position pos:line="42" pos:column="83"/></operator>
                   <literal type="string" pos:line="43" pos:column="20">"I/O requests for "<pos:position pos:line="43" pos:column="39"/></literal> <operator pos:line="43" pos:column="40">&lt;&lt;<pos:position pos:line="43" pos:column="48"/></operator> <operator pos:line="43" pos:column="43">(<pos:position pos:line="43" pos:column="44"/></operator><name pos:line="43" pos:column="44">toSpend<pos:position pos:line="43" pos:column="51"/></name><operator pos:line="43" pos:column="51">/<pos:position pos:line="43" pos:column="52"/></operator><literal type="number" pos:line="43" pos:column="52">1e3<pos:position pos:line="43" pos:column="55"/></literal><operator pos:line="43" pos:column="55">)<pos:position pos:line="43" pos:column="56"/></operator> <operator pos:line="43" pos:column="57">&lt;&lt;<pos:position pos:line="43" pos:column="65"/></operator> <literal type="string" pos:line="43" pos:column="60">" seconds "<pos:position pos:line="43" pos:column="71"/></literal> <operator pos:line="43" pos:column="72">&lt;&lt;<pos:position pos:line="43" pos:column="80"/></operator>
                   <literal type="string" pos:line="44" pos:column="20">"to obey "<pos:position pos:line="44" pos:column="30"/></literal> <operator pos:line="44" pos:column="31">&lt;&lt;<pos:position pos:line="44" pos:column="39"/></operator> <name pos:line="44" pos:column="34">ioRate<pos:position pos:line="44" pos:column="40"/></name> <operator pos:line="44" pos:column="41">&lt;&lt;<pos:position pos:line="44" pos:column="49"/></operator> <literal type="string" pos:line="44" pos:column="44">"/sec rate limit"<pos:position pos:line="44" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="63"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name pos:line="46" pos:column="9">debugs<pos:position pos:line="46" pos:column="15"/></name><argument_list pos:line="46" pos:column="15">(<argument><expr><literal type="number" pos:line="46" pos:column="16">47<pos:position pos:line="46" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="20">3<pos:position pos:line="46" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="23">HERE<pos:position pos:line="46" pos:column="27"/></name> <operator pos:line="46" pos:column="28">&lt;&lt;<pos:position pos:line="46" pos:column="36"/></operator> <literal type="string" pos:line="46" pos:column="31">"rate limiting by "<pos:position pos:line="46" pos:column="50"/></literal> <operator pos:line="46" pos:column="51">&lt;&lt;<pos:position pos:line="46" pos:column="59"/></operator> <name pos:line="46" pos:column="54">toSpend<pos:position pos:line="46" pos:column="61"/></name> <operator pos:line="46" pos:column="62">&lt;&lt;<pos:position pos:line="46" pos:column="70"/></operator> <literal type="string" pos:line="46" pos:column="65">" ms to get"<pos:position pos:line="46" pos:column="77"/></literal> <operator pos:line="46" pos:column="78">&lt;&lt;<pos:position pos:line="46" pos:column="86"/></operator>
               <operator pos:line="47" pos:column="16">(<pos:position pos:line="47" pos:column="17"/></operator><literal type="number" pos:line="47" pos:column="17">1e3<pos:position pos:line="47" pos:column="20"/></literal><operator pos:line="47" pos:column="20">*<pos:position pos:line="47" pos:column="21"/></operator><name pos:line="47" pos:column="21">maxRate<pos:position pos:line="47" pos:column="28"/></name><operator pos:line="47" pos:column="28">)<pos:position pos:line="47" pos:column="29"/></operator> <operator pos:line="47" pos:column="30">&lt;&lt;<pos:position pos:line="47" pos:column="38"/></operator> <literal type="string" pos:line="47" pos:column="33">"/sec rate"<pos:position pos:line="47" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="46"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="48" pos:column="9">eventAdd<pos:position pos:line="48" pos:column="17"/></name><argument_list pos:line="48" pos:column="17">(<argument><expr><literal type="string" pos:line="48" pos:column="18">"IpcIoFile::DiskerHandleMoreRequests"<pos:position pos:line="48" pos:column="55"/></literal></expr></argument>,
                 <argument><expr><operator pos:line="49" pos:column="18">&amp;<pos:position pos:line="49" pos:column="23"/></operator><name><name pos:line="49" pos:column="19">IpcIoFile<pos:position pos:line="49" pos:column="28"/></name><operator pos:line="49" pos:column="28">::<pos:position pos:line="49" pos:column="30"/></operator><name pos:line="49" pos:column="30">DiskerHandleMoreRequests<pos:position pos:line="49" pos:column="54"/></name></name></expr></argument>,
                 <argument><expr><cast type="const" pos:line="50" pos:column="18">const_cast<argument_list type="generic" pos:line="50" pos:column="28">&lt;<argument><expr><name pos:line="50" pos:column="29">char<pos:position pos:line="50" pos:column="33"/></name><operator pos:line="50" pos:column="33">*<pos:position pos:line="50" pos:column="34"/></operator></expr></argument>&gt;<pos:position pos:line="50" pos:column="38"/></argument_list><argument_list pos:line="50" pos:column="35">(<argument><expr><literal type="string" pos:line="50" pos:column="36">"rate limiting"<pos:position pos:line="50" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="52"/></argument_list></cast></expr></argument>,
                 <argument><expr><name pos:line="51" pos:column="18">toSpend<pos:position pos:line="51" pos:column="25"/></name><operator pos:line="51" pos:column="25">/<pos:position pos:line="51" pos:column="26"/></operator><literal type="number" pos:line="51" pos:column="26">1e3<pos:position pos:line="51" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="51" pos:column="31">0<pos:position pos:line="51" pos:column="32"/></literal></expr></argument>, <argument><expr><literal type="boolean" pos:line="51" pos:column="34">false<pos:position pos:line="51" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><name pos:line="52" pos:column="9">DiskerHandleMoreRequestsScheduled<pos:position pos:line="52" pos:column="42"/></name> <operator pos:line="52" pos:column="43">=<pos:position pos:line="52" pos:column="44"/></operator> <literal type="boolean" pos:line="52" pos:column="45">true<pos:position pos:line="52" pos:column="49"/></literal></expr>;<pos:position pos:line="52" pos:column="50"/></expr_stmt>
        <return pos:line="53" pos:column="9">return <expr><literal type="boolean" pos:line="53" pos:column="16">true<pos:position pos:line="53" pos:column="20"/></literal></expr>;<pos:position pos:line="53" pos:column="21"/></return>
    }<pos:position pos:line="54" pos:column="6"/></block></then> <elseif pos:line="54" pos:column="7">else <if pos:line="54" pos:column="12">if <condition pos:line="54" pos:column="15">(<expr><name pos:line="54" pos:column="16">balance<pos:position pos:line="54" pos:column="23"/></name> <operator pos:line="54" pos:column="24">&lt;<pos:position pos:line="54" pos:column="28"/></operator> <operator pos:line="54" pos:column="26">-<pos:position pos:line="54" pos:column="27"/></operator><name pos:line="54" pos:column="27">maxImbalance<pos:position pos:line="54" pos:column="39"/></name></expr>)<pos:position pos:line="54" pos:column="40"/></condition><then pos:line="54" pos:column="40"> <block pos:line="54" pos:column="41">{
        <comment type="line" pos:line="55" pos:column="9">// do not owe "too much" to avoid "too large" bursts of I/O</comment>
        <expr_stmt><expr><name pos:line="56" pos:column="9">balance<pos:position pos:line="56" pos:column="16"/></name> <operator pos:line="56" pos:column="17">=<pos:position pos:line="56" pos:column="18"/></operator> <operator pos:line="56" pos:column="19">-<pos:position pos:line="56" pos:column="20"/></operator><name pos:line="56" pos:column="20">maxImbalance<pos:position pos:line="56" pos:column="32"/></name></expr>;<pos:position pos:line="56" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="57" pos:column="6"/></block></then></if></elseif></if>

    <return pos:line="59" pos:column="5">return <expr><literal type="boolean" pos:line="59" pos:column="12">false<pos:position pos:line="59" pos:column="17"/></literal></expr>;<pos:position pos:line="59" pos:column="18"/></return>
}<pos:position pos:line="60" pos:column="2"/></block></function></unit>
