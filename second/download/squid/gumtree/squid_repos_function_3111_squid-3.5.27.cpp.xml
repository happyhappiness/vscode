<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3111_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">StoreEntry<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">trimMemory<pos:position pos:line="2" pos:column="23"/></name></name><parameter_list pos:line="2" pos:column="23">(<parameter><decl><type><specifier pos:line="2" pos:column="24">const<pos:position pos:line="2" pos:column="29"/></specifier> <name pos:line="2" pos:column="30">bool<pos:position pos:line="2" pos:column="34"/></name></type> <name pos:line="2" pos:column="35">preserveSwappable<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="53"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/*
     * DPW 2007-05-09
     * Bug #1943.  We must not let go any data for IN_MEMORY
     * objects.  We have to wait until the mem_status changes.
     */</comment>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">mem_status<pos:position pos:line="9" pos:column="19"/></name> <operator pos:line="9" pos:column="20">==<pos:position pos:line="9" pos:column="22"/></operator> <name pos:line="9" pos:column="23">IN_MEMORY<pos:position pos:line="9" pos:column="32"/></name></expr>)<pos:position pos:line="9" pos:column="33"/></condition><then pos:line="9" pos:column="33">
        <block type="pseudo"><return pos:line="10" pos:column="9">return;<pos:position pos:line="10" pos:column="16"/></return></block></then></if>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><call><name pos:line="12" pos:column="9">EBIT_TEST<pos:position pos:line="12" pos:column="18"/></name><argument_list pos:line="12" pos:column="18">(<argument><expr><name pos:line="12" pos:column="19">flags<pos:position pos:line="12" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="26">ENTRY_SPECIAL<pos:position pos:line="12" pos:column="39"/></name></expr></argument>)<pos:position pos:line="12" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="41"/></condition><then pos:line="12" pos:column="41">
        <block type="pseudo"><return pos:line="13" pos:column="9">return;<pos:position pos:line="13" pos:column="16"/></return></block></then></if> <comment type="line" pos:line="13" pos:column="17">// cannot trim because we do not load them again</comment>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">preserveSwappable<pos:position pos:line="15" pos:column="26"/></name></expr>)<pos:position pos:line="15" pos:column="27"/></condition><then pos:line="15" pos:column="27">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="16" pos:column="9">mem_obj<pos:position pos:line="16" pos:column="16"/></name><operator pos:line="16" pos:column="16">-&gt;<pos:position pos:line="16" pos:column="21"/></operator><name pos:line="16" pos:column="18">trimSwappable<pos:position pos:line="16" pos:column="31"/></name></name><argument_list pos:line="16" pos:column="31">()<pos:position pos:line="16" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="34"/></expr_stmt></block></then>
    <else pos:line="17" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="18" pos:column="9">mem_obj<pos:position pos:line="18" pos:column="16"/></name><operator pos:line="18" pos:column="16">-&gt;<pos:position pos:line="18" pos:column="21"/></operator><name pos:line="18" pos:column="18">trimUnSwappable<pos:position pos:line="18" pos:column="33"/></name></name><argument_list pos:line="18" pos:column="33">()<pos:position pos:line="18" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="36"/></expr_stmt></block></else></if>

    <expr_stmt><expr><call><name pos:line="20" pos:column="5">debugs<pos:position pos:line="20" pos:column="11"/></name><argument_list pos:line="20" pos:column="11">(<argument><expr><literal type="number" pos:line="20" pos:column="12">88<pos:position pos:line="20" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="16">7<pos:position pos:line="20" pos:column="17"/></literal></expr></argument>, <argument><expr><operator pos:line="20" pos:column="19">*<pos:position pos:line="20" pos:column="20"/></operator><name pos:line="20" pos:column="20">this<pos:position pos:line="20" pos:column="24"/></name> <operator pos:line="20" pos:column="25">&lt;&lt;<pos:position pos:line="20" pos:column="33"/></operator> <literal type="string" pos:line="20" pos:column="28">" inmem_lo="<pos:position pos:line="20" pos:column="40"/></literal> <operator pos:line="20" pos:column="41">&lt;&lt;<pos:position pos:line="20" pos:column="49"/></operator> <name><name pos:line="20" pos:column="44">mem_obj<pos:position pos:line="20" pos:column="51"/></name><operator pos:line="20" pos:column="51">-&gt;<pos:position pos:line="20" pos:column="56"/></operator><name pos:line="20" pos:column="53">inmem_lo<pos:position pos:line="20" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="63"/></expr_stmt>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
