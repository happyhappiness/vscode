<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1348_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">icpUdpSendQueue<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name pos:line="2" pos:column="17">int<pos:position pos:line="2" pos:column="20"/></name></type> <name pos:line="2" pos:column="21">fd<pos:position pos:line="2" pos:column="23"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="25">void<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">unused<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="38"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">icpUdpData<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">q<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">x<pos:position pos:line="5" pos:column="10"/></name></decl>;<pos:position pos:line="5" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">delay<pos:position pos:line="6" pos:column="14"/></name></decl>;<pos:position pos:line="6" pos:column="15"/></decl_stmt>

    <while pos:line="8" pos:column="5">while <condition pos:line="8" pos:column="11">(<expr><operator pos:line="8" pos:column="12">(<pos:position pos:line="8" pos:column="13"/></operator><name pos:line="8" pos:column="13">q<pos:position pos:line="8" pos:column="14"/></name> <operator pos:line="8" pos:column="15">=<pos:position pos:line="8" pos:column="16"/></operator> <name pos:line="8" pos:column="17">IcpQueueHead<pos:position pos:line="8" pos:column="29"/></name><operator pos:line="8" pos:column="29">)<pos:position pos:line="8" pos:column="30"/></operator> <operator pos:line="8" pos:column="31">!=<pos:position pos:line="8" pos:column="33"/></operator> <name pos:line="8" pos:column="34">NULL<pos:position pos:line="8" pos:column="38"/></name></expr>)<pos:position pos:line="8" pos:column="39"/></condition> <block pos:line="8" pos:column="40">{
        <expr_stmt><expr><name pos:line="9" pos:column="9">delay<pos:position pos:line="9" pos:column="14"/></name> <operator pos:line="9" pos:column="15">=<pos:position pos:line="9" pos:column="16"/></operator> <call><name pos:line="9" pos:column="17">tvSubUsec<pos:position pos:line="9" pos:column="26"/></name><argument_list pos:line="9" pos:column="26">(<argument><expr><name><name pos:line="9" pos:column="27">q<pos:position pos:line="9" pos:column="28"/></name><operator pos:line="9" pos:column="28">-&gt;<pos:position pos:line="9" pos:column="33"/></operator><name pos:line="9" pos:column="30">queue_time<pos:position pos:line="9" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="42">current_time<pos:position pos:line="9" pos:column="54"/></name></expr></argument>)<pos:position pos:line="9" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="56"/></expr_stmt>
        <comment type="block" pos:line="10" pos:column="9">/* increment delay to prevent looping */</comment>
        <expr_stmt><expr><name pos:line="11" pos:column="9">x<pos:position pos:line="11" pos:column="10"/></name> <operator pos:line="11" pos:column="11">=<pos:position pos:line="11" pos:column="12"/></operator> <call><name pos:line="11" pos:column="13">icpUdpSend<pos:position pos:line="11" pos:column="23"/></name><argument_list pos:line="11" pos:column="23">(<argument><expr><name pos:line="11" pos:column="24">fd<pos:position pos:line="11" pos:column="26"/></name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="28">q<pos:position pos:line="11" pos:column="29"/></name><operator pos:line="11" pos:column="29">-&gt;<pos:position pos:line="11" pos:column="34"/></operator><name pos:line="11" pos:column="31">address<pos:position pos:line="11" pos:column="38"/></name></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="40">(<pos:position pos:line="11" pos:column="41"/></operator><name pos:line="11" pos:column="41">icp_common_t<pos:position pos:line="11" pos:column="53"/></name> <operator pos:line="11" pos:column="54">*<pos:position pos:line="11" pos:column="55"/></operator><operator pos:line="11" pos:column="55">)<pos:position pos:line="11" pos:column="56"/></operator> <name><name pos:line="11" pos:column="57">q<pos:position pos:line="11" pos:column="58"/></name><operator pos:line="11" pos:column="58">-&gt;<pos:position pos:line="11" pos:column="63"/></operator><name pos:line="11" pos:column="60">msg<pos:position pos:line="11" pos:column="63"/></name></name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="65">q<pos:position pos:line="11" pos:column="66"/></name><operator pos:line="11" pos:column="66">-&gt;<pos:position pos:line="11" pos:column="71"/></operator><name pos:line="11" pos:column="68">logcode<pos:position pos:line="11" pos:column="75"/></name></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="77">++<pos:position pos:line="11" pos:column="79"/></operator><name pos:line="11" pos:column="79">delay<pos:position pos:line="11" pos:column="84"/></name></expr></argument>)<pos:position pos:line="11" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="86"/></expr_stmt>
        <expr_stmt><expr><name pos:line="12" pos:column="9">IcpQueueHead<pos:position pos:line="12" pos:column="21"/></name> <operator pos:line="12" pos:column="22">=<pos:position pos:line="12" pos:column="23"/></operator> <name><name pos:line="12" pos:column="24">q<pos:position pos:line="12" pos:column="25"/></name><operator pos:line="12" pos:column="25">-&gt;<pos:position pos:line="12" pos:column="30"/></operator><name pos:line="12" pos:column="27">next<pos:position pos:line="12" pos:column="31"/></name></name></expr>;<pos:position pos:line="12" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">safe_free<pos:position pos:line="13" pos:column="18"/></name><argument_list pos:line="13" pos:column="18">(<argument><expr><name pos:line="13" pos:column="19">q<pos:position pos:line="13" pos:column="20"/></name></expr></argument>)<pos:position pos:line="13" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="22"/></expr_stmt>

        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">x<pos:position pos:line="15" pos:column="14"/></name> <operator pos:line="15" pos:column="15">&lt;<pos:position pos:line="15" pos:column="19"/></operator> <literal type="number" pos:line="15" pos:column="17">0<pos:position pos:line="15" pos:column="18"/></literal></expr>)<pos:position pos:line="15" pos:column="19"/></condition><then pos:line="15" pos:column="19">
            <block type="pseudo"><break pos:line="16" pos:column="13">break;<pos:position pos:line="16" pos:column="19"/></break></block></then></if>
    }<pos:position pos:line="17" pos:column="6"/></block></while>
}<pos:position pos:line="18" pos:column="2"/></block></function></unit>
