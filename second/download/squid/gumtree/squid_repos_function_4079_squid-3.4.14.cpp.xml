<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4079_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Icap<pos:position pos:line="1" pos:column="22"/></name><operator pos:line="1" pos:column="22">::<pos:position pos:line="1" pos:column="24"/></operator><name pos:line="1" pos:column="24">ModXact<pos:position pos:line="1" pos:column="31"/></name><operator pos:line="1" pos:column="31">::<pos:position pos:line="1" pos:column="33"/></operator><name pos:line="1" pos:column="33">decideOnParsingBody<pos:position pos:line="1" pos:column="52"/></name></name><parameter_list pos:line="1" pos:column="52">()<pos:position pos:line="1" pos:column="54"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <if pos:line="3" pos:column="5">if <condition pos:line="3" pos:column="8">(<expr><call><name pos:line="3" pos:column="9">gotEncapsulated<pos:position pos:line="3" pos:column="24"/></name><argument_list pos:line="3" pos:column="24">(<argument><expr><literal type="string" pos:line="3" pos:column="25">"res-body"<pos:position pos:line="3" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="36"/></argument_list></call> <operator pos:line="3" pos:column="37">||<pos:position pos:line="3" pos:column="39"/></operator> <call><name pos:line="3" pos:column="40">gotEncapsulated<pos:position pos:line="3" pos:column="55"/></name><argument_list pos:line="3" pos:column="55">(<argument><expr><literal type="string" pos:line="3" pos:column="56">"req-body"<pos:position pos:line="3" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="3" pos:column="68"/></condition><then pos:line="3" pos:column="68"> <block pos:line="3" pos:column="69">{
        <expr_stmt><expr><call><name pos:line="4" pos:column="9">debugs<pos:position pos:line="4" pos:column="15"/></name><argument_list pos:line="4" pos:column="15">(<argument><expr><literal type="number" pos:line="4" pos:column="16">93<pos:position pos:line="4" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="20">5<pos:position pos:line="4" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="23">HERE<pos:position pos:line="4" pos:column="27"/></name> <operator pos:line="4" pos:column="28">&lt;&lt;<pos:position pos:line="4" pos:column="36"/></operator> <literal type="string" pos:line="4" pos:column="31">"expecting a body"<pos:position pos:line="4" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="51"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="5" pos:column="9">state<pos:position pos:line="5" pos:column="14"/></name><operator pos:line="5" pos:column="14">.<pos:position pos:line="5" pos:column="15"/></operator><name pos:line="5" pos:column="15">parsing<pos:position pos:line="5" pos:column="22"/></name></name> <operator pos:line="5" pos:column="23">=<pos:position pos:line="5" pos:column="24"/></operator> <name><name pos:line="5" pos:column="25">State<pos:position pos:line="5" pos:column="30"/></name><operator pos:line="5" pos:column="30">::<pos:position pos:line="5" pos:column="32"/></operator><name pos:line="5" pos:column="32">psBody<pos:position pos:line="5" pos:column="38"/></name></name></expr>;<pos:position pos:line="5" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><name pos:line="6" pos:column="9">replyHttpBodySize<pos:position pos:line="6" pos:column="26"/></name> <operator pos:line="6" pos:column="27">=<pos:position pos:line="6" pos:column="28"/></operator> <literal type="number" pos:line="6" pos:column="29">0<pos:position pos:line="6" pos:column="30"/></literal></expr>;<pos:position pos:line="6" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><name pos:line="7" pos:column="9">bodyParser<pos:position pos:line="7" pos:column="19"/></name> <operator pos:line="7" pos:column="20">=<pos:position pos:line="7" pos:column="21"/></operator> <operator pos:line="7" pos:column="22">new<pos:position pos:line="7" pos:column="25"/></operator> <name pos:line="7" pos:column="26">ChunkedCodingParser<pos:position pos:line="7" pos:column="45"/></name></expr>;<pos:position pos:line="7" pos:column="46"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">makeAdaptedBodyPipe<pos:position pos:line="8" pos:column="28"/></name><argument_list pos:line="8" pos:column="28">(<argument><expr><literal type="string" pos:line="8" pos:column="29">"adapted response from the ICAP server"<pos:position pos:line="8" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="70"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">Must<pos:position pos:line="9" pos:column="13"/></name><argument_list pos:line="9" pos:column="13">(<argument><expr><name><name pos:line="9" pos:column="14">state<pos:position pos:line="9" pos:column="19"/></name><operator pos:line="9" pos:column="19">.<pos:position pos:line="9" pos:column="20"/></operator><name pos:line="9" pos:column="20">sending<pos:position pos:line="9" pos:column="27"/></name></name> <operator pos:line="9" pos:column="28">==<pos:position pos:line="9" pos:column="30"/></operator> <name><name pos:line="9" pos:column="31">State<pos:position pos:line="9" pos:column="36"/></name><operator pos:line="9" pos:column="36">::<pos:position pos:line="9" pos:column="38"/></operator><name pos:line="9" pos:column="38">sendingAdapted<pos:position pos:line="9" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="54"/></expr_stmt>
    }<pos:position pos:line="10" pos:column="6"/></block></then> <else pos:line="10" pos:column="7">else <block pos:line="10" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">debugs<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><literal type="number" pos:line="11" pos:column="16">93<pos:position pos:line="11" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="20">5<pos:position pos:line="11" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="23">HERE<pos:position pos:line="11" pos:column="27"/></name> <operator pos:line="11" pos:column="28">&lt;&lt;<pos:position pos:line="11" pos:column="36"/></operator> <literal type="string" pos:line="11" pos:column="31">"not expecting a body"<pos:position pos:line="11" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="55"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">stopParsing<pos:position pos:line="12" pos:column="20"/></name><argument_list pos:line="12" pos:column="20">()<pos:position pos:line="12" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">stopSending<pos:position pos:line="13" pos:column="20"/></name><argument_list pos:line="13" pos:column="20">(<argument><expr><literal type="boolean" pos:line="13" pos:column="21">true<pos:position pos:line="13" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></else></if>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
