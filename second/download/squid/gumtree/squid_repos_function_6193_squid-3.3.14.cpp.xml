<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6193_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ipc<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">Coordinator<pos:position pos:line="2" pos:column="17"/></name><operator pos:line="2" pos:column="17">::<pos:position pos:line="2" pos:column="19"/></operator><name pos:line="2" pos:column="19">handleCacheMgrRequest<pos:position pos:line="2" pos:column="40"/></name></name><parameter_list pos:line="2" pos:column="40">(<parameter><decl><type><specifier pos:line="2" pos:column="41">const<pos:position pos:line="2" pos:column="46"/></specifier> <name><name pos:line="2" pos:column="47">Mgr<pos:position pos:line="2" pos:column="50"/></name><operator pos:line="2" pos:column="50">::<pos:position pos:line="2" pos:column="52"/></operator><name pos:line="2" pos:column="52">Request<pos:position pos:line="2" pos:column="59"/></name></name><modifier pos:line="2" pos:column="59">&amp;<pos:position pos:line="2" pos:column="64"/></modifier></type> <name pos:line="2" pos:column="61">request<pos:position pos:line="2" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="69"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">54<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">4<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="19">HERE<pos:position pos:line="4" pos:column="23"/></name></expr></argument>)<pos:position pos:line="4" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="25"/></expr_stmt>

    <try pos:line="6" pos:column="5">try <block pos:line="6" pos:column="9">{
        <decl_stmt><decl><type><name><name pos:line="7" pos:column="9">Mgr<pos:position pos:line="7" pos:column="12"/></name><operator pos:line="7" pos:column="12">::<pos:position pos:line="7" pos:column="14"/></operator><name pos:line="7" pos:column="14">Action<pos:position pos:line="7" pos:column="20"/></name><operator pos:line="7" pos:column="20">::<pos:position pos:line="7" pos:column="22"/></operator><name pos:line="7" pos:column="22">Pointer<pos:position pos:line="7" pos:column="29"/></name></name></type> <name pos:line="7" pos:column="30">action<pos:position pos:line="7" pos:column="36"/></name> <init pos:line="7" pos:column="37">=
            <expr><call><name><name pos:line="8" pos:column="13">CacheManager<pos:position pos:line="8" pos:column="25"/></name><operator pos:line="8" pos:column="25">::<pos:position pos:line="8" pos:column="27"/></operator><name pos:line="8" pos:column="27">GetInstance<pos:position pos:line="8" pos:column="38"/></name></name><argument_list pos:line="8" pos:column="38">()<pos:position pos:line="8" pos:column="40"/></argument_list></call><operator pos:line="8" pos:column="40">-&gt;<pos:position pos:line="8" pos:column="45"/></operator><call><name pos:line="8" pos:column="42">createRequestedAction<pos:position pos:line="8" pos:column="63"/></name><argument_list pos:line="8" pos:column="63">(<argument><expr><name><name pos:line="8" pos:column="64">request<pos:position pos:line="8" pos:column="71"/></name><operator pos:line="8" pos:column="71">.<pos:position pos:line="8" pos:column="72"/></operator><name pos:line="8" pos:column="72">params<pos:position pos:line="8" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="79"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="80"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="9" pos:column="9">AsyncJob<pos:position pos:line="9" pos:column="17"/></name><operator pos:line="9" pos:column="17">::<pos:position pos:line="9" pos:column="19"/></operator><name pos:line="9" pos:column="19">Start<pos:position pos:line="9" pos:column="24"/></name></name><argument_list pos:line="9" pos:column="24">(<argument><expr><operator pos:line="9" pos:column="25">new<pos:position pos:line="9" pos:column="28"/></operator> <call><name><name pos:line="9" pos:column="29">Mgr<pos:position pos:line="9" pos:column="32"/></name><operator pos:line="9" pos:column="32">::<pos:position pos:line="9" pos:column="34"/></operator><name pos:line="9" pos:column="34">Inquirer<pos:position pos:line="9" pos:column="42"/></name></name><argument_list pos:line="9" pos:column="42">(<argument><expr><name pos:line="9" pos:column="43">action<pos:position pos:line="9" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="51">request<pos:position pos:line="9" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="60">strands_<pos:position pos:line="9" pos:column="68"/></name></expr></argument>)<pos:position pos:line="9" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="71"/></expr_stmt>
    }<pos:position pos:line="10" pos:column="6"/></block> <catch pos:line="10" pos:column="7">catch <parameter_list pos:line="10" pos:column="13">(<parameter><decl><type><specifier pos:line="10" pos:column="14">const<pos:position pos:line="10" pos:column="19"/></specifier> <name><name pos:line="10" pos:column="20">std<pos:position pos:line="10" pos:column="23"/></name><operator pos:line="10" pos:column="23">::<pos:position pos:line="10" pos:column="25"/></operator><name pos:line="10" pos:column="25">exception<pos:position pos:line="10" pos:column="34"/></name></name> <modifier pos:line="10" pos:column="35">&amp;<pos:position pos:line="10" pos:column="40"/></modifier></type><name pos:line="10" pos:column="36">ex<pos:position pos:line="10" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="10" pos:column="39"/></parameter_list> <block pos:line="10" pos:column="40">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">debugs<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><literal type="number" pos:line="11" pos:column="16">54<pos:position pos:line="11" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="20">DBG_IMPORTANT<pos:position pos:line="11" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="35">"BUG: cannot aggregate mgr:"<pos:position pos:line="11" pos:column="63"/></literal> <operator pos:line="11" pos:column="64">&lt;&lt;<pos:position pos:line="11" pos:column="72"/></operator>
               <name><name pos:line="12" pos:column="16">request<pos:position pos:line="12" pos:column="23"/></name><operator pos:line="12" pos:column="23">.<pos:position pos:line="12" pos:column="24"/></operator><name pos:line="12" pos:column="24">params<pos:position pos:line="12" pos:column="30"/></name><operator pos:line="12" pos:column="30">.<pos:position pos:line="12" pos:column="31"/></operator><name pos:line="12" pos:column="31">actionName<pos:position pos:line="12" pos:column="41"/></name></name> <operator pos:line="12" pos:column="42">&lt;&lt;<pos:position pos:line="12" pos:column="50"/></operator> <literal type="string" pos:line="12" pos:column="45">": "<pos:position pos:line="12" pos:column="49"/></literal> <operator pos:line="12" pos:column="50">&lt;&lt;<pos:position pos:line="12" pos:column="58"/></operator> <call><name><name pos:line="12" pos:column="53">ex<pos:position pos:line="12" pos:column="55"/></name><operator pos:line="12" pos:column="55">.<pos:position pos:line="12" pos:column="56"/></operator><name pos:line="12" pos:column="56">what<pos:position pos:line="12" pos:column="60"/></name></name><argument_list pos:line="12" pos:column="60">()<pos:position pos:line="12" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="64"/></expr_stmt>
        <comment type="line" pos:line="13" pos:column="9">// TODO: Avoid half-baked Connections or teach them how to close.</comment>
        <expr_stmt><expr><call><name><operator pos:line="14" pos:column="9">::<pos:position pos:line="14" pos:column="11"/></operator><name pos:line="14" pos:column="11">close<pos:position pos:line="14" pos:column="16"/></name></name><argument_list pos:line="14" pos:column="16">(<argument><expr><name><name pos:line="14" pos:column="17">request<pos:position pos:line="14" pos:column="24"/></name><operator pos:line="14" pos:column="24">.<pos:position pos:line="14" pos:column="25"/></operator><name pos:line="14" pos:column="25">conn<pos:position pos:line="14" pos:column="29"/></name><operator pos:line="14" pos:column="29">-&gt;<pos:position pos:line="14" pos:column="34"/></operator><name pos:line="14" pos:column="31">fd<pos:position pos:line="14" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="15" pos:column="9">request<pos:position pos:line="15" pos:column="16"/></name><operator pos:line="15" pos:column="16">.<pos:position pos:line="15" pos:column="17"/></operator><name pos:line="15" pos:column="17">conn<pos:position pos:line="15" pos:column="21"/></name><operator pos:line="15" pos:column="21">-&gt;<pos:position pos:line="15" pos:column="26"/></operator><name pos:line="15" pos:column="23">fd<pos:position pos:line="15" pos:column="25"/></name></name> <operator pos:line="15" pos:column="26">=<pos:position pos:line="15" pos:column="27"/></operator> <operator pos:line="15" pos:column="28">-<pos:position pos:line="15" pos:column="29"/></operator><literal type="number" pos:line="15" pos:column="29">1<pos:position pos:line="15" pos:column="30"/></literal></expr>;<pos:position pos:line="15" pos:column="31"/></expr_stmt>
        <return pos:line="16" pos:column="9">return;<pos:position pos:line="16" pos:column="16"/></return> <comment type="line" pos:line="16" pos:column="17">// the worker will timeout and close</comment>
    }<pos:position pos:line="17" pos:column="6"/></block></catch></try>

    <comment type="line" pos:line="19" pos:column="5">// Let the strand know that we are now responsible for handling the request</comment>
    <decl_stmt><decl><type><name><name pos:line="20" pos:column="5">Mgr<pos:position pos:line="20" pos:column="8"/></name><operator pos:line="20" pos:column="8">::<pos:position pos:line="20" pos:column="10"/></operator><name pos:line="20" pos:column="10">Response<pos:position pos:line="20" pos:column="18"/></name></name></type> <name pos:line="20" pos:column="19">response<pos:position pos:line="20" pos:column="27"/></name><argument_list pos:line="20" pos:column="27">(<argument><expr><name><name pos:line="20" pos:column="28">request<pos:position pos:line="20" pos:column="35"/></name><operator pos:line="20" pos:column="35">.<pos:position pos:line="20" pos:column="36"/></operator><name pos:line="20" pos:column="36">requestId<pos:position pos:line="20" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="46"/></argument_list></decl>;<pos:position pos:line="20" pos:column="47"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="21" pos:column="5">TypedMsgHdr<pos:position pos:line="21" pos:column="16"/></name></type> <name pos:line="21" pos:column="17">message<pos:position pos:line="21" pos:column="24"/></name></decl>;<pos:position pos:line="21" pos:column="25"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="22" pos:column="5">response<pos:position pos:line="22" pos:column="13"/></name><operator pos:line="22" pos:column="13">.<pos:position pos:line="22" pos:column="14"/></operator><name pos:line="22" pos:column="14">pack<pos:position pos:line="22" pos:column="18"/></name></name><argument_list pos:line="22" pos:column="18">(<argument><expr><name pos:line="22" pos:column="19">message<pos:position pos:line="22" pos:column="26"/></name></expr></argument>)<pos:position pos:line="22" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">SendMessage<pos:position pos:line="23" pos:column="16"/></name><argument_list pos:line="23" pos:column="16">(<argument><expr><call><name pos:line="23" pos:column="17">MakeAddr<pos:position pos:line="23" pos:column="25"/></name><argument_list pos:line="23" pos:column="25">(<argument><expr><name pos:line="23" pos:column="26">strandAddrPfx<pos:position pos:line="23" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="41">request<pos:position pos:line="23" pos:column="48"/></name><operator pos:line="23" pos:column="48">.<pos:position pos:line="23" pos:column="49"/></operator><name pos:line="23" pos:column="49">requestorId<pos:position pos:line="23" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="23" pos:column="63">message<pos:position pos:line="23" pos:column="70"/></name></expr></argument>)<pos:position pos:line="23" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="72"/></expr_stmt>

}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
