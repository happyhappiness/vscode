<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4176_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ACL<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">matches<pos:position pos:line="2" pos:column="13"/></name></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><name pos:line="2" pos:column="14">ACLChecklist<pos:position pos:line="2" pos:column="26"/></name> <modifier pos:line="2" pos:column="27">*<pos:position pos:line="2" pos:column="28"/></modifier></type><name pos:line="2" pos:column="28">checklist<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="38"/></parameter_list> <specifier pos:line="2" pos:column="39">const<pos:position pos:line="2" pos:column="44"/></specifier>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">PROF_start<pos:position pos:line="4" pos:column="15"/></name><argument_list pos:line="4" pos:column="15">(<argument><expr><name pos:line="4" pos:column="16">ACL_matches<pos:position pos:line="4" pos:column="27"/></name></expr></argument>)<pos:position pos:line="4" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">debugs<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><literal type="number" pos:line="5" pos:column="12">28<pos:position pos:line="5" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="16">5<pos:position pos:line="5" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="19">"checking "<pos:position pos:line="5" pos:column="30"/></literal> <operator pos:line="5" pos:column="31">&lt;&lt;<pos:position pos:line="5" pos:column="39"/></operator> <name pos:line="5" pos:column="34">name<pos:position pos:line="5" pos:column="38"/></name></expr></argument>)<pos:position pos:line="5" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="40"/></expr_stmt>

    <comment type="line" pos:line="7" pos:column="5">// XXX: AclMatchedName does not contain a matched ACL name when the acl</comment>
    <comment type="line" pos:line="8" pos:column="5">// does not match. It contains the last (usually leaf) ACL name checked</comment>
    <comment type="line" pos:line="9" pos:column="5">// (or is NULL if no ACLs were checked).</comment>
    <expr_stmt><expr><name pos:line="10" pos:column="5">AclMatchedName<pos:position pos:line="10" pos:column="19"/></name> <operator pos:line="10" pos:column="20">=<pos:position pos:line="10" pos:column="21"/></operator> <name pos:line="10" pos:column="22">name<pos:position pos:line="10" pos:column="26"/></name></expr>;<pos:position pos:line="10" pos:column="27"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="12" pos:column="5">int<pos:position pos:line="12" pos:column="8"/></name></type> <name pos:line="12" pos:column="9">result<pos:position pos:line="12" pos:column="15"/></name> <init pos:line="12" pos:column="16">= <expr><literal type="number" pos:line="12" pos:column="18">0<pos:position pos:line="12" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="20"/></decl_stmt>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><operator pos:line="13" pos:column="9">!<pos:position pos:line="13" pos:column="10"/></operator><call><name><name pos:line="13" pos:column="10">checklist<pos:position pos:line="13" pos:column="19"/></name><operator pos:line="13" pos:column="19">-&gt;<pos:position pos:line="13" pos:column="24"/></operator><name pos:line="13" pos:column="21">hasAle<pos:position pos:line="13" pos:column="27"/></name></name><argument_list pos:line="13" pos:column="27">()<pos:position pos:line="13" pos:column="29"/></argument_list></call> <operator pos:line="13" pos:column="30">&amp;&amp;<pos:position pos:line="13" pos:column="40"/></operator> <call><name pos:line="13" pos:column="33">requiresAle<pos:position pos:line="13" pos:column="44"/></name><argument_list pos:line="13" pos:column="44">()<pos:position pos:line="13" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="47"/></condition><then pos:line="13" pos:column="47"> <block pos:line="13" pos:column="48">{
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">debugs<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><literal type="number" pos:line="14" pos:column="16">28<pos:position pos:line="14" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="20">DBG_IMPORTANT<pos:position pos:line="14" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="35">"WARNING: "<pos:position pos:line="14" pos:column="46"/></literal> <operator pos:line="14" pos:column="47">&lt;&lt;<pos:position pos:line="14" pos:column="55"/></operator> <name pos:line="14" pos:column="50">name<pos:position pos:line="14" pos:column="54"/></name> <operator pos:line="14" pos:column="55">&lt;&lt;<pos:position pos:line="14" pos:column="63"/></operator> <literal type="string" pos:line="14" pos:column="58">" ACL is used in "<pos:position pos:line="14" pos:column="76"/></literal> <operator pos:line="14" pos:column="77">&lt;&lt;<pos:position pos:line="14" pos:column="85"/></operator>
               <literal type="string" pos:line="15" pos:column="16">"context without an ALE state. Assuming mismatch."<pos:position pos:line="15" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="68"/></expr_stmt>
    }<pos:position pos:line="16" pos:column="6"/></block></then> <elseif pos:line="16" pos:column="7">else <if pos:line="16" pos:column="12">if <condition pos:line="16" pos:column="15">(<expr><operator pos:line="16" pos:column="16">!<pos:position pos:line="16" pos:column="17"/></operator><call><name><name pos:line="16" pos:column="17">checklist<pos:position pos:line="16" pos:column="26"/></name><operator pos:line="16" pos:column="26">-&gt;<pos:position pos:line="16" pos:column="31"/></operator><name pos:line="16" pos:column="28">hasRequest<pos:position pos:line="16" pos:column="38"/></name></name><argument_list pos:line="16" pos:column="38">()<pos:position pos:line="16" pos:column="40"/></argument_list></call> <operator pos:line="16" pos:column="41">&amp;&amp;<pos:position pos:line="16" pos:column="51"/></operator> <call><name pos:line="16" pos:column="44">requiresRequest<pos:position pos:line="16" pos:column="59"/></name><argument_list pos:line="16" pos:column="59">()<pos:position pos:line="16" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="62"/></condition><then pos:line="16" pos:column="62"> <block pos:line="16" pos:column="63">{
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">debugs<pos:position pos:line="17" pos:column="15"/></name><argument_list pos:line="17" pos:column="15">(<argument><expr><literal type="number" pos:line="17" pos:column="16">28<pos:position pos:line="17" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="20">DBG_IMPORTANT<pos:position pos:line="17" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="35">"WARNING: "<pos:position pos:line="17" pos:column="46"/></literal> <operator pos:line="17" pos:column="47">&lt;&lt;<pos:position pos:line="17" pos:column="55"/></operator> <name pos:line="17" pos:column="50">name<pos:position pos:line="17" pos:column="54"/></name> <operator pos:line="17" pos:column="55">&lt;&lt;<pos:position pos:line="17" pos:column="63"/></operator> <literal type="string" pos:line="17" pos:column="58">" ACL is used in "<pos:position pos:line="17" pos:column="76"/></literal> <operator pos:line="17" pos:column="77">&lt;&lt;<pos:position pos:line="17" pos:column="85"/></operator>
               <literal type="string" pos:line="18" pos:column="16">"context without an HTTP request. Assuming mismatch."<pos:position pos:line="18" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="71"/></expr_stmt>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if></elseif> <elseif pos:line="19" pos:column="7">else <if pos:line="19" pos:column="12">if <condition pos:line="19" pos:column="15">(<expr><operator pos:line="19" pos:column="16">!<pos:position pos:line="19" pos:column="17"/></operator><call><name><name pos:line="19" pos:column="17">checklist<pos:position pos:line="19" pos:column="26"/></name><operator pos:line="19" pos:column="26">-&gt;<pos:position pos:line="19" pos:column="31"/></operator><name pos:line="19" pos:column="28">hasReply<pos:position pos:line="19" pos:column="36"/></name></name><argument_list pos:line="19" pos:column="36">()<pos:position pos:line="19" pos:column="38"/></argument_list></call> <operator pos:line="19" pos:column="39">&amp;&amp;<pos:position pos:line="19" pos:column="49"/></operator> <call><name pos:line="19" pos:column="42">requiresReply<pos:position pos:line="19" pos:column="55"/></name><argument_list pos:line="19" pos:column="55">()<pos:position pos:line="19" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="58"/></condition><then pos:line="19" pos:column="58"> <block pos:line="19" pos:column="59">{
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">debugs<pos:position pos:line="20" pos:column="15"/></name><argument_list pos:line="20" pos:column="15">(<argument><expr><literal type="number" pos:line="20" pos:column="16">28<pos:position pos:line="20" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="20">DBG_IMPORTANT<pos:position pos:line="20" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="35">"WARNING: "<pos:position pos:line="20" pos:column="46"/></literal> <operator pos:line="20" pos:column="47">&lt;&lt;<pos:position pos:line="20" pos:column="55"/></operator> <name pos:line="20" pos:column="50">name<pos:position pos:line="20" pos:column="54"/></name> <operator pos:line="20" pos:column="55">&lt;&lt;<pos:position pos:line="20" pos:column="63"/></operator> <literal type="string" pos:line="20" pos:column="58">" ACL is used in "<pos:position pos:line="20" pos:column="76"/></literal> <operator pos:line="20" pos:column="77">&lt;&lt;<pos:position pos:line="20" pos:column="85"/></operator>
               <literal type="string" pos:line="21" pos:column="16">"context without an HTTP response. Assuming mismatch."<pos:position pos:line="21" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="72"/></expr_stmt>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if></elseif> <else pos:line="22" pos:column="7">else <block pos:line="22" pos:column="12">{
        <comment type="line" pos:line="23" pos:column="9">// make sure the ALE has as much data as possible</comment>
        <if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><call><name pos:line="24" pos:column="13">requiresAle<pos:position pos:line="24" pos:column="24"/></name><argument_list pos:line="24" pos:column="24">()<pos:position pos:line="24" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="27"/></condition><then pos:line="24" pos:column="27">
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="25" pos:column="13">checklist<pos:position pos:line="25" pos:column="22"/></name><operator pos:line="25" pos:column="22">-&gt;<pos:position pos:line="25" pos:column="27"/></operator><name pos:line="25" pos:column="24">syncAle<pos:position pos:line="25" pos:column="31"/></name></name><argument_list pos:line="25" pos:column="31">()<pos:position pos:line="25" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="34"/></expr_stmt></block></then></if>

        <comment type="line" pos:line="27" pos:column="9">// have to cast because old match() API is missing const</comment>
        <expr_stmt><expr><name pos:line="28" pos:column="9">result<pos:position pos:line="28" pos:column="15"/></name> <operator pos:line="28" pos:column="16">=<pos:position pos:line="28" pos:column="17"/></operator> <cast type="const" pos:line="28" pos:column="18">const_cast<argument_list type="generic" pos:line="28" pos:column="28">&lt;<argument><expr><name pos:line="28" pos:column="29">ACL<pos:position pos:line="28" pos:column="32"/></name><operator pos:line="28" pos:column="32">*<pos:position pos:line="28" pos:column="33"/></operator></expr></argument>&gt;<pos:position pos:line="28" pos:column="37"/></argument_list><argument_list pos:line="28" pos:column="34">(<argument><expr><name pos:line="28" pos:column="35">this<pos:position pos:line="28" pos:column="39"/></name></expr></argument>)<pos:position pos:line="28" pos:column="40"/></argument_list></cast><operator pos:line="28" pos:column="40">-&gt;<pos:position pos:line="28" pos:column="45"/></operator><call><name pos:line="28" pos:column="42">match<pos:position pos:line="28" pos:column="47"/></name><argument_list pos:line="28" pos:column="47">(<argument><expr><name pos:line="28" pos:column="48">checklist<pos:position pos:line="28" pos:column="57"/></name></expr></argument>)<pos:position pos:line="28" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="59"/></expr_stmt>
    }<pos:position pos:line="29" pos:column="6"/></block></else></if>

    <decl_stmt><decl><type><specifier pos:line="31" pos:column="5">const<pos:position pos:line="31" pos:column="10"/></specifier> <name pos:line="31" pos:column="11">char<pos:position pos:line="31" pos:column="15"/></name> <modifier pos:line="31" pos:column="16">*<pos:position pos:line="31" pos:column="17"/></modifier></type><name pos:line="31" pos:column="17">extra<pos:position pos:line="31" pos:column="22"/></name> <init pos:line="31" pos:column="23">= <expr><ternary><condition><expr><call><name><name pos:line="31" pos:column="25">checklist<pos:position pos:line="31" pos:column="34"/></name><operator pos:line="31" pos:column="34">-&gt;<pos:position pos:line="31" pos:column="39"/></operator><name pos:line="31" pos:column="36">asyncInProgress<pos:position pos:line="31" pos:column="51"/></name></name><argument_list pos:line="31" pos:column="51">()<pos:position pos:line="31" pos:column="53"/></argument_list></call></expr> ?<pos:position pos:line="31" pos:column="55"/></condition><then pos:line="31" pos:column="55"> <expr><literal type="string" pos:line="31" pos:column="56">" async"<pos:position pos:line="31" pos:column="64"/></literal></expr> <pos:position pos:line="31" pos:column="65"/></then><else pos:line="31" pos:column="65">: <expr><literal type="string" pos:line="31" pos:column="67">""<pos:position pos:line="31" pos:column="69"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="31" pos:column="70"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">debugs<pos:position pos:line="32" pos:column="11"/></name><argument_list pos:line="32" pos:column="11">(<argument><expr><literal type="number" pos:line="32" pos:column="12">28<pos:position pos:line="32" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="16">3<pos:position pos:line="32" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="19">"checked: "<pos:position pos:line="32" pos:column="30"/></literal> <operator pos:line="32" pos:column="31">&lt;&lt;<pos:position pos:line="32" pos:column="39"/></operator> <name pos:line="32" pos:column="34">name<pos:position pos:line="32" pos:column="38"/></name> <operator pos:line="32" pos:column="39">&lt;&lt;<pos:position pos:line="32" pos:column="47"/></operator> <literal type="string" pos:line="32" pos:column="42">" = "<pos:position pos:line="32" pos:column="47"/></literal> <operator pos:line="32" pos:column="48">&lt;&lt;<pos:position pos:line="32" pos:column="56"/></operator> <name pos:line="32" pos:column="51">result<pos:position pos:line="32" pos:column="57"/></name> <operator pos:line="32" pos:column="58">&lt;&lt;<pos:position pos:line="32" pos:column="66"/></operator> <name pos:line="32" pos:column="61">extra<pos:position pos:line="32" pos:column="66"/></name></expr></argument>)<pos:position pos:line="32" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="68"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">PROF_stop<pos:position pos:line="33" pos:column="14"/></name><argument_list pos:line="33" pos:column="14">(<argument><expr><name pos:line="33" pos:column="15">ACL_matches<pos:position pos:line="33" pos:column="26"/></name></expr></argument>)<pos:position pos:line="33" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="28"/></expr_stmt>
    <return pos:line="34" pos:column="5">return <expr><name pos:line="34" pos:column="12">result<pos:position pos:line="34" pos:column="18"/></name> <operator pos:line="34" pos:column="19">==<pos:position pos:line="34" pos:column="21"/></operator> <literal type="number" pos:line="34" pos:column="22">1<pos:position pos:line="34" pos:column="23"/></literal></expr>;<pos:position pos:line="34" pos:column="24"/></return> <comment type="line" pos:line="34" pos:column="25">// true for match; false for everything else</comment>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
