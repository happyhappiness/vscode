<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6659_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Snmp<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">SendResponse<pos:position pos:line="2" pos:column="19"/></name></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name pos:line="2" pos:column="20">unsigned<pos:position pos:line="2" pos:column="28"/></name> <name pos:line="2" pos:column="29">int<pos:position pos:line="2" pos:column="32"/></name></type> <name pos:line="2" pos:column="33">requestId<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="44">const<pos:position pos:line="2" pos:column="49"/></specifier> <name pos:line="2" pos:column="50">Pdu<pos:position pos:line="2" pos:column="53"/></name><modifier pos:line="2" pos:column="53">&amp;<pos:position pos:line="2" pos:column="58"/></modifier></type> <name pos:line="2" pos:column="55">pdu<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="59"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">49<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">5<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="19">HERE<pos:position pos:line="4" pos:column="23"/></name></expr></argument>)<pos:position pos:line="4" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="25"/></expr_stmt>
    <comment type="line" pos:line="5" pos:column="5">// snmpAgentResponse() can modify arg</comment>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">Pdu<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">tmp<pos:position pos:line="6" pos:column="12"/></name> <init pos:line="6" pos:column="13">= <expr><name pos:line="6" pos:column="15">pdu<pos:position pos:line="6" pos:column="18"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="7" pos:column="5">Snmp<pos:position pos:line="7" pos:column="9"/></name><operator pos:line="7" pos:column="9">::<pos:position pos:line="7" pos:column="11"/></operator><name pos:line="7" pos:column="11">Response<pos:position pos:line="7" pos:column="19"/></name></name></type> <name pos:line="7" pos:column="20">response<pos:position pos:line="7" pos:column="28"/></name><argument_list pos:line="7" pos:column="28">(<argument><expr><name pos:line="7" pos:column="29">requestId<pos:position pos:line="7" pos:column="38"/></name></expr></argument>)<pos:position pos:line="7" pos:column="39"/></argument_list></decl>;<pos:position pos:line="7" pos:column="40"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">snmp_pdu<pos:position pos:line="8" pos:column="13"/></name><modifier pos:line="8" pos:column="13">*<pos:position pos:line="8" pos:column="14"/></modifier></type> <name pos:line="8" pos:column="15">response_pdu<pos:position pos:line="8" pos:column="27"/></name> <init pos:line="8" pos:column="28">= <expr><name pos:line="8" pos:column="30">NULL<pos:position pos:line="8" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="35"/></decl_stmt>
    <try pos:line="9" pos:column="5">try <block pos:line="9" pos:column="9">{
        <expr_stmt><expr><name pos:line="10" pos:column="9">response_pdu<pos:position pos:line="10" pos:column="21"/></name> <operator pos:line="10" pos:column="22">=<pos:position pos:line="10" pos:column="23"/></operator> <call><name pos:line="10" pos:column="24">snmpAgentResponse<pos:position pos:line="10" pos:column="41"/></name><argument_list pos:line="10" pos:column="41">(<argument><expr><operator pos:line="10" pos:column="42">&amp;<pos:position pos:line="10" pos:column="47"/></operator><name pos:line="10" pos:column="43">tmp<pos:position pos:line="10" pos:column="46"/></name></expr></argument>)<pos:position pos:line="10" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="48"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">Must<pos:position pos:line="11" pos:column="13"/></name><argument_list pos:line="11" pos:column="13">(<argument><expr><name pos:line="11" pos:column="14">response_pdu<pos:position pos:line="11" pos:column="26"/></name> <operator pos:line="11" pos:column="27">!=<pos:position pos:line="11" pos:column="29"/></operator> <name pos:line="11" pos:column="30">NULL<pos:position pos:line="11" pos:column="34"/></name></expr></argument>)<pos:position pos:line="11" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="12" pos:column="9">response<pos:position pos:line="12" pos:column="17"/></name><operator pos:line="12" pos:column="17">.<pos:position pos:line="12" pos:column="18"/></operator><name pos:line="12" pos:column="18">pdu<pos:position pos:line="12" pos:column="21"/></name></name> <operator pos:line="12" pos:column="22">=<pos:position pos:line="12" pos:column="23"/></operator> <cast type="static" pos:line="12" pos:column="24">static_cast<argument_list type="generic" pos:line="12" pos:column="35">&lt;<argument><expr><name pos:line="12" pos:column="36">Pdu<pos:position pos:line="12" pos:column="39"/></name><operator pos:line="12" pos:column="39">&amp;<pos:position pos:line="12" pos:column="44"/></operator></expr></argument>&gt;<pos:position pos:line="12" pos:column="44"/></argument_list><argument_list pos:line="12" pos:column="41">(<argument><expr><operator pos:line="12" pos:column="42">*<pos:position pos:line="12" pos:column="43"/></operator><name pos:line="12" pos:column="43">response_pdu<pos:position pos:line="12" pos:column="55"/></name></expr></argument>)<pos:position pos:line="12" pos:column="56"/></argument_list></cast></expr>;<pos:position pos:line="12" pos:column="57"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">snmp_free_pdu<pos:position pos:line="13" pos:column="22"/></name><argument_list pos:line="13" pos:column="22">(<argument><expr><name pos:line="13" pos:column="23">response_pdu<pos:position pos:line="13" pos:column="35"/></name></expr></argument>)<pos:position pos:line="13" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block> <catch pos:line="14" pos:column="7">catch <parameter_list pos:line="14" pos:column="13">(<parameter><decl><type><specifier pos:line="14" pos:column="14">const<pos:position pos:line="14" pos:column="19"/></specifier> <name><name pos:line="14" pos:column="20">std<pos:position pos:line="14" pos:column="23"/></name><operator pos:line="14" pos:column="23">::<pos:position pos:line="14" pos:column="25"/></operator><name pos:line="14" pos:column="25">exception<pos:position pos:line="14" pos:column="34"/></name></name><modifier pos:line="14" pos:column="34">&amp;<pos:position pos:line="14" pos:column="39"/></modifier></type> <name pos:line="14" pos:column="36">e<pos:position pos:line="14" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="14" pos:column="38"/></parameter_list> <block pos:line="14" pos:column="39">{
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">debugs<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><literal type="number" pos:line="15" pos:column="16">49<pos:position pos:line="15" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="20">DBG_CRITICAL<pos:position pos:line="15" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="34">HERE<pos:position pos:line="15" pos:column="38"/></name> <operator pos:line="15" pos:column="39">&lt;&lt;<pos:position pos:line="15" pos:column="47"/></operator> <call><name><name pos:line="15" pos:column="42">e<pos:position pos:line="15" pos:column="43"/></name><operator pos:line="15" pos:column="43">.<pos:position pos:line="15" pos:column="44"/></operator><name pos:line="15" pos:column="44">what<pos:position pos:line="15" pos:column="48"/></name></name><argument_list pos:line="15" pos:column="48">()<pos:position pos:line="15" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="15" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="16" pos:column="9">response<pos:position pos:line="16" pos:column="17"/></name><operator pos:line="16" pos:column="17">.<pos:position pos:line="16" pos:column="18"/></operator><name pos:line="16" pos:column="18">pdu<pos:position pos:line="16" pos:column="21"/></name><operator pos:line="16" pos:column="21">.<pos:position pos:line="16" pos:column="22"/></operator><name pos:line="16" pos:column="22">command<pos:position pos:line="16" pos:column="29"/></name></name> <operator pos:line="16" pos:column="30">=<pos:position pos:line="16" pos:column="31"/></operator> <name pos:line="16" pos:column="32">SNMP_PDU_RESPONSE<pos:position pos:line="16" pos:column="49"/></name></expr>;<pos:position pos:line="16" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="17" pos:column="9">response<pos:position pos:line="17" pos:column="17"/></name><operator pos:line="17" pos:column="17">.<pos:position pos:line="17" pos:column="18"/></operator><name pos:line="17" pos:column="18">pdu<pos:position pos:line="17" pos:column="21"/></name><operator pos:line="17" pos:column="21">.<pos:position pos:line="17" pos:column="22"/></operator><name pos:line="17" pos:column="22">errstat<pos:position pos:line="17" pos:column="29"/></name></name> <operator pos:line="17" pos:column="30">=<pos:position pos:line="17" pos:column="31"/></operator> <name pos:line="17" pos:column="32">SNMP_ERR_GENERR<pos:position pos:line="17" pos:column="47"/></name></expr>;<pos:position pos:line="17" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="18" pos:column="6"/></block></catch></try>
    <decl_stmt><decl><type><name><name pos:line="19" pos:column="5">Ipc<pos:position pos:line="19" pos:column="8"/></name><operator pos:line="19" pos:column="8">::<pos:position pos:line="19" pos:column="10"/></operator><name pos:line="19" pos:column="10">TypedMsgHdr<pos:position pos:line="19" pos:column="21"/></name></name></type> <name pos:line="19" pos:column="22">message<pos:position pos:line="19" pos:column="29"/></name></decl>;<pos:position pos:line="19" pos:column="30"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="20" pos:column="5">response<pos:position pos:line="20" pos:column="13"/></name><operator pos:line="20" pos:column="13">.<pos:position pos:line="20" pos:column="14"/></operator><name pos:line="20" pos:column="14">pack<pos:position pos:line="20" pos:column="18"/></name></name><argument_list pos:line="20" pos:column="18">(<argument><expr><name pos:line="20" pos:column="19">message<pos:position pos:line="20" pos:column="26"/></name></expr></argument>)<pos:position pos:line="20" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="21" pos:column="5">Ipc<pos:position pos:line="21" pos:column="8"/></name><operator pos:line="21" pos:column="8">::<pos:position pos:line="21" pos:column="10"/></operator><name pos:line="21" pos:column="10">SendMessage<pos:position pos:line="21" pos:column="21"/></name></name><argument_list pos:line="21" pos:column="21">(<argument><expr><call><name><name pos:line="21" pos:column="22">Ipc<pos:position pos:line="21" pos:column="25"/></name><operator pos:line="21" pos:column="25">::<pos:position pos:line="21" pos:column="27"/></operator><name pos:line="21" pos:column="27">Port<pos:position pos:line="21" pos:column="31"/></name><operator pos:line="21" pos:column="31">::<pos:position pos:line="21" pos:column="33"/></operator><name pos:line="21" pos:column="33">CoordinatorAddr<pos:position pos:line="21" pos:column="48"/></name></name><argument_list pos:line="21" pos:column="48">()<pos:position pos:line="21" pos:column="50"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="21" pos:column="52">message<pos:position pos:line="21" pos:column="59"/></name></expr></argument>)<pos:position pos:line="21" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="61"/></expr_stmt>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
