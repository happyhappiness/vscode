<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7006_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ipc<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">MemMap<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">abortWriting<pos:position pos:line="2" pos:column="26"/></name></name><parameter_list pos:line="2" pos:column="26">(<parameter><decl><type><specifier pos:line="2" pos:column="27">const<pos:position pos:line="2" pos:column="32"/></specifier> <name pos:line="2" pos:column="33">sfileno<pos:position pos:line="2" pos:column="40"/></name></type> <name pos:line="2" pos:column="41">fileno<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="48"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">54<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">5<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="19">"abort writing slot at "<pos:position pos:line="4" pos:column="43"/></literal> <operator pos:line="4" pos:column="44">&lt;&lt;<pos:position pos:line="4" pos:column="52"/></operator> <name pos:line="4" pos:column="47">fileno<pos:position pos:line="4" pos:column="53"/></name> <operator pos:line="4" pos:column="54">&lt;&lt;<pos:position pos:line="4" pos:column="62"/></operator>
           <literal type="string" pos:line="5" pos:column="12">" in map ["<pos:position pos:line="5" pos:column="23"/></literal> <operator pos:line="5" pos:column="24">&lt;&lt;<pos:position pos:line="5" pos:column="32"/></operator> <name pos:line="5" pos:column="27">path<pos:position pos:line="5" pos:column="31"/></name> <operator pos:line="5" pos:column="32">&lt;&lt;<pos:position pos:line="5" pos:column="40"/></operator> <literal type="char" pos:line="5" pos:column="35">']'<pos:position pos:line="5" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><call><name pos:line="6" pos:column="12">valid<pos:position pos:line="6" pos:column="17"/></name><argument_list pos:line="6" pos:column="17">(<argument><expr><name pos:line="6" pos:column="18">fileno<pos:position pos:line="6" pos:column="24"/></name></expr></argument>)<pos:position pos:line="6" pos:column="25"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="27"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">Slot<pos:position pos:line="7" pos:column="9"/></name> <modifier pos:line="7" pos:column="10">&amp;<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="11">s<pos:position pos:line="7" pos:column="12"/></name> <init pos:line="7" pos:column="13">= <expr><name><name pos:line="7" pos:column="15">shared<pos:position pos:line="7" pos:column="21"/></name><operator pos:line="7" pos:column="21">-&gt;<pos:position pos:line="7" pos:column="26"/></operator><name pos:line="7" pos:column="23">slots<pos:position pos:line="7" pos:column="28"/></name><index pos:line="7" pos:column="28">[<expr><name pos:line="7" pos:column="29">fileno<pos:position pos:line="7" pos:column="35"/></name></expr>]<pos:position pos:line="7" pos:column="36"/></index></name></expr></init></decl>;<pos:position pos:line="7" pos:column="37"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">assert<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><call><name><name pos:line="8" pos:column="12">s<pos:position pos:line="8" pos:column="13"/></name><operator pos:line="8" pos:column="13">.<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">writing<pos:position pos:line="8" pos:column="21"/></name></name><argument_list pos:line="8" pos:column="21">()<pos:position pos:line="8" pos:column="23"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">freeLocked<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><name pos:line="9" pos:column="16">s<pos:position pos:line="9" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="9" pos:column="19">false<pos:position pos:line="9" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="26"/></expr_stmt>
}<pos:position pos:line="10" pos:column="2"/></block></function></unit>
