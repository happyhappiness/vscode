<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6666_squid-3.4.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">check_malloc<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><name pos:line="2" pos:column="14">void<pos:position pos:line="2" pos:column="18"/></name> <modifier pos:line="2" pos:column="19">*<pos:position pos:line="2" pos:column="20"/></modifier></type><name pos:line="2" pos:column="20">p<pos:position pos:line="2" pos:column="21"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="23">size_t<pos:position pos:line="2" pos:column="29"/></name></type> <name pos:line="2" pos:column="30">sz<pos:position pos:line="2" pos:column="32"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="33"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">void<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">P<pos:position pos:line="4" pos:column="12"/></name></decl>, <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="15">Q<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">B<pos:position pos:line="5" pos:column="10"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="12">I<pos:position pos:line="5" pos:column="13"/></name></decl>;<pos:position pos:line="5" pos:column="14"/></decl_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><operator pos:line="7" pos:column="9">!<pos:position pos:line="7" pos:column="10"/></operator><name pos:line="7" pos:column="10">dbg_initd<pos:position pos:line="7" pos:column="19"/></name></expr>)<pos:position pos:line="7" pos:column="20"/></condition><then pos:line="7" pos:column="20">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="8" pos:column="9">check_init<pos:position pos:line="8" pos:column="19"/></name><argument_list pos:line="8" pos:column="19">()<pos:position pos:line="8" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="22"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name pos:line="10" pos:column="5">B<pos:position pos:line="10" pos:column="6"/></name> <operator pos:line="10" pos:column="7">=<pos:position pos:line="10" pos:column="8"/></operator> <call><name pos:line="10" pos:column="9">DBG_HASH_BUCKET<pos:position pos:line="10" pos:column="24"/></name><argument_list pos:line="10" pos:column="24">(<argument><expr><name pos:line="10" pos:column="25">p<pos:position pos:line="10" pos:column="26"/></name></expr></argument>)<pos:position pos:line="10" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="28"/></expr_stmt>

    <for pos:line="12" pos:column="5">for <control pos:line="12" pos:column="9">(<init><expr><name pos:line="12" pos:column="10">I<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">=<pos:position pos:line="12" pos:column="13"/></operator> <literal type="number" pos:line="12" pos:column="14">0<pos:position pos:line="12" pos:column="15"/></literal></expr>;<pos:position pos:line="12" pos:column="16"/></init> <condition><expr><name pos:line="12" pos:column="17">I<pos:position pos:line="12" pos:column="18"/></name> <operator pos:line="12" pos:column="19">&lt;<pos:position pos:line="12" pos:column="23"/></operator> <name pos:line="12" pos:column="21">DBG_ARRY_SZ<pos:position pos:line="12" pos:column="32"/></name></expr>;<pos:position pos:line="12" pos:column="33"/></condition> <incr><expr><operator pos:line="12" pos:column="34">++<pos:position pos:line="12" pos:column="36"/></operator><name pos:line="12" pos:column="36">I<pos:position pos:line="12" pos:column="37"/></name></expr></incr>)<pos:position pos:line="12" pos:column="38"/></control> <block pos:line="12" pos:column="39">{
        <if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><operator pos:line="13" pos:column="13">!<pos:position pos:line="13" pos:column="14"/></operator><operator pos:line="13" pos:column="14">(<pos:position pos:line="13" pos:column="15"/></operator><name pos:line="13" pos:column="15">P<pos:position pos:line="13" pos:column="16"/></name> <operator pos:line="13" pos:column="17">=<pos:position pos:line="13" pos:column="18"/></operator> <name><name pos:line="13" pos:column="19">malloc_ptrs<pos:position pos:line="13" pos:column="30"/></name><index pos:line="13" pos:column="30">[<expr><name pos:line="13" pos:column="31">B<pos:position pos:line="13" pos:column="32"/></name></expr>]<pos:position pos:line="13" pos:column="33"/></index><index pos:line="13" pos:column="33">[<expr><name pos:line="13" pos:column="34">I<pos:position pos:line="13" pos:column="35"/></name></expr>]<pos:position pos:line="13" pos:column="36"/></index></name><operator pos:line="13" pos:column="36">)<pos:position pos:line="13" pos:column="37"/></operator></expr>)<pos:position pos:line="13" pos:column="38"/></condition><then pos:line="13" pos:column="38">
            <block type="pseudo"><continue pos:line="14" pos:column="13">continue;<pos:position pos:line="14" pos:column="22"/></continue></block></then></if>

        <expr_stmt><expr><name pos:line="16" pos:column="9">Q<pos:position pos:line="16" pos:column="10"/></name> <operator pos:line="16" pos:column="11">=<pos:position pos:line="16" pos:column="12"/></operator> <name pos:line="16" pos:column="13">P<pos:position pos:line="16" pos:column="14"/></name> <operator pos:line="16" pos:column="15">+<pos:position pos:line="16" pos:column="16"/></operator> <name><name pos:line="16" pos:column="17">malloc_size<pos:position pos:line="16" pos:column="28"/></name><index pos:line="16" pos:column="28">[<expr><name pos:line="16" pos:column="29">B<pos:position pos:line="16" pos:column="30"/></name></expr>]<pos:position pos:line="16" pos:column="31"/></index><index pos:line="16" pos:column="31">[<expr><name pos:line="16" pos:column="32">I<pos:position pos:line="16" pos:column="33"/></name></expr>]<pos:position pos:line="16" pos:column="34"/></index></name></expr>;<pos:position pos:line="16" pos:column="35"/></expr_stmt>

        <if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">P<pos:position pos:line="18" pos:column="14"/></name> <operator pos:line="18" pos:column="15">&lt;=<pos:position pos:line="18" pos:column="20"/></operator> <name pos:line="18" pos:column="18">p<pos:position pos:line="18" pos:column="19"/></name> <operator pos:line="18" pos:column="20">&amp;&amp;<pos:position pos:line="18" pos:column="30"/></operator> <name pos:line="18" pos:column="23">p<pos:position pos:line="18" pos:column="24"/></name> <operator pos:line="18" pos:column="25">&lt;<pos:position pos:line="18" pos:column="29"/></operator> <name pos:line="18" pos:column="27">Q<pos:position pos:line="18" pos:column="28"/></name></expr>)<pos:position pos:line="18" pos:column="29"/></condition><then pos:line="18" pos:column="29"> <block pos:line="18" pos:column="30">{
            <decl_stmt><decl><specifier pos:line="19" pos:column="13">static<pos:position pos:line="19" pos:column="19"/></specifier> <type><name pos:line="19" pos:column="20">char<pos:position pos:line="19" pos:column="24"/></name></type> <name><name pos:line="19" pos:column="25">msg<pos:position pos:line="19" pos:column="28"/></name><index pos:line="19" pos:column="28">[<expr><literal type="number" pos:line="19" pos:column="29">128<pos:position pos:line="19" pos:column="32"/></literal></expr>]<pos:position pos:line="19" pos:column="33"/></index></name></decl>;<pos:position pos:line="19" pos:column="34"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="20" pos:column="13">snprintf<pos:position pos:line="20" pos:column="21"/></name><argument_list pos:line="20" pos:column="21">(<argument><expr><name pos:line="20" pos:column="22">msg<pos:position pos:line="20" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="27">128<pos:position pos:line="20" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="32">"xmalloc: ERROR: p=%p falls in P=%p+%d"<pos:position pos:line="20" pos:column="71"/></literal></expr></argument>,
                     <argument><expr><name pos:line="21" pos:column="22">p<pos:position pos:line="21" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="25">P<pos:position pos:line="21" pos:column="26"/></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="28">malloc_size<pos:position pos:line="21" pos:column="39"/></name><index pos:line="21" pos:column="39">[<expr><name pos:line="21" pos:column="40">B<pos:position pos:line="21" pos:column="41"/></name></expr>]<pos:position pos:line="21" pos:column="42"/></index><index pos:line="21" pos:column="42">[<expr><name pos:line="21" pos:column="43">I<pos:position pos:line="21" pos:column="44"/></name></expr>]<pos:position pos:line="21" pos:column="45"/></index></name></expr></argument>)<pos:position pos:line="21" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="47"/></expr_stmt>
            <if pos:line="22" pos:column="13">if <condition pos:line="22" pos:column="16">(<expr><name pos:line="22" pos:column="17">failure_notify<pos:position pos:line="22" pos:column="31"/></name></expr>)<pos:position pos:line="22" pos:column="32"/></condition><then pos:line="22" pos:column="32">
                <block type="pseudo"><expr_stmt><expr><call pos:line="23" pos:column="17">(<modifier pos:line="23" pos:column="18">*<pos:position pos:line="23" pos:column="19"/></modifier><name pos:line="23" pos:column="19">failure_notify<pos:position pos:line="23" pos:column="33"/></name>) <argument_list pos:line="23" pos:column="35">(<argument><expr><name pos:line="23" pos:column="36">msg<pos:position pos:line="23" pos:column="39"/></name></expr></argument>)<pos:position pos:line="23" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="41"/></expr_stmt></block></then>
            <else pos:line="24" pos:column="13">else
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="17">perror<pos:position pos:line="25" pos:column="23"/></name><argument_list pos:line="25" pos:column="23">(<argument><expr><name pos:line="25" pos:column="24">msg<pos:position pos:line="25" pos:column="27"/></name></expr></argument>)<pos:position pos:line="25" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="29"/></expr_stmt></block></else></if>
        }<pos:position pos:line="26" pos:column="10"/></block></then></if>
    }<pos:position pos:line="27" pos:column="6"/></block></for>

    <for pos:line="29" pos:column="5">for <control pos:line="29" pos:column="9">(<init><expr><name pos:line="29" pos:column="10">I<pos:position pos:line="29" pos:column="11"/></name> <operator pos:line="29" pos:column="12">=<pos:position pos:line="29" pos:column="13"/></operator> <literal type="number" pos:line="29" pos:column="14">0<pos:position pos:line="29" pos:column="15"/></literal></expr>;<pos:position pos:line="29" pos:column="16"/></init> <condition><expr><name pos:line="29" pos:column="17">I<pos:position pos:line="29" pos:column="18"/></name> <operator pos:line="29" pos:column="19">&lt;<pos:position pos:line="29" pos:column="23"/></operator> <name pos:line="29" pos:column="21">DBG_ARRY_SZ<pos:position pos:line="29" pos:column="32"/></name></expr>;<pos:position pos:line="29" pos:column="33"/></condition> <incr><expr><operator pos:line="29" pos:column="34">++<pos:position pos:line="29" pos:column="36"/></operator><name pos:line="29" pos:column="36">I<pos:position pos:line="29" pos:column="37"/></name></expr></incr>)<pos:position pos:line="29" pos:column="38"/></control> <block pos:line="29" pos:column="39">{
        <if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name><name pos:line="30" pos:column="13">malloc_ptrs<pos:position pos:line="30" pos:column="24"/></name><index pos:line="30" pos:column="24">[<expr><name pos:line="30" pos:column="25">B<pos:position pos:line="30" pos:column="26"/></name></expr>]<pos:position pos:line="30" pos:column="27"/></index><index pos:line="30" pos:column="27">[<expr><name pos:line="30" pos:column="28">I<pos:position pos:line="30" pos:column="29"/></name></expr>]<pos:position pos:line="30" pos:column="30"/></index></name></expr>)<pos:position pos:line="30" pos:column="31"/></condition><then pos:line="30" pos:column="31">
            <block type="pseudo"><continue pos:line="31" pos:column="13">continue;<pos:position pos:line="31" pos:column="22"/></continue></block></then></if>

        <expr_stmt><expr><name><name pos:line="33" pos:column="9">malloc_ptrs<pos:position pos:line="33" pos:column="20"/></name><index pos:line="33" pos:column="20">[<expr><name pos:line="33" pos:column="21">B<pos:position pos:line="33" pos:column="22"/></name></expr>]<pos:position pos:line="33" pos:column="23"/></index><index pos:line="33" pos:column="23">[<expr><name pos:line="33" pos:column="24">I<pos:position pos:line="33" pos:column="25"/></name></expr>]<pos:position pos:line="33" pos:column="26"/></index></name> <operator pos:line="33" pos:column="27">=<pos:position pos:line="33" pos:column="28"/></operator> <name pos:line="33" pos:column="29">p<pos:position pos:line="33" pos:column="30"/></name></expr>;<pos:position pos:line="33" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="34" pos:column="9">malloc_size<pos:position pos:line="34" pos:column="20"/></name><index pos:line="34" pos:column="20">[<expr><name pos:line="34" pos:column="21">B<pos:position pos:line="34" pos:column="22"/></name></expr>]<pos:position pos:line="34" pos:column="23"/></index><index pos:line="34" pos:column="23">[<expr><name pos:line="34" pos:column="24">I<pos:position pos:line="34" pos:column="25"/></name></expr>]<pos:position pos:line="34" pos:column="26"/></index></name> <operator pos:line="34" pos:column="27">=<pos:position pos:line="34" pos:column="28"/></operator> <operator pos:line="34" pos:column="29">(<pos:position pos:line="34" pos:column="30"/></operator><name pos:line="34" pos:column="30">int<pos:position pos:line="34" pos:column="33"/></name><operator pos:line="34" pos:column="33">)<pos:position pos:line="34" pos:column="34"/></operator> <name pos:line="34" pos:column="35">sz<pos:position pos:line="34" pos:column="37"/></name></expr>;<pos:position pos:line="34" pos:column="38"/></expr_stmt>
        <break pos:line="35" pos:column="9">break;<pos:position pos:line="35" pos:column="15"/></break>
    }<pos:position pos:line="36" pos:column="6"/></block></for>

    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><name pos:line="38" pos:column="9">I<pos:position pos:line="38" pos:column="10"/></name> <operator pos:line="38" pos:column="11">==<pos:position pos:line="38" pos:column="13"/></operator> <name pos:line="38" pos:column="14">DBG_ARRY_SZ<pos:position pos:line="38" pos:column="25"/></name></expr>)<pos:position pos:line="38" pos:column="26"/></condition><then pos:line="38" pos:column="26"> <block pos:line="38" pos:column="27">{
        <if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><name pos:line="39" pos:column="13">failure_notify<pos:position pos:line="39" pos:column="27"/></name></expr>)<pos:position pos:line="39" pos:column="28"/></condition><then pos:line="39" pos:column="28">
            <block type="pseudo"><expr_stmt><expr><call pos:line="40" pos:column="13">(<modifier pos:line="40" pos:column="14">*<pos:position pos:line="40" pos:column="15"/></modifier><name pos:line="40" pos:column="15">failure_notify<pos:position pos:line="40" pos:column="29"/></name>) <argument_list pos:line="40" pos:column="31">(<argument><expr><literal type="string" pos:line="40" pos:column="32">"xmalloc: debug out of array space!"<pos:position pos:line="40" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="70"/></expr_stmt></block></then>
        <else pos:line="41" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="42" pos:column="13">perror<pos:position pos:line="42" pos:column="19"/></name><argument_list pos:line="42" pos:column="19">(<argument><expr><literal type="string" pos:line="42" pos:column="20">"xmalloc: debug out of array space!"<pos:position pos:line="42" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="58"/></expr_stmt></block></else></if>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if>
}<pos:position pos:line="44" pos:column="2"/></block></function></unit>
