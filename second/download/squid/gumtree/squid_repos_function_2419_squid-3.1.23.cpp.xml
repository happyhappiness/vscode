<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2419_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">FwdState<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">dispatch<pos:position pos:line="2" pos:column="19"/></name></name><parameter_list pos:line="2" pos:column="19">()<pos:position pos:line="2" pos:column="21"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">peer<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">p<pos:position pos:line="4" pos:column="12"/></name> <init pos:line="4" pos:column="13">= <expr><name pos:line="4" pos:column="15">NULL<pos:position pos:line="4" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">debugs<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><literal type="number" pos:line="5" pos:column="12">17<pos:position pos:line="5" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="16">3<pos:position pos:line="5" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="19">"fwdDispatch: FD "<pos:position pos:line="5" pos:column="37"/></literal> <operator pos:line="5" pos:column="38">&lt;&lt;<pos:position pos:line="5" pos:column="46"/></operator> <name pos:line="5" pos:column="41">client_fd<pos:position pos:line="5" pos:column="50"/></name> <operator pos:line="5" pos:column="51">&lt;&lt;<pos:position pos:line="5" pos:column="59"/></operator> <literal type="string" pos:line="5" pos:column="54">": Fetching '"<pos:position pos:line="5" pos:column="68"/></literal> <operator pos:line="5" pos:column="69">&lt;&lt;<pos:position pos:line="5" pos:column="77"/></operator> <call><name pos:line="5" pos:column="72">RequestMethodStr<pos:position pos:line="5" pos:column="88"/></name><argument_list pos:line="5" pos:column="88">(<argument><expr><name><name pos:line="5" pos:column="89">request<pos:position pos:line="5" pos:column="96"/></name><operator pos:line="5" pos:column="96">-&gt;<pos:position pos:line="5" pos:column="101"/></operator><name pos:line="5" pos:column="98">method<pos:position pos:line="5" pos:column="104"/></name></name></expr></argument>)<pos:position pos:line="5" pos:column="105"/></argument_list></call> <operator pos:line="5" pos:column="106">&lt;&lt;<pos:position pos:line="5" pos:column="114"/></operator> <literal type="string" pos:line="5" pos:column="109">" "<pos:position pos:line="5" pos:column="112"/></literal> <operator pos:line="5" pos:column="113">&lt;&lt;<pos:position pos:line="5" pos:column="121"/></operator> <call><name><name pos:line="5" pos:column="116">entry<pos:position pos:line="5" pos:column="121"/></name><operator pos:line="5" pos:column="121">-&gt;<pos:position pos:line="5" pos:column="126"/></operator><name pos:line="5" pos:column="123">url<pos:position pos:line="5" pos:column="126"/></name></name><argument_list pos:line="5" pos:column="126">()<pos:position pos:line="5" pos:column="128"/></argument_list></call> <operator pos:line="5" pos:column="129">&lt;&lt;<pos:position pos:line="5" pos:column="137"/></operator> <literal type="string" pos:line="5" pos:column="132">"'"<pos:position pos:line="5" pos:column="135"/></literal></expr></argument> )<pos:position pos:line="5" pos:column="137"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="138"/></expr_stmt>
    <comment type="block" pos:line="6" pos:column="5">/*
     * Assert that server_fd is set.  This is to guarantee that fwdState
     * is attached to something and will be deallocated when server_fd
     * is closed.
     */</comment>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">assert<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><name pos:line="11" pos:column="12">server_fd<pos:position pos:line="11" pos:column="21"/></name> <operator pos:line="11" pos:column="22">&gt;<pos:position pos:line="11" pos:column="26"/></operator> <operator pos:line="11" pos:column="24">-<pos:position pos:line="11" pos:column="25"/></operator><literal type="number" pos:line="11" pos:column="25">1<pos:position pos:line="11" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="28"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="13" pos:column="5">fd_note<pos:position pos:line="13" pos:column="12"/></name><argument_list pos:line="13" pos:column="12">(<argument><expr><name pos:line="13" pos:column="13">server_fd<pos:position pos:line="13" pos:column="22"/></name></expr></argument>, <argument><expr><call><name><name pos:line="13" pos:column="24">entry<pos:position pos:line="13" pos:column="29"/></name><operator pos:line="13" pos:column="29">-&gt;<pos:position pos:line="13" pos:column="34"/></operator><name pos:line="13" pos:column="31">url<pos:position pos:line="13" pos:column="34"/></name></name><argument_list pos:line="13" pos:column="34">()<pos:position pos:line="13" pos:column="36"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="38"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="15" pos:column="5">fd_table<pos:position pos:line="15" pos:column="13"/></name><index pos:line="15" pos:column="13">[<expr><name pos:line="15" pos:column="14">server_fd<pos:position pos:line="15" pos:column="23"/></name></expr>]<pos:position pos:line="15" pos:column="24"/></index></name><operator pos:line="15" pos:column="24">.<pos:position pos:line="15" pos:column="25"/></operator><call><name pos:line="15" pos:column="25">noteUse<pos:position pos:line="15" pos:column="32"/></name><argument_list pos:line="15" pos:column="32">(<argument><expr><name pos:line="15" pos:column="33">fwdPconnPool<pos:position pos:line="15" pos:column="45"/></name></expr></argument>)<pos:position pos:line="15" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="47"/></expr_stmt>

    <comment type="block" pos:line="17" pos:column="5">/*assert(!EBIT_TEST(entry-&gt;flags, ENTRY_DISPATCHED)); */</comment>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">assert<pos:position pos:line="18" pos:column="11"/></name><argument_list pos:line="18" pos:column="11">(<argument><expr><name><name pos:line="18" pos:column="12">entry<pos:position pos:line="18" pos:column="17"/></name><operator pos:line="18" pos:column="17">-&gt;<pos:position pos:line="18" pos:column="22"/></operator><name pos:line="18" pos:column="19">ping_status<pos:position pos:line="18" pos:column="30"/></name></name> <operator pos:line="18" pos:column="31">!=<pos:position pos:line="18" pos:column="33"/></operator> <name pos:line="18" pos:column="34">PING_WAITING<pos:position pos:line="18" pos:column="46"/></name></expr></argument>)<pos:position pos:line="18" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="48"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="20" pos:column="5">assert<pos:position pos:line="20" pos:column="11"/></name><argument_list pos:line="20" pos:column="11">(<argument><expr><name><name pos:line="20" pos:column="12">entry<pos:position pos:line="20" pos:column="17"/></name><operator pos:line="20" pos:column="17">-&gt;<pos:position pos:line="20" pos:column="22"/></operator><name pos:line="20" pos:column="19">lock_count<pos:position pos:line="20" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="31"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="22" pos:column="5">EBIT_SET<pos:position pos:line="22" pos:column="13"/></name><argument_list pos:line="22" pos:column="13">(<argument><expr><name><name pos:line="22" pos:column="14">entry<pos:position pos:line="22" pos:column="19"/></name><operator pos:line="22" pos:column="19">-&gt;<pos:position pos:line="22" pos:column="24"/></operator><name pos:line="22" pos:column="21">flags<pos:position pos:line="22" pos:column="26"/></name></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="28">ENTRY_DISPATCHED<pos:position pos:line="22" pos:column="44"/></name></expr></argument>)<pos:position pos:line="22" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="46"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="24" pos:column="5">netdbPingSite<pos:position pos:line="24" pos:column="18"/></name><argument_list pos:line="24" pos:column="18">(<argument><expr><call><name><name pos:line="24" pos:column="19">request<pos:position pos:line="24" pos:column="26"/></name><operator pos:line="24" pos:column="26">-&gt;<pos:position pos:line="24" pos:column="31"/></operator><name pos:line="24" pos:column="28">GetHost<pos:position pos:line="24" pos:column="35"/></name></name><argument_list pos:line="24" pos:column="35">()<pos:position pos:line="24" pos:column="37"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="39"/></expr_stmt>

<cpp:if pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">if<pos:position pos:line="26" pos:column="4"/></cpp:directive> <expr><name pos:line="26" pos:column="5">USE_ZPH_QOS<pos:position pos:line="26" pos:column="16"/></name> <operator pos:line="26" pos:column="17">&amp;&amp;<pos:position pos:line="26" pos:column="27"/></operator> <call><name pos:line="26" pos:column="20">defined<pos:position pos:line="26" pos:column="27"/></name><argument_list pos:line="26" pos:column="27">(<argument><expr><name pos:line="26" pos:column="28">_SQUID_LINUX_<pos:position pos:line="26" pos:column="41"/></name></expr></argument>)<pos:position pos:line="26" pos:column="42"/></argument_list></call></expr></cpp:if>
    <comment type="block" pos:line="27" pos:column="5">/* Bug 2537: This part of ZPH only applies to patched Linux kernels. */</comment>

    <comment type="block" pos:line="29" pos:column="5">/* Retrieves remote server TOS value, and stores it as part of the
     * original client request FD object. It is later used to forward
     * remote server's TOS in the response to the client in case of a MISS.
     */</comment>
    <decl_stmt><decl><type><name pos:line="33" pos:column="5">fde<pos:position pos:line="33" pos:column="8"/></name> <modifier pos:line="33" pos:column="9">*<pos:position pos:line="33" pos:column="10"/></modifier></type> <name pos:line="33" pos:column="11">clientFde<pos:position pos:line="33" pos:column="20"/></name> <init pos:line="33" pos:column="21">= <expr><operator pos:line="33" pos:column="23">&amp;<pos:position pos:line="33" pos:column="28"/></operator><name><name pos:line="33" pos:column="24">fd_table<pos:position pos:line="33" pos:column="32"/></name><index pos:line="33" pos:column="32">[<expr><name pos:line="33" pos:column="33">client_fd<pos:position pos:line="33" pos:column="42"/></name></expr>]<pos:position pos:line="33" pos:column="43"/></index></name></expr></init></decl>;<pos:position pos:line="33" pos:column="44"/></decl_stmt>
    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">(<expr><name pos:line="34" pos:column="9">clientFde<pos:position pos:line="34" pos:column="18"/></name></expr>)<pos:position pos:line="34" pos:column="19"/></condition><then pos:line="34" pos:column="19"> <block pos:line="34" pos:column="20">{
        <decl_stmt><decl><type><name pos:line="35" pos:column="9">int<pos:position pos:line="35" pos:column="12"/></name></type> <name pos:line="35" pos:column="13">tos<pos:position pos:line="35" pos:column="16"/></name> <init pos:line="35" pos:column="17">= <expr><literal type="number" pos:line="35" pos:column="19">1<pos:position pos:line="35" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="35" pos:column="21"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="36" pos:column="9">int<pos:position pos:line="36" pos:column="12"/></name></type> <name pos:line="36" pos:column="13">tos_len<pos:position pos:line="36" pos:column="20"/></name> <init pos:line="36" pos:column="21">= <expr><sizeof pos:line="36" pos:column="23">sizeof<argument_list pos:line="36" pos:column="29">(<argument><expr><name pos:line="36" pos:column="30">tos<pos:position pos:line="36" pos:column="33"/></name></expr></argument>)<pos:position pos:line="36" pos:column="34"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="36" pos:column="35"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="37" pos:column="9">clientFde<pos:position pos:line="37" pos:column="18"/></name><operator pos:line="37" pos:column="18">-&gt;<pos:position pos:line="37" pos:column="23"/></operator><name pos:line="37" pos:column="20">upstreamTOS<pos:position pos:line="37" pos:column="31"/></name></name> <operator pos:line="37" pos:column="32">=<pos:position pos:line="37" pos:column="33"/></operator> <literal type="number" pos:line="37" pos:column="34">0<pos:position pos:line="37" pos:column="35"/></literal></expr>;<pos:position pos:line="37" pos:column="36"/></expr_stmt>
        <if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><call><name pos:line="38" pos:column="13">setsockopt<pos:position pos:line="38" pos:column="23"/></name><argument_list pos:line="38" pos:column="23">(<argument><expr><name pos:line="38" pos:column="24">server_fd<pos:position pos:line="38" pos:column="33"/></name></expr></argument>,<argument><expr><name pos:line="38" pos:column="34">SOL_IP<pos:position pos:line="38" pos:column="40"/></name></expr></argument>,<argument><expr><name pos:line="38" pos:column="41">IP_RECVTOS<pos:position pos:line="38" pos:column="51"/></name></expr></argument>,<argument><expr><operator pos:line="38" pos:column="52">&amp;<pos:position pos:line="38" pos:column="57"/></operator><name pos:line="38" pos:column="53">tos<pos:position pos:line="38" pos:column="56"/></name></expr></argument>,<argument><expr><name pos:line="38" pos:column="57">tos_len<pos:position pos:line="38" pos:column="64"/></name></expr></argument>)<pos:position pos:line="38" pos:column="65"/></argument_list></call><operator pos:line="38" pos:column="65">==<pos:position pos:line="38" pos:column="67"/></operator><literal type="number" pos:line="38" pos:column="67">0<pos:position pos:line="38" pos:column="68"/></literal></expr>)<pos:position pos:line="38" pos:column="69"/></condition><then pos:line="38" pos:column="69"> <block pos:line="38" pos:column="70">{
            <decl_stmt><decl><type><name pos:line="39" pos:column="13">unsigned<pos:position pos:line="39" pos:column="21"/></name> <name pos:line="39" pos:column="22">char<pos:position pos:line="39" pos:column="26"/></name></type> <name><name pos:line="39" pos:column="27">buf<pos:position pos:line="39" pos:column="30"/></name><index pos:line="39" pos:column="30">[<expr><literal type="number" pos:line="39" pos:column="31">512<pos:position pos:line="39" pos:column="34"/></literal></expr>]<pos:position pos:line="39" pos:column="35"/></index></name></decl>;<pos:position pos:line="39" pos:column="36"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="40" pos:column="13">int<pos:position pos:line="40" pos:column="16"/></name></type> <name pos:line="40" pos:column="17">len<pos:position pos:line="40" pos:column="20"/></name> <init pos:line="40" pos:column="21">= <expr><literal type="number" pos:line="40" pos:column="23">512<pos:position pos:line="40" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="40" pos:column="27"/></decl_stmt>
            <if pos:line="41" pos:column="13">if <condition pos:line="41" pos:column="16">(<expr><call><name pos:line="41" pos:column="17">getsockopt<pos:position pos:line="41" pos:column="27"/></name><argument_list pos:line="41" pos:column="27">(<argument><expr><name pos:line="41" pos:column="28">server_fd<pos:position pos:line="41" pos:column="37"/></name></expr></argument>,<argument><expr><name pos:line="41" pos:column="38">SOL_IP<pos:position pos:line="41" pos:column="44"/></name></expr></argument>,<argument><expr><name pos:line="41" pos:column="45">IP_PKTOPTIONS<pos:position pos:line="41" pos:column="58"/></name></expr></argument>,<argument><expr><name pos:line="41" pos:column="59">buf<pos:position pos:line="41" pos:column="62"/></name></expr></argument>,<argument><expr><operator pos:line="41" pos:column="63">(<pos:position pos:line="41" pos:column="64"/></operator><name pos:line="41" pos:column="64">socklen_t<pos:position pos:line="41" pos:column="73"/></name><operator pos:line="41" pos:column="73">*<pos:position pos:line="41" pos:column="74"/></operator><operator pos:line="41" pos:column="74">)<pos:position pos:line="41" pos:column="75"/></operator><operator pos:line="41" pos:column="75">&amp;<pos:position pos:line="41" pos:column="80"/></operator><name pos:line="41" pos:column="76">len<pos:position pos:line="41" pos:column="79"/></name></expr></argument>)<pos:position pos:line="41" pos:column="80"/></argument_list></call> <operator pos:line="41" pos:column="81">==<pos:position pos:line="41" pos:column="83"/></operator> <literal type="number" pos:line="41" pos:column="84">0<pos:position pos:line="41" pos:column="85"/></literal></expr>)<pos:position pos:line="41" pos:column="86"/></condition><then pos:line="41" pos:column="86"> <block pos:line="41" pos:column="87">{
                <comment type="block" pos:line="42" pos:column="17">/* Parse the PKTOPTIONS structure to locate the TOS data message
                 * prepared in the kernel by the ZPH incoming TCP TOS preserving
                 * patch.
                 */</comment>
                <decl_stmt><decl><type><name pos:line="46" pos:column="17">unsigned<pos:position pos:line="46" pos:column="25"/></name> <name pos:line="46" pos:column="26">char<pos:position pos:line="46" pos:column="30"/></name> <modifier pos:line="46" pos:column="31">*<pos:position pos:line="46" pos:column="32"/></modifier></type> <name pos:line="46" pos:column="33">pbuf<pos:position pos:line="46" pos:column="37"/></name> <init pos:line="46" pos:column="38">= <expr><name pos:line="46" pos:column="40">buf<pos:position pos:line="46" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="46" pos:column="44"/></decl_stmt>
                <while pos:line="47" pos:column="17">while <condition pos:line="47" pos:column="23">(<expr><name pos:line="47" pos:column="24">pbuf<pos:position pos:line="47" pos:column="28"/></name><operator pos:line="47" pos:column="28">-<pos:position pos:line="47" pos:column="29"/></operator><name pos:line="47" pos:column="29">buf<pos:position pos:line="47" pos:column="32"/></name> <operator pos:line="47" pos:column="33">&lt;<pos:position pos:line="47" pos:column="37"/></operator> <name pos:line="47" pos:column="35">len<pos:position pos:line="47" pos:column="38"/></name></expr>)<pos:position pos:line="47" pos:column="39"/></condition> <block pos:line="47" pos:column="40">{
                    <decl_stmt><decl><type><name><name pos:line="48" pos:column="21">struct<pos:position pos:line="48" pos:column="27"/></name> <name pos:line="48" pos:column="28">cmsghdr<pos:position pos:line="48" pos:column="35"/></name></name> <modifier pos:line="48" pos:column="36">*<pos:position pos:line="48" pos:column="37"/></modifier></type><name pos:line="48" pos:column="37">o<pos:position pos:line="48" pos:column="38"/></name> <init pos:line="48" pos:column="39">= <expr><operator pos:line="48" pos:column="41">(<pos:position pos:line="48" pos:column="42"/></operator>struct <name pos:line="48" pos:column="49">cmsghdr<pos:position pos:line="48" pos:column="56"/></name><operator pos:line="48" pos:column="56">*<pos:position pos:line="48" pos:column="57"/></operator><operator pos:line="48" pos:column="57">)<pos:position pos:line="48" pos:column="58"/></operator><name pos:line="48" pos:column="58">pbuf<pos:position pos:line="48" pos:column="62"/></name></expr></init></decl>;<pos:position pos:line="48" pos:column="63"/></decl_stmt>
                    <if pos:line="49" pos:column="21">if <condition pos:line="49" pos:column="24">(<expr><name><name pos:line="49" pos:column="25">o<pos:position pos:line="49" pos:column="26"/></name><operator pos:line="49" pos:column="26">-&gt;<pos:position pos:line="49" pos:column="31"/></operator><name pos:line="49" pos:column="28">cmsg_len<pos:position pos:line="49" pos:column="36"/></name></name><operator pos:line="49" pos:column="36">&lt;=<pos:position pos:line="49" pos:column="41"/></operator><literal type="number" pos:line="49" pos:column="38">0<pos:position pos:line="49" pos:column="39"/></literal></expr>)<pos:position pos:line="49" pos:column="40"/></condition><then pos:line="49" pos:column="40">
                        <block type="pseudo"><break pos:line="50" pos:column="25">break;<pos:position pos:line="50" pos:column="31"/></break></block></then></if>

                    <if pos:line="52" pos:column="21">if <condition pos:line="52" pos:column="24">(<expr><name><name pos:line="52" pos:column="25">o<pos:position pos:line="52" pos:column="26"/></name><operator pos:line="52" pos:column="26">-&gt;<pos:position pos:line="52" pos:column="31"/></operator><name pos:line="52" pos:column="28">cmsg_level<pos:position pos:line="52" pos:column="38"/></name></name> <operator pos:line="52" pos:column="39">==<pos:position pos:line="52" pos:column="41"/></operator> <name pos:line="52" pos:column="42">SOL_IP<pos:position pos:line="52" pos:column="48"/></name> <operator pos:line="52" pos:column="49">&amp;&amp;<pos:position pos:line="52" pos:column="59"/></operator> <name><name pos:line="52" pos:column="52">o<pos:position pos:line="52" pos:column="53"/></name><operator pos:line="52" pos:column="53">-&gt;<pos:position pos:line="52" pos:column="58"/></operator><name pos:line="52" pos:column="55">cmsg_type<pos:position pos:line="52" pos:column="64"/></name></name> <operator pos:line="52" pos:column="65">==<pos:position pos:line="52" pos:column="67"/></operator> <name pos:line="52" pos:column="68">IP_TOS<pos:position pos:line="52" pos:column="74"/></name></expr>)<pos:position pos:line="52" pos:column="75"/></condition><then pos:line="52" pos:column="75"> <block pos:line="52" pos:column="76">{
                        <decl_stmt><decl><type><name pos:line="53" pos:column="25">int<pos:position pos:line="53" pos:column="28"/></name> <modifier pos:line="53" pos:column="29">*<pos:position pos:line="53" pos:column="30"/></modifier></type><name pos:line="53" pos:column="30">tmp<pos:position pos:line="53" pos:column="33"/></name> <init pos:line="53" pos:column="34">= <expr><operator pos:line="53" pos:column="36">(<pos:position pos:line="53" pos:column="37"/></operator><name pos:line="53" pos:column="37">int<pos:position pos:line="53" pos:column="40"/></name><operator pos:line="53" pos:column="40">*<pos:position pos:line="53" pos:column="41"/></operator><operator pos:line="53" pos:column="41">)<pos:position pos:line="53" pos:column="42"/></operator><call><name pos:line="53" pos:column="42">CMSG_DATA<pos:position pos:line="53" pos:column="51"/></name><argument_list pos:line="53" pos:column="51">(<argument><expr><name pos:line="53" pos:column="52">o<pos:position pos:line="53" pos:column="53"/></name></expr></argument>)<pos:position pos:line="53" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="53" pos:column="55"/></decl_stmt>
                        <expr_stmt><expr><name><name pos:line="54" pos:column="25">clientFde<pos:position pos:line="54" pos:column="34"/></name><operator pos:line="54" pos:column="34">-&gt;<pos:position pos:line="54" pos:column="39"/></operator><name pos:line="54" pos:column="36">upstreamTOS<pos:position pos:line="54" pos:column="47"/></name></name> <operator pos:line="54" pos:column="48">=<pos:position pos:line="54" pos:column="49"/></operator> <operator pos:line="54" pos:column="50">(<pos:position pos:line="54" pos:column="51"/></operator><name pos:line="54" pos:column="51">unsigned<pos:position pos:line="54" pos:column="59"/></name> <name pos:line="54" pos:column="60">char<pos:position pos:line="54" pos:column="64"/></name><operator pos:line="54" pos:column="64">)<pos:position pos:line="54" pos:column="65"/></operator><operator pos:line="54" pos:column="65">*<pos:position pos:line="54" pos:column="66"/></operator><name pos:line="54" pos:column="66">tmp<pos:position pos:line="54" pos:column="69"/></name></expr>;<pos:position pos:line="54" pos:column="70"/></expr_stmt>
                        <break pos:line="55" pos:column="25">break;<pos:position pos:line="55" pos:column="31"/></break>
                    }<pos:position pos:line="56" pos:column="22"/></block></then></if>
                    <expr_stmt><expr><name pos:line="57" pos:column="21">pbuf<pos:position pos:line="57" pos:column="25"/></name> <operator pos:line="57" pos:column="26">+=<pos:position pos:line="57" pos:column="28"/></operator> <call><name pos:line="57" pos:column="29">CMSG_LEN<pos:position pos:line="57" pos:column="37"/></name><argument_list pos:line="57" pos:column="37">(<argument><expr><name><name pos:line="57" pos:column="38">o<pos:position pos:line="57" pos:column="39"/></name><operator pos:line="57" pos:column="39">-&gt;<pos:position pos:line="57" pos:column="44"/></operator><name pos:line="57" pos:column="41">cmsg_len<pos:position pos:line="57" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="51"/></expr_stmt>
                }<pos:position pos:line="58" pos:column="18"/></block></while>
            }<pos:position pos:line="59" pos:column="14"/></block></then> <else pos:line="59" pos:column="15">else <block pos:line="59" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="60" pos:column="17">debugs<pos:position pos:line="60" pos:column="23"/></name><argument_list pos:line="60" pos:column="23">(<argument><expr><literal type="number" pos:line="60" pos:column="24">33<pos:position pos:line="60" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="60" pos:column="28">1<pos:position pos:line="60" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="31">"ZPH: error in getsockopt(IP_PKTOPTIONS) on FD "<pos:position pos:line="60" pos:column="79"/></literal><operator pos:line="60" pos:column="79">&lt;&lt;<pos:position pos:line="60" pos:column="87"/></operator><name pos:line="60" pos:column="81">server_fd<pos:position pos:line="60" pos:column="90"/></name><operator pos:line="60" pos:column="90">&lt;&lt;<pos:position pos:line="60" pos:column="98"/></operator><literal type="string" pos:line="60" pos:column="92">" "<pos:position pos:line="60" pos:column="95"/></literal><operator pos:line="60" pos:column="95">&lt;&lt;<pos:position pos:line="60" pos:column="103"/></operator><call><name pos:line="60" pos:column="97">xstrerror<pos:position pos:line="60" pos:column="106"/></name><argument_list pos:line="60" pos:column="106">()<pos:position pos:line="60" pos:column="108"/></argument_list></call></expr></argument>)<pos:position pos:line="60" pos:column="109"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="110"/></expr_stmt>
            }<pos:position pos:line="61" pos:column="14"/></block></else></if>
        }<pos:position pos:line="62" pos:column="10"/></block></then> <else pos:line="62" pos:column="11">else <block pos:line="62" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="63" pos:column="13">debugs<pos:position pos:line="63" pos:column="19"/></name><argument_list pos:line="63" pos:column="19">(<argument><expr><literal type="number" pos:line="63" pos:column="20">33<pos:position pos:line="63" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="63" pos:column="24">1<pos:position pos:line="63" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="27">"ZPH: error in setsockopt(IP_RECVTOS) on FD "<pos:position pos:line="63" pos:column="72"/></literal><operator pos:line="63" pos:column="72">&lt;&lt;<pos:position pos:line="63" pos:column="80"/></operator><name pos:line="63" pos:column="74">server_fd<pos:position pos:line="63" pos:column="83"/></name><operator pos:line="63" pos:column="83">&lt;&lt;<pos:position pos:line="63" pos:column="91"/></operator><literal type="string" pos:line="63" pos:column="85">" "<pos:position pos:line="63" pos:column="88"/></literal><operator pos:line="63" pos:column="88">&lt;&lt;<pos:position pos:line="63" pos:column="96"/></operator><call><name pos:line="63" pos:column="90">xstrerror<pos:position pos:line="63" pos:column="99"/></name><argument_list pos:line="63" pos:column="99">()<pos:position pos:line="63" pos:column="101"/></argument_list></call></expr></argument>)<pos:position pos:line="63" pos:column="102"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="103"/></expr_stmt>
        }<pos:position pos:line="64" pos:column="10"/></block></else></if>
    }<pos:position pos:line="65" pos:column="6"/></block></then></if>
<cpp:endif pos:line="66" pos:column="1">#<cpp:directive pos:line="66" pos:column="2">endif<pos:position pos:line="66" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="68" pos:column="5">if <condition pos:line="68" pos:column="8">(<expr><name pos:line="68" pos:column="9">servers<pos:position pos:line="68" pos:column="16"/></name> <operator pos:line="68" pos:column="17">&amp;&amp;<pos:position pos:line="68" pos:column="27"/></operator> <operator pos:line="68" pos:column="20">(<pos:position pos:line="68" pos:column="21"/></operator><name pos:line="68" pos:column="21">p<pos:position pos:line="68" pos:column="22"/></name> <operator pos:line="68" pos:column="23">=<pos:position pos:line="68" pos:column="24"/></operator> <name><name pos:line="68" pos:column="25">servers<pos:position pos:line="68" pos:column="32"/></name><operator pos:line="68" pos:column="32">-&gt;<pos:position pos:line="68" pos:column="37"/></operator><name pos:line="68" pos:column="34">_peer<pos:position pos:line="68" pos:column="39"/></name></name><operator pos:line="68" pos:column="39">)<pos:position pos:line="68" pos:column="40"/></operator></expr>)<pos:position pos:line="68" pos:column="41"/></condition><then pos:line="68" pos:column="41"> <block pos:line="68" pos:column="42">{
        <expr_stmt><expr><name><name pos:line="69" pos:column="9">p<pos:position pos:line="69" pos:column="10"/></name><operator pos:line="69" pos:column="10">-&gt;<pos:position pos:line="69" pos:column="15"/></operator><name pos:line="69" pos:column="12">stats<pos:position pos:line="69" pos:column="17"/></name><operator pos:line="69" pos:column="17">.<pos:position pos:line="69" pos:column="18"/></operator><name pos:line="69" pos:column="18">fetches<pos:position pos:line="69" pos:column="25"/></name></name><operator pos:line="69" pos:column="25">++<pos:position pos:line="69" pos:column="27"/></operator></expr>;<pos:position pos:line="69" pos:column="28"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="70" pos:column="9">request<pos:position pos:line="70" pos:column="16"/></name><operator pos:line="70" pos:column="16">-&gt;<pos:position pos:line="70" pos:column="21"/></operator><name pos:line="70" pos:column="18">peer_login<pos:position pos:line="70" pos:column="28"/></name></name> <operator pos:line="70" pos:column="29">=<pos:position pos:line="70" pos:column="30"/></operator> <name><name pos:line="70" pos:column="31">p<pos:position pos:line="70" pos:column="32"/></name><operator pos:line="70" pos:column="32">-&gt;<pos:position pos:line="70" pos:column="37"/></operator><name pos:line="70" pos:column="34">login<pos:position pos:line="70" pos:column="39"/></name></name></expr>;<pos:position pos:line="70" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="71" pos:column="9">request<pos:position pos:line="71" pos:column="16"/></name><operator pos:line="71" pos:column="16">-&gt;<pos:position pos:line="71" pos:column="21"/></operator><name pos:line="71" pos:column="18">peer_domain<pos:position pos:line="71" pos:column="29"/></name></name> <operator pos:line="71" pos:column="30">=<pos:position pos:line="71" pos:column="31"/></operator> <name><name pos:line="71" pos:column="32">p<pos:position pos:line="71" pos:column="33"/></name><operator pos:line="71" pos:column="33">-&gt;<pos:position pos:line="71" pos:column="38"/></operator><name pos:line="71" pos:column="35">domain<pos:position pos:line="71" pos:column="41"/></name></name></expr>;<pos:position pos:line="71" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="72" pos:column="9">httpStart<pos:position pos:line="72" pos:column="18"/></name><argument_list pos:line="72" pos:column="18">(<argument><expr><name pos:line="72" pos:column="19">this<pos:position pos:line="72" pos:column="23"/></name></expr></argument>)<pos:position pos:line="72" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="73" pos:column="6"/></block></then> <else pos:line="73" pos:column="7">else <block pos:line="73" pos:column="12">{
        <expr_stmt><expr><name><name pos:line="74" pos:column="9">request<pos:position pos:line="74" pos:column="16"/></name><operator pos:line="74" pos:column="16">-&gt;<pos:position pos:line="74" pos:column="21"/></operator><name pos:line="74" pos:column="18">peer_login<pos:position pos:line="74" pos:column="28"/></name></name> <operator pos:line="74" pos:column="29">=<pos:position pos:line="74" pos:column="30"/></operator> <name pos:line="74" pos:column="31">NULL<pos:position pos:line="74" pos:column="35"/></name></expr>;<pos:position pos:line="74" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="75" pos:column="9">request<pos:position pos:line="75" pos:column="16"/></name><operator pos:line="75" pos:column="16">-&gt;<pos:position pos:line="75" pos:column="21"/></operator><name pos:line="75" pos:column="18">peer_domain<pos:position pos:line="75" pos:column="29"/></name></name> <operator pos:line="75" pos:column="30">=<pos:position pos:line="75" pos:column="31"/></operator> <name pos:line="75" pos:column="32">NULL<pos:position pos:line="75" pos:column="36"/></name></expr>;<pos:position pos:line="75" pos:column="37"/></expr_stmt>

        <switch pos:line="77" pos:column="9">switch <condition pos:line="77" pos:column="16">(<expr><name><name pos:line="77" pos:column="17">request<pos:position pos:line="77" pos:column="24"/></name><operator pos:line="77" pos:column="24">-&gt;<pos:position pos:line="77" pos:column="29"/></operator><name pos:line="77" pos:column="26">protocol<pos:position pos:line="77" pos:column="34"/></name></name></expr>)<pos:position pos:line="77" pos:column="35"/></condition> <block pos:line="77" pos:column="36">{
<cpp:if pos:line="78" pos:column="1">#<cpp:directive pos:line="78" pos:column="2">if<pos:position pos:line="78" pos:column="4"/></cpp:directive> <expr><name pos:line="78" pos:column="5">USE_SSL<pos:position pos:line="78" pos:column="12"/></name></expr></cpp:if>

        <case pos:line="80" pos:column="9">case <expr><name pos:line="80" pos:column="14">PROTO_HTTPS<pos:position pos:line="80" pos:column="25"/></name></expr>:<pos:position pos:line="80" pos:column="26"/></case>
            <expr_stmt><expr><call><name pos:line="81" pos:column="13">httpStart<pos:position pos:line="81" pos:column="22"/></name><argument_list pos:line="81" pos:column="22">(<argument><expr><name pos:line="81" pos:column="23">this<pos:position pos:line="81" pos:column="27"/></name></expr></argument>)<pos:position pos:line="81" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="29"/></expr_stmt>
            <break pos:line="82" pos:column="13">break;<pos:position pos:line="82" pos:column="19"/></break>
<cpp:endif pos:line="83" pos:column="1">#<cpp:directive pos:line="83" pos:column="2">endif<pos:position pos:line="83" pos:column="7"/></cpp:directive></cpp:endif>

        <case pos:line="85" pos:column="9">case <expr><name pos:line="85" pos:column="14">PROTO_HTTP<pos:position pos:line="85" pos:column="24"/></name></expr>:<pos:position pos:line="85" pos:column="25"/></case>
            <expr_stmt><expr><call><name pos:line="86" pos:column="13">httpStart<pos:position pos:line="86" pos:column="22"/></name><argument_list pos:line="86" pos:column="22">(<argument><expr><name pos:line="86" pos:column="23">this<pos:position pos:line="86" pos:column="27"/></name></expr></argument>)<pos:position pos:line="86" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="29"/></expr_stmt>
            <break pos:line="87" pos:column="13">break;<pos:position pos:line="87" pos:column="19"/></break>

        <case pos:line="89" pos:column="9">case <expr><name pos:line="89" pos:column="14">PROTO_GOPHER<pos:position pos:line="89" pos:column="26"/></name></expr>:<pos:position pos:line="89" pos:column="27"/></case>
            <expr_stmt><expr><call><name pos:line="90" pos:column="13">gopherStart<pos:position pos:line="90" pos:column="24"/></name><argument_list pos:line="90" pos:column="24">(<argument><expr><name pos:line="90" pos:column="25">this<pos:position pos:line="90" pos:column="29"/></name></expr></argument>)<pos:position pos:line="90" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="31"/></expr_stmt>
            <break pos:line="91" pos:column="13">break;<pos:position pos:line="91" pos:column="19"/></break>

        <case pos:line="93" pos:column="9">case <expr><name pos:line="93" pos:column="14">PROTO_FTP<pos:position pos:line="93" pos:column="23"/></name></expr>:<pos:position pos:line="93" pos:column="24"/></case>
            <expr_stmt><expr><call><name pos:line="94" pos:column="13">ftpStart<pos:position pos:line="94" pos:column="21"/></name><argument_list pos:line="94" pos:column="21">(<argument><expr><name pos:line="94" pos:column="22">this<pos:position pos:line="94" pos:column="26"/></name></expr></argument>)<pos:position pos:line="94" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="28"/></expr_stmt>
            <break pos:line="95" pos:column="13">break;<pos:position pos:line="95" pos:column="19"/></break>

        <case pos:line="97" pos:column="9">case <expr><name pos:line="97" pos:column="14">PROTO_CACHEOBJ<pos:position pos:line="97" pos:column="28"/></name></expr>:<pos:position pos:line="97" pos:column="29"/></case>

        <case pos:line="99" pos:column="9">case <expr><name pos:line="99" pos:column="14">PROTO_INTERNAL<pos:position pos:line="99" pos:column="28"/></name></expr>:<pos:position pos:line="99" pos:column="29"/></case>

        <case pos:line="101" pos:column="9">case <expr><name pos:line="101" pos:column="14">PROTO_URN<pos:position pos:line="101" pos:column="23"/></name></expr>:<pos:position pos:line="101" pos:column="24"/></case>
            <expr_stmt><expr><call><name pos:line="102" pos:column="13">fatal_dump<pos:position pos:line="102" pos:column="23"/></name><argument_list pos:line="102" pos:column="23">(<argument><expr><literal type="string" pos:line="102" pos:column="24">"Should never get here"<pos:position pos:line="102" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="102" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="49"/></expr_stmt>
            <break pos:line="103" pos:column="13">break;<pos:position pos:line="103" pos:column="19"/></break>

        <case pos:line="105" pos:column="9">case <expr><name pos:line="105" pos:column="14">PROTO_WHOIS<pos:position pos:line="105" pos:column="25"/></name></expr>:<pos:position pos:line="105" pos:column="26"/></case>
            <expr_stmt><expr><call><name pos:line="106" pos:column="13">whoisStart<pos:position pos:line="106" pos:column="23"/></name><argument_list pos:line="106" pos:column="23">(<argument><expr><name pos:line="106" pos:column="24">this<pos:position pos:line="106" pos:column="28"/></name></expr></argument>)<pos:position pos:line="106" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="30"/></expr_stmt>
            <break pos:line="107" pos:column="13">break;<pos:position pos:line="107" pos:column="19"/></break>

        <case pos:line="109" pos:column="9">case <expr><name pos:line="109" pos:column="14">PROTO_WAIS<pos:position pos:line="109" pos:column="24"/></name></expr>:<pos:position pos:line="109" pos:column="25"/></case>	<comment type="block" pos:line="109" pos:column="33">/* Not implemented */</comment>

        <default pos:line="111" pos:column="9">default:<pos:position pos:line="111" pos:column="17"/></default>
            <expr_stmt><expr><call><name pos:line="112" pos:column="13">debugs<pos:position pos:line="112" pos:column="19"/></name><argument_list pos:line="112" pos:column="19">(<argument><expr><literal type="number" pos:line="112" pos:column="20">17<pos:position pos:line="112" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="112" pos:column="24">1<pos:position pos:line="112" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="112" pos:column="27">"fwdDispatch: Cannot retrieve '"<pos:position pos:line="112" pos:column="59"/></literal> <operator pos:line="112" pos:column="60">&lt;&lt;<pos:position pos:line="112" pos:column="68"/></operator> <call><name><name pos:line="112" pos:column="63">entry<pos:position pos:line="112" pos:column="68"/></name><operator pos:line="112" pos:column="68">-&gt;<pos:position pos:line="112" pos:column="73"/></operator><name pos:line="112" pos:column="70">url<pos:position pos:line="112" pos:column="73"/></name></name><argument_list pos:line="112" pos:column="73">()<pos:position pos:line="112" pos:column="75"/></argument_list></call> <operator pos:line="112" pos:column="76">&lt;&lt;<pos:position pos:line="112" pos:column="84"/></operator> <literal type="string" pos:line="112" pos:column="79">"'"<pos:position pos:line="112" pos:column="82"/></literal></expr></argument> )<pos:position pos:line="112" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="85"/></expr_stmt>
            <decl_stmt><decl><type><name pos:line="113" pos:column="13">ErrorState<pos:position pos:line="113" pos:column="23"/></name> <modifier pos:line="113" pos:column="24">*<pos:position pos:line="113" pos:column="25"/></modifier></type><name pos:line="113" pos:column="25">anErr<pos:position pos:line="113" pos:column="30"/></name> <init pos:line="113" pos:column="31">= <expr><call><name pos:line="113" pos:column="33">errorCon<pos:position pos:line="113" pos:column="41"/></name><argument_list pos:line="113" pos:column="41">(<argument><expr><name pos:line="113" pos:column="42">ERR_UNSUP_REQ<pos:position pos:line="113" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="113" pos:column="57">HTTP_BAD_REQUEST<pos:position pos:line="113" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="113" pos:column="75">request<pos:position pos:line="113" pos:column="82"/></name></expr></argument>)<pos:position pos:line="113" pos:column="83"/></argument_list></call></expr></init></decl>;<pos:position pos:line="113" pos:column="84"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="114" pos:column="13">fail<pos:position pos:line="114" pos:column="17"/></name><argument_list pos:line="114" pos:column="17">(<argument><expr><name pos:line="114" pos:column="18">anErr<pos:position pos:line="114" pos:column="23"/></name></expr></argument>)<pos:position pos:line="114" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="25"/></expr_stmt>
            <comment type="block" pos:line="115" pos:column="13">/*
             * Force a persistent connection to be closed because
             * some Netscape browsers have a bug that sends CONNECT
             * requests as GET's over persistent connections.
             */</comment>
            <expr_stmt><expr><name><name pos:line="120" pos:column="13">request<pos:position pos:line="120" pos:column="20"/></name><operator pos:line="120" pos:column="20">-&gt;<pos:position pos:line="120" pos:column="25"/></operator><name pos:line="120" pos:column="22">flags<pos:position pos:line="120" pos:column="27"/></name><operator pos:line="120" pos:column="27">.<pos:position pos:line="120" pos:column="28"/></operator><name pos:line="120" pos:column="28">proxy_keepalive<pos:position pos:line="120" pos:column="43"/></name></name> <operator pos:line="120" pos:column="44">=<pos:position pos:line="120" pos:column="45"/></operator> <literal type="number" pos:line="120" pos:column="46">0<pos:position pos:line="120" pos:column="47"/></literal></expr>;<pos:position pos:line="120" pos:column="48"/></expr_stmt>
            <comment type="block" pos:line="121" pos:column="13">/*
             * Set the dont_retry flag becuase this is not a
             * transient (network) error; its a bug.
             */</comment>
            <expr_stmt><expr><name><name pos:line="125" pos:column="13">flags<pos:position pos:line="125" pos:column="18"/></name><operator pos:line="125" pos:column="18">.<pos:position pos:line="125" pos:column="19"/></operator><name pos:line="125" pos:column="19">dont_retry<pos:position pos:line="125" pos:column="29"/></name></name> <operator pos:line="125" pos:column="30">=<pos:position pos:line="125" pos:column="31"/></operator> <literal type="number" pos:line="125" pos:column="32">1<pos:position pos:line="125" pos:column="33"/></literal></expr>;<pos:position pos:line="125" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="126" pos:column="13">comm_close<pos:position pos:line="126" pos:column="23"/></name><argument_list pos:line="126" pos:column="23">(<argument><expr><name pos:line="126" pos:column="24">server_fd<pos:position pos:line="126" pos:column="33"/></name></expr></argument>)<pos:position pos:line="126" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="35"/></expr_stmt>
            <break pos:line="127" pos:column="13">break;<pos:position pos:line="127" pos:column="19"/></break>
        }<pos:position pos:line="128" pos:column="10"/></block></switch>
    }<pos:position pos:line="129" pos:column="6"/></block></else></if>
}<pos:position pos:line="130" pos:column="2"/></block></function></unit>
