<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6799_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ESIAssign<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">evaluateVariable<pos:position pos:line="2" pos:column="28"/></name></name><parameter_list pos:line="2" pos:column="28">()<pos:position pos:line="2" pos:column="30"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><call><name><name pos:line="4" pos:column="9">variable<pos:position pos:line="4" pos:column="17"/></name><operator pos:line="4" pos:column="17">.<pos:position pos:line="4" pos:column="18"/></operator><name pos:line="4" pos:column="18">getRaw<pos:position pos:line="4" pos:column="24"/></name></name><argument_list pos:line="4" pos:column="24">()<pos:position pos:line="4" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="27"/></condition><then pos:line="4" pos:column="27">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="5" pos:column="9">variable<pos:position pos:line="5" pos:column="17"/></name><operator pos:line="5" pos:column="17">-&gt;<pos:position pos:line="5" pos:column="22"/></operator><name pos:line="5" pos:column="19">process<pos:position pos:line="5" pos:column="26"/></name></name> <argument_list pos:line="5" pos:column="27">(<argument><expr><literal type="boolean" pos:line="5" pos:column="28">false<pos:position pos:line="5" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="35"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name pos:line="7" pos:column="5">variable<pos:position pos:line="7" pos:column="13"/></name> <operator pos:line="7" pos:column="14">=<pos:position pos:line="7" pos:column="15"/></operator> <name pos:line="7" pos:column="16">NULL<pos:position pos:line="7" pos:column="20"/></name></expr>;<pos:position pos:line="7" pos:column="21"/></expr_stmt>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><call><name><name pos:line="9" pos:column="9">unevaluatedVariable<pos:position pos:line="9" pos:column="28"/></name><operator pos:line="9" pos:column="28">.<pos:position pos:line="9" pos:column="29"/></operator><name pos:line="9" pos:column="29">size<pos:position pos:line="9" pos:column="33"/></name></name><argument_list pos:line="9" pos:column="33">()<pos:position pos:line="9" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="36"/></condition><then pos:line="9" pos:column="36"> <block pos:line="9" pos:column="37">{
        <expr_stmt><expr><call><name><name pos:line="10" pos:column="9">varState<pos:position pos:line="10" pos:column="17"/></name><operator pos:line="10" pos:column="17">-&gt;<pos:position pos:line="10" pos:column="22"/></operator><name pos:line="10" pos:column="19">feedData<pos:position pos:line="10" pos:column="27"/></name></name><argument_list pos:line="10" pos:column="27">(<argument><expr><call><name><name pos:line="10" pos:column="28">unevaluatedVariable<pos:position pos:line="10" pos:column="47"/></name><operator pos:line="10" pos:column="47">.<pos:position pos:line="10" pos:column="48"/></operator><name pos:line="10" pos:column="48">rawBuf<pos:position pos:line="10" pos:column="54"/></name></name><argument_list pos:line="10" pos:column="54">()<pos:position pos:line="10" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="10" pos:column="58">unevaluatedVariable<pos:position pos:line="10" pos:column="77"/></name><operator pos:line="10" pos:column="77">.<pos:position pos:line="10" pos:column="78"/></operator><name pos:line="10" pos:column="78">size<pos:position pos:line="10" pos:column="82"/></name></name><argument_list pos:line="10" pos:column="82">()<pos:position pos:line="10" pos:column="84"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="86"/></expr_stmt>
        <decl_stmt><decl><type><name pos:line="11" pos:column="9">char<pos:position pos:line="11" pos:column="13"/></name> <specifier pos:line="11" pos:column="14">const<pos:position pos:line="11" pos:column="19"/></specifier> <modifier pos:line="11" pos:column="20">*<pos:position pos:line="11" pos:column="21"/></modifier></type><name pos:line="11" pos:column="21">result<pos:position pos:line="11" pos:column="27"/></name> <init pos:line="11" pos:column="28">= <expr><call><name><name pos:line="11" pos:column="30">varState<pos:position pos:line="11" pos:column="38"/></name><operator pos:line="11" pos:column="38">-&gt;<pos:position pos:line="11" pos:column="43"/></operator><name pos:line="11" pos:column="40">extractChar<pos:position pos:line="11" pos:column="51"/></name></name> <argument_list pos:line="11" pos:column="52">()<pos:position pos:line="11" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="55"/></decl_stmt>

        <comment type="block" pos:line="13" pos:column="9">/* Consider activating this, when we want to evaluate variables to a
         * value
         */</comment>
        <comment type="line" pos:line="16" pos:column="9">// setTestResult(ESIExpression::Evaluate (expression));</comment>

        <expr_stmt><expr><name pos:line="18" pos:column="9">value<pos:position pos:line="18" pos:column="14"/></name> <operator pos:line="18" pos:column="15">=<pos:position pos:line="18" pos:column="16"/></operator> <operator pos:line="18" pos:column="17">new<pos:position pos:line="18" pos:column="20"/></operator> <call><name pos:line="18" pos:column="21">ESIVariableExpression<pos:position pos:line="18" pos:column="42"/></name> <argument_list pos:line="18" pos:column="43">(<argument><expr><name pos:line="18" pos:column="44">result<pos:position pos:line="18" pos:column="50"/></name></expr></argument>)<pos:position pos:line="18" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="52"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="20" pos:column="9">safe_free<pos:position pos:line="20" pos:column="18"/></name> <argument_list pos:line="20" pos:column="19">(<argument><expr><name pos:line="20" pos:column="20">result<pos:position pos:line="20" pos:column="26"/></name></expr></argument>)<pos:position pos:line="20" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
