<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1205_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">sendSignal<pos:position pos:line="2" pos:column="11"/></name><parameter_list pos:line="2" pos:column="11">(<parameter><decl><type><name pos:line="2" pos:column="12">void<pos:position pos:line="2" pos:column="16"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="17"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><name pos:line="4" pos:column="5">debug_log<pos:position pos:line="4" pos:column="14"/></name> <operator pos:line="4" pos:column="15">=<pos:position pos:line="4" pos:column="16"/></operator> <name pos:line="4" pos:column="17">stderr<pos:position pos:line="4" pos:column="23"/></name></expr>;<pos:position pos:line="4" pos:column="24"/></expr_stmt>

<cpp:if pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">if<pos:position pos:line="6" pos:column="4"/></cpp:directive> <expr><name pos:line="6" pos:column="5">USE_WIN32_SERVICE<pos:position pos:line="6" pos:column="22"/></name></expr></cpp:if>
    <comment type="line" pos:line="7" pos:column="5">// WIN32_sendSignal() does not need the PID value to signal,</comment>
    <comment type="line" pos:line="8" pos:column="5">// but we must exit if there is no valid PID (TODO: Why?).</comment>
    <expr_stmt><expr><operator pos:line="9" pos:column="5">(<pos:position pos:line="9" pos:column="6"/></operator><name pos:line="9" pos:column="6">void<pos:position pos:line="9" pos:column="10"/></name><operator pos:line="9" pos:column="10">)<pos:position pos:line="9" pos:column="11"/></operator><call><name><name pos:line="9" pos:column="11">Instance<pos:position pos:line="9" pos:column="19"/></name><operator pos:line="9" pos:column="19">::<pos:position pos:line="9" pos:column="21"/></operator><name pos:line="9" pos:column="21">Other<pos:position pos:line="9" pos:column="26"/></name></name><argument_list pos:line="9" pos:column="26">()<pos:position pos:line="9" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="29"/></expr_stmt>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><operator pos:line="10" pos:column="9">!<pos:position pos:line="10" pos:column="10"/></operator><name pos:line="10" pos:column="10">opt_signal_service<pos:position pos:line="10" pos:column="28"/></name></expr>)<pos:position pos:line="10" pos:column="29"/></condition><then pos:line="10" pos:column="29">
        <block type="pseudo"><throw pos:line="11" pos:column="9">throw <expr><call><name pos:line="11" pos:column="15">TexcHere<pos:position pos:line="11" pos:column="23"/></name><argument_list pos:line="11" pos:column="23">(<argument><expr><literal type="string" pos:line="11" pos:column="24">"missing -n command line switch"<pos:position pos:line="11" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="58"/></throw></block></then></if>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">WIN32_sendSignal<pos:position pos:line="12" pos:column="21"/></name><argument_list pos:line="12" pos:column="21">(<argument><expr><name pos:line="12" pos:column="22">opt_send_signal<pos:position pos:line="12" pos:column="37"/></name></expr></argument>)<pos:position pos:line="12" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="39"/></expr_stmt>
<cpp:else pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">else<pos:position pos:line="13" pos:column="6"/></cpp:directive></cpp:else>
    <decl_stmt><decl><type><specifier pos:line="14" pos:column="5">const<pos:position pos:line="14" pos:column="10"/></specifier> <specifier pos:line="14" pos:column="11">auto<pos:position pos:line="14" pos:column="15"/></specifier></type> <name pos:line="14" pos:column="16">pid<pos:position pos:line="14" pos:column="19"/></name> <init pos:line="14" pos:column="20">= <expr><call><name><name pos:line="14" pos:column="22">Instance<pos:position pos:line="14" pos:column="30"/></name><operator pos:line="14" pos:column="30">::<pos:position pos:line="14" pos:column="32"/></operator><name pos:line="14" pos:column="32">Other<pos:position pos:line="14" pos:column="37"/></name></name><argument_list pos:line="14" pos:column="37">()<pos:position pos:line="14" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="40"/></decl_stmt>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><call><name pos:line="15" pos:column="9">kill<pos:position pos:line="15" pos:column="13"/></name><argument_list pos:line="15" pos:column="13">(<argument><expr><name pos:line="15" pos:column="14">pid<pos:position pos:line="15" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="19">opt_send_signal<pos:position pos:line="15" pos:column="34"/></name></expr></argument>)<pos:position pos:line="15" pos:column="35"/></argument_list></call> <operator pos:line="15" pos:column="36">&amp;&amp;<pos:position pos:line="15" pos:column="46"/></operator>
            <comment type="block" pos:line="16" pos:column="13">/* ignore permissions if just running check */</comment>
            <operator pos:line="17" pos:column="13">!<pos:position pos:line="17" pos:column="14"/></operator><operator pos:line="17" pos:column="14">(<pos:position pos:line="17" pos:column="15"/></operator><name pos:line="17" pos:column="15">opt_send_signal<pos:position pos:line="17" pos:column="30"/></name> <operator pos:line="17" pos:column="31">==<pos:position pos:line="17" pos:column="33"/></operator> <literal type="number" pos:line="17" pos:column="34">0<pos:position pos:line="17" pos:column="35"/></literal> <operator pos:line="17" pos:column="36">&amp;&amp;<pos:position pos:line="17" pos:column="46"/></operator> <name pos:line="17" pos:column="39">errno<pos:position pos:line="17" pos:column="44"/></name> <operator pos:line="17" pos:column="45">==<pos:position pos:line="17" pos:column="47"/></operator> <name pos:line="17" pos:column="48">EPERM<pos:position pos:line="17" pos:column="53"/></name><operator pos:line="17" pos:column="53">)<pos:position pos:line="17" pos:column="54"/></operator></expr>)<pos:position pos:line="17" pos:column="55"/></condition><then pos:line="17" pos:column="55"> <block pos:line="17" pos:column="56">{
        <decl_stmt><decl><type><specifier pos:line="18" pos:column="9">const<pos:position pos:line="18" pos:column="14"/></specifier> <specifier pos:line="18" pos:column="15">auto<pos:position pos:line="18" pos:column="19"/></specifier></type> <name pos:line="18" pos:column="20">savedErrno<pos:position pos:line="18" pos:column="30"/></name> <init pos:line="18" pos:column="31">= <expr><name pos:line="18" pos:column="33">errno<pos:position pos:line="18" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="18" pos:column="39"/></decl_stmt>
        <throw pos:line="19" pos:column="9">throw <expr><call><name pos:line="19" pos:column="15">TexcHere<pos:position pos:line="19" pos:column="23"/></name><argument_list pos:line="19" pos:column="23">(<argument><expr><call><name pos:line="19" pos:column="24">ToSBuf<pos:position pos:line="19" pos:column="30"/></name><argument_list pos:line="19" pos:column="30">(<argument><expr><literal type="string" pos:line="19" pos:column="31">"failed to send signal "<pos:position pos:line="19" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="57">opt_send_signal<pos:position pos:line="19" pos:column="72"/></name></expr></argument>,
                              <argument><expr><literal type="string" pos:line="20" pos:column="31">" to Squid instance with PID "<pos:position pos:line="20" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="63">pid<pos:position pos:line="20" pos:column="66"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="68">": "<pos:position pos:line="20" pos:column="72"/></literal></expr></argument>, <argument><expr><call><name pos:line="20" pos:column="74">xstrerr<pos:position pos:line="20" pos:column="81"/></name><argument_list pos:line="20" pos:column="81">(<argument><expr><name pos:line="20" pos:column="82">savedErrno<pos:position pos:line="20" pos:column="92"/></name></expr></argument>)<pos:position pos:line="20" pos:column="93"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="94"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="95"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="96"/></throw>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>
<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif<pos:position pos:line="22" pos:column="7"/></cpp:directive></cpp:endif>
    <comment type="block" pos:line="23" pos:column="5">/* signal successfully sent */</comment>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
