<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4566_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">sfileno<pos:position pos:line="1" pos:column="8"/></name></type>
<name><name pos:line="2" pos:column="1">CossSwapDir<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">allocate<pos:position pos:line="2" pos:column="22"/></name></name><parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><specifier pos:line="2" pos:column="23">const<pos:position pos:line="2" pos:column="28"/></specifier> <name pos:line="2" pos:column="29">StoreEntry<pos:position pos:line="2" pos:column="39"/></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier></type> <name pos:line="2" pos:column="42">e<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="45">int<pos:position pos:line="2" pos:column="48"/></name></type> <name pos:line="2" pos:column="49">which<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="55"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">CossMemBuf<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">newmb<pos:position pos:line="4" pos:column="22"/></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">off_t<pos:position pos:line="5" pos:column="10"/></name></type> <name pos:line="5" pos:column="11">retofs<pos:position pos:line="5" pos:column="17"/></name></decl>;<pos:position pos:line="5" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">off_t<pos:position pos:line="6" pos:column="10"/></name></type> <name pos:line="6" pos:column="11">allocsize<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">coll<pos:position pos:line="7" pos:column="13"/></name> <init pos:line="7" pos:column="14">= <expr><literal type="number" pos:line="7" pos:column="16">0<pos:position pos:line="7" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">sfileno<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">checkf<pos:position pos:line="8" pos:column="19"/></name></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>

    <comment type="block" pos:line="10" pos:column="5">/* Make sure we chcek collisions if reallocating */</comment>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">which<pos:position pos:line="12" pos:column="14"/></name> <operator pos:line="12" pos:column="15">==<pos:position pos:line="12" pos:column="17"/></operator> <name pos:line="12" pos:column="18">COSS_ALLOC_REALLOC<pos:position pos:line="12" pos:column="36"/></name></expr>)<pos:position pos:line="12" pos:column="37"/></condition><then pos:line="12" pos:column="37"> <block pos:line="12" pos:column="38">{
        <expr_stmt><expr><name pos:line="13" pos:column="9">checkf<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">=<pos:position pos:line="13" pos:column="17"/></operator> <name><name pos:line="13" pos:column="18">e<pos:position pos:line="13" pos:column="19"/></name><operator pos:line="13" pos:column="19">-&gt;<pos:position pos:line="13" pos:column="24"/></operator><name pos:line="13" pos:column="21">swap_filen<pos:position pos:line="13" pos:column="31"/></name></name></expr>;<pos:position pos:line="13" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="14" pos:column="9">StoreFScoss<pos:position pos:line="14" pos:column="20"/></name><operator pos:line="14" pos:column="20">::<pos:position pos:line="14" pos:column="22"/></operator><name pos:line="14" pos:column="22">GetInstance<pos:position pos:line="14" pos:column="33"/></name></name><argument_list pos:line="14" pos:column="33">()<pos:position pos:line="14" pos:column="35"/></argument_list></call><operator pos:line="14" pos:column="35">.<pos:position pos:line="14" pos:column="36"/></operator><name><name pos:line="14" pos:column="36">stats<pos:position pos:line="14" pos:column="41"/></name><operator pos:line="14" pos:column="41">.<pos:position pos:line="14" pos:column="42"/></operator><name pos:line="14" pos:column="42">alloc<pos:position pos:line="14" pos:column="47"/></name><operator pos:line="14" pos:column="47">.<pos:position pos:line="14" pos:column="48"/></operator><name pos:line="14" pos:column="48">realloc<pos:position pos:line="14" pos:column="55"/></name></name><operator pos:line="14" pos:column="55">++<pos:position pos:line="14" pos:column="57"/></operator></expr>;<pos:position pos:line="14" pos:column="58"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></then> <else pos:line="15" pos:column="7">else <block pos:line="15" pos:column="12">{
        <expr_stmt><expr><name pos:line="16" pos:column="9">checkf<pos:position pos:line="16" pos:column="15"/></name> <operator pos:line="16" pos:column="16">=<pos:position pos:line="16" pos:column="17"/></operator> <operator pos:line="16" pos:column="18">-<pos:position pos:line="16" pos:column="19"/></operator><literal type="number" pos:line="16" pos:column="19">1<pos:position pos:line="16" pos:column="20"/></literal></expr>;<pos:position pos:line="16" pos:column="21"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="17" pos:column="9">StoreFScoss<pos:position pos:line="17" pos:column="20"/></name><operator pos:line="17" pos:column="20">::<pos:position pos:line="17" pos:column="22"/></operator><name pos:line="17" pos:column="22">GetInstance<pos:position pos:line="17" pos:column="33"/></name></name><argument_list pos:line="17" pos:column="33">()<pos:position pos:line="17" pos:column="35"/></argument_list></call><operator pos:line="17" pos:column="35">.<pos:position pos:line="17" pos:column="36"/></operator><name><name pos:line="17" pos:column="36">stats<pos:position pos:line="17" pos:column="41"/></name><operator pos:line="17" pos:column="41">.<pos:position pos:line="17" pos:column="42"/></operator><name pos:line="17" pos:column="42">alloc<pos:position pos:line="17" pos:column="47"/></name><operator pos:line="17" pos:column="47">.<pos:position pos:line="17" pos:column="48"/></operator><name pos:line="17" pos:column="48">alloc<pos:position pos:line="17" pos:column="53"/></name></name><operator pos:line="17" pos:column="53">++<pos:position pos:line="17" pos:column="55"/></operator></expr>;<pos:position pos:line="17" pos:column="56"/></expr_stmt>
    }<pos:position pos:line="18" pos:column="6"/></block></else></if>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name><name pos:line="20" pos:column="9">e<pos:position pos:line="20" pos:column="10"/></name><operator pos:line="20" pos:column="10">-&gt;<pos:position pos:line="20" pos:column="15"/></operator><name pos:line="20" pos:column="12">swap_file_sz<pos:position pos:line="20" pos:column="24"/></name></name> <operator pos:line="20" pos:column="25">&gt;<pos:position pos:line="20" pos:column="29"/></operator> <literal type="number" pos:line="20" pos:column="27">0<pos:position pos:line="20" pos:column="28"/></literal></expr>)<pos:position pos:line="20" pos:column="29"/></condition><then pos:line="20" pos:column="29">
        <block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="9">allocsize<pos:position pos:line="21" pos:column="18"/></name> <operator pos:line="21" pos:column="19">=<pos:position pos:line="21" pos:column="20"/></operator> <name><name pos:line="21" pos:column="21">e<pos:position pos:line="21" pos:column="22"/></name><operator pos:line="21" pos:column="22">-&gt;<pos:position pos:line="21" pos:column="27"/></operator><name pos:line="21" pos:column="24">swap_file_sz<pos:position pos:line="21" pos:column="36"/></name></name></expr>;<pos:position pos:line="21" pos:column="37"/></expr_stmt></block></then>
    <else pos:line="22" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="9">allocsize<pos:position pos:line="23" pos:column="18"/></name> <operator pos:line="23" pos:column="19">=<pos:position pos:line="23" pos:column="20"/></operator> <call><name><name pos:line="23" pos:column="21">e<pos:position pos:line="23" pos:column="22"/></name><operator pos:line="23" pos:column="22">-&gt;<pos:position pos:line="23" pos:column="27"/></operator><name pos:line="23" pos:column="24">objectLen<pos:position pos:line="23" pos:column="33"/></name></name><argument_list pos:line="23" pos:column="33">()<pos:position pos:line="23" pos:column="35"/></argument_list></call> <operator pos:line="23" pos:column="36">+<pos:position pos:line="23" pos:column="37"/></operator> <name><name pos:line="23" pos:column="38">e<pos:position pos:line="23" pos:column="39"/></name><operator pos:line="23" pos:column="39">-&gt;<pos:position pos:line="23" pos:column="44"/></operator><name pos:line="23" pos:column="41">mem_obj<pos:position pos:line="23" pos:column="48"/></name><operator pos:line="23" pos:column="48">-&gt;<pos:position pos:line="23" pos:column="53"/></operator><name pos:line="23" pos:column="50">swap_hdr_sz<pos:position pos:line="23" pos:column="61"/></name></name></expr>;<pos:position pos:line="23" pos:column="62"/></expr_stmt></block></else></if>

    <comment type="block" pos:line="25" pos:column="5">/* Check if we have overflowed the disk .. */</comment>
    <comment type="block" pos:line="26" pos:column="5">/* max_size is int, so cast to (off_t) *before* bit-shifting */</comment>
    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><operator pos:line="27" pos:column="9">(<pos:position pos:line="27" pos:column="10"/></operator><name pos:line="27" pos:column="10">current_offset<pos:position pos:line="27" pos:column="24"/></name> <operator pos:line="27" pos:column="25">+<pos:position pos:line="27" pos:column="26"/></operator> <name pos:line="27" pos:column="27">allocsize<pos:position pos:line="27" pos:column="36"/></name><operator pos:line="27" pos:column="36">)<pos:position pos:line="27" pos:column="37"/></operator> <operator pos:line="27" pos:column="38">&gt;<pos:position pos:line="27" pos:column="42"/></operator> <operator pos:line="27" pos:column="40">(<pos:position pos:line="27" pos:column="41"/></operator><operator pos:line="27" pos:column="41">(<pos:position pos:line="27" pos:column="42"/></operator><name pos:line="27" pos:column="42">off_t<pos:position pos:line="27" pos:column="47"/></name><operator pos:line="27" pos:column="47">)<pos:position pos:line="27" pos:column="48"/></operator><name pos:line="27" pos:column="48">max_size<pos:position pos:line="27" pos:column="56"/></name> <operator pos:line="27" pos:column="57">&lt;&lt;<pos:position pos:line="27" pos:column="65"/></operator> <literal type="number" pos:line="27" pos:column="60">10<pos:position pos:line="27" pos:column="62"/></literal><operator pos:line="27" pos:column="62">)<pos:position pos:line="27" pos:column="63"/></operator></expr>)<pos:position pos:line="27" pos:column="64"/></condition><then pos:line="27" pos:column="64"> <block pos:line="27" pos:column="65">{
        <comment type="block" pos:line="28" pos:column="9">/*
         * tried to allocate past the end of the disk, so wrap
         * back to the beginning
         */</comment>
        <expr_stmt><expr><call><name><name pos:line="32" pos:column="9">StoreFScoss<pos:position pos:line="32" pos:column="20"/></name><operator pos:line="32" pos:column="20">::<pos:position pos:line="32" pos:column="22"/></operator><name pos:line="32" pos:column="22">GetInstance<pos:position pos:line="32" pos:column="33"/></name></name><argument_list pos:line="32" pos:column="33">()<pos:position pos:line="32" pos:column="35"/></argument_list></call><operator pos:line="32" pos:column="35">.<pos:position pos:line="32" pos:column="36"/></operator><name><name pos:line="32" pos:column="36">stats<pos:position pos:line="32" pos:column="41"/></name><operator pos:line="32" pos:column="41">.<pos:position pos:line="32" pos:column="42"/></operator><name pos:line="32" pos:column="42">disk_overflows<pos:position pos:line="32" pos:column="56"/></name></name><operator pos:line="32" pos:column="56">++<pos:position pos:line="32" pos:column="58"/></operator></expr>;<pos:position pos:line="32" pos:column="59"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="33" pos:column="9">current_membuf<pos:position pos:line="33" pos:column="23"/></name><operator pos:line="33" pos:column="23">-&gt;<pos:position pos:line="33" pos:column="28"/></operator><name pos:line="33" pos:column="25">flags<pos:position pos:line="33" pos:column="30"/></name><operator pos:line="33" pos:column="30">.<pos:position pos:line="33" pos:column="31"/></operator><name pos:line="33" pos:column="31">full<pos:position pos:line="33" pos:column="35"/></name></name> <operator pos:line="33" pos:column="36">=<pos:position pos:line="33" pos:column="37"/></operator> <literal type="number" pos:line="33" pos:column="38">1<pos:position pos:line="33" pos:column="39"/></literal></expr>;<pos:position pos:line="33" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="34" pos:column="9">current_membuf<pos:position pos:line="34" pos:column="23"/></name><operator pos:line="34" pos:column="23">-&gt;<pos:position pos:line="34" pos:column="28"/></operator><name pos:line="34" pos:column="25">diskend<pos:position pos:line="34" pos:column="32"/></name></name> <operator pos:line="34" pos:column="33">=<pos:position pos:line="34" pos:column="34"/></operator> <name pos:line="34" pos:column="35">current_offset<pos:position pos:line="34" pos:column="49"/></name></expr>;<pos:position pos:line="34" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="35" pos:column="9">current_membuf<pos:position pos:line="35" pos:column="23"/></name><operator pos:line="35" pos:column="23">-&gt;<pos:position pos:line="35" pos:column="28"/></operator><name pos:line="35" pos:column="25">maybeWrite<pos:position pos:line="35" pos:column="35"/></name></name><argument_list pos:line="35" pos:column="35">(<argument><expr><name pos:line="35" pos:column="36">this<pos:position pos:line="35" pos:column="40"/></name></expr></argument>)<pos:position pos:line="35" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><name pos:line="36" pos:column="9">current_offset<pos:position pos:line="36" pos:column="23"/></name> <operator pos:line="36" pos:column="24">=<pos:position pos:line="36" pos:column="25"/></operator> <literal type="number" pos:line="36" pos:column="26">0<pos:position pos:line="36" pos:column="27"/></literal></expr>;<pos:position pos:line="36" pos:column="28"/></expr_stmt>	<comment type="block" pos:line="36" pos:column="33">/* wrap back to beginning */</comment>
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">debugs<pos:position pos:line="37" pos:column="15"/></name><argument_list pos:line="37" pos:column="15">(<argument><expr><literal type="number" pos:line="37" pos:column="16">79<pos:position pos:line="37" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="20">2<pos:position pos:line="37" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="23">"CossSwapDir::allocate: wrap to 0"<pos:position pos:line="37" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="59"/></expr_stmt>

        <expr_stmt><expr><name pos:line="39" pos:column="9">newmb<pos:position pos:line="39" pos:column="14"/></name> <operator pos:line="39" pos:column="15">=<pos:position pos:line="39" pos:column="16"/></operator> <call><name pos:line="39" pos:column="17">createMemBuf<pos:position pos:line="39" pos:column="29"/></name><argument_list pos:line="39" pos:column="29">(<argument><expr><literal type="number" pos:line="39" pos:column="30">0<pos:position pos:line="39" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="39" pos:column="33">checkf<pos:position pos:line="39" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="41">&amp;<pos:position pos:line="39" pos:column="46"/></operator><name pos:line="39" pos:column="42">coll<pos:position pos:line="39" pos:column="46"/></name></expr></argument>)<pos:position pos:line="39" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="48"/></expr_stmt>
        <expr_stmt><expr><name pos:line="40" pos:column="9">current_membuf<pos:position pos:line="40" pos:column="23"/></name> <operator pos:line="40" pos:column="24">=<pos:position pos:line="40" pos:column="25"/></operator> <name pos:line="40" pos:column="26">newmb<pos:position pos:line="40" pos:column="31"/></name></expr>;<pos:position pos:line="40" pos:column="32"/></expr_stmt>

        <comment type="block" pos:line="42" pos:column="9">/* Check if we have overflowed the MemBuf */</comment>
    }<pos:position pos:line="43" pos:column="6"/></block></then> <elseif pos:line="43" pos:column="7">else <if pos:line="43" pos:column="12">if <condition pos:line="43" pos:column="15">(<expr><operator pos:line="43" pos:column="16">(<pos:position pos:line="43" pos:column="17"/></operator><name pos:line="43" pos:column="17">current_offset<pos:position pos:line="43" pos:column="31"/></name> <operator pos:line="43" pos:column="32">+<pos:position pos:line="43" pos:column="33"/></operator> <name pos:line="43" pos:column="34">allocsize<pos:position pos:line="43" pos:column="43"/></name><operator pos:line="43" pos:column="43">)<pos:position pos:line="43" pos:column="44"/></operator> <operator pos:line="43" pos:column="45">&gt;=<pos:position pos:line="43" pos:column="50"/></operator> <name><name pos:line="43" pos:column="48">current_membuf<pos:position pos:line="43" pos:column="62"/></name><operator pos:line="43" pos:column="62">-&gt;<pos:position pos:line="43" pos:column="67"/></operator><name pos:line="43" pos:column="64">diskend<pos:position pos:line="43" pos:column="71"/></name></name></expr>)<pos:position pos:line="43" pos:column="72"/></condition><then pos:line="43" pos:column="72"> <block pos:line="43" pos:column="73">{
        <comment type="block" pos:line="44" pos:column="9">/*
         * Skip the blank space at the end of the stripe. start over.
         */</comment>
        <expr_stmt><expr><call><name><name pos:line="47" pos:column="9">StoreFScoss<pos:position pos:line="47" pos:column="20"/></name><operator pos:line="47" pos:column="20">::<pos:position pos:line="47" pos:column="22"/></operator><name pos:line="47" pos:column="22">GetInstance<pos:position pos:line="47" pos:column="33"/></name></name><argument_list pos:line="47" pos:column="33">()<pos:position pos:line="47" pos:column="35"/></argument_list></call><operator pos:line="47" pos:column="35">.<pos:position pos:line="47" pos:column="36"/></operator><name><name pos:line="47" pos:column="36">stats<pos:position pos:line="47" pos:column="41"/></name><operator pos:line="47" pos:column="41">.<pos:position pos:line="47" pos:column="42"/></operator><name pos:line="47" pos:column="42">stripe_overflows<pos:position pos:line="47" pos:column="58"/></name></name><operator pos:line="47" pos:column="58">++<pos:position pos:line="47" pos:column="60"/></operator></expr>;<pos:position pos:line="47" pos:column="61"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="48" pos:column="9">current_membuf<pos:position pos:line="48" pos:column="23"/></name><operator pos:line="48" pos:column="23">-&gt;<pos:position pos:line="48" pos:column="28"/></operator><name pos:line="48" pos:column="25">flags<pos:position pos:line="48" pos:column="30"/></name><operator pos:line="48" pos:column="30">.<pos:position pos:line="48" pos:column="31"/></operator><name pos:line="48" pos:column="31">full<pos:position pos:line="48" pos:column="35"/></name></name> <operator pos:line="48" pos:column="36">=<pos:position pos:line="48" pos:column="37"/></operator> <literal type="number" pos:line="48" pos:column="38">1<pos:position pos:line="48" pos:column="39"/></literal></expr>;<pos:position pos:line="48" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><name pos:line="49" pos:column="9">current_offset<pos:position pos:line="49" pos:column="23"/></name> <operator pos:line="49" pos:column="24">=<pos:position pos:line="49" pos:column="25"/></operator> <name><name pos:line="49" pos:column="26">current_membuf<pos:position pos:line="49" pos:column="40"/></name><operator pos:line="49" pos:column="40">-&gt;<pos:position pos:line="49" pos:column="45"/></operator><name pos:line="49" pos:column="42">diskend<pos:position pos:line="49" pos:column="49"/></name></name></expr>;<pos:position pos:line="49" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="50" pos:column="9">current_membuf<pos:position pos:line="50" pos:column="23"/></name><operator pos:line="50" pos:column="23">-&gt;<pos:position pos:line="50" pos:column="28"/></operator><name pos:line="50" pos:column="25">maybeWrite<pos:position pos:line="50" pos:column="35"/></name></name><argument_list pos:line="50" pos:column="35">(<argument><expr><name pos:line="50" pos:column="36">this<pos:position pos:line="50" pos:column="40"/></name></expr></argument>)<pos:position pos:line="50" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="51" pos:column="9">debugs<pos:position pos:line="51" pos:column="15"/></name><argument_list pos:line="51" pos:column="15">(<argument><expr><literal type="number" pos:line="51" pos:column="16">79<pos:position pos:line="51" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="51" pos:column="20">2<pos:position pos:line="51" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="23">"CossSwapDir::allocate: New offset - "<pos:position pos:line="51" pos:column="61"/></literal> <operator pos:line="51" pos:column="62">&lt;&lt;<pos:position pos:line="51" pos:column="70"/></operator> <name pos:line="51" pos:column="65">current_offset<pos:position pos:line="51" pos:column="79"/></name></expr></argument>)<pos:position pos:line="51" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="81"/></expr_stmt>
        <expr_stmt><expr><name pos:line="52" pos:column="9">newmb<pos:position pos:line="52" pos:column="14"/></name> <operator pos:line="52" pos:column="15">=<pos:position pos:line="52" pos:column="16"/></operator> <call><name pos:line="52" pos:column="17">createMemBuf<pos:position pos:line="52" pos:column="29"/></name><argument_list pos:line="52" pos:column="29">(<argument><expr><name pos:line="52" pos:column="30">current_offset<pos:position pos:line="52" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="46">checkf<pos:position pos:line="52" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="52" pos:column="54">&amp;<pos:position pos:line="52" pos:column="59"/></operator><name pos:line="52" pos:column="55">coll<pos:position pos:line="52" pos:column="59"/></name></expr></argument>)<pos:position pos:line="52" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="61"/></expr_stmt>
        <expr_stmt><expr><name pos:line="53" pos:column="9">current_membuf<pos:position pos:line="53" pos:column="23"/></name> <operator pos:line="53" pos:column="24">=<pos:position pos:line="53" pos:column="25"/></operator> <name pos:line="53" pos:column="26">newmb<pos:position pos:line="53" pos:column="31"/></name></expr>;<pos:position pos:line="53" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="54" pos:column="6"/></block></then></if></elseif></if>

    <comment type="block" pos:line="56" pos:column="5">/*
     * If we didn't get a collision, then update the current offset
     * and return it
     */</comment>
    <if pos:line="60" pos:column="5">if <condition pos:line="60" pos:column="8">(<expr><name pos:line="60" pos:column="9">coll<pos:position pos:line="60" pos:column="13"/></name> <operator pos:line="60" pos:column="14">==<pos:position pos:line="60" pos:column="16"/></operator> <literal type="number" pos:line="60" pos:column="17">0<pos:position pos:line="60" pos:column="18"/></literal></expr>)<pos:position pos:line="60" pos:column="19"/></condition><then pos:line="60" pos:column="19"> <block pos:line="60" pos:column="20">{
        <expr_stmt><expr><name pos:line="61" pos:column="9">retofs<pos:position pos:line="61" pos:column="15"/></name> <operator pos:line="61" pos:column="16">=<pos:position pos:line="61" pos:column="17"/></operator> <name pos:line="61" pos:column="18">current_offset<pos:position pos:line="61" pos:column="32"/></name></expr>;<pos:position pos:line="61" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name pos:line="62" pos:column="9">current_offset<pos:position pos:line="62" pos:column="23"/></name> <operator pos:line="62" pos:column="24">=<pos:position pos:line="62" pos:column="25"/></operator> <name pos:line="62" pos:column="26">retofs<pos:position pos:line="62" pos:column="32"/></name> <operator pos:line="62" pos:column="33">+<pos:position pos:line="62" pos:column="34"/></operator> <name pos:line="62" pos:column="35">allocsize<pos:position pos:line="62" pos:column="44"/></name></expr>;<pos:position pos:line="62" pos:column="45"/></expr_stmt>
        <comment type="block" pos:line="63" pos:column="9">/* round up to our blocksize */</comment>
        <expr_stmt><expr><name pos:line="64" pos:column="9">current_offset<pos:position pos:line="64" pos:column="23"/></name> <operator pos:line="64" pos:column="24">=<pos:position pos:line="64" pos:column="25"/></operator> <operator pos:line="64" pos:column="26">(<pos:position pos:line="64" pos:column="27"/></operator><operator pos:line="64" pos:column="27">(<pos:position pos:line="64" pos:column="28"/></operator><name pos:line="64" pos:column="28">current_offset<pos:position pos:line="64" pos:column="42"/></name> <operator pos:line="64" pos:column="43">+<pos:position pos:line="64" pos:column="44"/></operator> <name pos:line="64" pos:column="45">blksz_mask<pos:position pos:line="64" pos:column="55"/></name><operator pos:line="64" pos:column="55">)<pos:position pos:line="64" pos:column="56"/></operator> <operator pos:line="64" pos:column="57">&gt;&gt;<pos:position pos:line="64" pos:column="62"/></operator> <name pos:line="64" pos:column="60">blksz_bits<pos:position pos:line="64" pos:column="70"/></name> <operator pos:line="64" pos:column="71">)<pos:position pos:line="64" pos:column="72"/></operator> <operator pos:line="64" pos:column="73">&lt;&lt;<pos:position pos:line="64" pos:column="81"/></operator> <name pos:line="64" pos:column="76">blksz_bits<pos:position pos:line="64" pos:column="86"/></name></expr>;<pos:position pos:line="64" pos:column="87"/></expr_stmt>
        <return pos:line="65" pos:column="9">return <expr><call><name pos:line="65" pos:column="16">storeCossDiskOffsetToFileno<pos:position pos:line="65" pos:column="43"/></name><argument_list pos:line="65" pos:column="43">(<argument><expr><name pos:line="65" pos:column="44">retofs<pos:position pos:line="65" pos:column="50"/></name></expr></argument>)<pos:position pos:line="65" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="52"/></return>
    }<pos:position pos:line="66" pos:column="6"/></block></then> <else pos:line="66" pos:column="7">else <block pos:line="66" pos:column="12">{
        <expr_stmt><expr><call><name><name pos:line="67" pos:column="9">StoreFScoss<pos:position pos:line="67" pos:column="20"/></name><operator pos:line="67" pos:column="20">::<pos:position pos:line="67" pos:column="22"/></operator><name pos:line="67" pos:column="22">GetInstance<pos:position pos:line="67" pos:column="33"/></name></name><argument_list pos:line="67" pos:column="33">()<pos:position pos:line="67" pos:column="35"/></argument_list></call><operator pos:line="67" pos:column="35">.<pos:position pos:line="67" pos:column="36"/></operator><name><name pos:line="67" pos:column="36">stats<pos:position pos:line="67" pos:column="41"/></name><operator pos:line="67" pos:column="41">.<pos:position pos:line="67" pos:column="42"/></operator><name pos:line="67" pos:column="42">alloc<pos:position pos:line="67" pos:column="47"/></name><operator pos:line="67" pos:column="47">.<pos:position pos:line="67" pos:column="48"/></operator><name pos:line="67" pos:column="48">collisions<pos:position pos:line="67" pos:column="58"/></name></name><operator pos:line="67" pos:column="58">++<pos:position pos:line="67" pos:column="60"/></operator></expr>;<pos:position pos:line="67" pos:column="61"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="68" pos:column="9">debugs<pos:position pos:line="68" pos:column="15"/></name><argument_list pos:line="68" pos:column="15">(<argument><expr><literal type="number" pos:line="68" pos:column="16">79<pos:position pos:line="68" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="68" pos:column="20">3<pos:position pos:line="68" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="68" pos:column="23">"CossSwapDir::allocate: Collision"<pos:position pos:line="68" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="59"/></expr_stmt>
        <return pos:line="69" pos:column="9">return <expr><operator pos:line="69" pos:column="16">-<pos:position pos:line="69" pos:column="17"/></operator><literal type="number" pos:line="69" pos:column="17">1<pos:position pos:line="69" pos:column="18"/></literal></expr>;<pos:position pos:line="69" pos:column="19"/></return>
    }<pos:position pos:line="70" pos:column="6"/></block></else></if>
}<pos:position pos:line="71" pos:column="2"/></block></function></unit>
