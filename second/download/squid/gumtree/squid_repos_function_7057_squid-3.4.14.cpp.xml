<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7057_squid-3.4.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">inline<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">read<pos:position pos:line="2" pos:column="5"/></name><parameter_list pos:line="2" pos:column="5">(<parameter><decl><type><name pos:line="2" pos:column="6">int<pos:position pos:line="2" pos:column="9"/></name></type> <name pos:line="2" pos:column="10">fd<pos:position pos:line="2" pos:column="12"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="14">void<pos:position pos:line="2" pos:column="18"/></name> <modifier pos:line="2" pos:column="19">*<pos:position pos:line="2" pos:column="20"/></modifier></type> <name pos:line="2" pos:column="21">buf<pos:position pos:line="2" pos:column="24"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="26">size_t<pos:position pos:line="2" pos:column="32"/></name></type> <name pos:line="2" pos:column="33">siz<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="37"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name></type> <name><name pos:line="4" pos:column="10">l_so_type<pos:position pos:line="4" pos:column="19"/></name><index pos:line="4" pos:column="19">[<expr><sizeof pos:line="4" pos:column="20">sizeof<argument_list pos:line="4" pos:column="26">(<argument><expr><name pos:line="4" pos:column="27">int<pos:position pos:line="4" pos:column="30"/></name></expr></argument>)<pos:position pos:line="4" pos:column="31"/></argument_list></sizeof></expr>]<pos:position pos:line="4" pos:column="32"/></index></name></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">l_so_type_siz<pos:position pos:line="5" pos:column="22"/></name> <init pos:line="5" pos:column="23">= <expr><sizeof pos:line="5" pos:column="25">sizeof<argument_list pos:line="5" pos:column="31">(<argument><expr><name pos:line="5" pos:column="32">l_so_type<pos:position pos:line="5" pos:column="41"/></name></expr></argument>)<pos:position pos:line="5" pos:column="42"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="5" pos:column="43"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">SOCKET<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">sock<pos:position pos:line="6" pos:column="16"/></name> <init pos:line="6" pos:column="17">= <expr><call><name pos:line="6" pos:column="19">_get_osfhandle<pos:position pos:line="6" pos:column="33"/></name><argument_list pos:line="6" pos:column="33">(<argument><expr><name pos:line="6" pos:column="34">fd<pos:position pos:line="6" pos:column="36"/></name></expr></argument>)<pos:position pos:line="6" pos:column="37"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="38"/></decl_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><call><name><operator pos:line="8" pos:column="9">::<pos:position pos:line="8" pos:column="11"/></operator><name pos:line="8" pos:column="11">getsockopt<pos:position pos:line="8" pos:column="21"/></name></name><argument_list pos:line="8" pos:column="21">(<argument><expr><name pos:line="8" pos:column="22">sock<pos:position pos:line="8" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="28">SOL_SOCKET<pos:position pos:line="8" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="40">SO_TYPE<pos:position pos:line="8" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="49">l_so_type<pos:position pos:line="8" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="60">&amp;<pos:position pos:line="8" pos:column="65"/></operator><name pos:line="8" pos:column="61">l_so_type_siz<pos:position pos:line="8" pos:column="74"/></name></expr></argument>)<pos:position pos:line="8" pos:column="75"/></argument_list></call> <operator pos:line="8" pos:column="76">==<pos:position pos:line="8" pos:column="78"/></operator> <literal type="number" pos:line="8" pos:column="79">0<pos:position pos:line="8" pos:column="80"/></literal></expr>)<pos:position pos:line="8" pos:column="81"/></condition><then pos:line="8" pos:column="81">
        <block type="pseudo"><return pos:line="9" pos:column="9">return <expr><call><name><operator pos:line="9" pos:column="16">::<pos:position pos:line="9" pos:column="18"/></operator><name pos:line="9" pos:column="18">recv<pos:position pos:line="9" pos:column="22"/></name></name><argument_list pos:line="9" pos:column="22">(<argument><expr><name pos:line="9" pos:column="23">sock<pos:position pos:line="9" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="29">(<pos:position pos:line="9" pos:column="30"/></operator><name pos:line="9" pos:column="30">char<pos:position pos:line="9" pos:column="34"/></name> <name pos:line="9" pos:column="35">FAR<pos:position pos:line="9" pos:column="38"/></name> <operator pos:line="9" pos:column="39">*<pos:position pos:line="9" pos:column="40"/></operator><operator pos:line="9" pos:column="40">)<pos:position pos:line="9" pos:column="41"/></operator> <name pos:line="9" pos:column="42">buf<pos:position pos:line="9" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="47">(<pos:position pos:line="9" pos:column="48"/></operator><name pos:line="9" pos:column="48">int<pos:position pos:line="9" pos:column="51"/></name><operator pos:line="9" pos:column="51">)<pos:position pos:line="9" pos:column="52"/></operator><name pos:line="9" pos:column="52">siz<pos:position pos:line="9" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="57">0<pos:position pos:line="9" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="60"/></return></block></then>
    <else pos:line="10" pos:column="5">else
        <block type="pseudo"><return pos:line="11" pos:column="9">return <expr><call><name pos:line="11" pos:column="16">_read<pos:position pos:line="11" pos:column="21"/></name><argument_list pos:line="11" pos:column="21">(<argument><expr><name pos:line="11" pos:column="22">fd<pos:position pos:line="11" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="26">buf<pos:position pos:line="11" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="31">(<pos:position pos:line="11" pos:column="32"/></operator><name pos:line="11" pos:column="32">unsigned<pos:position pos:line="11" pos:column="40"/></name> <name pos:line="11" pos:column="41">int<pos:position pos:line="11" pos:column="44"/></name><operator pos:line="11" pos:column="44">)<pos:position pos:line="11" pos:column="45"/></operator><name pos:line="11" pos:column="45">siz<pos:position pos:line="11" pos:column="48"/></name></expr></argument>)<pos:position pos:line="11" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="50"/></return></block></else></if>
}<pos:position pos:line="12" pos:column="2"/></block></function></unit>
