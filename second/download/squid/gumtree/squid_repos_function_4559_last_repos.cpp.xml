<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4559_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Store<pos:position pos:line="2" pos:column="6"/></name><operator pos:line="2" pos:column="6">::<pos:position pos:line="2" pos:column="8"/></operator><name pos:line="2" pos:column="8">Controller<pos:position pos:line="2" pos:column="18"/></name><operator pos:line="2" pos:column="18">::<pos:position pos:line="2" pos:column="20"/></operator><name pos:line="2" pos:column="20">getStats<pos:position pos:line="2" pos:column="28"/></name></name><parameter_list pos:line="2" pos:column="28">(<parameter><decl><type><name pos:line="2" pos:column="29">StoreInfoStats<pos:position pos:line="2" pos:column="43"/></name> <modifier pos:line="2" pos:column="44">&amp;<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="45">stats<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="51"/></parameter_list> <specifier pos:line="2" pos:column="52">const<pos:position pos:line="2" pos:column="57"/></specifier>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">memStore<pos:position pos:line="4" pos:column="17"/></name></expr>)<pos:position pos:line="4" pos:column="18"/></condition><then pos:line="4" pos:column="18">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="5" pos:column="9">memStore<pos:position pos:line="5" pos:column="17"/></name><operator pos:line="5" pos:column="17">-&gt;<pos:position pos:line="5" pos:column="22"/></operator><name pos:line="5" pos:column="19">getStats<pos:position pos:line="5" pos:column="27"/></name></name><argument_list pos:line="5" pos:column="27">(<argument><expr><name pos:line="5" pos:column="28">stats<pos:position pos:line="5" pos:column="33"/></name></expr></argument>)<pos:position pos:line="5" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="35"/></expr_stmt></block></then>
    <else pos:line="6" pos:column="5">else <block pos:line="6" pos:column="10">{
        <comment type="line" pos:line="7" pos:column="9">// move this code to a non-shared memory cache class when we have it</comment>
        <expr_stmt><expr><name><name pos:line="8" pos:column="9">stats<pos:position pos:line="8" pos:column="14"/></name><operator pos:line="8" pos:column="14">.<pos:position pos:line="8" pos:column="15"/></operator><name pos:line="8" pos:column="15">mem<pos:position pos:line="8" pos:column="18"/></name><operator pos:line="8" pos:column="18">.<pos:position pos:line="8" pos:column="19"/></operator><name pos:line="8" pos:column="19">shared<pos:position pos:line="8" pos:column="25"/></name></name> <operator pos:line="8" pos:column="26">=<pos:position pos:line="8" pos:column="27"/></operator> <literal type="boolean" pos:line="8" pos:column="28">false<pos:position pos:line="8" pos:column="33"/></literal></expr>;<pos:position pos:line="8" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="9" pos:column="9">stats<pos:position pos:line="9" pos:column="14"/></name><operator pos:line="9" pos:column="14">.<pos:position pos:line="9" pos:column="15"/></operator><name pos:line="9" pos:column="15">mem<pos:position pos:line="9" pos:column="18"/></name><operator pos:line="9" pos:column="18">.<pos:position pos:line="9" pos:column="19"/></operator><name pos:line="9" pos:column="19">capacity<pos:position pos:line="9" pos:column="27"/></name></name> <operator pos:line="9" pos:column="28">=<pos:position pos:line="9" pos:column="29"/></operator> <name><name pos:line="9" pos:column="30">Config<pos:position pos:line="9" pos:column="36"/></name><operator pos:line="9" pos:column="36">.<pos:position pos:line="9" pos:column="37"/></operator><name pos:line="9" pos:column="37">memMaxSize<pos:position pos:line="9" pos:column="47"/></name></name></expr>;<pos:position pos:line="9" pos:column="48"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="10" pos:column="9">stats<pos:position pos:line="10" pos:column="14"/></name><operator pos:line="10" pos:column="14">.<pos:position pos:line="10" pos:column="15"/></operator><name pos:line="10" pos:column="15">mem<pos:position pos:line="10" pos:column="18"/></name><operator pos:line="10" pos:column="18">.<pos:position pos:line="10" pos:column="19"/></operator><name pos:line="10" pos:column="19">size<pos:position pos:line="10" pos:column="23"/></name></name> <operator pos:line="10" pos:column="24">=<pos:position pos:line="10" pos:column="25"/></operator> <call><name><name pos:line="10" pos:column="26">mem_node<pos:position pos:line="10" pos:column="34"/></name><operator pos:line="10" pos:column="34">::<pos:position pos:line="10" pos:column="36"/></operator><name pos:line="10" pos:column="36">StoreMemSize<pos:position pos:line="10" pos:column="48"/></name></name><argument_list pos:line="10" pos:column="48">()<pos:position pos:line="10" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="51"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="11" pos:column="9">stats<pos:position pos:line="11" pos:column="14"/></name><operator pos:line="11" pos:column="14">.<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="15">mem<pos:position pos:line="11" pos:column="18"/></name><operator pos:line="11" pos:column="18">.<pos:position pos:line="11" pos:column="19"/></operator><name pos:line="11" pos:column="19">count<pos:position pos:line="11" pos:column="24"/></name></name> <operator pos:line="11" pos:column="25">=<pos:position pos:line="11" pos:column="26"/></operator> <name pos:line="11" pos:column="27">hot_obj_count<pos:position pos:line="11" pos:column="40"/></name></expr>;<pos:position pos:line="11" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="12" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name><name pos:line="14" pos:column="5">swapDir<pos:position pos:line="14" pos:column="12"/></name><operator pos:line="14" pos:column="12">-&gt;<pos:position pos:line="14" pos:column="17"/></operator><name pos:line="14" pos:column="14">getStats<pos:position pos:line="14" pos:column="22"/></name></name><argument_list pos:line="14" pos:column="22">(<argument><expr><name pos:line="14" pos:column="23">stats<pos:position pos:line="14" pos:column="28"/></name></expr></argument>)<pos:position pos:line="14" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="30"/></expr_stmt>

    <comment type="line" pos:line="16" pos:column="5">// low-level info not specific to memory or disk cache</comment>
    <expr_stmt><expr><name><name pos:line="17" pos:column="5">stats<pos:position pos:line="17" pos:column="10"/></name><operator pos:line="17" pos:column="10">.<pos:position pos:line="17" pos:column="11"/></operator><name pos:line="17" pos:column="11">store_entry_count<pos:position pos:line="17" pos:column="28"/></name></name> <operator pos:line="17" pos:column="29">=<pos:position pos:line="17" pos:column="30"/></operator> <call><name><name pos:line="17" pos:column="31">StoreEntry<pos:position pos:line="17" pos:column="41"/></name><operator pos:line="17" pos:column="41">::<pos:position pos:line="17" pos:column="43"/></operator><name pos:line="17" pos:column="43">inUseCount<pos:position pos:line="17" pos:column="53"/></name></name><argument_list pos:line="17" pos:column="53">()<pos:position pos:line="17" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="56"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="18" pos:column="5">stats<pos:position pos:line="18" pos:column="10"/></name><operator pos:line="18" pos:column="10">.<pos:position pos:line="18" pos:column="11"/></operator><name pos:line="18" pos:column="11">mem_object_count<pos:position pos:line="18" pos:column="27"/></name></name> <operator pos:line="18" pos:column="28">=<pos:position pos:line="18" pos:column="29"/></operator> <call><name><name pos:line="18" pos:column="30">MemObject<pos:position pos:line="18" pos:column="39"/></name><operator pos:line="18" pos:column="39">::<pos:position pos:line="18" pos:column="41"/></operator><name pos:line="18" pos:column="41">inUseCount<pos:position pos:line="18" pos:column="51"/></name></name><argument_list pos:line="18" pos:column="51">()<pos:position pos:line="18" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="54"/></expr_stmt>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
