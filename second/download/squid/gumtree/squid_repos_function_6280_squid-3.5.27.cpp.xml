<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6280_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">IpcIoFile<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">writeCompleted<pos:position pos:line="2" pos:column="26"/></name></name><parameter_list pos:line="2" pos:column="26">(<parameter><decl><type><name pos:line="2" pos:column="27">WriteRequest<pos:position pos:line="2" pos:column="39"/></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier></type><name pos:line="2" pos:column="41">writeRequest<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>,
                          <parameter><decl><type><specifier pos:line="3" pos:column="27">const<pos:position pos:line="3" pos:column="32"/></specifier> <name pos:line="3" pos:column="33">IpcIoMsg<pos:position pos:line="3" pos:column="41"/></name> <modifier pos:line="3" pos:column="42">*<pos:position pos:line="3" pos:column="43"/></modifier><specifier pos:line="3" pos:column="43">const<pos:position pos:line="3" pos:column="48"/></specifier></type> <name pos:line="3" pos:column="49">response<pos:position pos:line="3" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="58"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">bool<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">ioError<pos:position pos:line="5" pos:column="17"/></name> <init pos:line="5" pos:column="18">= <expr><literal type="boolean" pos:line="5" pos:column="20">false<pos:position pos:line="5" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">!<pos:position pos:line="6" pos:column="10"/></operator><name pos:line="6" pos:column="10">response<pos:position pos:line="6" pos:column="18"/></name></expr>)<pos:position pos:line="6" pos:column="19"/></condition><then pos:line="6" pos:column="19"> <block pos:line="6" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">debugs<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><literal type="number" pos:line="7" pos:column="16">79<pos:position pos:line="7" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="20">3<pos:position pos:line="7" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="23">"disker "<pos:position pos:line="7" pos:column="32"/></literal> <operator pos:line="7" pos:column="33">&lt;&lt;<pos:position pos:line="7" pos:column="41"/></operator> <name pos:line="7" pos:column="36">diskId<pos:position pos:line="7" pos:column="42"/></name> <operator pos:line="7" pos:column="43">&lt;&lt;<pos:position pos:line="7" pos:column="51"/></operator> <literal type="string" pos:line="7" pos:column="46">" timeout"<pos:position pos:line="7" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="58"/></expr_stmt>
        <expr_stmt><expr><name pos:line="8" pos:column="9">ioError<pos:position pos:line="8" pos:column="16"/></name> <operator pos:line="8" pos:column="17">=<pos:position pos:line="8" pos:column="18"/></operator> <literal type="boolean" pos:line="8" pos:column="19">true<pos:position pos:line="8" pos:column="23"/></literal></expr>;<pos:position pos:line="8" pos:column="24"/></expr_stmt> <comment type="line" pos:line="8" pos:column="25">// I/O timeout does not warrant setting error_?</comment>
    }<pos:position pos:line="9" pos:column="6"/></block></then> <elseif pos:line="9" pos:column="7">else <if pos:line="9" pos:column="12">if <condition pos:line="9" pos:column="15">(<expr><name><name pos:line="9" pos:column="16">response<pos:position pos:line="9" pos:column="24"/></name><operator pos:line="9" pos:column="24">-&gt;<pos:position pos:line="9" pos:column="29"/></operator><name pos:line="9" pos:column="26">xerrno<pos:position pos:line="9" pos:column="32"/></name></name></expr>)<pos:position pos:line="9" pos:column="33"/></condition><then pos:line="9" pos:column="33"> <block pos:line="9" pos:column="34">{
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">debugs<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><literal type="number" pos:line="10" pos:column="16">79<pos:position pos:line="10" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="20">DBG_IMPORTANT<pos:position pos:line="10" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="35">"ERROR: disker "<pos:position pos:line="10" pos:column="51"/></literal> <operator pos:line="10" pos:column="52">&lt;&lt;<pos:position pos:line="10" pos:column="60"/></operator> <name pos:line="10" pos:column="55">diskId<pos:position pos:line="10" pos:column="61"/></name> <operator pos:line="10" pos:column="62">&lt;&lt;<pos:position pos:line="10" pos:column="70"/></operator>
               <literal type="string" pos:line="11" pos:column="16">" error writing "<pos:position pos:line="11" pos:column="33"/></literal> <operator pos:line="11" pos:column="34">&lt;&lt;<pos:position pos:line="11" pos:column="42"/></operator> <name><name pos:line="11" pos:column="37">writeRequest<pos:position pos:line="11" pos:column="49"/></name><operator pos:line="11" pos:column="49">-&gt;<pos:position pos:line="11" pos:column="54"/></operator><name pos:line="11" pos:column="51">len<pos:position pos:line="11" pos:column="54"/></name></name> <operator pos:line="11" pos:column="55">&lt;&lt;<pos:position pos:line="11" pos:column="63"/></operator> <literal type="string" pos:line="11" pos:column="58">" bytes at "<pos:position pos:line="11" pos:column="70"/></literal> <operator pos:line="11" pos:column="71">&lt;&lt;<pos:position pos:line="11" pos:column="79"/></operator>
               <name><name pos:line="12" pos:column="16">writeRequest<pos:position pos:line="12" pos:column="28"/></name><operator pos:line="12" pos:column="28">-&gt;<pos:position pos:line="12" pos:column="33"/></operator><name pos:line="12" pos:column="30">offset<pos:position pos:line="12" pos:column="36"/></name></name> <operator pos:line="12" pos:column="37">&lt;&lt;<pos:position pos:line="12" pos:column="45"/></operator> <literal type="string" pos:line="12" pos:column="40">": "<pos:position pos:line="12" pos:column="44"/></literal> <operator pos:line="12" pos:column="45">&lt;&lt;<pos:position pos:line="12" pos:column="53"/></operator> <call><name pos:line="12" pos:column="48">xstrerr<pos:position pos:line="12" pos:column="55"/></name><argument_list pos:line="12" pos:column="55">(<argument><expr><name><name pos:line="12" pos:column="56">response<pos:position pos:line="12" pos:column="64"/></name><operator pos:line="12" pos:column="64">-&gt;<pos:position pos:line="12" pos:column="69"/></operator><name pos:line="12" pos:column="66">xerrno<pos:position pos:line="12" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="73"/></argument_list></call> <operator pos:line="12" pos:column="74">&lt;&lt;<pos:position pos:line="12" pos:column="82"/></operator>
               <literal type="string" pos:line="13" pos:column="16">"; this worker will stop using "<pos:position pos:line="13" pos:column="48"/></literal> <operator pos:line="13" pos:column="49">&lt;&lt;<pos:position pos:line="13" pos:column="57"/></operator> <name pos:line="13" pos:column="52">dbName<pos:position pos:line="13" pos:column="58"/></name></expr></argument>)<pos:position pos:line="13" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="60"/></expr_stmt>
        <expr_stmt><expr><name pos:line="14" pos:column="9">ioError<pos:position pos:line="14" pos:column="16"/></name> <operator pos:line="14" pos:column="17">=<pos:position pos:line="14" pos:column="18"/></operator> <name pos:line="14" pos:column="19">error_<pos:position pos:line="14" pos:column="25"/></name> <operator pos:line="14" pos:column="26">=<pos:position pos:line="14" pos:column="27"/></operator> <literal type="boolean" pos:line="14" pos:column="28">true<pos:position pos:line="14" pos:column="32"/></literal></expr>;<pos:position pos:line="14" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if></elseif> <elseif pos:line="15" pos:column="7">else <if pos:line="15" pos:column="12">if <condition pos:line="15" pos:column="15">(<expr><name><name pos:line="15" pos:column="16">response<pos:position pos:line="15" pos:column="24"/></name><operator pos:line="15" pos:column="24">-&gt;<pos:position pos:line="15" pos:column="29"/></operator><name pos:line="15" pos:column="26">len<pos:position pos:line="15" pos:column="29"/></name></name> <operator pos:line="15" pos:column="30">!=<pos:position pos:line="15" pos:column="32"/></operator> <name><name pos:line="15" pos:column="33">writeRequest<pos:position pos:line="15" pos:column="45"/></name><operator pos:line="15" pos:column="45">-&gt;<pos:position pos:line="15" pos:column="50"/></operator><name pos:line="15" pos:column="47">len<pos:position pos:line="15" pos:column="50"/></name></name></expr>)<pos:position pos:line="15" pos:column="51"/></condition><then pos:line="15" pos:column="51"> <block pos:line="15" pos:column="52">{
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">debugs<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><literal type="number" pos:line="16" pos:column="16">79<pos:position pos:line="16" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="20">DBG_IMPORTANT<pos:position pos:line="16" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="35">"ERROR: disker "<pos:position pos:line="16" pos:column="51"/></literal> <operator pos:line="16" pos:column="52">&lt;&lt;<pos:position pos:line="16" pos:column="60"/></operator> <name pos:line="16" pos:column="55">diskId<pos:position pos:line="16" pos:column="61"/></name> <operator pos:line="16" pos:column="62">&lt;&lt;<pos:position pos:line="16" pos:column="70"/></operator> <literal type="string" pos:line="16" pos:column="65">" wrote "<pos:position pos:line="16" pos:column="74"/></literal> <operator pos:line="16" pos:column="75">&lt;&lt;<pos:position pos:line="16" pos:column="83"/></operator>
               <name><name pos:line="17" pos:column="16">response<pos:position pos:line="17" pos:column="24"/></name><operator pos:line="17" pos:column="24">-&gt;<pos:position pos:line="17" pos:column="29"/></operator><name pos:line="17" pos:column="26">len<pos:position pos:line="17" pos:column="29"/></name></name> <operator pos:line="17" pos:column="30">&lt;&lt;<pos:position pos:line="17" pos:column="38"/></operator> <literal type="string" pos:line="17" pos:column="33">" instead of "<pos:position pos:line="17" pos:column="47"/></literal> <operator pos:line="17" pos:column="48">&lt;&lt;<pos:position pos:line="17" pos:column="56"/></operator> <name><name pos:line="17" pos:column="51">writeRequest<pos:position pos:line="17" pos:column="63"/></name><operator pos:line="17" pos:column="63">-&gt;<pos:position pos:line="17" pos:column="68"/></operator><name pos:line="17" pos:column="65">len<pos:position pos:line="17" pos:column="68"/></name></name> <operator pos:line="17" pos:column="69">&lt;&lt;<pos:position pos:line="17" pos:column="77"/></operator>
               <literal type="string" pos:line="18" pos:column="16">" bytes (offset "<pos:position pos:line="18" pos:column="33"/></literal> <operator pos:line="18" pos:column="34">&lt;&lt;<pos:position pos:line="18" pos:column="42"/></operator> <name><name pos:line="18" pos:column="37">writeRequest<pos:position pos:line="18" pos:column="49"/></name><operator pos:line="18" pos:column="49">-&gt;<pos:position pos:line="18" pos:column="54"/></operator><name pos:line="18" pos:column="51">offset<pos:position pos:line="18" pos:column="57"/></name></name> <operator pos:line="18" pos:column="58">&lt;&lt;<pos:position pos:line="18" pos:column="66"/></operator> <literal type="string" pos:line="18" pos:column="61">"); "<pos:position pos:line="18" pos:column="66"/></literal> <operator pos:line="18" pos:column="67">&lt;&lt;<pos:position pos:line="18" pos:column="75"/></operator>
               <literal type="string" pos:line="19" pos:column="16">"this worker will stop using "<pos:position pos:line="19" pos:column="46"/></literal> <operator pos:line="19" pos:column="47">&lt;&lt;<pos:position pos:line="19" pos:column="55"/></operator> <name pos:line="19" pos:column="50">dbName<pos:position pos:line="19" pos:column="56"/></name></expr></argument>)<pos:position pos:line="19" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="58"/></expr_stmt>
        <expr_stmt><expr><name pos:line="20" pos:column="9">error_<pos:position pos:line="20" pos:column="15"/></name> <operator pos:line="20" pos:column="16">=<pos:position pos:line="20" pos:column="17"/></operator> <literal type="boolean" pos:line="20" pos:column="18">true<pos:position pos:line="20" pos:column="22"/></literal></expr>;<pos:position pos:line="20" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if></elseif></if>

    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><name><name pos:line="23" pos:column="9">writeRequest<pos:position pos:line="23" pos:column="21"/></name><operator pos:line="23" pos:column="21">-&gt;<pos:position pos:line="23" pos:column="26"/></operator><name pos:line="23" pos:column="23">free_func<pos:position pos:line="23" pos:column="32"/></name></name></expr>)<pos:position pos:line="23" pos:column="33"/></condition><then pos:line="23" pos:column="33">
        <block type="pseudo"><expr_stmt><expr><call pos:line="24" pos:column="9">(<name><name pos:line="24" pos:column="10">writeRequest<pos:position pos:line="24" pos:column="22"/></name><operator pos:line="24" pos:column="22">-&gt;<pos:position pos:line="24" pos:column="27"/></operator><name pos:line="24" pos:column="24">free_func<pos:position pos:line="24" pos:column="33"/></name></name>)<argument_list pos:line="24" pos:column="34">(<argument><expr><cast type="const" pos:line="24" pos:column="35">const_cast<argument_list type="generic" pos:line="24" pos:column="45">&lt;<argument><expr><name pos:line="24" pos:column="46">char<pos:position pos:line="24" pos:column="50"/></name><operator pos:line="24" pos:column="50">*<pos:position pos:line="24" pos:column="51"/></operator></expr></argument>&gt;<pos:position pos:line="24" pos:column="55"/></argument_list><argument_list pos:line="24" pos:column="52">(<argument><expr><name><name pos:line="24" pos:column="53">writeRequest<pos:position pos:line="24" pos:column="65"/></name><operator pos:line="24" pos:column="65">-&gt;<pos:position pos:line="24" pos:column="70"/></operator><name pos:line="24" pos:column="67">buf<pos:position pos:line="24" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="71"/></argument_list></cast></expr></argument>)<pos:position pos:line="24" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="73"/></expr_stmt></block></then></if> <comment type="line" pos:line="24" pos:column="74">// broken API?</comment>

    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><operator pos:line="26" pos:column="9">!<pos:position pos:line="26" pos:column="10"/></operator><name pos:line="26" pos:column="10">ioError<pos:position pos:line="26" pos:column="17"/></name></expr>)<pos:position pos:line="26" pos:column="18"/></condition><then pos:line="26" pos:column="18"> <block pos:line="26" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">debugs<pos:position pos:line="27" pos:column="15"/></name><argument_list pos:line="27" pos:column="15">(<argument><expr><literal type="number" pos:line="27" pos:column="16">79<pos:position pos:line="27" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="27" pos:column="19">5<pos:position pos:line="27" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="22">HERE<pos:position pos:line="27" pos:column="26"/></name> <operator pos:line="27" pos:column="27">&lt;&lt;<pos:position pos:line="27" pos:column="35"/></operator> <literal type="string" pos:line="27" pos:column="30">"wrote "<pos:position pos:line="27" pos:column="38"/></literal> <operator pos:line="27" pos:column="39">&lt;&lt;<pos:position pos:line="27" pos:column="47"/></operator> <name><name pos:line="27" pos:column="42">writeRequest<pos:position pos:line="27" pos:column="54"/></name><operator pos:line="27" pos:column="54">-&gt;<pos:position pos:line="27" pos:column="59"/></operator><name pos:line="27" pos:column="56">len<pos:position pos:line="27" pos:column="59"/></name></name> <operator pos:line="27" pos:column="60">&lt;&lt;<pos:position pos:line="27" pos:column="68"/></operator> <literal type="string" pos:line="27" pos:column="63">" to disker"<pos:position pos:line="27" pos:column="75"/></literal> <operator pos:line="27" pos:column="76">&lt;&lt;<pos:position pos:line="27" pos:column="84"/></operator>
               <name pos:line="28" pos:column="16">diskId<pos:position pos:line="28" pos:column="22"/></name> <operator pos:line="28" pos:column="23">&lt;&lt;<pos:position pos:line="28" pos:column="31"/></operator> <literal type="string" pos:line="28" pos:column="26">" at "<pos:position pos:line="28" pos:column="32"/></literal> <operator pos:line="28" pos:column="33">&lt;&lt;<pos:position pos:line="28" pos:column="41"/></operator> <name><name pos:line="28" pos:column="36">writeRequest<pos:position pos:line="28" pos:column="48"/></name><operator pos:line="28" pos:column="48">-&gt;<pos:position pos:line="28" pos:column="53"/></operator><name pos:line="28" pos:column="50">offset<pos:position pos:line="28" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="58"/></expr_stmt>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><specifier pos:line="31" pos:column="5">const<pos:position pos:line="31" pos:column="10"/></specifier> <name pos:line="31" pos:column="11">ssize_t<pos:position pos:line="31" pos:column="18"/></name></type> <name pos:line="31" pos:column="19">rlen<pos:position pos:line="31" pos:column="23"/></name> <init pos:line="31" pos:column="24">= <expr><ternary><condition><expr><name pos:line="31" pos:column="26">ioError<pos:position pos:line="31" pos:column="33"/></name></expr> ?<pos:position pos:line="31" pos:column="35"/></condition><then pos:line="31" pos:column="35"> <expr><literal type="number" pos:line="31" pos:column="36">0<pos:position pos:line="31" pos:column="37"/></literal></expr> <pos:position pos:line="31" pos:column="38"/></then><else pos:line="31" pos:column="38">: <expr><operator pos:line="31" pos:column="40">(<pos:position pos:line="31" pos:column="41"/></operator><name pos:line="31" pos:column="41">ssize_t<pos:position pos:line="31" pos:column="48"/></name><operator pos:line="31" pos:column="48">)<pos:position pos:line="31" pos:column="49"/></operator><name><name pos:line="31" pos:column="49">writeRequest<pos:position pos:line="31" pos:column="61"/></name><operator pos:line="31" pos:column="61">-&gt;<pos:position pos:line="31" pos:column="66"/></operator><name pos:line="31" pos:column="63">len<pos:position pos:line="31" pos:column="66"/></name></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="31" pos:column="67"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="32" pos:column="5">const<pos:position pos:line="32" pos:column="10"/></specifier> <name pos:line="32" pos:column="11">int<pos:position pos:line="32" pos:column="14"/></name></type> <name pos:line="32" pos:column="15">errflag<pos:position pos:line="32" pos:column="22"/></name> <init pos:line="32" pos:column="23">= <expr><ternary><condition><expr><name pos:line="32" pos:column="25">ioError<pos:position pos:line="32" pos:column="32"/></name></expr> ?<pos:position pos:line="32" pos:column="34"/></condition><then pos:line="32" pos:column="34"> <expr><name pos:line="32" pos:column="35">DISK_ERROR<pos:position pos:line="32" pos:column="45"/></name></expr> <pos:position pos:line="32" pos:column="46"/></then><else pos:line="32" pos:column="46">:<expr><name pos:line="32" pos:column="47">DISK_OK<pos:position pos:line="32" pos:column="54"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="32" pos:column="55"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="33" pos:column="5">ioRequestor<pos:position pos:line="33" pos:column="16"/></name><operator pos:line="33" pos:column="16">-&gt;<pos:position pos:line="33" pos:column="21"/></operator><name pos:line="33" pos:column="18">writeCompleted<pos:position pos:line="33" pos:column="32"/></name></name><argument_list pos:line="33" pos:column="32">(<argument><expr><name pos:line="33" pos:column="33">errflag<pos:position pos:line="33" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="42">rlen<pos:position pos:line="33" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="48">writeRequest<pos:position pos:line="33" pos:column="60"/></name></expr></argument>)<pos:position pos:line="33" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="62"/></expr_stmt>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
