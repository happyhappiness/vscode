<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5975_squid-3.5.27.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">logfileFlushEvent<pos:position pos:line="2" pos:column="18"/></name><parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><name pos:line="2" pos:column="19">void<pos:position pos:line="2" pos:column="23"/></name> <modifier pos:line="2" pos:column="24">*<pos:position pos:line="2" pos:column="25"/></modifier></type><name pos:line="2" pos:column="25">data<pos:position pos:line="2" pos:column="29"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="30"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">Logfile<pos:position pos:line="4" pos:column="12"/></name> <modifier pos:line="4" pos:column="13">*<pos:position pos:line="4" pos:column="14"/></modifier></type><name pos:line="4" pos:column="14">lf<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><cast type="static" pos:line="4" pos:column="19">static_cast<argument_list type="generic" pos:line="4" pos:column="30">&lt;<argument><expr><name pos:line="4" pos:column="31">Logfile<pos:position pos:line="4" pos:column="38"/></name> <operator pos:line="4" pos:column="39">*<pos:position pos:line="4" pos:column="40"/></operator></expr></argument>&gt;<pos:position pos:line="4" pos:column="44"/></argument_list><argument_list pos:line="4" pos:column="41">(<argument><expr><name pos:line="4" pos:column="42">data<pos:position pos:line="4" pos:column="46"/></name></expr></argument>)<pos:position pos:line="4" pos:column="47"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="4" pos:column="48"/></decl_stmt>

    <comment type="block" pos:line="6" pos:column="5">/*
     * This might work better if we keep track of when we wrote last and only
     * schedule a write if we haven't done so in the last second or two.
     */</comment>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">logfileQueueWrite<pos:position pos:line="10" pos:column="22"/></name><argument_list pos:line="10" pos:column="22">(<argument><expr><name pos:line="10" pos:column="23">lf<pos:position pos:line="10" pos:column="25"/></name></expr></argument>)<pos:position pos:line="10" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">eventAdd<pos:position pos:line="11" pos:column="13"/></name><argument_list pos:line="11" pos:column="13">(<argument><expr><literal type="string" pos:line="11" pos:column="14">"logfileFlush"<pos:position pos:line="11" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="30">logfileFlushEvent<pos:position pos:line="11" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="49">lf<pos:position pos:line="11" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="53">1.0<pos:position pos:line="11" pos:column="56"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="58">1<pos:position pos:line="11" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="61"/></expr_stmt>
}<pos:position pos:line="12" pos:column="2"/></block></function></unit>
