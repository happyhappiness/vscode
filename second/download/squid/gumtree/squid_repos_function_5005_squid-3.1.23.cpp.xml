<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5005_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">AsyncJob<pos:position pos:line="1" pos:column="14"/></name><operator pos:line="1" pos:column="14">::<pos:position pos:line="1" pos:column="16"/></operator><name pos:line="1" pos:column="16">callException<pos:position pos:line="1" pos:column="29"/></name></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><specifier pos:line="1" pos:column="30">const<pos:position pos:line="1" pos:column="35"/></specifier> <name><name pos:line="1" pos:column="36">std<pos:position pos:line="1" pos:column="39"/></name><operator pos:line="1" pos:column="39">::<pos:position pos:line="1" pos:column="41"/></operator><name pos:line="1" pos:column="41">exception<pos:position pos:line="1" pos:column="50"/></name></name> <modifier pos:line="1" pos:column="51">&amp;<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="52">e<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="54"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <comment type="line" pos:line="3" pos:column="5">// we must be called asynchronously and hence, the caller must lock us</comment>
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">Must<pos:position pos:line="4" pos:column="9"/></name><argument_list pos:line="4" pos:column="9">(<argument><expr><call><name pos:line="4" pos:column="10">cbdataReferenceValid<pos:position pos:line="4" pos:column="30"/></name><argument_list pos:line="4" pos:column="30">(<argument><expr><call><name pos:line="4" pos:column="31">toCbdata<pos:position pos:line="4" pos:column="39"/></name><argument_list pos:line="4" pos:column="39">()<pos:position pos:line="4" pos:column="41"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="42"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="44"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="6" pos:column="5">mustStop<pos:position pos:line="6" pos:column="13"/></name><argument_list pos:line="6" pos:column="13">(<argument><expr><literal type="string" pos:line="6" pos:column="14">"exception"<pos:position pos:line="6" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="27"/></expr_stmt>
}<pos:position pos:line="7" pos:column="2"/></block></function></unit>
