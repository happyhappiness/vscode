<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5413_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">MemAllocator<pos:position pos:line="1" pos:column="20"/></name> <modifier pos:line="1" pos:column="21">*<pos:position pos:line="1" pos:column="22"/></modifier><modifier pos:line="1" pos:column="22">&amp;<pos:position pos:line="1" pos:column="27"/></modifier></type>
<name pos:line="2" pos:column="1">GetPool<pos:position pos:line="2" pos:column="8"/></name><parameter_list pos:line="2" pos:column="8">(<parameter><decl><type><name pos:line="2" pos:column="9">size_t<pos:position pos:line="2" pos:column="15"/></name></type> <name pos:line="2" pos:column="16">type<pos:position pos:line="2" pos:column="20"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="21"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><specifier pos:line="4" pos:column="5">static<pos:position pos:line="4" pos:column="11"/></specifier> <type><name pos:line="4" pos:column="12">MemAllocator<pos:position pos:line="4" pos:column="24"/></name> <modifier pos:line="4" pos:column="25">*<pos:position pos:line="4" pos:column="26"/></modifier></type><name><name pos:line="4" pos:column="26">pools<pos:position pos:line="4" pos:column="31"/></name><index pos:line="4" pos:column="31">[<expr><name pos:line="4" pos:column="32">MEM_MAX<pos:position pos:line="4" pos:column="39"/></name></expr>]<pos:position pos:line="4" pos:column="40"/></index></name></decl>;<pos:position pos:line="4" pos:column="41"/></decl_stmt>
    <decl_stmt><decl><specifier pos:line="5" pos:column="5">static<pos:position pos:line="5" pos:column="11"/></specifier> <type><name pos:line="5" pos:column="12">bool<pos:position pos:line="5" pos:column="16"/></name></type> <name pos:line="5" pos:column="17">initialized<pos:position pos:line="5" pos:column="28"/></name> <init pos:line="5" pos:column="29">= <expr><literal type="boolean" pos:line="5" pos:column="31">false<pos:position pos:line="5" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="37"/></decl_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><operator pos:line="7" pos:column="9">!<pos:position pos:line="7" pos:column="10"/></operator><name pos:line="7" pos:column="10">initialized<pos:position pos:line="7" pos:column="21"/></name></expr>)<pos:position pos:line="7" pos:column="22"/></condition><then pos:line="7" pos:column="22"> <block pos:line="7" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">memset<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><name pos:line="8" pos:column="16">pools<pos:position pos:line="8" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="8" pos:column="23">'\0'<pos:position pos:line="8" pos:column="27"/></literal></expr></argument>, <argument><expr><sizeof pos:line="8" pos:column="29">sizeof<argument_list pos:line="8" pos:column="35">(<argument><expr><name pos:line="8" pos:column="36">pools<pos:position pos:line="8" pos:column="41"/></name></expr></argument>)<pos:position pos:line="8" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="8" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><name pos:line="9" pos:column="9">initialized<pos:position pos:line="9" pos:column="20"/></name> <operator pos:line="9" pos:column="21">=<pos:position pos:line="9" pos:column="22"/></operator> <literal type="boolean" pos:line="9" pos:column="23">true<pos:position pos:line="9" pos:column="27"/></literal></expr>;<pos:position pos:line="9" pos:column="28"/></expr_stmt>
        <comment type="line" pos:line="10" pos:column="9">// Mem::Init() makes use of GetPool(type) to initialize</comment>
        <comment type="line" pos:line="11" pos:column="9">// the actual pools. So must come after the flag is true</comment>
        <expr_stmt><expr><call><name><name pos:line="12" pos:column="9">Mem<pos:position pos:line="12" pos:column="12"/></name><operator pos:line="12" pos:column="12">::<pos:position pos:line="12" pos:column="14"/></operator><name pos:line="12" pos:column="14">Init<pos:position pos:line="12" pos:column="18"/></name></name><argument_list pos:line="12" pos:column="18">()<pos:position pos:line="12" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <return pos:line="15" pos:column="5">return <expr><name><name pos:line="15" pos:column="12">pools<pos:position pos:line="15" pos:column="17"/></name><index pos:line="15" pos:column="17">[<expr><name pos:line="15" pos:column="18">type<pos:position pos:line="15" pos:column="22"/></name></expr>]<pos:position pos:line="15" pos:column="23"/></index></name></expr>;<pos:position pos:line="15" pos:column="24"/></return>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
