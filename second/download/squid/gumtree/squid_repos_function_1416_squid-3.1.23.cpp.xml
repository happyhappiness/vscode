<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1416_squid-3.1.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">mainReconfigureFinish<pos:position pos:line="2" pos:column="22"/></name><parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><name pos:line="2" pos:column="23">void<pos:position pos:line="2" pos:column="27"/></name> <modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier></type></decl></parameter>)<pos:position pos:line="2" pos:column="30"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">1<pos:position pos:line="4" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="15">3<pos:position pos:line="4" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="18">"finishing reconfiguring"<pos:position pos:line="4" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="45"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="6" pos:column="5">errorClean<pos:position pos:line="6" pos:column="15"/></name><argument_list pos:line="6" pos:column="15">()<pos:position pos:line="6" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">enter_suid<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">()<pos:position pos:line="7" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="18"/></expr_stmt>		<comment type="block" pos:line="7" pos:column="33">/* root to read config file */</comment>

    <comment type="line" pos:line="9" pos:column="5">// we may have disabled the need for PURGE</comment>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name><name pos:line="10" pos:column="9">Config2<pos:position pos:line="10" pos:column="16"/></name><operator pos:line="10" pos:column="16">.<pos:position pos:line="10" pos:column="17"/></operator><name pos:line="10" pos:column="17">onoff<pos:position pos:line="10" pos:column="22"/></name><operator pos:line="10" pos:column="22">.<pos:position pos:line="10" pos:column="23"/></operator><name pos:line="10" pos:column="23">enable_purge<pos:position pos:line="10" pos:column="35"/></name></name></expr>)<pos:position pos:line="10" pos:column="36"/></condition><then pos:line="10" pos:column="36">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="11" pos:column="9">Config2<pos:position pos:line="11" pos:column="16"/></name><operator pos:line="11" pos:column="16">.<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="17">onoff<pos:position pos:line="11" pos:column="22"/></name><operator pos:line="11" pos:column="22">.<pos:position pos:line="11" pos:column="23"/></operator><name pos:line="11" pos:column="23">enable_purge<pos:position pos:line="11" pos:column="35"/></name></name> <operator pos:line="11" pos:column="36">=<pos:position pos:line="11" pos:column="37"/></operator> <literal type="number" pos:line="11" pos:column="38">2<pos:position pos:line="11" pos:column="39"/></literal></expr>;<pos:position pos:line="11" pos:column="40"/></expr_stmt></block></then></if>

    <comment type="line" pos:line="13" pos:column="5">// parse the config returns a count of errors encountered.</comment>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">( <expr><call><name pos:line="14" pos:column="10">parseConfigFile<pos:position pos:line="14" pos:column="25"/></name><argument_list pos:line="14" pos:column="25">(<argument><expr><name pos:line="14" pos:column="26">ConfigFile<pos:position pos:line="14" pos:column="36"/></name></expr></argument>)<pos:position pos:line="14" pos:column="37"/></argument_list></call> <operator pos:line="14" pos:column="38">!=<pos:position pos:line="14" pos:column="40"/></operator> <literal type="number" pos:line="14" pos:column="41">0<pos:position pos:line="14" pos:column="42"/></literal></expr>)<pos:position pos:line="14" pos:column="43"/></condition><then pos:line="14" pos:column="43"> <block pos:line="14" pos:column="44">{
        <comment type="line" pos:line="15" pos:column="9">// for now any errors are a fatal condition...</comment>
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">self_destruct<pos:position pos:line="16" pos:column="22"/></name><argument_list pos:line="16" pos:column="22">()<pos:position pos:line="16" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="19" pos:column="5">setUmask<pos:position pos:line="19" pos:column="13"/></name><argument_list pos:line="19" pos:column="13">(<argument><expr><name><name pos:line="19" pos:column="14">Config<pos:position pos:line="19" pos:column="20"/></name><operator pos:line="19" pos:column="20">.<pos:position pos:line="19" pos:column="21"/></operator><name pos:line="19" pos:column="21">umask<pos:position pos:line="19" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="20" pos:column="5">Mem<pos:position pos:line="20" pos:column="8"/></name><operator pos:line="20" pos:column="8">::<pos:position pos:line="20" pos:column="10"/></operator><name pos:line="20" pos:column="10">Report<pos:position pos:line="20" pos:column="16"/></name></name><argument_list pos:line="20" pos:column="16">()<pos:position pos:line="20" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">setEffectiveUser<pos:position pos:line="21" pos:column="21"/></name><argument_list pos:line="21" pos:column="21">()<pos:position pos:line="21" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">_db_init<pos:position pos:line="22" pos:column="13"/></name><argument_list pos:line="22" pos:column="13">(<argument><expr><name><name pos:line="22" pos:column="14">Debug<pos:position pos:line="22" pos:column="19"/></name><operator pos:line="22" pos:column="19">::<pos:position pos:line="22" pos:column="21"/></operator><name pos:line="22" pos:column="21">cache_log<pos:position pos:line="22" pos:column="30"/></name></name></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="32">Debug<pos:position pos:line="22" pos:column="37"/></name><operator pos:line="22" pos:column="37">::<pos:position pos:line="22" pos:column="39"/></operator><name pos:line="22" pos:column="39">debugOptions<pos:position pos:line="22" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">ipcache_restart<pos:position pos:line="23" pos:column="20"/></name><argument_list pos:line="23" pos:column="20">()<pos:position pos:line="23" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="23"/></expr_stmt>		<comment type="block" pos:line="23" pos:column="33">/* clear stuck entries */</comment>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">authenticateUserCacheRestart<pos:position pos:line="24" pos:column="33"/></name><argument_list pos:line="24" pos:column="33">()<pos:position pos:line="24" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="36"/></expr_stmt>	<comment type="block" pos:line="24" pos:column="41">/* clear stuck ACL entries */</comment>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">fqdncache_restart<pos:position pos:line="25" pos:column="22"/></name><argument_list pos:line="25" pos:column="22">()<pos:position pos:line="25" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="25"/></expr_stmt>	<comment type="block" pos:line="25" pos:column="33">/* sigh, fqdncache too */</comment>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">parseEtcHosts<pos:position pos:line="26" pos:column="18"/></name><argument_list pos:line="26" pos:column="18">()<pos:position pos:line="26" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">errorInitialize<pos:position pos:line="27" pos:column="20"/></name><argument_list pos:line="27" pos:column="20">()<pos:position pos:line="27" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="23"/></expr_stmt>		<comment type="block" pos:line="27" pos:column="33">/* reload error pages */</comment>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">accessLogInit<pos:position pos:line="28" pos:column="18"/></name><argument_list pos:line="28" pos:column="18">()<pos:position pos:line="28" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="21"/></expr_stmt>

<cpp:if pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">if<pos:position pos:line="30" pos:column="4"/></cpp:directive> <expr><name pos:line="30" pos:column="5">USE_LOADABLE_MODULES<pos:position pos:line="30" pos:column="25"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">LoadableModulesConfigure<pos:position pos:line="31" pos:column="29"/></name><argument_list pos:line="31" pos:column="29">(<argument><expr><name><name pos:line="31" pos:column="30">Config<pos:position pos:line="31" pos:column="36"/></name><operator pos:line="31" pos:column="36">.<pos:position pos:line="31" pos:column="37"/></operator><name pos:line="31" pos:column="37">loadable_module_names<pos:position pos:line="31" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="60"/></expr_stmt>
<cpp:endif pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">endif<pos:position pos:line="32" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">if<pos:position pos:line="34" pos:column="4"/></cpp:directive> <expr><name pos:line="34" pos:column="5">USE_ADAPTATION<pos:position pos:line="34" pos:column="19"/></name></expr></cpp:if>
    <decl_stmt><decl><type><name pos:line="35" pos:column="5">bool<pos:position pos:line="35" pos:column="9"/></name></type> <name pos:line="35" pos:column="10">enableAdaptation<pos:position pos:line="35" pos:column="26"/></name> <init pos:line="35" pos:column="27">= <expr><literal type="boolean" pos:line="35" pos:column="29">false<pos:position pos:line="35" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="35" pos:column="35"/></decl_stmt>
<cpp:if pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">if<pos:position pos:line="36" pos:column="4"/></cpp:directive> <expr><name pos:line="36" pos:column="5">ICAP_CLIENT<pos:position pos:line="36" pos:column="16"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name><name pos:line="37" pos:column="5">Adaptation<pos:position pos:line="37" pos:column="15"/></name><operator pos:line="37" pos:column="15">::<pos:position pos:line="37" pos:column="17"/></operator><name pos:line="37" pos:column="17">Icap<pos:position pos:line="37" pos:column="21"/></name><operator pos:line="37" pos:column="21">::<pos:position pos:line="37" pos:column="23"/></operator><name pos:line="37" pos:column="23">TheConfig<pos:position pos:line="37" pos:column="32"/></name><operator pos:line="37" pos:column="32">.<pos:position pos:line="37" pos:column="33"/></operator><name pos:line="37" pos:column="33">finalize<pos:position pos:line="37" pos:column="41"/></name></name><argument_list pos:line="37" pos:column="41">()<pos:position pos:line="37" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><name pos:line="38" pos:column="5">enableAdaptation<pos:position pos:line="38" pos:column="21"/></name> <operator pos:line="38" pos:column="22">=<pos:position pos:line="38" pos:column="23"/></operator> <name><name pos:line="38" pos:column="24">Adaptation<pos:position pos:line="38" pos:column="34"/></name><operator pos:line="38" pos:column="34">::<pos:position pos:line="38" pos:column="36"/></operator><name pos:line="38" pos:column="36">Icap<pos:position pos:line="38" pos:column="40"/></name><operator pos:line="38" pos:column="40">::<pos:position pos:line="38" pos:column="42"/></operator><name pos:line="38" pos:column="42">TheConfig<pos:position pos:line="38" pos:column="51"/></name><operator pos:line="38" pos:column="51">.<pos:position pos:line="38" pos:column="52"/></operator><name pos:line="38" pos:column="52">onoff<pos:position pos:line="38" pos:column="57"/></name></name> <operator pos:line="38" pos:column="58">||<pos:position pos:line="38" pos:column="60"/></operator> <name pos:line="38" pos:column="61">enableAdaptation<pos:position pos:line="38" pos:column="77"/></name></expr>;<pos:position pos:line="38" pos:column="78"/></expr_stmt>
<cpp:endif pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">endif<pos:position pos:line="39" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">if<pos:position pos:line="40" pos:column="4"/></cpp:directive> <expr><name pos:line="40" pos:column="5">USE_ECAP<pos:position pos:line="40" pos:column="13"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name><name pos:line="41" pos:column="5">Adaptation<pos:position pos:line="41" pos:column="15"/></name><operator pos:line="41" pos:column="15">::<pos:position pos:line="41" pos:column="17"/></operator><name pos:line="41" pos:column="17">Ecap<pos:position pos:line="41" pos:column="21"/></name><operator pos:line="41" pos:column="21">::<pos:position pos:line="41" pos:column="23"/></operator><name pos:line="41" pos:column="23">TheConfig<pos:position pos:line="41" pos:column="32"/></name><operator pos:line="41" pos:column="32">.<pos:position pos:line="41" pos:column="33"/></operator><name pos:line="41" pos:column="33">finalize<pos:position pos:line="41" pos:column="41"/></name></name><argument_list pos:line="41" pos:column="41">()<pos:position pos:line="41" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="44"/></expr_stmt> <comment type="line" pos:line="41" pos:column="45">// must be after we load modules</comment>
    <expr_stmt><expr><name pos:line="42" pos:column="5">enableAdaptation<pos:position pos:line="42" pos:column="21"/></name> <operator pos:line="42" pos:column="22">=<pos:position pos:line="42" pos:column="23"/></operator> <name><name pos:line="42" pos:column="24">Adaptation<pos:position pos:line="42" pos:column="34"/></name><operator pos:line="42" pos:column="34">::<pos:position pos:line="42" pos:column="36"/></operator><name pos:line="42" pos:column="36">Ecap<pos:position pos:line="42" pos:column="40"/></name><operator pos:line="42" pos:column="40">::<pos:position pos:line="42" pos:column="42"/></operator><name pos:line="42" pos:column="42">TheConfig<pos:position pos:line="42" pos:column="51"/></name><operator pos:line="42" pos:column="51">.<pos:position pos:line="42" pos:column="52"/></operator><name pos:line="42" pos:column="52">onoff<pos:position pos:line="42" pos:column="57"/></name></name> <operator pos:line="42" pos:column="58">||<pos:position pos:line="42" pos:column="60"/></operator> <name pos:line="42" pos:column="61">enableAdaptation<pos:position pos:line="42" pos:column="77"/></name></expr>;<pos:position pos:line="42" pos:column="78"/></expr_stmt>
<cpp:endif pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">endif<pos:position pos:line="43" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name><name pos:line="44" pos:column="5">Adaptation<pos:position pos:line="44" pos:column="15"/></name><operator pos:line="44" pos:column="15">::<pos:position pos:line="44" pos:column="17"/></operator><name pos:line="44" pos:column="17">Config<pos:position pos:line="44" pos:column="23"/></name><operator pos:line="44" pos:column="23">::<pos:position pos:line="44" pos:column="25"/></operator><name pos:line="44" pos:column="25">Finalize<pos:position pos:line="44" pos:column="33"/></name></name><argument_list pos:line="44" pos:column="33">(<argument><expr><name pos:line="44" pos:column="34">enableAdaptation<pos:position pos:line="44" pos:column="50"/></name></expr></argument>)<pos:position pos:line="44" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="52"/></expr_stmt>
<cpp:endif pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">endif<pos:position pos:line="45" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">if<pos:position pos:line="47" pos:column="4"/></cpp:directive> <expr><name pos:line="47" pos:column="5">ICAP_CLIENT<pos:position pos:line="47" pos:column="16"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="48" pos:column="5">icapLogOpen<pos:position pos:line="48" pos:column="16"/></name><argument_list pos:line="48" pos:column="16">()<pos:position pos:line="48" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="19"/></expr_stmt>
<cpp:endif pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">endif<pos:position pos:line="49" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name pos:line="50" pos:column="5">storeLogOpen<pos:position pos:line="50" pos:column="17"/></name><argument_list pos:line="50" pos:column="17">()<pos:position pos:line="50" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="51" pos:column="5">useragentOpenLog<pos:position pos:line="51" pos:column="21"/></name><argument_list pos:line="51" pos:column="21">()<pos:position pos:line="51" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="52" pos:column="5">refererOpenLog<pos:position pos:line="52" pos:column="19"/></name><argument_list pos:line="52" pos:column="19">()<pos:position pos:line="52" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="22"/></expr_stmt>
<cpp:if pos:line="53" pos:column="1">#<cpp:directive pos:line="53" pos:column="2">if<pos:position pos:line="53" pos:column="4"/></cpp:directive> <expr><name pos:line="53" pos:column="5">USE_DNSSERVERS<pos:position pos:line="53" pos:column="19"/></name></expr></cpp:if>

    <expr_stmt><expr><call><name pos:line="55" pos:column="5">dnsInit<pos:position pos:line="55" pos:column="12"/></name><argument_list pos:line="55" pos:column="12">()<pos:position pos:line="55" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="15"/></expr_stmt>
<cpp:else pos:line="56" pos:column="1">#<cpp:directive pos:line="56" pos:column="2">else<pos:position pos:line="56" pos:column="6"/></cpp:directive></cpp:else>

    <expr_stmt><expr><call><name pos:line="58" pos:column="5">idnsInit<pos:position pos:line="58" pos:column="13"/></name><argument_list pos:line="58" pos:column="13">()<pos:position pos:line="58" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="16"/></expr_stmt>
<cpp:endif pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">endif<pos:position pos:line="59" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="60" pos:column="1">#<cpp:directive pos:line="60" pos:column="2">if<pos:position pos:line="60" pos:column="4"/></cpp:directive> <expr><name pos:line="60" pos:column="5">USE_SSL_CRTD<pos:position pos:line="60" pos:column="17"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name><name pos:line="61" pos:column="5">Ssl<pos:position pos:line="61" pos:column="8"/></name><operator pos:line="61" pos:column="8">::<pos:position pos:line="61" pos:column="10"/></operator><name pos:line="61" pos:column="10">Helper<pos:position pos:line="61" pos:column="16"/></name><operator pos:line="61" pos:column="16">::<pos:position pos:line="61" pos:column="18"/></operator><name pos:line="61" pos:column="18">GetInstance<pos:position pos:line="61" pos:column="29"/></name></name><argument_list pos:line="61" pos:column="29">()<pos:position pos:line="61" pos:column="31"/></argument_list></call><operator pos:line="61" pos:column="31">-&gt;<pos:position pos:line="61" pos:column="36"/></operator><call><name pos:line="61" pos:column="33">Init<pos:position pos:line="61" pos:column="37"/></name><argument_list pos:line="61" pos:column="37">()<pos:position pos:line="61" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="40"/></expr_stmt>
<cpp:endif pos:line="62" pos:column="1">#<cpp:directive pos:line="62" pos:column="2">endif<pos:position pos:line="62" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="64" pos:column="5">redirectInit<pos:position pos:line="64" pos:column="17"/></name><argument_list pos:line="64" pos:column="17">()<pos:position pos:line="64" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="65" pos:column="5">authenticateInit<pos:position pos:line="65" pos:column="21"/></name><argument_list pos:line="65" pos:column="21">(<argument><expr><operator pos:line="65" pos:column="22">&amp;<pos:position pos:line="65" pos:column="27"/></operator><name><name pos:line="65" pos:column="23">Config<pos:position pos:line="65" pos:column="29"/></name><operator pos:line="65" pos:column="29">.<pos:position pos:line="65" pos:column="30"/></operator><name pos:line="65" pos:column="30">authConfiguration<pos:position pos:line="65" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="65" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="66" pos:column="5">externalAclInit<pos:position pos:line="66" pos:column="20"/></name><argument_list pos:line="66" pos:column="20">()<pos:position pos:line="66" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="23"/></expr_stmt>
<cpp:if pos:line="67" pos:column="1">#<cpp:directive pos:line="67" pos:column="2">if<pos:position pos:line="67" pos:column="4"/></cpp:directive> <expr><name pos:line="67" pos:column="5">USE_WCCP<pos:position pos:line="67" pos:column="13"/></name></expr></cpp:if>

    <expr_stmt><expr><call><name pos:line="69" pos:column="5">wccpInit<pos:position pos:line="69" pos:column="13"/></name><argument_list pos:line="69" pos:column="13">()<pos:position pos:line="69" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="16"/></expr_stmt>
<cpp:endif pos:line="70" pos:column="1">#<cpp:directive pos:line="70" pos:column="2">endif<pos:position pos:line="70" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="71" pos:column="1">#<cpp:directive pos:line="71" pos:column="2">if<pos:position pos:line="71" pos:column="4"/></cpp:directive> <expr><name pos:line="71" pos:column="5">USE_WCCPv2<pos:position pos:line="71" pos:column="15"/></name></expr></cpp:if>

    <expr_stmt><expr><call><name pos:line="73" pos:column="5">wccp2Init<pos:position pos:line="73" pos:column="14"/></name><argument_list pos:line="73" pos:column="14">()<pos:position pos:line="73" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="17"/></expr_stmt>
<cpp:endif pos:line="74" pos:column="1">#<cpp:directive pos:line="74" pos:column="2">endif<pos:position pos:line="74" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="76" pos:column="5">serverConnectionsOpen<pos:position pos:line="76" pos:column="26"/></name><argument_list pos:line="76" pos:column="26">()<pos:position pos:line="76" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="29"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="78" pos:column="5">neighbors_init<pos:position pos:line="78" pos:column="19"/></name><argument_list pos:line="78" pos:column="19">()<pos:position pos:line="78" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="22"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="80" pos:column="5">storeDirOpenSwapLogs<pos:position pos:line="80" pos:column="25"/></name><argument_list pos:line="80" pos:column="25">()<pos:position pos:line="80" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="28"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="82" pos:column="5">mimeInit<pos:position pos:line="82" pos:column="13"/></name><argument_list pos:line="82" pos:column="13">(<argument><expr><name><name pos:line="82" pos:column="14">Config<pos:position pos:line="82" pos:column="20"/></name><operator pos:line="82" pos:column="20">.<pos:position pos:line="82" pos:column="21"/></operator><name pos:line="82" pos:column="21">mimeTablePathname<pos:position pos:line="82" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="82" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="40"/></expr_stmt>

    <if pos:line="84" pos:column="5">if <condition pos:line="84" pos:column="8">(<expr><name><name pos:line="84" pos:column="9">Config<pos:position pos:line="84" pos:column="15"/></name><operator pos:line="84" pos:column="15">.<pos:position pos:line="84" pos:column="16"/></operator><name pos:line="84" pos:column="16">onoff<pos:position pos:line="84" pos:column="21"/></name><operator pos:line="84" pos:column="21">.<pos:position pos:line="84" pos:column="22"/></operator><name pos:line="84" pos:column="22">announce<pos:position pos:line="84" pos:column="30"/></name></name></expr>)<pos:position pos:line="84" pos:column="31"/></condition><then pos:line="84" pos:column="31"> <block pos:line="84" pos:column="32">{
        <if pos:line="85" pos:column="9">if <condition pos:line="85" pos:column="12">(<expr><operator pos:line="85" pos:column="13">!<pos:position pos:line="85" pos:column="14"/></operator><call><name pos:line="85" pos:column="14">eventFind<pos:position pos:line="85" pos:column="23"/></name><argument_list pos:line="85" pos:column="23">(<argument><expr><name pos:line="85" pos:column="24">start_announce<pos:position pos:line="85" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="40">NULL<pos:position pos:line="85" pos:column="44"/></name></expr></argument>)<pos:position pos:line="85" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="85" pos:column="46"/></condition><then pos:line="85" pos:column="46">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="86" pos:column="13">eventAdd<pos:position pos:line="86" pos:column="21"/></name><argument_list pos:line="86" pos:column="21">(<argument><expr><literal type="string" pos:line="86" pos:column="22">"start_announce"<pos:position pos:line="86" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="86" pos:column="40">start_announce<pos:position pos:line="86" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="56">NULL<pos:position pos:line="86" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="86" pos:column="62">3600.0<pos:position pos:line="86" pos:column="68"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="86" pos:column="70">1<pos:position pos:line="86" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="73"/></expr_stmt></block></then></if>
    }<pos:position pos:line="87" pos:column="6"/></block></then> <else pos:line="87" pos:column="7">else <block pos:line="87" pos:column="12">{
        <if pos:line="88" pos:column="9">if <condition pos:line="88" pos:column="12">(<expr><call><name pos:line="88" pos:column="13">eventFind<pos:position pos:line="88" pos:column="22"/></name><argument_list pos:line="88" pos:column="22">(<argument><expr><name pos:line="88" pos:column="23">start_announce<pos:position pos:line="88" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="39">NULL<pos:position pos:line="88" pos:column="43"/></name></expr></argument>)<pos:position pos:line="88" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="88" pos:column="45"/></condition><then pos:line="88" pos:column="45">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="89" pos:column="13">eventDelete<pos:position pos:line="89" pos:column="24"/></name><argument_list pos:line="89" pos:column="24">(<argument><expr><name pos:line="89" pos:column="25">start_announce<pos:position pos:line="89" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="41">NULL<pos:position pos:line="89" pos:column="45"/></name></expr></argument>)<pos:position pos:line="89" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="47"/></expr_stmt></block></then></if>
    }<pos:position pos:line="90" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="92" pos:column="5">writePidFile<pos:position pos:line="92" pos:column="17"/></name><argument_list pos:line="92" pos:column="17">()<pos:position pos:line="92" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="20"/></expr_stmt>		<comment type="block" pos:line="92" pos:column="33">/* write PID file */</comment>

    <expr_stmt><expr><call><name pos:line="94" pos:column="5">debugs<pos:position pos:line="94" pos:column="11"/></name><argument_list pos:line="94" pos:column="11">(<argument><expr><literal type="number" pos:line="94" pos:column="12">1<pos:position pos:line="94" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="94" pos:column="15">1<pos:position pos:line="94" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="94" pos:column="18">"Ready to serve requests."<pos:position pos:line="94" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="94" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="46"/></expr_stmt>

    <expr_stmt><expr><name pos:line="96" pos:column="5">reconfiguring<pos:position pos:line="96" pos:column="18"/></name> <operator pos:line="96" pos:column="19">=<pos:position pos:line="96" pos:column="20"/></operator> <literal type="number" pos:line="96" pos:column="21">0<pos:position pos:line="96" pos:column="22"/></literal></expr>;<pos:position pos:line="96" pos:column="23"/></expr_stmt>
}<pos:position pos:line="97" pos:column="2"/></block></function></unit>
