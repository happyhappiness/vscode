<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2831_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HttpHeaderEntry<pos:position pos:line="2" pos:column="16"/></name><operator pos:line="2" pos:column="16">::<pos:position pos:line="2" pos:column="18"/></operator><name pos:line="2" pos:column="18">packInto<pos:position pos:line="2" pos:column="26"/></name></name><parameter_list pos:line="2" pos:column="26">(<parameter><decl><type><name pos:line="2" pos:column="27">Packer<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type> <name pos:line="2" pos:column="36">p<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="38"/></parameter_list> <specifier pos:line="2" pos:column="39">const<pos:position pos:line="2" pos:column="44"/></specifier>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">p<pos:position pos:line="4" pos:column="13"/></name></expr></argument>)<pos:position pos:line="4" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">packerAppend<pos:position pos:line="5" pos:column="17"/></name><argument_list pos:line="5" pos:column="17">(<argument><expr><name pos:line="5" pos:column="18">p<pos:position pos:line="5" pos:column="19"/></name></expr></argument>, <argument><expr><call><name><name pos:line="5" pos:column="21">name<pos:position pos:line="5" pos:column="25"/></name><operator pos:line="5" pos:column="25">.<pos:position pos:line="5" pos:column="26"/></operator><name pos:line="5" pos:column="26">rawBuf<pos:position pos:line="5" pos:column="32"/></name></name><argument_list pos:line="5" pos:column="32">()<pos:position pos:line="5" pos:column="34"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="5" pos:column="36">name<pos:position pos:line="5" pos:column="40"/></name><operator pos:line="5" pos:column="40">.<pos:position pos:line="5" pos:column="41"/></operator><name pos:line="5" pos:column="41">size<pos:position pos:line="5" pos:column="45"/></name></name><argument_list pos:line="5" pos:column="45">()<pos:position pos:line="5" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">packerAppend<pos:position pos:line="6" pos:column="17"/></name><argument_list pos:line="6" pos:column="17">(<argument><expr><name pos:line="6" pos:column="18">p<pos:position pos:line="6" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="21">": "<pos:position pos:line="6" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="27">2<pos:position pos:line="6" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">packerAppend<pos:position pos:line="7" pos:column="17"/></name><argument_list pos:line="7" pos:column="17">(<argument><expr><name pos:line="7" pos:column="18">p<pos:position pos:line="7" pos:column="19"/></name></expr></argument>, <argument><expr><call><name><name pos:line="7" pos:column="21">value<pos:position pos:line="7" pos:column="26"/></name><operator pos:line="7" pos:column="26">.<pos:position pos:line="7" pos:column="27"/></operator><name pos:line="7" pos:column="27">rawBuf<pos:position pos:line="7" pos:column="33"/></name></name><argument_list pos:line="7" pos:column="33">()<pos:position pos:line="7" pos:column="35"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="7" pos:column="37">value<pos:position pos:line="7" pos:column="42"/></name><operator pos:line="7" pos:column="42">.<pos:position pos:line="7" pos:column="43"/></operator><name pos:line="7" pos:column="43">size<pos:position pos:line="7" pos:column="47"/></name></name><argument_list pos:line="7" pos:column="47">()<pos:position pos:line="7" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">packerAppend<pos:position pos:line="8" pos:column="17"/></name><argument_list pos:line="8" pos:column="17">(<argument><expr><name pos:line="8" pos:column="18">p<pos:position pos:line="8" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="21">"\r\n"<pos:position pos:line="8" pos:column="27"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="29">2<pos:position pos:line="8" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="32"/></expr_stmt>
}<pos:position pos:line="9" pos:column="2"/></block></function></unit>
