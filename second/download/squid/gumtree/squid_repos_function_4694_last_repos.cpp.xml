<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4694_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">AnyP<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">UriScheme<pos:position pos:line="2" pos:column="16"/></name><operator pos:line="2" pos:column="16">::<pos:position pos:line="2" pos:column="18"/></operator><name pos:line="2" pos:column="18">Init<pos:position pos:line="2" pos:column="22"/></name></name><parameter_list pos:line="2" pos:column="22">()<pos:position pos:line="2" pos:column="24"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><call><name><name pos:line="4" pos:column="9">LowercaseSchemeNames_<pos:position pos:line="4" pos:column="30"/></name><operator pos:line="4" pos:column="30">.<pos:position pos:line="4" pos:column="31"/></operator><name pos:line="4" pos:column="31">empty<pos:position pos:line="4" pos:column="36"/></name></name><argument_list pos:line="4" pos:column="36">()<pos:position pos:line="4" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="39"/></condition><then pos:line="4" pos:column="39"> <block pos:line="4" pos:column="40">{
        <expr_stmt><expr><call><name><name pos:line="5" pos:column="9">LowercaseSchemeNames_<pos:position pos:line="5" pos:column="30"/></name><operator pos:line="5" pos:column="30">.<pos:position pos:line="5" pos:column="31"/></operator><name pos:line="5" pos:column="31">reserve<pos:position pos:line="5" pos:column="38"/></name></name><argument_list pos:line="5" pos:column="38">(<argument><expr><sizeof pos:line="5" pos:column="39">sizeof<argument_list pos:line="5" pos:column="45">(<argument><expr><name pos:line="5" pos:column="46">SBuf<pos:position pos:line="5" pos:column="50"/></name></expr></argument>)<pos:position pos:line="5" pos:column="51"/></argument_list></sizeof> <operator pos:line="5" pos:column="52">*<pos:position pos:line="5" pos:column="53"/></operator> <name><name pos:line="5" pos:column="54">AnyP<pos:position pos:line="5" pos:column="58"/></name><operator pos:line="5" pos:column="58">::<pos:position pos:line="5" pos:column="60"/></operator><name pos:line="5" pos:column="60">PROTO_MAX<pos:position pos:line="5" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="5" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="71"/></expr_stmt>
        <comment type="line" pos:line="6" pos:column="9">// TODO: use base/EnumIterator.h if possible</comment>
        <for pos:line="7" pos:column="9">for <control pos:line="7" pos:column="13">(<init><decl><type><name pos:line="7" pos:column="14">int<pos:position pos:line="7" pos:column="17"/></name></type> <name pos:line="7" pos:column="18">i<pos:position pos:line="7" pos:column="19"/></name> <init pos:line="7" pos:column="20">= <expr><name><name pos:line="7" pos:column="22">AnyP<pos:position pos:line="7" pos:column="26"/></name><operator pos:line="7" pos:column="26">::<pos:position pos:line="7" pos:column="28"/></operator><name pos:line="7" pos:column="28">PROTO_NONE<pos:position pos:line="7" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="39"/></init> <condition><expr><name pos:line="7" pos:column="40">i<pos:position pos:line="7" pos:column="41"/></name> <operator pos:line="7" pos:column="42">&lt;<pos:position pos:line="7" pos:column="46"/></operator> <name><name pos:line="7" pos:column="44">AnyP<pos:position pos:line="7" pos:column="48"/></name><operator pos:line="7" pos:column="48">::<pos:position pos:line="7" pos:column="50"/></operator><name pos:line="7" pos:column="50">PROTO_MAX<pos:position pos:line="7" pos:column="59"/></name></name></expr>;<pos:position pos:line="7" pos:column="60"/></condition> <incr><expr><operator pos:line="7" pos:column="61">++<pos:position pos:line="7" pos:column="63"/></operator><name pos:line="7" pos:column="63">i<pos:position pos:line="7" pos:column="64"/></name></expr></incr>)<pos:position pos:line="7" pos:column="65"/></control> <block pos:line="7" pos:column="66">{
            <decl_stmt><decl><type><name pos:line="8" pos:column="13">SBuf<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">image<pos:position pos:line="8" pos:column="23"/></name><argument_list pos:line="8" pos:column="23">(<argument><expr><name><name pos:line="8" pos:column="24">ProtocolType_str<pos:position pos:line="8" pos:column="40"/></name><index pos:line="8" pos:column="40">[<expr><name pos:line="8" pos:column="41">i<pos:position pos:line="8" pos:column="42"/></name></expr>]<pos:position pos:line="8" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="8" pos:column="44"/></argument_list></decl>;<pos:position pos:line="8" pos:column="45"/></decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="9" pos:column="13">image<pos:position pos:line="9" pos:column="18"/></name><operator pos:line="9" pos:column="18">.<pos:position pos:line="9" pos:column="19"/></operator><name pos:line="9" pos:column="19">toLower<pos:position pos:line="9" pos:column="26"/></name></name><argument_list pos:line="9" pos:column="26">()<pos:position pos:line="9" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="10" pos:column="13">LowercaseSchemeNames_<pos:position pos:line="10" pos:column="34"/></name><operator pos:line="10" pos:column="34">.<pos:position pos:line="10" pos:column="35"/></operator><name pos:line="10" pos:column="35">emplace_back<pos:position pos:line="10" pos:column="47"/></name></name><argument_list pos:line="10" pos:column="47">(<argument><expr><name pos:line="10" pos:column="48">image<pos:position pos:line="10" pos:column="53"/></name></expr></argument>)<pos:position pos:line="10" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="55"/></expr_stmt>
        }<pos:position pos:line="11" pos:column="10"/></block></for>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
