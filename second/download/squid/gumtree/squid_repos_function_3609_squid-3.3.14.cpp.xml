<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3609_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">storeRebuildLoadEntry<pos:position pos:line="2" pos:column="22"/></name><parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><name pos:line="2" pos:column="23">int<pos:position pos:line="2" pos:column="26"/></name></type> <name pos:line="2" pos:column="27">fd<pos:position pos:line="2" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="31">int<pos:position pos:line="2" pos:column="34"/></name></type> <name pos:line="2" pos:column="35">diskIndex<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="46">MemBuf<pos:position pos:line="2" pos:column="52"/></name> <modifier pos:line="2" pos:column="53">&amp;<pos:position pos:line="2" pos:column="58"/></modifier></type><name pos:line="2" pos:column="54">buf<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>,
                      <parameter><decl><type><name pos:line="3" pos:column="23">StoreRebuildData<pos:position pos:line="3" pos:column="39"/></name> <modifier pos:line="3" pos:column="40">&amp;<pos:position pos:line="3" pos:column="45"/></modifier></type><name pos:line="3" pos:column="41">counts<pos:position pos:line="3" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="48"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><name pos:line="5" pos:column="9">fd<pos:position pos:line="5" pos:column="11"/></name> <operator pos:line="5" pos:column="12">&lt;<pos:position pos:line="5" pos:column="16"/></operator> <literal type="number" pos:line="5" pos:column="14">0<pos:position pos:line="5" pos:column="15"/></literal></expr>)<pos:position pos:line="5" pos:column="16"/></condition><then pos:line="5" pos:column="16">
        <block type="pseudo"><return pos:line="6" pos:column="9">return <expr><literal type="boolean" pos:line="6" pos:column="16">false<pos:position pos:line="6" pos:column="21"/></literal></expr>;<pos:position pos:line="6" pos:column="22"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="8" pos:column="5">assert<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><call><name><name pos:line="8" pos:column="12">buf<pos:position pos:line="8" pos:column="15"/></name><operator pos:line="8" pos:column="15">.<pos:position pos:line="8" pos:column="16"/></operator><name pos:line="8" pos:column="16">hasSpace<pos:position pos:line="8" pos:column="24"/></name></name><argument_list pos:line="8" pos:column="24">()<pos:position pos:line="8" pos:column="26"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="28"/></expr_stmt> <comment type="line" pos:line="8" pos:column="29">// caller must allocate</comment>

    <decl_stmt><decl><type><specifier pos:line="10" pos:column="5">const<pos:position pos:line="10" pos:column="10"/></specifier> <name pos:line="10" pos:column="11">int<pos:position pos:line="10" pos:column="14"/></name></type> <name pos:line="10" pos:column="15">len<pos:position pos:line="10" pos:column="18"/></name> <init pos:line="10" pos:column="19">= <expr><call><name pos:line="10" pos:column="21">FD_READ_METHOD<pos:position pos:line="10" pos:column="35"/></name><argument_list pos:line="10" pos:column="35">(<argument><expr><name pos:line="10" pos:column="36">fd<pos:position pos:line="10" pos:column="38"/></name></expr></argument>, <argument><expr><call><name><name pos:line="10" pos:column="40">buf<pos:position pos:line="10" pos:column="43"/></name><operator pos:line="10" pos:column="43">.<pos:position pos:line="10" pos:column="44"/></operator><name pos:line="10" pos:column="44">space<pos:position pos:line="10" pos:column="49"/></name></name><argument_list pos:line="10" pos:column="49">()<pos:position pos:line="10" pos:column="51"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="10" pos:column="53">buf<pos:position pos:line="10" pos:column="56"/></name><operator pos:line="10" pos:column="56">.<pos:position pos:line="10" pos:column="57"/></operator><name pos:line="10" pos:column="57">spaceSize<pos:position pos:line="10" pos:column="66"/></name></name><argument_list pos:line="10" pos:column="66">()<pos:position pos:line="10" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="70"/></decl_stmt>
    <expr_stmt><expr><operator pos:line="11" pos:column="5">++<pos:position pos:line="11" pos:column="7"/></operator> <name><name pos:line="11" pos:column="8">statCounter<pos:position pos:line="11" pos:column="19"/></name><operator pos:line="11" pos:column="19">.<pos:position pos:line="11" pos:column="20"/></operator><name pos:line="11" pos:column="20">syscalls<pos:position pos:line="11" pos:column="28"/></name><operator pos:line="11" pos:column="28">.<pos:position pos:line="11" pos:column="29"/></operator><name pos:line="11" pos:column="29">disk<pos:position pos:line="11" pos:column="33"/></name><operator pos:line="11" pos:column="33">.<pos:position pos:line="11" pos:column="34"/></operator><name pos:line="11" pos:column="34">reads<pos:position pos:line="11" pos:column="39"/></name></name></expr>;<pos:position pos:line="11" pos:column="40"/></expr_stmt>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">len<pos:position pos:line="12" pos:column="12"/></name> <operator pos:line="12" pos:column="13">&lt;<pos:position pos:line="12" pos:column="17"/></operator> <literal type="number" pos:line="12" pos:column="15">0<pos:position pos:line="12" pos:column="16"/></literal></expr>)<pos:position pos:line="12" pos:column="17"/></condition><then pos:line="12" pos:column="17"> <block pos:line="12" pos:column="18">{
        <decl_stmt><decl><type><specifier pos:line="13" pos:column="9">const<pos:position pos:line="13" pos:column="14"/></specifier> <name pos:line="13" pos:column="15">int<pos:position pos:line="13" pos:column="18"/></name></type> <name pos:line="13" pos:column="19">xerrno<pos:position pos:line="13" pos:column="25"/></name> <init pos:line="13" pos:column="26">= <expr><name pos:line="13" pos:column="28">errno<pos:position pos:line="13" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="34"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">debugs<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><literal type="number" pos:line="14" pos:column="16">47<pos:position pos:line="14" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="20">DBG_IMPORTANT<pos:position pos:line="14" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="35">"WARNING: cache_dir["<pos:position pos:line="14" pos:column="56"/></literal> <operator pos:line="14" pos:column="57">&lt;&lt;<pos:position pos:line="14" pos:column="65"/></operator> <name pos:line="14" pos:column="60">diskIndex<pos:position pos:line="14" pos:column="69"/></name> <operator pos:line="14" pos:column="70">&lt;&lt;<pos:position pos:line="14" pos:column="78"/></operator> <literal type="string" pos:line="14" pos:column="73">"]: "<pos:position pos:line="14" pos:column="78"/></literal> <operator pos:line="14" pos:column="79">&lt;&lt;<pos:position pos:line="14" pos:column="87"/></operator>
               <literal type="string" pos:line="15" pos:column="16">"Ignoring cached entry after meta data read failure: "<pos:position pos:line="15" pos:column="70"/></literal> <operator pos:line="15" pos:column="71">&lt;&lt;<pos:position pos:line="15" pos:column="79"/></operator> <call><name pos:line="15" pos:column="74">xstrerr<pos:position pos:line="15" pos:column="81"/></name><argument_list pos:line="15" pos:column="81">(<argument><expr><name pos:line="15" pos:column="82">xerrno<pos:position pos:line="15" pos:column="88"/></name></expr></argument>)<pos:position pos:line="15" pos:column="89"/></argument_list></call></expr></argument>)<pos:position pos:line="15" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="91"/></expr_stmt>
        <return pos:line="16" pos:column="9">return <expr><literal type="boolean" pos:line="16" pos:column="16">false<pos:position pos:line="16" pos:column="21"/></literal></expr>;<pos:position pos:line="16" pos:column="22"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="19" pos:column="5">buf<pos:position pos:line="19" pos:column="8"/></name><operator pos:line="19" pos:column="8">.<pos:position pos:line="19" pos:column="9"/></operator><name pos:line="19" pos:column="9">appended<pos:position pos:line="19" pos:column="17"/></name></name><argument_list pos:line="19" pos:column="17">(<argument><expr><name pos:line="19" pos:column="18">len<pos:position pos:line="19" pos:column="21"/></name></expr></argument>)<pos:position pos:line="19" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="23"/></expr_stmt>
    <return pos:line="20" pos:column="5">return <expr><literal type="boolean" pos:line="20" pos:column="12">true<pos:position pos:line="20" pos:column="16"/></literal></expr>;<pos:position pos:line="20" pos:column="17"/></return>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
