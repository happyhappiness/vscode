<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4928_squid-3.5.27.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">asHandleReply<pos:position pos:line="2" pos:column="14"/></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><name pos:line="2" pos:column="15">void<pos:position pos:line="2" pos:column="19"/></name> <modifier pos:line="2" pos:column="20">*<pos:position pos:line="2" pos:column="21"/></modifier></type><name pos:line="2" pos:column="21">data<pos:position pos:line="2" pos:column="25"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="27">StoreIOBuffer<pos:position pos:line="2" pos:column="40"/></name></type> <name pos:line="2" pos:column="41">result<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="48"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">ASState<pos:position pos:line="4" pos:column="12"/></name> <modifier pos:line="4" pos:column="13">*<pos:position pos:line="4" pos:column="14"/></modifier></type><name pos:line="4" pos:column="14">asState<pos:position pos:line="4" pos:column="21"/></name> <init pos:line="4" pos:column="22">= <expr><operator pos:line="4" pos:column="24">(<pos:position pos:line="4" pos:column="25"/></operator><name pos:line="4" pos:column="25">ASState<pos:position pos:line="4" pos:column="32"/></name> <operator pos:line="4" pos:column="33">*<pos:position pos:line="4" pos:column="34"/></operator><operator pos:line="4" pos:column="34">)<pos:position pos:line="4" pos:column="35"/></operator><name pos:line="4" pos:column="35">data<pos:position pos:line="4" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="40"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">StoreEntry<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">e<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><name><name pos:line="5" pos:column="21">asState<pos:position pos:line="5" pos:column="28"/></name><operator pos:line="5" pos:column="28">-&gt;<pos:position pos:line="5" pos:column="33"/></operator><name pos:line="5" pos:column="30">entry<pos:position pos:line="5" pos:column="35"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="36"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name> <modifier pos:line="6" pos:column="10">*<pos:position pos:line="6" pos:column="11"/></modifier></type><name pos:line="6" pos:column="11">s<pos:position pos:line="6" pos:column="12"/></name></decl>;<pos:position pos:line="6" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name> <modifier pos:line="7" pos:column="10">*<pos:position pos:line="7" pos:column="11"/></modifier></type><name pos:line="7" pos:column="11">t<pos:position pos:line="7" pos:column="12"/></name></decl>;<pos:position pos:line="7" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">char<pos:position pos:line="8" pos:column="9"/></name> <modifier pos:line="8" pos:column="10">*<pos:position pos:line="8" pos:column="11"/></modifier></type><name pos:line="8" pos:column="11">buf<pos:position pos:line="8" pos:column="14"/></name> <init pos:line="8" pos:column="15">= <expr><name><name pos:line="8" pos:column="17">asState<pos:position pos:line="8" pos:column="24"/></name><operator pos:line="8" pos:column="24">-&gt;<pos:position pos:line="8" pos:column="29"/></operator><name pos:line="8" pos:column="26">reqbuf<pos:position pos:line="8" pos:column="32"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">leftoversz<pos:position pos:line="9" pos:column="19"/></name> <init pos:line="9" pos:column="20">= <expr><operator pos:line="9" pos:column="22">-<pos:position pos:line="9" pos:column="23"/></operator><literal type="number" pos:line="9" pos:column="23">1<pos:position pos:line="9" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="25"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="11" pos:column="5">debugs<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><literal type="number" pos:line="11" pos:column="12">53<pos:position pos:line="11" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="16">3<pos:position pos:line="11" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="19">"asHandleReply: Called with size="<pos:position pos:line="11" pos:column="53"/></literal> <operator pos:line="11" pos:column="54">&lt;&lt;<pos:position pos:line="11" pos:column="62"/></operator> <operator pos:line="11" pos:column="57">(<pos:position pos:line="11" pos:column="58"/></operator><name pos:line="11" pos:column="58">unsigned<pos:position pos:line="11" pos:column="66"/></name> <name pos:line="11" pos:column="67">int<pos:position pos:line="11" pos:column="70"/></name><operator pos:line="11" pos:column="70">)<pos:position pos:line="11" pos:column="71"/></operator><name><name pos:line="11" pos:column="71">result<pos:position pos:line="11" pos:column="77"/></name><operator pos:line="11" pos:column="77">.<pos:position pos:line="11" pos:column="78"/></operator><name pos:line="11" pos:column="78">length<pos:position pos:line="11" pos:column="84"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="86"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">debugs<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><literal type="number" pos:line="12" pos:column="12">53<pos:position pos:line="12" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="16">3<pos:position pos:line="12" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="19">"asHandleReply: buffer='"<pos:position pos:line="12" pos:column="44"/></literal> <operator pos:line="12" pos:column="45">&lt;&lt;<pos:position pos:line="12" pos:column="53"/></operator> <name pos:line="12" pos:column="48">buf<pos:position pos:line="12" pos:column="51"/></name> <operator pos:line="12" pos:column="52">&lt;&lt;<pos:position pos:line="12" pos:column="60"/></operator> <literal type="string" pos:line="12" pos:column="55">"'"<pos:position pos:line="12" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="60"/></expr_stmt>

    <comment type="block" pos:line="14" pos:column="5">/* First figure out whether we should abort the request */</comment>

    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><call><name pos:line="16" pos:column="9">EBIT_TEST<pos:position pos:line="16" pos:column="18"/></name><argument_list pos:line="16" pos:column="18">(<argument><expr><name><name pos:line="16" pos:column="19">e<pos:position pos:line="16" pos:column="20"/></name><operator pos:line="16" pos:column="20">-&gt;<pos:position pos:line="16" pos:column="25"/></operator><name pos:line="16" pos:column="22">flags<pos:position pos:line="16" pos:column="27"/></name></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="29">ENTRY_ABORTED<pos:position pos:line="16" pos:column="42"/></name></expr></argument>)<pos:position pos:line="16" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="44"/></condition><then pos:line="16" pos:column="44"> <block pos:line="16" pos:column="45">{
        <expr_stmt><expr><operator pos:line="17" pos:column="9">delete<pos:position pos:line="17" pos:column="15"/></operator> <name pos:line="17" pos:column="16">asState<pos:position pos:line="17" pos:column="23"/></name></expr>;<pos:position pos:line="17" pos:column="24"/></expr_stmt>
        <return pos:line="18" pos:column="9">return;<pos:position pos:line="18" pos:column="16"/></return>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name><name pos:line="21" pos:column="9">result<pos:position pos:line="21" pos:column="15"/></name><operator pos:line="21" pos:column="15">.<pos:position pos:line="21" pos:column="16"/></operator><name pos:line="21" pos:column="16">length<pos:position pos:line="21" pos:column="22"/></name></name> <operator pos:line="21" pos:column="23">==<pos:position pos:line="21" pos:column="25"/></operator> <literal type="number" pos:line="21" pos:column="26">0<pos:position pos:line="21" pos:column="27"/></literal> <operator pos:line="21" pos:column="28">&amp;&amp;<pos:position pos:line="21" pos:column="38"/></operator> <name><name pos:line="21" pos:column="31">asState<pos:position pos:line="21" pos:column="38"/></name><operator pos:line="21" pos:column="38">-&gt;<pos:position pos:line="21" pos:column="43"/></operator><name pos:line="21" pos:column="40">dataRead<pos:position pos:line="21" pos:column="48"/></name></name></expr>)<pos:position pos:line="21" pos:column="49"/></condition><then pos:line="21" pos:column="49"> <block pos:line="21" pos:column="50">{
        <expr_stmt><expr><call><name pos:line="22" pos:column="9">debugs<pos:position pos:line="22" pos:column="15"/></name><argument_list pos:line="22" pos:column="15">(<argument><expr><literal type="number" pos:line="22" pos:column="16">53<pos:position pos:line="22" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="20">3<pos:position pos:line="22" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="23">"asHandleReply: Done: "<pos:position pos:line="22" pos:column="46"/></literal> <operator pos:line="22" pos:column="47">&lt;&lt;<pos:position pos:line="22" pos:column="55"/></operator> <call><name><name pos:line="22" pos:column="50">e<pos:position pos:line="22" pos:column="51"/></name><operator pos:line="22" pos:column="51">-&gt;<pos:position pos:line="22" pos:column="56"/></operator><name pos:line="22" pos:column="53">url<pos:position pos:line="22" pos:column="56"/></name></name><argument_list pos:line="22" pos:column="56">()<pos:position pos:line="22" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="60"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="23" pos:column="9">delete<pos:position pos:line="23" pos:column="15"/></operator> <name pos:line="23" pos:column="16">asState<pos:position pos:line="23" pos:column="23"/></name></expr>;<pos:position pos:line="23" pos:column="24"/></expr_stmt>
        <return pos:line="24" pos:column="9">return;<pos:position pos:line="24" pos:column="16"/></return>
    }<pos:position pos:line="25" pos:column="6"/></block></then> <elseif pos:line="25" pos:column="7">else <if pos:line="25" pos:column="12">if <condition pos:line="25" pos:column="15">(<expr><name><name pos:line="25" pos:column="16">result<pos:position pos:line="25" pos:column="22"/></name><operator pos:line="25" pos:column="22">.<pos:position pos:line="25" pos:column="23"/></operator><name pos:line="25" pos:column="23">flags<pos:position pos:line="25" pos:column="28"/></name><operator pos:line="25" pos:column="28">.<pos:position pos:line="25" pos:column="29"/></operator><name pos:line="25" pos:column="29">error<pos:position pos:line="25" pos:column="34"/></name></name></expr>)<pos:position pos:line="25" pos:column="35"/></condition><then pos:line="25" pos:column="35"> <block pos:line="25" pos:column="36">{
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">debugs<pos:position pos:line="26" pos:column="15"/></name><argument_list pos:line="26" pos:column="15">(<argument><expr><literal type="number" pos:line="26" pos:column="16">53<pos:position pos:line="26" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="20">DBG_IMPORTANT<pos:position pos:line="26" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="35">"asHandleReply: Called with Error set and size="<pos:position pos:line="26" pos:column="83"/></literal> <operator pos:line="26" pos:column="84">&lt;&lt;<pos:position pos:line="26" pos:column="92"/></operator> <operator pos:line="26" pos:column="87">(<pos:position pos:line="26" pos:column="88"/></operator><name pos:line="26" pos:column="88">unsigned<pos:position pos:line="26" pos:column="96"/></name> <name pos:line="26" pos:column="97">int<pos:position pos:line="26" pos:column="100"/></name><operator pos:line="26" pos:column="100">)<pos:position pos:line="26" pos:column="101"/></operator> <name><name pos:line="26" pos:column="102">result<pos:position pos:line="26" pos:column="108"/></name><operator pos:line="26" pos:column="108">.<pos:position pos:line="26" pos:column="109"/></operator><name pos:line="26" pos:column="109">length<pos:position pos:line="26" pos:column="115"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="116"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="117"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="27" pos:column="9">delete<pos:position pos:line="27" pos:column="15"/></operator> <name pos:line="27" pos:column="16">asState<pos:position pos:line="27" pos:column="23"/></name></expr>;<pos:position pos:line="27" pos:column="24"/></expr_stmt>
        <return pos:line="28" pos:column="9">return;<pos:position pos:line="28" pos:column="16"/></return>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if></elseif> <elseif pos:line="29" pos:column="7">else <if pos:line="29" pos:column="12">if <condition pos:line="29" pos:column="15">(<expr><call><name><name pos:line="29" pos:column="16">e<pos:position pos:line="29" pos:column="17"/></name><operator pos:line="29" pos:column="17">-&gt;<pos:position pos:line="29" pos:column="22"/></operator><name pos:line="29" pos:column="19">getReply<pos:position pos:line="29" pos:column="27"/></name></name><argument_list pos:line="29" pos:column="27">()<pos:position pos:line="29" pos:column="29"/></argument_list></call><operator pos:line="29" pos:column="29">-&gt;<pos:position pos:line="29" pos:column="34"/></operator><call><name><name pos:line="29" pos:column="31">sline<pos:position pos:line="29" pos:column="36"/></name><operator pos:line="29" pos:column="36">.<pos:position pos:line="29" pos:column="37"/></operator><name pos:line="29" pos:column="37">status<pos:position pos:line="29" pos:column="43"/></name></name><argument_list pos:line="29" pos:column="43">()<pos:position pos:line="29" pos:column="45"/></argument_list></call> <operator pos:line="29" pos:column="46">!=<pos:position pos:line="29" pos:column="48"/></operator> <name><name pos:line="29" pos:column="49">Http<pos:position pos:line="29" pos:column="53"/></name><operator pos:line="29" pos:column="53">::<pos:position pos:line="29" pos:column="55"/></operator><name pos:line="29" pos:column="55">scOkay<pos:position pos:line="29" pos:column="61"/></name></name></expr>)<pos:position pos:line="29" pos:column="62"/></condition><then pos:line="29" pos:column="62"> <block pos:line="29" pos:column="63">{
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">debugs<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><literal type="number" pos:line="30" pos:column="16">53<pos:position pos:line="30" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="20">DBG_IMPORTANT<pos:position pos:line="30" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="35">"WARNING: AS "<pos:position pos:line="30" pos:column="49"/></literal> <operator pos:line="30" pos:column="50">&lt;&lt;<pos:position pos:line="30" pos:column="58"/></operator> <name><name pos:line="30" pos:column="53">asState<pos:position pos:line="30" pos:column="60"/></name><operator pos:line="30" pos:column="60">-&gt;<pos:position pos:line="30" pos:column="65"/></operator><name pos:line="30" pos:column="62">as_number<pos:position pos:line="30" pos:column="71"/></name></name> <operator pos:line="30" pos:column="72">&lt;&lt;<pos:position pos:line="30" pos:column="80"/></operator> <literal type="string" pos:line="30" pos:column="75">" whois request failed"<pos:position pos:line="30" pos:column="98"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="99"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="100"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="31" pos:column="9">delete<pos:position pos:line="31" pos:column="15"/></operator> <name pos:line="31" pos:column="16">asState<pos:position pos:line="31" pos:column="23"/></name></expr>;<pos:position pos:line="31" pos:column="24"/></expr_stmt>
        <return pos:line="32" pos:column="9">return;<pos:position pos:line="32" pos:column="16"/></return>
    }<pos:position pos:line="33" pos:column="6"/></block></then></if></elseif></if>

    <comment type="block" pos:line="35" pos:column="5">/*
     * Next, attempt to parse our request
     * Remembering that the actual buffer size is retsize + reqofs!
     */</comment>
    <expr_stmt><expr><name pos:line="39" pos:column="5">s<pos:position pos:line="39" pos:column="6"/></name> <operator pos:line="39" pos:column="7">=<pos:position pos:line="39" pos:column="8"/></operator> <name pos:line="39" pos:column="9">buf<pos:position pos:line="39" pos:column="12"/></name></expr>;<pos:position pos:line="39" pos:column="13"/></expr_stmt>

    <while pos:line="41" pos:column="5">while <condition pos:line="41" pos:column="11">(<expr><call pos:line="41" pos:column="12">(<name pos:line="41" pos:column="13">size_t<pos:position pos:line="41" pos:column="19"/></name>)<argument_list pos:line="41" pos:column="20">(<argument><expr><name pos:line="41" pos:column="21">s<pos:position pos:line="41" pos:column="22"/></name> <operator pos:line="41" pos:column="23">-<pos:position pos:line="41" pos:column="24"/></operator> <name pos:line="41" pos:column="25">buf<pos:position pos:line="41" pos:column="28"/></name></expr></argument>)<pos:position pos:line="41" pos:column="29"/></argument_list></call> <operator pos:line="41" pos:column="30">&lt;<pos:position pos:line="41" pos:column="34"/></operator> <name><name pos:line="41" pos:column="32">result<pos:position pos:line="41" pos:column="38"/></name><operator pos:line="41" pos:column="38">.<pos:position pos:line="41" pos:column="39"/></operator><name pos:line="41" pos:column="39">length<pos:position pos:line="41" pos:column="45"/></name></name> <operator pos:line="41" pos:column="46">+<pos:position pos:line="41" pos:column="47"/></operator> <name><name pos:line="41" pos:column="48">asState<pos:position pos:line="41" pos:column="55"/></name><operator pos:line="41" pos:column="55">-&gt;<pos:position pos:line="41" pos:column="60"/></operator><name pos:line="41" pos:column="57">reqofs<pos:position pos:line="41" pos:column="63"/></name></name> <operator pos:line="41" pos:column="64">&amp;&amp;<pos:position pos:line="41" pos:column="74"/></operator> <operator pos:line="41" pos:column="67">*<pos:position pos:line="41" pos:column="68"/></operator><name pos:line="41" pos:column="68">s<pos:position pos:line="41" pos:column="69"/></name> <operator pos:line="41" pos:column="70">!=<pos:position pos:line="41" pos:column="72"/></operator> <literal type="char" pos:line="41" pos:column="73">'\0'<pos:position pos:line="41" pos:column="77"/></literal></expr>)<pos:position pos:line="41" pos:column="78"/></condition> <block pos:line="41" pos:column="79">{
        <while pos:line="42" pos:column="9">while <condition pos:line="42" pos:column="15">(<expr><operator pos:line="42" pos:column="16">*<pos:position pos:line="42" pos:column="17"/></operator><name pos:line="42" pos:column="17">s<pos:position pos:line="42" pos:column="18"/></name> <operator pos:line="42" pos:column="19">&amp;&amp;<pos:position pos:line="42" pos:column="29"/></operator> <call><name pos:line="42" pos:column="22">xisspace<pos:position pos:line="42" pos:column="30"/></name><argument_list pos:line="42" pos:column="30">(<argument><expr><operator pos:line="42" pos:column="31">*<pos:position pos:line="42" pos:column="32"/></operator><name pos:line="42" pos:column="32">s<pos:position pos:line="42" pos:column="33"/></name></expr></argument>)<pos:position pos:line="42" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="35"/></condition>
            <block type="pseudo"><expr_stmt><expr><operator pos:line="43" pos:column="13">++<pos:position pos:line="43" pos:column="15"/></operator><name pos:line="43" pos:column="15">s<pos:position pos:line="43" pos:column="16"/></name></expr>;<pos:position pos:line="43" pos:column="17"/></expr_stmt></block></while>

        <for pos:line="45" pos:column="9">for <control pos:line="45" pos:column="13">(<init><expr><name pos:line="45" pos:column="14">t<pos:position pos:line="45" pos:column="15"/></name> <operator pos:line="45" pos:column="16">=<pos:position pos:line="45" pos:column="17"/></operator> <name pos:line="45" pos:column="18">s<pos:position pos:line="45" pos:column="19"/></name></expr>;<pos:position pos:line="45" pos:column="20"/></init> <condition><expr><operator pos:line="45" pos:column="21">*<pos:position pos:line="45" pos:column="22"/></operator><name pos:line="45" pos:column="22">t<pos:position pos:line="45" pos:column="23"/></name></expr>;<pos:position pos:line="45" pos:column="24"/></condition> <incr><expr><operator pos:line="45" pos:column="25">++<pos:position pos:line="45" pos:column="27"/></operator><name pos:line="45" pos:column="27">t<pos:position pos:line="45" pos:column="28"/></name></expr></incr>)<pos:position pos:line="45" pos:column="29"/></control> <block pos:line="45" pos:column="30">{
            <if pos:line="46" pos:column="13">if <condition pos:line="46" pos:column="16">(<expr><call><name pos:line="46" pos:column="17">xisspace<pos:position pos:line="46" pos:column="25"/></name><argument_list pos:line="46" pos:column="25">(<argument><expr><operator pos:line="46" pos:column="26">*<pos:position pos:line="46" pos:column="27"/></operator><name pos:line="46" pos:column="27">t<pos:position pos:line="46" pos:column="28"/></name></expr></argument>)<pos:position pos:line="46" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="30"/></condition><then pos:line="46" pos:column="30">
                <block type="pseudo"><break pos:line="47" pos:column="17">break;<pos:position pos:line="47" pos:column="23"/></break></block></then></if>
        }<pos:position pos:line="48" pos:column="10"/></block></for>

        <if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><operator pos:line="50" pos:column="13">*<pos:position pos:line="50" pos:column="14"/></operator><name pos:line="50" pos:column="14">t<pos:position pos:line="50" pos:column="15"/></name> <operator pos:line="50" pos:column="16">==<pos:position pos:line="50" pos:column="18"/></operator> <literal type="char" pos:line="50" pos:column="19">'\0'<pos:position pos:line="50" pos:column="23"/></literal></expr>)<pos:position pos:line="50" pos:column="24"/></condition><then pos:line="50" pos:column="24"> <block pos:line="50" pos:column="25">{
            <comment type="block" pos:line="51" pos:column="13">/* oof, word should continue on next block */</comment>
            <break pos:line="52" pos:column="13">break;<pos:position pos:line="52" pos:column="19"/></break>
        }<pos:position pos:line="53" pos:column="10"/></block></then></if>

        <expr_stmt><expr><operator pos:line="55" pos:column="9">*<pos:position pos:line="55" pos:column="10"/></operator><name pos:line="55" pos:column="10">t<pos:position pos:line="55" pos:column="11"/></name> <operator pos:line="55" pos:column="12">=<pos:position pos:line="55" pos:column="13"/></operator> <literal type="char" pos:line="55" pos:column="14">'\0'<pos:position pos:line="55" pos:column="18"/></literal></expr>;<pos:position pos:line="55" pos:column="19"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="56" pos:column="9">debugs<pos:position pos:line="56" pos:column="15"/></name><argument_list pos:line="56" pos:column="15">(<argument><expr><literal type="number" pos:line="56" pos:column="16">53<pos:position pos:line="56" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="56" pos:column="20">3<pos:position pos:line="56" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="23">"asHandleReply: AS# "<pos:position pos:line="56" pos:column="44"/></literal> <operator pos:line="56" pos:column="45">&lt;&lt;<pos:position pos:line="56" pos:column="53"/></operator> <name pos:line="56" pos:column="48">s<pos:position pos:line="56" pos:column="49"/></name> <operator pos:line="56" pos:column="50">&lt;&lt;<pos:position pos:line="56" pos:column="58"/></operator> <literal type="string" pos:line="56" pos:column="53">" ("<pos:position pos:line="56" pos:column="57"/></literal> <operator pos:line="56" pos:column="58">&lt;&lt;<pos:position pos:line="56" pos:column="66"/></operator> <name><name pos:line="56" pos:column="61">asState<pos:position pos:line="56" pos:column="68"/></name><operator pos:line="56" pos:column="68">-&gt;<pos:position pos:line="56" pos:column="73"/></operator><name pos:line="56" pos:column="70">as_number<pos:position pos:line="56" pos:column="79"/></name></name> <operator pos:line="56" pos:column="80">&lt;&lt;<pos:position pos:line="56" pos:column="88"/></operator> <literal type="string" pos:line="56" pos:column="83">")"<pos:position pos:line="56" pos:column="86"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="88"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="57" pos:column="9">asnAddNet<pos:position pos:line="57" pos:column="18"/></name><argument_list pos:line="57" pos:column="18">(<argument><expr><name pos:line="57" pos:column="19">s<pos:position pos:line="57" pos:column="20"/></name></expr></argument>, <argument><expr><name><name pos:line="57" pos:column="22">asState<pos:position pos:line="57" pos:column="29"/></name><operator pos:line="57" pos:column="29">-&gt;<pos:position pos:line="57" pos:column="34"/></operator><name pos:line="57" pos:column="31">as_number<pos:position pos:line="57" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><name pos:line="58" pos:column="9">s<pos:position pos:line="58" pos:column="10"/></name> <operator pos:line="58" pos:column="11">=<pos:position pos:line="58" pos:column="12"/></operator> <name pos:line="58" pos:column="13">t<pos:position pos:line="58" pos:column="14"/></name> <operator pos:line="58" pos:column="15">+<pos:position pos:line="58" pos:column="16"/></operator> <literal type="number" pos:line="58" pos:column="17">1<pos:position pos:line="58" pos:column="18"/></literal></expr>;<pos:position pos:line="58" pos:column="19"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="59" pos:column="9">asState<pos:position pos:line="59" pos:column="16"/></name><operator pos:line="59" pos:column="16">-&gt;<pos:position pos:line="59" pos:column="21"/></operator><name pos:line="59" pos:column="18">dataRead<pos:position pos:line="59" pos:column="26"/></name></name> <operator pos:line="59" pos:column="27">=<pos:position pos:line="59" pos:column="28"/></operator> <literal type="boolean" pos:line="59" pos:column="29">true<pos:position pos:line="59" pos:column="33"/></literal></expr>;<pos:position pos:line="59" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="60" pos:column="6"/></block></while>

    <comment type="block" pos:line="62" pos:column="5">/*
     * Next, grab the end of the 'valid data' in the buffer, and figure
     * out how much data is left in our buffer, which we need to keep
     * around for the next request
     */</comment>
    <expr_stmt><expr><name pos:line="67" pos:column="5">leftoversz<pos:position pos:line="67" pos:column="15"/></name> <operator pos:line="67" pos:column="16">=<pos:position pos:line="67" pos:column="17"/></operator> <operator pos:line="67" pos:column="18">(<pos:position pos:line="67" pos:column="19"/></operator><name><name pos:line="67" pos:column="19">asState<pos:position pos:line="67" pos:column="26"/></name><operator pos:line="67" pos:column="26">-&gt;<pos:position pos:line="67" pos:column="31"/></operator><name pos:line="67" pos:column="28">reqofs<pos:position pos:line="67" pos:column="34"/></name></name> <operator pos:line="67" pos:column="35">+<pos:position pos:line="67" pos:column="36"/></operator> <name><name pos:line="67" pos:column="37">result<pos:position pos:line="67" pos:column="43"/></name><operator pos:line="67" pos:column="43">.<pos:position pos:line="67" pos:column="44"/></operator><name pos:line="67" pos:column="44">length<pos:position pos:line="67" pos:column="50"/></name></name><operator pos:line="67" pos:column="50">)<pos:position pos:line="67" pos:column="51"/></operator> <operator pos:line="67" pos:column="52">-<pos:position pos:line="67" pos:column="53"/></operator> <operator pos:line="67" pos:column="54">(<pos:position pos:line="67" pos:column="55"/></operator><name pos:line="67" pos:column="55">s<pos:position pos:line="67" pos:column="56"/></name> <operator pos:line="67" pos:column="57">-<pos:position pos:line="67" pos:column="58"/></operator> <name pos:line="67" pos:column="59">buf<pos:position pos:line="67" pos:column="62"/></name><operator pos:line="67" pos:column="62">)<pos:position pos:line="67" pos:column="63"/></operator></expr>;<pos:position pos:line="67" pos:column="64"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="69" pos:column="5">assert<pos:position pos:line="69" pos:column="11"/></name><argument_list pos:line="69" pos:column="11">(<argument><expr><name pos:line="69" pos:column="12">leftoversz<pos:position pos:line="69" pos:column="22"/></name> <operator pos:line="69" pos:column="23">&gt;=<pos:position pos:line="69" pos:column="28"/></operator> <literal type="number" pos:line="69" pos:column="26">0<pos:position pos:line="69" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="29"/></expr_stmt>

    <comment type="block" pos:line="71" pos:column="5">/*
     * Next, copy the left over data, from s to s + leftoversz to the
     * beginning of the buffer
     */</comment>
    <expr_stmt><expr><call><name pos:line="75" pos:column="5">memmove<pos:position pos:line="75" pos:column="12"/></name><argument_list pos:line="75" pos:column="12">(<argument><expr><name pos:line="75" pos:column="13">buf<pos:position pos:line="75" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="18">s<pos:position pos:line="75" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="21">leftoversz<pos:position pos:line="75" pos:column="31"/></name></expr></argument>)<pos:position pos:line="75" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="33"/></expr_stmt>

    <comment type="block" pos:line="77" pos:column="5">/*
     * Next, update our offset and reqofs, and kick off a copy if required
     */</comment>
    <expr_stmt><expr><name><name pos:line="80" pos:column="5">asState<pos:position pos:line="80" pos:column="12"/></name><operator pos:line="80" pos:column="12">-&gt;<pos:position pos:line="80" pos:column="17"/></operator><name pos:line="80" pos:column="14">offset<pos:position pos:line="80" pos:column="20"/></name></name> <operator pos:line="80" pos:column="21">+=<pos:position pos:line="80" pos:column="23"/></operator> <name><name pos:line="80" pos:column="24">result<pos:position pos:line="80" pos:column="30"/></name><operator pos:line="80" pos:column="30">.<pos:position pos:line="80" pos:column="31"/></operator><name pos:line="80" pos:column="31">length<pos:position pos:line="80" pos:column="37"/></name></name></expr>;<pos:position pos:line="80" pos:column="38"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="82" pos:column="5">asState<pos:position pos:line="82" pos:column="12"/></name><operator pos:line="82" pos:column="12">-&gt;<pos:position pos:line="82" pos:column="17"/></operator><name pos:line="82" pos:column="14">reqofs<pos:position pos:line="82" pos:column="20"/></name></name> <operator pos:line="82" pos:column="21">=<pos:position pos:line="82" pos:column="22"/></operator> <name pos:line="82" pos:column="23">leftoversz<pos:position pos:line="82" pos:column="33"/></name></expr>;<pos:position pos:line="82" pos:column="34"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="84" pos:column="5">debugs<pos:position pos:line="84" pos:column="11"/></name><argument_list pos:line="84" pos:column="11">(<argument><expr><literal type="number" pos:line="84" pos:column="12">53<pos:position pos:line="84" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="84" pos:column="16">3<pos:position pos:line="84" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="84" pos:column="19">"asState-&gt;offset = "<pos:position pos:line="84" pos:column="42"/></literal> <operator pos:line="84" pos:column="40">&lt;&lt;<pos:position pos:line="84" pos:column="48"/></operator> <name><name pos:line="84" pos:column="43">asState<pos:position pos:line="84" pos:column="50"/></name><operator pos:line="84" pos:column="50">-&gt;<pos:position pos:line="84" pos:column="55"/></operator><name pos:line="84" pos:column="52">offset<pos:position pos:line="84" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="84" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="60"/></expr_stmt>

    <if pos:line="86" pos:column="5">if <condition pos:line="86" pos:column="8">(<expr><name><name pos:line="86" pos:column="9">e<pos:position pos:line="86" pos:column="10"/></name><operator pos:line="86" pos:column="10">-&gt;<pos:position pos:line="86" pos:column="15"/></operator><name pos:line="86" pos:column="12">store_status<pos:position pos:line="86" pos:column="24"/></name></name> <operator pos:line="86" pos:column="25">==<pos:position pos:line="86" pos:column="27"/></operator> <name pos:line="86" pos:column="28">STORE_PENDING<pos:position pos:line="86" pos:column="41"/></name></expr>)<pos:position pos:line="86" pos:column="42"/></condition><then pos:line="86" pos:column="42"> <block pos:line="86" pos:column="43">{
        <expr_stmt><expr><call><name pos:line="87" pos:column="9">debugs<pos:position pos:line="87" pos:column="15"/></name><argument_list pos:line="87" pos:column="15">(<argument><expr><literal type="number" pos:line="87" pos:column="16">53<pos:position pos:line="87" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="87" pos:column="20">3<pos:position pos:line="87" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="87" pos:column="23">"asHandleReply: store_status == STORE_PENDING: "<pos:position pos:line="87" pos:column="71"/></literal> <operator pos:line="87" pos:column="72">&lt;&lt;<pos:position pos:line="87" pos:column="80"/></operator> <call><name><name pos:line="87" pos:column="75">e<pos:position pos:line="87" pos:column="76"/></name><operator pos:line="87" pos:column="76">-&gt;<pos:position pos:line="87" pos:column="81"/></operator><name pos:line="87" pos:column="78">url<pos:position pos:line="87" pos:column="81"/></name></name><argument_list pos:line="87" pos:column="81">()<pos:position pos:line="87" pos:column="83"/></argument_list></call></expr></argument>  )<pos:position pos:line="87" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="87"/></expr_stmt>
        <decl_stmt><decl><type><name pos:line="88" pos:column="9">StoreIOBuffer<pos:position pos:line="88" pos:column="22"/></name></type> <name pos:line="88" pos:column="23">tempBuffer<pos:position pos:line="88" pos:column="33"/></name> <argument_list pos:line="88" pos:column="34">(<argument><expr><name pos:line="88" pos:column="35">AS_REQBUF_SZ<pos:position pos:line="88" pos:column="47"/></name> <operator pos:line="88" pos:column="48">-<pos:position pos:line="88" pos:column="49"/></operator> <name><name pos:line="88" pos:column="50">asState<pos:position pos:line="88" pos:column="57"/></name><operator pos:line="88" pos:column="57">-&gt;<pos:position pos:line="88" pos:column="62"/></operator><name pos:line="88" pos:column="59">reqofs<pos:position pos:line="88" pos:column="65"/></name></name></expr></argument>,
                                  <argument><expr><name><name pos:line="89" pos:column="35">asState<pos:position pos:line="89" pos:column="42"/></name><operator pos:line="89" pos:column="42">-&gt;<pos:position pos:line="89" pos:column="47"/></operator><name pos:line="89" pos:column="44">offset<pos:position pos:line="89" pos:column="50"/></name></name></expr></argument>,
                                  <argument><expr><name><name pos:line="90" pos:column="35">asState<pos:position pos:line="90" pos:column="42"/></name><operator pos:line="90" pos:column="42">-&gt;<pos:position pos:line="90" pos:column="47"/></operator><name pos:line="90" pos:column="44">reqbuf<pos:position pos:line="90" pos:column="50"/></name></name> <operator pos:line="90" pos:column="51">+<pos:position pos:line="90" pos:column="52"/></operator> <name><name pos:line="90" pos:column="53">asState<pos:position pos:line="90" pos:column="60"/></name><operator pos:line="90" pos:column="60">-&gt;<pos:position pos:line="90" pos:column="65"/></operator><name pos:line="90" pos:column="62">reqofs<pos:position pos:line="90" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="90" pos:column="69"/></argument_list></decl>;<pos:position pos:line="90" pos:column="70"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="91" pos:column="9">storeClientCopy<pos:position pos:line="91" pos:column="24"/></name><argument_list pos:line="91" pos:column="24">(<argument><expr><name><name pos:line="91" pos:column="25">asState<pos:position pos:line="91" pos:column="32"/></name><operator pos:line="91" pos:column="32">-&gt;<pos:position pos:line="91" pos:column="37"/></operator><name pos:line="91" pos:column="34">sc<pos:position pos:line="91" pos:column="36"/></name></name></expr></argument>,
                        <argument><expr><name pos:line="92" pos:column="25">e<pos:position pos:line="92" pos:column="26"/></name></expr></argument>,
                        <argument><expr><name pos:line="93" pos:column="25">tempBuffer<pos:position pos:line="93" pos:column="35"/></name></expr></argument>,
                        <argument><expr><name pos:line="94" pos:column="25">asHandleReply<pos:position pos:line="94" pos:column="38"/></name></expr></argument>,
                        <argument><expr><name pos:line="95" pos:column="25">asState<pos:position pos:line="95" pos:column="32"/></name></expr></argument>)<pos:position pos:line="95" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="96" pos:column="6"/></block></then> <else pos:line="96" pos:column="7">else <block pos:line="96" pos:column="12">{
        <decl_stmt><decl><type><name pos:line="97" pos:column="9">StoreIOBuffer<pos:position pos:line="97" pos:column="22"/></name></type> <name pos:line="97" pos:column="23">tempBuffer<pos:position pos:line="97" pos:column="33"/></name></decl>;<pos:position pos:line="97" pos:column="34"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="98" pos:column="9">debugs<pos:position pos:line="98" pos:column="15"/></name><argument_list pos:line="98" pos:column="15">(<argument><expr><literal type="number" pos:line="98" pos:column="16">53<pos:position pos:line="98" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="98" pos:column="20">3<pos:position pos:line="98" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="98" pos:column="23">"asHandleReply: store complete, but data received "<pos:position pos:line="98" pos:column="74"/></literal> <operator pos:line="98" pos:column="75">&lt;&lt;<pos:position pos:line="98" pos:column="83"/></operator> <call><name><name pos:line="98" pos:column="78">e<pos:position pos:line="98" pos:column="79"/></name><operator pos:line="98" pos:column="79">-&gt;<pos:position pos:line="98" pos:column="84"/></operator><name pos:line="98" pos:column="81">url<pos:position pos:line="98" pos:column="84"/></name></name><argument_list pos:line="98" pos:column="84">()<pos:position pos:line="98" pos:column="86"/></argument_list></call></expr></argument>  )<pos:position pos:line="98" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="90"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="99" pos:column="9">tempBuffer<pos:position pos:line="99" pos:column="19"/></name><operator pos:line="99" pos:column="19">.<pos:position pos:line="99" pos:column="20"/></operator><name pos:line="99" pos:column="20">offset<pos:position pos:line="99" pos:column="26"/></name></name> <operator pos:line="99" pos:column="27">=<pos:position pos:line="99" pos:column="28"/></operator> <name><name pos:line="99" pos:column="29">asState<pos:position pos:line="99" pos:column="36"/></name><operator pos:line="99" pos:column="36">-&gt;<pos:position pos:line="99" pos:column="41"/></operator><name pos:line="99" pos:column="38">offset<pos:position pos:line="99" pos:column="44"/></name></name></expr>;<pos:position pos:line="99" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="100" pos:column="9">tempBuffer<pos:position pos:line="100" pos:column="19"/></name><operator pos:line="100" pos:column="19">.<pos:position pos:line="100" pos:column="20"/></operator><name pos:line="100" pos:column="20">length<pos:position pos:line="100" pos:column="26"/></name></name> <operator pos:line="100" pos:column="27">=<pos:position pos:line="100" pos:column="28"/></operator> <name pos:line="100" pos:column="29">AS_REQBUF_SZ<pos:position pos:line="100" pos:column="41"/></name> <operator pos:line="100" pos:column="42">-<pos:position pos:line="100" pos:column="43"/></operator> <name><name pos:line="100" pos:column="44">asState<pos:position pos:line="100" pos:column="51"/></name><operator pos:line="100" pos:column="51">-&gt;<pos:position pos:line="100" pos:column="56"/></operator><name pos:line="100" pos:column="53">reqofs<pos:position pos:line="100" pos:column="59"/></name></name></expr>;<pos:position pos:line="100" pos:column="60"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="101" pos:column="9">tempBuffer<pos:position pos:line="101" pos:column="19"/></name><operator pos:line="101" pos:column="19">.<pos:position pos:line="101" pos:column="20"/></operator><name pos:line="101" pos:column="20">data<pos:position pos:line="101" pos:column="24"/></name></name> <operator pos:line="101" pos:column="25">=<pos:position pos:line="101" pos:column="26"/></operator> <name><name pos:line="101" pos:column="27">asState<pos:position pos:line="101" pos:column="34"/></name><operator pos:line="101" pos:column="34">-&gt;<pos:position pos:line="101" pos:column="39"/></operator><name pos:line="101" pos:column="36">reqbuf<pos:position pos:line="101" pos:column="42"/></name></name> <operator pos:line="101" pos:column="43">+<pos:position pos:line="101" pos:column="44"/></operator> <name><name pos:line="101" pos:column="45">asState<pos:position pos:line="101" pos:column="52"/></name><operator pos:line="101" pos:column="52">-&gt;<pos:position pos:line="101" pos:column="57"/></operator><name pos:line="101" pos:column="54">reqofs<pos:position pos:line="101" pos:column="60"/></name></name></expr>;<pos:position pos:line="101" pos:column="61"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="102" pos:column="9">storeClientCopy<pos:position pos:line="102" pos:column="24"/></name><argument_list pos:line="102" pos:column="24">(<argument><expr><name><name pos:line="102" pos:column="25">asState<pos:position pos:line="102" pos:column="32"/></name><operator pos:line="102" pos:column="32">-&gt;<pos:position pos:line="102" pos:column="37"/></operator><name pos:line="102" pos:column="34">sc<pos:position pos:line="102" pos:column="36"/></name></name></expr></argument>,
                        <argument><expr><name pos:line="103" pos:column="25">e<pos:position pos:line="103" pos:column="26"/></name></expr></argument>,
                        <argument><expr><name pos:line="104" pos:column="25">tempBuffer<pos:position pos:line="104" pos:column="35"/></name></expr></argument>,
                        <argument><expr><name pos:line="105" pos:column="25">asHandleReply<pos:position pos:line="105" pos:column="38"/></name></expr></argument>,
                        <argument><expr><name pos:line="106" pos:column="25">asState<pos:position pos:line="106" pos:column="32"/></name></expr></argument>)<pos:position pos:line="106" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="107" pos:column="6"/></block></else></if>
}<pos:position pos:line="108" pos:column="2"/></block></function></unit>
