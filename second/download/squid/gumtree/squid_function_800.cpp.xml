<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_function_800.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">aclParseAclList<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name pos:line="2" pos:column="17">ConfigParser<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">&amp;<pos:position pos:line="2" pos:column="35"/></modifier></type></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="33">Acl<pos:position pos:line="2" pos:column="36"/></name><operator pos:line="2" pos:column="36">::<pos:position pos:line="2" pos:column="38"/></operator><name pos:line="2" pos:column="38">Tree<pos:position pos:line="2" pos:column="42"/></name></name> <modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier><modifier pos:line="2" pos:column="44">*<pos:position pos:line="2" pos:column="45"/></modifier></type><name pos:line="2" pos:column="45">treep<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="52">const<pos:position pos:line="2" pos:column="57"/></specifier> <name pos:line="2" pos:column="58">char<pos:position pos:line="2" pos:column="62"/></name> <modifier pos:line="2" pos:column="63">*<pos:position pos:line="2" pos:column="64"/></modifier></type><name pos:line="2" pos:column="64">label<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="70"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// accomodate callers unable to convert their ACL list context to string</comment>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><operator pos:line="5" pos:column="9">!<pos:position pos:line="5" pos:column="10"/></operator><name pos:line="5" pos:column="10">label<pos:position pos:line="5" pos:column="15"/></name></expr>)<pos:position pos:line="5" pos:column="16"/></condition><then pos:line="5" pos:column="16">
        <block type="pseudo"><expr_stmt><expr><name pos:line="6" pos:column="9">label<pos:position pos:line="6" pos:column="14"/></name> <operator pos:line="6" pos:column="15">=<pos:position pos:line="6" pos:column="16"/></operator> <literal type="string" pos:line="6" pos:column="17">"..."<pos:position pos:line="6" pos:column="22"/></literal></expr>;<pos:position pos:line="6" pos:column="23"/></expr_stmt></block></then></if>

    <decl_stmt><decl><type><name pos:line="8" pos:column="5">MemBuf<pos:position pos:line="8" pos:column="11"/></name></type> <name pos:line="8" pos:column="12">ctxLine<pos:position pos:line="8" pos:column="19"/></name></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="9" pos:column="5">ctxLine<pos:position pos:line="9" pos:column="12"/></name><operator pos:line="9" pos:column="12">.<pos:position pos:line="9" pos:column="13"/></operator><name pos:line="9" pos:column="13">init<pos:position pos:line="9" pos:column="17"/></name></name><argument_list pos:line="9" pos:column="17">()<pos:position pos:line="9" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="10" pos:column="5">ctxLine<pos:position pos:line="10" pos:column="12"/></name><operator pos:line="10" pos:column="12">.<pos:position pos:line="10" pos:column="13"/></operator><name pos:line="10" pos:column="13">Printf<pos:position pos:line="10" pos:column="19"/></name></name><argument_list pos:line="10" pos:column="19">(<argument><expr><literal type="string" pos:line="10" pos:column="20">"(%s %s line)"<pos:position pos:line="10" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="36">cfg_directive<pos:position pos:line="10" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="51">label<pos:position pos:line="10" pos:column="56"/></name></expr></argument>)<pos:position pos:line="10" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="11" pos:column="5">ctxLine<pos:position pos:line="11" pos:column="12"/></name><operator pos:line="11" pos:column="12">.<pos:position pos:line="11" pos:column="13"/></operator><name pos:line="11" pos:column="13">terminate<pos:position pos:line="11" pos:column="22"/></name></name><argument_list pos:line="11" pos:column="22">()<pos:position pos:line="11" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="25"/></expr_stmt>

    <decl_stmt><decl><type><name><name pos:line="13" pos:column="5">Acl<pos:position pos:line="13" pos:column="8"/></name><operator pos:line="13" pos:column="8">::<pos:position pos:line="13" pos:column="10"/></operator><name pos:line="13" pos:column="10">AndNode<pos:position pos:line="13" pos:column="17"/></name></name> <modifier pos:line="13" pos:column="18">*<pos:position pos:line="13" pos:column="19"/></modifier></type><name pos:line="13" pos:column="19">rule<pos:position pos:line="13" pos:column="23"/></name> <init pos:line="13" pos:column="24">= <expr><operator pos:line="13" pos:column="26">new<pos:position pos:line="13" pos:column="29"/></operator> <name><name pos:line="13" pos:column="30">Acl<pos:position pos:line="13" pos:column="33"/></name><operator pos:line="13" pos:column="33">::<pos:position pos:line="13" pos:column="35"/></operator><name pos:line="13" pos:column="35">AndNode<pos:position pos:line="13" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="13" pos:column="43"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="14" pos:column="5">rule<pos:position pos:line="14" pos:column="9"/></name><operator pos:line="14" pos:column="9">-&gt;<pos:position pos:line="14" pos:column="14"/></operator><name pos:line="14" pos:column="11">context<pos:position pos:line="14" pos:column="18"/></name></name><argument_list pos:line="14" pos:column="18">(<argument><expr><call><name><name pos:line="14" pos:column="19">ctxLine<pos:position pos:line="14" pos:column="26"/></name><operator pos:line="14" pos:column="26">.<pos:position pos:line="14" pos:column="27"/></operator><name pos:line="14" pos:column="27">content<pos:position pos:line="14" pos:column="34"/></name></name><argument_list pos:line="14" pos:column="34">()<pos:position pos:line="14" pos:column="36"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="14" pos:column="38">config_input_line<pos:position pos:line="14" pos:column="55"/></name></expr></argument>)<pos:position pos:line="14" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="15" pos:column="5">rule<pos:position pos:line="15" pos:column="9"/></name><operator pos:line="15" pos:column="9">-&gt;<pos:position pos:line="15" pos:column="14"/></operator><name pos:line="15" pos:column="11">lineParse<pos:position pos:line="15" pos:column="20"/></name></name><argument_list pos:line="15" pos:column="20">()<pos:position pos:line="15" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="23"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="17" pos:column="5">MemBuf<pos:position pos:line="17" pos:column="11"/></name></type> <name pos:line="17" pos:column="12">ctxTree<pos:position pos:line="17" pos:column="19"/></name></decl>;<pos:position pos:line="17" pos:column="20"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="18" pos:column="5">ctxTree<pos:position pos:line="18" pos:column="12"/></name><operator pos:line="18" pos:column="12">.<pos:position pos:line="18" pos:column="13"/></operator><name pos:line="18" pos:column="13">init<pos:position pos:line="18" pos:column="17"/></name></name><argument_list pos:line="18" pos:column="17">()<pos:position pos:line="18" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="19" pos:column="5">ctxTree<pos:position pos:line="19" pos:column="12"/></name><operator pos:line="19" pos:column="12">.<pos:position pos:line="19" pos:column="13"/></operator><name pos:line="19" pos:column="13">Printf<pos:position pos:line="19" pos:column="19"/></name></name><argument_list pos:line="19" pos:column="19">(<argument><expr><literal type="string" pos:line="19" pos:column="20">"%s %s"<pos:position pos:line="19" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="29">cfg_directive<pos:position pos:line="19" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="44">label<pos:position pos:line="19" pos:column="49"/></name></expr></argument>)<pos:position pos:line="19" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="20" pos:column="5">ctxTree<pos:position pos:line="20" pos:column="12"/></name><operator pos:line="20" pos:column="12">.<pos:position pos:line="20" pos:column="13"/></operator><name pos:line="20" pos:column="13">terminate<pos:position pos:line="20" pos:column="22"/></name></name><argument_list pos:line="20" pos:column="22">()<pos:position pos:line="20" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="25"/></expr_stmt>

    <comment type="line" pos:line="22" pos:column="5">// We want a cbdata-protected Tree (despite giving it only one child node).</comment>
    <decl_stmt><decl><type><name><name pos:line="23" pos:column="5">Acl<pos:position pos:line="23" pos:column="8"/></name><operator pos:line="23" pos:column="8">::<pos:position pos:line="23" pos:column="10"/></operator><name pos:line="23" pos:column="10">Tree<pos:position pos:line="23" pos:column="14"/></name></name> <modifier pos:line="23" pos:column="15">*<pos:position pos:line="23" pos:column="16"/></modifier></type><name pos:line="23" pos:column="16">tree<pos:position pos:line="23" pos:column="20"/></name> <init pos:line="23" pos:column="21">= <expr><operator pos:line="23" pos:column="23">new<pos:position pos:line="23" pos:column="26"/></operator> <name><name pos:line="23" pos:column="27">Acl<pos:position pos:line="23" pos:column="30"/></name><operator pos:line="23" pos:column="30">::<pos:position pos:line="23" pos:column="32"/></operator><name pos:line="23" pos:column="32">Tree<pos:position pos:line="23" pos:column="36"/></name></name></expr></init></decl>;<pos:position pos:line="23" pos:column="37"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="24" pos:column="5">tree<pos:position pos:line="24" pos:column="9"/></name><operator pos:line="24" pos:column="9">-&gt;<pos:position pos:line="24" pos:column="14"/></operator><name pos:line="24" pos:column="11">add<pos:position pos:line="24" pos:column="14"/></name></name><argument_list pos:line="24" pos:column="14">(<argument><expr><name pos:line="24" pos:column="15">rule<pos:position pos:line="24" pos:column="19"/></name></expr></argument>)<pos:position pos:line="24" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="25" pos:column="5">tree<pos:position pos:line="25" pos:column="9"/></name><operator pos:line="25" pos:column="9">-&gt;<pos:position pos:line="25" pos:column="14"/></operator><name pos:line="25" pos:column="11">context<pos:position pos:line="25" pos:column="18"/></name></name><argument_list pos:line="25" pos:column="18">(<argument><expr><call><name><name pos:line="25" pos:column="19">ctxTree<pos:position pos:line="25" pos:column="26"/></name><operator pos:line="25" pos:column="26">.<pos:position pos:line="25" pos:column="27"/></operator><name pos:line="25" pos:column="27">content<pos:position pos:line="25" pos:column="34"/></name></name><argument_list pos:line="25" pos:column="34">()<pos:position pos:line="25" pos:column="36"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="25" pos:column="38">config_input_line<pos:position pos:line="25" pos:column="55"/></name></expr></argument>)<pos:position pos:line="25" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="57"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="27" pos:column="5">assert<pos:position pos:line="27" pos:column="11"/></name><argument_list pos:line="27" pos:column="11">(<argument><expr><name pos:line="27" pos:column="12">treep<pos:position pos:line="27" pos:column="17"/></name></expr></argument>)<pos:position pos:line="27" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">assert<pos:position pos:line="28" pos:column="11"/></name><argument_list pos:line="28" pos:column="11">(<argument><expr><operator pos:line="28" pos:column="12">!<pos:position pos:line="28" pos:column="13"/></operator><operator pos:line="28" pos:column="13">*<pos:position pos:line="28" pos:column="14"/></operator><name pos:line="28" pos:column="14">treep<pos:position pos:line="28" pos:column="19"/></name></expr></argument>)<pos:position pos:line="28" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="29" pos:column="5">*<pos:position pos:line="29" pos:column="6"/></operator><name pos:line="29" pos:column="6">treep<pos:position pos:line="29" pos:column="11"/></name> <operator pos:line="29" pos:column="12">=<pos:position pos:line="29" pos:column="13"/></operator> <name pos:line="29" pos:column="14">tree<pos:position pos:line="29" pos:column="18"/></name></expr>;<pos:position pos:line="29" pos:column="19"/></expr_stmt>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
