<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6236_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">main<pos:position pos:line="2" pos:column="5"/></name><parameter_list pos:line="2" pos:column="5">(<parameter><decl><type><name pos:line="2" pos:column="6">int<pos:position pos:line="2" pos:column="9"/></name></type> <name pos:line="2" pos:column="10">argc<pos:position pos:line="2" pos:column="14"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="16">char<pos:position pos:line="2" pos:column="20"/></name> <modifier pos:line="2" pos:column="21">*<pos:position pos:line="2" pos:column="22"/></modifier></type><name><name pos:line="2" pos:column="22">argv<pos:position pos:line="2" pos:column="26"/></name><index pos:line="2" pos:column="26">[]<pos:position pos:line="2" pos:column="28"/></index></name></decl></parameter>)<pos:position pos:line="2" pos:column="29"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">t<pos:position pos:line="4" pos:column="10"/></name></decl>;<pos:position pos:line="4" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">FILE<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">fp<pos:position pos:line="5" pos:column="13"/></name></decl>;<pos:position pos:line="5" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name></type> <name><name pos:line="6" pos:column="10">buf<pos:position pos:line="6" pos:column="13"/></name><index pos:line="6" pos:column="13">[<expr><name pos:line="6" pos:column="14">LOGFILE_BUF_LEN<pos:position pos:line="6" pos:column="29"/></name></expr>]<pos:position pos:line="6" pos:column="30"/></index></name></decl>;<pos:position pos:line="6" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">rotate_count<pos:position pos:line="7" pos:column="21"/></name> <init pos:line="7" pos:column="22">= <expr><literal type="number" pos:line="7" pos:column="24">10<pos:position pos:line="7" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">do_buffer<pos:position pos:line="8" pos:column="18"/></name> <init pos:line="8" pos:column="19">= <expr><literal type="number" pos:line="8" pos:column="21">1<pos:position pos:line="8" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="23"/></decl_stmt>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">argc<pos:position pos:line="10" pos:column="13"/></name> <operator pos:line="10" pos:column="14">&lt;<pos:position pos:line="10" pos:column="18"/></operator> <literal type="number" pos:line="10" pos:column="16">2<pos:position pos:line="10" pos:column="17"/></literal></expr>)<pos:position pos:line="10" pos:column="18"/></condition><then pos:line="10" pos:column="18"> <block pos:line="10" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">printf<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><literal type="string" pos:line="11" pos:column="16">"Error: usage: %s &lt;logfile&gt;\n"<pos:position pos:line="11" pos:column="52"/></literal></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="48">argv<pos:position pos:line="11" pos:column="52"/></name><index pos:line="11" pos:column="52">[<expr><literal type="number" pos:line="11" pos:column="53">0<pos:position pos:line="11" pos:column="54"/></literal></expr>]<pos:position pos:line="11" pos:column="55"/></index></name></expr></argument>)<pos:position pos:line="11" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="57"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">exit<pos:position pos:line="12" pos:column="13"/></name><argument_list pos:line="12" pos:column="13">(<argument><expr><literal type="number" pos:line="12" pos:column="14">1<pos:position pos:line="12" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="14" pos:column="5">fp<pos:position pos:line="14" pos:column="7"/></name> <operator pos:line="14" pos:column="8">=<pos:position pos:line="14" pos:column="9"/></operator> <call><name pos:line="14" pos:column="10">fopen<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><name><name pos:line="14" pos:column="16">argv<pos:position pos:line="14" pos:column="20"/></name><index pos:line="14" pos:column="20">[<expr><literal type="number" pos:line="14" pos:column="21">1<pos:position pos:line="14" pos:column="22"/></literal></expr>]<pos:position pos:line="14" pos:column="23"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="25">"a"<pos:position pos:line="14" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="30"/></expr_stmt>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">fp<pos:position pos:line="15" pos:column="11"/></name> <operator pos:line="15" pos:column="12">==<pos:position pos:line="15" pos:column="14"/></operator> <name pos:line="15" pos:column="15">NULL<pos:position pos:line="15" pos:column="19"/></name></expr>)<pos:position pos:line="15" pos:column="20"/></condition><then pos:line="15" pos:column="20"> <block pos:line="15" pos:column="21">{
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">perror<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><literal type="string" pos:line="16" pos:column="16">"fopen"<pos:position pos:line="16" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">exit<pos:position pos:line="17" pos:column="13"/></name><argument_list pos:line="17" pos:column="13">(<argument><expr><literal type="number" pos:line="17" pos:column="14">1<pos:position pos:line="17" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">setbuf<pos:position pos:line="19" pos:column="11"/></name><argument_list pos:line="19" pos:column="11">(<argument><expr><name pos:line="19" pos:column="12">stdout<pos:position pos:line="19" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="20">NULL<pos:position pos:line="19" pos:column="24"/></name></expr></argument>)<pos:position pos:line="19" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="26"/></expr_stmt>
    <comment type="block" pos:line="20" pos:column="5">/* XXX stderr should not be closed, but in order to support squid must be
     * able to collect and manage modules's stderr first.
     */</comment>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">close<pos:position pos:line="23" pos:column="10"/></name><argument_list pos:line="23" pos:column="10">(<argument><expr><literal type="number" pos:line="23" pos:column="11">2<pos:position pos:line="23" pos:column="12"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="14"/></expr_stmt>
    <expr_stmt><expr><name pos:line="24" pos:column="5">t<pos:position pos:line="24" pos:column="6"/></name> <operator pos:line="24" pos:column="7">=<pos:position pos:line="24" pos:column="8"/></operator> <call><name pos:line="24" pos:column="9">open<pos:position pos:line="24" pos:column="13"/></name><argument_list pos:line="24" pos:column="13">(<argument><expr><name pos:line="24" pos:column="14">_PATH_DEVNULL<pos:position pos:line="24" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="29">O_RDWR<pos:position pos:line="24" pos:column="35"/></name></expr></argument>)<pos:position pos:line="24" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">assert<pos:position pos:line="25" pos:column="11"/></name><argument_list pos:line="25" pos:column="11">(<argument><expr><name pos:line="25" pos:column="12">t<pos:position pos:line="25" pos:column="13"/></name> <operator pos:line="25" pos:column="14">&gt;<pos:position pos:line="25" pos:column="18"/></operator> <operator pos:line="25" pos:column="16">-<pos:position pos:line="25" pos:column="17"/></operator><literal type="number" pos:line="25" pos:column="17">1<pos:position pos:line="25" pos:column="18"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">dup2<pos:position pos:line="26" pos:column="9"/></name><argument_list pos:line="26" pos:column="9">(<argument><expr><name pos:line="26" pos:column="10">t<pos:position pos:line="26" pos:column="11"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="13">2<pos:position pos:line="26" pos:column="14"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="16"/></expr_stmt>

    <while pos:line="28" pos:column="5">while <condition pos:line="28" pos:column="11">(<expr><call><name pos:line="28" pos:column="12">fgets<pos:position pos:line="28" pos:column="17"/></name><argument_list pos:line="28" pos:column="17">(<argument><expr><name pos:line="28" pos:column="18">buf<pos:position pos:line="28" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="23">LOGFILE_BUF_LEN<pos:position pos:line="28" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="40">stdin<pos:position pos:line="28" pos:column="45"/></name></expr></argument>)<pos:position pos:line="28" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="47"/></condition> <block pos:line="28" pos:column="48">{
        <comment type="block" pos:line="29" pos:column="9">/* First byte indicates what we're logging! */</comment>
        <switch pos:line="30" pos:column="9">switch <condition pos:line="30" pos:column="16">(<expr><name><name pos:line="30" pos:column="17">buf<pos:position pos:line="30" pos:column="20"/></name><index pos:line="30" pos:column="20">[<expr><literal type="number" pos:line="30" pos:column="21">0<pos:position pos:line="30" pos:column="22"/></literal></expr>]<pos:position pos:line="30" pos:column="23"/></index></name></expr>)<pos:position pos:line="30" pos:column="24"/></condition> <block pos:line="30" pos:column="25">{
        <case pos:line="31" pos:column="9">case <expr><literal type="char" pos:line="31" pos:column="14">'L'<pos:position pos:line="31" pos:column="17"/></literal></expr>:<pos:position pos:line="31" pos:column="18"/></case>
            <if pos:line="32" pos:column="13">if <condition pos:line="32" pos:column="16">(<expr><name><name pos:line="32" pos:column="17">buf<pos:position pos:line="32" pos:column="20"/></name><index pos:line="32" pos:column="20">[<expr><literal type="number" pos:line="32" pos:column="21">1<pos:position pos:line="32" pos:column="22"/></literal></expr>]<pos:position pos:line="32" pos:column="23"/></index></name> <operator pos:line="32" pos:column="24">!=<pos:position pos:line="32" pos:column="26"/></operator> <literal type="char" pos:line="32" pos:column="27">'\0'<pos:position pos:line="32" pos:column="31"/></literal></expr>)<pos:position pos:line="32" pos:column="32"/></condition><then pos:line="32" pos:column="32"> <block pos:line="32" pos:column="33">{
                <expr_stmt><expr><call><name pos:line="33" pos:column="17">fprintf<pos:position pos:line="33" pos:column="24"/></name><argument_list pos:line="33" pos:column="24">(<argument><expr><name pos:line="33" pos:column="25">fp<pos:position pos:line="33" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="29">"%s"<pos:position pos:line="33" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="35">buf<pos:position pos:line="33" pos:column="38"/></name> <operator pos:line="33" pos:column="39">+<pos:position pos:line="33" pos:column="40"/></operator> <literal type="number" pos:line="33" pos:column="41">1<pos:position pos:line="33" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="44"/></expr_stmt>
                <comment type="block" pos:line="34" pos:column="17">/* try to detect the 32-bit file too big write error and rotate */</comment>
                <decl_stmt><decl><type><name pos:line="35" pos:column="17">int<pos:position pos:line="35" pos:column="20"/></name></type> <name pos:line="35" pos:column="21">err<pos:position pos:line="35" pos:column="24"/></name> <init pos:line="35" pos:column="25">= <expr><call><name pos:line="35" pos:column="27">ferror<pos:position pos:line="35" pos:column="33"/></name><argument_list pos:line="35" pos:column="33">(<argument><expr><name pos:line="35" pos:column="34">fp<pos:position pos:line="35" pos:column="36"/></name></expr></argument>)<pos:position pos:line="35" pos:column="37"/></argument_list></call></expr></init></decl>;<pos:position pos:line="35" pos:column="38"/></decl_stmt>
                <expr_stmt><expr><call><name pos:line="36" pos:column="17">clearerr<pos:position pos:line="36" pos:column="25"/></name><argument_list pos:line="36" pos:column="25">(<argument><expr><name pos:line="36" pos:column="26">fp<pos:position pos:line="36" pos:column="28"/></name></expr></argument>)<pos:position pos:line="36" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="30"/></expr_stmt>
                <if pos:line="37" pos:column="17">if <condition pos:line="37" pos:column="20">(<expr><name pos:line="37" pos:column="21">err<pos:position pos:line="37" pos:column="24"/></name> <operator pos:line="37" pos:column="25">!=<pos:position pos:line="37" pos:column="27"/></operator> <literal type="number" pos:line="37" pos:column="28">0<pos:position pos:line="37" pos:column="29"/></literal></expr>)<pos:position pos:line="37" pos:column="30"/></condition><then pos:line="37" pos:column="30"> <block pos:line="37" pos:column="31">{
                    <comment type="block" pos:line="38" pos:column="21">/* file too big - recover by rotating the logs and starting a new one.
                     * out of device space - recover by rotating and hoping that rotation count drops a big one.
                     */</comment>
                    <if pos:line="41" pos:column="21">if <condition pos:line="41" pos:column="24">(<expr><name pos:line="41" pos:column="25">err<pos:position pos:line="41" pos:column="28"/></name> <operator pos:line="41" pos:column="29">==<pos:position pos:line="41" pos:column="31"/></operator> <name pos:line="41" pos:column="32">EFBIG<pos:position pos:line="41" pos:column="37"/></name> <operator pos:line="41" pos:column="38">||<pos:position pos:line="41" pos:column="40"/></operator> <name pos:line="41" pos:column="41">err<pos:position pos:line="41" pos:column="44"/></name> <operator pos:line="41" pos:column="45">==<pos:position pos:line="41" pos:column="47"/></operator> <name pos:line="41" pos:column="48">ENOSPC<pos:position pos:line="41" pos:column="54"/></name></expr>)<pos:position pos:line="41" pos:column="55"/></condition><then pos:line="41" pos:column="55"> <block pos:line="41" pos:column="56">{
                        <expr_stmt><expr><call><name pos:line="42" pos:column="25">fprintf<pos:position pos:line="42" pos:column="32"/></name><argument_list pos:line="42" pos:column="32">(<argument><expr><name pos:line="42" pos:column="33">stderr<pos:position pos:line="42" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="41">"WARNING: %s writing %s. Attempting to recover via a log rotation.\n"<pos:position pos:line="42" pos:column="110"/></literal></expr></argument>,<argument><expr><call><name pos:line="42" pos:column="111">xstrerr<pos:position pos:line="42" pos:column="118"/></name><argument_list pos:line="42" pos:column="118">(<argument><expr><name pos:line="42" pos:column="119">err<pos:position pos:line="42" pos:column="122"/></name></expr></argument>)<pos:position pos:line="42" pos:column="123"/></argument_list></call></expr></argument>,<argument><expr><name><name pos:line="42" pos:column="124">argv<pos:position pos:line="42" pos:column="128"/></name><index pos:line="42" pos:column="128">[<expr><literal type="number" pos:line="42" pos:column="129">1<pos:position pos:line="42" pos:column="130"/></literal></expr>]<pos:position pos:line="42" pos:column="131"/></index></name></expr></argument>)<pos:position pos:line="42" pos:column="132"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="133"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="43" pos:column="25">fclose<pos:position pos:line="43" pos:column="31"/></name><argument_list pos:line="43" pos:column="31">(<argument><expr><name pos:line="43" pos:column="32">fp<pos:position pos:line="43" pos:column="34"/></name></expr></argument>)<pos:position pos:line="43" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="36"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="44" pos:column="25">rotate<pos:position pos:line="44" pos:column="31"/></name><argument_list pos:line="44" pos:column="31">(<argument><expr><name><name pos:line="44" pos:column="32">argv<pos:position pos:line="44" pos:column="36"/></name><index pos:line="44" pos:column="36">[<expr><literal type="number" pos:line="44" pos:column="37">1<pos:position pos:line="44" pos:column="38"/></literal></expr>]<pos:position pos:line="44" pos:column="39"/></index></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="41">rotate_count<pos:position pos:line="44" pos:column="53"/></name></expr></argument>)<pos:position pos:line="44" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="55"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="45" pos:column="25">fp<pos:position pos:line="45" pos:column="27"/></name> <operator pos:line="45" pos:column="28">=<pos:position pos:line="45" pos:column="29"/></operator> <call><name pos:line="45" pos:column="30">fopen<pos:position pos:line="45" pos:column="35"/></name><argument_list pos:line="45" pos:column="35">(<argument><expr><name><name pos:line="45" pos:column="36">argv<pos:position pos:line="45" pos:column="40"/></name><index pos:line="45" pos:column="40">[<expr><literal type="number" pos:line="45" pos:column="41">1<pos:position pos:line="45" pos:column="42"/></literal></expr>]<pos:position pos:line="45" pos:column="43"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="45">"a"<pos:position pos:line="45" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="50"/></expr_stmt>
                        <if pos:line="46" pos:column="25">if <condition pos:line="46" pos:column="28">(<expr><name pos:line="46" pos:column="29">fp<pos:position pos:line="46" pos:column="31"/></name> <operator pos:line="46" pos:column="32">==<pos:position pos:line="46" pos:column="34"/></operator> <name pos:line="46" pos:column="35">NULL<pos:position pos:line="46" pos:column="39"/></name></expr>)<pos:position pos:line="46" pos:column="40"/></condition><then pos:line="46" pos:column="40"> <block pos:line="46" pos:column="41">{
                            <expr_stmt><expr><call><name pos:line="47" pos:column="29">perror<pos:position pos:line="47" pos:column="35"/></name><argument_list pos:line="47" pos:column="35">(<argument><expr><literal type="string" pos:line="47" pos:column="36">"fopen"<pos:position pos:line="47" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="45"/></expr_stmt>
                            <expr_stmt><expr><call><name pos:line="48" pos:column="29">exit<pos:position pos:line="48" pos:column="33"/></name><argument_list pos:line="48" pos:column="33">(<argument><expr><literal type="number" pos:line="48" pos:column="34">1<pos:position pos:line="48" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="37"/></expr_stmt>
                        }<pos:position pos:line="49" pos:column="26"/></block></then></if>
                        <expr_stmt><expr><call><name pos:line="50" pos:column="25">fprintf<pos:position pos:line="50" pos:column="32"/></name><argument_list pos:line="50" pos:column="32">(<argument><expr><name pos:line="50" pos:column="33">fp<pos:position pos:line="50" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="37">"%s"<pos:position pos:line="50" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="50" pos:column="43">buf<pos:position pos:line="50" pos:column="46"/></name> <operator pos:line="50" pos:column="47">+<pos:position pos:line="50" pos:column="48"/></operator> <literal type="number" pos:line="50" pos:column="49">1<pos:position pos:line="50" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="52"/></expr_stmt>
                    }<pos:position pos:line="51" pos:column="22"/></block></then> <else pos:line="51" pos:column="23">else <block pos:line="51" pos:column="28">{
                        <expr_stmt><expr><call><name pos:line="52" pos:column="25">perror<pos:position pos:line="52" pos:column="31"/></name><argument_list pos:line="52" pos:column="31">(<argument><expr><literal type="string" pos:line="52" pos:column="32">"fprintf"<pos:position pos:line="52" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="43"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="53" pos:column="25">exit<pos:position pos:line="53" pos:column="29"/></name><argument_list pos:line="53" pos:column="29">(<argument><expr><literal type="number" pos:line="53" pos:column="30">1<pos:position pos:line="53" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="33"/></expr_stmt>
                    }<pos:position pos:line="54" pos:column="22"/></block></else></if>
                }<pos:position pos:line="55" pos:column="18"/></block></then></if>
            }<pos:position pos:line="56" pos:column="14"/></block></then></if>
            <if pos:line="57" pos:column="13">if <condition pos:line="57" pos:column="16">(<expr><operator pos:line="57" pos:column="17">!<pos:position pos:line="57" pos:column="18"/></operator><name pos:line="57" pos:column="18">do_buffer<pos:position pos:line="57" pos:column="27"/></name></expr>)<pos:position pos:line="57" pos:column="28"/></condition><then pos:line="57" pos:column="28">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="58" pos:column="17">fflush<pos:position pos:line="58" pos:column="23"/></name><argument_list pos:line="58" pos:column="23">(<argument><expr><name pos:line="58" pos:column="24">fp<pos:position pos:line="58" pos:column="26"/></name></expr></argument>)<pos:position pos:line="58" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="28"/></expr_stmt></block></then></if>
            <break pos:line="59" pos:column="13">break;<pos:position pos:line="59" pos:column="19"/></break>
        <case pos:line="60" pos:column="9">case <expr><literal type="char" pos:line="60" pos:column="14">'R'<pos:position pos:line="60" pos:column="17"/></literal></expr>:<pos:position pos:line="60" pos:column="18"/></case>
            <expr_stmt><expr><call><name pos:line="61" pos:column="13">fclose<pos:position pos:line="61" pos:column="19"/></name><argument_list pos:line="61" pos:column="19">(<argument><expr><name pos:line="61" pos:column="20">fp<pos:position pos:line="61" pos:column="22"/></name></expr></argument>)<pos:position pos:line="61" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="24"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="62" pos:column="13">rotate<pos:position pos:line="62" pos:column="19"/></name><argument_list pos:line="62" pos:column="19">(<argument><expr><name><name pos:line="62" pos:column="20">argv<pos:position pos:line="62" pos:column="24"/></name><index pos:line="62" pos:column="24">[<expr><literal type="number" pos:line="62" pos:column="25">1<pos:position pos:line="62" pos:column="26"/></literal></expr>]<pos:position pos:line="62" pos:column="27"/></index></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="29">rotate_count<pos:position pos:line="62" pos:column="41"/></name></expr></argument>)<pos:position pos:line="62" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="43"/></expr_stmt>
            <expr_stmt><expr><name pos:line="63" pos:column="13">fp<pos:position pos:line="63" pos:column="15"/></name> <operator pos:line="63" pos:column="16">=<pos:position pos:line="63" pos:column="17"/></operator> <call><name pos:line="63" pos:column="18">fopen<pos:position pos:line="63" pos:column="23"/></name><argument_list pos:line="63" pos:column="23">(<argument><expr><name><name pos:line="63" pos:column="24">argv<pos:position pos:line="63" pos:column="28"/></name><index pos:line="63" pos:column="28">[<expr><literal type="number" pos:line="63" pos:column="29">1<pos:position pos:line="63" pos:column="30"/></literal></expr>]<pos:position pos:line="63" pos:column="31"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="33">"a"<pos:position pos:line="63" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="38"/></expr_stmt>
            <if pos:line="64" pos:column="13">if <condition pos:line="64" pos:column="16">(<expr><name pos:line="64" pos:column="17">fp<pos:position pos:line="64" pos:column="19"/></name> <operator pos:line="64" pos:column="20">==<pos:position pos:line="64" pos:column="22"/></operator> <name pos:line="64" pos:column="23">NULL<pos:position pos:line="64" pos:column="27"/></name></expr>)<pos:position pos:line="64" pos:column="28"/></condition><then pos:line="64" pos:column="28"> <block pos:line="64" pos:column="29">{
                <expr_stmt><expr><call><name pos:line="65" pos:column="17">perror<pos:position pos:line="65" pos:column="23"/></name><argument_list pos:line="65" pos:column="23">(<argument><expr><literal type="string" pos:line="65" pos:column="24">"fopen"<pos:position pos:line="65" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="33"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="66" pos:column="17">exit<pos:position pos:line="66" pos:column="21"/></name><argument_list pos:line="66" pos:column="21">(<argument><expr><literal type="number" pos:line="66" pos:column="22">1<pos:position pos:line="66" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="25"/></expr_stmt>
            }<pos:position pos:line="67" pos:column="14"/></block></then></if>
            <break pos:line="68" pos:column="13">break;<pos:position pos:line="68" pos:column="19"/></break>
        <case pos:line="69" pos:column="9">case <expr><literal type="char" pos:line="69" pos:column="14">'T'<pos:position pos:line="69" pos:column="17"/></literal></expr>:<pos:position pos:line="69" pos:column="18"/></case>
            <break pos:line="70" pos:column="13">break;<pos:position pos:line="70" pos:column="19"/></break>
        <case pos:line="71" pos:column="9">case <expr><literal type="char" pos:line="71" pos:column="14">'O'<pos:position pos:line="71" pos:column="17"/></literal></expr>:<pos:position pos:line="71" pos:column="18"/></case>
            <break pos:line="72" pos:column="13">break;<pos:position pos:line="72" pos:column="19"/></break>
        <case pos:line="73" pos:column="9">case <expr><literal type="char" pos:line="73" pos:column="14">'r'<pos:position pos:line="73" pos:column="17"/></literal></expr>:<pos:position pos:line="73" pos:column="18"/></case>
            <comment type="line" pos:line="74" pos:column="13">//fprintf(fp, "SET ROTATE: %s\n", buf + 1);</comment>
            <expr_stmt><expr><name pos:line="75" pos:column="13">rotate_count<pos:position pos:line="75" pos:column="25"/></name> <operator pos:line="75" pos:column="26">=<pos:position pos:line="75" pos:column="27"/></operator> <call><name pos:line="75" pos:column="28">atoi<pos:position pos:line="75" pos:column="32"/></name><argument_list pos:line="75" pos:column="32">(<argument><expr><name pos:line="75" pos:column="33">buf<pos:position pos:line="75" pos:column="36"/></name> <operator pos:line="75" pos:column="37">+<pos:position pos:line="75" pos:column="38"/></operator> <literal type="number" pos:line="75" pos:column="39">1<pos:position pos:line="75" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="42"/></expr_stmt>
            <break pos:line="76" pos:column="13">break;<pos:position pos:line="76" pos:column="19"/></break>
        <case pos:line="77" pos:column="9">case <expr><literal type="char" pos:line="77" pos:column="14">'b'<pos:position pos:line="77" pos:column="17"/></literal></expr>:<pos:position pos:line="77" pos:column="18"/></case>
            <comment type="line" pos:line="78" pos:column="13">//fprintf(fp, "SET BUFFERED: %s\n", buf + 1);</comment>
            <expr_stmt><expr><name pos:line="79" pos:column="13">do_buffer<pos:position pos:line="79" pos:column="22"/></name> <operator pos:line="79" pos:column="23">=<pos:position pos:line="79" pos:column="24"/></operator> <operator pos:line="79" pos:column="25">(<pos:position pos:line="79" pos:column="26"/></operator><name><name pos:line="79" pos:column="26">buf<pos:position pos:line="79" pos:column="29"/></name><index pos:line="79" pos:column="29">[<expr><literal type="number" pos:line="79" pos:column="30">1<pos:position pos:line="79" pos:column="31"/></literal></expr>]<pos:position pos:line="79" pos:column="32"/></index></name> <operator pos:line="79" pos:column="33">==<pos:position pos:line="79" pos:column="35"/></operator> <literal type="char" pos:line="79" pos:column="36">'1'<pos:position pos:line="79" pos:column="39"/></literal><operator pos:line="79" pos:column="39">)<pos:position pos:line="79" pos:column="40"/></operator></expr>;<pos:position pos:line="79" pos:column="41"/></expr_stmt>
            <break pos:line="80" pos:column="13">break;<pos:position pos:line="80" pos:column="19"/></break>
        <case pos:line="81" pos:column="9">case <expr><literal type="char" pos:line="81" pos:column="14">'F'<pos:position pos:line="81" pos:column="17"/></literal></expr>:<pos:position pos:line="81" pos:column="18"/></case>
            <expr_stmt><expr><call><name pos:line="82" pos:column="13">fflush<pos:position pos:line="82" pos:column="19"/></name><argument_list pos:line="82" pos:column="19">(<argument><expr><name pos:line="82" pos:column="20">fp<pos:position pos:line="82" pos:column="22"/></name></expr></argument>)<pos:position pos:line="82" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="24"/></expr_stmt>
            <break pos:line="83" pos:column="13">break;<pos:position pos:line="83" pos:column="19"/></break>
        <default pos:line="84" pos:column="9">default:<pos:position pos:line="84" pos:column="17"/></default>
            <comment type="block" pos:line="85" pos:column="13">/* Just in case .. */</comment>
            <expr_stmt><expr><call><name pos:line="86" pos:column="13">fprintf<pos:position pos:line="86" pos:column="20"/></name><argument_list pos:line="86" pos:column="20">(<argument><expr><name pos:line="86" pos:column="21">fp<pos:position pos:line="86" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="86" pos:column="25">"%s"<pos:position pos:line="86" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="86" pos:column="31">buf<pos:position pos:line="86" pos:column="34"/></name></expr></argument>)<pos:position pos:line="86" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="36"/></expr_stmt>
            <break pos:line="87" pos:column="13">break;<pos:position pos:line="87" pos:column="19"/></break>
        }<pos:position pos:line="88" pos:column="10"/></block></switch>
    }<pos:position pos:line="89" pos:column="6"/></block></while>
    <expr_stmt><expr><call><name pos:line="90" pos:column="5">fclose<pos:position pos:line="90" pos:column="11"/></name><argument_list pos:line="90" pos:column="11">(<argument><expr><name pos:line="90" pos:column="12">fp<pos:position pos:line="90" pos:column="14"/></name></expr></argument>)<pos:position pos:line="90" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><name pos:line="91" pos:column="5">fp<pos:position pos:line="91" pos:column="7"/></name> <operator pos:line="91" pos:column="8">=<pos:position pos:line="91" pos:column="9"/></operator> <name pos:line="91" pos:column="10">NULL<pos:position pos:line="91" pos:column="14"/></name></expr>;<pos:position pos:line="91" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="92" pos:column="5">exit<pos:position pos:line="92" pos:column="9"/></name><argument_list pos:line="92" pos:column="9">(<argument><expr><literal type="number" pos:line="92" pos:column="10">0<pos:position pos:line="92" pos:column="11"/></literal></expr></argument>)<pos:position pos:line="92" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="13"/></expr_stmt>
}<pos:position pos:line="93" pos:column="2"/></block></function></unit>
