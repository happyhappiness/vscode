<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_577_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">u_char<pos:position pos:line="1" pos:column="7"/></name> <modifier pos:line="1" pos:column="8">*<pos:position pos:line="1" pos:column="9"/></modifier></type>
<name pos:line="2" pos:column="1">snmp_msg_Encode<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name pos:line="2" pos:column="17">u_char<pos:position pos:line="2" pos:column="23"/></name> <modifier pos:line="2" pos:column="24">*<pos:position pos:line="2" pos:column="25"/></modifier></type> <name pos:line="2" pos:column="26">Buffer<pos:position pos:line="2" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="34">int<pos:position pos:line="2" pos:column="37"/></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type><name pos:line="2" pos:column="39">BufLenP<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>,
                <parameter><decl><type><name pos:line="3" pos:column="17">u_char<pos:position pos:line="3" pos:column="23"/></name> <modifier pos:line="3" pos:column="24">*<pos:position pos:line="3" pos:column="25"/></modifier></type> <name pos:line="3" pos:column="26">Community<pos:position pos:line="3" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="37">int<pos:position pos:line="3" pos:column="40"/></name></type> <name pos:line="3" pos:column="41">CommLen<pos:position pos:line="3" pos:column="48"/></name></decl></parameter>,
                <parameter><decl><type><name pos:line="4" pos:column="17">int<pos:position pos:line="4" pos:column="20"/></name></type> <name pos:line="4" pos:column="21">Version<pos:position pos:line="4" pos:column="28"/></name></decl></parameter>,
                <parameter><decl><type><name><name pos:line="5" pos:column="17">struct<pos:position pos:line="5" pos:column="23"/></name> <name pos:line="5" pos:column="24">snmp_pdu<pos:position pos:line="5" pos:column="32"/></name></name> <modifier pos:line="5" pos:column="33">*<pos:position pos:line="5" pos:column="34"/></modifier></type><name pos:line="5" pos:column="34">PDU<pos:position pos:line="5" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="38"/></parameter_list>
<block pos:line="6" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">u_char<pos:position pos:line="7" pos:column="11"/></name> <modifier pos:line="7" pos:column="12">*<pos:position pos:line="7" pos:column="13"/></modifier></type><name pos:line="7" pos:column="13">bufp<pos:position pos:line="7" pos:column="17"/></name></decl>, <modifier pos:line="7" pos:column="19">*<pos:position pos:line="7" pos:column="20"/></modifier><decl><type ref="prev"/><name pos:line="7" pos:column="20">tmp<pos:position pos:line="7" pos:column="23"/></name></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">u_char<pos:position pos:line="8" pos:column="11"/></name> <modifier pos:line="8" pos:column="12">*<pos:position pos:line="8" pos:column="13"/></modifier></type><name pos:line="8" pos:column="13">PDUHeaderPtr<pos:position pos:line="8" pos:column="25"/></name></decl>, <modifier pos:line="8" pos:column="27">*<pos:position pos:line="8" pos:column="28"/></modifier><decl><type ref="prev"/><name pos:line="8" pos:column="28">VARHeaderPtr<pos:position pos:line="8" pos:column="40"/></name></decl>;<pos:position pos:line="8" pos:column="41"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">u_char<pos:position pos:line="9" pos:column="11"/></name> <modifier pos:line="9" pos:column="12">*<pos:position pos:line="9" pos:column="13"/></modifier></type><name pos:line="9" pos:column="13">PDUDataStart<pos:position pos:line="9" pos:column="25"/></name></decl>, <modifier pos:line="9" pos:column="27">*<pos:position pos:line="9" pos:column="28"/></modifier><decl><type ref="prev"/><name pos:line="9" pos:column="28">VARDataStart<pos:position pos:line="9" pos:column="40"/></name></decl>;<pos:position pos:line="9" pos:column="41"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">u_char<pos:position pos:line="10" pos:column="11"/></name> <modifier pos:line="10" pos:column="12">*<pos:position pos:line="10" pos:column="13"/></modifier></type><name pos:line="10" pos:column="13">MsgPtr<pos:position pos:line="10" pos:column="19"/></name></decl>;<pos:position pos:line="10" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">int<pos:position pos:line="11" pos:column="8"/></name></type> <name pos:line="11" pos:column="9">FakeArg<pos:position pos:line="11" pos:column="16"/></name> <init pos:line="11" pos:column="17">= <expr><literal type="number" pos:line="11" pos:column="19">1024<pos:position pos:line="11" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="24"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="13" pos:column="5">snmplib_debug<pos:position pos:line="13" pos:column="18"/></name><argument_list pos:line="13" pos:column="18">(<argument><expr><literal type="number" pos:line="13" pos:column="19">4<pos:position pos:line="13" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="22">"Buffer=%p BufLenP=%p, buflen=%d\n"<pos:position pos:line="13" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="59">Buffer<pos:position pos:line="13" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="67">BufLenP<pos:position pos:line="13" pos:column="74"/></name></expr></argument>,
                  <argument><expr><operator pos:line="14" pos:column="19">*<pos:position pos:line="14" pos:column="20"/></operator><name pos:line="14" pos:column="20">BufLenP<pos:position pos:line="14" pos:column="27"/></name></expr></argument>)<pos:position pos:line="14" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="29"/></expr_stmt>
    <comment type="block" pos:line="15" pos:column="5">/* Header for the entire thing, with a false, large length */</comment>
    <expr_stmt><expr><name pos:line="16" pos:column="5">bufp<pos:position pos:line="16" pos:column="9"/></name> <operator pos:line="16" pos:column="10">=<pos:position pos:line="16" pos:column="11"/></operator> <call><name pos:line="16" pos:column="12">asn_build_header<pos:position pos:line="16" pos:column="28"/></name><argument_list pos:line="16" pos:column="28">(<argument><expr><name pos:line="16" pos:column="29">Buffer<pos:position pos:line="16" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="37">BufLenP<pos:position pos:line="16" pos:column="44"/></name></expr></argument>,
                            <argument><expr><call pos:line="17" pos:column="29">(<name pos:line="17" pos:column="30">u_char<pos:position pos:line="17" pos:column="36"/></name>) <argument_list pos:line="17" pos:column="38">(<argument><expr><name pos:line="17" pos:column="39">ASN_SEQUENCE<pos:position pos:line="17" pos:column="51"/></name> <operator pos:line="17" pos:column="52">|<pos:position pos:line="17" pos:column="53"/></operator>
                                      <name pos:line="18" pos:column="39">ASN_CONSTRUCTOR<pos:position pos:line="18" pos:column="54"/></name></expr></argument>)<pos:position pos:line="18" pos:column="55"/></argument_list></call></expr></argument>,
                            <argument><expr><operator pos:line="19" pos:column="29">(<pos:position pos:line="19" pos:column="30"/></operator><operator pos:line="19" pos:column="30">*<pos:position pos:line="19" pos:column="31"/></operator><name pos:line="19" pos:column="31">BufLenP<pos:position pos:line="19" pos:column="38"/></name><operator pos:line="19" pos:column="38">)<pos:position pos:line="19" pos:column="39"/></operator></expr></argument>)<pos:position pos:line="19" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="41"/></expr_stmt>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">bufp<pos:position pos:line="20" pos:column="13"/></name> <operator pos:line="20" pos:column="14">==<pos:position pos:line="20" pos:column="16"/></operator> <name pos:line="20" pos:column="17">NULL<pos:position pos:line="20" pos:column="21"/></name></expr>)<pos:position pos:line="20" pos:column="22"/></condition><then pos:line="20" pos:column="22"> <block pos:line="20" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">snmplib_debug<pos:position pos:line="21" pos:column="22"/></name><argument_list pos:line="21" pos:column="22">(<argument><expr><literal type="number" pos:line="21" pos:column="23">4<pos:position pos:line="21" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="26">"snmp_msg_Encode:Error encoding SNMP Message Header (Header)!\n"<pos:position pos:line="21" pos:column="90"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="92"/></expr_stmt>
        <return pos:line="22" pos:column="9">return <expr><operator pos:line="22" pos:column="16">(<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="17">NULL<pos:position pos:line="22" pos:column="21"/></name><operator pos:line="22" pos:column="21">)<pos:position pos:line="22" pos:column="22"/></operator></expr>;<pos:position pos:line="22" pos:column="23"/></return>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="24" pos:column="5">MsgPtr<pos:position pos:line="24" pos:column="11"/></name> <operator pos:line="24" pos:column="12">=<pos:position pos:line="24" pos:column="13"/></operator> <name pos:line="24" pos:column="14">bufp<pos:position pos:line="24" pos:column="18"/></name></expr>;<pos:position pos:line="24" pos:column="19"/></expr_stmt>

    <comment type="block" pos:line="26" pos:column="5">/* Version */</comment>
    <expr_stmt><expr><name pos:line="27" pos:column="5">bufp<pos:position pos:line="27" pos:column="9"/></name> <operator pos:line="27" pos:column="10">=<pos:position pos:line="27" pos:column="11"/></operator> <call><name pos:line="27" pos:column="12">asn_build_int<pos:position pos:line="27" pos:column="25"/></name><argument_list pos:line="27" pos:column="25">(<argument><expr><name pos:line="27" pos:column="26">bufp<pos:position pos:line="27" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="32">BufLenP<pos:position pos:line="27" pos:column="39"/></name></expr></argument>,
                         <argument><expr><call pos:line="28" pos:column="26">(<name pos:line="28" pos:column="27">u_char<pos:position pos:line="28" pos:column="33"/></name>) <argument_list pos:line="28" pos:column="35">(<argument><expr><name pos:line="28" pos:column="36">ASN_UNIVERSAL<pos:position pos:line="28" pos:column="49"/></name> <operator pos:line="28" pos:column="50">|<pos:position pos:line="28" pos:column="51"/></operator>
                                   <name pos:line="29" pos:column="36">ASN_PRIMITIVE<pos:position pos:line="29" pos:column="49"/></name> <operator pos:line="29" pos:column="50">|<pos:position pos:line="29" pos:column="51"/></operator>
                                   <name pos:line="30" pos:column="36">ASN_INTEGER<pos:position pos:line="30" pos:column="47"/></name></expr></argument>)<pos:position pos:line="30" pos:column="48"/></argument_list></call></expr></argument>,
                         <argument><expr><operator pos:line="31" pos:column="26">(<pos:position pos:line="31" pos:column="27"/></operator><name pos:line="31" pos:column="27">int<pos:position pos:line="31" pos:column="30"/></name> <operator pos:line="31" pos:column="31">*<pos:position pos:line="31" pos:column="32"/></operator><operator pos:line="31" pos:column="32">)<pos:position pos:line="31" pos:column="33"/></operator> <operator pos:line="31" pos:column="34">(<pos:position pos:line="31" pos:column="35"/></operator><operator pos:line="31" pos:column="35">&amp;<pos:position pos:line="31" pos:column="40"/></operator><name pos:line="31" pos:column="36">Version<pos:position pos:line="31" pos:column="43"/></name><operator pos:line="31" pos:column="43">)<pos:position pos:line="31" pos:column="44"/></operator></expr></argument>, <argument><expr><sizeof pos:line="31" pos:column="46">sizeof<argument_list pos:line="31" pos:column="52">(<argument><expr><name pos:line="31" pos:column="53">Version<pos:position pos:line="31" pos:column="60"/></name></expr></argument>)<pos:position pos:line="31" pos:column="61"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="31" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="63"/></expr_stmt>
    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><name pos:line="32" pos:column="9">bufp<pos:position pos:line="32" pos:column="13"/></name> <operator pos:line="32" pos:column="14">==<pos:position pos:line="32" pos:column="16"/></operator> <name pos:line="32" pos:column="17">NULL<pos:position pos:line="32" pos:column="21"/></name></expr>)<pos:position pos:line="32" pos:column="22"/></condition><then pos:line="32" pos:column="22"> <block pos:line="32" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="33" pos:column="9">snmplib_debug<pos:position pos:line="33" pos:column="22"/></name><argument_list pos:line="33" pos:column="22">(<argument><expr><literal type="number" pos:line="33" pos:column="23">4<pos:position pos:line="33" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="26">"snmp_msg_Encode:Error encoding SNMP Message Header (Version)!\n"<pos:position pos:line="33" pos:column="91"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="93"/></expr_stmt>
        <return pos:line="34" pos:column="9">return <expr><operator pos:line="34" pos:column="16">(<pos:position pos:line="34" pos:column="17"/></operator><name pos:line="34" pos:column="17">NULL<pos:position pos:line="34" pos:column="21"/></name><operator pos:line="34" pos:column="21">)<pos:position pos:line="34" pos:column="22"/></operator></expr>;<pos:position pos:line="34" pos:column="23"/></return>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="36" pos:column="5">snmplib_debug<pos:position pos:line="36" pos:column="18"/></name><argument_list pos:line="36" pos:column="18">(<argument><expr><literal type="number" pos:line="36" pos:column="19">8<pos:position pos:line="36" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="22">"snmp_msg_Encode: Encoding community (%s) (%d)\n"<pos:position pos:line="36" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="73">Community<pos:position pos:line="36" pos:column="82"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="84">CommLen<pos:position pos:line="36" pos:column="91"/></name></expr></argument>)<pos:position pos:line="36" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="93"/></expr_stmt>

    <comment type="block" pos:line="38" pos:column="5">/* Community */</comment>
    <expr_stmt><expr><name pos:line="39" pos:column="5">bufp<pos:position pos:line="39" pos:column="9"/></name> <operator pos:line="39" pos:column="10">=<pos:position pos:line="39" pos:column="11"/></operator> <call><name pos:line="39" pos:column="12">asn_build_string<pos:position pos:line="39" pos:column="28"/></name><argument_list pos:line="39" pos:column="28">(<argument><expr><name pos:line="39" pos:column="29">bufp<pos:position pos:line="39" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="35">BufLenP<pos:position pos:line="39" pos:column="42"/></name></expr></argument>,
                            <argument><expr><call pos:line="40" pos:column="29">(<name pos:line="40" pos:column="30">u_char<pos:position pos:line="40" pos:column="36"/></name>) <argument_list pos:line="40" pos:column="38">(<argument><expr><name pos:line="40" pos:column="39">ASN_UNIVERSAL<pos:position pos:line="40" pos:column="52"/></name> <operator pos:line="40" pos:column="53">|<pos:position pos:line="40" pos:column="54"/></operator>
                                      <name pos:line="41" pos:column="39">ASN_PRIMITIVE<pos:position pos:line="41" pos:column="52"/></name> <operator pos:line="41" pos:column="53">|<pos:position pos:line="41" pos:column="54"/></operator>
                                      <name pos:line="42" pos:column="39">ASN_OCTET_STR<pos:position pos:line="42" pos:column="52"/></name></expr></argument>)<pos:position pos:line="42" pos:column="53"/></argument_list></call></expr></argument>,
                            <argument><expr><name pos:line="43" pos:column="29">Community<pos:position pos:line="43" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="40">CommLen<pos:position pos:line="43" pos:column="47"/></name></expr></argument>)<pos:position pos:line="43" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="49"/></expr_stmt>
    <if pos:line="44" pos:column="5">if <condition pos:line="44" pos:column="8">(<expr><name pos:line="44" pos:column="9">bufp<pos:position pos:line="44" pos:column="13"/></name> <operator pos:line="44" pos:column="14">==<pos:position pos:line="44" pos:column="16"/></operator> <name pos:line="44" pos:column="17">NULL<pos:position pos:line="44" pos:column="21"/></name></expr>)<pos:position pos:line="44" pos:column="22"/></condition><then pos:line="44" pos:column="22"> <block pos:line="44" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="45" pos:column="9">snmplib_debug<pos:position pos:line="45" pos:column="22"/></name><argument_list pos:line="45" pos:column="22">(<argument><expr><literal type="number" pos:line="45" pos:column="23">4<pos:position pos:line="45" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="26">"snmp_msg_Encode:Error encoding SNMP Message Header (Community)!\n"<pos:position pos:line="45" pos:column="93"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="95"/></expr_stmt>
        <return pos:line="46" pos:column="9">return <expr><operator pos:line="46" pos:column="16">(<pos:position pos:line="46" pos:column="17"/></operator><name pos:line="46" pos:column="17">NULL<pos:position pos:line="46" pos:column="21"/></name><operator pos:line="46" pos:column="21">)<pos:position pos:line="46" pos:column="22"/></operator></expr>;<pos:position pos:line="46" pos:column="23"/></return>
    }<pos:position pos:line="47" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="48" pos:column="5">/* Encode the rest. */</comment>

    <comment type="block" pos:line="50" pos:column="5">/* A nice header for this PDU.
     * Encoded with the wrong length.  We'll fix it later.
     */</comment>
    <expr_stmt><expr><call><name pos:line="53" pos:column="5">snmplib_debug<pos:position pos:line="53" pos:column="18"/></name><argument_list pos:line="53" pos:column="18">(<argument><expr><literal type="number" pos:line="53" pos:column="19">8<pos:position pos:line="53" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="22">"snmp_msg_Encode:Encoding PDU Header at 0x%p (fake len %d) (%d bytes so far)\n"<pos:position pos:line="53" pos:column="101"/></literal></expr></argument>,
                  <argument><expr><name pos:line="54" pos:column="19">bufp<pos:position pos:line="54" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="54" pos:column="25">*<pos:position pos:line="54" pos:column="26"/></operator><name pos:line="54" pos:column="26">BufLenP<pos:position pos:line="54" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="54" pos:column="35">*<pos:position pos:line="54" pos:column="36"/></operator><name pos:line="54" pos:column="36">BufLenP<pos:position pos:line="54" pos:column="43"/></name></expr></argument>)<pos:position pos:line="54" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><name pos:line="55" pos:column="5">PDUHeaderPtr<pos:position pos:line="55" pos:column="17"/></name> <operator pos:line="55" pos:column="18">=<pos:position pos:line="55" pos:column="19"/></operator> <name pos:line="55" pos:column="20">bufp<pos:position pos:line="55" pos:column="24"/></name></expr>;<pos:position pos:line="55" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name pos:line="56" pos:column="5">bufp<pos:position pos:line="56" pos:column="9"/></name> <operator pos:line="56" pos:column="10">=<pos:position pos:line="56" pos:column="11"/></operator> <call><name pos:line="56" pos:column="12">asn_build_header<pos:position pos:line="56" pos:column="28"/></name><argument_list pos:line="56" pos:column="28">(<argument><expr><name pos:line="56" pos:column="29">bufp<pos:position pos:line="56" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="35">BufLenP<pos:position pos:line="56" pos:column="42"/></name></expr></argument>,
                            <argument><expr><call pos:line="57" pos:column="29">(<name pos:line="57" pos:column="30">u_char<pos:position pos:line="57" pos:column="36"/></name>) <argument_list pos:line="57" pos:column="38">(<argument><expr><name pos:line="57" pos:column="39">ASN_SEQUENCE<pos:position pos:line="57" pos:column="51"/></name> <operator pos:line="57" pos:column="52">|<pos:position pos:line="57" pos:column="53"/></operator> <name pos:line="57" pos:column="54">ASN_CONSTRUCTOR<pos:position pos:line="57" pos:column="69"/></name></expr></argument>)<pos:position pos:line="57" pos:column="70"/></argument_list></call></expr></argument>,
                            <argument><expr><operator pos:line="58" pos:column="29">(<pos:position pos:line="58" pos:column="30"/></operator><operator pos:line="58" pos:column="30">*<pos:position pos:line="58" pos:column="31"/></operator><name pos:line="58" pos:column="31">BufLenP<pos:position pos:line="58" pos:column="38"/></name><operator pos:line="58" pos:column="38">)<pos:position pos:line="58" pos:column="39"/></operator></expr></argument>)<pos:position pos:line="58" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="41"/></expr_stmt>
    <if pos:line="59" pos:column="5">if <condition pos:line="59" pos:column="8">(<expr><name pos:line="59" pos:column="9">bufp<pos:position pos:line="59" pos:column="13"/></name> <operator pos:line="59" pos:column="14">==<pos:position pos:line="59" pos:column="16"/></operator> <name pos:line="59" pos:column="17">NULL<pos:position pos:line="59" pos:column="21"/></name></expr>)<pos:position pos:line="59" pos:column="22"/></condition><then pos:line="59" pos:column="22">
        <block type="pseudo"><return pos:line="60" pos:column="9">return <expr><operator pos:line="60" pos:column="16">(<pos:position pos:line="60" pos:column="17"/></operator><name pos:line="60" pos:column="17">NULL<pos:position pos:line="60" pos:column="21"/></name><operator pos:line="60" pos:column="21">)<pos:position pos:line="60" pos:column="22"/></operator></expr>;<pos:position pos:line="60" pos:column="23"/></return></block></then></if>

    <comment type="block" pos:line="62" pos:column="5">/* Encode this PDU. */</comment>
    <expr_stmt><expr><name pos:line="63" pos:column="5">PDUDataStart<pos:position pos:line="63" pos:column="17"/></name> <operator pos:line="63" pos:column="18">=<pos:position pos:line="63" pos:column="19"/></operator> <name pos:line="63" pos:column="20">bufp<pos:position pos:line="63" pos:column="24"/></name></expr>;<pos:position pos:line="63" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name pos:line="64" pos:column="5">bufp<pos:position pos:line="64" pos:column="9"/></name> <operator pos:line="64" pos:column="10">=<pos:position pos:line="64" pos:column="11"/></operator> <call><name pos:line="64" pos:column="12">snmp_pdu_encode<pos:position pos:line="64" pos:column="27"/></name><argument_list pos:line="64" pos:column="27">(<argument><expr><name pos:line="64" pos:column="28">bufp<pos:position pos:line="64" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="34">BufLenP<pos:position pos:line="64" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="43">PDU<pos:position pos:line="64" pos:column="46"/></name></expr></argument>)<pos:position pos:line="64" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="48"/></expr_stmt>
    <if pos:line="65" pos:column="5">if <condition pos:line="65" pos:column="8">(<expr><name pos:line="65" pos:column="9">bufp<pos:position pos:line="65" pos:column="13"/></name> <operator pos:line="65" pos:column="14">==<pos:position pos:line="65" pos:column="16"/></operator> <name pos:line="65" pos:column="17">NULL<pos:position pos:line="65" pos:column="21"/></name></expr>)<pos:position pos:line="65" pos:column="22"/></condition><then pos:line="65" pos:column="22">
        <block type="pseudo"><return pos:line="66" pos:column="9">return <expr><operator pos:line="66" pos:column="16">(<pos:position pos:line="66" pos:column="17"/></operator><name pos:line="66" pos:column="17">NULL<pos:position pos:line="66" pos:column="21"/></name><operator pos:line="66" pos:column="21">)<pos:position pos:line="66" pos:column="22"/></operator></expr>;<pos:position pos:line="66" pos:column="23"/></return></block></then></if>		<comment type="block" pos:line="66" pos:column="33">/* snmp_pdu_encode registered failure */</comment>

    <expr_stmt><expr><name pos:line="68" pos:column="5">VARHeaderPtr<pos:position pos:line="68" pos:column="17"/></name> <operator pos:line="68" pos:column="18">=<pos:position pos:line="68" pos:column="19"/></operator> <name pos:line="68" pos:column="20">bufp<pos:position pos:line="68" pos:column="24"/></name></expr>;<pos:position pos:line="68" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name pos:line="69" pos:column="5">bufp<pos:position pos:line="69" pos:column="9"/></name> <operator pos:line="69" pos:column="10">=<pos:position pos:line="69" pos:column="11"/></operator> <call><name pos:line="69" pos:column="12">asn_build_header<pos:position pos:line="69" pos:column="28"/></name><argument_list pos:line="69" pos:column="28">(<argument><expr><name pos:line="69" pos:column="29">bufp<pos:position pos:line="69" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="35">BufLenP<pos:position pos:line="69" pos:column="42"/></name></expr></argument>,
                            <argument><expr><call pos:line="70" pos:column="29">(<name pos:line="70" pos:column="30">u_char<pos:position pos:line="70" pos:column="36"/></name>) <argument_list pos:line="70" pos:column="38">(<argument><expr><name pos:line="70" pos:column="39">ASN_SEQUENCE<pos:position pos:line="70" pos:column="51"/></name> <operator pos:line="70" pos:column="52">|<pos:position pos:line="70" pos:column="53"/></operator> <name pos:line="70" pos:column="54">ASN_CONSTRUCTOR<pos:position pos:line="70" pos:column="69"/></name></expr></argument>)<pos:position pos:line="70" pos:column="70"/></argument_list></call></expr></argument>,
                            <argument><expr><name pos:line="71" pos:column="29">FakeArg<pos:position pos:line="71" pos:column="36"/></name></expr></argument>)<pos:position pos:line="71" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="38"/></expr_stmt>
    <if pos:line="72" pos:column="5">if <condition pos:line="72" pos:column="8">(<expr><name pos:line="72" pos:column="9">bufp<pos:position pos:line="72" pos:column="13"/></name> <operator pos:line="72" pos:column="14">==<pos:position pos:line="72" pos:column="16"/></operator> <name pos:line="72" pos:column="17">NULL<pos:position pos:line="72" pos:column="21"/></name></expr>)<pos:position pos:line="72" pos:column="22"/></condition><then pos:line="72" pos:column="22">
        <block type="pseudo"><return pos:line="73" pos:column="9">return <expr><operator pos:line="73" pos:column="16">(<pos:position pos:line="73" pos:column="17"/></operator><name pos:line="73" pos:column="17">NULL<pos:position pos:line="73" pos:column="21"/></name><operator pos:line="73" pos:column="21">)<pos:position pos:line="73" pos:column="22"/></operator></expr>;<pos:position pos:line="73" pos:column="23"/></return></block></then></if>
    <expr_stmt><expr><name pos:line="74" pos:column="5">VARDataStart<pos:position pos:line="74" pos:column="17"/></name> <operator pos:line="74" pos:column="18">=<pos:position pos:line="74" pos:column="19"/></operator> <name pos:line="74" pos:column="20">bufp<pos:position pos:line="74" pos:column="24"/></name></expr>;<pos:position pos:line="74" pos:column="25"/></expr_stmt>

    <comment type="block" pos:line="76" pos:column="5">/* And build the variables */</comment>
    <expr_stmt><expr><name pos:line="77" pos:column="5">bufp<pos:position pos:line="77" pos:column="9"/></name> <operator pos:line="77" pos:column="10">=<pos:position pos:line="77" pos:column="11"/></operator> <call><name pos:line="77" pos:column="12">snmp_var_EncodeVarBind<pos:position pos:line="77" pos:column="34"/></name><argument_list pos:line="77" pos:column="34">(<argument><expr><name pos:line="77" pos:column="35">bufp<pos:position pos:line="77" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="41">BufLenP<pos:position pos:line="77" pos:column="48"/></name></expr></argument>, <argument><expr><name><name pos:line="77" pos:column="50">PDU<pos:position pos:line="77" pos:column="53"/></name><operator pos:line="77" pos:column="53">-&gt;<pos:position pos:line="77" pos:column="58"/></operator><name pos:line="77" pos:column="55">variables<pos:position pos:line="77" pos:column="64"/></name></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="66">Version<pos:position pos:line="77" pos:column="73"/></name></expr></argument>)<pos:position pos:line="77" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="75"/></expr_stmt>
    <if pos:line="78" pos:column="5">if <condition pos:line="78" pos:column="8">(<expr><name pos:line="78" pos:column="9">bufp<pos:position pos:line="78" pos:column="13"/></name> <operator pos:line="78" pos:column="14">==<pos:position pos:line="78" pos:column="16"/></operator> <name pos:line="78" pos:column="17">NULL<pos:position pos:line="78" pos:column="21"/></name></expr>)<pos:position pos:line="78" pos:column="22"/></condition><then pos:line="78" pos:column="22">
        <block type="pseudo"><return pos:line="79" pos:column="9">return <expr><operator pos:line="79" pos:column="16">(<pos:position pos:line="79" pos:column="17"/></operator><name pos:line="79" pos:column="17">NULL<pos:position pos:line="79" pos:column="21"/></name><operator pos:line="79" pos:column="21">)<pos:position pos:line="79" pos:column="22"/></operator></expr>;<pos:position pos:line="79" pos:column="23"/></return></block></then></if>		<comment type="block" pos:line="79" pos:column="33">/* snmp_var_EncodeVarBind registered failure */</comment>

    <comment type="block" pos:line="81" pos:column="5">/* Cool.  Now insert the appropriate lengths.
     */</comment>
<cpp:if pos:line="83" pos:column="1">#<cpp:directive pos:line="83" pos:column="2">if<pos:position pos:line="83" pos:column="4"/></cpp:directive> <expr><name pos:line="83" pos:column="5">DEBUG_MSG_ENCODE<pos:position pos:line="83" pos:column="21"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="84" pos:column="5">snmplib_debug<pos:position pos:line="84" pos:column="18"/></name><argument_list pos:line="84" pos:column="18">(<argument><expr><literal type="number" pos:line="84" pos:column="19">9<pos:position pos:line="84" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="84" pos:column="22">"Msg:  Vars returned 0x%x.  PDU Started at 0x%x\n"<pos:position pos:line="84" pos:column="72"/></literal></expr></argument>,
                  <argument><expr><name pos:line="85" pos:column="19">bufp<pos:position pos:line="85" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="25">PDUHeaderPtr<pos:position pos:line="85" pos:column="37"/></name></expr></argument>)<pos:position pos:line="85" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="86" pos:column="5">snmplib_debug<pos:position pos:line="86" pos:column="18"/></name><argument_list pos:line="86" pos:column="18">(<argument><expr><literal type="number" pos:line="86" pos:column="19">9<pos:position pos:line="86" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="86" pos:column="22">"MSG:  Entire PDU length is %d (0x%x - 0x%x)\n"<pos:position pos:line="86" pos:column="69"/></literal></expr></argument>,
                  <argument><expr><call pos:line="87" pos:column="19">(<name pos:line="87" pos:column="20">int<pos:position pos:line="87" pos:column="23"/></name>) <argument_list pos:line="87" pos:column="25">(<argument><expr><name pos:line="87" pos:column="26">bufp<pos:position pos:line="87" pos:column="30"/></name> <operator pos:line="87" pos:column="31">-<pos:position pos:line="87" pos:column="32"/></operator> <name pos:line="87" pos:column="33">PDUDataStart<pos:position pos:line="87" pos:column="45"/></name></expr></argument>)<pos:position pos:line="87" pos:column="46"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="87" pos:column="48">PDUHeaderPtr<pos:position pos:line="87" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="62">bufp<pos:position pos:line="87" pos:column="66"/></name></expr></argument>)<pos:position pos:line="87" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="68"/></expr_stmt>
<cpp:endif pos:line="88" pos:column="1">#<cpp:directive pos:line="88" pos:column="2">endif<pos:position pos:line="88" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><name pos:line="89" pos:column="5">tmp<pos:position pos:line="89" pos:column="8"/></name> <operator pos:line="89" pos:column="9">=<pos:position pos:line="89" pos:column="10"/></operator> <call><name pos:line="89" pos:column="11">asn_build_header<pos:position pos:line="89" pos:column="27"/></name><argument_list pos:line="89" pos:column="27">(<argument><expr><name pos:line="89" pos:column="28">PDUHeaderPtr<pos:position pos:line="89" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="89" pos:column="42">&amp;<pos:position pos:line="89" pos:column="47"/></operator><name pos:line="89" pos:column="43">FakeArg<pos:position pos:line="89" pos:column="50"/></name></expr></argument>,
                           <argument><expr><operator pos:line="90" pos:column="28">(<pos:position pos:line="90" pos:column="29"/></operator><name pos:line="90" pos:column="29">u_char<pos:position pos:line="90" pos:column="35"/></name><operator pos:line="90" pos:column="35">)<pos:position pos:line="90" pos:column="36"/></operator> <name><name pos:line="90" pos:column="37">PDU<pos:position pos:line="90" pos:column="40"/></name><operator pos:line="90" pos:column="40">-&gt;<pos:position pos:line="90" pos:column="45"/></operator><name pos:line="90" pos:column="42">command<pos:position pos:line="90" pos:column="49"/></name></name></expr></argument>,
                           <argument><expr><call pos:line="91" pos:column="28">(<name pos:line="91" pos:column="29">int<pos:position pos:line="91" pos:column="32"/></name>) <argument_list pos:line="91" pos:column="34">(<argument><expr><name pos:line="91" pos:column="35">bufp<pos:position pos:line="91" pos:column="39"/></name> <operator pos:line="91" pos:column="40">-<pos:position pos:line="91" pos:column="41"/></operator> <name pos:line="91" pos:column="42">PDUDataStart<pos:position pos:line="91" pos:column="54"/></name></expr></argument>)<pos:position pos:line="91" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="91" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="57"/></expr_stmt>
    <comment type="block" pos:line="92" pos:column="5">/* Length of the PDU and Vars */</comment>
    <if pos:line="93" pos:column="5">if <condition pos:line="93" pos:column="8">(<expr><name pos:line="93" pos:column="9">tmp<pos:position pos:line="93" pos:column="12"/></name> <operator pos:line="93" pos:column="13">==<pos:position pos:line="93" pos:column="15"/></operator> <name pos:line="93" pos:column="16">NULL<pos:position pos:line="93" pos:column="20"/></name></expr>)<pos:position pos:line="93" pos:column="21"/></condition><then pos:line="93" pos:column="21">
        <block type="pseudo"><return pos:line="94" pos:column="9">return <expr><operator pos:line="94" pos:column="16">(<pos:position pos:line="94" pos:column="17"/></operator><name pos:line="94" pos:column="17">NULL<pos:position pos:line="94" pos:column="21"/></name><operator pos:line="94" pos:column="21">)<pos:position pos:line="94" pos:column="22"/></operator></expr>;<pos:position pos:line="94" pos:column="23"/></return></block></then></if>

<cpp:if pos:line="96" pos:column="1">#<cpp:directive pos:line="96" pos:column="2">if<pos:position pos:line="96" pos:column="4"/></cpp:directive> <expr><name pos:line="96" pos:column="5">DEBUG_MSG_ENCODE<pos:position pos:line="96" pos:column="21"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="97" pos:column="5">snmplib_debug<pos:position pos:line="97" pos:column="18"/></name><argument_list pos:line="97" pos:column="18">(<argument><expr><literal type="number" pos:line="97" pos:column="19">9<pos:position pos:line="97" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="97" pos:column="22">"MSG:  Entire message length is %d (0x%x - 0x%x)\n"<pos:position pos:line="97" pos:column="73"/></literal></expr></argument>,
                  <argument><expr><call pos:line="98" pos:column="19">(<name pos:line="98" pos:column="20">int<pos:position pos:line="98" pos:column="23"/></name>) <argument_list pos:line="98" pos:column="25">(<argument><expr><name pos:line="98" pos:column="26">bufp<pos:position pos:line="98" pos:column="30"/></name> <operator pos:line="98" pos:column="31">-<pos:position pos:line="98" pos:column="32"/></operator> <name pos:line="98" pos:column="33">MsgPtr<pos:position pos:line="98" pos:column="39"/></name></expr></argument>)<pos:position pos:line="98" pos:column="40"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="98" pos:column="42">MsgPtr<pos:position pos:line="98" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="50">bufp<pos:position pos:line="98" pos:column="54"/></name></expr></argument>)<pos:position pos:line="98" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="56"/></expr_stmt>
<cpp:endif pos:line="99" pos:column="1">#<cpp:directive pos:line="99" pos:column="2">endif<pos:position pos:line="99" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><name pos:line="100" pos:column="5">tmp<pos:position pos:line="100" pos:column="8"/></name> <operator pos:line="100" pos:column="9">=<pos:position pos:line="100" pos:column="10"/></operator> <call><name pos:line="100" pos:column="11">asn_build_header<pos:position pos:line="100" pos:column="27"/></name><argument_list pos:line="100" pos:column="27">(<argument><expr><name pos:line="100" pos:column="28">Buffer<pos:position pos:line="100" pos:column="34"/></name></expr></argument>,
                           <argument><expr><operator pos:line="101" pos:column="28">&amp;<pos:position pos:line="101" pos:column="33"/></operator><name pos:line="101" pos:column="29">FakeArg<pos:position pos:line="101" pos:column="36"/></name></expr></argument>,
                           <argument><expr><call pos:line="102" pos:column="28">(<name pos:line="102" pos:column="29">u_char<pos:position pos:line="102" pos:column="35"/></name>) <argument_list pos:line="102" pos:column="37">(<argument><expr><name pos:line="102" pos:column="38">ASN_SEQUENCE<pos:position pos:line="102" pos:column="50"/></name> <operator pos:line="102" pos:column="51">|<pos:position pos:line="102" pos:column="52"/></operator> <name pos:line="102" pos:column="53">ASN_CONSTRUCTOR<pos:position pos:line="102" pos:column="68"/></name></expr></argument>)<pos:position pos:line="102" pos:column="69"/></argument_list></call></expr></argument>,
                           <argument><expr><operator pos:line="103" pos:column="28">(<pos:position pos:line="103" pos:column="29"/></operator><name pos:line="103" pos:column="29">bufp<pos:position pos:line="103" pos:column="33"/></name> <operator pos:line="103" pos:column="34">-<pos:position pos:line="103" pos:column="35"/></operator> <name pos:line="103" pos:column="36">MsgPtr<pos:position pos:line="103" pos:column="42"/></name><operator pos:line="103" pos:column="42">)<pos:position pos:line="103" pos:column="43"/></operator></expr></argument>)<pos:position pos:line="103" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="45"/></expr_stmt>	<comment type="block" pos:line="103" pos:column="49">/* Length of everything */</comment>
    <if pos:line="104" pos:column="5">if <condition pos:line="104" pos:column="8">(<expr><name pos:line="104" pos:column="9">tmp<pos:position pos:line="104" pos:column="12"/></name> <operator pos:line="104" pos:column="13">==<pos:position pos:line="104" pos:column="15"/></operator> <name pos:line="104" pos:column="16">NULL<pos:position pos:line="104" pos:column="20"/></name></expr>)<pos:position pos:line="104" pos:column="21"/></condition><then pos:line="104" pos:column="21">
        <block type="pseudo"><return pos:line="105" pos:column="9">return <expr><operator pos:line="105" pos:column="16">(<pos:position pos:line="105" pos:column="17"/></operator><name pos:line="105" pos:column="17">NULL<pos:position pos:line="105" pos:column="21"/></name><operator pos:line="105" pos:column="21">)<pos:position pos:line="105" pos:column="22"/></operator></expr>;<pos:position pos:line="105" pos:column="23"/></return></block></then></if>

    <expr_stmt><expr><name pos:line="107" pos:column="5">tmp<pos:position pos:line="107" pos:column="8"/></name> <operator pos:line="107" pos:column="9">=<pos:position pos:line="107" pos:column="10"/></operator> <call><name pos:line="107" pos:column="11">asn_build_header<pos:position pos:line="107" pos:column="27"/></name><argument_list pos:line="107" pos:column="27">(<argument><expr><name pos:line="107" pos:column="28">VARHeaderPtr<pos:position pos:line="107" pos:column="40"/></name></expr></argument>,
                           <argument><expr><operator pos:line="108" pos:column="28">&amp;<pos:position pos:line="108" pos:column="33"/></operator><name pos:line="108" pos:column="29">FakeArg<pos:position pos:line="108" pos:column="36"/></name></expr></argument>,
                           <argument><expr><call pos:line="109" pos:column="28">(<name pos:line="109" pos:column="29">u_char<pos:position pos:line="109" pos:column="35"/></name>) <argument_list pos:line="109" pos:column="37">(<argument><expr><name pos:line="109" pos:column="38">ASN_SEQUENCE<pos:position pos:line="109" pos:column="50"/></name> <operator pos:line="109" pos:column="51">|<pos:position pos:line="109" pos:column="52"/></operator> <name pos:line="109" pos:column="53">ASN_CONSTRUCTOR<pos:position pos:line="109" pos:column="68"/></name></expr></argument>)<pos:position pos:line="109" pos:column="69"/></argument_list></call></expr></argument>,
                           <argument><expr><operator pos:line="110" pos:column="28">(<pos:position pos:line="110" pos:column="29"/></operator><name pos:line="110" pos:column="29">bufp<pos:position pos:line="110" pos:column="33"/></name> <operator pos:line="110" pos:column="34">-<pos:position pos:line="110" pos:column="35"/></operator> <name pos:line="110" pos:column="36">VARDataStart<pos:position pos:line="110" pos:column="48"/></name><operator pos:line="110" pos:column="48">)<pos:position pos:line="110" pos:column="49"/></operator></expr></argument>)<pos:position pos:line="110" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="51"/></expr_stmt>	<comment type="block" pos:line="110" pos:column="57">/* Length of everything */</comment>
    <if pos:line="111" pos:column="5">if <condition pos:line="111" pos:column="8">(<expr><name pos:line="111" pos:column="9">tmp<pos:position pos:line="111" pos:column="12"/></name> <operator pos:line="111" pos:column="13">==<pos:position pos:line="111" pos:column="15"/></operator> <name pos:line="111" pos:column="16">NULL<pos:position pos:line="111" pos:column="20"/></name></expr>)<pos:position pos:line="111" pos:column="21"/></condition><then pos:line="111" pos:column="21">
        <block type="pseudo"><return pos:line="112" pos:column="9">return <expr><operator pos:line="112" pos:column="16">(<pos:position pos:line="112" pos:column="17"/></operator><name pos:line="112" pos:column="17">NULL<pos:position pos:line="112" pos:column="21"/></name><operator pos:line="112" pos:column="21">)<pos:position pos:line="112" pos:column="22"/></operator></expr>;<pos:position pos:line="112" pos:column="23"/></return></block></then></if>

    <expr_stmt><expr><operator pos:line="114" pos:column="5">*<pos:position pos:line="114" pos:column="6"/></operator><name pos:line="114" pos:column="6">BufLenP<pos:position pos:line="114" pos:column="13"/></name> <operator pos:line="114" pos:column="14">=<pos:position pos:line="114" pos:column="15"/></operator> <operator pos:line="114" pos:column="16">(<pos:position pos:line="114" pos:column="17"/></operator><name pos:line="114" pos:column="17">bufp<pos:position pos:line="114" pos:column="21"/></name> <operator pos:line="114" pos:column="22">-<pos:position pos:line="114" pos:column="23"/></operator> <name pos:line="114" pos:column="24">Buffer<pos:position pos:line="114" pos:column="30"/></name><operator pos:line="114" pos:column="30">)<pos:position pos:line="114" pos:column="31"/></operator></expr>;<pos:position pos:line="114" pos:column="32"/></expr_stmt>
    <return pos:line="115" pos:column="5">return <expr><operator pos:line="115" pos:column="12">(<pos:position pos:line="115" pos:column="13"/></operator><name pos:line="115" pos:column="13">u_char<pos:position pos:line="115" pos:column="19"/></name> <operator pos:line="115" pos:column="20">*<pos:position pos:line="115" pos:column="21"/></operator><operator pos:line="115" pos:column="21">)<pos:position pos:line="115" pos:column="22"/></operator> <name pos:line="115" pos:column="23">bufp<pos:position pos:line="115" pos:column="27"/></name></expr>;<pos:position pos:line="115" pos:column="28"/></return>
}<pos:position pos:line="116" pos:column="2"/></block></function></unit>
