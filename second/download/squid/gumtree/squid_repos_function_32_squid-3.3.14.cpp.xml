<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_32_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">main<pos:position pos:line="2" pos:column="5"/></name><parameter_list pos:line="2" pos:column="5">(<parameter><decl><type><name pos:line="2" pos:column="6">int<pos:position pos:line="2" pos:column="9"/></name></type> <name pos:line="2" pos:column="10">argc<pos:position pos:line="2" pos:column="14"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="16">char<pos:position pos:line="2" pos:column="20"/></name> <modifier pos:line="2" pos:column="21">*<pos:position pos:line="2" pos:column="22"/></modifier></type><name><name pos:line="2" pos:column="22">argv<pos:position pos:line="2" pos:column="26"/></name><index pos:line="2" pos:column="26">[]<pos:position pos:line="2" pos:column="28"/></index></name></decl></parameter>)<pos:position pos:line="2" pos:column="29"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">s<pos:position pos:line="4" pos:column="12"/></name></decl>;<pos:position pos:line="4" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">cachemgr_request<pos:position pos:line="5" pos:column="21"/></name> <modifier pos:line="5" pos:column="22">*<pos:position pos:line="5" pos:column="23"/></modifier></type><name pos:line="5" pos:column="23">req<pos:position pos:line="5" pos:column="26"/></name></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>

    <expr_stmt><expr><name pos:line="7" pos:column="5">now<pos:position pos:line="7" pos:column="8"/></name> <operator pos:line="7" pos:column="9">=<pos:position pos:line="7" pos:column="10"/></operator> <call><name pos:line="7" pos:column="11">time<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><name pos:line="7" pos:column="16">NULL<pos:position pos:line="7" pos:column="20"/></name></expr></argument>)<pos:position pos:line="7" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="22"/></expr_stmt>
<cpp:if pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">if<pos:position pos:line="8" pos:column="4"/></cpp:directive> <expr><name pos:line="8" pos:column="5">_SQUID_WINDOWS_<pos:position pos:line="8" pos:column="20"/></name></expr></cpp:if>

    <expr_stmt><expr><call><name pos:line="10" pos:column="5">Win32SockInit<pos:position pos:line="10" pos:column="18"/></name><argument_list pos:line="10" pos:column="18">()<pos:position pos:line="10" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">atexit<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><name pos:line="11" pos:column="12">Win32SockCleanup<pos:position pos:line="11" pos:column="28"/></name></expr></argument>)<pos:position pos:line="11" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">_setmode<pos:position pos:line="12" pos:column="13"/></name><argument_list pos:line="12" pos:column="13">( <argument><expr><call><name pos:line="12" pos:column="15">_fileno<pos:position pos:line="12" pos:column="22"/></name><argument_list pos:line="12" pos:column="22">( <argument><expr><name pos:line="12" pos:column="24">stdin<pos:position pos:line="12" pos:column="29"/></name></expr></argument> )<pos:position pos:line="12" pos:column="31"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="12" pos:column="33">_O_BINARY<pos:position pos:line="12" pos:column="42"/></name></expr></argument> )<pos:position pos:line="12" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">_setmode<pos:position pos:line="13" pos:column="13"/></name><argument_list pos:line="13" pos:column="13">( <argument><expr><call><name pos:line="13" pos:column="15">_fileno<pos:position pos:line="13" pos:column="22"/></name><argument_list pos:line="13" pos:column="22">( <argument><expr><name pos:line="13" pos:column="24">stdout<pos:position pos:line="13" pos:column="30"/></name></expr></argument> )<pos:position pos:line="13" pos:column="32"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="13" pos:column="34">_O_BINARY<pos:position pos:line="13" pos:column="43"/></name></expr></argument> )<pos:position pos:line="13" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><name pos:line="14" pos:column="5">_fmode<pos:position pos:line="14" pos:column="11"/></name> <operator pos:line="14" pos:column="12">=<pos:position pos:line="14" pos:column="13"/></operator> <name pos:line="14" pos:column="14">_O_BINARY<pos:position pos:line="14" pos:column="23"/></name></expr>;<pos:position pos:line="14" pos:column="24"/></expr_stmt>

    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><operator pos:line="16" pos:column="9">(<pos:position pos:line="16" pos:column="10"/></operator><name pos:line="16" pos:column="10">s<pos:position pos:line="16" pos:column="11"/></name> <operator pos:line="16" pos:column="12">=<pos:position pos:line="16" pos:column="13"/></operator> <call><name pos:line="16" pos:column="14">strrchr<pos:position pos:line="16" pos:column="21"/></name><argument_list pos:line="16" pos:column="21">(<argument><expr><name><name pos:line="16" pos:column="22">argv<pos:position pos:line="16" pos:column="26"/></name><index pos:line="16" pos:column="26">[<expr><literal type="number" pos:line="16" pos:column="27">0<pos:position pos:line="16" pos:column="28"/></literal></expr>]<pos:position pos:line="16" pos:column="29"/></index></name></expr></argument>, <argument><expr><literal type="char" pos:line="16" pos:column="31">'\\'<pos:position pos:line="16" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="36"/></argument_list></call><operator pos:line="16" pos:column="36">)<pos:position pos:line="16" pos:column="37"/></operator></expr>)<pos:position pos:line="16" pos:column="38"/></condition><then pos:line="16" pos:column="38">
<cpp:else pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">else<pos:position pos:line="17" pos:column="6"/></cpp:directive></cpp:else>

    <block type="pseudo"><if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><operator pos:line="19" pos:column="9">(<pos:position pos:line="19" pos:column="10"/></operator><name pos:line="19" pos:column="10">s<pos:position pos:line="19" pos:column="11"/></name> <operator pos:line="19" pos:column="12">=<pos:position pos:line="19" pos:column="13"/></operator> <call><name pos:line="19" pos:column="14">strrchr<pos:position pos:line="19" pos:column="21"/></name><argument_list pos:line="19" pos:column="21">(<argument><expr><name><name pos:line="19" pos:column="22">argv<pos:position pos:line="19" pos:column="26"/></name><index pos:line="19" pos:column="26">[<expr><literal type="number" pos:line="19" pos:column="27">0<pos:position pos:line="19" pos:column="28"/></literal></expr>]<pos:position pos:line="19" pos:column="29"/></index></name></expr></argument>, <argument><expr><literal type="char" pos:line="19" pos:column="31">'/'<pos:position pos:line="19" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="35"/></argument_list></call><operator pos:line="19" pos:column="35">)<pos:position pos:line="19" pos:column="36"/></operator></expr>)<pos:position pos:line="19" pos:column="37"/></condition><then pos:line="19" pos:column="37">
<cpp:endif pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">endif<pos:position pos:line="20" pos:column="7"/></cpp:directive></cpp:endif>

        <block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="9">progname<pos:position pos:line="22" pos:column="17"/></name> <operator pos:line="22" pos:column="18">=<pos:position pos:line="22" pos:column="19"/></operator> <call><name pos:line="22" pos:column="20">xstrdup<pos:position pos:line="22" pos:column="27"/></name><argument_list pos:line="22" pos:column="27">(<argument><expr><name pos:line="22" pos:column="28">s<pos:position pos:line="22" pos:column="29"/></name> <operator pos:line="22" pos:column="30">+<pos:position pos:line="22" pos:column="31"/></operator> <literal type="number" pos:line="22" pos:column="32">1<pos:position pos:line="22" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="35"/></expr_stmt></block></then>
    <else pos:line="23" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="9">progname<pos:position pos:line="24" pos:column="17"/></name> <operator pos:line="24" pos:column="18">=<pos:position pos:line="24" pos:column="19"/></operator> <call><name pos:line="24" pos:column="20">xstrdup<pos:position pos:line="24" pos:column="27"/></name><argument_list pos:line="24" pos:column="27">(<argument><expr><name><name pos:line="24" pos:column="28">argv<pos:position pos:line="24" pos:column="32"/></name><index pos:line="24" pos:column="32">[<expr><literal type="number" pos:line="24" pos:column="33">0<pos:position pos:line="24" pos:column="34"/></literal></expr>]<pos:position pos:line="24" pos:column="35"/></index></name></expr></argument>)<pos:position pos:line="24" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="37"/></expr_stmt></block></else></if></block></then></if>

    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><operator pos:line="26" pos:column="9">(<pos:position pos:line="26" pos:column="10"/></operator><name pos:line="26" pos:column="10">s<pos:position pos:line="26" pos:column="11"/></name> <operator pos:line="26" pos:column="12">=<pos:position pos:line="26" pos:column="13"/></operator> <call><name pos:line="26" pos:column="14">getenv<pos:position pos:line="26" pos:column="20"/></name><argument_list pos:line="26" pos:column="20">(<argument><expr><literal type="string" pos:line="26" pos:column="21">"SCRIPT_NAME"<pos:position pos:line="26" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="35"/></argument_list></call><operator pos:line="26" pos:column="35">)<pos:position pos:line="26" pos:column="36"/></operator> <operator pos:line="26" pos:column="37">!=<pos:position pos:line="26" pos:column="39"/></operator> <name pos:line="26" pos:column="40">NULL<pos:position pos:line="26" pos:column="44"/></name></expr>)<pos:position pos:line="26" pos:column="45"/></condition><then pos:line="26" pos:column="45">
        <block type="pseudo"><expr_stmt><expr><name pos:line="27" pos:column="9">script_name<pos:position pos:line="27" pos:column="20"/></name> <operator pos:line="27" pos:column="21">=<pos:position pos:line="27" pos:column="22"/></operator> <call><name pos:line="27" pos:column="23">xstrdup<pos:position pos:line="27" pos:column="30"/></name><argument_list pos:line="27" pos:column="30">(<argument><expr><name pos:line="27" pos:column="31">s<pos:position pos:line="27" pos:column="32"/></name></expr></argument>)<pos:position pos:line="27" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="34"/></expr_stmt></block></then></if>

    <decl_stmt><decl><type><name pos:line="29" pos:column="5">char<pos:position pos:line="29" pos:column="9"/></name> <modifier pos:line="29" pos:column="10">*<pos:position pos:line="29" pos:column="11"/></modifier><modifier pos:line="29" pos:column="11">*<pos:position pos:line="29" pos:column="12"/></modifier></type><name pos:line="29" pos:column="12">args<pos:position pos:line="29" pos:column="16"/></name> <init pos:line="29" pos:column="17">= <expr><name pos:line="29" pos:column="19">argv<pos:position pos:line="29" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="29" pos:column="24"/></decl_stmt>
    <while pos:line="30" pos:column="5">while <condition pos:line="30" pos:column="11">(<expr><name pos:line="30" pos:column="12">argc<pos:position pos:line="30" pos:column="16"/></name> <operator pos:line="30" pos:column="17">&gt;<pos:position pos:line="30" pos:column="21"/></operator> <literal type="number" pos:line="30" pos:column="19">1<pos:position pos:line="30" pos:column="20"/></literal> <operator pos:line="30" pos:column="21">&amp;&amp;<pos:position pos:line="30" pos:column="31"/></operator> <name><name pos:line="30" pos:column="24">args<pos:position pos:line="30" pos:column="28"/></name><index pos:line="30" pos:column="28">[<expr><literal type="number" pos:line="30" pos:column="29">1<pos:position pos:line="30" pos:column="30"/></literal></expr>]<pos:position pos:line="30" pos:column="31"/></index><index pos:line="30" pos:column="31">[<expr><literal type="number" pos:line="30" pos:column="32">0<pos:position pos:line="30" pos:column="33"/></literal></expr>]<pos:position pos:line="30" pos:column="34"/></index></name> <operator pos:line="30" pos:column="35">==<pos:position pos:line="30" pos:column="37"/></operator> <literal type="char" pos:line="30" pos:column="38">'-'<pos:position pos:line="30" pos:column="41"/></literal></expr>)<pos:position pos:line="30" pos:column="42"/></condition> <block pos:line="30" pos:column="43">{
<comment type="line" pos:line="31" pos:column="1">//        const char *value = "";</comment>
        <decl_stmt><decl><type><name pos:line="32" pos:column="9">char<pos:position pos:line="32" pos:column="13"/></name></type> <name pos:line="32" pos:column="14">option<pos:position pos:line="32" pos:column="20"/></name> <init pos:line="32" pos:column="21">= <expr><name><name pos:line="32" pos:column="23">args<pos:position pos:line="32" pos:column="27"/></name><index pos:line="32" pos:column="27">[<expr><literal type="number" pos:line="32" pos:column="28">1<pos:position pos:line="32" pos:column="29"/></literal></expr>]<pos:position pos:line="32" pos:column="30"/></index><index pos:line="32" pos:column="30">[<expr><literal type="number" pos:line="32" pos:column="31">1<pos:position pos:line="32" pos:column="32"/></literal></expr>]<pos:position pos:line="32" pos:column="33"/></index></name></expr></init></decl>;<pos:position pos:line="32" pos:column="34"/></decl_stmt>
        <switch pos:line="33" pos:column="9">switch <condition pos:line="33" pos:column="16">(<expr><name pos:line="33" pos:column="17">option<pos:position pos:line="33" pos:column="23"/></name></expr>)<pos:position pos:line="33" pos:column="24"/></condition> <block pos:line="33" pos:column="25">{
        <case pos:line="34" pos:column="9">case <expr><literal type="char" pos:line="34" pos:column="14">'d'<pos:position pos:line="34" pos:column="17"/></literal></expr>:<pos:position pos:line="34" pos:column="18"/></case>
            <expr_stmt><expr><name pos:line="35" pos:column="13">debug_enabled<pos:position pos:line="35" pos:column="26"/></name> <operator pos:line="35" pos:column="27">=<pos:position pos:line="35" pos:column="28"/></operator> <literal type="number" pos:line="35" pos:column="29">1<pos:position pos:line="35" pos:column="30"/></literal></expr>;<pos:position pos:line="35" pos:column="31"/></expr_stmt>
            <break pos:line="36" pos:column="13">break;<pos:position pos:line="36" pos:column="19"/></break>
        <default pos:line="37" pos:column="9">default:<pos:position pos:line="37" pos:column="17"/></default>
<cpp:if pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">if<pos:position pos:line="38" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="38" pos:column="5">0<pos:position pos:line="38" pos:column="6"/></literal></expr></cpp:if> <comment type="line" pos:line="38" pos:column="7">// unused for now.</comment>
            if (strlen(args[1]) &gt; 2) {
                value = args[1] + 2;
            } else if (argc &gt; 2) {
                value = args[2];
                ++args;
                --argc;
            } else
                value = "";
<cpp:endif pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">endif<pos:position pos:line="47" pos:column="7"/></cpp:directive></cpp:endif>
            <break pos:line="48" pos:column="13">break;<pos:position pos:line="48" pos:column="19"/></break>
        }<pos:position pos:line="49" pos:column="10"/></block></switch>
        <expr_stmt><expr><operator pos:line="50" pos:column="9">++<pos:position pos:line="50" pos:column="11"/></operator><name pos:line="50" pos:column="11">args<pos:position pos:line="50" pos:column="15"/></name></expr>;<pos:position pos:line="50" pos:column="16"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="51" pos:column="9">--<pos:position pos:line="51" pos:column="11"/></operator><name pos:line="51" pos:column="11">argc<pos:position pos:line="51" pos:column="15"/></name></expr>;<pos:position pos:line="51" pos:column="16"/></expr_stmt>
    }<pos:position pos:line="52" pos:column="6"/></block></while>

    <expr_stmt><expr><name pos:line="54" pos:column="5">req<pos:position pos:line="54" pos:column="8"/></name> <operator pos:line="54" pos:column="9">=<pos:position pos:line="54" pos:column="10"/></operator> <call><name pos:line="54" pos:column="11">read_request<pos:position pos:line="54" pos:column="23"/></name><argument_list pos:line="54" pos:column="23">()<pos:position pos:line="54" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="26"/></expr_stmt>

    <return pos:line="56" pos:column="5">return <expr><call><name pos:line="56" pos:column="12">process_request<pos:position pos:line="56" pos:column="27"/></name><argument_list pos:line="56" pos:column="27">(<argument><expr><name pos:line="56" pos:column="28">req<pos:position pos:line="56" pos:column="31"/></name></expr></argument>)<pos:position pos:line="56" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="33"/></return>
}<pos:position pos:line="57" pos:column="2"/></block></function></unit>
