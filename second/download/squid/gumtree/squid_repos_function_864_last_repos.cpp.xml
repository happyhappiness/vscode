<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_864_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">parse_access_log<pos:position pos:line="2" pos:column="17"/></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><name pos:line="2" pos:column="18">CustomLog<pos:position pos:line="2" pos:column="27"/></name> <modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier><modifier pos:line="2" pos:column="29">*<pos:position pos:line="2" pos:column="30"/></modifier></type> <name pos:line="2" pos:column="31">logs<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="36"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">filename<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><call><name><name pos:line="4" pos:column="28">ConfigParser<pos:position pos:line="4" pos:column="40"/></name><operator pos:line="4" pos:column="40">::<pos:position pos:line="4" pos:column="42"/></operator><name pos:line="4" pos:column="42">NextToken<pos:position pos:line="4" pos:column="51"/></name></name><argument_list pos:line="4" pos:column="51">()<pos:position pos:line="4" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="54"/></decl_stmt>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><operator pos:line="5" pos:column="9">!<pos:position pos:line="5" pos:column="10"/></operator><name pos:line="5" pos:column="10">filename<pos:position pos:line="5" pos:column="18"/></name></expr>)<pos:position pos:line="5" pos:column="19"/></condition><then pos:line="5" pos:column="19"> <block pos:line="5" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="6" pos:column="9">self_destruct<pos:position pos:line="6" pos:column="22"/></name><argument_list pos:line="6" pos:column="22">()<pos:position pos:line="6" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="25"/></expr_stmt>
        <return pos:line="7" pos:column="9">return;<pos:position pos:line="7" pos:column="16"/></return>
    }<pos:position pos:line="8" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="10" pos:column="5">CustomLog<pos:position pos:line="10" pos:column="14"/></name> <modifier pos:line="10" pos:column="15">*<pos:position pos:line="10" pos:column="16"/></modifier></type><name pos:line="10" pos:column="16">cl<pos:position pos:line="10" pos:column="18"/></name> <init pos:line="10" pos:column="19">= <expr><operator pos:line="10" pos:column="21">(<pos:position pos:line="10" pos:column="22"/></operator><name pos:line="10" pos:column="22">CustomLog<pos:position pos:line="10" pos:column="31"/></name> <operator pos:line="10" pos:column="32">*<pos:position pos:line="10" pos:column="33"/></operator><operator pos:line="10" pos:column="33">)<pos:position pos:line="10" pos:column="34"/></operator><call><name pos:line="10" pos:column="34">xcalloc<pos:position pos:line="10" pos:column="41"/></name><argument_list pos:line="10" pos:column="41">(<argument><expr><literal type="number" pos:line="10" pos:column="42">1<pos:position pos:line="10" pos:column="43"/></literal></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="45">sizeof<argument_list pos:line="10" pos:column="51">(<argument><expr><operator pos:line="10" pos:column="52">*<pos:position pos:line="10" pos:column="53"/></operator><name pos:line="10" pos:column="53">cl<pos:position pos:line="10" pos:column="55"/></name></expr></argument>)<pos:position pos:line="10" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="58"/></decl_stmt>

    <expr_stmt><expr><name><name pos:line="12" pos:column="5">cl<pos:position pos:line="12" pos:column="7"/></name><operator pos:line="12" pos:column="7">-&gt;<pos:position pos:line="12" pos:column="12"/></operator><name pos:line="12" pos:column="9">filename<pos:position pos:line="12" pos:column="17"/></name></name> <operator pos:line="12" pos:column="18">=<pos:position pos:line="12" pos:column="19"/></operator> <call><name pos:line="12" pos:column="20">xstrdup<pos:position pos:line="12" pos:column="27"/></name><argument_list pos:line="12" pos:column="27">(<argument><expr><name pos:line="12" pos:column="28">filename<pos:position pos:line="12" pos:column="36"/></name></expr></argument>)<pos:position pos:line="12" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="38"/></expr_stmt>
    <comment type="line" pos:line="13" pos:column="5">// default buffer size and fatal settings</comment>
    <expr_stmt><expr><name><name pos:line="14" pos:column="5">cl<pos:position pos:line="14" pos:column="7"/></name><operator pos:line="14" pos:column="7">-&gt;<pos:position pos:line="14" pos:column="12"/></operator><name pos:line="14" pos:column="9">bufferSize<pos:position pos:line="14" pos:column="19"/></name></name> <operator pos:line="14" pos:column="20">=<pos:position pos:line="14" pos:column="21"/></operator> <literal type="number" pos:line="14" pos:column="22">8<pos:position pos:line="14" pos:column="23"/></literal><operator pos:line="14" pos:column="23">*<pos:position pos:line="14" pos:column="24"/></operator><name pos:line="14" pos:column="24">MAX_URL<pos:position pos:line="14" pos:column="31"/></name></expr>;<pos:position pos:line="14" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="15" pos:column="5">cl<pos:position pos:line="15" pos:column="7"/></name><operator pos:line="15" pos:column="7">-&gt;<pos:position pos:line="15" pos:column="12"/></operator><name pos:line="15" pos:column="9">fatal<pos:position pos:line="15" pos:column="14"/></name></name> <operator pos:line="15" pos:column="15">=<pos:position pos:line="15" pos:column="16"/></operator> <literal type="boolean" pos:line="15" pos:column="17">true<pos:position pos:line="15" pos:column="21"/></literal></expr>;<pos:position pos:line="15" pos:column="22"/></expr_stmt>

    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><call><name pos:line="17" pos:column="9">strcmp<pos:position pos:line="17" pos:column="15"/></name><argument_list pos:line="17" pos:column="15">(<argument><expr><name pos:line="17" pos:column="16">filename<pos:position pos:line="17" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="26">"none"<pos:position pos:line="17" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="33"/></argument_list></call> <operator pos:line="17" pos:column="34">==<pos:position pos:line="17" pos:column="36"/></operator> <literal type="number" pos:line="17" pos:column="37">0<pos:position pos:line="17" pos:column="38"/></literal></expr>)<pos:position pos:line="17" pos:column="39"/></condition><then pos:line="17" pos:column="39"> <block pos:line="17" pos:column="40">{
        <expr_stmt><expr><name><name pos:line="18" pos:column="9">cl<pos:position pos:line="18" pos:column="11"/></name><operator pos:line="18" pos:column="11">-&gt;<pos:position pos:line="18" pos:column="16"/></operator><name pos:line="18" pos:column="13">type<pos:position pos:line="18" pos:column="17"/></name></name> <operator pos:line="18" pos:column="18">=<pos:position pos:line="18" pos:column="19"/></operator> <name><name pos:line="18" pos:column="20">Log<pos:position pos:line="18" pos:column="23"/></name><operator pos:line="18" pos:column="23">::<pos:position pos:line="18" pos:column="25"/></operator><name pos:line="18" pos:column="25">Format<pos:position pos:line="18" pos:column="31"/></name><operator pos:line="18" pos:column="31">::<pos:position pos:line="18" pos:column="33"/></operator><name pos:line="18" pos:column="33">CLF_NONE<pos:position pos:line="18" pos:column="41"/></name></name></expr>;<pos:position pos:line="18" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">aclParseAclList<pos:position pos:line="19" pos:column="24"/></name><argument_list pos:line="19" pos:column="24">(<argument><expr><name pos:line="19" pos:column="25">LegacyParser<pos:position pos:line="19" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="39">&amp;<pos:position pos:line="19" pos:column="44"/></operator><name><name pos:line="19" pos:column="40">cl<pos:position pos:line="19" pos:column="42"/></name><operator pos:line="19" pos:column="42">-&gt;<pos:position pos:line="19" pos:column="47"/></operator><name pos:line="19" pos:column="44">aclList<pos:position pos:line="19" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="53">filename<pos:position pos:line="19" pos:column="61"/></name></expr></argument>)<pos:position pos:line="19" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="63"/></expr_stmt>
        <while pos:line="20" pos:column="9">while <condition pos:line="20" pos:column="15">(<expr><operator pos:line="20" pos:column="16">*<pos:position pos:line="20" pos:column="17"/></operator><name pos:line="20" pos:column="17">logs<pos:position pos:line="20" pos:column="21"/></name></expr>)<pos:position pos:line="20" pos:column="22"/></condition>
            <block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="13">logs<pos:position pos:line="21" pos:column="17"/></name> <operator pos:line="21" pos:column="18">=<pos:position pos:line="21" pos:column="19"/></operator> <operator pos:line="21" pos:column="20">&amp;<pos:position pos:line="21" pos:column="25"/></operator><name><operator pos:line="21" pos:column="21">(<pos:position pos:line="21" pos:column="22"/></operator><operator pos:line="21" pos:column="22">*<pos:position pos:line="21" pos:column="23"/></operator><name pos:line="21" pos:column="23">logs<pos:position pos:line="21" pos:column="27"/></name><operator pos:line="21" pos:column="27">)<pos:position pos:line="21" pos:column="28"/></operator><operator pos:line="21" pos:column="28">-&gt;<pos:position pos:line="21" pos:column="33"/></operator><name pos:line="21" pos:column="30">next<pos:position pos:line="21" pos:column="34"/></name></name></expr>;<pos:position pos:line="21" pos:column="35"/></expr_stmt></block></while>
        <expr_stmt><expr><operator pos:line="22" pos:column="9">*<pos:position pos:line="22" pos:column="10"/></operator><name pos:line="22" pos:column="10">logs<pos:position pos:line="22" pos:column="14"/></name> <operator pos:line="22" pos:column="15">=<pos:position pos:line="22" pos:column="16"/></operator> <name pos:line="22" pos:column="17">cl<pos:position pos:line="22" pos:column="19"/></name></expr>;<pos:position pos:line="22" pos:column="20"/></expr_stmt>
        <return pos:line="23" pos:column="9">return;<pos:position pos:line="23" pos:column="16"/></return>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="26" pos:column="5">cl<pos:position pos:line="26" pos:column="7"/></name><operator pos:line="26" pos:column="7">-&gt;<pos:position pos:line="26" pos:column="12"/></operator><name pos:line="26" pos:column="9">type<pos:position pos:line="26" pos:column="13"/></name></name> <operator pos:line="26" pos:column="14">=<pos:position pos:line="26" pos:column="15"/></operator> <name><name pos:line="26" pos:column="16">Log<pos:position pos:line="26" pos:column="19"/></name><operator pos:line="26" pos:column="19">::<pos:position pos:line="26" pos:column="21"/></operator><name pos:line="26" pos:column="21">Format<pos:position pos:line="26" pos:column="27"/></name><operator pos:line="26" pos:column="27">::<pos:position pos:line="26" pos:column="29"/></operator><name pos:line="26" pos:column="29">CLF_UNKNOWN<pos:position pos:line="26" pos:column="40"/></name></name></expr>;<pos:position pos:line="26" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="27" pos:column="5">cl<pos:position pos:line="27" pos:column="7"/></name><operator pos:line="27" pos:column="7">-&gt;<pos:position pos:line="27" pos:column="12"/></operator><name pos:line="27" pos:column="9">rotateCount<pos:position pos:line="27" pos:column="20"/></name></name> <operator pos:line="27" pos:column="21">=<pos:position pos:line="27" pos:column="22"/></operator> <operator pos:line="27" pos:column="23">-<pos:position pos:line="27" pos:column="24"/></operator><literal type="number" pos:line="27" pos:column="24">1<pos:position pos:line="27" pos:column="25"/></literal></expr>;<pos:position pos:line="27" pos:column="26"/></expr_stmt> <comment type="line" pos:line="27" pos:column="27">// default: use global logfile_rotate setting.</comment>

    <decl_stmt><decl><type><specifier pos:line="29" pos:column="5">const<pos:position pos:line="29" pos:column="10"/></specifier> <name pos:line="29" pos:column="11">char<pos:position pos:line="29" pos:column="15"/></name> <modifier pos:line="29" pos:column="16">*<pos:position pos:line="29" pos:column="17"/></modifier></type><name pos:line="29" pos:column="17">token<pos:position pos:line="29" pos:column="22"/></name> <init pos:line="29" pos:column="23">= <expr><call><name><name pos:line="29" pos:column="25">ConfigParser<pos:position pos:line="29" pos:column="37"/></name><operator pos:line="29" pos:column="37">::<pos:position pos:line="29" pos:column="39"/></operator><name pos:line="29" pos:column="39">PeekAtToken<pos:position pos:line="29" pos:column="50"/></name></name><argument_list pos:line="29" pos:column="50">()<pos:position pos:line="29" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="29" pos:column="53"/></decl_stmt>
    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><operator pos:line="30" pos:column="9">!<pos:position pos:line="30" pos:column="10"/></operator><name pos:line="30" pos:column="10">token<pos:position pos:line="30" pos:column="15"/></name></expr>)<pos:position pos:line="30" pos:column="16"/></condition><then pos:line="30" pos:column="16"> <block pos:line="30" pos:column="17">{ <comment type="line" pos:line="30" pos:column="19">// style #1</comment>
        <comment type="line" pos:line="31" pos:column="9">// no options to deal with</comment>
    }<pos:position pos:line="32" pos:column="6"/></block></then> <elseif pos:line="32" pos:column="7">else <if pos:line="32" pos:column="12">if <condition pos:line="32" pos:column="15">(<expr><operator pos:line="32" pos:column="16">!<pos:position pos:line="32" pos:column="17"/></operator><call><name pos:line="32" pos:column="17">strchr<pos:position pos:line="32" pos:column="23"/></name><argument_list pos:line="32" pos:column="23">(<argument><expr><name pos:line="32" pos:column="24">token<pos:position pos:line="32" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="32" pos:column="31">'='<pos:position pos:line="32" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="36"/></condition><then pos:line="32" pos:column="36"> <block pos:line="32" pos:column="37">{ <comment type="line" pos:line="32" pos:column="39">// style #3</comment>
        <comment type="line" pos:line="33" pos:column="9">// if logformat name is recognized,</comment>
        <comment type="line" pos:line="34" pos:column="9">// pop the previewed token; Else it must be an ACL name</comment>
        <if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><call><name pos:line="35" pos:column="13">setLogformat<pos:position pos:line="35" pos:column="25"/></name><argument_list pos:line="35" pos:column="25">(<argument><expr><name pos:line="35" pos:column="26">cl<pos:position pos:line="35" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="30">token<pos:position pos:line="35" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="35" pos:column="37">false<pos:position pos:line="35" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="44"/></condition><then pos:line="35" pos:column="44">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="36" pos:column="13">(<pos:position pos:line="36" pos:column="14"/></operator><name pos:line="36" pos:column="14">void<pos:position pos:line="36" pos:column="18"/></name><operator pos:line="36" pos:column="18">)<pos:position pos:line="36" pos:column="19"/></operator><call><name><name pos:line="36" pos:column="19">ConfigParser<pos:position pos:line="36" pos:column="31"/></name><operator pos:line="36" pos:column="31">::<pos:position pos:line="36" pos:column="33"/></operator><name pos:line="36" pos:column="33">NextToken<pos:position pos:line="36" pos:column="42"/></name></name><argument_list pos:line="36" pos:column="42">()<pos:position pos:line="36" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="45"/></expr_stmt></block></then></if>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if></elseif> <else pos:line="37" pos:column="7">else <block pos:line="37" pos:column="12">{ <comment type="line" pos:line="37" pos:column="14">// style #4</comment>
        <do pos:line="38" pos:column="9">do <block pos:line="38" pos:column="12">{
            <if pos:line="39" pos:column="13">if <condition pos:line="39" pos:column="16">(<expr><call><name pos:line="39" pos:column="17">strncasecmp<pos:position pos:line="39" pos:column="28"/></name><argument_list pos:line="39" pos:column="28">(<argument><expr><name pos:line="39" pos:column="29">token<pos:position pos:line="39" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="36">"on-error="<pos:position pos:line="39" pos:column="47"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="49">9<pos:position pos:line="39" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="51"/></argument_list></call> <operator pos:line="39" pos:column="52">==<pos:position pos:line="39" pos:column="54"/></operator> <literal type="number" pos:line="39" pos:column="55">0<pos:position pos:line="39" pos:column="56"/></literal></expr>)<pos:position pos:line="39" pos:column="57"/></condition><then pos:line="39" pos:column="57"> <block pos:line="39" pos:column="58">{
                <if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><call><name pos:line="40" pos:column="21">strncasecmp<pos:position pos:line="40" pos:column="32"/></name><argument_list pos:line="40" pos:column="32">(<argument><expr><name pos:line="40" pos:column="33">token<pos:position pos:line="40" pos:column="38"/></name><operator pos:line="40" pos:column="38">+<pos:position pos:line="40" pos:column="39"/></operator><literal type="number" pos:line="40" pos:column="39">9<pos:position pos:line="40" pos:column="40"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="42">"die"<pos:position pos:line="40" pos:column="47"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="49">3<pos:position pos:line="40" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="51"/></argument_list></call> <operator pos:line="40" pos:column="52">==<pos:position pos:line="40" pos:column="54"/></operator> <literal type="number" pos:line="40" pos:column="55">0<pos:position pos:line="40" pos:column="56"/></literal></expr>)<pos:position pos:line="40" pos:column="57"/></condition><then pos:line="40" pos:column="57"> <block pos:line="40" pos:column="58">{
                    <expr_stmt><expr><name><name pos:line="41" pos:column="21">cl<pos:position pos:line="41" pos:column="23"/></name><operator pos:line="41" pos:column="23">-&gt;<pos:position pos:line="41" pos:column="28"/></operator><name pos:line="41" pos:column="25">fatal<pos:position pos:line="41" pos:column="30"/></name></name> <operator pos:line="41" pos:column="31">=<pos:position pos:line="41" pos:column="32"/></operator> <literal type="boolean" pos:line="41" pos:column="33">true<pos:position pos:line="41" pos:column="37"/></literal></expr>;<pos:position pos:line="41" pos:column="38"/></expr_stmt>
                }<pos:position pos:line="42" pos:column="18"/></block></then> <elseif pos:line="42" pos:column="19">else <if pos:line="42" pos:column="24">if <condition pos:line="42" pos:column="27">(<expr><call><name pos:line="42" pos:column="28">strncasecmp<pos:position pos:line="42" pos:column="39"/></name><argument_list pos:line="42" pos:column="39">(<argument><expr><name pos:line="42" pos:column="40">token<pos:position pos:line="42" pos:column="45"/></name><operator pos:line="42" pos:column="45">+<pos:position pos:line="42" pos:column="46"/></operator><literal type="number" pos:line="42" pos:column="46">9<pos:position pos:line="42" pos:column="47"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="49">"drop"<pos:position pos:line="42" pos:column="55"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="42" pos:column="57">4<pos:position pos:line="42" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="59"/></argument_list></call> <operator pos:line="42" pos:column="60">==<pos:position pos:line="42" pos:column="62"/></operator> <literal type="number" pos:line="42" pos:column="63">0<pos:position pos:line="42" pos:column="64"/></literal></expr>)<pos:position pos:line="42" pos:column="65"/></condition><then pos:line="42" pos:column="65"> <block pos:line="42" pos:column="66">{
                    <expr_stmt><expr><name><name pos:line="43" pos:column="21">cl<pos:position pos:line="43" pos:column="23"/></name><operator pos:line="43" pos:column="23">-&gt;<pos:position pos:line="43" pos:column="28"/></operator><name pos:line="43" pos:column="25">fatal<pos:position pos:line="43" pos:column="30"/></name></name> <operator pos:line="43" pos:column="31">=<pos:position pos:line="43" pos:column="32"/></operator> <literal type="boolean" pos:line="43" pos:column="33">false<pos:position pos:line="43" pos:column="38"/></literal></expr>;<pos:position pos:line="43" pos:column="39"/></expr_stmt>
                }<pos:position pos:line="44" pos:column="18"/></block></then></if></elseif> <else pos:line="44" pos:column="19">else <block pos:line="44" pos:column="24">{
                    <expr_stmt><expr><call><name pos:line="45" pos:column="21">debugs<pos:position pos:line="45" pos:column="27"/></name><argument_list pos:line="45" pos:column="27">(<argument><expr><literal type="number" pos:line="45" pos:column="28">3<pos:position pos:line="45" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="45" pos:column="31">DBG_CRITICAL<pos:position pos:line="45" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="45">"Unknown value for on-error '"<pos:position pos:line="45" pos:column="75"/></literal> <operator pos:line="45" pos:column="76">&lt;&lt;<pos:position pos:line="45" pos:column="84"/></operator>
                           <name pos:line="46" pos:column="28">token<pos:position pos:line="46" pos:column="33"/></name> <operator pos:line="46" pos:column="34">&lt;&lt;<pos:position pos:line="46" pos:column="42"/></operator> <literal type="string" pos:line="46" pos:column="37">"' expected 'drop' or 'die'"<pos:position pos:line="46" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="67"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="47" pos:column="21">xfree<pos:position pos:line="47" pos:column="26"/></name><argument_list pos:line="47" pos:column="26">(<argument><expr><name><name pos:line="47" pos:column="27">cl<pos:position pos:line="47" pos:column="29"/></name><operator pos:line="47" pos:column="29">-&gt;<pos:position pos:line="47" pos:column="34"/></operator><name pos:line="47" pos:column="31">filename<pos:position pos:line="47" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="41"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="48" pos:column="21">xfree<pos:position pos:line="48" pos:column="26"/></name><argument_list pos:line="48" pos:column="26">(<argument><expr><name pos:line="48" pos:column="27">cl<pos:position pos:line="48" pos:column="29"/></name></expr></argument>)<pos:position pos:line="48" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="31"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="49" pos:column="21">self_destruct<pos:position pos:line="49" pos:column="34"/></name><argument_list pos:line="49" pos:column="34">()<pos:position pos:line="49" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="37"/></expr_stmt>
                    <return pos:line="50" pos:column="21">return;<pos:position pos:line="50" pos:column="28"/></return>
                }<pos:position pos:line="51" pos:column="18"/></block></else></if>
            }<pos:position pos:line="52" pos:column="14"/></block></then> <elseif pos:line="52" pos:column="15">else <if pos:line="52" pos:column="20">if <condition pos:line="52" pos:column="23">(<expr><call><name pos:line="52" pos:column="24">strncasecmp<pos:position pos:line="52" pos:column="35"/></name><argument_list pos:line="52" pos:column="35">(<argument><expr><name pos:line="52" pos:column="36">token<pos:position pos:line="52" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="43">"buffer-size="<pos:position pos:line="52" pos:column="57"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="52" pos:column="59">12<pos:position pos:line="52" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="62"/></argument_list></call> <operator pos:line="52" pos:column="63">==<pos:position pos:line="52" pos:column="65"/></operator> <literal type="number" pos:line="52" pos:column="66">0<pos:position pos:line="52" pos:column="67"/></literal></expr>)<pos:position pos:line="52" pos:column="68"/></condition><then pos:line="52" pos:column="68"> <block pos:line="52" pos:column="69">{
                <expr_stmt><expr><call><name pos:line="53" pos:column="17">parseBytesOptionValue<pos:position pos:line="53" pos:column="38"/></name><argument_list pos:line="53" pos:column="38">(<argument><expr><operator pos:line="53" pos:column="39">&amp;<pos:position pos:line="53" pos:column="44"/></operator><name><name pos:line="53" pos:column="40">cl<pos:position pos:line="53" pos:column="42"/></name><operator pos:line="53" pos:column="42">-&gt;<pos:position pos:line="53" pos:column="47"/></operator><name pos:line="53" pos:column="44">bufferSize<pos:position pos:line="53" pos:column="54"/></name></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="56">B_BYTES_STR<pos:position pos:line="53" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="69">token<pos:position pos:line="53" pos:column="74"/></name><operator pos:line="53" pos:column="74">+<pos:position pos:line="53" pos:column="75"/></operator><literal type="number" pos:line="53" pos:column="75">12<pos:position pos:line="53" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="79"/></expr_stmt>
            }<pos:position pos:line="54" pos:column="14"/></block></then></if></elseif> <elseif pos:line="54" pos:column="15">else <if pos:line="54" pos:column="20">if <condition pos:line="54" pos:column="23">(<expr><call><name pos:line="54" pos:column="24">strncasecmp<pos:position pos:line="54" pos:column="35"/></name><argument_list pos:line="54" pos:column="35">(<argument><expr><name pos:line="54" pos:column="36">token<pos:position pos:line="54" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="43">"rotate="<pos:position pos:line="54" pos:column="52"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="54" pos:column="54">7<pos:position pos:line="54" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="56"/></argument_list></call> <operator pos:line="54" pos:column="57">==<pos:position pos:line="54" pos:column="59"/></operator> <literal type="number" pos:line="54" pos:column="60">0<pos:position pos:line="54" pos:column="61"/></literal></expr>)<pos:position pos:line="54" pos:column="62"/></condition><then pos:line="54" pos:column="62"> <block pos:line="54" pos:column="63">{
                <expr_stmt><expr><name><name pos:line="55" pos:column="17">cl<pos:position pos:line="55" pos:column="19"/></name><operator pos:line="55" pos:column="19">-&gt;<pos:position pos:line="55" pos:column="24"/></operator><name pos:line="55" pos:column="21">rotateCount<pos:position pos:line="55" pos:column="32"/></name></name> <operator pos:line="55" pos:column="33">=<pos:position pos:line="55" pos:column="34"/></operator> <call><name pos:line="55" pos:column="35">xatoi<pos:position pos:line="55" pos:column="40"/></name><argument_list pos:line="55" pos:column="40">(<argument><expr><name pos:line="55" pos:column="41">token<pos:position pos:line="55" pos:column="46"/></name> <operator pos:line="55" pos:column="47">+<pos:position pos:line="55" pos:column="48"/></operator> <literal type="number" pos:line="55" pos:column="49">7<pos:position pos:line="55" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="52"/></expr_stmt>
            }<pos:position pos:line="56" pos:column="14"/></block></then></if></elseif> <elseif pos:line="56" pos:column="15">else <if pos:line="56" pos:column="20">if <condition pos:line="56" pos:column="23">(<expr><call><name pos:line="56" pos:column="24">strncasecmp<pos:position pos:line="56" pos:column="35"/></name><argument_list pos:line="56" pos:column="35">(<argument><expr><name pos:line="56" pos:column="36">token<pos:position pos:line="56" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="43">"logformat="<pos:position pos:line="56" pos:column="55"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="56" pos:column="57">10<pos:position pos:line="56" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="60"/></argument_list></call> <operator pos:line="56" pos:column="61">==<pos:position pos:line="56" pos:column="63"/></operator> <literal type="number" pos:line="56" pos:column="64">0<pos:position pos:line="56" pos:column="65"/></literal></expr>)<pos:position pos:line="56" pos:column="66"/></condition><then pos:line="56" pos:column="66"> <block pos:line="56" pos:column="67">{
                <expr_stmt><expr><call><name pos:line="57" pos:column="17">setLogformat<pos:position pos:line="57" pos:column="29"/></name><argument_list pos:line="57" pos:column="29">(<argument><expr><name pos:line="57" pos:column="30">cl<pos:position pos:line="57" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="34">token<pos:position pos:line="57" pos:column="39"/></name><operator pos:line="57" pos:column="39">+<pos:position pos:line="57" pos:column="40"/></operator><literal type="number" pos:line="57" pos:column="40">10<pos:position pos:line="57" pos:column="42"/></literal></expr></argument>, <argument><expr><literal type="boolean" pos:line="57" pos:column="44">true<pos:position pos:line="57" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="50"/></expr_stmt>
            }<pos:position pos:line="58" pos:column="14"/></block></then></if></elseif> <elseif pos:line="58" pos:column="15">else <if pos:line="58" pos:column="20">if <condition pos:line="58" pos:column="23">(<expr><operator pos:line="58" pos:column="24">!<pos:position pos:line="58" pos:column="25"/></operator><call><name pos:line="58" pos:column="25">strchr<pos:position pos:line="58" pos:column="31"/></name><argument_list pos:line="58" pos:column="31">(<argument><expr><name pos:line="58" pos:column="32">token<pos:position pos:line="58" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="58" pos:column="39">'='<pos:position pos:line="58" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="58" pos:column="44"/></condition><then pos:line="58" pos:column="44"> <block pos:line="58" pos:column="45">{
                <comment type="line" pos:line="59" pos:column="17">// Do not pop the token; it must be an ACL name</comment>
                <break pos:line="60" pos:column="17">break;<pos:position pos:line="60" pos:column="23"/></break> <comment type="line" pos:line="60" pos:column="24">// done with name=value options, now to ACLs</comment>
            }<pos:position pos:line="61" pos:column="14"/></block></then></if></elseif> <else pos:line="61" pos:column="15">else <block pos:line="61" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="62" pos:column="17">debugs<pos:position pos:line="62" pos:column="23"/></name><argument_list pos:line="62" pos:column="23">(<argument><expr><literal type="number" pos:line="62" pos:column="24">3<pos:position pos:line="62" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="62" pos:column="27">DBG_CRITICAL<pos:position pos:line="62" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="41">"Unknown access_log option "<pos:position pos:line="62" pos:column="69"/></literal> <operator pos:line="62" pos:column="70">&lt;&lt;<pos:position pos:line="62" pos:column="78"/></operator> <name pos:line="62" pos:column="73">token<pos:position pos:line="62" pos:column="78"/></name></expr></argument>)<pos:position pos:line="62" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="80"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="63" pos:column="17">xfree<pos:position pos:line="63" pos:column="22"/></name><argument_list pos:line="63" pos:column="22">(<argument><expr><name><name pos:line="63" pos:column="23">cl<pos:position pos:line="63" pos:column="25"/></name><operator pos:line="63" pos:column="25">-&gt;<pos:position pos:line="63" pos:column="30"/></operator><name pos:line="63" pos:column="27">filename<pos:position pos:line="63" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="63" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="37"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="64" pos:column="17">xfree<pos:position pos:line="64" pos:column="22"/></name><argument_list pos:line="64" pos:column="22">(<argument><expr><name pos:line="64" pos:column="23">cl<pos:position pos:line="64" pos:column="25"/></name></expr></argument>)<pos:position pos:line="64" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="27"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="65" pos:column="17">self_destruct<pos:position pos:line="65" pos:column="30"/></name><argument_list pos:line="65" pos:column="30">()<pos:position pos:line="65" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="33"/></expr_stmt>
                <return pos:line="66" pos:column="17">return;<pos:position pos:line="66" pos:column="24"/></return>
            }<pos:position pos:line="67" pos:column="14"/></block></else></if>
            <comment type="line" pos:line="68" pos:column="13">// Pop the token, it was a valid "name=value" option</comment>
            <expr_stmt><expr><operator pos:line="69" pos:column="13">(<pos:position pos:line="69" pos:column="14"/></operator><name pos:line="69" pos:column="14">void<pos:position pos:line="69" pos:column="18"/></name><operator pos:line="69" pos:column="18">)<pos:position pos:line="69" pos:column="19"/></operator><call><name><name pos:line="69" pos:column="19">ConfigParser<pos:position pos:line="69" pos:column="31"/></name><operator pos:line="69" pos:column="31">::<pos:position pos:line="69" pos:column="33"/></operator><name pos:line="69" pos:column="33">NextToken<pos:position pos:line="69" pos:column="42"/></name></name><argument_list pos:line="69" pos:column="42">()<pos:position pos:line="69" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="45"/></expr_stmt>
            <comment type="line" pos:line="70" pos:column="13">// Get next with preview ConfigParser::NextToken call.</comment>
        }<pos:position pos:line="71" pos:column="10"/></block> while <condition pos:line="71" pos:column="17">(<expr><operator pos:line="71" pos:column="18">(<pos:position pos:line="71" pos:column="19"/></operator><name pos:line="71" pos:column="19">token<pos:position pos:line="71" pos:column="24"/></name> <operator pos:line="71" pos:column="25">=<pos:position pos:line="71" pos:column="26"/></operator> <call><name><name pos:line="71" pos:column="27">ConfigParser<pos:position pos:line="71" pos:column="39"/></name><operator pos:line="71" pos:column="39">::<pos:position pos:line="71" pos:column="41"/></operator><name pos:line="71" pos:column="41">PeekAtToken<pos:position pos:line="71" pos:column="52"/></name></name><argument_list pos:line="71" pos:column="52">()<pos:position pos:line="71" pos:column="54"/></argument_list></call><operator pos:line="71" pos:column="54">)<pos:position pos:line="71" pos:column="55"/></operator> <operator pos:line="71" pos:column="56">!=<pos:position pos:line="71" pos:column="58"/></operator> <name pos:line="71" pos:column="59">NULL<pos:position pos:line="71" pos:column="63"/></name></expr>)<pos:position pos:line="71" pos:column="64"/></condition>;<pos:position pos:line="71" pos:column="65"/></do>
    }<pos:position pos:line="72" pos:column="6"/></block></else></if>

    <comment type="line" pos:line="74" pos:column="5">// set format if it has not been specified explicitly</comment>
    <if pos:line="75" pos:column="5">if <condition pos:line="75" pos:column="8">(<expr><name><name pos:line="75" pos:column="9">cl<pos:position pos:line="75" pos:column="11"/></name><operator pos:line="75" pos:column="11">-&gt;<pos:position pos:line="75" pos:column="16"/></operator><name pos:line="75" pos:column="13">type<pos:position pos:line="75" pos:column="17"/></name></name> <operator pos:line="75" pos:column="18">==<pos:position pos:line="75" pos:column="20"/></operator> <name><name pos:line="75" pos:column="21">Log<pos:position pos:line="75" pos:column="24"/></name><operator pos:line="75" pos:column="24">::<pos:position pos:line="75" pos:column="26"/></operator><name pos:line="75" pos:column="26">Format<pos:position pos:line="75" pos:column="32"/></name><operator pos:line="75" pos:column="32">::<pos:position pos:line="75" pos:column="34"/></operator><name pos:line="75" pos:column="34">CLF_UNKNOWN<pos:position pos:line="75" pos:column="45"/></name></name></expr>)<pos:position pos:line="75" pos:column="46"/></condition><then pos:line="75" pos:column="46">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="76" pos:column="9">setLogformat<pos:position pos:line="76" pos:column="21"/></name><argument_list pos:line="76" pos:column="21">(<argument><expr><name pos:line="76" pos:column="22">cl<pos:position pos:line="76" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="26">"squid"<pos:position pos:line="76" pos:column="33"/></literal></expr></argument>, <argument><expr><literal type="boolean" pos:line="76" pos:column="35">true<pos:position pos:line="76" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="41"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="78" pos:column="5">aclParseAclList<pos:position pos:line="78" pos:column="20"/></name><argument_list pos:line="78" pos:column="20">(<argument><expr><name pos:line="78" pos:column="21">LegacyParser<pos:position pos:line="78" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="78" pos:column="35">&amp;<pos:position pos:line="78" pos:column="40"/></operator><name><name pos:line="78" pos:column="36">cl<pos:position pos:line="78" pos:column="38"/></name><operator pos:line="78" pos:column="38">-&gt;<pos:position pos:line="78" pos:column="43"/></operator><name pos:line="78" pos:column="40">aclList<pos:position pos:line="78" pos:column="47"/></name></name></expr></argument>, <argument><expr><name><name pos:line="78" pos:column="49">cl<pos:position pos:line="78" pos:column="51"/></name><operator pos:line="78" pos:column="51">-&gt;<pos:position pos:line="78" pos:column="56"/></operator><name pos:line="78" pos:column="53">filename<pos:position pos:line="78" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="78" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="63"/></expr_stmt>

    <while pos:line="80" pos:column="5">while <condition pos:line="80" pos:column="11">(<expr><operator pos:line="80" pos:column="12">*<pos:position pos:line="80" pos:column="13"/></operator><name pos:line="80" pos:column="13">logs<pos:position pos:line="80" pos:column="17"/></name></expr>)<pos:position pos:line="80" pos:column="18"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="81" pos:column="9">logs<pos:position pos:line="81" pos:column="13"/></name> <operator pos:line="81" pos:column="14">=<pos:position pos:line="81" pos:column="15"/></operator> <operator pos:line="81" pos:column="16">&amp;<pos:position pos:line="81" pos:column="21"/></operator><name><operator pos:line="81" pos:column="17">(<pos:position pos:line="81" pos:column="18"/></operator><operator pos:line="81" pos:column="18">*<pos:position pos:line="81" pos:column="19"/></operator><name pos:line="81" pos:column="19">logs<pos:position pos:line="81" pos:column="23"/></name><operator pos:line="81" pos:column="23">)<pos:position pos:line="81" pos:column="24"/></operator><operator pos:line="81" pos:column="24">-&gt;<pos:position pos:line="81" pos:column="29"/></operator><name pos:line="81" pos:column="26">next<pos:position pos:line="81" pos:column="30"/></name></name></expr>;<pos:position pos:line="81" pos:column="31"/></expr_stmt></block></while>

    <expr_stmt><expr><operator pos:line="83" pos:column="5">*<pos:position pos:line="83" pos:column="6"/></operator><name pos:line="83" pos:column="6">logs<pos:position pos:line="83" pos:column="10"/></name> <operator pos:line="83" pos:column="11">=<pos:position pos:line="83" pos:column="12"/></operator> <name pos:line="83" pos:column="13">cl<pos:position pos:line="83" pos:column="15"/></name></expr>;<pos:position pos:line="83" pos:column="16"/></expr_stmt>
}<pos:position pos:line="84" pos:column="2"/></block></function></unit>
