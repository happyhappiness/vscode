<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4074_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Icap<pos:position pos:line="1" pos:column="22"/></name><operator pos:line="1" pos:column="22">::<pos:position pos:line="1" pos:column="24"/></operator><name pos:line="1" pos:column="24">ModXact<pos:position pos:line="1" pos:column="31"/></name><operator pos:line="1" pos:column="31">::<pos:position pos:line="1" pos:column="33"/></operator><name pos:line="1" pos:column="33">prepEchoing<pos:position pos:line="1" pos:column="44"/></name></name><parameter_list pos:line="1" pos:column="44">()<pos:position pos:line="1" pos:column="46"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="3" pos:column="5">disableRepeats<pos:position pos:line="3" pos:column="19"/></name><argument_list pos:line="3" pos:column="19">(<argument><expr><literal type="string" pos:line="3" pos:column="20">"preparing to echo content"<pos:position pos:line="3" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">disableBypass<pos:position pos:line="4" pos:column="18"/></name><argument_list pos:line="4" pos:column="18">(<argument><expr><literal type="string" pos:line="4" pos:column="19">"preparing to echo content"<pos:position pos:line="4" pos:column="46"/></literal></expr></argument>, <argument><expr><literal type="boolean" pos:line="4" pos:column="48">true<pos:position pos:line="4" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">setOutcome<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">(<argument><expr><name pos:line="5" pos:column="16">xoEcho<pos:position pos:line="5" pos:column="22"/></name></expr></argument>)<pos:position pos:line="5" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="24"/></expr_stmt>

    <comment type="line" pos:line="7" pos:column="5">// We want to clone the HTTP message, but we do not want</comment>
    <comment type="line" pos:line="8" pos:column="5">// to copy some non-HTTP state parts that HttpMsg kids carry in them.</comment>
    <comment type="line" pos:line="9" pos:column="5">// Thus, we cannot use a smart pointer, copy constructor, or equivalent.</comment>
    <comment type="line" pos:line="10" pos:column="5">// Instead, we simply write the HTTP message and "clone" it by parsing.</comment>
    <comment type="line" pos:line="11" pos:column="5">// TODO: use HttpMsg::clone()!</comment>

    <decl_stmt><decl><type><name pos:line="13" pos:column="5">HttpMsg<pos:position pos:line="13" pos:column="12"/></name> <modifier pos:line="13" pos:column="13">*<pos:position pos:line="13" pos:column="14"/></modifier></type><name pos:line="13" pos:column="14">oldHead<pos:position pos:line="13" pos:column="21"/></name> <init pos:line="13" pos:column="22">= <expr><name><name pos:line="13" pos:column="24">virgin<pos:position pos:line="13" pos:column="30"/></name><operator pos:line="13" pos:column="30">.<pos:position pos:line="13" pos:column="31"/></operator><name pos:line="13" pos:column="31">header<pos:position pos:line="13" pos:column="37"/></name></name></expr></init></decl>;<pos:position pos:line="13" pos:column="38"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">debugs<pos:position pos:line="14" pos:column="11"/></name><argument_list pos:line="14" pos:column="11">(<argument><expr><literal type="number" pos:line="14" pos:column="12">93<pos:position pos:line="14" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="16">7<pos:position pos:line="14" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="19">HERE<pos:position pos:line="14" pos:column="23"/></name> <operator pos:line="14" pos:column="24">&lt;&lt;<pos:position pos:line="14" pos:column="32"/></operator> <literal type="string" pos:line="14" pos:column="27">"cloning virgin message "<pos:position pos:line="14" pos:column="52"/></literal> <operator pos:line="14" pos:column="53">&lt;&lt;<pos:position pos:line="14" pos:column="61"/></operator> <name pos:line="14" pos:column="56">oldHead<pos:position pos:line="14" pos:column="63"/></name></expr></argument>)<pos:position pos:line="14" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="65"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="16" pos:column="5">MemBuf<pos:position pos:line="16" pos:column="11"/></name></type> <name pos:line="16" pos:column="12">httpBuf<pos:position pos:line="16" pos:column="19"/></name></decl>;<pos:position pos:line="16" pos:column="20"/></decl_stmt>

    <comment type="line" pos:line="18" pos:column="5">// write the virgin message into a memory buffer</comment>
    <expr_stmt><expr><call><name><name pos:line="19" pos:column="5">httpBuf<pos:position pos:line="19" pos:column="12"/></name><operator pos:line="19" pos:column="12">.<pos:position pos:line="19" pos:column="13"/></operator><name pos:line="19" pos:column="13">init<pos:position pos:line="19" pos:column="17"/></name></name><argument_list pos:line="19" pos:column="17">()<pos:position pos:line="19" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">packHead<pos:position pos:line="20" pos:column="13"/></name><argument_list pos:line="20" pos:column="13">(<argument><expr><name pos:line="20" pos:column="14">httpBuf<pos:position pos:line="20" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="23">oldHead<pos:position pos:line="20" pos:column="30"/></name></expr></argument>)<pos:position pos:line="20" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="32"/></expr_stmt>

    <comment type="line" pos:line="22" pos:column="5">// allocate the adapted message and copy metainfo</comment>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">Must<pos:position pos:line="23" pos:column="9"/></name><argument_list pos:line="23" pos:column="9">(<argument><expr><operator pos:line="23" pos:column="10">!<pos:position pos:line="23" pos:column="11"/></operator><name><name pos:line="23" pos:column="11">adapted<pos:position pos:line="23" pos:column="18"/></name><operator pos:line="23" pos:column="18">.<pos:position pos:line="23" pos:column="19"/></operator><name pos:line="23" pos:column="19">header<pos:position pos:line="23" pos:column="25"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="27"/></expr_stmt>
    <block pos:line="24" pos:column="5">{
        <decl_stmt><decl><type><name><name pos:line="25" pos:column="9">HttpMsg<pos:position pos:line="25" pos:column="16"/></name><operator pos:line="25" pos:column="16">::<pos:position pos:line="25" pos:column="18"/></operator><name pos:line="25" pos:column="18">Pointer<pos:position pos:line="25" pos:column="25"/></name></name></type> <name pos:line="25" pos:column="26">newHead<pos:position pos:line="25" pos:column="33"/></name></decl>;<pos:position pos:line="25" pos:column="34"/></decl_stmt>
        <if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><cast type="dynamic" pos:line="26" pos:column="13">dynamic_cast<argument_list type="generic" pos:line="26" pos:column="25">&lt;<argument><expr><specifier pos:line="26" pos:column="26">const<pos:position pos:line="26" pos:column="31"/></specifier> <name pos:line="26" pos:column="32">HttpRequest<pos:position pos:line="26" pos:column="43"/></name><operator pos:line="26" pos:column="43">*<pos:position pos:line="26" pos:column="44"/></operator></expr></argument>&gt;<pos:position pos:line="26" pos:column="48"/></argument_list><argument_list pos:line="26" pos:column="45">(<argument><expr><name pos:line="26" pos:column="46">oldHead<pos:position pos:line="26" pos:column="53"/></name></expr></argument>)<pos:position pos:line="26" pos:column="54"/></argument_list></cast></expr>)<pos:position pos:line="26" pos:column="55"/></condition><then pos:line="26" pos:column="55"> <block pos:line="26" pos:column="56">{
            <expr_stmt><expr><name pos:line="27" pos:column="13">newHead<pos:position pos:line="27" pos:column="20"/></name> <operator pos:line="27" pos:column="21">=<pos:position pos:line="27" pos:column="22"/></operator> <operator pos:line="27" pos:column="23">new<pos:position pos:line="27" pos:column="26"/></operator> <name pos:line="27" pos:column="27">HttpRequest<pos:position pos:line="27" pos:column="38"/></name></expr>;<pos:position pos:line="27" pos:column="39"/></expr_stmt>
        }<pos:position pos:line="28" pos:column="10"/></block></then> <elseif pos:line="28" pos:column="11">else <if pos:line="28" pos:column="16">if <condition pos:line="28" pos:column="19">(<expr><cast type="dynamic" pos:line="28" pos:column="20">dynamic_cast<argument_list type="generic" pos:line="28" pos:column="32">&lt;<argument><expr><specifier pos:line="28" pos:column="33">const<pos:position pos:line="28" pos:column="38"/></specifier> <name pos:line="28" pos:column="39">HttpReply<pos:position pos:line="28" pos:column="48"/></name><operator pos:line="28" pos:column="48">*<pos:position pos:line="28" pos:column="49"/></operator></expr></argument>&gt;<pos:position pos:line="28" pos:column="53"/></argument_list><argument_list pos:line="28" pos:column="50">(<argument><expr><name pos:line="28" pos:column="51">oldHead<pos:position pos:line="28" pos:column="58"/></name></expr></argument>)<pos:position pos:line="28" pos:column="59"/></argument_list></cast></expr>)<pos:position pos:line="28" pos:column="60"/></condition><then pos:line="28" pos:column="60"> <block pos:line="28" pos:column="61">{
            <expr_stmt><expr><name pos:line="29" pos:column="13">newHead<pos:position pos:line="29" pos:column="20"/></name> <operator pos:line="29" pos:column="21">=<pos:position pos:line="29" pos:column="22"/></operator> <operator pos:line="29" pos:column="23">new<pos:position pos:line="29" pos:column="26"/></operator> <name pos:line="29" pos:column="27">HttpReply<pos:position pos:line="29" pos:column="36"/></name></expr>;<pos:position pos:line="29" pos:column="37"/></expr_stmt>
        }<pos:position pos:line="30" pos:column="10"/></block></then></if></elseif></if>
        <expr_stmt><expr><call><name pos:line="31" pos:column="9">Must<pos:position pos:line="31" pos:column="13"/></name><argument_list pos:line="31" pos:column="13">(<argument><expr><name pos:line="31" pos:column="14">newHead<pos:position pos:line="31" pos:column="21"/></name> <operator pos:line="31" pos:column="22">!=<pos:position pos:line="31" pos:column="24"/></operator> <name pos:line="31" pos:column="25">NULL<pos:position pos:line="31" pos:column="29"/></name></expr></argument>)<pos:position pos:line="31" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="31"/></expr_stmt>

        <expr_stmt><expr><call><name><name pos:line="33" pos:column="9">newHead<pos:position pos:line="33" pos:column="16"/></name><operator pos:line="33" pos:column="16">-&gt;<pos:position pos:line="33" pos:column="21"/></operator><name pos:line="33" pos:column="18">inheritProperties<pos:position pos:line="33" pos:column="35"/></name></name><argument_list pos:line="33" pos:column="35">(<argument><expr><name pos:line="33" pos:column="36">oldHead<pos:position pos:line="33" pos:column="43"/></name></expr></argument>)<pos:position pos:line="33" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="45"/></expr_stmt>

        <expr_stmt><expr><call><name><name pos:line="35" pos:column="9">adapted<pos:position pos:line="35" pos:column="16"/></name><operator pos:line="35" pos:column="16">.<pos:position pos:line="35" pos:column="17"/></operator><name pos:line="35" pos:column="17">setHeader<pos:position pos:line="35" pos:column="26"/></name></name><argument_list pos:line="35" pos:column="26">(<argument><expr><call><name><name pos:line="35" pos:column="27">newHead<pos:position pos:line="35" pos:column="34"/></name><operator pos:line="35" pos:column="34">.<pos:position pos:line="35" pos:column="35"/></operator><name pos:line="35" pos:column="35">getRaw<pos:position pos:line="35" pos:column="41"/></name></name><argument_list pos:line="35" pos:column="41">()<pos:position pos:line="35" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="35" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="36" pos:column="6"/></block>

    <comment type="line" pos:line="38" pos:column="5">// parse the buffer back</comment>
    <decl_stmt><decl><type><name><name pos:line="39" pos:column="5">Http<pos:position pos:line="39" pos:column="9"/></name><operator pos:line="39" pos:column="9">::<pos:position pos:line="39" pos:column="11"/></operator><name pos:line="39" pos:column="11">StatusCode<pos:position pos:line="39" pos:column="21"/></name></name></type> <name pos:line="39" pos:column="22">error<pos:position pos:line="39" pos:column="27"/></name> <init pos:line="39" pos:column="28">= <expr><name><name pos:line="39" pos:column="30">Http<pos:position pos:line="39" pos:column="34"/></name><operator pos:line="39" pos:column="34">::<pos:position pos:line="39" pos:column="36"/></operator><name pos:line="39" pos:column="36">scNone<pos:position pos:line="39" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="39" pos:column="43"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="41" pos:column="5">Must<pos:position pos:line="41" pos:column="9"/></name><argument_list pos:line="41" pos:column="9">(<argument><expr><call><name><name pos:line="41" pos:column="10">adapted<pos:position pos:line="41" pos:column="17"/></name><operator pos:line="41" pos:column="17">.<pos:position pos:line="41" pos:column="18"/></operator><name pos:line="41" pos:column="18">header<pos:position pos:line="41" pos:column="24"/></name><operator pos:line="41" pos:column="24">-&gt;<pos:position pos:line="41" pos:column="29"/></operator><name pos:line="41" pos:column="26">parse<pos:position pos:line="41" pos:column="31"/></name></name><argument_list pos:line="41" pos:column="31">(<argument><expr><operator pos:line="41" pos:column="32">&amp;<pos:position pos:line="41" pos:column="37"/></operator><name pos:line="41" pos:column="33">httpBuf<pos:position pos:line="41" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="41" pos:column="42">true<pos:position pos:line="41" pos:column="46"/></literal></expr></argument>, <argument><expr><operator pos:line="41" pos:column="48">&amp;<pos:position pos:line="41" pos:column="53"/></operator><name pos:line="41" pos:column="49">error<pos:position pos:line="41" pos:column="54"/></name></expr></argument>)<pos:position pos:line="41" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="41" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="57"/></expr_stmt>

    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<decl><type><name pos:line="43" pos:column="9">HttpRequest<pos:position pos:line="43" pos:column="20"/></name> <modifier pos:line="43" pos:column="21">*<pos:position pos:line="43" pos:column="22"/></modifier></type><name pos:line="43" pos:column="22">r<pos:position pos:line="43" pos:column="23"/></name> <init pos:line="43" pos:column="24">= <expr><cast type="dynamic" pos:line="43" pos:column="26">dynamic_cast<argument_list type="generic" pos:line="43" pos:column="38">&lt;<argument><expr><name pos:line="43" pos:column="39">HttpRequest<pos:position pos:line="43" pos:column="50"/></name><operator pos:line="43" pos:column="50">*<pos:position pos:line="43" pos:column="51"/></operator></expr></argument>&gt;<pos:position pos:line="43" pos:column="55"/></argument_list><argument_list pos:line="43" pos:column="52">(<argument><expr><name><name pos:line="43" pos:column="53">adapted<pos:position pos:line="43" pos:column="60"/></name><operator pos:line="43" pos:column="60">.<pos:position pos:line="43" pos:column="61"/></operator><name pos:line="43" pos:column="61">header<pos:position pos:line="43" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="68"/></argument_list></cast></expr></init></decl>)<pos:position pos:line="43" pos:column="69"/></condition><then pos:line="43" pos:column="69">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="44" pos:column="9">urlCanonical<pos:position pos:line="44" pos:column="21"/></name><argument_list pos:line="44" pos:column="21">(<argument><expr><name pos:line="44" pos:column="22">r<pos:position pos:line="44" pos:column="23"/></name></expr></argument>)<pos:position pos:line="44" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="25"/></expr_stmt></block></then></if> <comment type="line" pos:line="44" pos:column="26">// parse does not set HttpRequest::canonical</comment>

    <expr_stmt><expr><call><name pos:line="46" pos:column="5">Must<pos:position pos:line="46" pos:column="9"/></name><argument_list pos:line="46" pos:column="9">(<argument><expr><name><name pos:line="46" pos:column="10">adapted<pos:position pos:line="46" pos:column="17"/></name><operator pos:line="46" pos:column="17">.<pos:position pos:line="46" pos:column="18"/></operator><name pos:line="46" pos:column="18">header<pos:position pos:line="46" pos:column="24"/></name><operator pos:line="46" pos:column="24">-&gt;<pos:position pos:line="46" pos:column="29"/></operator><name pos:line="46" pos:column="26">hdr_sz<pos:position pos:line="46" pos:column="32"/></name></name> <operator pos:line="46" pos:column="33">==<pos:position pos:line="46" pos:column="35"/></operator> <call><name><name pos:line="46" pos:column="36">httpBuf<pos:position pos:line="46" pos:column="43"/></name><operator pos:line="46" pos:column="43">.<pos:position pos:line="46" pos:column="44"/></operator><name pos:line="46" pos:column="44">contentSize<pos:position pos:line="46" pos:column="55"/></name></name><argument_list pos:line="46" pos:column="55">()<pos:position pos:line="46" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="46" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="59"/></expr_stmt> <comment type="line" pos:line="46" pos:column="60">// no leftovers</comment>

    <expr_stmt><expr><call><name><name pos:line="48" pos:column="5">httpBuf<pos:position pos:line="48" pos:column="12"/></name><operator pos:line="48" pos:column="12">.<pos:position pos:line="48" pos:column="13"/></operator><name pos:line="48" pos:column="13">clean<pos:position pos:line="48" pos:column="18"/></name></name><argument_list pos:line="48" pos:column="18">()<pos:position pos:line="48" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="21"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="50" pos:column="5">debugs<pos:position pos:line="50" pos:column="11"/></name><argument_list pos:line="50" pos:column="11">(<argument><expr><literal type="number" pos:line="50" pos:column="12">93<pos:position pos:line="50" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="50" pos:column="16">7<pos:position pos:line="50" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="50" pos:column="19">HERE<pos:position pos:line="50" pos:column="23"/></name> <operator pos:line="50" pos:column="24">&lt;&lt;<pos:position pos:line="50" pos:column="32"/></operator> <literal type="string" pos:line="50" pos:column="27">"cloned virgin message "<pos:position pos:line="50" pos:column="51"/></literal> <operator pos:line="50" pos:column="52">&lt;&lt;<pos:position pos:line="50" pos:column="60"/></operator> <name pos:line="50" pos:column="55">oldHead<pos:position pos:line="50" pos:column="62"/></name> <operator pos:line="50" pos:column="63">&lt;&lt;<pos:position pos:line="50" pos:column="71"/></operator> <literal type="string" pos:line="50" pos:column="66">" to "<pos:position pos:line="50" pos:column="72"/></literal> <operator pos:line="50" pos:column="73">&lt;&lt;<pos:position pos:line="50" pos:column="81"/></operator>
           <name><name pos:line="51" pos:column="12">adapted<pos:position pos:line="51" pos:column="19"/></name><operator pos:line="51" pos:column="19">.<pos:position pos:line="51" pos:column="20"/></operator><name pos:line="51" pos:column="20">header<pos:position pos:line="51" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="28"/></expr_stmt>

    <comment type="line" pos:line="53" pos:column="5">// setup adapted body pipe if needed</comment>
    <if pos:line="54" pos:column="5">if <condition pos:line="54" pos:column="8">(<expr><name><name pos:line="54" pos:column="9">oldHead<pos:position pos:line="54" pos:column="16"/></name><operator pos:line="54" pos:column="16">-&gt;<pos:position pos:line="54" pos:column="21"/></operator><name pos:line="54" pos:column="18">body_pipe<pos:position pos:line="54" pos:column="27"/></name></name> <operator pos:line="54" pos:column="28">!=<pos:position pos:line="54" pos:column="30"/></operator> <name pos:line="54" pos:column="31">NULL<pos:position pos:line="54" pos:column="35"/></name></expr>)<pos:position pos:line="54" pos:column="36"/></condition><then pos:line="54" pos:column="36"> <block pos:line="54" pos:column="37">{
        <expr_stmt><expr><call><name pos:line="55" pos:column="9">debugs<pos:position pos:line="55" pos:column="15"/></name><argument_list pos:line="55" pos:column="15">(<argument><expr><literal type="number" pos:line="55" pos:column="16">93<pos:position pos:line="55" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="55" pos:column="20">7<pos:position pos:line="55" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="55" pos:column="23">HERE<pos:position pos:line="55" pos:column="27"/></name> <operator pos:line="55" pos:column="28">&lt;&lt;<pos:position pos:line="55" pos:column="36"/></operator> <literal type="string" pos:line="55" pos:column="31">"will echo virgin body from "<pos:position pos:line="55" pos:column="60"/></literal> <operator pos:line="55" pos:column="61">&lt;&lt;<pos:position pos:line="55" pos:column="69"/></operator>
               <name><name pos:line="56" pos:column="16">oldHead<pos:position pos:line="56" pos:column="23"/></name><operator pos:line="56" pos:column="23">-&gt;<pos:position pos:line="56" pos:column="28"/></operator><name pos:line="56" pos:column="25">body_pipe<pos:position pos:line="56" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="36"/></expr_stmt>
        <if pos:line="57" pos:column="9">if <condition pos:line="57" pos:column="12">(<expr><operator pos:line="57" pos:column="13">!<pos:position pos:line="57" pos:column="14"/></operator><call><name><name pos:line="57" pos:column="14">virginBodySending<pos:position pos:line="57" pos:column="31"/></name><operator pos:line="57" pos:column="31">.<pos:position pos:line="57" pos:column="32"/></operator><name pos:line="57" pos:column="32">active<pos:position pos:line="57" pos:column="38"/></name></name><argument_list pos:line="57" pos:column="38">()<pos:position pos:line="57" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="57" pos:column="41"/></condition><then pos:line="57" pos:column="41">
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="58" pos:column="13">virginBodySending<pos:position pos:line="58" pos:column="30"/></name><operator pos:line="58" pos:column="30">.<pos:position pos:line="58" pos:column="31"/></operator><name pos:line="58" pos:column="31">plan<pos:position pos:line="58" pos:column="35"/></name></name><argument_list pos:line="58" pos:column="35">()<pos:position pos:line="58" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="38"/></expr_stmt></block></then></if> <comment type="line" pos:line="58" pos:column="39">// will throw if not possible</comment>
        <expr_stmt><expr><name><name pos:line="59" pos:column="9">state<pos:position pos:line="59" pos:column="14"/></name><operator pos:line="59" pos:column="14">.<pos:position pos:line="59" pos:column="15"/></operator><name pos:line="59" pos:column="15">sending<pos:position pos:line="59" pos:column="22"/></name></name> <operator pos:line="59" pos:column="23">=<pos:position pos:line="59" pos:column="24"/></operator> <name><name pos:line="59" pos:column="25">State<pos:position pos:line="59" pos:column="30"/></name><operator pos:line="59" pos:column="30">::<pos:position pos:line="59" pos:column="32"/></operator><name pos:line="59" pos:column="32">sendingVirgin<pos:position pos:line="59" pos:column="45"/></name></name></expr>;<pos:position pos:line="59" pos:column="46"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="60" pos:column="9">checkConsuming<pos:position pos:line="60" pos:column="23"/></name><argument_list pos:line="60" pos:column="23">()<pos:position pos:line="60" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="26"/></expr_stmt>

        <comment type="line" pos:line="62" pos:column="9">// TODO: optimize: is it possible to just use the oldHead pipe and</comment>
        <comment type="line" pos:line="63" pos:column="9">// remove ICAP from the loop? This echoing is probably a common case!</comment>
        <expr_stmt><expr><call><name pos:line="64" pos:column="9">makeAdaptedBodyPipe<pos:position pos:line="64" pos:column="28"/></name><argument_list pos:line="64" pos:column="28">(<argument><expr><literal type="string" pos:line="64" pos:column="29">"echoed virgin response"<pos:position pos:line="64" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="55"/></expr_stmt>
        <if pos:line="65" pos:column="9">if <condition pos:line="65" pos:column="12">(<expr><call><name><name pos:line="65" pos:column="13">oldHead<pos:position pos:line="65" pos:column="20"/></name><operator pos:line="65" pos:column="20">-&gt;<pos:position pos:line="65" pos:column="25"/></operator><name pos:line="65" pos:column="22">body_pipe<pos:position pos:line="65" pos:column="31"/></name><operator pos:line="65" pos:column="31">-&gt;<pos:position pos:line="65" pos:column="36"/></operator><name pos:line="65" pos:column="33">bodySizeKnown<pos:position pos:line="65" pos:column="46"/></name></name><argument_list pos:line="65" pos:column="46">()<pos:position pos:line="65" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="65" pos:column="49"/></condition><then pos:line="65" pos:column="49">
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="66" pos:column="13">adapted<pos:position pos:line="66" pos:column="20"/></name><operator pos:line="66" pos:column="20">.<pos:position pos:line="66" pos:column="21"/></operator><name pos:line="66" pos:column="21">body_pipe<pos:position pos:line="66" pos:column="30"/></name><operator pos:line="66" pos:column="30">-&gt;<pos:position pos:line="66" pos:column="35"/></operator><name pos:line="66" pos:column="32">setBodySize<pos:position pos:line="66" pos:column="43"/></name></name><argument_list pos:line="66" pos:column="43">(<argument><expr><call><name><name pos:line="66" pos:column="44">oldHead<pos:position pos:line="66" pos:column="51"/></name><operator pos:line="66" pos:column="51">-&gt;<pos:position pos:line="66" pos:column="56"/></operator><name pos:line="66" pos:column="53">body_pipe<pos:position pos:line="66" pos:column="62"/></name><operator pos:line="66" pos:column="62">-&gt;<pos:position pos:line="66" pos:column="67"/></operator><name pos:line="66" pos:column="64">bodySize<pos:position pos:line="66" pos:column="72"/></name></name><argument_list pos:line="66" pos:column="72">()<pos:position pos:line="66" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="66" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="76"/></expr_stmt></block></then></if>
        <expr_stmt><expr><call><name pos:line="67" pos:column="9">debugs<pos:position pos:line="67" pos:column="15"/></name><argument_list pos:line="67" pos:column="15">(<argument><expr><literal type="number" pos:line="67" pos:column="16">93<pos:position pos:line="67" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="67" pos:column="20">7<pos:position pos:line="67" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="67" pos:column="23">HERE<pos:position pos:line="67" pos:column="27"/></name> <operator pos:line="67" pos:column="28">&lt;&lt;<pos:position pos:line="67" pos:column="36"/></operator> <literal type="string" pos:line="67" pos:column="31">"will echo virgin body to "<pos:position pos:line="67" pos:column="58"/></literal> <operator pos:line="67" pos:column="59">&lt;&lt;<pos:position pos:line="67" pos:column="67"/></operator>
               <name><name pos:line="68" pos:column="16">adapted<pos:position pos:line="68" pos:column="23"/></name><operator pos:line="68" pos:column="23">.<pos:position pos:line="68" pos:column="24"/></operator><name pos:line="68" pos:column="24">body_pipe<pos:position pos:line="68" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="68" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="69" pos:column="6"/></block></then> <else pos:line="69" pos:column="7">else <block pos:line="69" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="70" pos:column="9">debugs<pos:position pos:line="70" pos:column="15"/></name><argument_list pos:line="70" pos:column="15">(<argument><expr><literal type="number" pos:line="70" pos:column="16">93<pos:position pos:line="70" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="70" pos:column="20">7<pos:position pos:line="70" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="70" pos:column="23">HERE<pos:position pos:line="70" pos:column="27"/></name> <operator pos:line="70" pos:column="28">&lt;&lt;<pos:position pos:line="70" pos:column="36"/></operator> <literal type="string" pos:line="70" pos:column="31">"no virgin body to echo"<pos:position pos:line="70" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="57"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="71" pos:column="9">stopSending<pos:position pos:line="71" pos:column="20"/></name><argument_list pos:line="71" pos:column="20">(<argument><expr><literal type="boolean" pos:line="71" pos:column="21">true<pos:position pos:line="71" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="72" pos:column="6"/></block></else></if>
}<pos:position pos:line="73" pos:column="2"/></block></function></unit>
