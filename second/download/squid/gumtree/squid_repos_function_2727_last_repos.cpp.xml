<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2727_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">MemStore<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">shouldCache<pos:position pos:line="2" pos:column="22"/></name></name><parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><name pos:line="2" pos:column="23">StoreEntry<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">&amp;<pos:position pos:line="2" pos:column="39"/></modifier></type><name pos:line="2" pos:column="35">e<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="37"/></parameter_list> <specifier pos:line="2" pos:column="38">const<pos:position pos:line="2" pos:column="43"/></specifier>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name><name pos:line="4" pos:column="9">e<pos:position pos:line="4" pos:column="10"/></name><operator pos:line="4" pos:column="10">.<pos:position pos:line="4" pos:column="11"/></operator><name pos:line="4" pos:column="11">mem_status<pos:position pos:line="4" pos:column="21"/></name></name> <operator pos:line="4" pos:column="22">==<pos:position pos:line="4" pos:column="24"/></operator> <name pos:line="4" pos:column="25">IN_MEMORY<pos:position pos:line="4" pos:column="34"/></name></expr>)<pos:position pos:line="4" pos:column="35"/></condition><then pos:line="4" pos:column="35"> <block pos:line="4" pos:column="36">{
        <expr_stmt><expr><call><name pos:line="5" pos:column="9">debugs<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">(<argument><expr><literal type="number" pos:line="5" pos:column="16">20<pos:position pos:line="5" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="20">5<pos:position pos:line="5" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="23">"already loaded from mem-cache: "<pos:position pos:line="5" pos:column="56"/></literal> <operator pos:line="5" pos:column="57">&lt;&lt;<pos:position pos:line="5" pos:column="65"/></operator> <name pos:line="5" pos:column="60">e<pos:position pos:line="5" pos:column="61"/></name></expr></argument>)<pos:position pos:line="5" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="63"/></expr_stmt>
        <return pos:line="6" pos:column="9">return <expr><literal type="boolean" pos:line="6" pos:column="16">false<pos:position pos:line="6" pos:column="21"/></literal></expr>;<pos:position pos:line="6" pos:column="22"/></return>
    }<pos:position pos:line="7" pos:column="6"/></block></then></if>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name><name pos:line="9" pos:column="9">e<pos:position pos:line="9" pos:column="10"/></name><operator pos:line="9" pos:column="10">.<pos:position pos:line="9" pos:column="11"/></operator><name pos:line="9" pos:column="11">mem_obj<pos:position pos:line="9" pos:column="18"/></name></name> <operator pos:line="9" pos:column="19">&amp;&amp;<pos:position pos:line="9" pos:column="29"/></operator> <name><name pos:line="9" pos:column="22">e<pos:position pos:line="9" pos:column="23"/></name><operator pos:line="9" pos:column="23">.<pos:position pos:line="9" pos:column="24"/></operator><name pos:line="9" pos:column="24">mem_obj<pos:position pos:line="9" pos:column="31"/></name><operator pos:line="9" pos:column="31">-&gt;<pos:position pos:line="9" pos:column="36"/></operator><name pos:line="9" pos:column="33">memCache<pos:position pos:line="9" pos:column="41"/></name><operator pos:line="9" pos:column="41">.<pos:position pos:line="9" pos:column="42"/></operator><name pos:line="9" pos:column="42">offset<pos:position pos:line="9" pos:column="48"/></name></name> <operator pos:line="9" pos:column="49">&gt;<pos:position pos:line="9" pos:column="53"/></operator> <literal type="number" pos:line="9" pos:column="51">0<pos:position pos:line="9" pos:column="52"/></literal></expr>)<pos:position pos:line="9" pos:column="53"/></condition><then pos:line="9" pos:column="53"> <block pos:line="9" pos:column="54">{
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">debugs<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><literal type="number" pos:line="10" pos:column="16">20<pos:position pos:line="10" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="20">5<pos:position pos:line="10" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="23">"already written to mem-cache: "<pos:position pos:line="10" pos:column="55"/></literal> <operator pos:line="10" pos:column="56">&lt;&lt;<pos:position pos:line="10" pos:column="64"/></operator> <name pos:line="10" pos:column="59">e<pos:position pos:line="10" pos:column="60"/></name></expr></argument>)<pos:position pos:line="10" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="62"/></expr_stmt>
        <return pos:line="11" pos:column="9">return <expr><literal type="boolean" pos:line="11" pos:column="16">false<pos:position pos:line="11" pos:column="21"/></literal></expr>;<pos:position pos:line="11" pos:column="22"/></return>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><operator pos:line="14" pos:column="9">!<pos:position pos:line="14" pos:column="10"/></operator><call><name><name pos:line="14" pos:column="10">e<pos:position pos:line="14" pos:column="11"/></name><operator pos:line="14" pos:column="11">.<pos:position pos:line="14" pos:column="12"/></operator><name pos:line="14" pos:column="12">memoryCachable<pos:position pos:line="14" pos:column="26"/></name></name><argument_list pos:line="14" pos:column="26">()<pos:position pos:line="14" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="29"/></condition><then pos:line="14" pos:column="29"> <block pos:line="14" pos:column="30">{
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">debugs<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><literal type="number" pos:line="15" pos:column="16">20<pos:position pos:line="15" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="20">7<pos:position pos:line="15" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="23">HERE<pos:position pos:line="15" pos:column="27"/></name> <operator pos:line="15" pos:column="28">&lt;&lt;<pos:position pos:line="15" pos:column="36"/></operator> <literal type="string" pos:line="15" pos:column="31">"Not memory cachable: "<pos:position pos:line="15" pos:column="54"/></literal> <operator pos:line="15" pos:column="55">&lt;&lt;<pos:position pos:line="15" pos:column="63"/></operator> <name pos:line="15" pos:column="58">e<pos:position pos:line="15" pos:column="59"/></name></expr></argument>)<pos:position pos:line="15" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="61"/></expr_stmt>
        <return pos:line="16" pos:column="9">return <expr><literal type="boolean" pos:line="16" pos:column="16">false<pos:position pos:line="16" pos:column="21"/></literal></expr>;<pos:position pos:line="16" pos:column="22"/></return> <comment type="line" pos:line="16" pos:column="23">// will not cache due to entry state or properties</comment>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="19" pos:column="5">assert<pos:position pos:line="19" pos:column="11"/></name><argument_list pos:line="19" pos:column="11">(<argument><expr><name><name pos:line="19" pos:column="12">e<pos:position pos:line="19" pos:column="13"/></name><operator pos:line="19" pos:column="13">.<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="14">mem_obj<pos:position pos:line="19" pos:column="21"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="23"/></expr_stmt>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><operator pos:line="21" pos:column="9">!<pos:position pos:line="21" pos:column="10"/></operator><call><name><name pos:line="21" pos:column="10">e<pos:position pos:line="21" pos:column="11"/></name><operator pos:line="21" pos:column="11">.<pos:position pos:line="21" pos:column="12"/></operator><name pos:line="21" pos:column="12">mem_obj<pos:position pos:line="21" pos:column="19"/></name><operator pos:line="21" pos:column="19">-&gt;<pos:position pos:line="21" pos:column="24"/></operator><name pos:line="21" pos:column="21">vary_headers<pos:position pos:line="21" pos:column="33"/></name><operator pos:line="21" pos:column="33">.<pos:position pos:line="21" pos:column="34"/></operator><name pos:line="21" pos:column="34">isEmpty<pos:position pos:line="21" pos:column="41"/></name></name><argument_list pos:line="21" pos:column="41">()<pos:position pos:line="21" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="44"/></condition><then pos:line="21" pos:column="44"> <block pos:line="21" pos:column="45">{
        <comment type="line" pos:line="22" pos:column="9">// XXX: We must store/load SerialisedMetaData to cache Vary in RAM</comment>
        <expr_stmt><expr><call><name pos:line="23" pos:column="9">debugs<pos:position pos:line="23" pos:column="15"/></name><argument_list pos:line="23" pos:column="15">(<argument><expr><literal type="number" pos:line="23" pos:column="16">20<pos:position pos:line="23" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="20">5<pos:position pos:line="23" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="23">"Vary not yet supported: "<pos:position pos:line="23" pos:column="49"/></literal> <operator pos:line="23" pos:column="50">&lt;&lt;<pos:position pos:line="23" pos:column="58"/></operator> <name><name pos:line="23" pos:column="53">e<pos:position pos:line="23" pos:column="54"/></name><operator pos:line="23" pos:column="54">.<pos:position pos:line="23" pos:column="55"/></operator><name pos:line="23" pos:column="55">mem_obj<pos:position pos:line="23" pos:column="62"/></name><operator pos:line="23" pos:column="62">-&gt;<pos:position pos:line="23" pos:column="67"/></operator><name pos:line="23" pos:column="64">vary_headers<pos:position pos:line="23" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="78"/></expr_stmt>
        <return pos:line="24" pos:column="9">return <expr><literal type="boolean" pos:line="24" pos:column="16">false<pos:position pos:line="24" pos:column="21"/></literal></expr>;<pos:position pos:line="24" pos:column="22"/></return>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><specifier pos:line="27" pos:column="5">const<pos:position pos:line="27" pos:column="10"/></specifier> <name pos:line="27" pos:column="11">int64_t<pos:position pos:line="27" pos:column="18"/></name></type> <name pos:line="27" pos:column="19">expectedSize<pos:position pos:line="27" pos:column="31"/></name> <init pos:line="27" pos:column="32">= <expr><call><name><name pos:line="27" pos:column="34">e<pos:position pos:line="27" pos:column="35"/></name><operator pos:line="27" pos:column="35">.<pos:position pos:line="27" pos:column="36"/></operator><name pos:line="27" pos:column="36">mem_obj<pos:position pos:line="27" pos:column="43"/></name><operator pos:line="27" pos:column="43">-&gt;<pos:position pos:line="27" pos:column="48"/></operator><name pos:line="27" pos:column="45">expectedReplySize<pos:position pos:line="27" pos:column="62"/></name></name><argument_list pos:line="27" pos:column="62">()<pos:position pos:line="27" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="27" pos:column="65"/></decl_stmt> <comment type="line" pos:line="27" pos:column="66">// may be &lt; 0</comment>
    <decl_stmt><decl><type><specifier pos:line="28" pos:column="5">const<pos:position pos:line="28" pos:column="10"/></specifier> <name pos:line="28" pos:column="11">int64_t<pos:position pos:line="28" pos:column="18"/></name></type> <name pos:line="28" pos:column="19">loadedSize<pos:position pos:line="28" pos:column="29"/></name> <init pos:line="28" pos:column="30">= <expr><call><name><name pos:line="28" pos:column="32">e<pos:position pos:line="28" pos:column="33"/></name><operator pos:line="28" pos:column="33">.<pos:position pos:line="28" pos:column="34"/></operator><name pos:line="28" pos:column="34">mem_obj<pos:position pos:line="28" pos:column="41"/></name><operator pos:line="28" pos:column="41">-&gt;<pos:position pos:line="28" pos:column="46"/></operator><name pos:line="28" pos:column="43">endOffset<pos:position pos:line="28" pos:column="52"/></name></name><argument_list pos:line="28" pos:column="52">()<pos:position pos:line="28" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="28" pos:column="55"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="29" pos:column="5">const<pos:position pos:line="29" pos:column="10"/></specifier> <name pos:line="29" pos:column="11">int64_t<pos:position pos:line="29" pos:column="18"/></name></type> <name pos:line="29" pos:column="19">ramSize<pos:position pos:line="29" pos:column="26"/></name> <init pos:line="29" pos:column="27">= <expr><call><name pos:line="29" pos:column="29">max<pos:position pos:line="29" pos:column="32"/></name><argument_list pos:line="29" pos:column="32">(<argument><expr><name pos:line="29" pos:column="33">loadedSize<pos:position pos:line="29" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="45">expectedSize<pos:position pos:line="29" pos:column="57"/></name></expr></argument>)<pos:position pos:line="29" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="29" pos:column="59"/></decl_stmt>
    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><name pos:line="30" pos:column="9">ramSize<pos:position pos:line="30" pos:column="16"/></name> <operator pos:line="30" pos:column="17">&gt;<pos:position pos:line="30" pos:column="21"/></operator> <call><name pos:line="30" pos:column="19">maxObjectSize<pos:position pos:line="30" pos:column="32"/></name><argument_list pos:line="30" pos:column="32">()<pos:position pos:line="30" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="35"/></condition><then pos:line="30" pos:column="35"> <block pos:line="30" pos:column="36">{
        <expr_stmt><expr><call><name pos:line="31" pos:column="9">debugs<pos:position pos:line="31" pos:column="15"/></name><argument_list pos:line="31" pos:column="15">(<argument><expr><literal type="number" pos:line="31" pos:column="16">20<pos:position pos:line="31" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="20">5<pos:position pos:line="31" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="23">HERE<pos:position pos:line="31" pos:column="27"/></name> <operator pos:line="31" pos:column="28">&lt;&lt;<pos:position pos:line="31" pos:column="36"/></operator> <literal type="string" pos:line="31" pos:column="31">"Too big max("<pos:position pos:line="31" pos:column="45"/></literal> <operator pos:line="31" pos:column="46">&lt;&lt;<pos:position pos:line="31" pos:column="54"/></operator>
               <name pos:line="32" pos:column="16">loadedSize<pos:position pos:line="32" pos:column="26"/></name> <operator pos:line="32" pos:column="27">&lt;&lt;<pos:position pos:line="32" pos:column="35"/></operator> <literal type="string" pos:line="32" pos:column="30">", "<pos:position pos:line="32" pos:column="34"/></literal> <operator pos:line="32" pos:column="35">&lt;&lt;<pos:position pos:line="32" pos:column="43"/></operator> <name pos:line="32" pos:column="38">expectedSize<pos:position pos:line="32" pos:column="50"/></name> <operator pos:line="32" pos:column="51">&lt;&lt;<pos:position pos:line="32" pos:column="59"/></operator> <literal type="string" pos:line="32" pos:column="54">"): "<pos:position pos:line="32" pos:column="59"/></literal> <operator pos:line="32" pos:column="60">&lt;&lt;<pos:position pos:line="32" pos:column="68"/></operator> <name pos:line="32" pos:column="63">e<pos:position pos:line="32" pos:column="64"/></name></expr></argument>)<pos:position pos:line="32" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="66"/></expr_stmt>
        <return pos:line="33" pos:column="9">return <expr><literal type="boolean" pos:line="33" pos:column="16">false<pos:position pos:line="33" pos:column="21"/></literal></expr>;<pos:position pos:line="33" pos:column="22"/></return> <comment type="line" pos:line="33" pos:column="23">// will not cache due to cachable entry size limits</comment>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>

    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><operator pos:line="36" pos:column="9">!<pos:position pos:line="36" pos:column="10"/></operator><call><name><name pos:line="36" pos:column="10">e<pos:position pos:line="36" pos:column="11"/></name><operator pos:line="36" pos:column="11">.<pos:position pos:line="36" pos:column="12"/></operator><name pos:line="36" pos:column="12">mem_obj<pos:position pos:line="36" pos:column="19"/></name><operator pos:line="36" pos:column="19">-&gt;<pos:position pos:line="36" pos:column="24"/></operator><name pos:line="36" pos:column="21">isContiguous<pos:position pos:line="36" pos:column="33"/></name></name><argument_list pos:line="36" pos:column="33">()<pos:position pos:line="36" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="36"/></condition><then pos:line="36" pos:column="36"> <block pos:line="36" pos:column="37">{
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">debugs<pos:position pos:line="37" pos:column="15"/></name><argument_list pos:line="37" pos:column="15">(<argument><expr><literal type="number" pos:line="37" pos:column="16">20<pos:position pos:line="37" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="20">5<pos:position pos:line="37" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="23">"not contiguous"<pos:position pos:line="37" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="41"/></expr_stmt>
        <return pos:line="38" pos:column="9">return <expr><literal type="boolean" pos:line="38" pos:column="16">false<pos:position pos:line="38" pos:column="21"/></literal></expr>;<pos:position pos:line="38" pos:column="22"/></return>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if>

    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><operator pos:line="41" pos:column="9">!<pos:position pos:line="41" pos:column="10"/></operator><name pos:line="41" pos:column="10">map<pos:position pos:line="41" pos:column="13"/></name></expr>)<pos:position pos:line="41" pos:column="14"/></condition><then pos:line="41" pos:column="14"> <block pos:line="41" pos:column="15">{
        <expr_stmt><expr><call><name pos:line="42" pos:column="9">debugs<pos:position pos:line="42" pos:column="15"/></name><argument_list pos:line="42" pos:column="15">(<argument><expr><literal type="number" pos:line="42" pos:column="16">20<pos:position pos:line="42" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="42" pos:column="20">5<pos:position pos:line="42" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="23">HERE<pos:position pos:line="42" pos:column="27"/></name> <operator pos:line="42" pos:column="28">&lt;&lt;<pos:position pos:line="42" pos:column="36"/></operator> <literal type="string" pos:line="42" pos:column="31">"No map to mem-cache "<pos:position pos:line="42" pos:column="53"/></literal> <operator pos:line="42" pos:column="54">&lt;&lt;<pos:position pos:line="42" pos:column="62"/></operator> <name pos:line="42" pos:column="57">e<pos:position pos:line="42" pos:column="58"/></name></expr></argument>)<pos:position pos:line="42" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="60"/></expr_stmt>
        <return pos:line="43" pos:column="9">return <expr><literal type="boolean" pos:line="43" pos:column="16">false<pos:position pos:line="43" pos:column="21"/></literal></expr>;<pos:position pos:line="43" pos:column="22"/></return>
    }<pos:position pos:line="44" pos:column="6"/></block></then></if>

    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><call><name pos:line="46" pos:column="9">EBIT_TEST<pos:position pos:line="46" pos:column="18"/></name><argument_list pos:line="46" pos:column="18">(<argument><expr><name><name pos:line="46" pos:column="19">e<pos:position pos:line="46" pos:column="20"/></name><operator pos:line="46" pos:column="20">.<pos:position pos:line="46" pos:column="21"/></operator><name pos:line="46" pos:column="21">flags<pos:position pos:line="46" pos:column="26"/></name></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="28">ENTRY_SPECIAL<pos:position pos:line="46" pos:column="41"/></name></expr></argument>)<pos:position pos:line="46" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="43"/></condition><then pos:line="46" pos:column="43"> <block pos:line="46" pos:column="44">{
        <expr_stmt><expr><call><name pos:line="47" pos:column="9">debugs<pos:position pos:line="47" pos:column="15"/></name><argument_list pos:line="47" pos:column="15">(<argument><expr><literal type="number" pos:line="47" pos:column="16">20<pos:position pos:line="47" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="20">5<pos:position pos:line="47" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="23">"Not mem-caching ENTRY_SPECIAL "<pos:position pos:line="47" pos:column="55"/></literal> <operator pos:line="47" pos:column="56">&lt;&lt;<pos:position pos:line="47" pos:column="64"/></operator> <name pos:line="47" pos:column="59">e<pos:position pos:line="47" pos:column="60"/></name></expr></argument>)<pos:position pos:line="47" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="62"/></expr_stmt>
        <return pos:line="48" pos:column="9">return <expr><literal type="boolean" pos:line="48" pos:column="16">false<pos:position pos:line="48" pos:column="21"/></literal></expr>;<pos:position pos:line="48" pos:column="22"/></return>
    }<pos:position pos:line="49" pos:column="6"/></block></then></if>

    <return pos:line="51" pos:column="5">return <expr><literal type="boolean" pos:line="51" pos:column="12">true<pos:position pos:line="51" pos:column="16"/></literal></expr>;<pos:position pos:line="51" pos:column="17"/></return>
}<pos:position pos:line="52" pos:column="2"/></block></function></unit>
