<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6288_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">squidaio_init<pos:position pos:line="2" pos:column="14"/></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><name pos:line="2" pos:column="15">void<pos:position pos:line="2" pos:column="19"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="20"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">i<pos:position pos:line="4" pos:column="10"/></name></decl>;<pos:position pos:line="4" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">squidaio_thread_t<pos:position pos:line="5" pos:column="22"/></name> <modifier pos:line="5" pos:column="23">*<pos:position pos:line="5" pos:column="24"/></modifier></type><name pos:line="5" pos:column="24">threadp<pos:position pos:line="5" pos:column="31"/></name></decl>;<pos:position pos:line="5" pos:column="32"/></decl_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name pos:line="7" pos:column="9">squidaio_initialised<pos:position pos:line="7" pos:column="29"/></name></expr>)<pos:position pos:line="7" pos:column="30"/></condition><then pos:line="7" pos:column="30">
        <block type="pseudo"><return pos:line="8" pos:column="9">return;<pos:position pos:line="8" pos:column="16"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="10" pos:column="5">pthread_attr_init<pos:position pos:line="10" pos:column="22"/></name><argument_list pos:line="10" pos:column="22">(<argument><expr><operator pos:line="10" pos:column="23">&amp;<pos:position pos:line="10" pos:column="28"/></operator><name pos:line="10" pos:column="24">globattr<pos:position pos:line="10" pos:column="32"/></name></expr></argument>)<pos:position pos:line="10" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="34"/></expr_stmt>

<cpp:if pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">if<pos:position pos:line="12" pos:column="4"/></cpp:directive> <expr><name pos:line="12" pos:column="5">HAVE_PTHREAD_ATTR_SETSCOPE<pos:position pos:line="12" pos:column="31"/></name></expr></cpp:if>

    <expr_stmt><expr><call><name pos:line="14" pos:column="5">pthread_attr_setscope<pos:position pos:line="14" pos:column="26"/></name><argument_list pos:line="14" pos:column="26">(<argument><expr><operator pos:line="14" pos:column="27">&amp;<pos:position pos:line="14" pos:column="32"/></operator><name pos:line="14" pos:column="28">globattr<pos:position pos:line="14" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="38">PTHREAD_SCOPE_SYSTEM<pos:position pos:line="14" pos:column="58"/></name></expr></argument>)<pos:position pos:line="14" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="60"/></expr_stmt>

<cpp:endif pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">endif<pos:position pos:line="16" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">if<pos:position pos:line="17" pos:column="4"/></cpp:directive> <expr><name pos:line="17" pos:column="5">HAVE_SCHED_H<pos:position pos:line="17" pos:column="17"/></name></expr></cpp:if>

    <expr_stmt><expr><name><name pos:line="19" pos:column="5">globsched<pos:position pos:line="19" pos:column="14"/></name><operator pos:line="19" pos:column="14">.<pos:position pos:line="19" pos:column="15"/></operator><name pos:line="19" pos:column="15">sched_priority<pos:position pos:line="19" pos:column="29"/></name></name> <operator pos:line="19" pos:column="30">=<pos:position pos:line="19" pos:column="31"/></operator> <literal type="number" pos:line="19" pos:column="32">1<pos:position pos:line="19" pos:column="33"/></literal></expr>;<pos:position pos:line="19" pos:column="34"/></expr_stmt>

<cpp:endif pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">endif<pos:position pos:line="21" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><name pos:line="23" pos:column="5">main_thread<pos:position pos:line="23" pos:column="16"/></name> <operator pos:line="23" pos:column="17">=<pos:position pos:line="23" pos:column="18"/></operator> <call><name pos:line="23" pos:column="19">pthread_self<pos:position pos:line="23" pos:column="31"/></name><argument_list pos:line="23" pos:column="31">()<pos:position pos:line="23" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="34"/></expr_stmt>

<cpp:if pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">if<pos:position pos:line="25" pos:column="4"/></cpp:directive> <expr><name pos:line="25" pos:column="5">HAVE_SCHED_H<pos:position pos:line="25" pos:column="17"/></name> <operator pos:line="25" pos:column="18">&amp;&amp;<pos:position pos:line="25" pos:column="28"/></operator> <name pos:line="25" pos:column="21">HAVE_PTHREAD_SETSCHEDPARAM<pos:position pos:line="25" pos:column="47"/></name></expr></cpp:if>

    <expr_stmt><expr><call><name pos:line="27" pos:column="5">pthread_setschedparam<pos:position pos:line="27" pos:column="26"/></name><argument_list pos:line="27" pos:column="26">(<argument><expr><name pos:line="27" pos:column="27">main_thread<pos:position pos:line="27" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="40">SCHED_OTHER<pos:position pos:line="27" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="53">&amp;<pos:position pos:line="27" pos:column="58"/></operator><name pos:line="27" pos:column="54">globsched<pos:position pos:line="27" pos:column="63"/></name></expr></argument>)<pos:position pos:line="27" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="65"/></expr_stmt>

<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif<pos:position pos:line="29" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">if<pos:position pos:line="30" pos:column="4"/></cpp:directive> <expr><name pos:line="30" pos:column="5">HAVE_SCHED_H<pos:position pos:line="30" pos:column="17"/></name></expr></cpp:if>

    <expr_stmt><expr><name><name pos:line="32" pos:column="5">globsched<pos:position pos:line="32" pos:column="14"/></name><operator pos:line="32" pos:column="14">.<pos:position pos:line="32" pos:column="15"/></operator><name pos:line="32" pos:column="15">sched_priority<pos:position pos:line="32" pos:column="29"/></name></name> <operator pos:line="32" pos:column="30">=<pos:position pos:line="32" pos:column="31"/></operator> <literal type="number" pos:line="32" pos:column="32">2<pos:position pos:line="32" pos:column="33"/></literal></expr>;<pos:position pos:line="32" pos:column="34"/></expr_stmt>

<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif<pos:position pos:line="34" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">if<pos:position pos:line="35" pos:column="4"/></cpp:directive> <expr><name pos:line="35" pos:column="5">HAVE_SCHED_H<pos:position pos:line="35" pos:column="17"/></name> <operator pos:line="35" pos:column="18">&amp;&amp;<pos:position pos:line="35" pos:column="28"/></operator> <name pos:line="35" pos:column="21">HAVE_PTHREAD_ATTR_SETSCHEDPARAM<pos:position pos:line="35" pos:column="52"/></name></expr></cpp:if>

    <expr_stmt><expr><call><name pos:line="37" pos:column="5">pthread_attr_setschedparam<pos:position pos:line="37" pos:column="31"/></name><argument_list pos:line="37" pos:column="31">(<argument><expr><operator pos:line="37" pos:column="32">&amp;<pos:position pos:line="37" pos:column="37"/></operator><name pos:line="37" pos:column="33">globattr<pos:position pos:line="37" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="43">&amp;<pos:position pos:line="37" pos:column="48"/></operator><name pos:line="37" pos:column="44">globsched<pos:position pos:line="37" pos:column="53"/></name></expr></argument>)<pos:position pos:line="37" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="55"/></expr_stmt>

<cpp:endif pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">endif<pos:position pos:line="39" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="41" pos:column="5">/* Give each thread a smaller 256KB stack, should be more than sufficient */</comment>
    <expr_stmt><expr><call><name pos:line="42" pos:column="5">pthread_attr_setstacksize<pos:position pos:line="42" pos:column="30"/></name><argument_list pos:line="42" pos:column="30">(<argument><expr><operator pos:line="42" pos:column="31">&amp;<pos:position pos:line="42" pos:column="36"/></operator><name pos:line="42" pos:column="32">globattr<pos:position pos:line="42" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="42" pos:column="42">256<pos:position pos:line="42" pos:column="45"/></literal> <operator pos:line="42" pos:column="46">*<pos:position pos:line="42" pos:column="47"/></operator> <literal type="number" pos:line="42" pos:column="48">1024<pos:position pos:line="42" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="54"/></expr_stmt>

    <comment type="block" pos:line="44" pos:column="5">/* Initialize request queue */</comment>
    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><call><name pos:line="45" pos:column="9">pthread_mutex_init<pos:position pos:line="45" pos:column="27"/></name><argument_list pos:line="45" pos:column="27">(<argument><expr><operator pos:line="45" pos:column="28">&amp;<pos:position pos:line="45" pos:column="33"/></operator><operator pos:line="45" pos:column="29">(<pos:position pos:line="45" pos:column="30"/></operator><name><name pos:line="45" pos:column="30">request_queue<pos:position pos:line="45" pos:column="43"/></name><operator pos:line="45" pos:column="43">.<pos:position pos:line="45" pos:column="44"/></operator><name pos:line="45" pos:column="44">mutex<pos:position pos:line="45" pos:column="49"/></name></name><operator pos:line="45" pos:column="49">)<pos:position pos:line="45" pos:column="50"/></operator></expr></argument>, <argument><expr><name pos:line="45" pos:column="52">NULL<pos:position pos:line="45" pos:column="56"/></name></expr></argument>)<pos:position pos:line="45" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="58"/></condition><then pos:line="45" pos:column="58">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="46" pos:column="9">fatal<pos:position pos:line="46" pos:column="14"/></name><argument_list pos:line="46" pos:column="14">(<argument><expr><literal type="string" pos:line="46" pos:column="15">"Failed to create mutex"<pos:position pos:line="46" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="41"/></expr_stmt></block></then></if>

    <if pos:line="48" pos:column="5">if <condition pos:line="48" pos:column="8">(<expr><call><name pos:line="48" pos:column="9">pthread_cond_init<pos:position pos:line="48" pos:column="26"/></name><argument_list pos:line="48" pos:column="26">(<argument><expr><operator pos:line="48" pos:column="27">&amp;<pos:position pos:line="48" pos:column="32"/></operator><operator pos:line="48" pos:column="28">(<pos:position pos:line="48" pos:column="29"/></operator><name><name pos:line="48" pos:column="29">request_queue<pos:position pos:line="48" pos:column="42"/></name><operator pos:line="48" pos:column="42">.<pos:position pos:line="48" pos:column="43"/></operator><name pos:line="48" pos:column="43">cond<pos:position pos:line="48" pos:column="47"/></name></name><operator pos:line="48" pos:column="47">)<pos:position pos:line="48" pos:column="48"/></operator></expr></argument>, <argument><expr><name pos:line="48" pos:column="50">NULL<pos:position pos:line="48" pos:column="54"/></name></expr></argument>)<pos:position pos:line="48" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="56"/></condition><then pos:line="48" pos:column="56">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="49" pos:column="9">fatal<pos:position pos:line="49" pos:column="14"/></name><argument_list pos:line="49" pos:column="14">(<argument><expr><literal type="string" pos:line="49" pos:column="15">"Failed to create condition variable"<pos:position pos:line="49" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="54"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name><name pos:line="51" pos:column="5">request_queue<pos:position pos:line="51" pos:column="18"/></name><operator pos:line="51" pos:column="18">.<pos:position pos:line="51" pos:column="19"/></operator><name pos:line="51" pos:column="19">head<pos:position pos:line="51" pos:column="23"/></name></name> <operator pos:line="51" pos:column="24">=<pos:position pos:line="51" pos:column="25"/></operator> <name pos:line="51" pos:column="26">NULL<pos:position pos:line="51" pos:column="30"/></name></expr>;<pos:position pos:line="51" pos:column="31"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="53" pos:column="5">request_queue<pos:position pos:line="53" pos:column="18"/></name><operator pos:line="53" pos:column="18">.<pos:position pos:line="53" pos:column="19"/></operator><name pos:line="53" pos:column="19">tailp<pos:position pos:line="53" pos:column="24"/></name></name> <operator pos:line="53" pos:column="25">=<pos:position pos:line="53" pos:column="26"/></operator> <operator pos:line="53" pos:column="27">&amp;<pos:position pos:line="53" pos:column="32"/></operator><name><name pos:line="53" pos:column="28">request_queue<pos:position pos:line="53" pos:column="41"/></name><operator pos:line="53" pos:column="41">.<pos:position pos:line="53" pos:column="42"/></operator><name pos:line="53" pos:column="42">head<pos:position pos:line="53" pos:column="46"/></name></name></expr>;<pos:position pos:line="53" pos:column="47"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="55" pos:column="5">request_queue<pos:position pos:line="55" pos:column="18"/></name><operator pos:line="55" pos:column="18">.<pos:position pos:line="55" pos:column="19"/></operator><name pos:line="55" pos:column="19">requests<pos:position pos:line="55" pos:column="27"/></name></name> <operator pos:line="55" pos:column="28">=<pos:position pos:line="55" pos:column="29"/></operator> <literal type="number" pos:line="55" pos:column="30">0<pos:position pos:line="55" pos:column="31"/></literal></expr>;<pos:position pos:line="55" pos:column="32"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="57" pos:column="5">request_queue<pos:position pos:line="57" pos:column="18"/></name><operator pos:line="57" pos:column="18">.<pos:position pos:line="57" pos:column="19"/></operator><name pos:line="57" pos:column="19">blocked<pos:position pos:line="57" pos:column="26"/></name></name> <operator pos:line="57" pos:column="27">=<pos:position pos:line="57" pos:column="28"/></operator> <literal type="number" pos:line="57" pos:column="29">0<pos:position pos:line="57" pos:column="30"/></literal></expr>;<pos:position pos:line="57" pos:column="31"/></expr_stmt>

    <comment type="block" pos:line="59" pos:column="5">/* Initialize done queue */</comment>
    <if pos:line="60" pos:column="5">if <condition pos:line="60" pos:column="8">(<expr><call><name pos:line="60" pos:column="9">pthread_mutex_init<pos:position pos:line="60" pos:column="27"/></name><argument_list pos:line="60" pos:column="27">(<argument><expr><operator pos:line="60" pos:column="28">&amp;<pos:position pos:line="60" pos:column="33"/></operator><operator pos:line="60" pos:column="29">(<pos:position pos:line="60" pos:column="30"/></operator><name><name pos:line="60" pos:column="30">done_queue<pos:position pos:line="60" pos:column="40"/></name><operator pos:line="60" pos:column="40">.<pos:position pos:line="60" pos:column="41"/></operator><name pos:line="60" pos:column="41">mutex<pos:position pos:line="60" pos:column="46"/></name></name><operator pos:line="60" pos:column="46">)<pos:position pos:line="60" pos:column="47"/></operator></expr></argument>, <argument><expr><name pos:line="60" pos:column="49">NULL<pos:position pos:line="60" pos:column="53"/></name></expr></argument>)<pos:position pos:line="60" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="60" pos:column="55"/></condition><then pos:line="60" pos:column="55">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="61" pos:column="9">fatal<pos:position pos:line="61" pos:column="14"/></name><argument_list pos:line="61" pos:column="14">(<argument><expr><literal type="string" pos:line="61" pos:column="15">"Failed to create mutex"<pos:position pos:line="61" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="41"/></expr_stmt></block></then></if>

    <if pos:line="63" pos:column="5">if <condition pos:line="63" pos:column="8">(<expr><call><name pos:line="63" pos:column="9">pthread_cond_init<pos:position pos:line="63" pos:column="26"/></name><argument_list pos:line="63" pos:column="26">(<argument><expr><operator pos:line="63" pos:column="27">&amp;<pos:position pos:line="63" pos:column="32"/></operator><operator pos:line="63" pos:column="28">(<pos:position pos:line="63" pos:column="29"/></operator><name><name pos:line="63" pos:column="29">done_queue<pos:position pos:line="63" pos:column="39"/></name><operator pos:line="63" pos:column="39">.<pos:position pos:line="63" pos:column="40"/></operator><name pos:line="63" pos:column="40">cond<pos:position pos:line="63" pos:column="44"/></name></name><operator pos:line="63" pos:column="44">)<pos:position pos:line="63" pos:column="45"/></operator></expr></argument>, <argument><expr><name pos:line="63" pos:column="47">NULL<pos:position pos:line="63" pos:column="51"/></name></expr></argument>)<pos:position pos:line="63" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="63" pos:column="53"/></condition><then pos:line="63" pos:column="53">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="64" pos:column="9">fatal<pos:position pos:line="64" pos:column="14"/></name><argument_list pos:line="64" pos:column="14">(<argument><expr><literal type="string" pos:line="64" pos:column="15">"Failed to create condition variable"<pos:position pos:line="64" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="54"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name><name pos:line="66" pos:column="5">done_queue<pos:position pos:line="66" pos:column="15"/></name><operator pos:line="66" pos:column="15">.<pos:position pos:line="66" pos:column="16"/></operator><name pos:line="66" pos:column="16">head<pos:position pos:line="66" pos:column="20"/></name></name> <operator pos:line="66" pos:column="21">=<pos:position pos:line="66" pos:column="22"/></operator> <name pos:line="66" pos:column="23">NULL<pos:position pos:line="66" pos:column="27"/></name></expr>;<pos:position pos:line="66" pos:column="28"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="68" pos:column="5">done_queue<pos:position pos:line="68" pos:column="15"/></name><operator pos:line="68" pos:column="15">.<pos:position pos:line="68" pos:column="16"/></operator><name pos:line="68" pos:column="16">tailp<pos:position pos:line="68" pos:column="21"/></name></name> <operator pos:line="68" pos:column="22">=<pos:position pos:line="68" pos:column="23"/></operator> <operator pos:line="68" pos:column="24">&amp;<pos:position pos:line="68" pos:column="29"/></operator><name><name pos:line="68" pos:column="25">done_queue<pos:position pos:line="68" pos:column="35"/></name><operator pos:line="68" pos:column="35">.<pos:position pos:line="68" pos:column="36"/></operator><name pos:line="68" pos:column="36">head<pos:position pos:line="68" pos:column="40"/></name></name></expr>;<pos:position pos:line="68" pos:column="41"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="70" pos:column="5">done_queue<pos:position pos:line="70" pos:column="15"/></name><operator pos:line="70" pos:column="15">.<pos:position pos:line="70" pos:column="16"/></operator><name pos:line="70" pos:column="16">requests<pos:position pos:line="70" pos:column="24"/></name></name> <operator pos:line="70" pos:column="25">=<pos:position pos:line="70" pos:column="26"/></operator> <literal type="number" pos:line="70" pos:column="27">0<pos:position pos:line="70" pos:column="28"/></literal></expr>;<pos:position pos:line="70" pos:column="29"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="72" pos:column="5">done_queue<pos:position pos:line="72" pos:column="15"/></name><operator pos:line="72" pos:column="15">.<pos:position pos:line="72" pos:column="16"/></operator><name pos:line="72" pos:column="16">blocked<pos:position pos:line="72" pos:column="23"/></name></name> <operator pos:line="72" pos:column="24">=<pos:position pos:line="72" pos:column="25"/></operator> <literal type="number" pos:line="72" pos:column="26">0<pos:position pos:line="72" pos:column="27"/></literal></expr>;<pos:position pos:line="72" pos:column="28"/></expr_stmt>

    <comment type="line" pos:line="74" pos:column="5">// Initialize the thread I/O pipes before creating any threads</comment>
    <comment type="line" pos:line="75" pos:column="5">// see bug 3189 comment 5 about race conditions.</comment>
    <expr_stmt><expr><call><name><name pos:line="76" pos:column="5">CommIO<pos:position pos:line="76" pos:column="11"/></name><operator pos:line="76" pos:column="11">::<pos:position pos:line="76" pos:column="13"/></operator><name pos:line="76" pos:column="13">Initialize<pos:position pos:line="76" pos:column="23"/></name></name><argument_list pos:line="76" pos:column="23">()<pos:position pos:line="76" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="26"/></expr_stmt>

    <comment type="block" pos:line="78" pos:column="5">/* Create threads and get them to sit in their wait loop */</comment>
    <expr_stmt><expr><name pos:line="79" pos:column="5">squidaio_thread_pool<pos:position pos:line="79" pos:column="25"/></name> <operator pos:line="79" pos:column="26">=<pos:position pos:line="79" pos:column="27"/></operator> <call><name pos:line="79" pos:column="28">memPoolCreate<pos:position pos:line="79" pos:column="41"/></name><argument_list pos:line="79" pos:column="41">(<argument><expr><literal type="string" pos:line="79" pos:column="42">"aio_thread"<pos:position pos:line="79" pos:column="54"/></literal></expr></argument>, <argument><expr><sizeof pos:line="79" pos:column="56">sizeof<argument_list pos:line="79" pos:column="62">(<argument><expr><name pos:line="79" pos:column="63">squidaio_thread_t<pos:position pos:line="79" pos:column="80"/></name></expr></argument>)<pos:position pos:line="79" pos:column="81"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="79" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="83"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="81" pos:column="5">assert<pos:position pos:line="81" pos:column="11"/></name><argument_list pos:line="81" pos:column="11">(<argument><expr><name pos:line="81" pos:column="12">NUMTHREADS<pos:position pos:line="81" pos:column="22"/></name> <operator pos:line="81" pos:column="23">!=<pos:position pos:line="81" pos:column="25"/></operator> <literal type="number" pos:line="81" pos:column="26">0<pos:position pos:line="81" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="81" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="29"/></expr_stmt>

    <for pos:line="83" pos:column="5">for <control pos:line="83" pos:column="9">(<init><expr><name pos:line="83" pos:column="10">i<pos:position pos:line="83" pos:column="11"/></name> <operator pos:line="83" pos:column="12">=<pos:position pos:line="83" pos:column="13"/></operator> <literal type="number" pos:line="83" pos:column="14">0<pos:position pos:line="83" pos:column="15"/></literal></expr>;<pos:position pos:line="83" pos:column="16"/></init> <condition><expr><name pos:line="83" pos:column="17">i<pos:position pos:line="83" pos:column="18"/></name> <operator pos:line="83" pos:column="19">&lt;<pos:position pos:line="83" pos:column="23"/></operator> <name pos:line="83" pos:column="21">NUMTHREADS<pos:position pos:line="83" pos:column="31"/></name></expr>;<pos:position pos:line="83" pos:column="32"/></condition> <incr><expr><operator pos:line="83" pos:column="33">++<pos:position pos:line="83" pos:column="35"/></operator><name pos:line="83" pos:column="35">i<pos:position pos:line="83" pos:column="36"/></name></expr></incr>)<pos:position pos:line="83" pos:column="37"/></control> <block pos:line="83" pos:column="38">{
        <expr_stmt><expr><name pos:line="84" pos:column="9">threadp<pos:position pos:line="84" pos:column="16"/></name> <operator pos:line="84" pos:column="17">=<pos:position pos:line="84" pos:column="18"/></operator> <operator pos:line="84" pos:column="19">(<pos:position pos:line="84" pos:column="20"/></operator><name pos:line="84" pos:column="20">squidaio_thread_t<pos:position pos:line="84" pos:column="37"/></name> <operator pos:line="84" pos:column="38">*<pos:position pos:line="84" pos:column="39"/></operator><operator pos:line="84" pos:column="39">)<pos:position pos:line="84" pos:column="40"/></operator><call><name><name pos:line="84" pos:column="40">squidaio_thread_pool<pos:position pos:line="84" pos:column="60"/></name><operator pos:line="84" pos:column="60">-&gt;<pos:position pos:line="84" pos:column="65"/></operator><name pos:line="84" pos:column="62">alloc<pos:position pos:line="84" pos:column="67"/></name></name><argument_list pos:line="84" pos:column="67">()<pos:position pos:line="84" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="70"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="85" pos:column="9">threadp<pos:position pos:line="85" pos:column="16"/></name><operator pos:line="85" pos:column="16">-&gt;<pos:position pos:line="85" pos:column="21"/></operator><name pos:line="85" pos:column="18">status<pos:position pos:line="85" pos:column="24"/></name></name> <operator pos:line="85" pos:column="25">=<pos:position pos:line="85" pos:column="26"/></operator> <name pos:line="85" pos:column="27">_THREAD_STARTING<pos:position pos:line="85" pos:column="43"/></name></expr>;<pos:position pos:line="85" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="86" pos:column="9">threadp<pos:position pos:line="86" pos:column="16"/></name><operator pos:line="86" pos:column="16">-&gt;<pos:position pos:line="86" pos:column="21"/></operator><name pos:line="86" pos:column="18">current_req<pos:position pos:line="86" pos:column="29"/></name></name> <operator pos:line="86" pos:column="30">=<pos:position pos:line="86" pos:column="31"/></operator> <name pos:line="86" pos:column="32">NULL<pos:position pos:line="86" pos:column="36"/></name></expr>;<pos:position pos:line="86" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="87" pos:column="9">threadp<pos:position pos:line="87" pos:column="16"/></name><operator pos:line="87" pos:column="16">-&gt;<pos:position pos:line="87" pos:column="21"/></operator><name pos:line="87" pos:column="18">requests<pos:position pos:line="87" pos:column="26"/></name></name> <operator pos:line="87" pos:column="27">=<pos:position pos:line="87" pos:column="28"/></operator> <literal type="number" pos:line="87" pos:column="29">0<pos:position pos:line="87" pos:column="30"/></literal></expr>;<pos:position pos:line="87" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="88" pos:column="9">threadp<pos:position pos:line="88" pos:column="16"/></name><operator pos:line="88" pos:column="16">-&gt;<pos:position pos:line="88" pos:column="21"/></operator><name pos:line="88" pos:column="18">next<pos:position pos:line="88" pos:column="22"/></name></name> <operator pos:line="88" pos:column="23">=<pos:position pos:line="88" pos:column="24"/></operator> <name pos:line="88" pos:column="25">threads<pos:position pos:line="88" pos:column="32"/></name></expr>;<pos:position pos:line="88" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name pos:line="89" pos:column="9">threads<pos:position pos:line="89" pos:column="16"/></name> <operator pos:line="89" pos:column="17">=<pos:position pos:line="89" pos:column="18"/></operator> <name pos:line="89" pos:column="19">threadp<pos:position pos:line="89" pos:column="26"/></name></expr>;<pos:position pos:line="89" pos:column="27"/></expr_stmt>

        <if pos:line="91" pos:column="9">if <condition pos:line="91" pos:column="12">(<expr><call><name pos:line="91" pos:column="13">pthread_create<pos:position pos:line="91" pos:column="27"/></name><argument_list pos:line="91" pos:column="27">(<argument><expr><operator pos:line="91" pos:column="28">&amp;<pos:position pos:line="91" pos:column="33"/></operator><name><name pos:line="91" pos:column="29">threadp<pos:position pos:line="91" pos:column="36"/></name><operator pos:line="91" pos:column="36">-&gt;<pos:position pos:line="91" pos:column="41"/></operator><name pos:line="91" pos:column="38">thread<pos:position pos:line="91" pos:column="44"/></name></name></expr></argument>, <argument><expr><operator pos:line="91" pos:column="46">&amp;<pos:position pos:line="91" pos:column="51"/></operator><name pos:line="91" pos:column="47">globattr<pos:position pos:line="91" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="57">squidaio_thread_loop<pos:position pos:line="91" pos:column="77"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="79">threadp<pos:position pos:line="91" pos:column="86"/></name></expr></argument>)<pos:position pos:line="91" pos:column="87"/></argument_list></call></expr>)<pos:position pos:line="91" pos:column="88"/></condition><then pos:line="91" pos:column="88"> <block pos:line="91" pos:column="89">{
            <expr_stmt><expr><call><name pos:line="92" pos:column="13">fprintf<pos:position pos:line="92" pos:column="20"/></name><argument_list pos:line="92" pos:column="20">(<argument><expr><name pos:line="92" pos:column="21">stderr<pos:position pos:line="92" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="92" pos:column="29">"Thread creation failed\n"<pos:position pos:line="92" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="92" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="57"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="93" pos:column="13">threadp<pos:position pos:line="93" pos:column="20"/></name><operator pos:line="93" pos:column="20">-&gt;<pos:position pos:line="93" pos:column="25"/></operator><name pos:line="93" pos:column="22">status<pos:position pos:line="93" pos:column="28"/></name></name> <operator pos:line="93" pos:column="29">=<pos:position pos:line="93" pos:column="30"/></operator> <name pos:line="93" pos:column="31">_THREAD_FAILED<pos:position pos:line="93" pos:column="45"/></name></expr>;<pos:position pos:line="93" pos:column="46"/></expr_stmt>
            <continue pos:line="94" pos:column="13">continue;<pos:position pos:line="94" pos:column="22"/></continue>
        }<pos:position pos:line="95" pos:column="10"/></block></then></if>
    }<pos:position pos:line="96" pos:column="6"/></block></for>

    <comment type="block" pos:line="98" pos:column="5">/* Create request pool */</comment>
    <expr_stmt><expr><name pos:line="99" pos:column="5">squidaio_request_pool<pos:position pos:line="99" pos:column="26"/></name> <operator pos:line="99" pos:column="27">=<pos:position pos:line="99" pos:column="28"/></operator> <call><name pos:line="99" pos:column="29">memPoolCreate<pos:position pos:line="99" pos:column="42"/></name><argument_list pos:line="99" pos:column="42">(<argument><expr><literal type="string" pos:line="99" pos:column="43">"aio_request"<pos:position pos:line="99" pos:column="56"/></literal></expr></argument>, <argument><expr><sizeof pos:line="99" pos:column="58">sizeof<argument_list pos:line="99" pos:column="64">(<argument><expr><name pos:line="99" pos:column="65">squidaio_request_t<pos:position pos:line="99" pos:column="83"/></name></expr></argument>)<pos:position pos:line="99" pos:column="84"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="99" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="86"/></expr_stmt>

    <expr_stmt><expr><name pos:line="101" pos:column="5">squidaio_large_bufs<pos:position pos:line="101" pos:column="24"/></name> <operator pos:line="101" pos:column="25">=<pos:position pos:line="101" pos:column="26"/></operator> <call><name pos:line="101" pos:column="27">memPoolCreate<pos:position pos:line="101" pos:column="40"/></name><argument_list pos:line="101" pos:column="40">(<argument><expr><literal type="string" pos:line="101" pos:column="41">"squidaio_large_bufs"<pos:position pos:line="101" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="101" pos:column="64">AIO_LARGE_BUFS<pos:position pos:line="101" pos:column="78"/></name></expr></argument>)<pos:position pos:line="101" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="80"/></expr_stmt>

    <expr_stmt><expr><name pos:line="103" pos:column="5">squidaio_medium_bufs<pos:position pos:line="103" pos:column="25"/></name> <operator pos:line="103" pos:column="26">=<pos:position pos:line="103" pos:column="27"/></operator> <call><name pos:line="103" pos:column="28">memPoolCreate<pos:position pos:line="103" pos:column="41"/></name><argument_list pos:line="103" pos:column="41">(<argument><expr><literal type="string" pos:line="103" pos:column="42">"squidaio_medium_bufs"<pos:position pos:line="103" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="103" pos:column="66">AIO_MEDIUM_BUFS<pos:position pos:line="103" pos:column="81"/></name></expr></argument>)<pos:position pos:line="103" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="83"/></expr_stmt>

    <expr_stmt><expr><name pos:line="105" pos:column="5">squidaio_small_bufs<pos:position pos:line="105" pos:column="24"/></name> <operator pos:line="105" pos:column="25">=<pos:position pos:line="105" pos:column="26"/></operator> <call><name pos:line="105" pos:column="27">memPoolCreate<pos:position pos:line="105" pos:column="40"/></name><argument_list pos:line="105" pos:column="40">(<argument><expr><literal type="string" pos:line="105" pos:column="41">"squidaio_small_bufs"<pos:position pos:line="105" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="105" pos:column="64">AIO_SMALL_BUFS<pos:position pos:line="105" pos:column="78"/></name></expr></argument>)<pos:position pos:line="105" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="80"/></expr_stmt>

    <expr_stmt><expr><name pos:line="107" pos:column="5">squidaio_tiny_bufs<pos:position pos:line="107" pos:column="23"/></name> <operator pos:line="107" pos:column="24">=<pos:position pos:line="107" pos:column="25"/></operator> <call><name pos:line="107" pos:column="26">memPoolCreate<pos:position pos:line="107" pos:column="39"/></name><argument_list pos:line="107" pos:column="39">(<argument><expr><literal type="string" pos:line="107" pos:column="40">"squidaio_tiny_bufs"<pos:position pos:line="107" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="107" pos:column="62">AIO_TINY_BUFS<pos:position pos:line="107" pos:column="75"/></name></expr></argument>)<pos:position pos:line="107" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="77"/></expr_stmt>

    <expr_stmt><expr><name pos:line="109" pos:column="5">squidaio_micro_bufs<pos:position pos:line="109" pos:column="24"/></name> <operator pos:line="109" pos:column="25">=<pos:position pos:line="109" pos:column="26"/></operator> <call><name pos:line="109" pos:column="27">memPoolCreate<pos:position pos:line="109" pos:column="40"/></name><argument_list pos:line="109" pos:column="40">(<argument><expr><literal type="string" pos:line="109" pos:column="41">"squidaio_micro_bufs"<pos:position pos:line="109" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="109" pos:column="64">AIO_MICRO_BUFS<pos:position pos:line="109" pos:column="78"/></name></expr></argument>)<pos:position pos:line="109" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="80"/></expr_stmt>

    <expr_stmt><expr><name pos:line="111" pos:column="5">squidaio_initialised<pos:position pos:line="111" pos:column="25"/></name> <operator pos:line="111" pos:column="26">=<pos:position pos:line="111" pos:column="27"/></operator> <literal type="number" pos:line="111" pos:column="28">1<pos:position pos:line="111" pos:column="29"/></literal></expr>;<pos:position pos:line="111" pos:column="30"/></expr_stmt>
}<pos:position pos:line="112" pos:column="2"/></block></function></unit>
