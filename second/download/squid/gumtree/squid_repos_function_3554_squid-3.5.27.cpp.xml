<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3554_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ClientSocketContext<pos:position pos:line="2" pos:column="20"/></name><operator pos:line="2" pos:column="20">::<pos:position pos:line="2" pos:column="22"/></operator><name pos:line="2" pos:column="22">writeControlMsg<pos:position pos:line="2" pos:column="37"/></name></name><parameter_list pos:line="2" pos:column="37">(<parameter><decl><type><name pos:line="2" pos:column="38">HttpControlMsg<pos:position pos:line="2" pos:column="52"/></name> <modifier pos:line="2" pos:column="53">&amp;<pos:position pos:line="2" pos:column="58"/></modifier></type><name pos:line="2" pos:column="54">msg<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="58"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">HttpReply<pos:position pos:line="4" pos:column="14"/></name><operator pos:line="4" pos:column="14">::<pos:position pos:line="4" pos:column="16"/></operator><name pos:line="4" pos:column="16">Pointer<pos:position pos:line="4" pos:column="23"/></name></name></type> <name pos:line="4" pos:column="24">rep<pos:position pos:line="4" pos:column="27"/></name><argument_list pos:line="4" pos:column="27">(<argument><expr><name><name pos:line="4" pos:column="28">msg<pos:position pos:line="4" pos:column="31"/></name><operator pos:line="4" pos:column="31">.<pos:position pos:line="4" pos:column="32"/></operator><name pos:line="4" pos:column="32">reply<pos:position pos:line="4" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="4" pos:column="38"/></argument_list></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">Must<pos:position pos:line="5" pos:column="9"/></name><argument_list pos:line="5" pos:column="9">(<argument><expr><name pos:line="5" pos:column="10">rep<pos:position pos:line="5" pos:column="13"/></name> <operator pos:line="5" pos:column="14">!=<pos:position pos:line="5" pos:column="16"/></operator> <name pos:line="5" pos:column="17">NULL<pos:position pos:line="5" pos:column="21"/></name></expr></argument>)<pos:position pos:line="5" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="23"/></expr_stmt>

    <comment type="line" pos:line="7" pos:column="5">// remember the callback</comment>
    <expr_stmt><expr><name pos:line="8" pos:column="5">cbControlMsgSent<pos:position pos:line="8" pos:column="21"/></name> <operator pos:line="8" pos:column="22">=<pos:position pos:line="8" pos:column="23"/></operator> <name><name pos:line="8" pos:column="24">msg<pos:position pos:line="8" pos:column="27"/></name><operator pos:line="8" pos:column="27">.<pos:position pos:line="8" pos:column="28"/></operator><name pos:line="8" pos:column="28">cbSuccess<pos:position pos:line="8" pos:column="37"/></name></name></expr>;<pos:position pos:line="8" pos:column="38"/></expr_stmt>

    <decl_stmt><decl><type><name><name pos:line="10" pos:column="5">AsyncCall<pos:position pos:line="10" pos:column="14"/></name><operator pos:line="10" pos:column="14">::<pos:position pos:line="10" pos:column="16"/></operator><name pos:line="10" pos:column="16">Pointer<pos:position pos:line="10" pos:column="23"/></name></name></type> <name pos:line="10" pos:column="24">call<pos:position pos:line="10" pos:column="28"/></name> <init pos:line="10" pos:column="29">= <expr><call><name pos:line="10" pos:column="31">commCbCall<pos:position pos:line="10" pos:column="41"/></name><argument_list pos:line="10" pos:column="41">(<argument><expr><literal type="number" pos:line="10" pos:column="42">33<pos:position pos:line="10" pos:column="44"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="46">5<pos:position pos:line="10" pos:column="47"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="49">"ClientSocketContext::wroteControlMsg"<pos:position pos:line="10" pos:column="87"/></literal></expr></argument>,
                                         <argument><expr><call><name pos:line="11" pos:column="42">CommIoCbPtrFun<pos:position pos:line="11" pos:column="56"/></name><argument_list pos:line="11" pos:column="56">(<argument><expr><operator pos:line="11" pos:column="57">&amp;<pos:position pos:line="11" pos:column="62"/></operator><name pos:line="11" pos:column="58">WroteControlMsg<pos:position pos:line="11" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="75">this<pos:position pos:line="11" pos:column="79"/></name></expr></argument>)<pos:position pos:line="11" pos:column="80"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="81"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="82"/></decl_stmt>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><operator pos:line="13" pos:column="9">!<pos:position pos:line="13" pos:column="10"/></operator><call><name pos:line="13" pos:column="10">getConn<pos:position pos:line="13" pos:column="17"/></name><argument_list pos:line="13" pos:column="17">()<pos:position pos:line="13" pos:column="19"/></argument_list></call><operator pos:line="13" pos:column="19">-&gt;<pos:position pos:line="13" pos:column="24"/></operator><call><name pos:line="13" pos:column="21">writeControlMsgAndCall<pos:position pos:line="13" pos:column="43"/></name><argument_list pos:line="13" pos:column="43">(<argument><expr><name pos:line="13" pos:column="44">this<pos:position pos:line="13" pos:column="48"/></name></expr></argument>, <argument><expr><call><name><name pos:line="13" pos:column="50">rep<pos:position pos:line="13" pos:column="53"/></name><operator pos:line="13" pos:column="53">.<pos:position pos:line="13" pos:column="54"/></operator><name pos:line="13" pos:column="54">getRaw<pos:position pos:line="13" pos:column="60"/></name></name><argument_list pos:line="13" pos:column="60">()<pos:position pos:line="13" pos:column="62"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="13" pos:column="64">call<pos:position pos:line="13" pos:column="68"/></name></expr></argument>)<pos:position pos:line="13" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="70"/></condition><then pos:line="13" pos:column="70"> <block pos:line="13" pos:column="71">{
        <comment type="line" pos:line="14" pos:column="9">// but still inform the caller (so it may resume its operation)</comment>
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">doneWithControlMsg<pos:position pos:line="15" pos:column="27"/></name><argument_list pos:line="15" pos:column="27">()<pos:position pos:line="15" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
