<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3996_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Adaptation<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">Ecap<pos:position pos:line="2" pos:column="17"/></name><operator pos:line="2" pos:column="17">::<pos:position pos:line="2" pos:column="19"/></operator><name pos:line="2" pos:column="19">XactionRep<pos:position pos:line="2" pos:column="29"/></name><operator pos:line="2" pos:column="29">::<pos:position pos:line="2" pos:column="31"/></operator><name pos:line="2" pos:column="31">swanSong<pos:position pos:line="2" pos:column="39"/></name></name><parameter_list pos:line="2" pos:column="39">()<pos:position pos:line="2" pos:column="41"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// clear body_pipes, if any</comment>
    <comment type="line" pos:line="5" pos:column="5">// this code does not maintain proxying* and canAccessVb states; should it?</comment>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name pos:line="7" pos:column="9">theAnswerRep<pos:position pos:line="7" pos:column="21"/></name> <operator pos:line="7" pos:column="22">!=<pos:position pos:line="7" pos:column="24"/></operator> <name pos:line="7" pos:column="25">NULL<pos:position pos:line="7" pos:column="29"/></name></expr>)<pos:position pos:line="7" pos:column="30"/></condition><then pos:line="7" pos:column="30"> <block pos:line="7" pos:column="31">{
        <decl_stmt><decl><type><name><name pos:line="8" pos:column="9">BodyPipe<pos:position pos:line="8" pos:column="17"/></name><operator pos:line="8" pos:column="17">::<pos:position pos:line="8" pos:column="19"/></operator><name pos:line="8" pos:column="19">Pointer<pos:position pos:line="8" pos:column="26"/></name></name></type> <name pos:line="8" pos:column="27">body_pipe<pos:position pos:line="8" pos:column="36"/></name> <init pos:line="8" pos:column="37">= <expr><call><name pos:line="8" pos:column="39">answer<pos:position pos:line="8" pos:column="45"/></name><argument_list pos:line="8" pos:column="45">()<pos:position pos:line="8" pos:column="47"/></argument_list></call><operator pos:line="8" pos:column="47">.<pos:position pos:line="8" pos:column="48"/></operator><name pos:line="8" pos:column="48">body_pipe<pos:position pos:line="8" pos:column="57"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="58"/></decl_stmt>
        <if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">body_pipe<pos:position pos:line="9" pos:column="22"/></name> <operator pos:line="9" pos:column="23">!=<pos:position pos:line="9" pos:column="25"/></operator> <name pos:line="9" pos:column="26">NULL<pos:position pos:line="9" pos:column="30"/></name></expr>)<pos:position pos:line="9" pos:column="31"/></condition><then pos:line="9" pos:column="31"> <block pos:line="9" pos:column="32">{
            <expr_stmt><expr><call><name pos:line="10" pos:column="13">Must<pos:position pos:line="10" pos:column="17"/></name><argument_list pos:line="10" pos:column="17">(<argument><expr><call><name><name pos:line="10" pos:column="18">body_pipe<pos:position pos:line="10" pos:column="27"/></name><operator pos:line="10" pos:column="27">-&gt;<pos:position pos:line="10" pos:column="32"/></operator><name pos:line="10" pos:column="29">stillProducing<pos:position pos:line="10" pos:column="43"/></name></name><argument_list pos:line="10" pos:column="43">(<argument><expr><name pos:line="10" pos:column="44">this<pos:position pos:line="10" pos:column="48"/></name></expr></argument>)<pos:position pos:line="10" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="51"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="11" pos:column="13">stopProducingFor<pos:position pos:line="11" pos:column="29"/></name><argument_list pos:line="11" pos:column="29">(<argument><expr><name pos:line="11" pos:column="30">body_pipe<pos:position pos:line="11" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="11" pos:column="41">false<pos:position pos:line="11" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="48"/></expr_stmt>
        }<pos:position pos:line="12" pos:column="10"/></block></then></if>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name><name pos:line="15" pos:column="5">BodyPipe<pos:position pos:line="15" pos:column="13"/></name><operator pos:line="15" pos:column="13">::<pos:position pos:line="15" pos:column="15"/></operator><name pos:line="15" pos:column="15">Pointer<pos:position pos:line="15" pos:column="22"/></name></name> <modifier pos:line="15" pos:column="23">&amp;<pos:position pos:line="15" pos:column="28"/></modifier></type><name pos:line="15" pos:column="24">body_pipe<pos:position pos:line="15" pos:column="33"/></name> <init pos:line="15" pos:column="34">= <expr><call><name><name pos:line="15" pos:column="36">theVirginRep<pos:position pos:line="15" pos:column="48"/></name><operator pos:line="15" pos:column="48">.<pos:position pos:line="15" pos:column="49"/></operator><name pos:line="15" pos:column="49">raw<pos:position pos:line="15" pos:column="52"/></name></name><argument_list pos:line="15" pos:column="52">()<pos:position pos:line="15" pos:column="54"/></argument_list></call><operator pos:line="15" pos:column="54">.<pos:position pos:line="15" pos:column="55"/></operator><name pos:line="15" pos:column="55">body_pipe<pos:position pos:line="15" pos:column="64"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="65"/></decl_stmt>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name pos:line="16" pos:column="9">body_pipe<pos:position pos:line="16" pos:column="18"/></name> <operator pos:line="16" pos:column="19">!=<pos:position pos:line="16" pos:column="21"/></operator> <name pos:line="16" pos:column="22">NULL<pos:position pos:line="16" pos:column="26"/></name> <operator pos:line="16" pos:column="27">&amp;&amp;<pos:position pos:line="16" pos:column="37"/></operator> <call><name><name pos:line="16" pos:column="30">body_pipe<pos:position pos:line="16" pos:column="39"/></name><operator pos:line="16" pos:column="39">-&gt;<pos:position pos:line="16" pos:column="44"/></operator><name pos:line="16" pos:column="41">stillConsuming<pos:position pos:line="16" pos:column="55"/></name></name><argument_list pos:line="16" pos:column="55">(<argument><expr><name pos:line="16" pos:column="56">this<pos:position pos:line="16" pos:column="60"/></name></expr></argument>)<pos:position pos:line="16" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="62"/></condition><then pos:line="16" pos:column="62">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="9">stopConsumingFrom<pos:position pos:line="17" pos:column="26"/></name><argument_list pos:line="17" pos:column="26">(<argument><expr><name pos:line="17" pos:column="27">body_pipe<pos:position pos:line="17" pos:column="36"/></name></expr></argument>)<pos:position pos:line="17" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="38"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="19" pos:column="5">terminateMaster<pos:position pos:line="19" pos:column="20"/></name><argument_list pos:line="19" pos:column="20">()<pos:position pos:line="19" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="23"/></expr_stmt>

    <decl_stmt><decl><type><specifier pos:line="21" pos:column="5">const<pos:position pos:line="21" pos:column="10"/></specifier> <name pos:line="21" pos:column="11">HttpRequest<pos:position pos:line="21" pos:column="22"/></name> <modifier pos:line="21" pos:column="23">*<pos:position pos:line="21" pos:column="24"/></modifier></type><name pos:line="21" pos:column="24">request<pos:position pos:line="21" pos:column="31"/></name> <init pos:line="21" pos:column="32">= <expr><cast type="dynamic" pos:line="21" pos:column="34">dynamic_cast<argument_list type="generic" pos:line="21" pos:column="46">&lt;<argument><expr><specifier pos:line="21" pos:column="47">const<pos:position pos:line="21" pos:column="52"/></specifier> <name pos:line="21" pos:column="53">HttpRequest<pos:position pos:line="21" pos:column="64"/></name><operator pos:line="21" pos:column="64">*<pos:position pos:line="21" pos:column="65"/></operator></expr></argument>&gt;<pos:position pos:line="21" pos:column="69"/></argument_list><argument_list pos:line="21" pos:column="66">(<argument><expr><ternary><condition><expr><name pos:line="21" pos:column="67">theCauseRep<pos:position pos:line="21" pos:column="78"/></name></expr> ?<pos:position pos:line="21" pos:column="80"/></condition><then pos:line="21" pos:column="80">
                                 <expr><call><name><name pos:line="22" pos:column="34">theCauseRep<pos:position pos:line="22" pos:column="45"/></name><operator pos:line="22" pos:column="45">-&gt;<pos:position pos:line="22" pos:column="50"/></operator><name pos:line="22" pos:column="47">raw<pos:position pos:line="22" pos:column="50"/></name></name><argument_list pos:line="22" pos:column="50">()<pos:position pos:line="22" pos:column="52"/></argument_list></call><operator pos:line="22" pos:column="52">.<pos:position pos:line="22" pos:column="53"/></operator><name pos:line="22" pos:column="53">header<pos:position pos:line="22" pos:column="59"/></name></expr> <pos:position pos:line="22" pos:column="60"/></then><else pos:line="22" pos:column="60">: <expr><call><name><name pos:line="22" pos:column="62">theVirginRep<pos:position pos:line="22" pos:column="74"/></name><operator pos:line="22" pos:column="74">.<pos:position pos:line="22" pos:column="75"/></operator><name pos:line="22" pos:column="75">raw<pos:position pos:line="22" pos:column="78"/></name></name><argument_list pos:line="22" pos:column="78">()<pos:position pos:line="22" pos:column="80"/></argument_list></call><operator pos:line="22" pos:column="80">.<pos:position pos:line="22" pos:column="81"/></operator><name pos:line="22" pos:column="81">header<pos:position pos:line="22" pos:column="87"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="22" pos:column="88"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="22" pos:column="89"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">Must<pos:position pos:line="23" pos:column="9"/></name><argument_list pos:line="23" pos:column="9">(<argument><expr><name pos:line="23" pos:column="10">request<pos:position pos:line="23" pos:column="17"/></name></expr></argument>)<pos:position pos:line="23" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="19"/></expr_stmt>
    <decl_stmt><decl><type><name><name pos:line="24" pos:column="5">Adaptation<pos:position pos:line="24" pos:column="15"/></name><operator pos:line="24" pos:column="15">::<pos:position pos:line="24" pos:column="17"/></operator><name pos:line="24" pos:column="17">History<pos:position pos:line="24" pos:column="24"/></name><operator pos:line="24" pos:column="24">::<pos:position pos:line="24" pos:column="26"/></operator><name pos:line="24" pos:column="26">Pointer<pos:position pos:line="24" pos:column="33"/></name></name></type> <name pos:line="24" pos:column="34">ah<pos:position pos:line="24" pos:column="36"/></name> <init pos:line="24" pos:column="37">= <expr><call><name><name pos:line="24" pos:column="39">request<pos:position pos:line="24" pos:column="46"/></name><operator pos:line="24" pos:column="46">-&gt;<pos:position pos:line="24" pos:column="51"/></operator><name pos:line="24" pos:column="48">adaptLogHistory<pos:position pos:line="24" pos:column="63"/></name></name><argument_list pos:line="24" pos:column="63">()<pos:position pos:line="24" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="24" pos:column="66"/></decl_stmt>
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name pos:line="25" pos:column="9">ah<pos:position pos:line="25" pos:column="11"/></name> <operator pos:line="25" pos:column="12">!=<pos:position pos:line="25" pos:column="14"/></operator> <name pos:line="25" pos:column="15">NULL<pos:position pos:line="25" pos:column="19"/></name> <operator pos:line="25" pos:column="20">&amp;&amp;<pos:position pos:line="25" pos:column="30"/></operator> <name pos:line="25" pos:column="23">adaptHistoryId<pos:position pos:line="25" pos:column="37"/></name> <operator pos:line="25" pos:column="38">&gt;=<pos:position pos:line="25" pos:column="43"/></operator> <literal type="number" pos:line="25" pos:column="41">0<pos:position pos:line="25" pos:column="42"/></literal></expr>)<pos:position pos:line="25" pos:column="43"/></condition><then pos:line="25" pos:column="43">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="26" pos:column="9">ah<pos:position pos:line="26" pos:column="11"/></name><operator pos:line="26" pos:column="11">-&gt;<pos:position pos:line="26" pos:column="16"/></operator><name pos:line="26" pos:column="13">recordXactFinish<pos:position pos:line="26" pos:column="29"/></name></name><argument_list pos:line="26" pos:column="29">(<argument><expr><name pos:line="26" pos:column="30">adaptHistoryId<pos:position pos:line="26" pos:column="44"/></name></expr></argument>)<pos:position pos:line="26" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="46"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="28" pos:column="5">Adaptation<pos:position pos:line="28" pos:column="15"/></name><operator pos:line="28" pos:column="15">::<pos:position pos:line="28" pos:column="17"/></operator><name pos:line="28" pos:column="17">Initiate<pos:position pos:line="28" pos:column="25"/></name><operator pos:line="28" pos:column="25">::<pos:position pos:line="28" pos:column="27"/></operator><name pos:line="28" pos:column="27">swanSong<pos:position pos:line="28" pos:column="35"/></name></name><argument_list pos:line="28" pos:column="35">()<pos:position pos:line="28" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="38"/></expr_stmt>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
