<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_function_1155.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">read_reply<pos:position pos:line="2" pos:column="11"/></name><parameter_list pos:line="2" pos:column="11">(<parameter><decl><type><name pos:line="2" pos:column="12">int<pos:position pos:line="2" pos:column="15"/></name></type> <name pos:line="2" pos:column="16">s<pos:position pos:line="2" pos:column="17"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="19">cachemgr_request<pos:position pos:line="2" pos:column="35"/></name> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type> <name pos:line="2" pos:column="38">req<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="42"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name></type> <name><name pos:line="4" pos:column="10">buf<pos:position pos:line="4" pos:column="13"/></name><index pos:line="4" pos:column="13">[<expr><literal type="number" pos:line="4" pos:column="14">4<pos:position pos:line="4" pos:column="15"/></literal> <operator pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></operator> <literal type="number" pos:line="4" pos:column="18">1024<pos:position pos:line="4" pos:column="22"/></literal></expr>]<pos:position pos:line="4" pos:column="23"/></index></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
<cpp:if pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">if<pos:position pos:line="5" pos:column="4"/></cpp:directive> <expr><name pos:line="5" pos:column="5">_SQUID_WINDOWS_<pos:position pos:line="5" pos:column="20"/></name></expr></cpp:if>

    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">reply<pos:position pos:line="7" pos:column="14"/></name></decl>;<pos:position pos:line="7" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">char<pos:position pos:line="8" pos:column="9"/></name> <modifier pos:line="8" pos:column="10">*<pos:position pos:line="8" pos:column="11"/></modifier></type><name pos:line="8" pos:column="11">tmpfile<pos:position pos:line="8" pos:column="18"/></name> <init pos:line="8" pos:column="19">= <expr><call><name pos:line="8" pos:column="21">tempnam<pos:position pos:line="8" pos:column="28"/></name><argument_list pos:line="8" pos:column="28">(<argument><expr><name pos:line="8" pos:column="29">NULL<pos:position pos:line="8" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="35">"tmp0000"<pos:position pos:line="8" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="46"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">FILE<pos:position pos:line="9" pos:column="9"/></name> <modifier pos:line="9" pos:column="10">*<pos:position pos:line="9" pos:column="11"/></modifier></type><name pos:line="9" pos:column="11">fp<pos:position pos:line="9" pos:column="13"/></name> <init pos:line="9" pos:column="14">= <expr><call><name pos:line="9" pos:column="16">fopen<pos:position pos:line="9" pos:column="21"/></name><argument_list pos:line="9" pos:column="21">(<argument><expr><name pos:line="9" pos:column="22">tmpfile<pos:position pos:line="9" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="31">"w+"<pos:position pos:line="9" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="36"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="37"/></decl_stmt>
<cpp:else pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">else<pos:position pos:line="10" pos:column="6"/></cpp:directive></cpp:else>

    <decl_stmt><decl><type><name pos:line="12" pos:column="5">FILE<pos:position pos:line="12" pos:column="9"/></name> <modifier pos:line="12" pos:column="10">*<pos:position pos:line="12" pos:column="11"/></modifier></type><name pos:line="12" pos:column="11">fp<pos:position pos:line="12" pos:column="13"/></name> <init pos:line="12" pos:column="14">= <expr><call><name pos:line="12" pos:column="16">fdopen<pos:position pos:line="12" pos:column="22"/></name><argument_list pos:line="12" pos:column="22">(<argument><expr><name pos:line="12" pos:column="23">s<pos:position pos:line="12" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="26">"r"<pos:position pos:line="12" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="30"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="31"/></decl_stmt>
<cpp:endif pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">endif<pos:position pos:line="13" pos:column="7"/></cpp:directive></cpp:endif>
    <comment type="block" pos:line="14" pos:column="5">/* interpretation states */</comment>
    <enum pos:line="15" pos:column="5">enum <block pos:line="15" pos:column="10">{
        <decl><name pos:line="16" pos:column="9">isStatusLine<pos:position pos:line="16" pos:column="21"/></name></decl>, <decl><name pos:line="16" pos:column="23">isHeaders<pos:position pos:line="16" pos:column="32"/></name></decl>, <decl><name pos:line="16" pos:column="34">isActions<pos:position pos:line="16" pos:column="43"/></name></decl>, <decl><name pos:line="16" pos:column="45">isBodyStart<pos:position pos:line="16" pos:column="56"/></name></decl>, <decl><name pos:line="16" pos:column="58">isBody<pos:position pos:line="16" pos:column="64"/></name></decl>, <decl><name pos:line="16" pos:column="66">isForward<pos:position pos:line="16" pos:column="75"/></name></decl>, <decl><name pos:line="16" pos:column="77">isEof<pos:position pos:line="16" pos:column="82"/></name></decl>, <decl><name pos:line="16" pos:column="84">isForwardEof<pos:position pos:line="16" pos:column="96"/></name></decl>, <decl><name pos:line="16" pos:column="98">isSuccess<pos:position pos:line="16" pos:column="107"/></name></decl>, <decl><name pos:line="16" pos:column="109">isError<pos:position pos:line="16" pos:column="116"/></name></decl>
    }<pos:position pos:line="17" pos:column="6"/></block> <decl><name pos:line="17" pos:column="7">istate<pos:position pos:line="17" pos:column="13"/></name> <init pos:line="17" pos:column="14">= <expr><name pos:line="17" pos:column="16">isStatusLine<pos:position pos:line="17" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="17" pos:column="29"/></enum>
    <decl_stmt><decl><type><name pos:line="18" pos:column="5">int<pos:position pos:line="18" pos:column="8"/></name></type> <name pos:line="18" pos:column="9">parse_menu<pos:position pos:line="18" pos:column="19"/></name> <init pos:line="18" pos:column="20">= <expr><literal type="number" pos:line="18" pos:column="22">0<pos:position pos:line="18" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="18" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="19" pos:column="5">const<pos:position pos:line="19" pos:column="10"/></specifier> <name pos:line="19" pos:column="11">char<pos:position pos:line="19" pos:column="15"/></name> <modifier pos:line="19" pos:column="16">*<pos:position pos:line="19" pos:column="17"/></modifier></type><name pos:line="19" pos:column="17">action<pos:position pos:line="19" pos:column="23"/></name> <init pos:line="19" pos:column="24">= <expr><name><name pos:line="19" pos:column="26">req<pos:position pos:line="19" pos:column="29"/></name><operator pos:line="19" pos:column="29">-&gt;<pos:position pos:line="19" pos:column="34"/></operator><name pos:line="19" pos:column="31">action<pos:position pos:line="19" pos:column="37"/></name></name></expr></init></decl>;<pos:position pos:line="19" pos:column="38"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="20" pos:column="5">const<pos:position pos:line="20" pos:column="10"/></specifier> <name pos:line="20" pos:column="11">char<pos:position pos:line="20" pos:column="15"/></name> <modifier pos:line="20" pos:column="16">*<pos:position pos:line="20" pos:column="17"/></modifier></type><name pos:line="20" pos:column="17">statusStr<pos:position pos:line="20" pos:column="26"/></name> <init pos:line="20" pos:column="27">= <expr><name pos:line="20" pos:column="29">NULL<pos:position pos:line="20" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="20" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="21" pos:column="5">int<pos:position pos:line="21" pos:column="8"/></name></type> <name pos:line="21" pos:column="9">status<pos:position pos:line="21" pos:column="15"/></name> <init pos:line="21" pos:column="16">= <expr><operator pos:line="21" pos:column="18">-<pos:position pos:line="21" pos:column="19"/></operator><literal type="number" pos:line="21" pos:column="19">1<pos:position pos:line="21" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="21" pos:column="21"/></decl_stmt>

    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><literal type="number" pos:line="23" pos:column="9">0<pos:position pos:line="23" pos:column="10"/></literal> <operator pos:line="23" pos:column="11">==<pos:position pos:line="23" pos:column="13"/></operator> <call><name pos:line="23" pos:column="14">strlen<pos:position pos:line="23" pos:column="20"/></name><argument_list pos:line="23" pos:column="20">(<argument><expr><name><name pos:line="23" pos:column="21">req<pos:position pos:line="23" pos:column="24"/></name><operator pos:line="23" pos:column="24">-&gt;<pos:position pos:line="23" pos:column="29"/></operator><name pos:line="23" pos:column="26">action<pos:position pos:line="23" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="34"/></condition><then pos:line="23" pos:column="34">
        <block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="9">parse_menu<pos:position pos:line="24" pos:column="19"/></name> <operator pos:line="24" pos:column="20">=<pos:position pos:line="24" pos:column="21"/></operator> <literal type="number" pos:line="24" pos:column="22">1<pos:position pos:line="24" pos:column="23"/></literal></expr>;<pos:position pos:line="24" pos:column="24"/></expr_stmt></block></then>
    <elseif pos:line="25" pos:column="5">else <if pos:line="25" pos:column="10">if <condition pos:line="25" pos:column="13">(<expr><literal type="number" pos:line="25" pos:column="14">0<pos:position pos:line="25" pos:column="15"/></literal> <operator pos:line="25" pos:column="16">==<pos:position pos:line="25" pos:column="18"/></operator> <call><name pos:line="25" pos:column="19">strcasecmp<pos:position pos:line="25" pos:column="29"/></name><argument_list pos:line="25" pos:column="29">(<argument><expr><name><name pos:line="25" pos:column="30">req<pos:position pos:line="25" pos:column="33"/></name><operator pos:line="25" pos:column="33">-&gt;<pos:position pos:line="25" pos:column="38"/></operator><name pos:line="25" pos:column="35">action<pos:position pos:line="25" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="43">"menu"<pos:position pos:line="25" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="51"/></condition><then pos:line="25" pos:column="51">
        <block type="pseudo"><expr_stmt><expr><name pos:line="26" pos:column="9">parse_menu<pos:position pos:line="26" pos:column="19"/></name> <operator pos:line="26" pos:column="20">=<pos:position pos:line="26" pos:column="21"/></operator> <literal type="number" pos:line="26" pos:column="22">1<pos:position pos:line="26" pos:column="23"/></literal></expr>;<pos:position pos:line="26" pos:column="24"/></expr_stmt></block></then></if></elseif></if>

    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><name pos:line="28" pos:column="9">fp<pos:position pos:line="28" pos:column="11"/></name> <operator pos:line="28" pos:column="12">==<pos:position pos:line="28" pos:column="14"/></operator> <name pos:line="28" pos:column="15">NULL<pos:position pos:line="28" pos:column="19"/></name></expr>)<pos:position pos:line="28" pos:column="20"/></condition><then pos:line="28" pos:column="20"> <block pos:line="28" pos:column="21">{
<cpp:if pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">if<pos:position pos:line="29" pos:column="4"/></cpp:directive> <expr><name pos:line="29" pos:column="5">_SQUID_WINDOWS_<pos:position pos:line="29" pos:column="20"/></name></expr></cpp:if>
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">perror<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><name pos:line="30" pos:column="16">tmpfile<pos:position pos:line="30" pos:column="23"/></name></expr></argument>)<pos:position pos:line="30" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="31" pos:column="9">xfree<pos:position pos:line="31" pos:column="14"/></name><argument_list pos:line="31" pos:column="14">(<argument><expr><name pos:line="31" pos:column="15">tmpfile<pos:position pos:line="31" pos:column="22"/></name></expr></argument>)<pos:position pos:line="31" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="24"/></expr_stmt>
<cpp:else pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">else<pos:position pos:line="32" pos:column="6"/></cpp:directive></cpp:else>

        <expr_stmt><expr><call><name pos:line="34" pos:column="9">perror<pos:position pos:line="34" pos:column="15"/></name><argument_list pos:line="34" pos:column="15">(<argument><expr><literal type="string" pos:line="34" pos:column="16">"fdopen"<pos:position pos:line="34" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="26"/></expr_stmt>
<cpp:endif pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">endif<pos:position pos:line="35" pos:column="7"/></cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name pos:line="37" pos:column="9">close<pos:position pos:line="37" pos:column="14"/></name><argument_list pos:line="37" pos:column="14">(<argument><expr><name pos:line="37" pos:column="15">s<pos:position pos:line="37" pos:column="16"/></name></expr></argument>)<pos:position pos:line="37" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="18"/></expr_stmt>
        <return pos:line="38" pos:column="9">return <expr><literal type="number" pos:line="38" pos:column="16">1<pos:position pos:line="38" pos:column="17"/></literal></expr>;<pos:position pos:line="38" pos:column="18"/></return>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if>

<cpp:if pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">if<pos:position pos:line="41" pos:column="4"/></cpp:directive> <expr><name pos:line="41" pos:column="5">_SQUID_WINDOWS_<pos:position pos:line="41" pos:column="20"/></name></expr></cpp:if>

    <while pos:line="43" pos:column="5">while <condition pos:line="43" pos:column="11">(<expr><operator pos:line="43" pos:column="12">(<pos:position pos:line="43" pos:column="13"/></operator><name pos:line="43" pos:column="13">reply<pos:position pos:line="43" pos:column="18"/></name><operator pos:line="43" pos:column="18">=<pos:position pos:line="43" pos:column="19"/></operator><call><name pos:line="43" pos:column="19">recv<pos:position pos:line="43" pos:column="23"/></name><argument_list pos:line="43" pos:column="23">(<argument><expr><name pos:line="43" pos:column="24">s<pos:position pos:line="43" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="27">buf<pos:position pos:line="43" pos:column="30"/></name></expr></argument> , <argument><expr><sizeof pos:line="43" pos:column="33">sizeof<argument_list pos:line="43" pos:column="39">(<argument><expr><name pos:line="43" pos:column="40">buf<pos:position pos:line="43" pos:column="43"/></name></expr></argument>)<pos:position pos:line="43" pos:column="44"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="46">0<pos:position pos:line="43" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="48"/></argument_list></call><operator pos:line="43" pos:column="48">)<pos:position pos:line="43" pos:column="49"/></operator> <operator pos:line="43" pos:column="50">&gt;<pos:position pos:line="43" pos:column="54"/></operator> <literal type="number" pos:line="43" pos:column="52">0<pos:position pos:line="43" pos:column="53"/></literal></expr>)<pos:position pos:line="43" pos:column="54"/></condition>
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="44" pos:column="9">fwrite<pos:position pos:line="44" pos:column="15"/></name><argument_list pos:line="44" pos:column="15">(<argument><expr><name pos:line="44" pos:column="16">buf<pos:position pos:line="44" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="21">1<pos:position pos:line="44" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="44" pos:column="24">reply<pos:position pos:line="44" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="31">fp<pos:position pos:line="44" pos:column="33"/></name></expr></argument>)<pos:position pos:line="44" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="35"/></expr_stmt></block></while>

    <expr_stmt><expr><call><name pos:line="46" pos:column="5">rewind<pos:position pos:line="46" pos:column="11"/></name><argument_list pos:line="46" pos:column="11">(<argument><expr><name pos:line="46" pos:column="12">fp<pos:position pos:line="46" pos:column="14"/></name></expr></argument>)<pos:position pos:line="46" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="16"/></expr_stmt>

<cpp:endif pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">endif<pos:position pos:line="48" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="50" pos:column="5">if <condition pos:line="50" pos:column="8">(<expr><name pos:line="50" pos:column="9">parse_menu<pos:position pos:line="50" pos:column="19"/></name></expr>)<pos:position pos:line="50" pos:column="20"/></condition><then pos:line="50" pos:column="20">
        <block type="pseudo"><expr_stmt><expr><name pos:line="51" pos:column="9">action<pos:position pos:line="51" pos:column="15"/></name> <operator pos:line="51" pos:column="16">=<pos:position pos:line="51" pos:column="17"/></operator> <literal type="string" pos:line="51" pos:column="18">"menu"<pos:position pos:line="51" pos:column="24"/></literal></expr>;<pos:position pos:line="51" pos:column="25"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="53" pos:column="5">/* read reply interpreting one line at a time depending on state */</comment>
    <while pos:line="54" pos:column="5">while <condition pos:line="54" pos:column="11">(<expr><name pos:line="54" pos:column="12">istate<pos:position pos:line="54" pos:column="18"/></name> <operator pos:line="54" pos:column="19">&lt;<pos:position pos:line="54" pos:column="23"/></operator> <name pos:line="54" pos:column="21">isEof<pos:position pos:line="54" pos:column="26"/></name></expr>)<pos:position pos:line="54" pos:column="27"/></condition> <block pos:line="54" pos:column="28">{
        <if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><operator pos:line="55" pos:column="13">!<pos:position pos:line="55" pos:column="14"/></operator><call><name pos:line="55" pos:column="14">fgets<pos:position pos:line="55" pos:column="19"/></name><argument_list pos:line="55" pos:column="19">(<argument><expr><name pos:line="55" pos:column="20">buf<pos:position pos:line="55" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="55" pos:column="25">sizeof<argument_list pos:line="55" pos:column="31">(<argument><expr><name pos:line="55" pos:column="32">buf<pos:position pos:line="55" pos:column="35"/></name></expr></argument>)<pos:position pos:line="55" pos:column="36"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="55" pos:column="38">fp<pos:position pos:line="55" pos:column="40"/></name></expr></argument>)<pos:position pos:line="55" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="42"/></condition><then pos:line="55" pos:column="42">
            <block type="pseudo"><expr_stmt><expr><name pos:line="56" pos:column="13">istate<pos:position pos:line="56" pos:column="19"/></name> <operator pos:line="56" pos:column="20">=<pos:position pos:line="56" pos:column="21"/></operator> <ternary><condition><expr><name pos:line="56" pos:column="22">istate<pos:position pos:line="56" pos:column="28"/></name> <operator pos:line="56" pos:column="29">==<pos:position pos:line="56" pos:column="31"/></operator> <name pos:line="56" pos:column="32">isForward<pos:position pos:line="56" pos:column="41"/></name></expr> ?<pos:position pos:line="56" pos:column="43"/></condition><then pos:line="56" pos:column="43"> <expr><name pos:line="56" pos:column="44">isForwardEof<pos:position pos:line="56" pos:column="56"/></name></expr> <pos:position pos:line="56" pos:column="57"/></then><else pos:line="56" pos:column="57">: <expr><name pos:line="56" pos:column="59">isEof<pos:position pos:line="56" pos:column="64"/></name></expr></else></ternary></expr>;<pos:position pos:line="56" pos:column="65"/></expr_stmt></block></then></if>

        <switch pos:line="58" pos:column="9">switch <condition pos:line="58" pos:column="16">(<expr><name pos:line="58" pos:column="17">istate<pos:position pos:line="58" pos:column="23"/></name></expr>)<pos:position pos:line="58" pos:column="24"/></condition> <block pos:line="58" pos:column="25">{

        <case pos:line="60" pos:column="9">case <expr><name pos:line="60" pos:column="14">isStatusLine<pos:position pos:line="60" pos:column="26"/></name></expr>:<pos:position pos:line="60" pos:column="27"/></case>
            <comment type="block" pos:line="61" pos:column="13">/* get HTTP status */</comment>
            <comment type="block" pos:line="62" pos:column="13">/* uncomment the following if you want to debug headers */</comment>
            <comment type="block" pos:line="63" pos:column="13">/* fputs("\r\n\r\n", stdout); */</comment>
            <expr_stmt><expr><name pos:line="64" pos:column="13">status<pos:position pos:line="64" pos:column="19"/></name> <operator pos:line="64" pos:column="20">=<pos:position pos:line="64" pos:column="21"/></operator> <call><name pos:line="64" pos:column="22">parse_status_line<pos:position pos:line="64" pos:column="39"/></name><argument_list pos:line="64" pos:column="39">(<argument><expr><name pos:line="64" pos:column="40">buf<pos:position pos:line="64" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="64" pos:column="45">&amp;<pos:position pos:line="64" pos:column="50"/></operator><name pos:line="64" pos:column="46">statusStr<pos:position pos:line="64" pos:column="55"/></name></expr></argument>)<pos:position pos:line="64" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="57"/></expr_stmt>
            <expr_stmt><expr><name pos:line="65" pos:column="13">istate<pos:position pos:line="65" pos:column="19"/></name> <operator pos:line="65" pos:column="20">=<pos:position pos:line="65" pos:column="21"/></operator> <ternary><condition><expr><name pos:line="65" pos:column="22">status<pos:position pos:line="65" pos:column="28"/></name> <operator pos:line="65" pos:column="29">==<pos:position pos:line="65" pos:column="31"/></operator> <literal type="number" pos:line="65" pos:column="32">200<pos:position pos:line="65" pos:column="35"/></literal></expr> ?<pos:position pos:line="65" pos:column="37"/></condition><then pos:line="65" pos:column="37"> <expr><name pos:line="65" pos:column="38">isHeaders<pos:position pos:line="65" pos:column="47"/></name></expr> <pos:position pos:line="65" pos:column="48"/></then><else pos:line="65" pos:column="48">: <expr><name pos:line="65" pos:column="50">isForward<pos:position pos:line="65" pos:column="59"/></name></expr></else></ternary></expr>;<pos:position pos:line="65" pos:column="60"/></expr_stmt>
            <comment type="block" pos:line="66" pos:column="13">/* if cache asks for authentication, we have to reset our info */</comment>

            <if pos:line="68" pos:column="13">if <condition pos:line="68" pos:column="16">(<expr><name pos:line="68" pos:column="17">status<pos:position pos:line="68" pos:column="23"/></name> <operator pos:line="68" pos:column="24">==<pos:position pos:line="68" pos:column="26"/></operator> <literal type="number" pos:line="68" pos:column="27">401<pos:position pos:line="68" pos:column="30"/></literal> <operator pos:line="68" pos:column="31">||<pos:position pos:line="68" pos:column="33"/></operator> <name pos:line="68" pos:column="34">status<pos:position pos:line="68" pos:column="40"/></name> <operator pos:line="68" pos:column="41">==<pos:position pos:line="68" pos:column="43"/></operator> <literal type="number" pos:line="68" pos:column="44">407<pos:position pos:line="68" pos:column="47"/></literal></expr>)<pos:position pos:line="68" pos:column="48"/></condition><then pos:line="68" pos:column="48"> <block pos:line="68" pos:column="49">{
                <expr_stmt><expr><call><name pos:line="69" pos:column="17">reset_auth<pos:position pos:line="69" pos:column="27"/></name><argument_list pos:line="69" pos:column="27">(<argument><expr><name pos:line="69" pos:column="28">req<pos:position pos:line="69" pos:column="31"/></name></expr></argument>)<pos:position pos:line="69" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="33"/></expr_stmt>
                <expr_stmt><expr><name pos:line="70" pos:column="17">status<pos:position pos:line="70" pos:column="23"/></name> <operator pos:line="70" pos:column="24">=<pos:position pos:line="70" pos:column="25"/></operator> <literal type="number" pos:line="70" pos:column="26">403<pos:position pos:line="70" pos:column="29"/></literal></expr>;<pos:position pos:line="70" pos:column="30"/></expr_stmt>	<comment type="block" pos:line="70" pos:column="33">/* Forbiden, see comments in case isForward: */</comment>
            }<pos:position pos:line="71" pos:column="14"/></block></then></if>

            <comment type="block" pos:line="73" pos:column="13">/* this is a way to pass HTTP status to the Web server */</comment>
            <if pos:line="74" pos:column="13">if <condition pos:line="74" pos:column="16">(<expr><name pos:line="74" pos:column="17">statusStr<pos:position pos:line="74" pos:column="26"/></name></expr>)<pos:position pos:line="74" pos:column="27"/></condition><then pos:line="74" pos:column="27">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="75" pos:column="17">printf<pos:position pos:line="75" pos:column="23"/></name><argument_list pos:line="75" pos:column="23">(<argument><expr><literal type="string" pos:line="75" pos:column="24">"Status: %d %s"<pos:position pos:line="75" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="75" pos:column="41">status<pos:position pos:line="75" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="49">statusStr<pos:position pos:line="75" pos:column="58"/></name></expr></argument>)<pos:position pos:line="75" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="60"/></expr_stmt></block></then></if>	<comment type="block" pos:line="75" pos:column="65">/* statusStr has '\n' */</comment>

            <break pos:line="77" pos:column="13">break;<pos:position pos:line="77" pos:column="19"/></break>

        <case pos:line="79" pos:column="9">case <expr><name pos:line="79" pos:column="14">isHeaders<pos:position pos:line="79" pos:column="23"/></name></expr>:<pos:position pos:line="79" pos:column="24"/></case>
            <comment type="block" pos:line="80" pos:column="13">/* forward header field */</comment>
            <if pos:line="81" pos:column="13">if <condition pos:line="81" pos:column="16">(<expr><operator pos:line="81" pos:column="17">!<pos:position pos:line="81" pos:column="18"/></operator><call><name pos:line="81" pos:column="18">strcmp<pos:position pos:line="81" pos:column="24"/></name><argument_list pos:line="81" pos:column="24">(<argument><expr><name pos:line="81" pos:column="25">buf<pos:position pos:line="81" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="81" pos:column="30">"\r\n"<pos:position pos:line="81" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="81" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="81" pos:column="38"/></condition><then pos:line="81" pos:column="38"> <block pos:line="81" pos:column="39">{		<comment type="block" pos:line="81" pos:column="49">/* end of headers */</comment>
                <expr_stmt><expr><call><name pos:line="82" pos:column="17">fputs<pos:position pos:line="82" pos:column="22"/></name><argument_list pos:line="82" pos:column="22">(<argument><expr><literal type="string" pos:line="82" pos:column="23">"Content-Type: text/html\r\n"<pos:position pos:line="82" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="82" pos:column="54">stdout<pos:position pos:line="82" pos:column="60"/></name></expr></argument>)<pos:position pos:line="82" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="62"/></expr_stmt>	<comment type="block" pos:line="82" pos:column="65">/* add our type */</comment>
                <expr_stmt><expr><name pos:line="83" pos:column="17">istate<pos:position pos:line="83" pos:column="23"/></name> <operator pos:line="83" pos:column="24">=<pos:position pos:line="83" pos:column="25"/></operator> <name pos:line="83" pos:column="26">isBodyStart<pos:position pos:line="83" pos:column="37"/></name></expr>;<pos:position pos:line="83" pos:column="38"/></expr_stmt>
            }<pos:position pos:line="84" pos:column="14"/></block></then></if>

            <if pos:line="86" pos:column="13">if <condition pos:line="86" pos:column="16">(<expr><call><name pos:line="86" pos:column="17">strncasecmp<pos:position pos:line="86" pos:column="28"/></name><argument_list pos:line="86" pos:column="28">(<argument><expr><name pos:line="86" pos:column="29">buf<pos:position pos:line="86" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="86" pos:column="34">"Content-Type:"<pos:position pos:line="86" pos:column="49"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="86" pos:column="51">13<pos:position pos:line="86" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="86" pos:column="55"/></condition><then pos:line="86" pos:column="55">	<comment type="block" pos:line="86" pos:column="57">/* filter out their type */</comment>
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="87" pos:column="17">fputs<pos:position pos:line="87" pos:column="22"/></name><argument_list pos:line="87" pos:column="22">(<argument><expr><name pos:line="87" pos:column="23">buf<pos:position pos:line="87" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="28">stdout<pos:position pos:line="87" pos:column="34"/></name></expr></argument>)<pos:position pos:line="87" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="36"/></expr_stmt></block></then></if>

            <break pos:line="89" pos:column="13">break;<pos:position pos:line="89" pos:column="19"/></break>

        <case pos:line="91" pos:column="9">case <expr><name pos:line="91" pos:column="14">isBodyStart<pos:position pos:line="91" pos:column="25"/></name></expr>:<pos:position pos:line="91" pos:column="26"/></case>
            <expr_stmt><expr><call><name pos:line="92" pos:column="13">printf<pos:position pos:line="92" pos:column="19"/></name><argument_list pos:line="92" pos:column="19">(<argument><expr><literal type="string" pos:line="92" pos:column="20">"&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;\n"<pos:position pos:line="92" pos:column="136"/></literal></expr></argument>)<pos:position pos:line="92" pos:column="131"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="132"/></expr_stmt>

            <expr_stmt><expr><call><name pos:line="94" pos:column="13">printf<pos:position pos:line="94" pos:column="19"/></name><argument_list pos:line="94" pos:column="19">(<argument><expr><literal type="string" pos:line="94" pos:column="20">"&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;CacheMgr@%s: %s&lt;/TITLE&gt;\n"<pos:position pos:line="94" pos:column="90"/></literal></expr></argument>,
                   <argument><expr><name><name pos:line="95" pos:column="20">req<pos:position pos:line="95" pos:column="23"/></name><operator pos:line="95" pos:column="23">-&gt;<pos:position pos:line="95" pos:column="28"/></operator><name pos:line="95" pos:column="25">hostname<pos:position pos:line="95" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="35">action<pos:position pos:line="95" pos:column="41"/></name></expr></argument>)<pos:position pos:line="95" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="43"/></expr_stmt>

            <expr_stmt><expr><call><name pos:line="97" pos:column="13">printf<pos:position pos:line="97" pos:column="19"/></name><argument_list pos:line="97" pos:column="19">(<argument><expr><literal type="string" pos:line="97" pos:column="20">"&lt;STYLE type=\"text/css\"&gt;&lt;!--BODY{background-color:#ffffff;font-family:verdana,sans-serif}TABLE{background-color:#333333;border:0pt;padding:0pt}TH,TD{background-color:#ffffff;white-space:nowrap}--&gt;&lt;/STYLE&gt;\n"<pos:position pos:line="97" pos:column="247"/></literal></expr></argument>)<pos:position pos:line="97" pos:column="230"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="231"/></expr_stmt>

            <expr_stmt><expr><call><name pos:line="99" pos:column="13">printf<pos:position pos:line="99" pos:column="19"/></name><argument_list pos:line="99" pos:column="19">(<argument><expr><literal type="string" pos:line="99" pos:column="20">"&lt;/HEAD&gt;&lt;BODY&gt;\n"<pos:position pos:line="99" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="99" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="39"/></expr_stmt>

            <if pos:line="101" pos:column="13">if <condition pos:line="101" pos:column="16">(<expr><name pos:line="101" pos:column="17">parse_menu<pos:position pos:line="101" pos:column="27"/></name></expr>)<pos:position pos:line="101" pos:column="28"/></condition><then pos:line="101" pos:column="28"> <block pos:line="101" pos:column="29">{
                <expr_stmt><expr><call><name pos:line="102" pos:column="17">printf<pos:position pos:line="102" pos:column="23"/></name><argument_list pos:line="102" pos:column="23">(<argument><expr><literal type="string" pos:line="102" pos:column="24">"&lt;H2&gt;&lt;a href=\"%s\"&gt;Cache Manager&lt;/a&gt; menu for %s:&lt;/H2&gt;"<pos:position pos:line="102" pos:column="104"/></literal></expr></argument>,
                       <argument><expr><call><name pos:line="103" pos:column="24">menu_url<pos:position pos:line="103" pos:column="32"/></name><argument_list pos:line="103" pos:column="32">(<argument><expr><name pos:line="103" pos:column="33">req<pos:position pos:line="103" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="103" pos:column="38">"authenticate"<pos:position pos:line="103" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="103" pos:column="53"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="103" pos:column="55">req<pos:position pos:line="103" pos:column="58"/></name><operator pos:line="103" pos:column="58">-&gt;<pos:position pos:line="103" pos:column="63"/></operator><name pos:line="103" pos:column="60">hostname<pos:position pos:line="103" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="103" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="70"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="104" pos:column="17">printf<pos:position pos:line="104" pos:column="23"/></name><argument_list pos:line="104" pos:column="23">(<argument><expr><literal type="string" pos:line="104" pos:column="24">"&lt;UL&gt;\n"<pos:position pos:line="104" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="104" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="34"/></expr_stmt>
            }<pos:position pos:line="105" pos:column="14"/></block></then> <else pos:line="105" pos:column="15">else <block pos:line="105" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="106" pos:column="17">printf<pos:position pos:line="106" pos:column="23"/></name><argument_list pos:line="106" pos:column="23">(<argument><expr><literal type="string" pos:line="106" pos:column="24">"&lt;P&gt;&lt;A HREF=\"%s\"&gt;%s&lt;/A&gt;\n&lt;HR noshade size=\"1px\"&gt;\n"<pos:position pos:line="106" pos:column="103"/></literal></expr></argument>,
                       <argument><expr><call><name pos:line="107" pos:column="24">menu_url<pos:position pos:line="107" pos:column="32"/></name><argument_list pos:line="107" pos:column="32">(<argument><expr><name pos:line="107" pos:column="33">req<pos:position pos:line="107" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="107" pos:column="38">"menu"<pos:position pos:line="107" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="107" pos:column="45"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="107" pos:column="47">"Cache Manager menu"<pos:position pos:line="107" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="107" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="69"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="108" pos:column="17">printf<pos:position pos:line="108" pos:column="23"/></name><argument_list pos:line="108" pos:column="23">(<argument><expr><literal type="string" pos:line="108" pos:column="24">"&lt;PRE&gt;\n"<pos:position pos:line="108" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="108" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="35"/></expr_stmt>
            }<pos:position pos:line="109" pos:column="14"/></block></else></if>

            <expr_stmt><expr><name pos:line="111" pos:column="13">istate<pos:position pos:line="111" pos:column="19"/></name> <operator pos:line="111" pos:column="20">=<pos:position pos:line="111" pos:column="21"/></operator> <name pos:line="111" pos:column="22">isActions<pos:position pos:line="111" pos:column="31"/></name></expr>;<pos:position pos:line="111" pos:column="32"/></expr_stmt>
            <comment type="block" pos:line="112" pos:column="13">/* yes, fall through, we do not want to loose the first line */</comment>

        <case pos:line="114" pos:column="9">case <expr><name pos:line="114" pos:column="14">isActions<pos:position pos:line="114" pos:column="23"/></name></expr>:<pos:position pos:line="114" pos:column="24"/></case>
            <if pos:line="115" pos:column="13">if <condition pos:line="115" pos:column="16">(<expr><call><name pos:line="115" pos:column="17">strncmp<pos:position pos:line="115" pos:column="24"/></name><argument_list pos:line="115" pos:column="24">(<argument><expr><name pos:line="115" pos:column="25">buf<pos:position pos:line="115" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="115" pos:column="30">"action:"<pos:position pos:line="115" pos:column="39"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="115" pos:column="41">7<pos:position pos:line="115" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="115" pos:column="43"/></argument_list></call> <operator pos:line="115" pos:column="44">==<pos:position pos:line="115" pos:column="46"/></operator> <literal type="number" pos:line="115" pos:column="47">0<pos:position pos:line="115" pos:column="48"/></literal></expr>)<pos:position pos:line="115" pos:column="49"/></condition><then pos:line="115" pos:column="49"> <block pos:line="115" pos:column="50">{
                <expr_stmt><expr><call><name pos:line="116" pos:column="17">fputs<pos:position pos:line="116" pos:column="22"/></name><argument_list pos:line="116" pos:column="22">(<argument><expr><literal type="string" pos:line="116" pos:column="23">" "<pos:position pos:line="116" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="116" pos:column="28">stdout<pos:position pos:line="116" pos:column="34"/></name></expr></argument>)<pos:position pos:line="116" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="36"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="117" pos:column="17">fputs<pos:position pos:line="117" pos:column="22"/></name><argument_list pos:line="117" pos:column="22">(<argument><expr><call><name pos:line="117" pos:column="23">munge_action_line<pos:position pos:line="117" pos:column="40"/></name><argument_list pos:line="117" pos:column="40">(<argument><expr><name pos:line="117" pos:column="41">buf<pos:position pos:line="117" pos:column="44"/></name> <operator pos:line="117" pos:column="45">+<pos:position pos:line="117" pos:column="46"/></operator> <literal type="number" pos:line="117" pos:column="47">7<pos:position pos:line="117" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="117" pos:column="50">req<pos:position pos:line="117" pos:column="53"/></name></expr></argument>)<pos:position pos:line="117" pos:column="54"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="117" pos:column="56">stdout<pos:position pos:line="117" pos:column="62"/></name></expr></argument>)<pos:position pos:line="117" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="64"/></expr_stmt>
                <break pos:line="118" pos:column="17">break;<pos:position pos:line="118" pos:column="23"/></break>
            }<pos:position pos:line="119" pos:column="14"/></block></then></if>
            <if pos:line="120" pos:column="13">if <condition pos:line="120" pos:column="16">(<expr><name pos:line="120" pos:column="17">parse_menu<pos:position pos:line="120" pos:column="27"/></name></expr>)<pos:position pos:line="120" pos:column="28"/></condition><then pos:line="120" pos:column="28"> <block pos:line="120" pos:column="29">{
                <expr_stmt><expr><call><name pos:line="121" pos:column="17">printf<pos:position pos:line="121" pos:column="23"/></name><argument_list pos:line="121" pos:column="23">(<argument><expr><literal type="string" pos:line="121" pos:column="24">"&lt;UL&gt;\n"<pos:position pos:line="121" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="121" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="34"/></expr_stmt>
            }<pos:position pos:line="122" pos:column="14"/></block></then> <else pos:line="122" pos:column="15">else <block pos:line="122" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="123" pos:column="17">printf<pos:position pos:line="123" pos:column="23"/></name><argument_list pos:line="123" pos:column="23">(<argument><expr><literal type="string" pos:line="123" pos:column="24">"&lt;HR noshade size=\"1px\"&gt;\n"<pos:position pos:line="123" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="123" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="55"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="124" pos:column="17">printf<pos:position pos:line="124" pos:column="23"/></name><argument_list pos:line="124" pos:column="23">(<argument><expr><literal type="string" pos:line="124" pos:column="24">"&lt;PRE&gt;\n"<pos:position pos:line="124" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="124" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="35"/></expr_stmt>
            }<pos:position pos:line="125" pos:column="14"/></block></else></if>

            <expr_stmt><expr><name pos:line="127" pos:column="13">istate<pos:position pos:line="127" pos:column="19"/></name> <operator pos:line="127" pos:column="20">=<pos:position pos:line="127" pos:column="21"/></operator> <name pos:line="127" pos:column="22">isBody<pos:position pos:line="127" pos:column="28"/></name></expr>;<pos:position pos:line="127" pos:column="29"/></expr_stmt>
            <comment type="block" pos:line="128" pos:column="13">/* yes, fall through, we do not want to loose the first line */</comment>

        <case pos:line="130" pos:column="9">case <expr><name pos:line="130" pos:column="14">isBody<pos:position pos:line="130" pos:column="20"/></name></expr>:<pos:position pos:line="130" pos:column="21"/></case>
            <comment type="block" pos:line="131" pos:column="13">/* interpret [and reformat] cache response */</comment>

            <if pos:line="133" pos:column="13">if <condition pos:line="133" pos:column="16">(<expr><name pos:line="133" pos:column="17">parse_menu<pos:position pos:line="133" pos:column="27"/></name></expr>)<pos:position pos:line="133" pos:column="28"/></condition><then pos:line="133" pos:column="28">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="134" pos:column="17">fputs<pos:position pos:line="134" pos:column="22"/></name><argument_list pos:line="134" pos:column="22">(<argument><expr><call><name pos:line="134" pos:column="23">munge_menu_line<pos:position pos:line="134" pos:column="38"/></name><argument_list pos:line="134" pos:column="38">(<argument><expr><name pos:line="134" pos:column="39">buf<pos:position pos:line="134" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="134" pos:column="44">req<pos:position pos:line="134" pos:column="47"/></name></expr></argument>)<pos:position pos:line="134" pos:column="48"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="134" pos:column="50">stdout<pos:position pos:line="134" pos:column="56"/></name></expr></argument>)<pos:position pos:line="134" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="58"/></expr_stmt></block></then>
            <else pos:line="135" pos:column="13">else
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="136" pos:column="17">fputs<pos:position pos:line="136" pos:column="22"/></name><argument_list pos:line="136" pos:column="22">(<argument><expr><call><name pos:line="136" pos:column="23">munge_other_line<pos:position pos:line="136" pos:column="39"/></name><argument_list pos:line="136" pos:column="39">(<argument><expr><name pos:line="136" pos:column="40">buf<pos:position pos:line="136" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="136" pos:column="45">req<pos:position pos:line="136" pos:column="48"/></name></expr></argument>)<pos:position pos:line="136" pos:column="49"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="136" pos:column="51">stdout<pos:position pos:line="136" pos:column="57"/></name></expr></argument>)<pos:position pos:line="136" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="59"/></expr_stmt></block></else></if>

            <break pos:line="138" pos:column="13">break;<pos:position pos:line="138" pos:column="19"/></break>

        <case pos:line="140" pos:column="9">case <expr><name pos:line="140" pos:column="14">isForward<pos:position pos:line="140" pos:column="23"/></name></expr>:<pos:position pos:line="140" pos:column="24"/></case>
            <comment type="block" pos:line="141" pos:column="13">/* forward: no modifications allowed */</comment>
            <comment type="block" pos:line="142" pos:column="13">/*
             * Note: we currently do not know any way to get browser.reply to
             * 401 to .cgi because web server filters out all auth info. Thus we
             * disable authentication headers for now.
             */</comment>
            <if pos:line="147" pos:column="13">if <condition pos:line="147" pos:column="16">(<expr><operator pos:line="147" pos:column="17">!<pos:position pos:line="147" pos:column="18"/></operator><call><name pos:line="147" pos:column="18">strncasecmp<pos:position pos:line="147" pos:column="29"/></name><argument_list pos:line="147" pos:column="29">(<argument><expr><name pos:line="147" pos:column="30">buf<pos:position pos:line="147" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="147" pos:column="35">"WWW-Authenticate:"<pos:position pos:line="147" pos:column="54"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="147" pos:column="56">17<pos:position pos:line="147" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="147" pos:column="59"/></argument_list></call> <operator pos:line="147" pos:column="60">||<pos:position pos:line="147" pos:column="62"/></operator> <operator pos:line="147" pos:column="63">!<pos:position pos:line="147" pos:column="64"/></operator><call><name pos:line="147" pos:column="64">strncasecmp<pos:position pos:line="147" pos:column="75"/></name><argument_list pos:line="147" pos:column="75">(<argument><expr><name pos:line="147" pos:column="76">buf<pos:position pos:line="147" pos:column="79"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="147" pos:column="81">"Proxy-Authenticate:"<pos:position pos:line="147" pos:column="102"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="147" pos:column="104">19<pos:position pos:line="147" pos:column="106"/></literal></expr></argument>)<pos:position pos:line="147" pos:column="107"/></argument_list></call></expr>)<pos:position pos:line="147" pos:column="108"/></condition><then><block type="pseudo"><empty_stmt pos:line="147" pos:column="108">;<pos:position pos:line="147" pos:column="109"/></empty_stmt></block></then>	<comment type="block" pos:line="147" pos:column="113">/* skip */</comment>
            <else pos:line="148" pos:column="13">else
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="149" pos:column="17">fputs<pos:position pos:line="149" pos:column="22"/></name><argument_list pos:line="149" pos:column="22">(<argument><expr><name pos:line="149" pos:column="23">buf<pos:position pos:line="149" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="149" pos:column="28">stdout<pos:position pos:line="149" pos:column="34"/></name></expr></argument>)<pos:position pos:line="149" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="36"/></expr_stmt></block></else></if>

            <break pos:line="151" pos:column="13">break;<pos:position pos:line="151" pos:column="19"/></break>

        <case pos:line="153" pos:column="9">case <expr><name pos:line="153" pos:column="14">isEof<pos:position pos:line="153" pos:column="19"/></name></expr>:<pos:position pos:line="153" pos:column="20"/></case>
            <comment type="block" pos:line="154" pos:column="13">/* print trailers */</comment>
            <if pos:line="155" pos:column="13">if <condition pos:line="155" pos:column="16">(<expr><name pos:line="155" pos:column="17">parse_menu<pos:position pos:line="155" pos:column="27"/></name></expr>)<pos:position pos:line="155" pos:column="28"/></condition><then pos:line="155" pos:column="28">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="156" pos:column="17">printf<pos:position pos:line="156" pos:column="23"/></name><argument_list pos:line="156" pos:column="23">(<argument><expr><literal type="string" pos:line="156" pos:column="24">"&lt;/UL&gt;\n"<pos:position pos:line="156" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="156" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="35"/></expr_stmt></block></then>
            <else pos:line="157" pos:column="13">else
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="158" pos:column="17">printf<pos:position pos:line="158" pos:column="23"/></name><argument_list pos:line="158" pos:column="23">(<argument><expr><literal type="string" pos:line="158" pos:column="24">"&lt;/table&gt;&lt;/PRE&gt;\n"<pos:position pos:line="158" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="158" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="158" pos:column="44"/></expr_stmt></block></else></if>

            <expr_stmt><expr><call><name pos:line="160" pos:column="13">print_trailer<pos:position pos:line="160" pos:column="26"/></name><argument_list pos:line="160" pos:column="26">()<pos:position pos:line="160" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="160" pos:column="29"/></expr_stmt>

            <expr_stmt><expr><name pos:line="162" pos:column="13">istate<pos:position pos:line="162" pos:column="19"/></name> <operator pos:line="162" pos:column="20">=<pos:position pos:line="162" pos:column="21"/></operator> <name pos:line="162" pos:column="22">isSuccess<pos:position pos:line="162" pos:column="31"/></name></expr>;<pos:position pos:line="162" pos:column="32"/></expr_stmt>

            <break pos:line="164" pos:column="13">break;<pos:position pos:line="164" pos:column="19"/></break>

        <case pos:line="166" pos:column="9">case <expr><name pos:line="166" pos:column="14">isForwardEof<pos:position pos:line="166" pos:column="26"/></name></expr>:<pos:position pos:line="166" pos:column="27"/></case>
            <comment type="block" pos:line="167" pos:column="13">/* indicate that we finished processing an "error" sequence */</comment>
            <expr_stmt><expr><name pos:line="168" pos:column="13">istate<pos:position pos:line="168" pos:column="19"/></name> <operator pos:line="168" pos:column="20">=<pos:position pos:line="168" pos:column="21"/></operator> <name pos:line="168" pos:column="22">isError<pos:position pos:line="168" pos:column="29"/></name></expr>;<pos:position pos:line="168" pos:column="30"/></expr_stmt>

            <break pos:line="170" pos:column="13">break;<pos:position pos:line="170" pos:column="19"/></break>

        <default pos:line="172" pos:column="9">default:<pos:position pos:line="172" pos:column="17"/></default>
            <expr_stmt><expr><call><name pos:line="173" pos:column="13">printf<pos:position pos:line="173" pos:column="19"/></name><argument_list pos:line="173" pos:column="19">(<argument><expr><literal type="string" pos:line="173" pos:column="20">"%s: internal bug: invalid state reached: %d"<pos:position pos:line="173" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="173" pos:column="67">script_name<pos:position pos:line="173" pos:column="78"/></name></expr></argument>, <argument><expr><name pos:line="173" pos:column="80">istate<pos:position pos:line="173" pos:column="86"/></name></expr></argument>)<pos:position pos:line="173" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="173" pos:column="88"/></expr_stmt>

            <expr_stmt><expr><name pos:line="175" pos:column="13">istate<pos:position pos:line="175" pos:column="19"/></name> <operator pos:line="175" pos:column="20">=<pos:position pos:line="175" pos:column="21"/></operator> <name pos:line="175" pos:column="22">isError<pos:position pos:line="175" pos:column="29"/></name></expr>;<pos:position pos:line="175" pos:column="30"/></expr_stmt>
        }<pos:position pos:line="176" pos:column="10"/></block></switch>
    }<pos:position pos:line="177" pos:column="6"/></block></while>

    <expr_stmt><expr><call><name pos:line="179" pos:column="5">fclose<pos:position pos:line="179" pos:column="11"/></name><argument_list pos:line="179" pos:column="11">(<argument><expr><name pos:line="179" pos:column="12">fp<pos:position pos:line="179" pos:column="14"/></name></expr></argument>)<pos:position pos:line="179" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="179" pos:column="16"/></expr_stmt>
<cpp:if pos:line="180" pos:column="1">#<cpp:directive pos:line="180" pos:column="2">if<pos:position pos:line="180" pos:column="4"/></cpp:directive> <expr><name pos:line="180" pos:column="5">_SQUID_WINDOWS_<pos:position pos:line="180" pos:column="20"/></name></expr></cpp:if>

    <expr_stmt><expr><call><name pos:line="182" pos:column="5">remove<pos:position pos:line="182" pos:column="11"/></name><argument_list pos:line="182" pos:column="11">(<argument><expr><name pos:line="182" pos:column="12">tmpfile<pos:position pos:line="182" pos:column="19"/></name></expr></argument>)<pos:position pos:line="182" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="182" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="183" pos:column="5">xfree<pos:position pos:line="183" pos:column="10"/></name><argument_list pos:line="183" pos:column="10">(<argument><expr><name pos:line="183" pos:column="11">tmpfile<pos:position pos:line="183" pos:column="18"/></name></expr></argument>)<pos:position pos:line="183" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="183" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="184" pos:column="5">close<pos:position pos:line="184" pos:column="10"/></name><argument_list pos:line="184" pos:column="10">(<argument><expr><name pos:line="184" pos:column="11">s<pos:position pos:line="184" pos:column="12"/></name></expr></argument>)<pos:position pos:line="184" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="184" pos:column="14"/></expr_stmt>

<cpp:endif pos:line="186" pos:column="1">#<cpp:directive pos:line="186" pos:column="2">endif<pos:position pos:line="186" pos:column="7"/></cpp:directive></cpp:endif>

    <return pos:line="188" pos:column="5">return <expr><literal type="number" pos:line="188" pos:column="12">0<pos:position pos:line="188" pos:column="13"/></literal></expr>;<pos:position pos:line="188" pos:column="14"/></return>
}<pos:position pos:line="189" pos:column="2"/></block></function></unit>
