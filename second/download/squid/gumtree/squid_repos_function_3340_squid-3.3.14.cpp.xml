<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3340_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">mib_tree_entry<pos:position pos:line="1" pos:column="15"/></name> <modifier pos:line="1" pos:column="16">*<pos:position pos:line="1" pos:column="17"/></modifier></type>
<name pos:line="2" pos:column="1">snmpLookupNodeStr<pos:position pos:line="2" pos:column="18"/></name><parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><name pos:line="2" pos:column="19">mib_tree_entry<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type><name pos:line="2" pos:column="35">root<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="41">const<pos:position pos:line="2" pos:column="46"/></specifier> <name pos:line="2" pos:column="47">char<pos:position pos:line="2" pos:column="51"/></name> <modifier pos:line="2" pos:column="52">*<pos:position pos:line="2" pos:column="53"/></modifier></type><name pos:line="2" pos:column="53">str<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="57"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">oid<pos:position pos:line="4" pos:column="8"/></name> <modifier pos:line="4" pos:column="9">*<pos:position pos:line="4" pos:column="10"/></modifier></type><name pos:line="4" pos:column="10">name<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">namelen<pos:position pos:line="5" pos:column="16"/></name></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">mib_tree_entry<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">e<pos:position pos:line="6" pos:column="22"/></name></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">root<pos:position pos:line="8" pos:column="13"/></name></expr>)<pos:position pos:line="8" pos:column="14"/></condition><then pos:line="8" pos:column="14">
        <block type="pseudo"><expr_stmt><expr><name pos:line="9" pos:column="9">e<pos:position pos:line="9" pos:column="10"/></name> <operator pos:line="9" pos:column="11">=<pos:position pos:line="9" pos:column="12"/></operator> <name pos:line="9" pos:column="13">root<pos:position pos:line="9" pos:column="17"/></name></expr>;<pos:position pos:line="9" pos:column="18"/></expr_stmt></block></then>
    <else pos:line="10" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="9">e<pos:position pos:line="11" pos:column="10"/></name> <operator pos:line="11" pos:column="11">=<pos:position pos:line="11" pos:column="12"/></operator> <name pos:line="11" pos:column="13">mib_tree_head<pos:position pos:line="11" pos:column="26"/></name></expr>;<pos:position pos:line="11" pos:column="27"/></expr_stmt></block></else></if>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><operator pos:line="13" pos:column="9">!<pos:position pos:line="13" pos:column="10"/></operator> <call><name pos:line="13" pos:column="11">snmpCreateOidFromStr<pos:position pos:line="13" pos:column="31"/></name><argument_list pos:line="13" pos:column="31">(<argument><expr><name pos:line="13" pos:column="32">str<pos:position pos:line="13" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="37">&amp;<pos:position pos:line="13" pos:column="42"/></operator><name pos:line="13" pos:column="38">name<pos:position pos:line="13" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="44">&amp;<pos:position pos:line="13" pos:column="49"/></operator><name pos:line="13" pos:column="45">namelen<pos:position pos:line="13" pos:column="52"/></name></expr></argument>)<pos:position pos:line="13" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="54"/></condition><then pos:line="13" pos:column="54">
        <block type="pseudo"><return pos:line="14" pos:column="9">return <expr><name pos:line="14" pos:column="16">NULL<pos:position pos:line="14" pos:column="20"/></name></expr>;<pos:position pos:line="14" pos:column="21"/></return></block></then></if>

    <comment type="block" pos:line="16" pos:column="5">/* I wish there were some kind of sensible existing tree traversal
     * routine to use. I'll worry about that later */</comment>
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name pos:line="18" pos:column="9">namelen<pos:position pos:line="18" pos:column="16"/></name> <operator pos:line="18" pos:column="17">&lt;=<pos:position pos:line="18" pos:column="22"/></operator> <literal type="number" pos:line="18" pos:column="20">1<pos:position pos:line="18" pos:column="21"/></literal></expr>)<pos:position pos:line="18" pos:column="22"/></condition><then pos:line="18" pos:column="22"> <block pos:line="18" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">xfree<pos:position pos:line="19" pos:column="14"/></name><argument_list pos:line="19" pos:column="14">(<argument><expr><name pos:line="19" pos:column="15">name<pos:position pos:line="19" pos:column="19"/></name></expr></argument>)<pos:position pos:line="19" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="21"/></expr_stmt>
        <return pos:line="20" pos:column="9">return <expr><name pos:line="20" pos:column="16">e<pos:position pos:line="20" pos:column="17"/></name></expr>;<pos:position pos:line="20" pos:column="18"/></return>       <comment type="block" pos:line="20" pos:column="25">/* XXX it should only be this? */</comment>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="23" pos:column="5">int<pos:position pos:line="23" pos:column="8"/></name></type> <name pos:line="23" pos:column="9">i<pos:position pos:line="23" pos:column="10"/></name></decl>, <decl><type ref="prev"/><name pos:line="23" pos:column="12">r<pos:position pos:line="23" pos:column="13"/></name> <init pos:line="23" pos:column="14">= <expr><literal type="number" pos:line="23" pos:column="16">1<pos:position pos:line="23" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="23" pos:column="18"/></decl_stmt>
    <while pos:line="24" pos:column="5">while <condition pos:line="24" pos:column="11">(<expr><name pos:line="24" pos:column="12">r<pos:position pos:line="24" pos:column="13"/></name> <operator pos:line="24" pos:column="14">&lt;<pos:position pos:line="24" pos:column="18"/></operator> <name pos:line="24" pos:column="16">namelen<pos:position pos:line="24" pos:column="23"/></name></expr>)<pos:position pos:line="24" pos:column="24"/></condition> <block pos:line="24" pos:column="25">{

        <comment type="block" pos:line="26" pos:column="9">/* Find the child node which matches this */</comment>
        <for pos:line="27" pos:column="9">for <control pos:line="27" pos:column="13">(<init><expr><name pos:line="27" pos:column="14">i<pos:position pos:line="27" pos:column="15"/></name> <operator pos:line="27" pos:column="16">=<pos:position pos:line="27" pos:column="17"/></operator> <literal type="number" pos:line="27" pos:column="18">0<pos:position pos:line="27" pos:column="19"/></literal></expr>;<pos:position pos:line="27" pos:column="20"/></init> <condition><expr><name pos:line="27" pos:column="21">i<pos:position pos:line="27" pos:column="22"/></name> <operator pos:line="27" pos:column="23">&lt;<pos:position pos:line="27" pos:column="27"/></operator> <name><name pos:line="27" pos:column="25">e<pos:position pos:line="27" pos:column="26"/></name><operator pos:line="27" pos:column="26">-&gt;<pos:position pos:line="27" pos:column="31"/></operator><name pos:line="27" pos:column="28">children<pos:position pos:line="27" pos:column="36"/></name></name> <operator pos:line="27" pos:column="37">&amp;&amp;<pos:position pos:line="27" pos:column="47"/></operator> <name><name pos:line="27" pos:column="40">e<pos:position pos:line="27" pos:column="41"/></name><operator pos:line="27" pos:column="41">-&gt;<pos:position pos:line="27" pos:column="46"/></operator><name pos:line="27" pos:column="43">leaves<pos:position pos:line="27" pos:column="49"/></name><index pos:line="27" pos:column="49">[<expr><name pos:line="27" pos:column="50">i<pos:position pos:line="27" pos:column="51"/></name></expr>]<pos:position pos:line="27" pos:column="52"/></index></name><operator pos:line="27" pos:column="52">-&gt;<pos:position pos:line="27" pos:column="57"/></operator><name><name pos:line="27" pos:column="54">name<pos:position pos:line="27" pos:column="58"/></name><index pos:line="27" pos:column="58">[<expr><name pos:line="27" pos:column="59">r<pos:position pos:line="27" pos:column="60"/></name></expr>]<pos:position pos:line="27" pos:column="61"/></index></name> <operator pos:line="27" pos:column="62">!=<pos:position pos:line="27" pos:column="64"/></operator> <name><name pos:line="27" pos:column="65">name<pos:position pos:line="27" pos:column="69"/></name><index pos:line="27" pos:column="69">[<expr><name pos:line="27" pos:column="70">r<pos:position pos:line="27" pos:column="71"/></name></expr>]<pos:position pos:line="27" pos:column="72"/></index></name></expr>;<pos:position pos:line="27" pos:column="73"/></condition> <incr><expr><operator pos:line="27" pos:column="74">++<pos:position pos:line="27" pos:column="76"/></operator><name pos:line="27" pos:column="76">i<pos:position pos:line="27" pos:column="77"/></name></expr></incr>)<pos:position pos:line="27" pos:column="78"/></control> <block type="pseudo"><empty_stmt pos:line="27" pos:column="79">;<pos:position pos:line="27" pos:column="80"/></empty_stmt></block></for> <comment type="line" pos:line="27" pos:column="81">// seek-loop</comment>

        <comment type="block" pos:line="29" pos:column="9">/* Are we pointing to that node? */</comment>
        <if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name pos:line="30" pos:column="13">i<pos:position pos:line="30" pos:column="14"/></name> <operator pos:line="30" pos:column="15">&gt;=<pos:position pos:line="30" pos:column="20"/></operator> <name><name pos:line="30" pos:column="18">e<pos:position pos:line="30" pos:column="19"/></name><operator pos:line="30" pos:column="19">-&gt;<pos:position pos:line="30" pos:column="24"/></operator><name pos:line="30" pos:column="21">children<pos:position pos:line="30" pos:column="29"/></name></name></expr>)<pos:position pos:line="30" pos:column="30"/></condition><then pos:line="30" pos:column="30">
            <block type="pseudo"><break pos:line="31" pos:column="13">break;<pos:position pos:line="31" pos:column="19"/></break></block></then></if>
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">assert<pos:position pos:line="32" pos:column="15"/></name><argument_list pos:line="32" pos:column="15">(<argument><expr><name><name pos:line="32" pos:column="16">e<pos:position pos:line="32" pos:column="17"/></name><operator pos:line="32" pos:column="17">-&gt;<pos:position pos:line="32" pos:column="22"/></operator><name pos:line="32" pos:column="19">leaves<pos:position pos:line="32" pos:column="25"/></name><index pos:line="32" pos:column="25">[<expr><name pos:line="32" pos:column="26">i<pos:position pos:line="32" pos:column="27"/></name></expr>]<pos:position pos:line="32" pos:column="28"/></index></name><operator pos:line="32" pos:column="28">-&gt;<pos:position pos:line="32" pos:column="33"/></operator><name><name pos:line="32" pos:column="30">name<pos:position pos:line="32" pos:column="34"/></name><index pos:line="32" pos:column="34">[<expr><name pos:line="32" pos:column="35">r<pos:position pos:line="32" pos:column="36"/></name></expr>]<pos:position pos:line="32" pos:column="37"/></index></name> <operator pos:line="32" pos:column="38">==<pos:position pos:line="32" pos:column="40"/></operator> <name><name pos:line="32" pos:column="41">name<pos:position pos:line="32" pos:column="45"/></name><index pos:line="32" pos:column="45">[<expr><name pos:line="32" pos:column="46">r<pos:position pos:line="32" pos:column="47"/></name></expr>]<pos:position pos:line="32" pos:column="48"/></index></name></expr></argument>)<pos:position pos:line="32" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="50"/></expr_stmt>

        <comment type="block" pos:line="34" pos:column="9">/* Skip to that node! */</comment>
        <expr_stmt><expr><name pos:line="35" pos:column="9">e<pos:position pos:line="35" pos:column="10"/></name> <operator pos:line="35" pos:column="11">=<pos:position pos:line="35" pos:column="12"/></operator> <name><name pos:line="35" pos:column="13">e<pos:position pos:line="35" pos:column="14"/></name><operator pos:line="35" pos:column="14">-&gt;<pos:position pos:line="35" pos:column="19"/></operator><name pos:line="35" pos:column="16">leaves<pos:position pos:line="35" pos:column="22"/></name><index pos:line="35" pos:column="22">[<expr><name pos:line="35" pos:column="23">i<pos:position pos:line="35" pos:column="24"/></name></expr>]<pos:position pos:line="35" pos:column="25"/></index></name></expr>;<pos:position pos:line="35" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="36" pos:column="9">++<pos:position pos:line="36" pos:column="11"/></operator><name pos:line="36" pos:column="11">r<pos:position pos:line="36" pos:column="12"/></name></expr>;<pos:position pos:line="36" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="37" pos:column="6"/></block></while>

    <expr_stmt><expr><call><name pos:line="39" pos:column="5">xfree<pos:position pos:line="39" pos:column="10"/></name><argument_list pos:line="39" pos:column="10">(<argument><expr><name pos:line="39" pos:column="11">name<pos:position pos:line="39" pos:column="15"/></name></expr></argument>)<pos:position pos:line="39" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="17"/></expr_stmt>
    <return pos:line="40" pos:column="5">return <expr><name pos:line="40" pos:column="12">e<pos:position pos:line="40" pos:column="13"/></name></expr>;<pos:position pos:line="40" pos:column="14"/></return>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
