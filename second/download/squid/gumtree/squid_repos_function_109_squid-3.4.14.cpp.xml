<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_109_squid-3.4.14.cpp" pos:tabs="8"><function><name pos:line="1" pos:column="1">main<pos:position pos:line="1" pos:column="5"/></name><parameter_list pos:line="1" pos:column="5">(<parameter><decl><type><name pos:line="1" pos:column="6">int<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">argc<pos:position pos:line="1" pos:column="14"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="16">char<pos:position pos:line="1" pos:column="20"/></name> <modifier pos:line="1" pos:column="21">*<pos:position pos:line="1" pos:column="22"/></modifier><modifier pos:line="1" pos:column="22">*<pos:position pos:line="1" pos:column="23"/></modifier></type><name pos:line="1" pos:column="23">argv<pos:position pos:line="1" pos:column="27"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="28"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">char<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">c<pos:position pos:line="3" pos:column="11"/></name></decl>;<pos:position pos:line="3" pos:column="12"/></decl_stmt>
    <decl_stmt><decl><specifier pos:line="4" pos:column="5">extern<pos:position pos:line="4" pos:column="11"/></specifier> <type><name pos:line="4" pos:column="12">char<pos:position pos:line="4" pos:column="16"/></name> <modifier pos:line="4" pos:column="17">*<pos:position pos:line="4" pos:column="18"/></modifier></type><name pos:line="4" pos:column="18">optarg<pos:position pos:line="4" pos:column="24"/></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
    <expr_stmt><expr><name pos:line="5" pos:column="5">malloc_options<pos:position pos:line="5" pos:column="19"/></name> <operator pos:line="5" pos:column="20">=<pos:position pos:line="5" pos:column="21"/></operator> <literal type="string" pos:line="5" pos:column="22">"A"<pos:position pos:line="5" pos:column="25"/></literal></expr>;<pos:position pos:line="5" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="6" pos:column="5">a<pos:position pos:line="6" pos:column="6"/></name> <operator pos:line="6" pos:column="7">=<pos:position pos:line="6" pos:column="8"/></operator> <literal type="number" pos:line="6" pos:column="9">0<pos:position pos:line="6" pos:column="10"/></literal></expr>;<pos:position pos:line="6" pos:column="11"/></expr_stmt>
    <while pos:line="7" pos:column="5">while <condition pos:line="7" pos:column="11">(<expr><operator pos:line="7" pos:column="12">(<pos:position pos:line="7" pos:column="13"/></operator><name pos:line="7" pos:column="13">c<pos:position pos:line="7" pos:column="14"/></name> <operator pos:line="7" pos:column="15">=<pos:position pos:line="7" pos:column="16"/></operator> <call><name pos:line="7" pos:column="17">getopt<pos:position pos:line="7" pos:column="23"/></name><argument_list pos:line="7" pos:column="23">(<argument><expr><name pos:line="7" pos:column="24">argc<pos:position pos:line="7" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="30">argv<pos:position pos:line="7" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="36">"f:i:M:l:m:r:N"<pos:position pos:line="7" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="52"/></argument_list></call><operator pos:line="7" pos:column="52">)<pos:position pos:line="7" pos:column="53"/></operator> <operator pos:line="7" pos:column="54">!=<pos:position pos:line="7" pos:column="56"/></operator> <operator pos:line="7" pos:column="57">-<pos:position pos:line="7" pos:column="58"/></operator><literal type="number" pos:line="7" pos:column="58">1<pos:position pos:line="7" pos:column="59"/></literal></expr>)<pos:position pos:line="7" pos:column="60"/></condition> <block pos:line="7" pos:column="61">{
        <switch pos:line="8" pos:column="9">switch <condition pos:line="8" pos:column="16">(<expr><name pos:line="8" pos:column="17">c<pos:position pos:line="8" pos:column="18"/></name></expr>)<pos:position pos:line="8" pos:column="19"/></condition> <block pos:line="8" pos:column="20">{
        <case pos:line="9" pos:column="9">case <expr><literal type="char" pos:line="9" pos:column="14">'N'<pos:position pos:line="9" pos:column="17"/></literal></expr>:<pos:position pos:line="9" pos:column="18"/></case>
            <expr_stmt><expr><name pos:line="10" pos:column="13">mem_pools_on<pos:position pos:line="10" pos:column="25"/></name> <operator pos:line="10" pos:column="26">=<pos:position pos:line="10" pos:column="27"/></operator> <literal type="number" pos:line="10" pos:column="28">0<pos:position pos:line="10" pos:column="29"/></literal></expr>;<pos:position pos:line="10" pos:column="30"/></expr_stmt>
            <break pos:line="11" pos:column="13">break;<pos:position pos:line="11" pos:column="19"/></break>
        <case pos:line="12" pos:column="9">case <expr><literal type="char" pos:line="12" pos:column="14">'r'<pos:position pos:line="12" pos:column="17"/></literal></expr>:<pos:position pos:line="12" pos:column="18"/></case>
            <expr_stmt><expr><name pos:line="13" pos:column="13">run_stats<pos:position pos:line="13" pos:column="22"/></name> <operator pos:line="13" pos:column="23">=<pos:position pos:line="13" pos:column="24"/></operator> <call><name pos:line="13" pos:column="25">atoi<pos:position pos:line="13" pos:column="29"/></name><argument_list pos:line="13" pos:column="29">(<argument><expr><name pos:line="13" pos:column="30">optarg<pos:position pos:line="13" pos:column="36"/></name></expr></argument>)<pos:position pos:line="13" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="38"/></expr_stmt>
            <break pos:line="14" pos:column="13">break;<pos:position pos:line="14" pos:column="19"/></break>
        <case pos:line="15" pos:column="9">case <expr><literal type="char" pos:line="15" pos:column="14">'f'<pos:position pos:line="15" pos:column="17"/></literal></expr>:<pos:position pos:line="15" pos:column="18"/></case>
            <expr_stmt><expr><name pos:line="16" pos:column="13">fn<pos:position pos:line="16" pos:column="15"/></name> <operator pos:line="16" pos:column="16">=<pos:position pos:line="16" pos:column="17"/></operator> <call><name pos:line="16" pos:column="18">strdup<pos:position pos:line="16" pos:column="24"/></name><argument_list pos:line="16" pos:column="24">(<argument><expr><name pos:line="16" pos:column="25">optarg<pos:position pos:line="16" pos:column="31"/></name></expr></argument>)<pos:position pos:line="16" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="33"/></expr_stmt>
            <expr_stmt><expr><name pos:line="17" pos:column="13">fp<pos:position pos:line="17" pos:column="15"/></name> <operator pos:line="17" pos:column="16">=<pos:position pos:line="17" pos:column="17"/></operator> <call><name pos:line="17" pos:column="18">fopen<pos:position pos:line="17" pos:column="23"/></name><argument_list pos:line="17" pos:column="23">(<argument><expr><name pos:line="17" pos:column="24">fn<pos:position pos:line="17" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="28">"r"<pos:position pos:line="17" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="33"/></expr_stmt>
            <break pos:line="18" pos:column="13">break;<pos:position pos:line="18" pos:column="19"/></break>
        <case pos:line="19" pos:column="9">case <expr><literal type="char" pos:line="19" pos:column="14">'i'<pos:position pos:line="19" pos:column="17"/></literal></expr>:<pos:position pos:line="19" pos:column="18"/></case>
            <expr_stmt><expr><name pos:line="20" pos:column="13">initsiz<pos:position pos:line="20" pos:column="20"/></name> <operator pos:line="20" pos:column="21">=<pos:position pos:line="20" pos:column="22"/></operator> <call><name pos:line="20" pos:column="23">atoi<pos:position pos:line="20" pos:column="27"/></name><argument_list pos:line="20" pos:column="27">(<argument><expr><name pos:line="20" pos:column="28">optarg<pos:position pos:line="20" pos:column="34"/></name></expr></argument>)<pos:position pos:line="20" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="36"/></expr_stmt>
            <break pos:line="21" pos:column="13">break;<pos:position pos:line="21" pos:column="19"/></break>
        <case pos:line="22" pos:column="9">case <expr><literal type="char" pos:line="22" pos:column="14">'l'<pos:position pos:line="22" pos:column="17"/></literal></expr>:<pos:position pos:line="22" pos:column="18"/></case>
            <expr_stmt><expr><name pos:line="23" pos:column="13">mem_max_size<pos:position pos:line="23" pos:column="25"/></name> <operator pos:line="23" pos:column="26">=<pos:position pos:line="23" pos:column="27"/></operator> <call><name pos:line="23" pos:column="28">atoi<pos:position pos:line="23" pos:column="32"/></name><argument_list pos:line="23" pos:column="32">(<argument><expr><name pos:line="23" pos:column="33">optarg<pos:position pos:line="23" pos:column="39"/></name></expr></argument>)<pos:position pos:line="23" pos:column="40"/></argument_list></call> <operator pos:line="23" pos:column="41">*<pos:position pos:line="23" pos:column="42"/></operator> <literal type="number" pos:line="23" pos:column="43">1024<pos:position pos:line="23" pos:column="47"/></literal> <operator pos:line="23" pos:column="48">*<pos:position pos:line="23" pos:column="49"/></operator> <literal type="number" pos:line="23" pos:column="50">1024<pos:position pos:line="23" pos:column="54"/></literal></expr>;<pos:position pos:line="23" pos:column="55"/></expr_stmt>
            <break pos:line="24" pos:column="13">break;<pos:position pos:line="24" pos:column="19"/></break>
        <case pos:line="25" pos:column="9">case <expr><literal type="char" pos:line="25" pos:column="14">'M'<pos:position pos:line="25" pos:column="17"/></literal></expr>:<pos:position pos:line="25" pos:column="18"/></case>
            <expr_stmt><expr><name pos:line="26" pos:column="13">maxsiz<pos:position pos:line="26" pos:column="19"/></name> <operator pos:line="26" pos:column="20">=<pos:position pos:line="26" pos:column="21"/></operator> <call><name pos:line="26" pos:column="22">atoi<pos:position pos:line="26" pos:column="26"/></name><argument_list pos:line="26" pos:column="26">(<argument><expr><name pos:line="26" pos:column="27">optarg<pos:position pos:line="26" pos:column="33"/></name></expr></argument>)<pos:position pos:line="26" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="35"/></expr_stmt>
            <break pos:line="27" pos:column="13">break;<pos:position pos:line="27" pos:column="19"/></break>
        <case pos:line="28" pos:column="9">case <expr><literal type="char" pos:line="28" pos:column="14">'m'<pos:position pos:line="28" pos:column="17"/></literal></expr>:<pos:position pos:line="28" pos:column="18"/></case>
            <expr_stmt><expr><name pos:line="29" pos:column="13">minchunk<pos:position pos:line="29" pos:column="21"/></name> <operator pos:line="29" pos:column="22">=<pos:position pos:line="29" pos:column="23"/></operator> <call><name pos:line="29" pos:column="24">atoi<pos:position pos:line="29" pos:column="28"/></name><argument_list pos:line="29" pos:column="28">(<argument><expr><name pos:line="29" pos:column="29">optarg<pos:position pos:line="29" pos:column="35"/></name></expr></argument>)<pos:position pos:line="29" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="37"/></expr_stmt>
            <break pos:line="30" pos:column="13">break;<pos:position pos:line="30" pos:column="19"/></break>
        <default pos:line="31" pos:column="9">default:<pos:position pos:line="31" pos:column="17"/></default>
            <expr_stmt><expr><call><name pos:line="32" pos:column="13">fprintf<pos:position pos:line="32" pos:column="20"/></name><argument_list pos:line="32" pos:column="20">(<argument><expr><name pos:line="32" pos:column="21">stderr<pos:position pos:line="32" pos:column="27"/></name></expr></argument>,
                    <argument><expr><literal type="string" pos:line="33" pos:column="21">"Usage: %s -f file -M maxsiz -i initsiz -m minchunk"<pos:position pos:line="33" pos:column="73"/></literal></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="75">argv<pos:position pos:line="33" pos:column="79"/></name><index pos:line="33" pos:column="79">[<expr><literal type="number" pos:line="33" pos:column="80">0<pos:position pos:line="33" pos:column="81"/></literal></expr>]<pos:position pos:line="33" pos:column="82"/></index></name></expr></argument>)<pos:position pos:line="33" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="84"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="34" pos:column="13">exit<pos:position pos:line="34" pos:column="17"/></name><argument_list pos:line="34" pos:column="17">(<argument><expr><literal type="number" pos:line="34" pos:column="18">1<pos:position pos:line="34" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="21"/></expr_stmt>
        }<pos:position pos:line="35" pos:column="10"/></block></switch>

    }<pos:position pos:line="37" pos:column="6"/></block></while>
    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><operator pos:line="38" pos:column="9">!<pos:position pos:line="38" pos:column="10"/></operator><name pos:line="38" pos:column="10">fp<pos:position pos:line="38" pos:column="12"/></name></expr>)<pos:position pos:line="38" pos:column="13"/></condition><then pos:line="38" pos:column="13"> <block pos:line="38" pos:column="14">{
        <expr_stmt><expr><call><name pos:line="39" pos:column="9">fprintf<pos:position pos:line="39" pos:column="16"/></name><argument_list pos:line="39" pos:column="16">(<argument><expr><name pos:line="39" pos:column="17">stderr<pos:position pos:line="39" pos:column="23"/></name></expr></argument>,
                <argument><expr><literal type="string" pos:line="40" pos:column="17">"%s pummels %s\n%s . o O ( You't supply a valid tracefile.)\n"<pos:position pos:line="40" pos:column="79"/></literal></expr></argument>,
                <argument><expr><name><name pos:line="41" pos:column="17">argv<pos:position pos:line="41" pos:column="21"/></name><index pos:line="41" pos:column="21">[<expr><literal type="number" pos:line="41" pos:column="22">0<pos:position pos:line="41" pos:column="23"/></literal></expr>]<pos:position pos:line="41" pos:column="24"/></index></name></expr></argument>, <argument><expr><call><name pos:line="41" pos:column="26">getenv<pos:position pos:line="41" pos:column="32"/></name><argument_list pos:line="41" pos:column="32">(<argument><expr><literal type="string" pos:line="41" pos:column="33">"USER"<pos:position pos:line="41" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="40"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="42">argv<pos:position pos:line="41" pos:column="46"/></name><index pos:line="41" pos:column="46">[<expr><literal type="number" pos:line="41" pos:column="47">0<pos:position pos:line="41" pos:column="48"/></literal></expr>]<pos:position pos:line="41" pos:column="49"/></index></name></expr></argument>)<pos:position pos:line="41" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="51"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="42" pos:column="9">exit<pos:position pos:line="42" pos:column="13"/></name><argument_list pos:line="42" pos:column="13">(<argument><expr><literal type="number" pos:line="42" pos:column="14">1<pos:position pos:line="42" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if>
<cpp:ifdef pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">ifdef<pos:position pos:line="44" pos:column="7"/></cpp:directive> <name pos:line="44" pos:column="8">WITH_LIB<pos:position pos:line="44" pos:column="16"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="45" pos:column="5">sizeToPoolInit<pos:position pos:line="45" pos:column="19"/></name><argument_list pos:line="45" pos:column="19">()<pos:position pos:line="45" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="22"/></expr_stmt>
<cpp:endif pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">endif<pos:position pos:line="46" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><name pos:line="47" pos:column="5">mem_table<pos:position pos:line="47" pos:column="14"/></name> <operator pos:line="47" pos:column="15">=<pos:position pos:line="47" pos:column="16"/></operator> <call><name pos:line="47" pos:column="17">hash_create<pos:position pos:line="47" pos:column="28"/></name><argument_list pos:line="47" pos:column="28">(<argument><expr><name pos:line="47" pos:column="29">ptrcmp<pos:position pos:line="47" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="37">229<pos:position pos:line="47" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="42">hash4<pos:position pos:line="47" pos:column="47"/></name></expr></argument>)<pos:position pos:line="47" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="49"/></expr_stmt>	<comment type="block" pos:line="47" pos:column="57">/* small hash table */</comment>
    <expr_stmt><expr><call><name pos:line="48" pos:column="5">init_stats<pos:position pos:line="48" pos:column="15"/></name><argument_list pos:line="48" pos:column="15">()<pos:position pos:line="48" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="18"/></expr_stmt>
    <while pos:line="49" pos:column="5">while <condition pos:line="49" pos:column="11">(<expr><call><name pos:line="49" pos:column="12">fgets<pos:position pos:line="49" pos:column="17"/></name><argument_list pos:line="49" pos:column="17">(<argument><expr><name pos:line="49" pos:column="18">mbuf<pos:position pos:line="49" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="49" pos:column="24">256<pos:position pos:line="49" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="29">fp<pos:position pos:line="49" pos:column="31"/></name></expr></argument>)<pos:position pos:line="49" pos:column="32"/></argument_list></call> <operator pos:line="49" pos:column="33">!=<pos:position pos:line="49" pos:column="35"/></operator> <name pos:line="49" pos:column="36">NULL<pos:position pos:line="49" pos:column="40"/></name></expr>)<pos:position pos:line="49" pos:column="41"/></condition> <block pos:line="49" pos:column="42">{
        <if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><name pos:line="50" pos:column="13">run_stats<pos:position pos:line="50" pos:column="22"/></name> <operator pos:line="50" pos:column="23">&gt;<pos:position pos:line="50" pos:column="27"/></operator> <literal type="number" pos:line="50" pos:column="25">0<pos:position pos:line="50" pos:column="26"/></literal> <operator pos:line="50" pos:column="27">&amp;&amp;<pos:position pos:line="50" pos:column="37"/></operator> <operator pos:line="50" pos:column="30">(<pos:position pos:line="50" pos:column="31"/></operator><operator pos:line="50" pos:column="31">++<pos:position pos:line="50" pos:column="33"/></operator><name pos:line="50" pos:column="33">a<pos:position pos:line="50" pos:column="34"/></name><operator pos:line="50" pos:column="34">)<pos:position pos:line="50" pos:column="35"/></operator> <operator pos:line="50" pos:column="36">%<pos:position pos:line="50" pos:column="37"/></operator> <name pos:line="50" pos:column="38">run_stats<pos:position pos:line="50" pos:column="47"/></name> <operator pos:line="50" pos:column="48">==<pos:position pos:line="50" pos:column="50"/></operator> <literal type="number" pos:line="50" pos:column="51">0<pos:position pos:line="50" pos:column="52"/></literal></expr>)<pos:position pos:line="50" pos:column="53"/></condition><then pos:line="50" pos:column="53">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="51" pos:column="13">print_stats<pos:position pos:line="51" pos:column="24"/></name><argument_list pos:line="51" pos:column="24">()<pos:position pos:line="51" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="27"/></expr_stmt></block></then></if>
        <expr_stmt><expr><name pos:line="52" pos:column="9">p<pos:position pos:line="52" pos:column="10"/></name> <operator pos:line="52" pos:column="11">=<pos:position pos:line="52" pos:column="12"/></operator> <name pos:line="52" pos:column="13">NULL<pos:position pos:line="52" pos:column="17"/></name></expr>;<pos:position pos:line="52" pos:column="18"/></expr_stmt>
        <switch pos:line="53" pos:column="9">switch <condition pos:line="53" pos:column="16">(<expr><name><name pos:line="53" pos:column="17">mbuf<pos:position pos:line="53" pos:column="21"/></name><index pos:line="53" pos:column="21">[<expr><literal type="number" pos:line="53" pos:column="22">0<pos:position pos:line="53" pos:column="23"/></literal></expr>]<pos:position pos:line="53" pos:column="24"/></index></name></expr>)<pos:position pos:line="53" pos:column="25"/></condition> <block pos:line="53" pos:column="26">{
        <case pos:line="54" pos:column="9">case <expr><literal type="char" pos:line="54" pos:column="14">'m'<pos:position pos:line="54" pos:column="17"/></literal></expr>:<pos:position pos:line="54" pos:column="18"/></case>		<comment type="block" pos:line="54" pos:column="33">/* malloc */</comment>
            <expr_stmt><expr><name pos:line="55" pos:column="13">p<pos:position pos:line="55" pos:column="14"/></name> <operator pos:line="55" pos:column="15">=<pos:position pos:line="55" pos:column="16"/></operator> <call><name pos:line="55" pos:column="17">strtok<pos:position pos:line="55" pos:column="23"/></name><argument_list pos:line="55" pos:column="23">(<argument><expr><operator pos:line="55" pos:column="24">&amp;<pos:position pos:line="55" pos:column="29"/></operator><name><name pos:line="55" pos:column="25">mbuf<pos:position pos:line="55" pos:column="29"/></name><index pos:line="55" pos:column="29">[<expr><literal type="number" pos:line="55" pos:column="30">2<pos:position pos:line="55" pos:column="31"/></literal></expr>]<pos:position pos:line="55" pos:column="32"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="34">":"<pos:position pos:line="55" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="39"/></expr_stmt>
            <if pos:line="56" pos:column="13">if <condition pos:line="56" pos:column="16">(<expr><operator pos:line="56" pos:column="17">!<pos:position pos:line="56" pos:column="18"/></operator><name pos:line="56" pos:column="18">p<pos:position pos:line="56" pos:column="19"/></name></expr>)<pos:position pos:line="56" pos:column="20"/></condition><then pos:line="56" pos:column="20">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="57" pos:column="17">badformat<pos:position pos:line="57" pos:column="26"/></name><argument_list pos:line="57" pos:column="26">()<pos:position pos:line="57" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="29"/></expr_stmt></block></then></if>
            <expr_stmt><expr><name pos:line="58" pos:column="13">size<pos:position pos:line="58" pos:column="17"/></name> <operator pos:line="58" pos:column="18">=<pos:position pos:line="58" pos:column="19"/></operator> <call><name pos:line="58" pos:column="20">atoi<pos:position pos:line="58" pos:column="24"/></name><argument_list pos:line="58" pos:column="24">(<argument><expr><name pos:line="58" pos:column="25">p<pos:position pos:line="58" pos:column="26"/></name></expr></argument>)<pos:position pos:line="58" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="28"/></expr_stmt>
            <expr_stmt><expr><name pos:line="59" pos:column="13">p<pos:position pos:line="59" pos:column="14"/></name> <operator pos:line="59" pos:column="15">=<pos:position pos:line="59" pos:column="16"/></operator> <call><name pos:line="59" pos:column="17">strtok<pos:position pos:line="59" pos:column="23"/></name><argument_list pos:line="59" pos:column="23">(<argument><expr><name pos:line="59" pos:column="24">NULL<pos:position pos:line="59" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="59" pos:column="30">"\n"<pos:position pos:line="59" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="36"/></expr_stmt>
            <if pos:line="60" pos:column="13">if <condition pos:line="60" pos:column="16">(<expr><operator pos:line="60" pos:column="17">!<pos:position pos:line="60" pos:column="18"/></operator><name pos:line="60" pos:column="18">p<pos:position pos:line="60" pos:column="19"/></name></expr>)<pos:position pos:line="60" pos:column="20"/></condition><then pos:line="60" pos:column="20">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="61" pos:column="17">badformat<pos:position pos:line="61" pos:column="26"/></name><argument_list pos:line="61" pos:column="26">()<pos:position pos:line="61" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="29"/></expr_stmt></block></then></if>
            <expr_stmt><expr><name pos:line="62" pos:column="13">mi<pos:position pos:line="62" pos:column="15"/></name> <operator pos:line="62" pos:column="16">=<pos:position pos:line="62" pos:column="17"/></operator> <call><name pos:line="62" pos:column="18">malloc<pos:position pos:line="62" pos:column="24"/></name><argument_list pos:line="62" pos:column="24">(<argument><expr><sizeof pos:line="62" pos:column="25">sizeof<argument_list pos:line="62" pos:column="31">(<argument><expr><name pos:line="62" pos:column="32">memitem<pos:position pos:line="62" pos:column="39"/></name></expr></argument>)<pos:position pos:line="62" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="62" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="42"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="63" pos:column="13">strcpy<pos:position pos:line="63" pos:column="19"/></name><argument_list pos:line="63" pos:column="19">(<argument><expr><name><name pos:line="63" pos:column="20">mi<pos:position pos:line="63" pos:column="22"/></name><operator pos:line="63" pos:column="22">-&gt;<pos:position pos:line="63" pos:column="27"/></operator><name pos:line="63" pos:column="24">orig_ptr<pos:position pos:line="63" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="34">p<pos:position pos:line="63" pos:column="35"/></name></expr></argument>)<pos:position pos:line="63" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="37"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="64" pos:column="13">mi<pos:position pos:line="64" pos:column="15"/></name><operator pos:line="64" pos:column="15">-&gt;<pos:position pos:line="64" pos:column="20"/></operator><name pos:line="64" pos:column="17">size<pos:position pos:line="64" pos:column="21"/></name></name> <operator pos:line="64" pos:column="22">=<pos:position pos:line="64" pos:column="23"/></operator> <name pos:line="64" pos:column="24">size<pos:position pos:line="64" pos:column="28"/></name></expr>;<pos:position pos:line="64" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="65" pos:column="13">size2id<pos:position pos:line="65" pos:column="20"/></name><argument_list pos:line="65" pos:column="20">(<argument><expr><name pos:line="65" pos:column="21">size<pos:position pos:line="65" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="27">mi<pos:position pos:line="65" pos:column="29"/></name></expr></argument>)<pos:position pos:line="65" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="31"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="66" pos:column="13">mi<pos:position pos:line="66" pos:column="15"/></name><operator pos:line="66" pos:column="15">-&gt;<pos:position pos:line="66" pos:column="20"/></operator><name pos:line="66" pos:column="17">my_ptr<pos:position pos:line="66" pos:column="23"/></name></name> <operator pos:line="66" pos:column="24">=<pos:position pos:line="66" pos:column="25"/></operator> <call><name pos:line="66" pos:column="26">xmemAlloc<pos:position pos:line="66" pos:column="35"/></name><argument_list pos:line="66" pos:column="35">(<argument><expr><name pos:line="66" pos:column="36">mi<pos:position pos:line="66" pos:column="38"/></name></expr></argument>)<pos:position pos:line="66" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="40"/></expr_stmt>		<comment type="block" pos:line="66" pos:column="49">/* (void *)xmalloc(size); */</comment>
            <expr_stmt><expr><call><name pos:line="67" pos:column="13">assert<pos:position pos:line="67" pos:column="19"/></name><argument_list pos:line="67" pos:column="19">(<argument><expr><name><name pos:line="67" pos:column="20">mi<pos:position pos:line="67" pos:column="22"/></name><operator pos:line="67" pos:column="22">-&gt;<pos:position pos:line="67" pos:column="27"/></operator><name pos:line="67" pos:column="24">my_ptr<pos:position pos:line="67" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="67" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="32"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="68" pos:column="13">my_hash_insert<pos:position pos:line="68" pos:column="27"/></name><argument_list pos:line="68" pos:column="27">(<argument><expr><name pos:line="68" pos:column="28">mem_table<pos:position pos:line="68" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="68" pos:column="39">mi<pos:position pos:line="68" pos:column="41"/></name><operator pos:line="68" pos:column="41">-&gt;<pos:position pos:line="68" pos:column="46"/></operator><name pos:line="68" pos:column="43">orig_ptr<pos:position pos:line="68" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="53">mi<pos:position pos:line="68" pos:column="55"/></name></expr></argument>)<pos:position pos:line="68" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="57"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="69" pos:column="13">mstat<pos:position pos:line="69" pos:column="18"/></name><operator pos:line="69" pos:column="18">.<pos:position pos:line="69" pos:column="19"/></operator><name pos:line="69" pos:column="19">mallocs<pos:position pos:line="69" pos:column="26"/></name></name><operator pos:line="69" pos:column="26">++<pos:position pos:line="69" pos:column="28"/></operator></expr>;<pos:position pos:line="69" pos:column="29"/></expr_stmt>
            <break pos:line="70" pos:column="13">break;<pos:position pos:line="70" pos:column="19"/></break>
        <case pos:line="71" pos:column="9">case <expr><literal type="char" pos:line="71" pos:column="14">'c'<pos:position pos:line="71" pos:column="17"/></literal></expr>:<pos:position pos:line="71" pos:column="18"/></case>		<comment type="block" pos:line="71" pos:column="33">/* calloc */</comment>
            <expr_stmt><expr><name pos:line="72" pos:column="13">p<pos:position pos:line="72" pos:column="14"/></name> <operator pos:line="72" pos:column="15">=<pos:position pos:line="72" pos:column="16"/></operator> <call><name pos:line="72" pos:column="17">strtok<pos:position pos:line="72" pos:column="23"/></name><argument_list pos:line="72" pos:column="23">(<argument><expr><operator pos:line="72" pos:column="24">&amp;<pos:position pos:line="72" pos:column="29"/></operator><name><name pos:line="72" pos:column="25">mbuf<pos:position pos:line="72" pos:column="29"/></name><index pos:line="72" pos:column="29">[<expr><literal type="number" pos:line="72" pos:column="30">2<pos:position pos:line="72" pos:column="31"/></literal></expr>]<pos:position pos:line="72" pos:column="32"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="72" pos:column="34">":"<pos:position pos:line="72" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="39"/></expr_stmt>
            <if pos:line="73" pos:column="13">if <condition pos:line="73" pos:column="16">(<expr><operator pos:line="73" pos:column="17">!<pos:position pos:line="73" pos:column="18"/></operator><name pos:line="73" pos:column="18">p<pos:position pos:line="73" pos:column="19"/></name></expr>)<pos:position pos:line="73" pos:column="20"/></condition><then pos:line="73" pos:column="20">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="74" pos:column="17">badformat<pos:position pos:line="74" pos:column="26"/></name><argument_list pos:line="74" pos:column="26">()<pos:position pos:line="74" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="29"/></expr_stmt></block></then></if>
            <expr_stmt><expr><name pos:line="75" pos:column="13">amt<pos:position pos:line="75" pos:column="16"/></name> <operator pos:line="75" pos:column="17">=<pos:position pos:line="75" pos:column="18"/></operator> <call><name pos:line="75" pos:column="19">atoi<pos:position pos:line="75" pos:column="23"/></name><argument_list pos:line="75" pos:column="23">(<argument><expr><name pos:line="75" pos:column="24">p<pos:position pos:line="75" pos:column="25"/></name></expr></argument>)<pos:position pos:line="75" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="27"/></expr_stmt>
            <expr_stmt><expr><name pos:line="76" pos:column="13">p<pos:position pos:line="76" pos:column="14"/></name> <operator pos:line="76" pos:column="15">=<pos:position pos:line="76" pos:column="16"/></operator> <call><name pos:line="76" pos:column="17">strtok<pos:position pos:line="76" pos:column="23"/></name><argument_list pos:line="76" pos:column="23">(<argument><expr><name pos:line="76" pos:column="24">NULL<pos:position pos:line="76" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="30">":"<pos:position pos:line="76" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="35"/></expr_stmt>
            <if pos:line="77" pos:column="13">if <condition pos:line="77" pos:column="16">(<expr><operator pos:line="77" pos:column="17">!<pos:position pos:line="77" pos:column="18"/></operator><name pos:line="77" pos:column="18">p<pos:position pos:line="77" pos:column="19"/></name></expr>)<pos:position pos:line="77" pos:column="20"/></condition><then pos:line="77" pos:column="20">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="78" pos:column="17">badformat<pos:position pos:line="78" pos:column="26"/></name><argument_list pos:line="78" pos:column="26">()<pos:position pos:line="78" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="29"/></expr_stmt></block></then></if>
            <expr_stmt><expr><name pos:line="79" pos:column="13">size<pos:position pos:line="79" pos:column="17"/></name> <operator pos:line="79" pos:column="18">=<pos:position pos:line="79" pos:column="19"/></operator> <call><name pos:line="79" pos:column="20">atoi<pos:position pos:line="79" pos:column="24"/></name><argument_list pos:line="79" pos:column="24">(<argument><expr><name pos:line="79" pos:column="25">p<pos:position pos:line="79" pos:column="26"/></name></expr></argument>)<pos:position pos:line="79" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="28"/></expr_stmt>
            <expr_stmt><expr><name pos:line="80" pos:column="13">p<pos:position pos:line="80" pos:column="14"/></name> <operator pos:line="80" pos:column="15">=<pos:position pos:line="80" pos:column="16"/></operator> <call><name pos:line="80" pos:column="17">strtok<pos:position pos:line="80" pos:column="23"/></name><argument_list pos:line="80" pos:column="23">(<argument><expr><name pos:line="80" pos:column="24">NULL<pos:position pos:line="80" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="80" pos:column="30">"\n"<pos:position pos:line="80" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="36"/></expr_stmt>
            <if pos:line="81" pos:column="13">if <condition pos:line="81" pos:column="16">(<expr><operator pos:line="81" pos:column="17">!<pos:position pos:line="81" pos:column="18"/></operator><name pos:line="81" pos:column="18">p<pos:position pos:line="81" pos:column="19"/></name></expr>)<pos:position pos:line="81" pos:column="20"/></condition><then pos:line="81" pos:column="20">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="82" pos:column="17">badformat<pos:position pos:line="82" pos:column="26"/></name><argument_list pos:line="82" pos:column="26">()<pos:position pos:line="82" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="29"/></expr_stmt></block></then></if>
            <expr_stmt><expr><name pos:line="83" pos:column="13">mi<pos:position pos:line="83" pos:column="15"/></name> <operator pos:line="83" pos:column="16">=<pos:position pos:line="83" pos:column="17"/></operator> <call><name pos:line="83" pos:column="18">malloc<pos:position pos:line="83" pos:column="24"/></name><argument_list pos:line="83" pos:column="24">(<argument><expr><sizeof pos:line="83" pos:column="25">sizeof<argument_list pos:line="83" pos:column="31">(<argument><expr><name pos:line="83" pos:column="32">memitem<pos:position pos:line="83" pos:column="39"/></name></expr></argument>)<pos:position pos:line="83" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="83" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="42"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="84" pos:column="13">strcpy<pos:position pos:line="84" pos:column="19"/></name><argument_list pos:line="84" pos:column="19">(<argument><expr><name><name pos:line="84" pos:column="20">mi<pos:position pos:line="84" pos:column="22"/></name><operator pos:line="84" pos:column="22">-&gt;<pos:position pos:line="84" pos:column="27"/></operator><name pos:line="84" pos:column="24">orig_ptr<pos:position pos:line="84" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="34">p<pos:position pos:line="84" pos:column="35"/></name></expr></argument>)<pos:position pos:line="84" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="37"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="85" pos:column="13">size2id<pos:position pos:line="85" pos:column="20"/></name><argument_list pos:line="85" pos:column="20">(<argument><expr><name pos:line="85" pos:column="21">size<pos:position pos:line="85" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="27">mi<pos:position pos:line="85" pos:column="29"/></name></expr></argument>)<pos:position pos:line="85" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="31"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="86" pos:column="13">mi<pos:position pos:line="86" pos:column="15"/></name><operator pos:line="86" pos:column="15">-&gt;<pos:position pos:line="86" pos:column="20"/></operator><name pos:line="86" pos:column="17">size<pos:position pos:line="86" pos:column="21"/></name></name> <operator pos:line="86" pos:column="22">=<pos:position pos:line="86" pos:column="23"/></operator> <name pos:line="86" pos:column="24">amt<pos:position pos:line="86" pos:column="27"/></name> <operator pos:line="86" pos:column="28">*<pos:position pos:line="86" pos:column="29"/></operator> <name pos:line="86" pos:column="30">size<pos:position pos:line="86" pos:column="34"/></name></expr>;<pos:position pos:line="86" pos:column="35"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="87" pos:column="13">mi<pos:position pos:line="87" pos:column="15"/></name><operator pos:line="87" pos:column="15">-&gt;<pos:position pos:line="87" pos:column="20"/></operator><name pos:line="87" pos:column="17">my_ptr<pos:position pos:line="87" pos:column="23"/></name></name> <operator pos:line="87" pos:column="24">=<pos:position pos:line="87" pos:column="25"/></operator> <call><name pos:line="87" pos:column="26">xmemAlloc<pos:position pos:line="87" pos:column="35"/></name><argument_list pos:line="87" pos:column="35">(<argument><expr><name pos:line="87" pos:column="36">mi<pos:position pos:line="87" pos:column="38"/></name></expr></argument>)<pos:position pos:line="87" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="40"/></expr_stmt>		<comment type="block" pos:line="87" pos:column="49">/*(void *)xmalloc(amt*size); */</comment>
            <expr_stmt><expr><call><name pos:line="88" pos:column="13">assert<pos:position pos:line="88" pos:column="19"/></name><argument_list pos:line="88" pos:column="19">(<argument><expr><name><name pos:line="88" pos:column="20">mi<pos:position pos:line="88" pos:column="22"/></name><operator pos:line="88" pos:column="22">-&gt;<pos:position pos:line="88" pos:column="27"/></operator><name pos:line="88" pos:column="24">my_ptr<pos:position pos:line="88" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="88" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="32"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="89" pos:column="13">my_hash_insert<pos:position pos:line="89" pos:column="27"/></name><argument_list pos:line="89" pos:column="27">(<argument><expr><name pos:line="89" pos:column="28">mem_table<pos:position pos:line="89" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="89" pos:column="39">mi<pos:position pos:line="89" pos:column="41"/></name><operator pos:line="89" pos:column="41">-&gt;<pos:position pos:line="89" pos:column="46"/></operator><name pos:line="89" pos:column="43">orig_ptr<pos:position pos:line="89" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="53">mi<pos:position pos:line="89" pos:column="55"/></name></expr></argument>)<pos:position pos:line="89" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="57"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="90" pos:column="13">mstat<pos:position pos:line="90" pos:column="18"/></name><operator pos:line="90" pos:column="18">.<pos:position pos:line="90" pos:column="19"/></operator><name pos:line="90" pos:column="19">callocs<pos:position pos:line="90" pos:column="26"/></name></name><operator pos:line="90" pos:column="26">++<pos:position pos:line="90" pos:column="28"/></operator></expr>;<pos:position pos:line="90" pos:column="29"/></expr_stmt>
            <break pos:line="91" pos:column="13">break;<pos:position pos:line="91" pos:column="19"/></break>
        <case pos:line="92" pos:column="9">case <expr><literal type="char" pos:line="92" pos:column="14">'r'<pos:position pos:line="92" pos:column="17"/></literal></expr>:<pos:position pos:line="92" pos:column="18"/></case>
            <expr_stmt><expr><name pos:line="93" pos:column="13">p<pos:position pos:line="93" pos:column="14"/></name> <operator pos:line="93" pos:column="15">=<pos:position pos:line="93" pos:column="16"/></operator> <call><name pos:line="93" pos:column="17">strtok<pos:position pos:line="93" pos:column="23"/></name><argument_list pos:line="93" pos:column="23">(<argument><expr><operator pos:line="93" pos:column="24">&amp;<pos:position pos:line="93" pos:column="29"/></operator><name><name pos:line="93" pos:column="25">mbuf<pos:position pos:line="93" pos:column="29"/></name><index pos:line="93" pos:column="29">[<expr><literal type="number" pos:line="93" pos:column="30">2<pos:position pos:line="93" pos:column="31"/></literal></expr>]<pos:position pos:line="93" pos:column="32"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="93" pos:column="34">":"<pos:position pos:line="93" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="39"/></expr_stmt>
            <if pos:line="94" pos:column="13">if <condition pos:line="94" pos:column="16">(<expr><operator pos:line="94" pos:column="17">!<pos:position pos:line="94" pos:column="18"/></operator><name pos:line="94" pos:column="18">p<pos:position pos:line="94" pos:column="19"/></name></expr>)<pos:position pos:line="94" pos:column="20"/></condition><then pos:line="94" pos:column="20">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="95" pos:column="17">badformat<pos:position pos:line="95" pos:column="26"/></name><argument_list pos:line="95" pos:column="26">()<pos:position pos:line="95" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="29"/></expr_stmt></block></then></if>
            <expr_stmt><expr><call><name pos:line="96" pos:column="13">strcpy<pos:position pos:line="96" pos:column="19"/></name><argument_list pos:line="96" pos:column="19">(<argument><expr><name pos:line="96" pos:column="20">abuf<pos:position pos:line="96" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="26">p<pos:position pos:line="96" pos:column="27"/></name></expr></argument>)<pos:position pos:line="96" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><name pos:line="97" pos:column="13">p<pos:position pos:line="97" pos:column="14"/></name> <operator pos:line="97" pos:column="15">=<pos:position pos:line="97" pos:column="16"/></operator> <call><name pos:line="97" pos:column="17">strtok<pos:position pos:line="97" pos:column="23"/></name><argument_list pos:line="97" pos:column="23">(<argument><expr><name pos:line="97" pos:column="24">NULL<pos:position pos:line="97" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="97" pos:column="30">":"<pos:position pos:line="97" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="97" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="35"/></expr_stmt>
            <if pos:line="98" pos:column="13">if <condition pos:line="98" pos:column="16">(<expr><operator pos:line="98" pos:column="17">!<pos:position pos:line="98" pos:column="18"/></operator><name pos:line="98" pos:column="18">p<pos:position pos:line="98" pos:column="19"/></name></expr>)<pos:position pos:line="98" pos:column="20"/></condition><then pos:line="98" pos:column="20">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="99" pos:column="17">badformat<pos:position pos:line="99" pos:column="26"/></name><argument_list pos:line="99" pos:column="26">()<pos:position pos:line="99" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="29"/></expr_stmt></block></then></if>
            <expr_stmt><expr><name pos:line="100" pos:column="13">mem_entry<pos:position pos:line="100" pos:column="22"/></name> <operator pos:line="100" pos:column="23">=<pos:position pos:line="100" pos:column="24"/></operator> <call><name pos:line="100" pos:column="25">hash_lookup<pos:position pos:line="100" pos:column="36"/></name><argument_list pos:line="100" pos:column="36">(<argument><expr><name pos:line="100" pos:column="37">mem_table<pos:position pos:line="100" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="48">p<pos:position pos:line="100" pos:column="49"/></name></expr></argument>)<pos:position pos:line="100" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="51"/></expr_stmt>
            <if pos:line="101" pos:column="13">if <condition pos:line="101" pos:column="16">(<expr><name pos:line="101" pos:column="17">mem_entry<pos:position pos:line="101" pos:column="26"/></name> <operator pos:line="101" pos:column="27">==<pos:position pos:line="101" pos:column="29"/></operator> <name pos:line="101" pos:column="30">NULL<pos:position pos:line="101" pos:column="34"/></name></expr>)<pos:position pos:line="101" pos:column="35"/></condition><then pos:line="101" pos:column="35"> <block pos:line="101" pos:column="36">{
                <expr_stmt><expr><call><name pos:line="102" pos:column="17">fprintf<pos:position pos:line="102" pos:column="24"/></name><argument_list pos:line="102" pos:column="24">(<argument><expr><name pos:line="102" pos:column="25">stderr<pos:position pos:line="102" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="102" pos:column="33">"invalid realloc (%s)!\n"<pos:position pos:line="102" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="102" pos:column="60">p<pos:position pos:line="102" pos:column="61"/></name></expr></argument>)<pos:position pos:line="102" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="63"/></expr_stmt>
                <break pos:line="103" pos:column="17">break;<pos:position pos:line="103" pos:column="23"/></break>
            }<pos:position pos:line="104" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name pos:line="105" pos:column="13">mi<pos:position pos:line="105" pos:column="15"/></name> <operator pos:line="105" pos:column="16">=<pos:position pos:line="105" pos:column="17"/></operator> <operator pos:line="105" pos:column="18">(<pos:position pos:line="105" pos:column="19"/></operator><name pos:line="105" pos:column="19">memitem<pos:position pos:line="105" pos:column="26"/></name> <operator pos:line="105" pos:column="27">*<pos:position pos:line="105" pos:column="28"/></operator><operator pos:line="105" pos:column="28">)<pos:position pos:line="105" pos:column="29"/></operator> <operator pos:line="105" pos:column="30">(<pos:position pos:line="105" pos:column="31"/></operator><name><name pos:line="105" pos:column="31">mem_entry<pos:position pos:line="105" pos:column="40"/></name><operator pos:line="105" pos:column="40">-&gt;<pos:position pos:line="105" pos:column="45"/></operator><name pos:line="105" pos:column="42">item<pos:position pos:line="105" pos:column="46"/></name></name><operator pos:line="105" pos:column="46">)<pos:position pos:line="105" pos:column="47"/></operator></expr>;<pos:position pos:line="105" pos:column="48"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="106" pos:column="13">assert<pos:position pos:line="106" pos:column="19"/></name><argument_list pos:line="106" pos:column="19">(<argument><expr><name><name pos:line="106" pos:column="20">mi<pos:position pos:line="106" pos:column="22"/></name><operator pos:line="106" pos:column="22">-&gt;<pos:position pos:line="106" pos:column="27"/></operator><name pos:line="106" pos:column="24">pool<pos:position pos:line="106" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="106" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="30"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="107" pos:column="13">assert<pos:position pos:line="107" pos:column="19"/></name><argument_list pos:line="107" pos:column="19">(<argument><expr><name><name pos:line="107" pos:column="20">mi<pos:position pos:line="107" pos:column="22"/></name><operator pos:line="107" pos:column="22">-&gt;<pos:position pos:line="107" pos:column="27"/></operator><name pos:line="107" pos:column="24">my_ptr<pos:position pos:line="107" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="107" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="32"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="108" pos:column="13">xmemFree<pos:position pos:line="108" pos:column="21"/></name><argument_list pos:line="108" pos:column="21">(<argument><expr><name pos:line="108" pos:column="22">mi<pos:position pos:line="108" pos:column="24"/></name></expr></argument>)<pos:position pos:line="108" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="26"/></expr_stmt>	<comment type="block" pos:line="108" pos:column="33">/* xfree(mi-&gt;my_ptr); */</comment>
            <expr_stmt><expr><call><name pos:line="109" pos:column="13">size2id<pos:position pos:line="109" pos:column="20"/></name><argument_list pos:line="109" pos:column="20">(<argument><expr><call><name pos:line="109" pos:column="21">atoi<pos:position pos:line="109" pos:column="25"/></name><argument_list pos:line="109" pos:column="25">(<argument><expr><name pos:line="109" pos:column="26">p<pos:position pos:line="109" pos:column="27"/></name></expr></argument>)<pos:position pos:line="109" pos:column="28"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="109" pos:column="30">mi<pos:position pos:line="109" pos:column="32"/></name></expr></argument>)<pos:position pos:line="109" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="34"/></expr_stmt>	<comment type="block" pos:line="109" pos:column="41">/* we don't need it here I guess? */</comment>
            <expr_stmt><expr><call><name pos:line="110" pos:column="13">strcpy<pos:position pos:line="110" pos:column="19"/></name><argument_list pos:line="110" pos:column="19">(<argument><expr><name><name pos:line="110" pos:column="20">mi<pos:position pos:line="110" pos:column="22"/></name><operator pos:line="110" pos:column="22">-&gt;<pos:position pos:line="110" pos:column="27"/></operator><name pos:line="110" pos:column="24">orig_ptr<pos:position pos:line="110" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="110" pos:column="34">abuf<pos:position pos:line="110" pos:column="38"/></name></expr></argument>)<pos:position pos:line="110" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="40"/></expr_stmt>
            <expr_stmt><expr><name pos:line="111" pos:column="13">p<pos:position pos:line="111" pos:column="14"/></name> <operator pos:line="111" pos:column="15">=<pos:position pos:line="111" pos:column="16"/></operator> <call><name pos:line="111" pos:column="17">strtok<pos:position pos:line="111" pos:column="23"/></name><argument_list pos:line="111" pos:column="23">(<argument><expr><name pos:line="111" pos:column="24">NULL<pos:position pos:line="111" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="111" pos:column="30">"\n"<pos:position pos:line="111" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="111" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="36"/></expr_stmt>
            <if pos:line="112" pos:column="13">if <condition pos:line="112" pos:column="16">(<expr><operator pos:line="112" pos:column="17">!<pos:position pos:line="112" pos:column="18"/></operator><name pos:line="112" pos:column="18">p<pos:position pos:line="112" pos:column="19"/></name></expr>)<pos:position pos:line="112" pos:column="20"/></condition><then pos:line="112" pos:column="20">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="113" pos:column="17">badformat<pos:position pos:line="113" pos:column="26"/></name><argument_list pos:line="113" pos:column="26">()<pos:position pos:line="113" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="29"/></expr_stmt></block></then></if>
            <expr_stmt><expr><name><name pos:line="114" pos:column="13">mi<pos:position pos:line="114" pos:column="15"/></name><operator pos:line="114" pos:column="15">-&gt;<pos:position pos:line="114" pos:column="20"/></operator><name pos:line="114" pos:column="17">my_ptr<pos:position pos:line="114" pos:column="23"/></name></name> <operator pos:line="114" pos:column="24">=<pos:position pos:line="114" pos:column="25"/></operator> <call><name pos:line="114" pos:column="26">xmemAlloc<pos:position pos:line="114" pos:column="35"/></name><argument_list pos:line="114" pos:column="35">(<argument><expr><name pos:line="114" pos:column="36">mi<pos:position pos:line="114" pos:column="38"/></name></expr></argument>)<pos:position pos:line="114" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="40"/></expr_stmt>		<comment type="block" pos:line="114" pos:column="49">/* (char *)xmalloc(atoi(p)); */</comment>
            <expr_stmt><expr><call><name pos:line="115" pos:column="13">assert<pos:position pos:line="115" pos:column="19"/></name><argument_list pos:line="115" pos:column="19">(<argument><expr><name><name pos:line="115" pos:column="20">mi<pos:position pos:line="115" pos:column="22"/></name><operator pos:line="115" pos:column="22">-&gt;<pos:position pos:line="115" pos:column="27"/></operator><name pos:line="115" pos:column="24">my_ptr<pos:position pos:line="115" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="115" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="32"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="116" pos:column="13">mstat<pos:position pos:line="116" pos:column="18"/></name><operator pos:line="116" pos:column="18">.<pos:position pos:line="116" pos:column="19"/></operator><name pos:line="116" pos:column="19">reallocs<pos:position pos:line="116" pos:column="27"/></name></name><operator pos:line="116" pos:column="27">++<pos:position pos:line="116" pos:column="29"/></operator></expr>;<pos:position pos:line="116" pos:column="30"/></expr_stmt>
            <break pos:line="117" pos:column="13">break;<pos:position pos:line="117" pos:column="19"/></break>
        <case pos:line="118" pos:column="9">case <expr><literal type="char" pos:line="118" pos:column="14">'f'<pos:position pos:line="118" pos:column="17"/></literal></expr>:<pos:position pos:line="118" pos:column="18"/></case>
            <expr_stmt><expr><name pos:line="119" pos:column="13">p<pos:position pos:line="119" pos:column="14"/></name> <operator pos:line="119" pos:column="15">=<pos:position pos:line="119" pos:column="16"/></operator> <call><name pos:line="119" pos:column="17">strtok<pos:position pos:line="119" pos:column="23"/></name><argument_list pos:line="119" pos:column="23">(<argument><expr><operator pos:line="119" pos:column="24">&amp;<pos:position pos:line="119" pos:column="29"/></operator><name><name pos:line="119" pos:column="25">mbuf<pos:position pos:line="119" pos:column="29"/></name><index pos:line="119" pos:column="29">[<expr><literal type="number" pos:line="119" pos:column="30">2<pos:position pos:line="119" pos:column="31"/></literal></expr>]<pos:position pos:line="119" pos:column="32"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="119" pos:column="34">"\n"<pos:position pos:line="119" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="119" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="40"/></expr_stmt>
            <expr_stmt><expr><name pos:line="120" pos:column="13">mem_entry<pos:position pos:line="120" pos:column="22"/></name> <operator pos:line="120" pos:column="23">=<pos:position pos:line="120" pos:column="24"/></operator> <call><name pos:line="120" pos:column="25">hash_lookup<pos:position pos:line="120" pos:column="36"/></name><argument_list pos:line="120" pos:column="36">(<argument><expr><name pos:line="120" pos:column="37">mem_table<pos:position pos:line="120" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="48">p<pos:position pos:line="120" pos:column="49"/></name></expr></argument>)<pos:position pos:line="120" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="51"/></expr_stmt>
            <if pos:line="121" pos:column="13">if <condition pos:line="121" pos:column="16">(<expr><name pos:line="121" pos:column="17">mem_entry<pos:position pos:line="121" pos:column="26"/></name> <operator pos:line="121" pos:column="27">==<pos:position pos:line="121" pos:column="29"/></operator> <name pos:line="121" pos:column="30">NULL<pos:position pos:line="121" pos:column="34"/></name></expr>)<pos:position pos:line="121" pos:column="35"/></condition><then pos:line="121" pos:column="35"> <block pos:line="121" pos:column="36">{
                <if pos:line="122" pos:column="17">if <condition pos:line="122" pos:column="20">(<expr><name><name pos:line="122" pos:column="21">p<pos:position pos:line="122" pos:column="22"/></name><index pos:line="122" pos:column="22">[<expr><literal type="number" pos:line="122" pos:column="23">0<pos:position pos:line="122" pos:column="24"/></literal></expr>]<pos:position pos:line="122" pos:column="25"/></index></name> <operator pos:line="122" pos:column="26">!=<pos:position pos:line="122" pos:column="28"/></operator> <literal type="char" pos:line="122" pos:column="29">'0'<pos:position pos:line="122" pos:column="32"/></literal></expr>)<pos:position pos:line="122" pos:column="33"/></condition><then pos:line="122" pos:column="33">
                    <block type="pseudo"><expr_stmt><expr><call><name pos:line="123" pos:column="21">fprintf<pos:position pos:line="123" pos:column="28"/></name><argument_list pos:line="123" pos:column="28">(<argument><expr><name pos:line="123" pos:column="29">stderr<pos:position pos:line="123" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="123" pos:column="37">"invalid free (%s) at line %d!\n"<pos:position pos:line="123" pos:column="70"/></literal></expr></argument>, <argument><expr><name pos:line="123" pos:column="72">p<pos:position pos:line="123" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="123" pos:column="75">a<pos:position pos:line="123" pos:column="76"/></name></expr></argument>)<pos:position pos:line="123" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="78"/></expr_stmt></block></then></if>
                <break pos:line="124" pos:column="17">break;<pos:position pos:line="124" pos:column="23"/></break>
            }<pos:position pos:line="125" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name pos:line="126" pos:column="13">mi<pos:position pos:line="126" pos:column="15"/></name> <operator pos:line="126" pos:column="16">=<pos:position pos:line="126" pos:column="17"/></operator> <operator pos:line="126" pos:column="18">(<pos:position pos:line="126" pos:column="19"/></operator><name pos:line="126" pos:column="19">memitem<pos:position pos:line="126" pos:column="26"/></name> <operator pos:line="126" pos:column="27">*<pos:position pos:line="126" pos:column="28"/></operator><operator pos:line="126" pos:column="28">)<pos:position pos:line="126" pos:column="29"/></operator> <operator pos:line="126" pos:column="30">(<pos:position pos:line="126" pos:column="31"/></operator><name><name pos:line="126" pos:column="31">mem_entry<pos:position pos:line="126" pos:column="40"/></name><operator pos:line="126" pos:column="40">-&gt;<pos:position pos:line="126" pos:column="45"/></operator><name pos:line="126" pos:column="42">item<pos:position pos:line="126" pos:column="46"/></name></name><operator pos:line="126" pos:column="46">)<pos:position pos:line="126" pos:column="47"/></operator></expr>;<pos:position pos:line="126" pos:column="48"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="127" pos:column="13">assert<pos:position pos:line="127" pos:column="19"/></name><argument_list pos:line="127" pos:column="19">(<argument><expr><name><name pos:line="127" pos:column="20">mi<pos:position pos:line="127" pos:column="22"/></name><operator pos:line="127" pos:column="22">-&gt;<pos:position pos:line="127" pos:column="27"/></operator><name pos:line="127" pos:column="24">pool<pos:position pos:line="127" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="127" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="30"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="128" pos:column="13">assert<pos:position pos:line="128" pos:column="19"/></name><argument_list pos:line="128" pos:column="19">(<argument><expr><name><name pos:line="128" pos:column="20">mi<pos:position pos:line="128" pos:column="22"/></name><operator pos:line="128" pos:column="22">-&gt;<pos:position pos:line="128" pos:column="27"/></operator><name pos:line="128" pos:column="24">my_ptr<pos:position pos:line="128" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="128" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="32"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="129" pos:column="13">xmemFree<pos:position pos:line="129" pos:column="21"/></name><argument_list pos:line="129" pos:column="21">(<argument><expr><name pos:line="129" pos:column="22">mi<pos:position pos:line="129" pos:column="24"/></name></expr></argument>)<pos:position pos:line="129" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="26"/></expr_stmt>	<comment type="block" pos:line="129" pos:column="33">/* xfree(mi-&gt;my_ptr); */</comment>
            <expr_stmt><expr><call><name pos:line="130" pos:column="13">hash_unlink<pos:position pos:line="130" pos:column="24"/></name><argument_list pos:line="130" pos:column="24">(<argument><expr><name pos:line="130" pos:column="25">mem_table<pos:position pos:line="130" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="130" pos:column="36">mem_entry<pos:position pos:line="130" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="130" pos:column="47">1<pos:position pos:line="130" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="130" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="50"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="131" pos:column="13">free<pos:position pos:line="131" pos:column="17"/></name><argument_list pos:line="131" pos:column="17">(<argument><expr><name pos:line="131" pos:column="18">mi<pos:position pos:line="131" pos:column="20"/></name></expr></argument>)<pos:position pos:line="131" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="22"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="132" pos:column="13">mstat<pos:position pos:line="132" pos:column="18"/></name><operator pos:line="132" pos:column="18">.<pos:position pos:line="132" pos:column="19"/></operator><name pos:line="132" pos:column="19">frees<pos:position pos:line="132" pos:column="24"/></name></name><operator pos:line="132" pos:column="24">++<pos:position pos:line="132" pos:column="26"/></operator></expr>;<pos:position pos:line="132" pos:column="27"/></expr_stmt>
            <break pos:line="133" pos:column="13">break;<pos:position pos:line="133" pos:column="19"/></break>
        <default pos:line="134" pos:column="9">default:<pos:position pos:line="134" pos:column="17"/></default>
            <expr_stmt><expr><call><name pos:line="135" pos:column="13">fprintf<pos:position pos:line="135" pos:column="20"/></name><argument_list pos:line="135" pos:column="20">(<argument><expr><name pos:line="135" pos:column="21">stderr<pos:position pos:line="135" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="135" pos:column="29">"%s pummels %s.bad.format\n"<pos:position pos:line="135" pos:column="57"/></literal></expr></argument>, <argument><expr><name><name pos:line="135" pos:column="59">argv<pos:position pos:line="135" pos:column="63"/></name><index pos:line="135" pos:column="63">[<expr><literal type="number" pos:line="135" pos:column="64">0<pos:position pos:line="135" pos:column="65"/></literal></expr>]<pos:position pos:line="135" pos:column="66"/></index></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="68">fn<pos:position pos:line="135" pos:column="70"/></name></expr></argument>)<pos:position pos:line="135" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="72"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="136" pos:column="13">exit<pos:position pos:line="136" pos:column="17"/></name><argument_list pos:line="136" pos:column="17">(<argument><expr><literal type="number" pos:line="136" pos:column="18">1<pos:position pos:line="136" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="136" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="21"/></expr_stmt>
        }<pos:position pos:line="137" pos:column="10"/></block></switch>

    }<pos:position pos:line="139" pos:column="6"/></block></while>
    <expr_stmt><expr><call><name pos:line="140" pos:column="5">fclose<pos:position pos:line="140" pos:column="11"/></name><argument_list pos:line="140" pos:column="11">(<argument><expr><name pos:line="140" pos:column="12">fp<pos:position pos:line="140" pos:column="14"/></name></expr></argument>)<pos:position pos:line="140" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="141" pos:column="5">print_stats<pos:position pos:line="141" pos:column="16"/></name><argument_list pos:line="141" pos:column="16">()<pos:position pos:line="141" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="19"/></expr_stmt>
}<pos:position pos:line="142" pos:column="2"/></block></function></unit>
