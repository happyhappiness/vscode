<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1085_squid-3.4.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">parse_authparam<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name><name pos:line="2" pos:column="17">Auth<pos:position pos:line="2" pos:column="21"/></name><operator pos:line="2" pos:column="21">::<pos:position pos:line="2" pos:column="23"/></operator><name pos:line="2" pos:column="23">ConfigVector<pos:position pos:line="2" pos:column="35"/></name></name> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type> <name pos:line="2" pos:column="38">config<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="45"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">type_str<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">param_str<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><operator pos:line="7" pos:column="9">(<pos:position pos:line="7" pos:column="10"/></operator><name pos:line="7" pos:column="10">type_str<pos:position pos:line="7" pos:column="18"/></name> <operator pos:line="7" pos:column="19">=<pos:position pos:line="7" pos:column="20"/></operator> <call><name pos:line="7" pos:column="21">strtok<pos:position pos:line="7" pos:column="27"/></name><argument_list pos:line="7" pos:column="27">(<argument><expr><name pos:line="7" pos:column="28">NULL<pos:position pos:line="7" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="34">w_space<pos:position pos:line="7" pos:column="41"/></name></expr></argument>)<pos:position pos:line="7" pos:column="42"/></argument_list></call><operator pos:line="7" pos:column="42">)<pos:position pos:line="7" pos:column="43"/></operator> <operator pos:line="7" pos:column="44">==<pos:position pos:line="7" pos:column="46"/></operator> <name pos:line="7" pos:column="47">NULL<pos:position pos:line="7" pos:column="51"/></name></expr>)<pos:position pos:line="7" pos:column="52"/></condition><then pos:line="7" pos:column="52">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="8" pos:column="9">self_destruct<pos:position pos:line="8" pos:column="22"/></name><argument_list pos:line="8" pos:column="22">()<pos:position pos:line="8" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="25"/></expr_stmt></block></then></if>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><operator pos:line="10" pos:column="9">(<pos:position pos:line="10" pos:column="10"/></operator><name pos:line="10" pos:column="10">param_str<pos:position pos:line="10" pos:column="19"/></name> <operator pos:line="10" pos:column="20">=<pos:position pos:line="10" pos:column="21"/></operator> <call><name pos:line="10" pos:column="22">strtok<pos:position pos:line="10" pos:column="28"/></name><argument_list pos:line="10" pos:column="28">(<argument><expr><name pos:line="10" pos:column="29">NULL<pos:position pos:line="10" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="35">w_space<pos:position pos:line="10" pos:column="42"/></name></expr></argument>)<pos:position pos:line="10" pos:column="43"/></argument_list></call><operator pos:line="10" pos:column="43">)<pos:position pos:line="10" pos:column="44"/></operator> <operator pos:line="10" pos:column="45">==<pos:position pos:line="10" pos:column="47"/></operator> <name pos:line="10" pos:column="48">NULL<pos:position pos:line="10" pos:column="52"/></name></expr>)<pos:position pos:line="10" pos:column="53"/></condition><then pos:line="10" pos:column="53">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="9">self_destruct<pos:position pos:line="11" pos:column="22"/></name><argument_list pos:line="11" pos:column="22">()<pos:position pos:line="11" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="25"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="13" pos:column="5">/* find a configuration for the scheme in the currently parsed configs... */</comment>
    <decl_stmt><decl><type><name><name pos:line="14" pos:column="5">Auth<pos:position pos:line="14" pos:column="9"/></name><operator pos:line="14" pos:column="9">::<pos:position pos:line="14" pos:column="11"/></operator><name pos:line="14" pos:column="11">Config<pos:position pos:line="14" pos:column="17"/></name></name> <modifier pos:line="14" pos:column="18">*<pos:position pos:line="14" pos:column="19"/></modifier></type><name pos:line="14" pos:column="19">schemeCfg<pos:position pos:line="14" pos:column="28"/></name> <init pos:line="14" pos:column="29">= <expr><call><name><name pos:line="14" pos:column="31">Auth<pos:position pos:line="14" pos:column="35"/></name><operator pos:line="14" pos:column="35">::<pos:position pos:line="14" pos:column="37"/></operator><name pos:line="14" pos:column="37">Config<pos:position pos:line="14" pos:column="43"/></name><operator pos:line="14" pos:column="43">::<pos:position pos:line="14" pos:column="45"/></operator><name pos:line="14" pos:column="45">Find<pos:position pos:line="14" pos:column="49"/></name></name><argument_list pos:line="14" pos:column="49">(<argument><expr><name pos:line="14" pos:column="50">type_str<pos:position pos:line="14" pos:column="58"/></name></expr></argument>)<pos:position pos:line="14" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="60"/></decl_stmt>

    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name pos:line="16" pos:column="9">schemeCfg<pos:position pos:line="16" pos:column="18"/></name> <operator pos:line="16" pos:column="19">==<pos:position pos:line="16" pos:column="21"/></operator> <name pos:line="16" pos:column="22">NULL<pos:position pos:line="16" pos:column="26"/></name></expr>)<pos:position pos:line="16" pos:column="27"/></condition><then pos:line="16" pos:column="27"> <block pos:line="16" pos:column="28">{
        <comment type="block" pos:line="17" pos:column="9">/* Create a configuration based on the scheme info */</comment>
        <decl_stmt><decl><type><name><name pos:line="18" pos:column="9">Auth<pos:position pos:line="18" pos:column="13"/></name><operator pos:line="18" pos:column="13">::<pos:position pos:line="18" pos:column="15"/></operator><name pos:line="18" pos:column="15">Scheme<pos:position pos:line="18" pos:column="21"/></name><operator pos:line="18" pos:column="21">::<pos:position pos:line="18" pos:column="23"/></operator><name pos:line="18" pos:column="23">Pointer<pos:position pos:line="18" pos:column="30"/></name></name></type> <name pos:line="18" pos:column="31">theScheme<pos:position pos:line="18" pos:column="40"/></name> <init pos:line="18" pos:column="41">= <expr><call><name><name pos:line="18" pos:column="43">Auth<pos:position pos:line="18" pos:column="47"/></name><operator pos:line="18" pos:column="47">::<pos:position pos:line="18" pos:column="49"/></operator><name pos:line="18" pos:column="49">Scheme<pos:position pos:line="18" pos:column="55"/></name><operator pos:line="18" pos:column="55">::<pos:position pos:line="18" pos:column="57"/></operator><name pos:line="18" pos:column="57">Find<pos:position pos:line="18" pos:column="61"/></name></name><argument_list pos:line="18" pos:column="61">(<argument><expr><name pos:line="18" pos:column="62">type_str<pos:position pos:line="18" pos:column="70"/></name></expr></argument>)<pos:position pos:line="18" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="18" pos:column="72"/></decl_stmt>

        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">theScheme<pos:position pos:line="20" pos:column="22"/></name> <operator pos:line="20" pos:column="23">==<pos:position pos:line="20" pos:column="25"/></operator> <name pos:line="20" pos:column="26">NULL<pos:position pos:line="20" pos:column="30"/></name></expr>)<pos:position pos:line="20" pos:column="31"/></condition><then pos:line="20" pos:column="31"> <block pos:line="20" pos:column="32">{
            <expr_stmt><expr><call><name pos:line="21" pos:column="13">debugs<pos:position pos:line="21" pos:column="19"/></name><argument_list pos:line="21" pos:column="19">(<argument><expr><literal type="number" pos:line="21" pos:column="20">3<pos:position pos:line="21" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="23">DBG_CRITICAL<pos:position pos:line="21" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="37">"Parsing Config File: Unknown authentication scheme '"<pos:position pos:line="21" pos:column="91"/></literal> <operator pos:line="21" pos:column="92">&lt;&lt;<pos:position pos:line="21" pos:column="100"/></operator> <name pos:line="21" pos:column="95">type_str<pos:position pos:line="21" pos:column="103"/></name> <operator pos:line="21" pos:column="104">&lt;&lt;<pos:position pos:line="21" pos:column="112"/></operator> <literal type="string" pos:line="21" pos:column="107">"'."<pos:position pos:line="21" pos:column="111"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="112"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="113"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="22" pos:column="13">self_destruct<pos:position pos:line="22" pos:column="26"/></name><argument_list pos:line="22" pos:column="26">()<pos:position pos:line="22" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="23" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name><name pos:line="25" pos:column="9">config<pos:position pos:line="25" pos:column="15"/></name><operator pos:line="25" pos:column="15">-&gt;<pos:position pos:line="25" pos:column="20"/></operator><name pos:line="25" pos:column="17">push_back<pos:position pos:line="25" pos:column="26"/></name></name><argument_list pos:line="25" pos:column="26">(<argument><expr><call><name><name pos:line="25" pos:column="27">theScheme<pos:position pos:line="25" pos:column="36"/></name><operator pos:line="25" pos:column="36">-&gt;<pos:position pos:line="25" pos:column="41"/></operator><name pos:line="25" pos:column="38">createConfig<pos:position pos:line="25" pos:column="50"/></name></name><argument_list pos:line="25" pos:column="50">()<pos:position pos:line="25" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="54"/></expr_stmt>
        <expr_stmt><expr><name pos:line="26" pos:column="9">schemeCfg<pos:position pos:line="26" pos:column="18"/></name> <operator pos:line="26" pos:column="19">=<pos:position pos:line="26" pos:column="20"/></operator> <call><name><name pos:line="26" pos:column="21">Auth<pos:position pos:line="26" pos:column="25"/></name><operator pos:line="26" pos:column="25">::<pos:position pos:line="26" pos:column="27"/></operator><name pos:line="26" pos:column="27">Config<pos:position pos:line="26" pos:column="33"/></name><operator pos:line="26" pos:column="33">::<pos:position pos:line="26" pos:column="35"/></operator><name pos:line="26" pos:column="35">Find<pos:position pos:line="26" pos:column="39"/></name></name><argument_list pos:line="26" pos:column="39">(<argument><expr><name pos:line="26" pos:column="40">type_str<pos:position pos:line="26" pos:column="48"/></name></expr></argument>)<pos:position pos:line="26" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="50"/></expr_stmt>
        <if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><name pos:line="27" pos:column="13">schemeCfg<pos:position pos:line="27" pos:column="22"/></name> <operator pos:line="27" pos:column="23">==<pos:position pos:line="27" pos:column="25"/></operator> <name pos:line="27" pos:column="26">NULL<pos:position pos:line="27" pos:column="30"/></name></expr>)<pos:position pos:line="27" pos:column="31"/></condition><then pos:line="27" pos:column="31"> <block pos:line="27" pos:column="32">{
            <expr_stmt><expr><call><name pos:line="28" pos:column="13">debugs<pos:position pos:line="28" pos:column="19"/></name><argument_list pos:line="28" pos:column="19">(<argument><expr><literal type="number" pos:line="28" pos:column="20">3<pos:position pos:line="28" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="23">DBG_CRITICAL<pos:position pos:line="28" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="37">"Parsing Config File: Corruption configuring authentication scheme '"<pos:position pos:line="28" pos:column="106"/></literal> <operator pos:line="28" pos:column="107">&lt;&lt;<pos:position pos:line="28" pos:column="115"/></operator> <name pos:line="28" pos:column="110">type_str<pos:position pos:line="28" pos:column="118"/></name> <operator pos:line="28" pos:column="119">&lt;&lt;<pos:position pos:line="28" pos:column="127"/></operator> <literal type="string" pos:line="28" pos:column="122">"'."<pos:position pos:line="28" pos:column="126"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="127"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="128"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="29" pos:column="13">self_destruct<pos:position pos:line="29" pos:column="26"/></name><argument_list pos:line="29" pos:column="26">()<pos:position pos:line="29" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="30" pos:column="10"/></block></then></if>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="33" pos:column="5">schemeCfg<pos:position pos:line="33" pos:column="14"/></name><operator pos:line="33" pos:column="14">-&gt;<pos:position pos:line="33" pos:column="19"/></operator><name pos:line="33" pos:column="16">parse<pos:position pos:line="33" pos:column="21"/></name></name><argument_list pos:line="33" pos:column="21">(<argument><expr><name pos:line="33" pos:column="22">schemeCfg<pos:position pos:line="33" pos:column="31"/></name></expr></argument>, <argument><expr><call><name><name pos:line="33" pos:column="33">config<pos:position pos:line="33" pos:column="39"/></name><operator pos:line="33" pos:column="39">-&gt;<pos:position pos:line="33" pos:column="44"/></operator><name pos:line="33" pos:column="41">size<pos:position pos:line="33" pos:column="45"/></name></name><argument_list pos:line="33" pos:column="45">()<pos:position pos:line="33" pos:column="47"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="33" pos:column="49">param_str<pos:position pos:line="33" pos:column="58"/></name></expr></argument>)<pos:position pos:line="33" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="60"/></expr_stmt>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
