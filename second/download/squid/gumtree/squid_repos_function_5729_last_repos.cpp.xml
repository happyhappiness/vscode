<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5729_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Auth<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">Scheme<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">AddScheme<pos:position pos:line="2" pos:column="24"/></name></name><parameter_list pos:line="2" pos:column="24">(<parameter><decl><type><name><name pos:line="2" pos:column="25">Auth<pos:position pos:line="2" pos:column="29"/></name><operator pos:line="2" pos:column="29">::<pos:position pos:line="2" pos:column="31"/></operator><name pos:line="2" pos:column="31">Scheme<pos:position pos:line="2" pos:column="37"/></name><operator pos:line="2" pos:column="37">::<pos:position pos:line="2" pos:column="39"/></operator><name pos:line="2" pos:column="39">Pointer<pos:position pos:line="2" pos:column="46"/></name></name></type> <name pos:line="2" pos:column="47">instance<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="56"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">iterator<pos:position pos:line="4" pos:column="13"/></name></type> <name pos:line="4" pos:column="14">i<pos:position pos:line="4" pos:column="15"/></name> <init pos:line="4" pos:column="16">= <expr><call><name pos:line="4" pos:column="18">GetSchemes<pos:position pos:line="4" pos:column="28"/></name><argument_list pos:line="4" pos:column="28">()<pos:position pos:line="4" pos:column="30"/></argument_list></call><operator pos:line="4" pos:column="30">.<pos:position pos:line="4" pos:column="31"/></operator><call><name pos:line="4" pos:column="31">begin<pos:position pos:line="4" pos:column="36"/></name><argument_list pos:line="4" pos:column="36">()<pos:position pos:line="4" pos:column="38"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>

    <while pos:line="6" pos:column="5">while <condition pos:line="6" pos:column="11">(<expr><name pos:line="6" pos:column="12">i<pos:position pos:line="6" pos:column="13"/></name> <operator pos:line="6" pos:column="14">!=<pos:position pos:line="6" pos:column="16"/></operator> <call><name pos:line="6" pos:column="17">GetSchemes<pos:position pos:line="6" pos:column="27"/></name><argument_list pos:line="6" pos:column="27">()<pos:position pos:line="6" pos:column="29"/></argument_list></call><operator pos:line="6" pos:column="29">.<pos:position pos:line="6" pos:column="30"/></operator><call><name pos:line="6" pos:column="30">end<pos:position pos:line="6" pos:column="33"/></name><argument_list pos:line="6" pos:column="33">()<pos:position pos:line="6" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="36"/></condition> <block pos:line="6" pos:column="37">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">assert<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><call><name pos:line="7" pos:column="16">strcmp<pos:position pos:line="7" pos:column="22"/></name><argument_list pos:line="7" pos:column="22">(<argument><expr><call><name><operator pos:line="7" pos:column="23">(<pos:position pos:line="7" pos:column="24"/></operator><operator pos:line="7" pos:column="24">*<pos:position pos:line="7" pos:column="25"/></operator><name pos:line="7" pos:column="25">i<pos:position pos:line="7" pos:column="26"/></name><operator pos:line="7" pos:column="26">)<pos:position pos:line="7" pos:column="27"/></operator><operator pos:line="7" pos:column="27">-&gt;<pos:position pos:line="7" pos:column="32"/></operator><name pos:line="7" pos:column="29">type<pos:position pos:line="7" pos:column="33"/></name></name><argument_list pos:line="7" pos:column="33">()<pos:position pos:line="7" pos:column="35"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="7" pos:column="37">instance<pos:position pos:line="7" pos:column="45"/></name><operator pos:line="7" pos:column="45">-&gt;<pos:position pos:line="7" pos:column="50"/></operator><name pos:line="7" pos:column="47">type<pos:position pos:line="7" pos:column="51"/></name></name><argument_list pos:line="7" pos:column="51">()<pos:position pos:line="7" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="54"/></argument_list></call> <operator pos:line="7" pos:column="55">!=<pos:position pos:line="7" pos:column="57"/></operator> <literal type="number" pos:line="7" pos:column="58">0<pos:position pos:line="7" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="61"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="8" pos:column="9">++<pos:position pos:line="8" pos:column="11"/></operator><name pos:line="8" pos:column="11">i<pos:position pos:line="8" pos:column="12"/></name></expr>;<pos:position pos:line="8" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="9" pos:column="6"/></block></while>

    <expr_stmt><expr><call><name pos:line="11" pos:column="5">GetSchemes<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">()<pos:position pos:line="11" pos:column="17"/></argument_list></call><operator pos:line="11" pos:column="17">.<pos:position pos:line="11" pos:column="18"/></operator><call><name pos:line="11" pos:column="18">push_back<pos:position pos:line="11" pos:column="27"/></name><argument_list pos:line="11" pos:column="27">(<argument><expr><name pos:line="11" pos:column="28">instance<pos:position pos:line="11" pos:column="36"/></name></expr></argument>)<pos:position pos:line="11" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="38"/></expr_stmt>
}<pos:position pos:line="12" pos:column="2"/></block></function></unit>
