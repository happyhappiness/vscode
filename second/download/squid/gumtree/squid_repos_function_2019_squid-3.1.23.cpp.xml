<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2019_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HttpStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">doneSendingRequestBody<pos:position pos:line="2" pos:column="38"/></name></name><parameter_list pos:line="2" pos:column="38">()<pos:position pos:line="2" pos:column="40"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">11<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="4" pos:column="15">5<pos:position pos:line="4" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="18">HERE<pos:position pos:line="4" pos:column="22"/></name> <operator pos:line="4" pos:column="23">&lt;&lt;<pos:position pos:line="4" pos:column="31"/></operator> <literal type="string" pos:line="4" pos:column="26">"doneSendingRequestBody: FD "<pos:position pos:line="4" pos:column="55"/></literal> <operator pos:line="4" pos:column="56">&lt;&lt;<pos:position pos:line="4" pos:column="64"/></operator> <name pos:line="4" pos:column="59">fd<pos:position pos:line="4" pos:column="61"/></name></expr></argument>)<pos:position pos:line="4" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="63"/></expr_stmt>

<cpp:if pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">if<pos:position pos:line="6" pos:column="4"/></cpp:directive> <expr><name pos:line="6" pos:column="5">HTTP_VIOLATIONS<pos:position pos:line="6" pos:column="20"/></name></expr></cpp:if>
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name><name pos:line="7" pos:column="9">Config<pos:position pos:line="7" pos:column="15"/></name><operator pos:line="7" pos:column="15">.<pos:position pos:line="7" pos:column="16"/></operator><name pos:line="7" pos:column="16">accessList<pos:position pos:line="7" pos:column="26"/></name><operator pos:line="7" pos:column="26">.<pos:position pos:line="7" pos:column="27"/></operator><name pos:line="7" pos:column="27">brokenPosts<pos:position pos:line="7" pos:column="38"/></name></name></expr>)<pos:position pos:line="7" pos:column="39"/></condition><then pos:line="7" pos:column="39"> <block pos:line="7" pos:column="40">{
        <decl_stmt><decl><type><name pos:line="8" pos:column="9">ACLFilledChecklist<pos:position pos:line="8" pos:column="27"/></name></type> <name pos:line="8" pos:column="28">ch<pos:position pos:line="8" pos:column="30"/></name><argument_list pos:line="8" pos:column="30">(<argument><expr><name><name pos:line="8" pos:column="31">Config<pos:position pos:line="8" pos:column="37"/></name><operator pos:line="8" pos:column="37">.<pos:position pos:line="8" pos:column="38"/></operator><name pos:line="8" pos:column="38">accessList<pos:position pos:line="8" pos:column="48"/></name><operator pos:line="8" pos:column="48">.<pos:position pos:line="8" pos:column="49"/></operator><name pos:line="8" pos:column="49">brokenPosts<pos:position pos:line="8" pos:column="60"/></name></name></expr></argument>, <argument><expr><call><name pos:line="8" pos:column="62">originalRequest<pos:position pos:line="8" pos:column="77"/></name><argument_list pos:line="8" pos:column="77">()<pos:position pos:line="8" pos:column="79"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="8" pos:column="81">NULL<pos:position pos:line="8" pos:column="85"/></name></expr></argument>)<pos:position pos:line="8" pos:column="86"/></argument_list></decl>;<pos:position pos:line="8" pos:column="87"/></decl_stmt>
        <if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><call><name><name pos:line="9" pos:column="14">ch<pos:position pos:line="9" pos:column="16"/></name><operator pos:line="9" pos:column="16">.<pos:position pos:line="9" pos:column="17"/></operator><name pos:line="9" pos:column="17">fastCheck<pos:position pos:line="9" pos:column="26"/></name></name><argument_list pos:line="9" pos:column="26">()<pos:position pos:line="9" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="29"/></condition><then pos:line="9" pos:column="29"> <block pos:line="9" pos:column="30">{
            <expr_stmt><expr><call><name pos:line="10" pos:column="13">debugs<pos:position pos:line="10" pos:column="19"/></name><argument_list pos:line="10" pos:column="19">(<argument><expr><literal type="number" pos:line="10" pos:column="20">11<pos:position pos:line="10" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="24">5<pos:position pos:line="10" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="27">"doneSendingRequestBody: didn't match brokenPosts"<pos:position pos:line="10" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="79"/></expr_stmt>
            <decl_stmt><decl><type><name pos:line="11" pos:column="13">CommIoCbParams<pos:position pos:line="11" pos:column="27"/></name></type> <name pos:line="11" pos:column="28">io<pos:position pos:line="11" pos:column="30"/></name><argument_list pos:line="11" pos:column="30">(<argument><expr><name pos:line="11" pos:column="31">NULL<pos:position pos:line="11" pos:column="35"/></name></expr></argument>)<pos:position pos:line="11" pos:column="36"/></argument_list></decl>;<pos:position pos:line="11" pos:column="37"/></decl_stmt>
            <expr_stmt><expr><name><name pos:line="12" pos:column="13">io<pos:position pos:line="12" pos:column="15"/></name><operator pos:line="12" pos:column="15">.<pos:position pos:line="12" pos:column="16"/></operator><name pos:line="12" pos:column="16">fd<pos:position pos:line="12" pos:column="18"/></name></name><operator pos:line="12" pos:column="18">=<pos:position pos:line="12" pos:column="19"/></operator><name pos:line="12" pos:column="19">fd<pos:position pos:line="12" pos:column="21"/></name></expr>;<pos:position pos:line="12" pos:column="22"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="13" pos:column="13">io<pos:position pos:line="13" pos:column="15"/></name><operator pos:line="13" pos:column="15">.<pos:position pos:line="13" pos:column="16"/></operator><name pos:line="13" pos:column="16">flag<pos:position pos:line="13" pos:column="20"/></name></name><operator pos:line="13" pos:column="20">=<pos:position pos:line="13" pos:column="21"/></operator><name pos:line="13" pos:column="21">COMM_OK<pos:position pos:line="13" pos:column="28"/></name></expr>;<pos:position pos:line="13" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="14" pos:column="13">sendComplete<pos:position pos:line="14" pos:column="25"/></name><argument_list pos:line="14" pos:column="25">(<argument><expr><name pos:line="14" pos:column="26">io<pos:position pos:line="14" pos:column="28"/></name></expr></argument>)<pos:position pos:line="14" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="30"/></expr_stmt>
        }<pos:position pos:line="15" pos:column="10"/></block></then> <else pos:line="15" pos:column="11">else <block pos:line="15" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="16" pos:column="13">debugs<pos:position pos:line="16" pos:column="19"/></name><argument_list pos:line="16" pos:column="19">(<argument><expr><literal type="number" pos:line="16" pos:column="20">11<pos:position pos:line="16" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="24">2<pos:position pos:line="16" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="27">"doneSendingRequestBody: matched brokenPosts"<pos:position pos:line="16" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="74"/></expr_stmt>

            <if pos:line="18" pos:column="13">if <condition pos:line="18" pos:column="16">(<expr><operator pos:line="18" pos:column="17">!<pos:position pos:line="18" pos:column="18"/></operator><call><name pos:line="18" pos:column="18">canSend<pos:position pos:line="18" pos:column="25"/></name><argument_list pos:line="18" pos:column="25">(<argument><expr><name pos:line="18" pos:column="26">fd<pos:position pos:line="18" pos:column="28"/></name></expr></argument>)<pos:position pos:line="18" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="30"/></condition><then pos:line="18" pos:column="30"> <block pos:line="18" pos:column="31">{
                <expr_stmt><expr><call><name pos:line="19" pos:column="17">debugs<pos:position pos:line="19" pos:column="23"/></name><argument_list pos:line="19" pos:column="23">(<argument><expr><literal type="number" pos:line="19" pos:column="24">11<pos:position pos:line="19" pos:column="26"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="19" pos:column="27">2<pos:position pos:line="19" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="30">HERE<pos:position pos:line="19" pos:column="34"/></name> <operator pos:line="19" pos:column="35">&lt;&lt;<pos:position pos:line="19" pos:column="43"/></operator> <literal type="string" pos:line="19" pos:column="38">"cannot send CRLF to closing FD "<pos:position pos:line="19" pos:column="71"/></literal> <operator pos:line="19" pos:column="72">&lt;&lt;<pos:position pos:line="19" pos:column="80"/></operator> <name pos:line="19" pos:column="75">fd<pos:position pos:line="19" pos:column="77"/></name></expr></argument>)<pos:position pos:line="19" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="79"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="20" pos:column="17">assert<pos:position pos:line="20" pos:column="23"/></name><argument_list pos:line="20" pos:column="23">(<argument><expr><name pos:line="20" pos:column="24">closeHandler<pos:position pos:line="20" pos:column="36"/></name> <operator pos:line="20" pos:column="37">!=<pos:position pos:line="20" pos:column="39"/></operator> <name pos:line="20" pos:column="40">NULL<pos:position pos:line="20" pos:column="44"/></name></expr></argument>)<pos:position pos:line="20" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="46"/></expr_stmt>
                <return pos:line="21" pos:column="17">return;<pos:position pos:line="21" pos:column="24"/></return>
            }<pos:position pos:line="22" pos:column="14"/></block></then></if>

            <typedef pos:line="24" pos:column="13">typedef <type><name><name pos:line="24" pos:column="21">CommCbMemFunT<pos:position pos:line="24" pos:column="34"/></name><argument_list type="generic" pos:line="24" pos:column="34">&lt;<argument><expr><name pos:line="24" pos:column="35">HttpStateData<pos:position pos:line="24" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="50">CommIoCbParams<pos:position pos:line="24" pos:column="64"/></name></expr></argument>&gt;<pos:position pos:line="24" pos:column="68"/></argument_list></name></type> <name pos:line="24" pos:column="66">Dialer<pos:position pos:line="24" pos:column="72"/></name>;<pos:position pos:line="24" pos:column="73"/></typedef>
            <decl_stmt><decl><type><name><name pos:line="25" pos:column="13">AsyncCall<pos:position pos:line="25" pos:column="22"/></name><operator pos:line="25" pos:column="22">::<pos:position pos:line="25" pos:column="24"/></operator><name pos:line="25" pos:column="24">Pointer<pos:position pos:line="25" pos:column="31"/></name></name></type> <name pos:line="25" pos:column="32">call<pos:position pos:line="25" pos:column="36"/></name> <init pos:line="25" pos:column="37">= <expr><call><name pos:line="25" pos:column="39">JobCallback<pos:position pos:line="25" pos:column="50"/></name><argument_list pos:line="25" pos:column="50">(<argument><expr><literal type="number" pos:line="25" pos:column="51">11<pos:position pos:line="25" pos:column="53"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="25" pos:column="54">5<pos:position pos:line="25" pos:column="55"/></literal></expr></argument>,
                                                  <argument><expr><name pos:line="26" pos:column="51">Dialer<pos:position pos:line="26" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="59">this<pos:position pos:line="26" pos:column="63"/></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="65">HttpStateData<pos:position pos:line="26" pos:column="78"/></name><operator pos:line="26" pos:column="78">::<pos:position pos:line="26" pos:column="80"/></operator><name pos:line="26" pos:column="80">sendComplete<pos:position pos:line="26" pos:column="92"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="93"/></argument_list></call></expr></init></decl>;<pos:position pos:line="26" pos:column="94"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="27" pos:column="13">comm_write<pos:position pos:line="27" pos:column="23"/></name><argument_list pos:line="27" pos:column="23">(<argument><expr><name pos:line="27" pos:column="24">fd<pos:position pos:line="27" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="28">"\r\n"<pos:position pos:line="27" pos:column="34"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="36">2<pos:position pos:line="27" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="39">call<pos:position pos:line="27" pos:column="43"/></name></expr></argument>)<pos:position pos:line="27" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="45"/></expr_stmt>
        }<pos:position pos:line="28" pos:column="10"/></block></else></if>
        <return pos:line="29" pos:column="9">return;<pos:position pos:line="29" pos:column="16"/></return>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">debugs<pos:position pos:line="31" pos:column="11"/></name><argument_list pos:line="31" pos:column="11">(<argument><expr><literal type="number" pos:line="31" pos:column="12">11<pos:position pos:line="31" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="16">5<pos:position pos:line="31" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="19">"doneSendingRequestBody: No brokenPosts list"<pos:position pos:line="31" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="66"/></expr_stmt>
<cpp:endif pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">endif<pos:position pos:line="32" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="32" pos:column="8">/* HTTP_VIOLATIONS */</comment>

    <decl_stmt><decl><type><name pos:line="34" pos:column="5">CommIoCbParams<pos:position pos:line="34" pos:column="19"/></name></type> <name pos:line="34" pos:column="20">io<pos:position pos:line="34" pos:column="22"/></name><argument_list pos:line="34" pos:column="22">(<argument><expr><name pos:line="34" pos:column="23">NULL<pos:position pos:line="34" pos:column="27"/></name></expr></argument>)<pos:position pos:line="34" pos:column="28"/></argument_list></decl>;<pos:position pos:line="34" pos:column="29"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="35" pos:column="5">io<pos:position pos:line="35" pos:column="7"/></name><operator pos:line="35" pos:column="7">.<pos:position pos:line="35" pos:column="8"/></operator><name pos:line="35" pos:column="8">fd<pos:position pos:line="35" pos:column="10"/></name></name><operator pos:line="35" pos:column="10">=<pos:position pos:line="35" pos:column="11"/></operator><name pos:line="35" pos:column="11">fd<pos:position pos:line="35" pos:column="13"/></name></expr>;<pos:position pos:line="35" pos:column="14"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="36" pos:column="5">io<pos:position pos:line="36" pos:column="7"/></name><operator pos:line="36" pos:column="7">.<pos:position pos:line="36" pos:column="8"/></operator><name pos:line="36" pos:column="8">flag<pos:position pos:line="36" pos:column="12"/></name></name><operator pos:line="36" pos:column="12">=<pos:position pos:line="36" pos:column="13"/></operator><name pos:line="36" pos:column="13">COMM_OK<pos:position pos:line="36" pos:column="20"/></name></expr>;<pos:position pos:line="36" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">sendComplete<pos:position pos:line="37" pos:column="17"/></name><argument_list pos:line="37" pos:column="17">(<argument><expr><name pos:line="37" pos:column="18">io<pos:position pos:line="37" pos:column="20"/></name></expr></argument>)<pos:position pos:line="37" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="22"/></expr_stmt>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
