<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3693_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Iterator<pos:position pos:line="1" pos:column="26"/></name><operator pos:line="1" pos:column="26">::<pos:position pos:line="1" pos:column="28"/></operator><name pos:line="1" pos:column="28">noteAdaptationQueryAbort<pos:position pos:line="1" pos:column="52"/></name></name><parameter_list pos:line="1" pos:column="52">(<parameter><decl><type><name pos:line="1" pos:column="53">bool<pos:position pos:line="1" pos:column="57"/></name></type> <name pos:line="1" pos:column="58">final<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="64"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="3" pos:column="5">debugs<pos:position pos:line="3" pos:column="11"/></name><argument_list pos:line="3" pos:column="11">(<argument><expr><literal type="number" pos:line="3" pos:column="12">93<pos:position pos:line="3" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="3" pos:column="15">5<pos:position pos:line="3" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="3" pos:column="18">HERE<pos:position pos:line="3" pos:column="22"/></name> <operator pos:line="3" pos:column="23">&lt;&lt;<pos:position pos:line="3" pos:column="31"/></operator> <literal type="string" pos:line="3" pos:column="26">"final: "<pos:position pos:line="3" pos:column="35"/></literal> <operator pos:line="3" pos:column="36">&lt;&lt;<pos:position pos:line="3" pos:column="44"/></operator> <name pos:line="3" pos:column="39">final<pos:position pos:line="3" pos:column="44"/></name> <operator pos:line="3" pos:column="45">&lt;&lt;<pos:position pos:line="3" pos:column="53"/></operator> <literal type="string" pos:line="3" pos:column="48">" plan: "<pos:position pos:line="3" pos:column="57"/></literal> <operator pos:line="3" pos:column="58">&lt;&lt;<pos:position pos:line="3" pos:column="66"/></operator> <name pos:line="3" pos:column="61">thePlan<pos:position pos:line="3" pos:column="68"/></name></expr></argument>)<pos:position pos:line="3" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="70"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">clearAdaptation<pos:position pos:line="4" pos:column="20"/></name><argument_list pos:line="4" pos:column="20">(<argument><expr><name pos:line="4" pos:column="21">theLauncher<pos:position pos:line="4" pos:column="32"/></name></expr></argument>)<pos:position pos:line="4" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">updatePlan<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">(<argument><expr><literal type="boolean" pos:line="5" pos:column="16">false<pos:position pos:line="5" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="23"/></expr_stmt>

    <comment type="line" pos:line="7" pos:column="5">// can we replace the failed service (group-level bypass)?</comment>
    <decl_stmt><decl><type><specifier pos:line="8" pos:column="5">const<pos:position pos:line="8" pos:column="10"/></specifier> <name pos:line="8" pos:column="11">bool<pos:position pos:line="8" pos:column="15"/></name></type> <name pos:line="8" pos:column="16">srcIntact<pos:position pos:line="8" pos:column="25"/></name> <init pos:line="8" pos:column="26">= <expr><operator pos:line="8" pos:column="28">!<pos:position pos:line="8" pos:column="29"/></operator><name><name pos:line="8" pos:column="29">theMsg<pos:position pos:line="8" pos:column="35"/></name><operator pos:line="8" pos:column="35">-&gt;<pos:position pos:line="8" pos:column="40"/></operator><name pos:line="8" pos:column="37">body_pipe<pos:position pos:line="8" pos:column="46"/></name></name> <operator pos:line="8" pos:column="47">||<pos:position pos:line="8" pos:column="49"/></operator>
                           <operator pos:line="9" pos:column="28">!<pos:position pos:line="9" pos:column="29"/></operator><call><name><name pos:line="9" pos:column="29">theMsg<pos:position pos:line="9" pos:column="35"/></name><operator pos:line="9" pos:column="35">-&gt;<pos:position pos:line="9" pos:column="40"/></operator><name pos:line="9" pos:column="37">body_pipe<pos:position pos:line="9" pos:column="46"/></name><operator pos:line="9" pos:column="46">-&gt;<pos:position pos:line="9" pos:column="51"/></operator><name pos:line="9" pos:column="48">consumedSize<pos:position pos:line="9" pos:column="60"/></name></name><argument_list pos:line="9" pos:column="60">()<pos:position pos:line="9" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="63"/></decl_stmt>
    <comment type="line" pos:line="10" pos:column="5">// can we ignore the failure (compute while thePlan is not exhausted)?</comment>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">Must<pos:position pos:line="11" pos:column="9"/></name><argument_list pos:line="11" pos:column="9">(<argument><expr><operator pos:line="11" pos:column="10">!<pos:position pos:line="11" pos:column="11"/></operator><call><name><name pos:line="11" pos:column="11">thePlan<pos:position pos:line="11" pos:column="18"/></name><operator pos:line="11" pos:column="18">.<pos:position pos:line="11" pos:column="19"/></operator><name pos:line="11" pos:column="19">exhausted<pos:position pos:line="11" pos:column="28"/></name></name><argument_list pos:line="11" pos:column="28">()<pos:position pos:line="11" pos:column="30"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="32"/></expr_stmt>
    <decl_stmt><decl><type><specifier pos:line="12" pos:column="5">const<pos:position pos:line="12" pos:column="10"/></specifier> <name pos:line="12" pos:column="11">bool<pos:position pos:line="12" pos:column="15"/></name></type> <name pos:line="12" pos:column="16">canIgnore<pos:position pos:line="12" pos:column="25"/></name> <init pos:line="12" pos:column="26">= <expr><call><name><name pos:line="12" pos:column="28">thePlan<pos:position pos:line="12" pos:column="35"/></name><operator pos:line="12" pos:column="35">.<pos:position pos:line="12" pos:column="36"/></operator><name pos:line="12" pos:column="36">current<pos:position pos:line="12" pos:column="43"/></name></name><argument_list pos:line="12" pos:column="43">()<pos:position pos:line="12" pos:column="45"/></argument_list></call><operator pos:line="12" pos:column="45">-&gt;<pos:position pos:line="12" pos:column="50"/></operator><call><name pos:line="12" pos:column="47">cfg<pos:position pos:line="12" pos:column="50"/></name><argument_list pos:line="12" pos:column="50">()<pos:position pos:line="12" pos:column="52"/></argument_list></call><operator pos:line="12" pos:column="52">.<pos:position pos:line="12" pos:column="53"/></operator><name pos:line="12" pos:column="53">bypass<pos:position pos:line="12" pos:column="59"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="60"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">debugs<pos:position pos:line="13" pos:column="11"/></name><argument_list pos:line="13" pos:column="11">(<argument><expr><literal type="number" pos:line="13" pos:column="12">85<pos:position pos:line="13" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="13" pos:column="15">5<pos:position pos:line="13" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="18">HERE<pos:position pos:line="13" pos:column="22"/></name> <operator pos:line="13" pos:column="23">&lt;&lt;<pos:position pos:line="13" pos:column="31"/></operator> <literal type="string" pos:line="13" pos:column="26">"flags: "<pos:position pos:line="13" pos:column="35"/></literal> <operator pos:line="13" pos:column="36">&lt;&lt;<pos:position pos:line="13" pos:column="44"/></operator> <name pos:line="13" pos:column="39">srcIntact<pos:position pos:line="13" pos:column="48"/></name> <operator pos:line="13" pos:column="49">&lt;&lt;<pos:position pos:line="13" pos:column="57"/></operator> <name pos:line="13" pos:column="52">canIgnore<pos:position pos:line="13" pos:column="61"/></name> <operator pos:line="13" pos:column="62">&lt;&lt;<pos:position pos:line="13" pos:column="70"/></operator> <name pos:line="13" pos:column="65">adapted<pos:position pos:line="13" pos:column="72"/></name></expr></argument>)<pos:position pos:line="13" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="74"/></expr_stmt>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">srcIntact<pos:position pos:line="15" pos:column="18"/></name></expr>)<pos:position pos:line="15" pos:column="19"/></condition><then pos:line="15" pos:column="19"> <block pos:line="15" pos:column="20">{
        <if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><call><name><name pos:line="16" pos:column="13">thePlan<pos:position pos:line="16" pos:column="20"/></name><operator pos:line="16" pos:column="20">.<pos:position pos:line="16" pos:column="21"/></operator><name pos:line="16" pos:column="21">replacement<pos:position pos:line="16" pos:column="32"/></name></name><argument_list pos:line="16" pos:column="32">(<argument><expr><call><name pos:line="16" pos:column="33">filter<pos:position pos:line="16" pos:column="39"/></name><argument_list pos:line="16" pos:column="39">()<pos:position pos:line="16" pos:column="41"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="42"/></argument_list></call> <operator pos:line="16" pos:column="43">!=<pos:position pos:line="16" pos:column="45"/></operator> <name pos:line="16" pos:column="46">NULL<pos:position pos:line="16" pos:column="50"/></name></expr>)<pos:position pos:line="16" pos:column="51"/></condition><then pos:line="16" pos:column="51"> <block pos:line="16" pos:column="52">{
            <expr_stmt><expr><call><name pos:line="17" pos:column="13">debugs<pos:position pos:line="17" pos:column="19"/></name><argument_list pos:line="17" pos:column="19">(<argument><expr><literal type="number" pos:line="17" pos:column="20">93<pos:position pos:line="17" pos:column="22"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="17" pos:column="23">3<pos:position pos:line="17" pos:column="24"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="26">HERE<pos:position pos:line="17" pos:column="30"/></name> <operator pos:line="17" pos:column="31">&lt;&lt;<pos:position pos:line="17" pos:column="39"/></operator> <literal type="string" pos:line="17" pos:column="34">"trying a replacement service"<pos:position pos:line="17" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="66"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="18" pos:column="13">step<pos:position pos:line="18" pos:column="17"/></name><argument_list pos:line="18" pos:column="17">()<pos:position pos:line="18" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="20"/></expr_stmt>
            <return pos:line="19" pos:column="13">return;<pos:position pos:line="19" pos:column="20"/></return>
        }<pos:position pos:line="20" pos:column="10"/></block></then></if>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>

    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><name pos:line="23" pos:column="9">canIgnore<pos:position pos:line="23" pos:column="18"/></name> <operator pos:line="23" pos:column="19">&amp;&amp;<pos:position pos:line="23" pos:column="29"/></operator> <name pos:line="23" pos:column="22">srcIntact<pos:position pos:line="23" pos:column="31"/></name> <operator pos:line="23" pos:column="32">&amp;&amp;<pos:position pos:line="23" pos:column="42"/></operator> <name pos:line="23" pos:column="35">adapted<pos:position pos:line="23" pos:column="42"/></name></expr>)<pos:position pos:line="23" pos:column="43"/></condition><then pos:line="23" pos:column="43"> <block pos:line="23" pos:column="44">{
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">debugs<pos:position pos:line="24" pos:column="15"/></name><argument_list pos:line="24" pos:column="15">(<argument><expr><literal type="number" pos:line="24" pos:column="16">85<pos:position pos:line="24" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="24" pos:column="19">3<pos:position pos:line="24" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="22">HERE<pos:position pos:line="24" pos:column="26"/></name> <operator pos:line="24" pos:column="27">&lt;&lt;<pos:position pos:line="24" pos:column="35"/></operator> <literal type="string" pos:line="24" pos:column="30">"responding with older adapted msg"<pos:position pos:line="24" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="67"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">sendAnswer<pos:position pos:line="25" pos:column="19"/></name><argument_list pos:line="25" pos:column="19">(<argument><expr><name pos:line="25" pos:column="20">theMsg<pos:position pos:line="25" pos:column="26"/></name></expr></argument>)<pos:position pos:line="25" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="28"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">mustStop<pos:position pos:line="26" pos:column="17"/></name><argument_list pos:line="26" pos:column="17">(<argument><expr><literal type="string" pos:line="26" pos:column="18">"sent older adapted msg"<pos:position pos:line="26" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="44"/></expr_stmt>
        <return pos:line="27" pos:column="9">return;<pos:position pos:line="27" pos:column="16"/></return>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="30" pos:column="5">// caller may recover if we can ignore the error and virgin msg is intact</comment>
    <decl_stmt><decl><type><specifier pos:line="31" pos:column="5">const<pos:position pos:line="31" pos:column="10"/></specifier> <name pos:line="31" pos:column="11">bool<pos:position pos:line="31" pos:column="15"/></name></type> <name pos:line="31" pos:column="16">useVirgin<pos:position pos:line="31" pos:column="25"/></name> <init pos:line="31" pos:column="26">= <expr><name pos:line="31" pos:column="28">canIgnore<pos:position pos:line="31" pos:column="37"/></name> <operator pos:line="31" pos:column="38">&amp;&amp;<pos:position pos:line="31" pos:column="48"/></operator> <operator pos:line="31" pos:column="41">!<pos:position pos:line="31" pos:column="42"/></operator><name pos:line="31" pos:column="42">adapted<pos:position pos:line="31" pos:column="49"/></name> <operator pos:line="31" pos:column="50">&amp;&amp;<pos:position pos:line="31" pos:column="60"/></operator> <name pos:line="31" pos:column="53">srcIntact<pos:position pos:line="31" pos:column="62"/></name></expr></init></decl>;<pos:position pos:line="31" pos:column="63"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">tellQueryAborted<pos:position pos:line="32" pos:column="21"/></name><argument_list pos:line="32" pos:column="21">(<argument><expr><operator pos:line="32" pos:column="22">!<pos:position pos:line="32" pos:column="23"/></operator><name pos:line="32" pos:column="23">useVirgin<pos:position pos:line="32" pos:column="32"/></name></expr></argument>)<pos:position pos:line="32" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">mustStop<pos:position pos:line="33" pos:column="13"/></name><argument_list pos:line="33" pos:column="13">(<argument><expr><literal type="string" pos:line="33" pos:column="14">"group failure"<pos:position pos:line="33" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="31"/></expr_stmt>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
