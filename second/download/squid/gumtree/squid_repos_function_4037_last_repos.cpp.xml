<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4037_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ACLUserData<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">parse<pos:position pos:line="2" pos:column="19"/></name></name><parameter_list pos:line="2" pos:column="19">()<pos:position pos:line="2" pos:column="21"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">28<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">2<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="19">"parsing user list"<pos:position pos:line="4" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="40"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name> <modifier pos:line="6" pos:column="10">*<pos:position pos:line="6" pos:column="11"/></modifier></type><name pos:line="6" pos:column="11">t<pos:position pos:line="6" pos:column="12"/></name> <init pos:line="6" pos:column="13">= <expr><name pos:line="6" pos:column="15">NULL<pos:position pos:line="6" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><operator pos:line="7" pos:column="9">(<pos:position pos:line="7" pos:column="10"/></operator><name pos:line="7" pos:column="10">t<pos:position pos:line="7" pos:column="11"/></name> <operator pos:line="7" pos:column="12">=<pos:position pos:line="7" pos:column="13"/></operator> <call><name><name pos:line="7" pos:column="14">ConfigParser<pos:position pos:line="7" pos:column="26"/></name><operator pos:line="7" pos:column="26">::<pos:position pos:line="7" pos:column="28"/></operator><name pos:line="7" pos:column="28">strtokFile<pos:position pos:line="7" pos:column="38"/></name></name><argument_list pos:line="7" pos:column="38">()<pos:position pos:line="7" pos:column="40"/></argument_list></call><operator pos:line="7" pos:column="40">)<pos:position pos:line="7" pos:column="41"/></operator></expr>)<pos:position pos:line="7" pos:column="42"/></condition><then pos:line="7" pos:column="42"> <block pos:line="7" pos:column="43">{
        <decl_stmt><decl><type><name pos:line="8" pos:column="9">SBuf<pos:position pos:line="8" pos:column="13"/></name></type> <name pos:line="8" pos:column="14">s<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><name pos:line="8" pos:column="16">t<pos:position pos:line="8" pos:column="17"/></name></expr></argument>)<pos:position pos:line="8" pos:column="18"/></argument_list></decl>;<pos:position pos:line="8" pos:column="19"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">debugs<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><literal type="number" pos:line="9" pos:column="16">28<pos:position pos:line="9" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="20">5<pos:position pos:line="9" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="23">"first token is "<pos:position pos:line="9" pos:column="40"/></literal> <operator pos:line="9" pos:column="41">&lt;&lt;<pos:position pos:line="9" pos:column="49"/></operator> <name pos:line="9" pos:column="44">s<pos:position pos:line="9" pos:column="45"/></name></expr></argument>)<pos:position pos:line="9" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="47"/></expr_stmt>

        <if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><call><name><name pos:line="11" pos:column="13">s<pos:position pos:line="11" pos:column="14"/></name><operator pos:line="11" pos:column="14">.<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="15">cmp<pos:position pos:line="11" pos:column="18"/></name></name><argument_list pos:line="11" pos:column="18">(<argument><expr><literal type="string" pos:line="11" pos:column="19">"-i"<pos:position pos:line="11" pos:column="23"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="11" pos:column="24">2<pos:position pos:line="11" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="26"/></argument_list></call> <operator pos:line="11" pos:column="27">==<pos:position pos:line="11" pos:column="29"/></operator> <literal type="number" pos:line="11" pos:column="30">0<pos:position pos:line="11" pos:column="31"/></literal></expr>)<pos:position pos:line="11" pos:column="32"/></condition><then pos:line="11" pos:column="32"> <block pos:line="11" pos:column="33">{
            <expr_stmt><expr><call><name pos:line="12" pos:column="13">debugs<pos:position pos:line="12" pos:column="19"/></name><argument_list pos:line="12" pos:column="19">(<argument><expr><literal type="number" pos:line="12" pos:column="20">28<pos:position pos:line="12" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="24">5<pos:position pos:line="12" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="27">"Going case-insensitive"<pos:position pos:line="12" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="53"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="13" pos:column="13">flags<pos:position pos:line="13" pos:column="18"/></name><operator pos:line="13" pos:column="18">.<pos:position pos:line="13" pos:column="19"/></operator><name pos:line="13" pos:column="19">case_insensitive<pos:position pos:line="13" pos:column="35"/></name></name> <operator pos:line="13" pos:column="36">=<pos:position pos:line="13" pos:column="37"/></operator> <literal type="boolean" pos:line="13" pos:column="38">true<pos:position pos:line="13" pos:column="42"/></literal></expr>;<pos:position pos:line="13" pos:column="43"/></expr_stmt>
            <comment type="line" pos:line="14" pos:column="13">// due to how the std::set API work, if we want to change</comment>
            <comment type="line" pos:line="15" pos:column="13">// the comparison function we have to create a new std::set</comment>
            <decl_stmt><decl><type><name pos:line="16" pos:column="13">UserDataNames_t<pos:position pos:line="16" pos:column="28"/></name></type> <name pos:line="16" pos:column="29">newUdn<pos:position pos:line="16" pos:column="35"/></name><argument_list pos:line="16" pos:column="35">(<argument><expr><name pos:line="16" pos:column="36">CaseInsensitveSBufCompare<pos:position pos:line="16" pos:column="61"/></name></expr></argument>)<pos:position pos:line="16" pos:column="62"/></argument_list></decl>;<pos:position pos:line="16" pos:column="63"/></decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="17" pos:column="13">newUdn<pos:position pos:line="17" pos:column="19"/></name><operator pos:line="17" pos:column="19">.<pos:position pos:line="17" pos:column="20"/></operator><name pos:line="17" pos:column="20">insert<pos:position pos:line="17" pos:column="26"/></name></name><argument_list pos:line="17" pos:column="26">(<argument><expr><call><name><name pos:line="17" pos:column="27">userDataNames<pos:position pos:line="17" pos:column="40"/></name><operator pos:line="17" pos:column="40">.<pos:position pos:line="17" pos:column="41"/></operator><name pos:line="17" pos:column="41">begin<pos:position pos:line="17" pos:column="46"/></name></name><argument_list pos:line="17" pos:column="46">()<pos:position pos:line="17" pos:column="48"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="17" pos:column="50">userDataNames<pos:position pos:line="17" pos:column="63"/></name><operator pos:line="17" pos:column="63">.<pos:position pos:line="17" pos:column="64"/></operator><name pos:line="17" pos:column="64">end<pos:position pos:line="17" pos:column="67"/></name></name><argument_list pos:line="17" pos:column="67">()<pos:position pos:line="17" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="71"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="18" pos:column="13">swap<pos:position pos:line="18" pos:column="17"/></name><argument_list pos:line="18" pos:column="17">(<argument><expr><name pos:line="18" pos:column="18">userDataNames<pos:position pos:line="18" pos:column="31"/></name></expr></argument>,<argument><expr><name pos:line="18" pos:column="32">newUdn<pos:position pos:line="18" pos:column="38"/></name></expr></argument>)<pos:position pos:line="18" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="40"/></expr_stmt>
        }<pos:position pos:line="19" pos:column="10"/></block></then> <elseif pos:line="19" pos:column="11">else <if pos:line="19" pos:column="16">if <condition pos:line="19" pos:column="19">(<expr><call><name><name pos:line="19" pos:column="20">s<pos:position pos:line="19" pos:column="21"/></name><operator pos:line="19" pos:column="21">.<pos:position pos:line="19" pos:column="22"/></operator><name pos:line="19" pos:column="22">cmp<pos:position pos:line="19" pos:column="25"/></name></name><argument_list pos:line="19" pos:column="25">(<argument><expr><literal type="string" pos:line="19" pos:column="26">"REQUIRED"<pos:position pos:line="19" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="37"/></argument_list></call> <operator pos:line="19" pos:column="38">==<pos:position pos:line="19" pos:column="40"/></operator> <literal type="number" pos:line="19" pos:column="41">0<pos:position pos:line="19" pos:column="42"/></literal></expr>)<pos:position pos:line="19" pos:column="43"/></condition><then pos:line="19" pos:column="43"> <block pos:line="19" pos:column="44">{
            <expr_stmt><expr><call><name pos:line="20" pos:column="13">debugs<pos:position pos:line="20" pos:column="19"/></name><argument_list pos:line="20" pos:column="19">(<argument><expr><literal type="number" pos:line="20" pos:column="20">28<pos:position pos:line="20" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="24">5<pos:position pos:line="20" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="27">"REQUIRED-type enabled"<pos:position pos:line="20" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="52"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="21" pos:column="13">flags<pos:position pos:line="21" pos:column="18"/></name><operator pos:line="21" pos:column="18">.<pos:position pos:line="21" pos:column="19"/></operator><name pos:line="21" pos:column="19">required<pos:position pos:line="21" pos:column="27"/></name></name> <operator pos:line="21" pos:column="28">=<pos:position pos:line="21" pos:column="29"/></operator> <literal type="boolean" pos:line="21" pos:column="30">true<pos:position pos:line="21" pos:column="34"/></literal></expr>;<pos:position pos:line="21" pos:column="35"/></expr_stmt>
        }<pos:position pos:line="22" pos:column="10"/></block></then></if></elseif> <else pos:line="22" pos:column="11">else <block pos:line="22" pos:column="16">{
            <if pos:line="23" pos:column="13">if <condition pos:line="23" pos:column="16">(<expr><name><name pos:line="23" pos:column="17">flags<pos:position pos:line="23" pos:column="22"/></name><operator pos:line="23" pos:column="22">.<pos:position pos:line="23" pos:column="23"/></operator><name pos:line="23" pos:column="23">case_insensitive<pos:position pos:line="23" pos:column="39"/></name></name></expr>)<pos:position pos:line="23" pos:column="40"/></condition><then pos:line="23" pos:column="40">
                <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="24" pos:column="17">s<pos:position pos:line="24" pos:column="18"/></name><operator pos:line="24" pos:column="18">.<pos:position pos:line="24" pos:column="19"/></operator><name pos:line="24" pos:column="19">toLower<pos:position pos:line="24" pos:column="26"/></name></name><argument_list pos:line="24" pos:column="26">()<pos:position pos:line="24" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="29"/></expr_stmt></block></then></if>

            <expr_stmt><expr><call><name pos:line="26" pos:column="13">debugs<pos:position pos:line="26" pos:column="19"/></name><argument_list pos:line="26" pos:column="19">(<argument><expr><literal type="number" pos:line="26" pos:column="20">28<pos:position pos:line="26" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="24">6<pos:position pos:line="26" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="27">"Adding user "<pos:position pos:line="26" pos:column="41"/></literal> <operator pos:line="26" pos:column="42">&lt;&lt;<pos:position pos:line="26" pos:column="50"/></operator> <name pos:line="26" pos:column="45">s<pos:position pos:line="26" pos:column="46"/></name></expr></argument>)<pos:position pos:line="26" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="48"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="27" pos:column="13">userDataNames<pos:position pos:line="27" pos:column="26"/></name><operator pos:line="27" pos:column="26">.<pos:position pos:line="27" pos:column="27"/></operator><name pos:line="27" pos:column="27">insert<pos:position pos:line="27" pos:column="33"/></name></name><argument_list pos:line="27" pos:column="33">(<argument><expr><name pos:line="27" pos:column="34">s<pos:position pos:line="27" pos:column="35"/></name></expr></argument>)<pos:position pos:line="27" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="37"/></expr_stmt>
        }<pos:position pos:line="28" pos:column="10"/></block></else></if>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="31" pos:column="5">debugs<pos:position pos:line="31" pos:column="11"/></name><argument_list pos:line="31" pos:column="11">(<argument><expr><literal type="number" pos:line="31" pos:column="12">28<pos:position pos:line="31" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="16">3<pos:position pos:line="31" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="19">"Case-insensitive-switch is "<pos:position pos:line="31" pos:column="48"/></literal> <operator pos:line="31" pos:column="49">&lt;&lt;<pos:position pos:line="31" pos:column="57"/></operator> <name><name pos:line="31" pos:column="52">flags<pos:position pos:line="31" pos:column="57"/></name><operator pos:line="31" pos:column="57">.<pos:position pos:line="31" pos:column="58"/></operator><name pos:line="31" pos:column="58">case_insensitive<pos:position pos:line="31" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="76"/></expr_stmt>
    <comment type="block" pos:line="32" pos:column="5">/* we might inherit from a previous declaration */</comment>

    <expr_stmt><expr><call><name pos:line="34" pos:column="5">debugs<pos:position pos:line="34" pos:column="11"/></name><argument_list pos:line="34" pos:column="11">(<argument><expr><literal type="number" pos:line="34" pos:column="12">28<pos:position pos:line="34" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="16">4<pos:position pos:line="34" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="19">"parsing following tokens"<pos:position pos:line="34" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="47"/></expr_stmt>

    <while pos:line="36" pos:column="5">while <condition pos:line="36" pos:column="11">(<expr><operator pos:line="36" pos:column="12">(<pos:position pos:line="36" pos:column="13"/></operator><name pos:line="36" pos:column="13">t<pos:position pos:line="36" pos:column="14"/></name> <operator pos:line="36" pos:column="15">=<pos:position pos:line="36" pos:column="16"/></operator> <call><name><name pos:line="36" pos:column="17">ConfigParser<pos:position pos:line="36" pos:column="29"/></name><operator pos:line="36" pos:column="29">::<pos:position pos:line="36" pos:column="31"/></operator><name pos:line="36" pos:column="31">strtokFile<pos:position pos:line="36" pos:column="41"/></name></name><argument_list pos:line="36" pos:column="41">()<pos:position pos:line="36" pos:column="43"/></argument_list></call><operator pos:line="36" pos:column="43">)<pos:position pos:line="36" pos:column="44"/></operator></expr>)<pos:position pos:line="36" pos:column="45"/></condition> <block pos:line="36" pos:column="46">{
        <decl_stmt><decl><type><name pos:line="37" pos:column="9">SBuf<pos:position pos:line="37" pos:column="13"/></name></type> <name pos:line="37" pos:column="14">s<pos:position pos:line="37" pos:column="15"/></name><argument_list pos:line="37" pos:column="15">(<argument><expr><name pos:line="37" pos:column="16">t<pos:position pos:line="37" pos:column="17"/></name></expr></argument>)<pos:position pos:line="37" pos:column="18"/></argument_list></decl>;<pos:position pos:line="37" pos:column="19"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="38" pos:column="9">debugs<pos:position pos:line="38" pos:column="15"/></name><argument_list pos:line="38" pos:column="15">(<argument><expr><literal type="number" pos:line="38" pos:column="16">28<pos:position pos:line="38" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="20">6<pos:position pos:line="38" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="23">"Got token: "<pos:position pos:line="38" pos:column="36"/></literal> <operator pos:line="38" pos:column="37">&lt;&lt;<pos:position pos:line="38" pos:column="45"/></operator> <name pos:line="38" pos:column="40">s<pos:position pos:line="38" pos:column="41"/></name></expr></argument>)<pos:position pos:line="38" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="43"/></expr_stmt>

        <if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><name><name pos:line="40" pos:column="13">flags<pos:position pos:line="40" pos:column="18"/></name><operator pos:line="40" pos:column="18">.<pos:position pos:line="40" pos:column="19"/></operator><name pos:line="40" pos:column="19">case_insensitive<pos:position pos:line="40" pos:column="35"/></name></name></expr>)<pos:position pos:line="40" pos:column="36"/></condition><then pos:line="40" pos:column="36">
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="41" pos:column="13">s<pos:position pos:line="41" pos:column="14"/></name><operator pos:line="41" pos:column="14">.<pos:position pos:line="41" pos:column="15"/></operator><name pos:line="41" pos:column="15">toLower<pos:position pos:line="41" pos:column="22"/></name></name><argument_list pos:line="41" pos:column="22">()<pos:position pos:line="41" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="25"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name pos:line="43" pos:column="9">debugs<pos:position pos:line="43" pos:column="15"/></name><argument_list pos:line="43" pos:column="15">(<argument><expr><literal type="number" pos:line="43" pos:column="16">28<pos:position pos:line="43" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="20">6<pos:position pos:line="43" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="23">"Adding user "<pos:position pos:line="43" pos:column="37"/></literal> <operator pos:line="43" pos:column="38">&lt;&lt;<pos:position pos:line="43" pos:column="46"/></operator> <name pos:line="43" pos:column="41">s<pos:position pos:line="43" pos:column="42"/></name></expr></argument>)<pos:position pos:line="43" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="44" pos:column="9">userDataNames<pos:position pos:line="44" pos:column="22"/></name><operator pos:line="44" pos:column="22">.<pos:position pos:line="44" pos:column="23"/></operator><name pos:line="44" pos:column="23">insert<pos:position pos:line="44" pos:column="29"/></name></name><argument_list pos:line="44" pos:column="29">(<argument><expr><name pos:line="44" pos:column="30">s<pos:position pos:line="44" pos:column="31"/></name></expr></argument>)<pos:position pos:line="44" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="45" pos:column="6"/></block></while>

    <if pos:line="47" pos:column="5">if <condition pos:line="47" pos:column="8">(<expr><name><name pos:line="47" pos:column="9">flags<pos:position pos:line="47" pos:column="14"/></name><operator pos:line="47" pos:column="14">.<pos:position pos:line="47" pos:column="15"/></operator><name pos:line="47" pos:column="15">required<pos:position pos:line="47" pos:column="23"/></name></name> <operator pos:line="47" pos:column="24">&amp;&amp;<pos:position pos:line="47" pos:column="34"/></operator> <operator pos:line="47" pos:column="27">!<pos:position pos:line="47" pos:column="28"/></operator><call><name><name pos:line="47" pos:column="28">userDataNames<pos:position pos:line="47" pos:column="41"/></name><operator pos:line="47" pos:column="41">.<pos:position pos:line="47" pos:column="42"/></operator><name pos:line="47" pos:column="42">empty<pos:position pos:line="47" pos:column="47"/></name></name><argument_list pos:line="47" pos:column="47">()<pos:position pos:line="47" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="50"/></condition><then pos:line="47" pos:column="50"> <block pos:line="47" pos:column="51">{
        <expr_stmt><expr><call><name pos:line="48" pos:column="9">debugs<pos:position pos:line="48" pos:column="15"/></name><argument_list pos:line="48" pos:column="15">(<argument><expr><literal type="number" pos:line="48" pos:column="16">28<pos:position pos:line="48" pos:column="18"/></literal></expr></argument>, <argument><expr><call><name pos:line="48" pos:column="20">DBG_PARSE_NOTE<pos:position pos:line="48" pos:column="34"/></name><argument_list pos:line="48" pos:column="34">(<argument><expr><literal type="number" pos:line="48" pos:column="35">1<pos:position pos:line="48" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="37"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="39">"WARNING: detected attempt to add usernames to an acl of type REQUIRED"<pos:position pos:line="48" pos:column="110"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="111"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="112"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="49" pos:column="9">userDataNames<pos:position pos:line="49" pos:column="22"/></name><operator pos:line="49" pos:column="22">.<pos:position pos:line="49" pos:column="23"/></operator><name pos:line="49" pos:column="23">clear<pos:position pos:line="49" pos:column="28"/></name></name><argument_list pos:line="49" pos:column="28">()<pos:position pos:line="49" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="50" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="52" pos:column="5">debugs<pos:position pos:line="52" pos:column="11"/></name><argument_list pos:line="52" pos:column="11">(<argument><expr><literal type="number" pos:line="52" pos:column="12">28<pos:position pos:line="52" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="52" pos:column="15">4<pos:position pos:line="52" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="18">"ACL contains "<pos:position pos:line="52" pos:column="33"/></literal> <operator pos:line="52" pos:column="34">&lt;&lt;<pos:position pos:line="52" pos:column="42"/></operator> <call><name><name pos:line="52" pos:column="37">userDataNames<pos:position pos:line="52" pos:column="50"/></name><operator pos:line="52" pos:column="50">.<pos:position pos:line="52" pos:column="51"/></operator><name pos:line="52" pos:column="51">size<pos:position pos:line="52" pos:column="55"/></name></name><argument_list pos:line="52" pos:column="55">()<pos:position pos:line="52" pos:column="57"/></argument_list></call> <operator pos:line="52" pos:column="58">&lt;&lt;<pos:position pos:line="52" pos:column="66"/></operator> <literal type="string" pos:line="52" pos:column="61">" users"<pos:position pos:line="52" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="71"/></expr_stmt>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
