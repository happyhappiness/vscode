<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3546_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Icap<pos:position pos:line="1" pos:column="22"/></name><operator pos:line="1" pos:column="22">::<pos:position pos:line="1" pos:column="24"/></operator><name pos:line="1" pos:column="24">ModXact<pos:position pos:line="1" pos:column="31"/></name><operator pos:line="1" pos:column="31">::<pos:position pos:line="1" pos:column="33"/></operator><name pos:line="1" pos:column="33">parseHead<pos:position pos:line="1" pos:column="42"/></name></name><parameter_list pos:line="1" pos:column="42">(<parameter><decl><type><name pos:line="1" pos:column="43">HttpMsg<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">head<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="57"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="3" pos:column="5">Must<pos:position pos:line="3" pos:column="9"/></name><argument_list pos:line="3" pos:column="9">(<argument><expr><name pos:line="3" pos:column="10">head<pos:position pos:line="3" pos:column="14"/></name></expr></argument>)<pos:position pos:line="3" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">93<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">5<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="19">"have "<pos:position pos:line="4" pos:column="26"/></literal> <operator pos:line="4" pos:column="27">&lt;&lt;<pos:position pos:line="4" pos:column="35"/></operator> <call><name><name pos:line="4" pos:column="30">readBuf<pos:position pos:line="4" pos:column="37"/></name><operator pos:line="4" pos:column="37">.<pos:position pos:line="4" pos:column="38"/></operator><name pos:line="4" pos:column="38">length<pos:position pos:line="4" pos:column="44"/></name></name><argument_list pos:line="4" pos:column="44">()<pos:position pos:line="4" pos:column="46"/></argument_list></call> <operator pos:line="4" pos:column="47">&lt;&lt;<pos:position pos:line="4" pos:column="55"/></operator> <literal type="string" pos:line="4" pos:column="50">" head bytes to parse; state: "<pos:position pos:line="4" pos:column="81"/></literal> <operator pos:line="4" pos:column="82">&lt;&lt;<pos:position pos:line="4" pos:column="90"/></operator> <name><name pos:line="4" pos:column="85">state<pos:position pos:line="4" pos:column="90"/></name><operator pos:line="4" pos:column="90">.<pos:position pos:line="4" pos:column="91"/></operator><name pos:line="4" pos:column="91">parsing<pos:position pos:line="4" pos:column="98"/></name></name></expr></argument>)<pos:position pos:line="4" pos:column="99"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="100"/></expr_stmt>

    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">Http<pos:position pos:line="6" pos:column="9"/></name><operator pos:line="6" pos:column="9">::<pos:position pos:line="6" pos:column="11"/></operator><name pos:line="6" pos:column="11">StatusCode<pos:position pos:line="6" pos:column="21"/></name></name></type> <name pos:line="6" pos:column="22">error<pos:position pos:line="6" pos:column="27"/></name> <init pos:line="6" pos:column="28">= <expr><name><name pos:line="6" pos:column="30">Http<pos:position pos:line="6" pos:column="34"/></name><operator pos:line="6" pos:column="34">::<pos:position pos:line="6" pos:column="36"/></operator><name pos:line="6" pos:column="36">scNone<pos:position pos:line="6" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="43"/></decl_stmt>
    <comment type="line" pos:line="7" pos:column="5">// XXX: performance regression. c_str() data copies</comment>
    <comment type="line" pos:line="8" pos:column="5">// XXX: HttpMsg::parse requires a terminated string buffer</comment>
    <decl_stmt><decl><type><specifier pos:line="9" pos:column="5">const<pos:position pos:line="9" pos:column="10"/></specifier> <name pos:line="9" pos:column="11">char<pos:position pos:line="9" pos:column="15"/></name> <modifier pos:line="9" pos:column="16">*<pos:position pos:line="9" pos:column="17"/></modifier></type><name pos:line="9" pos:column="17">tmpBuf<pos:position pos:line="9" pos:column="23"/></name> <init pos:line="9" pos:column="24">= <expr><call><name><name pos:line="9" pos:column="26">readBuf<pos:position pos:line="9" pos:column="33"/></name><operator pos:line="9" pos:column="33">.<pos:position pos:line="9" pos:column="34"/></operator><name pos:line="9" pos:column="34">c_str<pos:position pos:line="9" pos:column="39"/></name></name><argument_list pos:line="9" pos:column="39">()<pos:position pos:line="9" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="42"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="10" pos:column="5">const<pos:position pos:line="10" pos:column="10"/></specifier> <name pos:line="10" pos:column="11">bool<pos:position pos:line="10" pos:column="15"/></name></type> <name pos:line="10" pos:column="16">parsed<pos:position pos:line="10" pos:column="22"/></name> <init pos:line="10" pos:column="23">= <expr><call><name><name pos:line="10" pos:column="25">head<pos:position pos:line="10" pos:column="29"/></name><operator pos:line="10" pos:column="29">-&gt;<pos:position pos:line="10" pos:column="34"/></operator><name pos:line="10" pos:column="31">parse<pos:position pos:line="10" pos:column="36"/></name></name><argument_list pos:line="10" pos:column="36">(<argument><expr><name pos:line="10" pos:column="37">tmpBuf<pos:position pos:line="10" pos:column="43"/></name></expr></argument>, <argument><expr><call><name><name pos:line="10" pos:column="45">readBuf<pos:position pos:line="10" pos:column="52"/></name><operator pos:line="10" pos:column="52">.<pos:position pos:line="10" pos:column="53"/></operator><name pos:line="10" pos:column="53">length<pos:position pos:line="10" pos:column="59"/></name></name><argument_list pos:line="10" pos:column="59">()<pos:position pos:line="10" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="10" pos:column="63">commEof<pos:position pos:line="10" pos:column="70"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="72">&amp;<pos:position pos:line="10" pos:column="77"/></operator><name pos:line="10" pos:column="73">error<pos:position pos:line="10" pos:column="78"/></name></expr></argument>)<pos:position pos:line="10" pos:column="79"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="80"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">Must<pos:position pos:line="11" pos:column="9"/></name><argument_list pos:line="11" pos:column="9">(<argument><expr><name pos:line="11" pos:column="10">parsed<pos:position pos:line="11" pos:column="16"/></name> <operator pos:line="11" pos:column="17">||<pos:position pos:line="11" pos:column="19"/></operator> <operator pos:line="11" pos:column="20">!<pos:position pos:line="11" pos:column="21"/></operator><name pos:line="11" pos:column="21">error<pos:position pos:line="11" pos:column="26"/></name></expr></argument>)<pos:position pos:line="11" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="28"/></expr_stmt> <comment type="line" pos:line="11" pos:column="29">// success or need more data</comment>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><operator pos:line="13" pos:column="9">!<pos:position pos:line="13" pos:column="10"/></operator><name pos:line="13" pos:column="10">parsed<pos:position pos:line="13" pos:column="16"/></name></expr>)<pos:position pos:line="13" pos:column="17"/></condition><then pos:line="13" pos:column="17"> <block pos:line="13" pos:column="18">{ <comment type="line" pos:line="13" pos:column="20">// need more data</comment>
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">debugs<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><literal type="number" pos:line="14" pos:column="16">93<pos:position pos:line="14" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="20">5<pos:position pos:line="14" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="23">HERE<pos:position pos:line="14" pos:column="27"/></name> <operator pos:line="14" pos:column="28">&lt;&lt;<pos:position pos:line="14" pos:column="36"/></operator> <literal type="string" pos:line="14" pos:column="31">"parse failed, need more data, return false"<pos:position pos:line="14" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="77"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="15" pos:column="9">head<pos:position pos:line="15" pos:column="13"/></name><operator pos:line="15" pos:column="13">-&gt;<pos:position pos:line="15" pos:column="18"/></operator><name pos:line="15" pos:column="15">reset<pos:position pos:line="15" pos:column="20"/></name></name><argument_list pos:line="15" pos:column="20">()<pos:position pos:line="15" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="23"/></expr_stmt>
        <return pos:line="16" pos:column="9">return <expr><literal type="boolean" pos:line="16" pos:column="16">false<pos:position pos:line="16" pos:column="21"/></literal></expr>;<pos:position pos:line="16" pos:column="22"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="19" pos:column="5">debugs<pos:position pos:line="19" pos:column="11"/></name><argument_list pos:line="19" pos:column="11">(<argument><expr><literal type="number" pos:line="19" pos:column="12">93<pos:position pos:line="19" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="16">5<pos:position pos:line="19" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="19">HERE<pos:position pos:line="19" pos:column="23"/></name> <operator pos:line="19" pos:column="24">&lt;&lt;<pos:position pos:line="19" pos:column="32"/></operator> <literal type="string" pos:line="19" pos:column="27">"parse success, consume "<pos:position pos:line="19" pos:column="52"/></literal> <operator pos:line="19" pos:column="53">&lt;&lt;<pos:position pos:line="19" pos:column="61"/></operator> <name><name pos:line="19" pos:column="56">head<pos:position pos:line="19" pos:column="60"/></name><operator pos:line="19" pos:column="60">-&gt;<pos:position pos:line="19" pos:column="65"/></operator><name pos:line="19" pos:column="62">hdr_sz<pos:position pos:line="19" pos:column="68"/></name></name> <operator pos:line="19" pos:column="69">&lt;&lt;<pos:position pos:line="19" pos:column="77"/></operator> <literal type="string" pos:line="19" pos:column="72">" bytes, return true"<pos:position pos:line="19" pos:column="93"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="95"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="20" pos:column="5">readBuf<pos:position pos:line="20" pos:column="12"/></name><operator pos:line="20" pos:column="12">.<pos:position pos:line="20" pos:column="13"/></operator><name pos:line="20" pos:column="13">consume<pos:position pos:line="20" pos:column="20"/></name></name><argument_list pos:line="20" pos:column="20">(<argument><expr><name><name pos:line="20" pos:column="21">head<pos:position pos:line="20" pos:column="25"/></name><operator pos:line="20" pos:column="25">-&gt;<pos:position pos:line="20" pos:column="30"/></operator><name pos:line="20" pos:column="27">hdr_sz<pos:position pos:line="20" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="35"/></expr_stmt>
    <return pos:line="21" pos:column="5">return <expr><literal type="boolean" pos:line="21" pos:column="12">true<pos:position pos:line="21" pos:column="16"/></literal></expr>;<pos:position pos:line="21" pos:column="17"/></return>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
