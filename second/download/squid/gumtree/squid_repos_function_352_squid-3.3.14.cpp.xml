<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_352_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">manage_request<pos:position pos:line="2" pos:column="15"/></name><parameter_list pos:line="2" pos:column="15">()<pos:position pos:line="2" pos:column="17"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">ntlmhdr<pos:position pos:line="4" pos:column="12"/></name> <modifier pos:line="4" pos:column="13">*<pos:position pos:line="4" pos:column="14"/></modifier></type><name pos:line="4" pos:column="14">fast_header<pos:position pos:line="4" pos:column="25"/></name></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name></type> <name><name pos:line="5" pos:column="10">buf<pos:position pos:line="5" pos:column="13"/></name><index pos:line="5" pos:column="13">[<expr><name pos:line="5" pos:column="14">NTLM_BLOB_BUFFER_SIZE<pos:position pos:line="5" pos:column="35"/></name></expr>]<pos:position pos:line="5" pos:column="36"/></index></name></decl>;<pos:position pos:line="5" pos:column="37"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name></type> <name><name pos:line="6" pos:column="10">decoded<pos:position pos:line="6" pos:column="17"/></name><index pos:line="6" pos:column="17">[<expr><name pos:line="6" pos:column="18">NTLM_BLOB_BUFFER_SIZE<pos:position pos:line="6" pos:column="39"/></name></expr>]<pos:position pos:line="6" pos:column="40"/></index></name></decl>;<pos:position pos:line="6" pos:column="41"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="7" pos:column="5">const<pos:position pos:line="7" pos:column="10"/></specifier> <name pos:line="7" pos:column="11">char<pos:position pos:line="7" pos:column="15"/></name> <modifier pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></modifier></type><name pos:line="7" pos:column="17">ch<pos:position pos:line="7" pos:column="19"/></name></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">char<pos:position pos:line="8" pos:column="9"/></name> <modifier pos:line="8" pos:column="10">*<pos:position pos:line="8" pos:column="11"/></modifier></type><name pos:line="8" pos:column="11">ch2<pos:position pos:line="8" pos:column="14"/></name></decl>, <modifier pos:line="8" pos:column="16">*<pos:position pos:line="8" pos:column="17"/></modifier><decl><type ref="prev"/><name pos:line="8" pos:column="17">cred<pos:position pos:line="8" pos:column="21"/></name> <init pos:line="8" pos:column="22">= <expr><name pos:line="8" pos:column="24">NULL<pos:position pos:line="8" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="29"/></decl_stmt>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><call><name pos:line="10" pos:column="9">fgets<pos:position pos:line="10" pos:column="14"/></name><argument_list pos:line="10" pos:column="14">(<argument><expr><name pos:line="10" pos:column="15">buf<pos:position pos:line="10" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="20">NTLM_BLOB_BUFFER_SIZE<pos:position pos:line="10" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="43">stdin<pos:position pos:line="10" pos:column="48"/></name></expr></argument>)<pos:position pos:line="10" pos:column="49"/></argument_list></call> <operator pos:line="10" pos:column="50">==<pos:position pos:line="10" pos:column="52"/></operator> <name pos:line="10" pos:column="53">NULL<pos:position pos:line="10" pos:column="57"/></name></expr>)<pos:position pos:line="10" pos:column="58"/></condition><then pos:line="10" pos:column="58"> <block pos:line="10" pos:column="59">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">fprintf<pos:position pos:line="11" pos:column="16"/></name><argument_list pos:line="11" pos:column="16">(<argument><expr><name pos:line="11" pos:column="17">stderr<pos:position pos:line="11" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="25">"fgets() failed! dying..... errno=%d (%s)\n"<pos:position pos:line="11" pos:column="69"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="71">errno<pos:position pos:line="11" pos:column="76"/></name></expr></argument>,
                <argument><expr><call><name pos:line="12" pos:column="17">strerror<pos:position pos:line="12" pos:column="25"/></name><argument_list pos:line="12" pos:column="25">(<argument><expr><name pos:line="12" pos:column="26">errno<pos:position pos:line="12" pos:column="31"/></name></expr></argument>)<pos:position pos:line="12" pos:column="32"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">exit<pos:position pos:line="13" pos:column="13"/></name><argument_list pos:line="13" pos:column="13">(<argument><expr><literal type="number" pos:line="13" pos:column="14">1<pos:position pos:line="13" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="17"/></expr_stmt>		<comment type="block" pos:line="13" pos:column="33">/* BIIG buffer */</comment>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">debug<pos:position pos:line="15" pos:column="10"/></name><argument_list pos:line="15" pos:column="10">(<argument><expr><literal type="string" pos:line="15" pos:column="11">"managing request\n"<pos:position pos:line="15" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name pos:line="16" pos:column="5">ch2<pos:position pos:line="16" pos:column="8"/></name> <operator pos:line="16" pos:column="9">=<pos:position pos:line="16" pos:column="10"/></operator> <operator pos:line="16" pos:column="11">(<pos:position pos:line="16" pos:column="12"/></operator><name pos:line="16" pos:column="12">char<pos:position pos:line="16" pos:column="16"/></name><operator pos:line="16" pos:column="16">*<pos:position pos:line="16" pos:column="17"/></operator><operator pos:line="16" pos:column="17">)<pos:position pos:line="16" pos:column="18"/></operator><call><name pos:line="16" pos:column="18">memchr<pos:position pos:line="16" pos:column="24"/></name><argument_list pos:line="16" pos:column="24">(<argument><expr><name pos:line="16" pos:column="25">buf<pos:position pos:line="16" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="16" pos:column="30">'\n'<pos:position pos:line="16" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="36">NTLM_BLOB_BUFFER_SIZE<pos:position pos:line="16" pos:column="57"/></name></expr></argument>)<pos:position pos:line="16" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="59"/></expr_stmt>	<comment type="block" pos:line="16" pos:column="65">/* safer against overrun than strchr */</comment>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name pos:line="17" pos:column="9">ch2<pos:position pos:line="17" pos:column="12"/></name></expr>)<pos:position pos:line="17" pos:column="13"/></condition><then pos:line="17" pos:column="13"> <block pos:line="17" pos:column="14">{
        <expr_stmt><expr><operator pos:line="18" pos:column="9">*<pos:position pos:line="18" pos:column="10"/></operator><name pos:line="18" pos:column="10">ch2<pos:position pos:line="18" pos:column="13"/></name> <operator pos:line="18" pos:column="14">=<pos:position pos:line="18" pos:column="15"/></operator> <literal type="char" pos:line="18" pos:column="16">'\0'<pos:position pos:line="18" pos:column="20"/></literal></expr>;<pos:position pos:line="18" pos:column="21"/></expr_stmt>		<comment type="block" pos:line="18" pos:column="33">/* terminate the string at newline. */</comment>
        <expr_stmt><expr><name pos:line="19" pos:column="9">ch<pos:position pos:line="19" pos:column="11"/></name> <operator pos:line="19" pos:column="12">=<pos:position pos:line="19" pos:column="13"/></operator> <name pos:line="19" pos:column="14">ch2<pos:position pos:line="19" pos:column="17"/></name></expr>;<pos:position pos:line="19" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">debug<pos:position pos:line="21" pos:column="10"/></name><argument_list pos:line="21" pos:column="10">(<argument><expr><literal type="string" pos:line="21" pos:column="11">"ntlm authenticator. Got '%s' from Squid\n"<pos:position pos:line="21" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="56">buf<pos:position pos:line="21" pos:column="59"/></name></expr></argument>)<pos:position pos:line="21" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="61"/></expr_stmt>

    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><call><name pos:line="23" pos:column="9">memcmp<pos:position pos:line="23" pos:column="15"/></name><argument_list pos:line="23" pos:column="15">(<argument><expr><name pos:line="23" pos:column="16">buf<pos:position pos:line="23" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="21">"KK "<pos:position pos:line="23" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="28">3<pos:position pos:line="23" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="30"/></argument_list></call> <operator pos:line="23" pos:column="31">==<pos:position pos:line="23" pos:column="33"/></operator> <literal type="number" pos:line="23" pos:column="34">0<pos:position pos:line="23" pos:column="35"/></literal></expr>)<pos:position pos:line="23" pos:column="36"/></condition><then pos:line="23" pos:column="36"> <block pos:line="23" pos:column="37">{	<comment type="block" pos:line="23" pos:column="41">/* authenticate-request */</comment>
        <comment type="block" pos:line="24" pos:column="9">/* figure out what we got */</comment>
        <decl_stmt><decl><type><name pos:line="25" pos:column="9">int<pos:position pos:line="25" pos:column="12"/></name></type> <name pos:line="25" pos:column="13">decodedLen<pos:position pos:line="25" pos:column="23"/></name> <init pos:line="25" pos:column="24">= <expr><call><name pos:line="25" pos:column="26">base64_decode<pos:position pos:line="25" pos:column="39"/></name><argument_list pos:line="25" pos:column="39">(<argument><expr><name pos:line="25" pos:column="40">decoded<pos:position pos:line="25" pos:column="47"/></name></expr></argument>, <argument><expr><sizeof pos:line="25" pos:column="49">sizeof<argument_list pos:line="25" pos:column="55">(<argument><expr><name pos:line="25" pos:column="56">decoded<pos:position pos:line="25" pos:column="63"/></name></expr></argument>)<pos:position pos:line="25" pos:column="64"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="25" pos:column="66">buf<pos:position pos:line="25" pos:column="69"/></name><operator pos:line="25" pos:column="69">+<pos:position pos:line="25" pos:column="70"/></operator><literal type="number" pos:line="25" pos:column="70">3<pos:position pos:line="25" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="72"/></argument_list></call></expr></init></decl>;<pos:position pos:line="25" pos:column="73"/></decl_stmt>

        <if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><operator pos:line="27" pos:column="13">(<pos:position pos:line="27" pos:column="14"/></operator><name pos:line="27" pos:column="14">size_t<pos:position pos:line="27" pos:column="20"/></name><operator pos:line="27" pos:column="20">)<pos:position pos:line="27" pos:column="21"/></operator><name pos:line="27" pos:column="21">decodedLen<pos:position pos:line="27" pos:column="31"/></name> <operator pos:line="27" pos:column="32">&lt;<pos:position pos:line="27" pos:column="36"/></operator> <sizeof pos:line="27" pos:column="34">sizeof<argument_list pos:line="27" pos:column="40">(<argument><expr><name pos:line="27" pos:column="41">ntlmhdr<pos:position pos:line="27" pos:column="48"/></name></expr></argument>)<pos:position pos:line="27" pos:column="49"/></argument_list></sizeof></expr>)<pos:position pos:line="27" pos:column="50"/></condition><then pos:line="27" pos:column="50"> <block pos:line="27" pos:column="51">{	<comment type="block" pos:line="27" pos:column="57">/* decoding failure, return error */</comment>
            <expr_stmt><expr><call><name pos:line="28" pos:column="13">SEND<pos:position pos:line="28" pos:column="17"/></name><argument_list pos:line="28" pos:column="17">(<argument><expr><literal type="string" pos:line="28" pos:column="18">"NA Packet format error, couldn't base64-decode"<pos:position pos:line="28" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="68"/></expr_stmt>
            <return pos:line="29" pos:column="13">return;<pos:position pos:line="29" pos:column="20"/></return>
        }<pos:position pos:line="30" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="31" pos:column="9">/* fast-track-decode request type. */</comment>
        <expr_stmt><expr><name pos:line="32" pos:column="9">fast_header<pos:position pos:line="32" pos:column="20"/></name> <operator pos:line="32" pos:column="21">=<pos:position pos:line="32" pos:column="22"/></operator> <operator pos:line="32" pos:column="23">(<pos:position pos:line="32" pos:column="24"/></operator><name pos:line="32" pos:column="24">ntlmhdr<pos:position pos:line="32" pos:column="31"/></name> <operator pos:line="32" pos:column="32">*<pos:position pos:line="32" pos:column="33"/></operator><operator pos:line="32" pos:column="33">)<pos:position pos:line="32" pos:column="34"/></operator> <name pos:line="32" pos:column="35">decoded<pos:position pos:line="32" pos:column="42"/></name></expr>;<pos:position pos:line="32" pos:column="43"/></expr_stmt>

        <comment type="block" pos:line="34" pos:column="9">/* sanity-check: it IS a NTLMSSP packet, isn't it? */</comment>
        <if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><call><name pos:line="35" pos:column="13">ntlm_validate_packet<pos:position pos:line="35" pos:column="33"/></name><argument_list pos:line="35" pos:column="33">(<argument><expr><name pos:line="35" pos:column="34">fast_header<pos:position pos:line="35" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="47">NTLM_ANY<pos:position pos:line="35" pos:column="55"/></name></expr></argument>)<pos:position pos:line="35" pos:column="56"/></argument_list></call> <operator pos:line="35" pos:column="57">&lt;<pos:position pos:line="35" pos:column="61"/></operator> <literal type="number" pos:line="35" pos:column="59">0<pos:position pos:line="35" pos:column="60"/></literal></expr>)<pos:position pos:line="35" pos:column="61"/></condition><then pos:line="35" pos:column="61"> <block pos:line="35" pos:column="62">{
            <expr_stmt><expr><call><name pos:line="36" pos:column="13">SEND<pos:position pos:line="36" pos:column="17"/></name><argument_list pos:line="36" pos:column="17">(<argument><expr><literal type="string" pos:line="36" pos:column="18">"NA Broken authentication packet"<pos:position pos:line="36" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="53"/></expr_stmt>
            <return pos:line="37" pos:column="13">return;<pos:position pos:line="37" pos:column="20"/></return>
        }<pos:position pos:line="38" pos:column="10"/></block></then></if>
        <switch pos:line="39" pos:column="9">switch <condition pos:line="39" pos:column="16">(<expr><call><name pos:line="39" pos:column="17">le32toh<pos:position pos:line="39" pos:column="24"/></name><argument_list pos:line="39" pos:column="24">(<argument><expr><name><name pos:line="39" pos:column="25">fast_header<pos:position pos:line="39" pos:column="36"/></name><operator pos:line="39" pos:column="36">-&gt;<pos:position pos:line="39" pos:column="41"/></operator><name pos:line="39" pos:column="38">type<pos:position pos:line="39" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="44"/></condition> <block pos:line="39" pos:column="45">{
        <case pos:line="40" pos:column="9">case <expr><name pos:line="40" pos:column="14">NTLM_NEGOTIATE<pos:position pos:line="40" pos:column="28"/></name></expr>:<pos:position pos:line="40" pos:column="29"/></case>
            <expr_stmt><expr><call><name pos:line="41" pos:column="13">SEND<pos:position pos:line="41" pos:column="17"/></name><argument_list pos:line="41" pos:column="17">(<argument><expr><literal type="string" pos:line="41" pos:column="18">"NA Invalid negotiation request received"<pos:position pos:line="41" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="61"/></expr_stmt>
            <return pos:line="42" pos:column="13">return;<pos:position pos:line="42" pos:column="20"/></return>
            <comment type="block" pos:line="43" pos:column="13">/* notreached */</comment>
        <case pos:line="44" pos:column="9">case <expr><name pos:line="44" pos:column="14">NTLM_CHALLENGE<pos:position pos:line="44" pos:column="28"/></name></expr>:<pos:position pos:line="44" pos:column="29"/></case>
            <expr_stmt><expr><call><name pos:line="45" pos:column="13">SEND<pos:position pos:line="45" pos:column="17"/></name><argument_list pos:line="45" pos:column="17">(<argument><expr><literal type="string" pos:line="45" pos:column="18">"NA Got a challenge. We refuse to have our authority disputed"<pos:position pos:line="45" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="82"/></expr_stmt>
            <return pos:line="46" pos:column="13">return;<pos:position pos:line="46" pos:column="20"/></return>
            <comment type="block" pos:line="47" pos:column="13">/* notreached */</comment>
        <case pos:line="48" pos:column="9">case <expr><name pos:line="48" pos:column="14">NTLM_AUTHENTICATE<pos:position pos:line="48" pos:column="31"/></name></expr>:<pos:position pos:line="48" pos:column="32"/></case>
            <comment type="block" pos:line="49" pos:column="13">/* check against the DC */</comment>
            <expr_stmt><expr><call><name pos:line="50" pos:column="13">signal<pos:position pos:line="50" pos:column="19"/></name><argument_list pos:line="50" pos:column="19">(<argument><expr><name pos:line="50" pos:column="20">SIGALRM<pos:position pos:line="50" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="29">timeout_during_auth<pos:position pos:line="50" pos:column="48"/></name></expr></argument>)<pos:position pos:line="50" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="50"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="51" pos:column="13">alarm<pos:position pos:line="51" pos:column="18"/></name><argument_list pos:line="51" pos:column="18">(<argument><expr><literal type="number" pos:line="51" pos:column="19">30<pos:position pos:line="51" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="23"/></expr_stmt>
            <expr_stmt><expr><name pos:line="52" pos:column="13">cred<pos:position pos:line="52" pos:column="17"/></name> <operator pos:line="52" pos:column="18">=<pos:position pos:line="52" pos:column="19"/></operator> <call><name pos:line="52" pos:column="20">ntlm_check_auth<pos:position pos:line="52" pos:column="35"/></name><argument_list pos:line="52" pos:column="35">(<argument><expr><operator pos:line="52" pos:column="36">(<pos:position pos:line="52" pos:column="37"/></operator><name pos:line="52" pos:column="37">ntlm_authenticate<pos:position pos:line="52" pos:column="54"/></name> <operator pos:line="52" pos:column="55">*<pos:position pos:line="52" pos:column="56"/></operator><operator pos:line="52" pos:column="56">)<pos:position pos:line="52" pos:column="57"/></operator> <name pos:line="52" pos:column="58">decoded<pos:position pos:line="52" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="67">decodedLen<pos:position pos:line="52" pos:column="77"/></name></expr></argument>)<pos:position pos:line="52" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="79"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="53" pos:column="13">alarm<pos:position pos:line="53" pos:column="18"/></name><argument_list pos:line="53" pos:column="18">(<argument><expr><literal type="number" pos:line="53" pos:column="19">0<pos:position pos:line="53" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="22"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="54" pos:column="13">signal<pos:position pos:line="54" pos:column="19"/></name><argument_list pos:line="54" pos:column="19">(<argument><expr><name pos:line="54" pos:column="20">SIGALRM<pos:position pos:line="54" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="29">SIG_DFL<pos:position pos:line="54" pos:column="36"/></name></expr></argument>)<pos:position pos:line="54" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="38"/></expr_stmt>
            <if pos:line="55" pos:column="13">if <condition pos:line="55" pos:column="16">(<expr><name pos:line="55" pos:column="17">got_timeout<pos:position pos:line="55" pos:column="28"/></name> <operator pos:line="55" pos:column="29">!=<pos:position pos:line="55" pos:column="31"/></operator> <literal type="number" pos:line="55" pos:column="32">0<pos:position pos:line="55" pos:column="33"/></literal></expr>)<pos:position pos:line="55" pos:column="34"/></condition><then pos:line="55" pos:column="34"> <block pos:line="55" pos:column="35">{
                <expr_stmt><expr><call><name pos:line="56" pos:column="17">fprintf<pos:position pos:line="56" pos:column="24"/></name><argument_list pos:line="56" pos:column="24">(<argument><expr><name pos:line="56" pos:column="25">stderr<pos:position pos:line="56" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="33">"ntlm-auth[%ld]: Timeout during authentication.\n"<pos:position pos:line="56" pos:column="83"/></literal></expr></argument>, <argument><expr><operator pos:line="56" pos:column="85">(<pos:position pos:line="56" pos:column="86"/></operator><name pos:line="56" pos:column="86">long<pos:position pos:line="56" pos:column="90"/></name><operator pos:line="56" pos:column="90">)<pos:position pos:line="56" pos:column="91"/></operator><call><name pos:line="56" pos:column="91">getpid<pos:position pos:line="56" pos:column="97"/></name><argument_list pos:line="56" pos:column="97">()<pos:position pos:line="56" pos:column="99"/></argument_list></call></expr></argument>)<pos:position pos:line="56" pos:column="100"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="101"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="57" pos:column="17">SEND<pos:position pos:line="57" pos:column="21"/></name><argument_list pos:line="57" pos:column="21">(<argument><expr><literal type="string" pos:line="57" pos:column="22">"BH Timeout during authentication"<pos:position pos:line="57" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="58"/></expr_stmt>
                <expr_stmt><expr><name pos:line="58" pos:column="17">got_timeout<pos:position pos:line="58" pos:column="28"/></name> <operator pos:line="58" pos:column="29">=<pos:position pos:line="58" pos:column="30"/></operator> <literal type="number" pos:line="58" pos:column="31">0<pos:position pos:line="58" pos:column="32"/></literal></expr>;<pos:position pos:line="58" pos:column="33"/></expr_stmt>
                <return pos:line="59" pos:column="17">return;<pos:position pos:line="59" pos:column="24"/></return>
            }<pos:position pos:line="60" pos:column="14"/></block></then></if>
            <if pos:line="61" pos:column="13">if <condition pos:line="61" pos:column="16">(<expr><name pos:line="61" pos:column="17">cred<pos:position pos:line="61" pos:column="21"/></name> <operator pos:line="61" pos:column="22">==<pos:position pos:line="61" pos:column="24"/></operator> <name pos:line="61" pos:column="25">NULL<pos:position pos:line="61" pos:column="29"/></name></expr>)<pos:position pos:line="61" pos:column="30"/></condition><then pos:line="61" pos:column="30"> <block pos:line="61" pos:column="31">{
                <decl_stmt><decl><type><name pos:line="62" pos:column="17">int<pos:position pos:line="62" pos:column="20"/></name></type> <name pos:line="62" pos:column="21">smblib_err<pos:position pos:line="62" pos:column="31"/></name></decl>, <decl><type ref="prev"/><name pos:line="62" pos:column="33">smb_errorclass<pos:position pos:line="62" pos:column="47"/></name></decl>, <decl><type ref="prev"/><name pos:line="62" pos:column="49">smb_errorcode<pos:position pos:line="62" pos:column="62"/></name></decl>, <decl><type ref="prev"/><name pos:line="62" pos:column="64">nb_error<pos:position pos:line="62" pos:column="72"/></name></decl>;<pos:position pos:line="62" pos:column="73"/></decl_stmt>
                <if pos:line="63" pos:column="17">if <condition pos:line="63" pos:column="20">(<expr><name pos:line="63" pos:column="21">ntlm_errno<pos:position pos:line="63" pos:column="31"/></name> <operator pos:line="63" pos:column="32">==<pos:position pos:line="63" pos:column="34"/></operator> <name pos:line="63" pos:column="35">NTLM_ERR_LOGON<pos:position pos:line="63" pos:column="49"/></name></expr>)<pos:position pos:line="63" pos:column="50"/></condition><then pos:line="63" pos:column="50"> <block pos:line="63" pos:column="51">{	<comment type="block" pos:line="63" pos:column="57">/* hackish */</comment>
                    <expr_stmt><expr><call><name pos:line="64" pos:column="21">SEND<pos:position pos:line="64" pos:column="25"/></name><argument_list pos:line="64" pos:column="25">(<argument><expr><literal type="string" pos:line="64" pos:column="26">"NA Logon Failure"<pos:position pos:line="64" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="46"/></expr_stmt>
                    <return pos:line="65" pos:column="21">return;<pos:position pos:line="65" pos:column="28"/></return>
                }<pos:position pos:line="66" pos:column="18"/></block></then></if>
                <comment type="block" pos:line="67" pos:column="17">/* there was an error. We have two errno's to look at.
                 * libntlmssp's erno is insufficient, we'll have to look at
                 * the actual SMB library error codes, to acually figure
                 * out what's happening. The thing has braindamaged interfacess..*/</comment>
                <expr_stmt><expr><name pos:line="71" pos:column="17">smblib_err<pos:position pos:line="71" pos:column="27"/></name> <operator pos:line="71" pos:column="28">=<pos:position pos:line="71" pos:column="29"/></operator> <call><name pos:line="71" pos:column="30">SMB_Get_Last_Error<pos:position pos:line="71" pos:column="48"/></name><argument_list pos:line="71" pos:column="48">()<pos:position pos:line="71" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="51"/></expr_stmt>
                <expr_stmt><expr><name pos:line="72" pos:column="17">smb_errorclass<pos:position pos:line="72" pos:column="31"/></name> <operator pos:line="72" pos:column="32">=<pos:position pos:line="72" pos:column="33"/></operator> <call><name pos:line="72" pos:column="34">SMBlib_Error_Class<pos:position pos:line="72" pos:column="52"/></name><argument_list pos:line="72" pos:column="52">(<argument><expr><call><name pos:line="72" pos:column="53">SMB_Get_Last_SMB_Err<pos:position pos:line="72" pos:column="73"/></name><argument_list pos:line="72" pos:column="73">()<pos:position pos:line="72" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="72" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="77"/></expr_stmt>
                <expr_stmt><expr><name pos:line="73" pos:column="17">smb_errorcode<pos:position pos:line="73" pos:column="30"/></name> <operator pos:line="73" pos:column="31">=<pos:position pos:line="73" pos:column="32"/></operator> <call><name pos:line="73" pos:column="33">SMBlib_Error_Code<pos:position pos:line="73" pos:column="50"/></name><argument_list pos:line="73" pos:column="50">(<argument><expr><call><name pos:line="73" pos:column="51">SMB_Get_Last_SMB_Err<pos:position pos:line="73" pos:column="71"/></name><argument_list pos:line="73" pos:column="71">()<pos:position pos:line="73" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="73" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="75"/></expr_stmt>
                <expr_stmt><expr><name pos:line="74" pos:column="17">nb_error<pos:position pos:line="74" pos:column="25"/></name> <operator pos:line="74" pos:column="26">=<pos:position pos:line="74" pos:column="27"/></operator> <call><name pos:line="74" pos:column="28">RFCNB_Get_Last_Error<pos:position pos:line="74" pos:column="48"/></name><argument_list pos:line="74" pos:column="48">()<pos:position pos:line="74" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="51"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="75" pos:column="17">debug<pos:position pos:line="75" pos:column="22"/></name><argument_list pos:line="75" pos:column="22">(<argument><expr><literal type="string" pos:line="75" pos:column="23">"No creds. SMBlib error %d, SMB error class %d, SMB error code %d, NB error %d\n"<pos:position pos:line="75" pos:column="104"/></literal></expr></argument>,
                      <argument><expr><name pos:line="76" pos:column="23">smblib_err<pos:position pos:line="76" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="35">smb_errorclass<pos:position pos:line="76" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="51">smb_errorcode<pos:position pos:line="76" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="66">nb_error<pos:position pos:line="76" pos:column="74"/></name></expr></argument>)<pos:position pos:line="76" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="76"/></expr_stmt>
                <comment type="block" pos:line="77" pos:column="17">/* Should I use smblib_err? Actually it seems I can do as well
                 * without it.. */</comment>
                <if pos:line="79" pos:column="17">if <condition pos:line="79" pos:column="20">(<expr><name pos:line="79" pos:column="21">nb_error<pos:position pos:line="79" pos:column="29"/></name> <operator pos:line="79" pos:column="30">!=<pos:position pos:line="79" pos:column="32"/></operator> <literal type="number" pos:line="79" pos:column="33">0<pos:position pos:line="79" pos:column="34"/></literal></expr>)<pos:position pos:line="79" pos:column="35"/></condition><then pos:line="79" pos:column="35"> <block pos:line="79" pos:column="36">{	<comment type="block" pos:line="79" pos:column="41">/* netbios-level error */</comment>
                    <expr_stmt><expr><call><name pos:line="80" pos:column="21">SEND<pos:position pos:line="80" pos:column="25"/></name><argument_list pos:line="80" pos:column="25">(<argument><expr><literal type="string" pos:line="80" pos:column="26">"BH NetBios error!"<pos:position pos:line="80" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="47"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="81" pos:column="21">fprintf<pos:position pos:line="81" pos:column="28"/></name><argument_list pos:line="81" pos:column="28">(<argument><expr><name pos:line="81" pos:column="29">stderr<pos:position pos:line="81" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="81" pos:column="37">"NetBios error code %d (%s)\n"<pos:position pos:line="81" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="81" pos:column="69">nb_error<pos:position pos:line="81" pos:column="77"/></name></expr></argument>,
                            <argument><expr><name><name pos:line="82" pos:column="29">RFCNB_Error_Strings<pos:position pos:line="82" pos:column="48"/></name><index pos:line="82" pos:column="48">[<expr><call><name pos:line="82" pos:column="49">abs<pos:position pos:line="82" pos:column="52"/></name><argument_list pos:line="82" pos:column="52">(<argument><expr><name pos:line="82" pos:column="53">nb_error<pos:position pos:line="82" pos:column="61"/></name></expr></argument>)<pos:position pos:line="82" pos:column="62"/></argument_list></call></expr>]<pos:position pos:line="82" pos:column="63"/></index></name></expr></argument>)<pos:position pos:line="82" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="65"/></expr_stmt>
                    <return pos:line="83" pos:column="21">return;<pos:position pos:line="83" pos:column="28"/></return>
                }<pos:position pos:line="84" pos:column="18"/></block></then></if>
                <switch pos:line="85" pos:column="17">switch <condition pos:line="85" pos:column="24">(<expr><name pos:line="85" pos:column="25">smb_errorclass<pos:position pos:line="85" pos:column="39"/></name></expr>)<pos:position pos:line="85" pos:column="40"/></condition> <block pos:line="85" pos:column="41">{
                <case pos:line="86" pos:column="17">case <expr><name pos:line="86" pos:column="22">SMBC_SUCCESS<pos:position pos:line="86" pos:column="34"/></name></expr>:<pos:position pos:line="86" pos:column="35"/></case>
                    <expr_stmt><expr><call><name pos:line="87" pos:column="21">debug<pos:position pos:line="87" pos:column="26"/></name><argument_list pos:line="87" pos:column="26">(<argument><expr><literal type="string" pos:line="87" pos:column="27">"Huh? Got a SMB success code but could check auth.."<pos:position pos:line="87" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="81"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="88" pos:column="21">SEND<pos:position pos:line="88" pos:column="25"/></name><argument_list pos:line="88" pos:column="25">(<argument><expr><literal type="string" pos:line="88" pos:column="26">"NA Authentication failed"<pos:position pos:line="88" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="54"/></expr_stmt>
                    <return pos:line="89" pos:column="21">return;<pos:position pos:line="89" pos:column="28"/></return>
                <case pos:line="90" pos:column="17">case <expr><name pos:line="90" pos:column="22">SMBC_ERRDOS<pos:position pos:line="90" pos:column="33"/></name></expr>:<pos:position pos:line="90" pos:column="34"/></case>
                    <comment type="block" pos:line="91" pos:column="21">/*this is the most important one for errors */</comment>
                    <expr_stmt><expr><call><name pos:line="92" pos:column="21">debug<pos:position pos:line="92" pos:column="26"/></name><argument_list pos:line="92" pos:column="26">(<argument><expr><literal type="string" pos:line="92" pos:column="27">"DOS error\n"<pos:position pos:line="92" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="92" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="42"/></expr_stmt>
                    <switch pos:line="93" pos:column="21">switch <condition pos:line="93" pos:column="28">(<expr><name pos:line="93" pos:column="29">smb_errorcode<pos:position pos:line="93" pos:column="42"/></name></expr>)<pos:position pos:line="93" pos:column="43"/></condition> <block pos:line="93" pos:column="44">{
                        <comment type="block" pos:line="94" pos:column="25">/* two categories matter to us: those which could be
                         * server errors, and those which are auth errors */</comment>
                    <case pos:line="96" pos:column="21">case <expr><name pos:line="96" pos:column="26">SMBD_noaccess<pos:position pos:line="96" pos:column="39"/></name></expr>:<pos:position pos:line="96" pos:column="40"/></case>	<comment type="block" pos:line="96" pos:column="41">/* 5 */</comment>
                        <expr_stmt><expr><call><name pos:line="97" pos:column="25">SEND<pos:position pos:line="97" pos:column="29"/></name><argument_list pos:line="97" pos:column="29">(<argument><expr><literal type="string" pos:line="97" pos:column="30">"NA Access denied"<pos:position pos:line="97" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="97" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="50"/></expr_stmt>
                        <return pos:line="98" pos:column="25">return;<pos:position pos:line="98" pos:column="32"/></return>
                    <case pos:line="99" pos:column="21">case <expr><name pos:line="99" pos:column="26">SMBD_badformat<pos:position pos:line="99" pos:column="40"/></name></expr>:<pos:position pos:line="99" pos:column="41"/></case>
                        <expr_stmt><expr><call><name pos:line="100" pos:column="25">SEND<pos:position pos:line="100" pos:column="29"/></name><argument_list pos:line="100" pos:column="29">(<argument><expr><literal type="string" pos:line="100" pos:column="30">"NA bad format in authentication packet"<pos:position pos:line="100" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="100" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="72"/></expr_stmt>
                        <return pos:line="101" pos:column="25">return;<pos:position pos:line="101" pos:column="32"/></return>
                    <case pos:line="102" pos:column="21">case <expr><name pos:line="102" pos:column="26">SMBD_badaccess<pos:position pos:line="102" pos:column="40"/></name></expr>:<pos:position pos:line="102" pos:column="41"/></case>
                        <expr_stmt><expr><call><name pos:line="103" pos:column="25">SEND<pos:position pos:line="103" pos:column="29"/></name><argument_list pos:line="103" pos:column="29">(<argument><expr><literal type="string" pos:line="103" pos:column="30">"NA Bad access request"<pos:position pos:line="103" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="103" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="55"/></expr_stmt>
                        <return pos:line="104" pos:column="25">return;<pos:position pos:line="104" pos:column="32"/></return>
                    <case pos:line="105" pos:column="21">case <expr><name pos:line="105" pos:column="26">SMBD_baddata<pos:position pos:line="105" pos:column="38"/></name></expr>:<pos:position pos:line="105" pos:column="39"/></case>
                        <expr_stmt><expr><call><name pos:line="106" pos:column="25">SEND<pos:position pos:line="106" pos:column="29"/></name><argument_list pos:line="106" pos:column="29">(<argument><expr><literal type="string" pos:line="106" pos:column="30">"NA Bad Data"<pos:position pos:line="106" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="106" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="45"/></expr_stmt>
                        <return pos:line="107" pos:column="25">return;<pos:position pos:line="107" pos:column="32"/></return>
                    <default pos:line="108" pos:column="21">default:<pos:position pos:line="108" pos:column="29"/></default>
                        <expr_stmt><expr><call><name pos:line="109" pos:column="25">SEND<pos:position pos:line="109" pos:column="29"/></name><argument_list pos:line="109" pos:column="29">(<argument><expr><literal type="string" pos:line="109" pos:column="30">"BH DOS Error"<pos:position pos:line="109" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="109" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="46"/></expr_stmt>
                        <return pos:line="110" pos:column="25">return;<pos:position pos:line="110" pos:column="32"/></return>
                    }<pos:position pos:line="111" pos:column="22"/></block></switch>
                <case pos:line="112" pos:column="17">case <expr><name pos:line="112" pos:column="22">SMBC_ERRSRV<pos:position pos:line="112" pos:column="33"/></name></expr>:<pos:position pos:line="112" pos:column="34"/></case>	<comment type="block" pos:line="112" pos:column="41">/* server errors */</comment>
                    <expr_stmt><expr><call><name pos:line="113" pos:column="21">debug<pos:position pos:line="113" pos:column="26"/></name><argument_list pos:line="113" pos:column="26">(<argument><expr><literal type="string" pos:line="113" pos:column="27">"Server error"<pos:position pos:line="113" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="113" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="43"/></expr_stmt>
                    <switch pos:line="114" pos:column="21">switch <condition pos:line="114" pos:column="28">(<expr><name pos:line="114" pos:column="29">smb_errorcode<pos:position pos:line="114" pos:column="42"/></name></expr>)<pos:position pos:line="114" pos:column="43"/></condition> <block pos:line="114" pos:column="44">{
                        <comment type="block" pos:line="115" pos:column="25">/* mostly same as above */</comment>
                    <case pos:line="116" pos:column="21">case <expr><name pos:line="116" pos:column="26">SMBV_badpw<pos:position pos:line="116" pos:column="36"/></name></expr>:<pos:position pos:line="116" pos:column="37"/></case>
                        <expr_stmt><expr><call><name pos:line="117" pos:column="25">SEND<pos:position pos:line="117" pos:column="29"/></name><argument_list pos:line="117" pos:column="29">(<argument><expr><literal type="string" pos:line="117" pos:column="30">"NA Bad password"<pos:position pos:line="117" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="117" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="49"/></expr_stmt>
                        <return pos:line="118" pos:column="25">return;<pos:position pos:line="118" pos:column="32"/></return>
                    <case pos:line="119" pos:column="21">case <expr><name pos:line="119" pos:column="26">SMBV_access<pos:position pos:line="119" pos:column="37"/></name></expr>:<pos:position pos:line="119" pos:column="38"/></case>
                        <expr_stmt><expr><call><name pos:line="120" pos:column="25">SEND<pos:position pos:line="120" pos:column="29"/></name><argument_list pos:line="120" pos:column="29">(<argument><expr><literal type="string" pos:line="120" pos:column="30">"NA Server access error"<pos:position pos:line="120" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="120" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="56"/></expr_stmt>
                        <return pos:line="121" pos:column="25">return;<pos:position pos:line="121" pos:column="32"/></return>
                    <default pos:line="122" pos:column="21">default:<pos:position pos:line="122" pos:column="29"/></default>
                        <expr_stmt><expr><call><name pos:line="123" pos:column="25">SEND<pos:position pos:line="123" pos:column="29"/></name><argument_list pos:line="123" pos:column="29">(<argument><expr><literal type="string" pos:line="123" pos:column="30">"BH Server Error"<pos:position pos:line="123" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="123" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="49"/></expr_stmt>
                        <return pos:line="124" pos:column="25">return;<pos:position pos:line="124" pos:column="32"/></return>
                    }<pos:position pos:line="125" pos:column="22"/></block></switch>
                <case pos:line="126" pos:column="17">case <expr><name pos:line="126" pos:column="22">SMBC_ERRHRD<pos:position pos:line="126" pos:column="33"/></name></expr>:<pos:position pos:line="126" pos:column="34"/></case>	<comment type="block" pos:line="126" pos:column="41">/* hardware errors don't really matter */</comment>
                    <expr_stmt><expr><call><name pos:line="127" pos:column="21">SEND<pos:position pos:line="127" pos:column="25"/></name><argument_list pos:line="127" pos:column="25">(<argument><expr><literal type="string" pos:line="127" pos:column="26">"BH Domain Controller Hardware error"<pos:position pos:line="127" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="127" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="65"/></expr_stmt>
                    <return pos:line="128" pos:column="21">return;<pos:position pos:line="128" pos:column="28"/></return>
                <case pos:line="129" pos:column="17">case <expr><name pos:line="129" pos:column="22">SMBC_ERRCMD<pos:position pos:line="129" pos:column="33"/></name></expr>:<pos:position pos:line="129" pos:column="34"/></case>
                    <expr_stmt><expr><call><name pos:line="130" pos:column="21">SEND<pos:position pos:line="130" pos:column="25"/></name><argument_list pos:line="130" pos:column="25">(<argument><expr><literal type="string" pos:line="130" pos:column="26">"BH Domain Controller Command Error"<pos:position pos:line="130" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="130" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="64"/></expr_stmt>
                    <return pos:line="131" pos:column="21">return;<pos:position pos:line="131" pos:column="28"/></return>
                }<pos:position pos:line="132" pos:column="18"/></block></switch>
                <expr_stmt><expr><call><name pos:line="133" pos:column="17">SEND<pos:position pos:line="133" pos:column="21"/></name><argument_list pos:line="133" pos:column="21">(<argument><expr><literal type="string" pos:line="133" pos:column="22">"BH unknown internal error."<pos:position pos:line="133" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="133" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="52"/></expr_stmt>
                <return pos:line="134" pos:column="17">return;<pos:position pos:line="134" pos:column="24"/></return>
            }<pos:position pos:line="135" pos:column="14"/></block></then></if>

            <expr_stmt><expr><call><name pos:line="137" pos:column="13">lc<pos:position pos:line="137" pos:column="15"/></name><argument_list pos:line="137" pos:column="15">(<argument><expr><name pos:line="137" pos:column="16">cred<pos:position pos:line="137" pos:column="20"/></name></expr></argument>)<pos:position pos:line="137" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="22"/></expr_stmt>		<comment type="block" pos:line="137" pos:column="33">/* let's lowercase them for our convenience */</comment>
            <expr_stmt><expr><call><name pos:line="138" pos:column="13">SEND2<pos:position pos:line="138" pos:column="18"/></name><argument_list pos:line="138" pos:column="18">(<argument><expr><literal type="string" pos:line="138" pos:column="19">"AF %s"<pos:position pos:line="138" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="138" pos:column="28">cred<pos:position pos:line="138" pos:column="32"/></name></expr></argument>)<pos:position pos:line="138" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="34"/></expr_stmt>
            <return pos:line="139" pos:column="13">return;<pos:position pos:line="139" pos:column="20"/></return>
        <default pos:line="140" pos:column="9">default:<pos:position pos:line="140" pos:column="17"/></default>
            <expr_stmt><expr><call><name pos:line="141" pos:column="13">SEND<pos:position pos:line="141" pos:column="17"/></name><argument_list pos:line="141" pos:column="17">(<argument><expr><literal type="string" pos:line="141" pos:column="18">"BH unknown authentication packet type"<pos:position pos:line="141" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="141" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="59"/></expr_stmt>
            <return pos:line="142" pos:column="13">return;<pos:position pos:line="142" pos:column="20"/></return>
        }<pos:position pos:line="143" pos:column="10"/></block></switch>
        <comment type="block" pos:line="144" pos:column="9">/* notreached */</comment>
        <return pos:line="145" pos:column="9">return;<pos:position pos:line="145" pos:column="16"/></return>
    }<pos:position pos:line="146" pos:column="6"/></block></then></if>
    <if pos:line="147" pos:column="5">if <condition pos:line="147" pos:column="8">(<expr><call><name pos:line="147" pos:column="9">memcmp<pos:position pos:line="147" pos:column="15"/></name><argument_list pos:line="147" pos:column="15">(<argument><expr><name pos:line="147" pos:column="16">buf<pos:position pos:line="147" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="147" pos:column="21">"YR"<pos:position pos:line="147" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="147" pos:column="27">2<pos:position pos:line="147" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="147" pos:column="29"/></argument_list></call> <operator pos:line="147" pos:column="30">==<pos:position pos:line="147" pos:column="32"/></operator> <literal type="number" pos:line="147" pos:column="33">0<pos:position pos:line="147" pos:column="34"/></literal></expr>)<pos:position pos:line="147" pos:column="35"/></condition><then pos:line="147" pos:column="35"> <block pos:line="147" pos:column="36">{	<comment type="block" pos:line="147" pos:column="41">/* refresh-request */</comment>
        <expr_stmt><expr><call><name pos:line="148" pos:column="9">dc_disconnect<pos:position pos:line="148" pos:column="22"/></name><argument_list pos:line="148" pos:column="22">()<pos:position pos:line="148" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><name pos:line="149" pos:column="9">ch<pos:position pos:line="149" pos:column="11"/></name> <operator pos:line="149" pos:column="12">=<pos:position pos:line="149" pos:column="13"/></operator> <call><name pos:line="149" pos:column="14">obtain_challenge<pos:position pos:line="149" pos:column="30"/></name><argument_list pos:line="149" pos:column="30">()<pos:position pos:line="149" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="33"/></expr_stmt>
        <comment type="block" pos:line="150" pos:column="9">/* Robert says we can afford to wait forever. I'll trust him on this
         * one */</comment>
        <while pos:line="152" pos:column="9">while <condition pos:line="152" pos:column="15">(<expr><name pos:line="152" pos:column="16">ch<pos:position pos:line="152" pos:column="18"/></name> <operator pos:line="152" pos:column="19">==<pos:position pos:line="152" pos:column="21"/></operator> <name pos:line="152" pos:column="22">NULL<pos:position pos:line="152" pos:column="26"/></name></expr>)<pos:position pos:line="152" pos:column="27"/></condition> <block pos:line="152" pos:column="28">{
            <expr_stmt><expr><call><name pos:line="153" pos:column="13">sleep<pos:position pos:line="153" pos:column="18"/></name><argument_list pos:line="153" pos:column="18">(<argument><expr><literal type="number" pos:line="153" pos:column="19">30<pos:position pos:line="153" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="153" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="153" pos:column="23"/></expr_stmt>
            <expr_stmt><expr><name pos:line="154" pos:column="13">ch<pos:position pos:line="154" pos:column="15"/></name> <operator pos:line="154" pos:column="16">=<pos:position pos:line="154" pos:column="17"/></operator> <call><name pos:line="154" pos:column="18">obtain_challenge<pos:position pos:line="154" pos:column="34"/></name><argument_list pos:line="154" pos:column="34">()<pos:position pos:line="154" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="37"/></expr_stmt>
        }<pos:position pos:line="155" pos:column="10"/></block></while>
        <expr_stmt><expr><call><name pos:line="156" pos:column="9">SEND2<pos:position pos:line="156" pos:column="14"/></name><argument_list pos:line="156" pos:column="14">(<argument><expr><literal type="string" pos:line="156" pos:column="15">"TT %s"<pos:position pos:line="156" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="156" pos:column="24">ch<pos:position pos:line="156" pos:column="26"/></name></expr></argument>)<pos:position pos:line="156" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="28"/></expr_stmt>
        <return pos:line="157" pos:column="9">return;<pos:position pos:line="157" pos:column="16"/></return>
    }<pos:position pos:line="158" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="159" pos:column="5">SEND<pos:position pos:line="159" pos:column="9"/></name><argument_list pos:line="159" pos:column="9">(<argument><expr><literal type="string" pos:line="159" pos:column="10">"BH Helper detected protocol error"<pos:position pos:line="159" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="159" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="159" pos:column="47"/></expr_stmt>
    <return pos:line="160" pos:column="5">return;<pos:position pos:line="160" pos:column="12"/></return>
    <comment type="block" format="doxygen" pos:line="161" pos:column="5">/********* END ********/</comment>

}<pos:position pos:line="163" pos:column="2"/></block></function></unit>
