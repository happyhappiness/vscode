<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6338_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ipc<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">StoreMap<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">abortIo<pos:position pos:line="2" pos:column="23"/></name></name><parameter_list pos:line="2" pos:column="23">(<parameter><decl><type><specifier pos:line="2" pos:column="24">const<pos:position pos:line="2" pos:column="29"/></specifier> <name pos:line="2" pos:column="30">sfileno<pos:position pos:line="2" pos:column="37"/></name></type> <name pos:line="2" pos:column="38">fileno<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="45"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">54<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">5<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="19">HERE<pos:position pos:line="4" pos:column="23"/></name> <operator pos:line="4" pos:column="24">&lt;&lt;<pos:position pos:line="4" pos:column="32"/></operator> <literal type="string" pos:line="4" pos:column="27">" abort I/O for slot at "<pos:position pos:line="4" pos:column="52"/></literal> <operator pos:line="4" pos:column="53">&lt;&lt;<pos:position pos:line="4" pos:column="61"/></operator> <name pos:line="4" pos:column="56">fileno<pos:position pos:line="4" pos:column="62"/></name> <operator pos:line="4" pos:column="63">&lt;&lt;<pos:position pos:line="4" pos:column="71"/></operator>
           <literal type="string" pos:line="5" pos:column="12">" in map ["<pos:position pos:line="5" pos:column="23"/></literal> <operator pos:line="5" pos:column="24">&lt;&lt;<pos:position pos:line="5" pos:column="32"/></operator> <name pos:line="5" pos:column="27">path<pos:position pos:line="5" pos:column="31"/></name> <operator pos:line="5" pos:column="32">&lt;&lt;<pos:position pos:line="5" pos:column="40"/></operator> <literal type="char" pos:line="5" pos:column="35">']'<pos:position pos:line="5" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><call><name pos:line="6" pos:column="12">valid<pos:position pos:line="6" pos:column="17"/></name><argument_list pos:line="6" pos:column="17">(<argument><expr><name pos:line="6" pos:column="18">fileno<pos:position pos:line="6" pos:column="24"/></name></expr></argument>)<pos:position pos:line="6" pos:column="25"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="27"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">Slot<pos:position pos:line="7" pos:column="9"/></name> <modifier pos:line="7" pos:column="10">&amp;<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="11">s<pos:position pos:line="7" pos:column="12"/></name> <init pos:line="7" pos:column="13">= <expr><name><name pos:line="7" pos:column="15">shared<pos:position pos:line="7" pos:column="21"/></name><operator pos:line="7" pos:column="21">-&gt;<pos:position pos:line="7" pos:column="26"/></operator><name pos:line="7" pos:column="23">slots<pos:position pos:line="7" pos:column="28"/></name><index pos:line="7" pos:column="28">[<expr><name pos:line="7" pos:column="29">fileno<pos:position pos:line="7" pos:column="35"/></name></expr>]<pos:position pos:line="7" pos:column="36"/></index></name></expr></init></decl>;<pos:position pos:line="7" pos:column="37"/></decl_stmt>

    <comment type="line" pos:line="9" pos:column="5">// The caller is a lock holder. Thus, if we are Writeable, then the</comment>
    <comment type="line" pos:line="10" pos:column="5">// caller must be the writer; otherwise the caller must be the reader.</comment>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name><name pos:line="11" pos:column="9">s<pos:position pos:line="11" pos:column="10"/></name><operator pos:line="11" pos:column="10">.<pos:position pos:line="11" pos:column="11"/></operator><name pos:line="11" pos:column="11">state<pos:position pos:line="11" pos:column="16"/></name></name> <operator pos:line="11" pos:column="17">==<pos:position pos:line="11" pos:column="19"/></operator> <name><name pos:line="11" pos:column="20">Slot<pos:position pos:line="11" pos:column="24"/></name><operator pos:line="11" pos:column="24">::<pos:position pos:line="11" pos:column="26"/></operator><name pos:line="11" pos:column="26">Writeable<pos:position pos:line="11" pos:column="35"/></name></name></expr>)<pos:position pos:line="11" pos:column="36"/></condition><then pos:line="11" pos:column="36">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="9">abortWriting<pos:position pos:line="12" pos:column="21"/></name><argument_list pos:line="12" pos:column="21">(<argument><expr><name pos:line="12" pos:column="22">fileno<pos:position pos:line="12" pos:column="28"/></name></expr></argument>)<pos:position pos:line="12" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="30"/></expr_stmt></block></then>
    <else pos:line="13" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="9">closeForReading<pos:position pos:line="14" pos:column="24"/></name><argument_list pos:line="14" pos:column="24">(<argument><expr><name pos:line="14" pos:column="25">fileno<pos:position pos:line="14" pos:column="31"/></name></expr></argument>)<pos:position pos:line="14" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="33"/></expr_stmt></block></else></if>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
