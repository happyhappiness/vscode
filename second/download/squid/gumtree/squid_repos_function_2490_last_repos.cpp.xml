<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2490_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">StoreEntry<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">adjustVary<pos:position pos:line="2" pos:column="23"/></name></name><parameter_list pos:line="2" pos:column="23">()<pos:position pos:line="2" pos:column="25"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">mem_obj<pos:position pos:line="4" pos:column="19"/></name></expr></argument>)<pos:position pos:line="4" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="21"/></expr_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">!<pos:position pos:line="6" pos:column="10"/></operator><name><name pos:line="6" pos:column="10">mem_obj<pos:position pos:line="6" pos:column="17"/></name><operator pos:line="6" pos:column="17">-&gt;<pos:position pos:line="6" pos:column="22"/></operator><name pos:line="6" pos:column="19">request<pos:position pos:line="6" pos:column="26"/></name></name></expr>)<pos:position pos:line="6" pos:column="27"/></condition><then pos:line="6" pos:column="27">
        <block type="pseudo"><return pos:line="7" pos:column="9">return;<pos:position pos:line="7" pos:column="16"/></return></block></then></if>

    <decl_stmt><decl><type><name pos:line="9" pos:column="5">HttpRequest<pos:position pos:line="9" pos:column="16"/></name> <modifier pos:line="9" pos:column="17">*<pos:position pos:line="9" pos:column="18"/></modifier></type><name pos:line="9" pos:column="18">request<pos:position pos:line="9" pos:column="25"/></name> <init pos:line="9" pos:column="26">= <expr><name><name pos:line="9" pos:column="28">mem_obj<pos:position pos:line="9" pos:column="35"/></name><operator pos:line="9" pos:column="35">-&gt;<pos:position pos:line="9" pos:column="40"/></operator><name pos:line="9" pos:column="37">request<pos:position pos:line="9" pos:column="44"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="45"/></decl_stmt>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><call><name><name pos:line="11" pos:column="9">mem_obj<pos:position pos:line="11" pos:column="16"/></name><operator pos:line="11" pos:column="16">-&gt;<pos:position pos:line="11" pos:column="21"/></operator><name pos:line="11" pos:column="18">vary_headers<pos:position pos:line="11" pos:column="30"/></name><operator pos:line="11" pos:column="30">.<pos:position pos:line="11" pos:column="31"/></operator><name pos:line="11" pos:column="31">isEmpty<pos:position pos:line="11" pos:column="38"/></name></name><argument_list pos:line="11" pos:column="38">()<pos:position pos:line="11" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="41"/></condition><then pos:line="11" pos:column="41"> <block pos:line="11" pos:column="42">{
        <comment type="block" pos:line="12" pos:column="9">/* First handle the case where the object no longer varies */</comment>
        <expr_stmt><expr><call><name><name pos:line="13" pos:column="9">request<pos:position pos:line="13" pos:column="16"/></name><operator pos:line="13" pos:column="16">-&gt;<pos:position pos:line="13" pos:column="21"/></operator><name pos:line="13" pos:column="18">vary_headers<pos:position pos:line="13" pos:column="30"/></name><operator pos:line="13" pos:column="30">.<pos:position pos:line="13" pos:column="31"/></operator><name pos:line="13" pos:column="31">clear<pos:position pos:line="13" pos:column="36"/></name></name><argument_list pos:line="13" pos:column="36">()<pos:position pos:line="13" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></then> <else pos:line="14" pos:column="7">else <block pos:line="14" pos:column="12">{
        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><operator pos:line="15" pos:column="13">!<pos:position pos:line="15" pos:column="14"/></operator><call><name><name pos:line="15" pos:column="14">request<pos:position pos:line="15" pos:column="21"/></name><operator pos:line="15" pos:column="21">-&gt;<pos:position pos:line="15" pos:column="26"/></operator><name pos:line="15" pos:column="23">vary_headers<pos:position pos:line="15" pos:column="35"/></name><operator pos:line="15" pos:column="35">.<pos:position pos:line="15" pos:column="36"/></operator><name pos:line="15" pos:column="36">isEmpty<pos:position pos:line="15" pos:column="43"/></name></name><argument_list pos:line="15" pos:column="43">()<pos:position pos:line="15" pos:column="45"/></argument_list></call> <operator pos:line="15" pos:column="46">&amp;&amp;<pos:position pos:line="15" pos:column="56"/></operator> <call><name><name pos:line="15" pos:column="49">request<pos:position pos:line="15" pos:column="56"/></name><operator pos:line="15" pos:column="56">-&gt;<pos:position pos:line="15" pos:column="61"/></operator><name pos:line="15" pos:column="58">vary_headers<pos:position pos:line="15" pos:column="70"/></name><operator pos:line="15" pos:column="70">.<pos:position pos:line="15" pos:column="71"/></operator><name pos:line="15" pos:column="71">cmp<pos:position pos:line="15" pos:column="74"/></name></name><argument_list pos:line="15" pos:column="74">(<argument><expr><name><name pos:line="15" pos:column="75">mem_obj<pos:position pos:line="15" pos:column="82"/></name><operator pos:line="15" pos:column="82">-&gt;<pos:position pos:line="15" pos:column="87"/></operator><name pos:line="15" pos:column="84">vary_headers<pos:position pos:line="15" pos:column="96"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="97"/></argument_list></call> <operator pos:line="15" pos:column="98">!=<pos:position pos:line="15" pos:column="100"/></operator> <literal type="number" pos:line="15" pos:column="101">0<pos:position pos:line="15" pos:column="102"/></literal></expr>)<pos:position pos:line="15" pos:column="103"/></condition><then pos:line="15" pos:column="103"> <block pos:line="15" pos:column="104">{
            <comment type="block" pos:line="16" pos:column="13">/* Oops.. the variance has changed. Kill the base object
             * to record the new variance key
             */</comment>
            <expr_stmt><expr><call><name><name pos:line="19" pos:column="13">request<pos:position pos:line="19" pos:column="20"/></name><operator pos:line="19" pos:column="20">-&gt;<pos:position pos:line="19" pos:column="25"/></operator><name pos:line="19" pos:column="22">vary_headers<pos:position pos:line="19" pos:column="34"/></name><operator pos:line="19" pos:column="34">.<pos:position pos:line="19" pos:column="35"/></operator><name pos:line="19" pos:column="35">clear<pos:position pos:line="19" pos:column="40"/></name></name><argument_list pos:line="19" pos:column="40">()<pos:position pos:line="19" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="43"/></expr_stmt>       <comment type="block" pos:line="19" pos:column="50">/* free old "bad" variance key */</comment>
            <if pos:line="20" pos:column="13">if <condition pos:line="20" pos:column="16">(<decl><type><name pos:line="20" pos:column="17">StoreEntry<pos:position pos:line="20" pos:column="27"/></name> <modifier pos:line="20" pos:column="28">*<pos:position pos:line="20" pos:column="29"/></modifier></type><name pos:line="20" pos:column="29">pe<pos:position pos:line="20" pos:column="31"/></name> <init pos:line="20" pos:column="32">= <expr><call><name pos:line="20" pos:column="34">storeGetPublic<pos:position pos:line="20" pos:column="48"/></name><argument_list pos:line="20" pos:column="48">(<argument><expr><call><name><name pos:line="20" pos:column="49">mem_obj<pos:position pos:line="20" pos:column="56"/></name><operator pos:line="20" pos:column="56">-&gt;<pos:position pos:line="20" pos:column="61"/></operator><name pos:line="20" pos:column="58">storeId<pos:position pos:line="20" pos:column="65"/></name></name><argument_list pos:line="20" pos:column="65">()<pos:position pos:line="20" pos:column="67"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="69">mem_obj<pos:position pos:line="20" pos:column="76"/></name><operator pos:line="20" pos:column="76">-&gt;<pos:position pos:line="20" pos:column="81"/></operator><name pos:line="20" pos:column="78">method<pos:position pos:line="20" pos:column="84"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="85"/></argument_list></call></expr></init></decl>)<pos:position pos:line="20" pos:column="86"/></condition><then pos:line="20" pos:column="86">
                <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="21" pos:column="17">pe<pos:position pos:line="21" pos:column="19"/></name><operator pos:line="21" pos:column="19">-&gt;<pos:position pos:line="21" pos:column="24"/></operator><name pos:line="21" pos:column="21">release<pos:position pos:line="21" pos:column="28"/></name></name><argument_list pos:line="21" pos:column="28">()<pos:position pos:line="21" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="31"/></expr_stmt></block></then></if>
        }<pos:position pos:line="22" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="24" pos:column="9">/* Make sure the request knows the variance status */</comment>
        <if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><call><name><name pos:line="25" pos:column="13">request<pos:position pos:line="25" pos:column="20"/></name><operator pos:line="25" pos:column="20">-&gt;<pos:position pos:line="25" pos:column="25"/></operator><name pos:line="25" pos:column="22">vary_headers<pos:position pos:line="25" pos:column="34"/></name><operator pos:line="25" pos:column="34">.<pos:position pos:line="25" pos:column="35"/></operator><name pos:line="25" pos:column="35">isEmpty<pos:position pos:line="25" pos:column="42"/></name></name><argument_list pos:line="25" pos:column="42">()<pos:position pos:line="25" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="45"/></condition><then pos:line="25" pos:column="45">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="26" pos:column="13">request<pos:position pos:line="26" pos:column="20"/></name><operator pos:line="26" pos:column="20">-&gt;<pos:position pos:line="26" pos:column="25"/></operator><name pos:line="26" pos:column="22">vary_headers<pos:position pos:line="26" pos:column="34"/></name></name> <operator pos:line="26" pos:column="35">=<pos:position pos:line="26" pos:column="36"/></operator> <call><name pos:line="26" pos:column="37">httpMakeVaryMark<pos:position pos:line="26" pos:column="53"/></name><argument_list pos:line="26" pos:column="53">(<argument><expr><name pos:line="26" pos:column="54">request<pos:position pos:line="26" pos:column="61"/></name></expr></argument>, <argument><expr><call><name><name pos:line="26" pos:column="63">mem_obj<pos:position pos:line="26" pos:column="70"/></name><operator pos:line="26" pos:column="70">-&gt;<pos:position pos:line="26" pos:column="75"/></operator><name pos:line="26" pos:column="72">getReply<pos:position pos:line="26" pos:column="80"/></name></name><argument_list pos:line="26" pos:column="80">()<pos:position pos:line="26" pos:column="82"/></argument_list></call></expr></argument>)<pos:position pos:line="26" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="84"/></expr_stmt></block></then></if>
    }<pos:position pos:line="27" pos:column="6"/></block></else></if>

    <comment type="line" pos:line="29" pos:column="5">// TODO: storeGetPublic() calls below may create unlocked entries.</comment>
    <comment type="line" pos:line="30" pos:column="5">// We should add/use storeHas() API or lock/unlock those entries.</comment>
    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><operator pos:line="31" pos:column="9">!<pos:position pos:line="31" pos:column="10"/></operator><call><name><name pos:line="31" pos:column="10">mem_obj<pos:position pos:line="31" pos:column="17"/></name><operator pos:line="31" pos:column="17">-&gt;<pos:position pos:line="31" pos:column="22"/></operator><name pos:line="31" pos:column="19">vary_headers<pos:position pos:line="31" pos:column="31"/></name><operator pos:line="31" pos:column="31">.<pos:position pos:line="31" pos:column="32"/></operator><name pos:line="31" pos:column="32">isEmpty<pos:position pos:line="31" pos:column="39"/></name></name><argument_list pos:line="31" pos:column="39">()<pos:position pos:line="31" pos:column="41"/></argument_list></call> <operator pos:line="31" pos:column="42">&amp;&amp;<pos:position pos:line="31" pos:column="52"/></operator> <operator pos:line="31" pos:column="45">!<pos:position pos:line="31" pos:column="46"/></operator><call><name pos:line="31" pos:column="46">storeGetPublic<pos:position pos:line="31" pos:column="60"/></name><argument_list pos:line="31" pos:column="60">(<argument><expr><call><name><name pos:line="31" pos:column="61">mem_obj<pos:position pos:line="31" pos:column="68"/></name><operator pos:line="31" pos:column="68">-&gt;<pos:position pos:line="31" pos:column="73"/></operator><name pos:line="31" pos:column="70">storeId<pos:position pos:line="31" pos:column="77"/></name></name><argument_list pos:line="31" pos:column="77">()<pos:position pos:line="31" pos:column="79"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="81">mem_obj<pos:position pos:line="31" pos:column="88"/></name><operator pos:line="31" pos:column="88">-&gt;<pos:position pos:line="31" pos:column="93"/></operator><name pos:line="31" pos:column="90">method<pos:position pos:line="31" pos:column="96"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="97"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="98"/></condition><then pos:line="31" pos:column="98"> <block pos:line="31" pos:column="99">{
        <comment type="block" pos:line="32" pos:column="9">/* Create "vary" base object */</comment>
        <decl_stmt><decl><type><name pos:line="33" pos:column="9">String<pos:position pos:line="33" pos:column="15"/></name></type> <name pos:line="33" pos:column="16">vary<pos:position pos:line="33" pos:column="20"/></name></decl>;<pos:position pos:line="33" pos:column="21"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="34" pos:column="9">StoreEntry<pos:position pos:line="34" pos:column="19"/></name> <modifier pos:line="34" pos:column="20">*<pos:position pos:line="34" pos:column="21"/></modifier></type><name pos:line="34" pos:column="21">pe<pos:position pos:line="34" pos:column="23"/></name> <init pos:line="34" pos:column="24">= <expr><call><name pos:line="34" pos:column="26">storeCreateEntry<pos:position pos:line="34" pos:column="42"/></name><argument_list pos:line="34" pos:column="42">(<argument><expr><call><name><name pos:line="34" pos:column="43">mem_obj<pos:position pos:line="34" pos:column="50"/></name><operator pos:line="34" pos:column="50">-&gt;<pos:position pos:line="34" pos:column="55"/></operator><name pos:line="34" pos:column="52">storeId<pos:position pos:line="34" pos:column="59"/></name></name><argument_list pos:line="34" pos:column="59">()<pos:position pos:line="34" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="34" pos:column="63">mem_obj<pos:position pos:line="34" pos:column="70"/></name><operator pos:line="34" pos:column="70">-&gt;<pos:position pos:line="34" pos:column="75"/></operator><name pos:line="34" pos:column="72">logUri<pos:position pos:line="34" pos:column="78"/></name></name><argument_list pos:line="34" pos:column="78">()<pos:position pos:line="34" pos:column="80"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="82">request<pos:position pos:line="34" pos:column="89"/></name><operator pos:line="34" pos:column="89">-&gt;<pos:position pos:line="34" pos:column="94"/></operator><name pos:line="34" pos:column="91">flags<pos:position pos:line="34" pos:column="96"/></name></name></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="98">request<pos:position pos:line="34" pos:column="105"/></name><operator pos:line="34" pos:column="105">-&gt;<pos:position pos:line="34" pos:column="110"/></operator><name pos:line="34" pos:column="107">method<pos:position pos:line="34" pos:column="113"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="114"/></argument_list></call></expr></init></decl>;<pos:position pos:line="34" pos:column="115"/></decl_stmt>
        <comment type="block" pos:line="35" pos:column="9">/* We are allowed to do this typecast */</comment>
        <decl_stmt><decl><type><name pos:line="36" pos:column="9">HttpReply<pos:position pos:line="36" pos:column="18"/></name> <modifier pos:line="36" pos:column="19">*<pos:position pos:line="36" pos:column="20"/></modifier></type><name pos:line="36" pos:column="20">rep<pos:position pos:line="36" pos:column="23"/></name> <init pos:line="36" pos:column="24">= <expr><operator pos:line="36" pos:column="26">new<pos:position pos:line="36" pos:column="29"/></operator> <name pos:line="36" pos:column="30">HttpReply<pos:position pos:line="36" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="36" pos:column="40"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="37" pos:column="9">rep<pos:position pos:line="37" pos:column="12"/></name><operator pos:line="37" pos:column="12">-&gt;<pos:position pos:line="37" pos:column="17"/></operator><name pos:line="37" pos:column="14">setHeaders<pos:position pos:line="37" pos:column="24"/></name></name><argument_list pos:line="37" pos:column="24">(<argument><expr><name><name pos:line="37" pos:column="25">Http<pos:position pos:line="37" pos:column="29"/></name><operator pos:line="37" pos:column="29">::<pos:position pos:line="37" pos:column="31"/></operator><name pos:line="37" pos:column="31">scOkay<pos:position pos:line="37" pos:column="37"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="39">"Internal marker object"<pos:position pos:line="37" pos:column="63"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="65">"x-squid-internal/vary"<pos:position pos:line="37" pos:column="88"/></literal></expr></argument>, <argument><expr><operator pos:line="37" pos:column="90">-<pos:position pos:line="37" pos:column="91"/></operator><literal type="number" pos:line="37" pos:column="91">1<pos:position pos:line="37" pos:column="92"/></literal></expr></argument>, <argument><expr><operator pos:line="37" pos:column="94">-<pos:position pos:line="37" pos:column="95"/></operator><literal type="number" pos:line="37" pos:column="95">1<pos:position pos:line="37" pos:column="96"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="98">squid_curtime<pos:position pos:line="37" pos:column="111"/></name> <operator pos:line="37" pos:column="112">+<pos:position pos:line="37" pos:column="113"/></operator> <literal type="number" pos:line="37" pos:column="114">100000<pos:position pos:line="37" pos:column="120"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="121"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="122"/></expr_stmt>
        <expr_stmt><expr><name pos:line="38" pos:column="9">vary<pos:position pos:line="38" pos:column="13"/></name> <operator pos:line="38" pos:column="14">=<pos:position pos:line="38" pos:column="15"/></operator> <call><name><name pos:line="38" pos:column="16">mem_obj<pos:position pos:line="38" pos:column="23"/></name><operator pos:line="38" pos:column="23">-&gt;<pos:position pos:line="38" pos:column="28"/></operator><name pos:line="38" pos:column="25">getReply<pos:position pos:line="38" pos:column="33"/></name></name><argument_list pos:line="38" pos:column="33">()<pos:position pos:line="38" pos:column="35"/></argument_list></call><operator pos:line="38" pos:column="35">-&gt;<pos:position pos:line="38" pos:column="40"/></operator><call><name><name pos:line="38" pos:column="37">header<pos:position pos:line="38" pos:column="43"/></name><operator pos:line="38" pos:column="43">.<pos:position pos:line="38" pos:column="44"/></operator><name pos:line="38" pos:column="44">getList<pos:position pos:line="38" pos:column="51"/></name></name><argument_list pos:line="38" pos:column="51">(<argument><expr><name><name pos:line="38" pos:column="52">Http<pos:position pos:line="38" pos:column="56"/></name><operator pos:line="38" pos:column="56">::<pos:position pos:line="38" pos:column="58"/></operator><name pos:line="38" pos:column="58">HdrType<pos:position pos:line="38" pos:column="65"/></name><operator pos:line="38" pos:column="65">::<pos:position pos:line="38" pos:column="67"/></operator><name pos:line="38" pos:column="67">VARY<pos:position pos:line="38" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="73"/></expr_stmt>

        <if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><call><name><name pos:line="40" pos:column="13">vary<pos:position pos:line="40" pos:column="17"/></name><operator pos:line="40" pos:column="17">.<pos:position pos:line="40" pos:column="18"/></operator><name pos:line="40" pos:column="18">size<pos:position pos:line="40" pos:column="22"/></name></name><argument_list pos:line="40" pos:column="22">()<pos:position pos:line="40" pos:column="24"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="25"/></condition><then pos:line="40" pos:column="25"> <block pos:line="40" pos:column="26">{
            <comment type="block" pos:line="41" pos:column="13">/* Again, we own this structure layout */</comment>
            <expr_stmt><expr><call><name><name pos:line="42" pos:column="13">rep<pos:position pos:line="42" pos:column="16"/></name><operator pos:line="42" pos:column="16">-&gt;<pos:position pos:line="42" pos:column="21"/></operator><name pos:line="42" pos:column="18">header<pos:position pos:line="42" pos:column="24"/></name><operator pos:line="42" pos:column="24">.<pos:position pos:line="42" pos:column="25"/></operator><name pos:line="42" pos:column="25">putStr<pos:position pos:line="42" pos:column="31"/></name></name><argument_list pos:line="42" pos:column="31">(<argument><expr><name><name pos:line="42" pos:column="32">Http<pos:position pos:line="42" pos:column="36"/></name><operator pos:line="42" pos:column="36">::<pos:position pos:line="42" pos:column="38"/></operator><name pos:line="42" pos:column="38">HdrType<pos:position pos:line="42" pos:column="45"/></name><operator pos:line="42" pos:column="45">::<pos:position pos:line="42" pos:column="47"/></operator><name pos:line="42" pos:column="47">VARY<pos:position pos:line="42" pos:column="51"/></name></name></expr></argument>, <argument><expr><call><name><name pos:line="42" pos:column="53">vary<pos:position pos:line="42" pos:column="57"/></name><operator pos:line="42" pos:column="57">.<pos:position pos:line="42" pos:column="58"/></operator><name pos:line="42" pos:column="58">termedBuf<pos:position pos:line="42" pos:column="67"/></name></name><argument_list pos:line="42" pos:column="67">()<pos:position pos:line="42" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="42" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="71"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="43" pos:column="13">vary<pos:position pos:line="43" pos:column="17"/></name><operator pos:line="43" pos:column="17">.<pos:position pos:line="43" pos:column="18"/></operator><name pos:line="43" pos:column="18">clean<pos:position pos:line="43" pos:column="23"/></name></name><argument_list pos:line="43" pos:column="23">()<pos:position pos:line="43" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="26"/></expr_stmt>
        }<pos:position pos:line="44" pos:column="10"/></block></then></if>

<cpp:if pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">if<pos:position pos:line="46" pos:column="4"/></cpp:directive> <expr><name pos:line="46" pos:column="5">X_ACCELERATOR_VARY<pos:position pos:line="46" pos:column="23"/></name></expr></cpp:if>
        <expr_stmt><expr><name pos:line="47" pos:column="9">vary<pos:position pos:line="47" pos:column="13"/></name> <operator pos:line="47" pos:column="14">=<pos:position pos:line="47" pos:column="15"/></operator> <call><name><name pos:line="47" pos:column="16">mem_obj<pos:position pos:line="47" pos:column="23"/></name><operator pos:line="47" pos:column="23">-&gt;<pos:position pos:line="47" pos:column="28"/></operator><name pos:line="47" pos:column="25">getReply<pos:position pos:line="47" pos:column="33"/></name></name><argument_list pos:line="47" pos:column="33">()<pos:position pos:line="47" pos:column="35"/></argument_list></call><operator pos:line="47" pos:column="35">-&gt;<pos:position pos:line="47" pos:column="40"/></operator><call><name><name pos:line="47" pos:column="37">header<pos:position pos:line="47" pos:column="43"/></name><operator pos:line="47" pos:column="43">.<pos:position pos:line="47" pos:column="44"/></operator><name pos:line="47" pos:column="44">getList<pos:position pos:line="47" pos:column="51"/></name></name><argument_list pos:line="47" pos:column="51">(<argument><expr><name><name pos:line="47" pos:column="52">Http<pos:position pos:line="47" pos:column="56"/></name><operator pos:line="47" pos:column="56">::<pos:position pos:line="47" pos:column="58"/></operator><name pos:line="47" pos:column="58">HdrType<pos:position pos:line="47" pos:column="65"/></name><operator pos:line="47" pos:column="65">::<pos:position pos:line="47" pos:column="67"/></operator><name pos:line="47" pos:column="67">HDR_X_ACCELERATOR_VARY<pos:position pos:line="47" pos:column="89"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="91"/></expr_stmt>

        <if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><call><name><name pos:line="49" pos:column="13">vary<pos:position pos:line="49" pos:column="17"/></name><operator pos:line="49" pos:column="17">.<pos:position pos:line="49" pos:column="18"/></operator><name pos:line="49" pos:column="18">size<pos:position pos:line="49" pos:column="22"/></name></name><argument_list pos:line="49" pos:column="22">()<pos:position pos:line="49" pos:column="24"/></argument_list></call> <operator pos:line="49" pos:column="25">&gt;<pos:position pos:line="49" pos:column="29"/></operator> <literal type="number" pos:line="49" pos:column="27">0<pos:position pos:line="49" pos:column="28"/></literal></expr>)<pos:position pos:line="49" pos:column="29"/></condition><then pos:line="49" pos:column="29"> <block pos:line="49" pos:column="30">{
            <comment type="block" pos:line="50" pos:column="13">/* Again, we own this structure layout */</comment>
            <expr_stmt><expr><call><name><name pos:line="51" pos:column="13">rep<pos:position pos:line="51" pos:column="16"/></name><operator pos:line="51" pos:column="16">-&gt;<pos:position pos:line="51" pos:column="21"/></operator><name pos:line="51" pos:column="18">header<pos:position pos:line="51" pos:column="24"/></name><operator pos:line="51" pos:column="24">.<pos:position pos:line="51" pos:column="25"/></operator><name pos:line="51" pos:column="25">putStr<pos:position pos:line="51" pos:column="31"/></name></name><argument_list pos:line="51" pos:column="31">(<argument><expr><name><name pos:line="51" pos:column="32">Http<pos:position pos:line="51" pos:column="36"/></name><operator pos:line="51" pos:column="36">::<pos:position pos:line="51" pos:column="38"/></operator><name pos:line="51" pos:column="38">HdrType<pos:position pos:line="51" pos:column="45"/></name><operator pos:line="51" pos:column="45">::<pos:position pos:line="51" pos:column="47"/></operator><name pos:line="51" pos:column="47">HDR_X_ACCELERATOR_VARY<pos:position pos:line="51" pos:column="69"/></name></name></expr></argument>, <argument><expr><call><name><name pos:line="51" pos:column="71">vary<pos:position pos:line="51" pos:column="75"/></name><operator pos:line="51" pos:column="75">.<pos:position pos:line="51" pos:column="76"/></operator><name pos:line="51" pos:column="76">termedBuf<pos:position pos:line="51" pos:column="85"/></name></name><argument_list pos:line="51" pos:column="85">()<pos:position pos:line="51" pos:column="87"/></argument_list></call></expr></argument>)<pos:position pos:line="51" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="89"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="52" pos:column="13">vary<pos:position pos:line="52" pos:column="17"/></name><operator pos:line="52" pos:column="17">.<pos:position pos:line="52" pos:column="18"/></operator><name pos:line="52" pos:column="18">clean<pos:position pos:line="52" pos:column="23"/></name></name><argument_list pos:line="52" pos:column="23">()<pos:position pos:line="52" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="26"/></expr_stmt>
        }<pos:position pos:line="53" pos:column="10"/></block></then></if>

<cpp:endif pos:line="55" pos:column="1">#<cpp:directive pos:line="55" pos:column="2">endif<pos:position pos:line="55" pos:column="7"/></cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name><name pos:line="56" pos:column="9">pe<pos:position pos:line="56" pos:column="11"/></name><operator pos:line="56" pos:column="11">-&gt;<pos:position pos:line="56" pos:column="16"/></operator><name pos:line="56" pos:column="13">replaceHttpReply<pos:position pos:line="56" pos:column="29"/></name></name><argument_list pos:line="56" pos:column="29">(<argument><expr><name pos:line="56" pos:column="30">rep<pos:position pos:line="56" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="56" pos:column="35">false<pos:position pos:line="56" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="42"/></expr_stmt> <comment type="line" pos:line="56" pos:column="43">// no write until key is public</comment>

        <expr_stmt><expr><call><name><name pos:line="58" pos:column="9">pe<pos:position pos:line="58" pos:column="11"/></name><operator pos:line="58" pos:column="11">-&gt;<pos:position pos:line="58" pos:column="16"/></operator><name pos:line="58" pos:column="13">timestampsSet<pos:position pos:line="58" pos:column="26"/></name></name><argument_list pos:line="58" pos:column="26">()<pos:position pos:line="58" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="29"/></expr_stmt>

        <expr_stmt><expr><call><name><name pos:line="60" pos:column="9">pe<pos:position pos:line="60" pos:column="11"/></name><operator pos:line="60" pos:column="11">-&gt;<pos:position pos:line="60" pos:column="16"/></operator><name pos:line="60" pos:column="13">makePublic<pos:position pos:line="60" pos:column="23"/></name></name><argument_list pos:line="60" pos:column="23">()<pos:position pos:line="60" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="26"/></expr_stmt>

        <expr_stmt><expr><call><name><name pos:line="62" pos:column="9">pe<pos:position pos:line="62" pos:column="11"/></name><operator pos:line="62" pos:column="11">-&gt;<pos:position pos:line="62" pos:column="16"/></operator><name pos:line="62" pos:column="13">startWriting<pos:position pos:line="62" pos:column="25"/></name></name><argument_list pos:line="62" pos:column="25">()<pos:position pos:line="62" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="28"/></expr_stmt> <comment type="line" pos:line="62" pos:column="29">// after makePublic()</comment>

        <expr_stmt><expr><call><name><name pos:line="64" pos:column="9">pe<pos:position pos:line="64" pos:column="11"/></name><operator pos:line="64" pos:column="11">-&gt;<pos:position pos:line="64" pos:column="16"/></operator><name pos:line="64" pos:column="13">complete<pos:position pos:line="64" pos:column="21"/></name></name><argument_list pos:line="64" pos:column="21">()<pos:position pos:line="64" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="24"/></expr_stmt>

        <expr_stmt><expr><call><name><name pos:line="66" pos:column="9">pe<pos:position pos:line="66" pos:column="11"/></name><operator pos:line="66" pos:column="11">-&gt;<pos:position pos:line="66" pos:column="16"/></operator><name pos:line="66" pos:column="13">unlock<pos:position pos:line="66" pos:column="19"/></name></name><argument_list pos:line="66" pos:column="19">(<argument><expr><literal type="string" pos:line="66" pos:column="20">"StoreEntry::forcePublicKey+Vary"<pos:position pos:line="66" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="55"/></expr_stmt>
    }<pos:position pos:line="67" pos:column="6"/></block></then></if>
}<pos:position pos:line="68" pos:column="2"/></block></function></unit>
