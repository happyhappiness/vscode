<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5274_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Fs<pos:position pos:line="2" pos:column="3"/></name><operator pos:line="2" pos:column="3">::<pos:position pos:line="2" pos:column="5"/></operator><name pos:line="2" pos:column="5">Ufs<pos:position pos:line="2" pos:column="8"/></name><operator pos:line="2" pos:column="8">::<pos:position pos:line="2" pos:column="10"/></operator><name pos:line="2" pos:column="10">UFSSwapDir<pos:position pos:line="2" pos:column="20"/></name><operator pos:line="2" pos:column="20">::<pos:position pos:line="2" pos:column="22"/></operator><name pos:line="2" pos:column="22">init<pos:position pos:line="2" pos:column="26"/></name></name><parameter_list pos:line="2" pos:column="26">()<pos:position pos:line="2" pos:column="28"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">47<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">3<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="19">HERE<pos:position pos:line="4" pos:column="23"/></name> <operator pos:line="4" pos:column="24">&lt;&lt;<pos:position pos:line="4" pos:column="32"/></operator> <literal type="string" pos:line="4" pos:column="27">"Initialising UFS SwapDir engine."<pos:position pos:line="4" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="63"/></expr_stmt>
    <comment type="block" pos:line="5" pos:column="5">/* Parsing must be finished by now - force to NULL, don't delete */</comment>
    <expr_stmt><expr><name pos:line="6" pos:column="5">currentIOOptions<pos:position pos:line="6" pos:column="21"/></name> <operator pos:line="6" pos:column="22">=<pos:position pos:line="6" pos:column="23"/></operator> <name pos:line="6" pos:column="24">NULL<pos:position pos:line="6" pos:column="28"/></name></expr>;<pos:position pos:line="6" pos:column="29"/></expr_stmt>
    <decl_stmt><decl><specifier pos:line="7" pos:column="5">static<pos:position pos:line="7" pos:column="11"/></specifier> <type><name pos:line="7" pos:column="12">int<pos:position pos:line="7" pos:column="15"/></name></type> <name pos:line="7" pos:column="16">started_clean_event<pos:position pos:line="7" pos:column="35"/></name> <init pos:line="7" pos:column="36">= <expr><literal type="number" pos:line="7" pos:column="38">0<pos:position pos:line="7" pos:column="39"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="40"/></decl_stmt>
    <decl_stmt><decl><specifier pos:line="8" pos:column="5">static<pos:position pos:line="8" pos:column="11"/></specifier> <type><specifier pos:line="8" pos:column="12">const<pos:position pos:line="8" pos:column="17"/></specifier> <name pos:line="8" pos:column="18">char<pos:position pos:line="8" pos:column="22"/></name> <modifier pos:line="8" pos:column="23">*<pos:position pos:line="8" pos:column="24"/></modifier></type><name pos:line="8" pos:column="24">errmsg<pos:position pos:line="8" pos:column="30"/></name> <init pos:line="8" pos:column="31">=
        <expr><literal type="string" pos:line="9" pos:column="9">"\tFailed to verify one of the swap directories, Check cache.log\n"<pos:position pos:line="9" pos:column="76"/></literal>
        <literal type="string" pos:line="10" pos:column="9">"\tfor details.  Run 'squid -z' to create swap directories\n"<pos:position pos:line="10" pos:column="70"/></literal>
        <literal type="string" pos:line="11" pos:column="9">"\tif needed, or if running Squid for the first time."<pos:position pos:line="11" pos:column="63"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="64"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="12" pos:column="5">IO<pos:position pos:line="12" pos:column="7"/></name><operator pos:line="12" pos:column="7">-&gt;<pos:position pos:line="12" pos:column="12"/></operator><name pos:line="12" pos:column="9">init<pos:position pos:line="12" pos:column="13"/></name></name><argument_list pos:line="12" pos:column="13">()<pos:position pos:line="12" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="16"/></expr_stmt>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><call><name pos:line="14" pos:column="9">verifyCacheDirs<pos:position pos:line="14" pos:column="24"/></name><argument_list pos:line="14" pos:column="24">()<pos:position pos:line="14" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="27"/></condition><then pos:line="14" pos:column="27">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="9">fatal<pos:position pos:line="15" pos:column="14"/></name><argument_list pos:line="15" pos:column="14">(<argument><expr><name pos:line="15" pos:column="15">errmsg<pos:position pos:line="15" pos:column="21"/></name></expr></argument>)<pos:position pos:line="15" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="23"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="17" pos:column="5">openLog<pos:position pos:line="17" pos:column="12"/></name><argument_list pos:line="17" pos:column="12">()<pos:position pos:line="17" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="15"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="19" pos:column="5">rebuild<pos:position pos:line="19" pos:column="12"/></name><argument_list pos:line="19" pos:column="12">()<pos:position pos:line="19" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="15"/></expr_stmt>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><operator pos:line="21" pos:column="9">!<pos:position pos:line="21" pos:column="10"/></operator><name pos:line="21" pos:column="10">started_clean_event<pos:position pos:line="21" pos:column="29"/></name></expr>)<pos:position pos:line="21" pos:column="30"/></condition><then pos:line="21" pos:column="30"> <block pos:line="21" pos:column="31">{
        <expr_stmt><expr><call><name pos:line="22" pos:column="9">eventAdd<pos:position pos:line="22" pos:column="17"/></name><argument_list pos:line="22" pos:column="17">(<argument><expr><literal type="string" pos:line="22" pos:column="18">"UFS storeDirClean"<pos:position pos:line="22" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="39">CleanEvent<pos:position pos:line="22" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="51">NULL<pos:position pos:line="22" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="57">15.0<pos:position pos:line="22" pos:column="61"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="63">1<pos:position pos:line="22" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="66"/></expr_stmt>
        <expr_stmt><expr><name pos:line="23" pos:column="9">started_clean_event<pos:position pos:line="23" pos:column="28"/></name> <operator pos:line="23" pos:column="29">=<pos:position pos:line="23" pos:column="30"/></operator> <literal type="number" pos:line="23" pos:column="31">1<pos:position pos:line="23" pos:column="32"/></literal></expr>;<pos:position pos:line="23" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>

    <expr_stmt><expr><operator pos:line="26" pos:column="5">(<pos:position pos:line="26" pos:column="6"/></operator><name pos:line="26" pos:column="6">void<pos:position pos:line="26" pos:column="10"/></name><operator pos:line="26" pos:column="10">)<pos:position pos:line="26" pos:column="11"/></operator> <call><name pos:line="26" pos:column="12">storeDirGetBlkSize<pos:position pos:line="26" pos:column="30"/></name><argument_list pos:line="26" pos:column="30">(<argument><expr><name pos:line="26" pos:column="31">path<pos:position pos:line="26" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="37">&amp;<pos:position pos:line="26" pos:column="42"/></operator><name><name pos:line="26" pos:column="38">fs<pos:position pos:line="26" pos:column="40"/></name><operator pos:line="26" pos:column="40">.<pos:position pos:line="26" pos:column="41"/></operator><name pos:line="26" pos:column="41">blksize<pos:position pos:line="26" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="50"/></expr_stmt>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
