<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_16_squid-3.1.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type>
<name pos:line="2" pos:column="1">read_post_request<pos:position pos:line="2" pos:column="18"/></name><parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><name pos:line="2" pos:column="19">void<pos:position pos:line="2" pos:column="23"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="24"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">s<pos:position pos:line="4" pos:column="12"/></name></decl>;<pos:position pos:line="4" pos:column="13"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">(<pos:position pos:line="6" pos:column="10"/></operator><name pos:line="6" pos:column="10">s<pos:position pos:line="6" pos:column="11"/></name> <operator pos:line="6" pos:column="12">=<pos:position pos:line="6" pos:column="13"/></operator> <call><name pos:line="6" pos:column="14">getenv<pos:position pos:line="6" pos:column="20"/></name><argument_list pos:line="6" pos:column="20">(<argument><expr><literal type="string" pos:line="6" pos:column="21">"REQUEST_METHOD"<pos:position pos:line="6" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="38"/></argument_list></call><operator pos:line="6" pos:column="38">)<pos:position pos:line="6" pos:column="39"/></operator> <operator pos:line="6" pos:column="40">==<pos:position pos:line="6" pos:column="42"/></operator> <name pos:line="6" pos:column="43">NULL<pos:position pos:line="6" pos:column="47"/></name></expr>)<pos:position pos:line="6" pos:column="48"/></condition><then pos:line="6" pos:column="48">
        <block type="pseudo"><return pos:line="7" pos:column="9">return <expr><name pos:line="7" pos:column="16">NULL<pos:position pos:line="7" pos:column="20"/></name></expr>;<pos:position pos:line="7" pos:column="21"/></return></block></then></if>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><literal type="number" pos:line="9" pos:column="9">0<pos:position pos:line="9" pos:column="10"/></literal> <operator pos:line="9" pos:column="11">!=<pos:position pos:line="9" pos:column="13"/></operator> <call><name pos:line="9" pos:column="14">strcasecmp<pos:position pos:line="9" pos:column="24"/></name><argument_list pos:line="9" pos:column="24">(<argument><expr><name pos:line="9" pos:column="25">s<pos:position pos:line="9" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="28">"POST"<pos:position pos:line="9" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="36"/></condition><then pos:line="9" pos:column="36">
        <block type="pseudo"><return pos:line="10" pos:column="9">return <expr><name pos:line="10" pos:column="16">NULL<pos:position pos:line="10" pos:column="20"/></name></expr>;<pos:position pos:line="10" pos:column="21"/></return></block></then></if>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><operator pos:line="12" pos:column="9">(<pos:position pos:line="12" pos:column="10"/></operator><name pos:line="12" pos:column="10">s<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">=<pos:position pos:line="12" pos:column="13"/></operator> <call><name pos:line="12" pos:column="14">getenv<pos:position pos:line="12" pos:column="20"/></name><argument_list pos:line="12" pos:column="20">(<argument><expr><literal type="string" pos:line="12" pos:column="21">"CONTENT_LENGTH"<pos:position pos:line="12" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="38"/></argument_list></call><operator pos:line="12" pos:column="38">)<pos:position pos:line="12" pos:column="39"/></operator> <operator pos:line="12" pos:column="40">==<pos:position pos:line="12" pos:column="42"/></operator> <name pos:line="12" pos:column="43">NULL<pos:position pos:line="12" pos:column="47"/></name></expr>)<pos:position pos:line="12" pos:column="48"/></condition><then pos:line="12" pos:column="48">
        <block type="pseudo"><return pos:line="13" pos:column="9">return <expr><name pos:line="13" pos:column="16">NULL<pos:position pos:line="13" pos:column="20"/></name></expr>;<pos:position pos:line="13" pos:column="21"/></return></block></then></if>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><operator pos:line="15" pos:column="9">*<pos:position pos:line="15" pos:column="10"/></operator><name pos:line="15" pos:column="10">s<pos:position pos:line="15" pos:column="11"/></name> <operator pos:line="15" pos:column="12">==<pos:position pos:line="15" pos:column="14"/></operator> <literal type="char" pos:line="15" pos:column="15">'-'<pos:position pos:line="15" pos:column="18"/></literal></expr>)<pos:position pos:line="15" pos:column="19"/></condition><then pos:line="15" pos:column="19"> <comment type="line" pos:line="15" pos:column="20">// negative length content huh?</comment>
        <block type="pseudo"><return pos:line="16" pos:column="9">return <expr><name pos:line="16" pos:column="16">NULL<pos:position pos:line="16" pos:column="20"/></name></expr>;<pos:position pos:line="16" pos:column="21"/></return></block></then></if>

    <decl_stmt><decl><type><name pos:line="18" pos:column="5">uint64_t<pos:position pos:line="18" pos:column="13"/></name></type> <name pos:line="18" pos:column="14">len<pos:position pos:line="18" pos:column="17"/></name></decl>;<pos:position pos:line="18" pos:column="18"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="20" pos:column="5">char<pos:position pos:line="20" pos:column="9"/></name> <modifier pos:line="20" pos:column="10">*<pos:position pos:line="20" pos:column="11"/></modifier></type><name pos:line="20" pos:column="11">endptr<pos:position pos:line="20" pos:column="17"/></name> <init pos:line="20" pos:column="18">= <expr><name pos:line="20" pos:column="20">s<pos:position pos:line="20" pos:column="21"/></name><operator pos:line="20" pos:column="21">+<pos:position pos:line="20" pos:column="22"/></operator> <call><name pos:line="20" pos:column="23">strlen<pos:position pos:line="20" pos:column="29"/></name><argument_list pos:line="20" pos:column="29">(<argument><expr><name pos:line="20" pos:column="30">s<pos:position pos:line="20" pos:column="31"/></name></expr></argument>)<pos:position pos:line="20" pos:column="32"/></argument_list></call></expr></init></decl>;<pos:position pos:line="20" pos:column="33"/></decl_stmt>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><operator pos:line="21" pos:column="9">(<pos:position pos:line="21" pos:column="10"/></operator><name pos:line="21" pos:column="10">len<pos:position pos:line="21" pos:column="13"/></name> <operator pos:line="21" pos:column="14">=<pos:position pos:line="21" pos:column="15"/></operator> <call><name pos:line="21" pos:column="16">strtoll<pos:position pos:line="21" pos:column="23"/></name><argument_list pos:line="21" pos:column="23">(<argument><expr><name pos:line="21" pos:column="24">s<pos:position pos:line="21" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="27">&amp;<pos:position pos:line="21" pos:column="32"/></operator><name pos:line="21" pos:column="28">endptr<pos:position pos:line="21" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="36">10<pos:position pos:line="21" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="39"/></argument_list></call><operator pos:line="21" pos:column="39">)<pos:position pos:line="21" pos:column="40"/></operator> <operator pos:line="21" pos:column="41">&lt;=<pos:position pos:line="21" pos:column="46"/></operator> <literal type="number" pos:line="21" pos:column="44">0<pos:position pos:line="21" pos:column="45"/></literal></expr>)<pos:position pos:line="21" pos:column="46"/></condition><then pos:line="21" pos:column="46">
        <block type="pseudo"><return pos:line="22" pos:column="9">return <expr><name pos:line="22" pos:column="16">NULL<pos:position pos:line="22" pos:column="20"/></name></expr>;<pos:position pos:line="22" pos:column="21"/></return></block></then></if>

    <comment type="line" pos:line="24" pos:column="5">// limit the input to something reasonable.</comment>
    <comment type="line" pos:line="25" pos:column="5">// 4KB should be enough for the GET/POST data length, but may be extended.</comment>
    <decl_stmt><decl><type><name pos:line="26" pos:column="5">size_t<pos:position pos:line="26" pos:column="11"/></name></type> <name pos:line="26" pos:column="12">bufLen<pos:position pos:line="26" pos:column="18"/></name> <init pos:line="26" pos:column="19">= <expr><operator pos:line="26" pos:column="21">(<pos:position pos:line="26" pos:column="22"/></operator><ternary><condition><expr><name pos:line="26" pos:column="22">len<pos:position pos:line="26" pos:column="25"/></name> <operator pos:line="26" pos:column="26">&lt;<pos:position pos:line="26" pos:column="30"/></operator> <literal type="number" pos:line="26" pos:column="28">4096<pos:position pos:line="26" pos:column="32"/></literal></expr> ?<pos:position pos:line="26" pos:column="34"/></condition><then pos:line="26" pos:column="34"> <expr><name pos:line="26" pos:column="35">len<pos:position pos:line="26" pos:column="38"/></name></expr> <pos:position pos:line="26" pos:column="39"/></then><else pos:line="26" pos:column="39">: <expr><literal type="number" pos:line="26" pos:column="41">4095<pos:position pos:line="26" pos:column="45"/></literal></expr></else></ternary><operator pos:line="26" pos:column="45">)<pos:position pos:line="26" pos:column="46"/></operator></expr></init></decl>;<pos:position pos:line="26" pos:column="47"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="27" pos:column="5">char<pos:position pos:line="27" pos:column="9"/></name> <modifier pos:line="27" pos:column="10">*<pos:position pos:line="27" pos:column="11"/></modifier></type><name pos:line="27" pos:column="11">buf<pos:position pos:line="27" pos:column="14"/></name> <init pos:line="27" pos:column="15">= <expr><operator pos:line="27" pos:column="17">(<pos:position pos:line="27" pos:column="18"/></operator><name pos:line="27" pos:column="18">char<pos:position pos:line="27" pos:column="22"/></name> <operator pos:line="27" pos:column="23">*<pos:position pos:line="27" pos:column="24"/></operator><operator pos:line="27" pos:column="24">)<pos:position pos:line="27" pos:column="25"/></operator><call><name pos:line="27" pos:column="25">xmalloc<pos:position pos:line="27" pos:column="32"/></name><argument_list pos:line="27" pos:column="32">(<argument><expr><name pos:line="27" pos:column="33">bufLen<pos:position pos:line="27" pos:column="39"/></name> <operator pos:line="27" pos:column="40">+<pos:position pos:line="27" pos:column="41"/></operator> <literal type="number" pos:line="27" pos:column="42">1<pos:position pos:line="27" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="27" pos:column="45"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="29" pos:column="5">size_t<pos:position pos:line="29" pos:column="11"/></name></type> <name pos:line="29" pos:column="12">readLen<pos:position pos:line="29" pos:column="19"/></name> <init pos:line="29" pos:column="20">= <expr><call><name pos:line="29" pos:column="22">fread<pos:position pos:line="29" pos:column="27"/></name><argument_list pos:line="29" pos:column="27">(<argument><expr><name pos:line="29" pos:column="28">buf<pos:position pos:line="29" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="33">1<pos:position pos:line="29" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="36">bufLen<pos:position pos:line="29" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="44">stdin<pos:position pos:line="29" pos:column="49"/></name></expr></argument>)<pos:position pos:line="29" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="29" pos:column="51"/></decl_stmt>
    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><name pos:line="30" pos:column="9">readLen<pos:position pos:line="30" pos:column="16"/></name> <operator pos:line="30" pos:column="17">==<pos:position pos:line="30" pos:column="19"/></operator> <literal type="number" pos:line="30" pos:column="20">0<pos:position pos:line="30" pos:column="21"/></literal></expr>)<pos:position pos:line="30" pos:column="22"/></condition><then pos:line="30" pos:column="22"> <block pos:line="30" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="31" pos:column="9">xfree<pos:position pos:line="31" pos:column="14"/></name><argument_list pos:line="31" pos:column="14">(<argument><expr><name pos:line="31" pos:column="15">buf<pos:position pos:line="31" pos:column="18"/></name></expr></argument>)<pos:position pos:line="31" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="20"/></expr_stmt>
        <return pos:line="32" pos:column="9">return <expr><name pos:line="32" pos:column="16">NULL<pos:position pos:line="32" pos:column="20"/></name></expr>;<pos:position pos:line="32" pos:column="21"/></return>
    }<pos:position pos:line="33" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="34" pos:column="5">buf<pos:position pos:line="34" pos:column="8"/></name><index pos:line="34" pos:column="8">[<expr><name pos:line="34" pos:column="9">readLen<pos:position pos:line="34" pos:column="16"/></name></expr>]<pos:position pos:line="34" pos:column="17"/></index></name> <operator pos:line="34" pos:column="18">=<pos:position pos:line="34" pos:column="19"/></operator> <literal type="char" pos:line="34" pos:column="20">'\0'<pos:position pos:line="34" pos:column="24"/></literal></expr>;<pos:position pos:line="34" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name pos:line="35" pos:column="5">len<pos:position pos:line="35" pos:column="8"/></name> <operator pos:line="35" pos:column="9">-=<pos:position pos:line="35" pos:column="11"/></operator> <name pos:line="35" pos:column="12">readLen<pos:position pos:line="35" pos:column="19"/></name></expr>;<pos:position pos:line="35" pos:column="20"/></expr_stmt>

    <comment type="line" pos:line="37" pos:column="5">// purge the remainder of the request entity</comment>
    <while pos:line="38" pos:column="5">while <condition pos:line="38" pos:column="11">(<expr><name pos:line="38" pos:column="12">len<pos:position pos:line="38" pos:column="15"/></name> <operator pos:line="38" pos:column="16">&gt;<pos:position pos:line="38" pos:column="20"/></operator> <literal type="number" pos:line="38" pos:column="18">0<pos:position pos:line="38" pos:column="19"/></literal> <operator pos:line="38" pos:column="20">&amp;&amp;<pos:position pos:line="38" pos:column="30"/></operator> <name pos:line="38" pos:column="23">readLen<pos:position pos:line="38" pos:column="30"/></name></expr>)<pos:position pos:line="38" pos:column="31"/></condition> <block pos:line="38" pos:column="32">{
        <decl_stmt><decl><type><name pos:line="39" pos:column="9">char<pos:position pos:line="39" pos:column="13"/></name></type> <name><name pos:line="39" pos:column="14">temp<pos:position pos:line="39" pos:column="18"/></name><index pos:line="39" pos:column="18">[<expr><literal type="number" pos:line="39" pos:column="19">65535<pos:position pos:line="39" pos:column="24"/></literal></expr>]<pos:position pos:line="39" pos:column="25"/></index></name></decl>;<pos:position pos:line="39" pos:column="26"/></decl_stmt>
        <expr_stmt><expr><name pos:line="40" pos:column="9">readLen<pos:position pos:line="40" pos:column="16"/></name> <operator pos:line="40" pos:column="17">=<pos:position pos:line="40" pos:column="18"/></operator> <call><name pos:line="40" pos:column="19">fread<pos:position pos:line="40" pos:column="24"/></name><argument_list pos:line="40" pos:column="24">(<argument><expr><name pos:line="40" pos:column="25">temp<pos:position pos:line="40" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="31">1<pos:position pos:line="40" pos:column="32"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="34">65535<pos:position pos:line="40" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="41">stdin<pos:position pos:line="40" pos:column="46"/></name></expr></argument>)<pos:position pos:line="40" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="48"/></expr_stmt>
        <expr_stmt><expr><name pos:line="41" pos:column="9">len<pos:position pos:line="41" pos:column="12"/></name> <operator pos:line="41" pos:column="13">-=<pos:position pos:line="41" pos:column="15"/></operator> <name pos:line="41" pos:column="16">readLen<pos:position pos:line="41" pos:column="23"/></name></expr>;<pos:position pos:line="41" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="42" pos:column="6"/></block></while>

    <return pos:line="44" pos:column="5">return <expr><name pos:line="44" pos:column="12">buf<pos:position pos:line="44" pos:column="15"/></name></expr>;<pos:position pos:line="44" pos:column="16"/></return>
}<pos:position pos:line="45" pos:column="2"/></block></function></unit>
