<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5553_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">comm_read_cancel<pos:position pos:line="2" pos:column="17"/></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><name pos:line="2" pos:column="18">int<pos:position pos:line="2" pos:column="21"/></name></type> <name pos:line="2" pos:column="22">fd<pos:position pos:line="2" pos:column="24"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="26">IOCB<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type><name pos:line="2" pos:column="32">callback<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="42">void<pos:position pos:line="2" pos:column="46"/></name> <modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier></type><name pos:line="2" pos:column="48">data<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="53"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">!<pos:position pos:line="4" pos:column="10"/></operator><call><name pos:line="4" pos:column="10">isOpen<pos:position pos:line="4" pos:column="16"/></name><argument_list pos:line="4" pos:column="16">(<argument><expr><name pos:line="4" pos:column="17">fd<pos:position pos:line="4" pos:column="19"/></name></expr></argument>)<pos:position pos:line="4" pos:column="20"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="21"/></condition><then pos:line="4" pos:column="21"> <block pos:line="4" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="5" pos:column="9">debugs<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">(<argument><expr><literal type="number" pos:line="5" pos:column="16">5<pos:position pos:line="5" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="19">4<pos:position pos:line="5" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="22">"fails: FD "<pos:position pos:line="5" pos:column="34"/></literal> <operator pos:line="5" pos:column="35">&lt;&lt;<pos:position pos:line="5" pos:column="43"/></operator> <name pos:line="5" pos:column="38">fd<pos:position pos:line="5" pos:column="40"/></name> <operator pos:line="5" pos:column="41">&lt;&lt;<pos:position pos:line="5" pos:column="49"/></operator> <literal type="string" pos:line="5" pos:column="44">" closed"<pos:position pos:line="5" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="55"/></expr_stmt>
        <return pos:line="6" pos:column="9">return;<pos:position pos:line="6" pos:column="16"/></return>
    }<pos:position pos:line="7" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name><name pos:line="9" pos:column="5">Comm<pos:position pos:line="9" pos:column="9"/></name><operator pos:line="9" pos:column="9">::<pos:position pos:line="9" pos:column="11"/></operator><name pos:line="9" pos:column="11">IoCallback<pos:position pos:line="9" pos:column="21"/></name></name> <modifier pos:line="9" pos:column="22">*<pos:position pos:line="9" pos:column="23"/></modifier></type><name pos:line="9" pos:column="23">cb<pos:position pos:line="9" pos:column="25"/></name> <init pos:line="9" pos:column="26">= <expr><call><name pos:line="9" pos:column="28">COMMIO_FD_READCB<pos:position pos:line="9" pos:column="44"/></name><argument_list pos:line="9" pos:column="44">(<argument><expr><name pos:line="9" pos:column="45">fd<pos:position pos:line="9" pos:column="47"/></name></expr></argument>)<pos:position pos:line="9" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="49"/></decl_stmt>
    <comment type="line" pos:line="10" pos:column="5">// TODO: is "active" == "monitors FD"?</comment>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">!<pos:position pos:line="11" pos:column="10"/></operator><call><name><name pos:line="11" pos:column="10">cb<pos:position pos:line="11" pos:column="12"/></name><operator pos:line="11" pos:column="12">-&gt;<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="14">active<pos:position pos:line="11" pos:column="20"/></name></name><argument_list pos:line="11" pos:column="20">()<pos:position pos:line="11" pos:column="22"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="23"/></condition><then pos:line="11" pos:column="23"> <block pos:line="11" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">debugs<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><literal type="number" pos:line="12" pos:column="16">5<pos:position pos:line="12" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="19">4<pos:position pos:line="12" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="22">"fails: FD "<pos:position pos:line="12" pos:column="34"/></literal> <operator pos:line="12" pos:column="35">&lt;&lt;<pos:position pos:line="12" pos:column="43"/></operator> <name pos:line="12" pos:column="38">fd<pos:position pos:line="12" pos:column="40"/></name> <operator pos:line="12" pos:column="41">&lt;&lt;<pos:position pos:line="12" pos:column="49"/></operator> <literal type="string" pos:line="12" pos:column="44">" inactive"<pos:position pos:line="12" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="57"/></expr_stmt>
        <return pos:line="13" pos:column="9">return;<pos:position pos:line="13" pos:column="16"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <typedef pos:line="16" pos:column="5">typedef <type><name><name pos:line="16" pos:column="13">CommCbFunPtrCallT<pos:position pos:line="16" pos:column="30"/></name><argument_list type="generic" pos:line="16" pos:column="30">&lt;<argument><expr><name pos:line="16" pos:column="31">CommIoCbPtrFun<pos:position pos:line="16" pos:column="45"/></name></expr></argument>&gt;<pos:position pos:line="16" pos:column="49"/></argument_list></name></type> <name pos:line="16" pos:column="47">Call<pos:position pos:line="16" pos:column="51"/></name>;<pos:position pos:line="16" pos:column="52"/></typedef>
    <decl_stmt><decl><type><name pos:line="17" pos:column="5">Call<pos:position pos:line="17" pos:column="9"/></name> <modifier pos:line="17" pos:column="10">*<pos:position pos:line="17" pos:column="11"/></modifier></type><name pos:line="17" pos:column="11">call<pos:position pos:line="17" pos:column="15"/></name> <init pos:line="17" pos:column="16">= <expr><cast type="dynamic" pos:line="17" pos:column="18">dynamic_cast<argument_list type="generic" pos:line="17" pos:column="30">&lt;<argument><expr><name pos:line="17" pos:column="31">Call<pos:position pos:line="17" pos:column="35"/></name><operator pos:line="17" pos:column="35">*<pos:position pos:line="17" pos:column="36"/></operator></expr></argument>&gt;<pos:position pos:line="17" pos:column="40"/></argument_list><argument_list pos:line="17" pos:column="37">(<argument><expr><call><name><name pos:line="17" pos:column="38">cb<pos:position pos:line="17" pos:column="40"/></name><operator pos:line="17" pos:column="40">-&gt;<pos:position pos:line="17" pos:column="45"/></operator><name pos:line="17" pos:column="42">callback<pos:position pos:line="17" pos:column="50"/></name><operator pos:line="17" pos:column="50">.<pos:position pos:line="17" pos:column="51"/></operator><name pos:line="17" pos:column="51">getRaw<pos:position pos:line="17" pos:column="57"/></name></name><argument_list pos:line="17" pos:column="57">()<pos:position pos:line="17" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="60"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="17" pos:column="61"/></decl_stmt>
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><operator pos:line="18" pos:column="9">!<pos:position pos:line="18" pos:column="10"/></operator><name pos:line="18" pos:column="10">call<pos:position pos:line="18" pos:column="14"/></name></expr>)<pos:position pos:line="18" pos:column="15"/></condition><then pos:line="18" pos:column="15"> <block pos:line="18" pos:column="16">{
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">debugs<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><literal type="number" pos:line="19" pos:column="16">5<pos:position pos:line="19" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="19">4<pos:position pos:line="19" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="22">"fails: FD "<pos:position pos:line="19" pos:column="34"/></literal> <operator pos:line="19" pos:column="35">&lt;&lt;<pos:position pos:line="19" pos:column="43"/></operator> <name pos:line="19" pos:column="38">fd<pos:position pos:line="19" pos:column="40"/></name> <operator pos:line="19" pos:column="41">&lt;&lt;<pos:position pos:line="19" pos:column="49"/></operator> <literal type="string" pos:line="19" pos:column="44">" lacks callback"<pos:position pos:line="19" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="63"/></expr_stmt>
        <return pos:line="20" pos:column="9">return;<pos:position pos:line="20" pos:column="16"/></return>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="23" pos:column="5">call<pos:position pos:line="23" pos:column="9"/></name><operator pos:line="23" pos:column="9">-&gt;<pos:position pos:line="23" pos:column="14"/></operator><name pos:line="23" pos:column="11">cancel<pos:position pos:line="23" pos:column="17"/></name></name><argument_list pos:line="23" pos:column="17">(<argument><expr><literal type="string" pos:line="23" pos:column="18">"old comm_read_cancel"<pos:position pos:line="23" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="42"/></expr_stmt>

    <typedef pos:line="25" pos:column="5">typedef <type><name pos:line="25" pos:column="13">CommIoCbParams<pos:position pos:line="25" pos:column="27"/></name></type> <name pos:line="25" pos:column="28">Params<pos:position pos:line="25" pos:column="34"/></name>;<pos:position pos:line="25" pos:column="35"/></typedef>
    <decl_stmt><decl><type><specifier pos:line="26" pos:column="5">const<pos:position pos:line="26" pos:column="10"/></specifier> <name pos:line="26" pos:column="11">Params<pos:position pos:line="26" pos:column="17"/></name> <modifier pos:line="26" pos:column="18">&amp;<pos:position pos:line="26" pos:column="23"/></modifier></type><name pos:line="26" pos:column="19">params<pos:position pos:line="26" pos:column="25"/></name> <init pos:line="26" pos:column="26">= <expr><call><name><name pos:line="26" pos:column="28">GetCommParams<pos:position pos:line="26" pos:column="41"/></name><argument_list type="generic" pos:line="26" pos:column="41">&lt;<argument><expr><name pos:line="26" pos:column="42">Params<pos:position pos:line="26" pos:column="48"/></name></expr></argument>&gt;<pos:position pos:line="26" pos:column="52"/></argument_list></name><argument_list pos:line="26" pos:column="49">(<argument><expr><name><name pos:line="26" pos:column="50">cb<pos:position pos:line="26" pos:column="52"/></name><operator pos:line="26" pos:column="52">-&gt;<pos:position pos:line="26" pos:column="57"/></operator><name pos:line="26" pos:column="54">callback<pos:position pos:line="26" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="26" pos:column="64"/></decl_stmt>

    <comment type="block" pos:line="28" pos:column="5">/* Ok, we can be reasonably sure we won't lose any data here! */</comment>
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">assert<pos:position pos:line="29" pos:column="11"/></name><argument_list pos:line="29" pos:column="11">(<argument><expr><name><name pos:line="29" pos:column="12">call<pos:position pos:line="29" pos:column="16"/></name><operator pos:line="29" pos:column="16">-&gt;<pos:position pos:line="29" pos:column="21"/></operator><name pos:line="29" pos:column="18">dialer<pos:position pos:line="29" pos:column="24"/></name><operator pos:line="29" pos:column="24">.<pos:position pos:line="29" pos:column="25"/></operator><name pos:line="29" pos:column="25">handler<pos:position pos:line="29" pos:column="32"/></name></name> <operator pos:line="29" pos:column="33">==<pos:position pos:line="29" pos:column="35"/></operator> <name pos:line="29" pos:column="36">callback<pos:position pos:line="29" pos:column="44"/></name></expr></argument>)<pos:position pos:line="29" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">assert<pos:position pos:line="30" pos:column="11"/></name><argument_list pos:line="30" pos:column="11">(<argument><expr><name><name pos:line="30" pos:column="12">params<pos:position pos:line="30" pos:column="18"/></name><operator pos:line="30" pos:column="18">.<pos:position pos:line="30" pos:column="19"/></operator><name pos:line="30" pos:column="19">data<pos:position pos:line="30" pos:column="23"/></name></name> <operator pos:line="30" pos:column="24">==<pos:position pos:line="30" pos:column="26"/></operator> <name pos:line="30" pos:column="27">data<pos:position pos:line="30" pos:column="31"/></name></expr></argument>)<pos:position pos:line="30" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="33"/></expr_stmt>

    <comment type="block" pos:line="32" pos:column="5">/* Delete the callback */</comment>
    <expr_stmt><expr><call><name><name pos:line="33" pos:column="5">cb<pos:position pos:line="33" pos:column="7"/></name><operator pos:line="33" pos:column="7">-&gt;<pos:position pos:line="33" pos:column="12"/></operator><name pos:line="33" pos:column="9">cancel<pos:position pos:line="33" pos:column="15"/></name></name><argument_list pos:line="33" pos:column="15">(<argument><expr><literal type="string" pos:line="33" pos:column="16">"old comm_read_cancel"<pos:position pos:line="33" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="40"/></expr_stmt>

    <comment type="block" pos:line="35" pos:column="5">/* And the IO event */</comment>
    <expr_stmt><expr><call><name><name pos:line="36" pos:column="5">Comm<pos:position pos:line="36" pos:column="9"/></name><operator pos:line="36" pos:column="9">::<pos:position pos:line="36" pos:column="11"/></operator><name pos:line="36" pos:column="11">SetSelect<pos:position pos:line="36" pos:column="20"/></name></name><argument_list pos:line="36" pos:column="20">(<argument><expr><name pos:line="36" pos:column="21">fd<pos:position pos:line="36" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="25">COMM_SELECT_READ<pos:position pos:line="36" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="43">NULL<pos:position pos:line="36" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="49">NULL<pos:position pos:line="36" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="55">0<pos:position pos:line="36" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="58"/></expr_stmt>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
