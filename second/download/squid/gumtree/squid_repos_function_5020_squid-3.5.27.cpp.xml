<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5020_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ftp<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">Server<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">writeForwardedReply<pos:position pos:line="2" pos:column="33"/></name></name><parameter_list pos:line="2" pos:column="33">(<parameter><decl><type><specifier pos:line="2" pos:column="34">const<pos:position pos:line="2" pos:column="39"/></specifier> <name pos:line="2" pos:column="40">HttpReply<pos:position pos:line="2" pos:column="49"/></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="51">reply<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="57"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">Must<pos:position pos:line="4" pos:column="9"/></name><argument_list pos:line="4" pos:column="9">(<argument><expr><name pos:line="4" pos:column="10">reply<pos:position pos:line="4" pos:column="15"/></name></expr></argument>)<pos:position pos:line="4" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="17"/></expr_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">waitingForOrigin<pos:position pos:line="6" pos:column="25"/></name></expr>)<pos:position pos:line="6" pos:column="26"/></condition><then pos:line="6" pos:column="26"> <block pos:line="6" pos:column="27">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">Must<pos:position pos:line="7" pos:column="13"/></name><argument_list pos:line="7" pos:column="13">(<argument><expr><name pos:line="7" pos:column="14">delayedReply<pos:position pos:line="7" pos:column="26"/></name> <operator pos:line="7" pos:column="27">==<pos:position pos:line="7" pos:column="29"/></operator> <name pos:line="7" pos:column="30">NULL<pos:position pos:line="7" pos:column="34"/></name></expr></argument>)<pos:position pos:line="7" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><name pos:line="8" pos:column="9">delayedReply<pos:position pos:line="8" pos:column="21"/></name> <operator pos:line="8" pos:column="22">=<pos:position pos:line="8" pos:column="23"/></operator> <name pos:line="8" pos:column="24">reply<pos:position pos:line="8" pos:column="29"/></name></expr>;<pos:position pos:line="8" pos:column="30"/></expr_stmt>
        <return pos:line="9" pos:column="9">return;<pos:position pos:line="9" pos:column="16"/></return>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><specifier pos:line="12" pos:column="5">const<pos:position pos:line="12" pos:column="10"/></specifier> <name pos:line="12" pos:column="11">HttpHeader<pos:position pos:line="12" pos:column="21"/></name> <modifier pos:line="12" pos:column="22">&amp;<pos:position pos:line="12" pos:column="27"/></modifier></type><name pos:line="12" pos:column="23">header<pos:position pos:line="12" pos:column="29"/></name> <init pos:line="12" pos:column="30">= <expr><name><name pos:line="12" pos:column="32">reply<pos:position pos:line="12" pos:column="37"/></name><operator pos:line="12" pos:column="37">-&gt;<pos:position pos:line="12" pos:column="42"/></operator><name pos:line="12" pos:column="39">header<pos:position pos:line="12" pos:column="45"/></name></name></expr></init></decl>;<pos:position pos:line="12" pos:column="46"/></decl_stmt>
    <comment type="line" pos:line="13" pos:column="5">// adaptation and forwarding errors lack HDR_FTP_STATUS</comment>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><operator pos:line="14" pos:column="9">!<pos:position pos:line="14" pos:column="10"/></operator><call><name><name pos:line="14" pos:column="10">header<pos:position pos:line="14" pos:column="16"/></name><operator pos:line="14" pos:column="16">.<pos:position pos:line="14" pos:column="17"/></operator><name pos:line="14" pos:column="17">has<pos:position pos:line="14" pos:column="20"/></name></name><argument_list pos:line="14" pos:column="20">(<argument><expr><name pos:line="14" pos:column="21">HDR_FTP_STATUS<pos:position pos:line="14" pos:column="35"/></name></expr></argument>)<pos:position pos:line="14" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="37"/></condition><then pos:line="14" pos:column="37"> <block pos:line="14" pos:column="38">{
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">writeForwardedForeign<pos:position pos:line="15" pos:column="30"/></name><argument_list pos:line="15" pos:column="30">(<argument><expr><name pos:line="15" pos:column="31">reply<pos:position pos:line="15" pos:column="36"/></name></expr></argument>)<pos:position pos:line="15" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="38"/></expr_stmt> <comment type="line" pos:line="15" pos:column="39">// will get to Ftp::Server::wroteReply</comment>
        <return pos:line="16" pos:column="9">return;<pos:position pos:line="16" pos:column="16"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>

    <typedef pos:line="19" pos:column="5">typedef <type><name><name pos:line="19" pos:column="13">CommCbMemFunT<pos:position pos:line="19" pos:column="26"/></name><argument_list type="generic" pos:line="19" pos:column="26">&lt;<argument><expr><name pos:line="19" pos:column="27">Server<pos:position pos:line="19" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="35">CommIoCbParams<pos:position pos:line="19" pos:column="49"/></name></expr></argument>&gt;<pos:position pos:line="19" pos:column="53"/></argument_list></name></type> <name pos:line="19" pos:column="51">Dialer<pos:position pos:line="19" pos:column="57"/></name>;<pos:position pos:line="19" pos:column="58"/></typedef>
    <decl_stmt><decl><type><name><name pos:line="20" pos:column="5">AsyncCall<pos:position pos:line="20" pos:column="14"/></name><operator pos:line="20" pos:column="14">::<pos:position pos:line="20" pos:column="16"/></operator><name pos:line="20" pos:column="16">Pointer<pos:position pos:line="20" pos:column="23"/></name></name></type> <name pos:line="20" pos:column="24">call<pos:position pos:line="20" pos:column="28"/></name> <init pos:line="20" pos:column="29">= <expr><call><name pos:line="20" pos:column="31">JobCallback<pos:position pos:line="20" pos:column="42"/></name><argument_list pos:line="20" pos:column="42">(<argument><expr><literal type="number" pos:line="20" pos:column="43">33<pos:position pos:line="20" pos:column="45"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="47">5<pos:position pos:line="20" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="50">Dialer<pos:position pos:line="20" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="58">this<pos:position pos:line="20" pos:column="62"/></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="64">Ftp<pos:position pos:line="20" pos:column="67"/></name><operator pos:line="20" pos:column="67">::<pos:position pos:line="20" pos:column="69"/></operator><name pos:line="20" pos:column="69">Server<pos:position pos:line="20" pos:column="75"/></name><operator pos:line="20" pos:column="75">::<pos:position pos:line="20" pos:column="77"/></operator><name pos:line="20" pos:column="77">wroteReply<pos:position pos:line="20" pos:column="87"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="88"/></argument_list></call></expr></init></decl>;<pos:position pos:line="20" pos:column="89"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">writeForwardedReplyAndCall<pos:position pos:line="21" pos:column="31"/></name><argument_list pos:line="21" pos:column="31">(<argument><expr><name pos:line="21" pos:column="32">reply<pos:position pos:line="21" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="39">call<pos:position pos:line="21" pos:column="43"/></name></expr></argument>)<pos:position pos:line="21" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="45"/></expr_stmt>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
