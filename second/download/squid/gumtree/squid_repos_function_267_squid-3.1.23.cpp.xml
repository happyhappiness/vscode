<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_267_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">RFCNB_Send<pos:position pos:line="2" pos:column="11"/></name><parameter_list pos:line="2" pos:column="11">(<parameter><decl><type><name><name pos:line="2" pos:column="12">struct<pos:position pos:line="2" pos:column="18"/></name> <name pos:line="2" pos:column="19">RFCNB_Con<pos:position pos:line="2" pos:column="28"/></name></name> <modifier pos:line="2" pos:column="29">*<pos:position pos:line="2" pos:column="30"/></modifier></type><name pos:line="2" pos:column="30">Con_Handle<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="42">struct<pos:position pos:line="2" pos:column="48"/></name> <name pos:line="2" pos:column="49">RFCNB_Pkt<pos:position pos:line="2" pos:column="58"/></name></name> <modifier pos:line="2" pos:column="59">*<pos:position pos:line="2" pos:column="60"/></modifier></type><name pos:line="2" pos:column="60">udata<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="67">int<pos:position pos:line="2" pos:column="70"/></name></type> <name pos:line="2" pos:column="71">Length<pos:position pos:line="2" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="78"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">struct<pos:position pos:line="4" pos:column="11"/></name> <name pos:line="4" pos:column="12">RFCNB_Pkt<pos:position pos:line="4" pos:column="21"/></name></name> <modifier pos:line="4" pos:column="22">*<pos:position pos:line="4" pos:column="23"/></modifier></type><name pos:line="4" pos:column="23">pkt<pos:position pos:line="4" pos:column="26"/></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">hdr<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">len<pos:position pos:line="6" pos:column="12"/></name></decl>;<pos:position pos:line="6" pos:column="13"/></decl_stmt>

    <comment type="block" pos:line="8" pos:column="5">/* Plug in the header and send the data */</comment>

    <expr_stmt><expr><name pos:line="10" pos:column="5">pkt<pos:position pos:line="10" pos:column="8"/></name> <operator pos:line="10" pos:column="9">=<pos:position pos:line="10" pos:column="10"/></operator> <call><name pos:line="10" pos:column="11">RFCNB_Alloc_Pkt<pos:position pos:line="10" pos:column="26"/></name><argument_list pos:line="10" pos:column="26">(<argument><expr><name pos:line="10" pos:column="27">RFCNB_Pkt_Hdr_Len<pos:position pos:line="10" pos:column="44"/></name></expr></argument>)<pos:position pos:line="10" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="46"/></expr_stmt>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">pkt<pos:position pos:line="12" pos:column="12"/></name> <operator pos:line="12" pos:column="13">==<pos:position pos:line="12" pos:column="15"/></operator> <name pos:line="12" pos:column="16">NULL<pos:position pos:line="12" pos:column="20"/></name></expr>)<pos:position pos:line="12" pos:column="21"/></condition><then pos:line="12" pos:column="21"> <block pos:line="12" pos:column="22">{

        <expr_stmt><expr><name pos:line="14" pos:column="9">RFCNB_errno<pos:position pos:line="14" pos:column="20"/></name> <operator pos:line="14" pos:column="21">=<pos:position pos:line="14" pos:column="22"/></operator> <name pos:line="14" pos:column="23">RFCNBE_NoSpace<pos:position pos:line="14" pos:column="37"/></name></expr>;<pos:position pos:line="14" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><name pos:line="15" pos:column="9">RFCNB_saved_errno<pos:position pos:line="15" pos:column="26"/></name> <operator pos:line="15" pos:column="27">=<pos:position pos:line="15" pos:column="28"/></operator> <name pos:line="15" pos:column="29">errno<pos:position pos:line="15" pos:column="34"/></name></expr>;<pos:position pos:line="15" pos:column="35"/></expr_stmt>
        <return pos:line="16" pos:column="9">return <expr><operator pos:line="16" pos:column="16">(<pos:position pos:line="16" pos:column="17"/></operator><name pos:line="16" pos:column="17">RFCNBE_Bad<pos:position pos:line="16" pos:column="27"/></name><operator pos:line="16" pos:column="27">)<pos:position pos:line="16" pos:column="28"/></operator></expr>;<pos:position pos:line="16" pos:column="29"/></return>

    }<pos:position pos:line="18" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="19" pos:column="5">pkt<pos:position pos:line="19" pos:column="8"/></name><operator pos:line="19" pos:column="8">-&gt;<pos:position pos:line="19" pos:column="13"/></operator><name pos:line="19" pos:column="10">next<pos:position pos:line="19" pos:column="14"/></name></name> <operator pos:line="19" pos:column="15">=<pos:position pos:line="19" pos:column="16"/></operator> <name pos:line="19" pos:column="17">udata<pos:position pos:line="19" pos:column="22"/></name></expr>;<pos:position pos:line="19" pos:column="23"/></expr_stmt>		<comment type="block" pos:line="19" pos:column="33">/* The user data we want to send */</comment>

    <expr_stmt><expr><name pos:line="21" pos:column="5">hdr<pos:position pos:line="21" pos:column="8"/></name> <operator pos:line="21" pos:column="9">=<pos:position pos:line="21" pos:column="10"/></operator> <name><name pos:line="21" pos:column="11">pkt<pos:position pos:line="21" pos:column="14"/></name><operator pos:line="21" pos:column="14">-&gt;<pos:position pos:line="21" pos:column="19"/></operator><name pos:line="21" pos:column="16">data<pos:position pos:line="21" pos:column="20"/></name></name></expr>;<pos:position pos:line="21" pos:column="21"/></expr_stmt>

    <comment type="block" pos:line="23" pos:column="5">/* Following crap is for portability across multiple UNIX machines */</comment>

    <expr_stmt><expr><operator pos:line="25" pos:column="5">*<pos:position pos:line="25" pos:column="6"/></operator><operator pos:line="25" pos:column="6">(<pos:position pos:line="25" pos:column="7"/></operator><name pos:line="25" pos:column="7">hdr<pos:position pos:line="25" pos:column="10"/></name> <operator pos:line="25" pos:column="11">+<pos:position pos:line="25" pos:column="12"/></operator> <name pos:line="25" pos:column="13">RFCNB_Pkt_Type_Offset<pos:position pos:line="25" pos:column="34"/></name><operator pos:line="25" pos:column="34">)<pos:position pos:line="25" pos:column="35"/></operator> <operator pos:line="25" pos:column="36">=<pos:position pos:line="25" pos:column="37"/></operator> <name pos:line="25" pos:column="38">RFCNB_SESSION_MESSAGE<pos:position pos:line="25" pos:column="59"/></name></expr>;<pos:position pos:line="25" pos:column="60"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">RFCNB_Put_Pkt_Len<pos:position pos:line="26" pos:column="22"/></name><argument_list pos:line="26" pos:column="22">(<argument><expr><name pos:line="26" pos:column="23">hdr<pos:position pos:line="26" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="28">Length<pos:position pos:line="26" pos:column="34"/></name></expr></argument>)<pos:position pos:line="26" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="36"/></expr_stmt>

<cpp:ifdef pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">ifdef<pos:position pos:line="28" pos:column="7"/></cpp:directive> <name pos:line="28" pos:column="8">RFCNB_DEBUG<pos:position pos:line="28" pos:column="19"/></name></cpp:ifdef>

    <expr_stmt><expr><call><name pos:line="30" pos:column="5">fprintf<pos:position pos:line="30" pos:column="12"/></name><argument_list pos:line="30" pos:column="12">(<argument><expr><name pos:line="30" pos:column="13">stderr<pos:position pos:line="30" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="21">"Sending packet: "<pos:position pos:line="30" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="41"/></expr_stmt>

<cpp:endif pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">endif<pos:position pos:line="32" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">(<expr><operator pos:line="34" pos:column="9">(<pos:position pos:line="34" pos:column="10"/></operator><name pos:line="34" pos:column="10">len<pos:position pos:line="34" pos:column="13"/></name> <operator pos:line="34" pos:column="14">=<pos:position pos:line="34" pos:column="15"/></operator> <call><name pos:line="34" pos:column="16">RFCNB_Put_Pkt<pos:position pos:line="34" pos:column="29"/></name><argument_list pos:line="34" pos:column="29">(<argument><expr><name pos:line="34" pos:column="30">Con_Handle<pos:position pos:line="34" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="42">pkt<pos:position pos:line="34" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="47">Length<pos:position pos:line="34" pos:column="53"/></name> <operator pos:line="34" pos:column="54">+<pos:position pos:line="34" pos:column="55"/></operator> <name pos:line="34" pos:column="56">RFCNB_Pkt_Hdr_Len<pos:position pos:line="34" pos:column="73"/></name></expr></argument>)<pos:position pos:line="34" pos:column="74"/></argument_list></call><operator pos:line="34" pos:column="74">)<pos:position pos:line="34" pos:column="75"/></operator> <operator pos:line="34" pos:column="76">&lt;<pos:position pos:line="34" pos:column="80"/></operator> <literal type="number" pos:line="34" pos:column="78">0<pos:position pos:line="34" pos:column="79"/></literal></expr>)<pos:position pos:line="34" pos:column="80"/></condition><then pos:line="34" pos:column="80"> <block pos:line="34" pos:column="81">{

        <comment type="block" pos:line="36" pos:column="9">/* No need to change RFCNB_errno as it was done by put_pkt ...     */</comment>

        <return pos:line="38" pos:column="9">return <expr><operator pos:line="38" pos:column="16">(<pos:position pos:line="38" pos:column="17"/></operator><name pos:line="38" pos:column="17">RFCNBE_Bad<pos:position pos:line="38" pos:column="27"/></name><operator pos:line="38" pos:column="27">)<pos:position pos:line="38" pos:column="28"/></operator></expr>;<pos:position pos:line="38" pos:column="29"/></return>	<comment type="block" pos:line="38" pos:column="33">/* Should be able to write that lot ... */</comment>

    }<pos:position pos:line="40" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="41" pos:column="5">/* Now we have sent that lot, let's get rid of the RFCNB Header and return */</comment>

    <expr_stmt><expr><name><name pos:line="43" pos:column="5">pkt<pos:position pos:line="43" pos:column="8"/></name><operator pos:line="43" pos:column="8">-&gt;<pos:position pos:line="43" pos:column="13"/></operator><name pos:line="43" pos:column="10">next<pos:position pos:line="43" pos:column="14"/></name></name> <operator pos:line="43" pos:column="15">=<pos:position pos:line="43" pos:column="16"/></operator> <name pos:line="43" pos:column="17">NULL<pos:position pos:line="43" pos:column="21"/></name></expr>;<pos:position pos:line="43" pos:column="22"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="45" pos:column="5">RFCNB_Free_Pkt<pos:position pos:line="45" pos:column="19"/></name><argument_list pos:line="45" pos:column="19">(<argument><expr><name pos:line="45" pos:column="20">pkt<pos:position pos:line="45" pos:column="23"/></name></expr></argument>)<pos:position pos:line="45" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="25"/></expr_stmt>

    <return pos:line="47" pos:column="5">return <expr><operator pos:line="47" pos:column="12">(<pos:position pos:line="47" pos:column="13"/></operator><name pos:line="47" pos:column="13">len<pos:position pos:line="47" pos:column="16"/></name><operator pos:line="47" pos:column="16">)<pos:position pos:line="47" pos:column="17"/></operator></expr>;<pos:position pos:line="47" pos:column="18"/></return>

}<pos:position pos:line="49" pos:column="2"/></block></function></unit>
