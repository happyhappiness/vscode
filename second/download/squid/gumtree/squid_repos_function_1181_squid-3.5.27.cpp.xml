<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1181_squid-3.5.27.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">parse_memcachemode<pos:position pos:line="2" pos:column="19"/></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name pos:line="2" pos:column="20">SquidConfig<pos:position pos:line="2" pos:column="31"/></name> <modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type> <name pos:line="2" pos:column="34">config<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="41"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">token<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><call><name><name pos:line="4" pos:column="19">ConfigParser<pos:position pos:line="4" pos:column="31"/></name><operator pos:line="4" pos:column="31">::<pos:position pos:line="4" pos:column="33"/></operator><name pos:line="4" pos:column="33">NextToken<pos:position pos:line="4" pos:column="42"/></name></name><argument_list pos:line="4" pos:column="42">()<pos:position pos:line="4" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="45"/></decl_stmt>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><operator pos:line="5" pos:column="9">!<pos:position pos:line="5" pos:column="10"/></operator><name pos:line="5" pos:column="10">token<pos:position pos:line="5" pos:column="15"/></name></expr>)<pos:position pos:line="5" pos:column="16"/></condition><then pos:line="5" pos:column="16">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="6" pos:column="9">self_destruct<pos:position pos:line="6" pos:column="22"/></name><argument_list pos:line="6" pos:column="22">()<pos:position pos:line="6" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="25"/></expr_stmt></block></then></if>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><call><name pos:line="8" pos:column="9">strcmp<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><name pos:line="8" pos:column="16">token<pos:position pos:line="8" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="23">"always"<pos:position pos:line="8" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="32"/></argument_list></call> <operator pos:line="8" pos:column="33">==<pos:position pos:line="8" pos:column="35"/></operator> <literal type="number" pos:line="8" pos:column="36">0<pos:position pos:line="8" pos:column="37"/></literal></expr>)<pos:position pos:line="8" pos:column="38"/></condition><then pos:line="8" pos:column="38"> <block pos:line="8" pos:column="39">{
        <expr_stmt><expr><name><name pos:line="9" pos:column="9">Config<pos:position pos:line="9" pos:column="15"/></name><operator pos:line="9" pos:column="15">.<pos:position pos:line="9" pos:column="16"/></operator><name pos:line="9" pos:column="16">onoff<pos:position pos:line="9" pos:column="21"/></name><operator pos:line="9" pos:column="21">.<pos:position pos:line="9" pos:column="22"/></operator><name pos:line="9" pos:column="22">memory_cache_first<pos:position pos:line="9" pos:column="40"/></name></name> <operator pos:line="9" pos:column="41">=<pos:position pos:line="9" pos:column="42"/></operator> <literal type="number" pos:line="9" pos:column="43">1<pos:position pos:line="9" pos:column="44"/></literal></expr>;<pos:position pos:line="9" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="10" pos:column="9">Config<pos:position pos:line="10" pos:column="15"/></name><operator pos:line="10" pos:column="15">.<pos:position pos:line="10" pos:column="16"/></operator><name pos:line="10" pos:column="16">onoff<pos:position pos:line="10" pos:column="21"/></name><operator pos:line="10" pos:column="21">.<pos:position pos:line="10" pos:column="22"/></operator><name pos:line="10" pos:column="22">memory_cache_disk<pos:position pos:line="10" pos:column="39"/></name></name> <operator pos:line="10" pos:column="40">=<pos:position pos:line="10" pos:column="41"/></operator> <literal type="number" pos:line="10" pos:column="42">1<pos:position pos:line="10" pos:column="43"/></literal></expr>;<pos:position pos:line="10" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="11" pos:column="6"/></block></then> <elseif pos:line="11" pos:column="7">else <if pos:line="11" pos:column="12">if <condition pos:line="11" pos:column="15">(<expr><call><name pos:line="11" pos:column="16">strcmp<pos:position pos:line="11" pos:column="22"/></name><argument_list pos:line="11" pos:column="22">(<argument><expr><name pos:line="11" pos:column="23">token<pos:position pos:line="11" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="30">"disk"<pos:position pos:line="11" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="37"/></argument_list></call> <operator pos:line="11" pos:column="38">==<pos:position pos:line="11" pos:column="40"/></operator> <literal type="number" pos:line="11" pos:column="41">0<pos:position pos:line="11" pos:column="42"/></literal></expr>)<pos:position pos:line="11" pos:column="43"/></condition><then pos:line="11" pos:column="43"> <block pos:line="11" pos:column="44">{
        <expr_stmt><expr><name><name pos:line="12" pos:column="9">Config<pos:position pos:line="12" pos:column="15"/></name><operator pos:line="12" pos:column="15">.<pos:position pos:line="12" pos:column="16"/></operator><name pos:line="12" pos:column="16">onoff<pos:position pos:line="12" pos:column="21"/></name><operator pos:line="12" pos:column="21">.<pos:position pos:line="12" pos:column="22"/></operator><name pos:line="12" pos:column="22">memory_cache_first<pos:position pos:line="12" pos:column="40"/></name></name> <operator pos:line="12" pos:column="41">=<pos:position pos:line="12" pos:column="42"/></operator> <literal type="number" pos:line="12" pos:column="43">0<pos:position pos:line="12" pos:column="44"/></literal></expr>;<pos:position pos:line="12" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="13" pos:column="9">Config<pos:position pos:line="13" pos:column="15"/></name><operator pos:line="13" pos:column="15">.<pos:position pos:line="13" pos:column="16"/></operator><name pos:line="13" pos:column="16">onoff<pos:position pos:line="13" pos:column="21"/></name><operator pos:line="13" pos:column="21">.<pos:position pos:line="13" pos:column="22"/></operator><name pos:line="13" pos:column="22">memory_cache_disk<pos:position pos:line="13" pos:column="39"/></name></name> <operator pos:line="13" pos:column="40">=<pos:position pos:line="13" pos:column="41"/></operator> <literal type="number" pos:line="13" pos:column="42">1<pos:position pos:line="13" pos:column="43"/></literal></expr>;<pos:position pos:line="13" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if></elseif> <elseif pos:line="14" pos:column="7">else <if pos:line="14" pos:column="12">if <condition pos:line="14" pos:column="15">(<expr><call><name pos:line="14" pos:column="16">strncmp<pos:position pos:line="14" pos:column="23"/></name><argument_list pos:line="14" pos:column="23">(<argument><expr><name pos:line="14" pos:column="24">token<pos:position pos:line="14" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="31">"net"<pos:position pos:line="14" pos:column="36"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="38">3<pos:position pos:line="14" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="40"/></argument_list></call> <operator pos:line="14" pos:column="41">==<pos:position pos:line="14" pos:column="43"/></operator> <literal type="number" pos:line="14" pos:column="44">0<pos:position pos:line="14" pos:column="45"/></literal></expr>)<pos:position pos:line="14" pos:column="46"/></condition><then pos:line="14" pos:column="46"> <block pos:line="14" pos:column="47">{
        <expr_stmt><expr><name><name pos:line="15" pos:column="9">Config<pos:position pos:line="15" pos:column="15"/></name><operator pos:line="15" pos:column="15">.<pos:position pos:line="15" pos:column="16"/></operator><name pos:line="15" pos:column="16">onoff<pos:position pos:line="15" pos:column="21"/></name><operator pos:line="15" pos:column="21">.<pos:position pos:line="15" pos:column="22"/></operator><name pos:line="15" pos:column="22">memory_cache_first<pos:position pos:line="15" pos:column="40"/></name></name> <operator pos:line="15" pos:column="41">=<pos:position pos:line="15" pos:column="42"/></operator> <literal type="number" pos:line="15" pos:column="43">1<pos:position pos:line="15" pos:column="44"/></literal></expr>;<pos:position pos:line="15" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="16" pos:column="9">Config<pos:position pos:line="16" pos:column="15"/></name><operator pos:line="16" pos:column="15">.<pos:position pos:line="16" pos:column="16"/></operator><name pos:line="16" pos:column="16">onoff<pos:position pos:line="16" pos:column="21"/></name><operator pos:line="16" pos:column="21">.<pos:position pos:line="16" pos:column="22"/></operator><name pos:line="16" pos:column="22">memory_cache_disk<pos:position pos:line="16" pos:column="39"/></name></name> <operator pos:line="16" pos:column="40">=<pos:position pos:line="16" pos:column="41"/></operator> <literal type="number" pos:line="16" pos:column="42">0<pos:position pos:line="16" pos:column="43"/></literal></expr>;<pos:position pos:line="16" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if></elseif> <elseif pos:line="17" pos:column="7">else <if pos:line="17" pos:column="12">if <condition pos:line="17" pos:column="15">(<expr><call><name pos:line="17" pos:column="16">strcmp<pos:position pos:line="17" pos:column="22"/></name><argument_list pos:line="17" pos:column="22">(<argument><expr><name pos:line="17" pos:column="23">token<pos:position pos:line="17" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="30">"never"<pos:position pos:line="17" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="38"/></argument_list></call> <operator pos:line="17" pos:column="39">==<pos:position pos:line="17" pos:column="41"/></operator> <literal type="number" pos:line="17" pos:column="42">0<pos:position pos:line="17" pos:column="43"/></literal></expr>)<pos:position pos:line="17" pos:column="44"/></condition><then pos:line="17" pos:column="44"> <block pos:line="17" pos:column="45">{
        <expr_stmt><expr><name><name pos:line="18" pos:column="9">Config<pos:position pos:line="18" pos:column="15"/></name><operator pos:line="18" pos:column="15">.<pos:position pos:line="18" pos:column="16"/></operator><name pos:line="18" pos:column="16">onoff<pos:position pos:line="18" pos:column="21"/></name><operator pos:line="18" pos:column="21">.<pos:position pos:line="18" pos:column="22"/></operator><name pos:line="18" pos:column="22">memory_cache_first<pos:position pos:line="18" pos:column="40"/></name></name> <operator pos:line="18" pos:column="41">=<pos:position pos:line="18" pos:column="42"/></operator> <literal type="number" pos:line="18" pos:column="43">0<pos:position pos:line="18" pos:column="44"/></literal></expr>;<pos:position pos:line="18" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="19" pos:column="9">Config<pos:position pos:line="19" pos:column="15"/></name><operator pos:line="19" pos:column="15">.<pos:position pos:line="19" pos:column="16"/></operator><name pos:line="19" pos:column="16">onoff<pos:position pos:line="19" pos:column="21"/></name><operator pos:line="19" pos:column="21">.<pos:position pos:line="19" pos:column="22"/></operator><name pos:line="19" pos:column="22">memory_cache_disk<pos:position pos:line="19" pos:column="39"/></name></name> <operator pos:line="19" pos:column="40">=<pos:position pos:line="19" pos:column="41"/></operator> <literal type="number" pos:line="19" pos:column="42">0<pos:position pos:line="19" pos:column="43"/></literal></expr>;<pos:position pos:line="19" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if></elseif> <else pos:line="20" pos:column="7">else <block pos:line="20" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">debugs<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><literal type="number" pos:line="21" pos:column="16">0<pos:position pos:line="21" pos:column="17"/></literal></expr></argument>, <argument><expr><call><name pos:line="21" pos:column="19">DBG_PARSE_NOTE<pos:position pos:line="21" pos:column="33"/></name><argument_list pos:line="21" pos:column="33">(<argument><expr><literal type="number" pos:line="21" pos:column="34">2<pos:position pos:line="21" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="36"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="38">"ERROR: Invalid option '"<pos:position pos:line="21" pos:column="63"/></literal> <operator pos:line="21" pos:column="64">&lt;&lt;<pos:position pos:line="21" pos:column="72"/></operator> <name pos:line="21" pos:column="67">token<pos:position pos:line="21" pos:column="72"/></name> <operator pos:line="21" pos:column="73">&lt;&lt;<pos:position pos:line="21" pos:column="81"/></operator> <literal type="string" pos:line="21" pos:column="76">"': 'memory_cache_mode' accepts 'always', 'disk', 'network', and 'never'."<pos:position pos:line="21" pos:column="150"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="151"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="152"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="22" pos:column="9">self_destruct<pos:position pos:line="22" pos:column="22"/></name><argument_list pos:line="22" pos:column="22">()<pos:position pos:line="22" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="23" pos:column="6"/></block></else></if>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
