<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4608_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ACLChecklist<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">goAsync<pos:position pos:line="2" pos:column="22"/></name></name><parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><name pos:line="2" pos:column="23">AsyncState<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type><name pos:line="2" pos:column="35">state<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="41"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">state<pos:position pos:line="4" pos:column="17"/></name></expr></argument>)<pos:position pos:line="4" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><operator pos:line="5" pos:column="12">!<pos:position pos:line="5" pos:column="13"/></operator><call><name pos:line="5" pos:column="13">asyncInProgress<pos:position pos:line="5" pos:column="28"/></name><argument_list pos:line="5" pos:column="28">()<pos:position pos:line="5" pos:column="30"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><name><name pos:line="6" pos:column="12">matchLoc_<pos:position pos:line="6" pos:column="21"/></name><operator pos:line="6" pos:column="21">.<pos:position pos:line="6" pos:column="22"/></operator><name pos:line="6" pos:column="22">parent<pos:position pos:line="6" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="30"/></expr_stmt>

    <comment type="line" pos:line="8" pos:column="5">// TODO: add a once-in-a-while WARNING about fast directive using slow ACL?</comment>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">!<pos:position pos:line="9" pos:column="10"/></operator><name pos:line="9" pos:column="10">asyncCaller_<pos:position pos:line="9" pos:column="22"/></name></expr>)<pos:position pos:line="9" pos:column="23"/></condition><then pos:line="9" pos:column="23"> <block pos:line="9" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">debugs<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><literal type="number" pos:line="10" pos:column="16">28<pos:position pos:line="10" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="20">2<pos:position pos:line="10" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="23">this<pos:position pos:line="10" pos:column="27"/></name> <operator pos:line="10" pos:column="28">&lt;&lt;<pos:position pos:line="10" pos:column="36"/></operator> <literal type="string" pos:line="10" pos:column="31">" a fast-only directive uses a slow ACL!"<pos:position pos:line="10" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="74"/></expr_stmt>
        <return pos:line="11" pos:column="9">return <expr><literal type="boolean" pos:line="11" pos:column="16">false<pos:position pos:line="11" pos:column="21"/></literal></expr>;<pos:position pos:line="11" pos:column="22"/></return>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="14" pos:column="5">// TODO: add a once-in-a-while WARNING about async loops?</comment>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">matchLoc_<pos:position pos:line="15" pos:column="18"/></name> <operator pos:line="15" pos:column="19">==<pos:position pos:line="15" pos:column="21"/></operator> <name pos:line="15" pos:column="22">asyncLoc_<pos:position pos:line="15" pos:column="31"/></name></expr>)<pos:position pos:line="15" pos:column="32"/></condition><then pos:line="15" pos:column="32"> <block pos:line="15" pos:column="33">{
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">debugs<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><literal type="number" pos:line="16" pos:column="16">28<pos:position pos:line="16" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="20">2<pos:position pos:line="16" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="23">this<pos:position pos:line="16" pos:column="27"/></name> <operator pos:line="16" pos:column="28">&lt;&lt;<pos:position pos:line="16" pos:column="36"/></operator> <literal type="string" pos:line="16" pos:column="31">" a slow ACL resumes by going async again! (loop #"<pos:position pos:line="16" pos:column="82"/></literal> <operator pos:line="16" pos:column="83">&lt;&lt;<pos:position pos:line="16" pos:column="91"/></operator> <name pos:line="16" pos:column="86">asyncLoopDepth_<pos:position pos:line="16" pos:column="101"/></name> <operator pos:line="16" pos:column="102">&lt;&lt;<pos:position pos:line="16" pos:column="110"/></operator> <literal type="string" pos:line="16" pos:column="105">")"<pos:position pos:line="16" pos:column="108"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="109"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="110"/></expr_stmt>
        <comment type="line" pos:line="17" pos:column="9">// external_acl_type may cause async auth lookup plus its own async check</comment>
        <comment type="line" pos:line="18" pos:column="9">// which has the appearance of a loop. Allow some retries.</comment>
        <comment type="line" pos:line="19" pos:column="9">// TODO: make it configurable and check BH retry attempts vs this check?</comment>
        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">asyncLoopDepth_<pos:position pos:line="20" pos:column="28"/></name> <operator pos:line="20" pos:column="29">&gt;<pos:position pos:line="20" pos:column="33"/></operator> <literal type="number" pos:line="20" pos:column="31">5<pos:position pos:line="20" pos:column="32"/></literal></expr>)<pos:position pos:line="20" pos:column="33"/></condition><then pos:line="20" pos:column="33">
            <block type="pseudo"><return pos:line="21" pos:column="13">return <expr><literal type="boolean" pos:line="21" pos:column="20">false<pos:position pos:line="21" pos:column="25"/></literal></expr>;<pos:position pos:line="21" pos:column="26"/></return></block></then></if>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="24" pos:column="5">asyncLoc_<pos:position pos:line="24" pos:column="14"/></name> <operator pos:line="24" pos:column="15">=<pos:position pos:line="24" pos:column="16"/></operator> <name pos:line="24" pos:column="17">matchLoc_<pos:position pos:line="24" pos:column="26"/></name></expr>;<pos:position pos:line="24" pos:column="27"/></expr_stmt> <comment type="line" pos:line="24" pos:column="28">// prevent async loops</comment>
    <expr_stmt><expr><operator pos:line="25" pos:column="5">++<pos:position pos:line="25" pos:column="7"/></operator><name pos:line="25" pos:column="7">asyncLoopDepth_<pos:position pos:line="25" pos:column="22"/></name></expr>;<pos:position pos:line="25" pos:column="23"/></expr_stmt>

    <expr_stmt><expr><name pos:line="27" pos:column="5">asyncStage_<pos:position pos:line="27" pos:column="16"/></name> <operator pos:line="27" pos:column="17">=<pos:position pos:line="27" pos:column="18"/></operator> <name pos:line="27" pos:column="19">asyncStarting<pos:position pos:line="27" pos:column="32"/></name></expr>;<pos:position pos:line="27" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">changeState<pos:position pos:line="28" pos:column="16"/></name><argument_list pos:line="28" pos:column="16">(<argument><expr><name pos:line="28" pos:column="17">state<pos:position pos:line="28" pos:column="22"/></name></expr></argument>)<pos:position pos:line="28" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="29" pos:column="5">state<pos:position pos:line="29" pos:column="10"/></name><operator pos:line="29" pos:column="10">-&gt;<pos:position pos:line="29" pos:column="15"/></operator><name pos:line="29" pos:column="12">checkForAsync<pos:position pos:line="29" pos:column="25"/></name></name><argument_list pos:line="29" pos:column="25">(<argument><expr><name pos:line="29" pos:column="26">this<pos:position pos:line="29" pos:column="30"/></name></expr></argument>)<pos:position pos:line="29" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="32"/></expr_stmt> <comment type="line" pos:line="29" pos:column="33">// this is supposed to go async</comment>

    <comment type="line" pos:line="31" pos:column="5">// Did AsyncState object actually go async? If not, tell the caller.</comment>
    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><name pos:line="32" pos:column="9">asyncStage_<pos:position pos:line="32" pos:column="20"/></name> <operator pos:line="32" pos:column="21">!=<pos:position pos:line="32" pos:column="23"/></operator> <name pos:line="32" pos:column="24">asyncStarting<pos:position pos:line="32" pos:column="37"/></name></expr>)<pos:position pos:line="32" pos:column="38"/></condition><then pos:line="32" pos:column="38"> <block pos:line="32" pos:column="39">{
        <expr_stmt><expr><call><name pos:line="33" pos:column="9">assert<pos:position pos:line="33" pos:column="15"/></name><argument_list pos:line="33" pos:column="15">(<argument><expr><name pos:line="33" pos:column="16">asyncStage_<pos:position pos:line="33" pos:column="27"/></name> <operator pos:line="33" pos:column="28">==<pos:position pos:line="33" pos:column="30"/></operator> <name pos:line="33" pos:column="31">asyncFailed<pos:position pos:line="33" pos:column="42"/></name></expr></argument>)<pos:position pos:line="33" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><name pos:line="34" pos:column="9">asyncStage_<pos:position pos:line="34" pos:column="20"/></name> <operator pos:line="34" pos:column="21">=<pos:position pos:line="34" pos:column="22"/></operator> <name pos:line="34" pos:column="23">asyncNone<pos:position pos:line="34" pos:column="32"/></name></expr>;<pos:position pos:line="34" pos:column="33"/></expr_stmt> <comment type="line" pos:line="34" pos:column="34">// sanity restored</comment>
        <return pos:line="35" pos:column="9">return <expr><literal type="boolean" pos:line="35" pos:column="16">false<pos:position pos:line="35" pos:column="21"/></literal></expr>;<pos:position pos:line="35" pos:column="22"/></return>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="38" pos:column="5">// yes, we must pause until the async callback calls resumeNonBlockingCheck</comment>
    <expr_stmt><expr><name pos:line="39" pos:column="5">asyncStage_<pos:position pos:line="39" pos:column="16"/></name> <operator pos:line="39" pos:column="17">=<pos:position pos:line="39" pos:column="18"/></operator> <name pos:line="39" pos:column="19">asyncRunning<pos:position pos:line="39" pos:column="31"/></name></expr>;<pos:position pos:line="39" pos:column="32"/></expr_stmt>
    <return pos:line="40" pos:column="5">return <expr><literal type="boolean" pos:line="40" pos:column="12">true<pos:position pos:line="40" pos:column="16"/></literal></expr>;<pos:position pos:line="40" pos:column="17"/></return>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
