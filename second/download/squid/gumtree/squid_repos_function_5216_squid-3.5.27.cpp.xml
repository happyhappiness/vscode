<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5216_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Rock<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">IoState<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">writeBufToDisk<pos:position pos:line="2" pos:column="30"/></name></name><parameter_list pos:line="2" pos:column="30">(<parameter><decl><type><specifier pos:line="2" pos:column="31">const<pos:position pos:line="2" pos:column="36"/></specifier> <name pos:line="2" pos:column="37">SlotId<pos:position pos:line="2" pos:column="43"/></name></type> <name pos:line="2" pos:column="44">sidNext<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="53">bool<pos:position pos:line="2" pos:column="57"/></name></type> <name pos:line="2" pos:column="58">eof<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="62"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// no slots after the last/eof slot (but partial slots may have a nil next)</comment>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><operator pos:line="5" pos:column="12">!<pos:position pos:line="5" pos:column="13"/></operator><name pos:line="5" pos:column="13">eof<pos:position pos:line="5" pos:column="16"/></name> <operator pos:line="5" pos:column="17">||<pos:position pos:line="5" pos:column="19"/></operator> <name pos:line="5" pos:column="20">sidNext<pos:position pos:line="5" pos:column="27"/></name> <operator pos:line="5" pos:column="28">&lt;<pos:position pos:line="5" pos:column="32"/></operator> <literal type="number" pos:line="5" pos:column="30">0<pos:position pos:line="5" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="33"/></expr_stmt>

    <comment type="line" pos:line="7" pos:column="5">// finalize db cell header</comment>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">DbCellHeader<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">header<pos:position pos:line="8" pos:column="24"/></name></decl>;<pos:position pos:line="8" pos:column="25"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">memcpy<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><name><name pos:line="9" pos:column="12">header<pos:position pos:line="9" pos:column="18"/></name><operator pos:line="9" pos:column="18">.<pos:position pos:line="9" pos:column="19"/></operator><name pos:line="9" pos:column="19">key<pos:position pos:line="9" pos:column="22"/></name></name></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="24">e<pos:position pos:line="9" pos:column="25"/></name><operator pos:line="9" pos:column="25">-&gt;<pos:position pos:line="9" pos:column="30"/></operator><name pos:line="9" pos:column="27">key<pos:position pos:line="9" pos:column="30"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="9" pos:column="32">sizeof<argument_list pos:line="9" pos:column="38">(<argument><expr><name><name pos:line="9" pos:column="39">header<pos:position pos:line="9" pos:column="45"/></name><operator pos:line="9" pos:column="45">.<pos:position pos:line="9" pos:column="46"/></operator><name pos:line="9" pos:column="46">key<pos:position pos:line="9" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="10" pos:column="5">header<pos:position pos:line="10" pos:column="11"/></name><operator pos:line="10" pos:column="11">.<pos:position pos:line="10" pos:column="12"/></operator><name pos:line="10" pos:column="12">firstSlot<pos:position pos:line="10" pos:column="21"/></name></name> <operator pos:line="10" pos:column="22">=<pos:position pos:line="10" pos:column="23"/></operator> <call><name pos:line="10" pos:column="24">writeAnchor<pos:position pos:line="10" pos:column="35"/></name><argument_list pos:line="10" pos:column="35">()<pos:position pos:line="10" pos:column="37"/></argument_list></call><operator pos:line="10" pos:column="37">.<pos:position pos:line="10" pos:column="38"/></operator><name pos:line="10" pos:column="38">start<pos:position pos:line="10" pos:column="43"/></name></expr>;<pos:position pos:line="10" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="11" pos:column="5">header<pos:position pos:line="11" pos:column="11"/></name><operator pos:line="11" pos:column="11">.<pos:position pos:line="11" pos:column="12"/></operator><name pos:line="11" pos:column="12">nextSlot<pos:position pos:line="11" pos:column="20"/></name></name> <operator pos:line="11" pos:column="21">=<pos:position pos:line="11" pos:column="22"/></operator> <name pos:line="11" pos:column="23">sidNext<pos:position pos:line="11" pos:column="30"/></name></expr>;<pos:position pos:line="11" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="12" pos:column="5">header<pos:position pos:line="12" pos:column="11"/></name><operator pos:line="12" pos:column="11">.<pos:position pos:line="12" pos:column="12"/></operator><name pos:line="12" pos:column="12">payloadSize<pos:position pos:line="12" pos:column="23"/></name></name> <operator pos:line="12" pos:column="24">=<pos:position pos:line="12" pos:column="25"/></operator> <name><name pos:line="12" pos:column="26">theBuf<pos:position pos:line="12" pos:column="32"/></name><operator pos:line="12" pos:column="32">.<pos:position pos:line="12" pos:column="33"/></operator><name pos:line="12" pos:column="33">size<pos:position pos:line="12" pos:column="37"/></name></name> <operator pos:line="12" pos:column="38">-<pos:position pos:line="12" pos:column="39"/></operator> <sizeof pos:line="12" pos:column="40">sizeof<argument_list pos:line="12" pos:column="46">(<argument><expr><name pos:line="12" pos:column="47">DbCellHeader<pos:position pos:line="12" pos:column="59"/></name></expr></argument>)<pos:position pos:line="12" pos:column="60"/></argument_list></sizeof></expr>;<pos:position pos:line="12" pos:column="61"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="13" pos:column="5">header<pos:position pos:line="13" pos:column="11"/></name><operator pos:line="13" pos:column="11">.<pos:position pos:line="13" pos:column="12"/></operator><name pos:line="13" pos:column="12">entrySize<pos:position pos:line="13" pos:column="21"/></name></name> <operator pos:line="13" pos:column="22">=<pos:position pos:line="13" pos:column="23"/></operator> <ternary><condition><expr><name pos:line="13" pos:column="24">eof<pos:position pos:line="13" pos:column="27"/></name></expr> ?<pos:position pos:line="13" pos:column="29"/></condition><then pos:line="13" pos:column="29"> <expr><name pos:line="13" pos:column="30">offset_<pos:position pos:line="13" pos:column="37"/></name></expr> <pos:position pos:line="13" pos:column="38"/></then><else pos:line="13" pos:column="38">: <expr><literal type="number" pos:line="13" pos:column="40">0<pos:position pos:line="13" pos:column="41"/></literal></expr></else></ternary></expr>;<pos:position pos:line="13" pos:column="42"/></expr_stmt> <comment type="line" pos:line="13" pos:column="43">// storeSwapOutFileClosed sets swap_file_sz after write</comment>
    <expr_stmt><expr><name><name pos:line="14" pos:column="5">header<pos:position pos:line="14" pos:column="11"/></name><operator pos:line="14" pos:column="11">.<pos:position pos:line="14" pos:column="12"/></operator><name pos:line="14" pos:column="12">version<pos:position pos:line="14" pos:column="19"/></name></name> <operator pos:line="14" pos:column="20">=<pos:position pos:line="14" pos:column="21"/></operator> <call><name pos:line="14" pos:column="22">writeAnchor<pos:position pos:line="14" pos:column="33"/></name><argument_list pos:line="14" pos:column="33">()<pos:position pos:line="14" pos:column="35"/></argument_list></call><operator pos:line="14" pos:column="35">.<pos:position pos:line="14" pos:column="36"/></operator><name><name pos:line="14" pos:column="36">basics<pos:position pos:line="14" pos:column="42"/></name><operator pos:line="14" pos:column="42">.<pos:position pos:line="14" pos:column="43"/></operator><name pos:line="14" pos:column="43">timestamp<pos:position pos:line="14" pos:column="52"/></name></name></expr>;<pos:position pos:line="14" pos:column="53"/></expr_stmt>

    <comment type="line" pos:line="16" pos:column="5">// copy finalized db cell header into buffer</comment>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">memcpy<pos:position pos:line="17" pos:column="11"/></name><argument_list pos:line="17" pos:column="11">(<argument><expr><name><name pos:line="17" pos:column="12">theBuf<pos:position pos:line="17" pos:column="18"/></name><operator pos:line="17" pos:column="18">.<pos:position pos:line="17" pos:column="19"/></operator><name pos:line="17" pos:column="19">mem<pos:position pos:line="17" pos:column="22"/></name></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="24">&amp;<pos:position pos:line="17" pos:column="29"/></operator><name pos:line="17" pos:column="25">header<pos:position pos:line="17" pos:column="31"/></name></expr></argument>, <argument><expr><sizeof pos:line="17" pos:column="33">sizeof<argument_list pos:line="17" pos:column="39">(<argument><expr><name pos:line="17" pos:column="40">DbCellHeader<pos:position pos:line="17" pos:column="52"/></name></expr></argument>)<pos:position pos:line="17" pos:column="53"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="17" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="55"/></expr_stmt>

    <comment type="line" pos:line="19" pos:column="5">// and now allocate another buffer for the WriteRequest so that</comment>
    <comment type="line" pos:line="20" pos:column="5">// we can support concurrent WriteRequests (and to ease cleaning)</comment>
    <comment type="line" pos:line="21" pos:column="5">// TODO: should we limit the number of outstanding requests?</comment>
    <decl_stmt><decl><type><name pos:line="22" pos:column="5">size_t<pos:position pos:line="22" pos:column="11"/></name></type> <name pos:line="22" pos:column="12">wBufCap<pos:position pos:line="22" pos:column="19"/></name> <init pos:line="22" pos:column="20">= <expr><literal type="number" pos:line="22" pos:column="22">0<pos:position pos:line="22" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="22" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="23" pos:column="5">void<pos:position pos:line="23" pos:column="9"/></name> <modifier pos:line="23" pos:column="10">*<pos:position pos:line="23" pos:column="11"/></modifier></type><name pos:line="23" pos:column="11">wBuf<pos:position pos:line="23" pos:column="15"/></name> <init pos:line="23" pos:column="16">= <expr><call><name pos:line="23" pos:column="18">memAllocBuf<pos:position pos:line="23" pos:column="29"/></name><argument_list pos:line="23" pos:column="29">(<argument><expr><name><name pos:line="23" pos:column="30">theBuf<pos:position pos:line="23" pos:column="36"/></name><operator pos:line="23" pos:column="36">.<pos:position pos:line="23" pos:column="37"/></operator><name pos:line="23" pos:column="37">size<pos:position pos:line="23" pos:column="41"/></name></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="43">&amp;<pos:position pos:line="23" pos:column="48"/></operator><name pos:line="23" pos:column="44">wBufCap<pos:position pos:line="23" pos:column="51"/></name></expr></argument>)<pos:position pos:line="23" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="23" pos:column="53"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">memcpy<pos:position pos:line="24" pos:column="11"/></name><argument_list pos:line="24" pos:column="11">(<argument><expr><name pos:line="24" pos:column="12">wBuf<pos:position pos:line="24" pos:column="16"/></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="18">theBuf<pos:position pos:line="24" pos:column="24"/></name><operator pos:line="24" pos:column="24">.<pos:position pos:line="24" pos:column="25"/></operator><name pos:line="24" pos:column="25">mem<pos:position pos:line="24" pos:column="28"/></name></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="30">theBuf<pos:position pos:line="24" pos:column="36"/></name><operator pos:line="24" pos:column="36">.<pos:position pos:line="24" pos:column="37"/></operator><name pos:line="24" pos:column="37">size<pos:position pos:line="24" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="43"/></expr_stmt>

    <decl_stmt><decl><type><specifier pos:line="26" pos:column="5">const<pos:position pos:line="26" pos:column="10"/></specifier> <name pos:line="26" pos:column="11">uint64_t<pos:position pos:line="26" pos:column="19"/></name></type> <name pos:line="26" pos:column="20">diskOffset<pos:position pos:line="26" pos:column="30"/></name> <init pos:line="26" pos:column="31">= <expr><call><name><name pos:line="26" pos:column="33">dir<pos:position pos:line="26" pos:column="36"/></name><operator pos:line="26" pos:column="36">-&gt;<pos:position pos:line="26" pos:column="41"/></operator><name pos:line="26" pos:column="38">diskOffset<pos:position pos:line="26" pos:column="48"/></name></name><argument_list pos:line="26" pos:column="48">(<argument><expr><name pos:line="26" pos:column="49">sidCurrent<pos:position pos:line="26" pos:column="59"/></name></expr></argument>)<pos:position pos:line="26" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="26" pos:column="61"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">debugs<pos:position pos:line="27" pos:column="11"/></name><argument_list pos:line="27" pos:column="11">(<argument><expr><literal type="number" pos:line="27" pos:column="12">79<pos:position pos:line="27" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="16">5<pos:position pos:line="27" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="19">HERE<pos:position pos:line="27" pos:column="23"/></name> <operator pos:line="27" pos:column="24">&lt;&lt;<pos:position pos:line="27" pos:column="32"/></operator> <name pos:line="27" pos:column="27">swap_filen<pos:position pos:line="27" pos:column="37"/></name> <operator pos:line="27" pos:column="38">&lt;&lt;<pos:position pos:line="27" pos:column="46"/></operator> <literal type="string" pos:line="27" pos:column="41">" at "<pos:position pos:line="27" pos:column="47"/></literal> <operator pos:line="27" pos:column="48">&lt;&lt;<pos:position pos:line="27" pos:column="56"/></operator> <name pos:line="27" pos:column="51">diskOffset<pos:position pos:line="27" pos:column="61"/></name> <operator pos:line="27" pos:column="62">&lt;&lt;<pos:position pos:line="27" pos:column="70"/></operator> <literal type="char" pos:line="27" pos:column="65">'+'<pos:position pos:line="27" pos:column="68"/></literal> <operator pos:line="27" pos:column="69">&lt;&lt;<pos:position pos:line="27" pos:column="77"/></operator>
           <name><name pos:line="28" pos:column="12">theBuf<pos:position pos:line="28" pos:column="18"/></name><operator pos:line="28" pos:column="18">.<pos:position pos:line="28" pos:column="19"/></operator><name pos:line="28" pos:column="19">size<pos:position pos:line="28" pos:column="23"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="25"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="30" pos:column="5">WriteRequest<pos:position pos:line="30" pos:column="17"/></name> <modifier pos:line="30" pos:column="18">*<pos:position pos:line="30" pos:column="19"/></modifier><specifier pos:line="30" pos:column="19">const<pos:position pos:line="30" pos:column="24"/></specifier></type> <name pos:line="30" pos:column="25">r<pos:position pos:line="30" pos:column="26"/></name> <init pos:line="30" pos:column="27">= <expr><operator pos:line="30" pos:column="29">new<pos:position pos:line="30" pos:column="32"/></operator> <call><name pos:line="30" pos:column="33">WriteRequest<pos:position pos:line="30" pos:column="45"/></name><argument_list pos:line="30" pos:column="45">(
        <argument><expr><call><name><operator pos:line="31" pos:column="9">::<pos:position pos:line="31" pos:column="11"/></operator><name pos:line="31" pos:column="11">WriteRequest<pos:position pos:line="31" pos:column="23"/></name></name><argument_list pos:line="31" pos:column="23">(<argument><expr><cast type="static" pos:line="31" pos:column="24">static_cast<argument_list type="generic" pos:line="31" pos:column="35">&lt;<argument><expr><name pos:line="31" pos:column="36">char<pos:position pos:line="31" pos:column="40"/></name><operator pos:line="31" pos:column="40">*<pos:position pos:line="31" pos:column="41"/></operator></expr></argument>&gt;<pos:position pos:line="31" pos:column="45"/></argument_list><argument_list pos:line="31" pos:column="42">(<argument><expr><name pos:line="31" pos:column="43">wBuf<pos:position pos:line="31" pos:column="47"/></name></expr></argument>)<pos:position pos:line="31" pos:column="48"/></argument_list></cast></expr></argument>, <argument><expr><name pos:line="31" pos:column="50">diskOffset<pos:position pos:line="31" pos:column="60"/></name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="62">theBuf<pos:position pos:line="31" pos:column="68"/></name><operator pos:line="31" pos:column="68">.<pos:position pos:line="31" pos:column="69"/></operator><name pos:line="31" pos:column="69">size<pos:position pos:line="31" pos:column="73"/></name></name></expr></argument>,
                       <argument><expr><call><name pos:line="32" pos:column="24">memFreeBufFunc<pos:position pos:line="32" pos:column="38"/></name><argument_list pos:line="32" pos:column="38">(<argument><expr><name pos:line="32" pos:column="39">wBufCap<pos:position pos:line="32" pos:column="46"/></name></expr></argument>)<pos:position pos:line="32" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="32" pos:column="48"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="32" pos:column="50">this<pos:position pos:line="32" pos:column="54"/></name></expr></argument>)<pos:position pos:line="32" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="32" pos:column="56"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="33" pos:column="5">r<pos:position pos:line="33" pos:column="6"/></name><operator pos:line="33" pos:column="6">-&gt;<pos:position pos:line="33" pos:column="11"/></operator><name pos:line="33" pos:column="8">sidCurrent<pos:position pos:line="33" pos:column="18"/></name></name> <operator pos:line="33" pos:column="19">=<pos:position pos:line="33" pos:column="20"/></operator> <name pos:line="33" pos:column="21">sidCurrent<pos:position pos:line="33" pos:column="31"/></name></expr>;<pos:position pos:line="33" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="34" pos:column="5">r<pos:position pos:line="34" pos:column="6"/></name><operator pos:line="34" pos:column="6">-&gt;<pos:position pos:line="34" pos:column="11"/></operator><name pos:line="34" pos:column="8">sidNext<pos:position pos:line="34" pos:column="15"/></name></name> <operator pos:line="34" pos:column="16">=<pos:position pos:line="34" pos:column="17"/></operator> <name pos:line="34" pos:column="18">sidNext<pos:position pos:line="34" pos:column="25"/></name></expr>;<pos:position pos:line="34" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="35" pos:column="5">r<pos:position pos:line="35" pos:column="6"/></name><operator pos:line="35" pos:column="6">-&gt;<pos:position pos:line="35" pos:column="11"/></operator><name pos:line="35" pos:column="8">eof<pos:position pos:line="35" pos:column="11"/></name></name> <operator pos:line="35" pos:column="12">=<pos:position pos:line="35" pos:column="13"/></operator> <name pos:line="35" pos:column="14">eof<pos:position pos:line="35" pos:column="17"/></name></expr>;<pos:position pos:line="35" pos:column="18"/></expr_stmt>

    <comment type="line" pos:line="37" pos:column="5">// theFile-&gt;write may call writeCompleted immediatelly</comment>
    <expr_stmt><expr><call><name><name pos:line="38" pos:column="5">theFile<pos:position pos:line="38" pos:column="12"/></name><operator pos:line="38" pos:column="12">-&gt;<pos:position pos:line="38" pos:column="17"/></operator><name pos:line="38" pos:column="14">write<pos:position pos:line="38" pos:column="19"/></name></name><argument_list pos:line="38" pos:column="19">(<argument><expr><name pos:line="38" pos:column="20">r<pos:position pos:line="38" pos:column="21"/></name></expr></argument>)<pos:position pos:line="38" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="23"/></expr_stmt>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
