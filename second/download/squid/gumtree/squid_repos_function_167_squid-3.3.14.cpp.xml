<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_167_squid-3.3.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">local_printfx<pos:position pos:line="2" pos:column="14"/></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><specifier pos:line="2" pos:column="15">const<pos:position pos:line="2" pos:column="20"/></specifier> <name pos:line="2" pos:column="21">char<pos:position pos:line="2" pos:column="25"/></name> <modifier pos:line="2" pos:column="26">*<pos:position pos:line="2" pos:column="27"/></modifier></type><name pos:line="2" pos:column="27">msg<pos:position pos:line="2" pos:column="30"/></name></decl></parameter>,<parameter><decl><type><modifier pos:line="2" pos:column="31">...<pos:position pos:line="2" pos:column="34"/></modifier></type></decl></parameter>)<pos:position pos:line="2" pos:column="35"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name></type> <name><name pos:line="4" pos:column="10">prog<pos:position pos:line="4" pos:column="14"/></name><index pos:line="4" pos:column="14">[<expr><name pos:line="4" pos:column="15">EDUI_MAXLEN<pos:position pos:line="4" pos:column="26"/></name></expr>]<pos:position pos:line="4" pos:column="27"/></index></name></decl>, <decl><type ref="prev"/><name><name pos:line="4" pos:column="29">dbuf<pos:position pos:line="4" pos:column="33"/></name><index pos:line="4" pos:column="33">[<expr><name pos:line="4" pos:column="34">EDUI_MAXLEN<pos:position pos:line="4" pos:column="45"/></name></expr>]<pos:position pos:line="4" pos:column="46"/></index></name></decl>;<pos:position pos:line="4" pos:column="47"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">size_t<pos:position pos:line="5" pos:column="11"/></name></type> <name pos:line="5" pos:column="12">sz<pos:position pos:line="5" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="16">x<pos:position pos:line="5" pos:column="17"/></name></decl>;<pos:position pos:line="5" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">va_list<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">ap<pos:position pos:line="6" pos:column="15"/></name></decl>;<pos:position pos:line="6" pos:column="16"/></decl_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name><name pos:line="8" pos:column="9">edui_conf<pos:position pos:line="8" pos:column="18"/></name><operator pos:line="8" pos:column="18">.<pos:position pos:line="8" pos:column="19"/></operator><name pos:line="8" pos:column="19">program<pos:position pos:line="8" pos:column="26"/></name><index pos:line="8" pos:column="26">[<expr><literal type="number" pos:line="8" pos:column="27">0<pos:position pos:line="8" pos:column="28"/></literal></expr>]<pos:position pos:line="8" pos:column="29"/></index></name> <operator pos:line="8" pos:column="30">==<pos:position pos:line="8" pos:column="32"/></operator> <literal type="char" pos:line="8" pos:column="33">'\0'<pos:position pos:line="8" pos:column="37"/></literal></expr>)<pos:position pos:line="8" pos:column="38"/></condition><then pos:line="8" pos:column="38">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="9" pos:column="9">xstrncpy<pos:position pos:line="9" pos:column="17"/></name><argument_list pos:line="9" pos:column="17">(<argument><expr><name pos:line="9" pos:column="18">prog<pos:position pos:line="9" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="24">EDUI_PROGRAM_NAME<pos:position pos:line="9" pos:column="41"/></name></expr></argument>, <argument><expr><sizeof pos:line="9" pos:column="43">sizeof<argument_list pos:line="9" pos:column="49">(<argument><expr><name pos:line="9" pos:column="50">prog<pos:position pos:line="9" pos:column="54"/></name></expr></argument>)<pos:position pos:line="9" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="57"/></expr_stmt></block></then>
    <else pos:line="10" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="9">xstrncpy<pos:position pos:line="11" pos:column="17"/></name><argument_list pos:line="11" pos:column="17">(<argument><expr><name pos:line="11" pos:column="18">prog<pos:position pos:line="11" pos:column="22"/></name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="24">edui_conf<pos:position pos:line="11" pos:column="33"/></name><operator pos:line="11" pos:column="33">.<pos:position pos:line="11" pos:column="34"/></operator><name pos:line="11" pos:column="34">program<pos:position pos:line="11" pos:column="41"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="11" pos:column="43">sizeof<argument_list pos:line="11" pos:column="49">(<argument><expr><name pos:line="11" pos:column="50">prog<pos:position pos:line="11" pos:column="54"/></name></expr></argument>)<pos:position pos:line="11" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="11" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="57"/></expr_stmt></block></else></if>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">msg<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">==<pos:position pos:line="13" pos:column="15"/></operator> <name pos:line="13" pos:column="16">NULL<pos:position pos:line="13" pos:column="20"/></name></expr>)<pos:position pos:line="13" pos:column="21"/></condition><then pos:line="13" pos:column="21"> <block pos:line="13" pos:column="22">{
        <comment type="block" pos:line="14" pos:column="9">/* FAIL */</comment>
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">debug<pos:position pos:line="15" pos:column="14"/></name><argument_list pos:line="15" pos:column="14">(<argument><expr><literal type="string" pos:line="15" pos:column="15">"local_printfx() FAILURE, no data.\n"<pos:position pos:line="15" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="54"/></expr_stmt>
        <return pos:line="16" pos:column="9">return;<pos:position pos:line="16" pos:column="16"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="18" pos:column="5">sz<pos:position pos:line="18" pos:column="7"/></name> <operator pos:line="18" pos:column="8">=<pos:position pos:line="18" pos:column="9"/></operator> <sizeof pos:line="18" pos:column="10">sizeof<argument_list pos:line="18" pos:column="16">(<argument><expr><name pos:line="18" pos:column="17">dbuf<pos:position pos:line="18" pos:column="21"/></name></expr></argument>)<pos:position pos:line="18" pos:column="22"/></argument_list></sizeof></expr>;<pos:position pos:line="18" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">va_start<pos:position pos:line="19" pos:column="13"/></name><argument_list pos:line="19" pos:column="13">(<argument><expr><name pos:line="19" pos:column="14">ap<pos:position pos:line="19" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="18">msg<pos:position pos:line="19" pos:column="21"/></name></expr></argument>)<pos:position pos:line="19" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name pos:line="20" pos:column="5">x<pos:position pos:line="20" pos:column="6"/></name> <operator pos:line="20" pos:column="7">=<pos:position pos:line="20" pos:column="8"/></operator> <call><name pos:line="20" pos:column="9">vsnprintf<pos:position pos:line="20" pos:column="18"/></name><argument_list pos:line="20" pos:column="18">(<argument><expr><name pos:line="20" pos:column="19">dbuf<pos:position pos:line="20" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="25">sz<pos:position pos:line="20" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="29">msg<pos:position pos:line="20" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="34">ap<pos:position pos:line="20" pos:column="36"/></name></expr></argument>)<pos:position pos:line="20" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">va_end<pos:position pos:line="21" pos:column="11"/></name><argument_list pos:line="21" pos:column="11">(<argument><expr><name pos:line="21" pos:column="12">ap<pos:position pos:line="21" pos:column="14"/></name></expr></argument>)<pos:position pos:line="21" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="16"/></expr_stmt>
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><name pos:line="22" pos:column="9">x<pos:position pos:line="22" pos:column="10"/></name> <operator pos:line="22" pos:column="11">&gt;<pos:position pos:line="22" pos:column="15"/></operator> <literal type="number" pos:line="22" pos:column="13">0<pos:position pos:line="22" pos:column="14"/></literal></expr>)<pos:position pos:line="22" pos:column="15"/></condition><then pos:line="22" pos:column="15"> <block pos:line="22" pos:column="16">{
        <expr_stmt><expr><name><name pos:line="23" pos:column="9">dbuf<pos:position pos:line="23" pos:column="13"/></name><index pos:line="23" pos:column="13">[<expr><name pos:line="23" pos:column="14">x<pos:position pos:line="23" pos:column="15"/></name></expr>]<pos:position pos:line="23" pos:column="16"/></index></name> <operator pos:line="23" pos:column="17">=<pos:position pos:line="23" pos:column="18"/></operator> <literal type="char" pos:line="23" pos:column="19">'\0'<pos:position pos:line="23" pos:column="23"/></literal></expr>;<pos:position pos:line="23" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="24" pos:column="9">++<pos:position pos:line="24" pos:column="11"/></operator><name pos:line="24" pos:column="11">x<pos:position pos:line="24" pos:column="12"/></name></expr>;<pos:position pos:line="24" pos:column="13"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">fputs<pos:position pos:line="25" pos:column="14"/></name><argument_list pos:line="25" pos:column="14">(<argument><expr><name pos:line="25" pos:column="15">dbuf<pos:position pos:line="25" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="21">stdout<pos:position pos:line="25" pos:column="27"/></name></expr></argument>)<pos:position pos:line="25" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="26" pos:column="9">*<pos:position pos:line="26" pos:column="10"/></operator><operator pos:line="26" pos:column="10">(<pos:position pos:line="26" pos:column="11"/></operator><name pos:line="26" pos:column="11">dbuf<pos:position pos:line="26" pos:column="15"/></name><operator pos:line="26" pos:column="15">)<pos:position pos:line="26" pos:column="16"/></operator> <operator pos:line="26" pos:column="17">=<pos:position pos:line="26" pos:column="18"/></operator> <literal type="char" pos:line="26" pos:column="19">'\0'<pos:position pos:line="26" pos:column="23"/></literal></expr>;<pos:position pos:line="26" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="27" pos:column="6"/></block></then> <else pos:line="27" pos:column="7">else <block pos:line="27" pos:column="12">{
        <comment type="block" pos:line="28" pos:column="9">/* FAIL */</comment>
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">debug<pos:position pos:line="29" pos:column="14"/></name><argument_list pos:line="29" pos:column="14">(<argument><expr><literal type="string" pos:line="29" pos:column="15">"local_printfx() FAILURE: %"<pos:position pos:line="29" pos:column="43"/></literal> <name pos:line="29" pos:column="44">PRIuSIZE<pos:position pos:line="29" pos:column="52"/></name> <literal type="string" pos:line="29" pos:column="53">"\n"<pos:position pos:line="29" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="59">x<pos:position pos:line="29" pos:column="60"/></name></expr></argument>)<pos:position pos:line="29" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="62"/></expr_stmt>
    }<pos:position pos:line="30" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="32" pos:column="5">/* stdout needs to be flushed for it to work with Squid */</comment>
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">fflush<pos:position pos:line="33" pos:column="11"/></name><argument_list pos:line="33" pos:column="11">(<argument><expr><name pos:line="33" pos:column="12">stdout<pos:position pos:line="33" pos:column="18"/></name></expr></argument>)<pos:position pos:line="33" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="20"/></expr_stmt>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
