<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_281_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">RFCNB_Get_Pkt<pos:position pos:line="2" pos:column="14"/></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><name><name pos:line="2" pos:column="15">struct<pos:position pos:line="2" pos:column="21"/></name> <name pos:line="2" pos:column="22">RFCNB_Con<pos:position pos:line="2" pos:column="31"/></name></name> <modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type><name pos:line="2" pos:column="33">con<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="38">struct<pos:position pos:line="2" pos:column="44"/></name> <name pos:line="2" pos:column="45">RFCNB_Pkt<pos:position pos:line="2" pos:column="54"/></name></name> <modifier pos:line="2" pos:column="55">*<pos:position pos:line="2" pos:column="56"/></modifier></type><name pos:line="2" pos:column="56">pkt<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="61">int<pos:position pos:line="2" pos:column="64"/></name></type> <name pos:line="2" pos:column="65">len<pos:position pos:line="2" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="69"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">read_len<pos:position pos:line="4" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="19">pkt_len<pos:position pos:line="4" pos:column="26"/></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name></type> <name><name pos:line="5" pos:column="10">hdr<pos:position pos:line="5" pos:column="13"/></name><index pos:line="5" pos:column="13">[<expr><name pos:line="5" pos:column="14">RFCNB_Pkt_Hdr_Len<pos:position pos:line="5" pos:column="31"/></name></expr>]<pos:position pos:line="5" pos:column="32"/></index></name></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>	<comment type="block" pos:line="5" pos:column="41">/* Local space for the header */</comment>
    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">struct<pos:position pos:line="6" pos:column="11"/></name> <name pos:line="6" pos:column="12">RFCNB_Pkt<pos:position pos:line="6" pos:column="21"/></name></name> <modifier pos:line="6" pos:column="22">*<pos:position pos:line="6" pos:column="23"/></modifier></type><name pos:line="6" pos:column="23">pkt_frag<pos:position pos:line="6" pos:column="31"/></name></decl>;<pos:position pos:line="6" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">more<pos:position pos:line="7" pos:column="13"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="15">this_time<pos:position pos:line="7" pos:column="24"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="26">offset<pos:position pos:line="7" pos:column="32"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="34">frag_len<pos:position pos:line="7" pos:column="42"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="44">this_len<pos:position pos:line="7" pos:column="52"/></name></decl>;<pos:position pos:line="7" pos:column="53"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">BOOL<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">seen_keep_alive<pos:position pos:line="8" pos:column="25"/></name> <init pos:line="8" pos:column="26">= <expr><name pos:line="8" pos:column="28">TRUE<pos:position pos:line="8" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="33"/></decl_stmt>

    <comment type="block" pos:line="10" pos:column="5">/* Read that header straight into the buffer */</comment>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">len<pos:position pos:line="12" pos:column="12"/></name> <operator pos:line="12" pos:column="13">&lt;<pos:position pos:line="12" pos:column="17"/></operator> <name pos:line="12" pos:column="15">RFCNB_Pkt_Hdr_Len<pos:position pos:line="12" pos:column="32"/></name></expr>)<pos:position pos:line="12" pos:column="33"/></condition><then pos:line="12" pos:column="33"> <block pos:line="12" pos:column="34">{	<comment type="block" pos:line="12" pos:column="41">/* What a bozo */</comment>

<cpp:ifdef pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">ifdef<pos:position pos:line="14" pos:column="7"/></cpp:directive> <name pos:line="14" pos:column="8">RFCNB_DEBUG<pos:position pos:line="14" pos:column="19"/></name></cpp:ifdef>
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">fprintf<pos:position pos:line="15" pos:column="16"/></name><argument_list pos:line="15" pos:column="16">(<argument><expr><name pos:line="15" pos:column="17">stderr<pos:position pos:line="15" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="25">"Trying to read less than a packet:"<pos:position pos:line="15" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="63"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">perror<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><literal type="string" pos:line="16" pos:column="16">""<pos:position pos:line="16" pos:column="18"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="20"/></expr_stmt>
<cpp:endif pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">endif<pos:position pos:line="17" pos:column="7"/></cpp:directive></cpp:endif>
        <expr_stmt><expr><name pos:line="18" pos:column="9">RFCNB_errno<pos:position pos:line="18" pos:column="20"/></name> <operator pos:line="18" pos:column="21">=<pos:position pos:line="18" pos:column="22"/></operator> <name pos:line="18" pos:column="23">RFCNBE_BadParam<pos:position pos:line="18" pos:column="38"/></name></expr>;<pos:position pos:line="18" pos:column="39"/></expr_stmt>
        <return pos:line="19" pos:column="9">return <expr><operator pos:line="19" pos:column="16">(<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="17">RFCNBE_Bad<pos:position pos:line="19" pos:column="27"/></name><operator pos:line="19" pos:column="27">)<pos:position pos:line="19" pos:column="28"/></operator></expr>;<pos:position pos:line="19" pos:column="29"/></return>

    }<pos:position pos:line="21" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="22" pos:column="5">/* We discard keep alives here ... */</comment>

    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><name pos:line="24" pos:column="9">RFCNB_Timeout<pos:position pos:line="24" pos:column="22"/></name> <operator pos:line="24" pos:column="23">&gt;<pos:position pos:line="24" pos:column="27"/></operator> <literal type="number" pos:line="24" pos:column="25">0<pos:position pos:line="24" pos:column="26"/></literal></expr>)<pos:position pos:line="24" pos:column="27"/></condition><then pos:line="24" pos:column="27">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="9">alarm<pos:position pos:line="25" pos:column="14"/></name><argument_list pos:line="25" pos:column="14">(<argument><expr><name pos:line="25" pos:column="15">RFCNB_Timeout<pos:position pos:line="25" pos:column="28"/></name></expr></argument>)<pos:position pos:line="25" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="30"/></expr_stmt></block></then></if>

    <while pos:line="27" pos:column="5">while <condition pos:line="27" pos:column="11">(<expr><name pos:line="27" pos:column="12">seen_keep_alive<pos:position pos:line="27" pos:column="27"/></name></expr>)<pos:position pos:line="27" pos:column="28"/></condition> <block pos:line="27" pos:column="29">{

        <if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><operator pos:line="29" pos:column="13">(<pos:position pos:line="29" pos:column="14"/></operator><name pos:line="29" pos:column="14">read_len<pos:position pos:line="29" pos:column="22"/></name> <operator pos:line="29" pos:column="23">=<pos:position pos:line="29" pos:column="24"/></operator> <call><name pos:line="29" pos:column="25">read<pos:position pos:line="29" pos:column="29"/></name><argument_list pos:line="29" pos:column="29">(<argument><expr><name><name pos:line="29" pos:column="30">con<pos:position pos:line="29" pos:column="33"/></name><operator pos:line="29" pos:column="33">-&gt;<pos:position pos:line="29" pos:column="38"/></operator><name pos:line="29" pos:column="35">fd<pos:position pos:line="29" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="39">hdr<pos:position pos:line="29" pos:column="42"/></name></expr></argument>, <argument><expr><sizeof pos:line="29" pos:column="44">sizeof<argument_list pos:line="29" pos:column="50">(<argument><expr><name pos:line="29" pos:column="51">hdr<pos:position pos:line="29" pos:column="54"/></name></expr></argument>)<pos:position pos:line="29" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="29" pos:column="56"/></argument_list></call><operator pos:line="29" pos:column="56">)<pos:position pos:line="29" pos:column="57"/></operator> <operator pos:line="29" pos:column="58">&lt;<pos:position pos:line="29" pos:column="62"/></operator> <literal type="number" pos:line="29" pos:column="60">0<pos:position pos:line="29" pos:column="61"/></literal></expr>)<pos:position pos:line="29" pos:column="62"/></condition><then pos:line="29" pos:column="62"> <block pos:line="29" pos:column="63">{		<comment type="block" pos:line="29" pos:column="73">/* Problems */</comment>
<cpp:ifdef pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">ifdef<pos:position pos:line="30" pos:column="7"/></cpp:directive> <name pos:line="30" pos:column="8">RFCNB_DEBUG<pos:position pos:line="30" pos:column="19"/></name></cpp:ifdef>
            <expr_stmt><expr><call><name pos:line="31" pos:column="13">fprintf<pos:position pos:line="31" pos:column="20"/></name><argument_list pos:line="31" pos:column="20">(<argument><expr><name pos:line="31" pos:column="21">stderr<pos:position pos:line="31" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="29">"Reading the packet, we got:"<pos:position pos:line="31" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="60"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="32" pos:column="13">perror<pos:position pos:line="32" pos:column="19"/></name><argument_list pos:line="32" pos:column="19">(<argument><expr><literal type="string" pos:line="32" pos:column="20">""<pos:position pos:line="32" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="24"/></expr_stmt>
<cpp:endif pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">endif<pos:position pos:line="33" pos:column="7"/></cpp:directive></cpp:endif>
            <if pos:line="34" pos:column="13">if <condition pos:line="34" pos:column="16">(<expr><name pos:line="34" pos:column="17">errno<pos:position pos:line="34" pos:column="22"/></name> <operator pos:line="34" pos:column="23">==<pos:position pos:line="34" pos:column="25"/></operator> <name pos:line="34" pos:column="26">EINTR<pos:position pos:line="34" pos:column="31"/></name></expr>)<pos:position pos:line="34" pos:column="32"/></condition><then pos:line="34" pos:column="32">
                <block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="17">RFCNB_errno<pos:position pos:line="35" pos:column="28"/></name> <operator pos:line="35" pos:column="29">=<pos:position pos:line="35" pos:column="30"/></operator> <name pos:line="35" pos:column="31">RFCNBE_Timeout<pos:position pos:line="35" pos:column="45"/></name></expr>;<pos:position pos:line="35" pos:column="46"/></expr_stmt></block></then>
            <else pos:line="36" pos:column="13">else
                <block type="pseudo"><expr_stmt><expr><name pos:line="37" pos:column="17">RFCNB_errno<pos:position pos:line="37" pos:column="28"/></name> <operator pos:line="37" pos:column="29">=<pos:position pos:line="37" pos:column="30"/></operator> <name pos:line="37" pos:column="31">RFCNBE_BadRead<pos:position pos:line="37" pos:column="45"/></name></expr>;<pos:position pos:line="37" pos:column="46"/></expr_stmt></block></else></if>
            <expr_stmt><expr><name pos:line="38" pos:column="13">RFCNB_saved_errno<pos:position pos:line="38" pos:column="30"/></name> <operator pos:line="38" pos:column="31">=<pos:position pos:line="38" pos:column="32"/></operator> <name pos:line="38" pos:column="33">errno<pos:position pos:line="38" pos:column="38"/></name></expr>;<pos:position pos:line="38" pos:column="39"/></expr_stmt>
            <return pos:line="39" pos:column="13">return <expr><operator pos:line="39" pos:column="20">(<pos:position pos:line="39" pos:column="21"/></operator><name pos:line="39" pos:column="21">RFCNBE_Bad<pos:position pos:line="39" pos:column="31"/></name><operator pos:line="39" pos:column="31">)<pos:position pos:line="39" pos:column="32"/></operator></expr>;<pos:position pos:line="39" pos:column="33"/></return>

        }<pos:position pos:line="41" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="42" pos:column="9">/* Now we check out what we got */</comment>

        <if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name pos:line="44" pos:column="13">read_len<pos:position pos:line="44" pos:column="21"/></name> <operator pos:line="44" pos:column="22">==<pos:position pos:line="44" pos:column="24"/></operator> <literal type="number" pos:line="44" pos:column="25">0<pos:position pos:line="44" pos:column="26"/></literal></expr>)<pos:position pos:line="44" pos:column="27"/></condition><then pos:line="44" pos:column="27"> <block pos:line="44" pos:column="28">{	<comment type="block" pos:line="44" pos:column="33">/* Connection closed, send back eof?  */</comment>

<cpp:ifdef pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">ifdef<pos:position pos:line="46" pos:column="7"/></cpp:directive> <name pos:line="46" pos:column="8">RFCNB_DEBUG<pos:position pos:line="46" pos:column="19"/></name></cpp:ifdef>
            <expr_stmt><expr><call><name pos:line="47" pos:column="13">fprintf<pos:position pos:line="47" pos:column="20"/></name><argument_list pos:line="47" pos:column="20">(<argument><expr><name pos:line="47" pos:column="21">stderr<pos:position pos:line="47" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="29">"Connection closed reading\n"<pos:position pos:line="47" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="60"/></expr_stmt>
<cpp:endif pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">endif<pos:position pos:line="48" pos:column="7"/></cpp:directive></cpp:endif>

            <if pos:line="50" pos:column="13">if <condition pos:line="50" pos:column="16">(<expr><name pos:line="50" pos:column="17">errno<pos:position pos:line="50" pos:column="22"/></name> <operator pos:line="50" pos:column="23">==<pos:position pos:line="50" pos:column="25"/></operator> <name pos:line="50" pos:column="26">EINTR<pos:position pos:line="50" pos:column="31"/></name></expr>)<pos:position pos:line="50" pos:column="32"/></condition><then pos:line="50" pos:column="32">
                <block type="pseudo"><expr_stmt><expr><name pos:line="51" pos:column="17">RFCNB_errno<pos:position pos:line="51" pos:column="28"/></name> <operator pos:line="51" pos:column="29">=<pos:position pos:line="51" pos:column="30"/></operator> <name pos:line="51" pos:column="31">RFCNBE_Timeout<pos:position pos:line="51" pos:column="45"/></name></expr>;<pos:position pos:line="51" pos:column="46"/></expr_stmt></block></then>
            <else pos:line="52" pos:column="13">else
                <block type="pseudo"><expr_stmt><expr><name pos:line="53" pos:column="17">RFCNB_errno<pos:position pos:line="53" pos:column="28"/></name> <operator pos:line="53" pos:column="29">=<pos:position pos:line="53" pos:column="30"/></operator> <name pos:line="53" pos:column="31">RFCNBE_ConGone<pos:position pos:line="53" pos:column="45"/></name></expr>;<pos:position pos:line="53" pos:column="46"/></expr_stmt></block></else></if>
            <expr_stmt><expr><name pos:line="54" pos:column="13">RFCNB_saved_errno<pos:position pos:line="54" pos:column="30"/></name> <operator pos:line="54" pos:column="31">=<pos:position pos:line="54" pos:column="32"/></operator> <name pos:line="54" pos:column="33">errno<pos:position pos:line="54" pos:column="38"/></name></expr>;<pos:position pos:line="54" pos:column="39"/></expr_stmt>
            <return pos:line="55" pos:column="13">return <expr><operator pos:line="55" pos:column="20">(<pos:position pos:line="55" pos:column="21"/></operator><name pos:line="55" pos:column="21">RFCNBE_Bad<pos:position pos:line="55" pos:column="31"/></name><operator pos:line="55" pos:column="31">)<pos:position pos:line="55" pos:column="32"/></operator></expr>;<pos:position pos:line="55" pos:column="33"/></return>

        }<pos:position pos:line="57" pos:column="10"/></block></then></if>
        <if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><call><name pos:line="58" pos:column="13">RFCNB_Pkt_Type<pos:position pos:line="58" pos:column="27"/></name><argument_list pos:line="58" pos:column="27">(<argument><expr><name pos:line="58" pos:column="28">hdr<pos:position pos:line="58" pos:column="31"/></name></expr></argument>)<pos:position pos:line="58" pos:column="32"/></argument_list></call> <operator pos:line="58" pos:column="33">==<pos:position pos:line="58" pos:column="35"/></operator> <name pos:line="58" pos:column="36">RFCNB_SESSION_KEEP_ALIVE<pos:position pos:line="58" pos:column="60"/></name></expr>)<pos:position pos:line="58" pos:column="61"/></condition><then pos:line="58" pos:column="61"> <block pos:line="58" pos:column="62">{

<cpp:ifdef pos:line="60" pos:column="1">#<cpp:directive pos:line="60" pos:column="2">ifdef<pos:position pos:line="60" pos:column="7"/></cpp:directive> <name pos:line="60" pos:column="8">RFCNB_DEBUG<pos:position pos:line="60" pos:column="19"/></name></cpp:ifdef>
            <expr_stmt><expr><call><name pos:line="61" pos:column="13">fprintf<pos:position pos:line="61" pos:column="20"/></name><argument_list pos:line="61" pos:column="20">(<argument><expr><name pos:line="61" pos:column="21">stderr<pos:position pos:line="61" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="29">"RFCNB KEEP ALIVE received\n"<pos:position pos:line="61" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="60"/></expr_stmt>
<cpp:endif pos:line="62" pos:column="1">#<cpp:directive pos:line="62" pos:column="2">endif<pos:position pos:line="62" pos:column="7"/></cpp:directive></cpp:endif>

        }<pos:position pos:line="64" pos:column="10"/></block></then> <else pos:line="64" pos:column="11">else <block pos:line="64" pos:column="16">{
            <expr_stmt><expr><name pos:line="65" pos:column="13">seen_keep_alive<pos:position pos:line="65" pos:column="28"/></name> <operator pos:line="65" pos:column="29">=<pos:position pos:line="65" pos:column="30"/></operator> <name pos:line="65" pos:column="31">FALSE<pos:position pos:line="65" pos:column="36"/></name></expr>;<pos:position pos:line="65" pos:column="37"/></expr_stmt>
        }<pos:position pos:line="66" pos:column="10"/></block></else></if>

    }<pos:position pos:line="68" pos:column="6"/></block></while>

    <comment type="block" pos:line="70" pos:column="5">/* What if we got less than or equal to a hdr size in bytes? */</comment>

    <if pos:line="72" pos:column="5">if <condition pos:line="72" pos:column="8">(<expr><name pos:line="72" pos:column="9">read_len<pos:position pos:line="72" pos:column="17"/></name> <operator pos:line="72" pos:column="18">&lt;<pos:position pos:line="72" pos:column="22"/></operator> <sizeof pos:line="72" pos:column="20">sizeof<argument_list pos:line="72" pos:column="26">(<argument><expr><name pos:line="72" pos:column="27">hdr<pos:position pos:line="72" pos:column="30"/></name></expr></argument>)<pos:position pos:line="72" pos:column="31"/></argument_list></sizeof></expr>)<pos:position pos:line="72" pos:column="32"/></condition><then pos:line="72" pos:column="32"> <block pos:line="72" pos:column="33">{	<comment type="block" pos:line="72" pos:column="41">/* We got a small packet */</comment>

        <comment type="block" pos:line="74" pos:column="9">/* Now we need to copy the hdr portion we got into the supplied packet */</comment>

        <expr_stmt><expr><call><name pos:line="76" pos:column="9">memcpy<pos:position pos:line="76" pos:column="15"/></name><argument_list pos:line="76" pos:column="15">(<argument><expr><name><name pos:line="76" pos:column="16">pkt<pos:position pos:line="76" pos:column="19"/></name><operator pos:line="76" pos:column="19">-&gt;<pos:position pos:line="76" pos:column="24"/></operator><name pos:line="76" pos:column="21">data<pos:position pos:line="76" pos:column="25"/></name></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="27">hdr<pos:position pos:line="76" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="32">read_len<pos:position pos:line="76" pos:column="40"/></name></expr></argument>)<pos:position pos:line="76" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="42"/></expr_stmt>	<comment type="block" pos:line="76" pos:column="49">/*Copy data */</comment>

<cpp:ifdef pos:line="78" pos:column="1">#<cpp:directive pos:line="78" pos:column="2">ifdef<pos:position pos:line="78" pos:column="7"/></cpp:directive> <name pos:line="78" pos:column="8">RFCNB_DEBUG<pos:position pos:line="78" pos:column="19"/></name></cpp:ifdef>
        <expr_stmt><expr><call><name pos:line="79" pos:column="9">RFCNB_Print_Pkt<pos:position pos:line="79" pos:column="24"/></name><argument_list pos:line="79" pos:column="24">(<argument><expr><name pos:line="79" pos:column="25">stderr<pos:position pos:line="79" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="79" pos:column="33">"rcvd"<pos:position pos:line="79" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="79" pos:column="41">pkt<pos:position pos:line="79" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="46">read_len<pos:position pos:line="79" pos:column="54"/></name></expr></argument>)<pos:position pos:line="79" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="56"/></expr_stmt>
<cpp:endif pos:line="80" pos:column="1">#<cpp:directive pos:line="80" pos:column="2">endif<pos:position pos:line="80" pos:column="7"/></cpp:directive></cpp:endif>

        <return pos:line="82" pos:column="9">return <expr><operator pos:line="82" pos:column="16">(<pos:position pos:line="82" pos:column="17"/></operator><name pos:line="82" pos:column="17">read_len<pos:position pos:line="82" pos:column="25"/></name><operator pos:line="82" pos:column="25">)<pos:position pos:line="82" pos:column="26"/></operator></expr>;<pos:position pos:line="82" pos:column="27"/></return>

    }<pos:position pos:line="84" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="85" pos:column="5">/* Now, if we got at least a hdr size, alloc space for rest, if we need it */</comment>

    <expr_stmt><expr><name pos:line="87" pos:column="5">pkt_len<pos:position pos:line="87" pos:column="12"/></name> <operator pos:line="87" pos:column="13">=<pos:position pos:line="87" pos:column="14"/></operator> <call><name pos:line="87" pos:column="15">RFCNB_Pkt_Len<pos:position pos:line="87" pos:column="28"/></name><argument_list pos:line="87" pos:column="28">(<argument><expr><name pos:line="87" pos:column="29">hdr<pos:position pos:line="87" pos:column="32"/></name></expr></argument>)<pos:position pos:line="87" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="34"/></expr_stmt>

<cpp:ifdef pos:line="89" pos:column="1">#<cpp:directive pos:line="89" pos:column="2">ifdef<pos:position pos:line="89" pos:column="7"/></cpp:directive> <name pos:line="89" pos:column="8">RFCNB_DEBUG<pos:position pos:line="89" pos:column="19"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="90" pos:column="5">fprintf<pos:position pos:line="90" pos:column="12"/></name><argument_list pos:line="90" pos:column="12">(<argument><expr><name pos:line="90" pos:column="13">stderr<pos:position pos:line="90" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="90" pos:column="21">"Reading Pkt: Length = %i\n"<pos:position pos:line="90" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="90" pos:column="51">pkt_len<pos:position pos:line="90" pos:column="58"/></name></expr></argument>)<pos:position pos:line="90" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="60"/></expr_stmt>
<cpp:endif pos:line="91" pos:column="1">#<cpp:directive pos:line="91" pos:column="2">endif<pos:position pos:line="91" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="93" pos:column="5">/* Now copy in the hdr */</comment>

    <expr_stmt><expr><call><name pos:line="95" pos:column="5">memcpy<pos:position pos:line="95" pos:column="11"/></name><argument_list pos:line="95" pos:column="11">(<argument><expr><name><name pos:line="95" pos:column="12">pkt<pos:position pos:line="95" pos:column="15"/></name><operator pos:line="95" pos:column="15">-&gt;<pos:position pos:line="95" pos:column="20"/></operator><name pos:line="95" pos:column="17">data<pos:position pos:line="95" pos:column="21"/></name></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="23">hdr<pos:position pos:line="95" pos:column="26"/></name></expr></argument>, <argument><expr><sizeof pos:line="95" pos:column="28">sizeof<argument_list pos:line="95" pos:column="34">(<argument><expr><name pos:line="95" pos:column="35">hdr<pos:position pos:line="95" pos:column="38"/></name></expr></argument>)<pos:position pos:line="95" pos:column="39"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="95" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="41"/></expr_stmt>

    <comment type="block" pos:line="97" pos:column="5">/* Get the rest of the packet ... first figure out how big our buf is? */</comment>
    <comment type="block" pos:line="98" pos:column="5">/* And make sure that we handle the fragments properly ... Sure should */</comment>
    <comment type="block" pos:line="99" pos:column="5">/* use an iovec ...                                                    */</comment>

    <if pos:line="101" pos:column="5">if <condition pos:line="101" pos:column="8">(<expr><name pos:line="101" pos:column="9">len<pos:position pos:line="101" pos:column="12"/></name> <operator pos:line="101" pos:column="13">&lt;<pos:position pos:line="101" pos:column="17"/></operator> <name pos:line="101" pos:column="15">pkt_len<pos:position pos:line="101" pos:column="22"/></name></expr>)<pos:position pos:line="101" pos:column="23"/></condition><then pos:line="101" pos:column="23">		<comment type="block" pos:line="101" pos:column="33">/* Only get as much as we have space for */</comment>
        <block type="pseudo"><expr_stmt><expr><name pos:line="102" pos:column="9">more<pos:position pos:line="102" pos:column="13"/></name> <operator pos:line="102" pos:column="14">=<pos:position pos:line="102" pos:column="15"/></operator> <name pos:line="102" pos:column="16">len<pos:position pos:line="102" pos:column="19"/></name> <operator pos:line="102" pos:column="20">-<pos:position pos:line="102" pos:column="21"/></operator> <name pos:line="102" pos:column="22">RFCNB_Pkt_Hdr_Len<pos:position pos:line="102" pos:column="39"/></name></expr>;<pos:position pos:line="102" pos:column="40"/></expr_stmt></block></then>
    <else pos:line="103" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="104" pos:column="9">more<pos:position pos:line="104" pos:column="13"/></name> <operator pos:line="104" pos:column="14">=<pos:position pos:line="104" pos:column="15"/></operator> <name pos:line="104" pos:column="16">pkt_len<pos:position pos:line="104" pos:column="23"/></name></expr>;<pos:position pos:line="104" pos:column="24"/></expr_stmt></block></else></if>

    <expr_stmt><expr><name pos:line="106" pos:column="5">this_time<pos:position pos:line="106" pos:column="14"/></name> <operator pos:line="106" pos:column="15">=<pos:position pos:line="106" pos:column="16"/></operator> <literal type="number" pos:line="106" pos:column="17">0<pos:position pos:line="106" pos:column="18"/></literal></expr>;<pos:position pos:line="106" pos:column="19"/></expr_stmt>

    <comment type="block" pos:line="108" pos:column="5">/* We read for each fragment ... */</comment>

    <if pos:line="110" pos:column="5">if <condition pos:line="110" pos:column="8">(<expr><name><name pos:line="110" pos:column="9">pkt<pos:position pos:line="110" pos:column="12"/></name><operator pos:line="110" pos:column="12">-&gt;<pos:position pos:line="110" pos:column="17"/></operator><name pos:line="110" pos:column="14">len<pos:position pos:line="110" pos:column="17"/></name></name> <operator pos:line="110" pos:column="18">==<pos:position pos:line="110" pos:column="20"/></operator> <name pos:line="110" pos:column="21">read_len<pos:position pos:line="110" pos:column="29"/></name></expr>)<pos:position pos:line="110" pos:column="30"/></condition><then pos:line="110" pos:column="30"> <block pos:line="110" pos:column="31">{	<comment type="block" pos:line="110" pos:column="33">/* If this frag was exact size */</comment>
        <expr_stmt><expr><name pos:line="111" pos:column="9">pkt_frag<pos:position pos:line="111" pos:column="17"/></name> <operator pos:line="111" pos:column="18">=<pos:position pos:line="111" pos:column="19"/></operator> <name><name pos:line="111" pos:column="20">pkt<pos:position pos:line="111" pos:column="23"/></name><operator pos:line="111" pos:column="23">-&gt;<pos:position pos:line="111" pos:column="28"/></operator><name pos:line="111" pos:column="25">next<pos:position pos:line="111" pos:column="29"/></name></name></expr>;<pos:position pos:line="111" pos:column="30"/></expr_stmt>	<comment type="block" pos:line="111" pos:column="33">/* Stick next lot in next frag */</comment>
        <expr_stmt><expr><name pos:line="112" pos:column="9">offset<pos:position pos:line="112" pos:column="15"/></name> <operator pos:line="112" pos:column="16">=<pos:position pos:line="112" pos:column="17"/></operator> <literal type="number" pos:line="112" pos:column="18">0<pos:position pos:line="112" pos:column="19"/></literal></expr>;<pos:position pos:line="112" pos:column="20"/></expr_stmt>		<comment type="block" pos:line="112" pos:column="33">/* then we start at 0 in next  */</comment>
    }<pos:position pos:line="113" pos:column="6"/></block></then> <else pos:line="113" pos:column="7">else <block pos:line="113" pos:column="12">{
        <expr_stmt><expr><name pos:line="114" pos:column="9">pkt_frag<pos:position pos:line="114" pos:column="17"/></name> <operator pos:line="114" pos:column="18">=<pos:position pos:line="114" pos:column="19"/></operator> <name pos:line="114" pos:column="20">pkt<pos:position pos:line="114" pos:column="23"/></name></expr>;<pos:position pos:line="114" pos:column="24"/></expr_stmt>		<comment type="block" pos:line="114" pos:column="33">/* Otherwise use rest of this frag */</comment>
        <expr_stmt><expr><name pos:line="115" pos:column="9">offset<pos:position pos:line="115" pos:column="15"/></name> <operator pos:line="115" pos:column="16">=<pos:position pos:line="115" pos:column="17"/></operator> <name pos:line="115" pos:column="18">RFCNB_Pkt_Hdr_Len<pos:position pos:line="115" pos:column="35"/></name></expr>;<pos:position pos:line="115" pos:column="36"/></expr_stmt>	<comment type="block" pos:line="115" pos:column="41">/* Otherwise skip the header       */</comment>
    }<pos:position pos:line="116" pos:column="6"/></block></else></if>

    <expr_stmt><expr><name pos:line="118" pos:column="5">frag_len<pos:position pos:line="118" pos:column="13"/></name> <operator pos:line="118" pos:column="14">=<pos:position pos:line="118" pos:column="15"/></operator> <name><name pos:line="118" pos:column="16">pkt_frag<pos:position pos:line="118" pos:column="24"/></name><operator pos:line="118" pos:column="24">-&gt;<pos:position pos:line="118" pos:column="29"/></operator><name pos:line="118" pos:column="26">len<pos:position pos:line="118" pos:column="29"/></name></name></expr>;<pos:position pos:line="118" pos:column="30"/></expr_stmt>

    <if pos:line="120" pos:column="5">if <condition pos:line="120" pos:column="8">(<expr><name pos:line="120" pos:column="9">more<pos:position pos:line="120" pos:column="13"/></name> <operator pos:line="120" pos:column="14">&lt;=<pos:position pos:line="120" pos:column="19"/></operator> <name pos:line="120" pos:column="17">frag_len<pos:position pos:line="120" pos:column="25"/></name></expr>)<pos:position pos:line="120" pos:column="26"/></condition><then pos:line="120" pos:column="26">	<comment type="block" pos:line="120" pos:column="33">/* If len left to get less than frag space */</comment>
        <block type="pseudo"><expr_stmt><expr><name pos:line="121" pos:column="9">this_len<pos:position pos:line="121" pos:column="17"/></name> <operator pos:line="121" pos:column="18">=<pos:position pos:line="121" pos:column="19"/></operator> <name pos:line="121" pos:column="20">more<pos:position pos:line="121" pos:column="24"/></name></expr>;<pos:position pos:line="121" pos:column="25"/></expr_stmt></block></then>	<comment type="block" pos:line="121" pos:column="33">/* Get the rest ...                        */</comment>
    <else pos:line="122" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="123" pos:column="9">this_len<pos:position pos:line="123" pos:column="17"/></name> <operator pos:line="123" pos:column="18">=<pos:position pos:line="123" pos:column="19"/></operator> <name pos:line="123" pos:column="20">frag_len<pos:position pos:line="123" pos:column="28"/></name> <operator pos:line="123" pos:column="29">-<pos:position pos:line="123" pos:column="30"/></operator> <name pos:line="123" pos:column="31">offset<pos:position pos:line="123" pos:column="37"/></name></expr>;<pos:position pos:line="123" pos:column="38"/></expr_stmt></block></else></if>

    <while pos:line="125" pos:column="5">while <condition pos:line="125" pos:column="11">(<expr><name pos:line="125" pos:column="12">more<pos:position pos:line="125" pos:column="16"/></name> <operator pos:line="125" pos:column="17">&gt;<pos:position pos:line="125" pos:column="21"/></operator> <literal type="number" pos:line="125" pos:column="19">0<pos:position pos:line="125" pos:column="20"/></literal></expr>)<pos:position pos:line="125" pos:column="21"/></condition> <block pos:line="125" pos:column="22">{

        <if pos:line="127" pos:column="9">if <condition pos:line="127" pos:column="12">(<expr><operator pos:line="127" pos:column="13">(<pos:position pos:line="127" pos:column="14"/></operator><name pos:line="127" pos:column="14">this_time<pos:position pos:line="127" pos:column="23"/></name> <operator pos:line="127" pos:column="24">=<pos:position pos:line="127" pos:column="25"/></operator> <call><name pos:line="127" pos:column="26">read<pos:position pos:line="127" pos:column="30"/></name><argument_list pos:line="127" pos:column="30">(<argument><expr><name><name pos:line="127" pos:column="31">con<pos:position pos:line="127" pos:column="34"/></name><operator pos:line="127" pos:column="34">-&gt;<pos:position pos:line="127" pos:column="39"/></operator><name pos:line="127" pos:column="36">fd<pos:position pos:line="127" pos:column="38"/></name></name></expr></argument>, <argument><expr><operator pos:line="127" pos:column="40">(<pos:position pos:line="127" pos:column="41"/></operator><name><name pos:line="127" pos:column="41">pkt_frag<pos:position pos:line="127" pos:column="49"/></name><operator pos:line="127" pos:column="49">-&gt;<pos:position pos:line="127" pos:column="54"/></operator><name pos:line="127" pos:column="51">data<pos:position pos:line="127" pos:column="55"/></name></name><operator pos:line="127" pos:column="55">)<pos:position pos:line="127" pos:column="56"/></operator> <operator pos:line="127" pos:column="57">+<pos:position pos:line="127" pos:column="58"/></operator> <name pos:line="127" pos:column="59">offset<pos:position pos:line="127" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="127" pos:column="67">this_len<pos:position pos:line="127" pos:column="75"/></name></expr></argument>)<pos:position pos:line="127" pos:column="76"/></argument_list></call><operator pos:line="127" pos:column="76">)<pos:position pos:line="127" pos:column="77"/></operator> <operator pos:line="127" pos:column="78">&lt;=<pos:position pos:line="127" pos:column="83"/></operator> <literal type="number" pos:line="127" pos:column="81">0<pos:position pos:line="127" pos:column="82"/></literal></expr>)<pos:position pos:line="127" pos:column="83"/></condition><then pos:line="127" pos:column="83"> <block pos:line="127" pos:column="84">{	<comment type="block" pos:line="127" pos:column="89">/* Problems */</comment>

            <if pos:line="129" pos:column="13">if <condition pos:line="129" pos:column="16">(<expr><name pos:line="129" pos:column="17">errno<pos:position pos:line="129" pos:column="22"/></name> <operator pos:line="129" pos:column="23">==<pos:position pos:line="129" pos:column="25"/></operator> <name pos:line="129" pos:column="26">EINTR<pos:position pos:line="129" pos:column="31"/></name></expr>)<pos:position pos:line="129" pos:column="32"/></condition><then pos:line="129" pos:column="32"> <block pos:line="129" pos:column="33">{

                <expr_stmt><expr><name pos:line="131" pos:column="17">RFCNB_errno<pos:position pos:line="131" pos:column="28"/></name> <operator pos:line="131" pos:column="29">=<pos:position pos:line="131" pos:column="30"/></operator> <name pos:line="131" pos:column="31">RFCNB_Timeout<pos:position pos:line="131" pos:column="44"/></name></expr>;<pos:position pos:line="131" pos:column="45"/></expr_stmt>

            }<pos:position pos:line="133" pos:column="14"/></block></then> <else pos:line="133" pos:column="15">else <block pos:line="133" pos:column="20">{
                <if pos:line="134" pos:column="17">if <condition pos:line="134" pos:column="20">(<expr><name pos:line="134" pos:column="21">this_time<pos:position pos:line="134" pos:column="30"/></name> <operator pos:line="134" pos:column="31">&lt;<pos:position pos:line="134" pos:column="35"/></operator> <literal type="number" pos:line="134" pos:column="33">0<pos:position pos:line="134" pos:column="34"/></literal></expr>)<pos:position pos:line="134" pos:column="35"/></condition><then pos:line="134" pos:column="35">
                    <block type="pseudo"><expr_stmt><expr><name pos:line="135" pos:column="21">RFCNB_errno<pos:position pos:line="135" pos:column="32"/></name> <operator pos:line="135" pos:column="33">=<pos:position pos:line="135" pos:column="34"/></operator> <name pos:line="135" pos:column="35">RFCNBE_BadRead<pos:position pos:line="135" pos:column="49"/></name></expr>;<pos:position pos:line="135" pos:column="50"/></expr_stmt></block></then>
                <else pos:line="136" pos:column="17">else
                    <block type="pseudo"><expr_stmt><expr><name pos:line="137" pos:column="21">RFCNB_errno<pos:position pos:line="137" pos:column="32"/></name> <operator pos:line="137" pos:column="33">=<pos:position pos:line="137" pos:column="34"/></operator> <name pos:line="137" pos:column="35">RFCNBE_ConGone<pos:position pos:line="137" pos:column="49"/></name></expr>;<pos:position pos:line="137" pos:column="50"/></expr_stmt></block></else></if>
            }<pos:position pos:line="138" pos:column="14"/></block></else></if>

            <expr_stmt><expr><name pos:line="140" pos:column="13">RFCNB_saved_errno<pos:position pos:line="140" pos:column="30"/></name> <operator pos:line="140" pos:column="31">=<pos:position pos:line="140" pos:column="32"/></operator> <name pos:line="140" pos:column="33">errno<pos:position pos:line="140" pos:column="38"/></name></expr>;<pos:position pos:line="140" pos:column="39"/></expr_stmt>
            <return pos:line="141" pos:column="13">return <expr><operator pos:line="141" pos:column="20">(<pos:position pos:line="141" pos:column="21"/></operator><name pos:line="141" pos:column="21">RFCNBE_Bad<pos:position pos:line="141" pos:column="31"/></name><operator pos:line="141" pos:column="31">)<pos:position pos:line="141" pos:column="32"/></operator></expr>;<pos:position pos:line="141" pos:column="33"/></return>

        }<pos:position pos:line="143" pos:column="10"/></block></then></if>
<cpp:ifdef pos:line="144" pos:column="1">#<cpp:directive pos:line="144" pos:column="2">ifdef<pos:position pos:line="144" pos:column="7"/></cpp:directive> <name pos:line="144" pos:column="8">RFCNB_DEBUG<pos:position pos:line="144" pos:column="19"/></name></cpp:ifdef>
        <expr_stmt><expr><call><name pos:line="145" pos:column="9">fprintf<pos:position pos:line="145" pos:column="16"/></name><argument_list pos:line="145" pos:column="16">(<argument><expr><name pos:line="145" pos:column="17">stderr<pos:position pos:line="145" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="145" pos:column="25">"Frag_Len = %i, this_time = %i, this_len = %i, more = %i\n"<pos:position pos:line="145" pos:column="84"/></literal></expr></argument>, <argument><expr><name pos:line="145" pos:column="86">frag_len<pos:position pos:line="145" pos:column="94"/></name></expr></argument>,
                <argument><expr><name pos:line="146" pos:column="17">this_time<pos:position pos:line="146" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="146" pos:column="28">this_len<pos:position pos:line="146" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="146" pos:column="38">more<pos:position pos:line="146" pos:column="42"/></name></expr></argument>)<pos:position pos:line="146" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="44"/></expr_stmt>
<cpp:endif pos:line="147" pos:column="1">#<cpp:directive pos:line="147" pos:column="2">endif<pos:position pos:line="147" pos:column="7"/></cpp:directive></cpp:endif>

        <expr_stmt><expr><name pos:line="149" pos:column="9">read_len<pos:position pos:line="149" pos:column="17"/></name> <operator pos:line="149" pos:column="18">=<pos:position pos:line="149" pos:column="19"/></operator> <name pos:line="149" pos:column="20">read_len<pos:position pos:line="149" pos:column="28"/></name> <operator pos:line="149" pos:column="29">+<pos:position pos:line="149" pos:column="30"/></operator> <name pos:line="149" pos:column="31">this_time<pos:position pos:line="149" pos:column="40"/></name></expr>;<pos:position pos:line="149" pos:column="41"/></expr_stmt>	<comment type="block" pos:line="149" pos:column="49">/* How much have we read ... */</comment>

        <comment type="block" pos:line="151" pos:column="9">/* Now set up the next part */</comment>

        <if pos:line="153" pos:column="9">if <condition pos:line="153" pos:column="12">(<expr><name><name pos:line="153" pos:column="13">pkt_frag<pos:position pos:line="153" pos:column="21"/></name><operator pos:line="153" pos:column="21">-&gt;<pos:position pos:line="153" pos:column="26"/></operator><name pos:line="153" pos:column="23">next<pos:position pos:line="153" pos:column="27"/></name></name> <operator pos:line="153" pos:column="28">==<pos:position pos:line="153" pos:column="30"/></operator> <name pos:line="153" pos:column="31">NULL<pos:position pos:line="153" pos:column="35"/></name></expr>)<pos:position pos:line="153" pos:column="36"/></condition><then pos:line="153" pos:column="36">
            <block type="pseudo"><break pos:line="154" pos:column="13">break;<pos:position pos:line="154" pos:column="19"/></break></block></then></if>		<comment type="block" pos:line="154" pos:column="33">/* That's it here */</comment>

        <expr_stmt><expr><name pos:line="156" pos:column="9">pkt_frag<pos:position pos:line="156" pos:column="17"/></name> <operator pos:line="156" pos:column="18">=<pos:position pos:line="156" pos:column="19"/></operator> <name><name pos:line="156" pos:column="20">pkt_frag<pos:position pos:line="156" pos:column="28"/></name><operator pos:line="156" pos:column="28">-&gt;<pos:position pos:line="156" pos:column="33"/></operator><name pos:line="156" pos:column="30">next<pos:position pos:line="156" pos:column="34"/></name></name></expr>;<pos:position pos:line="156" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><name pos:line="157" pos:column="9">this_len<pos:position pos:line="157" pos:column="17"/></name> <operator pos:line="157" pos:column="18">=<pos:position pos:line="157" pos:column="19"/></operator> <name><name pos:line="157" pos:column="20">pkt_frag<pos:position pos:line="157" pos:column="28"/></name><operator pos:line="157" pos:column="28">-&gt;<pos:position pos:line="157" pos:column="33"/></operator><name pos:line="157" pos:column="30">len<pos:position pos:line="157" pos:column="33"/></name></name></expr>;<pos:position pos:line="157" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><name pos:line="158" pos:column="9">offset<pos:position pos:line="158" pos:column="15"/></name> <operator pos:line="158" pos:column="16">=<pos:position pos:line="158" pos:column="17"/></operator> <literal type="number" pos:line="158" pos:column="18">0<pos:position pos:line="158" pos:column="19"/></literal></expr>;<pos:position pos:line="158" pos:column="20"/></expr_stmt>

        <expr_stmt><expr><name pos:line="160" pos:column="9">more<pos:position pos:line="160" pos:column="13"/></name> <operator pos:line="160" pos:column="14">=<pos:position pos:line="160" pos:column="15"/></operator> <name pos:line="160" pos:column="16">more<pos:position pos:line="160" pos:column="20"/></name> <operator pos:line="160" pos:column="21">-<pos:position pos:line="160" pos:column="22"/></operator> <name pos:line="160" pos:column="23">this_time<pos:position pos:line="160" pos:column="32"/></name></expr>;<pos:position pos:line="160" pos:column="33"/></expr_stmt>

    }<pos:position pos:line="162" pos:column="6"/></block></while>

<cpp:ifdef pos:line="164" pos:column="1">#<cpp:directive pos:line="164" pos:column="2">ifdef<pos:position pos:line="164" pos:column="7"/></cpp:directive> <name pos:line="164" pos:column="8">RFCNB_DEBUG<pos:position pos:line="164" pos:column="19"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="165" pos:column="5">fprintf<pos:position pos:line="165" pos:column="12"/></name><argument_list pos:line="165" pos:column="12">(<argument><expr><name pos:line="165" pos:column="13">stderr<pos:position pos:line="165" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="165" pos:column="21">"Pkt Len = %i, read_len = %i\n"<pos:position pos:line="165" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="165" pos:column="54">pkt_len<pos:position pos:line="165" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="165" pos:column="63">read_len<pos:position pos:line="165" pos:column="71"/></name></expr></argument>)<pos:position pos:line="165" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="165" pos:column="73"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="166" pos:column="5">RFCNB_Print_Pkt<pos:position pos:line="166" pos:column="20"/></name><argument_list pos:line="166" pos:column="20">(<argument><expr><name pos:line="166" pos:column="21">stderr<pos:position pos:line="166" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="166" pos:column="29">"rcvd"<pos:position pos:line="166" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="166" pos:column="37">pkt<pos:position pos:line="166" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="166" pos:column="42">read_len<pos:position pos:line="166" pos:column="50"/></name> <operator pos:line="166" pos:column="51">+<pos:position pos:line="166" pos:column="52"/></operator> <sizeof pos:line="166" pos:column="53">sizeof<argument_list pos:line="166" pos:column="59">(<argument><expr><name pos:line="166" pos:column="60">hdr<pos:position pos:line="166" pos:column="63"/></name></expr></argument>)<pos:position pos:line="166" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="166" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="66"/></expr_stmt>
<cpp:endif pos:line="167" pos:column="1">#<cpp:directive pos:line="167" pos:column="2">endif<pos:position pos:line="167" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="169" pos:column="5">if <condition pos:line="169" pos:column="8">(<expr><name pos:line="169" pos:column="9">read_len<pos:position pos:line="169" pos:column="17"/></name> <operator pos:line="169" pos:column="18">&lt;<pos:position pos:line="169" pos:column="22"/></operator> <operator pos:line="169" pos:column="20">(<pos:position pos:line="169" pos:column="21"/></operator><name pos:line="169" pos:column="21">pkt_len<pos:position pos:line="169" pos:column="28"/></name> <operator pos:line="169" pos:column="29">+<pos:position pos:line="169" pos:column="30"/></operator> <sizeof pos:line="169" pos:column="31">sizeof<argument_list pos:line="169" pos:column="37">(<argument><expr><name pos:line="169" pos:column="38">hdr<pos:position pos:line="169" pos:column="41"/></name></expr></argument>)<pos:position pos:line="169" pos:column="42"/></argument_list></sizeof><operator pos:line="169" pos:column="42">)<pos:position pos:line="169" pos:column="43"/></operator></expr>)<pos:position pos:line="169" pos:column="44"/></condition><then pos:line="169" pos:column="44"> <block pos:line="169" pos:column="45">{	<comment type="block" pos:line="169" pos:column="49">/* Discard the rest */</comment>

        <return pos:line="171" pos:column="9">return <expr><operator pos:line="171" pos:column="16">(<pos:position pos:line="171" pos:column="17"/></operator><call><name pos:line="171" pos:column="17">RFCNB_Discard_Rest<pos:position pos:line="171" pos:column="35"/></name><argument_list pos:line="171" pos:column="35">(<argument><expr><name pos:line="171" pos:column="36">con<pos:position pos:line="171" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="171" pos:column="41">(<pos:position pos:line="171" pos:column="42"/></operator><name pos:line="171" pos:column="42">pkt_len<pos:position pos:line="171" pos:column="49"/></name> <operator pos:line="171" pos:column="50">+<pos:position pos:line="171" pos:column="51"/></operator> <sizeof pos:line="171" pos:column="52">sizeof<argument_list pos:line="171" pos:column="58">(<argument><expr><name pos:line="171" pos:column="59">hdr<pos:position pos:line="171" pos:column="62"/></name></expr></argument>)<pos:position pos:line="171" pos:column="63"/></argument_list></sizeof><operator pos:line="171" pos:column="63">)<pos:position pos:line="171" pos:column="64"/></operator> <operator pos:line="171" pos:column="65">-<pos:position pos:line="171" pos:column="66"/></operator> <name pos:line="171" pos:column="67">read_len<pos:position pos:line="171" pos:column="75"/></name></expr></argument>)<pos:position pos:line="171" pos:column="76"/></argument_list></call><operator pos:line="171" pos:column="76">)<pos:position pos:line="171" pos:column="77"/></operator></expr>;<pos:position pos:line="171" pos:column="78"/></return>

    }<pos:position pos:line="173" pos:column="6"/></block></then></if>
    <if pos:line="174" pos:column="5">if <condition pos:line="174" pos:column="8">(<expr><name pos:line="174" pos:column="9">RFCNB_Timeout<pos:position pos:line="174" pos:column="22"/></name> <operator pos:line="174" pos:column="23">&gt;<pos:position pos:line="174" pos:column="27"/></operator> <literal type="number" pos:line="174" pos:column="25">0<pos:position pos:line="174" pos:column="26"/></literal></expr>)<pos:position pos:line="174" pos:column="27"/></condition><then pos:line="174" pos:column="27">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="175" pos:column="9">alarm<pos:position pos:line="175" pos:column="14"/></name><argument_list pos:line="175" pos:column="14">(<argument><expr><literal type="number" pos:line="175" pos:column="15">0<pos:position pos:line="175" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="175" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="175" pos:column="18"/></expr_stmt></block></then></if>		<comment type="block" pos:line="175" pos:column="33">/* Reset that sucker */</comment>

    <return pos:line="177" pos:column="5">return <expr><operator pos:line="177" pos:column="12">(<pos:position pos:line="177" pos:column="13"/></operator><name pos:line="177" pos:column="13">read_len<pos:position pos:line="177" pos:column="21"/></name> <operator pos:line="177" pos:column="22">+<pos:position pos:line="177" pos:column="23"/></operator> <sizeof pos:line="177" pos:column="24">sizeof<argument_list pos:line="177" pos:column="30">(<argument><expr><name pos:line="177" pos:column="31">RFCNB_Hdr<pos:position pos:line="177" pos:column="40"/></name></expr></argument>)<pos:position pos:line="177" pos:column="41"/></argument_list></sizeof><operator pos:line="177" pos:column="41">)<pos:position pos:line="177" pos:column="42"/></operator></expr>;<pos:position pos:line="177" pos:column="43"/></return>
}<pos:position pos:line="178" pos:column="2"/></block></function></unit>
