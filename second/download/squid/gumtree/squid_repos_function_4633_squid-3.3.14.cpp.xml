<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4633_squid-3.3.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">compileOptimisedREs<pos:position pos:line="2" pos:column="20"/></name><parameter_list pos:line="2" pos:column="20">(<parameter><decl><type><name pos:line="2" pos:column="21">RegexList<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier><modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type><name pos:line="2" pos:column="33">curlist<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="42">wordlist<pos:position pos:line="2" pos:column="50"/></name> <modifier pos:line="2" pos:column="51">*<pos:position pos:line="2" pos:column="52"/></modifier></type> <name pos:line="2" pos:column="53">wl<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="56"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">RegexList<pos:position pos:line="4" pos:column="14"/></name> <modifier pos:line="4" pos:column="15">*<pos:position pos:line="4" pos:column="16"/></modifier><modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">Tail<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">RegexList<pos:position pos:line="5" pos:column="14"/></name> <modifier pos:line="5" pos:column="15">*<pos:position pos:line="5" pos:column="16"/></modifier></type><name pos:line="5" pos:column="16">newlist<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">RegexList<pos:position pos:line="6" pos:column="14"/></name> <modifier pos:line="6" pos:column="15">*<pos:position pos:line="6" pos:column="16"/></modifier><modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type><name pos:line="6" pos:column="17">newlistp<pos:position pos:line="6" pos:column="25"/></name></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">numREs<pos:position pos:line="7" pos:column="15"/></name> <init pos:line="7" pos:column="16">= <expr><literal type="number" pos:line="7" pos:column="18">0<pos:position pos:line="7" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">flags<pos:position pos:line="8" pos:column="14"/></name> <init pos:line="8" pos:column="15">= <expr><name pos:line="8" pos:column="17">REG_EXTENDED<pos:position pos:line="8" pos:column="29"/></name> <operator pos:line="8" pos:column="30">|<pos:position pos:line="8" pos:column="31"/></operator> <name pos:line="8" pos:column="32">REG_NOSUB<pos:position pos:line="8" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="42"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">largeREindex<pos:position pos:line="9" pos:column="21"/></name> <init pos:line="9" pos:column="22">= <expr><literal type="number" pos:line="9" pos:column="24">0<pos:position pos:line="9" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">char<pos:position pos:line="10" pos:column="9"/></name></type> <name><name pos:line="10" pos:column="10">largeRE<pos:position pos:line="10" pos:column="17"/></name><index pos:line="10" pos:column="17">[<expr><name pos:line="10" pos:column="18">BUFSIZ<pos:position pos:line="10" pos:column="24"/></name></expr>]<pos:position pos:line="10" pos:column="25"/></index></name></decl>;<pos:position pos:line="10" pos:column="26"/></decl_stmt>

    <expr_stmt><expr><name pos:line="12" pos:column="5">newlist<pos:position pos:line="12" pos:column="12"/></name> <operator pos:line="12" pos:column="13">=<pos:position pos:line="12" pos:column="14"/></operator> <name pos:line="12" pos:column="15">NULL<pos:position pos:line="12" pos:column="19"/></name></expr>;<pos:position pos:line="12" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name pos:line="13" pos:column="5">newlistp<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">=<pos:position pos:line="13" pos:column="15"/></operator> <operator pos:line="13" pos:column="16">&amp;<pos:position pos:line="13" pos:column="21"/></operator><name pos:line="13" pos:column="17">newlist<pos:position pos:line="13" pos:column="24"/></name></expr>;<pos:position pos:line="13" pos:column="25"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="15" pos:column="5">largeRE<pos:position pos:line="15" pos:column="12"/></name><index pos:line="15" pos:column="12">[<expr><literal type="number" pos:line="15" pos:column="13">0<pos:position pos:line="15" pos:column="14"/></literal></expr>]<pos:position pos:line="15" pos:column="15"/></index></name> <operator pos:line="15" pos:column="16">=<pos:position pos:line="15" pos:column="17"/></operator> <literal type="char" pos:line="15" pos:column="18">'\0'<pos:position pos:line="15" pos:column="22"/></literal></expr>;<pos:position pos:line="15" pos:column="23"/></expr_stmt>

    <while pos:line="17" pos:column="5">while <condition pos:line="17" pos:column="11">(<expr><name pos:line="17" pos:column="12">wl<pos:position pos:line="17" pos:column="14"/></name> <operator pos:line="17" pos:column="15">!=<pos:position pos:line="17" pos:column="17"/></operator> <name pos:line="17" pos:column="18">NULL<pos:position pos:line="17" pos:column="22"/></name></expr>)<pos:position pos:line="17" pos:column="23"/></condition> <block pos:line="17" pos:column="24">{
        <decl_stmt><decl><type><name pos:line="18" pos:column="9">int<pos:position pos:line="18" pos:column="12"/></name></type> <name pos:line="18" pos:column="13">RElen<pos:position pos:line="18" pos:column="18"/></name></decl>;<pos:position pos:line="18" pos:column="19"/></decl_stmt>
        <expr_stmt><expr><name pos:line="19" pos:column="9">RElen<pos:position pos:line="19" pos:column="14"/></name> <operator pos:line="19" pos:column="15">=<pos:position pos:line="19" pos:column="16"/></operator> <call><name pos:line="19" pos:column="17">strlen<pos:position pos:line="19" pos:column="23"/></name><argument_list pos:line="19" pos:column="23">( <argument><expr><name><name pos:line="19" pos:column="25">wl<pos:position pos:line="19" pos:column="27"/></name><operator pos:line="19" pos:column="27">-&gt;<pos:position pos:line="19" pos:column="32"/></operator><name pos:line="19" pos:column="29">key<pos:position pos:line="19" pos:column="32"/></name></name></expr></argument> )<pos:position pos:line="19" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="35"/></expr_stmt>

        <if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><call><name pos:line="21" pos:column="13">strcmp<pos:position pos:line="21" pos:column="19"/></name><argument_list pos:line="21" pos:column="19">(<argument><expr><name><name pos:line="21" pos:column="20">wl<pos:position pos:line="21" pos:column="22"/></name><operator pos:line="21" pos:column="22">-&gt;<pos:position pos:line="21" pos:column="27"/></operator><name pos:line="21" pos:column="24">key<pos:position pos:line="21" pos:column="27"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="29">"-i"<pos:position pos:line="21" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="34"/></argument_list></call> <operator pos:line="21" pos:column="35">==<pos:position pos:line="21" pos:column="37"/></operator> <literal type="number" pos:line="21" pos:column="38">0<pos:position pos:line="21" pos:column="39"/></literal></expr>)<pos:position pos:line="21" pos:column="40"/></condition><then pos:line="21" pos:column="40"> <block pos:line="21" pos:column="41">{
            <if pos:line="22" pos:column="13">if <condition pos:line="22" pos:column="16">(<expr><name pos:line="22" pos:column="17">flags<pos:position pos:line="22" pos:column="22"/></name> <operator pos:line="22" pos:column="23">&amp;<pos:position pos:line="22" pos:column="28"/></operator> <name pos:line="22" pos:column="25">REG_ICASE<pos:position pos:line="22" pos:column="34"/></name></expr>)<pos:position pos:line="22" pos:column="35"/></condition><then pos:line="22" pos:column="35"> <block pos:line="22" pos:column="36">{
                <comment type="block" pos:line="23" pos:column="17">/* optimisation of  -i ... -i */</comment>
                <expr_stmt><expr><call><name pos:line="24" pos:column="17">debugs<pos:position pos:line="24" pos:column="23"/></name><argument_list pos:line="24" pos:column="23">(<argument><expr><literal type="number" pos:line="24" pos:column="24">28<pos:position pos:line="24" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="28">2<pos:position pos:line="24" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="31">"compileOptimisedREs: optimisation of -i ... -i"<pos:position pos:line="24" pos:column="79"/></literal></expr></argument> )<pos:position pos:line="24" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="82"/></expr_stmt>
            }<pos:position pos:line="25" pos:column="14"/></block></then> <else pos:line="25" pos:column="15">else <block pos:line="25" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="26" pos:column="17">debugs<pos:position pos:line="26" pos:column="23"/></name><argument_list pos:line="26" pos:column="23">(<argument><expr><literal type="number" pos:line="26" pos:column="24">28<pos:position pos:line="26" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="28">2<pos:position pos:line="26" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="31">"compileOptimisedREs: -i"<pos:position pos:line="26" pos:column="56"/></literal></expr></argument> )<pos:position pos:line="26" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="59"/></expr_stmt>
                <expr_stmt><expr><name pos:line="27" pos:column="17">newlistp<pos:position pos:line="27" pos:column="25"/></name> <operator pos:line="27" pos:column="26">=<pos:position pos:line="27" pos:column="27"/></operator> <call><name pos:line="27" pos:column="28">compileRE<pos:position pos:line="27" pos:column="37"/></name><argument_list pos:line="27" pos:column="37">( <argument><expr><name pos:line="27" pos:column="39">newlistp<pos:position pos:line="27" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="49">largeRE<pos:position pos:line="27" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="58">flags<pos:position pos:line="27" pos:column="63"/></name></expr></argument> )<pos:position pos:line="27" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="66"/></expr_stmt>
                <if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><name pos:line="28" pos:column="21">newlistp<pos:position pos:line="28" pos:column="29"/></name> <operator pos:line="28" pos:column="30">==<pos:position pos:line="28" pos:column="32"/></operator> <name pos:line="28" pos:column="33">NULL<pos:position pos:line="28" pos:column="37"/></name></expr>)<pos:position pos:line="28" pos:column="38"/></condition><then pos:line="28" pos:column="38"> <block pos:line="28" pos:column="39">{
                    <expr_stmt><expr><call><name pos:line="29" pos:column="21">aclDestroyRegexList<pos:position pos:line="29" pos:column="40"/></name><argument_list pos:line="29" pos:column="40">( <argument><expr><name pos:line="29" pos:column="42">newlist<pos:position pos:line="29" pos:column="49"/></name></expr></argument> )<pos:position pos:line="29" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="52"/></expr_stmt>
                    <return pos:line="30" pos:column="21">return <expr><literal type="number" pos:line="30" pos:column="28">0<pos:position pos:line="30" pos:column="29"/></literal></expr>;<pos:position pos:line="30" pos:column="30"/></return>
                }<pos:position pos:line="31" pos:column="18"/></block></then></if>
                <expr_stmt><expr><name pos:line="32" pos:column="17">flags<pos:position pos:line="32" pos:column="22"/></name> <operator pos:line="32" pos:column="23">|=<pos:position pos:line="32" pos:column="25"/></operator> <name pos:line="32" pos:column="26">REG_ICASE<pos:position pos:line="32" pos:column="35"/></name></expr>;<pos:position pos:line="32" pos:column="36"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="33" pos:column="17">largeRE<pos:position pos:line="33" pos:column="24"/></name><index pos:line="33" pos:column="24">[<expr><name pos:line="33" pos:column="25">largeREindex<pos:position pos:line="33" pos:column="37"/></name><operator pos:line="33" pos:column="37">=<pos:position pos:line="33" pos:column="38"/></operator><literal type="number" pos:line="33" pos:column="38">0<pos:position pos:line="33" pos:column="39"/></literal></expr>]<pos:position pos:line="33" pos:column="40"/></index></name> <operator pos:line="33" pos:column="41">=<pos:position pos:line="33" pos:column="42"/></operator> <literal type="char" pos:line="33" pos:column="43">'\0'<pos:position pos:line="33" pos:column="47"/></literal></expr>;<pos:position pos:line="33" pos:column="48"/></expr_stmt>
            }<pos:position pos:line="34" pos:column="14"/></block></else></if>
        }<pos:position pos:line="35" pos:column="10"/></block></then> <elseif pos:line="35" pos:column="11">else <if pos:line="35" pos:column="16">if <condition pos:line="35" pos:column="19">(<expr><call><name pos:line="35" pos:column="20">strcmp<pos:position pos:line="35" pos:column="26"/></name><argument_list pos:line="35" pos:column="26">(<argument><expr><name><name pos:line="35" pos:column="27">wl<pos:position pos:line="35" pos:column="29"/></name><operator pos:line="35" pos:column="29">-&gt;<pos:position pos:line="35" pos:column="34"/></operator><name pos:line="35" pos:column="31">key<pos:position pos:line="35" pos:column="34"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="36">"+i"<pos:position pos:line="35" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="41"/></argument_list></call> <operator pos:line="35" pos:column="42">==<pos:position pos:line="35" pos:column="44"/></operator> <literal type="number" pos:line="35" pos:column="45">0<pos:position pos:line="35" pos:column="46"/></literal></expr>)<pos:position pos:line="35" pos:column="47"/></condition><then pos:line="35" pos:column="47"> <block pos:line="35" pos:column="48">{
            <if pos:line="36" pos:column="13">if <condition pos:line="36" pos:column="16">(<expr><operator pos:line="36" pos:column="17">(<pos:position pos:line="36" pos:column="18"/></operator><name pos:line="36" pos:column="18">flags<pos:position pos:line="36" pos:column="23"/></name> <operator pos:line="36" pos:column="24">&amp;<pos:position pos:line="36" pos:column="29"/></operator> <name pos:line="36" pos:column="26">REG_ICASE<pos:position pos:line="36" pos:column="35"/></name><operator pos:line="36" pos:column="35">)<pos:position pos:line="36" pos:column="36"/></operator> <operator pos:line="36" pos:column="37">==<pos:position pos:line="36" pos:column="39"/></operator> <literal type="number" pos:line="36" pos:column="40">0<pos:position pos:line="36" pos:column="41"/></literal></expr>)<pos:position pos:line="36" pos:column="42"/></condition><then pos:line="36" pos:column="42"> <block pos:line="36" pos:column="43">{
                <comment type="block" pos:line="37" pos:column="17">/* optimisation of  +i ... +i */</comment>
                <expr_stmt><expr><call><name pos:line="38" pos:column="17">debugs<pos:position pos:line="38" pos:column="23"/></name><argument_list pos:line="38" pos:column="23">(<argument><expr><literal type="number" pos:line="38" pos:column="24">28<pos:position pos:line="38" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="28">2<pos:position pos:line="38" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="31">"compileOptimisedREs: optimisation of +i ... +i"<pos:position pos:line="38" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="81"/></expr_stmt>
            }<pos:position pos:line="39" pos:column="14"/></block></then> <else pos:line="39" pos:column="15">else <block pos:line="39" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="40" pos:column="17">debugs<pos:position pos:line="40" pos:column="23"/></name><argument_list pos:line="40" pos:column="23">(<argument><expr><literal type="number" pos:line="40" pos:column="24">28<pos:position pos:line="40" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="28">2<pos:position pos:line="40" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="31">"compileOptimisedREs: +i"<pos:position pos:line="40" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="58"/></expr_stmt>
                <expr_stmt><expr><name pos:line="41" pos:column="17">newlistp<pos:position pos:line="41" pos:column="25"/></name> <operator pos:line="41" pos:column="26">=<pos:position pos:line="41" pos:column="27"/></operator> <call><name pos:line="41" pos:column="28">compileRE<pos:position pos:line="41" pos:column="37"/></name><argument_list pos:line="41" pos:column="37">( <argument><expr><name pos:line="41" pos:column="39">newlistp<pos:position pos:line="41" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="49">largeRE<pos:position pos:line="41" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="58">flags<pos:position pos:line="41" pos:column="63"/></name></expr></argument> )<pos:position pos:line="41" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="66"/></expr_stmt>
                <if pos:line="42" pos:column="17">if <condition pos:line="42" pos:column="20">(<expr><name pos:line="42" pos:column="21">newlistp<pos:position pos:line="42" pos:column="29"/></name> <operator pos:line="42" pos:column="30">==<pos:position pos:line="42" pos:column="32"/></operator> <name pos:line="42" pos:column="33">NULL<pos:position pos:line="42" pos:column="37"/></name></expr>)<pos:position pos:line="42" pos:column="38"/></condition><then pos:line="42" pos:column="38"> <block pos:line="42" pos:column="39">{
                    <expr_stmt><expr><call><name pos:line="43" pos:column="21">aclDestroyRegexList<pos:position pos:line="43" pos:column="40"/></name><argument_list pos:line="43" pos:column="40">( <argument><expr><name pos:line="43" pos:column="42">newlist<pos:position pos:line="43" pos:column="49"/></name></expr></argument> )<pos:position pos:line="43" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="52"/></expr_stmt>
                    <return pos:line="44" pos:column="21">return <expr><literal type="number" pos:line="44" pos:column="28">0<pos:position pos:line="44" pos:column="29"/></literal></expr>;<pos:position pos:line="44" pos:column="30"/></return>
                }<pos:position pos:line="45" pos:column="18"/></block></then></if>
                <expr_stmt><expr><name pos:line="46" pos:column="17">flags<pos:position pos:line="46" pos:column="22"/></name> <operator pos:line="46" pos:column="23">&amp;=<pos:position pos:line="46" pos:column="29"/></operator> <operator pos:line="46" pos:column="26">~<pos:position pos:line="46" pos:column="27"/></operator><name pos:line="46" pos:column="27">REG_ICASE<pos:position pos:line="46" pos:column="36"/></name></expr>;<pos:position pos:line="46" pos:column="37"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="47" pos:column="17">largeRE<pos:position pos:line="47" pos:column="24"/></name><index pos:line="47" pos:column="24">[<expr><name pos:line="47" pos:column="25">largeREindex<pos:position pos:line="47" pos:column="37"/></name><operator pos:line="47" pos:column="37">=<pos:position pos:line="47" pos:column="38"/></operator><literal type="number" pos:line="47" pos:column="38">0<pos:position pos:line="47" pos:column="39"/></literal></expr>]<pos:position pos:line="47" pos:column="40"/></index></name> <operator pos:line="47" pos:column="41">=<pos:position pos:line="47" pos:column="42"/></operator> <literal type="char" pos:line="47" pos:column="43">'\0'<pos:position pos:line="47" pos:column="47"/></literal></expr>;<pos:position pos:line="47" pos:column="48"/></expr_stmt>
            }<pos:position pos:line="48" pos:column="14"/></block></else></if>
        }<pos:position pos:line="49" pos:column="10"/></block></then></if></elseif> <elseif pos:line="49" pos:column="11">else <if pos:line="49" pos:column="16">if <condition pos:line="49" pos:column="19">(<expr><name pos:line="49" pos:column="20">RElen<pos:position pos:line="49" pos:column="25"/></name> <operator pos:line="49" pos:column="26">+<pos:position pos:line="49" pos:column="27"/></operator> <name pos:line="49" pos:column="28">largeREindex<pos:position pos:line="49" pos:column="40"/></name> <operator pos:line="49" pos:column="41">+<pos:position pos:line="49" pos:column="42"/></operator> <literal type="number" pos:line="49" pos:column="43">3<pos:position pos:line="49" pos:column="44"/></literal> <operator pos:line="49" pos:column="45">&lt;<pos:position pos:line="49" pos:column="49"/></operator> <name pos:line="49" pos:column="47">BUFSIZ<pos:position pos:line="49" pos:column="53"/></name><operator pos:line="49" pos:column="53">-<pos:position pos:line="49" pos:column="54"/></operator><literal type="number" pos:line="49" pos:column="54">1<pos:position pos:line="49" pos:column="55"/></literal></expr>)<pos:position pos:line="49" pos:column="56"/></condition><then pos:line="49" pos:column="56"> <block pos:line="49" pos:column="57">{
            <expr_stmt><expr><call><name pos:line="50" pos:column="13">debugs<pos:position pos:line="50" pos:column="19"/></name><argument_list pos:line="50" pos:column="19">(<argument><expr><literal type="number" pos:line="50" pos:column="20">28<pos:position pos:line="50" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="50" pos:column="24">2<pos:position pos:line="50" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="27">"compileOptimisedREs: adding RE '"<pos:position pos:line="50" pos:column="61"/></literal> <operator pos:line="50" pos:column="62">&lt;&lt;<pos:position pos:line="50" pos:column="70"/></operator> <name><name pos:line="50" pos:column="65">wl<pos:position pos:line="50" pos:column="67"/></name><operator pos:line="50" pos:column="67">-&gt;<pos:position pos:line="50" pos:column="72"/></operator><name pos:line="50" pos:column="69">key<pos:position pos:line="50" pos:column="72"/></name></name> <operator pos:line="50" pos:column="73">&lt;&lt;<pos:position pos:line="50" pos:column="81"/></operator> <literal type="string" pos:line="50" pos:column="76">"'"<pos:position pos:line="50" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="81"/></expr_stmt>
            <if pos:line="51" pos:column="13">if <condition pos:line="51" pos:column="16">(<expr><name pos:line="51" pos:column="17">largeREindex<pos:position pos:line="51" pos:column="29"/></name> <operator pos:line="51" pos:column="30">&gt;<pos:position pos:line="51" pos:column="34"/></operator> <literal type="number" pos:line="51" pos:column="32">0<pos:position pos:line="51" pos:column="33"/></literal></expr>)<pos:position pos:line="51" pos:column="34"/></condition><then pos:line="51" pos:column="34"> <block pos:line="51" pos:column="35">{
                <expr_stmt><expr><name><name pos:line="52" pos:column="17">largeRE<pos:position pos:line="52" pos:column="24"/></name><index pos:line="52" pos:column="24">[<expr><name pos:line="52" pos:column="25">largeREindex<pos:position pos:line="52" pos:column="37"/></name></expr>]<pos:position pos:line="52" pos:column="38"/></index></name> <operator pos:line="52" pos:column="39">=<pos:position pos:line="52" pos:column="40"/></operator> <literal type="char" pos:line="52" pos:column="41">'|'<pos:position pos:line="52" pos:column="44"/></literal></expr>;<pos:position pos:line="52" pos:column="45"/></expr_stmt>
                <expr_stmt><expr><operator pos:line="53" pos:column="17">++<pos:position pos:line="53" pos:column="19"/></operator><name pos:line="53" pos:column="19">largeREindex<pos:position pos:line="53" pos:column="31"/></name></expr>;<pos:position pos:line="53" pos:column="32"/></expr_stmt>
            }<pos:position pos:line="54" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name><name pos:line="55" pos:column="13">largeRE<pos:position pos:line="55" pos:column="20"/></name><index pos:line="55" pos:column="20">[<expr><name pos:line="55" pos:column="21">largeREindex<pos:position pos:line="55" pos:column="33"/></name></expr>]<pos:position pos:line="55" pos:column="34"/></index></name> <operator pos:line="55" pos:column="35">=<pos:position pos:line="55" pos:column="36"/></operator> <literal type="char" pos:line="55" pos:column="37">'('<pos:position pos:line="55" pos:column="40"/></literal></expr>;<pos:position pos:line="55" pos:column="41"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="56" pos:column="13">++<pos:position pos:line="56" pos:column="15"/></operator><name pos:line="56" pos:column="15">largeREindex<pos:position pos:line="56" pos:column="27"/></name></expr>;<pos:position pos:line="56" pos:column="28"/></expr_stmt>
            <for pos:line="57" pos:column="13">for <control pos:line="57" pos:column="17">(<init><decl><type><name pos:line="57" pos:column="18">char<pos:position pos:line="57" pos:column="22"/></name> <modifier pos:line="57" pos:column="23">*<pos:position pos:line="57" pos:column="24"/></modifier></type> <name pos:line="57" pos:column="25">t<pos:position pos:line="57" pos:column="26"/></name> <init pos:line="57" pos:column="27">= <expr><name><name pos:line="57" pos:column="29">wl<pos:position pos:line="57" pos:column="31"/></name><operator pos:line="57" pos:column="31">-&gt;<pos:position pos:line="57" pos:column="36"/></operator><name pos:line="57" pos:column="33">key<pos:position pos:line="57" pos:column="36"/></name></name></expr></init></decl>;<pos:position pos:line="57" pos:column="37"/></init> <condition><expr><operator pos:line="57" pos:column="38">*<pos:position pos:line="57" pos:column="39"/></operator><name pos:line="57" pos:column="39">t<pos:position pos:line="57" pos:column="40"/></name> <operator pos:line="57" pos:column="41">!=<pos:position pos:line="57" pos:column="43"/></operator> <literal type="char" pos:line="57" pos:column="44">'\0'<pos:position pos:line="57" pos:column="48"/></literal></expr>;<pos:position pos:line="57" pos:column="49"/></condition> <incr><expr><operator pos:line="57" pos:column="50">++<pos:position pos:line="57" pos:column="52"/></operator><name pos:line="57" pos:column="52">t<pos:position pos:line="57" pos:column="53"/></name></expr></incr>)<pos:position pos:line="57" pos:column="54"/></control> <block pos:line="57" pos:column="55">{
                <expr_stmt><expr><name><name pos:line="58" pos:column="17">largeRE<pos:position pos:line="58" pos:column="24"/></name><index pos:line="58" pos:column="24">[<expr><name pos:line="58" pos:column="25">largeREindex<pos:position pos:line="58" pos:column="37"/></name></expr>]<pos:position pos:line="58" pos:column="38"/></index></name> <operator pos:line="58" pos:column="39">=<pos:position pos:line="58" pos:column="40"/></operator> <operator pos:line="58" pos:column="41">*<pos:position pos:line="58" pos:column="42"/></operator><name pos:line="58" pos:column="42">t<pos:position pos:line="58" pos:column="43"/></name></expr>;<pos:position pos:line="58" pos:column="44"/></expr_stmt>
                <expr_stmt><expr><operator pos:line="59" pos:column="17">++<pos:position pos:line="59" pos:column="19"/></operator><name pos:line="59" pos:column="19">largeREindex<pos:position pos:line="59" pos:column="31"/></name></expr>;<pos:position pos:line="59" pos:column="32"/></expr_stmt>
            }<pos:position pos:line="60" pos:column="14"/></block></for>
            <expr_stmt><expr><name><name pos:line="61" pos:column="13">largeRE<pos:position pos:line="61" pos:column="20"/></name><index pos:line="61" pos:column="20">[<expr><name pos:line="61" pos:column="21">largeREindex<pos:position pos:line="61" pos:column="33"/></name></expr>]<pos:position pos:line="61" pos:column="34"/></index></name> <operator pos:line="61" pos:column="35">=<pos:position pos:line="61" pos:column="36"/></operator> <literal type="char" pos:line="61" pos:column="37">')'<pos:position pos:line="61" pos:column="40"/></literal></expr>;<pos:position pos:line="61" pos:column="41"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="62" pos:column="13">++<pos:position pos:line="62" pos:column="15"/></operator><name pos:line="62" pos:column="15">largeREindex<pos:position pos:line="62" pos:column="27"/></name></expr>;<pos:position pos:line="62" pos:column="28"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="63" pos:column="13">largeRE<pos:position pos:line="63" pos:column="20"/></name><index pos:line="63" pos:column="20">[<expr><name pos:line="63" pos:column="21">largeREindex<pos:position pos:line="63" pos:column="33"/></name></expr>]<pos:position pos:line="63" pos:column="34"/></index></name> <operator pos:line="63" pos:column="35">=<pos:position pos:line="63" pos:column="36"/></operator> <literal type="char" pos:line="63" pos:column="37">'\0'<pos:position pos:line="63" pos:column="41"/></literal></expr>;<pos:position pos:line="63" pos:column="42"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="64" pos:column="13">++<pos:position pos:line="64" pos:column="15"/></operator><name pos:line="64" pos:column="15">numREs<pos:position pos:line="64" pos:column="21"/></name></expr>;<pos:position pos:line="64" pos:column="22"/></expr_stmt>
        }<pos:position pos:line="65" pos:column="10"/></block></then></if></elseif> <else pos:line="65" pos:column="11">else <block pos:line="65" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="66" pos:column="13">debugs<pos:position pos:line="66" pos:column="19"/></name><argument_list pos:line="66" pos:column="19">(<argument><expr><literal type="number" pos:line="66" pos:column="20">28<pos:position pos:line="66" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="66" pos:column="24">2<pos:position pos:line="66" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="27">"compileOptimisedREs: buffer full, generating new optimised RE..."<pos:position pos:line="66" pos:column="93"/></literal></expr></argument> )<pos:position pos:line="66" pos:column="95"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="96"/></expr_stmt>
            <expr_stmt><expr><name pos:line="67" pos:column="13">newlistp<pos:position pos:line="67" pos:column="21"/></name> <operator pos:line="67" pos:column="22">=<pos:position pos:line="67" pos:column="23"/></operator> <call><name pos:line="67" pos:column="24">compileRE<pos:position pos:line="67" pos:column="33"/></name><argument_list pos:line="67" pos:column="33">( <argument><expr><name pos:line="67" pos:column="35">newlistp<pos:position pos:line="67" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="45">largeRE<pos:position pos:line="67" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="54">flags<pos:position pos:line="67" pos:column="59"/></name></expr></argument> )<pos:position pos:line="67" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="62"/></expr_stmt>
            <if pos:line="68" pos:column="13">if <condition pos:line="68" pos:column="16">(<expr><name pos:line="68" pos:column="17">newlistp<pos:position pos:line="68" pos:column="25"/></name> <operator pos:line="68" pos:column="26">==<pos:position pos:line="68" pos:column="28"/></operator> <name pos:line="68" pos:column="29">NULL<pos:position pos:line="68" pos:column="33"/></name></expr>)<pos:position pos:line="68" pos:column="34"/></condition><then pos:line="68" pos:column="34"> <block pos:line="68" pos:column="35">{
                <expr_stmt><expr><call><name pos:line="69" pos:column="17">aclDestroyRegexList<pos:position pos:line="69" pos:column="36"/></name><argument_list pos:line="69" pos:column="36">( <argument><expr><name pos:line="69" pos:column="38">newlist<pos:position pos:line="69" pos:column="45"/></name></expr></argument> )<pos:position pos:line="69" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="48"/></expr_stmt>
                <return pos:line="70" pos:column="17">return <expr><literal type="number" pos:line="70" pos:column="24">0<pos:position pos:line="70" pos:column="25"/></literal></expr>;<pos:position pos:line="70" pos:column="26"/></return>
            }<pos:position pos:line="71" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name><name pos:line="72" pos:column="13">largeRE<pos:position pos:line="72" pos:column="20"/></name><index pos:line="72" pos:column="20">[<expr><name pos:line="72" pos:column="21">largeREindex<pos:position pos:line="72" pos:column="33"/></name><operator pos:line="72" pos:column="33">=<pos:position pos:line="72" pos:column="34"/></operator><literal type="number" pos:line="72" pos:column="34">0<pos:position pos:line="72" pos:column="35"/></literal></expr>]<pos:position pos:line="72" pos:column="36"/></index></name> <operator pos:line="72" pos:column="37">=<pos:position pos:line="72" pos:column="38"/></operator> <literal type="char" pos:line="72" pos:column="39">'\0'<pos:position pos:line="72" pos:column="43"/></literal></expr>;<pos:position pos:line="72" pos:column="44"/></expr_stmt>
            <continue pos:line="73" pos:column="13">continue;<pos:position pos:line="73" pos:column="22"/></continue>    <comment type="block" pos:line="73" pos:column="26">/* do the loop again to add the RE to largeRE */</comment>
        }<pos:position pos:line="74" pos:column="10"/></block></else></if>
        <expr_stmt><expr><name pos:line="75" pos:column="9">wl<pos:position pos:line="75" pos:column="11"/></name> <operator pos:line="75" pos:column="12">=<pos:position pos:line="75" pos:column="13"/></operator> <name><name pos:line="75" pos:column="14">wl<pos:position pos:line="75" pos:column="16"/></name><operator pos:line="75" pos:column="16">-&gt;<pos:position pos:line="75" pos:column="21"/></operator><name pos:line="75" pos:column="18">next<pos:position pos:line="75" pos:column="22"/></name></name></expr>;<pos:position pos:line="75" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="76" pos:column="6"/></block></while>

    <expr_stmt><expr><name pos:line="78" pos:column="5">newlistp<pos:position pos:line="78" pos:column="13"/></name> <operator pos:line="78" pos:column="14">=<pos:position pos:line="78" pos:column="15"/></operator> <call><name pos:line="78" pos:column="16">compileRE<pos:position pos:line="78" pos:column="25"/></name><argument_list pos:line="78" pos:column="25">( <argument><expr><name pos:line="78" pos:column="27">newlistp<pos:position pos:line="78" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="37">largeRE<pos:position pos:line="78" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="46">flags<pos:position pos:line="78" pos:column="51"/></name></expr></argument> )<pos:position pos:line="78" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="54"/></expr_stmt>
    <if pos:line="79" pos:column="5">if <condition pos:line="79" pos:column="8">(<expr><name pos:line="79" pos:column="9">newlistp<pos:position pos:line="79" pos:column="17"/></name> <operator pos:line="79" pos:column="18">==<pos:position pos:line="79" pos:column="20"/></operator> <name pos:line="79" pos:column="21">NULL<pos:position pos:line="79" pos:column="25"/></name></expr>)<pos:position pos:line="79" pos:column="26"/></condition><then pos:line="79" pos:column="26"> <block pos:line="79" pos:column="27">{
        <expr_stmt><expr><call><name pos:line="80" pos:column="9">aclDestroyRegexList<pos:position pos:line="80" pos:column="28"/></name><argument_list pos:line="80" pos:column="28">( <argument><expr><name pos:line="80" pos:column="30">newlist<pos:position pos:line="80" pos:column="37"/></name></expr></argument> )<pos:position pos:line="80" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="40"/></expr_stmt>
        <return pos:line="81" pos:column="9">return <expr><literal type="number" pos:line="81" pos:column="16">0<pos:position pos:line="81" pos:column="17"/></literal></expr>;<pos:position pos:line="81" pos:column="18"/></return>
    }<pos:position pos:line="82" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="84" pos:column="5">/* all was successful, so put the new list at the tail */</comment>
    <if pos:line="85" pos:column="5">if <condition pos:line="85" pos:column="8">(<expr><operator pos:line="85" pos:column="9">*<pos:position pos:line="85" pos:column="10"/></operator><name pos:line="85" pos:column="10">curlist<pos:position pos:line="85" pos:column="17"/></name> <operator pos:line="85" pos:column="18">==<pos:position pos:line="85" pos:column="20"/></operator> <name pos:line="85" pos:column="21">NULL<pos:position pos:line="85" pos:column="25"/></name></expr>)<pos:position pos:line="85" pos:column="26"/></condition><then pos:line="85" pos:column="26"> <block pos:line="85" pos:column="27">{
        <expr_stmt><expr><operator pos:line="86" pos:column="9">*<pos:position pos:line="86" pos:column="10"/></operator><name pos:line="86" pos:column="10">curlist<pos:position pos:line="86" pos:column="17"/></name> <operator pos:line="86" pos:column="18">=<pos:position pos:line="86" pos:column="19"/></operator> <name pos:line="86" pos:column="20">newlist<pos:position pos:line="86" pos:column="27"/></name></expr>;<pos:position pos:line="86" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="87" pos:column="6"/></block></then> <else pos:line="87" pos:column="7">else <block pos:line="87" pos:column="12">{
        <for pos:line="88" pos:column="9">for <control pos:line="88" pos:column="13">(<init><expr><name pos:line="88" pos:column="14">Tail<pos:position pos:line="88" pos:column="18"/></name> <operator pos:line="88" pos:column="19">=<pos:position pos:line="88" pos:column="20"/></operator> <name pos:line="88" pos:column="21">curlist<pos:position pos:line="88" pos:column="28"/></name></expr>;<pos:position pos:line="88" pos:column="29"/></init> <condition><expr><operator pos:line="88" pos:column="30">*<pos:position pos:line="88" pos:column="31"/></operator><name pos:line="88" pos:column="31">Tail<pos:position pos:line="88" pos:column="35"/></name> <operator pos:line="88" pos:column="36">!=<pos:position pos:line="88" pos:column="38"/></operator> <name pos:line="88" pos:column="39">NULL<pos:position pos:line="88" pos:column="43"/></name></expr>;<pos:position pos:line="88" pos:column="44"/></condition> <incr><expr><name pos:line="88" pos:column="45">Tail<pos:position pos:line="88" pos:column="49"/></name> <operator pos:line="88" pos:column="50">=<pos:position pos:line="88" pos:column="51"/></operator> <operator pos:line="88" pos:column="52">&amp;<pos:position pos:line="88" pos:column="57"/></operator><operator pos:line="88" pos:column="53">(<pos:position pos:line="88" pos:column="54"/></operator><name><operator pos:line="88" pos:column="54">(<pos:position pos:line="88" pos:column="55"/></operator><operator pos:line="88" pos:column="55">*<pos:position pos:line="88" pos:column="56"/></operator><name pos:line="88" pos:column="56">Tail<pos:position pos:line="88" pos:column="60"/></name><operator pos:line="88" pos:column="60">)<pos:position pos:line="88" pos:column="61"/></operator><operator pos:line="88" pos:column="61">-&gt;<pos:position pos:line="88" pos:column="66"/></operator><name pos:line="88" pos:column="63">next<pos:position pos:line="88" pos:column="67"/></name></name><operator pos:line="88" pos:column="67">)<pos:position pos:line="88" pos:column="68"/></operator></expr></incr>)<pos:position pos:line="88" pos:column="69"/></control>
            <block type="pseudo"><empty_stmt pos:line="89" pos:column="13">;<pos:position pos:line="89" pos:column="14"/></empty_stmt></block></for>
        <expr_stmt><expr><operator pos:line="90" pos:column="9">(<pos:position pos:line="90" pos:column="10"/></operator><operator pos:line="90" pos:column="10">*<pos:position pos:line="90" pos:column="11"/></operator><name pos:line="90" pos:column="11">Tail<pos:position pos:line="90" pos:column="15"/></name><operator pos:line="90" pos:column="15">)<pos:position pos:line="90" pos:column="16"/></operator> <operator pos:line="90" pos:column="17">=<pos:position pos:line="90" pos:column="18"/></operator> <name pos:line="90" pos:column="19">newlist<pos:position pos:line="90" pos:column="26"/></name></expr>;<pos:position pos:line="90" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="91" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="93" pos:column="5">debugs<pos:position pos:line="93" pos:column="11"/></name><argument_list pos:line="93" pos:column="11">(<argument><expr><literal type="number" pos:line="93" pos:column="12">28<pos:position pos:line="93" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="93" pos:column="16">2<pos:position pos:line="93" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="93" pos:column="19">"compileOptimisedREs: "<pos:position pos:line="93" pos:column="42"/></literal> <operator pos:line="93" pos:column="43">&lt;&lt;<pos:position pos:line="93" pos:column="51"/></operator> <name pos:line="93" pos:column="46">numREs<pos:position pos:line="93" pos:column="52"/></name> <operator pos:line="93" pos:column="53">&lt;&lt;<pos:position pos:line="93" pos:column="61"/></operator> <literal type="string" pos:line="93" pos:column="56">" REs are optimised into one RE."<pos:position pos:line="93" pos:column="89"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="91"/></expr_stmt>
    <if pos:line="94" pos:column="5">if <condition pos:line="94" pos:column="8">(<expr><name pos:line="94" pos:column="9">numREs<pos:position pos:line="94" pos:column="15"/></name> <operator pos:line="94" pos:column="16">&gt;<pos:position pos:line="94" pos:column="20"/></operator> <literal type="number" pos:line="94" pos:column="18">100<pos:position pos:line="94" pos:column="21"/></literal></expr>)<pos:position pos:line="94" pos:column="22"/></condition><then pos:line="94" pos:column="22"> <block pos:line="94" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="95" pos:column="9">debugs<pos:position pos:line="95" pos:column="15"/></name><argument_list pos:line="95" pos:column="15">(<argument><expr><literal type="number" pos:line="95" pos:column="16">28<pos:position pos:line="95" pos:column="18"/></literal></expr></argument>, <argument><expr><operator pos:line="95" pos:column="20">(<pos:position pos:line="95" pos:column="21"/></operator><ternary><condition><expr><name pos:line="95" pos:column="21">opt_parse_cfg_only<pos:position pos:line="95" pos:column="39"/></name></expr>?<pos:position pos:line="95" pos:column="40"/></condition><then><expr><name pos:line="95" pos:column="40">DBG_IMPORTANT<pos:position pos:line="95" pos:column="53"/></name></expr></then><else pos:line="95" pos:column="53">:<expr><literal type="number" pos:line="95" pos:column="54">2<pos:position pos:line="95" pos:column="55"/></literal></expr></else></ternary><operator pos:line="95" pos:column="55">)<pos:position pos:line="95" pos:column="56"/></operator></expr></argument>, <argument><expr><literal type="string" pos:line="95" pos:column="58">""<pos:position pos:line="95" pos:column="60"/></literal> <operator pos:line="95" pos:column="61">&lt;&lt;<pos:position pos:line="95" pos:column="69"/></operator> <name pos:line="95" pos:column="64">cfg_filename<pos:position pos:line="95" pos:column="76"/></name> <operator pos:line="95" pos:column="77">&lt;&lt;<pos:position pos:line="95" pos:column="85"/></operator> <literal type="string" pos:line="95" pos:column="80">" line "<pos:position pos:line="95" pos:column="88"/></literal> <operator pos:line="95" pos:column="89">&lt;&lt;<pos:position pos:line="95" pos:column="97"/></operator> <name pos:line="95" pos:column="92">config_lineno<pos:position pos:line="95" pos:column="105"/></name> <operator pos:line="95" pos:column="106">&lt;&lt;<pos:position pos:line="95" pos:column="114"/></operator> <literal type="string" pos:line="95" pos:column="109">": "<pos:position pos:line="95" pos:column="113"/></literal> <operator pos:line="95" pos:column="114">&lt;&lt;<pos:position pos:line="95" pos:column="122"/></operator> <name pos:line="95" pos:column="117">config_input_line<pos:position pos:line="95" pos:column="134"/></name></expr></argument>)<pos:position pos:line="95" pos:column="135"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="136"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="96" pos:column="9">debugs<pos:position pos:line="96" pos:column="15"/></name><argument_list pos:line="96" pos:column="15">(<argument><expr><literal type="number" pos:line="96" pos:column="16">28<pos:position pos:line="96" pos:column="18"/></literal></expr></argument>, <argument><expr><operator pos:line="96" pos:column="20">(<pos:position pos:line="96" pos:column="21"/></operator><ternary><condition><expr><name pos:line="96" pos:column="21">opt_parse_cfg_only<pos:position pos:line="96" pos:column="39"/></name></expr>?<pos:position pos:line="96" pos:column="40"/></condition><then><expr><name pos:line="96" pos:column="40">DBG_IMPORTANT<pos:position pos:line="96" pos:column="53"/></name></expr></then><else pos:line="96" pos:column="53">:<expr><literal type="number" pos:line="96" pos:column="54">2<pos:position pos:line="96" pos:column="55"/></literal></expr></else></ternary><operator pos:line="96" pos:column="55">)<pos:position pos:line="96" pos:column="56"/></operator></expr></argument>, <argument><expr><literal type="string" pos:line="96" pos:column="58">"WARNING: there are more than 100 regular expressions. "<pos:position pos:line="96" pos:column="114"/></literal> <operator pos:line="96" pos:column="115">&lt;&lt;<pos:position pos:line="96" pos:column="123"/></operator>
               <literal type="string" pos:line="97" pos:column="16">"Consider using less REs or use rules without expressions like 'dstdomain'."<pos:position pos:line="97" pos:column="92"/></literal></expr></argument>)<pos:position pos:line="97" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="94"/></expr_stmt>
    }<pos:position pos:line="98" pos:column="6"/></block></then></if>

    <return pos:line="100" pos:column="5">return <expr><literal type="number" pos:line="100" pos:column="12">1<pos:position pos:line="100" pos:column="13"/></literal></expr>;<pos:position pos:line="100" pos:column="14"/></return>
}<pos:position pos:line="101" pos:column="2"/></block></function></unit>
