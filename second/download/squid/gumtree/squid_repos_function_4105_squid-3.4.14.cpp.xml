<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4105_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Icap<pos:position pos:line="1" pos:column="22"/></name><operator pos:line="1" pos:column="22">::<pos:position pos:line="1" pos:column="24"/></operator><name pos:line="1" pos:column="24">ModXact<pos:position pos:line="1" pos:column="31"/></name><operator pos:line="1" pos:column="31">::<pos:position pos:line="1" pos:column="33"/></operator><name pos:line="1" pos:column="33">estimateVirginBody<pos:position pos:line="1" pos:column="51"/></name></name><parameter_list pos:line="1" pos:column="51">()<pos:position pos:line="1" pos:column="53"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <comment type="line" pos:line="3" pos:column="5">// note: lack of size info may disable previews and 204s</comment>

    <decl_stmt><decl><type><name pos:line="5" pos:column="5">HttpMsg<pos:position pos:line="5" pos:column="12"/></name> <modifier pos:line="5" pos:column="13">*<pos:position pos:line="5" pos:column="14"/></modifier></type><name pos:line="5" pos:column="14">msg<pos:position pos:line="5" pos:column="17"/></name> <init pos:line="5" pos:column="18">= <expr><name><name pos:line="5" pos:column="20">virgin<pos:position pos:line="5" pos:column="26"/></name><operator pos:line="5" pos:column="26">.<pos:position pos:line="5" pos:column="27"/></operator><name pos:line="5" pos:column="27">header<pos:position pos:line="5" pos:column="33"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="34"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">Must<pos:position pos:line="6" pos:column="9"/></name><argument_list pos:line="6" pos:column="9">(<argument><expr><name pos:line="6" pos:column="10">msg<pos:position pos:line="6" pos:column="13"/></name></expr></argument>)<pos:position pos:line="6" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="15"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="8" pos:column="5">HttpRequestMethod<pos:position pos:line="8" pos:column="22"/></name></type> <name pos:line="8" pos:column="23">method<pos:position pos:line="8" pos:column="29"/></name></decl>;<pos:position pos:line="8" pos:column="30"/></decl_stmt>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name><name pos:line="10" pos:column="9">virgin<pos:position pos:line="10" pos:column="15"/></name><operator pos:line="10" pos:column="15">.<pos:position pos:line="10" pos:column="16"/></operator><name pos:line="10" pos:column="16">cause<pos:position pos:line="10" pos:column="21"/></name></name></expr>)<pos:position pos:line="10" pos:column="22"/></condition><then pos:line="10" pos:column="22">
        <block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="9">method<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">=<pos:position pos:line="11" pos:column="17"/></operator> <name><name pos:line="11" pos:column="18">virgin<pos:position pos:line="11" pos:column="24"/></name><operator pos:line="11" pos:column="24">.<pos:position pos:line="11" pos:column="25"/></operator><name pos:line="11" pos:column="25">cause<pos:position pos:line="11" pos:column="30"/></name><operator pos:line="11" pos:column="30">-&gt;<pos:position pos:line="11" pos:column="35"/></operator><name pos:line="11" pos:column="32">method<pos:position pos:line="11" pos:column="38"/></name></name></expr>;<pos:position pos:line="11" pos:column="39"/></expr_stmt></block></then>
    <elseif pos:line="12" pos:column="5">else <if pos:line="12" pos:column="10">if <condition pos:line="12" pos:column="13">(<decl><type><name pos:line="12" pos:column="14">HttpRequest<pos:position pos:line="12" pos:column="25"/></name> <modifier pos:line="12" pos:column="26">*<pos:position pos:line="12" pos:column="27"/></modifier></type><name pos:line="12" pos:column="27">req<pos:position pos:line="12" pos:column="30"/></name> <init pos:line="12" pos:column="31">= <expr><cast type="dynamic" pos:line="12" pos:column="33">dynamic_cast<argument_list type="generic" pos:line="12" pos:column="45">&lt;<argument><expr><name pos:line="12" pos:column="46">HttpRequest<pos:position pos:line="12" pos:column="57"/></name><operator pos:line="12" pos:column="57">*<pos:position pos:line="12" pos:column="58"/></operator></expr></argument>&gt;<pos:position pos:line="12" pos:column="62"/></argument_list><argument_list pos:line="12" pos:column="59">(<argument><expr><name pos:line="12" pos:column="60">msg<pos:position pos:line="12" pos:column="63"/></name></expr></argument>)<pos:position pos:line="12" pos:column="64"/></argument_list></cast></expr></init></decl>)<pos:position pos:line="12" pos:column="65"/></condition><then pos:line="12" pos:column="65">
        <block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="9">method<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">=<pos:position pos:line="13" pos:column="17"/></operator> <name><name pos:line="13" pos:column="18">req<pos:position pos:line="13" pos:column="21"/></name><operator pos:line="13" pos:column="21">-&gt;<pos:position pos:line="13" pos:column="26"/></operator><name pos:line="13" pos:column="23">method<pos:position pos:line="13" pos:column="29"/></name></name></expr>;<pos:position pos:line="13" pos:column="30"/></expr_stmt></block></then></if></elseif>
    <else pos:line="14" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="15" pos:column="9">method<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">=<pos:position pos:line="15" pos:column="17"/></operator> <name><name pos:line="15" pos:column="18">Http<pos:position pos:line="15" pos:column="22"/></name><operator pos:line="15" pos:column="22">::<pos:position pos:line="15" pos:column="24"/></operator><name pos:line="15" pos:column="24">METHOD_NONE<pos:position pos:line="15" pos:column="35"/></name></name></expr>;<pos:position pos:line="15" pos:column="36"/></expr_stmt></block></else></if>

    <decl_stmt><decl><type><name pos:line="17" pos:column="5">int64_t<pos:position pos:line="17" pos:column="12"/></name></type> <name pos:line="17" pos:column="13">size<pos:position pos:line="17" pos:column="17"/></name></decl>;<pos:position pos:line="17" pos:column="18"/></decl_stmt>
    <comment type="line" pos:line="18" pos:column="5">// expectingBody returns true for zero-sized bodies, but we will not</comment>
    <comment type="line" pos:line="19" pos:column="5">// get a pipe for that body, so we treat the message as bodyless</comment>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">method<pos:position pos:line="20" pos:column="15"/></name> <operator pos:line="20" pos:column="16">!=<pos:position pos:line="20" pos:column="18"/></operator> <name><name pos:line="20" pos:column="19">Http<pos:position pos:line="20" pos:column="23"/></name><operator pos:line="20" pos:column="23">::<pos:position pos:line="20" pos:column="25"/></operator><name pos:line="20" pos:column="25">METHOD_NONE<pos:position pos:line="20" pos:column="36"/></name></name> <operator pos:line="20" pos:column="37">&amp;&amp;<pos:position pos:line="20" pos:column="47"/></operator> <call><name><name pos:line="20" pos:column="40">msg<pos:position pos:line="20" pos:column="43"/></name><operator pos:line="20" pos:column="43">-&gt;<pos:position pos:line="20" pos:column="48"/></operator><name pos:line="20" pos:column="45">expectingBody<pos:position pos:line="20" pos:column="58"/></name></name><argument_list pos:line="20" pos:column="58">(<argument><expr><name pos:line="20" pos:column="59">method<pos:position pos:line="20" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="67">size<pos:position pos:line="20" pos:column="71"/></name></expr></argument>)<pos:position pos:line="20" pos:column="72"/></argument_list></call> <operator pos:line="20" pos:column="73">&amp;&amp;<pos:position pos:line="20" pos:column="83"/></operator> <name pos:line="20" pos:column="76">size<pos:position pos:line="20" pos:column="80"/></name></expr>)<pos:position pos:line="20" pos:column="81"/></condition><then pos:line="20" pos:column="81"> <block pos:line="20" pos:column="82">{
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">debugs<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><literal type="number" pos:line="21" pos:column="16">93<pos:position pos:line="21" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="20">6<pos:position pos:line="21" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="23">HERE<pos:position pos:line="21" pos:column="27"/></name> <operator pos:line="21" pos:column="28">&lt;&lt;<pos:position pos:line="21" pos:column="36"/></operator> <literal type="string" pos:line="21" pos:column="31">"expects virgin body from "<pos:position pos:line="21" pos:column="58"/></literal> <operator pos:line="21" pos:column="59">&lt;&lt;<pos:position pos:line="21" pos:column="67"/></operator>
               <name><name pos:line="22" pos:column="16">virgin<pos:position pos:line="22" pos:column="22"/></name><operator pos:line="22" pos:column="22">.<pos:position pos:line="22" pos:column="23"/></operator><name pos:line="22" pos:column="23">body_pipe<pos:position pos:line="22" pos:column="32"/></name></name> <operator pos:line="22" pos:column="33">&lt;&lt;<pos:position pos:line="22" pos:column="41"/></operator> <literal type="string" pos:line="22" pos:column="36">"; size: "<pos:position pos:line="22" pos:column="46"/></literal> <operator pos:line="22" pos:column="47">&lt;&lt;<pos:position pos:line="22" pos:column="55"/></operator> <name pos:line="22" pos:column="50">size<pos:position pos:line="22" pos:column="54"/></name></expr></argument>)<pos:position pos:line="22" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="56"/></expr_stmt>

        <expr_stmt><expr><call><name><name pos:line="24" pos:column="9">virginBody<pos:position pos:line="24" pos:column="19"/></name><operator pos:line="24" pos:column="19">.<pos:position pos:line="24" pos:column="20"/></operator><name pos:line="24" pos:column="20">expect<pos:position pos:line="24" pos:column="26"/></name></name><argument_list pos:line="24" pos:column="26">(<argument><expr><name pos:line="24" pos:column="27">size<pos:position pos:line="24" pos:column="31"/></name></expr></argument>)<pos:position pos:line="24" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="25" pos:column="9">virginBodyWriting<pos:position pos:line="25" pos:column="26"/></name><operator pos:line="25" pos:column="26">.<pos:position pos:line="25" pos:column="27"/></operator><name pos:line="25" pos:column="27">plan<pos:position pos:line="25" pos:column="31"/></name></name><argument_list pos:line="25" pos:column="31">()<pos:position pos:line="25" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="34"/></expr_stmt>

        <comment type="line" pos:line="27" pos:column="9">// sign up as a body consumer</comment>
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">Must<pos:position pos:line="28" pos:column="13"/></name><argument_list pos:line="28" pos:column="13">(<argument><expr><name><name pos:line="28" pos:column="14">msg<pos:position pos:line="28" pos:column="17"/></name><operator pos:line="28" pos:column="17">-&gt;<pos:position pos:line="28" pos:column="22"/></operator><name pos:line="28" pos:column="19">body_pipe<pos:position pos:line="28" pos:column="28"/></name></name> <operator pos:line="28" pos:column="29">!=<pos:position pos:line="28" pos:column="31"/></operator> <name pos:line="28" pos:column="32">NULL<pos:position pos:line="28" pos:column="36"/></name></expr></argument>)<pos:position pos:line="28" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">Must<pos:position pos:line="29" pos:column="13"/></name><argument_list pos:line="29" pos:column="13">(<argument><expr><name><name pos:line="29" pos:column="14">msg<pos:position pos:line="29" pos:column="17"/></name><operator pos:line="29" pos:column="17">-&gt;<pos:position pos:line="29" pos:column="22"/></operator><name pos:line="29" pos:column="19">body_pipe<pos:position pos:line="29" pos:column="28"/></name></name> <operator pos:line="29" pos:column="29">==<pos:position pos:line="29" pos:column="31"/></operator> <name><name pos:line="29" pos:column="32">virgin<pos:position pos:line="29" pos:column="38"/></name><operator pos:line="29" pos:column="38">.<pos:position pos:line="29" pos:column="39"/></operator><name pos:line="29" pos:column="39">body_pipe<pos:position pos:line="29" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">Must<pos:position pos:line="30" pos:column="13"/></name><argument_list pos:line="30" pos:column="13">(<argument><expr><call><name><name pos:line="30" pos:column="14">virgin<pos:position pos:line="30" pos:column="20"/></name><operator pos:line="30" pos:column="20">.<pos:position pos:line="30" pos:column="21"/></operator><name pos:line="30" pos:column="21">body_pipe<pos:position pos:line="30" pos:column="30"/></name><operator pos:line="30" pos:column="30">-&gt;<pos:position pos:line="30" pos:column="35"/></operator><name pos:line="30" pos:column="32">setConsumerIfNotLate<pos:position pos:line="30" pos:column="52"/></name></name><argument_list pos:line="30" pos:column="52">(<argument><expr><name pos:line="30" pos:column="53">this<pos:position pos:line="30" pos:column="57"/></name></expr></argument>)<pos:position pos:line="30" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="60"/></expr_stmt>

        <comment type="line" pos:line="32" pos:column="9">// make sure TheBackupLimit is in-sync with the buffer size</comment>
        <expr_stmt><expr><call><name pos:line="33" pos:column="9">Must<pos:position pos:line="33" pos:column="13"/></name><argument_list pos:line="33" pos:column="13">(<argument><expr><name pos:line="33" pos:column="14">TheBackupLimit<pos:position pos:line="33" pos:column="28"/></name> <operator pos:line="33" pos:column="29">&lt;=<pos:position pos:line="33" pos:column="34"/></operator> <cast type="static" pos:line="33" pos:column="32">static_cast<argument_list type="generic" pos:line="33" pos:column="43">&lt;<argument><expr><name pos:line="33" pos:column="44">size_t<pos:position pos:line="33" pos:column="50"/></name></expr></argument>&gt;<pos:position pos:line="33" pos:column="54"/></argument_list><argument_list pos:line="33" pos:column="51">(<argument><expr><call><name><name pos:line="33" pos:column="52">msg<pos:position pos:line="33" pos:column="55"/></name><operator pos:line="33" pos:column="55">-&gt;<pos:position pos:line="33" pos:column="60"/></operator><name pos:line="33" pos:column="57">body_pipe<pos:position pos:line="33" pos:column="66"/></name><operator pos:line="33" pos:column="66">-&gt;<pos:position pos:line="33" pos:column="71"/></operator><name pos:line="33" pos:column="68">buf<pos:position pos:line="33" pos:column="71"/></name></name><argument_list pos:line="33" pos:column="71">()<pos:position pos:line="33" pos:column="73"/></argument_list></call><operator pos:line="33" pos:column="73">.<pos:position pos:line="33" pos:column="74"/></operator><name pos:line="33" pos:column="74">max_capacity<pos:position pos:line="33" pos:column="86"/></name></expr></argument>)<pos:position pos:line="33" pos:column="87"/></argument_list></cast></expr></argument>)<pos:position pos:line="33" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="89"/></expr_stmt>
    }<pos:position pos:line="34" pos:column="6"/></block></then> <else pos:line="34" pos:column="7">else <block pos:line="34" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">debugs<pos:position pos:line="35" pos:column="15"/></name><argument_list pos:line="35" pos:column="15">(<argument><expr><literal type="number" pos:line="35" pos:column="16">93<pos:position pos:line="35" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="20">6<pos:position pos:line="35" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="23">HERE<pos:position pos:line="35" pos:column="27"/></name> <operator pos:line="35" pos:column="28">&lt;&lt;<pos:position pos:line="35" pos:column="36"/></operator> <literal type="string" pos:line="35" pos:column="31">"does not expect virgin body"<pos:position pos:line="35" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="62"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">Must<pos:position pos:line="36" pos:column="13"/></name><argument_list pos:line="36" pos:column="13">(<argument><expr><name><name pos:line="36" pos:column="14">msg<pos:position pos:line="36" pos:column="17"/></name><operator pos:line="36" pos:column="17">-&gt;<pos:position pos:line="36" pos:column="22"/></operator><name pos:line="36" pos:column="19">body_pipe<pos:position pos:line="36" pos:column="28"/></name></name> <operator pos:line="36" pos:column="29">==<pos:position pos:line="36" pos:column="31"/></operator> <name pos:line="36" pos:column="32">NULL<pos:position pos:line="36" pos:column="36"/></name></expr></argument>)<pos:position pos:line="36" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">checkConsuming<pos:position pos:line="37" pos:column="23"/></name><argument_list pos:line="37" pos:column="23">()<pos:position pos:line="37" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="38" pos:column="6"/></block></else></if>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
