<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4313_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ACLChecklist<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">matchAclList<pos:position pos:line="2" pos:column="27"/></name></name><parameter_list pos:line="2" pos:column="27">(<parameter><decl><type><specifier pos:line="2" pos:column="28">const<pos:position pos:line="2" pos:column="33"/></specifier> <name pos:line="2" pos:column="34">ACLList<pos:position pos:line="2" pos:column="41"/></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type> <name pos:line="2" pos:column="44">head<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="50">bool<pos:position pos:line="2" pos:column="54"/></name> <specifier pos:line="2" pos:column="55">const<pos:position pos:line="2" pos:column="60"/></specifier></type> <name pos:line="2" pos:column="61">fast<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="66"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">PROF_start<pos:position pos:line="4" pos:column="15"/></name><argument_list pos:line="4" pos:column="15">(<argument><expr><name pos:line="4" pos:column="16">aclMatchAclList<pos:position pos:line="4" pos:column="31"/></name></expr></argument>)<pos:position pos:line="4" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="33"/></expr_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">ACLList<pos:position pos:line="5" pos:column="18"/></name> <modifier pos:line="5" pos:column="19">*<pos:position pos:line="5" pos:column="20"/></modifier></type><name pos:line="5" pos:column="20">node<pos:position pos:line="5" pos:column="24"/></name> <init pos:line="5" pos:column="25">= <expr><name pos:line="5" pos:column="27">head<pos:position pos:line="5" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="32"/></decl_stmt>

    <expr_stmt><expr><name pos:line="7" pos:column="5">finished_<pos:position pos:line="7" pos:column="14"/></name> <operator pos:line="7" pos:column="15">=<pos:position pos:line="7" pos:column="16"/></operator> <literal type="boolean" pos:line="7" pos:column="17">false<pos:position pos:line="7" pos:column="22"/></literal></expr>;<pos:position pos:line="7" pos:column="23"/></expr_stmt>

    <while pos:line="9" pos:column="5">while <condition pos:line="9" pos:column="11">(<expr><name pos:line="9" pos:column="12">node<pos:position pos:line="9" pos:column="16"/></name></expr>)<pos:position pos:line="9" pos:column="17"/></condition> <block pos:line="9" pos:column="18">{
        <decl_stmt><decl><type><name pos:line="10" pos:column="9">bool<pos:position pos:line="10" pos:column="13"/></name></type> <name pos:line="10" pos:column="14">nodeMatched<pos:position pos:line="10" pos:column="25"/></name> <init pos:line="10" pos:column="26">= <expr><call><name><name pos:line="10" pos:column="28">node<pos:position pos:line="10" pos:column="32"/></name><operator pos:line="10" pos:column="32">-&gt;<pos:position pos:line="10" pos:column="37"/></operator><name pos:line="10" pos:column="34">matches<pos:position pos:line="10" pos:column="41"/></name></name><argument_list pos:line="10" pos:column="41">(<argument><expr><name pos:line="10" pos:column="42">this<pos:position pos:line="10" pos:column="46"/></name></expr></argument>)<pos:position pos:line="10" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="48"/></decl_stmt>

        <if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">fast<pos:position pos:line="12" pos:column="17"/></name></expr>)<pos:position pos:line="12" pos:column="18"/></condition><then pos:line="12" pos:column="18">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="13">changeState<pos:position pos:line="13" pos:column="24"/></name><argument_list pos:line="13" pos:column="24">(<argument><expr><call><name><name pos:line="13" pos:column="25">NullState<pos:position pos:line="13" pos:column="34"/></name><operator pos:line="13" pos:column="34">::<pos:position pos:line="13" pos:column="36"/></operator><name pos:line="13" pos:column="36">Instance<pos:position pos:line="13" pos:column="44"/></name></name><argument_list pos:line="13" pos:column="44">()<pos:position pos:line="13" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="48"/></expr_stmt></block></then></if>

        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><call><name pos:line="15" pos:column="13">finished<pos:position pos:line="15" pos:column="21"/></name><argument_list pos:line="15" pos:column="21">()<pos:position pos:line="15" pos:column="23"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="24"/></condition><then pos:line="15" pos:column="24"> <block pos:line="15" pos:column="25">{
            <expr_stmt><expr><call><name pos:line="16" pos:column="13">PROF_stop<pos:position pos:line="16" pos:column="22"/></name><argument_list pos:line="16" pos:column="22">(<argument><expr><name pos:line="16" pos:column="23">aclMatchAclList<pos:position pos:line="16" pos:column="38"/></name></expr></argument>)<pos:position pos:line="16" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="40"/></expr_stmt>
            <return pos:line="17" pos:column="13">return;<pos:position pos:line="17" pos:column="20"/></return>
        }<pos:position pos:line="18" pos:column="10"/></block></then></if>

        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><operator pos:line="20" pos:column="13">!<pos:position pos:line="20" pos:column="14"/></operator><name pos:line="20" pos:column="14">nodeMatched<pos:position pos:line="20" pos:column="25"/></name> <operator pos:line="20" pos:column="26">||<pos:position pos:line="20" pos:column="28"/></operator> <name pos:line="20" pos:column="29">state_<pos:position pos:line="20" pos:column="35"/></name> <operator pos:line="20" pos:column="36">!=<pos:position pos:line="20" pos:column="38"/></operator> <call><name><name pos:line="20" pos:column="39">NullState<pos:position pos:line="20" pos:column="48"/></name><operator pos:line="20" pos:column="48">::<pos:position pos:line="20" pos:column="50"/></operator><name pos:line="20" pos:column="50">Instance<pos:position pos:line="20" pos:column="58"/></name></name><argument_list pos:line="20" pos:column="58">()<pos:position pos:line="20" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="61"/></condition><then pos:line="20" pos:column="61"> <block pos:line="20" pos:column="62">{
            <expr_stmt><expr><call><name pos:line="21" pos:column="13">debugs<pos:position pos:line="21" pos:column="19"/></name><argument_list pos:line="21" pos:column="19">(<argument><expr><literal type="number" pos:line="21" pos:column="20">28<pos:position pos:line="21" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="24">3<pos:position pos:line="21" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="27">"aclmatchAclList: "<pos:position pos:line="21" pos:column="46"/></literal> <operator pos:line="21" pos:column="47">&lt;&lt;<pos:position pos:line="21" pos:column="55"/></operator> <name pos:line="21" pos:column="50">this<pos:position pos:line="21" pos:column="54"/></name> <operator pos:line="21" pos:column="55">&lt;&lt;<pos:position pos:line="21" pos:column="63"/></operator> <literal type="string" pos:line="21" pos:column="58">" returning false (AND list entry failed to match)"<pos:position pos:line="21" pos:column="109"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="110"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="111"/></expr_stmt>

            <decl_stmt><decl><type><name pos:line="23" pos:column="13">bool<pos:position pos:line="23" pos:column="17"/></name></type> <name pos:line="23" pos:column="18">async<pos:position pos:line="23" pos:column="23"/></name> <init pos:line="23" pos:column="24">= <expr><name pos:line="23" pos:column="26">state_<pos:position pos:line="23" pos:column="32"/></name> <operator pos:line="23" pos:column="33">!=<pos:position pos:line="23" pos:column="35"/></operator> <call><name><name pos:line="23" pos:column="36">NullState<pos:position pos:line="23" pos:column="45"/></name><operator pos:line="23" pos:column="45">::<pos:position pos:line="23" pos:column="47"/></operator><name pos:line="23" pos:column="47">Instance<pos:position pos:line="23" pos:column="55"/></name></name><argument_list pos:line="23" pos:column="55">()<pos:position pos:line="23" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="23" pos:column="58"/></decl_stmt>

            <expr_stmt><expr><call><name pos:line="25" pos:column="13">checkForAsync<pos:position pos:line="25" pos:column="26"/></name><argument_list pos:line="25" pos:column="26">()<pos:position pos:line="25" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="29"/></expr_stmt>

            <decl_stmt><decl><type><name pos:line="27" pos:column="13">bool<pos:position pos:line="27" pos:column="17"/></name></type> <name pos:line="27" pos:column="18">async_in_progress<pos:position pos:line="27" pos:column="35"/></name> <init pos:line="27" pos:column="36">= <expr><call><name pos:line="27" pos:column="38">asyncInProgress<pos:position pos:line="27" pos:column="53"/></name><argument_list pos:line="27" pos:column="53">()<pos:position pos:line="27" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="27" pos:column="56"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="28" pos:column="13">debugs<pos:position pos:line="28" pos:column="19"/></name><argument_list pos:line="28" pos:column="19">(<argument><expr><literal type="number" pos:line="28" pos:column="20">28<pos:position pos:line="28" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="24">3<pos:position pos:line="28" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="27">"aclmatchAclList: async="<pos:position pos:line="28" pos:column="52"/></literal> <operator pos:line="28" pos:column="53">&lt;&lt;<pos:position pos:line="28" pos:column="61"/></operator> <operator pos:line="28" pos:column="56">(<pos:position pos:line="28" pos:column="57"/></operator><ternary><condition><expr><name pos:line="28" pos:column="57">async<pos:position pos:line="28" pos:column="62"/></name></expr> ?<pos:position pos:line="28" pos:column="64"/></condition><then pos:line="28" pos:column="64"> <expr><literal type="number" pos:line="28" pos:column="65">1<pos:position pos:line="28" pos:column="66"/></literal></expr> <pos:position pos:line="28" pos:column="67"/></then><else pos:line="28" pos:column="67">: <expr><literal type="number" pos:line="28" pos:column="69">0<pos:position pos:line="28" pos:column="70"/></literal></expr></else></ternary><operator pos:line="28" pos:column="70">)<pos:position pos:line="28" pos:column="71"/></operator> <operator pos:line="28" pos:column="72">&lt;&lt;<pos:position pos:line="28" pos:column="80"/></operator>
                   <literal type="string" pos:line="29" pos:column="20">" nodeMatched="<pos:position pos:line="29" pos:column="35"/></literal> <operator pos:line="29" pos:column="36">&lt;&lt;<pos:position pos:line="29" pos:column="44"/></operator> <operator pos:line="29" pos:column="39">(<pos:position pos:line="29" pos:column="40"/></operator><ternary><condition><expr><name pos:line="29" pos:column="40">nodeMatched<pos:position pos:line="29" pos:column="51"/></name></expr> ?<pos:position pos:line="29" pos:column="53"/></condition><then pos:line="29" pos:column="53"> <expr><literal type="number" pos:line="29" pos:column="54">1<pos:position pos:line="29" pos:column="55"/></literal></expr> <pos:position pos:line="29" pos:column="56"/></then><else pos:line="29" pos:column="56">: <expr><literal type="number" pos:line="29" pos:column="58">0<pos:position pos:line="29" pos:column="59"/></literal></expr></else></ternary><operator pos:line="29" pos:column="59">)<pos:position pos:line="29" pos:column="60"/></operator> <operator pos:line="29" pos:column="61">&lt;&lt;<pos:position pos:line="29" pos:column="69"/></operator>
                   <literal type="string" pos:line="30" pos:column="20">" async_in_progress="<pos:position pos:line="30" pos:column="41"/></literal> <operator pos:line="30" pos:column="42">&lt;&lt;<pos:position pos:line="30" pos:column="50"/></operator> <operator pos:line="30" pos:column="45">(<pos:position pos:line="30" pos:column="46"/></operator><ternary><condition><expr><name pos:line="30" pos:column="46">async_in_progress<pos:position pos:line="30" pos:column="63"/></name></expr> ?<pos:position pos:line="30" pos:column="65"/></condition><then pos:line="30" pos:column="65"> <expr><literal type="number" pos:line="30" pos:column="66">1<pos:position pos:line="30" pos:column="67"/></literal></expr> <pos:position pos:line="30" pos:column="68"/></then><else pos:line="30" pos:column="68">: <expr><literal type="number" pos:line="30" pos:column="70">0<pos:position pos:line="30" pos:column="71"/></literal></expr></else></ternary><operator pos:line="30" pos:column="71">)<pos:position pos:line="30" pos:column="72"/></operator> <operator pos:line="30" pos:column="73">&lt;&lt;<pos:position pos:line="30" pos:column="81"/></operator>
                   <literal type="string" pos:line="31" pos:column="20">" lastACLResult() = "<pos:position pos:line="31" pos:column="41"/></literal> <operator pos:line="31" pos:column="42">&lt;&lt;<pos:position pos:line="31" pos:column="50"/></operator> <operator pos:line="31" pos:column="45">(<pos:position pos:line="31" pos:column="46"/></operator><ternary><condition><expr><call><name pos:line="31" pos:column="46">lastACLResult<pos:position pos:line="31" pos:column="59"/></name><argument_list pos:line="31" pos:column="59">()<pos:position pos:line="31" pos:column="61"/></argument_list></call></expr> ?<pos:position pos:line="31" pos:column="63"/></condition><then pos:line="31" pos:column="63"> <expr><literal type="number" pos:line="31" pos:column="64">1<pos:position pos:line="31" pos:column="65"/></literal></expr> <pos:position pos:line="31" pos:column="66"/></then><else pos:line="31" pos:column="66">: <expr><literal type="number" pos:line="31" pos:column="68">0<pos:position pos:line="31" pos:column="69"/></literal></expr></else></ternary><operator pos:line="31" pos:column="69">)<pos:position pos:line="31" pos:column="70"/></operator> <operator pos:line="31" pos:column="71">&lt;&lt;<pos:position pos:line="31" pos:column="79"/></operator>
                   <literal type="string" pos:line="32" pos:column="20">" finished() = "<pos:position pos:line="32" pos:column="36"/></literal> <operator pos:line="32" pos:column="37">&lt;&lt;<pos:position pos:line="32" pos:column="45"/></operator> <call><name pos:line="32" pos:column="40">finished<pos:position pos:line="32" pos:column="48"/></name><argument_list pos:line="32" pos:column="48">()<pos:position pos:line="32" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="32" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="52"/></expr_stmt>

            <if pos:line="34" pos:column="13">if <condition pos:line="34" pos:column="16">(<expr><call><name pos:line="34" pos:column="17">finished<pos:position pos:line="34" pos:column="25"/></name><argument_list pos:line="34" pos:column="25">()<pos:position pos:line="34" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="28"/></condition><then pos:line="34" pos:column="28"> <block pos:line="34" pos:column="29">{
                <expr_stmt><expr><call><name pos:line="35" pos:column="17">PROF_stop<pos:position pos:line="35" pos:column="26"/></name><argument_list pos:line="35" pos:column="26">(<argument><expr><name pos:line="35" pos:column="27">aclMatchAclList<pos:position pos:line="35" pos:column="42"/></name></expr></argument>)<pos:position pos:line="35" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="44"/></expr_stmt>
                <return pos:line="36" pos:column="17">return;<pos:position pos:line="36" pos:column="24"/></return>
            }<pos:position pos:line="37" pos:column="14"/></block></then></if>

            <if pos:line="39" pos:column="13">if <condition pos:line="39" pos:column="16">(<expr><name pos:line="39" pos:column="17">async<pos:position pos:line="39" pos:column="22"/></name> <operator pos:line="39" pos:column="23">&amp;&amp;<pos:position pos:line="39" pos:column="33"/></operator> <name pos:line="39" pos:column="26">nodeMatched<pos:position pos:line="39" pos:column="37"/></name> <operator pos:line="39" pos:column="38">&amp;&amp;<pos:position pos:line="39" pos:column="48"/></operator> <operator pos:line="39" pos:column="41">!<pos:position pos:line="39" pos:column="42"/></operator><call><name pos:line="39" pos:column="42">asyncInProgress<pos:position pos:line="39" pos:column="57"/></name><argument_list pos:line="39" pos:column="57">()<pos:position pos:line="39" pos:column="59"/></argument_list></call> <operator pos:line="39" pos:column="60">&amp;&amp;<pos:position pos:line="39" pos:column="70"/></operator> <call><name pos:line="39" pos:column="63">lastACLResult<pos:position pos:line="39" pos:column="76"/></name><argument_list pos:line="39" pos:column="76">()<pos:position pos:line="39" pos:column="78"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="79"/></condition><then pos:line="39" pos:column="79"> <block pos:line="39" pos:column="80">{
                <comment type="line" pos:line="40" pos:column="17">// async acl, but using cached response, and it was a match</comment>
                <expr_stmt><expr><name pos:line="41" pos:column="17">node<pos:position pos:line="41" pos:column="21"/></name> <operator pos:line="41" pos:column="22">=<pos:position pos:line="41" pos:column="23"/></operator> <name><name pos:line="41" pos:column="24">node<pos:position pos:line="41" pos:column="28"/></name><operator pos:line="41" pos:column="28">-&gt;<pos:position pos:line="41" pos:column="33"/></operator><name pos:line="41" pos:column="30">next<pos:position pos:line="41" pos:column="34"/></name></name></expr>;<pos:position pos:line="41" pos:column="35"/></expr_stmt>
                <continue pos:line="42" pos:column="17">continue;<pos:position pos:line="42" pos:column="26"/></continue>
            }<pos:position pos:line="43" pos:column="14"/></block></then></if>

            <expr_stmt><expr><call><name pos:line="45" pos:column="13">PROF_stop<pos:position pos:line="45" pos:column="22"/></name><argument_list pos:line="45" pos:column="22">(<argument><expr><name pos:line="45" pos:column="23">aclMatchAclList<pos:position pos:line="45" pos:column="38"/></name></expr></argument>)<pos:position pos:line="45" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="40"/></expr_stmt>

            <return pos:line="47" pos:column="13">return;<pos:position pos:line="47" pos:column="20"/></return>
        }<pos:position pos:line="48" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="50" pos:column="9">node<pos:position pos:line="50" pos:column="13"/></name> <operator pos:line="50" pos:column="14">=<pos:position pos:line="50" pos:column="15"/></operator> <name><name pos:line="50" pos:column="16">node<pos:position pos:line="50" pos:column="20"/></name><operator pos:line="50" pos:column="20">-&gt;<pos:position pos:line="50" pos:column="25"/></operator><name pos:line="50" pos:column="22">next<pos:position pos:line="50" pos:column="26"/></name></name></expr>;<pos:position pos:line="50" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="51" pos:column="6"/></block></while>

    <expr_stmt><expr><call><name pos:line="53" pos:column="5">debugs<pos:position pos:line="53" pos:column="11"/></name><argument_list pos:line="53" pos:column="11">(<argument><expr><literal type="number" pos:line="53" pos:column="12">28<pos:position pos:line="53" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="53" pos:column="16">3<pos:position pos:line="53" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="19">"aclmatchAclList: "<pos:position pos:line="53" pos:column="38"/></literal> <operator pos:line="53" pos:column="39">&lt;&lt;<pos:position pos:line="53" pos:column="47"/></operator> <name pos:line="53" pos:column="42">this<pos:position pos:line="53" pos:column="46"/></name> <operator pos:line="53" pos:column="47">&lt;&lt;<pos:position pos:line="53" pos:column="55"/></operator> <literal type="string" pos:line="53" pos:column="50">" returning true (AND list satisfied)"<pos:position pos:line="53" pos:column="88"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="90"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="55" pos:column="5">markFinished<pos:position pos:line="55" pos:column="17"/></name><argument_list pos:line="55" pos:column="17">()<pos:position pos:line="55" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="56" pos:column="5">PROF_stop<pos:position pos:line="56" pos:column="14"/></name><argument_list pos:line="56" pos:column="14">(<argument><expr><name pos:line="56" pos:column="15">aclMatchAclList<pos:position pos:line="56" pos:column="30"/></name></expr></argument>)<pos:position pos:line="56" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="32"/></expr_stmt>
}<pos:position pos:line="57" pos:column="2"/></block></function></unit>
