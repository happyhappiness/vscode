<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_857_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">comm_read<pos:position pos:line="2" pos:column="10"/></name><parameter_list pos:line="2" pos:column="10">(<parameter><decl><type><specifier pos:line="2" pos:column="11">const<pos:position pos:line="2" pos:column="16"/></specifier> <name><name pos:line="2" pos:column="17">Comm<pos:position pos:line="2" pos:column="21"/></name><operator pos:line="2" pos:column="21">::<pos:position pos:line="2" pos:column="23"/></operator><name pos:line="2" pos:column="23">ConnectionPointer<pos:position pos:line="2" pos:column="40"/></name></name> <modifier pos:line="2" pos:column="41">&amp;<pos:position pos:line="2" pos:column="46"/></modifier></type><name pos:line="2" pos:column="42">conn<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="48">char<pos:position pos:line="2" pos:column="52"/></name> <modifier pos:line="2" pos:column="53">*<pos:position pos:line="2" pos:column="54"/></modifier></type><name pos:line="2" pos:column="54">buf<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="59">int<pos:position pos:line="2" pos:column="62"/></name></type> <name pos:line="2" pos:column="63">size<pos:position pos:line="2" pos:column="67"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="69">AsyncCall<pos:position pos:line="2" pos:column="78"/></name><operator pos:line="2" pos:column="78">::<pos:position pos:line="2" pos:column="80"/></operator><name pos:line="2" pos:column="80">Pointer<pos:position pos:line="2" pos:column="87"/></name></name> <modifier pos:line="2" pos:column="88">&amp;<pos:position pos:line="2" pos:column="93"/></modifier></type><name pos:line="2" pos:column="89">callback<pos:position pos:line="2" pos:column="97"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="98"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">5<pos:position pos:line="4" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="15">5<pos:position pos:line="4" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="18">"comm_read, queueing read for "<pos:position pos:line="4" pos:column="49"/></literal> <operator pos:line="4" pos:column="50">&lt;&lt;<pos:position pos:line="4" pos:column="58"/></operator> <name pos:line="4" pos:column="53">conn<pos:position pos:line="4" pos:column="57"/></name> <operator pos:line="4" pos:column="58">&lt;&lt;<pos:position pos:line="4" pos:column="66"/></operator> <literal type="string" pos:line="4" pos:column="61">"; asynCall "<pos:position pos:line="4" pos:column="74"/></literal> <operator pos:line="4" pos:column="75">&lt;&lt;<pos:position pos:line="4" pos:column="83"/></operator> <name pos:line="4" pos:column="78">callback<pos:position pos:line="4" pos:column="86"/></name></expr></argument>)<pos:position pos:line="4" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="88"/></expr_stmt>

    <comment type="block" pos:line="6" pos:column="5">/* Make sure we are open and not closing */</comment>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><call><name><name pos:line="7" pos:column="12">Comm<pos:position pos:line="7" pos:column="16"/></name><operator pos:line="7" pos:column="16">::<pos:position pos:line="7" pos:column="18"/></operator><name pos:line="7" pos:column="18">IsConnOpen<pos:position pos:line="7" pos:column="28"/></name></name><argument_list pos:line="7" pos:column="28">(<argument><expr><name pos:line="7" pos:column="29">conn<pos:position pos:line="7" pos:column="33"/></name></expr></argument>)<pos:position pos:line="7" pos:column="34"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">assert<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><operator pos:line="8" pos:column="12">!<pos:position pos:line="8" pos:column="13"/></operator><name><name pos:line="8" pos:column="13">fd_table<pos:position pos:line="8" pos:column="21"/></name><index pos:line="8" pos:column="21">[<expr><name><name pos:line="8" pos:column="22">conn<pos:position pos:line="8" pos:column="26"/></name><operator pos:line="8" pos:column="26">-&gt;<pos:position pos:line="8" pos:column="31"/></operator><name pos:line="8" pos:column="28">fd<pos:position pos:line="8" pos:column="30"/></name></name></expr>]<pos:position pos:line="8" pos:column="31"/></index></name><operator pos:line="8" pos:column="31">.<pos:position pos:line="8" pos:column="32"/></operator><call><name pos:line="8" pos:column="32">closing<pos:position pos:line="8" pos:column="39"/></name><argument_list pos:line="8" pos:column="39">()<pos:position pos:line="8" pos:column="41"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="43"/></expr_stmt>
    <decl_stmt><decl><type><name><name pos:line="9" pos:column="5">Comm<pos:position pos:line="9" pos:column="9"/></name><operator pos:line="9" pos:column="9">::<pos:position pos:line="9" pos:column="11"/></operator><name pos:line="9" pos:column="11">IoCallback<pos:position pos:line="9" pos:column="21"/></name></name> <modifier pos:line="9" pos:column="22">*<pos:position pos:line="9" pos:column="23"/></modifier></type><name pos:line="9" pos:column="23">ccb<pos:position pos:line="9" pos:column="26"/></name> <init pos:line="9" pos:column="27">= <expr><call><name pos:line="9" pos:column="29">COMMIO_FD_READCB<pos:position pos:line="9" pos:column="45"/></name><argument_list pos:line="9" pos:column="45">(<argument><expr><name><name pos:line="9" pos:column="46">conn<pos:position pos:line="9" pos:column="50"/></name><operator pos:line="9" pos:column="50">-&gt;<pos:position pos:line="9" pos:column="55"/></operator><name pos:line="9" pos:column="52">fd<pos:position pos:line="9" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="56"/></decl_stmt>

    <comment type="line" pos:line="11" pos:column="5">// Make sure we are either not reading or just passively monitoring.</comment>
    <comment type="line" pos:line="12" pos:column="5">// Active/passive conflicts are OK and simply cancel passive monitoring.</comment>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><call><name><name pos:line="13" pos:column="9">ccb<pos:position pos:line="13" pos:column="12"/></name><operator pos:line="13" pos:column="12">-&gt;<pos:position pos:line="13" pos:column="17"/></operator><name pos:line="13" pos:column="14">active<pos:position pos:line="13" pos:column="20"/></name></name><argument_list pos:line="13" pos:column="20">()<pos:position pos:line="13" pos:column="22"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="23"/></condition><then pos:line="13" pos:column="23"> <block pos:line="13" pos:column="24">{
        <comment type="line" pos:line="14" pos:column="9">// if the assertion below fails, we have an active comm_read conflict</comment>
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">assert<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><name><name pos:line="15" pos:column="16">fd_table<pos:position pos:line="15" pos:column="24"/></name><index pos:line="15" pos:column="24">[<expr><name><name pos:line="15" pos:column="25">conn<pos:position pos:line="15" pos:column="29"/></name><operator pos:line="15" pos:column="29">-&gt;<pos:position pos:line="15" pos:column="34"/></operator><name pos:line="15" pos:column="31">fd<pos:position pos:line="15" pos:column="33"/></name></name></expr>]<pos:position pos:line="15" pos:column="34"/></index></name><operator pos:line="15" pos:column="34">.<pos:position pos:line="15" pos:column="35"/></operator><name pos:line="15" pos:column="35">halfClosedReader<pos:position pos:line="15" pos:column="51"/></name> <operator pos:line="15" pos:column="52">!=<pos:position pos:line="15" pos:column="54"/></operator> <name pos:line="15" pos:column="55">NULL<pos:position pos:line="15" pos:column="59"/></name></expr></argument>)<pos:position pos:line="15" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="61"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">commStopHalfClosedMonitor<pos:position pos:line="16" pos:column="34"/></name><argument_list pos:line="16" pos:column="34">(<argument><expr><name><name pos:line="16" pos:column="35">conn<pos:position pos:line="16" pos:column="39"/></name><operator pos:line="16" pos:column="39">-&gt;<pos:position pos:line="16" pos:column="44"/></operator><name pos:line="16" pos:column="41">fd<pos:position pos:line="16" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">assert<pos:position pos:line="17" pos:column="15"/></name><argument_list pos:line="17" pos:column="15">(<argument><expr><operator pos:line="17" pos:column="16">!<pos:position pos:line="17" pos:column="17"/></operator><call><name><name pos:line="17" pos:column="17">ccb<pos:position pos:line="17" pos:column="20"/></name><operator pos:line="17" pos:column="20">-&gt;<pos:position pos:line="17" pos:column="25"/></operator><name pos:line="17" pos:column="22">active<pos:position pos:line="17" pos:column="28"/></name></name><argument_list pos:line="17" pos:column="28">()<pos:position pos:line="17" pos:column="30"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="19" pos:column="5">ccb<pos:position pos:line="19" pos:column="8"/></name><operator pos:line="19" pos:column="8">-&gt;<pos:position pos:line="19" pos:column="13"/></operator><name pos:line="19" pos:column="10">conn<pos:position pos:line="19" pos:column="14"/></name></name> <operator pos:line="19" pos:column="15">=<pos:position pos:line="19" pos:column="16"/></operator> <name pos:line="19" pos:column="17">conn<pos:position pos:line="19" pos:column="21"/></name></expr>;<pos:position pos:line="19" pos:column="22"/></expr_stmt>

    <comment type="block" pos:line="21" pos:column="5">/* Queue the read */</comment>
    <expr_stmt><expr><call><name><name pos:line="22" pos:column="5">ccb<pos:position pos:line="22" pos:column="8"/></name><operator pos:line="22" pos:column="8">-&gt;<pos:position pos:line="22" pos:column="13"/></operator><name pos:line="22" pos:column="10">setCallback<pos:position pos:line="22" pos:column="21"/></name></name><argument_list pos:line="22" pos:column="21">(<argument><expr><name><name pos:line="22" pos:column="22">Comm<pos:position pos:line="22" pos:column="26"/></name><operator pos:line="22" pos:column="26">::<pos:position pos:line="22" pos:column="28"/></operator><name pos:line="22" pos:column="28">IOCB_READ<pos:position pos:line="22" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="39">callback<pos:position pos:line="22" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="49">(<pos:position pos:line="22" pos:column="50"/></operator><name pos:line="22" pos:column="50">char<pos:position pos:line="22" pos:column="54"/></name> <operator pos:line="22" pos:column="55">*<pos:position pos:line="22" pos:column="56"/></operator><operator pos:line="22" pos:column="56">)<pos:position pos:line="22" pos:column="57"/></operator><name pos:line="22" pos:column="57">buf<pos:position pos:line="22" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="62">NULL<pos:position pos:line="22" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="68">size<pos:position pos:line="22" pos:column="72"/></name></expr></argument>)<pos:position pos:line="22" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="74"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="23" pos:column="5">Comm<pos:position pos:line="23" pos:column="9"/></name><operator pos:line="23" pos:column="9">::<pos:position pos:line="23" pos:column="11"/></operator><name pos:line="23" pos:column="11">SetSelect<pos:position pos:line="23" pos:column="20"/></name></name><argument_list pos:line="23" pos:column="20">(<argument><expr><name><name pos:line="23" pos:column="21">conn<pos:position pos:line="23" pos:column="25"/></name><operator pos:line="23" pos:column="25">-&gt;<pos:position pos:line="23" pos:column="30"/></operator><name pos:line="23" pos:column="27">fd<pos:position pos:line="23" pos:column="29"/></name></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="31">COMM_SELECT_READ<pos:position pos:line="23" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="49">commHandleRead<pos:position pos:line="23" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="65">ccb<pos:position pos:line="23" pos:column="68"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="70">0<pos:position pos:line="23" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="73"/></expr_stmt>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
