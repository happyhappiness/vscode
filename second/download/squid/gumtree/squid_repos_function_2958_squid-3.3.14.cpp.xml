<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2958_squid-3.3.14.cpp" pos:tabs="8"><function type="operator"><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type>
<name><name pos:line="2" pos:column="1">StoreEntry<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">operator <name pos:line="2" pos:column="22">new<pos:position pos:line="2" pos:column="25"/></name></name></name> <parameter_list pos:line="2" pos:column="26">(<parameter><decl><type><name pos:line="2" pos:column="27">size_t<pos:position pos:line="2" pos:column="33"/></name></type> <name pos:line="2" pos:column="34">bytecount<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="44"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name> <argument_list pos:line="4" pos:column="12">(<argument><expr><name pos:line="4" pos:column="13">bytecount<pos:position pos:line="4" pos:column="22"/></name> <operator pos:line="4" pos:column="23">==<pos:position pos:line="4" pos:column="25"/></operator> <sizeof pos:line="4" pos:column="26">sizeof <argument_list pos:line="4" pos:column="33">(<argument><expr><name pos:line="4" pos:column="34">StoreEntry<pos:position pos:line="4" pos:column="44"/></name></expr></argument>)<pos:position pos:line="4" pos:column="45"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="4" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="47"/></expr_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">!<pos:position pos:line="6" pos:column="10"/></operator><name pos:line="6" pos:column="10">pool<pos:position pos:line="6" pos:column="14"/></name></expr>)<pos:position pos:line="6" pos:column="15"/></condition><then pos:line="6" pos:column="15"> <block pos:line="6" pos:column="16">{
        <expr_stmt><expr><name pos:line="7" pos:column="9">pool<pos:position pos:line="7" pos:column="13"/></name> <operator pos:line="7" pos:column="14">=<pos:position pos:line="7" pos:column="15"/></operator> <call><name pos:line="7" pos:column="16">memPoolCreate<pos:position pos:line="7" pos:column="29"/></name> <argument_list pos:line="7" pos:column="30">(<argument><expr><literal type="string" pos:line="7" pos:column="31">"StoreEntry"<pos:position pos:line="7" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="45">bytecount<pos:position pos:line="7" pos:column="54"/></name></expr></argument>)<pos:position pos:line="7" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="56"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="8" pos:column="9">pool<pos:position pos:line="8" pos:column="13"/></name><operator pos:line="8" pos:column="13">-&gt;<pos:position pos:line="8" pos:column="18"/></operator><name pos:line="8" pos:column="15">setChunkSize<pos:position pos:line="8" pos:column="27"/></name></name><argument_list pos:line="8" pos:column="27">(<argument><expr><literal type="number" pos:line="8" pos:column="28">2048<pos:position pos:line="8" pos:column="32"/></literal> <operator pos:line="8" pos:column="33">*<pos:position pos:line="8" pos:column="34"/></operator> <literal type="number" pos:line="8" pos:column="35">1024<pos:position pos:line="8" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>

    <return pos:line="11" pos:column="5">return <expr><call><name><name pos:line="11" pos:column="12">pool<pos:position pos:line="11" pos:column="16"/></name><operator pos:line="11" pos:column="16">-&gt;<pos:position pos:line="11" pos:column="21"/></operator><name pos:line="11" pos:column="18">alloc<pos:position pos:line="11" pos:column="23"/></name></name><argument_list pos:line="11" pos:column="23">()<pos:position pos:line="11" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="26"/></return>
}<pos:position pos:line="12" pos:column="2"/></block></function></unit>
