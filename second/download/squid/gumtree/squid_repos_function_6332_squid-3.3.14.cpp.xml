<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6332_squid-3.3.14.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name><name pos:line="1" pos:column="7">Comm<pos:position pos:line="1" pos:column="11"/></name><operator pos:line="1" pos:column="11">::<pos:position pos:line="1" pos:column="13"/></operator><name pos:line="1" pos:column="13">ConnectionPointer<pos:position pos:line="1" pos:column="30"/></name></name> <modifier pos:line="1" pos:column="31">&amp;<pos:position pos:line="1" pos:column="36"/></modifier></type>
<name><name pos:line="2" pos:column="1">Ipc<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">ImportFdIntoComm<pos:position pos:line="2" pos:column="22"/></name></name><parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><specifier pos:line="2" pos:column="23">const<pos:position pos:line="2" pos:column="28"/></specifier> <name><name pos:line="2" pos:column="29">Comm<pos:position pos:line="2" pos:column="33"/></name><operator pos:line="2" pos:column="33">::<pos:position pos:line="2" pos:column="35"/></operator><name pos:line="2" pos:column="35">ConnectionPointer<pos:position pos:line="2" pos:column="52"/></name></name> <modifier pos:line="2" pos:column="53">&amp;<pos:position pos:line="2" pos:column="58"/></modifier></type><name pos:line="2" pos:column="54">conn<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="60">int<pos:position pos:line="2" pos:column="63"/></name></type> <name pos:line="2" pos:column="64">socktype<pos:position pos:line="2" pos:column="72"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="74">int<pos:position pos:line="2" pos:column="77"/></name></type> <name pos:line="2" pos:column="78">protocol<pos:position pos:line="2" pos:column="86"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="88">Ipc<pos:position pos:line="2" pos:column="91"/></name><operator pos:line="2" pos:column="91">::<pos:position pos:line="2" pos:column="93"/></operator><name pos:line="2" pos:column="93">FdNoteId<pos:position pos:line="2" pos:column="101"/></name></name></type> <name pos:line="2" pos:column="102">noteId<pos:position pos:line="2" pos:column="108"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="109"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">struct<pos:position pos:line="4" pos:column="11"/></name> <name pos:line="4" pos:column="12">sockaddr_in<pos:position pos:line="4" pos:column="23"/></name></name></type> <name pos:line="4" pos:column="24">addr<pos:position pos:line="4" pos:column="28"/></name></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">socklen_t<pos:position pos:line="5" pos:column="14"/></name></type> <name pos:line="5" pos:column="15">len<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><sizeof pos:line="5" pos:column="21">sizeof<argument_list pos:line="5" pos:column="27">(<argument><expr><name pos:line="5" pos:column="28">addr<pos:position pos:line="5" pos:column="32"/></name></expr></argument>)<pos:position pos:line="5" pos:column="33"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="5" pos:column="34"/></decl_stmt>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><call><name pos:line="6" pos:column="9">getsockname<pos:position pos:line="6" pos:column="20"/></name><argument_list pos:line="6" pos:column="20">(<argument><expr><name><name pos:line="6" pos:column="21">conn<pos:position pos:line="6" pos:column="25"/></name><operator pos:line="6" pos:column="25">-&gt;<pos:position pos:line="6" pos:column="30"/></operator><name pos:line="6" pos:column="27">fd<pos:position pos:line="6" pos:column="29"/></name></name></expr></argument>, <argument><expr><cast type="reinterpret" pos:line="6" pos:column="31">reinterpret_cast<argument_list type="generic" pos:line="6" pos:column="47">&lt;<argument><expr><name pos:line="6" pos:column="48">sockaddr<pos:position pos:line="6" pos:column="56"/></name><operator pos:line="6" pos:column="56">*<pos:position pos:line="6" pos:column="57"/></operator></expr></argument>&gt;<pos:position pos:line="6" pos:column="61"/></argument_list><argument_list pos:line="6" pos:column="58">(<argument><expr><operator pos:line="6" pos:column="59">&amp;<pos:position pos:line="6" pos:column="64"/></operator><name pos:line="6" pos:column="60">addr<pos:position pos:line="6" pos:column="64"/></name></expr></argument>)<pos:position pos:line="6" pos:column="65"/></argument_list></cast></expr></argument>, <argument><expr><operator pos:line="6" pos:column="67">&amp;<pos:position pos:line="6" pos:column="72"/></operator><name pos:line="6" pos:column="68">len<pos:position pos:line="6" pos:column="71"/></name></expr></argument>)<pos:position pos:line="6" pos:column="72"/></argument_list></call> <operator pos:line="6" pos:column="73">==<pos:position pos:line="6" pos:column="75"/></operator> <literal type="number" pos:line="6" pos:column="76">0<pos:position pos:line="6" pos:column="77"/></literal></expr>)<pos:position pos:line="6" pos:column="78"/></condition><then pos:line="6" pos:column="78"> <block pos:line="6" pos:column="79">{
        <expr_stmt><expr><name><name pos:line="7" pos:column="9">conn<pos:position pos:line="7" pos:column="13"/></name><operator pos:line="7" pos:column="13">-&gt;<pos:position pos:line="7" pos:column="18"/></operator><name pos:line="7" pos:column="15">remote<pos:position pos:line="7" pos:column="21"/></name></name> <operator pos:line="7" pos:column="22">=<pos:position pos:line="7" pos:column="23"/></operator> <name pos:line="7" pos:column="24">addr<pos:position pos:line="7" pos:column="28"/></name></expr>;<pos:position pos:line="7" pos:column="29"/></expr_stmt>
        <decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">addrinfo<pos:position pos:line="8" pos:column="24"/></name></name><modifier pos:line="8" pos:column="24">*<pos:position pos:line="8" pos:column="25"/></modifier></type> <name pos:line="8" pos:column="26">addr_info<pos:position pos:line="8" pos:column="35"/></name> <init pos:line="8" pos:column="36">= <expr><name pos:line="8" pos:column="38">NULL<pos:position pos:line="8" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="43"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="9" pos:column="9">conn<pos:position pos:line="9" pos:column="13"/></name><operator pos:line="9" pos:column="13">-&gt;<pos:position pos:line="9" pos:column="18"/></operator><name pos:line="9" pos:column="15">remote<pos:position pos:line="9" pos:column="21"/></name><operator pos:line="9" pos:column="21">.<pos:position pos:line="9" pos:column="22"/></operator><name pos:line="9" pos:column="22">GetAddrInfo<pos:position pos:line="9" pos:column="33"/></name></name><argument_list pos:line="9" pos:column="33">(<argument><expr><name pos:line="9" pos:column="34">addr_info<pos:position pos:line="9" pos:column="43"/></name></expr></argument>)<pos:position pos:line="9" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="10" pos:column="9">addr_info<pos:position pos:line="10" pos:column="18"/></name><operator pos:line="10" pos:column="18">-&gt;<pos:position pos:line="10" pos:column="23"/></operator><name pos:line="10" pos:column="20">ai_socktype<pos:position pos:line="10" pos:column="31"/></name></name> <operator pos:line="10" pos:column="32">=<pos:position pos:line="10" pos:column="33"/></operator> <name pos:line="10" pos:column="34">socktype<pos:position pos:line="10" pos:column="42"/></name></expr>;<pos:position pos:line="10" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="11" pos:column="9">addr_info<pos:position pos:line="11" pos:column="18"/></name><operator pos:line="11" pos:column="18">-&gt;<pos:position pos:line="11" pos:column="23"/></operator><name pos:line="11" pos:column="20">ai_protocol<pos:position pos:line="11" pos:column="31"/></name></name> <operator pos:line="11" pos:column="32">=<pos:position pos:line="11" pos:column="33"/></operator> <name pos:line="11" pos:column="34">protocol<pos:position pos:line="11" pos:column="42"/></name></expr>;<pos:position pos:line="11" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">comm_import_opened<pos:position pos:line="12" pos:column="27"/></name><argument_list pos:line="12" pos:column="27">(<argument><expr><name pos:line="12" pos:column="28">conn<pos:position pos:line="12" pos:column="32"/></name></expr></argument>, <argument><expr><call><name><name pos:line="12" pos:column="34">Ipc<pos:position pos:line="12" pos:column="37"/></name><operator pos:line="12" pos:column="37">::<pos:position pos:line="12" pos:column="39"/></operator><name pos:line="12" pos:column="39">FdNote<pos:position pos:line="12" pos:column="45"/></name></name><argument_list pos:line="12" pos:column="45">(<argument><expr><name pos:line="12" pos:column="46">noteId<pos:position pos:line="12" pos:column="52"/></name></expr></argument>)<pos:position pos:line="12" pos:column="53"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="12" pos:column="55">addr_info<pos:position pos:line="12" pos:column="64"/></name></expr></argument>)<pos:position pos:line="12" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="66"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="13" pos:column="9">conn<pos:position pos:line="13" pos:column="13"/></name><operator pos:line="13" pos:column="13">-&gt;<pos:position pos:line="13" pos:column="18"/></operator><name pos:line="13" pos:column="15">remote<pos:position pos:line="13" pos:column="21"/></name><operator pos:line="13" pos:column="21">.<pos:position pos:line="13" pos:column="22"/></operator><name pos:line="13" pos:column="22">FreeAddrInfo<pos:position pos:line="13" pos:column="34"/></name></name><argument_list pos:line="13" pos:column="34">(<argument><expr><name pos:line="13" pos:column="35">addr_info<pos:position pos:line="13" pos:column="44"/></name></expr></argument>)<pos:position pos:line="13" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="46"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></then> <else pos:line="14" pos:column="7">else <block pos:line="14" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">debugs<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><literal type="number" pos:line="15" pos:column="16">54<pos:position pos:line="15" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="20">DBG_CRITICAL<pos:position pos:line="15" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="34">"ERROR: Ipc::ImportFdIntoComm: "<pos:position pos:line="15" pos:column="66"/></literal> <operator pos:line="15" pos:column="67">&lt;&lt;<pos:position pos:line="15" pos:column="75"/></operator> <name pos:line="15" pos:column="70">conn<pos:position pos:line="15" pos:column="74"/></name> <operator pos:line="15" pos:column="75">&lt;&lt;<pos:position pos:line="15" pos:column="83"/></operator> <literal type="char" pos:line="15" pos:column="78">' '<pos:position pos:line="15" pos:column="81"/></literal> <operator pos:line="15" pos:column="82">&lt;&lt;<pos:position pos:line="15" pos:column="90"/></operator> <call><name pos:line="15" pos:column="85">xstrerror<pos:position pos:line="15" pos:column="94"/></name><argument_list pos:line="15" pos:column="94">()<pos:position pos:line="15" pos:column="96"/></argument_list></call></expr></argument>)<pos:position pos:line="15" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="98"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="16" pos:column="9">conn<pos:position pos:line="16" pos:column="13"/></name><operator pos:line="16" pos:column="13">-&gt;<pos:position pos:line="16" pos:column="18"/></operator><name pos:line="16" pos:column="15">close<pos:position pos:line="16" pos:column="20"/></name></name><argument_list pos:line="16" pos:column="20">()<pos:position pos:line="16" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="17" pos:column="6"/></block></else></if>
    <return pos:line="18" pos:column="5">return <expr><name pos:line="18" pos:column="12">conn<pos:position pos:line="18" pos:column="16"/></name></expr>;<pos:position pos:line="18" pos:column="17"/></return>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
