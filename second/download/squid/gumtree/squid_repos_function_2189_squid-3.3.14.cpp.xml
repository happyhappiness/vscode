<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2189_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">ServerStateData<pos:position pos:line="1" pos:column="21"/></name><operator pos:line="1" pos:column="21">::<pos:position pos:line="1" pos:column="23"/></operator><name pos:line="1" pos:column="23">startRequestBodyFlow<pos:position pos:line="1" pos:column="43"/></name></name><parameter_list pos:line="1" pos:column="43">()<pos:position pos:line="1" pos:column="45"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">HttpRequest<pos:position pos:line="3" pos:column="16"/></name> <modifier pos:line="3" pos:column="17">*<pos:position pos:line="3" pos:column="18"/></modifier></type><name pos:line="3" pos:column="18">r<pos:position pos:line="3" pos:column="19"/></name> <init pos:line="3" pos:column="20">= <expr><call><name pos:line="3" pos:column="22">originalRequest<pos:position pos:line="3" pos:column="37"/></name><argument_list pos:line="3" pos:column="37">()<pos:position pos:line="3" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="40"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name><name pos:line="4" pos:column="12">r<pos:position pos:line="4" pos:column="13"/></name><operator pos:line="4" pos:column="13">-&gt;<pos:position pos:line="4" pos:column="18"/></operator><name pos:line="4" pos:column="15">body_pipe<pos:position pos:line="4" pos:column="24"/></name></name> <operator pos:line="4" pos:column="25">!=<pos:position pos:line="4" pos:column="27"/></operator> <name pos:line="4" pos:column="28">NULL<pos:position pos:line="4" pos:column="32"/></name></expr></argument>)<pos:position pos:line="4" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name pos:line="5" pos:column="5">requestBodySource<pos:position pos:line="5" pos:column="22"/></name> <operator pos:line="5" pos:column="23">=<pos:position pos:line="5" pos:column="24"/></operator> <name><name pos:line="5" pos:column="25">r<pos:position pos:line="5" pos:column="26"/></name><operator pos:line="5" pos:column="26">-&gt;<pos:position pos:line="5" pos:column="31"/></operator><name pos:line="5" pos:column="28">body_pipe<pos:position pos:line="5" pos:column="37"/></name></name></expr>;<pos:position pos:line="5" pos:column="38"/></expr_stmt>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><call><name><name pos:line="6" pos:column="9">requestBodySource<pos:position pos:line="6" pos:column="26"/></name><operator pos:line="6" pos:column="26">-&gt;<pos:position pos:line="6" pos:column="31"/></operator><name pos:line="6" pos:column="28">setConsumerIfNotLate<pos:position pos:line="6" pos:column="48"/></name></name><argument_list pos:line="6" pos:column="48">(<argument><expr><name pos:line="6" pos:column="49">this<pos:position pos:line="6" pos:column="53"/></name></expr></argument>)<pos:position pos:line="6" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="55"/></condition><then pos:line="6" pos:column="55"> <block pos:line="6" pos:column="56">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">debugs<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><literal type="number" pos:line="7" pos:column="16">11<pos:position pos:line="7" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="7" pos:column="19">3<pos:position pos:line="7" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="22">HERE<pos:position pos:line="7" pos:column="26"/></name> <operator pos:line="7" pos:column="27">&lt;&lt;<pos:position pos:line="7" pos:column="35"/></operator> <literal type="string" pos:line="7" pos:column="30">"expecting request body from "<pos:position pos:line="7" pos:column="60"/></literal> <operator pos:line="7" pos:column="61">&lt;&lt;<pos:position pos:line="7" pos:column="69"/></operator>
               <call><name><name pos:line="8" pos:column="16">requestBodySource<pos:position pos:line="8" pos:column="33"/></name><operator pos:line="8" pos:column="33">-&gt;<pos:position pos:line="8" pos:column="38"/></operator><name pos:line="8" pos:column="35">status<pos:position pos:line="8" pos:column="41"/></name></name><argument_list pos:line="8" pos:column="41">()<pos:position pos:line="8" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="45"/></expr_stmt>
        <return pos:line="9" pos:column="9">return <expr><literal type="boolean" pos:line="9" pos:column="16">true<pos:position pos:line="9" pos:column="20"/></literal></expr>;<pos:position pos:line="9" pos:column="21"/></return>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="12" pos:column="5">debugs<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><literal type="number" pos:line="12" pos:column="12">11<pos:position pos:line="12" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="12" pos:column="15">3<pos:position pos:line="12" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="18">HERE<pos:position pos:line="12" pos:column="22"/></name> <operator pos:line="12" pos:column="23">&lt;&lt;<pos:position pos:line="12" pos:column="31"/></operator> <literal type="string" pos:line="12" pos:column="26">"aborting on partially consumed request body: "<pos:position pos:line="12" pos:column="73"/></literal> <operator pos:line="12" pos:column="74">&lt;&lt;<pos:position pos:line="12" pos:column="82"/></operator>
           <call><name><name pos:line="13" pos:column="12">requestBodySource<pos:position pos:line="13" pos:column="29"/></name><operator pos:line="13" pos:column="29">-&gt;<pos:position pos:line="13" pos:column="34"/></operator><name pos:line="13" pos:column="31">status<pos:position pos:line="13" pos:column="37"/></name></name><argument_list pos:line="13" pos:column="37">()<pos:position pos:line="13" pos:column="39"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><name pos:line="14" pos:column="5">requestBodySource<pos:position pos:line="14" pos:column="22"/></name> <operator pos:line="14" pos:column="23">=<pos:position pos:line="14" pos:column="24"/></operator> <name pos:line="14" pos:column="25">NULL<pos:position pos:line="14" pos:column="29"/></name></expr>;<pos:position pos:line="14" pos:column="30"/></expr_stmt>
    <return pos:line="15" pos:column="5">return <expr><literal type="boolean" pos:line="15" pos:column="12">false<pos:position pos:line="15" pos:column="17"/></literal></expr>;<pos:position pos:line="15" pos:column="18"/></return>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
