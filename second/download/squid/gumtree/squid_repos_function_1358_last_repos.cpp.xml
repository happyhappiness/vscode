<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1358_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HttpHdrScTarget<pos:position pos:line="2" pos:column="16"/></name><operator pos:line="2" pos:column="16">::<pos:position pos:line="2" pos:column="18"/></operator><name pos:line="2" pos:column="18">packInto<pos:position pos:line="2" pos:column="26"/></name></name><parameter_list pos:line="2" pos:column="26">(<parameter><decl><type><name pos:line="2" pos:column="27">Packable<pos:position pos:line="2" pos:column="35"/></name> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type> <name pos:line="2" pos:column="38">p<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="40"/></parameter_list> <specifier pos:line="2" pos:column="41">const<pos:position pos:line="2" pos:column="46"/></specifier>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">http_hdr_sc_type<pos:position pos:line="4" pos:column="21"/></name></type> <name pos:line="4" pos:column="22">flag<pos:position pos:line="4" pos:column="26"/></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">pcount<pos:position pos:line="5" pos:column="15"/></name> <init pos:line="5" pos:column="16">= <expr><literal type="number" pos:line="5" pos:column="18">0<pos:position pos:line="5" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name> <argument_list pos:line="6" pos:column="12">(<argument><expr><name pos:line="6" pos:column="13">p<pos:position pos:line="6" pos:column="14"/></name></expr></argument>)<pos:position pos:line="6" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="16"/></expr_stmt>

    <for pos:line="8" pos:column="5">for <control pos:line="8" pos:column="9">(<init><expr><name pos:line="8" pos:column="10">flag<pos:position pos:line="8" pos:column="14"/></name> <operator pos:line="8" pos:column="15">=<pos:position pos:line="8" pos:column="16"/></operator> <name pos:line="8" pos:column="17">SC_NO_STORE<pos:position pos:line="8" pos:column="28"/></name></expr>;<pos:position pos:line="8" pos:column="29"/></init> <condition><expr><name pos:line="8" pos:column="30">flag<pos:position pos:line="8" pos:column="34"/></name> <operator pos:line="8" pos:column="35">&lt;<pos:position pos:line="8" pos:column="39"/></operator> <name pos:line="8" pos:column="37">SC_ENUM_END<pos:position pos:line="8" pos:column="48"/></name></expr>;<pos:position pos:line="8" pos:column="49"/></condition> <incr><expr><operator pos:line="8" pos:column="50">++<pos:position pos:line="8" pos:column="52"/></operator><name pos:line="8" pos:column="52">flag<pos:position pos:line="8" pos:column="56"/></name></expr></incr>)<pos:position pos:line="8" pos:column="57"/></control> <block pos:line="8" pos:column="58">{
        <if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><call><name pos:line="9" pos:column="13">isSet<pos:position pos:line="9" pos:column="18"/></name><argument_list pos:line="9" pos:column="18">(<argument><expr><name pos:line="9" pos:column="19">flag<pos:position pos:line="9" pos:column="23"/></name></expr></argument>)<pos:position pos:line="9" pos:column="24"/></argument_list></call> <operator pos:line="9" pos:column="25">&amp;&amp;<pos:position pos:line="9" pos:column="35"/></operator> <name pos:line="9" pos:column="28">flag<pos:position pos:line="9" pos:column="32"/></name> <operator pos:line="9" pos:column="33">!=<pos:position pos:line="9" pos:column="35"/></operator> <name pos:line="9" pos:column="36">SC_OTHER<pos:position pos:line="9" pos:column="44"/></name></expr>)<pos:position pos:line="9" pos:column="45"/></condition><then pos:line="9" pos:column="45"> <block pos:line="9" pos:column="46">{

            <comment type="block" pos:line="11" pos:column="13">/* print option name */</comment>
            <expr_stmt><expr><call><name><name pos:line="12" pos:column="13">p<pos:position pos:line="12" pos:column="14"/></name><operator pos:line="12" pos:column="14">-&gt;<pos:position pos:line="12" pos:column="19"/></operator><name pos:line="12" pos:column="16">appendf<pos:position pos:line="12" pos:column="23"/></name></name><argument_list pos:line="12" pos:column="23">(<argument><expr><operator pos:line="12" pos:column="24">(<pos:position pos:line="12" pos:column="25"/></operator><ternary><condition><expr><name pos:line="12" pos:column="25">pcount<pos:position pos:line="12" pos:column="31"/></name></expr> ?<pos:position pos:line="12" pos:column="33"/></condition><then pos:line="12" pos:column="33"> <expr><literal type="string" pos:line="12" pos:column="34">", %s"<pos:position pos:line="12" pos:column="40"/></literal></expr> <pos:position pos:line="12" pos:column="41"/></then><else pos:line="12" pos:column="41">: <expr><literal type="string" pos:line="12" pos:column="43">"%s"<pos:position pos:line="12" pos:column="47"/></literal></expr></else></ternary><operator pos:line="12" pos:column="47">)<pos:position pos:line="12" pos:column="48"/></operator></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="50">ScAttrs<pos:position pos:line="12" pos:column="57"/></name><index pos:line="12" pos:column="57">[<expr><name pos:line="12" pos:column="58">flag<pos:position pos:line="12" pos:column="62"/></name></expr>]<pos:position pos:line="12" pos:column="63"/></index></name><operator pos:line="12" pos:column="63">.<pos:position pos:line="12" pos:column="64"/></operator><name pos:line="12" pos:column="64">name<pos:position pos:line="12" pos:column="68"/></name></expr></argument>)<pos:position pos:line="12" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="70"/></expr_stmt>

            <comment type="block" pos:line="14" pos:column="13">/* handle options with values */</comment>

            <if pos:line="16" pos:column="13">if <condition pos:line="16" pos:column="16">(<expr><name pos:line="16" pos:column="17">flag<pos:position pos:line="16" pos:column="21"/></name> <operator pos:line="16" pos:column="22">==<pos:position pos:line="16" pos:column="24"/></operator> <name pos:line="16" pos:column="25">SC_MAX_AGE<pos:position pos:line="16" pos:column="35"/></name></expr>)<pos:position pos:line="16" pos:column="36"/></condition><then pos:line="16" pos:column="36">
                <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="17" pos:column="17">p<pos:position pos:line="17" pos:column="18"/></name><operator pos:line="17" pos:column="18">-&gt;<pos:position pos:line="17" pos:column="23"/></operator><name pos:line="17" pos:column="20">appendf<pos:position pos:line="17" pos:column="27"/></name></name><argument_list pos:line="17" pos:column="27">(<argument><expr><literal type="string" pos:line="17" pos:column="28">"=%d"<pos:position pos:line="17" pos:column="33"/></literal></expr></argument>, <argument><expr><operator pos:line="17" pos:column="35">(<pos:position pos:line="17" pos:column="36"/></operator><name pos:line="17" pos:column="36">int<pos:position pos:line="17" pos:column="39"/></name><operator pos:line="17" pos:column="39">)<pos:position pos:line="17" pos:column="40"/></operator> <name pos:line="17" pos:column="41">max_age<pos:position pos:line="17" pos:column="48"/></name></expr></argument>)<pos:position pos:line="17" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="50"/></expr_stmt></block></then></if>

            <if pos:line="19" pos:column="13">if <condition pos:line="19" pos:column="16">(<expr><name pos:line="19" pos:column="17">flag<pos:position pos:line="19" pos:column="21"/></name> <operator pos:line="19" pos:column="22">==<pos:position pos:line="19" pos:column="24"/></operator> <name pos:line="19" pos:column="25">SC_CONTENT<pos:position pos:line="19" pos:column="35"/></name></expr>)<pos:position pos:line="19" pos:column="36"/></condition><then pos:line="19" pos:column="36">
                <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="20" pos:column="17">p<pos:position pos:line="20" pos:column="18"/></name><operator pos:line="20" pos:column="18">-&gt;<pos:position pos:line="20" pos:column="23"/></operator><name pos:line="20" pos:column="20">appendf<pos:position pos:line="20" pos:column="27"/></name></name><argument_list pos:line="20" pos:column="27">(<argument><expr><literal type="string" pos:line="20" pos:column="28">"=\""<pos:position pos:line="20" pos:column="33"/></literal> <name pos:line="20" pos:column="34">SQUIDSTRINGPH<pos:position pos:line="20" pos:column="47"/></name> <literal type="string" pos:line="20" pos:column="48">"\""<pos:position pos:line="20" pos:column="52"/></literal></expr></argument>, <argument><expr><call><name pos:line="20" pos:column="54">SQUIDSTRINGPRINT<pos:position pos:line="20" pos:column="70"/></name><argument_list pos:line="20" pos:column="70">(<argument><expr><name pos:line="20" pos:column="71">content_<pos:position pos:line="20" pos:column="79"/></name></expr></argument>)<pos:position pos:line="20" pos:column="80"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="82"/></expr_stmt></block></then></if>

            <expr_stmt><expr><operator pos:line="22" pos:column="13">++<pos:position pos:line="22" pos:column="15"/></operator><name pos:line="22" pos:column="15">pcount<pos:position pos:line="22" pos:column="21"/></name></expr>;<pos:position pos:line="22" pos:column="22"/></expr_stmt>
        }<pos:position pos:line="23" pos:column="10"/></block></then></if>
    }<pos:position pos:line="24" pos:column="6"/></block></for>

    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><call><name pos:line="26" pos:column="9">hasTarget<pos:position pos:line="26" pos:column="18"/></name><argument_list pos:line="26" pos:column="18">()<pos:position pos:line="26" pos:column="20"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="21"/></condition><then pos:line="26" pos:column="21">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="27" pos:column="9">p<pos:position pos:line="27" pos:column="10"/></name><operator pos:line="27" pos:column="10">-&gt;<pos:position pos:line="27" pos:column="15"/></operator><name pos:line="27" pos:column="12">appendf<pos:position pos:line="27" pos:column="19"/></name></name><argument_list pos:line="27" pos:column="19">(<argument><expr><literal type="string" pos:line="27" pos:column="20">";"<pos:position pos:line="27" pos:column="23"/></literal> <name pos:line="27" pos:column="24">SQUIDSTRINGPH<pos:position pos:line="27" pos:column="37"/></name></expr></argument>, <argument><expr><call><name pos:line="27" pos:column="39">SQUIDSTRINGPRINT<pos:position pos:line="27" pos:column="55"/></name><argument_list pos:line="27" pos:column="55">(<argument><expr><name pos:line="27" pos:column="56">target<pos:position pos:line="27" pos:column="62"/></name></expr></argument>)<pos:position pos:line="27" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="65"/></expr_stmt></block></then></if>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
