<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5013_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Rock<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">Rebuild<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">finalizeOrThrow<pos:position pos:line="2" pos:column="31"/></name></name><parameter_list pos:line="2" pos:column="31">(<parameter><decl><type><specifier pos:line="2" pos:column="32">const<pos:position pos:line="2" pos:column="37"/></specifier> <name pos:line="2" pos:column="38">sfileno<pos:position pos:line="2" pos:column="45"/></name></type> <name pos:line="2" pos:column="46">fileNo<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="54">LoadingEntry<pos:position pos:line="2" pos:column="66"/></name> <modifier pos:line="2" pos:column="67">&amp;<pos:position pos:line="2" pos:column="72"/></modifier></type><name pos:line="2" pos:column="68">le<pos:position pos:line="2" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="71"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// walk all map-linked slots, starting from inode, and mark each</comment>
    <decl_stmt><decl><type><name><name pos:line="5" pos:column="5">Ipc<pos:position pos:line="5" pos:column="8"/></name><operator pos:line="5" pos:column="8">::<pos:position pos:line="5" pos:column="10"/></operator><name pos:line="5" pos:column="10">StoreMapAnchor<pos:position pos:line="5" pos:column="24"/></name></name> <modifier pos:line="5" pos:column="25">&amp;<pos:position pos:line="5" pos:column="30"/></modifier></type><name pos:line="5" pos:column="26">anchor<pos:position pos:line="5" pos:column="32"/></name> <init pos:line="5" pos:column="33">= <expr><call><name><name pos:line="5" pos:column="35">sd<pos:position pos:line="5" pos:column="37"/></name><operator pos:line="5" pos:column="37">-&gt;<pos:position pos:line="5" pos:column="42"/></operator><name pos:line="5" pos:column="39">map<pos:position pos:line="5" pos:column="42"/></name><operator pos:line="5" pos:column="42">-&gt;<pos:position pos:line="5" pos:column="47"/></operator><name pos:line="5" pos:column="44">writeableEntry<pos:position pos:line="5" pos:column="58"/></name></name><argument_list pos:line="5" pos:column="58">(<argument><expr><name pos:line="5" pos:column="59">fileNo<pos:position pos:line="5" pos:column="65"/></name></expr></argument>)<pos:position pos:line="5" pos:column="66"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="67"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">Must<pos:position pos:line="6" pos:column="9"/></name><argument_list pos:line="6" pos:column="9">(<argument><expr><name><name pos:line="6" pos:column="10">le<pos:position pos:line="6" pos:column="12"/></name><operator pos:line="6" pos:column="12">.<pos:position pos:line="6" pos:column="13"/></operator><name pos:line="6" pos:column="13">size<pos:position pos:line="6" pos:column="17"/></name></name> <operator pos:line="6" pos:column="18">&gt;<pos:position pos:line="6" pos:column="22"/></operator> <literal type="number" pos:line="6" pos:column="20">0<pos:position pos:line="6" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="23"/></expr_stmt> <comment type="line" pos:line="6" pos:column="24">// paranoid</comment>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">uint64_t<pos:position pos:line="7" pos:column="13"/></name></type> <name pos:line="7" pos:column="14">mappedSize<pos:position pos:line="7" pos:column="24"/></name> <init pos:line="7" pos:column="25">= <expr><literal type="number" pos:line="7" pos:column="27">0<pos:position pos:line="7" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">SlotId<pos:position pos:line="8" pos:column="11"/></name></type> <name pos:line="8" pos:column="12">slotId<pos:position pos:line="8" pos:column="18"/></name> <init pos:line="8" pos:column="19">= <expr><name><name pos:line="8" pos:column="21">anchor<pos:position pos:line="8" pos:column="27"/></name><operator pos:line="8" pos:column="27">.<pos:position pos:line="8" pos:column="28"/></operator><name pos:line="8" pos:column="28">start<pos:position pos:line="8" pos:column="33"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="34"/></decl_stmt>
    <while pos:line="9" pos:column="5">while <condition pos:line="9" pos:column="11">(<expr><name pos:line="9" pos:column="12">slotId<pos:position pos:line="9" pos:column="18"/></name> <operator pos:line="9" pos:column="19">&gt;=<pos:position pos:line="9" pos:column="24"/></operator> <literal type="number" pos:line="9" pos:column="22">0<pos:position pos:line="9" pos:column="23"/></literal> <operator pos:line="9" pos:column="24">&amp;&amp;<pos:position pos:line="9" pos:column="34"/></operator> <name pos:line="9" pos:column="27">mappedSize<pos:position pos:line="9" pos:column="37"/></name> <operator pos:line="9" pos:column="38">&lt;<pos:position pos:line="9" pos:column="42"/></operator> <name><name pos:line="9" pos:column="40">le<pos:position pos:line="9" pos:column="42"/></name><operator pos:line="9" pos:column="42">.<pos:position pos:line="9" pos:column="43"/></operator><name pos:line="9" pos:column="43">size<pos:position pos:line="9" pos:column="47"/></name></name></expr>)<pos:position pos:line="9" pos:column="48"/></condition> <block pos:line="9" pos:column="49">{
        <decl_stmt><decl><type><name pos:line="10" pos:column="9">LoadingSlot<pos:position pos:line="10" pos:column="20"/></name></type> <name pos:line="10" pos:column="21">slot<pos:position pos:line="10" pos:column="25"/></name> <init pos:line="10" pos:column="26">= <expr><call><name pos:line="10" pos:column="28">loadingSlot<pos:position pos:line="10" pos:column="39"/></name><argument_list pos:line="10" pos:column="39">(<argument><expr><name pos:line="10" pos:column="40">slotId<pos:position pos:line="10" pos:column="46"/></name></expr></argument>)<pos:position pos:line="10" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="48"/></decl_stmt> <comment type="line" pos:line="10" pos:column="49">// throws if we have not loaded that slot</comment>
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">Must<pos:position pos:line="11" pos:column="13"/></name><argument_list pos:line="11" pos:column="13">(<argument><expr><operator pos:line="11" pos:column="14">!<pos:position pos:line="11" pos:column="15"/></operator><call><name><name pos:line="11" pos:column="15">slot<pos:position pos:line="11" pos:column="19"/></name><operator pos:line="11" pos:column="19">.<pos:position pos:line="11" pos:column="20"/></operator><name pos:line="11" pos:column="20">finalized<pos:position pos:line="11" pos:column="29"/></name></name><argument_list pos:line="11" pos:column="29">()<pos:position pos:line="11" pos:column="31"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="33"/></expr_stmt> <comment type="line" pos:line="11" pos:column="34">// no loops or stealing from other entries</comment>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">Must<pos:position pos:line="12" pos:column="13"/></name><argument_list pos:line="12" pos:column="13">(<argument><expr><call><name><name pos:line="12" pos:column="14">slot<pos:position pos:line="12" pos:column="18"/></name><operator pos:line="12" pos:column="18">.<pos:position pos:line="12" pos:column="19"/></operator><name pos:line="12" pos:column="19">mapped<pos:position pos:line="12" pos:column="25"/></name></name><argument_list pos:line="12" pos:column="25">()<pos:position pos:line="12" pos:column="27"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="29"/></expr_stmt> <comment type="line" pos:line="12" pos:column="30">// all our slots should be in the sd-&gt;map</comment>
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">Must<pos:position pos:line="13" pos:column="13"/></name><argument_list pos:line="13" pos:column="13">(<argument><expr><operator pos:line="13" pos:column="14">!<pos:position pos:line="13" pos:column="15"/></operator><call><name><name pos:line="13" pos:column="15">slot<pos:position pos:line="13" pos:column="19"/></name><operator pos:line="13" pos:column="19">.<pos:position pos:line="13" pos:column="20"/></operator><name pos:line="13" pos:column="20">freed<pos:position pos:line="13" pos:column="25"/></name></name><argument_list pos:line="13" pos:column="25">()<pos:position pos:line="13" pos:column="27"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="29"/></expr_stmt> <comment type="line" pos:line="13" pos:column="30">// all our slots should still be present</comment>
        <expr_stmt><expr><call><name><name pos:line="14" pos:column="9">slot<pos:position pos:line="14" pos:column="13"/></name><operator pos:line="14" pos:column="13">.<pos:position pos:line="14" pos:column="14"/></operator><name pos:line="14" pos:column="14">finalized<pos:position pos:line="14" pos:column="23"/></name></name><argument_list pos:line="14" pos:column="23">(<argument><expr><literal type="boolean" pos:line="14" pos:column="24">true<pos:position pos:line="14" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="30"/></expr_stmt>

        <decl_stmt><decl><type><name><name pos:line="16" pos:column="9">Ipc<pos:position pos:line="16" pos:column="12"/></name><operator pos:line="16" pos:column="12">::<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="14">StoreMapSlice<pos:position pos:line="16" pos:column="27"/></name></name> <modifier pos:line="16" pos:column="28">&amp;<pos:position pos:line="16" pos:column="33"/></modifier></type><name pos:line="16" pos:column="29">mapSlice<pos:position pos:line="16" pos:column="37"/></name> <init pos:line="16" pos:column="38">= <expr><call><name><name pos:line="16" pos:column="40">sd<pos:position pos:line="16" pos:column="42"/></name><operator pos:line="16" pos:column="42">-&gt;<pos:position pos:line="16" pos:column="47"/></operator><name pos:line="16" pos:column="44">map<pos:position pos:line="16" pos:column="47"/></name><operator pos:line="16" pos:column="47">-&gt;<pos:position pos:line="16" pos:column="52"/></operator><name pos:line="16" pos:column="49">writeableSlice<pos:position pos:line="16" pos:column="63"/></name></name><argument_list pos:line="16" pos:column="63">(<argument><expr><name pos:line="16" pos:column="64">fileNo<pos:position pos:line="16" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="72">slotId<pos:position pos:line="16" pos:column="78"/></name></expr></argument>)<pos:position pos:line="16" pos:column="79"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="80"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">Must<pos:position pos:line="17" pos:column="13"/></name><argument_list pos:line="17" pos:column="13">(<argument><expr><name><name pos:line="17" pos:column="14">mapSlice<pos:position pos:line="17" pos:column="22"/></name><operator pos:line="17" pos:column="22">.<pos:position pos:line="17" pos:column="23"/></operator><name pos:line="17" pos:column="23">size<pos:position pos:line="17" pos:column="27"/></name></name> <operator pos:line="17" pos:column="28">&gt;<pos:position pos:line="17" pos:column="32"/></operator> <literal type="number" pos:line="17" pos:column="30">0<pos:position pos:line="17" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="33"/></expr_stmt> <comment type="line" pos:line="17" pos:column="34">// paranoid</comment>
        <expr_stmt><expr><name pos:line="18" pos:column="9">mappedSize<pos:position pos:line="18" pos:column="19"/></name> <operator pos:line="18" pos:column="20">+=<pos:position pos:line="18" pos:column="22"/></operator> <name><name pos:line="18" pos:column="23">mapSlice<pos:position pos:line="18" pos:column="31"/></name><operator pos:line="18" pos:column="31">.<pos:position pos:line="18" pos:column="32"/></operator><name pos:line="18" pos:column="32">size<pos:position pos:line="18" pos:column="36"/></name></name></expr>;<pos:position pos:line="18" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><name pos:line="19" pos:column="9">slotId<pos:position pos:line="19" pos:column="15"/></name> <operator pos:line="19" pos:column="16">=<pos:position pos:line="19" pos:column="17"/></operator> <name><name pos:line="19" pos:column="18">mapSlice<pos:position pos:line="19" pos:column="26"/></name><operator pos:line="19" pos:column="26">.<pos:position pos:line="19" pos:column="27"/></operator><name pos:line="19" pos:column="27">next<pos:position pos:line="19" pos:column="31"/></name></name></expr>;<pos:position pos:line="19" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="20" pos:column="6"/></block></while>
    <comment type="block" pos:line="21" pos:column="5">/* no hodgepodge entries: one entry - one full chain and no leftovers */</comment>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">Must<pos:position pos:line="22" pos:column="9"/></name><argument_list pos:line="22" pos:column="9">(<argument><expr><name pos:line="22" pos:column="10">slotId<pos:position pos:line="22" pos:column="16"/></name> <operator pos:line="22" pos:column="17">&lt;<pos:position pos:line="22" pos:column="21"/></operator> <literal type="number" pos:line="22" pos:column="19">0<pos:position pos:line="22" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">Must<pos:position pos:line="23" pos:column="9"/></name><argument_list pos:line="23" pos:column="9">(<argument><expr><name pos:line="23" pos:column="10">mappedSize<pos:position pos:line="23" pos:column="20"/></name> <operator pos:line="23" pos:column="21">==<pos:position pos:line="23" pos:column="23"/></operator> <name><name pos:line="23" pos:column="24">le<pos:position pos:line="23" pos:column="26"/></name><operator pos:line="23" pos:column="26">.<pos:position pos:line="23" pos:column="27"/></operator><name pos:line="23" pos:column="27">size<pos:position pos:line="23" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="33"/></expr_stmt>

    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><operator pos:line="25" pos:column="9">!<pos:position pos:line="25" pos:column="10"/></operator><name><name pos:line="25" pos:column="10">anchor<pos:position pos:line="25" pos:column="16"/></name><operator pos:line="25" pos:column="16">.<pos:position pos:line="25" pos:column="17"/></operator><name pos:line="25" pos:column="17">basics<pos:position pos:line="25" pos:column="23"/></name><operator pos:line="25" pos:column="23">.<pos:position pos:line="25" pos:column="24"/></operator><name pos:line="25" pos:column="24">swap_file_sz<pos:position pos:line="25" pos:column="36"/></name></name></expr>)<pos:position pos:line="25" pos:column="37"/></condition><then pos:line="25" pos:column="37">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="26" pos:column="9">anchor<pos:position pos:line="26" pos:column="15"/></name><operator pos:line="26" pos:column="15">.<pos:position pos:line="26" pos:column="16"/></operator><name pos:line="26" pos:column="16">basics<pos:position pos:line="26" pos:column="22"/></name><operator pos:line="26" pos:column="22">.<pos:position pos:line="26" pos:column="23"/></operator><name pos:line="26" pos:column="23">swap_file_sz<pos:position pos:line="26" pos:column="35"/></name></name> <operator pos:line="26" pos:column="36">=<pos:position pos:line="26" pos:column="37"/></operator> <name><name pos:line="26" pos:column="38">le<pos:position pos:line="26" pos:column="40"/></name><operator pos:line="26" pos:column="40">.<pos:position pos:line="26" pos:column="41"/></operator><name pos:line="26" pos:column="41">size<pos:position pos:line="26" pos:column="45"/></name></name></expr>;<pos:position pos:line="26" pos:column="46"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">EBIT_SET<pos:position pos:line="27" pos:column="13"/></name><argument_list pos:line="27" pos:column="13">(<argument><expr><name><name pos:line="27" pos:column="14">anchor<pos:position pos:line="27" pos:column="20"/></name><operator pos:line="27" pos:column="20">.<pos:position pos:line="27" pos:column="21"/></operator><name pos:line="27" pos:column="21">basics<pos:position pos:line="27" pos:column="27"/></name><operator pos:line="27" pos:column="27">.<pos:position pos:line="27" pos:column="28"/></operator><name pos:line="27" pos:column="28">flags<pos:position pos:line="27" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="35">ENTRY_VALIDATED<pos:position pos:line="27" pos:column="50"/></name></expr></argument>)<pos:position pos:line="27" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="28" pos:column="5">le<pos:position pos:line="28" pos:column="7"/></name><operator pos:line="28" pos:column="7">.<pos:position pos:line="28" pos:column="8"/></operator><name pos:line="28" pos:column="8">state<pos:position pos:line="28" pos:column="13"/></name></name><argument_list pos:line="28" pos:column="13">(<argument><expr><name><name pos:line="28" pos:column="14">LoadingEntry<pos:position pos:line="28" pos:column="26"/></name><operator pos:line="28" pos:column="26">::<pos:position pos:line="28" pos:column="28"/></operator><name pos:line="28" pos:column="28">leLoaded<pos:position pos:line="28" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="29" pos:column="5">sd<pos:position pos:line="29" pos:column="7"/></name><operator pos:line="29" pos:column="7">-&gt;<pos:position pos:line="29" pos:column="12"/></operator><name pos:line="29" pos:column="9">map<pos:position pos:line="29" pos:column="12"/></name><operator pos:line="29" pos:column="12">-&gt;<pos:position pos:line="29" pos:column="17"/></operator><name pos:line="29" pos:column="14">closeForWriting<pos:position pos:line="29" pos:column="29"/></name></name><argument_list pos:line="29" pos:column="29">(<argument><expr><name pos:line="29" pos:column="30">fileNo<pos:position pos:line="29" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="29" pos:column="38">false<pos:position pos:line="29" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="30" pos:column="5">++<pos:position pos:line="30" pos:column="7"/></operator><name><name pos:line="30" pos:column="7">counts<pos:position pos:line="30" pos:column="13"/></name><operator pos:line="30" pos:column="13">.<pos:position pos:line="30" pos:column="14"/></operator><name pos:line="30" pos:column="14">objcount<pos:position pos:line="30" pos:column="22"/></name></name></expr>;<pos:position pos:line="30" pos:column="23"/></expr_stmt>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
