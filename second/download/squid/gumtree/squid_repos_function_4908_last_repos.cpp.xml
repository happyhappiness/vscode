<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4908_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Http<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">One<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">TeChunkedParser<pos:position pos:line="2" pos:column="27"/></name><operator pos:line="2" pos:column="27">::<pos:position pos:line="2" pos:column="29"/></operator><name pos:line="2" pos:column="29">parse<pos:position pos:line="2" pos:column="34"/></name></name><parameter_list pos:line="2" pos:column="34">(<parameter><decl><type><specifier pos:line="2" pos:column="35">const<pos:position pos:line="2" pos:column="40"/></specifier> <name pos:line="2" pos:column="41">SBuf<pos:position pos:line="2" pos:column="45"/></name> <modifier pos:line="2" pos:column="46">&amp;<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="47">aBuf<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="52"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><name pos:line="4" pos:column="5">buf_<pos:position pos:line="4" pos:column="9"/></name> <operator pos:line="4" pos:column="10">=<pos:position pos:line="4" pos:column="11"/></operator> <name pos:line="4" pos:column="12">aBuf<pos:position pos:line="4" pos:column="16"/></name></expr>;<pos:position pos:line="4" pos:column="17"/></expr_stmt> <comment type="line" pos:line="4" pos:column="18">// sync buffers first so calls to remaining() work properly if nothing done.</comment>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><call><name><name pos:line="6" pos:column="9">buf_<pos:position pos:line="6" pos:column="13"/></name><operator pos:line="6" pos:column="13">.<pos:position pos:line="6" pos:column="14"/></operator><name pos:line="6" pos:column="14">isEmpty<pos:position pos:line="6" pos:column="21"/></name></name><argument_list pos:line="6" pos:column="21">()<pos:position pos:line="6" pos:column="23"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="24"/></condition><then pos:line="6" pos:column="24"> <comment type="line" pos:line="6" pos:column="25">// nothing to do (yet)</comment>
        <block type="pseudo"><return pos:line="7" pos:column="9">return <expr><literal type="boolean" pos:line="7" pos:column="16">false<pos:position pos:line="7" pos:column="21"/></literal></expr>;<pos:position pos:line="7" pos:column="22"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="9" pos:column="5">debugs<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><literal type="number" pos:line="9" pos:column="12">74<pos:position pos:line="9" pos:column="14"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="16">DBG_DATA<pos:position pos:line="9" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="26">"Parse buf={length="<pos:position pos:line="9" pos:column="46"/></literal> <operator pos:line="9" pos:column="47">&lt;&lt;<pos:position pos:line="9" pos:column="55"/></operator> <call><name><name pos:line="9" pos:column="50">aBuf<pos:position pos:line="9" pos:column="54"/></name><operator pos:line="9" pos:column="54">.<pos:position pos:line="9" pos:column="55"/></operator><name pos:line="9" pos:column="55">length<pos:position pos:line="9" pos:column="61"/></name></name><argument_list pos:line="9" pos:column="61">()<pos:position pos:line="9" pos:column="63"/></argument_list></call> <operator pos:line="9" pos:column="64">&lt;&lt;<pos:position pos:line="9" pos:column="72"/></operator> <literal type="string" pos:line="9" pos:column="67">", data='"<pos:position pos:line="9" pos:column="77"/></literal> <operator pos:line="9" pos:column="78">&lt;&lt;<pos:position pos:line="9" pos:column="86"/></operator> <name pos:line="9" pos:column="81">aBuf<pos:position pos:line="9" pos:column="85"/></name> <operator pos:line="9" pos:column="86">&lt;&lt;<pos:position pos:line="9" pos:column="94"/></operator> <literal type="string" pos:line="9" pos:column="89">"'}"<pos:position pos:line="9" pos:column="93"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="95"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="11" pos:column="5">Must<pos:position pos:line="11" pos:column="9"/></name><argument_list pos:line="11" pos:column="9">(<argument><expr><operator pos:line="11" pos:column="10">!<pos:position pos:line="11" pos:column="11"/></operator><call><name><name pos:line="11" pos:column="11">buf_<pos:position pos:line="11" pos:column="15"/></name><operator pos:line="11" pos:column="15">.<pos:position pos:line="11" pos:column="16"/></operator><name pos:line="11" pos:column="16">isEmpty<pos:position pos:line="11" pos:column="23"/></name></name><argument_list pos:line="11" pos:column="23">()<pos:position pos:line="11" pos:column="25"/></argument_list></call> <operator pos:line="11" pos:column="26">&amp;&amp;<pos:position pos:line="11" pos:column="36"/></operator> <name pos:line="11" pos:column="29">theOut<pos:position pos:line="11" pos:column="35"/></name></expr></argument>)<pos:position pos:line="11" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="37"/></expr_stmt>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">parsingStage_<pos:position pos:line="13" pos:column="22"/></name> <operator pos:line="13" pos:column="23">==<pos:position pos:line="13" pos:column="25"/></operator> <name><name pos:line="13" pos:column="26">Http1<pos:position pos:line="13" pos:column="31"/></name><operator pos:line="13" pos:column="31">::<pos:position pos:line="13" pos:column="33"/></operator><name pos:line="13" pos:column="33">HTTP_PARSE_NONE<pos:position pos:line="13" pos:column="48"/></name></name></expr>)<pos:position pos:line="13" pos:column="49"/></condition><then pos:line="13" pos:column="49">
        <block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="9">parsingStage_<pos:position pos:line="14" pos:column="22"/></name> <operator pos:line="14" pos:column="23">=<pos:position pos:line="14" pos:column="24"/></operator> <name><name pos:line="14" pos:column="25">Http1<pos:position pos:line="14" pos:column="30"/></name><operator pos:line="14" pos:column="30">::<pos:position pos:line="14" pos:column="32"/></operator><name pos:line="14" pos:column="32">HTTP_PARSE_CHUNK_SZ<pos:position pos:line="14" pos:column="51"/></name></name></expr>;<pos:position pos:line="14" pos:column="52"/></expr_stmt></block></then></if>

    <decl_stmt><decl><type><name><name pos:line="16" pos:column="5">Http1<pos:position pos:line="16" pos:column="10"/></name><operator pos:line="16" pos:column="10">::<pos:position pos:line="16" pos:column="12"/></operator><name pos:line="16" pos:column="12">Tokenizer<pos:position pos:line="16" pos:column="21"/></name></name></type> <name pos:line="16" pos:column="22">tok<pos:position pos:line="16" pos:column="25"/></name><argument_list pos:line="16" pos:column="25">(<argument><expr><name pos:line="16" pos:column="26">buf_<pos:position pos:line="16" pos:column="30"/></name></expr></argument>)<pos:position pos:line="16" pos:column="31"/></argument_list></decl>;<pos:position pos:line="16" pos:column="32"/></decl_stmt>

    <comment type="line" pos:line="18" pos:column="5">// loop for as many chunks as we can</comment>
    <comment type="line" pos:line="19" pos:column="5">// use do-while instead of while so that we can incrementally</comment>
    <comment type="line" pos:line="20" pos:column="5">// restart in the middle of a chunk/frame</comment>
    <do pos:line="21" pos:column="5">do <block pos:line="21" pos:column="8">{

        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">parsingStage_<pos:position pos:line="23" pos:column="26"/></name> <operator pos:line="23" pos:column="27">==<pos:position pos:line="23" pos:column="29"/></operator> <name><name pos:line="23" pos:column="30">Http1<pos:position pos:line="23" pos:column="35"/></name><operator pos:line="23" pos:column="35">::<pos:position pos:line="23" pos:column="37"/></operator><name pos:line="23" pos:column="37">HTTP_PARSE_CHUNK_EXT<pos:position pos:line="23" pos:column="57"/></name></name> <operator pos:line="23" pos:column="58">&amp;&amp;<pos:position pos:line="23" pos:column="68"/></operator> <operator pos:line="23" pos:column="61">!<pos:position pos:line="23" pos:column="62"/></operator><call><name pos:line="23" pos:column="62">parseChunkExtension<pos:position pos:line="23" pos:column="81"/></name><argument_list pos:line="23" pos:column="81">(<argument><expr><name pos:line="23" pos:column="82">tok<pos:position pos:line="23" pos:column="85"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="87">theChunkSize<pos:position pos:line="23" pos:column="99"/></name></expr></argument>)<pos:position pos:line="23" pos:column="100"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="101"/></condition><then pos:line="23" pos:column="101">
            <block type="pseudo"><return pos:line="24" pos:column="13">return <expr><literal type="boolean" pos:line="24" pos:column="20">false<pos:position pos:line="24" pos:column="25"/></literal></expr>;<pos:position pos:line="24" pos:column="26"/></return></block></then></if>

        <if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name pos:line="26" pos:column="13">parsingStage_<pos:position pos:line="26" pos:column="26"/></name> <operator pos:line="26" pos:column="27">==<pos:position pos:line="26" pos:column="29"/></operator> <name><name pos:line="26" pos:column="30">Http1<pos:position pos:line="26" pos:column="35"/></name><operator pos:line="26" pos:column="35">::<pos:position pos:line="26" pos:column="37"/></operator><name pos:line="26" pos:column="37">HTTP_PARSE_CHUNK<pos:position pos:line="26" pos:column="53"/></name></name> <operator pos:line="26" pos:column="54">&amp;&amp;<pos:position pos:line="26" pos:column="64"/></operator> <operator pos:line="26" pos:column="57">!<pos:position pos:line="26" pos:column="58"/></operator><call><name pos:line="26" pos:column="58">parseChunkBody<pos:position pos:line="26" pos:column="72"/></name><argument_list pos:line="26" pos:column="72">(<argument><expr><name pos:line="26" pos:column="73">tok<pos:position pos:line="26" pos:column="76"/></name></expr></argument>)<pos:position pos:line="26" pos:column="77"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="78"/></condition><then pos:line="26" pos:column="78">
            <block type="pseudo"><return pos:line="27" pos:column="13">return <expr><literal type="boolean" pos:line="27" pos:column="20">false<pos:position pos:line="27" pos:column="25"/></literal></expr>;<pos:position pos:line="27" pos:column="26"/></return></block></then></if>

        <if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name pos:line="29" pos:column="13">parsingStage_<pos:position pos:line="29" pos:column="26"/></name> <operator pos:line="29" pos:column="27">==<pos:position pos:line="29" pos:column="29"/></operator> <name><name pos:line="29" pos:column="30">Http1<pos:position pos:line="29" pos:column="35"/></name><operator pos:line="29" pos:column="35">::<pos:position pos:line="29" pos:column="37"/></operator><name pos:line="29" pos:column="37">HTTP_PARSE_MIME<pos:position pos:line="29" pos:column="52"/></name></name> <operator pos:line="29" pos:column="53">&amp;&amp;<pos:position pos:line="29" pos:column="63"/></operator> <operator pos:line="29" pos:column="56">!<pos:position pos:line="29" pos:column="57"/></operator><call><name pos:line="29" pos:column="57">grabMimeBlock<pos:position pos:line="29" pos:column="70"/></name><argument_list pos:line="29" pos:column="70">(<argument><expr><literal type="string" pos:line="29" pos:column="71">"Trailers"<pos:position pos:line="29" pos:column="81"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="83">64<pos:position pos:line="29" pos:column="85"/></literal><operator pos:line="29" pos:column="85">*<pos:position pos:line="29" pos:column="86"/></operator><literal type="number" pos:line="29" pos:column="86">1024<pos:position pos:line="29" pos:column="90"/></literal></expr></argument> <comment type="block" pos:line="29" pos:column="91">/* 64KB max */</comment>)<pos:position pos:line="29" pos:column="106"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="107"/></condition><then pos:line="29" pos:column="107">
            <block type="pseudo"><return pos:line="30" pos:column="13">return <expr><literal type="boolean" pos:line="30" pos:column="20">false<pos:position pos:line="30" pos:column="25"/></literal></expr>;<pos:position pos:line="30" pos:column="26"/></return></block></then></if>

        <comment type="line" pos:line="32" pos:column="9">// loop for as many chunks as we can</comment>
    }<pos:position pos:line="33" pos:column="6"/></block> while <condition pos:line="33" pos:column="13">(<expr><name pos:line="33" pos:column="14">parsingStage_<pos:position pos:line="33" pos:column="27"/></name> <operator pos:line="33" pos:column="28">==<pos:position pos:line="33" pos:column="30"/></operator> <name><name pos:line="33" pos:column="31">Http1<pos:position pos:line="33" pos:column="36"/></name><operator pos:line="33" pos:column="36">::<pos:position pos:line="33" pos:column="38"/></operator><name pos:line="33" pos:column="38">HTTP_PARSE_CHUNK_SZ<pos:position pos:line="33" pos:column="57"/></name></name> <operator pos:line="33" pos:column="58">&amp;&amp;<pos:position pos:line="33" pos:column="68"/></operator> <call><name pos:line="33" pos:column="61">parseChunkSize<pos:position pos:line="33" pos:column="75"/></name><argument_list pos:line="33" pos:column="75">(<argument><expr><name pos:line="33" pos:column="76">tok<pos:position pos:line="33" pos:column="79"/></name></expr></argument>)<pos:position pos:line="33" pos:column="80"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="81"/></condition>;<pos:position pos:line="33" pos:column="82"/></do>

    <return pos:line="35" pos:column="5">return <expr><operator pos:line="35" pos:column="12">!<pos:position pos:line="35" pos:column="13"/></operator><call><name pos:line="35" pos:column="13">needsMoreData<pos:position pos:line="35" pos:column="26"/></name><argument_list pos:line="35" pos:column="26">()<pos:position pos:line="35" pos:column="28"/></argument_list></call> <operator pos:line="35" pos:column="29">&amp;&amp;<pos:position pos:line="35" pos:column="39"/></operator> <operator pos:line="35" pos:column="32">!<pos:position pos:line="35" pos:column="33"/></operator><call><name pos:line="35" pos:column="33">needsMoreSpace<pos:position pos:line="35" pos:column="47"/></name><argument_list pos:line="35" pos:column="47">()<pos:position pos:line="35" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="50"/></return>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
