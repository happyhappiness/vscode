<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1427_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">icpConnectionShutdown<pos:position pos:line="2" pos:column="22"/></name><parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><name pos:line="2" pos:column="23">void<pos:position pos:line="2" pos:column="27"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="28"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">!<pos:position pos:line="4" pos:column="10"/></operator><call><name><name pos:line="4" pos:column="10">Comm<pos:position pos:line="4" pos:column="14"/></name><operator pos:line="4" pos:column="14">::<pos:position pos:line="4" pos:column="16"/></operator><name pos:line="4" pos:column="16">IsConnOpen<pos:position pos:line="4" pos:column="26"/></name></name><argument_list pos:line="4" pos:column="26">(<argument><expr><name pos:line="4" pos:column="27">icpIncomingConn<pos:position pos:line="4" pos:column="42"/></name></expr></argument>)<pos:position pos:line="4" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="44"/></condition><then pos:line="4" pos:column="44">
        <block type="pseudo"><return pos:line="5" pos:column="9">return;<pos:position pos:line="5" pos:column="16"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">debugs<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><literal type="number" pos:line="7" pos:column="12">12<pos:position pos:line="7" pos:column="14"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="16">DBG_IMPORTANT<pos:position pos:line="7" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="31">"Stop receiving ICP on "<pos:position pos:line="7" pos:column="55"/></literal> <operator pos:line="7" pos:column="56">&lt;&lt;<pos:position pos:line="7" pos:column="64"/></operator> <name><name pos:line="7" pos:column="59">icpIncomingConn<pos:position pos:line="7" pos:column="74"/></name><operator pos:line="7" pos:column="74">-&gt;<pos:position pos:line="7" pos:column="79"/></operator><name pos:line="7" pos:column="76">local<pos:position pos:line="7" pos:column="81"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="83"/></expr_stmt>

    <comment type="block" format="doxygen" pos:line="9" pos:column="5">/** Release the 'in' socket for lazy closure.
     * in and out sockets may be sharing one same FD.
     * This prevents this function from executing repeatedly.
     */</comment>
    <expr_stmt><expr><name pos:line="13" pos:column="5">icpIncomingConn<pos:position pos:line="13" pos:column="20"/></name> <operator pos:line="13" pos:column="21">=<pos:position pos:line="13" pos:column="22"/></operator> <name pos:line="13" pos:column="23">NULL<pos:position pos:line="13" pos:column="27"/></name></expr>;<pos:position pos:line="13" pos:column="28"/></expr_stmt>

    <comment type="block" format="doxygen" pos:line="15" pos:column="5">/**
     * Normally we only write to the outgoing ICP socket, but
     * we also have a read handler there to catch messages sent
     * to that specific interface.  During shutdown, we must
     * disable reading on the outgoing socket.
     */</comment>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">assert<pos:position pos:line="21" pos:column="11"/></name><argument_list pos:line="21" pos:column="11">(<argument><expr><call><name><name pos:line="21" pos:column="12">Comm<pos:position pos:line="21" pos:column="16"/></name><operator pos:line="21" pos:column="16">::<pos:position pos:line="21" pos:column="18"/></operator><name pos:line="21" pos:column="18">IsConnOpen<pos:position pos:line="21" pos:column="28"/></name></name><argument_list pos:line="21" pos:column="28">(<argument><expr><name pos:line="21" pos:column="29">icpOutgoingConn<pos:position pos:line="21" pos:column="44"/></name></expr></argument>)<pos:position pos:line="21" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="47"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="23" pos:column="5">Comm<pos:position pos:line="23" pos:column="9"/></name><operator pos:line="23" pos:column="9">::<pos:position pos:line="23" pos:column="11"/></operator><name pos:line="23" pos:column="11">SetSelect<pos:position pos:line="23" pos:column="20"/></name></name><argument_list pos:line="23" pos:column="20">(<argument><expr><name><name pos:line="23" pos:column="21">icpOutgoingConn<pos:position pos:line="23" pos:column="36"/></name><operator pos:line="23" pos:column="36">-&gt;<pos:position pos:line="23" pos:column="41"/></operator><name pos:line="23" pos:column="38">fd<pos:position pos:line="23" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="42">COMM_SELECT_READ<pos:position pos:line="23" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="60">NULL<pos:position pos:line="23" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="66">NULL<pos:position pos:line="23" pos:column="70"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="72">0<pos:position pos:line="23" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="75"/></expr_stmt>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
