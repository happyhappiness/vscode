<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4838_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Rock<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">SwapDir<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">writeCompleted<pos:position pos:line="2" pos:column="30"/></name></name><parameter_list pos:line="2" pos:column="30">(<parameter><decl><type><name pos:line="2" pos:column="31">int<pos:position pos:line="2" pos:column="34"/></name></type> <name pos:line="2" pos:column="35">errflag<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="44">size_t<pos:position pos:line="2" pos:column="50"/></name></type> <name pos:line="2" pos:column="51">rlen<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="57">RefCount<pos:position pos:line="2" pos:column="65"/></name><argument_list type="generic" pos:line="2" pos:column="65">&lt; <argument><expr><name><operator pos:line="2" pos:column="67">::<pos:position pos:line="2" pos:column="69"/></operator><name pos:line="2" pos:column="69">WriteRequest<pos:position pos:line="2" pos:column="81"/></name></name></expr></argument>&gt;<pos:position pos:line="2" pos:column="85"/></argument_list></name></type> <name pos:line="2" pos:column="83">r<pos:position pos:line="2" pos:column="84"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="85"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">Rock<pos:position pos:line="4" pos:column="9"/></name><operator pos:line="4" pos:column="9">::<pos:position pos:line="4" pos:column="11"/></operator><name pos:line="4" pos:column="11">WriteRequest<pos:position pos:line="4" pos:column="23"/></name></name> <modifier pos:line="4" pos:column="24">*<pos:position pos:line="4" pos:column="25"/></modifier></type><name pos:line="4" pos:column="25">request<pos:position pos:line="4" pos:column="32"/></name> <init pos:line="4" pos:column="33">= <expr><cast type="dynamic" pos:line="4" pos:column="35">dynamic_cast<argument_list type="generic" pos:line="4" pos:column="47">&lt;<argument><expr><name><name pos:line="4" pos:column="48">Rock<pos:position pos:line="4" pos:column="52"/></name><operator pos:line="4" pos:column="52">::<pos:position pos:line="4" pos:column="54"/></operator><name pos:line="4" pos:column="54">WriteRequest<pos:position pos:line="4" pos:column="66"/></name></name><operator pos:line="4" pos:column="66">*<pos:position pos:line="4" pos:column="67"/></operator></expr></argument>&gt;<pos:position pos:line="4" pos:column="71"/></argument_list><argument_list pos:line="4" pos:column="68">(<argument><expr><call><name><name pos:line="4" pos:column="69">r<pos:position pos:line="4" pos:column="70"/></name><operator pos:line="4" pos:column="70">.<pos:position pos:line="4" pos:column="71"/></operator><name pos:line="4" pos:column="71">getRaw<pos:position pos:line="4" pos:column="77"/></name></name><argument_list pos:line="4" pos:column="77">()<pos:position pos:line="4" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="80"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="4" pos:column="81"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><name pos:line="5" pos:column="12">request<pos:position pos:line="5" pos:column="19"/></name></expr></argument>)<pos:position pos:line="5" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><name><name pos:line="6" pos:column="12">request<pos:position pos:line="6" pos:column="19"/></name><operator pos:line="6" pos:column="19">-&gt;<pos:position pos:line="6" pos:column="24"/></operator><name pos:line="6" pos:column="21">sio<pos:position pos:line="6" pos:column="24"/></name></name> <operator pos:line="6" pos:column="25">!=<pos:position pos:line="6" pos:column="27"/></operator>  <name pos:line="6" pos:column="29">NULL<pos:position pos:line="6" pos:column="33"/></name></expr></argument>)<pos:position pos:line="6" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="35"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">IoState<pos:position pos:line="7" pos:column="12"/></name> <modifier pos:line="7" pos:column="13">&amp;<pos:position pos:line="7" pos:column="18"/></modifier></type><name pos:line="7" pos:column="14">sio<pos:position pos:line="7" pos:column="17"/></name> <init pos:line="7" pos:column="18">= <expr><operator pos:line="7" pos:column="20">*<pos:position pos:line="7" pos:column="21"/></operator><name><name pos:line="7" pos:column="21">request<pos:position pos:line="7" pos:column="28"/></name><operator pos:line="7" pos:column="28">-&gt;<pos:position pos:line="7" pos:column="33"/></operator><name pos:line="7" pos:column="30">sio<pos:position pos:line="7" pos:column="33"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="34"/></decl_stmt>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">errflag<pos:position pos:line="9" pos:column="16"/></name> <operator pos:line="9" pos:column="17">==<pos:position pos:line="9" pos:column="19"/></operator> <name pos:line="9" pos:column="20">DISK_OK<pos:position pos:line="9" pos:column="27"/></name></expr>)<pos:position pos:line="9" pos:column="28"/></condition><then pos:line="9" pos:column="28"> <block pos:line="9" pos:column="29">{
        <comment type="line" pos:line="10" pos:column="9">// close, assuming we only write once; the entry gets the read lock</comment>
        <expr_stmt><expr><call><name><name pos:line="11" pos:column="9">map<pos:position pos:line="11" pos:column="12"/></name><operator pos:line="11" pos:column="12">-&gt;<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="14">closeForWriting<pos:position pos:line="11" pos:column="29"/></name></name><argument_list pos:line="11" pos:column="29">(<argument><expr><name><name pos:line="11" pos:column="30">sio<pos:position pos:line="11" pos:column="33"/></name><operator pos:line="11" pos:column="33">.<pos:position pos:line="11" pos:column="34"/></operator><name pos:line="11" pos:column="34">swap_filen<pos:position pos:line="11" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="11" pos:column="46">true<pos:position pos:line="11" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="52"/></expr_stmt>
        <comment type="line" pos:line="12" pos:column="9">// do not increment sio.offset_ because we do it in sio-&gt;write()</comment>
    }<pos:position pos:line="13" pos:column="6"/></block></then> <else pos:line="13" pos:column="7">else <block pos:line="13" pos:column="12">{
        <comment type="line" pos:line="14" pos:column="9">// Do not abortWriting here. The entry should keep the write lock</comment>
        <comment type="line" pos:line="15" pos:column="9">// instead of losing association with the store and confusing core.</comment>
        <expr_stmt><expr><call><name><name pos:line="16" pos:column="9">map<pos:position pos:line="16" pos:column="12"/></name><operator pos:line="16" pos:column="12">-&gt;<pos:position pos:line="16" pos:column="17"/></operator><name pos:line="16" pos:column="14">free<pos:position pos:line="16" pos:column="18"/></name></name><argument_list pos:line="16" pos:column="18">(<argument><expr><name><name pos:line="16" pos:column="19">sio<pos:position pos:line="16" pos:column="22"/></name><operator pos:line="16" pos:column="22">.<pos:position pos:line="16" pos:column="23"/></operator><name pos:line="16" pos:column="23">swap_filen<pos:position pos:line="16" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="35"/></expr_stmt> <comment type="line" pos:line="16" pos:column="36">// will mark as unusable, just in case</comment>
    }<pos:position pos:line="17" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="19" pos:column="5">assert<pos:position pos:line="19" pos:column="11"/></name><argument_list pos:line="19" pos:column="11">(<argument><expr><name><name pos:line="19" pos:column="12">sio<pos:position pos:line="19" pos:column="15"/></name><operator pos:line="19" pos:column="15">.<pos:position pos:line="19" pos:column="16"/></operator><name pos:line="19" pos:column="16">diskOffset<pos:position pos:line="19" pos:column="26"/></name></name> <operator pos:line="19" pos:column="27">+<pos:position pos:line="19" pos:column="28"/></operator> <name><name pos:line="19" pos:column="29">sio<pos:position pos:line="19" pos:column="32"/></name><operator pos:line="19" pos:column="32">.<pos:position pos:line="19" pos:column="33"/></operator><name pos:line="19" pos:column="33">offset_<pos:position pos:line="19" pos:column="40"/></name></name> <operator pos:line="19" pos:column="41">&lt;=<pos:position pos:line="19" pos:column="46"/></operator> <call><name pos:line="19" pos:column="44">diskOffsetLimit<pos:position pos:line="19" pos:column="59"/></name><argument_list pos:line="19" pos:column="59">()<pos:position pos:line="19" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="63"/></expr_stmt> <comment type="line" pos:line="19" pos:column="64">// post-factum</comment>

    <expr_stmt><expr><call><name><name pos:line="21" pos:column="5">sio<pos:position pos:line="21" pos:column="8"/></name><operator pos:line="21" pos:column="8">.<pos:position pos:line="21" pos:column="9"/></operator><name pos:line="21" pos:column="9">finishedWriting<pos:position pos:line="21" pos:column="24"/></name></name><argument_list pos:line="21" pos:column="24">(<argument><expr><name pos:line="21" pos:column="25">errflag<pos:position pos:line="21" pos:column="32"/></name></expr></argument>)<pos:position pos:line="21" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="34"/></expr_stmt>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
