<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7456_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">SBuf<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Security<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">HandshakeParser<pos:position pos:line="2" pos:column="26"/></name><operator pos:line="2" pos:column="26">::<pos:position pos:line="2" pos:column="28"/></operator><name pos:line="2" pos:column="28">parseSniExtension<pos:position pos:line="2" pos:column="45"/></name></name><parameter_list pos:line="2" pos:column="45">(<parameter><decl><type><specifier pos:line="2" pos:column="46">const<pos:position pos:line="2" pos:column="51"/></specifier> <name pos:line="2" pos:column="52">SBuf<pos:position pos:line="2" pos:column="56"/></name> <modifier pos:line="2" pos:column="57">&amp;<pos:position pos:line="2" pos:column="62"/></modifier></type><name pos:line="2" pos:column="58">extensionData<pos:position pos:line="2" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="72"/></parameter_list> <specifier pos:line="2" pos:column="73">const<pos:position pos:line="2" pos:column="78"/></specifier>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// Servers SHOULD send an empty SNI extension, not an empty ServerNameList!</comment>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><call><name><name pos:line="5" pos:column="9">extensionData<pos:position pos:line="5" pos:column="22"/></name><operator pos:line="5" pos:column="22">.<pos:position pos:line="5" pos:column="23"/></operator><name pos:line="5" pos:column="23">isEmpty<pos:position pos:line="5" pos:column="30"/></name></name><argument_list pos:line="5" pos:column="30">()<pos:position pos:line="5" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="33"/></condition><then pos:line="5" pos:column="33">
        <block type="pseudo"><return pos:line="6" pos:column="9">return <expr><call><name pos:line="6" pos:column="16">SBuf<pos:position pos:line="6" pos:column="20"/></name><argument_list pos:line="6" pos:column="20">()<pos:position pos:line="6" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="23"/></return></block></then></if>

    <comment type="line" pos:line="8" pos:column="5">// SNI MUST NOT contain more than one name of the same name_type but</comment>
    <comment type="line" pos:line="9" pos:column="5">// we ignore violations and simply return the first host name found.</comment>
    <decl_stmt><decl><type><name><name pos:line="10" pos:column="5">Parser<pos:position pos:line="10" pos:column="11"/></name><operator pos:line="10" pos:column="11">::<pos:position pos:line="10" pos:column="13"/></operator><name pos:line="10" pos:column="13">BinaryTokenizer<pos:position pos:line="10" pos:column="28"/></name></name></type> <name pos:line="10" pos:column="29">tkList<pos:position pos:line="10" pos:column="35"/></name><argument_list pos:line="10" pos:column="35">(<argument><expr><name pos:line="10" pos:column="36">extensionData<pos:position pos:line="10" pos:column="49"/></name></expr></argument>)<pos:position pos:line="10" pos:column="50"/></argument_list></decl>;<pos:position pos:line="10" pos:column="51"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="11" pos:column="5">Parser<pos:position pos:line="11" pos:column="11"/></name><operator pos:line="11" pos:column="11">::<pos:position pos:line="11" pos:column="13"/></operator><name pos:line="11" pos:column="13">BinaryTokenizer<pos:position pos:line="11" pos:column="28"/></name></name></type> <name pos:line="11" pos:column="29">tkNames<pos:position pos:line="11" pos:column="36"/></name><argument_list pos:line="11" pos:column="36">(<argument><expr><call><name><name pos:line="11" pos:column="37">tkList<pos:position pos:line="11" pos:column="43"/></name><operator pos:line="11" pos:column="43">.<pos:position pos:line="11" pos:column="44"/></operator><name pos:line="11" pos:column="44">pstring16<pos:position pos:line="11" pos:column="53"/></name></name><argument_list pos:line="11" pos:column="53">(<argument><expr><literal type="string" pos:line="11" pos:column="54">"ServerNameList"<pos:position pos:line="11" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="72"/></argument_list></decl>;<pos:position pos:line="11" pos:column="73"/></decl_stmt>
    <while pos:line="12" pos:column="5">while <condition pos:line="12" pos:column="11">(<expr><operator pos:line="12" pos:column="12">!<pos:position pos:line="12" pos:column="13"/></operator><call><name><name pos:line="12" pos:column="13">tkNames<pos:position pos:line="12" pos:column="20"/></name><operator pos:line="12" pos:column="20">.<pos:position pos:line="12" pos:column="21"/></operator><name pos:line="12" pos:column="21">atEnd<pos:position pos:line="12" pos:column="26"/></name></name><argument_list pos:line="12" pos:column="26">()<pos:position pos:line="12" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="29"/></condition> <block pos:line="12" pos:column="30">{
        <decl_stmt><decl><type><name><name pos:line="13" pos:column="9">Parser<pos:position pos:line="13" pos:column="15"/></name><operator pos:line="13" pos:column="15">::<pos:position pos:line="13" pos:column="17"/></operator><name pos:line="13" pos:column="17">BinaryTokenizerContext<pos:position pos:line="13" pos:column="39"/></name></name></type> <name pos:line="13" pos:column="40">serverName<pos:position pos:line="13" pos:column="50"/></name><argument_list pos:line="13" pos:column="50">(<argument><expr><name pos:line="13" pos:column="51">tkNames<pos:position pos:line="13" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="60">"ServerName"<pos:position pos:line="13" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="73"/></argument_list></decl>;<pos:position pos:line="13" pos:column="74"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">const<pos:position pos:line="14" pos:column="14"/></specifier> <name pos:line="14" pos:column="15">uint8_t<pos:position pos:line="14" pos:column="22"/></name></type> <name pos:line="14" pos:column="23">nameType<pos:position pos:line="14" pos:column="31"/></name> <init pos:line="14" pos:column="32">= <expr><call><name><name pos:line="14" pos:column="34">tkNames<pos:position pos:line="14" pos:column="41"/></name><operator pos:line="14" pos:column="41">.<pos:position pos:line="14" pos:column="42"/></operator><name pos:line="14" pos:column="42">uint8<pos:position pos:line="14" pos:column="47"/></name></name><argument_list pos:line="14" pos:column="47">(<argument><expr><literal type="string" pos:line="14" pos:column="48">".name_type"<pos:position pos:line="14" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="62"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="15" pos:column="9">const<pos:position pos:line="15" pos:column="14"/></specifier> <name pos:line="15" pos:column="15">SBuf<pos:position pos:line="15" pos:column="19"/></name></type> <name pos:line="15" pos:column="20">name<pos:position pos:line="15" pos:column="24"/></name> <init pos:line="15" pos:column="25">= <expr><call><name><name pos:line="15" pos:column="27">tkNames<pos:position pos:line="15" pos:column="34"/></name><operator pos:line="15" pos:column="34">.<pos:position pos:line="15" pos:column="35"/></operator><name pos:line="15" pos:column="35">pstring16<pos:position pos:line="15" pos:column="44"/></name></name><argument_list pos:line="15" pos:column="44">(<argument><expr><literal type="string" pos:line="15" pos:column="45">".name"<pos:position pos:line="15" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="54"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="16" pos:column="9">serverName<pos:position pos:line="16" pos:column="19"/></name><operator pos:line="16" pos:column="19">.<pos:position pos:line="16" pos:column="20"/></operator><name pos:line="16" pos:column="20">success<pos:position pos:line="16" pos:column="27"/></name></name><argument_list pos:line="16" pos:column="27">()<pos:position pos:line="16" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="30"/></expr_stmt>

        <if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">nameType<pos:position pos:line="18" pos:column="21"/></name> <operator pos:line="18" pos:column="22">==<pos:position pos:line="18" pos:column="24"/></operator> <literal type="number" pos:line="18" pos:column="25">0<pos:position pos:line="18" pos:column="26"/></literal></expr>)<pos:position pos:line="18" pos:column="27"/></condition><then pos:line="18" pos:column="27"> <block pos:line="18" pos:column="28">{
            <expr_stmt><expr><call><name pos:line="19" pos:column="13">debugs<pos:position pos:line="19" pos:column="19"/></name><argument_list pos:line="19" pos:column="19">(<argument><expr><literal type="number" pos:line="19" pos:column="20">83<pos:position pos:line="19" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="24">3<pos:position pos:line="19" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="27">"host_name="<pos:position pos:line="19" pos:column="39"/></literal> <operator pos:line="19" pos:column="40">&lt;&lt;<pos:position pos:line="19" pos:column="48"/></operator> <name pos:line="19" pos:column="43">name<pos:position pos:line="19" pos:column="47"/></name></expr></argument>)<pos:position pos:line="19" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="49"/></expr_stmt>
            <return pos:line="20" pos:column="13">return <expr><name pos:line="20" pos:column="20">name<pos:position pos:line="20" pos:column="24"/></name></expr>;<pos:position pos:line="20" pos:column="25"/></return> <comment type="line" pos:line="20" pos:column="26">// it may be empty</comment>
        }<pos:position pos:line="21" pos:column="10"/></block></then></if>
        <comment type="line" pos:line="22" pos:column="9">// else we just parsed a new/unsupported NameType which,</comment>
        <comment type="line" pos:line="23" pos:column="9">// according to RFC 6066, MUST begin with a 16-bit length field</comment>
    }<pos:position pos:line="24" pos:column="6"/></block></while>
    <return pos:line="25" pos:column="5">return <expr><call><name pos:line="25" pos:column="12">SBuf<pos:position pos:line="25" pos:column="16"/></name><argument_list pos:line="25" pos:column="16">()<pos:position pos:line="25" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="19"/></return> <comment type="line" pos:line="25" pos:column="20">// SNI extension lacks host_name</comment>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
