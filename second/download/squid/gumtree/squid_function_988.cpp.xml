<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_function_988.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ConnStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">parseProxyProtocolHeader<pos:position pos:line="2" pos:column="40"/></name></name><parameter_list pos:line="2" pos:column="40">()<pos:position pos:line="2" pos:column="42"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// http://www.haproxy.org/download/1.5/doc/proxy-protocol.txt</comment>

    <comment type="line" pos:line="6" pos:column="5">// detect and parse PROXY/2.0 protocol header</comment>
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><call><name><name pos:line="7" pos:column="9">in<pos:position pos:line="7" pos:column="11"/></name><operator pos:line="7" pos:column="11">.<pos:position pos:line="7" pos:column="12"/></operator><name pos:line="7" pos:column="12">buf<pos:position pos:line="7" pos:column="15"/></name><operator pos:line="7" pos:column="15">.<pos:position pos:line="7" pos:column="16"/></operator><name pos:line="7" pos:column="16">startsWith<pos:position pos:line="7" pos:column="26"/></name></name><argument_list pos:line="7" pos:column="26">(<argument><expr><name pos:line="7" pos:column="27">Proxy2p0magic<pos:position pos:line="7" pos:column="40"/></name></expr></argument>)<pos:position pos:line="7" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="42"/></condition><then pos:line="7" pos:column="42">
        <block type="pseudo"><return pos:line="8" pos:column="9">return <expr><call><name pos:line="8" pos:column="16">parseProxy2p0<pos:position pos:line="8" pos:column="29"/></name><argument_list pos:line="8" pos:column="29">()<pos:position pos:line="8" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="32"/></return></block></then></if>

    <comment type="line" pos:line="10" pos:column="5">// detect and parse PROXY/1.0 protocol header</comment>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><call><name><name pos:line="11" pos:column="9">in<pos:position pos:line="11" pos:column="11"/></name><operator pos:line="11" pos:column="11">.<pos:position pos:line="11" pos:column="12"/></operator><name pos:line="11" pos:column="12">buf<pos:position pos:line="11" pos:column="15"/></name><operator pos:line="11" pos:column="15">.<pos:position pos:line="11" pos:column="16"/></operator><name pos:line="11" pos:column="16">startsWith<pos:position pos:line="11" pos:column="26"/></name></name><argument_list pos:line="11" pos:column="26">(<argument><expr><name pos:line="11" pos:column="27">Proxy1p0magic<pos:position pos:line="11" pos:column="40"/></name></expr></argument>)<pos:position pos:line="11" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="42"/></condition><then pos:line="11" pos:column="42">
        <block type="pseudo"><return pos:line="12" pos:column="9">return <expr><call><name pos:line="12" pos:column="16">parseProxy1p0<pos:position pos:line="12" pos:column="29"/></name><argument_list pos:line="12" pos:column="29">()<pos:position pos:line="12" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="32"/></return></block></then></if>

    <comment type="line" pos:line="14" pos:column="5">// detect and terminate other protocols</comment>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><call><name><name pos:line="15" pos:column="9">in<pos:position pos:line="15" pos:column="11"/></name><operator pos:line="15" pos:column="11">.<pos:position pos:line="15" pos:column="12"/></operator><name pos:line="15" pos:column="12">buf<pos:position pos:line="15" pos:column="15"/></name><operator pos:line="15" pos:column="15">.<pos:position pos:line="15" pos:column="16"/></operator><name pos:line="15" pos:column="16">length<pos:position pos:line="15" pos:column="22"/></name></name><argument_list pos:line="15" pos:column="22">()<pos:position pos:line="15" pos:column="24"/></argument_list></call> <operator pos:line="15" pos:column="25">&gt;=<pos:position pos:line="15" pos:column="30"/></operator> <call><name><name pos:line="15" pos:column="28">Proxy2p0magic<pos:position pos:line="15" pos:column="41"/></name><operator pos:line="15" pos:column="41">.<pos:position pos:line="15" pos:column="42"/></operator><name pos:line="15" pos:column="42">length<pos:position pos:line="15" pos:column="48"/></name></name><argument_list pos:line="15" pos:column="48">()<pos:position pos:line="15" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="51"/></condition><then pos:line="15" pos:column="51"> <block pos:line="15" pos:column="52">{
        <comment type="line" pos:line="16" pos:column="9">// PROXY/1.0 magic is shorter, so we know that</comment>
        <comment type="line" pos:line="17" pos:column="9">// the input does not start with any PROXY magic</comment>
        <return pos:line="18" pos:column="9">return <expr><call><name pos:line="18" pos:column="16">proxyProtocolError<pos:position pos:line="18" pos:column="34"/></name><argument_list pos:line="18" pos:column="34">(<argument><expr><literal type="string" pos:line="18" pos:column="35">"PROXY protocol error: invalid header"<pos:position pos:line="18" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="75"/></return>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="21" pos:column="5">// TODO: detect short non-magic prefixes earlier to avoid</comment>
    <comment type="line" pos:line="22" pos:column="5">// waiting for more data which may never come</comment>

    <comment type="line" pos:line="24" pos:column="5">// not enough bytes to parse yet.</comment>
    <return pos:line="25" pos:column="5">return <expr><literal type="boolean" pos:line="25" pos:column="12">false<pos:position pos:line="25" pos:column="17"/></literal></expr>;<pos:position pos:line="25" pos:column="18"/></return>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
