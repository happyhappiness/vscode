<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4636_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">argc<pos:position pos:line="1" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name><name pos:line="1" pos:column="26">argv<pos:position pos:line="1" pos:column="30"/></name><index pos:line="1" pos:column="30">[]<pos:position pos:line="1" pos:column="32"/></index></name></decl></parameter>)<pos:position pos:line="1" pos:column="33"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <try pos:line="3" pos:column="5">try <block pos:line="3" pos:column="9">{
        <decl_stmt><decl><type><name pos:line="4" pos:column="9">size_t<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">max_db_size<pos:position pos:line="4" pos:column="27"/></name> <init pos:line="4" pos:column="28">= <expr><literal type="number" pos:line="4" pos:column="30">0<pos:position pos:line="4" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="5" pos:column="9">size_t<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">fs_block_size<pos:position pos:line="5" pos:column="29"/></name> <init pos:line="5" pos:column="30">= <expr><literal type="number" pos:line="5" pos:column="32">0<pos:position pos:line="5" pos:column="33"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="34"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="6" pos:column="9">int8_t<pos:position pos:line="6" pos:column="15"/></name></type> <name pos:line="6" pos:column="16">c<pos:position pos:line="6" pos:column="17"/></name></decl>;<pos:position pos:line="6" pos:column="18"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="7" pos:column="9">bool<pos:position pos:line="7" pos:column="13"/></name></type> <name pos:line="7" pos:column="14">create_new_db<pos:position pos:line="7" pos:column="27"/></name> <init pos:line="7" pos:column="28">= <expr><literal type="boolean" pos:line="7" pos:column="30">false<pos:position pos:line="7" pos:column="35"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="36"/></decl_stmt>
        <decl_stmt><decl><type><name><name pos:line="8" pos:column="9">std<pos:position pos:line="8" pos:column="12"/></name><operator pos:line="8" pos:column="12">::<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">string<pos:position pos:line="8" pos:column="20"/></name></name></type> <name pos:line="8" pos:column="21">db_path<pos:position pos:line="8" pos:column="28"/></name></decl>;<pos:position pos:line="8" pos:column="29"/></decl_stmt>
        <comment type="line" pos:line="9" pos:column="9">// process options.</comment>
        <while pos:line="10" pos:column="9">while <condition pos:line="10" pos:column="15">(<expr><operator pos:line="10" pos:column="16">(<pos:position pos:line="10" pos:column="17"/></operator><name pos:line="10" pos:column="17">c<pos:position pos:line="10" pos:column="18"/></name> <operator pos:line="10" pos:column="19">=<pos:position pos:line="10" pos:column="20"/></operator> <call><name pos:line="10" pos:column="21">getopt<pos:position pos:line="10" pos:column="27"/></name><argument_list pos:line="10" pos:column="27">(<argument><expr><name pos:line="10" pos:column="28">argc<pos:position pos:line="10" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="34">argv<pos:position pos:line="10" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="40">"dcghvs:M:b:n:"<pos:position pos:line="10" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="56"/></argument_list></call><operator pos:line="10" pos:column="56">)<pos:position pos:line="10" pos:column="57"/></operator> <operator pos:line="10" pos:column="58">!=<pos:position pos:line="10" pos:column="60"/></operator> <operator pos:line="10" pos:column="61">-<pos:position pos:line="10" pos:column="62"/></operator><literal type="number" pos:line="10" pos:column="62">1<pos:position pos:line="10" pos:column="63"/></literal></expr>)<pos:position pos:line="10" pos:column="64"/></condition> <block pos:line="10" pos:column="65">{
            <switch pos:line="11" pos:column="13">switch <condition pos:line="11" pos:column="20">(<expr><name pos:line="11" pos:column="21">c<pos:position pos:line="11" pos:column="22"/></name></expr>)<pos:position pos:line="11" pos:column="23"/></condition> <block pos:line="11" pos:column="24">{
            <case pos:line="12" pos:column="13">case <expr><literal type="char" pos:line="12" pos:column="18">'d'<pos:position pos:line="12" pos:column="21"/></literal></expr>:<pos:position pos:line="12" pos:column="22"/></case>
                <expr_stmt><expr><name pos:line="13" pos:column="17">debug_enabled<pos:position pos:line="13" pos:column="30"/></name> <operator pos:line="13" pos:column="31">=<pos:position pos:line="13" pos:column="32"/></operator> <literal type="number" pos:line="13" pos:column="33">1<pos:position pos:line="13" pos:column="34"/></literal></expr>;<pos:position pos:line="13" pos:column="35"/></expr_stmt>
                <break pos:line="14" pos:column="17">break;<pos:position pos:line="14" pos:column="23"/></break>
            <case pos:line="15" pos:column="13">case <expr><literal type="char" pos:line="15" pos:column="18">'b'<pos:position pos:line="15" pos:column="21"/></literal></expr>:<pos:position pos:line="15" pos:column="22"/></case>
                <if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><operator pos:line="16" pos:column="21">!<pos:position pos:line="16" pos:column="22"/></operator><call><name pos:line="16" pos:column="22">parseBytesOptionValue<pos:position pos:line="16" pos:column="43"/></name><argument_list pos:line="16" pos:column="43">(<argument><expr><operator pos:line="16" pos:column="44">&amp;<pos:position pos:line="16" pos:column="49"/></operator><name pos:line="16" pos:column="45">fs_block_size<pos:position pos:line="16" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="60">optarg<pos:position pos:line="16" pos:column="66"/></name></expr></argument>)<pos:position pos:line="16" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="68"/></condition><then pos:line="16" pos:column="68"> <block pos:line="16" pos:column="69">{
                    <throw pos:line="17" pos:column="21">throw <expr><call><name><name pos:line="17" pos:column="27">std<pos:position pos:line="17" pos:column="30"/></name><operator pos:line="17" pos:column="30">::<pos:position pos:line="17" pos:column="32"/></operator><name pos:line="17" pos:column="32">runtime_error<pos:position pos:line="17" pos:column="45"/></name></name><argument_list pos:line="17" pos:column="45">(<argument><expr><literal type="string" pos:line="17" pos:column="46">"Error when parsing -b options value"<pos:position pos:line="17" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="85"/></throw>
                }<pos:position pos:line="18" pos:column="18"/></block></then></if>
                <break pos:line="19" pos:column="17">break;<pos:position pos:line="19" pos:column="23"/></break>
            <case pos:line="20" pos:column="13">case <expr><literal type="char" pos:line="20" pos:column="18">'s'<pos:position pos:line="20" pos:column="21"/></literal></expr>:<pos:position pos:line="20" pos:column="22"/></case>
                <expr_stmt><expr><name pos:line="21" pos:column="17">db_path<pos:position pos:line="21" pos:column="24"/></name> <operator pos:line="21" pos:column="25">=<pos:position pos:line="21" pos:column="26"/></operator> <name pos:line="21" pos:column="27">optarg<pos:position pos:line="21" pos:column="33"/></name></expr>;<pos:position pos:line="21" pos:column="34"/></expr_stmt>
                <break pos:line="22" pos:column="17">break;<pos:position pos:line="22" pos:column="23"/></break>
            <case pos:line="23" pos:column="13">case <expr><literal type="char" pos:line="23" pos:column="18">'M'<pos:position pos:line="23" pos:column="21"/></literal></expr>:<pos:position pos:line="23" pos:column="22"/></case>
                <if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><operator pos:line="24" pos:column="21">!<pos:position pos:line="24" pos:column="22"/></operator><call><name pos:line="24" pos:column="22">parseBytesOptionValue<pos:position pos:line="24" pos:column="43"/></name><argument_list pos:line="24" pos:column="43">(<argument><expr><operator pos:line="24" pos:column="44">&amp;<pos:position pos:line="24" pos:column="49"/></operator><name pos:line="24" pos:column="45">max_db_size<pos:position pos:line="24" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="58">optarg<pos:position pos:line="24" pos:column="64"/></name></expr></argument>)<pos:position pos:line="24" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="66"/></condition><then pos:line="24" pos:column="66"> <block pos:line="24" pos:column="67">{
                    <throw pos:line="25" pos:column="21">throw <expr><call><name><name pos:line="25" pos:column="27">std<pos:position pos:line="25" pos:column="30"/></name><operator pos:line="25" pos:column="30">::<pos:position pos:line="25" pos:column="32"/></operator><name pos:line="25" pos:column="32">runtime_error<pos:position pos:line="25" pos:column="45"/></name></name><argument_list pos:line="25" pos:column="45">(<argument><expr><literal type="string" pos:line="25" pos:column="46">"Error when parsing -M options value"<pos:position pos:line="25" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="85"/></throw>
                }<pos:position pos:line="26" pos:column="18"/></block></then></if>
                <break pos:line="27" pos:column="17">break;<pos:position pos:line="27" pos:column="23"/></break>
            <case pos:line="28" pos:column="13">case <expr><literal type="char" pos:line="28" pos:column="18">'v'<pos:position pos:line="28" pos:column="21"/></literal></expr>:<pos:position pos:line="28" pos:column="22"/></case>
                <expr_stmt><expr><name><name pos:line="29" pos:column="17">std<pos:position pos:line="29" pos:column="20"/></name><operator pos:line="29" pos:column="20">::<pos:position pos:line="29" pos:column="22"/></operator><name pos:line="29" pos:column="22">cout<pos:position pos:line="29" pos:column="26"/></name></name> <operator pos:line="29" pos:column="27">&lt;&lt;<pos:position pos:line="29" pos:column="35"/></operator> <literal type="string" pos:line="29" pos:column="30">"ssl_crtd version "<pos:position pos:line="29" pos:column="49"/></literal> <operator pos:line="29" pos:column="50">&lt;&lt;<pos:position pos:line="29" pos:column="58"/></operator> <name pos:line="29" pos:column="53">VERSION<pos:position pos:line="29" pos:column="60"/></name> <operator pos:line="29" pos:column="61">&lt;&lt;<pos:position pos:line="29" pos:column="69"/></operator> <name><name pos:line="29" pos:column="64">std<pos:position pos:line="29" pos:column="67"/></name><operator pos:line="29" pos:column="67">::<pos:position pos:line="29" pos:column="69"/></operator><name pos:line="29" pos:column="69">endl<pos:position pos:line="29" pos:column="73"/></name></name></expr>;<pos:position pos:line="29" pos:column="74"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="30" pos:column="17">exit<pos:position pos:line="30" pos:column="21"/></name><argument_list pos:line="30" pos:column="21">(<argument><expr><literal type="number" pos:line="30" pos:column="22">0<pos:position pos:line="30" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="25"/></expr_stmt>
                <break pos:line="31" pos:column="17">break;<pos:position pos:line="31" pos:column="23"/></break>
            <case pos:line="32" pos:column="13">case <expr><literal type="char" pos:line="32" pos:column="18">'c'<pos:position pos:line="32" pos:column="21"/></literal></expr>:<pos:position pos:line="32" pos:column="22"/></case>
                <expr_stmt><expr><name pos:line="33" pos:column="17">create_new_db<pos:position pos:line="33" pos:column="30"/></name> <operator pos:line="33" pos:column="31">=<pos:position pos:line="33" pos:column="32"/></operator> <literal type="boolean" pos:line="33" pos:column="33">true<pos:position pos:line="33" pos:column="37"/></literal></expr>;<pos:position pos:line="33" pos:column="38"/></expr_stmt>
                <break pos:line="34" pos:column="17">break;<pos:position pos:line="34" pos:column="23"/></break>
            <case pos:line="35" pos:column="13">case <expr><literal type="char" pos:line="35" pos:column="18">'h'<pos:position pos:line="35" pos:column="21"/></literal></expr>:<pos:position pos:line="35" pos:column="22"/></case>
                <expr_stmt><expr><call><name pos:line="36" pos:column="17">usage<pos:position pos:line="36" pos:column="22"/></name><argument_list pos:line="36" pos:column="22">()<pos:position pos:line="36" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="25"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="37" pos:column="17">exit<pos:position pos:line="37" pos:column="21"/></name><argument_list pos:line="37" pos:column="21">(<argument><expr><literal type="number" pos:line="37" pos:column="22">0<pos:position pos:line="37" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="25"/></expr_stmt>
            <default pos:line="38" pos:column="13">default:<pos:position pos:line="38" pos:column="21"/></default>
                <expr_stmt><expr><call><name pos:line="39" pos:column="17">exit<pos:position pos:line="39" pos:column="21"/></name><argument_list pos:line="39" pos:column="21">(<argument><expr><literal type="number" pos:line="39" pos:column="22">0<pos:position pos:line="39" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="25"/></expr_stmt>
            }<pos:position pos:line="40" pos:column="14"/></block></switch>
        }<pos:position pos:line="41" pos:column="10"/></block></while>

        <if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><name pos:line="43" pos:column="13">create_new_db<pos:position pos:line="43" pos:column="26"/></name></expr>)<pos:position pos:line="43" pos:column="27"/></condition><then pos:line="43" pos:column="27"> <block pos:line="43" pos:column="28">{
            <expr_stmt><expr><name><name pos:line="44" pos:column="13">std<pos:position pos:line="44" pos:column="16"/></name><operator pos:line="44" pos:column="16">::<pos:position pos:line="44" pos:column="18"/></operator><name pos:line="44" pos:column="18">cout<pos:position pos:line="44" pos:column="22"/></name></name> <operator pos:line="44" pos:column="23">&lt;&lt;<pos:position pos:line="44" pos:column="31"/></operator> <literal type="string" pos:line="44" pos:column="26">"Initialization SSL db..."<pos:position pos:line="44" pos:column="52"/></literal> <operator pos:line="44" pos:column="53">&lt;&lt;<pos:position pos:line="44" pos:column="61"/></operator> <name><name pos:line="44" pos:column="56">std<pos:position pos:line="44" pos:column="59"/></name><operator pos:line="44" pos:column="59">::<pos:position pos:line="44" pos:column="61"/></operator><name pos:line="44" pos:column="61">endl<pos:position pos:line="44" pos:column="65"/></name></name></expr>;<pos:position pos:line="44" pos:column="66"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="45" pos:column="13">Ssl<pos:position pos:line="45" pos:column="16"/></name><operator pos:line="45" pos:column="16">::<pos:position pos:line="45" pos:column="18"/></operator><name pos:line="45" pos:column="18">CertificateDb<pos:position pos:line="45" pos:column="31"/></name><operator pos:line="45" pos:column="31">::<pos:position pos:line="45" pos:column="33"/></operator><name pos:line="45" pos:column="33">create<pos:position pos:line="45" pos:column="39"/></name></name><argument_list pos:line="45" pos:column="39">(<argument><expr><name pos:line="45" pos:column="40">db_path<pos:position pos:line="45" pos:column="47"/></name></expr></argument>)<pos:position pos:line="45" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="49"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="46" pos:column="13">std<pos:position pos:line="46" pos:column="16"/></name><operator pos:line="46" pos:column="16">::<pos:position pos:line="46" pos:column="18"/></operator><name pos:line="46" pos:column="18">cout<pos:position pos:line="46" pos:column="22"/></name></name> <operator pos:line="46" pos:column="23">&lt;&lt;<pos:position pos:line="46" pos:column="31"/></operator> <literal type="string" pos:line="46" pos:column="26">"Done"<pos:position pos:line="46" pos:column="32"/></literal> <operator pos:line="46" pos:column="33">&lt;&lt;<pos:position pos:line="46" pos:column="41"/></operator> <name><name pos:line="46" pos:column="36">std<pos:position pos:line="46" pos:column="39"/></name><operator pos:line="46" pos:column="39">::<pos:position pos:line="46" pos:column="41"/></operator><name pos:line="46" pos:column="41">endl<pos:position pos:line="46" pos:column="45"/></name></name></expr>;<pos:position pos:line="46" pos:column="46"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="47" pos:column="13">exit<pos:position pos:line="47" pos:column="17"/></name><argument_list pos:line="47" pos:column="17">(<argument><expr><literal type="number" pos:line="47" pos:column="18">0<pos:position pos:line="47" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="21"/></expr_stmt>
        }<pos:position pos:line="48" pos:column="10"/></block></then></if>

        <if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><name pos:line="50" pos:column="13">fs_block_size<pos:position pos:line="50" pos:column="26"/></name> <operator pos:line="50" pos:column="27">==<pos:position pos:line="50" pos:column="29"/></operator> <literal type="number" pos:line="50" pos:column="30">0<pos:position pos:line="50" pos:column="31"/></literal></expr>)<pos:position pos:line="50" pos:column="32"/></condition><then pos:line="50" pos:column="32"> <block pos:line="50" pos:column="33">{
            <decl_stmt><decl><type><name><name pos:line="51" pos:column="13">struct<pos:position pos:line="51" pos:column="19"/></name> <name pos:line="51" pos:column="20">statvfs<pos:position pos:line="51" pos:column="27"/></name></name></type> <name pos:line="51" pos:column="28">sfs<pos:position pos:line="51" pos:column="31"/></name></decl>;<pos:position pos:line="51" pos:column="32"/></decl_stmt>

            <if pos:line="53" pos:column="13">if <condition pos:line="53" pos:column="16">(<expr><call><name pos:line="53" pos:column="17">xstatvfs<pos:position pos:line="53" pos:column="25"/></name><argument_list pos:line="53" pos:column="25">(<argument><expr><call><name><name pos:line="53" pos:column="26">db_path<pos:position pos:line="53" pos:column="33"/></name><operator pos:line="53" pos:column="33">.<pos:position pos:line="53" pos:column="34"/></operator><name pos:line="53" pos:column="34">c_str<pos:position pos:line="53" pos:column="39"/></name></name><argument_list pos:line="53" pos:column="39">()<pos:position pos:line="53" pos:column="41"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="53" pos:column="43">&amp;<pos:position pos:line="53" pos:column="48"/></operator><name pos:line="53" pos:column="44">sfs<pos:position pos:line="53" pos:column="47"/></name></expr></argument>)<pos:position pos:line="53" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="53" pos:column="49"/></condition><then pos:line="53" pos:column="49"> <block pos:line="53" pos:column="50">{
                <expr_stmt><expr><name pos:line="54" pos:column="17">fs_block_size<pos:position pos:line="54" pos:column="30"/></name> <operator pos:line="54" pos:column="31">=<pos:position pos:line="54" pos:column="32"/></operator> <literal type="number" pos:line="54" pos:column="33">2048<pos:position pos:line="54" pos:column="37"/></literal></expr>;<pos:position pos:line="54" pos:column="38"/></expr_stmt>
            }<pos:position pos:line="55" pos:column="14"/></block></then> <else pos:line="55" pos:column="15">else <block pos:line="55" pos:column="20">{
                <expr_stmt><expr><name pos:line="56" pos:column="17">fs_block_size<pos:position pos:line="56" pos:column="30"/></name> <operator pos:line="56" pos:column="31">=<pos:position pos:line="56" pos:column="32"/></operator> <name><name pos:line="56" pos:column="33">sfs<pos:position pos:line="56" pos:column="36"/></name><operator pos:line="56" pos:column="36">.<pos:position pos:line="56" pos:column="37"/></operator><name pos:line="56" pos:column="37">f_frsize<pos:position pos:line="56" pos:column="45"/></name></name></expr>;<pos:position pos:line="56" pos:column="46"/></expr_stmt>
                <comment type="line" pos:line="57" pos:column="17">// Sanity check; make sure we have a meaningful value.</comment>
                <if pos:line="58" pos:column="17">if <condition pos:line="58" pos:column="20">(<expr><name pos:line="58" pos:column="21">fs_block_size<pos:position pos:line="58" pos:column="34"/></name> <operator pos:line="58" pos:column="35">&lt;<pos:position pos:line="58" pos:column="39"/></operator> <literal type="number" pos:line="58" pos:column="37">512<pos:position pos:line="58" pos:column="40"/></literal></expr>)<pos:position pos:line="58" pos:column="41"/></condition><then pos:line="58" pos:column="41">
                    <block type="pseudo"><expr_stmt><expr><name pos:line="59" pos:column="21">fs_block_size<pos:position pos:line="59" pos:column="34"/></name> <operator pos:line="59" pos:column="35">=<pos:position pos:line="59" pos:column="36"/></operator> <literal type="number" pos:line="59" pos:column="37">2048<pos:position pos:line="59" pos:column="41"/></literal></expr>;<pos:position pos:line="59" pos:column="42"/></expr_stmt></block></then></if>
            }<pos:position pos:line="60" pos:column="14"/></block></else></if>
        }<pos:position pos:line="61" pos:column="10"/></block></then></if>

        <block pos:line="63" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="64" pos:column="13">Ssl<pos:position pos:line="64" pos:column="16"/></name><operator pos:line="64" pos:column="16">::<pos:position pos:line="64" pos:column="18"/></operator><name pos:line="64" pos:column="18">CertificateDb<pos:position pos:line="64" pos:column="31"/></name><operator pos:line="64" pos:column="31">::<pos:position pos:line="64" pos:column="33"/></operator><name pos:line="64" pos:column="33">check<pos:position pos:line="64" pos:column="38"/></name></name><argument_list pos:line="64" pos:column="38">(<argument><expr><name pos:line="64" pos:column="39">db_path<pos:position pos:line="64" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="48">max_db_size<pos:position pos:line="64" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="61">fs_block_size<pos:position pos:line="64" pos:column="74"/></name></expr></argument>)<pos:position pos:line="64" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="76"/></expr_stmt>
        }<pos:position pos:line="65" pos:column="10"/></block>
        <comment type="line" pos:line="66" pos:column="9">// Initialize SSL subsystem</comment>
        <expr_stmt><expr><call><name pos:line="67" pos:column="9">SSL_load_error_strings<pos:position pos:line="67" pos:column="31"/></name><argument_list pos:line="67" pos:column="31">()<pos:position pos:line="67" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="68" pos:column="9">SSLeay_add_ssl_algorithms<pos:position pos:line="68" pos:column="34"/></name><argument_list pos:line="68" pos:column="34">()<pos:position pos:line="68" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="37"/></expr_stmt>
        <comment type="line" pos:line="69" pos:column="9">// process request.</comment>
        <for pos:line="70" pos:column="9">for <control pos:line="70" pos:column="13">(<init pos:line="70" pos:column="14">;<pos:position pos:line="70" pos:column="15"/></init><condition pos:line="70" pos:column="15">;<pos:position pos:line="70" pos:column="16"/></condition><incr/>)<pos:position pos:line="70" pos:column="17"/></control> <block pos:line="70" pos:column="18">{
            <decl_stmt><decl><type><name pos:line="71" pos:column="13">char<pos:position pos:line="71" pos:column="17"/></name></type> <name><name pos:line="71" pos:column="18">request<pos:position pos:line="71" pos:column="25"/></name><index pos:line="71" pos:column="25">[<expr><name pos:line="71" pos:column="26">HELPER_INPUT_BUFFER<pos:position pos:line="71" pos:column="45"/></name></expr>]<pos:position pos:line="71" pos:column="46"/></index></name></decl>;<pos:position pos:line="71" pos:column="47"/></decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="72" pos:column="13">Ssl<pos:position pos:line="72" pos:column="16"/></name><operator pos:line="72" pos:column="16">::<pos:position pos:line="72" pos:column="18"/></operator><name pos:line="72" pos:column="18">CrtdMessage<pos:position pos:line="72" pos:column="29"/></name></name></type> <name pos:line="72" pos:column="30">request_message<pos:position pos:line="72" pos:column="45"/></name><argument_list pos:line="72" pos:column="45">(<argument><expr><name><name pos:line="72" pos:column="46">Ssl<pos:position pos:line="72" pos:column="49"/></name><operator pos:line="72" pos:column="49">::<pos:position pos:line="72" pos:column="51"/></operator><name pos:line="72" pos:column="51">CrtdMessage<pos:position pos:line="72" pos:column="62"/></name><operator pos:line="72" pos:column="62">::<pos:position pos:line="72" pos:column="64"/></operator><name pos:line="72" pos:column="64">REQUEST<pos:position pos:line="72" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="72" pos:column="72"/></argument_list></decl>;<pos:position pos:line="72" pos:column="73"/></decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="73" pos:column="13">Ssl<pos:position pos:line="73" pos:column="16"/></name><operator pos:line="73" pos:column="16">::<pos:position pos:line="73" pos:column="18"/></operator><name pos:line="73" pos:column="18">CrtdMessage<pos:position pos:line="73" pos:column="29"/></name><operator pos:line="73" pos:column="29">::<pos:position pos:line="73" pos:column="31"/></operator><name pos:line="73" pos:column="31">ParseResult<pos:position pos:line="73" pos:column="42"/></name></name></type> <name pos:line="73" pos:column="43">parse_result<pos:position pos:line="73" pos:column="55"/></name> <init pos:line="73" pos:column="56">= <expr><name><name pos:line="73" pos:column="58">Ssl<pos:position pos:line="73" pos:column="61"/></name><operator pos:line="73" pos:column="61">::<pos:position pos:line="73" pos:column="63"/></operator><name pos:line="73" pos:column="63">CrtdMessage<pos:position pos:line="73" pos:column="74"/></name><operator pos:line="73" pos:column="74">::<pos:position pos:line="73" pos:column="76"/></operator><name pos:line="73" pos:column="76">INCOMPLETE<pos:position pos:line="73" pos:column="86"/></name></name></expr></init></decl>;<pos:position pos:line="73" pos:column="87"/></decl_stmt>

            <while pos:line="75" pos:column="13">while <condition pos:line="75" pos:column="19">(<expr><name pos:line="75" pos:column="20">parse_result<pos:position pos:line="75" pos:column="32"/></name> <operator pos:line="75" pos:column="33">==<pos:position pos:line="75" pos:column="35"/></operator> <name><name pos:line="75" pos:column="36">Ssl<pos:position pos:line="75" pos:column="39"/></name><operator pos:line="75" pos:column="39">::<pos:position pos:line="75" pos:column="41"/></operator><name pos:line="75" pos:column="41">CrtdMessage<pos:position pos:line="75" pos:column="52"/></name><operator pos:line="75" pos:column="52">::<pos:position pos:line="75" pos:column="54"/></operator><name pos:line="75" pos:column="54">INCOMPLETE<pos:position pos:line="75" pos:column="64"/></name></name></expr>)<pos:position pos:line="75" pos:column="65"/></condition> <block pos:line="75" pos:column="66">{
                <if pos:line="76" pos:column="17">if <condition pos:line="76" pos:column="20">(<expr><call><name pos:line="76" pos:column="21">fgets<pos:position pos:line="76" pos:column="26"/></name><argument_list pos:line="76" pos:column="26">(<argument><expr><name pos:line="76" pos:column="27">request<pos:position pos:line="76" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="36">HELPER_INPUT_BUFFER<pos:position pos:line="76" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="57">stdin<pos:position pos:line="76" pos:column="62"/></name></expr></argument>)<pos:position pos:line="76" pos:column="63"/></argument_list></call> <operator pos:line="76" pos:column="64">==<pos:position pos:line="76" pos:column="66"/></operator> <name pos:line="76" pos:column="67">NULL<pos:position pos:line="76" pos:column="71"/></name></expr>)<pos:position pos:line="76" pos:column="72"/></condition><then pos:line="76" pos:column="72">
                    <block type="pseudo"><return pos:line="77" pos:column="21">return <expr><literal type="number" pos:line="77" pos:column="28">1<pos:position pos:line="77" pos:column="29"/></literal></expr>;<pos:position pos:line="77" pos:column="30"/></return></block></then></if>
                <decl_stmt><decl><type><name pos:line="78" pos:column="17">size_t<pos:position pos:line="78" pos:column="23"/></name></type> <name pos:line="78" pos:column="24">gcount<pos:position pos:line="78" pos:column="30"/></name> <init pos:line="78" pos:column="31">= <expr><call><name pos:line="78" pos:column="33">strlen<pos:position pos:line="78" pos:column="39"/></name><argument_list pos:line="78" pos:column="39">(<argument><expr><name pos:line="78" pos:column="40">request<pos:position pos:line="78" pos:column="47"/></name></expr></argument>)<pos:position pos:line="78" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="78" pos:column="49"/></decl_stmt>
                <expr_stmt><expr><name pos:line="79" pos:column="17">parse_result<pos:position pos:line="79" pos:column="29"/></name> <operator pos:line="79" pos:column="30">=<pos:position pos:line="79" pos:column="31"/></operator> <call><name><name pos:line="79" pos:column="32">request_message<pos:position pos:line="79" pos:column="47"/></name><operator pos:line="79" pos:column="47">.<pos:position pos:line="79" pos:column="48"/></operator><name pos:line="79" pos:column="48">parse<pos:position pos:line="79" pos:column="53"/></name></name><argument_list pos:line="79" pos:column="53">(<argument><expr><name pos:line="79" pos:column="54">request<pos:position pos:line="79" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="63">gcount<pos:position pos:line="79" pos:column="69"/></name></expr></argument>)<pos:position pos:line="79" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="71"/></expr_stmt>
            }<pos:position pos:line="80" pos:column="14"/></block></while>

            <if pos:line="82" pos:column="13">if <condition pos:line="82" pos:column="16">(<expr><name pos:line="82" pos:column="17">parse_result<pos:position pos:line="82" pos:column="29"/></name> <operator pos:line="82" pos:column="30">==<pos:position pos:line="82" pos:column="32"/></operator> <name><name pos:line="82" pos:column="33">Ssl<pos:position pos:line="82" pos:column="36"/></name><operator pos:line="82" pos:column="36">::<pos:position pos:line="82" pos:column="38"/></operator><name pos:line="82" pos:column="38">CrtdMessage<pos:position pos:line="82" pos:column="49"/></name><operator pos:line="82" pos:column="49">::<pos:position pos:line="82" pos:column="51"/></operator><name pos:line="82" pos:column="51">ERROR<pos:position pos:line="82" pos:column="56"/></name></name></expr>)<pos:position pos:line="82" pos:column="57"/></condition><then pos:line="82" pos:column="57"> <block pos:line="82" pos:column="58">{
                <throw pos:line="83" pos:column="17">throw <expr><call><name><name pos:line="83" pos:column="23">std<pos:position pos:line="83" pos:column="26"/></name><operator pos:line="83" pos:column="26">::<pos:position pos:line="83" pos:column="28"/></operator><name pos:line="83" pos:column="28">runtime_error<pos:position pos:line="83" pos:column="41"/></name></name><argument_list pos:line="83" pos:column="41">(<argument><expr><literal type="string" pos:line="83" pos:column="42">"Cannot parse request message."<pos:position pos:line="83" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="75"/></throw>
            }<pos:position pos:line="84" pos:column="14"/></block></then> <elseif pos:line="84" pos:column="15">else <if pos:line="84" pos:column="20">if <condition pos:line="84" pos:column="23">(<expr><call><name><name pos:line="84" pos:column="24">request_message<pos:position pos:line="84" pos:column="39"/></name><operator pos:line="84" pos:column="39">.<pos:position pos:line="84" pos:column="40"/></operator><name pos:line="84" pos:column="40">getCode<pos:position pos:line="84" pos:column="47"/></name></name><argument_list pos:line="84" pos:column="47">()<pos:position pos:line="84" pos:column="49"/></argument_list></call> <operator pos:line="84" pos:column="50">==<pos:position pos:line="84" pos:column="52"/></operator> <name><name pos:line="84" pos:column="53">Ssl<pos:position pos:line="84" pos:column="56"/></name><operator pos:line="84" pos:column="56">::<pos:position pos:line="84" pos:column="58"/></operator><name pos:line="84" pos:column="58">CrtdMessage<pos:position pos:line="84" pos:column="69"/></name><operator pos:line="84" pos:column="69">::<pos:position pos:line="84" pos:column="71"/></operator><name pos:line="84" pos:column="71">code_new_certificate<pos:position pos:line="84" pos:column="91"/></name></name></expr>)<pos:position pos:line="84" pos:column="92"/></condition><then pos:line="84" pos:column="92"> <block pos:line="84" pos:column="93">{
                <expr_stmt><expr><call><name pos:line="85" pos:column="17">processNewRequest<pos:position pos:line="85" pos:column="34"/></name><argument_list pos:line="85" pos:column="34">(<argument><expr><name pos:line="85" pos:column="35">request_message<pos:position pos:line="85" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="52">db_path<pos:position pos:line="85" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="61">max_db_size<pos:position pos:line="85" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="74">fs_block_size<pos:position pos:line="85" pos:column="87"/></name></expr></argument>)<pos:position pos:line="85" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="89"/></expr_stmt>
            }<pos:position pos:line="86" pos:column="14"/></block></then></if></elseif> <else pos:line="86" pos:column="15">else <block pos:line="86" pos:column="20">{
                <throw pos:line="87" pos:column="17">throw <expr><call><name><name pos:line="87" pos:column="23">std<pos:position pos:line="87" pos:column="26"/></name><operator pos:line="87" pos:column="26">::<pos:position pos:line="87" pos:column="28"/></operator><name pos:line="87" pos:column="28">runtime_error<pos:position pos:line="87" pos:column="41"/></name></name><argument_list pos:line="87" pos:column="41">(<argument><expr><literal type="string" pos:line="87" pos:column="42">"Unknown request code: \""<pos:position pos:line="87" pos:column="68"/></literal> <operator pos:line="87" pos:column="69">+<pos:position pos:line="87" pos:column="70"/></operator> <call><name><name pos:line="87" pos:column="71">request_message<pos:position pos:line="87" pos:column="86"/></name><operator pos:line="87" pos:column="86">.<pos:position pos:line="87" pos:column="87"/></operator><name pos:line="87" pos:column="87">getCode<pos:position pos:line="87" pos:column="94"/></name></name><argument_list pos:line="87" pos:column="94">()<pos:position pos:line="87" pos:column="96"/></argument_list></call> <operator pos:line="87" pos:column="97">+<pos:position pos:line="87" pos:column="98"/></operator> <literal type="string" pos:line="87" pos:column="99">"\"."<pos:position pos:line="87" pos:column="104"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="105"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="106"/></throw>
            }<pos:position pos:line="88" pos:column="14"/></block></else></if>
            <expr_stmt><expr><call><name><name pos:line="89" pos:column="13">std<pos:position pos:line="89" pos:column="16"/></name><operator pos:line="89" pos:column="16">::<pos:position pos:line="89" pos:column="18"/></operator><name pos:line="89" pos:column="18">cout<pos:position pos:line="89" pos:column="22"/></name><operator pos:line="89" pos:column="22">.<pos:position pos:line="89" pos:column="23"/></operator><name pos:line="89" pos:column="23">flush<pos:position pos:line="89" pos:column="28"/></name></name><argument_list pos:line="89" pos:column="28">()<pos:position pos:line="89" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="31"/></expr_stmt>
        }<pos:position pos:line="90" pos:column="10"/></block></for>
    }<pos:position pos:line="91" pos:column="6"/></block> <catch pos:line="91" pos:column="7">catch <parameter_list pos:line="91" pos:column="13">(<parameter><decl><type><name><name pos:line="91" pos:column="14">std<pos:position pos:line="91" pos:column="17"/></name><operator pos:line="91" pos:column="17">::<pos:position pos:line="91" pos:column="19"/></operator><name pos:line="91" pos:column="19">runtime_error<pos:position pos:line="91" pos:column="32"/></name></name> <modifier pos:line="91" pos:column="33">&amp;<pos:position pos:line="91" pos:column="38"/></modifier></type> <name pos:line="91" pos:column="35">error<pos:position pos:line="91" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="91" pos:column="41"/></parameter_list> <block pos:line="91" pos:column="42">{
        <expr_stmt><expr><name><name pos:line="92" pos:column="9">std<pos:position pos:line="92" pos:column="12"/></name><operator pos:line="92" pos:column="12">::<pos:position pos:line="92" pos:column="14"/></operator><name pos:line="92" pos:column="14">cerr<pos:position pos:line="92" pos:column="18"/></name></name> <operator pos:line="92" pos:column="19">&lt;&lt;<pos:position pos:line="92" pos:column="27"/></operator> <name><name pos:line="92" pos:column="22">argv<pos:position pos:line="92" pos:column="26"/></name><index pos:line="92" pos:column="26">[<expr><literal type="number" pos:line="92" pos:column="27">0<pos:position pos:line="92" pos:column="28"/></literal></expr>]<pos:position pos:line="92" pos:column="29"/></index></name> <operator pos:line="92" pos:column="30">&lt;&lt;<pos:position pos:line="92" pos:column="38"/></operator> <literal type="string" pos:line="92" pos:column="33">": "<pos:position pos:line="92" pos:column="37"/></literal> <operator pos:line="92" pos:column="38">&lt;&lt;<pos:position pos:line="92" pos:column="46"/></operator> <call><name><name pos:line="92" pos:column="41">error<pos:position pos:line="92" pos:column="46"/></name><operator pos:line="92" pos:column="46">.<pos:position pos:line="92" pos:column="47"/></operator><name pos:line="92" pos:column="47">what<pos:position pos:line="92" pos:column="51"/></name></name><argument_list pos:line="92" pos:column="51">()<pos:position pos:line="92" pos:column="53"/></argument_list></call> <operator pos:line="92" pos:column="54">&lt;&lt;<pos:position pos:line="92" pos:column="62"/></operator> <name><name pos:line="92" pos:column="57">std<pos:position pos:line="92" pos:column="60"/></name><operator pos:line="92" pos:column="60">::<pos:position pos:line="92" pos:column="62"/></operator><name pos:line="92" pos:column="62">endl<pos:position pos:line="92" pos:column="66"/></name></name></expr>;<pos:position pos:line="92" pos:column="67"/></expr_stmt>
        <return pos:line="93" pos:column="9">return <expr><operator pos:line="93" pos:column="16">-<pos:position pos:line="93" pos:column="17"/></operator><literal type="number" pos:line="93" pos:column="17">1<pos:position pos:line="93" pos:column="18"/></literal></expr>;<pos:position pos:line="93" pos:column="19"/></return>
    }<pos:position pos:line="94" pos:column="6"/></block></catch></try>
    <return pos:line="95" pos:column="5">return <expr><literal type="number" pos:line="95" pos:column="12">0<pos:position pos:line="95" pos:column="13"/></literal></expr>;<pos:position pos:line="95" pos:column="14"/></return>
}<pos:position pos:line="96" pos:column="2"/></block></function></unit>
