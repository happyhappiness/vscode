<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3523_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Icap<pos:position pos:line="1" pos:column="22"/></name><operator pos:line="1" pos:column="22">::<pos:position pos:line="1" pos:column="24"/></operator><name pos:line="1" pos:column="24">ModXact<pos:position pos:line="1" pos:column="31"/></name><operator pos:line="1" pos:column="31">::<pos:position pos:line="1" pos:column="33"/></operator><name pos:line="1" pos:column="33">readMore<pos:position pos:line="1" pos:column="41"/></name></name><parameter_list pos:line="1" pos:column="41">()<pos:position pos:line="1" pos:column="43"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <if pos:line="3" pos:column="5">if <condition pos:line="3" pos:column="8">(<expr><name pos:line="3" pos:column="9">reader<pos:position pos:line="3" pos:column="15"/></name> <operator pos:line="3" pos:column="16">!=<pos:position pos:line="3" pos:column="18"/></operator> <name pos:line="3" pos:column="19">NULL<pos:position pos:line="3" pos:column="23"/></name> <operator pos:line="3" pos:column="24">||<pos:position pos:line="3" pos:column="26"/></operator> <call><name pos:line="3" pos:column="27">doneReading<pos:position pos:line="3" pos:column="38"/></name><argument_list pos:line="3" pos:column="38">()<pos:position pos:line="3" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="3" pos:column="41"/></condition><then pos:line="3" pos:column="41"> <block pos:line="3" pos:column="42">{
        <expr_stmt><expr><call><name pos:line="4" pos:column="9">debugs<pos:position pos:line="4" pos:column="15"/></name><argument_list pos:line="4" pos:column="15">(<argument><expr><literal type="number" pos:line="4" pos:column="16">93<pos:position pos:line="4" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="4" pos:column="19">3<pos:position pos:line="4" pos:column="20"/></literal></expr></argument>,<argument><expr><name pos:line="4" pos:column="21">HERE<pos:position pos:line="4" pos:column="25"/></name> <operator pos:line="4" pos:column="26">&lt;&lt;<pos:position pos:line="4" pos:column="34"/></operator> <literal type="string" pos:line="4" pos:column="29">"returning from readMore because reader or doneReading()"<pos:position pos:line="4" pos:column="86"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="88"/></expr_stmt>
        <return pos:line="5" pos:column="9">return;<pos:position pos:line="5" pos:column="16"/></return>
    }<pos:position pos:line="6" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="8" pos:column="5">// do not fill readBuf if we have no space to store the result</comment>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name><name pos:line="9" pos:column="9">adapted<pos:position pos:line="9" pos:column="16"/></name><operator pos:line="9" pos:column="16">.<pos:position pos:line="9" pos:column="17"/></operator><name pos:line="9" pos:column="17">body_pipe<pos:position pos:line="9" pos:column="26"/></name></name> <operator pos:line="9" pos:column="27">!=<pos:position pos:line="9" pos:column="29"/></operator> <name pos:line="9" pos:column="30">NULL<pos:position pos:line="9" pos:column="34"/></name> <operator pos:line="9" pos:column="35">&amp;&amp;<pos:position pos:line="9" pos:column="45"/></operator>
            <operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><call><name><name pos:line="10" pos:column="14">adapted<pos:position pos:line="10" pos:column="21"/></name><operator pos:line="10" pos:column="21">.<pos:position pos:line="10" pos:column="22"/></operator><name pos:line="10" pos:column="22">body_pipe<pos:position pos:line="10" pos:column="31"/></name><operator pos:line="10" pos:column="31">-&gt;<pos:position pos:line="10" pos:column="36"/></operator><name pos:line="10" pos:column="33">buf<pos:position pos:line="10" pos:column="36"/></name></name><argument_list pos:line="10" pos:column="36">()<pos:position pos:line="10" pos:column="38"/></argument_list></call><operator pos:line="10" pos:column="38">.<pos:position pos:line="10" pos:column="39"/></operator><call><name pos:line="10" pos:column="39">hasPotentialSpace<pos:position pos:line="10" pos:column="56"/></name><argument_list pos:line="10" pos:column="56">()<pos:position pos:line="10" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="59"/></condition><then pos:line="10" pos:column="59"> <block pos:line="10" pos:column="60">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">debugs<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><literal type="number" pos:line="11" pos:column="16">93<pos:position pos:line="11" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="11" pos:column="19">3<pos:position pos:line="11" pos:column="20"/></literal></expr></argument>,<argument><expr><name pos:line="11" pos:column="21">HERE<pos:position pos:line="11" pos:column="25"/></name> <operator pos:line="11" pos:column="26">&lt;&lt;<pos:position pos:line="11" pos:column="34"/></operator> <literal type="string" pos:line="11" pos:column="29">"not reading because ICAP reply pipe is full"<pos:position pos:line="11" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="76"/></expr_stmt>
        <return pos:line="12" pos:column="9">return;<pos:position pos:line="12" pos:column="16"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><call><name><name pos:line="15" pos:column="9">readBuf<pos:position pos:line="15" pos:column="16"/></name><operator pos:line="15" pos:column="16">.<pos:position pos:line="15" pos:column="17"/></operator><name pos:line="15" pos:column="17">length<pos:position pos:line="15" pos:column="23"/></name></name><argument_list pos:line="15" pos:column="23">()<pos:position pos:line="15" pos:column="25"/></argument_list></call> <operator pos:line="15" pos:column="26">&lt;<pos:position pos:line="15" pos:column="30"/></operator> <name pos:line="15" pos:column="28">SQUID_TCP_SO_RCVBUF<pos:position pos:line="15" pos:column="47"/></name></expr>)<pos:position pos:line="15" pos:column="48"/></condition><then pos:line="15" pos:column="48">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="9">scheduleRead<pos:position pos:line="16" pos:column="21"/></name><argument_list pos:line="16" pos:column="21">()<pos:position pos:line="16" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="24"/></expr_stmt></block></then>
    <else pos:line="17" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="9">debugs<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><literal type="number" pos:line="18" pos:column="16">93<pos:position pos:line="18" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="18" pos:column="19">3<pos:position pos:line="18" pos:column="20"/></literal></expr></argument>,<argument><expr><name pos:line="18" pos:column="21">HERE<pos:position pos:line="18" pos:column="25"/></name> <operator pos:line="18" pos:column="26">&lt;&lt;<pos:position pos:line="18" pos:column="34"/></operator> <literal type="string" pos:line="18" pos:column="29">"cannot read with a full buffer"<pos:position pos:line="18" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="63"/></expr_stmt></block></else></if>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
