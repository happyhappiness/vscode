<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6998_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Ipc<pos:position pos:line="1" pos:column="9"/></name><operator pos:line="1" pos:column="9">::<pos:position pos:line="1" pos:column="11"/></operator><name pos:line="1" pos:column="11">Port<pos:position pos:line="1" pos:column="15"/></name><operator pos:line="1" pos:column="15">::<pos:position pos:line="1" pos:column="17"/></operator><name pos:line="1" pos:column="17">noteRead<pos:position pos:line="1" pos:column="25"/></name></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><specifier pos:line="1" pos:column="26">const<pos:position pos:line="1" pos:column="31"/></specifier> <name pos:line="1" pos:column="32">CommIoCbParams<pos:position pos:line="1" pos:column="46"/></name><modifier pos:line="1" pos:column="46">&amp;<pos:position pos:line="1" pos:column="51"/></modifier></type> <name pos:line="1" pos:column="48">params<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="55"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="3" pos:column="5">debugs<pos:position pos:line="3" pos:column="11"/></name><argument_list pos:line="3" pos:column="11">(<argument><expr><literal type="number" pos:line="3" pos:column="12">54<pos:position pos:line="3" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="3" pos:column="16">6<pos:position pos:line="3" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="3" pos:column="19">HERE<pos:position pos:line="3" pos:column="23"/></name> <operator pos:line="3" pos:column="24">&lt;&lt;<pos:position pos:line="3" pos:column="32"/></operator> <name><name pos:line="3" pos:column="27">params<pos:position pos:line="3" pos:column="33"/></name><operator pos:line="3" pos:column="33">.<pos:position pos:line="3" pos:column="34"/></operator><name pos:line="3" pos:column="34">conn<pos:position pos:line="3" pos:column="38"/></name></name> <operator pos:line="3" pos:column="39">&lt;&lt;<pos:position pos:line="3" pos:column="47"/></operator> <literal type="string" pos:line="3" pos:column="42">" flag "<pos:position pos:line="3" pos:column="50"/></literal> <operator pos:line="3" pos:column="51">&lt;&lt;<pos:position pos:line="3" pos:column="59"/></operator> <name><name pos:line="3" pos:column="54">params<pos:position pos:line="3" pos:column="60"/></name><operator pos:line="3" pos:column="60">.<pos:position pos:line="3" pos:column="61"/></operator><name pos:line="3" pos:column="61">flag<pos:position pos:line="3" pos:column="65"/></name></name> <operator pos:line="3" pos:column="66">&lt;&lt;<pos:position pos:line="3" pos:column="74"/></operator>
           <literal type="string" pos:line="4" pos:column="12">" ["<pos:position pos:line="4" pos:column="16"/></literal> <operator pos:line="4" pos:column="17">&lt;&lt;<pos:position pos:line="4" pos:column="25"/></operator> <name pos:line="4" pos:column="20">this<pos:position pos:line="4" pos:column="24"/></name> <operator pos:line="4" pos:column="25">&lt;&lt;<pos:position pos:line="4" pos:column="33"/></operator> <literal type="char" pos:line="4" pos:column="28">']'<pos:position pos:line="4" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="33"/></expr_stmt>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><name><name pos:line="5" pos:column="9">params<pos:position pos:line="5" pos:column="15"/></name><operator pos:line="5" pos:column="15">.<pos:position pos:line="5" pos:column="16"/></operator><name pos:line="5" pos:column="16">flag<pos:position pos:line="5" pos:column="20"/></name></name> <operator pos:line="5" pos:column="21">==<pos:position pos:line="5" pos:column="23"/></operator> <name><name pos:line="5" pos:column="24">Comm<pos:position pos:line="5" pos:column="28"/></name><operator pos:line="5" pos:column="28">::<pos:position pos:line="5" pos:column="30"/></operator><name pos:line="5" pos:column="30">OK<pos:position pos:line="5" pos:column="32"/></name></name></expr>)<pos:position pos:line="5" pos:column="33"/></condition><then pos:line="5" pos:column="33"> <block pos:line="5" pos:column="34">{
        <expr_stmt><expr><call><name pos:line="6" pos:column="9">assert<pos:position pos:line="6" pos:column="15"/></name><argument_list pos:line="6" pos:column="15">(<argument><expr><name><name pos:line="6" pos:column="16">params<pos:position pos:line="6" pos:column="22"/></name><operator pos:line="6" pos:column="22">.<pos:position pos:line="6" pos:column="23"/></operator><name pos:line="6" pos:column="23">buf<pos:position pos:line="6" pos:column="26"/></name></name> <operator pos:line="6" pos:column="27">==<pos:position pos:line="6" pos:column="29"/></operator> <call><name><name pos:line="6" pos:column="30">buf<pos:position pos:line="6" pos:column="33"/></name><operator pos:line="6" pos:column="33">.<pos:position pos:line="6" pos:column="34"/></operator><name pos:line="6" pos:column="34">raw<pos:position pos:line="6" pos:column="37"/></name></name><argument_list pos:line="6" pos:column="37">()<pos:position pos:line="6" pos:column="39"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">receive<pos:position pos:line="7" pos:column="16"/></name><argument_list pos:line="7" pos:column="16">(<argument><expr><name pos:line="7" pos:column="17">buf<pos:position pos:line="7" pos:column="20"/></name></expr></argument>)<pos:position pos:line="7" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="8" pos:column="6"/></block></then></if>
    <comment type="line" pos:line="9" pos:column="5">// TODO: if there was a fatal error on our socket, close the socket before</comment>
    <comment type="line" pos:line="10" pos:column="5">// trying to listen again and print a level-1 error message.</comment>

    <expr_stmt><expr><call><name pos:line="12" pos:column="5">doListen<pos:position pos:line="12" pos:column="13"/></name><argument_list pos:line="12" pos:column="13">()<pos:position pos:line="12" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="16"/></expr_stmt>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
