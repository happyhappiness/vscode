<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2541_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">StoreEntry<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">startWriting<pos:position pos:line="2" pos:column="25"/></name></name><parameter_list pos:line="2" pos:column="25">()<pos:position pos:line="2" pos:column="27"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/* TODO: when we store headers separately remove the header portion */</comment>
    <comment type="block" pos:line="5" pos:column="5">/* TODO: mark the length of the headers ? */</comment>
    <comment type="block" pos:line="6" pos:column="5">/* We ONLY want the headers */</comment>

    <expr_stmt><expr><call><name pos:line="8" pos:column="5">assert<pos:position pos:line="8" pos:column="11"/></name> <argument_list pos:line="8" pos:column="12">(<argument><expr><call><name pos:line="8" pos:column="13">isEmpty<pos:position pos:line="8" pos:column="20"/></name><argument_list pos:line="8" pos:column="20">()<pos:position pos:line="8" pos:column="22"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">assert<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><name pos:line="9" pos:column="12">mem_obj<pos:position pos:line="9" pos:column="19"/></name></expr></argument>)<pos:position pos:line="9" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="21"/></expr_stmt>

    <decl_stmt><decl><type><specifier pos:line="11" pos:column="5">const<pos:position pos:line="11" pos:column="10"/></specifier> <name pos:line="11" pos:column="11">HttpReply<pos:position pos:line="11" pos:column="20"/></name> <modifier pos:line="11" pos:column="21">*<pos:position pos:line="11" pos:column="22"/></modifier></type><name pos:line="11" pos:column="22">rep<pos:position pos:line="11" pos:column="25"/></name> <init pos:line="11" pos:column="26">= <expr><call><name pos:line="11" pos:column="28">getReply<pos:position pos:line="11" pos:column="36"/></name><argument_list pos:line="11" pos:column="36">()<pos:position pos:line="11" pos:column="38"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="39"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">assert<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><name pos:line="12" pos:column="12">rep<pos:position pos:line="12" pos:column="15"/></name></expr></argument>)<pos:position pos:line="12" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="17"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="14" pos:column="5">buffer<pos:position pos:line="14" pos:column="11"/></name><argument_list pos:line="14" pos:column="11">()<pos:position pos:line="14" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="14"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="15" pos:column="5">rep<pos:position pos:line="15" pos:column="8"/></name><operator pos:line="15" pos:column="8">-&gt;<pos:position pos:line="15" pos:column="13"/></operator><name pos:line="15" pos:column="10">packHeadersInto<pos:position pos:line="15" pos:column="25"/></name></name><argument_list pos:line="15" pos:column="25">(<argument><expr><name pos:line="15" pos:column="26">this<pos:position pos:line="15" pos:column="30"/></name></expr></argument>)<pos:position pos:line="15" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="16" pos:column="5">mem_obj<pos:position pos:line="16" pos:column="12"/></name><operator pos:line="16" pos:column="12">-&gt;<pos:position pos:line="16" pos:column="17"/></operator><name pos:line="16" pos:column="14">markEndOfReplyHeaders<pos:position pos:line="16" pos:column="35"/></name></name><argument_list pos:line="16" pos:column="35">()<pos:position pos:line="16" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">EBIT_CLR<pos:position pos:line="17" pos:column="13"/></name><argument_list pos:line="17" pos:column="13">(<argument><expr><name pos:line="17" pos:column="14">flags<pos:position pos:line="17" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="21">ENTRY_FWD_HDR_WAIT<pos:position pos:line="17" pos:column="39"/></name></expr></argument>)<pos:position pos:line="17" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="41"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="19" pos:column="5">rep<pos:position pos:line="19" pos:column="8"/></name><operator pos:line="19" pos:column="8">-&gt;<pos:position pos:line="19" pos:column="13"/></operator><name pos:line="19" pos:column="10">body<pos:position pos:line="19" pos:column="14"/></name><operator pos:line="19" pos:column="14">.<pos:position pos:line="19" pos:column="15"/></operator><name pos:line="19" pos:column="15">packInto<pos:position pos:line="19" pos:column="23"/></name></name><argument_list pos:line="19" pos:column="23">(<argument><expr><name pos:line="19" pos:column="24">this<pos:position pos:line="19" pos:column="28"/></name></expr></argument>)<pos:position pos:line="19" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">flush<pos:position pos:line="20" pos:column="10"/></name><argument_list pos:line="20" pos:column="10">()<pos:position pos:line="20" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="13"/></expr_stmt>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
