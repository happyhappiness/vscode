<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_83_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">copy_out<pos:position pos:line="2" pos:column="9"/></name><parameter_list pos:line="2" pos:column="9">( <parameter><decl><type><name pos:line="2" pos:column="11">size_t<pos:position pos:line="2" pos:column="17"/></name></type> <name pos:line="2" pos:column="18">filesize<pos:position pos:line="2" pos:column="26"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="28">size_t<pos:position pos:line="2" pos:column="34"/></name></type> <name pos:line="2" pos:column="35">metasize<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="45">unsigned<pos:position pos:line="2" pos:column="53"/></name></type> <name pos:line="2" pos:column="54">debug<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>,
          <parameter><decl><type><specifier pos:line="3" pos:column="11">const<pos:position pos:line="3" pos:column="16"/></specifier> <name pos:line="3" pos:column="17">char<pos:position pos:line="3" pos:column="21"/></name><modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type> <name pos:line="3" pos:column="23">fn<pos:position pos:line="3" pos:column="25"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="3" pos:column="27">const<pos:position pos:line="3" pos:column="32"/></specifier> <name pos:line="3" pos:column="33">char<pos:position pos:line="3" pos:column="37"/></name><modifier pos:line="3" pos:column="37">*<pos:position pos:line="3" pos:column="38"/></modifier></type> <name pos:line="3" pos:column="39">url<pos:position pos:line="3" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="3" pos:column="44">const<pos:position pos:line="3" pos:column="49"/></specifier> <name pos:line="3" pos:column="50">char<pos:position pos:line="3" pos:column="54"/></name><modifier pos:line="3" pos:column="54">*<pos:position pos:line="3" pos:column="55"/></modifier></type> <name pos:line="3" pos:column="56">copydir<pos:position pos:line="3" pos:column="63"/></name></decl></parameter>,
          <parameter><decl><type><name pos:line="4" pos:column="11">bool<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">copyHdr<pos:position pos:line="4" pos:column="23"/></name></decl></parameter> )<pos:position pos:line="4" pos:column="25"/></parameter_list>
<comment type="line" pos:line="5" pos:column="1">// purpose: copy content from squid disk file into separate file</comment>
<comment type="line" pos:line="6" pos:column="1">// paramtr: metasize (IN): size of metadata to skip</comment>
<comment type="line" pos:line="7" pos:column="1">//          fn (IN): current filename of squid disk file</comment>
<comment type="line" pos:line="8" pos:column="1">//          url (IN): currently looked at URL to generate separate file</comment>
<comment type="line" pos:line="9" pos:column="1">//          copydir (IN): base directory where to generate the file</comment>
<comment type="line" pos:line="10" pos:column="1">//          copyHdr (IN): copy HTTP header, too, if set to true.</comment>
<comment type="line" pos:line="11" pos:column="1">// returns: true, if successful, false otherwise.</comment>
<block pos:line="12" pos:column="1">{
    <decl_stmt><decl><specifier pos:line="13" pos:column="5">static<pos:position pos:line="13" pos:column="11"/></specifier> <type><specifier pos:line="13" pos:column="12">const<pos:position pos:line="13" pos:column="17"/></specifier> <name pos:line="13" pos:column="18">char<pos:position pos:line="13" pos:column="22"/></name><modifier pos:line="13" pos:column="22">*<pos:position pos:line="13" pos:column="23"/></modifier></type> <name pos:line="13" pos:column="24">index<pos:position pos:line="13" pos:column="29"/></name> <init pos:line="13" pos:column="30">= <expr><literal type="string" pos:line="13" pos:column="32">"index.html"<pos:position pos:line="13" pos:column="44"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="45"/></decl_stmt>

    <comment type="line" pos:line="15" pos:column="5">// find hostname part after the scheme (okok, not counting port, etc.)</comment>
    <decl_stmt><decl><type><specifier pos:line="16" pos:column="5">const<pos:position pos:line="16" pos:column="10"/></specifier> <name pos:line="16" pos:column="11">char<pos:position pos:line="16" pos:column="15"/></name><modifier pos:line="16" pos:column="15">*<pos:position pos:line="16" pos:column="16"/></modifier></type> <name pos:line="16" pos:column="17">ptr<pos:position pos:line="16" pos:column="20"/></name> <init pos:line="16" pos:column="21">= <expr><call><name pos:line="16" pos:column="23">strstr<pos:position pos:line="16" pos:column="29"/></name><argument_list pos:line="16" pos:column="29">( <argument><expr><name pos:line="16" pos:column="31">url<pos:position pos:line="16" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="36">"://"<pos:position pos:line="16" pos:column="41"/></literal></expr></argument> )<pos:position pos:line="16" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="44"/></decl_stmt>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">( <expr><name pos:line="17" pos:column="10">ptr<pos:position pos:line="17" pos:column="13"/></name> <operator pos:line="17" pos:column="14">==<pos:position pos:line="17" pos:column="16"/></operator> <literal type="number" pos:line="17" pos:column="17">0<pos:position pos:line="17" pos:column="18"/></literal> <operator pos:line="17" pos:column="19">||<pos:position pos:line="17" pos:column="21"/></operator> <call><name pos:line="17" pos:column="22">strlen<pos:position pos:line="17" pos:column="28"/></name><argument_list pos:line="17" pos:column="28">(<argument><expr><name pos:line="17" pos:column="29">ptr<pos:position pos:line="17" pos:column="32"/></name></expr></argument>)<pos:position pos:line="17" pos:column="33"/></argument_list></call> <operator pos:line="17" pos:column="34">&lt;<pos:position pos:line="17" pos:column="38"/></operator> <literal type="number" pos:line="17" pos:column="36">4<pos:position pos:line="17" pos:column="37"/></literal></expr> )<pos:position pos:line="17" pos:column="39"/></condition><then pos:line="17" pos:column="39"> <block type="pseudo"><return pos:line="17" pos:column="40">return <expr><literal type="boolean" pos:line="17" pos:column="47">false<pos:position pos:line="17" pos:column="52"/></literal></expr>;<pos:position pos:line="17" pos:column="53"/></return></block></then></if>

    <comment type="line" pos:line="19" pos:column="5">// create filename to store contents into</comment>
    <comment type="line" pos:line="20" pos:column="5">// NP: magic extra 5 bytes for the component delimiter and termination octets</comment>
    <decl_stmt><decl><type><name pos:line="21" pos:column="5">char<pos:position pos:line="21" pos:column="9"/></name> <modifier pos:line="21" pos:column="10">*<pos:position pos:line="21" pos:column="11"/></modifier></type><name pos:line="21" pos:column="11">filename<pos:position pos:line="21" pos:column="19"/></name> <init pos:line="21" pos:column="20">= <expr><operator pos:line="21" pos:column="22">new<pos:position pos:line="21" pos:column="25"/></operator> <name><name pos:line="21" pos:column="26">char<pos:position pos:line="21" pos:column="30"/></name><index pos:line="21" pos:column="30">[ <expr><call><name pos:line="21" pos:column="32">strlen<pos:position pos:line="21" pos:column="38"/></name><argument_list pos:line="21" pos:column="38">(<argument><expr><name pos:line="21" pos:column="39">ptr<pos:position pos:line="21" pos:column="42"/></name></expr></argument>)<pos:position pos:line="21" pos:column="43"/></argument_list></call> <operator pos:line="21" pos:column="44">+<pos:position pos:line="21" pos:column="45"/></operator> <call><name pos:line="21" pos:column="46">strlen<pos:position pos:line="21" pos:column="52"/></name><argument_list pos:line="21" pos:column="52">(<argument><expr><name pos:line="21" pos:column="53">copydir<pos:position pos:line="21" pos:column="60"/></name></expr></argument>)<pos:position pos:line="21" pos:column="61"/></argument_list></call> <operator pos:line="21" pos:column="62">+<pos:position pos:line="21" pos:column="63"/></operator> <call><name pos:line="21" pos:column="64">strlen<pos:position pos:line="21" pos:column="70"/></name><argument_list pos:line="21" pos:column="70">(<argument><expr><name pos:line="21" pos:column="71">index<pos:position pos:line="21" pos:column="76"/></name></expr></argument>)<pos:position pos:line="21" pos:column="77"/></argument_list></call> <operator pos:line="21" pos:column="78">+<pos:position pos:line="21" pos:column="79"/></operator><literal type="number" pos:line="21" pos:column="79">5<pos:position pos:line="21" pos:column="80"/></literal></expr> ]<pos:position pos:line="21" pos:column="82"/></index></name></expr></init></decl>;<pos:position pos:line="21" pos:column="83"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">assert<pos:position pos:line="22" pos:column="11"/></name><argument_list pos:line="22" pos:column="11">( <argument><expr><name pos:line="22" pos:column="13">filename<pos:position pos:line="22" pos:column="21"/></name> <operator pos:line="22" pos:column="22">!=<pos:position pos:line="22" pos:column="24"/></operator> <literal type="number" pos:line="22" pos:column="25">0<pos:position pos:line="22" pos:column="26"/></literal></expr></argument> )<pos:position pos:line="22" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">strcpy<pos:position pos:line="23" pos:column="11"/></name><argument_list pos:line="23" pos:column="11">( <argument><expr><name pos:line="23" pos:column="13">filename<pos:position pos:line="23" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="23">copydir<pos:position pos:line="23" pos:column="30"/></name></expr></argument> )<pos:position pos:line="23" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">strcat<pos:position pos:line="24" pos:column="11"/></name><argument_list pos:line="24" pos:column="11">( <argument><expr><name pos:line="24" pos:column="13">filename<pos:position pos:line="24" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="23">"/"<pos:position pos:line="24" pos:column="26"/></literal></expr></argument> )<pos:position pos:line="24" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="29"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="25" pos:column="5">char<pos:position pos:line="25" pos:column="9"/></name><modifier pos:line="25" pos:column="9">*<pos:position pos:line="25" pos:column="10"/></modifier></type> <name pos:line="25" pos:column="11">here<pos:position pos:line="25" pos:column="15"/></name> <init pos:line="25" pos:column="16">= <expr><name pos:line="25" pos:column="18">filename<pos:position pos:line="25" pos:column="26"/></name> <operator pos:line="25" pos:column="27">+<pos:position pos:line="25" pos:column="28"/></operator> <call><name pos:line="25" pos:column="29">strlen<pos:position pos:line="25" pos:column="35"/></name><argument_list pos:line="25" pos:column="35">(<argument><expr><name pos:line="25" pos:column="36">filename<pos:position pos:line="25" pos:column="44"/></name></expr></argument>)<pos:position pos:line="25" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="25" pos:column="46"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">strcat<pos:position pos:line="26" pos:column="11"/></name><argument_list pos:line="26" pos:column="11">( <argument><expr><name pos:line="26" pos:column="13">filename<pos:position pos:line="26" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="23">ptr<pos:position pos:line="26" pos:column="26"/></name><operator pos:line="26" pos:column="26">+<pos:position pos:line="26" pos:column="27"/></operator><literal type="number" pos:line="26" pos:column="27">3<pos:position pos:line="26" pos:column="28"/></literal></expr></argument> )<pos:position pos:line="26" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="31"/></expr_stmt>

    <comment type="line" pos:line="28" pos:column="5">// handle server root (e.g. "http://www.focus.de" )</comment>
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">( <expr><call><name pos:line="29" pos:column="10">strchr<pos:position pos:line="29" pos:column="16"/></name><argument_list pos:line="29" pos:column="16">( <argument><expr><name pos:line="29" pos:column="18">ptr<pos:position pos:line="29" pos:column="21"/></name><operator pos:line="29" pos:column="21">+<pos:position pos:line="29" pos:column="22"/></operator><literal type="number" pos:line="29" pos:column="22">3<pos:position pos:line="29" pos:column="23"/></literal></expr></argument>, <argument><expr><literal type="char" pos:line="29" pos:column="25">'/'<pos:position pos:line="29" pos:column="28"/></literal></expr></argument> )<pos:position pos:line="29" pos:column="30"/></argument_list></call> <operator pos:line="29" pos:column="31">==<pos:position pos:line="29" pos:column="33"/></operator> <literal type="number" pos:line="29" pos:column="34">0<pos:position pos:line="29" pos:column="35"/></literal></expr> )<pos:position pos:line="29" pos:column="37"/></condition><then pos:line="29" pos:column="37"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="38">strcat<pos:position pos:line="29" pos:column="44"/></name><argument_list pos:line="29" pos:column="44">( <argument><expr><name pos:line="29" pos:column="46">filename<pos:position pos:line="29" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="56">"/"<pos:position pos:line="29" pos:column="59"/></literal></expr></argument> )<pos:position pos:line="29" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="62"/></expr_stmt></block></then></if>

    <comment type="line" pos:line="31" pos:column="5">// handle directories (e.g. "http://www.focus.de/A/" )</comment>
    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">( <expr><name><name pos:line="32" pos:column="10">filename<pos:position pos:line="32" pos:column="18"/></name><index pos:line="32" pos:column="18">[<expr><call><name pos:line="32" pos:column="19">strlen<pos:position pos:line="32" pos:column="25"/></name><argument_list pos:line="32" pos:column="25">(<argument><expr><name pos:line="32" pos:column="26">filename<pos:position pos:line="32" pos:column="34"/></name></expr></argument>)<pos:position pos:line="32" pos:column="35"/></argument_list></call><operator pos:line="32" pos:column="35">-<pos:position pos:line="32" pos:column="36"/></operator><literal type="number" pos:line="32" pos:column="36">1<pos:position pos:line="32" pos:column="37"/></literal></expr>]<pos:position pos:line="32" pos:column="38"/></index></name> <operator pos:line="32" pos:column="39">==<pos:position pos:line="32" pos:column="41"/></operator> <literal type="char" pos:line="32" pos:column="42">'/'<pos:position pos:line="32" pos:column="45"/></literal></expr> )<pos:position pos:line="32" pos:column="47"/></condition><then pos:line="32" pos:column="47"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="48">strcat<pos:position pos:line="32" pos:column="54"/></name><argument_list pos:line="32" pos:column="54">( <argument><expr><name pos:line="32" pos:column="56">filename<pos:position pos:line="32" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="66">index<pos:position pos:line="32" pos:column="71"/></name></expr></argument> )<pos:position pos:line="32" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="74"/></expr_stmt></block></then></if>

    <comment type="line" pos:line="34" pos:column="5">// create subdirectory structure</comment>
    <for pos:line="35" pos:column="5">for <control pos:line="35" pos:column="9">( <init><decl><type><name pos:line="35" pos:column="11">char<pos:position pos:line="35" pos:column="15"/></name><modifier pos:line="35" pos:column="15">*<pos:position pos:line="35" pos:column="16"/></modifier></type> <name pos:line="35" pos:column="17">t<pos:position pos:line="35" pos:column="18"/></name> <init pos:line="35" pos:column="19">= <expr><call><name pos:line="35" pos:column="21">strchr<pos:position pos:line="35" pos:column="27"/></name><argument_list pos:line="35" pos:column="27">(<argument><expr><name pos:line="35" pos:column="28">here<pos:position pos:line="35" pos:column="32"/></name></expr></argument>,<argument><expr><literal type="char" pos:line="35" pos:column="33">'/'<pos:position pos:line="35" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="37"/></argument_list></call></expr></init></decl>;<pos:position pos:line="35" pos:column="38"/></init> <condition><expr><name pos:line="35" pos:column="39">t<pos:position pos:line="35" pos:column="40"/></name></expr>;<pos:position pos:line="35" pos:column="41"/></condition> <incr><expr><name pos:line="35" pos:column="42">t<pos:position pos:line="35" pos:column="43"/></name> <operator pos:line="35" pos:column="44">=<pos:position pos:line="35" pos:column="45"/></operator> <call><name pos:line="35" pos:column="46">strchr<pos:position pos:line="35" pos:column="52"/></name><argument_list pos:line="35" pos:column="52">(<argument><expr><name pos:line="35" pos:column="53">t<pos:position pos:line="35" pos:column="54"/></name></expr></argument>,<argument><expr><literal type="char" pos:line="35" pos:column="55">'/'<pos:position pos:line="35" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="59"/></argument_list></call></expr></incr> )<pos:position pos:line="35" pos:column="61"/></control> <block pos:line="35" pos:column="62">{
        <expr_stmt><expr><operator pos:line="36" pos:column="9">*<pos:position pos:line="36" pos:column="10"/></operator><name pos:line="36" pos:column="10">t<pos:position pos:line="36" pos:column="11"/></name> <operator pos:line="36" pos:column="12">=<pos:position pos:line="36" pos:column="13"/></operator> <literal type="number" pos:line="36" pos:column="14">0<pos:position pos:line="36" pos:column="15"/></literal></expr>;<pos:position pos:line="36" pos:column="16"/></expr_stmt>
        <if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">( <expr><call><name pos:line="37" pos:column="14">mkdir<pos:position pos:line="37" pos:column="19"/></name><argument_list pos:line="37" pos:column="19">( <argument><expr><name pos:line="37" pos:column="21">filename<pos:position pos:line="37" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="31">0775<pos:position pos:line="37" pos:column="35"/></literal></expr></argument> )<pos:position pos:line="37" pos:column="37"/></argument_list></call> <operator pos:line="37" pos:column="38">==<pos:position pos:line="37" pos:column="40"/></operator> <operator pos:line="37" pos:column="41">-<pos:position pos:line="37" pos:column="42"/></operator><literal type="number" pos:line="37" pos:column="42">1<pos:position pos:line="37" pos:column="43"/></literal> <operator pos:line="37" pos:column="44">&amp;&amp;<pos:position pos:line="37" pos:column="54"/></operator> <name pos:line="37" pos:column="47">errno<pos:position pos:line="37" pos:column="52"/></name> <operator pos:line="37" pos:column="53">!=<pos:position pos:line="37" pos:column="55"/></operator> <name pos:line="37" pos:column="56">EEXIST<pos:position pos:line="37" pos:column="62"/></name></expr> )<pos:position pos:line="37" pos:column="64"/></condition><then pos:line="37" pos:column="64"> <block pos:line="37" pos:column="65">{
            <expr_stmt><expr><call><name pos:line="38" pos:column="13">fprintf<pos:position pos:line="38" pos:column="20"/></name><argument_list pos:line="38" pos:column="20">( <argument><expr><name pos:line="38" pos:column="22">stderr<pos:position pos:line="38" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="30">"mkdir(%s): %s\n"<pos:position pos:line="38" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="49">filename<pos:position pos:line="38" pos:column="57"/></name></expr></argument>, <argument><expr><call><name pos:line="38" pos:column="59">strerror<pos:position pos:line="38" pos:column="67"/></name><argument_list pos:line="38" pos:column="67">(<argument><expr><name pos:line="38" pos:column="68">errno<pos:position pos:line="38" pos:column="73"/></name></expr></argument>)<pos:position pos:line="38" pos:column="74"/></argument_list></call></expr></argument> )<pos:position pos:line="38" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="77"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="39" pos:column="13">delete<pos:position pos:line="39" pos:column="19"/></operator><index pos:line="39" pos:column="19">[]<pos:position pos:line="39" pos:column="21"/></index> <name pos:line="39" pos:column="22">filename<pos:position pos:line="39" pos:column="30"/></name></expr>;<pos:position pos:line="39" pos:column="31"/></expr_stmt>
            <return pos:line="40" pos:column="13">return <expr><literal type="boolean" pos:line="40" pos:column="20">false<pos:position pos:line="40" pos:column="25"/></literal></expr>;<pos:position pos:line="40" pos:column="26"/></return>
        }<pos:position pos:line="41" pos:column="10"/></block></then> <elseif pos:line="41" pos:column="11">else <if pos:line="41" pos:column="16">if <condition pos:line="41" pos:column="19">( <expr><name pos:line="41" pos:column="21">debug<pos:position pos:line="41" pos:column="26"/></name> <operator pos:line="41" pos:column="27">&amp;<pos:position pos:line="41" pos:column="32"/></operator> <literal type="number" pos:line="41" pos:column="29">0x02<pos:position pos:line="41" pos:column="33"/></literal></expr> )<pos:position pos:line="41" pos:column="35"/></condition><then pos:line="41" pos:column="35"> <block pos:line="41" pos:column="36">{
            <expr_stmt><expr><call><name pos:line="42" pos:column="13">fprintf<pos:position pos:line="42" pos:column="20"/></name><argument_list pos:line="42" pos:column="20">( <argument><expr><name pos:line="42" pos:column="22">stderr<pos:position pos:line="42" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="30">"# creating %s\n"<pos:position pos:line="42" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="49">filename<pos:position pos:line="42" pos:column="57"/></name></expr></argument> )<pos:position pos:line="42" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="60"/></expr_stmt>
        }<pos:position pos:line="43" pos:column="10"/></block></then></if></elseif></if>
        <expr_stmt><expr><operator pos:line="44" pos:column="9">*<pos:position pos:line="44" pos:column="10"/></operator><name pos:line="44" pos:column="10">t<pos:position pos:line="44" pos:column="11"/></name> <operator pos:line="44" pos:column="12">=<pos:position pos:line="44" pos:column="13"/></operator> <literal type="char" pos:line="44" pos:column="14">'/'<pos:position pos:line="44" pos:column="17"/></literal></expr>;<pos:position pos:line="44" pos:column="18"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="45" pos:column="9">++<pos:position pos:line="45" pos:column="11"/></operator><name pos:line="45" pos:column="11">t<pos:position pos:line="45" pos:column="12"/></name></expr>;<pos:position pos:line="45" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="46" pos:column="6"/></block></for>

    <comment type="line" pos:line="48" pos:column="5">// create file</comment>
    <decl_stmt><decl><type><name pos:line="49" pos:column="5">int<pos:position pos:line="49" pos:column="8"/></name></type> <name pos:line="49" pos:column="9">out<pos:position pos:line="49" pos:column="12"/></name> <init pos:line="49" pos:column="13">= <expr><call><name pos:line="49" pos:column="15">open<pos:position pos:line="49" pos:column="19"/></name><argument_list pos:line="49" pos:column="19">( <argument><expr><name pos:line="49" pos:column="21">filename<pos:position pos:line="49" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="31">O_CREAT<pos:position pos:line="49" pos:column="38"/></name> <operator pos:line="49" pos:column="39">|<pos:position pos:line="49" pos:column="40"/></operator> <name pos:line="49" pos:column="41">O_RDWR<pos:position pos:line="49" pos:column="47"/></name> <operator pos:line="49" pos:column="48">|<pos:position pos:line="49" pos:column="49"/></operator> <name pos:line="49" pos:column="50">O_TRUNC<pos:position pos:line="49" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="49" pos:column="59">0664<pos:position pos:line="49" pos:column="63"/></literal></expr></argument> )<pos:position pos:line="49" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="49" pos:column="66"/></decl_stmt>
    <if pos:line="50" pos:column="5">if <condition pos:line="50" pos:column="8">( <expr><name pos:line="50" pos:column="10">out<pos:position pos:line="50" pos:column="13"/></name> <operator pos:line="50" pos:column="14">==<pos:position pos:line="50" pos:column="16"/></operator> <operator pos:line="50" pos:column="17">-<pos:position pos:line="50" pos:column="18"/></operator><literal type="number" pos:line="50" pos:column="18">1<pos:position pos:line="50" pos:column="19"/></literal></expr> )<pos:position pos:line="50" pos:column="21"/></condition><then pos:line="50" pos:column="21"> <block pos:line="50" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="51" pos:column="9">fprintf<pos:position pos:line="51" pos:column="16"/></name><argument_list pos:line="51" pos:column="16">( <argument><expr><name pos:line="51" pos:column="18">stderr<pos:position pos:line="51" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="26">"open(%s,RDWR): %s\n"<pos:position pos:line="51" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="51" pos:column="49">filename<pos:position pos:line="51" pos:column="57"/></name></expr></argument>, <argument><expr><call><name pos:line="51" pos:column="59">strerror<pos:position pos:line="51" pos:column="67"/></name><argument_list pos:line="51" pos:column="67">(<argument><expr><name pos:line="51" pos:column="68">errno<pos:position pos:line="51" pos:column="73"/></name></expr></argument>)<pos:position pos:line="51" pos:column="74"/></argument_list></call></expr></argument> )<pos:position pos:line="51" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="77"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="52" pos:column="9">delete<pos:position pos:line="52" pos:column="15"/></operator><index pos:line="52" pos:column="15">[]<pos:position pos:line="52" pos:column="17"/></index> <name pos:line="52" pos:column="18">filename<pos:position pos:line="52" pos:column="26"/></name></expr>;<pos:position pos:line="52" pos:column="27"/></expr_stmt>
        <return pos:line="53" pos:column="9">return <expr><literal type="boolean" pos:line="53" pos:column="16">false<pos:position pos:line="53" pos:column="21"/></literal></expr>;<pos:position pos:line="53" pos:column="22"/></return>
    }<pos:position pos:line="54" pos:column="6"/></block></then> <elseif pos:line="54" pos:column="7">else <if pos:line="54" pos:column="12">if <condition pos:line="54" pos:column="15">( <expr><name pos:line="54" pos:column="17">debug<pos:position pos:line="54" pos:column="22"/></name> <operator pos:line="54" pos:column="23">&amp;<pos:position pos:line="54" pos:column="28"/></operator> <literal type="number" pos:line="54" pos:column="25">0x02<pos:position pos:line="54" pos:column="29"/></literal></expr> )<pos:position pos:line="54" pos:column="31"/></condition><then pos:line="54" pos:column="31"> <block pos:line="54" pos:column="32">{
        <expr_stmt><expr><call><name pos:line="55" pos:column="9">fprintf<pos:position pos:line="55" pos:column="16"/></name><argument_list pos:line="55" pos:column="16">( <argument><expr><name pos:line="55" pos:column="18">stderr<pos:position pos:line="55" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="26">"# creating %s\n"<pos:position pos:line="55" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="55" pos:column="45">filename<pos:position pos:line="55" pos:column="53"/></name></expr></argument> )<pos:position pos:line="55" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="56"/></expr_stmt>
    }<pos:position pos:line="56" pos:column="6"/></block></then></if></elseif></if>

    <comment type="line" pos:line="58" pos:column="5">// (re)open cache file</comment>
    <decl_stmt><decl><type><name pos:line="59" pos:column="5">int<pos:position pos:line="59" pos:column="8"/></name></type> <name pos:line="59" pos:column="9">input<pos:position pos:line="59" pos:column="14"/></name> <init pos:line="59" pos:column="15">= <expr><call><name pos:line="59" pos:column="17">open<pos:position pos:line="59" pos:column="21"/></name><argument_list pos:line="59" pos:column="21">( <argument><expr><name pos:line="59" pos:column="23">fn<pos:position pos:line="59" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="27">O_RDONLY<pos:position pos:line="59" pos:column="35"/></name></expr></argument> )<pos:position pos:line="59" pos:column="37"/></argument_list></call></expr></init></decl>;<pos:position pos:line="59" pos:column="38"/></decl_stmt>
    <if pos:line="60" pos:column="5">if <condition pos:line="60" pos:column="8">( <expr><name pos:line="60" pos:column="10">input<pos:position pos:line="60" pos:column="15"/></name> <operator pos:line="60" pos:column="16">==<pos:position pos:line="60" pos:column="18"/></operator> <operator pos:line="60" pos:column="19">-<pos:position pos:line="60" pos:column="20"/></operator><literal type="number" pos:line="60" pos:column="20">1<pos:position pos:line="60" pos:column="21"/></literal></expr> )<pos:position pos:line="60" pos:column="23"/></condition><then pos:line="60" pos:column="23"> <block pos:line="60" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="61" pos:column="9">fprintf<pos:position pos:line="61" pos:column="16"/></name><argument_list pos:line="61" pos:column="16">( <argument><expr><name pos:line="61" pos:column="18">stderr<pos:position pos:line="61" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="26">"open(%s,RDONLY): %s\n"<pos:position pos:line="61" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="61" pos:column="51">fn<pos:position pos:line="61" pos:column="53"/></name></expr></argument>, <argument><expr><call><name pos:line="61" pos:column="55">strerror<pos:position pos:line="61" pos:column="63"/></name><argument_list pos:line="61" pos:column="63">(<argument><expr><name pos:line="61" pos:column="64">errno<pos:position pos:line="61" pos:column="69"/></name></expr></argument>)<pos:position pos:line="61" pos:column="70"/></argument_list></call></expr></argument> )<pos:position pos:line="61" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="73"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="62" pos:column="9">delete<pos:position pos:line="62" pos:column="15"/></operator><index pos:line="62" pos:column="15">[]<pos:position pos:line="62" pos:column="17"/></index> <name pos:line="62" pos:column="18">filename<pos:position pos:line="62" pos:column="26"/></name></expr>;<pos:position pos:line="62" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="63" pos:column="9">close<pos:position pos:line="63" pos:column="14"/></name><argument_list pos:line="63" pos:column="14">(<argument><expr><name pos:line="63" pos:column="15">out<pos:position pos:line="63" pos:column="18"/></name></expr></argument>)<pos:position pos:line="63" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="20"/></expr_stmt>
        <return pos:line="64" pos:column="9">return <expr><literal type="boolean" pos:line="64" pos:column="16">false<pos:position pos:line="64" pos:column="21"/></literal></expr>;<pos:position pos:line="64" pos:column="22"/></return>
    }<pos:position pos:line="65" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="67" pos:column="5">// find double CRLF sequence (actually, look at the FSM below)</comment>
    <comment type="line" pos:line="68" pos:column="5">// FIXME: this only looks at the already known buffer read previously,</comment>
    <comment type="line" pos:line="69" pos:column="5">// which is globally passed (yuck)! As a limitation, the content data</comment>
    <comment type="line" pos:line="70" pos:column="5">// *must* begin within the buffer size (that is: 16k)!</comment>
    <if pos:line="71" pos:column="5">if <condition pos:line="71" pos:column="8">( <expr><operator pos:line="71" pos:column="10">!<pos:position pos:line="71" pos:column="11"/></operator> <name pos:line="71" pos:column="12">copyHdr<pos:position pos:line="71" pos:column="19"/></name></expr> )<pos:position pos:line="71" pos:column="21"/></condition><then pos:line="71" pos:column="21"> <block pos:line="71" pos:column="22">{
        <decl_stmt><decl><specifier pos:line="72" pos:column="9">extern<pos:position pos:line="72" pos:column="15"/></specifier> <type><name pos:line="72" pos:column="16">char<pos:position pos:line="72" pos:column="20"/></name><modifier pos:line="72" pos:column="20">*<pos:position pos:line="72" pos:column="21"/></modifier></type>  <name pos:line="72" pos:column="23">linebuffer<pos:position pos:line="72" pos:column="33"/></name></decl>;<pos:position pos:line="72" pos:column="34"/></decl_stmt> <comment type="line" pos:line="72" pos:column="35">// import from purge.cc</comment>
        <decl_stmt><decl><specifier pos:line="73" pos:column="9">extern<pos:position pos:line="73" pos:column="15"/></specifier> <type><name pos:line="73" pos:column="16">size_t<pos:position pos:line="73" pos:column="22"/></name></type> <name pos:line="73" pos:column="23">buffersize<pos:position pos:line="73" pos:column="33"/></name></decl>;<pos:position pos:line="73" pos:column="34"/></decl_stmt> <comment type="line" pos:line="73" pos:column="35">// import from purge.cc</comment>

        <decl_stmt><decl><type><name pos:line="75" pos:column="9">unsigned<pos:position pos:line="75" pos:column="17"/></name></type> <name pos:line="75" pos:column="18">state<pos:position pos:line="75" pos:column="23"/></name> <init pos:line="75" pos:column="24">= <expr><literal type="number" pos:line="75" pos:column="26">0<pos:position pos:line="75" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="75" pos:column="28"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="76" pos:column="9">char<pos:position pos:line="76" pos:column="13"/></name><modifier pos:line="76" pos:column="13">*<pos:position pos:line="76" pos:column="14"/></modifier></type> <name pos:line="76" pos:column="15">s<pos:position pos:line="76" pos:column="16"/></name> <init pos:line="76" pos:column="17">= <expr><name pos:line="76" pos:column="19">linebuffer<pos:position pos:line="76" pos:column="29"/></name> <operator pos:line="76" pos:column="30">+<pos:position pos:line="76" pos:column="31"/></operator> <name pos:line="76" pos:column="32">metasize<pos:position pos:line="76" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="76" pos:column="41"/></decl_stmt>
        <while pos:line="77" pos:column="9">while <condition pos:line="77" pos:column="15">( <expr><name pos:line="77" pos:column="17">s<pos:position pos:line="77" pos:column="18"/></name> <operator pos:line="77" pos:column="19">&lt;<pos:position pos:line="77" pos:column="23"/></operator> <name pos:line="77" pos:column="21">linebuffer<pos:position pos:line="77" pos:column="31"/></name> <operator pos:line="77" pos:column="32">+<pos:position pos:line="77" pos:column="33"/></operator> <name pos:line="77" pos:column="34">buffersize<pos:position pos:line="77" pos:column="44"/></name> <operator pos:line="77" pos:column="45">&amp;&amp;<pos:position pos:line="77" pos:column="55"/></operator> <name pos:line="77" pos:column="48">state<pos:position pos:line="77" pos:column="53"/></name> <operator pos:line="77" pos:column="54">&lt;<pos:position pos:line="77" pos:column="58"/></operator> <literal type="number" pos:line="77" pos:column="56">4<pos:position pos:line="77" pos:column="57"/></literal></expr> )<pos:position pos:line="77" pos:column="59"/></condition> <block pos:line="77" pos:column="60">{
            <comment type="line" pos:line="78" pos:column="13">// state transition machine</comment>
            <decl_stmt><decl><specifier pos:line="79" pos:column="13">static<pos:position pos:line="79" pos:column="19"/></specifier> <type><name pos:line="79" pos:column="20">unsigned<pos:position pos:line="79" pos:column="28"/></name></type> <name><name pos:line="79" pos:column="29">table<pos:position pos:line="79" pos:column="34"/></name><index pos:line="79" pos:column="34">[<expr><literal type="number" pos:line="79" pos:column="35">4<pos:position pos:line="79" pos:column="36"/></literal></expr>]<pos:position pos:line="79" pos:column="37"/></index><index pos:line="79" pos:column="37">[<expr><literal type="number" pos:line="79" pos:column="38">3<pos:position pos:line="79" pos:column="39"/></literal></expr>]<pos:position pos:line="79" pos:column="40"/></index></name> <init pos:line="79" pos:column="41">= <expr><block pos:line="79" pos:column="43">{ <expr><block pos:line="79" pos:column="45">{<expr><literal type="number" pos:line="79" pos:column="46">3<pos:position pos:line="79" pos:column="47"/></literal></expr>,<expr><literal type="number" pos:line="79" pos:column="48">2<pos:position pos:line="79" pos:column="49"/></literal></expr>,<expr><literal type="number" pos:line="79" pos:column="50">0<pos:position pos:line="79" pos:column="51"/></literal></expr>}<pos:position pos:line="79" pos:column="52"/></block></expr>, <expr><block pos:line="79" pos:column="54">{<expr><literal type="number" pos:line="79" pos:column="55">0<pos:position pos:line="79" pos:column="56"/></literal></expr>,<expr><literal type="number" pos:line="79" pos:column="57">4<pos:position pos:line="79" pos:column="58"/></literal></expr>,<expr><literal type="number" pos:line="79" pos:column="59">0<pos:position pos:line="79" pos:column="60"/></literal></expr>}<pos:position pos:line="79" pos:column="61"/></block></expr>, <expr><block pos:line="79" pos:column="63">{<expr><literal type="number" pos:line="79" pos:column="64">1<pos:position pos:line="79" pos:column="65"/></literal></expr>,<expr><literal type="number" pos:line="79" pos:column="66">4<pos:position pos:line="79" pos:column="67"/></literal></expr>,<expr><literal type="number" pos:line="79" pos:column="68">0<pos:position pos:line="79" pos:column="69"/></literal></expr>}<pos:position pos:line="79" pos:column="70"/></block></expr>, <expr><block pos:line="79" pos:column="72">{<expr><literal type="number" pos:line="79" pos:column="73">4<pos:position pos:line="79" pos:column="74"/></literal></expr>,<expr><literal type="number" pos:line="79" pos:column="75">2<pos:position pos:line="79" pos:column="76"/></literal></expr>,<expr><literal type="number" pos:line="79" pos:column="77">0<pos:position pos:line="79" pos:column="78"/></literal></expr>}<pos:position pos:line="79" pos:column="79"/></block></expr> }<pos:position pos:line="79" pos:column="81"/></block></expr></init></decl>;<pos:position pos:line="79" pos:column="82"/></decl_stmt>
            <comment type="line" pos:line="80" pos:column="13">//  old || \r | \n |else|</comment>
            <comment type="line" pos:line="81" pos:column="13">// =====++====+====+====+</comment>
            <comment type="line" pos:line="82" pos:column="13">//    0 ||  3 |  2 |  0 |</comment>
            <comment type="line" pos:line="83" pos:column="13">//    1 ||  0 |  4 |  0 |</comment>
            <comment type="line" pos:line="84" pos:column="13">//    2 ||  1 |  4 |  0 |</comment>
            <comment type="line" pos:line="85" pos:column="13">//    3 ||  4 |  2 |  0 |</comment>
            <expr_stmt><expr><name pos:line="86" pos:column="13">state<pos:position pos:line="86" pos:column="18"/></name> <operator pos:line="86" pos:column="19">=<pos:position pos:line="86" pos:column="20"/></operator> <name><name pos:line="86" pos:column="21">table<pos:position pos:line="86" pos:column="26"/></name><index pos:line="86" pos:column="26">[ <expr><name pos:line="86" pos:column="28">state<pos:position pos:line="86" pos:column="33"/></name></expr> ]<pos:position pos:line="86" pos:column="35"/></index><index pos:line="86" pos:column="35">[ <expr><call><name pos:line="86" pos:column="37">xlate<pos:position pos:line="86" pos:column="42"/></name><argument_list pos:line="86" pos:column="42">(<argument><expr><operator pos:line="86" pos:column="43">*<pos:position pos:line="86" pos:column="44"/></operator><name pos:line="86" pos:column="44">s<pos:position pos:line="86" pos:column="45"/></name></expr></argument>)<pos:position pos:line="86" pos:column="46"/></argument_list></call></expr> ]<pos:position pos:line="86" pos:column="48"/></index></name></expr>;<pos:position pos:line="86" pos:column="49"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="87" pos:column="13">++<pos:position pos:line="87" pos:column="15"/></operator><name pos:line="87" pos:column="15">s<pos:position pos:line="87" pos:column="16"/></name></expr>;<pos:position pos:line="87" pos:column="17"/></expr_stmt>
        }<pos:position pos:line="88" pos:column="10"/></block></while>

        <if pos:line="90" pos:column="9">if <condition pos:line="90" pos:column="12">( <expr><name pos:line="90" pos:column="14">state<pos:position pos:line="90" pos:column="19"/></name> <operator pos:line="90" pos:column="20">&lt;<pos:position pos:line="90" pos:column="24"/></operator> <literal type="number" pos:line="90" pos:column="22">4<pos:position pos:line="90" pos:column="23"/></literal></expr> )<pos:position pos:line="90" pos:column="25"/></condition><then pos:line="90" pos:column="25">
            <comment type="line" pos:line="91" pos:column="13">// complain bitterly, if the HTTP header was too large ( &gt; 16k ).</comment>
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="92" pos:column="13">fprintf<pos:position pos:line="92" pos:column="20"/></name><argument_list pos:line="92" pos:column="20">( <argument><expr><name pos:line="92" pos:column="22">stderr<pos:position pos:line="92" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="92" pos:column="30">"WARNING: %s will contain partial HTTP header data!\n"<pos:position pos:line="92" pos:column="84"/></literal></expr></argument>,
                     <argument><expr><name pos:line="93" pos:column="22">filename<pos:position pos:line="93" pos:column="30"/></name></expr></argument> )<pos:position pos:line="93" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="33"/></expr_stmt></block></then></if>

        <comment type="line" pos:line="95" pos:column="9">// adjust to different seek size</comment>
        <expr_stmt><expr><name pos:line="96" pos:column="9">metasize<pos:position pos:line="96" pos:column="17"/></name> <operator pos:line="96" pos:column="18">=<pos:position pos:line="96" pos:column="19"/></operator> <name pos:line="96" pos:column="20">s<pos:position pos:line="96" pos:column="21"/></name> <operator pos:line="96" pos:column="22">-<pos:position pos:line="96" pos:column="23"/></operator> <name pos:line="96" pos:column="24">linebuffer<pos:position pos:line="96" pos:column="34"/></name></expr>;<pos:position pos:line="96" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="97" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="99" pos:column="5">// no need to copy zero content files</comment>
    <if pos:line="100" pos:column="5">if <condition pos:line="100" pos:column="8">( <expr><name pos:line="100" pos:column="10">filesize<pos:position pos:line="100" pos:column="18"/></name> <operator pos:line="100" pos:column="19">-<pos:position pos:line="100" pos:column="20"/></operator> <name pos:line="100" pos:column="21">metasize<pos:position pos:line="100" pos:column="29"/></name> <operator pos:line="100" pos:column="30">&lt;=<pos:position pos:line="100" pos:column="35"/></operator> <literal type="number" pos:line="100" pos:column="33">0<pos:position pos:line="100" pos:column="34"/></literal></expr> )<pos:position pos:line="100" pos:column="36"/></condition><then pos:line="100" pos:column="36"> <block pos:line="100" pos:column="37">{
        <expr_stmt><expr><call><name pos:line="101" pos:column="9">BAUTZ<pos:position pos:line="101" pos:column="14"/></name><argument_list pos:line="101" pos:column="14">( <argument><expr><name pos:line="101" pos:column="16">filesize<pos:position pos:line="101" pos:column="24"/></name><operator pos:line="101" pos:column="24">-<pos:position pos:line="101" pos:column="25"/></operator><name pos:line="101" pos:column="25">metasize<pos:position pos:line="101" pos:column="33"/></name> <operator pos:line="101" pos:column="34">==<pos:position pos:line="101" pos:column="36"/></operator> <literal type="number" pos:line="101" pos:column="37">0<pos:position pos:line="101" pos:column="38"/></literal></expr></argument> )<pos:position pos:line="101" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="102" pos:column="6"/></block></then></if>

<cpp:ifdef pos:line="104" pos:column="1">#<cpp:directive pos:line="104" pos:column="2">ifdef<pos:position pos:line="104" pos:column="7"/></cpp:directive> <name pos:line="104" pos:column="8">USE_REGULAR_COPY<pos:position pos:line="104" pos:column="24"/></name></cpp:ifdef>
    <comment type="line" pos:line="105" pos:column="5">// position input at start of server answer (contains HTTP headers)</comment>
    <if pos:line="106" pos:column="5">if <condition pos:line="106" pos:column="8">( <expr><call><name pos:line="106" pos:column="10">lseek<pos:position pos:line="106" pos:column="15"/></name><argument_list pos:line="106" pos:column="15">( <argument><expr><name pos:line="106" pos:column="17">input<pos:position pos:line="106" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="24">metasize<pos:position pos:line="106" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="34">SEEK_SET<pos:position pos:line="106" pos:column="42"/></name></expr></argument> )<pos:position pos:line="106" pos:column="44"/></argument_list></call> <operator pos:line="106" pos:column="45">==<pos:position pos:line="106" pos:column="47"/></operator> <operator pos:line="106" pos:column="48">-<pos:position pos:line="106" pos:column="49"/></operator><literal type="number" pos:line="106" pos:column="49">1<pos:position pos:line="106" pos:column="50"/></literal></expr> )<pos:position pos:line="106" pos:column="52"/></condition><then pos:line="106" pos:column="52"> <block pos:line="106" pos:column="53">{
        <expr_stmt><expr><call><name pos:line="107" pos:column="9">fprintf<pos:position pos:line="107" pos:column="16"/></name><argument_list pos:line="107" pos:column="16">( <argument><expr><name pos:line="107" pos:column="18">stderr<pos:position pos:line="107" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="107" pos:column="26">"lseek(%s,%lu): %s\n"<pos:position pos:line="107" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="107" pos:column="49">fn<pos:position pos:line="107" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="107" pos:column="53">metasize<pos:position pos:line="107" pos:column="61"/></name></expr></argument>, <argument><expr><call><name pos:line="107" pos:column="63">strerror<pos:position pos:line="107" pos:column="71"/></name><argument_list pos:line="107" pos:column="71">(<argument><expr><name pos:line="107" pos:column="72">errno<pos:position pos:line="107" pos:column="77"/></name></expr></argument>)<pos:position pos:line="107" pos:column="78"/></argument_list></call></expr></argument> )<pos:position pos:line="107" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="81"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="108" pos:column="9">BAUTZ<pos:position pos:line="108" pos:column="14"/></name><argument_list pos:line="108" pos:column="14">(<argument><expr><literal type="boolean" pos:line="108" pos:column="15">false<pos:position pos:line="108" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="108" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="109" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="111" pos:column="5">// file copy input into output via buffer (regular io)</comment>
    <decl_stmt><decl><type><name pos:line="112" pos:column="5">char<pos:position pos:line="112" pos:column="9"/></name></type> <name><name pos:line="112" pos:column="10">buffer<pos:position pos:line="112" pos:column="16"/></name><index pos:line="112" pos:column="16">[<expr><literal type="number" pos:line="112" pos:column="17">32768<pos:position pos:line="112" pos:column="22"/></literal></expr>]<pos:position pos:line="112" pos:column="23"/></index></name></decl>;<pos:position pos:line="112" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="113" pos:column="5">int<pos:position pos:line="113" pos:column="8"/></name></type> <name pos:line="113" pos:column="9">rsize<pos:position pos:line="113" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="113" pos:column="16">wsize<pos:position pos:line="113" pos:column="21"/></name></decl>;<pos:position pos:line="113" pos:column="22"/></decl_stmt>
    <while pos:line="114" pos:column="5">while <condition pos:line="114" pos:column="11">( <expr><operator pos:line="114" pos:column="13">(<pos:position pos:line="114" pos:column="14"/></operator><name pos:line="114" pos:column="14">rsize<pos:position pos:line="114" pos:column="19"/></name><operator pos:line="114" pos:column="19">=<pos:position pos:line="114" pos:column="20"/></operator><call><name pos:line="114" pos:column="20">read<pos:position pos:line="114" pos:column="24"/></name><argument_list pos:line="114" pos:column="24">(<argument><expr><name pos:line="114" pos:column="25">input<pos:position pos:line="114" pos:column="30"/></name></expr></argument>,<argument><expr><name pos:line="114" pos:column="31">buffer<pos:position pos:line="114" pos:column="37"/></name></expr></argument>,<argument><expr><sizeof pos:line="114" pos:column="38">sizeof<argument_list pos:line="114" pos:column="44">(<argument><expr><name pos:line="114" pos:column="45">buffer<pos:position pos:line="114" pos:column="51"/></name></expr></argument>)<pos:position pos:line="114" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="114" pos:column="53"/></argument_list></call><operator pos:line="114" pos:column="53">)<pos:position pos:line="114" pos:column="54"/></operator> <operator pos:line="114" pos:column="55">&gt;<pos:position pos:line="114" pos:column="59"/></operator> <literal type="number" pos:line="114" pos:column="57">0<pos:position pos:line="114" pos:column="58"/></literal></expr> )<pos:position pos:line="114" pos:column="60"/></condition> <block pos:line="114" pos:column="61">{
        <if pos:line="115" pos:column="9">if <condition pos:line="115" pos:column="12">( <expr><operator pos:line="115" pos:column="14">(<pos:position pos:line="115" pos:column="15"/></operator><name pos:line="115" pos:column="15">wsize<pos:position pos:line="115" pos:column="20"/></name><operator pos:line="115" pos:column="20">=<pos:position pos:line="115" pos:column="21"/></operator><call><name pos:line="115" pos:column="21">write<pos:position pos:line="115" pos:column="26"/></name><argument_list pos:line="115" pos:column="26">(<argument><expr><name pos:line="115" pos:column="27">out<pos:position pos:line="115" pos:column="30"/></name></expr></argument>,<argument><expr><name pos:line="115" pos:column="31">buffer<pos:position pos:line="115" pos:column="37"/></name></expr></argument>,<argument><expr><name pos:line="115" pos:column="38">rsize<pos:position pos:line="115" pos:column="43"/></name></expr></argument>)<pos:position pos:line="115" pos:column="44"/></argument_list></call><operator pos:line="115" pos:column="44">)<pos:position pos:line="115" pos:column="45"/></operator> <operator pos:line="115" pos:column="46">&lt;=<pos:position pos:line="115" pos:column="51"/></operator> <literal type="number" pos:line="115" pos:column="49">0<pos:position pos:line="115" pos:column="50"/></literal></expr> )<pos:position pos:line="115" pos:column="52"/></condition><then pos:line="115" pos:column="52"> <block type="pseudo"><break pos:line="115" pos:column="53">break;<pos:position pos:line="115" pos:column="59"/></break></block></then></if>
    }<pos:position pos:line="116" pos:column="6"/></block></while>
    <if pos:line="117" pos:column="5">if <condition pos:line="117" pos:column="8">( <expr><name pos:line="117" pos:column="10">rsize<pos:position pos:line="117" pos:column="15"/></name> <operator pos:line="117" pos:column="16">&lt;<pos:position pos:line="117" pos:column="20"/></operator> <literal type="number" pos:line="117" pos:column="18">0<pos:position pos:line="117" pos:column="19"/></literal> <operator pos:line="117" pos:column="20">||<pos:position pos:line="117" pos:column="22"/></operator> <name pos:line="117" pos:column="23">wsize<pos:position pos:line="117" pos:column="28"/></name> <operator pos:line="117" pos:column="29">&lt;<pos:position pos:line="117" pos:column="33"/></operator> <literal type="number" pos:line="117" pos:column="31">0<pos:position pos:line="117" pos:column="32"/></literal></expr> )<pos:position pos:line="117" pos:column="34"/></condition><then pos:line="117" pos:column="34"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="117" pos:column="35">perror<pos:position pos:line="117" pos:column="41"/></name><argument_list pos:line="117" pos:column="41">( <argument><expr><literal type="string" pos:line="117" pos:column="43">"while copying"<pos:position pos:line="117" pos:column="58"/></literal></expr></argument> )<pos:position pos:line="117" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="61"/></expr_stmt></block></then></if>
<cpp:else pos:line="118" pos:column="1">#<cpp:directive pos:line="118" pos:column="2">else<pos:position pos:line="118" pos:column="6"/></cpp:directive></cpp:else> <comment type="line" pos:line="118" pos:column="7">// use mmap copy (compare: Stevens APUE 12.9)</comment>
    <comment type="line" pos:line="119" pos:column="5">// precondition: filesize-metasize &gt; 0</comment>
    <comment type="line" pos:line="120" pos:column="5">// seek end of output file ...</comment>
    <decl_stmt><decl><type><name pos:line="121" pos:column="5">off_t<pos:position pos:line="121" pos:column="10"/></name></type> <name pos:line="121" pos:column="11">position<pos:position pos:line="121" pos:column="19"/></name> <init pos:line="121" pos:column="20">= <expr><call><name pos:line="121" pos:column="22">lseek<pos:position pos:line="121" pos:column="27"/></name><argument_list pos:line="121" pos:column="27">( <argument><expr><name pos:line="121" pos:column="29">out<pos:position pos:line="121" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="121" pos:column="34">filesize<pos:position pos:line="121" pos:column="42"/></name><operator pos:line="121" pos:column="42">-<pos:position pos:line="121" pos:column="43"/></operator><name pos:line="121" pos:column="43">metasize<pos:position pos:line="121" pos:column="51"/></name><operator pos:line="121" pos:column="51">-<pos:position pos:line="121" pos:column="52"/></operator><literal type="number" pos:line="121" pos:column="52">1<pos:position pos:line="121" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="121" pos:column="55">SEEK_SET<pos:position pos:line="121" pos:column="63"/></name></expr></argument> )<pos:position pos:line="121" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="121" pos:column="66"/></decl_stmt>
    <if pos:line="122" pos:column="5">if <condition pos:line="122" pos:column="8">( <expr><name pos:line="122" pos:column="10">position<pos:position pos:line="122" pos:column="18"/></name> <operator pos:line="122" pos:column="19">==<pos:position pos:line="122" pos:column="21"/></operator> <operator pos:line="122" pos:column="22">-<pos:position pos:line="122" pos:column="23"/></operator><literal type="number" pos:line="122" pos:column="23">1<pos:position pos:line="122" pos:column="24"/></literal></expr> )<pos:position pos:line="122" pos:column="26"/></condition><then pos:line="122" pos:column="26"> <block pos:line="122" pos:column="27">{
        <expr_stmt><expr><call><name pos:line="123" pos:column="9">fprintf<pos:position pos:line="123" pos:column="16"/></name><argument_list pos:line="123" pos:column="16">( <argument><expr><name pos:line="123" pos:column="18">stderr<pos:position pos:line="123" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="123" pos:column="26">"lseek(%s,%lu): %s\n"<pos:position pos:line="123" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="123" pos:column="49">filename<pos:position pos:line="123" pos:column="57"/></name></expr></argument>,
                 <argument><expr><operator pos:line="124" pos:column="18">(<pos:position pos:line="124" pos:column="19"/></operator><name pos:line="124" pos:column="19">unsigned<pos:position pos:line="124" pos:column="27"/></name> <name pos:line="124" pos:column="28">long<pos:position pos:line="124" pos:column="32"/></name><operator pos:line="124" pos:column="32">)<pos:position pos:line="124" pos:column="33"/></operator><name pos:line="124" pos:column="33">filesize<pos:position pos:line="124" pos:column="41"/></name><operator pos:line="124" pos:column="41">-<pos:position pos:line="124" pos:column="42"/></operator><name pos:line="124" pos:column="42">metasize<pos:position pos:line="124" pos:column="50"/></name></expr></argument>,
                 <argument><expr><call><name pos:line="125" pos:column="18">strerror<pos:position pos:line="125" pos:column="26"/></name><argument_list pos:line="125" pos:column="26">(<argument><expr><name pos:line="125" pos:column="27">errno<pos:position pos:line="125" pos:column="32"/></name></expr></argument>)<pos:position pos:line="125" pos:column="33"/></argument_list></call></expr></argument> )<pos:position pos:line="125" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="126" pos:column="9">BAUTZ<pos:position pos:line="126" pos:column="14"/></name><argument_list pos:line="126" pos:column="14">(<argument><expr><literal type="boolean" pos:line="126" pos:column="15">false<pos:position pos:line="126" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="126" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="127" pos:column="6"/></block></then> <elseif pos:line="127" pos:column="7">else <if pos:line="127" pos:column="12">if <condition pos:line="127" pos:column="15">( <expr><name pos:line="127" pos:column="17">debug<pos:position pos:line="127" pos:column="22"/></name> <operator pos:line="127" pos:column="23">&amp;<pos:position pos:line="127" pos:column="28"/></operator> <literal type="number" pos:line="127" pos:column="25">0x02<pos:position pos:line="127" pos:column="29"/></literal></expr> )<pos:position pos:line="127" pos:column="31"/></condition><then pos:line="127" pos:column="31"> <block pos:line="127" pos:column="32">{
        <expr_stmt><expr><call><name pos:line="128" pos:column="9">fprintf<pos:position pos:line="128" pos:column="16"/></name><argument_list pos:line="128" pos:column="16">( <argument><expr><name pos:line="128" pos:column="18">stderr<pos:position pos:line="128" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="128" pos:column="26">"# filesize=%lu, metasize=%lu, filepos=%ld\n"<pos:position pos:line="128" pos:column="71"/></literal></expr></argument>,
                 <argument><expr><operator pos:line="129" pos:column="18">(<pos:position pos:line="129" pos:column="19"/></operator><name pos:line="129" pos:column="19">unsigned<pos:position pos:line="129" pos:column="27"/></name> <name pos:line="129" pos:column="28">long<pos:position pos:line="129" pos:column="32"/></name><operator pos:line="129" pos:column="32">)<pos:position pos:line="129" pos:column="33"/></operator><name pos:line="129" pos:column="33">filesize<pos:position pos:line="129" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="129" pos:column="43">(<pos:position pos:line="129" pos:column="44"/></operator><name pos:line="129" pos:column="44">unsigned<pos:position pos:line="129" pos:column="52"/></name> <name pos:line="129" pos:column="53">long<pos:position pos:line="129" pos:column="57"/></name><operator pos:line="129" pos:column="57">)<pos:position pos:line="129" pos:column="58"/></operator><name pos:line="129" pos:column="58">metasize<pos:position pos:line="129" pos:column="66"/></name></expr></argument>,
                 <argument><expr><operator pos:line="130" pos:column="18">(<pos:position pos:line="130" pos:column="19"/></operator><name pos:line="130" pos:column="19">long<pos:position pos:line="130" pos:column="23"/></name><operator pos:line="130" pos:column="23">)<pos:position pos:line="130" pos:column="24"/></operator><name pos:line="130" pos:column="24">position<pos:position pos:line="130" pos:column="32"/></name></expr></argument> )<pos:position pos:line="130" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="131" pos:column="6"/></block></then></if></elseif></if>

    <comment type="line" pos:line="133" pos:column="5">// ...and write 1 byte there (create a file that length)</comment>
    <if pos:line="134" pos:column="5">if <condition pos:line="134" pos:column="8">( <expr><call><name pos:line="134" pos:column="10">write<pos:position pos:line="134" pos:column="15"/></name><argument_list pos:line="134" pos:column="15">( <argument><expr><name pos:line="134" pos:column="17">out<pos:position pos:line="134" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="134" pos:column="22">""<pos:position pos:line="134" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="134" pos:column="26">1<pos:position pos:line="134" pos:column="27"/></literal></expr></argument> )<pos:position pos:line="134" pos:column="29"/></argument_list></call> <operator pos:line="134" pos:column="30">!=<pos:position pos:line="134" pos:column="32"/></operator> <literal type="number" pos:line="134" pos:column="33">1<pos:position pos:line="134" pos:column="34"/></literal></expr> )<pos:position pos:line="134" pos:column="36"/></condition><then pos:line="134" pos:column="36"> <block pos:line="134" pos:column="37">{
        <expr_stmt><expr><call><name pos:line="135" pos:column="9">perror<pos:position pos:line="135" pos:column="15"/></name><argument_list pos:line="135" pos:column="15">( <argument><expr><literal type="string" pos:line="135" pos:column="17">"write to output"<pos:position pos:line="135" pos:column="34"/></literal></expr></argument> )<pos:position pos:line="135" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="136" pos:column="9">BAUTZ<pos:position pos:line="136" pos:column="14"/></name><argument_list pos:line="136" pos:column="14">(<argument><expr><literal type="boolean" pos:line="136" pos:column="15">false<pos:position pos:line="136" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="136" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="137" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="139" pos:column="5">// create source mmap to copy from (mmap complete file)</comment>
    <decl_stmt><decl><type><name pos:line="140" pos:column="5">caddr_t<pos:position pos:line="140" pos:column="12"/></name></type> <name pos:line="140" pos:column="13">src<pos:position pos:line="140" pos:column="16"/></name> <init pos:line="140" pos:column="17">= <expr><operator pos:line="140" pos:column="19">(<pos:position pos:line="140" pos:column="20"/></operator><name pos:line="140" pos:column="20">caddr_t<pos:position pos:line="140" pos:column="27"/></name><operator pos:line="140" pos:column="27">)<pos:position pos:line="140" pos:column="28"/></operator> <call><name pos:line="140" pos:column="29">mmap<pos:position pos:line="140" pos:column="33"/></name><argument_list pos:line="140" pos:column="33">( <argument><expr><literal type="number" pos:line="140" pos:column="35">0<pos:position pos:line="140" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="140" pos:column="38">filesize<pos:position pos:line="140" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="140" pos:column="48">PROT_READ<pos:position pos:line="140" pos:column="57"/></name></expr></argument>,
                                  <argument><expr><name pos:line="141" pos:column="35">MAP_FILE<pos:position pos:line="141" pos:column="43"/></name> <operator pos:line="141" pos:column="44">|<pos:position pos:line="141" pos:column="45"/></operator> <name pos:line="141" pos:column="46">MAP_SHARED<pos:position pos:line="141" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="141" pos:column="58">input<pos:position pos:line="141" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="141" pos:column="65">0<pos:position pos:line="141" pos:column="66"/></literal></expr></argument> )<pos:position pos:line="141" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="141" pos:column="69"/></decl_stmt>
    <if pos:line="142" pos:column="5">if <condition pos:line="142" pos:column="8">( <expr><name pos:line="142" pos:column="10">src<pos:position pos:line="142" pos:column="13"/></name> <operator pos:line="142" pos:column="14">==<pos:position pos:line="142" pos:column="16"/></operator> <operator pos:line="142" pos:column="17">(<pos:position pos:line="142" pos:column="18"/></operator><name pos:line="142" pos:column="18">caddr_t<pos:position pos:line="142" pos:column="25"/></name><operator pos:line="142" pos:column="25">)<pos:position pos:line="142" pos:column="26"/></operator> <operator pos:line="142" pos:column="27">-<pos:position pos:line="142" pos:column="28"/></operator><literal type="number" pos:line="142" pos:column="28">1<pos:position pos:line="142" pos:column="29"/></literal></expr> )<pos:position pos:line="142" pos:column="31"/></condition><then pos:line="142" pos:column="31"> <block pos:line="142" pos:column="32">{
        <expr_stmt><expr><call><name pos:line="143" pos:column="9">perror<pos:position pos:line="143" pos:column="15"/></name><argument_list pos:line="143" pos:column="15">( <argument><expr><literal type="string" pos:line="143" pos:column="17">"mmap input"<pos:position pos:line="143" pos:column="29"/></literal></expr></argument> )<pos:position pos:line="143" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="144" pos:column="9">BAUTZ<pos:position pos:line="144" pos:column="14"/></name><argument_list pos:line="144" pos:column="14">(<argument><expr><literal type="boolean" pos:line="144" pos:column="15">false<pos:position pos:line="144" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="144" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="145" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="147" pos:column="5">// create destination mmap to copy into (mmap data portion)</comment>
    <decl_stmt><decl><type><name pos:line="148" pos:column="5">caddr_t<pos:position pos:line="148" pos:column="12"/></name></type> <name pos:line="148" pos:column="13">dst<pos:position pos:line="148" pos:column="16"/></name> <init pos:line="148" pos:column="17">= <expr><operator pos:line="148" pos:column="19">(<pos:position pos:line="148" pos:column="20"/></operator><name pos:line="148" pos:column="20">caddr_t<pos:position pos:line="148" pos:column="27"/></name><operator pos:line="148" pos:column="27">)<pos:position pos:line="148" pos:column="28"/></operator> <call><name pos:line="148" pos:column="29">mmap<pos:position pos:line="148" pos:column="33"/></name><argument_list pos:line="148" pos:column="33">( <argument><expr><literal type="number" pos:line="148" pos:column="35">0<pos:position pos:line="148" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="148" pos:column="38">filesize<pos:position pos:line="148" pos:column="46"/></name><operator pos:line="148" pos:column="46">-<pos:position pos:line="148" pos:column="47"/></operator><name pos:line="148" pos:column="47">metasize<pos:position pos:line="148" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="148" pos:column="57">PROT_READ<pos:position pos:line="148" pos:column="66"/></name> <operator pos:line="148" pos:column="67">|<pos:position pos:line="148" pos:column="68"/></operator> <name pos:line="148" pos:column="69">PROT_WRITE<pos:position pos:line="148" pos:column="79"/></name></expr></argument>,
                                  <argument><expr><name pos:line="149" pos:column="35">MAP_FILE<pos:position pos:line="149" pos:column="43"/></name> <operator pos:line="149" pos:column="44">|<pos:position pos:line="149" pos:column="45"/></operator> <name pos:line="149" pos:column="46">MAP_SHARED<pos:position pos:line="149" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="149" pos:column="58">out<pos:position pos:line="149" pos:column="61"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="149" pos:column="63">0<pos:position pos:line="149" pos:column="64"/></literal></expr></argument> )<pos:position pos:line="149" pos:column="66"/></argument_list></call></expr></init></decl>;<pos:position pos:line="149" pos:column="67"/></decl_stmt>
    <if pos:line="150" pos:column="5">if <condition pos:line="150" pos:column="8">( <expr><name pos:line="150" pos:column="10">dst<pos:position pos:line="150" pos:column="13"/></name> <operator pos:line="150" pos:column="14">==<pos:position pos:line="150" pos:column="16"/></operator> <operator pos:line="150" pos:column="17">(<pos:position pos:line="150" pos:column="18"/></operator><name pos:line="150" pos:column="18">caddr_t<pos:position pos:line="150" pos:column="25"/></name><operator pos:line="150" pos:column="25">)<pos:position pos:line="150" pos:column="26"/></operator> <operator pos:line="150" pos:column="27">-<pos:position pos:line="150" pos:column="28"/></operator><literal type="number" pos:line="150" pos:column="28">1<pos:position pos:line="150" pos:column="29"/></literal></expr> )<pos:position pos:line="150" pos:column="31"/></condition><then pos:line="150" pos:column="31"> <block pos:line="150" pos:column="32">{
        <expr_stmt><expr><call><name pos:line="151" pos:column="9">perror<pos:position pos:line="151" pos:column="15"/></name><argument_list pos:line="151" pos:column="15">( <argument><expr><literal type="string" pos:line="151" pos:column="17">"mmap output"<pos:position pos:line="151" pos:column="30"/></literal></expr></argument> )<pos:position pos:line="151" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="152" pos:column="9">munmap<pos:position pos:line="152" pos:column="15"/></name><argument_list pos:line="152" pos:column="15">( <argument><expr><name pos:line="152" pos:column="17">src<pos:position pos:line="152" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="152" pos:column="22">filesize<pos:position pos:line="152" pos:column="30"/></name></expr></argument> )<pos:position pos:line="152" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="152" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="153" pos:column="9">BAUTZ<pos:position pos:line="153" pos:column="14"/></name><argument_list pos:line="153" pos:column="14">(<argument><expr><literal type="boolean" pos:line="153" pos:column="15">false<pos:position pos:line="153" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="153" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="153" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="154" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="156" pos:column="5">// copy file (beware of offset into wanted data, skip meta data)</comment>
    <expr_stmt><expr><call><name pos:line="157" pos:column="5">memcpy<pos:position pos:line="157" pos:column="11"/></name><argument_list pos:line="157" pos:column="11">( <argument><expr><name pos:line="157" pos:column="13">dst<pos:position pos:line="157" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="157" pos:column="18">src<pos:position pos:line="157" pos:column="21"/></name><operator pos:line="157" pos:column="21">+<pos:position pos:line="157" pos:column="22"/></operator><name pos:line="157" pos:column="22">metasize<pos:position pos:line="157" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="157" pos:column="32">filesize<pos:position pos:line="157" pos:column="40"/></name><operator pos:line="157" pos:column="40">-<pos:position pos:line="157" pos:column="41"/></operator><name pos:line="157" pos:column="41">metasize<pos:position pos:line="157" pos:column="49"/></name></expr></argument> )<pos:position pos:line="157" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="52"/></expr_stmt>

    <comment type="line" pos:line="159" pos:column="5">// clean up</comment>
    <expr_stmt><expr><call><name pos:line="160" pos:column="5">munmap<pos:position pos:line="160" pos:column="11"/></name><argument_list pos:line="160" pos:column="11">( <argument><expr><name pos:line="160" pos:column="13">dst<pos:position pos:line="160" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="160" pos:column="18">filesize<pos:position pos:line="160" pos:column="26"/></name><operator pos:line="160" pos:column="26">-<pos:position pos:line="160" pos:column="27"/></operator><name pos:line="160" pos:column="27">metasize<pos:position pos:line="160" pos:column="35"/></name></expr></argument> )<pos:position pos:line="160" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="160" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="161" pos:column="5">munmap<pos:position pos:line="161" pos:column="11"/></name><argument_list pos:line="161" pos:column="11">( <argument><expr><name pos:line="161" pos:column="13">src<pos:position pos:line="161" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="161" pos:column="18">filesize<pos:position pos:line="161" pos:column="26"/></name></expr></argument> )<pos:position pos:line="161" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="161" pos:column="29"/></expr_stmt>
<cpp:endif pos:line="162" pos:column="1">#<cpp:directive pos:line="162" pos:column="2">endif<pos:position pos:line="162" pos:column="7"/></cpp:directive></cpp:endif> <comment type="line" pos:line="162" pos:column="8">// USE_REGULAR_COPY</comment>

    <expr_stmt><expr><call><name pos:line="164" pos:column="5">BAUTZ<pos:position pos:line="164" pos:column="10"/></name><argument_list pos:line="164" pos:column="10">(<argument><expr><literal type="boolean" pos:line="164" pos:column="11">true<pos:position pos:line="164" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="164" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="164" pos:column="17"/></expr_stmt>
}<pos:position pos:line="165" pos:column="2"/></block></function></unit>
