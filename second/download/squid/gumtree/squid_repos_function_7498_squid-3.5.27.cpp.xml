<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7498_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">u_char<pos:position pos:line="1" pos:column="7"/></name> <modifier pos:line="1" pos:column="8">*<pos:position pos:line="1" pos:column="9"/></modifier></type>
<name pos:line="2" pos:column="1">asn_build_int<pos:position pos:line="2" pos:column="14"/></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><name pos:line="2" pos:column="15">u_char<pos:position pos:line="2" pos:column="21"/></name> <modifier pos:line="2" pos:column="22">*<pos:position pos:line="2" pos:column="23"/></modifier></type> <name pos:line="2" pos:column="24">data<pos:position pos:line="2" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="30">int<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type><name pos:line="2" pos:column="35">datalength<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>,
              <parameter><decl><type><name pos:line="3" pos:column="15">u_char<pos:position pos:line="3" pos:column="21"/></name></type> <name pos:line="3" pos:column="22">type<pos:position pos:line="3" pos:column="26"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="28">int<pos:position pos:line="3" pos:column="31"/></name> <modifier pos:line="3" pos:column="32">*<pos:position pos:line="3" pos:column="33"/></modifier></type><name pos:line="3" pos:column="33">intp<pos:position pos:line="3" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="39">int<pos:position pos:line="3" pos:column="42"/></name></type> <name pos:line="3" pos:column="43">intsize<pos:position pos:line="3" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="51"/></parameter_list>
<comment type="block" pos:line="4" pos:column="1">/*     u_char *data;         IN - pointer to start of output buffer */</comment>
<comment type="block" pos:line="5" pos:column="1">/*     int    *datalength;   IN/OUT - # of valid bytes left in buffer */</comment>
<comment type="block" pos:line="6" pos:column="1">/*     u_char  type;         IN - asn type of object */</comment>
<comment type="block" pos:line="7" pos:column="1">/*     int   *intp;          IN - pointer to start of integer */</comment>
<comment type="block" pos:line="8" pos:column="1">/*     int    intsize;       IN - size of *intp */</comment>
<block pos:line="9" pos:column="1">{
    <comment type="block" pos:line="10" pos:column="5">/*
     * ASN.1 integer ::= 0x02 asnlength byte {byte}*
     */</comment>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">int<pos:position pos:line="13" pos:column="8"/></name></type> <name pos:line="13" pos:column="9">integer<pos:position pos:line="13" pos:column="16"/></name></decl>;<pos:position pos:line="13" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">u_int<pos:position pos:line="14" pos:column="10"/></name></type> <name pos:line="14" pos:column="11">mask<pos:position pos:line="14" pos:column="15"/></name></decl>;<pos:position pos:line="14" pos:column="16"/></decl_stmt>

    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name pos:line="16" pos:column="9">intsize<pos:position pos:line="16" pos:column="16"/></name> <operator pos:line="16" pos:column="17">!=<pos:position pos:line="16" pos:column="19"/></operator> <sizeof pos:line="16" pos:column="20">sizeof<argument_list pos:line="16" pos:column="26">(<argument><expr><name pos:line="16" pos:column="27">int<pos:position pos:line="16" pos:column="30"/></name></expr></argument>)<pos:position pos:line="16" pos:column="31"/></argument_list></sizeof></expr>)<pos:position pos:line="16" pos:column="32"/></condition><then pos:line="16" pos:column="32"> <block pos:line="16" pos:column="33">{
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">snmp_set_api_error<pos:position pos:line="17" pos:column="27"/></name><argument_list pos:line="17" pos:column="27">(<argument><expr><name pos:line="17" pos:column="28">SNMPERR_ASN_ENCODE<pos:position pos:line="17" pos:column="46"/></name></expr></argument>)<pos:position pos:line="17" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="48"/></expr_stmt>
        <return pos:line="18" pos:column="9">return <expr><operator pos:line="18" pos:column="16">(<pos:position pos:line="18" pos:column="17"/></operator><name pos:line="18" pos:column="17">NULL<pos:position pos:line="18" pos:column="21"/></name><operator pos:line="18" pos:column="21">)<pos:position pos:line="18" pos:column="22"/></operator></expr>;<pos:position pos:line="18" pos:column="23"/></return>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="20" pos:column="5">integer<pos:position pos:line="20" pos:column="12"/></name> <operator pos:line="20" pos:column="13">=<pos:position pos:line="20" pos:column="14"/></operator> <operator pos:line="20" pos:column="15">*<pos:position pos:line="20" pos:column="16"/></operator><name pos:line="20" pos:column="16">intp<pos:position pos:line="20" pos:column="20"/></name></expr>;<pos:position pos:line="20" pos:column="21"/></expr_stmt>

    <comment type="block" pos:line="22" pos:column="5">/*
     * Truncate "unnecessary" bytes off of the most significant end of this
     * 2's complement integer.  There should be no sequence of 9
     * consecutive 1's or 0's at the most significant end of the
     * integer.
     */</comment>
    <expr_stmt><expr><name pos:line="28" pos:column="5">mask<pos:position pos:line="28" pos:column="9"/></name> <operator pos:line="28" pos:column="10">=<pos:position pos:line="28" pos:column="11"/></operator> <operator pos:line="28" pos:column="12">(<pos:position pos:line="28" pos:column="13"/></operator><name pos:line="28" pos:column="13">u_int<pos:position pos:line="28" pos:column="18"/></name><operator pos:line="28" pos:column="18">)<pos:position pos:line="28" pos:column="19"/></operator> <literal type="number" pos:line="28" pos:column="20">0x1FF<pos:position pos:line="28" pos:column="25"/></literal> <operator pos:line="28" pos:column="26">&lt;&lt;<pos:position pos:line="28" pos:column="34"/></operator> <operator pos:line="28" pos:column="29">(<pos:position pos:line="28" pos:column="30"/></operator><operator pos:line="28" pos:column="30">(<pos:position pos:line="28" pos:column="31"/></operator><literal type="number" pos:line="28" pos:column="31">8<pos:position pos:line="28" pos:column="32"/></literal> <operator pos:line="28" pos:column="33">*<pos:position pos:line="28" pos:column="34"/></operator> <operator pos:line="28" pos:column="35">(<pos:position pos:line="28" pos:column="36"/></operator><sizeof pos:line="28" pos:column="36">sizeof<argument_list pos:line="28" pos:column="42">(<argument><expr><name pos:line="28" pos:column="43">int<pos:position pos:line="28" pos:column="46"/></name></expr></argument>)<pos:position pos:line="28" pos:column="47"/></argument_list></sizeof> <operator pos:line="28" pos:column="48">-<pos:position pos:line="28" pos:column="49"/></operator> <literal type="number" pos:line="28" pos:column="50">1<pos:position pos:line="28" pos:column="51"/></literal><operator pos:line="28" pos:column="51">)<pos:position pos:line="28" pos:column="52"/></operator><operator pos:line="28" pos:column="52">)<pos:position pos:line="28" pos:column="53"/></operator> <operator pos:line="28" pos:column="54">-<pos:position pos:line="28" pos:column="55"/></operator> <literal type="number" pos:line="28" pos:column="56">1<pos:position pos:line="28" pos:column="57"/></literal><operator pos:line="28" pos:column="57">)<pos:position pos:line="28" pos:column="58"/></operator></expr>;<pos:position pos:line="28" pos:column="59"/></expr_stmt>
    <comment type="block" pos:line="29" pos:column="5">/* mask is 0xFF800000 on a big-endian machine */</comment>

    <while pos:line="31" pos:column="5">while <condition pos:line="31" pos:column="11">(<expr><operator pos:line="31" pos:column="12">(<pos:position pos:line="31" pos:column="13"/></operator><operator pos:line="31" pos:column="13">(<pos:position pos:line="31" pos:column="14"/></operator><operator pos:line="31" pos:column="14">(<pos:position pos:line="31" pos:column="15"/></operator><name pos:line="31" pos:column="15">integer<pos:position pos:line="31" pos:column="22"/></name> <operator pos:line="31" pos:column="23">&amp;<pos:position pos:line="31" pos:column="28"/></operator> <name pos:line="31" pos:column="25">mask<pos:position pos:line="31" pos:column="29"/></name><operator pos:line="31" pos:column="29">)<pos:position pos:line="31" pos:column="30"/></operator> <operator pos:line="31" pos:column="31">==<pos:position pos:line="31" pos:column="33"/></operator> <literal type="number" pos:line="31" pos:column="34">0<pos:position pos:line="31" pos:column="35"/></literal><operator pos:line="31" pos:column="35">)<pos:position pos:line="31" pos:column="36"/></operator> <operator pos:line="31" pos:column="37">||<pos:position pos:line="31" pos:column="39"/></operator> <operator pos:line="31" pos:column="40">(<pos:position pos:line="31" pos:column="41"/></operator><operator pos:line="31" pos:column="41">(<pos:position pos:line="31" pos:column="42"/></operator><name pos:line="31" pos:column="42">integer<pos:position pos:line="31" pos:column="49"/></name> <operator pos:line="31" pos:column="50">&amp;<pos:position pos:line="31" pos:column="55"/></operator> <name pos:line="31" pos:column="52">mask<pos:position pos:line="31" pos:column="56"/></name><operator pos:line="31" pos:column="56">)<pos:position pos:line="31" pos:column="57"/></operator> <operator pos:line="31" pos:column="58">==<pos:position pos:line="31" pos:column="60"/></operator> <name pos:line="31" pos:column="61">mask<pos:position pos:line="31" pos:column="65"/></name><operator pos:line="31" pos:column="65">)<pos:position pos:line="31" pos:column="66"/></operator><operator pos:line="31" pos:column="66">)<pos:position pos:line="31" pos:column="67"/></operator>
            <operator pos:line="32" pos:column="13">&amp;&amp;<pos:position pos:line="32" pos:column="23"/></operator> <name pos:line="32" pos:column="16">intsize<pos:position pos:line="32" pos:column="23"/></name> <operator pos:line="32" pos:column="24">&gt;<pos:position pos:line="32" pos:column="28"/></operator> <literal type="number" pos:line="32" pos:column="26">1<pos:position pos:line="32" pos:column="27"/></literal></expr>)<pos:position pos:line="32" pos:column="28"/></condition> <block pos:line="32" pos:column="29">{
        <expr_stmt><expr><name pos:line="33" pos:column="9">intsize<pos:position pos:line="33" pos:column="16"/></name><operator pos:line="33" pos:column="16">--<pos:position pos:line="33" pos:column="18"/></operator></expr>;<pos:position pos:line="33" pos:column="19"/></expr_stmt>
        <expr_stmt><expr><name pos:line="34" pos:column="9">integer<pos:position pos:line="34" pos:column="16"/></name> <operator pos:line="34" pos:column="17">&lt;&lt;=<pos:position pos:line="34" pos:column="26"/></operator> <literal type="number" pos:line="34" pos:column="21">8<pos:position pos:line="34" pos:column="22"/></literal></expr>;<pos:position pos:line="34" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="35" pos:column="6"/></block></while>

    <expr_stmt><expr><name pos:line="37" pos:column="5">data<pos:position pos:line="37" pos:column="9"/></name> <operator pos:line="37" pos:column="10">=<pos:position pos:line="37" pos:column="11"/></operator> <call><name pos:line="37" pos:column="12">asn_build_header_with_truth<pos:position pos:line="37" pos:column="39"/></name><argument_list pos:line="37" pos:column="39">(<argument><expr><name pos:line="37" pos:column="40">data<pos:position pos:line="37" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="46">datalength<pos:position pos:line="37" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="58">type<pos:position pos:line="37" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="64">intsize<pos:position pos:line="37" pos:column="71"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="73">1<pos:position pos:line="37" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="76"/></expr_stmt>
    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><name pos:line="38" pos:column="9">data<pos:position pos:line="38" pos:column="13"/></name> <operator pos:line="38" pos:column="14">==<pos:position pos:line="38" pos:column="16"/></operator> <name pos:line="38" pos:column="17">NULL<pos:position pos:line="38" pos:column="21"/></name></expr>)<pos:position pos:line="38" pos:column="22"/></condition><then pos:line="38" pos:column="22">
        <block type="pseudo"><return pos:line="39" pos:column="9">return <expr><operator pos:line="39" pos:column="16">(<pos:position pos:line="39" pos:column="17"/></operator><name pos:line="39" pos:column="17">NULL<pos:position pos:line="39" pos:column="21"/></name><operator pos:line="39" pos:column="21">)<pos:position pos:line="39" pos:column="22"/></operator></expr>;<pos:position pos:line="39" pos:column="23"/></return></block></then></if>

    <comment type="block" pos:line="41" pos:column="5">/* Enough room for what we just encoded? */</comment>
    <if pos:line="42" pos:column="5">if <condition pos:line="42" pos:column="8">(<expr><operator pos:line="42" pos:column="9">*<pos:position pos:line="42" pos:column="10"/></operator><name pos:line="42" pos:column="10">datalength<pos:position pos:line="42" pos:column="20"/></name> <operator pos:line="42" pos:column="21">&lt;<pos:position pos:line="42" pos:column="25"/></operator> <name pos:line="42" pos:column="23">intsize<pos:position pos:line="42" pos:column="30"/></name></expr>)<pos:position pos:line="42" pos:column="31"/></condition><then pos:line="42" pos:column="31"> <block pos:line="42" pos:column="32">{
        <expr_stmt><expr><call><name pos:line="43" pos:column="9">snmp_set_api_error<pos:position pos:line="43" pos:column="27"/></name><argument_list pos:line="43" pos:column="27">(<argument><expr><name pos:line="43" pos:column="28">SNMPERR_ASN_ENCODE<pos:position pos:line="43" pos:column="46"/></name></expr></argument>)<pos:position pos:line="43" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="48"/></expr_stmt>
        <return pos:line="44" pos:column="9">return <expr><operator pos:line="44" pos:column="16">(<pos:position pos:line="44" pos:column="17"/></operator><name pos:line="44" pos:column="17">NULL<pos:position pos:line="44" pos:column="21"/></name><operator pos:line="44" pos:column="21">)<pos:position pos:line="44" pos:column="22"/></operator></expr>;<pos:position pos:line="44" pos:column="23"/></return>
    }<pos:position pos:line="45" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="46" pos:column="5">/* Insert it */</comment>
    <expr_stmt><expr><operator pos:line="47" pos:column="5">*<pos:position pos:line="47" pos:column="6"/></operator><name pos:line="47" pos:column="6">datalength<pos:position pos:line="47" pos:column="16"/></name> <operator pos:line="47" pos:column="17">-=<pos:position pos:line="47" pos:column="19"/></operator> <name pos:line="47" pos:column="20">intsize<pos:position pos:line="47" pos:column="27"/></name></expr>;<pos:position pos:line="47" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name pos:line="48" pos:column="5">mask<pos:position pos:line="48" pos:column="9"/></name> <operator pos:line="48" pos:column="10">=<pos:position pos:line="48" pos:column="11"/></operator> <operator pos:line="48" pos:column="12">(<pos:position pos:line="48" pos:column="13"/></operator><name pos:line="48" pos:column="13">u_int<pos:position pos:line="48" pos:column="18"/></name><operator pos:line="48" pos:column="18">)<pos:position pos:line="48" pos:column="19"/></operator> <literal type="number" pos:line="48" pos:column="20">0xFF<pos:position pos:line="48" pos:column="24"/></literal> <operator pos:line="48" pos:column="25">&lt;&lt;<pos:position pos:line="48" pos:column="33"/></operator> <operator pos:line="48" pos:column="28">(<pos:position pos:line="48" pos:column="29"/></operator><literal type="number" pos:line="48" pos:column="29">8<pos:position pos:line="48" pos:column="30"/></literal> <operator pos:line="48" pos:column="31">*<pos:position pos:line="48" pos:column="32"/></operator> <operator pos:line="48" pos:column="33">(<pos:position pos:line="48" pos:column="34"/></operator><sizeof pos:line="48" pos:column="34">sizeof<argument_list pos:line="48" pos:column="40">(<argument><expr><name pos:line="48" pos:column="41">int<pos:position pos:line="48" pos:column="44"/></name></expr></argument>)<pos:position pos:line="48" pos:column="45"/></argument_list></sizeof> <operator pos:line="48" pos:column="46">-<pos:position pos:line="48" pos:column="47"/></operator> <literal type="number" pos:line="48" pos:column="48">1<pos:position pos:line="48" pos:column="49"/></literal><operator pos:line="48" pos:column="49">)<pos:position pos:line="48" pos:column="50"/></operator><operator pos:line="48" pos:column="50">)<pos:position pos:line="48" pos:column="51"/></operator></expr>;<pos:position pos:line="48" pos:column="52"/></expr_stmt>
    <comment type="block" pos:line="49" pos:column="5">/* mask is 0xFF000000 on a big-endian machine */</comment>
    <while pos:line="50" pos:column="5">while <condition pos:line="50" pos:column="11">(<expr><name pos:line="50" pos:column="12">intsize<pos:position pos:line="50" pos:column="19"/></name><operator pos:line="50" pos:column="19">--<pos:position pos:line="50" pos:column="21"/></operator></expr>)<pos:position pos:line="50" pos:column="22"/></condition> <block pos:line="50" pos:column="23">{
        <expr_stmt><expr><operator pos:line="51" pos:column="9">*<pos:position pos:line="51" pos:column="10"/></operator><name pos:line="51" pos:column="10">data<pos:position pos:line="51" pos:column="14"/></name><operator pos:line="51" pos:column="14">++<pos:position pos:line="51" pos:column="16"/></operator> <operator pos:line="51" pos:column="17">=<pos:position pos:line="51" pos:column="18"/></operator> <call pos:line="51" pos:column="19">(<name pos:line="51" pos:column="20">u_char<pos:position pos:line="51" pos:column="26"/></name>) <argument_list pos:line="51" pos:column="28">(<argument><expr><operator pos:line="51" pos:column="29">(<pos:position pos:line="51" pos:column="30"/></operator><name pos:line="51" pos:column="30">integer<pos:position pos:line="51" pos:column="37"/></name> <operator pos:line="51" pos:column="38">&amp;<pos:position pos:line="51" pos:column="43"/></operator> <name pos:line="51" pos:column="40">mask<pos:position pos:line="51" pos:column="44"/></name><operator pos:line="51" pos:column="44">)<pos:position pos:line="51" pos:column="45"/></operator> <operator pos:line="51" pos:column="46">&gt;&gt;<pos:position pos:line="51" pos:column="51"/></operator> <operator pos:line="51" pos:column="49">(<pos:position pos:line="51" pos:column="50"/></operator><literal type="number" pos:line="51" pos:column="50">8<pos:position pos:line="51" pos:column="51"/></literal> <operator pos:line="51" pos:column="52">*<pos:position pos:line="51" pos:column="53"/></operator> <operator pos:line="51" pos:column="54">(<pos:position pos:line="51" pos:column="55"/></operator><sizeof pos:line="51" pos:column="55">sizeof<argument_list pos:line="51" pos:column="61">(<argument><expr><name pos:line="51" pos:column="62">int<pos:position pos:line="51" pos:column="65"/></name></expr></argument>)<pos:position pos:line="51" pos:column="66"/></argument_list></sizeof> <operator pos:line="51" pos:column="67">-<pos:position pos:line="51" pos:column="68"/></operator> <literal type="number" pos:line="51" pos:column="69">1<pos:position pos:line="51" pos:column="70"/></literal><operator pos:line="51" pos:column="70">)<pos:position pos:line="51" pos:column="71"/></operator><operator pos:line="51" pos:column="71">)<pos:position pos:line="51" pos:column="72"/></operator></expr></argument>)<pos:position pos:line="51" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="74"/></expr_stmt>
        <expr_stmt><expr><name pos:line="52" pos:column="9">integer<pos:position pos:line="52" pos:column="16"/></name> <operator pos:line="52" pos:column="17">&lt;&lt;=<pos:position pos:line="52" pos:column="26"/></operator> <literal type="number" pos:line="52" pos:column="21">8<pos:position pos:line="52" pos:column="22"/></literal></expr>;<pos:position pos:line="52" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="53" pos:column="6"/></block></while>
    <return pos:line="54" pos:column="5">return <expr><operator pos:line="54" pos:column="12">(<pos:position pos:line="54" pos:column="13"/></operator><name pos:line="54" pos:column="13">data<pos:position pos:line="54" pos:column="17"/></name><operator pos:line="54" pos:column="17">)<pos:position pos:line="54" pos:column="18"/></operator></expr>;<pos:position pos:line="54" pos:column="19"/></return>
}<pos:position pos:line="55" pos:column="2"/></block></function></unit>
