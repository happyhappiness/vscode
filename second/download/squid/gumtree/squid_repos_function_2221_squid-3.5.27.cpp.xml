<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2221_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HttpStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">sendRequest<pos:position pos:line="2" pos:column="27"/></name></name><parameter_list pos:line="2" pos:column="27">()<pos:position pos:line="2" pos:column="29"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">MemBuf<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">mb<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="6" pos:column="5">debugs<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><literal type="number" pos:line="6" pos:column="12">11<pos:position pos:line="6" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="16">5<pos:position pos:line="6" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="6" pos:column="19">HERE<pos:position pos:line="6" pos:column="23"/></name> <operator pos:line="6" pos:column="24">&lt;&lt;<pos:position pos:line="6" pos:column="32"/></operator> <name pos:line="6" pos:column="27">serverConnection<pos:position pos:line="6" pos:column="43"/></name> <operator pos:line="6" pos:column="44">&lt;&lt;<pos:position pos:line="6" pos:column="52"/></operator> <literal type="string" pos:line="6" pos:column="47">", request "<pos:position pos:line="6" pos:column="59"/></literal> <operator pos:line="6" pos:column="60">&lt;&lt;<pos:position pos:line="6" pos:column="68"/></operator> <name pos:line="6" pos:column="63">request<pos:position pos:line="6" pos:column="70"/></name> <operator pos:line="6" pos:column="71">&lt;&lt;<pos:position pos:line="6" pos:column="79"/></operator> <literal type="string" pos:line="6" pos:column="74">", this "<pos:position pos:line="6" pos:column="83"/></literal> <operator pos:line="6" pos:column="84">&lt;&lt;<pos:position pos:line="6" pos:column="92"/></operator> <name pos:line="6" pos:column="87">this<pos:position pos:line="6" pos:column="91"/></name> <operator pos:line="6" pos:column="92">&lt;&lt;<pos:position pos:line="6" pos:column="100"/></operator> <literal type="string" pos:line="6" pos:column="95">"."<pos:position pos:line="6" pos:column="98"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="99"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="100"/></expr_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><operator pos:line="8" pos:column="9">!<pos:position pos:line="8" pos:column="10"/></operator><call><name><name pos:line="8" pos:column="10">Comm<pos:position pos:line="8" pos:column="14"/></name><operator pos:line="8" pos:column="14">::<pos:position pos:line="8" pos:column="16"/></operator><name pos:line="8" pos:column="16">IsConnOpen<pos:position pos:line="8" pos:column="26"/></name></name><argument_list pos:line="8" pos:column="26">(<argument><expr><name pos:line="8" pos:column="27">serverConnection<pos:position pos:line="8" pos:column="43"/></name></expr></argument>)<pos:position pos:line="8" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="45"/></condition><then pos:line="8" pos:column="45"> <block pos:line="8" pos:column="46">{
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">debugs<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><literal type="number" pos:line="9" pos:column="16">11<pos:position pos:line="9" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="9" pos:column="19">3<pos:position pos:line="9" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="22">HERE<pos:position pos:line="9" pos:column="26"/></name> <operator pos:line="9" pos:column="27">&lt;&lt;<pos:position pos:line="9" pos:column="35"/></operator> <literal type="string" pos:line="9" pos:column="30">"cannot send request to closing "<pos:position pos:line="9" pos:column="63"/></literal> <operator pos:line="9" pos:column="64">&lt;&lt;<pos:position pos:line="9" pos:column="72"/></operator> <name pos:line="9" pos:column="67">serverConnection<pos:position pos:line="9" pos:column="83"/></name></expr></argument>)<pos:position pos:line="9" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="85"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">assert<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><name pos:line="10" pos:column="16">closeHandler<pos:position pos:line="10" pos:column="28"/></name> <operator pos:line="10" pos:column="29">!=<pos:position pos:line="10" pos:column="31"/></operator> <name pos:line="10" pos:column="32">NULL<pos:position pos:line="10" pos:column="36"/></name></expr></argument>)<pos:position pos:line="10" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="38"/></expr_stmt>
        <return pos:line="11" pos:column="9">return <expr><literal type="boolean" pos:line="11" pos:column="16">false<pos:position pos:line="11" pos:column="21"/></literal></expr>;<pos:position pos:line="11" pos:column="22"/></return>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>

    <typedef pos:line="14" pos:column="5">typedef <type><name><name pos:line="14" pos:column="13">CommCbMemFunT<pos:position pos:line="14" pos:column="26"/></name><argument_list type="generic" pos:line="14" pos:column="26">&lt;<argument><expr><name pos:line="14" pos:column="27">HttpStateData<pos:position pos:line="14" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="42">CommTimeoutCbParams<pos:position pos:line="14" pos:column="61"/></name></expr></argument>&gt;<pos:position pos:line="14" pos:column="65"/></argument_list></name></type> <name pos:line="14" pos:column="63">TimeoutDialer<pos:position pos:line="14" pos:column="76"/></name>;<pos:position pos:line="14" pos:column="77"/></typedef>
    <decl_stmt><decl><type><name><name pos:line="15" pos:column="5">AsyncCall<pos:position pos:line="15" pos:column="14"/></name><operator pos:line="15" pos:column="14">::<pos:position pos:line="15" pos:column="16"/></operator><name pos:line="15" pos:column="16">Pointer<pos:position pos:line="15" pos:column="23"/></name></name></type> <name pos:line="15" pos:column="24">timeoutCall<pos:position pos:line="15" pos:column="35"/></name> <init pos:line="15" pos:column="36">=  <expr><call><name pos:line="15" pos:column="39">JobCallback<pos:position pos:line="15" pos:column="50"/></name><argument_list pos:line="15" pos:column="50">(<argument><expr><literal type="number" pos:line="15" pos:column="51">11<pos:position pos:line="15" pos:column="53"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="55">5<pos:position pos:line="15" pos:column="56"/></literal></expr></argument>,
                                      <argument><expr><name pos:line="16" pos:column="39">TimeoutDialer<pos:position pos:line="16" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="54">this<pos:position pos:line="16" pos:column="58"/></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="60">HttpStateData<pos:position pos:line="16" pos:column="73"/></name><operator pos:line="16" pos:column="73">::<pos:position pos:line="16" pos:column="75"/></operator><name pos:line="16" pos:column="75">httpTimeout<pos:position pos:line="16" pos:column="86"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="87"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="88"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">commSetConnTimeout<pos:position pos:line="17" pos:column="23"/></name><argument_list pos:line="17" pos:column="23">(<argument><expr><name pos:line="17" pos:column="24">serverConnection<pos:position pos:line="17" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="42">Config<pos:position pos:line="17" pos:column="48"/></name><operator pos:line="17" pos:column="48">.<pos:position pos:line="17" pos:column="49"/></operator><name pos:line="17" pos:column="49">Timeout<pos:position pos:line="17" pos:column="56"/></name><operator pos:line="17" pos:column="56">.<pos:position pos:line="17" pos:column="57"/></operator><name pos:line="17" pos:column="57">lifetime<pos:position pos:line="17" pos:column="65"/></name></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="67">timeoutCall<pos:position pos:line="17" pos:column="78"/></name></expr></argument>)<pos:position pos:line="17" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="80"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="18" pos:column="5">flags<pos:position pos:line="18" pos:column="10"/></name><operator pos:line="18" pos:column="10">.<pos:position pos:line="18" pos:column="11"/></operator><name pos:line="18" pos:column="11">do_next_read<pos:position pos:line="18" pos:column="23"/></name></name> <operator pos:line="18" pos:column="24">=<pos:position pos:line="18" pos:column="25"/></operator> <literal type="boolean" pos:line="18" pos:column="26">true<pos:position pos:line="18" pos:column="30"/></literal></expr>;<pos:position pos:line="18" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">maybeReadVirginBody<pos:position pos:line="19" pos:column="24"/></name><argument_list pos:line="19" pos:column="24">()<pos:position pos:line="19" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="27"/></expr_stmt>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name><name pos:line="21" pos:column="9">request<pos:position pos:line="21" pos:column="16"/></name><operator pos:line="21" pos:column="16">-&gt;<pos:position pos:line="21" pos:column="21"/></operator><name pos:line="21" pos:column="18">body_pipe<pos:position pos:line="21" pos:column="27"/></name></name> <operator pos:line="21" pos:column="28">!=<pos:position pos:line="21" pos:column="30"/></operator> <name pos:line="21" pos:column="31">NULL<pos:position pos:line="21" pos:column="35"/></name></expr>)<pos:position pos:line="21" pos:column="36"/></condition><then pos:line="21" pos:column="36"> <block pos:line="21" pos:column="37">{
        <if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><operator pos:line="22" pos:column="13">!<pos:position pos:line="22" pos:column="14"/></operator><call><name pos:line="22" pos:column="14">startRequestBodyFlow<pos:position pos:line="22" pos:column="34"/></name><argument_list pos:line="22" pos:column="34">()<pos:position pos:line="22" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="37"/></condition><then pos:line="22" pos:column="37"> <comment type="line" pos:line="22" pos:column="38">// register to receive body data</comment>
            <block type="pseudo"><return pos:line="23" pos:column="13">return <expr><literal type="boolean" pos:line="23" pos:column="20">false<pos:position pos:line="23" pos:column="25"/></literal></expr>;<pos:position pos:line="23" pos:column="26"/></return></block></then></if>
        <typedef pos:line="24" pos:column="9">typedef <type><name><name pos:line="24" pos:column="17">CommCbMemFunT<pos:position pos:line="24" pos:column="30"/></name><argument_list type="generic" pos:line="24" pos:column="30">&lt;<argument><expr><name pos:line="24" pos:column="31">HttpStateData<pos:position pos:line="24" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="46">CommIoCbParams<pos:position pos:line="24" pos:column="60"/></name></expr></argument>&gt;<pos:position pos:line="24" pos:column="64"/></argument_list></name></type> <name pos:line="24" pos:column="62">Dialer<pos:position pos:line="24" pos:column="68"/></name>;<pos:position pos:line="24" pos:column="69"/></typedef>
        <expr_stmt><expr><name pos:line="25" pos:column="9">requestSender<pos:position pos:line="25" pos:column="22"/></name> <operator pos:line="25" pos:column="23">=<pos:position pos:line="25" pos:column="24"/></operator> <call><name pos:line="25" pos:column="25">JobCallback<pos:position pos:line="25" pos:column="36"/></name><argument_list pos:line="25" pos:column="36">(<argument><expr><literal type="number" pos:line="25" pos:column="37">11<pos:position pos:line="25" pos:column="39"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="25" pos:column="40">5<pos:position pos:line="25" pos:column="41"/></literal></expr></argument>,
                                    <argument><expr><name pos:line="26" pos:column="37">Dialer<pos:position pos:line="26" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="45">this<pos:position pos:line="26" pos:column="49"/></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="51">HttpStateData<pos:position pos:line="26" pos:column="64"/></name><operator pos:line="26" pos:column="64">::<pos:position pos:line="26" pos:column="66"/></operator><name pos:line="26" pos:column="66">sentRequestBody<pos:position pos:line="26" pos:column="81"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="83"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="28" pos:column="9">Must<pos:position pos:line="28" pos:column="13"/></name><argument_list pos:line="28" pos:column="13">(<argument><expr><operator pos:line="28" pos:column="14">!<pos:position pos:line="28" pos:column="15"/></operator><name><name pos:line="28" pos:column="15">flags<pos:position pos:line="28" pos:column="20"/></name><operator pos:line="28" pos:column="20">.<pos:position pos:line="28" pos:column="21"/></operator><name pos:line="28" pos:column="21">chunked_request<pos:position pos:line="28" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="38"/></expr_stmt>
        <comment type="line" pos:line="29" pos:column="9">// use chunked encoding if we do not know the length</comment>
        <if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name><name pos:line="30" pos:column="13">request<pos:position pos:line="30" pos:column="20"/></name><operator pos:line="30" pos:column="20">-&gt;<pos:position pos:line="30" pos:column="25"/></operator><name pos:line="30" pos:column="22">content_length<pos:position pos:line="30" pos:column="36"/></name></name> <operator pos:line="30" pos:column="37">&lt;<pos:position pos:line="30" pos:column="41"/></operator> <literal type="number" pos:line="30" pos:column="39">0<pos:position pos:line="30" pos:column="40"/></literal></expr>)<pos:position pos:line="30" pos:column="41"/></condition><then pos:line="30" pos:column="41">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="31" pos:column="13">flags<pos:position pos:line="31" pos:column="18"/></name><operator pos:line="31" pos:column="18">.<pos:position pos:line="31" pos:column="19"/></operator><name pos:line="31" pos:column="19">chunked_request<pos:position pos:line="31" pos:column="34"/></name></name> <operator pos:line="31" pos:column="35">=<pos:position pos:line="31" pos:column="36"/></operator> <literal type="boolean" pos:line="31" pos:column="37">true<pos:position pos:line="31" pos:column="41"/></literal></expr>;<pos:position pos:line="31" pos:column="42"/></expr_stmt></block></then></if>
    }<pos:position pos:line="32" pos:column="6"/></block></then> <else pos:line="32" pos:column="7">else <block pos:line="32" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="33" pos:column="9">assert<pos:position pos:line="33" pos:column="15"/></name><argument_list pos:line="33" pos:column="15">(<argument><expr><operator pos:line="33" pos:column="16">!<pos:position pos:line="33" pos:column="17"/></operator><name pos:line="33" pos:column="17">requestBodySource<pos:position pos:line="33" pos:column="34"/></name></expr></argument>)<pos:position pos:line="33" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="36"/></expr_stmt>
        <typedef pos:line="34" pos:column="9">typedef <type><name><name pos:line="34" pos:column="17">CommCbMemFunT<pos:position pos:line="34" pos:column="30"/></name><argument_list type="generic" pos:line="34" pos:column="30">&lt;<argument><expr><name pos:line="34" pos:column="31">HttpStateData<pos:position pos:line="34" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="46">CommIoCbParams<pos:position pos:line="34" pos:column="60"/></name></expr></argument>&gt;<pos:position pos:line="34" pos:column="64"/></argument_list></name></type> <name pos:line="34" pos:column="62">Dialer<pos:position pos:line="34" pos:column="68"/></name>;<pos:position pos:line="34" pos:column="69"/></typedef>
        <expr_stmt><expr><name pos:line="35" pos:column="9">requestSender<pos:position pos:line="35" pos:column="22"/></name> <operator pos:line="35" pos:column="23">=<pos:position pos:line="35" pos:column="24"/></operator> <call><name pos:line="35" pos:column="25">JobCallback<pos:position pos:line="35" pos:column="36"/></name><argument_list pos:line="35" pos:column="36">(<argument><expr><literal type="number" pos:line="35" pos:column="37">11<pos:position pos:line="35" pos:column="39"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="35" pos:column="40">5<pos:position pos:line="35" pos:column="41"/></literal></expr></argument>,
                                    <argument><expr><name pos:line="36" pos:column="37">Dialer<pos:position pos:line="36" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="45">this<pos:position pos:line="36" pos:column="49"/></name></expr></argument>,  <argument><expr><name><name pos:line="36" pos:column="52">HttpStateData<pos:position pos:line="36" pos:column="65"/></name><operator pos:line="36" pos:column="65">::<pos:position pos:line="36" pos:column="67"/></operator><name pos:line="36" pos:column="67">wroteLast<pos:position pos:line="36" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="78"/></expr_stmt>
    }<pos:position pos:line="37" pos:column="6"/></block></else></if>

    <expr_stmt><expr><name><name pos:line="39" pos:column="5">flags<pos:position pos:line="39" pos:column="10"/></name><operator pos:line="39" pos:column="10">.<pos:position pos:line="39" pos:column="11"/></operator><name pos:line="39" pos:column="11">originpeer<pos:position pos:line="39" pos:column="21"/></name></name> <operator pos:line="39" pos:column="22">=<pos:position pos:line="39" pos:column="23"/></operator> <operator pos:line="39" pos:column="24">(<pos:position pos:line="39" pos:column="25"/></operator><name pos:line="39" pos:column="25">_peer<pos:position pos:line="39" pos:column="30"/></name> <operator pos:line="39" pos:column="31">!=<pos:position pos:line="39" pos:column="33"/></operator> <name pos:line="39" pos:column="34">NULL<pos:position pos:line="39" pos:column="38"/></name> <operator pos:line="39" pos:column="39">&amp;&amp;<pos:position pos:line="39" pos:column="49"/></operator> <name><name pos:line="39" pos:column="42">_peer<pos:position pos:line="39" pos:column="47"/></name><operator pos:line="39" pos:column="47">-&gt;<pos:position pos:line="39" pos:column="52"/></operator><name pos:line="39" pos:column="49">options<pos:position pos:line="39" pos:column="56"/></name><operator pos:line="39" pos:column="56">.<pos:position pos:line="39" pos:column="57"/></operator><name pos:line="39" pos:column="57">originserver<pos:position pos:line="39" pos:column="69"/></name></name><operator pos:line="39" pos:column="69">)<pos:position pos:line="39" pos:column="70"/></operator></expr>;<pos:position pos:line="39" pos:column="71"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="40" pos:column="5">flags<pos:position pos:line="40" pos:column="10"/></name><operator pos:line="40" pos:column="10">.<pos:position pos:line="40" pos:column="11"/></operator><name pos:line="40" pos:column="11">proxying<pos:position pos:line="40" pos:column="19"/></name></name> <operator pos:line="40" pos:column="20">=<pos:position pos:line="40" pos:column="21"/></operator> <operator pos:line="40" pos:column="22">(<pos:position pos:line="40" pos:column="23"/></operator><name pos:line="40" pos:column="23">_peer<pos:position pos:line="40" pos:column="28"/></name> <operator pos:line="40" pos:column="29">!=<pos:position pos:line="40" pos:column="31"/></operator> <name pos:line="40" pos:column="32">NULL<pos:position pos:line="40" pos:column="36"/></name> <operator pos:line="40" pos:column="37">&amp;&amp;<pos:position pos:line="40" pos:column="47"/></operator> <operator pos:line="40" pos:column="40">!<pos:position pos:line="40" pos:column="41"/></operator><name><name pos:line="40" pos:column="41">flags<pos:position pos:line="40" pos:column="46"/></name><operator pos:line="40" pos:column="46">.<pos:position pos:line="40" pos:column="47"/></operator><name pos:line="40" pos:column="47">originpeer<pos:position pos:line="40" pos:column="57"/></name></name><operator pos:line="40" pos:column="57">)<pos:position pos:line="40" pos:column="58"/></operator></expr>;<pos:position pos:line="40" pos:column="59"/></expr_stmt>

    <comment type="block" pos:line="42" pos:column="5">/*
     * Is keep-alive okay for all request methods?
     */</comment>
    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><name><name pos:line="45" pos:column="9">request<pos:position pos:line="45" pos:column="16"/></name><operator pos:line="45" pos:column="16">-&gt;<pos:position pos:line="45" pos:column="21"/></operator><name pos:line="45" pos:column="18">flags<pos:position pos:line="45" pos:column="23"/></name><operator pos:line="45" pos:column="23">.<pos:position pos:line="45" pos:column="24"/></operator><name pos:line="45" pos:column="24">mustKeepalive<pos:position pos:line="45" pos:column="37"/></name></name></expr>)<pos:position pos:line="45" pos:column="38"/></condition><then pos:line="45" pos:column="38">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="46" pos:column="9">flags<pos:position pos:line="46" pos:column="14"/></name><operator pos:line="46" pos:column="14">.<pos:position pos:line="46" pos:column="15"/></operator><name pos:line="46" pos:column="15">keepalive<pos:position pos:line="46" pos:column="24"/></name></name> <operator pos:line="46" pos:column="25">=<pos:position pos:line="46" pos:column="26"/></operator> <literal type="boolean" pos:line="46" pos:column="27">true<pos:position pos:line="46" pos:column="31"/></literal></expr>;<pos:position pos:line="46" pos:column="32"/></expr_stmt></block></then>
    <elseif pos:line="47" pos:column="5">else <if pos:line="47" pos:column="10">if <condition pos:line="47" pos:column="13">(<expr><name><name pos:line="47" pos:column="14">request<pos:position pos:line="47" pos:column="21"/></name><operator pos:line="47" pos:column="21">-&gt;<pos:position pos:line="47" pos:column="26"/></operator><name pos:line="47" pos:column="23">flags<pos:position pos:line="47" pos:column="28"/></name><operator pos:line="47" pos:column="28">.<pos:position pos:line="47" pos:column="29"/></operator><name pos:line="47" pos:column="29">pinned<pos:position pos:line="47" pos:column="35"/></name></name></expr>)<pos:position pos:line="47" pos:column="36"/></condition><then pos:line="47" pos:column="36">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="48" pos:column="9">flags<pos:position pos:line="48" pos:column="14"/></name><operator pos:line="48" pos:column="14">.<pos:position pos:line="48" pos:column="15"/></operator><name pos:line="48" pos:column="15">keepalive<pos:position pos:line="48" pos:column="24"/></name></name> <operator pos:line="48" pos:column="25">=<pos:position pos:line="48" pos:column="26"/></operator> <call><name><name pos:line="48" pos:column="27">request<pos:position pos:line="48" pos:column="34"/></name><operator pos:line="48" pos:column="34">-&gt;<pos:position pos:line="48" pos:column="39"/></operator><name pos:line="48" pos:column="36">persistent<pos:position pos:line="48" pos:column="46"/></name></name><argument_list pos:line="48" pos:column="46">()<pos:position pos:line="48" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="49"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="49" pos:column="5">else <if pos:line="49" pos:column="10">if <condition pos:line="49" pos:column="13">(<expr><operator pos:line="49" pos:column="14">!<pos:position pos:line="49" pos:column="15"/></operator><name><name pos:line="49" pos:column="15">Config<pos:position pos:line="49" pos:column="21"/></name><operator pos:line="49" pos:column="21">.<pos:position pos:line="49" pos:column="22"/></operator><name pos:line="49" pos:column="22">onoff<pos:position pos:line="49" pos:column="27"/></name><operator pos:line="49" pos:column="27">.<pos:position pos:line="49" pos:column="28"/></operator><name pos:line="49" pos:column="28">server_pconns<pos:position pos:line="49" pos:column="41"/></name></name></expr>)<pos:position pos:line="49" pos:column="42"/></condition><then pos:line="49" pos:column="42">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="50" pos:column="9">flags<pos:position pos:line="50" pos:column="14"/></name><operator pos:line="50" pos:column="14">.<pos:position pos:line="50" pos:column="15"/></operator><name pos:line="50" pos:column="15">keepalive<pos:position pos:line="50" pos:column="24"/></name></name> <operator pos:line="50" pos:column="25">=<pos:position pos:line="50" pos:column="26"/></operator> <literal type="boolean" pos:line="50" pos:column="27">false<pos:position pos:line="50" pos:column="32"/></literal></expr>;<pos:position pos:line="50" pos:column="33"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="51" pos:column="5">else <if pos:line="51" pos:column="10">if <condition pos:line="51" pos:column="13">(<expr><name pos:line="51" pos:column="14">_peer<pos:position pos:line="51" pos:column="19"/></name> <operator pos:line="51" pos:column="20">==<pos:position pos:line="51" pos:column="22"/></operator> <name pos:line="51" pos:column="23">NULL<pos:position pos:line="51" pos:column="27"/></name></expr>)<pos:position pos:line="51" pos:column="28"/></condition><then pos:line="51" pos:column="28">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="52" pos:column="9">flags<pos:position pos:line="52" pos:column="14"/></name><operator pos:line="52" pos:column="14">.<pos:position pos:line="52" pos:column="15"/></operator><name pos:line="52" pos:column="15">keepalive<pos:position pos:line="52" pos:column="24"/></name></name> <operator pos:line="52" pos:column="25">=<pos:position pos:line="52" pos:column="26"/></operator> <literal type="boolean" pos:line="52" pos:column="27">true<pos:position pos:line="52" pos:column="31"/></literal></expr>;<pos:position pos:line="52" pos:column="32"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="53" pos:column="5">else <if pos:line="53" pos:column="10">if <condition pos:line="53" pos:column="13">(<expr><name><name pos:line="53" pos:column="14">_peer<pos:position pos:line="53" pos:column="19"/></name><operator pos:line="53" pos:column="19">-&gt;<pos:position pos:line="53" pos:column="24"/></operator><name pos:line="53" pos:column="21">stats<pos:position pos:line="53" pos:column="26"/></name><operator pos:line="53" pos:column="26">.<pos:position pos:line="53" pos:column="27"/></operator><name pos:line="53" pos:column="27">n_keepalives_sent<pos:position pos:line="53" pos:column="44"/></name></name> <operator pos:line="53" pos:column="45">&lt;<pos:position pos:line="53" pos:column="49"/></operator> <literal type="number" pos:line="53" pos:column="47">10<pos:position pos:line="53" pos:column="49"/></literal></expr>)<pos:position pos:line="53" pos:column="50"/></condition><then pos:line="53" pos:column="50">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="54" pos:column="9">flags<pos:position pos:line="54" pos:column="14"/></name><operator pos:line="54" pos:column="14">.<pos:position pos:line="54" pos:column="15"/></operator><name pos:line="54" pos:column="15">keepalive<pos:position pos:line="54" pos:column="24"/></name></name> <operator pos:line="54" pos:column="25">=<pos:position pos:line="54" pos:column="26"/></operator> <literal type="boolean" pos:line="54" pos:column="27">true<pos:position pos:line="54" pos:column="31"/></literal></expr>;<pos:position pos:line="54" pos:column="32"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="55" pos:column="5">else <if pos:line="55" pos:column="10">if <condition pos:line="55" pos:column="13">(<expr><operator pos:line="55" pos:column="14">(<pos:position pos:line="55" pos:column="15"/></operator><name pos:line="55" pos:column="15">double<pos:position pos:line="55" pos:column="21"/></name><operator pos:line="55" pos:column="21">)<pos:position pos:line="55" pos:column="22"/></operator> <name><name pos:line="55" pos:column="23">_peer<pos:position pos:line="55" pos:column="28"/></name><operator pos:line="55" pos:column="28">-&gt;<pos:position pos:line="55" pos:column="33"/></operator><name pos:line="55" pos:column="30">stats<pos:position pos:line="55" pos:column="35"/></name><operator pos:line="55" pos:column="35">.<pos:position pos:line="55" pos:column="36"/></operator><name pos:line="55" pos:column="36">n_keepalives_recv<pos:position pos:line="55" pos:column="53"/></name></name> <operator pos:line="55" pos:column="54">/<pos:position pos:line="55" pos:column="55"/></operator>
             <operator pos:line="56" pos:column="14">(<pos:position pos:line="56" pos:column="15"/></operator><name pos:line="56" pos:column="15">double<pos:position pos:line="56" pos:column="21"/></name><operator pos:line="56" pos:column="21">)<pos:position pos:line="56" pos:column="22"/></operator> <name><name pos:line="56" pos:column="23">_peer<pos:position pos:line="56" pos:column="28"/></name><operator pos:line="56" pos:column="28">-&gt;<pos:position pos:line="56" pos:column="33"/></operator><name pos:line="56" pos:column="30">stats<pos:position pos:line="56" pos:column="35"/></name><operator pos:line="56" pos:column="35">.<pos:position pos:line="56" pos:column="36"/></operator><name pos:line="56" pos:column="36">n_keepalives_sent<pos:position pos:line="56" pos:column="53"/></name></name> <operator pos:line="56" pos:column="54">&gt;<pos:position pos:line="56" pos:column="58"/></operator> <literal type="number" pos:line="56" pos:column="56">0.50<pos:position pos:line="56" pos:column="60"/></literal></expr>)<pos:position pos:line="56" pos:column="61"/></condition><then pos:line="56" pos:column="61">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="57" pos:column="9">flags<pos:position pos:line="57" pos:column="14"/></name><operator pos:line="57" pos:column="14">.<pos:position pos:line="57" pos:column="15"/></operator><name pos:line="57" pos:column="15">keepalive<pos:position pos:line="57" pos:column="24"/></name></name> <operator pos:line="57" pos:column="25">=<pos:position pos:line="57" pos:column="26"/></operator> <literal type="boolean" pos:line="57" pos:column="27">true<pos:position pos:line="57" pos:column="31"/></literal></expr>;<pos:position pos:line="57" pos:column="32"/></expr_stmt></block></then></if></elseif></if>

    <if pos:line="59" pos:column="5">if <condition pos:line="59" pos:column="8">(<expr><name pos:line="59" pos:column="9">_peer<pos:position pos:line="59" pos:column="14"/></name></expr>)<pos:position pos:line="59" pos:column="15"/></condition><then pos:line="59" pos:column="15"> <block pos:line="59" pos:column="16">{
        <comment type="block" pos:line="60" pos:column="9">/*The old code here was
          if (neighborType(_peer, request) == PEER_SIBLING &amp;&amp; ...
          which is equivalent to:
          if (neighborType(_peer, NULL) == PEER_SIBLING &amp;&amp; ...
          or better:
          if (((_peer-&gt;type == PEER_MULTICAST &amp;&amp; p-&gt;options.mcast_siblings) ||
                 _peer-&gt;type == PEER_SIBLINGS ) &amp;&amp; _peer-&gt;options.allow_miss)
               flags.only_if_cached = 1;

           But I suppose it was a bug
         */</comment>
        <if pos:line="71" pos:column="9">if <condition pos:line="71" pos:column="12">(<expr><call><name pos:line="71" pos:column="13">neighborType<pos:position pos:line="71" pos:column="25"/></name><argument_list pos:line="71" pos:column="25">(<argument><expr><name pos:line="71" pos:column="26">_peer<pos:position pos:line="71" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="33">request<pos:position pos:line="71" pos:column="40"/></name></expr></argument>)<pos:position pos:line="71" pos:column="41"/></argument_list></call> <operator pos:line="71" pos:column="42">==<pos:position pos:line="71" pos:column="44"/></operator> <name pos:line="71" pos:column="45">PEER_SIBLING<pos:position pos:line="71" pos:column="57"/></name> <operator pos:line="71" pos:column="58">&amp;&amp;<pos:position pos:line="71" pos:column="68"/></operator>
                <operator pos:line="72" pos:column="17">!<pos:position pos:line="72" pos:column="18"/></operator><name><name pos:line="72" pos:column="18">_peer<pos:position pos:line="72" pos:column="23"/></name><operator pos:line="72" pos:column="23">-&gt;<pos:position pos:line="72" pos:column="28"/></operator><name pos:line="72" pos:column="25">options<pos:position pos:line="72" pos:column="32"/></name><operator pos:line="72" pos:column="32">.<pos:position pos:line="72" pos:column="33"/></operator><name pos:line="72" pos:column="33">allow_miss<pos:position pos:line="72" pos:column="43"/></name></name></expr>)<pos:position pos:line="72" pos:column="44"/></condition><then pos:line="72" pos:column="44">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="73" pos:column="13">flags<pos:position pos:line="73" pos:column="18"/></name><operator pos:line="73" pos:column="18">.<pos:position pos:line="73" pos:column="19"/></operator><name pos:line="73" pos:column="19">only_if_cached<pos:position pos:line="73" pos:column="33"/></name></name> <operator pos:line="73" pos:column="34">=<pos:position pos:line="73" pos:column="35"/></operator> <literal type="boolean" pos:line="73" pos:column="36">true<pos:position pos:line="73" pos:column="40"/></literal></expr>;<pos:position pos:line="73" pos:column="41"/></expr_stmt></block></then></if>

        <expr_stmt><expr><name><name pos:line="75" pos:column="9">flags<pos:position pos:line="75" pos:column="14"/></name><operator pos:line="75" pos:column="14">.<pos:position pos:line="75" pos:column="15"/></operator><name pos:line="75" pos:column="15">front_end_https<pos:position pos:line="75" pos:column="30"/></name></name> <operator pos:line="75" pos:column="31">=<pos:position pos:line="75" pos:column="32"/></operator> <name><name pos:line="75" pos:column="33">_peer<pos:position pos:line="75" pos:column="38"/></name><operator pos:line="75" pos:column="38">-&gt;<pos:position pos:line="75" pos:column="43"/></operator><name pos:line="75" pos:column="40">front_end_https<pos:position pos:line="75" pos:column="55"/></name></name></expr>;<pos:position pos:line="75" pos:column="56"/></expr_stmt>
    }<pos:position pos:line="76" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="78" pos:column="5">mb<pos:position pos:line="78" pos:column="7"/></name><operator pos:line="78" pos:column="7">.<pos:position pos:line="78" pos:column="8"/></operator><name pos:line="78" pos:column="8">init<pos:position pos:line="78" pos:column="12"/></name></name><argument_list pos:line="78" pos:column="12">()<pos:position pos:line="78" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="79" pos:column="5">request<pos:position pos:line="79" pos:column="12"/></name><operator pos:line="79" pos:column="12">-&gt;<pos:position pos:line="79" pos:column="17"/></operator><name pos:line="79" pos:column="14">peer_host<pos:position pos:line="79" pos:column="23"/></name></name><operator pos:line="79" pos:column="23">=<pos:position pos:line="79" pos:column="24"/></operator><ternary><condition><expr><name pos:line="79" pos:column="24">_peer<pos:position pos:line="79" pos:column="29"/></name></expr>?<pos:position pos:line="79" pos:column="30"/></condition><then><expr><name><name pos:line="79" pos:column="30">_peer<pos:position pos:line="79" pos:column="35"/></name><operator pos:line="79" pos:column="35">-&gt;<pos:position pos:line="79" pos:column="40"/></operator><name pos:line="79" pos:column="37">host<pos:position pos:line="79" pos:column="41"/></name></name></expr></then><else pos:line="79" pos:column="41">:<expr><name pos:line="79" pos:column="42">NULL<pos:position pos:line="79" pos:column="46"/></name></expr></else></ternary></expr>;<pos:position pos:line="79" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="80" pos:column="5">buildRequestPrefix<pos:position pos:line="80" pos:column="23"/></name><argument_list pos:line="80" pos:column="23">(<argument><expr><operator pos:line="80" pos:column="24">&amp;<pos:position pos:line="80" pos:column="29"/></operator><name pos:line="80" pos:column="25">mb<pos:position pos:line="80" pos:column="27"/></name></expr></argument>)<pos:position pos:line="80" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="29"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="82" pos:column="5">debugs<pos:position pos:line="82" pos:column="11"/></name><argument_list pos:line="82" pos:column="11">(<argument><expr><literal type="number" pos:line="82" pos:column="12">11<pos:position pos:line="82" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="82" pos:column="16">2<pos:position pos:line="82" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="82" pos:column="19">"HTTP Server "<pos:position pos:line="82" pos:column="33"/></literal> <operator pos:line="82" pos:column="34">&lt;&lt;<pos:position pos:line="82" pos:column="42"/></operator> <name pos:line="82" pos:column="37">serverConnection<pos:position pos:line="82" pos:column="53"/></name></expr></argument>)<pos:position pos:line="82" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="83" pos:column="5">debugs<pos:position pos:line="83" pos:column="11"/></name><argument_list pos:line="83" pos:column="11">(<argument><expr><literal type="number" pos:line="83" pos:column="12">11<pos:position pos:line="83" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="83" pos:column="16">2<pos:position pos:line="83" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="83" pos:column="19">"HTTP Server REQUEST:\n---------\n"<pos:position pos:line="83" pos:column="54"/></literal> <operator pos:line="83" pos:column="55">&lt;&lt;<pos:position pos:line="83" pos:column="63"/></operator> <name><name pos:line="83" pos:column="58">mb<pos:position pos:line="83" pos:column="60"/></name><operator pos:line="83" pos:column="60">.<pos:position pos:line="83" pos:column="61"/></operator><name pos:line="83" pos:column="61">buf<pos:position pos:line="83" pos:column="64"/></name></name> <operator pos:line="83" pos:column="65">&lt;&lt;<pos:position pos:line="83" pos:column="73"/></operator> <literal type="string" pos:line="83" pos:column="68">"\n----------"<pos:position pos:line="83" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="84"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="85" pos:column="5">Comm<pos:position pos:line="85" pos:column="9"/></name><operator pos:line="85" pos:column="9">::<pos:position pos:line="85" pos:column="11"/></operator><name pos:line="85" pos:column="11">Write<pos:position pos:line="85" pos:column="16"/></name></name><argument_list pos:line="85" pos:column="16">(<argument><expr><name pos:line="85" pos:column="17">serverConnection<pos:position pos:line="85" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="85" pos:column="35">&amp;<pos:position pos:line="85" pos:column="40"/></operator><name pos:line="85" pos:column="36">mb<pos:position pos:line="85" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="40">requestSender<pos:position pos:line="85" pos:column="53"/></name></expr></argument>)<pos:position pos:line="85" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="55"/></expr_stmt>
    <return pos:line="86" pos:column="5">return <expr><literal type="boolean" pos:line="86" pos:column="12">true<pos:position pos:line="86" pos:column="16"/></literal></expr>;<pos:position pos:line="86" pos:column="17"/></return>
}<pos:position pos:line="87" pos:column="2"/></block></function></unit>
