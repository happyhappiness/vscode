<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4386_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Ssl<pos:position pos:line="1" pos:column="9"/></name><operator pos:line="1" pos:column="9">::<pos:position pos:line="1" pos:column="11"/></operator><name pos:line="1" pos:column="11">certificateMatchesProperties<pos:position pos:line="1" pos:column="39"/></name></name><parameter_list pos:line="1" pos:column="39">(<parameter><decl><type><name pos:line="1" pos:column="40">X509<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">cert<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">CertificateProperties<pos:position pos:line="1" pos:column="73"/></name> <specifier pos:line="1" pos:column="74">const<pos:position pos:line="1" pos:column="79"/></specifier> <modifier pos:line="1" pos:column="80">&amp;<pos:position pos:line="1" pos:column="85"/></modifier></type><name pos:line="1" pos:column="81">properties<pos:position pos:line="1" pos:column="91"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="92"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="3" pos:column="5">assert<pos:position pos:line="3" pos:column="11"/></name><argument_list pos:line="3" pos:column="11">(<argument><expr><name pos:line="3" pos:column="12">cert<pos:position pos:line="3" pos:column="16"/></name></expr></argument>)<pos:position pos:line="3" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="18"/></expr_stmt>

    <comment type="line" pos:line="5" pos:column="5">// For non self-signed certificates we have to check if the signing certificate changed</comment>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name><name pos:line="6" pos:column="9">properties<pos:position pos:line="6" pos:column="19"/></name><operator pos:line="6" pos:column="19">.<pos:position pos:line="6" pos:column="20"/></operator><name pos:line="6" pos:column="20">signAlgorithm<pos:position pos:line="6" pos:column="33"/></name></name> <operator pos:line="6" pos:column="34">!=<pos:position pos:line="6" pos:column="36"/></operator> <name><name pos:line="6" pos:column="37">Ssl<pos:position pos:line="6" pos:column="40"/></name><operator pos:line="6" pos:column="40">::<pos:position pos:line="6" pos:column="42"/></operator><name pos:line="6" pos:column="42">algSignSelf<pos:position pos:line="6" pos:column="53"/></name></name></expr>)<pos:position pos:line="6" pos:column="54"/></condition><then pos:line="6" pos:column="54"> <block pos:line="6" pos:column="55">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">assert<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><call><name><name pos:line="7" pos:column="16">properties<pos:position pos:line="7" pos:column="26"/></name><operator pos:line="7" pos:column="26">.<pos:position pos:line="7" pos:column="27"/></operator><name pos:line="7" pos:column="27">signWithX509<pos:position pos:line="7" pos:column="39"/></name><operator pos:line="7" pos:column="39">.<pos:position pos:line="7" pos:column="40"/></operator><name pos:line="7" pos:column="40">get<pos:position pos:line="7" pos:column="43"/></name></name><argument_list pos:line="7" pos:column="43">()<pos:position pos:line="7" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="47"/></expr_stmt>
        <if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><call><name pos:line="8" pos:column="13">X509_check_issued<pos:position pos:line="8" pos:column="30"/></name><argument_list pos:line="8" pos:column="30">(<argument><expr><call><name><name pos:line="8" pos:column="31">properties<pos:position pos:line="8" pos:column="41"/></name><operator pos:line="8" pos:column="41">.<pos:position pos:line="8" pos:column="42"/></operator><name pos:line="8" pos:column="42">signWithX509<pos:position pos:line="8" pos:column="54"/></name><operator pos:line="8" pos:column="54">.<pos:position pos:line="8" pos:column="55"/></operator><name pos:line="8" pos:column="55">get<pos:position pos:line="8" pos:column="58"/></name></name><argument_list pos:line="8" pos:column="58">()<pos:position pos:line="8" pos:column="60"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="8" pos:column="62">cert<pos:position pos:line="8" pos:column="66"/></name></expr></argument>)<pos:position pos:line="8" pos:column="67"/></argument_list></call> <operator pos:line="8" pos:column="68">!=<pos:position pos:line="8" pos:column="70"/></operator> <name pos:line="8" pos:column="71">X509_V_OK<pos:position pos:line="8" pos:column="80"/></name></expr>)<pos:position pos:line="8" pos:column="81"/></condition><then pos:line="8" pos:column="81">
            <block type="pseudo"><return pos:line="9" pos:column="13">return <expr><literal type="boolean" pos:line="9" pos:column="20">false<pos:position pos:line="9" pos:column="25"/></literal></expr>;<pos:position pos:line="9" pos:column="26"/></return></block></then></if>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="12" pos:column="5">X509<pos:position pos:line="12" pos:column="9"/></name> <modifier pos:line="12" pos:column="10">*<pos:position pos:line="12" pos:column="11"/></modifier></type><name pos:line="12" pos:column="11">cert2<pos:position pos:line="12" pos:column="16"/></name> <init pos:line="12" pos:column="17">= <expr><call><name><name pos:line="12" pos:column="19">properties<pos:position pos:line="12" pos:column="29"/></name><operator pos:line="12" pos:column="29">.<pos:position pos:line="12" pos:column="30"/></operator><name pos:line="12" pos:column="30">mimicCert<pos:position pos:line="12" pos:column="39"/></name><operator pos:line="12" pos:column="39">.<pos:position pos:line="12" pos:column="40"/></operator><name pos:line="12" pos:column="40">get<pos:position pos:line="12" pos:column="43"/></name></name><argument_list pos:line="12" pos:column="43">()<pos:position pos:line="12" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="46"/></decl_stmt>
    <comment type="line" pos:line="13" pos:column="5">// If there is not certificate to mimic stop here</comment>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><operator pos:line="14" pos:column="9">!<pos:position pos:line="14" pos:column="10"/></operator><name pos:line="14" pos:column="10">cert2<pos:position pos:line="14" pos:column="15"/></name></expr>)<pos:position pos:line="14" pos:column="16"/></condition><then pos:line="14" pos:column="16">
        <block type="pseudo"><return pos:line="15" pos:column="9">return <expr><literal type="boolean" pos:line="15" pos:column="16">true<pos:position pos:line="15" pos:column="20"/></literal></expr>;<pos:position pos:line="15" pos:column="21"/></return></block></then></if>

    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><operator pos:line="17" pos:column="9">!<pos:position pos:line="17" pos:column="10"/></operator><name><name pos:line="17" pos:column="10">properties<pos:position pos:line="17" pos:column="20"/></name><operator pos:line="17" pos:column="20">.<pos:position pos:line="17" pos:column="21"/></operator><name pos:line="17" pos:column="21">setCommonName<pos:position pos:line="17" pos:column="34"/></name></name></expr>)<pos:position pos:line="17" pos:column="35"/></condition><then pos:line="17" pos:column="35"> <block pos:line="17" pos:column="36">{
        <decl_stmt><decl><type><name pos:line="18" pos:column="9">X509_NAME<pos:position pos:line="18" pos:column="18"/></name> <modifier pos:line="18" pos:column="19">*<pos:position pos:line="18" pos:column="20"/></modifier></type><name pos:line="18" pos:column="20">cert1_name<pos:position pos:line="18" pos:column="30"/></name> <init pos:line="18" pos:column="31">= <expr><call><name pos:line="18" pos:column="33">X509_get_subject_name<pos:position pos:line="18" pos:column="54"/></name><argument_list pos:line="18" pos:column="54">(<argument><expr><name pos:line="18" pos:column="55">cert<pos:position pos:line="18" pos:column="59"/></name></expr></argument>)<pos:position pos:line="18" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="18" pos:column="61"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="19" pos:column="9">X509_NAME<pos:position pos:line="19" pos:column="18"/></name> <modifier pos:line="19" pos:column="19">*<pos:position pos:line="19" pos:column="20"/></modifier></type><name pos:line="19" pos:column="20">cert2_name<pos:position pos:line="19" pos:column="30"/></name> <init pos:line="19" pos:column="31">= <expr><call><name pos:line="19" pos:column="33">X509_get_subject_name<pos:position pos:line="19" pos:column="54"/></name><argument_list pos:line="19" pos:column="54">(<argument><expr><name pos:line="19" pos:column="55">cert2<pos:position pos:line="19" pos:column="60"/></name></expr></argument>)<pos:position pos:line="19" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="19" pos:column="62"/></decl_stmt>
        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><call><name pos:line="20" pos:column="13">X509_NAME_cmp<pos:position pos:line="20" pos:column="26"/></name><argument_list pos:line="20" pos:column="26">(<argument><expr><name pos:line="20" pos:column="27">cert1_name<pos:position pos:line="20" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="39">cert2_name<pos:position pos:line="20" pos:column="49"/></name></expr></argument>)<pos:position pos:line="20" pos:column="50"/></argument_list></call> <operator pos:line="20" pos:column="51">!=<pos:position pos:line="20" pos:column="53"/></operator> <literal type="number" pos:line="20" pos:column="54">0<pos:position pos:line="20" pos:column="55"/></literal></expr>)<pos:position pos:line="20" pos:column="56"/></condition><then pos:line="20" pos:column="56">
            <block type="pseudo"><return pos:line="21" pos:column="13">return <expr><literal type="boolean" pos:line="21" pos:column="20">false<pos:position pos:line="21" pos:column="25"/></literal></expr>;<pos:position pos:line="21" pos:column="26"/></return></block></then></if>
    }<pos:position pos:line="22" pos:column="6"/></block></then> <elseif pos:line="22" pos:column="7">else <if pos:line="22" pos:column="12">if <condition pos:line="22" pos:column="15">(<expr><name><name pos:line="22" pos:column="16">properties<pos:position pos:line="22" pos:column="26"/></name><operator pos:line="22" pos:column="26">.<pos:position pos:line="22" pos:column="27"/></operator><name pos:line="22" pos:column="27">commonName<pos:position pos:line="22" pos:column="37"/></name></name> <operator pos:line="22" pos:column="38">!=<pos:position pos:line="22" pos:column="40"/></operator> <call><name pos:line="22" pos:column="41">CommonHostName<pos:position pos:line="22" pos:column="55"/></name><argument_list pos:line="22" pos:column="55">(<argument><expr><name pos:line="22" pos:column="56">cert<pos:position pos:line="22" pos:column="60"/></name></expr></argument>)<pos:position pos:line="22" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="62"/></condition><then pos:line="22" pos:column="62">
        <block type="pseudo"><return pos:line="23" pos:column="9">return <expr><literal type="boolean" pos:line="23" pos:column="16">false<pos:position pos:line="23" pos:column="21"/></literal></expr>;<pos:position pos:line="23" pos:column="22"/></return></block></then></if></elseif></if>

    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><operator pos:line="25" pos:column="9">!<pos:position pos:line="25" pos:column="10"/></operator><name><name pos:line="25" pos:column="10">properties<pos:position pos:line="25" pos:column="20"/></name><operator pos:line="25" pos:column="20">.<pos:position pos:line="25" pos:column="21"/></operator><name pos:line="25" pos:column="21">setValidBefore<pos:position pos:line="25" pos:column="35"/></name></name></expr>)<pos:position pos:line="25" pos:column="36"/></condition><then pos:line="25" pos:column="36"> <block pos:line="25" pos:column="37">{
        <decl_stmt><decl><type><name pos:line="26" pos:column="9">ASN1_TIME<pos:position pos:line="26" pos:column="18"/></name> <modifier pos:line="26" pos:column="19">*<pos:position pos:line="26" pos:column="20"/></modifier></type><name pos:line="26" pos:column="20">aTime<pos:position pos:line="26" pos:column="25"/></name> <init pos:line="26" pos:column="26">= <expr><call><name pos:line="26" pos:column="28">X509_get_notBefore<pos:position pos:line="26" pos:column="46"/></name><argument_list pos:line="26" pos:column="46">(<argument><expr><name pos:line="26" pos:column="47">cert<pos:position pos:line="26" pos:column="51"/></name></expr></argument>)<pos:position pos:line="26" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="26" pos:column="53"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="27" pos:column="9">ASN1_TIME<pos:position pos:line="27" pos:column="18"/></name> <modifier pos:line="27" pos:column="19">*<pos:position pos:line="27" pos:column="20"/></modifier></type><name pos:line="27" pos:column="20">bTime<pos:position pos:line="27" pos:column="25"/></name> <init pos:line="27" pos:column="26">= <expr><call><name pos:line="27" pos:column="28">X509_get_notBefore<pos:position pos:line="27" pos:column="46"/></name><argument_list pos:line="27" pos:column="46">(<argument><expr><name pos:line="27" pos:column="47">cert2<pos:position pos:line="27" pos:column="52"/></name></expr></argument>)<pos:position pos:line="27" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="27" pos:column="54"/></decl_stmt>
        <if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><call><name pos:line="28" pos:column="13">asn1time_cmp<pos:position pos:line="28" pos:column="25"/></name><argument_list pos:line="28" pos:column="25">(<argument><expr><name pos:line="28" pos:column="26">aTime<pos:position pos:line="28" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="33">bTime<pos:position pos:line="28" pos:column="38"/></name></expr></argument>)<pos:position pos:line="28" pos:column="39"/></argument_list></call> <operator pos:line="28" pos:column="40">!=<pos:position pos:line="28" pos:column="42"/></operator> <literal type="number" pos:line="28" pos:column="43">0<pos:position pos:line="28" pos:column="44"/></literal></expr>)<pos:position pos:line="28" pos:column="45"/></condition><then pos:line="28" pos:column="45">
            <block type="pseudo"><return pos:line="29" pos:column="13">return <expr><literal type="boolean" pos:line="29" pos:column="20">false<pos:position pos:line="29" pos:column="25"/></literal></expr>;<pos:position pos:line="29" pos:column="26"/></return></block></then></if>
    }<pos:position pos:line="30" pos:column="6"/></block></then> <elseif pos:line="30" pos:column="7">else <if pos:line="30" pos:column="12">if <condition pos:line="30" pos:column="15">(<expr><call><name pos:line="30" pos:column="16">X509_cmp_current_time<pos:position pos:line="30" pos:column="37"/></name><argument_list pos:line="30" pos:column="37">(<argument><expr><call><name pos:line="30" pos:column="38">X509_get_notBefore<pos:position pos:line="30" pos:column="56"/></name><argument_list pos:line="30" pos:column="56">(<argument><expr><name pos:line="30" pos:column="57">cert<pos:position pos:line="30" pos:column="61"/></name></expr></argument>)<pos:position pos:line="30" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="63"/></argument_list></call> <operator pos:line="30" pos:column="64">&gt;=<pos:position pos:line="30" pos:column="69"/></operator> <literal type="number" pos:line="30" pos:column="67">0<pos:position pos:line="30" pos:column="68"/></literal></expr>)<pos:position pos:line="30" pos:column="69"/></condition><then pos:line="30" pos:column="69"> <block pos:line="30" pos:column="70">{
        <comment type="line" pos:line="31" pos:column="9">// notBefore does not exist (=0) or it is in the future (&gt;0)</comment>
        <return pos:line="32" pos:column="9">return <expr><literal type="boolean" pos:line="32" pos:column="16">false<pos:position pos:line="32" pos:column="21"/></literal></expr>;<pos:position pos:line="32" pos:column="22"/></return>
    }<pos:position pos:line="33" pos:column="6"/></block></then></if></elseif></if>

    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><operator pos:line="35" pos:column="9">!<pos:position pos:line="35" pos:column="10"/></operator><name><name pos:line="35" pos:column="10">properties<pos:position pos:line="35" pos:column="20"/></name><operator pos:line="35" pos:column="20">.<pos:position pos:line="35" pos:column="21"/></operator><name pos:line="35" pos:column="21">setValidAfter<pos:position pos:line="35" pos:column="34"/></name></name></expr>)<pos:position pos:line="35" pos:column="35"/></condition><then pos:line="35" pos:column="35"> <block pos:line="35" pos:column="36">{
        <decl_stmt><decl><type><name pos:line="36" pos:column="9">ASN1_TIME<pos:position pos:line="36" pos:column="18"/></name> <modifier pos:line="36" pos:column="19">*<pos:position pos:line="36" pos:column="20"/></modifier></type><name pos:line="36" pos:column="20">aTime<pos:position pos:line="36" pos:column="25"/></name> <init pos:line="36" pos:column="26">= <expr><call><name pos:line="36" pos:column="28">X509_get_notAfter<pos:position pos:line="36" pos:column="45"/></name><argument_list pos:line="36" pos:column="45">(<argument><expr><name pos:line="36" pos:column="46">cert<pos:position pos:line="36" pos:column="50"/></name></expr></argument>)<pos:position pos:line="36" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="36" pos:column="52"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="37" pos:column="9">ASN1_TIME<pos:position pos:line="37" pos:column="18"/></name> <modifier pos:line="37" pos:column="19">*<pos:position pos:line="37" pos:column="20"/></modifier></type><name pos:line="37" pos:column="20">bTime<pos:position pos:line="37" pos:column="25"/></name> <init pos:line="37" pos:column="26">= <expr><call><name pos:line="37" pos:column="28">X509_get_notAfter<pos:position pos:line="37" pos:column="45"/></name><argument_list pos:line="37" pos:column="45">(<argument><expr><name pos:line="37" pos:column="46">cert2<pos:position pos:line="37" pos:column="51"/></name></expr></argument>)<pos:position pos:line="37" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="37" pos:column="53"/></decl_stmt>
        <if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><call><name pos:line="38" pos:column="13">asn1time_cmp<pos:position pos:line="38" pos:column="25"/></name><argument_list pos:line="38" pos:column="25">(<argument><expr><name pos:line="38" pos:column="26">aTime<pos:position pos:line="38" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="33">bTime<pos:position pos:line="38" pos:column="38"/></name></expr></argument>)<pos:position pos:line="38" pos:column="39"/></argument_list></call> <operator pos:line="38" pos:column="40">!=<pos:position pos:line="38" pos:column="42"/></operator> <literal type="number" pos:line="38" pos:column="43">0<pos:position pos:line="38" pos:column="44"/></literal></expr>)<pos:position pos:line="38" pos:column="45"/></condition><then pos:line="38" pos:column="45">
            <block type="pseudo"><return pos:line="39" pos:column="13">return <expr><literal type="boolean" pos:line="39" pos:column="20">false<pos:position pos:line="39" pos:column="25"/></literal></expr>;<pos:position pos:line="39" pos:column="26"/></return></block></then></if>
    }<pos:position pos:line="40" pos:column="6"/></block></then> <elseif pos:line="40" pos:column="7">else <if pos:line="40" pos:column="12">if <condition pos:line="40" pos:column="15">(<expr><call><name pos:line="40" pos:column="16">X509_cmp_current_time<pos:position pos:line="40" pos:column="37"/></name><argument_list pos:line="40" pos:column="37">(<argument><expr><call><name pos:line="40" pos:column="38">X509_get_notAfter<pos:position pos:line="40" pos:column="55"/></name><argument_list pos:line="40" pos:column="55">(<argument><expr><name pos:line="40" pos:column="56">cert<pos:position pos:line="40" pos:column="60"/></name></expr></argument>)<pos:position pos:line="40" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="40" pos:column="62"/></argument_list></call> <operator pos:line="40" pos:column="63">&lt;=<pos:position pos:line="40" pos:column="68"/></operator> <literal type="number" pos:line="40" pos:column="66">0<pos:position pos:line="40" pos:column="67"/></literal></expr>)<pos:position pos:line="40" pos:column="68"/></condition><then pos:line="40" pos:column="68"> <block pos:line="40" pos:column="69">{
        <comment type="line" pos:line="41" pos:column="9">// notAfter does not exist (0) or  it is in the past (&lt;0)</comment>
        <return pos:line="42" pos:column="9">return <expr><literal type="boolean" pos:line="42" pos:column="16">false<pos:position pos:line="42" pos:column="21"/></literal></expr>;<pos:position pos:line="42" pos:column="22"/></return>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if></elseif></if>

    <decl_stmt><decl><type><name pos:line="45" pos:column="5">char<pos:position pos:line="45" pos:column="9"/></name> <modifier pos:line="45" pos:column="10">*<pos:position pos:line="45" pos:column="11"/></modifier></type><name pos:line="45" pos:column="11">alStr1<pos:position pos:line="45" pos:column="17"/></name></decl>;<pos:position pos:line="45" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="46" pos:column="5">int<pos:position pos:line="46" pos:column="8"/></name></type> <name pos:line="46" pos:column="9">alLen<pos:position pos:line="46" pos:column="14"/></name></decl>;<pos:position pos:line="46" pos:column="15"/></decl_stmt>
    <expr_stmt><expr><name pos:line="47" pos:column="5">alStr1<pos:position pos:line="47" pos:column="11"/></name> <operator pos:line="47" pos:column="12">=<pos:position pos:line="47" pos:column="13"/></operator> <operator pos:line="47" pos:column="14">(<pos:position pos:line="47" pos:column="15"/></operator><name pos:line="47" pos:column="15">char<pos:position pos:line="47" pos:column="19"/></name> <operator pos:line="47" pos:column="20">*<pos:position pos:line="47" pos:column="21"/></operator><operator pos:line="47" pos:column="21">)<pos:position pos:line="47" pos:column="22"/></operator><call><name pos:line="47" pos:column="22">X509_alias_get0<pos:position pos:line="47" pos:column="37"/></name><argument_list pos:line="47" pos:column="37">(<argument><expr><name pos:line="47" pos:column="38">cert<pos:position pos:line="47" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="44">&amp;<pos:position pos:line="47" pos:column="49"/></operator><name pos:line="47" pos:column="45">alLen<pos:position pos:line="47" pos:column="50"/></name></expr></argument>)<pos:position pos:line="47" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="52"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="48" pos:column="5">char<pos:position pos:line="48" pos:column="9"/></name> <modifier pos:line="48" pos:column="10">*<pos:position pos:line="48" pos:column="11"/></modifier></type><name pos:line="48" pos:column="11">alStr2<pos:position pos:line="48" pos:column="17"/></name>  <init pos:line="48" pos:column="19">= <expr><operator pos:line="48" pos:column="21">(<pos:position pos:line="48" pos:column="22"/></operator><name pos:line="48" pos:column="22">char<pos:position pos:line="48" pos:column="26"/></name> <operator pos:line="48" pos:column="27">*<pos:position pos:line="48" pos:column="28"/></operator><operator pos:line="48" pos:column="28">)<pos:position pos:line="48" pos:column="29"/></operator><call><name pos:line="48" pos:column="29">X509_alias_get0<pos:position pos:line="48" pos:column="44"/></name><argument_list pos:line="48" pos:column="44">(<argument><expr><name pos:line="48" pos:column="45">cert2<pos:position pos:line="48" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="52">&amp;<pos:position pos:line="48" pos:column="57"/></operator><name pos:line="48" pos:column="53">alLen<pos:position pos:line="48" pos:column="58"/></name></expr></argument>)<pos:position pos:line="48" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="48" pos:column="60"/></decl_stmt>
    <if pos:line="49" pos:column="5">if <condition pos:line="49" pos:column="8">(<expr><operator pos:line="49" pos:column="9">(<pos:position pos:line="49" pos:column="10"/></operator><operator pos:line="49" pos:column="10">!<pos:position pos:line="49" pos:column="11"/></operator><name pos:line="49" pos:column="11">alStr1<pos:position pos:line="49" pos:column="17"/></name> <operator pos:line="49" pos:column="18">&amp;&amp;<pos:position pos:line="49" pos:column="28"/></operator> <name pos:line="49" pos:column="21">alStr2<pos:position pos:line="49" pos:column="27"/></name><operator pos:line="49" pos:column="27">)<pos:position pos:line="49" pos:column="28"/></operator> <operator pos:line="49" pos:column="29">||<pos:position pos:line="49" pos:column="31"/></operator> <operator pos:line="49" pos:column="32">(<pos:position pos:line="49" pos:column="33"/></operator><name pos:line="49" pos:column="33">alStr1<pos:position pos:line="49" pos:column="39"/></name> <operator pos:line="49" pos:column="40">&amp;&amp;<pos:position pos:line="49" pos:column="50"/></operator> <operator pos:line="49" pos:column="43">!<pos:position pos:line="49" pos:column="44"/></operator><name pos:line="49" pos:column="44">alStr2<pos:position pos:line="49" pos:column="50"/></name><operator pos:line="49" pos:column="50">)<pos:position pos:line="49" pos:column="51"/></operator> <operator pos:line="49" pos:column="52">||<pos:position pos:line="49" pos:column="54"/></operator>
            <operator pos:line="50" pos:column="13">(<pos:position pos:line="50" pos:column="14"/></operator><name pos:line="50" pos:column="14">alStr1<pos:position pos:line="50" pos:column="20"/></name> <operator pos:line="50" pos:column="21">&amp;&amp;<pos:position pos:line="50" pos:column="31"/></operator> <name pos:line="50" pos:column="24">alStr2<pos:position pos:line="50" pos:column="30"/></name> <operator pos:line="50" pos:column="31">&amp;&amp;<pos:position pos:line="50" pos:column="41"/></operator> <call><name pos:line="50" pos:column="34">strcmp<pos:position pos:line="50" pos:column="40"/></name><argument_list pos:line="50" pos:column="40">(<argument><expr><name pos:line="50" pos:column="41">alStr1<pos:position pos:line="50" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="49">alStr2<pos:position pos:line="50" pos:column="55"/></name></expr></argument>)<pos:position pos:line="50" pos:column="56"/></argument_list></call><operator pos:line="50" pos:column="56">)<pos:position pos:line="50" pos:column="57"/></operator> <operator pos:line="50" pos:column="58">!=<pos:position pos:line="50" pos:column="60"/></operator> <literal type="number" pos:line="50" pos:column="61">0<pos:position pos:line="50" pos:column="62"/></literal></expr>)<pos:position pos:line="50" pos:column="63"/></condition><then pos:line="50" pos:column="63">
        <block type="pseudo"><return pos:line="51" pos:column="9">return <expr><literal type="boolean" pos:line="51" pos:column="16">false<pos:position pos:line="51" pos:column="21"/></literal></expr>;<pos:position pos:line="51" pos:column="22"/></return></block></then></if>

    <comment type="line" pos:line="53" pos:column="5">// Compare subjectAltName extension</comment>
    <expr_stmt><expr><call><name pos:line="54" pos:column="5">STACK_OF<pos:position pos:line="54" pos:column="13"/></name><argument_list pos:line="54" pos:column="13">(<argument><expr><name pos:line="54" pos:column="14">GENERAL_NAME<pos:position pos:line="54" pos:column="26"/></name></expr></argument>)<pos:position pos:line="54" pos:column="27"/></argument_list></call> <operator pos:line="54" pos:column="28">*<pos:position pos:line="54" pos:column="29"/></operator> <name pos:line="54" pos:column="30">cert1_altnames<pos:position pos:line="54" pos:column="44"/></name></expr>;<pos:position pos:line="54" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><name pos:line="55" pos:column="5">cert1_altnames<pos:position pos:line="55" pos:column="19"/></name> <operator pos:line="55" pos:column="20">=<pos:position pos:line="55" pos:column="21"/></operator> <operator pos:line="55" pos:column="22">(<pos:position pos:line="55" pos:column="23"/></operator><call><name pos:line="55" pos:column="23">STACK_OF<pos:position pos:line="55" pos:column="31"/></name><argument_list pos:line="55" pos:column="31">(<argument><expr><name pos:line="55" pos:column="32">GENERAL_NAME<pos:position pos:line="55" pos:column="44"/></name></expr></argument>)<pos:position pos:line="55" pos:column="45"/></argument_list></call><operator pos:line="55" pos:column="45">*<pos:position pos:line="55" pos:column="46"/></operator><operator pos:line="55" pos:column="46">)<pos:position pos:line="55" pos:column="47"/></operator><call><name pos:line="55" pos:column="47">X509_get_ext_d2i<pos:position pos:line="55" pos:column="63"/></name><argument_list pos:line="55" pos:column="63">(<argument><expr><name pos:line="55" pos:column="64">cert<pos:position pos:line="55" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="70">NID_subject_alt_name<pos:position pos:line="55" pos:column="90"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="92">NULL<pos:position pos:line="55" pos:column="96"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="98">NULL<pos:position pos:line="55" pos:column="102"/></name></expr></argument>)<pos:position pos:line="55" pos:column="103"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="104"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="56" pos:column="5">STACK_OF<pos:position pos:line="56" pos:column="13"/></name><argument_list pos:line="56" pos:column="13">(<argument><expr><name pos:line="56" pos:column="14">GENERAL_NAME<pos:position pos:line="56" pos:column="26"/></name></expr></argument>)<pos:position pos:line="56" pos:column="27"/></argument_list></call> <operator pos:line="56" pos:column="28">*<pos:position pos:line="56" pos:column="29"/></operator> <name pos:line="56" pos:column="30">cert2_altnames<pos:position pos:line="56" pos:column="44"/></name></expr>;<pos:position pos:line="56" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><name pos:line="57" pos:column="5">cert2_altnames<pos:position pos:line="57" pos:column="19"/></name> <operator pos:line="57" pos:column="20">=<pos:position pos:line="57" pos:column="21"/></operator> <operator pos:line="57" pos:column="22">(<pos:position pos:line="57" pos:column="23"/></operator><call><name pos:line="57" pos:column="23">STACK_OF<pos:position pos:line="57" pos:column="31"/></name><argument_list pos:line="57" pos:column="31">(<argument><expr><name pos:line="57" pos:column="32">GENERAL_NAME<pos:position pos:line="57" pos:column="44"/></name></expr></argument>)<pos:position pos:line="57" pos:column="45"/></argument_list></call><operator pos:line="57" pos:column="45">*<pos:position pos:line="57" pos:column="46"/></operator><operator pos:line="57" pos:column="46">)<pos:position pos:line="57" pos:column="47"/></operator><call><name pos:line="57" pos:column="47">X509_get_ext_d2i<pos:position pos:line="57" pos:column="63"/></name><argument_list pos:line="57" pos:column="63">(<argument><expr><name pos:line="57" pos:column="64">cert2<pos:position pos:line="57" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="71">NID_subject_alt_name<pos:position pos:line="57" pos:column="91"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="93">NULL<pos:position pos:line="57" pos:column="97"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="99">NULL<pos:position pos:line="57" pos:column="103"/></name></expr></argument>)<pos:position pos:line="57" pos:column="104"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="105"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="58" pos:column="5">bool<pos:position pos:line="58" pos:column="9"/></name></type> <name pos:line="58" pos:column="10">match<pos:position pos:line="58" pos:column="15"/></name> <init pos:line="58" pos:column="16">= <expr><literal type="boolean" pos:line="58" pos:column="18">true<pos:position pos:line="58" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="58" pos:column="23"/></decl_stmt>
    <if pos:line="59" pos:column="5">if <condition pos:line="59" pos:column="8">(<expr><name pos:line="59" pos:column="9">cert1_altnames<pos:position pos:line="59" pos:column="23"/></name></expr>)<pos:position pos:line="59" pos:column="24"/></condition><then pos:line="59" pos:column="24"> <block pos:line="59" pos:column="25">{
        <decl_stmt><decl><type><name pos:line="60" pos:column="9">int<pos:position pos:line="60" pos:column="12"/></name></type> <name pos:line="60" pos:column="13">numalts<pos:position pos:line="60" pos:column="20"/></name> <init pos:line="60" pos:column="21">= <expr><call><name pos:line="60" pos:column="23">sk_GENERAL_NAME_num<pos:position pos:line="60" pos:column="42"/></name><argument_list pos:line="60" pos:column="42">(<argument><expr><name pos:line="60" pos:column="43">cert1_altnames<pos:position pos:line="60" pos:column="57"/></name></expr></argument>)<pos:position pos:line="60" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="60" pos:column="59"/></decl_stmt>
        <for pos:line="61" pos:column="9">for <control pos:line="61" pos:column="13">(<init><decl><type><name pos:line="61" pos:column="14">int<pos:position pos:line="61" pos:column="17"/></name></type> <name pos:line="61" pos:column="18">i<pos:position pos:line="61" pos:column="19"/></name> <init pos:line="61" pos:column="20">= <expr><literal type="number" pos:line="61" pos:column="22">0<pos:position pos:line="61" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="61" pos:column="24"/></init> <condition><expr><name pos:line="61" pos:column="25">match<pos:position pos:line="61" pos:column="30"/></name> <operator pos:line="61" pos:column="31">&amp;&amp;<pos:position pos:line="61" pos:column="41"/></operator> <name pos:line="61" pos:column="34">i<pos:position pos:line="61" pos:column="35"/></name> <operator pos:line="61" pos:column="36">&lt;<pos:position pos:line="61" pos:column="40"/></operator> <name pos:line="61" pos:column="38">numalts<pos:position pos:line="61" pos:column="45"/></name></expr>;<pos:position pos:line="61" pos:column="46"/></condition> <incr><expr><operator pos:line="61" pos:column="47">++<pos:position pos:line="61" pos:column="49"/></operator><name pos:line="61" pos:column="49">i<pos:position pos:line="61" pos:column="50"/></name></expr></incr>)<pos:position pos:line="61" pos:column="51"/></control> <block pos:line="61" pos:column="52">{
            <decl_stmt><decl><type><specifier pos:line="62" pos:column="13">const<pos:position pos:line="62" pos:column="18"/></specifier> <name pos:line="62" pos:column="19">GENERAL_NAME<pos:position pos:line="62" pos:column="31"/></name> <modifier pos:line="62" pos:column="32">*<pos:position pos:line="62" pos:column="33"/></modifier></type><name pos:line="62" pos:column="33">aName<pos:position pos:line="62" pos:column="38"/></name> <init pos:line="62" pos:column="39">= <expr><call><name pos:line="62" pos:column="41">sk_GENERAL_NAME_value<pos:position pos:line="62" pos:column="62"/></name><argument_list pos:line="62" pos:column="62">(<argument><expr><name pos:line="62" pos:column="63">cert1_altnames<pos:position pos:line="62" pos:column="77"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="79">i<pos:position pos:line="62" pos:column="80"/></name></expr></argument>)<pos:position pos:line="62" pos:column="81"/></argument_list></call></expr></init></decl>;<pos:position pos:line="62" pos:column="82"/></decl_stmt>
            <expr_stmt><expr><name pos:line="63" pos:column="13">match<pos:position pos:line="63" pos:column="18"/></name> <operator pos:line="63" pos:column="19">=<pos:position pos:line="63" pos:column="20"/></operator> <call><name pos:line="63" pos:column="21">sk_GENERAL_NAME_find<pos:position pos:line="63" pos:column="41"/></name><argument_list pos:line="63" pos:column="41">(<argument><expr><name pos:line="63" pos:column="42">cert2_altnames<pos:position pos:line="63" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="58">aName<pos:position pos:line="63" pos:column="63"/></name></expr></argument>)<pos:position pos:line="63" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="65"/></expr_stmt>
        }<pos:position pos:line="64" pos:column="10"/></block></for>
    }<pos:position pos:line="65" pos:column="6"/></block></then> <elseif pos:line="65" pos:column="7">else <if pos:line="65" pos:column="12">if <condition pos:line="65" pos:column="15">(<expr><name pos:line="65" pos:column="16">cert2_altnames<pos:position pos:line="65" pos:column="30"/></name></expr>)<pos:position pos:line="65" pos:column="31"/></condition><then pos:line="65" pos:column="31">
        <block type="pseudo"><expr_stmt><expr><name pos:line="66" pos:column="9">match<pos:position pos:line="66" pos:column="14"/></name> <operator pos:line="66" pos:column="15">=<pos:position pos:line="66" pos:column="16"/></operator> <literal type="boolean" pos:line="66" pos:column="17">false<pos:position pos:line="66" pos:column="22"/></literal></expr>;<pos:position pos:line="66" pos:column="23"/></expr_stmt></block></then></if></elseif></if>

    <expr_stmt><expr><call><name pos:line="68" pos:column="5">sk_GENERAL_NAME_pop_free<pos:position pos:line="68" pos:column="29"/></name><argument_list pos:line="68" pos:column="29">(<argument><expr><name pos:line="68" pos:column="30">cert1_altnames<pos:position pos:line="68" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="46">GENERAL_NAME_free<pos:position pos:line="68" pos:column="63"/></name></expr></argument>)<pos:position pos:line="68" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="65"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="69" pos:column="5">sk_GENERAL_NAME_pop_free<pos:position pos:line="69" pos:column="29"/></name><argument_list pos:line="69" pos:column="29">(<argument><expr><name pos:line="69" pos:column="30">cert2_altnames<pos:position pos:line="69" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="46">GENERAL_NAME_free<pos:position pos:line="69" pos:column="63"/></name></expr></argument>)<pos:position pos:line="69" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="65"/></expr_stmt>

    <return pos:line="71" pos:column="5">return <expr><name pos:line="71" pos:column="12">match<pos:position pos:line="71" pos:column="17"/></name></expr>;<pos:position pos:line="71" pos:column="18"/></return>
}<pos:position pos:line="72" pos:column="2"/></block></function></unit>
