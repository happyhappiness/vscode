<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4852_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">CossSwapDir<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">writeCompleted<pos:position pos:line="2" pos:column="28"/></name></name><parameter_list pos:line="2" pos:column="28">(<parameter><decl><type><name pos:line="2" pos:column="29">int<pos:position pos:line="2" pos:column="32"/></name></type> <name pos:line="2" pos:column="33">errflag<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="42">size_t<pos:position pos:line="2" pos:column="48"/></name></type> <name pos:line="2" pos:column="49">len<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="54">RefCount<pos:position pos:line="2" pos:column="62"/></name><argument_list type="generic" pos:line="2" pos:column="62">&lt;<argument><expr><name pos:line="2" pos:column="63">WriteRequest<pos:position pos:line="2" pos:column="75"/></name></expr></argument>&gt;<pos:position pos:line="2" pos:column="79"/></argument_list></name></type> <name pos:line="2" pos:column="77">writeRequest<pos:position pos:line="2" pos:column="89"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="90"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">CossWrite<pos:position pos:line="4" pos:column="14"/></name><modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type> <name pos:line="4" pos:column="16">cossWrite<pos:position pos:line="4" pos:column="25"/></name><init pos:line="4" pos:column="25">= <expr><cast type="dynamic" pos:line="4" pos:column="27">dynamic_cast<argument_list type="generic" pos:line="4" pos:column="39">&lt;<argument><expr><name pos:line="4" pos:column="40">CossWrite<pos:position pos:line="4" pos:column="49"/></name> <operator pos:line="4" pos:column="50">*<pos:position pos:line="4" pos:column="51"/></operator></expr></argument>&gt;<pos:position pos:line="4" pos:column="55"/></argument_list><argument_list pos:line="4" pos:column="52">(<argument><expr><call><name><name pos:line="4" pos:column="53">writeRequest<pos:position pos:line="4" pos:column="65"/></name><operator pos:line="4" pos:column="65">.<pos:position pos:line="4" pos:column="66"/></operator><name pos:line="4" pos:column="66">getRaw<pos:position pos:line="4" pos:column="72"/></name></name><argument_list pos:line="4" pos:column="72">()<pos:position pos:line="4" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="75"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="4" pos:column="76"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name> <argument_list pos:line="5" pos:column="12">(<argument><expr><name pos:line="5" pos:column="13">cossWrite<pos:position pos:line="5" pos:column="22"/></name></expr></argument>)<pos:position pos:line="5" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="24"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">debugs<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><literal type="number" pos:line="7" pos:column="12">79<pos:position pos:line="7" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="16">3<pos:position pos:line="7" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="19">"storeCossWriteMemBufDone: buf "<pos:position pos:line="7" pos:column="51"/></literal> <operator pos:line="7" pos:column="52">&lt;&lt;<pos:position pos:line="7" pos:column="60"/></operator> <name><name pos:line="7" pos:column="55">cossWrite<pos:position pos:line="7" pos:column="64"/></name><operator pos:line="7" pos:column="64">-&gt;<pos:position pos:line="7" pos:column="69"/></operator><name pos:line="7" pos:column="66">membuf<pos:position pos:line="7" pos:column="72"/></name></name> <operator pos:line="7" pos:column="73">&lt;&lt;<pos:position pos:line="7" pos:column="81"/></operator> <literal type="string" pos:line="7" pos:column="76">", len "<pos:position pos:line="7" pos:column="84"/></literal> <operator pos:line="7" pos:column="85">&lt;&lt;<pos:position pos:line="7" pos:column="93"/></operator> <name pos:line="7" pos:column="88">len<pos:position pos:line="7" pos:column="91"/></name></expr></argument>)<pos:position pos:line="7" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="93"/></expr_stmt>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">errflag<pos:position pos:line="9" pos:column="16"/></name></expr>)<pos:position pos:line="9" pos:column="17"/></condition><then pos:line="9" pos:column="17"> <block pos:line="9" pos:column="18">{
        <expr_stmt><expr><operator pos:line="10" pos:column="9">++<pos:position pos:line="10" pos:column="11"/></operator> <call><name><name pos:line="10" pos:column="12">StoreFScoss<pos:position pos:line="10" pos:column="23"/></name><operator pos:line="10" pos:column="23">::<pos:position pos:line="10" pos:column="25"/></operator><name pos:line="10" pos:column="25">GetInstance<pos:position pos:line="10" pos:column="36"/></name></name><argument_list pos:line="10" pos:column="36">()<pos:position pos:line="10" pos:column="38"/></argument_list></call><operator pos:line="10" pos:column="38">.<pos:position pos:line="10" pos:column="39"/></operator><name><name pos:line="10" pos:column="39">stats<pos:position pos:line="10" pos:column="44"/></name><operator pos:line="10" pos:column="44">.<pos:position pos:line="10" pos:column="45"/></operator><name pos:line="10" pos:column="45">stripe_write<pos:position pos:line="10" pos:column="57"/></name><operator pos:line="10" pos:column="57">.<pos:position pos:line="10" pos:column="58"/></operator><name pos:line="10" pos:column="58">fail<pos:position pos:line="10" pos:column="62"/></name></name></expr>;<pos:position pos:line="10" pos:column="63"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">debugs<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><literal type="number" pos:line="11" pos:column="16">79<pos:position pos:line="11" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="20">DBG_IMPORTANT<pos:position pos:line="11" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="35">"storeCossWriteMemBufDone: got failure ("<pos:position pos:line="11" pos:column="76"/></literal> <operator pos:line="11" pos:column="77">&lt;&lt;<pos:position pos:line="11" pos:column="85"/></operator> <name pos:line="11" pos:column="80">errflag<pos:position pos:line="11" pos:column="87"/></name> <operator pos:line="11" pos:column="88">&lt;&lt;<pos:position pos:line="11" pos:column="96"/></operator> <literal type="string" pos:line="11" pos:column="91">")"<pos:position pos:line="11" pos:column="94"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="95"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="96"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">debugs<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><literal type="number" pos:line="12" pos:column="16">79<pos:position pos:line="12" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="20">DBG_IMPORTANT<pos:position pos:line="12" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="35">"size="<pos:position pos:line="12" pos:column="42"/></literal> <operator pos:line="12" pos:column="43">&lt;&lt;<pos:position pos:line="12" pos:column="51"/></operator> <name><name pos:line="12" pos:column="46">cossWrite<pos:position pos:line="12" pos:column="55"/></name><operator pos:line="12" pos:column="55">-&gt;<pos:position pos:line="12" pos:column="60"/></operator><name pos:line="12" pos:column="57">membuf<pos:position pos:line="12" pos:column="63"/></name><operator pos:line="12" pos:column="63">-&gt;<pos:position pos:line="12" pos:column="68"/></operator><name pos:line="12" pos:column="65">diskend<pos:position pos:line="12" pos:column="72"/></name></name> <operator pos:line="12" pos:column="73">-<pos:position pos:line="12" pos:column="74"/></operator> <name><name pos:line="12" pos:column="75">cossWrite<pos:position pos:line="12" pos:column="84"/></name><operator pos:line="12" pos:column="84">-&gt;<pos:position pos:line="12" pos:column="89"/></operator><name pos:line="12" pos:column="86">membuf<pos:position pos:line="12" pos:column="92"/></name><operator pos:line="12" pos:column="92">-&gt;<pos:position pos:line="12" pos:column="97"/></operator><name pos:line="12" pos:column="94">diskstart<pos:position pos:line="12" pos:column="103"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="104"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="105"/></expr_stmt>
    }<pos:position pos:line="13" pos:column="6"/></block></then> <else pos:line="13" pos:column="7">else <block pos:line="13" pos:column="12">{
        <expr_stmt><expr><operator pos:line="14" pos:column="9">++<pos:position pos:line="14" pos:column="11"/></operator> <call><name><name pos:line="14" pos:column="12">StoreFScoss<pos:position pos:line="14" pos:column="23"/></name><operator pos:line="14" pos:column="23">::<pos:position pos:line="14" pos:column="25"/></operator><name pos:line="14" pos:column="25">GetInstance<pos:position pos:line="14" pos:column="36"/></name></name><argument_list pos:line="14" pos:column="36">()<pos:position pos:line="14" pos:column="38"/></argument_list></call><operator pos:line="14" pos:column="38">.<pos:position pos:line="14" pos:column="39"/></operator><name><name pos:line="14" pos:column="39">stats<pos:position pos:line="14" pos:column="44"/></name><operator pos:line="14" pos:column="44">.<pos:position pos:line="14" pos:column="45"/></operator><name pos:line="14" pos:column="45">stripe_write<pos:position pos:line="14" pos:column="57"/></name><operator pos:line="14" pos:column="57">.<pos:position pos:line="14" pos:column="58"/></operator><name pos:line="14" pos:column="58">success<pos:position pos:line="14" pos:column="65"/></name></name></expr>;<pos:position pos:line="14" pos:column="66"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="17" pos:column="5">dlinkDelete<pos:position pos:line="17" pos:column="16"/></name><argument_list pos:line="17" pos:column="16">(<argument><expr><operator pos:line="17" pos:column="17">&amp;<pos:position pos:line="17" pos:column="22"/></operator><name><name pos:line="17" pos:column="18">cossWrite<pos:position pos:line="17" pos:column="27"/></name><operator pos:line="17" pos:column="27">-&gt;<pos:position pos:line="17" pos:column="32"/></operator><name pos:line="17" pos:column="29">membuf<pos:position pos:line="17" pos:column="35"/></name><operator pos:line="17" pos:column="35">-&gt;<pos:position pos:line="17" pos:column="40"/></operator><name pos:line="17" pos:column="37">node<pos:position pos:line="17" pos:column="41"/></name></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="43">&amp;<pos:position pos:line="17" pos:column="48"/></operator><name pos:line="17" pos:column="44">membufs<pos:position pos:line="17" pos:column="51"/></name></expr></argument>)<pos:position pos:line="17" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">cbdataFree<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><name><name pos:line="18" pos:column="16">cossWrite<pos:position pos:line="18" pos:column="25"/></name><operator pos:line="18" pos:column="25">-&gt;<pos:position pos:line="18" pos:column="30"/></operator><name pos:line="18" pos:column="27">membuf<pos:position pos:line="18" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="19" pos:column="5">--<pos:position pos:line="19" pos:column="7"/></operator> <call><name><name pos:line="19" pos:column="8">StoreFScoss<pos:position pos:line="19" pos:column="19"/></name><operator pos:line="19" pos:column="19">::<pos:position pos:line="19" pos:column="21"/></operator><name pos:line="19" pos:column="21">GetInstance<pos:position pos:line="19" pos:column="32"/></name></name><argument_list pos:line="19" pos:column="32">()<pos:position pos:line="19" pos:column="34"/></argument_list></call><operator pos:line="19" pos:column="34">.<pos:position pos:line="19" pos:column="35"/></operator><name><name pos:line="19" pos:column="35">stats<pos:position pos:line="19" pos:column="40"/></name><operator pos:line="19" pos:column="40">.<pos:position pos:line="19" pos:column="41"/></operator><name pos:line="19" pos:column="41">stripes<pos:position pos:line="19" pos:column="48"/></name></name></expr>;<pos:position pos:line="19" pos:column="49"/></expr_stmt>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
