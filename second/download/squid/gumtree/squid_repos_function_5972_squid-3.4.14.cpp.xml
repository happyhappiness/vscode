<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5972_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Snmp<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">Pdu<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">aggregate<pos:position pos:line="2" pos:column="21"/></name></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><specifier pos:line="2" pos:column="22">const<pos:position pos:line="2" pos:column="27"/></specifier> <name pos:line="2" pos:column="28">Pdu<pos:position pos:line="2" pos:column="31"/></name><modifier pos:line="2" pos:column="31">&amp;<pos:position pos:line="2" pos:column="36"/></modifier></type> <name pos:line="2" pos:column="33">pdu<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="37"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">Must<pos:position pos:line="4" pos:column="9"/></name><argument_list pos:line="4" pos:column="9">(<argument><expr><call><name pos:line="4" pos:column="10">varCount<pos:position pos:line="4" pos:column="18"/></name><argument_list pos:line="4" pos:column="18">()<pos:position pos:line="4" pos:column="20"/></argument_list></call> <operator pos:line="4" pos:column="21">==<pos:position pos:line="4" pos:column="23"/></operator> <call><name><name pos:line="4" pos:column="24">pdu<pos:position pos:line="4" pos:column="27"/></name><operator pos:line="4" pos:column="27">.<pos:position pos:line="4" pos:column="28"/></operator><name pos:line="4" pos:column="28">varCount<pos:position pos:line="4" pos:column="36"/></name></name><argument_list pos:line="4" pos:column="36">()<pos:position pos:line="4" pos:column="38"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="5" pos:column="5">++<pos:position pos:line="5" pos:column="7"/></operator><name pos:line="5" pos:column="7">aggrCount<pos:position pos:line="5" pos:column="16"/></name></expr>;<pos:position pos:line="5" pos:column="17"/></expr_stmt>
    <for pos:line="6" pos:column="5">for <control pos:line="6" pos:column="9">(<init><decl><type><name pos:line="6" pos:column="10">variable_list<pos:position pos:line="6" pos:column="23"/></name><modifier pos:line="6" pos:column="23">*<pos:position pos:line="6" pos:column="24"/></modifier></type> <name pos:line="6" pos:column="25">p_aggr<pos:position pos:line="6" pos:column="31"/></name> <init pos:line="6" pos:column="32">= <expr><name pos:line="6" pos:column="34">variables<pos:position pos:line="6" pos:column="43"/></name></expr></init></decl>, <modifier pos:line="6" pos:column="45">*<pos:position pos:line="6" pos:column="46"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="46">p_var<pos:position pos:line="6" pos:column="51"/></name> <init pos:line="6" pos:column="52">= <expr><name><name pos:line="6" pos:column="54">pdu<pos:position pos:line="6" pos:column="57"/></name><operator pos:line="6" pos:column="57">.<pos:position pos:line="6" pos:column="58"/></operator><name pos:line="6" pos:column="58">variables<pos:position pos:line="6" pos:column="67"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="68"/></init> <condition><expr><name pos:line="6" pos:column="69">p_var<pos:position pos:line="6" pos:column="74"/></name> <operator pos:line="6" pos:column="75">!=<pos:position pos:line="6" pos:column="77"/></operator> <name pos:line="6" pos:column="78">NULL<pos:position pos:line="6" pos:column="82"/></name></expr>;<pos:position pos:line="6" pos:column="83"/></condition>
            <incr><expr><name pos:line="7" pos:column="13">p_aggr<pos:position pos:line="7" pos:column="19"/></name> <operator pos:line="7" pos:column="20">=<pos:position pos:line="7" pos:column="21"/></operator> <name><name pos:line="7" pos:column="22">p_aggr<pos:position pos:line="7" pos:column="28"/></name><operator pos:line="7" pos:column="28">-&gt;<pos:position pos:line="7" pos:column="33"/></operator><name pos:line="7" pos:column="30">next_variable<pos:position pos:line="7" pos:column="43"/></name></name></expr><operator pos:line="7" pos:column="43">,<pos:position pos:line="7" pos:column="44"/></operator> <expr><name pos:line="7" pos:column="45">p_var<pos:position pos:line="7" pos:column="50"/></name> <operator pos:line="7" pos:column="51">=<pos:position pos:line="7" pos:column="52"/></operator> <name><name pos:line="7" pos:column="53">p_var<pos:position pos:line="7" pos:column="58"/></name><operator pos:line="7" pos:column="58">-&gt;<pos:position pos:line="7" pos:column="63"/></operator><name pos:line="7" pos:column="60">next_variable<pos:position pos:line="7" pos:column="73"/></name></name></expr></incr>)<pos:position pos:line="7" pos:column="74"/></control> <block pos:line="7" pos:column="75">{
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">Must<pos:position pos:line="8" pos:column="13"/></name><argument_list pos:line="8" pos:column="13">(<argument><expr><name pos:line="8" pos:column="14">p_aggr<pos:position pos:line="8" pos:column="20"/></name> <operator pos:line="8" pos:column="21">!=<pos:position pos:line="8" pos:column="23"/></operator> <name pos:line="8" pos:column="24">NULL<pos:position pos:line="8" pos:column="28"/></name></expr></argument>)<pos:position pos:line="8" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="30"/></expr_stmt>
        <decl_stmt><decl><type><name pos:line="9" pos:column="9">Var<pos:position pos:line="9" pos:column="12"/></name><modifier pos:line="9" pos:column="12">&amp;<pos:position pos:line="9" pos:column="17"/></modifier></type> <name pos:line="9" pos:column="14">aggr<pos:position pos:line="9" pos:column="18"/></name> <init pos:line="9" pos:column="19">= <expr><cast type="static" pos:line="9" pos:column="21">static_cast<argument_list type="generic" pos:line="9" pos:column="32">&lt;<argument><expr><name pos:line="9" pos:column="33">Var<pos:position pos:line="9" pos:column="36"/></name><operator pos:line="9" pos:column="36">&amp;<pos:position pos:line="9" pos:column="41"/></operator></expr></argument>&gt;<pos:position pos:line="9" pos:column="41"/></argument_list><argument_list pos:line="9" pos:column="38">(<argument><expr><operator pos:line="9" pos:column="39">*<pos:position pos:line="9" pos:column="40"/></operator><name pos:line="9" pos:column="40">p_aggr<pos:position pos:line="9" pos:column="46"/></name></expr></argument>)<pos:position pos:line="9" pos:column="47"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="9" pos:column="48"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="10" pos:column="9">Var<pos:position pos:line="10" pos:column="12"/></name><modifier pos:line="10" pos:column="12">&amp;<pos:position pos:line="10" pos:column="17"/></modifier></type> <name pos:line="10" pos:column="14">var<pos:position pos:line="10" pos:column="17"/></name> <init pos:line="10" pos:column="18">= <expr><cast type="static" pos:line="10" pos:column="20">static_cast<argument_list type="generic" pos:line="10" pos:column="31">&lt;<argument><expr><name pos:line="10" pos:column="32">Var<pos:position pos:line="10" pos:column="35"/></name><operator pos:line="10" pos:column="35">&amp;<pos:position pos:line="10" pos:column="40"/></operator></expr></argument>&gt;<pos:position pos:line="10" pos:column="40"/></argument_list><argument_list pos:line="10" pos:column="37">(<argument><expr><operator pos:line="10" pos:column="38">*<pos:position pos:line="10" pos:column="39"/></operator><name pos:line="10" pos:column="39">p_var<pos:position pos:line="10" pos:column="44"/></name></expr></argument>)<pos:position pos:line="10" pos:column="45"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="10" pos:column="46"/></decl_stmt>
        <if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><call><name><name pos:line="11" pos:column="13">aggr<pos:position pos:line="11" pos:column="17"/></name><operator pos:line="11" pos:column="17">.<pos:position pos:line="11" pos:column="18"/></operator><name pos:line="11" pos:column="18">isNull<pos:position pos:line="11" pos:column="24"/></name></name><argument_list pos:line="11" pos:column="24">()<pos:position pos:line="11" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="27"/></condition><then pos:line="11" pos:column="27"> <block pos:line="11" pos:column="28">{
            <expr_stmt><expr><call><name><name pos:line="12" pos:column="13">aggr<pos:position pos:line="12" pos:column="17"/></name><operator pos:line="12" pos:column="17">.<pos:position pos:line="12" pos:column="18"/></operator><name pos:line="12" pos:column="18">setName<pos:position pos:line="12" pos:column="25"/></name></name><argument_list pos:line="12" pos:column="25">(<argument><expr><call><name><name pos:line="12" pos:column="26">var<pos:position pos:line="12" pos:column="29"/></name><operator pos:line="12" pos:column="29">.<pos:position pos:line="12" pos:column="30"/></operator><name pos:line="12" pos:column="30">getName<pos:position pos:line="12" pos:column="37"/></name></name><argument_list pos:line="12" pos:column="37">()<pos:position pos:line="12" pos:column="39"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="41"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="13" pos:column="13">aggr<pos:position pos:line="13" pos:column="17"/></name><operator pos:line="13" pos:column="17">.<pos:position pos:line="13" pos:column="18"/></operator><name pos:line="13" pos:column="18">copyValue<pos:position pos:line="13" pos:column="27"/></name></name><argument_list pos:line="13" pos:column="27">(<argument><expr><name pos:line="13" pos:column="28">var<pos:position pos:line="13" pos:column="31"/></name></expr></argument>)<pos:position pos:line="13" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="33"/></expr_stmt>
        }<pos:position pos:line="14" pos:column="10"/></block></then> <else pos:line="14" pos:column="11">else <block pos:line="14" pos:column="16">{
            <switch pos:line="15" pos:column="13">switch <condition pos:line="15" pos:column="20">(<expr><call><name pos:line="15" pos:column="21">snmpAggrType<pos:position pos:line="15" pos:column="33"/></name><argument_list pos:line="15" pos:column="33">(<argument><expr><name><name pos:line="15" pos:column="34">aggr<pos:position pos:line="15" pos:column="38"/></name><operator pos:line="15" pos:column="38">.<pos:position pos:line="15" pos:column="39"/></operator><name pos:line="15" pos:column="39">name<pos:position pos:line="15" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="45">aggr<pos:position pos:line="15" pos:column="49"/></name><operator pos:line="15" pos:column="49">.<pos:position pos:line="15" pos:column="50"/></operator><name pos:line="15" pos:column="50">name_length<pos:position pos:line="15" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="63"/></condition> <block pos:line="15" pos:column="64">{
            <case pos:line="16" pos:column="13">case <expr><name pos:line="16" pos:column="18">atSum<pos:position pos:line="16" pos:column="23"/></name></expr>:<pos:position pos:line="16" pos:column="24"/></case>
            <case pos:line="17" pos:column="13">case <expr><name pos:line="17" pos:column="18">atAverage<pos:position pos:line="17" pos:column="27"/></name></expr>:<pos:position pos:line="17" pos:column="28"/></case>
                <comment type="line" pos:line="18" pos:column="17">// The mean-average division is done later</comment>
                <comment type="line" pos:line="19" pos:column="17">// when the Snmp::Pdu::fixAggregate() called</comment>
                <expr_stmt><expr><name pos:line="20" pos:column="17">aggr<pos:position pos:line="20" pos:column="21"/></name> <operator pos:line="20" pos:column="22">+=<pos:position pos:line="20" pos:column="24"/></operator> <name pos:line="20" pos:column="25">var<pos:position pos:line="20" pos:column="28"/></name></expr>;<pos:position pos:line="20" pos:column="29"/></expr_stmt>
                <break pos:line="21" pos:column="17">break;<pos:position pos:line="21" pos:column="23"/></break>
            <case pos:line="22" pos:column="13">case <expr><name pos:line="22" pos:column="18">atMax<pos:position pos:line="22" pos:column="23"/></name></expr>:<pos:position pos:line="22" pos:column="24"/></case>
                <if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><name pos:line="23" pos:column="21">var<pos:position pos:line="23" pos:column="24"/></name> <operator pos:line="23" pos:column="25">&gt;<pos:position pos:line="23" pos:column="29"/></operator> <name pos:line="23" pos:column="27">aggr<pos:position pos:line="23" pos:column="31"/></name></expr>)<pos:position pos:line="23" pos:column="32"/></condition><then pos:line="23" pos:column="32">
                    <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="24" pos:column="21">aggr<pos:position pos:line="24" pos:column="25"/></name><operator pos:line="24" pos:column="25">.<pos:position pos:line="24" pos:column="26"/></operator><name pos:line="24" pos:column="26">copyValue<pos:position pos:line="24" pos:column="35"/></name></name><argument_list pos:line="24" pos:column="35">(<argument><expr><name pos:line="24" pos:column="36">var<pos:position pos:line="24" pos:column="39"/></name></expr></argument>)<pos:position pos:line="24" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="41"/></expr_stmt></block></then></if>
                <break pos:line="25" pos:column="17">break;<pos:position pos:line="25" pos:column="23"/></break>
            <case pos:line="26" pos:column="13">case <expr><name pos:line="26" pos:column="18">atMin<pos:position pos:line="26" pos:column="23"/></name></expr>:<pos:position pos:line="26" pos:column="24"/></case>
                <if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><name pos:line="27" pos:column="21">var<pos:position pos:line="27" pos:column="24"/></name> <operator pos:line="27" pos:column="25">&lt;<pos:position pos:line="27" pos:column="29"/></operator> <name pos:line="27" pos:column="27">aggr<pos:position pos:line="27" pos:column="31"/></name></expr>)<pos:position pos:line="27" pos:column="32"/></condition><then pos:line="27" pos:column="32">
                    <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="28" pos:column="21">aggr<pos:position pos:line="28" pos:column="25"/></name><operator pos:line="28" pos:column="25">.<pos:position pos:line="28" pos:column="26"/></operator><name pos:line="28" pos:column="26">copyValue<pos:position pos:line="28" pos:column="35"/></name></name><argument_list pos:line="28" pos:column="35">(<argument><expr><name pos:line="28" pos:column="36">var<pos:position pos:line="28" pos:column="39"/></name></expr></argument>)<pos:position pos:line="28" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="41"/></expr_stmt></block></then></if>
                <break pos:line="29" pos:column="17">break;<pos:position pos:line="29" pos:column="23"/></break>
            <default pos:line="30" pos:column="13">default:<pos:position pos:line="30" pos:column="21"/></default>
                <break pos:line="31" pos:column="17">break;<pos:position pos:line="31" pos:column="23"/></break>
            }<pos:position pos:line="32" pos:column="14"/></block></switch>
        }<pos:position pos:line="33" pos:column="10"/></block></else></if>
    }<pos:position pos:line="34" pos:column="6"/></block></for>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
