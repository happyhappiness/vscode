<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4284_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ACLIntRange<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">parse<pos:position pos:line="2" pos:column="19"/></name></name><parameter_list pos:line="2" pos:column="19">()<pos:position pos:line="2" pos:column="21"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <while pos:line="4" pos:column="5">while <condition pos:line="4" pos:column="11">(<decl><type><name pos:line="4" pos:column="12">char<pos:position pos:line="4" pos:column="16"/></name> <modifier pos:line="4" pos:column="17">*<pos:position pos:line="4" pos:column="18"/></modifier></type><name pos:line="4" pos:column="18">a<pos:position pos:line="4" pos:column="19"/></name> <init pos:line="4" pos:column="20">= <expr><call><name><name pos:line="4" pos:column="22">ConfigParser<pos:position pos:line="4" pos:column="34"/></name><operator pos:line="4" pos:column="34">::<pos:position pos:line="4" pos:column="36"/></operator><name pos:line="4" pos:column="36">strtokFile<pos:position pos:line="4" pos:column="46"/></name></name><argument_list pos:line="4" pos:column="46">()<pos:position pos:line="4" pos:column="48"/></argument_list></call></expr></init></decl>)<pos:position pos:line="4" pos:column="49"/></condition> <block pos:line="4" pos:column="50">{
        <decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">b<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><call><name pos:line="5" pos:column="19">strchr<pos:position pos:line="5" pos:column="25"/></name><argument_list pos:line="5" pos:column="25">(<argument><expr><name pos:line="5" pos:column="26">a<pos:position pos:line="5" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="5" pos:column="29">'-'<pos:position pos:line="5" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="33"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="34"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="6" pos:column="9">unsigned<pos:position pos:line="6" pos:column="17"/></name> <name pos:line="6" pos:column="18">short<pos:position pos:line="6" pos:column="23"/></name></type> <name pos:line="6" pos:column="24">port1<pos:position pos:line="6" pos:column="29"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="31">port2<pos:position pos:line="6" pos:column="36"/></name></decl>;<pos:position pos:line="6" pos:column="37"/></decl_stmt>

        <if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">b<pos:position pos:line="8" pos:column="14"/></name></expr>)<pos:position pos:line="8" pos:column="15"/></condition><then pos:line="8" pos:column="15"> <block pos:line="8" pos:column="16">{
            <expr_stmt><expr><operator pos:line="9" pos:column="13">*<pos:position pos:line="9" pos:column="14"/></operator><name pos:line="9" pos:column="14">b<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">=<pos:position pos:line="9" pos:column="17"/></operator> <literal type="char" pos:line="9" pos:column="18">'\0'<pos:position pos:line="9" pos:column="22"/></literal></expr>;<pos:position pos:line="9" pos:column="23"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="10" pos:column="13">++<pos:position pos:line="10" pos:column="15"/></operator><name pos:line="10" pos:column="15">b<pos:position pos:line="10" pos:column="16"/></name></expr>;<pos:position pos:line="10" pos:column="17"/></expr_stmt>
        }<pos:position pos:line="11" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="13" pos:column="9">port1<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">=<pos:position pos:line="13" pos:column="16"/></operator> <call><name pos:line="13" pos:column="17">xatos<pos:position pos:line="13" pos:column="22"/></name><argument_list pos:line="13" pos:column="22">(<argument><expr><name pos:line="13" pos:column="23">a<pos:position pos:line="13" pos:column="24"/></name></expr></argument>)<pos:position pos:line="13" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="26"/></expr_stmt>

        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">b<pos:position pos:line="15" pos:column="14"/></name></expr>)<pos:position pos:line="15" pos:column="15"/></condition><then pos:line="15" pos:column="15">
            <block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="13">port2<pos:position pos:line="16" pos:column="18"/></name> <operator pos:line="16" pos:column="19">=<pos:position pos:line="16" pos:column="20"/></operator> <call><name pos:line="16" pos:column="21">xatos<pos:position pos:line="16" pos:column="26"/></name><argument_list pos:line="16" pos:column="26">(<argument><expr><name pos:line="16" pos:column="27">b<pos:position pos:line="16" pos:column="28"/></name></expr></argument>)<pos:position pos:line="16" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="30"/></expr_stmt></block></then>
        <else pos:line="17" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="13">port2<pos:position pos:line="18" pos:column="18"/></name> <operator pos:line="18" pos:column="19">=<pos:position pos:line="18" pos:column="20"/></operator> <name pos:line="18" pos:column="21">port1<pos:position pos:line="18" pos:column="26"/></name></expr>;<pos:position pos:line="18" pos:column="27"/></expr_stmt></block></else></if>

        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">port2<pos:position pos:line="20" pos:column="18"/></name> <operator pos:line="20" pos:column="19">&gt;=<pos:position pos:line="20" pos:column="24"/></operator> <name pos:line="20" pos:column="22">port1<pos:position pos:line="20" pos:column="27"/></name></expr>)<pos:position pos:line="20" pos:column="28"/></condition><then pos:line="20" pos:column="28"> <block pos:line="20" pos:column="29">{
            <decl_stmt><decl><type><name pos:line="21" pos:column="13">RangeType<pos:position pos:line="21" pos:column="22"/></name></type> <name pos:line="21" pos:column="23">temp<pos:position pos:line="21" pos:column="27"/></name><argument_list pos:line="21" pos:column="27">(<argument><expr><name pos:line="21" pos:column="28">port1<pos:position pos:line="21" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="35">port2<pos:position pos:line="21" pos:column="40"/></name><operator pos:line="21" pos:column="40">+<pos:position pos:line="21" pos:column="41"/></operator><literal type="number" pos:line="21" pos:column="41">1<pos:position pos:line="21" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="43"/></argument_list></decl>;<pos:position pos:line="21" pos:column="44"/></decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="22" pos:column="13">ranges<pos:position pos:line="22" pos:column="19"/></name><operator pos:line="22" pos:column="19">.<pos:position pos:line="22" pos:column="20"/></operator><name pos:line="22" pos:column="20">push_back<pos:position pos:line="22" pos:column="29"/></name></name><argument_list pos:line="22" pos:column="29">(<argument><expr><name pos:line="22" pos:column="30">temp<pos:position pos:line="22" pos:column="34"/></name></expr></argument>)<pos:position pos:line="22" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="36"/></expr_stmt>
        }<pos:position pos:line="23" pos:column="10"/></block></then> <else pos:line="23" pos:column="11">else <block pos:line="23" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="24" pos:column="13">debugs<pos:position pos:line="24" pos:column="19"/></name><argument_list pos:line="24" pos:column="19">(<argument><expr><literal type="number" pos:line="24" pos:column="20">28<pos:position pos:line="24" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="24">DBG_CRITICAL<pos:position pos:line="24" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="38">"ACLIntRange::parse: Invalid port value"<pos:position pos:line="24" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="80"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="25" pos:column="13">self_destruct<pos:position pos:line="25" pos:column="26"/></name><argument_list pos:line="25" pos:column="26">()<pos:position pos:line="25" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="26" pos:column="10"/></block></else></if>
    }<pos:position pos:line="27" pos:column="6"/></block></while>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
