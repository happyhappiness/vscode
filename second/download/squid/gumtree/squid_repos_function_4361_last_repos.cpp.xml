<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4361_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">std<pos:position pos:line="1" pos:column="11"/></name><operator pos:line="1" pos:column="11">::<pos:position pos:line="1" pos:column="13"/></operator><name pos:line="1" pos:column="13">string<pos:position pos:line="1" pos:column="19"/></name></name></type>
<name pos:line="2" pos:column="1">ldap_escape_value<pos:position pos:line="2" pos:column="18"/></name><parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><specifier pos:line="2" pos:column="19">const<pos:position pos:line="2" pos:column="24"/></specifier> <name><name pos:line="2" pos:column="25">std<pos:position pos:line="2" pos:column="28"/></name><operator pos:line="2" pos:column="28">::<pos:position pos:line="2" pos:column="30"/></operator><name pos:line="2" pos:column="30">string<pos:position pos:line="2" pos:column="36"/></name></name> <modifier pos:line="2" pos:column="37">&amp;<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="38">src<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="42"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">std<pos:position pos:line="4" pos:column="8"/></name><operator pos:line="4" pos:column="8">::<pos:position pos:line="4" pos:column="10"/></operator><name pos:line="4" pos:column="10">stringstream<pos:position pos:line="4" pos:column="22"/></name></name></type> <name pos:line="4" pos:column="23">str<pos:position pos:line="4" pos:column="26"/></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
    <for pos:line="5" pos:column="5">for <control pos:line="5" pos:column="9">(<init><decl><type><specifier pos:line="5" pos:column="10">const<pos:position pos:line="5" pos:column="15"/></specifier> <specifier pos:line="5" pos:column="16">auto<pos:position pos:line="5" pos:column="20"/></specifier> <modifier pos:line="5" pos:column="21">&amp;<pos:position pos:line="5" pos:column="26"/></modifier></type><name pos:line="5" pos:column="22">c<pos:position pos:line="5" pos:column="23"/></name> <range pos:line="5" pos:column="24">: <expr><name pos:line="5" pos:column="26">src<pos:position pos:line="5" pos:column="29"/></name></expr></range></decl></init>)<pos:position pos:line="5" pos:column="30"/></control> <block pos:line="5" pos:column="31">{
        <switch pos:line="6" pos:column="9">switch <condition pos:line="6" pos:column="16">(<expr><name pos:line="6" pos:column="17">c<pos:position pos:line="6" pos:column="18"/></name></expr>)<pos:position pos:line="6" pos:column="19"/></condition> <block pos:line="6" pos:column="20">{
        <case pos:line="7" pos:column="9">case <expr><literal type="char" pos:line="7" pos:column="14">'*'<pos:position pos:line="7" pos:column="17"/></literal></expr>:<pos:position pos:line="7" pos:column="18"/></case>
        <case pos:line="8" pos:column="9">case <expr><literal type="char" pos:line="8" pos:column="14">'('<pos:position pos:line="8" pos:column="17"/></literal></expr>:<pos:position pos:line="8" pos:column="18"/></case>
        <case pos:line="9" pos:column="9">case <expr><literal type="char" pos:line="9" pos:column="14">')'<pos:position pos:line="9" pos:column="17"/></literal></expr>:<pos:position pos:line="9" pos:column="18"/></case>
        <case pos:line="10" pos:column="9">case <expr><literal type="char" pos:line="10" pos:column="14">'\\'<pos:position pos:line="10" pos:column="18"/></literal></expr>:<pos:position pos:line="10" pos:column="19"/></case>
            <expr_stmt><expr><name pos:line="11" pos:column="13">str<pos:position pos:line="11" pos:column="16"/></name> <operator pos:line="11" pos:column="17">&lt;&lt;<pos:position pos:line="11" pos:column="25"/></operator> <literal type="char" pos:line="11" pos:column="20">'\\'<pos:position pos:line="11" pos:column="24"/></literal> <operator pos:line="11" pos:column="25">&lt;&lt;<pos:position pos:line="11" pos:column="33"/></operator> <call><name><name pos:line="11" pos:column="28">std<pos:position pos:line="11" pos:column="31"/></name><operator pos:line="11" pos:column="31">::<pos:position pos:line="11" pos:column="33"/></operator><name pos:line="11" pos:column="33">setfill<pos:position pos:line="11" pos:column="40"/></name></name><argument_list pos:line="11" pos:column="40">(<argument><expr><literal type="char" pos:line="11" pos:column="41">'0'<pos:position pos:line="11" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="45"/></argument_list></call> <operator pos:line="11" pos:column="46">&lt;&lt;<pos:position pos:line="11" pos:column="54"/></operator> <call><name><name pos:line="11" pos:column="49">std<pos:position pos:line="11" pos:column="52"/></name><operator pos:line="11" pos:column="52">::<pos:position pos:line="11" pos:column="54"/></operator><name pos:line="11" pos:column="54">setw<pos:position pos:line="11" pos:column="58"/></name></name><argument_list pos:line="11" pos:column="58">(<argument><expr><literal type="number" pos:line="11" pos:column="59">2<pos:position pos:line="11" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="61"/></argument_list></call> <operator pos:line="11" pos:column="62">&lt;&lt;<pos:position pos:line="11" pos:column="70"/></operator> <name><name pos:line="11" pos:column="65">std<pos:position pos:line="11" pos:column="68"/></name><operator pos:line="11" pos:column="68">::<pos:position pos:line="11" pos:column="70"/></operator><name pos:line="11" pos:column="70">hex<pos:position pos:line="11" pos:column="73"/></name></name> <operator pos:line="11" pos:column="74">&lt;&lt;<pos:position pos:line="11" pos:column="82"/></operator> <cast type="static" pos:line="11" pos:column="77">static_cast<argument_list type="generic" pos:line="11" pos:column="88">&lt;<argument><expr><name pos:line="11" pos:column="89">int<pos:position pos:line="11" pos:column="92"/></name></expr></argument>&gt;<pos:position pos:line="11" pos:column="96"/></argument_list><argument_list pos:line="11" pos:column="93">(<argument><expr><name pos:line="11" pos:column="94">c<pos:position pos:line="11" pos:column="95"/></name></expr></argument>)<pos:position pos:line="11" pos:column="96"/></argument_list></cast></expr>;<pos:position pos:line="11" pos:column="97"/></expr_stmt>
            <break pos:line="12" pos:column="13">break;<pos:position pos:line="12" pos:column="19"/></break>
        <default pos:line="13" pos:column="9">default:<pos:position pos:line="13" pos:column="17"/></default>
            <expr_stmt><expr><name pos:line="14" pos:column="13">str<pos:position pos:line="14" pos:column="16"/></name> <operator pos:line="14" pos:column="17">&lt;&lt;<pos:position pos:line="14" pos:column="25"/></operator> <name pos:line="14" pos:column="20">c<pos:position pos:line="14" pos:column="21"/></name></expr>;<pos:position pos:line="14" pos:column="22"/></expr_stmt>
        }<pos:position pos:line="15" pos:column="10"/></block></switch>
    }<pos:position pos:line="16" pos:column="6"/></block></for>
    <return pos:line="17" pos:column="5">return <expr><call><name><name pos:line="17" pos:column="12">str<pos:position pos:line="17" pos:column="15"/></name><operator pos:line="17" pos:column="15">.<pos:position pos:line="17" pos:column="16"/></operator><name pos:line="17" pos:column="16">str<pos:position pos:line="17" pos:column="19"/></name></name><argument_list pos:line="17" pos:column="19">()<pos:position pos:line="17" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="22"/></return>
}<pos:position pos:line="18" pos:column="2"/></block></function></unit>
