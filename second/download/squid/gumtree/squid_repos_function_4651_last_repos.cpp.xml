<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4651_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ftp<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">Server<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">handleEpsvRequest<pos:position pos:line="2" pos:column="31"/></name></name><parameter_list pos:line="2" pos:column="31">(<parameter><decl><type><name pos:line="2" pos:column="32">String<pos:position pos:line="2" pos:column="38"/></name> <modifier pos:line="2" pos:column="39">&amp;<pos:position pos:line="2" pos:column="44"/></modifier></type></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="42">String<pos:position pos:line="2" pos:column="48"/></name> <modifier pos:line="2" pos:column="49">&amp;<pos:position pos:line="2" pos:column="54"/></modifier></type><name pos:line="2" pos:column="50">params<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="57"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">9<pos:position pos:line="4" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="15">3<pos:position pos:line="4" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="18">"Process an EPSV command with params: "<pos:position pos:line="4" pos:column="57"/></literal> <operator pos:line="4" pos:column="58">&lt;&lt;<pos:position pos:line="4" pos:column="66"/></operator> <name pos:line="4" pos:column="61">params<pos:position pos:line="4" pos:column="67"/></name></expr></argument>)<pos:position pos:line="4" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="69"/></expr_stmt>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><call><name><name pos:line="5" pos:column="9">params<pos:position pos:line="5" pos:column="15"/></name><operator pos:line="5" pos:column="15">.<pos:position pos:line="5" pos:column="16"/></operator><name pos:line="5" pos:column="16">size<pos:position pos:line="5" pos:column="20"/></name></name><argument_list pos:line="5" pos:column="20">()<pos:position pos:line="5" pos:column="22"/></argument_list></call> <operator pos:line="5" pos:column="23">&lt;=<pos:position pos:line="5" pos:column="28"/></operator> <literal type="number" pos:line="5" pos:column="26">0<pos:position pos:line="5" pos:column="27"/></literal></expr>)<pos:position pos:line="5" pos:column="28"/></condition><then pos:line="5" pos:column="28"> <block pos:line="5" pos:column="29">{
        <comment type="line" pos:line="6" pos:column="9">// treat parameterless EPSV as "use the protocol of the ctrl conn"</comment>
    }<pos:position pos:line="7" pos:column="6"/></block></then> <elseif pos:line="7" pos:column="7">else <if pos:line="7" pos:column="12">if <condition pos:line="7" pos:column="15">(<expr><call><name><name pos:line="7" pos:column="16">params<pos:position pos:line="7" pos:column="22"/></name><operator pos:line="7" pos:column="22">.<pos:position pos:line="7" pos:column="23"/></operator><name pos:line="7" pos:column="23">caseCmp<pos:position pos:line="7" pos:column="30"/></name></name><argument_list pos:line="7" pos:column="30">(<argument><expr><literal type="string" pos:line="7" pos:column="31">"ALL"<pos:position pos:line="7" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="37"/></argument_list></call> <operator pos:line="7" pos:column="38">==<pos:position pos:line="7" pos:column="40"/></operator> <literal type="number" pos:line="7" pos:column="41">0<pos:position pos:line="7" pos:column="42"/></literal></expr>)<pos:position pos:line="7" pos:column="43"/></condition><then pos:line="7" pos:column="43"> <block pos:line="7" pos:column="44">{
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">setReply<pos:position pos:line="8" pos:column="17"/></name><argument_list pos:line="8" pos:column="17">(<argument><expr><literal type="number" pos:line="8" pos:column="18">200<pos:position pos:line="8" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="23">"EPSV ALL ok"<pos:position pos:line="8" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><name pos:line="9" pos:column="9">gotEpsvAll<pos:position pos:line="9" pos:column="19"/></name> <operator pos:line="9" pos:column="20">=<pos:position pos:line="9" pos:column="21"/></operator> <literal type="boolean" pos:line="9" pos:column="22">true<pos:position pos:line="9" pos:column="26"/></literal></expr>;<pos:position pos:line="9" pos:column="27"/></expr_stmt>
        <return pos:line="10" pos:column="9">return <expr><literal type="boolean" pos:line="10" pos:column="16">false<pos:position pos:line="10" pos:column="21"/></literal></expr>;<pos:position pos:line="10" pos:column="22"/></return>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if></elseif> <elseif pos:line="11" pos:column="7">else <if pos:line="11" pos:column="12">if <condition pos:line="11" pos:column="15">(<expr><call><name><name pos:line="11" pos:column="16">params<pos:position pos:line="11" pos:column="22"/></name><operator pos:line="11" pos:column="22">.<pos:position pos:line="11" pos:column="23"/></operator><name pos:line="11" pos:column="23">cmp<pos:position pos:line="11" pos:column="26"/></name></name><argument_list pos:line="11" pos:column="26">(<argument><expr><literal type="string" pos:line="11" pos:column="27">"2"<pos:position pos:line="11" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="31"/></argument_list></call> <operator pos:line="11" pos:column="32">==<pos:position pos:line="11" pos:column="34"/></operator> <literal type="number" pos:line="11" pos:column="35">0<pos:position pos:line="11" pos:column="36"/></literal></expr>)<pos:position pos:line="11" pos:column="37"/></condition><then pos:line="11" pos:column="37"> <block pos:line="11" pos:column="38">{
        <if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><operator pos:line="12" pos:column="13">!<pos:position pos:line="12" pos:column="14"/></operator><name><name pos:line="12" pos:column="14">Ip<pos:position pos:line="12" pos:column="16"/></name><operator pos:line="12" pos:column="16">::<pos:position pos:line="12" pos:column="18"/></operator><name pos:line="12" pos:column="18">EnableIpv6<pos:position pos:line="12" pos:column="28"/></name></name></expr>)<pos:position pos:line="12" pos:column="29"/></condition><then pos:line="12" pos:column="29"> <block pos:line="12" pos:column="30">{
            <expr_stmt><expr><call><name pos:line="13" pos:column="13">setReply<pos:position pos:line="13" pos:column="21"/></name><argument_list pos:line="13" pos:column="21">(<argument><expr><literal type="number" pos:line="13" pos:column="22">522<pos:position pos:line="13" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="27">"Network protocol not supported, use (1)"<pos:position pos:line="13" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="70"/></expr_stmt>
            <return pos:line="14" pos:column="13">return <expr><literal type="boolean" pos:line="14" pos:column="20">false<pos:position pos:line="14" pos:column="25"/></literal></expr>;<pos:position pos:line="14" pos:column="26"/></return>
        }<pos:position pos:line="15" pos:column="10"/></block></then></if>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if></elseif> <elseif pos:line="16" pos:column="7">else <if pos:line="16" pos:column="12">if <condition pos:line="16" pos:column="15">(<expr><call><name><name pos:line="16" pos:column="16">params<pos:position pos:line="16" pos:column="22"/></name><operator pos:line="16" pos:column="22">.<pos:position pos:line="16" pos:column="23"/></operator><name pos:line="16" pos:column="23">cmp<pos:position pos:line="16" pos:column="26"/></name></name><argument_list pos:line="16" pos:column="26">(<argument><expr><literal type="string" pos:line="16" pos:column="27">"1"<pos:position pos:line="16" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="31"/></argument_list></call> <operator pos:line="16" pos:column="32">!=<pos:position pos:line="16" pos:column="34"/></operator> <literal type="number" pos:line="16" pos:column="35">0<pos:position pos:line="16" pos:column="36"/></literal></expr>)<pos:position pos:line="16" pos:column="37"/></condition><then pos:line="16" pos:column="37"> <block pos:line="16" pos:column="38">{
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">setReply<pos:position pos:line="17" pos:column="17"/></name><argument_list pos:line="17" pos:column="17">(<argument><expr><literal type="number" pos:line="17" pos:column="18">501<pos:position pos:line="17" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="23">"Unsupported EPSV parameter"<pos:position pos:line="17" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="53"/></expr_stmt>
        <return pos:line="18" pos:column="9">return <expr><literal type="boolean" pos:line="18" pos:column="16">false<pos:position pos:line="18" pos:column="21"/></literal></expr>;<pos:position pos:line="18" pos:column="22"/></return>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if></elseif></if>

    <expr_stmt><expr><call><name pos:line="21" pos:column="5">changeState<pos:position pos:line="21" pos:column="16"/></name><argument_list pos:line="21" pos:column="16">(<argument><expr><name pos:line="21" pos:column="17">fssHandleEpsv<pos:position pos:line="21" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="32">"handleEpsvRequest"<pos:position pos:line="21" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">setDataCommand<pos:position pos:line="22" pos:column="19"/></name><argument_list pos:line="22" pos:column="19">()<pos:position pos:line="22" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="22"/></expr_stmt>
    <return pos:line="23" pos:column="5">return <expr><literal type="boolean" pos:line="23" pos:column="12">true<pos:position pos:line="23" pos:column="16"/></literal></expr>;<pos:position pos:line="23" pos:column="17"/></return> <comment type="line" pos:line="23" pos:column="18">// forward our fake PASV request</comment>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
