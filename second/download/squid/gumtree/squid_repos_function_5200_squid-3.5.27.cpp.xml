<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5200_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Rock<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">Rebuild<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">addSlotToEntry<pos:position pos:line="2" pos:column="30"/></name></name><parameter_list pos:line="2" pos:column="30">(<parameter><decl><type><specifier pos:line="2" pos:column="31">const<pos:position pos:line="2" pos:column="36"/></specifier> <name pos:line="2" pos:column="37">sfileno<pos:position pos:line="2" pos:column="44"/></name></type> <name pos:line="2" pos:column="45">fileno<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="53">const<pos:position pos:line="2" pos:column="58"/></specifier> <name pos:line="2" pos:column="59">SlotId<pos:position pos:line="2" pos:column="65"/></name></type> <name pos:line="2" pos:column="66">slotId<pos:position pos:line="2" pos:column="72"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="74">const<pos:position pos:line="2" pos:column="79"/></specifier> <name pos:line="2" pos:column="80">DbCellHeader<pos:position pos:line="2" pos:column="92"/></name> <modifier pos:line="2" pos:column="93">&amp;<pos:position pos:line="2" pos:column="98"/></modifier></type><name pos:line="2" pos:column="94">header<pos:position pos:line="2" pos:column="100"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="101"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">LoadingEntry<pos:position pos:line="4" pos:column="17"/></name> <modifier pos:line="4" pos:column="18">&amp;<pos:position pos:line="4" pos:column="23"/></modifier></type><name pos:line="4" pos:column="19">le<pos:position pos:line="4" pos:column="21"/></name> <init pos:line="4" pos:column="22">= <expr><name><name pos:line="4" pos:column="24">entries<pos:position pos:line="4" pos:column="31"/></name><index pos:line="4" pos:column="31">[<expr><name pos:line="4" pos:column="32">fileno<pos:position pos:line="4" pos:column="38"/></name></expr>]<pos:position pos:line="4" pos:column="39"/></index></name></expr></init></decl>;<pos:position pos:line="4" pos:column="40"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="5" pos:column="5">Ipc<pos:position pos:line="5" pos:column="8"/></name><operator pos:line="5" pos:column="8">::<pos:position pos:line="5" pos:column="10"/></operator><name pos:line="5" pos:column="10">StoreMapAnchor<pos:position pos:line="5" pos:column="24"/></name></name> <modifier pos:line="5" pos:column="25">&amp;<pos:position pos:line="5" pos:column="30"/></modifier></type><name pos:line="5" pos:column="26">anchor<pos:position pos:line="5" pos:column="32"/></name> <init pos:line="5" pos:column="33">= <expr><call><name><name pos:line="5" pos:column="35">sd<pos:position pos:line="5" pos:column="37"/></name><operator pos:line="5" pos:column="37">-&gt;<pos:position pos:line="5" pos:column="42"/></operator><name pos:line="5" pos:column="39">map<pos:position pos:line="5" pos:column="42"/></name><operator pos:line="5" pos:column="42">-&gt;<pos:position pos:line="5" pos:column="47"/></operator><name pos:line="5" pos:column="44">writeableEntry<pos:position pos:line="5" pos:column="58"/></name></name><argument_list pos:line="5" pos:column="58">(<argument><expr><name pos:line="5" pos:column="59">fileno<pos:position pos:line="5" pos:column="65"/></name></expr></argument>)<pos:position pos:line="5" pos:column="66"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="67"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><name><name pos:line="7" pos:column="12">le<pos:position pos:line="7" pos:column="14"/></name><operator pos:line="7" pos:column="14">.<pos:position pos:line="7" pos:column="15"/></operator><name pos:line="7" pos:column="15">version<pos:position pos:line="7" pos:column="22"/></name></name> <operator pos:line="7" pos:column="23">==<pos:position pos:line="7" pos:column="25"/></operator> <name><name pos:line="7" pos:column="26">header<pos:position pos:line="7" pos:column="32"/></name><operator pos:line="7" pos:column="32">.<pos:position pos:line="7" pos:column="33"/></operator><name pos:line="7" pos:column="33">version<pos:position pos:line="7" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="42"/></expr_stmt>

    <comment type="line" pos:line="9" pos:column="5">// mark anchor as loaded or add the secondary slot to the chain</comment>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">LoadingEntry<pos:position pos:line="10" pos:column="17"/></name> <modifier pos:line="10" pos:column="18">&amp;<pos:position pos:line="10" pos:column="23"/></modifier></type><name pos:line="10" pos:column="19">inode<pos:position pos:line="10" pos:column="24"/></name> <init pos:line="10" pos:column="25">= <expr><name><name pos:line="10" pos:column="27">entries<pos:position pos:line="10" pos:column="34"/></name><index pos:line="10" pos:column="34">[<expr><name><name pos:line="10" pos:column="35">header<pos:position pos:line="10" pos:column="41"/></name><operator pos:line="10" pos:column="41">.<pos:position pos:line="10" pos:column="42"/></operator><name pos:line="10" pos:column="42">firstSlot<pos:position pos:line="10" pos:column="51"/></name></name></expr>]<pos:position pos:line="10" pos:column="52"/></index></name></expr></init></decl>;<pos:position pos:line="10" pos:column="53"/></decl_stmt>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name><name pos:line="11" pos:column="9">header<pos:position pos:line="11" pos:column="15"/></name><operator pos:line="11" pos:column="15">.<pos:position pos:line="11" pos:column="16"/></operator><name pos:line="11" pos:column="16">firstSlot<pos:position pos:line="11" pos:column="25"/></name></name> <operator pos:line="11" pos:column="26">==<pos:position pos:line="11" pos:column="28"/></operator> <name pos:line="11" pos:column="29">slotId<pos:position pos:line="11" pos:column="35"/></name></expr>)<pos:position pos:line="11" pos:column="36"/></condition><then pos:line="11" pos:column="36"> <block pos:line="11" pos:column="37">{
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">debugs<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><literal type="number" pos:line="12" pos:column="16">47<pos:position pos:line="12" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="12" pos:column="19">5<pos:position pos:line="12" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="22">"adding inode"<pos:position pos:line="12" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">assert<pos:position pos:line="13" pos:column="15"/></name><argument_list pos:line="13" pos:column="15">(<argument><expr><operator pos:line="13" pos:column="16">!<pos:position pos:line="13" pos:column="17"/></operator><name><name pos:line="13" pos:column="17">inode<pos:position pos:line="13" pos:column="22"/></name><operator pos:line="13" pos:column="22">.<pos:position pos:line="13" pos:column="23"/></operator><name pos:line="13" pos:column="23">freed<pos:position pos:line="13" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="14" pos:column="9">le<pos:position pos:line="14" pos:column="11"/></name><operator pos:line="14" pos:column="11">.<pos:position pos:line="14" pos:column="12"/></operator><name pos:line="14" pos:column="12">anchored<pos:position pos:line="14" pos:column="20"/></name></name> <operator pos:line="14" pos:column="21">=<pos:position pos:line="14" pos:column="22"/></operator> <literal type="number" pos:line="14" pos:column="23">1<pos:position pos:line="14" pos:column="24"/></literal></expr>;<pos:position pos:line="14" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></then> <else pos:line="15" pos:column="7">else <block pos:line="15" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">debugs<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><literal type="number" pos:line="16" pos:column="16">47<pos:position pos:line="16" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="16" pos:column="19">9<pos:position pos:line="16" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="22">"linking "<pos:position pos:line="16" pos:column="32"/></literal> <operator pos:line="16" pos:column="33">&lt;&lt;<pos:position pos:line="16" pos:column="41"/></operator> <name pos:line="16" pos:column="36">slotId<pos:position pos:line="16" pos:column="42"/></name> <operator pos:line="16" pos:column="43">&lt;&lt;<pos:position pos:line="16" pos:column="51"/></operator> <literal type="string" pos:line="16" pos:column="46">" to "<pos:position pos:line="16" pos:column="52"/></literal> <operator pos:line="16" pos:column="53">&lt;&lt;<pos:position pos:line="16" pos:column="61"/></operator> <name><name pos:line="16" pos:column="56">inode<pos:position pos:line="16" pos:column="61"/></name><operator pos:line="16" pos:column="61">.<pos:position pos:line="16" pos:column="62"/></operator><name pos:line="16" pos:column="62">more<pos:position pos:line="16" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="68"/></expr_stmt>
        <comment type="line" pos:line="17" pos:column="9">// we do not need to preserve the order</comment>
        <decl_stmt><decl><type><name pos:line="18" pos:column="9">LoadingEntry<pos:position pos:line="18" pos:column="21"/></name> <modifier pos:line="18" pos:column="22">&amp;<pos:position pos:line="18" pos:column="27"/></modifier></type><name pos:line="18" pos:column="23">slice<pos:position pos:line="18" pos:column="28"/></name> <init pos:line="18" pos:column="29">= <expr><name><name pos:line="18" pos:column="31">entries<pos:position pos:line="18" pos:column="38"/></name><index pos:line="18" pos:column="38">[<expr><name pos:line="18" pos:column="39">slotId<pos:position pos:line="18" pos:column="45"/></name></expr>]<pos:position pos:line="18" pos:column="46"/></index></name></expr></init></decl>;<pos:position pos:line="18" pos:column="47"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">assert<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><operator pos:line="19" pos:column="16">!<pos:position pos:line="19" pos:column="17"/></operator><name><name pos:line="19" pos:column="17">slice<pos:position pos:line="19" pos:column="22"/></name><operator pos:line="19" pos:column="22">.<pos:position pos:line="19" pos:column="23"/></operator><name pos:line="19" pos:column="23">freed<pos:position pos:line="19" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">assert<pos:position pos:line="20" pos:column="15"/></name><argument_list pos:line="20" pos:column="15">(<argument><expr><name><name pos:line="20" pos:column="16">slice<pos:position pos:line="20" pos:column="21"/></name><operator pos:line="20" pos:column="21">.<pos:position pos:line="20" pos:column="22"/></operator><name pos:line="20" pos:column="22">more<pos:position pos:line="20" pos:column="26"/></name></name> <operator pos:line="20" pos:column="27">&lt;<pos:position pos:line="20" pos:column="31"/></operator> <literal type="number" pos:line="20" pos:column="29">0<pos:position pos:line="20" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="21" pos:column="9">slice<pos:position pos:line="21" pos:column="14"/></name><operator pos:line="21" pos:column="14">.<pos:position pos:line="21" pos:column="15"/></operator><name pos:line="21" pos:column="15">more<pos:position pos:line="21" pos:column="19"/></name></name> <operator pos:line="21" pos:column="20">=<pos:position pos:line="21" pos:column="21"/></operator> <name><name pos:line="21" pos:column="22">inode<pos:position pos:line="21" pos:column="27"/></name><operator pos:line="21" pos:column="27">.<pos:position pos:line="21" pos:column="28"/></operator><name pos:line="21" pos:column="28">more<pos:position pos:line="21" pos:column="32"/></name></name></expr>;<pos:position pos:line="21" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="22" pos:column="9">inode<pos:position pos:line="22" pos:column="14"/></name><operator pos:line="22" pos:column="14">.<pos:position pos:line="22" pos:column="15"/></operator><name pos:line="22" pos:column="15">more<pos:position pos:line="22" pos:column="19"/></name></name> <operator pos:line="22" pos:column="20">=<pos:position pos:line="22" pos:column="21"/></operator> <name pos:line="22" pos:column="22">slotId<pos:position pos:line="22" pos:column="28"/></name></expr>;<pos:position pos:line="22" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="23" pos:column="6"/></block></else></if>

    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name><name pos:line="25" pos:column="9">header<pos:position pos:line="25" pos:column="15"/></name><operator pos:line="25" pos:column="15">.<pos:position pos:line="25" pos:column="16"/></operator><name pos:line="25" pos:column="16">firstSlot<pos:position pos:line="25" pos:column="25"/></name></name> <operator pos:line="25" pos:column="26">==<pos:position pos:line="25" pos:column="28"/></operator> <name pos:line="25" pos:column="29">slotId<pos:position pos:line="25" pos:column="35"/></name> <operator pos:line="25" pos:column="36">&amp;&amp;<pos:position pos:line="25" pos:column="46"/></operator> <operator pos:line="25" pos:column="39">!<pos:position pos:line="25" pos:column="40"/></operator><call><name pos:line="25" pos:column="40">importEntry<pos:position pos:line="25" pos:column="51"/></name><argument_list pos:line="25" pos:column="51">(<argument><expr><name pos:line="25" pos:column="52">anchor<pos:position pos:line="25" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="60">fileno<pos:position pos:line="25" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="68">header<pos:position pos:line="25" pos:column="74"/></name></expr></argument>)<pos:position pos:line="25" pos:column="75"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="76"/></condition><then pos:line="25" pos:column="76"> <block pos:line="25" pos:column="77">{
        <expr_stmt><expr><name><name pos:line="26" pos:column="9">le<pos:position pos:line="26" pos:column="11"/></name><operator pos:line="26" pos:column="11">.<pos:position pos:line="26" pos:column="12"/></operator><name pos:line="26" pos:column="12">state<pos:position pos:line="26" pos:column="17"/></name></name> <operator pos:line="26" pos:column="18">=<pos:position pos:line="26" pos:column="19"/></operator> <name><name pos:line="26" pos:column="20">LoadingEntry<pos:position pos:line="26" pos:column="32"/></name><operator pos:line="26" pos:column="32">::<pos:position pos:line="26" pos:column="34"/></operator><name pos:line="26" pos:column="34">leCorrupted<pos:position pos:line="26" pos:column="45"/></name></name></expr>;<pos:position pos:line="26" pos:column="46"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">freeBadEntry<pos:position pos:line="27" pos:column="21"/></name><argument_list pos:line="27" pos:column="21">(<argument><expr><name pos:line="27" pos:column="22">fileno<pos:position pos:line="27" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="30">"corrupted metainfo"<pos:position pos:line="27" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="52"/></expr_stmt>
        <return pos:line="28" pos:column="9">return;<pos:position pos:line="28" pos:column="16"/></return>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="31" pos:column="5">// set total entry size and/or check it for consistency</comment>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">debugs<pos:position pos:line="32" pos:column="11"/></name><argument_list pos:line="32" pos:column="11">(<argument><expr><literal type="number" pos:line="32" pos:column="12">47<pos:position pos:line="32" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="16">8<pos:position pos:line="32" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="19">"header.entrySize: "<pos:position pos:line="32" pos:column="39"/></literal> <operator pos:line="32" pos:column="40">&lt;&lt;<pos:position pos:line="32" pos:column="48"/></operator> <name><name pos:line="32" pos:column="43">header<pos:position pos:line="32" pos:column="49"/></name><operator pos:line="32" pos:column="49">.<pos:position pos:line="32" pos:column="50"/></operator><name pos:line="32" pos:column="50">entrySize<pos:position pos:line="32" pos:column="59"/></name></name> <operator pos:line="32" pos:column="60">&lt;&lt;<pos:position pos:line="32" pos:column="68"/></operator> <literal type="string" pos:line="32" pos:column="63">" swap_file_sz: "<pos:position pos:line="32" pos:column="80"/></literal> <operator pos:line="32" pos:column="81">&lt;&lt;<pos:position pos:line="32" pos:column="89"/></operator> <name><name pos:line="32" pos:column="84">anchor<pos:position pos:line="32" pos:column="90"/></name><operator pos:line="32" pos:column="90">.<pos:position pos:line="32" pos:column="91"/></operator><name pos:line="32" pos:column="91">basics<pos:position pos:line="32" pos:column="97"/></name><operator pos:line="32" pos:column="97">.<pos:position pos:line="32" pos:column="98"/></operator><name pos:line="32" pos:column="98">swap_file_sz<pos:position pos:line="32" pos:column="110"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="111"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="112"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="33" pos:column="5">uint64_t<pos:position pos:line="33" pos:column="13"/></name></type> <name pos:line="33" pos:column="14">totalSize<pos:position pos:line="33" pos:column="23"/></name> <init pos:line="33" pos:column="24">= <expr><name><name pos:line="33" pos:column="26">header<pos:position pos:line="33" pos:column="32"/></name><operator pos:line="33" pos:column="32">.<pos:position pos:line="33" pos:column="33"/></operator><name pos:line="33" pos:column="33">entrySize<pos:position pos:line="33" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="33" pos:column="43"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">assert<pos:position pos:line="34" pos:column="11"/></name><argument_list pos:line="34" pos:column="11">(<argument><expr><name pos:line="34" pos:column="12">totalSize<pos:position pos:line="34" pos:column="21"/></name> <operator pos:line="34" pos:column="22">!=<pos:position pos:line="34" pos:column="24"/></operator> <cast type="static" pos:line="34" pos:column="25">static_cast<argument_list type="generic" pos:line="34" pos:column="36">&lt;<argument><expr><name pos:line="34" pos:column="37">uint64_t<pos:position pos:line="34" pos:column="45"/></name></expr></argument>&gt;<pos:position pos:line="34" pos:column="49"/></argument_list><argument_list pos:line="34" pos:column="46">(<argument><expr><operator pos:line="34" pos:column="47">-<pos:position pos:line="34" pos:column="48"/></operator><literal type="number" pos:line="34" pos:column="48">1<pos:position pos:line="34" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="50"/></argument_list></cast></expr></argument>)<pos:position pos:line="34" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="52"/></expr_stmt>
    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><operator pos:line="35" pos:column="9">!<pos:position pos:line="35" pos:column="10"/></operator><name pos:line="35" pos:column="10">totalSize<pos:position pos:line="35" pos:column="19"/></name> <operator pos:line="35" pos:column="20">&amp;&amp;<pos:position pos:line="35" pos:column="30"/></operator> <name><name pos:line="35" pos:column="23">anchor<pos:position pos:line="35" pos:column="29"/></name><operator pos:line="35" pos:column="29">.<pos:position pos:line="35" pos:column="30"/></operator><name pos:line="35" pos:column="30">basics<pos:position pos:line="35" pos:column="36"/></name><operator pos:line="35" pos:column="36">.<pos:position pos:line="35" pos:column="37"/></operator><name pos:line="35" pos:column="37">swap_file_sz<pos:position pos:line="35" pos:column="49"/></name></name></expr>)<pos:position pos:line="35" pos:column="50"/></condition><then pos:line="35" pos:column="50"> <block pos:line="35" pos:column="51">{
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">assert<pos:position pos:line="36" pos:column="15"/></name><argument_list pos:line="36" pos:column="15">(<argument><expr><name><name pos:line="36" pos:column="16">anchor<pos:position pos:line="36" pos:column="22"/></name><operator pos:line="36" pos:column="22">.<pos:position pos:line="36" pos:column="23"/></operator><name pos:line="36" pos:column="23">basics<pos:position pos:line="36" pos:column="29"/></name><operator pos:line="36" pos:column="29">.<pos:position pos:line="36" pos:column="30"/></operator><name pos:line="36" pos:column="30">swap_file_sz<pos:position pos:line="36" pos:column="42"/></name></name> <operator pos:line="36" pos:column="43">!=<pos:position pos:line="36" pos:column="45"/></operator> <cast type="static" pos:line="36" pos:column="46">static_cast<argument_list type="generic" pos:line="36" pos:column="57">&lt;<argument><expr><name pos:line="36" pos:column="58">uint64_t<pos:position pos:line="36" pos:column="66"/></name></expr></argument>&gt;<pos:position pos:line="36" pos:column="70"/></argument_list><argument_list pos:line="36" pos:column="67">(<argument><expr><operator pos:line="36" pos:column="68">-<pos:position pos:line="36" pos:column="69"/></operator><literal type="number" pos:line="36" pos:column="69">1<pos:position pos:line="36" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="71"/></argument_list></cast></expr></argument>)<pos:position pos:line="36" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="73"/></expr_stmt>
        <comment type="line" pos:line="37" pos:column="9">// perhaps we loaded a later slot (with entrySize) earlier</comment>
        <expr_stmt><expr><name pos:line="38" pos:column="9">totalSize<pos:position pos:line="38" pos:column="18"/></name> <operator pos:line="38" pos:column="19">=<pos:position pos:line="38" pos:column="20"/></operator> <name><name pos:line="38" pos:column="21">anchor<pos:position pos:line="38" pos:column="27"/></name><operator pos:line="38" pos:column="27">.<pos:position pos:line="38" pos:column="28"/></operator><name pos:line="38" pos:column="28">basics<pos:position pos:line="38" pos:column="34"/></name><operator pos:line="38" pos:column="34">.<pos:position pos:line="38" pos:column="35"/></operator><name pos:line="38" pos:column="35">swap_file_sz<pos:position pos:line="38" pos:column="47"/></name></name></expr>;<pos:position pos:line="38" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="39" pos:column="6"/></block></then> <elseif pos:line="39" pos:column="7">else <if pos:line="39" pos:column="12">if <condition pos:line="39" pos:column="15">(<expr><name pos:line="39" pos:column="16">totalSize<pos:position pos:line="39" pos:column="25"/></name> <operator pos:line="39" pos:column="26">&amp;&amp;<pos:position pos:line="39" pos:column="36"/></operator> <operator pos:line="39" pos:column="29">!<pos:position pos:line="39" pos:column="30"/></operator><name><name pos:line="39" pos:column="30">anchor<pos:position pos:line="39" pos:column="36"/></name><operator pos:line="39" pos:column="36">.<pos:position pos:line="39" pos:column="37"/></operator><name pos:line="39" pos:column="37">basics<pos:position pos:line="39" pos:column="43"/></name><operator pos:line="39" pos:column="43">.<pos:position pos:line="39" pos:column="44"/></operator><name pos:line="39" pos:column="44">swap_file_sz<pos:position pos:line="39" pos:column="56"/></name></name></expr>)<pos:position pos:line="39" pos:column="57"/></condition><then pos:line="39" pos:column="57"> <block pos:line="39" pos:column="58">{
        <expr_stmt><expr><name><name pos:line="40" pos:column="9">anchor<pos:position pos:line="40" pos:column="15"/></name><operator pos:line="40" pos:column="15">.<pos:position pos:line="40" pos:column="16"/></operator><name pos:line="40" pos:column="16">basics<pos:position pos:line="40" pos:column="22"/></name><operator pos:line="40" pos:column="22">.<pos:position pos:line="40" pos:column="23"/></operator><name pos:line="40" pos:column="23">swap_file_sz<pos:position pos:line="40" pos:column="35"/></name></name> <operator pos:line="40" pos:column="36">=<pos:position pos:line="40" pos:column="37"/></operator> <name pos:line="40" pos:column="38">totalSize<pos:position pos:line="40" pos:column="47"/></name></expr>;<pos:position pos:line="40" pos:column="48"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="41" pos:column="9">assert<pos:position pos:line="41" pos:column="15"/></name><argument_list pos:line="41" pos:column="15">(<argument><expr><name><name pos:line="41" pos:column="16">anchor<pos:position pos:line="41" pos:column="22"/></name><operator pos:line="41" pos:column="22">.<pos:position pos:line="41" pos:column="23"/></operator><name pos:line="41" pos:column="23">basics<pos:position pos:line="41" pos:column="29"/></name><operator pos:line="41" pos:column="29">.<pos:position pos:line="41" pos:column="30"/></operator><name pos:line="41" pos:column="30">swap_file_sz<pos:position pos:line="41" pos:column="42"/></name></name> <operator pos:line="41" pos:column="43">!=<pos:position pos:line="41" pos:column="45"/></operator> <cast type="static" pos:line="41" pos:column="46">static_cast<argument_list type="generic" pos:line="41" pos:column="57">&lt;<argument><expr><name pos:line="41" pos:column="58">uint64_t<pos:position pos:line="41" pos:column="66"/></name></expr></argument>&gt;<pos:position pos:line="41" pos:column="70"/></argument_list><argument_list pos:line="41" pos:column="67">(<argument><expr><operator pos:line="41" pos:column="68">-<pos:position pos:line="41" pos:column="69"/></operator><literal type="number" pos:line="41" pos:column="69">1<pos:position pos:line="41" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="71"/></argument_list></cast></expr></argument>)<pos:position pos:line="41" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="73"/></expr_stmt>
    }<pos:position pos:line="42" pos:column="6"/></block></then></if></elseif> <elseif pos:line="42" pos:column="7">else <if pos:line="42" pos:column="12">if <condition pos:line="42" pos:column="15">(<expr><name pos:line="42" pos:column="16">totalSize<pos:position pos:line="42" pos:column="25"/></name> <operator pos:line="42" pos:column="26">!=<pos:position pos:line="42" pos:column="28"/></operator> <name><name pos:line="42" pos:column="29">anchor<pos:position pos:line="42" pos:column="35"/></name><operator pos:line="42" pos:column="35">.<pos:position pos:line="42" pos:column="36"/></operator><name pos:line="42" pos:column="36">basics<pos:position pos:line="42" pos:column="42"/></name><operator pos:line="42" pos:column="42">.<pos:position pos:line="42" pos:column="43"/></operator><name pos:line="42" pos:column="43">swap_file_sz<pos:position pos:line="42" pos:column="55"/></name></name></expr>)<pos:position pos:line="42" pos:column="56"/></condition><then pos:line="42" pos:column="56"> <block pos:line="42" pos:column="57">{
        <expr_stmt><expr><name><name pos:line="43" pos:column="9">le<pos:position pos:line="43" pos:column="11"/></name><operator pos:line="43" pos:column="11">.<pos:position pos:line="43" pos:column="12"/></operator><name pos:line="43" pos:column="12">state<pos:position pos:line="43" pos:column="17"/></name></name> <operator pos:line="43" pos:column="18">=<pos:position pos:line="43" pos:column="19"/></operator> <name><name pos:line="43" pos:column="20">LoadingEntry<pos:position pos:line="43" pos:column="32"/></name><operator pos:line="43" pos:column="32">::<pos:position pos:line="43" pos:column="34"/></operator><name pos:line="43" pos:column="34">leCorrupted<pos:position pos:line="43" pos:column="45"/></name></name></expr>;<pos:position pos:line="43" pos:column="46"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="44" pos:column="9">freeBadEntry<pos:position pos:line="44" pos:column="21"/></name><argument_list pos:line="44" pos:column="21">(<argument><expr><name pos:line="44" pos:column="22">fileno<pos:position pos:line="44" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="30">"size mismatch"<pos:position pos:line="44" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="47"/></expr_stmt>
        <return pos:line="45" pos:column="9">return;<pos:position pos:line="45" pos:column="16"/></return>
    }<pos:position pos:line="46" pos:column="6"/></block></then></if></elseif></if>

    <expr_stmt><expr><name><name pos:line="48" pos:column="5">le<pos:position pos:line="48" pos:column="7"/></name><operator pos:line="48" pos:column="7">.<pos:position pos:line="48" pos:column="8"/></operator><name pos:line="48" pos:column="8">size<pos:position pos:line="48" pos:column="12"/></name></name> <operator pos:line="48" pos:column="13">+=<pos:position pos:line="48" pos:column="15"/></operator> <name><name pos:line="48" pos:column="16">header<pos:position pos:line="48" pos:column="22"/></name><operator pos:line="48" pos:column="22">.<pos:position pos:line="48" pos:column="23"/></operator><name pos:line="48" pos:column="23">payloadSize<pos:position pos:line="48" pos:column="34"/></name></name></expr>;<pos:position pos:line="48" pos:column="35"/></expr_stmt>

    <if pos:line="50" pos:column="5">if <condition pos:line="50" pos:column="8">(<expr><name pos:line="50" pos:column="9">totalSize<pos:position pos:line="50" pos:column="18"/></name> <operator pos:line="50" pos:column="19">&gt;<pos:position pos:line="50" pos:column="23"/></operator> <literal type="number" pos:line="50" pos:column="21">0<pos:position pos:line="50" pos:column="22"/></literal> <operator pos:line="50" pos:column="23">&amp;&amp;<pos:position pos:line="50" pos:column="33"/></operator> <name><name pos:line="50" pos:column="26">le<pos:position pos:line="50" pos:column="28"/></name><operator pos:line="50" pos:column="28">.<pos:position pos:line="50" pos:column="29"/></operator><name pos:line="50" pos:column="29">size<pos:position pos:line="50" pos:column="33"/></name></name> <operator pos:line="50" pos:column="34">&gt;<pos:position pos:line="50" pos:column="38"/></operator> <name pos:line="50" pos:column="36">totalSize<pos:position pos:line="50" pos:column="45"/></name></expr>)<pos:position pos:line="50" pos:column="46"/></condition><then pos:line="50" pos:column="46"> <block pos:line="50" pos:column="47">{ <comment type="line" pos:line="50" pos:column="49">// overflow</comment>
        <expr_stmt><expr><call><name pos:line="51" pos:column="9">debugs<pos:position pos:line="51" pos:column="15"/></name><argument_list pos:line="51" pos:column="15">(<argument><expr><literal type="number" pos:line="51" pos:column="16">47<pos:position pos:line="51" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="51" pos:column="20">8<pos:position pos:line="51" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="23">"overflow: "<pos:position pos:line="51" pos:column="35"/></literal> <operator pos:line="51" pos:column="36">&lt;&lt;<pos:position pos:line="51" pos:column="44"/></operator> <name><name pos:line="51" pos:column="39">le<pos:position pos:line="51" pos:column="41"/></name><operator pos:line="51" pos:column="41">.<pos:position pos:line="51" pos:column="42"/></operator><name pos:line="51" pos:column="42">size<pos:position pos:line="51" pos:column="46"/></name></name> <operator pos:line="51" pos:column="47">&lt;&lt;<pos:position pos:line="51" pos:column="55"/></operator> <literal type="string" pos:line="51" pos:column="50">" &gt; "<pos:position pos:line="51" pos:column="58"/></literal> <operator pos:line="51" pos:column="56">&lt;&lt;<pos:position pos:line="51" pos:column="64"/></operator> <name pos:line="51" pos:column="59">totalSize<pos:position pos:line="51" pos:column="68"/></name></expr></argument>)<pos:position pos:line="51" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="70"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="52" pos:column="9">le<pos:position pos:line="52" pos:column="11"/></name><operator pos:line="52" pos:column="11">.<pos:position pos:line="52" pos:column="12"/></operator><name pos:line="52" pos:column="12">state<pos:position pos:line="52" pos:column="17"/></name></name> <operator pos:line="52" pos:column="18">=<pos:position pos:line="52" pos:column="19"/></operator> <name><name pos:line="52" pos:column="20">LoadingEntry<pos:position pos:line="52" pos:column="32"/></name><operator pos:line="52" pos:column="32">::<pos:position pos:line="52" pos:column="34"/></operator><name pos:line="52" pos:column="34">leCorrupted<pos:position pos:line="52" pos:column="45"/></name></name></expr>;<pos:position pos:line="52" pos:column="46"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="53" pos:column="9">freeBadEntry<pos:position pos:line="53" pos:column="21"/></name><argument_list pos:line="53" pos:column="21">(<argument><expr><name pos:line="53" pos:column="22">fileno<pos:position pos:line="53" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="30">"overflowing"<pos:position pos:line="53" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="45"/></expr_stmt>
        <return pos:line="54" pos:column="9">return;<pos:position pos:line="54" pos:column="16"/></return>
    }<pos:position pos:line="55" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="57" pos:column="5">mapSlot<pos:position pos:line="57" pos:column="12"/></name><argument_list pos:line="57" pos:column="12">(<argument><expr><name pos:line="57" pos:column="13">slotId<pos:position pos:line="57" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="21">header<pos:position pos:line="57" pos:column="27"/></name></expr></argument>)<pos:position pos:line="57" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="29"/></expr_stmt>
    <if pos:line="58" pos:column="5">if <condition pos:line="58" pos:column="8">(<expr><name pos:line="58" pos:column="9">totalSize<pos:position pos:line="58" pos:column="18"/></name> <operator pos:line="58" pos:column="19">&gt;<pos:position pos:line="58" pos:column="23"/></operator> <literal type="number" pos:line="58" pos:column="21">0<pos:position pos:line="58" pos:column="22"/></literal> <operator pos:line="58" pos:column="23">&amp;&amp;<pos:position pos:line="58" pos:column="33"/></operator> <name><name pos:line="58" pos:column="26">le<pos:position pos:line="58" pos:column="28"/></name><operator pos:line="58" pos:column="28">.<pos:position pos:line="58" pos:column="29"/></operator><name pos:line="58" pos:column="29">size<pos:position pos:line="58" pos:column="33"/></name></name> <operator pos:line="58" pos:column="34">==<pos:position pos:line="58" pos:column="36"/></operator> <name pos:line="58" pos:column="37">totalSize<pos:position pos:line="58" pos:column="46"/></name></expr>)<pos:position pos:line="58" pos:column="47"/></condition><then pos:line="58" pos:column="47"> <block pos:line="58" pos:column="48">{
        <comment type="line" pos:line="59" pos:column="9">// entry fully loaded, unlock it</comment>
        <comment type="line" pos:line="60" pos:column="9">// we have validated that all db cells for this entry were loaded</comment>
        <expr_stmt><expr><call><name pos:line="61" pos:column="9">EBIT_SET<pos:position pos:line="61" pos:column="17"/></name><argument_list pos:line="61" pos:column="17">(<argument><expr><name><name pos:line="61" pos:column="18">anchor<pos:position pos:line="61" pos:column="24"/></name><operator pos:line="61" pos:column="24">.<pos:position pos:line="61" pos:column="25"/></operator><name pos:line="61" pos:column="25">basics<pos:position pos:line="61" pos:column="31"/></name><operator pos:line="61" pos:column="31">.<pos:position pos:line="61" pos:column="32"/></operator><name pos:line="61" pos:column="32">flags<pos:position pos:line="61" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="39">ENTRY_VALIDATED<pos:position pos:line="61" pos:column="54"/></name></expr></argument>)<pos:position pos:line="61" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="56"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="62" pos:column="9">le<pos:position pos:line="62" pos:column="11"/></name><operator pos:line="62" pos:column="11">.<pos:position pos:line="62" pos:column="12"/></operator><name pos:line="62" pos:column="12">state<pos:position pos:line="62" pos:column="17"/></name></name> <operator pos:line="62" pos:column="18">=<pos:position pos:line="62" pos:column="19"/></operator> <name><name pos:line="62" pos:column="20">LoadingEntry<pos:position pos:line="62" pos:column="32"/></name><operator pos:line="62" pos:column="32">::<pos:position pos:line="62" pos:column="34"/></operator><name pos:line="62" pos:column="34">leLoaded<pos:position pos:line="62" pos:column="42"/></name></name></expr>;<pos:position pos:line="62" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="63" pos:column="9">sd<pos:position pos:line="63" pos:column="11"/></name><operator pos:line="63" pos:column="11">-&gt;<pos:position pos:line="63" pos:column="16"/></operator><name pos:line="63" pos:column="13">map<pos:position pos:line="63" pos:column="16"/></name><operator pos:line="63" pos:column="16">-&gt;<pos:position pos:line="63" pos:column="21"/></operator><name pos:line="63" pos:column="18">closeForWriting<pos:position pos:line="63" pos:column="33"/></name></name><argument_list pos:line="63" pos:column="33">(<argument><expr><name pos:line="63" pos:column="34">fileno<pos:position pos:line="63" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="63" pos:column="42">false<pos:position pos:line="63" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="64" pos:column="9">++<pos:position pos:line="64" pos:column="11"/></operator><name><name pos:line="64" pos:column="11">counts<pos:position pos:line="64" pos:column="17"/></name><operator pos:line="64" pos:column="17">.<pos:position pos:line="64" pos:column="18"/></operator><name pos:line="64" pos:column="18">objcount<pos:position pos:line="64" pos:column="26"/></name></name></expr>;<pos:position pos:line="64" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="65" pos:column="6"/></block></then></if>
}<pos:position pos:line="66" pos:column="2"/></block></function></unit>
