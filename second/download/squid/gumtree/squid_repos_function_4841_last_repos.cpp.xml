<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4841_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Http<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">Stream<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">sendBody<pos:position pos:line="2" pos:column="23"/></name></name><parameter_list pos:line="2" pos:column="23">(<parameter><decl><type><name pos:line="2" pos:column="24">StoreIOBuffer<pos:position pos:line="2" pos:column="37"/></name></type> <name pos:line="2" pos:column="38">bodyData<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="47"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">!<pos:position pos:line="4" pos:column="10"/></operator><call><name pos:line="4" pos:column="10">multipartRangeRequest<pos:position pos:line="4" pos:column="31"/></name><argument_list pos:line="4" pos:column="31">()<pos:position pos:line="4" pos:column="33"/></argument_list></call> <operator pos:line="4" pos:column="34">&amp;&amp;<pos:position pos:line="4" pos:column="44"/></operator> <operator pos:line="4" pos:column="37">!<pos:position pos:line="4" pos:column="38"/></operator><name><name pos:line="4" pos:column="38">http<pos:position pos:line="4" pos:column="42"/></name><operator pos:line="4" pos:column="42">-&gt;<pos:position pos:line="4" pos:column="47"/></operator><name pos:line="4" pos:column="44">request<pos:position pos:line="4" pos:column="51"/></name><operator pos:line="4" pos:column="51">-&gt;<pos:position pos:line="4" pos:column="56"/></operator><name pos:line="4" pos:column="53">flags<pos:position pos:line="4" pos:column="58"/></name><operator pos:line="4" pos:column="58">.<pos:position pos:line="4" pos:column="59"/></operator><name pos:line="4" pos:column="59">chunkedReply<pos:position pos:line="4" pos:column="71"/></name></name></expr>)<pos:position pos:line="4" pos:column="72"/></condition><then pos:line="4" pos:column="72"> <block pos:line="4" pos:column="73">{
        <decl_stmt><decl><type><name pos:line="5" pos:column="9">size_t<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">length<pos:position pos:line="5" pos:column="22"/></name> <init pos:line="5" pos:column="23">= <expr><call><name pos:line="5" pos:column="25">lengthToSend<pos:position pos:line="5" pos:column="37"/></name><argument_list pos:line="5" pos:column="37">(<argument><expr><call><name><name pos:line="5" pos:column="38">bodyData<pos:position pos:line="5" pos:column="46"/></name><operator pos:line="5" pos:column="46">.<pos:position pos:line="5" pos:column="47"/></operator><name pos:line="5" pos:column="47">range<pos:position pos:line="5" pos:column="52"/></name></name><argument_list pos:line="5" pos:column="52">()<pos:position pos:line="5" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="56"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="6" pos:column="9">noteSentBodyBytes<pos:position pos:line="6" pos:column="26"/></name><argument_list pos:line="6" pos:column="26">(<argument><expr><name pos:line="6" pos:column="27">length<pos:position pos:line="6" pos:column="33"/></name></expr></argument>)<pos:position pos:line="6" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">getConn<pos:position pos:line="7" pos:column="16"/></name><argument_list pos:line="7" pos:column="16">()<pos:position pos:line="7" pos:column="18"/></argument_list></call><operator pos:line="7" pos:column="18">-&gt;<pos:position pos:line="7" pos:column="23"/></operator><call><name pos:line="7" pos:column="20">write<pos:position pos:line="7" pos:column="25"/></name><argument_list pos:line="7" pos:column="25">(<argument><expr><name><name pos:line="7" pos:column="26">bodyData<pos:position pos:line="7" pos:column="34"/></name><operator pos:line="7" pos:column="34">.<pos:position pos:line="7" pos:column="35"/></operator><name pos:line="7" pos:column="35">data<pos:position pos:line="7" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="41">length<pos:position pos:line="7" pos:column="47"/></name></expr></argument>)<pos:position pos:line="7" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="49"/></expr_stmt>
        <return pos:line="8" pos:column="9">return;<pos:position pos:line="8" pos:column="16"/></return>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="11" pos:column="5">MemBuf<pos:position pos:line="11" pos:column="11"/></name></type> <name pos:line="11" pos:column="12">mb<pos:position pos:line="11" pos:column="14"/></name></decl>;<pos:position pos:line="11" pos:column="15"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="12" pos:column="5">mb<pos:position pos:line="12" pos:column="7"/></name><operator pos:line="12" pos:column="7">.<pos:position pos:line="12" pos:column="8"/></operator><name pos:line="12" pos:column="8">init<pos:position pos:line="12" pos:column="12"/></name></name><argument_list pos:line="12" pos:column="12">()<pos:position pos:line="12" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="15"/></expr_stmt>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><call><name pos:line="13" pos:column="9">multipartRangeRequest<pos:position pos:line="13" pos:column="30"/></name><argument_list pos:line="13" pos:column="30">()<pos:position pos:line="13" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="33"/></condition><then pos:line="13" pos:column="33">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="9">packRange<pos:position pos:line="14" pos:column="18"/></name><argument_list pos:line="14" pos:column="18">(<argument><expr><name pos:line="14" pos:column="19">bodyData<pos:position pos:line="14" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="29">&amp;<pos:position pos:line="14" pos:column="34"/></operator><name pos:line="14" pos:column="30">mb<pos:position pos:line="14" pos:column="32"/></name></expr></argument>)<pos:position pos:line="14" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="34"/></expr_stmt></block></then>
    <else pos:line="15" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="9">packChunk<pos:position pos:line="16" pos:column="18"/></name><argument_list pos:line="16" pos:column="18">(<argument><expr><name pos:line="16" pos:column="19">bodyData<pos:position pos:line="16" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="29">mb<pos:position pos:line="16" pos:column="31"/></name></expr></argument>)<pos:position pos:line="16" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="33"/></expr_stmt></block></else></if>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><call><name><name pos:line="18" pos:column="9">mb<pos:position pos:line="18" pos:column="11"/></name><operator pos:line="18" pos:column="11">.<pos:position pos:line="18" pos:column="12"/></operator><name pos:line="18" pos:column="12">contentSize<pos:position pos:line="18" pos:column="23"/></name></name><argument_list pos:line="18" pos:column="23">()<pos:position pos:line="18" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="26"/></condition><then pos:line="18" pos:column="26">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="19" pos:column="9">getConn<pos:position pos:line="19" pos:column="16"/></name><argument_list pos:line="19" pos:column="16">()<pos:position pos:line="19" pos:column="18"/></argument_list></call><operator pos:line="19" pos:column="18">-&gt;<pos:position pos:line="19" pos:column="23"/></operator><call><name pos:line="19" pos:column="20">write<pos:position pos:line="19" pos:column="25"/></name><argument_list pos:line="19" pos:column="25">(<argument><expr><operator pos:line="19" pos:column="26">&amp;<pos:position pos:line="19" pos:column="31"/></operator><name pos:line="19" pos:column="27">mb<pos:position pos:line="19" pos:column="29"/></name></expr></argument>)<pos:position pos:line="19" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="31"/></expr_stmt></block></then>
    <else pos:line="20" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="9">writeComplete<pos:position pos:line="21" pos:column="22"/></name><argument_list pos:line="21" pos:column="22">(<argument><expr><literal type="number" pos:line="21" pos:column="23">0<pos:position pos:line="21" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="26"/></expr_stmt></block></else></if>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
