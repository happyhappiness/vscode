<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_55_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">readConfigFile<pos:position pos:line="2" pos:column="15"/></name><parameter_list pos:line="2" pos:column="15">( <parameter><decl><type><name pos:line="2" pos:column="17">CacheDirVector<pos:position pos:line="2" pos:column="31"/></name><modifier pos:line="2" pos:column="31">&amp;<pos:position pos:line="2" pos:column="36"/></modifier></type> <name pos:line="2" pos:column="33">cachedir<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="43">const<pos:position pos:line="2" pos:column="48"/></specifier> <name pos:line="2" pos:column="49">char<pos:position pos:line="2" pos:column="53"/></name><modifier pos:line="2" pos:column="53">*<pos:position pos:line="2" pos:column="54"/></modifier></type> <name pos:line="2" pos:column="55">fn<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="59">FILE<pos:position pos:line="2" pos:column="63"/></name><modifier pos:line="2" pos:column="63">*<pos:position pos:line="2" pos:column="64"/></modifier></type> <name pos:line="2" pos:column="65">debug<pos:position pos:line="2" pos:column="70"/></name></decl></parameter> )<pos:position pos:line="2" pos:column="72"/></parameter_list>
<comment type="line" pos:line="3" pos:column="1">// purpose: read squid.conf file and extract cache_dir entries</comment>
<comment type="line" pos:line="4" pos:column="1">// paramtr: cachedir (OUT): vector with an entry for each cache_dir found</comment>
<comment type="line" pos:line="5" pos:column="1">//          fn (IN): file name of squid.conf to use</comment>
<comment type="line" pos:line="6" pos:column="1">// returns: number of entries, or negative to warn of errors</comment>
<block pos:line="7" pos:column="1">{
    <decl_stmt><decl><specifier pos:line="8" pos:column="5">static<pos:position pos:line="8" pos:column="11"/></specifier> <type><specifier pos:line="8" pos:column="12">const<pos:position pos:line="8" pos:column="17"/></specifier> <name pos:line="8" pos:column="18">char<pos:position pos:line="8" pos:column="22"/></name><modifier pos:line="8" pos:column="22">*<pos:position pos:line="8" pos:column="23"/></modifier></type> <name pos:line="8" pos:column="24">expression<pos:position pos:line="8" pos:column="34"/></name> <init pos:line="8" pos:column="35">=
        <expr><literal type="string" pos:line="9" pos:column="9">"^[ \t]*cache_dir([ \t]+([[:alpha:]]+))?[ \t]+([[:graph:]]+)[ \t]+([0-9]+)[ \t]+([0-9]+)[ \t]+([0-9]+)"<pos:position pos:line="9" pos:column="112"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="113"/></decl_stmt>

    <comment type="line" pos:line="11" pos:column="5">// try to open file</comment>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">( <expr><name pos:line="12" pos:column="10">debug<pos:position pos:line="12" pos:column="15"/></name></expr> )<pos:position pos:line="12" pos:column="17"/></condition><then pos:line="12" pos:column="17"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="18">fprintf<pos:position pos:line="12" pos:column="25"/></name><argument_list pos:line="12" pos:column="25">( <argument><expr><name pos:line="12" pos:column="27">debug<pos:position pos:line="12" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="34">"# trying to open %s\n"<pos:position pos:line="12" pos:column="57"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="12" pos:column="59">fn<pos:position pos:line="12" pos:column="61"/></name></expr> ?<pos:position pos:line="12" pos:column="63"/></condition><then pos:line="12" pos:column="63"> <expr><name pos:line="12" pos:column="64">fn<pos:position pos:line="12" pos:column="66"/></name></expr> <pos:position pos:line="12" pos:column="67"/></then><else pos:line="12" pos:column="67">: <expr><literal type="string" pos:line="12" pos:column="69">"(null)"<pos:position pos:line="12" pos:column="77"/></literal></expr></else></ternary></expr></argument> )<pos:position pos:line="12" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="80"/></expr_stmt></block></then></if>
    <decl_stmt><decl><type><name><name pos:line="13" pos:column="5">std<pos:position pos:line="13" pos:column="8"/></name><operator pos:line="13" pos:column="8">::<pos:position pos:line="13" pos:column="10"/></operator><name pos:line="13" pos:column="10">ifstream<pos:position pos:line="13" pos:column="18"/></name></name></type> <name pos:line="13" pos:column="19">cfgin<pos:position pos:line="13" pos:column="24"/></name><argument_list pos:line="13" pos:column="24">(<argument><expr><name pos:line="13" pos:column="25">fn<pos:position pos:line="13" pos:column="27"/></name></expr></argument>)<pos:position pos:line="13" pos:column="28"/></argument_list></decl>;<pos:position pos:line="13" pos:column="29"/></decl_stmt>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><operator pos:line="14" pos:column="9">!<pos:position pos:line="14" pos:column="10"/></operator><name pos:line="14" pos:column="10">cfgin<pos:position pos:line="14" pos:column="15"/></name></expr>)<pos:position pos:line="14" pos:column="16"/></condition><then pos:line="14" pos:column="16"> <block pos:line="14" pos:column="17">{
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">fprintf<pos:position pos:line="15" pos:column="16"/></name><argument_list pos:line="15" pos:column="16">( <argument><expr><name pos:line="15" pos:column="18">stderr<pos:position pos:line="15" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="26">"fopen %s: %s\n"<pos:position pos:line="15" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="44">fn<pos:position pos:line="15" pos:column="46"/></name></expr></argument>, <argument><expr><call><name pos:line="15" pos:column="48">strerror<pos:position pos:line="15" pos:column="56"/></name><argument_list pos:line="15" pos:column="56">(<argument><expr><name pos:line="15" pos:column="57">errno<pos:position pos:line="15" pos:column="62"/></name></expr></argument>)<pos:position pos:line="15" pos:column="63"/></argument_list></call></expr></argument> )<pos:position pos:line="15" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="66"/></expr_stmt>
        <return pos:line="16" pos:column="9">return <expr><operator pos:line="16" pos:column="16">-<pos:position pos:line="16" pos:column="17"/></operator><literal type="number" pos:line="16" pos:column="17">1<pos:position pos:line="16" pos:column="18"/></literal></expr>;<pos:position pos:line="16" pos:column="19"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="19" pos:column="5">// prepare regular expression for matching</comment>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">( <expr><name pos:line="20" pos:column="10">debug<pos:position pos:line="20" pos:column="15"/></name></expr> )<pos:position pos:line="20" pos:column="17"/></condition><then pos:line="20" pos:column="17"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="18">fprintf<pos:position pos:line="20" pos:column="25"/></name><argument_list pos:line="20" pos:column="25">( <argument><expr><name pos:line="20" pos:column="27">debug<pos:position pos:line="20" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="34">"# trying to compile \"%s\"\n"<pos:position pos:line="20" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="66">expression<pos:position pos:line="20" pos:column="76"/></name></expr></argument> )<pos:position pos:line="20" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="79"/></expr_stmt></block></then></if>
    <decl_stmt><decl><type><name pos:line="21" pos:column="5">regex_t<pos:position pos:line="21" pos:column="12"/></name></type> <name pos:line="21" pos:column="13">rexp<pos:position pos:line="21" pos:column="17"/></name></decl>;<pos:position pos:line="21" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="22" pos:column="5">int<pos:position pos:line="22" pos:column="8"/></name></type> <name pos:line="22" pos:column="9">result<pos:position pos:line="22" pos:column="15"/></name> <init pos:line="22" pos:column="16">= <expr><call><name pos:line="22" pos:column="18">regcomp<pos:position pos:line="22" pos:column="25"/></name><argument_list pos:line="22" pos:column="25">( <argument><expr><operator pos:line="22" pos:column="27">&amp;<pos:position pos:line="22" pos:column="32"/></operator><name pos:line="22" pos:column="28">rexp<pos:position pos:line="22" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="34">expression<pos:position pos:line="22" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="46">REG_EXTENDED<pos:position pos:line="22" pos:column="58"/></name></expr></argument> )<pos:position pos:line="22" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="22" pos:column="61"/></decl_stmt>
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">( <expr><name pos:line="23" pos:column="10">result<pos:position pos:line="23" pos:column="16"/></name> <operator pos:line="23" pos:column="17">!=<pos:position pos:line="23" pos:column="19"/></operator> <literal type="number" pos:line="23" pos:column="20">0<pos:position pos:line="23" pos:column="21"/></literal></expr> )<pos:position pos:line="23" pos:column="23"/></condition><then pos:line="23" pos:column="23"> <block pos:line="23" pos:column="24">{
        <decl_stmt><decl><type><name pos:line="24" pos:column="9">char<pos:position pos:line="24" pos:column="13"/></name></type> <name><name pos:line="24" pos:column="14">buffer<pos:position pos:line="24" pos:column="20"/></name><index pos:line="24" pos:column="20">[<expr><literal type="number" pos:line="24" pos:column="21">256<pos:position pos:line="24" pos:column="24"/></literal></expr>]<pos:position pos:line="24" pos:column="25"/></index></name></decl>;<pos:position pos:line="24" pos:column="26"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">regerror<pos:position pos:line="25" pos:column="17"/></name><argument_list pos:line="25" pos:column="17">( <argument><expr><name pos:line="25" pos:column="19">result<pos:position pos:line="25" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="27">&amp;<pos:position pos:line="25" pos:column="32"/></operator><name pos:line="25" pos:column="28">rexp<pos:position pos:line="25" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="34">buffer<pos:position pos:line="25" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="25" pos:column="42">sizeof<argument_list pos:line="25" pos:column="48">(<argument><expr><name pos:line="25" pos:column="49">buffer<pos:position pos:line="25" pos:column="55"/></name></expr></argument>)<pos:position pos:line="25" pos:column="56"/></argument_list></sizeof></expr></argument> )<pos:position pos:line="25" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="59"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">fprintf<pos:position pos:line="26" pos:column="16"/></name><argument_list pos:line="26" pos:column="16">( <argument><expr><name pos:line="26" pos:column="18">stderr<pos:position pos:line="26" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="26">"regular expression \"%s\": %s\n"<pos:position pos:line="26" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="61">expression<pos:position pos:line="26" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="73">buffer<pos:position pos:line="26" pos:column="79"/></name></expr></argument> )<pos:position pos:line="26" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="82"/></expr_stmt>
        <return pos:line="27" pos:column="9">return <expr><operator pos:line="27" pos:column="16">-<pos:position pos:line="27" pos:column="17"/></operator><literal type="number" pos:line="27" pos:column="17">1<pos:position pos:line="27" pos:column="18"/></literal></expr>;<pos:position pos:line="27" pos:column="19"/></return>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="30" pos:column="5">// read line by line</comment>
    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">( <expr><name pos:line="31" pos:column="10">debug<pos:position pos:line="31" pos:column="15"/></name></expr> )<pos:position pos:line="31" pos:column="17"/></condition><then pos:line="31" pos:column="17"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="18">fputs<pos:position pos:line="31" pos:column="23"/></name><argument_list pos:line="31" pos:column="23">( <argument><expr><literal type="string" pos:line="31" pos:column="25">"# trying to read lines\n"<pos:position pos:line="31" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="53">debug<pos:position pos:line="31" pos:column="58"/></name></expr></argument> )<pos:position pos:line="31" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="61"/></expr_stmt></block></then></if>

    <decl_stmt><decl><type><name pos:line="33" pos:column="5">regmatch_t<pos:position pos:line="33" pos:column="15"/></name></type> <name><name pos:line="33" pos:column="16">subs<pos:position pos:line="33" pos:column="20"/></name><index pos:line="33" pos:column="20">[<expr><literal type="number" pos:line="33" pos:column="21">8<pos:position pos:line="33" pos:column="22"/></literal></expr>]<pos:position pos:line="33" pos:column="23"/></index></name></decl>;<pos:position pos:line="33" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="34" pos:column="5">char<pos:position pos:line="34" pos:column="9"/></name> <modifier pos:line="34" pos:column="10">*<pos:position pos:line="34" pos:column="11"/></modifier></type><name pos:line="34" pos:column="11">s<pos:position pos:line="34" pos:column="12"/></name></decl>, <decl><type ref="prev"/><name><name pos:line="34" pos:column="14">line<pos:position pos:line="34" pos:column="18"/></name><index pos:line="34" pos:column="18">[<expr><literal type="number" pos:line="34" pos:column="19">1024<pos:position pos:line="34" pos:column="23"/></literal></expr>]<pos:position pos:line="34" pos:column="24"/></index></name></decl>;<pos:position pos:line="34" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="35" pos:column="5">CacheDir<pos:position pos:line="35" pos:column="13"/></name></type> <name pos:line="35" pos:column="14">cd<pos:position pos:line="35" pos:column="16"/></name></decl>;<pos:position pos:line="35" pos:column="17"/></decl_stmt>
    <while pos:line="36" pos:column="5">while <condition pos:line="36" pos:column="11">( <expr><call><name><name pos:line="36" pos:column="13">cfgin<pos:position pos:line="36" pos:column="18"/></name><operator pos:line="36" pos:column="18">.<pos:position pos:line="36" pos:column="19"/></operator><name pos:line="36" pos:column="19">getline<pos:position pos:line="36" pos:column="26"/></name></name><argument_list pos:line="36" pos:column="26">( <argument><expr><name pos:line="36" pos:column="28">line<pos:position pos:line="36" pos:column="32"/></name></expr></argument>, <argument><expr><sizeof pos:line="36" pos:column="34">sizeof<argument_list pos:line="36" pos:column="40">(<argument><expr><name pos:line="36" pos:column="41">line<pos:position pos:line="36" pos:column="45"/></name></expr></argument>)<pos:position pos:line="36" pos:column="46"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="36" pos:column="47"/></argument_list></call></expr> )<pos:position pos:line="36" pos:column="49"/></condition> <block pos:line="36" pos:column="50">{
        <comment type="line" pos:line="37" pos:column="9">// FIXME: overly long lines</comment>

        <comment type="line" pos:line="39" pos:column="9">// terminate line at start of comment</comment>
        <if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">( <expr><operator pos:line="40" pos:column="14">(<pos:position pos:line="40" pos:column="15"/></operator><name pos:line="40" pos:column="15">s<pos:position pos:line="40" pos:column="16"/></name> <operator pos:line="40" pos:column="17">=<pos:position pos:line="40" pos:column="18"/></operator> <operator pos:line="40" pos:column="19">(<pos:position pos:line="40" pos:column="20"/></operator><name pos:line="40" pos:column="20">char<pos:position pos:line="40" pos:column="24"/></name><operator pos:line="40" pos:column="24">*<pos:position pos:line="40" pos:column="25"/></operator><operator pos:line="40" pos:column="25">)<pos:position pos:line="40" pos:column="26"/></operator> <call><name pos:line="40" pos:column="27">memchr<pos:position pos:line="40" pos:column="33"/></name><argument_list pos:line="40" pos:column="33">( <argument><expr><name pos:line="40" pos:column="35">line<pos:position pos:line="40" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="40" pos:column="41">'#'<pos:position pos:line="40" pos:column="44"/></literal></expr></argument>, <argument><expr><sizeof pos:line="40" pos:column="46">sizeof<argument_list pos:line="40" pos:column="52">(<argument><expr><name pos:line="40" pos:column="53">line<pos:position pos:line="40" pos:column="57"/></name></expr></argument>)<pos:position pos:line="40" pos:column="58"/></argument_list></sizeof></expr></argument> )<pos:position pos:line="40" pos:column="60"/></argument_list></call><operator pos:line="40" pos:column="60">)<pos:position pos:line="40" pos:column="61"/></operator></expr> )<pos:position pos:line="40" pos:column="63"/></condition><then pos:line="40" pos:column="63"> <block type="pseudo"><expr_stmt><expr><operator pos:line="40" pos:column="64">*<pos:position pos:line="40" pos:column="65"/></operator><name pos:line="40" pos:column="65">s<pos:position pos:line="40" pos:column="66"/></name> <operator pos:line="40" pos:column="67">=<pos:position pos:line="40" pos:column="68"/></operator> <literal type="char" pos:line="40" pos:column="69">'\0'<pos:position pos:line="40" pos:column="73"/></literal></expr>;<pos:position pos:line="40" pos:column="74"/></expr_stmt></block></then></if>

        <comment type="line" pos:line="42" pos:column="9">// quick skip</comment>
        <if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">( <expr><operator pos:line="43" pos:column="14">*<pos:position pos:line="43" pos:column="15"/></operator><name pos:line="43" pos:column="15">line<pos:position pos:line="43" pos:column="19"/></name> <operator pos:line="43" pos:column="20">==<pos:position pos:line="43" pos:column="22"/></operator> <literal type="char" pos:line="43" pos:column="23">'\0'<pos:position pos:line="43" pos:column="27"/></literal> <operator pos:line="43" pos:column="28">||<pos:position pos:line="43" pos:column="30"/></operator> <operator pos:line="43" pos:column="31">*<pos:position pos:line="43" pos:column="32"/></operator><name pos:line="43" pos:column="32">line<pos:position pos:line="43" pos:column="36"/></name> <operator pos:line="43" pos:column="37">==<pos:position pos:line="43" pos:column="39"/></operator> <literal type="char" pos:line="43" pos:column="40">'\n'<pos:position pos:line="43" pos:column="44"/></literal></expr> )<pos:position pos:line="43" pos:column="46"/></condition><then pos:line="43" pos:column="46"> <block type="pseudo"><continue pos:line="43" pos:column="47">continue;<pos:position pos:line="43" pos:column="56"/></continue></block></then></if>

        <comment type="line" pos:line="45" pos:column="9">// test line</comment>
        <if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">( <expr><operator pos:line="46" pos:column="14">(<pos:position pos:line="46" pos:column="15"/></operator><name pos:line="46" pos:column="15">result<pos:position pos:line="46" pos:column="21"/></name><operator pos:line="46" pos:column="21">=<pos:position pos:line="46" pos:column="22"/></operator><call><name pos:line="46" pos:column="22">regexec<pos:position pos:line="46" pos:column="29"/></name><argument_list pos:line="46" pos:column="29">( <argument><expr><operator pos:line="46" pos:column="31">&amp;<pos:position pos:line="46" pos:column="36"/></operator><name pos:line="46" pos:column="32">rexp<pos:position pos:line="46" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="38">line<pos:position pos:line="46" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="44">7<pos:position pos:line="46" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="47">subs<pos:position pos:line="46" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="53">0<pos:position pos:line="46" pos:column="54"/></literal></expr></argument> )<pos:position pos:line="46" pos:column="56"/></argument_list></call><operator pos:line="46" pos:column="56">)<pos:position pos:line="46" pos:column="57"/></operator> <operator pos:line="46" pos:column="58">!=<pos:position pos:line="46" pos:column="60"/></operator> <literal type="number" pos:line="46" pos:column="61">0<pos:position pos:line="46" pos:column="62"/></literal></expr> )<pos:position pos:line="46" pos:column="64"/></condition><then pos:line="46" pos:column="64"> <block pos:line="46" pos:column="65">{
            <comment type="line" pos:line="47" pos:column="13">// error or no match</comment>
            <if pos:line="48" pos:column="13">if <condition pos:line="48" pos:column="16">( <expr><name pos:line="48" pos:column="18">result<pos:position pos:line="48" pos:column="24"/></name> <operator pos:line="48" pos:column="25">!=<pos:position pos:line="48" pos:column="27"/></operator> <name pos:line="48" pos:column="28">REG_NOMATCH<pos:position pos:line="48" pos:column="39"/></name></expr> )<pos:position pos:line="48" pos:column="41"/></condition><then pos:line="48" pos:column="41"> <block pos:line="48" pos:column="42">{
                <decl_stmt><decl><type><name pos:line="49" pos:column="17">char<pos:position pos:line="49" pos:column="21"/></name></type> <name><name pos:line="49" pos:column="22">buffer<pos:position pos:line="49" pos:column="28"/></name><index pos:line="49" pos:column="28">[<expr><literal type="number" pos:line="49" pos:column="29">256<pos:position pos:line="49" pos:column="32"/></literal></expr>]<pos:position pos:line="49" pos:column="33"/></index></name></decl>;<pos:position pos:line="49" pos:column="34"/></decl_stmt>
                <expr_stmt><expr><call><name pos:line="50" pos:column="17">regerror<pos:position pos:line="50" pos:column="25"/></name><argument_list pos:line="50" pos:column="25">( <argument><expr><name pos:line="50" pos:column="27">result<pos:position pos:line="50" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="35">&amp;<pos:position pos:line="50" pos:column="40"/></operator><name pos:line="50" pos:column="36">rexp<pos:position pos:line="50" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="42">buffer<pos:position pos:line="50" pos:column="48"/></name></expr></argument>, <argument><expr><sizeof pos:line="50" pos:column="50">sizeof<argument_list pos:line="50" pos:column="56">(<argument><expr><name pos:line="50" pos:column="57">buffer<pos:position pos:line="50" pos:column="63"/></name></expr></argument>)<pos:position pos:line="50" pos:column="64"/></argument_list></sizeof></expr></argument> )<pos:position pos:line="50" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="67"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="51" pos:column="17">fprintf<pos:position pos:line="51" pos:column="24"/></name><argument_list pos:line="51" pos:column="24">( <argument><expr><name pos:line="51" pos:column="26">stderr<pos:position pos:line="51" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="34">"while matching \"%s\" against %s%s\n"<pos:position pos:line="51" pos:column="72"/></literal></expr></argument>,
                         <argument><expr><name pos:line="52" pos:column="26">expression<pos:position pos:line="52" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="38">line<pos:position pos:line="52" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="44">buffer<pos:position pos:line="52" pos:column="50"/></name></expr></argument> )<pos:position pos:line="52" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="53"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="53" pos:column="17">regfree<pos:position pos:line="53" pos:column="24"/></name><argument_list pos:line="53" pos:column="24">(<argument><expr><operator pos:line="53" pos:column="25">&amp;<pos:position pos:line="53" pos:column="30"/></operator><name pos:line="53" pos:column="26">rexp<pos:position pos:line="53" pos:column="30"/></name></expr></argument>)<pos:position pos:line="53" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="32"/></expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="54" pos:column="17">cfgin<pos:position pos:line="54" pos:column="22"/></name><operator pos:line="54" pos:column="22">.<pos:position pos:line="54" pos:column="23"/></operator><name pos:line="54" pos:column="23">close<pos:position pos:line="54" pos:column="28"/></name></name><argument_list pos:line="54" pos:column="28">()<pos:position pos:line="54" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="31"/></expr_stmt>
                <return pos:line="55" pos:column="17">return <expr><operator pos:line="55" pos:column="24">-<pos:position pos:line="55" pos:column="25"/></operator><literal type="number" pos:line="55" pos:column="25">1<pos:position pos:line="55" pos:column="26"/></literal></expr>;<pos:position pos:line="55" pos:column="27"/></return>
            }<pos:position pos:line="56" pos:column="14"/></block></then></if>
        }<pos:position pos:line="57" pos:column="10"/></block></then> <else pos:line="57" pos:column="11">else <block pos:line="57" pos:column="16">{
            <comment type="line" pos:line="58" pos:column="13">// match, please record</comment>
            <expr_stmt><expr><call><name pos:line="59" pos:column="13">memset<pos:position pos:line="59" pos:column="19"/></name><argument_list pos:line="59" pos:column="19">( <argument><expr><operator pos:line="59" pos:column="21">&amp;<pos:position pos:line="59" pos:column="26"/></operator><name pos:line="59" pos:column="22">cd<pos:position pos:line="59" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="59" pos:column="26">0<pos:position pos:line="59" pos:column="27"/></literal></expr></argument>, <argument><expr><sizeof pos:line="59" pos:column="29">sizeof<argument_list pos:line="59" pos:column="35">(<argument><expr><name pos:line="59" pos:column="36">cd<pos:position pos:line="59" pos:column="38"/></name></expr></argument>)<pos:position pos:line="59" pos:column="39"/></argument_list></sizeof></expr></argument> )<pos:position pos:line="59" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="42"/></expr_stmt>
            <if pos:line="60" pos:column="13">if <condition pos:line="60" pos:column="16">( <expr><name pos:line="60" pos:column="18">debug<pos:position pos:line="60" pos:column="23"/></name></expr> )<pos:position pos:line="60" pos:column="25"/></condition><then pos:line="60" pos:column="25"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="60" pos:column="26">fprintf<pos:position pos:line="60" pos:column="33"/></name><argument_list pos:line="60" pos:column="33">( <argument><expr><name pos:line="60" pos:column="35">debug<pos:position pos:line="60" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="42">"# match from %d-%d on line %s"<pos:position pos:line="60" pos:column="73"/></literal></expr></argument>,
                                      <argument><expr><operator pos:line="61" pos:column="39">(<pos:position pos:line="61" pos:column="40"/></operator><name pos:line="61" pos:column="40">int<pos:position pos:line="61" pos:column="43"/></name><operator pos:line="61" pos:column="43">)<pos:position pos:line="61" pos:column="44"/></operator><name><name pos:line="61" pos:column="44">subs<pos:position pos:line="61" pos:column="48"/></name><index pos:line="61" pos:column="48">[<expr><literal type="number" pos:line="61" pos:column="49">0<pos:position pos:line="61" pos:column="50"/></literal></expr>]<pos:position pos:line="61" pos:column="51"/></index></name><operator pos:line="61" pos:column="51">.<pos:position pos:line="61" pos:column="52"/></operator><name pos:line="61" pos:column="52">rm_so<pos:position pos:line="61" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="61" pos:column="59">(<pos:position pos:line="61" pos:column="60"/></operator><name pos:line="61" pos:column="60">int<pos:position pos:line="61" pos:column="63"/></name><operator pos:line="61" pos:column="63">)<pos:position pos:line="61" pos:column="64"/></operator><name><name pos:line="61" pos:column="64">subs<pos:position pos:line="61" pos:column="68"/></name><index pos:line="61" pos:column="68">[<expr><literal type="number" pos:line="61" pos:column="69">0<pos:position pos:line="61" pos:column="70"/></literal></expr>]<pos:position pos:line="61" pos:column="71"/></index></name><operator pos:line="61" pos:column="71">.<pos:position pos:line="61" pos:column="72"/></operator><name pos:line="61" pos:column="72">rm_eo<pos:position pos:line="61" pos:column="77"/></name></expr></argument>,
                                      <argument><expr><name pos:line="62" pos:column="39">line<pos:position pos:line="62" pos:column="43"/></name></expr></argument> )<pos:position pos:line="62" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="46"/></expr_stmt></block></then></if>

            <comment type="line" pos:line="64" pos:column="13">// terminate line after matched expression</comment>
            <expr_stmt><expr><name><name pos:line="65" pos:column="13">line<pos:position pos:line="65" pos:column="17"/></name><index pos:line="65" pos:column="17">[ <expr><name><name pos:line="65" pos:column="19">subs<pos:position pos:line="65" pos:column="23"/></name><index pos:line="65" pos:column="23">[<expr><literal type="number" pos:line="65" pos:column="24">0<pos:position pos:line="65" pos:column="25"/></literal></expr>]<pos:position pos:line="65" pos:column="26"/></index></name><operator pos:line="65" pos:column="26">.<pos:position pos:line="65" pos:column="27"/></operator><name pos:line="65" pos:column="27">rm_eo<pos:position pos:line="65" pos:column="32"/></name></expr> ]<pos:position pos:line="65" pos:column="34"/></index></name> <operator pos:line="65" pos:column="35">=<pos:position pos:line="65" pos:column="36"/></operator> <literal type="char" pos:line="65" pos:column="37">'\0'<pos:position pos:line="65" pos:column="41"/></literal></expr>;<pos:position pos:line="65" pos:column="42"/></expr_stmt>

            <comment type="line" pos:line="67" pos:column="13">// extract information. If 6th parenthesis is filled, this is</comment>
            <comment type="line" pos:line="68" pos:column="13">// a new squid with disk types, otherwise it is an older version</comment>
            <decl_stmt><decl><type><name pos:line="69" pos:column="13">int<pos:position pos:line="69" pos:column="16"/></name></type> <name pos:line="69" pos:column="17">offset<pos:position pos:line="69" pos:column="23"/></name> <init pos:line="69" pos:column="24">= <expr><literal type="number" pos:line="69" pos:column="26">2<pos:position pos:line="69" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="69" pos:column="28"/></decl_stmt>
            <if pos:line="70" pos:column="13">if <condition pos:line="70" pos:column="16">( <expr><name><name pos:line="70" pos:column="18">subs<pos:position pos:line="70" pos:column="22"/></name><index pos:line="70" pos:column="22">[<expr><literal type="number" pos:line="70" pos:column="23">6<pos:position pos:line="70" pos:column="24"/></literal></expr>]<pos:position pos:line="70" pos:column="25"/></index></name><operator pos:line="70" pos:column="25">.<pos:position pos:line="70" pos:column="26"/></operator><name pos:line="70" pos:column="26">rm_so<pos:position pos:line="70" pos:column="31"/></name> <operator pos:line="70" pos:column="32">==<pos:position pos:line="70" pos:column="34"/></operator> <operator pos:line="70" pos:column="35">-<pos:position pos:line="70" pos:column="36"/></operator><literal type="number" pos:line="70" pos:column="36">1<pos:position pos:line="70" pos:column="37"/></literal></expr> )<pos:position pos:line="70" pos:column="39"/></condition><then pos:line="70" pos:column="39"> <block pos:line="70" pos:column="40">{
                <comment type="line" pos:line="71" pos:column="17">// old version, disk type at position 2 is always UFS</comment>
                <expr_stmt><expr><name><name pos:line="72" pos:column="17">cd<pos:position pos:line="72" pos:column="19"/></name><operator pos:line="72" pos:column="19">.<pos:position pos:line="72" pos:column="20"/></operator><name pos:line="72" pos:column="20">type<pos:position pos:line="72" pos:column="24"/></name></name> <operator pos:line="72" pos:column="25">=<pos:position pos:line="72" pos:column="26"/></operator> <name><name pos:line="72" pos:column="27">CacheDir<pos:position pos:line="72" pos:column="35"/></name><operator pos:line="72" pos:column="35">::<pos:position pos:line="72" pos:column="37"/></operator><name pos:line="72" pos:column="37">CDT_UFS<pos:position pos:line="72" pos:column="44"/></name></name></expr>;<pos:position pos:line="72" pos:column="45"/></expr_stmt>
            }<pos:position pos:line="73" pos:column="14"/></block></then> <else pos:line="73" pos:column="15">else <block pos:line="73" pos:column="20">{
                <comment type="line" pos:line="74" pos:column="17">// new version, disk type at position 2</comment>
                <expr_stmt><expr><name><name pos:line="75" pos:column="17">line<pos:position pos:line="75" pos:column="21"/></name><index pos:line="75" pos:column="21">[ <expr><name><name pos:line="75" pos:column="23">subs<pos:position pos:line="75" pos:column="27"/></name><index pos:line="75" pos:column="27">[<expr><name pos:line="75" pos:column="28">offset<pos:position pos:line="75" pos:column="34"/></name></expr>]<pos:position pos:line="75" pos:column="35"/></index></name><operator pos:line="75" pos:column="35">.<pos:position pos:line="75" pos:column="36"/></operator><name pos:line="75" pos:column="36">rm_eo<pos:position pos:line="75" pos:column="41"/></name></expr> ]<pos:position pos:line="75" pos:column="43"/></index></name> <operator pos:line="75" pos:column="44">=<pos:position pos:line="75" pos:column="45"/></operator> <literal type="char" pos:line="75" pos:column="46">'\0'<pos:position pos:line="75" pos:column="50"/></literal></expr>;<pos:position pos:line="75" pos:column="51"/></expr_stmt>
                <if pos:line="76" pos:column="17">if <condition pos:line="76" pos:column="20">( <expr><name pos:line="76" pos:column="22">debug<pos:position pos:line="76" pos:column="27"/></name></expr> )<pos:position pos:line="76" pos:column="29"/></condition><then pos:line="76" pos:column="29"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="76" pos:column="30">fprintf<pos:position pos:line="76" pos:column="37"/></name><argument_list pos:line="76" pos:column="37">( <argument><expr><name pos:line="76" pos:column="39">debug<pos:position pos:line="76" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="46">"# match from %d-%d on \"%s\"\n"<pos:position pos:line="76" pos:column="78"/></literal></expr></argument>,
                                          <argument><expr><operator pos:line="77" pos:column="43">(<pos:position pos:line="77" pos:column="44"/></operator><name pos:line="77" pos:column="44">int<pos:position pos:line="77" pos:column="47"/></name><operator pos:line="77" pos:column="47">)<pos:position pos:line="77" pos:column="48"/></operator><name><name pos:line="77" pos:column="48">subs<pos:position pos:line="77" pos:column="52"/></name><index pos:line="77" pos:column="52">[<expr><name pos:line="77" pos:column="53">offset<pos:position pos:line="77" pos:column="59"/></name></expr>]<pos:position pos:line="77" pos:column="60"/></index></name><operator pos:line="77" pos:column="60">.<pos:position pos:line="77" pos:column="61"/></operator><name pos:line="77" pos:column="61">rm_so<pos:position pos:line="77" pos:column="66"/></name></expr></argument>,
                                          <argument><expr><operator pos:line="78" pos:column="43">(<pos:position pos:line="78" pos:column="44"/></operator><name pos:line="78" pos:column="44">int<pos:position pos:line="78" pos:column="47"/></name><operator pos:line="78" pos:column="47">)<pos:position pos:line="78" pos:column="48"/></operator><name><name pos:line="78" pos:column="48">subs<pos:position pos:line="78" pos:column="52"/></name><index pos:line="78" pos:column="52">[<expr><name pos:line="78" pos:column="53">offset<pos:position pos:line="78" pos:column="59"/></name></expr>]<pos:position pos:line="78" pos:column="60"/></index></name><operator pos:line="78" pos:column="60">.<pos:position pos:line="78" pos:column="61"/></operator><name pos:line="78" pos:column="61">rm_eo<pos:position pos:line="78" pos:column="66"/></name></expr></argument>,
                                          <argument><expr><name pos:line="79" pos:column="43">line<pos:position pos:line="79" pos:column="47"/></name><operator pos:line="79" pos:column="47">+<pos:position pos:line="79" pos:column="48"/></operator><name><name pos:line="79" pos:column="48">subs<pos:position pos:line="79" pos:column="52"/></name><index pos:line="79" pos:column="52">[<expr><name pos:line="79" pos:column="53">offset<pos:position pos:line="79" pos:column="59"/></name></expr>]<pos:position pos:line="79" pos:column="60"/></index></name><operator pos:line="79" pos:column="60">.<pos:position pos:line="79" pos:column="61"/></operator><name pos:line="79" pos:column="61">rm_so<pos:position pos:line="79" pos:column="66"/></name></expr></argument> )<pos:position pos:line="79" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="69"/></expr_stmt></block></then></if>
                <if pos:line="80" pos:column="17">if <condition pos:line="80" pos:column="20">( <expr><call><name pos:line="80" pos:column="22">strcmp<pos:position pos:line="80" pos:column="28"/></name><argument_list pos:line="80" pos:column="28">( <argument><expr><name pos:line="80" pos:column="30">line<pos:position pos:line="80" pos:column="34"/></name> <operator pos:line="80" pos:column="35">+<pos:position pos:line="80" pos:column="36"/></operator> <name><name pos:line="80" pos:column="37">subs<pos:position pos:line="80" pos:column="41"/></name><index pos:line="80" pos:column="41">[<expr><name pos:line="80" pos:column="42">offset<pos:position pos:line="80" pos:column="48"/></name></expr>]<pos:position pos:line="80" pos:column="49"/></index></name><operator pos:line="80" pos:column="49">.<pos:position pos:line="80" pos:column="50"/></operator><name pos:line="80" pos:column="50">rm_so<pos:position pos:line="80" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="80" pos:column="57">"ufs"<pos:position pos:line="80" pos:column="62"/></literal></expr></argument> )<pos:position pos:line="80" pos:column="64"/></argument_list></call> <operator pos:line="80" pos:column="65">==<pos:position pos:line="80" pos:column="67"/></operator> <literal type="number" pos:line="80" pos:column="68">0<pos:position pos:line="80" pos:column="69"/></literal></expr> )<pos:position pos:line="80" pos:column="71"/></condition><then pos:line="80" pos:column="71">
                    <block type="pseudo"><expr_stmt><expr><name><name pos:line="81" pos:column="21">cd<pos:position pos:line="81" pos:column="23"/></name><operator pos:line="81" pos:column="23">.<pos:position pos:line="81" pos:column="24"/></operator><name pos:line="81" pos:column="24">type<pos:position pos:line="81" pos:column="28"/></name></name> <operator pos:line="81" pos:column="29">=<pos:position pos:line="81" pos:column="30"/></operator> <name><name pos:line="81" pos:column="31">CacheDir<pos:position pos:line="81" pos:column="39"/></name><operator pos:line="81" pos:column="39">::<pos:position pos:line="81" pos:column="41"/></operator><name pos:line="81" pos:column="41">CDT_UFS<pos:position pos:line="81" pos:column="48"/></name></name></expr>;<pos:position pos:line="81" pos:column="49"/></expr_stmt></block></then>
                <elseif pos:line="82" pos:column="17">else <if pos:line="82" pos:column="22">if <condition pos:line="82" pos:column="25">( <expr><call><name pos:line="82" pos:column="27">strcmp<pos:position pos:line="82" pos:column="33"/></name><argument_list pos:line="82" pos:column="33">( <argument><expr><name pos:line="82" pos:column="35">line<pos:position pos:line="82" pos:column="39"/></name> <operator pos:line="82" pos:column="40">+<pos:position pos:line="82" pos:column="41"/></operator> <name><name pos:line="82" pos:column="42">subs<pos:position pos:line="82" pos:column="46"/></name><index pos:line="82" pos:column="46">[<expr><name pos:line="82" pos:column="47">offset<pos:position pos:line="82" pos:column="53"/></name></expr>]<pos:position pos:line="82" pos:column="54"/></index></name><operator pos:line="82" pos:column="54">.<pos:position pos:line="82" pos:column="55"/></operator><name pos:line="82" pos:column="55">rm_so<pos:position pos:line="82" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="82" pos:column="62">"asyncufs"<pos:position pos:line="82" pos:column="72"/></literal></expr></argument> )<pos:position pos:line="82" pos:column="74"/></argument_list></call> <operator pos:line="82" pos:column="75">==<pos:position pos:line="82" pos:column="77"/></operator> <literal type="number" pos:line="82" pos:column="78">0<pos:position pos:line="82" pos:column="79"/></literal></expr> )<pos:position pos:line="82" pos:column="81"/></condition><then pos:line="82" pos:column="81">
                    <block type="pseudo"><expr_stmt><expr><name><name pos:line="83" pos:column="21">cd<pos:position pos:line="83" pos:column="23"/></name><operator pos:line="83" pos:column="23">.<pos:position pos:line="83" pos:column="24"/></operator><name pos:line="83" pos:column="24">type<pos:position pos:line="83" pos:column="28"/></name></name> <operator pos:line="83" pos:column="29">=<pos:position pos:line="83" pos:column="30"/></operator> <name><name pos:line="83" pos:column="31">CacheDir<pos:position pos:line="83" pos:column="39"/></name><operator pos:line="83" pos:column="39">::<pos:position pos:line="83" pos:column="41"/></operator><name pos:line="83" pos:column="41">CDT_AUFS<pos:position pos:line="83" pos:column="49"/></name></name></expr>;<pos:position pos:line="83" pos:column="50"/></expr_stmt></block></then></if></elseif>
                <elseif pos:line="84" pos:column="17">else <if pos:line="84" pos:column="22">if <condition pos:line="84" pos:column="25">( <expr><call><name pos:line="84" pos:column="27">strcmp<pos:position pos:line="84" pos:column="33"/></name><argument_list pos:line="84" pos:column="33">( <argument><expr><name pos:line="84" pos:column="35">line<pos:position pos:line="84" pos:column="39"/></name> <operator pos:line="84" pos:column="40">+<pos:position pos:line="84" pos:column="41"/></operator> <name><name pos:line="84" pos:column="42">subs<pos:position pos:line="84" pos:column="46"/></name><index pos:line="84" pos:column="46">[<expr><name pos:line="84" pos:column="47">offset<pos:position pos:line="84" pos:column="53"/></name></expr>]<pos:position pos:line="84" pos:column="54"/></index></name><operator pos:line="84" pos:column="54">.<pos:position pos:line="84" pos:column="55"/></operator><name pos:line="84" pos:column="55">rm_so<pos:position pos:line="84" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="84" pos:column="62">"diskd"<pos:position pos:line="84" pos:column="69"/></literal></expr></argument> )<pos:position pos:line="84" pos:column="71"/></argument_list></call> <operator pos:line="84" pos:column="72">==<pos:position pos:line="84" pos:column="74"/></operator> <literal type="number" pos:line="84" pos:column="75">0<pos:position pos:line="84" pos:column="76"/></literal></expr> )<pos:position pos:line="84" pos:column="78"/></condition><then pos:line="84" pos:column="78">
                    <block type="pseudo"><expr_stmt><expr><name><name pos:line="85" pos:column="21">cd<pos:position pos:line="85" pos:column="23"/></name><operator pos:line="85" pos:column="23">.<pos:position pos:line="85" pos:column="24"/></operator><name pos:line="85" pos:column="24">type<pos:position pos:line="85" pos:column="28"/></name></name> <operator pos:line="85" pos:column="29">=<pos:position pos:line="85" pos:column="30"/></operator> <name><name pos:line="85" pos:column="31">CacheDir<pos:position pos:line="85" pos:column="39"/></name><operator pos:line="85" pos:column="39">::<pos:position pos:line="85" pos:column="41"/></operator><name pos:line="85" pos:column="41">CDT_DISKD<pos:position pos:line="85" pos:column="50"/></name></name></expr>;<pos:position pos:line="85" pos:column="51"/></expr_stmt></block></then></if></elseif>
                <else pos:line="86" pos:column="17">else
                    <block type="pseudo"><expr_stmt><expr><name><name pos:line="87" pos:column="21">cd<pos:position pos:line="87" pos:column="23"/></name><operator pos:line="87" pos:column="23">.<pos:position pos:line="87" pos:column="24"/></operator><name pos:line="87" pos:column="24">type<pos:position pos:line="87" pos:column="28"/></name></name> <operator pos:line="87" pos:column="29">=<pos:position pos:line="87" pos:column="30"/></operator> <name><name pos:line="87" pos:column="31">CacheDir<pos:position pos:line="87" pos:column="39"/></name><operator pos:line="87" pos:column="39">::<pos:position pos:line="87" pos:column="41"/></operator><name pos:line="87" pos:column="41">CDT_OTHER<pos:position pos:line="87" pos:column="50"/></name></name></expr>;<pos:position pos:line="87" pos:column="51"/></expr_stmt></block></else></if>
                <expr_stmt><expr><operator pos:line="88" pos:column="17">++<pos:position pos:line="88" pos:column="19"/></operator><name pos:line="88" pos:column="19">offset<pos:position pos:line="88" pos:column="25"/></name></expr>;<pos:position pos:line="88" pos:column="26"/></expr_stmt>
            }<pos:position pos:line="89" pos:column="14"/></block></else></if>

            <comment type="line" pos:line="91" pos:column="13">// extract base directory</comment>
            <expr_stmt><expr><name><name pos:line="92" pos:column="13">line<pos:position pos:line="92" pos:column="17"/></name><index pos:line="92" pos:column="17">[ <expr><name><name pos:line="92" pos:column="19">subs<pos:position pos:line="92" pos:column="23"/></name><index pos:line="92" pos:column="23">[<expr><name pos:line="92" pos:column="24">offset<pos:position pos:line="92" pos:column="30"/></name></expr>]<pos:position pos:line="92" pos:column="31"/></index></name><operator pos:line="92" pos:column="31">.<pos:position pos:line="92" pos:column="32"/></operator><name pos:line="92" pos:column="32">rm_eo<pos:position pos:line="92" pos:column="37"/></name></expr> ]<pos:position pos:line="92" pos:column="39"/></index></name> <operator pos:line="92" pos:column="40">=<pos:position pos:line="92" pos:column="41"/></operator> <literal type="char" pos:line="92" pos:column="42">'\0'<pos:position pos:line="92" pos:column="46"/></literal></expr>;<pos:position pos:line="92" pos:column="47"/></expr_stmt>
            <if pos:line="93" pos:column="13">if <condition pos:line="93" pos:column="16">( <expr><name pos:line="93" pos:column="18">debug<pos:position pos:line="93" pos:column="23"/></name></expr> )<pos:position pos:line="93" pos:column="25"/></condition><then pos:line="93" pos:column="25"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="93" pos:column="26">fprintf<pos:position pos:line="93" pos:column="33"/></name><argument_list pos:line="93" pos:column="33">( <argument><expr><name pos:line="93" pos:column="35">debug<pos:position pos:line="93" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="93" pos:column="42">"# match from %d-%d on \"%s\"\n"<pos:position pos:line="93" pos:column="74"/></literal></expr></argument>,
                                      <argument><expr><operator pos:line="94" pos:column="39">(<pos:position pos:line="94" pos:column="40"/></operator><name pos:line="94" pos:column="40">int<pos:position pos:line="94" pos:column="43"/></name><operator pos:line="94" pos:column="43">)<pos:position pos:line="94" pos:column="44"/></operator><name><name pos:line="94" pos:column="44">subs<pos:position pos:line="94" pos:column="48"/></name><index pos:line="94" pos:column="48">[<expr><name pos:line="94" pos:column="49">offset<pos:position pos:line="94" pos:column="55"/></name></expr>]<pos:position pos:line="94" pos:column="56"/></index></name><operator pos:line="94" pos:column="56">.<pos:position pos:line="94" pos:column="57"/></operator><name pos:line="94" pos:column="57">rm_so<pos:position pos:line="94" pos:column="62"/></name></expr></argument>,
                                      <argument><expr><operator pos:line="95" pos:column="39">(<pos:position pos:line="95" pos:column="40"/></operator><name pos:line="95" pos:column="40">int<pos:position pos:line="95" pos:column="43"/></name><operator pos:line="95" pos:column="43">)<pos:position pos:line="95" pos:column="44"/></operator><name><name pos:line="95" pos:column="44">subs<pos:position pos:line="95" pos:column="48"/></name><index pos:line="95" pos:column="48">[<expr><name pos:line="95" pos:column="49">offset<pos:position pos:line="95" pos:column="55"/></name></expr>]<pos:position pos:line="95" pos:column="56"/></index></name><operator pos:line="95" pos:column="56">.<pos:position pos:line="95" pos:column="57"/></operator><name pos:line="95" pos:column="57">rm_eo<pos:position pos:line="95" pos:column="62"/></name></expr></argument>,
                                      <argument><expr><name pos:line="96" pos:column="39">line<pos:position pos:line="96" pos:column="43"/></name><operator pos:line="96" pos:column="43">+<pos:position pos:line="96" pos:column="44"/></operator><name><name pos:line="96" pos:column="44">subs<pos:position pos:line="96" pos:column="48"/></name><index pos:line="96" pos:column="48">[<expr><name pos:line="96" pos:column="49">offset<pos:position pos:line="96" pos:column="55"/></name></expr>]<pos:position pos:line="96" pos:column="56"/></index></name><operator pos:line="96" pos:column="56">.<pos:position pos:line="96" pos:column="57"/></operator><name pos:line="96" pos:column="57">rm_so<pos:position pos:line="96" pos:column="62"/></name></expr></argument> )<pos:position pos:line="96" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="65"/></expr_stmt></block></then></if>
            <expr_stmt><expr><name><name pos:line="97" pos:column="13">cd<pos:position pos:line="97" pos:column="15"/></name><operator pos:line="97" pos:column="15">.<pos:position pos:line="97" pos:column="16"/></operator><name pos:line="97" pos:column="16">base<pos:position pos:line="97" pos:column="20"/></name></name> <operator pos:line="97" pos:column="21">=<pos:position pos:line="97" pos:column="22"/></operator> <call><name pos:line="97" pos:column="23">strdup<pos:position pos:line="97" pos:column="29"/></name><argument_list pos:line="97" pos:column="29">( <argument><expr><name pos:line="97" pos:column="31">line<pos:position pos:line="97" pos:column="35"/></name><operator pos:line="97" pos:column="35">+<pos:position pos:line="97" pos:column="36"/></operator><name><name pos:line="97" pos:column="36">subs<pos:position pos:line="97" pos:column="40"/></name><index pos:line="97" pos:column="40">[<expr><name pos:line="97" pos:column="41">offset<pos:position pos:line="97" pos:column="47"/></name></expr>]<pos:position pos:line="97" pos:column="48"/></index></name><operator pos:line="97" pos:column="48">.<pos:position pos:line="97" pos:column="49"/></operator><name pos:line="97" pos:column="49">rm_so<pos:position pos:line="97" pos:column="54"/></name></expr></argument> )<pos:position pos:line="97" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="57"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="98" pos:column="13">++<pos:position pos:line="98" pos:column="15"/></operator><name pos:line="98" pos:column="15">offset<pos:position pos:line="98" pos:column="21"/></name></expr>;<pos:position pos:line="98" pos:column="22"/></expr_stmt>

            <comment type="line" pos:line="100" pos:column="13">// extract size information</comment>
            <expr_stmt><expr><name><name pos:line="101" pos:column="13">line<pos:position pos:line="101" pos:column="17"/></name><index pos:line="101" pos:column="17">[ <expr><name><name pos:line="101" pos:column="19">subs<pos:position pos:line="101" pos:column="23"/></name><index pos:line="101" pos:column="23">[<expr><name pos:line="101" pos:column="24">offset<pos:position pos:line="101" pos:column="30"/></name></expr>]<pos:position pos:line="101" pos:column="31"/></index></name><operator pos:line="101" pos:column="31">.<pos:position pos:line="101" pos:column="32"/></operator><name pos:line="101" pos:column="32">rm_eo<pos:position pos:line="101" pos:column="37"/></name></expr> ]<pos:position pos:line="101" pos:column="39"/></index></name> <operator pos:line="101" pos:column="40">=<pos:position pos:line="101" pos:column="41"/></operator> <literal type="char" pos:line="101" pos:column="42">'\0'<pos:position pos:line="101" pos:column="46"/></literal></expr>;<pos:position pos:line="101" pos:column="47"/></expr_stmt>
            <if pos:line="102" pos:column="13">if <condition pos:line="102" pos:column="16">( <expr><name pos:line="102" pos:column="18">debug<pos:position pos:line="102" pos:column="23"/></name></expr> )<pos:position pos:line="102" pos:column="25"/></condition><then pos:line="102" pos:column="25"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="102" pos:column="26">fprintf<pos:position pos:line="102" pos:column="33"/></name><argument_list pos:line="102" pos:column="33">( <argument><expr><name pos:line="102" pos:column="35">debug<pos:position pos:line="102" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="102" pos:column="42">"# match from %d-%d on \"%s\"\n"<pos:position pos:line="102" pos:column="74"/></literal></expr></argument>,
                                      <argument><expr><operator pos:line="103" pos:column="39">(<pos:position pos:line="103" pos:column="40"/></operator><name pos:line="103" pos:column="40">int<pos:position pos:line="103" pos:column="43"/></name><operator pos:line="103" pos:column="43">)<pos:position pos:line="103" pos:column="44"/></operator><name><name pos:line="103" pos:column="44">subs<pos:position pos:line="103" pos:column="48"/></name><index pos:line="103" pos:column="48">[<expr><name pos:line="103" pos:column="49">offset<pos:position pos:line="103" pos:column="55"/></name></expr>]<pos:position pos:line="103" pos:column="56"/></index></name><operator pos:line="103" pos:column="56">.<pos:position pos:line="103" pos:column="57"/></operator><name pos:line="103" pos:column="57">rm_so<pos:position pos:line="103" pos:column="62"/></name></expr></argument>,
                                      <argument><expr><operator pos:line="104" pos:column="39">(<pos:position pos:line="104" pos:column="40"/></operator><name pos:line="104" pos:column="40">int<pos:position pos:line="104" pos:column="43"/></name><operator pos:line="104" pos:column="43">)<pos:position pos:line="104" pos:column="44"/></operator><name><name pos:line="104" pos:column="44">subs<pos:position pos:line="104" pos:column="48"/></name><index pos:line="104" pos:column="48">[<expr><name pos:line="104" pos:column="49">offset<pos:position pos:line="104" pos:column="55"/></name></expr>]<pos:position pos:line="104" pos:column="56"/></index></name><operator pos:line="104" pos:column="56">.<pos:position pos:line="104" pos:column="57"/></operator><name pos:line="104" pos:column="57">rm_eo<pos:position pos:line="104" pos:column="62"/></name></expr></argument>,
                                      <argument><expr><name pos:line="105" pos:column="39">line<pos:position pos:line="105" pos:column="43"/></name><operator pos:line="105" pos:column="43">+<pos:position pos:line="105" pos:column="44"/></operator><name><name pos:line="105" pos:column="44">subs<pos:position pos:line="105" pos:column="48"/></name><index pos:line="105" pos:column="48">[<expr><name pos:line="105" pos:column="49">offset<pos:position pos:line="105" pos:column="55"/></name></expr>]<pos:position pos:line="105" pos:column="56"/></index></name><operator pos:line="105" pos:column="56">.<pos:position pos:line="105" pos:column="57"/></operator><name pos:line="105" pos:column="57">rm_so<pos:position pos:line="105" pos:column="62"/></name></expr></argument> )<pos:position pos:line="105" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="65"/></expr_stmt></block></then></if>
            <expr_stmt><expr><name><name pos:line="106" pos:column="13">cd<pos:position pos:line="106" pos:column="15"/></name><operator pos:line="106" pos:column="15">.<pos:position pos:line="106" pos:column="16"/></operator><name pos:line="106" pos:column="16">size<pos:position pos:line="106" pos:column="20"/></name></name> <operator pos:line="106" pos:column="21">=<pos:position pos:line="106" pos:column="22"/></operator> <call><name pos:line="106" pos:column="23">strtoul<pos:position pos:line="106" pos:column="30"/></name><argument_list pos:line="106" pos:column="30">( <argument><expr><name pos:line="106" pos:column="32">line<pos:position pos:line="106" pos:column="36"/></name><operator pos:line="106" pos:column="36">+<pos:position pos:line="106" pos:column="37"/></operator><name><name pos:line="106" pos:column="37">subs<pos:position pos:line="106" pos:column="41"/></name><index pos:line="106" pos:column="41">[<expr><name pos:line="106" pos:column="42">offset<pos:position pos:line="106" pos:column="48"/></name></expr>]<pos:position pos:line="106" pos:column="49"/></index></name><operator pos:line="106" pos:column="49">.<pos:position pos:line="106" pos:column="50"/></operator><name pos:line="106" pos:column="50">rm_so<pos:position pos:line="106" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="106" pos:column="57">0<pos:position pos:line="106" pos:column="58"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="106" pos:column="60">10<pos:position pos:line="106" pos:column="62"/></literal></expr></argument> )<pos:position pos:line="106" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="65"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="107" pos:column="13">++<pos:position pos:line="107" pos:column="15"/></operator><name pos:line="107" pos:column="15">offset<pos:position pos:line="107" pos:column="21"/></name></expr>;<pos:position pos:line="107" pos:column="22"/></expr_stmt>

            <comment type="line" pos:line="109" pos:column="13">// extract 1st level directories</comment>
            <expr_stmt><expr><name><name pos:line="110" pos:column="13">line<pos:position pos:line="110" pos:column="17"/></name><index pos:line="110" pos:column="17">[ <expr><name><name pos:line="110" pos:column="19">subs<pos:position pos:line="110" pos:column="23"/></name><index pos:line="110" pos:column="23">[<expr><name pos:line="110" pos:column="24">offset<pos:position pos:line="110" pos:column="30"/></name></expr>]<pos:position pos:line="110" pos:column="31"/></index></name><operator pos:line="110" pos:column="31">.<pos:position pos:line="110" pos:column="32"/></operator><name pos:line="110" pos:column="32">rm_eo<pos:position pos:line="110" pos:column="37"/></name></expr> ]<pos:position pos:line="110" pos:column="39"/></index></name> <operator pos:line="110" pos:column="40">=<pos:position pos:line="110" pos:column="41"/></operator> <literal type="char" pos:line="110" pos:column="42">'\0'<pos:position pos:line="110" pos:column="46"/></literal></expr>;<pos:position pos:line="110" pos:column="47"/></expr_stmt>
            <if pos:line="111" pos:column="13">if <condition pos:line="111" pos:column="16">( <expr><name pos:line="111" pos:column="18">debug<pos:position pos:line="111" pos:column="23"/></name></expr> )<pos:position pos:line="111" pos:column="25"/></condition><then pos:line="111" pos:column="25"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="111" pos:column="26">fprintf<pos:position pos:line="111" pos:column="33"/></name><argument_list pos:line="111" pos:column="33">( <argument><expr><name pos:line="111" pos:column="35">debug<pos:position pos:line="111" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="111" pos:column="42">"# match from %d-%d on \"%s\"\n"<pos:position pos:line="111" pos:column="74"/></literal></expr></argument>,
                                      <argument><expr><operator pos:line="112" pos:column="39">(<pos:position pos:line="112" pos:column="40"/></operator><name pos:line="112" pos:column="40">int<pos:position pos:line="112" pos:column="43"/></name><operator pos:line="112" pos:column="43">)<pos:position pos:line="112" pos:column="44"/></operator><name><name pos:line="112" pos:column="44">subs<pos:position pos:line="112" pos:column="48"/></name><index pos:line="112" pos:column="48">[<expr><name pos:line="112" pos:column="49">offset<pos:position pos:line="112" pos:column="55"/></name></expr>]<pos:position pos:line="112" pos:column="56"/></index></name><operator pos:line="112" pos:column="56">.<pos:position pos:line="112" pos:column="57"/></operator><name pos:line="112" pos:column="57">rm_so<pos:position pos:line="112" pos:column="62"/></name></expr></argument>,
                                      <argument><expr><operator pos:line="113" pos:column="39">(<pos:position pos:line="113" pos:column="40"/></operator><name pos:line="113" pos:column="40">int<pos:position pos:line="113" pos:column="43"/></name><operator pos:line="113" pos:column="43">)<pos:position pos:line="113" pos:column="44"/></operator><name><name pos:line="113" pos:column="44">subs<pos:position pos:line="113" pos:column="48"/></name><index pos:line="113" pos:column="48">[<expr><name pos:line="113" pos:column="49">offset<pos:position pos:line="113" pos:column="55"/></name></expr>]<pos:position pos:line="113" pos:column="56"/></index></name><operator pos:line="113" pos:column="56">.<pos:position pos:line="113" pos:column="57"/></operator><name pos:line="113" pos:column="57">rm_eo<pos:position pos:line="113" pos:column="62"/></name></expr></argument>,
                                      <argument><expr><name pos:line="114" pos:column="39">line<pos:position pos:line="114" pos:column="43"/></name><operator pos:line="114" pos:column="43">+<pos:position pos:line="114" pos:column="44"/></operator><name><name pos:line="114" pos:column="44">subs<pos:position pos:line="114" pos:column="48"/></name><index pos:line="114" pos:column="48">[<expr><name pos:line="114" pos:column="49">offset<pos:position pos:line="114" pos:column="55"/></name></expr>]<pos:position pos:line="114" pos:column="56"/></index></name><operator pos:line="114" pos:column="56">.<pos:position pos:line="114" pos:column="57"/></operator><name pos:line="114" pos:column="57">rm_so<pos:position pos:line="114" pos:column="62"/></name></expr></argument> )<pos:position pos:line="114" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="65"/></expr_stmt></block></then></if>
            <expr_stmt><expr><name><name pos:line="115" pos:column="13">cd<pos:position pos:line="115" pos:column="15"/></name><operator pos:line="115" pos:column="15">.<pos:position pos:line="115" pos:column="16"/></operator><name pos:line="115" pos:column="16">level<pos:position pos:line="115" pos:column="21"/></name><index pos:line="115" pos:column="21">[<expr><literal type="number" pos:line="115" pos:column="22">0<pos:position pos:line="115" pos:column="23"/></literal></expr>]<pos:position pos:line="115" pos:column="24"/></index></name> <operator pos:line="115" pos:column="25">=<pos:position pos:line="115" pos:column="26"/></operator> <call><name pos:line="115" pos:column="27">strtoul<pos:position pos:line="115" pos:column="34"/></name><argument_list pos:line="115" pos:column="34">( <argument><expr><name pos:line="115" pos:column="36">line<pos:position pos:line="115" pos:column="40"/></name><operator pos:line="115" pos:column="40">+<pos:position pos:line="115" pos:column="41"/></operator><name><name pos:line="115" pos:column="41">subs<pos:position pos:line="115" pos:column="45"/></name><index pos:line="115" pos:column="45">[<expr><name pos:line="115" pos:column="46">offset<pos:position pos:line="115" pos:column="52"/></name></expr>]<pos:position pos:line="115" pos:column="53"/></index></name><operator pos:line="115" pos:column="53">.<pos:position pos:line="115" pos:column="54"/></operator><name pos:line="115" pos:column="54">rm_so<pos:position pos:line="115" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="115" pos:column="61">0<pos:position pos:line="115" pos:column="62"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="115" pos:column="64">10<pos:position pos:line="115" pos:column="66"/></literal></expr></argument> )<pos:position pos:line="115" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="69"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="116" pos:column="13">++<pos:position pos:line="116" pos:column="15"/></operator><name pos:line="116" pos:column="15">offset<pos:position pos:line="116" pos:column="21"/></name></expr>;<pos:position pos:line="116" pos:column="22"/></expr_stmt>

            <comment type="line" pos:line="118" pos:column="13">// extract 2nd level directories</comment>
            <expr_stmt><expr><name><name pos:line="119" pos:column="13">line<pos:position pos:line="119" pos:column="17"/></name><index pos:line="119" pos:column="17">[ <expr><name><name pos:line="119" pos:column="19">subs<pos:position pos:line="119" pos:column="23"/></name><index pos:line="119" pos:column="23">[<expr><name pos:line="119" pos:column="24">offset<pos:position pos:line="119" pos:column="30"/></name></expr>]<pos:position pos:line="119" pos:column="31"/></index></name><operator pos:line="119" pos:column="31">.<pos:position pos:line="119" pos:column="32"/></operator><name pos:line="119" pos:column="32">rm_eo<pos:position pos:line="119" pos:column="37"/></name></expr> ]<pos:position pos:line="119" pos:column="39"/></index></name> <operator pos:line="119" pos:column="40">=<pos:position pos:line="119" pos:column="41"/></operator> <literal type="char" pos:line="119" pos:column="42">'\0'<pos:position pos:line="119" pos:column="46"/></literal></expr>;<pos:position pos:line="119" pos:column="47"/></expr_stmt>
            <if pos:line="120" pos:column="13">if <condition pos:line="120" pos:column="16">( <expr><name pos:line="120" pos:column="18">debug<pos:position pos:line="120" pos:column="23"/></name></expr> )<pos:position pos:line="120" pos:column="25"/></condition><then pos:line="120" pos:column="25"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="120" pos:column="26">fprintf<pos:position pos:line="120" pos:column="33"/></name><argument_list pos:line="120" pos:column="33">( <argument><expr><name pos:line="120" pos:column="35">debug<pos:position pos:line="120" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="120" pos:column="42">"# match from %d-%d on \"%s\"\n"<pos:position pos:line="120" pos:column="74"/></literal></expr></argument>,
                                      <argument><expr><operator pos:line="121" pos:column="39">(<pos:position pos:line="121" pos:column="40"/></operator><name pos:line="121" pos:column="40">int<pos:position pos:line="121" pos:column="43"/></name><operator pos:line="121" pos:column="43">)<pos:position pos:line="121" pos:column="44"/></operator><name><name pos:line="121" pos:column="44">subs<pos:position pos:line="121" pos:column="48"/></name><index pos:line="121" pos:column="48">[<expr><name pos:line="121" pos:column="49">offset<pos:position pos:line="121" pos:column="55"/></name></expr>]<pos:position pos:line="121" pos:column="56"/></index></name><operator pos:line="121" pos:column="56">.<pos:position pos:line="121" pos:column="57"/></operator><name pos:line="121" pos:column="57">rm_so<pos:position pos:line="121" pos:column="62"/></name></expr></argument>,
                                      <argument><expr><operator pos:line="122" pos:column="39">(<pos:position pos:line="122" pos:column="40"/></operator><name pos:line="122" pos:column="40">int<pos:position pos:line="122" pos:column="43"/></name><operator pos:line="122" pos:column="43">)<pos:position pos:line="122" pos:column="44"/></operator><name><name pos:line="122" pos:column="44">subs<pos:position pos:line="122" pos:column="48"/></name><index pos:line="122" pos:column="48">[<expr><name pos:line="122" pos:column="49">offset<pos:position pos:line="122" pos:column="55"/></name></expr>]<pos:position pos:line="122" pos:column="56"/></index></name><operator pos:line="122" pos:column="56">.<pos:position pos:line="122" pos:column="57"/></operator><name pos:line="122" pos:column="57">rm_eo<pos:position pos:line="122" pos:column="62"/></name></expr></argument>,
                                      <argument><expr><name pos:line="123" pos:column="39">line<pos:position pos:line="123" pos:column="43"/></name><operator pos:line="123" pos:column="43">+<pos:position pos:line="123" pos:column="44"/></operator><name><name pos:line="123" pos:column="44">subs<pos:position pos:line="123" pos:column="48"/></name><index pos:line="123" pos:column="48">[<expr><name pos:line="123" pos:column="49">offset<pos:position pos:line="123" pos:column="55"/></name></expr>]<pos:position pos:line="123" pos:column="56"/></index></name><operator pos:line="123" pos:column="56">.<pos:position pos:line="123" pos:column="57"/></operator><name pos:line="123" pos:column="57">rm_so<pos:position pos:line="123" pos:column="62"/></name></expr></argument> )<pos:position pos:line="123" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="65"/></expr_stmt></block></then></if>
            <expr_stmt><expr><name><name pos:line="124" pos:column="13">cd<pos:position pos:line="124" pos:column="15"/></name><operator pos:line="124" pos:column="15">.<pos:position pos:line="124" pos:column="16"/></operator><name pos:line="124" pos:column="16">level<pos:position pos:line="124" pos:column="21"/></name><index pos:line="124" pos:column="21">[<expr><literal type="number" pos:line="124" pos:column="22">1<pos:position pos:line="124" pos:column="23"/></literal></expr>]<pos:position pos:line="124" pos:column="24"/></index></name> <operator pos:line="124" pos:column="25">=<pos:position pos:line="124" pos:column="26"/></operator> <call><name pos:line="124" pos:column="27">strtoul<pos:position pos:line="124" pos:column="34"/></name><argument_list pos:line="124" pos:column="34">( <argument><expr><name pos:line="124" pos:column="36">line<pos:position pos:line="124" pos:column="40"/></name><operator pos:line="124" pos:column="40">+<pos:position pos:line="124" pos:column="41"/></operator><name><name pos:line="124" pos:column="41">subs<pos:position pos:line="124" pos:column="45"/></name><index pos:line="124" pos:column="45">[<expr><name pos:line="124" pos:column="46">offset<pos:position pos:line="124" pos:column="52"/></name></expr>]<pos:position pos:line="124" pos:column="53"/></index></name><operator pos:line="124" pos:column="53">.<pos:position pos:line="124" pos:column="54"/></operator><name pos:line="124" pos:column="54">rm_so<pos:position pos:line="124" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="124" pos:column="61">0<pos:position pos:line="124" pos:column="62"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="124" pos:column="64">10<pos:position pos:line="124" pos:column="66"/></literal></expr></argument> )<pos:position pos:line="124" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="69"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="125" pos:column="13">++<pos:position pos:line="125" pos:column="15"/></operator><name pos:line="125" pos:column="15">offset<pos:position pos:line="125" pos:column="21"/></name></expr>;<pos:position pos:line="125" pos:column="22"/></expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="127" pos:column="13">cachedir<pos:position pos:line="127" pos:column="21"/></name><operator pos:line="127" pos:column="21">.<pos:position pos:line="127" pos:column="22"/></operator><name pos:line="127" pos:column="22">push_back<pos:position pos:line="127" pos:column="31"/></name></name><argument_list pos:line="127" pos:column="31">( <argument><expr><name pos:line="127" pos:column="33">cd<pos:position pos:line="127" pos:column="35"/></name></expr></argument> )<pos:position pos:line="127" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="38"/></expr_stmt>
        }<pos:position pos:line="128" pos:column="10"/></block></else></if>
    }<pos:position pos:line="129" pos:column="6"/></block></while>

    <expr_stmt><expr><call><name><name pos:line="131" pos:column="5">cfgin<pos:position pos:line="131" pos:column="10"/></name><operator pos:line="131" pos:column="10">.<pos:position pos:line="131" pos:column="11"/></operator><name pos:line="131" pos:column="11">close<pos:position pos:line="131" pos:column="16"/></name></name><argument_list pos:line="131" pos:column="16">()<pos:position pos:line="131" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="132" pos:column="5">regfree<pos:position pos:line="132" pos:column="12"/></name><argument_list pos:line="132" pos:column="12">(<argument><expr><operator pos:line="132" pos:column="13">&amp;<pos:position pos:line="132" pos:column="18"/></operator><name pos:line="132" pos:column="14">rexp<pos:position pos:line="132" pos:column="18"/></name></expr></argument>)<pos:position pos:line="132" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="20"/></expr_stmt>
    <return pos:line="133" pos:column="5">return <expr><call><name><name pos:line="133" pos:column="12">cachedir<pos:position pos:line="133" pos:column="20"/></name><operator pos:line="133" pos:column="20">.<pos:position pos:line="133" pos:column="21"/></operator><name pos:line="133" pos:column="21">size<pos:position pos:line="133" pos:column="25"/></name></name><argument_list pos:line="133" pos:column="25">()<pos:position pos:line="133" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="28"/></return>
}<pos:position pos:line="134" pos:column="2"/></block></function></unit>
