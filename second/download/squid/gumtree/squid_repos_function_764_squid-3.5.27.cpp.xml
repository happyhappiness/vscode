<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_764_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ClientRequestContext<pos:position pos:line="2" pos:column="21"/></name><operator pos:line="2" pos:column="21">::<pos:position pos:line="2" pos:column="23"/></operator><name pos:line="2" pos:column="23">sslBumpAccessCheckDone<pos:position pos:line="2" pos:column="45"/></name></name><parameter_list pos:line="2" pos:column="45">(<parameter><decl><type><specifier pos:line="2" pos:column="46">const<pos:position pos:line="2" pos:column="51"/></specifier> <name pos:line="2" pos:column="52">allow_t<pos:position pos:line="2" pos:column="59"/></name> <modifier pos:line="2" pos:column="60">&amp;<pos:position pos:line="2" pos:column="65"/></modifier></type><name pos:line="2" pos:column="61">answer<pos:position pos:line="2" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="68"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">!<pos:position pos:line="4" pos:column="10"/></operator><call><name pos:line="4" pos:column="10">httpStateIsValid<pos:position pos:line="4" pos:column="26"/></name><argument_list pos:line="4" pos:column="26">()<pos:position pos:line="4" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="29"/></condition><then pos:line="4" pos:column="29">
        <block type="pseudo"><return pos:line="5" pos:column="9">return;<pos:position pos:line="5" pos:column="16"/></return></block></then></if>

    <decl_stmt><decl><type><specifier pos:line="7" pos:column="5">const<pos:position pos:line="7" pos:column="10"/></specifier> <name><name pos:line="7" pos:column="11">Ssl<pos:position pos:line="7" pos:column="14"/></name><operator pos:line="7" pos:column="14">::<pos:position pos:line="7" pos:column="16"/></operator><name pos:line="7" pos:column="16">BumpMode<pos:position pos:line="7" pos:column="24"/></name></name></type> <name pos:line="7" pos:column="25">bumpMode<pos:position pos:line="7" pos:column="33"/></name> <init pos:line="7" pos:column="34">= <expr><ternary><condition><expr><name pos:line="7" pos:column="36">answer<pos:position pos:line="7" pos:column="42"/></name> <operator pos:line="7" pos:column="43">==<pos:position pos:line="7" pos:column="45"/></operator> <name pos:line="7" pos:column="46">ACCESS_ALLOWED<pos:position pos:line="7" pos:column="60"/></name></expr> ?<pos:position pos:line="7" pos:column="62"/></condition><then pos:line="7" pos:column="62">
                                   <expr><cast type="static" pos:line="8" pos:column="36">static_cast<argument_list type="generic" pos:line="8" pos:column="47">&lt;<argument><expr><name><name pos:line="8" pos:column="48">Ssl<pos:position pos:line="8" pos:column="51"/></name><operator pos:line="8" pos:column="51">::<pos:position pos:line="8" pos:column="53"/></operator><name pos:line="8" pos:column="53">BumpMode<pos:position pos:line="8" pos:column="61"/></name></name></expr></argument>&gt;<pos:position pos:line="8" pos:column="65"/></argument_list><argument_list pos:line="8" pos:column="62">(<argument><expr><name><name pos:line="8" pos:column="63">answer<pos:position pos:line="8" pos:column="69"/></name><operator pos:line="8" pos:column="69">.<pos:position pos:line="8" pos:column="70"/></operator><name pos:line="8" pos:column="70">kind<pos:position pos:line="8" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="75"/></argument_list></cast></expr> <pos:position pos:line="8" pos:column="76"/></then><else pos:line="8" pos:column="76">: <expr><name><name pos:line="8" pos:column="78">Ssl<pos:position pos:line="8" pos:column="81"/></name><operator pos:line="8" pos:column="81">::<pos:position pos:line="8" pos:column="83"/></operator><name pos:line="8" pos:column="83">bumpNone<pos:position pos:line="8" pos:column="91"/></name></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="8" pos:column="92"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="9" pos:column="5">http<pos:position pos:line="9" pos:column="9"/></name><operator pos:line="9" pos:column="9">-&gt;<pos:position pos:line="9" pos:column="14"/></operator><name pos:line="9" pos:column="11">sslBumpNeed<pos:position pos:line="9" pos:column="22"/></name></name><argument_list pos:line="9" pos:column="22">(<argument><expr><name pos:line="9" pos:column="23">bumpMode<pos:position pos:line="9" pos:column="31"/></name></expr></argument>)<pos:position pos:line="9" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="33"/></expr_stmt> <comment type="line" pos:line="9" pos:column="34">// for processRequest() to bump if needed</comment>
    <expr_stmt><expr><name><name pos:line="10" pos:column="5">http<pos:position pos:line="10" pos:column="9"/></name><operator pos:line="10" pos:column="9">-&gt;<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="11">al<pos:position pos:line="10" pos:column="13"/></name><operator pos:line="10" pos:column="13">-&gt;<pos:position pos:line="10" pos:column="18"/></operator><name pos:line="10" pos:column="15">ssl<pos:position pos:line="10" pos:column="18"/></name><operator pos:line="10" pos:column="18">.<pos:position pos:line="10" pos:column="19"/></operator><name pos:line="10" pos:column="19">bumpMode<pos:position pos:line="10" pos:column="27"/></name></name> <operator pos:line="10" pos:column="28">=<pos:position pos:line="10" pos:column="29"/></operator> <name pos:line="10" pos:column="30">bumpMode<pos:position pos:line="10" pos:column="38"/></name></expr>;<pos:position pos:line="10" pos:column="39"/></expr_stmt> <comment type="line" pos:line="10" pos:column="40">// for logging</comment>

    <expr_stmt><expr><call><name><name pos:line="12" pos:column="5">http<pos:position pos:line="12" pos:column="9"/></name><operator pos:line="12" pos:column="9">-&gt;<pos:position pos:line="12" pos:column="14"/></operator><name pos:line="12" pos:column="11">doCallouts<pos:position pos:line="12" pos:column="21"/></name></name><argument_list pos:line="12" pos:column="21">()<pos:position pos:line="12" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="24"/></expr_stmt>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
