<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5500_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ident<pos:position pos:line="2" pos:column="6"/></name><operator pos:line="2" pos:column="6">::<pos:position pos:line="2" pos:column="8"/></operator><name pos:line="2" pos:column="8">ReadReply<pos:position pos:line="2" pos:column="17"/></name></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><specifier pos:line="2" pos:column="18">const<pos:position pos:line="2" pos:column="23"/></specifier> <name><name pos:line="2" pos:column="24">Comm<pos:position pos:line="2" pos:column="28"/></name><operator pos:line="2" pos:column="28">::<pos:position pos:line="2" pos:column="30"/></operator><name pos:line="2" pos:column="30">ConnectionPointer<pos:position pos:line="2" pos:column="47"/></name></name> <modifier pos:line="2" pos:column="48">&amp;<pos:position pos:line="2" pos:column="53"/></modifier></type><name pos:line="2" pos:column="49">conn<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="55">char<pos:position pos:line="2" pos:column="59"/></name> <modifier pos:line="2" pos:column="60">*<pos:position pos:line="2" pos:column="61"/></modifier></type><name pos:line="2" pos:column="61">buf<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="66">size_t<pos:position pos:line="2" pos:column="72"/></name></type> <name pos:line="2" pos:column="73">len<pos:position pos:line="2" pos:column="76"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="78">Comm<pos:position pos:line="2" pos:column="82"/></name><operator pos:line="2" pos:column="82">::<pos:position pos:line="2" pos:column="84"/></operator><name pos:line="2" pos:column="84">Flag<pos:position pos:line="2" pos:column="88"/></name></name></type> <name pos:line="2" pos:column="89">flag<pos:position pos:line="2" pos:column="93"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="95">int<pos:position pos:line="2" pos:column="98"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="100">void<pos:position pos:line="2" pos:column="104"/></name> <modifier pos:line="2" pos:column="105">*<pos:position pos:line="2" pos:column="106"/></modifier></type><name pos:line="2" pos:column="106">data<pos:position pos:line="2" pos:column="110"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="111"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">IdentStateData<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">state<pos:position pos:line="4" pos:column="26"/></name> <init pos:line="4" pos:column="27">= <expr><operator pos:line="4" pos:column="29">(<pos:position pos:line="4" pos:column="30"/></operator><name pos:line="4" pos:column="30">IdentStateData<pos:position pos:line="4" pos:column="44"/></name> <operator pos:line="4" pos:column="45">*<pos:position pos:line="4" pos:column="46"/></operator><operator pos:line="4" pos:column="46">)<pos:position pos:line="4" pos:column="47"/></operator><name pos:line="4" pos:column="47">data<pos:position pos:line="4" pos:column="51"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="52"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">ident<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><name pos:line="5" pos:column="19">NULL<pos:position pos:line="5" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name> <modifier pos:line="6" pos:column="10">*<pos:position pos:line="6" pos:column="11"/></modifier></type><name pos:line="6" pos:column="11">t<pos:position pos:line="6" pos:column="12"/></name> <init pos:line="6" pos:column="13">= <expr><name pos:line="6" pos:column="15">NULL<pos:position pos:line="6" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="8" pos:column="5">assert<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><name pos:line="8" pos:column="12">buf<pos:position pos:line="8" pos:column="15"/></name> <operator pos:line="8" pos:column="16">==<pos:position pos:line="8" pos:column="18"/></operator> <name><name pos:line="8" pos:column="19">state<pos:position pos:line="8" pos:column="24"/></name><operator pos:line="8" pos:column="24">-&gt;<pos:position pos:line="8" pos:column="29"/></operator><name pos:line="8" pos:column="26">buf<pos:position pos:line="8" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">assert<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><name><name pos:line="9" pos:column="12">conn<pos:position pos:line="9" pos:column="16"/></name><operator pos:line="9" pos:column="16">-&gt;<pos:position pos:line="9" pos:column="21"/></operator><name pos:line="9" pos:column="18">fd<pos:position pos:line="9" pos:column="20"/></name></name> <operator pos:line="9" pos:column="21">==<pos:position pos:line="9" pos:column="23"/></operator> <name><name pos:line="9" pos:column="24">state<pos:position pos:line="9" pos:column="29"/></name><operator pos:line="9" pos:column="29">-&gt;<pos:position pos:line="9" pos:column="34"/></operator><name pos:line="9" pos:column="31">conn<pos:position pos:line="9" pos:column="35"/></name><operator pos:line="9" pos:column="35">-&gt;<pos:position pos:line="9" pos:column="40"/></operator><name pos:line="9" pos:column="37">fd<pos:position pos:line="9" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="41"/></expr_stmt>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name pos:line="11" pos:column="9">flag<pos:position pos:line="11" pos:column="13"/></name> <operator pos:line="11" pos:column="14">!=<pos:position pos:line="11" pos:column="16"/></operator> <name><name pos:line="11" pos:column="17">Comm<pos:position pos:line="11" pos:column="21"/></name><operator pos:line="11" pos:column="21">::<pos:position pos:line="11" pos:column="23"/></operator><name pos:line="11" pos:column="23">OK<pos:position pos:line="11" pos:column="25"/></name></name> <operator pos:line="11" pos:column="26">||<pos:position pos:line="11" pos:column="28"/></operator> <name pos:line="11" pos:column="29">len<pos:position pos:line="11" pos:column="32"/></name> <operator pos:line="11" pos:column="33">&lt;=<pos:position pos:line="11" pos:column="38"/></operator> <literal type="number" pos:line="11" pos:column="36">0<pos:position pos:line="11" pos:column="37"/></literal></expr>)<pos:position pos:line="11" pos:column="38"/></condition><then pos:line="11" pos:column="38"> <block pos:line="11" pos:column="39">{
        <expr_stmt><expr><call><name><name pos:line="12" pos:column="9">state<pos:position pos:line="12" pos:column="14"/></name><operator pos:line="12" pos:column="14">-&gt;<pos:position pos:line="12" pos:column="19"/></operator><name pos:line="12" pos:column="16">deleteThis<pos:position pos:line="12" pos:column="26"/></name></name><argument_list pos:line="12" pos:column="26">(<argument><expr><literal type="string" pos:line="12" pos:column="27">"read error"<pos:position pos:line="12" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="41"/></expr_stmt>
        <return pos:line="13" pos:column="9">return;<pos:position pos:line="13" pos:column="16"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="16" pos:column="5">/*
     * XXX This isn't really very tolerant. It should read until EOL
     * or EOF and then decode the answer... If the reply is fragmented
     * then this will fail
     */</comment>
    <expr_stmt><expr><name><name pos:line="21" pos:column="5">buf<pos:position pos:line="21" pos:column="8"/></name><index pos:line="21" pos:column="8">[<expr><name pos:line="21" pos:column="9">len<pos:position pos:line="21" pos:column="12"/></name></expr>]<pos:position pos:line="21" pos:column="13"/></index></name> <operator pos:line="21" pos:column="14">=<pos:position pos:line="21" pos:column="15"/></operator> <literal type="char" pos:line="21" pos:column="16">'\0'<pos:position pos:line="21" pos:column="20"/></literal></expr>;<pos:position pos:line="21" pos:column="21"/></expr_stmt>

    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><operator pos:line="23" pos:column="9">(<pos:position pos:line="23" pos:column="10"/></operator><name pos:line="23" pos:column="10">t<pos:position pos:line="23" pos:column="11"/></name> <operator pos:line="23" pos:column="12">=<pos:position pos:line="23" pos:column="13"/></operator> <call><name pos:line="23" pos:column="14">strchr<pos:position pos:line="23" pos:column="20"/></name><argument_list pos:line="23" pos:column="20">(<argument><expr><name pos:line="23" pos:column="21">buf<pos:position pos:line="23" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="23" pos:column="26">'\r'<pos:position pos:line="23" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="31"/></argument_list></call><operator pos:line="23" pos:column="31">)<pos:position pos:line="23" pos:column="32"/></operator></expr>)<pos:position pos:line="23" pos:column="33"/></condition><then pos:line="23" pos:column="33">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="24" pos:column="9">*<pos:position pos:line="24" pos:column="10"/></operator><name pos:line="24" pos:column="10">t<pos:position pos:line="24" pos:column="11"/></name> <operator pos:line="24" pos:column="12">=<pos:position pos:line="24" pos:column="13"/></operator> <literal type="char" pos:line="24" pos:column="14">'\0'<pos:position pos:line="24" pos:column="18"/></literal></expr>;<pos:position pos:line="24" pos:column="19"/></expr_stmt></block></then></if>

    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><operator pos:line="26" pos:column="9">(<pos:position pos:line="26" pos:column="10"/></operator><name pos:line="26" pos:column="10">t<pos:position pos:line="26" pos:column="11"/></name> <operator pos:line="26" pos:column="12">=<pos:position pos:line="26" pos:column="13"/></operator> <call><name pos:line="26" pos:column="14">strchr<pos:position pos:line="26" pos:column="20"/></name><argument_list pos:line="26" pos:column="20">(<argument><expr><name pos:line="26" pos:column="21">buf<pos:position pos:line="26" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="26" pos:column="26">'\n'<pos:position pos:line="26" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="31"/></argument_list></call><operator pos:line="26" pos:column="31">)<pos:position pos:line="26" pos:column="32"/></operator></expr>)<pos:position pos:line="26" pos:column="33"/></condition><then pos:line="26" pos:column="33">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="27" pos:column="9">*<pos:position pos:line="27" pos:column="10"/></operator><name pos:line="27" pos:column="10">t<pos:position pos:line="27" pos:column="11"/></name> <operator pos:line="27" pos:column="12">=<pos:position pos:line="27" pos:column="13"/></operator> <literal type="char" pos:line="27" pos:column="14">'\0'<pos:position pos:line="27" pos:column="18"/></literal></expr>;<pos:position pos:line="27" pos:column="19"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="29" pos:column="5">debugs<pos:position pos:line="29" pos:column="11"/></name><argument_list pos:line="29" pos:column="11">(<argument><expr><literal type="number" pos:line="29" pos:column="12">30<pos:position pos:line="29" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="16">5<pos:position pos:line="29" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="19">HERE<pos:position pos:line="29" pos:column="23"/></name> <operator pos:line="29" pos:column="24">&lt;&lt;<pos:position pos:line="29" pos:column="32"/></operator> <name pos:line="29" pos:column="27">conn<pos:position pos:line="29" pos:column="31"/></name> <operator pos:line="29" pos:column="32">&lt;&lt;<pos:position pos:line="29" pos:column="40"/></operator> <literal type="string" pos:line="29" pos:column="35">": Read '"<pos:position pos:line="29" pos:column="45"/></literal> <operator pos:line="29" pos:column="46">&lt;&lt;<pos:position pos:line="29" pos:column="54"/></operator> <name pos:line="29" pos:column="49">buf<pos:position pos:line="29" pos:column="52"/></name> <operator pos:line="29" pos:column="53">&lt;&lt;<pos:position pos:line="29" pos:column="61"/></operator> <literal type="string" pos:line="29" pos:column="56">"'"<pos:position pos:line="29" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="61"/></expr_stmt>

    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><call><name pos:line="31" pos:column="9">strstr<pos:position pos:line="31" pos:column="15"/></name><argument_list pos:line="31" pos:column="15">(<argument><expr><name pos:line="31" pos:column="16">buf<pos:position pos:line="31" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="21">"USERID"<pos:position pos:line="31" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="31"/></condition><then pos:line="31" pos:column="31"> <block pos:line="31" pos:column="32">{
        <if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><operator pos:line="32" pos:column="13">(<pos:position pos:line="32" pos:column="14"/></operator><name pos:line="32" pos:column="14">ident<pos:position pos:line="32" pos:column="19"/></name> <operator pos:line="32" pos:column="20">=<pos:position pos:line="32" pos:column="21"/></operator> <call><name pos:line="32" pos:column="22">strrchr<pos:position pos:line="32" pos:column="29"/></name><argument_list pos:line="32" pos:column="29">(<argument><expr><name pos:line="32" pos:column="30">buf<pos:position pos:line="32" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="32" pos:column="35">':'<pos:position pos:line="32" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="39"/></argument_list></call><operator pos:line="32" pos:column="39">)<pos:position pos:line="32" pos:column="40"/></operator></expr>)<pos:position pos:line="32" pos:column="41"/></condition><then pos:line="32" pos:column="41"> <block pos:line="32" pos:column="42">{
            <while pos:line="33" pos:column="13">while <condition pos:line="33" pos:column="19">(<expr><call><name pos:line="33" pos:column="20">xisspace<pos:position pos:line="33" pos:column="28"/></name><argument_list pos:line="33" pos:column="28">(<argument><expr><operator pos:line="33" pos:column="29">*<pos:position pos:line="33" pos:column="30"/></operator><operator pos:line="33" pos:column="30">++<pos:position pos:line="33" pos:column="32"/></operator><name pos:line="33" pos:column="32">ident<pos:position pos:line="33" pos:column="37"/></name></expr></argument>)<pos:position pos:line="33" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="39"/></condition><block type="pseudo"><empty_stmt pos:line="33" pos:column="39">;<pos:position pos:line="33" pos:column="40"/></empty_stmt></block></while>
            <if pos:line="34" pos:column="13">if <condition pos:line="34" pos:column="16">(<expr><name pos:line="34" pos:column="17">ident<pos:position pos:line="34" pos:column="22"/></name> <operator pos:line="34" pos:column="23">&amp;&amp;<pos:position pos:line="34" pos:column="33"/></operator> <operator pos:line="34" pos:column="26">*<pos:position pos:line="34" pos:column="27"/></operator><name pos:line="34" pos:column="27">ident<pos:position pos:line="34" pos:column="32"/></name> <operator pos:line="34" pos:column="33">==<pos:position pos:line="34" pos:column="35"/></operator> <literal type="char" pos:line="34" pos:column="36">'\0'<pos:position pos:line="34" pos:column="40"/></literal></expr>)<pos:position pos:line="34" pos:column="41"/></condition><then pos:line="34" pos:column="41">
                <block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="17">ident<pos:position pos:line="35" pos:column="22"/></name> <operator pos:line="35" pos:column="23">=<pos:position pos:line="35" pos:column="24"/></operator> <name pos:line="35" pos:column="25">NULL<pos:position pos:line="35" pos:column="29"/></name></expr>;<pos:position pos:line="35" pos:column="30"/></expr_stmt></block></then></if>
            <expr_stmt><expr><call><name><name pos:line="36" pos:column="13">state<pos:position pos:line="36" pos:column="18"/></name><operator pos:line="36" pos:column="18">-&gt;<pos:position pos:line="36" pos:column="23"/></operator><name pos:line="36" pos:column="20">notify<pos:position pos:line="36" pos:column="26"/></name></name><argument_list pos:line="36" pos:column="26">(<argument><expr><name pos:line="36" pos:column="27">ident<pos:position pos:line="36" pos:column="32"/></name></expr></argument>)<pos:position pos:line="36" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="34"/></expr_stmt>
        }<pos:position pos:line="37" pos:column="10"/></block></then></if>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="40" pos:column="5">state<pos:position pos:line="40" pos:column="10"/></name><operator pos:line="40" pos:column="10">-&gt;<pos:position pos:line="40" pos:column="15"/></operator><name pos:line="40" pos:column="12">deleteThis<pos:position pos:line="40" pos:column="22"/></name></name><argument_list pos:line="40" pos:column="22">(<argument><expr><literal type="string" pos:line="40" pos:column="23">"completed"<pos:position pos:line="40" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="36"/></expr_stmt>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
