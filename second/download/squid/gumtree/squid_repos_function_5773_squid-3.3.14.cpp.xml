<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5773_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Icmp4<pos:position pos:line="2" pos:column="6"/></name><operator pos:line="2" pos:column="6">::<pos:position pos:line="2" pos:column="8"/></operator><name pos:line="2" pos:column="8">SendEcho<pos:position pos:line="2" pos:column="16"/></name></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name><name pos:line="2" pos:column="17">Ip<pos:position pos:line="2" pos:column="19"/></name><operator pos:line="2" pos:column="19">::<pos:position pos:line="2" pos:column="21"/></operator><name pos:line="2" pos:column="21">Address<pos:position pos:line="2" pos:column="28"/></name></name> <modifier pos:line="2" pos:column="29">&amp;<pos:position pos:line="2" pos:column="34"/></modifier></type><name pos:line="2" pos:column="30">to<pos:position pos:line="2" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="34">int<pos:position pos:line="2" pos:column="37"/></name></type> <name pos:line="2" pos:column="38">opcode<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="46">const<pos:position pos:line="2" pos:column="51"/></specifier> <name pos:line="2" pos:column="52">char<pos:position pos:line="2" pos:column="56"/></name> <modifier pos:line="2" pos:column="57">*<pos:position pos:line="2" pos:column="58"/></modifier></type><name pos:line="2" pos:column="58">payload<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="67">int<pos:position pos:line="2" pos:column="70"/></name></type> <name pos:line="2" pos:column="71">len<pos:position pos:line="2" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="75"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">x<pos:position pos:line="4" pos:column="10"/></name></decl>;<pos:position pos:line="4" pos:column="11"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">LOCAL_ARRAY<pos:position pos:line="5" pos:column="16"/></name><argument_list pos:line="5" pos:column="16">(<argument><expr><name pos:line="5" pos:column="17">char<pos:position pos:line="5" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="23">pkt<pos:position pos:line="5" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="28">MAX_PKT4_SZ<pos:position pos:line="5" pos:column="39"/></name></expr></argument>)<pos:position pos:line="5" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="41"/></expr_stmt>

    <decl_stmt><decl><type><name><name pos:line="7" pos:column="5">struct<pos:position pos:line="7" pos:column="11"/></name> <name pos:line="7" pos:column="12">icmphdr<pos:position pos:line="7" pos:column="19"/></name></name> <modifier pos:line="7" pos:column="20">*<pos:position pos:line="7" pos:column="21"/></modifier></type><name pos:line="7" pos:column="21">icmp<pos:position pos:line="7" pos:column="25"/></name> <init pos:line="7" pos:column="26">= <expr><name pos:line="7" pos:column="28">NULL<pos:position pos:line="7" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">icmpEchoData<pos:position pos:line="8" pos:column="17"/></name> <modifier pos:line="8" pos:column="18">*<pos:position pos:line="8" pos:column="19"/></modifier></type><name pos:line="8" pos:column="19">echo<pos:position pos:line="8" pos:column="23"/></name></decl>;<pos:position pos:line="8" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">size_t<pos:position pos:line="9" pos:column="11"/></name></type> <name pos:line="9" pos:column="12">icmp_pktsize<pos:position pos:line="9" pos:column="24"/></name> <init pos:line="9" pos:column="25">= <expr><sizeof pos:line="9" pos:column="27">sizeof<argument_list pos:line="9" pos:column="33">(<argument><expr pos:line="9" pos:column="34">struct <name pos:line="9" pos:column="41">icmphdr<pos:position pos:line="9" pos:column="48"/></name></expr></argument>)<pos:position pos:line="9" pos:column="49"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="9" pos:column="50"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="10" pos:column="5">struct<pos:position pos:line="10" pos:column="11"/></name> <name pos:line="10" pos:column="12">addrinfo<pos:position pos:line="10" pos:column="20"/></name></name> <modifier pos:line="10" pos:column="21">*<pos:position pos:line="10" pos:column="22"/></modifier></type><name pos:line="10" pos:column="22">S<pos:position pos:line="10" pos:column="23"/></name> <init pos:line="10" pos:column="24">= <expr><name pos:line="10" pos:column="26">NULL<pos:position pos:line="10" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="31"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="12" pos:column="5">memset<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><name pos:line="12" pos:column="12">pkt<pos:position pos:line="12" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="12" pos:column="17">'\0'<pos:position pos:line="12" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="23">MAX_PKT4_SZ<pos:position pos:line="12" pos:column="34"/></name></expr></argument>)<pos:position pos:line="12" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="36"/></expr_stmt>

    <expr_stmt><expr><name pos:line="14" pos:column="5">icmp<pos:position pos:line="14" pos:column="9"/></name> <operator pos:line="14" pos:column="10">=<pos:position pos:line="14" pos:column="11"/></operator> <operator pos:line="14" pos:column="12">(<pos:position pos:line="14" pos:column="13"/></operator>struct <name pos:line="14" pos:column="20">icmphdr<pos:position pos:line="14" pos:column="27"/></name> <operator pos:line="14" pos:column="28">*<pos:position pos:line="14" pos:column="29"/></operator><operator pos:line="14" pos:column="29">)<pos:position pos:line="14" pos:column="30"/></operator> <operator pos:line="14" pos:column="31">(<pos:position pos:line="14" pos:column="32"/></operator><name pos:line="14" pos:column="32">void<pos:position pos:line="14" pos:column="36"/></name> <operator pos:line="14" pos:column="37">*<pos:position pos:line="14" pos:column="38"/></operator><operator pos:line="14" pos:column="38">)<pos:position pos:line="14" pos:column="39"/></operator> <name pos:line="14" pos:column="40">pkt<pos:position pos:line="14" pos:column="43"/></name></expr>;<pos:position pos:line="14" pos:column="44"/></expr_stmt>

    <comment type="block" pos:line="16" pos:column="5">/*
     * cevans - beware signed/unsigned issues in untrusted data from
     * the network!!
     */</comment>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">len<pos:position pos:line="20" pos:column="12"/></name> <operator pos:line="20" pos:column="13">&lt;<pos:position pos:line="20" pos:column="17"/></operator> <literal type="number" pos:line="20" pos:column="15">0<pos:position pos:line="20" pos:column="16"/></literal></expr>)<pos:position pos:line="20" pos:column="17"/></condition><then pos:line="20" pos:column="17"> <block pos:line="20" pos:column="18">{
        <expr_stmt><expr><name pos:line="21" pos:column="9">len<pos:position pos:line="21" pos:column="12"/></name> <operator pos:line="21" pos:column="13">=<pos:position pos:line="21" pos:column="14"/></operator> <literal type="number" pos:line="21" pos:column="15">0<pos:position pos:line="21" pos:column="16"/></literal></expr>;<pos:position pos:line="21" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="24" pos:column="5">// Construct ICMP packet header</comment>
    <expr_stmt><expr><name><name pos:line="25" pos:column="5">icmp<pos:position pos:line="25" pos:column="9"/></name><operator pos:line="25" pos:column="9">-&gt;<pos:position pos:line="25" pos:column="14"/></operator><name pos:line="25" pos:column="11">icmp_type<pos:position pos:line="25" pos:column="20"/></name></name> <operator pos:line="25" pos:column="21">=<pos:position pos:line="25" pos:column="22"/></operator> <name pos:line="25" pos:column="23">ICMP_ECHO<pos:position pos:line="25" pos:column="32"/></name></expr>;<pos:position pos:line="25" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="26" pos:column="5">icmp<pos:position pos:line="26" pos:column="9"/></name><operator pos:line="26" pos:column="9">-&gt;<pos:position pos:line="26" pos:column="14"/></operator><name pos:line="26" pos:column="11">icmp_code<pos:position pos:line="26" pos:column="20"/></name></name> <operator pos:line="26" pos:column="21">=<pos:position pos:line="26" pos:column="22"/></operator> <literal type="number" pos:line="26" pos:column="23">0<pos:position pos:line="26" pos:column="24"/></literal></expr>;<pos:position pos:line="26" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="27" pos:column="5">icmp<pos:position pos:line="27" pos:column="9"/></name><operator pos:line="27" pos:column="9">-&gt;<pos:position pos:line="27" pos:column="14"/></operator><name pos:line="27" pos:column="11">icmp_cksum<pos:position pos:line="27" pos:column="21"/></name></name> <operator pos:line="27" pos:column="22">=<pos:position pos:line="27" pos:column="23"/></operator> <literal type="number" pos:line="27" pos:column="24">0<pos:position pos:line="27" pos:column="25"/></literal></expr>;<pos:position pos:line="27" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="28" pos:column="5">icmp<pos:position pos:line="28" pos:column="9"/></name><operator pos:line="28" pos:column="9">-&gt;<pos:position pos:line="28" pos:column="14"/></operator><name pos:line="28" pos:column="11">icmp_id<pos:position pos:line="28" pos:column="18"/></name></name> <operator pos:line="28" pos:column="19">=<pos:position pos:line="28" pos:column="20"/></operator> <name pos:line="28" pos:column="21">icmp_ident<pos:position pos:line="28" pos:column="31"/></name></expr>;<pos:position pos:line="28" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="29" pos:column="5">icmp<pos:position pos:line="29" pos:column="9"/></name><operator pos:line="29" pos:column="9">-&gt;<pos:position pos:line="29" pos:column="14"/></operator><name pos:line="29" pos:column="11">icmp_seq<pos:position pos:line="29" pos:column="19"/></name></name> <operator pos:line="29" pos:column="20">=<pos:position pos:line="29" pos:column="21"/></operator> <operator pos:line="29" pos:column="22">(<pos:position pos:line="29" pos:column="23"/></operator><name pos:line="29" pos:column="23">unsigned<pos:position pos:line="29" pos:column="31"/></name> <name pos:line="29" pos:column="32">short<pos:position pos:line="29" pos:column="37"/></name><operator pos:line="29" pos:column="37">)<pos:position pos:line="29" pos:column="38"/></operator> <name pos:line="29" pos:column="39">icmp_pkts_sent<pos:position pos:line="29" pos:column="53"/></name></expr>;<pos:position pos:line="29" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="30" pos:column="5">++<pos:position pos:line="30" pos:column="7"/></operator><name pos:line="30" pos:column="7">icmp_pkts_sent<pos:position pos:line="30" pos:column="21"/></name></expr>;<pos:position pos:line="30" pos:column="22"/></expr_stmt>

    <comment type="line" pos:line="32" pos:column="5">// Construct ICMP packet data content</comment>
    <expr_stmt><expr><name pos:line="33" pos:column="5">echo<pos:position pos:line="33" pos:column="9"/></name> <operator pos:line="33" pos:column="10">=<pos:position pos:line="33" pos:column="11"/></operator> <operator pos:line="33" pos:column="12">(<pos:position pos:line="33" pos:column="13"/></operator><name pos:line="33" pos:column="13">icmpEchoData<pos:position pos:line="33" pos:column="25"/></name> <operator pos:line="33" pos:column="26">*<pos:position pos:line="33" pos:column="27"/></operator><operator pos:line="33" pos:column="27">)<pos:position pos:line="33" pos:column="28"/></operator> <operator pos:line="33" pos:column="29">(<pos:position pos:line="33" pos:column="30"/></operator><name pos:line="33" pos:column="30">icmp<pos:position pos:line="33" pos:column="34"/></name> <operator pos:line="33" pos:column="35">+<pos:position pos:line="33" pos:column="36"/></operator> <literal type="number" pos:line="33" pos:column="37">1<pos:position pos:line="33" pos:column="38"/></literal><operator pos:line="33" pos:column="38">)<pos:position pos:line="33" pos:column="39"/></operator></expr>;<pos:position pos:line="33" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="34" pos:column="5">echo<pos:position pos:line="34" pos:column="9"/></name><operator pos:line="34" pos:column="9">-&gt;<pos:position pos:line="34" pos:column="14"/></operator><name pos:line="34" pos:column="11">opcode<pos:position pos:line="34" pos:column="17"/></name></name> <operator pos:line="34" pos:column="18">=<pos:position pos:line="34" pos:column="19"/></operator> <operator pos:line="34" pos:column="20">(<pos:position pos:line="34" pos:column="21"/></operator><name pos:line="34" pos:column="21">unsigned<pos:position pos:line="34" pos:column="29"/></name> <name pos:line="34" pos:column="30">char<pos:position pos:line="34" pos:column="34"/></name><operator pos:line="34" pos:column="34">)<pos:position pos:line="34" pos:column="35"/></operator> <name pos:line="34" pos:column="36">opcode<pos:position pos:line="34" pos:column="42"/></name></expr>;<pos:position pos:line="34" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">memcpy<pos:position pos:line="35" pos:column="11"/></name><argument_list pos:line="35" pos:column="11">(<argument><expr><operator pos:line="35" pos:column="12">&amp;<pos:position pos:line="35" pos:column="17"/></operator><name><name pos:line="35" pos:column="13">echo<pos:position pos:line="35" pos:column="17"/></name><operator pos:line="35" pos:column="17">-&gt;<pos:position pos:line="35" pos:column="22"/></operator><name pos:line="35" pos:column="19">tv<pos:position pos:line="35" pos:column="21"/></name></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="23">&amp;<pos:position pos:line="35" pos:column="28"/></operator><name pos:line="35" pos:column="24">current_time<pos:position pos:line="35" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="35" pos:column="38">sizeof<argument_list pos:line="35" pos:column="44">(<argument><expr pos:line="35" pos:column="45">struct <name pos:line="35" pos:column="52">timeval<pos:position pos:line="35" pos:column="59"/></name></expr></argument>)<pos:position pos:line="35" pos:column="60"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="35" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="62"/></expr_stmt>

    <expr_stmt><expr><name pos:line="37" pos:column="5">icmp_pktsize<pos:position pos:line="37" pos:column="17"/></name> <operator pos:line="37" pos:column="18">+=<pos:position pos:line="37" pos:column="20"/></operator> <sizeof pos:line="37" pos:column="21">sizeof<argument_list pos:line="37" pos:column="27">(<argument><expr pos:line="37" pos:column="28">struct <name pos:line="37" pos:column="35">timeval<pos:position pos:line="37" pos:column="42"/></name></expr></argument>)<pos:position pos:line="37" pos:column="43"/></argument_list></sizeof> <operator pos:line="37" pos:column="44">+<pos:position pos:line="37" pos:column="45"/></operator> <sizeof pos:line="37" pos:column="46">sizeof<argument_list pos:line="37" pos:column="52">(<argument><expr><name pos:line="37" pos:column="53">char<pos:position pos:line="37" pos:column="57"/></name></expr></argument>)<pos:position pos:line="37" pos:column="58"/></argument_list></sizeof></expr>;<pos:position pos:line="37" pos:column="59"/></expr_stmt>

    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><name pos:line="39" pos:column="9">payload<pos:position pos:line="39" pos:column="16"/></name></expr>)<pos:position pos:line="39" pos:column="17"/></condition><then pos:line="39" pos:column="17"> <block pos:line="39" pos:column="18">{
        <if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><name pos:line="40" pos:column="13">len<pos:position pos:line="40" pos:column="16"/></name> <operator pos:line="40" pos:column="17">&gt;<pos:position pos:line="40" pos:column="21"/></operator> <name pos:line="40" pos:column="19">MAX_PAYLOAD<pos:position pos:line="40" pos:column="30"/></name></expr>)<pos:position pos:line="40" pos:column="31"/></condition><then pos:line="40" pos:column="31">
            <block type="pseudo"><expr_stmt><expr><name pos:line="41" pos:column="13">len<pos:position pos:line="41" pos:column="16"/></name> <operator pos:line="41" pos:column="17">=<pos:position pos:line="41" pos:column="18"/></operator> <name pos:line="41" pos:column="19">MAX_PAYLOAD<pos:position pos:line="41" pos:column="30"/></name></expr>;<pos:position pos:line="41" pos:column="31"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name pos:line="43" pos:column="9">memcpy<pos:position pos:line="43" pos:column="15"/></name><argument_list pos:line="43" pos:column="15">(<argument><expr><name><name pos:line="43" pos:column="16">echo<pos:position pos:line="43" pos:column="20"/></name><operator pos:line="43" pos:column="20">-&gt;<pos:position pos:line="43" pos:column="25"/></operator><name pos:line="43" pos:column="22">payload<pos:position pos:line="43" pos:column="29"/></name></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="31">payload<pos:position pos:line="43" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="40">len<pos:position pos:line="43" pos:column="43"/></name></expr></argument>)<pos:position pos:line="43" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="45"/></expr_stmt>

        <expr_stmt><expr><name pos:line="45" pos:column="9">icmp_pktsize<pos:position pos:line="45" pos:column="21"/></name> <operator pos:line="45" pos:column="22">+=<pos:position pos:line="45" pos:column="24"/></operator> <name pos:line="45" pos:column="25">len<pos:position pos:line="45" pos:column="28"/></name></expr>;<pos:position pos:line="45" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="46" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="48" pos:column="5">icmp<pos:position pos:line="48" pos:column="9"/></name><operator pos:line="48" pos:column="9">-&gt;<pos:position pos:line="48" pos:column="14"/></operator><name pos:line="48" pos:column="11">icmp_cksum<pos:position pos:line="48" pos:column="21"/></name></name> <operator pos:line="48" pos:column="22">=<pos:position pos:line="48" pos:column="23"/></operator> <call><name pos:line="48" pos:column="24">CheckSum<pos:position pos:line="48" pos:column="32"/></name><argument_list pos:line="48" pos:column="32">(<argument><expr><operator pos:line="48" pos:column="33">(<pos:position pos:line="48" pos:column="34"/></operator><name pos:line="48" pos:column="34">unsigned<pos:position pos:line="48" pos:column="42"/></name> <name pos:line="48" pos:column="43">short<pos:position pos:line="48" pos:column="48"/></name> <operator pos:line="48" pos:column="49">*<pos:position pos:line="48" pos:column="50"/></operator><operator pos:line="48" pos:column="50">)<pos:position pos:line="48" pos:column="51"/></operator> <name pos:line="48" pos:column="52">icmp<pos:position pos:line="48" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="58">icmp_pktsize<pos:position pos:line="48" pos:column="70"/></name></expr></argument>)<pos:position pos:line="48" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="72"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="50" pos:column="5">to<pos:position pos:line="50" pos:column="7"/></name><operator pos:line="50" pos:column="7">.<pos:position pos:line="50" pos:column="8"/></operator><name pos:line="50" pos:column="8">GetAddrInfo<pos:position pos:line="50" pos:column="19"/></name></name><argument_list pos:line="50" pos:column="19">(<argument><expr><name pos:line="50" pos:column="20">S<pos:position pos:line="50" pos:column="21"/></name></expr></argument>)<pos:position pos:line="50" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="51" pos:column="5">(<pos:position pos:line="51" pos:column="6"/></operator><operator pos:line="51" pos:column="6">(<pos:position pos:line="51" pos:column="7"/></operator><name pos:line="51" pos:column="7">sockaddr_in<pos:position pos:line="51" pos:column="18"/></name><operator pos:line="51" pos:column="18">*<pos:position pos:line="51" pos:column="19"/></operator><operator pos:line="51" pos:column="19">)<pos:position pos:line="51" pos:column="20"/></operator><name><name pos:line="51" pos:column="20">S<pos:position pos:line="51" pos:column="21"/></name><operator pos:line="51" pos:column="21">-&gt;<pos:position pos:line="51" pos:column="26"/></operator><name pos:line="51" pos:column="23">ai_addr<pos:position pos:line="51" pos:column="30"/></name></name><operator pos:line="51" pos:column="30">)<pos:position pos:line="51" pos:column="31"/></operator><operator pos:line="51" pos:column="31">-&gt;<pos:position pos:line="51" pos:column="36"/></operator><name pos:line="51" pos:column="33">sin_port<pos:position pos:line="51" pos:column="41"/></name> <operator pos:line="51" pos:column="42">=<pos:position pos:line="51" pos:column="43"/></operator> <literal type="number" pos:line="51" pos:column="44">0<pos:position pos:line="51" pos:column="45"/></literal></expr>;<pos:position pos:line="51" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="52" pos:column="5">assert<pos:position pos:line="52" pos:column="11"/></name><argument_list pos:line="52" pos:column="11">(<argument><expr><name pos:line="52" pos:column="12">icmp_pktsize<pos:position pos:line="52" pos:column="24"/></name> <operator pos:line="52" pos:column="25">&lt;=<pos:position pos:line="52" pos:column="30"/></operator> <name pos:line="52" pos:column="28">MAX_PKT4_SZ<pos:position pos:line="52" pos:column="39"/></name></expr></argument>)<pos:position pos:line="52" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="41"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="54" pos:column="5">debugs<pos:position pos:line="54" pos:column="11"/></name><argument_list pos:line="54" pos:column="11">(<argument><expr><literal type="number" pos:line="54" pos:column="12">42<pos:position pos:line="54" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="54" pos:column="16">5<pos:position pos:line="54" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="54" pos:column="19">HERE<pos:position pos:line="54" pos:column="23"/></name> <operator pos:line="54" pos:column="24">&lt;&lt;<pos:position pos:line="54" pos:column="32"/></operator> <literal type="string" pos:line="54" pos:column="27">"Send ICMP packet to "<pos:position pos:line="54" pos:column="49"/></literal> <operator pos:line="54" pos:column="50">&lt;&lt;<pos:position pos:line="54" pos:column="58"/></operator> <name pos:line="54" pos:column="53">to<pos:position pos:line="54" pos:column="55"/></name> <operator pos:line="54" pos:column="56">&lt;&lt;<pos:position pos:line="54" pos:column="64"/></operator> <literal type="string" pos:line="54" pos:column="59">"."<pos:position pos:line="54" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="64"/></expr_stmt>

    <expr_stmt><expr><name pos:line="56" pos:column="5">x<pos:position pos:line="56" pos:column="6"/></name> <operator pos:line="56" pos:column="7">=<pos:position pos:line="56" pos:column="8"/></operator> <call><name pos:line="56" pos:column="9">sendto<pos:position pos:line="56" pos:column="15"/></name><argument_list pos:line="56" pos:column="15">(<argument><expr><name pos:line="56" pos:column="16">icmp_sock<pos:position pos:line="56" pos:column="25"/></name></expr></argument>,
               <argument><expr><operator pos:line="57" pos:column="16">(<pos:position pos:line="57" pos:column="17"/></operator><specifier pos:line="57" pos:column="17">const<pos:position pos:line="57" pos:column="22"/></specifier> <name pos:line="57" pos:column="23">void<pos:position pos:line="57" pos:column="27"/></name> <operator pos:line="57" pos:column="28">*<pos:position pos:line="57" pos:column="29"/></operator><operator pos:line="57" pos:column="29">)<pos:position pos:line="57" pos:column="30"/></operator> <name pos:line="57" pos:column="31">pkt<pos:position pos:line="57" pos:column="34"/></name></expr></argument>,
               <argument><expr><name pos:line="58" pos:column="16">icmp_pktsize<pos:position pos:line="58" pos:column="28"/></name></expr></argument>,
               <argument><expr><literal type="number" pos:line="59" pos:column="16">0<pos:position pos:line="59" pos:column="17"/></literal></expr></argument>,
               <argument><expr><name><name pos:line="60" pos:column="16">S<pos:position pos:line="60" pos:column="17"/></name><operator pos:line="60" pos:column="17">-&gt;<pos:position pos:line="60" pos:column="22"/></operator><name pos:line="60" pos:column="19">ai_addr<pos:position pos:line="60" pos:column="26"/></name></name></expr></argument>,
               <argument><expr><name><name pos:line="61" pos:column="16">S<pos:position pos:line="61" pos:column="17"/></name><operator pos:line="61" pos:column="17">-&gt;<pos:position pos:line="61" pos:column="22"/></operator><name pos:line="61" pos:column="19">ai_addrlen<pos:position pos:line="61" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="61" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="31"/></expr_stmt>

    <if pos:line="63" pos:column="5">if <condition pos:line="63" pos:column="8">(<expr><name pos:line="63" pos:column="9">x<pos:position pos:line="63" pos:column="10"/></name> <operator pos:line="63" pos:column="11">&lt;<pos:position pos:line="63" pos:column="15"/></operator> <literal type="number" pos:line="63" pos:column="13">0<pos:position pos:line="63" pos:column="14"/></literal></expr>)<pos:position pos:line="63" pos:column="15"/></condition><then pos:line="63" pos:column="15"> <block pos:line="63" pos:column="16">{
        <expr_stmt><expr><call><name pos:line="64" pos:column="9">debugs<pos:position pos:line="64" pos:column="15"/></name><argument_list pos:line="64" pos:column="15">(<argument><expr><literal type="number" pos:line="64" pos:column="16">42<pos:position pos:line="64" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="64" pos:column="20">DBG_IMPORTANT<pos:position pos:line="64" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="35">HERE<pos:position pos:line="64" pos:column="39"/></name> <operator pos:line="64" pos:column="40">&lt;&lt;<pos:position pos:line="64" pos:column="48"/></operator> <literal type="string" pos:line="64" pos:column="43">"Error sending to ICMP packet to "<pos:position pos:line="64" pos:column="77"/></literal> <operator pos:line="64" pos:column="78">&lt;&lt;<pos:position pos:line="64" pos:column="86"/></operator> <name pos:line="64" pos:column="81">to<pos:position pos:line="64" pos:column="83"/></name> <operator pos:line="64" pos:column="84">&lt;&lt;<pos:position pos:line="64" pos:column="92"/></operator> <literal type="string" pos:line="64" pos:column="87">". ERR: "<pos:position pos:line="64" pos:column="96"/></literal> <operator pos:line="64" pos:column="97">&lt;&lt;<pos:position pos:line="64" pos:column="105"/></operator> <call><name pos:line="64" pos:column="100">xstrerror<pos:position pos:line="64" pos:column="109"/></name><argument_list pos:line="64" pos:column="109">()<pos:position pos:line="64" pos:column="111"/></argument_list></call></expr></argument>)<pos:position pos:line="64" pos:column="112"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="113"/></expr_stmt>
    }<pos:position pos:line="65" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="67" pos:column="5">Log<pos:position pos:line="67" pos:column="8"/></name><argument_list pos:line="67" pos:column="8">(<argument><expr><name pos:line="67" pos:column="9">to<pos:position pos:line="67" pos:column="11"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="67" pos:column="13">' '<pos:position pos:line="67" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="67" pos:column="18">NULL<pos:position pos:line="67" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="67" pos:column="24">0<pos:position pos:line="67" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="67" pos:column="27">0<pos:position pos:line="67" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="68" pos:column="5">to<pos:position pos:line="68" pos:column="7"/></name><operator pos:line="68" pos:column="7">.<pos:position pos:line="68" pos:column="8"/></operator><name pos:line="68" pos:column="8">FreeAddrInfo<pos:position pos:line="68" pos:column="20"/></name></name><argument_list pos:line="68" pos:column="20">(<argument><expr><name pos:line="68" pos:column="21">S<pos:position pos:line="68" pos:column="22"/></name></expr></argument>)<pos:position pos:line="68" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="24"/></expr_stmt>
}<pos:position pos:line="69" pos:column="2"/></block></function></unit>
