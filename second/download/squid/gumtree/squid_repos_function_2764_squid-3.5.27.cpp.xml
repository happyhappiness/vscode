<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2764_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">TunnelStateData<pos:position pos:line="2" pos:column="16"/></name><operator pos:line="2" pos:column="16">::<pos:position pos:line="2" pos:column="18"/></operator><name pos:line="2" pos:column="18">copyRead<pos:position pos:line="2" pos:column="26"/></name></name><parameter_list pos:line="2" pos:column="26">(<parameter><decl><type><name pos:line="2" pos:column="27">Connection<pos:position pos:line="2" pos:column="37"/></name> <modifier pos:line="2" pos:column="38">&amp;<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="39">from<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="45">IOCB<pos:position pos:line="2" pos:column="49"/></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="51">completion<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="62"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name><name pos:line="4" pos:column="12">from<pos:position pos:line="4" pos:column="16"/></name><operator pos:line="4" pos:column="16">.<pos:position pos:line="4" pos:column="17"/></operator><name pos:line="4" pos:column="17">len<pos:position pos:line="4" pos:column="20"/></name></name> <operator pos:line="4" pos:column="21">==<pos:position pos:line="4" pos:column="23"/></operator> <literal type="number" pos:line="4" pos:column="24">0<pos:position pos:line="4" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="27"/></expr_stmt>
    <comment type="line" pos:line="5" pos:column="5">// If only the minimum permitted read size is going to be attempted</comment>
    <comment type="line" pos:line="6" pos:column="5">// then we schedule an event to try again in a few I/O cycles.</comment>
    <comment type="line" pos:line="7" pos:column="5">// Allow at least 1 byte to be read every (0.3*10) seconds.</comment>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">bw<pos:position pos:line="8" pos:column="11"/></name> <init pos:line="8" pos:column="12">= <expr><call><name><name pos:line="8" pos:column="14">from<pos:position pos:line="8" pos:column="18"/></name><operator pos:line="8" pos:column="18">.<pos:position pos:line="8" pos:column="19"/></operator><name pos:line="8" pos:column="19">bytesWanted<pos:position pos:line="8" pos:column="30"/></name></name><argument_list pos:line="8" pos:column="30">(<argument><expr><literal type="number" pos:line="8" pos:column="31">1<pos:position pos:line="8" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="34">SQUID_TCP_SO_RCVBUF<pos:position pos:line="8" pos:column="53"/></name></expr></argument>)<pos:position pos:line="8" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="55"/></decl_stmt>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">bw<pos:position pos:line="9" pos:column="11"/></name> <operator pos:line="9" pos:column="12">==<pos:position pos:line="9" pos:column="14"/></operator> <literal type="number" pos:line="9" pos:column="15">1<pos:position pos:line="9" pos:column="16"/></literal> <operator pos:line="9" pos:column="17">&amp;&amp;<pos:position pos:line="9" pos:column="27"/></operator> <operator pos:line="9" pos:column="20">++<pos:position pos:line="9" pos:column="22"/></operator><name><name pos:line="9" pos:column="22">from<pos:position pos:line="9" pos:column="26"/></name><operator pos:line="9" pos:column="26">.<pos:position pos:line="9" pos:column="27"/></operator><name pos:line="9" pos:column="27">delayedLoops<pos:position pos:line="9" pos:column="39"/></name></name> <operator pos:line="9" pos:column="40">&lt;<pos:position pos:line="9" pos:column="44"/></operator> <literal type="number" pos:line="9" pos:column="42">10<pos:position pos:line="9" pos:column="44"/></literal></expr>)<pos:position pos:line="9" pos:column="45"/></condition><then pos:line="9" pos:column="45"> <block pos:line="9" pos:column="46">{
        <expr_stmt><expr><name><name pos:line="10" pos:column="9">from<pos:position pos:line="10" pos:column="13"/></name><operator pos:line="10" pos:column="13">.<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">readPending<pos:position pos:line="10" pos:column="25"/></name></name> <operator pos:line="10" pos:column="26">=<pos:position pos:line="10" pos:column="27"/></operator> <name pos:line="10" pos:column="28">this<pos:position pos:line="10" pos:column="32"/></name></expr>;<pos:position pos:line="10" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">eventAdd<pos:position pos:line="11" pos:column="17"/></name><argument_list pos:line="11" pos:column="17">(<argument><expr><literal type="string" pos:line="11" pos:column="18">"tunnelDelayedServerRead"<pos:position pos:line="11" pos:column="43"/></literal></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="45">from<pos:position pos:line="11" pos:column="49"/></name><operator pos:line="11" pos:column="49">.<pos:position pos:line="11" pos:column="50"/></operator><name pos:line="11" pos:column="50">readPendingFunc<pos:position pos:line="11" pos:column="65"/></name></name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="67">from<pos:position pos:line="11" pos:column="71"/></name><operator pos:line="11" pos:column="71">.<pos:position pos:line="11" pos:column="72"/></operator><name pos:line="11" pos:column="72">readPending<pos:position pos:line="11" pos:column="83"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="85">0.3<pos:position pos:line="11" pos:column="88"/></literal></expr></argument>, <argument><expr><literal type="boolean" pos:line="11" pos:column="90">true<pos:position pos:line="11" pos:column="94"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="95"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="96"/></expr_stmt>
        <return pos:line="12" pos:column="9">return;<pos:position pos:line="12" pos:column="16"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name><name pos:line="15" pos:column="5">AsyncCall<pos:position pos:line="15" pos:column="14"/></name><operator pos:line="15" pos:column="14">::<pos:position pos:line="15" pos:column="16"/></operator><name pos:line="15" pos:column="16">Pointer<pos:position pos:line="15" pos:column="23"/></name></name></type> <name pos:line="15" pos:column="24">call<pos:position pos:line="15" pos:column="28"/></name> <init pos:line="15" pos:column="29">= <expr><call><name pos:line="15" pos:column="31">commCbCall<pos:position pos:line="15" pos:column="41"/></name><argument_list pos:line="15" pos:column="41">(<argument><expr><literal type="number" pos:line="15" pos:column="42">5<pos:position pos:line="15" pos:column="43"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="15" pos:column="44">4<pos:position pos:line="15" pos:column="45"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="47">"TunnelBlindCopyReadHandler"<pos:position pos:line="15" pos:column="75"/></literal></expr></argument>,
                                         <argument><expr><call><name pos:line="16" pos:column="42">CommIoCbPtrFun<pos:position pos:line="16" pos:column="56"/></name><argument_list pos:line="16" pos:column="56">(<argument><expr><name pos:line="16" pos:column="57">completion<pos:position pos:line="16" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="69">this<pos:position pos:line="16" pos:column="73"/></name></expr></argument>)<pos:position pos:line="16" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="75"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="76"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">comm_read<pos:position pos:line="17" pos:column="14"/></name><argument_list pos:line="17" pos:column="14">(<argument><expr><name><name pos:line="17" pos:column="15">from<pos:position pos:line="17" pos:column="19"/></name><operator pos:line="17" pos:column="19">.<pos:position pos:line="17" pos:column="20"/></operator><name pos:line="17" pos:column="20">conn<pos:position pos:line="17" pos:column="24"/></name></name></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="26">from<pos:position pos:line="17" pos:column="30"/></name><operator pos:line="17" pos:column="30">.<pos:position pos:line="17" pos:column="31"/></operator><name pos:line="17" pos:column="31">buf<pos:position pos:line="17" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="36">bw<pos:position pos:line="17" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="40">call<pos:position pos:line="17" pos:column="44"/></name></expr></argument>)<pos:position pos:line="17" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="46"/></expr_stmt>
}<pos:position pos:line="18" pos:column="2"/></block></function></unit>
