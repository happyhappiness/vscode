<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2637_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">TemplateFile<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">loadFromFile<pos:position pos:line="2" pos:column="27"/></name></name><parameter_list pos:line="2" pos:column="27">(<parameter><decl><type><specifier pos:line="2" pos:column="28">const<pos:position pos:line="2" pos:column="33"/></specifier> <name pos:line="2" pos:column="34">char<pos:position pos:line="2" pos:column="38"/></name> <modifier pos:line="2" pos:column="39">*<pos:position pos:line="2" pos:column="40"/></modifier></type><name pos:line="2" pos:column="40">path<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="45"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">fd<pos:position pos:line="4" pos:column="11"/></name></decl>;<pos:position pos:line="4" pos:column="12"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name></type> <name><name pos:line="5" pos:column="10">buf<pos:position pos:line="5" pos:column="13"/></name><index pos:line="5" pos:column="13">[<expr><literal type="number" pos:line="5" pos:column="14">4096<pos:position pos:line="5" pos:column="18"/></literal></expr>]<pos:position pos:line="5" pos:column="19"/></index></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">ssize_t<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">len<pos:position pos:line="6" pos:column="16"/></name></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><call><name pos:line="8" pos:column="9">loaded<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">()<pos:position pos:line="8" pos:column="17"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="18"/></condition><then pos:line="8" pos:column="18"> <comment type="line" pos:line="8" pos:column="19">// already loaded?</comment>
        <block type="pseudo"><return pos:line="9" pos:column="9">return <expr><literal type="boolean" pos:line="9" pos:column="16">true<pos:position pos:line="9" pos:column="20"/></literal></expr>;<pos:position pos:line="9" pos:column="21"/></return></block></then></if>

    <expr_stmt><expr><name pos:line="11" pos:column="5">fd<pos:position pos:line="11" pos:column="7"/></name> <operator pos:line="11" pos:column="8">=<pos:position pos:line="11" pos:column="9"/></operator> <call><name pos:line="11" pos:column="10">file_open<pos:position pos:line="11" pos:column="19"/></name><argument_list pos:line="11" pos:column="19">(<argument><expr><name pos:line="11" pos:column="20">path<pos:position pos:line="11" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="26">O_RDONLY<pos:position pos:line="11" pos:column="34"/></name> <operator pos:line="11" pos:column="35">|<pos:position pos:line="11" pos:column="36"/></operator> <name pos:line="11" pos:column="37">O_TEXT<pos:position pos:line="11" pos:column="43"/></name></expr></argument>)<pos:position pos:line="11" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="45"/></expr_stmt>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">fd<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">&lt;<pos:position pos:line="13" pos:column="16"/></operator> <literal type="number" pos:line="13" pos:column="14">0<pos:position pos:line="13" pos:column="15"/></literal></expr>)<pos:position pos:line="13" pos:column="16"/></condition><then pos:line="13" pos:column="16"> <block pos:line="13" pos:column="17">{
        <comment type="block" pos:line="14" pos:column="9">/* with dynamic locale negotiation we may see some failures before a success. */</comment>
        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><operator pos:line="15" pos:column="13">!<pos:position pos:line="15" pos:column="14"/></operator><name pos:line="15" pos:column="14">silent<pos:position pos:line="15" pos:column="20"/></name> <operator pos:line="15" pos:column="21">&amp;&amp;<pos:position pos:line="15" pos:column="31"/></operator> <name pos:line="15" pos:column="24">templateCode<pos:position pos:line="15" pos:column="36"/></name> <operator pos:line="15" pos:column="37">&lt;<pos:position pos:line="15" pos:column="41"/></operator> <name pos:line="15" pos:column="39">TCP_RESET<pos:position pos:line="15" pos:column="48"/></name></expr>)<pos:position pos:line="15" pos:column="49"/></condition><then pos:line="15" pos:column="49"> <block pos:line="15" pos:column="50">{
            <decl_stmt><decl><type><name pos:line="16" pos:column="13">int<pos:position pos:line="16" pos:column="16"/></name></type> <name pos:line="16" pos:column="17">xerrno<pos:position pos:line="16" pos:column="23"/></name> <init pos:line="16" pos:column="24">= <expr><name pos:line="16" pos:column="26">errno<pos:position pos:line="16" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="16" pos:column="32"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="17" pos:column="13">debugs<pos:position pos:line="17" pos:column="19"/></name><argument_list pos:line="17" pos:column="19">(<argument><expr><literal type="number" pos:line="17" pos:column="20">4<pos:position pos:line="17" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="23">DBG_CRITICAL<pos:position pos:line="17" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="37">"ERROR: loading file '"<pos:position pos:line="17" pos:column="60"/></literal> <operator pos:line="17" pos:column="61">&lt;&lt;<pos:position pos:line="17" pos:column="69"/></operator> <name pos:line="17" pos:column="64">path<pos:position pos:line="17" pos:column="68"/></name> <operator pos:line="17" pos:column="69">&lt;&lt;<pos:position pos:line="17" pos:column="77"/></operator> <literal type="string" pos:line="17" pos:column="72">"': "<pos:position pos:line="17" pos:column="77"/></literal> <operator pos:line="17" pos:column="78">&lt;&lt;<pos:position pos:line="17" pos:column="86"/></operator> <call><name pos:line="17" pos:column="81">xstrerr<pos:position pos:line="17" pos:column="88"/></name><argument_list pos:line="17" pos:column="88">(<argument><expr><name pos:line="17" pos:column="89">xerrno<pos:position pos:line="17" pos:column="95"/></name></expr></argument>)<pos:position pos:line="17" pos:column="96"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="98"/></expr_stmt>
        }<pos:position pos:line="18" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="19" pos:column="9">wasLoaded<pos:position pos:line="19" pos:column="18"/></name> <operator pos:line="19" pos:column="19">=<pos:position pos:line="19" pos:column="20"/></operator> <literal type="boolean" pos:line="19" pos:column="21">false<pos:position pos:line="19" pos:column="26"/></literal></expr>;<pos:position pos:line="19" pos:column="27"/></expr_stmt>
        <return pos:line="20" pos:column="9">return <expr><name pos:line="20" pos:column="16">wasLoaded<pos:position pos:line="20" pos:column="25"/></name></expr>;<pos:position pos:line="20" pos:column="26"/></return>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>

    <while pos:line="23" pos:column="5">while <condition pos:line="23" pos:column="11">(<expr><operator pos:line="23" pos:column="12">(<pos:position pos:line="23" pos:column="13"/></operator><name pos:line="23" pos:column="13">len<pos:position pos:line="23" pos:column="16"/></name> <operator pos:line="23" pos:column="17">=<pos:position pos:line="23" pos:column="18"/></operator> <call><name pos:line="23" pos:column="19">FD_READ_METHOD<pos:position pos:line="23" pos:column="33"/></name><argument_list pos:line="23" pos:column="33">(<argument><expr><name pos:line="23" pos:column="34">fd<pos:position pos:line="23" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="38">buf<pos:position pos:line="23" pos:column="41"/></name></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="43">sizeof<argument_list pos:line="23" pos:column="49">(<argument><expr><name pos:line="23" pos:column="50">buf<pos:position pos:line="23" pos:column="53"/></name></expr></argument>)<pos:position pos:line="23" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="23" pos:column="55"/></argument_list></call><operator pos:line="23" pos:column="55">)<pos:position pos:line="23" pos:column="56"/></operator> <operator pos:line="23" pos:column="57">&gt;<pos:position pos:line="23" pos:column="61"/></operator> <literal type="number" pos:line="23" pos:column="59">0<pos:position pos:line="23" pos:column="60"/></literal></expr>)<pos:position pos:line="23" pos:column="61"/></condition> <block pos:line="23" pos:column="62">{
        <if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><operator pos:line="24" pos:column="13">!<pos:position pos:line="24" pos:column="14"/></operator><call><name pos:line="24" pos:column="14">parse<pos:position pos:line="24" pos:column="19"/></name><argument_list pos:line="24" pos:column="19">(<argument><expr><name pos:line="24" pos:column="20">buf<pos:position pos:line="24" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="25">len<pos:position pos:line="24" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="24" pos:column="30">false<pos:position pos:line="24" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="37"/></condition><then pos:line="24" pos:column="37"> <block pos:line="24" pos:column="38">{
            <expr_stmt><expr><call><name pos:line="25" pos:column="13">debugs<pos:position pos:line="25" pos:column="19"/></name><argument_list pos:line="25" pos:column="19">(<argument><expr><literal type="number" pos:line="25" pos:column="20">4<pos:position pos:line="25" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="23">DBG_CRITICAL<pos:position pos:line="25" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="37">"ERROR: parsing error in template file: "<pos:position pos:line="25" pos:column="78"/></literal> <operator pos:line="25" pos:column="79">&lt;&lt;<pos:position pos:line="25" pos:column="87"/></operator> <name pos:line="25" pos:column="82">path<pos:position pos:line="25" pos:column="86"/></name></expr></argument>)<pos:position pos:line="25" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="88"/></expr_stmt>
            <expr_stmt><expr><name pos:line="26" pos:column="13">wasLoaded<pos:position pos:line="26" pos:column="22"/></name> <operator pos:line="26" pos:column="23">=<pos:position pos:line="26" pos:column="24"/></operator> <literal type="boolean" pos:line="26" pos:column="25">false<pos:position pos:line="26" pos:column="30"/></literal></expr>;<pos:position pos:line="26" pos:column="31"/></expr_stmt>
            <return pos:line="27" pos:column="13">return <expr><name pos:line="27" pos:column="20">wasLoaded<pos:position pos:line="27" pos:column="29"/></name></expr>;<pos:position pos:line="27" pos:column="30"/></return>
        }<pos:position pos:line="28" pos:column="10"/></block></then></if>
    }<pos:position pos:line="29" pos:column="6"/></block></while>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">parse<pos:position pos:line="30" pos:column="10"/></name><argument_list pos:line="30" pos:column="10">(<argument><expr><name pos:line="30" pos:column="11">buf<pos:position pos:line="30" pos:column="14"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="16">0<pos:position pos:line="30" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="boolean" pos:line="30" pos:column="19">true<pos:position pos:line="30" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="25"/></expr_stmt>

    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><name pos:line="32" pos:column="9">len<pos:position pos:line="32" pos:column="12"/></name> <operator pos:line="32" pos:column="13">&lt;<pos:position pos:line="32" pos:column="17"/></operator> <literal type="number" pos:line="32" pos:column="15">0<pos:position pos:line="32" pos:column="16"/></literal></expr>)<pos:position pos:line="32" pos:column="17"/></condition><then pos:line="32" pos:column="17"> <block pos:line="32" pos:column="18">{
        <decl_stmt><decl><type><name pos:line="33" pos:column="9">int<pos:position pos:line="33" pos:column="12"/></name></type> <name pos:line="33" pos:column="13">xerrno<pos:position pos:line="33" pos:column="19"/></name> <init pos:line="33" pos:column="20">= <expr><name pos:line="33" pos:column="22">errno<pos:position pos:line="33" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="33" pos:column="28"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="34" pos:column="9">debugs<pos:position pos:line="34" pos:column="15"/></name><argument_list pos:line="34" pos:column="15">(<argument><expr><literal type="number" pos:line="34" pos:column="16">4<pos:position pos:line="34" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="19">DBG_CRITICAL<pos:position pos:line="34" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="33">MYNAME<pos:position pos:line="34" pos:column="39"/></name> <operator pos:line="34" pos:column="40">&lt;&lt;<pos:position pos:line="34" pos:column="48"/></operator> <literal type="string" pos:line="34" pos:column="43">"ERROR: failed to fully read: '"<pos:position pos:line="34" pos:column="75"/></literal> <operator pos:line="34" pos:column="76">&lt;&lt;<pos:position pos:line="34" pos:column="84"/></operator> <name pos:line="34" pos:column="79">path<pos:position pos:line="34" pos:column="83"/></name> <operator pos:line="34" pos:column="84">&lt;&lt;<pos:position pos:line="34" pos:column="92"/></operator> <literal type="string" pos:line="34" pos:column="87">"': "<pos:position pos:line="34" pos:column="92"/></literal> <operator pos:line="34" pos:column="93">&lt;&lt;<pos:position pos:line="34" pos:column="101"/></operator> <call><name pos:line="34" pos:column="96">xstrerr<pos:position pos:line="34" pos:column="103"/></name><argument_list pos:line="34" pos:column="103">(<argument><expr><name pos:line="34" pos:column="104">xerrno<pos:position pos:line="34" pos:column="110"/></name></expr></argument>)<pos:position pos:line="34" pos:column="111"/></argument_list></call></expr></argument>)<pos:position pos:line="34" pos:column="112"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="113"/></expr_stmt>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="37" pos:column="5">file_close<pos:position pos:line="37" pos:column="15"/></name><argument_list pos:line="37" pos:column="15">(<argument><expr><name pos:line="37" pos:column="16">fd<pos:position pos:line="37" pos:column="18"/></name></expr></argument>)<pos:position pos:line="37" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="20"/></expr_stmt>

    <expr_stmt><expr><name pos:line="39" pos:column="5">wasLoaded<pos:position pos:line="39" pos:column="14"/></name> <operator pos:line="39" pos:column="15">=<pos:position pos:line="39" pos:column="16"/></operator> <literal type="boolean" pos:line="39" pos:column="17">true<pos:position pos:line="39" pos:column="21"/></literal></expr>;<pos:position pos:line="39" pos:column="22"/></expr_stmt>
    <return pos:line="40" pos:column="5">return <expr><name pos:line="40" pos:column="12">wasLoaded<pos:position pos:line="40" pos:column="21"/></name></expr>;<pos:position pos:line="40" pos:column="22"/></return>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
