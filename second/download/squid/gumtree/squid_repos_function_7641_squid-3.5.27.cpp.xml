<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7641_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">boolean<pos:position pos:line="1" pos:column="8"/></name></type>
<name pos:line="2" pos:column="1">group_match_null_string_p<pos:position pos:line="2" pos:column="26"/></name><parameter_list pos:line="2" pos:column="26">(<parameter><decl><type><name pos:line="2" pos:column="27">unsigned<pos:position pos:line="2" pos:column="35"/></name> <name pos:line="2" pos:column="36">char<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier><modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="43">p<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="46">unsigned<pos:position pos:line="2" pos:column="54"/></name> <name pos:line="2" pos:column="55">char<pos:position pos:line="2" pos:column="59"/></name> <modifier pos:line="2" pos:column="60">*<pos:position pos:line="2" pos:column="61"/></modifier></type><name pos:line="2" pos:column="61">end<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="66">register_info_type<pos:position pos:line="2" pos:column="84"/></name> <modifier pos:line="2" pos:column="85">*<pos:position pos:line="2" pos:column="86"/></modifier></type><name pos:line="2" pos:column="86">reg_info<pos:position pos:line="2" pos:column="94"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="95"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">mcnt<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>
    <comment type="block" pos:line="5" pos:column="5">/* Point to after the args to the start_memory.  */</comment>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">unsigned<pos:position pos:line="6" pos:column="13"/></name> <name pos:line="6" pos:column="14">char<pos:position pos:line="6" pos:column="18"/></name> <modifier pos:line="6" pos:column="19">*<pos:position pos:line="6" pos:column="20"/></modifier></type><name pos:line="6" pos:column="20">p1<pos:position pos:line="6" pos:column="22"/></name> <init pos:line="6" pos:column="23">= <expr><operator pos:line="6" pos:column="25">*<pos:position pos:line="6" pos:column="26"/></operator><name pos:line="6" pos:column="26">p<pos:position pos:line="6" pos:column="27"/></name> <operator pos:line="6" pos:column="28">+<pos:position pos:line="6" pos:column="29"/></operator> <literal type="number" pos:line="6" pos:column="30">2<pos:position pos:line="6" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="32"/></decl_stmt>

    <while pos:line="8" pos:column="5">while <condition pos:line="8" pos:column="11">(<expr><name pos:line="8" pos:column="12">p1<pos:position pos:line="8" pos:column="14"/></name> <operator pos:line="8" pos:column="15">&lt;<pos:position pos:line="8" pos:column="19"/></operator> <name pos:line="8" pos:column="17">end<pos:position pos:line="8" pos:column="20"/></name></expr>)<pos:position pos:line="8" pos:column="21"/></condition> <block pos:line="8" pos:column="22">{
        <comment type="block" pos:line="9" pos:column="9">/* Skip over opcodes that can match nothing, and return true or
         * false, as appropriate, when we get to one that can't, or to the
         * matching stop_memory.  */</comment>

        <switch pos:line="13" pos:column="9">switch <condition pos:line="13" pos:column="16">(<expr><operator pos:line="13" pos:column="17">(<pos:position pos:line="13" pos:column="18"/></operator><name pos:line="13" pos:column="18">re_opcode_t<pos:position pos:line="13" pos:column="29"/></name><operator pos:line="13" pos:column="29">)<pos:position pos:line="13" pos:column="30"/></operator> <operator pos:line="13" pos:column="31">*<pos:position pos:line="13" pos:column="32"/></operator> <name pos:line="13" pos:column="33">p1<pos:position pos:line="13" pos:column="35"/></name></expr>)<pos:position pos:line="13" pos:column="36"/></condition> <block pos:line="13" pos:column="37">{
        <comment type="block" pos:line="14" pos:column="9">/* Could be either a loop or a series of alternatives.  */</comment>
        <case pos:line="15" pos:column="9">case <expr><name pos:line="15" pos:column="14">on_failure_jump<pos:position pos:line="15" pos:column="29"/></name></expr>:<pos:position pos:line="15" pos:column="30"/></case>
            <expr_stmt><expr><name pos:line="16" pos:column="13">p1<pos:position pos:line="16" pos:column="15"/></name><operator pos:line="16" pos:column="15">++<pos:position pos:line="16" pos:column="17"/></operator></expr>;<pos:position pos:line="16" pos:column="18"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="17" pos:column="13">EXTRACT_NUMBER_AND_INCR<pos:position pos:line="17" pos:column="36"/></name><argument_list pos:line="17" pos:column="36">(<argument><expr><name pos:line="17" pos:column="37">mcnt<pos:position pos:line="17" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="43">p1<pos:position pos:line="17" pos:column="45"/></name></expr></argument>)<pos:position pos:line="17" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="47"/></expr_stmt>

            <comment type="block" pos:line="19" pos:column="13">/* If the next operation is not a jump backwards in the
             * pattern.  */</comment>

            <if pos:line="22" pos:column="13">if <condition pos:line="22" pos:column="16">(<expr><name pos:line="22" pos:column="17">mcnt<pos:position pos:line="22" pos:column="21"/></name> <operator pos:line="22" pos:column="22">&gt;=<pos:position pos:line="22" pos:column="27"/></operator> <literal type="number" pos:line="22" pos:column="25">0<pos:position pos:line="22" pos:column="26"/></literal></expr>)<pos:position pos:line="22" pos:column="27"/></condition><then pos:line="22" pos:column="27"> <block pos:line="22" pos:column="28">{
                <comment type="block" pos:line="23" pos:column="17">/* Go through the on_failure_jumps of the alternatives,
                 * seeing if any of the alternatives cannot match nothing.
                 * The last alternative starts with only a jump,
                 * whereas the rest start with on_failure_jump and end
                 * with a jump, e.g., here is the pattern for `a|b|c':
                 *
                 * /on_failure_jump/0/6/exactn/1/a/jump_past_alt/0/6
                 * /on_failure_jump/0/6/exactn/1/b/jump_past_alt/0/3
                 * /exactn/1/c
                 *
                 * So, we have to first go through the first (n-1)
                 * alternatives and then deal with the last one separately.  */</comment>

                <comment type="block" pos:line="36" pos:column="17">/* Deal with the first (n-1) alternatives, which start
                 * with an on_failure_jump (see above) that jumps to right
                 * past a jump_past_alt.  */</comment>

                <while pos:line="40" pos:column="17">while <condition pos:line="40" pos:column="23">(<expr><operator pos:line="40" pos:column="24">(<pos:position pos:line="40" pos:column="25"/></operator><name pos:line="40" pos:column="25">re_opcode_t<pos:position pos:line="40" pos:column="36"/></name><operator pos:line="40" pos:column="36">)<pos:position pos:line="40" pos:column="37"/></operator> <name><name pos:line="40" pos:column="38">p1<pos:position pos:line="40" pos:column="40"/></name><index pos:line="40" pos:column="40">[<expr><name pos:line="40" pos:column="41">mcnt<pos:position pos:line="40" pos:column="45"/></name> <operator pos:line="40" pos:column="46">-<pos:position pos:line="40" pos:column="47"/></operator> <literal type="number" pos:line="40" pos:column="48">3<pos:position pos:line="40" pos:column="49"/></literal></expr>]<pos:position pos:line="40" pos:column="50"/></index></name> <operator pos:line="40" pos:column="51">==<pos:position pos:line="40" pos:column="53"/></operator> <name pos:line="40" pos:column="54">jump_past_alt<pos:position pos:line="40" pos:column="67"/></name></expr>)<pos:position pos:line="40" pos:column="68"/></condition> <block pos:line="40" pos:column="69">{
                    <comment type="block" pos:line="41" pos:column="21">/* `mcnt' holds how many bytes long the alternative
                     * is, including the ending `jump_past_alt' and
                     * its number.  */</comment>

                    <if pos:line="45" pos:column="21">if <condition pos:line="45" pos:column="24">(<expr><operator pos:line="45" pos:column="25">!<pos:position pos:line="45" pos:column="26"/></operator><call><name pos:line="45" pos:column="26">alt_match_null_string_p<pos:position pos:line="45" pos:column="49"/></name><argument_list pos:line="45" pos:column="49">(<argument><expr><name pos:line="45" pos:column="50">p1<pos:position pos:line="45" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="54">p1<pos:position pos:line="45" pos:column="56"/></name> <operator pos:line="45" pos:column="57">+<pos:position pos:line="45" pos:column="58"/></operator> <name pos:line="45" pos:column="59">mcnt<pos:position pos:line="45" pos:column="63"/></name> <operator pos:line="45" pos:column="64">-<pos:position pos:line="45" pos:column="65"/></operator> <literal type="number" pos:line="45" pos:column="66">3<pos:position pos:line="45" pos:column="67"/></literal></expr></argument>,
                                                 <argument><expr><name pos:line="46" pos:column="50">reg_info<pos:position pos:line="46" pos:column="58"/></name></expr></argument>)<pos:position pos:line="46" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="60"/></condition><then pos:line="46" pos:column="60">
                        <block type="pseudo"><return pos:line="47" pos:column="25">return <expr><literal type="boolean" pos:line="47" pos:column="32">false<pos:position pos:line="47" pos:column="37"/></literal></expr>;<pos:position pos:line="47" pos:column="38"/></return></block></then></if>

                    <comment type="block" pos:line="49" pos:column="21">/* Move to right after this alternative, including the
                     * jump_past_alt.  */</comment>
                    <expr_stmt><expr><name pos:line="51" pos:column="21">p1<pos:position pos:line="51" pos:column="23"/></name> <operator pos:line="51" pos:column="24">+=<pos:position pos:line="51" pos:column="26"/></operator> <name pos:line="51" pos:column="27">mcnt<pos:position pos:line="51" pos:column="31"/></name></expr>;<pos:position pos:line="51" pos:column="32"/></expr_stmt>

                    <comment type="block" pos:line="53" pos:column="21">/* Break if it's the beginning of an n-th alternative
                     * that doesn't begin with an on_failure_jump.  */</comment>
                    <if pos:line="55" pos:column="21">if <condition pos:line="55" pos:column="24">(<expr><operator pos:line="55" pos:column="25">(<pos:position pos:line="55" pos:column="26"/></operator><name pos:line="55" pos:column="26">re_opcode_t<pos:position pos:line="55" pos:column="37"/></name><operator pos:line="55" pos:column="37">)<pos:position pos:line="55" pos:column="38"/></operator> <operator pos:line="55" pos:column="39">*<pos:position pos:line="55" pos:column="40"/></operator> <name pos:line="55" pos:column="41">p1<pos:position pos:line="55" pos:column="43"/></name> <operator pos:line="55" pos:column="44">!=<pos:position pos:line="55" pos:column="46"/></operator> <name pos:line="55" pos:column="47">on_failure_jump<pos:position pos:line="55" pos:column="62"/></name></expr>)<pos:position pos:line="55" pos:column="63"/></condition><then pos:line="55" pos:column="63">
                        <block type="pseudo"><break pos:line="56" pos:column="25">break;<pos:position pos:line="56" pos:column="31"/></break></block></then></if>

                    <comment type="block" pos:line="58" pos:column="21">/* Still have to check that it's not an n-th
                     * alternative that starts with an on_failure_jump.  */</comment>
                    <expr_stmt><expr><name pos:line="60" pos:column="21">p1<pos:position pos:line="60" pos:column="23"/></name><operator pos:line="60" pos:column="23">++<pos:position pos:line="60" pos:column="25"/></operator></expr>;<pos:position pos:line="60" pos:column="26"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="61" pos:column="21">EXTRACT_NUMBER_AND_INCR<pos:position pos:line="61" pos:column="44"/></name><argument_list pos:line="61" pos:column="44">(<argument><expr><name pos:line="61" pos:column="45">mcnt<pos:position pos:line="61" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="51">p1<pos:position pos:line="61" pos:column="53"/></name></expr></argument>)<pos:position pos:line="61" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="55"/></expr_stmt>
                    <if pos:line="62" pos:column="21">if <condition pos:line="62" pos:column="24">(<expr><operator pos:line="62" pos:column="25">(<pos:position pos:line="62" pos:column="26"/></operator><name pos:line="62" pos:column="26">re_opcode_t<pos:position pos:line="62" pos:column="37"/></name><operator pos:line="62" pos:column="37">)<pos:position pos:line="62" pos:column="38"/></operator> <name><name pos:line="62" pos:column="39">p1<pos:position pos:line="62" pos:column="41"/></name><index pos:line="62" pos:column="41">[<expr><name pos:line="62" pos:column="42">mcnt<pos:position pos:line="62" pos:column="46"/></name> <operator pos:line="62" pos:column="47">-<pos:position pos:line="62" pos:column="48"/></operator> <literal type="number" pos:line="62" pos:column="49">3<pos:position pos:line="62" pos:column="50"/></literal></expr>]<pos:position pos:line="62" pos:column="51"/></index></name> <operator pos:line="62" pos:column="52">!=<pos:position pos:line="62" pos:column="54"/></operator> <name pos:line="62" pos:column="55">jump_past_alt<pos:position pos:line="62" pos:column="68"/></name></expr>)<pos:position pos:line="62" pos:column="69"/></condition><then pos:line="62" pos:column="69"> <block pos:line="62" pos:column="70">{
                        <comment type="block" pos:line="63" pos:column="25">/* Get to the beginning of the n-th alternative.  */</comment>
                        <expr_stmt><expr><name pos:line="64" pos:column="25">p1<pos:position pos:line="64" pos:column="27"/></name> <operator pos:line="64" pos:column="28">-=<pos:position pos:line="64" pos:column="30"/></operator> <literal type="number" pos:line="64" pos:column="31">3<pos:position pos:line="64" pos:column="32"/></literal></expr>;<pos:position pos:line="64" pos:column="33"/></expr_stmt>
                        <break pos:line="65" pos:column="25">break;<pos:position pos:line="65" pos:column="31"/></break>
                    }<pos:position pos:line="66" pos:column="22"/></block></then></if>
                }<pos:position pos:line="67" pos:column="18"/></block></while>

                <comment type="block" pos:line="69" pos:column="17">/* Deal with the last alternative: go back and get number
                 * of the `jump_past_alt' just before it.  `mcnt' contains
                 * the length of the alternative.  */</comment>
                <expr_stmt><expr><call><name pos:line="72" pos:column="17">EXTRACT_NUMBER<pos:position pos:line="72" pos:column="31"/></name><argument_list pos:line="72" pos:column="31">(<argument><expr><name pos:line="72" pos:column="32">mcnt<pos:position pos:line="72" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="38">p1<pos:position pos:line="72" pos:column="40"/></name> <operator pos:line="72" pos:column="41">-<pos:position pos:line="72" pos:column="42"/></operator> <literal type="number" pos:line="72" pos:column="43">2<pos:position pos:line="72" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="46"/></expr_stmt>

                <if pos:line="74" pos:column="17">if <condition pos:line="74" pos:column="20">(<expr><operator pos:line="74" pos:column="21">!<pos:position pos:line="74" pos:column="22"/></operator><call><name pos:line="74" pos:column="22">alt_match_null_string_p<pos:position pos:line="74" pos:column="45"/></name><argument_list pos:line="74" pos:column="45">(<argument><expr><name pos:line="74" pos:column="46">p1<pos:position pos:line="74" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="50">p1<pos:position pos:line="74" pos:column="52"/></name> <operator pos:line="74" pos:column="53">+<pos:position pos:line="74" pos:column="54"/></operator> <name pos:line="74" pos:column="55">mcnt<pos:position pos:line="74" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="61">reg_info<pos:position pos:line="74" pos:column="69"/></name></expr></argument>)<pos:position pos:line="74" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="74" pos:column="71"/></condition><then pos:line="74" pos:column="71">
                    <block type="pseudo"><return pos:line="75" pos:column="21">return <expr><literal type="boolean" pos:line="75" pos:column="28">false<pos:position pos:line="75" pos:column="33"/></literal></expr>;<pos:position pos:line="75" pos:column="34"/></return></block></then></if>

                <expr_stmt><expr><name pos:line="77" pos:column="17">p1<pos:position pos:line="77" pos:column="19"/></name> <operator pos:line="77" pos:column="20">+=<pos:position pos:line="77" pos:column="22"/></operator> <name pos:line="77" pos:column="23">mcnt<pos:position pos:line="77" pos:column="27"/></name></expr>;<pos:position pos:line="77" pos:column="28"/></expr_stmt> <comment type="block" pos:line="77" pos:column="29">/* Get past the n-th alternative.  */</comment>
            }<pos:position pos:line="78" pos:column="14"/></block></then></if>           <comment type="block" pos:line="78" pos:column="25">/* if mcnt &gt; 0 */</comment>
            <break pos:line="79" pos:column="13">break;<pos:position pos:line="79" pos:column="19"/></break>

        <case pos:line="81" pos:column="9">case <expr><name pos:line="81" pos:column="14">stop_memory<pos:position pos:line="81" pos:column="25"/></name></expr>:<pos:position pos:line="81" pos:column="26"/></case>
            <expr_stmt><expr><call><name pos:line="82" pos:column="13">assert<pos:position pos:line="82" pos:column="19"/></name><argument_list pos:line="82" pos:column="19">(<argument><expr><name><name pos:line="82" pos:column="20">p1<pos:position pos:line="82" pos:column="22"/></name><index pos:line="82" pos:column="22">[<expr><literal type="number" pos:line="82" pos:column="23">1<pos:position pos:line="82" pos:column="24"/></literal></expr>]<pos:position pos:line="82" pos:column="25"/></index></name> <operator pos:line="82" pos:column="26">==<pos:position pos:line="82" pos:column="28"/></operator> <operator pos:line="82" pos:column="29">*<pos:position pos:line="82" pos:column="30"/></operator><operator pos:line="82" pos:column="30">*<pos:position pos:line="82" pos:column="31"/></operator><name pos:line="82" pos:column="31">p<pos:position pos:line="82" pos:column="32"/></name></expr></argument>)<pos:position pos:line="82" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="83" pos:column="13">*<pos:position pos:line="83" pos:column="14"/></operator><name pos:line="83" pos:column="14">p<pos:position pos:line="83" pos:column="15"/></name> <operator pos:line="83" pos:column="16">=<pos:position pos:line="83" pos:column="17"/></operator> <name pos:line="83" pos:column="18">p1<pos:position pos:line="83" pos:column="20"/></name> <operator pos:line="83" pos:column="21">+<pos:position pos:line="83" pos:column="22"/></operator> <literal type="number" pos:line="83" pos:column="23">2<pos:position pos:line="83" pos:column="24"/></literal></expr>;<pos:position pos:line="83" pos:column="25"/></expr_stmt>
            <return pos:line="84" pos:column="13">return <expr><literal type="boolean" pos:line="84" pos:column="20">true<pos:position pos:line="84" pos:column="24"/></literal></expr>;<pos:position pos:line="84" pos:column="25"/></return>

        <default pos:line="86" pos:column="9">default:<pos:position pos:line="86" pos:column="17"/></default>
            <if pos:line="87" pos:column="13">if <condition pos:line="87" pos:column="16">(<expr><operator pos:line="87" pos:column="17">!<pos:position pos:line="87" pos:column="18"/></operator><call><name pos:line="87" pos:column="18">common_op_match_null_string_p<pos:position pos:line="87" pos:column="47"/></name><argument_list pos:line="87" pos:column="47">(<argument><expr><operator pos:line="87" pos:column="48">&amp;<pos:position pos:line="87" pos:column="53"/></operator><name pos:line="87" pos:column="49">p1<pos:position pos:line="87" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="53">end<pos:position pos:line="87" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="58">reg_info<pos:position pos:line="87" pos:column="66"/></name></expr></argument>)<pos:position pos:line="87" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="87" pos:column="68"/></condition><then pos:line="87" pos:column="68">
                <block type="pseudo"><return pos:line="88" pos:column="17">return <expr><literal type="boolean" pos:line="88" pos:column="24">false<pos:position pos:line="88" pos:column="29"/></literal></expr>;<pos:position pos:line="88" pos:column="30"/></return></block></then></if>
        }<pos:position pos:line="89" pos:column="10"/></block></switch>
    }<pos:position pos:line="90" pos:column="6"/></block></while>               <comment type="block" pos:line="90" pos:column="21">/* while p1 &lt; end */</comment>

    <return pos:line="92" pos:column="5">return <expr><literal type="boolean" pos:line="92" pos:column="12">false<pos:position pos:line="92" pos:column="17"/></literal></expr>;<pos:position pos:line="92" pos:column="18"/></return>
}<pos:position pos:line="93" pos:column="2"/></block></function></unit>
