<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_880_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">comm_connect_addr<pos:position pos:line="2" pos:column="18"/></name><parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><name pos:line="2" pos:column="19">int<pos:position pos:line="2" pos:column="22"/></name></type> <name pos:line="2" pos:column="23">sock<pos:position pos:line="2" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="29">const<pos:position pos:line="2" pos:column="34"/></specifier> <name pos:line="2" pos:column="35">IpAddress<pos:position pos:line="2" pos:column="44"/></name> <modifier pos:line="2" pos:column="45">&amp;<pos:position pos:line="2" pos:column="50"/></modifier></type><name pos:line="2" pos:column="46">address<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="54"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">comm_err_t<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">status<pos:position pos:line="4" pos:column="22"/></name> <init pos:line="4" pos:column="23">= <expr><name pos:line="4" pos:column="25">COMM_OK<pos:position pos:line="4" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">fde<pos:position pos:line="5" pos:column="8"/></name> <modifier pos:line="5" pos:column="9">*<pos:position pos:line="5" pos:column="10"/></modifier></type><name pos:line="5" pos:column="10">F<pos:position pos:line="5" pos:column="11"/></name> <init pos:line="5" pos:column="12">= <expr><operator pos:line="5" pos:column="14">&amp;<pos:position pos:line="5" pos:column="19"/></operator><name><name pos:line="5" pos:column="15">fd_table<pos:position pos:line="5" pos:column="23"/></name><index pos:line="5" pos:column="23">[<expr><name pos:line="5" pos:column="24">sock<pos:position pos:line="5" pos:column="28"/></name></expr>]<pos:position pos:line="5" pos:column="29"/></index></name></expr></init></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">x<pos:position pos:line="6" pos:column="10"/></name> <init pos:line="6" pos:column="11">= <expr><literal type="number" pos:line="6" pos:column="13">0<pos:position pos:line="6" pos:column="14"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">err<pos:position pos:line="7" pos:column="12"/></name> <init pos:line="7" pos:column="13">= <expr><literal type="number" pos:line="7" pos:column="15">0<pos:position pos:line="7" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">socklen_t<pos:position pos:line="8" pos:column="14"/></name></type> <name pos:line="8" pos:column="15">errlen<pos:position pos:line="8" pos:column="21"/></name></decl>;<pos:position pos:line="8" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="9" pos:column="5">struct<pos:position pos:line="9" pos:column="11"/></name> <name pos:line="9" pos:column="12">addrinfo<pos:position pos:line="9" pos:column="20"/></name></name> <modifier pos:line="9" pos:column="21">*<pos:position pos:line="9" pos:column="22"/></modifier></type><name pos:line="9" pos:column="22">AI<pos:position pos:line="9" pos:column="24"/></name> <init pos:line="9" pos:column="25">= <expr><name pos:line="9" pos:column="27">NULL<pos:position pos:line="9" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="32"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">PROF_start<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><name pos:line="10" pos:column="16">comm_connect_addr<pos:position pos:line="10" pos:column="33"/></name></expr></argument>)<pos:position pos:line="10" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="35"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="12" pos:column="5">assert<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><call><name><name pos:line="12" pos:column="12">address<pos:position pos:line="12" pos:column="19"/></name><operator pos:line="12" pos:column="19">.<pos:position pos:line="12" pos:column="20"/></operator><name pos:line="12" pos:column="20">GetPort<pos:position pos:line="12" pos:column="27"/></name></name><argument_list pos:line="12" pos:column="27">()<pos:position pos:line="12" pos:column="29"/></argument_list></call> <operator pos:line="12" pos:column="30">!=<pos:position pos:line="12" pos:column="32"/></operator> <literal type="number" pos:line="12" pos:column="33">0<pos:position pos:line="12" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="36"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="14" pos:column="5">debugs<pos:position pos:line="14" pos:column="11"/></name><argument_list pos:line="14" pos:column="11">(<argument><expr><literal type="number" pos:line="14" pos:column="12">5<pos:position pos:line="14" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="15">9<pos:position pos:line="14" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="18">"comm_connect_addr: connecting socket "<pos:position pos:line="14" pos:column="57"/></literal> <operator pos:line="14" pos:column="58">&lt;&lt;<pos:position pos:line="14" pos:column="66"/></operator> <name pos:line="14" pos:column="61">sock<pos:position pos:line="14" pos:column="65"/></name> <operator pos:line="14" pos:column="66">&lt;&lt;<pos:position pos:line="14" pos:column="74"/></operator> <literal type="string" pos:line="14" pos:column="69">" to "<pos:position pos:line="14" pos:column="75"/></literal> <operator pos:line="14" pos:column="76">&lt;&lt;<pos:position pos:line="14" pos:column="84"/></operator> <name pos:line="14" pos:column="79">address<pos:position pos:line="14" pos:column="86"/></name> <operator pos:line="14" pos:column="87">&lt;&lt;<pos:position pos:line="14" pos:column="95"/></operator> <literal type="string" pos:line="14" pos:column="90">" (want family: "<pos:position pos:line="14" pos:column="107"/></literal> <operator pos:line="14" pos:column="108">&lt;&lt;<pos:position pos:line="14" pos:column="116"/></operator> <name><name pos:line="14" pos:column="111">F<pos:position pos:line="14" pos:column="112"/></name><operator pos:line="14" pos:column="112">-&gt;<pos:position pos:line="14" pos:column="117"/></operator><name pos:line="14" pos:column="114">sock_family<pos:position pos:line="14" pos:column="125"/></name></name> <operator pos:line="14" pos:column="126">&lt;&lt;<pos:position pos:line="14" pos:column="134"/></operator> <literal type="string" pos:line="14" pos:column="129">")"<pos:position pos:line="14" pos:column="132"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="133"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="134"/></expr_stmt>

    <comment type="block" pos:line="16" pos:column="5">/* Handle IPv6 over IPv4-only socket case.
     * this case must presently be handled here since the GetAddrInfo asserts on bad mappings.
     * NP: because commResetFD is private to ConnStateData we have to return an error and
     *     trust its handled properly.
     */</comment>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name><name pos:line="21" pos:column="9">F<pos:position pos:line="21" pos:column="10"/></name><operator pos:line="21" pos:column="10">-&gt;<pos:position pos:line="21" pos:column="15"/></operator><name pos:line="21" pos:column="12">sock_family<pos:position pos:line="21" pos:column="23"/></name></name> <operator pos:line="21" pos:column="24">==<pos:position pos:line="21" pos:column="26"/></operator> <name pos:line="21" pos:column="27">AF_INET<pos:position pos:line="21" pos:column="34"/></name> <operator pos:line="21" pos:column="35">&amp;&amp;<pos:position pos:line="21" pos:column="45"/></operator> <operator pos:line="21" pos:column="38">!<pos:position pos:line="21" pos:column="39"/></operator><call><name><name pos:line="21" pos:column="39">address<pos:position pos:line="21" pos:column="46"/></name><operator pos:line="21" pos:column="46">.<pos:position pos:line="21" pos:column="47"/></operator><name pos:line="21" pos:column="47">IsIPv4<pos:position pos:line="21" pos:column="53"/></name></name><argument_list pos:line="21" pos:column="53">()<pos:position pos:line="21" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="56"/></condition><then pos:line="21" pos:column="56"> <block pos:line="21" pos:column="57">{
        <expr_stmt><expr><name pos:line="22" pos:column="9">errno<pos:position pos:line="22" pos:column="14"/></name> <operator pos:line="22" pos:column="15">=<pos:position pos:line="22" pos:column="16"/></operator> <name pos:line="22" pos:column="17">ENETUNREACH<pos:position pos:line="22" pos:column="28"/></name></expr>;<pos:position pos:line="22" pos:column="29"/></expr_stmt>
        <return pos:line="23" pos:column="9">return <expr><name pos:line="23" pos:column="16">COMM_ERR_PROTOCOL<pos:position pos:line="23" pos:column="33"/></name></expr>;<pos:position pos:line="23" pos:column="34"/></return>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="26" pos:column="5">/* Handle IPv4 over IPv6-only socket case.
     * This case is presently handled here as it's both a known case and it's
     * uncertain what error will be returned by the IPv6 stack in such case. It's
     * possible this will also be handled by the errno checks below after connect()
     * but needs carefull cross-platform verification, and verifying the address
     * condition here is simple.
     */</comment>
    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><operator pos:line="33" pos:column="9">!<pos:position pos:line="33" pos:column="10"/></operator><call><name><name pos:line="33" pos:column="10">F<pos:position pos:line="33" pos:column="11"/></name><operator pos:line="33" pos:column="11">-&gt;<pos:position pos:line="33" pos:column="16"/></operator><name pos:line="33" pos:column="13">local_addr<pos:position pos:line="33" pos:column="23"/></name><operator pos:line="33" pos:column="23">.<pos:position pos:line="33" pos:column="24"/></operator><name pos:line="33" pos:column="24">IsIPv4<pos:position pos:line="33" pos:column="30"/></name></name><argument_list pos:line="33" pos:column="30">()<pos:position pos:line="33" pos:column="32"/></argument_list></call> <operator pos:line="33" pos:column="33">&amp;&amp;<pos:position pos:line="33" pos:column="43"/></operator> <call><name><name pos:line="33" pos:column="36">address<pos:position pos:line="33" pos:column="43"/></name><operator pos:line="33" pos:column="43">.<pos:position pos:line="33" pos:column="44"/></operator><name pos:line="33" pos:column="44">IsIPv4<pos:position pos:line="33" pos:column="50"/></name></name><argument_list pos:line="33" pos:column="50">()<pos:position pos:line="33" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="53"/></condition><then pos:line="33" pos:column="53"> <block pos:line="33" pos:column="54">{
        <expr_stmt><expr><name pos:line="34" pos:column="9">errno<pos:position pos:line="34" pos:column="14"/></name> <operator pos:line="34" pos:column="15">=<pos:position pos:line="34" pos:column="16"/></operator> <name pos:line="34" pos:column="17">ENETUNREACH<pos:position pos:line="34" pos:column="28"/></name></expr>;<pos:position pos:line="34" pos:column="29"/></expr_stmt>
        <return pos:line="35" pos:column="9">return <expr><name pos:line="35" pos:column="16">COMM_ERR_PROTOCOL<pos:position pos:line="35" pos:column="33"/></name></expr>;<pos:position pos:line="35" pos:column="34"/></return>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="38" pos:column="5">address<pos:position pos:line="38" pos:column="12"/></name><operator pos:line="38" pos:column="12">.<pos:position pos:line="38" pos:column="13"/></operator><name pos:line="38" pos:column="13">GetAddrInfo<pos:position pos:line="38" pos:column="24"/></name></name><argument_list pos:line="38" pos:column="24">(<argument><expr><name pos:line="38" pos:column="25">AI<pos:position pos:line="38" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="29">F<pos:position pos:line="38" pos:column="30"/></name><operator pos:line="38" pos:column="30">-&gt;<pos:position pos:line="38" pos:column="35"/></operator><name pos:line="38" pos:column="32">sock_family<pos:position pos:line="38" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="45"/></expr_stmt>

    <comment type="block" pos:line="40" pos:column="5">/* Establish connection. */</comment>
    <expr_stmt><expr><name pos:line="41" pos:column="5">errno<pos:position pos:line="41" pos:column="10"/></name> <operator pos:line="41" pos:column="11">=<pos:position pos:line="41" pos:column="12"/></operator> <literal type="number" pos:line="41" pos:column="13">0<pos:position pos:line="41" pos:column="14"/></literal></expr>;<pos:position pos:line="41" pos:column="15"/></expr_stmt>

    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><operator pos:line="43" pos:column="9">!<pos:position pos:line="43" pos:column="10"/></operator><name><name pos:line="43" pos:column="10">F<pos:position pos:line="43" pos:column="11"/></name><operator pos:line="43" pos:column="11">-&gt;<pos:position pos:line="43" pos:column="16"/></operator><name pos:line="43" pos:column="13">flags<pos:position pos:line="43" pos:column="18"/></name><operator pos:line="43" pos:column="18">.<pos:position pos:line="43" pos:column="19"/></operator><name pos:line="43" pos:column="19">called_connect<pos:position pos:line="43" pos:column="33"/></name></name></expr>)<pos:position pos:line="43" pos:column="34"/></condition><then pos:line="43" pos:column="34"> <block pos:line="43" pos:column="35">{
        <expr_stmt><expr><name><name pos:line="44" pos:column="9">F<pos:position pos:line="44" pos:column="10"/></name><operator pos:line="44" pos:column="10">-&gt;<pos:position pos:line="44" pos:column="15"/></operator><name pos:line="44" pos:column="12">flags<pos:position pos:line="44" pos:column="17"/></name><operator pos:line="44" pos:column="17">.<pos:position pos:line="44" pos:column="18"/></operator><name pos:line="44" pos:column="18">called_connect<pos:position pos:line="44" pos:column="32"/></name></name> <operator pos:line="44" pos:column="33">=<pos:position pos:line="44" pos:column="34"/></operator> <literal type="number" pos:line="44" pos:column="35">1<pos:position pos:line="44" pos:column="36"/></literal></expr>;<pos:position pos:line="44" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="45" pos:column="9">statCounter<pos:position pos:line="45" pos:column="20"/></name><operator pos:line="45" pos:column="20">.<pos:position pos:line="45" pos:column="21"/></operator><name pos:line="45" pos:column="21">syscalls<pos:position pos:line="45" pos:column="29"/></name><operator pos:line="45" pos:column="29">.<pos:position pos:line="45" pos:column="30"/></operator><name pos:line="45" pos:column="30">sock<pos:position pos:line="45" pos:column="34"/></name><operator pos:line="45" pos:column="34">.<pos:position pos:line="45" pos:column="35"/></operator><name pos:line="45" pos:column="35">connects<pos:position pos:line="45" pos:column="43"/></name></name><operator pos:line="45" pos:column="43">++<pos:position pos:line="45" pos:column="45"/></operator></expr>;<pos:position pos:line="45" pos:column="46"/></expr_stmt>

        <expr_stmt><expr><name pos:line="47" pos:column="9">x<pos:position pos:line="47" pos:column="10"/></name> <operator pos:line="47" pos:column="11">=<pos:position pos:line="47" pos:column="12"/></operator> <call><name pos:line="47" pos:column="13">connect<pos:position pos:line="47" pos:column="20"/></name><argument_list pos:line="47" pos:column="20">(<argument><expr><name pos:line="47" pos:column="21">sock<pos:position pos:line="47" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="27">AI<pos:position pos:line="47" pos:column="29"/></name><operator pos:line="47" pos:column="29">-&gt;<pos:position pos:line="47" pos:column="34"/></operator><name pos:line="47" pos:column="31">ai_addr<pos:position pos:line="47" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="40">AI<pos:position pos:line="47" pos:column="42"/></name><operator pos:line="47" pos:column="42">-&gt;<pos:position pos:line="47" pos:column="47"/></operator><name pos:line="47" pos:column="44">ai_addrlen<pos:position pos:line="47" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="56"/></expr_stmt>

        <comment type="line" pos:line="49" pos:column="9">// XXX: ICAP code refuses callbacks during a pending comm_ call</comment>
        <comment type="line" pos:line="50" pos:column="9">// Async calls development will fix this.</comment>
        <if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><name pos:line="51" pos:column="13">x<pos:position pos:line="51" pos:column="14"/></name> <operator pos:line="51" pos:column="15">==<pos:position pos:line="51" pos:column="17"/></operator> <literal type="number" pos:line="51" pos:column="18">0<pos:position pos:line="51" pos:column="19"/></literal></expr>)<pos:position pos:line="51" pos:column="20"/></condition><then pos:line="51" pos:column="20"> <block pos:line="51" pos:column="21">{
            <expr_stmt><expr><name pos:line="52" pos:column="13">x<pos:position pos:line="52" pos:column="14"/></name> <operator pos:line="52" pos:column="15">=<pos:position pos:line="52" pos:column="16"/></operator> <operator pos:line="52" pos:column="17">-<pos:position pos:line="52" pos:column="18"/></operator><literal type="number" pos:line="52" pos:column="18">1<pos:position pos:line="52" pos:column="19"/></literal></expr>;<pos:position pos:line="52" pos:column="20"/></expr_stmt>
            <expr_stmt><expr><name pos:line="53" pos:column="13">errno<pos:position pos:line="53" pos:column="18"/></name> <operator pos:line="53" pos:column="19">=<pos:position pos:line="53" pos:column="20"/></operator> <name pos:line="53" pos:column="21">EINPROGRESS<pos:position pos:line="53" pos:column="32"/></name></expr>;<pos:position pos:line="53" pos:column="33"/></expr_stmt>
        }<pos:position pos:line="54" pos:column="10"/></block></then></if>

        <if pos:line="56" pos:column="9">if <condition pos:line="56" pos:column="12">(<expr><name pos:line="56" pos:column="13">x<pos:position pos:line="56" pos:column="14"/></name> <operator pos:line="56" pos:column="15">&lt;<pos:position pos:line="56" pos:column="19"/></operator> <literal type="number" pos:line="56" pos:column="17">0<pos:position pos:line="56" pos:column="18"/></literal></expr>)<pos:position pos:line="56" pos:column="19"/></condition><then pos:line="56" pos:column="19"> <block pos:line="56" pos:column="20">{
            <expr_stmt><expr><call><name pos:line="57" pos:column="13">debugs<pos:position pos:line="57" pos:column="19"/></name><argument_list pos:line="57" pos:column="19">(<argument><expr><literal type="number" pos:line="57" pos:column="20">5<pos:position pos:line="57" pos:column="21"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="57" pos:column="22">5<pos:position pos:line="57" pos:column="23"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="25">"comm_connect_addr: sock="<pos:position pos:line="57" pos:column="51"/></literal> <operator pos:line="57" pos:column="52">&lt;&lt;<pos:position pos:line="57" pos:column="60"/></operator> <name pos:line="57" pos:column="55">sock<pos:position pos:line="57" pos:column="59"/></name> <operator pos:line="57" pos:column="60">&lt;&lt;<pos:position pos:line="57" pos:column="68"/></operator> <literal type="string" pos:line="57" pos:column="63">", addrinfo( "<pos:position pos:line="57" pos:column="77"/></literal> <operator pos:line="57" pos:column="78">&lt;&lt;<pos:position pos:line="57" pos:column="86"/></operator>
                   <literal type="string" pos:line="58" pos:column="20">" flags="<pos:position pos:line="58" pos:column="29"/></literal> <operator pos:line="58" pos:column="30">&lt;&lt;<pos:position pos:line="58" pos:column="38"/></operator> <name><name pos:line="58" pos:column="33">AI<pos:position pos:line="58" pos:column="35"/></name><operator pos:line="58" pos:column="35">-&gt;<pos:position pos:line="58" pos:column="40"/></operator><name pos:line="58" pos:column="37">ai_flags<pos:position pos:line="58" pos:column="45"/></name></name> <operator pos:line="58" pos:column="46">&lt;&lt;<pos:position pos:line="58" pos:column="54"/></operator>
                   <literal type="string" pos:line="59" pos:column="20">", family="<pos:position pos:line="59" pos:column="31"/></literal> <operator pos:line="59" pos:column="32">&lt;&lt;<pos:position pos:line="59" pos:column="40"/></operator> <name><name pos:line="59" pos:column="35">AI<pos:position pos:line="59" pos:column="37"/></name><operator pos:line="59" pos:column="37">-&gt;<pos:position pos:line="59" pos:column="42"/></operator><name pos:line="59" pos:column="39">ai_family<pos:position pos:line="59" pos:column="48"/></name></name> <operator pos:line="59" pos:column="49">&lt;&lt;<pos:position pos:line="59" pos:column="57"/></operator>
                   <literal type="string" pos:line="60" pos:column="20">", socktype="<pos:position pos:line="60" pos:column="33"/></literal> <operator pos:line="60" pos:column="34">&lt;&lt;<pos:position pos:line="60" pos:column="42"/></operator> <name><name pos:line="60" pos:column="37">AI<pos:position pos:line="60" pos:column="39"/></name><operator pos:line="60" pos:column="39">-&gt;<pos:position pos:line="60" pos:column="44"/></operator><name pos:line="60" pos:column="41">ai_socktype<pos:position pos:line="60" pos:column="52"/></name></name> <operator pos:line="60" pos:column="53">&lt;&lt;<pos:position pos:line="60" pos:column="61"/></operator>
                   <literal type="string" pos:line="61" pos:column="20">", protocol="<pos:position pos:line="61" pos:column="33"/></literal> <operator pos:line="61" pos:column="34">&lt;&lt;<pos:position pos:line="61" pos:column="42"/></operator> <name><name pos:line="61" pos:column="37">AI<pos:position pos:line="61" pos:column="39"/></name><operator pos:line="61" pos:column="39">-&gt;<pos:position pos:line="61" pos:column="44"/></operator><name pos:line="61" pos:column="41">ai_protocol<pos:position pos:line="61" pos:column="52"/></name></name> <operator pos:line="61" pos:column="53">&lt;&lt;<pos:position pos:line="61" pos:column="61"/></operator>
                   <literal type="string" pos:line="62" pos:column="20">", &amp;addr="<pos:position pos:line="62" pos:column="34"/></literal> <operator pos:line="62" pos:column="31">&lt;&lt;<pos:position pos:line="62" pos:column="39"/></operator> <name><name pos:line="62" pos:column="34">AI<pos:position pos:line="62" pos:column="36"/></name><operator pos:line="62" pos:column="36">-&gt;<pos:position pos:line="62" pos:column="41"/></operator><name pos:line="62" pos:column="38">ai_addr<pos:position pos:line="62" pos:column="45"/></name></name> <operator pos:line="62" pos:column="46">&lt;&lt;<pos:position pos:line="62" pos:column="54"/></operator>
                   <literal type="string" pos:line="63" pos:column="20">", addrlen="<pos:position pos:line="63" pos:column="32"/></literal> <operator pos:line="63" pos:column="33">&lt;&lt;<pos:position pos:line="63" pos:column="41"/></operator> <name><name pos:line="63" pos:column="36">AI<pos:position pos:line="63" pos:column="38"/></name><operator pos:line="63" pos:column="38">-&gt;<pos:position pos:line="63" pos:column="43"/></operator><name pos:line="63" pos:column="40">ai_addrlen<pos:position pos:line="63" pos:column="50"/></name></name> <operator pos:line="63" pos:column="51">&lt;&lt;<pos:position pos:line="63" pos:column="59"/></operator>
                   <literal type="string" pos:line="64" pos:column="20">" )"<pos:position pos:line="64" pos:column="24"/></literal></expr></argument> )<pos:position pos:line="64" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="27"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="65" pos:column="13">debugs<pos:position pos:line="65" pos:column="19"/></name><argument_list pos:line="65" pos:column="19">(<argument><expr><literal type="number" pos:line="65" pos:column="20">5<pos:position pos:line="65" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="65" pos:column="23">9<pos:position pos:line="65" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="26">"connect FD "<pos:position pos:line="65" pos:column="39"/></literal> <operator pos:line="65" pos:column="40">&lt;&lt;<pos:position pos:line="65" pos:column="48"/></operator> <name pos:line="65" pos:column="43">sock<pos:position pos:line="65" pos:column="47"/></name> <operator pos:line="65" pos:column="48">&lt;&lt;<pos:position pos:line="65" pos:column="56"/></operator> <literal type="string" pos:line="65" pos:column="51">": ("<pos:position pos:line="65" pos:column="56"/></literal> <operator pos:line="65" pos:column="57">&lt;&lt;<pos:position pos:line="65" pos:column="65"/></operator> <name pos:line="65" pos:column="60">x<pos:position pos:line="65" pos:column="61"/></name> <operator pos:line="65" pos:column="62">&lt;&lt;<pos:position pos:line="65" pos:column="70"/></operator> <literal type="string" pos:line="65" pos:column="65">") "<pos:position pos:line="65" pos:column="69"/></literal> <operator pos:line="65" pos:column="70">&lt;&lt;<pos:position pos:line="65" pos:column="78"/></operator> <call><name pos:line="65" pos:column="73">xstrerror<pos:position pos:line="65" pos:column="82"/></name><argument_list pos:line="65" pos:column="82">()<pos:position pos:line="65" pos:column="84"/></argument_list></call></expr></argument>)<pos:position pos:line="65" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="86"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="66" pos:column="13">debugs<pos:position pos:line="66" pos:column="19"/></name><argument_list pos:line="66" pos:column="19">(<argument><expr><literal type="number" pos:line="66" pos:column="20">14<pos:position pos:line="66" pos:column="22"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="66" pos:column="23">9<pos:position pos:line="66" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="26">"connecting to: "<pos:position pos:line="66" pos:column="43"/></literal> <operator pos:line="66" pos:column="44">&lt;&lt;<pos:position pos:line="66" pos:column="52"/></operator> <name pos:line="66" pos:column="47">address<pos:position pos:line="66" pos:column="54"/></name></expr></argument> )<pos:position pos:line="66" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="57"/></expr_stmt>
        }<pos:position pos:line="67" pos:column="10"/></block></then></if>
    }<pos:position pos:line="68" pos:column="6"/></block></then> <else pos:line="68" pos:column="7">else <block pos:line="68" pos:column="12">{
<cpp:if pos:line="69" pos:column="1">#<cpp:directive pos:line="69" pos:column="2">if<pos:position pos:line="69" pos:column="4"/></cpp:directive> <expr><call><name pos:line="69" pos:column="5">defined<pos:position pos:line="69" pos:column="12"/></name><argument_list pos:line="69" pos:column="12">(<argument><expr><name pos:line="69" pos:column="13">_SQUID_NEWSOS6_<pos:position pos:line="69" pos:column="28"/></name></expr></argument>)<pos:position pos:line="69" pos:column="29"/></argument_list></call></expr></cpp:if>
        <comment type="block" pos:line="70" pos:column="9">/* Makoto MATSUSHITA &lt;matusita@ics.es.osaka-u.ac.jp&gt; */</comment>

        <expr_stmt><expr><call><name pos:line="72" pos:column="9">connect<pos:position pos:line="72" pos:column="16"/></name><argument_list pos:line="72" pos:column="16">(<argument><expr><name pos:line="72" pos:column="17">sock<pos:position pos:line="72" pos:column="21"/></name></expr></argument>, <argument><expr><name><name pos:line="72" pos:column="23">AI<pos:position pos:line="72" pos:column="25"/></name><operator pos:line="72" pos:column="25">-&gt;<pos:position pos:line="72" pos:column="30"/></operator><name pos:line="72" pos:column="27">ai_addr<pos:position pos:line="72" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="72" pos:column="36">AI<pos:position pos:line="72" pos:column="38"/></name><operator pos:line="72" pos:column="38">-&gt;<pos:position pos:line="72" pos:column="43"/></operator><name pos:line="72" pos:column="40">ai_addrlen<pos:position pos:line="72" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="72" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="52"/></expr_stmt>

        <if pos:line="74" pos:column="9">if <condition pos:line="74" pos:column="12">(<expr><name pos:line="74" pos:column="13">errno<pos:position pos:line="74" pos:column="18"/></name> <operator pos:line="74" pos:column="19">==<pos:position pos:line="74" pos:column="21"/></operator> <name pos:line="74" pos:column="22">EINVAL<pos:position pos:line="74" pos:column="28"/></name></expr>)<pos:position pos:line="74" pos:column="29"/></condition><then pos:line="74" pos:column="29"> <block pos:line="74" pos:column="30">{
            <expr_stmt><expr><name pos:line="75" pos:column="13">errlen<pos:position pos:line="75" pos:column="19"/></name> <operator pos:line="75" pos:column="20">=<pos:position pos:line="75" pos:column="21"/></operator> <sizeof pos:line="75" pos:column="22">sizeof<argument_list pos:line="75" pos:column="28">(<argument><expr><name pos:line="75" pos:column="29">err<pos:position pos:line="75" pos:column="32"/></name></expr></argument>)<pos:position pos:line="75" pos:column="33"/></argument_list></sizeof></expr>;<pos:position pos:line="75" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><name pos:line="76" pos:column="13">x<pos:position pos:line="76" pos:column="14"/></name> <operator pos:line="76" pos:column="15">=<pos:position pos:line="76" pos:column="16"/></operator> <call><name pos:line="76" pos:column="17">getsockopt<pos:position pos:line="76" pos:column="27"/></name><argument_list pos:line="76" pos:column="27">(<argument><expr><name pos:line="76" pos:column="28">sock<pos:position pos:line="76" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="34">SOL_SOCKET<pos:position pos:line="76" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="46">SO_ERROR<pos:position pos:line="76" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="76" pos:column="56">&amp;<pos:position pos:line="76" pos:column="61"/></operator><name pos:line="76" pos:column="57">err<pos:position pos:line="76" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="76" pos:column="62">&amp;<pos:position pos:line="76" pos:column="67"/></operator><name pos:line="76" pos:column="63">errlen<pos:position pos:line="76" pos:column="69"/></name></expr></argument>)<pos:position pos:line="76" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="71"/></expr_stmt>

            <if pos:line="78" pos:column="13">if <condition pos:line="78" pos:column="16">(<expr><name pos:line="78" pos:column="17">x<pos:position pos:line="78" pos:column="18"/></name> <operator pos:line="78" pos:column="19">&gt;=<pos:position pos:line="78" pos:column="24"/></operator> <literal type="number" pos:line="78" pos:column="22">0<pos:position pos:line="78" pos:column="23"/></literal></expr>)<pos:position pos:line="78" pos:column="24"/></condition><then pos:line="78" pos:column="24">
                <block type="pseudo"><expr_stmt><expr><name pos:line="79" pos:column="17">errno<pos:position pos:line="79" pos:column="22"/></name> <operator pos:line="79" pos:column="23">=<pos:position pos:line="79" pos:column="24"/></operator> <name pos:line="79" pos:column="25">x<pos:position pos:line="79" pos:column="26"/></name></expr>;<pos:position pos:line="79" pos:column="27"/></expr_stmt></block></then></if>
        }<pos:position pos:line="80" pos:column="10"/></block></then></if>

<cpp:else pos:line="82" pos:column="1">#<cpp:directive pos:line="82" pos:column="2">else<pos:position pos:line="82" pos:column="6"/></cpp:directive></cpp:else>
        <expr_stmt><expr><name pos:line="83" pos:column="9">errlen<pos:position pos:line="83" pos:column="15"/></name> <operator pos:line="83" pos:column="16">=<pos:position pos:line="83" pos:column="17"/></operator> <sizeof pos:line="83" pos:column="18">sizeof<argument_list pos:line="83" pos:column="24">(<argument><expr><name pos:line="83" pos:column="25">err<pos:position pos:line="83" pos:column="28"/></name></expr></argument>)<pos:position pos:line="83" pos:column="29"/></argument_list></sizeof></expr>;<pos:position pos:line="83" pos:column="30"/></expr_stmt>

        <expr_stmt><expr><name pos:line="85" pos:column="9">x<pos:position pos:line="85" pos:column="10"/></name> <operator pos:line="85" pos:column="11">=<pos:position pos:line="85" pos:column="12"/></operator> <call><name pos:line="85" pos:column="13">getsockopt<pos:position pos:line="85" pos:column="23"/></name><argument_list pos:line="85" pos:column="23">(<argument><expr><name pos:line="85" pos:column="24">sock<pos:position pos:line="85" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="30">SOL_SOCKET<pos:position pos:line="85" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="42">SO_ERROR<pos:position pos:line="85" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="85" pos:column="52">&amp;<pos:position pos:line="85" pos:column="57"/></operator><name pos:line="85" pos:column="53">err<pos:position pos:line="85" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="85" pos:column="58">&amp;<pos:position pos:line="85" pos:column="63"/></operator><name pos:line="85" pos:column="59">errlen<pos:position pos:line="85" pos:column="65"/></name></expr></argument>)<pos:position pos:line="85" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="67"/></expr_stmt>

        <if pos:line="87" pos:column="9">if <condition pos:line="87" pos:column="12">(<expr><name pos:line="87" pos:column="13">x<pos:position pos:line="87" pos:column="14"/></name> <operator pos:line="87" pos:column="15">==<pos:position pos:line="87" pos:column="17"/></operator> <literal type="number" pos:line="87" pos:column="18">0<pos:position pos:line="87" pos:column="19"/></literal></expr>)<pos:position pos:line="87" pos:column="20"/></condition><then pos:line="87" pos:column="20">
            <block type="pseudo"><expr_stmt><expr><name pos:line="88" pos:column="13">errno<pos:position pos:line="88" pos:column="18"/></name> <operator pos:line="88" pos:column="19">=<pos:position pos:line="88" pos:column="20"/></operator> <name pos:line="88" pos:column="21">err<pos:position pos:line="88" pos:column="24"/></name></expr>;<pos:position pos:line="88" pos:column="25"/></expr_stmt></block></then></if>

<cpp:if pos:line="90" pos:column="1">#<cpp:directive pos:line="90" pos:column="2">if<pos:position pos:line="90" pos:column="4"/></cpp:directive> <expr><call><name pos:line="90" pos:column="5">defined<pos:position pos:line="90" pos:column="12"/></name><argument_list pos:line="90" pos:column="12">(<argument><expr><name pos:line="90" pos:column="13">_SQUID_SOLARIS_<pos:position pos:line="90" pos:column="28"/></name></expr></argument>)<pos:position pos:line="90" pos:column="29"/></argument_list></call></expr></cpp:if>
        <comment type="block" pos:line="91" pos:column="9">/*
        * Solaris 2.4's socket emulation doesn't allow you
        * to determine the error from a failed non-blocking
        * connect and just returns EPIPE.  Create a fake
        * error message for connect.   -- fenner@parc.xerox.com
        */</comment>
        <if pos:line="97" pos:column="9">if <condition pos:line="97" pos:column="12">(<expr><name pos:line="97" pos:column="13">x<pos:position pos:line="97" pos:column="14"/></name> <operator pos:line="97" pos:column="15">&lt;<pos:position pos:line="97" pos:column="19"/></operator> <literal type="number" pos:line="97" pos:column="17">0<pos:position pos:line="97" pos:column="18"/></literal> <operator pos:line="97" pos:column="19">&amp;&amp;<pos:position pos:line="97" pos:column="29"/></operator> <name pos:line="97" pos:column="22">errno<pos:position pos:line="97" pos:column="27"/></name> <operator pos:line="97" pos:column="28">==<pos:position pos:line="97" pos:column="30"/></operator> <name pos:line="97" pos:column="31">EPIPE<pos:position pos:line="97" pos:column="36"/></name></expr>)<pos:position pos:line="97" pos:column="37"/></condition><then pos:line="97" pos:column="37">
            <block type="pseudo"><expr_stmt><expr><name pos:line="98" pos:column="13">errno<pos:position pos:line="98" pos:column="18"/></name> <operator pos:line="98" pos:column="19">=<pos:position pos:line="98" pos:column="20"/></operator> <name pos:line="98" pos:column="21">ENOTCONN<pos:position pos:line="98" pos:column="29"/></name></expr>;<pos:position pos:line="98" pos:column="30"/></expr_stmt></block></then></if>

<cpp:endif pos:line="100" pos:column="1">#<cpp:directive pos:line="100" pos:column="2">endif<pos:position pos:line="100" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="101" pos:column="1">#<cpp:directive pos:line="101" pos:column="2">endif<pos:position pos:line="101" pos:column="7"/></cpp:directive></cpp:endif>

    }<pos:position pos:line="103" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="105" pos:column="5">/* Squid seems to be working fine without this code. With this code,
     * we leak memory on many connect requests because of EINPROGRESS.
     * If you find that this code is needed, please file a bug report. */</comment>
<cpp:if pos:line="108" pos:column="1">#<cpp:directive pos:line="108" pos:column="2">if<pos:position pos:line="108" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="108" pos:column="5">0<pos:position pos:line="108" pos:column="6"/></literal></expr></cpp:if>
<cpp:ifdef pos:line="109" pos:column="1">#<cpp:directive pos:line="109" pos:column="2">ifdef<pos:position pos:line="109" pos:column="7"/></cpp:directive> <name pos:line="109" pos:column="8">_SQUID_LINUX_<pos:position pos:line="109" pos:column="21"/></name></cpp:ifdef>
    <comment type="block" pos:line="110" pos:column="5">/* 2007-11-27:
     * Linux Debian replaces our allocated AI pointer with garbage when
     * connect() fails. This leads to segmentation faults deallocating
     * the system-allocated memory when we go to clean up our pointer.
     * HACK: is to leak the memory returned since we can't deallocate.
     */</comment>
    if (errno != 0) {
        AI = NULL;
    }
<cpp:endif pos:line="119" pos:column="1">#<cpp:directive pos:line="119" pos:column="2">endif<pos:position pos:line="119" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="120" pos:column="1">#<cpp:directive pos:line="120" pos:column="2">endif<pos:position pos:line="120" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name><name pos:line="122" pos:column="5">address<pos:position pos:line="122" pos:column="12"/></name><operator pos:line="122" pos:column="12">.<pos:position pos:line="122" pos:column="13"/></operator><name pos:line="122" pos:column="13">FreeAddrInfo<pos:position pos:line="122" pos:column="25"/></name></name><argument_list pos:line="122" pos:column="25">(<argument><expr><name pos:line="122" pos:column="26">AI<pos:position pos:line="122" pos:column="28"/></name></expr></argument>)<pos:position pos:line="122" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="30"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="124" pos:column="5">PROF_stop<pos:position pos:line="124" pos:column="14"/></name><argument_list pos:line="124" pos:column="14">(<argument><expr><name pos:line="124" pos:column="15">comm_connect_addr<pos:position pos:line="124" pos:column="32"/></name></expr></argument>)<pos:position pos:line="124" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="34"/></expr_stmt>

    <if pos:line="126" pos:column="5">if <condition pos:line="126" pos:column="8">(<expr><name pos:line="126" pos:column="9">errno<pos:position pos:line="126" pos:column="14"/></name> <operator pos:line="126" pos:column="15">==<pos:position pos:line="126" pos:column="17"/></operator> <literal type="number" pos:line="126" pos:column="18">0<pos:position pos:line="126" pos:column="19"/></literal> <operator pos:line="126" pos:column="20">||<pos:position pos:line="126" pos:column="22"/></operator> <name pos:line="126" pos:column="23">errno<pos:position pos:line="126" pos:column="28"/></name> <operator pos:line="126" pos:column="29">==<pos:position pos:line="126" pos:column="31"/></operator> <name pos:line="126" pos:column="32">EISCONN<pos:position pos:line="126" pos:column="39"/></name></expr>)<pos:position pos:line="126" pos:column="40"/></condition><then pos:line="126" pos:column="40">
        <block type="pseudo"><expr_stmt><expr><name pos:line="127" pos:column="9">status<pos:position pos:line="127" pos:column="15"/></name> <operator pos:line="127" pos:column="16">=<pos:position pos:line="127" pos:column="17"/></operator> <name pos:line="127" pos:column="18">COMM_OK<pos:position pos:line="127" pos:column="25"/></name></expr>;<pos:position pos:line="127" pos:column="26"/></expr_stmt></block></then>
    <elseif pos:line="128" pos:column="5">else <if pos:line="128" pos:column="10">if <condition pos:line="128" pos:column="13">(<expr><call><name pos:line="128" pos:column="14">ignoreErrno<pos:position pos:line="128" pos:column="25"/></name><argument_list pos:line="128" pos:column="25">(<argument><expr><name pos:line="128" pos:column="26">errno<pos:position pos:line="128" pos:column="31"/></name></expr></argument>)<pos:position pos:line="128" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="128" pos:column="33"/></condition><then pos:line="128" pos:column="33">
        <block type="pseudo"><expr_stmt><expr><name pos:line="129" pos:column="9">status<pos:position pos:line="129" pos:column="15"/></name> <operator pos:line="129" pos:column="16">=<pos:position pos:line="129" pos:column="17"/></operator> <name pos:line="129" pos:column="18">COMM_INPROGRESS<pos:position pos:line="129" pos:column="33"/></name></expr>;<pos:position pos:line="129" pos:column="34"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="130" pos:column="5">else <if pos:line="130" pos:column="10">if <condition pos:line="130" pos:column="13">(<expr><name pos:line="130" pos:column="14">errno<pos:position pos:line="130" pos:column="19"/></name> <operator pos:line="130" pos:column="20">==<pos:position pos:line="130" pos:column="22"/></operator> <name pos:line="130" pos:column="23">EAFNOSUPPORT<pos:position pos:line="130" pos:column="35"/></name> <operator pos:line="130" pos:column="36">||<pos:position pos:line="130" pos:column="38"/></operator> <name pos:line="130" pos:column="39">errno<pos:position pos:line="130" pos:column="44"/></name> <operator pos:line="130" pos:column="45">==<pos:position pos:line="130" pos:column="47"/></operator> <name pos:line="130" pos:column="48">EINVAL<pos:position pos:line="130" pos:column="54"/></name></expr>)<pos:position pos:line="130" pos:column="55"/></condition><then pos:line="130" pos:column="55">
        <block type="pseudo"><return pos:line="131" pos:column="9">return <expr><name pos:line="131" pos:column="16">COMM_ERR_PROTOCOL<pos:position pos:line="131" pos:column="33"/></name></expr>;<pos:position pos:line="131" pos:column="34"/></return></block></then></if></elseif>
    <else pos:line="132" pos:column="5">else
        <block type="pseudo"><return pos:line="133" pos:column="9">return <expr><name pos:line="133" pos:column="16">COMM_ERROR<pos:position pos:line="133" pos:column="26"/></name></expr>;<pos:position pos:line="133" pos:column="27"/></return></block></else></if>

    <expr_stmt><expr><call><name><name pos:line="135" pos:column="5">address<pos:position pos:line="135" pos:column="12"/></name><operator pos:line="135" pos:column="12">.<pos:position pos:line="135" pos:column="13"/></operator><name pos:line="135" pos:column="13">NtoA<pos:position pos:line="135" pos:column="17"/></name></name><argument_list pos:line="135" pos:column="17">(<argument><expr><name><name pos:line="135" pos:column="18">F<pos:position pos:line="135" pos:column="19"/></name><operator pos:line="135" pos:column="19">-&gt;<pos:position pos:line="135" pos:column="24"/></operator><name pos:line="135" pos:column="21">ipaddr<pos:position pos:line="135" pos:column="27"/></name></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="29">MAX_IPSTRLEN<pos:position pos:line="135" pos:column="41"/></name></expr></argument>)<pos:position pos:line="135" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="43"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="137" pos:column="5">F<pos:position pos:line="137" pos:column="6"/></name><operator pos:line="137" pos:column="6">-&gt;<pos:position pos:line="137" pos:column="11"/></operator><name pos:line="137" pos:column="8">remote_port<pos:position pos:line="137" pos:column="19"/></name></name> <operator pos:line="137" pos:column="20">=<pos:position pos:line="137" pos:column="21"/></operator> <call><name><name pos:line="137" pos:column="22">address<pos:position pos:line="137" pos:column="29"/></name><operator pos:line="137" pos:column="29">.<pos:position pos:line="137" pos:column="30"/></operator><name pos:line="137" pos:column="30">GetPort<pos:position pos:line="137" pos:column="37"/></name></name><argument_list pos:line="137" pos:column="37">()<pos:position pos:line="137" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="40"/></expr_stmt> <comment type="block" pos:line="137" pos:column="41">/* remote_port is HS */</comment>

    <if pos:line="139" pos:column="5">if <condition pos:line="139" pos:column="8">(<expr><name pos:line="139" pos:column="9">status<pos:position pos:line="139" pos:column="15"/></name> <operator pos:line="139" pos:column="16">==<pos:position pos:line="139" pos:column="18"/></operator> <name pos:line="139" pos:column="19">COMM_OK<pos:position pos:line="139" pos:column="26"/></name></expr>)<pos:position pos:line="139" pos:column="27"/></condition><then pos:line="139" pos:column="27"> <block pos:line="139" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="140" pos:column="9">debugs<pos:position pos:line="140" pos:column="15"/></name><argument_list pos:line="140" pos:column="15">(<argument><expr><literal type="number" pos:line="140" pos:column="16">5<pos:position pos:line="140" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="140" pos:column="19">10<pos:position pos:line="140" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="140" pos:column="23">"comm_connect_addr: FD "<pos:position pos:line="140" pos:column="47"/></literal> <operator pos:line="140" pos:column="48">&lt;&lt;<pos:position pos:line="140" pos:column="56"/></operator> <name pos:line="140" pos:column="51">sock<pos:position pos:line="140" pos:column="55"/></name> <operator pos:line="140" pos:column="56">&lt;&lt;<pos:position pos:line="140" pos:column="64"/></operator> <literal type="string" pos:line="140" pos:column="59">" connected to "<pos:position pos:line="140" pos:column="75"/></literal> <operator pos:line="140" pos:column="76">&lt;&lt;<pos:position pos:line="140" pos:column="84"/></operator> <name pos:line="140" pos:column="79">address<pos:position pos:line="140" pos:column="86"/></name></expr></argument>)<pos:position pos:line="140" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="88"/></expr_stmt>
    }<pos:position pos:line="141" pos:column="6"/></block></then> <elseif pos:line="141" pos:column="7">else <if pos:line="141" pos:column="12">if <condition pos:line="141" pos:column="15">(<expr><name pos:line="141" pos:column="16">status<pos:position pos:line="141" pos:column="22"/></name> <operator pos:line="141" pos:column="23">==<pos:position pos:line="141" pos:column="25"/></operator> <name pos:line="141" pos:column="26">COMM_INPROGRESS<pos:position pos:line="141" pos:column="41"/></name></expr>)<pos:position pos:line="141" pos:column="42"/></condition><then pos:line="141" pos:column="42"> <block pos:line="141" pos:column="43">{
        <expr_stmt><expr><call><name pos:line="142" pos:column="9">debugs<pos:position pos:line="142" pos:column="15"/></name><argument_list pos:line="142" pos:column="15">(<argument><expr><literal type="number" pos:line="142" pos:column="16">5<pos:position pos:line="142" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="142" pos:column="19">10<pos:position pos:line="142" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="142" pos:column="23">"comm_connect_addr: FD "<pos:position pos:line="142" pos:column="47"/></literal> <operator pos:line="142" pos:column="48">&lt;&lt;<pos:position pos:line="142" pos:column="56"/></operator> <name pos:line="142" pos:column="51">sock<pos:position pos:line="142" pos:column="55"/></name> <operator pos:line="142" pos:column="56">&lt;&lt;<pos:position pos:line="142" pos:column="64"/></operator> <literal type="string" pos:line="142" pos:column="59">" connection pending"<pos:position pos:line="142" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="142" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="82"/></expr_stmt>
    }<pos:position pos:line="143" pos:column="6"/></block></then></if></elseif></if>

    <return pos:line="145" pos:column="5">return <expr><name pos:line="145" pos:column="12">status<pos:position pos:line="145" pos:column="18"/></name></expr>;<pos:position pos:line="145" pos:column="19"/></return>
}<pos:position pos:line="146" pos:column="2"/></block></function></unit>
