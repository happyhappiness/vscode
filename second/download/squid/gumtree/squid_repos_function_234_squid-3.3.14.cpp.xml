<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_234_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">argc<pos:position pos:line="1" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier><modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">argv<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="32"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">char<pos:position pos:line="3" pos:column="9"/></name></type> <name><name pos:line="3" pos:column="10">request<pos:position pos:line="3" pos:column="17"/></name><index pos:line="3" pos:column="17">[<expr><name pos:line="3" pos:column="18">HELPER_INPUT_BUFFER<pos:position pos:line="3" pos:column="37"/></name></expr>]<pos:position pos:line="3" pos:column="38"/></index></name></decl>;<pos:position pos:line="3" pos:column="39"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">opt<pos:position pos:line="4" pos:column="12"/></name></decl>;<pos:position pos:line="4" pos:column="13"/></decl_stmt>

    <expr_stmt><expr><name pos:line="6" pos:column="5">program_name<pos:position pos:line="6" pos:column="17"/></name> <operator pos:line="6" pos:column="18">=<pos:position pos:line="6" pos:column="19"/></operator> <name><name pos:line="6" pos:column="20">argv<pos:position pos:line="6" pos:column="24"/></name><index pos:line="6" pos:column="24">[<expr><literal type="number" pos:line="6" pos:column="25">0<pos:position pos:line="6" pos:column="26"/></literal></expr>]<pos:position pos:line="6" pos:column="27"/></index></name></expr>;<pos:position pos:line="6" pos:column="28"/></expr_stmt>

    <while pos:line="8" pos:column="5">while <condition pos:line="8" pos:column="11">(<expr><operator pos:line="8" pos:column="12">(<pos:position pos:line="8" pos:column="13"/></operator><name pos:line="8" pos:column="13">opt<pos:position pos:line="8" pos:column="16"/></name> <operator pos:line="8" pos:column="17">=<pos:position pos:line="8" pos:column="18"/></operator> <call><name pos:line="8" pos:column="19">getopt<pos:position pos:line="8" pos:column="25"/></name><argument_list pos:line="8" pos:column="25">(<argument><expr><name pos:line="8" pos:column="26">argc<pos:position pos:line="8" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="32">argv<pos:position pos:line="8" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="38">"dp:l:b:h"<pos:position pos:line="8" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="49"/></argument_list></call><operator pos:line="8" pos:column="49">)<pos:position pos:line="8" pos:column="50"/></operator> <operator pos:line="8" pos:column="51">!=<pos:position pos:line="8" pos:column="53"/></operator> <operator pos:line="8" pos:column="54">-<pos:position pos:line="8" pos:column="55"/></operator><literal type="number" pos:line="8" pos:column="55">1<pos:position pos:line="8" pos:column="56"/></literal></expr>)<pos:position pos:line="8" pos:column="57"/></condition> <block pos:line="8" pos:column="58">{
        <switch pos:line="9" pos:column="9">switch <condition pos:line="9" pos:column="16">(<expr><name pos:line="9" pos:column="17">opt<pos:position pos:line="9" pos:column="20"/></name></expr>)<pos:position pos:line="9" pos:column="21"/></condition> <block pos:line="9" pos:column="22">{
        <case pos:line="10" pos:column="9">case <expr><literal type="char" pos:line="10" pos:column="14">'d'<pos:position pos:line="10" pos:column="17"/></literal></expr>:<pos:position pos:line="10" pos:column="18"/></case>
            <expr_stmt><expr><name pos:line="11" pos:column="13">tq_debug_enabled<pos:position pos:line="11" pos:column="29"/></name> <operator pos:line="11" pos:column="30">=<pos:position pos:line="11" pos:column="31"/></operator> <literal type="boolean" pos:line="11" pos:column="32">true<pos:position pos:line="11" pos:column="36"/></literal></expr>;<pos:position pos:line="11" pos:column="37"/></expr_stmt>
            <break pos:line="12" pos:column="13">break;<pos:position pos:line="12" pos:column="19"/></break>
        <case pos:line="13" pos:column="9">case <expr><literal type="char" pos:line="13" pos:column="14">'l'<pos:position pos:line="13" pos:column="17"/></literal></expr>:<pos:position pos:line="13" pos:column="18"/></case>
            <expr_stmt><expr><call><name pos:line="14" pos:column="13">open_log<pos:position pos:line="14" pos:column="21"/></name><argument_list pos:line="14" pos:column="21">(<argument><expr><name pos:line="14" pos:column="22">optarg<pos:position pos:line="14" pos:column="28"/></name></expr></argument>)<pos:position pos:line="14" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="30"/></expr_stmt>
            <break pos:line="15" pos:column="13">break;<pos:position pos:line="15" pos:column="19"/></break>
        <case pos:line="16" pos:column="9">case <expr><literal type="char" pos:line="16" pos:column="14">'b'<pos:position pos:line="16" pos:column="17"/></literal></expr>:<pos:position pos:line="16" pos:column="18"/></case>
            <expr_stmt><expr><name pos:line="17" pos:column="13">db_path<pos:position pos:line="17" pos:column="20"/></name> <operator pos:line="17" pos:column="21">=<pos:position pos:line="17" pos:column="22"/></operator> <name pos:line="17" pos:column="23">optarg<pos:position pos:line="17" pos:column="29"/></name></expr>;<pos:position pos:line="17" pos:column="30"/></expr_stmt>
            <break pos:line="18" pos:column="13">break;<pos:position pos:line="18" pos:column="19"/></break>
        <case pos:line="19" pos:column="9">case <expr><literal type="char" pos:line="19" pos:column="14">'p'<pos:position pos:line="19" pos:column="17"/></literal></expr>:<pos:position pos:line="19" pos:column="18"/></case>
            <expr_stmt><expr><name pos:line="20" pos:column="13">pauseLength<pos:position pos:line="20" pos:column="24"/></name> <operator pos:line="20" pos:column="25">=<pos:position pos:line="20" pos:column="26"/></operator> <call><name pos:line="20" pos:column="27">atoi<pos:position pos:line="20" pos:column="31"/></name><argument_list pos:line="20" pos:column="31">(<argument><expr><name pos:line="20" pos:column="32">optarg<pos:position pos:line="20" pos:column="38"/></name></expr></argument>)<pos:position pos:line="20" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="40"/></expr_stmt>
            <break pos:line="21" pos:column="13">break;<pos:position pos:line="21" pos:column="19"/></break>
        <case pos:line="22" pos:column="9">case <expr><literal type="char" pos:line="22" pos:column="14">'h'<pos:position pos:line="22" pos:column="17"/></literal></expr>:<pos:position pos:line="22" pos:column="18"/></case>
            <expr_stmt><expr><call><name pos:line="23" pos:column="13">usage<pos:position pos:line="23" pos:column="18"/></name><argument_list pos:line="23" pos:column="18">()<pos:position pos:line="23" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="21"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="24" pos:column="13">exit<pos:position pos:line="24" pos:column="17"/></name><argument_list pos:line="24" pos:column="17">(<argument><expr><literal type="number" pos:line="24" pos:column="18">0<pos:position pos:line="24" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="21"/></expr_stmt>
            <break pos:line="25" pos:column="13">break;<pos:position pos:line="25" pos:column="19"/></break>
        }<pos:position pos:line="26" pos:column="10"/></block></switch>
    }<pos:position pos:line="27" pos:column="6"/></block></while>

    <expr_stmt><expr><call><name pos:line="29" pos:column="5">log_info<pos:position pos:line="29" pos:column="13"/></name><argument_list pos:line="29" pos:column="13">(<argument><expr><literal type="string" pos:line="29" pos:column="14">"Starting %s\n"<pos:position pos:line="29" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="31">__FILE__<pos:position pos:line="29" pos:column="39"/></name></expr></argument>)<pos:position pos:line="29" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">setbuf<pos:position pos:line="30" pos:column="11"/></name><argument_list pos:line="30" pos:column="11">(<argument><expr><name pos:line="30" pos:column="12">stdout<pos:position pos:line="30" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="20">NULL<pos:position pos:line="30" pos:column="24"/></name></expr></argument>)<pos:position pos:line="30" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="26"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="32" pos:column="5">init_db<pos:position pos:line="32" pos:column="12"/></name><argument_list pos:line="32" pos:column="12">()<pos:position pos:line="32" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="15"/></expr_stmt>

    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">( <expr><name pos:line="34" pos:column="10">optind<pos:position pos:line="34" pos:column="16"/></name> <operator pos:line="34" pos:column="17">+<pos:position pos:line="34" pos:column="18"/></operator> <literal type="number" pos:line="34" pos:column="19">1<pos:position pos:line="34" pos:column="20"/></literal> <operator pos:line="34" pos:column="21">!=<pos:position pos:line="34" pos:column="23"/></operator> <name pos:line="34" pos:column="24">argc<pos:position pos:line="34" pos:column="28"/></name></expr> )<pos:position pos:line="34" pos:column="30"/></condition><then pos:line="34" pos:column="30"> <block pos:line="34" pos:column="31">{
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">usage<pos:position pos:line="35" pos:column="14"/></name><argument_list pos:line="35" pos:column="14">()<pos:position pos:line="35" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="17"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">exit<pos:position pos:line="36" pos:column="13"/></name><argument_list pos:line="36" pos:column="13">(<argument><expr><literal type="number" pos:line="36" pos:column="14">1<pos:position pos:line="36" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="37" pos:column="6"/></block></then> <else pos:line="37" pos:column="7">else <block pos:line="37" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="38" pos:column="9">readConfig<pos:position pos:line="38" pos:column="19"/></name><argument_list pos:line="38" pos:column="19">(<argument><expr><name><name pos:line="38" pos:column="20">argv<pos:position pos:line="38" pos:column="24"/></name><index pos:line="38" pos:column="24">[<expr><name pos:line="38" pos:column="25">optind<pos:position pos:line="38" pos:column="31"/></name></expr>]<pos:position pos:line="38" pos:column="32"/></index></name></expr></argument>)<pos:position pos:line="38" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="39" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="41" pos:column="5">log_info<pos:position pos:line="41" pos:column="13"/></name><argument_list pos:line="41" pos:column="13">(<argument><expr><literal type="string" pos:line="41" pos:column="14">"Waiting for requests...\n"<pos:position pos:line="41" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="43"/></expr_stmt>
    <while pos:line="42" pos:column="5">while <condition pos:line="42" pos:column="11">(<expr><call><name pos:line="42" pos:column="12">fgets<pos:position pos:line="42" pos:column="17"/></name><argument_list pos:line="42" pos:column="17">(<argument><expr><name pos:line="42" pos:column="18">request<pos:position pos:line="42" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="27">HELPER_INPUT_BUFFER<pos:position pos:line="42" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="48">stdin<pos:position pos:line="42" pos:column="53"/></name></expr></argument>)<pos:position pos:line="42" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="55"/></condition> <block pos:line="42" pos:column="56">{
        <comment type="line" pos:line="43" pos:column="9">// we expect the following line syntax: %LOGIN</comment>
        <decl_stmt><decl><type><specifier pos:line="44" pos:column="9">const<pos:position pos:line="44" pos:column="14"/></specifier> <name pos:line="44" pos:column="15">char<pos:position pos:line="44" pos:column="19"/></name> <modifier pos:line="44" pos:column="20">*<pos:position pos:line="44" pos:column="21"/></modifier></type><name pos:line="44" pos:column="21">user_key<pos:position pos:line="44" pos:column="29"/></name> <init pos:line="44" pos:column="30">= <expr><call><name pos:line="44" pos:column="32">strtok<pos:position pos:line="44" pos:column="38"/></name><argument_list pos:line="44" pos:column="38">(<argument><expr><name pos:line="44" pos:column="39">request<pos:position pos:line="44" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="48">" \n"<pos:position pos:line="44" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="44" pos:column="55"/></decl_stmt>
        <if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><operator pos:line="45" pos:column="13">!<pos:position pos:line="45" pos:column="14"/></operator><name pos:line="45" pos:column="14">user_key<pos:position pos:line="45" pos:column="22"/></name></expr>)<pos:position pos:line="45" pos:column="23"/></condition><then pos:line="45" pos:column="23"> <block pos:line="45" pos:column="24">{
            <expr_stmt><expr><call><name pos:line="46" pos:column="13">SEND_ERR<pos:position pos:line="46" pos:column="21"/></name><argument_list pos:line="46" pos:column="21">(<argument><expr><literal type="string" pos:line="46" pos:column="22">"User name missing"<pos:position pos:line="46" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="43"/></expr_stmt>
            <continue pos:line="47" pos:column="13">continue;<pos:position pos:line="47" pos:column="22"/></continue>
        }<pos:position pos:line="48" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="49" pos:column="9">processActivity<pos:position pos:line="49" pos:column="24"/></name><argument_list pos:line="49" pos:column="24">(<argument><expr><name pos:line="49" pos:column="25">user_key<pos:position pos:line="49" pos:column="33"/></name></expr></argument>)<pos:position pos:line="49" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="50" pos:column="6"/></block></while>
    <expr_stmt><expr><call><name pos:line="51" pos:column="5">log_info<pos:position pos:line="51" pos:column="13"/></name><argument_list pos:line="51" pos:column="13">(<argument><expr><literal type="string" pos:line="51" pos:column="14">"Ending %s\n"<pos:position pos:line="51" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="51" pos:column="29">__FILE__<pos:position pos:line="51" pos:column="37"/></name></expr></argument>)<pos:position pos:line="51" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="52" pos:column="5">shutdown_db<pos:position pos:line="52" pos:column="16"/></name><argument_list pos:line="52" pos:column="16">()<pos:position pos:line="52" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="19"/></expr_stmt>
    <return pos:line="53" pos:column="5">return <expr><literal type="number" pos:line="53" pos:column="12">0<pos:position pos:line="53" pos:column="13"/></literal></expr>;<pos:position pos:line="53" pos:column="14"/></return>
}<pos:position pos:line="54" pos:column="2"/></block></function></unit>
