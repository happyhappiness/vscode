<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_506_squid-3.3.14.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">struct<pos:position pos:line="1" pos:column="7"/></name> <name pos:line="1" pos:column="8">snmp_pdu<pos:position pos:line="1" pos:column="16"/></name></name> <modifier pos:line="1" pos:column="17">*<pos:position pos:line="1" pos:column="18"/></modifier></type>
<name pos:line="2" pos:column="1">snmp_pdu_clone<pos:position pos:line="2" pos:column="15"/></name><parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><name><name pos:line="2" pos:column="16">struct<pos:position pos:line="2" pos:column="22"/></name> <name pos:line="2" pos:column="23">snmp_pdu<pos:position pos:line="2" pos:column="31"/></name></name> <modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type><name pos:line="2" pos:column="33">Src<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="37"/></parameter_list> <block pos:line="2" pos:column="38">{
    <decl_stmt><decl><type><name><name pos:line="3" pos:column="5">struct<pos:position pos:line="3" pos:column="11"/></name> <name pos:line="3" pos:column="12">snmp_pdu<pos:position pos:line="3" pos:column="20"/></name></name> <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type><name pos:line="3" pos:column="22">Dest<pos:position pos:line="3" pos:column="26"/></name></decl>;<pos:position pos:line="3" pos:column="27"/></decl_stmt>

<cpp:if pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">if<pos:position pos:line="5" pos:column="4"/></cpp:directive> <expr><name pos:line="5" pos:column="5">DEBUG_PDU<pos:position pos:line="5" pos:column="14"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">snmplib_debug<pos:position pos:line="6" pos:column="18"/></name><argument_list pos:line="6" pos:column="18">(<argument><expr><literal type="number" pos:line="6" pos:column="19">8<pos:position pos:line="6" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="22">"PDU %x:  Cloning\n"<pos:position pos:line="6" pos:column="42"/></literal></expr></argument>, <argument><expr><operator pos:line="6" pos:column="44">(<pos:position pos:line="6" pos:column="45"/></operator><name pos:line="6" pos:column="45">unsigned<pos:position pos:line="6" pos:column="53"/></name> <name pos:line="6" pos:column="54">int<pos:position pos:line="6" pos:column="57"/></name><operator pos:line="6" pos:column="57">)<pos:position pos:line="6" pos:column="58"/></operator> <name pos:line="6" pos:column="59">Src<pos:position pos:line="6" pos:column="62"/></name></expr></argument>)<pos:position pos:line="6" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="64"/></expr_stmt>
<cpp:endif pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">endif<pos:position pos:line="7" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><name pos:line="9" pos:column="5">Dest<pos:position pos:line="9" pos:column="9"/></name> <operator pos:line="9" pos:column="10">=<pos:position pos:line="9" pos:column="11"/></operator> <operator pos:line="9" pos:column="12">(<pos:position pos:line="9" pos:column="13"/></operator>struct <name pos:line="9" pos:column="20">snmp_pdu<pos:position pos:line="9" pos:column="28"/></name> <operator pos:line="9" pos:column="29">*<pos:position pos:line="9" pos:column="30"/></operator><operator pos:line="9" pos:column="30">)<pos:position pos:line="9" pos:column="31"/></operator> <call><name pos:line="9" pos:column="32">xmalloc<pos:position pos:line="9" pos:column="39"/></name><argument_list pos:line="9" pos:column="39">(<argument><expr><sizeof pos:line="9" pos:column="40">sizeof<argument_list pos:line="9" pos:column="46">(<argument><expr pos:line="9" pos:column="47">struct <name pos:line="9" pos:column="54">snmp_pdu<pos:position pos:line="9" pos:column="62"/></name></expr></argument>)<pos:position pos:line="9" pos:column="63"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="65"/></expr_stmt>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">Dest<pos:position pos:line="10" pos:column="13"/></name> <operator pos:line="10" pos:column="14">==<pos:position pos:line="10" pos:column="16"/></operator> <name pos:line="10" pos:column="17">NULL<pos:position pos:line="10" pos:column="21"/></name></expr>)<pos:position pos:line="10" pos:column="22"/></condition><then pos:line="10" pos:column="22"> <block pos:line="10" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">snmp_set_api_error<pos:position pos:line="11" pos:column="27"/></name><argument_list pos:line="11" pos:column="27">(<argument><expr><name pos:line="11" pos:column="28">SNMPERR_OS_ERR<pos:position pos:line="11" pos:column="42"/></name></expr></argument>)<pos:position pos:line="11" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="44"/></expr_stmt>
        <return pos:line="12" pos:column="9">return <expr><operator pos:line="12" pos:column="16">(<pos:position pos:line="12" pos:column="17"/></operator><name pos:line="12" pos:column="17">NULL<pos:position pos:line="12" pos:column="21"/></name><operator pos:line="12" pos:column="21">)<pos:position pos:line="12" pos:column="22"/></operator></expr>;<pos:position pos:line="12" pos:column="23"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">memcpy<pos:position pos:line="14" pos:column="11"/></name><argument_list pos:line="14" pos:column="11">(<argument><expr><operator pos:line="14" pos:column="12">(<pos:position pos:line="14" pos:column="13"/></operator><name pos:line="14" pos:column="13">char<pos:position pos:line="14" pos:column="17"/></name> <operator pos:line="14" pos:column="18">*<pos:position pos:line="14" pos:column="19"/></operator><operator pos:line="14" pos:column="19">)<pos:position pos:line="14" pos:column="20"/></operator> <name pos:line="14" pos:column="21">Dest<pos:position pos:line="14" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="27">(<pos:position pos:line="14" pos:column="28"/></operator><name pos:line="14" pos:column="28">char<pos:position pos:line="14" pos:column="32"/></name> <operator pos:line="14" pos:column="33">*<pos:position pos:line="14" pos:column="34"/></operator><operator pos:line="14" pos:column="34">)<pos:position pos:line="14" pos:column="35"/></operator> <name pos:line="14" pos:column="36">Src<pos:position pos:line="14" pos:column="39"/></name></expr></argument>, <argument><expr><sizeof pos:line="14" pos:column="41">sizeof<argument_list pos:line="14" pos:column="47">(<argument><expr pos:line="14" pos:column="48">struct <name pos:line="14" pos:column="55">snmp_pdu<pos:position pos:line="14" pos:column="63"/></name></expr></argument>)<pos:position pos:line="14" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="14" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="66"/></expr_stmt>

<cpp:if pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">if<pos:position pos:line="16" pos:column="4"/></cpp:directive> <expr><name pos:line="16" pos:column="5">DEBUG_PDU<pos:position pos:line="16" pos:column="14"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">snmplib_debug<pos:position pos:line="17" pos:column="18"/></name><argument_list pos:line="17" pos:column="18">(<argument><expr><literal type="number" pos:line="17" pos:column="19">8<pos:position pos:line="17" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="22">"PDU %x:  Created %x\n"<pos:position pos:line="17" pos:column="45"/></literal></expr></argument>, <argument><expr><operator pos:line="17" pos:column="47">(<pos:position pos:line="17" pos:column="48"/></operator><name pos:line="17" pos:column="48">unsigned<pos:position pos:line="17" pos:column="56"/></name> <name pos:line="17" pos:column="57">int<pos:position pos:line="17" pos:column="60"/></name><operator pos:line="17" pos:column="60">)<pos:position pos:line="17" pos:column="61"/></operator> <name pos:line="17" pos:column="62">Src<pos:position pos:line="17" pos:column="65"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="67">(<pos:position pos:line="17" pos:column="68"/></operator><name pos:line="17" pos:column="68">unsigned<pos:position pos:line="17" pos:column="76"/></name> <name pos:line="17" pos:column="77">int<pos:position pos:line="17" pos:column="80"/></name><operator pos:line="17" pos:column="80">)<pos:position pos:line="17" pos:column="81"/></operator> <name pos:line="17" pos:column="82">Dest<pos:position pos:line="17" pos:column="86"/></name></expr></argument>)<pos:position pos:line="17" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="88"/></expr_stmt>
<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif<pos:position pos:line="18" pos:column="7"/></cpp:directive></cpp:endif>
    <return pos:line="19" pos:column="5">return <expr><operator pos:line="19" pos:column="12">(<pos:position pos:line="19" pos:column="13"/></operator><name pos:line="19" pos:column="13">Dest<pos:position pos:line="19" pos:column="17"/></name><operator pos:line="19" pos:column="17">)<pos:position pos:line="19" pos:column="18"/></operator></expr>;<pos:position pos:line="19" pos:column="19"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
