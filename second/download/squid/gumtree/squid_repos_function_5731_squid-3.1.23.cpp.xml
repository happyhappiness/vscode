<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5731_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type>
<name pos:line="2" pos:column="1">base64_decode<pos:position pos:line="2" pos:column="14"/></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><specifier pos:line="2" pos:column="15">const<pos:position pos:line="2" pos:column="20"/></specifier> <name pos:line="2" pos:column="21">char<pos:position pos:line="2" pos:column="25"/></name> <modifier pos:line="2" pos:column="26">*<pos:position pos:line="2" pos:column="27"/></modifier></type><name pos:line="2" pos:column="27">p<pos:position pos:line="2" pos:column="28"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="29"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><specifier pos:line="4" pos:column="5">static<pos:position pos:line="4" pos:column="11"/></specifier> <type><name pos:line="4" pos:column="12">char<pos:position pos:line="4" pos:column="16"/></name></type> <name><name pos:line="4" pos:column="17">result<pos:position pos:line="4" pos:column="23"/></name><index pos:line="4" pos:column="23">[<expr><name pos:line="4" pos:column="24">BASE64_RESULT_SZ<pos:position pos:line="4" pos:column="40"/></name></expr>]<pos:position pos:line="4" pos:column="41"/></index></name></decl>;<pos:position pos:line="4" pos:column="42"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">j<pos:position pos:line="5" pos:column="10"/></name></decl>;<pos:position pos:line="5" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">c<pos:position pos:line="6" pos:column="10"/></name></decl>;<pos:position pos:line="6" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">long<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">val<pos:position pos:line="7" pos:column="13"/></name></decl>;<pos:position pos:line="7" pos:column="14"/></decl_stmt>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><operator pos:line="8" pos:column="9">!<pos:position pos:line="8" pos:column="10"/></operator><name pos:line="8" pos:column="10">p<pos:position pos:line="8" pos:column="11"/></name></expr>)<pos:position pos:line="8" pos:column="12"/></condition><then pos:line="8" pos:column="12">
        <block type="pseudo"><return pos:line="9" pos:column="9">return <expr><name pos:line="9" pos:column="16">NULL<pos:position pos:line="9" pos:column="20"/></name></expr>;<pos:position pos:line="9" pos:column="21"/></return></block></then></if>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><operator pos:line="10" pos:column="9">!<pos:position pos:line="10" pos:column="10"/></operator><name pos:line="10" pos:column="10">base64_initialized<pos:position pos:line="10" pos:column="28"/></name></expr>)<pos:position pos:line="10" pos:column="29"/></condition><then pos:line="10" pos:column="29">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="9">base64_init<pos:position pos:line="11" pos:column="20"/></name><argument_list pos:line="11" pos:column="20">()<pos:position pos:line="11" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="23"/></expr_stmt></block></then></if>
    <expr_stmt><expr><name pos:line="12" pos:column="5">val<pos:position pos:line="12" pos:column="8"/></name> <operator pos:line="12" pos:column="9">=<pos:position pos:line="12" pos:column="10"/></operator> <name pos:line="12" pos:column="11">c<pos:position pos:line="12" pos:column="12"/></name> <operator pos:line="12" pos:column="13">=<pos:position pos:line="12" pos:column="14"/></operator> <literal type="number" pos:line="12" pos:column="15">0<pos:position pos:line="12" pos:column="16"/></literal></expr>;<pos:position pos:line="12" pos:column="17"/></expr_stmt>
    <for pos:line="13" pos:column="5">for <control pos:line="13" pos:column="9">(<init><expr><name pos:line="13" pos:column="10">j<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">=<pos:position pos:line="13" pos:column="13"/></operator> <literal type="number" pos:line="13" pos:column="14">0<pos:position pos:line="13" pos:column="15"/></literal></expr>;<pos:position pos:line="13" pos:column="16"/></init> <condition><expr><operator pos:line="13" pos:column="17">*<pos:position pos:line="13" pos:column="18"/></operator><name pos:line="13" pos:column="18">p<pos:position pos:line="13" pos:column="19"/></name> <operator pos:line="13" pos:column="20">&amp;&amp;<pos:position pos:line="13" pos:column="30"/></operator> <name pos:line="13" pos:column="23">j<pos:position pos:line="13" pos:column="24"/></name> <operator pos:line="13" pos:column="25">+<pos:position pos:line="13" pos:column="26"/></operator> <literal type="number" pos:line="13" pos:column="27">4<pos:position pos:line="13" pos:column="28"/></literal> <operator pos:line="13" pos:column="29">&lt;<pos:position pos:line="13" pos:column="33"/></operator> <name pos:line="13" pos:column="31">BASE64_RESULT_SZ<pos:position pos:line="13" pos:column="47"/></name></expr>;<pos:position pos:line="13" pos:column="48"/></condition> <incr><expr><name pos:line="13" pos:column="49">p<pos:position pos:line="13" pos:column="50"/></name><operator pos:line="13" pos:column="50">++<pos:position pos:line="13" pos:column="52"/></operator></expr></incr>)<pos:position pos:line="13" pos:column="53"/></control> <block pos:line="13" pos:column="54">{
        <decl_stmt><decl><type><name pos:line="14" pos:column="9">unsigned<pos:position pos:line="14" pos:column="17"/></name> <name pos:line="14" pos:column="18">int<pos:position pos:line="14" pos:column="21"/></name></type> <name pos:line="14" pos:column="22">k<pos:position pos:line="14" pos:column="23"/></name> <init pos:line="14" pos:column="24">= <expr><operator pos:line="14" pos:column="26">(<pos:position pos:line="14" pos:column="27"/></operator><operator pos:line="14" pos:column="27">(<pos:position pos:line="14" pos:column="28"/></operator><name pos:line="14" pos:column="28">unsigned<pos:position pos:line="14" pos:column="36"/></name> <name pos:line="14" pos:column="37">char<pos:position pos:line="14" pos:column="41"/></name><operator pos:line="14" pos:column="41">)<pos:position pos:line="14" pos:column="42"/></operator> <operator pos:line="14" pos:column="43">*<pos:position pos:line="14" pos:column="44"/></operator><name pos:line="14" pos:column="44">p<pos:position pos:line="14" pos:column="45"/></name><operator pos:line="14" pos:column="45">)<pos:position pos:line="14" pos:column="46"/></operator> <operator pos:line="14" pos:column="47">%<pos:position pos:line="14" pos:column="48"/></operator> <name pos:line="14" pos:column="49">BASE64_VALUE_SZ<pos:position pos:line="14" pos:column="64"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="65"/></decl_stmt>
        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name><name pos:line="15" pos:column="13">base64_value<pos:position pos:line="15" pos:column="25"/></name><index pos:line="15" pos:column="25">[<expr><name pos:line="15" pos:column="26">k<pos:position pos:line="15" pos:column="27"/></name></expr>]<pos:position pos:line="15" pos:column="28"/></index></name> <operator pos:line="15" pos:column="29">&lt;<pos:position pos:line="15" pos:column="33"/></operator> <literal type="number" pos:line="15" pos:column="31">0<pos:position pos:line="15" pos:column="32"/></literal></expr>)<pos:position pos:line="15" pos:column="33"/></condition><then pos:line="15" pos:column="33">
            <block type="pseudo"><continue pos:line="16" pos:column="13">continue;<pos:position pos:line="16" pos:column="22"/></continue></block></then></if>
        <expr_stmt><expr><name pos:line="17" pos:column="9">val<pos:position pos:line="17" pos:column="12"/></name> <operator pos:line="17" pos:column="13">&lt;&lt;=<pos:position pos:line="17" pos:column="22"/></operator> <literal type="number" pos:line="17" pos:column="17">6<pos:position pos:line="17" pos:column="18"/></literal></expr>;<pos:position pos:line="17" pos:column="19"/></expr_stmt>
        <expr_stmt><expr><name pos:line="18" pos:column="9">val<pos:position pos:line="18" pos:column="12"/></name> <operator pos:line="18" pos:column="13">+=<pos:position pos:line="18" pos:column="15"/></operator> <name><name pos:line="18" pos:column="16">base64_value<pos:position pos:line="18" pos:column="28"/></name><index pos:line="18" pos:column="28">[<expr><name pos:line="18" pos:column="29">k<pos:position pos:line="18" pos:column="30"/></name></expr>]<pos:position pos:line="18" pos:column="31"/></index></name></expr>;<pos:position pos:line="18" pos:column="32"/></expr_stmt>
        <if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><operator pos:line="19" pos:column="13">++<pos:position pos:line="19" pos:column="15"/></operator><name pos:line="19" pos:column="15">c<pos:position pos:line="19" pos:column="16"/></name> <operator pos:line="19" pos:column="17">&lt;<pos:position pos:line="19" pos:column="21"/></operator> <literal type="number" pos:line="19" pos:column="19">4<pos:position pos:line="19" pos:column="20"/></literal></expr>)<pos:position pos:line="19" pos:column="21"/></condition><then pos:line="19" pos:column="21">
            <block type="pseudo"><continue pos:line="20" pos:column="13">continue;<pos:position pos:line="20" pos:column="22"/></continue></block></then></if>
        <comment type="block" pos:line="21" pos:column="9">/* One quantum of four encoding characters/24 bit */</comment>
        <expr_stmt><expr><name><name pos:line="22" pos:column="9">result<pos:position pos:line="22" pos:column="15"/></name><index pos:line="22" pos:column="15">[<expr><name pos:line="22" pos:column="16">j<pos:position pos:line="22" pos:column="17"/></name><operator pos:line="22" pos:column="17">++<pos:position pos:line="22" pos:column="19"/></operator></expr>]<pos:position pos:line="22" pos:column="20"/></index></name> <operator pos:line="22" pos:column="21">=<pos:position pos:line="22" pos:column="22"/></operator> <operator pos:line="22" pos:column="23">(<pos:position pos:line="22" pos:column="24"/></operator><name pos:line="22" pos:column="24">val<pos:position pos:line="22" pos:column="27"/></name> <operator pos:line="22" pos:column="28">&gt;&gt;<pos:position pos:line="22" pos:column="33"/></operator> <literal type="number" pos:line="22" pos:column="31">16<pos:position pos:line="22" pos:column="33"/></literal><operator pos:line="22" pos:column="33">)<pos:position pos:line="22" pos:column="34"/></operator> <operator pos:line="22" pos:column="35">&amp;<pos:position pos:line="22" pos:column="40"/></operator> <literal type="number" pos:line="22" pos:column="37">0xff<pos:position pos:line="22" pos:column="41"/></literal></expr>;<pos:position pos:line="22" pos:column="42"/></expr_stmt>	<comment type="block" pos:line="22" pos:column="49">/* High 8 bits */</comment>
        <expr_stmt><expr><name><name pos:line="23" pos:column="9">result<pos:position pos:line="23" pos:column="15"/></name><index pos:line="23" pos:column="15">[<expr><name pos:line="23" pos:column="16">j<pos:position pos:line="23" pos:column="17"/></name><operator pos:line="23" pos:column="17">++<pos:position pos:line="23" pos:column="19"/></operator></expr>]<pos:position pos:line="23" pos:column="20"/></index></name> <operator pos:line="23" pos:column="21">=<pos:position pos:line="23" pos:column="22"/></operator> <operator pos:line="23" pos:column="23">(<pos:position pos:line="23" pos:column="24"/></operator><name pos:line="23" pos:column="24">val<pos:position pos:line="23" pos:column="27"/></name> <operator pos:line="23" pos:column="28">&gt;&gt;<pos:position pos:line="23" pos:column="33"/></operator> <literal type="number" pos:line="23" pos:column="31">8<pos:position pos:line="23" pos:column="32"/></literal><operator pos:line="23" pos:column="32">)<pos:position pos:line="23" pos:column="33"/></operator> <operator pos:line="23" pos:column="34">&amp;<pos:position pos:line="23" pos:column="39"/></operator> <literal type="number" pos:line="23" pos:column="36">0xff<pos:position pos:line="23" pos:column="40"/></literal></expr>;<pos:position pos:line="23" pos:column="41"/></expr_stmt>	<comment type="block" pos:line="23" pos:column="49">/* Mid 8 bits */</comment>
        <expr_stmt><expr><name><name pos:line="24" pos:column="9">result<pos:position pos:line="24" pos:column="15"/></name><index pos:line="24" pos:column="15">[<expr><name pos:line="24" pos:column="16">j<pos:position pos:line="24" pos:column="17"/></name><operator pos:line="24" pos:column="17">++<pos:position pos:line="24" pos:column="19"/></operator></expr>]<pos:position pos:line="24" pos:column="20"/></index></name> <operator pos:line="24" pos:column="21">=<pos:position pos:line="24" pos:column="22"/></operator> <name pos:line="24" pos:column="23">val<pos:position pos:line="24" pos:column="26"/></name> <operator pos:line="24" pos:column="27">&amp;<pos:position pos:line="24" pos:column="32"/></operator> <literal type="number" pos:line="24" pos:column="29">0xff<pos:position pos:line="24" pos:column="33"/></literal></expr>;<pos:position pos:line="24" pos:column="34"/></expr_stmt>	<comment type="block" pos:line="24" pos:column="41">/* Low 8 bits */</comment>
        <expr_stmt><expr><name pos:line="25" pos:column="9">val<pos:position pos:line="25" pos:column="12"/></name> <operator pos:line="25" pos:column="13">=<pos:position pos:line="25" pos:column="14"/></operator> <name pos:line="25" pos:column="15">c<pos:position pos:line="25" pos:column="16"/></name> <operator pos:line="25" pos:column="17">=<pos:position pos:line="25" pos:column="18"/></operator> <literal type="number" pos:line="25" pos:column="19">0<pos:position pos:line="25" pos:column="20"/></literal></expr>;<pos:position pos:line="25" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="26" pos:column="6"/></block></for>
    <expr_stmt><expr><name><name pos:line="27" pos:column="5">result<pos:position pos:line="27" pos:column="11"/></name><index pos:line="27" pos:column="11">[<expr><name pos:line="27" pos:column="12">j<pos:position pos:line="27" pos:column="13"/></name></expr>]<pos:position pos:line="27" pos:column="14"/></index></name> <operator pos:line="27" pos:column="15">=<pos:position pos:line="27" pos:column="16"/></operator> <literal type="number" pos:line="27" pos:column="17">0<pos:position pos:line="27" pos:column="18"/></literal></expr>;<pos:position pos:line="27" pos:column="19"/></expr_stmt>
    <return pos:line="28" pos:column="5">return <expr><name pos:line="28" pos:column="12">result<pos:position pos:line="28" pos:column="18"/></name></expr>;<pos:position pos:line="28" pos:column="19"/></return>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
