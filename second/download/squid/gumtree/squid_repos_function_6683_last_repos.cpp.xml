<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6683_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Snmp<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">Inquirer<pos:position pos:line="2" pos:column="15"/></name><operator pos:line="2" pos:column="15">::<pos:position pos:line="2" pos:column="17"/></operator><name pos:line="2" pos:column="17">sendResponse<pos:position pos:line="2" pos:column="29"/></name></name><parameter_list pos:line="2" pos:column="29">()<pos:position pos:line="2" pos:column="31"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">49<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">5<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="19">HERE<pos:position pos:line="4" pos:column="23"/></name></expr></argument>)<pos:position pos:line="4" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="5" pos:column="5">aggrPdu<pos:position pos:line="5" pos:column="12"/></name><operator pos:line="5" pos:column="12">.<pos:position pos:line="5" pos:column="13"/></operator><name pos:line="5" pos:column="13">fixAggregate<pos:position pos:line="5" pos:column="25"/></name></name><argument_list pos:line="5" pos:column="25">()<pos:position pos:line="5" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="6" pos:column="5">aggrPdu<pos:position pos:line="6" pos:column="12"/></name><operator pos:line="6" pos:column="12">.<pos:position pos:line="6" pos:column="13"/></operator><name pos:line="6" pos:column="13">command<pos:position pos:line="6" pos:column="20"/></name></name> <operator pos:line="6" pos:column="21">=<pos:position pos:line="6" pos:column="22"/></operator> <name pos:line="6" pos:column="23">SNMP_PDU_RESPONSE<pos:position pos:line="6" pos:column="40"/></name></expr>;<pos:position pos:line="6" pos:column="41"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">u_char<pos:position pos:line="7" pos:column="11"/></name></type> <name><name pos:line="7" pos:column="12">buffer<pos:position pos:line="7" pos:column="18"/></name><index pos:line="7" pos:column="18">[<expr><name pos:line="7" pos:column="19">SNMP_REQUEST_SIZE<pos:position pos:line="7" pos:column="36"/></name></expr>]<pos:position pos:line="7" pos:column="37"/></index></name></decl>;<pos:position pos:line="7" pos:column="38"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">len<pos:position pos:line="8" pos:column="12"/></name> <init pos:line="8" pos:column="13">= <expr><sizeof pos:line="8" pos:column="15">sizeof<argument_list pos:line="8" pos:column="21">(<argument><expr><name pos:line="8" pos:column="22">buffer<pos:position pos:line="8" pos:column="28"/></name></expr></argument>)<pos:position pos:line="8" pos:column="29"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="8" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="9" pos:column="5">Snmp<pos:position pos:line="9" pos:column="9"/></name><operator pos:line="9" pos:column="9">::<pos:position pos:line="9" pos:column="11"/></operator><name pos:line="9" pos:column="11">Request<pos:position pos:line="9" pos:column="18"/></name></name><modifier pos:line="9" pos:column="18">&amp;<pos:position pos:line="9" pos:column="23"/></modifier></type> <name pos:line="9" pos:column="20">req<pos:position pos:line="9" pos:column="23"/></name> <init pos:line="9" pos:column="24">= <expr><cast type="static" pos:line="9" pos:column="26">static_cast<argument_list type="generic" pos:line="9" pos:column="37">&lt;<argument><expr><name><name pos:line="9" pos:column="38">Snmp<pos:position pos:line="9" pos:column="42"/></name><operator pos:line="9" pos:column="42">::<pos:position pos:line="9" pos:column="44"/></operator><name pos:line="9" pos:column="44">Request<pos:position pos:line="9" pos:column="51"/></name></name><operator pos:line="9" pos:column="51">&amp;<pos:position pos:line="9" pos:column="56"/></operator></expr></argument>&gt;<pos:position pos:line="9" pos:column="56"/></argument_list><argument_list pos:line="9" pos:column="53">(<argument><expr><operator pos:line="9" pos:column="54">*<pos:position pos:line="9" pos:column="55"/></operator><name pos:line="9" pos:column="55">request<pos:position pos:line="9" pos:column="62"/></name></expr></argument>)<pos:position pos:line="9" pos:column="63"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="9" pos:column="64"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">snmp_build<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><operator pos:line="10" pos:column="16">&amp;<pos:position pos:line="10" pos:column="21"/></operator><name><name pos:line="10" pos:column="17">req<pos:position pos:line="10" pos:column="20"/></name><operator pos:line="10" pos:column="20">.<pos:position pos:line="10" pos:column="21"/></operator><name pos:line="10" pos:column="21">session<pos:position pos:line="10" pos:column="28"/></name></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="30">&amp;<pos:position pos:line="10" pos:column="35"/></operator><name pos:line="10" pos:column="31">aggrPdu<pos:position pos:line="10" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="40">buffer<pos:position pos:line="10" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="48">&amp;<pos:position pos:line="10" pos:column="53"/></operator><name pos:line="10" pos:column="49">len<pos:position pos:line="10" pos:column="52"/></name></expr></argument>)<pos:position pos:line="10" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">comm_udp_sendto<pos:position pos:line="11" pos:column="20"/></name><argument_list pos:line="11" pos:column="20">(<argument><expr><name><name pos:line="11" pos:column="21">conn<pos:position pos:line="11" pos:column="25"/></name><operator pos:line="11" pos:column="25">-&gt;<pos:position pos:line="11" pos:column="30"/></operator><name pos:line="11" pos:column="27">fd<pos:position pos:line="11" pos:column="29"/></name></name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="31">req<pos:position pos:line="11" pos:column="34"/></name><operator pos:line="11" pos:column="34">.<pos:position pos:line="11" pos:column="35"/></operator><name pos:line="11" pos:column="35">address<pos:position pos:line="11" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="44">buffer<pos:position pos:line="11" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="52">len<pos:position pos:line="11" pos:column="55"/></name></expr></argument>)<pos:position pos:line="11" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="57"/></expr_stmt>
}<pos:position pos:line="12" pos:column="2"/></block></function></unit>
