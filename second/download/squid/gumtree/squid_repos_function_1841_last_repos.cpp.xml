<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1841_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">FwdState<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">retryOrBail<pos:position pos:line="2" pos:column="22"/></name></name><parameter_list pos:line="2" pos:column="22">()<pos:position pos:line="2" pos:column="24"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><call><name pos:line="4" pos:column="9">checkRetry<pos:position pos:line="4" pos:column="19"/></name><argument_list pos:line="4" pos:column="19">()<pos:position pos:line="4" pos:column="21"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="22"/></condition><then pos:line="4" pos:column="22"> <block pos:line="4" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="5" pos:column="9">debugs<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">(<argument><expr><literal type="number" pos:line="5" pos:column="16">17<pos:position pos:line="5" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="20">3<pos:position pos:line="5" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="5" pos:column="23">HERE<pos:position pos:line="5" pos:column="27"/></name> <operator pos:line="5" pos:column="28">&lt;&lt;<pos:position pos:line="5" pos:column="36"/></operator> <literal type="string" pos:line="5" pos:column="31">"re-forwarding ("<pos:position pos:line="5" pos:column="48"/></literal> <operator pos:line="5" pos:column="49">&lt;&lt;<pos:position pos:line="5" pos:column="57"/></operator> <name pos:line="5" pos:column="52">n_tries<pos:position pos:line="5" pos:column="59"/></name> <operator pos:line="5" pos:column="60">&lt;&lt;<pos:position pos:line="5" pos:column="68"/></operator> <literal type="string" pos:line="5" pos:column="63">" tries, "<pos:position pos:line="5" pos:column="73"/></literal> <operator pos:line="5" pos:column="74">&lt;&lt;<pos:position pos:line="5" pos:column="82"/></operator> <operator pos:line="5" pos:column="77">(<pos:position pos:line="5" pos:column="78"/></operator><name pos:line="5" pos:column="78">squid_curtime<pos:position pos:line="5" pos:column="91"/></name> <operator pos:line="5" pos:column="92">-<pos:position pos:line="5" pos:column="93"/></operator> <name pos:line="5" pos:column="94">start_t<pos:position pos:line="5" pos:column="101"/></name><operator pos:line="5" pos:column="101">)<pos:position pos:line="5" pos:column="102"/></operator> <operator pos:line="5" pos:column="103">&lt;&lt;<pos:position pos:line="5" pos:column="111"/></operator> <literal type="string" pos:line="5" pos:column="106">" secs)"<pos:position pos:line="5" pos:column="114"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="115"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="116"/></expr_stmt>
        <comment type="line" pos:line="6" pos:column="9">// we should retry the same destination if it failed due to pconn race</comment>
        <if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">pconnRace<pos:position pos:line="7" pos:column="22"/></name> <operator pos:line="7" pos:column="23">==<pos:position pos:line="7" pos:column="25"/></operator> <name pos:line="7" pos:column="26">raceHappened<pos:position pos:line="7" pos:column="38"/></name></expr>)<pos:position pos:line="7" pos:column="39"/></condition><then pos:line="7" pos:column="39">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="8" pos:column="13">debugs<pos:position pos:line="8" pos:column="19"/></name><argument_list pos:line="8" pos:column="19">(<argument><expr><literal type="number" pos:line="8" pos:column="20">17<pos:position pos:line="8" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="24">4<pos:position pos:line="8" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="27">HERE<pos:position pos:line="8" pos:column="31"/></name> <operator pos:line="8" pos:column="32">&lt;&lt;<pos:position pos:line="8" pos:column="40"/></operator> <literal type="string" pos:line="8" pos:column="35">"retrying the same destination"<pos:position pos:line="8" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="68"/></expr_stmt></block></then>
        <else pos:line="9" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="10" pos:column="13">serverDestinations<pos:position pos:line="10" pos:column="31"/></name><operator pos:line="10" pos:column="31">.<pos:position pos:line="10" pos:column="32"/></operator><name pos:line="10" pos:column="32">erase<pos:position pos:line="10" pos:column="37"/></name></name><argument_list pos:line="10" pos:column="37">(<argument><expr><call><name><name pos:line="10" pos:column="38">serverDestinations<pos:position pos:line="10" pos:column="56"/></name><operator pos:line="10" pos:column="56">.<pos:position pos:line="10" pos:column="57"/></operator><name pos:line="10" pos:column="57">begin<pos:position pos:line="10" pos:column="62"/></name></name><argument_list pos:line="10" pos:column="62">()<pos:position pos:line="10" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="66"/></expr_stmt></block></else></if> <comment type="line" pos:line="10" pos:column="67">// last one failed. try another.</comment>
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">startConnectionOrFail<pos:position pos:line="11" pos:column="30"/></name><argument_list pos:line="11" pos:column="30">()<pos:position pos:line="11" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="33"/></expr_stmt>
        <return pos:line="12" pos:column="9">return;<pos:position pos:line="12" pos:column="16"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="15" pos:column="5">// TODO: should we call completed() here and move doneWithRetries there?</comment>
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">doneWithRetries<pos:position pos:line="16" pos:column="20"/></name><argument_list pos:line="16" pos:column="20">()<pos:position pos:line="16" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="23"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="18" pos:column="5">request<pos:position pos:line="18" pos:column="12"/></name><operator pos:line="18" pos:column="12">-&gt;<pos:position pos:line="18" pos:column="17"/></operator><name pos:line="18" pos:column="14">hier<pos:position pos:line="18" pos:column="18"/></name><operator pos:line="18" pos:column="18">.<pos:position pos:line="18" pos:column="19"/></operator><name pos:line="18" pos:column="19">stopPeerClock<pos:position pos:line="18" pos:column="32"/></name></name><argument_list pos:line="18" pos:column="32">(<argument><expr><literal type="boolean" pos:line="18" pos:column="33">false<pos:position pos:line="18" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="40"/></expr_stmt>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">self<pos:position pos:line="20" pos:column="13"/></name> <operator pos:line="20" pos:column="14">!=<pos:position pos:line="20" pos:column="16"/></operator> <name pos:line="20" pos:column="17">NULL<pos:position pos:line="20" pos:column="21"/></name> <operator pos:line="20" pos:column="22">&amp;&amp;<pos:position pos:line="20" pos:column="32"/></operator> <operator pos:line="20" pos:column="25">!<pos:position pos:line="20" pos:column="26"/></operator><name pos:line="20" pos:column="26">err<pos:position pos:line="20" pos:column="29"/></name> <operator pos:line="20" pos:column="30">&amp;&amp;<pos:position pos:line="20" pos:column="40"/></operator> <name pos:line="20" pos:column="33">shutting_down<pos:position pos:line="20" pos:column="46"/></name> <operator pos:line="20" pos:column="47">&amp;&amp;<pos:position pos:line="20" pos:column="57"/></operator> <call><name><name pos:line="20" pos:column="50">entry<pos:position pos:line="20" pos:column="55"/></name><operator pos:line="20" pos:column="55">-&gt;<pos:position pos:line="20" pos:column="60"/></operator><name pos:line="20" pos:column="57">isEmpty<pos:position pos:line="20" pos:column="64"/></name></name><argument_list pos:line="20" pos:column="64">()<pos:position pos:line="20" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="67"/></condition><then pos:line="20" pos:column="67"> <block pos:line="20" pos:column="68">{
        <decl_stmt><decl><type><name pos:line="21" pos:column="9">ErrorState<pos:position pos:line="21" pos:column="19"/></name> <modifier pos:line="21" pos:column="20">*<pos:position pos:line="21" pos:column="21"/></modifier></type><name pos:line="21" pos:column="21">anErr<pos:position pos:line="21" pos:column="26"/></name> <init pos:line="21" pos:column="27">= <expr><operator pos:line="21" pos:column="29">new<pos:position pos:line="21" pos:column="32"/></operator> <call><name pos:line="21" pos:column="33">ErrorState<pos:position pos:line="21" pos:column="43"/></name><argument_list pos:line="21" pos:column="43">(<argument><expr><name pos:line="21" pos:column="44">ERR_SHUTTING_DOWN<pos:position pos:line="21" pos:column="61"/></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="63">Http<pos:position pos:line="21" pos:column="67"/></name><operator pos:line="21" pos:column="67">::<pos:position pos:line="21" pos:column="69"/></operator><name pos:line="21" pos:column="69">scServiceUnavailable<pos:position pos:line="21" pos:column="89"/></name></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="91">request<pos:position pos:line="21" pos:column="98"/></name></expr></argument>)<pos:position pos:line="21" pos:column="99"/></argument_list></call></expr></init></decl>;<pos:position pos:line="21" pos:column="100"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="22" pos:column="9">errorAppendEntry<pos:position pos:line="22" pos:column="25"/></name><argument_list pos:line="22" pos:column="25">(<argument><expr><name pos:line="22" pos:column="26">entry<pos:position pos:line="22" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="33">anErr<pos:position pos:line="22" pos:column="38"/></name></expr></argument>)<pos:position pos:line="22" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="40"/></expr_stmt>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="25" pos:column="5">self<pos:position pos:line="25" pos:column="9"/></name> <operator pos:line="25" pos:column="10">=<pos:position pos:line="25" pos:column="11"/></operator> <name pos:line="25" pos:column="12">NULL<pos:position pos:line="25" pos:column="16"/></name></expr>;<pos:position pos:line="25" pos:column="17"/></expr_stmt>    <comment type="line" pos:line="25" pos:column="21">// refcounted</comment>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
