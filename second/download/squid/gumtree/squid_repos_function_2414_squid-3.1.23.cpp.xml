<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2414_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">FwdState<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">connectDone<pos:position pos:line="2" pos:column="22"/></name></name><parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><name pos:line="2" pos:column="23">int<pos:position pos:line="2" pos:column="26"/></name></type> <name pos:line="2" pos:column="27">aServerFD<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="38">const<pos:position pos:line="2" pos:column="43"/></specifier> <name pos:line="2" pos:column="44">DnsLookupDetails<pos:position pos:line="2" pos:column="60"/></name> <modifier pos:line="2" pos:column="61">&amp;<pos:position pos:line="2" pos:column="66"/></modifier></type><name pos:line="2" pos:column="62">dns<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="67">comm_err_t<pos:position pos:line="2" pos:column="77"/></name></type> <name pos:line="2" pos:column="78">status<pos:position pos:line="2" pos:column="84"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="86">int<pos:position pos:line="2" pos:column="89"/></name></type> <name pos:line="2" pos:column="90">xerrno<pos:position pos:line="2" pos:column="96"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="97"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">FwdServer<pos:position pos:line="4" pos:column="14"/></name> <modifier pos:line="4" pos:column="15">*<pos:position pos:line="4" pos:column="16"/></modifier></type><name pos:line="4" pos:column="16">fs<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><name pos:line="4" pos:column="21">servers<pos:position pos:line="4" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><name pos:line="5" pos:column="12">server_fd<pos:position pos:line="5" pos:column="21"/></name> <operator pos:line="5" pos:column="22">==<pos:position pos:line="5" pos:column="24"/></operator> <name pos:line="5" pos:column="25">aServerFD<pos:position pos:line="5" pos:column="34"/></name></expr></argument>)<pos:position pos:line="5" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="36"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="7" pos:column="5">request<pos:position pos:line="7" pos:column="12"/></name><operator pos:line="7" pos:column="12">-&gt;<pos:position pos:line="7" pos:column="17"/></operator><name pos:line="7" pos:column="14">recordLookup<pos:position pos:line="7" pos:column="26"/></name></name><argument_list pos:line="7" pos:column="26">(<argument><expr><name pos:line="7" pos:column="27">dns<pos:position pos:line="7" pos:column="30"/></name></expr></argument>)<pos:position pos:line="7" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="32"/></expr_stmt>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name><name pos:line="9" pos:column="9">Config<pos:position pos:line="9" pos:column="15"/></name><operator pos:line="9" pos:column="15">.<pos:position pos:line="9" pos:column="16"/></operator><name pos:line="9" pos:column="16">onoff<pos:position pos:line="9" pos:column="21"/></name><operator pos:line="9" pos:column="21">.<pos:position pos:line="9" pos:column="22"/></operator><name pos:line="9" pos:column="22">log_ip_on_direct<pos:position pos:line="9" pos:column="38"/></name></name> <operator pos:line="9" pos:column="39">&amp;&amp;<pos:position pos:line="9" pos:column="49"/></operator> <name pos:line="9" pos:column="42">status<pos:position pos:line="9" pos:column="48"/></name> <operator pos:line="9" pos:column="49">!=<pos:position pos:line="9" pos:column="51"/></operator> <name pos:line="9" pos:column="52">COMM_ERR_DNS<pos:position pos:line="9" pos:column="64"/></name> <operator pos:line="9" pos:column="65">&amp;&amp;<pos:position pos:line="9" pos:column="75"/></operator> <name><name pos:line="9" pos:column="68">fs<pos:position pos:line="9" pos:column="70"/></name><operator pos:line="9" pos:column="70">-&gt;<pos:position pos:line="9" pos:column="75"/></operator><name pos:line="9" pos:column="72">code<pos:position pos:line="9" pos:column="76"/></name></name> <operator pos:line="9" pos:column="77">==<pos:position pos:line="9" pos:column="79"/></operator> <name pos:line="9" pos:column="80">HIER_DIRECT<pos:position pos:line="9" pos:column="91"/></name></expr>)<pos:position pos:line="9" pos:column="92"/></condition><then pos:line="9" pos:column="92">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="9">updateHierarchyInfo<pos:position pos:line="10" pos:column="28"/></name><argument_list pos:line="10" pos:column="28">()<pos:position pos:line="10" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="31"/></expr_stmt></block></then></if>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">status<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">==<pos:position pos:line="12" pos:column="18"/></operator> <name pos:line="12" pos:column="19">COMM_ERR_DNS<pos:position pos:line="12" pos:column="31"/></name></expr>)<pos:position pos:line="12" pos:column="32"/></condition><then pos:line="12" pos:column="32"> <block pos:line="12" pos:column="33">{
        <comment type="block" pos:line="13" pos:column="9">/*
         * Only set the dont_retry flag if the DNS lookup fails on
         * a direct connection.  If DNS lookup fails when trying
         * a neighbor cache, we may want to retry another option.
         */</comment>

        <if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">NULL<pos:position pos:line="19" pos:column="17"/></name> <operator pos:line="19" pos:column="18">==<pos:position pos:line="19" pos:column="20"/></operator> <name><name pos:line="19" pos:column="21">fs<pos:position pos:line="19" pos:column="23"/></name><operator pos:line="19" pos:column="23">-&gt;<pos:position pos:line="19" pos:column="28"/></operator><name pos:line="19" pos:column="25">_peer<pos:position pos:line="19" pos:column="30"/></name></name></expr>)<pos:position pos:line="19" pos:column="31"/></condition><then pos:line="19" pos:column="31">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="20" pos:column="13">flags<pos:position pos:line="20" pos:column="18"/></name><operator pos:line="20" pos:column="18">.<pos:position pos:line="20" pos:column="19"/></operator><name pos:line="20" pos:column="19">dont_retry<pos:position pos:line="20" pos:column="29"/></name></name> <operator pos:line="20" pos:column="30">=<pos:position pos:line="20" pos:column="31"/></operator> <literal type="number" pos:line="20" pos:column="32">1<pos:position pos:line="20" pos:column="33"/></literal></expr>;<pos:position pos:line="20" pos:column="34"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name pos:line="22" pos:column="9">debugs<pos:position pos:line="22" pos:column="15"/></name><argument_list pos:line="22" pos:column="15">(<argument><expr><literal type="number" pos:line="22" pos:column="16">17<pos:position pos:line="22" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="20">4<pos:position pos:line="22" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="23">"fwdConnectDone: Unknown host: "<pos:position pos:line="22" pos:column="55"/></literal> <operator pos:line="22" pos:column="56">&lt;&lt;<pos:position pos:line="22" pos:column="64"/></operator> <call><name><name pos:line="22" pos:column="59">request<pos:position pos:line="22" pos:column="66"/></name><operator pos:line="22" pos:column="66">-&gt;<pos:position pos:line="22" pos:column="71"/></operator><name pos:line="22" pos:column="68">GetHost<pos:position pos:line="22" pos:column="75"/></name></name><argument_list pos:line="22" pos:column="75">()<pos:position pos:line="22" pos:column="77"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="79"/></expr_stmt>

        <decl_stmt><decl><type><name pos:line="24" pos:column="9">ErrorState<pos:position pos:line="24" pos:column="19"/></name> <modifier pos:line="24" pos:column="20">*<pos:position pos:line="24" pos:column="21"/></modifier><specifier pos:line="24" pos:column="21">const<pos:position pos:line="24" pos:column="26"/></specifier></type> <name pos:line="24" pos:column="27">anErr<pos:position pos:line="24" pos:column="32"/></name> <init pos:line="24" pos:column="33">= <expr><call><name pos:line="24" pos:column="35">makeConnectingError<pos:position pos:line="24" pos:column="54"/></name><argument_list pos:line="24" pos:column="54">(<argument><expr><name pos:line="24" pos:column="55">ERR_DNS_FAIL<pos:position pos:line="24" pos:column="67"/></name></expr></argument>)<pos:position pos:line="24" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="24" pos:column="69"/></decl_stmt>

        <expr_stmt><expr><name><name pos:line="26" pos:column="9">anErr<pos:position pos:line="26" pos:column="14"/></name><operator pos:line="26" pos:column="14">-&gt;<pos:position pos:line="26" pos:column="19"/></operator><name pos:line="26" pos:column="16">dnsError<pos:position pos:line="26" pos:column="24"/></name></name> <operator pos:line="26" pos:column="25">=<pos:position pos:line="26" pos:column="26"/></operator> <name><name pos:line="26" pos:column="27">dns<pos:position pos:line="26" pos:column="30"/></name><operator pos:line="26" pos:column="30">.<pos:position pos:line="26" pos:column="31"/></operator><name pos:line="26" pos:column="31">error<pos:position pos:line="26" pos:column="36"/></name></name></expr>;<pos:position pos:line="26" pos:column="37"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="28" pos:column="9">fail<pos:position pos:line="28" pos:column="13"/></name><argument_list pos:line="28" pos:column="13">(<argument><expr><name pos:line="28" pos:column="14">anErr<pos:position pos:line="28" pos:column="19"/></name></expr></argument>)<pos:position pos:line="28" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="21"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="30" pos:column="9">comm_close<pos:position pos:line="30" pos:column="19"/></name><argument_list pos:line="30" pos:column="19">(<argument><expr><name pos:line="30" pos:column="20">server_fd<pos:position pos:line="30" pos:column="29"/></name></expr></argument>)<pos:position pos:line="30" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="31" pos:column="6"/></block></then> <elseif pos:line="31" pos:column="7">else <if pos:line="31" pos:column="12">if <condition pos:line="31" pos:column="15">(<expr><name pos:line="31" pos:column="16">status<pos:position pos:line="31" pos:column="22"/></name> <operator pos:line="31" pos:column="23">!=<pos:position pos:line="31" pos:column="25"/></operator> <name pos:line="31" pos:column="26">COMM_OK<pos:position pos:line="31" pos:column="33"/></name></expr>)<pos:position pos:line="31" pos:column="34"/></condition><then pos:line="31" pos:column="34"> <block pos:line="31" pos:column="35">{
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">assert<pos:position pos:line="32" pos:column="15"/></name><argument_list pos:line="32" pos:column="15">(<argument><expr><name pos:line="32" pos:column="16">fs<pos:position pos:line="32" pos:column="18"/></name></expr></argument>)<pos:position pos:line="32" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="20"/></expr_stmt>
        <decl_stmt><decl><type><name pos:line="33" pos:column="9">ErrorState<pos:position pos:line="33" pos:column="19"/></name> <modifier pos:line="33" pos:column="20">*<pos:position pos:line="33" pos:column="21"/></modifier><specifier pos:line="33" pos:column="21">const<pos:position pos:line="33" pos:column="26"/></specifier></type> <name pos:line="33" pos:column="27">anErr<pos:position pos:line="33" pos:column="32"/></name> <init pos:line="33" pos:column="33">= <expr><call><name pos:line="33" pos:column="35">makeConnectingError<pos:position pos:line="33" pos:column="54"/></name><argument_list pos:line="33" pos:column="54">(<argument><expr><name pos:line="33" pos:column="55">ERR_CONNECT_FAIL<pos:position pos:line="33" pos:column="71"/></name></expr></argument>)<pos:position pos:line="33" pos:column="72"/></argument_list></call></expr></init></decl>;<pos:position pos:line="33" pos:column="73"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="34" pos:column="9">anErr<pos:position pos:line="34" pos:column="14"/></name><operator pos:line="34" pos:column="14">-&gt;<pos:position pos:line="34" pos:column="19"/></operator><name pos:line="34" pos:column="16">xerrno<pos:position pos:line="34" pos:column="22"/></name></name> <operator pos:line="34" pos:column="23">=<pos:position pos:line="34" pos:column="24"/></operator> <name pos:line="34" pos:column="25">xerrno<pos:position pos:line="34" pos:column="31"/></name></expr>;<pos:position pos:line="34" pos:column="32"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="36" pos:column="9">fail<pos:position pos:line="36" pos:column="13"/></name><argument_list pos:line="36" pos:column="13">(<argument><expr><name pos:line="36" pos:column="14">anErr<pos:position pos:line="36" pos:column="19"/></name></expr></argument>)<pos:position pos:line="36" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="21"/></expr_stmt>

        <if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name><name pos:line="38" pos:column="13">fs<pos:position pos:line="38" pos:column="15"/></name><operator pos:line="38" pos:column="15">-&gt;<pos:position pos:line="38" pos:column="20"/></operator><name pos:line="38" pos:column="17">_peer<pos:position pos:line="38" pos:column="22"/></name></name></expr>)<pos:position pos:line="38" pos:column="23"/></condition><then pos:line="38" pos:column="23">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="13">peerConnectFailed<pos:position pos:line="39" pos:column="30"/></name><argument_list pos:line="39" pos:column="30">(<argument><expr><name><name pos:line="39" pos:column="31">fs<pos:position pos:line="39" pos:column="33"/></name><operator pos:line="39" pos:column="33">-&gt;<pos:position pos:line="39" pos:column="38"/></operator><name pos:line="39" pos:column="35">_peer<pos:position pos:line="39" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="42"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name pos:line="41" pos:column="9">comm_close<pos:position pos:line="41" pos:column="19"/></name><argument_list pos:line="41" pos:column="19">(<argument><expr><name pos:line="41" pos:column="20">server_fd<pos:position pos:line="41" pos:column="29"/></name></expr></argument>)<pos:position pos:line="41" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="42" pos:column="6"/></block></then></if></elseif> <else pos:line="42" pos:column="7">else <block pos:line="42" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="43" pos:column="9">debugs<pos:position pos:line="43" pos:column="15"/></name><argument_list pos:line="43" pos:column="15">(<argument><expr><literal type="number" pos:line="43" pos:column="16">17<pos:position pos:line="43" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="20">3<pos:position pos:line="43" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="23">"fwdConnectDone: FD "<pos:position pos:line="43" pos:column="44"/></literal> <operator pos:line="43" pos:column="45">&lt;&lt;<pos:position pos:line="43" pos:column="53"/></operator> <name pos:line="43" pos:column="48">server_fd<pos:position pos:line="43" pos:column="57"/></name> <operator pos:line="43" pos:column="58">&lt;&lt;<pos:position pos:line="43" pos:column="66"/></operator> <literal type="string" pos:line="43" pos:column="61">": '"<pos:position pos:line="43" pos:column="66"/></literal> <operator pos:line="43" pos:column="67">&lt;&lt;<pos:position pos:line="43" pos:column="75"/></operator> <call><name><name pos:line="43" pos:column="70">entry<pos:position pos:line="43" pos:column="75"/></name><operator pos:line="43" pos:column="75">-&gt;<pos:position pos:line="43" pos:column="80"/></operator><name pos:line="43" pos:column="77">url<pos:position pos:line="43" pos:column="80"/></name></name><argument_list pos:line="43" pos:column="80">()<pos:position pos:line="43" pos:column="82"/></argument_list></call> <operator pos:line="43" pos:column="83">&lt;&lt;<pos:position pos:line="43" pos:column="91"/></operator> <literal type="string" pos:line="43" pos:column="86">"'"<pos:position pos:line="43" pos:column="89"/></literal></expr></argument> )<pos:position pos:line="43" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="92"/></expr_stmt>

        <if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><name><name pos:line="45" pos:column="13">fs<pos:position pos:line="45" pos:column="15"/></name><operator pos:line="45" pos:column="15">-&gt;<pos:position pos:line="45" pos:column="20"/></operator><name pos:line="45" pos:column="17">_peer<pos:position pos:line="45" pos:column="22"/></name></name></expr>)<pos:position pos:line="45" pos:column="23"/></condition><then pos:line="45" pos:column="23">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="46" pos:column="13">peerConnectSucceded<pos:position pos:line="46" pos:column="32"/></name><argument_list pos:line="46" pos:column="32">(<argument><expr><name><name pos:line="46" pos:column="33">fs<pos:position pos:line="46" pos:column="35"/></name><operator pos:line="46" pos:column="35">-&gt;<pos:position pos:line="46" pos:column="40"/></operator><name pos:line="46" pos:column="37">_peer<pos:position pos:line="46" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="44"/></expr_stmt></block></then></if>

<cpp:if pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">if<pos:position pos:line="48" pos:column="4"/></cpp:directive> <expr><name pos:line="48" pos:column="5">USE_SSL<pos:position pos:line="48" pos:column="12"/></name></expr></cpp:if>

        <if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><operator pos:line="50" pos:column="13">(<pos:position pos:line="50" pos:column="14"/></operator><name><name pos:line="50" pos:column="14">fs<pos:position pos:line="50" pos:column="16"/></name><operator pos:line="50" pos:column="16">-&gt;<pos:position pos:line="50" pos:column="21"/></operator><name pos:line="50" pos:column="18">_peer<pos:position pos:line="50" pos:column="23"/></name></name> <operator pos:line="50" pos:column="24">&amp;&amp;<pos:position pos:line="50" pos:column="34"/></operator> <name><name pos:line="50" pos:column="27">fs<pos:position pos:line="50" pos:column="29"/></name><operator pos:line="50" pos:column="29">-&gt;<pos:position pos:line="50" pos:column="34"/></operator><name pos:line="50" pos:column="31">_peer<pos:position pos:line="50" pos:column="36"/></name><operator pos:line="50" pos:column="36">-&gt;<pos:position pos:line="50" pos:column="41"/></operator><name pos:line="50" pos:column="38">use_ssl<pos:position pos:line="50" pos:column="45"/></name></name><operator pos:line="50" pos:column="45">)<pos:position pos:line="50" pos:column="46"/></operator> <operator pos:line="50" pos:column="47">||<pos:position pos:line="50" pos:column="49"/></operator>
                <operator pos:line="51" pos:column="17">(<pos:position pos:line="51" pos:column="18"/></operator><operator pos:line="51" pos:column="18">!<pos:position pos:line="51" pos:column="19"/></operator><name><name pos:line="51" pos:column="19">fs<pos:position pos:line="51" pos:column="21"/></name><operator pos:line="51" pos:column="21">-&gt;<pos:position pos:line="51" pos:column="26"/></operator><name pos:line="51" pos:column="23">_peer<pos:position pos:line="51" pos:column="28"/></name></name> <operator pos:line="51" pos:column="29">&amp;&amp;<pos:position pos:line="51" pos:column="39"/></operator> <name><name pos:line="51" pos:column="32">request<pos:position pos:line="51" pos:column="39"/></name><operator pos:line="51" pos:column="39">-&gt;<pos:position pos:line="51" pos:column="44"/></operator><name pos:line="51" pos:column="41">protocol<pos:position pos:line="51" pos:column="49"/></name></name> <operator pos:line="51" pos:column="50">==<pos:position pos:line="51" pos:column="52"/></operator> <name pos:line="51" pos:column="53">PROTO_HTTPS<pos:position pos:line="51" pos:column="64"/></name><operator pos:line="51" pos:column="64">)<pos:position pos:line="51" pos:column="65"/></operator></expr>)<pos:position pos:line="51" pos:column="66"/></condition><then pos:line="51" pos:column="66"> <block pos:line="51" pos:column="67">{
            <if pos:line="52" pos:column="13">if <condition pos:line="52" pos:column="16">(<expr><name><name pos:line="52" pos:column="17">fs<pos:position pos:line="52" pos:column="19"/></name><operator pos:line="52" pos:column="19">-&gt;<pos:position pos:line="52" pos:column="24"/></operator><name pos:line="52" pos:column="21">code<pos:position pos:line="52" pos:column="25"/></name></name> <operator pos:line="52" pos:column="26">!=<pos:position pos:line="52" pos:column="28"/></operator> <name pos:line="52" pos:column="29">PINNED<pos:position pos:line="52" pos:column="35"/></name></expr>)<pos:position pos:line="52" pos:column="36"/></condition><then pos:line="52" pos:column="36"> <block pos:line="52" pos:column="37">{
                <expr_stmt><expr><call><name pos:line="53" pos:column="17">initiateSSL<pos:position pos:line="53" pos:column="28"/></name><argument_list pos:line="53" pos:column="28">()<pos:position pos:line="53" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="31"/></expr_stmt>
                <return pos:line="54" pos:column="17">return;<pos:position pos:line="54" pos:column="24"/></return>
            }<pos:position pos:line="55" pos:column="14"/></block></then></if>
        }<pos:position pos:line="56" pos:column="10"/></block></then></if>

<cpp:endif pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">endif<pos:position pos:line="58" pos:column="7"/></cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name pos:line="59" pos:column="9">dispatch<pos:position pos:line="59" pos:column="17"/></name><argument_list pos:line="59" pos:column="17">()<pos:position pos:line="59" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="60" pos:column="6"/></block></else></if>
}<pos:position pos:line="61" pos:column="2"/></block></function></unit>
