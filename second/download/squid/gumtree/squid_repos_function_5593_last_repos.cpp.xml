<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5593_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Comm<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">ConnOpener<pos:position pos:line="2" pos:column="17"/></name><operator pos:line="2" pos:column="17">::<pos:position pos:line="2" pos:column="19"/></operator><name pos:line="2" pos:column="19">lookupLocalAddress<pos:position pos:line="2" pos:column="37"/></name></name><parameter_list pos:line="2" pos:column="37">()<pos:position pos:line="2" pos:column="39"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">struct<pos:position pos:line="4" pos:column="11"/></name> <name pos:line="4" pos:column="12">addrinfo<pos:position pos:line="4" pos:column="20"/></name></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier></type><name pos:line="4" pos:column="22">addr<pos:position pos:line="4" pos:column="26"/></name> <init pos:line="4" pos:column="27">= <expr><name pos:line="4" pos:column="29">NULL<pos:position pos:line="4" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="5" pos:column="5">Ip<pos:position pos:line="5" pos:column="7"/></name><operator pos:line="5" pos:column="7">::<pos:position pos:line="5" pos:column="9"/></operator><name pos:line="5" pos:column="9">Address<pos:position pos:line="5" pos:column="16"/></name><operator pos:line="5" pos:column="16">::<pos:position pos:line="5" pos:column="18"/></operator><name pos:line="5" pos:column="18">InitAddr<pos:position pos:line="5" pos:column="26"/></name></name><argument_list pos:line="5" pos:column="26">(<argument><expr><name pos:line="5" pos:column="27">addr<pos:position pos:line="5" pos:column="31"/></name></expr></argument>)<pos:position pos:line="5" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="33"/></expr_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><call><name pos:line="7" pos:column="9">getsockname<pos:position pos:line="7" pos:column="20"/></name><argument_list pos:line="7" pos:column="20">(<argument><expr><name><name pos:line="7" pos:column="21">conn_<pos:position pos:line="7" pos:column="26"/></name><operator pos:line="7" pos:column="26">-&gt;<pos:position pos:line="7" pos:column="31"/></operator><name pos:line="7" pos:column="28">fd<pos:position pos:line="7" pos:column="30"/></name></name></expr></argument>, <argument><expr><name><name pos:line="7" pos:column="32">addr<pos:position pos:line="7" pos:column="36"/></name><operator pos:line="7" pos:column="36">-&gt;<pos:position pos:line="7" pos:column="41"/></operator><name pos:line="7" pos:column="38">ai_addr<pos:position pos:line="7" pos:column="45"/></name></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="47">&amp;<pos:position pos:line="7" pos:column="52"/></operator><operator pos:line="7" pos:column="48">(<pos:position pos:line="7" pos:column="49"/></operator><name><name pos:line="7" pos:column="49">addr<pos:position pos:line="7" pos:column="53"/></name><operator pos:line="7" pos:column="53">-&gt;<pos:position pos:line="7" pos:column="58"/></operator><name pos:line="7" pos:column="55">ai_addrlen<pos:position pos:line="7" pos:column="65"/></name></name><operator pos:line="7" pos:column="65">)<pos:position pos:line="7" pos:column="66"/></operator></expr></argument>)<pos:position pos:line="7" pos:column="67"/></argument_list></call> <operator pos:line="7" pos:column="68">!=<pos:position pos:line="7" pos:column="70"/></operator> <literal type="number" pos:line="7" pos:column="71">0<pos:position pos:line="7" pos:column="72"/></literal></expr>)<pos:position pos:line="7" pos:column="73"/></condition><then pos:line="7" pos:column="73"> <block pos:line="7" pos:column="74">{
        <decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">xerrno<pos:position pos:line="8" pos:column="19"/></name> <init pos:line="8" pos:column="20">= <expr><name pos:line="8" pos:column="22">errno<pos:position pos:line="8" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="28"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">debugs<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><literal type="number" pos:line="9" pos:column="16">50<pos:position pos:line="9" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="20">DBG_IMPORTANT<pos:position pos:line="9" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="35">"ERROR: Failed to retrieve TCP/UDP details for socket: "<pos:position pos:line="9" pos:column="91"/></literal> <operator pos:line="9" pos:column="92">&lt;&lt;<pos:position pos:line="9" pos:column="100"/></operator> <name pos:line="9" pos:column="95">conn_<pos:position pos:line="9" pos:column="100"/></name> <operator pos:line="9" pos:column="101">&lt;&lt;<pos:position pos:line="9" pos:column="109"/></operator> <literal type="string" pos:line="9" pos:column="104">": "<pos:position pos:line="9" pos:column="108"/></literal> <operator pos:line="9" pos:column="109">&lt;&lt;<pos:position pos:line="9" pos:column="117"/></operator> <call><name pos:line="9" pos:column="112">xstrerr<pos:position pos:line="9" pos:column="119"/></name><argument_list pos:line="9" pos:column="119">(<argument><expr><name pos:line="9" pos:column="120">xerrno<pos:position pos:line="9" pos:column="126"/></name></expr></argument>)<pos:position pos:line="9" pos:column="127"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="128"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="129"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="10" pos:column="9">Ip<pos:position pos:line="10" pos:column="11"/></name><operator pos:line="10" pos:column="11">::<pos:position pos:line="10" pos:column="13"/></operator><name pos:line="10" pos:column="13">Address<pos:position pos:line="10" pos:column="20"/></name><operator pos:line="10" pos:column="20">::<pos:position pos:line="10" pos:column="22"/></operator><name pos:line="10" pos:column="22">FreeAddr<pos:position pos:line="10" pos:column="30"/></name></name><argument_list pos:line="10" pos:column="30">(<argument><expr><name pos:line="10" pos:column="31">addr<pos:position pos:line="10" pos:column="35"/></name></expr></argument>)<pos:position pos:line="10" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="37"/></expr_stmt>
        <return pos:line="11" pos:column="9">return;<pos:position pos:line="11" pos:column="16"/></return>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="14" pos:column="5">conn_<pos:position pos:line="14" pos:column="10"/></name><operator pos:line="14" pos:column="10">-&gt;<pos:position pos:line="14" pos:column="15"/></operator><name pos:line="14" pos:column="12">local<pos:position pos:line="14" pos:column="17"/></name></name> <operator pos:line="14" pos:column="18">=<pos:position pos:line="14" pos:column="19"/></operator> <operator pos:line="14" pos:column="20">*<pos:position pos:line="14" pos:column="21"/></operator><name pos:line="14" pos:column="21">addr<pos:position pos:line="14" pos:column="25"/></name></expr>;<pos:position pos:line="14" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="15" pos:column="5">Ip<pos:position pos:line="15" pos:column="7"/></name><operator pos:line="15" pos:column="7">::<pos:position pos:line="15" pos:column="9"/></operator><name pos:line="15" pos:column="9">Address<pos:position pos:line="15" pos:column="16"/></name><operator pos:line="15" pos:column="16">::<pos:position pos:line="15" pos:column="18"/></operator><name pos:line="15" pos:column="18">FreeAddr<pos:position pos:line="15" pos:column="26"/></name></name><argument_list pos:line="15" pos:column="26">(<argument><expr><name pos:line="15" pos:column="27">addr<pos:position pos:line="15" pos:column="31"/></name></expr></argument>)<pos:position pos:line="15" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">debugs<pos:position pos:line="16" pos:column="11"/></name><argument_list pos:line="16" pos:column="11">(<argument><expr><literal type="number" pos:line="16" pos:column="12">5<pos:position pos:line="16" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="15">6<pos:position pos:line="16" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="18">HERE<pos:position pos:line="16" pos:column="22"/></name> <operator pos:line="16" pos:column="23">&lt;&lt;<pos:position pos:line="16" pos:column="31"/></operator> <name pos:line="16" pos:column="26">conn_<pos:position pos:line="16" pos:column="31"/></name></expr></argument>)<pos:position pos:line="16" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="33"/></expr_stmt>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
