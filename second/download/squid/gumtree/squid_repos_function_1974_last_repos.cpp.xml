<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1974_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">store_client<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">moreToSend<pos:position pos:line="2" pos:column="25"/></name></name><parameter_list pos:line="2" pos:column="25">()<pos:position pos:line="2" pos:column="27"/></parameter_list> <specifier pos:line="2" pos:column="28">const<pos:position pos:line="2" pos:column="33"/></specifier>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name><name pos:line="4" pos:column="9">entry<pos:position pos:line="4" pos:column="14"/></name><operator pos:line="4" pos:column="14">-&gt;<pos:position pos:line="4" pos:column="19"/></operator><name pos:line="4" pos:column="16">store_status<pos:position pos:line="4" pos:column="28"/></name></name> <operator pos:line="4" pos:column="29">==<pos:position pos:line="4" pos:column="31"/></operator> <name pos:line="4" pos:column="32">STORE_PENDING<pos:position pos:line="4" pos:column="45"/></name></expr>)<pos:position pos:line="4" pos:column="46"/></condition><then pos:line="4" pos:column="46">
        <block type="pseudo"><return pos:line="5" pos:column="9">return <expr><literal type="boolean" pos:line="5" pos:column="16">true<pos:position pos:line="5" pos:column="20"/></literal></expr>;<pos:position pos:line="5" pos:column="21"/></return></block></then></if> <comment type="line" pos:line="5" pos:column="22">// there may be more coming</comment>

    <comment type="block" pos:line="7" pos:column="5">/* STORE_OK, including aborted entries: no more data is coming */</comment>

    <decl_stmt><decl><type><specifier pos:line="9" pos:column="5">const<pos:position pos:line="9" pos:column="10"/></specifier> <name pos:line="9" pos:column="11">int64_t<pos:position pos:line="9" pos:column="18"/></name></type> <name pos:line="9" pos:column="19">len<pos:position pos:line="9" pos:column="22"/></name> <init pos:line="9" pos:column="23">= <expr><call><name><name pos:line="9" pos:column="25">entry<pos:position pos:line="9" pos:column="30"/></name><operator pos:line="9" pos:column="30">-&gt;<pos:position pos:line="9" pos:column="35"/></operator><name pos:line="9" pos:column="32">objectLen<pos:position pos:line="9" pos:column="41"/></name></name><argument_list pos:line="9" pos:column="41">()<pos:position pos:line="9" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="44"/></decl_stmt>

    <comment type="line" pos:line="11" pos:column="5">// If we do not know the entry length, then we have to open the swap file.</comment>
    <decl_stmt><decl><type><specifier pos:line="12" pos:column="5">const<pos:position pos:line="12" pos:column="10"/></specifier> <name pos:line="12" pos:column="11">bool<pos:position pos:line="12" pos:column="15"/></name></type> <name pos:line="12" pos:column="16">canSwapIn<pos:position pos:line="12" pos:column="25"/></name> <init pos:line="12" pos:column="26">= <expr><name><name pos:line="12" pos:column="28">entry<pos:position pos:line="12" pos:column="33"/></name><operator pos:line="12" pos:column="33">-&gt;<pos:position pos:line="12" pos:column="38"/></operator><name pos:line="12" pos:column="35">swap_filen<pos:position pos:line="12" pos:column="45"/></name></name> <operator pos:line="12" pos:column="46">&gt;=<pos:position pos:line="12" pos:column="51"/></operator> <literal type="number" pos:line="12" pos:column="49">0<pos:position pos:line="12" pos:column="50"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="51"/></decl_stmt>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">len<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">&lt;<pos:position pos:line="13" pos:column="17"/></operator> <literal type="number" pos:line="13" pos:column="15">0<pos:position pos:line="13" pos:column="16"/></literal></expr>)<pos:position pos:line="13" pos:column="17"/></condition><then pos:line="13" pos:column="17">
        <block type="pseudo"><return pos:line="14" pos:column="9">return <expr><name pos:line="14" pos:column="16">canSwapIn<pos:position pos:line="14" pos:column="25"/></name></expr>;<pos:position pos:line="14" pos:column="26"/></return></block></then></if>

    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name><name pos:line="16" pos:column="9">copyInto<pos:position pos:line="16" pos:column="17"/></name><operator pos:line="16" pos:column="17">.<pos:position pos:line="16" pos:column="18"/></operator><name pos:line="16" pos:column="18">offset<pos:position pos:line="16" pos:column="24"/></name></name> <operator pos:line="16" pos:column="25">&gt;=<pos:position pos:line="16" pos:column="30"/></operator> <name pos:line="16" pos:column="28">len<pos:position pos:line="16" pos:column="31"/></name></expr>)<pos:position pos:line="16" pos:column="32"/></condition><then pos:line="16" pos:column="32">
        <block type="pseudo"><return pos:line="17" pos:column="9">return <expr><literal type="boolean" pos:line="17" pos:column="16">false<pos:position pos:line="17" pos:column="21"/></literal></expr>;<pos:position pos:line="17" pos:column="22"/></return></block></then></if> <comment type="line" pos:line="17" pos:column="23">// sent everything there is</comment>

    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name pos:line="19" pos:column="9">canSwapIn<pos:position pos:line="19" pos:column="18"/></name></expr>)<pos:position pos:line="19" pos:column="19"/></condition><then pos:line="19" pos:column="19">
        <block type="pseudo"><return pos:line="20" pos:column="9">return <expr><literal type="boolean" pos:line="20" pos:column="16">true<pos:position pos:line="20" pos:column="20"/></literal></expr>;<pos:position pos:line="20" pos:column="21"/></return></block></then></if> <comment type="line" pos:line="20" pos:column="22">// if we lack prefix, we can swap it in</comment>

    <comment type="line" pos:line="22" pos:column="5">// If we cannot swap in, make sure we have what we want in RAM. Otherwise,</comment>
    <comment type="line" pos:line="23" pos:column="5">// scheduleRead calls scheduleDiskRead which asserts without a swap file.</comment>
    <decl_stmt><decl><type><specifier pos:line="24" pos:column="5">const<pos:position pos:line="24" pos:column="10"/></specifier> <name pos:line="24" pos:column="11">MemObject<pos:position pos:line="24" pos:column="20"/></name> <modifier pos:line="24" pos:column="21">*<pos:position pos:line="24" pos:column="22"/></modifier></type><name pos:line="24" pos:column="22">mem<pos:position pos:line="24" pos:column="25"/></name> <init pos:line="24" pos:column="26">= <expr><name><name pos:line="24" pos:column="28">entry<pos:position pos:line="24" pos:column="33"/></name><operator pos:line="24" pos:column="33">-&gt;<pos:position pos:line="24" pos:column="38"/></operator><name pos:line="24" pos:column="35">mem_obj<pos:position pos:line="24" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="24" pos:column="43"/></decl_stmt>
    <return pos:line="25" pos:column="5">return <expr><name pos:line="25" pos:column="12">mem<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">&amp;&amp;<pos:position pos:line="25" pos:column="26"/></operator>
           <name><name pos:line="26" pos:column="12">mem<pos:position pos:line="26" pos:column="15"/></name><operator pos:line="26" pos:column="15">-&gt;<pos:position pos:line="26" pos:column="20"/></operator><name pos:line="26" pos:column="17">inmem_lo<pos:position pos:line="26" pos:column="25"/></name></name> <operator pos:line="26" pos:column="26">&lt;=<pos:position pos:line="26" pos:column="31"/></operator> <name><name pos:line="26" pos:column="29">copyInto<pos:position pos:line="26" pos:column="37"/></name><operator pos:line="26" pos:column="37">.<pos:position pos:line="26" pos:column="38"/></operator><name pos:line="26" pos:column="38">offset<pos:position pos:line="26" pos:column="44"/></name></name> <operator pos:line="26" pos:column="45">&amp;&amp;<pos:position pos:line="26" pos:column="55"/></operator> <name><name pos:line="26" pos:column="48">copyInto<pos:position pos:line="26" pos:column="56"/></name><operator pos:line="26" pos:column="56">.<pos:position pos:line="26" pos:column="57"/></operator><name pos:line="26" pos:column="57">offset<pos:position pos:line="26" pos:column="63"/></name></name> <operator pos:line="26" pos:column="64">&lt;<pos:position pos:line="26" pos:column="68"/></operator> <call><name><name pos:line="26" pos:column="66">mem<pos:position pos:line="26" pos:column="69"/></name><operator pos:line="26" pos:column="69">-&gt;<pos:position pos:line="26" pos:column="74"/></operator><name pos:line="26" pos:column="71">endOffset<pos:position pos:line="26" pos:column="80"/></name></name><argument_list pos:line="26" pos:column="80">()<pos:position pos:line="26" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="83"/></return>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
