<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2521_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">StoreEntry<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">validToSend<pos:position pos:line="2" pos:column="24"/></name></name><parameter_list pos:line="2" pos:column="24">()<pos:position pos:line="2" pos:column="26"/></parameter_list> <specifier pos:line="2" pos:column="27">const<pos:position pos:line="2" pos:column="32"/></specifier>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><call><name pos:line="4" pos:column="9">EBIT_TEST<pos:position pos:line="4" pos:column="18"/></name><argument_list pos:line="4" pos:column="18">(<argument><expr><name pos:line="4" pos:column="19">flags<pos:position pos:line="4" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="26">RELEASE_REQUEST<pos:position pos:line="4" pos:column="41"/></name></expr></argument>)<pos:position pos:line="4" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="43"/></condition><then pos:line="4" pos:column="43">
        <block type="pseudo"><return pos:line="5" pos:column="9">return <expr><literal type="number" pos:line="5" pos:column="16">0<pos:position pos:line="5" pos:column="17"/></literal></expr>;<pos:position pos:line="5" pos:column="18"/></return></block></then></if>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><call><name pos:line="7" pos:column="9">EBIT_TEST<pos:position pos:line="7" pos:column="18"/></name><argument_list pos:line="7" pos:column="18">(<argument><expr><name pos:line="7" pos:column="19">flags<pos:position pos:line="7" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="26">ENTRY_NEGCACHED<pos:position pos:line="7" pos:column="41"/></name></expr></argument>)<pos:position pos:line="7" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="43"/></condition><then pos:line="7" pos:column="43">
        <block type="pseudo"><if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">expires<pos:position pos:line="8" pos:column="20"/></name> <operator pos:line="8" pos:column="21">&lt;=<pos:position pos:line="8" pos:column="26"/></operator> <name pos:line="8" pos:column="24">squid_curtime<pos:position pos:line="8" pos:column="37"/></name></expr>)<pos:position pos:line="8" pos:column="38"/></condition><then pos:line="8" pos:column="38">
            <block type="pseudo"><return pos:line="9" pos:column="13">return <expr><literal type="number" pos:line="9" pos:column="20">0<pos:position pos:line="9" pos:column="21"/></literal></expr>;<pos:position pos:line="9" pos:column="22"/></return></block></then></if></block></then></if>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><call><name pos:line="11" pos:column="9">EBIT_TEST<pos:position pos:line="11" pos:column="18"/></name><argument_list pos:line="11" pos:column="18">(<argument><expr><name pos:line="11" pos:column="19">flags<pos:position pos:line="11" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="26">ENTRY_ABORTED<pos:position pos:line="11" pos:column="39"/></name></expr></argument>)<pos:position pos:line="11" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="41"/></condition><then pos:line="11" pos:column="41">
        <block type="pseudo"><return pos:line="12" pos:column="9">return <expr><literal type="number" pos:line="12" pos:column="16">0<pos:position pos:line="12" pos:column="17"/></literal></expr>;<pos:position pos:line="12" pos:column="18"/></return></block></then></if>

    <comment type="line" pos:line="14" pos:column="5">// now check that the entry has a cache backing or is collapsed</comment>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">swap_filen<pos:position pos:line="15" pos:column="19"/></name> <operator pos:line="15" pos:column="20">&gt;<pos:position pos:line="15" pos:column="24"/></operator> <operator pos:line="15" pos:column="22">-<pos:position pos:line="15" pos:column="23"/></operator><literal type="number" pos:line="15" pos:column="23">1<pos:position pos:line="15" pos:column="24"/></literal></expr>)<pos:position pos:line="15" pos:column="25"/></condition><then pos:line="15" pos:column="25"> <comment type="line" pos:line="15" pos:column="26">// backed by a disk cache</comment>
        <block type="pseudo"><return pos:line="16" pos:column="9">return <expr><literal type="number" pos:line="16" pos:column="16">1<pos:position pos:line="16" pos:column="17"/></literal></expr>;<pos:position pos:line="16" pos:column="18"/></return></block></then></if>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><call><name pos:line="18" pos:column="9">swappingOut<pos:position pos:line="18" pos:column="20"/></name><argument_list pos:line="18" pos:column="20">()<pos:position pos:line="18" pos:column="22"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="23"/></condition><then pos:line="18" pos:column="23"> <comment type="line" pos:line="18" pos:column="24">// will be backed by a disk cache</comment>
        <block type="pseudo"><return pos:line="19" pos:column="9">return <expr><literal type="number" pos:line="19" pos:column="16">1<pos:position pos:line="19" pos:column="17"/></literal></expr>;<pos:position pos:line="19" pos:column="18"/></return></block></then></if>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><operator pos:line="21" pos:column="9">!<pos:position pos:line="21" pos:column="10"/></operator><name pos:line="21" pos:column="10">mem_obj<pos:position pos:line="21" pos:column="17"/></name></expr>)<pos:position pos:line="21" pos:column="18"/></condition><then pos:line="21" pos:column="18"> <comment type="line" pos:line="21" pos:column="19">// not backed by a memory cache and not collapsed</comment>
        <block type="pseudo"><return pos:line="22" pos:column="9">return <expr><literal type="number" pos:line="22" pos:column="16">0<pos:position pos:line="22" pos:column="17"/></literal></expr>;<pos:position pos:line="22" pos:column="18"/></return></block></then></if>

    <comment type="line" pos:line="24" pos:column="5">// StoreEntry::storeClientType() assumes DISK_CLIENT here, but there is no</comment>
    <comment type="line" pos:line="25" pos:column="5">// disk cache backing that store_client constructor will assert. XXX: This</comment>
    <comment type="line" pos:line="26" pos:column="5">// is wrong for range requests (that could feed off nibbled memory) and for</comment>
    <comment type="line" pos:line="27" pos:column="5">// entries backed by the shared memory cache (that could, in theory, get</comment>
    <comment type="line" pos:line="28" pos:column="5">// nibbled bytes from that cache, but there is no such "memoryIn" code).</comment>
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><name><name pos:line="29" pos:column="9">mem_obj<pos:position pos:line="29" pos:column="16"/></name><operator pos:line="29" pos:column="16">-&gt;<pos:position pos:line="29" pos:column="21"/></operator><name pos:line="29" pos:column="18">inmem_lo<pos:position pos:line="29" pos:column="26"/></name></name></expr>)<pos:position pos:line="29" pos:column="27"/></condition><then pos:line="29" pos:column="27"> <comment type="line" pos:line="29" pos:column="28">// in memory cache, but got nibbled at</comment>
        <block type="pseudo"><return pos:line="30" pos:column="9">return <expr><literal type="number" pos:line="30" pos:column="16">0<pos:position pos:line="30" pos:column="17"/></literal></expr>;<pos:position pos:line="30" pos:column="18"/></return></block></then></if>

    <comment type="line" pos:line="32" pos:column="5">// The following check is correct but useless at this position. TODO: Move</comment>
    <comment type="line" pos:line="33" pos:column="5">// it up when the shared memory cache can either replenish locally nibbled</comment>
    <comment type="line" pos:line="34" pos:column="5">// bytes or, better, does not use local RAM copy at all.</comment>
    <comment type="line" pos:line="35" pos:column="5">// if (mem_obj-&gt;memCache.index &gt;= 0) // backed by a shared memory cache</comment>
    <comment type="line" pos:line="36" pos:column="5">//    return 1;</comment>

    <return pos:line="38" pos:column="5">return <expr><literal type="number" pos:line="38" pos:column="12">1<pos:position pos:line="38" pos:column="13"/></literal></expr>;<pos:position pos:line="38" pos:column="14"/></return>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
