<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1291_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">EventScheduler<pos:position pos:line="2" pos:column="15"/></name><operator pos:line="2" pos:column="15">::<pos:position pos:line="2" pos:column="17"/></operator><name pos:line="2" pos:column="17">timeRemaining<pos:position pos:line="2" pos:column="30"/></name></name><parameter_list pos:line="2" pos:column="30">()<pos:position pos:line="2" pos:column="32"/></parameter_list> <specifier pos:line="2" pos:column="33">const<pos:position pos:line="2" pos:column="38"/></specifier>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">!<pos:position pos:line="4" pos:column="10"/></operator><name pos:line="4" pos:column="10">tasks<pos:position pos:line="4" pos:column="15"/></name></expr>)<pos:position pos:line="4" pos:column="16"/></condition><then pos:line="4" pos:column="16">
        <block type="pseudo"><return pos:line="5" pos:column="9">return <expr><name pos:line="5" pos:column="16">EVENT_IDLE<pos:position pos:line="5" pos:column="26"/></name></expr>;<pos:position pos:line="5" pos:column="27"/></return></block></then></if>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name><name pos:line="7" pos:column="9">tasks<pos:position pos:line="7" pos:column="14"/></name><operator pos:line="7" pos:column="14">-&gt;<pos:position pos:line="7" pos:column="19"/></operator><name pos:line="7" pos:column="16">when<pos:position pos:line="7" pos:column="20"/></name></name> <operator pos:line="7" pos:column="21">&lt;=<pos:position pos:line="7" pos:column="26"/></operator> <name pos:line="7" pos:column="24">current_dtime<pos:position pos:line="7" pos:column="37"/></name></expr>)<pos:position pos:line="7" pos:column="38"/></condition><then pos:line="7" pos:column="38"> <comment type="line" pos:line="7" pos:column="39">// we are on time or late</comment>
        <block type="pseudo"><return pos:line="8" pos:column="9">return <expr><literal type="number" pos:line="8" pos:column="16">0<pos:position pos:line="8" pos:column="17"/></literal></expr>;<pos:position pos:line="8" pos:column="18"/></return></block></then></if> <comment type="line" pos:line="8" pos:column="19">// fire the event ASAP</comment>

    <decl_stmt><decl><type><specifier pos:line="10" pos:column="5">const<pos:position pos:line="10" pos:column="10"/></specifier> <name pos:line="10" pos:column="11">double<pos:position pos:line="10" pos:column="17"/></name></type> <name pos:line="10" pos:column="18">diff<pos:position pos:line="10" pos:column="22"/></name> <init pos:line="10" pos:column="23">= <expr><name><name pos:line="10" pos:column="25">tasks<pos:position pos:line="10" pos:column="30"/></name><operator pos:line="10" pos:column="30">-&gt;<pos:position pos:line="10" pos:column="35"/></operator><name pos:line="10" pos:column="32">when<pos:position pos:line="10" pos:column="36"/></name></name> <operator pos:line="10" pos:column="37">-<pos:position pos:line="10" pos:column="38"/></operator> <name pos:line="10" pos:column="39">current_dtime<pos:position pos:line="10" pos:column="52"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="53"/></decl_stmt> <comment type="line" pos:line="10" pos:column="54">// microseconds</comment>
    <comment type="line" pos:line="11" pos:column="5">// Round UP: If we come back a nanosecond earlier, we will wait again!</comment>
    <decl_stmt><decl><type><specifier pos:line="12" pos:column="5">const<pos:position pos:line="12" pos:column="10"/></specifier> <name pos:line="12" pos:column="11">int<pos:position pos:line="12" pos:column="14"/></name></type> <name pos:line="12" pos:column="15">timeLeft<pos:position pos:line="12" pos:column="23"/></name> <init pos:line="12" pos:column="24">= <expr><cast type="static" pos:line="12" pos:column="26">static_cast<argument_list type="generic" pos:line="12" pos:column="37">&lt;<argument><expr><name pos:line="12" pos:column="38">int<pos:position pos:line="12" pos:column="41"/></name></expr></argument>&gt;<pos:position pos:line="12" pos:column="45"/></argument_list><argument_list pos:line="12" pos:column="42">(<argument><expr><call><name pos:line="12" pos:column="43">ceil<pos:position pos:line="12" pos:column="47"/></name><argument_list pos:line="12" pos:column="47">(<argument><expr><literal type="number" pos:line="12" pos:column="48">1000<pos:position pos:line="12" pos:column="52"/></literal><operator pos:line="12" pos:column="52">*<pos:position pos:line="12" pos:column="53"/></operator><name pos:line="12" pos:column="53">diff<pos:position pos:line="12" pos:column="57"/></name></expr></argument>)<pos:position pos:line="12" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="59"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="12" pos:column="60"/></decl_stmt> <comment type="line" pos:line="12" pos:column="61">// milliseconds</comment>
    <comment type="line" pos:line="13" pos:column="5">// Avoid hot idle: A series of rapid select() calls with zero timeout.</comment>
    <decl_stmt><decl><type><specifier pos:line="14" pos:column="5">const<pos:position pos:line="14" pos:column="10"/></specifier> <name pos:line="14" pos:column="11">int<pos:position pos:line="14" pos:column="14"/></name></type> <name pos:line="14" pos:column="15">minDelay<pos:position pos:line="14" pos:column="23"/></name> <init pos:line="14" pos:column="24">= <expr><literal type="number" pos:line="14" pos:column="26">1<pos:position pos:line="14" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="28"/></decl_stmt> <comment type="line" pos:line="14" pos:column="29">// millisecond</comment>
    <return pos:line="15" pos:column="5">return <expr><call><name pos:line="15" pos:column="12">max<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><name pos:line="15" pos:column="16">minDelay<pos:position pos:line="15" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="26">timeLeft<pos:position pos:line="15" pos:column="34"/></name></expr></argument>)<pos:position pos:line="15" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="36"/></return>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
