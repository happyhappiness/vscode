<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1987_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">peerDestroy<pos:position pos:line="2" pos:column="12"/></name><parameter_list pos:line="2" pos:column="12">(<parameter><decl><type><name pos:line="2" pos:column="13">void<pos:position pos:line="2" pos:column="17"/></name> <modifier pos:line="2" pos:column="18">*<pos:position pos:line="2" pos:column="19"/></modifier></type><name pos:line="2" pos:column="19">data<pos:position pos:line="2" pos:column="23"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="24"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">CachePeer<pos:position pos:line="4" pos:column="14"/></name> <modifier pos:line="4" pos:column="15">*<pos:position pos:line="4" pos:column="16"/></modifier></type><name pos:line="4" pos:column="16">p<pos:position pos:line="4" pos:column="17"/></name> <init pos:line="4" pos:column="18">= <expr><operator pos:line="4" pos:column="20">(<pos:position pos:line="4" pos:column="21"/></operator><name pos:line="4" pos:column="21">CachePeer<pos:position pos:line="4" pos:column="30"/></name> <operator pos:line="4" pos:column="31">*<pos:position pos:line="4" pos:column="32"/></operator><operator pos:line="4" pos:column="32">)<pos:position pos:line="4" pos:column="33"/></operator><name pos:line="4" pos:column="33">data<pos:position pos:line="4" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="38"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">p<pos:position pos:line="6" pos:column="10"/></name> <operator pos:line="6" pos:column="11">==<pos:position pos:line="6" pos:column="13"/></operator> <name pos:line="6" pos:column="14">NULL<pos:position pos:line="6" pos:column="18"/></name></expr>)<pos:position pos:line="6" pos:column="19"/></condition><then pos:line="6" pos:column="19">
        <block type="pseudo"><return pos:line="7" pos:column="9">return;<pos:position pos:line="7" pos:column="16"/></return></block></then></if>

    <decl_stmt><decl><type><name pos:line="9" pos:column="5">CachePeerDomainList<pos:position pos:line="9" pos:column="24"/></name> <modifier pos:line="9" pos:column="25">*<pos:position pos:line="9" pos:column="26"/></modifier></type><name pos:line="9" pos:column="26">nl<pos:position pos:line="9" pos:column="28"/></name> <init pos:line="9" pos:column="29">= <expr><name pos:line="9" pos:column="31">NULL<pos:position pos:line="9" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="36"/></decl_stmt>

    <for pos:line="11" pos:column="5">for <control pos:line="11" pos:column="9">(<init><decl><type><name pos:line="11" pos:column="10">CachePeerDomainList<pos:position pos:line="11" pos:column="29"/></name> <modifier pos:line="11" pos:column="30">*<pos:position pos:line="11" pos:column="31"/></modifier></type><name pos:line="11" pos:column="31">l<pos:position pos:line="11" pos:column="32"/></name> <init pos:line="11" pos:column="33">= <expr><name><name pos:line="11" pos:column="35">p<pos:position pos:line="11" pos:column="36"/></name><operator pos:line="11" pos:column="36">-&gt;<pos:position pos:line="11" pos:column="41"/></operator><name pos:line="11" pos:column="38">peer_domain<pos:position pos:line="11" pos:column="49"/></name></name></expr></init></decl>;<pos:position pos:line="11" pos:column="50"/></init> <condition><expr><name pos:line="11" pos:column="51">l<pos:position pos:line="11" pos:column="52"/></name></expr>;<pos:position pos:line="11" pos:column="53"/></condition> <incr><expr><name pos:line="11" pos:column="54">l<pos:position pos:line="11" pos:column="55"/></name> <operator pos:line="11" pos:column="56">=<pos:position pos:line="11" pos:column="57"/></operator> <name pos:line="11" pos:column="58">nl<pos:position pos:line="11" pos:column="60"/></name></expr></incr>)<pos:position pos:line="11" pos:column="61"/></control> <block pos:line="11" pos:column="62">{
        <expr_stmt><expr><name pos:line="12" pos:column="9">nl<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">=<pos:position pos:line="12" pos:column="13"/></operator> <name><name pos:line="12" pos:column="14">l<pos:position pos:line="12" pos:column="15"/></name><operator pos:line="12" pos:column="15">-&gt;<pos:position pos:line="12" pos:column="20"/></operator><name pos:line="12" pos:column="17">next<pos:position pos:line="12" pos:column="21"/></name></name></expr>;<pos:position pos:line="12" pos:column="22"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">safe_free<pos:position pos:line="13" pos:column="18"/></name><argument_list pos:line="13" pos:column="18">(<argument><expr><name><name pos:line="13" pos:column="19">l<pos:position pos:line="13" pos:column="20"/></name><operator pos:line="13" pos:column="20">-&gt;<pos:position pos:line="13" pos:column="25"/></operator><name pos:line="13" pos:column="22">domain<pos:position pos:line="13" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">xfree<pos:position pos:line="14" pos:column="14"/></name><argument_list pos:line="14" pos:column="14">(<argument><expr><name pos:line="14" pos:column="15">l<pos:position pos:line="14" pos:column="16"/></name></expr></argument>)<pos:position pos:line="14" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></for>

    <expr_stmt><expr><call><name pos:line="17" pos:column="5">safe_free<pos:position pos:line="17" pos:column="14"/></name><argument_list pos:line="17" pos:column="14">(<argument><expr><name><name pos:line="17" pos:column="15">p<pos:position pos:line="17" pos:column="16"/></name><operator pos:line="17" pos:column="16">-&gt;<pos:position pos:line="17" pos:column="21"/></operator><name pos:line="17" pos:column="18">host<pos:position pos:line="17" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">safe_free<pos:position pos:line="18" pos:column="14"/></name><argument_list pos:line="18" pos:column="14">(<argument><expr><name><name pos:line="18" pos:column="15">p<pos:position pos:line="18" pos:column="16"/></name><operator pos:line="18" pos:column="16">-&gt;<pos:position pos:line="18" pos:column="21"/></operator><name pos:line="18" pos:column="18">name<pos:position pos:line="18" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">safe_free<pos:position pos:line="19" pos:column="14"/></name><argument_list pos:line="19" pos:column="14">(<argument><expr><name><name pos:line="19" pos:column="15">p<pos:position pos:line="19" pos:column="16"/></name><operator pos:line="19" pos:column="16">-&gt;<pos:position pos:line="19" pos:column="21"/></operator><name pos:line="19" pos:column="18">domain<pos:position pos:line="19" pos:column="24"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="26"/></expr_stmt>
<cpp:if pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">if<pos:position pos:line="20" pos:column="4"/></cpp:directive> <expr><name pos:line="20" pos:column="5">USE_CACHE_DIGESTS<pos:position pos:line="20" pos:column="22"/></name></expr></cpp:if>

    <expr_stmt><expr><call><name pos:line="22" pos:column="5">cbdataReferenceDone<pos:position pos:line="22" pos:column="24"/></name><argument_list pos:line="22" pos:column="24">(<argument><expr><name><name pos:line="22" pos:column="25">p<pos:position pos:line="22" pos:column="26"/></name><operator pos:line="22" pos:column="26">-&gt;<pos:position pos:line="22" pos:column="31"/></operator><name pos:line="22" pos:column="28">digest<pos:position pos:line="22" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="36"/></expr_stmt>
<cpp:endif pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">endif<pos:position pos:line="23" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
