<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_400_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">main<pos:position pos:line="2" pos:column="5"/></name><parameter_list pos:line="2" pos:column="5">(<parameter><decl><type><name pos:line="2" pos:column="6">int<pos:position pos:line="2" pos:column="9"/></name></type> <name pos:line="2" pos:column="10">argc<pos:position pos:line="2" pos:column="14"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="16">char<pos:position pos:line="2" pos:column="20"/></name> <modifier pos:line="2" pos:column="21">*<pos:position pos:line="2" pos:column="22"/></modifier><modifier pos:line="2" pos:column="22">*<pos:position pos:line="2" pos:column="23"/></modifier></type><name pos:line="2" pos:column="23">argv<pos:position pos:line="2" pos:column="27"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="28"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">struct<pos:position pos:line="4" pos:column="11"/></name> <name pos:line="4" pos:column="12">sockaddr_in<pos:position pos:line="4" pos:column="23"/></name></name></type> <name pos:line="4" pos:column="24">salocal<pos:position pos:line="4" pos:column="31"/></name></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="5" pos:column="5">struct<pos:position pos:line="5" pos:column="11"/></name> <name pos:line="5" pos:column="12">sockaddr_in<pos:position pos:line="5" pos:column="23"/></name></name></type> <name pos:line="5" pos:column="24">saremote<pos:position pos:line="5" pos:column="32"/></name></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">struct<pos:position pos:line="6" pos:column="11"/></name> <name pos:line="6" pos:column="12">servent<pos:position pos:line="6" pos:column="19"/></name></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">svp<pos:position pos:line="6" pos:column="24"/></name></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">unsigned<pos:position pos:line="7" pos:column="13"/></name> <name pos:line="7" pos:column="14">short<pos:position pos:line="7" pos:column="19"/></name></type> <name pos:line="7" pos:column="20">svc_port<pos:position pos:line="7" pos:column="28"/></name></decl>;<pos:position pos:line="7" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">char<pos:position pos:line="8" pos:column="9"/></name></type> <name><name pos:line="8" pos:column="10">username<pos:position pos:line="8" pos:column="18"/></name><index pos:line="8" pos:column="18">[<expr><name pos:line="8" pos:column="19">MAXPWNAM<pos:position pos:line="8" pos:column="27"/></name></expr>]<pos:position pos:line="8" pos:column="28"/></index></name></decl>;<pos:position pos:line="8" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">char<pos:position pos:line="9" pos:column="9"/></name></type> <name><name pos:line="9" pos:column="10">passwd<pos:position pos:line="9" pos:column="16"/></name><index pos:line="9" pos:column="16">[<expr><name pos:line="9" pos:column="17">MAXPASS<pos:position pos:line="9" pos:column="24"/></name></expr>]<pos:position pos:line="9" pos:column="25"/></index></name></decl>;<pos:position pos:line="9" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">char<pos:position pos:line="10" pos:column="9"/></name> <modifier pos:line="10" pos:column="10">*<pos:position pos:line="10" pos:column="11"/></modifier></type><name pos:line="10" pos:column="11">ptr<pos:position pos:line="10" pos:column="14"/></name></decl>;<pos:position pos:line="10" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">char<pos:position pos:line="11" pos:column="9"/></name></type> <name><name pos:line="11" pos:column="10">authstring<pos:position pos:line="11" pos:column="20"/></name><index pos:line="11" pos:column="20">[<expr><name pos:line="11" pos:column="21">MAXLINE<pos:position pos:line="11" pos:column="28"/></name></expr>]<pos:position pos:line="11" pos:column="29"/></index></name></decl>;<pos:position pos:line="11" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="12" pos:column="5">const<pos:position pos:line="12" pos:column="10"/></specifier> <name pos:line="12" pos:column="11">char<pos:position pos:line="12" pos:column="15"/></name> <modifier pos:line="12" pos:column="16">*<pos:position pos:line="12" pos:column="17"/></modifier></type><name pos:line="12" pos:column="17">cfname<pos:position pos:line="12" pos:column="23"/></name> <init pos:line="12" pos:column="24">= <expr><name pos:line="12" pos:column="26">NULL<pos:position pos:line="12" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">int<pos:position pos:line="13" pos:column="8"/></name></type> <name pos:line="13" pos:column="9">err<pos:position pos:line="13" pos:column="12"/></name> <init pos:line="13" pos:column="13">= <expr><literal type="number" pos:line="13" pos:column="15">0<pos:position pos:line="13" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">socklen_t<pos:position pos:line="14" pos:column="14"/></name></type> <name pos:line="14" pos:column="15">salen<pos:position pos:line="14" pos:column="20"/></name></decl>;<pos:position pos:line="14" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">int<pos:position pos:line="15" pos:column="8"/></name></type> <name pos:line="15" pos:column="9">c<pos:position pos:line="15" pos:column="10"/></name></decl>;<pos:position pos:line="15" pos:column="11"/></decl_stmt>

    <while pos:line="17" pos:column="5">while <condition pos:line="17" pos:column="11">(<expr><operator pos:line="17" pos:column="12">(<pos:position pos:line="17" pos:column="13"/></operator><name pos:line="17" pos:column="13">c<pos:position pos:line="17" pos:column="14"/></name> <operator pos:line="17" pos:column="15">=<pos:position pos:line="17" pos:column="16"/></operator> <call><name pos:line="17" pos:column="17">getopt<pos:position pos:line="17" pos:column="23"/></name><argument_list pos:line="17" pos:column="23">(<argument><expr><name pos:line="17" pos:column="24">argc<pos:position pos:line="17" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="30">argv<pos:position pos:line="17" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="36">"h:p:f:w:i:t:"<pos:position pos:line="17" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="51"/></argument_list></call><operator pos:line="17" pos:column="51">)<pos:position pos:line="17" pos:column="52"/></operator> <operator pos:line="17" pos:column="53">!=<pos:position pos:line="17" pos:column="55"/></operator> <operator pos:line="17" pos:column="56">-<pos:position pos:line="17" pos:column="57"/></operator><literal type="number" pos:line="17" pos:column="57">1<pos:position pos:line="17" pos:column="58"/></literal></expr>)<pos:position pos:line="17" pos:column="59"/></condition> <block pos:line="17" pos:column="60">{
        <switch pos:line="18" pos:column="9">switch <condition pos:line="18" pos:column="16">(<expr><name pos:line="18" pos:column="17">c<pos:position pos:line="18" pos:column="18"/></name></expr>)<pos:position pos:line="18" pos:column="19"/></condition> <block pos:line="18" pos:column="20">{
        <case pos:line="19" pos:column="9">case <expr><literal type="char" pos:line="19" pos:column="14">'f'<pos:position pos:line="19" pos:column="17"/></literal></expr>:<pos:position pos:line="19" pos:column="18"/></case>
            <expr_stmt><expr><name pos:line="20" pos:column="13">cfname<pos:position pos:line="20" pos:column="19"/></name> <operator pos:line="20" pos:column="20">=<pos:position pos:line="20" pos:column="21"/></operator> <name pos:line="20" pos:column="22">optarg<pos:position pos:line="20" pos:column="28"/></name></expr>;<pos:position pos:line="20" pos:column="29"/></expr_stmt>
            <break pos:line="21" pos:column="13">break;<pos:position pos:line="21" pos:column="19"/></break>
        <case pos:line="22" pos:column="9">case <expr><literal type="char" pos:line="22" pos:column="14">'h'<pos:position pos:line="22" pos:column="17"/></literal></expr>:<pos:position pos:line="22" pos:column="18"/></case>
            <expr_stmt><expr><call><name pos:line="23" pos:column="13">strcpy<pos:position pos:line="23" pos:column="19"/></name><argument_list pos:line="23" pos:column="19">(<argument><expr><name pos:line="23" pos:column="20">server<pos:position pos:line="23" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="28">optarg<pos:position pos:line="23" pos:column="34"/></name></expr></argument>)<pos:position pos:line="23" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="36"/></expr_stmt>
            <break pos:line="24" pos:column="13">break;<pos:position pos:line="24" pos:column="19"/></break>
        <case pos:line="25" pos:column="9">case <expr><literal type="char" pos:line="25" pos:column="14">'p'<pos:position pos:line="25" pos:column="17"/></literal></expr>:<pos:position pos:line="25" pos:column="18"/></case>
            <expr_stmt><expr><call><name pos:line="26" pos:column="13">strcpy<pos:position pos:line="26" pos:column="19"/></name><argument_list pos:line="26" pos:column="19">(<argument><expr><name pos:line="26" pos:column="20">svc_name<pos:position pos:line="26" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="30">optarg<pos:position pos:line="26" pos:column="36"/></name></expr></argument>)<pos:position pos:line="26" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="38"/></expr_stmt>
            <break pos:line="27" pos:column="13">break;<pos:position pos:line="27" pos:column="19"/></break>
        <case pos:line="28" pos:column="9">case <expr><literal type="char" pos:line="28" pos:column="14">'w'<pos:position pos:line="28" pos:column="17"/></literal></expr>:<pos:position pos:line="28" pos:column="18"/></case>
            <expr_stmt><expr><call><name pos:line="29" pos:column="13">strcpy<pos:position pos:line="29" pos:column="19"/></name><argument_list pos:line="29" pos:column="19">(<argument><expr><name pos:line="29" pos:column="20">secretkey<pos:position pos:line="29" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="31">optarg<pos:position pos:line="29" pos:column="37"/></name></expr></argument>)<pos:position pos:line="29" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="39"/></expr_stmt>
            <break pos:line="30" pos:column="13">break;<pos:position pos:line="30" pos:column="19"/></break>
        <case pos:line="31" pos:column="9">case <expr><literal type="char" pos:line="31" pos:column="14">'i'<pos:position pos:line="31" pos:column="17"/></literal></expr>:<pos:position pos:line="31" pos:column="18"/></case>
            <expr_stmt><expr><call><name pos:line="32" pos:column="13">strcpy<pos:position pos:line="32" pos:column="19"/></name><argument_list pos:line="32" pos:column="19">(<argument><expr><name pos:line="32" pos:column="20">identifier<pos:position pos:line="32" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="32">optarg<pos:position pos:line="32" pos:column="38"/></name></expr></argument>)<pos:position pos:line="32" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="40"/></expr_stmt>
            <break pos:line="33" pos:column="13">break;<pos:position pos:line="33" pos:column="19"/></break>
        <case pos:line="34" pos:column="9">case <expr><literal type="char" pos:line="34" pos:column="14">'t'<pos:position pos:line="34" pos:column="17"/></literal></expr>:<pos:position pos:line="34" pos:column="18"/></case>
            <expr_stmt><expr><name pos:line="35" pos:column="13">retries<pos:position pos:line="35" pos:column="20"/></name> <operator pos:line="35" pos:column="21">=<pos:position pos:line="35" pos:column="22"/></operator> <call><name pos:line="35" pos:column="23">atoi<pos:position pos:line="35" pos:column="27"/></name><argument_list pos:line="35" pos:column="27">(<argument><expr><name pos:line="35" pos:column="28">optarg<pos:position pos:line="35" pos:column="34"/></name></expr></argument>)<pos:position pos:line="35" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="36"/></expr_stmt>
            <break pos:line="36" pos:column="13">break;<pos:position pos:line="36" pos:column="19"/></break>
        }<pos:position pos:line="37" pos:column="10"/></block></switch>
    }<pos:position pos:line="38" pos:column="6"/></block></while>
    <comment type="block" pos:line="39" pos:column="5">/* make standard output line buffered */</comment>
    <if pos:line="40" pos:column="5">if <condition pos:line="40" pos:column="8">(<expr><call><name pos:line="40" pos:column="9">setvbuf<pos:position pos:line="40" pos:column="16"/></name><argument_list pos:line="40" pos:column="16">(<argument><expr><name pos:line="40" pos:column="17">stdout<pos:position pos:line="40" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="25">NULL<pos:position pos:line="40" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="31">_IOLBF<pos:position pos:line="40" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="39">0<pos:position pos:line="40" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="41"/></argument_list></call> <operator pos:line="40" pos:column="42">!=<pos:position pos:line="40" pos:column="44"/></operator> <literal type="number" pos:line="40" pos:column="45">0<pos:position pos:line="40" pos:column="46"/></literal></expr>)<pos:position pos:line="40" pos:column="47"/></condition><then pos:line="40" pos:column="47">
        <block type="pseudo"><return pos:line="41" pos:column="9">return <expr><literal type="number" pos:line="41" pos:column="16">1<pos:position pos:line="41" pos:column="17"/></literal></expr>;<pos:position pos:line="41" pos:column="18"/></return></block></then></if>

    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><name pos:line="43" pos:column="9">cfname<pos:position pos:line="43" pos:column="15"/></name></expr>)<pos:position pos:line="43" pos:column="16"/></condition><then pos:line="43" pos:column="16"> <block pos:line="43" pos:column="17">{
        <if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><call><name pos:line="44" pos:column="13">rad_auth_config<pos:position pos:line="44" pos:column="28"/></name><argument_list pos:line="44" pos:column="28">(<argument><expr><name pos:line="44" pos:column="29">cfname<pos:position pos:line="44" pos:column="35"/></name></expr></argument>)<pos:position pos:line="44" pos:column="36"/></argument_list></call> <operator pos:line="44" pos:column="37">&lt;<pos:position pos:line="44" pos:column="41"/></operator> <literal type="number" pos:line="44" pos:column="39">0<pos:position pos:line="44" pos:column="40"/></literal></expr>)<pos:position pos:line="44" pos:column="41"/></condition><then pos:line="44" pos:column="41"> <block pos:line="44" pos:column="42">{
            <expr_stmt><expr><call><name pos:line="45" pos:column="13">fprintf<pos:position pos:line="45" pos:column="20"/></name><argument_list pos:line="45" pos:column="20">(<argument><expr><name pos:line="45" pos:column="21">stderr<pos:position pos:line="45" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="29">"%s: can't open configuration file '%s'.\n"<pos:position pos:line="45" pos:column="72"/></literal></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="74">argv<pos:position pos:line="45" pos:column="78"/></name><index pos:line="45" pos:column="78">[<expr><literal type="number" pos:line="45" pos:column="79">0<pos:position pos:line="45" pos:column="80"/></literal></expr>]<pos:position pos:line="45" pos:column="81"/></index></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="83">cfname<pos:position pos:line="45" pos:column="89"/></name></expr></argument>)<pos:position pos:line="45" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="91"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="46" pos:column="13">exit<pos:position pos:line="46" pos:column="17"/></name><argument_list pos:line="46" pos:column="17">(<argument><expr><literal type="number" pos:line="46" pos:column="18">1<pos:position pos:line="46" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="21"/></expr_stmt>
        }<pos:position pos:line="47" pos:column="10"/></block></then></if>
    }<pos:position pos:line="48" pos:column="6"/></block></then></if>
    <if pos:line="49" pos:column="5">if <condition pos:line="49" pos:column="8">(<expr><operator pos:line="49" pos:column="9">!<pos:position pos:line="49" pos:column="10"/></operator><operator pos:line="49" pos:column="10">*<pos:position pos:line="49" pos:column="11"/></operator><name pos:line="49" pos:column="11">server<pos:position pos:line="49" pos:column="17"/></name></expr>)<pos:position pos:line="49" pos:column="18"/></condition><then pos:line="49" pos:column="18"> <block pos:line="49" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="50" pos:column="9">fprintf<pos:position pos:line="50" pos:column="16"/></name><argument_list pos:line="50" pos:column="16">(<argument><expr><name pos:line="50" pos:column="17">stderr<pos:position pos:line="50" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="25">"%s: Server not specified\n"<pos:position pos:line="50" pos:column="53"/></literal></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="55">argv<pos:position pos:line="50" pos:column="59"/></name><index pos:line="50" pos:column="59">[<expr><literal type="number" pos:line="50" pos:column="60">0<pos:position pos:line="50" pos:column="61"/></literal></expr>]<pos:position pos:line="50" pos:column="62"/></index></name></expr></argument>)<pos:position pos:line="50" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="64"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="51" pos:column="9">exit<pos:position pos:line="51" pos:column="13"/></name><argument_list pos:line="51" pos:column="13">(<argument><expr><literal type="number" pos:line="51" pos:column="14">1<pos:position pos:line="51" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="52" pos:column="6"/></block></then></if>
    <if pos:line="53" pos:column="5">if <condition pos:line="53" pos:column="8">(<expr><operator pos:line="53" pos:column="9">!<pos:position pos:line="53" pos:column="10"/></operator><operator pos:line="53" pos:column="10">*<pos:position pos:line="53" pos:column="11"/></operator><name pos:line="53" pos:column="11">secretkey<pos:position pos:line="53" pos:column="20"/></name></expr>)<pos:position pos:line="53" pos:column="21"/></condition><then pos:line="53" pos:column="21"> <block pos:line="53" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="54" pos:column="9">fprintf<pos:position pos:line="54" pos:column="16"/></name><argument_list pos:line="54" pos:column="16">(<argument><expr><name pos:line="54" pos:column="17">stderr<pos:position pos:line="54" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="25">"%s: Shared secret not specified\n"<pos:position pos:line="54" pos:column="60"/></literal></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="62">argv<pos:position pos:line="54" pos:column="66"/></name><index pos:line="54" pos:column="66">[<expr><literal type="number" pos:line="54" pos:column="67">0<pos:position pos:line="54" pos:column="68"/></literal></expr>]<pos:position pos:line="54" pos:column="69"/></index></name></expr></argument>)<pos:position pos:line="54" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="71"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="55" pos:column="9">exit<pos:position pos:line="55" pos:column="13"/></name><argument_list pos:line="55" pos:column="13">(<argument><expr><literal type="number" pos:line="55" pos:column="14">1<pos:position pos:line="55" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="56" pos:column="6"/></block></then></if>
<cpp:ifdef pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">ifdef<pos:position pos:line="57" pos:column="7"/></cpp:directive> <name pos:line="57" pos:column="8">_SQUID_MSWIN_<pos:position pos:line="57" pos:column="21"/></name></cpp:ifdef>
    <block pos:line="58" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="59" pos:column="9">WSADATA<pos:position pos:line="59" pos:column="16"/></name></type> <name pos:line="59" pos:column="17">wsaData<pos:position pos:line="59" pos:column="24"/></name></decl>;<pos:position pos:line="59" pos:column="25"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="60" pos:column="9">WSAStartup<pos:position pos:line="60" pos:column="19"/></name><argument_list pos:line="60" pos:column="19">(<argument><expr><literal type="number" pos:line="60" pos:column="20">2<pos:position pos:line="60" pos:column="21"/></literal></expr></argument>, <argument><expr><operator pos:line="60" pos:column="23">&amp;<pos:position pos:line="60" pos:column="28"/></operator><name pos:line="60" pos:column="24">wsaData<pos:position pos:line="60" pos:column="31"/></name></expr></argument>)<pos:position pos:line="60" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="61" pos:column="9">atexit<pos:position pos:line="61" pos:column="15"/></name><argument_list pos:line="61" pos:column="15">(<argument><expr><name pos:line="61" pos:column="16">Win32SockCleanup<pos:position pos:line="61" pos:column="32"/></name></expr></argument>)<pos:position pos:line="61" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="62" pos:column="6"/></block>
<cpp:endif pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">endif<pos:position pos:line="63" pos:column="7"/></cpp:directive></cpp:endif>
    <comment type="block" pos:line="64" pos:column="5">/*
     *    Open a connection to the server.
     */</comment>
    <expr_stmt><expr><name pos:line="67" pos:column="5">svp<pos:position pos:line="67" pos:column="8"/></name> <operator pos:line="67" pos:column="9">=<pos:position pos:line="67" pos:column="10"/></operator> <call><name pos:line="67" pos:column="11">getservbyname<pos:position pos:line="67" pos:column="24"/></name><argument_list pos:line="67" pos:column="24">(<argument><expr><name pos:line="67" pos:column="25">svc_name<pos:position pos:line="67" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="35">"udp"<pos:position pos:line="67" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="42"/></expr_stmt>
    <if pos:line="68" pos:column="5">if <condition pos:line="68" pos:column="8">(<expr><name pos:line="68" pos:column="9">svp<pos:position pos:line="68" pos:column="12"/></name> <operator pos:line="68" pos:column="13">!=<pos:position pos:line="68" pos:column="15"/></operator> <name pos:line="68" pos:column="16">NULL<pos:position pos:line="68" pos:column="20"/></name></expr>)<pos:position pos:line="68" pos:column="21"/></condition><then pos:line="68" pos:column="21">
        <block type="pseudo"><expr_stmt><expr><name pos:line="69" pos:column="9">svc_port<pos:position pos:line="69" pos:column="17"/></name> <operator pos:line="69" pos:column="18">=<pos:position pos:line="69" pos:column="19"/></operator> <call><name pos:line="69" pos:column="20">ntohs<pos:position pos:line="69" pos:column="25"/></name><argument_list pos:line="69" pos:column="25">(<argument><expr><operator pos:line="69" pos:column="26">(<pos:position pos:line="69" pos:column="27"/></operator><name pos:line="69" pos:column="27">unsigned<pos:position pos:line="69" pos:column="35"/></name> <name pos:line="69" pos:column="36">short<pos:position pos:line="69" pos:column="41"/></name><operator pos:line="69" pos:column="41">)<pos:position pos:line="69" pos:column="42"/></operator> <name><name pos:line="69" pos:column="43">svp<pos:position pos:line="69" pos:column="46"/></name><operator pos:line="69" pos:column="46">-&gt;<pos:position pos:line="69" pos:column="51"/></operator><name pos:line="69" pos:column="48">s_port<pos:position pos:line="69" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="69" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="56"/></expr_stmt></block></then>
    <else pos:line="70" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="71" pos:column="9">svc_port<pos:position pos:line="71" pos:column="17"/></name> <operator pos:line="71" pos:column="18">=<pos:position pos:line="71" pos:column="19"/></operator> <call><name pos:line="71" pos:column="20">atoi<pos:position pos:line="71" pos:column="24"/></name><argument_list pos:line="71" pos:column="24">(<argument><expr><name pos:line="71" pos:column="25">svc_name<pos:position pos:line="71" pos:column="33"/></name></expr></argument>)<pos:position pos:line="71" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="35"/></expr_stmt></block></else></if>
    <if pos:line="72" pos:column="5">if <condition pos:line="72" pos:column="8">(<expr><name pos:line="72" pos:column="9">svc_port<pos:position pos:line="72" pos:column="17"/></name> <operator pos:line="72" pos:column="18">==<pos:position pos:line="72" pos:column="20"/></operator> <literal type="number" pos:line="72" pos:column="21">0<pos:position pos:line="72" pos:column="22"/></literal></expr>)<pos:position pos:line="72" pos:column="23"/></condition><then pos:line="72" pos:column="23">
        <block type="pseudo"><expr_stmt><expr><name pos:line="73" pos:column="9">svc_port<pos:position pos:line="73" pos:column="17"/></name> <operator pos:line="73" pos:column="18">=<pos:position pos:line="73" pos:column="19"/></operator> <name pos:line="73" pos:column="20">PW_AUTH_UDP_PORT<pos:position pos:line="73" pos:column="36"/></name></expr>;<pos:position pos:line="73" pos:column="37"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="75" pos:column="5">/* Get the IP address of the authentication server */</comment>
    <if pos:line="76" pos:column="5">if <condition pos:line="76" pos:column="8">(<expr><operator pos:line="76" pos:column="9">(<pos:position pos:line="76" pos:column="10"/></operator><name pos:line="76" pos:column="10">auth_ipaddr<pos:position pos:line="76" pos:column="21"/></name> <operator pos:line="76" pos:column="22">=<pos:position pos:line="76" pos:column="23"/></operator> <call><name pos:line="76" pos:column="24">get_ipaddr<pos:position pos:line="76" pos:column="34"/></name><argument_list pos:line="76" pos:column="34">(<argument><expr><name pos:line="76" pos:column="35">server<pos:position pos:line="76" pos:column="41"/></name></expr></argument>)<pos:position pos:line="76" pos:column="42"/></argument_list></call><operator pos:line="76" pos:column="42">)<pos:position pos:line="76" pos:column="43"/></operator> <operator pos:line="76" pos:column="44">==<pos:position pos:line="76" pos:column="46"/></operator> <literal type="number" pos:line="76" pos:column="47">0<pos:position pos:line="76" pos:column="48"/></literal></expr>)<pos:position pos:line="76" pos:column="49"/></condition><then pos:line="76" pos:column="49"> <block pos:line="76" pos:column="50">{
        <expr_stmt><expr><call><name pos:line="77" pos:column="9">fprintf<pos:position pos:line="77" pos:column="16"/></name><argument_list pos:line="77" pos:column="16">(<argument><expr><name pos:line="77" pos:column="17">stderr<pos:position pos:line="77" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="77" pos:column="25">"Couldn't find host %s\n"<pos:position pos:line="77" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="77" pos:column="52">server<pos:position pos:line="77" pos:column="58"/></name></expr></argument>)<pos:position pos:line="77" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="60"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="78" pos:column="9">exit<pos:position pos:line="78" pos:column="13"/></name><argument_list pos:line="78" pos:column="13">(<argument><expr><literal type="number" pos:line="78" pos:column="14">1<pos:position pos:line="78" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="78" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="79" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="80" pos:column="5">sockfd<pos:position pos:line="80" pos:column="11"/></name> <operator pos:line="80" pos:column="12">=<pos:position pos:line="80" pos:column="13"/></operator> <call><name pos:line="80" pos:column="14">socket<pos:position pos:line="80" pos:column="20"/></name><argument_list pos:line="80" pos:column="20">(<argument><expr><name pos:line="80" pos:column="21">AF_INET<pos:position pos:line="80" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="30">SOCK_DGRAM<pos:position pos:line="80" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="80" pos:column="42">0<pos:position pos:line="80" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="45"/></expr_stmt>
    <if pos:line="81" pos:column="5">if <condition pos:line="81" pos:column="8">(<expr><name pos:line="81" pos:column="9">sockfd<pos:position pos:line="81" pos:column="15"/></name> <operator pos:line="81" pos:column="16">&lt;<pos:position pos:line="81" pos:column="20"/></operator> <literal type="number" pos:line="81" pos:column="18">0<pos:position pos:line="81" pos:column="19"/></literal></expr>)<pos:position pos:line="81" pos:column="20"/></condition><then pos:line="81" pos:column="20"> <block pos:line="81" pos:column="21">{
        <expr_stmt><expr><call><name pos:line="82" pos:column="9">perror<pos:position pos:line="82" pos:column="15"/></name><argument_list pos:line="82" pos:column="15">(<argument><expr><literal type="string" pos:line="82" pos:column="16">"socket"<pos:position pos:line="82" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="82" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="83" pos:column="9">exit<pos:position pos:line="83" pos:column="13"/></name><argument_list pos:line="83" pos:column="13">(<argument><expr><literal type="number" pos:line="83" pos:column="14">1<pos:position pos:line="83" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="84" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="85" pos:column="5">memset<pos:position pos:line="85" pos:column="11"/></name><argument_list pos:line="85" pos:column="11">(<argument><expr><operator pos:line="85" pos:column="12">&amp;<pos:position pos:line="85" pos:column="17"/></operator><name pos:line="85" pos:column="13">saremote<pos:position pos:line="85" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="85" pos:column="23">0<pos:position pos:line="85" pos:column="24"/></literal></expr></argument>, <argument><expr><sizeof pos:line="85" pos:column="26">sizeof<argument_list pos:line="85" pos:column="32">(<argument><expr><name pos:line="85" pos:column="33">saremote<pos:position pos:line="85" pos:column="41"/></name></expr></argument>)<pos:position pos:line="85" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="85" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="86" pos:column="5">saremote<pos:position pos:line="86" pos:column="13"/></name><operator pos:line="86" pos:column="13">.<pos:position pos:line="86" pos:column="14"/></operator><name pos:line="86" pos:column="14">sin_family<pos:position pos:line="86" pos:column="24"/></name></name> <operator pos:line="86" pos:column="25">=<pos:position pos:line="86" pos:column="26"/></operator> <name pos:line="86" pos:column="27">AF_INET<pos:position pos:line="86" pos:column="34"/></name></expr>;<pos:position pos:line="86" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="87" pos:column="5">saremote<pos:position pos:line="87" pos:column="13"/></name><operator pos:line="87" pos:column="13">.<pos:position pos:line="87" pos:column="14"/></operator><name pos:line="87" pos:column="14">sin_addr<pos:position pos:line="87" pos:column="22"/></name><operator pos:line="87" pos:column="22">.<pos:position pos:line="87" pos:column="23"/></operator><name pos:line="87" pos:column="23">s_addr<pos:position pos:line="87" pos:column="29"/></name></name> <operator pos:line="87" pos:column="30">=<pos:position pos:line="87" pos:column="31"/></operator> <call><name pos:line="87" pos:column="32">htonl<pos:position pos:line="87" pos:column="37"/></name><argument_list pos:line="87" pos:column="37">(<argument><expr><name pos:line="87" pos:column="38">auth_ipaddr<pos:position pos:line="87" pos:column="49"/></name></expr></argument>)<pos:position pos:line="87" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="88" pos:column="5">saremote<pos:position pos:line="88" pos:column="13"/></name><operator pos:line="88" pos:column="13">.<pos:position pos:line="88" pos:column="14"/></operator><name pos:line="88" pos:column="14">sin_port<pos:position pos:line="88" pos:column="22"/></name></name> <operator pos:line="88" pos:column="23">=<pos:position pos:line="88" pos:column="24"/></operator> <call><name pos:line="88" pos:column="25">htons<pos:position pos:line="88" pos:column="30"/></name><argument_list pos:line="88" pos:column="30">(<argument><expr><name pos:line="88" pos:column="31">svc_port<pos:position pos:line="88" pos:column="39"/></name></expr></argument>)<pos:position pos:line="88" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="41"/></expr_stmt>

    <if pos:line="90" pos:column="5">if <condition pos:line="90" pos:column="8">(<expr><call><name pos:line="90" pos:column="9">connect<pos:position pos:line="90" pos:column="16"/></name><argument_list pos:line="90" pos:column="16">(<argument><expr><name pos:line="90" pos:column="17">sockfd<pos:position pos:line="90" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="90" pos:column="25">(<pos:position pos:line="90" pos:column="26"/></operator>struct <name pos:line="90" pos:column="33">sockaddr<pos:position pos:line="90" pos:column="41"/></name> <operator pos:line="90" pos:column="42">*<pos:position pos:line="90" pos:column="43"/></operator><operator pos:line="90" pos:column="43">)<pos:position pos:line="90" pos:column="44"/></operator> <operator pos:line="90" pos:column="45">&amp;<pos:position pos:line="90" pos:column="50"/></operator><name pos:line="90" pos:column="46">saremote<pos:position pos:line="90" pos:column="54"/></name></expr></argument>, <argument><expr><sizeof pos:line="90" pos:column="56">sizeof<argument_list pos:line="90" pos:column="62">(<argument><expr><name pos:line="90" pos:column="63">saremote<pos:position pos:line="90" pos:column="71"/></name></expr></argument>)<pos:position pos:line="90" pos:column="72"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="90" pos:column="73"/></argument_list></call> <operator pos:line="90" pos:column="74">&lt;<pos:position pos:line="90" pos:column="78"/></operator> <literal type="number" pos:line="90" pos:column="76">0<pos:position pos:line="90" pos:column="77"/></literal></expr>)<pos:position pos:line="90" pos:column="78"/></condition><then pos:line="90" pos:column="78"> <block pos:line="90" pos:column="79">{
        <expr_stmt><expr><call><name pos:line="91" pos:column="9">perror<pos:position pos:line="91" pos:column="15"/></name><argument_list pos:line="91" pos:column="15">(<argument><expr><literal type="string" pos:line="91" pos:column="16">"connect"<pos:position pos:line="91" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="91" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="92" pos:column="9">exit<pos:position pos:line="92" pos:column="13"/></name><argument_list pos:line="92" pos:column="13">(<argument><expr><literal type="number" pos:line="92" pos:column="14">1<pos:position pos:line="92" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="92" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="93" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="94" pos:column="5">salen<pos:position pos:line="94" pos:column="10"/></name> <operator pos:line="94" pos:column="11">=<pos:position pos:line="94" pos:column="12"/></operator> <sizeof pos:line="94" pos:column="13">sizeof<argument_list pos:line="94" pos:column="19">(<argument><expr><name pos:line="94" pos:column="20">salocal<pos:position pos:line="94" pos:column="27"/></name></expr></argument>)<pos:position pos:line="94" pos:column="28"/></argument_list></sizeof></expr>;<pos:position pos:line="94" pos:column="29"/></expr_stmt>
    <if pos:line="95" pos:column="5">if <condition pos:line="95" pos:column="8">(<expr><call><name pos:line="95" pos:column="9">getsockname<pos:position pos:line="95" pos:column="20"/></name><argument_list pos:line="95" pos:column="20">(<argument><expr><name pos:line="95" pos:column="21">sockfd<pos:position pos:line="95" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="95" pos:column="29">(<pos:position pos:line="95" pos:column="30"/></operator>struct <name pos:line="95" pos:column="37">sockaddr<pos:position pos:line="95" pos:column="45"/></name> <operator pos:line="95" pos:column="46">*<pos:position pos:line="95" pos:column="47"/></operator><operator pos:line="95" pos:column="47">)<pos:position pos:line="95" pos:column="48"/></operator> <operator pos:line="95" pos:column="49">&amp;<pos:position pos:line="95" pos:column="54"/></operator><name pos:line="95" pos:column="50">salocal<pos:position pos:line="95" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="95" pos:column="59">&amp;<pos:position pos:line="95" pos:column="64"/></operator><name pos:line="95" pos:column="60">salen<pos:position pos:line="95" pos:column="65"/></name></expr></argument>)<pos:position pos:line="95" pos:column="66"/></argument_list></call> <operator pos:line="95" pos:column="67">&lt;<pos:position pos:line="95" pos:column="71"/></operator> <literal type="number" pos:line="95" pos:column="69">0<pos:position pos:line="95" pos:column="70"/></literal></expr>)<pos:position pos:line="95" pos:column="71"/></condition><then pos:line="95" pos:column="71"> <block pos:line="95" pos:column="72">{
        <expr_stmt><expr><call><name pos:line="96" pos:column="9">perror<pos:position pos:line="96" pos:column="15"/></name><argument_list pos:line="96" pos:column="15">(<argument><expr><literal type="string" pos:line="96" pos:column="16">"getsockname"<pos:position pos:line="96" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="96" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="97" pos:column="9">exit<pos:position pos:line="97" pos:column="13"/></name><argument_list pos:line="97" pos:column="13">(<argument><expr><literal type="number" pos:line="97" pos:column="14">1<pos:position pos:line="97" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="97" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="98" pos:column="6"/></block></then></if>
<cpp:ifdef pos:line="99" pos:column="1">#<cpp:directive pos:line="99" pos:column="2">ifdef<pos:position pos:line="99" pos:column="7"/></cpp:directive> <name pos:line="99" pos:column="8">O_NONBLOCK<pos:position pos:line="99" pos:column="18"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="100" pos:column="5">fcntl<pos:position pos:line="100" pos:column="10"/></name><argument_list pos:line="100" pos:column="10">(<argument><expr><name pos:line="100" pos:column="11">sockfd<pos:position pos:line="100" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="19">F_SETFL<pos:position pos:line="100" pos:column="26"/></name></expr></argument>, <argument><expr><call><name pos:line="100" pos:column="28">fcntl<pos:position pos:line="100" pos:column="33"/></name><argument_list pos:line="100" pos:column="33">(<argument><expr><name pos:line="100" pos:column="34">sockfd<pos:position pos:line="100" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="42">F_GETFL<pos:position pos:line="100" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="100" pos:column="51">0<pos:position pos:line="100" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="100" pos:column="53"/></argument_list></call> <operator pos:line="100" pos:column="54">|<pos:position pos:line="100" pos:column="55"/></operator> <name pos:line="100" pos:column="56">O_NONBLOCK<pos:position pos:line="100" pos:column="66"/></name></expr></argument>)<pos:position pos:line="100" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="68"/></expr_stmt>
<cpp:endif pos:line="101" pos:column="1">#<cpp:directive pos:line="101" pos:column="2">endif<pos:position pos:line="101" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><name pos:line="102" pos:column="5">nas_ipaddr<pos:position pos:line="102" pos:column="15"/></name> <operator pos:line="102" pos:column="16">=<pos:position pos:line="102" pos:column="17"/></operator> <call><name pos:line="102" pos:column="18">ntohl<pos:position pos:line="102" pos:column="23"/></name><argument_list pos:line="102" pos:column="23">(<argument><expr><name><name pos:line="102" pos:column="24">salocal<pos:position pos:line="102" pos:column="31"/></name><operator pos:line="102" pos:column="31">.<pos:position pos:line="102" pos:column="32"/></operator><name pos:line="102" pos:column="32">sin_addr<pos:position pos:line="102" pos:column="40"/></name><operator pos:line="102" pos:column="40">.<pos:position pos:line="102" pos:column="41"/></operator><name pos:line="102" pos:column="41">s_addr<pos:position pos:line="102" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="102" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="49"/></expr_stmt>
    <while pos:line="103" pos:column="5">while <condition pos:line="103" pos:column="11">(<expr><call><name pos:line="103" pos:column="12">fgets<pos:position pos:line="103" pos:column="17"/></name><argument_list pos:line="103" pos:column="17">(<argument><expr><name pos:line="103" pos:column="18">authstring<pos:position pos:line="103" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="30">MAXLINE<pos:position pos:line="103" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="39">stdin<pos:position pos:line="103" pos:column="44"/></name></expr></argument>)<pos:position pos:line="103" pos:column="45"/></argument_list></call> <operator pos:line="103" pos:column="46">!=<pos:position pos:line="103" pos:column="48"/></operator> <name pos:line="103" pos:column="49">NULL<pos:position pos:line="103" pos:column="53"/></name></expr>)<pos:position pos:line="103" pos:column="54"/></condition> <block pos:line="103" pos:column="55">{
        <decl_stmt><decl><type><name pos:line="104" pos:column="9">char<pos:position pos:line="104" pos:column="13"/></name> <modifier pos:line="104" pos:column="14">*<pos:position pos:line="104" pos:column="15"/></modifier></type><name pos:line="104" pos:column="15">end<pos:position pos:line="104" pos:column="18"/></name></decl>;<pos:position pos:line="104" pos:column="19"/></decl_stmt>
        <comment type="block" pos:line="105" pos:column="9">/* protect me form to long lines */</comment>
        <if pos:line="106" pos:column="9">if <condition pos:line="106" pos:column="12">(<expr><operator pos:line="106" pos:column="13">(<pos:position pos:line="106" pos:column="14"/></operator><name pos:line="106" pos:column="14">end<pos:position pos:line="106" pos:column="17"/></name> <operator pos:line="106" pos:column="18">=<pos:position pos:line="106" pos:column="19"/></operator> <call><name pos:line="106" pos:column="20">strchr<pos:position pos:line="106" pos:column="26"/></name><argument_list pos:line="106" pos:column="26">(<argument><expr><name pos:line="106" pos:column="27">authstring<pos:position pos:line="106" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="106" pos:column="39">'\n'<pos:position pos:line="106" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="106" pos:column="44"/></argument_list></call><operator pos:line="106" pos:column="44">)<pos:position pos:line="106" pos:column="45"/></operator> <operator pos:line="106" pos:column="46">==<pos:position pos:line="106" pos:column="48"/></operator> <name pos:line="106" pos:column="49">NULL<pos:position pos:line="106" pos:column="53"/></name></expr>)<pos:position pos:line="106" pos:column="54"/></condition><then pos:line="106" pos:column="54"> <block pos:line="106" pos:column="55">{
            <expr_stmt><expr><name pos:line="107" pos:column="13">err<pos:position pos:line="107" pos:column="16"/></name> <operator pos:line="107" pos:column="17">=<pos:position pos:line="107" pos:column="18"/></operator> <literal type="number" pos:line="107" pos:column="19">1<pos:position pos:line="107" pos:column="20"/></literal></expr>;<pos:position pos:line="107" pos:column="21"/></expr_stmt>
            <continue pos:line="108" pos:column="13">continue;<pos:position pos:line="108" pos:column="22"/></continue>
        }<pos:position pos:line="109" pos:column="10"/></block></then></if>
        <if pos:line="110" pos:column="9">if <condition pos:line="110" pos:column="12">(<expr><name pos:line="110" pos:column="13">err<pos:position pos:line="110" pos:column="16"/></name></expr>)<pos:position pos:line="110" pos:column="17"/></condition><then pos:line="110" pos:column="17"> <block pos:line="110" pos:column="18">{
            <expr_stmt><expr><call><name pos:line="111" pos:column="13">printf<pos:position pos:line="111" pos:column="19"/></name><argument_list pos:line="111" pos:column="19">(<argument><expr><literal type="string" pos:line="111" pos:column="20">"ERR\n"<pos:position pos:line="111" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="111" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><name pos:line="112" pos:column="13">err<pos:position pos:line="112" pos:column="16"/></name> <operator pos:line="112" pos:column="17">=<pos:position pos:line="112" pos:column="18"/></operator> <literal type="number" pos:line="112" pos:column="19">0<pos:position pos:line="112" pos:column="20"/></literal></expr>;<pos:position pos:line="112" pos:column="21"/></expr_stmt>
            <continue pos:line="113" pos:column="13">continue;<pos:position pos:line="113" pos:column="22"/></continue>
        }<pos:position pos:line="114" pos:column="10"/></block></then></if>
        <if pos:line="115" pos:column="9">if <condition pos:line="115" pos:column="12">(<expr><call><name pos:line="115" pos:column="13">strlen<pos:position pos:line="115" pos:column="19"/></name><argument_list pos:line="115" pos:column="19">(<argument><expr><name pos:line="115" pos:column="20">authstring<pos:position pos:line="115" pos:column="30"/></name></expr></argument>)<pos:position pos:line="115" pos:column="31"/></argument_list></call> <operator pos:line="115" pos:column="32">&gt;<pos:position pos:line="115" pos:column="36"/></operator> <name pos:line="115" pos:column="34">MAXLINE<pos:position pos:line="115" pos:column="41"/></name></expr>)<pos:position pos:line="115" pos:column="42"/></condition><then pos:line="115" pos:column="42"> <block pos:line="115" pos:column="43">{
            <expr_stmt><expr><call><name pos:line="116" pos:column="13">printf<pos:position pos:line="116" pos:column="19"/></name><argument_list pos:line="116" pos:column="19">(<argument><expr><literal type="string" pos:line="116" pos:column="20">"ERR\n"<pos:position pos:line="116" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="116" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="29"/></expr_stmt>
            <continue pos:line="117" pos:column="13">continue;<pos:position pos:line="117" pos:column="22"/></continue>
        }<pos:position pos:line="118" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="119" pos:column="9">/* Strip off the trailing newline */</comment>
        <expr_stmt><expr><operator pos:line="120" pos:column="9">*<pos:position pos:line="120" pos:column="10"/></operator><name pos:line="120" pos:column="10">end<pos:position pos:line="120" pos:column="13"/></name> <operator pos:line="120" pos:column="14">=<pos:position pos:line="120" pos:column="15"/></operator> <literal type="char" pos:line="120" pos:column="16">'\0'<pos:position pos:line="120" pos:column="20"/></literal></expr>;<pos:position pos:line="120" pos:column="21"/></expr_stmt>

        <comment type="block" pos:line="122" pos:column="9">/* Parse out the username and password */</comment>
        <expr_stmt><expr><name pos:line="123" pos:column="9">ptr<pos:position pos:line="123" pos:column="12"/></name> <operator pos:line="123" pos:column="13">=<pos:position pos:line="123" pos:column="14"/></operator> <name pos:line="123" pos:column="15">authstring<pos:position pos:line="123" pos:column="25"/></name></expr>;<pos:position pos:line="123" pos:column="26"/></expr_stmt>
        <while pos:line="124" pos:column="9">while <condition pos:line="124" pos:column="15">(<expr><call><name pos:line="124" pos:column="16">isspace<pos:position pos:line="124" pos:column="23"/></name><argument_list pos:line="124" pos:column="23">(<argument><expr><operator pos:line="124" pos:column="24">(<pos:position pos:line="124" pos:column="25"/></operator><name pos:line="124" pos:column="25">int<pos:position pos:line="124" pos:column="28"/></name><operator pos:line="124" pos:column="28">)<pos:position pos:line="124" pos:column="29"/></operator><operator pos:line="124" pos:column="29">*<pos:position pos:line="124" pos:column="30"/></operator><name pos:line="124" pos:column="30">ptr<pos:position pos:line="124" pos:column="33"/></name></expr></argument>)<pos:position pos:line="124" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="124" pos:column="35"/></condition>
            <block type="pseudo"><expr_stmt><expr><name pos:line="125" pos:column="13">ptr<pos:position pos:line="125" pos:column="16"/></name><operator pos:line="125" pos:column="16">++<pos:position pos:line="125" pos:column="18"/></operator></expr>;<pos:position pos:line="125" pos:column="19"/></expr_stmt></block></while>
        <if pos:line="126" pos:column="9">if <condition pos:line="126" pos:column="12">(<expr><operator pos:line="126" pos:column="13">(<pos:position pos:line="126" pos:column="14"/></operator><name pos:line="126" pos:column="14">end<pos:position pos:line="126" pos:column="17"/></name> <operator pos:line="126" pos:column="18">=<pos:position pos:line="126" pos:column="19"/></operator> <call><name pos:line="126" pos:column="20">strchr<pos:position pos:line="126" pos:column="26"/></name><argument_list pos:line="126" pos:column="26">(<argument><expr><name pos:line="126" pos:column="27">ptr<pos:position pos:line="126" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="126" pos:column="32">' '<pos:position pos:line="126" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="126" pos:column="36"/></argument_list></call><operator pos:line="126" pos:column="36">)<pos:position pos:line="126" pos:column="37"/></operator> <operator pos:line="126" pos:column="38">==<pos:position pos:line="126" pos:column="40"/></operator> <name pos:line="126" pos:column="41">NULL<pos:position pos:line="126" pos:column="45"/></name></expr>)<pos:position pos:line="126" pos:column="46"/></condition><then pos:line="126" pos:column="46"> <block pos:line="126" pos:column="47">{
            <expr_stmt><expr><call><name pos:line="127" pos:column="13">printf<pos:position pos:line="127" pos:column="19"/></name><argument_list pos:line="127" pos:column="19">(<argument><expr><literal type="string" pos:line="127" pos:column="20">"ERR\n"<pos:position pos:line="127" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="127" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="29"/></expr_stmt>	<comment type="block" pos:line="127" pos:column="33">/* No password */</comment>
            <continue pos:line="128" pos:column="13">continue;<pos:position pos:line="128" pos:column="22"/></continue>
        }<pos:position pos:line="129" pos:column="10"/></block></then></if>
        <expr_stmt><expr><operator pos:line="130" pos:column="9">*<pos:position pos:line="130" pos:column="10"/></operator><name pos:line="130" pos:column="10">end<pos:position pos:line="130" pos:column="13"/></name> <operator pos:line="130" pos:column="14">=<pos:position pos:line="130" pos:column="15"/></operator> <literal type="char" pos:line="130" pos:column="16">'\0'<pos:position pos:line="130" pos:column="20"/></literal></expr>;<pos:position pos:line="130" pos:column="21"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="131" pos:column="9">urldecode<pos:position pos:line="131" pos:column="18"/></name><argument_list pos:line="131" pos:column="18">(<argument><expr><name pos:line="131" pos:column="19">username<pos:position pos:line="131" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="131" pos:column="29">ptr<pos:position pos:line="131" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="131" pos:column="34">MAXPWNAM<pos:position pos:line="131" pos:column="42"/></name></expr></argument>)<pos:position pos:line="131" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><name pos:line="132" pos:column="9">ptr<pos:position pos:line="132" pos:column="12"/></name> <operator pos:line="132" pos:column="13">=<pos:position pos:line="132" pos:column="14"/></operator> <name pos:line="132" pos:column="15">end<pos:position pos:line="132" pos:column="18"/></name> <operator pos:line="132" pos:column="19">+<pos:position pos:line="132" pos:column="20"/></operator> <literal type="number" pos:line="132" pos:column="21">1<pos:position pos:line="132" pos:column="22"/></literal></expr>;<pos:position pos:line="132" pos:column="23"/></expr_stmt>
        <while pos:line="133" pos:column="9">while <condition pos:line="133" pos:column="15">(<expr><call><name pos:line="133" pos:column="16">isspace<pos:position pos:line="133" pos:column="23"/></name><argument_list pos:line="133" pos:column="23">(<argument><expr><operator pos:line="133" pos:column="24">(<pos:position pos:line="133" pos:column="25"/></operator><name pos:line="133" pos:column="25">int<pos:position pos:line="133" pos:column="28"/></name><operator pos:line="133" pos:column="28">)<pos:position pos:line="133" pos:column="29"/></operator><operator pos:line="133" pos:column="29">*<pos:position pos:line="133" pos:column="30"/></operator><name pos:line="133" pos:column="30">ptr<pos:position pos:line="133" pos:column="33"/></name></expr></argument>)<pos:position pos:line="133" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="133" pos:column="35"/></condition>
            <block type="pseudo"><expr_stmt><expr><name pos:line="134" pos:column="13">ptr<pos:position pos:line="134" pos:column="16"/></name><operator pos:line="134" pos:column="16">++<pos:position pos:line="134" pos:column="18"/></operator></expr>;<pos:position pos:line="134" pos:column="19"/></expr_stmt></block></while>
        <expr_stmt><expr><call><name pos:line="135" pos:column="9">urldecode<pos:position pos:line="135" pos:column="18"/></name><argument_list pos:line="135" pos:column="18">(<argument><expr><name pos:line="135" pos:column="19">passwd<pos:position pos:line="135" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="27">ptr<pos:position pos:line="135" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="32">MAXPASS<pos:position pos:line="135" pos:column="39"/></name></expr></argument>)<pos:position pos:line="135" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="41"/></expr_stmt>

        <if pos:line="137" pos:column="9">if <condition pos:line="137" pos:column="12">(<expr><call><name pos:line="137" pos:column="13">authenticate<pos:position pos:line="137" pos:column="25"/></name><argument_list pos:line="137" pos:column="25">(<argument><expr><name pos:line="137" pos:column="26">sockfd<pos:position pos:line="137" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="137" pos:column="34">username<pos:position pos:line="137" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="137" pos:column="44">passwd<pos:position pos:line="137" pos:column="50"/></name></expr></argument>)<pos:position pos:line="137" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="137" pos:column="52"/></condition><then pos:line="137" pos:column="52">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="138" pos:column="13">printf<pos:position pos:line="138" pos:column="19"/></name><argument_list pos:line="138" pos:column="19">(<argument><expr><literal type="string" pos:line="138" pos:column="20">"OK\n"<pos:position pos:line="138" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="138" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="28"/></expr_stmt></block></then>
        <else pos:line="139" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="140" pos:column="13">printf<pos:position pos:line="140" pos:column="19"/></name><argument_list pos:line="140" pos:column="19">(<argument><expr><literal type="string" pos:line="140" pos:column="20">"ERR\n"<pos:position pos:line="140" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="140" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="29"/></expr_stmt></block></else></if>
    }<pos:position pos:line="141" pos:column="6"/></block></while>
    <expr_stmt><expr><call><name pos:line="142" pos:column="5">close<pos:position pos:line="142" pos:column="10"/></name><argument_list pos:line="142" pos:column="10">(<argument><expr><name pos:line="142" pos:column="11">sockfd<pos:position pos:line="142" pos:column="17"/></name></expr></argument>)<pos:position pos:line="142" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="143" pos:column="5">exit<pos:position pos:line="143" pos:column="9"/></name><argument_list pos:line="143" pos:column="9">(<argument><expr><literal type="number" pos:line="143" pos:column="10">1<pos:position pos:line="143" pos:column="11"/></literal></expr></argument>)<pos:position pos:line="143" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="13"/></expr_stmt>
}<pos:position pos:line="144" pos:column="2"/></block></function></unit>
