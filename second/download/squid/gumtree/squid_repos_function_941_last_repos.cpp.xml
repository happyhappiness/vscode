<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_941_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Instance<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">ThrowIfAlreadyRunning<pos:position pos:line="2" pos:column="32"/></name></name><parameter_list pos:line="2" pos:column="32">()<pos:position pos:line="2" pos:column="34"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <specifier pos:line="4" pos:column="11">auto<pos:position pos:line="4" pos:column="15"/></specifier></type> <name pos:line="4" pos:column="16">filename<pos:position pos:line="4" pos:column="24"/></name> <init pos:line="4" pos:column="25">= <expr><call><name pos:line="4" pos:column="27">PidFilename<pos:position pos:line="4" pos:column="38"/></name><argument_list pos:line="4" pos:column="38">()<pos:position pos:line="4" pos:column="40"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="41"/></decl_stmt>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><call><name><name pos:line="5" pos:column="9">filename<pos:position pos:line="5" pos:column="17"/></name><operator pos:line="5" pos:column="17">.<pos:position pos:line="5" pos:column="18"/></operator><name pos:line="5" pos:column="18">isEmpty<pos:position pos:line="5" pos:column="25"/></name></name><argument_list pos:line="5" pos:column="25">()<pos:position pos:line="5" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="28"/></condition><then pos:line="5" pos:column="28">
        <block type="pseudo"><return pos:line="6" pos:column="9">return;<pos:position pos:line="6" pos:column="16"/></return></block></then></if> <comment type="line" pos:line="6" pos:column="17">// the check is impossible</comment>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<decl><type><specifier pos:line="8" pos:column="9">const<pos:position pos:line="8" pos:column="14"/></specifier> <specifier pos:line="8" pos:column="15">auto<pos:position pos:line="8" pos:column="19"/></specifier></type> <name pos:line="8" pos:column="20">filePtr<pos:position pos:line="8" pos:column="27"/></name> <init pos:line="8" pos:column="28">= <expr><call><name><name pos:line="8" pos:column="30">File<pos:position pos:line="8" pos:column="34"/></name><operator pos:line="8" pos:column="34">::<pos:position pos:line="8" pos:column="36"/></operator><name pos:line="8" pos:column="36">Optional<pos:position pos:line="8" pos:column="44"/></name></name><argument_list pos:line="8" pos:column="44">(<argument><expr><name pos:line="8" pos:column="45">filename<pos:position pos:line="8" pos:column="53"/></name></expr></argument>, <argument><expr><call><name><name pos:line="8" pos:column="55">File<pos:position pos:line="8" pos:column="59"/></name><operator pos:line="8" pos:column="59">::<pos:position pos:line="8" pos:column="61"/></operator><name pos:line="8" pos:column="61">Be<pos:position pos:line="8" pos:column="63"/></name><operator pos:line="8" pos:column="63">::<pos:position pos:line="8" pos:column="65"/></operator><name pos:line="8" pos:column="65">ReadOnly<pos:position pos:line="8" pos:column="73"/></name></name><argument_list pos:line="8" pos:column="73">()<pos:position pos:line="8" pos:column="75"/></argument_list></call><operator pos:line="8" pos:column="75">.<pos:position pos:line="8" pos:column="76"/></operator><call><name pos:line="8" pos:column="76">locked<pos:position pos:line="8" pos:column="82"/></name><argument_list pos:line="8" pos:column="82">()<pos:position pos:line="8" pos:column="84"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="85"/></argument_list></call></expr></init></decl>)<pos:position pos:line="8" pos:column="86"/></condition><then pos:line="8" pos:column="86"> <block pos:line="8" pos:column="87">{
        <decl_stmt><decl><type><specifier pos:line="9" pos:column="9">const<pos:position pos:line="9" pos:column="14"/></specifier> <name><name pos:line="9" pos:column="15">std<pos:position pos:line="9" pos:column="18"/></name><operator pos:line="9" pos:column="18">::<pos:position pos:line="9" pos:column="20"/></operator><name><name pos:line="9" pos:column="20">unique_ptr<pos:position pos:line="9" pos:column="30"/></name><argument_list type="generic" pos:line="9" pos:column="30">&lt;<argument><expr><name pos:line="9" pos:column="31">File<pos:position pos:line="9" pos:column="35"/></name></expr></argument>&gt;<pos:position pos:line="9" pos:column="39"/></argument_list></name></name></type> <name pos:line="9" pos:column="37">pidFile<pos:position pos:line="9" pos:column="44"/></name><argument_list pos:line="9" pos:column="44">(<argument><expr><name pos:line="9" pos:column="45">filePtr<pos:position pos:line="9" pos:column="52"/></name></expr></argument>)<pos:position pos:line="9" pos:column="53"/></argument_list></decl>;<pos:position pos:line="9" pos:column="54"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">ThrowIfAlreadyRunningWith<pos:position pos:line="10" pos:column="34"/></name><argument_list pos:line="10" pos:column="34">(<argument><expr><operator pos:line="10" pos:column="35">*<pos:position pos:line="10" pos:column="36"/></operator><name pos:line="10" pos:column="36">pidFile<pos:position pos:line="10" pos:column="43"/></name></expr></argument>)<pos:position pos:line="10" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="11" pos:column="6"/></block></then> <else pos:line="11" pos:column="7">else <block pos:line="11" pos:column="12">{
        <comment type="line" pos:line="12" pos:column="9">// It is best to assume then to check because checking without a lock</comment>
        <comment type="line" pos:line="13" pos:column="9">// might lead to false positives that lead to no Squid starting at all!</comment>
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">debugs<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><literal type="number" pos:line="14" pos:column="16">50<pos:position pos:line="14" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="20">5<pos:position pos:line="14" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="23">"cannot lock "<pos:position pos:line="14" pos:column="37"/></literal> <operator pos:line="14" pos:column="38">&lt;&lt;<pos:position pos:line="14" pos:column="46"/></operator> <name pos:line="14" pos:column="41">TheFile<pos:position pos:line="14" pos:column="48"/></name> <operator pos:line="14" pos:column="49">&lt;&lt;<pos:position pos:line="14" pos:column="57"/></operator> <literal type="string" pos:line="14" pos:column="52">"; assuming no other Squid is running"<pos:position pos:line="14" pos:column="90"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="92"/></expr_stmt>
        <comment type="line" pos:line="15" pos:column="9">// If our assumption is false, we will fail to _create_ the PID file,</comment>
        <comment type="line" pos:line="16" pos:column="9">// and, hence, will not start, allowing that other Squid to run.</comment>
    }<pos:position pos:line="17" pos:column="6"/></block></else></if>
}<pos:position pos:line="18" pos:column="2"/></block></function></unit>
