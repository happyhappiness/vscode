<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4080_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Icap<pos:position pos:line="1" pos:column="22"/></name><operator pos:line="1" pos:column="22">::<pos:position pos:line="1" pos:column="24"/></operator><name pos:line="1" pos:column="24">ModXact<pos:position pos:line="1" pos:column="31"/></name><operator pos:line="1" pos:column="31">::<pos:position pos:line="1" pos:column="33"/></operator><name pos:line="1" pos:column="33">parseBody<pos:position pos:line="1" pos:column="42"/></name></name><parameter_list pos:line="1" pos:column="42">()<pos:position pos:line="1" pos:column="44"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="3" pos:column="5">Must<pos:position pos:line="3" pos:column="9"/></name><argument_list pos:line="3" pos:column="9">(<argument><expr><name><name pos:line="3" pos:column="10">state<pos:position pos:line="3" pos:column="15"/></name><operator pos:line="3" pos:column="15">.<pos:position pos:line="3" pos:column="16"/></operator><name pos:line="3" pos:column="16">parsing<pos:position pos:line="3" pos:column="23"/></name></name> <operator pos:line="3" pos:column="24">==<pos:position pos:line="3" pos:column="26"/></operator> <name><name pos:line="3" pos:column="27">State<pos:position pos:line="3" pos:column="32"/></name><operator pos:line="3" pos:column="32">::<pos:position pos:line="3" pos:column="34"/></operator><name pos:line="3" pos:column="34">psBody<pos:position pos:line="3" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="3" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">Must<pos:position pos:line="4" pos:column="9"/></name><argument_list pos:line="4" pos:column="9">(<argument><expr><name pos:line="4" pos:column="10">bodyParser<pos:position pos:line="4" pos:column="20"/></name></expr></argument>)<pos:position pos:line="4" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="22"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="6" pos:column="5">debugs<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><literal type="number" pos:line="6" pos:column="12">93<pos:position pos:line="6" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="16">5<pos:position pos:line="6" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="6" pos:column="19">HERE<pos:position pos:line="6" pos:column="23"/></name> <operator pos:line="6" pos:column="24">&lt;&lt;<pos:position pos:line="6" pos:column="32"/></operator> <literal type="string" pos:line="6" pos:column="27">"have "<pos:position pos:line="6" pos:column="34"/></literal> <operator pos:line="6" pos:column="35">&lt;&lt;<pos:position pos:line="6" pos:column="43"/></operator> <call><name><name pos:line="6" pos:column="38">readBuf<pos:position pos:line="6" pos:column="45"/></name><operator pos:line="6" pos:column="45">.<pos:position pos:line="6" pos:column="46"/></operator><name pos:line="6" pos:column="46">contentSize<pos:position pos:line="6" pos:column="57"/></name></name><argument_list pos:line="6" pos:column="57">()<pos:position pos:line="6" pos:column="59"/></argument_list></call> <operator pos:line="6" pos:column="60">&lt;&lt;<pos:position pos:line="6" pos:column="68"/></operator> <literal type="string" pos:line="6" pos:column="63">" body bytes to parse"<pos:position pos:line="6" pos:column="85"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="87"/></expr_stmt>

    <comment type="line" pos:line="8" pos:column="5">// the parser will throw on errors</comment>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">BodyPipeCheckout<pos:position pos:line="9" pos:column="21"/></name></type> <name pos:line="9" pos:column="22">bpc<pos:position pos:line="9" pos:column="25"/></name><argument_list pos:line="9" pos:column="25">(<argument><expr><operator pos:line="9" pos:column="26">*<pos:position pos:line="9" pos:column="27"/></operator><name><name pos:line="9" pos:column="27">adapted<pos:position pos:line="9" pos:column="34"/></name><operator pos:line="9" pos:column="34">.<pos:position pos:line="9" pos:column="35"/></operator><name pos:line="9" pos:column="35">body_pipe<pos:position pos:line="9" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="45"/></argument_list></decl>;<pos:position pos:line="9" pos:column="46"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="10" pos:column="5">const<pos:position pos:line="10" pos:column="10"/></specifier> <name pos:line="10" pos:column="11">bool<pos:position pos:line="10" pos:column="15"/></name></type> <name pos:line="10" pos:column="16">parsed<pos:position pos:line="10" pos:column="22"/></name> <init pos:line="10" pos:column="23">= <expr><call><name><name pos:line="10" pos:column="25">bodyParser<pos:position pos:line="10" pos:column="35"/></name><operator pos:line="10" pos:column="35">-&gt;<pos:position pos:line="10" pos:column="40"/></operator><name pos:line="10" pos:column="37">parse<pos:position pos:line="10" pos:column="42"/></name></name><argument_list pos:line="10" pos:column="42">(<argument><expr><operator pos:line="10" pos:column="43">&amp;<pos:position pos:line="10" pos:column="48"/></operator><name pos:line="10" pos:column="44">readBuf<pos:position pos:line="10" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="53">&amp;<pos:position pos:line="10" pos:column="58"/></operator><name><name pos:line="10" pos:column="54">bpc<pos:position pos:line="10" pos:column="57"/></name><operator pos:line="10" pos:column="57">.<pos:position pos:line="10" pos:column="58"/></operator><name pos:line="10" pos:column="58">buf<pos:position pos:line="10" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="63"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="11" pos:column="5">bpc<pos:position pos:line="11" pos:column="8"/></name><operator pos:line="11" pos:column="8">.<pos:position pos:line="11" pos:column="9"/></operator><name pos:line="11" pos:column="9">checkIn<pos:position pos:line="11" pos:column="16"/></name></name><argument_list pos:line="11" pos:column="16">()<pos:position pos:line="11" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="19"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="13" pos:column="5">debugs<pos:position pos:line="13" pos:column="11"/></name><argument_list pos:line="13" pos:column="11">(<argument><expr><literal type="number" pos:line="13" pos:column="12">93<pos:position pos:line="13" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="16">5<pos:position pos:line="13" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="19">HERE<pos:position pos:line="13" pos:column="23"/></name> <operator pos:line="13" pos:column="24">&lt;&lt;<pos:position pos:line="13" pos:column="32"/></operator> <literal type="string" pos:line="13" pos:column="27">"have "<pos:position pos:line="13" pos:column="34"/></literal> <operator pos:line="13" pos:column="35">&lt;&lt;<pos:position pos:line="13" pos:column="43"/></operator> <call><name><name pos:line="13" pos:column="38">readBuf<pos:position pos:line="13" pos:column="45"/></name><operator pos:line="13" pos:column="45">.<pos:position pos:line="13" pos:column="46"/></operator><name pos:line="13" pos:column="46">contentSize<pos:position pos:line="13" pos:column="57"/></name></name><argument_list pos:line="13" pos:column="57">()<pos:position pos:line="13" pos:column="59"/></argument_list></call> <operator pos:line="13" pos:column="60">&lt;&lt;<pos:position pos:line="13" pos:column="68"/></operator> <literal type="string" pos:line="13" pos:column="63">" body bytes after "<pos:position pos:line="13" pos:column="83"/></literal> <operator pos:line="13" pos:column="84">&lt;&lt;<pos:position pos:line="13" pos:column="92"/></operator>
           <literal type="string" pos:line="14" pos:column="12">"parse; parsed all: "<pos:position pos:line="14" pos:column="33"/></literal> <operator pos:line="14" pos:column="34">&lt;&lt;<pos:position pos:line="14" pos:column="42"/></operator> <name pos:line="14" pos:column="37">parsed<pos:position pos:line="14" pos:column="43"/></name></expr></argument>)<pos:position pos:line="14" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><name pos:line="15" pos:column="5">replyHttpBodySize<pos:position pos:line="15" pos:column="22"/></name> <operator pos:line="15" pos:column="23">+=<pos:position pos:line="15" pos:column="25"/></operator> <call><name><name pos:line="15" pos:column="26">adapted<pos:position pos:line="15" pos:column="33"/></name><operator pos:line="15" pos:column="33">.<pos:position pos:line="15" pos:column="34"/></operator><name pos:line="15" pos:column="34">body_pipe<pos:position pos:line="15" pos:column="43"/></name><operator pos:line="15" pos:column="43">-&gt;<pos:position pos:line="15" pos:column="48"/></operator><name pos:line="15" pos:column="45">buf<pos:position pos:line="15" pos:column="48"/></name></name><argument_list pos:line="15" pos:column="48">()<pos:position pos:line="15" pos:column="50"/></argument_list></call><operator pos:line="15" pos:column="50">.<pos:position pos:line="15" pos:column="51"/></operator><call><name pos:line="15" pos:column="51">contentSize<pos:position pos:line="15" pos:column="62"/></name><argument_list pos:line="15" pos:column="62">()<pos:position pos:line="15" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="65"/></expr_stmt>

    <comment type="line" pos:line="17" pos:column="5">// TODO: expose BodyPipe::putSize() to make this check simpler and clearer</comment>
    <comment type="line" pos:line="18" pos:column="5">// TODO: do we really need this if we disable when sending headers?</comment>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><call><name><name pos:line="19" pos:column="9">adapted<pos:position pos:line="19" pos:column="16"/></name><operator pos:line="19" pos:column="16">.<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="17">body_pipe<pos:position pos:line="19" pos:column="26"/></name><operator pos:line="19" pos:column="26">-&gt;<pos:position pos:line="19" pos:column="31"/></operator><name pos:line="19" pos:column="28">buf<pos:position pos:line="19" pos:column="31"/></name></name><argument_list pos:line="19" pos:column="31">()<pos:position pos:line="19" pos:column="33"/></argument_list></call><operator pos:line="19" pos:column="33">.<pos:position pos:line="19" pos:column="34"/></operator><call><name pos:line="19" pos:column="34">contentSize<pos:position pos:line="19" pos:column="45"/></name><argument_list pos:line="19" pos:column="45">()<pos:position pos:line="19" pos:column="47"/></argument_list></call> <operator pos:line="19" pos:column="48">&gt;<pos:position pos:line="19" pos:column="52"/></operator> <literal type="number" pos:line="19" pos:column="50">0<pos:position pos:line="19" pos:column="51"/></literal></expr>)<pos:position pos:line="19" pos:column="52"/></condition><then pos:line="19" pos:column="52"> <block pos:line="19" pos:column="53">{ <comment type="line" pos:line="19" pos:column="55">// parsed something sometime</comment>
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">disableRepeats<pos:position pos:line="20" pos:column="23"/></name><argument_list pos:line="20" pos:column="23">(<argument><expr><literal type="string" pos:line="20" pos:column="24">"sent adapted content"<pos:position pos:line="20" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="48"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">disableBypass<pos:position pos:line="21" pos:column="22"/></name><argument_list pos:line="21" pos:column="22">(<argument><expr><literal type="string" pos:line="21" pos:column="23">"sent adapted content"<pos:position pos:line="21" pos:column="45"/></literal></expr></argument>, <argument><expr><literal type="boolean" pos:line="21" pos:column="47">true<pos:position pos:line="21" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="53"/></expr_stmt>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>

    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><name pos:line="24" pos:column="9">parsed<pos:position pos:line="24" pos:column="15"/></name></expr>)<pos:position pos:line="24" pos:column="16"/></condition><then pos:line="24" pos:column="16"> <block pos:line="24" pos:column="17">{
        <if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><name><name pos:line="25" pos:column="13">state<pos:position pos:line="25" pos:column="18"/></name><operator pos:line="25" pos:column="18">.<pos:position pos:line="25" pos:column="19"/></operator><name pos:line="25" pos:column="19">readyForUob<pos:position pos:line="25" pos:column="30"/></name></name> <operator pos:line="25" pos:column="31">&amp;&amp;<pos:position pos:line="25" pos:column="41"/></operator> <name><name pos:line="25" pos:column="34">bodyParser<pos:position pos:line="25" pos:column="44"/></name><operator pos:line="25" pos:column="44">-&gt;<pos:position pos:line="25" pos:column="49"/></operator><name pos:line="25" pos:column="46">useOriginBody<pos:position pos:line="25" pos:column="59"/></name></name> <operator pos:line="25" pos:column="60">&gt;=<pos:position pos:line="25" pos:column="65"/></operator> <literal type="number" pos:line="25" pos:column="63">0<pos:position pos:line="25" pos:column="64"/></literal></expr>)<pos:position pos:line="25" pos:column="65"/></condition><then pos:line="25" pos:column="65"> <block pos:line="25" pos:column="66">{
            <expr_stmt><expr><call><name pos:line="26" pos:column="13">prepPartialBodyEchoing<pos:position pos:line="26" pos:column="35"/></name><argument_list pos:line="26" pos:column="35">(
                <argument><expr><cast type="static" pos:line="27" pos:column="17">static_cast<argument_list type="generic" pos:line="27" pos:column="28">&lt;<argument><expr><name pos:line="27" pos:column="29">uint64_t<pos:position pos:line="27" pos:column="37"/></name></expr></argument>&gt;<pos:position pos:line="27" pos:column="41"/></argument_list><argument_list pos:line="27" pos:column="38">(<argument><expr><name><name pos:line="27" pos:column="39">bodyParser<pos:position pos:line="27" pos:column="49"/></name><operator pos:line="27" pos:column="49">-&gt;<pos:position pos:line="27" pos:column="54"/></operator><name pos:line="27" pos:column="51">useOriginBody<pos:position pos:line="27" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="65"/></argument_list></cast></expr></argument>)<pos:position pos:line="27" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="67"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="28" pos:column="13">stopParsing<pos:position pos:line="28" pos:column="24"/></name><argument_list pos:line="28" pos:column="24">()<pos:position pos:line="28" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="27"/></expr_stmt>
            <return pos:line="29" pos:column="13">return;<pos:position pos:line="29" pos:column="20"/></return>
        }<pos:position pos:line="30" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="32" pos:column="9">stopParsing<pos:position pos:line="32" pos:column="20"/></name><argument_list pos:line="32" pos:column="20">()<pos:position pos:line="32" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="33" pos:column="9">stopSending<pos:position pos:line="33" pos:column="20"/></name><argument_list pos:line="33" pos:column="20">(<argument><expr><literal type="boolean" pos:line="33" pos:column="21">true<pos:position pos:line="33" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="27"/></expr_stmt> <comment type="line" pos:line="33" pos:column="28">// the parser succeeds only if all parsed data fits</comment>
        <return pos:line="34" pos:column="9">return;<pos:position pos:line="34" pos:column="16"/></return>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="37" pos:column="5">debugs<pos:position pos:line="37" pos:column="11"/></name><argument_list pos:line="37" pos:column="11">(<argument><expr><literal type="number" pos:line="37" pos:column="12">93<pos:position pos:line="37" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="37" pos:column="15">3<pos:position pos:line="37" pos:column="16"/></literal></expr></argument>,<argument><expr><name pos:line="37" pos:column="17">HERE<pos:position pos:line="37" pos:column="21"/></name> <operator pos:line="37" pos:column="22">&lt;&lt;<pos:position pos:line="37" pos:column="30"/></operator> <name pos:line="37" pos:column="25">this<pos:position pos:line="37" pos:column="29"/></name> <operator pos:line="37" pos:column="30">&lt;&lt;<pos:position pos:line="37" pos:column="38"/></operator> <literal type="string" pos:line="37" pos:column="33">" needsMoreData = "<pos:position pos:line="37" pos:column="52"/></literal> <operator pos:line="37" pos:column="53">&lt;&lt;<pos:position pos:line="37" pos:column="61"/></operator> <call><name><name pos:line="37" pos:column="56">bodyParser<pos:position pos:line="37" pos:column="66"/></name><operator pos:line="37" pos:column="66">-&gt;<pos:position pos:line="37" pos:column="71"/></operator><name pos:line="37" pos:column="68">needsMoreData<pos:position pos:line="37" pos:column="81"/></name></name><argument_list pos:line="37" pos:column="81">()<pos:position pos:line="37" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="37" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="85"/></expr_stmt>

    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><call><name><name pos:line="39" pos:column="9">bodyParser<pos:position pos:line="39" pos:column="19"/></name><operator pos:line="39" pos:column="19">-&gt;<pos:position pos:line="39" pos:column="24"/></operator><name pos:line="39" pos:column="21">needsMoreData<pos:position pos:line="39" pos:column="34"/></name></name><argument_list pos:line="39" pos:column="34">()<pos:position pos:line="39" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="37"/></condition><then pos:line="39" pos:column="37"> <block pos:line="39" pos:column="38">{
        <expr_stmt><expr><call><name pos:line="40" pos:column="9">debugs<pos:position pos:line="40" pos:column="15"/></name><argument_list pos:line="40" pos:column="15">(<argument><expr><literal type="number" pos:line="40" pos:column="16">93<pos:position pos:line="40" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="40" pos:column="19">3<pos:position pos:line="40" pos:column="20"/></literal></expr></argument>,<argument><expr><name pos:line="40" pos:column="21">HERE<pos:position pos:line="40" pos:column="25"/></name> <operator pos:line="40" pos:column="26">&lt;&lt;<pos:position pos:line="40" pos:column="34"/></operator> <name pos:line="40" pos:column="29">this<pos:position pos:line="40" pos:column="33"/></name></expr></argument>)<pos:position pos:line="40" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="41" pos:column="9">Must<pos:position pos:line="41" pos:column="13"/></name><argument_list pos:line="41" pos:column="13">(<argument><expr><call><name pos:line="41" pos:column="14">mayReadMore<pos:position pos:line="41" pos:column="25"/></name><argument_list pos:line="41" pos:column="25">()<pos:position pos:line="41" pos:column="27"/></argument_list></call></expr></argument>)<pos:position pos:line="41" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="42" pos:column="9">readMore<pos:position pos:line="42" pos:column="17"/></name><argument_list pos:line="42" pos:column="17">()<pos:position pos:line="42" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if>

    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><call><name><name pos:line="45" pos:column="9">bodyParser<pos:position pos:line="45" pos:column="19"/></name><operator pos:line="45" pos:column="19">-&gt;<pos:position pos:line="45" pos:column="24"/></operator><name pos:line="45" pos:column="21">needsMoreSpace<pos:position pos:line="45" pos:column="35"/></name></name><argument_list pos:line="45" pos:column="35">()<pos:position pos:line="45" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="38"/></condition><then pos:line="45" pos:column="38"> <block pos:line="45" pos:column="39">{
        <expr_stmt><expr><call><name pos:line="46" pos:column="9">Must<pos:position pos:line="46" pos:column="13"/></name><argument_list pos:line="46" pos:column="13">(<argument><expr><operator pos:line="46" pos:column="14">!<pos:position pos:line="46" pos:column="15"/></operator><call><name pos:line="46" pos:column="15">doneSending<pos:position pos:line="46" pos:column="26"/></name><argument_list pos:line="46" pos:column="26">()<pos:position pos:line="46" pos:column="28"/></argument_list></call></expr></argument>)<pos:position pos:line="46" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="30"/></expr_stmt> <comment type="line" pos:line="46" pos:column="31">// can hope for more space</comment>
        <expr_stmt><expr><call><name pos:line="47" pos:column="9">Must<pos:position pos:line="47" pos:column="13"/></name><argument_list pos:line="47" pos:column="13">(<argument><expr><call><name><name pos:line="47" pos:column="14">adapted<pos:position pos:line="47" pos:column="21"/></name><operator pos:line="47" pos:column="21">.<pos:position pos:line="47" pos:column="22"/></operator><name pos:line="47" pos:column="22">body_pipe<pos:position pos:line="47" pos:column="31"/></name><operator pos:line="47" pos:column="31">-&gt;<pos:position pos:line="47" pos:column="36"/></operator><name pos:line="47" pos:column="33">buf<pos:position pos:line="47" pos:column="36"/></name></name><argument_list pos:line="47" pos:column="36">()<pos:position pos:line="47" pos:column="38"/></argument_list></call><operator pos:line="47" pos:column="38">.<pos:position pos:line="47" pos:column="39"/></operator><call><name pos:line="47" pos:column="39">contentSize<pos:position pos:line="47" pos:column="50"/></name><argument_list pos:line="47" pos:column="50">()<pos:position pos:line="47" pos:column="52"/></argument_list></call> <operator pos:line="47" pos:column="53">&gt;<pos:position pos:line="47" pos:column="57"/></operator> <literal type="number" pos:line="47" pos:column="55">0<pos:position pos:line="47" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="58"/></expr_stmt> <comment type="line" pos:line="47" pos:column="59">// paranoid</comment>
        <comment type="line" pos:line="48" pos:column="9">// TODO: there should be a timeout in case the sink is broken</comment>
        <comment type="line" pos:line="49" pos:column="9">// or cannot consume partial content (while we need more space)</comment>
    }<pos:position pos:line="50" pos:column="6"/></block></then></if>
}<pos:position pos:line="51" pos:column="2"/></block></function></unit>
