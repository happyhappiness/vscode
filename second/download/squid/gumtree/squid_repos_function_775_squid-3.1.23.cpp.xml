<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_775_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ClientHttpRequest<pos:position pos:line="2" pos:column="18"/></name><operator pos:line="2" pos:column="18">::<pos:position pos:line="2" pos:column="20"/></operator><name pos:line="2" pos:column="20">handleAdaptationFailure<pos:position pos:line="2" pos:column="43"/></name></name><parameter_list pos:line="2" pos:column="43">(<parameter><decl><type><name pos:line="2" pos:column="44">bool<pos:position pos:line="2" pos:column="48"/></name></type> <name pos:line="2" pos:column="49">bypassable<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="60"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">85<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="4" pos:column="15">3<pos:position pos:line="4" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="18">HERE<pos:position pos:line="4" pos:column="22"/></name> <operator pos:line="4" pos:column="23">&lt;&lt;<pos:position pos:line="4" pos:column="31"/></operator> <literal type="string" pos:line="4" pos:column="26">"handleAdaptationFailure("<pos:position pos:line="4" pos:column="52"/></literal> <operator pos:line="4" pos:column="53">&lt;&lt;<pos:position pos:line="4" pos:column="61"/></operator> <name pos:line="4" pos:column="56">bypassable<pos:position pos:line="4" pos:column="66"/></name> <operator pos:line="4" pos:column="67">&lt;&lt;<pos:position pos:line="4" pos:column="75"/></operator> <literal type="string" pos:line="4" pos:column="70">")"<pos:position pos:line="4" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="75"/></expr_stmt>

    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">bool<pos:position pos:line="6" pos:column="15"/></name></type> <name pos:line="6" pos:column="16">usedStore<pos:position pos:line="6" pos:column="25"/></name> <init pos:line="6" pos:column="26">= <expr><call><name pos:line="6" pos:column="28">storeEntry<pos:position pos:line="6" pos:column="38"/></name><argument_list pos:line="6" pos:column="38">()<pos:position pos:line="6" pos:column="40"/></argument_list></call> <operator pos:line="6" pos:column="41">&amp;&amp;<pos:position pos:line="6" pos:column="51"/></operator> <operator pos:line="6" pos:column="44">!<pos:position pos:line="6" pos:column="45"/></operator><call><name pos:line="6" pos:column="45">storeEntry<pos:position pos:line="6" pos:column="55"/></name><argument_list pos:line="6" pos:column="55">()<pos:position pos:line="6" pos:column="57"/></argument_list></call><operator pos:line="6" pos:column="57">-&gt;<pos:position pos:line="6" pos:column="62"/></operator><call><name pos:line="6" pos:column="59">isEmpty<pos:position pos:line="6" pos:column="66"/></name><argument_list pos:line="6" pos:column="66">()<pos:position pos:line="6" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="69"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="7" pos:column="5">const<pos:position pos:line="7" pos:column="10"/></specifier> <name pos:line="7" pos:column="11">bool<pos:position pos:line="7" pos:column="15"/></name></type> <name pos:line="7" pos:column="16">usedPipe<pos:position pos:line="7" pos:column="24"/></name> <init pos:line="7" pos:column="25">= <expr><name><name pos:line="7" pos:column="27">request<pos:position pos:line="7" pos:column="34"/></name><operator pos:line="7" pos:column="34">-&gt;<pos:position pos:line="7" pos:column="39"/></operator><name pos:line="7" pos:column="36">body_pipe<pos:position pos:line="7" pos:column="45"/></name></name> <operator pos:line="7" pos:column="46">!=<pos:position pos:line="7" pos:column="48"/></operator> <name pos:line="7" pos:column="49">NULL<pos:position pos:line="7" pos:column="53"/></name> <operator pos:line="7" pos:column="54">&amp;&amp;<pos:position pos:line="7" pos:column="64"/></operator>
                          <call><name><name pos:line="8" pos:column="27">request<pos:position pos:line="8" pos:column="34"/></name><operator pos:line="8" pos:column="34">-&gt;<pos:position pos:line="8" pos:column="39"/></operator><name pos:line="8" pos:column="36">body_pipe<pos:position pos:line="8" pos:column="45"/></name><operator pos:line="8" pos:column="45">-&gt;<pos:position pos:line="8" pos:column="50"/></operator><name pos:line="8" pos:column="47">consumedSize<pos:position pos:line="8" pos:column="59"/></name></name><argument_list pos:line="8" pos:column="59">()<pos:position pos:line="8" pos:column="61"/></argument_list></call> <operator pos:line="8" pos:column="62">&gt;<pos:position pos:line="8" pos:column="66"/></operator> <literal type="number" pos:line="8" pos:column="64">0<pos:position pos:line="8" pos:column="65"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="66"/></decl_stmt>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">bypassable<pos:position pos:line="10" pos:column="19"/></name> <operator pos:line="10" pos:column="20">&amp;&amp;<pos:position pos:line="10" pos:column="30"/></operator> <operator pos:line="10" pos:column="23">!<pos:position pos:line="10" pos:column="24"/></operator><name pos:line="10" pos:column="24">usedStore<pos:position pos:line="10" pos:column="33"/></name> <operator pos:line="10" pos:column="34">&amp;&amp;<pos:position pos:line="10" pos:column="44"/></operator> <operator pos:line="10" pos:column="37">!<pos:position pos:line="10" pos:column="38"/></operator><name pos:line="10" pos:column="38">usedPipe<pos:position pos:line="10" pos:column="46"/></name></expr>)<pos:position pos:line="10" pos:column="47"/></condition><then pos:line="10" pos:column="47"> <block pos:line="10" pos:column="48">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">debugs<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><literal type="number" pos:line="11" pos:column="16">85<pos:position pos:line="11" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="11" pos:column="19">3<pos:position pos:line="11" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="22">HERE<pos:position pos:line="11" pos:column="26"/></name> <operator pos:line="11" pos:column="27">&lt;&lt;<pos:position pos:line="11" pos:column="35"/></operator> <literal type="string" pos:line="11" pos:column="30">"ICAP REQMOD callout failed, bypassing: "<pos:position pos:line="11" pos:column="71"/></literal> <operator pos:line="11" pos:column="72">&lt;&lt;<pos:position pos:line="11" pos:column="80"/></operator> <name pos:line="11" pos:column="75">calloutContext<pos:position pos:line="11" pos:column="89"/></name></expr></argument>)<pos:position pos:line="11" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="91"/></expr_stmt>
        <if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">calloutContext<pos:position pos:line="12" pos:column="27"/></name></expr>)<pos:position pos:line="12" pos:column="28"/></condition><then pos:line="12" pos:column="28">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="13">doCallouts<pos:position pos:line="13" pos:column="23"/></name><argument_list pos:line="13" pos:column="23">()<pos:position pos:line="13" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="26"/></expr_stmt></block></then></if>
        <return pos:line="14" pos:column="9">return;<pos:position pos:line="14" pos:column="16"/></return>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="17" pos:column="5">debugs<pos:position pos:line="17" pos:column="11"/></name><argument_list pos:line="17" pos:column="11">(<argument><expr><literal type="number" pos:line="17" pos:column="12">85<pos:position pos:line="17" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="17" pos:column="15">3<pos:position pos:line="17" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="18">HERE<pos:position pos:line="17" pos:column="22"/></name> <operator pos:line="17" pos:column="23">&lt;&lt;<pos:position pos:line="17" pos:column="31"/></operator> <literal type="string" pos:line="17" pos:column="26">"ICAP REQMOD callout failed, responding with error"<pos:position pos:line="17" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="79"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="19" pos:column="5">clientStreamNode<pos:position pos:line="19" pos:column="21"/></name> <modifier pos:line="19" pos:column="22">*<pos:position pos:line="19" pos:column="23"/></modifier></type><name pos:line="19" pos:column="23">node<pos:position pos:line="19" pos:column="27"/></name> <init pos:line="19" pos:column="28">= <expr><operator pos:line="19" pos:column="30">(<pos:position pos:line="19" pos:column="31"/></operator><name pos:line="19" pos:column="31">clientStreamNode<pos:position pos:line="19" pos:column="47"/></name> <operator pos:line="19" pos:column="48">*<pos:position pos:line="19" pos:column="49"/></operator><operator pos:line="19" pos:column="49">)<pos:position pos:line="19" pos:column="50"/></operator><name><name pos:line="19" pos:column="50">client_stream<pos:position pos:line="19" pos:column="63"/></name><operator pos:line="19" pos:column="63">.<pos:position pos:line="19" pos:column="64"/></operator><name pos:line="19" pos:column="64">tail<pos:position pos:line="19" pos:column="68"/></name><operator pos:line="19" pos:column="68">-&gt;<pos:position pos:line="19" pos:column="73"/></operator><name pos:line="19" pos:column="70">prev<pos:position pos:line="19" pos:column="74"/></name><operator pos:line="19" pos:column="74">-&gt;<pos:position pos:line="19" pos:column="79"/></operator><name pos:line="19" pos:column="76">data<pos:position pos:line="19" pos:column="80"/></name></name></expr></init></decl>;<pos:position pos:line="19" pos:column="81"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="20" pos:column="5">clientReplyContext<pos:position pos:line="20" pos:column="23"/></name> <modifier pos:line="20" pos:column="24">*<pos:position pos:line="20" pos:column="25"/></modifier></type><name pos:line="20" pos:column="25">repContext<pos:position pos:line="20" pos:column="35"/></name> <init pos:line="20" pos:column="36">= <expr><cast type="dynamic" pos:line="20" pos:column="38">dynamic_cast<argument_list type="generic" pos:line="20" pos:column="50">&lt;<argument><expr><name pos:line="20" pos:column="51">clientReplyContext<pos:position pos:line="20" pos:column="69"/></name> <operator pos:line="20" pos:column="70">*<pos:position pos:line="20" pos:column="71"/></operator></expr></argument>&gt;<pos:position pos:line="20" pos:column="75"/></argument_list><argument_list pos:line="20" pos:column="72">(<argument><expr><call><name><name pos:line="20" pos:column="73">node<pos:position pos:line="20" pos:column="77"/></name><operator pos:line="20" pos:column="77">-&gt;<pos:position pos:line="20" pos:column="82"/></operator><name pos:line="20" pos:column="79">data<pos:position pos:line="20" pos:column="83"/></name><operator pos:line="20" pos:column="83">.<pos:position pos:line="20" pos:column="84"/></operator><name pos:line="20" pos:column="84">getRaw<pos:position pos:line="20" pos:column="90"/></name></name><argument_list pos:line="20" pos:column="90">()<pos:position pos:line="20" pos:column="92"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="93"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="20" pos:column="94"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">assert<pos:position pos:line="21" pos:column="11"/></name><argument_list pos:line="21" pos:column="11">(<argument><expr><name pos:line="21" pos:column="12">repContext<pos:position pos:line="21" pos:column="22"/></name></expr></argument>)<pos:position pos:line="21" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="24"/></expr_stmt>

    <comment type="line" pos:line="23" pos:column="5">// The original author of the code also wanted to pass an errno to</comment>
    <comment type="line" pos:line="24" pos:column="5">// setReplyToError, but it seems unlikely that the errno reflects the</comment>
    <comment type="line" pos:line="25" pos:column="5">// true cause of the error at this point, so I did not pass it.</comment>
    <decl_stmt><decl><type><name pos:line="26" pos:column="5">IpAddress<pos:position pos:line="26" pos:column="14"/></name></type> <name pos:line="26" pos:column="15">noAddr<pos:position pos:line="26" pos:column="21"/></name></decl>;<pos:position pos:line="26" pos:column="22"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="27" pos:column="5">noAddr<pos:position pos:line="27" pos:column="11"/></name><operator pos:line="27" pos:column="11">.<pos:position pos:line="27" pos:column="12"/></operator><name pos:line="27" pos:column="12">SetNoAddr<pos:position pos:line="27" pos:column="21"/></name></name><argument_list pos:line="27" pos:column="21">()<pos:position pos:line="27" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="24"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="28" pos:column="5">ConnStateData<pos:position pos:line="28" pos:column="18"/></name> <modifier pos:line="28" pos:column="19">*<pos:position pos:line="28" pos:column="20"/></modifier></type> <name pos:line="28" pos:column="21">c<pos:position pos:line="28" pos:column="22"/></name> <init pos:line="28" pos:column="23">= <expr><call><name pos:line="28" pos:column="25">getConn<pos:position pos:line="28" pos:column="32"/></name><argument_list pos:line="28" pos:column="32">()<pos:position pos:line="28" pos:column="34"/></argument_list></call></expr></init></decl>;<pos:position pos:line="28" pos:column="35"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="29" pos:column="5">repContext<pos:position pos:line="29" pos:column="15"/></name><operator pos:line="29" pos:column="15">-&gt;<pos:position pos:line="29" pos:column="20"/></operator><name pos:line="29" pos:column="17">setReplyToError<pos:position pos:line="29" pos:column="32"/></name></name><argument_list pos:line="29" pos:column="32">(<argument><expr><name pos:line="29" pos:column="33">ERR_ICAP_FAILURE<pos:position pos:line="29" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="51">HTTP_INTERNAL_SERVER_ERROR<pos:position pos:line="29" pos:column="77"/></name></expr></argument>,
                                <argument><expr><name><name pos:line="30" pos:column="33">request<pos:position pos:line="30" pos:column="40"/></name><operator pos:line="30" pos:column="40">-&gt;<pos:position pos:line="30" pos:column="45"/></operator><name pos:line="30" pos:column="42">method<pos:position pos:line="30" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="50">NULL<pos:position pos:line="30" pos:column="54"/></name></expr></argument>,
                                <argument><expr><operator pos:line="31" pos:column="33">(<pos:position pos:line="31" pos:column="34"/></operator><ternary><condition><expr><name pos:line="31" pos:column="34">c<pos:position pos:line="31" pos:column="35"/></name> <operator pos:line="31" pos:column="36">!=<pos:position pos:line="31" pos:column="38"/></operator> <name pos:line="31" pos:column="39">NULL<pos:position pos:line="31" pos:column="43"/></name></expr> ?<pos:position pos:line="31" pos:column="45"/></condition><then pos:line="31" pos:column="45"> <expr><name><name pos:line="31" pos:column="46">c<pos:position pos:line="31" pos:column="47"/></name><operator pos:line="31" pos:column="47">-&gt;<pos:position pos:line="31" pos:column="52"/></operator><name pos:line="31" pos:column="49">peer<pos:position pos:line="31" pos:column="53"/></name></name></expr> <pos:position pos:line="31" pos:column="54"/></then><else pos:line="31" pos:column="54">: <expr><name pos:line="31" pos:column="56">noAddr<pos:position pos:line="31" pos:column="62"/></name></expr></else></ternary><operator pos:line="31" pos:column="62">)<pos:position pos:line="31" pos:column="63"/></operator></expr></argument>, <argument><expr><name pos:line="31" pos:column="65">request<pos:position pos:line="31" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="74">NULL<pos:position pos:line="31" pos:column="78"/></name></expr></argument>,
                                <argument><expr><operator pos:line="32" pos:column="33">(<pos:position pos:line="32" pos:column="34"/></operator><ternary><condition><expr><name pos:line="32" pos:column="34">c<pos:position pos:line="32" pos:column="35"/></name> <operator pos:line="32" pos:column="36">!=<pos:position pos:line="32" pos:column="38"/></operator> <name pos:line="32" pos:column="39">NULL<pos:position pos:line="32" pos:column="43"/></name> <operator pos:line="32" pos:column="44">&amp;&amp;<pos:position pos:line="32" pos:column="54"/></operator> <name><name pos:line="32" pos:column="47">c<pos:position pos:line="32" pos:column="48"/></name><operator pos:line="32" pos:column="48">-&gt;<pos:position pos:line="32" pos:column="53"/></operator><name pos:line="32" pos:column="50">auth_user_request<pos:position pos:line="32" pos:column="67"/></name></name></expr> ?<pos:position pos:line="32" pos:column="69"/></condition><then pos:line="32" pos:column="69">
                                 <expr><name><name pos:line="33" pos:column="34">c<pos:position pos:line="33" pos:column="35"/></name><operator pos:line="33" pos:column="35">-&gt;<pos:position pos:line="33" pos:column="40"/></operator><name pos:line="33" pos:column="37">auth_user_request<pos:position pos:line="33" pos:column="54"/></name></name></expr> <pos:position pos:line="33" pos:column="55"/></then><else pos:line="33" pos:column="55">: <expr><name><name pos:line="33" pos:column="57">request<pos:position pos:line="33" pos:column="64"/></name><operator pos:line="33" pos:column="64">-&gt;<pos:position pos:line="33" pos:column="69"/></operator><name pos:line="33" pos:column="66">auth_user_request<pos:position pos:line="33" pos:column="83"/></name></name></expr></else></ternary><operator pos:line="33" pos:column="83">)<pos:position pos:line="33" pos:column="84"/></operator></expr></argument>)<pos:position pos:line="33" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="86"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="34" pos:column="5">c<pos:position pos:line="34" pos:column="6"/></name><operator pos:line="34" pos:column="6">-&gt;<pos:position pos:line="34" pos:column="11"/></operator><name pos:line="34" pos:column="8">flags<pos:position pos:line="34" pos:column="13"/></name><operator pos:line="34" pos:column="13">.<pos:position pos:line="34" pos:column="14"/></operator><name pos:line="34" pos:column="14">readMoreRequests<pos:position pos:line="34" pos:column="30"/></name></name> <operator pos:line="34" pos:column="31">=<pos:position pos:line="34" pos:column="32"/></operator> <literal type="boolean" pos:line="34" pos:column="33">true<pos:position pos:line="34" pos:column="37"/></literal></expr>;<pos:position pos:line="34" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="35" pos:column="5">c<pos:position pos:line="35" pos:column="6"/></name><operator pos:line="35" pos:column="6">-&gt;<pos:position pos:line="35" pos:column="11"/></operator><name pos:line="35" pos:column="8">expectNoForwarding<pos:position pos:line="35" pos:column="26"/></name></name><argument_list pos:line="35" pos:column="26">()<pos:position pos:line="35" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name pos:line="36" pos:column="5">node<pos:position pos:line="36" pos:column="9"/></name> <operator pos:line="36" pos:column="10">=<pos:position pos:line="36" pos:column="11"/></operator> <operator pos:line="36" pos:column="12">(<pos:position pos:line="36" pos:column="13"/></operator><name pos:line="36" pos:column="13">clientStreamNode<pos:position pos:line="36" pos:column="29"/></name> <operator pos:line="36" pos:column="30">*<pos:position pos:line="36" pos:column="31"/></operator><operator pos:line="36" pos:column="31">)<pos:position pos:line="36" pos:column="32"/></operator><name><name pos:line="36" pos:column="32">client_stream<pos:position pos:line="36" pos:column="45"/></name><operator pos:line="36" pos:column="45">.<pos:position pos:line="36" pos:column="46"/></operator><name pos:line="36" pos:column="46">tail<pos:position pos:line="36" pos:column="50"/></name><operator pos:line="36" pos:column="50">-&gt;<pos:position pos:line="36" pos:column="55"/></operator><name pos:line="36" pos:column="52">data<pos:position pos:line="36" pos:column="56"/></name></name></expr>;<pos:position pos:line="36" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">clientStreamRead<pos:position pos:line="37" pos:column="21"/></name><argument_list pos:line="37" pos:column="21">(<argument><expr><name pos:line="37" pos:column="22">node<pos:position pos:line="37" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="28">this<pos:position pos:line="37" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="34">node<pos:position pos:line="37" pos:column="38"/></name><operator pos:line="37" pos:column="38">-&gt;<pos:position pos:line="37" pos:column="43"/></operator><name pos:line="37" pos:column="40">readBuffer<pos:position pos:line="37" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="52"/></expr_stmt>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
