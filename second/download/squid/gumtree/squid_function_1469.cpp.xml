<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_function_1469.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ipc<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">Mem<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">Segment<pos:position pos:line="2" pos:column="18"/></name><operator pos:line="2" pos:column="18">::<pos:position pos:line="2" pos:column="20"/></operator><name pos:line="2" pos:column="20">create<pos:position pos:line="2" pos:column="26"/></name></name><parameter_list pos:line="2" pos:column="26">(<parameter><decl><type><specifier pos:line="2" pos:column="27">const<pos:position pos:line="2" pos:column="32"/></specifier> <name pos:line="2" pos:column="33">off_t<pos:position pos:line="2" pos:column="38"/></name></type> <name pos:line="2" pos:column="39">aSize<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="45"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">aSize<pos:position pos:line="4" pos:column="17"/></name> <operator pos:line="4" pos:column="18">&gt;<pos:position pos:line="4" pos:column="22"/></operator> <literal type="number" pos:line="4" pos:column="20">0<pos:position pos:line="4" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><name pos:line="5" pos:column="12">theFD<pos:position pos:line="5" pos:column="17"/></name> <operator pos:line="5" pos:column="18">&lt;<pos:position pos:line="5" pos:column="22"/></operator> <literal type="number" pos:line="5" pos:column="20">0<pos:position pos:line="5" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="23"/></expr_stmt>

    <comment type="line" pos:line="7" pos:column="5">// Why a brand new segment? A Squid crash may leave a reusable segment, but</comment>
    <comment type="line" pos:line="8" pos:column="5">// our placement-new code requires an all-0s segment. We could truncate and</comment>
    <comment type="line" pos:line="9" pos:column="5">// resize the old segment, but OS X does not allow using O_TRUNC with</comment>
    <comment type="line" pos:line="10" pos:column="5">// shm_open() and does not support ftruncate() for old segments.</comment>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">!<pos:position pos:line="11" pos:column="10"/></operator><call><name pos:line="11" pos:column="10">createFresh<pos:position pos:line="11" pos:column="21"/></name><argument_list pos:line="11" pos:column="21">()<pos:position pos:line="11" pos:column="23"/></argument_list></call> <operator pos:line="11" pos:column="24">&amp;&amp;<pos:position pos:line="11" pos:column="34"/></operator> <name pos:line="11" pos:column="27">errno<pos:position pos:line="11" pos:column="32"/></name> <operator pos:line="11" pos:column="33">==<pos:position pos:line="11" pos:column="35"/></operator> <name pos:line="11" pos:column="36">EEXIST<pos:position pos:line="11" pos:column="42"/></name></expr>)<pos:position pos:line="11" pos:column="43"/></condition><then pos:line="11" pos:column="43"> <block pos:line="11" pos:column="44">{
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">unlink<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">()<pos:position pos:line="12" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="18"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">createFresh<pos:position pos:line="13" pos:column="20"/></name><argument_list pos:line="13" pos:column="20">()<pos:position pos:line="13" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name pos:line="16" pos:column="9">theFD<pos:position pos:line="16" pos:column="14"/></name> <operator pos:line="16" pos:column="15">&lt;<pos:position pos:line="16" pos:column="19"/></operator> <literal type="number" pos:line="16" pos:column="17">0<pos:position pos:line="16" pos:column="18"/></literal></expr>)<pos:position pos:line="16" pos:column="19"/></condition><then pos:line="16" pos:column="19"> <block pos:line="16" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">debugs<pos:position pos:line="17" pos:column="15"/></name><argument_list pos:line="17" pos:column="15">(<argument><expr><literal type="number" pos:line="17" pos:column="16">54<pos:position pos:line="17" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="20">5<pos:position pos:line="17" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="23">HERE<pos:position pos:line="17" pos:column="27"/></name> <operator pos:line="17" pos:column="28">&lt;&lt;<pos:position pos:line="17" pos:column="36"/></operator> <literal type="string" pos:line="17" pos:column="31">"shm_open "<pos:position pos:line="17" pos:column="42"/></literal> <operator pos:line="17" pos:column="43">&lt;&lt;<pos:position pos:line="17" pos:column="51"/></operator> <name pos:line="17" pos:column="46">theName<pos:position pos:line="17" pos:column="53"/></name> <operator pos:line="17" pos:column="54">&lt;&lt;<pos:position pos:line="17" pos:column="62"/></operator> <literal type="string" pos:line="17" pos:column="57">": "<pos:position pos:line="17" pos:column="61"/></literal> <operator pos:line="17" pos:column="62">&lt;&lt;<pos:position pos:line="17" pos:column="70"/></operator> <call><name pos:line="17" pos:column="65">xstrerror<pos:position pos:line="17" pos:column="74"/></name><argument_list pos:line="17" pos:column="74">()<pos:position pos:line="17" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="78"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">fatalf<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><literal type="string" pos:line="18" pos:column="16">"Ipc::Mem::Segment::create failed to shm_open(%s): %s\n"<pos:position pos:line="18" pos:column="72"/></literal></expr></argument>,
               <argument><expr><call><name><name pos:line="19" pos:column="16">theName<pos:position pos:line="19" pos:column="23"/></name><operator pos:line="19" pos:column="23">.<pos:position pos:line="19" pos:column="24"/></operator><name pos:line="19" pos:column="24">termedBuf<pos:position pos:line="19" pos:column="33"/></name></name><argument_list pos:line="19" pos:column="33">()<pos:position pos:line="19" pos:column="35"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="19" pos:column="37">xstrerror<pos:position pos:line="19" pos:column="46"/></name><argument_list pos:line="19" pos:column="46">()<pos:position pos:line="19" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="50"/></expr_stmt>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>

    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><call><name pos:line="22" pos:column="9">ftruncate<pos:position pos:line="22" pos:column="18"/></name><argument_list pos:line="22" pos:column="18">(<argument><expr><name pos:line="22" pos:column="19">theFD<pos:position pos:line="22" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="26">aSize<pos:position pos:line="22" pos:column="31"/></name></expr></argument>)<pos:position pos:line="22" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="33"/></condition><then pos:line="22" pos:column="33"> <block pos:line="22" pos:column="34">{
        <decl_stmt><decl><type><specifier pos:line="23" pos:column="9">const<pos:position pos:line="23" pos:column="14"/></specifier> <name pos:line="23" pos:column="15">int<pos:position pos:line="23" pos:column="18"/></name></type> <name pos:line="23" pos:column="19">savedError<pos:position pos:line="23" pos:column="29"/></name> <init pos:line="23" pos:column="30">= <expr><name pos:line="23" pos:column="32">errno<pos:position pos:line="23" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="23" pos:column="38"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">unlink<pos:position pos:line="24" pos:column="15"/></name><argument_list pos:line="24" pos:column="15">()<pos:position pos:line="24" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="18"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">debugs<pos:position pos:line="25" pos:column="15"/></name><argument_list pos:line="25" pos:column="15">(<argument><expr><literal type="number" pos:line="25" pos:column="16">54<pos:position pos:line="25" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="20">5<pos:position pos:line="25" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="23">HERE<pos:position pos:line="25" pos:column="27"/></name> <operator pos:line="25" pos:column="28">&lt;&lt;<pos:position pos:line="25" pos:column="36"/></operator> <literal type="string" pos:line="25" pos:column="31">"ftruncate "<pos:position pos:line="25" pos:column="43"/></literal> <operator pos:line="25" pos:column="44">&lt;&lt;<pos:position pos:line="25" pos:column="52"/></operator> <name pos:line="25" pos:column="47">theName<pos:position pos:line="25" pos:column="54"/></name> <operator pos:line="25" pos:column="55">&lt;&lt;<pos:position pos:line="25" pos:column="63"/></operator> <literal type="string" pos:line="25" pos:column="58">": "<pos:position pos:line="25" pos:column="62"/></literal> <operator pos:line="25" pos:column="63">&lt;&lt;<pos:position pos:line="25" pos:column="71"/></operator> <call><name pos:line="25" pos:column="66">xstrerr<pos:position pos:line="25" pos:column="73"/></name><argument_list pos:line="25" pos:column="73">(<argument><expr><name pos:line="25" pos:column="74">savedError<pos:position pos:line="25" pos:column="84"/></name></expr></argument>)<pos:position pos:line="25" pos:column="85"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="87"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">fatalf<pos:position pos:line="26" pos:column="15"/></name><argument_list pos:line="26" pos:column="15">(<argument><expr><literal type="string" pos:line="26" pos:column="16">"Ipc::Mem::Segment::create failed to ftruncate(%s): %s\n"<pos:position pos:line="26" pos:column="73"/></literal></expr></argument>,
               <argument><expr><call><name><name pos:line="27" pos:column="16">theName<pos:position pos:line="27" pos:column="23"/></name><operator pos:line="27" pos:column="23">.<pos:position pos:line="27" pos:column="24"/></operator><name pos:line="27" pos:column="24">termedBuf<pos:position pos:line="27" pos:column="33"/></name></name><argument_list pos:line="27" pos:column="33">()<pos:position pos:line="27" pos:column="35"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="27" pos:column="37">xstrerr<pos:position pos:line="27" pos:column="44"/></name><argument_list pos:line="27" pos:column="44">(<argument><expr><name pos:line="27" pos:column="45">savedError<pos:position pos:line="27" pos:column="55"/></name></expr></argument>)<pos:position pos:line="27" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="58"/></expr_stmt>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>
    <comment type="line" pos:line="29" pos:column="5">// We assume that the shm_open(O_CREAT)+ftruncate() combo zeros the segment.</comment>

    <expr_stmt><expr><name pos:line="31" pos:column="5">theSize<pos:position pos:line="31" pos:column="12"/></name> <operator pos:line="31" pos:column="13">=<pos:position pos:line="31" pos:column="14"/></operator> <call><name pos:line="31" pos:column="15">statSize<pos:position pos:line="31" pos:column="23"/></name><argument_list pos:line="31" pos:column="23">(<argument><expr><literal type="string" pos:line="31" pos:column="24">"Ipc::Mem::Segment::create"<pos:position pos:line="31" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="53"/></expr_stmt>

    <comment type="line" pos:line="33" pos:column="5">// OS X will round up to a full page, so not checking for exact size match.</comment>
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">assert<pos:position pos:line="34" pos:column="11"/></name><argument_list pos:line="34" pos:column="11">(<argument><expr><name pos:line="34" pos:column="12">theSize<pos:position pos:line="34" pos:column="19"/></name> <operator pos:line="34" pos:column="20">&gt;=<pos:position pos:line="34" pos:column="25"/></operator> <name pos:line="34" pos:column="23">aSize<pos:position pos:line="34" pos:column="28"/></name></expr></argument>)<pos:position pos:line="34" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="30"/></expr_stmt>

    <expr_stmt><expr><name pos:line="36" pos:column="5">theReserved<pos:position pos:line="36" pos:column="16"/></name> <operator pos:line="36" pos:column="17">=<pos:position pos:line="36" pos:column="18"/></operator> <literal type="number" pos:line="36" pos:column="19">0<pos:position pos:line="36" pos:column="20"/></literal></expr>;<pos:position pos:line="36" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name pos:line="37" pos:column="5">doUnlink<pos:position pos:line="37" pos:column="13"/></name> <operator pos:line="37" pos:column="14">=<pos:position pos:line="37" pos:column="15"/></operator> <literal type="boolean" pos:line="37" pos:column="16">true<pos:position pos:line="37" pos:column="20"/></literal></expr>;<pos:position pos:line="37" pos:column="21"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="39" pos:column="5">debugs<pos:position pos:line="39" pos:column="11"/></name><argument_list pos:line="39" pos:column="11">(<argument><expr><literal type="number" pos:line="39" pos:column="12">54<pos:position pos:line="39" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="16">3<pos:position pos:line="39" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="39" pos:column="19">HERE<pos:position pos:line="39" pos:column="23"/></name> <operator pos:line="39" pos:column="24">&lt;&lt;<pos:position pos:line="39" pos:column="32"/></operator> <literal type="string" pos:line="39" pos:column="27">"created "<pos:position pos:line="39" pos:column="37"/></literal> <operator pos:line="39" pos:column="38">&lt;&lt;<pos:position pos:line="39" pos:column="46"/></operator> <name pos:line="39" pos:column="41">theName<pos:position pos:line="39" pos:column="48"/></name> <operator pos:line="39" pos:column="49">&lt;&lt;<pos:position pos:line="39" pos:column="57"/></operator> <literal type="string" pos:line="39" pos:column="52">" segment: "<pos:position pos:line="39" pos:column="64"/></literal> <operator pos:line="39" pos:column="65">&lt;&lt;<pos:position pos:line="39" pos:column="73"/></operator> <name pos:line="39" pos:column="68">theSize<pos:position pos:line="39" pos:column="75"/></name></expr></argument>)<pos:position pos:line="39" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="77"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="41" pos:column="5">attach<pos:position pos:line="41" pos:column="11"/></name><argument_list pos:line="41" pos:column="11">()<pos:position pos:line="41" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="14"/></expr_stmt>
}<pos:position pos:line="42" pos:column="2"/></block></function></unit>
