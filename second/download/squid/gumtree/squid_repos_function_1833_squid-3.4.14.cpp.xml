<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1833_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ExternalACLLookup<pos:position pos:line="2" pos:column="18"/></name><operator pos:line="2" pos:column="18">::<pos:position pos:line="2" pos:column="20"/></operator><name pos:line="2" pos:column="20">Start<pos:position pos:line="2" pos:column="25"/></name></name><parameter_list pos:line="2" pos:column="25">(<parameter><decl><type><name pos:line="2" pos:column="26">ACLChecklist<pos:position pos:line="2" pos:column="38"/></name> <modifier pos:line="2" pos:column="39">*<pos:position pos:line="2" pos:column="40"/></modifier></type><name pos:line="2" pos:column="40">checklist<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="51">external_acl_data<pos:position pos:line="2" pos:column="68"/></name> <modifier pos:line="2" pos:column="69">*<pos:position pos:line="2" pos:column="70"/></modifier></type><name pos:line="2" pos:column="70">acl<pos:position pos:line="2" pos:column="73"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="75">bool<pos:position pos:line="2" pos:column="79"/></name></type> <name pos:line="2" pos:column="80">inBackground<pos:position pos:line="2" pos:column="92"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="93"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">external_acl<pos:position pos:line="4" pos:column="17"/></name> <modifier pos:line="4" pos:column="18">*<pos:position pos:line="4" pos:column="19"/></modifier></type><name pos:line="4" pos:column="19">def<pos:position pos:line="4" pos:column="22"/></name> <init pos:line="4" pos:column="23">= <expr><name><name pos:line="4" pos:column="25">acl<pos:position pos:line="4" pos:column="28"/></name><operator pos:line="4" pos:column="28">-&gt;<pos:position pos:line="4" pos:column="33"/></operator><name pos:line="4" pos:column="30">def<pos:position pos:line="4" pos:column="33"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="6" pos:column="5">ACLFilledChecklist<pos:position pos:line="6" pos:column="23"/></name> <modifier pos:line="6" pos:column="24">*<pos:position pos:line="6" pos:column="25"/></modifier></type><name pos:line="6" pos:column="25">ch<pos:position pos:line="6" pos:column="27"/></name> <init pos:line="6" pos:column="28">= <expr><call><name pos:line="6" pos:column="30">Filled<pos:position pos:line="6" pos:column="36"/></name><argument_list pos:line="6" pos:column="36">(<argument><expr><name pos:line="6" pos:column="37">checklist<pos:position pos:line="6" pos:column="46"/></name></expr></argument>)<pos:position pos:line="6" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="48"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="7" pos:column="5">const<pos:position pos:line="7" pos:column="10"/></specifier> <name pos:line="7" pos:column="11">char<pos:position pos:line="7" pos:column="15"/></name> <modifier pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></modifier></type><name pos:line="7" pos:column="17">key<pos:position pos:line="7" pos:column="20"/></name> <init pos:line="7" pos:column="21">= <expr><call><name pos:line="7" pos:column="23">makeExternalAclKey<pos:position pos:line="7" pos:column="41"/></name><argument_list pos:line="7" pos:column="41">(<argument><expr><name pos:line="7" pos:column="42">ch<pos:position pos:line="7" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="46">acl<pos:position pos:line="7" pos:column="49"/></name></expr></argument>)<pos:position pos:line="7" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="51"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">assert<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><name pos:line="8" pos:column="12">key<pos:position pos:line="8" pos:column="15"/></name></expr></argument>)<pos:position pos:line="8" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="17"/></expr_stmt> <comment type="line" pos:line="8" pos:column="18">// XXX: will fail if EXT_ACL_IDENT case needs an async lookup</comment>

    <expr_stmt><expr><call><name pos:line="10" pos:column="5">debugs<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><literal type="number" pos:line="10" pos:column="12">82<pos:position pos:line="10" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="16">2<pos:position pos:line="10" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="19">HERE<pos:position pos:line="10" pos:column="23"/></name> <operator pos:line="10" pos:column="24">&lt;&lt;<pos:position pos:line="10" pos:column="32"/></operator> <operator pos:line="10" pos:column="27">(<pos:position pos:line="10" pos:column="28"/></operator><ternary><condition><expr><name pos:line="10" pos:column="28">inBackground<pos:position pos:line="10" pos:column="40"/></name></expr> ?<pos:position pos:line="10" pos:column="42"/></condition><then pos:line="10" pos:column="42"> <expr><literal type="string" pos:line="10" pos:column="43">"bg"<pos:position pos:line="10" pos:column="47"/></literal></expr> <pos:position pos:line="10" pos:column="48"/></then><else pos:line="10" pos:column="48">: <expr><literal type="string" pos:line="10" pos:column="50">"fg"<pos:position pos:line="10" pos:column="54"/></literal></expr></else></ternary><operator pos:line="10" pos:column="54">)<pos:position pos:line="10" pos:column="55"/></operator> <operator pos:line="10" pos:column="56">&lt;&lt;<pos:position pos:line="10" pos:column="64"/></operator> <literal type="string" pos:line="10" pos:column="59">" lookup in '"<pos:position pos:line="10" pos:column="73"/></literal> <operator pos:line="10" pos:column="74">&lt;&lt;<pos:position pos:line="10" pos:column="82"/></operator>
           <name><name pos:line="11" pos:column="12">def<pos:position pos:line="11" pos:column="15"/></name><operator pos:line="11" pos:column="15">-&gt;<pos:position pos:line="11" pos:column="20"/></operator><name pos:line="11" pos:column="17">name<pos:position pos:line="11" pos:column="21"/></name></name> <operator pos:line="11" pos:column="22">&lt;&lt;<pos:position pos:line="11" pos:column="30"/></operator> <literal type="string" pos:line="11" pos:column="25">"' for '"<pos:position pos:line="11" pos:column="34"/></literal> <operator pos:line="11" pos:column="35">&lt;&lt;<pos:position pos:line="11" pos:column="43"/></operator> <name pos:line="11" pos:column="38">key<pos:position pos:line="11" pos:column="41"/></name> <operator pos:line="11" pos:column="42">&lt;&lt;<pos:position pos:line="11" pos:column="50"/></operator> <literal type="string" pos:line="11" pos:column="45">"'"<pos:position pos:line="11" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="50"/></expr_stmt>

    <comment type="block" pos:line="13" pos:column="5">/* Check for a pending lookup to hook into */</comment>
    <comment type="line" pos:line="14" pos:column="5">// only possible if we are caching results.</comment>
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">externalAclState<pos:position pos:line="15" pos:column="21"/></name> <modifier pos:line="15" pos:column="22">*<pos:position pos:line="15" pos:column="23"/></modifier></type><name pos:line="15" pos:column="23">oldstate<pos:position pos:line="15" pos:column="31"/></name> <init pos:line="15" pos:column="32">= <expr><name pos:line="15" pos:column="34">NULL<pos:position pos:line="15" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="39"/></decl_stmt>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name><name pos:line="16" pos:column="9">def<pos:position pos:line="16" pos:column="12"/></name><operator pos:line="16" pos:column="12">-&gt;<pos:position pos:line="16" pos:column="17"/></operator><name pos:line="16" pos:column="14">cache_size<pos:position pos:line="16" pos:column="24"/></name></name> <operator pos:line="16" pos:column="25">&gt;<pos:position pos:line="16" pos:column="29"/></operator> <literal type="number" pos:line="16" pos:column="27">0<pos:position pos:line="16" pos:column="28"/></literal></expr>)<pos:position pos:line="16" pos:column="29"/></condition><then pos:line="16" pos:column="29"> <block pos:line="16" pos:column="30">{
        <for pos:line="17" pos:column="9">for <control pos:line="17" pos:column="13">(<init><decl><type><name pos:line="17" pos:column="14">dlink_node<pos:position pos:line="17" pos:column="24"/></name> <modifier pos:line="17" pos:column="25">*<pos:position pos:line="17" pos:column="26"/></modifier></type><name pos:line="17" pos:column="26">node<pos:position pos:line="17" pos:column="30"/></name> <init pos:line="17" pos:column="31">= <expr><name><name pos:line="17" pos:column="33">def<pos:position pos:line="17" pos:column="36"/></name><operator pos:line="17" pos:column="36">-&gt;<pos:position pos:line="17" pos:column="41"/></operator><name pos:line="17" pos:column="38">queue<pos:position pos:line="17" pos:column="43"/></name><operator pos:line="17" pos:column="43">.<pos:position pos:line="17" pos:column="44"/></operator><name pos:line="17" pos:column="44">head<pos:position pos:line="17" pos:column="48"/></name></name></expr></init></decl>;<pos:position pos:line="17" pos:column="49"/></init> <condition><expr><name pos:line="17" pos:column="50">node<pos:position pos:line="17" pos:column="54"/></name></expr>;<pos:position pos:line="17" pos:column="55"/></condition> <incr><expr><name pos:line="17" pos:column="56">node<pos:position pos:line="17" pos:column="60"/></name> <operator pos:line="17" pos:column="61">=<pos:position pos:line="17" pos:column="62"/></operator> <name><name pos:line="17" pos:column="63">node<pos:position pos:line="17" pos:column="67"/></name><operator pos:line="17" pos:column="67">-&gt;<pos:position pos:line="17" pos:column="72"/></operator><name pos:line="17" pos:column="69">next<pos:position pos:line="17" pos:column="73"/></name></name></expr></incr>)<pos:position pos:line="17" pos:column="74"/></control> <block pos:line="17" pos:column="75">{
            <decl_stmt><decl><type><name pos:line="18" pos:column="13">externalAclState<pos:position pos:line="18" pos:column="29"/></name> <modifier pos:line="18" pos:column="30">*<pos:position pos:line="18" pos:column="31"/></modifier></type><name pos:line="18" pos:column="31">oldstatetmp<pos:position pos:line="18" pos:column="42"/></name> <init pos:line="18" pos:column="43">= <expr><cast type="static" pos:line="18" pos:column="45">static_cast<argument_list type="generic" pos:line="18" pos:column="56">&lt;<argument><expr><name pos:line="18" pos:column="57">externalAclState<pos:position pos:line="18" pos:column="73"/></name> <operator pos:line="18" pos:column="74">*<pos:position pos:line="18" pos:column="75"/></operator></expr></argument>&gt;<pos:position pos:line="18" pos:column="79"/></argument_list><argument_list pos:line="18" pos:column="76">(<argument><expr><name><name pos:line="18" pos:column="77">node<pos:position pos:line="18" pos:column="81"/></name><operator pos:line="18" pos:column="81">-&gt;<pos:position pos:line="18" pos:column="86"/></operator><name pos:line="18" pos:column="83">data<pos:position pos:line="18" pos:column="87"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="88"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="18" pos:column="89"/></decl_stmt>

            <if pos:line="20" pos:column="13">if <condition pos:line="20" pos:column="16">(<expr><call><name pos:line="20" pos:column="17">strcmp<pos:position pos:line="20" pos:column="23"/></name><argument_list pos:line="20" pos:column="23">(<argument><expr><name pos:line="20" pos:column="24">key<pos:position pos:line="20" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="29">oldstatetmp<pos:position pos:line="20" pos:column="40"/></name><operator pos:line="20" pos:column="40">-&gt;<pos:position pos:line="20" pos:column="45"/></operator><name pos:line="20" pos:column="42">key<pos:position pos:line="20" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="46"/></argument_list></call> <operator pos:line="20" pos:column="47">==<pos:position pos:line="20" pos:column="49"/></operator> <literal type="number" pos:line="20" pos:column="50">0<pos:position pos:line="20" pos:column="51"/></literal></expr>)<pos:position pos:line="20" pos:column="52"/></condition><then pos:line="20" pos:column="52"> <block pos:line="20" pos:column="53">{
                <expr_stmt><expr><name pos:line="21" pos:column="17">oldstate<pos:position pos:line="21" pos:column="25"/></name> <operator pos:line="21" pos:column="26">=<pos:position pos:line="21" pos:column="27"/></operator> <name pos:line="21" pos:column="28">oldstatetmp<pos:position pos:line="21" pos:column="39"/></name></expr>;<pos:position pos:line="21" pos:column="40"/></expr_stmt>
                <break pos:line="22" pos:column="17">break;<pos:position pos:line="22" pos:column="23"/></break>
            }<pos:position pos:line="23" pos:column="14"/></block></then></if>
        }<pos:position pos:line="24" pos:column="10"/></block></for>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="27" pos:column="5">// A background refresh has no need to piggiback on a pending request:</comment>
    <comment type="line" pos:line="28" pos:column="5">// When the pending request completes, the cache will be refreshed anyway.</comment>
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><name pos:line="29" pos:column="9">oldstate<pos:position pos:line="29" pos:column="17"/></name> <operator pos:line="29" pos:column="18">&amp;&amp;<pos:position pos:line="29" pos:column="28"/></operator> <name pos:line="29" pos:column="21">inBackground<pos:position pos:line="29" pos:column="33"/></name></expr>)<pos:position pos:line="29" pos:column="34"/></condition><then pos:line="29" pos:column="34"> <block pos:line="29" pos:column="35">{
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">debugs<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><literal type="number" pos:line="30" pos:column="16">82<pos:position pos:line="30" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="20">7<pos:position pos:line="30" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="23">HERE<pos:position pos:line="30" pos:column="27"/></name> <operator pos:line="30" pos:column="28">&lt;&lt;<pos:position pos:line="30" pos:column="36"/></operator> <literal type="string" pos:line="30" pos:column="31">"'"<pos:position pos:line="30" pos:column="34"/></literal> <operator pos:line="30" pos:column="35">&lt;&lt;<pos:position pos:line="30" pos:column="43"/></operator> <name><name pos:line="30" pos:column="38">def<pos:position pos:line="30" pos:column="41"/></name><operator pos:line="30" pos:column="41">-&gt;<pos:position pos:line="30" pos:column="46"/></operator><name pos:line="30" pos:column="43">name<pos:position pos:line="30" pos:column="47"/></name></name> <operator pos:line="30" pos:column="48">&lt;&lt;<pos:position pos:line="30" pos:column="56"/></operator> <literal type="string" pos:line="30" pos:column="51">"' queue is already being refreshed (ch="<pos:position pos:line="30" pos:column="92"/></literal> <operator pos:line="30" pos:column="93">&lt;&lt;<pos:position pos:line="30" pos:column="101"/></operator> <name pos:line="30" pos:column="96">ch<pos:position pos:line="30" pos:column="98"/></name> <operator pos:line="30" pos:column="99">&lt;&lt;<pos:position pos:line="30" pos:column="107"/></operator> <literal type="string" pos:line="30" pos:column="102">")"<pos:position pos:line="30" pos:column="105"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="106"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="107"/></expr_stmt>
        <return pos:line="31" pos:column="9">return;<pos:position pos:line="31" pos:column="16"/></return>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="34" pos:column="5">externalAclState<pos:position pos:line="34" pos:column="21"/></name> <modifier pos:line="34" pos:column="22">*<pos:position pos:line="34" pos:column="23"/></modifier></type><name pos:line="34" pos:column="23">state<pos:position pos:line="34" pos:column="28"/></name> <init pos:line="34" pos:column="29">= <expr><call><name pos:line="34" pos:column="31">cbdataAlloc<pos:position pos:line="34" pos:column="42"/></name><argument_list pos:line="34" pos:column="42">(<argument><expr><name pos:line="34" pos:column="43">externalAclState<pos:position pos:line="34" pos:column="59"/></name></expr></argument>)<pos:position pos:line="34" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="34" pos:column="61"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="35" pos:column="5">state<pos:position pos:line="35" pos:column="10"/></name><operator pos:line="35" pos:column="10">-&gt;<pos:position pos:line="35" pos:column="15"/></operator><name pos:line="35" pos:column="12">def<pos:position pos:line="35" pos:column="15"/></name></name> <operator pos:line="35" pos:column="16">=<pos:position pos:line="35" pos:column="17"/></operator> <call><name pos:line="35" pos:column="18">cbdataReference<pos:position pos:line="35" pos:column="33"/></name><argument_list pos:line="35" pos:column="33">(<argument><expr><name pos:line="35" pos:column="34">def<pos:position pos:line="35" pos:column="37"/></name></expr></argument>)<pos:position pos:line="35" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="39"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="37" pos:column="5">state<pos:position pos:line="37" pos:column="10"/></name><operator pos:line="37" pos:column="10">-&gt;<pos:position pos:line="37" pos:column="15"/></operator><name pos:line="37" pos:column="12">key<pos:position pos:line="37" pos:column="15"/></name></name> <operator pos:line="37" pos:column="16">=<pos:position pos:line="37" pos:column="17"/></operator> <call><name pos:line="37" pos:column="18">xstrdup<pos:position pos:line="37" pos:column="25"/></name><argument_list pos:line="37" pos:column="25">(<argument><expr><name pos:line="37" pos:column="26">key<pos:position pos:line="37" pos:column="29"/></name></expr></argument>)<pos:position pos:line="37" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="31"/></expr_stmt>

    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><operator pos:line="39" pos:column="9">!<pos:position pos:line="39" pos:column="10"/></operator><name pos:line="39" pos:column="10">inBackground<pos:position pos:line="39" pos:column="22"/></name></expr>)<pos:position pos:line="39" pos:column="23"/></condition><then pos:line="39" pos:column="23"> <block pos:line="39" pos:column="24">{
        <expr_stmt><expr><name><name pos:line="40" pos:column="9">state<pos:position pos:line="40" pos:column="14"/></name><operator pos:line="40" pos:column="14">-&gt;<pos:position pos:line="40" pos:column="19"/></operator><name pos:line="40" pos:column="16">callback<pos:position pos:line="40" pos:column="24"/></name></name> <operator pos:line="40" pos:column="25">=<pos:position pos:line="40" pos:column="26"/></operator> <operator pos:line="40" pos:column="27">&amp;<pos:position pos:line="40" pos:column="32"/></operator><name><name pos:line="40" pos:column="28">ExternalACLLookup<pos:position pos:line="40" pos:column="45"/></name><operator pos:line="40" pos:column="45">::<pos:position pos:line="40" pos:column="47"/></operator><name pos:line="40" pos:column="47">LookupDone<pos:position pos:line="40" pos:column="57"/></name></name></expr>;<pos:position pos:line="40" pos:column="58"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="41" pos:column="9">state<pos:position pos:line="41" pos:column="14"/></name><operator pos:line="41" pos:column="14">-&gt;<pos:position pos:line="41" pos:column="19"/></operator><name pos:line="41" pos:column="16">callback_data<pos:position pos:line="41" pos:column="29"/></name></name> <operator pos:line="41" pos:column="30">=<pos:position pos:line="41" pos:column="31"/></operator> <call><name pos:line="41" pos:column="32">cbdataReference<pos:position pos:line="41" pos:column="47"/></name><argument_list pos:line="41" pos:column="47">(<argument><expr><name pos:line="41" pos:column="48">checklist<pos:position pos:line="41" pos:column="57"/></name></expr></argument>)<pos:position pos:line="41" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="59"/></expr_stmt>
    }<pos:position pos:line="42" pos:column="6"/></block></then></if>

    <if pos:line="44" pos:column="5">if <condition pos:line="44" pos:column="8">(<expr><name pos:line="44" pos:column="9">oldstate<pos:position pos:line="44" pos:column="17"/></name></expr>)<pos:position pos:line="44" pos:column="18"/></condition><then pos:line="44" pos:column="18"> <block pos:line="44" pos:column="19">{
        <comment type="block" pos:line="45" pos:column="9">/* Hook into pending lookup */</comment>
        <expr_stmt><expr><name><name pos:line="46" pos:column="9">state<pos:position pos:line="46" pos:column="14"/></name><operator pos:line="46" pos:column="14">-&gt;<pos:position pos:line="46" pos:column="19"/></operator><name pos:line="46" pos:column="16">queue<pos:position pos:line="46" pos:column="21"/></name></name> <operator pos:line="46" pos:column="22">=<pos:position pos:line="46" pos:column="23"/></operator> <name><name pos:line="46" pos:column="24">oldstate<pos:position pos:line="46" pos:column="32"/></name><operator pos:line="46" pos:column="32">-&gt;<pos:position pos:line="46" pos:column="37"/></operator><name pos:line="46" pos:column="34">queue<pos:position pos:line="46" pos:column="39"/></name></name></expr>;<pos:position pos:line="46" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="47" pos:column="9">oldstate<pos:position pos:line="47" pos:column="17"/></name><operator pos:line="47" pos:column="17">-&gt;<pos:position pos:line="47" pos:column="22"/></operator><name pos:line="47" pos:column="19">queue<pos:position pos:line="47" pos:column="24"/></name></name> <operator pos:line="47" pos:column="25">=<pos:position pos:line="47" pos:column="26"/></operator> <name pos:line="47" pos:column="27">state<pos:position pos:line="47" pos:column="32"/></name></expr>;<pos:position pos:line="47" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="48" pos:column="6"/></block></then> <else pos:line="48" pos:column="7">else <block pos:line="48" pos:column="12">{
        <comment type="block" pos:line="49" pos:column="9">/* No pending lookup found. Sumbit to helper */</comment>

        <comment type="block" pos:line="51" pos:column="9">/* Check for queue overload */</comment>

        <if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><name><name pos:line="53" pos:column="13">def<pos:position pos:line="53" pos:column="16"/></name><operator pos:line="53" pos:column="16">-&gt;<pos:position pos:line="53" pos:column="21"/></operator><name pos:line="53" pos:column="18">theHelper<pos:position pos:line="53" pos:column="27"/></name><operator pos:line="53" pos:column="27">-&gt;<pos:position pos:line="53" pos:column="32"/></operator><name pos:line="53" pos:column="29">stats<pos:position pos:line="53" pos:column="34"/></name><operator pos:line="53" pos:column="34">.<pos:position pos:line="53" pos:column="35"/></operator><name pos:line="53" pos:column="35">queue_size<pos:position pos:line="53" pos:column="45"/></name></name> <operator pos:line="53" pos:column="46">&gt;=<pos:position pos:line="53" pos:column="51"/></operator> <operator pos:line="53" pos:column="49">(<pos:position pos:line="53" pos:column="50"/></operator><name pos:line="53" pos:column="50">int<pos:position pos:line="53" pos:column="53"/></name><operator pos:line="53" pos:column="53">)<pos:position pos:line="53" pos:column="54"/></operator><name><name pos:line="53" pos:column="54">def<pos:position pos:line="53" pos:column="57"/></name><operator pos:line="53" pos:column="57">-&gt;<pos:position pos:line="53" pos:column="62"/></operator><name pos:line="53" pos:column="59">theHelper<pos:position pos:line="53" pos:column="68"/></name><operator pos:line="53" pos:column="68">-&gt;<pos:position pos:line="53" pos:column="73"/></operator><name pos:line="53" pos:column="70">childs<pos:position pos:line="53" pos:column="76"/></name><operator pos:line="53" pos:column="76">.<pos:position pos:line="53" pos:column="77"/></operator><name pos:line="53" pos:column="77">n_running<pos:position pos:line="53" pos:column="86"/></name></name></expr>)<pos:position pos:line="53" pos:column="87"/></condition><then pos:line="53" pos:column="87"> <block pos:line="53" pos:column="88">{
            <expr_stmt><expr><call><name pos:line="54" pos:column="13">debugs<pos:position pos:line="54" pos:column="19"/></name><argument_list pos:line="54" pos:column="19">(<argument><expr><literal type="number" pos:line="54" pos:column="20">82<pos:position pos:line="54" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="54" pos:column="24">7<pos:position pos:line="54" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="54" pos:column="27">HERE<pos:position pos:line="54" pos:column="31"/></name> <operator pos:line="54" pos:column="32">&lt;&lt;<pos:position pos:line="54" pos:column="40"/></operator> <literal type="string" pos:line="54" pos:column="35">"'"<pos:position pos:line="54" pos:column="38"/></literal> <operator pos:line="54" pos:column="39">&lt;&lt;<pos:position pos:line="54" pos:column="47"/></operator> <name><name pos:line="54" pos:column="42">def<pos:position pos:line="54" pos:column="45"/></name><operator pos:line="54" pos:column="45">-&gt;<pos:position pos:line="54" pos:column="50"/></operator><name pos:line="54" pos:column="47">name<pos:position pos:line="54" pos:column="51"/></name></name> <operator pos:line="54" pos:column="52">&lt;&lt;<pos:position pos:line="54" pos:column="60"/></operator> <literal type="string" pos:line="54" pos:column="55">"' queue is too long"<pos:position pos:line="54" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="78"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="55" pos:column="13">assert<pos:position pos:line="55" pos:column="19"/></name><argument_list pos:line="55" pos:column="19">(<argument><expr><name pos:line="55" pos:column="20">inBackground<pos:position pos:line="55" pos:column="32"/></name></expr></argument>)<pos:position pos:line="55" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="34"/></expr_stmt> <comment type="line" pos:line="55" pos:column="35">// or the caller should have checked</comment>
            <expr_stmt><expr><call><name pos:line="56" pos:column="13">cbdataFree<pos:position pos:line="56" pos:column="23"/></name><argument_list pos:line="56" pos:column="23">(<argument><expr><name pos:line="56" pos:column="24">state<pos:position pos:line="56" pos:column="29"/></name></expr></argument>)<pos:position pos:line="56" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="31"/></expr_stmt>
            <return pos:line="57" pos:column="13">return;<pos:position pos:line="57" pos:column="20"/></return>
        }<pos:position pos:line="58" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="60" pos:column="9">/* Send it off to the helper */</comment>
        <decl_stmt><decl><type><name pos:line="61" pos:column="9">MemBuf<pos:position pos:line="61" pos:column="15"/></name></type> <name pos:line="61" pos:column="16">buf<pos:position pos:line="61" pos:column="19"/></name></decl>;<pos:position pos:line="61" pos:column="20"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="62" pos:column="9">buf<pos:position pos:line="62" pos:column="12"/></name><operator pos:line="62" pos:column="12">.<pos:position pos:line="62" pos:column="13"/></operator><name pos:line="62" pos:column="13">init<pos:position pos:line="62" pos:column="17"/></name></name><argument_list pos:line="62" pos:column="17">()<pos:position pos:line="62" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="20"/></expr_stmt>

        <expr_stmt><expr><call><name><name pos:line="64" pos:column="9">buf<pos:position pos:line="64" pos:column="12"/></name><operator pos:line="64" pos:column="12">.<pos:position pos:line="64" pos:column="13"/></operator><name pos:line="64" pos:column="13">Printf<pos:position pos:line="64" pos:column="19"/></name></name><argument_list pos:line="64" pos:column="19">(<argument><expr><literal type="string" pos:line="64" pos:column="20">"%s\n"<pos:position pos:line="64" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="64" pos:column="28">key<pos:position pos:line="64" pos:column="31"/></name></expr></argument>)<pos:position pos:line="64" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="33"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="66" pos:column="9">debugs<pos:position pos:line="66" pos:column="15"/></name><argument_list pos:line="66" pos:column="15">(<argument><expr><literal type="number" pos:line="66" pos:column="16">82<pos:position pos:line="66" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="66" pos:column="20">4<pos:position pos:line="66" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="23">"externalAclLookup: looking up for '"<pos:position pos:line="66" pos:column="60"/></literal> <operator pos:line="66" pos:column="61">&lt;&lt;<pos:position pos:line="66" pos:column="69"/></operator> <name pos:line="66" pos:column="64">key<pos:position pos:line="66" pos:column="67"/></name> <operator pos:line="66" pos:column="68">&lt;&lt;<pos:position pos:line="66" pos:column="76"/></operator> <literal type="string" pos:line="66" pos:column="71">"' in '"<pos:position pos:line="66" pos:column="79"/></literal> <operator pos:line="66" pos:column="80">&lt;&lt;<pos:position pos:line="66" pos:column="88"/></operator> <name><name pos:line="66" pos:column="83">def<pos:position pos:line="66" pos:column="86"/></name><operator pos:line="66" pos:column="86">-&gt;<pos:position pos:line="66" pos:column="91"/></operator><name pos:line="66" pos:column="88">name<pos:position pos:line="66" pos:column="92"/></name></name> <operator pos:line="66" pos:column="93">&lt;&lt;<pos:position pos:line="66" pos:column="101"/></operator> <literal type="string" pos:line="66" pos:column="96">"'."<pos:position pos:line="66" pos:column="100"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="101"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="102"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="68" pos:column="9">helperSubmit<pos:position pos:line="68" pos:column="21"/></name><argument_list pos:line="68" pos:column="21">(<argument><expr><name><name pos:line="68" pos:column="22">def<pos:position pos:line="68" pos:column="25"/></name><operator pos:line="68" pos:column="25">-&gt;<pos:position pos:line="68" pos:column="30"/></operator><name pos:line="68" pos:column="27">theHelper<pos:position pos:line="68" pos:column="36"/></name></name></expr></argument>, <argument><expr><name><name pos:line="68" pos:column="38">buf<pos:position pos:line="68" pos:column="41"/></name><operator pos:line="68" pos:column="41">.<pos:position pos:line="68" pos:column="42"/></operator><name pos:line="68" pos:column="42">buf<pos:position pos:line="68" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="47">externalAclHandleReply<pos:position pos:line="68" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="71">state<pos:position pos:line="68" pos:column="76"/></name></expr></argument>)<pos:position pos:line="68" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="78"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="70" pos:column="9">dlinkAdd<pos:position pos:line="70" pos:column="17"/></name><argument_list pos:line="70" pos:column="17">(<argument><expr><name pos:line="70" pos:column="18">state<pos:position pos:line="70" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="70" pos:column="25">&amp;<pos:position pos:line="70" pos:column="30"/></operator><name><name pos:line="70" pos:column="26">state<pos:position pos:line="70" pos:column="31"/></name><operator pos:line="70" pos:column="31">-&gt;<pos:position pos:line="70" pos:column="36"/></operator><name pos:line="70" pos:column="33">list<pos:position pos:line="70" pos:column="37"/></name></name></expr></argument>, <argument><expr><operator pos:line="70" pos:column="39">&amp;<pos:position pos:line="70" pos:column="44"/></operator><name><name pos:line="70" pos:column="40">def<pos:position pos:line="70" pos:column="43"/></name><operator pos:line="70" pos:column="43">-&gt;<pos:position pos:line="70" pos:column="48"/></operator><name pos:line="70" pos:column="45">queue<pos:position pos:line="70" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="70" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="52"/></expr_stmt>

        <expr_stmt><expr><call><name><name pos:line="72" pos:column="9">buf<pos:position pos:line="72" pos:column="12"/></name><operator pos:line="72" pos:column="12">.<pos:position pos:line="72" pos:column="13"/></operator><name pos:line="72" pos:column="13">clean<pos:position pos:line="72" pos:column="18"/></name></name><argument_list pos:line="72" pos:column="18">()<pos:position pos:line="72" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="73" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="75" pos:column="5">debugs<pos:position pos:line="75" pos:column="11"/></name><argument_list pos:line="75" pos:column="11">(<argument><expr><literal type="number" pos:line="75" pos:column="12">82<pos:position pos:line="75" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="75" pos:column="16">4<pos:position pos:line="75" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="75" pos:column="19">"externalAclLookup: will wait for the result of '"<pos:position pos:line="75" pos:column="69"/></literal> <operator pos:line="75" pos:column="70">&lt;&lt;<pos:position pos:line="75" pos:column="78"/></operator> <name pos:line="75" pos:column="73">key<pos:position pos:line="75" pos:column="76"/></name> <operator pos:line="75" pos:column="77">&lt;&lt;<pos:position pos:line="75" pos:column="85"/></operator>
           <literal type="string" pos:line="76" pos:column="12">"' in '"<pos:position pos:line="76" pos:column="20"/></literal> <operator pos:line="76" pos:column="21">&lt;&lt;<pos:position pos:line="76" pos:column="29"/></operator> <name><name pos:line="76" pos:column="24">def<pos:position pos:line="76" pos:column="27"/></name><operator pos:line="76" pos:column="27">-&gt;<pos:position pos:line="76" pos:column="32"/></operator><name pos:line="76" pos:column="29">name<pos:position pos:line="76" pos:column="33"/></name></name> <operator pos:line="76" pos:column="34">&lt;&lt;<pos:position pos:line="76" pos:column="42"/></operator> <literal type="string" pos:line="76" pos:column="37">"' (ch="<pos:position pos:line="76" pos:column="45"/></literal> <operator pos:line="76" pos:column="46">&lt;&lt;<pos:position pos:line="76" pos:column="54"/></operator> <name pos:line="76" pos:column="49">ch<pos:position pos:line="76" pos:column="51"/></name> <operator pos:line="76" pos:column="52">&lt;&lt;<pos:position pos:line="76" pos:column="60"/></operator> <literal type="string" pos:line="76" pos:column="55">")."<pos:position pos:line="76" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="61"/></expr_stmt>
}<pos:position pos:line="77" pos:column="2"/></block></function></unit>
