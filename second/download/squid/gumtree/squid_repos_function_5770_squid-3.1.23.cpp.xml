<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5770_squid-3.1.23.cpp" pos:tabs="8"><decl_stmt><decl><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">xgetnameinfo<pos:position pos:line="2" pos:column="13"/></name><argument_list pos:line="2" pos:column="13">(<argument><expr><name pos:line="2" pos:column="14">sa<pos:position pos:line="2" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="18">salen<pos:position pos:line="2" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="25">host<pos:position pos:line="2" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="31">hostlen<pos:position pos:line="2" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="40">serv<pos:position pos:line="2" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="46">servlen<pos:position pos:line="2" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="55">flags<pos:position pos:line="2" pos:column="60"/></name></expr></argument>)<pos:position pos:line="2" pos:column="61"/></argument_list>
const struct <name pos:line="3" pos:column="14">sockaddr<pos:position pos:line="3" pos:column="22"/></name> <modifier pos:line="3" pos:column="23">*<pos:position pos:line="3" pos:column="24"/></modifier><name pos:line="3" pos:column="24">sa<pos:position pos:line="3" pos:column="26"/></name></decl>;<pos:position pos:line="3" pos:column="27"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="4" pos:column="1">socklen_t<pos:position pos:line="4" pos:column="10"/></name></type> <name pos:line="4" pos:column="11">salen<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="5" pos:column="1">char<pos:position pos:line="5" pos:column="5"/></name> <modifier pos:line="5" pos:column="6">*<pos:position pos:line="5" pos:column="7"/></modifier></type><name pos:line="5" pos:column="7">host<pos:position pos:line="5" pos:column="11"/></name></decl>;<pos:position pos:line="5" pos:column="12"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="6" pos:column="1">size_t<pos:position pos:line="6" pos:column="7"/></name></type> <name pos:line="6" pos:column="8">hostlen<pos:position pos:line="6" pos:column="15"/></name></decl>;<pos:position pos:line="6" pos:column="16"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="7" pos:column="1">char<pos:position pos:line="7" pos:column="5"/></name> <modifier pos:line="7" pos:column="6">*<pos:position pos:line="7" pos:column="7"/></modifier></type><name pos:line="7" pos:column="7">serv<pos:position pos:line="7" pos:column="11"/></name></decl>;<pos:position pos:line="7" pos:column="12"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="8" pos:column="1">size_t<pos:position pos:line="8" pos:column="7"/></name></type> <name pos:line="8" pos:column="8">servlen<pos:position pos:line="8" pos:column="15"/></name></decl>;<pos:position pos:line="8" pos:column="16"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="9" pos:column="1">int<pos:position pos:line="9" pos:column="4"/></name></type> <name pos:line="9" pos:column="5">flags<pos:position pos:line="9" pos:column="10"/></name></decl>;<pos:position pos:line="9" pos:column="11"/></decl_stmt>
<block pos:line="10" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="11" pos:column="5">const<pos:position pos:line="11" pos:column="10"/></specifier> <name><name pos:line="11" pos:column="11">struct<pos:position pos:line="11" pos:column="17"/></name> <name pos:line="11" pos:column="18">afd<pos:position pos:line="11" pos:column="21"/></name></name> <modifier pos:line="11" pos:column="22">*<pos:position pos:line="11" pos:column="23"/></modifier></type><name pos:line="11" pos:column="23">afd<pos:position pos:line="11" pos:column="26"/></name></decl>;<pos:position pos:line="11" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="12" pos:column="5">struct<pos:position pos:line="12" pos:column="11"/></name> <name pos:line="12" pos:column="12">servent<pos:position pos:line="12" pos:column="19"/></name></name> <modifier pos:line="12" pos:column="20">*<pos:position pos:line="12" pos:column="21"/></modifier></type><name pos:line="12" pos:column="21">sp<pos:position pos:line="12" pos:column="23"/></name></decl>;<pos:position pos:line="12" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="13" pos:column="5">struct<pos:position pos:line="13" pos:column="11"/></name> <name pos:line="13" pos:column="12">hostent<pos:position pos:line="13" pos:column="19"/></name></name> <modifier pos:line="13" pos:column="20">*<pos:position pos:line="13" pos:column="21"/></modifier></type><name pos:line="13" pos:column="21">hp<pos:position pos:line="13" pos:column="23"/></name></decl>;<pos:position pos:line="13" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">unsigned<pos:position pos:line="14" pos:column="13"/></name> <name pos:line="14" pos:column="14">short<pos:position pos:line="14" pos:column="19"/></name></type> <name pos:line="14" pos:column="20">port<pos:position pos:line="14" pos:column="24"/></name></decl>;<pos:position pos:line="14" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">int<pos:position pos:line="15" pos:column="8"/></name></type> <name pos:line="15" pos:column="9">family<pos:position pos:line="15" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="15" pos:column="17">i<pos:position pos:line="15" pos:column="18"/></name></decl>;<pos:position pos:line="15" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="16" pos:column="5">const<pos:position pos:line="16" pos:column="10"/></specifier> <name pos:line="16" pos:column="11">char<pos:position pos:line="16" pos:column="15"/></name> <modifier pos:line="16" pos:column="16">*<pos:position pos:line="16" pos:column="17"/></modifier></type><name pos:line="16" pos:column="17">addr<pos:position pos:line="16" pos:column="21"/></name></decl>;<pos:position pos:line="16" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="17" pos:column="5">u_int32_t<pos:position pos:line="17" pos:column="14"/></name></type> <name pos:line="17" pos:column="15">v4a<pos:position pos:line="17" pos:column="18"/></name></decl>;<pos:position pos:line="17" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="18" pos:column="5">int<pos:position pos:line="18" pos:column="8"/></name></type> <name pos:line="18" pos:column="9">h_error<pos:position pos:line="18" pos:column="16"/></name></decl>;<pos:position pos:line="18" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="19" pos:column="5">char<pos:position pos:line="19" pos:column="9"/></name></type> <name><name pos:line="19" pos:column="10">numserv<pos:position pos:line="19" pos:column="17"/></name><index pos:line="19" pos:column="17">[<expr><literal type="number" pos:line="19" pos:column="18">512<pos:position pos:line="19" pos:column="21"/></literal></expr>]<pos:position pos:line="19" pos:column="22"/></index></name></decl>;<pos:position pos:line="19" pos:column="23"/></decl_stmt>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name pos:line="21" pos:column="9">sa<pos:position pos:line="21" pos:column="11"/></name> <operator pos:line="21" pos:column="12">==<pos:position pos:line="21" pos:column="14"/></operator> <name pos:line="21" pos:column="15">NULL<pos:position pos:line="21" pos:column="19"/></name></expr>)<pos:position pos:line="21" pos:column="20"/></condition><then pos:line="21" pos:column="20">
        <block type="pseudo"><return pos:line="22" pos:column="9">return <expr><name pos:line="22" pos:column="16">EAI_FAIL<pos:position pos:line="22" pos:column="24"/></name></expr>;<pos:position pos:line="22" pos:column="25"/></return></block></then></if>

<cpp:ifdef pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">ifdef<pos:position pos:line="24" pos:column="7"/></cpp:directive> <name pos:line="24" pos:column="8">HAVE_SA_LEN<pos:position pos:line="24" pos:column="19"/></name></cpp:ifdef>	<comment type="block" pos:line="24" pos:column="25">/*XXX*/</comment>
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name><name pos:line="25" pos:column="9">sa<pos:position pos:line="25" pos:column="11"/></name><operator pos:line="25" pos:column="11">-&gt;<pos:position pos:line="25" pos:column="16"/></operator><name pos:line="25" pos:column="13">sa_len<pos:position pos:line="25" pos:column="19"/></name></name> <operator pos:line="25" pos:column="20">!=<pos:position pos:line="25" pos:column="22"/></operator> <name pos:line="25" pos:column="23">salen<pos:position pos:line="25" pos:column="28"/></name></expr>)<pos:position pos:line="25" pos:column="29"/></condition><then pos:line="25" pos:column="29">
        <block type="pseudo"><return pos:line="26" pos:column="9">return <expr><name pos:line="26" pos:column="16">EAI_FAIL<pos:position pos:line="26" pos:column="24"/></name></expr>;<pos:position pos:line="26" pos:column="25"/></return></block></then></if>
<cpp:endif pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">endif<pos:position pos:line="27" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><name pos:line="29" pos:column="5">family<pos:position pos:line="29" pos:column="11"/></name> <operator pos:line="29" pos:column="12">=<pos:position pos:line="29" pos:column="13"/></operator> <name><name pos:line="29" pos:column="14">sa<pos:position pos:line="29" pos:column="16"/></name><operator pos:line="29" pos:column="16">-&gt;<pos:position pos:line="29" pos:column="21"/></operator><name pos:line="29" pos:column="18">sa_family<pos:position pos:line="29" pos:column="27"/></name></name></expr>;<pos:position pos:line="29" pos:column="28"/></expr_stmt>
    <for pos:line="30" pos:column="5">for <control pos:line="30" pos:column="9">(<init><expr><name pos:line="30" pos:column="10">i<pos:position pos:line="30" pos:column="11"/></name> <operator pos:line="30" pos:column="12">=<pos:position pos:line="30" pos:column="13"/></operator> <literal type="number" pos:line="30" pos:column="14">0<pos:position pos:line="30" pos:column="15"/></literal></expr>;<pos:position pos:line="30" pos:column="16"/></init> <condition><expr><name><name pos:line="30" pos:column="17">afdl<pos:position pos:line="30" pos:column="21"/></name><index pos:line="30" pos:column="21">[<expr><name pos:line="30" pos:column="22">i<pos:position pos:line="30" pos:column="23"/></name></expr>]<pos:position pos:line="30" pos:column="24"/></index></name><operator pos:line="30" pos:column="24">.<pos:position pos:line="30" pos:column="25"/></operator><name pos:line="30" pos:column="25">a_af<pos:position pos:line="30" pos:column="29"/></name></expr>;<pos:position pos:line="30" pos:column="30"/></condition> <incr><expr><name pos:line="30" pos:column="31">i<pos:position pos:line="30" pos:column="32"/></name><operator pos:line="30" pos:column="32">++<pos:position pos:line="30" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="30" pos:column="35"/></control>
        <block type="pseudo"><if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><name><name pos:line="31" pos:column="13">afdl<pos:position pos:line="31" pos:column="17"/></name><index pos:line="31" pos:column="17">[<expr><name pos:line="31" pos:column="18">i<pos:position pos:line="31" pos:column="19"/></name></expr>]<pos:position pos:line="31" pos:column="20"/></index></name><operator pos:line="31" pos:column="20">.<pos:position pos:line="31" pos:column="21"/></operator><name pos:line="31" pos:column="21">a_af<pos:position pos:line="31" pos:column="25"/></name> <operator pos:line="31" pos:column="26">==<pos:position pos:line="31" pos:column="28"/></operator> <name pos:line="31" pos:column="29">family<pos:position pos:line="31" pos:column="35"/></name></expr>)<pos:position pos:line="31" pos:column="36"/></condition><then pos:line="31" pos:column="36"> <block pos:line="31" pos:column="37">{
            <expr_stmt><expr><name pos:line="32" pos:column="13">afd<pos:position pos:line="32" pos:column="16"/></name> <operator pos:line="32" pos:column="17">=<pos:position pos:line="32" pos:column="18"/></operator> <operator pos:line="32" pos:column="19">&amp;<pos:position pos:line="32" pos:column="24"/></operator><name><name pos:line="32" pos:column="20">afdl<pos:position pos:line="32" pos:column="24"/></name><index pos:line="32" pos:column="24">[<expr><name pos:line="32" pos:column="25">i<pos:position pos:line="32" pos:column="26"/></name></expr>]<pos:position pos:line="32" pos:column="27"/></index></name></expr>;<pos:position pos:line="32" pos:column="28"/></expr_stmt>
            <goto pos:line="33" pos:column="13">goto <name pos:line="33" pos:column="18">found<pos:position pos:line="33" pos:column="23"/></name>;<pos:position pos:line="33" pos:column="24"/></goto>
        }<pos:position pos:line="34" pos:column="10"/></block></then></if></block></for>
    <return pos:line="35" pos:column="5">return <expr><name pos:line="35" pos:column="12">EAI_FAMILY<pos:position pos:line="35" pos:column="22"/></name></expr>;<pos:position pos:line="35" pos:column="23"/></return>

<label><name pos:line="37" pos:column="1">found<pos:position pos:line="37" pos:column="6"/></name>:<pos:position pos:line="37" pos:column="7"/></label>
    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><name pos:line="38" pos:column="9">salen<pos:position pos:line="38" pos:column="14"/></name> <operator pos:line="38" pos:column="15">!=<pos:position pos:line="38" pos:column="17"/></operator> <name><name pos:line="38" pos:column="18">afd<pos:position pos:line="38" pos:column="21"/></name><operator pos:line="38" pos:column="21">-&gt;<pos:position pos:line="38" pos:column="26"/></operator><name pos:line="38" pos:column="23">a_socklen<pos:position pos:line="38" pos:column="32"/></name></name></expr>)<pos:position pos:line="38" pos:column="33"/></condition><then pos:line="38" pos:column="33">
        <block type="pseudo"><return pos:line="39" pos:column="9">return <expr><name pos:line="39" pos:column="16">EAI_FAIL<pos:position pos:line="39" pos:column="24"/></name></expr>;<pos:position pos:line="39" pos:column="25"/></return></block></then></if>

    <comment type="block" pos:line="41" pos:column="5">/* network byte order */</comment>
    <expr_stmt><expr><call><name pos:line="42" pos:column="5">memcpy<pos:position pos:line="42" pos:column="11"/></name><argument_list pos:line="42" pos:column="11">(<argument><expr><operator pos:line="42" pos:column="12">&amp;<pos:position pos:line="42" pos:column="17"/></operator><name pos:line="42" pos:column="13">port<pos:position pos:line="42" pos:column="17"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="19">(<pos:position pos:line="42" pos:column="20"/></operator><specifier pos:line="42" pos:column="20">const<pos:position pos:line="42" pos:column="25"/></specifier> <name pos:line="42" pos:column="26">char<pos:position pos:line="42" pos:column="30"/></name> <operator pos:line="42" pos:column="31">*<pos:position pos:line="42" pos:column="32"/></operator><operator pos:line="42" pos:column="32">)<pos:position pos:line="42" pos:column="33"/></operator><name pos:line="42" pos:column="33">sa<pos:position pos:line="42" pos:column="35"/></name> <operator pos:line="42" pos:column="36">+<pos:position pos:line="42" pos:column="37"/></operator> <name><name pos:line="42" pos:column="38">afd<pos:position pos:line="42" pos:column="41"/></name><operator pos:line="42" pos:column="41">-&gt;<pos:position pos:line="42" pos:column="46"/></operator><name pos:line="42" pos:column="43">a_portoff<pos:position pos:line="42" pos:column="52"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="42" pos:column="54">sizeof<argument_list pos:line="42" pos:column="60">(<argument><expr><name pos:line="42" pos:column="61">port<pos:position pos:line="42" pos:column="65"/></name></expr></argument>)<pos:position pos:line="42" pos:column="66"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="42" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="68"/></expr_stmt>
    <expr_stmt><expr><name pos:line="43" pos:column="5">addr<pos:position pos:line="43" pos:column="9"/></name> <operator pos:line="43" pos:column="10">=<pos:position pos:line="43" pos:column="11"/></operator> <operator pos:line="43" pos:column="12">(<pos:position pos:line="43" pos:column="13"/></operator><specifier pos:line="43" pos:column="13">const<pos:position pos:line="43" pos:column="18"/></specifier> <name pos:line="43" pos:column="19">char<pos:position pos:line="43" pos:column="23"/></name> <operator pos:line="43" pos:column="24">*<pos:position pos:line="43" pos:column="25"/></operator><operator pos:line="43" pos:column="25">)<pos:position pos:line="43" pos:column="26"/></operator><name pos:line="43" pos:column="26">sa<pos:position pos:line="43" pos:column="28"/></name> <operator pos:line="43" pos:column="29">+<pos:position pos:line="43" pos:column="30"/></operator> <name><name pos:line="43" pos:column="31">afd<pos:position pos:line="43" pos:column="34"/></name><operator pos:line="43" pos:column="34">-&gt;<pos:position pos:line="43" pos:column="39"/></operator><name pos:line="43" pos:column="36">a_off<pos:position pos:line="43" pos:column="41"/></name></name></expr>;<pos:position pos:line="43" pos:column="42"/></expr_stmt>

    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><name pos:line="45" pos:column="9">serv<pos:position pos:line="45" pos:column="13"/></name> <operator pos:line="45" pos:column="14">==<pos:position pos:line="45" pos:column="16"/></operator> <name pos:line="45" pos:column="17">NULL<pos:position pos:line="45" pos:column="21"/></name> <operator pos:line="45" pos:column="22">||<pos:position pos:line="45" pos:column="24"/></operator> <name pos:line="45" pos:column="25">servlen<pos:position pos:line="45" pos:column="32"/></name> <operator pos:line="45" pos:column="33">==<pos:position pos:line="45" pos:column="35"/></operator> <literal type="number" pos:line="45" pos:column="36">0<pos:position pos:line="45" pos:column="37"/></literal></expr>)<pos:position pos:line="45" pos:column="38"/></condition><then pos:line="45" pos:column="38"> <block pos:line="45" pos:column="39">{
        <comment type="block" pos:line="46" pos:column="9">/*
         * do nothing in this case.
         * in case you are wondering if "&amp;&amp;" is more correct than
         * "||" here: RFC3493 says that serv == NULL OR servlen == 0
         * means that the caller does not want the result.
         */</comment>
    }<pos:position pos:line="52" pos:column="6"/></block></then> <else pos:line="52" pos:column="7">else <block pos:line="52" pos:column="12">{
        <if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><name pos:line="53" pos:column="13">flags<pos:position pos:line="53" pos:column="18"/></name> <operator pos:line="53" pos:column="19">&amp;<pos:position pos:line="53" pos:column="24"/></operator> <name pos:line="53" pos:column="21">NI_NUMERICSERV<pos:position pos:line="53" pos:column="35"/></name></expr>)<pos:position pos:line="53" pos:column="36"/></condition><then pos:line="53" pos:column="36">
            <block type="pseudo"><expr_stmt><expr><name pos:line="54" pos:column="13">sp<pos:position pos:line="54" pos:column="15"/></name> <operator pos:line="54" pos:column="16">=<pos:position pos:line="54" pos:column="17"/></operator> <name pos:line="54" pos:column="18">NULL<pos:position pos:line="54" pos:column="22"/></name></expr>;<pos:position pos:line="54" pos:column="23"/></expr_stmt></block></then>
        <else pos:line="55" pos:column="9">else <block pos:line="55" pos:column="14">{
            <expr_stmt><expr><name pos:line="56" pos:column="13">sp<pos:position pos:line="56" pos:column="15"/></name> <operator pos:line="56" pos:column="16">=<pos:position pos:line="56" pos:column="17"/></operator> <call><name pos:line="56" pos:column="18">getservbyport<pos:position pos:line="56" pos:column="31"/></name><argument_list pos:line="56" pos:column="31">(<argument><expr><name pos:line="56" pos:column="32">port<pos:position pos:line="56" pos:column="36"/></name></expr></argument>,
                               <argument><expr><ternary><condition><expr><operator pos:line="57" pos:column="32">(<pos:position pos:line="57" pos:column="33"/></operator><name pos:line="57" pos:column="33">flags<pos:position pos:line="57" pos:column="38"/></name> <operator pos:line="57" pos:column="39">&amp;<pos:position pos:line="57" pos:column="44"/></operator> <name pos:line="57" pos:column="41">NI_DGRAM<pos:position pos:line="57" pos:column="49"/></name><operator pos:line="57" pos:column="49">)<pos:position pos:line="57" pos:column="50"/></operator></expr> ?<pos:position pos:line="57" pos:column="52"/></condition><then pos:line="57" pos:column="52"> <expr><literal type="string" pos:line="57" pos:column="53">"udp"<pos:position pos:line="57" pos:column="58"/></literal></expr> <pos:position pos:line="57" pos:column="59"/></then><else pos:line="57" pos:column="59">: <expr><literal type="string" pos:line="57" pos:column="61">"tcp"<pos:position pos:line="57" pos:column="66"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="57" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="68"/></expr_stmt>
        }<pos:position pos:line="58" pos:column="10"/></block></else></if>
        <if pos:line="59" pos:column="9">if <condition pos:line="59" pos:column="12">(<expr><name pos:line="59" pos:column="13">sp<pos:position pos:line="59" pos:column="15"/></name></expr>)<pos:position pos:line="59" pos:column="16"/></condition><then pos:line="59" pos:column="16"> <block pos:line="59" pos:column="17">{
            <if pos:line="60" pos:column="13">if <condition pos:line="60" pos:column="16">(<expr><call><name pos:line="60" pos:column="17">strlen<pos:position pos:line="60" pos:column="23"/></name><argument_list pos:line="60" pos:column="23">(<argument><expr><name><name pos:line="60" pos:column="24">sp<pos:position pos:line="60" pos:column="26"/></name><operator pos:line="60" pos:column="26">-&gt;<pos:position pos:line="60" pos:column="31"/></operator><name pos:line="60" pos:column="28">s_name<pos:position pos:line="60" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="60" pos:column="35"/></argument_list></call> <operator pos:line="60" pos:column="36">+<pos:position pos:line="60" pos:column="37"/></operator> <literal type="number" pos:line="60" pos:column="38">1<pos:position pos:line="60" pos:column="39"/></literal> <operator pos:line="60" pos:column="40">&gt;<pos:position pos:line="60" pos:column="44"/></operator> <name pos:line="60" pos:column="42">servlen<pos:position pos:line="60" pos:column="49"/></name></expr>)<pos:position pos:line="60" pos:column="50"/></condition><then pos:line="60" pos:column="50">
                <block type="pseudo"><return pos:line="61" pos:column="17">return <expr><name pos:line="61" pos:column="24">EAI_OVERFLOW<pos:position pos:line="61" pos:column="36"/></name></expr>;<pos:position pos:line="61" pos:column="37"/></return></block></then></if>
            <expr_stmt><expr><call><name pos:line="62" pos:column="13">strncpy<pos:position pos:line="62" pos:column="20"/></name><argument_list pos:line="62" pos:column="20">(<argument><expr><name pos:line="62" pos:column="21">serv<pos:position pos:line="62" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="62" pos:column="27">sp<pos:position pos:line="62" pos:column="29"/></name><operator pos:line="62" pos:column="29">-&gt;<pos:position pos:line="62" pos:column="34"/></operator><name pos:line="62" pos:column="31">s_name<pos:position pos:line="62" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="39">servlen<pos:position pos:line="62" pos:column="46"/></name></expr></argument>)<pos:position pos:line="62" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="48"/></expr_stmt>
        }<pos:position pos:line="63" pos:column="10"/></block></then> <else pos:line="63" pos:column="11">else <block pos:line="63" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="64" pos:column="13">snprintf<pos:position pos:line="64" pos:column="21"/></name><argument_list pos:line="64" pos:column="21">(<argument><expr><name pos:line="64" pos:column="22">numserv<pos:position pos:line="64" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="64" pos:column="31">sizeof<argument_list pos:line="64" pos:column="37">(<argument><expr><name pos:line="64" pos:column="38">numserv<pos:position pos:line="64" pos:column="45"/></name></expr></argument>)<pos:position pos:line="64" pos:column="46"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="48">"%u"<pos:position pos:line="64" pos:column="52"/></literal></expr></argument>, <argument><expr><call><name pos:line="64" pos:column="54">ntohs<pos:position pos:line="64" pos:column="59"/></name><argument_list pos:line="64" pos:column="59">(<argument><expr><name pos:line="64" pos:column="60">port<pos:position pos:line="64" pos:column="64"/></name></expr></argument>)<pos:position pos:line="64" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="64" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="67"/></expr_stmt>
            <if pos:line="65" pos:column="13">if <condition pos:line="65" pos:column="16">(<expr><call><name pos:line="65" pos:column="17">strlen<pos:position pos:line="65" pos:column="23"/></name><argument_list pos:line="65" pos:column="23">(<argument><expr><name pos:line="65" pos:column="24">numserv<pos:position pos:line="65" pos:column="31"/></name></expr></argument>)<pos:position pos:line="65" pos:column="32"/></argument_list></call> <operator pos:line="65" pos:column="33">+<pos:position pos:line="65" pos:column="34"/></operator> <literal type="number" pos:line="65" pos:column="35">1<pos:position pos:line="65" pos:column="36"/></literal> <operator pos:line="65" pos:column="37">&gt;<pos:position pos:line="65" pos:column="41"/></operator> <name pos:line="65" pos:column="39">servlen<pos:position pos:line="65" pos:column="46"/></name></expr>)<pos:position pos:line="65" pos:column="47"/></condition><then pos:line="65" pos:column="47">
                <block type="pseudo"><return pos:line="66" pos:column="17">return <expr><name pos:line="66" pos:column="24">EAI_OVERFLOW<pos:position pos:line="66" pos:column="36"/></name></expr>;<pos:position pos:line="66" pos:column="37"/></return></block></then></if>
            <expr_stmt><expr><call><name pos:line="67" pos:column="13">strncpy<pos:position pos:line="67" pos:column="20"/></name><argument_list pos:line="67" pos:column="20">(<argument><expr><name pos:line="67" pos:column="21">serv<pos:position pos:line="67" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="27">numserv<pos:position pos:line="67" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="36">servlen<pos:position pos:line="67" pos:column="43"/></name></expr></argument>)<pos:position pos:line="67" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="45"/></expr_stmt>
        }<pos:position pos:line="68" pos:column="10"/></block></else></if>
    }<pos:position pos:line="69" pos:column="6"/></block></else></if>

    <switch pos:line="71" pos:column="5">switch <condition pos:line="71" pos:column="12">(<expr><name><name pos:line="71" pos:column="13">sa<pos:position pos:line="71" pos:column="15"/></name><operator pos:line="71" pos:column="15">-&gt;<pos:position pos:line="71" pos:column="20"/></operator><name pos:line="71" pos:column="17">sa_family<pos:position pos:line="71" pos:column="26"/></name></name></expr>)<pos:position pos:line="71" pos:column="27"/></condition> <block pos:line="71" pos:column="28">{
    <case pos:line="72" pos:column="5">case <expr><name pos:line="72" pos:column="10">AF_INET<pos:position pos:line="72" pos:column="17"/></name></expr>:<pos:position pos:line="72" pos:column="18"/></case>
        <expr_stmt><expr><name pos:line="73" pos:column="9">v4a<pos:position pos:line="73" pos:column="12"/></name> <operator pos:line="73" pos:column="13">=<pos:position pos:line="73" pos:column="14"/></operator> <operator pos:line="73" pos:column="15">(<pos:position pos:line="73" pos:column="16"/></operator><name pos:line="73" pos:column="16">u_int32_t<pos:position pos:line="73" pos:column="25"/></name><operator pos:line="73" pos:column="25">)<pos:position pos:line="73" pos:column="26"/></operator>
              <call><name pos:line="74" pos:column="15">ntohl<pos:position pos:line="74" pos:column="20"/></name><argument_list pos:line="74" pos:column="20">(<argument><expr><operator pos:line="74" pos:column="21">(<pos:position pos:line="74" pos:column="22"/></operator><operator pos:line="74" pos:column="22">(<pos:position pos:line="74" pos:column="23"/></operator><specifier pos:line="74" pos:column="23">const<pos:position pos:line="74" pos:column="28"/></specifier> struct <name pos:line="74" pos:column="36">sockaddr_in<pos:position pos:line="74" pos:column="47"/></name> <operator pos:line="74" pos:column="48">*<pos:position pos:line="74" pos:column="49"/></operator><operator pos:line="74" pos:column="49">)<pos:position pos:line="74" pos:column="50"/></operator><name pos:line="74" pos:column="50">sa<pos:position pos:line="74" pos:column="52"/></name><operator pos:line="74" pos:column="52">)<pos:position pos:line="74" pos:column="53"/></operator><operator pos:line="74" pos:column="53">-&gt;<pos:position pos:line="74" pos:column="58"/></operator><name><name pos:line="74" pos:column="55">sin_addr<pos:position pos:line="74" pos:column="63"/></name><operator pos:line="74" pos:column="63">.<pos:position pos:line="74" pos:column="64"/></operator><name pos:line="74" pos:column="64">s_addr<pos:position pos:line="74" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="74" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="72"/></expr_stmt>
        <if pos:line="75" pos:column="9">if <condition pos:line="75" pos:column="12">(<expr><call><name pos:line="75" pos:column="13">IN_MULTICAST<pos:position pos:line="75" pos:column="25"/></name><argument_list pos:line="75" pos:column="25">(<argument><expr><name pos:line="75" pos:column="26">v4a<pos:position pos:line="75" pos:column="29"/></name></expr></argument>)<pos:position pos:line="75" pos:column="30"/></argument_list></call> <operator pos:line="75" pos:column="31">||<pos:position pos:line="75" pos:column="33"/></operator> <call><name pos:line="75" pos:column="34">IN_EXPERIMENTAL<pos:position pos:line="75" pos:column="49"/></name><argument_list pos:line="75" pos:column="49">(<argument><expr><name pos:line="75" pos:column="50">v4a<pos:position pos:line="75" pos:column="53"/></name></expr></argument>)<pos:position pos:line="75" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="75" pos:column="55"/></condition><then pos:line="75" pos:column="55">
            <block type="pseudo"><expr_stmt><expr><name pos:line="76" pos:column="13">flags<pos:position pos:line="76" pos:column="18"/></name> <operator pos:line="76" pos:column="19">|=<pos:position pos:line="76" pos:column="21"/></operator> <name pos:line="76" pos:column="22">NI_NUMERICHOST<pos:position pos:line="76" pos:column="36"/></name></expr>;<pos:position pos:line="76" pos:column="37"/></expr_stmt></block></then></if>
        <expr_stmt><expr><name pos:line="77" pos:column="9">v4a<pos:position pos:line="77" pos:column="12"/></name> <operator pos:line="77" pos:column="13">&gt;&gt;=<pos:position pos:line="77" pos:column="22"/></operator> <name pos:line="77" pos:column="17">IN_CLASSA_NSHIFT<pos:position pos:line="77" pos:column="33"/></name></expr>;<pos:position pos:line="77" pos:column="34"/></expr_stmt>
        <if pos:line="78" pos:column="9">if <condition pos:line="78" pos:column="12">(<expr><name pos:line="78" pos:column="13">v4a<pos:position pos:line="78" pos:column="16"/></name> <operator pos:line="78" pos:column="17">==<pos:position pos:line="78" pos:column="19"/></operator> <literal type="number" pos:line="78" pos:column="20">0<pos:position pos:line="78" pos:column="21"/></literal></expr>)<pos:position pos:line="78" pos:column="22"/></condition><then pos:line="78" pos:column="22">
            <block type="pseudo"><expr_stmt><expr><name pos:line="79" pos:column="13">flags<pos:position pos:line="79" pos:column="18"/></name> <operator pos:line="79" pos:column="19">|=<pos:position pos:line="79" pos:column="21"/></operator> <name pos:line="79" pos:column="22">NI_NUMERICHOST<pos:position pos:line="79" pos:column="36"/></name></expr>;<pos:position pos:line="79" pos:column="37"/></expr_stmt></block></then></if>
        <break pos:line="80" pos:column="9">break;<pos:position pos:line="80" pos:column="15"/></break>
<cpp:ifdef pos:line="81" pos:column="1">#<cpp:directive pos:line="81" pos:column="2">ifdef<pos:position pos:line="81" pos:column="7"/></cpp:directive> <name pos:line="81" pos:column="8">INET6<pos:position pos:line="81" pos:column="13"/></name></cpp:ifdef>
    <case pos:line="82" pos:column="5">case <expr><name pos:line="82" pos:column="10">AF_INET6<pos:position pos:line="82" pos:column="18"/></name></expr>:<pos:position pos:line="82" pos:column="19"/></case> <block pos:line="82" pos:column="20">{
        <decl_stmt><decl><type><specifier pos:line="83" pos:column="9">const<pos:position pos:line="83" pos:column="14"/></specifier> <name><name pos:line="83" pos:column="15">struct<pos:position pos:line="83" pos:column="21"/></name> <name pos:line="83" pos:column="22">sockaddr_in6<pos:position pos:line="83" pos:column="34"/></name></name> <modifier pos:line="83" pos:column="35">*<pos:position pos:line="83" pos:column="36"/></modifier></type><name pos:line="83" pos:column="36">sin6<pos:position pos:line="83" pos:column="40"/></name></decl>;<pos:position pos:line="83" pos:column="41"/></decl_stmt>
        <expr_stmt><expr><name pos:line="84" pos:column="9">sin6<pos:position pos:line="84" pos:column="13"/></name> <operator pos:line="84" pos:column="14">=<pos:position pos:line="84" pos:column="15"/></operator> <operator pos:line="84" pos:column="16">(<pos:position pos:line="84" pos:column="17"/></operator><specifier pos:line="84" pos:column="17">const<pos:position pos:line="84" pos:column="22"/></specifier> struct <name pos:line="84" pos:column="30">sockaddr_in6<pos:position pos:line="84" pos:column="42"/></name> <operator pos:line="84" pos:column="43">*<pos:position pos:line="84" pos:column="44"/></operator><operator pos:line="84" pos:column="44">)<pos:position pos:line="84" pos:column="45"/></operator><name pos:line="84" pos:column="45">sa<pos:position pos:line="84" pos:column="47"/></name></expr>;<pos:position pos:line="84" pos:column="48"/></expr_stmt>
        <switch pos:line="85" pos:column="9">switch <condition pos:line="85" pos:column="16">(<expr><name><name pos:line="85" pos:column="17">sin6<pos:position pos:line="85" pos:column="21"/></name><operator pos:line="85" pos:column="21">-&gt;<pos:position pos:line="85" pos:column="26"/></operator><name pos:line="85" pos:column="23">sin6_addr<pos:position pos:line="85" pos:column="32"/></name><operator pos:line="85" pos:column="32">.<pos:position pos:line="85" pos:column="33"/></operator><name pos:line="85" pos:column="33">s6_addr<pos:position pos:line="85" pos:column="40"/></name><index pos:line="85" pos:column="40">[<expr><literal type="number" pos:line="85" pos:column="41">0<pos:position pos:line="85" pos:column="42"/></literal></expr>]<pos:position pos:line="85" pos:column="43"/></index></name></expr>)<pos:position pos:line="85" pos:column="44"/></condition> <block pos:line="85" pos:column="45">{
        <case pos:line="86" pos:column="9">case <expr><literal type="number" pos:line="86" pos:column="14">0x00<pos:position pos:line="86" pos:column="18"/></literal></expr>:<pos:position pos:line="86" pos:column="19"/></case>
            <if pos:line="87" pos:column="13">if <condition pos:line="87" pos:column="16">(<expr><call><name pos:line="87" pos:column="17">IN6_IS_ADDR_V4MAPPED<pos:position pos:line="87" pos:column="37"/></name><argument_list pos:line="87" pos:column="37">(<argument><expr><operator pos:line="87" pos:column="38">&amp;<pos:position pos:line="87" pos:column="43"/></operator><name><name pos:line="87" pos:column="39">sin6<pos:position pos:line="87" pos:column="43"/></name><operator pos:line="87" pos:column="43">-&gt;<pos:position pos:line="87" pos:column="48"/></operator><name pos:line="87" pos:column="45">sin6_addr<pos:position pos:line="87" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="87" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="87" pos:column="56"/></condition><then pos:line="87" pos:column="56">
                <block type="pseudo"><empty_stmt pos:line="88" pos:column="17">;<pos:position pos:line="88" pos:column="18"/></empty_stmt></block></then>
            <elseif pos:line="89" pos:column="13">else <if pos:line="89" pos:column="18">if <condition pos:line="89" pos:column="21">(<expr><call><name pos:line="89" pos:column="22">IN6_IS_ADDR_LOOPBACK<pos:position pos:line="89" pos:column="42"/></name><argument_list pos:line="89" pos:column="42">(<argument><expr><operator pos:line="89" pos:column="43">&amp;<pos:position pos:line="89" pos:column="48"/></operator><name><name pos:line="89" pos:column="44">sin6<pos:position pos:line="89" pos:column="48"/></name><operator pos:line="89" pos:column="48">-&gt;<pos:position pos:line="89" pos:column="53"/></operator><name pos:line="89" pos:column="50">sin6_addr<pos:position pos:line="89" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="89" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="89" pos:column="61"/></condition><then pos:line="89" pos:column="61">
                <block type="pseudo"><empty_stmt pos:line="90" pos:column="17">;<pos:position pos:line="90" pos:column="18"/></empty_stmt></block></then></if></elseif>
            <else pos:line="91" pos:column="13">else
                <block type="pseudo"><expr_stmt><expr><name pos:line="92" pos:column="17">flags<pos:position pos:line="92" pos:column="22"/></name> <operator pos:line="92" pos:column="23">|=<pos:position pos:line="92" pos:column="25"/></operator> <name pos:line="92" pos:column="26">NI_NUMERICHOST<pos:position pos:line="92" pos:column="40"/></name></expr>;<pos:position pos:line="92" pos:column="41"/></expr_stmt></block></else></if>
            <break pos:line="93" pos:column="13">break;<pos:position pos:line="93" pos:column="19"/></break>
        <default pos:line="94" pos:column="9">default:<pos:position pos:line="94" pos:column="17"/></default>
            <if pos:line="95" pos:column="13">if <condition pos:line="95" pos:column="16">(<expr><call><name pos:line="95" pos:column="17">IN6_IS_ADDR_LINKLOCAL<pos:position pos:line="95" pos:column="38"/></name><argument_list pos:line="95" pos:column="38">(<argument><expr><operator pos:line="95" pos:column="39">&amp;<pos:position pos:line="95" pos:column="44"/></operator><name><name pos:line="95" pos:column="40">sin6<pos:position pos:line="95" pos:column="44"/></name><operator pos:line="95" pos:column="44">-&gt;<pos:position pos:line="95" pos:column="49"/></operator><name pos:line="95" pos:column="46">sin6_addr<pos:position pos:line="95" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="95" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="95" pos:column="57"/></condition><then pos:line="95" pos:column="57">
                <block type="pseudo"><expr_stmt><expr><name pos:line="96" pos:column="17">flags<pos:position pos:line="96" pos:column="22"/></name> <operator pos:line="96" pos:column="23">|=<pos:position pos:line="96" pos:column="25"/></operator> <name pos:line="96" pos:column="26">NI_NUMERICHOST<pos:position pos:line="96" pos:column="40"/></name></expr>;<pos:position pos:line="96" pos:column="41"/></expr_stmt></block></then>
            <elseif pos:line="97" pos:column="13">else <if pos:line="97" pos:column="18">if <condition pos:line="97" pos:column="21">(<expr><call><name pos:line="97" pos:column="22">IN6_IS_ADDR_MULTICAST<pos:position pos:line="97" pos:column="43"/></name><argument_list pos:line="97" pos:column="43">(<argument><expr><operator pos:line="97" pos:column="44">&amp;<pos:position pos:line="97" pos:column="49"/></operator><name><name pos:line="97" pos:column="45">sin6<pos:position pos:line="97" pos:column="49"/></name><operator pos:line="97" pos:column="49">-&gt;<pos:position pos:line="97" pos:column="54"/></operator><name pos:line="97" pos:column="51">sin6_addr<pos:position pos:line="97" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="97" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="97" pos:column="62"/></condition><then pos:line="97" pos:column="62">
                <block type="pseudo"><expr_stmt><expr><name pos:line="98" pos:column="17">flags<pos:position pos:line="98" pos:column="22"/></name> <operator pos:line="98" pos:column="23">|=<pos:position pos:line="98" pos:column="25"/></operator> <name pos:line="98" pos:column="26">NI_NUMERICHOST<pos:position pos:line="98" pos:column="40"/></name></expr>;<pos:position pos:line="98" pos:column="41"/></expr_stmt></block></then></if></elseif></if>
            <break pos:line="99" pos:column="13">break;<pos:position pos:line="99" pos:column="19"/></break>
        }<pos:position pos:line="100" pos:column="10"/></block></switch>
    }<pos:position pos:line="101" pos:column="6"/></block>
    <break pos:line="102" pos:column="5">break;<pos:position pos:line="102" pos:column="11"/></break>
<cpp:endif pos:line="103" pos:column="1">#<cpp:directive pos:line="103" pos:column="2">endif<pos:position pos:line="103" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="104" pos:column="6"/></block></switch>
    <if pos:line="105" pos:column="5">if <condition pos:line="105" pos:column="8">(<expr><name pos:line="105" pos:column="9">host<pos:position pos:line="105" pos:column="13"/></name> <operator pos:line="105" pos:column="14">==<pos:position pos:line="105" pos:column="16"/></operator> <name pos:line="105" pos:column="17">NULL<pos:position pos:line="105" pos:column="21"/></name> <operator pos:line="105" pos:column="22">||<pos:position pos:line="105" pos:column="24"/></operator> <name pos:line="105" pos:column="25">hostlen<pos:position pos:line="105" pos:column="32"/></name> <operator pos:line="105" pos:column="33">==<pos:position pos:line="105" pos:column="35"/></operator> <literal type="number" pos:line="105" pos:column="36">0<pos:position pos:line="105" pos:column="37"/></literal></expr>)<pos:position pos:line="105" pos:column="38"/></condition><then pos:line="105" pos:column="38"> <block pos:line="105" pos:column="39">{
        <comment type="block" pos:line="106" pos:column="9">/*
         * do nothing in this case.
         * in case you are wondering if "&amp;&amp;" is more correct than
         * "||" here: RFC3493 says that host == NULL or hostlen == 0
         * means that the caller does not want the result.
         */</comment>
    }<pos:position pos:line="112" pos:column="6"/></block></then> <elseif pos:line="112" pos:column="7">else <if pos:line="112" pos:column="12">if <condition pos:line="112" pos:column="15">(<expr><name pos:line="112" pos:column="16">flags<pos:position pos:line="112" pos:column="21"/></name> <operator pos:line="112" pos:column="22">&amp;<pos:position pos:line="112" pos:column="27"/></operator> <name pos:line="112" pos:column="24">NI_NUMERICHOST<pos:position pos:line="112" pos:column="38"/></name></expr>)<pos:position pos:line="112" pos:column="39"/></condition><then pos:line="112" pos:column="39"> <block pos:line="112" pos:column="40">{
        <comment type="block" pos:line="113" pos:column="9">/* NUMERICHOST and NAMEREQD conflicts with each other */</comment>
        <if pos:line="114" pos:column="9">if <condition pos:line="114" pos:column="12">(<expr><name pos:line="114" pos:column="13">flags<pos:position pos:line="114" pos:column="18"/></name> <operator pos:line="114" pos:column="19">&amp;<pos:position pos:line="114" pos:column="24"/></operator> <name pos:line="114" pos:column="21">NI_NAMEREQD<pos:position pos:line="114" pos:column="32"/></name></expr>)<pos:position pos:line="114" pos:column="33"/></condition><then pos:line="114" pos:column="33">
            <block type="pseudo"><return pos:line="115" pos:column="13">return <expr><name pos:line="115" pos:column="20">EAI_NONAME<pos:position pos:line="115" pos:column="30"/></name></expr>;<pos:position pos:line="115" pos:column="31"/></return></block></then></if>

        <goto pos:line="117" pos:column="9">goto <name pos:line="117" pos:column="14">numeric<pos:position pos:line="117" pos:column="21"/></name>;<pos:position pos:line="117" pos:column="22"/></goto>
    }<pos:position pos:line="118" pos:column="6"/></block></then></if></elseif> <else pos:line="118" pos:column="7">else <block pos:line="118" pos:column="12">{
<cpp:ifdef pos:line="119" pos:column="1">#<cpp:directive pos:line="119" pos:column="2">ifdef<pos:position pos:line="119" pos:column="7"/></cpp:directive> <name pos:line="119" pos:column="8">USE_GETIPNODEBY<pos:position pos:line="119" pos:column="23"/></name></cpp:ifdef>
        <expr_stmt><expr><name pos:line="120" pos:column="9">hp<pos:position pos:line="120" pos:column="11"/></name> <operator pos:line="120" pos:column="12">=<pos:position pos:line="120" pos:column="13"/></operator> <call><name pos:line="120" pos:column="14">getipnodebyaddr<pos:position pos:line="120" pos:column="29"/></name><argument_list pos:line="120" pos:column="29">(<argument><expr><name pos:line="120" pos:column="30">addr<pos:position pos:line="120" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="120" pos:column="36">afd<pos:position pos:line="120" pos:column="39"/></name><operator pos:line="120" pos:column="39">-&gt;<pos:position pos:line="120" pos:column="44"/></operator><name pos:line="120" pos:column="41">a_addrlen<pos:position pos:line="120" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="120" pos:column="52">afd<pos:position pos:line="120" pos:column="55"/></name><operator pos:line="120" pos:column="55">-&gt;<pos:position pos:line="120" pos:column="60"/></operator><name pos:line="120" pos:column="57">a_af<pos:position pos:line="120" pos:column="61"/></name></name></expr></argument>, <argument><expr><operator pos:line="120" pos:column="63">&amp;<pos:position pos:line="120" pos:column="68"/></operator><name pos:line="120" pos:column="64">h_error<pos:position pos:line="120" pos:column="71"/></name></expr></argument>)<pos:position pos:line="120" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="73"/></expr_stmt>
<cpp:else pos:line="121" pos:column="1">#<cpp:directive pos:line="121" pos:column="2">else<pos:position pos:line="121" pos:column="6"/></cpp:directive></cpp:else>
        <expr_stmt><expr><name pos:line="122" pos:column="9">hp<pos:position pos:line="122" pos:column="11"/></name> <operator pos:line="122" pos:column="12">=<pos:position pos:line="122" pos:column="13"/></operator> <call><name pos:line="122" pos:column="14">gethostbyaddr<pos:position pos:line="122" pos:column="27"/></name><argument_list pos:line="122" pos:column="27">(<argument><expr><name pos:line="122" pos:column="28">addr<pos:position pos:line="122" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="122" pos:column="34">afd<pos:position pos:line="122" pos:column="37"/></name><operator pos:line="122" pos:column="37">-&gt;<pos:position pos:line="122" pos:column="42"/></operator><name pos:line="122" pos:column="39">a_addrlen<pos:position pos:line="122" pos:column="48"/></name></name></expr></argument>, <argument><expr><name><name pos:line="122" pos:column="50">afd<pos:position pos:line="122" pos:column="53"/></name><operator pos:line="122" pos:column="53">-&gt;<pos:position pos:line="122" pos:column="58"/></operator><name pos:line="122" pos:column="55">a_af<pos:position pos:line="122" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="122" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="61"/></expr_stmt>
<cpp:ifdef pos:line="123" pos:column="1">#<cpp:directive pos:line="123" pos:column="2">ifdef<pos:position pos:line="123" pos:column="7"/></cpp:directive> <name pos:line="123" pos:column="8">HAVE_H_ERRNO<pos:position pos:line="123" pos:column="20"/></name></cpp:ifdef>
        <expr_stmt><expr><name pos:line="124" pos:column="9">h_error<pos:position pos:line="124" pos:column="16"/></name> <operator pos:line="124" pos:column="17">=<pos:position pos:line="124" pos:column="18"/></operator> <name pos:line="124" pos:column="19">h_errno<pos:position pos:line="124" pos:column="26"/></name></expr>;<pos:position pos:line="124" pos:column="27"/></expr_stmt>
<cpp:else pos:line="125" pos:column="1">#<cpp:directive pos:line="125" pos:column="2">else<pos:position pos:line="125" pos:column="6"/></cpp:directive></cpp:else>
        <expr_stmt><expr><name pos:line="126" pos:column="9">h_error<pos:position pos:line="126" pos:column="16"/></name> <operator pos:line="126" pos:column="17">=<pos:position pos:line="126" pos:column="18"/></operator> <name pos:line="126" pos:column="19">EINVAL<pos:position pos:line="126" pos:column="25"/></name></expr>;<pos:position pos:line="126" pos:column="26"/></expr_stmt>
<cpp:endif pos:line="127" pos:column="1">#<cpp:directive pos:line="127" pos:column="2">endif<pos:position pos:line="127" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="128" pos:column="1">#<cpp:directive pos:line="128" pos:column="2">endif<pos:position pos:line="128" pos:column="7"/></cpp:directive></cpp:endif>

        <if pos:line="130" pos:column="9">if <condition pos:line="130" pos:column="12">(<expr><name pos:line="130" pos:column="13">hp<pos:position pos:line="130" pos:column="15"/></name></expr>)<pos:position pos:line="130" pos:column="16"/></condition><then pos:line="130" pos:column="16"> <block pos:line="130" pos:column="17">{
<cpp:if pos:line="131" pos:column="1">#<cpp:directive pos:line="131" pos:column="2">if<pos:position pos:line="131" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="131" pos:column="5">0<pos:position pos:line="131" pos:column="6"/></literal></expr></cpp:if>
            if (flags &amp; NI_NOFQDN) {
                <comment type="block" pos:line="133" pos:column="17">/*
                 * According to RFC3493 section 6.2, NI_NOFQDN
                 * means "node name portion of the FQDN shall
                 * be returned for local hosts."  The following
                 * code tries to implement it by returning the
                 * first label (the part before the first
                 * period) of the FQDN.  However, it is not
                 * clear if this always makes sense, since the
                 * given address may be outside of "local
                 * hosts."  Due to the unclear description, we
                 * disable the code in this implementation.
                 */</comment>
                char *p;
                p = strchr(hp-&gt;h_name, '.');
                if (p)
                    *p = '\0';
            }
<cpp:endif pos:line="150" pos:column="1">#<cpp:directive pos:line="150" pos:column="2">endif<pos:position pos:line="150" pos:column="7"/></cpp:directive></cpp:endif>
            <if pos:line="151" pos:column="13">if <condition pos:line="151" pos:column="16">(<expr><call><name pos:line="151" pos:column="17">strlen<pos:position pos:line="151" pos:column="23"/></name><argument_list pos:line="151" pos:column="23">(<argument><expr><name><name pos:line="151" pos:column="24">hp<pos:position pos:line="151" pos:column="26"/></name><operator pos:line="151" pos:column="26">-&gt;<pos:position pos:line="151" pos:column="31"/></operator><name pos:line="151" pos:column="28">h_name<pos:position pos:line="151" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="151" pos:column="35"/></argument_list></call> <operator pos:line="151" pos:column="36">+<pos:position pos:line="151" pos:column="37"/></operator> <literal type="number" pos:line="151" pos:column="38">1<pos:position pos:line="151" pos:column="39"/></literal> <operator pos:line="151" pos:column="40">&gt;<pos:position pos:line="151" pos:column="44"/></operator> <name pos:line="151" pos:column="42">hostlen<pos:position pos:line="151" pos:column="49"/></name></expr>)<pos:position pos:line="151" pos:column="50"/></condition><then pos:line="151" pos:column="50"> <block pos:line="151" pos:column="51">{
<cpp:ifdef pos:line="152" pos:column="1">#<cpp:directive pos:line="152" pos:column="2">ifdef<pos:position pos:line="152" pos:column="7"/></cpp:directive> <name pos:line="152" pos:column="8">USE_GETIPNODEBY<pos:position pos:line="152" pos:column="23"/></name></cpp:ifdef>
                <expr_stmt><expr><call><name pos:line="153" pos:column="17">freehostent<pos:position pos:line="153" pos:column="28"/></name><argument_list pos:line="153" pos:column="28">(<argument><expr><name pos:line="153" pos:column="29">hp<pos:position pos:line="153" pos:column="31"/></name></expr></argument>)<pos:position pos:line="153" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="153" pos:column="33"/></expr_stmt>
<cpp:endif pos:line="154" pos:column="1">#<cpp:directive pos:line="154" pos:column="2">endif<pos:position pos:line="154" pos:column="7"/></cpp:directive></cpp:endif>
                <return pos:line="155" pos:column="17">return <expr><name pos:line="155" pos:column="24">EAI_OVERFLOW<pos:position pos:line="155" pos:column="36"/></name></expr>;<pos:position pos:line="155" pos:column="37"/></return>
            }<pos:position pos:line="156" pos:column="14"/></block></then></if>
            <expr_stmt><expr><call><name pos:line="157" pos:column="13">strncpy<pos:position pos:line="157" pos:column="20"/></name><argument_list pos:line="157" pos:column="20">(<argument><expr><name pos:line="157" pos:column="21">host<pos:position pos:line="157" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="157" pos:column="27">hp<pos:position pos:line="157" pos:column="29"/></name><operator pos:line="157" pos:column="29">-&gt;<pos:position pos:line="157" pos:column="34"/></operator><name pos:line="157" pos:column="31">h_name<pos:position pos:line="157" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="157" pos:column="39">hostlen<pos:position pos:line="157" pos:column="46"/></name></expr></argument>)<pos:position pos:line="157" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="48"/></expr_stmt>
<cpp:ifdef pos:line="158" pos:column="1">#<cpp:directive pos:line="158" pos:column="2">ifdef<pos:position pos:line="158" pos:column="7"/></cpp:directive> <name pos:line="158" pos:column="8">USE_GETIPNODEBY<pos:position pos:line="158" pos:column="23"/></name></cpp:ifdef>
            <expr_stmt><expr><call><name pos:line="159" pos:column="13">freehostent<pos:position pos:line="159" pos:column="24"/></name><argument_list pos:line="159" pos:column="24">(<argument><expr><name pos:line="159" pos:column="25">hp<pos:position pos:line="159" pos:column="27"/></name></expr></argument>)<pos:position pos:line="159" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="159" pos:column="29"/></expr_stmt>
<cpp:endif pos:line="160" pos:column="1">#<cpp:directive pos:line="160" pos:column="2">endif<pos:position pos:line="160" pos:column="7"/></cpp:directive></cpp:endif>
        }<pos:position pos:line="161" pos:column="10"/></block></then> <else pos:line="161" pos:column="11">else <block pos:line="161" pos:column="16">{
            <if pos:line="162" pos:column="13">if <condition pos:line="162" pos:column="16">(<expr><name pos:line="162" pos:column="17">flags<pos:position pos:line="162" pos:column="22"/></name> <operator pos:line="162" pos:column="23">&amp;<pos:position pos:line="162" pos:column="28"/></operator> <name pos:line="162" pos:column="25">NI_NAMEREQD<pos:position pos:line="162" pos:column="36"/></name></expr>)<pos:position pos:line="162" pos:column="37"/></condition><then pos:line="162" pos:column="37">
                <block type="pseudo"><return pos:line="163" pos:column="17">return <expr><name pos:line="163" pos:column="24">EAI_NONAME<pos:position pos:line="163" pos:column="34"/></name></expr>;<pos:position pos:line="163" pos:column="35"/></return></block></then></if>

<label><name pos:line="165" pos:column="1">numeric<pos:position pos:line="165" pos:column="8"/></name>:<pos:position pos:line="165" pos:column="9"/></label>
            <switch pos:line="166" pos:column="13">switch <condition pos:line="166" pos:column="20">(<expr><name><name pos:line="166" pos:column="21">afd<pos:position pos:line="166" pos:column="24"/></name><operator pos:line="166" pos:column="24">-&gt;<pos:position pos:line="166" pos:column="29"/></operator><name pos:line="166" pos:column="26">a_af<pos:position pos:line="166" pos:column="30"/></name></name></expr>)<pos:position pos:line="166" pos:column="31"/></condition> <block pos:line="166" pos:column="32">{
<cpp:ifdef pos:line="167" pos:column="1">#<cpp:directive pos:line="167" pos:column="2">ifdef<pos:position pos:line="167" pos:column="7"/></cpp:directive> <name pos:line="167" pos:column="8">INET6<pos:position pos:line="167" pos:column="13"/></name></cpp:ifdef>
            <case pos:line="168" pos:column="13">case <expr><name pos:line="168" pos:column="18">AF_INET6<pos:position pos:line="168" pos:column="26"/></name></expr>:<pos:position pos:line="168" pos:column="27"/></case> <block pos:line="168" pos:column="28">{
                <decl_stmt><decl><type><name pos:line="169" pos:column="17">int<pos:position pos:line="169" pos:column="20"/></name></type> <name pos:line="169" pos:column="21">error<pos:position pos:line="169" pos:column="26"/></name></decl>;<pos:position pos:line="169" pos:column="27"/></decl_stmt>

                <if pos:line="171" pos:column="17">if <condition pos:line="171" pos:column="20">(<expr><operator pos:line="171" pos:column="21">(<pos:position pos:line="171" pos:column="22"/></operator><name pos:line="171" pos:column="22">error<pos:position pos:line="171" pos:column="27"/></name> <operator pos:line="171" pos:column="28">=<pos:position pos:line="171" pos:column="29"/></operator> <call><name pos:line="171" pos:column="30">ip6_parsenumeric<pos:position pos:line="171" pos:column="46"/></name><argument_list pos:line="171" pos:column="46">(<argument><expr><name pos:line="171" pos:column="47">sa<pos:position pos:line="171" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="171" pos:column="51">addr<pos:position pos:line="171" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="171" pos:column="57">host<pos:position pos:line="171" pos:column="61"/></name></expr></argument>,
                                              <argument><expr><name pos:line="172" pos:column="47">hostlen<pos:position pos:line="172" pos:column="54"/></name></expr></argument>,
                                              <argument><expr><name pos:line="173" pos:column="47">flags<pos:position pos:line="173" pos:column="52"/></name></expr></argument>)<pos:position pos:line="173" pos:column="53"/></argument_list></call><operator pos:line="173" pos:column="53">)<pos:position pos:line="173" pos:column="54"/></operator> <operator pos:line="173" pos:column="55">!=<pos:position pos:line="173" pos:column="57"/></operator> <literal type="number" pos:line="173" pos:column="58">0<pos:position pos:line="173" pos:column="59"/></literal></expr>)<pos:position pos:line="173" pos:column="60"/></condition><then pos:line="173" pos:column="60">
                    <block type="pseudo"><return pos:line="174" pos:column="21">return<expr><operator pos:line="174" pos:column="27">(<pos:position pos:line="174" pos:column="28"/></operator><name pos:line="174" pos:column="28">error<pos:position pos:line="174" pos:column="33"/></name><operator pos:line="174" pos:column="33">)<pos:position pos:line="174" pos:column="34"/></operator></expr>;<pos:position pos:line="174" pos:column="35"/></return></block></then></if>
                <break pos:line="175" pos:column="17">break;<pos:position pos:line="175" pos:column="23"/></break>
            }<pos:position pos:line="176" pos:column="14"/></block>
<cpp:endif pos:line="177" pos:column="1">#<cpp:directive pos:line="177" pos:column="2">endif<pos:position pos:line="177" pos:column="7"/></cpp:directive></cpp:endif>
            <default pos:line="178" pos:column="13">default:<pos:position pos:line="178" pos:column="21"/></default>
                <if pos:line="179" pos:column="17">if <condition pos:line="179" pos:column="20">(<expr><call><name pos:line="179" pos:column="21">xinet_ntop<pos:position pos:line="179" pos:column="31"/></name><argument_list pos:line="179" pos:column="31">(<argument><expr><name><name pos:line="179" pos:column="32">afd<pos:position pos:line="179" pos:column="35"/></name><operator pos:line="179" pos:column="35">-&gt;<pos:position pos:line="179" pos:column="40"/></operator><name pos:line="179" pos:column="37">a_af<pos:position pos:line="179" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="179" pos:column="43">addr<pos:position pos:line="179" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="179" pos:column="49">host<pos:position pos:line="179" pos:column="53"/></name></expr></argument>,
                               <argument><expr><name pos:line="180" pos:column="32">hostlen<pos:position pos:line="180" pos:column="39"/></name></expr></argument>)<pos:position pos:line="180" pos:column="40"/></argument_list></call> <operator pos:line="180" pos:column="41">==<pos:position pos:line="180" pos:column="43"/></operator> <name pos:line="180" pos:column="44">NULL<pos:position pos:line="180" pos:column="48"/></name></expr>)<pos:position pos:line="180" pos:column="49"/></condition><then pos:line="180" pos:column="49">
                    <block type="pseudo"><return pos:line="181" pos:column="21">return <expr><name pos:line="181" pos:column="28">EAI_SYSTEM<pos:position pos:line="181" pos:column="38"/></name></expr>;<pos:position pos:line="181" pos:column="39"/></return></block></then></if>
                <break pos:line="182" pos:column="17">break;<pos:position pos:line="182" pos:column="23"/></break>
            }<pos:position pos:line="183" pos:column="14"/></block></switch>
        }<pos:position pos:line="184" pos:column="10"/></block></else></if>
    }<pos:position pos:line="185" pos:column="6"/></block></else></if>
    <return pos:line="186" pos:column="5">return<expr><operator pos:line="186" pos:column="11">(<pos:position pos:line="186" pos:column="12"/></operator><literal type="number" pos:line="186" pos:column="12">0<pos:position pos:line="186" pos:column="13"/></literal><operator pos:line="186" pos:column="13">)<pos:position pos:line="186" pos:column="14"/></operator></expr>;<pos:position pos:line="186" pos:column="15"/></return>
}<pos:position pos:line="187" pos:column="2"/></block></unit>
