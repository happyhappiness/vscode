<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3438_squid-3.5.27.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">mib_tree_entry<pos:position pos:line="1" pos:column="22"/></name> <modifier pos:line="1" pos:column="23">*<pos:position pos:line="1" pos:column="24"/></modifier></type>
<name pos:line="2" pos:column="1">snmpAddNodeStr<pos:position pos:line="2" pos:column="15"/></name><parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><specifier pos:line="2" pos:column="16">const<pos:position pos:line="2" pos:column="21"/></specifier> <name pos:line="2" pos:column="22">char<pos:position pos:line="2" pos:column="26"/></name> <modifier pos:line="2" pos:column="27">*<pos:position pos:line="2" pos:column="28"/></modifier></type><name pos:line="2" pos:column="28">base_str<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="38">int<pos:position pos:line="2" pos:column="41"/></name></type> <name pos:line="2" pos:column="42">o<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="45">oid_ParseFn<pos:position pos:line="2" pos:column="56"/></name> <modifier pos:line="2" pos:column="57">*<pos:position pos:line="2" pos:column="58"/></modifier></type> <name pos:line="2" pos:column="59">parsefunction<pos:position pos:line="2" pos:column="72"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="74">instance_Fn<pos:position pos:line="2" pos:column="85"/></name> <modifier pos:line="2" pos:column="86">*<pos:position pos:line="2" pos:column="87"/></modifier></type> <name pos:line="2" pos:column="88">instancefunction<pos:position pos:line="2" pos:column="104"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="106">AggrType<pos:position pos:line="2" pos:column="114"/></name></type> <name pos:line="2" pos:column="115">aggrType<pos:position pos:line="2" pos:column="123"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="124"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">mib_tree_entry<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">m<pos:position pos:line="4" pos:column="22"/></name></decl>, <modifier pos:line="4" pos:column="24">*<pos:position pos:line="4" pos:column="25"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="25">b<pos:position pos:line="4" pos:column="26"/></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">oid<pos:position pos:line="5" pos:column="8"/></name> <modifier pos:line="5" pos:column="9">*<pos:position pos:line="5" pos:column="10"/></modifier></type><name pos:line="5" pos:column="10">n<pos:position pos:line="5" pos:column="11"/></name></decl>;<pos:position pos:line="5" pos:column="12"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">nl<pos:position pos:line="6" pos:column="11"/></name></decl>;<pos:position pos:line="6" pos:column="12"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name></type> <name><name pos:line="7" pos:column="10">s<pos:position pos:line="7" pos:column="11"/></name><index pos:line="7" pos:column="11">[<expr><literal type="number" pos:line="7" pos:column="12">1024<pos:position pos:line="7" pos:column="16"/></literal></expr>]<pos:position pos:line="7" pos:column="17"/></index></name></decl>;<pos:position pos:line="7" pos:column="18"/></decl_stmt>

    <comment type="block" pos:line="9" pos:column="5">/* Find base node */</comment>
    <expr_stmt><expr><name pos:line="10" pos:column="5">b<pos:position pos:line="10" pos:column="6"/></name> <operator pos:line="10" pos:column="7">=<pos:position pos:line="10" pos:column="8"/></operator> <call><name pos:line="10" pos:column="9">snmpLookupNodeStr<pos:position pos:line="10" pos:column="26"/></name><argument_list pos:line="10" pos:column="26">(<argument><expr><name pos:line="10" pos:column="27">mib_tree_head<pos:position pos:line="10" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="42">base_str<pos:position pos:line="10" pos:column="50"/></name></expr></argument>)<pos:position pos:line="10" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="52"/></expr_stmt>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">!<pos:position pos:line="11" pos:column="10"/></operator> <name pos:line="11" pos:column="11">b<pos:position pos:line="11" pos:column="12"/></name></expr>)<pos:position pos:line="11" pos:column="13"/></condition><then pos:line="11" pos:column="13">
        <block type="pseudo"><return pos:line="12" pos:column="9">return <expr><name pos:line="12" pos:column="16">NULL<pos:position pos:line="12" pos:column="20"/></name></expr>;<pos:position pos:line="12" pos:column="21"/></return></block></then></if>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">debugs<pos:position pos:line="13" pos:column="11"/></name><argument_list pos:line="13" pos:column="11">(<argument><expr><literal type="number" pos:line="13" pos:column="12">49<pos:position pos:line="13" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="16">5<pos:position pos:line="13" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="19">"snmpAddNodeStr: "<pos:position pos:line="13" pos:column="37"/></literal> <operator pos:line="13" pos:column="38">&lt;&lt;<pos:position pos:line="13" pos:column="46"/></operator> <name pos:line="13" pos:column="41">base_str<pos:position pos:line="13" pos:column="49"/></name> <operator pos:line="13" pos:column="50">&lt;&lt;<pos:position pos:line="13" pos:column="58"/></operator> <literal type="string" pos:line="13" pos:column="53">": -&gt; "<pos:position pos:line="13" pos:column="63"/></literal> <operator pos:line="13" pos:column="61">&lt;&lt;<pos:position pos:line="13" pos:column="69"/></operator> <name pos:line="13" pos:column="64">b<pos:position pos:line="13" pos:column="65"/></name></expr></argument>)<pos:position pos:line="13" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="67"/></expr_stmt>

    <comment type="block" pos:line="15" pos:column="5">/* Create OID string for new entry */</comment>
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">snprintf<pos:position pos:line="16" pos:column="13"/></name><argument_list pos:line="16" pos:column="13">(<argument><expr><name pos:line="16" pos:column="14">s<pos:position pos:line="16" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="17">1024<pos:position pos:line="16" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="23">"%s.%d"<pos:position pos:line="16" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="32">base_str<pos:position pos:line="16" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="42">o<pos:position pos:line="16" pos:column="43"/></name></expr></argument>)<pos:position pos:line="16" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="45"/></expr_stmt>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><operator pos:line="17" pos:column="9">!<pos:position pos:line="17" pos:column="10"/></operator> <call><name pos:line="17" pos:column="11">snmpCreateOidFromStr<pos:position pos:line="17" pos:column="31"/></name><argument_list pos:line="17" pos:column="31">(<argument><expr><name pos:line="17" pos:column="32">s<pos:position pos:line="17" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="35">&amp;<pos:position pos:line="17" pos:column="40"/></operator><name pos:line="17" pos:column="36">n<pos:position pos:line="17" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="39">&amp;<pos:position pos:line="17" pos:column="44"/></operator><name pos:line="17" pos:column="40">nl<pos:position pos:line="17" pos:column="42"/></name></expr></argument>)<pos:position pos:line="17" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="44"/></condition><then pos:line="17" pos:column="44">
        <block type="pseudo"><return pos:line="18" pos:column="9">return <expr><name pos:line="18" pos:column="16">NULL<pos:position pos:line="18" pos:column="20"/></name></expr>;<pos:position pos:line="18" pos:column="21"/></return></block></then></if>

    <comment type="block" pos:line="20" pos:column="5">/* Create a node */</comment>
    <expr_stmt><expr><name pos:line="21" pos:column="5">m<pos:position pos:line="21" pos:column="6"/></name> <operator pos:line="21" pos:column="7">=<pos:position pos:line="21" pos:column="8"/></operator> <call><name pos:line="21" pos:column="9">snmpAddNode<pos:position pos:line="21" pos:column="20"/></name><argument_list pos:line="21" pos:column="20">(<argument><expr><name pos:line="21" pos:column="21">n<pos:position pos:line="21" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="24">nl<pos:position pos:line="21" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="28">parsefunction<pos:position pos:line="21" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="43">instancefunction<pos:position pos:line="21" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="61">aggrType<pos:position pos:line="21" pos:column="69"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="71">0<pos:position pos:line="21" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="74"/></expr_stmt>

    <comment type="block" pos:line="23" pos:column="5">/* Link it into the existing tree */</comment>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">snmpAddNodeChild<pos:position pos:line="24" pos:column="21"/></name><argument_list pos:line="24" pos:column="21">(<argument><expr><name pos:line="24" pos:column="22">b<pos:position pos:line="24" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="25">m<pos:position pos:line="24" pos:column="26"/></name></expr></argument>)<pos:position pos:line="24" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="28"/></expr_stmt>

    <comment type="block" pos:line="26" pos:column="5">/* Return the node */</comment>
    <return pos:line="27" pos:column="5">return <expr><name pos:line="27" pos:column="12">m<pos:position pos:line="27" pos:column="13"/></name></expr>;<pos:position pos:line="27" pos:column="14"/></return>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
