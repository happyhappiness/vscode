<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4051_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Icap<pos:position pos:line="1" pos:column="22"/></name><operator pos:line="1" pos:column="22">::<pos:position pos:line="1" pos:column="24"/></operator><name pos:line="1" pos:column="24">ModXact<pos:position pos:line="1" pos:column="31"/></name><operator pos:line="1" pos:column="31">::<pos:position pos:line="1" pos:column="33"/></operator><name pos:line="1" pos:column="33">stopWriting<pos:position pos:line="1" pos:column="44"/></name></name><parameter_list pos:line="1" pos:column="44">(<parameter><decl><type><name pos:line="1" pos:column="45">bool<pos:position pos:line="1" pos:column="49"/></name></type> <name pos:line="1" pos:column="50">nicely<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="57"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <if pos:line="3" pos:column="5">if <condition pos:line="3" pos:column="8">(<expr><name><name pos:line="3" pos:column="9">state<pos:position pos:line="3" pos:column="14"/></name><operator pos:line="3" pos:column="14">.<pos:position pos:line="3" pos:column="15"/></operator><name pos:line="3" pos:column="15">writing<pos:position pos:line="3" pos:column="22"/></name></name> <operator pos:line="3" pos:column="23">==<pos:position pos:line="3" pos:column="25"/></operator> <name><name pos:line="3" pos:column="26">State<pos:position pos:line="3" pos:column="31"/></name><operator pos:line="3" pos:column="31">::<pos:position pos:line="3" pos:column="33"/></operator><name pos:line="3" pos:column="33">writingReallyDone<pos:position pos:line="3" pos:column="50"/></name></name></expr>)<pos:position pos:line="3" pos:column="51"/></condition><then pos:line="3" pos:column="51">
        <block type="pseudo"><return pos:line="4" pos:column="9">return;<pos:position pos:line="4" pos:column="16"/></return></block></then></if>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">writer<pos:position pos:line="6" pos:column="15"/></name> <operator pos:line="6" pos:column="16">!=<pos:position pos:line="6" pos:column="18"/></operator> <name pos:line="6" pos:column="19">NULL<pos:position pos:line="6" pos:column="23"/></name></expr>)<pos:position pos:line="6" pos:column="24"/></condition><then pos:line="6" pos:column="24"> <block pos:line="6" pos:column="25">{
        <if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">nicely<pos:position pos:line="7" pos:column="19"/></name></expr>)<pos:position pos:line="7" pos:column="20"/></condition><then pos:line="7" pos:column="20"> <block pos:line="7" pos:column="21">{
            <expr_stmt><expr><call><name pos:line="8" pos:column="13">debugs<pos:position pos:line="8" pos:column="19"/></name><argument_list pos:line="8" pos:column="19">(<argument><expr><literal type="number" pos:line="8" pos:column="20">93<pos:position pos:line="8" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="24">7<pos:position pos:line="8" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="27">HERE<pos:position pos:line="8" pos:column="31"/></name> <operator pos:line="8" pos:column="32">&lt;&lt;<pos:position pos:line="8" pos:column="40"/></operator> <literal type="string" pos:line="8" pos:column="35">"will wait for the last write"<pos:position pos:line="8" pos:column="65"/></literal> <operator pos:line="8" pos:column="66">&lt;&lt;<pos:position pos:line="8" pos:column="74"/></operator> <call><name pos:line="8" pos:column="69">status<pos:position pos:line="8" pos:column="75"/></name><argument_list pos:line="8" pos:column="75">()<pos:position pos:line="8" pos:column="77"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="79"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="9" pos:column="13">state<pos:position pos:line="9" pos:column="18"/></name><operator pos:line="9" pos:column="18">.<pos:position pos:line="9" pos:column="19"/></operator><name pos:line="9" pos:column="19">writing<pos:position pos:line="9" pos:column="26"/></name></name> <operator pos:line="9" pos:column="27">=<pos:position pos:line="9" pos:column="28"/></operator> <name><name pos:line="9" pos:column="29">State<pos:position pos:line="9" pos:column="34"/></name><operator pos:line="9" pos:column="34">::<pos:position pos:line="9" pos:column="36"/></operator><name pos:line="9" pos:column="36">writingAlmostDone<pos:position pos:line="9" pos:column="53"/></name></name></expr>;<pos:position pos:line="9" pos:column="54"/></expr_stmt> <comment type="line" pos:line="9" pos:column="55">// may already be set</comment>
            <expr_stmt><expr><call><name pos:line="10" pos:column="13">checkConsuming<pos:position pos:line="10" pos:column="27"/></name><argument_list pos:line="10" pos:column="27">()<pos:position pos:line="10" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="30"/></expr_stmt>
            <return pos:line="11" pos:column="13">return;<pos:position pos:line="11" pos:column="20"/></return>
        }<pos:position pos:line="12" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">debugs<pos:position pos:line="13" pos:column="15"/></name><argument_list pos:line="13" pos:column="15">(<argument><expr><literal type="number" pos:line="13" pos:column="16">93<pos:position pos:line="13" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="20">3<pos:position pos:line="13" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="23">HERE<pos:position pos:line="13" pos:column="27"/></name> <operator pos:line="13" pos:column="28">&lt;&lt;<pos:position pos:line="13" pos:column="36"/></operator> <literal type="string" pos:line="13" pos:column="31">"will NOT wait for the last write"<pos:position pos:line="13" pos:column="65"/></literal> <operator pos:line="13" pos:column="66">&lt;&lt;<pos:position pos:line="13" pos:column="74"/></operator> <call><name pos:line="13" pos:column="69">status<pos:position pos:line="13" pos:column="75"/></name><argument_list pos:line="13" pos:column="75">()<pos:position pos:line="13" pos:column="77"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="79"/></expr_stmt>

        <comment type="line" pos:line="15" pos:column="9">// Comm does not have an interface to clear the writer callback nicely,</comment>
        <comment type="line" pos:line="16" pos:column="9">// but without clearing the writer we cannot recycle the connection.</comment>
        <comment type="line" pos:line="17" pos:column="9">// We prevent connection reuse and hope that we can handle a callback</comment>
        <comment type="line" pos:line="18" pos:column="9">// call at any time, usually in the middle of the destruction sequence!</comment>
        <comment type="line" pos:line="19" pos:column="9">// Somebody should add comm_remove_write_handler() to comm API.</comment>
        <expr_stmt><expr><name pos:line="20" pos:column="9">reuseConnection<pos:position pos:line="20" pos:column="24"/></name> <operator pos:line="20" pos:column="25">=<pos:position pos:line="20" pos:column="26"/></operator> <literal type="boolean" pos:line="20" pos:column="27">false<pos:position pos:line="20" pos:column="32"/></literal></expr>;<pos:position pos:line="20" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name pos:line="21" pos:column="9">ignoreLastWrite<pos:position pos:line="21" pos:column="24"/></name> <operator pos:line="21" pos:column="25">=<pos:position pos:line="21" pos:column="26"/></operator> <literal type="boolean" pos:line="21" pos:column="27">true<pos:position pos:line="21" pos:column="31"/></literal></expr>;<pos:position pos:line="21" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="24" pos:column="5">debugs<pos:position pos:line="24" pos:column="11"/></name><argument_list pos:line="24" pos:column="11">(<argument><expr><literal type="number" pos:line="24" pos:column="12">93<pos:position pos:line="24" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="16">7<pos:position pos:line="24" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="19">HERE<pos:position pos:line="24" pos:column="23"/></name> <operator pos:line="24" pos:column="24">&lt;&lt;<pos:position pos:line="24" pos:column="32"/></operator> <literal type="string" pos:line="24" pos:column="27">"will no longer write"<pos:position pos:line="24" pos:column="49"/></literal> <operator pos:line="24" pos:column="50">&lt;&lt;<pos:position pos:line="24" pos:column="58"/></operator> <call><name pos:line="24" pos:column="53">status<pos:position pos:line="24" pos:column="59"/></name><argument_list pos:line="24" pos:column="59">()<pos:position pos:line="24" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="63"/></expr_stmt>
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><call><name><name pos:line="25" pos:column="9">virginBodyWriting<pos:position pos:line="25" pos:column="26"/></name><operator pos:line="25" pos:column="26">.<pos:position pos:line="25" pos:column="27"/></operator><name pos:line="25" pos:column="27">active<pos:position pos:line="25" pos:column="33"/></name></name><argument_list pos:line="25" pos:column="33">()<pos:position pos:line="25" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="36"/></condition><then pos:line="25" pos:column="36"> <block pos:line="25" pos:column="37">{
        <expr_stmt><expr><call><name><name pos:line="26" pos:column="9">virginBodyWriting<pos:position pos:line="26" pos:column="26"/></name><operator pos:line="26" pos:column="26">.<pos:position pos:line="26" pos:column="27"/></operator><name pos:line="26" pos:column="27">disable<pos:position pos:line="26" pos:column="34"/></name></name><argument_list pos:line="26" pos:column="34">()<pos:position pos:line="26" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">virginConsume<pos:position pos:line="27" pos:column="22"/></name><argument_list pos:line="27" pos:column="22">()<pos:position pos:line="27" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="29" pos:column="5">state<pos:position pos:line="29" pos:column="10"/></name><operator pos:line="29" pos:column="10">.<pos:position pos:line="29" pos:column="11"/></operator><name pos:line="29" pos:column="11">writing<pos:position pos:line="29" pos:column="18"/></name></name> <operator pos:line="29" pos:column="19">=<pos:position pos:line="29" pos:column="20"/></operator> <name><name pos:line="29" pos:column="21">State<pos:position pos:line="29" pos:column="26"/></name><operator pos:line="29" pos:column="26">::<pos:position pos:line="29" pos:column="28"/></operator><name pos:line="29" pos:column="28">writingReallyDone<pos:position pos:line="29" pos:column="45"/></name></name></expr>;<pos:position pos:line="29" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">checkConsuming<pos:position pos:line="30" pos:column="19"/></name><argument_list pos:line="30" pos:column="19">()<pos:position pos:line="30" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="22"/></expr_stmt>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
