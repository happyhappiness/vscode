<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2084_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HttpStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">decodeAndWriteReplyBody<pos:position pos:line="2" pos:column="39"/></name></name><parameter_list pos:line="2" pos:column="39">()<pos:position pos:line="2" pos:column="41"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">data<pos:position pos:line="4" pos:column="21"/></name> <init pos:line="4" pos:column="22">= <expr><name pos:line="4" pos:column="24">NULL<pos:position pos:line="4" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">len<pos:position pos:line="5" pos:column="12"/></name></decl>;<pos:position pos:line="5" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">bool<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">wasThereAnException<pos:position pos:line="6" pos:column="29"/></name> <init pos:line="6" pos:column="30">= <expr><literal type="boolean" pos:line="6" pos:column="32">false<pos:position pos:line="6" pos:column="37"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="38"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><name><name pos:line="7" pos:column="12">flags<pos:position pos:line="7" pos:column="17"/></name><operator pos:line="7" pos:column="17">.<pos:position pos:line="7" pos:column="18"/></operator><name pos:line="7" pos:column="18">chunked<pos:position pos:line="7" pos:column="25"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">assert<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><name pos:line="8" pos:column="12">httpChunkDecoder<pos:position pos:line="8" pos:column="28"/></name></expr></argument>)<pos:position pos:line="8" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">SQUID_ENTER_THROWING_CODE<pos:position pos:line="9" pos:column="30"/></name><argument_list pos:line="9" pos:column="30">()<pos:position pos:line="9" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="33"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">MemBuf<pos:position pos:line="10" pos:column="11"/></name></type> <name pos:line="10" pos:column="12">decodedData<pos:position pos:line="10" pos:column="23"/></name></decl>;<pos:position pos:line="10" pos:column="24"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="11" pos:column="5">decodedData<pos:position pos:line="11" pos:column="16"/></name><operator pos:line="11" pos:column="16">.<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="17">init<pos:position pos:line="11" pos:column="21"/></name></name><argument_list pos:line="11" pos:column="21">()<pos:position pos:line="11" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="24"/></expr_stmt>
    <decl_stmt><decl><type><specifier pos:line="12" pos:column="5">const<pos:position pos:line="12" pos:column="10"/></specifier> <name pos:line="12" pos:column="11">bool<pos:position pos:line="12" pos:column="15"/></name></type> <name pos:line="12" pos:column="16">doneParsing<pos:position pos:line="12" pos:column="27"/></name> <init pos:line="12" pos:column="28">= <expr><call><name><name pos:line="12" pos:column="30">httpChunkDecoder<pos:position pos:line="12" pos:column="46"/></name><operator pos:line="12" pos:column="46">-&gt;<pos:position pos:line="12" pos:column="51"/></operator><name pos:line="12" pos:column="48">parse<pos:position pos:line="12" pos:column="53"/></name></name><argument_list pos:line="12" pos:column="53">(<argument><expr><name pos:line="12" pos:column="54">readBuf<pos:position pos:line="12" pos:column="61"/></name></expr></argument>,<argument><expr><operator pos:line="12" pos:column="62">&amp;<pos:position pos:line="12" pos:column="67"/></operator><name pos:line="12" pos:column="63">decodedData<pos:position pos:line="12" pos:column="74"/></name></expr></argument>)<pos:position pos:line="12" pos:column="75"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="76"/></decl_stmt>
    <expr_stmt><expr><name pos:line="13" pos:column="5">len<pos:position pos:line="13" pos:column="8"/></name> <operator pos:line="13" pos:column="9">=<pos:position pos:line="13" pos:column="10"/></operator> <call><name><name pos:line="13" pos:column="11">decodedData<pos:position pos:line="13" pos:column="22"/></name><operator pos:line="13" pos:column="22">.<pos:position pos:line="13" pos:column="23"/></operator><name pos:line="13" pos:column="23">contentSize<pos:position pos:line="13" pos:column="34"/></name></name><argument_list pos:line="13" pos:column="34">()<pos:position pos:line="13" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name pos:line="14" pos:column="5">data<pos:position pos:line="14" pos:column="9"/></name><operator pos:line="14" pos:column="9">=<pos:position pos:line="14" pos:column="10"/></operator><call><name><name pos:line="14" pos:column="10">decodedData<pos:position pos:line="14" pos:column="21"/></name><operator pos:line="14" pos:column="21">.<pos:position pos:line="14" pos:column="22"/></operator><name pos:line="14" pos:column="22">content<pos:position pos:line="14" pos:column="29"/></name></name><argument_list pos:line="14" pos:column="29">()<pos:position pos:line="14" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">addVirginReplyBody<pos:position pos:line="15" pos:column="23"/></name><argument_list pos:line="15" pos:column="23">(<argument><expr><name pos:line="15" pos:column="24">data<pos:position pos:line="15" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="30">len<pos:position pos:line="15" pos:column="33"/></name></expr></argument>)<pos:position pos:line="15" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="35"/></expr_stmt>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name pos:line="16" pos:column="9">doneParsing<pos:position pos:line="16" pos:column="20"/></name></expr>)<pos:position pos:line="16" pos:column="21"/></condition><then pos:line="16" pos:column="21"> <block pos:line="16" pos:column="22">{
        <expr_stmt><expr><name pos:line="17" pos:column="9">lastChunk<pos:position pos:line="17" pos:column="18"/></name> <operator pos:line="17" pos:column="19">=<pos:position pos:line="17" pos:column="20"/></operator> <literal type="number" pos:line="17" pos:column="21">1<pos:position pos:line="17" pos:column="22"/></literal></expr>;<pos:position pos:line="17" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="18" pos:column="9">flags<pos:position pos:line="18" pos:column="14"/></name><operator pos:line="18" pos:column="14">.<pos:position pos:line="18" pos:column="15"/></operator><name pos:line="18" pos:column="15">do_next_read<pos:position pos:line="18" pos:column="27"/></name></name> <operator pos:line="18" pos:column="28">=<pos:position pos:line="18" pos:column="29"/></operator> <literal type="boolean" pos:line="18" pos:column="30">false<pos:position pos:line="18" pos:column="35"/></literal></expr>;<pos:position pos:line="18" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">SQUID_EXIT_THROWING_CODE<pos:position pos:line="20" pos:column="29"/></name><argument_list pos:line="20" pos:column="29">(<argument><expr><name pos:line="20" pos:column="30">wasThereAnException<pos:position pos:line="20" pos:column="49"/></name></expr></argument>)<pos:position pos:line="20" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="51"/></expr_stmt>
    <return pos:line="21" pos:column="5">return <expr><name pos:line="21" pos:column="12">wasThereAnException<pos:position pos:line="21" pos:column="31"/></name></expr>;<pos:position pos:line="21" pos:column="32"/></return>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
