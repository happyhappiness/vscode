<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5395_squid-3.3.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">logfile_mod_daemon_lineend<pos:position pos:line="2" pos:column="27"/></name><parameter_list pos:line="2" pos:column="27">(<parameter><decl><type><name pos:line="2" pos:column="28">Logfile<pos:position pos:line="2" pos:column="35"/></name> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type> <name pos:line="2" pos:column="38">lf<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="41"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">l_daemon_t<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">ll<pos:position pos:line="4" pos:column="19"/></name> <init pos:line="4" pos:column="20">= <expr><cast type="static" pos:line="4" pos:column="22">static_cast<argument_list type="generic" pos:line="4" pos:column="33">&lt;<argument><expr><name pos:line="4" pos:column="34">l_daemon_t<pos:position pos:line="4" pos:column="44"/></name> <operator pos:line="4" pos:column="45">*<pos:position pos:line="4" pos:column="46"/></operator></expr></argument>&gt;<pos:position pos:line="4" pos:column="50"/></argument_list><argument_list pos:line="4" pos:column="47">(<argument><expr><name><name pos:line="4" pos:column="48">lf<pos:position pos:line="4" pos:column="50"/></name><operator pos:line="4" pos:column="50">-&gt;<pos:position pos:line="4" pos:column="55"/></operator><name pos:line="4" pos:column="52">data<pos:position pos:line="4" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="4" pos:column="57"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="4" pos:column="58"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">logfile_buffer_t<pos:position pos:line="5" pos:column="21"/></name> <modifier pos:line="5" pos:column="22">*<pos:position pos:line="5" pos:column="23"/></modifier></type><name pos:line="5" pos:column="23">b<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><name><name pos:line="6" pos:column="12">ll<pos:position pos:line="6" pos:column="14"/></name><operator pos:line="6" pos:column="14">-&gt;<pos:position pos:line="6" pos:column="19"/></operator><name pos:line="6" pos:column="16">eol<pos:position pos:line="6" pos:column="19"/></name></name> <operator pos:line="6" pos:column="20">==<pos:position pos:line="6" pos:column="22"/></operator> <literal type="number" pos:line="6" pos:column="23">0<pos:position pos:line="6" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="7" pos:column="5">ll<pos:position pos:line="7" pos:column="7"/></name><operator pos:line="7" pos:column="7">-&gt;<pos:position pos:line="7" pos:column="12"/></operator><name pos:line="7" pos:column="9">eol<pos:position pos:line="7" pos:column="12"/></name></name> <operator pos:line="7" pos:column="13">=<pos:position pos:line="7" pos:column="14"/></operator> <literal type="number" pos:line="7" pos:column="15">1<pos:position pos:line="7" pos:column="16"/></literal></expr>;<pos:position pos:line="7" pos:column="17"/></expr_stmt>
    <comment type="block" pos:line="8" pos:column="5">/* Kick a write off if the head buffer is -full- */</comment>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name><name pos:line="9" pos:column="9">ll<pos:position pos:line="9" pos:column="11"/></name><operator pos:line="9" pos:column="11">-&gt;<pos:position pos:line="9" pos:column="16"/></operator><name pos:line="9" pos:column="13">bufs<pos:position pos:line="9" pos:column="17"/></name><operator pos:line="9" pos:column="17">.<pos:position pos:line="9" pos:column="18"/></operator><name pos:line="9" pos:column="18">head<pos:position pos:line="9" pos:column="22"/></name></name> <operator pos:line="9" pos:column="23">!=<pos:position pos:line="9" pos:column="25"/></operator> <name pos:line="9" pos:column="26">NULL<pos:position pos:line="9" pos:column="30"/></name></expr>)<pos:position pos:line="9" pos:column="31"/></condition><then pos:line="9" pos:column="31"> <block pos:line="9" pos:column="32">{
        <expr_stmt><expr><name pos:line="10" pos:column="9">b<pos:position pos:line="10" pos:column="10"/></name> <operator pos:line="10" pos:column="11">=<pos:position pos:line="10" pos:column="12"/></operator> <cast type="static" pos:line="10" pos:column="13">static_cast<argument_list type="generic" pos:line="10" pos:column="24">&lt;<argument><expr><name pos:line="10" pos:column="25">logfile_buffer_t<pos:position pos:line="10" pos:column="41"/></name><operator pos:line="10" pos:column="41">*<pos:position pos:line="10" pos:column="42"/></operator></expr></argument>&gt;<pos:position pos:line="10" pos:column="46"/></argument_list><argument_list pos:line="10" pos:column="43">(<argument><expr><name><name pos:line="10" pos:column="44">ll<pos:position pos:line="10" pos:column="46"/></name><operator pos:line="10" pos:column="46">-&gt;<pos:position pos:line="10" pos:column="51"/></operator><name pos:line="10" pos:column="48">bufs<pos:position pos:line="10" pos:column="52"/></name><operator pos:line="10" pos:column="52">.<pos:position pos:line="10" pos:column="53"/></operator><name pos:line="10" pos:column="53">head<pos:position pos:line="10" pos:column="57"/></name><operator pos:line="10" pos:column="57">-&gt;<pos:position pos:line="10" pos:column="62"/></operator><name pos:line="10" pos:column="59">data<pos:position pos:line="10" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="64"/></argument_list></cast></expr>;<pos:position pos:line="10" pos:column="65"/></expr_stmt>
        <if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name><name pos:line="11" pos:column="13">b<pos:position pos:line="11" pos:column="14"/></name><operator pos:line="11" pos:column="14">-&gt;<pos:position pos:line="11" pos:column="19"/></operator><name pos:line="11" pos:column="16">node<pos:position pos:line="11" pos:column="20"/></name><operator pos:line="11" pos:column="20">.<pos:position pos:line="11" pos:column="21"/></operator><name pos:line="11" pos:column="21">next<pos:position pos:line="11" pos:column="25"/></name></name> <operator pos:line="11" pos:column="26">!=<pos:position pos:line="11" pos:column="28"/></operator> <name pos:line="11" pos:column="29">NULL<pos:position pos:line="11" pos:column="33"/></name> <operator pos:line="11" pos:column="34">||<pos:position pos:line="11" pos:column="36"/></operator> <operator pos:line="11" pos:column="37">!<pos:position pos:line="11" pos:column="38"/></operator><name><name pos:line="11" pos:column="38">Config<pos:position pos:line="11" pos:column="44"/></name><operator pos:line="11" pos:column="44">.<pos:position pos:line="11" pos:column="45"/></operator><name pos:line="11" pos:column="45">onoff<pos:position pos:line="11" pos:column="50"/></name><operator pos:line="11" pos:column="50">.<pos:position pos:line="11" pos:column="51"/></operator><name pos:line="11" pos:column="51">buffered_logs<pos:position pos:line="11" pos:column="64"/></name></name></expr>)<pos:position pos:line="11" pos:column="65"/></condition><then pos:line="11" pos:column="65">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="13">logfileQueueWrite<pos:position pos:line="12" pos:column="30"/></name><argument_list pos:line="12" pos:column="30">(<argument><expr><name pos:line="12" pos:column="31">lf<pos:position pos:line="12" pos:column="33"/></name></expr></argument>)<pos:position pos:line="12" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="35"/></expr_stmt></block></then></if>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
