<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1998_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HttpStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">processReplyHeader<pos:position pos:line="2" pos:column="34"/></name></name><parameter_list pos:line="2" pos:column="34">()<pos:position pos:line="2" pos:column="36"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" format="doxygen" pos:line="4" pos:column="5">/** Creates a blank header. If this routine is made incremental, this will not do */</comment>

    <comment type="block" pos:line="6" pos:column="5">/* NP: all exit points to this function MUST call ctx_exit(ctx) */</comment>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">Ctx<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">ctx<pos:position pos:line="7" pos:column="12"/></name> <init pos:line="7" pos:column="13">= <expr><call><name pos:line="7" pos:column="15">ctx_enter<pos:position pos:line="7" pos:column="24"/></name><argument_list pos:line="7" pos:column="24">(<argument><expr><name><name pos:line="7" pos:column="25">entry<pos:position pos:line="7" pos:column="30"/></name><operator pos:line="7" pos:column="30">-&gt;<pos:position pos:line="7" pos:column="35"/></operator><name pos:line="7" pos:column="32">mem_obj<pos:position pos:line="7" pos:column="39"/></name><operator pos:line="7" pos:column="39">-&gt;<pos:position pos:line="7" pos:column="44"/></operator><name pos:line="7" pos:column="41">url<pos:position pos:line="7" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="46"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="9" pos:column="5">debugs<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><literal type="number" pos:line="9" pos:column="12">11<pos:position pos:line="9" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="16">3<pos:position pos:line="9" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="19">"processReplyHeader: key '"<pos:position pos:line="9" pos:column="46"/></literal> <operator pos:line="9" pos:column="47">&lt;&lt;<pos:position pos:line="9" pos:column="55"/></operator> <call><name><name pos:line="9" pos:column="50">entry<pos:position pos:line="9" pos:column="55"/></name><operator pos:line="9" pos:column="55">-&gt;<pos:position pos:line="9" pos:column="60"/></operator><name pos:line="9" pos:column="57">getMD5Text<pos:position pos:line="9" pos:column="67"/></name></name><argument_list pos:line="9" pos:column="67">()<pos:position pos:line="9" pos:column="69"/></argument_list></call> <operator pos:line="9" pos:column="70">&lt;&lt;<pos:position pos:line="9" pos:column="78"/></operator> <literal type="string" pos:line="9" pos:column="73">"'"<pos:position pos:line="9" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="78"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="11" pos:column="5">assert<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><operator pos:line="11" pos:column="12">!<pos:position pos:line="11" pos:column="13"/></operator><name><name pos:line="11" pos:column="13">flags<pos:position pos:line="11" pos:column="18"/></name><operator pos:line="11" pos:column="18">.<pos:position pos:line="11" pos:column="19"/></operator><name pos:line="11" pos:column="19">headers_parsed<pos:position pos:line="11" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="35"/></expr_stmt>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><operator pos:line="13" pos:column="9">!<pos:position pos:line="13" pos:column="10"/></operator><call><name><name pos:line="13" pos:column="10">readBuf<pos:position pos:line="13" pos:column="17"/></name><operator pos:line="13" pos:column="17">-&gt;<pos:position pos:line="13" pos:column="22"/></operator><name pos:line="13" pos:column="19">hasContent<pos:position pos:line="13" pos:column="29"/></name></name><argument_list pos:line="13" pos:column="29">()<pos:position pos:line="13" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="32"/></condition><then pos:line="13" pos:column="32"> <block pos:line="13" pos:column="33">{
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">ctx_exit<pos:position pos:line="14" pos:column="17"/></name><argument_list pos:line="14" pos:column="17">(<argument><expr><name pos:line="14" pos:column="18">ctx<pos:position pos:line="14" pos:column="21"/></name></expr></argument>)<pos:position pos:line="14" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="23"/></expr_stmt>
        <return pos:line="15" pos:column="9">return;<pos:position pos:line="15" pos:column="16"/></return>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="18" pos:column="5">http_status<pos:position pos:line="18" pos:column="16"/></name></type> <name pos:line="18" pos:column="17">error<pos:position pos:line="18" pos:column="22"/></name> <init pos:line="18" pos:column="23">= <expr><name pos:line="18" pos:column="25">HTTP_STATUS_NONE<pos:position pos:line="18" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="18" pos:column="42"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="20" pos:column="5">HttpReply<pos:position pos:line="20" pos:column="14"/></name> <modifier pos:line="20" pos:column="15">*<pos:position pos:line="20" pos:column="16"/></modifier></type><name pos:line="20" pos:column="16">newrep<pos:position pos:line="20" pos:column="22"/></name> <init pos:line="20" pos:column="23">= <expr><operator pos:line="20" pos:column="25">new<pos:position pos:line="20" pos:column="28"/></operator> <name pos:line="20" pos:column="29">HttpReply<pos:position pos:line="20" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="20" pos:column="39"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="21" pos:column="5">const<pos:position pos:line="21" pos:column="10"/></specifier> <name pos:line="21" pos:column="11">bool<pos:position pos:line="21" pos:column="15"/></name></type> <name pos:line="21" pos:column="16">parsed<pos:position pos:line="21" pos:column="22"/></name> <init pos:line="21" pos:column="23">= <expr><call><name><name pos:line="21" pos:column="25">newrep<pos:position pos:line="21" pos:column="31"/></name><operator pos:line="21" pos:column="31">-&gt;<pos:position pos:line="21" pos:column="36"/></operator><name pos:line="21" pos:column="33">parse<pos:position pos:line="21" pos:column="38"/></name></name><argument_list pos:line="21" pos:column="38">(<argument><expr><name pos:line="21" pos:column="39">readBuf<pos:position pos:line="21" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="48">eof<pos:position pos:line="21" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="53">&amp;<pos:position pos:line="21" pos:column="58"/></operator><name pos:line="21" pos:column="54">error<pos:position pos:line="21" pos:column="59"/></name></expr></argument>)<pos:position pos:line="21" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="21" pos:column="61"/></decl_stmt>

    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><operator pos:line="23" pos:column="9">!<pos:position pos:line="23" pos:column="10"/></operator><name pos:line="23" pos:column="10">parsed<pos:position pos:line="23" pos:column="16"/></name> <operator pos:line="23" pos:column="17">&amp;&amp;<pos:position pos:line="23" pos:column="27"/></operator> <call><name><name pos:line="23" pos:column="20">readBuf<pos:position pos:line="23" pos:column="27"/></name><operator pos:line="23" pos:column="27">-&gt;<pos:position pos:line="23" pos:column="32"/></operator><name pos:line="23" pos:column="29">contentSize<pos:position pos:line="23" pos:column="40"/></name></name><argument_list pos:line="23" pos:column="40">()<pos:position pos:line="23" pos:column="42"/></argument_list></call> <operator pos:line="23" pos:column="43">&gt;<pos:position pos:line="23" pos:column="47"/></operator> <literal type="number" pos:line="23" pos:column="45">5<pos:position pos:line="23" pos:column="46"/></literal> <operator pos:line="23" pos:column="47">&amp;&amp;<pos:position pos:line="23" pos:column="57"/></operator> <call><name pos:line="23" pos:column="50">strncmp<pos:position pos:line="23" pos:column="57"/></name><argument_list pos:line="23" pos:column="57">(<argument><expr><call><name><name pos:line="23" pos:column="58">readBuf<pos:position pos:line="23" pos:column="65"/></name><operator pos:line="23" pos:column="65">-&gt;<pos:position pos:line="23" pos:column="70"/></operator><name pos:line="23" pos:column="67">content<pos:position pos:line="23" pos:column="74"/></name></name><argument_list pos:line="23" pos:column="74">()<pos:position pos:line="23" pos:column="76"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="78">"HTTP/"<pos:position pos:line="23" pos:column="85"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="87">5<pos:position pos:line="23" pos:column="88"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="89"/></argument_list></call> <operator pos:line="23" pos:column="90">!=<pos:position pos:line="23" pos:column="92"/></operator> <literal type="number" pos:line="23" pos:column="93">0<pos:position pos:line="23" pos:column="94"/></literal> <operator pos:line="23" pos:column="95">&amp;&amp;<pos:position pos:line="23" pos:column="105"/></operator> <call><name pos:line="23" pos:column="98">strncmp<pos:position pos:line="23" pos:column="105"/></name><argument_list pos:line="23" pos:column="105">(<argument><expr><call><name><name pos:line="23" pos:column="106">readBuf<pos:position pos:line="23" pos:column="113"/></name><operator pos:line="23" pos:column="113">-&gt;<pos:position pos:line="23" pos:column="118"/></operator><name pos:line="23" pos:column="115">content<pos:position pos:line="23" pos:column="122"/></name></name><argument_list pos:line="23" pos:column="122">()<pos:position pos:line="23" pos:column="124"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="126">"ICY"<pos:position pos:line="23" pos:column="131"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="133">3<pos:position pos:line="23" pos:column="134"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="135"/></argument_list></call> <operator pos:line="23" pos:column="136">!=<pos:position pos:line="23" pos:column="138"/></operator> <literal type="number" pos:line="23" pos:column="139">0<pos:position pos:line="23" pos:column="140"/></literal></expr>)<pos:position pos:line="23" pos:column="141"/></condition><then pos:line="23" pos:column="141"> <block pos:line="23" pos:column="142">{
        <decl_stmt><decl><type><name pos:line="24" pos:column="9">MemBuf<pos:position pos:line="24" pos:column="15"/></name> <modifier pos:line="24" pos:column="16">*<pos:position pos:line="24" pos:column="17"/></modifier></type><name pos:line="24" pos:column="17">mb<pos:position pos:line="24" pos:column="19"/></name></decl>;<pos:position pos:line="24" pos:column="20"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="25" pos:column="9">HttpReply<pos:position pos:line="25" pos:column="18"/></name> <modifier pos:line="25" pos:column="19">*<pos:position pos:line="25" pos:column="20"/></modifier></type><name pos:line="25" pos:column="20">tmprep<pos:position pos:line="25" pos:column="26"/></name> <init pos:line="25" pos:column="27">= <expr><operator pos:line="25" pos:column="29">new<pos:position pos:line="25" pos:column="32"/></operator> <name pos:line="25" pos:column="33">HttpReply<pos:position pos:line="25" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="25" pos:column="43"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="26" pos:column="9">tmprep<pos:position pos:line="26" pos:column="15"/></name><operator pos:line="26" pos:column="15">-&gt;<pos:position pos:line="26" pos:column="20"/></operator><name pos:line="26" pos:column="17">setHeaders<pos:position pos:line="26" pos:column="27"/></name></name><argument_list pos:line="26" pos:column="27">(<argument><expr><name pos:line="26" pos:column="28">HTTP_OK<pos:position pos:line="26" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="37">"Gatewaying"<pos:position pos:line="26" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="51">NULL<pos:position pos:line="26" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="57">-<pos:position pos:line="26" pos:column="58"/></operator><literal type="number" pos:line="26" pos:column="58">1<pos:position pos:line="26" pos:column="59"/></literal></expr></argument>, <argument><expr><operator pos:line="26" pos:column="61">-<pos:position pos:line="26" pos:column="62"/></operator><literal type="number" pos:line="26" pos:column="62">1<pos:position pos:line="26" pos:column="63"/></literal></expr></argument>, <argument><expr><operator pos:line="26" pos:column="65">-<pos:position pos:line="26" pos:column="66"/></operator><literal type="number" pos:line="26" pos:column="66">1<pos:position pos:line="26" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="69"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="27" pos:column="9">tmprep<pos:position pos:line="27" pos:column="15"/></name><operator pos:line="27" pos:column="15">-&gt;<pos:position pos:line="27" pos:column="20"/></operator><name pos:line="27" pos:column="17">header<pos:position pos:line="27" pos:column="23"/></name><operator pos:line="27" pos:column="23">.<pos:position pos:line="27" pos:column="24"/></operator><name pos:line="27" pos:column="24">putExt<pos:position pos:line="27" pos:column="30"/></name></name><argument_list pos:line="27" pos:column="30">(<argument><expr><literal type="string" pos:line="27" pos:column="31">"X-Transformed-From"<pos:position pos:line="27" pos:column="51"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="53">"HTTP/0.9"<pos:position pos:line="27" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="65"/></expr_stmt>
        <expr_stmt><expr><name pos:line="28" pos:column="9">mb<pos:position pos:line="28" pos:column="11"/></name> <operator pos:line="28" pos:column="12">=<pos:position pos:line="28" pos:column="13"/></operator> <call><name><name pos:line="28" pos:column="14">tmprep<pos:position pos:line="28" pos:column="20"/></name><operator pos:line="28" pos:column="20">-&gt;<pos:position pos:line="28" pos:column="25"/></operator><name pos:line="28" pos:column="22">pack<pos:position pos:line="28" pos:column="26"/></name></name><argument_list pos:line="28" pos:column="26">()<pos:position pos:line="28" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="29" pos:column="9">newrep<pos:position pos:line="29" pos:column="15"/></name><operator pos:line="29" pos:column="15">-&gt;<pos:position pos:line="29" pos:column="20"/></operator><name pos:line="29" pos:column="17">parse<pos:position pos:line="29" pos:column="22"/></name></name><argument_list pos:line="29" pos:column="22">(<argument><expr><name pos:line="29" pos:column="23">mb<pos:position pos:line="29" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="27">eof<pos:position pos:line="29" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="32">&amp;<pos:position pos:line="29" pos:column="37"/></operator><name pos:line="29" pos:column="33">error<pos:position pos:line="29" pos:column="38"/></name></expr></argument>)<pos:position pos:line="29" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="30" pos:column="9">delete<pos:position pos:line="30" pos:column="15"/></operator> <name pos:line="30" pos:column="16">mb<pos:position pos:line="30" pos:column="18"/></name></expr>;<pos:position pos:line="30" pos:column="19"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="31" pos:column="9">delete<pos:position pos:line="31" pos:column="15"/></operator> <name pos:line="31" pos:column="16">tmprep<pos:position pos:line="31" pos:column="22"/></name></expr>;<pos:position pos:line="31" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="32" pos:column="6"/></block></then> <else pos:line="32" pos:column="7">else <block pos:line="32" pos:column="12">{
        <if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><operator pos:line="33" pos:column="13">!<pos:position pos:line="33" pos:column="14"/></operator><name pos:line="33" pos:column="14">parsed<pos:position pos:line="33" pos:column="20"/></name> <operator pos:line="33" pos:column="21">&amp;&amp;<pos:position pos:line="33" pos:column="31"/></operator> <name pos:line="33" pos:column="24">error<pos:position pos:line="33" pos:column="29"/></name> <operator pos:line="33" pos:column="30">&gt;<pos:position pos:line="33" pos:column="34"/></operator> <literal type="number" pos:line="33" pos:column="32">0<pos:position pos:line="33" pos:column="33"/></literal></expr>)<pos:position pos:line="33" pos:column="34"/></condition><then pos:line="33" pos:column="34"> <block pos:line="33" pos:column="35">{ <comment type="line" pos:line="33" pos:column="37">// unrecoverable parsing error</comment>
            <expr_stmt><expr><call><name pos:line="34" pos:column="13">debugs<pos:position pos:line="34" pos:column="19"/></name><argument_list pos:line="34" pos:column="19">(<argument><expr><literal type="number" pos:line="34" pos:column="20">11<pos:position pos:line="34" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="24">3<pos:position pos:line="34" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="27">"processReplyHeader: Non-HTTP-compliant header: '"<pos:position pos:line="34" pos:column="77"/></literal> <operator pos:line="34" pos:column="78">&lt;&lt;<pos:position pos:line="34" pos:column="86"/></operator>  <call><name><name pos:line="34" pos:column="82">readBuf<pos:position pos:line="34" pos:column="89"/></name><operator pos:line="34" pos:column="89">-&gt;<pos:position pos:line="34" pos:column="94"/></operator><name pos:line="34" pos:column="91">content<pos:position pos:line="34" pos:column="98"/></name></name><argument_list pos:line="34" pos:column="98">()<pos:position pos:line="34" pos:column="100"/></argument_list></call> <operator pos:line="34" pos:column="101">&lt;&lt;<pos:position pos:line="34" pos:column="109"/></operator> <literal type="string" pos:line="34" pos:column="104">"'"<pos:position pos:line="34" pos:column="107"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="108"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="109"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="35" pos:column="13">flags<pos:position pos:line="35" pos:column="18"/></name><operator pos:line="35" pos:column="18">.<pos:position pos:line="35" pos:column="19"/></operator><name pos:line="35" pos:column="19">headers_parsed<pos:position pos:line="35" pos:column="33"/></name></name> <operator pos:line="35" pos:column="34">=<pos:position pos:line="35" pos:column="35"/></operator> <literal type="number" pos:line="35" pos:column="36">1<pos:position pos:line="35" pos:column="37"/></literal></expr>;<pos:position pos:line="35" pos:column="38"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="36" pos:column="13">newrep<pos:position pos:line="36" pos:column="19"/></name><operator pos:line="36" pos:column="19">-&gt;<pos:position pos:line="36" pos:column="24"/></operator><name pos:line="36" pos:column="21">sline<pos:position pos:line="36" pos:column="26"/></name><operator pos:line="36" pos:column="26">.<pos:position pos:line="36" pos:column="27"/></operator><name pos:line="36" pos:column="27">version<pos:position pos:line="36" pos:column="34"/></name></name> <operator pos:line="36" pos:column="35">=<pos:position pos:line="36" pos:column="36"/></operator> <call><name pos:line="36" pos:column="37">HttpVersion<pos:position pos:line="36" pos:column="48"/></name><argument_list pos:line="36" pos:column="48">(<argument><expr><literal type="number" pos:line="36" pos:column="49">1<pos:position pos:line="36" pos:column="50"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="36" pos:column="51">0<pos:position pos:line="36" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="54"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="37" pos:column="13">newrep<pos:position pos:line="37" pos:column="19"/></name><operator pos:line="37" pos:column="19">-&gt;<pos:position pos:line="37" pos:column="24"/></operator><name pos:line="37" pos:column="21">sline<pos:position pos:line="37" pos:column="26"/></name><operator pos:line="37" pos:column="26">.<pos:position pos:line="37" pos:column="27"/></operator><name pos:line="37" pos:column="27">status<pos:position pos:line="37" pos:column="33"/></name></name> <operator pos:line="37" pos:column="34">=<pos:position pos:line="37" pos:column="35"/></operator> <name pos:line="37" pos:column="36">error<pos:position pos:line="37" pos:column="41"/></name></expr>;<pos:position pos:line="37" pos:column="42"/></expr_stmt>
            <decl_stmt><decl><type><name pos:line="38" pos:column="13">HttpReply<pos:position pos:line="38" pos:column="22"/></name> <modifier pos:line="38" pos:column="23">*<pos:position pos:line="38" pos:column="24"/></modifier></type><name pos:line="38" pos:column="24">vrep<pos:position pos:line="38" pos:column="28"/></name> <init pos:line="38" pos:column="29">= <expr><call><name pos:line="38" pos:column="31">setVirginReply<pos:position pos:line="38" pos:column="45"/></name><argument_list pos:line="38" pos:column="45">(<argument><expr><name pos:line="38" pos:column="46">newrep<pos:position pos:line="38" pos:column="52"/></name></expr></argument>)<pos:position pos:line="38" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="38" pos:column="54"/></decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="39" pos:column="13">entry<pos:position pos:line="39" pos:column="18"/></name><operator pos:line="39" pos:column="18">-&gt;<pos:position pos:line="39" pos:column="23"/></operator><name pos:line="39" pos:column="20">replaceHttpReply<pos:position pos:line="39" pos:column="36"/></name></name><argument_list pos:line="39" pos:column="36">(<argument><expr><name pos:line="39" pos:column="37">vrep<pos:position pos:line="39" pos:column="41"/></name></expr></argument>)<pos:position pos:line="39" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="43"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="40" pos:column="13">ctx_exit<pos:position pos:line="40" pos:column="21"/></name><argument_list pos:line="40" pos:column="21">(<argument><expr><name pos:line="40" pos:column="22">ctx<pos:position pos:line="40" pos:column="25"/></name></expr></argument>)<pos:position pos:line="40" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="27"/></expr_stmt>
            <return pos:line="41" pos:column="13">return;<pos:position pos:line="41" pos:column="20"/></return>
        }<pos:position pos:line="42" pos:column="10"/></block></then></if>

        <if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><operator pos:line="44" pos:column="13">!<pos:position pos:line="44" pos:column="14"/></operator><name pos:line="44" pos:column="14">parsed<pos:position pos:line="44" pos:column="20"/></name></expr>)<pos:position pos:line="44" pos:column="21"/></condition><then pos:line="44" pos:column="21"> <block pos:line="44" pos:column="22">{ <comment type="line" pos:line="44" pos:column="24">// need more data</comment>
            <expr_stmt><expr><call><name pos:line="45" pos:column="13">assert<pos:position pos:line="45" pos:column="19"/></name><argument_list pos:line="45" pos:column="19">(<argument><expr><operator pos:line="45" pos:column="20">!<pos:position pos:line="45" pos:column="21"/></operator><name pos:line="45" pos:column="21">error<pos:position pos:line="45" pos:column="26"/></name></expr></argument>)<pos:position pos:line="45" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="28"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="46" pos:column="13">assert<pos:position pos:line="46" pos:column="19"/></name><argument_list pos:line="46" pos:column="19">(<argument><expr><operator pos:line="46" pos:column="20">!<pos:position pos:line="46" pos:column="21"/></operator><name pos:line="46" pos:column="21">eof<pos:position pos:line="46" pos:column="24"/></name></expr></argument>)<pos:position pos:line="46" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="26"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="47" pos:column="13">delete<pos:position pos:line="47" pos:column="19"/></operator> <name pos:line="47" pos:column="20">newrep<pos:position pos:line="47" pos:column="26"/></name></expr>;<pos:position pos:line="47" pos:column="27"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="48" pos:column="13">ctx_exit<pos:position pos:line="48" pos:column="21"/></name><argument_list pos:line="48" pos:column="21">(<argument><expr><name pos:line="48" pos:column="22">ctx<pos:position pos:line="48" pos:column="25"/></name></expr></argument>)<pos:position pos:line="48" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="27"/></expr_stmt>
            <return pos:line="49" pos:column="13">return;<pos:position pos:line="49" pos:column="20"/></return>
        }<pos:position pos:line="50" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="52" pos:column="9">debugs<pos:position pos:line="52" pos:column="15"/></name><argument_list pos:line="52" pos:column="15">(<argument><expr><literal type="number" pos:line="52" pos:column="16">11<pos:position pos:line="52" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="52" pos:column="20">9<pos:position pos:line="52" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="23">"GOT HTTP REPLY HDR:\n---------\n"<pos:position pos:line="52" pos:column="57"/></literal> <operator pos:line="52" pos:column="58">&lt;&lt;<pos:position pos:line="52" pos:column="66"/></operator> <call><name><name pos:line="52" pos:column="61">readBuf<pos:position pos:line="52" pos:column="68"/></name><operator pos:line="52" pos:column="68">-&gt;<pos:position pos:line="52" pos:column="73"/></operator><name pos:line="52" pos:column="70">content<pos:position pos:line="52" pos:column="77"/></name></name><argument_list pos:line="52" pos:column="77">()<pos:position pos:line="52" pos:column="79"/></argument_list></call> <operator pos:line="52" pos:column="80">&lt;&lt;<pos:position pos:line="52" pos:column="88"/></operator> <literal type="string" pos:line="52" pos:column="83">"\n----------"<pos:position pos:line="52" pos:column="97"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="98"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="99"/></expr_stmt>

        <expr_stmt><expr><name pos:line="54" pos:column="9">header_bytes_read<pos:position pos:line="54" pos:column="26"/></name> <operator pos:line="54" pos:column="27">=<pos:position pos:line="54" pos:column="28"/></operator> <call><name pos:line="54" pos:column="29">headersEnd<pos:position pos:line="54" pos:column="39"/></name><argument_list pos:line="54" pos:column="39">(<argument><expr><call><name><name pos:line="54" pos:column="40">readBuf<pos:position pos:line="54" pos:column="47"/></name><operator pos:line="54" pos:column="47">-&gt;<pos:position pos:line="54" pos:column="52"/></operator><name pos:line="54" pos:column="49">content<pos:position pos:line="54" pos:column="56"/></name></name><argument_list pos:line="54" pos:column="56">()<pos:position pos:line="54" pos:column="58"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="54" pos:column="60">readBuf<pos:position pos:line="54" pos:column="67"/></name><operator pos:line="54" pos:column="67">-&gt;<pos:position pos:line="54" pos:column="72"/></operator><name pos:line="54" pos:column="69">contentSize<pos:position pos:line="54" pos:column="80"/></name></name><argument_list pos:line="54" pos:column="80">()<pos:position pos:line="54" pos:column="82"/></argument_list></call></expr></argument>)<pos:position pos:line="54" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="84"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="55" pos:column="9">readBuf<pos:position pos:line="55" pos:column="16"/></name><operator pos:line="55" pos:column="16">-&gt;<pos:position pos:line="55" pos:column="21"/></operator><name pos:line="55" pos:column="18">consume<pos:position pos:line="55" pos:column="25"/></name></name><argument_list pos:line="55" pos:column="25">(<argument><expr><name pos:line="55" pos:column="26">header_bytes_read<pos:position pos:line="55" pos:column="43"/></name></expr></argument>)<pos:position pos:line="55" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="56" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name><name pos:line="58" pos:column="5">newrep<pos:position pos:line="58" pos:column="11"/></name><operator pos:line="58" pos:column="11">-&gt;<pos:position pos:line="58" pos:column="16"/></operator><name pos:line="58" pos:column="13">removeStaleWarnings<pos:position pos:line="58" pos:column="32"/></name></name><argument_list pos:line="58" pos:column="32">()<pos:position pos:line="58" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="35"/></expr_stmt>

    <comment type="block" pos:line="60" pos:column="5">/* Skip 1xx messages for now. Advertised in Via as an internal 1.0 hop */</comment>
    <if pos:line="61" pos:column="5">if <condition pos:line="61" pos:column="8">(<expr><name><name pos:line="61" pos:column="9">newrep<pos:position pos:line="61" pos:column="15"/></name><operator pos:line="61" pos:column="15">-&gt;<pos:position pos:line="61" pos:column="20"/></operator><name pos:line="61" pos:column="17">sline<pos:position pos:line="61" pos:column="22"/></name><operator pos:line="61" pos:column="22">.<pos:position pos:line="61" pos:column="23"/></operator><name pos:line="61" pos:column="23">protocol<pos:position pos:line="61" pos:column="31"/></name></name> <operator pos:line="61" pos:column="32">==<pos:position pos:line="61" pos:column="34"/></operator> <name pos:line="61" pos:column="35">PROTO_HTTP<pos:position pos:line="61" pos:column="45"/></name> <operator pos:line="61" pos:column="46">&amp;&amp;<pos:position pos:line="61" pos:column="56"/></operator> <name><name pos:line="61" pos:column="49">newrep<pos:position pos:line="61" pos:column="55"/></name><operator pos:line="61" pos:column="55">-&gt;<pos:position pos:line="61" pos:column="60"/></operator><name pos:line="61" pos:column="57">sline<pos:position pos:line="61" pos:column="62"/></name><operator pos:line="61" pos:column="62">.<pos:position pos:line="61" pos:column="63"/></operator><name pos:line="61" pos:column="63">status<pos:position pos:line="61" pos:column="69"/></name></name> <operator pos:line="61" pos:column="70">&gt;=<pos:position pos:line="61" pos:column="75"/></operator> <literal type="number" pos:line="61" pos:column="73">100<pos:position pos:line="61" pos:column="76"/></literal> <operator pos:line="61" pos:column="77">&amp;&amp;<pos:position pos:line="61" pos:column="87"/></operator> <name><name pos:line="61" pos:column="80">newrep<pos:position pos:line="61" pos:column="86"/></name><operator pos:line="61" pos:column="86">-&gt;<pos:position pos:line="61" pos:column="91"/></operator><name pos:line="61" pos:column="88">sline<pos:position pos:line="61" pos:column="93"/></name><operator pos:line="61" pos:column="93">.<pos:position pos:line="61" pos:column="94"/></operator><name pos:line="61" pos:column="94">status<pos:position pos:line="61" pos:column="100"/></name></name> <operator pos:line="61" pos:column="101">&lt;<pos:position pos:line="61" pos:column="105"/></operator> <literal type="number" pos:line="61" pos:column="103">200<pos:position pos:line="61" pos:column="106"/></literal></expr>)<pos:position pos:line="61" pos:column="107"/></condition><then pos:line="61" pos:column="107"> <block pos:line="61" pos:column="108">{

<cpp:if pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">if<pos:position pos:line="63" pos:column="4"/></cpp:directive> <expr><name pos:line="63" pos:column="5">WHEN_HTTP11<pos:position pos:line="63" pos:column="16"/></name></expr></cpp:if>
        <comment type="block" pos:line="64" pos:column="9">/* When HTTP/1.1 check if the client is expecting a 1xx reply and maybe pass it on */</comment>
        <if pos:line="65" pos:column="9">if <condition pos:line="65" pos:column="12">(<expr><call><name><name pos:line="65" pos:column="13">orig_request<pos:position pos:line="65" pos:column="25"/></name><operator pos:line="65" pos:column="25">-&gt;<pos:position pos:line="65" pos:column="30"/></operator><name pos:line="65" pos:column="27">header<pos:position pos:line="65" pos:column="33"/></name><operator pos:line="65" pos:column="33">.<pos:position pos:line="65" pos:column="34"/></operator><name pos:line="65" pos:column="34">has<pos:position pos:line="65" pos:column="37"/></name></name><argument_list pos:line="65" pos:column="37">(<argument><expr><name pos:line="65" pos:column="38">HDR_EXPECT<pos:position pos:line="65" pos:column="48"/></name></expr></argument>)<pos:position pos:line="65" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="65" pos:column="50"/></condition><then pos:line="65" pos:column="50"> <block pos:line="65" pos:column="51">{
            <comment type="line" pos:line="66" pos:column="13">// TODO: pass to the client anyway?</comment>
        }<pos:position pos:line="67" pos:column="10"/></block></then></if>
<cpp:endif pos:line="68" pos:column="1">#<cpp:directive pos:line="68" pos:column="2">endif<pos:position pos:line="68" pos:column="7"/></cpp:directive></cpp:endif>
        <expr_stmt><expr><operator pos:line="69" pos:column="9">delete<pos:position pos:line="69" pos:column="15"/></operator> <name pos:line="69" pos:column="16">newrep<pos:position pos:line="69" pos:column="22"/></name></expr>;<pos:position pos:line="69" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="70" pos:column="9">debugs<pos:position pos:line="70" pos:column="15"/></name><argument_list pos:line="70" pos:column="15">(<argument><expr><literal type="number" pos:line="70" pos:column="16">11<pos:position pos:line="70" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="70" pos:column="20">2<pos:position pos:line="70" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="70" pos:column="23">HERE<pos:position pos:line="70" pos:column="27"/></name> <operator pos:line="70" pos:column="28">&lt;&lt;<pos:position pos:line="70" pos:column="36"/></operator> <literal type="string" pos:line="70" pos:column="31">"1xx headers consume "<pos:position pos:line="70" pos:column="53"/></literal> <operator pos:line="70" pos:column="54">&lt;&lt;<pos:position pos:line="70" pos:column="62"/></operator> <name pos:line="70" pos:column="57">header_bytes_read<pos:position pos:line="70" pos:column="74"/></name> <operator pos:line="70" pos:column="75">&lt;&lt;<pos:position pos:line="70" pos:column="83"/></operator> <literal type="string" pos:line="70" pos:column="78">" bytes header."<pos:position pos:line="70" pos:column="94"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="95"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="96"/></expr_stmt>
        <expr_stmt><expr><name pos:line="71" pos:column="9">header_bytes_read<pos:position pos:line="71" pos:column="26"/></name> <operator pos:line="71" pos:column="27">=<pos:position pos:line="71" pos:column="28"/></operator> <literal type="number" pos:line="71" pos:column="29">0<pos:position pos:line="71" pos:column="30"/></literal></expr>;<pos:position pos:line="71" pos:column="31"/></expr_stmt>
        <if pos:line="72" pos:column="9">if <condition pos:line="72" pos:column="12">(<expr><name pos:line="72" pos:column="13">reply_bytes_read<pos:position pos:line="72" pos:column="29"/></name> <operator pos:line="72" pos:column="30">&gt;<pos:position pos:line="72" pos:column="34"/></operator> <literal type="number" pos:line="72" pos:column="32">0<pos:position pos:line="72" pos:column="33"/></literal></expr>)<pos:position pos:line="72" pos:column="34"/></condition><then pos:line="72" pos:column="34">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="73" pos:column="13">debugs<pos:position pos:line="73" pos:column="19"/></name><argument_list pos:line="73" pos:column="19">(<argument><expr><literal type="number" pos:line="73" pos:column="20">11<pos:position pos:line="73" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="73" pos:column="24">2<pos:position pos:line="73" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="73" pos:column="27">HERE<pos:position pos:line="73" pos:column="31"/></name> <operator pos:line="73" pos:column="32">&lt;&lt;<pos:position pos:line="73" pos:column="40"/></operator> <literal type="string" pos:line="73" pos:column="35">"1xx headers consume "<pos:position pos:line="73" pos:column="57"/></literal> <operator pos:line="73" pos:column="58">&lt;&lt;<pos:position pos:line="73" pos:column="66"/></operator> <name pos:line="73" pos:column="61">reply_bytes_read<pos:position pos:line="73" pos:column="77"/></name> <operator pos:line="73" pos:column="78">&lt;&lt;<pos:position pos:line="73" pos:column="86"/></operator> <literal type="string" pos:line="73" pos:column="81">" bytes reply."<pos:position pos:line="73" pos:column="96"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="98"/></expr_stmt></block></then></if>
        <expr_stmt><expr><name pos:line="74" pos:column="9">reply_bytes_read<pos:position pos:line="74" pos:column="25"/></name> <operator pos:line="74" pos:column="26">=<pos:position pos:line="74" pos:column="27"/></operator> <literal type="number" pos:line="74" pos:column="28">0<pos:position pos:line="74" pos:column="29"/></literal></expr>;<pos:position pos:line="74" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="75" pos:column="9">ctx_exit<pos:position pos:line="75" pos:column="17"/></name><argument_list pos:line="75" pos:column="17">(<argument><expr><name pos:line="75" pos:column="18">ctx<pos:position pos:line="75" pos:column="21"/></name></expr></argument>)<pos:position pos:line="75" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="76" pos:column="9">processReplyHeader<pos:position pos:line="76" pos:column="27"/></name><argument_list pos:line="76" pos:column="27">()<pos:position pos:line="76" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="30"/></expr_stmt>
        <return pos:line="77" pos:column="9">return;<pos:position pos:line="77" pos:column="16"/></return>
    }<pos:position pos:line="78" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="80" pos:column="5">flags<pos:position pos:line="80" pos:column="10"/></name><operator pos:line="80" pos:column="10">.<pos:position pos:line="80" pos:column="11"/></operator><name pos:line="80" pos:column="11">chunked<pos:position pos:line="80" pos:column="18"/></name></name> <operator pos:line="80" pos:column="19">=<pos:position pos:line="80" pos:column="20"/></operator> <literal type="number" pos:line="80" pos:column="21">0<pos:position pos:line="80" pos:column="22"/></literal></expr>;<pos:position pos:line="80" pos:column="23"/></expr_stmt>
    <if pos:line="81" pos:column="5">if <condition pos:line="81" pos:column="8">(<expr><name><name pos:line="81" pos:column="9">newrep<pos:position pos:line="81" pos:column="15"/></name><operator pos:line="81" pos:column="15">-&gt;<pos:position pos:line="81" pos:column="20"/></operator><name pos:line="81" pos:column="17">sline<pos:position pos:line="81" pos:column="22"/></name><operator pos:line="81" pos:column="22">.<pos:position pos:line="81" pos:column="23"/></operator><name pos:line="81" pos:column="23">protocol<pos:position pos:line="81" pos:column="31"/></name></name> <operator pos:line="81" pos:column="32">==<pos:position pos:line="81" pos:column="34"/></operator> <name pos:line="81" pos:column="35">PROTO_HTTP<pos:position pos:line="81" pos:column="45"/></name> <operator pos:line="81" pos:column="46">&amp;&amp;<pos:position pos:line="81" pos:column="56"/></operator> <call><name><name pos:line="81" pos:column="49">newrep<pos:position pos:line="81" pos:column="55"/></name><operator pos:line="81" pos:column="55">-&gt;<pos:position pos:line="81" pos:column="60"/></operator><name pos:line="81" pos:column="57">header<pos:position pos:line="81" pos:column="63"/></name><operator pos:line="81" pos:column="63">.<pos:position pos:line="81" pos:column="64"/></operator><name pos:line="81" pos:column="64">chunked<pos:position pos:line="81" pos:column="71"/></name></name><argument_list pos:line="81" pos:column="71">()<pos:position pos:line="81" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="81" pos:column="74"/></condition><then pos:line="81" pos:column="74"> <block pos:line="81" pos:column="75">{
        <expr_stmt><expr><name><name pos:line="82" pos:column="9">flags<pos:position pos:line="82" pos:column="14"/></name><operator pos:line="82" pos:column="14">.<pos:position pos:line="82" pos:column="15"/></operator><name pos:line="82" pos:column="15">chunked<pos:position pos:line="82" pos:column="22"/></name></name> <operator pos:line="82" pos:column="23">=<pos:position pos:line="82" pos:column="24"/></operator> <literal type="number" pos:line="82" pos:column="25">1<pos:position pos:line="82" pos:column="26"/></literal></expr>;<pos:position pos:line="82" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><name pos:line="83" pos:column="9">httpChunkDecoder<pos:position pos:line="83" pos:column="25"/></name> <operator pos:line="83" pos:column="26">=<pos:position pos:line="83" pos:column="27"/></operator> <operator pos:line="83" pos:column="28">new<pos:position pos:line="83" pos:column="31"/></operator> <name pos:line="83" pos:column="32">ChunkedCodingParser<pos:position pos:line="83" pos:column="51"/></name></expr>;<pos:position pos:line="83" pos:column="52"/></expr_stmt>
    }<pos:position pos:line="84" pos:column="6"/></block></then></if>

    <if pos:line="86" pos:column="5">if <condition pos:line="86" pos:column="8">(<expr><operator pos:line="86" pos:column="9">!<pos:position pos:line="86" pos:column="10"/></operator><call><name pos:line="86" pos:column="10">peerSupportsConnectionPinning<pos:position pos:line="86" pos:column="39"/></name><argument_list pos:line="86" pos:column="39">()<pos:position pos:line="86" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="86" pos:column="42"/></condition><then pos:line="86" pos:column="42">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="87" pos:column="9">orig_request<pos:position pos:line="87" pos:column="21"/></name><operator pos:line="87" pos:column="21">-&gt;<pos:position pos:line="87" pos:column="26"/></operator><name pos:line="87" pos:column="23">flags<pos:position pos:line="87" pos:column="28"/></name><operator pos:line="87" pos:column="28">.<pos:position pos:line="87" pos:column="29"/></operator><name pos:line="87" pos:column="29">connection_auth_disabled<pos:position pos:line="87" pos:column="53"/></name></name> <operator pos:line="87" pos:column="54">=<pos:position pos:line="87" pos:column="55"/></operator> <literal type="number" pos:line="87" pos:column="56">1<pos:position pos:line="87" pos:column="57"/></literal></expr>;<pos:position pos:line="87" pos:column="58"/></expr_stmt></block></then></if>

    <decl_stmt><decl><type><name pos:line="89" pos:column="5">HttpReply<pos:position pos:line="89" pos:column="14"/></name> <modifier pos:line="89" pos:column="15">*<pos:position pos:line="89" pos:column="16"/></modifier></type><name pos:line="89" pos:column="16">vrep<pos:position pos:line="89" pos:column="20"/></name> <init pos:line="89" pos:column="21">= <expr><call><name pos:line="89" pos:column="23">setVirginReply<pos:position pos:line="89" pos:column="37"/></name><argument_list pos:line="89" pos:column="37">(<argument><expr><name pos:line="89" pos:column="38">newrep<pos:position pos:line="89" pos:column="44"/></name></expr></argument>)<pos:position pos:line="89" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="89" pos:column="46"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="90" pos:column="5">flags<pos:position pos:line="90" pos:column="10"/></name><operator pos:line="90" pos:column="10">.<pos:position pos:line="90" pos:column="11"/></operator><name pos:line="90" pos:column="11">headers_parsed<pos:position pos:line="90" pos:column="25"/></name></name> <operator pos:line="90" pos:column="26">=<pos:position pos:line="90" pos:column="27"/></operator> <literal type="number" pos:line="90" pos:column="28">1<pos:position pos:line="90" pos:column="29"/></literal></expr>;<pos:position pos:line="90" pos:column="30"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="92" pos:column="5">keepaliveAccounting<pos:position pos:line="92" pos:column="24"/></name><argument_list pos:line="92" pos:column="24">(<argument><expr><name pos:line="92" pos:column="25">vrep<pos:position pos:line="92" pos:column="29"/></name></expr></argument>)<pos:position pos:line="92" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="31"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="94" pos:column="5">checkDateSkew<pos:position pos:line="94" pos:column="18"/></name><argument_list pos:line="94" pos:column="18">(<argument><expr><name pos:line="94" pos:column="19">vrep<pos:position pos:line="94" pos:column="23"/></name></expr></argument>)<pos:position pos:line="94" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="25"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="96" pos:column="5">processSurrogateControl<pos:position pos:line="96" pos:column="28"/></name> <argument_list pos:line="96" pos:column="29">(<argument><expr><name pos:line="96" pos:column="30">vrep<pos:position pos:line="96" pos:column="34"/></name></expr></argument>)<pos:position pos:line="96" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="36"/></expr_stmt>

    <comment type="block" format="doxygen" pos:line="98" pos:column="5">/** \todo IF the reply is a 1.0 reply, AND it has a Connection: Header
     * Parse the header and remove all referenced headers
     */</comment>

    <expr_stmt><expr><name><name pos:line="102" pos:column="5">orig_request<pos:position pos:line="102" pos:column="17"/></name><operator pos:line="102" pos:column="17">-&gt;<pos:position pos:line="102" pos:column="22"/></operator><name pos:line="102" pos:column="19">hier<pos:position pos:line="102" pos:column="23"/></name><operator pos:line="102" pos:column="23">.<pos:position pos:line="102" pos:column="24"/></operator><name pos:line="102" pos:column="24">peer_reply_status<pos:position pos:line="102" pos:column="41"/></name></name> <operator pos:line="102" pos:column="42">=<pos:position pos:line="102" pos:column="43"/></operator> <name><name pos:line="102" pos:column="44">newrep<pos:position pos:line="102" pos:column="50"/></name><operator pos:line="102" pos:column="50">-&gt;<pos:position pos:line="102" pos:column="55"/></operator><name pos:line="102" pos:column="52">sline<pos:position pos:line="102" pos:column="57"/></name><operator pos:line="102" pos:column="57">.<pos:position pos:line="102" pos:column="58"/></operator><name pos:line="102" pos:column="58">status<pos:position pos:line="102" pos:column="64"/></name></name></expr>;<pos:position pos:line="102" pos:column="65"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="104" pos:column="5">ctx_exit<pos:position pos:line="104" pos:column="13"/></name><argument_list pos:line="104" pos:column="13">(<argument><expr><name pos:line="104" pos:column="14">ctx<pos:position pos:line="104" pos:column="17"/></name></expr></argument>)<pos:position pos:line="104" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="19"/></expr_stmt>
}<pos:position pos:line="105" pos:column="2"/></block></function></unit>
