<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4239_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">compileUnoptimisedREs<pos:position pos:line="2" pos:column="22"/></name><parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><name><name pos:line="2" pos:column="23">std<pos:position pos:line="2" pos:column="26"/></name><operator pos:line="2" pos:column="26">::<pos:position pos:line="2" pos:column="28"/></operator><name><name pos:line="2" pos:column="28">list<pos:position pos:line="2" pos:column="32"/></name><argument_list type="generic" pos:line="2" pos:column="32">&lt;<argument><expr><name pos:line="2" pos:column="33">RegexPattern<pos:position pos:line="2" pos:column="45"/></name></expr></argument>&gt;<pos:position pos:line="2" pos:column="49"/></argument_list></name></name> <modifier pos:line="2" pos:column="47">&amp;<pos:position pos:line="2" pos:column="52"/></modifier></type><name pos:line="2" pos:column="48">curlist<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="57">const<pos:position pos:line="2" pos:column="62"/></specifier> <name pos:line="2" pos:column="63">SBufList<pos:position pos:line="2" pos:column="71"/></name> <modifier pos:line="2" pos:column="72">&amp;<pos:position pos:line="2" pos:column="77"/></modifier></type><name pos:line="2" pos:column="73">sl<pos:position pos:line="2" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="76"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">flags<pos:position pos:line="4" pos:column="14"/></name> <init pos:line="4" pos:column="15">= <expr><name pos:line="4" pos:column="17">REG_EXTENDED<pos:position pos:line="4" pos:column="29"/></name> <operator pos:line="4" pos:column="30">|<pos:position pos:line="4" pos:column="31"/></operator> <name pos:line="4" pos:column="32">REG_NOSUB<pos:position pos:line="4" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="42"/></decl_stmt>

    <decl_stmt><decl><specifier pos:line="6" pos:column="5">static<pos:position pos:line="6" pos:column="11"/></specifier> <type><specifier pos:line="6" pos:column="12">const<pos:position pos:line="6" pos:column="17"/></specifier> <name pos:line="6" pos:column="18">SBuf<pos:position pos:line="6" pos:column="22"/></name></type> <name pos:line="6" pos:column="23">minus_i<pos:position pos:line="6" pos:column="30"/></name><argument_list pos:line="6" pos:column="30">(<argument><expr><literal type="string" pos:line="6" pos:column="31">"-i"<pos:position pos:line="6" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="36"/></argument_list></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="38">plus_i<pos:position pos:line="6" pos:column="44"/></name><argument_list pos:line="6" pos:column="44">(<argument><expr><literal type="string" pos:line="6" pos:column="45">"+i"<pos:position pos:line="6" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="50"/></argument_list></decl>;<pos:position pos:line="6" pos:column="51"/></decl_stmt>
    <for pos:line="7" pos:column="5">for <control pos:line="7" pos:column="9">(<init><decl><type><name pos:line="7" pos:column="10">auto<pos:position pos:line="7" pos:column="14"/></name></type> <name pos:line="7" pos:column="15">configurationLineWord<pos:position pos:line="7" pos:column="36"/></name> <range pos:line="7" pos:column="37">: <expr><name pos:line="7" pos:column="39">sl<pos:position pos:line="7" pos:column="41"/></name></expr></range></decl></init>)<pos:position pos:line="7" pos:column="42"/></control> <block pos:line="7" pos:column="43">{
        <if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">configurationLineWord<pos:position pos:line="8" pos:column="34"/></name> <operator pos:line="8" pos:column="35">==<pos:position pos:line="8" pos:column="37"/></operator> <name pos:line="8" pos:column="38">minus_i<pos:position pos:line="8" pos:column="45"/></name></expr>)<pos:position pos:line="8" pos:column="46"/></condition><then pos:line="8" pos:column="46"> <block pos:line="8" pos:column="47">{
            <expr_stmt><expr><name pos:line="9" pos:column="13">flags<pos:position pos:line="9" pos:column="18"/></name> <operator pos:line="9" pos:column="19">|=<pos:position pos:line="9" pos:column="21"/></operator> <name pos:line="9" pos:column="22">REG_ICASE<pos:position pos:line="9" pos:column="31"/></name></expr>;<pos:position pos:line="9" pos:column="32"/></expr_stmt>
        }<pos:position pos:line="10" pos:column="10"/></block></then> <elseif pos:line="10" pos:column="11">else <if pos:line="10" pos:column="16">if <condition pos:line="10" pos:column="19">(<expr><name pos:line="10" pos:column="20">configurationLineWord<pos:position pos:line="10" pos:column="41"/></name> <operator pos:line="10" pos:column="42">==<pos:position pos:line="10" pos:column="44"/></operator> <name pos:line="10" pos:column="45">plus_i<pos:position pos:line="10" pos:column="51"/></name></expr>)<pos:position pos:line="10" pos:column="52"/></condition><then pos:line="10" pos:column="52"> <block pos:line="10" pos:column="53">{
            <expr_stmt><expr><name pos:line="11" pos:column="13">flags<pos:position pos:line="11" pos:column="18"/></name> <operator pos:line="11" pos:column="19">&amp;=<pos:position pos:line="11" pos:column="25"/></operator> <operator pos:line="11" pos:column="22">~<pos:position pos:line="11" pos:column="23"/></operator><name pos:line="11" pos:column="23">REG_ICASE<pos:position pos:line="11" pos:column="32"/></name></expr>;<pos:position pos:line="11" pos:column="33"/></expr_stmt>
        }<pos:position pos:line="12" pos:column="10"/></block></then></if></elseif> <else pos:line="12" pos:column="11">else <block pos:line="12" pos:column="16">{
            <if pos:line="13" pos:column="13">if <condition pos:line="13" pos:column="16">(<expr><operator pos:line="13" pos:column="17">!<pos:position pos:line="13" pos:column="18"/></operator><call><name pos:line="13" pos:column="18">compileRE<pos:position pos:line="13" pos:column="27"/></name><argument_list pos:line="13" pos:column="27">(<argument><expr><name pos:line="13" pos:column="28">curlist<pos:position pos:line="13" pos:column="35"/></name></expr></argument>, <argument><expr><call><name><name pos:line="13" pos:column="37">configurationLineWord<pos:position pos:line="13" pos:column="58"/></name><operator pos:line="13" pos:column="58">.<pos:position pos:line="13" pos:column="59"/></operator><name pos:line="13" pos:column="59">c_str<pos:position pos:line="13" pos:column="64"/></name></name><argument_list pos:line="13" pos:column="64">()<pos:position pos:line="13" pos:column="66"/></argument_list></call></expr></argument> , <argument><expr><name pos:line="13" pos:column="69">flags<pos:position pos:line="13" pos:column="74"/></name></expr></argument>)<pos:position pos:line="13" pos:column="75"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="76"/></condition><then pos:line="13" pos:column="76">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="17">debugs<pos:position pos:line="14" pos:column="23"/></name><argument_list pos:line="14" pos:column="23">(<argument><expr><literal type="number" pos:line="14" pos:column="24">28<pos:position pos:line="14" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="28">DBG_CRITICAL<pos:position pos:line="14" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="42">"ERROR: Skipping regular expression. "<pos:position pos:line="14" pos:column="80"/></literal>
                       <literal type="string" pos:line="15" pos:column="24">"Compile failed: '"<pos:position pos:line="15" pos:column="43"/></literal> <operator pos:line="15" pos:column="44">&lt;&lt;<pos:position pos:line="15" pos:column="52"/></operator> <name pos:line="15" pos:column="47">configurationLineWord<pos:position pos:line="15" pos:column="68"/></name> <operator pos:line="15" pos:column="69">&lt;&lt;<pos:position pos:line="15" pos:column="77"/></operator> <literal type="string" pos:line="15" pos:column="72">"'"<pos:position pos:line="15" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="77"/></expr_stmt></block></then></if>
        }<pos:position pos:line="16" pos:column="10"/></block></else></if>
    }<pos:position pos:line="17" pos:column="6"/></block></for>
}<pos:position pos:line="18" pos:column="2"/></block></function></unit>
