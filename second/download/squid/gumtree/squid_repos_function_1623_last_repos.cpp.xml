<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1623_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">BodyPipe<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">postAppend<pos:position pos:line="2" pos:column="21"/></name></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><name pos:line="2" pos:column="22">size_t<pos:position pos:line="2" pos:column="28"/></name></type> <name pos:line="2" pos:column="29">size<pos:position pos:line="2" pos:column="33"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="34"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><operator pos:line="4" pos:column="12">!<pos:position pos:line="4" pos:column="13"/></operator><name pos:line="4" pos:column="13">isCheckedOut<pos:position pos:line="4" pos:column="25"/></name></expr></argument>)<pos:position pos:line="4" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name pos:line="5" pos:column="5">thePutSize<pos:position pos:line="5" pos:column="15"/></name> <operator pos:line="5" pos:column="16">+=<pos:position pos:line="5" pos:column="18"/></operator> <name pos:line="5" pos:column="19">size<pos:position pos:line="5" pos:column="23"/></name></expr>;<pos:position pos:line="5" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">debugs<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><literal type="number" pos:line="6" pos:column="12">91<pos:position pos:line="6" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="6" pos:column="15">7<pos:position pos:line="6" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="6" pos:column="18">HERE<pos:position pos:line="6" pos:column="22"/></name> <operator pos:line="6" pos:column="23">&lt;&lt;<pos:position pos:line="6" pos:column="31"/></operator> <literal type="string" pos:line="6" pos:column="26">"added "<pos:position pos:line="6" pos:column="34"/></literal> <operator pos:line="6" pos:column="35">&lt;&lt;<pos:position pos:line="6" pos:column="43"/></operator> <name pos:line="6" pos:column="38">size<pos:position pos:line="6" pos:column="42"/></name> <operator pos:line="6" pos:column="43">&lt;&lt;<pos:position pos:line="6" pos:column="51"/></operator> <literal type="string" pos:line="6" pos:column="46">" bytes"<pos:position pos:line="6" pos:column="54"/></literal> <operator pos:line="6" pos:column="55">&lt;&lt;<pos:position pos:line="6" pos:column="63"/></operator> <call><name pos:line="6" pos:column="58">status<pos:position pos:line="6" pos:column="64"/></name><argument_list pos:line="6" pos:column="64">()<pos:position pos:line="6" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="68"/></expr_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">mustAutoConsume<pos:position pos:line="8" pos:column="24"/></name> <operator pos:line="8" pos:column="25">&amp;&amp;<pos:position pos:line="8" pos:column="35"/></operator> <operator pos:line="8" pos:column="28">!<pos:position pos:line="8" pos:column="29"/></operator><name pos:line="8" pos:column="29">theConsumer<pos:position pos:line="8" pos:column="40"/></name> <operator pos:line="8" pos:column="41">&amp;&amp;<pos:position pos:line="8" pos:column="51"/></operator> <name pos:line="8" pos:column="44">size<pos:position pos:line="8" pos:column="48"/></name> <operator pos:line="8" pos:column="49">&gt;<pos:position pos:line="8" pos:column="53"/></operator> <literal type="number" pos:line="8" pos:column="51">0<pos:position pos:line="8" pos:column="52"/></literal></expr>)<pos:position pos:line="8" pos:column="53"/></condition><then pos:line="8" pos:column="53">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="9" pos:column="9">startAutoConsumption<pos:position pos:line="9" pos:column="29"/></name><argument_list pos:line="9" pos:column="29">()<pos:position pos:line="9" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="32"/></expr_stmt></block></then></if>

    <comment type="line" pos:line="11" pos:column="5">// We should not consume here even if mustAutoConsume because the</comment>
    <comment type="line" pos:line="12" pos:column="5">// caller may not be ready for the data to be consumed during this call.</comment>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">scheduleBodyDataNotification<pos:position pos:line="13" pos:column="33"/></name><argument_list pos:line="13" pos:column="33">()<pos:position pos:line="13" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="36"/></expr_stmt>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><operator pos:line="15" pos:column="9">!<pos:position pos:line="15" pos:column="10"/></operator><call><name pos:line="15" pos:column="10">mayNeedMoreData<pos:position pos:line="15" pos:column="25"/></name><argument_list pos:line="15" pos:column="25">()<pos:position pos:line="15" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="28"/></condition><then pos:line="15" pos:column="28">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="9">clearProducer<pos:position pos:line="16" pos:column="22"/></name><argument_list pos:line="16" pos:column="22">(<argument><expr><literal type="boolean" pos:line="16" pos:column="23">true<pos:position pos:line="16" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="29"/></expr_stmt></block></then></if> <comment type="line" pos:line="16" pos:column="30">// reached end-of-body</comment>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
