<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_334_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier><modifier pos:line="1" pos:column="7">*<pos:position pos:line="1" pos:column="8"/></modifier></type>
<name pos:line="2" pos:column="1">getgids<pos:position pos:line="2" pos:column="8"/></name><parameter_list pos:line="2" pos:column="8">(<parameter><decl><type><name pos:line="2" pos:column="9">char<pos:position pos:line="2" pos:column="13"/></name> <modifier pos:line="2" pos:column="14">*<pos:position pos:line="2" pos:column="15"/></modifier><modifier pos:line="2" pos:column="15">*<pos:position pos:line="2" pos:column="16"/></modifier></type><name pos:line="2" pos:column="16">Rids<pos:position pos:line="2" pos:column="20"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="22">uint32_t<pos:position pos:line="2" pos:column="30"/></name></type> <name pos:line="2" pos:column="31">GroupIds<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="41">uint32_t<pos:position pos:line="2" pos:column="49"/></name></type>  <name pos:line="2" pos:column="51">GroupCount<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="62"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">GroupIds<pos:position pos:line="4" pos:column="17"/></name><operator pos:line="4" pos:column="17">!=<pos:position pos:line="4" pos:column="19"/></operator> <literal type="number" pos:line="4" pos:column="20">0<pos:position pos:line="4" pos:column="21"/></literal></expr>)<pos:position pos:line="4" pos:column="22"/></condition><then pos:line="4" pos:column="22"> <block pos:line="4" pos:column="23">{
        <decl_stmt><decl><type><name pos:line="5" pos:column="9">uint32_t<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">ngroup<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="6" pos:column="9">uint32_t<pos:position pos:line="6" pos:column="17"/></name></type> <name pos:line="6" pos:column="18">sauth<pos:position pos:line="6" pos:column="23"/></name></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">l<pos:position pos:line="7" pos:column="14"/></name></decl>;<pos:position pos:line="7" pos:column="15"/></decl_stmt>

        <expr_stmt><expr><call><name pos:line="9" pos:column="9">align<pos:position pos:line="9" pos:column="14"/></name><argument_list pos:line="9" pos:column="14">(<argument><expr><literal type="number" pos:line="9" pos:column="15">4<pos:position pos:line="9" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="18"/></expr_stmt>
        <expr_stmt><expr><name pos:line="10" pos:column="9">ngroup<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">=<pos:position pos:line="10" pos:column="17"/></operator> <call><name pos:line="10" pos:column="18">get4byt<pos:position pos:line="10" pos:column="25"/></name><argument_list pos:line="10" pos:column="25">()<pos:position pos:line="10" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="28"/></expr_stmt>
        <if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">( <expr><name pos:line="11" pos:column="14">ngroup<pos:position pos:line="11" pos:column="20"/></name> <operator pos:line="11" pos:column="21">!=<pos:position pos:line="11" pos:column="23"/></operator> <name pos:line="11" pos:column="24">GroupCount<pos:position pos:line="11" pos:column="34"/></name></expr>)<pos:position pos:line="11" pos:column="35"/></condition><then pos:line="11" pos:column="35"> <block pos:line="11" pos:column="36">{
            <expr_stmt><expr><call><name pos:line="12" pos:column="13">debug<pos:position pos:line="12" pos:column="18"/></name><argument_list pos:line="12" pos:column="18">(<argument><expr><operator pos:line="12" pos:column="19">(<pos:position pos:line="12" pos:column="20"/></operator><name pos:line="12" pos:column="20">char<pos:position pos:line="12" pos:column="24"/></name> <operator pos:line="12" pos:column="25">*<pos:position pos:line="12" pos:column="26"/></operator><operator pos:line="12" pos:column="26">)<pos:position pos:line="12" pos:column="27"/></operator> <literal type="string" pos:line="12" pos:column="28">"%s| %s: ERROR: Group encoding error =&gt; GroupCount: %d Array size: %d\n"<pos:position pos:line="12" pos:column="103"/></literal></expr></argument>,
                  <argument><expr><call><name pos:line="13" pos:column="19">LogTime<pos:position pos:line="13" pos:column="26"/></name><argument_list pos:line="13" pos:column="26">()<pos:position pos:line="13" pos:column="28"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="13" pos:column="30">PROGRAM<pos:position pos:line="13" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="39">GroupCount<pos:position pos:line="13" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="51">ngroup<pos:position pos:line="13" pos:column="57"/></name></expr></argument>)<pos:position pos:line="13" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="59"/></expr_stmt>
            <return pos:line="14" pos:column="13">return <expr><name pos:line="14" pos:column="20">NULL<pos:position pos:line="14" pos:column="24"/></name></expr>;<pos:position pos:line="14" pos:column="25"/></return>
        }<pos:position pos:line="15" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">debug<pos:position pos:line="16" pos:column="14"/></name><argument_list pos:line="16" pos:column="14">(<argument><expr><operator pos:line="16" pos:column="15">(<pos:position pos:line="16" pos:column="16"/></operator><name pos:line="16" pos:column="16">char<pos:position pos:line="16" pos:column="20"/></name> <operator pos:line="16" pos:column="21">*<pos:position pos:line="16" pos:column="22"/></operator><operator pos:line="16" pos:column="22">)<pos:position pos:line="16" pos:column="23"/></operator> <literal type="string" pos:line="16" pos:column="24">"%s| %s: INFO: Found %d rids\n"<pos:position pos:line="16" pos:column="55"/></literal></expr></argument>, <argument><expr><call><name pos:line="16" pos:column="57">LogTime<pos:position pos:line="16" pos:column="64"/></name><argument_list pos:line="16" pos:column="64">()<pos:position pos:line="16" pos:column="66"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="16" pos:column="68">PROGRAM<pos:position pos:line="16" pos:column="75"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="77">GroupCount<pos:position pos:line="16" pos:column="87"/></name></expr></argument>)<pos:position pos:line="16" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="89"/></expr_stmt>

        <expr_stmt><expr><name pos:line="18" pos:column="9">Rids<pos:position pos:line="18" pos:column="13"/></name><operator pos:line="18" pos:column="13">=<pos:position pos:line="18" pos:column="14"/></operator><operator pos:line="18" pos:column="14">(<pos:position pos:line="18" pos:column="15"/></operator><name pos:line="18" pos:column="15">char<pos:position pos:line="18" pos:column="19"/></name> <operator pos:line="18" pos:column="20">*<pos:position pos:line="18" pos:column="21"/></operator><operator pos:line="18" pos:column="21">*<pos:position pos:line="18" pos:column="22"/></operator><operator pos:line="18" pos:column="22">)<pos:position pos:line="18" pos:column="23"/></operator><call><name pos:line="18" pos:column="23">xcalloc<pos:position pos:line="18" pos:column="30"/></name><argument_list pos:line="18" pos:column="30">(<argument><expr><name pos:line="18" pos:column="31">GroupCount<pos:position pos:line="18" pos:column="41"/></name><operator pos:line="18" pos:column="41">*<pos:position pos:line="18" pos:column="42"/></operator><sizeof pos:line="18" pos:column="42">sizeof<argument_list pos:line="18" pos:column="48">(<argument><expr><name pos:line="18" pos:column="49">char<pos:position pos:line="18" pos:column="53"/></name><operator pos:line="18" pos:column="53">*<pos:position pos:line="18" pos:column="54"/></operator></expr></argument>)<pos:position pos:line="18" pos:column="55"/></argument_list></sizeof></expr></argument>,<argument><expr><literal type="number" pos:line="18" pos:column="56">1<pos:position pos:line="18" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="59"/></expr_stmt>
        <for pos:line="19" pos:column="9">for <control pos:line="19" pos:column="13">( <init><expr><name pos:line="19" pos:column="15">l<pos:position pos:line="19" pos:column="16"/></name><operator pos:line="19" pos:column="16">=<pos:position pos:line="19" pos:column="17"/></operator><literal type="number" pos:line="19" pos:column="17">0<pos:position pos:line="19" pos:column="18"/></literal></expr>;<pos:position pos:line="19" pos:column="19"/></init> <condition><expr><name pos:line="19" pos:column="20">l<pos:position pos:line="19" pos:column="21"/></name><operator pos:line="19" pos:column="21">&lt;<pos:position pos:line="19" pos:column="25"/></operator><operator pos:line="19" pos:column="22">(<pos:position pos:line="19" pos:column="23"/></operator><name pos:line="19" pos:column="23">int<pos:position pos:line="19" pos:column="26"/></name><operator pos:line="19" pos:column="26">)<pos:position pos:line="19" pos:column="27"/></operator><name pos:line="19" pos:column="27">GroupCount<pos:position pos:line="19" pos:column="37"/></name></expr>;<pos:position pos:line="19" pos:column="38"/></condition> <incr><expr><name pos:line="19" pos:column="39">l<pos:position pos:line="19" pos:column="40"/></name><operator pos:line="19" pos:column="40">++<pos:position pos:line="19" pos:column="42"/></operator></expr></incr>)<pos:position pos:line="19" pos:column="43"/></control> <block pos:line="19" pos:column="44">{
            <expr_stmt><expr><name><name pos:line="20" pos:column="13">Rids<pos:position pos:line="20" pos:column="17"/></name><index pos:line="20" pos:column="17">[<expr><name pos:line="20" pos:column="18">l<pos:position pos:line="20" pos:column="19"/></name></expr>]<pos:position pos:line="20" pos:column="20"/></index></name><operator pos:line="20" pos:column="20">=<pos:position pos:line="20" pos:column="21"/></operator><operator pos:line="20" pos:column="21">(<pos:position pos:line="20" pos:column="22"/></operator><name pos:line="20" pos:column="22">char<pos:position pos:line="20" pos:column="26"/></name> <operator pos:line="20" pos:column="27">*<pos:position pos:line="20" pos:column="28"/></operator><operator pos:line="20" pos:column="28">)<pos:position pos:line="20" pos:column="29"/></operator><call><name pos:line="20" pos:column="29">xcalloc<pos:position pos:line="20" pos:column="36"/></name><argument_list pos:line="20" pos:column="36">(<argument><expr><literal type="number" pos:line="20" pos:column="37">4<pos:position pos:line="20" pos:column="38"/></literal><operator pos:line="20" pos:column="38">*<pos:position pos:line="20" pos:column="39"/></operator><sizeof pos:line="20" pos:column="39">sizeof<argument_list pos:line="20" pos:column="45">(<argument><expr><name pos:line="20" pos:column="46">char<pos:position pos:line="20" pos:column="50"/></name></expr></argument>)<pos:position pos:line="20" pos:column="51"/></argument_list></sizeof></expr></argument>,<argument><expr><literal type="number" pos:line="20" pos:column="52">1<pos:position pos:line="20" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="55"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="21" pos:column="13">memcpy<pos:position pos:line="21" pos:column="19"/></name><argument_list pos:line="21" pos:column="19">(<argument><expr><operator pos:line="21" pos:column="20">(<pos:position pos:line="21" pos:column="21"/></operator><name pos:line="21" pos:column="21">void<pos:position pos:line="21" pos:column="25"/></name> <operator pos:line="21" pos:column="26">*<pos:position pos:line="21" pos:column="27"/></operator><operator pos:line="21" pos:column="27">)<pos:position pos:line="21" pos:column="28"/></operator><name><name pos:line="21" pos:column="28">Rids<pos:position pos:line="21" pos:column="32"/></name><index pos:line="21" pos:column="32">[<expr><name pos:line="21" pos:column="33">l<pos:position pos:line="21" pos:column="34"/></name></expr>]<pos:position pos:line="21" pos:column="35"/></index></name></expr></argument>,<argument><expr><operator pos:line="21" pos:column="36">(<pos:position pos:line="21" pos:column="37"/></operator><name pos:line="21" pos:column="37">void<pos:position pos:line="21" pos:column="41"/></name> <operator pos:line="21" pos:column="42">*<pos:position pos:line="21" pos:column="43"/></operator><operator pos:line="21" pos:column="43">)<pos:position pos:line="21" pos:column="44"/></operator><operator pos:line="21" pos:column="44">&amp;<pos:position pos:line="21" pos:column="49"/></operator><name><name pos:line="21" pos:column="45">p<pos:position pos:line="21" pos:column="46"/></name><index pos:line="21" pos:column="46">[<expr><name pos:line="21" pos:column="47">bpos<pos:position pos:line="21" pos:column="51"/></name></expr>]<pos:position pos:line="21" pos:column="52"/></index></name></expr></argument>,<argument><expr><literal type="number" pos:line="21" pos:column="53">4<pos:position pos:line="21" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="56"/></expr_stmt>
            <expr_stmt><expr><name pos:line="22" pos:column="13">sauth<pos:position pos:line="22" pos:column="18"/></name> <operator pos:line="22" pos:column="19">=<pos:position pos:line="22" pos:column="20"/></operator> <call><name pos:line="22" pos:column="21">get4byt<pos:position pos:line="22" pos:column="28"/></name><argument_list pos:line="22" pos:column="28">()<pos:position pos:line="22" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="31"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="23" pos:column="13">debug<pos:position pos:line="23" pos:column="18"/></name><argument_list pos:line="23" pos:column="18">(<argument><expr><operator pos:line="23" pos:column="19">(<pos:position pos:line="23" pos:column="20"/></operator><name pos:line="23" pos:column="20">char<pos:position pos:line="23" pos:column="24"/></name> <operator pos:line="23" pos:column="25">*<pos:position pos:line="23" pos:column="26"/></operator><operator pos:line="23" pos:column="26">)<pos:position pos:line="23" pos:column="27"/></operator> <literal type="string" pos:line="23" pos:column="28">"%s| %s: Info: Got rid: %u\n"<pos:position pos:line="23" pos:column="57"/></literal></expr></argument>, <argument><expr><call><name pos:line="23" pos:column="59">LogTime<pos:position pos:line="23" pos:column="66"/></name><argument_list pos:line="23" pos:column="66">()<pos:position pos:line="23" pos:column="68"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="23" pos:column="70">PROGRAM<pos:position pos:line="23" pos:column="77"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="79">sauth<pos:position pos:line="23" pos:column="84"/></name></expr></argument>)<pos:position pos:line="23" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="86"/></expr_stmt>
            <comment type="block" pos:line="24" pos:column="13">/* attribute */</comment>
            <expr_stmt><expr><name pos:line="25" pos:column="13">bpos<pos:position pos:line="25" pos:column="17"/></name> <operator pos:line="25" pos:column="18">=<pos:position pos:line="25" pos:column="19"/></operator> <name pos:line="25" pos:column="20">bpos<pos:position pos:line="25" pos:column="24"/></name><operator pos:line="25" pos:column="24">+<pos:position pos:line="25" pos:column="25"/></operator><literal type="number" pos:line="25" pos:column="25">4<pos:position pos:line="25" pos:column="26"/></literal></expr>;<pos:position pos:line="25" pos:column="27"/></expr_stmt>
        }<pos:position pos:line="26" pos:column="10"/></block></for>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>
    <return pos:line="28" pos:column="5">return <expr><name pos:line="28" pos:column="12">Rids<pos:position pos:line="28" pos:column="16"/></name></expr>;<pos:position pos:line="28" pos:column="17"/></return>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
