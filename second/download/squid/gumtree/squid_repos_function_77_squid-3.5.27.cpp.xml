<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_77_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">connectTo<pos:position pos:line="2" pos:column="10"/></name><parameter_list pos:line="2" pos:column="10">( <parameter><decl><type><name><name pos:line="2" pos:column="12">struct<pos:position pos:line="2" pos:column="18"/></name> <name pos:line="2" pos:column="19">in_addr<pos:position pos:line="2" pos:column="26"/></name></name></type> <name pos:line="2" pos:column="27">host<pos:position pos:line="2" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="33">unsigned<pos:position pos:line="2" pos:column="41"/></name> <name pos:line="2" pos:column="42">short<pos:position pos:line="2" pos:column="47"/></name></type> <name pos:line="2" pos:column="48">port<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="54">bool<pos:position pos:line="2" pos:column="58"/></name></type> <name pos:line="2" pos:column="59">nodelay<pos:position pos:line="2" pos:column="66"/></name></decl></parameter>,
           <parameter><decl><type><name pos:line="3" pos:column="12">int<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">sendBufferSize<pos:position pos:line="3" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="32">int<pos:position pos:line="3" pos:column="35"/></name></type> <name pos:line="3" pos:column="36">recvBufferSize<pos:position pos:line="3" pos:column="50"/></name></decl></parameter> )<pos:position pos:line="3" pos:column="52"/></parameter_list>
<comment type="line" pos:line="4" pos:column="1">// purpose: connect to a server as a client</comment>
<comment type="line" pos:line="5" pos:column="1">// paramtr: host (IN): address describing the server</comment>
<comment type="line" pos:line="6" pos:column="1">//          port (IN): port to connect at the server</comment>
<comment type="line" pos:line="7" pos:column="1">//          nodelay (IN): true=set TCP_NODELAY option.</comment>
<comment type="line" pos:line="8" pos:column="1">//          sendBufferSize (IN): don't set (use sys defaults) if &lt; 0</comment>
<comment type="line" pos:line="9" pos:column="1">//          recvBufferSize (IN): don't set (use sys defaults) if &lt; 0</comment>
<comment type="line" pos:line="10" pos:column="1">// returns: &gt;=0 is the descriptor of the opened, connected socket,</comment>
<comment type="line" pos:line="11" pos:column="1">//          -1  is an indication of an error (errno may have been reset).</comment>
<block pos:line="12" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">int<pos:position pos:line="13" pos:column="8"/></name></type> <name pos:line="13" pos:column="9">sockfd<pos:position pos:line="13" pos:column="15"/></name> <init pos:line="13" pos:column="16">= <expr><call><name pos:line="13" pos:column="18">socket<pos:position pos:line="13" pos:column="24"/></name><argument_list pos:line="13" pos:column="24">( <argument><expr><name pos:line="13" pos:column="26">PF_INET<pos:position pos:line="13" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="35">SOCK_STREAM<pos:position pos:line="13" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="48">IPPROTO_TCP<pos:position pos:line="13" pos:column="59"/></name></expr></argument> )<pos:position pos:line="13" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="62"/></decl_stmt>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">( <expr><name pos:line="14" pos:column="10">sockfd<pos:position pos:line="14" pos:column="16"/></name> <operator pos:line="14" pos:column="17">==<pos:position pos:line="14" pos:column="19"/></operator> <operator pos:line="14" pos:column="20">-<pos:position pos:line="14" pos:column="21"/></operator><literal type="number" pos:line="14" pos:column="21">1<pos:position pos:line="14" pos:column="22"/></literal></expr> )<pos:position pos:line="14" pos:column="24"/></condition><then pos:line="14" pos:column="24"> <block pos:line="14" pos:column="25">{
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">perror<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">( <argument><expr><literal type="string" pos:line="15" pos:column="17">"socket() failed"<pos:position pos:line="15" pos:column="34"/></literal></expr></argument> )<pos:position pos:line="15" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="37"/></expr_stmt>
        <return pos:line="16" pos:column="9">return <expr><operator pos:line="16" pos:column="16">-<pos:position pos:line="16" pos:column="17"/></operator><literal type="number" pos:line="16" pos:column="17">1<pos:position pos:line="16" pos:column="18"/></literal></expr>;<pos:position pos:line="16" pos:column="19"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>

    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">( <expr><call><name pos:line="19" pos:column="10">commonCode<pos:position pos:line="19" pos:column="20"/></name><argument_list pos:line="19" pos:column="20">( <argument><expr><name pos:line="19" pos:column="22">sockfd<pos:position pos:line="19" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="30">nodelay<pos:position pos:line="19" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="39">sendBufferSize<pos:position pos:line="19" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="55">recvBufferSize<pos:position pos:line="19" pos:column="69"/></name></expr></argument> )<pos:position pos:line="19" pos:column="71"/></argument_list></call> <operator pos:line="19" pos:column="72">==<pos:position pos:line="19" pos:column="74"/></operator> <operator pos:line="19" pos:column="75">-<pos:position pos:line="19" pos:column="76"/></operator><literal type="number" pos:line="19" pos:column="76">1<pos:position pos:line="19" pos:column="77"/></literal></expr> )<pos:position pos:line="19" pos:column="79"/></condition><then pos:line="19" pos:column="79">
        <block type="pseudo"><return pos:line="20" pos:column="9">return <expr><operator pos:line="20" pos:column="16">-<pos:position pos:line="20" pos:column="17"/></operator><literal type="number" pos:line="20" pos:column="17">1<pos:position pos:line="20" pos:column="18"/></literal></expr>;<pos:position pos:line="20" pos:column="19"/></return></block></then></if>

    <decl_stmt><decl><type><name><name pos:line="22" pos:column="5">struct<pos:position pos:line="22" pos:column="11"/></name> <name pos:line="22" pos:column="12">sockaddr_in<pos:position pos:line="22" pos:column="23"/></name></name></type> <name pos:line="22" pos:column="24">server<pos:position pos:line="22" pos:column="30"/></name></decl>;<pos:position pos:line="22" pos:column="31"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">memset<pos:position pos:line="23" pos:column="11"/></name><argument_list pos:line="23" pos:column="11">( <argument><expr><operator pos:line="23" pos:column="13">&amp;<pos:position pos:line="23" pos:column="18"/></operator><name pos:line="23" pos:column="14">server<pos:position pos:line="23" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="22">0<pos:position pos:line="23" pos:column="23"/></literal></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="25">sizeof<argument_list pos:line="23" pos:column="31">(<argument><expr><name pos:line="23" pos:column="32">server<pos:position pos:line="23" pos:column="38"/></name></expr></argument>)<pos:position pos:line="23" pos:column="39"/></argument_list></sizeof></expr></argument> )<pos:position pos:line="23" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="24" pos:column="5">server<pos:position pos:line="24" pos:column="11"/></name><operator pos:line="24" pos:column="11">.<pos:position pos:line="24" pos:column="12"/></operator><name pos:line="24" pos:column="12">sin_family<pos:position pos:line="24" pos:column="22"/></name></name> <operator pos:line="24" pos:column="23">=<pos:position pos:line="24" pos:column="24"/></operator> <name pos:line="24" pos:column="25">AF_INET<pos:position pos:line="24" pos:column="32"/></name></expr>;<pos:position pos:line="24" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="25" pos:column="5">server<pos:position pos:line="25" pos:column="11"/></name><operator pos:line="25" pos:column="11">.<pos:position pos:line="25" pos:column="12"/></operator><name pos:line="25" pos:column="12">sin_addr<pos:position pos:line="25" pos:column="20"/></name></name>   <operator pos:line="25" pos:column="23">=<pos:position pos:line="25" pos:column="24"/></operator> <name pos:line="25" pos:column="25">host<pos:position pos:line="25" pos:column="29"/></name></expr>;<pos:position pos:line="25" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="26" pos:column="5">server<pos:position pos:line="26" pos:column="11"/></name><operator pos:line="26" pos:column="11">.<pos:position pos:line="26" pos:column="12"/></operator><name pos:line="26" pos:column="12">sin_port<pos:position pos:line="26" pos:column="20"/></name></name>   <operator pos:line="26" pos:column="23">=<pos:position pos:line="26" pos:column="24"/></operator> <name pos:line="26" pos:column="25">port<pos:position pos:line="26" pos:column="29"/></name></expr>;<pos:position pos:line="26" pos:column="30"/></expr_stmt>
    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">( <expr><call><name pos:line="27" pos:column="10">connect<pos:position pos:line="27" pos:column="17"/></name><argument_list pos:line="27" pos:column="17">( <argument><expr><name pos:line="27" pos:column="19">sockfd<pos:position pos:line="27" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="27">(<pos:position pos:line="27" pos:column="28"/></operator>struct <name pos:line="27" pos:column="35">sockaddr<pos:position pos:line="27" pos:column="43"/></name><operator pos:line="27" pos:column="43">*<pos:position pos:line="27" pos:column="44"/></operator><operator pos:line="27" pos:column="44">)<pos:position pos:line="27" pos:column="45"/></operator> <operator pos:line="27" pos:column="46">&amp;<pos:position pos:line="27" pos:column="51"/></operator><name pos:line="27" pos:column="47">server<pos:position pos:line="27" pos:column="53"/></name></expr></argument>, <argument><expr><sizeof pos:line="27" pos:column="55">sizeof<argument_list pos:line="27" pos:column="61">(<argument><expr><name pos:line="27" pos:column="62">server<pos:position pos:line="27" pos:column="68"/></name></expr></argument>)<pos:position pos:line="27" pos:column="69"/></argument_list></sizeof></expr></argument> )<pos:position pos:line="27" pos:column="71"/></argument_list></call> <operator pos:line="27" pos:column="72">==<pos:position pos:line="27" pos:column="74"/></operator> <operator pos:line="27" pos:column="75">-<pos:position pos:line="27" pos:column="76"/></operator><literal type="number" pos:line="27" pos:column="76">1<pos:position pos:line="27" pos:column="77"/></literal></expr> )<pos:position pos:line="27" pos:column="79"/></condition><then pos:line="27" pos:column="79"> <block pos:line="27" pos:column="80">{
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">perror<pos:position pos:line="28" pos:column="15"/></name><argument_list pos:line="28" pos:column="15">( <argument><expr><literal type="string" pos:line="28" pos:column="17">"connect() failure"<pos:position pos:line="28" pos:column="36"/></literal></expr></argument> )<pos:position pos:line="28" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">close<pos:position pos:line="29" pos:column="14"/></name><argument_list pos:line="29" pos:column="14">(<argument><expr><name pos:line="29" pos:column="15">sockfd<pos:position pos:line="29" pos:column="21"/></name></expr></argument>)<pos:position pos:line="29" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="23"/></expr_stmt>
        <return pos:line="30" pos:column="9">return <expr><operator pos:line="30" pos:column="16">-<pos:position pos:line="30" pos:column="17"/></operator><literal type="number" pos:line="30" pos:column="17">1<pos:position pos:line="30" pos:column="18"/></literal></expr>;<pos:position pos:line="30" pos:column="19"/></return>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>

    <return pos:line="33" pos:column="5">return <expr><name pos:line="33" pos:column="12">sockfd<pos:position pos:line="33" pos:column="18"/></name></expr>;<pos:position pos:line="33" pos:column="19"/></return>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
