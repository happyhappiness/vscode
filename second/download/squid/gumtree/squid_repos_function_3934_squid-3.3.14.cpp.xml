<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3934_squid-3.3.14.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name><name pos:line="1" pos:column="7">libecap<pos:position pos:line="1" pos:column="14"/></name><operator pos:line="1" pos:column="14">::<pos:position pos:line="1" pos:column="16"/></operator><name pos:line="1" pos:column="16">Area<pos:position pos:line="1" pos:column="20"/></name></name></type>
<name><name pos:line="2" pos:column="1">Adaptation<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">Ecap<pos:position pos:line="2" pos:column="17"/></name><operator pos:line="2" pos:column="17">::<pos:position pos:line="2" pos:column="19"/></operator><name pos:line="2" pos:column="19">ConfigRep<pos:position pos:line="2" pos:column="28"/></name><operator pos:line="2" pos:column="28">::<pos:position pos:line="2" pos:column="30"/></operator><name pos:line="2" pos:column="30">option<pos:position pos:line="2" pos:column="36"/></name></name><parameter_list pos:line="2" pos:column="36">(<parameter><decl><type><specifier pos:line="2" pos:column="37">const<pos:position pos:line="2" pos:column="42"/></specifier> <name><name pos:line="2" pos:column="43">libecap<pos:position pos:line="2" pos:column="50"/></name><operator pos:line="2" pos:column="50">::<pos:position pos:line="2" pos:column="52"/></operator><name pos:line="2" pos:column="52">Name<pos:position pos:line="2" pos:column="56"/></name></name> <modifier pos:line="2" pos:column="57">&amp;<pos:position pos:line="2" pos:column="62"/></modifier></type><name pos:line="2" pos:column="58">name<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="63"/></parameter_list> <specifier pos:line="2" pos:column="64">const<pos:position pos:line="2" pos:column="69"/></specifier>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// we may supply the params we know about, but only when names have host ID</comment>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><name pos:line="5" pos:column="9">name<pos:position pos:line="5" pos:column="13"/></name> <operator pos:line="5" pos:column="14">==<pos:position pos:line="5" pos:column="16"/></operator> <name pos:line="5" pos:column="17">metaBypassable<pos:position pos:line="5" pos:column="31"/></name></expr>)<pos:position pos:line="5" pos:column="32"/></condition><then pos:line="5" pos:column="32">
        <block type="pseudo"><return pos:line="6" pos:column="9">return <expr><call><name pos:line="6" pos:column="16">Area<pos:position pos:line="6" pos:column="20"/></name><argument_list pos:line="6" pos:column="20">(<argument><expr><ternary><condition><expr><name><name pos:line="6" pos:column="21">master<pos:position pos:line="6" pos:column="27"/></name><operator pos:line="6" pos:column="27">.<pos:position pos:line="6" pos:column="28"/></operator><name pos:line="6" pos:column="28">bypass<pos:position pos:line="6" pos:column="34"/></name></name></expr> ?<pos:position pos:line="6" pos:column="36"/></condition><then pos:line="6" pos:column="36"> <expr><literal type="string" pos:line="6" pos:column="37">"1"<pos:position pos:line="6" pos:column="40"/></literal></expr> <pos:position pos:line="6" pos:column="41"/></then><else pos:line="6" pos:column="41">: <expr><literal type="string" pos:line="6" pos:column="43">"0"<pos:position pos:line="6" pos:column="46"/></literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="48">1<pos:position pos:line="6" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="51"/></return></block></then></if>

    <comment type="line" pos:line="8" pos:column="5">// TODO: We could build a by-name index, but is it worth it? Good adapters</comment>
    <comment type="line" pos:line="9" pos:column="5">// should use visitEachOption() instead, to check for name typos/errors.</comment>
    <typedef pos:line="10" pos:column="5">typedef <type><name><name pos:line="10" pos:column="13">Master<pos:position pos:line="10" pos:column="19"/></name><operator pos:line="10" pos:column="19">::<pos:position pos:line="10" pos:column="21"/></operator><name pos:line="10" pos:column="21">Extensions<pos:position pos:line="10" pos:column="31"/></name><operator pos:line="10" pos:column="31">::<pos:position pos:line="10" pos:column="33"/></operator><name pos:line="10" pos:column="33">const_iterator<pos:position pos:line="10" pos:column="47"/></name></name></type> <name pos:line="10" pos:column="48">MECI<pos:position pos:line="10" pos:column="52"/></name>;<pos:position pos:line="10" pos:column="53"/></typedef>
    <for pos:line="11" pos:column="5">for <control pos:line="11" pos:column="9">(<init><decl><type><name pos:line="11" pos:column="10">MECI<pos:position pos:line="11" pos:column="14"/></name></type> <name pos:line="11" pos:column="15">i<pos:position pos:line="11" pos:column="16"/></name> <init pos:line="11" pos:column="17">= <expr><call><name><name pos:line="11" pos:column="19">master<pos:position pos:line="11" pos:column="25"/></name><operator pos:line="11" pos:column="25">.<pos:position pos:line="11" pos:column="26"/></operator><name pos:line="11" pos:column="26">extensions<pos:position pos:line="11" pos:column="36"/></name><operator pos:line="11" pos:column="36">.<pos:position pos:line="11" pos:column="37"/></operator><name pos:line="11" pos:column="37">begin<pos:position pos:line="11" pos:column="42"/></name></name><argument_list pos:line="11" pos:column="42">()<pos:position pos:line="11" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="45"/></init> <condition><expr><name pos:line="11" pos:column="46">i<pos:position pos:line="11" pos:column="47"/></name> <operator pos:line="11" pos:column="48">!=<pos:position pos:line="11" pos:column="50"/></operator> <call><name><name pos:line="11" pos:column="51">master<pos:position pos:line="11" pos:column="57"/></name><operator pos:line="11" pos:column="57">.<pos:position pos:line="11" pos:column="58"/></operator><name pos:line="11" pos:column="58">extensions<pos:position pos:line="11" pos:column="68"/></name><operator pos:line="11" pos:column="68">.<pos:position pos:line="11" pos:column="69"/></operator><name pos:line="11" pos:column="69">end<pos:position pos:line="11" pos:column="72"/></name></name><argument_list pos:line="11" pos:column="72">()<pos:position pos:line="11" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="75"/></condition> <incr><expr><operator pos:line="11" pos:column="76">++<pos:position pos:line="11" pos:column="78"/></operator><name pos:line="11" pos:column="78">i<pos:position pos:line="11" pos:column="79"/></name></expr></incr>)<pos:position pos:line="11" pos:column="80"/></control> <block pos:line="11" pos:column="81">{
        <if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">name<pos:position pos:line="12" pos:column="17"/></name> <operator pos:line="12" pos:column="18">==<pos:position pos:line="12" pos:column="20"/></operator> <name><name pos:line="12" pos:column="21">i<pos:position pos:line="12" pos:column="22"/></name><operator pos:line="12" pos:column="22">-&gt;<pos:position pos:line="12" pos:column="27"/></operator><name pos:line="12" pos:column="24">first<pos:position pos:line="12" pos:column="29"/></name></name></expr>)<pos:position pos:line="12" pos:column="30"/></condition><then pos:line="12" pos:column="30">
            <block type="pseudo"><return pos:line="13" pos:column="13">return <expr><call><name pos:line="13" pos:column="20">Area<pos:position pos:line="13" pos:column="24"/></name><argument_list pos:line="13" pos:column="24">(<argument><expr><call><name><name pos:line="13" pos:column="25">i<pos:position pos:line="13" pos:column="26"/></name><operator pos:line="13" pos:column="26">-&gt;<pos:position pos:line="13" pos:column="31"/></operator><name pos:line="13" pos:column="28">second<pos:position pos:line="13" pos:column="34"/></name><operator pos:line="13" pos:column="34">.<pos:position pos:line="13" pos:column="35"/></operator><name pos:line="13" pos:column="35">data<pos:position pos:line="13" pos:column="39"/></name></name><argument_list pos:line="13" pos:column="39">()<pos:position pos:line="13" pos:column="41"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="13" pos:column="43">i<pos:position pos:line="13" pos:column="44"/></name><operator pos:line="13" pos:column="44">-&gt;<pos:position pos:line="13" pos:column="49"/></operator><name pos:line="13" pos:column="46">second<pos:position pos:line="13" pos:column="52"/></name><operator pos:line="13" pos:column="52">.<pos:position pos:line="13" pos:column="53"/></operator><name pos:line="13" pos:column="53">size<pos:position pos:line="13" pos:column="57"/></name></name><argument_list pos:line="13" pos:column="57">()<pos:position pos:line="13" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="61"/></return></block></then></if>
    }<pos:position pos:line="14" pos:column="6"/></block></for>

    <return pos:line="16" pos:column="5">return <expr><call><name pos:line="16" pos:column="12">Area<pos:position pos:line="16" pos:column="16"/></name><argument_list pos:line="16" pos:column="16">()<pos:position pos:line="16" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="19"/></return>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
