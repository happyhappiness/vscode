<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5328_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">esiStreamDetach<pos:position pos:line="2" pos:column="16"/></name> <parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><name pos:line="2" pos:column="18">clientStreamNode<pos:position pos:line="2" pos:column="34"/></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="36">thisNode<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="46">ClientHttpRequest<pos:position pos:line="2" pos:column="63"/></name> <modifier pos:line="2" pos:column="64">*<pos:position pos:line="2" pos:column="65"/></modifier></type><name pos:line="2" pos:column="65">http<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="70"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/* if we have pending callbacks, tell them we're done. */</comment>
    <comment type="block" pos:line="5" pos:column="5">/* test preconditions */</comment>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name> <argument_list pos:line="6" pos:column="12">(<argument><expr><name pos:line="6" pos:column="13">thisNode<pos:position pos:line="6" pos:column="21"/></name> <operator pos:line="6" pos:column="22">!=<pos:position pos:line="6" pos:column="24"/></operator> <name pos:line="6" pos:column="25">NULL<pos:position pos:line="6" pos:column="29"/></name></expr></argument>)<pos:position pos:line="6" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name> <argument_list pos:line="7" pos:column="12">(<argument><expr><call><name pos:line="7" pos:column="13">cbdataReferenceValid<pos:position pos:line="7" pos:column="33"/></name> <argument_list pos:line="7" pos:column="34">(<argument><expr><name pos:line="7" pos:column="35">thisNode<pos:position pos:line="7" pos:column="43"/></name></expr></argument>)<pos:position pos:line="7" pos:column="44"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="46"/></expr_stmt>
    <decl_stmt><decl><type><name><name pos:line="8" pos:column="5">ESIContext<pos:position pos:line="8" pos:column="15"/></name><operator pos:line="8" pos:column="15">::<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="17">Pointer<pos:position pos:line="8" pos:column="24"/></name></name></type> <name pos:line="8" pos:column="25">context<pos:position pos:line="8" pos:column="32"/></name> <init pos:line="8" pos:column="33">= <expr><cast type="dynamic" pos:line="8" pos:column="35">dynamic_cast<argument_list type="generic" pos:line="8" pos:column="47">&lt;<argument><expr><name pos:line="8" pos:column="48">ESIContext<pos:position pos:line="8" pos:column="58"/></name> <operator pos:line="8" pos:column="59">*<pos:position pos:line="8" pos:column="60"/></operator></expr></argument>&gt;<pos:position pos:line="8" pos:column="64"/></argument_list><argument_list pos:line="8" pos:column="61">(<argument><expr><call><name><name pos:line="8" pos:column="62">thisNode<pos:position pos:line="8" pos:column="70"/></name><operator pos:line="8" pos:column="70">-&gt;<pos:position pos:line="8" pos:column="75"/></operator><name pos:line="8" pos:column="72">data<pos:position pos:line="8" pos:column="76"/></name><operator pos:line="8" pos:column="76">.<pos:position pos:line="8" pos:column="77"/></operator><name pos:line="8" pos:column="77">getRaw<pos:position pos:line="8" pos:column="83"/></name></name><argument_list pos:line="8" pos:column="83">()<pos:position pos:line="8" pos:column="85"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="86"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="8" pos:column="87"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">assert<pos:position pos:line="9" pos:column="11"/></name> <argument_list pos:line="9" pos:column="12">(<argument><expr><call><name><name pos:line="9" pos:column="13">context<pos:position pos:line="9" pos:column="20"/></name><operator pos:line="9" pos:column="20">.<pos:position pos:line="9" pos:column="21"/></operator><name pos:line="9" pos:column="21">getRaw<pos:position pos:line="9" pos:column="27"/></name></name><argument_list pos:line="9" pos:column="27">()<pos:position pos:line="9" pos:column="29"/></argument_list></call> <operator pos:line="9" pos:column="30">!=<pos:position pos:line="9" pos:column="32"/></operator> <name pos:line="9" pos:column="33">NULL<pos:position pos:line="9" pos:column="37"/></name></expr></argument>)<pos:position pos:line="9" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="39"/></expr_stmt>
    <comment type="block" pos:line="10" pos:column="5">/* detach from the stream */</comment>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">clientStreamDetach<pos:position pos:line="11" pos:column="23"/></name> <argument_list pos:line="11" pos:column="24">(<argument><expr><name pos:line="11" pos:column="25">thisNode<pos:position pos:line="11" pos:column="33"/></name></expr></argument>,<argument><expr><name pos:line="11" pos:column="34">http<pos:position pos:line="11" pos:column="38"/></name></expr></argument>)<pos:position pos:line="11" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="40"/></expr_stmt>
    <comment type="block" pos:line="12" pos:column="5">/* if we have pending callbacks (from subincludes), tell them we're done. */</comment>
    <expr_stmt><expr><name><name pos:line="13" pos:column="5">context<pos:position pos:line="13" pos:column="12"/></name><operator pos:line="13" pos:column="12">-&gt;<pos:position pos:line="13" pos:column="17"/></operator><name pos:line="13" pos:column="14">thisNode<pos:position pos:line="13" pos:column="22"/></name></name> <operator pos:line="13" pos:column="23">=<pos:position pos:line="13" pos:column="24"/></operator> <name pos:line="13" pos:column="25">NULL<pos:position pos:line="13" pos:column="29"/></name></expr>;<pos:position pos:line="13" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="14" pos:column="5">context<pos:position pos:line="14" pos:column="12"/></name><operator pos:line="14" pos:column="12">-&gt;<pos:position pos:line="14" pos:column="17"/></operator><name pos:line="14" pos:column="14">flags<pos:position pos:line="14" pos:column="19"/></name><operator pos:line="14" pos:column="19">.<pos:position pos:line="14" pos:column="20"/></operator><name pos:line="14" pos:column="20">detached<pos:position pos:line="14" pos:column="28"/></name></name> <operator pos:line="14" pos:column="29">=<pos:position pos:line="14" pos:column="30"/></operator> <literal type="number" pos:line="14" pos:column="31">1<pos:position pos:line="14" pos:column="32"/></literal></expr>;<pos:position pos:line="14" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="15" pos:column="5">context<pos:position pos:line="15" pos:column="12"/></name><operator pos:line="15" pos:column="12">-&gt;<pos:position pos:line="15" pos:column="17"/></operator><name pos:line="15" pos:column="14">finishChildren<pos:position pos:line="15" pos:column="28"/></name></name><argument_list pos:line="15" pos:column="28">()<pos:position pos:line="15" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="31"/></expr_stmt>
    <comment type="block" pos:line="16" pos:column="5">/* HACK for parser stack not being emptied */</comment>
    <expr_stmt><expr><name><name pos:line="17" pos:column="5">context<pos:position pos:line="17" pos:column="12"/></name><operator pos:line="17" pos:column="12">-&gt;<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="14">parserState<pos:position pos:line="17" pos:column="25"/></name><operator pos:line="17" pos:column="25">.<pos:position pos:line="17" pos:column="26"/></operator><name pos:line="17" pos:column="26">stack<pos:position pos:line="17" pos:column="31"/></name><index pos:line="17" pos:column="31">[<expr><literal type="number" pos:line="17" pos:column="32">0<pos:position pos:line="17" pos:column="33"/></literal></expr>]<pos:position pos:line="17" pos:column="34"/></index></name> <operator pos:line="17" pos:column="35">=<pos:position pos:line="17" pos:column="36"/></operator> <name pos:line="17" pos:column="37">NULL<pos:position pos:line="17" pos:column="41"/></name></expr>;<pos:position pos:line="17" pos:column="42"/></expr_stmt>
    <comment type="block" pos:line="18" pos:column="5">/* allow refcount logic to trigger */</comment>
    <expr_stmt><expr><name><name pos:line="19" pos:column="5">context<pos:position pos:line="19" pos:column="12"/></name><operator pos:line="19" pos:column="12">-&gt;<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="14">cbdataLocker<pos:position pos:line="19" pos:column="26"/></name></name> <operator pos:line="19" pos:column="27">=<pos:position pos:line="19" pos:column="28"/></operator> <name pos:line="19" pos:column="29">NULL<pos:position pos:line="19" pos:column="33"/></name></expr>;<pos:position pos:line="19" pos:column="34"/></expr_stmt>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
