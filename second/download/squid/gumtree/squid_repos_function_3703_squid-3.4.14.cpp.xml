<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3703_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">MemBuf<pos:position pos:line="1" pos:column="12"/></name><operator pos:line="1" pos:column="12">::<pos:position pos:line="1" pos:column="14"/></operator><name pos:line="1" pos:column="14">truncate<pos:position pos:line="1" pos:column="22"/></name></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">mb_size_t<pos:position pos:line="1" pos:column="32"/></name></type> <name pos:line="1" pos:column="33">tailSize<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="42"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="3" pos:column="5">const<pos:position pos:line="3" pos:column="10"/></specifier> <name pos:line="3" pos:column="11">mb_size_t<pos:position pos:line="3" pos:column="20"/></name></type> <name pos:line="3" pos:column="21">cSize<pos:position pos:line="3" pos:column="26"/></name> <init pos:line="3" pos:column="27">= <expr><call><name pos:line="3" pos:column="29">contentSize<pos:position pos:line="3" pos:column="40"/></name><argument_list pos:line="3" pos:column="40">()<pos:position pos:line="3" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="43"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">0<pos:position pos:line="4" pos:column="13"/></literal> <operator pos:line="4" pos:column="14">&lt;=<pos:position pos:line="4" pos:column="19"/></operator> <name pos:line="4" pos:column="17">tailSize<pos:position pos:line="4" pos:column="25"/></name> <operator pos:line="4" pos:column="26">&amp;&amp;<pos:position pos:line="4" pos:column="36"/></operator> <name pos:line="4" pos:column="29">tailSize<pos:position pos:line="4" pos:column="37"/></name> <operator pos:line="4" pos:column="38">&lt;=<pos:position pos:line="4" pos:column="43"/></operator> <name pos:line="4" pos:column="41">cSize<pos:position pos:line="4" pos:column="46"/></name></expr></argument>)<pos:position pos:line="4" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><operator pos:line="5" pos:column="12">!<pos:position pos:line="5" pos:column="13"/></operator><name pos:line="5" pos:column="13">stolen<pos:position pos:line="5" pos:column="19"/></name></expr></argument>)<pos:position pos:line="5" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="21"/></expr_stmt> <comment type="block" pos:line="5" pos:column="22">/* not frozen */</comment>
    <expr_stmt><expr><name pos:line="6" pos:column="5">size<pos:position pos:line="6" pos:column="9"/></name> <operator pos:line="6" pos:column="10">-=<pos:position pos:line="6" pos:column="12"/></operator> <name pos:line="6" pos:column="13">tailSize<pos:position pos:line="6" pos:column="21"/></name></expr>;<pos:position pos:line="6" pos:column="22"/></expr_stmt>
}<pos:position pos:line="7" pos:column="2"/></block></function></unit>
