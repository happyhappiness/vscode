<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4520_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">ACLIP<pos:position pos:line="2" pos:column="6"/></name><operator pos:line="2" pos:column="6">::<pos:position pos:line="2" pos:column="8"/></operator><name pos:line="2" pos:column="8">match<pos:position pos:line="2" pos:column="13"/></name></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><name><name pos:line="2" pos:column="14">Ip<pos:position pos:line="2" pos:column="16"/></name><operator pos:line="2" pos:column="16">::<pos:position pos:line="2" pos:column="18"/></operator><name pos:line="2" pos:column="18">Address<pos:position pos:line="2" pos:column="25"/></name></name> <modifier pos:line="2" pos:column="26">&amp;<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="27">clientip<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="36"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><specifier pos:line="4" pos:column="5">static<pos:position pos:line="4" pos:column="11"/></specifier> <type><name pos:line="4" pos:column="12">acl_ip_data<pos:position pos:line="4" pos:column="23"/></name></type> <name pos:line="4" pos:column="24">ClientAddress<pos:position pos:line="4" pos:column="37"/></name></decl>;<pos:position pos:line="4" pos:column="38"/></decl_stmt>
    <comment type="block" pos:line="5" pos:column="5">/*
     * aclIpAddrNetworkCompare() takes two acl_ip_data pointers as
     * arguments, so we must create a fake one for the client's IP
     * address. Since we are scanning for a single IP mask and addr2
     * MUST be set to empty.
     */</comment>
    <expr_stmt><expr><name><name pos:line="11" pos:column="5">ClientAddress<pos:position pos:line="11" pos:column="18"/></name><operator pos:line="11" pos:column="18">.<pos:position pos:line="11" pos:column="19"/></operator><name pos:line="11" pos:column="19">addr1<pos:position pos:line="11" pos:column="24"/></name></name> <operator pos:line="11" pos:column="25">=<pos:position pos:line="11" pos:column="26"/></operator> <name pos:line="11" pos:column="27">clientip<pos:position pos:line="11" pos:column="35"/></name></expr>;<pos:position pos:line="11" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="12" pos:column="5">ClientAddress<pos:position pos:line="12" pos:column="18"/></name><operator pos:line="12" pos:column="18">.<pos:position pos:line="12" pos:column="19"/></operator><name pos:line="12" pos:column="19">addr2<pos:position pos:line="12" pos:column="24"/></name><operator pos:line="12" pos:column="24">.<pos:position pos:line="12" pos:column="25"/></operator><name pos:line="12" pos:column="25">SetEmpty<pos:position pos:line="12" pos:column="33"/></name></name><argument_list pos:line="12" pos:column="33">()<pos:position pos:line="12" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="13" pos:column="5">ClientAddress<pos:position pos:line="13" pos:column="18"/></name><operator pos:line="13" pos:column="18">.<pos:position pos:line="13" pos:column="19"/></operator><name pos:line="13" pos:column="19">mask<pos:position pos:line="13" pos:column="23"/></name><operator pos:line="13" pos:column="23">.<pos:position pos:line="13" pos:column="24"/></operator><name pos:line="13" pos:column="24">SetEmpty<pos:position pos:line="13" pos:column="32"/></name></name><argument_list pos:line="13" pos:column="32">()<pos:position pos:line="13" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="35"/></expr_stmt>

    <expr_stmt><expr><name pos:line="15" pos:column="5">data<pos:position pos:line="15" pos:column="9"/></name> <operator pos:line="15" pos:column="10">=<pos:position pos:line="15" pos:column="11"/></operator> <call><name><name pos:line="15" pos:column="12">data<pos:position pos:line="15" pos:column="16"/></name><operator pos:line="15" pos:column="16">-&gt;<pos:position pos:line="15" pos:column="21"/></operator><name pos:line="15" pos:column="18">splay<pos:position pos:line="15" pos:column="23"/></name></name><argument_list pos:line="15" pos:column="23">(<argument><expr><operator pos:line="15" pos:column="24">&amp;<pos:position pos:line="15" pos:column="29"/></operator><name pos:line="15" pos:column="25">ClientAddress<pos:position pos:line="15" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="40">aclIpAddrNetworkCompare<pos:position pos:line="15" pos:column="63"/></name></expr></argument>)<pos:position pos:line="15" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="65"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">debugs<pos:position pos:line="16" pos:column="11"/></name><argument_list pos:line="16" pos:column="11">(<argument><expr><literal type="number" pos:line="16" pos:column="12">28<pos:position pos:line="16" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="16">3<pos:position pos:line="16" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="19">"aclIpMatchIp: '"<pos:position pos:line="16" pos:column="36"/></literal> <operator pos:line="16" pos:column="37">&lt;&lt;<pos:position pos:line="16" pos:column="45"/></operator> <name pos:line="16" pos:column="40">clientip<pos:position pos:line="16" pos:column="48"/></name> <operator pos:line="16" pos:column="49">&lt;&lt;<pos:position pos:line="16" pos:column="57"/></operator> <literal type="string" pos:line="16" pos:column="52">"' "<pos:position pos:line="16" pos:column="56"/></literal> <operator pos:line="16" pos:column="57">&lt;&lt;<pos:position pos:line="16" pos:column="65"/></operator> <operator pos:line="16" pos:column="60">(<pos:position pos:line="16" pos:column="61"/></operator><ternary><condition><expr><name pos:line="16" pos:column="61">splayLastResult<pos:position pos:line="16" pos:column="76"/></name></expr> ?<pos:position pos:line="16" pos:column="78"/></condition><then pos:line="16" pos:column="78"> <expr><literal type="string" pos:line="16" pos:column="79">"NOT found"<pos:position pos:line="16" pos:column="90"/></literal></expr> <pos:position pos:line="16" pos:column="91"/></then><else pos:line="16" pos:column="91">: <expr><literal type="string" pos:line="16" pos:column="93">"found"<pos:position pos:line="16" pos:column="100"/></literal></expr></else></ternary><operator pos:line="16" pos:column="100">)<pos:position pos:line="16" pos:column="101"/></operator></expr></argument>)<pos:position pos:line="16" pos:column="102"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="103"/></expr_stmt>
    <return pos:line="17" pos:column="5">return <expr><operator pos:line="17" pos:column="12">!<pos:position pos:line="17" pos:column="13"/></operator><name pos:line="17" pos:column="13">splayLastResult<pos:position pos:line="17" pos:column="28"/></name></expr>;<pos:position pos:line="17" pos:column="29"/></return>
}<pos:position pos:line="18" pos:column="2"/></block></function></unit>
