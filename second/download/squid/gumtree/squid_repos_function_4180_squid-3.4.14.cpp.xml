<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4180_squid-3.4.14.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">Comm<pos:position pos:line="1" pos:column="5"/></name><operator pos:line="1" pos:column="5">::<pos:position pos:line="1" pos:column="7"/></operator><name pos:line="1" pos:column="7">ConnectionPointer<pos:position pos:line="1" pos:column="24"/></name></name></type>
<name><name pos:line="2" pos:column="1">Adaptation<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">Icap<pos:position pos:line="2" pos:column="17"/></name><operator pos:line="2" pos:column="17">::<pos:position pos:line="2" pos:column="19"/></operator><name pos:line="2" pos:column="19">ServiceRep<pos:position pos:line="2" pos:column="29"/></name><operator pos:line="2" pos:column="29">::<pos:position pos:line="2" pos:column="31"/></operator><name pos:line="2" pos:column="31">getConnection<pos:position pos:line="2" pos:column="44"/></name></name><parameter_list pos:line="2" pos:column="44">(<parameter><decl><type><name pos:line="2" pos:column="45">bool<pos:position pos:line="2" pos:column="49"/></name></type> <name pos:line="2" pos:column="50">retriableXact<pos:position pos:line="2" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="65">bool<pos:position pos:line="2" pos:column="69"/></name> <modifier pos:line="2" pos:column="70">&amp;<pos:position pos:line="2" pos:column="75"/></modifier></type><name pos:line="2" pos:column="71">reused<pos:position pos:line="2" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="78"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">Comm<pos:position pos:line="4" pos:column="9"/></name><operator pos:line="4" pos:column="9">::<pos:position pos:line="4" pos:column="11"/></operator><name pos:line="4" pos:column="11">ConnectionPointer<pos:position pos:line="4" pos:column="28"/></name></name></type> <name pos:line="4" pos:column="29">connection<pos:position pos:line="4" pos:column="39"/></name></decl>;<pos:position pos:line="4" pos:column="40"/></decl_stmt>

    <comment type="block" pos:line="6" pos:column="5">/* 2011-06-17: rousskov:
     *  There are two things that happen at the same time in pop(). Both are important.
     *    1) Ensure that we can use a pconn for this transaction.
     *    2) Ensure that the number of idle pconns does not grow without bounds.
     *
     * Both happen in the beginning of the transaction. Both are dictated by real-world problems.
     * retriable means you can repeat the request if you suspect the first try failed due to a pconn race.
     * HTTP and ICAP rules prohibit the use of pconns for non-retriable requests.
     *
     * If there are zero idle connections, (2) is irrelevant. (2) is only relevant when there are many
     * idle connections and we should not open more connections without closing some idle ones,
     * or instead of just opening a new connection and leaving idle connections as is.
     * In other words, (2) tells us to close one FD for each new one we open due to retriable.
     */</comment>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">retriableXact<pos:position pos:line="20" pos:column="22"/></name></expr>)<pos:position pos:line="20" pos:column="23"/></condition><then pos:line="20" pos:column="23">
        <block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="9">connection<pos:position pos:line="21" pos:column="19"/></name> <operator pos:line="21" pos:column="20">=<pos:position pos:line="21" pos:column="21"/></operator> <call><name><name pos:line="21" pos:column="22">theIdleConns<pos:position pos:line="21" pos:column="34"/></name><operator pos:line="21" pos:column="34">-&gt;<pos:position pos:line="21" pos:column="39"/></operator><name pos:line="21" pos:column="36">pop<pos:position pos:line="21" pos:column="39"/></name></name><argument_list pos:line="21" pos:column="39">()<pos:position pos:line="21" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="42"/></expr_stmt></block></then>
    <else pos:line="22" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="23" pos:column="9">theIdleConns<pos:position pos:line="23" pos:column="21"/></name><operator pos:line="23" pos:column="21">-&gt;<pos:position pos:line="23" pos:column="26"/></operator><name pos:line="23" pos:column="23">closeN<pos:position pos:line="23" pos:column="29"/></name></name><argument_list pos:line="23" pos:column="29">(<argument><expr><literal type="number" pos:line="23" pos:column="30">1<pos:position pos:line="23" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="33"/></expr_stmt></block></else></if>

    <expr_stmt><expr><name pos:line="25" pos:column="5">reused<pos:position pos:line="25" pos:column="11"/></name> <operator pos:line="25" pos:column="12">=<pos:position pos:line="25" pos:column="13"/></operator> <call><name><name pos:line="25" pos:column="14">Comm<pos:position pos:line="25" pos:column="18"/></name><operator pos:line="25" pos:column="18">::<pos:position pos:line="25" pos:column="20"/></operator><name pos:line="25" pos:column="20">IsConnOpen<pos:position pos:line="25" pos:column="30"/></name></name><argument_list pos:line="25" pos:column="30">(<argument><expr><name pos:line="25" pos:column="31">connection<pos:position pos:line="25" pos:column="41"/></name></expr></argument>)<pos:position pos:line="25" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="26" pos:column="5">++<pos:position pos:line="26" pos:column="7"/></operator><name pos:line="26" pos:column="7">theBusyConns<pos:position pos:line="26" pos:column="19"/></name></expr>;<pos:position pos:line="26" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">debugs<pos:position pos:line="27" pos:column="11"/></name><argument_list pos:line="27" pos:column="11">(<argument><expr><literal type="number" pos:line="27" pos:column="12">93<pos:position pos:line="27" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="27" pos:column="15">3<pos:position pos:line="27" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="18">HERE<pos:position pos:line="27" pos:column="22"/></name> <operator pos:line="27" pos:column="23">&lt;&lt;<pos:position pos:line="27" pos:column="31"/></operator> <literal type="string" pos:line="27" pos:column="26">"got connection: "<pos:position pos:line="27" pos:column="44"/></literal> <operator pos:line="27" pos:column="45">&lt;&lt;<pos:position pos:line="27" pos:column="53"/></operator> <name pos:line="27" pos:column="48">connection<pos:position pos:line="27" pos:column="58"/></name></expr></argument>)<pos:position pos:line="27" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="60"/></expr_stmt>
    <return pos:line="28" pos:column="5">return <expr><name pos:line="28" pos:column="12">connection<pos:position pos:line="28" pos:column="22"/></name></expr>;<pos:position pos:line="28" pos:column="23"/></return>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
