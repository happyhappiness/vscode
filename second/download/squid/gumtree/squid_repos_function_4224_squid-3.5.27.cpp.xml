<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4224_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Icap<pos:position pos:line="1" pos:column="22"/></name><operator pos:line="1" pos:column="22">::<pos:position pos:line="1" pos:column="24"/></operator><name pos:line="1" pos:column="24">Xaction<pos:position pos:line="1" pos:column="31"/></name><operator pos:line="1" pos:column="31">::<pos:position pos:line="1" pos:column="33"/></operator><name pos:line="1" pos:column="33">noteCommWrote<pos:position pos:line="1" pos:column="46"/></name></name><parameter_list pos:line="1" pos:column="46">(<parameter><decl><type><specifier pos:line="1" pos:column="47">const<pos:position pos:line="1" pos:column="52"/></specifier> <name pos:line="1" pos:column="53">CommIoCbParams<pos:position pos:line="1" pos:column="67"/></name> <modifier pos:line="1" pos:column="68">&amp;<pos:position pos:line="1" pos:column="73"/></modifier></type><name pos:line="1" pos:column="69">io<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="72"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="3" pos:column="5">Must<pos:position pos:line="3" pos:column="9"/></name><argument_list pos:line="3" pos:column="9">(<argument><expr><name pos:line="3" pos:column="10">writer<pos:position pos:line="3" pos:column="16"/></name> <operator pos:line="3" pos:column="17">!=<pos:position pos:line="3" pos:column="19"/></operator> <name pos:line="3" pos:column="20">NULL<pos:position pos:line="3" pos:column="24"/></name></expr></argument>)<pos:position pos:line="3" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="4" pos:column="5">writer<pos:position pos:line="4" pos:column="11"/></name> <operator pos:line="4" pos:column="12">=<pos:position pos:line="4" pos:column="13"/></operator> <name pos:line="4" pos:column="14">NULL<pos:position pos:line="4" pos:column="18"/></name></expr>;<pos:position pos:line="4" pos:column="19"/></expr_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">ignoreLastWrite<pos:position pos:line="6" pos:column="24"/></name></expr>)<pos:position pos:line="6" pos:column="25"/></condition><then pos:line="6" pos:column="25"> <block pos:line="6" pos:column="26">{
        <comment type="line" pos:line="7" pos:column="9">// a hack due to comm inability to cancel a pending write</comment>
        <expr_stmt><expr><name pos:line="8" pos:column="9">ignoreLastWrite<pos:position pos:line="8" pos:column="24"/></name> <operator pos:line="8" pos:column="25">=<pos:position pos:line="8" pos:column="26"/></operator> <literal type="boolean" pos:line="8" pos:column="27">false<pos:position pos:line="8" pos:column="32"/></literal></expr>;<pos:position pos:line="8" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">debugs<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><literal type="number" pos:line="9" pos:column="16">93<pos:position pos:line="9" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="20">7<pos:position pos:line="9" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="23">HERE<pos:position pos:line="9" pos:column="27"/></name> <operator pos:line="9" pos:column="28">&lt;&lt;<pos:position pos:line="9" pos:column="36"/></operator> <literal type="string" pos:line="9" pos:column="31">"ignoring last write; status: "<pos:position pos:line="9" pos:column="62"/></literal> <operator pos:line="9" pos:column="63">&lt;&lt;<pos:position pos:line="9" pos:column="71"/></operator> <name><name pos:line="9" pos:column="66">io<pos:position pos:line="9" pos:column="68"/></name><operator pos:line="9" pos:column="68">.<pos:position pos:line="9" pos:column="69"/></operator><name pos:line="9" pos:column="69">flag<pos:position pos:line="9" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="75"/></expr_stmt>
    }<pos:position pos:line="10" pos:column="6"/></block></then> <else pos:line="10" pos:column="7">else <block pos:line="10" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">Must<pos:position pos:line="11" pos:column="13"/></name><argument_list pos:line="11" pos:column="13">(<argument><expr><name><name pos:line="11" pos:column="14">io<pos:position pos:line="11" pos:column="16"/></name><operator pos:line="11" pos:column="16">.<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="17">flag<pos:position pos:line="11" pos:column="21"/></name></name> <operator pos:line="11" pos:column="22">==<pos:position pos:line="11" pos:column="24"/></operator> <name><name pos:line="11" pos:column="25">Comm<pos:position pos:line="11" pos:column="29"/></name><operator pos:line="11" pos:column="29">::<pos:position pos:line="11" pos:column="31"/></operator><name pos:line="11" pos:column="31">OK<pos:position pos:line="11" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="12" pos:column="9">al<pos:position pos:line="12" pos:column="11"/></name><operator pos:line="12" pos:column="11">.<pos:position pos:line="12" pos:column="12"/></operator><name pos:line="12" pos:column="12">icap<pos:position pos:line="12" pos:column="16"/></name><operator pos:line="12" pos:column="16">.<pos:position pos:line="12" pos:column="17"/></operator><name pos:line="12" pos:column="17">bytesSent<pos:position pos:line="12" pos:column="26"/></name></name> <operator pos:line="12" pos:column="27">+=<pos:position pos:line="12" pos:column="29"/></operator> <name><name pos:line="12" pos:column="30">io<pos:position pos:line="12" pos:column="32"/></name><operator pos:line="12" pos:column="32">.<pos:position pos:line="12" pos:column="33"/></operator><name pos:line="12" pos:column="33">size<pos:position pos:line="12" pos:column="37"/></name></name></expr>;<pos:position pos:line="12" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">updateTimeout<pos:position pos:line="13" pos:column="22"/></name><argument_list pos:line="13" pos:column="22">()<pos:position pos:line="13" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">handleCommWrote<pos:position pos:line="14" pos:column="24"/></name><argument_list pos:line="14" pos:column="24">(<argument><expr><name><name pos:line="14" pos:column="25">io<pos:position pos:line="14" pos:column="27"/></name><operator pos:line="14" pos:column="27">.<pos:position pos:line="14" pos:column="28"/></operator><name pos:line="14" pos:column="28">size<pos:position pos:line="14" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></else></if>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
