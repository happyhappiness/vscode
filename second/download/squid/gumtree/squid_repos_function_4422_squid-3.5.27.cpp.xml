<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4422_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ssl<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">Bio<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">sslFeatures<pos:position pos:line="2" pos:column="22"/></name><operator pos:line="2" pos:column="22">::<pos:position pos:line="2" pos:column="24"/></operator><name pos:line="2" pos:column="24">parseV3ServerHello<pos:position pos:line="2" pos:column="42"/></name></name><parameter_list pos:line="2" pos:column="42">(<parameter><decl><type><specifier pos:line="2" pos:column="43">const<pos:position pos:line="2" pos:column="48"/></specifier> <name pos:line="2" pos:column="49">unsigned<pos:position pos:line="2" pos:column="57"/></name> <name pos:line="2" pos:column="58">char<pos:position pos:line="2" pos:column="62"/></name> <modifier pos:line="2" pos:column="63">*<pos:position pos:line="2" pos:column="64"/></modifier></type><name pos:line="2" pos:column="64">messageContainer<pos:position pos:line="2" pos:column="80"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="82">size_t<pos:position pos:line="2" pos:column="88"/></name></type> <name pos:line="2" pos:column="89">messageContainerSize<pos:position pos:line="2" pos:column="109"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="110"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// Parse a ServerHello Handshake message</comment>
    <comment type="line" pos:line="5" pos:column="5">// RFC5246 section 7.4, 7.4.1.3</comment>
    <comment type="line" pos:line="6" pos:column="5">// The ServerHello starts at messageContainer + 5</comment>
    <decl_stmt><decl><type><specifier pos:line="7" pos:column="5">const<pos:position pos:line="7" pos:column="10"/></specifier> <name pos:line="7" pos:column="11">unsigned<pos:position pos:line="7" pos:column="19"/></name> <name pos:line="7" pos:column="20">char<pos:position pos:line="7" pos:column="24"/></name> <modifier pos:line="7" pos:column="25">*<pos:position pos:line="7" pos:column="26"/></modifier></type><name pos:line="7" pos:column="26">serverHello<pos:position pos:line="7" pos:column="37"/></name> <init pos:line="7" pos:column="38">= <expr><name pos:line="7" pos:column="40">messageContainer<pos:position pos:line="7" pos:column="56"/></name> <operator pos:line="7" pos:column="57">+<pos:position pos:line="7" pos:column="58"/></operator> <literal type="number" pos:line="7" pos:column="59">5<pos:position pos:line="7" pos:column="60"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="61"/></decl_stmt>

    <comment type="line" pos:line="9" pos:column="5">// The Length field (bytes 1-3) plus 4 bytes of the serverHello message header (1 handshake type + 3 hello length)</comment>
    <decl_stmt><decl><type><specifier pos:line="10" pos:column="5">const<pos:position pos:line="10" pos:column="10"/></specifier> <name pos:line="10" pos:column="11">size_t<pos:position pos:line="10" pos:column="17"/></name></type> <name pos:line="10" pos:column="18">helloSize<pos:position pos:line="10" pos:column="27"/></name> <init pos:line="10" pos:column="28">= <expr><operator pos:line="10" pos:column="30">(<pos:position pos:line="10" pos:column="31"/></operator><operator pos:line="10" pos:column="31">(<pos:position pos:line="10" pos:column="32"/></operator><name><name pos:line="10" pos:column="32">serverHello<pos:position pos:line="10" pos:column="43"/></name><index pos:line="10" pos:column="43">[<expr><literal type="number" pos:line="10" pos:column="44">1<pos:position pos:line="10" pos:column="45"/></literal></expr>]<pos:position pos:line="10" pos:column="46"/></index></name> <operator pos:line="10" pos:column="47">&lt;&lt;<pos:position pos:line="10" pos:column="55"/></operator> <literal type="number" pos:line="10" pos:column="50">16<pos:position pos:line="10" pos:column="52"/></literal><operator pos:line="10" pos:column="52">)<pos:position pos:line="10" pos:column="53"/></operator> <operator pos:line="10" pos:column="54">|<pos:position pos:line="10" pos:column="55"/></operator> <operator pos:line="10" pos:column="56">(<pos:position pos:line="10" pos:column="57"/></operator><name><name pos:line="10" pos:column="57">serverHello<pos:position pos:line="10" pos:column="68"/></name><index pos:line="10" pos:column="68">[<expr><literal type="number" pos:line="10" pos:column="69">2<pos:position pos:line="10" pos:column="70"/></literal></expr>]<pos:position pos:line="10" pos:column="71"/></index></name> <operator pos:line="10" pos:column="72">&lt;&lt;<pos:position pos:line="10" pos:column="80"/></operator> <literal type="number" pos:line="10" pos:column="75">8<pos:position pos:line="10" pos:column="76"/></literal><operator pos:line="10" pos:column="76">)<pos:position pos:line="10" pos:column="77"/></operator> <operator pos:line="10" pos:column="78">|<pos:position pos:line="10" pos:column="79"/></operator> <name><name pos:line="10" pos:column="80">serverHello<pos:position pos:line="10" pos:column="91"/></name><index pos:line="10" pos:column="91">[<expr><literal type="number" pos:line="10" pos:column="92">3<pos:position pos:line="10" pos:column="93"/></literal></expr>]<pos:position pos:line="10" pos:column="94"/></index></name><operator pos:line="10" pos:column="94">)<pos:position pos:line="10" pos:column="95"/></operator> <operator pos:line="10" pos:column="96">+<pos:position pos:line="10" pos:column="97"/></operator> <literal type="number" pos:line="10" pos:column="98">4<pos:position pos:line="10" pos:column="99"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="100"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">debugs<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><literal type="number" pos:line="11" pos:column="12">83<pos:position pos:line="11" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="16">7<pos:position pos:line="11" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="19">"ServerHello message size: "<pos:position pos:line="11" pos:column="47"/></literal> <operator pos:line="11" pos:column="48">&lt;&lt;<pos:position pos:line="11" pos:column="56"/></operator> <name pos:line="11" pos:column="51">helloSize<pos:position pos:line="11" pos:column="60"/></name></expr></argument>)<pos:position pos:line="11" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="62"/></expr_stmt>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">helloSize<pos:position pos:line="12" pos:column="18"/></name> <operator pos:line="12" pos:column="19">&gt;<pos:position pos:line="12" pos:column="23"/></operator> <name pos:line="12" pos:column="21">messageContainerSize<pos:position pos:line="12" pos:column="41"/></name></expr>)<pos:position pos:line="12" pos:column="42"/></condition><then pos:line="12" pos:column="42"> <block pos:line="12" pos:column="43">{
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">debugs<pos:position pos:line="13" pos:column="15"/></name><argument_list pos:line="13" pos:column="15">(<argument><expr><literal type="number" pos:line="13" pos:column="16">83<pos:position pos:line="13" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="20">2<pos:position pos:line="13" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="23">"ServerHello parse error"<pos:position pos:line="13" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="50"/></expr_stmt>
        <return pos:line="14" pos:column="9">return <expr><literal type="boolean" pos:line="14" pos:column="16">false<pos:position pos:line="14" pos:column="21"/></literal></expr>;<pos:position pos:line="14" pos:column="22"/></return>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="17" pos:column="5">// helloSize should be at least 38 bytes long:</comment>
    <comment type="line" pos:line="18" pos:column="5">// (SSL Version + Random + SessionId Length + Cipher Suite + Compression Method)</comment>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name pos:line="19" pos:column="9">helloSize<pos:position pos:line="19" pos:column="18"/></name> <operator pos:line="19" pos:column="19">&lt;<pos:position pos:line="19" pos:column="23"/></operator> <literal type="number" pos:line="19" pos:column="21">38<pos:position pos:line="19" pos:column="23"/></literal></expr>)<pos:position pos:line="19" pos:column="24"/></condition><then pos:line="19" pos:column="24"> <block pos:line="19" pos:column="25">{
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">debugs<pos:position pos:line="20" pos:column="15"/></name><argument_list pos:line="20" pos:column="15">(<argument><expr><literal type="number" pos:line="20" pos:column="16">83<pos:position pos:line="20" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="20">2<pos:position pos:line="20" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="23">"Too short ServerHello message"<pos:position pos:line="20" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="56"/></expr_stmt>
        <return pos:line="21" pos:column="9">return <expr><literal type="boolean" pos:line="21" pos:column="16">false<pos:position pos:line="21" pos:column="21"/></literal></expr>;<pos:position pos:line="21" pos:column="22"/></return>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="24" pos:column="5">debugs<pos:position pos:line="24" pos:column="11"/></name><argument_list pos:line="24" pos:column="11">(<argument><expr><literal type="number" pos:line="24" pos:column="12">83<pos:position pos:line="24" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="16">7<pos:position pos:line="24" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="19">"Get fake features from v3 ServerHello message."<pos:position pos:line="24" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="69"/></expr_stmt>
    <comment type="line" pos:line="25" pos:column="5">// Get the correct version of the sub-hello message</comment>
    <expr_stmt><expr><name pos:line="26" pos:column="5">sslVersion<pos:position pos:line="26" pos:column="15"/></name> <operator pos:line="26" pos:column="16">=<pos:position pos:line="26" pos:column="17"/></operator> <operator pos:line="26" pos:column="18">(<pos:position pos:line="26" pos:column="19"/></operator><name><name pos:line="26" pos:column="19">serverHello<pos:position pos:line="26" pos:column="30"/></name><index pos:line="26" pos:column="30">[<expr><literal type="number" pos:line="26" pos:column="31">4<pos:position pos:line="26" pos:column="32"/></literal></expr>]<pos:position pos:line="26" pos:column="33"/></index></name> <operator pos:line="26" pos:column="34">&lt;&lt;<pos:position pos:line="26" pos:column="42"/></operator> <literal type="number" pos:line="26" pos:column="37">8<pos:position pos:line="26" pos:column="38"/></literal><operator pos:line="26" pos:column="38">)<pos:position pos:line="26" pos:column="39"/></operator> <operator pos:line="26" pos:column="40">|<pos:position pos:line="26" pos:column="41"/></operator> <name><name pos:line="26" pos:column="42">serverHello<pos:position pos:line="26" pos:column="53"/></name><index pos:line="26" pos:column="53">[<expr><literal type="number" pos:line="26" pos:column="54">5<pos:position pos:line="26" pos:column="55"/></literal></expr>]<pos:position pos:line="26" pos:column="56"/></index></name></expr>;<pos:position pos:line="26" pos:column="57"/></expr_stmt>
    <comment type="line" pos:line="27" pos:column="5">// At the position 38 (HelloHeader (6bytes) + SSL3_RANDOM_SIZE (32bytes))</comment>
    <decl_stmt><decl><type><specifier pos:line="28" pos:column="5">const<pos:position pos:line="28" pos:column="10"/></specifier> <name pos:line="28" pos:column="11">size_t<pos:position pos:line="28" pos:column="17"/></name></type> <name pos:line="28" pos:column="18">sessIdLen<pos:position pos:line="28" pos:column="27"/></name> <init pos:line="28" pos:column="28">= <expr><cast type="static" pos:line="28" pos:column="30">static_cast<argument_list type="generic" pos:line="28" pos:column="41">&lt;<argument><expr><name pos:line="28" pos:column="42">size_t<pos:position pos:line="28" pos:column="48"/></name></expr></argument>&gt;<pos:position pos:line="28" pos:column="52"/></argument_list><argument_list pos:line="28" pos:column="49">(<argument><expr><name><name pos:line="28" pos:column="50">serverHello<pos:position pos:line="28" pos:column="61"/></name><index pos:line="28" pos:column="61">[<expr><literal type="number" pos:line="28" pos:column="62">38<pos:position pos:line="28" pos:column="64"/></literal></expr>]<pos:position pos:line="28" pos:column="65"/></index></name></expr></argument>)<pos:position pos:line="28" pos:column="66"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="28" pos:column="67"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">debugs<pos:position pos:line="29" pos:column="11"/></name><argument_list pos:line="29" pos:column="11">(<argument><expr><literal type="number" pos:line="29" pos:column="12">83<pos:position pos:line="29" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="16">7<pos:position pos:line="29" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="19">"Session ID Length: "<pos:position pos:line="29" pos:column="40"/></literal> <operator pos:line="29" pos:column="41">&lt;&lt;<pos:position pos:line="29" pos:column="49"/></operator>  <name pos:line="29" pos:column="45">sessIdLen<pos:position pos:line="29" pos:column="54"/></name></expr></argument>)<pos:position pos:line="29" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="56"/></expr_stmt>

    <comment type="line" pos:line="31" pos:column="5">// The size should be enough to hold at least the following</comment>
    <comment type="line" pos:line="32" pos:column="5">// 4 (hello header)</comment>
    <comment type="line" pos:line="33" pos:column="5">// + 2 (SSL Version) + 32 (random) + 1 (sessionId length)</comment>
    <comment type="line" pos:line="34" pos:column="5">// + sessIdLength + 2 (cipher suite) + 1 (compression method)</comment>
    <comment type="line" pos:line="35" pos:column="5">// = 42 + sessIdLength</comment>
    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><literal type="number" pos:line="36" pos:column="9">42<pos:position pos:line="36" pos:column="11"/></literal> <operator pos:line="36" pos:column="12">+<pos:position pos:line="36" pos:column="13"/></operator> <name pos:line="36" pos:column="14">sessIdLen<pos:position pos:line="36" pos:column="23"/></name> <operator pos:line="36" pos:column="24">&gt;<pos:position pos:line="36" pos:column="28"/></operator> <name pos:line="36" pos:column="26">helloSize<pos:position pos:line="36" pos:column="35"/></name></expr>)<pos:position pos:line="36" pos:column="36"/></condition><then pos:line="36" pos:column="36"> <block pos:line="36" pos:column="37">{
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">debugs<pos:position pos:line="37" pos:column="15"/></name><argument_list pos:line="37" pos:column="15">(<argument><expr><literal type="number" pos:line="37" pos:column="16">83<pos:position pos:line="37" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="20">2<pos:position pos:line="37" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="23">"ciphers length parse error"<pos:position pos:line="37" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="53"/></expr_stmt>
        <return pos:line="38" pos:column="9">return <expr><literal type="boolean" pos:line="38" pos:column="16">false<pos:position pos:line="38" pos:column="21"/></literal></expr>;<pos:position pos:line="38" pos:column="22"/></return>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="41" pos:column="5">// The sessionID stored at 39 position, after sessionID length field</comment>
    <expr_stmt><expr><call><name><name pos:line="42" pos:column="5">sessionId<pos:position pos:line="42" pos:column="14"/></name><operator pos:line="42" pos:column="14">.<pos:position pos:line="42" pos:column="15"/></operator><name pos:line="42" pos:column="15">assign<pos:position pos:line="42" pos:column="21"/></name></name><argument_list pos:line="42" pos:column="21">(<argument><expr><cast type="reinterpret" pos:line="42" pos:column="22">reinterpret_cast<argument_list type="generic" pos:line="42" pos:column="38">&lt;<argument><expr><specifier pos:line="42" pos:column="39">const<pos:position pos:line="42" pos:column="44"/></specifier> <name pos:line="42" pos:column="45">char<pos:position pos:line="42" pos:column="49"/></name> <operator pos:line="42" pos:column="50">*<pos:position pos:line="42" pos:column="51"/></operator></expr></argument>&gt;<pos:position pos:line="42" pos:column="55"/></argument_list><argument_list pos:line="42" pos:column="52">(<argument><expr><name pos:line="42" pos:column="53">serverHello<pos:position pos:line="42" pos:column="64"/></name> <operator pos:line="42" pos:column="65">+<pos:position pos:line="42" pos:column="66"/></operator> <literal type="number" pos:line="42" pos:column="67">39<pos:position pos:line="42" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="70"/></argument_list></cast></expr></argument>, <argument><expr><name pos:line="42" pos:column="72">sessIdLen<pos:position pos:line="42" pos:column="81"/></name></expr></argument>)<pos:position pos:line="42" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="83"/></expr_stmt>

    <comment type="line" pos:line="44" pos:column="5">// Check if there are extensions in hello message</comment>
    <comment type="line" pos:line="45" pos:column="5">// RFC5246 section 7.4.1.4</comment>
    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><name pos:line="46" pos:column="9">helloSize<pos:position pos:line="46" pos:column="18"/></name> <operator pos:line="46" pos:column="19">&gt;<pos:position pos:line="46" pos:column="23"/></operator> <literal type="number" pos:line="46" pos:column="21">42<pos:position pos:line="46" pos:column="23"/></literal> <operator pos:line="46" pos:column="24">+<pos:position pos:line="46" pos:column="25"/></operator> <name pos:line="46" pos:column="26">sessIdLen<pos:position pos:line="46" pos:column="35"/></name> <operator pos:line="46" pos:column="36">+<pos:position pos:line="46" pos:column="37"/></operator> <literal type="number" pos:line="46" pos:column="38">2<pos:position pos:line="46" pos:column="39"/></literal></expr>)<pos:position pos:line="46" pos:column="40"/></condition><then pos:line="46" pos:column="40"> <block pos:line="46" pos:column="41">{
        <comment type="line" pos:line="47" pos:column="9">// 42 + sessIdLen</comment>
        <decl_stmt><decl><type><specifier pos:line="48" pos:column="9">const<pos:position pos:line="48" pos:column="14"/></specifier> <name pos:line="48" pos:column="15">unsigned<pos:position pos:line="48" pos:column="23"/></name> <name pos:line="48" pos:column="24">char<pos:position pos:line="48" pos:column="28"/></name> <modifier pos:line="48" pos:column="29">*<pos:position pos:line="48" pos:column="30"/></modifier></type><name pos:line="48" pos:column="30">pToExtensions<pos:position pos:line="48" pos:column="43"/></name> <init pos:line="48" pos:column="44">= <expr><name pos:line="48" pos:column="46">serverHello<pos:position pos:line="48" pos:column="57"/></name> <operator pos:line="48" pos:column="58">+<pos:position pos:line="48" pos:column="59"/></operator> <literal type="number" pos:line="48" pos:column="60">42<pos:position pos:line="48" pos:column="62"/></literal> <operator pos:line="48" pos:column="63">+<pos:position pos:line="48" pos:column="64"/></operator> <name pos:line="48" pos:column="65">sessIdLen<pos:position pos:line="48" pos:column="74"/></name></expr></init></decl>;<pos:position pos:line="48" pos:column="75"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="49" pos:column="9">const<pos:position pos:line="49" pos:column="14"/></specifier> <name pos:line="49" pos:column="15">size_t<pos:position pos:line="49" pos:column="21"/></name></type> <name pos:line="49" pos:column="22">extensionsLen<pos:position pos:line="49" pos:column="35"/></name> <init pos:line="49" pos:column="36">= <expr><operator pos:line="49" pos:column="38">(<pos:position pos:line="49" pos:column="39"/></operator><name><name pos:line="49" pos:column="39">pToExtensions<pos:position pos:line="49" pos:column="52"/></name><index pos:line="49" pos:column="52">[<expr><literal type="number" pos:line="49" pos:column="53">0<pos:position pos:line="49" pos:column="54"/></literal></expr>]<pos:position pos:line="49" pos:column="55"/></index></name> <operator pos:line="49" pos:column="56">&lt;&lt;<pos:position pos:line="49" pos:column="64"/></operator> <literal type="number" pos:line="49" pos:column="59">8<pos:position pos:line="49" pos:column="60"/></literal><operator pos:line="49" pos:column="60">)<pos:position pos:line="49" pos:column="61"/></operator> <operator pos:line="49" pos:column="62">|<pos:position pos:line="49" pos:column="63"/></operator> <name><name pos:line="49" pos:column="64">pToExtensions<pos:position pos:line="49" pos:column="77"/></name><index pos:line="49" pos:column="77">[<expr><literal type="number" pos:line="49" pos:column="78">1<pos:position pos:line="49" pos:column="79"/></literal></expr>]<pos:position pos:line="49" pos:column="80"/></index></name></expr></init></decl>;<pos:position pos:line="49" pos:column="81"/></decl_stmt>
        <comment type="line" pos:line="50" pos:column="9">// Check if the hello size can hold extensions</comment>
        <if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><literal type="number" pos:line="51" pos:column="13">42<pos:position pos:line="51" pos:column="15"/></literal> <operator pos:line="51" pos:column="16">+<pos:position pos:line="51" pos:column="17"/></operator> <literal type="number" pos:line="51" pos:column="18">2<pos:position pos:line="51" pos:column="19"/></literal> <operator pos:line="51" pos:column="20">+<pos:position pos:line="51" pos:column="21"/></operator> <name pos:line="51" pos:column="22">sessIdLen<pos:position pos:line="51" pos:column="31"/></name> <operator pos:line="51" pos:column="32">+<pos:position pos:line="51" pos:column="33"/></operator> <name pos:line="51" pos:column="34">extensionsLen<pos:position pos:line="51" pos:column="47"/></name> <operator pos:line="51" pos:column="48">&gt;<pos:position pos:line="51" pos:column="52"/></operator> <name pos:line="51" pos:column="50">helloSize<pos:position pos:line="51" pos:column="59"/></name></expr> )<pos:position pos:line="51" pos:column="61"/></condition><then pos:line="51" pos:column="61"> <block pos:line="51" pos:column="62">{
            <expr_stmt><expr><call><name pos:line="52" pos:column="13">debugs<pos:position pos:line="52" pos:column="19"/></name><argument_list pos:line="52" pos:column="19">(<argument><expr><literal type="number" pos:line="52" pos:column="20">83<pos:position pos:line="52" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="52" pos:column="24">2<pos:position pos:line="52" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="27">"Extensions length parse error"<pos:position pos:line="52" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="60"/></expr_stmt>
            <return pos:line="53" pos:column="13">return <expr><literal type="boolean" pos:line="53" pos:column="20">false<pos:position pos:line="53" pos:column="25"/></literal></expr>;<pos:position pos:line="53" pos:column="26"/></return>
        }<pos:position pos:line="54" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="56" pos:column="9">pToExtensions<pos:position pos:line="56" pos:column="22"/></name> <operator pos:line="56" pos:column="23">+=<pos:position pos:line="56" pos:column="25"/></operator> <literal type="number" pos:line="56" pos:column="26">2<pos:position pos:line="56" pos:column="27"/></literal></expr>;<pos:position pos:line="56" pos:column="28"/></expr_stmt>
        <decl_stmt><decl><type><specifier pos:line="57" pos:column="9">const<pos:position pos:line="57" pos:column="14"/></specifier> <name pos:line="57" pos:column="15">unsigned<pos:position pos:line="57" pos:column="23"/></name> <name pos:line="57" pos:column="24">char<pos:position pos:line="57" pos:column="28"/></name> <modifier pos:line="57" pos:column="29">*<pos:position pos:line="57" pos:column="30"/></modifier></type><name pos:line="57" pos:column="30">ext<pos:position pos:line="57" pos:column="33"/></name> <init pos:line="57" pos:column="34">= <expr><name pos:line="57" pos:column="36">pToExtensions<pos:position pos:line="57" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="57" pos:column="50"/></decl_stmt>
        <while pos:line="58" pos:column="9">while <condition pos:line="58" pos:column="15">(<expr><name pos:line="58" pos:column="16">ext<pos:position pos:line="58" pos:column="19"/></name> <operator pos:line="58" pos:column="20">+<pos:position pos:line="58" pos:column="21"/></operator> <literal type="number" pos:line="58" pos:column="22">4<pos:position pos:line="58" pos:column="23"/></literal> <operator pos:line="58" pos:column="24">&lt;=<pos:position pos:line="58" pos:column="29"/></operator> <name pos:line="58" pos:column="27">pToExtensions<pos:position pos:line="58" pos:column="40"/></name> <operator pos:line="58" pos:column="41">+<pos:position pos:line="58" pos:column="42"/></operator> <name pos:line="58" pos:column="43">extensionsLen<pos:position pos:line="58" pos:column="56"/></name></expr>)<pos:position pos:line="58" pos:column="57"/></condition> <block pos:line="58" pos:column="58">{
            <decl_stmt><decl><type><specifier pos:line="59" pos:column="13">const<pos:position pos:line="59" pos:column="18"/></specifier> <name pos:line="59" pos:column="19">size_t<pos:position pos:line="59" pos:column="25"/></name></type> <name pos:line="59" pos:column="26">extType<pos:position pos:line="59" pos:column="33"/></name> <init pos:line="59" pos:column="34">= <expr><operator pos:line="59" pos:column="36">(<pos:position pos:line="59" pos:column="37"/></operator><name><name pos:line="59" pos:column="37">ext<pos:position pos:line="59" pos:column="40"/></name><index pos:line="59" pos:column="40">[<expr><literal type="number" pos:line="59" pos:column="41">0<pos:position pos:line="59" pos:column="42"/></literal></expr>]<pos:position pos:line="59" pos:column="43"/></index></name> <operator pos:line="59" pos:column="44">&lt;&lt;<pos:position pos:line="59" pos:column="52"/></operator> <literal type="number" pos:line="59" pos:column="47">8<pos:position pos:line="59" pos:column="48"/></literal><operator pos:line="59" pos:column="48">)<pos:position pos:line="59" pos:column="49"/></operator> <operator pos:line="59" pos:column="50">|<pos:position pos:line="59" pos:column="51"/></operator> <name><name pos:line="59" pos:column="52">ext<pos:position pos:line="59" pos:column="55"/></name><index pos:line="59" pos:column="55">[<expr><literal type="number" pos:line="59" pos:column="56">1<pos:position pos:line="59" pos:column="57"/></literal></expr>]<pos:position pos:line="59" pos:column="58"/></index></name></expr></init></decl>;<pos:position pos:line="59" pos:column="59"/></decl_stmt>
            <expr_stmt><expr><name pos:line="60" pos:column="13">ext<pos:position pos:line="60" pos:column="16"/></name> <operator pos:line="60" pos:column="17">+=<pos:position pos:line="60" pos:column="19"/></operator> <literal type="number" pos:line="60" pos:column="20">2<pos:position pos:line="60" pos:column="21"/></literal></expr>;<pos:position pos:line="60" pos:column="22"/></expr_stmt>
            <decl_stmt><decl><type><specifier pos:line="61" pos:column="13">const<pos:position pos:line="61" pos:column="18"/></specifier> <name pos:line="61" pos:column="19">size_t<pos:position pos:line="61" pos:column="25"/></name></type> <name pos:line="61" pos:column="26">extLen<pos:position pos:line="61" pos:column="32"/></name> <init pos:line="61" pos:column="33">= <expr><operator pos:line="61" pos:column="35">(<pos:position pos:line="61" pos:column="36"/></operator><name><name pos:line="61" pos:column="36">ext<pos:position pos:line="61" pos:column="39"/></name><index pos:line="61" pos:column="39">[<expr><literal type="number" pos:line="61" pos:column="40">0<pos:position pos:line="61" pos:column="41"/></literal></expr>]<pos:position pos:line="61" pos:column="42"/></index></name> <operator pos:line="61" pos:column="43">&lt;&lt;<pos:position pos:line="61" pos:column="51"/></operator> <literal type="number" pos:line="61" pos:column="46">8<pos:position pos:line="61" pos:column="47"/></literal><operator pos:line="61" pos:column="47">)<pos:position pos:line="61" pos:column="48"/></operator> <operator pos:line="61" pos:column="49">|<pos:position pos:line="61" pos:column="50"/></operator> <name><name pos:line="61" pos:column="51">ext<pos:position pos:line="61" pos:column="54"/></name><index pos:line="61" pos:column="54">[<expr><literal type="number" pos:line="61" pos:column="55">1<pos:position pos:line="61" pos:column="56"/></literal></expr>]<pos:position pos:line="61" pos:column="57"/></index></name></expr></init></decl>;<pos:position pos:line="61" pos:column="58"/></decl_stmt>
            <expr_stmt><expr><name pos:line="62" pos:column="13">ext<pos:position pos:line="62" pos:column="16"/></name> <operator pos:line="62" pos:column="17">+=<pos:position pos:line="62" pos:column="19"/></operator> <literal type="number" pos:line="62" pos:column="20">2<pos:position pos:line="62" pos:column="21"/></literal></expr>;<pos:position pos:line="62" pos:column="22"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="63" pos:column="13">debugs<pos:position pos:line="63" pos:column="19"/></name><argument_list pos:line="63" pos:column="19">(<argument><expr><literal type="number" pos:line="63" pos:column="20">83<pos:position pos:line="63" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="63" pos:column="24">7<pos:position pos:line="63" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="27">"TLS Extension: "<pos:position pos:line="63" pos:column="44"/></literal> <operator pos:line="63" pos:column="45">&lt;&lt;<pos:position pos:line="63" pos:column="53"/></operator> <name><name pos:line="63" pos:column="48">std<pos:position pos:line="63" pos:column="51"/></name><operator pos:line="63" pos:column="51">::<pos:position pos:line="63" pos:column="53"/></operator><name pos:line="63" pos:column="53">hex<pos:position pos:line="63" pos:column="56"/></name></name> <operator pos:line="63" pos:column="57">&lt;&lt;<pos:position pos:line="63" pos:column="65"/></operator> <name pos:line="63" pos:column="60">extType<pos:position pos:line="63" pos:column="67"/></name> <operator pos:line="63" pos:column="68">&lt;&lt;<pos:position pos:line="63" pos:column="76"/></operator> <literal type="string" pos:line="63" pos:column="71">" of size:"<pos:position pos:line="63" pos:column="82"/></literal> <operator pos:line="63" pos:column="83">&lt;&lt;<pos:position pos:line="63" pos:column="91"/></operator> <name pos:line="63" pos:column="86">extLen<pos:position pos:line="63" pos:column="92"/></name></expr></argument>)<pos:position pos:line="63" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="94"/></expr_stmt>
            <comment type="line" pos:line="64" pos:column="13">// SessionTicket TLS Extension, RFC5077 section 3.2</comment>
            <if pos:line="65" pos:column="13">if <condition pos:line="65" pos:column="16">(<expr><name pos:line="65" pos:column="17">extType<pos:position pos:line="65" pos:column="24"/></name> <operator pos:line="65" pos:column="25">==<pos:position pos:line="65" pos:column="27"/></operator> <literal type="number" pos:line="65" pos:column="28">0x23<pos:position pos:line="65" pos:column="32"/></literal></expr>)<pos:position pos:line="65" pos:column="33"/></condition><then pos:line="65" pos:column="33"> <block pos:line="65" pos:column="34">{
                <expr_stmt><expr><name pos:line="66" pos:column="17">tlsTicketsExtension<pos:position pos:line="66" pos:column="36"/></name> <operator pos:line="66" pos:column="37">=<pos:position pos:line="66" pos:column="38"/></operator> <literal type="boolean" pos:line="66" pos:column="39">true<pos:position pos:line="66" pos:column="43"/></literal></expr>;<pos:position pos:line="66" pos:column="44"/></expr_stmt>
            }<pos:position pos:line="67" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name pos:line="68" pos:column="13">ext<pos:position pos:line="68" pos:column="16"/></name> <operator pos:line="68" pos:column="17">+=<pos:position pos:line="68" pos:column="19"/></operator> <name pos:line="68" pos:column="20">extLen<pos:position pos:line="68" pos:column="26"/></name></expr>;<pos:position pos:line="68" pos:column="27"/></expr_stmt>
        }<pos:position pos:line="69" pos:column="10"/></block></while>
    }<pos:position pos:line="70" pos:column="6"/></block></then></if>
    <return pos:line="71" pos:column="5">return <expr><literal type="boolean" pos:line="71" pos:column="12">true<pos:position pos:line="71" pos:column="16"/></literal></expr>;<pos:position pos:line="71" pos:column="17"/></return>
}<pos:position pos:line="72" pos:column="2"/></block></function></unit>
