<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3593_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ClientSocketContext<pos:position pos:line="2" pos:column="20"/></name><operator pos:line="2" pos:column="20">::<pos:position pos:line="2" pos:column="22"/></operator><name pos:line="2" pos:column="22">buildRangeHeader<pos:position pos:line="2" pos:column="38"/></name></name><parameter_list pos:line="2" pos:column="38">(<parameter><decl><type><name pos:line="2" pos:column="39">HttpReply<pos:position pos:line="2" pos:column="48"/></name> <modifier pos:line="2" pos:column="49">*<pos:position pos:line="2" pos:column="50"/></modifier></type> <name pos:line="2" pos:column="51">rep<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="55"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">HttpHeader<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">hdr<pos:position pos:line="4" pos:column="20"/></name> <init pos:line="4" pos:column="21">= <expr><ternary><condition><expr><name pos:line="4" pos:column="23">rep<pos:position pos:line="4" pos:column="26"/></name></expr> ?<pos:position pos:line="4" pos:column="28"/></condition><then pos:line="4" pos:column="28"> <expr><operator pos:line="4" pos:column="29">&amp;<pos:position pos:line="4" pos:column="34"/></operator><name><name pos:line="4" pos:column="30">rep<pos:position pos:line="4" pos:column="33"/></name><operator pos:line="4" pos:column="33">-&gt;<pos:position pos:line="4" pos:column="38"/></operator><name pos:line="4" pos:column="35">header<pos:position pos:line="4" pos:column="41"/></name></name></expr> <pos:position pos:line="4" pos:column="42"/></then><else pos:line="4" pos:column="42">: <expr><literal type="number" pos:line="4" pos:column="44">0<pos:position pos:line="4" pos:column="45"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="4" pos:column="46"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">char<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">range_err<pos:position pos:line="5" pos:column="26"/></name> <init pos:line="5" pos:column="27">= <expr><name pos:line="5" pos:column="29">NULL<pos:position pos:line="5" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">HttpRequest<pos:position pos:line="6" pos:column="16"/></name> <modifier pos:line="6" pos:column="17">*<pos:position pos:line="6" pos:column="18"/></modifier></type><name pos:line="6" pos:column="18">request<pos:position pos:line="6" pos:column="25"/></name> <init pos:line="6" pos:column="26">= <expr><name><name pos:line="6" pos:column="28">http<pos:position pos:line="6" pos:column="32"/></name><operator pos:line="6" pos:column="32">-&gt;<pos:position pos:line="6" pos:column="37"/></operator><name pos:line="6" pos:column="34">request<pos:position pos:line="6" pos:column="41"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="42"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><name><name pos:line="7" pos:column="12">request<pos:position pos:line="7" pos:column="19"/></name><operator pos:line="7" pos:column="19">-&gt;<pos:position pos:line="7" pos:column="24"/></operator><name pos:line="7" pos:column="21">range<pos:position pos:line="7" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="28"/></expr_stmt>
    <comment type="block" pos:line="8" pos:column="5">/* check if we still want to do ranges */</comment>

    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int64_t<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">roffLimit<pos:position pos:line="10" pos:column="22"/></name> <init pos:line="10" pos:column="23">= <expr><call><name><name pos:line="10" pos:column="25">request<pos:position pos:line="10" pos:column="32"/></name><operator pos:line="10" pos:column="32">-&gt;<pos:position pos:line="10" pos:column="37"/></operator><name pos:line="10" pos:column="34">getRangeOffsetLimit<pos:position pos:line="10" pos:column="53"/></name></name><argument_list pos:line="10" pos:column="53">()<pos:position pos:line="10" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="56"/></decl_stmt>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><operator pos:line="12" pos:column="9">!<pos:position pos:line="12" pos:column="10"/></operator><name pos:line="12" pos:column="10">rep<pos:position pos:line="12" pos:column="13"/></name></expr>)<pos:position pos:line="12" pos:column="14"/></condition><then pos:line="12" pos:column="14">
        <block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="9">range_err<pos:position pos:line="13" pos:column="18"/></name> <operator pos:line="13" pos:column="19">=<pos:position pos:line="13" pos:column="20"/></operator> <literal type="string" pos:line="13" pos:column="21">"no [parse-able] reply"<pos:position pos:line="13" pos:column="44"/></literal></expr>;<pos:position pos:line="13" pos:column="45"/></expr_stmt></block></then>
    <elseif pos:line="14" pos:column="5">else <if pos:line="14" pos:column="10">if <condition pos:line="14" pos:column="13">(<expr><operator pos:line="14" pos:column="14">(<pos:position pos:line="14" pos:column="15"/></operator><call><name><name pos:line="14" pos:column="15">rep<pos:position pos:line="14" pos:column="18"/></name><operator pos:line="14" pos:column="18">-&gt;<pos:position pos:line="14" pos:column="23"/></operator><name pos:line="14" pos:column="20">sline<pos:position pos:line="14" pos:column="25"/></name><operator pos:line="14" pos:column="25">.<pos:position pos:line="14" pos:column="26"/></operator><name pos:line="14" pos:column="26">status<pos:position pos:line="14" pos:column="32"/></name></name><argument_list pos:line="14" pos:column="32">()<pos:position pos:line="14" pos:column="34"/></argument_list></call> <operator pos:line="14" pos:column="35">!=<pos:position pos:line="14" pos:column="37"/></operator> <name><name pos:line="14" pos:column="38">Http<pos:position pos:line="14" pos:column="42"/></name><operator pos:line="14" pos:column="42">::<pos:position pos:line="14" pos:column="44"/></operator><name pos:line="14" pos:column="44">scOkay<pos:position pos:line="14" pos:column="50"/></name></name><operator pos:line="14" pos:column="50">)<pos:position pos:line="14" pos:column="51"/></operator> <operator pos:line="14" pos:column="52">&amp;&amp;<pos:position pos:line="14" pos:column="62"/></operator> <operator pos:line="14" pos:column="55">(<pos:position pos:line="14" pos:column="56"/></operator><call><name><name pos:line="14" pos:column="56">rep<pos:position pos:line="14" pos:column="59"/></name><operator pos:line="14" pos:column="59">-&gt;<pos:position pos:line="14" pos:column="64"/></operator><name pos:line="14" pos:column="61">sline<pos:position pos:line="14" pos:column="66"/></name><operator pos:line="14" pos:column="66">.<pos:position pos:line="14" pos:column="67"/></operator><name pos:line="14" pos:column="67">status<pos:position pos:line="14" pos:column="73"/></name></name><argument_list pos:line="14" pos:column="73">()<pos:position pos:line="14" pos:column="75"/></argument_list></call> <operator pos:line="14" pos:column="76">!=<pos:position pos:line="14" pos:column="78"/></operator> <name><name pos:line="14" pos:column="79">Http<pos:position pos:line="14" pos:column="83"/></name><operator pos:line="14" pos:column="83">::<pos:position pos:line="14" pos:column="85"/></operator><name pos:line="14" pos:column="85">scPartialContent<pos:position pos:line="14" pos:column="101"/></name></name><operator pos:line="14" pos:column="101">)<pos:position pos:line="14" pos:column="102"/></operator></expr>)<pos:position pos:line="14" pos:column="103"/></condition><then pos:line="14" pos:column="103">
        <block type="pseudo"><expr_stmt><expr><name pos:line="15" pos:column="9">range_err<pos:position pos:line="15" pos:column="18"/></name> <operator pos:line="15" pos:column="19">=<pos:position pos:line="15" pos:column="20"/></operator> <literal type="string" pos:line="15" pos:column="21">"wrong status code"<pos:position pos:line="15" pos:column="40"/></literal></expr>;<pos:position pos:line="15" pos:column="41"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="16" pos:column="5">else <if pos:line="16" pos:column="10">if <condition pos:line="16" pos:column="13">(<expr><call><name><name pos:line="16" pos:column="14">hdr<pos:position pos:line="16" pos:column="17"/></name><operator pos:line="16" pos:column="17">-&gt;<pos:position pos:line="16" pos:column="22"/></operator><name pos:line="16" pos:column="19">has<pos:position pos:line="16" pos:column="22"/></name></name><argument_list pos:line="16" pos:column="22">(<argument><expr><name pos:line="16" pos:column="23">HDR_CONTENT_RANGE<pos:position pos:line="16" pos:column="40"/></name></expr></argument>)<pos:position pos:line="16" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="42"/></condition><then pos:line="16" pos:column="42">
        <block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="9">range_err<pos:position pos:line="17" pos:column="18"/></name> <operator pos:line="17" pos:column="19">=<pos:position pos:line="17" pos:column="20"/></operator> <literal type="string" pos:line="17" pos:column="21">"origin server does ranges"<pos:position pos:line="17" pos:column="48"/></literal></expr>;<pos:position pos:line="17" pos:column="49"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="18" pos:column="5">else <if pos:line="18" pos:column="10">if <condition pos:line="18" pos:column="13">(<expr><name><name pos:line="18" pos:column="14">rep<pos:position pos:line="18" pos:column="17"/></name><operator pos:line="18" pos:column="17">-&gt;<pos:position pos:line="18" pos:column="22"/></operator><name pos:line="18" pos:column="19">content_length<pos:position pos:line="18" pos:column="33"/></name></name> <operator pos:line="18" pos:column="34">&lt;<pos:position pos:line="18" pos:column="38"/></operator> <literal type="number" pos:line="18" pos:column="36">0<pos:position pos:line="18" pos:column="37"/></literal></expr>)<pos:position pos:line="18" pos:column="38"/></condition><then pos:line="18" pos:column="38">
        <block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="9">range_err<pos:position pos:line="19" pos:column="18"/></name> <operator pos:line="19" pos:column="19">=<pos:position pos:line="19" pos:column="20"/></operator> <literal type="string" pos:line="19" pos:column="21">"unknown length"<pos:position pos:line="19" pos:column="37"/></literal></expr>;<pos:position pos:line="19" pos:column="38"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="20" pos:column="5">else <if pos:line="20" pos:column="10">if <condition pos:line="20" pos:column="13">(<expr><name><name pos:line="20" pos:column="14">rep<pos:position pos:line="20" pos:column="17"/></name><operator pos:line="20" pos:column="17">-&gt;<pos:position pos:line="20" pos:column="22"/></operator><name pos:line="20" pos:column="19">content_length<pos:position pos:line="20" pos:column="33"/></name></name> <operator pos:line="20" pos:column="34">!=<pos:position pos:line="20" pos:column="36"/></operator> <call><name><name pos:line="20" pos:column="37">http<pos:position pos:line="20" pos:column="41"/></name><operator pos:line="20" pos:column="41">-&gt;<pos:position pos:line="20" pos:column="46"/></operator><name pos:line="20" pos:column="43">memObject<pos:position pos:line="20" pos:column="52"/></name></name><argument_list pos:line="20" pos:column="52">()<pos:position pos:line="20" pos:column="54"/></argument_list></call><operator pos:line="20" pos:column="54">-&gt;<pos:position pos:line="20" pos:column="59"/></operator><call><name pos:line="20" pos:column="56">getReply<pos:position pos:line="20" pos:column="64"/></name><argument_list pos:line="20" pos:column="64">()<pos:position pos:line="20" pos:column="66"/></argument_list></call><operator pos:line="20" pos:column="66">-&gt;<pos:position pos:line="20" pos:column="71"/></operator><name pos:line="20" pos:column="68">content_length<pos:position pos:line="20" pos:column="82"/></name></expr>)<pos:position pos:line="20" pos:column="83"/></condition><then pos:line="20" pos:column="83">
        <block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="9">range_err<pos:position pos:line="21" pos:column="18"/></name> <operator pos:line="21" pos:column="19">=<pos:position pos:line="21" pos:column="20"/></operator> <literal type="string" pos:line="21" pos:column="21">"INCONSISTENT length"<pos:position pos:line="21" pos:column="42"/></literal></expr>;<pos:position pos:line="21" pos:column="43"/></expr_stmt></block></then></if></elseif>  <comment type="block" pos:line="21" pos:column="45">/* a bug? */</comment>

    <comment type="block" pos:line="23" pos:column="5">/* hits only - upstream CachePeer determines correct behaviour on misses, and client_side_reply determines
     * hits candidates
     */</comment>
    <elseif pos:line="26" pos:column="5">else <if pos:line="26" pos:column="10">if <condition pos:line="26" pos:column="13">(<expr><call><name pos:line="26" pos:column="14">logTypeIsATcpHit<pos:position pos:line="26" pos:column="30"/></name><argument_list pos:line="26" pos:column="30">(<argument><expr><name><name pos:line="26" pos:column="31">http<pos:position pos:line="26" pos:column="35"/></name><operator pos:line="26" pos:column="35">-&gt;<pos:position pos:line="26" pos:column="40"/></operator><name pos:line="26" pos:column="37">logType<pos:position pos:line="26" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="45"/></argument_list></call> <operator pos:line="26" pos:column="46">&amp;&amp;<pos:position pos:line="26" pos:column="56"/></operator> <call><name><name pos:line="26" pos:column="49">http<pos:position pos:line="26" pos:column="53"/></name><operator pos:line="26" pos:column="53">-&gt;<pos:position pos:line="26" pos:column="58"/></operator><name pos:line="26" pos:column="55">request<pos:position pos:line="26" pos:column="62"/></name><operator pos:line="26" pos:column="62">-&gt;<pos:position pos:line="26" pos:column="67"/></operator><name pos:line="26" pos:column="64">header<pos:position pos:line="26" pos:column="70"/></name><operator pos:line="26" pos:column="70">.<pos:position pos:line="26" pos:column="71"/></operator><name pos:line="26" pos:column="71">has<pos:position pos:line="26" pos:column="74"/></name></name><argument_list pos:line="26" pos:column="74">(<argument><expr><name pos:line="26" pos:column="75">HDR_IF_RANGE<pos:position pos:line="26" pos:column="87"/></name></expr></argument>)<pos:position pos:line="26" pos:column="88"/></argument_list></call> <operator pos:line="26" pos:column="89">&amp;&amp;<pos:position pos:line="26" pos:column="99"/></operator> <operator pos:line="26" pos:column="92">!<pos:position pos:line="26" pos:column="93"/></operator><call><name pos:line="26" pos:column="93">clientIfRangeMatch<pos:position pos:line="26" pos:column="111"/></name><argument_list pos:line="26" pos:column="111">(<argument><expr><name pos:line="26" pos:column="112">http<pos:position pos:line="26" pos:column="116"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="118">rep<pos:position pos:line="26" pos:column="121"/></name></expr></argument>)<pos:position pos:line="26" pos:column="122"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="123"/></condition><then pos:line="26" pos:column="123">
        <block type="pseudo"><expr_stmt><expr><name pos:line="27" pos:column="9">range_err<pos:position pos:line="27" pos:column="18"/></name> <operator pos:line="27" pos:column="19">=<pos:position pos:line="27" pos:column="20"/></operator> <literal type="string" pos:line="27" pos:column="21">"If-Range match failed"<pos:position pos:line="27" pos:column="44"/></literal></expr>;<pos:position pos:line="27" pos:column="45"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="28" pos:column="5">else <if pos:line="28" pos:column="10">if <condition pos:line="28" pos:column="13">(<expr><operator pos:line="28" pos:column="14">!<pos:position pos:line="28" pos:column="15"/></operator><call><name><name pos:line="28" pos:column="15">http<pos:position pos:line="28" pos:column="19"/></name><operator pos:line="28" pos:column="19">-&gt;<pos:position pos:line="28" pos:column="24"/></operator><name pos:line="28" pos:column="21">request<pos:position pos:line="28" pos:column="28"/></name><operator pos:line="28" pos:column="28">-&gt;<pos:position pos:line="28" pos:column="33"/></operator><name pos:line="28" pos:column="30">range<pos:position pos:line="28" pos:column="35"/></name><operator pos:line="28" pos:column="35">-&gt;<pos:position pos:line="28" pos:column="40"/></operator><name pos:line="28" pos:column="37">canonize<pos:position pos:line="28" pos:column="45"/></name></name><argument_list pos:line="28" pos:column="45">(<argument><expr><name pos:line="28" pos:column="46">rep<pos:position pos:line="28" pos:column="49"/></name></expr></argument>)<pos:position pos:line="28" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="51"/></condition><then pos:line="28" pos:column="51">
        <block type="pseudo"><expr_stmt><expr><name pos:line="29" pos:column="9">range_err<pos:position pos:line="29" pos:column="18"/></name> <operator pos:line="29" pos:column="19">=<pos:position pos:line="29" pos:column="20"/></operator> <literal type="string" pos:line="29" pos:column="21">"canonization failed"<pos:position pos:line="29" pos:column="42"/></literal></expr>;<pos:position pos:line="29" pos:column="43"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="30" pos:column="5">else <if pos:line="30" pos:column="10">if <condition pos:line="30" pos:column="13">(<expr><call><name><name pos:line="30" pos:column="14">http<pos:position pos:line="30" pos:column="18"/></name><operator pos:line="30" pos:column="18">-&gt;<pos:position pos:line="30" pos:column="23"/></operator><name pos:line="30" pos:column="20">request<pos:position pos:line="30" pos:column="27"/></name><operator pos:line="30" pos:column="27">-&gt;<pos:position pos:line="30" pos:column="32"/></operator><name pos:line="30" pos:column="29">range<pos:position pos:line="30" pos:column="34"/></name><operator pos:line="30" pos:column="34">-&gt;<pos:position pos:line="30" pos:column="39"/></operator><name pos:line="30" pos:column="36">isComplex<pos:position pos:line="30" pos:column="45"/></name></name><argument_list pos:line="30" pos:column="45">()<pos:position pos:line="30" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="48"/></condition><then pos:line="30" pos:column="48">
        <block type="pseudo"><expr_stmt><expr><name pos:line="31" pos:column="9">range_err<pos:position pos:line="31" pos:column="18"/></name> <operator pos:line="31" pos:column="19">=<pos:position pos:line="31" pos:column="20"/></operator> <literal type="string" pos:line="31" pos:column="21">"too complex range header"<pos:position pos:line="31" pos:column="47"/></literal></expr>;<pos:position pos:line="31" pos:column="48"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="32" pos:column="5">else <if pos:line="32" pos:column="10">if <condition pos:line="32" pos:column="13">(<expr><operator pos:line="32" pos:column="14">!<pos:position pos:line="32" pos:column="15"/></operator><call><name pos:line="32" pos:column="15">logTypeIsATcpHit<pos:position pos:line="32" pos:column="31"/></name><argument_list pos:line="32" pos:column="31">(<argument><expr><name><name pos:line="32" pos:column="32">http<pos:position pos:line="32" pos:column="36"/></name><operator pos:line="32" pos:column="36">-&gt;<pos:position pos:line="32" pos:column="41"/></operator><name pos:line="32" pos:column="38">logType<pos:position pos:line="32" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="46"/></argument_list></call> <operator pos:line="32" pos:column="47">&amp;&amp;<pos:position pos:line="32" pos:column="57"/></operator> <call><name><name pos:line="32" pos:column="50">http<pos:position pos:line="32" pos:column="54"/></name><operator pos:line="32" pos:column="54">-&gt;<pos:position pos:line="32" pos:column="59"/></operator><name pos:line="32" pos:column="56">request<pos:position pos:line="32" pos:column="63"/></name><operator pos:line="32" pos:column="63">-&gt;<pos:position pos:line="32" pos:column="68"/></operator><name pos:line="32" pos:column="65">range<pos:position pos:line="32" pos:column="70"/></name><operator pos:line="32" pos:column="70">-&gt;<pos:position pos:line="32" pos:column="75"/></operator><name pos:line="32" pos:column="72">offsetLimitExceeded<pos:position pos:line="32" pos:column="91"/></name></name><argument_list pos:line="32" pos:column="91">(<argument><expr><name pos:line="32" pos:column="92">roffLimit<pos:position pos:line="32" pos:column="101"/></name></expr></argument>)<pos:position pos:line="32" pos:column="102"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="103"/></condition><then pos:line="32" pos:column="103">
        <block type="pseudo"><expr_stmt><expr><name pos:line="33" pos:column="9">range_err<pos:position pos:line="33" pos:column="18"/></name> <operator pos:line="33" pos:column="19">=<pos:position pos:line="33" pos:column="20"/></operator> <literal type="string" pos:line="33" pos:column="21">"range outside range_offset_limit"<pos:position pos:line="33" pos:column="55"/></literal></expr>;<pos:position pos:line="33" pos:column="56"/></expr_stmt></block></then></if></elseif></if>

    <comment type="block" pos:line="35" pos:column="5">/* get rid of our range specs on error */</comment>
    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><name pos:line="36" pos:column="9">range_err<pos:position pos:line="36" pos:column="18"/></name></expr>)<pos:position pos:line="36" pos:column="19"/></condition><then pos:line="36" pos:column="19"> <block pos:line="36" pos:column="20">{
        <comment type="block" pos:line="37" pos:column="9">/* XXX We do this here because we need canonisation etc. However, this current
         * code will lead to incorrect store offset requests - the store will have the
         * offset data, but we won't be requesting it.
         * So, we can either re-request, or generate an error
         */</comment>
        <expr_stmt><expr><call><name><name pos:line="42" pos:column="9">http<pos:position pos:line="42" pos:column="13"/></name><operator pos:line="42" pos:column="13">-&gt;<pos:position pos:line="42" pos:column="18"/></operator><name pos:line="42" pos:column="15">request<pos:position pos:line="42" pos:column="22"/></name><operator pos:line="42" pos:column="22">-&gt;<pos:position pos:line="42" pos:column="27"/></operator><name pos:line="42" pos:column="24">ignoreRange<pos:position pos:line="42" pos:column="35"/></name></name><argument_list pos:line="42" pos:column="35">(<argument><expr><name pos:line="42" pos:column="36">range_err<pos:position pos:line="42" pos:column="45"/></name></expr></argument>)<pos:position pos:line="42" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="47"/></expr_stmt>
    }<pos:position pos:line="43" pos:column="6"/></block></then> <else pos:line="43" pos:column="7">else <block pos:line="43" pos:column="12">{
        <comment type="block" pos:line="44" pos:column="9">/* XXX: TODO: Review, this unconditional set may be wrong. */</comment>
        <expr_stmt><expr><call><name><name pos:line="45" pos:column="9">rep<pos:position pos:line="45" pos:column="12"/></name><operator pos:line="45" pos:column="12">-&gt;<pos:position pos:line="45" pos:column="17"/></operator><name pos:line="45" pos:column="14">sline<pos:position pos:line="45" pos:column="19"/></name><operator pos:line="45" pos:column="19">.<pos:position pos:line="45" pos:column="20"/></operator><name pos:line="45" pos:column="20">set<pos:position pos:line="45" pos:column="23"/></name></name><argument_list pos:line="45" pos:column="23">(<argument><expr><name><name pos:line="45" pos:column="24">rep<pos:position pos:line="45" pos:column="27"/></name><operator pos:line="45" pos:column="27">-&gt;<pos:position pos:line="45" pos:column="32"/></operator><name pos:line="45" pos:column="29">sline<pos:position pos:line="45" pos:column="34"/></name><operator pos:line="45" pos:column="34">.<pos:position pos:line="45" pos:column="35"/></operator><name pos:line="45" pos:column="35">version<pos:position pos:line="45" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="44">Http<pos:position pos:line="45" pos:column="48"/></name><operator pos:line="45" pos:column="48">::<pos:position pos:line="45" pos:column="50"/></operator><name pos:line="45" pos:column="50">scPartialContent<pos:position pos:line="45" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="68"/></expr_stmt>
        <comment type="line" pos:line="46" pos:column="9">// web server responded with a valid, but unexpected range.</comment>
        <comment type="line" pos:line="47" pos:column="9">// will (try-to) forward as-is.</comment>
        <comment type="line" pos:line="48" pos:column="9">//TODO: we should cope with multirange request/responses</comment>
        <decl_stmt><decl><type><name pos:line="49" pos:column="9">bool<pos:position pos:line="49" pos:column="13"/></name></type> <name pos:line="49" pos:column="14">replyMatchRequest<pos:position pos:line="49" pos:column="31"/></name> <init pos:line="49" pos:column="32">= <expr><ternary><condition><expr><name><name pos:line="49" pos:column="34">rep<pos:position pos:line="49" pos:column="37"/></name><operator pos:line="49" pos:column="37">-&gt;<pos:position pos:line="49" pos:column="42"/></operator><name pos:line="49" pos:column="39">content_range<pos:position pos:line="49" pos:column="52"/></name></name> <operator pos:line="49" pos:column="53">!=<pos:position pos:line="49" pos:column="55"/></operator> <name pos:line="49" pos:column="56">NULL<pos:position pos:line="49" pos:column="60"/></name></expr> ?<pos:position pos:line="49" pos:column="62"/></condition><then pos:line="49" pos:column="62">
                                 <expr><call><name><name pos:line="50" pos:column="34">request<pos:position pos:line="50" pos:column="41"/></name><operator pos:line="50" pos:column="41">-&gt;<pos:position pos:line="50" pos:column="46"/></operator><name pos:line="50" pos:column="43">range<pos:position pos:line="50" pos:column="48"/></name><operator pos:line="50" pos:column="48">-&gt;<pos:position pos:line="50" pos:column="53"/></operator><name pos:line="50" pos:column="50">contains<pos:position pos:line="50" pos:column="58"/></name></name><argument_list pos:line="50" pos:column="58">(<argument><expr><name><name pos:line="50" pos:column="59">rep<pos:position pos:line="50" pos:column="62"/></name><operator pos:line="50" pos:column="62">-&gt;<pos:position pos:line="50" pos:column="67"/></operator><name pos:line="50" pos:column="64">content_range<pos:position pos:line="50" pos:column="77"/></name><operator pos:line="50" pos:column="77">-&gt;<pos:position pos:line="50" pos:column="82"/></operator><name pos:line="50" pos:column="79">spec<pos:position pos:line="50" pos:column="83"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="84"/></argument_list></call></expr> <pos:position pos:line="50" pos:column="85"/></then><else pos:line="50" pos:column="85">:
                                 <expr><literal type="boolean" pos:line="51" pos:column="34">true<pos:position pos:line="51" pos:column="38"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="51" pos:column="39"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="52" pos:column="9">const<pos:position pos:line="52" pos:column="14"/></specifier> <name pos:line="52" pos:column="15">int<pos:position pos:line="52" pos:column="18"/></name></type> <name pos:line="52" pos:column="19">spec_count<pos:position pos:line="52" pos:column="29"/></name> <init pos:line="52" pos:column="30">= <expr><call><name><name pos:line="52" pos:column="32">http<pos:position pos:line="52" pos:column="36"/></name><operator pos:line="52" pos:column="36">-&gt;<pos:position pos:line="52" pos:column="41"/></operator><name pos:line="52" pos:column="38">request<pos:position pos:line="52" pos:column="45"/></name><operator pos:line="52" pos:column="45">-&gt;<pos:position pos:line="52" pos:column="50"/></operator><name pos:line="52" pos:column="47">range<pos:position pos:line="52" pos:column="52"/></name><operator pos:line="52" pos:column="52">-&gt;<pos:position pos:line="52" pos:column="57"/></operator><name pos:line="52" pos:column="54">specs<pos:position pos:line="52" pos:column="59"/></name><operator pos:line="52" pos:column="59">.<pos:position pos:line="52" pos:column="60"/></operator><name pos:line="52" pos:column="60">size<pos:position pos:line="52" pos:column="64"/></name></name><argument_list pos:line="52" pos:column="64">()<pos:position pos:line="52" pos:column="66"/></argument_list></call></expr></init></decl>;<pos:position pos:line="52" pos:column="67"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="53" pos:column="9">int64_t<pos:position pos:line="53" pos:column="16"/></name></type> <name pos:line="53" pos:column="17">actual_clen<pos:position pos:line="53" pos:column="28"/></name> <init pos:line="53" pos:column="29">= <expr><operator pos:line="53" pos:column="31">-<pos:position pos:line="53" pos:column="32"/></operator><literal type="number" pos:line="53" pos:column="32">1<pos:position pos:line="53" pos:column="33"/></literal></expr></init></decl>;<pos:position pos:line="53" pos:column="34"/></decl_stmt>

        <expr_stmt><expr><call><name pos:line="55" pos:column="9">debugs<pos:position pos:line="55" pos:column="15"/></name><argument_list pos:line="55" pos:column="15">(<argument><expr><literal type="number" pos:line="55" pos:column="16">33<pos:position pos:line="55" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="55" pos:column="20">3<pos:position pos:line="55" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="23">"clientBuildRangeHeader: range spec count: "<pos:position pos:line="55" pos:column="67"/></literal> <operator pos:line="55" pos:column="68">&lt;&lt;<pos:position pos:line="55" pos:column="76"/></operator>
               <name pos:line="56" pos:column="16">spec_count<pos:position pos:line="56" pos:column="26"/></name> <operator pos:line="56" pos:column="27">&lt;&lt;<pos:position pos:line="56" pos:column="35"/></operator> <literal type="string" pos:line="56" pos:column="30">" virgin clen: "<pos:position pos:line="56" pos:column="46"/></literal> <operator pos:line="56" pos:column="47">&lt;&lt;<pos:position pos:line="56" pos:column="55"/></operator> <name><name pos:line="56" pos:column="50">rep<pos:position pos:line="56" pos:column="53"/></name><operator pos:line="56" pos:column="53">-&gt;<pos:position pos:line="56" pos:column="58"/></operator><name pos:line="56" pos:column="55">content_length<pos:position pos:line="56" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="71"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="57" pos:column="9">assert<pos:position pos:line="57" pos:column="15"/></name><argument_list pos:line="57" pos:column="15">(<argument><expr><name pos:line="57" pos:column="16">spec_count<pos:position pos:line="57" pos:column="26"/></name> <operator pos:line="57" pos:column="27">&gt;<pos:position pos:line="57" pos:column="31"/></operator> <literal type="number" pos:line="57" pos:column="29">0<pos:position pos:line="57" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="32"/></expr_stmt>
        <comment type="block" pos:line="58" pos:column="9">/* append appropriate header(s) */</comment>

        <if pos:line="60" pos:column="9">if <condition pos:line="60" pos:column="12">(<expr><name pos:line="60" pos:column="13">spec_count<pos:position pos:line="60" pos:column="23"/></name> <operator pos:line="60" pos:column="24">==<pos:position pos:line="60" pos:column="26"/></operator> <literal type="number" pos:line="60" pos:column="27">1<pos:position pos:line="60" pos:column="28"/></literal></expr>)<pos:position pos:line="60" pos:column="29"/></condition><then pos:line="60" pos:column="29"> <block pos:line="60" pos:column="30">{
            <if pos:line="61" pos:column="13">if <condition pos:line="61" pos:column="16">(<expr><operator pos:line="61" pos:column="17">!<pos:position pos:line="61" pos:column="18"/></operator><name pos:line="61" pos:column="18">replyMatchRequest<pos:position pos:line="61" pos:column="35"/></name></expr>)<pos:position pos:line="61" pos:column="36"/></condition><then pos:line="61" pos:column="36"> <block pos:line="61" pos:column="37">{
                <expr_stmt><expr><call><name><name pos:line="62" pos:column="17">hdr<pos:position pos:line="62" pos:column="20"/></name><operator pos:line="62" pos:column="20">-&gt;<pos:position pos:line="62" pos:column="25"/></operator><name pos:line="62" pos:column="22">delById<pos:position pos:line="62" pos:column="29"/></name></name><argument_list pos:line="62" pos:column="29">(<argument><expr><name pos:line="62" pos:column="30">HDR_CONTENT_RANGE<pos:position pos:line="62" pos:column="47"/></name></expr></argument>)<pos:position pos:line="62" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="49"/></expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="63" pos:column="17">hdr<pos:position pos:line="63" pos:column="20"/></name><operator pos:line="63" pos:column="20">-&gt;<pos:position pos:line="63" pos:column="25"/></operator><name pos:line="63" pos:column="22">putContRange<pos:position pos:line="63" pos:column="34"/></name></name><argument_list pos:line="63" pos:column="34">(<argument><expr><name><name pos:line="63" pos:column="35">rep<pos:position pos:line="63" pos:column="38"/></name><operator pos:line="63" pos:column="38">-&gt;<pos:position pos:line="63" pos:column="43"/></operator><name pos:line="63" pos:column="40">content_range<pos:position pos:line="63" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="63" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="55"/></expr_stmt>
                <expr_stmt><expr><name pos:line="64" pos:column="17">actual_clen<pos:position pos:line="64" pos:column="28"/></name> <operator pos:line="64" pos:column="29">=<pos:position pos:line="64" pos:column="30"/></operator> <name><name pos:line="64" pos:column="31">rep<pos:position pos:line="64" pos:column="34"/></name><operator pos:line="64" pos:column="34">-&gt;<pos:position pos:line="64" pos:column="39"/></operator><name pos:line="64" pos:column="36">content_length<pos:position pos:line="64" pos:column="50"/></name></name></expr>;<pos:position pos:line="64" pos:column="51"/></expr_stmt>
                <comment type="line" pos:line="65" pos:column="17">//http-&gt;range_iter.pos = rep-&gt;content_range-&gt;spec.begin();</comment>
                <expr_stmt><expr><name><operator pos:line="66" pos:column="17">(<pos:position pos:line="66" pos:column="18"/></operator><operator pos:line="66" pos:column="18">*<pos:position pos:line="66" pos:column="19"/></operator><name><name pos:line="66" pos:column="19">http<pos:position pos:line="66" pos:column="23"/></name><operator pos:line="66" pos:column="23">-&gt;<pos:position pos:line="66" pos:column="28"/></operator><name pos:line="66" pos:column="25">range_iter<pos:position pos:line="66" pos:column="35"/></name><operator pos:line="66" pos:column="35">.<pos:position pos:line="66" pos:column="36"/></operator><name pos:line="66" pos:column="36">pos<pos:position pos:line="66" pos:column="39"/></name></name><operator pos:line="66" pos:column="39">)<pos:position pos:line="66" pos:column="40"/></operator><operator pos:line="66" pos:column="40">-&gt;<pos:position pos:line="66" pos:column="45"/></operator><name pos:line="66" pos:column="42">offset<pos:position pos:line="66" pos:column="48"/></name></name> <operator pos:line="66" pos:column="49">=<pos:position pos:line="66" pos:column="50"/></operator> <name><name pos:line="66" pos:column="51">rep<pos:position pos:line="66" pos:column="54"/></name><operator pos:line="66" pos:column="54">-&gt;<pos:position pos:line="66" pos:column="59"/></operator><name pos:line="66" pos:column="56">content_range<pos:position pos:line="66" pos:column="69"/></name><operator pos:line="66" pos:column="69">-&gt;<pos:position pos:line="66" pos:column="74"/></operator><name pos:line="66" pos:column="71">spec<pos:position pos:line="66" pos:column="75"/></name><operator pos:line="66" pos:column="75">.<pos:position pos:line="66" pos:column="76"/></operator><name pos:line="66" pos:column="76">offset<pos:position pos:line="66" pos:column="82"/></name></name></expr>;<pos:position pos:line="66" pos:column="83"/></expr_stmt>
                <expr_stmt><expr><name><operator pos:line="67" pos:column="17">(<pos:position pos:line="67" pos:column="18"/></operator><operator pos:line="67" pos:column="18">*<pos:position pos:line="67" pos:column="19"/></operator><name><name pos:line="67" pos:column="19">http<pos:position pos:line="67" pos:column="23"/></name><operator pos:line="67" pos:column="23">-&gt;<pos:position pos:line="67" pos:column="28"/></operator><name pos:line="67" pos:column="25">range_iter<pos:position pos:line="67" pos:column="35"/></name><operator pos:line="67" pos:column="35">.<pos:position pos:line="67" pos:column="36"/></operator><name pos:line="67" pos:column="36">pos<pos:position pos:line="67" pos:column="39"/></name></name><operator pos:line="67" pos:column="39">)<pos:position pos:line="67" pos:column="40"/></operator><operator pos:line="67" pos:column="40">-&gt;<pos:position pos:line="67" pos:column="45"/></operator><name pos:line="67" pos:column="42">length<pos:position pos:line="67" pos:column="48"/></name></name> <operator pos:line="67" pos:column="49">=<pos:position pos:line="67" pos:column="50"/></operator> <name><name pos:line="67" pos:column="51">rep<pos:position pos:line="67" pos:column="54"/></name><operator pos:line="67" pos:column="54">-&gt;<pos:position pos:line="67" pos:column="59"/></operator><name pos:line="67" pos:column="56">content_range<pos:position pos:line="67" pos:column="69"/></name><operator pos:line="67" pos:column="69">-&gt;<pos:position pos:line="67" pos:column="74"/></operator><name pos:line="67" pos:column="71">spec<pos:position pos:line="67" pos:column="75"/></name><operator pos:line="67" pos:column="75">.<pos:position pos:line="67" pos:column="76"/></operator><name pos:line="67" pos:column="76">length<pos:position pos:line="67" pos:column="82"/></name></name></expr>;<pos:position pos:line="67" pos:column="83"/></expr_stmt>

            }<pos:position pos:line="69" pos:column="14"/></block></then> <else pos:line="69" pos:column="15">else <block pos:line="69" pos:column="20">{
                <decl_stmt><decl><type><name><name pos:line="70" pos:column="17">HttpHdrRange<pos:position pos:line="70" pos:column="29"/></name><operator pos:line="70" pos:column="29">::<pos:position pos:line="70" pos:column="31"/></operator><name pos:line="70" pos:column="31">iterator<pos:position pos:line="70" pos:column="39"/></name></name></type> <name pos:line="70" pos:column="40">pos<pos:position pos:line="70" pos:column="43"/></name> <init pos:line="70" pos:column="44">= <expr><call><name><name pos:line="70" pos:column="46">http<pos:position pos:line="70" pos:column="50"/></name><operator pos:line="70" pos:column="50">-&gt;<pos:position pos:line="70" pos:column="55"/></operator><name pos:line="70" pos:column="52">request<pos:position pos:line="70" pos:column="59"/></name><operator pos:line="70" pos:column="59">-&gt;<pos:position pos:line="70" pos:column="64"/></operator><name pos:line="70" pos:column="61">range<pos:position pos:line="70" pos:column="66"/></name><operator pos:line="70" pos:column="66">-&gt;<pos:position pos:line="70" pos:column="71"/></operator><name pos:line="70" pos:column="68">begin<pos:position pos:line="70" pos:column="73"/></name></name><argument_list pos:line="70" pos:column="73">()<pos:position pos:line="70" pos:column="75"/></argument_list></call></expr></init></decl>;<pos:position pos:line="70" pos:column="76"/></decl_stmt>
                <expr_stmt><expr><call><name pos:line="71" pos:column="17">assert<pos:position pos:line="71" pos:column="23"/></name><argument_list pos:line="71" pos:column="23">(<argument><expr><operator pos:line="71" pos:column="24">*<pos:position pos:line="71" pos:column="25"/></operator><name pos:line="71" pos:column="25">pos<pos:position pos:line="71" pos:column="28"/></name></expr></argument>)<pos:position pos:line="71" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="30"/></expr_stmt>
                <comment type="block" pos:line="72" pos:column="17">/* append Content-Range */</comment>

                <if pos:line="74" pos:column="17">if <condition pos:line="74" pos:column="20">(<expr><operator pos:line="74" pos:column="21">!<pos:position pos:line="74" pos:column="22"/></operator><call><name><name pos:line="74" pos:column="22">hdr<pos:position pos:line="74" pos:column="25"/></name><operator pos:line="74" pos:column="25">-&gt;<pos:position pos:line="74" pos:column="30"/></operator><name pos:line="74" pos:column="27">has<pos:position pos:line="74" pos:column="30"/></name></name><argument_list pos:line="74" pos:column="30">(<argument><expr><name pos:line="74" pos:column="31">HDR_CONTENT_RANGE<pos:position pos:line="74" pos:column="48"/></name></expr></argument>)<pos:position pos:line="74" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="74" pos:column="50"/></condition><then pos:line="74" pos:column="50"> <block pos:line="74" pos:column="51">{
                    <comment type="block" pos:line="75" pos:column="21">/* No content range, so this was a full object we are
                     * sending parts of.
                     */</comment>
                    <expr_stmt><expr><call><name pos:line="78" pos:column="21">httpHeaderAddContRange<pos:position pos:line="78" pos:column="43"/></name><argument_list pos:line="78" pos:column="43">(<argument><expr><name pos:line="78" pos:column="44">hdr<pos:position pos:line="78" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="78" pos:column="49">*<pos:position pos:line="78" pos:column="50"/></operator><operator pos:line="78" pos:column="50">*<pos:position pos:line="78" pos:column="51"/></operator><name pos:line="78" pos:column="51">pos<pos:position pos:line="78" pos:column="54"/></name></expr></argument>, <argument><expr><name><name pos:line="78" pos:column="56">rep<pos:position pos:line="78" pos:column="59"/></name><operator pos:line="78" pos:column="59">-&gt;<pos:position pos:line="78" pos:column="64"/></operator><name pos:line="78" pos:column="61">content_length<pos:position pos:line="78" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="78" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="77"/></expr_stmt>
                }<pos:position pos:line="79" pos:column="18"/></block></then></if>

                <comment type="block" pos:line="81" pos:column="17">/* set new Content-Length to the actual number of bytes
                 * transmitted in the message-body */</comment>
                <expr_stmt><expr><name pos:line="83" pos:column="17">actual_clen<pos:position pos:line="83" pos:column="28"/></name> <operator pos:line="83" pos:column="29">=<pos:position pos:line="83" pos:column="30"/></operator> <name><operator pos:line="83" pos:column="31">(<pos:position pos:line="83" pos:column="32"/></operator><operator pos:line="83" pos:column="32">*<pos:position pos:line="83" pos:column="33"/></operator><name pos:line="83" pos:column="33">pos<pos:position pos:line="83" pos:column="36"/></name><operator pos:line="83" pos:column="36">)<pos:position pos:line="83" pos:column="37"/></operator><operator pos:line="83" pos:column="37">-&gt;<pos:position pos:line="83" pos:column="42"/></operator><name pos:line="83" pos:column="39">length<pos:position pos:line="83" pos:column="45"/></name></name></expr>;<pos:position pos:line="83" pos:column="46"/></expr_stmt>
            }<pos:position pos:line="84" pos:column="14"/></block></else></if>
        }<pos:position pos:line="85" pos:column="10"/></block></then> <else pos:line="85" pos:column="11">else <block pos:line="85" pos:column="16">{
            <comment type="block" pos:line="86" pos:column="13">/* multipart! */</comment>
            <comment type="block" pos:line="87" pos:column="13">/* generate boundary string */</comment>
            <expr_stmt><expr><name><name pos:line="88" pos:column="13">http<pos:position pos:line="88" pos:column="17"/></name><operator pos:line="88" pos:column="17">-&gt;<pos:position pos:line="88" pos:column="22"/></operator><name pos:line="88" pos:column="19">range_iter<pos:position pos:line="88" pos:column="29"/></name><operator pos:line="88" pos:column="29">.<pos:position pos:line="88" pos:column="30"/></operator><name pos:line="88" pos:column="30">boundary<pos:position pos:line="88" pos:column="38"/></name></name> <operator pos:line="88" pos:column="39">=<pos:position pos:line="88" pos:column="40"/></operator> <call><name><name pos:line="88" pos:column="41">http<pos:position pos:line="88" pos:column="45"/></name><operator pos:line="88" pos:column="45">-&gt;<pos:position pos:line="88" pos:column="50"/></operator><name pos:line="88" pos:column="47">rangeBoundaryStr<pos:position pos:line="88" pos:column="63"/></name></name><argument_list pos:line="88" pos:column="63">()<pos:position pos:line="88" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="66"/></expr_stmt>
            <comment type="block" pos:line="89" pos:column="13">/* delete old Content-Type, add ours */</comment>
            <expr_stmt><expr><call><name><name pos:line="90" pos:column="13">hdr<pos:position pos:line="90" pos:column="16"/></name><operator pos:line="90" pos:column="16">-&gt;<pos:position pos:line="90" pos:column="21"/></operator><name pos:line="90" pos:column="18">delById<pos:position pos:line="90" pos:column="25"/></name></name><argument_list pos:line="90" pos:column="25">(<argument><expr><name pos:line="90" pos:column="26">HDR_CONTENT_TYPE<pos:position pos:line="90" pos:column="42"/></name></expr></argument>)<pos:position pos:line="90" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="44"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="91" pos:column="13">httpHeaderPutStrf<pos:position pos:line="91" pos:column="30"/></name><argument_list pos:line="91" pos:column="30">(<argument><expr><name pos:line="91" pos:column="31">hdr<pos:position pos:line="91" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="36">HDR_CONTENT_TYPE<pos:position pos:line="91" pos:column="52"/></name></expr></argument>,
                              <argument><expr><literal type="string" pos:line="92" pos:column="31">"multipart/byteranges; boundary=\""<pos:position pos:line="92" pos:column="66"/></literal> <name pos:line="92" pos:column="67">SQUIDSTRINGPH<pos:position pos:line="92" pos:column="80"/></name> <literal type="string" pos:line="92" pos:column="81">"\""<pos:position pos:line="92" pos:column="85"/></literal></expr></argument>,
                              <argument><expr><call><name pos:line="93" pos:column="31">SQUIDSTRINGPRINT<pos:position pos:line="93" pos:column="47"/></name><argument_list pos:line="93" pos:column="47">(<argument><expr><name><name pos:line="93" pos:column="48">http<pos:position pos:line="93" pos:column="52"/></name><operator pos:line="93" pos:column="52">-&gt;<pos:position pos:line="93" pos:column="57"/></operator><name pos:line="93" pos:column="54">range_iter<pos:position pos:line="93" pos:column="64"/></name><operator pos:line="93" pos:column="64">.<pos:position pos:line="93" pos:column="65"/></operator><name pos:line="93" pos:column="65">boundary<pos:position pos:line="93" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="93" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="93" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="76"/></expr_stmt>
            <comment type="block" pos:line="94" pos:column="13">/* Content-Length is not required in multipart responses
             * but it is always nice to have one */</comment>
            <expr_stmt><expr><name pos:line="96" pos:column="13">actual_clen<pos:position pos:line="96" pos:column="24"/></name> <operator pos:line="96" pos:column="25">=<pos:position pos:line="96" pos:column="26"/></operator> <call><name><name pos:line="96" pos:column="27">http<pos:position pos:line="96" pos:column="31"/></name><operator pos:line="96" pos:column="31">-&gt;<pos:position pos:line="96" pos:column="36"/></operator><name pos:line="96" pos:column="33">mRangeCLen<pos:position pos:line="96" pos:column="43"/></name></name><argument_list pos:line="96" pos:column="43">()<pos:position pos:line="96" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="46"/></expr_stmt>
            <comment type="block" pos:line="97" pos:column="13">/* http-&gt;out needs to start where we want data at */</comment>
            <expr_stmt><expr><name><name pos:line="98" pos:column="13">http<pos:position pos:line="98" pos:column="17"/></name><operator pos:line="98" pos:column="17">-&gt;<pos:position pos:line="98" pos:column="22"/></operator><name pos:line="98" pos:column="19">out<pos:position pos:line="98" pos:column="22"/></name><operator pos:line="98" pos:column="22">.<pos:position pos:line="98" pos:column="23"/></operator><name pos:line="98" pos:column="23">offset<pos:position pos:line="98" pos:column="29"/></name></name> <operator pos:line="98" pos:column="30">=<pos:position pos:line="98" pos:column="31"/></operator> <call><name><name pos:line="98" pos:column="32">http<pos:position pos:line="98" pos:column="36"/></name><operator pos:line="98" pos:column="36">-&gt;<pos:position pos:line="98" pos:column="41"/></operator><name pos:line="98" pos:column="38">range_iter<pos:position pos:line="98" pos:column="48"/></name><operator pos:line="98" pos:column="48">.<pos:position pos:line="98" pos:column="49"/></operator><name pos:line="98" pos:column="49">currentSpec<pos:position pos:line="98" pos:column="60"/></name></name><argument_list pos:line="98" pos:column="60">()<pos:position pos:line="98" pos:column="62"/></argument_list></call><operator pos:line="98" pos:column="62">-&gt;<pos:position pos:line="98" pos:column="67"/></operator><name pos:line="98" pos:column="64">offset<pos:position pos:line="98" pos:column="70"/></name></expr>;<pos:position pos:line="98" pos:column="71"/></expr_stmt>
        }<pos:position pos:line="99" pos:column="10"/></block></else></if>

        <comment type="block" pos:line="101" pos:column="9">/* replace Content-Length header */</comment>
        <expr_stmt><expr><call><name pos:line="102" pos:column="9">assert<pos:position pos:line="102" pos:column="15"/></name><argument_list pos:line="102" pos:column="15">(<argument><expr><name pos:line="102" pos:column="16">actual_clen<pos:position pos:line="102" pos:column="27"/></name> <operator pos:line="102" pos:column="28">&gt;=<pos:position pos:line="102" pos:column="33"/></operator> <literal type="number" pos:line="102" pos:column="31">0<pos:position pos:line="102" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="102" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="34"/></expr_stmt>

        <expr_stmt><expr><call><name><name pos:line="104" pos:column="9">hdr<pos:position pos:line="104" pos:column="12"/></name><operator pos:line="104" pos:column="12">-&gt;<pos:position pos:line="104" pos:column="17"/></operator><name pos:line="104" pos:column="14">delById<pos:position pos:line="104" pos:column="21"/></name></name><argument_list pos:line="104" pos:column="21">(<argument><expr><name pos:line="104" pos:column="22">HDR_CONTENT_LENGTH<pos:position pos:line="104" pos:column="40"/></name></expr></argument>)<pos:position pos:line="104" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="42"/></expr_stmt>

        <expr_stmt><expr><call><name><name pos:line="106" pos:column="9">hdr<pos:position pos:line="106" pos:column="12"/></name><operator pos:line="106" pos:column="12">-&gt;<pos:position pos:line="106" pos:column="17"/></operator><name pos:line="106" pos:column="14">putInt64<pos:position pos:line="106" pos:column="22"/></name></name><argument_list pos:line="106" pos:column="22">(<argument><expr><name pos:line="106" pos:column="23">HDR_CONTENT_LENGTH<pos:position pos:line="106" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="43">actual_clen<pos:position pos:line="106" pos:column="54"/></name></expr></argument>)<pos:position pos:line="106" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="56"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="108" pos:column="9">debugs<pos:position pos:line="108" pos:column="15"/></name><argument_list pos:line="108" pos:column="15">(<argument><expr><literal type="number" pos:line="108" pos:column="16">33<pos:position pos:line="108" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="108" pos:column="20">3<pos:position pos:line="108" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="108" pos:column="23">"clientBuildRangeHeader: actual content length: "<pos:position pos:line="108" pos:column="72"/></literal> <operator pos:line="108" pos:column="73">&lt;&lt;<pos:position pos:line="108" pos:column="81"/></operator> <name pos:line="108" pos:column="76">actual_clen<pos:position pos:line="108" pos:column="87"/></name></expr></argument>)<pos:position pos:line="108" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="89"/></expr_stmt>

        <comment type="block" pos:line="110" pos:column="9">/* And start the range iter off */</comment>
        <expr_stmt><expr><call><name><name pos:line="111" pos:column="9">http<pos:position pos:line="111" pos:column="13"/></name><operator pos:line="111" pos:column="13">-&gt;<pos:position pos:line="111" pos:column="18"/></operator><name pos:line="111" pos:column="15">range_iter<pos:position pos:line="111" pos:column="25"/></name><operator pos:line="111" pos:column="25">.<pos:position pos:line="111" pos:column="26"/></operator><name pos:line="111" pos:column="26">updateSpec<pos:position pos:line="111" pos:column="36"/></name></name><argument_list pos:line="111" pos:column="36">()<pos:position pos:line="111" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="112" pos:column="6"/></block></else></if>
}<pos:position pos:line="113" pos:column="2"/></block></function></unit>
