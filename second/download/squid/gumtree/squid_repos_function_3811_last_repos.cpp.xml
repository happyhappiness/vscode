<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3811_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">bool<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">adjustSSL<pos:position pos:line="2" pos:column="10"/></name><parameter_list pos:line="2" pos:column="10">(<parameter><decl><type><name pos:line="2" pos:column="11">SSL<pos:position pos:line="2" pos:column="14"/></name> <modifier pos:line="2" pos:column="15">*<pos:position pos:line="2" pos:column="16"/></modifier></type><name pos:line="2" pos:column="16">ssl<pos:position pos:line="2" pos:column="19"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="21">Security<pos:position pos:line="2" pos:column="29"/></name><operator pos:line="2" pos:column="29">::<pos:position pos:line="2" pos:column="31"/></operator><name pos:line="2" pos:column="31">TlsDetails<pos:position pos:line="2" pos:column="41"/></name><operator pos:line="2" pos:column="41">::<pos:position pos:line="2" pos:column="43"/></operator><name pos:line="2" pos:column="43">Pointer<pos:position pos:line="2" pos:column="50"/></name></name> <specifier pos:line="2" pos:column="51">const<pos:position pos:line="2" pos:column="56"/></specifier> <modifier pos:line="2" pos:column="57">&amp;<pos:position pos:line="2" pos:column="62"/></modifier></type><name pos:line="2" pos:column="58">details<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="67">SBuf<pos:position pos:line="2" pos:column="71"/></name> <modifier pos:line="2" pos:column="72">&amp;<pos:position pos:line="2" pos:column="77"/></modifier></type><name pos:line="2" pos:column="73">helloMessage<pos:position pos:line="2" pos:column="85"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="86"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:if pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">if<pos:position pos:line="4" pos:column="4"/></cpp:directive> <expr><name pos:line="4" pos:column="5">SQUID_USE_OPENSSL_HELLO_OVERWRITE_HACK<pos:position pos:line="4" pos:column="43"/></name></expr></cpp:if>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><operator pos:line="5" pos:column="9">!<pos:position pos:line="5" pos:column="10"/></operator><name pos:line="5" pos:column="10">details<pos:position pos:line="5" pos:column="17"/></name></expr>)<pos:position pos:line="5" pos:column="18"/></condition><then pos:line="5" pos:column="18">
        <block type="pseudo"><return pos:line="6" pos:column="9">return <expr><literal type="boolean" pos:line="6" pos:column="16">false<pos:position pos:line="6" pos:column="21"/></literal></expr>;<pos:position pos:line="6" pos:column="22"/></return></block></then></if>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><operator pos:line="8" pos:column="9">!<pos:position pos:line="8" pos:column="10"/></operator><name><name pos:line="8" pos:column="10">ssl<pos:position pos:line="8" pos:column="13"/></name><operator pos:line="8" pos:column="13">-&gt;<pos:position pos:line="8" pos:column="18"/></operator><name pos:line="8" pos:column="15">s3<pos:position pos:line="8" pos:column="17"/></name></name></expr>)<pos:position pos:line="8" pos:column="18"/></condition><then pos:line="8" pos:column="18"> <block pos:line="8" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">debugs<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><literal type="number" pos:line="9" pos:column="16">83<pos:position pos:line="9" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="20">5<pos:position pos:line="9" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="23">"No SSLv3 data found!"<pos:position pos:line="9" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="47"/></expr_stmt>
        <return pos:line="10" pos:column="9">return <expr><literal type="boolean" pos:line="10" pos:column="16">false<pos:position pos:line="10" pos:column="21"/></literal></expr>;<pos:position pos:line="10" pos:column="22"/></return>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="13" pos:column="5">// If the client supports compression but our context does not support</comment>
    <comment type="line" pos:line="14" pos:column="5">// we can not adjust.</comment>
<cpp:if pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">if<pos:position pos:line="15" pos:column="4"/></cpp:directive> <expr><operator pos:line="15" pos:column="5">!<pos:position pos:line="15" pos:column="6"/></operator><call><name pos:line="15" pos:column="6">defined<pos:position pos:line="15" pos:column="13"/></name><argument_list pos:line="15" pos:column="13">(<argument><expr><name pos:line="15" pos:column="14">OPENSSL_NO_COMP<pos:position pos:line="15" pos:column="29"/></name></expr></argument>)<pos:position pos:line="15" pos:column="30"/></argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><specifier pos:line="16" pos:column="5">const<pos:position pos:line="16" pos:column="10"/></specifier> <name pos:line="16" pos:column="11">bool<pos:position pos:line="16" pos:column="15"/></name></type> <name pos:line="16" pos:column="16">requireCompression<pos:position pos:line="16" pos:column="34"/></name> <init pos:line="16" pos:column="35">= <expr><operator pos:line="16" pos:column="37">(<pos:position pos:line="16" pos:column="38"/></operator><name><name pos:line="16" pos:column="38">details<pos:position pos:line="16" pos:column="45"/></name><operator pos:line="16" pos:column="45">-&gt;<pos:position pos:line="16" pos:column="50"/></operator><name pos:line="16" pos:column="47">compressionSupported<pos:position pos:line="16" pos:column="67"/></name></name> <operator pos:line="16" pos:column="68">&amp;&amp;<pos:position pos:line="16" pos:column="78"/></operator> <name><name pos:line="16" pos:column="71">ssl<pos:position pos:line="16" pos:column="74"/></name><operator pos:line="16" pos:column="74">-&gt;<pos:position pos:line="16" pos:column="79"/></operator><name pos:line="16" pos:column="76">ctx<pos:position pos:line="16" pos:column="79"/></name><operator pos:line="16" pos:column="79">-&gt;<pos:position pos:line="16" pos:column="84"/></operator><name pos:line="16" pos:column="81">comp_methods<pos:position pos:line="16" pos:column="93"/></name></name> <operator pos:line="16" pos:column="94">==<pos:position pos:line="16" pos:column="96"/></operator> <literal type="null" pos:line="16" pos:column="97">nullptr<pos:position pos:line="16" pos:column="104"/></literal><operator pos:line="16" pos:column="104">)<pos:position pos:line="16" pos:column="105"/></operator></expr></init></decl>;<pos:position pos:line="16" pos:column="106"/></decl_stmt>
<cpp:else pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">else<pos:position pos:line="17" pos:column="6"/></cpp:directive></cpp:else>
    <decl_stmt><decl><type><specifier pos:line="18" pos:column="5">const<pos:position pos:line="18" pos:column="10"/></specifier> <name pos:line="18" pos:column="11">bool<pos:position pos:line="18" pos:column="15"/></name></type> <name pos:line="18" pos:column="16">requireCompression<pos:position pos:line="18" pos:column="34"/></name> <init pos:line="18" pos:column="35">= <expr><name><name pos:line="18" pos:column="37">details<pos:position pos:line="18" pos:column="44"/></name><operator pos:line="18" pos:column="44">-&gt;<pos:position pos:line="18" pos:column="49"/></operator><name pos:line="18" pos:column="46">compressionSupported<pos:position pos:line="18" pos:column="66"/></name></name></expr></init></decl>;<pos:position pos:line="18" pos:column="67"/></decl_stmt>
<cpp:endif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">endif<pos:position pos:line="19" pos:column="7"/></cpp:directive></cpp:endif>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">requireCompression<pos:position pos:line="20" pos:column="27"/></name></expr>)<pos:position pos:line="20" pos:column="28"/></condition><then pos:line="20" pos:column="28"> <block pos:line="20" pos:column="29">{
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">debugs<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><literal type="number" pos:line="21" pos:column="16">83<pos:position pos:line="21" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="20">5<pos:position pos:line="21" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="23">"Client Hello Data supports compression, but we do not!"<pos:position pos:line="21" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="81"/></expr_stmt>
        <return pos:line="22" pos:column="9">return <expr><literal type="boolean" pos:line="22" pos:column="16">false<pos:position pos:line="22" pos:column="21"/></literal></expr>;<pos:position pos:line="22" pos:column="22"/></return>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>

<cpp:if pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">if<pos:position pos:line="25" pos:column="4"/></cpp:directive> <expr><operator pos:line="25" pos:column="5">!<pos:position pos:line="25" pos:column="6"/></operator><call><name pos:line="25" pos:column="6">defined<pos:position pos:line="25" pos:column="13"/></name><argument_list pos:line="25" pos:column="13">(<argument><expr><name pos:line="25" pos:column="14">SSL_TLSEXT_HB_ENABLED<pos:position pos:line="25" pos:column="35"/></name></expr></argument>)<pos:position pos:line="25" pos:column="36"/></argument_list></call></expr></cpp:if>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name><name pos:line="26" pos:column="9">details<pos:position pos:line="26" pos:column="16"/></name><operator pos:line="26" pos:column="16">-&gt;<pos:position pos:line="26" pos:column="21"/></operator><name pos:line="26" pos:column="18">doHeartBeats<pos:position pos:line="26" pos:column="30"/></name></name></expr>)<pos:position pos:line="26" pos:column="31"/></condition><then pos:line="26" pos:column="31"> <block pos:line="26" pos:column="32">{
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">debugs<pos:position pos:line="27" pos:column="15"/></name><argument_list pos:line="27" pos:column="15">(<argument><expr><literal type="number" pos:line="27" pos:column="16">83<pos:position pos:line="27" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="20">5<pos:position pos:line="27" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="23">"Client Hello Data supports HeartBeats but we do not support!"<pos:position pos:line="27" pos:column="85"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="87"/></expr_stmt>
        <return pos:line="28" pos:column="9">return <expr><literal type="boolean" pos:line="28" pos:column="16">false<pos:position pos:line="28" pos:column="21"/></literal></expr>;<pos:position pos:line="28" pos:column="22"/></return>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>
<cpp:endif pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">endif<pos:position pos:line="30" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><name><name pos:line="32" pos:column="9">details<pos:position pos:line="32" pos:column="16"/></name><operator pos:line="32" pos:column="16">-&gt;<pos:position pos:line="32" pos:column="21"/></operator><name pos:line="32" pos:column="18">unsupportedExtensions<pos:position pos:line="32" pos:column="39"/></name></name></expr>)<pos:position pos:line="32" pos:column="40"/></condition><then pos:line="32" pos:column="40"> <block pos:line="32" pos:column="41">{
        <expr_stmt><expr><call><name pos:line="33" pos:column="9">debugs<pos:position pos:line="33" pos:column="15"/></name><argument_list pos:line="33" pos:column="15">(<argument><expr><literal type="number" pos:line="33" pos:column="16">83<pos:position pos:line="33" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="20">5<pos:position pos:line="33" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="23">"Client Hello contains extensions that we do not support!"<pos:position pos:line="33" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="83"/></expr_stmt>
        <return pos:line="34" pos:column="9">return <expr><literal type="boolean" pos:line="34" pos:column="16">false<pos:position pos:line="34" pos:column="21"/></literal></expr>;<pos:position pos:line="34" pos:column="22"/></return>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="37" pos:column="5">SSL3_BUFFER<pos:position pos:line="37" pos:column="16"/></name> <modifier pos:line="37" pos:column="17">*<pos:position pos:line="37" pos:column="18"/></modifier></type><name pos:line="37" pos:column="18">wb<pos:position pos:line="37" pos:column="20"/></name><init pos:line="37" pos:column="20">=<expr><operator pos:line="37" pos:column="21">&amp;<pos:position pos:line="37" pos:column="26"/></operator><operator pos:line="37" pos:column="22">(<pos:position pos:line="37" pos:column="23"/></operator><name><name pos:line="37" pos:column="23">ssl<pos:position pos:line="37" pos:column="26"/></name><operator pos:line="37" pos:column="26">-&gt;<pos:position pos:line="37" pos:column="31"/></operator><name pos:line="37" pos:column="28">s3<pos:position pos:line="37" pos:column="30"/></name><operator pos:line="37" pos:column="30">-&gt;<pos:position pos:line="37" pos:column="35"/></operator><name pos:line="37" pos:column="32">wbuf<pos:position pos:line="37" pos:column="36"/></name></name><operator pos:line="37" pos:column="36">)<pos:position pos:line="37" pos:column="37"/></operator></expr></init></decl>;<pos:position pos:line="37" pos:column="38"/></decl_stmt>
    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><name><name pos:line="38" pos:column="9">wb<pos:position pos:line="38" pos:column="11"/></name><operator pos:line="38" pos:column="11">-&gt;<pos:position pos:line="38" pos:column="16"/></operator><name pos:line="38" pos:column="13">len<pos:position pos:line="38" pos:column="16"/></name></name> <operator pos:line="38" pos:column="17">&lt;<pos:position pos:line="38" pos:column="21"/></operator> <operator pos:line="38" pos:column="19">(<pos:position pos:line="38" pos:column="20"/></operator><name pos:line="38" pos:column="20">size_t<pos:position pos:line="38" pos:column="26"/></name><operator pos:line="38" pos:column="26">)<pos:position pos:line="38" pos:column="27"/></operator><call><name><name pos:line="38" pos:column="27">helloMessage<pos:position pos:line="38" pos:column="39"/></name><operator pos:line="38" pos:column="39">.<pos:position pos:line="38" pos:column="40"/></operator><name pos:line="38" pos:column="40">length<pos:position pos:line="38" pos:column="46"/></name></name><argument_list pos:line="38" pos:column="46">()<pos:position pos:line="38" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="49"/></condition><then pos:line="38" pos:column="49"> <block pos:line="38" pos:column="50">{
        <expr_stmt><expr><call><name pos:line="39" pos:column="9">debugs<pos:position pos:line="39" pos:column="15"/></name><argument_list pos:line="39" pos:column="15">(<argument><expr><literal type="number" pos:line="39" pos:column="16">83<pos:position pos:line="39" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="20">5<pos:position pos:line="39" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="23">"Client Hello exceeds OpenSSL buffer: "<pos:position pos:line="39" pos:column="62"/></literal> <operator pos:line="39" pos:column="63">&lt;&lt;<pos:position pos:line="39" pos:column="71"/></operator> <call><name><name pos:line="39" pos:column="66">helloMessage<pos:position pos:line="39" pos:column="78"/></name><operator pos:line="39" pos:column="78">.<pos:position pos:line="39" pos:column="79"/></operator><name pos:line="39" pos:column="79">length<pos:position pos:line="39" pos:column="85"/></name></name><argument_list pos:line="39" pos:column="85">()<pos:position pos:line="39" pos:column="87"/></argument_list></call> <operator pos:line="39" pos:column="88">&lt;&lt;<pos:position pos:line="39" pos:column="96"/></operator> <literal type="string" pos:line="39" pos:column="91">" &gt;= "<pos:position pos:line="39" pos:column="100"/></literal> <operator pos:line="39" pos:column="98">&lt;&lt;<pos:position pos:line="39" pos:column="106"/></operator> <name><name pos:line="39" pos:column="101">wb<pos:position pos:line="39" pos:column="103"/></name><operator pos:line="39" pos:column="103">-&gt;<pos:position pos:line="39" pos:column="108"/></operator><name pos:line="39" pos:column="105">len<pos:position pos:line="39" pos:column="108"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="109"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="110"/></expr_stmt>
        <return pos:line="40" pos:column="9">return <expr><literal type="boolean" pos:line="40" pos:column="16">false<pos:position pos:line="40" pos:column="21"/></literal></expr>;<pos:position pos:line="40" pos:column="22"/></return>
    }<pos:position pos:line="41" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="43" pos:column="5">/* Check whether all on-the-wire ciphers are supported by OpenSSL. */</comment>

    <decl_stmt><decl><type><specifier pos:line="45" pos:column="5">const<pos:position pos:line="45" pos:column="10"/></specifier> <specifier pos:line="45" pos:column="11">auto<pos:position pos:line="45" pos:column="15"/></specifier> <modifier pos:line="45" pos:column="16">&amp;<pos:position pos:line="45" pos:column="21"/></modifier></type><name pos:line="45" pos:column="17">wireCiphers<pos:position pos:line="45" pos:column="28"/></name> <init pos:line="45" pos:column="29">= <expr><name><name pos:line="45" pos:column="31">details<pos:position pos:line="45" pos:column="38"/></name><operator pos:line="45" pos:column="38">-&gt;<pos:position pos:line="45" pos:column="43"/></operator><name pos:line="45" pos:column="40">ciphers<pos:position pos:line="45" pos:column="47"/></name></name></expr></init></decl>;<pos:position pos:line="45" pos:column="48"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="46" pos:column="5">Security<pos:position pos:line="46" pos:column="13"/></name><operator pos:line="46" pos:column="13">::<pos:position pos:line="46" pos:column="15"/></operator><name pos:line="46" pos:column="15">TlsDetails<pos:position pos:line="46" pos:column="25"/></name><operator pos:line="46" pos:column="25">::<pos:position pos:line="46" pos:column="27"/></operator><name pos:line="46" pos:column="27">Ciphers<pos:position pos:line="46" pos:column="34"/></name><operator pos:line="46" pos:column="34">::<pos:position pos:line="46" pos:column="36"/></operator><name pos:line="46" pos:column="36">size_type<pos:position pos:line="46" pos:column="45"/></name></name></type> <name pos:line="46" pos:column="46">ciphersToFind<pos:position pos:line="46" pos:column="59"/></name> <init pos:line="46" pos:column="60">= <expr><call><name><name pos:line="46" pos:column="62">wireCiphers<pos:position pos:line="46" pos:column="73"/></name><operator pos:line="46" pos:column="73">.<pos:position pos:line="46" pos:column="74"/></operator><name pos:line="46" pos:column="74">size<pos:position pos:line="46" pos:column="78"/></name></name><argument_list pos:line="46" pos:column="78">()<pos:position pos:line="46" pos:column="80"/></argument_list></call></expr></init></decl>;<pos:position pos:line="46" pos:column="81"/></decl_stmt>

    <comment type="line" pos:line="48" pos:column="5">// RFC 5746: "TLS_EMPTY_RENEGOTIATION_INFO_SCSV is not a true cipher suite".</comment>
    <comment type="line" pos:line="49" pos:column="5">// It is commonly seen on the wire, including in from-OpenSSL traffic, but</comment>
    <comment type="line" pos:line="50" pos:column="5">// SSL_get_ciphers() does not return this _pseudo_ cipher suite in my tests.</comment>
    <comment type="line" pos:line="51" pos:column="5">// If OpenSSL supports scsvCipher, we count it (at most once) further below.</comment>
<cpp:if pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">if<pos:position pos:line="52" pos:column="4"/></cpp:directive> <expr><call><name pos:line="52" pos:column="5">defined<pos:position pos:line="52" pos:column="12"/></name><argument_list pos:line="52" pos:column="12">(<argument><expr><name pos:line="52" pos:column="13">TLSEXT_TYPE_renegotiate<pos:position pos:line="52" pos:column="36"/></name></expr></argument>)<pos:position pos:line="52" pos:column="37"/></argument_list></call></expr></cpp:if>
    <comment type="line" pos:line="53" pos:column="5">// the 0x00FFFF mask converts 3-byte OpenSSL cipher to our 2-byte cipher</comment>
    <decl_stmt><decl><type><specifier pos:line="54" pos:column="5">const<pos:position pos:line="54" pos:column="10"/></specifier> <name pos:line="54" pos:column="11">uint16_t<pos:position pos:line="54" pos:column="19"/></name></type> <name pos:line="54" pos:column="20">scsvCipher<pos:position pos:line="54" pos:column="30"/></name> <init pos:line="54" pos:column="31">= <expr><name pos:line="54" pos:column="33">SSL3_CK_SCSV<pos:position pos:line="54" pos:column="45"/></name> <operator pos:line="54" pos:column="46">&amp;<pos:position pos:line="54" pos:column="51"/></operator> <literal type="number" pos:line="54" pos:column="48">0x00FFFF<pos:position pos:line="54" pos:column="56"/></literal></expr></init></decl>;<pos:position pos:line="54" pos:column="57"/></decl_stmt>
<cpp:else pos:line="55" pos:column="1">#<cpp:directive pos:line="55" pos:column="2">else<pos:position pos:line="55" pos:column="6"/></cpp:directive></cpp:else>
    <decl_stmt><decl><type><specifier pos:line="56" pos:column="5">const<pos:position pos:line="56" pos:column="10"/></specifier> <name pos:line="56" pos:column="11">uint16_t<pos:position pos:line="56" pos:column="19"/></name></type> <name pos:line="56" pos:column="20">scsvCipher<pos:position pos:line="56" pos:column="30"/></name> <init pos:line="56" pos:column="31">= <expr><literal type="number" pos:line="56" pos:column="33">0<pos:position pos:line="56" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="56" pos:column="35"/></decl_stmt>
<cpp:endif pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">endif<pos:position pos:line="57" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="59" pos:column="5">STACK_OF<pos:position pos:line="59" pos:column="13"/></name><argument_list pos:line="59" pos:column="13">(<argument><expr><name pos:line="59" pos:column="14">SSL_CIPHER<pos:position pos:line="59" pos:column="24"/></name></expr></argument>)<pos:position pos:line="59" pos:column="25"/></argument_list></call> <operator pos:line="59" pos:column="26">*<pos:position pos:line="59" pos:column="27"/></operator><name pos:line="59" pos:column="27">cipher_stack<pos:position pos:line="59" pos:column="39"/></name> <operator pos:line="59" pos:column="40">=<pos:position pos:line="59" pos:column="41"/></operator> <call><name pos:line="59" pos:column="42">SSL_get_ciphers<pos:position pos:line="59" pos:column="57"/></name><argument_list pos:line="59" pos:column="57">(<argument><expr><name pos:line="59" pos:column="58">ssl<pos:position pos:line="59" pos:column="61"/></name></expr></argument>)<pos:position pos:line="59" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="63"/></expr_stmt>
    <decl_stmt><decl><type><specifier pos:line="60" pos:column="5">const<pos:position pos:line="60" pos:column="10"/></specifier> <name pos:line="60" pos:column="11">int<pos:position pos:line="60" pos:column="14"/></name></type> <name pos:line="60" pos:column="15">supportedCipherCount<pos:position pos:line="60" pos:column="35"/></name> <init pos:line="60" pos:column="36">= <expr><call><name pos:line="60" pos:column="38">sk_SSL_CIPHER_num<pos:position pos:line="60" pos:column="55"/></name><argument_list pos:line="60" pos:column="55">(<argument><expr><name pos:line="60" pos:column="56">cipher_stack<pos:position pos:line="60" pos:column="68"/></name></expr></argument>)<pos:position pos:line="60" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="60" pos:column="70"/></decl_stmt>
    <for pos:line="61" pos:column="5">for <control pos:line="61" pos:column="9">(<init><decl><type><name pos:line="61" pos:column="10">int<pos:position pos:line="61" pos:column="13"/></name></type> <name pos:line="61" pos:column="14">idx<pos:position pos:line="61" pos:column="17"/></name> <init pos:line="61" pos:column="18">= <expr><literal type="number" pos:line="61" pos:column="20">0<pos:position pos:line="61" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="61" pos:column="22"/></init> <condition><expr><name><name pos:line="61" pos:column="23">idx<pos:position pos:line="61" pos:column="26"/></name> <argument_list type="generic" pos:line="61" pos:column="27">&lt; <argument><expr><name pos:line="61" pos:column="29">supportedCipherCount<pos:position pos:line="61" pos:column="49"/></name> <operator pos:line="61" pos:column="50">&amp;&amp;<pos:position pos:line="61" pos:column="60"/></operator> <name pos:line="61" pos:column="53">ciphersToFind<pos:position pos:line="61" pos:column="66"/></name></expr></argument> &gt;<pos:position pos:line="61" pos:column="71"/></argument_list></name> <literal type="number" pos:line="61" pos:column="69">0<pos:position pos:line="61" pos:column="70"/></literal></expr>;<pos:position pos:line="61" pos:column="71"/></condition> <incr><expr><operator pos:line="61" pos:column="72">++<pos:position pos:line="61" pos:column="74"/></operator><name pos:line="61" pos:column="74">idx<pos:position pos:line="61" pos:column="77"/></name></expr></incr>)<pos:position pos:line="61" pos:column="78"/></control> <block pos:line="61" pos:column="79">{
        <decl_stmt><decl><type><specifier pos:line="62" pos:column="9">const<pos:position pos:line="62" pos:column="14"/></specifier> <name pos:line="62" pos:column="15">SSL_CIPHER<pos:position pos:line="62" pos:column="25"/></name> <modifier pos:line="62" pos:column="26">*<pos:position pos:line="62" pos:column="27"/></modifier></type><name pos:line="62" pos:column="27">cipher<pos:position pos:line="62" pos:column="33"/></name> <init pos:line="62" pos:column="34">= <expr><call><name pos:line="62" pos:column="36">sk_SSL_CIPHER_value<pos:position pos:line="62" pos:column="55"/></name><argument_list pos:line="62" pos:column="55">(<argument><expr><name pos:line="62" pos:column="56">cipher_stack<pos:position pos:line="62" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="70">idx<pos:position pos:line="62" pos:column="73"/></name></expr></argument>)<pos:position pos:line="62" pos:column="74"/></argument_list></call></expr></init></decl>;<pos:position pos:line="62" pos:column="75"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="63" pos:column="9">const<pos:position pos:line="63" pos:column="14"/></specifier> <specifier pos:line="63" pos:column="15">auto<pos:position pos:line="63" pos:column="19"/></specifier></type> <name pos:line="63" pos:column="20">id<pos:position pos:line="63" pos:column="22"/></name> <init pos:line="63" pos:column="23">= <expr><call><name pos:line="63" pos:column="25">SSL_CIPHER_get_id<pos:position pos:line="63" pos:column="42"/></name><argument_list pos:line="63" pos:column="42">(<argument><expr><name pos:line="63" pos:column="43">cipher<pos:position pos:line="63" pos:column="49"/></name></expr></argument>)<pos:position pos:line="63" pos:column="50"/></argument_list></call> <operator pos:line="63" pos:column="51">&amp;<pos:position pos:line="63" pos:column="56"/></operator> <literal type="number" pos:line="63" pos:column="53">0x00FFFF<pos:position pos:line="63" pos:column="61"/></literal></expr></init></decl>;<pos:position pos:line="63" pos:column="62"/></decl_stmt>
        <if pos:line="64" pos:column="9">if <condition pos:line="64" pos:column="12">(<expr><call><name><name pos:line="64" pos:column="13">wireCiphers<pos:position pos:line="64" pos:column="24"/></name><operator pos:line="64" pos:column="24">.<pos:position pos:line="64" pos:column="25"/></operator><name pos:line="64" pos:column="25">find<pos:position pos:line="64" pos:column="29"/></name></name><argument_list pos:line="64" pos:column="29">(<argument><expr><name pos:line="64" pos:column="30">id<pos:position pos:line="64" pos:column="32"/></name></expr></argument>)<pos:position pos:line="64" pos:column="33"/></argument_list></call> <operator pos:line="64" pos:column="34">!=<pos:position pos:line="64" pos:column="36"/></operator> <call><name><name pos:line="64" pos:column="37">wireCiphers<pos:position pos:line="64" pos:column="48"/></name><operator pos:line="64" pos:column="48">.<pos:position pos:line="64" pos:column="49"/></operator><name pos:line="64" pos:column="49">end<pos:position pos:line="64" pos:column="52"/></name></name><argument_list pos:line="64" pos:column="52">()<pos:position pos:line="64" pos:column="54"/></argument_list></call> <operator pos:line="64" pos:column="55">&amp;&amp;<pos:position pos:line="64" pos:column="65"/></operator> <operator pos:line="64" pos:column="58">(<pos:position pos:line="64" pos:column="59"/></operator><operator pos:line="64" pos:column="59">!<pos:position pos:line="64" pos:column="60"/></operator><name pos:line="64" pos:column="60">scsvCipher<pos:position pos:line="64" pos:column="70"/></name> <operator pos:line="64" pos:column="71">||<pos:position pos:line="64" pos:column="73"/></operator> <name pos:line="64" pos:column="74">id<pos:position pos:line="64" pos:column="76"/></name> <operator pos:line="64" pos:column="77">!=<pos:position pos:line="64" pos:column="79"/></operator> <name pos:line="64" pos:column="80">scsvCipher<pos:position pos:line="64" pos:column="90"/></name><operator pos:line="64" pos:column="90">)<pos:position pos:line="64" pos:column="91"/></operator></expr>)<pos:position pos:line="64" pos:column="92"/></condition><then pos:line="64" pos:column="92">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="65" pos:column="13">--<pos:position pos:line="65" pos:column="15"/></operator><name pos:line="65" pos:column="15">ciphersToFind<pos:position pos:line="65" pos:column="28"/></name></expr>;<pos:position pos:line="65" pos:column="29"/></expr_stmt></block></then></if>
    }<pos:position pos:line="66" pos:column="6"/></block></for>

    <if pos:line="68" pos:column="5">if <condition pos:line="68" pos:column="8">(<expr><name pos:line="68" pos:column="9">ciphersToFind<pos:position pos:line="68" pos:column="22"/></name> <operator pos:line="68" pos:column="23">&gt;<pos:position pos:line="68" pos:column="27"/></operator> <literal type="number" pos:line="68" pos:column="25">0<pos:position pos:line="68" pos:column="26"/></literal> <operator pos:line="68" pos:column="27">&amp;&amp;<pos:position pos:line="68" pos:column="37"/></operator> <name pos:line="68" pos:column="30">scsvCipher<pos:position pos:line="68" pos:column="40"/></name> <operator pos:line="68" pos:column="41">&amp;&amp;<pos:position pos:line="68" pos:column="51"/></operator> <call><name><name pos:line="68" pos:column="44">wireCiphers<pos:position pos:line="68" pos:column="55"/></name><operator pos:line="68" pos:column="55">.<pos:position pos:line="68" pos:column="56"/></operator><name pos:line="68" pos:column="56">find<pos:position pos:line="68" pos:column="60"/></name></name><argument_list pos:line="68" pos:column="60">(<argument><expr><name pos:line="68" pos:column="61">scsvCipher<pos:position pos:line="68" pos:column="71"/></name></expr></argument>)<pos:position pos:line="68" pos:column="72"/></argument_list></call> <operator pos:line="68" pos:column="73">!=<pos:position pos:line="68" pos:column="75"/></operator> <call><name><name pos:line="68" pos:column="76">wireCiphers<pos:position pos:line="68" pos:column="87"/></name><operator pos:line="68" pos:column="87">.<pos:position pos:line="68" pos:column="88"/></operator><name pos:line="68" pos:column="88">end<pos:position pos:line="68" pos:column="91"/></name></name><argument_list pos:line="68" pos:column="91">()<pos:position pos:line="68" pos:column="93"/></argument_list></call></expr>)<pos:position pos:line="68" pos:column="94"/></condition><then pos:line="68" pos:column="94">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="69" pos:column="9">--<pos:position pos:line="69" pos:column="11"/></operator><name pos:line="69" pos:column="11">ciphersToFind<pos:position pos:line="69" pos:column="24"/></name></expr>;<pos:position pos:line="69" pos:column="25"/></expr_stmt></block></then></if>

    <if pos:line="71" pos:column="5">if <condition pos:line="71" pos:column="8">(<expr><name pos:line="71" pos:column="9">ciphersToFind<pos:position pos:line="71" pos:column="22"/></name> <operator pos:line="71" pos:column="23">&gt;<pos:position pos:line="71" pos:column="27"/></operator> <literal type="number" pos:line="71" pos:column="25">0<pos:position pos:line="71" pos:column="26"/></literal></expr>)<pos:position pos:line="71" pos:column="27"/></condition><then pos:line="71" pos:column="27"> <block pos:line="71" pos:column="28">{
        <comment type="line" pos:line="72" pos:column="9">// TODO: Add slowlyReportUnsupportedCiphers() to slowly find and report each of them</comment>
        <expr_stmt><expr><call><name pos:line="73" pos:column="9">debugs<pos:position pos:line="73" pos:column="15"/></name><argument_list pos:line="73" pos:column="15">(<argument><expr><literal type="number" pos:line="73" pos:column="16">83<pos:position pos:line="73" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="73" pos:column="20">5<pos:position pos:line="73" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="23">"Client Hello Data has "<pos:position pos:line="73" pos:column="47"/></literal> <operator pos:line="73" pos:column="48">&lt;&lt;<pos:position pos:line="73" pos:column="56"/></operator> <name pos:line="73" pos:column="51">ciphersToFind<pos:position pos:line="73" pos:column="64"/></name> <operator pos:line="73" pos:column="65">&lt;&lt;<pos:position pos:line="73" pos:column="73"/></operator> <literal type="string" pos:line="73" pos:column="68">" ciphers that we do not support!"<pos:position pos:line="73" pos:column="102"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="103"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="104"/></expr_stmt>
        <return pos:line="74" pos:column="9">return <expr><literal type="boolean" pos:line="74" pos:column="16">false<pos:position pos:line="74" pos:column="21"/></literal></expr>;<pos:position pos:line="74" pos:column="22"/></return>
    }<pos:position pos:line="75" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="77" pos:column="5">debugs<pos:position pos:line="77" pos:column="11"/></name><argument_list pos:line="77" pos:column="11">(<argument><expr><literal type="number" pos:line="77" pos:column="12">83<pos:position pos:line="77" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="77" pos:column="16">5<pos:position pos:line="77" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="77" pos:column="19">"OpenSSL SSL struct will be adjusted to mimic client hello data!"<pos:position pos:line="77" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="86"/></expr_stmt>

    <comment type="line" pos:line="79" pos:column="5">//Adjust ssl structure data.</comment>
    <comment type="line" pos:line="80" pos:column="5">// We need to fix the random in SSL struct:</comment>
    <if pos:line="81" pos:column="5">if <condition pos:line="81" pos:column="8">(<expr><call><name><name pos:line="81" pos:column="9">details<pos:position pos:line="81" pos:column="16"/></name><operator pos:line="81" pos:column="16">-&gt;<pos:position pos:line="81" pos:column="21"/></operator><name pos:line="81" pos:column="18">clientRandom<pos:position pos:line="81" pos:column="30"/></name><operator pos:line="81" pos:column="30">.<pos:position pos:line="81" pos:column="31"/></operator><name pos:line="81" pos:column="31">length<pos:position pos:line="81" pos:column="37"/></name></name><argument_list pos:line="81" pos:column="37">()<pos:position pos:line="81" pos:column="39"/></argument_list></call> <operator pos:line="81" pos:column="40">==<pos:position pos:line="81" pos:column="42"/></operator> <name pos:line="81" pos:column="43">SSL3_RANDOM_SIZE<pos:position pos:line="81" pos:column="59"/></name></expr>)<pos:position pos:line="81" pos:column="60"/></condition><then pos:line="81" pos:column="60">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="82" pos:column="9">memcpy<pos:position pos:line="82" pos:column="15"/></name><argument_list pos:line="82" pos:column="15">(<argument><expr><name><name pos:line="82" pos:column="16">ssl<pos:position pos:line="82" pos:column="19"/></name><operator pos:line="82" pos:column="19">-&gt;<pos:position pos:line="82" pos:column="24"/></operator><name pos:line="82" pos:column="21">s3<pos:position pos:line="82" pos:column="23"/></name><operator pos:line="82" pos:column="23">-&gt;<pos:position pos:line="82" pos:column="28"/></operator><name pos:line="82" pos:column="25">client_random<pos:position pos:line="82" pos:column="38"/></name></name></expr></argument>, <argument><expr><call><name><name pos:line="82" pos:column="40">details<pos:position pos:line="82" pos:column="47"/></name><operator pos:line="82" pos:column="47">-&gt;<pos:position pos:line="82" pos:column="52"/></operator><name pos:line="82" pos:column="49">clientRandom<pos:position pos:line="82" pos:column="61"/></name><operator pos:line="82" pos:column="61">.<pos:position pos:line="82" pos:column="62"/></operator><name pos:line="82" pos:column="62">c_str<pos:position pos:line="82" pos:column="67"/></name></name><argument_list pos:line="82" pos:column="67">()<pos:position pos:line="82" pos:column="69"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="82" pos:column="71">SSL3_RANDOM_SIZE<pos:position pos:line="82" pos:column="87"/></name></expr></argument>)<pos:position pos:line="82" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="89"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="83" pos:column="5">memcpy<pos:position pos:line="83" pos:column="11"/></name><argument_list pos:line="83" pos:column="11">(<argument><expr><name><name pos:line="83" pos:column="12">wb<pos:position pos:line="83" pos:column="14"/></name><operator pos:line="83" pos:column="14">-&gt;<pos:position pos:line="83" pos:column="19"/></operator><name pos:line="83" pos:column="16">buf<pos:position pos:line="83" pos:column="19"/></name></name></expr></argument>, <argument><expr><call><name><name pos:line="83" pos:column="21">helloMessage<pos:position pos:line="83" pos:column="33"/></name><operator pos:line="83" pos:column="33">.<pos:position pos:line="83" pos:column="34"/></operator><name pos:line="83" pos:column="34">rawContent<pos:position pos:line="83" pos:column="44"/></name></name><argument_list pos:line="83" pos:column="44">()<pos:position pos:line="83" pos:column="46"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="83" pos:column="48">helloMessage<pos:position pos:line="83" pos:column="60"/></name><operator pos:line="83" pos:column="60">.<pos:position pos:line="83" pos:column="61"/></operator><name pos:line="83" pos:column="61">length<pos:position pos:line="83" pos:column="67"/></name></name><argument_list pos:line="83" pos:column="67">()<pos:position pos:line="83" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="83" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="71"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="84" pos:column="5">wb<pos:position pos:line="84" pos:column="7"/></name><operator pos:line="84" pos:column="7">-&gt;<pos:position pos:line="84" pos:column="12"/></operator><name pos:line="84" pos:column="9">left<pos:position pos:line="84" pos:column="13"/></name></name> <operator pos:line="84" pos:column="14">=<pos:position pos:line="84" pos:column="15"/></operator> <call><name><name pos:line="84" pos:column="16">helloMessage<pos:position pos:line="84" pos:column="28"/></name><operator pos:line="84" pos:column="28">.<pos:position pos:line="84" pos:column="29"/></operator><name pos:line="84" pos:column="29">length<pos:position pos:line="84" pos:column="35"/></name></name><argument_list pos:line="84" pos:column="35">()<pos:position pos:line="84" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="38"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="86" pos:column="5">size_t<pos:position pos:line="86" pos:column="11"/></name></type> <name pos:line="86" pos:column="12">mainHelloSize<pos:position pos:line="86" pos:column="25"/></name> <init pos:line="86" pos:column="26">= <expr><call><name><name pos:line="86" pos:column="28">helloMessage<pos:position pos:line="86" pos:column="40"/></name><operator pos:line="86" pos:column="40">.<pos:position pos:line="86" pos:column="41"/></operator><name pos:line="86" pos:column="41">length<pos:position pos:line="86" pos:column="47"/></name></name><argument_list pos:line="86" pos:column="47">()<pos:position pos:line="86" pos:column="49"/></argument_list></call> <operator pos:line="86" pos:column="50">-<pos:position pos:line="86" pos:column="51"/></operator> <literal type="number" pos:line="86" pos:column="52">5<pos:position pos:line="86" pos:column="53"/></literal></expr></init></decl>;<pos:position pos:line="86" pos:column="54"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="87" pos:column="5">const<pos:position pos:line="87" pos:column="10"/></specifier> <name pos:line="87" pos:column="11">char<pos:position pos:line="87" pos:column="15"/></name> <modifier pos:line="87" pos:column="16">*<pos:position pos:line="87" pos:column="17"/></modifier></type><name pos:line="87" pos:column="17">mainHello<pos:position pos:line="87" pos:column="26"/></name> <init pos:line="87" pos:column="27">= <expr><call><name><name pos:line="87" pos:column="29">helloMessage<pos:position pos:line="87" pos:column="41"/></name><operator pos:line="87" pos:column="41">.<pos:position pos:line="87" pos:column="42"/></operator><name pos:line="87" pos:column="42">rawContent<pos:position pos:line="87" pos:column="52"/></name></name><argument_list pos:line="87" pos:column="52">()<pos:position pos:line="87" pos:column="54"/></argument_list></call> <operator pos:line="87" pos:column="55">+<pos:position pos:line="87" pos:column="56"/></operator> <literal type="number" pos:line="87" pos:column="57">5<pos:position pos:line="87" pos:column="58"/></literal></expr></init></decl>;<pos:position pos:line="87" pos:column="59"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="88" pos:column="5">assert<pos:position pos:line="88" pos:column="11"/></name><argument_list pos:line="88" pos:column="11">(<argument><expr><operator pos:line="88" pos:column="12">(<pos:position pos:line="88" pos:column="13"/></operator><name pos:line="88" pos:column="13">size_t<pos:position pos:line="88" pos:column="19"/></name><operator pos:line="88" pos:column="19">)<pos:position pos:line="88" pos:column="20"/></operator><name><name pos:line="88" pos:column="20">ssl<pos:position pos:line="88" pos:column="23"/></name><operator pos:line="88" pos:column="23">-&gt;<pos:position pos:line="88" pos:column="28"/></operator><name pos:line="88" pos:column="25">init_buf<pos:position pos:line="88" pos:column="33"/></name><operator pos:line="88" pos:column="33">-&gt;<pos:position pos:line="88" pos:column="38"/></operator><name pos:line="88" pos:column="35">max<pos:position pos:line="88" pos:column="38"/></name></name> <operator pos:line="88" pos:column="39">&gt;<pos:position pos:line="88" pos:column="43"/></operator> <name pos:line="88" pos:column="41">mainHelloSize<pos:position pos:line="88" pos:column="54"/></name></expr></argument>)<pos:position pos:line="88" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="56"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="89" pos:column="5">memcpy<pos:position pos:line="89" pos:column="11"/></name><argument_list pos:line="89" pos:column="11">(<argument><expr><name><name pos:line="89" pos:column="12">ssl<pos:position pos:line="89" pos:column="15"/></name><operator pos:line="89" pos:column="15">-&gt;<pos:position pos:line="89" pos:column="20"/></operator><name pos:line="89" pos:column="17">init_buf<pos:position pos:line="89" pos:column="25"/></name><operator pos:line="89" pos:column="25">-&gt;<pos:position pos:line="89" pos:column="30"/></operator><name pos:line="89" pos:column="27">data<pos:position pos:line="89" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="33">mainHello<pos:position pos:line="89" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="44">mainHelloSize<pos:position pos:line="89" pos:column="57"/></name></expr></argument>)<pos:position pos:line="89" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="59"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="90" pos:column="5">debugs<pos:position pos:line="90" pos:column="11"/></name><argument_list pos:line="90" pos:column="11">(<argument><expr><literal type="number" pos:line="90" pos:column="12">83<pos:position pos:line="90" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="90" pos:column="16">5<pos:position pos:line="90" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="90" pos:column="19">"Hello Data init and adjustd sizes :"<pos:position pos:line="90" pos:column="56"/></literal> <operator pos:line="90" pos:column="57">&lt;&lt;<pos:position pos:line="90" pos:column="65"/></operator> <name><name pos:line="90" pos:column="60">ssl<pos:position pos:line="90" pos:column="63"/></name><operator pos:line="90" pos:column="63">-&gt;<pos:position pos:line="90" pos:column="68"/></operator><name pos:line="90" pos:column="65">init_num<pos:position pos:line="90" pos:column="73"/></name></name> <operator pos:line="90" pos:column="74">&lt;&lt;<pos:position pos:line="90" pos:column="82"/></operator> <literal type="string" pos:line="90" pos:column="77">" = "<pos:position pos:line="90" pos:column="82"/></literal><operator pos:line="90" pos:column="82">&lt;&lt;<pos:position pos:line="90" pos:column="90"/></operator> <name pos:line="90" pos:column="85">mainHelloSize<pos:position pos:line="90" pos:column="98"/></name></expr></argument>)<pos:position pos:line="90" pos:column="99"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="100"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="91" pos:column="5">ssl<pos:position pos:line="91" pos:column="8"/></name><operator pos:line="91" pos:column="8">-&gt;<pos:position pos:line="91" pos:column="13"/></operator><name pos:line="91" pos:column="10">init_num<pos:position pos:line="91" pos:column="18"/></name></name> <operator pos:line="91" pos:column="19">=<pos:position pos:line="91" pos:column="20"/></operator> <name pos:line="91" pos:column="21">mainHelloSize<pos:position pos:line="91" pos:column="34"/></name></expr>;<pos:position pos:line="91" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="92" pos:column="5">ssl<pos:position pos:line="92" pos:column="8"/></name><operator pos:line="92" pos:column="8">-&gt;<pos:position pos:line="92" pos:column="13"/></operator><name pos:line="92" pos:column="10">s3<pos:position pos:line="92" pos:column="12"/></name><operator pos:line="92" pos:column="12">-&gt;<pos:position pos:line="92" pos:column="17"/></operator><name pos:line="92" pos:column="14">wpend_ret<pos:position pos:line="92" pos:column="23"/></name></name> <operator pos:line="92" pos:column="24">=<pos:position pos:line="92" pos:column="25"/></operator> <name pos:line="92" pos:column="26">mainHelloSize<pos:position pos:line="92" pos:column="39"/></name></expr>;<pos:position pos:line="92" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="93" pos:column="5">ssl<pos:position pos:line="93" pos:column="8"/></name><operator pos:line="93" pos:column="8">-&gt;<pos:position pos:line="93" pos:column="13"/></operator><name pos:line="93" pos:column="10">s3<pos:position pos:line="93" pos:column="12"/></name><operator pos:line="93" pos:column="12">-&gt;<pos:position pos:line="93" pos:column="17"/></operator><name pos:line="93" pos:column="14">wpend_tot<pos:position pos:line="93" pos:column="23"/></name></name> <operator pos:line="93" pos:column="24">=<pos:position pos:line="93" pos:column="25"/></operator> <name pos:line="93" pos:column="26">mainHelloSize<pos:position pos:line="93" pos:column="39"/></name></expr>;<pos:position pos:line="93" pos:column="40"/></expr_stmt>
    <return pos:line="94" pos:column="5">return <expr><literal type="boolean" pos:line="94" pos:column="12">true<pos:position pos:line="94" pos:column="16"/></literal></expr>;<pos:position pos:line="94" pos:column="17"/></return>
<cpp:else pos:line="95" pos:column="1">#<cpp:directive pos:line="95" pos:column="2">else<pos:position pos:line="95" pos:column="6"/></cpp:directive></cpp:else>
    <return pos:line="96" pos:column="5">return <expr><literal type="boolean" pos:line="96" pos:column="12">false<pos:position pos:line="96" pos:column="17"/></literal></expr>;<pos:position pos:line="96" pos:column="18"/></return>
<cpp:endif pos:line="97" pos:column="1">#<cpp:directive pos:line="97" pos:column="2">endif<pos:position pos:line="97" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="98" pos:column="2"/></block></function></unit>
