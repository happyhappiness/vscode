<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_395_squid-3.1.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">result_recv<pos:position pos:line="2" pos:column="12"/></name><parameter_list pos:line="2" pos:column="12">(<parameter><decl><type><name pos:line="2" pos:column="13">uint32_t<pos:position pos:line="2" pos:column="21"/></name></type> <name pos:line="2" pos:column="22">host<pos:position pos:line="2" pos:column="26"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="28">unsigned<pos:position pos:line="2" pos:column="36"/></name> <name pos:line="2" pos:column="37">short<pos:position pos:line="2" pos:column="42"/></name></type> <name pos:line="2" pos:column="43">udp_port<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="53">char<pos:position pos:line="2" pos:column="57"/></name> <modifier pos:line="2" pos:column="58">*<pos:position pos:line="2" pos:column="59"/></modifier></type><name pos:line="2" pos:column="59">buffer<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="67">int<pos:position pos:line="2" pos:column="70"/></name></type> <name pos:line="2" pos:column="71">length<pos:position pos:line="2" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="78"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">AUTH_HDR<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">auth<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">totallen<pos:position pos:line="5" pos:column="17"/></name></decl>;<pos:position pos:line="5" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">unsigned<pos:position pos:line="6" pos:column="13"/></name> <name pos:line="6" pos:column="14">char<pos:position pos:line="6" pos:column="18"/></name></type> <name><name pos:line="6" pos:column="19">reply_digest<pos:position pos:line="6" pos:column="31"/></name><index pos:line="6" pos:column="31">[<expr><name pos:line="6" pos:column="32">AUTH_VECTOR_LEN<pos:position pos:line="6" pos:column="47"/></name></expr>]<pos:position pos:line="6" pos:column="48"/></index></name></decl>;<pos:position pos:line="6" pos:column="49"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">unsigned<pos:position pos:line="7" pos:column="13"/></name> <name pos:line="7" pos:column="14">char<pos:position pos:line="7" pos:column="18"/></name></type> <name><name pos:line="7" pos:column="19">calc_digest<pos:position pos:line="7" pos:column="30"/></name><index pos:line="7" pos:column="30">[<expr><name pos:line="7" pos:column="31">AUTH_VECTOR_LEN<pos:position pos:line="7" pos:column="46"/></name></expr>]<pos:position pos:line="7" pos:column="47"/></index></name></decl>;<pos:position pos:line="7" pos:column="48"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">secretlen<pos:position pos:line="8" pos:column="18"/></name></decl>;<pos:position pos:line="8" pos:column="19"/></decl_stmt>
    <comment type="block" pos:line="9" pos:column="5">/* VALUE_PAIR   *req; */</comment>

    <expr_stmt><expr><name pos:line="11" pos:column="5">auth<pos:position pos:line="11" pos:column="9"/></name> <operator pos:line="11" pos:column="10">=<pos:position pos:line="11" pos:column="11"/></operator> <operator pos:line="11" pos:column="12">(<pos:position pos:line="11" pos:column="13"/></operator><name pos:line="11" pos:column="13">AUTH_HDR<pos:position pos:line="11" pos:column="21"/></name> <operator pos:line="11" pos:column="22">*<pos:position pos:line="11" pos:column="23"/></operator><operator pos:line="11" pos:column="23">)<pos:position pos:line="11" pos:column="24"/></operator> <name pos:line="11" pos:column="25">buffer<pos:position pos:line="11" pos:column="31"/></name></expr>;<pos:position pos:line="11" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name pos:line="12" pos:column="5">totallen<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">=<pos:position pos:line="12" pos:column="15"/></operator> <call><name pos:line="12" pos:column="16">ntohs<pos:position pos:line="12" pos:column="21"/></name><argument_list pos:line="12" pos:column="21">(<argument><expr><name><name pos:line="12" pos:column="22">auth<pos:position pos:line="12" pos:column="26"/></name><operator pos:line="12" pos:column="26">-&gt;<pos:position pos:line="12" pos:column="31"/></operator><name pos:line="12" pos:column="28">length<pos:position pos:line="12" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="36"/></expr_stmt>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name pos:line="14" pos:column="9">totallen<pos:position pos:line="14" pos:column="17"/></name> <operator pos:line="14" pos:column="18">!=<pos:position pos:line="14" pos:column="20"/></operator> <name pos:line="14" pos:column="21">length<pos:position pos:line="14" pos:column="27"/></name></expr>)<pos:position pos:line="14" pos:column="28"/></condition><then pos:line="14" pos:column="28"> <block pos:line="14" pos:column="29">{
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">fprintf<pos:position pos:line="15" pos:column="16"/></name><argument_list pos:line="15" pos:column="16">(<argument><expr><name pos:line="15" pos:column="17">stderr<pos:position pos:line="15" pos:column="23"/></name></expr></argument>,
                <argument><expr><literal type="string" pos:line="16" pos:column="17">"Squid_rad_auth: Received invalid reply length from server (want %d/ got %d)\n"<pos:position pos:line="16" pos:column="96"/></literal></expr></argument>,
                <argument><expr><name pos:line="17" pos:column="17">totallen<pos:position pos:line="17" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="27">length<pos:position pos:line="17" pos:column="33"/></name></expr></argument>)<pos:position pos:line="17" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="35"/></expr_stmt>
        <return pos:line="18" pos:column="9">return <expr><operator pos:line="18" pos:column="16">-<pos:position pos:line="18" pos:column="17"/></operator><literal type="number" pos:line="18" pos:column="17">1<pos:position pos:line="18" pos:column="18"/></literal></expr>;<pos:position pos:line="18" pos:column="19"/></return>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name><name pos:line="20" pos:column="9">auth<pos:position pos:line="20" pos:column="13"/></name><operator pos:line="20" pos:column="13">-&gt;<pos:position pos:line="20" pos:column="18"/></operator><name pos:line="20" pos:column="15">id<pos:position pos:line="20" pos:column="17"/></name></name> <operator pos:line="20" pos:column="18">!=<pos:position pos:line="20" pos:column="20"/></operator> <name pos:line="20" pos:column="21">request_id<pos:position pos:line="20" pos:column="31"/></name></expr>)<pos:position pos:line="20" pos:column="32"/></condition><then pos:line="20" pos:column="32"> <block pos:line="20" pos:column="33">{
        <comment type="block" pos:line="21" pos:column="9">/* Duplicate response of an earlier query, ignore */</comment>
        <return pos:line="22" pos:column="9">return <expr><operator pos:line="22" pos:column="16">-<pos:position pos:line="22" pos:column="17"/></operator><literal type="number" pos:line="22" pos:column="17">1<pos:position pos:line="22" pos:column="18"/></literal></expr>;<pos:position pos:line="22" pos:column="19"/></return>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="24" pos:column="5">/* Verify the reply digest */</comment>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">memcpy<pos:position pos:line="25" pos:column="11"/></name><argument_list pos:line="25" pos:column="11">(<argument><expr><name pos:line="25" pos:column="12">reply_digest<pos:position pos:line="25" pos:column="24"/></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="26">auth<pos:position pos:line="25" pos:column="30"/></name><operator pos:line="25" pos:column="30">-&gt;<pos:position pos:line="25" pos:column="35"/></operator><name pos:line="25" pos:column="32">vector<pos:position pos:line="25" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="40">AUTH_VECTOR_LEN<pos:position pos:line="25" pos:column="55"/></name></expr></argument>)<pos:position pos:line="25" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">memcpy<pos:position pos:line="26" pos:column="11"/></name><argument_list pos:line="26" pos:column="11">(<argument><expr><name><name pos:line="26" pos:column="12">auth<pos:position pos:line="26" pos:column="16"/></name><operator pos:line="26" pos:column="16">-&gt;<pos:position pos:line="26" pos:column="21"/></operator><name pos:line="26" pos:column="18">vector<pos:position pos:line="26" pos:column="24"/></name></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="26">vector<pos:position pos:line="26" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="34">AUTH_VECTOR_LEN<pos:position pos:line="26" pos:column="49"/></name></expr></argument>)<pos:position pos:line="26" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><name pos:line="27" pos:column="5">secretlen<pos:position pos:line="27" pos:column="14"/></name> <operator pos:line="27" pos:column="15">=<pos:position pos:line="27" pos:column="16"/></operator> <call><name pos:line="27" pos:column="17">strlen<pos:position pos:line="27" pos:column="23"/></name><argument_list pos:line="27" pos:column="23">(<argument><expr><name pos:line="27" pos:column="24">secretkey<pos:position pos:line="27" pos:column="33"/></name></expr></argument>)<pos:position pos:line="27" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">memcpy<pos:position pos:line="28" pos:column="11"/></name><argument_list pos:line="28" pos:column="11">(<argument><expr><name pos:line="28" pos:column="12">buffer<pos:position pos:line="28" pos:column="18"/></name> <operator pos:line="28" pos:column="19">+<pos:position pos:line="28" pos:column="20"/></operator> <name pos:line="28" pos:column="21">length<pos:position pos:line="28" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="29">secretkey<pos:position pos:line="28" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="40">secretlen<pos:position pos:line="28" pos:column="49"/></name></expr></argument>)<pos:position pos:line="28" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">md5_calc<pos:position pos:line="29" pos:column="13"/></name><argument_list pos:line="29" pos:column="13">(<argument><expr><name pos:line="29" pos:column="14">calc_digest<pos:position pos:line="29" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="27">(<pos:position pos:line="29" pos:column="28"/></operator><name pos:line="29" pos:column="28">unsigned<pos:position pos:line="29" pos:column="36"/></name> <name pos:line="29" pos:column="37">char<pos:position pos:line="29" pos:column="41"/></name> <operator pos:line="29" pos:column="42">*<pos:position pos:line="29" pos:column="43"/></operator><operator pos:line="29" pos:column="43">)<pos:position pos:line="29" pos:column="44"/></operator> <name pos:line="29" pos:column="45">auth<pos:position pos:line="29" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="51">length<pos:position pos:line="29" pos:column="57"/></name> <operator pos:line="29" pos:column="58">+<pos:position pos:line="29" pos:column="59"/></operator> <name pos:line="29" pos:column="60">secretlen<pos:position pos:line="29" pos:column="69"/></name></expr></argument>)<pos:position pos:line="29" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="71"/></expr_stmt>

    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><call><name pos:line="31" pos:column="9">memcmp<pos:position pos:line="31" pos:column="15"/></name><argument_list pos:line="31" pos:column="15">(<argument><expr><name pos:line="31" pos:column="16">reply_digest<pos:position pos:line="31" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="30">calc_digest<pos:position pos:line="31" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="43">AUTH_VECTOR_LEN<pos:position pos:line="31" pos:column="58"/></name></expr></argument>)<pos:position pos:line="31" pos:column="59"/></argument_list></call> <operator pos:line="31" pos:column="60">!=<pos:position pos:line="31" pos:column="62"/></operator> <literal type="number" pos:line="31" pos:column="63">0<pos:position pos:line="31" pos:column="64"/></literal></expr>)<pos:position pos:line="31" pos:column="65"/></condition><then pos:line="31" pos:column="65"> <block pos:line="31" pos:column="66">{
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">fprintf<pos:position pos:line="32" pos:column="16"/></name><argument_list pos:line="32" pos:column="16">(<argument><expr><name pos:line="32" pos:column="17">stderr<pos:position pos:line="32" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="25">"Warning: Received invalid reply digest from server\n"<pos:position pos:line="32" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="81"/></expr_stmt>
        <return pos:line="33" pos:column="9">return <expr><operator pos:line="33" pos:column="16">-<pos:position pos:line="33" pos:column="17"/></operator><literal type="number" pos:line="33" pos:column="17">1<pos:position pos:line="33" pos:column="18"/></literal></expr>;<pos:position pos:line="33" pos:column="19"/></return>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>
    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><name><name pos:line="35" pos:column="9">auth<pos:position pos:line="35" pos:column="13"/></name><operator pos:line="35" pos:column="13">-&gt;<pos:position pos:line="35" pos:column="18"/></operator><name pos:line="35" pos:column="15">code<pos:position pos:line="35" pos:column="19"/></name></name> <operator pos:line="35" pos:column="20">!=<pos:position pos:line="35" pos:column="22"/></operator> <name pos:line="35" pos:column="23">PW_AUTHENTICATION_ACK<pos:position pos:line="35" pos:column="44"/></name></expr>)<pos:position pos:line="35" pos:column="45"/></condition><then pos:line="35" pos:column="45">
        <block type="pseudo"><return pos:line="36" pos:column="9">return <expr><literal type="number" pos:line="36" pos:column="16">1<pos:position pos:line="36" pos:column="17"/></literal></expr>;<pos:position pos:line="36" pos:column="18"/></return></block></then></if>

    <return pos:line="38" pos:column="5">return <expr><literal type="number" pos:line="38" pos:column="12">0<pos:position pos:line="38" pos:column="13"/></literal></expr>;<pos:position pos:line="38" pos:column="14"/></return>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
