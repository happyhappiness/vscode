<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_400_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type>
<name pos:line="2" pos:column="1">getextrasids<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><name pos:line="2" pos:column="14">char<pos:position pos:line="2" pos:column="18"/></name> <modifier pos:line="2" pos:column="19">*<pos:position pos:line="2" pos:column="20"/></modifier></type><name pos:line="2" pos:column="20">ad_groups<pos:position pos:line="2" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="31">uint32_t<pos:position pos:line="2" pos:column="39"/></name></type> <name pos:line="2" pos:column="40">ExtraSids<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="51">uint32_t<pos:position pos:line="2" pos:column="59"/></name></type> <name pos:line="2" pos:column="60">SidCount<pos:position pos:line="2" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="69"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">ExtraSids<pos:position pos:line="4" pos:column="18"/></name><operator pos:line="4" pos:column="18">!=<pos:position pos:line="4" pos:column="20"/></operator> <literal type="number" pos:line="4" pos:column="21">0<pos:position pos:line="4" pos:column="22"/></literal></expr>)<pos:position pos:line="4" pos:column="23"/></condition><then pos:line="4" pos:column="23"> <block pos:line="4" pos:column="24">{
        <decl_stmt><decl><type><name pos:line="5" pos:column="9">uint32_t<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">ngroup<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="6" pos:column="9">uint32_t<pos:position pos:line="6" pos:column="17"/></name> <modifier pos:line="6" pos:column="18">*<pos:position pos:line="6" pos:column="19"/></modifier></type><name pos:line="6" pos:column="19">pa<pos:position pos:line="6" pos:column="21"/></name></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">ag<pos:position pos:line="7" pos:column="17"/></name></decl>;<pos:position pos:line="7" pos:column="18"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="8" pos:column="9">size_t<pos:position pos:line="8" pos:column="15"/></name></type> <name pos:line="8" pos:column="16">length<pos:position pos:line="8" pos:column="22"/></name></decl>;<pos:position pos:line="8" pos:column="23"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">l<pos:position pos:line="9" pos:column="14"/></name></decl>;<pos:position pos:line="9" pos:column="15"/></decl_stmt>

        <expr_stmt><expr><call><name pos:line="11" pos:column="9">align<pos:position pos:line="11" pos:column="14"/></name><argument_list pos:line="11" pos:column="14">(<argument><expr><literal type="number" pos:line="11" pos:column="15">4<pos:position pos:line="11" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="18"/></expr_stmt>
        <expr_stmt><expr><name pos:line="12" pos:column="9">ngroup<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">=<pos:position pos:line="12" pos:column="17"/></operator> <call><name pos:line="12" pos:column="18">get4byt<pos:position pos:line="12" pos:column="25"/></name><argument_list pos:line="12" pos:column="25">()<pos:position pos:line="12" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="28"/></expr_stmt>
        <if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">( <expr><name pos:line="13" pos:column="14">ngroup<pos:position pos:line="13" pos:column="20"/></name> <operator pos:line="13" pos:column="21">!=<pos:position pos:line="13" pos:column="23"/></operator> <name pos:line="13" pos:column="24">SidCount<pos:position pos:line="13" pos:column="32"/></name></expr>)<pos:position pos:line="13" pos:column="33"/></condition><then pos:line="13" pos:column="33"> <block pos:line="13" pos:column="34">{
            <expr_stmt><expr><call><name pos:line="14" pos:column="13">debug<pos:position pos:line="14" pos:column="18"/></name><argument_list pos:line="14" pos:column="18">(<argument><expr><operator pos:line="14" pos:column="19">(<pos:position pos:line="14" pos:column="20"/></operator><name pos:line="14" pos:column="20">char<pos:position pos:line="14" pos:column="24"/></name> <operator pos:line="14" pos:column="25">*<pos:position pos:line="14" pos:column="26"/></operator><operator pos:line="14" pos:column="26">)<pos:position pos:line="14" pos:column="27"/></operator> <literal type="string" pos:line="14" pos:column="28">"%s| %s: ERROR: Group encoding error =&gt; SidCount: %d Array size: %d\n"<pos:position pos:line="14" pos:column="101"/></literal></expr></argument>,
                  <argument><expr><call><name pos:line="15" pos:column="19">LogTime<pos:position pos:line="15" pos:column="26"/></name><argument_list pos:line="15" pos:column="26">()<pos:position pos:line="15" pos:column="28"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="15" pos:column="30">PROGRAM<pos:position pos:line="15" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="39">SidCount<pos:position pos:line="15" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="49">ngroup<pos:position pos:line="15" pos:column="55"/></name></expr></argument>)<pos:position pos:line="15" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="57"/></expr_stmt>
            <return pos:line="16" pos:column="13">return <expr><name pos:line="16" pos:column="20">NULL<pos:position pos:line="16" pos:column="24"/></name></expr>;<pos:position pos:line="16" pos:column="25"/></return>
        }<pos:position pos:line="17" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">debug<pos:position pos:line="18" pos:column="14"/></name><argument_list pos:line="18" pos:column="14">(<argument><expr><operator pos:line="18" pos:column="15">(<pos:position pos:line="18" pos:column="16"/></operator><name pos:line="18" pos:column="16">char<pos:position pos:line="18" pos:column="20"/></name> <operator pos:line="18" pos:column="21">*<pos:position pos:line="18" pos:column="22"/></operator><operator pos:line="18" pos:column="22">)<pos:position pos:line="18" pos:column="23"/></operator> <literal type="string" pos:line="18" pos:column="24">"%s| %s: INFO: Found %d ExtraSIDs\n"<pos:position pos:line="18" pos:column="60"/></literal></expr></argument>, <argument><expr><call><name pos:line="18" pos:column="62">LogTime<pos:position pos:line="18" pos:column="69"/></name><argument_list pos:line="18" pos:column="69">()<pos:position pos:line="18" pos:column="71"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="18" pos:column="73">PROGRAM<pos:position pos:line="18" pos:column="80"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="82">SidCount<pos:position pos:line="18" pos:column="90"/></name></expr></argument>)<pos:position pos:line="18" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="92"/></expr_stmt>

        <expr_stmt><expr><name pos:line="20" pos:column="9">pa<pos:position pos:line="20" pos:column="11"/></name><operator pos:line="20" pos:column="11">=<pos:position pos:line="20" pos:column="12"/></operator><operator pos:line="20" pos:column="12">(<pos:position pos:line="20" pos:column="13"/></operator><name pos:line="20" pos:column="13">uint32_t<pos:position pos:line="20" pos:column="21"/></name> <operator pos:line="20" pos:column="22">*<pos:position pos:line="20" pos:column="23"/></operator><operator pos:line="20" pos:column="23">)<pos:position pos:line="20" pos:column="24"/></operator><call><name pos:line="20" pos:column="24">xmalloc<pos:position pos:line="20" pos:column="31"/></name><argument_list pos:line="20" pos:column="31">(<argument><expr><name pos:line="20" pos:column="32">SidCount<pos:position pos:line="20" pos:column="40"/></name><operator pos:line="20" pos:column="40">*<pos:position pos:line="20" pos:column="41"/></operator><sizeof pos:line="20" pos:column="41">sizeof<argument_list pos:line="20" pos:column="47">(<argument><expr><name pos:line="20" pos:column="48">uint32_t<pos:position pos:line="20" pos:column="56"/></name></expr></argument>)<pos:position pos:line="20" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="20" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="59"/></expr_stmt>
        <for pos:line="21" pos:column="9">for <control pos:line="21" pos:column="13">( <init><expr><name pos:line="21" pos:column="15">l<pos:position pos:line="21" pos:column="16"/></name><operator pos:line="21" pos:column="16">=<pos:position pos:line="21" pos:column="17"/></operator><literal type="number" pos:line="21" pos:column="17">0<pos:position pos:line="21" pos:column="18"/></literal></expr>;<pos:position pos:line="21" pos:column="19"/></init> <condition><expr><name pos:line="21" pos:column="20">l<pos:position pos:line="21" pos:column="21"/></name> <operator pos:line="21" pos:column="22">&lt;<pos:position pos:line="21" pos:column="26"/></operator> <operator pos:line="21" pos:column="24">(<pos:position pos:line="21" pos:column="25"/></operator><name pos:line="21" pos:column="25">int<pos:position pos:line="21" pos:column="28"/></name><operator pos:line="21" pos:column="28">)<pos:position pos:line="21" pos:column="29"/></operator><name pos:line="21" pos:column="29">SidCount<pos:position pos:line="21" pos:column="37"/></name></expr>;<pos:position pos:line="21" pos:column="38"/></condition> <incr><expr><name pos:line="21" pos:column="39">l<pos:position pos:line="21" pos:column="40"/></name><operator pos:line="21" pos:column="40">++<pos:position pos:line="21" pos:column="42"/></operator></expr></incr> )<pos:position pos:line="21" pos:column="44"/></control> <block pos:line="21" pos:column="45">{
            <expr_stmt><expr><name><name pos:line="22" pos:column="13">pa<pos:position pos:line="22" pos:column="15"/></name><index pos:line="22" pos:column="15">[<expr><name pos:line="22" pos:column="16">l<pos:position pos:line="22" pos:column="17"/></name></expr>]<pos:position pos:line="22" pos:column="18"/></index></name> <operator pos:line="22" pos:column="19">=<pos:position pos:line="22" pos:column="20"/></operator> <call><name pos:line="22" pos:column="21">get4byt<pos:position pos:line="22" pos:column="28"/></name><argument_list pos:line="22" pos:column="28">()<pos:position pos:line="22" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="31"/></expr_stmt>
            <expr_stmt><expr><name pos:line="23" pos:column="13">bpos<pos:position pos:line="23" pos:column="17"/></name> <operator pos:line="23" pos:column="18">=<pos:position pos:line="23" pos:column="19"/></operator> <name pos:line="23" pos:column="20">bpos<pos:position pos:line="23" pos:column="24"/></name><operator pos:line="23" pos:column="24">+<pos:position pos:line="23" pos:column="25"/></operator><literal type="number" pos:line="23" pos:column="25">4<pos:position pos:line="23" pos:column="26"/></literal></expr>;<pos:position pos:line="23" pos:column="27"/></expr_stmt> <comment type="block" pos:line="23" pos:column="28">/* attr */</comment>
        }<pos:position pos:line="24" pos:column="10"/></block></for>

        <for pos:line="26" pos:column="9">for <control pos:line="26" pos:column="13">( <init><expr><name pos:line="26" pos:column="15">l<pos:position pos:line="26" pos:column="16"/></name><operator pos:line="26" pos:column="16">=<pos:position pos:line="26" pos:column="17"/></operator><literal type="number" pos:line="26" pos:column="17">0<pos:position pos:line="26" pos:column="18"/></literal></expr>;<pos:position pos:line="26" pos:column="19"/></init> <condition><expr><name pos:line="26" pos:column="20">l<pos:position pos:line="26" pos:column="21"/></name><operator pos:line="26" pos:column="21">&lt;<pos:position pos:line="26" pos:column="25"/></operator><operator pos:line="26" pos:column="22">(<pos:position pos:line="26" pos:column="23"/></operator><name pos:line="26" pos:column="23">int<pos:position pos:line="26" pos:column="26"/></name><operator pos:line="26" pos:column="26">)<pos:position pos:line="26" pos:column="27"/></operator><name pos:line="26" pos:column="27">SidCount<pos:position pos:line="26" pos:column="35"/></name></expr>;<pos:position pos:line="26" pos:column="36"/></condition> <incr><expr><name pos:line="26" pos:column="37">l<pos:position pos:line="26" pos:column="38"/></name><operator pos:line="26" pos:column="38">++<pos:position pos:line="26" pos:column="40"/></operator></expr></incr> )<pos:position pos:line="26" pos:column="42"/></control> <block pos:line="26" pos:column="43">{
            <decl_stmt><decl><type><name pos:line="27" pos:column="13">char<pos:position pos:line="27" pos:column="17"/></name></type> <name><name pos:line="27" pos:column="18">es<pos:position pos:line="27" pos:column="20"/></name><index pos:line="27" pos:column="20">[<expr><literal type="number" pos:line="27" pos:column="21">256<pos:position pos:line="27" pos:column="24"/></literal></expr>]<pos:position pos:line="27" pos:column="25"/></index></name></decl>;<pos:position pos:line="27" pos:column="26"/></decl_stmt>

            <if pos:line="29" pos:column="13">if <condition pos:line="29" pos:column="16">(<expr><name><name pos:line="29" pos:column="17">pa<pos:position pos:line="29" pos:column="19"/></name><index pos:line="29" pos:column="19">[<expr><name pos:line="29" pos:column="20">l<pos:position pos:line="29" pos:column="21"/></name></expr>]<pos:position pos:line="29" pos:column="22"/></index></name> <operator pos:line="29" pos:column="23">!=<pos:position pos:line="29" pos:column="25"/></operator> <literal type="number" pos:line="29" pos:column="26">0<pos:position pos:line="29" pos:column="27"/></literal></expr>)<pos:position pos:line="29" pos:column="28"/></condition><then pos:line="29" pos:column="28"> <block pos:line="29" pos:column="29">{
                <decl_stmt><decl><type><name pos:line="30" pos:column="17">uint32_t<pos:position pos:line="30" pos:column="25"/></name></type> <name pos:line="30" pos:column="26">nauth<pos:position pos:line="30" pos:column="31"/></name></decl>;<pos:position pos:line="30" pos:column="32"/></decl_stmt>
                <decl_stmt><decl><type><name pos:line="31" pos:column="17">uint8_t<pos:position pos:line="31" pos:column="24"/></name></type> <name pos:line="31" pos:column="25">rev<pos:position pos:line="31" pos:column="28"/></name></decl>;<pos:position pos:line="31" pos:column="29"/></decl_stmt>
                <decl_stmt><decl><type><name pos:line="32" pos:column="17">uint64_t<pos:position pos:line="32" pos:column="25"/></name></type> <name pos:line="32" pos:column="26">idauth<pos:position pos:line="32" pos:column="32"/></name></decl>;<pos:position pos:line="32" pos:column="33"/></decl_stmt>

                <expr_stmt><expr><name pos:line="34" pos:column="17">nauth<pos:position pos:line="34" pos:column="22"/></name> <operator pos:line="34" pos:column="23">=<pos:position pos:line="34" pos:column="24"/></operator> <call><name pos:line="34" pos:column="25">get4byt<pos:position pos:line="34" pos:column="32"/></name><argument_list pos:line="34" pos:column="32">()<pos:position pos:line="34" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="35"/></expr_stmt>

                <expr_stmt><expr><name pos:line="36" pos:column="17">length<pos:position pos:line="36" pos:column="23"/></name> <operator pos:line="36" pos:column="24">=<pos:position pos:line="36" pos:column="25"/></operator> <literal type="number" pos:line="36" pos:column="26">1<pos:position pos:line="36" pos:column="27"/></literal><operator pos:line="36" pos:column="27">+<pos:position pos:line="36" pos:column="28"/></operator><literal type="number" pos:line="36" pos:column="28">1<pos:position pos:line="36" pos:column="29"/></literal><operator pos:line="36" pos:column="29">+<pos:position pos:line="36" pos:column="30"/></operator><literal type="number" pos:line="36" pos:column="30">6<pos:position pos:line="36" pos:column="31"/></literal><operator pos:line="36" pos:column="31">+<pos:position pos:line="36" pos:column="32"/></operator><name pos:line="36" pos:column="32">nauth<pos:position pos:line="36" pos:column="37"/></name><operator pos:line="36" pos:column="37">*<pos:position pos:line="36" pos:column="38"/></operator><literal type="number" pos:line="36" pos:column="38">4<pos:position pos:line="36" pos:column="39"/></literal></expr>;<pos:position pos:line="36" pos:column="40"/></expr_stmt>
                <expr_stmt><expr><name pos:line="37" pos:column="17">ag<pos:position pos:line="37" pos:column="19"/></name> <operator pos:line="37" pos:column="20">=<pos:position pos:line="37" pos:column="21"/></operator> <operator pos:line="37" pos:column="22">(<pos:position pos:line="37" pos:column="23"/></operator><name pos:line="37" pos:column="23">char<pos:position pos:line="37" pos:column="27"/></name> <operator pos:line="37" pos:column="28">*<pos:position pos:line="37" pos:column="29"/></operator><operator pos:line="37" pos:column="29">)<pos:position pos:line="37" pos:column="30"/></operator><call><name pos:line="37" pos:column="30">xcalloc<pos:position pos:line="37" pos:column="37"/></name><argument_list pos:line="37" pos:column="37">(<argument><expr><operator pos:line="37" pos:column="38">(<pos:position pos:line="37" pos:column="39"/></operator><name pos:line="37" pos:column="39">length<pos:position pos:line="37" pos:column="45"/></name><operator pos:line="37" pos:column="45">)<pos:position pos:line="37" pos:column="46"/></operator><operator pos:line="37" pos:column="46">*<pos:position pos:line="37" pos:column="47"/></operator><sizeof pos:line="37" pos:column="47">sizeof<argument_list pos:line="37" pos:column="53">(<argument><expr><name pos:line="37" pos:column="54">char<pos:position pos:line="37" pos:column="58"/></name></expr></argument>)<pos:position pos:line="37" pos:column="59"/></argument_list></sizeof></expr></argument>,<argument><expr><literal type="number" pos:line="37" pos:column="60">1<pos:position pos:line="37" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="63"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="38" pos:column="17">memcpy<pos:position pos:line="38" pos:column="23"/></name><argument_list pos:line="38" pos:column="23">(<argument><expr><operator pos:line="38" pos:column="24">(<pos:position pos:line="38" pos:column="25"/></operator><name pos:line="38" pos:column="25">void<pos:position pos:line="38" pos:column="29"/></name> <operator pos:line="38" pos:column="30">*<pos:position pos:line="38" pos:column="31"/></operator><operator pos:line="38" pos:column="31">)<pos:position pos:line="38" pos:column="32"/></operator><name pos:line="38" pos:column="32">ag<pos:position pos:line="38" pos:column="34"/></name></expr></argument>,<argument><expr><operator pos:line="38" pos:column="35">(<pos:position pos:line="38" pos:column="36"/></operator><specifier pos:line="38" pos:column="36">const<pos:position pos:line="38" pos:column="41"/></specifier> <name pos:line="38" pos:column="42">void<pos:position pos:line="38" pos:column="46"/></name><operator pos:line="38" pos:column="46">*<pos:position pos:line="38" pos:column="47"/></operator><operator pos:line="38" pos:column="47">)<pos:position pos:line="38" pos:column="48"/></operator><operator pos:line="38" pos:column="48">&amp;<pos:position pos:line="38" pos:column="53"/></operator><name><name pos:line="38" pos:column="49">p<pos:position pos:line="38" pos:column="50"/></name><index pos:line="38" pos:column="50">[<expr><name pos:line="38" pos:column="51">bpos<pos:position pos:line="38" pos:column="55"/></name></expr>]<pos:position pos:line="38" pos:column="56"/></index></name></expr></argument>,<argument><expr><name pos:line="38" pos:column="57">length<pos:position pos:line="38" pos:column="63"/></name></expr></argument>)<pos:position pos:line="38" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="65"/></expr_stmt>
                <if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><operator pos:line="39" pos:column="21">!<pos:position pos:line="39" pos:column="22"/></operator><name pos:line="39" pos:column="22">ad_groups<pos:position pos:line="39" pos:column="31"/></name></expr>)<pos:position pos:line="39" pos:column="32"/></condition><then pos:line="39" pos:column="32"> <block pos:line="39" pos:column="33">{
                    <expr_stmt><expr><call><name pos:line="40" pos:column="21">debug<pos:position pos:line="40" pos:column="26"/></name><argument_list pos:line="40" pos:column="26">(<argument><expr><operator pos:line="40" pos:column="27">(<pos:position pos:line="40" pos:column="28"/></operator><name pos:line="40" pos:column="28">char<pos:position pos:line="40" pos:column="32"/></name> <operator pos:line="40" pos:column="33">*<pos:position pos:line="40" pos:column="34"/></operator><operator pos:line="40" pos:column="34">)<pos:position pos:line="40" pos:column="35"/></operator> <literal type="string" pos:line="40" pos:column="36">"%s| %s: ERR: No space to store groups\n"<pos:position pos:line="40" pos:column="77"/></literal></expr></argument>,
                          <argument><expr><call><name pos:line="41" pos:column="27">LogTime<pos:position pos:line="41" pos:column="34"/></name><argument_list pos:line="41" pos:column="34">()<pos:position pos:line="41" pos:column="36"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="41" pos:column="38">PROGRAM<pos:position pos:line="41" pos:column="45"/></name></expr></argument>)<pos:position pos:line="41" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="47"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="42" pos:column="21">xfree<pos:position pos:line="42" pos:column="26"/></name><argument_list pos:line="42" pos:column="26">(<argument><expr><name pos:line="42" pos:column="27">pa<pos:position pos:line="42" pos:column="29"/></name></expr></argument>)<pos:position pos:line="42" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="31"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="43" pos:column="21">xfree<pos:position pos:line="43" pos:column="26"/></name><argument_list pos:line="43" pos:column="26">(<argument><expr><name pos:line="43" pos:column="27">ag<pos:position pos:line="43" pos:column="29"/></name></expr></argument>)<pos:position pos:line="43" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="31"/></expr_stmt>
                    <return pos:line="44" pos:column="21">return <expr><name pos:line="44" pos:column="28">NULL<pos:position pos:line="44" pos:column="32"/></name></expr>;<pos:position pos:line="44" pos:column="33"/></return>
                }<pos:position pos:line="45" pos:column="18"/></block></then> <else pos:line="45" pos:column="19">else <block pos:line="45" pos:column="24">{
                    <if pos:line="46" pos:column="21">if <condition pos:line="46" pos:column="24">(<expr><operator pos:line="46" pos:column="25">!<pos:position pos:line="46" pos:column="26"/></operator><call><name pos:line="46" pos:column="26">pstrcat<pos:position pos:line="46" pos:column="33"/></name><argument_list pos:line="46" pos:column="33">(<argument><expr><name pos:line="46" pos:column="34">ad_groups<pos:position pos:line="46" pos:column="43"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="46" pos:column="44">" group="<pos:position pos:line="46" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="55"/></condition><then pos:line="46" pos:column="55"> <block pos:line="46" pos:column="56">{
                        <expr_stmt><expr><call><name pos:line="47" pos:column="25">debug<pos:position pos:line="47" pos:column="30"/></name><argument_list pos:line="47" pos:column="30">(<argument><expr><operator pos:line="47" pos:column="31">(<pos:position pos:line="47" pos:column="32"/></operator><name pos:line="47" pos:column="32">char<pos:position pos:line="47" pos:column="36"/></name> <operator pos:line="47" pos:column="37">*<pos:position pos:line="47" pos:column="38"/></operator><operator pos:line="47" pos:column="38">)<pos:position pos:line="47" pos:column="39"/></operator> <literal type="string" pos:line="47" pos:column="40">"%s| %s: WARN: Too many groups ! size &gt; %d : %s\n"<pos:position pos:line="47" pos:column="93"/></literal></expr></argument>,
                              <argument><expr><call><name pos:line="48" pos:column="31">LogTime<pos:position pos:line="48" pos:column="38"/></name><argument_list pos:line="48" pos:column="38">()<pos:position pos:line="48" pos:column="40"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="48" pos:column="42">PROGRAM<pos:position pos:line="48" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="51">MAX_PAC_GROUP_SIZE<pos:position pos:line="48" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="71">ad_groups<pos:position pos:line="48" pos:column="80"/></name></expr></argument>)<pos:position pos:line="48" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="82"/></expr_stmt>
                    }<pos:position pos:line="49" pos:column="22"/></block></then></if>
                }<pos:position pos:line="50" pos:column="18"/></block></else></if>
                <if pos:line="51" pos:column="17">if <condition pos:line="51" pos:column="20">(<expr><operator pos:line="51" pos:column="21">!<pos:position pos:line="51" pos:column="22"/></operator><call><name pos:line="51" pos:column="22">pstrcat<pos:position pos:line="51" pos:column="29"/></name><argument_list pos:line="51" pos:column="29">(<argument><expr><name pos:line="51" pos:column="30">ad_groups<pos:position pos:line="51" pos:column="39"/></name></expr></argument>,<argument><expr><call><name pos:line="51" pos:column="40">base64_encode_bin<pos:position pos:line="51" pos:column="57"/></name><argument_list pos:line="51" pos:column="57">(<argument><expr><name pos:line="51" pos:column="58">ag<pos:position pos:line="51" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="51" pos:column="62">(<pos:position pos:line="51" pos:column="63"/></operator><name pos:line="51" pos:column="63">int<pos:position pos:line="51" pos:column="66"/></name><operator pos:line="51" pos:column="66">)<pos:position pos:line="51" pos:column="67"/></operator><name pos:line="51" pos:column="67">length<pos:position pos:line="51" pos:column="73"/></name></expr></argument>)<pos:position pos:line="51" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="51" pos:column="75"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="76"/></condition><then pos:line="51" pos:column="76"> <block pos:line="51" pos:column="77">{
                    <expr_stmt><expr><call><name pos:line="52" pos:column="21">debug<pos:position pos:line="52" pos:column="26"/></name><argument_list pos:line="52" pos:column="26">(<argument><expr><operator pos:line="52" pos:column="27">(<pos:position pos:line="52" pos:column="28"/></operator><name pos:line="52" pos:column="28">char<pos:position pos:line="52" pos:column="32"/></name> <operator pos:line="52" pos:column="33">*<pos:position pos:line="52" pos:column="34"/></operator><operator pos:line="52" pos:column="34">)<pos:position pos:line="52" pos:column="35"/></operator> <literal type="string" pos:line="52" pos:column="36">"%s| %s: WARN: Too many groups ! size &gt; %d : %s\n"<pos:position pos:line="52" pos:column="89"/></literal></expr></argument>,
                          <argument><expr><call><name pos:line="53" pos:column="27">LogTime<pos:position pos:line="53" pos:column="34"/></name><argument_list pos:line="53" pos:column="34">()<pos:position pos:line="53" pos:column="36"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="53" pos:column="38">PROGRAM<pos:position pos:line="53" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="47">MAX_PAC_GROUP_SIZE<pos:position pos:line="53" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="67">ad_groups<pos:position pos:line="53" pos:column="76"/></name></expr></argument>)<pos:position pos:line="53" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="78"/></expr_stmt>
                }<pos:position pos:line="54" pos:column="18"/></block></then></if>
                <expr_stmt><expr><call><name pos:line="55" pos:column="17">xfree<pos:position pos:line="55" pos:column="22"/></name><argument_list pos:line="55" pos:column="22">(<argument><expr><name pos:line="55" pos:column="23">ag<pos:position pos:line="55" pos:column="25"/></name></expr></argument>)<pos:position pos:line="55" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="27"/></expr_stmt>

                <expr_stmt><expr><name pos:line="57" pos:column="17">rev<pos:position pos:line="57" pos:column="20"/></name> <operator pos:line="57" pos:column="21">=<pos:position pos:line="57" pos:column="22"/></operator> <call><name pos:line="57" pos:column="23">get1byt<pos:position pos:line="57" pos:column="30"/></name><argument_list pos:line="57" pos:column="30">()<pos:position pos:line="57" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="33"/></expr_stmt>
                <expr_stmt><expr><name pos:line="58" pos:column="17">bpos<pos:position pos:line="58" pos:column="21"/></name> <operator pos:line="58" pos:column="22">=<pos:position pos:line="58" pos:column="23"/></operator> <name pos:line="58" pos:column="24">bpos<pos:position pos:line="58" pos:column="28"/></name> <operator pos:line="58" pos:column="29">+<pos:position pos:line="58" pos:column="30"/></operator> <literal type="number" pos:line="58" pos:column="31">1<pos:position pos:line="58" pos:column="32"/></literal></expr>;<pos:position pos:line="58" pos:column="33"/></expr_stmt> <comment type="block" pos:line="58" pos:column="34">/* nsub */</comment>
                <expr_stmt><expr><name pos:line="59" pos:column="17">idauth<pos:position pos:line="59" pos:column="23"/></name> <operator pos:line="59" pos:column="24">=<pos:position pos:line="59" pos:column="25"/></operator> <call><name pos:line="59" pos:column="26">get6byt_be<pos:position pos:line="59" pos:column="36"/></name><argument_list pos:line="59" pos:column="36">()<pos:position pos:line="59" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="39"/></expr_stmt>

                <expr_stmt><expr><call><name pos:line="61" pos:column="17">snprintf<pos:position pos:line="61" pos:column="25"/></name><argument_list pos:line="61" pos:column="25">(<argument><expr><name pos:line="61" pos:column="26">es<pos:position pos:line="61" pos:column="28"/></name></expr></argument>,<argument><expr><sizeof pos:line="61" pos:column="29">sizeof<argument_list pos:line="61" pos:column="35">(<argument><expr><name pos:line="61" pos:column="36">es<pos:position pos:line="61" pos:column="38"/></name></expr></argument>)<pos:position pos:line="61" pos:column="39"/></argument_list></sizeof></expr></argument>,<argument><expr><literal type="string" pos:line="61" pos:column="40">"S-%d-%lu"<pos:position pos:line="61" pos:column="50"/></literal></expr></argument>,<argument><expr><name pos:line="61" pos:column="51">rev<pos:position pos:line="61" pos:column="54"/></name></expr></argument>,<argument><expr><operator pos:line="61" pos:column="55">(<pos:position pos:line="61" pos:column="56"/></operator><name pos:line="61" pos:column="56">long<pos:position pos:line="61" pos:column="60"/></name> <name pos:line="61" pos:column="61">unsigned<pos:position pos:line="61" pos:column="69"/></name> <name pos:line="61" pos:column="70">int<pos:position pos:line="61" pos:column="73"/></name><operator pos:line="61" pos:column="73">)<pos:position pos:line="61" pos:column="74"/></operator><name pos:line="61" pos:column="74">idauth<pos:position pos:line="61" pos:column="80"/></name></expr></argument>)<pos:position pos:line="61" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="82"/></expr_stmt>
                <for pos:line="62" pos:column="17">for <control pos:line="62" pos:column="21">(<init><decl><type><name pos:line="62" pos:column="22">int<pos:position pos:line="62" pos:column="25"/></name></type> <name pos:line="62" pos:column="26">k<pos:position pos:line="62" pos:column="27"/></name><init pos:line="62" pos:column="27">=<expr><literal type="number" pos:line="62" pos:column="28">0<pos:position pos:line="62" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="62" pos:column="30"/></init> <condition><expr><name pos:line="62" pos:column="31">k<pos:position pos:line="62" pos:column="32"/></name><operator pos:line="62" pos:column="32">&lt;<pos:position pos:line="62" pos:column="36"/></operator><operator pos:line="62" pos:column="33">(<pos:position pos:line="62" pos:column="34"/></operator><name pos:line="62" pos:column="34">int<pos:position pos:line="62" pos:column="37"/></name><operator pos:line="62" pos:column="37">)<pos:position pos:line="62" pos:column="38"/></operator><name pos:line="62" pos:column="38">nauth<pos:position pos:line="62" pos:column="43"/></name></expr>;<pos:position pos:line="62" pos:column="44"/></condition> <incr><expr><name pos:line="62" pos:column="45">k<pos:position pos:line="62" pos:column="46"/></name><operator pos:line="62" pos:column="46">++<pos:position pos:line="62" pos:column="48"/></operator></expr></incr> )<pos:position pos:line="62" pos:column="50"/></control> <block pos:line="62" pos:column="51">{
                    <decl_stmt><decl><type><name pos:line="63" pos:column="21">uint32_t<pos:position pos:line="63" pos:column="29"/></name></type> <name pos:line="63" pos:column="30">sauth<pos:position pos:line="63" pos:column="35"/></name></decl>;<pos:position pos:line="63" pos:column="36"/></decl_stmt>
                    <expr_stmt><expr><name pos:line="64" pos:column="21">sauth<pos:position pos:line="64" pos:column="26"/></name> <operator pos:line="64" pos:column="27">=<pos:position pos:line="64" pos:column="28"/></operator> <call><name pos:line="64" pos:column="29">get4byt<pos:position pos:line="64" pos:column="36"/></name><argument_list pos:line="64" pos:column="36">()<pos:position pos:line="64" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="39"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="65" pos:column="21">snprintf<pos:position pos:line="65" pos:column="29"/></name><argument_list pos:line="65" pos:column="29">(<argument><expr><operator pos:line="65" pos:column="30">(<pos:position pos:line="65" pos:column="31"/></operator><name pos:line="65" pos:column="31">char<pos:position pos:line="65" pos:column="35"/></name> <operator pos:line="65" pos:column="36">*<pos:position pos:line="65" pos:column="37"/></operator><operator pos:line="65" pos:column="37">)<pos:position pos:line="65" pos:column="38"/></operator><operator pos:line="65" pos:column="38">&amp;<pos:position pos:line="65" pos:column="43"/></operator><name><name pos:line="65" pos:column="39">es<pos:position pos:line="65" pos:column="41"/></name><index pos:line="65" pos:column="41">[<expr><call><name pos:line="65" pos:column="42">strlen<pos:position pos:line="65" pos:column="48"/></name><argument_list pos:line="65" pos:column="48">(<argument><expr><name pos:line="65" pos:column="49">es<pos:position pos:line="65" pos:column="51"/></name></expr></argument>)<pos:position pos:line="65" pos:column="52"/></argument_list></call></expr>]<pos:position pos:line="65" pos:column="53"/></index></name></expr></argument>,<argument><expr><sizeof pos:line="65" pos:column="54">sizeof<argument_list pos:line="65" pos:column="60">(<argument><expr><name pos:line="65" pos:column="61">es<pos:position pos:line="65" pos:column="63"/></name></expr></argument>)<pos:position pos:line="65" pos:column="64"/></argument_list></sizeof><operator pos:line="65" pos:column="64">-<pos:position pos:line="65" pos:column="65"/></operator><call><name pos:line="65" pos:column="65">strlen<pos:position pos:line="65" pos:column="71"/></name><argument_list pos:line="65" pos:column="71">(<argument><expr><name pos:line="65" pos:column="72">es<pos:position pos:line="65" pos:column="74"/></name></expr></argument>)<pos:position pos:line="65" pos:column="75"/></argument_list></call></expr></argument>,<argument><expr><literal type="string" pos:line="65" pos:column="76">"-%u"<pos:position pos:line="65" pos:column="81"/></literal></expr></argument>,<argument><expr><name pos:line="65" pos:column="82">sauth<pos:position pos:line="65" pos:column="87"/></name></expr></argument>)<pos:position pos:line="65" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="89"/></expr_stmt>
                }<pos:position pos:line="66" pos:column="18"/></block></for>
                <expr_stmt><expr><call><name pos:line="67" pos:column="17">debug<pos:position pos:line="67" pos:column="22"/></name><argument_list pos:line="67" pos:column="22">(<argument><expr><operator pos:line="67" pos:column="23">(<pos:position pos:line="67" pos:column="24"/></operator><name pos:line="67" pos:column="24">char<pos:position pos:line="67" pos:column="28"/></name> <operator pos:line="67" pos:column="29">*<pos:position pos:line="67" pos:column="30"/></operator><operator pos:line="67" pos:column="30">)<pos:position pos:line="67" pos:column="31"/></operator> <literal type="string" pos:line="67" pos:column="32">"%s| %s: INFO: Got ExtraSid %s\n"<pos:position pos:line="67" pos:column="65"/></literal></expr></argument>, <argument><expr><call><name pos:line="67" pos:column="67">LogTime<pos:position pos:line="67" pos:column="74"/></name><argument_list pos:line="67" pos:column="74">()<pos:position pos:line="67" pos:column="76"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="67" pos:column="78">PROGRAM<pos:position pos:line="67" pos:column="85"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="87">es<pos:position pos:line="67" pos:column="89"/></name></expr></argument>)<pos:position pos:line="67" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="91"/></expr_stmt>
            }<pos:position pos:line="68" pos:column="14"/></block></then></if>
        }<pos:position pos:line="69" pos:column="10"/></block></for>
        <expr_stmt><expr><call><name pos:line="70" pos:column="9">xfree<pos:position pos:line="70" pos:column="14"/></name><argument_list pos:line="70" pos:column="14">(<argument><expr><name pos:line="70" pos:column="15">pa<pos:position pos:line="70" pos:column="17"/></name></expr></argument>)<pos:position pos:line="70" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="71" pos:column="6"/></block></then></if>
    <return pos:line="72" pos:column="5">return <expr><name pos:line="72" pos:column="12">ad_groups<pos:position pos:line="72" pos:column="21"/></name></expr>;<pos:position pos:line="72" pos:column="22"/></return>
}<pos:position pos:line="73" pos:column="2"/></block></function></unit>
