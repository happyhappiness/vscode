<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5125_squid-3.1.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">do_write<pos:position pos:line="2" pos:column="9"/></name><parameter_list pos:line="2" pos:column="9">(<parameter><decl><type><name pos:line="2" pos:column="10">diomsg<pos:position pos:line="2" pos:column="16"/></name> <modifier pos:line="2" pos:column="17">*<pos:position pos:line="2" pos:column="18"/></modifier></type> <name pos:line="2" pos:column="19">r<pos:position pos:line="2" pos:column="20"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="22">int<pos:position pos:line="2" pos:column="25"/></name></type> <name pos:line="2" pos:column="26">len<pos:position pos:line="2" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="31">const<pos:position pos:line="2" pos:column="36"/></specifier> <name pos:line="2" pos:column="37">char<pos:position pos:line="2" pos:column="41"/></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="43">buf<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="47"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">wrtlen<pos:position pos:line="4" pos:column="15"/></name> <init pos:line="4" pos:column="16">= <expr><name><name pos:line="4" pos:column="18">r<pos:position pos:line="4" pos:column="19"/></name><operator pos:line="4" pos:column="19">-&gt;<pos:position pos:line="4" pos:column="24"/></operator><name pos:line="4" pos:column="21">size<pos:position pos:line="4" pos:column="25"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">x<pos:position pos:line="5" pos:column="10"/></name></decl>;<pos:position pos:line="5" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">file_state<pos:position pos:line="6" pos:column="15"/></name> <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type><name pos:line="6" pos:column="17">fs<pos:position pos:line="6" pos:column="19"/></name></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
    <expr_stmt><expr><name pos:line="7" pos:column="5">fs<pos:position pos:line="7" pos:column="7"/></name> <operator pos:line="7" pos:column="8">=<pos:position pos:line="7" pos:column="9"/></operator> <operator pos:line="7" pos:column="10">(<pos:position pos:line="7" pos:column="11"/></operator><name pos:line="7" pos:column="11">file_state<pos:position pos:line="7" pos:column="21"/></name> <operator pos:line="7" pos:column="22">*<pos:position pos:line="7" pos:column="23"/></operator><operator pos:line="7" pos:column="23">)<pos:position pos:line="7" pos:column="24"/></operator> <call><name pos:line="7" pos:column="25">hash_lookup<pos:position pos:line="7" pos:column="36"/></name><argument_list pos:line="7" pos:column="36">(<argument><expr><name pos:line="7" pos:column="37">hash<pos:position pos:line="7" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="43">&amp;<pos:position pos:line="7" pos:column="48"/></operator><name><name pos:line="7" pos:column="44">r<pos:position pos:line="7" pos:column="45"/></name><operator pos:line="7" pos:column="45">-&gt;<pos:position pos:line="7" pos:column="50"/></operator><name pos:line="7" pos:column="47">id<pos:position pos:line="7" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="51"/></expr_stmt>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">NULL<pos:position pos:line="9" pos:column="13"/></name> <operator pos:line="9" pos:column="14">==<pos:position pos:line="9" pos:column="16"/></operator> <name pos:line="9" pos:column="17">fs<pos:position pos:line="9" pos:column="19"/></name></expr>)<pos:position pos:line="9" pos:column="20"/></condition><then pos:line="9" pos:column="20"> <block pos:line="9" pos:column="21">{
        <expr_stmt><expr><name pos:line="10" pos:column="9">errno<pos:position pos:line="10" pos:column="14"/></name> <operator pos:line="10" pos:column="15">=<pos:position pos:line="10" pos:column="16"/></operator> <name pos:line="10" pos:column="17">EBADF<pos:position pos:line="10" pos:column="22"/></name></expr>;<pos:position pos:line="10" pos:column="23"/></expr_stmt>
        <macro><name pos:line="11" pos:column="9">DEBUG<pos:position pos:line="11" pos:column="14"/></name><argument_list pos:line="11" pos:column="14">(<argument><literal type="number" pos:line="11" pos:column="15">1<pos:position pos:line="11" pos:column="16"/></literal></argument>)<pos:position pos:line="11" pos:column="17"/></argument_list></macro> <block pos:line="11" pos:column="18">{
            <expr_stmt><expr><call><name pos:line="12" pos:column="13">fprintf<pos:position pos:line="12" pos:column="20"/></name><argument_list pos:line="12" pos:column="20">(<argument><expr><name pos:line="12" pos:column="21">stderr<pos:position pos:line="12" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="29">"%d WRITE id %d: "<pos:position pos:line="12" pos:column="47"/></literal></expr></argument>, <argument><expr><operator pos:line="12" pos:column="49">(<pos:position pos:line="12" pos:column="50"/></operator><name pos:line="12" pos:column="50">int<pos:position pos:line="12" pos:column="53"/></name><operator pos:line="12" pos:column="53">)<pos:position pos:line="12" pos:column="54"/></operator> <name pos:line="12" pos:column="55">mypid<pos:position pos:line="12" pos:column="60"/></name></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="62">r<pos:position pos:line="12" pos:column="63"/></name><operator pos:line="12" pos:column="63">-&gt;<pos:position pos:line="12" pos:column="68"/></operator><name pos:line="12" pos:column="65">id<pos:position pos:line="12" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="69"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="13" pos:column="13">perror<pos:position pos:line="13" pos:column="19"/></name><argument_list pos:line="13" pos:column="19">(<argument><expr><literal type="string" pos:line="13" pos:column="20">"do_write"<pos:position pos:line="13" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="32"/></expr_stmt>
        }<pos:position pos:line="14" pos:column="10"/></block>

        <return pos:line="16" pos:column="9">return <expr><operator pos:line="16" pos:column="16">-<pos:position pos:line="16" pos:column="17"/></operator><name pos:line="16" pos:column="17">errno<pos:position pos:line="16" pos:column="22"/></name></expr>;<pos:position pos:line="16" pos:column="23"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>

    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name><name pos:line="19" pos:column="9">r<pos:position pos:line="19" pos:column="10"/></name><operator pos:line="19" pos:column="10">-&gt;<pos:position pos:line="19" pos:column="15"/></operator><name pos:line="19" pos:column="12">offset<pos:position pos:line="19" pos:column="18"/></name></name> <operator pos:line="19" pos:column="19">&gt;<pos:position pos:line="19" pos:column="23"/></operator> <operator pos:line="19" pos:column="21">-<pos:position pos:line="19" pos:column="22"/></operator><literal type="number" pos:line="19" pos:column="22">1<pos:position pos:line="19" pos:column="23"/></literal> <operator pos:line="19" pos:column="24">&amp;&amp;<pos:position pos:line="19" pos:column="34"/></operator> <name><name pos:line="19" pos:column="27">r<pos:position pos:line="19" pos:column="28"/></name><operator pos:line="19" pos:column="28">-&gt;<pos:position pos:line="19" pos:column="33"/></operator><name pos:line="19" pos:column="30">offset<pos:position pos:line="19" pos:column="36"/></name></name> <operator pos:line="19" pos:column="37">!=<pos:position pos:line="19" pos:column="39"/></operator> <name><name pos:line="19" pos:column="40">fs<pos:position pos:line="19" pos:column="42"/></name><operator pos:line="19" pos:column="42">-&gt;<pos:position pos:line="19" pos:column="47"/></operator><name pos:line="19" pos:column="44">offset<pos:position pos:line="19" pos:column="50"/></name></name></expr>)<pos:position pos:line="19" pos:column="51"/></condition><then pos:line="19" pos:column="51"> <block pos:line="19" pos:column="52">{
        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><call><name pos:line="20" pos:column="13">lseek<pos:position pos:line="20" pos:column="18"/></name><argument_list pos:line="20" pos:column="18">(<argument><expr><name><name pos:line="20" pos:column="19">fs<pos:position pos:line="20" pos:column="21"/></name><operator pos:line="20" pos:column="21">-&gt;<pos:position pos:line="20" pos:column="26"/></operator><name pos:line="20" pos:column="23">fd<pos:position pos:line="20" pos:column="25"/></name></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="27">r<pos:position pos:line="20" pos:column="28"/></name><operator pos:line="20" pos:column="28">-&gt;<pos:position pos:line="20" pos:column="33"/></operator><name pos:line="20" pos:column="30">offset<pos:position pos:line="20" pos:column="36"/></name></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="38">SEEK_SET<pos:position pos:line="20" pos:column="46"/></name></expr></argument>)<pos:position pos:line="20" pos:column="47"/></argument_list></call> <operator pos:line="20" pos:column="48">&lt;<pos:position pos:line="20" pos:column="52"/></operator> <literal type="number" pos:line="20" pos:column="50">0<pos:position pos:line="20" pos:column="51"/></literal></expr>)<pos:position pos:line="20" pos:column="52"/></condition><then pos:line="20" pos:column="52"> <block pos:line="20" pos:column="53">{
            <macro><name pos:line="21" pos:column="13">DEBUG<pos:position pos:line="21" pos:column="18"/></name><argument_list pos:line="21" pos:column="18">(<argument><literal type="number" pos:line="21" pos:column="19">1<pos:position pos:line="21" pos:column="20"/></literal></argument>)<pos:position pos:line="21" pos:column="21"/></argument_list></macro> <block pos:line="21" pos:column="22">{
                <expr_stmt><expr><call><name pos:line="22" pos:column="17">fprintf<pos:position pos:line="22" pos:column="24"/></name><argument_list pos:line="22" pos:column="24">(<argument><expr><name pos:line="22" pos:column="25">stderr<pos:position pos:line="22" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="33">"%d FD %d, offset %"<pos:position pos:line="22" pos:column="53"/></literal> <name pos:line="22" pos:column="54">PRId64<pos:position pos:line="22" pos:column="60"/></name> <literal type="string" pos:line="22" pos:column="61">": "<pos:position pos:line="22" pos:column="65"/></literal></expr></argument>, <argument><expr><operator pos:line="22" pos:column="67">(<pos:position pos:line="22" pos:column="68"/></operator><name pos:line="22" pos:column="68">int<pos:position pos:line="22" pos:column="71"/></name><operator pos:line="22" pos:column="71">)<pos:position pos:line="22" pos:column="72"/></operator> <name pos:line="22" pos:column="73">mypid<pos:position pos:line="22" pos:column="78"/></name></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="80">fs<pos:position pos:line="22" pos:column="82"/></name><operator pos:line="22" pos:column="82">-&gt;<pos:position pos:line="22" pos:column="87"/></operator><name pos:line="22" pos:column="84">fd<pos:position pos:line="22" pos:column="86"/></name></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="88">(<pos:position pos:line="22" pos:column="89"/></operator><name pos:line="22" pos:column="89">int64_t<pos:position pos:line="22" pos:column="96"/></name><operator pos:line="22" pos:column="96">)<pos:position pos:line="22" pos:column="97"/></operator><name><name pos:line="22" pos:column="97">r<pos:position pos:line="22" pos:column="98"/></name><operator pos:line="22" pos:column="98">-&gt;<pos:position pos:line="22" pos:column="103"/></operator><name pos:line="22" pos:column="100">offset<pos:position pos:line="22" pos:column="106"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="107"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="108"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="23" pos:column="17">perror<pos:position pos:line="23" pos:column="23"/></name><argument_list pos:line="23" pos:column="23">(<argument><expr><literal type="string" pos:line="23" pos:column="24">"lseek"<pos:position pos:line="23" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="33"/></expr_stmt>
            }<pos:position pos:line="24" pos:column="14"/></block>
        }<pos:position pos:line="25" pos:column="10"/></block></then></if>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>

    <macro><name pos:line="28" pos:column="5">DEBUG<pos:position pos:line="28" pos:column="10"/></name><argument_list pos:line="28" pos:column="10">(<argument><literal type="number" pos:line="28" pos:column="11">2<pos:position pos:line="28" pos:column="12"/></literal></argument>)<pos:position pos:line="28" pos:column="13"/></argument_list></macro>
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">fprintf<pos:position pos:line="29" pos:column="12"/></name><argument_list pos:line="29" pos:column="12">(<argument><expr><name pos:line="29" pos:column="13">stderr<pos:position pos:line="29" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="21">"%d WRITE %d,%d,%"<pos:position pos:line="29" pos:column="39"/></literal> <name pos:line="29" pos:column="40">PRId64<pos:position pos:line="29" pos:column="46"/></name> <literal type="string" pos:line="29" pos:column="47">"\n"<pos:position pos:line="29" pos:column="51"/></literal></expr></argument>, <argument><expr><operator pos:line="29" pos:column="53">(<pos:position pos:line="29" pos:column="54"/></operator><name pos:line="29" pos:column="54">int<pos:position pos:line="29" pos:column="57"/></name><operator pos:line="29" pos:column="57">)<pos:position pos:line="29" pos:column="58"/></operator> <name pos:line="29" pos:column="59">mypid<pos:position pos:line="29" pos:column="64"/></name></expr></argument>,
            <argument><expr><name><name pos:line="30" pos:column="13">fs<pos:position pos:line="30" pos:column="15"/></name><operator pos:line="30" pos:column="15">-&gt;<pos:position pos:line="30" pos:column="20"/></operator><name pos:line="30" pos:column="17">fd<pos:position pos:line="30" pos:column="19"/></name></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="21">wrtlen<pos:position pos:line="30" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="29">(<pos:position pos:line="30" pos:column="30"/></operator><name pos:line="30" pos:column="30">int64_t<pos:position pos:line="30" pos:column="37"/></name><operator pos:line="30" pos:column="37">)<pos:position pos:line="30" pos:column="38"/></operator><name><name pos:line="30" pos:column="38">r<pos:position pos:line="30" pos:column="39"/></name><operator pos:line="30" pos:column="39">-&gt;<pos:position pos:line="30" pos:column="44"/></operator><name pos:line="30" pos:column="41">offset<pos:position pos:line="30" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><name pos:line="31" pos:column="5">x<pos:position pos:line="31" pos:column="6"/></name> <operator pos:line="31" pos:column="7">=<pos:position pos:line="31" pos:column="8"/></operator> <call><name pos:line="31" pos:column="9">write<pos:position pos:line="31" pos:column="14"/></name><argument_list pos:line="31" pos:column="14">(<argument><expr><name><name pos:line="31" pos:column="15">fs<pos:position pos:line="31" pos:column="17"/></name><operator pos:line="31" pos:column="17">-&gt;<pos:position pos:line="31" pos:column="22"/></operator><name pos:line="31" pos:column="19">fd<pos:position pos:line="31" pos:column="21"/></name></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="23">buf<pos:position pos:line="31" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="28">wrtlen<pos:position pos:line="31" pos:column="34"/></name></expr></argument>)<pos:position pos:line="31" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="36"/></expr_stmt>

    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><name pos:line="33" pos:column="9">x<pos:position pos:line="33" pos:column="10"/></name> <operator pos:line="33" pos:column="11">&lt;<pos:position pos:line="33" pos:column="15"/></operator> <literal type="number" pos:line="33" pos:column="13">0<pos:position pos:line="33" pos:column="14"/></literal></expr>)<pos:position pos:line="33" pos:column="15"/></condition><then pos:line="33" pos:column="15"> <block pos:line="33" pos:column="16">{
        <macro><name pos:line="34" pos:column="9">DEBUG<pos:position pos:line="34" pos:column="14"/></name><argument_list pos:line="34" pos:column="14">(<argument><literal type="number" pos:line="34" pos:column="15">1<pos:position pos:line="34" pos:column="16"/></literal></argument>)<pos:position pos:line="34" pos:column="17"/></argument_list></macro> <block pos:line="34" pos:column="18">{
            <expr_stmt><expr><call><name pos:line="35" pos:column="13">fprintf<pos:position pos:line="35" pos:column="20"/></name><argument_list pos:line="35" pos:column="20">(<argument><expr><name pos:line="35" pos:column="21">stderr<pos:position pos:line="35" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="29">"%d FD %d: "<pos:position pos:line="35" pos:column="41"/></literal></expr></argument>, <argument><expr><operator pos:line="35" pos:column="43">(<pos:position pos:line="35" pos:column="44"/></operator><name pos:line="35" pos:column="44">int<pos:position pos:line="35" pos:column="47"/></name><operator pos:line="35" pos:column="47">)<pos:position pos:line="35" pos:column="48"/></operator> <name pos:line="35" pos:column="49">mypid<pos:position pos:line="35" pos:column="54"/></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="56">fs<pos:position pos:line="35" pos:column="58"/></name><operator pos:line="35" pos:column="58">-&gt;<pos:position pos:line="35" pos:column="63"/></operator><name pos:line="35" pos:column="60">fd<pos:position pos:line="35" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="64"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="36" pos:column="13">perror<pos:position pos:line="36" pos:column="19"/></name><argument_list pos:line="36" pos:column="19">(<argument><expr><literal type="string" pos:line="36" pos:column="20">"write"<pos:position pos:line="36" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="37" pos:column="10"/></block>

        <return pos:line="39" pos:column="9">return <expr><operator pos:line="39" pos:column="16">-<pos:position pos:line="39" pos:column="17"/></operator><name pos:line="39" pos:column="17">errno<pos:position pos:line="39" pos:column="22"/></name></expr>;<pos:position pos:line="39" pos:column="23"/></return>
    }<pos:position pos:line="40" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="42" pos:column="5">fs<pos:position pos:line="42" pos:column="7"/></name><operator pos:line="42" pos:column="7">-&gt;<pos:position pos:line="42" pos:column="12"/></operator><name pos:line="42" pos:column="9">offset<pos:position pos:line="42" pos:column="15"/></name></name> <operator pos:line="42" pos:column="16">=<pos:position pos:line="42" pos:column="17"/></operator> <name><name pos:line="42" pos:column="18">r<pos:position pos:line="42" pos:column="19"/></name><operator pos:line="42" pos:column="19">-&gt;<pos:position pos:line="42" pos:column="24"/></operator><name pos:line="42" pos:column="21">offset<pos:position pos:line="42" pos:column="27"/></name></name> <operator pos:line="42" pos:column="28">+<pos:position pos:line="42" pos:column="29"/></operator> <name pos:line="42" pos:column="30">x<pos:position pos:line="42" pos:column="31"/></name></expr>;<pos:position pos:line="42" pos:column="32"/></expr_stmt>
    <return pos:line="43" pos:column="5">return <expr><name pos:line="43" pos:column="12">x<pos:position pos:line="43" pos:column="13"/></name></expr>;<pos:position pos:line="43" pos:column="14"/></return>
}<pos:position pos:line="44" pos:column="2"/></block></function></unit>
