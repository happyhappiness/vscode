<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2007_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HttpHdrCc<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">parse<pos:position pos:line="2" pos:column="17"/></name></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><specifier pos:line="2" pos:column="18">const<pos:position pos:line="2" pos:column="23"/></specifier> <name pos:line="2" pos:column="24">String<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">&amp;<pos:position pos:line="2" pos:column="36"/></modifier></type> <name pos:line="2" pos:column="33">str<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="37"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">item<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">char<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">p<pos:position pos:line="5" pos:column="18"/></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>      <comment type="block" pos:line="5" pos:column="25">/* '=' parameter */</comment>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">char<pos:position pos:line="6" pos:column="15"/></name> <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type><name pos:line="6" pos:column="17">pos<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><name pos:line="6" pos:column="23">NULL<pos:position pos:line="6" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">ilen<pos:position pos:line="7" pos:column="13"/></name></decl>;<pos:position pos:line="7" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">nlen<pos:position pos:line="8" pos:column="13"/></name></decl>;<pos:position pos:line="8" pos:column="14"/></decl_stmt>

    <comment type="block" pos:line="10" pos:column="5">/* iterate through comma separated list */</comment>

    <while pos:line="12" pos:column="5">while <condition pos:line="12" pos:column="11">(<expr><call><name pos:line="12" pos:column="12">strListGetItem<pos:position pos:line="12" pos:column="26"/></name><argument_list pos:line="12" pos:column="26">(<argument><expr><operator pos:line="12" pos:column="27">&amp;<pos:position pos:line="12" pos:column="32"/></operator><name pos:line="12" pos:column="28">str<pos:position pos:line="12" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="12" pos:column="33">','<pos:position pos:line="12" pos:column="36"/></literal></expr></argument>, <argument><expr><operator pos:line="12" pos:column="38">&amp;<pos:position pos:line="12" pos:column="43"/></operator><name pos:line="12" pos:column="39">item<pos:position pos:line="12" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="45">&amp;<pos:position pos:line="12" pos:column="50"/></operator><name pos:line="12" pos:column="46">ilen<pos:position pos:line="12" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="52">&amp;<pos:position pos:line="12" pos:column="57"/></operator><name pos:line="12" pos:column="53">pos<pos:position pos:line="12" pos:column="56"/></name></expr></argument>)<pos:position pos:line="12" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="58"/></condition> <block pos:line="12" pos:column="59">{
        <comment type="block" pos:line="13" pos:column="9">/* isolate directive name */</comment>

        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><operator pos:line="15" pos:column="13">(<pos:position pos:line="15" pos:column="14"/></operator><name pos:line="15" pos:column="14">p<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">=<pos:position pos:line="15" pos:column="17"/></operator> <operator pos:line="15" pos:column="18">(<pos:position pos:line="15" pos:column="19"/></operator><specifier pos:line="15" pos:column="19">const<pos:position pos:line="15" pos:column="24"/></specifier> <name pos:line="15" pos:column="25">char<pos:position pos:line="15" pos:column="29"/></name> <operator pos:line="15" pos:column="30">*<pos:position pos:line="15" pos:column="31"/></operator><operator pos:line="15" pos:column="31">)<pos:position pos:line="15" pos:column="32"/></operator><call><name pos:line="15" pos:column="32">memchr<pos:position pos:line="15" pos:column="38"/></name><argument_list pos:line="15" pos:column="38">(<argument><expr><name pos:line="15" pos:column="39">item<pos:position pos:line="15" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="15" pos:column="45">'='<pos:position pos:line="15" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="50">ilen<pos:position pos:line="15" pos:column="54"/></name></expr></argument>)<pos:position pos:line="15" pos:column="55"/></argument_list></call><operator pos:line="15" pos:column="55">)<pos:position pos:line="15" pos:column="56"/></operator> <operator pos:line="15" pos:column="57">&amp;&amp;<pos:position pos:line="15" pos:column="67"/></operator> <operator pos:line="15" pos:column="60">(<pos:position pos:line="15" pos:column="61"/></operator><name pos:line="15" pos:column="61">p<pos:position pos:line="15" pos:column="62"/></name> <operator pos:line="15" pos:column="63">-<pos:position pos:line="15" pos:column="64"/></operator> <name pos:line="15" pos:column="65">item<pos:position pos:line="15" pos:column="69"/></name> <operator pos:line="15" pos:column="70">&lt;<pos:position pos:line="15" pos:column="74"/></operator> <name pos:line="15" pos:column="72">ilen<pos:position pos:line="15" pos:column="76"/></name><operator pos:line="15" pos:column="76">)<pos:position pos:line="15" pos:column="77"/></operator></expr>)<pos:position pos:line="15" pos:column="78"/></condition><then pos:line="15" pos:column="78"> <block pos:line="15" pos:column="79">{
            <expr_stmt><expr><name pos:line="16" pos:column="13">nlen<pos:position pos:line="16" pos:column="17"/></name> <operator pos:line="16" pos:column="18">=<pos:position pos:line="16" pos:column="19"/></operator> <name pos:line="16" pos:column="20">p<pos:position pos:line="16" pos:column="21"/></name> <operator pos:line="16" pos:column="22">-<pos:position pos:line="16" pos:column="23"/></operator> <name pos:line="16" pos:column="24">item<pos:position pos:line="16" pos:column="28"/></name></expr>;<pos:position pos:line="16" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="17" pos:column="13">++<pos:position pos:line="17" pos:column="15"/></operator><name pos:line="17" pos:column="15">p<pos:position pos:line="17" pos:column="16"/></name></expr>;<pos:position pos:line="17" pos:column="17"/></expr_stmt>
        }<pos:position pos:line="18" pos:column="10"/></block></then> <else pos:line="18" pos:column="11">else <block pos:line="18" pos:column="16">{
            <expr_stmt><expr><name pos:line="19" pos:column="13">nlen<pos:position pos:line="19" pos:column="17"/></name> <operator pos:line="19" pos:column="18">=<pos:position pos:line="19" pos:column="19"/></operator> <name pos:line="19" pos:column="20">ilen<pos:position pos:line="19" pos:column="24"/></name></expr>;<pos:position pos:line="19" pos:column="25"/></expr_stmt>
        }<pos:position pos:line="20" pos:column="10"/></block></else></if>

        <comment type="block" pos:line="22" pos:column="9">/* find type */</comment>
        <decl_stmt><decl><type><specifier pos:line="23" pos:column="9">const<pos:position pos:line="23" pos:column="14"/></specifier> <name pos:line="23" pos:column="15">HttpHdrCcType<pos:position pos:line="23" pos:column="28"/></name></type> <name pos:line="23" pos:column="29">type<pos:position pos:line="23" pos:column="33"/></name> <init pos:line="23" pos:column="34">= <expr><call><name><name pos:line="23" pos:column="36">ccLookupTable<pos:position pos:line="23" pos:column="49"/></name><operator pos:line="23" pos:column="49">.<pos:position pos:line="23" pos:column="50"/></operator><name pos:line="23" pos:column="50">lookup<pos:position pos:line="23" pos:column="56"/></name></name><argument_list pos:line="23" pos:column="56">(<argument><expr><call><name pos:line="23" pos:column="57">SBuf<pos:position pos:line="23" pos:column="61"/></name><argument_list pos:line="23" pos:column="61">(<argument><expr><name pos:line="23" pos:column="62">item<pos:position pos:line="23" pos:column="66"/></name></expr></argument>,<argument><expr><name pos:line="23" pos:column="67">nlen<pos:position pos:line="23" pos:column="71"/></name></expr></argument>)<pos:position pos:line="23" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="73"/></argument_list></call></expr></init></decl>;<pos:position pos:line="23" pos:column="74"/></decl_stmt>

        <comment type="line" pos:line="25" pos:column="9">// ignore known duplicate directives</comment>
        <if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><call><name pos:line="26" pos:column="13">isSet<pos:position pos:line="26" pos:column="18"/></name><argument_list pos:line="26" pos:column="18">(<argument><expr><name pos:line="26" pos:column="19">type<pos:position pos:line="26" pos:column="23"/></name></expr></argument>)<pos:position pos:line="26" pos:column="24"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="25"/></condition><then pos:line="26" pos:column="25"> <block pos:line="26" pos:column="26">{
            <if pos:line="27" pos:column="13">if <condition pos:line="27" pos:column="16">(<expr><name pos:line="27" pos:column="17">type<pos:position pos:line="27" pos:column="21"/></name> <operator pos:line="27" pos:column="22">!=<pos:position pos:line="27" pos:column="24"/></operator> <name><name pos:line="27" pos:column="25">HttpHdrCcType<pos:position pos:line="27" pos:column="38"/></name><operator pos:line="27" pos:column="38">::<pos:position pos:line="27" pos:column="40"/></operator><name pos:line="27" pos:column="40">CC_OTHER<pos:position pos:line="27" pos:column="48"/></name></name></expr>)<pos:position pos:line="27" pos:column="49"/></condition><then pos:line="27" pos:column="49"> <block pos:line="27" pos:column="50">{
                <expr_stmt><expr><call><name pos:line="28" pos:column="17">debugs<pos:position pos:line="28" pos:column="23"/></name><argument_list pos:line="28" pos:column="23">(<argument><expr><literal type="number" pos:line="28" pos:column="24">65<pos:position pos:line="28" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="28">2<pos:position pos:line="28" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="31">"hdr cc: ignoring duplicate cache-directive: near '"<pos:position pos:line="28" pos:column="83"/></literal> <operator pos:line="28" pos:column="84">&lt;&lt;<pos:position pos:line="28" pos:column="92"/></operator> <name pos:line="28" pos:column="87">item<pos:position pos:line="28" pos:column="91"/></name> <operator pos:line="28" pos:column="92">&lt;&lt;<pos:position pos:line="28" pos:column="100"/></operator> <literal type="string" pos:line="28" pos:column="95">"' in '"<pos:position pos:line="28" pos:column="103"/></literal> <operator pos:line="28" pos:column="104">&lt;&lt;<pos:position pos:line="28" pos:column="112"/></operator> <name pos:line="28" pos:column="107">str<pos:position pos:line="28" pos:column="110"/></name> <operator pos:line="28" pos:column="111">&lt;&lt;<pos:position pos:line="28" pos:column="119"/></operator> <literal type="string" pos:line="28" pos:column="114">"'"<pos:position pos:line="28" pos:column="117"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="118"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="119"/></expr_stmt>
                <expr_stmt><expr><operator pos:line="29" pos:column="17">++<pos:position pos:line="29" pos:column="19"/></operator> <name><name pos:line="29" pos:column="20">ccHeaderStats<pos:position pos:line="29" pos:column="33"/></name><index pos:line="29" pos:column="33">[<expr><name pos:line="29" pos:column="34">type<pos:position pos:line="29" pos:column="38"/></name></expr>]<pos:position pos:line="29" pos:column="39"/></index></name><operator pos:line="29" pos:column="39">.<pos:position pos:line="29" pos:column="40"/></operator><name pos:line="29" pos:column="40">repCount<pos:position pos:line="29" pos:column="48"/></name></expr>;<pos:position pos:line="29" pos:column="49"/></expr_stmt>
                <continue pos:line="30" pos:column="17">continue;<pos:position pos:line="30" pos:column="26"/></continue>
            }<pos:position pos:line="31" pos:column="14"/></block></then></if>
        }<pos:position pos:line="32" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="34" pos:column="9">/* special-case-parsing and attribute-setting */</comment>
        <switch pos:line="35" pos:column="9">switch <condition pos:line="35" pos:column="16">(<expr><name pos:line="35" pos:column="17">type<pos:position pos:line="35" pos:column="21"/></name></expr>)<pos:position pos:line="35" pos:column="22"/></condition> <block pos:line="35" pos:column="23">{

        <case pos:line="37" pos:column="9">case <expr><name><name pos:line="37" pos:column="14">HttpHdrCcType<pos:position pos:line="37" pos:column="27"/></name><operator pos:line="37" pos:column="27">::<pos:position pos:line="37" pos:column="29"/></operator><name pos:line="37" pos:column="29">CC_MAX_AGE<pos:position pos:line="37" pos:column="39"/></name></name></expr>:<pos:position pos:line="37" pos:column="40"/></case>
            <if pos:line="38" pos:column="13">if <condition pos:line="38" pos:column="16">(<expr><operator pos:line="38" pos:column="17">!<pos:position pos:line="38" pos:column="18"/></operator><name pos:line="38" pos:column="18">p<pos:position pos:line="38" pos:column="19"/></name> <operator pos:line="38" pos:column="20">||<pos:position pos:line="38" pos:column="22"/></operator> <operator pos:line="38" pos:column="23">!<pos:position pos:line="38" pos:column="24"/></operator><call><name pos:line="38" pos:column="24">httpHeaderParseInt<pos:position pos:line="38" pos:column="42"/></name><argument_list pos:line="38" pos:column="42">(<argument><expr><name pos:line="38" pos:column="43">p<pos:position pos:line="38" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="46">&amp;<pos:position pos:line="38" pos:column="51"/></operator><name pos:line="38" pos:column="47">max_age<pos:position pos:line="38" pos:column="54"/></name></expr></argument>)<pos:position pos:line="38" pos:column="55"/></argument_list></call> <operator pos:line="38" pos:column="56">||<pos:position pos:line="38" pos:column="58"/></operator> <name pos:line="38" pos:column="59">max_age<pos:position pos:line="38" pos:column="66"/></name> <operator pos:line="38" pos:column="67">&lt;<pos:position pos:line="38" pos:column="71"/></operator> <literal type="number" pos:line="38" pos:column="69">0<pos:position pos:line="38" pos:column="70"/></literal></expr>)<pos:position pos:line="38" pos:column="71"/></condition><then pos:line="38" pos:column="71"> <block pos:line="38" pos:column="72">{
                <expr_stmt><expr><call><name pos:line="39" pos:column="17">debugs<pos:position pos:line="39" pos:column="23"/></name><argument_list pos:line="39" pos:column="23">(<argument><expr><literal type="number" pos:line="39" pos:column="24">65<pos:position pos:line="39" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="28">2<pos:position pos:line="39" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="31">"cc: invalid max-age specs near '"<pos:position pos:line="39" pos:column="65"/></literal> <operator pos:line="39" pos:column="66">&lt;&lt;<pos:position pos:line="39" pos:column="74"/></operator> <name pos:line="39" pos:column="69">item<pos:position pos:line="39" pos:column="73"/></name> <operator pos:line="39" pos:column="74">&lt;&lt;<pos:position pos:line="39" pos:column="82"/></operator> <literal type="string" pos:line="39" pos:column="77">"'"<pos:position pos:line="39" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="82"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="40" pos:column="17">clearMaxAge<pos:position pos:line="40" pos:column="28"/></name><argument_list pos:line="40" pos:column="28">()<pos:position pos:line="40" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="31"/></expr_stmt>
            }<pos:position pos:line="41" pos:column="14"/></block></then> <else pos:line="41" pos:column="15">else <block pos:line="41" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="42" pos:column="17">setMask<pos:position pos:line="42" pos:column="24"/></name><argument_list pos:line="42" pos:column="24">(<argument><expr><name pos:line="42" pos:column="25">type<pos:position pos:line="42" pos:column="29"/></name></expr></argument>,<argument><expr><literal type="boolean" pos:line="42" pos:column="30">true<pos:position pos:line="42" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="36"/></expr_stmt>
            }<pos:position pos:line="43" pos:column="14"/></block></else></if>
            <break pos:line="44" pos:column="13">break;<pos:position pos:line="44" pos:column="19"/></break>

        <case pos:line="46" pos:column="9">case <expr><name><name pos:line="46" pos:column="14">HttpHdrCcType<pos:position pos:line="46" pos:column="27"/></name><operator pos:line="46" pos:column="27">::<pos:position pos:line="46" pos:column="29"/></operator><name pos:line="46" pos:column="29">CC_S_MAXAGE<pos:position pos:line="46" pos:column="40"/></name></name></expr>:<pos:position pos:line="46" pos:column="41"/></case>
            <if pos:line="47" pos:column="13">if <condition pos:line="47" pos:column="16">(<expr><operator pos:line="47" pos:column="17">!<pos:position pos:line="47" pos:column="18"/></operator><name pos:line="47" pos:column="18">p<pos:position pos:line="47" pos:column="19"/></name> <operator pos:line="47" pos:column="20">||<pos:position pos:line="47" pos:column="22"/></operator> <operator pos:line="47" pos:column="23">!<pos:position pos:line="47" pos:column="24"/></operator><call><name pos:line="47" pos:column="24">httpHeaderParseInt<pos:position pos:line="47" pos:column="42"/></name><argument_list pos:line="47" pos:column="42">(<argument><expr><name pos:line="47" pos:column="43">p<pos:position pos:line="47" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="46">&amp;<pos:position pos:line="47" pos:column="51"/></operator><name pos:line="47" pos:column="47">s_maxage<pos:position pos:line="47" pos:column="55"/></name></expr></argument>)<pos:position pos:line="47" pos:column="56"/></argument_list></call> <operator pos:line="47" pos:column="57">||<pos:position pos:line="47" pos:column="59"/></operator> <name pos:line="47" pos:column="60">s_maxage<pos:position pos:line="47" pos:column="68"/></name> <operator pos:line="47" pos:column="69">&lt;<pos:position pos:line="47" pos:column="73"/></operator> <literal type="number" pos:line="47" pos:column="71">0<pos:position pos:line="47" pos:column="72"/></literal></expr>)<pos:position pos:line="47" pos:column="73"/></condition><then pos:line="47" pos:column="73"> <block pos:line="47" pos:column="74">{
                <expr_stmt><expr><call><name pos:line="48" pos:column="17">debugs<pos:position pos:line="48" pos:column="23"/></name><argument_list pos:line="48" pos:column="23">(<argument><expr><literal type="number" pos:line="48" pos:column="24">65<pos:position pos:line="48" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="48" pos:column="28">2<pos:position pos:line="48" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="31">"cc: invalid s-maxage specs near '"<pos:position pos:line="48" pos:column="66"/></literal> <operator pos:line="48" pos:column="67">&lt;&lt;<pos:position pos:line="48" pos:column="75"/></operator> <name pos:line="48" pos:column="70">item<pos:position pos:line="48" pos:column="74"/></name> <operator pos:line="48" pos:column="75">&lt;&lt;<pos:position pos:line="48" pos:column="83"/></operator> <literal type="string" pos:line="48" pos:column="78">"'"<pos:position pos:line="48" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="83"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="49" pos:column="17">clearSMaxAge<pos:position pos:line="49" pos:column="29"/></name><argument_list pos:line="49" pos:column="29">()<pos:position pos:line="49" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="32"/></expr_stmt>
            }<pos:position pos:line="50" pos:column="14"/></block></then> <else pos:line="50" pos:column="15">else <block pos:line="50" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="51" pos:column="17">setMask<pos:position pos:line="51" pos:column="24"/></name><argument_list pos:line="51" pos:column="24">(<argument><expr><name pos:line="51" pos:column="25">type<pos:position pos:line="51" pos:column="29"/></name></expr></argument>,<argument><expr><literal type="boolean" pos:line="51" pos:column="30">true<pos:position pos:line="51" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="36"/></expr_stmt>
            }<pos:position pos:line="52" pos:column="14"/></block></else></if>
            <break pos:line="53" pos:column="13">break;<pos:position pos:line="53" pos:column="19"/></break>

        <case pos:line="55" pos:column="9">case <expr><name><name pos:line="55" pos:column="14">HttpHdrCcType<pos:position pos:line="55" pos:column="27"/></name><operator pos:line="55" pos:column="27">::<pos:position pos:line="55" pos:column="29"/></operator><name pos:line="55" pos:column="29">CC_MAX_STALE<pos:position pos:line="55" pos:column="41"/></name></name></expr>:<pos:position pos:line="55" pos:column="42"/></case>
            <if pos:line="56" pos:column="13">if <condition pos:line="56" pos:column="16">(<expr><operator pos:line="56" pos:column="17">!<pos:position pos:line="56" pos:column="18"/></operator><name pos:line="56" pos:column="18">p<pos:position pos:line="56" pos:column="19"/></name> <operator pos:line="56" pos:column="20">||<pos:position pos:line="56" pos:column="22"/></operator> <operator pos:line="56" pos:column="23">!<pos:position pos:line="56" pos:column="24"/></operator><call><name pos:line="56" pos:column="24">httpHeaderParseInt<pos:position pos:line="56" pos:column="42"/></name><argument_list pos:line="56" pos:column="42">(<argument><expr><name pos:line="56" pos:column="43">p<pos:position pos:line="56" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="56" pos:column="46">&amp;<pos:position pos:line="56" pos:column="51"/></operator><name pos:line="56" pos:column="47">max_stale<pos:position pos:line="56" pos:column="56"/></name></expr></argument>)<pos:position pos:line="56" pos:column="57"/></argument_list></call> <operator pos:line="56" pos:column="58">||<pos:position pos:line="56" pos:column="60"/></operator> <name pos:line="56" pos:column="61">max_stale<pos:position pos:line="56" pos:column="70"/></name> <operator pos:line="56" pos:column="71">&lt;<pos:position pos:line="56" pos:column="75"/></operator> <literal type="number" pos:line="56" pos:column="73">0<pos:position pos:line="56" pos:column="74"/></literal></expr>)<pos:position pos:line="56" pos:column="75"/></condition><then pos:line="56" pos:column="75"> <block pos:line="56" pos:column="76">{
                <expr_stmt><expr><call><name pos:line="57" pos:column="17">debugs<pos:position pos:line="57" pos:column="23"/></name><argument_list pos:line="57" pos:column="23">(<argument><expr><literal type="number" pos:line="57" pos:column="24">65<pos:position pos:line="57" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="57" pos:column="28">2<pos:position pos:line="57" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="31">"cc: max-stale directive is valid without value"<pos:position pos:line="57" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="81"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="58" pos:column="17">maxStale<pos:position pos:line="58" pos:column="25"/></name><argument_list pos:line="58" pos:column="25">(<argument><expr><name pos:line="58" pos:column="26">MAX_STALE_ANY<pos:position pos:line="58" pos:column="39"/></name></expr></argument>)<pos:position pos:line="58" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="41"/></expr_stmt>
            }<pos:position pos:line="59" pos:column="14"/></block></then> <else pos:line="59" pos:column="15">else <block pos:line="59" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="60" pos:column="17">setMask<pos:position pos:line="60" pos:column="24"/></name><argument_list pos:line="60" pos:column="24">(<argument><expr><name pos:line="60" pos:column="25">type<pos:position pos:line="60" pos:column="29"/></name></expr></argument>,<argument><expr><literal type="boolean" pos:line="60" pos:column="30">true<pos:position pos:line="60" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="36"/></expr_stmt>
            }<pos:position pos:line="61" pos:column="14"/></block></else></if>
            <break pos:line="62" pos:column="13">break;<pos:position pos:line="62" pos:column="19"/></break>

        <case pos:line="64" pos:column="9">case <expr><name><name pos:line="64" pos:column="14">HttpHdrCcType<pos:position pos:line="64" pos:column="27"/></name><operator pos:line="64" pos:column="27">::<pos:position pos:line="64" pos:column="29"/></operator><name pos:line="64" pos:column="29">CC_MIN_FRESH<pos:position pos:line="64" pos:column="41"/></name></name></expr>:<pos:position pos:line="64" pos:column="42"/></case>
            <if pos:line="65" pos:column="13">if <condition pos:line="65" pos:column="16">(<expr><operator pos:line="65" pos:column="17">!<pos:position pos:line="65" pos:column="18"/></operator><name pos:line="65" pos:column="18">p<pos:position pos:line="65" pos:column="19"/></name> <operator pos:line="65" pos:column="20">||<pos:position pos:line="65" pos:column="22"/></operator> <operator pos:line="65" pos:column="23">!<pos:position pos:line="65" pos:column="24"/></operator><call><name pos:line="65" pos:column="24">httpHeaderParseInt<pos:position pos:line="65" pos:column="42"/></name><argument_list pos:line="65" pos:column="42">(<argument><expr><name pos:line="65" pos:column="43">p<pos:position pos:line="65" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="65" pos:column="46">&amp;<pos:position pos:line="65" pos:column="51"/></operator><name pos:line="65" pos:column="47">min_fresh<pos:position pos:line="65" pos:column="56"/></name></expr></argument>)<pos:position pos:line="65" pos:column="57"/></argument_list></call> <operator pos:line="65" pos:column="58">||<pos:position pos:line="65" pos:column="60"/></operator> <name pos:line="65" pos:column="61">min_fresh<pos:position pos:line="65" pos:column="70"/></name> <operator pos:line="65" pos:column="71">&lt;<pos:position pos:line="65" pos:column="75"/></operator> <literal type="number" pos:line="65" pos:column="73">0<pos:position pos:line="65" pos:column="74"/></literal></expr>)<pos:position pos:line="65" pos:column="75"/></condition><then pos:line="65" pos:column="75"> <block pos:line="65" pos:column="76">{
                <expr_stmt><expr><call><name pos:line="66" pos:column="17">debugs<pos:position pos:line="66" pos:column="23"/></name><argument_list pos:line="66" pos:column="23">(<argument><expr><literal type="number" pos:line="66" pos:column="24">65<pos:position pos:line="66" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="66" pos:column="28">2<pos:position pos:line="66" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="31">"cc: invalid min-fresh specs near '"<pos:position pos:line="66" pos:column="67"/></literal> <operator pos:line="66" pos:column="68">&lt;&lt;<pos:position pos:line="66" pos:column="76"/></operator> <name pos:line="66" pos:column="71">item<pos:position pos:line="66" pos:column="75"/></name> <operator pos:line="66" pos:column="76">&lt;&lt;<pos:position pos:line="66" pos:column="84"/></operator> <literal type="string" pos:line="66" pos:column="79">"'"<pos:position pos:line="66" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="84"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="67" pos:column="17">clearMinFresh<pos:position pos:line="67" pos:column="30"/></name><argument_list pos:line="67" pos:column="30">()<pos:position pos:line="67" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="33"/></expr_stmt>
            }<pos:position pos:line="68" pos:column="14"/></block></then> <else pos:line="68" pos:column="15">else <block pos:line="68" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="69" pos:column="17">setMask<pos:position pos:line="69" pos:column="24"/></name><argument_list pos:line="69" pos:column="24">(<argument><expr><name pos:line="69" pos:column="25">type<pos:position pos:line="69" pos:column="29"/></name></expr></argument>,<argument><expr><literal type="boolean" pos:line="69" pos:column="30">true<pos:position pos:line="69" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="36"/></expr_stmt>
            }<pos:position pos:line="70" pos:column="14"/></block></else></if>
            <break pos:line="71" pos:column="13">break;<pos:position pos:line="71" pos:column="19"/></break>

        <case pos:line="73" pos:column="9">case <expr><name><name pos:line="73" pos:column="14">HttpHdrCcType<pos:position pos:line="73" pos:column="27"/></name><operator pos:line="73" pos:column="27">::<pos:position pos:line="73" pos:column="29"/></operator><name pos:line="73" pos:column="29">CC_STALE_IF_ERROR<pos:position pos:line="73" pos:column="46"/></name></name></expr>:<pos:position pos:line="73" pos:column="47"/></case>
            <if pos:line="74" pos:column="13">if <condition pos:line="74" pos:column="16">(<expr><operator pos:line="74" pos:column="17">!<pos:position pos:line="74" pos:column="18"/></operator><name pos:line="74" pos:column="18">p<pos:position pos:line="74" pos:column="19"/></name> <operator pos:line="74" pos:column="20">||<pos:position pos:line="74" pos:column="22"/></operator> <operator pos:line="74" pos:column="23">!<pos:position pos:line="74" pos:column="24"/></operator><call><name pos:line="74" pos:column="24">httpHeaderParseInt<pos:position pos:line="74" pos:column="42"/></name><argument_list pos:line="74" pos:column="42">(<argument><expr><name pos:line="74" pos:column="43">p<pos:position pos:line="74" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="74" pos:column="46">&amp;<pos:position pos:line="74" pos:column="51"/></operator><name pos:line="74" pos:column="47">stale_if_error<pos:position pos:line="74" pos:column="61"/></name></expr></argument>)<pos:position pos:line="74" pos:column="62"/></argument_list></call> <operator pos:line="74" pos:column="63">||<pos:position pos:line="74" pos:column="65"/></operator> <name pos:line="74" pos:column="66">stale_if_error<pos:position pos:line="74" pos:column="80"/></name> <operator pos:line="74" pos:column="81">&lt;<pos:position pos:line="74" pos:column="85"/></operator> <literal type="number" pos:line="74" pos:column="83">0<pos:position pos:line="74" pos:column="84"/></literal></expr>)<pos:position pos:line="74" pos:column="85"/></condition><then pos:line="74" pos:column="85"> <block pos:line="74" pos:column="86">{
                <expr_stmt><expr><call><name pos:line="75" pos:column="17">debugs<pos:position pos:line="75" pos:column="23"/></name><argument_list pos:line="75" pos:column="23">(<argument><expr><literal type="number" pos:line="75" pos:column="24">65<pos:position pos:line="75" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="75" pos:column="28">2<pos:position pos:line="75" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="75" pos:column="31">"cc: invalid stale-if-error specs near '"<pos:position pos:line="75" pos:column="72"/></literal> <operator pos:line="75" pos:column="73">&lt;&lt;<pos:position pos:line="75" pos:column="81"/></operator> <name pos:line="75" pos:column="76">item<pos:position pos:line="75" pos:column="80"/></name> <operator pos:line="75" pos:column="81">&lt;&lt;<pos:position pos:line="75" pos:column="89"/></operator> <literal type="string" pos:line="75" pos:column="84">"'"<pos:position pos:line="75" pos:column="87"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="89"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="76" pos:column="17">clearStaleIfError<pos:position pos:line="76" pos:column="34"/></name><argument_list pos:line="76" pos:column="34">()<pos:position pos:line="76" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="37"/></expr_stmt>
            }<pos:position pos:line="77" pos:column="14"/></block></then> <else pos:line="77" pos:column="15">else <block pos:line="77" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="78" pos:column="17">setMask<pos:position pos:line="78" pos:column="24"/></name><argument_list pos:line="78" pos:column="24">(<argument><expr><name pos:line="78" pos:column="25">type<pos:position pos:line="78" pos:column="29"/></name></expr></argument>,<argument><expr><literal type="boolean" pos:line="78" pos:column="30">true<pos:position pos:line="78" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="78" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="36"/></expr_stmt>
            }<pos:position pos:line="79" pos:column="14"/></block></else></if>
            <break pos:line="80" pos:column="13">break;<pos:position pos:line="80" pos:column="19"/></break>

        <case pos:line="82" pos:column="9">case <expr><name><name pos:line="82" pos:column="14">HttpHdrCcType<pos:position pos:line="82" pos:column="27"/></name><operator pos:line="82" pos:column="27">::<pos:position pos:line="82" pos:column="29"/></operator><name pos:line="82" pos:column="29">CC_PRIVATE<pos:position pos:line="82" pos:column="39"/></name></name></expr>:<pos:position pos:line="82" pos:column="40"/></case> <block pos:line="82" pos:column="41">{
            <decl_stmt><decl><type><name pos:line="83" pos:column="13">String<pos:position pos:line="83" pos:column="19"/></name></type> <name pos:line="83" pos:column="20">temp<pos:position pos:line="83" pos:column="24"/></name></decl>;<pos:position pos:line="83" pos:column="25"/></decl_stmt>
            <if pos:line="84" pos:column="13">if <condition pos:line="84" pos:column="16">(<expr><operator pos:line="84" pos:column="17">!<pos:position pos:line="84" pos:column="18"/></operator><name pos:line="84" pos:column="18">p<pos:position pos:line="84" pos:column="19"/></name></expr>)<pos:position pos:line="84" pos:column="20"/></condition><then pos:line="84" pos:column="20">  <block pos:line="84" pos:column="22">{
                <comment type="line" pos:line="85" pos:column="17">// Value parameter is optional.</comment>
                <expr_stmt><expr><call><name><name pos:line="86" pos:column="17">private_<pos:position pos:line="86" pos:column="25"/></name><operator pos:line="86" pos:column="25">.<pos:position pos:line="86" pos:column="26"/></operator><name pos:line="86" pos:column="26">clean<pos:position pos:line="86" pos:column="31"/></name></name><argument_list pos:line="86" pos:column="31">()<pos:position pos:line="86" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="34"/></expr_stmt>
            }<pos:position pos:line="87" pos:column="14"/></block></then>            <elseif pos:line="87" pos:column="26">else <if pos:line="87" pos:column="31">if <condition pos:line="87" pos:column="34">(<comment type="block" pos:line="87" pos:column="35">/* p &amp;&amp;*/</comment> <expr><call><name pos:line="87" pos:column="45">httpHeaderParseQuotedString<pos:position pos:line="87" pos:column="72"/></name><argument_list pos:line="87" pos:column="72">(<argument><expr><name pos:line="87" pos:column="73">p<pos:position pos:line="87" pos:column="74"/></name></expr></argument>, <argument><expr><operator pos:line="87" pos:column="76">(<pos:position pos:line="87" pos:column="77"/></operator><name pos:line="87" pos:column="77">ilen<pos:position pos:line="87" pos:column="81"/></name><operator pos:line="87" pos:column="81">-<pos:position pos:line="87" pos:column="82"/></operator><name pos:line="87" pos:column="82">nlen<pos:position pos:line="87" pos:column="86"/></name><operator pos:line="87" pos:column="86">-<pos:position pos:line="87" pos:column="87"/></operator><literal type="number" pos:line="87" pos:column="87">1<pos:position pos:line="87" pos:column="88"/></literal><operator pos:line="87" pos:column="88">)<pos:position pos:line="87" pos:column="89"/></operator></expr></argument>, <argument><expr><operator pos:line="87" pos:column="91">&amp;<pos:position pos:line="87" pos:column="96"/></operator><name pos:line="87" pos:column="92">temp<pos:position pos:line="87" pos:column="96"/></name></expr></argument>)<pos:position pos:line="87" pos:column="97"/></argument_list></call></expr>)<pos:position pos:line="87" pos:column="98"/></condition><then pos:line="87" pos:column="98"> <block pos:line="87" pos:column="99">{
                <expr_stmt><expr><call><name><name pos:line="88" pos:column="17">private_<pos:position pos:line="88" pos:column="25"/></name><operator pos:line="88" pos:column="25">.<pos:position pos:line="88" pos:column="26"/></operator><name pos:line="88" pos:column="26">append<pos:position pos:line="88" pos:column="32"/></name></name><argument_list pos:line="88" pos:column="32">(<argument><expr><name pos:line="88" pos:column="33">temp<pos:position pos:line="88" pos:column="37"/></name></expr></argument>)<pos:position pos:line="88" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="39"/></expr_stmt>
            }<pos:position pos:line="89" pos:column="14"/></block></then></if></elseif>            <else pos:line="89" pos:column="26">else <block pos:line="89" pos:column="31">{
                <expr_stmt><expr><call><name pos:line="90" pos:column="17">debugs<pos:position pos:line="90" pos:column="23"/></name><argument_list pos:line="90" pos:column="23">(<argument><expr><literal type="number" pos:line="90" pos:column="24">65<pos:position pos:line="90" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="90" pos:column="28">2<pos:position pos:line="90" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="90" pos:column="31">"cc: invalid private= specs near '"<pos:position pos:line="90" pos:column="66"/></literal> <operator pos:line="90" pos:column="67">&lt;&lt;<pos:position pos:line="90" pos:column="75"/></operator> <name pos:line="90" pos:column="70">item<pos:position pos:line="90" pos:column="74"/></name> <operator pos:line="90" pos:column="75">&lt;&lt;<pos:position pos:line="90" pos:column="83"/></operator> <literal type="string" pos:line="90" pos:column="78">"'"<pos:position pos:line="90" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="83"/></expr_stmt>
            }<pos:position pos:line="91" pos:column="14"/></block></else></if>
            <comment type="line" pos:line="92" pos:column="13">// to be safe we ignore broken parameters, but always remember the 'private' part.</comment>
            <expr_stmt><expr><call><name pos:line="93" pos:column="13">setMask<pos:position pos:line="93" pos:column="20"/></name><argument_list pos:line="93" pos:column="20">(<argument><expr><name pos:line="93" pos:column="21">type<pos:position pos:line="93" pos:column="25"/></name></expr></argument>,<argument><expr><literal type="boolean" pos:line="93" pos:column="26">true<pos:position pos:line="93" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="32"/></expr_stmt>
        }<pos:position pos:line="94" pos:column="10"/></block>
        <break pos:line="95" pos:column="9">break;<pos:position pos:line="95" pos:column="15"/></break>

        <case pos:line="97" pos:column="9">case <expr><name><name pos:line="97" pos:column="14">HttpHdrCcType<pos:position pos:line="97" pos:column="27"/></name><operator pos:line="97" pos:column="27">::<pos:position pos:line="97" pos:column="29"/></operator><name pos:line="97" pos:column="29">CC_NO_CACHE<pos:position pos:line="97" pos:column="40"/></name></name></expr>:<pos:position pos:line="97" pos:column="41"/></case> <block pos:line="97" pos:column="42">{
            <decl_stmt><decl><type><name pos:line="98" pos:column="13">String<pos:position pos:line="98" pos:column="19"/></name></type> <name pos:line="98" pos:column="20">temp<pos:position pos:line="98" pos:column="24"/></name></decl>;<pos:position pos:line="98" pos:column="25"/></decl_stmt>
            <if pos:line="99" pos:column="13">if <condition pos:line="99" pos:column="16">(<expr><operator pos:line="99" pos:column="17">!<pos:position pos:line="99" pos:column="18"/></operator><name pos:line="99" pos:column="18">p<pos:position pos:line="99" pos:column="19"/></name></expr>)<pos:position pos:line="99" pos:column="20"/></condition><then pos:line="99" pos:column="20"> <block pos:line="99" pos:column="21">{
                <comment type="line" pos:line="100" pos:column="17">// On Requests, missing value parameter is expected syntax.</comment>
                <comment type="line" pos:line="101" pos:column="17">// On Responses, value parameter is optional.</comment>
                <expr_stmt><expr><call><name pos:line="102" pos:column="17">setMask<pos:position pos:line="102" pos:column="24"/></name><argument_list pos:line="102" pos:column="24">(<argument><expr><name pos:line="102" pos:column="25">type<pos:position pos:line="102" pos:column="29"/></name></expr></argument>,<argument><expr><literal type="boolean" pos:line="102" pos:column="30">true<pos:position pos:line="102" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="102" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="36"/></expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="103" pos:column="17">no_cache<pos:position pos:line="103" pos:column="25"/></name><operator pos:line="103" pos:column="25">.<pos:position pos:line="103" pos:column="26"/></operator><name pos:line="103" pos:column="26">clean<pos:position pos:line="103" pos:column="31"/></name></name><argument_list pos:line="103" pos:column="31">()<pos:position pos:line="103" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="34"/></expr_stmt>
            }<pos:position pos:line="104" pos:column="14"/></block></then> <elseif pos:line="104" pos:column="15">else <if pos:line="104" pos:column="20">if <condition pos:line="104" pos:column="23">(<comment type="block" pos:line="104" pos:column="24">/* p &amp;&amp;*/</comment> <expr><call><name pos:line="104" pos:column="34">httpHeaderParseQuotedString<pos:position pos:line="104" pos:column="61"/></name><argument_list pos:line="104" pos:column="61">(<argument><expr><name pos:line="104" pos:column="62">p<pos:position pos:line="104" pos:column="63"/></name></expr></argument>, <argument><expr><operator pos:line="104" pos:column="65">(<pos:position pos:line="104" pos:column="66"/></operator><name pos:line="104" pos:column="66">ilen<pos:position pos:line="104" pos:column="70"/></name><operator pos:line="104" pos:column="70">-<pos:position pos:line="104" pos:column="71"/></operator><name pos:line="104" pos:column="71">nlen<pos:position pos:line="104" pos:column="75"/></name><operator pos:line="104" pos:column="75">-<pos:position pos:line="104" pos:column="76"/></operator><literal type="number" pos:line="104" pos:column="76">1<pos:position pos:line="104" pos:column="77"/></literal><operator pos:line="104" pos:column="77">)<pos:position pos:line="104" pos:column="78"/></operator></expr></argument>, <argument><expr><operator pos:line="104" pos:column="80">&amp;<pos:position pos:line="104" pos:column="85"/></operator><name pos:line="104" pos:column="81">temp<pos:position pos:line="104" pos:column="85"/></name></expr></argument>)<pos:position pos:line="104" pos:column="86"/></argument_list></call></expr>)<pos:position pos:line="104" pos:column="87"/></condition><then pos:line="104" pos:column="87"> <block pos:line="104" pos:column="88">{
                <comment type="line" pos:line="105" pos:column="17">// On Requests, a value parameter is invalid syntax.</comment>
                <comment type="line" pos:line="106" pos:column="17">// XXX: identify when parsing request header and dump err message here.</comment>
                <expr_stmt><expr><call><name pos:line="107" pos:column="17">setMask<pos:position pos:line="107" pos:column="24"/></name><argument_list pos:line="107" pos:column="24">(<argument><expr><name pos:line="107" pos:column="25">type<pos:position pos:line="107" pos:column="29"/></name></expr></argument>,<argument><expr><literal type="boolean" pos:line="107" pos:column="30">true<pos:position pos:line="107" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="107" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="36"/></expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="108" pos:column="17">no_cache<pos:position pos:line="108" pos:column="25"/></name><operator pos:line="108" pos:column="25">.<pos:position pos:line="108" pos:column="26"/></operator><name pos:line="108" pos:column="26">append<pos:position pos:line="108" pos:column="32"/></name></name><argument_list pos:line="108" pos:column="32">(<argument><expr><name pos:line="108" pos:column="33">temp<pos:position pos:line="108" pos:column="37"/></name></expr></argument>)<pos:position pos:line="108" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="39"/></expr_stmt>
            }<pos:position pos:line="109" pos:column="14"/></block></then></if></elseif> <else pos:line="109" pos:column="15">else <block pos:line="109" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="110" pos:column="17">debugs<pos:position pos:line="110" pos:column="23"/></name><argument_list pos:line="110" pos:column="23">(<argument><expr><literal type="number" pos:line="110" pos:column="24">65<pos:position pos:line="110" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="110" pos:column="28">2<pos:position pos:line="110" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="110" pos:column="31">"cc: invalid no-cache= specs near '"<pos:position pos:line="110" pos:column="67"/></literal> <operator pos:line="110" pos:column="68">&lt;&lt;<pos:position pos:line="110" pos:column="76"/></operator> <name pos:line="110" pos:column="71">item<pos:position pos:line="110" pos:column="75"/></name> <operator pos:line="110" pos:column="76">&lt;&lt;<pos:position pos:line="110" pos:column="84"/></operator> <literal type="string" pos:line="110" pos:column="79">"'"<pos:position pos:line="110" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="110" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="84"/></expr_stmt>
            }<pos:position pos:line="111" pos:column="14"/></block></else></if>
        }<pos:position pos:line="112" pos:column="10"/></block>
        <break pos:line="113" pos:column="9">break;<pos:position pos:line="113" pos:column="15"/></break>

        <case pos:line="115" pos:column="9">case <expr><name><name pos:line="115" pos:column="14">HttpHdrCcType<pos:position pos:line="115" pos:column="27"/></name><operator pos:line="115" pos:column="27">::<pos:position pos:line="115" pos:column="29"/></operator><name pos:line="115" pos:column="29">CC_PUBLIC<pos:position pos:line="115" pos:column="38"/></name></name></expr>:<pos:position pos:line="115" pos:column="39"/></case>
            <expr_stmt><expr><call><name pos:line="116" pos:column="13">Public<pos:position pos:line="116" pos:column="19"/></name><argument_list pos:line="116" pos:column="19">(<argument><expr><literal type="boolean" pos:line="116" pos:column="20">true<pos:position pos:line="116" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="116" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="26"/></expr_stmt>
            <break pos:line="117" pos:column="13">break;<pos:position pos:line="117" pos:column="19"/></break>
        <case pos:line="118" pos:column="9">case <expr><name><name pos:line="118" pos:column="14">HttpHdrCcType<pos:position pos:line="118" pos:column="27"/></name><operator pos:line="118" pos:column="27">::<pos:position pos:line="118" pos:column="29"/></operator><name pos:line="118" pos:column="29">CC_NO_STORE<pos:position pos:line="118" pos:column="40"/></name></name></expr>:<pos:position pos:line="118" pos:column="41"/></case>
            <expr_stmt><expr><call><name pos:line="119" pos:column="13">noStore<pos:position pos:line="119" pos:column="20"/></name><argument_list pos:line="119" pos:column="20">(<argument><expr><literal type="boolean" pos:line="119" pos:column="21">true<pos:position pos:line="119" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="119" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="27"/></expr_stmt>
            <break pos:line="120" pos:column="13">break;<pos:position pos:line="120" pos:column="19"/></break>
        <case pos:line="121" pos:column="9">case <expr><name><name pos:line="121" pos:column="14">HttpHdrCcType<pos:position pos:line="121" pos:column="27"/></name><operator pos:line="121" pos:column="27">::<pos:position pos:line="121" pos:column="29"/></operator><name pos:line="121" pos:column="29">CC_NO_TRANSFORM<pos:position pos:line="121" pos:column="44"/></name></name></expr>:<pos:position pos:line="121" pos:column="45"/></case>
            <expr_stmt><expr><call><name pos:line="122" pos:column="13">noTransform<pos:position pos:line="122" pos:column="24"/></name><argument_list pos:line="122" pos:column="24">(<argument><expr><literal type="boolean" pos:line="122" pos:column="25">true<pos:position pos:line="122" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="122" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="31"/></expr_stmt>
            <break pos:line="123" pos:column="13">break;<pos:position pos:line="123" pos:column="19"/></break>
        <case pos:line="124" pos:column="9">case <expr><name><name pos:line="124" pos:column="14">HttpHdrCcType<pos:position pos:line="124" pos:column="27"/></name><operator pos:line="124" pos:column="27">::<pos:position pos:line="124" pos:column="29"/></operator><name pos:line="124" pos:column="29">CC_MUST_REVALIDATE<pos:position pos:line="124" pos:column="47"/></name></name></expr>:<pos:position pos:line="124" pos:column="48"/></case>
            <expr_stmt><expr><call><name pos:line="125" pos:column="13">mustRevalidate<pos:position pos:line="125" pos:column="27"/></name><argument_list pos:line="125" pos:column="27">(<argument><expr><literal type="boolean" pos:line="125" pos:column="28">true<pos:position pos:line="125" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="125" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="34"/></expr_stmt>
            <break pos:line="126" pos:column="13">break;<pos:position pos:line="126" pos:column="19"/></break>
        <case pos:line="127" pos:column="9">case <expr><name><name pos:line="127" pos:column="14">HttpHdrCcType<pos:position pos:line="127" pos:column="27"/></name><operator pos:line="127" pos:column="27">::<pos:position pos:line="127" pos:column="29"/></operator><name pos:line="127" pos:column="29">CC_PROXY_REVALIDATE<pos:position pos:line="127" pos:column="48"/></name></name></expr>:<pos:position pos:line="127" pos:column="49"/></case>
            <expr_stmt><expr><call><name pos:line="128" pos:column="13">proxyRevalidate<pos:position pos:line="128" pos:column="28"/></name><argument_list pos:line="128" pos:column="28">(<argument><expr><literal type="boolean" pos:line="128" pos:column="29">true<pos:position pos:line="128" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="128" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="35"/></expr_stmt>
            <break pos:line="129" pos:column="13">break;<pos:position pos:line="129" pos:column="19"/></break>
        <case pos:line="130" pos:column="9">case <expr><name><name pos:line="130" pos:column="14">HttpHdrCcType<pos:position pos:line="130" pos:column="27"/></name><operator pos:line="130" pos:column="27">::<pos:position pos:line="130" pos:column="29"/></operator><name pos:line="130" pos:column="29">CC_ONLY_IF_CACHED<pos:position pos:line="130" pos:column="46"/></name></name></expr>:<pos:position pos:line="130" pos:column="47"/></case>
            <expr_stmt><expr><call><name pos:line="131" pos:column="13">onlyIfCached<pos:position pos:line="131" pos:column="25"/></name><argument_list pos:line="131" pos:column="25">(<argument><expr><literal type="boolean" pos:line="131" pos:column="26">true<pos:position pos:line="131" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="131" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="32"/></expr_stmt>
            <break pos:line="132" pos:column="13">break;<pos:position pos:line="132" pos:column="19"/></break>
        <case pos:line="133" pos:column="9">case <expr><name><name pos:line="133" pos:column="14">HttpHdrCcType<pos:position pos:line="133" pos:column="27"/></name><operator pos:line="133" pos:column="27">::<pos:position pos:line="133" pos:column="29"/></operator><name pos:line="133" pos:column="29">CC_IMMUTABLE<pos:position pos:line="133" pos:column="41"/></name></name></expr>:<pos:position pos:line="133" pos:column="42"/></case>
            <expr_stmt><expr><call><name pos:line="134" pos:column="13">Immutable<pos:position pos:line="134" pos:column="22"/></name><argument_list pos:line="134" pos:column="22">(<argument><expr><literal type="boolean" pos:line="134" pos:column="23">true<pos:position pos:line="134" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="134" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="29"/></expr_stmt>
            <break pos:line="135" pos:column="13">break;<pos:position pos:line="135" pos:column="19"/></break>

        <case pos:line="137" pos:column="9">case <expr><name><name pos:line="137" pos:column="14">HttpHdrCcType<pos:position pos:line="137" pos:column="27"/></name><operator pos:line="137" pos:column="27">::<pos:position pos:line="137" pos:column="29"/></operator><name pos:line="137" pos:column="29">CC_OTHER<pos:position pos:line="137" pos:column="37"/></name></name></expr>:<pos:position pos:line="137" pos:column="38"/></case>
            <if pos:line="138" pos:column="13">if <condition pos:line="138" pos:column="16">(<expr><call><name><name pos:line="138" pos:column="17">other<pos:position pos:line="138" pos:column="22"/></name><operator pos:line="138" pos:column="22">.<pos:position pos:line="138" pos:column="23"/></operator><name pos:line="138" pos:column="23">size<pos:position pos:line="138" pos:column="27"/></name></name><argument_list pos:line="138" pos:column="27">()<pos:position pos:line="138" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="138" pos:column="30"/></condition><then pos:line="138" pos:column="30">
                <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="139" pos:column="17">other<pos:position pos:line="139" pos:column="22"/></name><operator pos:line="139" pos:column="22">.<pos:position pos:line="139" pos:column="23"/></operator><name pos:line="139" pos:column="23">append<pos:position pos:line="139" pos:column="29"/></name></name><argument_list pos:line="139" pos:column="29">(<argument><expr><literal type="string" pos:line="139" pos:column="30">", "<pos:position pos:line="139" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="139" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="36"/></expr_stmt></block></then></if>

            <expr_stmt><expr><call><name><name pos:line="141" pos:column="13">other<pos:position pos:line="141" pos:column="18"/></name><operator pos:line="141" pos:column="18">.<pos:position pos:line="141" pos:column="19"/></operator><name pos:line="141" pos:column="19">append<pos:position pos:line="141" pos:column="25"/></name></name><argument_list pos:line="141" pos:column="25">(<argument><expr><name pos:line="141" pos:column="26">item<pos:position pos:line="141" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="141" pos:column="32">ilen<pos:position pos:line="141" pos:column="36"/></name></expr></argument>)<pos:position pos:line="141" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="38"/></expr_stmt>
            <break pos:line="142" pos:column="13">break;<pos:position pos:line="142" pos:column="19"/></break>

        <default pos:line="144" pos:column="9">default:<pos:position pos:line="144" pos:column="17"/></default>
            <comment type="block" pos:line="145" pos:column="13">/* note that we ignore most of '=' specs (RFCVIOLATION) */</comment>
            <break pos:line="146" pos:column="13">break;<pos:position pos:line="146" pos:column="19"/></break>
        }<pos:position pos:line="147" pos:column="10"/></block></switch>
    }<pos:position pos:line="148" pos:column="6"/></block></while>

    <return pos:line="150" pos:column="5">return <expr><operator pos:line="150" pos:column="12">(<pos:position pos:line="150" pos:column="13"/></operator><name pos:line="150" pos:column="13">mask<pos:position pos:line="150" pos:column="17"/></name> <operator pos:line="150" pos:column="18">!=<pos:position pos:line="150" pos:column="20"/></operator> <literal type="number" pos:line="150" pos:column="21">0<pos:position pos:line="150" pos:column="22"/></literal><operator pos:line="150" pos:column="22">)<pos:position pos:line="150" pos:column="23"/></operator></expr>;<pos:position pos:line="150" pos:column="24"/></return>
}<pos:position pos:line="151" pos:column="2"/></block></function></unit>
