<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2471_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">MemBlob<pos:position pos:line="2" pos:column="8"/></name><operator pos:line="2" pos:column="8">::<pos:position pos:line="2" pos:column="10"/></operator><name pos:line="2" pos:column="10">append<pos:position pos:line="2" pos:column="16"/></name></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><specifier pos:line="2" pos:column="17">const<pos:position pos:line="2" pos:column="22"/></specifier> <name pos:line="2" pos:column="23">char<pos:position pos:line="2" pos:column="27"/></name> <modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier></type><name pos:line="2" pos:column="29">source<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="37">const<pos:position pos:line="2" pos:column="42"/></specifier> <name pos:line="2" pos:column="43">size_type<pos:position pos:line="2" pos:column="52"/></name></type> <name pos:line="2" pos:column="53">n<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="55"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">n<pos:position pos:line="4" pos:column="10"/></name> <operator pos:line="4" pos:column="11">&gt;<pos:position pos:line="4" pos:column="15"/></operator> <literal type="number" pos:line="4" pos:column="13">0<pos:position pos:line="4" pos:column="14"/></literal></expr>)<pos:position pos:line="4" pos:column="15"/></condition><then pos:line="4" pos:column="15"> <block pos:line="4" pos:column="16">{ <comment type="line" pos:line="4" pos:column="18">// appending zero bytes is allowed but only affects the stats</comment>
        <expr_stmt><expr><call><name pos:line="5" pos:column="9">Must<pos:position pos:line="5" pos:column="13"/></name><argument_list pos:line="5" pos:column="13">(<argument><expr><call><name pos:line="5" pos:column="14">willFit<pos:position pos:line="5" pos:column="21"/></name><argument_list pos:line="5" pos:column="21">(<argument><expr><name pos:line="5" pos:column="22">n<pos:position pos:line="5" pos:column="23"/></name></expr></argument>)<pos:position pos:line="5" pos:column="24"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="6" pos:column="9">Must<pos:position pos:line="6" pos:column="13"/></name><argument_list pos:line="6" pos:column="13">(<argument><expr><name pos:line="6" pos:column="14">source<pos:position pos:line="6" pos:column="20"/></name></expr></argument>)<pos:position pos:line="6" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="22"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">memmove<pos:position pos:line="7" pos:column="16"/></name><argument_list pos:line="7" pos:column="16">(<argument><expr><name pos:line="7" pos:column="17">mem<pos:position pos:line="7" pos:column="20"/></name> <operator pos:line="7" pos:column="21">+<pos:position pos:line="7" pos:column="22"/></operator> <name pos:line="7" pos:column="23">size<pos:position pos:line="7" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="29">source<pos:position pos:line="7" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="37">n<pos:position pos:line="7" pos:column="38"/></name></expr></argument>)<pos:position pos:line="7" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><name pos:line="8" pos:column="9">size<pos:position pos:line="8" pos:column="13"/></name> <operator pos:line="8" pos:column="14">+=<pos:position pos:line="8" pos:column="16"/></operator> <name pos:line="8" pos:column="17">n<pos:position pos:line="8" pos:column="18"/></name></expr>;<pos:position pos:line="8" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>
    <expr_stmt><expr><operator pos:line="10" pos:column="5">++<pos:position pos:line="10" pos:column="7"/></operator><name><name pos:line="10" pos:column="7">Stats<pos:position pos:line="10" pos:column="12"/></name><operator pos:line="10" pos:column="12">.<pos:position pos:line="10" pos:column="13"/></operator><name pos:line="10" pos:column="13">append<pos:position pos:line="10" pos:column="19"/></name></name></expr>;<pos:position pos:line="10" pos:column="20"/></expr_stmt>
}<pos:position pos:line="11" pos:column="2"/></block></function></unit>
