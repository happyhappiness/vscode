<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_424_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">clientHierarchical<pos:position pos:line="2" pos:column="19"/></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name pos:line="2" pos:column="20">ClientHttpRequest<pos:position pos:line="2" pos:column="37"/></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type> <name pos:line="2" pos:column="40">http<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="45"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">HttpRequest<pos:position pos:line="4" pos:column="16"/></name> <modifier pos:line="4" pos:column="17">*<pos:position pos:line="4" pos:column="18"/></modifier></type><name pos:line="4" pos:column="18">request<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><name><name pos:line="4" pos:column="28">http<pos:position pos:line="4" pos:column="32"/></name><operator pos:line="4" pos:column="32">-&gt;<pos:position pos:line="4" pos:column="37"/></operator><name pos:line="4" pos:column="34">request<pos:position pos:line="4" pos:column="41"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="42"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">HttpRequestMethod<pos:position pos:line="5" pos:column="22"/></name></type> <name pos:line="5" pos:column="23">method<pos:position pos:line="5" pos:column="29"/></name> <init pos:line="5" pos:column="30">= <expr><name><name pos:line="5" pos:column="32">request<pos:position pos:line="5" pos:column="39"/></name><operator pos:line="5" pos:column="39">-&gt;<pos:position pos:line="5" pos:column="44"/></operator><name pos:line="5" pos:column="41">method<pos:position pos:line="5" pos:column="47"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="48"/></decl_stmt>

    <comment type="line" pos:line="7" pos:column="5">// intercepted requests MUST NOT (yet) be sent to peers unless verified</comment>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><operator pos:line="8" pos:column="9">!<pos:position pos:line="8" pos:column="10"/></operator><name><name pos:line="8" pos:column="10">request<pos:position pos:line="8" pos:column="17"/></name><operator pos:line="8" pos:column="17">-&gt;<pos:position pos:line="8" pos:column="22"/></operator><name pos:line="8" pos:column="19">flags<pos:position pos:line="8" pos:column="24"/></name><operator pos:line="8" pos:column="24">.<pos:position pos:line="8" pos:column="25"/></operator><name pos:line="8" pos:column="25">hostVerified<pos:position pos:line="8" pos:column="37"/></name></name> <operator pos:line="8" pos:column="38">&amp;&amp;<pos:position pos:line="8" pos:column="48"/></operator> <operator pos:line="8" pos:column="41">(<pos:position pos:line="8" pos:column="42"/></operator><name><name pos:line="8" pos:column="42">request<pos:position pos:line="8" pos:column="49"/></name><operator pos:line="8" pos:column="49">-&gt;<pos:position pos:line="8" pos:column="54"/></operator><name pos:line="8" pos:column="51">flags<pos:position pos:line="8" pos:column="56"/></name><operator pos:line="8" pos:column="56">.<pos:position pos:line="8" pos:column="57"/></operator><name pos:line="8" pos:column="57">intercepted<pos:position pos:line="8" pos:column="68"/></name></name> <operator pos:line="8" pos:column="69">||<pos:position pos:line="8" pos:column="71"/></operator> <name><name pos:line="8" pos:column="72">request<pos:position pos:line="8" pos:column="79"/></name><operator pos:line="8" pos:column="79">-&gt;<pos:position pos:line="8" pos:column="84"/></operator><name pos:line="8" pos:column="81">flags<pos:position pos:line="8" pos:column="86"/></name><operator pos:line="8" pos:column="86">.<pos:position pos:line="8" pos:column="87"/></operator><name pos:line="8" pos:column="87">interceptTproxy<pos:position pos:line="8" pos:column="102"/></name></name><operator pos:line="8" pos:column="102">)<pos:position pos:line="8" pos:column="103"/></operator></expr>)<pos:position pos:line="8" pos:column="104"/></condition><then pos:line="8" pos:column="104">
        <block type="pseudo"><return pos:line="9" pos:column="9">return <expr><literal type="number" pos:line="9" pos:column="16">0<pos:position pos:line="9" pos:column="17"/></literal></expr>;<pos:position pos:line="9" pos:column="18"/></return></block></then></if>

    <comment type="block" pos:line="11" pos:column="5">/*
     * IMS needs a private key, so we can use the hierarchy for IMS only if our
     * neighbors support private keys
     */</comment>

    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name><name pos:line="16" pos:column="9">request<pos:position pos:line="16" pos:column="16"/></name><operator pos:line="16" pos:column="16">-&gt;<pos:position pos:line="16" pos:column="21"/></operator><name pos:line="16" pos:column="18">flags<pos:position pos:line="16" pos:column="23"/></name><operator pos:line="16" pos:column="23">.<pos:position pos:line="16" pos:column="24"/></operator><name pos:line="16" pos:column="24">ims<pos:position pos:line="16" pos:column="27"/></name></name> <operator pos:line="16" pos:column="28">&amp;&amp;<pos:position pos:line="16" pos:column="38"/></operator> <operator pos:line="16" pos:column="31">!<pos:position pos:line="16" pos:column="32"/></operator><name pos:line="16" pos:column="32">neighbors_do_private_keys<pos:position pos:line="16" pos:column="57"/></name></expr>)<pos:position pos:line="16" pos:column="58"/></condition><then pos:line="16" pos:column="58">
        <block type="pseudo"><return pos:line="17" pos:column="9">return <expr><literal type="number" pos:line="17" pos:column="16">0<pos:position pos:line="17" pos:column="17"/></literal></expr>;<pos:position pos:line="17" pos:column="18"/></return></block></then></if>

    <comment type="block" pos:line="19" pos:column="5">/*
     * This is incorrect: authenticating requests can be sent via a hierarchy
     * (they can even be cached if the correct headers are set on the reply)
     */</comment>
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><name><name pos:line="23" pos:column="9">request<pos:position pos:line="23" pos:column="16"/></name><operator pos:line="23" pos:column="16">-&gt;<pos:position pos:line="23" pos:column="21"/></operator><name pos:line="23" pos:column="18">flags<pos:position pos:line="23" pos:column="23"/></name><operator pos:line="23" pos:column="23">.<pos:position pos:line="23" pos:column="24"/></operator><name pos:line="23" pos:column="24">auth<pos:position pos:line="23" pos:column="28"/></name></name></expr>)<pos:position pos:line="23" pos:column="29"/></condition><then pos:line="23" pos:column="29">
        <block type="pseudo"><return pos:line="24" pos:column="9">return <expr><literal type="number" pos:line="24" pos:column="16">0<pos:position pos:line="24" pos:column="17"/></literal></expr>;<pos:position pos:line="24" pos:column="18"/></return></block></then></if>

    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name pos:line="26" pos:column="9">method<pos:position pos:line="26" pos:column="15"/></name> <operator pos:line="26" pos:column="16">==<pos:position pos:line="26" pos:column="18"/></operator> <name><name pos:line="26" pos:column="19">Http<pos:position pos:line="26" pos:column="23"/></name><operator pos:line="26" pos:column="23">::<pos:position pos:line="26" pos:column="25"/></operator><name pos:line="26" pos:column="25">METHOD_TRACE<pos:position pos:line="26" pos:column="37"/></name></name></expr>)<pos:position pos:line="26" pos:column="38"/></condition><then pos:line="26" pos:column="38">
        <block type="pseudo"><return pos:line="27" pos:column="9">return <expr><literal type="number" pos:line="27" pos:column="16">1<pos:position pos:line="27" pos:column="17"/></literal></expr>;<pos:position pos:line="27" pos:column="18"/></return></block></then></if>

    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><name pos:line="29" pos:column="9">method<pos:position pos:line="29" pos:column="15"/></name> <operator pos:line="29" pos:column="16">!=<pos:position pos:line="29" pos:column="18"/></operator> <name><name pos:line="29" pos:column="19">Http<pos:position pos:line="29" pos:column="23"/></name><operator pos:line="29" pos:column="23">::<pos:position pos:line="29" pos:column="25"/></operator><name pos:line="29" pos:column="25">METHOD_GET<pos:position pos:line="29" pos:column="35"/></name></name></expr>)<pos:position pos:line="29" pos:column="36"/></condition><then pos:line="29" pos:column="36">
        <block type="pseudo"><return pos:line="30" pos:column="9">return <expr><literal type="number" pos:line="30" pos:column="16">0<pos:position pos:line="30" pos:column="17"/></literal></expr>;<pos:position pos:line="30" pos:column="18"/></return></block></then></if>

    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><name><name pos:line="32" pos:column="9">request<pos:position pos:line="32" pos:column="16"/></name><operator pos:line="32" pos:column="16">-&gt;<pos:position pos:line="32" pos:column="21"/></operator><name pos:line="32" pos:column="18">flags<pos:position pos:line="32" pos:column="23"/></name><operator pos:line="32" pos:column="23">.<pos:position pos:line="32" pos:column="24"/></operator><name pos:line="32" pos:column="24">loopDetected<pos:position pos:line="32" pos:column="36"/></name></name></expr>)<pos:position pos:line="32" pos:column="37"/></condition><then pos:line="32" pos:column="37">
        <block type="pseudo"><return pos:line="33" pos:column="9">return <expr><literal type="number" pos:line="33" pos:column="16">0<pos:position pos:line="33" pos:column="17"/></literal></expr>;<pos:position pos:line="33" pos:column="18"/></return></block></then></if>

    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><call><name><name pos:line="35" pos:column="9">request<pos:position pos:line="35" pos:column="16"/></name><operator pos:line="35" pos:column="16">-&gt;<pos:position pos:line="35" pos:column="21"/></operator><name pos:line="35" pos:column="18">url<pos:position pos:line="35" pos:column="21"/></name><operator pos:line="35" pos:column="21">.<pos:position pos:line="35" pos:column="22"/></operator><name pos:line="35" pos:column="22">getScheme<pos:position pos:line="35" pos:column="31"/></name></name><argument_list pos:line="35" pos:column="31">()<pos:position pos:line="35" pos:column="33"/></argument_list></call> <operator pos:line="35" pos:column="34">==<pos:position pos:line="35" pos:column="36"/></operator> <name><name pos:line="35" pos:column="37">AnyP<pos:position pos:line="35" pos:column="41"/></name><operator pos:line="35" pos:column="41">::<pos:position pos:line="35" pos:column="43"/></operator><name pos:line="35" pos:column="43">PROTO_HTTP<pos:position pos:line="35" pos:column="53"/></name></name></expr>)<pos:position pos:line="35" pos:column="54"/></condition><then pos:line="35" pos:column="54">
        <block type="pseudo"><return pos:line="36" pos:column="9">return <expr><call><name><name pos:line="36" pos:column="16">method<pos:position pos:line="36" pos:column="22"/></name><operator pos:line="36" pos:column="22">.<pos:position pos:line="36" pos:column="23"/></operator><name pos:line="36" pos:column="23">respMaybeCacheable<pos:position pos:line="36" pos:column="41"/></name></name><argument_list pos:line="36" pos:column="41">()<pos:position pos:line="36" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="44"/></return></block></then></if>

    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><call><name><name pos:line="38" pos:column="9">request<pos:position pos:line="38" pos:column="16"/></name><operator pos:line="38" pos:column="16">-&gt;<pos:position pos:line="38" pos:column="21"/></operator><name pos:line="38" pos:column="18">url<pos:position pos:line="38" pos:column="21"/></name><operator pos:line="38" pos:column="21">.<pos:position pos:line="38" pos:column="22"/></operator><name pos:line="38" pos:column="22">getScheme<pos:position pos:line="38" pos:column="31"/></name></name><argument_list pos:line="38" pos:column="31">()<pos:position pos:line="38" pos:column="33"/></argument_list></call> <operator pos:line="38" pos:column="34">==<pos:position pos:line="38" pos:column="36"/></operator> <name><name pos:line="38" pos:column="37">AnyP<pos:position pos:line="38" pos:column="41"/></name><operator pos:line="38" pos:column="41">::<pos:position pos:line="38" pos:column="43"/></operator><name pos:line="38" pos:column="43">PROTO_GOPHER<pos:position pos:line="38" pos:column="55"/></name></name></expr>)<pos:position pos:line="38" pos:column="56"/></condition><then pos:line="38" pos:column="56">
        <block type="pseudo"><return pos:line="39" pos:column="9">return <expr><call><name pos:line="39" pos:column="16">gopherCachable<pos:position pos:line="39" pos:column="30"/></name><argument_list pos:line="39" pos:column="30">(<argument><expr><name pos:line="39" pos:column="31">request<pos:position pos:line="39" pos:column="38"/></name></expr></argument>)<pos:position pos:line="39" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="40"/></return></block></then></if>

    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><call><name><name pos:line="41" pos:column="9">request<pos:position pos:line="41" pos:column="16"/></name><operator pos:line="41" pos:column="16">-&gt;<pos:position pos:line="41" pos:column="21"/></operator><name pos:line="41" pos:column="18">url<pos:position pos:line="41" pos:column="21"/></name><operator pos:line="41" pos:column="21">.<pos:position pos:line="41" pos:column="22"/></operator><name pos:line="41" pos:column="22">getScheme<pos:position pos:line="41" pos:column="31"/></name></name><argument_list pos:line="41" pos:column="31">()<pos:position pos:line="41" pos:column="33"/></argument_list></call> <operator pos:line="41" pos:column="34">==<pos:position pos:line="41" pos:column="36"/></operator> <name><name pos:line="41" pos:column="37">AnyP<pos:position pos:line="41" pos:column="41"/></name><operator pos:line="41" pos:column="41">::<pos:position pos:line="41" pos:column="43"/></operator><name pos:line="41" pos:column="43">PROTO_CACHE_OBJECT<pos:position pos:line="41" pos:column="61"/></name></name></expr>)<pos:position pos:line="41" pos:column="62"/></condition><then pos:line="41" pos:column="62">
        <block type="pseudo"><return pos:line="42" pos:column="9">return <expr><literal type="number" pos:line="42" pos:column="16">0<pos:position pos:line="42" pos:column="17"/></literal></expr>;<pos:position pos:line="42" pos:column="18"/></return></block></then></if>

    <return pos:line="44" pos:column="5">return <expr><literal type="number" pos:line="44" pos:column="12">1<pos:position pos:line="44" pos:column="13"/></literal></expr>;<pos:position pos:line="44" pos:column="14"/></return>
}<pos:position pos:line="45" pos:column="2"/></block></function></unit>
