<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7652_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">hashPrime<pos:position pos:line="2" pos:column="10"/></name><parameter_list pos:line="2" pos:column="10">(<parameter><decl><type><name pos:line="2" pos:column="11">int<pos:position pos:line="2" pos:column="14"/></name></type> <name pos:line="2" pos:column="15">n<pos:position pos:line="2" pos:column="16"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="17"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">I<pos:position pos:line="4" pos:column="10"/></name> <init pos:line="4" pos:column="11">= <expr><sizeof pos:line="4" pos:column="13">sizeof<argument_list pos:line="4" pos:column="19">(<argument><expr><name pos:line="4" pos:column="20">hash_primes<pos:position pos:line="4" pos:column="31"/></name></expr></argument>)<pos:position pos:line="4" pos:column="32"/></argument_list></sizeof> <operator pos:line="4" pos:column="33">/<pos:position pos:line="4" pos:column="34"/></operator> <sizeof pos:line="4" pos:column="35">sizeof<argument_list pos:line="4" pos:column="41">(<argument><expr><name pos:line="4" pos:column="42">int<pos:position pos:line="4" pos:column="45"/></name></expr></argument>)<pos:position pos:line="4" pos:column="46"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="4" pos:column="47"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">best_prime<pos:position pos:line="5" pos:column="19"/></name> <init pos:line="5" pos:column="20">= <expr><name><name pos:line="5" pos:column="22">hash_primes<pos:position pos:line="5" pos:column="33"/></name><index pos:line="5" pos:column="33">[<expr><literal type="number" pos:line="5" pos:column="34">0<pos:position pos:line="5" pos:column="35"/></literal></expr>]<pos:position pos:line="5" pos:column="36"/></index></name></expr></init></decl>;<pos:position pos:line="5" pos:column="37"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">double<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">min<pos:position pos:line="6" pos:column="15"/></name> <init pos:line="6" pos:column="16">= <expr><call><name pos:line="6" pos:column="18">fabs<pos:position pos:line="6" pos:column="22"/></name><argument_list pos:line="6" pos:column="22">(<argument><expr><call><name pos:line="6" pos:column="23">log<pos:position pos:line="6" pos:column="26"/></name><argument_list pos:line="6" pos:column="26">(<argument><expr><operator pos:line="6" pos:column="27">(<pos:position pos:line="6" pos:column="28"/></operator><name pos:line="6" pos:column="28">double<pos:position pos:line="6" pos:column="34"/></name><operator pos:line="6" pos:column="34">)<pos:position pos:line="6" pos:column="35"/></operator> <name pos:line="6" pos:column="36">n<pos:position pos:line="6" pos:column="37"/></name></expr></argument>)<pos:position pos:line="6" pos:column="38"/></argument_list></call> <operator pos:line="6" pos:column="39">-<pos:position pos:line="6" pos:column="40"/></operator> <call><name pos:line="6" pos:column="41">log<pos:position pos:line="6" pos:column="44"/></name><argument_list pos:line="6" pos:column="44">(<argument><expr><operator pos:line="6" pos:column="45">(<pos:position pos:line="6" pos:column="46"/></operator><name pos:line="6" pos:column="46">double<pos:position pos:line="6" pos:column="52"/></name><operator pos:line="6" pos:column="52">)<pos:position pos:line="6" pos:column="53"/></operator> <name><name pos:line="6" pos:column="54">hash_primes<pos:position pos:line="6" pos:column="65"/></name><index pos:line="6" pos:column="65">[<expr><literal type="number" pos:line="6" pos:column="66">0<pos:position pos:line="6" pos:column="67"/></literal></expr>]<pos:position pos:line="6" pos:column="68"/></index></name></expr></argument>)<pos:position pos:line="6" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="71"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">double<pos:position pos:line="7" pos:column="11"/></name></type> <name pos:line="7" pos:column="12">d<pos:position pos:line="7" pos:column="13"/></name></decl>;<pos:position pos:line="7" pos:column="14"/></decl_stmt>
    <for pos:line="8" pos:column="5">for <control pos:line="8" pos:column="9">(<init><decl><type><name pos:line="8" pos:column="10">int<pos:position pos:line="8" pos:column="13"/></name></type> <name pos:line="8" pos:column="14">i<pos:position pos:line="8" pos:column="15"/></name> <init pos:line="8" pos:column="16">= <expr><literal type="number" pos:line="8" pos:column="18">0<pos:position pos:line="8" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="20"/></init> <condition><expr><name pos:line="8" pos:column="21">i<pos:position pos:line="8" pos:column="22"/></name> <operator pos:line="8" pos:column="23">&lt;<pos:position pos:line="8" pos:column="27"/></operator> <name pos:line="8" pos:column="25">I<pos:position pos:line="8" pos:column="26"/></name></expr>;<pos:position pos:line="8" pos:column="27"/></condition> <incr><expr><operator pos:line="8" pos:column="28">++<pos:position pos:line="8" pos:column="30"/></operator><name pos:line="8" pos:column="30">i<pos:position pos:line="8" pos:column="31"/></name></expr></incr>)<pos:position pos:line="8" pos:column="32"/></control> <block pos:line="8" pos:column="33">{
        <expr_stmt><expr><name pos:line="9" pos:column="9">d<pos:position pos:line="9" pos:column="10"/></name> <operator pos:line="9" pos:column="11">=<pos:position pos:line="9" pos:column="12"/></operator> <call><name pos:line="9" pos:column="13">fabs<pos:position pos:line="9" pos:column="17"/></name><argument_list pos:line="9" pos:column="17">(<argument><expr><call><name pos:line="9" pos:column="18">log<pos:position pos:line="9" pos:column="21"/></name><argument_list pos:line="9" pos:column="21">(<argument><expr><operator pos:line="9" pos:column="22">(<pos:position pos:line="9" pos:column="23"/></operator><name pos:line="9" pos:column="23">double<pos:position pos:line="9" pos:column="29"/></name><operator pos:line="9" pos:column="29">)<pos:position pos:line="9" pos:column="30"/></operator> <name pos:line="9" pos:column="31">n<pos:position pos:line="9" pos:column="32"/></name></expr></argument>)<pos:position pos:line="9" pos:column="33"/></argument_list></call> <operator pos:line="9" pos:column="34">-<pos:position pos:line="9" pos:column="35"/></operator> <call><name pos:line="9" pos:column="36">log<pos:position pos:line="9" pos:column="39"/></name><argument_list pos:line="9" pos:column="39">(<argument><expr><operator pos:line="9" pos:column="40">(<pos:position pos:line="9" pos:column="41"/></operator><name pos:line="9" pos:column="41">double<pos:position pos:line="9" pos:column="47"/></name><operator pos:line="9" pos:column="47">)<pos:position pos:line="9" pos:column="48"/></operator> <name><name pos:line="9" pos:column="49">hash_primes<pos:position pos:line="9" pos:column="60"/></name><index pos:line="9" pos:column="60">[<expr><name pos:line="9" pos:column="61">i<pos:position pos:line="9" pos:column="62"/></name></expr>]<pos:position pos:line="9" pos:column="63"/></index></name></expr></argument>)<pos:position pos:line="9" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="66"/></expr_stmt>
        <if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">d<pos:position pos:line="10" pos:column="14"/></name> <operator pos:line="10" pos:column="15">&gt;<pos:position pos:line="10" pos:column="19"/></operator> <name pos:line="10" pos:column="17">min<pos:position pos:line="10" pos:column="20"/></name></expr>)<pos:position pos:line="10" pos:column="21"/></condition><then pos:line="10" pos:column="21">
            <block type="pseudo"><continue pos:line="11" pos:column="13">continue;<pos:position pos:line="11" pos:column="22"/></continue></block></then></if>
        <expr_stmt><expr><name pos:line="12" pos:column="9">min<pos:position pos:line="12" pos:column="12"/></name> <operator pos:line="12" pos:column="13">=<pos:position pos:line="12" pos:column="14"/></operator> <name pos:line="12" pos:column="15">d<pos:position pos:line="12" pos:column="16"/></name></expr>;<pos:position pos:line="12" pos:column="17"/></expr_stmt>
        <expr_stmt><expr><name pos:line="13" pos:column="9">best_prime<pos:position pos:line="13" pos:column="19"/></name> <operator pos:line="13" pos:column="20">=<pos:position pos:line="13" pos:column="21"/></operator> <name><name pos:line="13" pos:column="22">hash_primes<pos:position pos:line="13" pos:column="33"/></name><index pos:line="13" pos:column="33">[<expr><name pos:line="13" pos:column="34">i<pos:position pos:line="13" pos:column="35"/></name></expr>]<pos:position pos:line="13" pos:column="36"/></index></name></expr>;<pos:position pos:line="13" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></for>
    <return pos:line="15" pos:column="5">return <expr><name pos:line="15" pos:column="12">best_prime<pos:position pos:line="15" pos:column="22"/></name></expr>;<pos:position pos:line="15" pos:column="23"/></return>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
