<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_891_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">commSetConnTimeout<pos:position pos:line="2" pos:column="19"/></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><specifier pos:line="2" pos:column="20">const<pos:position pos:line="2" pos:column="25"/></specifier> <name><name pos:line="2" pos:column="26">Comm<pos:position pos:line="2" pos:column="30"/></name><operator pos:line="2" pos:column="30">::<pos:position pos:line="2" pos:column="32"/></operator><name pos:line="2" pos:column="32">ConnectionPointer<pos:position pos:line="2" pos:column="49"/></name></name> <modifier pos:line="2" pos:column="50">&amp;<pos:position pos:line="2" pos:column="55"/></modifier></type><name pos:line="2" pos:column="51">conn<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="57">int<pos:position pos:line="2" pos:column="60"/></name></type> <name pos:line="2" pos:column="61">timeout<pos:position pos:line="2" pos:column="68"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="70">AsyncCall<pos:position pos:line="2" pos:column="79"/></name><operator pos:line="2" pos:column="79">::<pos:position pos:line="2" pos:column="81"/></operator><name pos:line="2" pos:column="81">Pointer<pos:position pos:line="2" pos:column="88"/></name></name> <modifier pos:line="2" pos:column="89">&amp;<pos:position pos:line="2" pos:column="94"/></modifier></type><name pos:line="2" pos:column="90">callback<pos:position pos:line="2" pos:column="98"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="99"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">5<pos:position pos:line="4" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="15">3<pos:position pos:line="4" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="18">HERE<pos:position pos:line="4" pos:column="22"/></name> <operator pos:line="4" pos:column="23">&lt;&lt;<pos:position pos:line="4" pos:column="31"/></operator> <name pos:line="4" pos:column="26">conn<pos:position pos:line="4" pos:column="30"/></name> <operator pos:line="4" pos:column="31">&lt;&lt;<pos:position pos:line="4" pos:column="39"/></operator> <literal type="string" pos:line="4" pos:column="34">" timeout "<pos:position pos:line="4" pos:column="45"/></literal> <operator pos:line="4" pos:column="46">&lt;&lt;<pos:position pos:line="4" pos:column="54"/></operator> <name pos:line="4" pos:column="49">timeout<pos:position pos:line="4" pos:column="56"/></name></expr></argument>)<pos:position pos:line="4" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><call><name><name pos:line="5" pos:column="12">Comm<pos:position pos:line="5" pos:column="16"/></name><operator pos:line="5" pos:column="16">::<pos:position pos:line="5" pos:column="18"/></operator><name pos:line="5" pos:column="18">IsConnOpen<pos:position pos:line="5" pos:column="28"/></name></name><argument_list pos:line="5" pos:column="28">(<argument><expr><name pos:line="5" pos:column="29">conn<pos:position pos:line="5" pos:column="33"/></name></expr></argument>)<pos:position pos:line="5" pos:column="34"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><name><name pos:line="6" pos:column="12">conn<pos:position pos:line="6" pos:column="16"/></name><operator pos:line="6" pos:column="16">-&gt;<pos:position pos:line="6" pos:column="21"/></operator><name pos:line="6" pos:column="18">fd<pos:position pos:line="6" pos:column="20"/></name></name> <operator pos:line="6" pos:column="21">&lt;<pos:position pos:line="6" pos:column="25"/></operator> <name pos:line="6" pos:column="23">Squid_MaxFD<pos:position pos:line="6" pos:column="34"/></name></expr></argument>)<pos:position pos:line="6" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="36"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">fde<pos:position pos:line="7" pos:column="8"/></name> <modifier pos:line="7" pos:column="9">*<pos:position pos:line="7" pos:column="10"/></modifier></type><name pos:line="7" pos:column="10">F<pos:position pos:line="7" pos:column="11"/></name> <init pos:line="7" pos:column="12">= <expr><operator pos:line="7" pos:column="14">&amp;<pos:position pos:line="7" pos:column="19"/></operator><name><name pos:line="7" pos:column="15">fd_table<pos:position pos:line="7" pos:column="23"/></name><index pos:line="7" pos:column="23">[<expr><name><name pos:line="7" pos:column="24">conn<pos:position pos:line="7" pos:column="28"/></name><operator pos:line="7" pos:column="28">-&gt;<pos:position pos:line="7" pos:column="33"/></operator><name pos:line="7" pos:column="30">fd<pos:position pos:line="7" pos:column="32"/></name></name></expr>]<pos:position pos:line="7" pos:column="33"/></index></name></expr></init></decl>;<pos:position pos:line="7" pos:column="34"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">assert<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><name><name pos:line="8" pos:column="12">F<pos:position pos:line="8" pos:column="13"/></name><operator pos:line="8" pos:column="13">-&gt;<pos:position pos:line="8" pos:column="18"/></operator><name pos:line="8" pos:column="15">flags<pos:position pos:line="8" pos:column="20"/></name><operator pos:line="8" pos:column="20">.<pos:position pos:line="8" pos:column="21"/></operator><name pos:line="8" pos:column="21">open<pos:position pos:line="8" pos:column="25"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="27"/></expr_stmt>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">timeout<pos:position pos:line="10" pos:column="16"/></name> <operator pos:line="10" pos:column="17">&lt;<pos:position pos:line="10" pos:column="21"/></operator> <literal type="number" pos:line="10" pos:column="19">0<pos:position pos:line="10" pos:column="20"/></literal></expr>)<pos:position pos:line="10" pos:column="21"/></condition><then pos:line="10" pos:column="21"> <block pos:line="10" pos:column="22">{
        <expr_stmt><expr><name><name pos:line="11" pos:column="9">F<pos:position pos:line="11" pos:column="10"/></name><operator pos:line="11" pos:column="10">-&gt;<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="12">timeoutHandler<pos:position pos:line="11" pos:column="26"/></name></name> <operator pos:line="11" pos:column="27">=<pos:position pos:line="11" pos:column="28"/></operator> <name pos:line="11" pos:column="29">NULL<pos:position pos:line="11" pos:column="33"/></name></expr>;<pos:position pos:line="11" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="12" pos:column="9">F<pos:position pos:line="12" pos:column="10"/></name><operator pos:line="12" pos:column="10">-&gt;<pos:position pos:line="12" pos:column="15"/></operator><name pos:line="12" pos:column="12">timeout<pos:position pos:line="12" pos:column="19"/></name></name> <operator pos:line="12" pos:column="20">=<pos:position pos:line="12" pos:column="21"/></operator> <literal type="number" pos:line="12" pos:column="22">0<pos:position pos:line="12" pos:column="23"/></literal></expr>;<pos:position pos:line="12" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="13" pos:column="6"/></block></then> <else pos:line="13" pos:column="7">else <block pos:line="13" pos:column="12">{
        <if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">callback<pos:position pos:line="14" pos:column="21"/></name> <operator pos:line="14" pos:column="22">!=<pos:position pos:line="14" pos:column="24"/></operator> <name pos:line="14" pos:column="25">NULL<pos:position pos:line="14" pos:column="29"/></name></expr>)<pos:position pos:line="14" pos:column="30"/></condition><then pos:line="14" pos:column="30"> <block pos:line="14" pos:column="31">{
            <typedef pos:line="15" pos:column="13">typedef <type><name pos:line="15" pos:column="21">CommTimeoutCbParams<pos:position pos:line="15" pos:column="40"/></name></type> <name pos:line="15" pos:column="41">Params<pos:position pos:line="15" pos:column="47"/></name>;<pos:position pos:line="15" pos:column="48"/></typedef>
            <decl_stmt><decl><type><name pos:line="16" pos:column="13">Params<pos:position pos:line="16" pos:column="19"/></name> <modifier pos:line="16" pos:column="20">&amp;<pos:position pos:line="16" pos:column="25"/></modifier></type><name pos:line="16" pos:column="21">params<pos:position pos:line="16" pos:column="27"/></name> <init pos:line="16" pos:column="28">= <expr><call><name><name pos:line="16" pos:column="30">GetCommParams<pos:position pos:line="16" pos:column="43"/></name><argument_list type="generic" pos:line="16" pos:column="43">&lt;<argument><expr><name pos:line="16" pos:column="44">Params<pos:position pos:line="16" pos:column="50"/></name></expr></argument>&gt;<pos:position pos:line="16" pos:column="54"/></argument_list></name><argument_list pos:line="16" pos:column="51">(<argument><expr><name pos:line="16" pos:column="52">callback<pos:position pos:line="16" pos:column="60"/></name></expr></argument>)<pos:position pos:line="16" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="62"/></decl_stmt>
            <expr_stmt><expr><name><name pos:line="17" pos:column="13">params<pos:position pos:line="17" pos:column="19"/></name><operator pos:line="17" pos:column="19">.<pos:position pos:line="17" pos:column="20"/></operator><name pos:line="17" pos:column="20">conn<pos:position pos:line="17" pos:column="24"/></name></name> <operator pos:line="17" pos:column="25">=<pos:position pos:line="17" pos:column="26"/></operator> <name pos:line="17" pos:column="27">conn<pos:position pos:line="17" pos:column="31"/></name></expr>;<pos:position pos:line="17" pos:column="32"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="18" pos:column="13">F<pos:position pos:line="18" pos:column="14"/></name><operator pos:line="18" pos:column="14">-&gt;<pos:position pos:line="18" pos:column="19"/></operator><name pos:line="18" pos:column="16">timeoutHandler<pos:position pos:line="18" pos:column="30"/></name></name> <operator pos:line="18" pos:column="31">=<pos:position pos:line="18" pos:column="32"/></operator> <name pos:line="18" pos:column="33">callback<pos:position pos:line="18" pos:column="41"/></name></expr>;<pos:position pos:line="18" pos:column="42"/></expr_stmt>
        }<pos:position pos:line="19" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name><name pos:line="21" pos:column="9">F<pos:position pos:line="21" pos:column="10"/></name><operator pos:line="21" pos:column="10">-&gt;<pos:position pos:line="21" pos:column="15"/></operator><name pos:line="21" pos:column="12">timeout<pos:position pos:line="21" pos:column="19"/></name></name> <operator pos:line="21" pos:column="20">=<pos:position pos:line="21" pos:column="21"/></operator> <name pos:line="21" pos:column="22">squid_curtime<pos:position pos:line="21" pos:column="35"/></name> <operator pos:line="21" pos:column="36">+<pos:position pos:line="21" pos:column="37"/></operator> <operator pos:line="21" pos:column="38">(<pos:position pos:line="21" pos:column="39"/></operator><name pos:line="21" pos:column="39">time_t<pos:position pos:line="21" pos:column="45"/></name><operator pos:line="21" pos:column="45">)<pos:position pos:line="21" pos:column="46"/></operator> <name pos:line="21" pos:column="47">timeout<pos:position pos:line="21" pos:column="54"/></name></expr>;<pos:position pos:line="21" pos:column="55"/></expr_stmt>
    }<pos:position pos:line="22" pos:column="6"/></block></else></if>

    <return pos:line="24" pos:column="5">return <expr><name><name pos:line="24" pos:column="12">F<pos:position pos:line="24" pos:column="13"/></name><operator pos:line="24" pos:column="13">-&gt;<pos:position pos:line="24" pos:column="18"/></operator><name pos:line="24" pos:column="15">timeout<pos:position pos:line="24" pos:column="22"/></name></name></expr>;<pos:position pos:line="24" pos:column="23"/></return>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
