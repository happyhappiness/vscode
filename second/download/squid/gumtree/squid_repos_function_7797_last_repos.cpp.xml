<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7797_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">RFCNB_Discard_Rest<pos:position pos:line="2" pos:column="19"/></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name><name pos:line="2" pos:column="20">struct<pos:position pos:line="2" pos:column="26"/></name> <name pos:line="2" pos:column="27">RFCNB_Con<pos:position pos:line="2" pos:column="36"/></name></name> <modifier pos:line="2" pos:column="37">*<pos:position pos:line="2" pos:column="38"/></modifier></type><name pos:line="2" pos:column="38">con<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="43">int<pos:position pos:line="2" pos:column="46"/></name></type> <name pos:line="2" pos:column="47">len<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="51"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name></type> <name><name pos:line="4" pos:column="10">temp<pos:position pos:line="4" pos:column="14"/></name><index pos:line="4" pos:column="14">[<expr><literal type="number" pos:line="4" pos:column="15">100<pos:position pos:line="4" pos:column="18"/></literal></expr>]<pos:position pos:line="4" pos:column="19"/></index></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>             <comment type="block" pos:line="4" pos:column="33">/* Read into here */</comment>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">rest<pos:position pos:line="5" pos:column="13"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="15">this_read<pos:position pos:line="5" pos:column="24"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="26">bytes_read<pos:position pos:line="5" pos:column="36"/></name></decl>;<pos:position pos:line="5" pos:column="37"/></decl_stmt>

    <comment type="block" pos:line="7" pos:column="5">/* len is the amount we should read */</comment>

<cpp:ifdef pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">ifdef<pos:position pos:line="9" pos:column="7"/></cpp:directive> <name pos:line="9" pos:column="8">RFCNB_DEBUG<pos:position pos:line="9" pos:column="19"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">fprintf<pos:position pos:line="10" pos:column="12"/></name><argument_list pos:line="10" pos:column="12">(<argument><expr><name pos:line="10" pos:column="13">stderr<pos:position pos:line="10" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="21">"Discard_Rest called to discard: %i\n"<pos:position pos:line="10" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="61">len<pos:position pos:line="10" pos:column="64"/></name></expr></argument>)<pos:position pos:line="10" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="66"/></expr_stmt>
<cpp:endif pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">endif<pos:position pos:line="11" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><name pos:line="13" pos:column="5">rest<pos:position pos:line="13" pos:column="9"/></name> <operator pos:line="13" pos:column="10">=<pos:position pos:line="13" pos:column="11"/></operator> <name pos:line="13" pos:column="12">len<pos:position pos:line="13" pos:column="15"/></name></expr>;<pos:position pos:line="13" pos:column="16"/></expr_stmt>

    <while pos:line="15" pos:column="5">while <condition pos:line="15" pos:column="11">(<expr><name pos:line="15" pos:column="12">rest<pos:position pos:line="15" pos:column="16"/></name> <operator pos:line="15" pos:column="17">&gt;<pos:position pos:line="15" pos:column="21"/></operator> <literal type="number" pos:line="15" pos:column="19">0<pos:position pos:line="15" pos:column="20"/></literal></expr>)<pos:position pos:line="15" pos:column="21"/></condition> <block pos:line="15" pos:column="22">{

        <expr_stmt><expr><name pos:line="17" pos:column="9">this_read<pos:position pos:line="17" pos:column="18"/></name> <operator pos:line="17" pos:column="19">=<pos:position pos:line="17" pos:column="20"/></operator> <operator pos:line="17" pos:column="21">(<pos:position pos:line="17" pos:column="22"/></operator><ternary><condition><expr><name pos:line="17" pos:column="22">rest<pos:position pos:line="17" pos:column="26"/></name> <operator pos:line="17" pos:column="27">&gt;<pos:position pos:line="17" pos:column="31"/></operator> <sizeof pos:line="17" pos:column="29">sizeof<argument_list pos:line="17" pos:column="35">(<argument><expr><name pos:line="17" pos:column="36">temp<pos:position pos:line="17" pos:column="40"/></name></expr></argument>)<pos:position pos:line="17" pos:column="41"/></argument_list></sizeof></expr> ?<pos:position pos:line="17" pos:column="43"/></condition><then pos:line="17" pos:column="43"> <expr><sizeof pos:line="17" pos:column="44">sizeof<argument_list pos:line="17" pos:column="50">(<argument><expr><name pos:line="17" pos:column="51">temp<pos:position pos:line="17" pos:column="55"/></name></expr></argument>)<pos:position pos:line="17" pos:column="56"/></argument_list></sizeof></expr> <pos:position pos:line="17" pos:column="57"/></then><else pos:line="17" pos:column="57">: <expr><name pos:line="17" pos:column="59">rest<pos:position pos:line="17" pos:column="63"/></name></expr></else></ternary><operator pos:line="17" pos:column="63">)<pos:position pos:line="17" pos:column="64"/></operator></expr>;<pos:position pos:line="17" pos:column="65"/></expr_stmt>

        <expr_stmt><expr><name pos:line="19" pos:column="9">bytes_read<pos:position pos:line="19" pos:column="19"/></name> <operator pos:line="19" pos:column="20">=<pos:position pos:line="19" pos:column="21"/></operator> <call><name pos:line="19" pos:column="22">read<pos:position pos:line="19" pos:column="26"/></name><argument_list pos:line="19" pos:column="26">(<argument><expr><name><name pos:line="19" pos:column="27">con<pos:position pos:line="19" pos:column="30"/></name><operator pos:line="19" pos:column="30">-&gt;<pos:position pos:line="19" pos:column="35"/></operator><name pos:line="19" pos:column="32">fd<pos:position pos:line="19" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="36">temp<pos:position pos:line="19" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="42">this_read<pos:position pos:line="19" pos:column="51"/></name></expr></argument>)<pos:position pos:line="19" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="53"/></expr_stmt>

        <if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name pos:line="21" pos:column="13">bytes_read<pos:position pos:line="21" pos:column="23"/></name> <operator pos:line="21" pos:column="24">&lt;=<pos:position pos:line="21" pos:column="29"/></operator> <literal type="number" pos:line="21" pos:column="27">0<pos:position pos:line="21" pos:column="28"/></literal></expr>)<pos:position pos:line="21" pos:column="29"/></condition><then pos:line="21" pos:column="29"> <block pos:line="21" pos:column="30">{  <comment type="block" pos:line="21" pos:column="33">/* Error so return */</comment>

            <if pos:line="23" pos:column="13">if <condition pos:line="23" pos:column="16">(<expr><name pos:line="23" pos:column="17">bytes_read<pos:position pos:line="23" pos:column="27"/></name> <operator pos:line="23" pos:column="28">&lt;<pos:position pos:line="23" pos:column="32"/></operator> <literal type="number" pos:line="23" pos:column="30">0<pos:position pos:line="23" pos:column="31"/></literal></expr>)<pos:position pos:line="23" pos:column="32"/></condition><then pos:line="23" pos:column="32">
                <block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="17">RFCNB_errno<pos:position pos:line="24" pos:column="28"/></name> <operator pos:line="24" pos:column="29">=<pos:position pos:line="24" pos:column="30"/></operator> <name pos:line="24" pos:column="31">RFCNBE_BadRead<pos:position pos:line="24" pos:column="45"/></name></expr>;<pos:position pos:line="24" pos:column="46"/></expr_stmt></block></then>
            <else pos:line="25" pos:column="13">else
                <block type="pseudo"><expr_stmt><expr><name pos:line="26" pos:column="17">RFCNB_errno<pos:position pos:line="26" pos:column="28"/></name> <operator pos:line="26" pos:column="29">=<pos:position pos:line="26" pos:column="30"/></operator> <name pos:line="26" pos:column="31">RFCNBE_ConGone<pos:position pos:line="26" pos:column="45"/></name></expr>;<pos:position pos:line="26" pos:column="46"/></expr_stmt></block></else></if>

            <expr_stmt><expr><name pos:line="28" pos:column="13">RFCNB_saved_errno<pos:position pos:line="28" pos:column="30"/></name> <operator pos:line="28" pos:column="31">=<pos:position pos:line="28" pos:column="32"/></operator> <name pos:line="28" pos:column="33">errno<pos:position pos:line="28" pos:column="38"/></name></expr>;<pos:position pos:line="28" pos:column="39"/></expr_stmt>
            <return pos:line="29" pos:column="13">return <expr><operator pos:line="29" pos:column="20">(<pos:position pos:line="29" pos:column="21"/></operator><name pos:line="29" pos:column="21">RFCNBE_Bad<pos:position pos:line="29" pos:column="31"/></name><operator pos:line="29" pos:column="31">)<pos:position pos:line="29" pos:column="32"/></operator></expr>;<pos:position pos:line="29" pos:column="33"/></return>

        }<pos:position pos:line="31" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="32" pos:column="9">rest<pos:position pos:line="32" pos:column="13"/></name> <operator pos:line="32" pos:column="14">=<pos:position pos:line="32" pos:column="15"/></operator> <name pos:line="32" pos:column="16">rest<pos:position pos:line="32" pos:column="20"/></name> <operator pos:line="32" pos:column="21">-<pos:position pos:line="32" pos:column="22"/></operator> <name pos:line="32" pos:column="23">bytes_read<pos:position pos:line="32" pos:column="33"/></name></expr>;<pos:position pos:line="32" pos:column="34"/></expr_stmt>

    }<pos:position pos:line="34" pos:column="6"/></block></while>

    <return pos:line="36" pos:column="5">return <expr><operator pos:line="36" pos:column="12">(<pos:position pos:line="36" pos:column="13"/></operator><literal type="number" pos:line="36" pos:column="13">0<pos:position pos:line="36" pos:column="14"/></literal><operator pos:line="36" pos:column="14">)<pos:position pos:line="36" pos:column="15"/></operator></expr>;<pos:position pos:line="36" pos:column="16"/></return>

}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
