<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4704_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">std<pos:position pos:line="1" pos:column="11"/></name><operator pos:line="1" pos:column="11">::<pos:position pos:line="1" pos:column="13"/></operator><name pos:line="1" pos:column="13">size_t<pos:position pos:line="1" pos:column="19"/></name></name></type>
<name pos:line="2" pos:column="1">SBufHashCommon_<pos:position pos:line="2" pos:column="16"/></name> <parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><specifier pos:line="2" pos:column="18">const<pos:position pos:line="2" pos:column="23"/></specifier> <name pos:line="2" pos:column="24">SBuf<pos:position pos:line="2" pos:column="28"/></name> <modifier pos:line="2" pos:column="29">&amp;<pos:position pos:line="2" pos:column="34"/></modifier></type> <name pos:line="2" pos:column="31">sbuf<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="37">bool<pos:position pos:line="2" pos:column="41"/></name></type> <name pos:line="2" pos:column="42">caseInsensitive<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="58"/></parameter_list> <noexcept pos:line="2" pos:column="59">noexcept<pos:position pos:line="2" pos:column="67"/></noexcept>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">//ripped and adapted from hash_string</comment>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">char<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">s<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><call><name><name pos:line="5" pos:column="21">sbuf<pos:position pos:line="5" pos:column="25"/></name><operator pos:line="5" pos:column="25">.<pos:position pos:line="5" pos:column="26"/></operator><name pos:line="5" pos:column="26">rawContent<pos:position pos:line="5" pos:column="36"/></name></name><argument_list pos:line="5" pos:column="36">()<pos:position pos:line="5" pos:column="38"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="39"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">size_t<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">rv<pos:position pos:line="6" pos:column="14"/></name> <init pos:line="6" pos:column="15">= <expr><literal type="number" pos:line="6" pos:column="17">0<pos:position pos:line="6" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="7" pos:column="5">SBuf<pos:position pos:line="7" pos:column="9"/></name><operator pos:line="7" pos:column="9">::<pos:position pos:line="7" pos:column="11"/></operator><name pos:line="7" pos:column="11">size_type<pos:position pos:line="7" pos:column="20"/></name></name></type> <name pos:line="7" pos:column="21">len<pos:position pos:line="7" pos:column="24"/></name><init pos:line="7" pos:column="24">=<expr><call><name><name pos:line="7" pos:column="25">sbuf<pos:position pos:line="7" pos:column="29"/></name><operator pos:line="7" pos:column="29">.<pos:position pos:line="7" pos:column="30"/></operator><name pos:line="7" pos:column="30">length<pos:position pos:line="7" pos:column="36"/></name></name><argument_list pos:line="7" pos:column="36">()<pos:position pos:line="7" pos:column="38"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="39"/></decl_stmt>
    <while pos:line="8" pos:column="5">while <condition pos:line="8" pos:column="11">(<expr><name pos:line="8" pos:column="12">len<pos:position pos:line="8" pos:column="15"/></name> <operator pos:line="8" pos:column="16">!=<pos:position pos:line="8" pos:column="18"/></operator> <literal type="number" pos:line="8" pos:column="19">0<pos:position pos:line="8" pos:column="20"/></literal></expr>)<pos:position pos:line="8" pos:column="21"/></condition> <block pos:line="8" pos:column="22">{
        <expr_stmt><expr><name pos:line="9" pos:column="9">rv<pos:position pos:line="9" pos:column="11"/></name> <operator pos:line="9" pos:column="12">^=<pos:position pos:line="9" pos:column="14"/></operator> <literal type="number" pos:line="9" pos:column="15">271<pos:position pos:line="9" pos:column="18"/></literal> <operator pos:line="9" pos:column="19">*<pos:position pos:line="9" pos:column="20"/></operator> <operator pos:line="9" pos:column="21">(<pos:position pos:line="9" pos:column="22"/></operator><ternary><condition><expr><name pos:line="9" pos:column="22">caseInsensitive<pos:position pos:line="9" pos:column="37"/></name></expr>?<pos:position pos:line="9" pos:column="38"/></condition><then pos:line="9" pos:column="38"> <expr><call><name pos:line="9" pos:column="39">xtolower<pos:position pos:line="9" pos:column="47"/></name><argument_list pos:line="9" pos:column="47">(<argument><expr><operator pos:line="9" pos:column="48">*<pos:position pos:line="9" pos:column="49"/></operator><name pos:line="9" pos:column="49">s<pos:position pos:line="9" pos:column="50"/></name></expr></argument>)<pos:position pos:line="9" pos:column="51"/></argument_list></call></expr> <pos:position pos:line="9" pos:column="52"/></then><else pos:line="9" pos:column="52">: <expr><operator pos:line="9" pos:column="54">*<pos:position pos:line="9" pos:column="55"/></operator><name pos:line="9" pos:column="55">s<pos:position pos:line="9" pos:column="56"/></name></expr></else></ternary><operator pos:line="9" pos:column="56">)<pos:position pos:line="9" pos:column="57"/></operator></expr>;<pos:position pos:line="9" pos:column="58"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="10" pos:column="9">++<pos:position pos:line="10" pos:column="11"/></operator><name pos:line="10" pos:column="11">s<pos:position pos:line="10" pos:column="12"/></name></expr>;<pos:position pos:line="10" pos:column="13"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="11" pos:column="9">--<pos:position pos:line="11" pos:column="11"/></operator><name pos:line="11" pos:column="11">len<pos:position pos:line="11" pos:column="14"/></name></expr>;<pos:position pos:line="11" pos:column="15"/></expr_stmt>
    }<pos:position pos:line="12" pos:column="6"/></block></while>
    <return pos:line="13" pos:column="5">return <expr><name pos:line="13" pos:column="12">rv<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">^<pos:position pos:line="13" pos:column="16"/></operator> <operator pos:line="13" pos:column="17">(<pos:position pos:line="13" pos:column="18"/></operator><call><name><name pos:line="13" pos:column="18">sbuf<pos:position pos:line="13" pos:column="22"/></name><operator pos:line="13" pos:column="22">.<pos:position pos:line="13" pos:column="23"/></operator><name pos:line="13" pos:column="23">length<pos:position pos:line="13" pos:column="29"/></name></name><argument_list pos:line="13" pos:column="29">()<pos:position pos:line="13" pos:column="31"/></argument_list></call> <operator pos:line="13" pos:column="32">*<pos:position pos:line="13" pos:column="33"/></operator> <literal type="number" pos:line="13" pos:column="34">271<pos:position pos:line="13" pos:column="37"/></literal><operator pos:line="13" pos:column="37">)<pos:position pos:line="13" pos:column="38"/></operator></expr>;<pos:position pos:line="13" pos:column="39"/></return>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
