<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2184_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ConfigParser<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">CfgFile<pos:position pos:line="2" pos:column="22"/></name><operator pos:line="2" pos:column="22">::<pos:position pos:line="2" pos:column="24"/></operator><name pos:line="2" pos:column="24">startParse<pos:position pos:line="2" pos:column="34"/></name></name><parameter_list pos:line="2" pos:column="34">(<parameter><decl><type><name pos:line="2" pos:column="35">char<pos:position pos:line="2" pos:column="39"/></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier></type><name pos:line="2" pos:column="41">path<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="46"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">wordFile<pos:position pos:line="4" pos:column="20"/></name> <operator pos:line="4" pos:column="21">==<pos:position pos:line="4" pos:column="23"/></operator> <name pos:line="4" pos:column="24">NULL<pos:position pos:line="4" pos:column="28"/></name></expr></argument>)<pos:position pos:line="4" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">debugs<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><literal type="number" pos:line="5" pos:column="12">3<pos:position pos:line="5" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="15">3<pos:position pos:line="5" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="18">"Parsing from "<pos:position pos:line="5" pos:column="33"/></literal> <operator pos:line="5" pos:column="34">&lt;&lt;<pos:position pos:line="5" pos:column="42"/></operator> <name pos:line="5" pos:column="37">path<pos:position pos:line="5" pos:column="41"/></name></expr></argument>)<pos:position pos:line="5" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="43"/></expr_stmt>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">(<pos:position pos:line="6" pos:column="10"/></operator><name pos:line="6" pos:column="10">wordFile<pos:position pos:line="6" pos:column="18"/></name> <operator pos:line="6" pos:column="19">=<pos:position pos:line="6" pos:column="20"/></operator> <call><name pos:line="6" pos:column="21">fopen<pos:position pos:line="6" pos:column="26"/></name><argument_list pos:line="6" pos:column="26">(<argument><expr><name pos:line="6" pos:column="27">path<pos:position pos:line="6" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="33">"r"<pos:position pos:line="6" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="37"/></argument_list></call><operator pos:line="6" pos:column="37">)<pos:position pos:line="6" pos:column="38"/></operator> <operator pos:line="6" pos:column="39">==<pos:position pos:line="6" pos:column="41"/></operator> <name pos:line="6" pos:column="42">NULL<pos:position pos:line="6" pos:column="46"/></name></expr>)<pos:position pos:line="6" pos:column="47"/></condition><then pos:line="6" pos:column="47"> <block pos:line="6" pos:column="48">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">debugs<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><literal type="number" pos:line="7" pos:column="16">3<pos:position pos:line="7" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="19">DBG_CRITICAL<pos:position pos:line="7" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="33">"WARNING: file :"<pos:position pos:line="7" pos:column="50"/></literal> <operator pos:line="7" pos:column="51">&lt;&lt;<pos:position pos:line="7" pos:column="59"/></operator> <name pos:line="7" pos:column="54">path<pos:position pos:line="7" pos:column="58"/></name> <operator pos:line="7" pos:column="59">&lt;&lt;<pos:position pos:line="7" pos:column="67"/></operator> <literal type="string" pos:line="7" pos:column="62">" not found"<pos:position pos:line="7" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="76"/></expr_stmt>
        <return pos:line="8" pos:column="9">return <expr><literal type="boolean" pos:line="8" pos:column="16">false<pos:position pos:line="8" pos:column="21"/></literal></expr>;<pos:position pos:line="8" pos:column="22"/></return>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>

<cpp:if pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">if<pos:position pos:line="11" pos:column="4"/></cpp:directive> <expr><name pos:line="11" pos:column="5">_SQUID_WINDOWS_<pos:position pos:line="11" pos:column="20"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">setmode<pos:position pos:line="12" pos:column="12"/></name><argument_list pos:line="12" pos:column="12">(<argument><expr><call><name pos:line="12" pos:column="13">fileno<pos:position pos:line="12" pos:column="19"/></name><argument_list pos:line="12" pos:column="19">(<argument><expr><name pos:line="12" pos:column="20">wordFile<pos:position pos:line="12" pos:column="28"/></name></expr></argument>)<pos:position pos:line="12" pos:column="29"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="12" pos:column="31">O_TEXT<pos:position pos:line="12" pos:column="37"/></name></expr></argument>)<pos:position pos:line="12" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="39"/></expr_stmt>
<cpp:endif pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">endif<pos:position pos:line="13" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><name pos:line="15" pos:column="5">filePath<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">=<pos:position pos:line="15" pos:column="15"/></operator> <name pos:line="15" pos:column="16">path<pos:position pos:line="15" pos:column="20"/></name></expr>;<pos:position pos:line="15" pos:column="21"/></expr_stmt>
    <return pos:line="16" pos:column="5">return <expr><call><name pos:line="16" pos:column="12">getFileLine<pos:position pos:line="16" pos:column="23"/></name><argument_list pos:line="16" pos:column="23">()<pos:position pos:line="16" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="26"/></return>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
