<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4793_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">SBufList<pos:position pos:line="1" pos:column="9"/></name></type>
<name><name pos:line="2" pos:column="1">Acl<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">Tree<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">treeDump<pos:position pos:line="2" pos:column="20"/></name></name><parameter_list pos:line="2" pos:column="20">(<parameter><decl><type><specifier pos:line="2" pos:column="21">const<pos:position pos:line="2" pos:column="26"/></specifier> <name pos:line="2" pos:column="27">char<pos:position pos:line="2" pos:column="31"/></name> <modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type><name pos:line="2" pos:column="33">prefix<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="41">const<pos:position pos:line="2" pos:column="46"/></specifier> <name pos:line="2" pos:column="47">ActionToString<pos:position pos:line="2" pos:column="61"/></name> <modifier pos:line="2" pos:column="62">&amp;<pos:position pos:line="2" pos:column="67"/></modifier></type><name pos:line="2" pos:column="63">convert<pos:position pos:line="2" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="71"/></parameter_list> <specifier pos:line="2" pos:column="72">const<pos:position pos:line="2" pos:column="77"/></specifier>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">SBufList<pos:position pos:line="4" pos:column="13"/></name></type> <name pos:line="4" pos:column="14">text<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="5" pos:column="5">Actions<pos:position pos:line="5" pos:column="12"/></name><operator pos:line="5" pos:column="12">::<pos:position pos:line="5" pos:column="14"/></operator><name pos:line="5" pos:column="14">const_iterator<pos:position pos:line="5" pos:column="28"/></name></name></type> <name pos:line="5" pos:column="29">action<pos:position pos:line="5" pos:column="35"/></name> <init pos:line="5" pos:column="36">= <expr><call><name><name pos:line="5" pos:column="38">actions<pos:position pos:line="5" pos:column="45"/></name><operator pos:line="5" pos:column="45">.<pos:position pos:line="5" pos:column="46"/></operator><name pos:line="5" pos:column="46">begin<pos:position pos:line="5" pos:column="51"/></name></name><argument_list pos:line="5" pos:column="51">()<pos:position pos:line="5" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="54"/></decl_stmt>
    <typedef pos:line="6" pos:column="5">typedef <type><name><name pos:line="6" pos:column="13">Nodes<pos:position pos:line="6" pos:column="18"/></name><operator pos:line="6" pos:column="18">::<pos:position pos:line="6" pos:column="20"/></operator><name pos:line="6" pos:column="20">const_iterator<pos:position pos:line="6" pos:column="34"/></name></name></type> <name pos:line="6" pos:column="35">NCI<pos:position pos:line="6" pos:column="38"/></name>;<pos:position pos:line="6" pos:column="39"/></typedef>
    <for pos:line="7" pos:column="5">for <control pos:line="7" pos:column="9">(<init><decl><type><name pos:line="7" pos:column="10">NCI<pos:position pos:line="7" pos:column="13"/></name></type> <name pos:line="7" pos:column="14">node<pos:position pos:line="7" pos:column="18"/></name> <init pos:line="7" pos:column="19">= <expr><call><name><name pos:line="7" pos:column="21">nodes<pos:position pos:line="7" pos:column="26"/></name><operator pos:line="7" pos:column="26">.<pos:position pos:line="7" pos:column="27"/></operator><name pos:line="7" pos:column="27">begin<pos:position pos:line="7" pos:column="32"/></name></name><argument_list pos:line="7" pos:column="32">()<pos:position pos:line="7" pos:column="34"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="35"/></init> <condition><expr><name pos:line="7" pos:column="36">node<pos:position pos:line="7" pos:column="40"/></name> <operator pos:line="7" pos:column="41">!=<pos:position pos:line="7" pos:column="43"/></operator> <call><name><name pos:line="7" pos:column="44">nodes<pos:position pos:line="7" pos:column="49"/></name><operator pos:line="7" pos:column="49">.<pos:position pos:line="7" pos:column="50"/></operator><name pos:line="7" pos:column="50">end<pos:position pos:line="7" pos:column="53"/></name></name><argument_list pos:line="7" pos:column="53">()<pos:position pos:line="7" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="56"/></condition> <incr><expr><operator pos:line="7" pos:column="57">++<pos:position pos:line="7" pos:column="59"/></operator><name pos:line="7" pos:column="59">node<pos:position pos:line="7" pos:column="63"/></name></expr></incr>)<pos:position pos:line="7" pos:column="64"/></control> <block pos:line="7" pos:column="65">{

        <expr_stmt><expr><call><name><name pos:line="9" pos:column="9">text<pos:position pos:line="9" pos:column="13"/></name><operator pos:line="9" pos:column="13">.<pos:position pos:line="9" pos:column="14"/></operator><name pos:line="9" pos:column="14">push_back<pos:position pos:line="9" pos:column="23"/></name></name><argument_list pos:line="9" pos:column="23">(<argument><expr><call><name pos:line="9" pos:column="24">SBuf<pos:position pos:line="9" pos:column="28"/></name><argument_list pos:line="9" pos:column="28">(<argument><expr><name pos:line="9" pos:column="29">prefix<pos:position pos:line="9" pos:column="35"/></name></expr></argument>)<pos:position pos:line="9" pos:column="36"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="38"/></expr_stmt>

        <if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">action<pos:position pos:line="11" pos:column="19"/></name> <operator pos:line="11" pos:column="20">!=<pos:position pos:line="11" pos:column="22"/></operator> <call><name><name pos:line="11" pos:column="23">actions<pos:position pos:line="11" pos:column="30"/></name><operator pos:line="11" pos:column="30">.<pos:position pos:line="11" pos:column="31"/></operator><name pos:line="11" pos:column="31">end<pos:position pos:line="11" pos:column="34"/></name></name><argument_list pos:line="11" pos:column="34">()<pos:position pos:line="11" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="37"/></condition><then pos:line="11" pos:column="37"> <block pos:line="11" pos:column="38">{
            <decl_stmt><decl><type><specifier pos:line="12" pos:column="13">const<pos:position pos:line="12" pos:column="18"/></specifier> <name pos:line="12" pos:column="19">char<pos:position pos:line="12" pos:column="23"/></name> <modifier pos:line="12" pos:column="24">*<pos:position pos:line="12" pos:column="25"/></modifier></type><name pos:line="12" pos:column="25">act<pos:position pos:line="12" pos:column="28"/></name> <init pos:line="12" pos:column="29">= <expr><ternary><condition><expr><name pos:line="12" pos:column="31">convert<pos:position pos:line="12" pos:column="38"/></name></expr> ?<pos:position pos:line="12" pos:column="40"/></condition><then pos:line="12" pos:column="40"> <expr><name><name pos:line="12" pos:column="41">convert<pos:position pos:line="12" pos:column="48"/></name><index pos:line="12" pos:column="48">[<expr><name><name pos:line="12" pos:column="49">action<pos:position pos:line="12" pos:column="55"/></name><operator pos:line="12" pos:column="55">-&gt;<pos:position pos:line="12" pos:column="60"/></operator><name pos:line="12" pos:column="57">kind<pos:position pos:line="12" pos:column="61"/></name></name></expr>]<pos:position pos:line="12" pos:column="62"/></index></name></expr> <pos:position pos:line="12" pos:column="63"/></then><else pos:line="12" pos:column="63">:
                              <expr><operator pos:line="13" pos:column="31">(<pos:position pos:line="13" pos:column="32"/></operator><ternary><condition><expr><operator pos:line="13" pos:column="32">*<pos:position pos:line="13" pos:column="33"/></operator><name pos:line="13" pos:column="33">action<pos:position pos:line="13" pos:column="39"/></name> <operator pos:line="13" pos:column="40">==<pos:position pos:line="13" pos:column="42"/></operator> <name pos:line="13" pos:column="43">ACCESS_ALLOWED<pos:position pos:line="13" pos:column="57"/></name></expr> ?<pos:position pos:line="13" pos:column="59"/></condition><then pos:line="13" pos:column="59"> <expr><literal type="string" pos:line="13" pos:column="60">"allow"<pos:position pos:line="13" pos:column="67"/></literal></expr> <pos:position pos:line="13" pos:column="68"/></then><else pos:line="13" pos:column="68">: <expr><literal type="string" pos:line="13" pos:column="70">"deny"<pos:position pos:line="13" pos:column="76"/></literal></expr></else></ternary><operator pos:line="13" pos:column="76">)<pos:position pos:line="13" pos:column="77"/></operator></expr></else></ternary></expr></init></decl>;<pos:position pos:line="13" pos:column="78"/></decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="14" pos:column="13">text<pos:position pos:line="14" pos:column="17"/></name><operator pos:line="14" pos:column="17">.<pos:position pos:line="14" pos:column="18"/></operator><name pos:line="14" pos:column="18">push_back<pos:position pos:line="14" pos:column="27"/></name></name><argument_list pos:line="14" pos:column="27">(<argument><expr><ternary><condition><expr><name pos:line="14" pos:column="28">act<pos:position pos:line="14" pos:column="31"/></name></expr>?<pos:position pos:line="14" pos:column="32"/></condition><then><expr><call><name pos:line="14" pos:column="32">SBuf<pos:position pos:line="14" pos:column="36"/></name><argument_list pos:line="14" pos:column="36">(<argument><expr><name pos:line="14" pos:column="37">act<pos:position pos:line="14" pos:column="40"/></name></expr></argument>)<pos:position pos:line="14" pos:column="41"/></argument_list></call></expr></then><else pos:line="14" pos:column="41">:<expr><call><name pos:line="14" pos:column="42">SBuf<pos:position pos:line="14" pos:column="46"/></name><argument_list pos:line="14" pos:column="46">(<argument><expr><literal type="string" pos:line="14" pos:column="47">"???"<pos:position pos:line="14" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="53"/></argument_list></call></expr></else></ternary></expr></argument>)<pos:position pos:line="14" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="55"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="15" pos:column="13">++<pos:position pos:line="15" pos:column="15"/></operator><name pos:line="15" pos:column="15">action<pos:position pos:line="15" pos:column="21"/></name></expr>;<pos:position pos:line="15" pos:column="22"/></expr_stmt>
        }<pos:position pos:line="16" pos:column="10"/></block></then></if>

        <comment type="line" pos:line="18" pos:column="9">// temp is needed until c++11 move constructor</comment>
        <decl_stmt><decl><type><name pos:line="19" pos:column="9">SBufList<pos:position pos:line="19" pos:column="17"/></name></type> <name pos:line="19" pos:column="18">temp<pos:position pos:line="19" pos:column="22"/></name> <init pos:line="19" pos:column="23">= <expr><call><name><operator pos:line="19" pos:column="25">(<pos:position pos:line="19" pos:column="26"/></operator><operator pos:line="19" pos:column="26">*<pos:position pos:line="19" pos:column="27"/></operator><name pos:line="19" pos:column="27">node<pos:position pos:line="19" pos:column="31"/></name><operator pos:line="19" pos:column="31">)<pos:position pos:line="19" pos:column="32"/></operator><operator pos:line="19" pos:column="32">-&gt;<pos:position pos:line="19" pos:column="37"/></operator><name pos:line="19" pos:column="34">dump<pos:position pos:line="19" pos:column="38"/></name></name><argument_list pos:line="19" pos:column="38">()<pos:position pos:line="19" pos:column="40"/></argument_list></call></expr></init></decl>;<pos:position pos:line="19" pos:column="41"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="20" pos:column="9">text<pos:position pos:line="20" pos:column="13"/></name><operator pos:line="20" pos:column="13">.<pos:position pos:line="20" pos:column="14"/></operator><name pos:line="20" pos:column="14">splice<pos:position pos:line="20" pos:column="20"/></name></name><argument_list pos:line="20" pos:column="20">(<argument><expr><call><name><name pos:line="20" pos:column="21">text<pos:position pos:line="20" pos:column="25"/></name><operator pos:line="20" pos:column="25">.<pos:position pos:line="20" pos:column="26"/></operator><name pos:line="20" pos:column="26">end<pos:position pos:line="20" pos:column="29"/></name></name><argument_list pos:line="20" pos:column="29">()<pos:position pos:line="20" pos:column="31"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="20" pos:column="33">temp<pos:position pos:line="20" pos:column="37"/></name></expr></argument>)<pos:position pos:line="20" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="21" pos:column="9">text<pos:position pos:line="21" pos:column="13"/></name><operator pos:line="21" pos:column="13">.<pos:position pos:line="21" pos:column="14"/></operator><name pos:line="21" pos:column="14">push_back<pos:position pos:line="21" pos:column="23"/></name></name><argument_list pos:line="21" pos:column="23">(<argument><expr><call><name pos:line="21" pos:column="24">SBuf<pos:position pos:line="21" pos:column="28"/></name><argument_list pos:line="21" pos:column="28">(<argument><expr><literal type="string" pos:line="21" pos:column="29">"\n"<pos:position pos:line="21" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="34"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="22" pos:column="6"/></block></for>
    <return pos:line="23" pos:column="5">return <expr><name pos:line="23" pos:column="12">text<pos:position pos:line="23" pos:column="16"/></name></expr>;<pos:position pos:line="23" pos:column="17"/></return>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
