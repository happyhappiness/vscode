<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_function_1471.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ipc<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">Mem<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">Segment<pos:position pos:line="2" pos:column="18"/></name><operator pos:line="2" pos:column="18">::<pos:position pos:line="2" pos:column="20"/></operator><name pos:line="2" pos:column="20">attach<pos:position pos:line="2" pos:column="26"/></name></name><parameter_list pos:line="2" pos:column="26">()<pos:position pos:line="2" pos:column="28"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">theFD<pos:position pos:line="4" pos:column="17"/></name> <operator pos:line="4" pos:column="18">&gt;=<pos:position pos:line="4" pos:column="23"/></operator> <literal type="number" pos:line="4" pos:column="21">0<pos:position pos:line="4" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><operator pos:line="5" pos:column="12">!<pos:position pos:line="5" pos:column="13"/></operator><name pos:line="5" pos:column="13">theMem<pos:position pos:line="5" pos:column="19"/></name></expr></argument>)<pos:position pos:line="5" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="21"/></expr_stmt>

    <comment type="line" pos:line="7" pos:column="5">// mmap() accepts size_t for the size; we give it off_t which might</comment>
    <comment type="line" pos:line="8" pos:column="5">// be bigger; assert overflows until we support multiple mmap()s?</comment>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">assert<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><name pos:line="9" pos:column="12">theSize<pos:position pos:line="9" pos:column="19"/></name> <operator pos:line="9" pos:column="20">==<pos:position pos:line="9" pos:column="22"/></operator> <cast type="static" pos:line="9" pos:column="23">static_cast<argument_list type="generic" pos:line="9" pos:column="34">&lt;<argument><expr><name pos:line="9" pos:column="35">off_t<pos:position pos:line="9" pos:column="40"/></name></expr></argument>&gt;<pos:position pos:line="9" pos:column="44"/></argument_list><argument_list pos:line="9" pos:column="41">(<argument><expr><cast type="static" pos:line="9" pos:column="42">static_cast<argument_list type="generic" pos:line="9" pos:column="53">&lt;<argument><expr><name pos:line="9" pos:column="54">size_t<pos:position pos:line="9" pos:column="60"/></name></expr></argument>&gt;<pos:position pos:line="9" pos:column="64"/></argument_list><argument_list pos:line="9" pos:column="61">(<argument><expr><name pos:line="9" pos:column="62">theSize<pos:position pos:line="9" pos:column="69"/></name></expr></argument>)<pos:position pos:line="9" pos:column="70"/></argument_list></cast></expr></argument>)<pos:position pos:line="9" pos:column="71"/></argument_list></cast></expr></argument>)<pos:position pos:line="9" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="73"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="11" pos:column="5">void<pos:position pos:line="11" pos:column="9"/></name> <modifier pos:line="11" pos:column="10">*<pos:position pos:line="11" pos:column="11"/></modifier><specifier pos:line="11" pos:column="11">const<pos:position pos:line="11" pos:column="16"/></specifier></type> <name pos:line="11" pos:column="17">p<pos:position pos:line="11" pos:column="18"/></name> <init pos:line="11" pos:column="19">=
        <expr><call><name pos:line="12" pos:column="9">mmap<pos:position pos:line="12" pos:column="13"/></name><argument_list pos:line="12" pos:column="13">(<argument><expr><name pos:line="12" pos:column="14">NULL<pos:position pos:line="12" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="20">theSize<pos:position pos:line="12" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="29">PROT_READ<pos:position pos:line="12" pos:column="38"/></name> <operator pos:line="12" pos:column="39">|<pos:position pos:line="12" pos:column="40"/></operator> <name pos:line="12" pos:column="41">PROT_WRITE<pos:position pos:line="12" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="53">MAP_SHARED<pos:position pos:line="12" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="65">theFD<pos:position pos:line="12" pos:column="70"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="72">0<pos:position pos:line="12" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="74"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="75"/></decl_stmt>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">p<pos:position pos:line="13" pos:column="10"/></name> <operator pos:line="13" pos:column="11">==<pos:position pos:line="13" pos:column="13"/></operator> <name pos:line="13" pos:column="14">MAP_FAILED<pos:position pos:line="13" pos:column="24"/></name></expr>)<pos:position pos:line="13" pos:column="25"/></condition><then pos:line="13" pos:column="25"> <block pos:line="13" pos:column="26">{
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">debugs<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><literal type="number" pos:line="14" pos:column="16">54<pos:position pos:line="14" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="20">5<pos:position pos:line="14" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="23">HERE<pos:position pos:line="14" pos:column="27"/></name> <operator pos:line="14" pos:column="28">&lt;&lt;<pos:position pos:line="14" pos:column="36"/></operator> <literal type="string" pos:line="14" pos:column="31">"mmap "<pos:position pos:line="14" pos:column="38"/></literal> <operator pos:line="14" pos:column="39">&lt;&lt;<pos:position pos:line="14" pos:column="47"/></operator> <name pos:line="14" pos:column="42">theName<pos:position pos:line="14" pos:column="49"/></name> <operator pos:line="14" pos:column="50">&lt;&lt;<pos:position pos:line="14" pos:column="58"/></operator> <literal type="string" pos:line="14" pos:column="53">": "<pos:position pos:line="14" pos:column="57"/></literal> <operator pos:line="14" pos:column="58">&lt;&lt;<pos:position pos:line="14" pos:column="66"/></operator> <call><name pos:line="14" pos:column="61">xstrerror<pos:position pos:line="14" pos:column="70"/></name><argument_list pos:line="14" pos:column="70">()<pos:position pos:line="14" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="74"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">fatalf<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><literal type="string" pos:line="15" pos:column="16">"Ipc::Mem::Segment::attach failed to mmap(%s): %s\n"<pos:position pos:line="15" pos:column="68"/></literal></expr></argument>,
               <argument><expr><call><name><name pos:line="16" pos:column="16">theName<pos:position pos:line="16" pos:column="23"/></name><operator pos:line="16" pos:column="23">.<pos:position pos:line="16" pos:column="24"/></operator><name pos:line="16" pos:column="24">termedBuf<pos:position pos:line="16" pos:column="33"/></name></name><argument_list pos:line="16" pos:column="33">()<pos:position pos:line="16" pos:column="35"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="16" pos:column="37">xstrerror<pos:position pos:line="16" pos:column="46"/></name><argument_list pos:line="16" pos:column="46">()<pos:position pos:line="16" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="50"/></expr_stmt>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="18" pos:column="5">theMem<pos:position pos:line="18" pos:column="11"/></name> <operator pos:line="18" pos:column="12">=<pos:position pos:line="18" pos:column="13"/></operator> <name pos:line="18" pos:column="14">p<pos:position pos:line="18" pos:column="15"/></name></expr>;<pos:position pos:line="18" pos:column="16"/></expr_stmt>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
