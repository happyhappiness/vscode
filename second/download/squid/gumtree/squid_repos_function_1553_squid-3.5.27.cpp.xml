<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1553_squid-3.5.27.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">bool<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">doPages<pos:position pos:line="2" pos:column="8"/></name><parameter_list pos:line="2" pos:column="8">(<parameter><decl><type><name pos:line="2" pos:column="9">StoreEntry<pos:position pos:line="2" pos:column="19"/></name> <modifier pos:line="2" pos:column="20">*<pos:position pos:line="2" pos:column="21"/></modifier></type><name pos:line="2" pos:column="21">anEntry<pos:position pos:line="2" pos:column="28"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="29"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">MemObject<pos:position pos:line="4" pos:column="14"/></name> <modifier pos:line="4" pos:column="15">*<pos:position pos:line="4" pos:column="16"/></modifier></type><name pos:line="4" pos:column="16">mem<pos:position pos:line="4" pos:column="19"/></name> <init pos:line="4" pos:column="20">= <expr><name><name pos:line="4" pos:column="22">anEntry<pos:position pos:line="4" pos:column="29"/></name><operator pos:line="4" pos:column="29">-&gt;<pos:position pos:line="4" pos:column="34"/></operator><name pos:line="4" pos:column="31">mem_obj<pos:position pos:line="4" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>

    <do pos:line="6" pos:column="5">do <block pos:line="6" pos:column="8">{
        <comment type="line" pos:line="7" pos:column="9">// find the page containing the first byte we have not swapped out yet</comment>
        <decl_stmt><decl><type><name pos:line="8" pos:column="9">mem_node<pos:position pos:line="8" pos:column="17"/></name> <modifier pos:line="8" pos:column="18">*<pos:position pos:line="8" pos:column="19"/></modifier></type><name pos:line="8" pos:column="19">page<pos:position pos:line="8" pos:column="23"/></name> <init pos:line="8" pos:column="24">=
            <expr><call><name><name pos:line="9" pos:column="13">mem<pos:position pos:line="9" pos:column="16"/></name><operator pos:line="9" pos:column="16">-&gt;<pos:position pos:line="9" pos:column="21"/></operator><name pos:line="9" pos:column="18">data_hdr<pos:position pos:line="9" pos:column="26"/></name><operator pos:line="9" pos:column="26">.<pos:position pos:line="9" pos:column="27"/></operator><name pos:line="9" pos:column="27">getBlockContainingLocation<pos:position pos:line="9" pos:column="53"/></name></name><argument_list pos:line="9" pos:column="53">(<argument><expr><name><name pos:line="9" pos:column="54">mem<pos:position pos:line="9" pos:column="57"/></name><operator pos:line="9" pos:column="57">-&gt;<pos:position pos:line="9" pos:column="62"/></operator><name pos:line="9" pos:column="59">swapout<pos:position pos:line="9" pos:column="66"/></name><operator pos:line="9" pos:column="66">.<pos:position pos:line="9" pos:column="67"/></operator><name pos:line="9" pos:column="67">queue_offset<pos:position pos:line="9" pos:column="79"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="80"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="81"/></decl_stmt>

        <if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">!<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="14">page<pos:position pos:line="11" pos:column="18"/></name></expr>)<pos:position pos:line="11" pos:column="19"/></condition><then pos:line="11" pos:column="19">
            <block type="pseudo"><break pos:line="12" pos:column="13">break;<pos:position pos:line="12" pos:column="19"/></break></block></then></if> <comment type="line" pos:line="12" pos:column="20">// wait for more data to become available</comment>

        <comment type="line" pos:line="14" pos:column="9">// memNodeWriteComplete() and absence of buffer offset math below</comment>
        <comment type="line" pos:line="15" pos:column="9">// imply that we always write from the very beginning of the page</comment>
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">assert<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><call><name><name pos:line="16" pos:column="16">page<pos:position pos:line="16" pos:column="20"/></name><operator pos:line="16" pos:column="20">-&gt;<pos:position pos:line="16" pos:column="25"/></operator><name pos:line="16" pos:column="22">start<pos:position pos:line="16" pos:column="27"/></name></name><argument_list pos:line="16" pos:column="27">()<pos:position pos:line="16" pos:column="29"/></argument_list></call> <operator pos:line="16" pos:column="30">==<pos:position pos:line="16" pos:column="32"/></operator> <name><name pos:line="16" pos:column="33">mem<pos:position pos:line="16" pos:column="36"/></name><operator pos:line="16" pos:column="36">-&gt;<pos:position pos:line="16" pos:column="41"/></operator><name pos:line="16" pos:column="38">swapout<pos:position pos:line="16" pos:column="45"/></name><operator pos:line="16" pos:column="45">.<pos:position pos:line="16" pos:column="46"/></operator><name pos:line="16" pos:column="46">queue_offset<pos:position pos:line="16" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="60"/></expr_stmt>

        <comment type="block" pos:line="18" pos:column="9">/*
         * Get the length of this buffer. We are assuming(!) that the buffer
         * length won't change on this buffer, or things are going to be very
         * strange. I think that after the copy to a buffer is done, the buffer
         * size should stay fixed regardless so that this code isn't confused,
         * but we can look at this at a later date or whenever the code results
         * in bad swapouts, whichever happens first. :-)
         */</comment>
        <decl_stmt><decl><type><name pos:line="26" pos:column="9">ssize_t<pos:position pos:line="26" pos:column="16"/></name></type> <name pos:line="26" pos:column="17">swap_buf_len<pos:position pos:line="26" pos:column="29"/></name> <init pos:line="26" pos:column="30">= <expr><name><name pos:line="26" pos:column="32">page<pos:position pos:line="26" pos:column="36"/></name><operator pos:line="26" pos:column="36">-&gt;<pos:position pos:line="26" pos:column="41"/></operator><name pos:line="26" pos:column="38">nodeBuffer<pos:position pos:line="26" pos:column="48"/></name><operator pos:line="26" pos:column="48">.<pos:position pos:line="26" pos:column="49"/></operator><name pos:line="26" pos:column="49">length<pos:position pos:line="26" pos:column="55"/></name></name></expr></init></decl>;<pos:position pos:line="26" pos:column="56"/></decl_stmt>

        <expr_stmt><expr><call><name pos:line="28" pos:column="9">debugs<pos:position pos:line="28" pos:column="15"/></name><argument_list pos:line="28" pos:column="15">(<argument><expr><literal type="number" pos:line="28" pos:column="16">20<pos:position pos:line="28" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="20">3<pos:position pos:line="28" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="23">"storeSwapOut: swap_buf_len = "<pos:position pos:line="28" pos:column="54"/></literal> <operator pos:line="28" pos:column="55">&lt;&lt;<pos:position pos:line="28" pos:column="63"/></operator> <name pos:line="28" pos:column="58">swap_buf_len<pos:position pos:line="28" pos:column="70"/></name></expr></argument>)<pos:position pos:line="28" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="72"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="30" pos:column="9">assert<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><name pos:line="30" pos:column="16">swap_buf_len<pos:position pos:line="30" pos:column="28"/></name> <operator pos:line="30" pos:column="29">&gt;<pos:position pos:line="30" pos:column="33"/></operator> <literal type="number" pos:line="30" pos:column="31">0<pos:position pos:line="30" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="34"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="32" pos:column="9">debugs<pos:position pos:line="32" pos:column="15"/></name><argument_list pos:line="32" pos:column="15">(<argument><expr><literal type="number" pos:line="32" pos:column="16">20<pos:position pos:line="32" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="20">3<pos:position pos:line="32" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="23">"storeSwapOut: swapping out "<pos:position pos:line="32" pos:column="52"/></literal> <operator pos:line="32" pos:column="53">&lt;&lt;<pos:position pos:line="32" pos:column="61"/></operator> <name pos:line="32" pos:column="56">swap_buf_len<pos:position pos:line="32" pos:column="68"/></name> <operator pos:line="32" pos:column="69">&lt;&lt;<pos:position pos:line="32" pos:column="77"/></operator> <literal type="string" pos:line="32" pos:column="72">" bytes from "<pos:position pos:line="32" pos:column="86"/></literal> <operator pos:line="32" pos:column="87">&lt;&lt;<pos:position pos:line="32" pos:column="95"/></operator> <name><name pos:line="32" pos:column="90">mem<pos:position pos:line="32" pos:column="93"/></name><operator pos:line="32" pos:column="93">-&gt;<pos:position pos:line="32" pos:column="98"/></operator><name pos:line="32" pos:column="95">swapout<pos:position pos:line="32" pos:column="102"/></name><operator pos:line="32" pos:column="102">.<pos:position pos:line="32" pos:column="103"/></operator><name pos:line="32" pos:column="103">queue_offset<pos:position pos:line="32" pos:column="115"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="116"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="117"/></expr_stmt>

        <expr_stmt><expr><name><name pos:line="34" pos:column="9">mem<pos:position pos:line="34" pos:column="12"/></name><operator pos:line="34" pos:column="12">-&gt;<pos:position pos:line="34" pos:column="17"/></operator><name pos:line="34" pos:column="14">swapout<pos:position pos:line="34" pos:column="21"/></name><operator pos:line="34" pos:column="21">.<pos:position pos:line="34" pos:column="22"/></operator><name pos:line="34" pos:column="22">queue_offset<pos:position pos:line="34" pos:column="34"/></name></name> <operator pos:line="34" pos:column="35">+=<pos:position pos:line="34" pos:column="37"/></operator> <name pos:line="34" pos:column="38">swap_buf_len<pos:position pos:line="34" pos:column="50"/></name></expr>;<pos:position pos:line="34" pos:column="51"/></expr_stmt>

        <comment type="line" pos:line="36" pos:column="9">// Quit if write() fails. Sio is going to call our callback, and that</comment>
        <comment type="line" pos:line="37" pos:column="9">// will cleanup, but, depending on the fs, that call may be async.</comment>
        <decl_stmt><decl><type><specifier pos:line="38" pos:column="9">const<pos:position pos:line="38" pos:column="14"/></specifier> <name pos:line="38" pos:column="15">bool<pos:position pos:line="38" pos:column="19"/></name></type> <name pos:line="38" pos:column="20">ok<pos:position pos:line="38" pos:column="22"/></name> <init pos:line="38" pos:column="23">= <expr><call><name><name pos:line="38" pos:column="25">mem<pos:position pos:line="38" pos:column="28"/></name><operator pos:line="38" pos:column="28">-&gt;<pos:position pos:line="38" pos:column="33"/></operator><name pos:line="38" pos:column="30">swapout<pos:position pos:line="38" pos:column="37"/></name><operator pos:line="38" pos:column="37">.<pos:position pos:line="38" pos:column="38"/></operator><name pos:line="38" pos:column="38">sio<pos:position pos:line="38" pos:column="41"/></name><operator pos:line="38" pos:column="41">-&gt;<pos:position pos:line="38" pos:column="46"/></operator><name pos:line="38" pos:column="43">write<pos:position pos:line="38" pos:column="48"/></name></name><argument_list pos:line="38" pos:column="48">(
                            <argument><expr><call><name><name pos:line="39" pos:column="29">mem<pos:position pos:line="39" pos:column="32"/></name><operator pos:line="39" pos:column="32">-&gt;<pos:position pos:line="39" pos:column="37"/></operator><name pos:line="39" pos:column="34">data_hdr<pos:position pos:line="39" pos:column="42"/></name><operator pos:line="39" pos:column="42">.<pos:position pos:line="39" pos:column="43"/></operator><name pos:line="39" pos:column="43">NodeGet<pos:position pos:line="39" pos:column="50"/></name></name><argument_list pos:line="39" pos:column="50">(<argument><expr><name pos:line="39" pos:column="51">page<pos:position pos:line="39" pos:column="55"/></name></expr></argument>)<pos:position pos:line="39" pos:column="56"/></argument_list></call></expr></argument>,
                            <argument><expr><name pos:line="40" pos:column="29">swap_buf_len<pos:position pos:line="40" pos:column="41"/></name></expr></argument>,
                            <argument><expr><operator pos:line="41" pos:column="29">-<pos:position pos:line="41" pos:column="30"/></operator><literal type="number" pos:line="41" pos:column="30">1<pos:position pos:line="41" pos:column="31"/></literal></expr></argument>,
                            <argument><expr><name pos:line="42" pos:column="29">memNodeWriteComplete<pos:position pos:line="42" pos:column="49"/></name></expr></argument>)<pos:position pos:line="42" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="42" pos:column="51"/></decl_stmt>

        <if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><operator pos:line="44" pos:column="13">!<pos:position pos:line="44" pos:column="14"/></operator><name pos:line="44" pos:column="14">ok<pos:position pos:line="44" pos:column="16"/></name> <operator pos:line="44" pos:column="17">||<pos:position pos:line="44" pos:column="19"/></operator> <name><name pos:line="44" pos:column="20">anEntry<pos:position pos:line="44" pos:column="27"/></name><operator pos:line="44" pos:column="27">-&gt;<pos:position pos:line="44" pos:column="32"/></operator><name pos:line="44" pos:column="29">swap_status<pos:position pos:line="44" pos:column="40"/></name></name> <operator pos:line="44" pos:column="41">!=<pos:position pos:line="44" pos:column="43"/></operator> <name pos:line="44" pos:column="44">SWAPOUT_WRITING<pos:position pos:line="44" pos:column="59"/></name></expr>)<pos:position pos:line="44" pos:column="60"/></condition><then pos:line="44" pos:column="60">
            <block type="pseudo"><return pos:line="45" pos:column="13">return <expr><literal type="boolean" pos:line="45" pos:column="20">false<pos:position pos:line="45" pos:column="25"/></literal></expr>;<pos:position pos:line="45" pos:column="26"/></return></block></then></if>

        <decl_stmt><decl><type><name pos:line="47" pos:column="9">int64_t<pos:position pos:line="47" pos:column="16"/></name></type> <name pos:line="47" pos:column="17">swapout_size<pos:position pos:line="47" pos:column="29"/></name> <init pos:line="47" pos:column="30">= <expr><call><name><name pos:line="47" pos:column="32">mem<pos:position pos:line="47" pos:column="35"/></name><operator pos:line="47" pos:column="35">-&gt;<pos:position pos:line="47" pos:column="40"/></operator><name pos:line="47" pos:column="37">endOffset<pos:position pos:line="47" pos:column="46"/></name></name><argument_list pos:line="47" pos:column="46">()<pos:position pos:line="47" pos:column="48"/></argument_list></call> <operator pos:line="47" pos:column="49">-<pos:position pos:line="47" pos:column="50"/></operator> <name><name pos:line="47" pos:column="51">mem<pos:position pos:line="47" pos:column="54"/></name><operator pos:line="47" pos:column="54">-&gt;<pos:position pos:line="47" pos:column="59"/></operator><name pos:line="47" pos:column="56">swapout<pos:position pos:line="47" pos:column="63"/></name><operator pos:line="47" pos:column="63">.<pos:position pos:line="47" pos:column="64"/></operator><name pos:line="47" pos:column="64">queue_offset<pos:position pos:line="47" pos:column="76"/></name></name></expr></init></decl>;<pos:position pos:line="47" pos:column="77"/></decl_stmt>

        <if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><name><name pos:line="49" pos:column="13">anEntry<pos:position pos:line="49" pos:column="20"/></name><operator pos:line="49" pos:column="20">-&gt;<pos:position pos:line="49" pos:column="25"/></operator><name pos:line="49" pos:column="22">store_status<pos:position pos:line="49" pos:column="34"/></name></name> <operator pos:line="49" pos:column="35">==<pos:position pos:line="49" pos:column="37"/></operator> <name pos:line="49" pos:column="38">STORE_PENDING<pos:position pos:line="49" pos:column="51"/></name></expr>)<pos:position pos:line="49" pos:column="52"/></condition><then pos:line="49" pos:column="52">
            <block type="pseudo"><if pos:line="50" pos:column="13">if <condition pos:line="50" pos:column="16">(<expr><name pos:line="50" pos:column="17">swapout_size<pos:position pos:line="50" pos:column="29"/></name> <operator pos:line="50" pos:column="30">&lt;<pos:position pos:line="50" pos:column="34"/></operator> <name pos:line="50" pos:column="32">SM_PAGE_SIZE<pos:position pos:line="50" pos:column="44"/></name></expr>)<pos:position pos:line="50" pos:column="45"/></condition><then pos:line="50" pos:column="45">
                <block type="pseudo"><break pos:line="51" pos:column="17">break;<pos:position pos:line="51" pos:column="23"/></break></block></then></if></block></then></if>

        <if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><name pos:line="53" pos:column="13">swapout_size<pos:position pos:line="53" pos:column="25"/></name> <operator pos:line="53" pos:column="26">&lt;=<pos:position pos:line="53" pos:column="31"/></operator> <literal type="number" pos:line="53" pos:column="29">0<pos:position pos:line="53" pos:column="30"/></literal></expr>)<pos:position pos:line="53" pos:column="31"/></condition><then pos:line="53" pos:column="31">
            <block type="pseudo"><break pos:line="54" pos:column="13">break;<pos:position pos:line="54" pos:column="19"/></break></block></then></if>
    }<pos:position pos:line="55" pos:column="6"/></block> while <condition pos:line="55" pos:column="13">(<expr><literal type="boolean" pos:line="55" pos:column="14">true<pos:position pos:line="55" pos:column="18"/></literal></expr>)<pos:position pos:line="55" pos:column="19"/></condition>;<pos:position pos:line="55" pos:column="20"/></do>

    <comment type="line" pos:line="57" pos:column="5">// either wait for more data or call swapOutFileClose()</comment>
    <return pos:line="58" pos:column="5">return <expr><literal type="boolean" pos:line="58" pos:column="12">true<pos:position pos:line="58" pos:column="16"/></literal></expr>;<pos:position pos:line="58" pos:column="17"/></return>
}<pos:position pos:line="59" pos:column="2"/></block></function></unit>
