<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3464_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">clientReplyContext<pos:position pos:line="2" pos:column="19"/></name><operator pos:line="2" pos:column="19">::<pos:position pos:line="2" pos:column="21"/></operator><name pos:line="2" pos:column="21">processExpired<pos:position pos:line="2" pos:column="35"/></name></name><parameter_list pos:line="2" pos:column="35">()<pos:position pos:line="2" pos:column="37"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">url<pos:position pos:line="4" pos:column="20"/></name> <init pos:line="4" pos:column="21">= <expr><call><name pos:line="4" pos:column="23">storeId<pos:position pos:line="4" pos:column="30"/></name><argument_list pos:line="4" pos:column="30">()<pos:position pos:line="4" pos:column="32"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">debugs<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><literal type="number" pos:line="5" pos:column="12">88<pos:position pos:line="5" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="16">3<pos:position pos:line="5" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="19">"clientReplyContext::processExpired: '"<pos:position pos:line="5" pos:column="58"/></literal> <operator pos:line="5" pos:column="59">&lt;&lt;<pos:position pos:line="5" pos:column="67"/></operator> <name><name pos:line="5" pos:column="62">http<pos:position pos:line="5" pos:column="66"/></name><operator pos:line="5" pos:column="66">-&gt;<pos:position pos:line="5" pos:column="71"/></operator><name pos:line="5" pos:column="68">uri<pos:position pos:line="5" pos:column="71"/></name></name> <operator pos:line="5" pos:column="72">&lt;&lt;<pos:position pos:line="5" pos:column="80"/></operator> <literal type="string" pos:line="5" pos:column="75">"'"<pos:position pos:line="5" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="80"/></expr_stmt>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">time_t<pos:position pos:line="6" pos:column="17"/></name></type> <name pos:line="6" pos:column="18">lastmod<pos:position pos:line="6" pos:column="25"/></name> <init pos:line="6" pos:column="26">= <expr><call><name><name pos:line="6" pos:column="28">http<pos:position pos:line="6" pos:column="32"/></name><operator pos:line="6" pos:column="32">-&gt;<pos:position pos:line="6" pos:column="37"/></operator><name pos:line="6" pos:column="34">storeEntry<pos:position pos:line="6" pos:column="44"/></name></name><argument_list pos:line="6" pos:column="44">()<pos:position pos:line="6" pos:column="46"/></argument_list></call><operator pos:line="6" pos:column="46">-&gt;<pos:position pos:line="6" pos:column="51"/></operator><call><name pos:line="6" pos:column="48">lastModified<pos:position pos:line="6" pos:column="60"/></name><argument_list pos:line="6" pos:column="60">()<pos:position pos:line="6" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="63"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><name pos:line="7" pos:column="12">lastmod<pos:position pos:line="7" pos:column="19"/></name> <operator pos:line="7" pos:column="20">&gt;=<pos:position pos:line="7" pos:column="25"/></operator> <literal type="number" pos:line="7" pos:column="23">0<pos:position pos:line="7" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="26"/></expr_stmt>
    <comment type="block" pos:line="8" pos:column="5">/*
     * check if we are allowed to contact other servers
     * @?@: Instead of a 504 (Gateway Timeout) reply, we may want to return
     *      a stale entry *if* it matches client requirements
     */</comment>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><call><name><name pos:line="14" pos:column="9">http<pos:position pos:line="14" pos:column="13"/></name><operator pos:line="14" pos:column="13">-&gt;<pos:position pos:line="14" pos:column="18"/></operator><name pos:line="14" pos:column="15">onlyIfCached<pos:position pos:line="14" pos:column="27"/></name></name><argument_list pos:line="14" pos:column="27">()<pos:position pos:line="14" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="30"/></condition><then pos:line="14" pos:column="30"> <block pos:line="14" pos:column="31">{
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">processOnlyIfCachedMiss<pos:position pos:line="15" pos:column="32"/></name><argument_list pos:line="15" pos:column="32">()<pos:position pos:line="15" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="35"/></expr_stmt>
        <return pos:line="16" pos:column="9">return;<pos:position pos:line="16" pos:column="16"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="19" pos:column="5">http<pos:position pos:line="19" pos:column="9"/></name><operator pos:line="19" pos:column="9">-&gt;<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="11">request<pos:position pos:line="19" pos:column="18"/></name><operator pos:line="19" pos:column="18">-&gt;<pos:position pos:line="19" pos:column="23"/></operator><name pos:line="19" pos:column="20">flags<pos:position pos:line="19" pos:column="25"/></name><operator pos:line="19" pos:column="25">.<pos:position pos:line="19" pos:column="26"/></operator><name pos:line="19" pos:column="26">refresh<pos:position pos:line="19" pos:column="33"/></name></name> <operator pos:line="19" pos:column="34">=<pos:position pos:line="19" pos:column="35"/></operator> <literal type="boolean" pos:line="19" pos:column="36">true<pos:position pos:line="19" pos:column="40"/></literal></expr>;<pos:position pos:line="19" pos:column="41"/></expr_stmt>
<cpp:if pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">if<pos:position pos:line="20" pos:column="4"/></cpp:directive> <expr><name pos:line="20" pos:column="5">STORE_CLIENT_LIST_DEBUG<pos:position pos:line="20" pos:column="28"/></name></expr></cpp:if>
    <comment type="block" pos:line="21" pos:column="5">/* Prevent a race with the store client memory free routines
     */</comment>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">assert<pos:position pos:line="23" pos:column="11"/></name><argument_list pos:line="23" pos:column="11">(<argument><expr><call><name pos:line="23" pos:column="12">storeClientIsThisAClient<pos:position pos:line="23" pos:column="36"/></name><argument_list pos:line="23" pos:column="36">(<argument><expr><name pos:line="23" pos:column="37">sc<pos:position pos:line="23" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="41">this<pos:position pos:line="23" pos:column="45"/></name></expr></argument>)<pos:position pos:line="23" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="48"/></expr_stmt>
<cpp:endif pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">endif<pos:position pos:line="24" pos:column="7"/></cpp:directive></cpp:endif>
    <comment type="block" pos:line="25" pos:column="5">/* Prepare to make a new temporary request */</comment>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">saveState<pos:position pos:line="26" pos:column="14"/></name><argument_list pos:line="26" pos:column="14">()<pos:position pos:line="26" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="17"/></expr_stmt>

    <comment type="line" pos:line="28" pos:column="5">// TODO: support collapsed revalidation of Vary-controlled entries</comment>
    <decl_stmt><decl><type><specifier pos:line="29" pos:column="5">const<pos:position pos:line="29" pos:column="10"/></specifier> <name pos:line="29" pos:column="11">bool<pos:position pos:line="29" pos:column="15"/></name></type> <name pos:line="29" pos:column="16">collapsingAllowed<pos:position pos:line="29" pos:column="33"/></name> <init pos:line="29" pos:column="34">= <expr><name><name pos:line="29" pos:column="36">Config<pos:position pos:line="29" pos:column="42"/></name><operator pos:line="29" pos:column="42">.<pos:position pos:line="29" pos:column="43"/></operator><name pos:line="29" pos:column="43">onoff<pos:position pos:line="29" pos:column="48"/></name><operator pos:line="29" pos:column="48">.<pos:position pos:line="29" pos:column="49"/></operator><name pos:line="29" pos:column="49">collapsed_forwarding<pos:position pos:line="29" pos:column="69"/></name></name> <operator pos:line="29" pos:column="70">&amp;&amp;<pos:position pos:line="29" pos:column="80"/></operator>
                                   <operator pos:line="30" pos:column="36">!<pos:position pos:line="30" pos:column="37"/></operator><call><name><name pos:line="30" pos:column="37">Store<pos:position pos:line="30" pos:column="42"/></name><operator pos:line="30" pos:column="42">::<pos:position pos:line="30" pos:column="44"/></operator><name pos:line="30" pos:column="44">Root<pos:position pos:line="30" pos:column="48"/></name></name><argument_list pos:line="30" pos:column="48">()<pos:position pos:line="30" pos:column="50"/></argument_list></call><operator pos:line="30" pos:column="50">.<pos:position pos:line="30" pos:column="51"/></operator><call><name pos:line="30" pos:column="51">smpAware<pos:position pos:line="30" pos:column="59"/></name><argument_list pos:line="30" pos:column="59">()<pos:position pos:line="30" pos:column="61"/></argument_list></call> <operator pos:line="30" pos:column="62">&amp;&amp;<pos:position pos:line="30" pos:column="72"/></operator>
                                   <call><name><name pos:line="31" pos:column="36">http<pos:position pos:line="31" pos:column="40"/></name><operator pos:line="31" pos:column="40">-&gt;<pos:position pos:line="31" pos:column="45"/></operator><name pos:line="31" pos:column="42">request<pos:position pos:line="31" pos:column="49"/></name><operator pos:line="31" pos:column="49">-&gt;<pos:position pos:line="31" pos:column="54"/></operator><name pos:line="31" pos:column="51">vary_headers<pos:position pos:line="31" pos:column="63"/></name><operator pos:line="31" pos:column="63">.<pos:position pos:line="31" pos:column="64"/></operator><name pos:line="31" pos:column="64">isEmpty<pos:position pos:line="31" pos:column="71"/></name></name><argument_list pos:line="31" pos:column="71">()<pos:position pos:line="31" pos:column="73"/></argument_list></call></expr></init></decl>;<pos:position pos:line="31" pos:column="74"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="33" pos:column="5">StoreEntry<pos:position pos:line="33" pos:column="15"/></name> <modifier pos:line="33" pos:column="16">*<pos:position pos:line="33" pos:column="17"/></modifier></type><name pos:line="33" pos:column="17">entry<pos:position pos:line="33" pos:column="22"/></name> <init pos:line="33" pos:column="23">= <expr><literal type="null" pos:line="33" pos:column="25">nullptr<pos:position pos:line="33" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="33" pos:column="33"/></decl_stmt>
    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">(<expr><name pos:line="34" pos:column="9">collapsingAllowed<pos:position pos:line="34" pos:column="26"/></name></expr>)<pos:position pos:line="34" pos:column="27"/></condition><then pos:line="34" pos:column="27"> <block pos:line="34" pos:column="28">{
        <if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><operator pos:line="35" pos:column="13">(<pos:position pos:line="35" pos:column="14"/></operator><name pos:line="35" pos:column="14">entry<pos:position pos:line="35" pos:column="19"/></name> <operator pos:line="35" pos:column="20">=<pos:position pos:line="35" pos:column="21"/></operator> <call><name pos:line="35" pos:column="22">storeGetPublicByRequest<pos:position pos:line="35" pos:column="45"/></name><argument_list pos:line="35" pos:column="45">(<argument><expr><name><name pos:line="35" pos:column="46">http<pos:position pos:line="35" pos:column="50"/></name><operator pos:line="35" pos:column="50">-&gt;<pos:position pos:line="35" pos:column="55"/></operator><name pos:line="35" pos:column="52">request<pos:position pos:line="35" pos:column="59"/></name></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="61">ksRevalidation<pos:position pos:line="35" pos:column="75"/></name></expr></argument>)<pos:position pos:line="35" pos:column="76"/></argument_list></call><operator pos:line="35" pos:column="76">)<pos:position pos:line="35" pos:column="77"/></operator></expr>)<pos:position pos:line="35" pos:column="78"/></condition><then pos:line="35" pos:column="78">
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="36" pos:column="13">entry<pos:position pos:line="36" pos:column="18"/></name><operator pos:line="36" pos:column="18">-&gt;<pos:position pos:line="36" pos:column="23"/></operator><name pos:line="36" pos:column="20">lock<pos:position pos:line="36" pos:column="24"/></name></name><argument_list pos:line="36" pos:column="24">(<argument><expr><literal type="string" pos:line="36" pos:column="25">"clientReplyContext::processExpired#alreadyRevalidating"<pos:position pos:line="36" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="83"/></expr_stmt></block></then></if>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if>

    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><name pos:line="39" pos:column="9">entry<pos:position pos:line="39" pos:column="14"/></name></expr>)<pos:position pos:line="39" pos:column="15"/></condition><then pos:line="39" pos:column="15"> <block pos:line="39" pos:column="16">{
        <expr_stmt><expr><call><name pos:line="40" pos:column="9">debugs<pos:position pos:line="40" pos:column="15"/></name><argument_list pos:line="40" pos:column="15">(<argument><expr><literal type="number" pos:line="40" pos:column="16">88<pos:position pos:line="40" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="20">5<pos:position pos:line="40" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="23">"collapsed on existing revalidation entry: "<pos:position pos:line="40" pos:column="67"/></literal> <operator pos:line="40" pos:column="68">&lt;&lt;<pos:position pos:line="40" pos:column="76"/></operator> <operator pos:line="40" pos:column="71">*<pos:position pos:line="40" pos:column="72"/></operator><name pos:line="40" pos:column="72">entry<pos:position pos:line="40" pos:column="77"/></name></expr></argument>)<pos:position pos:line="40" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="79"/></expr_stmt>
        <expr_stmt><expr><name pos:line="41" pos:column="9">collapsedRevalidation<pos:position pos:line="41" pos:column="30"/></name> <operator pos:line="41" pos:column="31">=<pos:position pos:line="41" pos:column="32"/></operator> <name pos:line="41" pos:column="33">crSlave<pos:position pos:line="41" pos:column="40"/></name></expr>;<pos:position pos:line="41" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="42" pos:column="6"/></block></then> <else pos:line="42" pos:column="7">else <block pos:line="42" pos:column="12">{
        <expr_stmt><expr><name pos:line="43" pos:column="9">entry<pos:position pos:line="43" pos:column="14"/></name> <operator pos:line="43" pos:column="15">=<pos:position pos:line="43" pos:column="16"/></operator> <call><name pos:line="43" pos:column="17">storeCreateEntry<pos:position pos:line="43" pos:column="33"/></name><argument_list pos:line="43" pos:column="33">(<argument><expr><name pos:line="43" pos:column="34">url<pos:position pos:line="43" pos:column="37"/></name></expr></argument>,
                                 <argument><expr><name><name pos:line="44" pos:column="34">http<pos:position pos:line="44" pos:column="38"/></name><operator pos:line="44" pos:column="38">-&gt;<pos:position pos:line="44" pos:column="43"/></operator><name pos:line="44" pos:column="40">log_uri<pos:position pos:line="44" pos:column="47"/></name></name></expr></argument>, <argument><expr><name><name pos:line="44" pos:column="49">http<pos:position pos:line="44" pos:column="53"/></name><operator pos:line="44" pos:column="53">-&gt;<pos:position pos:line="44" pos:column="58"/></operator><name pos:line="44" pos:column="55">request<pos:position pos:line="44" pos:column="62"/></name><operator pos:line="44" pos:column="62">-&gt;<pos:position pos:line="44" pos:column="67"/></operator><name pos:line="44" pos:column="64">flags<pos:position pos:line="44" pos:column="69"/></name></name></expr></argument>, <argument><expr><name><name pos:line="44" pos:column="71">http<pos:position pos:line="44" pos:column="75"/></name><operator pos:line="44" pos:column="75">-&gt;<pos:position pos:line="44" pos:column="80"/></operator><name pos:line="44" pos:column="77">request<pos:position pos:line="44" pos:column="84"/></name><operator pos:line="44" pos:column="84">-&gt;<pos:position pos:line="44" pos:column="89"/></operator><name pos:line="44" pos:column="86">method<pos:position pos:line="44" pos:column="92"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="94"/></expr_stmt>
        <comment type="block" pos:line="45" pos:column="9">/* NOTE, don't call StoreEntry-&gt;lock(), storeCreateEntry() does it */</comment>

        <if pos:line="47" pos:column="9">if <condition pos:line="47" pos:column="12">(<expr><name pos:line="47" pos:column="13">collapsingAllowed<pos:position pos:line="47" pos:column="30"/></name></expr>)<pos:position pos:line="47" pos:column="31"/></condition><then pos:line="47" pos:column="31"> <block pos:line="47" pos:column="32">{
            <expr_stmt><expr><call><name pos:line="48" pos:column="13">debugs<pos:position pos:line="48" pos:column="19"/></name><argument_list pos:line="48" pos:column="19">(<argument><expr><literal type="number" pos:line="48" pos:column="20">88<pos:position pos:line="48" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="48" pos:column="24">5<pos:position pos:line="48" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="27">"allow other revalidation requests to collapse on "<pos:position pos:line="48" pos:column="78"/></literal> <operator pos:line="48" pos:column="79">&lt;&lt;<pos:position pos:line="48" pos:column="87"/></operator> <operator pos:line="48" pos:column="82">*<pos:position pos:line="48" pos:column="83"/></operator><name pos:line="48" pos:column="83">entry<pos:position pos:line="48" pos:column="88"/></name></expr></argument>)<pos:position pos:line="48" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="90"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="49" pos:column="13">Store<pos:position pos:line="49" pos:column="18"/></name><operator pos:line="49" pos:column="18">::<pos:position pos:line="49" pos:column="20"/></operator><name pos:line="49" pos:column="20">Root<pos:position pos:line="49" pos:column="24"/></name></name><argument_list pos:line="49" pos:column="24">()<pos:position pos:line="49" pos:column="26"/></argument_list></call><operator pos:line="49" pos:column="26">.<pos:position pos:line="49" pos:column="27"/></operator><call><name pos:line="49" pos:column="27">allowCollapsing<pos:position pos:line="49" pos:column="42"/></name><argument_list pos:line="49" pos:column="42">(<argument><expr><name pos:line="49" pos:column="43">entry<pos:position pos:line="49" pos:column="48"/></name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="50">http<pos:position pos:line="49" pos:column="54"/></name><operator pos:line="49" pos:column="54">-&gt;<pos:position pos:line="49" pos:column="59"/></operator><name pos:line="49" pos:column="56">request<pos:position pos:line="49" pos:column="63"/></name><operator pos:line="49" pos:column="63">-&gt;<pos:position pos:line="49" pos:column="68"/></operator><name pos:line="49" pos:column="65">flags<pos:position pos:line="49" pos:column="70"/></name></name></expr></argument>,
                                          <argument><expr><name><name pos:line="50" pos:column="43">http<pos:position pos:line="50" pos:column="47"/></name><operator pos:line="50" pos:column="47">-&gt;<pos:position pos:line="50" pos:column="52"/></operator><name pos:line="50" pos:column="49">request<pos:position pos:line="50" pos:column="56"/></name><operator pos:line="50" pos:column="56">-&gt;<pos:position pos:line="50" pos:column="61"/></operator><name pos:line="50" pos:column="58">method<pos:position pos:line="50" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="66"/></expr_stmt>
            <expr_stmt><expr><name pos:line="51" pos:column="13">collapsedRevalidation<pos:position pos:line="51" pos:column="34"/></name> <operator pos:line="51" pos:column="35">=<pos:position pos:line="51" pos:column="36"/></operator> <name pos:line="51" pos:column="37">crInitiator<pos:position pos:line="51" pos:column="48"/></name></expr>;<pos:position pos:line="51" pos:column="49"/></expr_stmt>
        }<pos:position pos:line="52" pos:column="10"/></block></then> <else pos:line="52" pos:column="11">else <block pos:line="52" pos:column="16">{
            <expr_stmt><expr><name pos:line="53" pos:column="13">collapsedRevalidation<pos:position pos:line="53" pos:column="34"/></name> <operator pos:line="53" pos:column="35">=<pos:position pos:line="53" pos:column="36"/></operator> <name pos:line="53" pos:column="37">crNone<pos:position pos:line="53" pos:column="43"/></name></expr>;<pos:position pos:line="53" pos:column="44"/></expr_stmt>
        }<pos:position pos:line="54" pos:column="10"/></block></else></if>
    }<pos:position pos:line="55" pos:column="6"/></block></else></if>

    <expr_stmt><expr><name pos:line="57" pos:column="5">sc<pos:position pos:line="57" pos:column="7"/></name> <operator pos:line="57" pos:column="8">=<pos:position pos:line="57" pos:column="9"/></operator> <call><name pos:line="57" pos:column="10">storeClientListAdd<pos:position pos:line="57" pos:column="28"/></name><argument_list pos:line="57" pos:column="28">(<argument><expr><name pos:line="57" pos:column="29">entry<pos:position pos:line="57" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="36">this<pos:position pos:line="57" pos:column="40"/></name></expr></argument>)<pos:position pos:line="57" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="42"/></expr_stmt>
<cpp:if pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">if<pos:position pos:line="58" pos:column="4"/></cpp:directive> <expr><name pos:line="58" pos:column="5">USE_DELAY_POOLS<pos:position pos:line="58" pos:column="20"/></name></expr></cpp:if>
    <comment type="block" pos:line="59" pos:column="5">/* delay_id is already set on original store client */</comment>
    <expr_stmt><expr><call><name><name pos:line="60" pos:column="5">sc<pos:position pos:line="60" pos:column="7"/></name><operator pos:line="60" pos:column="7">-&gt;<pos:position pos:line="60" pos:column="12"/></operator><name pos:line="60" pos:column="9">setDelayId<pos:position pos:line="60" pos:column="19"/></name></name><argument_list pos:line="60" pos:column="19">(<argument><expr><call><name><name pos:line="60" pos:column="20">DelayId<pos:position pos:line="60" pos:column="27"/></name><operator pos:line="60" pos:column="27">::<pos:position pos:line="60" pos:column="29"/></operator><name pos:line="60" pos:column="29">DelayClient<pos:position pos:line="60" pos:column="40"/></name></name><argument_list pos:line="60" pos:column="40">(<argument><expr><name pos:line="60" pos:column="41">http<pos:position pos:line="60" pos:column="45"/></name></expr></argument>)<pos:position pos:line="60" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="60" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="48"/></expr_stmt>
<cpp:endif pos:line="61" pos:column="1">#<cpp:directive pos:line="61" pos:column="2">endif<pos:position pos:line="61" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><name><name pos:line="63" pos:column="5">http<pos:position pos:line="63" pos:column="9"/></name><operator pos:line="63" pos:column="9">-&gt;<pos:position pos:line="63" pos:column="14"/></operator><name pos:line="63" pos:column="11">request<pos:position pos:line="63" pos:column="18"/></name><operator pos:line="63" pos:column="18">-&gt;<pos:position pos:line="63" pos:column="23"/></operator><name pos:line="63" pos:column="20">lastmod<pos:position pos:line="63" pos:column="27"/></name></name> <operator pos:line="63" pos:column="28">=<pos:position pos:line="63" pos:column="29"/></operator> <name pos:line="63" pos:column="30">lastmod<pos:position pos:line="63" pos:column="37"/></name></expr>;<pos:position pos:line="63" pos:column="38"/></expr_stmt>

    <if pos:line="65" pos:column="5">if <condition pos:line="65" pos:column="8">(<expr><operator pos:line="65" pos:column="9">!<pos:position pos:line="65" pos:column="10"/></operator><call><name><name pos:line="65" pos:column="10">http<pos:position pos:line="65" pos:column="14"/></name><operator pos:line="65" pos:column="14">-&gt;<pos:position pos:line="65" pos:column="19"/></operator><name pos:line="65" pos:column="16">request<pos:position pos:line="65" pos:column="23"/></name><operator pos:line="65" pos:column="23">-&gt;<pos:position pos:line="65" pos:column="28"/></operator><name pos:line="65" pos:column="25">header<pos:position pos:line="65" pos:column="31"/></name><operator pos:line="65" pos:column="31">.<pos:position pos:line="65" pos:column="32"/></operator><name pos:line="65" pos:column="32">has<pos:position pos:line="65" pos:column="35"/></name></name><argument_list pos:line="65" pos:column="35">(<argument><expr><name pos:line="65" pos:column="36">HDR_IF_NONE_MATCH<pos:position pos:line="65" pos:column="53"/></name></expr></argument>)<pos:position pos:line="65" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="65" pos:column="55"/></condition><then pos:line="65" pos:column="55"> <block pos:line="65" pos:column="56">{
        <decl_stmt><decl><type><name pos:line="66" pos:column="9">ETag<pos:position pos:line="66" pos:column="13"/></name></type> <name pos:line="66" pos:column="14">etag<pos:position pos:line="66" pos:column="18"/></name> <init pos:line="66" pos:column="19">= <expr><block pos:line="66" pos:column="21">{<expr><name pos:line="66" pos:column="22">NULL<pos:position pos:line="66" pos:column="26"/></name></expr>, <expr><operator pos:line="66" pos:column="28">-<pos:position pos:line="66" pos:column="29"/></operator><literal type="number" pos:line="66" pos:column="29">1<pos:position pos:line="66" pos:column="30"/></literal></expr>}<pos:position pos:line="66" pos:column="31"/></block></expr></init></decl>;<pos:position pos:line="66" pos:column="32"/></decl_stmt> <comment type="line" pos:line="66" pos:column="33">// TODO: make that a default ETag constructor</comment>
        <if pos:line="67" pos:column="9">if <condition pos:line="67" pos:column="12">(<expr><call><name><name pos:line="67" pos:column="13">old_entry<pos:position pos:line="67" pos:column="22"/></name><operator pos:line="67" pos:column="22">-&gt;<pos:position pos:line="67" pos:column="27"/></operator><name pos:line="67" pos:column="24">hasEtag<pos:position pos:line="67" pos:column="31"/></name></name><argument_list pos:line="67" pos:column="31">(<argument><expr><name pos:line="67" pos:column="32">etag<pos:position pos:line="67" pos:column="36"/></name></expr></argument>)<pos:position pos:line="67" pos:column="37"/></argument_list></call> <operator pos:line="67" pos:column="38">&amp;&amp;<pos:position pos:line="67" pos:column="48"/></operator> <operator pos:line="67" pos:column="41">!<pos:position pos:line="67" pos:column="42"/></operator><name><name pos:line="67" pos:column="42">etag<pos:position pos:line="67" pos:column="46"/></name><operator pos:line="67" pos:column="46">.<pos:position pos:line="67" pos:column="47"/></operator><name pos:line="67" pos:column="47">weak<pos:position pos:line="67" pos:column="51"/></name></name></expr>)<pos:position pos:line="67" pos:column="52"/></condition><then pos:line="67" pos:column="52">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="68" pos:column="13">http<pos:position pos:line="68" pos:column="17"/></name><operator pos:line="68" pos:column="17">-&gt;<pos:position pos:line="68" pos:column="22"/></operator><name pos:line="68" pos:column="19">request<pos:position pos:line="68" pos:column="26"/></name><operator pos:line="68" pos:column="26">-&gt;<pos:position pos:line="68" pos:column="31"/></operator><name pos:line="68" pos:column="28">etag<pos:position pos:line="68" pos:column="32"/></name></name> <operator pos:line="68" pos:column="33">=<pos:position pos:line="68" pos:column="34"/></operator> <name><name pos:line="68" pos:column="35">etag<pos:position pos:line="68" pos:column="39"/></name><operator pos:line="68" pos:column="39">.<pos:position pos:line="68" pos:column="40"/></operator><name pos:line="68" pos:column="40">str<pos:position pos:line="68" pos:column="43"/></name></name></expr>;<pos:position pos:line="68" pos:column="44"/></expr_stmt></block></then></if>
    }<pos:position pos:line="69" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="71" pos:column="5">debugs<pos:position pos:line="71" pos:column="11"/></name><argument_list pos:line="71" pos:column="11">(<argument><expr><literal type="number" pos:line="71" pos:column="12">88<pos:position pos:line="71" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="71" pos:column="16">5<pos:position pos:line="71" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="71" pos:column="19">"lastmod "<pos:position pos:line="71" pos:column="29"/></literal> <operator pos:line="71" pos:column="30">&lt;&lt;<pos:position pos:line="71" pos:column="38"/></operator> <call><name><name pos:line="71" pos:column="33">entry<pos:position pos:line="71" pos:column="38"/></name><operator pos:line="71" pos:column="38">-&gt;<pos:position pos:line="71" pos:column="43"/></operator><name pos:line="71" pos:column="40">lastModified<pos:position pos:line="71" pos:column="52"/></name></name><argument_list pos:line="71" pos:column="52">()<pos:position pos:line="71" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="71" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="56"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="72" pos:column="5">http<pos:position pos:line="72" pos:column="9"/></name><operator pos:line="72" pos:column="9">-&gt;<pos:position pos:line="72" pos:column="14"/></operator><name pos:line="72" pos:column="11">storeEntry<pos:position pos:line="72" pos:column="21"/></name></name><argument_list pos:line="72" pos:column="21">(<argument><expr><name pos:line="72" pos:column="22">entry<pos:position pos:line="72" pos:column="27"/></name></expr></argument>)<pos:position pos:line="72" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="73" pos:column="5">assert<pos:position pos:line="73" pos:column="11"/></name><argument_list pos:line="73" pos:column="11">(<argument><expr><name><name pos:line="73" pos:column="12">http<pos:position pos:line="73" pos:column="16"/></name><operator pos:line="73" pos:column="16">-&gt;<pos:position pos:line="73" pos:column="21"/></operator><name pos:line="73" pos:column="18">out<pos:position pos:line="73" pos:column="21"/></name><operator pos:line="73" pos:column="21">.<pos:position pos:line="73" pos:column="22"/></operator><name pos:line="73" pos:column="22">offset<pos:position pos:line="73" pos:column="28"/></name></name> <operator pos:line="73" pos:column="29">==<pos:position pos:line="73" pos:column="31"/></operator> <literal type="number" pos:line="73" pos:column="32">0<pos:position pos:line="73" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="74" pos:column="5">assert<pos:position pos:line="74" pos:column="11"/></name><argument_list pos:line="74" pos:column="11">(<argument><expr><name><name pos:line="74" pos:column="12">http<pos:position pos:line="74" pos:column="16"/></name><operator pos:line="74" pos:column="16">-&gt;<pos:position pos:line="74" pos:column="21"/></operator><name pos:line="74" pos:column="18">request<pos:position pos:line="74" pos:column="25"/></name><operator pos:line="74" pos:column="25">-&gt;<pos:position pos:line="74" pos:column="30"/></operator><name pos:line="74" pos:column="27">clientConnectionManager<pos:position pos:line="74" pos:column="50"/></name></name> <operator pos:line="74" pos:column="51">==<pos:position pos:line="74" pos:column="53"/></operator> <call><name><name pos:line="74" pos:column="54">http<pos:position pos:line="74" pos:column="58"/></name><operator pos:line="74" pos:column="58">-&gt;<pos:position pos:line="74" pos:column="63"/></operator><name pos:line="74" pos:column="60">getConn<pos:position pos:line="74" pos:column="67"/></name></name><argument_list pos:line="74" pos:column="67">()<pos:position pos:line="74" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="74" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="71"/></expr_stmt>

    <if pos:line="76" pos:column="5">if <condition pos:line="76" pos:column="8">(<expr><name pos:line="76" pos:column="9">collapsedRevalidation<pos:position pos:line="76" pos:column="30"/></name> <operator pos:line="76" pos:column="31">!=<pos:position pos:line="76" pos:column="33"/></operator> <name pos:line="76" pos:column="34">crSlave<pos:position pos:line="76" pos:column="41"/></name></expr>)<pos:position pos:line="76" pos:column="42"/></condition><then pos:line="76" pos:column="42"> <block pos:line="76" pos:column="43">{
        <comment type="block" pos:line="77" pos:column="9">/*
         * A refcounted pointer so that FwdState stays around as long as
         * this clientReplyContext does
         */</comment>
        <decl_stmt><decl><type><name><name pos:line="81" pos:column="9">Comm<pos:position pos:line="81" pos:column="13"/></name><operator pos:line="81" pos:column="13">::<pos:position pos:line="81" pos:column="15"/></operator><name pos:line="81" pos:column="15">ConnectionPointer<pos:position pos:line="81" pos:column="32"/></name></name></type> <name pos:line="81" pos:column="33">conn<pos:position pos:line="81" pos:column="37"/></name> <init pos:line="81" pos:column="38">= <expr><ternary><condition><expr><call><name><name pos:line="81" pos:column="40">http<pos:position pos:line="81" pos:column="44"/></name><operator pos:line="81" pos:column="44">-&gt;<pos:position pos:line="81" pos:column="49"/></operator><name pos:line="81" pos:column="46">getConn<pos:position pos:line="81" pos:column="53"/></name></name><argument_list pos:line="81" pos:column="53">()<pos:position pos:line="81" pos:column="55"/></argument_list></call> <operator pos:line="81" pos:column="56">!=<pos:position pos:line="81" pos:column="58"/></operator> <name pos:line="81" pos:column="59">NULL<pos:position pos:line="81" pos:column="63"/></name></expr> ?<pos:position pos:line="81" pos:column="65"/></condition><then pos:line="81" pos:column="65"> <expr><call><name><name pos:line="81" pos:column="66">http<pos:position pos:line="81" pos:column="70"/></name><operator pos:line="81" pos:column="70">-&gt;<pos:position pos:line="81" pos:column="75"/></operator><name pos:line="81" pos:column="72">getConn<pos:position pos:line="81" pos:column="79"/></name></name><argument_list pos:line="81" pos:column="79">()<pos:position pos:line="81" pos:column="81"/></argument_list></call><operator pos:line="81" pos:column="81">-&gt;<pos:position pos:line="81" pos:column="86"/></operator><name pos:line="81" pos:column="83">clientConnection<pos:position pos:line="81" pos:column="99"/></name></expr> <pos:position pos:line="81" pos:column="100"/></then><else pos:line="81" pos:column="100">: <expr><name pos:line="81" pos:column="102">NULL<pos:position pos:line="81" pos:column="106"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="81" pos:column="107"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="82" pos:column="9">FwdState<pos:position pos:line="82" pos:column="17"/></name><operator pos:line="82" pos:column="17">::<pos:position pos:line="82" pos:column="19"/></operator><name pos:line="82" pos:column="19">Start<pos:position pos:line="82" pos:column="24"/></name></name><argument_list pos:line="82" pos:column="24">(<argument><expr><name pos:line="82" pos:column="25">conn<pos:position pos:line="82" pos:column="29"/></name></expr></argument>, <argument><expr><call><name><name pos:line="82" pos:column="31">http<pos:position pos:line="82" pos:column="35"/></name><operator pos:line="82" pos:column="35">-&gt;<pos:position pos:line="82" pos:column="40"/></operator><name pos:line="82" pos:column="37">storeEntry<pos:position pos:line="82" pos:column="47"/></name></name><argument_list pos:line="82" pos:column="47">()<pos:position pos:line="82" pos:column="49"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="82" pos:column="51">http<pos:position pos:line="82" pos:column="55"/></name><operator pos:line="82" pos:column="55">-&gt;<pos:position pos:line="82" pos:column="60"/></operator><name pos:line="82" pos:column="57">request<pos:position pos:line="82" pos:column="64"/></name></name></expr></argument>, <argument><expr><name><name pos:line="82" pos:column="66">http<pos:position pos:line="82" pos:column="70"/></name><operator pos:line="82" pos:column="70">-&gt;<pos:position pos:line="82" pos:column="75"/></operator><name pos:line="82" pos:column="72">al<pos:position pos:line="82" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="82" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="76"/></expr_stmt>
    }<pos:position pos:line="83" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="85" pos:column="5">/* Register with storage manager to receive updates when data comes in. */</comment>

    <if pos:line="87" pos:column="5">if <condition pos:line="87" pos:column="8">(<expr><call><name pos:line="87" pos:column="9">EBIT_TEST<pos:position pos:line="87" pos:column="18"/></name><argument_list pos:line="87" pos:column="18">(<argument><expr><name><name pos:line="87" pos:column="19">entry<pos:position pos:line="87" pos:column="24"/></name><operator pos:line="87" pos:column="24">-&gt;<pos:position pos:line="87" pos:column="29"/></operator><name pos:line="87" pos:column="26">flags<pos:position pos:line="87" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="33">ENTRY_ABORTED<pos:position pos:line="87" pos:column="46"/></name></expr></argument>)<pos:position pos:line="87" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="87" pos:column="48"/></condition><then pos:line="87" pos:column="48">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="88" pos:column="9">debugs<pos:position pos:line="88" pos:column="15"/></name><argument_list pos:line="88" pos:column="15">(<argument><expr><literal type="number" pos:line="88" pos:column="16">88<pos:position pos:line="88" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="88" pos:column="20">DBG_CRITICAL<pos:position pos:line="88" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="88" pos:column="34">"clientReplyContext::processExpired: Found ENTRY_ABORTED object"<pos:position pos:line="88" pos:column="98"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="99"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="100"/></expr_stmt></block></then></if>

    <block pos:line="90" pos:column="5">{
        <comment type="block" pos:line="91" pos:column="9">/* start counting the length from 0 */</comment>
        <decl_stmt><decl><type><name pos:line="92" pos:column="9">StoreIOBuffer<pos:position pos:line="92" pos:column="22"/></name></type> <name pos:line="92" pos:column="23">localTempBuffer<pos:position pos:line="92" pos:column="38"/></name><argument_list pos:line="92" pos:column="38">(<argument><expr><name pos:line="92" pos:column="39">HTTP_REQBUF_SZ<pos:position pos:line="92" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="92" pos:column="55">0<pos:position pos:line="92" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="92" pos:column="58">tempbuf<pos:position pos:line="92" pos:column="65"/></name></expr></argument>)<pos:position pos:line="92" pos:column="66"/></argument_list></decl>;<pos:position pos:line="92" pos:column="67"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="93" pos:column="9">storeClientCopy<pos:position pos:line="93" pos:column="24"/></name><argument_list pos:line="93" pos:column="24">(<argument><expr><name pos:line="93" pos:column="25">sc<pos:position pos:line="93" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="29">entry<pos:position pos:line="93" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="36">localTempBuffer<pos:position pos:line="93" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="53">HandleIMSReply<pos:position pos:line="93" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="69">this<pos:position pos:line="93" pos:column="73"/></name></expr></argument>)<pos:position pos:line="93" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="75"/></expr_stmt>
    }<pos:position pos:line="94" pos:column="6"/></block>
}<pos:position pos:line="95" pos:column="2"/></block></function></unit>
