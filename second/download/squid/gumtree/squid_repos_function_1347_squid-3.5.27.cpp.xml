<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1347_squid-3.5.27.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">peerGetSomeNeighborReplies<pos:position pos:line="2" pos:column="27"/></name><parameter_list pos:line="2" pos:column="27">(<parameter><decl><type><name pos:line="2" pos:column="28">ps_state<pos:position pos:line="2" pos:column="36"/></name> <modifier pos:line="2" pos:column="37">*<pos:position pos:line="2" pos:column="38"/></modifier></type> <name pos:line="2" pos:column="39">ps<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="42"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">HttpRequest<pos:position pos:line="4" pos:column="16"/></name> <modifier pos:line="4" pos:column="17">*<pos:position pos:line="4" pos:column="18"/></modifier></type><name pos:line="4" pos:column="18">request<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><name><name pos:line="4" pos:column="28">ps<pos:position pos:line="4" pos:column="30"/></name><operator pos:line="4" pos:column="30">-&gt;<pos:position pos:line="4" pos:column="35"/></operator><name pos:line="4" pos:column="32">request<pos:position pos:line="4" pos:column="39"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="40"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">CachePeer<pos:position pos:line="5" pos:column="14"/></name> <modifier pos:line="5" pos:column="15">*<pos:position pos:line="5" pos:column="16"/></modifier></type><name pos:line="5" pos:column="16">p<pos:position pos:line="5" pos:column="17"/></name> <init pos:line="5" pos:column="18">= <expr><name pos:line="5" pos:column="20">NULL<pos:position pos:line="5" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">hier_code<pos:position pos:line="6" pos:column="14"/></name></type> <name pos:line="6" pos:column="15">code<pos:position pos:line="6" pos:column="19"/></name> <init pos:line="6" pos:column="20">= <expr><name pos:line="6" pos:column="22">HIER_NONE<pos:position pos:line="6" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="32"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><name><name pos:line="7" pos:column="12">ps<pos:position pos:line="7" pos:column="14"/></name><operator pos:line="7" pos:column="14">-&gt;<pos:position pos:line="7" pos:column="19"/></operator><name pos:line="7" pos:column="16">entry<pos:position pos:line="7" pos:column="21"/></name><operator pos:line="7" pos:column="21">-&gt;<pos:position pos:line="7" pos:column="26"/></operator><name pos:line="7" pos:column="23">ping_status<pos:position pos:line="7" pos:column="34"/></name></name> <operator pos:line="7" pos:column="35">==<pos:position pos:line="7" pos:column="37"/></operator> <name pos:line="7" pos:column="38">PING_WAITING<pos:position pos:line="7" pos:column="50"/></name></expr></argument>)<pos:position pos:line="7" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">assert<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><name><name pos:line="8" pos:column="12">ps<pos:position pos:line="8" pos:column="14"/></name><operator pos:line="8" pos:column="14">-&gt;<pos:position pos:line="8" pos:column="19"/></operator><name pos:line="8" pos:column="16">direct<pos:position pos:line="8" pos:column="22"/></name></name> <operator pos:line="8" pos:column="23">!=<pos:position pos:line="8" pos:column="25"/></operator> <name pos:line="8" pos:column="26">DIRECT_YES<pos:position pos:line="8" pos:column="36"/></name></expr></argument>)<pos:position pos:line="8" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="38"/></expr_stmt>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><call><name pos:line="10" pos:column="9">peerCheckNetdbDirect<pos:position pos:line="10" pos:column="29"/></name><argument_list pos:line="10" pos:column="29">(<argument><expr><name pos:line="10" pos:column="30">ps<pos:position pos:line="10" pos:column="32"/></name></expr></argument>)<pos:position pos:line="10" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="34"/></condition><then pos:line="10" pos:column="34"> <block pos:line="10" pos:column="35">{
        <expr_stmt><expr><name pos:line="11" pos:column="9">code<pos:position pos:line="11" pos:column="13"/></name> <operator pos:line="11" pos:column="14">=<pos:position pos:line="11" pos:column="15"/></operator> <name pos:line="11" pos:column="16">CLOSEST_DIRECT<pos:position pos:line="11" pos:column="30"/></name></expr>;<pos:position pos:line="11" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">debugs<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><literal type="number" pos:line="12" pos:column="16">44<pos:position pos:line="12" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="20">3<pos:position pos:line="12" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="23">"peerSelect: "<pos:position pos:line="12" pos:column="37"/></literal> <operator pos:line="12" pos:column="38">&lt;&lt;<pos:position pos:line="12" pos:column="46"/></operator> <name><name pos:line="12" pos:column="41">hier_code_str<pos:position pos:line="12" pos:column="54"/></name><index pos:line="12" pos:column="54">[<expr><name pos:line="12" pos:column="55">code<pos:position pos:line="12" pos:column="59"/></name></expr>]<pos:position pos:line="12" pos:column="60"/></index></name> <operator pos:line="12" pos:column="61">&lt;&lt;<pos:position pos:line="12" pos:column="69"/></operator> <literal type="string" pos:line="12" pos:column="64">"/"<pos:position pos:line="12" pos:column="67"/></literal> <operator pos:line="12" pos:column="68">&lt;&lt;<pos:position pos:line="12" pos:column="76"/></operator> <call><name><name pos:line="12" pos:column="71">request<pos:position pos:line="12" pos:column="78"/></name><operator pos:line="12" pos:column="78">-&gt;<pos:position pos:line="12" pos:column="83"/></operator><name pos:line="12" pos:column="80">GetHost<pos:position pos:line="12" pos:column="87"/></name></name><argument_list pos:line="12" pos:column="87">()<pos:position pos:line="12" pos:column="89"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="91"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">peerAddFwdServer<pos:position pos:line="13" pos:column="25"/></name><argument_list pos:line="13" pos:column="25">(<argument><expr><operator pos:line="13" pos:column="26">&amp;<pos:position pos:line="13" pos:column="31"/></operator><name><name pos:line="13" pos:column="27">ps<pos:position pos:line="13" pos:column="29"/></name><operator pos:line="13" pos:column="29">-&gt;<pos:position pos:line="13" pos:column="34"/></operator><name pos:line="13" pos:column="31">servers<pos:position pos:line="13" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="40">NULL<pos:position pos:line="13" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="46">code<pos:position pos:line="13" pos:column="50"/></name></expr></argument>)<pos:position pos:line="13" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="52"/></expr_stmt>
        <return pos:line="14" pos:column="9">return;<pos:position pos:line="14" pos:column="16"/></return>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>

    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><operator pos:line="17" pos:column="9">(<pos:position pos:line="17" pos:column="10"/></operator><name pos:line="17" pos:column="10">p<pos:position pos:line="17" pos:column="11"/></name> <operator pos:line="17" pos:column="12">=<pos:position pos:line="17" pos:column="13"/></operator> <name><name pos:line="17" pos:column="14">ps<pos:position pos:line="17" pos:column="16"/></name><operator pos:line="17" pos:column="16">-&gt;<pos:position pos:line="17" pos:column="21"/></operator><name pos:line="17" pos:column="18">hit<pos:position pos:line="17" pos:column="21"/></name></name><operator pos:line="17" pos:column="21">)<pos:position pos:line="17" pos:column="22"/></operator></expr>)<pos:position pos:line="17" pos:column="23"/></condition><then pos:line="17" pos:column="23"> <block pos:line="17" pos:column="24">{
        <expr_stmt><expr><name pos:line="18" pos:column="9">code<pos:position pos:line="18" pos:column="13"/></name> <operator pos:line="18" pos:column="14">=<pos:position pos:line="18" pos:column="15"/></operator> <ternary><condition><expr><name><name pos:line="18" pos:column="16">ps<pos:position pos:line="18" pos:column="18"/></name><operator pos:line="18" pos:column="18">-&gt;<pos:position pos:line="18" pos:column="23"/></operator><name pos:line="18" pos:column="20">hit_type<pos:position pos:line="18" pos:column="28"/></name></name> <operator pos:line="18" pos:column="29">==<pos:position pos:line="18" pos:column="31"/></operator> <name pos:line="18" pos:column="32">PEER_PARENT<pos:position pos:line="18" pos:column="43"/></name></expr> ?<pos:position pos:line="18" pos:column="45"/></condition><then pos:line="18" pos:column="45"> <expr><name pos:line="18" pos:column="46">PARENT_HIT<pos:position pos:line="18" pos:column="56"/></name></expr> <pos:position pos:line="18" pos:column="57"/></then><else pos:line="18" pos:column="57">: <expr><name pos:line="18" pos:column="59">SIBLING_HIT<pos:position pos:line="18" pos:column="70"/></name></expr></else></ternary></expr>;<pos:position pos:line="18" pos:column="71"/></expr_stmt>
    }<pos:position pos:line="19" pos:column="6"/></block></then> <else pos:line="19" pos:column="7">else <block pos:line="19" pos:column="12">{
        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><operator pos:line="20" pos:column="13">!<pos:position pos:line="20" pos:column="14"/></operator><call><name><name pos:line="20" pos:column="14">ps<pos:position pos:line="20" pos:column="16"/></name><operator pos:line="20" pos:column="16">-&gt;<pos:position pos:line="20" pos:column="21"/></operator><name pos:line="20" pos:column="18">closest_parent_miss<pos:position pos:line="20" pos:column="37"/></name><operator pos:line="20" pos:column="37">.<pos:position pos:line="20" pos:column="38"/></operator><name pos:line="20" pos:column="38">isAnyAddr<pos:position pos:line="20" pos:column="47"/></name></name><argument_list pos:line="20" pos:column="47">()<pos:position pos:line="20" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="50"/></condition><then pos:line="20" pos:column="50"> <block pos:line="20" pos:column="51">{
            <expr_stmt><expr><name pos:line="21" pos:column="13">p<pos:position pos:line="21" pos:column="14"/></name> <operator pos:line="21" pos:column="15">=<pos:position pos:line="21" pos:column="16"/></operator> <call><name pos:line="21" pos:column="17">whichPeer<pos:position pos:line="21" pos:column="26"/></name><argument_list pos:line="21" pos:column="26">(<argument><expr><name><name pos:line="21" pos:column="27">ps<pos:position pos:line="21" pos:column="29"/></name><operator pos:line="21" pos:column="29">-&gt;<pos:position pos:line="21" pos:column="34"/></operator><name pos:line="21" pos:column="31">closest_parent_miss<pos:position pos:line="21" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="52"/></expr_stmt>
            <expr_stmt><expr><name pos:line="22" pos:column="13">code<pos:position pos:line="22" pos:column="17"/></name> <operator pos:line="22" pos:column="18">=<pos:position pos:line="22" pos:column="19"/></operator> <name pos:line="22" pos:column="20">CLOSEST_PARENT_MISS<pos:position pos:line="22" pos:column="39"/></name></expr>;<pos:position pos:line="22" pos:column="40"/></expr_stmt>
        }<pos:position pos:line="23" pos:column="10"/></block></then> <elseif pos:line="23" pos:column="11">else <if pos:line="23" pos:column="16">if <condition pos:line="23" pos:column="19">(<expr><operator pos:line="23" pos:column="20">!<pos:position pos:line="23" pos:column="21"/></operator><call><name><name pos:line="23" pos:column="21">ps<pos:position pos:line="23" pos:column="23"/></name><operator pos:line="23" pos:column="23">-&gt;<pos:position pos:line="23" pos:column="28"/></operator><name pos:line="23" pos:column="25">first_parent_miss<pos:position pos:line="23" pos:column="42"/></name><operator pos:line="23" pos:column="42">.<pos:position pos:line="23" pos:column="43"/></operator><name pos:line="23" pos:column="43">isAnyAddr<pos:position pos:line="23" pos:column="52"/></name></name><argument_list pos:line="23" pos:column="52">()<pos:position pos:line="23" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="55"/></condition><then pos:line="23" pos:column="55"> <block pos:line="23" pos:column="56">{
            <expr_stmt><expr><name pos:line="24" pos:column="13">p<pos:position pos:line="24" pos:column="14"/></name> <operator pos:line="24" pos:column="15">=<pos:position pos:line="24" pos:column="16"/></operator> <call><name pos:line="24" pos:column="17">whichPeer<pos:position pos:line="24" pos:column="26"/></name><argument_list pos:line="24" pos:column="26">(<argument><expr><name><name pos:line="24" pos:column="27">ps<pos:position pos:line="24" pos:column="29"/></name><operator pos:line="24" pos:column="29">-&gt;<pos:position pos:line="24" pos:column="34"/></operator><name pos:line="24" pos:column="31">first_parent_miss<pos:position pos:line="24" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="50"/></expr_stmt>
            <expr_stmt><expr><name pos:line="25" pos:column="13">code<pos:position pos:line="25" pos:column="17"/></name> <operator pos:line="25" pos:column="18">=<pos:position pos:line="25" pos:column="19"/></operator> <name pos:line="25" pos:column="20">FIRST_PARENT_MISS<pos:position pos:line="25" pos:column="37"/></name></expr>;<pos:position pos:line="25" pos:column="38"/></expr_stmt>
        }<pos:position pos:line="26" pos:column="10"/></block></then></if></elseif></if>
    }<pos:position pos:line="27" pos:column="6"/></block></else></if>
    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><name pos:line="28" pos:column="9">p<pos:position pos:line="28" pos:column="10"/></name> <operator pos:line="28" pos:column="11">&amp;&amp;<pos:position pos:line="28" pos:column="21"/></operator> <name pos:line="28" pos:column="14">code<pos:position pos:line="28" pos:column="18"/></name> <operator pos:line="28" pos:column="19">!=<pos:position pos:line="28" pos:column="21"/></operator> <name pos:line="28" pos:column="22">HIER_NONE<pos:position pos:line="28" pos:column="31"/></name></expr>)<pos:position pos:line="28" pos:column="32"/></condition><then pos:line="28" pos:column="32"> <block pos:line="28" pos:column="33">{
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">debugs<pos:position pos:line="29" pos:column="15"/></name><argument_list pos:line="29" pos:column="15">(<argument><expr><literal type="number" pos:line="29" pos:column="16">44<pos:position pos:line="29" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="20">3<pos:position pos:line="29" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="23">"peerSelect: "<pos:position pos:line="29" pos:column="37"/></literal> <operator pos:line="29" pos:column="38">&lt;&lt;<pos:position pos:line="29" pos:column="46"/></operator> <name><name pos:line="29" pos:column="41">hier_code_str<pos:position pos:line="29" pos:column="54"/></name><index pos:line="29" pos:column="54">[<expr><name pos:line="29" pos:column="55">code<pos:position pos:line="29" pos:column="59"/></name></expr>]<pos:position pos:line="29" pos:column="60"/></index></name> <operator pos:line="29" pos:column="61">&lt;&lt;<pos:position pos:line="29" pos:column="69"/></operator> <literal type="string" pos:line="29" pos:column="64">"/"<pos:position pos:line="29" pos:column="67"/></literal> <operator pos:line="29" pos:column="68">&lt;&lt;<pos:position pos:line="29" pos:column="76"/></operator> <name><name pos:line="29" pos:column="71">p<pos:position pos:line="29" pos:column="72"/></name><operator pos:line="29" pos:column="72">-&gt;<pos:position pos:line="29" pos:column="77"/></operator><name pos:line="29" pos:column="74">host<pos:position pos:line="29" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="80"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">peerAddFwdServer<pos:position pos:line="30" pos:column="25"/></name><argument_list pos:line="30" pos:column="25">(<argument><expr><operator pos:line="30" pos:column="26">&amp;<pos:position pos:line="30" pos:column="31"/></operator><name><name pos:line="30" pos:column="27">ps<pos:position pos:line="30" pos:column="29"/></name><operator pos:line="30" pos:column="29">-&gt;<pos:position pos:line="30" pos:column="34"/></operator><name pos:line="30" pos:column="31">servers<pos:position pos:line="30" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="40">p<pos:position pos:line="30" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="43">code<pos:position pos:line="30" pos:column="47"/></name></expr></argument>)<pos:position pos:line="30" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="49"/></expr_stmt>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
