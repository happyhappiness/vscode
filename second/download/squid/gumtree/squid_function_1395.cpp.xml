<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_function_1395.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">gopherMimeCreate<pos:position pos:line="2" pos:column="17"/></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><name pos:line="2" pos:column="18">GopherStateData<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type> <name pos:line="2" pos:column="36">gopherState<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="48"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">StoreEntry<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">entry<pos:position pos:line="4" pos:column="22"/></name> <init pos:line="4" pos:column="23">= <expr><name><name pos:line="4" pos:column="25">gopherState<pos:position pos:line="4" pos:column="36"/></name><operator pos:line="4" pos:column="36">-&gt;<pos:position pos:line="4" pos:column="41"/></operator><name pos:line="4" pos:column="38">entry<pos:position pos:line="4" pos:column="43"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="44"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">char<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">mime_type<pos:position pos:line="5" pos:column="26"/></name> <init pos:line="5" pos:column="27">= <expr><name pos:line="5" pos:column="29">NULL<pos:position pos:line="5" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">char<pos:position pos:line="6" pos:column="15"/></name> <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type><name pos:line="6" pos:column="17">mime_enc<pos:position pos:line="6" pos:column="25"/></name> <init pos:line="6" pos:column="26">= <expr><name pos:line="6" pos:column="28">NULL<pos:position pos:line="6" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="33"/></decl_stmt>

    <switch pos:line="8" pos:column="5">switch <condition pos:line="8" pos:column="12">(<expr><name><name pos:line="8" pos:column="13">gopherState<pos:position pos:line="8" pos:column="24"/></name><operator pos:line="8" pos:column="24">-&gt;<pos:position pos:line="8" pos:column="29"/></operator><name pos:line="8" pos:column="26">type_id<pos:position pos:line="8" pos:column="33"/></name></name></expr>)<pos:position pos:line="8" pos:column="34"/></condition> <block pos:line="8" pos:column="35">{

    <case pos:line="10" pos:column="5">case <expr><name pos:line="10" pos:column="10">GOPHER_DIRECTORY<pos:position pos:line="10" pos:column="26"/></name></expr>:<pos:position pos:line="10" pos:column="27"/></case>

    <case pos:line="12" pos:column="5">case <expr><name pos:line="12" pos:column="10">GOPHER_INDEX<pos:position pos:line="12" pos:column="22"/></name></expr>:<pos:position pos:line="12" pos:column="23"/></case>

    <case pos:line="14" pos:column="5">case <expr><name pos:line="14" pos:column="10">GOPHER_HTML<pos:position pos:line="14" pos:column="21"/></name></expr>:<pos:position pos:line="14" pos:column="22"/></case>

    <case pos:line="16" pos:column="5">case <expr><name pos:line="16" pos:column="10">GOPHER_WWW<pos:position pos:line="16" pos:column="20"/></name></expr>:<pos:position pos:line="16" pos:column="21"/></case>

    <case pos:line="18" pos:column="5">case <expr><name pos:line="18" pos:column="10">GOPHER_CSO<pos:position pos:line="18" pos:column="20"/></name></expr>:<pos:position pos:line="18" pos:column="21"/></case>
        <expr_stmt><expr><name pos:line="19" pos:column="9">mime_type<pos:position pos:line="19" pos:column="18"/></name> <operator pos:line="19" pos:column="19">=<pos:position pos:line="19" pos:column="20"/></operator> <literal type="string" pos:line="19" pos:column="21">"text/html"<pos:position pos:line="19" pos:column="32"/></literal></expr>;<pos:position pos:line="19" pos:column="33"/></expr_stmt>
        <break pos:line="20" pos:column="9">break;<pos:position pos:line="20" pos:column="15"/></break>

    <case pos:line="22" pos:column="5">case <expr><name pos:line="22" pos:column="10">GOPHER_GIF<pos:position pos:line="22" pos:column="20"/></name></expr>:<pos:position pos:line="22" pos:column="21"/></case>

    <case pos:line="24" pos:column="5">case <expr><name pos:line="24" pos:column="10">GOPHER_IMAGE<pos:position pos:line="24" pos:column="22"/></name></expr>:<pos:position pos:line="24" pos:column="23"/></case>

    <case pos:line="26" pos:column="5">case <expr><name pos:line="26" pos:column="10">GOPHER_PLUS_IMAGE<pos:position pos:line="26" pos:column="27"/></name></expr>:<pos:position pos:line="26" pos:column="28"/></case>
        <expr_stmt><expr><name pos:line="27" pos:column="9">mime_type<pos:position pos:line="27" pos:column="18"/></name> <operator pos:line="27" pos:column="19">=<pos:position pos:line="27" pos:column="20"/></operator> <literal type="string" pos:line="27" pos:column="21">"image/gif"<pos:position pos:line="27" pos:column="32"/></literal></expr>;<pos:position pos:line="27" pos:column="33"/></expr_stmt>
        <break pos:line="28" pos:column="9">break;<pos:position pos:line="28" pos:column="15"/></break>

    <case pos:line="30" pos:column="5">case <expr><name pos:line="30" pos:column="10">GOPHER_SOUND<pos:position pos:line="30" pos:column="22"/></name></expr>:<pos:position pos:line="30" pos:column="23"/></case>

    <case pos:line="32" pos:column="5">case <expr><name pos:line="32" pos:column="10">GOPHER_PLUS_SOUND<pos:position pos:line="32" pos:column="27"/></name></expr>:<pos:position pos:line="32" pos:column="28"/></case>
        <expr_stmt><expr><name pos:line="33" pos:column="9">mime_type<pos:position pos:line="33" pos:column="18"/></name> <operator pos:line="33" pos:column="19">=<pos:position pos:line="33" pos:column="20"/></operator> <literal type="string" pos:line="33" pos:column="21">"audio/basic"<pos:position pos:line="33" pos:column="34"/></literal></expr>;<pos:position pos:line="33" pos:column="35"/></expr_stmt>
        <break pos:line="34" pos:column="9">break;<pos:position pos:line="34" pos:column="15"/></break>

    <case pos:line="36" pos:column="5">case <expr><name pos:line="36" pos:column="10">GOPHER_PLUS_MOVIE<pos:position pos:line="36" pos:column="27"/></name></expr>:<pos:position pos:line="36" pos:column="28"/></case>
        <expr_stmt><expr><name pos:line="37" pos:column="9">mime_type<pos:position pos:line="37" pos:column="18"/></name> <operator pos:line="37" pos:column="19">=<pos:position pos:line="37" pos:column="20"/></operator> <literal type="string" pos:line="37" pos:column="21">"video/mpeg"<pos:position pos:line="37" pos:column="33"/></literal></expr>;<pos:position pos:line="37" pos:column="34"/></expr_stmt>
        <break pos:line="38" pos:column="9">break;<pos:position pos:line="38" pos:column="15"/></break>

    <case pos:line="40" pos:column="5">case <expr><name pos:line="40" pos:column="10">GOPHER_MACBINHEX<pos:position pos:line="40" pos:column="26"/></name></expr>:<pos:position pos:line="40" pos:column="27"/></case>

    <case pos:line="42" pos:column="5">case <expr><name pos:line="42" pos:column="10">GOPHER_DOSBIN<pos:position pos:line="42" pos:column="23"/></name></expr>:<pos:position pos:line="42" pos:column="24"/></case>

    <case pos:line="44" pos:column="5">case <expr><name pos:line="44" pos:column="10">GOPHER_UUENCODED<pos:position pos:line="44" pos:column="26"/></name></expr>:<pos:position pos:line="44" pos:column="27"/></case>

    <case pos:line="46" pos:column="5">case <expr><name pos:line="46" pos:column="10">GOPHER_BIN<pos:position pos:line="46" pos:column="20"/></name></expr>:<pos:position pos:line="46" pos:column="21"/></case>
        <comment type="block" pos:line="47" pos:column="9">/* Rightnow We have no idea what it is. */</comment>
        <expr_stmt><expr><name pos:line="48" pos:column="9">mime_enc<pos:position pos:line="48" pos:column="17"/></name> <operator pos:line="48" pos:column="18">=<pos:position pos:line="48" pos:column="19"/></operator> <call><name pos:line="48" pos:column="20">mimeGetContentEncoding<pos:position pos:line="48" pos:column="42"/></name><argument_list pos:line="48" pos:column="42">(<argument><expr><name><name pos:line="48" pos:column="43">gopherState<pos:position pos:line="48" pos:column="54"/></name><operator pos:line="48" pos:column="54">-&gt;<pos:position pos:line="48" pos:column="59"/></operator><name pos:line="48" pos:column="56">request<pos:position pos:line="48" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="65"/></expr_stmt>
        <expr_stmt><expr><name pos:line="49" pos:column="9">mime_type<pos:position pos:line="49" pos:column="18"/></name> <operator pos:line="49" pos:column="19">=<pos:position pos:line="49" pos:column="20"/></operator> <call><name pos:line="49" pos:column="21">mimeGetContentType<pos:position pos:line="49" pos:column="39"/></name><argument_list pos:line="49" pos:column="39">(<argument><expr><name><name pos:line="49" pos:column="40">gopherState<pos:position pos:line="49" pos:column="51"/></name><operator pos:line="49" pos:column="51">-&gt;<pos:position pos:line="49" pos:column="56"/></operator><name pos:line="49" pos:column="53">request<pos:position pos:line="49" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="62"/></expr_stmt>
        <if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><operator pos:line="50" pos:column="13">!<pos:position pos:line="50" pos:column="14"/></operator><name pos:line="50" pos:column="14">mime_type<pos:position pos:line="50" pos:column="23"/></name></expr>)<pos:position pos:line="50" pos:column="24"/></condition><then pos:line="50" pos:column="24">
            <block type="pseudo"><expr_stmt><expr><name pos:line="51" pos:column="13">mime_type<pos:position pos:line="51" pos:column="22"/></name> <operator pos:line="51" pos:column="23">=<pos:position pos:line="51" pos:column="24"/></operator> <name pos:line="51" pos:column="25">def_gopher_bin<pos:position pos:line="51" pos:column="39"/></name></expr>;<pos:position pos:line="51" pos:column="40"/></expr_stmt></block></then></if>
        <break pos:line="52" pos:column="9">break;<pos:position pos:line="52" pos:column="15"/></break>

    <case pos:line="54" pos:column="5">case <expr><name pos:line="54" pos:column="10">GOPHER_FILE<pos:position pos:line="54" pos:column="21"/></name></expr>:<pos:position pos:line="54" pos:column="22"/></case>

    <default pos:line="56" pos:column="5">default:<pos:position pos:line="56" pos:column="13"/></default>
        <expr_stmt><expr><name pos:line="57" pos:column="9">mime_enc<pos:position pos:line="57" pos:column="17"/></name> <operator pos:line="57" pos:column="18">=<pos:position pos:line="57" pos:column="19"/></operator> <call><name pos:line="57" pos:column="20">mimeGetContentEncoding<pos:position pos:line="57" pos:column="42"/></name><argument_list pos:line="57" pos:column="42">(<argument><expr><name><name pos:line="57" pos:column="43">gopherState<pos:position pos:line="57" pos:column="54"/></name><operator pos:line="57" pos:column="54">-&gt;<pos:position pos:line="57" pos:column="59"/></operator><name pos:line="57" pos:column="56">request<pos:position pos:line="57" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="65"/></expr_stmt>
        <expr_stmt><expr><name pos:line="58" pos:column="9">mime_type<pos:position pos:line="58" pos:column="18"/></name> <operator pos:line="58" pos:column="19">=<pos:position pos:line="58" pos:column="20"/></operator> <call><name pos:line="58" pos:column="21">mimeGetContentType<pos:position pos:line="58" pos:column="39"/></name><argument_list pos:line="58" pos:column="39">(<argument><expr><name><name pos:line="58" pos:column="40">gopherState<pos:position pos:line="58" pos:column="51"/></name><operator pos:line="58" pos:column="51">-&gt;<pos:position pos:line="58" pos:column="56"/></operator><name pos:line="58" pos:column="53">request<pos:position pos:line="58" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="62"/></expr_stmt>
        <if pos:line="59" pos:column="9">if <condition pos:line="59" pos:column="12">(<expr><operator pos:line="59" pos:column="13">!<pos:position pos:line="59" pos:column="14"/></operator><name pos:line="59" pos:column="14">mime_type<pos:position pos:line="59" pos:column="23"/></name></expr>)<pos:position pos:line="59" pos:column="24"/></condition><then pos:line="59" pos:column="24">
            <block type="pseudo"><expr_stmt><expr><name pos:line="60" pos:column="13">mime_type<pos:position pos:line="60" pos:column="22"/></name> <operator pos:line="60" pos:column="23">=<pos:position pos:line="60" pos:column="24"/></operator> <name pos:line="60" pos:column="25">def_gopher_text<pos:position pos:line="60" pos:column="40"/></name></expr>;<pos:position pos:line="60" pos:column="41"/></expr_stmt></block></then></if>
        <break pos:line="61" pos:column="9">break;<pos:position pos:line="61" pos:column="15"/></break>
    }<pos:position pos:line="62" pos:column="6"/></block></switch>

    <expr_stmt><expr><call><name pos:line="64" pos:column="5">assert<pos:position pos:line="64" pos:column="11"/></name><argument_list pos:line="64" pos:column="11">(<argument><expr><call><name><name pos:line="64" pos:column="12">entry<pos:position pos:line="64" pos:column="17"/></name><operator pos:line="64" pos:column="17">-&gt;<pos:position pos:line="64" pos:column="22"/></operator><name pos:line="64" pos:column="19">isEmpty<pos:position pos:line="64" pos:column="26"/></name></name><argument_list pos:line="64" pos:column="26">()<pos:position pos:line="64" pos:column="28"/></argument_list></call></expr></argument>)<pos:position pos:line="64" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="65" pos:column="5">EBIT_CLR<pos:position pos:line="65" pos:column="13"/></name><argument_list pos:line="65" pos:column="13">(<argument><expr><name><name pos:line="65" pos:column="14">entry<pos:position pos:line="65" pos:column="19"/></name><operator pos:line="65" pos:column="19">-&gt;<pos:position pos:line="65" pos:column="24"/></operator><name pos:line="65" pos:column="21">flags<pos:position pos:line="65" pos:column="26"/></name></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="28">ENTRY_FWD_HDR_WAIT<pos:position pos:line="65" pos:column="46"/></name></expr></argument>)<pos:position pos:line="65" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="48"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="67" pos:column="5">HttpReply<pos:position pos:line="67" pos:column="14"/></name> <modifier pos:line="67" pos:column="15">*<pos:position pos:line="67" pos:column="16"/></modifier></type><name pos:line="67" pos:column="16">reply<pos:position pos:line="67" pos:column="21"/></name> <init pos:line="67" pos:column="22">= <expr><operator pos:line="67" pos:column="24">new<pos:position pos:line="67" pos:column="27"/></operator> <name pos:line="67" pos:column="28">HttpReply<pos:position pos:line="67" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="67" pos:column="38"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="68" pos:column="5">entry<pos:position pos:line="68" pos:column="10"/></name><operator pos:line="68" pos:column="10">-&gt;<pos:position pos:line="68" pos:column="15"/></operator><name pos:line="68" pos:column="12">buffer<pos:position pos:line="68" pos:column="18"/></name></name><argument_list pos:line="68" pos:column="18">()<pos:position pos:line="68" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="69" pos:column="5">reply<pos:position pos:line="69" pos:column="10"/></name><operator pos:line="69" pos:column="10">-&gt;<pos:position pos:line="69" pos:column="15"/></operator><name pos:line="69" pos:column="12">setHeaders<pos:position pos:line="69" pos:column="22"/></name></name><argument_list pos:line="69" pos:column="22">(<argument><expr><name><name pos:line="69" pos:column="23">Http<pos:position pos:line="69" pos:column="27"/></name><operator pos:line="69" pos:column="27">::<pos:position pos:line="69" pos:column="29"/></operator><name pos:line="69" pos:column="29">scOkay<pos:position pos:line="69" pos:column="35"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="37">"Gatewaying"<pos:position pos:line="69" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="69" pos:column="51">mime_type<pos:position pos:line="69" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="69" pos:column="62">-<pos:position pos:line="69" pos:column="63"/></operator><literal type="number" pos:line="69" pos:column="63">1<pos:position pos:line="69" pos:column="64"/></literal></expr></argument>, <argument><expr><operator pos:line="69" pos:column="66">-<pos:position pos:line="69" pos:column="67"/></operator><literal type="number" pos:line="69" pos:column="67">1<pos:position pos:line="69" pos:column="68"/></literal></expr></argument>, <argument><expr><operator pos:line="69" pos:column="70">-<pos:position pos:line="69" pos:column="71"/></operator><literal type="number" pos:line="69" pos:column="71">2<pos:position pos:line="69" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="74"/></expr_stmt>
    <if pos:line="70" pos:column="5">if <condition pos:line="70" pos:column="8">(<expr><name pos:line="70" pos:column="9">mime_enc<pos:position pos:line="70" pos:column="17"/></name></expr>)<pos:position pos:line="70" pos:column="18"/></condition><then pos:line="70" pos:column="18">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="71" pos:column="9">reply<pos:position pos:line="71" pos:column="14"/></name><operator pos:line="71" pos:column="14">-&gt;<pos:position pos:line="71" pos:column="19"/></operator><name pos:line="71" pos:column="16">header<pos:position pos:line="71" pos:column="22"/></name><operator pos:line="71" pos:column="22">.<pos:position pos:line="71" pos:column="23"/></operator><name pos:line="71" pos:column="23">putStr<pos:position pos:line="71" pos:column="29"/></name></name><argument_list pos:line="71" pos:column="29">(<argument><expr><name pos:line="71" pos:column="30">HDR_CONTENT_ENCODING<pos:position pos:line="71" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="52">mime_enc<pos:position pos:line="71" pos:column="60"/></name></expr></argument>)<pos:position pos:line="71" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="62"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="73" pos:column="5">entry<pos:position pos:line="73" pos:column="10"/></name><operator pos:line="73" pos:column="10">-&gt;<pos:position pos:line="73" pos:column="15"/></operator><name pos:line="73" pos:column="12">replaceHttpReply<pos:position pos:line="73" pos:column="28"/></name></name><argument_list pos:line="73" pos:column="28">(<argument><expr><name pos:line="73" pos:column="29">reply<pos:position pos:line="73" pos:column="34"/></name></expr></argument>)<pos:position pos:line="73" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="36"/></expr_stmt>
}<pos:position pos:line="74" pos:column="2"/></block></function></unit>
