<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3525_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Icap<pos:position pos:line="1" pos:column="22"/></name><operator pos:line="1" pos:column="22">::<pos:position pos:line="1" pos:column="24"/></operator><name pos:line="1" pos:column="24">ModXact<pos:position pos:line="1" pos:column="31"/></name><operator pos:line="1" pos:column="31">::<pos:position pos:line="1" pos:column="33"/></operator><name pos:line="1" pos:column="33">echoMore<pos:position pos:line="1" pos:column="41"/></name></name><parameter_list pos:line="1" pos:column="41">()<pos:position pos:line="1" pos:column="43"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="3" pos:column="5">Must<pos:position pos:line="3" pos:column="9"/></name><argument_list pos:line="3" pos:column="9">(<argument><expr><name><name pos:line="3" pos:column="10">state<pos:position pos:line="3" pos:column="15"/></name><operator pos:line="3" pos:column="15">.<pos:position pos:line="3" pos:column="16"/></operator><name pos:line="3" pos:column="16">sending<pos:position pos:line="3" pos:column="23"/></name></name> <operator pos:line="3" pos:column="24">==<pos:position pos:line="3" pos:column="26"/></operator> <name><name pos:line="3" pos:column="27">State<pos:position pos:line="3" pos:column="32"/></name><operator pos:line="3" pos:column="32">::<pos:position pos:line="3" pos:column="34"/></operator><name pos:line="3" pos:column="34">sendingVirgin<pos:position pos:line="3" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="3" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">Must<pos:position pos:line="4" pos:column="9"/></name><argument_list pos:line="4" pos:column="9">(<argument><expr><name><name pos:line="4" pos:column="10">adapted<pos:position pos:line="4" pos:column="17"/></name><operator pos:line="4" pos:column="17">.<pos:position pos:line="4" pos:column="18"/></operator><name pos:line="4" pos:column="18">body_pipe<pos:position pos:line="4" pos:column="27"/></name></name> <operator pos:line="4" pos:column="28">!=<pos:position pos:line="4" pos:column="30"/></operator> <name pos:line="4" pos:column="31">NULL<pos:position pos:line="4" pos:column="35"/></name></expr></argument>)<pos:position pos:line="4" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">Must<pos:position pos:line="5" pos:column="9"/></name><argument_list pos:line="5" pos:column="9">(<argument><expr><call><name><name pos:line="5" pos:column="10">virginBodySending<pos:position pos:line="5" pos:column="27"/></name><operator pos:line="5" pos:column="27">.<pos:position pos:line="5" pos:column="28"/></operator><name pos:line="5" pos:column="28">active<pos:position pos:line="5" pos:column="34"/></name></name><argument_list pos:line="5" pos:column="34">()<pos:position pos:line="5" pos:column="36"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="38"/></expr_stmt>

    <decl_stmt><decl><type><specifier pos:line="7" pos:column="5">const<pos:position pos:line="7" pos:column="10"/></specifier> <name pos:line="7" pos:column="11">size_t<pos:position pos:line="7" pos:column="17"/></name></type> <name pos:line="7" pos:column="18">sizeMax<pos:position pos:line="7" pos:column="25"/></name> <init pos:line="7" pos:column="26">= <expr><call><name pos:line="7" pos:column="28">virginContentSize<pos:position pos:line="7" pos:column="45"/></name><argument_list pos:line="7" pos:column="45">(<argument><expr><name pos:line="7" pos:column="46">virginBodySending<pos:position pos:line="7" pos:column="63"/></name></expr></argument>)<pos:position pos:line="7" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="65"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">debugs<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><literal type="number" pos:line="8" pos:column="12">93<pos:position pos:line="8" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="8" pos:column="15">5<pos:position pos:line="8" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="18">HERE<pos:position pos:line="8" pos:column="22"/></name> <operator pos:line="8" pos:column="23">&lt;&lt;<pos:position pos:line="8" pos:column="31"/></operator> <literal type="string" pos:line="8" pos:column="26">"will echo up to "<pos:position pos:line="8" pos:column="44"/></literal> <operator pos:line="8" pos:column="45">&lt;&lt;<pos:position pos:line="8" pos:column="53"/></operator> <name pos:line="8" pos:column="48">sizeMax<pos:position pos:line="8" pos:column="55"/></name> <operator pos:line="8" pos:column="56">&lt;&lt;<pos:position pos:line="8" pos:column="64"/></operator> <literal type="string" pos:line="8" pos:column="59">" bytes from "<pos:position pos:line="8" pos:column="73"/></literal> <operator pos:line="8" pos:column="74">&lt;&lt;<pos:position pos:line="8" pos:column="82"/></operator>
           <call><name><name pos:line="9" pos:column="12">virgin<pos:position pos:line="9" pos:column="18"/></name><operator pos:line="9" pos:column="18">.<pos:position pos:line="9" pos:column="19"/></operator><name pos:line="9" pos:column="19">body_pipe<pos:position pos:line="9" pos:column="28"/></name><operator pos:line="9" pos:column="28">-&gt;<pos:position pos:line="9" pos:column="33"/></operator><name pos:line="9" pos:column="30">status<pos:position pos:line="9" pos:column="36"/></name></name><argument_list pos:line="9" pos:column="36">()<pos:position pos:line="9" pos:column="38"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">debugs<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><literal type="number" pos:line="10" pos:column="12">93<pos:position pos:line="10" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="10" pos:column="15">5<pos:position pos:line="10" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="18">HERE<pos:position pos:line="10" pos:column="22"/></name> <operator pos:line="10" pos:column="23">&lt;&lt;<pos:position pos:line="10" pos:column="31"/></operator> <literal type="string" pos:line="10" pos:column="26">"will echo up to "<pos:position pos:line="10" pos:column="44"/></literal> <operator pos:line="10" pos:column="45">&lt;&lt;<pos:position pos:line="10" pos:column="53"/></operator> <name pos:line="10" pos:column="48">sizeMax<pos:position pos:line="10" pos:column="55"/></name> <operator pos:line="10" pos:column="56">&lt;&lt;<pos:position pos:line="10" pos:column="64"/></operator> <literal type="string" pos:line="10" pos:column="59">" bytes to   "<pos:position pos:line="10" pos:column="73"/></literal> <operator pos:line="10" pos:column="74">&lt;&lt;<pos:position pos:line="10" pos:column="82"/></operator>
           <call><name><name pos:line="11" pos:column="12">adapted<pos:position pos:line="11" pos:column="19"/></name><operator pos:line="11" pos:column="19">.<pos:position pos:line="11" pos:column="20"/></operator><name pos:line="11" pos:column="20">body_pipe<pos:position pos:line="11" pos:column="29"/></name><operator pos:line="11" pos:column="29">-&gt;<pos:position pos:line="11" pos:column="34"/></operator><name pos:line="11" pos:column="31">status<pos:position pos:line="11" pos:column="37"/></name></name><argument_list pos:line="11" pos:column="37">()<pos:position pos:line="11" pos:column="39"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="41"/></expr_stmt>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">sizeMax<pos:position pos:line="13" pos:column="16"/></name> <operator pos:line="13" pos:column="17">&gt;<pos:position pos:line="13" pos:column="21"/></operator> <literal type="number" pos:line="13" pos:column="19">0<pos:position pos:line="13" pos:column="20"/></literal></expr>)<pos:position pos:line="13" pos:column="21"/></condition><then pos:line="13" pos:column="21"> <block pos:line="13" pos:column="22">{
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">const<pos:position pos:line="14" pos:column="14"/></specifier> <name pos:line="14" pos:column="15">size_t<pos:position pos:line="14" pos:column="21"/></name></type> <name pos:line="14" pos:column="22">size<pos:position pos:line="14" pos:column="26"/></name> <init pos:line="14" pos:column="27">= <expr><call><name><name pos:line="14" pos:column="29">adapted<pos:position pos:line="14" pos:column="36"/></name><operator pos:line="14" pos:column="36">.<pos:position pos:line="14" pos:column="37"/></operator><name pos:line="14" pos:column="37">body_pipe<pos:position pos:line="14" pos:column="46"/></name><operator pos:line="14" pos:column="46">-&gt;<pos:position pos:line="14" pos:column="51"/></operator><name pos:line="14" pos:column="48">putMoreData<pos:position pos:line="14" pos:column="59"/></name></name><argument_list pos:line="14" pos:column="59">(<argument><expr><call><name pos:line="14" pos:column="60">virginContentData<pos:position pos:line="14" pos:column="77"/></name><argument_list pos:line="14" pos:column="77">(<argument><expr><name pos:line="14" pos:column="78">virginBodySending<pos:position pos:line="14" pos:column="95"/></name></expr></argument>)<pos:position pos:line="14" pos:column="96"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="14" pos:column="98">sizeMax<pos:position pos:line="14" pos:column="105"/></name></expr></argument>)<pos:position pos:line="14" pos:column="106"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="107"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">debugs<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><literal type="number" pos:line="15" pos:column="16">93<pos:position pos:line="15" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="15" pos:column="19">5<pos:position pos:line="15" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="22">HERE<pos:position pos:line="15" pos:column="26"/></name> <operator pos:line="15" pos:column="27">&lt;&lt;<pos:position pos:line="15" pos:column="35"/></operator> <literal type="string" pos:line="15" pos:column="30">"echoed "<pos:position pos:line="15" pos:column="39"/></literal> <operator pos:line="15" pos:column="40">&lt;&lt;<pos:position pos:line="15" pos:column="48"/></operator> <name pos:line="15" pos:column="43">size<pos:position pos:line="15" pos:column="47"/></name> <operator pos:line="15" pos:column="48">&lt;&lt;<pos:position pos:line="15" pos:column="56"/></operator> <literal type="string" pos:line="15" pos:column="51">" out of "<pos:position pos:line="15" pos:column="61"/></literal> <operator pos:line="15" pos:column="62">&lt;&lt;<pos:position pos:line="15" pos:column="70"/></operator> <name pos:line="15" pos:column="65">sizeMax<pos:position pos:line="15" pos:column="72"/></name> <operator pos:line="15" pos:column="73">&lt;&lt;<pos:position pos:line="15" pos:column="81"/></operator>
               <literal type="string" pos:line="16" pos:column="16">" bytes"<pos:position pos:line="16" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="17" pos:column="9">virginBodySending<pos:position pos:line="17" pos:column="26"/></name><operator pos:line="17" pos:column="26">.<pos:position pos:line="17" pos:column="27"/></operator><name pos:line="17" pos:column="27">progress<pos:position pos:line="17" pos:column="35"/></name></name><argument_list pos:line="17" pos:column="35">(<argument><expr><name pos:line="17" pos:column="36">size<pos:position pos:line="17" pos:column="40"/></name></expr></argument>)<pos:position pos:line="17" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">disableRepeats<pos:position pos:line="18" pos:column="23"/></name><argument_list pos:line="18" pos:column="23">(<argument><expr><literal type="string" pos:line="18" pos:column="24">"echoed content"<pos:position pos:line="18" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">disableBypass<pos:position pos:line="19" pos:column="22"/></name><argument_list pos:line="19" pos:column="22">(<argument><expr><literal type="string" pos:line="19" pos:column="23">"echoed content"<pos:position pos:line="19" pos:column="39"/></literal></expr></argument>, <argument><expr><literal type="boolean" pos:line="19" pos:column="41">true<pos:position pos:line="19" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">virginConsume<pos:position pos:line="20" pos:column="22"/></name><argument_list pos:line="20" pos:column="22">()<pos:position pos:line="20" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>

    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><call><name pos:line="23" pos:column="9">virginBodyEndReached<pos:position pos:line="23" pos:column="29"/></name><argument_list pos:line="23" pos:column="29">(<argument><expr><name pos:line="23" pos:column="30">virginBodySending<pos:position pos:line="23" pos:column="47"/></name></expr></argument>)<pos:position pos:line="23" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="49"/></condition><then pos:line="23" pos:column="49"> <block pos:line="23" pos:column="50">{
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">debugs<pos:position pos:line="24" pos:column="15"/></name><argument_list pos:line="24" pos:column="15">(<argument><expr><literal type="number" pos:line="24" pos:column="16">93<pos:position pos:line="24" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="20">5<pos:position pos:line="24" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="23">HERE<pos:position pos:line="24" pos:column="27"/></name> <operator pos:line="24" pos:column="28">&lt;&lt;<pos:position pos:line="24" pos:column="36"/></operator> <literal type="string" pos:line="24" pos:column="31">"echoed all"<pos:position pos:line="24" pos:column="43"/></literal> <operator pos:line="24" pos:column="44">&lt;&lt;<pos:position pos:line="24" pos:column="52"/></operator> <call><name pos:line="24" pos:column="47">status<pos:position pos:line="24" pos:column="53"/></name><argument_list pos:line="24" pos:column="53">()<pos:position pos:line="24" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="57"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">stopSending<pos:position pos:line="25" pos:column="20"/></name><argument_list pos:line="25" pos:column="20">(<argument><expr><literal type="boolean" pos:line="25" pos:column="21">true<pos:position pos:line="25" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="26" pos:column="6"/></block></then> <else pos:line="26" pos:column="7">else <block pos:line="26" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">debugs<pos:position pos:line="27" pos:column="15"/></name><argument_list pos:line="27" pos:column="15">(<argument><expr><literal type="number" pos:line="27" pos:column="16">93<pos:position pos:line="27" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="20">5<pos:position pos:line="27" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="23">HERE<pos:position pos:line="27" pos:column="27"/></name> <operator pos:line="27" pos:column="28">&lt;&lt;<pos:position pos:line="27" pos:column="36"/></operator> <literal type="string" pos:line="27" pos:column="31">"has "<pos:position pos:line="27" pos:column="37"/></literal> <operator pos:line="27" pos:column="38">&lt;&lt;<pos:position pos:line="27" pos:column="46"/></operator>
               <call><name><name pos:line="28" pos:column="16">virgin<pos:position pos:line="28" pos:column="22"/></name><operator pos:line="28" pos:column="22">.<pos:position pos:line="28" pos:column="23"/></operator><name pos:line="28" pos:column="23">body_pipe<pos:position pos:line="28" pos:column="32"/></name><operator pos:line="28" pos:column="32">-&gt;<pos:position pos:line="28" pos:column="37"/></operator><name pos:line="28" pos:column="34">buf<pos:position pos:line="28" pos:column="37"/></name></name><argument_list pos:line="28" pos:column="37">()<pos:position pos:line="28" pos:column="39"/></argument_list></call><operator pos:line="28" pos:column="39">.<pos:position pos:line="28" pos:column="40"/></operator><call><name pos:line="28" pos:column="40">contentSize<pos:position pos:line="28" pos:column="51"/></name><argument_list pos:line="28" pos:column="51">()<pos:position pos:line="28" pos:column="53"/></argument_list></call> <operator pos:line="28" pos:column="54">&lt;&lt;<pos:position pos:line="28" pos:column="62"/></operator> <literal type="string" pos:line="28" pos:column="57">" bytes "<pos:position pos:line="28" pos:column="66"/></literal> <operator pos:line="28" pos:column="67">&lt;&lt;<pos:position pos:line="28" pos:column="75"/></operator>
               <literal type="string" pos:line="29" pos:column="16">"and expects more to echo"<pos:position pos:line="29" pos:column="42"/></literal> <operator pos:line="29" pos:column="43">&lt;&lt;<pos:position pos:line="29" pos:column="51"/></operator> <call><name pos:line="29" pos:column="46">status<pos:position pos:line="29" pos:column="52"/></name><argument_list pos:line="29" pos:column="52">()<pos:position pos:line="29" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="29" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="56"/></expr_stmt>
        <comment type="line" pos:line="30" pos:column="9">// TODO: timeout if virgin or adapted pipes are broken</comment>
    }<pos:position pos:line="31" pos:column="6"/></block></else></if>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
