<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1850_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">FwdState<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">dispatch<pos:position pos:line="2" pos:column="19"/></name></name><parameter_list pos:line="2" pos:column="19">()<pos:position pos:line="2" pos:column="21"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">17<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">3<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="19">clientConn<pos:position pos:line="4" pos:column="29"/></name> <operator pos:line="4" pos:column="30">&lt;&lt;<pos:position pos:line="4" pos:column="38"/></operator> <literal type="string" pos:line="4" pos:column="33">": Fetching "<pos:position pos:line="4" pos:column="46"/></literal> <operator pos:line="4" pos:column="47">&lt;&lt;<pos:position pos:line="4" pos:column="55"/></operator> <name><name pos:line="4" pos:column="50">request<pos:position pos:line="4" pos:column="57"/></name><operator pos:line="4" pos:column="57">-&gt;<pos:position pos:line="4" pos:column="62"/></operator><name pos:line="4" pos:column="59">method<pos:position pos:line="4" pos:column="65"/></name></name> <operator pos:line="4" pos:column="66">&lt;&lt;<pos:position pos:line="4" pos:column="74"/></operator> <literal type="char" pos:line="4" pos:column="69">' '<pos:position pos:line="4" pos:column="72"/></literal> <operator pos:line="4" pos:column="73">&lt;&lt;<pos:position pos:line="4" pos:column="81"/></operator> <call><name><name pos:line="4" pos:column="76">entry<pos:position pos:line="4" pos:column="81"/></name><operator pos:line="4" pos:column="81">-&gt;<pos:position pos:line="4" pos:column="86"/></operator><name pos:line="4" pos:column="83">url<pos:position pos:line="4" pos:column="86"/></name></name><argument_list pos:line="4" pos:column="86">()<pos:position pos:line="4" pos:column="88"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="90"/></expr_stmt>
    <comment type="block" pos:line="5" pos:column="5">/*
     * Assert that server_fd is set.  This is to guarantee that fwdState
     * is attached to something and will be deallocated when server_fd
     * is closed.
     */</comment>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">assert<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><call><name><name pos:line="10" pos:column="12">Comm<pos:position pos:line="10" pos:column="16"/></name><operator pos:line="10" pos:column="16">::<pos:position pos:line="10" pos:column="18"/></operator><name pos:line="10" pos:column="18">IsConnOpen<pos:position pos:line="10" pos:column="28"/></name></name><argument_list pos:line="10" pos:column="28">(<argument><expr><name pos:line="10" pos:column="29">serverConn<pos:position pos:line="10" pos:column="39"/></name></expr></argument>)<pos:position pos:line="10" pos:column="40"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="42"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="12" pos:column="5">fd_note<pos:position pos:line="12" pos:column="12"/></name><argument_list pos:line="12" pos:column="12">(<argument><expr><call><name pos:line="12" pos:column="13">serverConnection<pos:position pos:line="12" pos:column="29"/></name><argument_list pos:line="12" pos:column="29">()<pos:position pos:line="12" pos:column="31"/></argument_list></call><operator pos:line="12" pos:column="31">-&gt;<pos:position pos:line="12" pos:column="36"/></operator><name pos:line="12" pos:column="33">fd<pos:position pos:line="12" pos:column="35"/></name></expr></argument>, <argument><expr><call><name><name pos:line="12" pos:column="37">entry<pos:position pos:line="12" pos:column="42"/></name><operator pos:line="12" pos:column="42">-&gt;<pos:position pos:line="12" pos:column="47"/></operator><name pos:line="12" pos:column="44">url<pos:position pos:line="12" pos:column="47"/></name></name><argument_list pos:line="12" pos:column="47">()<pos:position pos:line="12" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="51"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="14" pos:column="5">fd_table<pos:position pos:line="14" pos:column="13"/></name><index pos:line="14" pos:column="13">[<expr><call><name pos:line="14" pos:column="14">serverConnection<pos:position pos:line="14" pos:column="30"/></name><argument_list pos:line="14" pos:column="30">()<pos:position pos:line="14" pos:column="32"/></argument_list></call><operator pos:line="14" pos:column="32">-&gt;<pos:position pos:line="14" pos:column="37"/></operator><name pos:line="14" pos:column="34">fd<pos:position pos:line="14" pos:column="36"/></name></expr>]<pos:position pos:line="14" pos:column="37"/></index></name><operator pos:line="14" pos:column="37">.<pos:position pos:line="14" pos:column="38"/></operator><call><name pos:line="14" pos:column="38">noteUse<pos:position pos:line="14" pos:column="45"/></name><argument_list pos:line="14" pos:column="45">()<pos:position pos:line="14" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="48"/></expr_stmt>

    <comment type="block" pos:line="16" pos:column="5">/*assert(!EBIT_TEST(entry-&gt;flags, ENTRY_DISPATCHED)); */</comment>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">assert<pos:position pos:line="17" pos:column="11"/></name><argument_list pos:line="17" pos:column="11">(<argument><expr><name><name pos:line="17" pos:column="12">entry<pos:position pos:line="17" pos:column="17"/></name><operator pos:line="17" pos:column="17">-&gt;<pos:position pos:line="17" pos:column="22"/></operator><name pos:line="17" pos:column="19">ping_status<pos:position pos:line="17" pos:column="30"/></name></name> <operator pos:line="17" pos:column="31">!=<pos:position pos:line="17" pos:column="33"/></operator> <name pos:line="17" pos:column="34">PING_WAITING<pos:position pos:line="17" pos:column="46"/></name></expr></argument>)<pos:position pos:line="17" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="48"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="19" pos:column="5">assert<pos:position pos:line="19" pos:column="11"/></name><argument_list pos:line="19" pos:column="11">(<argument><expr><call><name><name pos:line="19" pos:column="12">entry<pos:position pos:line="19" pos:column="17"/></name><operator pos:line="19" pos:column="17">-&gt;<pos:position pos:line="19" pos:column="22"/></operator><name pos:line="19" pos:column="19">locked<pos:position pos:line="19" pos:column="25"/></name></name><argument_list pos:line="19" pos:column="25">()<pos:position pos:line="19" pos:column="27"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="29"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="21" pos:column="5">EBIT_SET<pos:position pos:line="21" pos:column="13"/></name><argument_list pos:line="21" pos:column="13">(<argument><expr><name><name pos:line="21" pos:column="14">entry<pos:position pos:line="21" pos:column="19"/></name><operator pos:line="21" pos:column="19">-&gt;<pos:position pos:line="21" pos:column="24"/></operator><name pos:line="21" pos:column="21">flags<pos:position pos:line="21" pos:column="26"/></name></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="28">ENTRY_DISPATCHED<pos:position pos:line="21" pos:column="44"/></name></expr></argument>)<pos:position pos:line="21" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="46"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="23" pos:column="5">netdbPingSite<pos:position pos:line="23" pos:column="18"/></name><argument_list pos:line="23" pos:column="18">(<argument><expr><call><name><name pos:line="23" pos:column="19">request<pos:position pos:line="23" pos:column="26"/></name><operator pos:line="23" pos:column="26">-&gt;<pos:position pos:line="23" pos:column="31"/></operator><name pos:line="23" pos:column="28">url<pos:position pos:line="23" pos:column="31"/></name><operator pos:line="23" pos:column="31">.<pos:position pos:line="23" pos:column="32"/></operator><name pos:line="23" pos:column="32">host<pos:position pos:line="23" pos:column="36"/></name></name><argument_list pos:line="23" pos:column="36">()<pos:position pos:line="23" pos:column="38"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="40"/></expr_stmt>

    <comment type="block" pos:line="25" pos:column="5">/* Retrieves remote server TOS or MARK value, and stores it as part of the
     * original client request FD object. It is later used to forward
     * remote server's TOS/MARK in the response to the client in case of a MISS.
     */</comment>
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><call><name><name pos:line="29" pos:column="9">Ip<pos:position pos:line="29" pos:column="11"/></name><operator pos:line="29" pos:column="11">::<pos:position pos:line="29" pos:column="13"/></operator><name pos:line="29" pos:column="13">Qos<pos:position pos:line="29" pos:column="16"/></name><operator pos:line="29" pos:column="16">::<pos:position pos:line="29" pos:column="18"/></operator><name pos:line="29" pos:column="18">TheConfig<pos:position pos:line="29" pos:column="27"/></name><operator pos:line="29" pos:column="27">.<pos:position pos:line="29" pos:column="28"/></operator><name pos:line="29" pos:column="28">isHitNfmarkActive<pos:position pos:line="29" pos:column="45"/></name></name><argument_list pos:line="29" pos:column="45">()<pos:position pos:line="29" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="48"/></condition><then pos:line="29" pos:column="48"> <block pos:line="29" pos:column="49">{
        <if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><call><name><name pos:line="30" pos:column="13">Comm<pos:position pos:line="30" pos:column="17"/></name><operator pos:line="30" pos:column="17">::<pos:position pos:line="30" pos:column="19"/></operator><name pos:line="30" pos:column="19">IsConnOpen<pos:position pos:line="30" pos:column="29"/></name></name><argument_list pos:line="30" pos:column="29">(<argument><expr><name pos:line="30" pos:column="30">clientConn<pos:position pos:line="30" pos:column="40"/></name></expr></argument>)<pos:position pos:line="30" pos:column="41"/></argument_list></call> <operator pos:line="30" pos:column="42">&amp;&amp;<pos:position pos:line="30" pos:column="52"/></operator> <call><name><name pos:line="30" pos:column="45">Comm<pos:position pos:line="30" pos:column="49"/></name><operator pos:line="30" pos:column="49">::<pos:position pos:line="30" pos:column="51"/></operator><name pos:line="30" pos:column="51">IsConnOpen<pos:position pos:line="30" pos:column="61"/></name></name><argument_list pos:line="30" pos:column="61">(<argument><expr><call><name pos:line="30" pos:column="62">serverConnection<pos:position pos:line="30" pos:column="78"/></name><argument_list pos:line="30" pos:column="78">()<pos:position pos:line="30" pos:column="80"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="81"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="82"/></condition><then pos:line="30" pos:column="82"> <block pos:line="30" pos:column="83">{
            <decl_stmt><decl><type><name pos:line="31" pos:column="13">fde<pos:position pos:line="31" pos:column="16"/></name> <modifier pos:line="31" pos:column="17">*<pos:position pos:line="31" pos:column="18"/></modifier></type> <name pos:line="31" pos:column="19">clientFde<pos:position pos:line="31" pos:column="28"/></name> <init pos:line="31" pos:column="29">= <expr><operator pos:line="31" pos:column="31">&amp;<pos:position pos:line="31" pos:column="36"/></operator><name><name pos:line="31" pos:column="32">fd_table<pos:position pos:line="31" pos:column="40"/></name><index pos:line="31" pos:column="40">[<expr><name><name pos:line="31" pos:column="41">clientConn<pos:position pos:line="31" pos:column="51"/></name><operator pos:line="31" pos:column="51">-&gt;<pos:position pos:line="31" pos:column="56"/></operator><name pos:line="31" pos:column="53">fd<pos:position pos:line="31" pos:column="55"/></name></name></expr>]<pos:position pos:line="31" pos:column="56"/></index></name></expr></init></decl>;<pos:position pos:line="31" pos:column="57"/></decl_stmt> <comment type="line" pos:line="31" pos:column="58">// XXX: move the fd_table access into Ip::Qos</comment>
            <comment type="block" pos:line="32" pos:column="13">/* Get the netfilter mark for the connection */</comment>
            <expr_stmt><expr><call><name><name pos:line="33" pos:column="13">Ip<pos:position pos:line="33" pos:column="15"/></name><operator pos:line="33" pos:column="15">::<pos:position pos:line="33" pos:column="17"/></operator><name pos:line="33" pos:column="17">Qos<pos:position pos:line="33" pos:column="20"/></name><operator pos:line="33" pos:column="20">::<pos:position pos:line="33" pos:column="22"/></operator><name pos:line="33" pos:column="22">getNfmarkFromServer<pos:position pos:line="33" pos:column="41"/></name></name><argument_list pos:line="33" pos:column="41">(<argument><expr><call><name pos:line="33" pos:column="42">serverConnection<pos:position pos:line="33" pos:column="58"/></name><argument_list pos:line="33" pos:column="58">()<pos:position pos:line="33" pos:column="60"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="33" pos:column="62">clientFde<pos:position pos:line="33" pos:column="71"/></name></expr></argument>)<pos:position pos:line="33" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="73"/></expr_stmt>
        }<pos:position pos:line="34" pos:column="10"/></block></then></if>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>

<cpp:if pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">if<pos:position pos:line="37" pos:column="4"/></cpp:directive> <expr><name pos:line="37" pos:column="5">_SQUID_LINUX_<pos:position pos:line="37" pos:column="18"/></name></expr></cpp:if>
    <comment type="block" pos:line="38" pos:column="5">/* Bug 2537: The TOS forward part of QOS only applies to patched Linux kernels. */</comment>
    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><call><name><name pos:line="39" pos:column="9">Ip<pos:position pos:line="39" pos:column="11"/></name><operator pos:line="39" pos:column="11">::<pos:position pos:line="39" pos:column="13"/></operator><name pos:line="39" pos:column="13">Qos<pos:position pos:line="39" pos:column="16"/></name><operator pos:line="39" pos:column="16">::<pos:position pos:line="39" pos:column="18"/></operator><name pos:line="39" pos:column="18">TheConfig<pos:position pos:line="39" pos:column="27"/></name><operator pos:line="39" pos:column="27">.<pos:position pos:line="39" pos:column="28"/></operator><name pos:line="39" pos:column="28">isHitTosActive<pos:position pos:line="39" pos:column="42"/></name></name><argument_list pos:line="39" pos:column="42">()<pos:position pos:line="39" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="45"/></condition><then pos:line="39" pos:column="45"> <block pos:line="39" pos:column="46">{
        <if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><call><name><name pos:line="40" pos:column="13">Comm<pos:position pos:line="40" pos:column="17"/></name><operator pos:line="40" pos:column="17">::<pos:position pos:line="40" pos:column="19"/></operator><name pos:line="40" pos:column="19">IsConnOpen<pos:position pos:line="40" pos:column="29"/></name></name><argument_list pos:line="40" pos:column="29">(<argument><expr><name pos:line="40" pos:column="30">clientConn<pos:position pos:line="40" pos:column="40"/></name></expr></argument>)<pos:position pos:line="40" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="42"/></condition><then pos:line="40" pos:column="42"> <block pos:line="40" pos:column="43">{
            <decl_stmt><decl><type><name pos:line="41" pos:column="13">fde<pos:position pos:line="41" pos:column="16"/></name> <modifier pos:line="41" pos:column="17">*<pos:position pos:line="41" pos:column="18"/></modifier></type> <name pos:line="41" pos:column="19">clientFde<pos:position pos:line="41" pos:column="28"/></name> <init pos:line="41" pos:column="29">= <expr><operator pos:line="41" pos:column="31">&amp;<pos:position pos:line="41" pos:column="36"/></operator><name><name pos:line="41" pos:column="32">fd_table<pos:position pos:line="41" pos:column="40"/></name><index pos:line="41" pos:column="40">[<expr><name><name pos:line="41" pos:column="41">clientConn<pos:position pos:line="41" pos:column="51"/></name><operator pos:line="41" pos:column="51">-&gt;<pos:position pos:line="41" pos:column="56"/></operator><name pos:line="41" pos:column="53">fd<pos:position pos:line="41" pos:column="55"/></name></name></expr>]<pos:position pos:line="41" pos:column="56"/></index></name></expr></init></decl>;<pos:position pos:line="41" pos:column="57"/></decl_stmt> <comment type="line" pos:line="41" pos:column="58">// XXX: move the fd_table access into Ip::Qos</comment>
            <comment type="block" pos:line="42" pos:column="13">/* Get the TOS value for the packet */</comment>
            <expr_stmt><expr><call><name><name pos:line="43" pos:column="13">Ip<pos:position pos:line="43" pos:column="15"/></name><operator pos:line="43" pos:column="15">::<pos:position pos:line="43" pos:column="17"/></operator><name pos:line="43" pos:column="17">Qos<pos:position pos:line="43" pos:column="20"/></name><operator pos:line="43" pos:column="20">::<pos:position pos:line="43" pos:column="22"/></operator><name pos:line="43" pos:column="22">getTosFromServer<pos:position pos:line="43" pos:column="38"/></name></name><argument_list pos:line="43" pos:column="38">(<argument><expr><call><name pos:line="43" pos:column="39">serverConnection<pos:position pos:line="43" pos:column="55"/></name><argument_list pos:line="43" pos:column="55">()<pos:position pos:line="43" pos:column="57"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="43" pos:column="59">clientFde<pos:position pos:line="43" pos:column="68"/></name></expr></argument>)<pos:position pos:line="43" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="70"/></expr_stmt>
        }<pos:position pos:line="44" pos:column="10"/></block></then></if>
    }<pos:position pos:line="45" pos:column="6"/></block></then></if>
<cpp:endif pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">endif<pos:position pos:line="46" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">if<pos:position pos:line="48" pos:column="4"/></cpp:directive> <expr><name pos:line="48" pos:column="5">USE_OPENSSL<pos:position pos:line="48" pos:column="16"/></name></expr></cpp:if>
    <if pos:line="49" pos:column="5">if <condition pos:line="49" pos:column="8">(<expr><name><name pos:line="49" pos:column="9">request<pos:position pos:line="49" pos:column="16"/></name><operator pos:line="49" pos:column="16">-&gt;<pos:position pos:line="49" pos:column="21"/></operator><name pos:line="49" pos:column="18">flags<pos:position pos:line="49" pos:column="23"/></name><operator pos:line="49" pos:column="23">.<pos:position pos:line="49" pos:column="24"/></operator><name pos:line="49" pos:column="24">sslPeek<pos:position pos:line="49" pos:column="31"/></name></name></expr>)<pos:position pos:line="49" pos:column="32"/></condition><then pos:line="49" pos:column="32"> <block pos:line="49" pos:column="33">{
        <expr_stmt><expr><call><name pos:line="50" pos:column="9">CallJobHere1<pos:position pos:line="50" pos:column="21"/></name><argument_list pos:line="50" pos:column="21">(<argument><expr><literal type="number" pos:line="50" pos:column="22">17<pos:position pos:line="50" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="50" pos:column="26">4<pos:position pos:line="50" pos:column="27"/></literal></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="29">request<pos:position pos:line="50" pos:column="36"/></name><operator pos:line="50" pos:column="36">-&gt;<pos:position pos:line="50" pos:column="41"/></operator><name pos:line="50" pos:column="38">clientConnectionManager<pos:position pos:line="50" pos:column="61"/></name></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="63">ConnStateData<pos:position pos:line="50" pos:column="76"/></name></expr></argument>,
                     <argument><expr><name><name pos:line="51" pos:column="22">ConnStateData<pos:position pos:line="51" pos:column="35"/></name><operator pos:line="51" pos:column="35">::<pos:position pos:line="51" pos:column="37"/></operator><name pos:line="51" pos:column="37">httpsPeeked<pos:position pos:line="51" pos:column="48"/></name></name></expr></argument>, <argument><expr><call><name><name pos:line="51" pos:column="50">ConnStateData<pos:position pos:line="51" pos:column="63"/></name><operator pos:line="51" pos:column="63">::<pos:position pos:line="51" pos:column="65"/></operator><name pos:line="51" pos:column="65">PinnedIdleContext<pos:position pos:line="51" pos:column="82"/></name></name><argument_list pos:line="51" pos:column="82">(<argument><expr><call><name pos:line="51" pos:column="83">serverConnection<pos:position pos:line="51" pos:column="99"/></name><argument_list pos:line="51" pos:column="99">()<pos:position pos:line="51" pos:column="101"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="51" pos:column="103">request<pos:position pos:line="51" pos:column="110"/></name></expr></argument>)<pos:position pos:line="51" pos:column="111"/></argument_list></call></expr></argument>)<pos:position pos:line="51" pos:column="112"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="113"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="52" pos:column="9">unregister<pos:position pos:line="52" pos:column="19"/></name><argument_list pos:line="52" pos:column="19">(<argument><expr><name pos:line="52" pos:column="20">serverConn<pos:position pos:line="52" pos:column="30"/></name></expr></argument>)<pos:position pos:line="52" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="32"/></expr_stmt> <comment type="line" pos:line="52" pos:column="33">// async call owns it now</comment>
        <expr_stmt><expr><call><name pos:line="53" pos:column="9">complete<pos:position pos:line="53" pos:column="17"/></name><argument_list pos:line="53" pos:column="17">()<pos:position pos:line="53" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="20"/></expr_stmt> <comment type="line" pos:line="53" pos:column="21">// destroys us</comment>
        <return pos:line="54" pos:column="9">return;<pos:position pos:line="54" pos:column="16"/></return>
    }<pos:position pos:line="55" pos:column="6"/></block></then></if>
<cpp:endif pos:line="56" pos:column="1">#<cpp:directive pos:line="56" pos:column="2">endif<pos:position pos:line="56" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="58" pos:column="5">if <condition pos:line="58" pos:column="8">(<expr><call><name pos:line="58" pos:column="9">serverConnection<pos:position pos:line="58" pos:column="25"/></name><argument_list pos:line="58" pos:column="25">()<pos:position pos:line="58" pos:column="27"/></argument_list></call><operator pos:line="58" pos:column="27">-&gt;<pos:position pos:line="58" pos:column="32"/></operator><call><name pos:line="58" pos:column="29">getPeer<pos:position pos:line="58" pos:column="36"/></name><argument_list pos:line="58" pos:column="36">()<pos:position pos:line="58" pos:column="38"/></argument_list></call> <operator pos:line="58" pos:column="39">!=<pos:position pos:line="58" pos:column="41"/></operator> <name pos:line="58" pos:column="42">NULL<pos:position pos:line="58" pos:column="46"/></name></expr>)<pos:position pos:line="58" pos:column="47"/></condition><then pos:line="58" pos:column="47"> <block pos:line="58" pos:column="48">{
        <expr_stmt><expr><operator pos:line="59" pos:column="9">++<pos:position pos:line="59" pos:column="11"/></operator> <call><name pos:line="59" pos:column="12">serverConnection<pos:position pos:line="59" pos:column="28"/></name><argument_list pos:line="59" pos:column="28">()<pos:position pos:line="59" pos:column="30"/></argument_list></call><operator pos:line="59" pos:column="30">-&gt;<pos:position pos:line="59" pos:column="35"/></operator><call><name pos:line="59" pos:column="32">getPeer<pos:position pos:line="59" pos:column="39"/></name><argument_list pos:line="59" pos:column="39">()<pos:position pos:line="59" pos:column="41"/></argument_list></call><operator pos:line="59" pos:column="41">-&gt;<pos:position pos:line="59" pos:column="46"/></operator><name><name pos:line="59" pos:column="43">stats<pos:position pos:line="59" pos:column="48"/></name><operator pos:line="59" pos:column="48">.<pos:position pos:line="59" pos:column="49"/></operator><name pos:line="59" pos:column="49">fetches<pos:position pos:line="59" pos:column="56"/></name></name></expr>;<pos:position pos:line="59" pos:column="57"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="60" pos:column="9">request<pos:position pos:line="60" pos:column="16"/></name><operator pos:line="60" pos:column="16">-&gt;<pos:position pos:line="60" pos:column="21"/></operator><name pos:line="60" pos:column="18">peer_login<pos:position pos:line="60" pos:column="28"/></name></name> <operator pos:line="60" pos:column="29">=<pos:position pos:line="60" pos:column="30"/></operator> <call><name pos:line="60" pos:column="31">serverConnection<pos:position pos:line="60" pos:column="47"/></name><argument_list pos:line="60" pos:column="47">()<pos:position pos:line="60" pos:column="49"/></argument_list></call><operator pos:line="60" pos:column="49">-&gt;<pos:position pos:line="60" pos:column="54"/></operator><call><name pos:line="60" pos:column="51">getPeer<pos:position pos:line="60" pos:column="58"/></name><argument_list pos:line="60" pos:column="58">()<pos:position pos:line="60" pos:column="60"/></argument_list></call><operator pos:line="60" pos:column="60">-&gt;<pos:position pos:line="60" pos:column="65"/></operator><name pos:line="60" pos:column="62">login<pos:position pos:line="60" pos:column="67"/></name></expr>;<pos:position pos:line="60" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="61" pos:column="9">request<pos:position pos:line="61" pos:column="16"/></name><operator pos:line="61" pos:column="16">-&gt;<pos:position pos:line="61" pos:column="21"/></operator><name pos:line="61" pos:column="18">peer_domain<pos:position pos:line="61" pos:column="29"/></name></name> <operator pos:line="61" pos:column="30">=<pos:position pos:line="61" pos:column="31"/></operator> <call><name pos:line="61" pos:column="32">serverConnection<pos:position pos:line="61" pos:column="48"/></name><argument_list pos:line="61" pos:column="48">()<pos:position pos:line="61" pos:column="50"/></argument_list></call><operator pos:line="61" pos:column="50">-&gt;<pos:position pos:line="61" pos:column="55"/></operator><call><name pos:line="61" pos:column="52">getPeer<pos:position pos:line="61" pos:column="59"/></name><argument_list pos:line="61" pos:column="59">()<pos:position pos:line="61" pos:column="61"/></argument_list></call><operator pos:line="61" pos:column="61">-&gt;<pos:position pos:line="61" pos:column="66"/></operator><name pos:line="61" pos:column="63">domain<pos:position pos:line="61" pos:column="69"/></name></expr>;<pos:position pos:line="61" pos:column="70"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="62" pos:column="9">request<pos:position pos:line="62" pos:column="16"/></name><operator pos:line="62" pos:column="16">-&gt;<pos:position pos:line="62" pos:column="21"/></operator><name pos:line="62" pos:column="18">flags<pos:position pos:line="62" pos:column="23"/></name><operator pos:line="62" pos:column="23">.<pos:position pos:line="62" pos:column="24"/></operator><name pos:line="62" pos:column="24">auth_no_keytab<pos:position pos:line="62" pos:column="38"/></name></name> <operator pos:line="62" pos:column="39">=<pos:position pos:line="62" pos:column="40"/></operator> <call><name pos:line="62" pos:column="41">serverConnection<pos:position pos:line="62" pos:column="57"/></name><argument_list pos:line="62" pos:column="57">()<pos:position pos:line="62" pos:column="59"/></argument_list></call><operator pos:line="62" pos:column="59">-&gt;<pos:position pos:line="62" pos:column="64"/></operator><call><name pos:line="62" pos:column="61">getPeer<pos:position pos:line="62" pos:column="68"/></name><argument_list pos:line="62" pos:column="68">()<pos:position pos:line="62" pos:column="70"/></argument_list></call><operator pos:line="62" pos:column="70">-&gt;<pos:position pos:line="62" pos:column="75"/></operator><name><name pos:line="62" pos:column="72">options<pos:position pos:line="62" pos:column="79"/></name><operator pos:line="62" pos:column="79">.<pos:position pos:line="62" pos:column="80"/></operator><name pos:line="62" pos:column="80">auth_no_keytab<pos:position pos:line="62" pos:column="94"/></name></name></expr>;<pos:position pos:line="62" pos:column="95"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="63" pos:column="9">httpStart<pos:position pos:line="63" pos:column="18"/></name><argument_list pos:line="63" pos:column="18">(<argument><expr><name pos:line="63" pos:column="19">this<pos:position pos:line="63" pos:column="23"/></name></expr></argument>)<pos:position pos:line="63" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="64" pos:column="6"/></block></then> <else pos:line="64" pos:column="7">else <block pos:line="64" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="65" pos:column="9">assert<pos:position pos:line="65" pos:column="15"/></name><argument_list pos:line="65" pos:column="15">(<argument><expr><operator pos:line="65" pos:column="16">!<pos:position pos:line="65" pos:column="17"/></operator><name><name pos:line="65" pos:column="17">request<pos:position pos:line="65" pos:column="24"/></name><operator pos:line="65" pos:column="24">-&gt;<pos:position pos:line="65" pos:column="29"/></operator><name pos:line="65" pos:column="26">flags<pos:position pos:line="65" pos:column="31"/></name><operator pos:line="65" pos:column="31">.<pos:position pos:line="65" pos:column="32"/></operator><name pos:line="65" pos:column="32">sslPeek<pos:position pos:line="65" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="65" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="66" pos:column="9">request<pos:position pos:line="66" pos:column="16"/></name><operator pos:line="66" pos:column="16">-&gt;<pos:position pos:line="66" pos:column="21"/></operator><name pos:line="66" pos:column="18">peer_login<pos:position pos:line="66" pos:column="28"/></name></name> <operator pos:line="66" pos:column="29">=<pos:position pos:line="66" pos:column="30"/></operator> <name pos:line="66" pos:column="31">NULL<pos:position pos:line="66" pos:column="35"/></name></expr>;<pos:position pos:line="66" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="67" pos:column="9">request<pos:position pos:line="67" pos:column="16"/></name><operator pos:line="67" pos:column="16">-&gt;<pos:position pos:line="67" pos:column="21"/></operator><name pos:line="67" pos:column="18">peer_domain<pos:position pos:line="67" pos:column="29"/></name></name> <operator pos:line="67" pos:column="30">=<pos:position pos:line="67" pos:column="31"/></operator> <name pos:line="67" pos:column="32">NULL<pos:position pos:line="67" pos:column="36"/></name></expr>;<pos:position pos:line="67" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="68" pos:column="9">request<pos:position pos:line="68" pos:column="16"/></name><operator pos:line="68" pos:column="16">-&gt;<pos:position pos:line="68" pos:column="21"/></operator><name pos:line="68" pos:column="18">flags<pos:position pos:line="68" pos:column="23"/></name><operator pos:line="68" pos:column="23">.<pos:position pos:line="68" pos:column="24"/></operator><name pos:line="68" pos:column="24">auth_no_keytab<pos:position pos:line="68" pos:column="38"/></name></name> <operator pos:line="68" pos:column="39">=<pos:position pos:line="68" pos:column="40"/></operator> <literal type="number" pos:line="68" pos:column="41">0<pos:position pos:line="68" pos:column="42"/></literal></expr>;<pos:position pos:line="68" pos:column="43"/></expr_stmt>

        <switch pos:line="70" pos:column="9">switch <condition pos:line="70" pos:column="16">(<expr><call><name><name pos:line="70" pos:column="17">request<pos:position pos:line="70" pos:column="24"/></name><operator pos:line="70" pos:column="24">-&gt;<pos:position pos:line="70" pos:column="29"/></operator><name pos:line="70" pos:column="26">url<pos:position pos:line="70" pos:column="29"/></name><operator pos:line="70" pos:column="29">.<pos:position pos:line="70" pos:column="30"/></operator><name pos:line="70" pos:column="30">getScheme<pos:position pos:line="70" pos:column="39"/></name></name><argument_list pos:line="70" pos:column="39">()<pos:position pos:line="70" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="70" pos:column="42"/></condition> <block pos:line="70" pos:column="43">{

        <case pos:line="72" pos:column="9">case <expr><name><name pos:line="72" pos:column="14">AnyP<pos:position pos:line="72" pos:column="18"/></name><operator pos:line="72" pos:column="18">::<pos:position pos:line="72" pos:column="20"/></operator><name pos:line="72" pos:column="20">PROTO_HTTPS<pos:position pos:line="72" pos:column="31"/></name></name></expr>:<pos:position pos:line="72" pos:column="32"/></case>
            <expr_stmt><expr><call><name pos:line="73" pos:column="13">httpStart<pos:position pos:line="73" pos:column="22"/></name><argument_list pos:line="73" pos:column="22">(<argument><expr><name pos:line="73" pos:column="23">this<pos:position pos:line="73" pos:column="27"/></name></expr></argument>)<pos:position pos:line="73" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="29"/></expr_stmt>
            <break pos:line="74" pos:column="13">break;<pos:position pos:line="74" pos:column="19"/></break>

        <case pos:line="76" pos:column="9">case <expr><name><name pos:line="76" pos:column="14">AnyP<pos:position pos:line="76" pos:column="18"/></name><operator pos:line="76" pos:column="18">::<pos:position pos:line="76" pos:column="20"/></operator><name pos:line="76" pos:column="20">PROTO_HTTP<pos:position pos:line="76" pos:column="30"/></name></name></expr>:<pos:position pos:line="76" pos:column="31"/></case>
            <expr_stmt><expr><call><name pos:line="77" pos:column="13">httpStart<pos:position pos:line="77" pos:column="22"/></name><argument_list pos:line="77" pos:column="22">(<argument><expr><name pos:line="77" pos:column="23">this<pos:position pos:line="77" pos:column="27"/></name></expr></argument>)<pos:position pos:line="77" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="29"/></expr_stmt>
            <break pos:line="78" pos:column="13">break;<pos:position pos:line="78" pos:column="19"/></break>

        <case pos:line="80" pos:column="9">case <expr><name><name pos:line="80" pos:column="14">AnyP<pos:position pos:line="80" pos:column="18"/></name><operator pos:line="80" pos:column="18">::<pos:position pos:line="80" pos:column="20"/></operator><name pos:line="80" pos:column="20">PROTO_GOPHER<pos:position pos:line="80" pos:column="32"/></name></name></expr>:<pos:position pos:line="80" pos:column="33"/></case>
            <expr_stmt><expr><call><name pos:line="81" pos:column="13">gopherStart<pos:position pos:line="81" pos:column="24"/></name><argument_list pos:line="81" pos:column="24">(<argument><expr><name pos:line="81" pos:column="25">this<pos:position pos:line="81" pos:column="29"/></name></expr></argument>)<pos:position pos:line="81" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="31"/></expr_stmt>
            <break pos:line="82" pos:column="13">break;<pos:position pos:line="82" pos:column="19"/></break>

        <case pos:line="84" pos:column="9">case <expr><name><name pos:line="84" pos:column="14">AnyP<pos:position pos:line="84" pos:column="18"/></name><operator pos:line="84" pos:column="18">::<pos:position pos:line="84" pos:column="20"/></operator><name pos:line="84" pos:column="20">PROTO_FTP<pos:position pos:line="84" pos:column="29"/></name></name></expr>:<pos:position pos:line="84" pos:column="30"/></case>
            <if pos:line="85" pos:column="13">if <condition pos:line="85" pos:column="16">(<expr><name><name pos:line="85" pos:column="17">request<pos:position pos:line="85" pos:column="24"/></name><operator pos:line="85" pos:column="24">-&gt;<pos:position pos:line="85" pos:column="29"/></operator><name pos:line="85" pos:column="26">flags<pos:position pos:line="85" pos:column="31"/></name><operator pos:line="85" pos:column="31">.<pos:position pos:line="85" pos:column="32"/></operator><name pos:line="85" pos:column="32">ftpNative<pos:position pos:line="85" pos:column="41"/></name></name></expr>)<pos:position pos:line="85" pos:column="42"/></condition><then pos:line="85" pos:column="42">
                <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="86" pos:column="17">Ftp<pos:position pos:line="86" pos:column="20"/></name><operator pos:line="86" pos:column="20">::<pos:position pos:line="86" pos:column="22"/></operator><name pos:line="86" pos:column="22">StartRelay<pos:position pos:line="86" pos:column="32"/></name></name><argument_list pos:line="86" pos:column="32">(<argument><expr><name pos:line="86" pos:column="33">this<pos:position pos:line="86" pos:column="37"/></name></expr></argument>)<pos:position pos:line="86" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="39"/></expr_stmt></block></then>
            <else pos:line="87" pos:column="13">else
                <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="88" pos:column="17">Ftp<pos:position pos:line="88" pos:column="20"/></name><operator pos:line="88" pos:column="20">::<pos:position pos:line="88" pos:column="22"/></operator><name pos:line="88" pos:column="22">StartGateway<pos:position pos:line="88" pos:column="34"/></name></name><argument_list pos:line="88" pos:column="34">(<argument><expr><name pos:line="88" pos:column="35">this<pos:position pos:line="88" pos:column="39"/></name></expr></argument>)<pos:position pos:line="88" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="41"/></expr_stmt></block></else></if>
            <break pos:line="89" pos:column="13">break;<pos:position pos:line="89" pos:column="19"/></break>

        <case pos:line="91" pos:column="9">case <expr><name><name pos:line="91" pos:column="14">AnyP<pos:position pos:line="91" pos:column="18"/></name><operator pos:line="91" pos:column="18">::<pos:position pos:line="91" pos:column="20"/></operator><name pos:line="91" pos:column="20">PROTO_CACHE_OBJECT<pos:position pos:line="91" pos:column="38"/></name></name></expr>:<pos:position pos:line="91" pos:column="39"/></case>

        <case pos:line="93" pos:column="9">case <expr><name><name pos:line="93" pos:column="14">AnyP<pos:position pos:line="93" pos:column="18"/></name><operator pos:line="93" pos:column="18">::<pos:position pos:line="93" pos:column="20"/></operator><name pos:line="93" pos:column="20">PROTO_URN<pos:position pos:line="93" pos:column="29"/></name></name></expr>:<pos:position pos:line="93" pos:column="30"/></case>
            <expr_stmt><expr><call><name pos:line="94" pos:column="13">fatal_dump<pos:position pos:line="94" pos:column="23"/></name><argument_list pos:line="94" pos:column="23">(<argument><expr><literal type="string" pos:line="94" pos:column="24">"Should never get here"<pos:position pos:line="94" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="94" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="49"/></expr_stmt>
            <break pos:line="95" pos:column="13">break;<pos:position pos:line="95" pos:column="19"/></break>

        <case pos:line="97" pos:column="9">case <expr><name><name pos:line="97" pos:column="14">AnyP<pos:position pos:line="97" pos:column="18"/></name><operator pos:line="97" pos:column="18">::<pos:position pos:line="97" pos:column="20"/></operator><name pos:line="97" pos:column="20">PROTO_WHOIS<pos:position pos:line="97" pos:column="31"/></name></name></expr>:<pos:position pos:line="97" pos:column="32"/></case>
            <expr_stmt><expr><call><name pos:line="98" pos:column="13">whoisStart<pos:position pos:line="98" pos:column="23"/></name><argument_list pos:line="98" pos:column="23">(<argument><expr><name pos:line="98" pos:column="24">this<pos:position pos:line="98" pos:column="28"/></name></expr></argument>)<pos:position pos:line="98" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="30"/></expr_stmt>
            <break pos:line="99" pos:column="13">break;<pos:position pos:line="99" pos:column="19"/></break>

        <case pos:line="101" pos:column="9">case <expr><name><name pos:line="101" pos:column="14">AnyP<pos:position pos:line="101" pos:column="18"/></name><operator pos:line="101" pos:column="18">::<pos:position pos:line="101" pos:column="20"/></operator><name pos:line="101" pos:column="20">PROTO_WAIS<pos:position pos:line="101" pos:column="30"/></name></name></expr>:<pos:position pos:line="101" pos:column="31"/></case>  <comment type="block" pos:line="101" pos:column="33">/* Not implemented */</comment>

        <default pos:line="103" pos:column="9">default:<pos:position pos:line="103" pos:column="17"/></default>
            <expr_stmt><expr><call><name pos:line="104" pos:column="13">debugs<pos:position pos:line="104" pos:column="19"/></name><argument_list pos:line="104" pos:column="19">(<argument><expr><literal type="number" pos:line="104" pos:column="20">17<pos:position pos:line="104" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="104" pos:column="24">DBG_IMPORTANT<pos:position pos:line="104" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="104" pos:column="39">"WARNING: Cannot retrieve '"<pos:position pos:line="104" pos:column="67"/></literal> <operator pos:line="104" pos:column="68">&lt;&lt;<pos:position pos:line="104" pos:column="76"/></operator> <call><name><name pos:line="104" pos:column="71">entry<pos:position pos:line="104" pos:column="76"/></name><operator pos:line="104" pos:column="76">-&gt;<pos:position pos:line="104" pos:column="81"/></operator><name pos:line="104" pos:column="78">url<pos:position pos:line="104" pos:column="81"/></name></name><argument_list pos:line="104" pos:column="81">()<pos:position pos:line="104" pos:column="83"/></argument_list></call> <operator pos:line="104" pos:column="84">&lt;&lt;<pos:position pos:line="104" pos:column="92"/></operator> <literal type="string" pos:line="104" pos:column="87">"'."<pos:position pos:line="104" pos:column="91"/></literal></expr></argument>)<pos:position pos:line="104" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="93"/></expr_stmt>
            <decl_stmt><decl><type><name pos:line="105" pos:column="13">ErrorState<pos:position pos:line="105" pos:column="23"/></name> <modifier pos:line="105" pos:column="24">*<pos:position pos:line="105" pos:column="25"/></modifier></type><name pos:line="105" pos:column="25">anErr<pos:position pos:line="105" pos:column="30"/></name> <init pos:line="105" pos:column="31">= <expr><operator pos:line="105" pos:column="33">new<pos:position pos:line="105" pos:column="36"/></operator> <call><name pos:line="105" pos:column="37">ErrorState<pos:position pos:line="105" pos:column="47"/></name><argument_list pos:line="105" pos:column="47">(<argument><expr><name pos:line="105" pos:column="48">ERR_UNSUP_REQ<pos:position pos:line="105" pos:column="61"/></name></expr></argument>, <argument><expr><name><name pos:line="105" pos:column="63">Http<pos:position pos:line="105" pos:column="67"/></name><operator pos:line="105" pos:column="67">::<pos:position pos:line="105" pos:column="69"/></operator><name pos:line="105" pos:column="69">scBadRequest<pos:position pos:line="105" pos:column="81"/></name></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="83">request<pos:position pos:line="105" pos:column="90"/></name></expr></argument>)<pos:position pos:line="105" pos:column="91"/></argument_list></call></expr></init></decl>;<pos:position pos:line="105" pos:column="92"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="106" pos:column="13">fail<pos:position pos:line="106" pos:column="17"/></name><argument_list pos:line="106" pos:column="17">(<argument><expr><name pos:line="106" pos:column="18">anErr<pos:position pos:line="106" pos:column="23"/></name></expr></argument>)<pos:position pos:line="106" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="25"/></expr_stmt>
            <comment type="line" pos:line="107" pos:column="13">// Set the dont_retry flag because this is not a transient (network) error.</comment>
            <expr_stmt><expr><name><name pos:line="108" pos:column="13">flags<pos:position pos:line="108" pos:column="18"/></name><operator pos:line="108" pos:column="18">.<pos:position pos:line="108" pos:column="19"/></operator><name pos:line="108" pos:column="19">dont_retry<pos:position pos:line="108" pos:column="29"/></name></name> <operator pos:line="108" pos:column="30">=<pos:position pos:line="108" pos:column="31"/></operator> <literal type="boolean" pos:line="108" pos:column="32">true<pos:position pos:line="108" pos:column="36"/></literal></expr>;<pos:position pos:line="108" pos:column="37"/></expr_stmt>
            <if pos:line="109" pos:column="13">if <condition pos:line="109" pos:column="16">(<expr><call><name><name pos:line="109" pos:column="17">Comm<pos:position pos:line="109" pos:column="21"/></name><operator pos:line="109" pos:column="21">::<pos:position pos:line="109" pos:column="23"/></operator><name pos:line="109" pos:column="23">IsConnOpen<pos:position pos:line="109" pos:column="33"/></name></name><argument_list pos:line="109" pos:column="33">(<argument><expr><name pos:line="109" pos:column="34">serverConn<pos:position pos:line="109" pos:column="44"/></name></expr></argument>)<pos:position pos:line="109" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="109" pos:column="46"/></condition><then pos:line="109" pos:column="46"> <block pos:line="109" pos:column="47">{
                <expr_stmt><expr><call><name><name pos:line="110" pos:column="17">serverConn<pos:position pos:line="110" pos:column="27"/></name><operator pos:line="110" pos:column="27">-&gt;<pos:position pos:line="110" pos:column="32"/></operator><name pos:line="110" pos:column="29">close<pos:position pos:line="110" pos:column="34"/></name></name><argument_list pos:line="110" pos:column="34">()<pos:position pos:line="110" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="37"/></expr_stmt>
            }<pos:position pos:line="111" pos:column="14"/></block></then></if>
            <break pos:line="112" pos:column="13">break;<pos:position pos:line="112" pos:column="19"/></break>
        }<pos:position pos:line="113" pos:column="10"/></block></switch>
    }<pos:position pos:line="114" pos:column="6"/></block></else></if>
}<pos:position pos:line="115" pos:column="2"/></block></function></unit>
