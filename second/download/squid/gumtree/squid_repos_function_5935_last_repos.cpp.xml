<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5935_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">process_options<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name pos:line="2" pos:column="17">int<pos:position pos:line="2" pos:column="20"/></name></type> <name pos:line="2" pos:column="21">argc<pos:position pos:line="2" pos:column="25"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="27">char<pos:position pos:line="2" pos:column="31"/></name> <modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type><name><name pos:line="2" pos:column="33">argv<pos:position pos:line="2" pos:column="37"/></name><index pos:line="2" pos:column="37">[]<pos:position pos:line="2" pos:column="39"/></index></name></decl></parameter>)<pos:position pos:line="2" pos:column="40"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">opt<pos:position pos:line="4" pos:column="12"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="14">j<pos:position pos:line="4" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="17">had_error<pos:position pos:line="4" pos:column="26"/></name> <init pos:line="4" pos:column="27">= <expr><literal type="number" pos:line="4" pos:column="29">0<pos:position pos:line="4" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">dc<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">new_dc<pos:position pos:line="5" pos:column="15"/></name> <init pos:line="5" pos:column="16">= <expr><name pos:line="5" pos:column="18">NULL<pos:position pos:line="5" pos:column="22"/></name></expr></init></decl>, <modifier pos:line="5" pos:column="24">*<pos:position pos:line="5" pos:column="25"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="25">last_dc<pos:position pos:line="5" pos:column="32"/></name> <init pos:line="5" pos:column="33">= <expr><name pos:line="5" pos:column="35">NULL<pos:position pos:line="5" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="40"/></decl_stmt>
    <while pos:line="6" pos:column="5">while <condition pos:line="6" pos:column="11">(<expr><operator pos:line="6" pos:column="12">-<pos:position pos:line="6" pos:column="13"/></operator><literal type="number" pos:line="6" pos:column="13">1<pos:position pos:line="6" pos:column="14"/></literal> <operator pos:line="6" pos:column="15">!=<pos:position pos:line="6" pos:column="17"/></operator> <operator pos:line="6" pos:column="18">(<pos:position pos:line="6" pos:column="19"/></operator><name pos:line="6" pos:column="19">opt<pos:position pos:line="6" pos:column="22"/></name> <operator pos:line="6" pos:column="23">=<pos:position pos:line="6" pos:column="24"/></operator> <call><name pos:line="6" pos:column="25">getopt<pos:position pos:line="6" pos:column="31"/></name><argument_list pos:line="6" pos:column="31">(<argument><expr><name pos:line="6" pos:column="32">argc<pos:position pos:line="6" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="38">argv<pos:position pos:line="6" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="44">"bfld"<pos:position pos:line="6" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="51"/></argument_list></call><operator pos:line="6" pos:column="51">)<pos:position pos:line="6" pos:column="52"/></operator></expr>)<pos:position pos:line="6" pos:column="53"/></condition> <block pos:line="6" pos:column="54">{
        <switch pos:line="7" pos:column="9">switch <condition pos:line="7" pos:column="16">(<expr><name pos:line="7" pos:column="17">opt<pos:position pos:line="7" pos:column="20"/></name></expr>)<pos:position pos:line="7" pos:column="21"/></condition> <block pos:line="7" pos:column="22">{
        <case pos:line="8" pos:column="9">case <expr><literal type="char" pos:line="8" pos:column="14">'b'<pos:position pos:line="8" pos:column="17"/></literal></expr>:<pos:position pos:line="8" pos:column="18"/></case>
            <expr_stmt><expr><name pos:line="9" pos:column="13">load_balance<pos:position pos:line="9" pos:column="25"/></name> <operator pos:line="9" pos:column="26">=<pos:position pos:line="9" pos:column="27"/></operator> <literal type="number" pos:line="9" pos:column="28">1<pos:position pos:line="9" pos:column="29"/></literal></expr>;<pos:position pos:line="9" pos:column="30"/></expr_stmt>
            <break pos:line="10" pos:column="13">break;<pos:position pos:line="10" pos:column="19"/></break>
        <case pos:line="11" pos:column="9">case <expr><literal type="char" pos:line="11" pos:column="14">'f'<pos:position pos:line="11" pos:column="17"/></literal></expr>:<pos:position pos:line="11" pos:column="18"/></case>
            <expr_stmt><expr><call><name pos:line="12" pos:column="13">fprintf<pos:position pos:line="12" pos:column="20"/></name><argument_list pos:line="12" pos:column="20">(<argument><expr><name pos:line="12" pos:column="21">stderr<pos:position pos:line="12" pos:column="27"/></name></expr></argument>,
                    <argument><expr><literal type="string" pos:line="13" pos:column="21">"WARNING. The -f flag is DEPRECATED and always active.\n"<pos:position pos:line="13" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="80"/></expr_stmt>
            <break pos:line="14" pos:column="13">break;<pos:position pos:line="14" pos:column="19"/></break>
        <case pos:line="15" pos:column="9">case <expr><literal type="char" pos:line="15" pos:column="14">'d'<pos:position pos:line="15" pos:column="17"/></literal></expr>:<pos:position pos:line="15" pos:column="18"/></case>
            <expr_stmt><expr><name pos:line="16" pos:column="13">debug_enabled<pos:position pos:line="16" pos:column="26"/></name><operator pos:line="16" pos:column="26">=<pos:position pos:line="16" pos:column="27"/></operator><literal type="number" pos:line="16" pos:column="27">1<pos:position pos:line="16" pos:column="28"/></literal></expr>;<pos:position pos:line="16" pos:column="29"/></expr_stmt>
            <break pos:line="17" pos:column="13">break;<pos:position pos:line="17" pos:column="19"/></break>
        <default pos:line="18" pos:column="9">default:<pos:position pos:line="18" pos:column="17"/></default>
            <expr_stmt><expr><call><name pos:line="19" pos:column="13">fprintf<pos:position pos:line="19" pos:column="20"/></name><argument_list pos:line="19" pos:column="20">(<argument><expr><name pos:line="19" pos:column="21">stderr<pos:position pos:line="19" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="29">"unknown option: -%c. Exiting\n"<pos:position pos:line="19" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="63">opt<pos:position pos:line="19" pos:column="66"/></name></expr></argument>)<pos:position pos:line="19" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="68"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="20" pos:column="13">usage<pos:position pos:line="20" pos:column="18"/></name><argument_list pos:line="20" pos:column="18">()<pos:position pos:line="20" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="21"/></expr_stmt>
            <expr_stmt><expr><name pos:line="21" pos:column="13">had_error<pos:position pos:line="21" pos:column="22"/></name> <operator pos:line="21" pos:column="23">=<pos:position pos:line="21" pos:column="24"/></operator> <literal type="number" pos:line="21" pos:column="25">1<pos:position pos:line="21" pos:column="26"/></literal></expr>;<pos:position pos:line="21" pos:column="27"/></expr_stmt>
        }<pos:position pos:line="22" pos:column="10"/></block></switch>
    }<pos:position pos:line="23" pos:column="6"/></block></while>
    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><name pos:line="24" pos:column="9">had_error<pos:position pos:line="24" pos:column="18"/></name></expr>)<pos:position pos:line="24" pos:column="19"/></condition><then pos:line="24" pos:column="19">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="9">exit<pos:position pos:line="25" pos:column="13"/></name><argument_list pos:line="25" pos:column="13">(<argument><expr><literal type="number" pos:line="25" pos:column="14">1<pos:position pos:line="25" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="17"/></expr_stmt></block></then></if>
    <comment type="block" pos:line="26" pos:column="5">/* Okay, now begin filling controllers up */</comment>
    <comment type="block" pos:line="27" pos:column="5">/* we can avoid memcpy-ing, and just reuse argv[] */</comment>
    <for pos:line="28" pos:column="5">for <control pos:line="28" pos:column="9">(<init><expr><name pos:line="28" pos:column="10">j<pos:position pos:line="28" pos:column="11"/></name> <operator pos:line="28" pos:column="12">=<pos:position pos:line="28" pos:column="13"/></operator> <name pos:line="28" pos:column="14">optind<pos:position pos:line="28" pos:column="20"/></name></expr>;<pos:position pos:line="28" pos:column="21"/></init> <condition><expr><name pos:line="28" pos:column="22">j<pos:position pos:line="28" pos:column="23"/></name> <operator pos:line="28" pos:column="24">&lt;<pos:position pos:line="28" pos:column="28"/></operator> <name pos:line="28" pos:column="26">argc<pos:position pos:line="28" pos:column="30"/></name></expr>;<pos:position pos:line="28" pos:column="31"/></condition> <incr><expr><operator pos:line="28" pos:column="32">++<pos:position pos:line="28" pos:column="34"/></operator><name pos:line="28" pos:column="34">j<pos:position pos:line="28" pos:column="35"/></name></expr></incr>)<pos:position pos:line="28" pos:column="36"/></control> <block pos:line="28" pos:column="37">{
        <decl_stmt><decl><type><name pos:line="29" pos:column="9">char<pos:position pos:line="29" pos:column="13"/></name> <modifier pos:line="29" pos:column="14">*<pos:position pos:line="29" pos:column="15"/></modifier></type><name pos:line="29" pos:column="15">d<pos:position pos:line="29" pos:column="16"/></name></decl>, <modifier pos:line="29" pos:column="18">*<pos:position pos:line="29" pos:column="19"/></modifier><decl><type ref="prev"/><name pos:line="29" pos:column="19">c<pos:position pos:line="29" pos:column="20"/></name></decl>;<pos:position pos:line="29" pos:column="21"/></decl_stmt>
        <comment type="block" pos:line="30" pos:column="9">/* d will not be freed in case of non-error. Since we don't reconfigure,
         * it's going to live as long as the process anyways */</comment>
        <expr_stmt><expr><name pos:line="32" pos:column="9">d<pos:position pos:line="32" pos:column="10"/></name> <operator pos:line="32" pos:column="11">=<pos:position pos:line="32" pos:column="12"/></operator> <cast type="static" pos:line="32" pos:column="13">static_cast<argument_list type="generic" pos:line="32" pos:column="24">&lt;<argument><expr><name pos:line="32" pos:column="25">char<pos:position pos:line="32" pos:column="29"/></name><operator pos:line="32" pos:column="29">*<pos:position pos:line="32" pos:column="30"/></operator></expr></argument>&gt;<pos:position pos:line="32" pos:column="34"/></argument_list><argument_list pos:line="32" pos:column="31">(<argument><expr><call><name pos:line="32" pos:column="32">xmalloc<pos:position pos:line="32" pos:column="39"/></name><argument_list pos:line="32" pos:column="39">(<argument><expr><call><name pos:line="32" pos:column="40">strlen<pos:position pos:line="32" pos:column="46"/></name><argument_list pos:line="32" pos:column="46">(<argument><expr><name><name pos:line="32" pos:column="47">argv<pos:position pos:line="32" pos:column="51"/></name><index pos:line="32" pos:column="51">[<expr><name pos:line="32" pos:column="52">j<pos:position pos:line="32" pos:column="53"/></name></expr>]<pos:position pos:line="32" pos:column="54"/></index></name></expr></argument>)<pos:position pos:line="32" pos:column="55"/></argument_list></call> <operator pos:line="32" pos:column="56">+<pos:position pos:line="32" pos:column="57"/></operator> <literal type="number" pos:line="32" pos:column="58">1<pos:position pos:line="32" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="32" pos:column="61"/></argument_list></cast></expr>;<pos:position pos:line="32" pos:column="62"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="33" pos:column="9">strcpy<pos:position pos:line="33" pos:column="15"/></name><argument_list pos:line="33" pos:column="15">(<argument><expr><name pos:line="33" pos:column="16">d<pos:position pos:line="33" pos:column="17"/></name></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="19">argv<pos:position pos:line="33" pos:column="23"/></name><index pos:line="33" pos:column="23">[<expr><name pos:line="33" pos:column="24">j<pos:position pos:line="33" pos:column="25"/></name></expr>]<pos:position pos:line="33" pos:column="26"/></index></name></expr></argument>)<pos:position pos:line="33" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="28"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="34" pos:column="9">debug<pos:position pos:line="34" pos:column="14"/></name><argument_list pos:line="34" pos:column="14">(<argument><expr><literal type="string" pos:line="34" pos:column="15">"Adding domain-controller %s\n"<pos:position pos:line="34" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="48">d<pos:position pos:line="34" pos:column="49"/></name></expr></argument>)<pos:position pos:line="34" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="51"/></expr_stmt>
        <if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><name pos:line="35" pos:column="13">NULL<pos:position pos:line="35" pos:column="17"/></name> <operator pos:line="35" pos:column="18">==<pos:position pos:line="35" pos:column="20"/></operator> <operator pos:line="35" pos:column="21">(<pos:position pos:line="35" pos:column="22"/></operator><name pos:line="35" pos:column="22">c<pos:position pos:line="35" pos:column="23"/></name> <operator pos:line="35" pos:column="24">=<pos:position pos:line="35" pos:column="25"/></operator> <call><name pos:line="35" pos:column="26">strchr<pos:position pos:line="35" pos:column="32"/></name><argument_list pos:line="35" pos:column="32">(<argument><expr><name pos:line="35" pos:column="33">d<pos:position pos:line="35" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="35" pos:column="36">'\\'<pos:position pos:line="35" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="41"/></argument_list></call><operator pos:line="35" pos:column="41">)<pos:position pos:line="35" pos:column="42"/></operator> <operator pos:line="35" pos:column="43">&amp;&amp;<pos:position pos:line="35" pos:column="53"/></operator> <name pos:line="35" pos:column="46">NULL<pos:position pos:line="35" pos:column="50"/></name> <operator pos:line="35" pos:column="51">==<pos:position pos:line="35" pos:column="53"/></operator> <operator pos:line="35" pos:column="54">(<pos:position pos:line="35" pos:column="55"/></operator><name pos:line="35" pos:column="55">c<pos:position pos:line="35" pos:column="56"/></name> <operator pos:line="35" pos:column="57">=<pos:position pos:line="35" pos:column="58"/></operator> <call><name pos:line="35" pos:column="59">strchr<pos:position pos:line="35" pos:column="65"/></name><argument_list pos:line="35" pos:column="65">(<argument><expr><name pos:line="35" pos:column="66">d<pos:position pos:line="35" pos:column="67"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="35" pos:column="69">'/'<pos:position pos:line="35" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="73"/></argument_list></call><operator pos:line="35" pos:column="73">)<pos:position pos:line="35" pos:column="74"/></operator></expr>)<pos:position pos:line="35" pos:column="75"/></condition><then pos:line="35" pos:column="75"> <block pos:line="35" pos:column="76">{
            <expr_stmt><expr><call><name pos:line="36" pos:column="13">fprintf<pos:position pos:line="36" pos:column="20"/></name><argument_list pos:line="36" pos:column="20">(<argument><expr><name pos:line="36" pos:column="21">stderr<pos:position pos:line="36" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="29">"Couldn't grok domain-controller %s\n"<pos:position pos:line="36" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="69">d<pos:position pos:line="36" pos:column="70"/></name></expr></argument>)<pos:position pos:line="36" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="72"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="37" pos:column="13">free<pos:position pos:line="37" pos:column="17"/></name><argument_list pos:line="37" pos:column="17">(<argument><expr><name pos:line="37" pos:column="18">d<pos:position pos:line="37" pos:column="19"/></name></expr></argument>)<pos:position pos:line="37" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="21"/></expr_stmt>
            <continue pos:line="38" pos:column="13">continue;<pos:position pos:line="38" pos:column="22"/></continue>
        }<pos:position pos:line="39" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="40" pos:column="9">/* more than one delimiter is not allowed */</comment>
        <if pos:line="41" pos:column="9">if <condition pos:line="41" pos:column="12">(<expr><name pos:line="41" pos:column="13">NULL<pos:position pos:line="41" pos:column="17"/></name> <operator pos:line="41" pos:column="18">!=<pos:position pos:line="41" pos:column="20"/></operator> <call><name pos:line="41" pos:column="21">strchr<pos:position pos:line="41" pos:column="27"/></name><argument_list pos:line="41" pos:column="27">(<argument><expr><name pos:line="41" pos:column="28">c<pos:position pos:line="41" pos:column="29"/></name> <operator pos:line="41" pos:column="30">+<pos:position pos:line="41" pos:column="31"/></operator> <literal type="number" pos:line="41" pos:column="32">1<pos:position pos:line="41" pos:column="33"/></literal></expr></argument>, <argument><expr><literal type="char" pos:line="41" pos:column="35">'\\'<pos:position pos:line="41" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="40"/></argument_list></call> <operator pos:line="41" pos:column="41">||<pos:position pos:line="41" pos:column="43"/></operator> <name pos:line="41" pos:column="44">NULL<pos:position pos:line="41" pos:column="48"/></name> <operator pos:line="41" pos:column="49">!=<pos:position pos:line="41" pos:column="51"/></operator> <call><name pos:line="41" pos:column="52">strchr<pos:position pos:line="41" pos:column="58"/></name><argument_list pos:line="41" pos:column="58">(<argument><expr><name pos:line="41" pos:column="59">c<pos:position pos:line="41" pos:column="60"/></name> <operator pos:line="41" pos:column="61">+<pos:position pos:line="41" pos:column="62"/></operator> <literal type="number" pos:line="41" pos:column="63">1<pos:position pos:line="41" pos:column="64"/></literal></expr></argument>, <argument><expr><literal type="char" pos:line="41" pos:column="66">'/'<pos:position pos:line="41" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="71"/></condition><then pos:line="41" pos:column="71"> <block pos:line="41" pos:column="72">{
            <expr_stmt><expr><call><name pos:line="42" pos:column="13">fprintf<pos:position pos:line="42" pos:column="20"/></name><argument_list pos:line="42" pos:column="20">(<argument><expr><name pos:line="42" pos:column="21">stderr<pos:position pos:line="42" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="29">"Broken domain-controller %s\n"<pos:position pos:line="42" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="62">d<pos:position pos:line="42" pos:column="63"/></name></expr></argument>)<pos:position pos:line="42" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="65"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="43" pos:column="13">free<pos:position pos:line="43" pos:column="17"/></name><argument_list pos:line="43" pos:column="17">(<argument><expr><name pos:line="43" pos:column="18">d<pos:position pos:line="43" pos:column="19"/></name></expr></argument>)<pos:position pos:line="43" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="21"/></expr_stmt>
            <continue pos:line="44" pos:column="13">continue;<pos:position pos:line="44" pos:column="22"/></continue>
        }<pos:position pos:line="45" pos:column="10"/></block></then></if>
        <expr_stmt><expr><operator pos:line="46" pos:column="9">*<pos:position pos:line="46" pos:column="10"/></operator><name pos:line="46" pos:column="10">c<pos:position pos:line="46" pos:column="11"/></name><operator pos:line="46" pos:column="11">=<pos:position pos:line="46" pos:column="12"/></operator> <literal type="char" pos:line="46" pos:column="13">'\0'<pos:position pos:line="46" pos:column="17"/></literal></expr>;<pos:position pos:line="46" pos:column="18"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="47" pos:column="9">++<pos:position pos:line="47" pos:column="11"/></operator><name pos:line="47" pos:column="11">c<pos:position pos:line="47" pos:column="12"/></name></expr>;<pos:position pos:line="47" pos:column="13"/></expr_stmt>
        <expr_stmt><expr><name pos:line="48" pos:column="9">new_dc<pos:position pos:line="48" pos:column="15"/></name> <operator pos:line="48" pos:column="16">=<pos:position pos:line="48" pos:column="17"/></operator> <cast type="static" pos:line="48" pos:column="18">static_cast<argument_list type="generic" pos:line="48" pos:column="29">&lt;<argument><expr><name pos:line="48" pos:column="30">dc<pos:position pos:line="48" pos:column="32"/></name> <operator pos:line="48" pos:column="33">*<pos:position pos:line="48" pos:column="34"/></operator></expr></argument>&gt;<pos:position pos:line="48" pos:column="38"/></argument_list><argument_list pos:line="48" pos:column="35">(<argument><expr><call><name pos:line="48" pos:column="36">xmalloc<pos:position pos:line="48" pos:column="43"/></name><argument_list pos:line="48" pos:column="43">(<argument><expr><sizeof pos:line="48" pos:column="44">sizeof<argument_list pos:line="48" pos:column="50">(<argument><expr><name pos:line="48" pos:column="51">dc<pos:position pos:line="48" pos:column="53"/></name></expr></argument>)<pos:position pos:line="48" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="48" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="48" pos:column="56"/></argument_list></cast></expr>;<pos:position pos:line="48" pos:column="57"/></expr_stmt>
        <if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><operator pos:line="49" pos:column="13">!<pos:position pos:line="49" pos:column="14"/></operator><name pos:line="49" pos:column="14">new_dc<pos:position pos:line="49" pos:column="20"/></name></expr>)<pos:position pos:line="49" pos:column="21"/></condition><then pos:line="49" pos:column="21"> <block pos:line="49" pos:column="22">{
            <expr_stmt><expr><call><name pos:line="50" pos:column="13">fprintf<pos:position pos:line="50" pos:column="20"/></name><argument_list pos:line="50" pos:column="20">(<argument><expr><name pos:line="50" pos:column="21">stderr<pos:position pos:line="50" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="29">"Malloc error while parsing DC options\n"<pos:position pos:line="50" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="72"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="51" pos:column="13">free<pos:position pos:line="51" pos:column="17"/></name><argument_list pos:line="51" pos:column="17">(<argument><expr><name pos:line="51" pos:column="18">d<pos:position pos:line="51" pos:column="19"/></name></expr></argument>)<pos:position pos:line="51" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="21"/></expr_stmt>
            <continue pos:line="52" pos:column="13">continue;<pos:position pos:line="52" pos:column="22"/></continue>
        }<pos:position pos:line="53" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="54" pos:column="9">/* capitalize */</comment>
        <expr_stmt><expr><call><name pos:line="55" pos:column="9">uc<pos:position pos:line="55" pos:column="11"/></name><argument_list pos:line="55" pos:column="11">(<argument><expr><name pos:line="55" pos:column="12">c<pos:position pos:line="55" pos:column="13"/></name></expr></argument>)<pos:position pos:line="55" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="15"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="56" pos:column="9">uc<pos:position pos:line="56" pos:column="11"/></name><argument_list pos:line="56" pos:column="11">(<argument><expr><name pos:line="56" pos:column="12">d<pos:position pos:line="56" pos:column="13"/></name></expr></argument>)<pos:position pos:line="56" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="15"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="57" pos:column="9">++<pos:position pos:line="57" pos:column="11"/></operator><name pos:line="57" pos:column="11">numcontrollers<pos:position pos:line="57" pos:column="25"/></name></expr>;<pos:position pos:line="57" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="58" pos:column="9">new_dc<pos:position pos:line="58" pos:column="15"/></name><operator pos:line="58" pos:column="15">-&gt;<pos:position pos:line="58" pos:column="20"/></operator><name pos:line="58" pos:column="17">domain<pos:position pos:line="58" pos:column="23"/></name></name> <operator pos:line="58" pos:column="24">=<pos:position pos:line="58" pos:column="25"/></operator> <name pos:line="58" pos:column="26">d<pos:position pos:line="58" pos:column="27"/></name></expr>;<pos:position pos:line="58" pos:column="28"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="59" pos:column="9">new_dc<pos:position pos:line="59" pos:column="15"/></name><operator pos:line="59" pos:column="15">-&gt;<pos:position pos:line="59" pos:column="20"/></operator><name pos:line="59" pos:column="17">controller<pos:position pos:line="59" pos:column="27"/></name></name> <operator pos:line="59" pos:column="28">=<pos:position pos:line="59" pos:column="29"/></operator> <name pos:line="59" pos:column="30">c<pos:position pos:line="59" pos:column="31"/></name></expr>;<pos:position pos:line="59" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="60" pos:column="9">new_dc<pos:position pos:line="60" pos:column="15"/></name><operator pos:line="60" pos:column="15">-&gt;<pos:position pos:line="60" pos:column="20"/></operator><name pos:line="60" pos:column="17">dead<pos:position pos:line="60" pos:column="21"/></name></name> <operator pos:line="60" pos:column="22">=<pos:position pos:line="60" pos:column="23"/></operator> <literal type="number" pos:line="60" pos:column="24">0<pos:position pos:line="60" pos:column="25"/></literal></expr>;<pos:position pos:line="60" pos:column="26"/></expr_stmt>
        <if pos:line="61" pos:column="9">if <condition pos:line="61" pos:column="12">(<expr><name pos:line="61" pos:column="13">controllers<pos:position pos:line="61" pos:column="24"/></name> <operator pos:line="61" pos:column="25">==<pos:position pos:line="61" pos:column="27"/></operator> <name pos:line="61" pos:column="28">NULL<pos:position pos:line="61" pos:column="32"/></name></expr>)<pos:position pos:line="61" pos:column="33"/></condition><then pos:line="61" pos:column="33"> <block pos:line="61" pos:column="34">{  <comment type="block" pos:line="61" pos:column="37">/* first controller */</comment>
            <expr_stmt><expr><name pos:line="62" pos:column="13">controllers<pos:position pos:line="62" pos:column="24"/></name> <operator pos:line="62" pos:column="25">=<pos:position pos:line="62" pos:column="26"/></operator> <name pos:line="62" pos:column="27">new_dc<pos:position pos:line="62" pos:column="33"/></name></expr>;<pos:position pos:line="62" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><name pos:line="63" pos:column="13">last_dc<pos:position pos:line="63" pos:column="20"/></name> <operator pos:line="63" pos:column="21">=<pos:position pos:line="63" pos:column="22"/></operator> <name pos:line="63" pos:column="23">new_dc<pos:position pos:line="63" pos:column="29"/></name></expr>;<pos:position pos:line="63" pos:column="30"/></expr_stmt>
        }<pos:position pos:line="64" pos:column="10"/></block></then> <else pos:line="64" pos:column="11">else <block pos:line="64" pos:column="16">{
            <expr_stmt><expr><name><name pos:line="65" pos:column="13">last_dc<pos:position pos:line="65" pos:column="20"/></name><operator pos:line="65" pos:column="20">-&gt;<pos:position pos:line="65" pos:column="25"/></operator><name pos:line="65" pos:column="22">next<pos:position pos:line="65" pos:column="26"/></name></name> <operator pos:line="65" pos:column="27">=<pos:position pos:line="65" pos:column="28"/></operator> <name pos:line="65" pos:column="29">new_dc<pos:position pos:line="65" pos:column="35"/></name></expr>;<pos:position pos:line="65" pos:column="36"/></expr_stmt> <comment type="block" pos:line="65" pos:column="37">/* can't be null */</comment>
            <expr_stmt><expr><name pos:line="66" pos:column="13">last_dc<pos:position pos:line="66" pos:column="20"/></name> <operator pos:line="66" pos:column="21">=<pos:position pos:line="66" pos:column="22"/></operator> <name pos:line="66" pos:column="23">new_dc<pos:position pos:line="66" pos:column="29"/></name></expr>;<pos:position pos:line="66" pos:column="30"/></expr_stmt>
        }<pos:position pos:line="67" pos:column="10"/></block></else></if>
    }<pos:position pos:line="68" pos:column="6"/></block></for>
    <if pos:line="69" pos:column="5">if <condition pos:line="69" pos:column="8">(<expr><name pos:line="69" pos:column="9">numcontrollers<pos:position pos:line="69" pos:column="23"/></name> <operator pos:line="69" pos:column="24">==<pos:position pos:line="69" pos:column="26"/></operator> <literal type="number" pos:line="69" pos:column="27">0<pos:position pos:line="69" pos:column="28"/></literal></expr>)<pos:position pos:line="69" pos:column="29"/></condition><then pos:line="69" pos:column="29"> <block pos:line="69" pos:column="30">{
        <expr_stmt><expr><call><name pos:line="70" pos:column="9">fprintf<pos:position pos:line="70" pos:column="16"/></name><argument_list pos:line="70" pos:column="16">(<argument><expr><name pos:line="70" pos:column="17">stderr<pos:position pos:line="70" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="70" pos:column="25">"You must specify at least one domain-controller!\n"<pos:position pos:line="70" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="79"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="71" pos:column="9">usage<pos:position pos:line="71" pos:column="14"/></name><argument_list pos:line="71" pos:column="14">()<pos:position pos:line="71" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="17"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="72" pos:column="9">exit<pos:position pos:line="72" pos:column="13"/></name><argument_list pos:line="72" pos:column="13">(<argument><expr><literal type="number" pos:line="72" pos:column="14">1<pos:position pos:line="72" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="73" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="74" pos:column="5">last_dc<pos:position pos:line="74" pos:column="12"/></name><operator pos:line="74" pos:column="12">-&gt;<pos:position pos:line="74" pos:column="17"/></operator><name pos:line="74" pos:column="14">next<pos:position pos:line="74" pos:column="18"/></name></name> <operator pos:line="74" pos:column="19">=<pos:position pos:line="74" pos:column="20"/></operator> <name pos:line="74" pos:column="21">controllers<pos:position pos:line="74" pos:column="32"/></name></expr>;<pos:position pos:line="74" pos:column="33"/></expr_stmt>    <comment type="block" pos:line="74" pos:column="37">/* close the queue, now it's circular */</comment>
}<pos:position pos:line="75" pos:column="2"/></block></function></unit>
