<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_function_1474.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ipc<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">Mem<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">Segment<pos:position pos:line="2" pos:column="18"/></name><operator pos:line="2" pos:column="18">::<pos:position pos:line="2" pos:column="20"/></operator><name pos:line="2" pos:column="20">lock<pos:position pos:line="2" pos:column="24"/></name></name><parameter_list pos:line="2" pos:column="24">()<pos:position pos:line="2" pos:column="26"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">!<pos:position pos:line="4" pos:column="10"/></operator><name><name pos:line="4" pos:column="10">Config<pos:position pos:line="4" pos:column="16"/></name><operator pos:line="4" pos:column="16">.<pos:position pos:line="4" pos:column="17"/></operator><name pos:line="4" pos:column="17">shmLocking<pos:position pos:line="4" pos:column="27"/></name></name></expr>)<pos:position pos:line="4" pos:column="28"/></condition><then pos:line="4" pos:column="28"> <block pos:line="4" pos:column="29">{
        <expr_stmt><expr><call><name pos:line="5" pos:column="9">debugs<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">(<argument><expr><literal type="number" pos:line="5" pos:column="16">54<pos:position pos:line="5" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="20">5<pos:position pos:line="5" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="23">"mlock(2)-ing disabled"<pos:position pos:line="5" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="48"/></expr_stmt>
        <return pos:line="6" pos:column="9">return;<pos:position pos:line="6" pos:column="16"/></return>
    }<pos:position pos:line="7" pos:column="6"/></block></then></if>

<cpp:if pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">if<pos:position pos:line="9" pos:column="4"/></cpp:directive> <expr><call><name pos:line="9" pos:column="5">defined<pos:position pos:line="9" pos:column="12"/></name><argument_list pos:line="9" pos:column="12">(<argument><expr><name pos:line="9" pos:column="13">_POSIX_MEMLOCK_RANGE<pos:position pos:line="9" pos:column="33"/></name></expr></argument>)<pos:position pos:line="9" pos:column="34"/></argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">debugs<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><literal type="number" pos:line="10" pos:column="12">54<pos:position pos:line="10" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="16">7<pos:position pos:line="10" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="19">"mlock("<pos:position pos:line="10" pos:column="27"/></literal> <operator pos:line="10" pos:column="28">&lt;&lt;<pos:position pos:line="10" pos:column="36"/></operator> <name pos:line="10" pos:column="31">theName<pos:position pos:line="10" pos:column="38"/></name> <operator pos:line="10" pos:column="39">&lt;&lt;<pos:position pos:line="10" pos:column="47"/></operator> <literal type="char" pos:line="10" pos:column="42">','<pos:position pos:line="10" pos:column="45"/></literal> <operator pos:line="10" pos:column="46">&lt;&lt;<pos:position pos:line="10" pos:column="54"/></operator> <name pos:line="10" pos:column="49">theSize<pos:position pos:line="10" pos:column="56"/></name> <operator pos:line="10" pos:column="57">&lt;&lt;<pos:position pos:line="10" pos:column="65"/></operator> <literal type="string" pos:line="10" pos:column="60">") starts"<pos:position pos:line="10" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="72"/></expr_stmt>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><call><name pos:line="11" pos:column="9">mlock<pos:position pos:line="11" pos:column="14"/></name><argument_list pos:line="11" pos:column="14">(<argument><expr><name pos:line="11" pos:column="15">theMem<pos:position pos:line="11" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="23">theSize<pos:position pos:line="11" pos:column="30"/></name></expr></argument>)<pos:position pos:line="11" pos:column="31"/></argument_list></call> <operator pos:line="11" pos:column="32">!=<pos:position pos:line="11" pos:column="34"/></operator> <literal type="number" pos:line="11" pos:column="35">0<pos:position pos:line="11" pos:column="36"/></literal></expr>)<pos:position pos:line="11" pos:column="37"/></condition><then pos:line="11" pos:column="37"> <block pos:line="11" pos:column="38">{
        <decl_stmt><decl><type><specifier pos:line="12" pos:column="9">const<pos:position pos:line="12" pos:column="14"/></specifier> <name pos:line="12" pos:column="15">int<pos:position pos:line="12" pos:column="18"/></name></type> <name pos:line="12" pos:column="19">savedError<pos:position pos:line="12" pos:column="29"/></name> <init pos:line="12" pos:column="30">= <expr><name pos:line="12" pos:column="32">errno<pos:position pos:line="12" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="38"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">fatalf<pos:position pos:line="13" pos:column="15"/></name><argument_list pos:line="13" pos:column="15">(<argument><expr><literal type="string" pos:line="13" pos:column="16">"shared_memory_locking on but failed to mlock(%s, %"<pos:position pos:line="13" pos:column="68"/></literal> <name pos:line="13" pos:column="69">PRId64<pos:position pos:line="13" pos:column="75"/></name> <literal type="string" pos:line="13" pos:column="76">"): %s\n"<pos:position pos:line="13" pos:column="85"/></literal></expr></argument>,
               <argument><expr><call><name><name pos:line="14" pos:column="16">theName<pos:position pos:line="14" pos:column="23"/></name><operator pos:line="14" pos:column="23">.<pos:position pos:line="14" pos:column="24"/></operator><name pos:line="14" pos:column="24">termedBuf<pos:position pos:line="14" pos:column="33"/></name></name><argument_list pos:line="14" pos:column="33">()<pos:position pos:line="14" pos:column="35"/></argument_list></call></expr></argument>,<argument><expr><cast type="static" pos:line="14" pos:column="36">static_cast<argument_list type="generic" pos:line="14" pos:column="47">&lt;<argument><expr><name pos:line="14" pos:column="48">int64_t<pos:position pos:line="14" pos:column="55"/></name></expr></argument>&gt;<pos:position pos:line="14" pos:column="59"/></argument_list><argument_list pos:line="14" pos:column="56">(<argument><expr><name pos:line="14" pos:column="57">theSize<pos:position pos:line="14" pos:column="64"/></name></expr></argument>)<pos:position pos:line="14" pos:column="65"/></argument_list></cast></expr></argument>, <argument><expr><call><name pos:line="14" pos:column="67">xstrerr<pos:position pos:line="14" pos:column="74"/></name><argument_list pos:line="14" pos:column="74">(<argument><expr><name pos:line="14" pos:column="75">savedError<pos:position pos:line="14" pos:column="85"/></name></expr></argument>)<pos:position pos:line="14" pos:column="86"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="88"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>
    <comment type="line" pos:line="16" pos:column="5">// TODO: Warn if it took too long.</comment>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">debugs<pos:position pos:line="17" pos:column="11"/></name><argument_list pos:line="17" pos:column="11">(<argument><expr><literal type="number" pos:line="17" pos:column="12">54<pos:position pos:line="17" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="16">7<pos:position pos:line="17" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="19">"mlock("<pos:position pos:line="17" pos:column="27"/></literal> <operator pos:line="17" pos:column="28">&lt;&lt;<pos:position pos:line="17" pos:column="36"/></operator> <name pos:line="17" pos:column="31">theName<pos:position pos:line="17" pos:column="38"/></name> <operator pos:line="17" pos:column="39">&lt;&lt;<pos:position pos:line="17" pos:column="47"/></operator> <literal type="char" pos:line="17" pos:column="42">','<pos:position pos:line="17" pos:column="45"/></literal> <operator pos:line="17" pos:column="46">&lt;&lt;<pos:position pos:line="17" pos:column="54"/></operator> <name pos:line="17" pos:column="49">theSize<pos:position pos:line="17" pos:column="56"/></name> <operator pos:line="17" pos:column="57">&lt;&lt;<pos:position pos:line="17" pos:column="65"/></operator> <literal type="string" pos:line="17" pos:column="60">") OK"<pos:position pos:line="17" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="68"/></expr_stmt>
<cpp:else pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">else<pos:position pos:line="18" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">debugs<pos:position pos:line="19" pos:column="11"/></name><argument_list pos:line="19" pos:column="11">(<argument><expr><literal type="number" pos:line="19" pos:column="12">54<pos:position pos:line="19" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="16">5<pos:position pos:line="19" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="19">"insufficient mlock(2) support"<pos:position pos:line="19" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="52"/></expr_stmt>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><call><name><name pos:line="20" pos:column="9">Config<pos:position pos:line="20" pos:column="15"/></name><operator pos:line="20" pos:column="15">.<pos:position pos:line="20" pos:column="16"/></operator><name pos:line="20" pos:column="16">shmLocking<pos:position pos:line="20" pos:column="26"/></name><operator pos:line="20" pos:column="26">.<pos:position pos:line="20" pos:column="27"/></operator><name pos:line="20" pos:column="27">configured<pos:position pos:line="20" pos:column="37"/></name></name><argument_list pos:line="20" pos:column="37">()<pos:position pos:line="20" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="40"/></condition><then pos:line="20" pos:column="40"> <block pos:line="20" pos:column="41">{ <comment type="line" pos:line="20" pos:column="43">// set explicitly</comment>
        <decl_stmt><decl><specifier pos:line="21" pos:column="9">static<pos:position pos:line="21" pos:column="15"/></specifier> <type><name pos:line="21" pos:column="16">bool<pos:position pos:line="21" pos:column="20"/></name></type> <name pos:line="21" pos:column="21">warnedOnce<pos:position pos:line="21" pos:column="31"/></name> <init pos:line="21" pos:column="32">= <expr><literal type="boolean" pos:line="21" pos:column="34">false<pos:position pos:line="21" pos:column="39"/></literal></expr></init></decl>;<pos:position pos:line="21" pos:column="40"/></decl_stmt>
        <if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><operator pos:line="22" pos:column="13">!<pos:position pos:line="22" pos:column="14"/></operator><name pos:line="22" pos:column="14">warnedOnce<pos:position pos:line="22" pos:column="24"/></name></expr>)<pos:position pos:line="22" pos:column="25"/></condition><then pos:line="22" pos:column="25"> <block pos:line="22" pos:column="26">{
            <expr_stmt><expr><call><name pos:line="23" pos:column="13">debugs<pos:position pos:line="23" pos:column="19"/></name><argument_list pos:line="23" pos:column="19">(<argument><expr><literal type="number" pos:line="23" pos:column="20">54<pos:position pos:line="23" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="24">DBG_IMPORTANT<pos:position pos:line="23" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="39">"ERROR: insufficient mlock(2) support prevents "<pos:position pos:line="23" pos:column="87"/></literal> <operator pos:line="23" pos:column="88">&lt;&lt;<pos:position pos:line="23" pos:column="96"/></operator>
                   <literal type="string" pos:line="24" pos:column="20">"honoring `shared_memory_locking on`. "<pos:position pos:line="24" pos:column="59"/></literal> <operator pos:line="24" pos:column="60">&lt;&lt;<pos:position pos:line="24" pos:column="68"/></operator>
                   <literal type="string" pos:line="25" pos:column="20">"If you lack RAM, kernel will kill Squid later."<pos:position pos:line="25" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="70"/></expr_stmt>
            <expr_stmt><expr><name pos:line="26" pos:column="13">warnedOnce<pos:position pos:line="26" pos:column="23"/></name> <operator pos:line="26" pos:column="24">=<pos:position pos:line="26" pos:column="25"/></operator> <literal type="boolean" pos:line="26" pos:column="26">true<pos:position pos:line="26" pos:column="30"/></literal></expr>;<pos:position pos:line="26" pos:column="31"/></expr_stmt>
        }<pos:position pos:line="27" pos:column="10"/></block></then></if>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif<pos:position pos:line="29" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
