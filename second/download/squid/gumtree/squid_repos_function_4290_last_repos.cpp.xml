<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4290_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">ACLNoteStrategy<pos:position pos:line="2" pos:column="16"/></name><operator pos:line="2" pos:column="16">::<pos:position pos:line="2" pos:column="18"/></operator><name pos:line="2" pos:column="18">match<pos:position pos:line="2" pos:column="23"/></name></name><parameter_list pos:line="2" pos:column="23">(<parameter><decl><type><name><name pos:line="2" pos:column="24">ACLData<pos:position pos:line="2" pos:column="31"/></name><argument_list type="generic" pos:line="2" pos:column="31">&lt;<argument><expr><name pos:line="2" pos:column="32">MatchType<pos:position pos:line="2" pos:column="41"/></name></expr></argument>&gt;<pos:position pos:line="2" pos:column="45"/></argument_list></name> <modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier> <modifier pos:line="2" pos:column="45">&amp;<pos:position pos:line="2" pos:column="50"/></modifier></type><name pos:line="2" pos:column="46">data<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="52">ACLFilledChecklist<pos:position pos:line="2" pos:column="70"/></name> <modifier pos:line="2" pos:column="71">*<pos:position pos:line="2" pos:column="72"/></modifier></type><name pos:line="2" pos:column="72">checklist<pos:position pos:line="2" pos:column="81"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="82"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <specifier pos:line="4" pos:column="15">auto<pos:position pos:line="4" pos:column="19"/></specifier></type> <name pos:line="4" pos:column="20">request<pos:position pos:line="4" pos:column="27"/></name> <init pos:line="4" pos:column="28">= <expr><name><name pos:line="4" pos:column="30">checklist<pos:position pos:line="4" pos:column="39"/></name><operator pos:line="4" pos:column="39">-&gt;<pos:position pos:line="4" pos:column="44"/></operator><name pos:line="4" pos:column="41">request<pos:position pos:line="4" pos:column="48"/></name></name></expr></init></decl>)<pos:position pos:line="4" pos:column="49"/></condition><then pos:line="4" pos:column="49"> <block pos:line="4" pos:column="50">{
        <if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name><name pos:line="5" pos:column="13">request<pos:position pos:line="5" pos:column="20"/></name><operator pos:line="5" pos:column="20">-&gt;<pos:position pos:line="5" pos:column="25"/></operator><name pos:line="5" pos:column="22">notes<pos:position pos:line="5" pos:column="27"/></name></name> <operator pos:line="5" pos:column="28">!=<pos:position pos:line="5" pos:column="30"/></operator> <name pos:line="5" pos:column="31">NULL<pos:position pos:line="5" pos:column="35"/></name> <operator pos:line="5" pos:column="36">&amp;&amp;<pos:position pos:line="5" pos:column="46"/></operator> <call><name pos:line="5" pos:column="39">matchNotes<pos:position pos:line="5" pos:column="49"/></name><argument_list pos:line="5" pos:column="49">(<argument><expr><name pos:line="5" pos:column="50">data<pos:position pos:line="5" pos:column="54"/></name></expr></argument>, <argument><expr><call><name><name pos:line="5" pos:column="56">request<pos:position pos:line="5" pos:column="63"/></name><operator pos:line="5" pos:column="63">-&gt;<pos:position pos:line="5" pos:column="68"/></operator><name pos:line="5" pos:column="65">notes<pos:position pos:line="5" pos:column="70"/></name><operator pos:line="5" pos:column="70">.<pos:position pos:line="5" pos:column="71"/></operator><name pos:line="5" pos:column="71">getRaw<pos:position pos:line="5" pos:column="77"/></name></name><argument_list pos:line="5" pos:column="77">()<pos:position pos:line="5" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="80"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="81"/></condition><then pos:line="5" pos:column="81">
            <block type="pseudo"><return pos:line="6" pos:column="13">return <expr><literal type="number" pos:line="6" pos:column="20">1<pos:position pos:line="6" pos:column="21"/></literal></expr>;<pos:position pos:line="6" pos:column="22"/></return></block></then></if>
<cpp:if pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">if<pos:position pos:line="7" pos:column="4"/></cpp:directive> <expr><name pos:line="7" pos:column="5">USE_ADAPTATION<pos:position pos:line="7" pos:column="19"/></name></expr></cpp:if>
        <decl_stmt><decl><type><specifier pos:line="8" pos:column="9">const<pos:position pos:line="8" pos:column="14"/></specifier> <name><name pos:line="8" pos:column="15">Adaptation<pos:position pos:line="8" pos:column="25"/></name><operator pos:line="8" pos:column="25">::<pos:position pos:line="8" pos:column="27"/></operator><name pos:line="8" pos:column="27">History<pos:position pos:line="8" pos:column="34"/></name><operator pos:line="8" pos:column="34">::<pos:position pos:line="8" pos:column="36"/></operator><name pos:line="8" pos:column="36">Pointer<pos:position pos:line="8" pos:column="43"/></name></name></type> <name pos:line="8" pos:column="44">ah<pos:position pos:line="8" pos:column="46"/></name> <init pos:line="8" pos:column="47">= <expr><call><name><name pos:line="8" pos:column="49">request<pos:position pos:line="8" pos:column="56"/></name><operator pos:line="8" pos:column="56">-&gt;<pos:position pos:line="8" pos:column="61"/></operator><name pos:line="8" pos:column="58">adaptLogHistory<pos:position pos:line="8" pos:column="73"/></name></name><argument_list pos:line="8" pos:column="73">()<pos:position pos:line="8" pos:column="75"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="76"/></decl_stmt>
        <if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">ah<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">!=<pos:position pos:line="9" pos:column="18"/></operator> <name pos:line="9" pos:column="19">NULL<pos:position pos:line="9" pos:column="23"/></name> <operator pos:line="9" pos:column="24">&amp;&amp;<pos:position pos:line="9" pos:column="34"/></operator> <name><name pos:line="9" pos:column="27">ah<pos:position pos:line="9" pos:column="29"/></name><operator pos:line="9" pos:column="29">-&gt;<pos:position pos:line="9" pos:column="34"/></operator><name pos:line="9" pos:column="31">metaHeaders<pos:position pos:line="9" pos:column="42"/></name></name> <operator pos:line="9" pos:column="43">!=<pos:position pos:line="9" pos:column="45"/></operator> <name pos:line="9" pos:column="46">NULL<pos:position pos:line="9" pos:column="50"/></name> <operator pos:line="9" pos:column="51">&amp;&amp;<pos:position pos:line="9" pos:column="61"/></operator> <call><name pos:line="9" pos:column="54">matchNotes<pos:position pos:line="9" pos:column="64"/></name><argument_list pos:line="9" pos:column="64">(<argument><expr><name pos:line="9" pos:column="65">data<pos:position pos:line="9" pos:column="69"/></name></expr></argument>, <argument><expr><call><name><name pos:line="9" pos:column="71">ah<pos:position pos:line="9" pos:column="73"/></name><operator pos:line="9" pos:column="73">-&gt;<pos:position pos:line="9" pos:column="78"/></operator><name pos:line="9" pos:column="75">metaHeaders<pos:position pos:line="9" pos:column="86"/></name><operator pos:line="9" pos:column="86">.<pos:position pos:line="9" pos:column="87"/></operator><name pos:line="9" pos:column="87">getRaw<pos:position pos:line="9" pos:column="93"/></name></name><argument_list pos:line="9" pos:column="93">()<pos:position pos:line="9" pos:column="95"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="96"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="97"/></condition><then pos:line="9" pos:column="97">
            <block type="pseudo"><return pos:line="10" pos:column="13">return <expr><literal type="number" pos:line="10" pos:column="20">1<pos:position pos:line="10" pos:column="21"/></literal></expr>;<pos:position pos:line="10" pos:column="22"/></return></block></then></if>
<cpp:endif pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">endif<pos:position pos:line="11" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>
    <return pos:line="13" pos:column="5">return <expr><literal type="number" pos:line="13" pos:column="12">0<pos:position pos:line="13" pos:column="13"/></literal></expr>;<pos:position pos:line="13" pos:column="14"/></return>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
