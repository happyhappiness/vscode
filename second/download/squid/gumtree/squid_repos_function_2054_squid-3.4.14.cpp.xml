<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2054_squid-3.4.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">httpHdrRangeRespSpecParseInit<pos:position pos:line="2" pos:column="30"/></name><parameter_list pos:line="2" pos:column="30">(<parameter><decl><type><name pos:line="2" pos:column="31">HttpHdrRangeSpec<pos:position pos:line="2" pos:column="47"/></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type> <name pos:line="2" pos:column="50">spec<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="56">const<pos:position pos:line="2" pos:column="61"/></specifier> <name pos:line="2" pos:column="62">char<pos:position pos:line="2" pos:column="66"/></name> <modifier pos:line="2" pos:column="67">*<pos:position pos:line="2" pos:column="68"/></modifier></type><name pos:line="2" pos:column="68">field<pos:position pos:line="2" pos:column="73"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="75">int<pos:position pos:line="2" pos:column="78"/></name></type> <name pos:line="2" pos:column="79">flen<pos:position pos:line="2" pos:column="83"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="84"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">p<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><name pos:line="5" pos:column="12">spec<pos:position pos:line="5" pos:column="16"/></name></expr></argument>)<pos:position pos:line="5" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="6" pos:column="5">spec<pos:position pos:line="6" pos:column="9"/></name><operator pos:line="6" pos:column="9">-&gt;<pos:position pos:line="6" pos:column="14"/></operator><name pos:line="6" pos:column="11">offset<pos:position pos:line="6" pos:column="17"/></name></name> <operator pos:line="6" pos:column="18">=<pos:position pos:line="6" pos:column="19"/></operator> <name><name pos:line="6" pos:column="20">spec<pos:position pos:line="6" pos:column="24"/></name><operator pos:line="6" pos:column="24">-&gt;<pos:position pos:line="6" pos:column="29"/></operator><name pos:line="6" pos:column="26">length<pos:position pos:line="6" pos:column="32"/></name></name> <operator pos:line="6" pos:column="33">=<pos:position pos:line="6" pos:column="34"/></operator> <name pos:line="6" pos:column="35">range_spec_unknown<pos:position pos:line="6" pos:column="53"/></name></expr>;<pos:position pos:line="6" pos:column="54"/></expr_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">flen<pos:position pos:line="8" pos:column="13"/></name> <operator pos:line="8" pos:column="14">&lt;<pos:position pos:line="8" pos:column="18"/></operator> <literal type="number" pos:line="8" pos:column="16">2<pos:position pos:line="8" pos:column="17"/></literal></expr>)<pos:position pos:line="8" pos:column="18"/></condition><then pos:line="8" pos:column="18">
        <block type="pseudo"><return pos:line="9" pos:column="9">return <expr><literal type="number" pos:line="9" pos:column="16">0<pos:position pos:line="9" pos:column="17"/></literal></expr>;<pos:position pos:line="9" pos:column="18"/></return></block></then></if>

    <comment type="block" pos:line="11" pos:column="5">/* is spec given ? */</comment>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><operator pos:line="12" pos:column="9">*<pos:position pos:line="12" pos:column="10"/></operator><name pos:line="12" pos:column="10">field<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">==<pos:position pos:line="12" pos:column="18"/></operator> <literal type="char" pos:line="12" pos:column="19">'*'<pos:position pos:line="12" pos:column="22"/></literal></expr>)<pos:position pos:line="12" pos:column="23"/></condition><then pos:line="12" pos:column="23">
        <block type="pseudo"><return pos:line="13" pos:column="9">return <expr><literal type="number" pos:line="13" pos:column="16">1<pos:position pos:line="13" pos:column="17"/></literal></expr>;<pos:position pos:line="13" pos:column="18"/></return></block></then></if>

    <comment type="block" pos:line="15" pos:column="5">/* check format, must be %d-%d */</comment>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><operator pos:line="16" pos:column="9">!<pos:position pos:line="16" pos:column="10"/></operator><operator pos:line="16" pos:column="10">(<pos:position pos:line="16" pos:column="11"/></operator><operator pos:line="16" pos:column="11">(<pos:position pos:line="16" pos:column="12"/></operator><name pos:line="16" pos:column="12">p<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">=<pos:position pos:line="16" pos:column="15"/></operator> <call><name pos:line="16" pos:column="16">strchr<pos:position pos:line="16" pos:column="22"/></name><argument_list pos:line="16" pos:column="22">(<argument><expr><name pos:line="16" pos:column="23">field<pos:position pos:line="16" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="16" pos:column="30">'-'<pos:position pos:line="16" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="34"/></argument_list></call><operator pos:line="16" pos:column="34">)<pos:position pos:line="16" pos:column="35"/></operator> <operator pos:line="16" pos:column="36">&amp;&amp;<pos:position pos:line="16" pos:column="46"/></operator> <operator pos:line="16" pos:column="39">(<pos:position pos:line="16" pos:column="40"/></operator><name pos:line="16" pos:column="40">p<pos:position pos:line="16" pos:column="41"/></name> <operator pos:line="16" pos:column="42">-<pos:position pos:line="16" pos:column="43"/></operator> <name pos:line="16" pos:column="44">field<pos:position pos:line="16" pos:column="49"/></name> <operator pos:line="16" pos:column="50">&lt;<pos:position pos:line="16" pos:column="54"/></operator> <name pos:line="16" pos:column="52">flen<pos:position pos:line="16" pos:column="56"/></name><operator pos:line="16" pos:column="56">)<pos:position pos:line="16" pos:column="57"/></operator><operator pos:line="16" pos:column="57">)<pos:position pos:line="16" pos:column="58"/></operator></expr>)<pos:position pos:line="16" pos:column="59"/></condition><then pos:line="16" pos:column="59"> <block pos:line="16" pos:column="60">{
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">debugs<pos:position pos:line="17" pos:column="15"/></name><argument_list pos:line="17" pos:column="15">(<argument><expr><literal type="number" pos:line="17" pos:column="16">68<pos:position pos:line="17" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="20">2<pos:position pos:line="17" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="23">"invalid (no '-') resp-range-spec near: '"<pos:position pos:line="17" pos:column="65"/></literal> <operator pos:line="17" pos:column="66">&lt;&lt;<pos:position pos:line="17" pos:column="74"/></operator> <name pos:line="17" pos:column="69">field<pos:position pos:line="17" pos:column="74"/></name> <operator pos:line="17" pos:column="75">&lt;&lt;<pos:position pos:line="17" pos:column="83"/></operator> <literal type="string" pos:line="17" pos:column="78">"'"<pos:position pos:line="17" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="83"/></expr_stmt>
        <return pos:line="18" pos:column="9">return <expr><literal type="number" pos:line="18" pos:column="16">0<pos:position pos:line="18" pos:column="17"/></literal></expr>;<pos:position pos:line="18" pos:column="18"/></return>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="21" pos:column="5">/* parse offset */</comment>
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><operator pos:line="22" pos:column="9">!<pos:position pos:line="22" pos:column="10"/></operator><call><name pos:line="22" pos:column="10">httpHeaderParseOffset<pos:position pos:line="22" pos:column="31"/></name><argument_list pos:line="22" pos:column="31">(<argument><expr><name pos:line="22" pos:column="32">field<pos:position pos:line="22" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="39">&amp;<pos:position pos:line="22" pos:column="44"/></operator><name><name pos:line="22" pos:column="40">spec<pos:position pos:line="22" pos:column="44"/></name><operator pos:line="22" pos:column="44">-&gt;<pos:position pos:line="22" pos:column="49"/></operator><name pos:line="22" pos:column="46">offset<pos:position pos:line="22" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="54"/></condition><then pos:line="22" pos:column="54">
        <block type="pseudo"><return pos:line="23" pos:column="9">return <expr><literal type="number" pos:line="23" pos:column="16">0<pos:position pos:line="23" pos:column="17"/></literal></expr>;<pos:position pos:line="23" pos:column="18"/></return></block></then></if>

    <comment type="block" pos:line="25" pos:column="5">/* Additional check for BUG2155 - there MUST BE first-byte-pos and it MUST be positive*/</comment>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name><name pos:line="26" pos:column="9">spec<pos:position pos:line="26" pos:column="13"/></name><operator pos:line="26" pos:column="13">-&gt;<pos:position pos:line="26" pos:column="18"/></operator><name pos:line="26" pos:column="15">offset<pos:position pos:line="26" pos:column="21"/></name></name> <operator pos:line="26" pos:column="22">&lt;<pos:position pos:line="26" pos:column="26"/></operator> <literal type="number" pos:line="26" pos:column="24">0<pos:position pos:line="26" pos:column="25"/></literal></expr>)<pos:position pos:line="26" pos:column="26"/></condition><then pos:line="26" pos:column="26"> <block pos:line="26" pos:column="27">{
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">debugs<pos:position pos:line="27" pos:column="15"/></name><argument_list pos:line="27" pos:column="15">(<argument><expr><literal type="number" pos:line="27" pos:column="16">68<pos:position pos:line="27" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="20">2<pos:position pos:line="27" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="23">"invalid (no first-byte-pos or it is negative) resp-range-spec near: '"<pos:position pos:line="27" pos:column="94"/></literal> <operator pos:line="27" pos:column="95">&lt;&lt;<pos:position pos:line="27" pos:column="103"/></operator> <name pos:line="27" pos:column="98">field<pos:position pos:line="27" pos:column="103"/></name> <operator pos:line="27" pos:column="104">&lt;&lt;<pos:position pos:line="27" pos:column="112"/></operator> <literal type="string" pos:line="27" pos:column="107">"'"<pos:position pos:line="27" pos:column="110"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="111"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="112"/></expr_stmt>
        <return pos:line="28" pos:column="9">return <expr><literal type="number" pos:line="28" pos:column="16">0<pos:position pos:line="28" pos:column="17"/></literal></expr>;<pos:position pos:line="28" pos:column="18"/></return>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>

    <expr_stmt><expr><operator pos:line="31" pos:column="5">++<pos:position pos:line="31" pos:column="7"/></operator><name pos:line="31" pos:column="7">p<pos:position pos:line="31" pos:column="8"/></name></expr>;<pos:position pos:line="31" pos:column="9"/></expr_stmt>

    <comment type="block" pos:line="33" pos:column="5">/* do we have last-pos ? */</comment>
    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">(<expr><name pos:line="34" pos:column="9">p<pos:position pos:line="34" pos:column="10"/></name> <operator pos:line="34" pos:column="11">-<pos:position pos:line="34" pos:column="12"/></operator> <name pos:line="34" pos:column="13">field<pos:position pos:line="34" pos:column="18"/></name> <operator pos:line="34" pos:column="19">&gt;=<pos:position pos:line="34" pos:column="24"/></operator> <name pos:line="34" pos:column="22">flen<pos:position pos:line="34" pos:column="26"/></name></expr>)<pos:position pos:line="34" pos:column="27"/></condition><then pos:line="34" pos:column="27"> <block pos:line="34" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">debugs<pos:position pos:line="35" pos:column="15"/></name><argument_list pos:line="35" pos:column="15">(<argument><expr><literal type="number" pos:line="35" pos:column="16">68<pos:position pos:line="35" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="20">2<pos:position pos:line="35" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="23">"invalid (no last-byte-pos) resp-range-spec near: '"<pos:position pos:line="35" pos:column="75"/></literal> <operator pos:line="35" pos:column="76">&lt;&lt;<pos:position pos:line="35" pos:column="84"/></operator> <name pos:line="35" pos:column="79">field<pos:position pos:line="35" pos:column="84"/></name> <operator pos:line="35" pos:column="85">&lt;&lt;<pos:position pos:line="35" pos:column="93"/></operator> <literal type="string" pos:line="35" pos:column="88">"'"<pos:position pos:line="35" pos:column="91"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="93"/></expr_stmt>
        <return pos:line="36" pos:column="9">return <expr><literal type="number" pos:line="36" pos:column="16">0<pos:position pos:line="36" pos:column="17"/></literal></expr>;<pos:position pos:line="36" pos:column="18"/></return>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="39" pos:column="5">int64_t<pos:position pos:line="39" pos:column="12"/></name></type> <name pos:line="39" pos:column="13">last_pos<pos:position pos:line="39" pos:column="21"/></name></decl>;<pos:position pos:line="39" pos:column="22"/></decl_stmt>

    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><operator pos:line="41" pos:column="9">!<pos:position pos:line="41" pos:column="10"/></operator><call><name pos:line="41" pos:column="10">httpHeaderParseOffset<pos:position pos:line="41" pos:column="31"/></name><argument_list pos:line="41" pos:column="31">(<argument><expr><name pos:line="41" pos:column="32">p<pos:position pos:line="41" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="35">&amp;<pos:position pos:line="41" pos:column="40"/></operator><name pos:line="41" pos:column="36">last_pos<pos:position pos:line="41" pos:column="44"/></name></expr></argument>)<pos:position pos:line="41" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="46"/></condition><then pos:line="41" pos:column="46">
        <block type="pseudo"><return pos:line="42" pos:column="9">return <expr><literal type="number" pos:line="42" pos:column="16">0<pos:position pos:line="42" pos:column="17"/></literal></expr>;<pos:position pos:line="42" pos:column="18"/></return></block></then></if>

    <if pos:line="44" pos:column="5">if <condition pos:line="44" pos:column="8">(<expr><name pos:line="44" pos:column="9">last_pos<pos:position pos:line="44" pos:column="17"/></name> <operator pos:line="44" pos:column="18">&lt;<pos:position pos:line="44" pos:column="22"/></operator> <name><name pos:line="44" pos:column="20">spec<pos:position pos:line="44" pos:column="24"/></name><operator pos:line="44" pos:column="24">-&gt;<pos:position pos:line="44" pos:column="29"/></operator><name pos:line="44" pos:column="26">offset<pos:position pos:line="44" pos:column="32"/></name></name></expr>)<pos:position pos:line="44" pos:column="33"/></condition><then pos:line="44" pos:column="33"> <block pos:line="44" pos:column="34">{
        <expr_stmt><expr><call><name pos:line="45" pos:column="9">debugs<pos:position pos:line="45" pos:column="15"/></name><argument_list pos:line="45" pos:column="15">(<argument><expr><literal type="number" pos:line="45" pos:column="16">68<pos:position pos:line="45" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="45" pos:column="20">2<pos:position pos:line="45" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="23">"invalid (negative last-byte-pos) resp-range-spec near: '"<pos:position pos:line="45" pos:column="81"/></literal> <operator pos:line="45" pos:column="82">&lt;&lt;<pos:position pos:line="45" pos:column="90"/></operator> <name pos:line="45" pos:column="85">field<pos:position pos:line="45" pos:column="90"/></name> <operator pos:line="45" pos:column="91">&lt;&lt;<pos:position pos:line="45" pos:column="99"/></operator> <literal type="string" pos:line="45" pos:column="94">"'"<pos:position pos:line="45" pos:column="97"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="98"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="99"/></expr_stmt>
        <return pos:line="46" pos:column="9">return <expr><literal type="number" pos:line="46" pos:column="16">0<pos:position pos:line="46" pos:column="17"/></literal></expr>;<pos:position pos:line="46" pos:column="18"/></return>
    }<pos:position pos:line="47" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="49" pos:column="5">spec<pos:position pos:line="49" pos:column="9"/></name><operator pos:line="49" pos:column="9">-&gt;<pos:position pos:line="49" pos:column="14"/></operator><name pos:line="49" pos:column="11">length<pos:position pos:line="49" pos:column="17"/></name></name> <operator pos:line="49" pos:column="18">=<pos:position pos:line="49" pos:column="19"/></operator> <call><name pos:line="49" pos:column="20">size_diff<pos:position pos:line="49" pos:column="29"/></name><argument_list pos:line="49" pos:column="29">(<argument><expr><name pos:line="49" pos:column="30">last_pos<pos:position pos:line="49" pos:column="38"/></name> <operator pos:line="49" pos:column="39">+<pos:position pos:line="49" pos:column="40"/></operator> <literal type="number" pos:line="49" pos:column="41">1<pos:position pos:line="49" pos:column="42"/></literal></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="44">spec<pos:position pos:line="49" pos:column="48"/></name><operator pos:line="49" pos:column="48">-&gt;<pos:position pos:line="49" pos:column="53"/></operator><name pos:line="49" pos:column="50">offset<pos:position pos:line="49" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="58"/></expr_stmt>

    <comment type="block" pos:line="51" pos:column="5">/* we managed to parse, check if the result makes sence */</comment>
    <if pos:line="52" pos:column="5">if <condition pos:line="52" pos:column="8">(<expr><name><name pos:line="52" pos:column="9">spec<pos:position pos:line="52" pos:column="13"/></name><operator pos:line="52" pos:column="13">-&gt;<pos:position pos:line="52" pos:column="18"/></operator><name pos:line="52" pos:column="15">length<pos:position pos:line="52" pos:column="21"/></name></name> <operator pos:line="52" pos:column="22">&lt;=<pos:position pos:line="52" pos:column="27"/></operator> <literal type="number" pos:line="52" pos:column="25">0<pos:position pos:line="52" pos:column="26"/></literal></expr>)<pos:position pos:line="52" pos:column="27"/></condition><then pos:line="52" pos:column="27"> <block pos:line="52" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="53" pos:column="9">debugs<pos:position pos:line="53" pos:column="15"/></name><argument_list pos:line="53" pos:column="15">(<argument><expr><literal type="number" pos:line="53" pos:column="16">68<pos:position pos:line="53" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="53" pos:column="20">2<pos:position pos:line="53" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="23">"invalid range ("<pos:position pos:line="53" pos:column="40"/></literal> <operator pos:line="53" pos:column="41">&lt;&lt;<pos:position pos:line="53" pos:column="49"/></operator> <name><name pos:line="53" pos:column="44">spec<pos:position pos:line="53" pos:column="48"/></name><operator pos:line="53" pos:column="48">-&gt;<pos:position pos:line="53" pos:column="53"/></operator><name pos:line="53" pos:column="50">offset<pos:position pos:line="53" pos:column="56"/></name></name> <operator pos:line="53" pos:column="57">&lt;&lt;<pos:position pos:line="53" pos:column="65"/></operator> <literal type="string" pos:line="53" pos:column="60">" += "<pos:position pos:line="53" pos:column="66"/></literal> <operator pos:line="53" pos:column="67">&lt;&lt;<pos:position pos:line="53" pos:column="75"/></operator>
               <operator pos:line="54" pos:column="16">(<pos:position pos:line="54" pos:column="17"/></operator><name pos:line="54" pos:column="17">long<pos:position pos:line="54" pos:column="21"/></name> <name pos:line="54" pos:column="22">int<pos:position pos:line="54" pos:column="25"/></name><operator pos:line="54" pos:column="25">)<pos:position pos:line="54" pos:column="26"/></operator> <name><name pos:line="54" pos:column="27">spec<pos:position pos:line="54" pos:column="31"/></name><operator pos:line="54" pos:column="31">-&gt;<pos:position pos:line="54" pos:column="36"/></operator><name pos:line="54" pos:column="33">length<pos:position pos:line="54" pos:column="39"/></name></name> <operator pos:line="54" pos:column="40">&lt;&lt;<pos:position pos:line="54" pos:column="48"/></operator> <literal type="string" pos:line="54" pos:column="43">") in resp-range-spec near: '"<pos:position pos:line="54" pos:column="73"/></literal> <operator pos:line="54" pos:column="74">&lt;&lt;<pos:position pos:line="54" pos:column="82"/></operator> <name pos:line="54" pos:column="77">field<pos:position pos:line="54" pos:column="82"/></name> <operator pos:line="54" pos:column="83">&lt;&lt;<pos:position pos:line="54" pos:column="91"/></operator> <literal type="string" pos:line="54" pos:column="86">"'"<pos:position pos:line="54" pos:column="89"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="91"/></expr_stmt>
        <return pos:line="55" pos:column="9">return <expr><literal type="number" pos:line="55" pos:column="16">0<pos:position pos:line="55" pos:column="17"/></literal></expr>;<pos:position pos:line="55" pos:column="18"/></return>
    }<pos:position pos:line="56" pos:column="6"/></block></then></if>

    <return pos:line="58" pos:column="5">return <expr><literal type="number" pos:line="58" pos:column="12">1<pos:position pos:line="58" pos:column="13"/></literal></expr>;<pos:position pos:line="58" pos:column="14"/></return>
}<pos:position pos:line="59" pos:column="2"/></block></function></unit>
