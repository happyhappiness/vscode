<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2003_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HttpStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">readReply<pos:position pos:line="2" pos:column="25"/></name></name><parameter_list pos:line="2" pos:column="25">(<parameter><decl><type><specifier pos:line="2" pos:column="26">const<pos:position pos:line="2" pos:column="31"/></specifier> <name pos:line="2" pos:column="32">CommIoCbParams<pos:position pos:line="2" pos:column="46"/></name> <modifier pos:line="2" pos:column="47">&amp;<pos:position pos:line="2" pos:column="52"/></modifier></type><name pos:line="2" pos:column="48">io<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="51"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">bin<pos:position pos:line="4" pos:column="12"/></name></decl>;<pos:position pos:line="4" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">clen<pos:position pos:line="5" pos:column="13"/></name></decl>;<pos:position pos:line="5" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">len<pos:position pos:line="6" pos:column="12"/></name> <init pos:line="6" pos:column="13">= <expr><name><name pos:line="6" pos:column="15">io<pos:position pos:line="6" pos:column="17"/></name><operator pos:line="6" pos:column="17">.<pos:position pos:line="6" pos:column="18"/></operator><name pos:line="6" pos:column="18">size<pos:position pos:line="6" pos:column="22"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="8" pos:column="5">assert<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><name pos:line="8" pos:column="12">fd<pos:position pos:line="8" pos:column="14"/></name> <operator pos:line="8" pos:column="15">==<pos:position pos:line="8" pos:column="17"/></operator> <name><name pos:line="8" pos:column="18">io<pos:position pos:line="8" pos:column="20"/></name><operator pos:line="8" pos:column="20">.<pos:position pos:line="8" pos:column="21"/></operator><name pos:line="8" pos:column="21">fd<pos:position pos:line="8" pos:column="23"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="25"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="10" pos:column="5">flags<pos:position pos:line="10" pos:column="10"/></name><operator pos:line="10" pos:column="10">.<pos:position pos:line="10" pos:column="11"/></operator><name pos:line="10" pos:column="11">do_next_read<pos:position pos:line="10" pos:column="23"/></name></name> <operator pos:line="10" pos:column="24">=<pos:position pos:line="10" pos:column="25"/></operator> <literal type="number" pos:line="10" pos:column="26">0<pos:position pos:line="10" pos:column="27"/></literal></expr>;<pos:position pos:line="10" pos:column="28"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="12" pos:column="5">debugs<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><literal type="number" pos:line="12" pos:column="12">11<pos:position pos:line="12" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="16">5<pos:position pos:line="12" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="19">"httpReadReply: FD "<pos:position pos:line="12" pos:column="39"/></literal> <operator pos:line="12" pos:column="40">&lt;&lt;<pos:position pos:line="12" pos:column="48"/></operator> <name pos:line="12" pos:column="43">fd<pos:position pos:line="12" pos:column="45"/></name> <operator pos:line="12" pos:column="46">&lt;&lt;<pos:position pos:line="12" pos:column="54"/></operator> <literal type="string" pos:line="12" pos:column="49">": len "<pos:position pos:line="12" pos:column="57"/></literal> <operator pos:line="12" pos:column="58">&lt;&lt;<pos:position pos:line="12" pos:column="66"/></operator> <name pos:line="12" pos:column="61">len<pos:position pos:line="12" pos:column="64"/></name> <operator pos:line="12" pos:column="65">&lt;&lt;<pos:position pos:line="12" pos:column="73"/></operator> <literal type="string" pos:line="12" pos:column="68">"."<pos:position pos:line="12" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="73"/></expr_stmt>

    <comment type="line" pos:line="14" pos:column="5">// Bail out early on COMM_ERR_CLOSING - close handlers will tidy up for us</comment>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name><name pos:line="15" pos:column="9">io<pos:position pos:line="15" pos:column="11"/></name><operator pos:line="15" pos:column="11">.<pos:position pos:line="15" pos:column="12"/></operator><name pos:line="15" pos:column="12">flag<pos:position pos:line="15" pos:column="16"/></name></name> <operator pos:line="15" pos:column="17">==<pos:position pos:line="15" pos:column="19"/></operator> <name pos:line="15" pos:column="20">COMM_ERR_CLOSING<pos:position pos:line="15" pos:column="36"/></name></expr>)<pos:position pos:line="15" pos:column="37"/></condition><then pos:line="15" pos:column="37"> <block pos:line="15" pos:column="38">{
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">debugs<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><literal type="number" pos:line="16" pos:column="16">11<pos:position pos:line="16" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="20">3<pos:position pos:line="16" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="23">"http socket closing"<pos:position pos:line="16" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="46"/></expr_stmt>
        <return pos:line="17" pos:column="9">return;<pos:position pos:line="17" pos:column="16"/></return>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><call><name pos:line="20" pos:column="9">EBIT_TEST<pos:position pos:line="20" pos:column="18"/></name><argument_list pos:line="20" pos:column="18">(<argument><expr><name><name pos:line="20" pos:column="19">entry<pos:position pos:line="20" pos:column="24"/></name><operator pos:line="20" pos:column="24">-&gt;<pos:position pos:line="20" pos:column="29"/></operator><name pos:line="20" pos:column="26">flags<pos:position pos:line="20" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="33">ENTRY_ABORTED<pos:position pos:line="20" pos:column="46"/></name></expr></argument>)<pos:position pos:line="20" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="48"/></condition><then pos:line="20" pos:column="48"> <block pos:line="20" pos:column="49">{
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">maybeReadVirginBody<pos:position pos:line="21" pos:column="28"/></name><argument_list pos:line="21" pos:column="28">()<pos:position pos:line="21" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="31"/></expr_stmt>
        <return pos:line="22" pos:column="9">return;<pos:position pos:line="22" pos:column="16"/></return>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="25" pos:column="5">// handle I/O errors</comment>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name><name pos:line="26" pos:column="9">io<pos:position pos:line="26" pos:column="11"/></name><operator pos:line="26" pos:column="11">.<pos:position pos:line="26" pos:column="12"/></operator><name pos:line="26" pos:column="12">flag<pos:position pos:line="26" pos:column="16"/></name></name> <operator pos:line="26" pos:column="17">!=<pos:position pos:line="26" pos:column="19"/></operator> <name pos:line="26" pos:column="20">COMM_OK<pos:position pos:line="26" pos:column="27"/></name> <operator pos:line="26" pos:column="28">||<pos:position pos:line="26" pos:column="30"/></operator> <name pos:line="26" pos:column="31">len<pos:position pos:line="26" pos:column="34"/></name> <operator pos:line="26" pos:column="35">&lt;<pos:position pos:line="26" pos:column="39"/></operator> <literal type="number" pos:line="26" pos:column="37">0<pos:position pos:line="26" pos:column="38"/></literal></expr>)<pos:position pos:line="26" pos:column="39"/></condition><then pos:line="26" pos:column="39"> <block pos:line="26" pos:column="40">{
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">debugs<pos:position pos:line="27" pos:column="15"/></name><argument_list pos:line="27" pos:column="15">(<argument><expr><literal type="number" pos:line="27" pos:column="16">11<pos:position pos:line="27" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="20">2<pos:position pos:line="27" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="23">"httpReadReply: FD "<pos:position pos:line="27" pos:column="43"/></literal> <operator pos:line="27" pos:column="44">&lt;&lt;<pos:position pos:line="27" pos:column="52"/></operator> <name pos:line="27" pos:column="47">fd<pos:position pos:line="27" pos:column="49"/></name> <operator pos:line="27" pos:column="50">&lt;&lt;<pos:position pos:line="27" pos:column="58"/></operator> <literal type="string" pos:line="27" pos:column="53">": read failure: "<pos:position pos:line="27" pos:column="71"/></literal> <operator pos:line="27" pos:column="72">&lt;&lt;<pos:position pos:line="27" pos:column="80"/></operator> <call><name pos:line="27" pos:column="75">xstrerror<pos:position pos:line="27" pos:column="84"/></name><argument_list pos:line="27" pos:column="84">()<pos:position pos:line="27" pos:column="86"/></argument_list></call> <operator pos:line="27" pos:column="87">&lt;&lt;<pos:position pos:line="27" pos:column="95"/></operator> <literal type="string" pos:line="27" pos:column="90">"."<pos:position pos:line="27" pos:column="93"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="95"/></expr_stmt>

        <if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><call><name pos:line="29" pos:column="13">ignoreErrno<pos:position pos:line="29" pos:column="24"/></name><argument_list pos:line="29" pos:column="24">(<argument><expr><name><name pos:line="29" pos:column="25">io<pos:position pos:line="29" pos:column="27"/></name><operator pos:line="29" pos:column="27">.<pos:position pos:line="29" pos:column="28"/></operator><name pos:line="29" pos:column="28">xerrno<pos:position pos:line="29" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="36"/></condition><then pos:line="29" pos:column="36"> <block pos:line="29" pos:column="37">{
            <expr_stmt><expr><name><name pos:line="30" pos:column="13">flags<pos:position pos:line="30" pos:column="18"/></name><operator pos:line="30" pos:column="18">.<pos:position pos:line="30" pos:column="19"/></operator><name pos:line="30" pos:column="19">do_next_read<pos:position pos:line="30" pos:column="31"/></name></name> <operator pos:line="30" pos:column="32">=<pos:position pos:line="30" pos:column="33"/></operator> <literal type="number" pos:line="30" pos:column="34">1<pos:position pos:line="30" pos:column="35"/></literal></expr>;<pos:position pos:line="30" pos:column="36"/></expr_stmt>
        }<pos:position pos:line="31" pos:column="10"/></block></then> <else pos:line="31" pos:column="11">else <block pos:line="31" pos:column="16">{
            <decl_stmt><decl><type><name pos:line="32" pos:column="13">ErrorState<pos:position pos:line="32" pos:column="23"/></name> <modifier pos:line="32" pos:column="24">*<pos:position pos:line="32" pos:column="25"/></modifier></type><name pos:line="32" pos:column="25">err<pos:position pos:line="32" pos:column="28"/></name></decl>;<pos:position pos:line="32" pos:column="29"/></decl_stmt>
            <expr_stmt><expr><name pos:line="33" pos:column="13">err<pos:position pos:line="33" pos:column="16"/></name> <operator pos:line="33" pos:column="17">=<pos:position pos:line="33" pos:column="18"/></operator> <call><name pos:line="33" pos:column="19">errorCon<pos:position pos:line="33" pos:column="27"/></name><argument_list pos:line="33" pos:column="27">(<argument><expr><name pos:line="33" pos:column="28">ERR_READ_ERROR<pos:position pos:line="33" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="44">HTTP_BAD_GATEWAY<pos:position pos:line="33" pos:column="60"/></name></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="62">fwd<pos:position pos:line="33" pos:column="65"/></name><operator pos:line="33" pos:column="65">-&gt;<pos:position pos:line="33" pos:column="70"/></operator><name pos:line="33" pos:column="67">request<pos:position pos:line="33" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="76"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="34" pos:column="13">err<pos:position pos:line="34" pos:column="16"/></name><operator pos:line="34" pos:column="16">-&gt;<pos:position pos:line="34" pos:column="21"/></operator><name pos:line="34" pos:column="18">xerrno<pos:position pos:line="34" pos:column="24"/></name></name> <operator pos:line="34" pos:column="25">=<pos:position pos:line="34" pos:column="26"/></operator> <name><name pos:line="34" pos:column="27">io<pos:position pos:line="34" pos:column="29"/></name><operator pos:line="34" pos:column="29">.<pos:position pos:line="34" pos:column="30"/></operator><name pos:line="34" pos:column="30">xerrno<pos:position pos:line="34" pos:column="36"/></name></name></expr>;<pos:position pos:line="34" pos:column="37"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="35" pos:column="13">fwd<pos:position pos:line="35" pos:column="16"/></name><operator pos:line="35" pos:column="16">-&gt;<pos:position pos:line="35" pos:column="21"/></operator><name pos:line="35" pos:column="18">fail<pos:position pos:line="35" pos:column="22"/></name></name><argument_list pos:line="35" pos:column="22">(<argument><expr><name pos:line="35" pos:column="23">err<pos:position pos:line="35" pos:column="26"/></name></expr></argument>)<pos:position pos:line="35" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="28"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="36" pos:column="13">flags<pos:position pos:line="36" pos:column="18"/></name><operator pos:line="36" pos:column="18">.<pos:position pos:line="36" pos:column="19"/></operator><name pos:line="36" pos:column="19">do_next_read<pos:position pos:line="36" pos:column="31"/></name></name> <operator pos:line="36" pos:column="32">=<pos:position pos:line="36" pos:column="33"/></operator> <literal type="number" pos:line="36" pos:column="34">0<pos:position pos:line="36" pos:column="35"/></literal></expr>;<pos:position pos:line="36" pos:column="36"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="37" pos:column="13">comm_close<pos:position pos:line="37" pos:column="23"/></name><argument_list pos:line="37" pos:column="23">(<argument><expr><name pos:line="37" pos:column="24">fd<pos:position pos:line="37" pos:column="26"/></name></expr></argument>)<pos:position pos:line="37" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="28"/></expr_stmt>
        }<pos:position pos:line="38" pos:column="10"/></block></else></if>

        <return pos:line="40" pos:column="9">return;<pos:position pos:line="40" pos:column="16"/></return>
    }<pos:position pos:line="41" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="43" pos:column="5">// update I/O stats</comment>
    <if pos:line="44" pos:column="5">if <condition pos:line="44" pos:column="8">(<expr><name pos:line="44" pos:column="9">len<pos:position pos:line="44" pos:column="12"/></name> <operator pos:line="44" pos:column="13">&gt;<pos:position pos:line="44" pos:column="17"/></operator> <literal type="number" pos:line="44" pos:column="15">0<pos:position pos:line="44" pos:column="16"/></literal></expr>)<pos:position pos:line="44" pos:column="17"/></condition><then pos:line="44" pos:column="17"> <block pos:line="44" pos:column="18">{
        <expr_stmt><expr><call><name><name pos:line="45" pos:column="9">readBuf<pos:position pos:line="45" pos:column="16"/></name><operator pos:line="45" pos:column="16">-&gt;<pos:position pos:line="45" pos:column="21"/></operator><name pos:line="45" pos:column="18">appended<pos:position pos:line="45" pos:column="26"/></name></name><argument_list pos:line="45" pos:column="26">(<argument><expr><name pos:line="45" pos:column="27">len<pos:position pos:line="45" pos:column="30"/></name></expr></argument>)<pos:position pos:line="45" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><name pos:line="46" pos:column="9">reply_bytes_read<pos:position pos:line="46" pos:column="25"/></name> <operator pos:line="46" pos:column="26">+=<pos:position pos:line="46" pos:column="28"/></operator> <name pos:line="46" pos:column="29">len<pos:position pos:line="46" pos:column="32"/></name></expr>;<pos:position pos:line="46" pos:column="33"/></expr_stmt>
<cpp:if pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">if<pos:position pos:line="47" pos:column="4"/></cpp:directive> <expr><name pos:line="47" pos:column="5">DELAY_POOLS<pos:position pos:line="47" pos:column="16"/></name></expr></cpp:if>

        <decl_stmt><decl><type><name pos:line="49" pos:column="9">DelayId<pos:position pos:line="49" pos:column="16"/></name></type> <name pos:line="49" pos:column="17">delayId<pos:position pos:line="49" pos:column="24"/></name> <init pos:line="49" pos:column="25">= <expr><call><name><name pos:line="49" pos:column="27">entry<pos:position pos:line="49" pos:column="32"/></name><operator pos:line="49" pos:column="32">-&gt;<pos:position pos:line="49" pos:column="37"/></operator><name pos:line="49" pos:column="34">mem_obj<pos:position pos:line="49" pos:column="41"/></name><operator pos:line="49" pos:column="41">-&gt;<pos:position pos:line="49" pos:column="46"/></operator><name pos:line="49" pos:column="43">mostBytesAllowed<pos:position pos:line="49" pos:column="59"/></name></name><argument_list pos:line="49" pos:column="59">()<pos:position pos:line="49" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="49" pos:column="62"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="50" pos:column="9">delayId<pos:position pos:line="50" pos:column="16"/></name><operator pos:line="50" pos:column="16">.<pos:position pos:line="50" pos:column="17"/></operator><name pos:line="50" pos:column="17">bytesIn<pos:position pos:line="50" pos:column="24"/></name></name><argument_list pos:line="50" pos:column="24">(<argument><expr><name pos:line="50" pos:column="25">len<pos:position pos:line="50" pos:column="28"/></name></expr></argument>)<pos:position pos:line="50" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="30"/></expr_stmt>
<cpp:endif pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">endif<pos:position pos:line="51" pos:column="7"/></cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name pos:line="53" pos:column="9">kb_incr<pos:position pos:line="53" pos:column="16"/></name><argument_list pos:line="53" pos:column="16">(<argument><expr><operator pos:line="53" pos:column="17">&amp;<pos:position pos:line="53" pos:column="22"/></operator><name><name pos:line="53" pos:column="18">statCounter<pos:position pos:line="53" pos:column="29"/></name><operator pos:line="53" pos:column="29">.<pos:position pos:line="53" pos:column="30"/></operator><name pos:line="53" pos:column="30">server<pos:position pos:line="53" pos:column="36"/></name><operator pos:line="53" pos:column="36">.<pos:position pos:line="53" pos:column="37"/></operator><name pos:line="53" pos:column="37">all<pos:position pos:line="53" pos:column="40"/></name><operator pos:line="53" pos:column="40">.<pos:position pos:line="53" pos:column="41"/></operator><name pos:line="53" pos:column="41">kbytes_in<pos:position pos:line="53" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="52">len<pos:position pos:line="53" pos:column="55"/></name></expr></argument>)<pos:position pos:line="53" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="57"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="54" pos:column="9">kb_incr<pos:position pos:line="54" pos:column="16"/></name><argument_list pos:line="54" pos:column="16">(<argument><expr><operator pos:line="54" pos:column="17">&amp;<pos:position pos:line="54" pos:column="22"/></operator><name><name pos:line="54" pos:column="18">statCounter<pos:position pos:line="54" pos:column="29"/></name><operator pos:line="54" pos:column="29">.<pos:position pos:line="54" pos:column="30"/></operator><name pos:line="54" pos:column="30">server<pos:position pos:line="54" pos:column="36"/></name><operator pos:line="54" pos:column="36">.<pos:position pos:line="54" pos:column="37"/></operator><name pos:line="54" pos:column="37">http<pos:position pos:line="54" pos:column="41"/></name><operator pos:line="54" pos:column="41">.<pos:position pos:line="54" pos:column="42"/></operator><name pos:line="54" pos:column="42">kbytes_in<pos:position pos:line="54" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="53">len<pos:position pos:line="54" pos:column="56"/></name></expr></argument>)<pos:position pos:line="54" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="58"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="55" pos:column="9">IOStats<pos:position pos:line="55" pos:column="16"/></name><operator pos:line="55" pos:column="16">.<pos:position pos:line="55" pos:column="17"/></operator><name pos:line="55" pos:column="17">Http<pos:position pos:line="55" pos:column="21"/></name><operator pos:line="55" pos:column="21">.<pos:position pos:line="55" pos:column="22"/></operator><name pos:line="55" pos:column="22">reads<pos:position pos:line="55" pos:column="27"/></name></name><operator pos:line="55" pos:column="27">++<pos:position pos:line="55" pos:column="29"/></operator></expr>;<pos:position pos:line="55" pos:column="30"/></expr_stmt>

        <for pos:line="57" pos:column="9">for <control pos:line="57" pos:column="13">(<init><expr><name pos:line="57" pos:column="14">clen<pos:position pos:line="57" pos:column="18"/></name> <operator pos:line="57" pos:column="19">=<pos:position pos:line="57" pos:column="20"/></operator> <name pos:line="57" pos:column="21">len<pos:position pos:line="57" pos:column="24"/></name> <operator pos:line="57" pos:column="25">-<pos:position pos:line="57" pos:column="26"/></operator> <literal type="number" pos:line="57" pos:column="27">1<pos:position pos:line="57" pos:column="28"/></literal></expr><operator pos:line="57" pos:column="28">,<pos:position pos:line="57" pos:column="29"/></operator> <expr><name pos:line="57" pos:column="30">bin<pos:position pos:line="57" pos:column="33"/></name> <operator pos:line="57" pos:column="34">=<pos:position pos:line="57" pos:column="35"/></operator> <literal type="number" pos:line="57" pos:column="36">0<pos:position pos:line="57" pos:column="37"/></literal></expr>;<pos:position pos:line="57" pos:column="38"/></init> <condition><expr><name pos:line="57" pos:column="39">clen<pos:position pos:line="57" pos:column="43"/></name></expr>;<pos:position pos:line="57" pos:column="44"/></condition> <incr><expr><name pos:line="57" pos:column="45">bin<pos:position pos:line="57" pos:column="48"/></name><operator pos:line="57" pos:column="48">++<pos:position pos:line="57" pos:column="50"/></operator></expr></incr>)<pos:position pos:line="57" pos:column="51"/></control>
            <block type="pseudo"><expr_stmt><expr><name pos:line="58" pos:column="13">clen<pos:position pos:line="58" pos:column="17"/></name> <operator pos:line="58" pos:column="18">&gt;&gt;=<pos:position pos:line="58" pos:column="27"/></operator> <literal type="number" pos:line="58" pos:column="22">1<pos:position pos:line="58" pos:column="23"/></literal></expr>;<pos:position pos:line="58" pos:column="24"/></expr_stmt></block></for>

        <expr_stmt><expr><name><name pos:line="60" pos:column="9">IOStats<pos:position pos:line="60" pos:column="16"/></name><operator pos:line="60" pos:column="16">.<pos:position pos:line="60" pos:column="17"/></operator><name pos:line="60" pos:column="17">Http<pos:position pos:line="60" pos:column="21"/></name><operator pos:line="60" pos:column="21">.<pos:position pos:line="60" pos:column="22"/></operator><name pos:line="60" pos:column="22">read_hist<pos:position pos:line="60" pos:column="31"/></name><index pos:line="60" pos:column="31">[<expr><name pos:line="60" pos:column="32">bin<pos:position pos:line="60" pos:column="35"/></name></expr>]<pos:position pos:line="60" pos:column="36"/></index></name><operator pos:line="60" pos:column="36">++<pos:position pos:line="60" pos:column="38"/></operator></expr>;<pos:position pos:line="60" pos:column="39"/></expr_stmt>

        <comment type="line" pos:line="62" pos:column="9">// update peer response time stats (%&lt;pt)</comment>
        <decl_stmt><decl><type><specifier pos:line="63" pos:column="9">const<pos:position pos:line="63" pos:column="14"/></specifier> <name pos:line="63" pos:column="15">timeval<pos:position pos:line="63" pos:column="22"/></name> <modifier pos:line="63" pos:column="23">&amp;<pos:position pos:line="63" pos:column="28"/></modifier></type><name pos:line="63" pos:column="24">sent<pos:position pos:line="63" pos:column="28"/></name> <init pos:line="63" pos:column="29">= <expr><name><name pos:line="63" pos:column="31">orig_request<pos:position pos:line="63" pos:column="43"/></name><operator pos:line="63" pos:column="43">-&gt;<pos:position pos:line="63" pos:column="48"/></operator><name pos:line="63" pos:column="45">hier<pos:position pos:line="63" pos:column="49"/></name><operator pos:line="63" pos:column="49">.<pos:position pos:line="63" pos:column="50"/></operator><name pos:line="63" pos:column="50">peer_http_request_sent<pos:position pos:line="63" pos:column="72"/></name></name></expr></init></decl>;<pos:position pos:line="63" pos:column="73"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="64" pos:column="9">orig_request<pos:position pos:line="64" pos:column="21"/></name><operator pos:line="64" pos:column="21">-&gt;<pos:position pos:line="64" pos:column="26"/></operator><name pos:line="64" pos:column="23">hier<pos:position pos:line="64" pos:column="27"/></name><operator pos:line="64" pos:column="27">.<pos:position pos:line="64" pos:column="28"/></operator><name pos:line="64" pos:column="28">peer_response_time<pos:position pos:line="64" pos:column="46"/></name></name> <operator pos:line="64" pos:column="47">=<pos:position pos:line="64" pos:column="48"/></operator>
            <ternary><condition><expr><name><name pos:line="65" pos:column="13">sent<pos:position pos:line="65" pos:column="17"/></name><operator pos:line="65" pos:column="17">.<pos:position pos:line="65" pos:column="18"/></operator><name pos:line="65" pos:column="18">tv_sec<pos:position pos:line="65" pos:column="24"/></name></name></expr> ?<pos:position pos:line="65" pos:column="26"/></condition><then pos:line="65" pos:column="26"> <expr><call><name pos:line="65" pos:column="27">tvSubMsec<pos:position pos:line="65" pos:column="36"/></name><argument_list pos:line="65" pos:column="36">(<argument><expr><name pos:line="65" pos:column="37">sent<pos:position pos:line="65" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="43">current_time<pos:position pos:line="65" pos:column="55"/></name></expr></argument>)<pos:position pos:line="65" pos:column="56"/></argument_list></call></expr> <pos:position pos:line="65" pos:column="57"/></then><else pos:line="65" pos:column="57">: <expr><operator pos:line="65" pos:column="59">-<pos:position pos:line="65" pos:column="60"/></operator><literal type="number" pos:line="65" pos:column="60">1<pos:position pos:line="65" pos:column="61"/></literal></expr></else></ternary></expr>;<pos:position pos:line="65" pos:column="62"/></expr_stmt>
    }<pos:position pos:line="66" pos:column="6"/></block></then></if>

    <comment type="block" format="doxygen" pos:line="68" pos:column="5">/** \par
     * Here the RFC says we should ignore whitespace between replies, but we can't as
     * doing so breaks HTTP/0.9 replies beginning with witespace, and in addition
     * the response splitting countermeasures is extremely likely to trigger on this,
     * not allowing connection reuse in the first place.
     */</comment>
<cpp:if pos:line="74" pos:column="1">#<cpp:directive pos:line="74" pos:column="2">if<pos:position pos:line="74" pos:column="4"/></cpp:directive> <expr><name pos:line="74" pos:column="5">DONT_DO_THIS<pos:position pos:line="74" pos:column="17"/></name></expr></cpp:if>
    <if pos:line="75" pos:column="5">if <condition pos:line="75" pos:column="8">(<expr><operator pos:line="75" pos:column="9">!<pos:position pos:line="75" pos:column="10"/></operator><name><name pos:line="75" pos:column="10">flags<pos:position pos:line="75" pos:column="15"/></name><operator pos:line="75" pos:column="15">.<pos:position pos:line="75" pos:column="16"/></operator><name pos:line="75" pos:column="16">headers_parsed<pos:position pos:line="75" pos:column="30"/></name></name> <operator pos:line="75" pos:column="31">&amp;&amp;<pos:position pos:line="75" pos:column="41"/></operator> <name pos:line="75" pos:column="34">len<pos:position pos:line="75" pos:column="37"/></name> <operator pos:line="75" pos:column="38">&gt;<pos:position pos:line="75" pos:column="42"/></operator> <literal type="number" pos:line="75" pos:column="40">0<pos:position pos:line="75" pos:column="41"/></literal> <operator pos:line="75" pos:column="42">&amp;&amp;<pos:position pos:line="75" pos:column="52"/></operator> <name><name pos:line="75" pos:column="45">fd_table<pos:position pos:line="75" pos:column="53"/></name><index pos:line="75" pos:column="53">[<expr><name pos:line="75" pos:column="54">fd<pos:position pos:line="75" pos:column="56"/></name></expr>]<pos:position pos:line="75" pos:column="57"/></index></name><operator pos:line="75" pos:column="57">.<pos:position pos:line="75" pos:column="58"/></operator><name pos:line="75" pos:column="58">uses<pos:position pos:line="75" pos:column="62"/></name> <operator pos:line="75" pos:column="63">&gt;<pos:position pos:line="75" pos:column="67"/></operator> <literal type="number" pos:line="75" pos:column="65">1<pos:position pos:line="75" pos:column="66"/></literal></expr>)<pos:position pos:line="75" pos:column="67"/></condition><then pos:line="75" pos:column="67"> <block pos:line="75" pos:column="68">{
        <comment type="block" pos:line="76" pos:column="9">/* Skip whitespace between replies */</comment>

        <while pos:line="78" pos:column="9">while <condition pos:line="78" pos:column="15">(<expr><name pos:line="78" pos:column="16">len<pos:position pos:line="78" pos:column="19"/></name> <operator pos:line="78" pos:column="20">&gt;<pos:position pos:line="78" pos:column="24"/></operator> <literal type="number" pos:line="78" pos:column="22">0<pos:position pos:line="78" pos:column="23"/></literal> <operator pos:line="78" pos:column="24">&amp;&amp;<pos:position pos:line="78" pos:column="34"/></operator> <call><name pos:line="78" pos:column="27">xisspace<pos:position pos:line="78" pos:column="35"/></name><argument_list pos:line="78" pos:column="35">(<argument><expr><operator pos:line="78" pos:column="36">*<pos:position pos:line="78" pos:column="37"/></operator><name pos:line="78" pos:column="37">buf<pos:position pos:line="78" pos:column="40"/></name></expr></argument>)<pos:position pos:line="78" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="78" pos:column="42"/></condition>
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="79" pos:column="13">xmemmove<pos:position pos:line="79" pos:column="21"/></name><argument_list pos:line="79" pos:column="21">(<argument><expr><name pos:line="79" pos:column="22">buf<pos:position pos:line="79" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="27">buf<pos:position pos:line="79" pos:column="30"/></name> <operator pos:line="79" pos:column="31">+<pos:position pos:line="79" pos:column="32"/></operator> <literal type="number" pos:line="79" pos:column="33">1<pos:position pos:line="79" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="79" pos:column="36">len<pos:position pos:line="79" pos:column="39"/></name><operator pos:line="79" pos:column="39">--<pos:position pos:line="79" pos:column="41"/></operator></expr></argument>)<pos:position pos:line="79" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="43"/></expr_stmt></block></while>

        <if pos:line="81" pos:column="9">if <condition pos:line="81" pos:column="12">(<expr><name pos:line="81" pos:column="13">len<pos:position pos:line="81" pos:column="16"/></name> <operator pos:line="81" pos:column="17">==<pos:position pos:line="81" pos:column="19"/></operator> <literal type="number" pos:line="81" pos:column="20">0<pos:position pos:line="81" pos:column="21"/></literal></expr>)<pos:position pos:line="81" pos:column="22"/></condition><then pos:line="81" pos:column="22"> <block pos:line="81" pos:column="23">{
            <comment type="block" pos:line="82" pos:column="13">/* Continue to read... */</comment>
            <comment type="block" pos:line="83" pos:column="13">/* Timeout NOT increased. This whitespace was from previous reply */</comment>
            <expr_stmt><expr><name><name pos:line="84" pos:column="13">flags<pos:position pos:line="84" pos:column="18"/></name><operator pos:line="84" pos:column="18">.<pos:position pos:line="84" pos:column="19"/></operator><name pos:line="84" pos:column="19">do_next_read<pos:position pos:line="84" pos:column="31"/></name></name> <operator pos:line="84" pos:column="32">=<pos:position pos:line="84" pos:column="33"/></operator> <literal type="number" pos:line="84" pos:column="34">1<pos:position pos:line="84" pos:column="35"/></literal></expr>;<pos:position pos:line="84" pos:column="36"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="85" pos:column="13">maybeReadVirginBody<pos:position pos:line="85" pos:column="32"/></name><argument_list pos:line="85" pos:column="32">()<pos:position pos:line="85" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="35"/></expr_stmt>
            <return pos:line="86" pos:column="13">return;<pos:position pos:line="86" pos:column="20"/></return>
        }<pos:position pos:line="87" pos:column="10"/></block></then></if>
    }<pos:position pos:line="88" pos:column="6"/></block></then></if>

<cpp:endif pos:line="90" pos:column="1">#<cpp:directive pos:line="90" pos:column="2">endif<pos:position pos:line="90" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="92" pos:column="5">if <condition pos:line="92" pos:column="8">(<expr><name pos:line="92" pos:column="9">len<pos:position pos:line="92" pos:column="12"/></name> <operator pos:line="92" pos:column="13">==<pos:position pos:line="92" pos:column="15"/></operator> <literal type="number" pos:line="92" pos:column="16">0<pos:position pos:line="92" pos:column="17"/></literal></expr>)<pos:position pos:line="92" pos:column="18"/></condition><then pos:line="92" pos:column="18"> <block pos:line="92" pos:column="19">{ <comment type="line" pos:line="92" pos:column="21">// reached EOF?</comment>
        <expr_stmt><expr><name pos:line="93" pos:column="9">eof<pos:position pos:line="93" pos:column="12"/></name> <operator pos:line="93" pos:column="13">=<pos:position pos:line="93" pos:column="14"/></operator> <literal type="number" pos:line="93" pos:column="15">1<pos:position pos:line="93" pos:column="16"/></literal></expr>;<pos:position pos:line="93" pos:column="17"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="94" pos:column="9">flags<pos:position pos:line="94" pos:column="14"/></name><operator pos:line="94" pos:column="14">.<pos:position pos:line="94" pos:column="15"/></operator><name pos:line="94" pos:column="15">do_next_read<pos:position pos:line="94" pos:column="27"/></name></name> <operator pos:line="94" pos:column="28">=<pos:position pos:line="94" pos:column="29"/></operator> <literal type="number" pos:line="94" pos:column="30">0<pos:position pos:line="94" pos:column="31"/></literal></expr>;<pos:position pos:line="94" pos:column="32"/></expr_stmt>

        <comment type="block" pos:line="96" pos:column="9">/* Bug 2879: Replies may terminate with \r\n then EOF instead of \r\n\r\n
         * Ensure here that we have at minimum two \r\n when EOF is seen.
         * TODO: Add eof parameter to headersEnd() and move this hack there.
         */</comment>
        <if pos:line="100" pos:column="9">if <condition pos:line="100" pos:column="12">(<expr><call><name><name pos:line="100" pos:column="13">readBuf<pos:position pos:line="100" pos:column="20"/></name><operator pos:line="100" pos:column="20">-&gt;<pos:position pos:line="100" pos:column="25"/></operator><name pos:line="100" pos:column="22">contentSize<pos:position pos:line="100" pos:column="33"/></name></name><argument_list pos:line="100" pos:column="33">()<pos:position pos:line="100" pos:column="35"/></argument_list></call> <operator pos:line="100" pos:column="36">&amp;&amp;<pos:position pos:line="100" pos:column="46"/></operator> <operator pos:line="100" pos:column="39">!<pos:position pos:line="100" pos:column="40"/></operator><name><name pos:line="100" pos:column="40">flags<pos:position pos:line="100" pos:column="45"/></name><operator pos:line="100" pos:column="45">.<pos:position pos:line="100" pos:column="46"/></operator><name pos:line="100" pos:column="46">headers_parsed<pos:position pos:line="100" pos:column="60"/></name></name></expr>)<pos:position pos:line="100" pos:column="61"/></condition><then pos:line="100" pos:column="61"> <block pos:line="100" pos:column="62">{
            <comment type="block" pos:line="101" pos:column="13">/*
             * Yes Henrik, there is a point to doing this.  When we
             * called httpProcessReplyHeader() before, we didn't find
             * the end of headers, but now we are definately at EOF, so
             * we want to process the reply headers.
             */</comment>
            <comment type="block" pos:line="107" pos:column="13">/* Fake an "end-of-headers" to work around such broken servers */</comment>
            <expr_stmt><expr><call><name><name pos:line="108" pos:column="13">readBuf<pos:position pos:line="108" pos:column="20"/></name><operator pos:line="108" pos:column="20">-&gt;<pos:position pos:line="108" pos:column="25"/></operator><name pos:line="108" pos:column="22">append<pos:position pos:line="108" pos:column="28"/></name></name><argument_list pos:line="108" pos:column="28">(<argument><expr><literal type="string" pos:line="108" pos:column="29">"\r\n"<pos:position pos:line="108" pos:column="35"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="108" pos:column="37">2<pos:position pos:line="108" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="108" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="40"/></expr_stmt>
        }<pos:position pos:line="109" pos:column="10"/></block></then></if>
    }<pos:position pos:line="110" pos:column="6"/></block></then></if>

    <if pos:line="112" pos:column="5">if <condition pos:line="112" pos:column="8">(<expr><operator pos:line="112" pos:column="9">!<pos:position pos:line="112" pos:column="10"/></operator><name><name pos:line="112" pos:column="10">flags<pos:position pos:line="112" pos:column="15"/></name><operator pos:line="112" pos:column="15">.<pos:position pos:line="112" pos:column="16"/></operator><name pos:line="112" pos:column="16">headers_parsed<pos:position pos:line="112" pos:column="30"/></name></name></expr>)<pos:position pos:line="112" pos:column="31"/></condition><then pos:line="112" pos:column="31"> <block pos:line="112" pos:column="32">{ <comment type="line" pos:line="112" pos:column="34">// have not parsed headers yet?</comment>
        <expr_stmt><expr><call><name pos:line="113" pos:column="9">PROF_start<pos:position pos:line="113" pos:column="19"/></name><argument_list pos:line="113" pos:column="19">(<argument><expr><name pos:line="113" pos:column="20">HttpStateData_processReplyHeader<pos:position pos:line="113" pos:column="52"/></name></expr></argument>)<pos:position pos:line="113" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="54"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="114" pos:column="9">processReplyHeader<pos:position pos:line="114" pos:column="27"/></name><argument_list pos:line="114" pos:column="27">()<pos:position pos:line="114" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="115" pos:column="9">PROF_stop<pos:position pos:line="115" pos:column="18"/></name><argument_list pos:line="115" pos:column="18">(<argument><expr><name pos:line="115" pos:column="19">HttpStateData_processReplyHeader<pos:position pos:line="115" pos:column="51"/></name></expr></argument>)<pos:position pos:line="115" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="53"/></expr_stmt>

        <if pos:line="117" pos:column="9">if <condition pos:line="117" pos:column="12">(<expr><operator pos:line="117" pos:column="13">!<pos:position pos:line="117" pos:column="14"/></operator><call><name pos:line="117" pos:column="14">continueAfterParsingHeader<pos:position pos:line="117" pos:column="40"/></name><argument_list pos:line="117" pos:column="40">()<pos:position pos:line="117" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="117" pos:column="43"/></condition><then pos:line="117" pos:column="43"> <comment type="line" pos:line="117" pos:column="44">// parsing error or need more data</comment>
            <block type="pseudo"><return pos:line="118" pos:column="13">return;<pos:position pos:line="118" pos:column="20"/></return></block></then></if> <comment type="line" pos:line="118" pos:column="21">// TODO: send errors to ICAP</comment>

        <expr_stmt><expr><call><name pos:line="120" pos:column="9">adaptOrFinalizeReply<pos:position pos:line="120" pos:column="29"/></name><argument_list pos:line="120" pos:column="29">()<pos:position pos:line="120" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="121" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="123" pos:column="5">// kick more reads if needed and/or process the response body, if any</comment>
    <expr_stmt><expr><call><name pos:line="124" pos:column="5">PROF_start<pos:position pos:line="124" pos:column="15"/></name><argument_list pos:line="124" pos:column="15">(<argument><expr><name pos:line="124" pos:column="16">HttpStateData_processReplyBody<pos:position pos:line="124" pos:column="46"/></name></expr></argument>)<pos:position pos:line="124" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="125" pos:column="5">processReplyBody<pos:position pos:line="125" pos:column="21"/></name><argument_list pos:line="125" pos:column="21">()<pos:position pos:line="125" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="24"/></expr_stmt> <comment type="line" pos:line="125" pos:column="25">// may call serverComplete()</comment>
    <expr_stmt><expr><call><name pos:line="126" pos:column="5">PROF_stop<pos:position pos:line="126" pos:column="14"/></name><argument_list pos:line="126" pos:column="14">(<argument><expr><name pos:line="126" pos:column="15">HttpStateData_processReplyBody<pos:position pos:line="126" pos:column="45"/></name></expr></argument>)<pos:position pos:line="126" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="47"/></expr_stmt>
}<pos:position pos:line="127" pos:column="2"/></block></function></unit>
