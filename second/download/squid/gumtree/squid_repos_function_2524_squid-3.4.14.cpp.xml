<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2524_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">LoadableModule<pos:position pos:line="1" pos:column="20"/></name><operator pos:line="1" pos:column="20">::<pos:position pos:line="1" pos:column="22"/></operator><name pos:line="1" pos:column="22">closeModule<pos:position pos:line="1" pos:column="33"/></name></name><parameter_list pos:line="1" pos:column="33">()<pos:position pos:line="1" pos:column="35"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:if pos:line="3" pos:column="1">#	<cpp:directive pos:line="3" pos:column="9">if<pos:position pos:line="3" pos:column="11"/></cpp:directive> <expr><name pos:line="3" pos:column="12">XSTD_USE_LIBLTDL<pos:position pos:line="3" pos:column="28"/></name></expr></cpp:if>
    <comment type="line" pos:line="4" pos:column="5">// we cast to avoid including ltdl.h in LoadableModule.h</comment>
    <return pos:line="5" pos:column="5">return <expr><call><name pos:line="5" pos:column="12">lt_dlclose<pos:position pos:line="5" pos:column="22"/></name><argument_list pos:line="5" pos:column="22">(<argument><expr><cast type="static" pos:line="5" pos:column="23">static_cast<argument_list type="generic" pos:line="5" pos:column="34">&lt;<argument><expr><name pos:line="5" pos:column="35">lt_dlhandle<pos:position pos:line="5" pos:column="46"/></name></expr></argument>&gt;<pos:position pos:line="5" pos:column="50"/></argument_list><argument_list pos:line="5" pos:column="47">(<argument><expr><name pos:line="5" pos:column="48">theHandle<pos:position pos:line="5" pos:column="57"/></name></expr></argument>)<pos:position pos:line="5" pos:column="58"/></argument_list></cast></expr></argument>)<pos:position pos:line="5" pos:column="59"/></argument_list></call> <operator pos:line="5" pos:column="60">==<pos:position pos:line="5" pos:column="62"/></operator> <literal type="number" pos:line="5" pos:column="63">0<pos:position pos:line="5" pos:column="64"/></literal></expr>;<pos:position pos:line="5" pos:column="65"/></return>
<cpp:else pos:line="6" pos:column="1">#	<cpp:directive pos:line="6" pos:column="9">else<pos:position pos:line="6" pos:column="13"/></cpp:directive></cpp:else>
    <return pos:line="7" pos:column="5">return <expr><call><name pos:line="7" pos:column="12">dlclose<pos:position pos:line="7" pos:column="19"/></name><argument_list pos:line="7" pos:column="19">(<argument><expr><name pos:line="7" pos:column="20">theHandle<pos:position pos:line="7" pos:column="29"/></name></expr></argument>)<pos:position pos:line="7" pos:column="30"/></argument_list></call> <operator pos:line="7" pos:column="31">==<pos:position pos:line="7" pos:column="33"/></operator> <literal type="number" pos:line="7" pos:column="34">0<pos:position pos:line="7" pos:column="35"/></literal></expr>;<pos:position pos:line="7" pos:column="36"/></return>
<cpp:endif pos:line="8" pos:column="1">#	<cpp:directive pos:line="8" pos:column="9">endif<pos:position pos:line="8" pos:column="14"/></cpp:directive></cpp:endif>
}<pos:position pos:line="9" pos:column="2"/></block></function></unit>
