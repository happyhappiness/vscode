<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_70_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">convertPortname<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">( <parameter><decl><type><specifier pos:line="2" pos:column="18">const<pos:position pos:line="2" pos:column="23"/></specifier> <name pos:line="2" pos:column="24">char<pos:position pos:line="2" pos:column="28"/></name><modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier></type> <name pos:line="2" pos:column="30">port<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="36">unsigned<pos:position pos:line="2" pos:column="44"/></name> <name pos:line="2" pos:column="45">short<pos:position pos:line="2" pos:column="50"/></name><modifier pos:line="2" pos:column="50">&amp;<pos:position pos:line="2" pos:column="55"/></modifier></type> <name pos:line="2" pos:column="52">dst<pos:position pos:line="2" pos:column="55"/></name></decl></parameter> )<pos:position pos:line="2" pos:column="57"/></parameter_list>
<comment type="line" pos:line="3" pos:column="1">// purpose: convert a numeric or symbolic port number</comment>
<comment type="line" pos:line="4" pos:column="1">// paramtr: port (IN): port description to convert</comment>
<comment type="line" pos:line="5" pos:column="1">//          dst (OUT): port number in network byteorder.</comment>
<comment type="line" pos:line="6" pos:column="1">// returns: -1 in case of error, see errno; 0 otherwise.</comment>
<block pos:line="7" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">p<pos:position pos:line="8" pos:column="10"/></name> <init pos:line="8" pos:column="11">= <expr><call><name pos:line="8" pos:column="13">strtoul<pos:position pos:line="8" pos:column="20"/></name><argument_list pos:line="8" pos:column="20">(<argument><expr><name pos:line="8" pos:column="21">port<pos:position pos:line="8" pos:column="25"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="8" pos:column="26">0<pos:position pos:line="8" pos:column="27"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="8" pos:column="28">0<pos:position pos:line="8" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="30"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="31"/></decl_stmt>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">( <expr><name pos:line="10" pos:column="10">p<pos:position pos:line="10" pos:column="11"/></name> <operator pos:line="10" pos:column="12">==<pos:position pos:line="10" pos:column="14"/></operator> <literal type="number" pos:line="10" pos:column="15">0<pos:position pos:line="10" pos:column="16"/></literal></expr> )<pos:position pos:line="10" pos:column="18"/></condition><then pos:line="10" pos:column="18"> <block pos:line="10" pos:column="19">{
        <comment type="line" pos:line="11" pos:column="9">// symbolic port</comment>
        <decl_stmt><decl><type><name><name pos:line="12" pos:column="9">struct<pos:position pos:line="12" pos:column="15"/></name> <name pos:line="12" pos:column="16">servent<pos:position pos:line="12" pos:column="23"/></name></name><modifier pos:line="12" pos:column="23">*<pos:position pos:line="12" pos:column="24"/></modifier></type> <name pos:line="12" pos:column="25">proto<pos:position pos:line="12" pos:column="30"/></name> <init pos:line="12" pos:column="31">= <expr><call><name pos:line="12" pos:column="33">getservbyname<pos:position pos:line="12" pos:column="46"/></name><argument_list pos:line="12" pos:column="46">( <argument><expr><name pos:line="12" pos:column="48">port<pos:position pos:line="12" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="54">"tcp"<pos:position pos:line="12" pos:column="59"/></literal></expr></argument> )<pos:position pos:line="12" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="62"/></decl_stmt>
        <if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">( <expr><name pos:line="13" pos:column="14">proto<pos:position pos:line="13" pos:column="19"/></name> <operator pos:line="13" pos:column="20">==<pos:position pos:line="13" pos:column="22"/></operator> <name pos:line="13" pos:column="23">NULL<pos:position pos:line="13" pos:column="27"/></name></expr> )<pos:position pos:line="13" pos:column="29"/></condition><then pos:line="13" pos:column="29"> <block type="pseudo"><return pos:line="13" pos:column="30">return <expr><operator pos:line="13" pos:column="37">-<pos:position pos:line="13" pos:column="38"/></operator><literal type="number" pos:line="13" pos:column="38">1<pos:position pos:line="13" pos:column="39"/></literal></expr>;<pos:position pos:line="13" pos:column="40"/></return></block></then>
        <else pos:line="14" pos:column="9">else <block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="14">dst<pos:position pos:line="14" pos:column="17"/></name> <operator pos:line="14" pos:column="18">=<pos:position pos:line="14" pos:column="19"/></operator> <name><name pos:line="14" pos:column="20">proto<pos:position pos:line="14" pos:column="25"/></name><operator pos:line="14" pos:column="25">-&gt;<pos:position pos:line="14" pos:column="30"/></operator><name pos:line="14" pos:column="27">s_port<pos:position pos:line="14" pos:column="33"/></name></name></expr>;<pos:position pos:line="14" pos:column="34"/></expr_stmt></block></else></if>
    }<pos:position pos:line="15" pos:column="6"/></block></then> <else pos:line="15" pos:column="7">else <block pos:line="15" pos:column="12">{
        <comment type="line" pos:line="16" pos:column="9">// numeric port</comment>
        <expr_stmt><expr><name pos:line="17" pos:column="9">dst<pos:position pos:line="17" pos:column="12"/></name> <operator pos:line="17" pos:column="13">=<pos:position pos:line="17" pos:column="14"/></operator> <call><name pos:line="17" pos:column="15">htons<pos:position pos:line="17" pos:column="20"/></name><argument_list pos:line="17" pos:column="20">(<argument><expr><name pos:line="17" pos:column="21">p<pos:position pos:line="17" pos:column="22"/></name></expr></argument>)<pos:position pos:line="17" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="18" pos:column="6"/></block></else></if>
    <return pos:line="19" pos:column="5">return <expr><literal type="number" pos:line="19" pos:column="12">0<pos:position pos:line="19" pos:column="13"/></literal></expr>;<pos:position pos:line="19" pos:column="14"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
