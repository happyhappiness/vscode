<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_function_84.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">bool<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">EvalBoolExpr<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><specifier pos:line="2" pos:column="14">const<pos:position pos:line="2" pos:column="19"/></specifier> <name pos:line="2" pos:column="20">char<pos:position pos:line="2" pos:column="24"/></name><modifier pos:line="2" pos:column="24">*<pos:position pos:line="2" pos:column="25"/></modifier></type> <name pos:line="2" pos:column="26">expr<pos:position pos:line="2" pos:column="30"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="31"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">expr<pos:position pos:line="4" pos:column="16"/></name> <operator pos:line="4" pos:column="17">!=<pos:position pos:line="4" pos:column="19"/></operator> <name pos:line="4" pos:column="20">NULL<pos:position pos:line="4" pos:column="24"/></name></expr></argument>)<pos:position pos:line="4" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="26"/></expr_stmt>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><call><name pos:line="5" pos:column="9">strcmp<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">(<argument><expr><name pos:line="5" pos:column="16">expr<pos:position pos:line="5" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="22">"true"<pos:position pos:line="5" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="29"/></argument_list></call> <operator pos:line="5" pos:column="30">==<pos:position pos:line="5" pos:column="32"/></operator> <literal type="number" pos:line="5" pos:column="33">0<pos:position pos:line="5" pos:column="34"/></literal></expr>)<pos:position pos:line="5" pos:column="35"/></condition><then pos:line="5" pos:column="35"> <block pos:line="5" pos:column="36">{
        <return pos:line="6" pos:column="9">return <expr><literal type="boolean" pos:line="6" pos:column="16">true<pos:position pos:line="6" pos:column="20"/></literal></expr>;<pos:position pos:line="6" pos:column="21"/></return>
    }<pos:position pos:line="7" pos:column="6"/></block></then> <elseif pos:line="7" pos:column="7">else <if pos:line="7" pos:column="12">if <condition pos:line="7" pos:column="15">(<expr><call><name pos:line="7" pos:column="16">strcmp<pos:position pos:line="7" pos:column="22"/></name><argument_list pos:line="7" pos:column="22">(<argument><expr><name pos:line="7" pos:column="23">expr<pos:position pos:line="7" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="29">"false"<pos:position pos:line="7" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="37"/></argument_list></call> <operator pos:line="7" pos:column="38">==<pos:position pos:line="7" pos:column="40"/></operator> <literal type="number" pos:line="7" pos:column="41">0<pos:position pos:line="7" pos:column="42"/></literal></expr>)<pos:position pos:line="7" pos:column="43"/></condition><then pos:line="7" pos:column="43"> <block pos:line="7" pos:column="44">{
        <return pos:line="8" pos:column="9">return <expr><literal type="boolean" pos:line="8" pos:column="16">false<pos:position pos:line="8" pos:column="21"/></literal></expr>;<pos:position pos:line="8" pos:column="22"/></return>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if></elseif> <elseif pos:line="9" pos:column="7">else <if pos:line="9" pos:column="12">if <condition pos:line="9" pos:column="15">(<decl><type><specifier pos:line="9" pos:column="16">const<pos:position pos:line="9" pos:column="21"/></specifier> <name pos:line="9" pos:column="22">char<pos:position pos:line="9" pos:column="26"/></name><modifier pos:line="9" pos:column="26">*<pos:position pos:line="9" pos:column="27"/></modifier></type> <name pos:line="9" pos:column="28">equation<pos:position pos:line="9" pos:column="36"/></name> <init pos:line="9" pos:column="37">= <expr><call><name pos:line="9" pos:column="39">strchr<pos:position pos:line="9" pos:column="45"/></name><argument_list pos:line="9" pos:column="45">(<argument><expr><name pos:line="9" pos:column="46">expr<pos:position pos:line="9" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="9" pos:column="52">'='<pos:position pos:line="9" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="56"/></argument_list></call></expr></init></decl>)<pos:position pos:line="9" pos:column="57"/></condition><then pos:line="9" pos:column="57"> <block pos:line="9" pos:column="58">{
        <decl_stmt><decl><type><specifier pos:line="10" pos:column="9">const<pos:position pos:line="10" pos:column="14"/></specifier> <name pos:line="10" pos:column="15">char<pos:position pos:line="10" pos:column="19"/></name><modifier pos:line="10" pos:column="19">*<pos:position pos:line="10" pos:column="20"/></modifier></type> <name pos:line="10" pos:column="21">rvalue<pos:position pos:line="10" pos:column="27"/></name> <init pos:line="10" pos:column="28">= <expr><call><name pos:line="10" pos:column="30">skip_ws<pos:position pos:line="10" pos:column="37"/></name><argument_list pos:line="10" pos:column="37">(<argument><expr><name pos:line="10" pos:column="38">equation<pos:position pos:line="10" pos:column="46"/></name> <operator pos:line="10" pos:column="47">+<pos:position pos:line="10" pos:column="48"/></operator> <literal type="number" pos:line="10" pos:column="49">1<pos:position pos:line="10" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="52"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="11" pos:column="9">char<pos:position pos:line="11" pos:column="13"/></name><modifier pos:line="11" pos:column="13">*<pos:position pos:line="11" pos:column="14"/></modifier></type> <name pos:line="11" pos:column="15">lvalue<pos:position pos:line="11" pos:column="21"/></name> <init pos:line="11" pos:column="22">= <expr><operator pos:line="11" pos:column="24">(<pos:position pos:line="11" pos:column="25"/></operator><name pos:line="11" pos:column="25">char<pos:position pos:line="11" pos:column="29"/></name><operator pos:line="11" pos:column="29">*<pos:position pos:line="11" pos:column="30"/></operator><operator pos:line="11" pos:column="30">)<pos:position pos:line="11" pos:column="31"/></operator><call><name pos:line="11" pos:column="31">xmalloc<pos:position pos:line="11" pos:column="38"/></name><argument_list pos:line="11" pos:column="38">(<argument><expr><name pos:line="11" pos:column="39">equation<pos:position pos:line="11" pos:column="47"/></name> <operator pos:line="11" pos:column="48">-<pos:position pos:line="11" pos:column="49"/></operator> <name pos:line="11" pos:column="50">expr<pos:position pos:line="11" pos:column="54"/></name> <operator pos:line="11" pos:column="55">+<pos:position pos:line="11" pos:column="56"/></operator> <literal type="number" pos:line="11" pos:column="57">1<pos:position pos:line="11" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="60"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">xstrncpy<pos:position pos:line="12" pos:column="17"/></name><argument_list pos:line="12" pos:column="17">(<argument><expr><name pos:line="12" pos:column="18">lvalue<pos:position pos:line="12" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="26">expr<pos:position pos:line="12" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="32">equation<pos:position pos:line="12" pos:column="40"/></name> <operator pos:line="12" pos:column="41">-<pos:position pos:line="12" pos:column="42"/></operator> <name pos:line="12" pos:column="43">expr<pos:position pos:line="12" pos:column="47"/></name> <operator pos:line="12" pos:column="48">+<pos:position pos:line="12" pos:column="49"/></operator> <literal type="number" pos:line="12" pos:column="50">1<pos:position pos:line="12" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="53"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">trim_trailing_ws<pos:position pos:line="13" pos:column="25"/></name><argument_list pos:line="13" pos:column="25">(<argument><expr><name pos:line="13" pos:column="26">lvalue<pos:position pos:line="13" pos:column="32"/></name></expr></argument>)<pos:position pos:line="13" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="34"/></expr_stmt>

        <decl_stmt><decl><type><name pos:line="15" pos:column="9">long<pos:position pos:line="15" pos:column="13"/></name></type> <name pos:line="15" pos:column="14">number1<pos:position pos:line="15" pos:column="21"/></name></decl>;<pos:position pos:line="15" pos:column="22"/></decl_stmt>
        <if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><operator pos:line="16" pos:column="13">!<pos:position pos:line="16" pos:column="14"/></operator><call><name pos:line="16" pos:column="14">StrToInt<pos:position pos:line="16" pos:column="22"/></name><argument_list pos:line="16" pos:column="22">(<argument><expr><name pos:line="16" pos:column="23">lvalue<pos:position pos:line="16" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="31">number1<pos:position pos:line="16" pos:column="38"/></name></expr></argument>)<pos:position pos:line="16" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="40"/></condition><then pos:line="16" pos:column="40">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="13">fatalf<pos:position pos:line="17" pos:column="19"/></name><argument_list pos:line="17" pos:column="19">(<argument><expr><literal type="string" pos:line="17" pos:column="20">"String is not a integer number: '%s'\n"<pos:position pos:line="17" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="62">lvalue<pos:position pos:line="17" pos:column="68"/></name></expr></argument>)<pos:position pos:line="17" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="70"/></expr_stmt></block></then></if>
        <decl_stmt><decl><type><name pos:line="18" pos:column="9">long<pos:position pos:line="18" pos:column="13"/></name></type> <name pos:line="18" pos:column="14">number2<pos:position pos:line="18" pos:column="21"/></name></decl>;<pos:position pos:line="18" pos:column="22"/></decl_stmt>
        <if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><operator pos:line="19" pos:column="13">!<pos:position pos:line="19" pos:column="14"/></operator><call><name pos:line="19" pos:column="14">StrToInt<pos:position pos:line="19" pos:column="22"/></name><argument_list pos:line="19" pos:column="22">(<argument><expr><name pos:line="19" pos:column="23">rvalue<pos:position pos:line="19" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="31">number2<pos:position pos:line="19" pos:column="38"/></name></expr></argument>)<pos:position pos:line="19" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="40"/></condition><then pos:line="19" pos:column="40">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="13">fatalf<pos:position pos:line="20" pos:column="19"/></name><argument_list pos:line="20" pos:column="19">(<argument><expr><literal type="string" pos:line="20" pos:column="20">"String is not a integer number: '%s'\n"<pos:position pos:line="20" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="62">rvalue<pos:position pos:line="20" pos:column="68"/></name></expr></argument>)<pos:position pos:line="20" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="70"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name pos:line="22" pos:column="9">xfree<pos:position pos:line="22" pos:column="14"/></name><argument_list pos:line="22" pos:column="14">(<argument><expr><name pos:line="22" pos:column="15">lvalue<pos:position pos:line="22" pos:column="21"/></name></expr></argument>)<pos:position pos:line="22" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="23"/></expr_stmt>
        <return pos:line="23" pos:column="9">return <expr><name pos:line="23" pos:column="16">number1<pos:position pos:line="23" pos:column="23"/></name> <operator pos:line="23" pos:column="24">==<pos:position pos:line="23" pos:column="26"/></operator> <name pos:line="23" pos:column="27">number2<pos:position pos:line="23" pos:column="34"/></name></expr>;<pos:position pos:line="23" pos:column="35"/></return>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if></elseif></if>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">fatalf<pos:position pos:line="25" pos:column="11"/></name><argument_list pos:line="25" pos:column="11">(<argument><expr><literal type="string" pos:line="25" pos:column="12">"Unable to evaluate expression '%s'\n"<pos:position pos:line="25" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="52">expr<pos:position pos:line="25" pos:column="56"/></name></expr></argument>)<pos:position pos:line="25" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="58"/></expr_stmt>
    <return pos:line="26" pos:column="5">return <expr><literal type="boolean" pos:line="26" pos:column="12">false<pos:position pos:line="26" pos:column="17"/></literal></expr>;<pos:position pos:line="26" pos:column="18"/></return> <comment type="line" pos:line="26" pos:column="19">// this place cannot be reached</comment>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
