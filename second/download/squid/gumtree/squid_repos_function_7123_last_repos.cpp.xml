<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7123_last_repos.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">Ipc<pos:position pos:line="1" pos:column="4"/></name><operator pos:line="1" pos:column="4">::<pos:position pos:line="1" pos:column="6"/></operator><name pos:line="1" pos:column="6">StoreMap<pos:position pos:line="1" pos:column="14"/></name><operator pos:line="1" pos:column="14">::<pos:position pos:line="1" pos:column="16"/></operator><name pos:line="1" pos:column="16">Anchor<pos:position pos:line="1" pos:column="22"/></name></name> <modifier pos:line="1" pos:column="23">*<pos:position pos:line="1" pos:column="24"/></modifier></type>
<name><name pos:line="2" pos:column="1">Ipc<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">StoreMap<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">openForWritingAt<pos:position pos:line="2" pos:column="32"/></name></name><parameter_list pos:line="2" pos:column="32">(<parameter><decl><type><specifier pos:line="2" pos:column="33">const<pos:position pos:line="2" pos:column="38"/></specifier> <name pos:line="2" pos:column="39">sfileno<pos:position pos:line="2" pos:column="46"/></name></type> <name pos:line="2" pos:column="47">fileno<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="55">bool<pos:position pos:line="2" pos:column="59"/></name></type> <name pos:line="2" pos:column="60">overwriteExisting<pos:position pos:line="2" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="78"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">Anchor<pos:position pos:line="4" pos:column="11"/></name> <modifier pos:line="4" pos:column="12">&amp;<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="13">s<pos:position pos:line="4" pos:column="14"/></name> <init pos:line="4" pos:column="15">= <expr><call><name pos:line="4" pos:column="17">anchorAt<pos:position pos:line="4" pos:column="25"/></name><argument_list pos:line="4" pos:column="25">(<argument><expr><name pos:line="4" pos:column="26">fileno<pos:position pos:line="4" pos:column="32"/></name></expr></argument>)<pos:position pos:line="4" pos:column="33"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">ReadWriteLock<pos:position pos:line="5" pos:column="18"/></name> <modifier pos:line="5" pos:column="19">&amp;<pos:position pos:line="5" pos:column="24"/></modifier></type><name pos:line="5" pos:column="20">lock<pos:position pos:line="5" pos:column="24"/></name> <init pos:line="5" pos:column="25">= <expr><name><name pos:line="5" pos:column="27">s<pos:position pos:line="5" pos:column="28"/></name><operator pos:line="5" pos:column="28">.<pos:position pos:line="5" pos:column="29"/></operator><name pos:line="5" pos:column="29">lock<pos:position pos:line="5" pos:column="33"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="34"/></decl_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><call><name><name pos:line="7" pos:column="9">lock<pos:position pos:line="7" pos:column="13"/></name><operator pos:line="7" pos:column="13">.<pos:position pos:line="7" pos:column="14"/></operator><name pos:line="7" pos:column="14">lockExclusive<pos:position pos:line="7" pos:column="27"/></name></name><argument_list pos:line="7" pos:column="27">()<pos:position pos:line="7" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="30"/></condition><then pos:line="7" pos:column="30"> <block pos:line="7" pos:column="31">{
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">assert<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><call><name><name pos:line="8" pos:column="16">s<pos:position pos:line="8" pos:column="17"/></name><operator pos:line="8" pos:column="17">.<pos:position pos:line="8" pos:column="18"/></operator><name pos:line="8" pos:column="18">writing<pos:position pos:line="8" pos:column="25"/></name></name><argument_list pos:line="8" pos:column="25">()<pos:position pos:line="8" pos:column="27"/></argument_list></call> <operator pos:line="8" pos:column="28">&amp;&amp;<pos:position pos:line="8" pos:column="38"/></operator> <operator pos:line="8" pos:column="31">!<pos:position pos:line="8" pos:column="32"/></operator><call><name><name pos:line="8" pos:column="32">s<pos:position pos:line="8" pos:column="33"/></name><operator pos:line="8" pos:column="33">.<pos:position pos:line="8" pos:column="34"/></operator><name pos:line="8" pos:column="34">reading<pos:position pos:line="8" pos:column="41"/></name></name><argument_list pos:line="8" pos:column="41">()<pos:position pos:line="8" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="45"/></expr_stmt>

        <comment type="line" pos:line="10" pos:column="9">// bail if we cannot empty this position</comment>
        <if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">!<pos:position pos:line="11" pos:column="14"/></operator><name><name pos:line="11" pos:column="14">s<pos:position pos:line="11" pos:column="15"/></name><operator pos:line="11" pos:column="15">.<pos:position pos:line="11" pos:column="16"/></operator><name pos:line="11" pos:column="16">waitingToBeFreed<pos:position pos:line="11" pos:column="32"/></name></name> <operator pos:line="11" pos:column="33">&amp;&amp;<pos:position pos:line="11" pos:column="43"/></operator> <operator pos:line="11" pos:column="36">!<pos:position pos:line="11" pos:column="37"/></operator><call><name><name pos:line="11" pos:column="37">s<pos:position pos:line="11" pos:column="38"/></name><operator pos:line="11" pos:column="38">.<pos:position pos:line="11" pos:column="39"/></operator><name pos:line="11" pos:column="39">empty<pos:position pos:line="11" pos:column="44"/></name></name><argument_list pos:line="11" pos:column="44">()<pos:position pos:line="11" pos:column="46"/></argument_list></call> <operator pos:line="11" pos:column="47">&amp;&amp;<pos:position pos:line="11" pos:column="57"/></operator> <operator pos:line="11" pos:column="50">!<pos:position pos:line="11" pos:column="51"/></operator><name pos:line="11" pos:column="51">overwriteExisting<pos:position pos:line="11" pos:column="68"/></name></expr>)<pos:position pos:line="11" pos:column="69"/></condition><then pos:line="11" pos:column="69"> <block pos:line="11" pos:column="70">{
            <expr_stmt><expr><call><name><name pos:line="12" pos:column="13">lock<pos:position pos:line="12" pos:column="17"/></name><operator pos:line="12" pos:column="17">.<pos:position pos:line="12" pos:column="18"/></operator><name pos:line="12" pos:column="18">unlockExclusive<pos:position pos:line="12" pos:column="33"/></name></name><argument_list pos:line="12" pos:column="33">()<pos:position pos:line="12" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="36"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="13" pos:column="13">debugs<pos:position pos:line="13" pos:column="19"/></name><argument_list pos:line="13" pos:column="19">(<argument><expr><literal type="number" pos:line="13" pos:column="20">54<pos:position pos:line="13" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="24">5<pos:position pos:line="13" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="27">"cannot open existing entry "<pos:position pos:line="13" pos:column="56"/></literal> <operator pos:line="13" pos:column="57">&lt;&lt;<pos:position pos:line="13" pos:column="65"/></operator> <name pos:line="13" pos:column="60">fileno<pos:position pos:line="13" pos:column="66"/></name> <operator pos:line="13" pos:column="67">&lt;&lt;<pos:position pos:line="13" pos:column="75"/></operator>
                   <literal type="string" pos:line="14" pos:column="20">" for writing "<pos:position pos:line="14" pos:column="35"/></literal> <operator pos:line="14" pos:column="36">&lt;&lt;<pos:position pos:line="14" pos:column="44"/></operator> <name pos:line="14" pos:column="39">path<pos:position pos:line="14" pos:column="43"/></name></expr></argument>)<pos:position pos:line="14" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="45"/></expr_stmt>
            <return pos:line="15" pos:column="13">return <expr><name pos:line="15" pos:column="20">NULL<pos:position pos:line="15" pos:column="24"/></name></expr>;<pos:position pos:line="15" pos:column="25"/></return>
        }<pos:position pos:line="16" pos:column="10"/></block></then></if>

        <comment type="line" pos:line="18" pos:column="9">// free if the entry was used, keeping the entry locked</comment>
        <if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name><name pos:line="19" pos:column="13">s<pos:position pos:line="19" pos:column="14"/></name><operator pos:line="19" pos:column="14">.<pos:position pos:line="19" pos:column="15"/></operator><name pos:line="19" pos:column="15">waitingToBeFreed<pos:position pos:line="19" pos:column="31"/></name></name> <operator pos:line="19" pos:column="32">||<pos:position pos:line="19" pos:column="34"/></operator> <operator pos:line="19" pos:column="35">!<pos:position pos:line="19" pos:column="36"/></operator><call><name><name pos:line="19" pos:column="36">s<pos:position pos:line="19" pos:column="37"/></name><operator pos:line="19" pos:column="37">.<pos:position pos:line="19" pos:column="38"/></operator><name pos:line="19" pos:column="38">empty<pos:position pos:line="19" pos:column="43"/></name></name><argument_list pos:line="19" pos:column="43">()<pos:position pos:line="19" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="46"/></condition><then pos:line="19" pos:column="46">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="13">freeChain<pos:position pos:line="20" pos:column="22"/></name><argument_list pos:line="20" pos:column="22">(<argument><expr><name pos:line="20" pos:column="23">fileno<pos:position pos:line="20" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="31">s<pos:position pos:line="20" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="20" pos:column="34">true<pos:position pos:line="20" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="40"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name pos:line="22" pos:column="9">assert<pos:position pos:line="22" pos:column="15"/></name><argument_list pos:line="22" pos:column="15">(<argument><expr><call><name><name pos:line="22" pos:column="16">s<pos:position pos:line="22" pos:column="17"/></name><operator pos:line="22" pos:column="17">.<pos:position pos:line="22" pos:column="18"/></operator><name pos:line="22" pos:column="18">empty<pos:position pos:line="22" pos:column="23"/></name></name><argument_list pos:line="22" pos:column="23">()<pos:position pos:line="22" pos:column="25"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="23" pos:column="9">s<pos:position pos:line="23" pos:column="10"/></name><operator pos:line="23" pos:column="10">.<pos:position pos:line="23" pos:column="11"/></operator><name pos:line="23" pos:column="11">start<pos:position pos:line="23" pos:column="16"/></name></name> <operator pos:line="23" pos:column="17">=<pos:position pos:line="23" pos:column="18"/></operator> <operator pos:line="23" pos:column="19">-<pos:position pos:line="23" pos:column="20"/></operator><literal type="number" pos:line="23" pos:column="20">1<pos:position pos:line="23" pos:column="21"/></literal></expr>;<pos:position pos:line="23" pos:column="22"/></expr_stmt> <comment type="line" pos:line="23" pos:column="23">// we have not allocated any slices yet</comment>
        <expr_stmt><expr><name><name pos:line="24" pos:column="9">s<pos:position pos:line="24" pos:column="10"/></name><operator pos:line="24" pos:column="10">.<pos:position pos:line="24" pos:column="11"/></operator><name pos:line="24" pos:column="11">splicingPoint<pos:position pos:line="24" pos:column="24"/></name></name> <operator pos:line="24" pos:column="25">=<pos:position pos:line="24" pos:column="26"/></operator> <operator pos:line="24" pos:column="27">-<pos:position pos:line="24" pos:column="28"/></operator><literal type="number" pos:line="24" pos:column="28">1<pos:position pos:line="24" pos:column="29"/></literal></expr>;<pos:position pos:line="24" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="25" pos:column="9">++<pos:position pos:line="25" pos:column="11"/></operator><name><name pos:line="25" pos:column="11">anchors<pos:position pos:line="25" pos:column="18"/></name><operator pos:line="25" pos:column="18">-&gt;<pos:position pos:line="25" pos:column="23"/></operator><name pos:line="25" pos:column="20">count<pos:position pos:line="25" pos:column="25"/></name></name></expr>;<pos:position pos:line="25" pos:column="26"/></expr_stmt>

        <comment type="line" pos:line="27" pos:column="9">//s.setKey(key); // XXX: the caller should do that</comment>
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">debugs<pos:position pos:line="28" pos:column="15"/></name><argument_list pos:line="28" pos:column="15">(<argument><expr><literal type="number" pos:line="28" pos:column="16">54<pos:position pos:line="28" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="20">5<pos:position pos:line="28" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="23">"opened entry "<pos:position pos:line="28" pos:column="38"/></literal> <operator pos:line="28" pos:column="39">&lt;&lt;<pos:position pos:line="28" pos:column="47"/></operator> <name pos:line="28" pos:column="42">fileno<pos:position pos:line="28" pos:column="48"/></name> <operator pos:line="28" pos:column="49">&lt;&lt;<pos:position pos:line="28" pos:column="57"/></operator> <literal type="string" pos:line="28" pos:column="52">" for writing "<pos:position pos:line="28" pos:column="67"/></literal> <operator pos:line="28" pos:column="68">&lt;&lt;<pos:position pos:line="28" pos:column="76"/></operator> <name pos:line="28" pos:column="71">path<pos:position pos:line="28" pos:column="75"/></name></expr></argument>)<pos:position pos:line="28" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="77"/></expr_stmt>
        <return pos:line="29" pos:column="9">return <expr><operator pos:line="29" pos:column="16">&amp;<pos:position pos:line="29" pos:column="21"/></operator><name pos:line="29" pos:column="17">s<pos:position pos:line="29" pos:column="18"/></name></expr>;<pos:position pos:line="29" pos:column="19"/></return> <comment type="line" pos:line="29" pos:column="20">// and keep the entry locked</comment>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="32" pos:column="5">debugs<pos:position pos:line="32" pos:column="11"/></name><argument_list pos:line="32" pos:column="11">(<argument><expr><literal type="number" pos:line="32" pos:column="12">54<pos:position pos:line="32" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="16">5<pos:position pos:line="32" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="19">"cannot open busy entry "<pos:position pos:line="32" pos:column="44"/></literal> <operator pos:line="32" pos:column="45">&lt;&lt;<pos:position pos:line="32" pos:column="53"/></operator> <name pos:line="32" pos:column="48">fileno<pos:position pos:line="32" pos:column="54"/></name> <operator pos:line="32" pos:column="55">&lt;&lt;<pos:position pos:line="32" pos:column="63"/></operator>
           <literal type="string" pos:line="33" pos:column="12">" for writing "<pos:position pos:line="33" pos:column="27"/></literal> <operator pos:line="33" pos:column="28">&lt;&lt;<pos:position pos:line="33" pos:column="36"/></operator> <name pos:line="33" pos:column="31">path<pos:position pos:line="33" pos:column="35"/></name></expr></argument>)<pos:position pos:line="33" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="37"/></expr_stmt>
    <return pos:line="34" pos:column="5">return <expr><name pos:line="34" pos:column="12">NULL<pos:position pos:line="34" pos:column="16"/></name></expr>;<pos:position pos:line="34" pos:column="17"/></return>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
