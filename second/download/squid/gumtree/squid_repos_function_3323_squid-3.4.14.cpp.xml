<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3323_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">IdleConnList<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">Read<pos:position pos:line="2" pos:column="19"/></name></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><specifier pos:line="2" pos:column="20">const<pos:position pos:line="2" pos:column="25"/></specifier> <name><name pos:line="2" pos:column="26">Comm<pos:position pos:line="2" pos:column="30"/></name><operator pos:line="2" pos:column="30">::<pos:position pos:line="2" pos:column="32"/></operator><name pos:line="2" pos:column="32">ConnectionPointer<pos:position pos:line="2" pos:column="49"/></name></name> <modifier pos:line="2" pos:column="50">&amp;<pos:position pos:line="2" pos:column="55"/></modifier></type><name pos:line="2" pos:column="51">conn<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="57">char<pos:position pos:line="2" pos:column="61"/></name> <modifier pos:line="2" pos:column="62">*<pos:position pos:line="2" pos:column="63"/></modifier></type><name pos:line="2" pos:column="63">buf<pos:position pos:line="2" pos:column="66"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="68">size_t<pos:position pos:line="2" pos:column="74"/></name></type> <name pos:line="2" pos:column="75">len<pos:position pos:line="2" pos:column="78"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="80">comm_err_t<pos:position pos:line="2" pos:column="90"/></name></type> <name pos:line="2" pos:column="91">flag<pos:position pos:line="2" pos:column="95"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="97">int<pos:position pos:line="2" pos:column="100"/></name></type> <name pos:line="2" pos:column="101">xerrno<pos:position pos:line="2" pos:column="107"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="109">void<pos:position pos:line="2" pos:column="113"/></name> <modifier pos:line="2" pos:column="114">*<pos:position pos:line="2" pos:column="115"/></modifier></type><name pos:line="2" pos:column="115">data<pos:position pos:line="2" pos:column="119"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="120"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">48<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">3<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="19">HERE<pos:position pos:line="4" pos:column="23"/></name> <operator pos:line="4" pos:column="24">&lt;&lt;<pos:position pos:line="4" pos:column="32"/></operator> <name pos:line="4" pos:column="27">len<pos:position pos:line="4" pos:column="30"/></name> <operator pos:line="4" pos:column="31">&lt;&lt;<pos:position pos:line="4" pos:column="39"/></operator> <literal type="string" pos:line="4" pos:column="34">" bytes from "<pos:position pos:line="4" pos:column="48"/></literal> <operator pos:line="4" pos:column="49">&lt;&lt;<pos:position pos:line="4" pos:column="57"/></operator> <name pos:line="4" pos:column="52">conn<pos:position pos:line="4" pos:column="56"/></name></expr></argument>)<pos:position pos:line="4" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="58"/></expr_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">flag<pos:position pos:line="6" pos:column="13"/></name> <operator pos:line="6" pos:column="14">==<pos:position pos:line="6" pos:column="16"/></operator> <name pos:line="6" pos:column="17">COMM_ERR_CLOSING<pos:position pos:line="6" pos:column="33"/></name></expr>)<pos:position pos:line="6" pos:column="34"/></condition><then pos:line="6" pos:column="34"> <block pos:line="6" pos:column="35">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">debugs<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><literal type="number" pos:line="7" pos:column="16">48<pos:position pos:line="7" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="20">3<pos:position pos:line="7" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="23">HERE<pos:position pos:line="7" pos:column="27"/></name> <operator pos:line="7" pos:column="28">&lt;&lt;<pos:position pos:line="7" pos:column="36"/></operator> <literal type="string" pos:line="7" pos:column="31">"COMM_ERR_CLOSING from "<pos:position pos:line="7" pos:column="55"/></literal> <operator pos:line="7" pos:column="56">&lt;&lt;<pos:position pos:line="7" pos:column="64"/></operator> <name pos:line="7" pos:column="59">conn<pos:position pos:line="7" pos:column="63"/></name></expr></argument>)<pos:position pos:line="7" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="65"/></expr_stmt>
        <comment type="block" pos:line="8" pos:column="9">/* Bail out on COMM_ERR_CLOSING - may happen when shutdown aborts our idle FD */</comment>
        <return pos:line="9" pos:column="9">return;<pos:position pos:line="9" pos:column="16"/></return>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="12" pos:column="5">IdleConnList<pos:position pos:line="12" pos:column="17"/></name> <modifier pos:line="12" pos:column="18">*<pos:position pos:line="12" pos:column="19"/></modifier></type><name pos:line="12" pos:column="19">list<pos:position pos:line="12" pos:column="23"/></name> <init pos:line="12" pos:column="24">= <expr><operator pos:line="12" pos:column="26">(<pos:position pos:line="12" pos:column="27"/></operator><name pos:line="12" pos:column="27">IdleConnList<pos:position pos:line="12" pos:column="39"/></name> <operator pos:line="12" pos:column="40">*<pos:position pos:line="12" pos:column="41"/></operator><operator pos:line="12" pos:column="41">)<pos:position pos:line="12" pos:column="42"/></operator> <name pos:line="12" pos:column="43">data<pos:position pos:line="12" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="48"/></decl_stmt>
    <comment type="block" pos:line="13" pos:column="5">/* may delete list/data */</comment>
    <expr_stmt><expr><call><name><name pos:line="14" pos:column="5">list<pos:position pos:line="14" pos:column="9"/></name><operator pos:line="14" pos:column="9">-&gt;<pos:position pos:line="14" pos:column="14"/></operator><name pos:line="14" pos:column="11">findAndClose<pos:position pos:line="14" pos:column="23"/></name></name><argument_list pos:line="14" pos:column="23">(<argument><expr><name pos:line="14" pos:column="24">conn<pos:position pos:line="14" pos:column="28"/></name></expr></argument>)<pos:position pos:line="14" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="30"/></expr_stmt>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
