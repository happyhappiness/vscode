<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5900_squid-3.5.27.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">Auth<pos:position pos:line="1" pos:column="5"/></name><operator pos:line="1" pos:column="5">::<pos:position pos:line="1" pos:column="7"/></operator><name pos:line="1" pos:column="7">UserRequest<pos:position pos:line="1" pos:column="18"/></name><operator pos:line="1" pos:column="18">::<pos:position pos:line="1" pos:column="20"/></operator><name pos:line="1" pos:column="20">Pointer<pos:position pos:line="1" pos:column="27"/></name></name></type>
<name><name pos:line="2" pos:column="1">Auth<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">Digest<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">Config<pos:position pos:line="2" pos:column="21"/></name><operator pos:line="2" pos:column="21">::<pos:position pos:line="2" pos:column="23"/></operator><name pos:line="2" pos:column="23">decode<pos:position pos:line="2" pos:column="29"/></name></name><parameter_list pos:line="2" pos:column="29">(<parameter><decl><type><name pos:line="2" pos:column="30">char<pos:position pos:line="2" pos:column="34"/></name> <specifier pos:line="2" pos:column="35">const<pos:position pos:line="2" pos:column="40"/></specifier> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">proxy_auth<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="54">const<pos:position pos:line="2" pos:column="59"/></specifier> <name pos:line="2" pos:column="60">char<pos:position pos:line="2" pos:column="64"/></name> <modifier pos:line="2" pos:column="65">*<pos:position pos:line="2" pos:column="66"/></modifier></type><name pos:line="2" pos:column="66">aRequestRealm<pos:position pos:line="2" pos:column="79"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="80"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">item<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">char<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">p<pos:position pos:line="5" pos:column="18"/></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">char<pos:position pos:line="6" pos:column="15"/></name> <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type><name pos:line="6" pos:column="17">pos<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><name pos:line="6" pos:column="23">NULL<pos:position pos:line="6" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name> <modifier pos:line="7" pos:column="10">*<pos:position pos:line="7" pos:column="11"/></modifier></type><name pos:line="7" pos:column="11">username<pos:position pos:line="7" pos:column="19"/></name> <init pos:line="7" pos:column="20">= <expr><name pos:line="7" pos:column="22">NULL<pos:position pos:line="7" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">digest_nonce_h<pos:position pos:line="8" pos:column="19"/></name> <modifier pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></modifier></type><name pos:line="8" pos:column="21">nonce<pos:position pos:line="8" pos:column="26"/></name></decl>;<pos:position pos:line="8" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">ilen<pos:position pos:line="9" pos:column="13"/></name></decl>;<pos:position pos:line="9" pos:column="14"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="11" pos:column="5">debugs<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><literal type="number" pos:line="11" pos:column="12">29<pos:position pos:line="11" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="16">9<pos:position pos:line="11" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="19">"beginning"<pos:position pos:line="11" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="32"/></expr_stmt>

    <decl_stmt><decl><type><name><name pos:line="13" pos:column="5">Auth<pos:position pos:line="13" pos:column="9"/></name><operator pos:line="13" pos:column="9">::<pos:position pos:line="13" pos:column="11"/></operator><name pos:line="13" pos:column="11">Digest<pos:position pos:line="13" pos:column="17"/></name><operator pos:line="13" pos:column="17">::<pos:position pos:line="13" pos:column="19"/></operator><name pos:line="13" pos:column="19">UserRequest<pos:position pos:line="13" pos:column="30"/></name></name> <modifier pos:line="13" pos:column="31">*<pos:position pos:line="13" pos:column="32"/></modifier></type><name pos:line="13" pos:column="32">digest_request<pos:position pos:line="13" pos:column="46"/></name> <init pos:line="13" pos:column="47">= <expr><operator pos:line="13" pos:column="49">new<pos:position pos:line="13" pos:column="52"/></operator> <call><name><name pos:line="13" pos:column="53">Auth<pos:position pos:line="13" pos:column="57"/></name><operator pos:line="13" pos:column="57">::<pos:position pos:line="13" pos:column="59"/></operator><name pos:line="13" pos:column="59">Digest<pos:position pos:line="13" pos:column="65"/></name><operator pos:line="13" pos:column="65">::<pos:position pos:line="13" pos:column="67"/></operator><name pos:line="13" pos:column="67">UserRequest<pos:position pos:line="13" pos:column="78"/></name></name><argument_list pos:line="13" pos:column="78">()<pos:position pos:line="13" pos:column="80"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="81"/></decl_stmt>

    <comment type="block" pos:line="15" pos:column="5">/* trim DIGEST from string */</comment>

    <while pos:line="17" pos:column="5">while <condition pos:line="17" pos:column="11">(<expr><call><name pos:line="17" pos:column="12">xisgraph<pos:position pos:line="17" pos:column="20"/></name><argument_list pos:line="17" pos:column="20">(<argument><expr><operator pos:line="17" pos:column="21">*<pos:position pos:line="17" pos:column="22"/></operator><name pos:line="17" pos:column="22">proxy_auth<pos:position pos:line="17" pos:column="32"/></name></expr></argument>)<pos:position pos:line="17" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="34"/></condition>
        <block type="pseudo"><expr_stmt><expr><operator pos:line="18" pos:column="9">++<pos:position pos:line="18" pos:column="11"/></operator><name pos:line="18" pos:column="11">proxy_auth<pos:position pos:line="18" pos:column="21"/></name></expr>;<pos:position pos:line="18" pos:column="22"/></expr_stmt></block></while>

    <comment type="block" pos:line="20" pos:column="5">/* Trim leading whitespace before decoding */</comment>
    <while pos:line="21" pos:column="5">while <condition pos:line="21" pos:column="11">(<expr><call><name pos:line="21" pos:column="12">xisspace<pos:position pos:line="21" pos:column="20"/></name><argument_list pos:line="21" pos:column="20">(<argument><expr><operator pos:line="21" pos:column="21">*<pos:position pos:line="21" pos:column="22"/></operator><name pos:line="21" pos:column="22">proxy_auth<pos:position pos:line="21" pos:column="32"/></name></expr></argument>)<pos:position pos:line="21" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="34"/></condition>
        <block type="pseudo"><expr_stmt><expr><operator pos:line="22" pos:column="9">++<pos:position pos:line="22" pos:column="11"/></operator><name pos:line="22" pos:column="11">proxy_auth<pos:position pos:line="22" pos:column="21"/></name></expr>;<pos:position pos:line="22" pos:column="22"/></expr_stmt></block></while>

    <decl_stmt><decl><type><name pos:line="24" pos:column="5">String<pos:position pos:line="24" pos:column="11"/></name></type> <name pos:line="24" pos:column="12">temp<pos:position pos:line="24" pos:column="16"/></name><argument_list pos:line="24" pos:column="16">(<argument><expr><name pos:line="24" pos:column="17">proxy_auth<pos:position pos:line="24" pos:column="27"/></name></expr></argument>)<pos:position pos:line="24" pos:column="28"/></argument_list></decl>;<pos:position pos:line="24" pos:column="29"/></decl_stmt>

    <while pos:line="26" pos:column="5">while <condition pos:line="26" pos:column="11">(<expr><call><name pos:line="26" pos:column="12">strListGetItem<pos:position pos:line="26" pos:column="26"/></name><argument_list pos:line="26" pos:column="26">(<argument><expr><operator pos:line="26" pos:column="27">&amp;<pos:position pos:line="26" pos:column="32"/></operator><name pos:line="26" pos:column="28">temp<pos:position pos:line="26" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="26" pos:column="34">','<pos:position pos:line="26" pos:column="37"/></literal></expr></argument>, <argument><expr><operator pos:line="26" pos:column="39">&amp;<pos:position pos:line="26" pos:column="44"/></operator><name pos:line="26" pos:column="40">item<pos:position pos:line="26" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="46">&amp;<pos:position pos:line="26" pos:column="51"/></operator><name pos:line="26" pos:column="47">ilen<pos:position pos:line="26" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="53">&amp;<pos:position pos:line="26" pos:column="58"/></operator><name pos:line="26" pos:column="54">pos<pos:position pos:line="26" pos:column="57"/></name></expr></argument>)<pos:position pos:line="26" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="59"/></condition> <block pos:line="26" pos:column="60">{
        <comment type="block" pos:line="27" pos:column="9">/* isolate directive name &amp; value */</comment>
        <decl_stmt><decl><type><name pos:line="28" pos:column="9">size_t<pos:position pos:line="28" pos:column="15"/></name></type> <name pos:line="28" pos:column="16">nlen<pos:position pos:line="28" pos:column="20"/></name></decl>;<pos:position pos:line="28" pos:column="21"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="29" pos:column="9">size_t<pos:position pos:line="29" pos:column="15"/></name></type> <name pos:line="29" pos:column="16">vlen<pos:position pos:line="29" pos:column="20"/></name></decl>;<pos:position pos:line="29" pos:column="21"/></decl_stmt>
        <if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><operator pos:line="30" pos:column="13">(<pos:position pos:line="30" pos:column="14"/></operator><name pos:line="30" pos:column="14">p<pos:position pos:line="30" pos:column="15"/></name> <operator pos:line="30" pos:column="16">=<pos:position pos:line="30" pos:column="17"/></operator> <operator pos:line="30" pos:column="18">(<pos:position pos:line="30" pos:column="19"/></operator><specifier pos:line="30" pos:column="19">const<pos:position pos:line="30" pos:column="24"/></specifier> <name pos:line="30" pos:column="25">char<pos:position pos:line="30" pos:column="29"/></name> <operator pos:line="30" pos:column="30">*<pos:position pos:line="30" pos:column="31"/></operator><operator pos:line="30" pos:column="31">)<pos:position pos:line="30" pos:column="32"/></operator><call><name pos:line="30" pos:column="32">memchr<pos:position pos:line="30" pos:column="38"/></name><argument_list pos:line="30" pos:column="38">(<argument><expr><name pos:line="30" pos:column="39">item<pos:position pos:line="30" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="30" pos:column="45">'='<pos:position pos:line="30" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="50">ilen<pos:position pos:line="30" pos:column="54"/></name></expr></argument>)<pos:position pos:line="30" pos:column="55"/></argument_list></call><operator pos:line="30" pos:column="55">)<pos:position pos:line="30" pos:column="56"/></operator> <operator pos:line="30" pos:column="57">&amp;&amp;<pos:position pos:line="30" pos:column="67"/></operator> <operator pos:line="30" pos:column="60">(<pos:position pos:line="30" pos:column="61"/></operator><name pos:line="30" pos:column="61">p<pos:position pos:line="30" pos:column="62"/></name> <operator pos:line="30" pos:column="63">-<pos:position pos:line="30" pos:column="64"/></operator> <name pos:line="30" pos:column="65">item<pos:position pos:line="30" pos:column="69"/></name> <operator pos:line="30" pos:column="70">&lt;<pos:position pos:line="30" pos:column="74"/></operator> <name pos:line="30" pos:column="72">ilen<pos:position pos:line="30" pos:column="76"/></name><operator pos:line="30" pos:column="76">)<pos:position pos:line="30" pos:column="77"/></operator></expr>)<pos:position pos:line="30" pos:column="78"/></condition><then pos:line="30" pos:column="78"> <block pos:line="30" pos:column="79">{
            <expr_stmt><expr><name pos:line="31" pos:column="13">nlen<pos:position pos:line="31" pos:column="17"/></name> <operator pos:line="31" pos:column="18">=<pos:position pos:line="31" pos:column="19"/></operator> <name pos:line="31" pos:column="20">p<pos:position pos:line="31" pos:column="21"/></name> <operator pos:line="31" pos:column="22">-<pos:position pos:line="31" pos:column="23"/></operator> <name pos:line="31" pos:column="24">item<pos:position pos:line="31" pos:column="28"/></name></expr>;<pos:position pos:line="31" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="32" pos:column="13">++<pos:position pos:line="32" pos:column="15"/></operator><name pos:line="32" pos:column="15">p<pos:position pos:line="32" pos:column="16"/></name></expr>;<pos:position pos:line="32" pos:column="17"/></expr_stmt>
            <expr_stmt><expr><name pos:line="33" pos:column="13">vlen<pos:position pos:line="33" pos:column="17"/></name> <operator pos:line="33" pos:column="18">=<pos:position pos:line="33" pos:column="19"/></operator> <name pos:line="33" pos:column="20">ilen<pos:position pos:line="33" pos:column="24"/></name> <operator pos:line="33" pos:column="25">-<pos:position pos:line="33" pos:column="26"/></operator> <operator pos:line="33" pos:column="27">(<pos:position pos:line="33" pos:column="28"/></operator><name pos:line="33" pos:column="28">p<pos:position pos:line="33" pos:column="29"/></name> <operator pos:line="33" pos:column="30">-<pos:position pos:line="33" pos:column="31"/></operator> <name pos:line="33" pos:column="32">item<pos:position pos:line="33" pos:column="36"/></name><operator pos:line="33" pos:column="36">)<pos:position pos:line="33" pos:column="37"/></operator></expr>;<pos:position pos:line="33" pos:column="38"/></expr_stmt>
        }<pos:position pos:line="34" pos:column="10"/></block></then> <else pos:line="34" pos:column="11">else <block pos:line="34" pos:column="16">{
            <expr_stmt><expr><name pos:line="35" pos:column="13">nlen<pos:position pos:line="35" pos:column="17"/></name> <operator pos:line="35" pos:column="18">=<pos:position pos:line="35" pos:column="19"/></operator> <name pos:line="35" pos:column="20">ilen<pos:position pos:line="35" pos:column="24"/></name></expr>;<pos:position pos:line="35" pos:column="25"/></expr_stmt>
            <expr_stmt><expr><name pos:line="36" pos:column="13">vlen<pos:position pos:line="36" pos:column="17"/></name> <operator pos:line="36" pos:column="18">=<pos:position pos:line="36" pos:column="19"/></operator> <literal type="number" pos:line="36" pos:column="20">0<pos:position pos:line="36" pos:column="21"/></literal></expr>;<pos:position pos:line="36" pos:column="22"/></expr_stmt>
        }<pos:position pos:line="37" pos:column="10"/></block></else></if>

        <decl_stmt><decl><type><name pos:line="39" pos:column="9">SBuf<pos:position pos:line="39" pos:column="13"/></name></type> <name pos:line="39" pos:column="14">keyName<pos:position pos:line="39" pos:column="21"/></name><argument_list pos:line="39" pos:column="21">(<argument><expr><name pos:line="39" pos:column="22">item<pos:position pos:line="39" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="28">nlen<pos:position pos:line="39" pos:column="32"/></name></expr></argument>)<pos:position pos:line="39" pos:column="33"/></argument_list></decl>;<pos:position pos:line="39" pos:column="34"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="40" pos:column="9">String<pos:position pos:line="40" pos:column="15"/></name></type> <name pos:line="40" pos:column="16">value<pos:position pos:line="40" pos:column="21"/></name></decl>;<pos:position pos:line="40" pos:column="22"/></decl_stmt>

        <if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name pos:line="42" pos:column="13">vlen<pos:position pos:line="42" pos:column="17"/></name> <operator pos:line="42" pos:column="18">&gt;<pos:position pos:line="42" pos:column="22"/></operator> <literal type="number" pos:line="42" pos:column="20">0<pos:position pos:line="42" pos:column="21"/></literal></expr>)<pos:position pos:line="42" pos:column="22"/></condition><then pos:line="42" pos:column="22"> <block pos:line="42" pos:column="23">{
            <comment type="line" pos:line="43" pos:column="13">// see RFC 2617 section 3.2.1 and 3.2.2 for details on the BNF</comment>

            <if pos:line="45" pos:column="13">if <condition pos:line="45" pos:column="16">(<expr><name pos:line="45" pos:column="17">keyName<pos:position pos:line="45" pos:column="24"/></name> <operator pos:line="45" pos:column="25">==<pos:position pos:line="45" pos:column="27"/></operator> <call><name pos:line="45" pos:column="28">SBuf<pos:position pos:line="45" pos:column="32"/></name><argument_list pos:line="45" pos:column="32">(<argument><expr><literal type="string" pos:line="45" pos:column="33">"domain"<pos:position pos:line="45" pos:column="41"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="45" pos:column="42">6<pos:position pos:line="45" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="44"/></argument_list></call> <operator pos:line="45" pos:column="45">||<pos:position pos:line="45" pos:column="47"/></operator> <name pos:line="45" pos:column="48">keyName<pos:position pos:line="45" pos:column="55"/></name> <operator pos:line="45" pos:column="56">==<pos:position pos:line="45" pos:column="58"/></operator> <call><name pos:line="45" pos:column="59">SBuf<pos:position pos:line="45" pos:column="63"/></name><argument_list pos:line="45" pos:column="63">(<argument><expr><literal type="string" pos:line="45" pos:column="64">"uri"<pos:position pos:line="45" pos:column="69"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="45" pos:column="70">3<pos:position pos:line="45" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="72"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="73"/></condition><then pos:line="45" pos:column="73"> <block pos:line="45" pos:column="74">{
                <comment type="line" pos:line="46" pos:column="17">// domain is Special. Not a quoted-string, must not be de-quoted. But is wrapped in '"'</comment>
                <comment type="line" pos:line="47" pos:column="17">// BUG 3077: uri= can also be sent to us in a mangled (invalid!) form like domain</comment>
                <if pos:line="48" pos:column="17">if <condition pos:line="48" pos:column="20">(<expr><operator pos:line="48" pos:column="21">*<pos:position pos:line="48" pos:column="22"/></operator><name pos:line="48" pos:column="22">p<pos:position pos:line="48" pos:column="23"/></name> <operator pos:line="48" pos:column="24">==<pos:position pos:line="48" pos:column="26"/></operator> <literal type="char" pos:line="48" pos:column="27">'"'<pos:position pos:line="48" pos:column="30"/></literal> <operator pos:line="48" pos:column="31">&amp;&amp;<pos:position pos:line="48" pos:column="41"/></operator> <operator pos:line="48" pos:column="34">*<pos:position pos:line="48" pos:column="35"/></operator><operator pos:line="48" pos:column="35">(<pos:position pos:line="48" pos:column="36"/></operator><name pos:line="48" pos:column="36">p<pos:position pos:line="48" pos:column="37"/></name> <operator pos:line="48" pos:column="38">+<pos:position pos:line="48" pos:column="39"/></operator> <name pos:line="48" pos:column="40">vlen<pos:position pos:line="48" pos:column="44"/></name> <operator pos:line="48" pos:column="45">-<pos:position pos:line="48" pos:column="46"/></operator><literal type="number" pos:line="48" pos:column="46">1<pos:position pos:line="48" pos:column="47"/></literal><operator pos:line="48" pos:column="47">)<pos:position pos:line="48" pos:column="48"/></operator> <operator pos:line="48" pos:column="49">==<pos:position pos:line="48" pos:column="51"/></operator> <literal type="char" pos:line="48" pos:column="52">'"'<pos:position pos:line="48" pos:column="55"/></literal></expr>)<pos:position pos:line="48" pos:column="56"/></condition><then pos:line="48" pos:column="56"> <block pos:line="48" pos:column="57">{
                    <expr_stmt><expr><call><name><name pos:line="49" pos:column="21">value<pos:position pos:line="49" pos:column="26"/></name><operator pos:line="49" pos:column="26">.<pos:position pos:line="49" pos:column="27"/></operator><name pos:line="49" pos:column="27">limitInit<pos:position pos:line="49" pos:column="36"/></name></name><argument_list pos:line="49" pos:column="36">(<argument><expr><name pos:line="49" pos:column="37">p<pos:position pos:line="49" pos:column="38"/></name><operator pos:line="49" pos:column="38">+<pos:position pos:line="49" pos:column="39"/></operator><literal type="number" pos:line="49" pos:column="39">1<pos:position pos:line="49" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="42">vlen<pos:position pos:line="49" pos:column="46"/></name><operator pos:line="49" pos:column="46">-<pos:position pos:line="49" pos:column="47"/></operator><literal type="number" pos:line="49" pos:column="47">2<pos:position pos:line="49" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="50"/></expr_stmt>
                }<pos:position pos:line="50" pos:column="18"/></block></then></if>
            }<pos:position pos:line="51" pos:column="14"/></block></then> <elseif pos:line="51" pos:column="15">else <if pos:line="51" pos:column="20">if <condition pos:line="51" pos:column="23">(<expr><name pos:line="51" pos:column="24">keyName<pos:position pos:line="51" pos:column="31"/></name> <operator pos:line="51" pos:column="32">==<pos:position pos:line="51" pos:column="34"/></operator> <call><name pos:line="51" pos:column="35">SBuf<pos:position pos:line="51" pos:column="39"/></name><argument_list pos:line="51" pos:column="39">(<argument><expr><literal type="string" pos:line="51" pos:column="40">"qop"<pos:position pos:line="51" pos:column="45"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="51" pos:column="46">3<pos:position pos:line="51" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="49"/></condition><then pos:line="51" pos:column="49"> <block pos:line="51" pos:column="50">{
                <comment type="line" pos:line="52" pos:column="17">// qop is more special.</comment>
                <comment type="line" pos:line="53" pos:column="17">// On request this must not be quoted-string de-quoted. But is several values wrapped in '"'</comment>
                <comment type="line" pos:line="54" pos:column="17">// On response this is a single un-quoted token.</comment>
                <if pos:line="55" pos:column="17">if <condition pos:line="55" pos:column="20">(<expr><operator pos:line="55" pos:column="21">*<pos:position pos:line="55" pos:column="22"/></operator><name pos:line="55" pos:column="22">p<pos:position pos:line="55" pos:column="23"/></name> <operator pos:line="55" pos:column="24">==<pos:position pos:line="55" pos:column="26"/></operator> <literal type="char" pos:line="55" pos:column="27">'"'<pos:position pos:line="55" pos:column="30"/></literal> <operator pos:line="55" pos:column="31">&amp;&amp;<pos:position pos:line="55" pos:column="41"/></operator> <operator pos:line="55" pos:column="34">*<pos:position pos:line="55" pos:column="35"/></operator><operator pos:line="55" pos:column="35">(<pos:position pos:line="55" pos:column="36"/></operator><name pos:line="55" pos:column="36">p<pos:position pos:line="55" pos:column="37"/></name> <operator pos:line="55" pos:column="38">+<pos:position pos:line="55" pos:column="39"/></operator> <name pos:line="55" pos:column="40">vlen<pos:position pos:line="55" pos:column="44"/></name> <operator pos:line="55" pos:column="45">-<pos:position pos:line="55" pos:column="46"/></operator><literal type="number" pos:line="55" pos:column="46">1<pos:position pos:line="55" pos:column="47"/></literal><operator pos:line="55" pos:column="47">)<pos:position pos:line="55" pos:column="48"/></operator> <operator pos:line="55" pos:column="49">==<pos:position pos:line="55" pos:column="51"/></operator> <literal type="char" pos:line="55" pos:column="52">'"'<pos:position pos:line="55" pos:column="55"/></literal></expr>)<pos:position pos:line="55" pos:column="56"/></condition><then pos:line="55" pos:column="56"> <block pos:line="55" pos:column="57">{
                    <expr_stmt><expr><call><name><name pos:line="56" pos:column="21">value<pos:position pos:line="56" pos:column="26"/></name><operator pos:line="56" pos:column="26">.<pos:position pos:line="56" pos:column="27"/></operator><name pos:line="56" pos:column="27">limitInit<pos:position pos:line="56" pos:column="36"/></name></name><argument_list pos:line="56" pos:column="36">(<argument><expr><name pos:line="56" pos:column="37">p<pos:position pos:line="56" pos:column="38"/></name><operator pos:line="56" pos:column="38">+<pos:position pos:line="56" pos:column="39"/></operator><literal type="number" pos:line="56" pos:column="39">1<pos:position pos:line="56" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="56" pos:column="42">vlen<pos:position pos:line="56" pos:column="46"/></name><operator pos:line="56" pos:column="46">-<pos:position pos:line="56" pos:column="47"/></operator><literal type="number" pos:line="56" pos:column="47">2<pos:position pos:line="56" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="50"/></expr_stmt>
                }<pos:position pos:line="57" pos:column="18"/></block></then> <else pos:line="57" pos:column="19">else <block pos:line="57" pos:column="24">{
                    <expr_stmt><expr><call><name><name pos:line="58" pos:column="21">value<pos:position pos:line="58" pos:column="26"/></name><operator pos:line="58" pos:column="26">.<pos:position pos:line="58" pos:column="27"/></operator><name pos:line="58" pos:column="27">limitInit<pos:position pos:line="58" pos:column="36"/></name></name><argument_list pos:line="58" pos:column="36">(<argument><expr><name pos:line="58" pos:column="37">p<pos:position pos:line="58" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="40">vlen<pos:position pos:line="58" pos:column="44"/></name></expr></argument>)<pos:position pos:line="58" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="46"/></expr_stmt>
                }<pos:position pos:line="59" pos:column="18"/></block></else></if>
            }<pos:position pos:line="60" pos:column="14"/></block></then></if></elseif> <elseif pos:line="60" pos:column="15">else <if pos:line="60" pos:column="20">if <condition pos:line="60" pos:column="23">(<expr><operator pos:line="60" pos:column="24">*<pos:position pos:line="60" pos:column="25"/></operator><name pos:line="60" pos:column="25">p<pos:position pos:line="60" pos:column="26"/></name> <operator pos:line="60" pos:column="27">==<pos:position pos:line="60" pos:column="29"/></operator> <literal type="char" pos:line="60" pos:column="30">'"'<pos:position pos:line="60" pos:column="33"/></literal></expr>)<pos:position pos:line="60" pos:column="34"/></condition><then pos:line="60" pos:column="34"> <block pos:line="60" pos:column="35">{
                <if pos:line="61" pos:column="17">if <condition pos:line="61" pos:column="20">(<expr><operator pos:line="61" pos:column="21">!<pos:position pos:line="61" pos:column="22"/></operator><call><name pos:line="61" pos:column="22">httpHeaderParseQuotedString<pos:position pos:line="61" pos:column="49"/></name><argument_list pos:line="61" pos:column="49">(<argument><expr><name pos:line="61" pos:column="50">p<pos:position pos:line="61" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="53">vlen<pos:position pos:line="61" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="61" pos:column="59">&amp;<pos:position pos:line="61" pos:column="64"/></operator><name pos:line="61" pos:column="60">value<pos:position pos:line="61" pos:column="65"/></name></expr></argument>)<pos:position pos:line="61" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="61" pos:column="67"/></condition><then pos:line="61" pos:column="67"> <block pos:line="61" pos:column="68">{
                    <expr_stmt><expr><call><name pos:line="62" pos:column="21">debugs<pos:position pos:line="62" pos:column="27"/></name><argument_list pos:line="62" pos:column="27">(<argument><expr><literal type="number" pos:line="62" pos:column="28">29<pos:position pos:line="62" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="62" pos:column="32">9<pos:position pos:line="62" pos:column="33"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="35">"Failed to parse attribute '"<pos:position pos:line="62" pos:column="64"/></literal> <operator pos:line="62" pos:column="65">&lt;&lt;<pos:position pos:line="62" pos:column="73"/></operator> <name pos:line="62" pos:column="68">item<pos:position pos:line="62" pos:column="72"/></name> <operator pos:line="62" pos:column="73">&lt;&lt;<pos:position pos:line="62" pos:column="81"/></operator> <literal type="string" pos:line="62" pos:column="76">"' in '"<pos:position pos:line="62" pos:column="84"/></literal> <operator pos:line="62" pos:column="85">&lt;&lt;<pos:position pos:line="62" pos:column="93"/></operator> <name pos:line="62" pos:column="88">temp<pos:position pos:line="62" pos:column="92"/></name> <operator pos:line="62" pos:column="93">&lt;&lt;<pos:position pos:line="62" pos:column="101"/></operator> <literal type="string" pos:line="62" pos:column="96">"'"<pos:position pos:line="62" pos:column="99"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="100"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="101"/></expr_stmt>
                    <continue pos:line="63" pos:column="21">continue;<pos:position pos:line="63" pos:column="30"/></continue>
                }<pos:position pos:line="64" pos:column="18"/></block></then></if>
            }<pos:position pos:line="65" pos:column="14"/></block></then></if></elseif> <else pos:line="65" pos:column="15">else <block pos:line="65" pos:column="20">{
                <expr_stmt><expr><call><name><name pos:line="66" pos:column="17">value<pos:position pos:line="66" pos:column="22"/></name><operator pos:line="66" pos:column="22">.<pos:position pos:line="66" pos:column="23"/></operator><name pos:line="66" pos:column="23">limitInit<pos:position pos:line="66" pos:column="32"/></name></name><argument_list pos:line="66" pos:column="32">(<argument><expr><name pos:line="66" pos:column="33">p<pos:position pos:line="66" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="36">vlen<pos:position pos:line="66" pos:column="40"/></name></expr></argument>)<pos:position pos:line="66" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="42"/></expr_stmt>
            }<pos:position pos:line="67" pos:column="14"/></block></else></if>
        }<pos:position pos:line="68" pos:column="10"/></block></then> <else pos:line="68" pos:column="11">else <block pos:line="68" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="69" pos:column="13">debugs<pos:position pos:line="69" pos:column="19"/></name><argument_list pos:line="69" pos:column="19">(<argument><expr><literal type="number" pos:line="69" pos:column="20">29<pos:position pos:line="69" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="69" pos:column="24">9<pos:position pos:line="69" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="27">"Failed to parse attribute '"<pos:position pos:line="69" pos:column="56"/></literal> <operator pos:line="69" pos:column="57">&lt;&lt;<pos:position pos:line="69" pos:column="65"/></operator> <name pos:line="69" pos:column="60">item<pos:position pos:line="69" pos:column="64"/></name> <operator pos:line="69" pos:column="65">&lt;&lt;<pos:position pos:line="69" pos:column="73"/></operator> <literal type="string" pos:line="69" pos:column="68">"' in '"<pos:position pos:line="69" pos:column="76"/></literal> <operator pos:line="69" pos:column="77">&lt;&lt;<pos:position pos:line="69" pos:column="85"/></operator> <name pos:line="69" pos:column="80">temp<pos:position pos:line="69" pos:column="84"/></name> <operator pos:line="69" pos:column="85">&lt;&lt;<pos:position pos:line="69" pos:column="93"/></operator> <literal type="string" pos:line="69" pos:column="88">"'"<pos:position pos:line="69" pos:column="91"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="93"/></expr_stmt>
            <continue pos:line="70" pos:column="13">continue;<pos:position pos:line="70" pos:column="22"/></continue>
        }<pos:position pos:line="71" pos:column="10"/></block></else></if>

        <comment type="block" pos:line="73" pos:column="9">/* find type */</comment>
        <decl_stmt><decl><type><name pos:line="74" pos:column="9">http_digest_attr_type<pos:position pos:line="74" pos:column="30"/></name></type> <name pos:line="74" pos:column="31">t<pos:position pos:line="74" pos:column="32"/></name> <init pos:line="74" pos:column="33">= <expr><operator pos:line="74" pos:column="35">(<pos:position pos:line="74" pos:column="36"/></operator><name pos:line="74" pos:column="36">http_digest_attr_type<pos:position pos:line="74" pos:column="57"/></name><operator pos:line="74" pos:column="57">)<pos:position pos:line="74" pos:column="58"/></operator><call><name pos:line="74" pos:column="58">httpHeaderIdByName<pos:position pos:line="74" pos:column="76"/></name><argument_list pos:line="74" pos:column="76">(<argument><expr><name pos:line="74" pos:column="77">item<pos:position pos:line="74" pos:column="81"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="83">nlen<pos:position pos:line="74" pos:column="87"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="89">DigestFieldsInfo<pos:position pos:line="74" pos:column="105"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="107">DIGEST_ENUM_END<pos:position pos:line="74" pos:column="122"/></name></expr></argument>)<pos:position pos:line="74" pos:column="123"/></argument_list></call></expr></init></decl>;<pos:position pos:line="74" pos:column="124"/></decl_stmt>

        <switch pos:line="76" pos:column="9">switch <condition pos:line="76" pos:column="16">(<expr><name pos:line="76" pos:column="17">t<pos:position pos:line="76" pos:column="18"/></name></expr>)<pos:position pos:line="76" pos:column="19"/></condition> <block pos:line="76" pos:column="20">{
        <case pos:line="77" pos:column="9">case <expr><name pos:line="77" pos:column="14">DIGEST_USERNAME<pos:position pos:line="77" pos:column="29"/></name></expr>:<pos:position pos:line="77" pos:column="30"/></case>
            <expr_stmt><expr><call><name pos:line="78" pos:column="13">safe_free<pos:position pos:line="78" pos:column="22"/></name><argument_list pos:line="78" pos:column="22">(<argument><expr><name pos:line="78" pos:column="23">username<pos:position pos:line="78" pos:column="31"/></name></expr></argument>)<pos:position pos:line="78" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="33"/></expr_stmt>
            <if pos:line="79" pos:column="13">if <condition pos:line="79" pos:column="16">(<expr><call><name><name pos:line="79" pos:column="17">value<pos:position pos:line="79" pos:column="22"/></name><operator pos:line="79" pos:column="22">.<pos:position pos:line="79" pos:column="23"/></operator><name pos:line="79" pos:column="23">size<pos:position pos:line="79" pos:column="27"/></name></name><argument_list pos:line="79" pos:column="27">()<pos:position pos:line="79" pos:column="29"/></argument_list></call> <operator pos:line="79" pos:column="30">!=<pos:position pos:line="79" pos:column="32"/></operator> <literal type="number" pos:line="79" pos:column="33">0<pos:position pos:line="79" pos:column="34"/></literal></expr>)<pos:position pos:line="79" pos:column="35"/></condition><then pos:line="79" pos:column="35">
                <block type="pseudo"><expr_stmt><expr><name pos:line="80" pos:column="17">username<pos:position pos:line="80" pos:column="25"/></name> <operator pos:line="80" pos:column="26">=<pos:position pos:line="80" pos:column="27"/></operator> <call><name pos:line="80" pos:column="28">xstrndup<pos:position pos:line="80" pos:column="36"/></name><argument_list pos:line="80" pos:column="36">(<argument><expr><call><name><name pos:line="80" pos:column="37">value<pos:position pos:line="80" pos:column="42"/></name><operator pos:line="80" pos:column="42">.<pos:position pos:line="80" pos:column="43"/></operator><name pos:line="80" pos:column="43">rawBuf<pos:position pos:line="80" pos:column="49"/></name></name><argument_list pos:line="80" pos:column="49">()<pos:position pos:line="80" pos:column="51"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="80" pos:column="53">value<pos:position pos:line="80" pos:column="58"/></name><operator pos:line="80" pos:column="58">.<pos:position pos:line="80" pos:column="59"/></operator><name pos:line="80" pos:column="59">size<pos:position pos:line="80" pos:column="63"/></name></name><argument_list pos:line="80" pos:column="63">()<pos:position pos:line="80" pos:column="65"/></argument_list></call> <operator pos:line="80" pos:column="66">+<pos:position pos:line="80" pos:column="67"/></operator> <literal type="number" pos:line="80" pos:column="68">1<pos:position pos:line="80" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="71"/></expr_stmt></block></then></if>
            <expr_stmt><expr><call><name pos:line="81" pos:column="13">debugs<pos:position pos:line="81" pos:column="19"/></name><argument_list pos:line="81" pos:column="19">(<argument><expr><literal type="number" pos:line="81" pos:column="20">29<pos:position pos:line="81" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="81" pos:column="24">9<pos:position pos:line="81" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="81" pos:column="27">"Found Username '"<pos:position pos:line="81" pos:column="45"/></literal> <operator pos:line="81" pos:column="46">&lt;&lt;<pos:position pos:line="81" pos:column="54"/></operator> <name pos:line="81" pos:column="49">username<pos:position pos:line="81" pos:column="57"/></name> <operator pos:line="81" pos:column="58">&lt;&lt;<pos:position pos:line="81" pos:column="66"/></operator> <literal type="string" pos:line="81" pos:column="61">"'"<pos:position pos:line="81" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="81" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="66"/></expr_stmt>
            <break pos:line="82" pos:column="13">break;<pos:position pos:line="82" pos:column="19"/></break>

        <case pos:line="84" pos:column="9">case <expr><name pos:line="84" pos:column="14">DIGEST_REALM<pos:position pos:line="84" pos:column="26"/></name></expr>:<pos:position pos:line="84" pos:column="27"/></case>
            <expr_stmt><expr><call><name pos:line="85" pos:column="13">safe_free<pos:position pos:line="85" pos:column="22"/></name><argument_list pos:line="85" pos:column="22">(<argument><expr><name><name pos:line="85" pos:column="23">digest_request<pos:position pos:line="85" pos:column="37"/></name><operator pos:line="85" pos:column="37">-&gt;<pos:position pos:line="85" pos:column="42"/></operator><name pos:line="85" pos:column="39">realm<pos:position pos:line="85" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="85" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="46"/></expr_stmt>
            <if pos:line="86" pos:column="13">if <condition pos:line="86" pos:column="16">(<expr><call><name><name pos:line="86" pos:column="17">value<pos:position pos:line="86" pos:column="22"/></name><operator pos:line="86" pos:column="22">.<pos:position pos:line="86" pos:column="23"/></operator><name pos:line="86" pos:column="23">size<pos:position pos:line="86" pos:column="27"/></name></name><argument_list pos:line="86" pos:column="27">()<pos:position pos:line="86" pos:column="29"/></argument_list></call> <operator pos:line="86" pos:column="30">!=<pos:position pos:line="86" pos:column="32"/></operator> <literal type="number" pos:line="86" pos:column="33">0<pos:position pos:line="86" pos:column="34"/></literal></expr>)<pos:position pos:line="86" pos:column="35"/></condition><then pos:line="86" pos:column="35">
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="87" pos:column="17">digest_request<pos:position pos:line="87" pos:column="31"/></name><operator pos:line="87" pos:column="31">-&gt;<pos:position pos:line="87" pos:column="36"/></operator><name pos:line="87" pos:column="33">realm<pos:position pos:line="87" pos:column="38"/></name></name> <operator pos:line="87" pos:column="39">=<pos:position pos:line="87" pos:column="40"/></operator> <call><name pos:line="87" pos:column="41">xstrndup<pos:position pos:line="87" pos:column="49"/></name><argument_list pos:line="87" pos:column="49">(<argument><expr><call><name><name pos:line="87" pos:column="50">value<pos:position pos:line="87" pos:column="55"/></name><operator pos:line="87" pos:column="55">.<pos:position pos:line="87" pos:column="56"/></operator><name pos:line="87" pos:column="56">rawBuf<pos:position pos:line="87" pos:column="62"/></name></name><argument_list pos:line="87" pos:column="62">()<pos:position pos:line="87" pos:column="64"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="87" pos:column="66">value<pos:position pos:line="87" pos:column="71"/></name><operator pos:line="87" pos:column="71">.<pos:position pos:line="87" pos:column="72"/></operator><name pos:line="87" pos:column="72">size<pos:position pos:line="87" pos:column="76"/></name></name><argument_list pos:line="87" pos:column="76">()<pos:position pos:line="87" pos:column="78"/></argument_list></call> <operator pos:line="87" pos:column="79">+<pos:position pos:line="87" pos:column="80"/></operator> <literal type="number" pos:line="87" pos:column="81">1<pos:position pos:line="87" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="84"/></expr_stmt></block></then></if>
            <expr_stmt><expr><call><name pos:line="88" pos:column="13">debugs<pos:position pos:line="88" pos:column="19"/></name><argument_list pos:line="88" pos:column="19">(<argument><expr><literal type="number" pos:line="88" pos:column="20">29<pos:position pos:line="88" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="88" pos:column="24">9<pos:position pos:line="88" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="88" pos:column="27">"Found realm '"<pos:position pos:line="88" pos:column="42"/></literal> <operator pos:line="88" pos:column="43">&lt;&lt;<pos:position pos:line="88" pos:column="51"/></operator> <name><name pos:line="88" pos:column="46">digest_request<pos:position pos:line="88" pos:column="60"/></name><operator pos:line="88" pos:column="60">-&gt;<pos:position pos:line="88" pos:column="65"/></operator><name pos:line="88" pos:column="62">realm<pos:position pos:line="88" pos:column="67"/></name></name> <operator pos:line="88" pos:column="68">&lt;&lt;<pos:position pos:line="88" pos:column="76"/></operator> <literal type="string" pos:line="88" pos:column="71">"'"<pos:position pos:line="88" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="76"/></expr_stmt>
            <break pos:line="89" pos:column="13">break;<pos:position pos:line="89" pos:column="19"/></break>

        <case pos:line="91" pos:column="9">case <expr><name pos:line="91" pos:column="14">DIGEST_QOP<pos:position pos:line="91" pos:column="24"/></name></expr>:<pos:position pos:line="91" pos:column="25"/></case>
            <expr_stmt><expr><call><name pos:line="92" pos:column="13">safe_free<pos:position pos:line="92" pos:column="22"/></name><argument_list pos:line="92" pos:column="22">(<argument><expr><name><name pos:line="92" pos:column="23">digest_request<pos:position pos:line="92" pos:column="37"/></name><operator pos:line="92" pos:column="37">-&gt;<pos:position pos:line="92" pos:column="42"/></operator><name pos:line="92" pos:column="39">qop<pos:position pos:line="92" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="92" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="44"/></expr_stmt>
            <if pos:line="93" pos:column="13">if <condition pos:line="93" pos:column="16">(<expr><call><name><name pos:line="93" pos:column="17">value<pos:position pos:line="93" pos:column="22"/></name><operator pos:line="93" pos:column="22">.<pos:position pos:line="93" pos:column="23"/></operator><name pos:line="93" pos:column="23">size<pos:position pos:line="93" pos:column="27"/></name></name><argument_list pos:line="93" pos:column="27">()<pos:position pos:line="93" pos:column="29"/></argument_list></call> <operator pos:line="93" pos:column="30">!=<pos:position pos:line="93" pos:column="32"/></operator> <literal type="number" pos:line="93" pos:column="33">0<pos:position pos:line="93" pos:column="34"/></literal></expr>)<pos:position pos:line="93" pos:column="35"/></condition><then pos:line="93" pos:column="35">
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="94" pos:column="17">digest_request<pos:position pos:line="94" pos:column="31"/></name><operator pos:line="94" pos:column="31">-&gt;<pos:position pos:line="94" pos:column="36"/></operator><name pos:line="94" pos:column="33">qop<pos:position pos:line="94" pos:column="36"/></name></name> <operator pos:line="94" pos:column="37">=<pos:position pos:line="94" pos:column="38"/></operator> <call><name pos:line="94" pos:column="39">xstrndup<pos:position pos:line="94" pos:column="47"/></name><argument_list pos:line="94" pos:column="47">(<argument><expr><call><name><name pos:line="94" pos:column="48">value<pos:position pos:line="94" pos:column="53"/></name><operator pos:line="94" pos:column="53">.<pos:position pos:line="94" pos:column="54"/></operator><name pos:line="94" pos:column="54">rawBuf<pos:position pos:line="94" pos:column="60"/></name></name><argument_list pos:line="94" pos:column="60">()<pos:position pos:line="94" pos:column="62"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="94" pos:column="64">value<pos:position pos:line="94" pos:column="69"/></name><operator pos:line="94" pos:column="69">.<pos:position pos:line="94" pos:column="70"/></operator><name pos:line="94" pos:column="70">size<pos:position pos:line="94" pos:column="74"/></name></name><argument_list pos:line="94" pos:column="74">()<pos:position pos:line="94" pos:column="76"/></argument_list></call> <operator pos:line="94" pos:column="77">+<pos:position pos:line="94" pos:column="78"/></operator> <literal type="number" pos:line="94" pos:column="79">1<pos:position pos:line="94" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="94" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="82"/></expr_stmt></block></then></if>
            <expr_stmt><expr><call><name pos:line="95" pos:column="13">debugs<pos:position pos:line="95" pos:column="19"/></name><argument_list pos:line="95" pos:column="19">(<argument><expr><literal type="number" pos:line="95" pos:column="20">29<pos:position pos:line="95" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="95" pos:column="24">9<pos:position pos:line="95" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="95" pos:column="27">"Found qop '"<pos:position pos:line="95" pos:column="40"/></literal> <operator pos:line="95" pos:column="41">&lt;&lt;<pos:position pos:line="95" pos:column="49"/></operator> <name><name pos:line="95" pos:column="44">digest_request<pos:position pos:line="95" pos:column="58"/></name><operator pos:line="95" pos:column="58">-&gt;<pos:position pos:line="95" pos:column="63"/></operator><name pos:line="95" pos:column="60">qop<pos:position pos:line="95" pos:column="63"/></name></name> <operator pos:line="95" pos:column="64">&lt;&lt;<pos:position pos:line="95" pos:column="72"/></operator> <literal type="string" pos:line="95" pos:column="67">"'"<pos:position pos:line="95" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="95" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="72"/></expr_stmt>
            <break pos:line="96" pos:column="13">break;<pos:position pos:line="96" pos:column="19"/></break>

        <case pos:line="98" pos:column="9">case <expr><name pos:line="98" pos:column="14">DIGEST_ALGORITHM<pos:position pos:line="98" pos:column="30"/></name></expr>:<pos:position pos:line="98" pos:column="31"/></case>
            <expr_stmt><expr><call><name pos:line="99" pos:column="13">safe_free<pos:position pos:line="99" pos:column="22"/></name><argument_list pos:line="99" pos:column="22">(<argument><expr><name><name pos:line="99" pos:column="23">digest_request<pos:position pos:line="99" pos:column="37"/></name><operator pos:line="99" pos:column="37">-&gt;<pos:position pos:line="99" pos:column="42"/></operator><name pos:line="99" pos:column="39">algorithm<pos:position pos:line="99" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="99" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="50"/></expr_stmt>
            <if pos:line="100" pos:column="13">if <condition pos:line="100" pos:column="16">(<expr><call><name><name pos:line="100" pos:column="17">value<pos:position pos:line="100" pos:column="22"/></name><operator pos:line="100" pos:column="22">.<pos:position pos:line="100" pos:column="23"/></operator><name pos:line="100" pos:column="23">size<pos:position pos:line="100" pos:column="27"/></name></name><argument_list pos:line="100" pos:column="27">()<pos:position pos:line="100" pos:column="29"/></argument_list></call> <operator pos:line="100" pos:column="30">!=<pos:position pos:line="100" pos:column="32"/></operator> <literal type="number" pos:line="100" pos:column="33">0<pos:position pos:line="100" pos:column="34"/></literal></expr>)<pos:position pos:line="100" pos:column="35"/></condition><then pos:line="100" pos:column="35">
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="101" pos:column="17">digest_request<pos:position pos:line="101" pos:column="31"/></name><operator pos:line="101" pos:column="31">-&gt;<pos:position pos:line="101" pos:column="36"/></operator><name pos:line="101" pos:column="33">algorithm<pos:position pos:line="101" pos:column="42"/></name></name> <operator pos:line="101" pos:column="43">=<pos:position pos:line="101" pos:column="44"/></operator> <call><name pos:line="101" pos:column="45">xstrndup<pos:position pos:line="101" pos:column="53"/></name><argument_list pos:line="101" pos:column="53">(<argument><expr><call><name><name pos:line="101" pos:column="54">value<pos:position pos:line="101" pos:column="59"/></name><operator pos:line="101" pos:column="59">.<pos:position pos:line="101" pos:column="60"/></operator><name pos:line="101" pos:column="60">rawBuf<pos:position pos:line="101" pos:column="66"/></name></name><argument_list pos:line="101" pos:column="66">()<pos:position pos:line="101" pos:column="68"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="101" pos:column="70">value<pos:position pos:line="101" pos:column="75"/></name><operator pos:line="101" pos:column="75">.<pos:position pos:line="101" pos:column="76"/></operator><name pos:line="101" pos:column="76">size<pos:position pos:line="101" pos:column="80"/></name></name><argument_list pos:line="101" pos:column="80">()<pos:position pos:line="101" pos:column="82"/></argument_list></call> <operator pos:line="101" pos:column="83">+<pos:position pos:line="101" pos:column="84"/></operator> <literal type="number" pos:line="101" pos:column="85">1<pos:position pos:line="101" pos:column="86"/></literal></expr></argument>)<pos:position pos:line="101" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="88"/></expr_stmt></block></then></if>
            <expr_stmt><expr><call><name pos:line="102" pos:column="13">debugs<pos:position pos:line="102" pos:column="19"/></name><argument_list pos:line="102" pos:column="19">(<argument><expr><literal type="number" pos:line="102" pos:column="20">29<pos:position pos:line="102" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="102" pos:column="24">9<pos:position pos:line="102" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="102" pos:column="27">"Found algorithm '"<pos:position pos:line="102" pos:column="46"/></literal> <operator pos:line="102" pos:column="47">&lt;&lt;<pos:position pos:line="102" pos:column="55"/></operator> <name><name pos:line="102" pos:column="50">digest_request<pos:position pos:line="102" pos:column="64"/></name><operator pos:line="102" pos:column="64">-&gt;<pos:position pos:line="102" pos:column="69"/></operator><name pos:line="102" pos:column="66">algorithm<pos:position pos:line="102" pos:column="75"/></name></name> <operator pos:line="102" pos:column="76">&lt;&lt;<pos:position pos:line="102" pos:column="84"/></operator> <literal type="string" pos:line="102" pos:column="79">"'"<pos:position pos:line="102" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="102" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="84"/></expr_stmt>
            <break pos:line="103" pos:column="13">break;<pos:position pos:line="103" pos:column="19"/></break>

        <case pos:line="105" pos:column="9">case <expr><name pos:line="105" pos:column="14">DIGEST_URI<pos:position pos:line="105" pos:column="24"/></name></expr>:<pos:position pos:line="105" pos:column="25"/></case>
            <expr_stmt><expr><call><name pos:line="106" pos:column="13">safe_free<pos:position pos:line="106" pos:column="22"/></name><argument_list pos:line="106" pos:column="22">(<argument><expr><name><name pos:line="106" pos:column="23">digest_request<pos:position pos:line="106" pos:column="37"/></name><operator pos:line="106" pos:column="37">-&gt;<pos:position pos:line="106" pos:column="42"/></operator><name pos:line="106" pos:column="39">uri<pos:position pos:line="106" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="106" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="44"/></expr_stmt>
            <if pos:line="107" pos:column="13">if <condition pos:line="107" pos:column="16">(<expr><call><name><name pos:line="107" pos:column="17">value<pos:position pos:line="107" pos:column="22"/></name><operator pos:line="107" pos:column="22">.<pos:position pos:line="107" pos:column="23"/></operator><name pos:line="107" pos:column="23">size<pos:position pos:line="107" pos:column="27"/></name></name><argument_list pos:line="107" pos:column="27">()<pos:position pos:line="107" pos:column="29"/></argument_list></call> <operator pos:line="107" pos:column="30">!=<pos:position pos:line="107" pos:column="32"/></operator> <literal type="number" pos:line="107" pos:column="33">0<pos:position pos:line="107" pos:column="34"/></literal></expr>)<pos:position pos:line="107" pos:column="35"/></condition><then pos:line="107" pos:column="35">
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="108" pos:column="17">digest_request<pos:position pos:line="108" pos:column="31"/></name><operator pos:line="108" pos:column="31">-&gt;<pos:position pos:line="108" pos:column="36"/></operator><name pos:line="108" pos:column="33">uri<pos:position pos:line="108" pos:column="36"/></name></name> <operator pos:line="108" pos:column="37">=<pos:position pos:line="108" pos:column="38"/></operator> <call><name pos:line="108" pos:column="39">xstrndup<pos:position pos:line="108" pos:column="47"/></name><argument_list pos:line="108" pos:column="47">(<argument><expr><call><name><name pos:line="108" pos:column="48">value<pos:position pos:line="108" pos:column="53"/></name><operator pos:line="108" pos:column="53">.<pos:position pos:line="108" pos:column="54"/></operator><name pos:line="108" pos:column="54">rawBuf<pos:position pos:line="108" pos:column="60"/></name></name><argument_list pos:line="108" pos:column="60">()<pos:position pos:line="108" pos:column="62"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="108" pos:column="64">value<pos:position pos:line="108" pos:column="69"/></name><operator pos:line="108" pos:column="69">.<pos:position pos:line="108" pos:column="70"/></operator><name pos:line="108" pos:column="70">size<pos:position pos:line="108" pos:column="74"/></name></name><argument_list pos:line="108" pos:column="74">()<pos:position pos:line="108" pos:column="76"/></argument_list></call> <operator pos:line="108" pos:column="77">+<pos:position pos:line="108" pos:column="78"/></operator> <literal type="number" pos:line="108" pos:column="79">1<pos:position pos:line="108" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="108" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="82"/></expr_stmt></block></then></if>
            <expr_stmt><expr><call><name pos:line="109" pos:column="13">debugs<pos:position pos:line="109" pos:column="19"/></name><argument_list pos:line="109" pos:column="19">(<argument><expr><literal type="number" pos:line="109" pos:column="20">29<pos:position pos:line="109" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="109" pos:column="24">9<pos:position pos:line="109" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="109" pos:column="27">"Found uri '"<pos:position pos:line="109" pos:column="40"/></literal> <operator pos:line="109" pos:column="41">&lt;&lt;<pos:position pos:line="109" pos:column="49"/></operator> <name><name pos:line="109" pos:column="44">digest_request<pos:position pos:line="109" pos:column="58"/></name><operator pos:line="109" pos:column="58">-&gt;<pos:position pos:line="109" pos:column="63"/></operator><name pos:line="109" pos:column="60">uri<pos:position pos:line="109" pos:column="63"/></name></name> <operator pos:line="109" pos:column="64">&lt;&lt;<pos:position pos:line="109" pos:column="72"/></operator> <literal type="string" pos:line="109" pos:column="67">"'"<pos:position pos:line="109" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="109" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="72"/></expr_stmt>
            <break pos:line="110" pos:column="13">break;<pos:position pos:line="110" pos:column="19"/></break>

        <case pos:line="112" pos:column="9">case <expr><name pos:line="112" pos:column="14">DIGEST_NONCE<pos:position pos:line="112" pos:column="26"/></name></expr>:<pos:position pos:line="112" pos:column="27"/></case>
            <expr_stmt><expr><call><name pos:line="113" pos:column="13">safe_free<pos:position pos:line="113" pos:column="22"/></name><argument_list pos:line="113" pos:column="22">(<argument><expr><name><name pos:line="113" pos:column="23">digest_request<pos:position pos:line="113" pos:column="37"/></name><operator pos:line="113" pos:column="37">-&gt;<pos:position pos:line="113" pos:column="42"/></operator><name pos:line="113" pos:column="39">nonceb64<pos:position pos:line="113" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="113" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="49"/></expr_stmt>
            <if pos:line="114" pos:column="13">if <condition pos:line="114" pos:column="16">(<expr><call><name><name pos:line="114" pos:column="17">value<pos:position pos:line="114" pos:column="22"/></name><operator pos:line="114" pos:column="22">.<pos:position pos:line="114" pos:column="23"/></operator><name pos:line="114" pos:column="23">size<pos:position pos:line="114" pos:column="27"/></name></name><argument_list pos:line="114" pos:column="27">()<pos:position pos:line="114" pos:column="29"/></argument_list></call> <operator pos:line="114" pos:column="30">!=<pos:position pos:line="114" pos:column="32"/></operator> <literal type="number" pos:line="114" pos:column="33">0<pos:position pos:line="114" pos:column="34"/></literal></expr>)<pos:position pos:line="114" pos:column="35"/></condition><then pos:line="114" pos:column="35">
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="115" pos:column="17">digest_request<pos:position pos:line="115" pos:column="31"/></name><operator pos:line="115" pos:column="31">-&gt;<pos:position pos:line="115" pos:column="36"/></operator><name pos:line="115" pos:column="33">nonceb64<pos:position pos:line="115" pos:column="41"/></name></name> <operator pos:line="115" pos:column="42">=<pos:position pos:line="115" pos:column="43"/></operator> <call><name pos:line="115" pos:column="44">xstrndup<pos:position pos:line="115" pos:column="52"/></name><argument_list pos:line="115" pos:column="52">(<argument><expr><call><name><name pos:line="115" pos:column="53">value<pos:position pos:line="115" pos:column="58"/></name><operator pos:line="115" pos:column="58">.<pos:position pos:line="115" pos:column="59"/></operator><name pos:line="115" pos:column="59">rawBuf<pos:position pos:line="115" pos:column="65"/></name></name><argument_list pos:line="115" pos:column="65">()<pos:position pos:line="115" pos:column="67"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="115" pos:column="69">value<pos:position pos:line="115" pos:column="74"/></name><operator pos:line="115" pos:column="74">.<pos:position pos:line="115" pos:column="75"/></operator><name pos:line="115" pos:column="75">size<pos:position pos:line="115" pos:column="79"/></name></name><argument_list pos:line="115" pos:column="79">()<pos:position pos:line="115" pos:column="81"/></argument_list></call> <operator pos:line="115" pos:column="82">+<pos:position pos:line="115" pos:column="83"/></operator> <literal type="number" pos:line="115" pos:column="84">1<pos:position pos:line="115" pos:column="85"/></literal></expr></argument>)<pos:position pos:line="115" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="87"/></expr_stmt></block></then></if>
            <expr_stmt><expr><call><name pos:line="116" pos:column="13">debugs<pos:position pos:line="116" pos:column="19"/></name><argument_list pos:line="116" pos:column="19">(<argument><expr><literal type="number" pos:line="116" pos:column="20">29<pos:position pos:line="116" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="116" pos:column="24">9<pos:position pos:line="116" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="116" pos:column="27">"Found nonce '"<pos:position pos:line="116" pos:column="42"/></literal> <operator pos:line="116" pos:column="43">&lt;&lt;<pos:position pos:line="116" pos:column="51"/></operator> <name><name pos:line="116" pos:column="46">digest_request<pos:position pos:line="116" pos:column="60"/></name><operator pos:line="116" pos:column="60">-&gt;<pos:position pos:line="116" pos:column="65"/></operator><name pos:line="116" pos:column="62">nonceb64<pos:position pos:line="116" pos:column="70"/></name></name> <operator pos:line="116" pos:column="71">&lt;&lt;<pos:position pos:line="116" pos:column="79"/></operator> <literal type="string" pos:line="116" pos:column="74">"'"<pos:position pos:line="116" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="116" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="79"/></expr_stmt>
            <break pos:line="117" pos:column="13">break;<pos:position pos:line="117" pos:column="19"/></break>

        <case pos:line="119" pos:column="9">case <expr><name pos:line="119" pos:column="14">DIGEST_NC<pos:position pos:line="119" pos:column="23"/></name></expr>:<pos:position pos:line="119" pos:column="24"/></case>
            <if pos:line="120" pos:column="13">if <condition pos:line="120" pos:column="16">(<expr><call><name><name pos:line="120" pos:column="17">value<pos:position pos:line="120" pos:column="22"/></name><operator pos:line="120" pos:column="22">.<pos:position pos:line="120" pos:column="23"/></operator><name pos:line="120" pos:column="23">size<pos:position pos:line="120" pos:column="27"/></name></name><argument_list pos:line="120" pos:column="27">()<pos:position pos:line="120" pos:column="29"/></argument_list></call> <operator pos:line="120" pos:column="30">!=<pos:position pos:line="120" pos:column="32"/></operator> <literal type="number" pos:line="120" pos:column="33">8<pos:position pos:line="120" pos:column="34"/></literal></expr>)<pos:position pos:line="120" pos:column="35"/></condition><then pos:line="120" pos:column="35"> <block pos:line="120" pos:column="36">{
                <expr_stmt><expr><call><name pos:line="121" pos:column="17">debugs<pos:position pos:line="121" pos:column="23"/></name><argument_list pos:line="121" pos:column="23">(<argument><expr><literal type="number" pos:line="121" pos:column="24">29<pos:position pos:line="121" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="121" pos:column="28">9<pos:position pos:line="121" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="121" pos:column="31">"Invalid nc '"<pos:position pos:line="121" pos:column="45"/></literal> <operator pos:line="121" pos:column="46">&lt;&lt;<pos:position pos:line="121" pos:column="54"/></operator> <name pos:line="121" pos:column="49">value<pos:position pos:line="121" pos:column="54"/></name> <operator pos:line="121" pos:column="55">&lt;&lt;<pos:position pos:line="121" pos:column="63"/></operator> <literal type="string" pos:line="121" pos:column="58">"' in '"<pos:position pos:line="121" pos:column="66"/></literal> <operator pos:line="121" pos:column="67">&lt;&lt;<pos:position pos:line="121" pos:column="75"/></operator> <name pos:line="121" pos:column="70">temp<pos:position pos:line="121" pos:column="74"/></name> <operator pos:line="121" pos:column="75">&lt;&lt;<pos:position pos:line="121" pos:column="83"/></operator> <literal type="string" pos:line="121" pos:column="78">"'"<pos:position pos:line="121" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="121" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="83"/></expr_stmt>
            }<pos:position pos:line="122" pos:column="14"/></block></then></if>
            <expr_stmt><expr><call><name pos:line="123" pos:column="13">xstrncpy<pos:position pos:line="123" pos:column="21"/></name><argument_list pos:line="123" pos:column="21">(<argument><expr><name><name pos:line="123" pos:column="22">digest_request<pos:position pos:line="123" pos:column="36"/></name><operator pos:line="123" pos:column="36">-&gt;<pos:position pos:line="123" pos:column="41"/></operator><name pos:line="123" pos:column="38">nc<pos:position pos:line="123" pos:column="40"/></name></name></expr></argument>, <argument><expr><call><name><name pos:line="123" pos:column="42">value<pos:position pos:line="123" pos:column="47"/></name><operator pos:line="123" pos:column="47">.<pos:position pos:line="123" pos:column="48"/></operator><name pos:line="123" pos:column="48">rawBuf<pos:position pos:line="123" pos:column="54"/></name></name><argument_list pos:line="123" pos:column="54">()<pos:position pos:line="123" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="123" pos:column="58">value<pos:position pos:line="123" pos:column="63"/></name><operator pos:line="123" pos:column="63">.<pos:position pos:line="123" pos:column="64"/></operator><name pos:line="123" pos:column="64">size<pos:position pos:line="123" pos:column="68"/></name></name><argument_list pos:line="123" pos:column="68">()<pos:position pos:line="123" pos:column="70"/></argument_list></call> <operator pos:line="123" pos:column="71">+<pos:position pos:line="123" pos:column="72"/></operator> <literal type="number" pos:line="123" pos:column="73">1<pos:position pos:line="123" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="123" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="76"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="124" pos:column="13">debugs<pos:position pos:line="124" pos:column="19"/></name><argument_list pos:line="124" pos:column="19">(<argument><expr><literal type="number" pos:line="124" pos:column="20">29<pos:position pos:line="124" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="124" pos:column="24">9<pos:position pos:line="124" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="124" pos:column="27">"Found noncecount '"<pos:position pos:line="124" pos:column="47"/></literal> <operator pos:line="124" pos:column="48">&lt;&lt;<pos:position pos:line="124" pos:column="56"/></operator> <name><name pos:line="124" pos:column="51">digest_request<pos:position pos:line="124" pos:column="65"/></name><operator pos:line="124" pos:column="65">-&gt;<pos:position pos:line="124" pos:column="70"/></operator><name pos:line="124" pos:column="67">nc<pos:position pos:line="124" pos:column="69"/></name></name> <operator pos:line="124" pos:column="70">&lt;&lt;<pos:position pos:line="124" pos:column="78"/></operator> <literal type="string" pos:line="124" pos:column="73">"'"<pos:position pos:line="124" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="124" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="78"/></expr_stmt>
            <break pos:line="125" pos:column="13">break;<pos:position pos:line="125" pos:column="19"/></break>

        <case pos:line="127" pos:column="9">case <expr><name pos:line="127" pos:column="14">DIGEST_CNONCE<pos:position pos:line="127" pos:column="27"/></name></expr>:<pos:position pos:line="127" pos:column="28"/></case>
            <expr_stmt><expr><call><name pos:line="128" pos:column="13">safe_free<pos:position pos:line="128" pos:column="22"/></name><argument_list pos:line="128" pos:column="22">(<argument><expr><name><name pos:line="128" pos:column="23">digest_request<pos:position pos:line="128" pos:column="37"/></name><operator pos:line="128" pos:column="37">-&gt;<pos:position pos:line="128" pos:column="42"/></operator><name pos:line="128" pos:column="39">cnonce<pos:position pos:line="128" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="128" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="47"/></expr_stmt>
            <if pos:line="129" pos:column="13">if <condition pos:line="129" pos:column="16">(<expr><call><name><name pos:line="129" pos:column="17">value<pos:position pos:line="129" pos:column="22"/></name><operator pos:line="129" pos:column="22">.<pos:position pos:line="129" pos:column="23"/></operator><name pos:line="129" pos:column="23">size<pos:position pos:line="129" pos:column="27"/></name></name><argument_list pos:line="129" pos:column="27">()<pos:position pos:line="129" pos:column="29"/></argument_list></call> <operator pos:line="129" pos:column="30">!=<pos:position pos:line="129" pos:column="32"/></operator> <literal type="number" pos:line="129" pos:column="33">0<pos:position pos:line="129" pos:column="34"/></literal></expr>)<pos:position pos:line="129" pos:column="35"/></condition><then pos:line="129" pos:column="35">
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="130" pos:column="17">digest_request<pos:position pos:line="130" pos:column="31"/></name><operator pos:line="130" pos:column="31">-&gt;<pos:position pos:line="130" pos:column="36"/></operator><name pos:line="130" pos:column="33">cnonce<pos:position pos:line="130" pos:column="39"/></name></name> <operator pos:line="130" pos:column="40">=<pos:position pos:line="130" pos:column="41"/></operator> <call><name pos:line="130" pos:column="42">xstrndup<pos:position pos:line="130" pos:column="50"/></name><argument_list pos:line="130" pos:column="50">(<argument><expr><call><name><name pos:line="130" pos:column="51">value<pos:position pos:line="130" pos:column="56"/></name><operator pos:line="130" pos:column="56">.<pos:position pos:line="130" pos:column="57"/></operator><name pos:line="130" pos:column="57">rawBuf<pos:position pos:line="130" pos:column="63"/></name></name><argument_list pos:line="130" pos:column="63">()<pos:position pos:line="130" pos:column="65"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="130" pos:column="67">value<pos:position pos:line="130" pos:column="72"/></name><operator pos:line="130" pos:column="72">.<pos:position pos:line="130" pos:column="73"/></operator><name pos:line="130" pos:column="73">size<pos:position pos:line="130" pos:column="77"/></name></name><argument_list pos:line="130" pos:column="77">()<pos:position pos:line="130" pos:column="79"/></argument_list></call> <operator pos:line="130" pos:column="80">+<pos:position pos:line="130" pos:column="81"/></operator> <literal type="number" pos:line="130" pos:column="82">1<pos:position pos:line="130" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="130" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="85"/></expr_stmt></block></then></if>
            <expr_stmt><expr><call><name pos:line="131" pos:column="13">debugs<pos:position pos:line="131" pos:column="19"/></name><argument_list pos:line="131" pos:column="19">(<argument><expr><literal type="number" pos:line="131" pos:column="20">29<pos:position pos:line="131" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="131" pos:column="24">9<pos:position pos:line="131" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="131" pos:column="27">"Found cnonce '"<pos:position pos:line="131" pos:column="43"/></literal> <operator pos:line="131" pos:column="44">&lt;&lt;<pos:position pos:line="131" pos:column="52"/></operator> <name><name pos:line="131" pos:column="47">digest_request<pos:position pos:line="131" pos:column="61"/></name><operator pos:line="131" pos:column="61">-&gt;<pos:position pos:line="131" pos:column="66"/></operator><name pos:line="131" pos:column="63">cnonce<pos:position pos:line="131" pos:column="69"/></name></name> <operator pos:line="131" pos:column="70">&lt;&lt;<pos:position pos:line="131" pos:column="78"/></operator> <literal type="string" pos:line="131" pos:column="73">"'"<pos:position pos:line="131" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="131" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="78"/></expr_stmt>
            <break pos:line="132" pos:column="13">break;<pos:position pos:line="132" pos:column="19"/></break>

        <case pos:line="134" pos:column="9">case <expr><name pos:line="134" pos:column="14">DIGEST_RESPONSE<pos:position pos:line="134" pos:column="29"/></name></expr>:<pos:position pos:line="134" pos:column="30"/></case>
            <expr_stmt><expr><call><name pos:line="135" pos:column="13">safe_free<pos:position pos:line="135" pos:column="22"/></name><argument_list pos:line="135" pos:column="22">(<argument><expr><name><name pos:line="135" pos:column="23">digest_request<pos:position pos:line="135" pos:column="37"/></name><operator pos:line="135" pos:column="37">-&gt;<pos:position pos:line="135" pos:column="42"/></operator><name pos:line="135" pos:column="39">response<pos:position pos:line="135" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="135" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="49"/></expr_stmt>
            <if pos:line="136" pos:column="13">if <condition pos:line="136" pos:column="16">(<expr><call><name><name pos:line="136" pos:column="17">value<pos:position pos:line="136" pos:column="22"/></name><operator pos:line="136" pos:column="22">.<pos:position pos:line="136" pos:column="23"/></operator><name pos:line="136" pos:column="23">size<pos:position pos:line="136" pos:column="27"/></name></name><argument_list pos:line="136" pos:column="27">()<pos:position pos:line="136" pos:column="29"/></argument_list></call> <operator pos:line="136" pos:column="30">!=<pos:position pos:line="136" pos:column="32"/></operator> <literal type="number" pos:line="136" pos:column="33">0<pos:position pos:line="136" pos:column="34"/></literal></expr>)<pos:position pos:line="136" pos:column="35"/></condition><then pos:line="136" pos:column="35">
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="137" pos:column="17">digest_request<pos:position pos:line="137" pos:column="31"/></name><operator pos:line="137" pos:column="31">-&gt;<pos:position pos:line="137" pos:column="36"/></operator><name pos:line="137" pos:column="33">response<pos:position pos:line="137" pos:column="41"/></name></name> <operator pos:line="137" pos:column="42">=<pos:position pos:line="137" pos:column="43"/></operator> <call><name pos:line="137" pos:column="44">xstrndup<pos:position pos:line="137" pos:column="52"/></name><argument_list pos:line="137" pos:column="52">(<argument><expr><call><name><name pos:line="137" pos:column="53">value<pos:position pos:line="137" pos:column="58"/></name><operator pos:line="137" pos:column="58">.<pos:position pos:line="137" pos:column="59"/></operator><name pos:line="137" pos:column="59">rawBuf<pos:position pos:line="137" pos:column="65"/></name></name><argument_list pos:line="137" pos:column="65">()<pos:position pos:line="137" pos:column="67"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="137" pos:column="69">value<pos:position pos:line="137" pos:column="74"/></name><operator pos:line="137" pos:column="74">.<pos:position pos:line="137" pos:column="75"/></operator><name pos:line="137" pos:column="75">size<pos:position pos:line="137" pos:column="79"/></name></name><argument_list pos:line="137" pos:column="79">()<pos:position pos:line="137" pos:column="81"/></argument_list></call> <operator pos:line="137" pos:column="82">+<pos:position pos:line="137" pos:column="83"/></operator> <literal type="number" pos:line="137" pos:column="84">1<pos:position pos:line="137" pos:column="85"/></literal></expr></argument>)<pos:position pos:line="137" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="87"/></expr_stmt></block></then></if>
            <expr_stmt><expr><call><name pos:line="138" pos:column="13">debugs<pos:position pos:line="138" pos:column="19"/></name><argument_list pos:line="138" pos:column="19">(<argument><expr><literal type="number" pos:line="138" pos:column="20">29<pos:position pos:line="138" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="138" pos:column="24">9<pos:position pos:line="138" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="138" pos:column="27">"Found response '"<pos:position pos:line="138" pos:column="45"/></literal> <operator pos:line="138" pos:column="46">&lt;&lt;<pos:position pos:line="138" pos:column="54"/></operator> <name><name pos:line="138" pos:column="49">digest_request<pos:position pos:line="138" pos:column="63"/></name><operator pos:line="138" pos:column="63">-&gt;<pos:position pos:line="138" pos:column="68"/></operator><name pos:line="138" pos:column="65">response<pos:position pos:line="138" pos:column="73"/></name></name> <operator pos:line="138" pos:column="74">&lt;&lt;<pos:position pos:line="138" pos:column="82"/></operator> <literal type="string" pos:line="138" pos:column="77">"'"<pos:position pos:line="138" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="138" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="82"/></expr_stmt>
            <break pos:line="139" pos:column="13">break;<pos:position pos:line="139" pos:column="19"/></break>

        <default pos:line="141" pos:column="9">default:<pos:position pos:line="141" pos:column="17"/></default>
            <expr_stmt><expr><call><name pos:line="142" pos:column="13">debugs<pos:position pos:line="142" pos:column="19"/></name><argument_list pos:line="142" pos:column="19">(<argument><expr><literal type="number" pos:line="142" pos:column="20">29<pos:position pos:line="142" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="142" pos:column="24">3<pos:position pos:line="142" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="142" pos:column="27">"Unknown attribute '"<pos:position pos:line="142" pos:column="48"/></literal> <operator pos:line="142" pos:column="49">&lt;&lt;<pos:position pos:line="142" pos:column="57"/></operator> <name pos:line="142" pos:column="52">item<pos:position pos:line="142" pos:column="56"/></name> <operator pos:line="142" pos:column="57">&lt;&lt;<pos:position pos:line="142" pos:column="65"/></operator> <literal type="string" pos:line="142" pos:column="60">"' in '"<pos:position pos:line="142" pos:column="68"/></literal> <operator pos:line="142" pos:column="69">&lt;&lt;<pos:position pos:line="142" pos:column="77"/></operator> <name pos:line="142" pos:column="72">temp<pos:position pos:line="142" pos:column="76"/></name> <operator pos:line="142" pos:column="77">&lt;&lt;<pos:position pos:line="142" pos:column="85"/></operator> <literal type="string" pos:line="142" pos:column="80">"'"<pos:position pos:line="142" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="142" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="85"/></expr_stmt>
            <break pos:line="143" pos:column="13">break;<pos:position pos:line="143" pos:column="19"/></break>
        }<pos:position pos:line="144" pos:column="10"/></block></switch>
    }<pos:position pos:line="145" pos:column="6"/></block></while>

    <expr_stmt><expr><call><name><name pos:line="147" pos:column="5">temp<pos:position pos:line="147" pos:column="9"/></name><operator pos:line="147" pos:column="9">.<pos:position pos:line="147" pos:column="10"/></operator><name pos:line="147" pos:column="10">clean<pos:position pos:line="147" pos:column="15"/></name></name><argument_list pos:line="147" pos:column="15">()<pos:position pos:line="147" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="18"/></expr_stmt>

    <comment type="block" pos:line="149" pos:column="5">/* now we validate the data given to us */</comment>

    <comment type="block" pos:line="151" pos:column="5">/*
     * TODO: on invalid parameters we should return 400, not 407.
     * Find some clean way of doing this. perhaps return a valid
     * struct, and set the direction to clientwards combined with
     * a change to the clientwards handling code (ie let the
     * clientwards call set the error type (but limited to known
     * correct values - 400/401/407
     */</comment>

    <comment type="block" pos:line="160" pos:column="5">/* 2069 requirements */</comment>

    <comment type="line" pos:line="162" pos:column="5">// return value.</comment>
    <decl_stmt><decl><type><name><name pos:line="163" pos:column="5">Auth<pos:position pos:line="163" pos:column="9"/></name><operator pos:line="163" pos:column="9">::<pos:position pos:line="163" pos:column="11"/></operator><name pos:line="163" pos:column="11">UserRequest<pos:position pos:line="163" pos:column="22"/></name><operator pos:line="163" pos:column="22">::<pos:position pos:line="163" pos:column="24"/></operator><name pos:line="163" pos:column="24">Pointer<pos:position pos:line="163" pos:column="31"/></name></name></type> <name pos:line="163" pos:column="32">rv<pos:position pos:line="163" pos:column="34"/></name></decl>;<pos:position pos:line="163" pos:column="35"/></decl_stmt>
    <comment type="block" pos:line="164" pos:column="5">/* do we have a username ? */</comment>
    <if pos:line="165" pos:column="5">if <condition pos:line="165" pos:column="8">(<expr><operator pos:line="165" pos:column="9">!<pos:position pos:line="165" pos:column="10"/></operator><name pos:line="165" pos:column="10">username<pos:position pos:line="165" pos:column="18"/></name> <operator pos:line="165" pos:column="19">||<pos:position pos:line="165" pos:column="21"/></operator> <name><name pos:line="165" pos:column="22">username<pos:position pos:line="165" pos:column="30"/></name><index pos:line="165" pos:column="30">[<expr><literal type="number" pos:line="165" pos:column="31">0<pos:position pos:line="165" pos:column="32"/></literal></expr>]<pos:position pos:line="165" pos:column="33"/></index></name> <operator pos:line="165" pos:column="34">==<pos:position pos:line="165" pos:column="36"/></operator> <literal type="char" pos:line="165" pos:column="37">'\0'<pos:position pos:line="165" pos:column="41"/></literal></expr>)<pos:position pos:line="165" pos:column="42"/></condition><then pos:line="165" pos:column="42"> <block pos:line="165" pos:column="43">{
        <expr_stmt><expr><call><name pos:line="166" pos:column="9">debugs<pos:position pos:line="166" pos:column="15"/></name><argument_list pos:line="166" pos:column="15">(<argument><expr><literal type="number" pos:line="166" pos:column="16">29<pos:position pos:line="166" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="166" pos:column="20">2<pos:position pos:line="166" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="166" pos:column="23">"Empty or not present username"<pos:position pos:line="166" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="166" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="56"/></expr_stmt>
        <expr_stmt><expr><name pos:line="167" pos:column="9">rv<pos:position pos:line="167" pos:column="11"/></name> <operator pos:line="167" pos:column="12">=<pos:position pos:line="167" pos:column="13"/></operator> <call><name pos:line="167" pos:column="14">authDigestLogUsername<pos:position pos:line="167" pos:column="35"/></name><argument_list pos:line="167" pos:column="35">(<argument><expr><name pos:line="167" pos:column="36">username<pos:position pos:line="167" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="167" pos:column="46">digest_request<pos:position pos:line="167" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="167" pos:column="62">aRequestRealm<pos:position pos:line="167" pos:column="75"/></name></expr></argument>)<pos:position pos:line="167" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="167" pos:column="77"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="168" pos:column="9">safe_free<pos:position pos:line="168" pos:column="18"/></name><argument_list pos:line="168" pos:column="18">(<argument><expr><name pos:line="168" pos:column="19">username<pos:position pos:line="168" pos:column="27"/></name></expr></argument>)<pos:position pos:line="168" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="168" pos:column="29"/></expr_stmt>
        <return pos:line="169" pos:column="9">return <expr><name pos:line="169" pos:column="16">rv<pos:position pos:line="169" pos:column="18"/></name></expr>;<pos:position pos:line="169" pos:column="19"/></return>
    }<pos:position pos:line="170" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="172" pos:column="5">/* Sanity check of the username.
     * " can not be allowed in usernames until * the digest helper protocol
     * have been redone
     */</comment>
    <if pos:line="176" pos:column="5">if <condition pos:line="176" pos:column="8">(<expr><call><name pos:line="176" pos:column="9">strchr<pos:position pos:line="176" pos:column="15"/></name><argument_list pos:line="176" pos:column="15">(<argument><expr><name pos:line="176" pos:column="16">username<pos:position pos:line="176" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="176" pos:column="26">'"'<pos:position pos:line="176" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="176" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="176" pos:column="31"/></condition><then pos:line="176" pos:column="31"> <block pos:line="176" pos:column="32">{
        <expr_stmt><expr><call><name pos:line="177" pos:column="9">debugs<pos:position pos:line="177" pos:column="15"/></name><argument_list pos:line="177" pos:column="15">(<argument><expr><literal type="number" pos:line="177" pos:column="16">29<pos:position pos:line="177" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="177" pos:column="20">2<pos:position pos:line="177" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="177" pos:column="23">"Unacceptable username '"<pos:position pos:line="177" pos:column="48"/></literal> <operator pos:line="177" pos:column="49">&lt;&lt;<pos:position pos:line="177" pos:column="57"/></operator> <name pos:line="177" pos:column="52">username<pos:position pos:line="177" pos:column="60"/></name> <operator pos:line="177" pos:column="61">&lt;&lt;<pos:position pos:line="177" pos:column="69"/></operator> <literal type="string" pos:line="177" pos:column="64">"'"<pos:position pos:line="177" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="177" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="177" pos:column="69"/></expr_stmt>
        <expr_stmt><expr><name pos:line="178" pos:column="9">rv<pos:position pos:line="178" pos:column="11"/></name> <operator pos:line="178" pos:column="12">=<pos:position pos:line="178" pos:column="13"/></operator> <call><name pos:line="178" pos:column="14">authDigestLogUsername<pos:position pos:line="178" pos:column="35"/></name><argument_list pos:line="178" pos:column="35">(<argument><expr><name pos:line="178" pos:column="36">username<pos:position pos:line="178" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="178" pos:column="46">digest_request<pos:position pos:line="178" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="178" pos:column="62">aRequestRealm<pos:position pos:line="178" pos:column="75"/></name></expr></argument>)<pos:position pos:line="178" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="178" pos:column="77"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="179" pos:column="9">safe_free<pos:position pos:line="179" pos:column="18"/></name><argument_list pos:line="179" pos:column="18">(<argument><expr><name pos:line="179" pos:column="19">username<pos:position pos:line="179" pos:column="27"/></name></expr></argument>)<pos:position pos:line="179" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="179" pos:column="29"/></expr_stmt>
        <return pos:line="180" pos:column="9">return <expr><name pos:line="180" pos:column="16">rv<pos:position pos:line="180" pos:column="18"/></name></expr>;<pos:position pos:line="180" pos:column="19"/></return>
    }<pos:position pos:line="181" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="183" pos:column="5">/* do we have a realm ? */</comment>
    <if pos:line="184" pos:column="5">if <condition pos:line="184" pos:column="8">(<expr><operator pos:line="184" pos:column="9">!<pos:position pos:line="184" pos:column="10"/></operator><name><name pos:line="184" pos:column="10">digest_request<pos:position pos:line="184" pos:column="24"/></name><operator pos:line="184" pos:column="24">-&gt;<pos:position pos:line="184" pos:column="29"/></operator><name pos:line="184" pos:column="26">realm<pos:position pos:line="184" pos:column="31"/></name></name> <operator pos:line="184" pos:column="32">||<pos:position pos:line="184" pos:column="34"/></operator> <name><name pos:line="184" pos:column="35">digest_request<pos:position pos:line="184" pos:column="49"/></name><operator pos:line="184" pos:column="49">-&gt;<pos:position pos:line="184" pos:column="54"/></operator><name pos:line="184" pos:column="51">realm<pos:position pos:line="184" pos:column="56"/></name><index pos:line="184" pos:column="56">[<expr><literal type="number" pos:line="184" pos:column="57">0<pos:position pos:line="184" pos:column="58"/></literal></expr>]<pos:position pos:line="184" pos:column="59"/></index></name> <operator pos:line="184" pos:column="60">==<pos:position pos:line="184" pos:column="62"/></operator> <literal type="char" pos:line="184" pos:column="63">'\0'<pos:position pos:line="184" pos:column="67"/></literal></expr>)<pos:position pos:line="184" pos:column="68"/></condition><then pos:line="184" pos:column="68"> <block pos:line="184" pos:column="69">{
        <expr_stmt><expr><call><name pos:line="185" pos:column="9">debugs<pos:position pos:line="185" pos:column="15"/></name><argument_list pos:line="185" pos:column="15">(<argument><expr><literal type="number" pos:line="185" pos:column="16">29<pos:position pos:line="185" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="185" pos:column="20">2<pos:position pos:line="185" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="185" pos:column="23">"Empty or not present realm"<pos:position pos:line="185" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="185" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="185" pos:column="53"/></expr_stmt>
        <expr_stmt><expr><name pos:line="186" pos:column="9">rv<pos:position pos:line="186" pos:column="11"/></name> <operator pos:line="186" pos:column="12">=<pos:position pos:line="186" pos:column="13"/></operator> <call><name pos:line="186" pos:column="14">authDigestLogUsername<pos:position pos:line="186" pos:column="35"/></name><argument_list pos:line="186" pos:column="35">(<argument><expr><name pos:line="186" pos:column="36">username<pos:position pos:line="186" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="186" pos:column="46">digest_request<pos:position pos:line="186" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="186" pos:column="62">aRequestRealm<pos:position pos:line="186" pos:column="75"/></name></expr></argument>)<pos:position pos:line="186" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="186" pos:column="77"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="187" pos:column="9">safe_free<pos:position pos:line="187" pos:column="18"/></name><argument_list pos:line="187" pos:column="18">(<argument><expr><name pos:line="187" pos:column="19">username<pos:position pos:line="187" pos:column="27"/></name></expr></argument>)<pos:position pos:line="187" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="187" pos:column="29"/></expr_stmt>
        <return pos:line="188" pos:column="9">return <expr><name pos:line="188" pos:column="16">rv<pos:position pos:line="188" pos:column="18"/></name></expr>;<pos:position pos:line="188" pos:column="19"/></return>
    }<pos:position pos:line="189" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="191" pos:column="5">/* and a nonce? */</comment>
    <if pos:line="192" pos:column="5">if <condition pos:line="192" pos:column="8">(<expr><operator pos:line="192" pos:column="9">!<pos:position pos:line="192" pos:column="10"/></operator><name><name pos:line="192" pos:column="10">digest_request<pos:position pos:line="192" pos:column="24"/></name><operator pos:line="192" pos:column="24">-&gt;<pos:position pos:line="192" pos:column="29"/></operator><name pos:line="192" pos:column="26">nonceb64<pos:position pos:line="192" pos:column="34"/></name></name> <operator pos:line="192" pos:column="35">||<pos:position pos:line="192" pos:column="37"/></operator> <name><name pos:line="192" pos:column="38">digest_request<pos:position pos:line="192" pos:column="52"/></name><operator pos:line="192" pos:column="52">-&gt;<pos:position pos:line="192" pos:column="57"/></operator><name pos:line="192" pos:column="54">nonceb64<pos:position pos:line="192" pos:column="62"/></name><index pos:line="192" pos:column="62">[<expr><literal type="number" pos:line="192" pos:column="63">0<pos:position pos:line="192" pos:column="64"/></literal></expr>]<pos:position pos:line="192" pos:column="65"/></index></name> <operator pos:line="192" pos:column="66">==<pos:position pos:line="192" pos:column="68"/></operator> <literal type="char" pos:line="192" pos:column="69">'\0'<pos:position pos:line="192" pos:column="73"/></literal></expr>)<pos:position pos:line="192" pos:column="74"/></condition><then pos:line="192" pos:column="74"> <block pos:line="192" pos:column="75">{
        <expr_stmt><expr><call><name pos:line="193" pos:column="9">debugs<pos:position pos:line="193" pos:column="15"/></name><argument_list pos:line="193" pos:column="15">(<argument><expr><literal type="number" pos:line="193" pos:column="16">29<pos:position pos:line="193" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="193" pos:column="20">2<pos:position pos:line="193" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="193" pos:column="23">"Empty or not present nonce"<pos:position pos:line="193" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="193" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="193" pos:column="53"/></expr_stmt>
        <expr_stmt><expr><name pos:line="194" pos:column="9">rv<pos:position pos:line="194" pos:column="11"/></name> <operator pos:line="194" pos:column="12">=<pos:position pos:line="194" pos:column="13"/></operator> <call><name pos:line="194" pos:column="14">authDigestLogUsername<pos:position pos:line="194" pos:column="35"/></name><argument_list pos:line="194" pos:column="35">(<argument><expr><name pos:line="194" pos:column="36">username<pos:position pos:line="194" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="194" pos:column="46">digest_request<pos:position pos:line="194" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="194" pos:column="62">aRequestRealm<pos:position pos:line="194" pos:column="75"/></name></expr></argument>)<pos:position pos:line="194" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="194" pos:column="77"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="195" pos:column="9">safe_free<pos:position pos:line="195" pos:column="18"/></name><argument_list pos:line="195" pos:column="18">(<argument><expr><name pos:line="195" pos:column="19">username<pos:position pos:line="195" pos:column="27"/></name></expr></argument>)<pos:position pos:line="195" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="195" pos:column="29"/></expr_stmt>
        <return pos:line="196" pos:column="9">return <expr><name pos:line="196" pos:column="16">rv<pos:position pos:line="196" pos:column="18"/></name></expr>;<pos:position pos:line="196" pos:column="19"/></return>
    }<pos:position pos:line="197" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="199" pos:column="5">/* we can't check the URI just yet. We'll check it in the
     * authenticate phase, but needs to be given */</comment>
    <if pos:line="201" pos:column="5">if <condition pos:line="201" pos:column="8">(<expr><operator pos:line="201" pos:column="9">!<pos:position pos:line="201" pos:column="10"/></operator><name><name pos:line="201" pos:column="10">digest_request<pos:position pos:line="201" pos:column="24"/></name><operator pos:line="201" pos:column="24">-&gt;<pos:position pos:line="201" pos:column="29"/></operator><name pos:line="201" pos:column="26">uri<pos:position pos:line="201" pos:column="29"/></name></name> <operator pos:line="201" pos:column="30">||<pos:position pos:line="201" pos:column="32"/></operator> <name><name pos:line="201" pos:column="33">digest_request<pos:position pos:line="201" pos:column="47"/></name><operator pos:line="201" pos:column="47">-&gt;<pos:position pos:line="201" pos:column="52"/></operator><name pos:line="201" pos:column="49">uri<pos:position pos:line="201" pos:column="52"/></name><index pos:line="201" pos:column="52">[<expr><literal type="number" pos:line="201" pos:column="53">0<pos:position pos:line="201" pos:column="54"/></literal></expr>]<pos:position pos:line="201" pos:column="55"/></index></name> <operator pos:line="201" pos:column="56">==<pos:position pos:line="201" pos:column="58"/></operator> <literal type="char" pos:line="201" pos:column="59">'\0'<pos:position pos:line="201" pos:column="63"/></literal></expr>)<pos:position pos:line="201" pos:column="64"/></condition><then pos:line="201" pos:column="64"> <block pos:line="201" pos:column="65">{
        <expr_stmt><expr><call><name pos:line="202" pos:column="9">debugs<pos:position pos:line="202" pos:column="15"/></name><argument_list pos:line="202" pos:column="15">(<argument><expr><literal type="number" pos:line="202" pos:column="16">29<pos:position pos:line="202" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="202" pos:column="20">2<pos:position pos:line="202" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="202" pos:column="23">"Missing URI field"<pos:position pos:line="202" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="202" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="202" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><name pos:line="203" pos:column="9">rv<pos:position pos:line="203" pos:column="11"/></name> <operator pos:line="203" pos:column="12">=<pos:position pos:line="203" pos:column="13"/></operator> <call><name pos:line="203" pos:column="14">authDigestLogUsername<pos:position pos:line="203" pos:column="35"/></name><argument_list pos:line="203" pos:column="35">(<argument><expr><name pos:line="203" pos:column="36">username<pos:position pos:line="203" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="203" pos:column="46">digest_request<pos:position pos:line="203" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="203" pos:column="62">aRequestRealm<pos:position pos:line="203" pos:column="75"/></name></expr></argument>)<pos:position pos:line="203" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="203" pos:column="77"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="204" pos:column="9">safe_free<pos:position pos:line="204" pos:column="18"/></name><argument_list pos:line="204" pos:column="18">(<argument><expr><name pos:line="204" pos:column="19">username<pos:position pos:line="204" pos:column="27"/></name></expr></argument>)<pos:position pos:line="204" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="204" pos:column="29"/></expr_stmt>
        <return pos:line="205" pos:column="9">return <expr><name pos:line="205" pos:column="16">rv<pos:position pos:line="205" pos:column="18"/></name></expr>;<pos:position pos:line="205" pos:column="19"/></return>
    }<pos:position pos:line="206" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="208" pos:column="5">/* is the response the correct length? */</comment>
    <if pos:line="209" pos:column="5">if <condition pos:line="209" pos:column="8">(<expr><operator pos:line="209" pos:column="9">!<pos:position pos:line="209" pos:column="10"/></operator><name><name pos:line="209" pos:column="10">digest_request<pos:position pos:line="209" pos:column="24"/></name><operator pos:line="209" pos:column="24">-&gt;<pos:position pos:line="209" pos:column="29"/></operator><name pos:line="209" pos:column="26">response<pos:position pos:line="209" pos:column="34"/></name></name> <operator pos:line="209" pos:column="35">||<pos:position pos:line="209" pos:column="37"/></operator> <call><name pos:line="209" pos:column="38">strlen<pos:position pos:line="209" pos:column="44"/></name><argument_list pos:line="209" pos:column="44">(<argument><expr><name><name pos:line="209" pos:column="45">digest_request<pos:position pos:line="209" pos:column="59"/></name><operator pos:line="209" pos:column="59">-&gt;<pos:position pos:line="209" pos:column="64"/></operator><name pos:line="209" pos:column="61">response<pos:position pos:line="209" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="209" pos:column="70"/></argument_list></call> <operator pos:line="209" pos:column="71">!=<pos:position pos:line="209" pos:column="73"/></operator> <literal type="number" pos:line="209" pos:column="74">32<pos:position pos:line="209" pos:column="76"/></literal></expr>)<pos:position pos:line="209" pos:column="77"/></condition><then pos:line="209" pos:column="77"> <block pos:line="209" pos:column="78">{
        <expr_stmt><expr><call><name pos:line="210" pos:column="9">debugs<pos:position pos:line="210" pos:column="15"/></name><argument_list pos:line="210" pos:column="15">(<argument><expr><literal type="number" pos:line="210" pos:column="16">29<pos:position pos:line="210" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="210" pos:column="20">2<pos:position pos:line="210" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="210" pos:column="23">"Response length invalid"<pos:position pos:line="210" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="210" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="210" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><name pos:line="211" pos:column="9">rv<pos:position pos:line="211" pos:column="11"/></name> <operator pos:line="211" pos:column="12">=<pos:position pos:line="211" pos:column="13"/></operator> <call><name pos:line="211" pos:column="14">authDigestLogUsername<pos:position pos:line="211" pos:column="35"/></name><argument_list pos:line="211" pos:column="35">(<argument><expr><name pos:line="211" pos:column="36">username<pos:position pos:line="211" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="211" pos:column="46">digest_request<pos:position pos:line="211" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="211" pos:column="62">aRequestRealm<pos:position pos:line="211" pos:column="75"/></name></expr></argument>)<pos:position pos:line="211" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="211" pos:column="77"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="212" pos:column="9">safe_free<pos:position pos:line="212" pos:column="18"/></name><argument_list pos:line="212" pos:column="18">(<argument><expr><name pos:line="212" pos:column="19">username<pos:position pos:line="212" pos:column="27"/></name></expr></argument>)<pos:position pos:line="212" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="212" pos:column="29"/></expr_stmt>
        <return pos:line="213" pos:column="9">return <expr><name pos:line="213" pos:column="16">rv<pos:position pos:line="213" pos:column="18"/></name></expr>;<pos:position pos:line="213" pos:column="19"/></return>
    }<pos:position pos:line="214" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="216" pos:column="5">/* check the algorithm is present and supported */</comment>
    <if pos:line="217" pos:column="5">if <condition pos:line="217" pos:column="8">(<expr><operator pos:line="217" pos:column="9">!<pos:position pos:line="217" pos:column="10"/></operator><name><name pos:line="217" pos:column="10">digest_request<pos:position pos:line="217" pos:column="24"/></name><operator pos:line="217" pos:column="24">-&gt;<pos:position pos:line="217" pos:column="29"/></operator><name pos:line="217" pos:column="26">algorithm<pos:position pos:line="217" pos:column="35"/></name></name></expr>)<pos:position pos:line="217" pos:column="36"/></condition><then pos:line="217" pos:column="36">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="218" pos:column="9">digest_request<pos:position pos:line="218" pos:column="23"/></name><operator pos:line="218" pos:column="23">-&gt;<pos:position pos:line="218" pos:column="28"/></operator><name pos:line="218" pos:column="25">algorithm<pos:position pos:line="218" pos:column="34"/></name></name> <operator pos:line="218" pos:column="35">=<pos:position pos:line="218" pos:column="36"/></operator> <call><name pos:line="218" pos:column="37">xstrndup<pos:position pos:line="218" pos:column="45"/></name><argument_list pos:line="218" pos:column="45">(<argument><expr><literal type="string" pos:line="218" pos:column="46">"MD5"<pos:position pos:line="218" pos:column="51"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="218" pos:column="53">4<pos:position pos:line="218" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="218" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="218" pos:column="56"/></expr_stmt></block></then>
    <elseif pos:line="219" pos:column="5">else <if pos:line="219" pos:column="10">if <condition pos:line="219" pos:column="13">(<expr><call><name pos:line="219" pos:column="14">strcmp<pos:position pos:line="219" pos:column="20"/></name><argument_list pos:line="219" pos:column="20">(<argument><expr><name><name pos:line="219" pos:column="21">digest_request<pos:position pos:line="219" pos:column="35"/></name><operator pos:line="219" pos:column="35">-&gt;<pos:position pos:line="219" pos:column="40"/></operator><name pos:line="219" pos:column="37">algorithm<pos:position pos:line="219" pos:column="46"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="219" pos:column="48">"MD5"<pos:position pos:line="219" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="219" pos:column="54"/></argument_list></call>
             <operator pos:line="220" pos:column="14">&amp;&amp;<pos:position pos:line="220" pos:column="24"/></operator> <call><name pos:line="220" pos:column="17">strcmp<pos:position pos:line="220" pos:column="23"/></name><argument_list pos:line="220" pos:column="23">(<argument><expr><name><name pos:line="220" pos:column="24">digest_request<pos:position pos:line="220" pos:column="38"/></name><operator pos:line="220" pos:column="38">-&gt;<pos:position pos:line="220" pos:column="43"/></operator><name pos:line="220" pos:column="40">algorithm<pos:position pos:line="220" pos:column="49"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="220" pos:column="51">"MD5-sess"<pos:position pos:line="220" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="220" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="220" pos:column="63"/></condition><then pos:line="220" pos:column="63"> <block pos:line="220" pos:column="64">{
        <expr_stmt><expr><call><name pos:line="221" pos:column="9">debugs<pos:position pos:line="221" pos:column="15"/></name><argument_list pos:line="221" pos:column="15">(<argument><expr><literal type="number" pos:line="221" pos:column="16">29<pos:position pos:line="221" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="221" pos:column="20">2<pos:position pos:line="221" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="221" pos:column="23">"invalid algorithm specified!"<pos:position pos:line="221" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="221" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="221" pos:column="55"/></expr_stmt>
        <expr_stmt><expr><name pos:line="222" pos:column="9">rv<pos:position pos:line="222" pos:column="11"/></name> <operator pos:line="222" pos:column="12">=<pos:position pos:line="222" pos:column="13"/></operator> <call><name pos:line="222" pos:column="14">authDigestLogUsername<pos:position pos:line="222" pos:column="35"/></name><argument_list pos:line="222" pos:column="35">(<argument><expr><name pos:line="222" pos:column="36">username<pos:position pos:line="222" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="222" pos:column="46">digest_request<pos:position pos:line="222" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="222" pos:column="62">aRequestRealm<pos:position pos:line="222" pos:column="75"/></name></expr></argument>)<pos:position pos:line="222" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="222" pos:column="77"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="223" pos:column="9">safe_free<pos:position pos:line="223" pos:column="18"/></name><argument_list pos:line="223" pos:column="18">(<argument><expr><name pos:line="223" pos:column="19">username<pos:position pos:line="223" pos:column="27"/></name></expr></argument>)<pos:position pos:line="223" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="223" pos:column="29"/></expr_stmt>
        <return pos:line="224" pos:column="9">return <expr><name pos:line="224" pos:column="16">rv<pos:position pos:line="224" pos:column="18"/></name></expr>;<pos:position pos:line="224" pos:column="19"/></return>
    }<pos:position pos:line="225" pos:column="6"/></block></then></if></elseif></if>

    <comment type="block" pos:line="227" pos:column="5">/* 2617 requirements, indicated by qop */</comment>
    <if pos:line="228" pos:column="5">if <condition pos:line="228" pos:column="8">(<expr><name><name pos:line="228" pos:column="9">digest_request<pos:position pos:line="228" pos:column="23"/></name><operator pos:line="228" pos:column="23">-&gt;<pos:position pos:line="228" pos:column="28"/></operator><name pos:line="228" pos:column="25">qop<pos:position pos:line="228" pos:column="28"/></name></name></expr>)<pos:position pos:line="228" pos:column="29"/></condition><then pos:line="228" pos:column="29"> <block pos:line="228" pos:column="30">{

        <comment type="block" pos:line="230" pos:column="9">/* check the qop is what we expected. */</comment>
        <if pos:line="231" pos:column="9">if <condition pos:line="231" pos:column="12">(<expr><call><name pos:line="231" pos:column="13">strcmp<pos:position pos:line="231" pos:column="19"/></name><argument_list pos:line="231" pos:column="19">(<argument><expr><name><name pos:line="231" pos:column="20">digest_request<pos:position pos:line="231" pos:column="34"/></name><operator pos:line="231" pos:column="34">-&gt;<pos:position pos:line="231" pos:column="39"/></operator><name pos:line="231" pos:column="36">qop<pos:position pos:line="231" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="231" pos:column="41">QOP_AUTH<pos:position pos:line="231" pos:column="49"/></name></expr></argument>)<pos:position pos:line="231" pos:column="50"/></argument_list></call> <operator pos:line="231" pos:column="51">!=<pos:position pos:line="231" pos:column="53"/></operator> <literal type="number" pos:line="231" pos:column="54">0<pos:position pos:line="231" pos:column="55"/></literal></expr>)<pos:position pos:line="231" pos:column="56"/></condition><then pos:line="231" pos:column="56"> <block pos:line="231" pos:column="57">{
            <comment type="block" pos:line="232" pos:column="13">/* we received a qop option we didn't send */</comment>
            <expr_stmt><expr><call><name pos:line="233" pos:column="13">debugs<pos:position pos:line="233" pos:column="19"/></name><argument_list pos:line="233" pos:column="19">(<argument><expr><literal type="number" pos:line="233" pos:column="20">29<pos:position pos:line="233" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="233" pos:column="24">2<pos:position pos:line="233" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="233" pos:column="27">"Invalid qop option received"<pos:position pos:line="233" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="233" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="233" pos:column="58"/></expr_stmt>
            <expr_stmt><expr><name pos:line="234" pos:column="13">rv<pos:position pos:line="234" pos:column="15"/></name> <operator pos:line="234" pos:column="16">=<pos:position pos:line="234" pos:column="17"/></operator> <call><name pos:line="234" pos:column="18">authDigestLogUsername<pos:position pos:line="234" pos:column="39"/></name><argument_list pos:line="234" pos:column="39">(<argument><expr><name pos:line="234" pos:column="40">username<pos:position pos:line="234" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="234" pos:column="50">digest_request<pos:position pos:line="234" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="234" pos:column="66">aRequestRealm<pos:position pos:line="234" pos:column="79"/></name></expr></argument>)<pos:position pos:line="234" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="234" pos:column="81"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="235" pos:column="13">safe_free<pos:position pos:line="235" pos:column="22"/></name><argument_list pos:line="235" pos:column="22">(<argument><expr><name pos:line="235" pos:column="23">username<pos:position pos:line="235" pos:column="31"/></name></expr></argument>)<pos:position pos:line="235" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="235" pos:column="33"/></expr_stmt>
            <return pos:line="236" pos:column="13">return <expr><name pos:line="236" pos:column="20">rv<pos:position pos:line="236" pos:column="22"/></name></expr>;<pos:position pos:line="236" pos:column="23"/></return>
        }<pos:position pos:line="237" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="239" pos:column="9">/* check cnonce */</comment>
        <if pos:line="240" pos:column="9">if <condition pos:line="240" pos:column="12">(<expr><operator pos:line="240" pos:column="13">!<pos:position pos:line="240" pos:column="14"/></operator><name><name pos:line="240" pos:column="14">digest_request<pos:position pos:line="240" pos:column="28"/></name><operator pos:line="240" pos:column="28">-&gt;<pos:position pos:line="240" pos:column="33"/></operator><name pos:line="240" pos:column="30">cnonce<pos:position pos:line="240" pos:column="36"/></name></name> <operator pos:line="240" pos:column="37">||<pos:position pos:line="240" pos:column="39"/></operator> <name><name pos:line="240" pos:column="40">digest_request<pos:position pos:line="240" pos:column="54"/></name><operator pos:line="240" pos:column="54">-&gt;<pos:position pos:line="240" pos:column="59"/></operator><name pos:line="240" pos:column="56">cnonce<pos:position pos:line="240" pos:column="62"/></name><index pos:line="240" pos:column="62">[<expr><literal type="number" pos:line="240" pos:column="63">0<pos:position pos:line="240" pos:column="64"/></literal></expr>]<pos:position pos:line="240" pos:column="65"/></index></name> <operator pos:line="240" pos:column="66">==<pos:position pos:line="240" pos:column="68"/></operator> <literal type="char" pos:line="240" pos:column="69">'\0'<pos:position pos:line="240" pos:column="73"/></literal></expr>)<pos:position pos:line="240" pos:column="74"/></condition><then pos:line="240" pos:column="74"> <block pos:line="240" pos:column="75">{
            <expr_stmt><expr><call><name pos:line="241" pos:column="13">debugs<pos:position pos:line="241" pos:column="19"/></name><argument_list pos:line="241" pos:column="19">(<argument><expr><literal type="number" pos:line="241" pos:column="20">29<pos:position pos:line="241" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="241" pos:column="24">2<pos:position pos:line="241" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="241" pos:column="27">"Missing cnonce field"<pos:position pos:line="241" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="241" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="241" pos:column="51"/></expr_stmt>
            <expr_stmt><expr><name pos:line="242" pos:column="13">rv<pos:position pos:line="242" pos:column="15"/></name> <operator pos:line="242" pos:column="16">=<pos:position pos:line="242" pos:column="17"/></operator> <call><name pos:line="242" pos:column="18">authDigestLogUsername<pos:position pos:line="242" pos:column="39"/></name><argument_list pos:line="242" pos:column="39">(<argument><expr><name pos:line="242" pos:column="40">username<pos:position pos:line="242" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="242" pos:column="50">digest_request<pos:position pos:line="242" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="242" pos:column="66">aRequestRealm<pos:position pos:line="242" pos:column="79"/></name></expr></argument>)<pos:position pos:line="242" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="242" pos:column="81"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="243" pos:column="13">safe_free<pos:position pos:line="243" pos:column="22"/></name><argument_list pos:line="243" pos:column="22">(<argument><expr><name pos:line="243" pos:column="23">username<pos:position pos:line="243" pos:column="31"/></name></expr></argument>)<pos:position pos:line="243" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="243" pos:column="33"/></expr_stmt>
            <return pos:line="244" pos:column="13">return <expr><name pos:line="244" pos:column="20">rv<pos:position pos:line="244" pos:column="22"/></name></expr>;<pos:position pos:line="244" pos:column="23"/></return>
        }<pos:position pos:line="245" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="247" pos:column="9">/* check nc */</comment>
        <if pos:line="248" pos:column="9">if <condition pos:line="248" pos:column="12">(<expr><call><name pos:line="248" pos:column="13">strlen<pos:position pos:line="248" pos:column="19"/></name><argument_list pos:line="248" pos:column="19">(<argument><expr><name><name pos:line="248" pos:column="20">digest_request<pos:position pos:line="248" pos:column="34"/></name><operator pos:line="248" pos:column="34">-&gt;<pos:position pos:line="248" pos:column="39"/></operator><name pos:line="248" pos:column="36">nc<pos:position pos:line="248" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="248" pos:column="39"/></argument_list></call> <operator pos:line="248" pos:column="40">!=<pos:position pos:line="248" pos:column="42"/></operator> <literal type="number" pos:line="248" pos:column="43">8<pos:position pos:line="248" pos:column="44"/></literal> <operator pos:line="248" pos:column="45">||<pos:position pos:line="248" pos:column="47"/></operator> <call><name pos:line="248" pos:column="48">strspn<pos:position pos:line="248" pos:column="54"/></name><argument_list pos:line="248" pos:column="54">(<argument><expr><name><name pos:line="248" pos:column="55">digest_request<pos:position pos:line="248" pos:column="69"/></name><operator pos:line="248" pos:column="69">-&gt;<pos:position pos:line="248" pos:column="74"/></operator><name pos:line="248" pos:column="71">nc<pos:position pos:line="248" pos:column="73"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="248" pos:column="75">"0123456789abcdefABCDEF"<pos:position pos:line="248" pos:column="99"/></literal></expr></argument>)<pos:position pos:line="248" pos:column="100"/></argument_list></call> <operator pos:line="248" pos:column="101">!=<pos:position pos:line="248" pos:column="103"/></operator> <literal type="number" pos:line="248" pos:column="104">8<pos:position pos:line="248" pos:column="105"/></literal></expr>)<pos:position pos:line="248" pos:column="106"/></condition><then pos:line="248" pos:column="106"> <block pos:line="248" pos:column="107">{
            <expr_stmt><expr><call><name pos:line="249" pos:column="13">debugs<pos:position pos:line="249" pos:column="19"/></name><argument_list pos:line="249" pos:column="19">(<argument><expr><literal type="number" pos:line="249" pos:column="20">29<pos:position pos:line="249" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="249" pos:column="24">2<pos:position pos:line="249" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="249" pos:column="27">"invalid nonce count"<pos:position pos:line="249" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="249" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="249" pos:column="50"/></expr_stmt>
            <expr_stmt><expr><name pos:line="250" pos:column="13">rv<pos:position pos:line="250" pos:column="15"/></name> <operator pos:line="250" pos:column="16">=<pos:position pos:line="250" pos:column="17"/></operator> <call><name pos:line="250" pos:column="18">authDigestLogUsername<pos:position pos:line="250" pos:column="39"/></name><argument_list pos:line="250" pos:column="39">(<argument><expr><name pos:line="250" pos:column="40">username<pos:position pos:line="250" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="250" pos:column="50">digest_request<pos:position pos:line="250" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="250" pos:column="66">aRequestRealm<pos:position pos:line="250" pos:column="79"/></name></expr></argument>)<pos:position pos:line="250" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="250" pos:column="81"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="251" pos:column="13">safe_free<pos:position pos:line="251" pos:column="22"/></name><argument_list pos:line="251" pos:column="22">(<argument><expr><name pos:line="251" pos:column="23">username<pos:position pos:line="251" pos:column="31"/></name></expr></argument>)<pos:position pos:line="251" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="251" pos:column="33"/></expr_stmt>
            <return pos:line="252" pos:column="13">return <expr><name pos:line="252" pos:column="20">rv<pos:position pos:line="252" pos:column="22"/></name></expr>;<pos:position pos:line="252" pos:column="23"/></return>
        }<pos:position pos:line="253" pos:column="10"/></block></then></if>
    }<pos:position pos:line="254" pos:column="6"/></block></then> <else pos:line="254" pos:column="7">else <block pos:line="254" pos:column="12">{
        <comment type="block" pos:line="255" pos:column="9">/* cnonce and nc both require qop */</comment>
        <if pos:line="256" pos:column="9">if <condition pos:line="256" pos:column="12">(<expr><name><name pos:line="256" pos:column="13">digest_request<pos:position pos:line="256" pos:column="27"/></name><operator pos:line="256" pos:column="27">-&gt;<pos:position pos:line="256" pos:column="32"/></operator><name pos:line="256" pos:column="29">cnonce<pos:position pos:line="256" pos:column="35"/></name></name> <operator pos:line="256" pos:column="36">||<pos:position pos:line="256" pos:column="38"/></operator> <name><name pos:line="256" pos:column="39">digest_request<pos:position pos:line="256" pos:column="53"/></name><operator pos:line="256" pos:column="53">-&gt;<pos:position pos:line="256" pos:column="58"/></operator><name pos:line="256" pos:column="55">nc<pos:position pos:line="256" pos:column="57"/></name><index pos:line="256" pos:column="57">[<expr><literal type="number" pos:line="256" pos:column="58">0<pos:position pos:line="256" pos:column="59"/></literal></expr>]<pos:position pos:line="256" pos:column="60"/></index></name> <operator pos:line="256" pos:column="61">!=<pos:position pos:line="256" pos:column="63"/></operator> <literal type="char" pos:line="256" pos:column="64">'\0'<pos:position pos:line="256" pos:column="68"/></literal></expr>)<pos:position pos:line="256" pos:column="69"/></condition><then pos:line="256" pos:column="69"> <block pos:line="256" pos:column="70">{
            <expr_stmt><expr><call><name pos:line="257" pos:column="13">debugs<pos:position pos:line="257" pos:column="19"/></name><argument_list pos:line="257" pos:column="19">(<argument><expr><literal type="number" pos:line="257" pos:column="20">29<pos:position pos:line="257" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="257" pos:column="24">2<pos:position pos:line="257" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="257" pos:column="27">"missing qop!"<pos:position pos:line="257" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="257" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="257" pos:column="43"/></expr_stmt>
            <expr_stmt><expr><name pos:line="258" pos:column="13">rv<pos:position pos:line="258" pos:column="15"/></name> <operator pos:line="258" pos:column="16">=<pos:position pos:line="258" pos:column="17"/></operator> <call><name pos:line="258" pos:column="18">authDigestLogUsername<pos:position pos:line="258" pos:column="39"/></name><argument_list pos:line="258" pos:column="39">(<argument><expr><name pos:line="258" pos:column="40">username<pos:position pos:line="258" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="258" pos:column="50">digest_request<pos:position pos:line="258" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="258" pos:column="66">aRequestRealm<pos:position pos:line="258" pos:column="79"/></name></expr></argument>)<pos:position pos:line="258" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="258" pos:column="81"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="259" pos:column="13">safe_free<pos:position pos:line="259" pos:column="22"/></name><argument_list pos:line="259" pos:column="22">(<argument><expr><name pos:line="259" pos:column="23">username<pos:position pos:line="259" pos:column="31"/></name></expr></argument>)<pos:position pos:line="259" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="259" pos:column="33"/></expr_stmt>
            <return pos:line="260" pos:column="13">return <expr><name pos:line="260" pos:column="20">rv<pos:position pos:line="260" pos:column="22"/></name></expr>;<pos:position pos:line="260" pos:column="23"/></return>
        }<pos:position pos:line="261" pos:column="10"/></block></then></if>
    }<pos:position pos:line="262" pos:column="6"/></block></else></if>

    <comment type="block" format="doxygen" pos:line="264" pos:column="5">/** below nonce state dependent **/</comment>

    <comment type="block" pos:line="266" pos:column="5">/* now the nonce */</comment>
    <expr_stmt><expr><name pos:line="267" pos:column="5">nonce<pos:position pos:line="267" pos:column="10"/></name> <operator pos:line="267" pos:column="11">=<pos:position pos:line="267" pos:column="12"/></operator> <call><name pos:line="267" pos:column="13">authenticateDigestNonceFindNonce<pos:position pos:line="267" pos:column="45"/></name><argument_list pos:line="267" pos:column="45">(<argument><expr><name><name pos:line="267" pos:column="46">digest_request<pos:position pos:line="267" pos:column="60"/></name><operator pos:line="267" pos:column="60">-&gt;<pos:position pos:line="267" pos:column="65"/></operator><name pos:line="267" pos:column="62">nonceb64<pos:position pos:line="267" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="267" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="267" pos:column="72"/></expr_stmt>
    <comment type="block" pos:line="268" pos:column="5">/* check that we're not being hacked / the username hasn't changed */</comment>
    <if pos:line="269" pos:column="5">if <condition pos:line="269" pos:column="8">(<expr><name pos:line="269" pos:column="9">nonce<pos:position pos:line="269" pos:column="14"/></name> <operator pos:line="269" pos:column="15">&amp;&amp;<pos:position pos:line="269" pos:column="25"/></operator> <name><name pos:line="269" pos:column="18">nonce<pos:position pos:line="269" pos:column="23"/></name><operator pos:line="269" pos:column="23">-&gt;<pos:position pos:line="269" pos:column="28"/></operator><name pos:line="269" pos:column="25">user<pos:position pos:line="269" pos:column="29"/></name></name> <operator pos:line="269" pos:column="30">&amp;&amp;<pos:position pos:line="269" pos:column="40"/></operator> <call><name pos:line="269" pos:column="33">strcmp<pos:position pos:line="269" pos:column="39"/></name><argument_list pos:line="269" pos:column="39">(<argument><expr><name pos:line="269" pos:column="40">username<pos:position pos:line="269" pos:column="48"/></name></expr></argument>, <argument><expr><call><name><name pos:line="269" pos:column="50">nonce<pos:position pos:line="269" pos:column="55"/></name><operator pos:line="269" pos:column="55">-&gt;<pos:position pos:line="269" pos:column="60"/></operator><name pos:line="269" pos:column="57">user<pos:position pos:line="269" pos:column="61"/></name><operator pos:line="269" pos:column="61">-&gt;<pos:position pos:line="269" pos:column="66"/></operator><name pos:line="269" pos:column="63">username<pos:position pos:line="269" pos:column="71"/></name></name><argument_list pos:line="269" pos:column="71">()<pos:position pos:line="269" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="269" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="269" pos:column="75"/></condition><then pos:line="269" pos:column="75"> <block pos:line="269" pos:column="76">{
        <expr_stmt><expr><call><name pos:line="270" pos:column="9">debugs<pos:position pos:line="270" pos:column="15"/></name><argument_list pos:line="270" pos:column="15">(<argument><expr><literal type="number" pos:line="270" pos:column="16">29<pos:position pos:line="270" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="270" pos:column="20">2<pos:position pos:line="270" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="270" pos:column="23">"Username for the nonce does not equal the username for the request"<pos:position pos:line="270" pos:column="91"/></literal></expr></argument>)<pos:position pos:line="270" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="270" pos:column="93"/></expr_stmt>
        <expr_stmt><expr><name pos:line="271" pos:column="9">nonce<pos:position pos:line="271" pos:column="14"/></name> <operator pos:line="271" pos:column="15">=<pos:position pos:line="271" pos:column="16"/></operator> <name pos:line="271" pos:column="17">NULL<pos:position pos:line="271" pos:column="21"/></name></expr>;<pos:position pos:line="271" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="272" pos:column="6"/></block></then></if>

    <if pos:line="274" pos:column="5">if <condition pos:line="274" pos:column="8">(<expr><operator pos:line="274" pos:column="9">!<pos:position pos:line="274" pos:column="10"/></operator><name pos:line="274" pos:column="10">nonce<pos:position pos:line="274" pos:column="15"/></name></expr>)<pos:position pos:line="274" pos:column="16"/></condition><then pos:line="274" pos:column="16"> <block pos:line="274" pos:column="17">{
        <comment type="block" pos:line="275" pos:column="9">/* we couldn't find a matching nonce! */</comment>
        <expr_stmt><expr><call><name pos:line="276" pos:column="9">debugs<pos:position pos:line="276" pos:column="15"/></name><argument_list pos:line="276" pos:column="15">(<argument><expr><literal type="number" pos:line="276" pos:column="16">29<pos:position pos:line="276" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="276" pos:column="20">2<pos:position pos:line="276" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="276" pos:column="23">"Unexpected or invalid nonce received from "<pos:position pos:line="276" pos:column="67"/></literal> <operator pos:line="276" pos:column="68">&lt;&lt;<pos:position pos:line="276" pos:column="76"/></operator> <name pos:line="276" pos:column="71">username<pos:position pos:line="276" pos:column="79"/></name></expr></argument>)<pos:position pos:line="276" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="276" pos:column="81"/></expr_stmt>
        <decl_stmt><decl><type><name><name pos:line="277" pos:column="9">Auth<pos:position pos:line="277" pos:column="13"/></name><operator pos:line="277" pos:column="13">::<pos:position pos:line="277" pos:column="15"/></operator><name pos:line="277" pos:column="15">UserRequest<pos:position pos:line="277" pos:column="26"/></name><operator pos:line="277" pos:column="26">::<pos:position pos:line="277" pos:column="28"/></operator><name pos:line="277" pos:column="28">Pointer<pos:position pos:line="277" pos:column="35"/></name></name></type> <name pos:line="277" pos:column="36">auth_request<pos:position pos:line="277" pos:column="48"/></name> <init pos:line="277" pos:column="49">= <expr><call><name pos:line="277" pos:column="51">authDigestLogUsername<pos:position pos:line="277" pos:column="72"/></name><argument_list pos:line="277" pos:column="72">(<argument><expr><name pos:line="277" pos:column="73">username<pos:position pos:line="277" pos:column="81"/></name></expr></argument>, <argument><expr><name pos:line="277" pos:column="83">digest_request<pos:position pos:line="277" pos:column="97"/></name></expr></argument>, <argument><expr><name pos:line="277" pos:column="99">aRequestRealm<pos:position pos:line="277" pos:column="112"/></name></expr></argument>)<pos:position pos:line="277" pos:column="113"/></argument_list></call></expr></init></decl>;<pos:position pos:line="277" pos:column="114"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="278" pos:column="9">auth_request<pos:position pos:line="278" pos:column="21"/></name><operator pos:line="278" pos:column="21">-&gt;<pos:position pos:line="278" pos:column="26"/></operator><name pos:line="278" pos:column="23">user<pos:position pos:line="278" pos:column="27"/></name></name><argument_list pos:line="278" pos:column="27">()<pos:position pos:line="278" pos:column="29"/></argument_list></call><operator pos:line="278" pos:column="29">-&gt;<pos:position pos:line="278" pos:column="34"/></operator><call><name pos:line="278" pos:column="31">credentials<pos:position pos:line="278" pos:column="42"/></name><argument_list pos:line="278" pos:column="42">(<argument><expr><name><name pos:line="278" pos:column="43">Auth<pos:position pos:line="278" pos:column="47"/></name><operator pos:line="278" pos:column="47">::<pos:position pos:line="278" pos:column="49"/></operator><name pos:line="278" pos:column="49">Handshake<pos:position pos:line="278" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="278" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="278" pos:column="60"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="279" pos:column="9">safe_free<pos:position pos:line="279" pos:column="18"/></name><argument_list pos:line="279" pos:column="18">(<argument><expr><name pos:line="279" pos:column="19">username<pos:position pos:line="279" pos:column="27"/></name></expr></argument>)<pos:position pos:line="279" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="279" pos:column="29"/></expr_stmt>
        <return pos:line="280" pos:column="9">return <expr><name pos:line="280" pos:column="16">auth_request<pos:position pos:line="280" pos:column="28"/></name></expr>;<pos:position pos:line="280" pos:column="29"/></return>
    }<pos:position pos:line="281" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="283" pos:column="5">digest_request<pos:position pos:line="283" pos:column="19"/></name><operator pos:line="283" pos:column="19">-&gt;<pos:position pos:line="283" pos:column="24"/></operator><name pos:line="283" pos:column="21">nonce<pos:position pos:line="283" pos:column="26"/></name></name> <operator pos:line="283" pos:column="27">=<pos:position pos:line="283" pos:column="28"/></operator> <name pos:line="283" pos:column="29">nonce<pos:position pos:line="283" pos:column="34"/></name></expr>;<pos:position pos:line="283" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="284" pos:column="5">authDigestNonceLink<pos:position pos:line="284" pos:column="24"/></name><argument_list pos:line="284" pos:column="24">(<argument><expr><name pos:line="284" pos:column="25">nonce<pos:position pos:line="284" pos:column="30"/></name></expr></argument>)<pos:position pos:line="284" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="284" pos:column="32"/></expr_stmt>

    <comment type="block" pos:line="286" pos:column="5">/* check that we're not being hacked / the username hasn't changed */</comment>
    <if pos:line="287" pos:column="5">if <condition pos:line="287" pos:column="8">(<expr><name><name pos:line="287" pos:column="9">nonce<pos:position pos:line="287" pos:column="14"/></name><operator pos:line="287" pos:column="14">-&gt;<pos:position pos:line="287" pos:column="19"/></operator><name pos:line="287" pos:column="16">user<pos:position pos:line="287" pos:column="20"/></name></name> <operator pos:line="287" pos:column="21">&amp;&amp;<pos:position pos:line="287" pos:column="31"/></operator> <call><name pos:line="287" pos:column="24">strcmp<pos:position pos:line="287" pos:column="30"/></name><argument_list pos:line="287" pos:column="30">(<argument><expr><name pos:line="287" pos:column="31">username<pos:position pos:line="287" pos:column="39"/></name></expr></argument>, <argument><expr><call><name><name pos:line="287" pos:column="41">nonce<pos:position pos:line="287" pos:column="46"/></name><operator pos:line="287" pos:column="46">-&gt;<pos:position pos:line="287" pos:column="51"/></operator><name pos:line="287" pos:column="48">user<pos:position pos:line="287" pos:column="52"/></name><operator pos:line="287" pos:column="52">-&gt;<pos:position pos:line="287" pos:column="57"/></operator><name pos:line="287" pos:column="54">username<pos:position pos:line="287" pos:column="62"/></name></name><argument_list pos:line="287" pos:column="62">()<pos:position pos:line="287" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="287" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="287" pos:column="66"/></condition><then pos:line="287" pos:column="66"> <block pos:line="287" pos:column="67">{
        <expr_stmt><expr><call><name pos:line="288" pos:column="9">debugs<pos:position pos:line="288" pos:column="15"/></name><argument_list pos:line="288" pos:column="15">(<argument><expr><literal type="number" pos:line="288" pos:column="16">29<pos:position pos:line="288" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="288" pos:column="20">2<pos:position pos:line="288" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="288" pos:column="23">"Username for the nonce does not equal the username for the request"<pos:position pos:line="288" pos:column="91"/></literal></expr></argument>)<pos:position pos:line="288" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="288" pos:column="93"/></expr_stmt>
        <expr_stmt><expr><name pos:line="289" pos:column="9">rv<pos:position pos:line="289" pos:column="11"/></name> <operator pos:line="289" pos:column="12">=<pos:position pos:line="289" pos:column="13"/></operator> <call><name pos:line="289" pos:column="14">authDigestLogUsername<pos:position pos:line="289" pos:column="35"/></name><argument_list pos:line="289" pos:column="35">(<argument><expr><name pos:line="289" pos:column="36">username<pos:position pos:line="289" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="289" pos:column="46">digest_request<pos:position pos:line="289" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="289" pos:column="62">aRequestRealm<pos:position pos:line="289" pos:column="75"/></name></expr></argument>)<pos:position pos:line="289" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="289" pos:column="77"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="290" pos:column="9">safe_free<pos:position pos:line="290" pos:column="18"/></name><argument_list pos:line="290" pos:column="18">(<argument><expr><name pos:line="290" pos:column="19">username<pos:position pos:line="290" pos:column="27"/></name></expr></argument>)<pos:position pos:line="290" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="290" pos:column="29"/></expr_stmt>
        <return pos:line="291" pos:column="9">return <expr><name pos:line="291" pos:column="16">rv<pos:position pos:line="291" pos:column="18"/></name></expr>;<pos:position pos:line="291" pos:column="19"/></return>
    }<pos:position pos:line="292" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="294" pos:column="5">/* the method we'll check at the authenticate step as well */</comment>

    <comment type="block" pos:line="296" pos:column="5">/* we don't send or parse opaques. Ok so we're flexable ... */</comment>

    <comment type="block" pos:line="298" pos:column="5">/* find the user */</comment>
    <decl_stmt><decl><type><name><name pos:line="299" pos:column="5">Auth<pos:position pos:line="299" pos:column="9"/></name><operator pos:line="299" pos:column="9">::<pos:position pos:line="299" pos:column="11"/></operator><name pos:line="299" pos:column="11">Digest<pos:position pos:line="299" pos:column="17"/></name><operator pos:line="299" pos:column="17">::<pos:position pos:line="299" pos:column="19"/></operator><name pos:line="299" pos:column="19">User<pos:position pos:line="299" pos:column="23"/></name></name> <modifier pos:line="299" pos:column="24">*<pos:position pos:line="299" pos:column="25"/></modifier></type><name pos:line="299" pos:column="25">digest_user<pos:position pos:line="299" pos:column="36"/></name></decl>;<pos:position pos:line="299" pos:column="37"/></decl_stmt>

    <decl_stmt><decl><type><name><name pos:line="301" pos:column="5">Auth<pos:position pos:line="301" pos:column="9"/></name><operator pos:line="301" pos:column="9">::<pos:position pos:line="301" pos:column="11"/></operator><name pos:line="301" pos:column="11">User<pos:position pos:line="301" pos:column="15"/></name><operator pos:line="301" pos:column="15">::<pos:position pos:line="301" pos:column="17"/></operator><name pos:line="301" pos:column="17">Pointer<pos:position pos:line="301" pos:column="24"/></name></name></type> <name pos:line="301" pos:column="25">auth_user<pos:position pos:line="301" pos:column="34"/></name></decl>;<pos:position pos:line="301" pos:column="35"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="303" pos:column="5">SBuf<pos:position pos:line="303" pos:column="9"/></name></type> <name pos:line="303" pos:column="10">key<pos:position pos:line="303" pos:column="13"/></name> <init pos:line="303" pos:column="14">= <expr><call><name><name pos:line="303" pos:column="16">Auth<pos:position pos:line="303" pos:column="20"/></name><operator pos:line="303" pos:column="20">::<pos:position pos:line="303" pos:column="22"/></operator><name pos:line="303" pos:column="22">User<pos:position pos:line="303" pos:column="26"/></name><operator pos:line="303" pos:column="26">::<pos:position pos:line="303" pos:column="28"/></operator><name pos:line="303" pos:column="28">BuildUserKey<pos:position pos:line="303" pos:column="40"/></name></name><argument_list pos:line="303" pos:column="40">(<argument><expr><name pos:line="303" pos:column="41">username<pos:position pos:line="303" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="303" pos:column="51">aRequestRealm<pos:position pos:line="303" pos:column="64"/></name></expr></argument>)<pos:position pos:line="303" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="303" pos:column="66"/></decl_stmt>
    <if pos:line="304" pos:column="5">if <condition pos:line="304" pos:column="8">(<expr><call><name><name pos:line="304" pos:column="9">key<pos:position pos:line="304" pos:column="12"/></name><operator pos:line="304" pos:column="12">.<pos:position pos:line="304" pos:column="13"/></operator><name pos:line="304" pos:column="13">isEmpty<pos:position pos:line="304" pos:column="20"/></name></name><argument_list pos:line="304" pos:column="20">()<pos:position pos:line="304" pos:column="22"/></argument_list></call> <operator pos:line="304" pos:column="23">||<pos:position pos:line="304" pos:column="25"/></operator> <operator pos:line="304" pos:column="26">(<pos:position pos:line="304" pos:column="27"/></operator><name pos:line="304" pos:column="27">auth_user<pos:position pos:line="304" pos:column="36"/></name> <operator pos:line="304" pos:column="37">=<pos:position pos:line="304" pos:column="38"/></operator> <call><name pos:line="304" pos:column="39">findUserInCache<pos:position pos:line="304" pos:column="54"/></name><argument_list pos:line="304" pos:column="54">(<argument><expr><call><name><name pos:line="304" pos:column="55">key<pos:position pos:line="304" pos:column="58"/></name><operator pos:line="304" pos:column="58">.<pos:position pos:line="304" pos:column="59"/></operator><name pos:line="304" pos:column="59">c_str<pos:position pos:line="304" pos:column="64"/></name></name><argument_list pos:line="304" pos:column="64">()<pos:position pos:line="304" pos:column="66"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="304" pos:column="68">Auth<pos:position pos:line="304" pos:column="72"/></name><operator pos:line="304" pos:column="72">::<pos:position pos:line="304" pos:column="74"/></operator><name pos:line="304" pos:column="74">AUTH_DIGEST<pos:position pos:line="304" pos:column="85"/></name></name></expr></argument>)<pos:position pos:line="304" pos:column="86"/></argument_list></call><operator pos:line="304" pos:column="86">)<pos:position pos:line="304" pos:column="87"/></operator> <operator pos:line="304" pos:column="88">==<pos:position pos:line="304" pos:column="90"/></operator> <name pos:line="304" pos:column="91">NULL<pos:position pos:line="304" pos:column="95"/></name></expr>)<pos:position pos:line="304" pos:column="96"/></condition><then pos:line="304" pos:column="96"> <block pos:line="304" pos:column="97">{
        <comment type="block" pos:line="305" pos:column="9">/* the user doesn't exist in the username cache yet */</comment>
        <expr_stmt><expr><call><name pos:line="306" pos:column="9">debugs<pos:position pos:line="306" pos:column="15"/></name><argument_list pos:line="306" pos:column="15">(<argument><expr><literal type="number" pos:line="306" pos:column="16">29<pos:position pos:line="306" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="306" pos:column="20">9<pos:position pos:line="306" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="306" pos:column="23">"Creating new digest user '"<pos:position pos:line="306" pos:column="51"/></literal> <operator pos:line="306" pos:column="52">&lt;&lt;<pos:position pos:line="306" pos:column="60"/></operator> <name pos:line="306" pos:column="55">username<pos:position pos:line="306" pos:column="63"/></name> <operator pos:line="306" pos:column="64">&lt;&lt;<pos:position pos:line="306" pos:column="72"/></operator> <literal type="string" pos:line="306" pos:column="67">"'"<pos:position pos:line="306" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="306" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="306" pos:column="72"/></expr_stmt>
        <expr_stmt><expr><name pos:line="307" pos:column="9">digest_user<pos:position pos:line="307" pos:column="20"/></name> <operator pos:line="307" pos:column="21">=<pos:position pos:line="307" pos:column="22"/></operator> <operator pos:line="307" pos:column="23">new<pos:position pos:line="307" pos:column="26"/></operator> <call><name><name pos:line="307" pos:column="27">Auth<pos:position pos:line="307" pos:column="31"/></name><operator pos:line="307" pos:column="31">::<pos:position pos:line="307" pos:column="33"/></operator><name pos:line="307" pos:column="33">Digest<pos:position pos:line="307" pos:column="39"/></name><operator pos:line="307" pos:column="39">::<pos:position pos:line="307" pos:column="41"/></operator><name pos:line="307" pos:column="41">User<pos:position pos:line="307" pos:column="45"/></name></name><argument_list pos:line="307" pos:column="45">(<argument><expr><name pos:line="307" pos:column="46">this<pos:position pos:line="307" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="307" pos:column="52">aRequestRealm<pos:position pos:line="307" pos:column="65"/></name></expr></argument>)<pos:position pos:line="307" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="307" pos:column="67"/></expr_stmt>
        <comment type="block" pos:line="308" pos:column="9">/* auth_user is a parent */</comment>
        <expr_stmt><expr><name pos:line="309" pos:column="9">auth_user<pos:position pos:line="309" pos:column="18"/></name> <operator pos:line="309" pos:column="19">=<pos:position pos:line="309" pos:column="20"/></operator> <name pos:line="309" pos:column="21">digest_user<pos:position pos:line="309" pos:column="32"/></name></expr>;<pos:position pos:line="309" pos:column="33"/></expr_stmt>
        <comment type="block" pos:line="310" pos:column="9">/* save the username */</comment>
        <expr_stmt><expr><call><name><name pos:line="311" pos:column="9">digest_user<pos:position pos:line="311" pos:column="20"/></name><operator pos:line="311" pos:column="20">-&gt;<pos:position pos:line="311" pos:column="25"/></operator><name pos:line="311" pos:column="22">username<pos:position pos:line="311" pos:column="30"/></name></name><argument_list pos:line="311" pos:column="30">(<argument><expr><name pos:line="311" pos:column="31">username<pos:position pos:line="311" pos:column="39"/></name></expr></argument>)<pos:position pos:line="311" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="311" pos:column="41"/></expr_stmt>
        <comment type="block" pos:line="312" pos:column="9">/* set the user type */</comment>
        <expr_stmt><expr><name><name pos:line="313" pos:column="9">digest_user<pos:position pos:line="313" pos:column="20"/></name><operator pos:line="313" pos:column="20">-&gt;<pos:position pos:line="313" pos:column="25"/></operator><name pos:line="313" pos:column="22">auth_type<pos:position pos:line="313" pos:column="31"/></name></name> <operator pos:line="313" pos:column="32">=<pos:position pos:line="313" pos:column="33"/></operator> <name><name pos:line="313" pos:column="34">Auth<pos:position pos:line="313" pos:column="38"/></name><operator pos:line="313" pos:column="38">::<pos:position pos:line="313" pos:column="40"/></operator><name pos:line="313" pos:column="40">AUTH_DIGEST<pos:position pos:line="313" pos:column="51"/></name></name></expr>;<pos:position pos:line="313" pos:column="52"/></expr_stmt>
        <comment type="block" pos:line="314" pos:column="9">/* this auth_user struct is the one to get added to the
         * username cache */</comment>
        <comment type="block" pos:line="316" pos:column="9">/* store user in hash's */</comment>
        <expr_stmt><expr><call><name><name pos:line="317" pos:column="9">digest_user<pos:position pos:line="317" pos:column="20"/></name><operator pos:line="317" pos:column="20">-&gt;<pos:position pos:line="317" pos:column="25"/></operator><name pos:line="317" pos:column="22">addToNameCache<pos:position pos:line="317" pos:column="36"/></name></name><argument_list pos:line="317" pos:column="36">()<pos:position pos:line="317" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="317" pos:column="39"/></expr_stmt>

        <comment type="block" pos:line="319" pos:column="9">/*
         * Add the digest to the user so we can tell if a hacking
         * or spoofing attack is taking place. We do this by assuming
         * the user agent won't change user name without warning.
         */</comment>
        <expr_stmt><expr><call><name pos:line="324" pos:column="9">authDigestUserLinkNonce<pos:position pos:line="324" pos:column="32"/></name><argument_list pos:line="324" pos:column="32">(<argument><expr><name pos:line="324" pos:column="33">digest_user<pos:position pos:line="324" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="324" pos:column="46">nonce<pos:position pos:line="324" pos:column="51"/></name></expr></argument>)<pos:position pos:line="324" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="324" pos:column="53"/></expr_stmt>

        <comment type="block" pos:line="326" pos:column="9">/* auth_user is now linked, we reset these values
         * after external auth occurs anyway */</comment>
        <expr_stmt><expr><name><name pos:line="328" pos:column="9">auth_user<pos:position pos:line="328" pos:column="18"/></name><operator pos:line="328" pos:column="18">-&gt;<pos:position pos:line="328" pos:column="23"/></operator><name pos:line="328" pos:column="20">expiretime<pos:position pos:line="328" pos:column="30"/></name></name> <operator pos:line="328" pos:column="31">=<pos:position pos:line="328" pos:column="32"/></operator> <name><name pos:line="328" pos:column="33">current_time<pos:position pos:line="328" pos:column="45"/></name><operator pos:line="328" pos:column="45">.<pos:position pos:line="328" pos:column="46"/></operator><name pos:line="328" pos:column="46">tv_sec<pos:position pos:line="328" pos:column="52"/></name></name></expr>;<pos:position pos:line="328" pos:column="53"/></expr_stmt>
    }<pos:position pos:line="329" pos:column="6"/></block></then> <else pos:line="329" pos:column="7">else <block pos:line="329" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="330" pos:column="9">debugs<pos:position pos:line="330" pos:column="15"/></name><argument_list pos:line="330" pos:column="15">(<argument><expr><literal type="number" pos:line="330" pos:column="16">29<pos:position pos:line="330" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="330" pos:column="20">9<pos:position pos:line="330" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="330" pos:column="23">"Found user '"<pos:position pos:line="330" pos:column="37"/></literal> <operator pos:line="330" pos:column="38">&lt;&lt;<pos:position pos:line="330" pos:column="46"/></operator> <name pos:line="330" pos:column="41">username<pos:position pos:line="330" pos:column="49"/></name> <operator pos:line="330" pos:column="50">&lt;&lt;<pos:position pos:line="330" pos:column="58"/></operator> <literal type="string" pos:line="330" pos:column="53">"' in the user cache as '"<pos:position pos:line="330" pos:column="79"/></literal> <operator pos:line="330" pos:column="80">&lt;&lt;<pos:position pos:line="330" pos:column="88"/></operator> <name pos:line="330" pos:column="83">auth_user<pos:position pos:line="330" pos:column="92"/></name> <operator pos:line="330" pos:column="93">&lt;&lt;<pos:position pos:line="330" pos:column="101"/></operator> <literal type="string" pos:line="330" pos:column="96">"'"<pos:position pos:line="330" pos:column="99"/></literal></expr></argument>)<pos:position pos:line="330" pos:column="100"/></argument_list></call></expr>;<pos:position pos:line="330" pos:column="101"/></expr_stmt>
        <expr_stmt><expr><name pos:line="331" pos:column="9">digest_user<pos:position pos:line="331" pos:column="20"/></name> <operator pos:line="331" pos:column="21">=<pos:position pos:line="331" pos:column="22"/></operator> <cast type="static" pos:line="331" pos:column="23">static_cast<argument_list type="generic" pos:line="331" pos:column="34">&lt;<argument><expr><name><name pos:line="331" pos:column="35">Auth<pos:position pos:line="331" pos:column="39"/></name><operator pos:line="331" pos:column="39">::<pos:position pos:line="331" pos:column="41"/></operator><name pos:line="331" pos:column="41">Digest<pos:position pos:line="331" pos:column="47"/></name><operator pos:line="331" pos:column="47">::<pos:position pos:line="331" pos:column="49"/></operator><name pos:line="331" pos:column="49">User<pos:position pos:line="331" pos:column="53"/></name></name> <operator pos:line="331" pos:column="54">*<pos:position pos:line="331" pos:column="55"/></operator></expr></argument>&gt;<pos:position pos:line="331" pos:column="59"/></argument_list><argument_list pos:line="331" pos:column="56">(<argument><expr><call><name><name pos:line="331" pos:column="57">auth_user<pos:position pos:line="331" pos:column="66"/></name><operator pos:line="331" pos:column="66">.<pos:position pos:line="331" pos:column="67"/></operator><name pos:line="331" pos:column="67">getRaw<pos:position pos:line="331" pos:column="73"/></name></name><argument_list pos:line="331" pos:column="73">()<pos:position pos:line="331" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="331" pos:column="76"/></argument_list></cast></expr>;<pos:position pos:line="331" pos:column="77"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="332" pos:column="9">digest_user<pos:position pos:line="332" pos:column="20"/></name><operator pos:line="332" pos:column="20">-&gt;<pos:position pos:line="332" pos:column="25"/></operator><name pos:line="332" pos:column="22">credentials<pos:position pos:line="332" pos:column="33"/></name></name><argument_list pos:line="332" pos:column="33">(<argument><expr><name><name pos:line="332" pos:column="34">Auth<pos:position pos:line="332" pos:column="38"/></name><operator pos:line="332" pos:column="38">::<pos:position pos:line="332" pos:column="40"/></operator><name pos:line="332" pos:column="40">Unchecked<pos:position pos:line="332" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="332" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="332" pos:column="51"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="333" pos:column="9">xfree<pos:position pos:line="333" pos:column="14"/></name><argument_list pos:line="333" pos:column="14">(<argument><expr><name pos:line="333" pos:column="15">username<pos:position pos:line="333" pos:column="23"/></name></expr></argument>)<pos:position pos:line="333" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="333" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="334" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="336" pos:column="5">/*link the request and the user */</comment>
    <expr_stmt><expr><call><name pos:line="337" pos:column="5">assert<pos:position pos:line="337" pos:column="11"/></name><argument_list pos:line="337" pos:column="11">(<argument><expr><name pos:line="337" pos:column="12">digest_request<pos:position pos:line="337" pos:column="26"/></name> <operator pos:line="337" pos:column="27">!=<pos:position pos:line="337" pos:column="29"/></operator> <name pos:line="337" pos:column="30">NULL<pos:position pos:line="337" pos:column="34"/></name></expr></argument>)<pos:position pos:line="337" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="337" pos:column="36"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="339" pos:column="5">digest_request<pos:position pos:line="339" pos:column="19"/></name><operator pos:line="339" pos:column="19">-&gt;<pos:position pos:line="339" pos:column="24"/></operator><name pos:line="339" pos:column="21">user<pos:position pos:line="339" pos:column="25"/></name></name><argument_list pos:line="339" pos:column="25">(<argument><expr><name pos:line="339" pos:column="26">digest_user<pos:position pos:line="339" pos:column="37"/></name></expr></argument>)<pos:position pos:line="339" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="339" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="340" pos:column="5">debugs<pos:position pos:line="340" pos:column="11"/></name><argument_list pos:line="340" pos:column="11">(<argument><expr><literal type="number" pos:line="340" pos:column="12">29<pos:position pos:line="340" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="340" pos:column="16">9<pos:position pos:line="340" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="340" pos:column="19">"username = '"<pos:position pos:line="340" pos:column="33"/></literal> <operator pos:line="340" pos:column="34">&lt;&lt;<pos:position pos:line="340" pos:column="42"/></operator> <call><name><name pos:line="340" pos:column="37">digest_user<pos:position pos:line="340" pos:column="48"/></name><operator pos:line="340" pos:column="48">-&gt;<pos:position pos:line="340" pos:column="53"/></operator><name pos:line="340" pos:column="50">username<pos:position pos:line="340" pos:column="58"/></name></name><argument_list pos:line="340" pos:column="58">()<pos:position pos:line="340" pos:column="60"/></argument_list></call> <operator pos:line="340" pos:column="61">&lt;&lt;<pos:position pos:line="340" pos:column="69"/></operator> <literal type="string" pos:line="340" pos:column="64">"'\nrealm = '"<pos:position pos:line="340" pos:column="78"/></literal> <operator pos:line="340" pos:column="79">&lt;&lt;<pos:position pos:line="340" pos:column="87"/></operator>
           <name><name pos:line="341" pos:column="12">digest_request<pos:position pos:line="341" pos:column="26"/></name><operator pos:line="341" pos:column="26">-&gt;<pos:position pos:line="341" pos:column="31"/></operator><name pos:line="341" pos:column="28">realm<pos:position pos:line="341" pos:column="33"/></name></name> <operator pos:line="341" pos:column="34">&lt;&lt;<pos:position pos:line="341" pos:column="42"/></operator> <literal type="string" pos:line="341" pos:column="37">"'\nqop = '"<pos:position pos:line="341" pos:column="49"/></literal> <operator pos:line="341" pos:column="50">&lt;&lt;<pos:position pos:line="341" pos:column="58"/></operator> <name><name pos:line="341" pos:column="53">digest_request<pos:position pos:line="341" pos:column="67"/></name><operator pos:line="341" pos:column="67">-&gt;<pos:position pos:line="341" pos:column="72"/></operator><name pos:line="341" pos:column="69">qop<pos:position pos:line="341" pos:column="72"/></name></name> <operator pos:line="341" pos:column="73">&lt;&lt;<pos:position pos:line="341" pos:column="81"/></operator>
           <literal type="string" pos:line="342" pos:column="12">"'\nalgorithm = '"<pos:position pos:line="342" pos:column="30"/></literal> <operator pos:line="342" pos:column="31">&lt;&lt;<pos:position pos:line="342" pos:column="39"/></operator> <name><name pos:line="342" pos:column="34">digest_request<pos:position pos:line="342" pos:column="48"/></name><operator pos:line="342" pos:column="48">-&gt;<pos:position pos:line="342" pos:column="53"/></operator><name pos:line="342" pos:column="50">algorithm<pos:position pos:line="342" pos:column="59"/></name></name> <operator pos:line="342" pos:column="60">&lt;&lt;<pos:position pos:line="342" pos:column="68"/></operator> <literal type="string" pos:line="342" pos:column="63">"'\nuri = '"<pos:position pos:line="342" pos:column="75"/></literal> <operator pos:line="342" pos:column="76">&lt;&lt;<pos:position pos:line="342" pos:column="84"/></operator>
           <name><name pos:line="343" pos:column="12">digest_request<pos:position pos:line="343" pos:column="26"/></name><operator pos:line="343" pos:column="26">-&gt;<pos:position pos:line="343" pos:column="31"/></operator><name pos:line="343" pos:column="28">uri<pos:position pos:line="343" pos:column="31"/></name></name> <operator pos:line="343" pos:column="32">&lt;&lt;<pos:position pos:line="343" pos:column="40"/></operator> <literal type="string" pos:line="343" pos:column="35">"'\nnonce = '"<pos:position pos:line="343" pos:column="49"/></literal> <operator pos:line="343" pos:column="50">&lt;&lt;<pos:position pos:line="343" pos:column="58"/></operator> <name><name pos:line="343" pos:column="53">digest_request<pos:position pos:line="343" pos:column="67"/></name><operator pos:line="343" pos:column="67">-&gt;<pos:position pos:line="343" pos:column="72"/></operator><name pos:line="343" pos:column="69">nonceb64<pos:position pos:line="343" pos:column="77"/></name></name> <operator pos:line="343" pos:column="78">&lt;&lt;<pos:position pos:line="343" pos:column="86"/></operator>
           <literal type="string" pos:line="344" pos:column="12">"'\nnc = '"<pos:position pos:line="344" pos:column="23"/></literal> <operator pos:line="344" pos:column="24">&lt;&lt;<pos:position pos:line="344" pos:column="32"/></operator> <name><name pos:line="344" pos:column="27">digest_request<pos:position pos:line="344" pos:column="41"/></name><operator pos:line="344" pos:column="41">-&gt;<pos:position pos:line="344" pos:column="46"/></operator><name pos:line="344" pos:column="43">nc<pos:position pos:line="344" pos:column="45"/></name></name> <operator pos:line="344" pos:column="46">&lt;&lt;<pos:position pos:line="344" pos:column="54"/></operator> <literal type="string" pos:line="344" pos:column="49">"'\ncnonce = '"<pos:position pos:line="344" pos:column="64"/></literal> <operator pos:line="344" pos:column="65">&lt;&lt;<pos:position pos:line="344" pos:column="73"/></operator>
           <name><name pos:line="345" pos:column="12">digest_request<pos:position pos:line="345" pos:column="26"/></name><operator pos:line="345" pos:column="26">-&gt;<pos:position pos:line="345" pos:column="31"/></operator><name pos:line="345" pos:column="28">cnonce<pos:position pos:line="345" pos:column="34"/></name></name> <operator pos:line="345" pos:column="35">&lt;&lt;<pos:position pos:line="345" pos:column="43"/></operator> <literal type="string" pos:line="345" pos:column="38">"'\nresponse = '"<pos:position pos:line="345" pos:column="55"/></literal> <operator pos:line="345" pos:column="56">&lt;&lt;<pos:position pos:line="345" pos:column="64"/></operator>
           <name><name pos:line="346" pos:column="12">digest_request<pos:position pos:line="346" pos:column="26"/></name><operator pos:line="346" pos:column="26">-&gt;<pos:position pos:line="346" pos:column="31"/></operator><name pos:line="346" pos:column="28">response<pos:position pos:line="346" pos:column="36"/></name></name> <operator pos:line="346" pos:column="37">&lt;&lt;<pos:position pos:line="346" pos:column="45"/></operator> <literal type="string" pos:line="346" pos:column="40">"'\ndigestnonce = '"<pos:position pos:line="346" pos:column="60"/></literal> <operator pos:line="346" pos:column="61">&lt;&lt;<pos:position pos:line="346" pos:column="69"/></operator> <name pos:line="346" pos:column="64">nonce<pos:position pos:line="346" pos:column="69"/></name> <operator pos:line="346" pos:column="70">&lt;&lt;<pos:position pos:line="346" pos:column="78"/></operator> <literal type="string" pos:line="346" pos:column="73">"'"<pos:position pos:line="346" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="346" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="346" pos:column="78"/></expr_stmt>

    <return pos:line="348" pos:column="5">return <expr><name pos:line="348" pos:column="12">digest_request<pos:position pos:line="348" pos:column="26"/></name></expr>;<pos:position pos:line="348" pos:column="27"/></return>
}<pos:position pos:line="349" pos:column="2"/></block></function></unit>
