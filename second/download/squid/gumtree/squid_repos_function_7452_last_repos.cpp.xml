<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7452_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Security<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">HandshakeParser<pos:position pos:line="2" pos:column="26"/></name><operator pos:line="2" pos:column="26">::<pos:position pos:line="2" pos:column="28"/></operator><name pos:line="2" pos:column="28">parseExtensions<pos:position pos:line="2" pos:column="43"/></name></name><parameter_list pos:line="2" pos:column="43">(<parameter><decl><type><specifier pos:line="2" pos:column="44">const<pos:position pos:line="2" pos:column="49"/></specifier> <name pos:line="2" pos:column="50">SBuf<pos:position pos:line="2" pos:column="54"/></name> <modifier pos:line="2" pos:column="55">&amp;<pos:position pos:line="2" pos:column="60"/></modifier></type><name pos:line="2" pos:column="56">raw<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="60"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">Parser<pos:position pos:line="4" pos:column="11"/></name><operator pos:line="4" pos:column="11">::<pos:position pos:line="4" pos:column="13"/></operator><name pos:line="4" pos:column="13">BinaryTokenizer<pos:position pos:line="4" pos:column="28"/></name></name></type> <name pos:line="4" pos:column="29">tk<pos:position pos:line="4" pos:column="31"/></name><argument_list pos:line="4" pos:column="31">(<argument><expr><name pos:line="4" pos:column="32">raw<pos:position pos:line="4" pos:column="35"/></name></expr></argument>)<pos:position pos:line="4" pos:column="36"/></argument_list></decl>;<pos:position pos:line="4" pos:column="37"/></decl_stmt>
    <while pos:line="5" pos:column="5">while <condition pos:line="5" pos:column="11">(<expr><operator pos:line="5" pos:column="12">!<pos:position pos:line="5" pos:column="13"/></operator><call><name><name pos:line="5" pos:column="13">tk<pos:position pos:line="5" pos:column="15"/></name><operator pos:line="5" pos:column="15">.<pos:position pos:line="5" pos:column="16"/></operator><name pos:line="5" pos:column="16">atEnd<pos:position pos:line="5" pos:column="21"/></name></name><argument_list pos:line="5" pos:column="21">()<pos:position pos:line="5" pos:column="23"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="24"/></condition> <block pos:line="5" pos:column="25">{
        <decl_stmt><decl><type><name pos:line="6" pos:column="9">Extension<pos:position pos:line="6" pos:column="18"/></name></type> <name pos:line="6" pos:column="19">extension<pos:position pos:line="6" pos:column="28"/></name><argument_list pos:line="6" pos:column="28">(<argument><expr><name pos:line="6" pos:column="29">tk<pos:position pos:line="6" pos:column="31"/></name></expr></argument>)<pos:position pos:line="6" pos:column="32"/></argument_list></decl>;<pos:position pos:line="6" pos:column="33"/></decl_stmt>

        <if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><name><name pos:line="8" pos:column="14">details<pos:position pos:line="8" pos:column="21"/></name><operator pos:line="8" pos:column="21">-&gt;<pos:position pos:line="8" pos:column="26"/></operator><name pos:line="8" pos:column="23">unsupportedExtensions<pos:position pos:line="8" pos:column="44"/></name></name> <operator pos:line="8" pos:column="45">&amp;&amp;<pos:position pos:line="8" pos:column="55"/></operator> <operator pos:line="8" pos:column="48">!<pos:position pos:line="8" pos:column="49"/></operator><call><name><name pos:line="8" pos:column="49">extension<pos:position pos:line="8" pos:column="58"/></name><operator pos:line="8" pos:column="58">.<pos:position pos:line="8" pos:column="59"/></operator><name pos:line="8" pos:column="59">supported<pos:position pos:line="8" pos:column="68"/></name></name><argument_list pos:line="8" pos:column="68">()<pos:position pos:line="8" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="71"/></condition><then pos:line="8" pos:column="71"> <block pos:line="8" pos:column="72">{
            <expr_stmt><expr><call><name pos:line="9" pos:column="13">debugs<pos:position pos:line="9" pos:column="19"/></name><argument_list pos:line="9" pos:column="19">(<argument><expr><literal type="number" pos:line="9" pos:column="20">83<pos:position pos:line="9" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="24">5<pos:position pos:line="9" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="27">"first unsupported extension: "<pos:position pos:line="9" pos:column="58"/></literal> <operator pos:line="9" pos:column="59">&lt;&lt;<pos:position pos:line="9" pos:column="67"/></operator> <name><name pos:line="9" pos:column="62">extension<pos:position pos:line="9" pos:column="71"/></name><operator pos:line="9" pos:column="71">.<pos:position pos:line="9" pos:column="72"/></operator><name pos:line="9" pos:column="72">type<pos:position pos:line="9" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="78"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="10" pos:column="13">details<pos:position pos:line="10" pos:column="20"/></name><operator pos:line="10" pos:column="20">-&gt;<pos:position pos:line="10" pos:column="25"/></operator><name pos:line="10" pos:column="22">unsupportedExtensions<pos:position pos:line="10" pos:column="43"/></name></name> <operator pos:line="10" pos:column="44">=<pos:position pos:line="10" pos:column="45"/></operator> <literal type="boolean" pos:line="10" pos:column="46">true<pos:position pos:line="10" pos:column="50"/></literal></expr>;<pos:position pos:line="10" pos:column="51"/></expr_stmt>
        }<pos:position pos:line="11" pos:column="10"/></block></then></if>

        <switch pos:line="13" pos:column="9">switch<condition pos:line="13" pos:column="15">(<expr><name><name pos:line="13" pos:column="16">extension<pos:position pos:line="13" pos:column="25"/></name><operator pos:line="13" pos:column="25">.<pos:position pos:line="13" pos:column="26"/></operator><name pos:line="13" pos:column="26">type<pos:position pos:line="13" pos:column="30"/></name></name></expr>)<pos:position pos:line="13" pos:column="31"/></condition> <block pos:line="13" pos:column="32">{
        <case pos:line="14" pos:column="9">case <expr><literal type="number" pos:line="14" pos:column="14">0<pos:position pos:line="14" pos:column="15"/></literal></expr>:<pos:position pos:line="14" pos:column="16"/></case> <comment type="line" pos:line="14" pos:column="17">// The SNI extension; RFC 6066, Section 3</comment>
            <expr_stmt><expr><name><name pos:line="15" pos:column="13">details<pos:position pos:line="15" pos:column="20"/></name><operator pos:line="15" pos:column="20">-&gt;<pos:position pos:line="15" pos:column="25"/></operator><name pos:line="15" pos:column="22">serverName<pos:position pos:line="15" pos:column="32"/></name></name> <operator pos:line="15" pos:column="33">=<pos:position pos:line="15" pos:column="34"/></operator> <call><name pos:line="15" pos:column="35">parseSniExtension<pos:position pos:line="15" pos:column="52"/></name><argument_list pos:line="15" pos:column="52">(<argument><expr><name><name pos:line="15" pos:column="53">extension<pos:position pos:line="15" pos:column="62"/></name><operator pos:line="15" pos:column="62">.<pos:position pos:line="15" pos:column="63"/></operator><name pos:line="15" pos:column="63">data<pos:position pos:line="15" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="69"/></expr_stmt>
            <break pos:line="16" pos:column="13">break;<pos:position pos:line="16" pos:column="19"/></break>
        <case pos:line="17" pos:column="9">case <expr><literal type="number" pos:line="17" pos:column="14">5<pos:position pos:line="17" pos:column="15"/></literal></expr>:<pos:position pos:line="17" pos:column="16"/></case> <comment type="line" pos:line="17" pos:column="17">// Certificate Status Request; RFC 6066, Section 8</comment>
            <expr_stmt><expr><name><name pos:line="18" pos:column="13">details<pos:position pos:line="18" pos:column="20"/></name><operator pos:line="18" pos:column="20">-&gt;<pos:position pos:line="18" pos:column="25"/></operator><name pos:line="18" pos:column="22">tlsStatusRequest<pos:position pos:line="18" pos:column="38"/></name></name> <operator pos:line="18" pos:column="39">=<pos:position pos:line="18" pos:column="40"/></operator> <literal type="boolean" pos:line="18" pos:column="41">true<pos:position pos:line="18" pos:column="45"/></literal></expr>;<pos:position pos:line="18" pos:column="46"/></expr_stmt>
            <break pos:line="19" pos:column="13">break;<pos:position pos:line="19" pos:column="19"/></break>
        <case pos:line="20" pos:column="9">case <expr><literal type="number" pos:line="20" pos:column="14">15<pos:position pos:line="20" pos:column="16"/></literal></expr>:<pos:position pos:line="20" pos:column="17"/></case> <comment type="line" pos:line="20" pos:column="18">// The heartBeats, RFC 6520</comment>
            <expr_stmt><expr><name><name pos:line="21" pos:column="13">details<pos:position pos:line="21" pos:column="20"/></name><operator pos:line="21" pos:column="20">-&gt;<pos:position pos:line="21" pos:column="25"/></operator><name pos:line="21" pos:column="22">doHeartBeats<pos:position pos:line="21" pos:column="34"/></name></name> <operator pos:line="21" pos:column="35">=<pos:position pos:line="21" pos:column="36"/></operator> <literal type="boolean" pos:line="21" pos:column="37">true<pos:position pos:line="21" pos:column="41"/></literal></expr>;<pos:position pos:line="21" pos:column="42"/></expr_stmt>
            <break pos:line="22" pos:column="13">break;<pos:position pos:line="22" pos:column="19"/></break>
        <case pos:line="23" pos:column="9">case <expr><literal type="number" pos:line="23" pos:column="14">16<pos:position pos:line="23" pos:column="16"/></literal></expr>:<pos:position pos:line="23" pos:column="17"/></case> <block pos:line="23" pos:column="18">{ <comment type="line" pos:line="23" pos:column="20">// Application-Layer Protocol Negotiation Extension, RFC 7301</comment>
            <decl_stmt><decl><type><name><name pos:line="24" pos:column="13">Parser<pos:position pos:line="24" pos:column="19"/></name><operator pos:line="24" pos:column="19">::<pos:position pos:line="24" pos:column="21"/></operator><name pos:line="24" pos:column="21">BinaryTokenizer<pos:position pos:line="24" pos:column="36"/></name></name></type> <name pos:line="24" pos:column="37">tkAPN<pos:position pos:line="24" pos:column="42"/></name><argument_list pos:line="24" pos:column="42">(<argument><expr><name><name pos:line="24" pos:column="43">extension<pos:position pos:line="24" pos:column="52"/></name><operator pos:line="24" pos:column="52">.<pos:position pos:line="24" pos:column="53"/></operator><name pos:line="24" pos:column="53">data<pos:position pos:line="24" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="58"/></argument_list></decl>;<pos:position pos:line="24" pos:column="59"/></decl_stmt>
            <expr_stmt><expr><name><name pos:line="25" pos:column="13">details<pos:position pos:line="25" pos:column="20"/></name><operator pos:line="25" pos:column="20">-&gt;<pos:position pos:line="25" pos:column="25"/></operator><name pos:line="25" pos:column="22">tlsAppLayerProtoNeg<pos:position pos:line="25" pos:column="41"/></name></name> <operator pos:line="25" pos:column="42">=<pos:position pos:line="25" pos:column="43"/></operator> <call><name><name pos:line="25" pos:column="44">tkAPN<pos:position pos:line="25" pos:column="49"/></name><operator pos:line="25" pos:column="49">.<pos:position pos:line="25" pos:column="50"/></operator><name pos:line="25" pos:column="50">pstring16<pos:position pos:line="25" pos:column="59"/></name></name><argument_list pos:line="25" pos:column="59">(<argument><expr><literal type="string" pos:line="25" pos:column="60">"APN"<pos:position pos:line="25" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="67"/></expr_stmt>
            <break pos:line="26" pos:column="13">break;<pos:position pos:line="26" pos:column="19"/></break>
        }<pos:position pos:line="27" pos:column="10"/></block>
        <case pos:line="28" pos:column="9">case <expr><literal type="number" pos:line="28" pos:column="14">35<pos:position pos:line="28" pos:column="16"/></literal></expr>:<pos:position pos:line="28" pos:column="17"/></case> <comment type="line" pos:line="28" pos:column="18">// SessionTicket TLS Extension; RFC 5077</comment>
            <expr_stmt><expr><name><name pos:line="29" pos:column="13">details<pos:position pos:line="29" pos:column="20"/></name><operator pos:line="29" pos:column="20">-&gt;<pos:position pos:line="29" pos:column="25"/></operator><name pos:line="29" pos:column="22">tlsTicketsExtension<pos:position pos:line="29" pos:column="41"/></name></name> <operator pos:line="29" pos:column="42">=<pos:position pos:line="29" pos:column="43"/></operator> <literal type="boolean" pos:line="29" pos:column="44">true<pos:position pos:line="29" pos:column="48"/></literal></expr>;<pos:position pos:line="29" pos:column="49"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="30" pos:column="13">details<pos:position pos:line="30" pos:column="20"/></name><operator pos:line="30" pos:column="20">-&gt;<pos:position pos:line="30" pos:column="25"/></operator><name pos:line="30" pos:column="22">hasTlsTicket<pos:position pos:line="30" pos:column="34"/></name></name> <operator pos:line="30" pos:column="35">=<pos:position pos:line="30" pos:column="36"/></operator> <operator pos:line="30" pos:column="37">!<pos:position pos:line="30" pos:column="38"/></operator><call><name><name pos:line="30" pos:column="38">extension<pos:position pos:line="30" pos:column="47"/></name><operator pos:line="30" pos:column="47">.<pos:position pos:line="30" pos:column="48"/></operator><name pos:line="30" pos:column="48">data<pos:position pos:line="30" pos:column="52"/></name><operator pos:line="30" pos:column="52">.<pos:position pos:line="30" pos:column="53"/></operator><name pos:line="30" pos:column="53">isEmpty<pos:position pos:line="30" pos:column="60"/></name></name><argument_list pos:line="30" pos:column="60">()<pos:position pos:line="30" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="63"/></expr_stmt>
        <case pos:line="31" pos:column="9">case <expr><literal type="number" pos:line="31" pos:column="14">13172<pos:position pos:line="31" pos:column="19"/></literal></expr>:<pos:position pos:line="31" pos:column="20"/></case> <comment type="line" pos:line="31" pos:column="21">// Next Protocol Negotiation Extension (expired draft?)</comment>
        <default pos:line="32" pos:column="9">default:<pos:position pos:line="32" pos:column="17"/></default>
            <break pos:line="33" pos:column="13">break;<pos:position pos:line="33" pos:column="19"/></break>
        }<pos:position pos:line="34" pos:column="10"/></block></switch>
    }<pos:position pos:line="35" pos:column="6"/></block></while>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
