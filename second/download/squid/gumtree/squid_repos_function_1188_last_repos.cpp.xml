<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1188_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">serverConnectionsOpen<pos:position pos:line="2" pos:column="22"/></name><parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><name pos:line="2" pos:column="23">void<pos:position pos:line="2" pos:column="27"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="28"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><call><name pos:line="4" pos:column="9">IamPrimaryProcess<pos:position pos:line="4" pos:column="26"/></name><argument_list pos:line="4" pos:column="26">()<pos:position pos:line="4" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="29"/></condition><then pos:line="4" pos:column="29"> <block pos:line="4" pos:column="30">{
<cpp:if pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">if<pos:position pos:line="5" pos:column="4"/></cpp:directive> <expr><name pos:line="5" pos:column="5">USE_WCCP<pos:position pos:line="5" pos:column="13"/></name></expr></cpp:if>
        <expr_stmt><expr><call><name pos:line="6" pos:column="9">wccpConnectionOpen<pos:position pos:line="6" pos:column="27"/></name><argument_list pos:line="6" pos:column="27">()<pos:position pos:line="6" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="30"/></expr_stmt>
<cpp:endif pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">endif<pos:position pos:line="7" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">if<pos:position pos:line="9" pos:column="4"/></cpp:directive> <expr><name pos:line="9" pos:column="5">USE_WCCPv2<pos:position pos:line="9" pos:column="15"/></name></expr></cpp:if>

        <expr_stmt><expr><call><name pos:line="11" pos:column="9">wccp2ConnectionOpen<pos:position pos:line="11" pos:column="28"/></name><argument_list pos:line="11" pos:column="28">()<pos:position pos:line="11" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="31"/></expr_stmt>
<cpp:endif pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">endif<pos:position pos:line="12" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>
    <comment type="line" pos:line="14" pos:column="5">// start various proxying services if we are responsible for them</comment>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><call><name pos:line="15" pos:column="9">IamWorkerProcess<pos:position pos:line="15" pos:column="25"/></name><argument_list pos:line="15" pos:column="25">()<pos:position pos:line="15" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="28"/></condition><then pos:line="15" pos:column="28"> <block pos:line="15" pos:column="29">{
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">clientOpenListenSockets<pos:position pos:line="16" pos:column="32"/></name><argument_list pos:line="16" pos:column="32">()<pos:position pos:line="16" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">icpOpenPorts<pos:position pos:line="17" pos:column="21"/></name><argument_list pos:line="17" pos:column="21">()<pos:position pos:line="17" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="24"/></expr_stmt>
<cpp:if pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">if<pos:position pos:line="18" pos:column="4"/></cpp:directive> <expr><name pos:line="18" pos:column="5">USE_HTCP<pos:position pos:line="18" pos:column="13"/></name></expr></cpp:if>
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">htcpOpenPorts<pos:position pos:line="19" pos:column="22"/></name><argument_list pos:line="19" pos:column="22">()<pos:position pos:line="19" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="25"/></expr_stmt>
<cpp:endif pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">endif<pos:position pos:line="20" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">if<pos:position pos:line="21" pos:column="4"/></cpp:directive> <expr><name pos:line="21" pos:column="5">SQUID_SNMP<pos:position pos:line="21" pos:column="15"/></name></expr></cpp:if>
        <expr_stmt><expr><call><name pos:line="22" pos:column="9">snmpOpenPorts<pos:position pos:line="22" pos:column="22"/></name><argument_list pos:line="22" pos:column="22">()<pos:position pos:line="22" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="25"/></expr_stmt>
<cpp:endif pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">endif<pos:position pos:line="23" pos:column="7"/></cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name><name pos:line="25" pos:column="9">icmpEngine<pos:position pos:line="25" pos:column="19"/></name><operator pos:line="25" pos:column="19">.<pos:position pos:line="25" pos:column="20"/></operator><name pos:line="25" pos:column="20">Open<pos:position pos:line="25" pos:column="24"/></name></name><argument_list pos:line="25" pos:column="24">()<pos:position pos:line="25" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">netdbInit<pos:position pos:line="26" pos:column="18"/></name><argument_list pos:line="26" pos:column="18">()<pos:position pos:line="26" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="21"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">asnInit<pos:position pos:line="27" pos:column="16"/></name><argument_list pos:line="27" pos:column="16">()<pos:position pos:line="27" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="19"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="28" pos:column="9">ACL<pos:position pos:line="28" pos:column="12"/></name><operator pos:line="28" pos:column="12">::<pos:position pos:line="28" pos:column="14"/></operator><name pos:line="28" pos:column="14">Initialize<pos:position pos:line="28" pos:column="24"/></name></name><argument_list pos:line="28" pos:column="24">()<pos:position pos:line="28" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">peerSelectInit<pos:position pos:line="29" pos:column="23"/></name><argument_list pos:line="29" pos:column="23">()<pos:position pos:line="29" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="26"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="31" pos:column="9">carpInit<pos:position pos:line="31" pos:column="17"/></name><argument_list pos:line="31" pos:column="17">()<pos:position pos:line="31" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="20"/></expr_stmt>
<cpp:if pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">if<pos:position pos:line="32" pos:column="4"/></cpp:directive> <expr><name pos:line="32" pos:column="5">USE_AUTH<pos:position pos:line="32" pos:column="13"/></name></expr></cpp:if>
        <expr_stmt><expr><call><name pos:line="33" pos:column="9">peerUserHashInit<pos:position pos:line="33" pos:column="25"/></name><argument_list pos:line="33" pos:column="25">()<pos:position pos:line="33" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="28"/></expr_stmt>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif<pos:position pos:line="34" pos:column="7"/></cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">peerSourceHashInit<pos:position pos:line="35" pos:column="27"/></name><argument_list pos:line="35" pos:column="27">()<pos:position pos:line="35" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
