<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4617_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">CossSwapDir<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">canStore<pos:position pos:line="2" pos:column="22"/></name></name><parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><name pos:line="2" pos:column="23">StoreEntry<pos:position pos:line="2" pos:column="33"/></name> <specifier pos:line="2" pos:column="34">const<pos:position pos:line="2" pos:column="39"/></specifier> <modifier pos:line="2" pos:column="40">&amp;<pos:position pos:line="2" pos:column="45"/></modifier></type><name pos:line="2" pos:column="41">e<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="43"/></parameter_list><specifier pos:line="2" pos:column="43">const<pos:position pos:line="2" pos:column="48"/></specifier>
<block pos:line="3" pos:column="1">{

    <comment type="block" pos:line="5" pos:column="5">/* Check if the object is a special object, we can't cache these */</comment>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><call><name pos:line="7" pos:column="9">EBIT_TEST<pos:position pos:line="7" pos:column="18"/></name><argument_list pos:line="7" pos:column="18">(<argument><expr><name><name pos:line="7" pos:column="19">e<pos:position pos:line="7" pos:column="20"/></name><operator pos:line="7" pos:column="20">.<pos:position pos:line="7" pos:column="21"/></operator><name pos:line="7" pos:column="21">flags<pos:position pos:line="7" pos:column="26"/></name></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="28">ENTRY_SPECIAL<pos:position pos:line="7" pos:column="41"/></name></expr></argument>)<pos:position pos:line="7" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="43"/></condition><then pos:line="7" pos:column="43">
        <block type="pseudo"><return pos:line="8" pos:column="9">return <expr><operator pos:line="8" pos:column="16">-<pos:position pos:line="8" pos:column="17"/></operator><literal type="number" pos:line="8" pos:column="17">1<pos:position pos:line="8" pos:column="18"/></literal></expr>;<pos:position pos:line="8" pos:column="19"/></return></block></then></if>

    <comment type="block" pos:line="10" pos:column="5">/* Otherwise, we're ok */</comment>
    <comment type="block" pos:line="11" pos:column="5">/* Return load, cs-&gt;aq.aq_numpending out of MAX_ASYNCOP */</comment>
    <return pos:line="12" pos:column="5">return <expr><call><name><name pos:line="12" pos:column="12">io<pos:position pos:line="12" pos:column="14"/></name><operator pos:line="12" pos:column="14">-&gt;<pos:position pos:line="12" pos:column="19"/></operator><name pos:line="12" pos:column="16">load<pos:position pos:line="12" pos:column="20"/></name></name><argument_list pos:line="12" pos:column="20">()<pos:position pos:line="12" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="23"/></return>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
