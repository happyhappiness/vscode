<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3160_squid-3.1.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">gopherSendComplete<pos:position pos:line="2" pos:column="19"/></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name pos:line="2" pos:column="20">int<pos:position pos:line="2" pos:column="23"/></name></type> <name pos:line="2" pos:column="24">fd<pos:position pos:line="2" pos:column="26"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="28">char<pos:position pos:line="2" pos:column="32"/></name> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier></type><name pos:line="2" pos:column="34">buf<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="39">size_t<pos:position pos:line="2" pos:column="45"/></name></type> <name pos:line="2" pos:column="46">size<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="52">comm_err_t<pos:position pos:line="2" pos:column="62"/></name></type> <name pos:line="2" pos:column="63">errflag<pos:position pos:line="2" pos:column="70"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="72">int<pos:position pos:line="2" pos:column="75"/></name></type> <name pos:line="2" pos:column="76">xerrno<pos:position pos:line="2" pos:column="82"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="84">void<pos:position pos:line="2" pos:column="88"/></name> <modifier pos:line="2" pos:column="89">*<pos:position pos:line="2" pos:column="90"/></modifier></type><name pos:line="2" pos:column="90">data<pos:position pos:line="2" pos:column="94"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="95"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">GopherStateData<pos:position pos:line="4" pos:column="20"/></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier></type><name pos:line="4" pos:column="22">gopherState<pos:position pos:line="4" pos:column="33"/></name> <init pos:line="4" pos:column="34">= <expr><operator pos:line="4" pos:column="36">(<pos:position pos:line="4" pos:column="37"/></operator><name pos:line="4" pos:column="37">GopherStateData<pos:position pos:line="4" pos:column="52"/></name> <operator pos:line="4" pos:column="53">*<pos:position pos:line="4" pos:column="54"/></operator><operator pos:line="4" pos:column="54">)<pos:position pos:line="4" pos:column="55"/></operator> <name pos:line="4" pos:column="56">data<pos:position pos:line="4" pos:column="60"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="61"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">StoreEntry<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">entry<pos:position pos:line="5" pos:column="22"/></name> <init pos:line="5" pos:column="23">= <expr><name><name pos:line="5" pos:column="25">gopherState<pos:position pos:line="5" pos:column="36"/></name><operator pos:line="5" pos:column="36">-&gt;<pos:position pos:line="5" pos:column="41"/></operator><name pos:line="5" pos:column="38">entry<pos:position pos:line="5" pos:column="43"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="44"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">debugs<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><literal type="number" pos:line="6" pos:column="12">10<pos:position pos:line="6" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="16">5<pos:position pos:line="6" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="19">"gopherSendComplete: FD "<pos:position pos:line="6" pos:column="44"/></literal> <operator pos:line="6" pos:column="45">&lt;&lt;<pos:position pos:line="6" pos:column="53"/></operator> <name pos:line="6" pos:column="48">fd<pos:position pos:line="6" pos:column="50"/></name> <operator pos:line="6" pos:column="51">&lt;&lt;<pos:position pos:line="6" pos:column="59"/></operator> <literal type="string" pos:line="6" pos:column="54">" size: "<pos:position pos:line="6" pos:column="63"/></literal> <operator pos:line="6" pos:column="64">&lt;&lt;<pos:position pos:line="6" pos:column="72"/></operator> <name pos:line="6" pos:column="67">size<pos:position pos:line="6" pos:column="71"/></name> <operator pos:line="6" pos:column="72">&lt;&lt;<pos:position pos:line="6" pos:column="80"/></operator> <literal type="string" pos:line="6" pos:column="75">" errflag: "<pos:position pos:line="6" pos:column="87"/></literal> <operator pos:line="6" pos:column="88">&lt;&lt;<pos:position pos:line="6" pos:column="96"/></operator> <name pos:line="6" pos:column="91">errflag<pos:position pos:line="6" pos:column="98"/></name></expr></argument>)<pos:position pos:line="6" pos:column="99"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="100"/></expr_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">size<pos:position pos:line="8" pos:column="13"/></name> <operator pos:line="8" pos:column="14">&gt;<pos:position pos:line="8" pos:column="18"/></operator> <literal type="number" pos:line="8" pos:column="16">0<pos:position pos:line="8" pos:column="17"/></literal></expr>)<pos:position pos:line="8" pos:column="18"/></condition><then pos:line="8" pos:column="18"> <block pos:line="8" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">fd_bytes<pos:position pos:line="9" pos:column="17"/></name><argument_list pos:line="9" pos:column="17">(<argument><expr><name pos:line="9" pos:column="18">fd<pos:position pos:line="9" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="22">size<pos:position pos:line="9" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="28">FD_WRITE<pos:position pos:line="9" pos:column="36"/></name></expr></argument>)<pos:position pos:line="9" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">kb_incr<pos:position pos:line="10" pos:column="16"/></name><argument_list pos:line="10" pos:column="16">(<argument><expr><operator pos:line="10" pos:column="17">&amp;<pos:position pos:line="10" pos:column="22"/></operator><name><name pos:line="10" pos:column="18">statCounter<pos:position pos:line="10" pos:column="29"/></name><operator pos:line="10" pos:column="29">.<pos:position pos:line="10" pos:column="30"/></operator><name pos:line="10" pos:column="30">server<pos:position pos:line="10" pos:column="36"/></name><operator pos:line="10" pos:column="36">.<pos:position pos:line="10" pos:column="37"/></operator><name pos:line="10" pos:column="37">all<pos:position pos:line="10" pos:column="40"/></name><operator pos:line="10" pos:column="40">.<pos:position pos:line="10" pos:column="41"/></operator><name pos:line="10" pos:column="41">kbytes_out<pos:position pos:line="10" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="53">size<pos:position pos:line="10" pos:column="57"/></name></expr></argument>)<pos:position pos:line="10" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="59"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">kb_incr<pos:position pos:line="11" pos:column="16"/></name><argument_list pos:line="11" pos:column="16">(<argument><expr><operator pos:line="11" pos:column="17">&amp;<pos:position pos:line="11" pos:column="22"/></operator><name><name pos:line="11" pos:column="18">statCounter<pos:position pos:line="11" pos:column="29"/></name><operator pos:line="11" pos:column="29">.<pos:position pos:line="11" pos:column="30"/></operator><name pos:line="11" pos:column="30">server<pos:position pos:line="11" pos:column="36"/></name><operator pos:line="11" pos:column="36">.<pos:position pos:line="11" pos:column="37"/></operator><name pos:line="11" pos:column="37">other<pos:position pos:line="11" pos:column="42"/></name><operator pos:line="11" pos:column="42">.<pos:position pos:line="11" pos:column="43"/></operator><name pos:line="11" pos:column="43">kbytes_out<pos:position pos:line="11" pos:column="53"/></name></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="55">size<pos:position pos:line="11" pos:column="59"/></name></expr></argument>)<pos:position pos:line="11" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="61"/></expr_stmt>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name pos:line="14" pos:column="9">errflag<pos:position pos:line="14" pos:column="16"/></name></expr>)<pos:position pos:line="14" pos:column="17"/></condition><then pos:line="14" pos:column="17"> <block pos:line="14" pos:column="18">{
        <decl_stmt><decl><type><name pos:line="15" pos:column="9">ErrorState<pos:position pos:line="15" pos:column="19"/></name> <modifier pos:line="15" pos:column="20">*<pos:position pos:line="15" pos:column="21"/></modifier></type><name pos:line="15" pos:column="21">err<pos:position pos:line="15" pos:column="24"/></name></decl>;<pos:position pos:line="15" pos:column="25"/></decl_stmt>
        <expr_stmt><expr><name pos:line="16" pos:column="9">err<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">=<pos:position pos:line="16" pos:column="14"/></operator> <call><name pos:line="16" pos:column="15">errorCon<pos:position pos:line="16" pos:column="23"/></name><argument_list pos:line="16" pos:column="23">(<argument><expr><name pos:line="16" pos:column="24">ERR_WRITE_ERROR<pos:position pos:line="16" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="41">HTTP_SERVICE_UNAVAILABLE<pos:position pos:line="16" pos:column="65"/></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="67">gopherState<pos:position pos:line="16" pos:column="78"/></name><operator pos:line="16" pos:column="78">-&gt;<pos:position pos:line="16" pos:column="83"/></operator><name pos:line="16" pos:column="80">fwd<pos:position pos:line="16" pos:column="83"/></name><operator pos:line="16" pos:column="83">-&gt;<pos:position pos:line="16" pos:column="88"/></operator><name pos:line="16" pos:column="85">request<pos:position pos:line="16" pos:column="92"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="94"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="17" pos:column="9">err<pos:position pos:line="17" pos:column="12"/></name><operator pos:line="17" pos:column="12">-&gt;<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="14">xerrno<pos:position pos:line="17" pos:column="20"/></name></name> <operator pos:line="17" pos:column="21">=<pos:position pos:line="17" pos:column="22"/></operator> <name pos:line="17" pos:column="23">errno<pos:position pos:line="17" pos:column="28"/></name></expr>;<pos:position pos:line="17" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="18" pos:column="9">err<pos:position pos:line="18" pos:column="12"/></name><operator pos:line="18" pos:column="12">-&gt;<pos:position pos:line="18" pos:column="17"/></operator><name pos:line="18" pos:column="14">port<pos:position pos:line="18" pos:column="18"/></name></name> <operator pos:line="18" pos:column="19">=<pos:position pos:line="18" pos:column="20"/></operator> <name><name pos:line="18" pos:column="21">gopherState<pos:position pos:line="18" pos:column="32"/></name><operator pos:line="18" pos:column="32">-&gt;<pos:position pos:line="18" pos:column="37"/></operator><name pos:line="18" pos:column="34">fwd<pos:position pos:line="18" pos:column="37"/></name><operator pos:line="18" pos:column="37">-&gt;<pos:position pos:line="18" pos:column="42"/></operator><name pos:line="18" pos:column="39">request<pos:position pos:line="18" pos:column="46"/></name><operator pos:line="18" pos:column="46">-&gt;<pos:position pos:line="18" pos:column="51"/></operator><name pos:line="18" pos:column="48">port<pos:position pos:line="18" pos:column="52"/></name></name></expr>;<pos:position pos:line="18" pos:column="53"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="19" pos:column="9">err<pos:position pos:line="19" pos:column="12"/></name><operator pos:line="19" pos:column="12">-&gt;<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="14">url<pos:position pos:line="19" pos:column="17"/></name></name> <operator pos:line="19" pos:column="18">=<pos:position pos:line="19" pos:column="19"/></operator> <call><name pos:line="19" pos:column="20">xstrdup<pos:position pos:line="19" pos:column="27"/></name><argument_list pos:line="19" pos:column="27">(<argument><expr><call><name><name pos:line="19" pos:column="28">entry<pos:position pos:line="19" pos:column="33"/></name><operator pos:line="19" pos:column="33">-&gt;<pos:position pos:line="19" pos:column="38"/></operator><name pos:line="19" pos:column="35">url<pos:position pos:line="19" pos:column="38"/></name></name><argument_list pos:line="19" pos:column="38">()<pos:position pos:line="19" pos:column="40"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="20" pos:column="9">gopherState<pos:position pos:line="20" pos:column="20"/></name><operator pos:line="20" pos:column="20">-&gt;<pos:position pos:line="20" pos:column="25"/></operator><name pos:line="20" pos:column="22">fwd<pos:position pos:line="20" pos:column="25"/></name><operator pos:line="20" pos:column="25">-&gt;<pos:position pos:line="20" pos:column="30"/></operator><name pos:line="20" pos:column="27">fail<pos:position pos:line="20" pos:column="31"/></name></name><argument_list pos:line="20" pos:column="31">(<argument><expr><name pos:line="20" pos:column="32">err<pos:position pos:line="20" pos:column="35"/></name></expr></argument>)<pos:position pos:line="20" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">comm_close<pos:position pos:line="21" pos:column="19"/></name><argument_list pos:line="21" pos:column="19">(<argument><expr><name pos:line="21" pos:column="20">fd<pos:position pos:line="21" pos:column="22"/></name></expr></argument>)<pos:position pos:line="21" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="24"/></expr_stmt>

        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">buf<pos:position pos:line="23" pos:column="16"/></name></expr>)<pos:position pos:line="23" pos:column="17"/></condition><then pos:line="23" pos:column="17">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="13">memFree<pos:position pos:line="24" pos:column="20"/></name><argument_list pos:line="24" pos:column="20">(<argument><expr><name pos:line="24" pos:column="21">buf<pos:position pos:line="24" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="26">MEM_4K_BUF<pos:position pos:line="24" pos:column="36"/></name></expr></argument>)<pos:position pos:line="24" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="38"/></expr_stmt></block></then></if>	<comment type="block" pos:line="24" pos:column="41">/* Allocated by gopherSendRequest. */</comment>

        <return pos:line="26" pos:column="9">return;<pos:position pos:line="26" pos:column="16"/></return>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="29" pos:column="5">/*
     * OK. We successfully reach remote site.  Start MIME typing
     * stuff.  Do it anyway even though request is not HTML type.
     */</comment>
    <expr_stmt><expr><call><name><name pos:line="33" pos:column="5">entry<pos:position pos:line="33" pos:column="10"/></name><operator pos:line="33" pos:column="10">-&gt;<pos:position pos:line="33" pos:column="15"/></operator><name pos:line="33" pos:column="12">buffer<pos:position pos:line="33" pos:column="18"/></name></name><argument_list pos:line="33" pos:column="18">()<pos:position pos:line="33" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="21"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="35" pos:column="5">gopherMimeCreate<pos:position pos:line="35" pos:column="21"/></name><argument_list pos:line="35" pos:column="21">(<argument><expr><name pos:line="35" pos:column="22">gopherState<pos:position pos:line="35" pos:column="33"/></name></expr></argument>)<pos:position pos:line="35" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="35"/></expr_stmt>

    <switch pos:line="37" pos:column="5">switch <condition pos:line="37" pos:column="12">(<expr><name><name pos:line="37" pos:column="13">gopherState<pos:position pos:line="37" pos:column="24"/></name><operator pos:line="37" pos:column="24">-&gt;<pos:position pos:line="37" pos:column="29"/></operator><name pos:line="37" pos:column="26">type_id<pos:position pos:line="37" pos:column="33"/></name></name></expr>)<pos:position pos:line="37" pos:column="34"/></condition> <block pos:line="37" pos:column="35">{

    <case pos:line="39" pos:column="5">case <expr><name pos:line="39" pos:column="10">GOPHER_DIRECTORY<pos:position pos:line="39" pos:column="26"/></name></expr>:<pos:position pos:line="39" pos:column="27"/></case>
        <comment type="block" pos:line="40" pos:column="9">/* we got to convert it first */</comment>
        <expr_stmt><expr><name><name pos:line="41" pos:column="9">gopherState<pos:position pos:line="41" pos:column="20"/></name><operator pos:line="41" pos:column="20">-&gt;<pos:position pos:line="41" pos:column="25"/></operator><name pos:line="41" pos:column="22">conversion<pos:position pos:line="41" pos:column="32"/></name></name> <operator pos:line="41" pos:column="33">=<pos:position pos:line="41" pos:column="34"/></operator> <name><name pos:line="41" pos:column="35">gopher_ds<pos:position pos:line="41" pos:column="44"/></name><operator pos:line="41" pos:column="44">::<pos:position pos:line="41" pos:column="46"/></operator><name pos:line="41" pos:column="46">HTML_DIR<pos:position pos:line="41" pos:column="54"/></name></name></expr>;<pos:position pos:line="41" pos:column="55"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="42" pos:column="9">gopherState<pos:position pos:line="42" pos:column="20"/></name><operator pos:line="42" pos:column="20">-&gt;<pos:position pos:line="42" pos:column="25"/></operator><name pos:line="42" pos:column="22">HTML_header_added<pos:position pos:line="42" pos:column="39"/></name></name> <operator pos:line="42" pos:column="40">=<pos:position pos:line="42" pos:column="41"/></operator> <literal type="number" pos:line="42" pos:column="42">0<pos:position pos:line="42" pos:column="43"/></literal></expr>;<pos:position pos:line="42" pos:column="44"/></expr_stmt>
        <break pos:line="43" pos:column="9">break;<pos:position pos:line="43" pos:column="15"/></break>

    <case pos:line="45" pos:column="5">case <expr><name pos:line="45" pos:column="10">GOPHER_INDEX<pos:position pos:line="45" pos:column="22"/></name></expr>:<pos:position pos:line="45" pos:column="23"/></case>
        <comment type="block" pos:line="46" pos:column="9">/* we got to convert it first */</comment>
        <expr_stmt><expr><name><name pos:line="47" pos:column="9">gopherState<pos:position pos:line="47" pos:column="20"/></name><operator pos:line="47" pos:column="20">-&gt;<pos:position pos:line="47" pos:column="25"/></operator><name pos:line="47" pos:column="22">conversion<pos:position pos:line="47" pos:column="32"/></name></name> <operator pos:line="47" pos:column="33">=<pos:position pos:line="47" pos:column="34"/></operator> <name><name pos:line="47" pos:column="35">gopher_ds<pos:position pos:line="47" pos:column="44"/></name><operator pos:line="47" pos:column="44">::<pos:position pos:line="47" pos:column="46"/></operator><name pos:line="47" pos:column="46">HTML_INDEX_RESULT<pos:position pos:line="47" pos:column="63"/></name></name></expr>;<pos:position pos:line="47" pos:column="64"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="48" pos:column="9">gopherState<pos:position pos:line="48" pos:column="20"/></name><operator pos:line="48" pos:column="20">-&gt;<pos:position pos:line="48" pos:column="25"/></operator><name pos:line="48" pos:column="22">HTML_header_added<pos:position pos:line="48" pos:column="39"/></name></name> <operator pos:line="48" pos:column="40">=<pos:position pos:line="48" pos:column="41"/></operator> <literal type="number" pos:line="48" pos:column="42">0<pos:position pos:line="48" pos:column="43"/></literal></expr>;<pos:position pos:line="48" pos:column="44"/></expr_stmt>
        <break pos:line="49" pos:column="9">break;<pos:position pos:line="49" pos:column="15"/></break>

    <case pos:line="51" pos:column="5">case <expr><name pos:line="51" pos:column="10">GOPHER_CSO<pos:position pos:line="51" pos:column="20"/></name></expr>:<pos:position pos:line="51" pos:column="21"/></case>
        <comment type="block" pos:line="52" pos:column="9">/* we got to convert it first */</comment>
        <expr_stmt><expr><name><name pos:line="53" pos:column="9">gopherState<pos:position pos:line="53" pos:column="20"/></name><operator pos:line="53" pos:column="20">-&gt;<pos:position pos:line="53" pos:column="25"/></operator><name pos:line="53" pos:column="22">conversion<pos:position pos:line="53" pos:column="32"/></name></name> <operator pos:line="53" pos:column="33">=<pos:position pos:line="53" pos:column="34"/></operator> <name><name pos:line="53" pos:column="35">gopher_ds<pos:position pos:line="53" pos:column="44"/></name><operator pos:line="53" pos:column="44">::<pos:position pos:line="53" pos:column="46"/></operator><name pos:line="53" pos:column="46">HTML_CSO_RESULT<pos:position pos:line="53" pos:column="61"/></name></name></expr>;<pos:position pos:line="53" pos:column="62"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="54" pos:column="9">gopherState<pos:position pos:line="54" pos:column="20"/></name><operator pos:line="54" pos:column="20">-&gt;<pos:position pos:line="54" pos:column="25"/></operator><name pos:line="54" pos:column="22">cso_recno<pos:position pos:line="54" pos:column="31"/></name></name> <operator pos:line="54" pos:column="32">=<pos:position pos:line="54" pos:column="33"/></operator> <literal type="number" pos:line="54" pos:column="34">0<pos:position pos:line="54" pos:column="35"/></literal></expr>;<pos:position pos:line="54" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="55" pos:column="9">gopherState<pos:position pos:line="55" pos:column="20"/></name><operator pos:line="55" pos:column="20">-&gt;<pos:position pos:line="55" pos:column="25"/></operator><name pos:line="55" pos:column="22">HTML_header_added<pos:position pos:line="55" pos:column="39"/></name></name> <operator pos:line="55" pos:column="40">=<pos:position pos:line="55" pos:column="41"/></operator> <literal type="number" pos:line="55" pos:column="42">0<pos:position pos:line="55" pos:column="43"/></literal></expr>;<pos:position pos:line="55" pos:column="44"/></expr_stmt>
        <break pos:line="56" pos:column="9">break;<pos:position pos:line="56" pos:column="15"/></break>

    <default pos:line="58" pos:column="5">default:<pos:position pos:line="58" pos:column="13"/></default>
        <expr_stmt><expr><name><name pos:line="59" pos:column="9">gopherState<pos:position pos:line="59" pos:column="20"/></name><operator pos:line="59" pos:column="20">-&gt;<pos:position pos:line="59" pos:column="25"/></operator><name pos:line="59" pos:column="22">conversion<pos:position pos:line="59" pos:column="32"/></name></name> <operator pos:line="59" pos:column="33">=<pos:position pos:line="59" pos:column="34"/></operator> <name><name pos:line="59" pos:column="35">gopher_ds<pos:position pos:line="59" pos:column="44"/></name><operator pos:line="59" pos:column="44">::<pos:position pos:line="59" pos:column="46"/></operator><name pos:line="59" pos:column="46">NORMAL<pos:position pos:line="59" pos:column="52"/></name></name></expr>;<pos:position pos:line="59" pos:column="53"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="60" pos:column="9">entry<pos:position pos:line="60" pos:column="14"/></name><operator pos:line="60" pos:column="14">-&gt;<pos:position pos:line="60" pos:column="19"/></operator><name pos:line="60" pos:column="16">flush<pos:position pos:line="60" pos:column="21"/></name></name><argument_list pos:line="60" pos:column="21">()<pos:position pos:line="60" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="61" pos:column="6"/></block></switch>

    <comment type="block" pos:line="63" pos:column="5">/* Schedule read reply. */</comment>
    <decl_stmt><decl><type><name><name pos:line="64" pos:column="5">AsyncCall<pos:position pos:line="64" pos:column="14"/></name><operator pos:line="64" pos:column="14">::<pos:position pos:line="64" pos:column="16"/></operator><name pos:line="64" pos:column="16">Pointer<pos:position pos:line="64" pos:column="23"/></name></name></type> <name pos:line="64" pos:column="24">call<pos:position pos:line="64" pos:column="28"/></name> <init pos:line="64" pos:column="29">=  <expr><call><name pos:line="64" pos:column="32">commCbCall<pos:position pos:line="64" pos:column="42"/></name><argument_list pos:line="64" pos:column="42">(<argument><expr><literal type="number" pos:line="64" pos:column="43">10<pos:position pos:line="64" pos:column="45"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="64" pos:column="46">5<pos:position pos:line="64" pos:column="47"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="49">"gopherReadReply"<pos:position pos:line="64" pos:column="66"/></literal></expr></argument>,
                                          <argument><expr><call><name pos:line="65" pos:column="43">CommIoCbPtrFun<pos:position pos:line="65" pos:column="57"/></name><argument_list pos:line="65" pos:column="57">(<argument><expr><name pos:line="65" pos:column="58">gopherReadReply<pos:position pos:line="65" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="75">gopherState<pos:position pos:line="65" pos:column="86"/></name></expr></argument>)<pos:position pos:line="65" pos:column="87"/></argument_list></call></expr></argument>)<pos:position pos:line="65" pos:column="88"/></argument_list></call></expr></init></decl>;<pos:position pos:line="65" pos:column="89"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="66" pos:column="5">entry<pos:position pos:line="66" pos:column="10"/></name><operator pos:line="66" pos:column="10">-&gt;<pos:position pos:line="66" pos:column="15"/></operator><name pos:line="66" pos:column="12">delayAwareRead<pos:position pos:line="66" pos:column="26"/></name></name><argument_list pos:line="66" pos:column="26">(<argument><expr><name pos:line="66" pos:column="27">fd<pos:position pos:line="66" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="66" pos:column="31">gopherState<pos:position pos:line="66" pos:column="42"/></name><operator pos:line="66" pos:column="42">-&gt;<pos:position pos:line="66" pos:column="47"/></operator><name pos:line="66" pos:column="44">replybuf<pos:position pos:line="66" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="54">BUFSIZ<pos:position pos:line="66" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="62">call<pos:position pos:line="66" pos:column="66"/></name></expr></argument>)<pos:position pos:line="66" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="68"/></expr_stmt>

    <if pos:line="68" pos:column="5">if <condition pos:line="68" pos:column="8">(<expr><name pos:line="68" pos:column="9">buf<pos:position pos:line="68" pos:column="12"/></name></expr>)<pos:position pos:line="68" pos:column="13"/></condition><then pos:line="68" pos:column="13">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="69" pos:column="9">memFree<pos:position pos:line="69" pos:column="16"/></name><argument_list pos:line="69" pos:column="16">(<argument><expr><name pos:line="69" pos:column="17">buf<pos:position pos:line="69" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="22">MEM_4K_BUF<pos:position pos:line="69" pos:column="32"/></name></expr></argument>)<pos:position pos:line="69" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="34"/></expr_stmt></block></then></if>	<comment type="block" pos:line="69" pos:column="41">/* Allocated by gopherSendRequest. */</comment>
}<pos:position pos:line="70" pos:column="2"/></block></function></unit>
