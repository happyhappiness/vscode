<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1938_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">StoreController<pos:position pos:line="2" pos:column="16"/></name><operator pos:line="2" pos:column="16">::<pos:position pos:line="2" pos:column="18"/></operator><name pos:line="2" pos:column="18">keepForLocalMemoryCache<pos:position pos:line="2" pos:column="41"/></name></name><parameter_list pos:line="2" pos:column="41">(<parameter><decl><type><specifier pos:line="2" pos:column="42">const<pos:position pos:line="2" pos:column="47"/></specifier> <name pos:line="2" pos:column="48">StoreEntry<pos:position pos:line="2" pos:column="58"/></name> <modifier pos:line="2" pos:column="59">&amp;<pos:position pos:line="2" pos:column="64"/></modifier></type><name pos:line="2" pos:column="60">e<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="62"/></parameter_list> <specifier pos:line="2" pos:column="63">const<pos:position pos:line="2" pos:column="68"/></specifier>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">!<pos:position pos:line="4" pos:column="10"/></operator><call><name><name pos:line="4" pos:column="10">e<pos:position pos:line="4" pos:column="11"/></name><operator pos:line="4" pos:column="11">.<pos:position pos:line="4" pos:column="12"/></operator><name pos:line="4" pos:column="12">memoryCachable<pos:position pos:line="4" pos:column="26"/></name></name><argument_list pos:line="4" pos:column="26">()<pos:position pos:line="4" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="29"/></condition><then pos:line="4" pos:column="29">
        <block type="pseudo"><return pos:line="5" pos:column="9">return <expr><literal type="boolean" pos:line="5" pos:column="16">false<pos:position pos:line="5" pos:column="21"/></literal></expr>;<pos:position pos:line="5" pos:column="22"/></return></block></then></if>

    <comment type="line" pos:line="7" pos:column="5">// does the current and expected size obey memory caching limits?</comment>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">assert<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><name><name pos:line="8" pos:column="12">e<pos:position pos:line="8" pos:column="13"/></name><operator pos:line="8" pos:column="13">.<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">mem_obj<pos:position pos:line="8" pos:column="21"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="23"/></expr_stmt>
    <decl_stmt><decl><type><specifier pos:line="9" pos:column="5">const<pos:position pos:line="9" pos:column="10"/></specifier> <name pos:line="9" pos:column="11">int64_t<pos:position pos:line="9" pos:column="18"/></name></type> <name pos:line="9" pos:column="19">loadedSize<pos:position pos:line="9" pos:column="29"/></name> <init pos:line="9" pos:column="30">= <expr><call><name><name pos:line="9" pos:column="32">e<pos:position pos:line="9" pos:column="33"/></name><operator pos:line="9" pos:column="33">.<pos:position pos:line="9" pos:column="34"/></operator><name pos:line="9" pos:column="34">mem_obj<pos:position pos:line="9" pos:column="41"/></name><operator pos:line="9" pos:column="41">-&gt;<pos:position pos:line="9" pos:column="46"/></operator><name pos:line="9" pos:column="43">endOffset<pos:position pos:line="9" pos:column="52"/></name></name><argument_list pos:line="9" pos:column="52">()<pos:position pos:line="9" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="55"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="10" pos:column="5">const<pos:position pos:line="10" pos:column="10"/></specifier> <name pos:line="10" pos:column="11">int64_t<pos:position pos:line="10" pos:column="18"/></name></type> <name pos:line="10" pos:column="19">expectedSize<pos:position pos:line="10" pos:column="31"/></name> <init pos:line="10" pos:column="32">= <expr><call><name><name pos:line="10" pos:column="34">e<pos:position pos:line="10" pos:column="35"/></name><operator pos:line="10" pos:column="35">.<pos:position pos:line="10" pos:column="36"/></operator><name pos:line="10" pos:column="36">mem_obj<pos:position pos:line="10" pos:column="43"/></name><operator pos:line="10" pos:column="43">-&gt;<pos:position pos:line="10" pos:column="48"/></operator><name pos:line="10" pos:column="45">expectedReplySize<pos:position pos:line="10" pos:column="62"/></name></name><argument_list pos:line="10" pos:column="62">()<pos:position pos:line="10" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="65"/></decl_stmt> <comment type="line" pos:line="10" pos:column="66">// may be &lt; 0</comment>
    <decl_stmt><decl><type><specifier pos:line="11" pos:column="5">const<pos:position pos:line="11" pos:column="10"/></specifier> <name pos:line="11" pos:column="11">int64_t<pos:position pos:line="11" pos:column="18"/></name></type> <name pos:line="11" pos:column="19">ramSize<pos:position pos:line="11" pos:column="26"/></name> <init pos:line="11" pos:column="27">= <expr><call><name pos:line="11" pos:column="29">max<pos:position pos:line="11" pos:column="32"/></name><argument_list pos:line="11" pos:column="32">(<argument><expr><name pos:line="11" pos:column="33">loadedSize<pos:position pos:line="11" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="45">expectedSize<pos:position pos:line="11" pos:column="57"/></name></expr></argument>)<pos:position pos:line="11" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="59"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="12" pos:column="5">const<pos:position pos:line="12" pos:column="10"/></specifier> <name pos:line="12" pos:column="11">int64_t<pos:position pos:line="12" pos:column="18"/></name></type> <name pos:line="12" pos:column="19">ramLimit<pos:position pos:line="12" pos:column="27"/></name> <init pos:line="12" pos:column="28">= <expr><call><name pos:line="12" pos:column="30">min<pos:position pos:line="12" pos:column="33"/></name><argument_list pos:line="12" pos:column="33">(
                                 <argument><expr><cast type="static" pos:line="13" pos:column="34">static_cast<argument_list type="generic" pos:line="13" pos:column="45">&lt;<argument><expr><name pos:line="13" pos:column="46">int64_t<pos:position pos:line="13" pos:column="53"/></name></expr></argument>&gt;<pos:position pos:line="13" pos:column="57"/></argument_list><argument_list pos:line="13" pos:column="54">(<argument><expr><name><name pos:line="13" pos:column="55">Config<pos:position pos:line="13" pos:column="61"/></name><operator pos:line="13" pos:column="61">.<pos:position pos:line="13" pos:column="62"/></operator><name pos:line="13" pos:column="62">memMaxSize<pos:position pos:line="13" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="73"/></argument_list></cast></expr></argument>,
                                 <argument><expr><cast type="static" pos:line="14" pos:column="34">static_cast<argument_list type="generic" pos:line="14" pos:column="45">&lt;<argument><expr><name pos:line="14" pos:column="46">int64_t<pos:position pos:line="14" pos:column="53"/></name></expr></argument>&gt;<pos:position pos:line="14" pos:column="57"/></argument_list><argument_list pos:line="14" pos:column="54">(<argument><expr><name><name pos:line="14" pos:column="55">Config<pos:position pos:line="14" pos:column="61"/></name><operator pos:line="14" pos:column="61">.<pos:position pos:line="14" pos:column="62"/></operator><name pos:line="14" pos:column="62">Store<pos:position pos:line="14" pos:column="67"/></name><operator pos:line="14" pos:column="67">.<pos:position pos:line="14" pos:column="68"/></operator><name pos:line="14" pos:column="68">maxInMemObjSize<pos:position pos:line="14" pos:column="83"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="84"/></argument_list></cast></expr></argument>)<pos:position pos:line="14" pos:column="85"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="86"/></decl_stmt>
    <return pos:line="15" pos:column="5">return <expr><name pos:line="15" pos:column="12">ramSize<pos:position pos:line="15" pos:column="19"/></name> <operator pos:line="15" pos:column="20">&lt;=<pos:position pos:line="15" pos:column="25"/></operator> <name pos:line="15" pos:column="23">ramLimit<pos:position pos:line="15" pos:column="31"/></name></expr>;<pos:position pos:line="15" pos:column="32"/></return>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
