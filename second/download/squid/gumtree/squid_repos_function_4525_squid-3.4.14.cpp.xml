<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4525_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ACLHTTPHeaderData<pos:position pos:line="2" pos:column="18"/></name><operator pos:line="2" pos:column="18">::<pos:position pos:line="2" pos:column="20"/></operator><name pos:line="2" pos:column="20">match<pos:position pos:line="2" pos:column="25"/></name></name><parameter_list pos:line="2" pos:column="25">(<parameter><decl><type><name pos:line="2" pos:column="26">HttpHeader<pos:position pos:line="2" pos:column="36"/></name><modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type> <name pos:line="2" pos:column="38">hdr<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="42"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">hdr<pos:position pos:line="4" pos:column="12"/></name> <operator pos:line="4" pos:column="13">==<pos:position pos:line="4" pos:column="15"/></operator> <name pos:line="4" pos:column="16">NULL<pos:position pos:line="4" pos:column="20"/></name></expr>)<pos:position pos:line="4" pos:column="21"/></condition><then pos:line="4" pos:column="21">
        <block type="pseudo"><return pos:line="5" pos:column="9">return <expr><literal type="boolean" pos:line="5" pos:column="16">false<pos:position pos:line="5" pos:column="21"/></literal></expr>;<pos:position pos:line="5" pos:column="22"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">debugs<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><literal type="number" pos:line="7" pos:column="12">28<pos:position pos:line="7" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="16">3<pos:position pos:line="7" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="19">"aclHeaderData::match: checking '"<pos:position pos:line="7" pos:column="53"/></literal> <operator pos:line="7" pos:column="54">&lt;&lt;<pos:position pos:line="7" pos:column="62"/></operator> <name pos:line="7" pos:column="57">hdrName<pos:position pos:line="7" pos:column="64"/></name> <operator pos:line="7" pos:column="65">&lt;&lt;<pos:position pos:line="7" pos:column="73"/></operator> <literal type="string" pos:line="7" pos:column="68">"'"<pos:position pos:line="7" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="73"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="9" pos:column="5">String<pos:position pos:line="9" pos:column="11"/></name></type> <name pos:line="9" pos:column="12">value<pos:position pos:line="9" pos:column="17"/></name></decl>;<pos:position pos:line="9" pos:column="18"/></decl_stmt>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">hdrId<pos:position pos:line="10" pos:column="14"/></name> <operator pos:line="10" pos:column="15">!=<pos:position pos:line="10" pos:column="17"/></operator> <name pos:line="10" pos:column="18">HDR_BAD_HDR<pos:position pos:line="10" pos:column="29"/></name></expr>)<pos:position pos:line="10" pos:column="30"/></condition><then pos:line="10" pos:column="30"> <block pos:line="10" pos:column="31">{
        <if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">!<pos:position pos:line="11" pos:column="14"/></operator><call><name><name pos:line="11" pos:column="14">hdr<pos:position pos:line="11" pos:column="17"/></name><operator pos:line="11" pos:column="17">-&gt;<pos:position pos:line="11" pos:column="22"/></operator><name pos:line="11" pos:column="19">has<pos:position pos:line="11" pos:column="22"/></name></name><argument_list pos:line="11" pos:column="22">(<argument><expr><name pos:line="11" pos:column="23">hdrId<pos:position pos:line="11" pos:column="28"/></name></expr></argument>)<pos:position pos:line="11" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="30"/></condition><then pos:line="11" pos:column="30">
            <block type="pseudo"><return pos:line="12" pos:column="13">return <expr><literal type="boolean" pos:line="12" pos:column="20">false<pos:position pos:line="12" pos:column="25"/></literal></expr>;<pos:position pos:line="12" pos:column="26"/></return></block></then></if>
        <expr_stmt><expr><name pos:line="13" pos:column="9">value<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">=<pos:position pos:line="13" pos:column="16"/></operator> <call><name><name pos:line="13" pos:column="17">hdr<pos:position pos:line="13" pos:column="20"/></name><operator pos:line="13" pos:column="20">-&gt;<pos:position pos:line="13" pos:column="25"/></operator><name pos:line="13" pos:column="22">getStrOrList<pos:position pos:line="13" pos:column="34"/></name></name><argument_list pos:line="13" pos:column="34">(<argument><expr><name pos:line="13" pos:column="35">hdrId<pos:position pos:line="13" pos:column="40"/></name></expr></argument>)<pos:position pos:line="13" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></then> <else pos:line="14" pos:column="7">else <block pos:line="14" pos:column="12">{
        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><operator pos:line="15" pos:column="13">!<pos:position pos:line="15" pos:column="14"/></operator><call><name><name pos:line="15" pos:column="14">hdr<pos:position pos:line="15" pos:column="17"/></name><operator pos:line="15" pos:column="17">-&gt;<pos:position pos:line="15" pos:column="22"/></operator><name pos:line="15" pos:column="19">getByNameIfPresent<pos:position pos:line="15" pos:column="37"/></name></name><argument_list pos:line="15" pos:column="37">(<argument><expr><call><name><name pos:line="15" pos:column="38">hdrName<pos:position pos:line="15" pos:column="45"/></name><operator pos:line="15" pos:column="45">.<pos:position pos:line="15" pos:column="46"/></operator><name pos:line="15" pos:column="46">termedBuf<pos:position pos:line="15" pos:column="55"/></name></name><argument_list pos:line="15" pos:column="55">()<pos:position pos:line="15" pos:column="57"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="15" pos:column="59">value<pos:position pos:line="15" pos:column="64"/></name></expr></argument>)<pos:position pos:line="15" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="66"/></condition><then pos:line="15" pos:column="66">
            <block type="pseudo"><return pos:line="16" pos:column="13">return <expr><literal type="boolean" pos:line="16" pos:column="20">false<pos:position pos:line="16" pos:column="25"/></literal></expr>;<pos:position pos:line="16" pos:column="26"/></return></block></then></if>
    }<pos:position pos:line="17" pos:column="6"/></block></else></if>

    <comment type="line" pos:line="19" pos:column="5">// By now, we know the header is present, but:</comment>
    <comment type="line" pos:line="20" pos:column="5">// HttpHeader::get*() return an undefined String for empty header values;</comment>
    <comment type="line" pos:line="21" pos:column="5">// String::termedBuf() returns NULL for undefined Strings; and</comment>
    <comment type="line" pos:line="22" pos:column="5">// ACLRegexData::match() always fails on NULL strings.</comment>
    <comment type="line" pos:line="23" pos:column="5">// This makes it possible to detect an empty header value using regex:</comment>
    <decl_stmt><decl><type><specifier pos:line="24" pos:column="5">const<pos:position pos:line="24" pos:column="10"/></specifier> <name pos:line="24" pos:column="11">char<pos:position pos:line="24" pos:column="15"/></name> <modifier pos:line="24" pos:column="16">*<pos:position pos:line="24" pos:column="17"/></modifier></type><name pos:line="24" pos:column="17">cvalue<pos:position pos:line="24" pos:column="23"/></name> <init pos:line="24" pos:column="24">= <expr><ternary><condition><expr><call><name><name pos:line="24" pos:column="26">value<pos:position pos:line="24" pos:column="31"/></name><operator pos:line="24" pos:column="31">.<pos:position pos:line="24" pos:column="32"/></operator><name pos:line="24" pos:column="32">defined<pos:position pos:line="24" pos:column="39"/></name></name><argument_list pos:line="24" pos:column="39">()<pos:position pos:line="24" pos:column="41"/></argument_list></call></expr> ?<pos:position pos:line="24" pos:column="43"/></condition><then pos:line="24" pos:column="43"> <expr><call><name><name pos:line="24" pos:column="44">value<pos:position pos:line="24" pos:column="49"/></name><operator pos:line="24" pos:column="49">.<pos:position pos:line="24" pos:column="50"/></operator><name pos:line="24" pos:column="50">termedBuf<pos:position pos:line="24" pos:column="59"/></name></name><argument_list pos:line="24" pos:column="59">()<pos:position pos:line="24" pos:column="61"/></argument_list></call></expr> <pos:position pos:line="24" pos:column="62"/></then><else pos:line="24" pos:column="62">: <expr><literal type="string" pos:line="24" pos:column="64">""<pos:position pos:line="24" pos:column="66"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="24" pos:column="67"/></decl_stmt>
    <return pos:line="25" pos:column="5">return <expr><call><name><name pos:line="25" pos:column="12">regex_rule<pos:position pos:line="25" pos:column="22"/></name><operator pos:line="25" pos:column="22">-&gt;<pos:position pos:line="25" pos:column="27"/></operator><name pos:line="25" pos:column="24">match<pos:position pos:line="25" pos:column="29"/></name></name><argument_list pos:line="25" pos:column="29">(<argument><expr><name pos:line="25" pos:column="30">cvalue<pos:position pos:line="25" pos:column="36"/></name></expr></argument>)<pos:position pos:line="25" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="38"/></return>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
