<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6381_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">String<pos:position pos:line="1" pos:column="7"/></name></type>
<name><name pos:line="2" pos:column="1">Ipc<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">Mem<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">Segment<pos:position pos:line="2" pos:column="18"/></name><operator pos:line="2" pos:column="18">::<pos:position pos:line="2" pos:column="20"/></operator><name pos:line="2" pos:column="20">GenerateName<pos:position pos:line="2" pos:column="32"/></name></name><parameter_list pos:line="2" pos:column="32">(<parameter><decl><type><specifier pos:line="2" pos:column="33">const<pos:position pos:line="2" pos:column="38"/></specifier> <name pos:line="2" pos:column="39">char<pos:position pos:line="2" pos:column="43"/></name> <modifier pos:line="2" pos:column="44">*<pos:position pos:line="2" pos:column="45"/></modifier></type><name pos:line="2" pos:column="45">id<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="48"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">BasePath<pos:position pos:line="4" pos:column="20"/></name> <operator pos:line="4" pos:column="21">&amp;&amp;<pos:position pos:line="4" pos:column="31"/></operator> <operator pos:line="4" pos:column="24">*<pos:position pos:line="4" pos:column="25"/></operator><name pos:line="4" pos:column="25">BasePath<pos:position pos:line="4" pos:column="33"/></name></expr></argument>)<pos:position pos:line="4" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="35"/></expr_stmt>
    <decl_stmt><decl><specifier pos:line="5" pos:column="5">static<pos:position pos:line="5" pos:column="11"/></specifier> <type><specifier pos:line="5" pos:column="12">const<pos:position pos:line="5" pos:column="17"/></specifier> <name pos:line="5" pos:column="18">bool<pos:position pos:line="5" pos:column="22"/></name></type> <name pos:line="5" pos:column="23">nameIsPath<pos:position pos:line="5" pos:column="33"/></name> <init pos:line="5" pos:column="34">= <expr><call><name pos:line="5" pos:column="36">shm_portable_segment_name_is_path<pos:position pos:line="5" pos:column="69"/></name><argument_list pos:line="5" pos:column="69">()<pos:position pos:line="5" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="72"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">String<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">name<pos:position pos:line="6" pos:column="16"/></name></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name pos:line="7" pos:column="9">nameIsPath<pos:position pos:line="7" pos:column="19"/></name></expr>)<pos:position pos:line="7" pos:column="20"/></condition><then pos:line="7" pos:column="20"> <block pos:line="7" pos:column="21">{
        <expr_stmt><expr><call><name><name pos:line="8" pos:column="9">name<pos:position pos:line="8" pos:column="13"/></name><operator pos:line="8" pos:column="13">.<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">append<pos:position pos:line="8" pos:column="20"/></name></name><argument_list pos:line="8" pos:column="20">(<argument><expr><name pos:line="8" pos:column="21">BasePath<pos:position pos:line="8" pos:column="29"/></name></expr></argument>)<pos:position pos:line="8" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="31"/></expr_stmt>
        <if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name><name pos:line="9" pos:column="13">name<pos:position pos:line="9" pos:column="17"/></name><index pos:line="9" pos:column="17">[<expr><call><name><name pos:line="9" pos:column="18">name<pos:position pos:line="9" pos:column="22"/></name><operator pos:line="9" pos:column="22">.<pos:position pos:line="9" pos:column="23"/></operator><name pos:line="9" pos:column="23">size<pos:position pos:line="9" pos:column="27"/></name></name><argument_list pos:line="9" pos:column="27">()<pos:position pos:line="9" pos:column="29"/></argument_list></call><operator pos:line="9" pos:column="29">-<pos:position pos:line="9" pos:column="30"/></operator><literal type="number" pos:line="9" pos:column="30">1<pos:position pos:line="9" pos:column="31"/></literal></expr>]<pos:position pos:line="9" pos:column="32"/></index></name> <operator pos:line="9" pos:column="33">!=<pos:position pos:line="9" pos:column="35"/></operator> <literal type="char" pos:line="9" pos:column="36">'/'<pos:position pos:line="9" pos:column="39"/></literal></expr>)<pos:position pos:line="9" pos:column="40"/></condition><then pos:line="9" pos:column="40">
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="10" pos:column="13">name<pos:position pos:line="10" pos:column="17"/></name><operator pos:line="10" pos:column="17">.<pos:position pos:line="10" pos:column="18"/></operator><name pos:line="10" pos:column="18">append<pos:position pos:line="10" pos:column="24"/></name></name><argument_list pos:line="10" pos:column="24">(<argument><expr><literal type="char" pos:line="10" pos:column="25">'/'<pos:position pos:line="10" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="30"/></expr_stmt></block></then></if>
    }<pos:position pos:line="11" pos:column="6"/></block></then> <else pos:line="11" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="12" pos:column="9">name<pos:position pos:line="12" pos:column="13"/></name><operator pos:line="12" pos:column="13">.<pos:position pos:line="12" pos:column="14"/></operator><name pos:line="12" pos:column="14">append<pos:position pos:line="12" pos:column="20"/></name></name><argument_list pos:line="12" pos:column="20">(<argument><expr><literal type="string" pos:line="12" pos:column="21">"/squid-"<pos:position pos:line="12" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="32"/></expr_stmt></block></else></if>

    <comment type="line" pos:line="14" pos:column="5">// append id, replacing slashes with dots</comment>
    <for pos:line="15" pos:column="5">for <control pos:line="15" pos:column="9">(<init><decl><type><specifier pos:line="15" pos:column="10">const<pos:position pos:line="15" pos:column="15"/></specifier> <name pos:line="15" pos:column="16">char<pos:position pos:line="15" pos:column="20"/></name> <modifier pos:line="15" pos:column="21">*<pos:position pos:line="15" pos:column="22"/></modifier></type><name pos:line="15" pos:column="22">slash<pos:position pos:line="15" pos:column="27"/></name> <init pos:line="15" pos:column="28">= <expr><call><name pos:line="15" pos:column="30">strchr<pos:position pos:line="15" pos:column="36"/></name><argument_list pos:line="15" pos:column="36">(<argument><expr><name pos:line="15" pos:column="37">id<pos:position pos:line="15" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="15" pos:column="41">'/'<pos:position pos:line="15" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="46"/></init> <condition><expr><name pos:line="15" pos:column="47">slash<pos:position pos:line="15" pos:column="52"/></name></expr>;<pos:position pos:line="15" pos:column="53"/></condition> <incr><expr><name pos:line="15" pos:column="54">slash<pos:position pos:line="15" pos:column="59"/></name> <operator pos:line="15" pos:column="60">=<pos:position pos:line="15" pos:column="61"/></operator> <call><name pos:line="15" pos:column="62">strchr<pos:position pos:line="15" pos:column="68"/></name><argument_list pos:line="15" pos:column="68">(<argument><expr><name pos:line="15" pos:column="69">id<pos:position pos:line="15" pos:column="71"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="15" pos:column="73">'/'<pos:position pos:line="15" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="77"/></argument_list></call></expr></incr>)<pos:position pos:line="15" pos:column="78"/></control> <block pos:line="15" pos:column="79">{
        <if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">id<pos:position pos:line="16" pos:column="15"/></name> <operator pos:line="16" pos:column="16">!=<pos:position pos:line="16" pos:column="18"/></operator> <name pos:line="16" pos:column="19">slash<pos:position pos:line="16" pos:column="24"/></name></expr>)<pos:position pos:line="16" pos:column="25"/></condition><then pos:line="16" pos:column="25"> <block pos:line="16" pos:column="26">{
            <expr_stmt><expr><call><name><name pos:line="17" pos:column="13">name<pos:position pos:line="17" pos:column="17"/></name><operator pos:line="17" pos:column="17">.<pos:position pos:line="17" pos:column="18"/></operator><name pos:line="17" pos:column="18">append<pos:position pos:line="17" pos:column="24"/></name></name><argument_list pos:line="17" pos:column="24">(<argument><expr><name pos:line="17" pos:column="25">id<pos:position pos:line="17" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="29">slash<pos:position pos:line="17" pos:column="34"/></name> <operator pos:line="17" pos:column="35">-<pos:position pos:line="17" pos:column="36"/></operator> <name pos:line="17" pos:column="37">id<pos:position pos:line="17" pos:column="39"/></name></expr></argument>)<pos:position pos:line="17" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="41"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="18" pos:column="13">name<pos:position pos:line="18" pos:column="17"/></name><operator pos:line="18" pos:column="17">.<pos:position pos:line="18" pos:column="18"/></operator><name pos:line="18" pos:column="18">append<pos:position pos:line="18" pos:column="24"/></name></name><argument_list pos:line="18" pos:column="24">(<argument><expr><literal type="char" pos:line="18" pos:column="25">'.'<pos:position pos:line="18" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="30"/></expr_stmt>
        }<pos:position pos:line="19" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="20" pos:column="9">id<pos:position pos:line="20" pos:column="11"/></name> <operator pos:line="20" pos:column="12">=<pos:position pos:line="20" pos:column="13"/></operator> <name pos:line="20" pos:column="14">slash<pos:position pos:line="20" pos:column="19"/></name> <operator pos:line="20" pos:column="20">+<pos:position pos:line="20" pos:column="21"/></operator> <literal type="number" pos:line="20" pos:column="22">1<pos:position pos:line="20" pos:column="23"/></literal></expr>;<pos:position pos:line="20" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="21" pos:column="6"/></block></for>
    <expr_stmt><expr><call><name><name pos:line="22" pos:column="5">name<pos:position pos:line="22" pos:column="9"/></name><operator pos:line="22" pos:column="9">.<pos:position pos:line="22" pos:column="10"/></operator><name pos:line="22" pos:column="10">append<pos:position pos:line="22" pos:column="16"/></name></name><argument_list pos:line="22" pos:column="16">(<argument><expr><name pos:line="22" pos:column="17">id<pos:position pos:line="22" pos:column="19"/></name></expr></argument>)<pos:position pos:line="22" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="21"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="24" pos:column="5">name<pos:position pos:line="24" pos:column="9"/></name><operator pos:line="24" pos:column="9">.<pos:position pos:line="24" pos:column="10"/></operator><name pos:line="24" pos:column="10">append<pos:position pos:line="24" pos:column="16"/></name></name><argument_list pos:line="24" pos:column="16">(<argument><expr><literal type="string" pos:line="24" pos:column="17">".shm"<pos:position pos:line="24" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="25"/></expr_stmt> <comment type="line" pos:line="24" pos:column="26">// to distinguish from non-segments when nameIsPath</comment>
    <return pos:line="25" pos:column="5">return <expr><name pos:line="25" pos:column="12">name<pos:position pos:line="25" pos:column="16"/></name></expr>;<pos:position pos:line="25" pos:column="17"/></return>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
