<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5325_squid-3.5.27.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">Fs<pos:position pos:line="1" pos:column="3"/></name><operator pos:line="1" pos:column="3">::<pos:position pos:line="1" pos:column="5"/></operator><name pos:line="1" pos:column="5">Ufs<pos:position pos:line="1" pos:column="8"/></name><operator pos:line="1" pos:column="8">::<pos:position pos:line="1" pos:column="10"/></operator><name pos:line="1" pos:column="10">UFSSwapLogParser<pos:position pos:line="1" pos:column="26"/></name></name> <modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type>
<name><name pos:line="2" pos:column="1">Fs<pos:position pos:line="2" pos:column="3"/></name><operator pos:line="2" pos:column="3">::<pos:position pos:line="2" pos:column="5"/></operator><name pos:line="2" pos:column="5">Ufs<pos:position pos:line="2" pos:column="8"/></name><operator pos:line="2" pos:column="8">::<pos:position pos:line="2" pos:column="10"/></operator><name pos:line="2" pos:column="10">UFSSwapLogParser<pos:position pos:line="2" pos:column="26"/></name><operator pos:line="2" pos:column="26">::<pos:position pos:line="2" pos:column="28"/></operator><name pos:line="2" pos:column="28">GetUFSSwapLogParser<pos:position pos:line="2" pos:column="47"/></name></name><parameter_list pos:line="2" pos:column="47">(<parameter><decl><type><name pos:line="2" pos:column="48">FILE<pos:position pos:line="2" pos:column="52"/></name> <modifier pos:line="2" pos:column="53">*<pos:position pos:line="2" pos:column="54"/></modifier></type><name pos:line="2" pos:column="54">fp<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="57"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">StoreSwapLogHeader<pos:position pos:line="4" pos:column="23"/></name></type> <name pos:line="4" pos:column="24">header<pos:position pos:line="4" pos:column="30"/></name></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><name pos:line="6" pos:column="12">fp<pos:position pos:line="6" pos:column="14"/></name></expr></argument>)<pos:position pos:line="6" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="16"/></expr_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><call><name pos:line="8" pos:column="9">fread<pos:position pos:line="8" pos:column="14"/></name><argument_list pos:line="8" pos:column="14">(<argument><expr><operator pos:line="8" pos:column="15">&amp;<pos:position pos:line="8" pos:column="20"/></operator><name pos:line="8" pos:column="16">header<pos:position pos:line="8" pos:column="22"/></name></expr></argument>, <argument><expr><sizeof pos:line="8" pos:column="24">sizeof<argument_list pos:line="8" pos:column="30">(<argument><expr><name pos:line="8" pos:column="31">StoreSwapLogHeader<pos:position pos:line="8" pos:column="49"/></name></expr></argument>)<pos:position pos:line="8" pos:column="50"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="52">1<pos:position pos:line="8" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="55">fp<pos:position pos:line="8" pos:column="57"/></name></expr></argument>)<pos:position pos:line="8" pos:column="58"/></argument_list></call> <operator pos:line="8" pos:column="59">!=<pos:position pos:line="8" pos:column="61"/></operator> <literal type="number" pos:line="8" pos:column="62">1<pos:position pos:line="8" pos:column="63"/></literal></expr>)<pos:position pos:line="8" pos:column="64"/></condition><then pos:line="8" pos:column="64">
        <block type="pseudo"><return pos:line="9" pos:column="9">return <expr><name pos:line="9" pos:column="16">NULL<pos:position pos:line="9" pos:column="20"/></name></expr>;<pos:position pos:line="9" pos:column="21"/></return></block></then></if>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name><name pos:line="11" pos:column="9">header<pos:position pos:line="11" pos:column="15"/></name><operator pos:line="11" pos:column="15">.<pos:position pos:line="11" pos:column="16"/></operator><name pos:line="11" pos:column="16">op<pos:position pos:line="11" pos:column="18"/></name></name> <operator pos:line="11" pos:column="19">!=<pos:position pos:line="11" pos:column="21"/></operator> <name pos:line="11" pos:column="22">SWAP_LOG_VERSION<pos:position pos:line="11" pos:column="38"/></name></expr>)<pos:position pos:line="11" pos:column="39"/></condition><then pos:line="11" pos:column="39"> <block pos:line="11" pos:column="40">{
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">debugs<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><literal type="number" pos:line="12" pos:column="16">47<pos:position pos:line="12" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="20">DBG_IMPORTANT<pos:position pos:line="12" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="35">"Old swap file detected..."<pos:position pos:line="12" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="64"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">fseek<pos:position pos:line="13" pos:column="14"/></name><argument_list pos:line="13" pos:column="14">(<argument><expr><name pos:line="13" pos:column="15">fp<pos:position pos:line="13" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="19">0<pos:position pos:line="13" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="22">SEEK_SET<pos:position pos:line="13" pos:column="30"/></name></expr></argument>)<pos:position pos:line="13" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="32"/></expr_stmt>
        <return pos:line="14" pos:column="9">return <expr><operator pos:line="14" pos:column="16">new<pos:position pos:line="14" pos:column="19"/></operator> <call><name pos:line="14" pos:column="20">UFSSwapLogParser_v1_32bs<pos:position pos:line="14" pos:column="44"/></name><argument_list pos:line="14" pos:column="44">(<argument><expr><name pos:line="14" pos:column="45">fp<pos:position pos:line="14" pos:column="47"/></name></expr></argument>)<pos:position pos:line="14" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="49"/></return> <comment type="line" pos:line="14" pos:column="50">// Um. 32-bits except time_t, and can't determine that.</comment>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="17" pos:column="5">debugs<pos:position pos:line="17" pos:column="11"/></name><argument_list pos:line="17" pos:column="11">(<argument><expr><literal type="number" pos:line="17" pos:column="12">47<pos:position pos:line="17" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="16">2<pos:position pos:line="17" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="19">"Swap file version: "<pos:position pos:line="17" pos:column="40"/></literal> <operator pos:line="17" pos:column="41">&lt;&lt;<pos:position pos:line="17" pos:column="49"/></operator> <name><name pos:line="17" pos:column="44">header<pos:position pos:line="17" pos:column="50"/></name><operator pos:line="17" pos:column="50">.<pos:position pos:line="17" pos:column="51"/></operator><name pos:line="17" pos:column="51">version<pos:position pos:line="17" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="60"/></expr_stmt>

    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name><name pos:line="19" pos:column="9">header<pos:position pos:line="19" pos:column="15"/></name><operator pos:line="19" pos:column="15">.<pos:position pos:line="19" pos:column="16"/></operator><name pos:line="19" pos:column="16">version<pos:position pos:line="19" pos:column="23"/></name></name> <operator pos:line="19" pos:column="24">==<pos:position pos:line="19" pos:column="26"/></operator> <literal type="number" pos:line="19" pos:column="27">1<pos:position pos:line="19" pos:column="28"/></literal></expr>)<pos:position pos:line="19" pos:column="29"/></condition><then pos:line="19" pos:column="29"> <block pos:line="19" pos:column="30">{
        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><call><name pos:line="20" pos:column="13">fseek<pos:position pos:line="20" pos:column="18"/></name><argument_list pos:line="20" pos:column="18">(<argument><expr><name pos:line="20" pos:column="19">fp<pos:position pos:line="20" pos:column="21"/></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="23">header<pos:position pos:line="20" pos:column="29"/></name><operator pos:line="20" pos:column="29">.<pos:position pos:line="20" pos:column="30"/></operator><name pos:line="20" pos:column="30">record_size<pos:position pos:line="20" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="43">SEEK_SET<pos:position pos:line="20" pos:column="51"/></name></expr></argument>)<pos:position pos:line="20" pos:column="52"/></argument_list></call> <operator pos:line="20" pos:column="53">!=<pos:position pos:line="20" pos:column="55"/></operator> <literal type="number" pos:line="20" pos:column="56">0<pos:position pos:line="20" pos:column="57"/></literal></expr>)<pos:position pos:line="20" pos:column="58"/></condition><then pos:line="20" pos:column="58">
            <block type="pseudo"><return pos:line="21" pos:column="13">return <expr><name pos:line="21" pos:column="20">NULL<pos:position pos:line="21" pos:column="24"/></name></expr>;<pos:position pos:line="21" pos:column="25"/></return></block></then></if>

        <expr_stmt><expr><call><name pos:line="23" pos:column="9">debugs<pos:position pos:line="23" pos:column="15"/></name><argument_list pos:line="23" pos:column="15">(<argument><expr><literal type="number" pos:line="23" pos:column="16">47<pos:position pos:line="23" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="20">DBG_IMPORTANT<pos:position pos:line="23" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="35">"Rejecting swap file v1 to avoid cache "<pos:position pos:line="23" pos:column="75"/></literal> <operator pos:line="23" pos:column="76">&lt;&lt;<pos:position pos:line="23" pos:column="84"/></operator>
               <literal type="string" pos:line="24" pos:column="16">"index corruption. Forcing a full cache index rebuild. "<pos:position pos:line="24" pos:column="72"/></literal> <operator pos:line="24" pos:column="73">&lt;&lt;<pos:position pos:line="24" pos:column="81"/></operator>
               <literal type="string" pos:line="25" pos:column="16">"See Squid bug #3441."<pos:position pos:line="25" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="40"/></expr_stmt>
        <return pos:line="26" pos:column="9">return <expr><name pos:line="26" pos:column="16">NULL<pos:position pos:line="26" pos:column="20"/></name></expr>;<pos:position pos:line="26" pos:column="21"/></return>

<cpp:if pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">if<pos:position pos:line="28" pos:column="4"/></cpp:directive> <expr><name pos:line="28" pos:column="5">UNUSED_CODE<pos:position pos:line="28" pos:column="16"/></name></expr></cpp:if>
        <comment type="line" pos:line="29" pos:column="9">// baseline</comment>
        <comment type="line" pos:line="30" pos:column="9">// 32-bit sfileno</comment>
        <comment type="line" pos:line="31" pos:column="9">// native time_t (hopefully 64-bit)</comment>
        <comment type="line" pos:line="32" pos:column="9">// 64-bit file size</comment>
        <if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><name><name pos:line="33" pos:column="13">header<pos:position pos:line="33" pos:column="19"/></name><operator pos:line="33" pos:column="19">.<pos:position pos:line="33" pos:column="20"/></operator><name pos:line="33" pos:column="20">record_size<pos:position pos:line="33" pos:column="31"/></name></name> <operator pos:line="33" pos:column="32">==<pos:position pos:line="33" pos:column="34"/></operator> <sizeof pos:line="33" pos:column="35">sizeof<argument_list pos:line="33" pos:column="41">(<argument><expr><name pos:line="33" pos:column="42">StoreSwapLogData<pos:position pos:line="33" pos:column="58"/></name></expr></argument>)<pos:position pos:line="33" pos:column="59"/></argument_list></sizeof></expr>)<pos:position pos:line="33" pos:column="60"/></condition><then pos:line="33" pos:column="60"> <block pos:line="33" pos:column="61">{
            <expr_stmt><expr><call><name pos:line="34" pos:column="13">debugs<pos:position pos:line="34" pos:column="19"/></name><argument_list pos:line="34" pos:column="19">(<argument><expr><literal type="number" pos:line="34" pos:column="20">47<pos:position pos:line="34" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="24">DBG_IMPORTANT<pos:position pos:line="34" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="39">"Version 1 of swap file with LFS support detected... "<pos:position pos:line="34" pos:column="93"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="95"/></expr_stmt>
            <return pos:line="35" pos:column="13">return <expr><operator pos:line="35" pos:column="20">new<pos:position pos:line="35" pos:column="23"/></operator> <call><name pos:line="35" pos:column="24">UFSSwapLogParser_v1<pos:position pos:line="35" pos:column="43"/></name><argument_list pos:line="35" pos:column="43">(<argument><expr><name pos:line="35" pos:column="44">fp<pos:position pos:line="35" pos:column="46"/></name></expr></argument>)<pos:position pos:line="35" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="48"/></return>
        }<pos:position pos:line="36" pos:column="10"/></block></then></if>

        <comment type="line" pos:line="38" pos:column="9">// which means we have a 3-way grid of permutations to import (yuck!)</comment>
        <comment type="line" pos:line="39" pos:column="9">// 1) sfileno 32-bit / 64-bit  (64-bit was broken)</comment>
        <comment type="line" pos:line="40" pos:column="9">// 2) time_t 32-bit / 64-bit</comment>
        <comment type="line" pos:line="41" pos:column="9">// 3) size_t 32-bit / 64-bit  (32-bit was pre-LFS)</comment>

        <comment type="line" pos:line="43" pos:column="9">// 32-bit systems...</comment>
        <comment type="line" pos:line="44" pos:column="9">// only LFS (size_t) differs from baseline</comment>
        <if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><name><name pos:line="45" pos:column="13">header<pos:position pos:line="45" pos:column="19"/></name><operator pos:line="45" pos:column="19">.<pos:position pos:line="45" pos:column="20"/></operator><name pos:line="45" pos:column="20">record_size<pos:position pos:line="45" pos:column="31"/></name></name> <operator pos:line="45" pos:column="32">==<pos:position pos:line="45" pos:column="34"/></operator> <sizeof pos:line="45" pos:column="35">sizeof<argument_list pos:line="45" pos:column="41">(<argument><expr pos:line="45" pos:column="42">struct <name><name pos:line="45" pos:column="49">UFSSwapLogParser_v1_32bs<pos:position pos:line="45" pos:column="73"/></name><operator pos:line="45" pos:column="73">::<pos:position pos:line="45" pos:column="75"/></operator><name pos:line="45" pos:column="75">StoreSwapLogDataOld<pos:position pos:line="45" pos:column="94"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="95"/></argument_list></sizeof></expr>)<pos:position pos:line="45" pos:column="96"/></condition><then pos:line="45" pos:column="96"> <block pos:line="45" pos:column="97">{
            <expr_stmt><expr><call><name pos:line="46" pos:column="13">debugs<pos:position pos:line="46" pos:column="19"/></name><argument_list pos:line="46" pos:column="19">(<argument><expr><literal type="number" pos:line="46" pos:column="20">47<pos:position pos:line="46" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="24">DBG_IMPORTANT<pos:position pos:line="46" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="39">"Version 1 (32-bit) swap file without LFS support detected... "<pos:position pos:line="46" pos:column="102"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="103"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="104"/></expr_stmt>
            <return pos:line="47" pos:column="13">return <expr><operator pos:line="47" pos:column="20">new<pos:position pos:line="47" pos:column="23"/></operator> <call><name pos:line="47" pos:column="24">UFSSwapLogParser_v1_32bs<pos:position pos:line="47" pos:column="48"/></name><argument_list pos:line="47" pos:column="48">(<argument><expr><name pos:line="47" pos:column="49">fp<pos:position pos:line="47" pos:column="51"/></name></expr></argument>)<pos:position pos:line="47" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="53"/></return>
        }<pos:position pos:line="48" pos:column="10"/></block></then></if>
        <comment type="line" pos:line="49" pos:column="9">// LFS (size_t) and timestamps (time_t) differs from baseline</comment>
        <if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><name><name pos:line="50" pos:column="13">header<pos:position pos:line="50" pos:column="19"/></name><operator pos:line="50" pos:column="19">.<pos:position pos:line="50" pos:column="20"/></operator><name pos:line="50" pos:column="20">record_size<pos:position pos:line="50" pos:column="31"/></name></name> <operator pos:line="50" pos:column="32">==<pos:position pos:line="50" pos:column="34"/></operator> <sizeof pos:line="50" pos:column="35">sizeof<argument_list pos:line="50" pos:column="41">(<argument><expr pos:line="50" pos:column="42">struct <name><name pos:line="50" pos:column="49">UFSSwapLogParser_v1_32bst<pos:position pos:line="50" pos:column="74"/></name><operator pos:line="50" pos:column="74">::<pos:position pos:line="50" pos:column="76"/></operator><name pos:line="50" pos:column="76">StoreSwapLogDataOld<pos:position pos:line="50" pos:column="95"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="96"/></argument_list></sizeof></expr>)<pos:position pos:line="50" pos:column="97"/></condition><then pos:line="50" pos:column="97"> <block pos:line="50" pos:column="98">{
            <expr_stmt><expr><call><name pos:line="51" pos:column="13">debugs<pos:position pos:line="51" pos:column="19"/></name><argument_list pos:line="51" pos:column="19">(<argument><expr><literal type="number" pos:line="51" pos:column="20">47<pos:position pos:line="51" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="51" pos:column="24">DBG_IMPORTANT<pos:position pos:line="51" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="39">"Version 1 (32-bit) swap file with short timestamps and without LFS support detected... "<pos:position pos:line="51" pos:column="128"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="129"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="130"/></expr_stmt>
            <return pos:line="52" pos:column="13">return <expr><operator pos:line="52" pos:column="20">new<pos:position pos:line="52" pos:column="23"/></operator> <call><name pos:line="52" pos:column="24">UFSSwapLogParser_v1_32bst<pos:position pos:line="52" pos:column="49"/></name><argument_list pos:line="52" pos:column="49">(<argument><expr><name pos:line="52" pos:column="50">fp<pos:position pos:line="52" pos:column="52"/></name></expr></argument>)<pos:position pos:line="52" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="54"/></return>
        }<pos:position pos:line="53" pos:column="10"/></block></then></if>
        <comment type="line" pos:line="54" pos:column="9">// No downgrade for 64-bit timestamps to 32-bit.</comment>

        <comment type="line" pos:line="56" pos:column="9">// 64-bit systems</comment>
        <comment type="line" pos:line="57" pos:column="9">// sfileno was 64-bit for a some builds</comment>
        <if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><name><name pos:line="58" pos:column="13">header<pos:position pos:line="58" pos:column="19"/></name><operator pos:line="58" pos:column="19">.<pos:position pos:line="58" pos:column="20"/></operator><name pos:line="58" pos:column="20">record_size<pos:position pos:line="58" pos:column="31"/></name></name> <operator pos:line="58" pos:column="32">==<pos:position pos:line="58" pos:column="34"/></operator> <sizeof pos:line="58" pos:column="35">sizeof<argument_list pos:line="58" pos:column="41">(<argument><expr pos:line="58" pos:column="42">struct <name><name pos:line="58" pos:column="49">UFSSwapLogParser_v1_64bfn<pos:position pos:line="58" pos:column="74"/></name><operator pos:line="58" pos:column="74">::<pos:position pos:line="58" pos:column="76"/></operator><name pos:line="58" pos:column="76">StoreSwapLogDataOld<pos:position pos:line="58" pos:column="95"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="96"/></argument_list></sizeof></expr>)<pos:position pos:line="58" pos:column="97"/></condition><then pos:line="58" pos:column="97"> <block pos:line="58" pos:column="98">{
            <expr_stmt><expr><call><name pos:line="59" pos:column="13">debugs<pos:position pos:line="59" pos:column="19"/></name><argument_list pos:line="59" pos:column="19">(<argument><expr><literal type="number" pos:line="59" pos:column="20">47<pos:position pos:line="59" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="59" pos:column="24">DBG_IMPORTANT<pos:position pos:line="59" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="59" pos:column="39">"Version 1 (64-bit) swap file with broken sfileno detected... "<pos:position pos:line="59" pos:column="102"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="103"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="104"/></expr_stmt>
            <return pos:line="60" pos:column="13">return <expr><operator pos:line="60" pos:column="20">new<pos:position pos:line="60" pos:column="23"/></operator> <call><name pos:line="60" pos:column="24">UFSSwapLogParser_v1_64bfn<pos:position pos:line="60" pos:column="49"/></name><argument_list pos:line="60" pos:column="49">(<argument><expr><name pos:line="60" pos:column="50">fp<pos:position pos:line="60" pos:column="52"/></name></expr></argument>)<pos:position pos:line="60" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="54"/></return>
        }<pos:position pos:line="61" pos:column="10"/></block></then></if>
        <comment type="line" pos:line="62" pos:column="9">// NP: 64-bit system with 32-bit size_t/time_t are not handled.</comment>

        <expr_stmt><expr><call><name pos:line="64" pos:column="9">debugs<pos:position pos:line="64" pos:column="15"/></name><argument_list pos:line="64" pos:column="15">(<argument><expr><literal type="number" pos:line="64" pos:column="16">47<pos:position pos:line="64" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="64" pos:column="20">DBG_IMPORTANT<pos:position pos:line="64" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="35">"WARNING: The swap file has wrong format!... "<pos:position pos:line="64" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="83"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="65" pos:column="9">debugs<pos:position pos:line="65" pos:column="15"/></name><argument_list pos:line="65" pos:column="15">(<argument><expr><literal type="number" pos:line="65" pos:column="16">47<pos:position pos:line="65" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="65" pos:column="20">DBG_IMPORTANT<pos:position pos:line="65" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="35">"NOTE: Cannot safely downgrade caches to short (32-bit) timestamps."<pos:position pos:line="65" pos:column="103"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="104"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="105"/></expr_stmt>
        <return pos:line="66" pos:column="9">return <expr><name pos:line="66" pos:column="16">NULL<pos:position pos:line="66" pos:column="20"/></name></expr>;<pos:position pos:line="66" pos:column="21"/></return>
<cpp:endif pos:line="67" pos:column="1">#<cpp:directive pos:line="67" pos:column="2">endif<pos:position pos:line="67" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="68" pos:column="6"/></block></then></if>

    <if pos:line="70" pos:column="5">if <condition pos:line="70" pos:column="8">(<expr><name><name pos:line="70" pos:column="9">header<pos:position pos:line="70" pos:column="15"/></name><operator pos:line="70" pos:column="15">.<pos:position pos:line="70" pos:column="16"/></operator><name pos:line="70" pos:column="16">version<pos:position pos:line="70" pos:column="23"/></name></name> <operator pos:line="70" pos:column="24">&gt;=<pos:position pos:line="70" pos:column="29"/></operator> <literal type="number" pos:line="70" pos:column="27">2<pos:position pos:line="70" pos:column="28"/></literal></expr>)<pos:position pos:line="70" pos:column="29"/></condition><then pos:line="70" pos:column="29"> <block pos:line="70" pos:column="30">{
        <if pos:line="71" pos:column="9">if <condition pos:line="71" pos:column="12">(<expr><operator pos:line="71" pos:column="13">!<pos:position pos:line="71" pos:column="14"/></operator><call><name><name pos:line="71" pos:column="14">header<pos:position pos:line="71" pos:column="20"/></name><operator pos:line="71" pos:column="20">.<pos:position pos:line="71" pos:column="21"/></operator><name pos:line="71" pos:column="21">sane<pos:position pos:line="71" pos:column="25"/></name></name><argument_list pos:line="71" pos:column="25">()<pos:position pos:line="71" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="71" pos:column="28"/></condition><then pos:line="71" pos:column="28"> <block pos:line="71" pos:column="29">{
            <expr_stmt><expr><call><name pos:line="72" pos:column="13">debugs<pos:position pos:line="72" pos:column="19"/></name><argument_list pos:line="72" pos:column="19">(<argument><expr><literal type="number" pos:line="72" pos:column="20">47<pos:position pos:line="72" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="72" pos:column="24">DBG_IMPORTANT<pos:position pos:line="72" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="72" pos:column="39">"ERROR: Corrupted v"<pos:position pos:line="72" pos:column="59"/></literal> <operator pos:line="72" pos:column="60">&lt;&lt;<pos:position pos:line="72" pos:column="68"/></operator> <name><name pos:line="72" pos:column="63">header<pos:position pos:line="72" pos:column="69"/></name><operator pos:line="72" pos:column="69">.<pos:position pos:line="72" pos:column="70"/></operator><name pos:line="72" pos:column="70">version<pos:position pos:line="72" pos:column="77"/></name></name> <operator pos:line="72" pos:column="78">&lt;&lt;<pos:position pos:line="72" pos:column="86"/></operator>
                   <literal type="string" pos:line="73" pos:column="20">" swap file header."<pos:position pos:line="73" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="42"/></expr_stmt>
            <return pos:line="74" pos:column="13">return <expr><name pos:line="74" pos:column="20">NULL<pos:position pos:line="74" pos:column="24"/></name></expr>;<pos:position pos:line="74" pos:column="25"/></return>
        }<pos:position pos:line="75" pos:column="10"/></block></then></if>

        <if pos:line="77" pos:column="9">if <condition pos:line="77" pos:column="12">(<expr><call><name pos:line="77" pos:column="13">fseek<pos:position pos:line="77" pos:column="18"/></name><argument_list pos:line="77" pos:column="18">(<argument><expr><name pos:line="77" pos:column="19">fp<pos:position pos:line="77" pos:column="21"/></name></expr></argument>, <argument><expr><name><name pos:line="77" pos:column="23">header<pos:position pos:line="77" pos:column="29"/></name><operator pos:line="77" pos:column="29">.<pos:position pos:line="77" pos:column="30"/></operator><name pos:line="77" pos:column="30">record_size<pos:position pos:line="77" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="43">SEEK_SET<pos:position pos:line="77" pos:column="51"/></name></expr></argument>)<pos:position pos:line="77" pos:column="52"/></argument_list></call> <operator pos:line="77" pos:column="53">!=<pos:position pos:line="77" pos:column="55"/></operator> <literal type="number" pos:line="77" pos:column="56">0<pos:position pos:line="77" pos:column="57"/></literal></expr>)<pos:position pos:line="77" pos:column="58"/></condition><then pos:line="77" pos:column="58">
            <block type="pseudo"><return pos:line="78" pos:column="13">return <expr><name pos:line="78" pos:column="20">NULL<pos:position pos:line="78" pos:column="24"/></name></expr>;<pos:position pos:line="78" pos:column="25"/></return></block></then></if>

        <if pos:line="80" pos:column="9">if <condition pos:line="80" pos:column="12">(<expr><name><name pos:line="80" pos:column="13">header<pos:position pos:line="80" pos:column="19"/></name><operator pos:line="80" pos:column="19">.<pos:position pos:line="80" pos:column="20"/></operator><name pos:line="80" pos:column="20">version<pos:position pos:line="80" pos:column="27"/></name></name> <operator pos:line="80" pos:column="28">==<pos:position pos:line="80" pos:column="30"/></operator> <literal type="number" pos:line="80" pos:column="31">2<pos:position pos:line="80" pos:column="32"/></literal></expr>)<pos:position pos:line="80" pos:column="33"/></condition><then pos:line="80" pos:column="33">
            <block type="pseudo"><return pos:line="81" pos:column="13">return <expr><operator pos:line="81" pos:column="20">new<pos:position pos:line="81" pos:column="23"/></operator> <call><name pos:line="81" pos:column="24">UFSSwapLogParser_v2<pos:position pos:line="81" pos:column="43"/></name><argument_list pos:line="81" pos:column="43">(<argument><expr><name pos:line="81" pos:column="44">fp<pos:position pos:line="81" pos:column="46"/></name></expr></argument>)<pos:position pos:line="81" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="48"/></return></block></then></if>
    }<pos:position pos:line="82" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="84" pos:column="5">// TODO: v3: write to disk in network-order bytes for the larger fields?</comment>

    <expr_stmt><expr><call><name pos:line="86" pos:column="5">debugs<pos:position pos:line="86" pos:column="11"/></name><argument_list pos:line="86" pos:column="11">(<argument><expr><literal type="number" pos:line="86" pos:column="12">47<pos:position pos:line="86" pos:column="14"/></literal></expr></argument>, <argument><expr><name pos:line="86" pos:column="16">DBG_IMPORTANT<pos:position pos:line="86" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="86" pos:column="31">"Unknown swap file version: "<pos:position pos:line="86" pos:column="60"/></literal> <operator pos:line="86" pos:column="61">&lt;&lt;<pos:position pos:line="86" pos:column="69"/></operator> <name><name pos:line="86" pos:column="64">header<pos:position pos:line="86" pos:column="70"/></name><operator pos:line="86" pos:column="70">.<pos:position pos:line="86" pos:column="71"/></operator><name pos:line="86" pos:column="71">version<pos:position pos:line="86" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="86" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="80"/></expr_stmt>
    <return pos:line="87" pos:column="5">return <expr><name pos:line="87" pos:column="12">NULL<pos:position pos:line="87" pos:column="16"/></name></expr>;<pos:position pos:line="87" pos:column="17"/></return>
}<pos:position pos:line="88" pos:column="2"/></block></function></unit>
