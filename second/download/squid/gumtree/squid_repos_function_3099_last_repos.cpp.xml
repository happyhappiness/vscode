<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3099_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ConnStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">checkLogging<pos:position pos:line="2" pos:column="28"/></name></name><parameter_list pos:line="2" pos:column="28">()<pos:position pos:line="2" pos:column="30"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// if we are parsing request body, its request is responsible for logging</comment>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><name pos:line="5" pos:column="9">bodyPipe<pos:position pos:line="5" pos:column="17"/></name></expr>)<pos:position pos:line="5" pos:column="18"/></condition><then pos:line="5" pos:column="18">
        <block type="pseudo"><return pos:line="6" pos:column="9">return;<pos:position pos:line="6" pos:column="16"/></return></block></then></if>

    <comment type="line" pos:line="8" pos:column="5">// a request currently using this connection is responsible for logging</comment>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">!<pos:position pos:line="9" pos:column="10"/></operator><call><name><name pos:line="9" pos:column="10">pipeline<pos:position pos:line="9" pos:column="18"/></name><operator pos:line="9" pos:column="18">.<pos:position pos:line="9" pos:column="19"/></operator><name pos:line="9" pos:column="19">empty<pos:position pos:line="9" pos:column="24"/></name></name><argument_list pos:line="9" pos:column="24">()<pos:position pos:line="9" pos:column="26"/></argument_list></call> <operator pos:line="9" pos:column="27">&amp;&amp;<pos:position pos:line="9" pos:column="37"/></operator> <call><name><name pos:line="9" pos:column="30">pipeline<pos:position pos:line="9" pos:column="38"/></name><operator pos:line="9" pos:column="38">.<pos:position pos:line="9" pos:column="39"/></operator><name pos:line="9" pos:column="39">back<pos:position pos:line="9" pos:column="43"/></name></name><argument_list pos:line="9" pos:column="43">()<pos:position pos:line="9" pos:column="45"/></argument_list></call><operator pos:line="9" pos:column="45">-&gt;<pos:position pos:line="9" pos:column="50"/></operator><call><name pos:line="9" pos:column="47">mayUseConnection<pos:position pos:line="9" pos:column="63"/></name><argument_list pos:line="9" pos:column="63">()<pos:position pos:line="9" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="66"/></condition><then pos:line="9" pos:column="66">
        <block type="pseudo"><return pos:line="10" pos:column="9">return;<pos:position pos:line="10" pos:column="16"/></return></block></then></if>

    <comment type="block" pos:line="12" pos:column="5">/* Either we are waiting for the very first transaction, or
     * we are done with the Nth transaction and are waiting for N+1st.
     * XXX: We assume that if anything was added to inBuf, then it could
     * only be consumed by actions already covered by the above checks.
     */</comment>

    <comment type="line" pos:line="18" pos:column="5">// do not log connections that closed after a transaction (it is normal)</comment>
    <comment type="line" pos:line="19" pos:column="5">// TODO: access_log needs ACLs to match received-no-bytes connections</comment>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name><name pos:line="20" pos:column="9">pipeline<pos:position pos:line="20" pos:column="17"/></name><operator pos:line="20" pos:column="17">.<pos:position pos:line="20" pos:column="18"/></operator><name pos:line="20" pos:column="18">nrequests<pos:position pos:line="20" pos:column="27"/></name></name> <operator pos:line="20" pos:column="28">&amp;&amp;<pos:position pos:line="20" pos:column="38"/></operator> <call><name><name pos:line="20" pos:column="31">inBuf<pos:position pos:line="20" pos:column="36"/></name><operator pos:line="20" pos:column="36">.<pos:position pos:line="20" pos:column="37"/></operator><name pos:line="20" pos:column="37">isEmpty<pos:position pos:line="20" pos:column="44"/></name></name><argument_list pos:line="20" pos:column="44">()<pos:position pos:line="20" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="47"/></condition><then pos:line="20" pos:column="47">
        <block type="pseudo"><return pos:line="21" pos:column="9">return;<pos:position pos:line="21" pos:column="16"/></return></block></then></if>

    <comment type="block" pos:line="23" pos:column="5">/* Create a temporary ClientHttpRequest object. Its destructor will log. */</comment>
    <decl_stmt><decl><type><name pos:line="24" pos:column="5">ClientHttpRequest<pos:position pos:line="24" pos:column="22"/></name></type> <name pos:line="24" pos:column="23">http<pos:position pos:line="24" pos:column="27"/></name><argument_list pos:line="24" pos:column="27">(<argument><expr><name pos:line="24" pos:column="28">this<pos:position pos:line="24" pos:column="32"/></name></expr></argument>)<pos:position pos:line="24" pos:column="33"/></argument_list></decl>;<pos:position pos:line="24" pos:column="34"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="25" pos:column="5">http<pos:position pos:line="25" pos:column="9"/></name><operator pos:line="25" pos:column="9">.<pos:position pos:line="25" pos:column="10"/></operator><name pos:line="25" pos:column="10">req_sz<pos:position pos:line="25" pos:column="16"/></name></name> <operator pos:line="25" pos:column="17">=<pos:position pos:line="25" pos:column="18"/></operator> <call><name><name pos:line="25" pos:column="19">inBuf<pos:position pos:line="25" pos:column="24"/></name><operator pos:line="25" pos:column="24">.<pos:position pos:line="25" pos:column="25"/></operator><name pos:line="25" pos:column="25">length<pos:position pos:line="25" pos:column="31"/></name></name><argument_list pos:line="25" pos:column="31">()<pos:position pos:line="25" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="34"/></expr_stmt>
    <comment type="line" pos:line="26" pos:column="5">// XXX: Or we died while waiting for the pinned connection to become idle.</comment>
    <decl_stmt><decl><type><name pos:line="27" pos:column="5">char<pos:position pos:line="27" pos:column="9"/></name> <specifier pos:line="27" pos:column="10">const<pos:position pos:line="27" pos:column="15"/></specifier> <modifier pos:line="27" pos:column="16">*<pos:position pos:line="27" pos:column="17"/></modifier></type><name pos:line="27" pos:column="17">uri<pos:position pos:line="27" pos:column="20"/></name> <init pos:line="27" pos:column="21">= <expr><literal type="string" pos:line="27" pos:column="23">"error:transaction-end-before-headers"<pos:position pos:line="27" pos:column="61"/></literal></expr></init></decl>;<pos:position pos:line="27" pos:column="62"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="28" pos:column="5">http<pos:position pos:line="28" pos:column="9"/></name><operator pos:line="28" pos:column="9">.<pos:position pos:line="28" pos:column="10"/></operator><name pos:line="28" pos:column="10">uri<pos:position pos:line="28" pos:column="13"/></name></name> <operator pos:line="28" pos:column="14">=<pos:position pos:line="28" pos:column="15"/></operator> <call><name pos:line="28" pos:column="16">xstrdup<pos:position pos:line="28" pos:column="23"/></name><argument_list pos:line="28" pos:column="23">(<argument><expr><name pos:line="28" pos:column="24">uri<pos:position pos:line="28" pos:column="27"/></name></expr></argument>)<pos:position pos:line="28" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">setLogUri<pos:position pos:line="29" pos:column="14"/></name><argument_list pos:line="29" pos:column="14">(<argument><expr><operator pos:line="29" pos:column="15">&amp;<pos:position pos:line="29" pos:column="20"/></operator><name pos:line="29" pos:column="16">http<pos:position pos:line="29" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="22">uri<pos:position pos:line="29" pos:column="25"/></name></expr></argument>)<pos:position pos:line="29" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="27"/></expr_stmt>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
