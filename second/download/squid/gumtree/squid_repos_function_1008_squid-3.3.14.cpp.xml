<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1008_squid-3.3.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">update_maxobjsize<pos:position pos:line="2" pos:column="18"/></name><parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><name pos:line="2" pos:column="19">void<pos:position pos:line="2" pos:column="23"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="24"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int64_t<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">ms<pos:position pos:line="4" pos:column="15"/></name> <init pos:line="4" pos:column="16">= <expr><operator pos:line="4" pos:column="18">-<pos:position pos:line="4" pos:column="19"/></operator><literal type="number" pos:line="4" pos:column="19">1<pos:position pos:line="4" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>

    <comment type="line" pos:line="6" pos:column="5">// determine the maximum size object that can be stored to disk</comment>
    <for pos:line="7" pos:column="5">for <control pos:line="7" pos:column="9">(<init><decl><type><name pos:line="7" pos:column="10">int<pos:position pos:line="7" pos:column="13"/></name></type> <name pos:line="7" pos:column="14">i<pos:position pos:line="7" pos:column="15"/></name> <init pos:line="7" pos:column="16">= <expr><literal type="number" pos:line="7" pos:column="18">0<pos:position pos:line="7" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="20"/></init> <condition><expr><name pos:line="7" pos:column="21">i<pos:position pos:line="7" pos:column="22"/></name> <operator pos:line="7" pos:column="23">&lt;<pos:position pos:line="7" pos:column="27"/></operator> <name><name pos:line="7" pos:column="25">Config<pos:position pos:line="7" pos:column="31"/></name><operator pos:line="7" pos:column="31">.<pos:position pos:line="7" pos:column="32"/></operator><name pos:line="7" pos:column="32">cacheSwap<pos:position pos:line="7" pos:column="41"/></name><operator pos:line="7" pos:column="41">.<pos:position pos:line="7" pos:column="42"/></operator><name pos:line="7" pos:column="42">n_configured<pos:position pos:line="7" pos:column="54"/></name></name></expr>;<pos:position pos:line="7" pos:column="55"/></condition> <incr><expr><operator pos:line="7" pos:column="56">++<pos:position pos:line="7" pos:column="58"/></operator><name pos:line="7" pos:column="58">i<pos:position pos:line="7" pos:column="59"/></name></expr></incr>)<pos:position pos:line="7" pos:column="60"/></control> <block pos:line="7" pos:column="61">{
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">assert<pos:position pos:line="8" pos:column="15"/></name> <argument_list pos:line="8" pos:column="16">(<argument><expr><name><name pos:line="8" pos:column="17">Config<pos:position pos:line="8" pos:column="23"/></name><operator pos:line="8" pos:column="23">.<pos:position pos:line="8" pos:column="24"/></operator><name pos:line="8" pos:column="24">cacheSwap<pos:position pos:line="8" pos:column="33"/></name><operator pos:line="8" pos:column="33">.<pos:position pos:line="8" pos:column="34"/></operator><name pos:line="8" pos:column="34">swapDirs<pos:position pos:line="8" pos:column="42"/></name><index pos:line="8" pos:column="42">[<expr><name pos:line="8" pos:column="43">i<pos:position pos:line="8" pos:column="44"/></name></expr>]<pos:position pos:line="8" pos:column="45"/></index></name><operator pos:line="8" pos:column="45">.<pos:position pos:line="8" pos:column="46"/></operator><call><name pos:line="8" pos:column="46">getRaw<pos:position pos:line="8" pos:column="52"/></name><argument_list pos:line="8" pos:column="52">()<pos:position pos:line="8" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="56"/></expr_stmt>

        <decl_stmt><decl><type><specifier pos:line="10" pos:column="9">const<pos:position pos:line="10" pos:column="14"/></specifier> <name pos:line="10" pos:column="15">int64_t<pos:position pos:line="10" pos:column="22"/></name></type> <name pos:line="10" pos:column="23">storeMax<pos:position pos:line="10" pos:column="31"/></name> <init pos:line="10" pos:column="32">= <expr><cast type="dynamic" pos:line="10" pos:column="34">dynamic_cast<argument_list type="generic" pos:line="10" pos:column="46">&lt;<argument><expr><name pos:line="10" pos:column="47">SwapDir<pos:position pos:line="10" pos:column="54"/></name> <operator pos:line="10" pos:column="55">*<pos:position pos:line="10" pos:column="56"/></operator></expr></argument>&gt;<pos:position pos:line="10" pos:column="60"/></argument_list><argument_list pos:line="10" pos:column="57">(<argument><expr><name><name pos:line="10" pos:column="58">Config<pos:position pos:line="10" pos:column="64"/></name><operator pos:line="10" pos:column="64">.<pos:position pos:line="10" pos:column="65"/></operator><name pos:line="10" pos:column="65">cacheSwap<pos:position pos:line="10" pos:column="74"/></name><operator pos:line="10" pos:column="74">.<pos:position pos:line="10" pos:column="75"/></operator><name pos:line="10" pos:column="75">swapDirs<pos:position pos:line="10" pos:column="83"/></name><index pos:line="10" pos:column="83">[<expr><name pos:line="10" pos:column="84">i<pos:position pos:line="10" pos:column="85"/></name></expr>]<pos:position pos:line="10" pos:column="86"/></index></name><operator pos:line="10" pos:column="86">.<pos:position pos:line="10" pos:column="87"/></operator><call><name pos:line="10" pos:column="87">getRaw<pos:position pos:line="10" pos:column="93"/></name><argument_list pos:line="10" pos:column="93">()<pos:position pos:line="10" pos:column="95"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="96"/></argument_list></cast><operator pos:line="10" pos:column="96">-&gt;<pos:position pos:line="10" pos:column="101"/></operator><call><name pos:line="10" pos:column="98">maxObjectSize<pos:position pos:line="10" pos:column="111"/></name><argument_list pos:line="10" pos:column="111">()<pos:position pos:line="10" pos:column="113"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="114"/></decl_stmt>
        <if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">ms<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">&lt;<pos:position pos:line="11" pos:column="20"/></operator> <name pos:line="11" pos:column="18">storeMax<pos:position pos:line="11" pos:column="26"/></name></expr>)<pos:position pos:line="11" pos:column="27"/></condition><then pos:line="11" pos:column="27">
            <block type="pseudo"><expr_stmt><expr><name pos:line="12" pos:column="13">ms<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">=<pos:position pos:line="12" pos:column="17"/></operator> <name pos:line="12" pos:column="18">storeMax<pos:position pos:line="12" pos:column="26"/></name></expr>;<pos:position pos:line="12" pos:column="27"/></expr_stmt></block></then></if>
    }<pos:position pos:line="13" pos:column="6"/></block></for>

    <comment type="line" pos:line="15" pos:column="5">// Ensure that we do not discard objects which could be stored only in memory.</comment>
    <comment type="line" pos:line="16" pos:column="5">// It is governed by maximum_object_size_in_memory (for now)</comment>
    <comment type="line" pos:line="17" pos:column="5">// TODO: update this to check each in-memory location (SMP and local memory limits differ)</comment>
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name pos:line="18" pos:column="9">ms<pos:position pos:line="18" pos:column="11"/></name> <operator pos:line="18" pos:column="12">&lt;<pos:position pos:line="18" pos:column="16"/></operator> <cast type="static" pos:line="18" pos:column="14">static_cast<argument_list type="generic" pos:line="18" pos:column="25">&lt;<argument><expr><name pos:line="18" pos:column="26">int64_t<pos:position pos:line="18" pos:column="33"/></name></expr></argument>&gt;<pos:position pos:line="18" pos:column="37"/></argument_list><argument_list pos:line="18" pos:column="34">(<argument><expr><name><name pos:line="18" pos:column="35">Config<pos:position pos:line="18" pos:column="41"/></name><operator pos:line="18" pos:column="41">.<pos:position pos:line="18" pos:column="42"/></operator><name pos:line="18" pos:column="42">Store<pos:position pos:line="18" pos:column="47"/></name><operator pos:line="18" pos:column="47">.<pos:position pos:line="18" pos:column="48"/></operator><name pos:line="18" pos:column="48">maxInMemObjSize<pos:position pos:line="18" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="64"/></argument_list></cast></expr>)<pos:position pos:line="18" pos:column="65"/></condition><then pos:line="18" pos:column="65">
        <block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="9">ms<pos:position pos:line="19" pos:column="11"/></name> <operator pos:line="19" pos:column="12">=<pos:position pos:line="19" pos:column="13"/></operator> <name><name pos:line="19" pos:column="14">Config<pos:position pos:line="19" pos:column="20"/></name><operator pos:line="19" pos:column="20">.<pos:position pos:line="19" pos:column="21"/></operator><name pos:line="19" pos:column="21">Store<pos:position pos:line="19" pos:column="26"/></name><operator pos:line="19" pos:column="26">.<pos:position pos:line="19" pos:column="27"/></operator><name pos:line="19" pos:column="27">maxInMemObjSize<pos:position pos:line="19" pos:column="42"/></name></name></expr>;<pos:position pos:line="19" pos:column="43"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name pos:line="21" pos:column="5">store_maxobjsize<pos:position pos:line="21" pos:column="21"/></name> <operator pos:line="21" pos:column="22">=<pos:position pos:line="21" pos:column="23"/></operator> <name pos:line="21" pos:column="24">ms<pos:position pos:line="21" pos:column="26"/></name></expr>;<pos:position pos:line="21" pos:column="27"/></expr_stmt>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
