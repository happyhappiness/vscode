<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7646_squid-3.5.27.cpp" pos:tabs="8"><decl_stmt><decl><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">regexec<pos:position pos:line="2" pos:column="8"/></name><argument_list pos:line="2" pos:column="8">(<argument><expr><name pos:line="2" pos:column="9">preg<pos:position pos:line="2" pos:column="13"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="15">string<pos:position pos:line="2" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="23">nmatch<pos:position pos:line="2" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="31">pmatch<pos:position pos:line="2" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="39">eflags<pos:position pos:line="2" pos:column="45"/></name></expr></argument>)<pos:position pos:line="2" pos:column="46"/></argument_list>
const <name pos:line="3" pos:column="7">regex_t<pos:position pos:line="3" pos:column="14"/></name> <modifier pos:line="3" pos:column="15">*<pos:position pos:line="3" pos:column="16"/></modifier><name pos:line="3" pos:column="16">preg<pos:position pos:line="3" pos:column="20"/></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
<decl_stmt><decl><type><specifier pos:line="4" pos:column="1">const<pos:position pos:line="4" pos:column="6"/></specifier> <name pos:line="4" pos:column="7">char<pos:position pos:line="4" pos:column="11"/></name> <modifier pos:line="4" pos:column="12">*<pos:position pos:line="4" pos:column="13"/></modifier></type><name pos:line="4" pos:column="13">string<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="5" pos:column="1">size_t<pos:position pos:line="5" pos:column="7"/></name></type> <name pos:line="5" pos:column="8">nmatch<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="6" pos:column="1">regmatch_t<pos:position pos:line="6" pos:column="11"/></name></type> <name><name pos:line="6" pos:column="12">pmatch<pos:position pos:line="6" pos:column="18"/></name><index pos:line="6" pos:column="18">[]<pos:position pos:line="6" pos:column="20"/></index></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="7" pos:column="1">int<pos:position pos:line="7" pos:column="4"/></name></type> <name pos:line="7" pos:column="5">eflags<pos:position pos:line="7" pos:column="11"/></name></decl>;<pos:position pos:line="7" pos:column="12"/></decl_stmt>
<block pos:line="8" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">ret<pos:position pos:line="9" pos:column="12"/></name></decl>;<pos:position pos:line="9" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="10" pos:column="5">struct<pos:position pos:line="10" pos:column="11"/></name> <name pos:line="10" pos:column="12">re_registers<pos:position pos:line="10" pos:column="24"/></name></name></type> <name pos:line="10" pos:column="25">regs<pos:position pos:line="10" pos:column="29"/></name></decl>;<pos:position pos:line="10" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">regex_t<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">private_preg<pos:position pos:line="11" pos:column="25"/></name></decl>;<pos:position pos:line="11" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">int<pos:position pos:line="12" pos:column="8"/></name></type> <name pos:line="12" pos:column="9">len<pos:position pos:line="12" pos:column="12"/></name> <init pos:line="12" pos:column="13">= <expr><call><name pos:line="12" pos:column="15">strlen<pos:position pos:line="12" pos:column="21"/></name><argument_list pos:line="12" pos:column="21">(<argument><expr><name pos:line="12" pos:column="22">string<pos:position pos:line="12" pos:column="28"/></name></expr></argument>)<pos:position pos:line="12" pos:column="29"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">boolean<pos:position pos:line="13" pos:column="12"/></name></type> <name pos:line="13" pos:column="13">want_reg_info<pos:position pos:line="13" pos:column="26"/></name> <init pos:line="13" pos:column="27">= <expr><operator pos:line="13" pos:column="29">!<pos:position pos:line="13" pos:column="30"/></operator><name><name pos:line="13" pos:column="30">preg<pos:position pos:line="13" pos:column="34"/></name><operator pos:line="13" pos:column="34">-&gt;<pos:position pos:line="13" pos:column="39"/></operator><name pos:line="13" pos:column="36">no_sub<pos:position pos:line="13" pos:column="42"/></name></name> <operator pos:line="13" pos:column="43">&amp;&amp;<pos:position pos:line="13" pos:column="53"/></operator> <name pos:line="13" pos:column="46">nmatch<pos:position pos:line="13" pos:column="52"/></name> <operator pos:line="13" pos:column="53">&gt;<pos:position pos:line="13" pos:column="57"/></operator> <literal type="number" pos:line="13" pos:column="55">0<pos:position pos:line="13" pos:column="56"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="57"/></decl_stmt>

    <expr_stmt><expr><name pos:line="15" pos:column="5">private_preg<pos:position pos:line="15" pos:column="17"/></name> <operator pos:line="15" pos:column="18">=<pos:position pos:line="15" pos:column="19"/></operator> <operator pos:line="15" pos:column="20">*<pos:position pos:line="15" pos:column="21"/></operator><name pos:line="15" pos:column="21">preg<pos:position pos:line="15" pos:column="25"/></name></expr>;<pos:position pos:line="15" pos:column="26"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="17" pos:column="5">private_preg<pos:position pos:line="17" pos:column="17"/></name><operator pos:line="17" pos:column="17">.<pos:position pos:line="17" pos:column="18"/></operator><name pos:line="17" pos:column="18">not_bol<pos:position pos:line="17" pos:column="25"/></name></name> <operator pos:line="17" pos:column="26">=<pos:position pos:line="17" pos:column="27"/></operator> <operator pos:line="17" pos:column="28">!<pos:position pos:line="17" pos:column="29"/></operator><operator pos:line="17" pos:column="29">!<pos:position pos:line="17" pos:column="30"/></operator><operator pos:line="17" pos:column="30">(<pos:position pos:line="17" pos:column="31"/></operator><name pos:line="17" pos:column="31">eflags<pos:position pos:line="17" pos:column="37"/></name> <operator pos:line="17" pos:column="38">&amp;<pos:position pos:line="17" pos:column="43"/></operator> <name pos:line="17" pos:column="40">REG_NOTBOL<pos:position pos:line="17" pos:column="50"/></name><operator pos:line="17" pos:column="50">)<pos:position pos:line="17" pos:column="51"/></operator></expr>;<pos:position pos:line="17" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="18" pos:column="5">private_preg<pos:position pos:line="18" pos:column="17"/></name><operator pos:line="18" pos:column="17">.<pos:position pos:line="18" pos:column="18"/></operator><name pos:line="18" pos:column="18">not_eol<pos:position pos:line="18" pos:column="25"/></name></name> <operator pos:line="18" pos:column="26">=<pos:position pos:line="18" pos:column="27"/></operator> <operator pos:line="18" pos:column="28">!<pos:position pos:line="18" pos:column="29"/></operator><operator pos:line="18" pos:column="29">!<pos:position pos:line="18" pos:column="30"/></operator><operator pos:line="18" pos:column="30">(<pos:position pos:line="18" pos:column="31"/></operator><name pos:line="18" pos:column="31">eflags<pos:position pos:line="18" pos:column="37"/></name> <operator pos:line="18" pos:column="38">&amp;<pos:position pos:line="18" pos:column="43"/></operator> <name pos:line="18" pos:column="40">REG_NOTEOL<pos:position pos:line="18" pos:column="50"/></name><operator pos:line="18" pos:column="50">)<pos:position pos:line="18" pos:column="51"/></operator></expr>;<pos:position pos:line="18" pos:column="52"/></expr_stmt>

    <comment type="block" pos:line="20" pos:column="5">/* The user has told us exactly how many registers to return
     * information about, via `nmatch'.  We have to pass that on to the
     * matching routines.  */</comment>
    <expr_stmt><expr><name><name pos:line="23" pos:column="5">private_preg<pos:position pos:line="23" pos:column="17"/></name><operator pos:line="23" pos:column="17">.<pos:position pos:line="23" pos:column="18"/></operator><name pos:line="23" pos:column="18">regs_allocated<pos:position pos:line="23" pos:column="32"/></name></name> <operator pos:line="23" pos:column="33">=<pos:position pos:line="23" pos:column="34"/></operator> <name pos:line="23" pos:column="35">REGS_FIXED<pos:position pos:line="23" pos:column="45"/></name></expr>;<pos:position pos:line="23" pos:column="46"/></expr_stmt>

    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name pos:line="25" pos:column="9">want_reg_info<pos:position pos:line="25" pos:column="22"/></name></expr>)<pos:position pos:line="25" pos:column="23"/></condition><then pos:line="25" pos:column="23"> <block pos:line="25" pos:column="24">{
        <expr_stmt><expr><name><name pos:line="26" pos:column="9">regs<pos:position pos:line="26" pos:column="13"/></name><operator pos:line="26" pos:column="13">.<pos:position pos:line="26" pos:column="14"/></operator><name pos:line="26" pos:column="14">num_regs<pos:position pos:line="26" pos:column="22"/></name></name> <operator pos:line="26" pos:column="23">=<pos:position pos:line="26" pos:column="24"/></operator> <name pos:line="26" pos:column="25">nmatch<pos:position pos:line="26" pos:column="31"/></name></expr>;<pos:position pos:line="26" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="27" pos:column="9">regs<pos:position pos:line="27" pos:column="13"/></name><operator pos:line="27" pos:column="13">.<pos:position pos:line="27" pos:column="14"/></operator><name pos:line="27" pos:column="14">start<pos:position pos:line="27" pos:column="19"/></name></name> <operator pos:line="27" pos:column="20">=<pos:position pos:line="27" pos:column="21"/></operator> <call><name pos:line="27" pos:column="22">TALLOC<pos:position pos:line="27" pos:column="28"/></name><argument_list pos:line="27" pos:column="28">(<argument><expr><name pos:line="27" pos:column="29">nmatch<pos:position pos:line="27" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="37">regoff_t<pos:position pos:line="27" pos:column="45"/></name></expr></argument>)<pos:position pos:line="27" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="28" pos:column="9">regs<pos:position pos:line="28" pos:column="13"/></name><operator pos:line="28" pos:column="13">.<pos:position pos:line="28" pos:column="14"/></operator><name pos:line="28" pos:column="14">end<pos:position pos:line="28" pos:column="17"/></name></name> <operator pos:line="28" pos:column="18">=<pos:position pos:line="28" pos:column="19"/></operator> <call><name pos:line="28" pos:column="20">TALLOC<pos:position pos:line="28" pos:column="26"/></name><argument_list pos:line="28" pos:column="26">(<argument><expr><name pos:line="28" pos:column="27">nmatch<pos:position pos:line="28" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="35">regoff_t<pos:position pos:line="28" pos:column="43"/></name></expr></argument>)<pos:position pos:line="28" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="45"/></expr_stmt>
        <if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name><name pos:line="29" pos:column="13">regs<pos:position pos:line="29" pos:column="17"/></name><operator pos:line="29" pos:column="17">.<pos:position pos:line="29" pos:column="18"/></operator><name pos:line="29" pos:column="18">start<pos:position pos:line="29" pos:column="23"/></name></name> <operator pos:line="29" pos:column="24">==<pos:position pos:line="29" pos:column="26"/></operator> <name pos:line="29" pos:column="27">NULL<pos:position pos:line="29" pos:column="31"/></name> <operator pos:line="29" pos:column="32">||<pos:position pos:line="29" pos:column="34"/></operator> <name><name pos:line="29" pos:column="35">regs<pos:position pos:line="29" pos:column="39"/></name><operator pos:line="29" pos:column="39">.<pos:position pos:line="29" pos:column="40"/></operator><name pos:line="29" pos:column="40">end<pos:position pos:line="29" pos:column="43"/></name></name> <operator pos:line="29" pos:column="44">==<pos:position pos:line="29" pos:column="46"/></operator> <name pos:line="29" pos:column="47">NULL<pos:position pos:line="29" pos:column="51"/></name></expr>)<pos:position pos:line="29" pos:column="52"/></condition><then pos:line="29" pos:column="52">
            <block type="pseudo"><return pos:line="30" pos:column="13">return <expr><operator pos:line="30" pos:column="20">(<pos:position pos:line="30" pos:column="21"/></operator><name pos:line="30" pos:column="21">int<pos:position pos:line="30" pos:column="24"/></name><operator pos:line="30" pos:column="24">)<pos:position pos:line="30" pos:column="25"/></operator> <name pos:line="30" pos:column="26">REG_NOMATCH<pos:position pos:line="30" pos:column="37"/></name></expr>;<pos:position pos:line="30" pos:column="38"/></return></block></then></if>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="32" pos:column="5">/* Perform the searching operation.  */</comment>
    <expr_stmt><expr><name pos:line="33" pos:column="5">ret<pos:position pos:line="33" pos:column="8"/></name> <operator pos:line="33" pos:column="9">=<pos:position pos:line="33" pos:column="10"/></operator> <call><name pos:line="33" pos:column="11">re_search<pos:position pos:line="33" pos:column="20"/></name><argument_list pos:line="33" pos:column="20">(<argument><expr><operator pos:line="33" pos:column="21">&amp;<pos:position pos:line="33" pos:column="26"/></operator><name pos:line="33" pos:column="22">private_preg<pos:position pos:line="33" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="36">string<pos:position pos:line="33" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="44">len<pos:position pos:line="33" pos:column="47"/></name></expr></argument>,
                    <comment type="block" pos:line="34" pos:column="21">/* start: */</comment> <argument><expr><literal type="number" pos:line="34" pos:column="34">0<pos:position pos:line="34" pos:column="35"/></literal></expr></argument>, <comment type="block" pos:line="34" pos:column="37">/* range: */</comment> <argument><expr><name pos:line="34" pos:column="50">len<pos:position pos:line="34" pos:column="53"/></name></expr></argument>,
                    <argument><expr><ternary><condition><expr><name pos:line="35" pos:column="21">want_reg_info<pos:position pos:line="35" pos:column="34"/></name></expr> ?<pos:position pos:line="35" pos:column="36"/></condition><then pos:line="35" pos:column="36"> <expr><operator pos:line="35" pos:column="37">&amp;<pos:position pos:line="35" pos:column="42"/></operator><name pos:line="35" pos:column="38">regs<pos:position pos:line="35" pos:column="42"/></name></expr> <pos:position pos:line="35" pos:column="43"/></then><else pos:line="35" pos:column="43">: <expr><operator pos:line="35" pos:column="45">(<pos:position pos:line="35" pos:column="46"/></operator>struct <name pos:line="35" pos:column="53">re_registers<pos:position pos:line="35" pos:column="65"/></name> <operator pos:line="35" pos:column="66">*<pos:position pos:line="35" pos:column="67"/></operator><operator pos:line="35" pos:column="67">)<pos:position pos:line="35" pos:column="68"/></operator> <literal type="number" pos:line="35" pos:column="69">0<pos:position pos:line="35" pos:column="70"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="35" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="72"/></expr_stmt>

    <comment type="block" pos:line="37" pos:column="5">/* Copy the register information to the POSIX structure.  */</comment>
    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><name pos:line="38" pos:column="9">want_reg_info<pos:position pos:line="38" pos:column="22"/></name></expr>)<pos:position pos:line="38" pos:column="23"/></condition><then pos:line="38" pos:column="23"> <block pos:line="38" pos:column="24">{
        <if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><name pos:line="39" pos:column="13">ret<pos:position pos:line="39" pos:column="16"/></name> <operator pos:line="39" pos:column="17">&gt;=<pos:position pos:line="39" pos:column="22"/></operator> <literal type="number" pos:line="39" pos:column="20">0<pos:position pos:line="39" pos:column="21"/></literal></expr>)<pos:position pos:line="39" pos:column="22"/></condition><then pos:line="39" pos:column="22"> <block pos:line="39" pos:column="23">{
            <decl_stmt><decl><type><name pos:line="40" pos:column="13">unsigned<pos:position pos:line="40" pos:column="21"/></name></type> <name pos:line="40" pos:column="22">r<pos:position pos:line="40" pos:column="23"/></name></decl>;<pos:position pos:line="40" pos:column="24"/></decl_stmt>

            <for pos:line="42" pos:column="13">for <control pos:line="42" pos:column="17">(<init><expr><name pos:line="42" pos:column="18">r<pos:position pos:line="42" pos:column="19"/></name> <operator pos:line="42" pos:column="20">=<pos:position pos:line="42" pos:column="21"/></operator> <literal type="number" pos:line="42" pos:column="22">0<pos:position pos:line="42" pos:column="23"/></literal></expr>;<pos:position pos:line="42" pos:column="24"/></init> <condition><expr><name pos:line="42" pos:column="25">r<pos:position pos:line="42" pos:column="26"/></name> <operator pos:line="42" pos:column="27">&lt;<pos:position pos:line="42" pos:column="31"/></operator> <name pos:line="42" pos:column="29">nmatch<pos:position pos:line="42" pos:column="35"/></name></expr>;<pos:position pos:line="42" pos:column="36"/></condition> <incr><expr><name pos:line="42" pos:column="37">r<pos:position pos:line="42" pos:column="38"/></name><operator pos:line="42" pos:column="38">++<pos:position pos:line="42" pos:column="40"/></operator></expr></incr>)<pos:position pos:line="42" pos:column="41"/></control> <block pos:line="42" pos:column="42">{
                <expr_stmt><expr><name><name pos:line="43" pos:column="17">pmatch<pos:position pos:line="43" pos:column="23"/></name><index pos:line="43" pos:column="23">[<expr><name pos:line="43" pos:column="24">r<pos:position pos:line="43" pos:column="25"/></name></expr>]<pos:position pos:line="43" pos:column="26"/></index></name><operator pos:line="43" pos:column="26">.<pos:position pos:line="43" pos:column="27"/></operator><name pos:line="43" pos:column="27">rm_so<pos:position pos:line="43" pos:column="32"/></name> <operator pos:line="43" pos:column="33">=<pos:position pos:line="43" pos:column="34"/></operator> <name><name pos:line="43" pos:column="35">regs<pos:position pos:line="43" pos:column="39"/></name><operator pos:line="43" pos:column="39">.<pos:position pos:line="43" pos:column="40"/></operator><name pos:line="43" pos:column="40">start<pos:position pos:line="43" pos:column="45"/></name><index pos:line="43" pos:column="45">[<expr><name pos:line="43" pos:column="46">r<pos:position pos:line="43" pos:column="47"/></name></expr>]<pos:position pos:line="43" pos:column="48"/></index></name></expr>;<pos:position pos:line="43" pos:column="49"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="44" pos:column="17">pmatch<pos:position pos:line="44" pos:column="23"/></name><index pos:line="44" pos:column="23">[<expr><name pos:line="44" pos:column="24">r<pos:position pos:line="44" pos:column="25"/></name></expr>]<pos:position pos:line="44" pos:column="26"/></index></name><operator pos:line="44" pos:column="26">.<pos:position pos:line="44" pos:column="27"/></operator><name pos:line="44" pos:column="27">rm_eo<pos:position pos:line="44" pos:column="32"/></name> <operator pos:line="44" pos:column="33">=<pos:position pos:line="44" pos:column="34"/></operator> <name><name pos:line="44" pos:column="35">regs<pos:position pos:line="44" pos:column="39"/></name><operator pos:line="44" pos:column="39">.<pos:position pos:line="44" pos:column="40"/></operator><name pos:line="44" pos:column="40">end<pos:position pos:line="44" pos:column="43"/></name><index pos:line="44" pos:column="43">[<expr><name pos:line="44" pos:column="44">r<pos:position pos:line="44" pos:column="45"/></name></expr>]<pos:position pos:line="44" pos:column="46"/></index></name></expr>;<pos:position pos:line="44" pos:column="47"/></expr_stmt>
            }<pos:position pos:line="45" pos:column="14"/></block></for>
        }<pos:position pos:line="46" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="47" pos:column="9">/* If we needed the temporary register info, free the space now.  */</comment>
        <expr_stmt><expr><call><name pos:line="48" pos:column="9">free<pos:position pos:line="48" pos:column="13"/></name><argument_list pos:line="48" pos:column="13">(<argument><expr><name><name pos:line="48" pos:column="14">regs<pos:position pos:line="48" pos:column="18"/></name><operator pos:line="48" pos:column="18">.<pos:position pos:line="48" pos:column="19"/></operator><name pos:line="48" pos:column="19">start<pos:position pos:line="48" pos:column="24"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="49" pos:column="9">free<pos:position pos:line="49" pos:column="13"/></name><argument_list pos:line="49" pos:column="13">(<argument><expr><name><name pos:line="49" pos:column="14">regs<pos:position pos:line="49" pos:column="18"/></name><operator pos:line="49" pos:column="18">.<pos:position pos:line="49" pos:column="19"/></operator><name pos:line="49" pos:column="19">end<pos:position pos:line="49" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="50" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="51" pos:column="5">/* We want zero return to mean success, unlike `re_search'.  */</comment>
    <return pos:line="52" pos:column="5">return <expr><ternary><condition><expr><name pos:line="52" pos:column="12">ret<pos:position pos:line="52" pos:column="15"/></name> <operator pos:line="52" pos:column="16">&gt;=<pos:position pos:line="52" pos:column="21"/></operator> <literal type="number" pos:line="52" pos:column="19">0<pos:position pos:line="52" pos:column="20"/></literal></expr> ?<pos:position pos:line="52" pos:column="22"/></condition><then pos:line="52" pos:column="22"> <expr><operator pos:line="52" pos:column="23">(<pos:position pos:line="52" pos:column="24"/></operator><name pos:line="52" pos:column="24">int<pos:position pos:line="52" pos:column="27"/></name><operator pos:line="52" pos:column="27">)<pos:position pos:line="52" pos:column="28"/></operator> <name pos:line="52" pos:column="29">REG_NOERROR<pos:position pos:line="52" pos:column="40"/></name></expr> <pos:position pos:line="52" pos:column="41"/></then><else pos:line="52" pos:column="41">: <expr><operator pos:line="52" pos:column="43">(<pos:position pos:line="52" pos:column="44"/></operator><name pos:line="52" pos:column="44">int<pos:position pos:line="52" pos:column="47"/></name><operator pos:line="52" pos:column="47">)<pos:position pos:line="52" pos:column="48"/></operator> <name pos:line="52" pos:column="49">REG_NOMATCH<pos:position pos:line="52" pos:column="60"/></name></expr></else></ternary></expr>;<pos:position pos:line="52" pos:column="61"/></return>
}<pos:position pos:line="53" pos:column="2"/></block></unit>
