<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_70_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">SIGRETTYPE<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">sigChild<pos:position pos:line="2" pos:column="9"/></name><parameter_list pos:line="2" pos:column="9">( <parameter><decl><type><name pos:line="2" pos:column="11">int<pos:position pos:line="2" pos:column="14"/></name></type> <name pos:line="2" pos:column="15">signo<pos:position pos:line="2" pos:column="20"/></name></decl></parameter> )<pos:position pos:line="2" pos:column="22"/></parameter_list>
<comment type="line" pos:line="3" pos:column="1">// purpose: supply ad hoc child handler with output on stderr</comment>
<comment type="line" pos:line="4" pos:column="1">// paramtr: signo (IN): == SIGCHLD</comment>
<comment type="line" pos:line="5" pos:column="1">// returns: only if OS uses a return type for signal handler</comment>
<comment type="line" pos:line="6" pos:column="1">// seealso: Stevens, UNP, figure 5.11 *and* Stevens, APUE, figure 8.3</comment>
<block pos:line="7" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">pid_t<pos:position pos:line="8" pos:column="10"/></name></type> <name pos:line="8" pos:column="11">pid<pos:position pos:line="8" pos:column="14"/></name></decl>;<pos:position pos:line="8" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type>  <name pos:line="9" pos:column="10">status<pos:position pos:line="9" pos:column="16"/></name> <init pos:line="9" pos:column="17">= <expr><name pos:line="9" pos:column="19">signo<pos:position pos:line="9" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="25"/></decl_stmt> <comment type="line" pos:line="9" pos:column="26">// to stop GNU from complaining...</comment>

    <decl_stmt><decl><type><name pos:line="11" pos:column="5">int<pos:position pos:line="11" pos:column="8"/></name></type> <name pos:line="11" pos:column="9">saveerr<pos:position pos:line="11" pos:column="16"/></name> <init pos:line="11" pos:column="17">= <expr><name pos:line="11" pos:column="19">errno<pos:position pos:line="11" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="25"/></decl_stmt>
    <while pos:line="12" pos:column="5">while <condition pos:line="12" pos:column="11">( <expr><operator pos:line="12" pos:column="13">(<pos:position pos:line="12" pos:column="14"/></operator><name pos:line="12" pos:column="14">pid<pos:position pos:line="12" pos:column="17"/></name> <operator pos:line="12" pos:column="18">=<pos:position pos:line="12" pos:column="19"/></operator> <call><name pos:line="12" pos:column="20">waitpid<pos:position pos:line="12" pos:column="27"/></name><argument_list pos:line="12" pos:column="27">( <argument><expr><operator pos:line="12" pos:column="29">-<pos:position pos:line="12" pos:column="30"/></operator><literal type="number" pos:line="12" pos:column="30">1<pos:position pos:line="12" pos:column="31"/></literal></expr></argument>, <argument><expr><operator pos:line="12" pos:column="33">&amp;<pos:position pos:line="12" pos:column="38"/></operator><name pos:line="12" pos:column="34">status<pos:position pos:line="12" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="42">WNOHANG<pos:position pos:line="12" pos:column="49"/></name></expr></argument> )<pos:position pos:line="12" pos:column="51"/></argument_list></call><operator pos:line="12" pos:column="51">)<pos:position pos:line="12" pos:column="52"/></operator> <operator pos:line="12" pos:column="53">&gt;<pos:position pos:line="12" pos:column="57"/></operator> <literal type="number" pos:line="12" pos:column="55">0<pos:position pos:line="12" pos:column="56"/></literal></expr> )<pos:position pos:line="12" pos:column="58"/></condition> <block pos:line="12" pos:column="59">{
        <if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">( <expr><call><name pos:line="13" pos:column="14">WIFEXITED<pos:position pos:line="13" pos:column="23"/></name><argument_list pos:line="13" pos:column="23">(<argument><expr><name pos:line="13" pos:column="24">status<pos:position pos:line="13" pos:column="30"/></name></expr></argument>)<pos:position pos:line="13" pos:column="31"/></argument_list></call></expr> )<pos:position pos:line="13" pos:column="33"/></condition><then pos:line="13" pos:column="33"> <block pos:line="13" pos:column="34">{
            <expr_stmt><expr><call><name pos:line="14" pos:column="13">fprintf<pos:position pos:line="14" pos:column="20"/></name><argument_list pos:line="14" pos:column="20">( <argument><expr><name pos:line="14" pos:column="22">stderr<pos:position pos:line="14" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="30">"child (pid=%ld) reaped, status %d\n%c"<pos:position pos:line="14" pos:column="69"/></literal></expr></argument>,
                     <argument><expr><operator pos:line="15" pos:column="22">(<pos:position pos:line="15" pos:column="23"/></operator><name pos:line="15" pos:column="23">long<pos:position pos:line="15" pos:column="27"/></name><operator pos:line="15" pos:column="27">)<pos:position pos:line="15" pos:column="28"/></operator> <name pos:line="15" pos:column="29">pid<pos:position pos:line="15" pos:column="32"/></name></expr></argument>, <argument><expr><call><name pos:line="15" pos:column="34">WEXITSTATUS<pos:position pos:line="15" pos:column="45"/></name><argument_list pos:line="15" pos:column="45">(<argument><expr><name pos:line="15" pos:column="46">status<pos:position pos:line="15" pos:column="52"/></name></expr></argument>)<pos:position pos:line="15" pos:column="53"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="55">0<pos:position pos:line="15" pos:column="56"/></literal></expr></argument> )<pos:position pos:line="15" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="59"/></expr_stmt>
        }<pos:position pos:line="16" pos:column="10"/></block></then> <elseif pos:line="16" pos:column="11">else <if pos:line="16" pos:column="16">if <condition pos:line="16" pos:column="19">( <expr><call><name pos:line="16" pos:column="21">WIFSIGNALED<pos:position pos:line="16" pos:column="32"/></name><argument_list pos:line="16" pos:column="32">(<argument><expr><name pos:line="16" pos:column="33">status<pos:position pos:line="16" pos:column="39"/></name></expr></argument>)<pos:position pos:line="16" pos:column="40"/></argument_list></call></expr> )<pos:position pos:line="16" pos:column="42"/></condition><then pos:line="16" pos:column="42"> <block pos:line="16" pos:column="43">{
            <expr_stmt><expr><call><name pos:line="17" pos:column="13">fprintf<pos:position pos:line="17" pos:column="20"/></name><argument_list pos:line="17" pos:column="20">( <argument><expr><name pos:line="17" pos:column="22">stderr<pos:position pos:line="17" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="30">"child (pid=%ld) died on signal %d%s\n%c"<pos:position pos:line="17" pos:column="71"/></literal></expr></argument>,
                     <argument><expr><operator pos:line="18" pos:column="22">(<pos:position pos:line="18" pos:column="23"/></operator><name pos:line="18" pos:column="23">long<pos:position pos:line="18" pos:column="27"/></name><operator pos:line="18" pos:column="27">)<pos:position pos:line="18" pos:column="28"/></operator> <name pos:line="18" pos:column="29">pid<pos:position pos:line="18" pos:column="32"/></name></expr></argument>, <argument><expr><call><name pos:line="18" pos:column="34">WTERMSIG<pos:position pos:line="18" pos:column="42"/></name><argument_list pos:line="18" pos:column="42">(<argument><expr><name pos:line="18" pos:column="43">status<pos:position pos:line="18" pos:column="49"/></name></expr></argument>)<pos:position pos:line="18" pos:column="50"/></argument_list></call></expr></argument>,
<cpp:ifdef pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">ifdef<pos:position pos:line="19" pos:column="7"/></cpp:directive> <name pos:line="19" pos:column="8">WCOREDUMP<pos:position pos:line="19" pos:column="17"/></name></cpp:ifdef>
                     <argument><expr><ternary><condition><expr><call><name pos:line="20" pos:column="22">WCOREDUMP<pos:position pos:line="20" pos:column="31"/></name><argument_list pos:line="20" pos:column="31">(<argument><expr><name pos:line="20" pos:column="32">status<pos:position pos:line="20" pos:column="38"/></name></expr></argument>)<pos:position pos:line="20" pos:column="39"/></argument_list></call></expr> ?<pos:position pos:line="20" pos:column="41"/></condition><then pos:line="20" pos:column="41"> <expr><literal type="string" pos:line="20" pos:column="42">" (core generated)"<pos:position pos:line="20" pos:column="61"/></literal></expr> <pos:position pos:line="20" pos:column="62"/></then><else pos:line="20" pos:column="62">: <expr><literal type="string" pos:line="20" pos:column="64">""<pos:position pos:line="20" pos:column="66"/></literal></expr></else></ternary></expr></argument>,
<cpp:else pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">else<pos:position pos:line="21" pos:column="6"/></cpp:directive></cpp:else>
                     <argument><expr><literal type="string" pos:line="22" pos:column="22">""<pos:position pos:line="22" pos:column="24"/></literal></expr></argument>,
<cpp:endif pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">endif<pos:position pos:line="23" pos:column="7"/></cpp:directive></cpp:endif>
                     <argument><expr><literal type="number" pos:line="24" pos:column="22">0<pos:position pos:line="24" pos:column="23"/></literal></expr></argument> )<pos:position pos:line="24" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="26"/></expr_stmt>
        }<pos:position pos:line="25" pos:column="10"/></block></then></if></elseif> <else pos:line="25" pos:column="11">else <block pos:line="25" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="26" pos:column="13">fprintf<pos:position pos:line="26" pos:column="20"/></name><argument_list pos:line="26" pos:column="20">( <argument><expr><name pos:line="26" pos:column="22">stderr<pos:position pos:line="26" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="30">"detected dead child (pid=%ld), status %d\n%c"<pos:position pos:line="26" pos:column="76"/></literal></expr></argument>,
                     <argument><expr><operator pos:line="27" pos:column="22">(<pos:position pos:line="27" pos:column="23"/></operator><name pos:line="27" pos:column="23">long<pos:position pos:line="27" pos:column="27"/></name><operator pos:line="27" pos:column="27">)<pos:position pos:line="27" pos:column="28"/></operator> <name pos:line="27" pos:column="29">pid<pos:position pos:line="27" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="34">status<pos:position pos:line="27" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="42">0<pos:position pos:line="27" pos:column="43"/></literal></expr></argument> )<pos:position pos:line="27" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="46"/></expr_stmt>
        }<pos:position pos:line="28" pos:column="10"/></block></else></if>
    }<pos:position pos:line="29" pos:column="6"/></block></while>
    <expr_stmt><expr><name pos:line="30" pos:column="5">errno<pos:position pos:line="30" pos:column="10"/></name> <operator pos:line="30" pos:column="11">=<pos:position pos:line="30" pos:column="12"/></operator> <name pos:line="30" pos:column="13">saveerr<pos:position pos:line="30" pos:column="20"/></name></expr>;<pos:position pos:line="30" pos:column="21"/></expr_stmt>

<cpp:if pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">if<pos:position pos:line="32" pos:column="4"/></cpp:directive> <expr><name pos:line="32" pos:column="5">SIGRETTYPE<pos:position pos:line="32" pos:column="15"/></name> <operator pos:line="32" pos:column="16">!=<pos:position pos:line="32" pos:column="18"/></operator> <name pos:line="32" pos:column="19">void<pos:position pos:line="32" pos:column="23"/></name></expr></cpp:if>
    <return pos:line="33" pos:column="5">return <expr><literal type="number" pos:line="33" pos:column="12">0<pos:position pos:line="33" pos:column="13"/></literal></expr>;<pos:position pos:line="33" pos:column="14"/></return>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif<pos:position pos:line="34" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
