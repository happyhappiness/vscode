<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3643_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ConnStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">clientReadRequest<pos:position pos:line="2" pos:column="33"/></name></name><parameter_list pos:line="2" pos:column="33">(<parameter><decl><type><specifier pos:line="2" pos:column="34">const<pos:position pos:line="2" pos:column="39"/></specifier> <name pos:line="2" pos:column="40">CommIoCbParams<pos:position pos:line="2" pos:column="54"/></name> <modifier pos:line="2" pos:column="55">&amp;<pos:position pos:line="2" pos:column="60"/></modifier></type><name pos:line="2" pos:column="56">io<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="59"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">33<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="4" pos:column="15">5<pos:position pos:line="4" pos:column="16"/></literal></expr></argument>, <argument><expr><name><name pos:line="4" pos:column="18">io<pos:position pos:line="4" pos:column="20"/></name><operator pos:line="4" pos:column="20">.<pos:position pos:line="4" pos:column="21"/></operator><name pos:line="4" pos:column="21">conn<pos:position pos:line="4" pos:column="25"/></name></name></expr></argument>)<pos:position pos:line="4" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">Must<pos:position pos:line="5" pos:column="9"/></name><argument_list pos:line="5" pos:column="9">(<argument><expr><call><name pos:line="5" pos:column="10">reading<pos:position pos:line="5" pos:column="17"/></name><argument_list pos:line="5" pos:column="17">()<pos:position pos:line="5" pos:column="19"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name pos:line="6" pos:column="5">reader<pos:position pos:line="6" pos:column="11"/></name> <operator pos:line="6" pos:column="12">=<pos:position pos:line="6" pos:column="13"/></operator> <name pos:line="6" pos:column="14">NULL<pos:position pos:line="6" pos:column="18"/></name></expr>;<pos:position pos:line="6" pos:column="19"/></expr_stmt>

    <comment type="block" pos:line="8" pos:column="5">/* Bail out quickly on Comm::ERR_CLOSING - close handlers will tidy up */</comment>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name><name pos:line="9" pos:column="9">io<pos:position pos:line="9" pos:column="11"/></name><operator pos:line="9" pos:column="11">.<pos:position pos:line="9" pos:column="12"/></operator><name pos:line="9" pos:column="12">flag<pos:position pos:line="9" pos:column="16"/></name></name> <operator pos:line="9" pos:column="17">==<pos:position pos:line="9" pos:column="19"/></operator> <name><name pos:line="9" pos:column="20">Comm<pos:position pos:line="9" pos:column="24"/></name><operator pos:line="9" pos:column="24">::<pos:position pos:line="9" pos:column="26"/></operator><name pos:line="9" pos:column="26">ERR_CLOSING<pos:position pos:line="9" pos:column="37"/></name></name></expr>)<pos:position pos:line="9" pos:column="38"/></condition><then pos:line="9" pos:column="38"> <block pos:line="9" pos:column="39">{
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">debugs<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><literal type="number" pos:line="10" pos:column="16">33<pos:position pos:line="10" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="10" pos:column="19">5<pos:position pos:line="10" pos:column="20"/></literal></expr></argument>, <argument><expr><name><name pos:line="10" pos:column="22">io<pos:position pos:line="10" pos:column="24"/></name><operator pos:line="10" pos:column="24">.<pos:position pos:line="10" pos:column="25"/></operator><name pos:line="10" pos:column="25">conn<pos:position pos:line="10" pos:column="29"/></name></name> <operator pos:line="10" pos:column="30">&lt;&lt;<pos:position pos:line="10" pos:column="38"/></operator> <literal type="string" pos:line="10" pos:column="33">" closing Bailout."<pos:position pos:line="10" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="54"/></expr_stmt>
        <return pos:line="11" pos:column="9">return;<pos:position pos:line="11" pos:column="16"/></return>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="14" pos:column="5">assert<pos:position pos:line="14" pos:column="11"/></name><argument_list pos:line="14" pos:column="11">(<argument><expr><call><name><name pos:line="14" pos:column="12">Comm<pos:position pos:line="14" pos:column="16"/></name><operator pos:line="14" pos:column="16">::<pos:position pos:line="14" pos:column="18"/></operator><name pos:line="14" pos:column="18">IsConnOpen<pos:position pos:line="14" pos:column="28"/></name></name><argument_list pos:line="14" pos:column="28">(<argument><expr><name pos:line="14" pos:column="29">clientConnection<pos:position pos:line="14" pos:column="45"/></name></expr></argument>)<pos:position pos:line="14" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">assert<pos:position pos:line="15" pos:column="11"/></name><argument_list pos:line="15" pos:column="11">(<argument><expr><name><name pos:line="15" pos:column="12">io<pos:position pos:line="15" pos:column="14"/></name><operator pos:line="15" pos:column="14">.<pos:position pos:line="15" pos:column="15"/></operator><name pos:line="15" pos:column="15">conn<pos:position pos:line="15" pos:column="19"/></name><operator pos:line="15" pos:column="19">-&gt;<pos:position pos:line="15" pos:column="24"/></operator><name pos:line="15" pos:column="21">fd<pos:position pos:line="15" pos:column="23"/></name></name> <operator pos:line="15" pos:column="24">==<pos:position pos:line="15" pos:column="26"/></operator> <name><name pos:line="15" pos:column="27">clientConnection<pos:position pos:line="15" pos:column="43"/></name><operator pos:line="15" pos:column="43">-&gt;<pos:position pos:line="15" pos:column="48"/></operator><name pos:line="15" pos:column="45">fd<pos:position pos:line="15" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="49"/></expr_stmt>

    <comment type="block" pos:line="17" pos:column="5">/*
     * Don't reset the timeout value here. The value should be
     * counting Config.Timeout.request and applies to the request
     * as a whole, not individual read() calls.
     * Plus, it breaks our lame *HalfClosed() detection
     */</comment>

    <expr_stmt><expr><call><name><name pos:line="24" pos:column="5">in<pos:position pos:line="24" pos:column="7"/></name><operator pos:line="24" pos:column="7">.<pos:position pos:line="24" pos:column="8"/></operator><name pos:line="24" pos:column="8">maybeMakeSpaceAvailable<pos:position pos:line="24" pos:column="31"/></name></name><argument_list pos:line="24" pos:column="31">()<pos:position pos:line="24" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="34"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="25" pos:column="5">CommIoCbParams<pos:position pos:line="25" pos:column="19"/></name></type> <name pos:line="25" pos:column="20">rd<pos:position pos:line="25" pos:column="22"/></name><argument_list pos:line="25" pos:column="22">(<argument><expr><name pos:line="25" pos:column="23">this<pos:position pos:line="25" pos:column="27"/></name></expr></argument>)<pos:position pos:line="25" pos:column="28"/></argument_list></decl>;<pos:position pos:line="25" pos:column="29"/></decl_stmt> <comment type="line" pos:line="25" pos:column="30">// will be expanded with ReadNow results</comment>
    <expr_stmt><expr><name><name pos:line="26" pos:column="5">rd<pos:position pos:line="26" pos:column="7"/></name><operator pos:line="26" pos:column="7">.<pos:position pos:line="26" pos:column="8"/></operator><name pos:line="26" pos:column="8">conn<pos:position pos:line="26" pos:column="12"/></name></name> <operator pos:line="26" pos:column="13">=<pos:position pos:line="26" pos:column="14"/></operator> <name><name pos:line="26" pos:column="15">io<pos:position pos:line="26" pos:column="17"/></name><operator pos:line="26" pos:column="17">.<pos:position pos:line="26" pos:column="18"/></operator><name pos:line="26" pos:column="18">conn<pos:position pos:line="26" pos:column="22"/></name></name></expr>;<pos:position pos:line="26" pos:column="23"/></expr_stmt>
    <switch pos:line="27" pos:column="5">switch <condition pos:line="27" pos:column="12">(<expr><call><name><name pos:line="27" pos:column="13">Comm<pos:position pos:line="27" pos:column="17"/></name><operator pos:line="27" pos:column="17">::<pos:position pos:line="27" pos:column="19"/></operator><name pos:line="27" pos:column="19">ReadNow<pos:position pos:line="27" pos:column="26"/></name></name><argument_list pos:line="27" pos:column="26">(<argument><expr><name pos:line="27" pos:column="27">rd<pos:position pos:line="27" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="31">in<pos:position pos:line="27" pos:column="33"/></name><operator pos:line="27" pos:column="33">.<pos:position pos:line="27" pos:column="34"/></operator><name pos:line="27" pos:column="34">buf<pos:position pos:line="27" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="39"/></condition> <block pos:line="27" pos:column="40">{
    <case pos:line="28" pos:column="5">case <expr><name><name pos:line="28" pos:column="10">Comm<pos:position pos:line="28" pos:column="14"/></name><operator pos:line="28" pos:column="14">::<pos:position pos:line="28" pos:column="16"/></operator><name pos:line="28" pos:column="16">INPROGRESS<pos:position pos:line="28" pos:column="26"/></name></name></expr>:<pos:position pos:line="28" pos:column="27"/></case>
        <if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><call><name><name pos:line="29" pos:column="13">in<pos:position pos:line="29" pos:column="15"/></name><operator pos:line="29" pos:column="15">.<pos:position pos:line="29" pos:column="16"/></operator><name pos:line="29" pos:column="16">buf<pos:position pos:line="29" pos:column="19"/></name><operator pos:line="29" pos:column="19">.<pos:position pos:line="29" pos:column="20"/></operator><name pos:line="29" pos:column="20">isEmpty<pos:position pos:line="29" pos:column="27"/></name></name><argument_list pos:line="29" pos:column="27">()<pos:position pos:line="29" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="30"/></condition><then pos:line="29" pos:column="30">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="13">debugs<pos:position pos:line="30" pos:column="19"/></name><argument_list pos:line="30" pos:column="19">(<argument><expr><literal type="number" pos:line="30" pos:column="20">33<pos:position pos:line="30" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="24">2<pos:position pos:line="30" pos:column="25"/></literal></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="27">io<pos:position pos:line="30" pos:column="29"/></name><operator pos:line="30" pos:column="29">.<pos:position pos:line="30" pos:column="30"/></operator><name pos:line="30" pos:column="30">conn<pos:position pos:line="30" pos:column="34"/></name></name> <operator pos:line="30" pos:column="35">&lt;&lt;<pos:position pos:line="30" pos:column="43"/></operator> <literal type="string" pos:line="30" pos:column="38">": no data to process, "<pos:position pos:line="30" pos:column="62"/></literal> <operator pos:line="30" pos:column="63">&lt;&lt;<pos:position pos:line="30" pos:column="71"/></operator> <call><name pos:line="30" pos:column="66">xstrerr<pos:position pos:line="30" pos:column="73"/></name><argument_list pos:line="30" pos:column="73">(<argument><expr><name><name pos:line="30" pos:column="74">rd<pos:position pos:line="30" pos:column="76"/></name><operator pos:line="30" pos:column="76">.<pos:position pos:line="30" pos:column="77"/></operator><name pos:line="30" pos:column="77">xerrno<pos:position pos:line="30" pos:column="83"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="84"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="86"/></expr_stmt></block></then></if>
        <expr_stmt><expr><call><name pos:line="31" pos:column="9">readSomeData<pos:position pos:line="31" pos:column="21"/></name><argument_list pos:line="31" pos:column="21">()<pos:position pos:line="31" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="24"/></expr_stmt>
        <return pos:line="32" pos:column="9">return;<pos:position pos:line="32" pos:column="16"/></return>

    <case pos:line="34" pos:column="5">case <expr><name><name pos:line="34" pos:column="10">Comm<pos:position pos:line="34" pos:column="14"/></name><operator pos:line="34" pos:column="14">::<pos:position pos:line="34" pos:column="16"/></operator><name pos:line="34" pos:column="16">OK<pos:position pos:line="34" pos:column="18"/></name></name></expr>:<pos:position pos:line="34" pos:column="19"/></case>
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">kb_incr<pos:position pos:line="35" pos:column="16"/></name><argument_list pos:line="35" pos:column="16">(<argument><expr><operator pos:line="35" pos:column="17">&amp;<pos:position pos:line="35" pos:column="22"/></operator><operator pos:line="35" pos:column="18">(<pos:position pos:line="35" pos:column="19"/></operator><name><name pos:line="35" pos:column="19">statCounter<pos:position pos:line="35" pos:column="30"/></name><operator pos:line="35" pos:column="30">.<pos:position pos:line="35" pos:column="31"/></operator><name pos:line="35" pos:column="31">client_http<pos:position pos:line="35" pos:column="42"/></name><operator pos:line="35" pos:column="42">.<pos:position pos:line="35" pos:column="43"/></operator><name pos:line="35" pos:column="43">kbytes_in<pos:position pos:line="35" pos:column="52"/></name></name><operator pos:line="35" pos:column="52">)<pos:position pos:line="35" pos:column="53"/></operator></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="55">rd<pos:position pos:line="35" pos:column="57"/></name><operator pos:line="35" pos:column="57">.<pos:position pos:line="35" pos:column="58"/></operator><name pos:line="35" pos:column="58">size<pos:position pos:line="35" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="64"/></expr_stmt>
        <comment type="line" pos:line="36" pos:column="9">// may comm_close or setReplyToError</comment>
        <if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><operator pos:line="37" pos:column="13">!<pos:position pos:line="37" pos:column="14"/></operator><call><name pos:line="37" pos:column="14">handleReadData<pos:position pos:line="37" pos:column="28"/></name><argument_list pos:line="37" pos:column="28">()<pos:position pos:line="37" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="31"/></condition><then pos:line="37" pos:column="31">
            <block type="pseudo"><return pos:line="38" pos:column="13">return;<pos:position pos:line="38" pos:column="20"/></return></block></then></if>

        <comment type="block" pos:line="40" pos:column="9">/* Continue to process previously read data */</comment>
        <break pos:line="41" pos:column="9">break;<pos:position pos:line="41" pos:column="15"/></break>

    <case pos:line="43" pos:column="5">case <expr><name><name pos:line="43" pos:column="10">Comm<pos:position pos:line="43" pos:column="14"/></name><operator pos:line="43" pos:column="14">::<pos:position pos:line="43" pos:column="16"/></operator><name pos:line="43" pos:column="16">ENDFILE<pos:position pos:line="43" pos:column="23"/></name></name></expr>:<pos:position pos:line="43" pos:column="24"/></case> <comment type="line" pos:line="43" pos:column="25">// close detected by 0-byte read</comment>
        <expr_stmt><expr><call><name pos:line="44" pos:column="9">debugs<pos:position pos:line="44" pos:column="15"/></name><argument_list pos:line="44" pos:column="15">(<argument><expr><literal type="number" pos:line="44" pos:column="16">33<pos:position pos:line="44" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="20">5<pos:position pos:line="44" pos:column="21"/></literal></expr></argument>, <argument><expr><name><name pos:line="44" pos:column="23">io<pos:position pos:line="44" pos:column="25"/></name><operator pos:line="44" pos:column="25">.<pos:position pos:line="44" pos:column="26"/></operator><name pos:line="44" pos:column="26">conn<pos:position pos:line="44" pos:column="30"/></name></name> <operator pos:line="44" pos:column="31">&lt;&lt;<pos:position pos:line="44" pos:column="39"/></operator> <literal type="string" pos:line="44" pos:column="34">" closed?"<pos:position pos:line="44" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="46"/></expr_stmt>

        <if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><call><name pos:line="46" pos:column="13">connFinishedWithConn<pos:position pos:line="46" pos:column="33"/></name><argument_list pos:line="46" pos:column="33">(<argument><expr><name><name pos:line="46" pos:column="34">rd<pos:position pos:line="46" pos:column="36"/></name><operator pos:line="46" pos:column="36">.<pos:position pos:line="46" pos:column="37"/></operator><name pos:line="46" pos:column="37">size<pos:position pos:line="46" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="43"/></condition><then pos:line="46" pos:column="43"> <block pos:line="46" pos:column="44">{
            <expr_stmt><expr><call><name><name pos:line="47" pos:column="13">clientConnection<pos:position pos:line="47" pos:column="29"/></name><operator pos:line="47" pos:column="29">-&gt;<pos:position pos:line="47" pos:column="34"/></operator><name pos:line="47" pos:column="31">close<pos:position pos:line="47" pos:column="36"/></name></name><argument_list pos:line="47" pos:column="36">()<pos:position pos:line="47" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="39"/></expr_stmt>
            <return pos:line="48" pos:column="13">return;<pos:position pos:line="48" pos:column="20"/></return>
        }<pos:position pos:line="49" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="51" pos:column="9">/* It might be half-closed, we can't tell */</comment>
        <expr_stmt><expr><name><name pos:line="52" pos:column="9">fd_table<pos:position pos:line="52" pos:column="17"/></name><index pos:line="52" pos:column="17">[<expr><name><name pos:line="52" pos:column="18">io<pos:position pos:line="52" pos:column="20"/></name><operator pos:line="52" pos:column="20">.<pos:position pos:line="52" pos:column="21"/></operator><name pos:line="52" pos:column="21">conn<pos:position pos:line="52" pos:column="25"/></name><operator pos:line="52" pos:column="25">-&gt;<pos:position pos:line="52" pos:column="30"/></operator><name pos:line="52" pos:column="27">fd<pos:position pos:line="52" pos:column="29"/></name></name></expr>]<pos:position pos:line="52" pos:column="30"/></index></name><operator pos:line="52" pos:column="30">.<pos:position pos:line="52" pos:column="31"/></operator><name><name pos:line="52" pos:column="31">flags<pos:position pos:line="52" pos:column="36"/></name><operator pos:line="52" pos:column="36">.<pos:position pos:line="52" pos:column="37"/></operator><name pos:line="52" pos:column="37">socket_eof<pos:position pos:line="52" pos:column="47"/></name></name> <operator pos:line="52" pos:column="48">=<pos:position pos:line="52" pos:column="49"/></operator> <literal type="boolean" pos:line="52" pos:column="50">true<pos:position pos:line="52" pos:column="54"/></literal></expr>;<pos:position pos:line="52" pos:column="55"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="53" pos:column="9">commMarkHalfClosed<pos:position pos:line="53" pos:column="27"/></name><argument_list pos:line="53" pos:column="27">(<argument><expr><name><name pos:line="53" pos:column="28">io<pos:position pos:line="53" pos:column="30"/></name><operator pos:line="53" pos:column="30">.<pos:position pos:line="53" pos:column="31"/></operator><name pos:line="53" pos:column="31">conn<pos:position pos:line="53" pos:column="35"/></name><operator pos:line="53" pos:column="35">-&gt;<pos:position pos:line="53" pos:column="40"/></operator><name pos:line="53" pos:column="37">fd<pos:position pos:line="53" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="54" pos:column="9">fd_note<pos:position pos:line="54" pos:column="16"/></name><argument_list pos:line="54" pos:column="16">(<argument><expr><name><name pos:line="54" pos:column="17">io<pos:position pos:line="54" pos:column="19"/></name><operator pos:line="54" pos:column="19">.<pos:position pos:line="54" pos:column="20"/></operator><name pos:line="54" pos:column="20">conn<pos:position pos:line="54" pos:column="24"/></name><operator pos:line="54" pos:column="24">-&gt;<pos:position pos:line="54" pos:column="29"/></operator><name pos:line="54" pos:column="26">fd<pos:position pos:line="54" pos:column="28"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="30">"half-closed"<pos:position pos:line="54" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="45"/></expr_stmt>

        <comment type="block" pos:line="56" pos:column="9">/* There is one more close check at the end, to detect aborted
         * (partial) requests. At this point we can't tell if the request
         * is partial.
         */</comment>

        <comment type="block" pos:line="61" pos:column="9">/* Continue to process previously read data */</comment>
        <break pos:line="62" pos:column="9">break;<pos:position pos:line="62" pos:column="15"/></break>

    <comment type="line" pos:line="64" pos:column="5">// case Comm::COMM_ERROR:</comment>
    <default pos:line="65" pos:column="5">default:<pos:position pos:line="65" pos:column="13"/></default> <comment type="line" pos:line="65" pos:column="14">// no other flags should ever occur</comment>
        <expr_stmt><expr><call><name pos:line="66" pos:column="9">debugs<pos:position pos:line="66" pos:column="15"/></name><argument_list pos:line="66" pos:column="15">(<argument><expr><literal type="number" pos:line="66" pos:column="16">33<pos:position pos:line="66" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="66" pos:column="20">2<pos:position pos:line="66" pos:column="21"/></literal></expr></argument>, <argument><expr><name><name pos:line="66" pos:column="23">io<pos:position pos:line="66" pos:column="25"/></name><operator pos:line="66" pos:column="25">.<pos:position pos:line="66" pos:column="26"/></operator><name pos:line="66" pos:column="26">conn<pos:position pos:line="66" pos:column="30"/></name></name> <operator pos:line="66" pos:column="31">&lt;&lt;<pos:position pos:line="66" pos:column="39"/></operator> <literal type="string" pos:line="66" pos:column="34">": got flag "<pos:position pos:line="66" pos:column="47"/></literal> <operator pos:line="66" pos:column="48">&lt;&lt;<pos:position pos:line="66" pos:column="56"/></operator> <name><name pos:line="66" pos:column="51">rd<pos:position pos:line="66" pos:column="53"/></name><operator pos:line="66" pos:column="53">.<pos:position pos:line="66" pos:column="54"/></operator><name pos:line="66" pos:column="54">flag<pos:position pos:line="66" pos:column="58"/></name></name> <operator pos:line="66" pos:column="59">&lt;&lt;<pos:position pos:line="66" pos:column="67"/></operator> <literal type="string" pos:line="66" pos:column="62">"; "<pos:position pos:line="66" pos:column="66"/></literal> <operator pos:line="66" pos:column="67">&lt;&lt;<pos:position pos:line="66" pos:column="75"/></operator> <call><name pos:line="66" pos:column="70">xstrerr<pos:position pos:line="66" pos:column="77"/></name><argument_list pos:line="66" pos:column="77">(<argument><expr><name><name pos:line="66" pos:column="78">rd<pos:position pos:line="66" pos:column="80"/></name><operator pos:line="66" pos:column="80">.<pos:position pos:line="66" pos:column="81"/></operator><name pos:line="66" pos:column="81">xerrno<pos:position pos:line="66" pos:column="87"/></name></name></expr></argument>)<pos:position pos:line="66" pos:column="88"/></argument_list></call></expr></argument>)<pos:position pos:line="66" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="90"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="67" pos:column="9">notifyAllContexts<pos:position pos:line="67" pos:column="26"/></name><argument_list pos:line="67" pos:column="26">(<argument><expr><name><name pos:line="67" pos:column="27">rd<pos:position pos:line="67" pos:column="29"/></name><operator pos:line="67" pos:column="29">.<pos:position pos:line="67" pos:column="30"/></operator><name pos:line="67" pos:column="30">xerrno<pos:position pos:line="67" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="67" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="68" pos:column="9">io<pos:position pos:line="68" pos:column="11"/></name><operator pos:line="68" pos:column="11">.<pos:position pos:line="68" pos:column="12"/></operator><name pos:line="68" pos:column="12">conn<pos:position pos:line="68" pos:column="16"/></name><operator pos:line="68" pos:column="16">-&gt;<pos:position pos:line="68" pos:column="21"/></operator><name pos:line="68" pos:column="18">close<pos:position pos:line="68" pos:column="23"/></name></name><argument_list pos:line="68" pos:column="23">()<pos:position pos:line="68" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="26"/></expr_stmt>
        <return pos:line="69" pos:column="9">return;<pos:position pos:line="69" pos:column="16"/></return>
    }<pos:position pos:line="70" pos:column="6"/></block></switch>

    <comment type="block" pos:line="72" pos:column="5">/* Process next request */</comment>
    <if pos:line="73" pos:column="5">if <condition pos:line="73" pos:column="8">(<expr><call><name pos:line="73" pos:column="9">getConcurrentRequestCount<pos:position pos:line="73" pos:column="34"/></name><argument_list pos:line="73" pos:column="34">()<pos:position pos:line="73" pos:column="36"/></argument_list></call> <operator pos:line="73" pos:column="37">==<pos:position pos:line="73" pos:column="39"/></operator> <literal type="number" pos:line="73" pos:column="40">0<pos:position pos:line="73" pos:column="41"/></literal></expr>)<pos:position pos:line="73" pos:column="42"/></condition><then pos:line="73" pos:column="42">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="74" pos:column="9">fd_note<pos:position pos:line="74" pos:column="16"/></name><argument_list pos:line="74" pos:column="16">(<argument><expr><name><name pos:line="74" pos:column="17">io<pos:position pos:line="74" pos:column="19"/></name><operator pos:line="74" pos:column="19">.<pos:position pos:line="74" pos:column="20"/></operator><name pos:line="74" pos:column="20">fd<pos:position pos:line="74" pos:column="22"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="74" pos:column="24">"Reading next request"<pos:position pos:line="74" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="48"/></expr_stmt></block></then></if>

    <if pos:line="76" pos:column="5">if <condition pos:line="76" pos:column="8">(<expr><operator pos:line="76" pos:column="9">!<pos:position pos:line="76" pos:column="10"/></operator><call><name pos:line="76" pos:column="10">clientParseRequests<pos:position pos:line="76" pos:column="29"/></name><argument_list pos:line="76" pos:column="29">()<pos:position pos:line="76" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="76" pos:column="32"/></condition><then pos:line="76" pos:column="32"> <block pos:line="76" pos:column="33">{
        <if pos:line="77" pos:column="9">if <condition pos:line="77" pos:column="12">(<expr><operator pos:line="77" pos:column="13">!<pos:position pos:line="77" pos:column="14"/></operator><call><name pos:line="77" pos:column="14">isOpen<pos:position pos:line="77" pos:column="20"/></name><argument_list pos:line="77" pos:column="20">()<pos:position pos:line="77" pos:column="22"/></argument_list></call></expr>)<pos:position pos:line="77" pos:column="23"/></condition><then pos:line="77" pos:column="23">
            <block type="pseudo"><return pos:line="78" pos:column="13">return;<pos:position pos:line="78" pos:column="20"/></return></block></then></if>
        <comment type="block" pos:line="79" pos:column="9">/*
         * If the client here is half closed and we failed
         * to parse a request, close the connection.
         * The above check with connFinishedWithConn() only
         * succeeds _if_ the buffer is empty which it won't
         * be if we have an incomplete request.
         * XXX: This duplicates ClientSocketContext::keepaliveNextRequest
         */</comment>
        <if pos:line="87" pos:column="9">if <condition pos:line="87" pos:column="12">(<expr><call><name pos:line="87" pos:column="13">getConcurrentRequestCount<pos:position pos:line="87" pos:column="38"/></name><argument_list pos:line="87" pos:column="38">()<pos:position pos:line="87" pos:column="40"/></argument_list></call> <operator pos:line="87" pos:column="41">==<pos:position pos:line="87" pos:column="43"/></operator> <literal type="number" pos:line="87" pos:column="44">0<pos:position pos:line="87" pos:column="45"/></literal> <operator pos:line="87" pos:column="46">&amp;&amp;<pos:position pos:line="87" pos:column="56"/></operator> <call><name pos:line="87" pos:column="49">commIsHalfClosed<pos:position pos:line="87" pos:column="65"/></name><argument_list pos:line="87" pos:column="65">(<argument><expr><name><name pos:line="87" pos:column="66">io<pos:position pos:line="87" pos:column="68"/></name><operator pos:line="87" pos:column="68">.<pos:position pos:line="87" pos:column="69"/></operator><name pos:line="87" pos:column="69">fd<pos:position pos:line="87" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="87" pos:column="72"/></argument_list></call></expr>)<pos:position pos:line="87" pos:column="73"/></condition><then pos:line="87" pos:column="73"> <block pos:line="87" pos:column="74">{
            <expr_stmt><expr><call><name pos:line="88" pos:column="13">debugs<pos:position pos:line="88" pos:column="19"/></name><argument_list pos:line="88" pos:column="19">(<argument><expr><literal type="number" pos:line="88" pos:column="20">33<pos:position pos:line="88" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="88" pos:column="24">5<pos:position pos:line="88" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="88" pos:column="27">HERE<pos:position pos:line="88" pos:column="31"/></name> <operator pos:line="88" pos:column="32">&lt;&lt;<pos:position pos:line="88" pos:column="40"/></operator> <name><name pos:line="88" pos:column="35">io<pos:position pos:line="88" pos:column="37"/></name><operator pos:line="88" pos:column="37">.<pos:position pos:line="88" pos:column="38"/></operator><name pos:line="88" pos:column="38">conn<pos:position pos:line="88" pos:column="42"/></name></name> <operator pos:line="88" pos:column="43">&lt;&lt;<pos:position pos:line="88" pos:column="51"/></operator> <literal type="string" pos:line="88" pos:column="46">": half-closed connection, no completed request parsed, connection closing."<pos:position pos:line="88" pos:column="122"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="123"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="124"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="89" pos:column="13">clientConnection<pos:position pos:line="89" pos:column="29"/></name><operator pos:line="89" pos:column="29">-&gt;<pos:position pos:line="89" pos:column="34"/></operator><name pos:line="89" pos:column="31">close<pos:position pos:line="89" pos:column="36"/></name></name><argument_list pos:line="89" pos:column="36">()<pos:position pos:line="89" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="39"/></expr_stmt>
            <return pos:line="90" pos:column="13">return;<pos:position pos:line="90" pos:column="20"/></return>
        }<pos:position pos:line="91" pos:column="10"/></block></then></if>
    }<pos:position pos:line="92" pos:column="6"/></block></then></if>

    <if pos:line="94" pos:column="5">if <condition pos:line="94" pos:column="8">(<expr><operator pos:line="94" pos:column="9">!<pos:position pos:line="94" pos:column="10"/></operator><call><name pos:line="94" pos:column="10">isOpen<pos:position pos:line="94" pos:column="16"/></name><argument_list pos:line="94" pos:column="16">()<pos:position pos:line="94" pos:column="18"/></argument_list></call></expr>)<pos:position pos:line="94" pos:column="19"/></condition><then pos:line="94" pos:column="19">
        <block type="pseudo"><return pos:line="95" pos:column="9">return;<pos:position pos:line="95" pos:column="16"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="97" pos:column="5">clientAfterReadingRequests<pos:position pos:line="97" pos:column="31"/></name><argument_list pos:line="97" pos:column="31">()<pos:position pos:line="97" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="34"/></expr_stmt>
}<pos:position pos:line="98" pos:column="2"/></block></function></unit>
