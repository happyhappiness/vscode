<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2852_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">ChunkedCodingParser<pos:position pos:line="1" pos:column="25"/></name><operator pos:line="1" pos:column="25">::<pos:position pos:line="1" pos:column="27"/></operator><name pos:line="1" pos:column="27">parseChunkBeg<pos:position pos:line="1" pos:column="40"/></name></name><parameter_list pos:line="1" pos:column="40">()<pos:position pos:line="1" pos:column="42"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="3" pos:column="5">Must<pos:position pos:line="3" pos:column="9"/></name><argument_list pos:line="3" pos:column="9">(<argument><expr><name pos:line="3" pos:column="10">theChunkSize<pos:position pos:line="3" pos:column="22"/></name> <operator pos:line="3" pos:column="23">&lt;=<pos:position pos:line="3" pos:column="28"/></operator> <literal type="number" pos:line="3" pos:column="26">0<pos:position pos:line="3" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="29"/></expr_stmt> <comment type="line" pos:line="3" pos:column="30">// Should(), really</comment>

    <decl_stmt><decl><type><name pos:line="5" pos:column="5">size_t<pos:position pos:line="5" pos:column="11"/></name></type> <name pos:line="5" pos:column="12">crlfBeg<pos:position pos:line="5" pos:column="19"/></name> <init pos:line="5" pos:column="20">= <expr><literal type="number" pos:line="5" pos:column="22">0<pos:position pos:line="5" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">size_t<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">crlfEnd<pos:position pos:line="6" pos:column="19"/></name> <init pos:line="6" pos:column="20">= <expr><literal type="number" pos:line="6" pos:column="22">0<pos:position pos:line="6" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><call><name pos:line="8" pos:column="9">findCrlf<pos:position pos:line="8" pos:column="17"/></name><argument_list pos:line="8" pos:column="17">(<argument><expr><name pos:line="8" pos:column="18">crlfBeg<pos:position pos:line="8" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="27">crlfEnd<pos:position pos:line="8" pos:column="34"/></name></expr></argument>)<pos:position pos:line="8" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="36"/></condition><then pos:line="8" pos:column="36"> <block pos:line="8" pos:column="37">{
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">debugs<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><literal type="number" pos:line="9" pos:column="16">94<pos:position pos:line="9" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="9" pos:column="19">7<pos:position pos:line="9" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="22">"found chunk-size end: "<pos:position pos:line="9" pos:column="46"/></literal> <operator pos:line="9" pos:column="47">&lt;&lt;<pos:position pos:line="9" pos:column="55"/></operator> <name pos:line="9" pos:column="50">crlfBeg<pos:position pos:line="9" pos:column="57"/></name> <operator pos:line="9" pos:column="58">&lt;&lt;<pos:position pos:line="9" pos:column="66"/></operator> <literal type="string" pos:line="9" pos:column="61">"-"<pos:position pos:line="9" pos:column="64"/></literal> <operator pos:line="9" pos:column="65">&lt;&lt;<pos:position pos:line="9" pos:column="73"/></operator> <name pos:line="9" pos:column="68">crlfEnd<pos:position pos:line="9" pos:column="75"/></name></expr></argument>)<pos:position pos:line="9" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="77"/></expr_stmt>
        <decl_stmt><decl><type><name pos:line="10" pos:column="9">int64_t<pos:position pos:line="10" pos:column="16"/></name></type> <name pos:line="10" pos:column="17">size<pos:position pos:line="10" pos:column="21"/></name> <init pos:line="10" pos:column="22">= <expr><operator pos:line="10" pos:column="24">-<pos:position pos:line="10" pos:column="25"/></operator><literal type="number" pos:line="10" pos:column="25">1<pos:position pos:line="10" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="27"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="11" pos:column="9">const<pos:position pos:line="11" pos:column="14"/></specifier> <name pos:line="11" pos:column="15">char<pos:position pos:line="11" pos:column="19"/></name> <modifier pos:line="11" pos:column="20">*<pos:position pos:line="11" pos:column="21"/></modifier></type><name pos:line="11" pos:column="21">p<pos:position pos:line="11" pos:column="22"/></name> <init pos:line="11" pos:column="23">= <expr><literal type="number" pos:line="11" pos:column="25">0<pos:position pos:line="11" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="27"/></decl_stmt>

        <if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><call><name pos:line="13" pos:column="13">StringToInt64<pos:position pos:line="13" pos:column="26"/></name><argument_list pos:line="13" pos:column="26">(<argument><expr><call><name><name pos:line="13" pos:column="27">theIn<pos:position pos:line="13" pos:column="32"/></name><operator pos:line="13" pos:column="32">-&gt;<pos:position pos:line="13" pos:column="37"/></operator><name pos:line="13" pos:column="34">content<pos:position pos:line="13" pos:column="41"/></name></name><argument_list pos:line="13" pos:column="41">()<pos:position pos:line="13" pos:column="43"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="13" pos:column="45">size<pos:position pos:line="13" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="51">&amp;<pos:position pos:line="13" pos:column="56"/></operator><name pos:line="13" pos:column="52">p<pos:position pos:line="13" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="55">16<pos:position pos:line="13" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="59"/></condition><then pos:line="13" pos:column="59"> <block pos:line="13" pos:column="60">{
            <if pos:line="14" pos:column="13">if <condition pos:line="14" pos:column="16">(<expr><name pos:line="14" pos:column="17">size<pos:position pos:line="14" pos:column="21"/></name> <operator pos:line="14" pos:column="22">&lt;<pos:position pos:line="14" pos:column="26"/></operator> <literal type="number" pos:line="14" pos:column="24">0<pos:position pos:line="14" pos:column="25"/></literal></expr>)<pos:position pos:line="14" pos:column="26"/></condition><then pos:line="14" pos:column="26"> <block pos:line="14" pos:column="27">{
                <throw pos:line="15" pos:column="17">throw <expr><call><name pos:line="15" pos:column="23">TexcHere<pos:position pos:line="15" pos:column="31"/></name><argument_list pos:line="15" pos:column="31">(<argument><expr><literal type="string" pos:line="15" pos:column="32">"negative chunk size"<pos:position pos:line="15" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="55"/></throw>
                <return pos:line="16" pos:column="17">return;<pos:position pos:line="16" pos:column="24"/></return>
            }<pos:position pos:line="17" pos:column="14"/></block></then></if>

            <expr_stmt><expr><call><name><name pos:line="19" pos:column="13">theIn<pos:position pos:line="19" pos:column="18"/></name><operator pos:line="19" pos:column="18">-&gt;<pos:position pos:line="19" pos:column="23"/></operator><name pos:line="19" pos:column="20">consume<pos:position pos:line="19" pos:column="27"/></name></name><argument_list pos:line="19" pos:column="27">(<argument><expr><name pos:line="19" pos:column="28">crlfEnd<pos:position pos:line="19" pos:column="35"/></name></expr></argument>)<pos:position pos:line="19" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="37"/></expr_stmt>
            <expr_stmt><expr><name pos:line="20" pos:column="13">theChunkSize<pos:position pos:line="20" pos:column="25"/></name> <operator pos:line="20" pos:column="26">=<pos:position pos:line="20" pos:column="27"/></operator> <name pos:line="20" pos:column="28">theLeftBodySize<pos:position pos:line="20" pos:column="43"/></name> <operator pos:line="20" pos:column="44">=<pos:position pos:line="20" pos:column="45"/></operator> <name pos:line="20" pos:column="46">size<pos:position pos:line="20" pos:column="50"/></name></expr>;<pos:position pos:line="20" pos:column="51"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="21" pos:column="13">debugs<pos:position pos:line="21" pos:column="19"/></name><argument_list pos:line="21" pos:column="19">(<argument><expr><literal type="number" pos:line="21" pos:column="20">94<pos:position pos:line="21" pos:column="22"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="21" pos:column="23">7<pos:position pos:line="21" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="26">"found chunk: "<pos:position pos:line="21" pos:column="41"/></literal> <operator pos:line="21" pos:column="42">&lt;&lt;<pos:position pos:line="21" pos:column="50"/></operator> <name pos:line="21" pos:column="45">theChunkSize<pos:position pos:line="21" pos:column="57"/></name></expr></argument>)<pos:position pos:line="21" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="59"/></expr_stmt>
            <expr_stmt><expr><name pos:line="22" pos:column="13">theStep<pos:position pos:line="22" pos:column="20"/></name> <operator pos:line="22" pos:column="21">=<pos:position pos:line="22" pos:column="22"/></operator> <ternary><condition><expr><name pos:line="22" pos:column="23">theChunkSize<pos:position pos:line="22" pos:column="35"/></name> <operator pos:line="22" pos:column="36">==<pos:position pos:line="22" pos:column="38"/></operator> <literal type="number" pos:line="22" pos:column="39">0<pos:position pos:line="22" pos:column="40"/></literal></expr> ?<pos:position pos:line="22" pos:column="42"/></condition><then pos:line="22" pos:column="42"> <expr><name pos:line="22" pos:column="43">psTrailer<pos:position pos:line="22" pos:column="52"/></name></expr> <pos:position pos:line="22" pos:column="53"/></then><else pos:line="22" pos:column="53">: <expr><name pos:line="22" pos:column="55">psChunkBody<pos:position pos:line="22" pos:column="66"/></name></expr></else></ternary></expr>;<pos:position pos:line="22" pos:column="67"/></expr_stmt>
            <return pos:line="23" pos:column="13">return;<pos:position pos:line="23" pos:column="20"/></return>
        }<pos:position pos:line="24" pos:column="10"/></block></then></if>

        <throw pos:line="26" pos:column="9">throw <expr><call><name pos:line="26" pos:column="15">TexcHere<pos:position pos:line="26" pos:column="23"/></name><argument_list pos:line="26" pos:column="23">(<argument><expr><literal type="string" pos:line="26" pos:column="24">"corrupted chunk size"<pos:position pos:line="26" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="48"/></throw>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="29" pos:column="5">doNeedMoreData<pos:position pos:line="29" pos:column="19"/></name> <operator pos:line="29" pos:column="20">=<pos:position pos:line="29" pos:column="21"/></operator> <literal type="boolean" pos:line="29" pos:column="22">true<pos:position pos:line="29" pos:column="26"/></literal></expr>;<pos:position pos:line="29" pos:column="27"/></expr_stmt>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
