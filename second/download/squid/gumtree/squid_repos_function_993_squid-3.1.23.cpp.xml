<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_993_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">_db_print<pos:position pos:line="2" pos:column="10"/></name><parameter_list pos:line="2" pos:column="10">(<parameter><decl><type><specifier pos:line="2" pos:column="11">const<pos:position pos:line="2" pos:column="16"/></specifier> <name pos:line="2" pos:column="17">char<pos:position pos:line="2" pos:column="21"/></name> <modifier pos:line="2" pos:column="22">*<pos:position pos:line="2" pos:column="23"/></modifier></type><name pos:line="2" pos:column="23">format<pos:position pos:line="2" pos:column="29"/></name></decl></parameter>,<parameter><decl><type><modifier pos:line="2" pos:column="30">...<pos:position pos:line="2" pos:column="33"/></modifier></type></decl></parameter>)<pos:position pos:line="2" pos:column="34"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name></type> <name><name pos:line="4" pos:column="10">f<pos:position pos:line="4" pos:column="11"/></name><index pos:line="4" pos:column="11">[<expr><name pos:line="4" pos:column="12">BUFSIZ<pos:position pos:line="4" pos:column="18"/></name></expr>]<pos:position pos:line="4" pos:column="19"/></index></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="5" pos:column="5">f<pos:position pos:line="5" pos:column="6"/></name><index pos:line="5" pos:column="6">[<expr><literal type="number" pos:line="5" pos:column="7">0<pos:position pos:line="5" pos:column="8"/></literal></expr>]<pos:position pos:line="5" pos:column="9"/></index></name><operator pos:line="5" pos:column="9">=<pos:position pos:line="5" pos:column="10"/></operator><literal type="char" pos:line="5" pos:column="10">'\0'<pos:position pos:line="5" pos:column="14"/></literal></expr>;<pos:position pos:line="5" pos:column="15"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">va_list<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">args1<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">va_list<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">args2<pos:position pos:line="7" pos:column="18"/></name></decl>;<pos:position pos:line="7" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">va_list<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">args3<pos:position pos:line="8" pos:column="18"/></name></decl>;<pos:position pos:line="8" pos:column="19"/></decl_stmt>

<cpp:ifdef pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">ifdef<pos:position pos:line="10" pos:column="7"/></cpp:directive> <name pos:line="10" pos:column="8">_SQUID_MSWIN_<pos:position pos:line="10" pos:column="21"/></name></cpp:ifdef>
    <comment type="block" pos:line="11" pos:column="5">/* Multiple WIN32 threads may call this simultaneously */</comment>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><operator pos:line="13" pos:column="9">!<pos:position pos:line="13" pos:column="10"/></operator><name pos:line="13" pos:column="10">dbg_mutex<pos:position pos:line="13" pos:column="19"/></name></expr>)<pos:position pos:line="13" pos:column="20"/></condition><then pos:line="13" pos:column="20"> <block pos:line="13" pos:column="21">{
        <decl_stmt><decl><type><name pos:line="14" pos:column="9">HMODULE<pos:position pos:line="14" pos:column="16"/></name></type> <name pos:line="14" pos:column="17">krnl_lib<pos:position pos:line="14" pos:column="25"/></name> <init pos:line="14" pos:column="26">= <expr><call><name pos:line="14" pos:column="28">GetModuleHandle<pos:position pos:line="14" pos:column="43"/></name><argument_list pos:line="14" pos:column="43">(<argument><expr><literal type="string" pos:line="14" pos:column="44">"Kernel32"<pos:position pos:line="14" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="56"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="15" pos:column="9">PFInitializeCriticalSectionAndSpinCount<pos:position pos:line="15" pos:column="48"/></name></type> <name pos:line="15" pos:column="49">InitializeCriticalSectionAndSpinCount<pos:position pos:line="15" pos:column="86"/></name> <init pos:line="15" pos:column="87">= <expr><name pos:line="15" pos:column="89">NULL<pos:position pos:line="15" pos:column="93"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="94"/></decl_stmt>

        <if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">krnl_lib<pos:position pos:line="17" pos:column="21"/></name></expr>)<pos:position pos:line="17" pos:column="22"/></condition><then pos:line="17" pos:column="22">
            <block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="13">InitializeCriticalSectionAndSpinCount<pos:position pos:line="18" pos:column="50"/></name> <operator pos:line="18" pos:column="51">=<pos:position pos:line="18" pos:column="52"/></operator>
                <operator pos:line="19" pos:column="17">(<pos:position pos:line="19" pos:column="18"/></operator><name pos:line="19" pos:column="18">PFInitializeCriticalSectionAndSpinCount<pos:position pos:line="19" pos:column="57"/></name><operator pos:line="19" pos:column="57">)<pos:position pos:line="19" pos:column="58"/></operator> <call><name pos:line="19" pos:column="59">GetProcAddress<pos:position pos:line="19" pos:column="73"/></name><argument_list pos:line="19" pos:column="73">(<argument><expr><name pos:line="19" pos:column="74">krnl_lib<pos:position pos:line="19" pos:column="82"/></name></expr></argument>,
                        <argument><expr><literal type="string" pos:line="20" pos:column="25">"InitializeCriticalSectionAndSpinCount"<pos:position pos:line="20" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="66"/></expr_stmt></block></then></if>

        <expr_stmt><expr><name pos:line="22" pos:column="9">dbg_mutex<pos:position pos:line="22" pos:column="18"/></name> <operator pos:line="22" pos:column="19">=<pos:position pos:line="22" pos:column="20"/></operator> <cast type="static" pos:line="22" pos:column="21">static_cast<argument_list type="generic" pos:line="22" pos:column="32">&lt;<argument><expr><name pos:line="22" pos:column="33">CRITICAL_SECTION<pos:position pos:line="22" pos:column="49"/></name><operator pos:line="22" pos:column="49">*<pos:position pos:line="22" pos:column="50"/></operator></expr></argument>&gt;<pos:position pos:line="22" pos:column="54"/></argument_list><argument_list pos:line="22" pos:column="51">(<argument><expr><call><name pos:line="22" pos:column="52">xcalloc<pos:position pos:line="22" pos:column="59"/></name><argument_list pos:line="22" pos:column="59">(<argument><expr><literal type="number" pos:line="22" pos:column="60">1<pos:position pos:line="22" pos:column="61"/></literal></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="63">sizeof<argument_list pos:line="22" pos:column="69">(<argument><expr><name pos:line="22" pos:column="70">CRITICAL_SECTION<pos:position pos:line="22" pos:column="86"/></name></expr></argument>)<pos:position pos:line="22" pos:column="87"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="88"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="89"/></argument_list></cast></expr>;<pos:position pos:line="22" pos:column="90"/></expr_stmt>

        <if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">InitializeCriticalSectionAndSpinCount<pos:position pos:line="24" pos:column="50"/></name></expr>)<pos:position pos:line="24" pos:column="51"/></condition><then pos:line="24" pos:column="51"> <block pos:line="24" pos:column="52">{
            <comment type="block" pos:line="25" pos:column="13">/* let multiprocessor systems EnterCriticalSection() fast */</comment>

            <if pos:line="27" pos:column="13">if <condition pos:line="27" pos:column="16">(<expr><operator pos:line="27" pos:column="17">!<pos:position pos:line="27" pos:column="18"/></operator><call><name pos:line="27" pos:column="18">InitializeCriticalSectionAndSpinCount<pos:position pos:line="27" pos:column="55"/></name><argument_list pos:line="27" pos:column="55">(<argument><expr><name pos:line="27" pos:column="56">dbg_mutex<pos:position pos:line="27" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="67">4000<pos:position pos:line="27" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="72"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="73"/></condition><then pos:line="27" pos:column="73"> <block pos:line="27" pos:column="74">{
                <if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><name pos:line="28" pos:column="21">debug_log<pos:position pos:line="28" pos:column="30"/></name></expr>)<pos:position pos:line="28" pos:column="31"/></condition><then pos:line="28" pos:column="31"> <block pos:line="28" pos:column="32">{
                    <expr_stmt><expr><call><name pos:line="29" pos:column="21">fprintf<pos:position pos:line="29" pos:column="28"/></name><argument_list pos:line="29" pos:column="28">(<argument><expr><name pos:line="29" pos:column="29">debug_log<pos:position pos:line="29" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="40">"FATAL: _db_print: can't initialize critical section\n"<pos:position pos:line="29" pos:column="95"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="96"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="97"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="30" pos:column="21">fflush<pos:position pos:line="30" pos:column="27"/></name><argument_list pos:line="30" pos:column="27">(<argument><expr><name pos:line="30" pos:column="28">debug_log<pos:position pos:line="30" pos:column="37"/></name></expr></argument>)<pos:position pos:line="30" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="39"/></expr_stmt>
                }<pos:position pos:line="31" pos:column="18"/></block></then></if>

                <expr_stmt><expr><call><name pos:line="33" pos:column="17">fprintf<pos:position pos:line="33" pos:column="24"/></name><argument_list pos:line="33" pos:column="24">(<argument><expr><name pos:line="33" pos:column="25">stderr<pos:position pos:line="33" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="33">"FATAL: _db_print: can't initialize critical section\n"<pos:position pos:line="33" pos:column="88"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="90"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="34" pos:column="17">abort<pos:position pos:line="34" pos:column="22"/></name><argument_list pos:line="34" pos:column="22">()<pos:position pos:line="34" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="25"/></expr_stmt>
            }<pos:position pos:line="35" pos:column="14"/></block></then> <else pos:line="35" pos:column="15">else
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="17">InitializeCriticalSection<pos:position pos:line="36" pos:column="42"/></name><argument_list pos:line="36" pos:column="42">(<argument><expr><name pos:line="36" pos:column="43">dbg_mutex<pos:position pos:line="36" pos:column="52"/></name></expr></argument>)<pos:position pos:line="36" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="54"/></expr_stmt></block></else></if>
        }<pos:position pos:line="37" pos:column="10"/></block></then></if>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="40" pos:column="5">EnterCriticalSection<pos:position pos:line="40" pos:column="25"/></name><argument_list pos:line="40" pos:column="25">(<argument><expr><name pos:line="40" pos:column="26">dbg_mutex<pos:position pos:line="40" pos:column="35"/></name></expr></argument>)<pos:position pos:line="40" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="37"/></expr_stmt>
<cpp:endif pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">endif<pos:position pos:line="41" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="43" pos:column="5">/* give a chance to context-based debugging to print current context */</comment>
    <if pos:line="44" pos:column="5">if <condition pos:line="44" pos:column="8">(<expr><operator pos:line="44" pos:column="9">!<pos:position pos:line="44" pos:column="10"/></operator><name pos:line="44" pos:column="10">Ctx_Lock<pos:position pos:line="44" pos:column="18"/></name></expr>)<pos:position pos:line="44" pos:column="19"/></condition><then pos:line="44" pos:column="19">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="9">ctx_print<pos:position pos:line="45" pos:column="18"/></name><argument_list pos:line="45" pos:column="18">()<pos:position pos:line="45" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="21"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="47" pos:column="5">va_start<pos:position pos:line="47" pos:column="13"/></name><argument_list pos:line="47" pos:column="13">(<argument><expr><name pos:line="47" pos:column="14">args1<pos:position pos:line="47" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="21">format<pos:position pos:line="47" pos:column="27"/></name></expr></argument>)<pos:position pos:line="47" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="48" pos:column="5">va_start<pos:position pos:line="48" pos:column="13"/></name><argument_list pos:line="48" pos:column="13">(<argument><expr><name pos:line="48" pos:column="14">args2<pos:position pos:line="48" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="21">format<pos:position pos:line="48" pos:column="27"/></name></expr></argument>)<pos:position pos:line="48" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="49" pos:column="5">va_start<pos:position pos:line="49" pos:column="13"/></name><argument_list pos:line="49" pos:column="13">(<argument><expr><name pos:line="49" pos:column="14">args3<pos:position pos:line="49" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="21">format<pos:position pos:line="49" pos:column="27"/></name></expr></argument>)<pos:position pos:line="49" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="29"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="51" pos:column="5">snprintf<pos:position pos:line="51" pos:column="13"/></name><argument_list pos:line="51" pos:column="13">(<argument><expr><name pos:line="51" pos:column="14">f<pos:position pos:line="51" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="17">BUFSIZ<pos:position pos:line="51" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="25">"%s| %s"<pos:position pos:line="51" pos:column="33"/></literal></expr></argument>,
             <argument><expr><call><name pos:line="52" pos:column="14">debugLogTime<pos:position pos:line="52" pos:column="26"/></name><argument_list pos:line="52" pos:column="26">()<pos:position pos:line="52" pos:column="28"/></argument_list></call></expr></argument>,
             <argument><expr><name pos:line="53" pos:column="14">format<pos:position pos:line="53" pos:column="20"/></name></expr></argument>)<pos:position pos:line="53" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="22"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="55" pos:column="5">_db_print_file<pos:position pos:line="55" pos:column="19"/></name><argument_list pos:line="55" pos:column="19">(<argument><expr><name pos:line="55" pos:column="20">f<pos:position pos:line="55" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="23">args1<pos:position pos:line="55" pos:column="28"/></name></expr></argument>)<pos:position pos:line="55" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="56" pos:column="5">_db_print_stderr<pos:position pos:line="56" pos:column="21"/></name><argument_list pos:line="56" pos:column="21">(<argument><expr><name pos:line="56" pos:column="22">f<pos:position pos:line="56" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="25">args2<pos:position pos:line="56" pos:column="30"/></name></expr></argument>)<pos:position pos:line="56" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="32"/></expr_stmt>

<cpp:if pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">if<pos:position pos:line="58" pos:column="4"/></cpp:directive> <expr><name pos:line="58" pos:column="5">HAVE_SYSLOG<pos:position pos:line="58" pos:column="16"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="59" pos:column="5">_db_print_syslog<pos:position pos:line="59" pos:column="21"/></name><argument_list pos:line="59" pos:column="21">(<argument><expr><name pos:line="59" pos:column="22">format<pos:position pos:line="59" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="30">args3<pos:position pos:line="59" pos:column="35"/></name></expr></argument>)<pos:position pos:line="59" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="37"/></expr_stmt>
<cpp:endif pos:line="60" pos:column="1">#<cpp:directive pos:line="60" pos:column="2">endif<pos:position pos:line="60" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="62" pos:column="1">#<cpp:directive pos:line="62" pos:column="2">ifdef<pos:position pos:line="62" pos:column="7"/></cpp:directive> <name pos:line="62" pos:column="8">_SQUID_MSWIN_<pos:position pos:line="62" pos:column="21"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="63" pos:column="5">LeaveCriticalSection<pos:position pos:line="63" pos:column="25"/></name><argument_list pos:line="63" pos:column="25">(<argument><expr><name pos:line="63" pos:column="26">dbg_mutex<pos:position pos:line="63" pos:column="35"/></name></expr></argument>)<pos:position pos:line="63" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="37"/></expr_stmt>
<cpp:endif pos:line="64" pos:column="1">#<cpp:directive pos:line="64" pos:column="2">endif<pos:position pos:line="64" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="66" pos:column="5">va_end<pos:position pos:line="66" pos:column="11"/></name><argument_list pos:line="66" pos:column="11">(<argument><expr><name pos:line="66" pos:column="12">args1<pos:position pos:line="66" pos:column="17"/></name></expr></argument>)<pos:position pos:line="66" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="67" pos:column="5">va_end<pos:position pos:line="67" pos:column="11"/></name><argument_list pos:line="67" pos:column="11">(<argument><expr><name pos:line="67" pos:column="12">args2<pos:position pos:line="67" pos:column="17"/></name></expr></argument>)<pos:position pos:line="67" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="68" pos:column="5">va_end<pos:position pos:line="68" pos:column="11"/></name><argument_list pos:line="68" pos:column="11">(<argument><expr><name pos:line="68" pos:column="12">args3<pos:position pos:line="68" pos:column="17"/></name></expr></argument>)<pos:position pos:line="68" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="19"/></expr_stmt>
}<pos:position pos:line="69" pos:column="2"/></block></function></unit>
