<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_function_1048.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HttpStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">continueAfterParsingHeader<pos:position pos:line="2" pos:column="42"/></name></name><parameter_list pos:line="2" pos:column="42">()<pos:position pos:line="2" pos:column="44"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name><name pos:line="4" pos:column="9">flags<pos:position pos:line="4" pos:column="14"/></name><operator pos:line="4" pos:column="14">.<pos:position pos:line="4" pos:column="15"/></operator><name pos:line="4" pos:column="15">handling1xx<pos:position pos:line="4" pos:column="26"/></name></name></expr>)<pos:position pos:line="4" pos:column="27"/></condition><then pos:line="4" pos:column="27"> <block pos:line="4" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="5" pos:column="9">debugs<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">(<argument><expr><literal type="number" pos:line="5" pos:column="16">11<pos:position pos:line="5" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="20">5<pos:position pos:line="5" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="5" pos:column="23">HERE<pos:position pos:line="5" pos:column="27"/></name> <operator pos:line="5" pos:column="28">&lt;&lt;<pos:position pos:line="5" pos:column="36"/></operator> <literal type="string" pos:line="5" pos:column="31">"wait for 1xx handling"<pos:position pos:line="5" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="56"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="6" pos:column="9">Must<pos:position pos:line="6" pos:column="13"/></name><argument_list pos:line="6" pos:column="13">(<argument><expr><operator pos:line="6" pos:column="14">!<pos:position pos:line="6" pos:column="15"/></operator><name><name pos:line="6" pos:column="15">flags<pos:position pos:line="6" pos:column="20"/></name><operator pos:line="6" pos:column="20">.<pos:position pos:line="6" pos:column="21"/></operator><name pos:line="6" pos:column="21">headers_parsed<pos:position pos:line="6" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="37"/></expr_stmt>
        <return pos:line="7" pos:column="9">return <expr><literal type="boolean" pos:line="7" pos:column="16">false<pos:position pos:line="7" pos:column="21"/></literal></expr>;<pos:position pos:line="7" pos:column="22"/></return>
    }<pos:position pos:line="8" pos:column="6"/></block></then></if>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><operator pos:line="10" pos:column="9">!<pos:position pos:line="10" pos:column="10"/></operator><name><name pos:line="10" pos:column="10">flags<pos:position pos:line="10" pos:column="15"/></name><operator pos:line="10" pos:column="15">.<pos:position pos:line="10" pos:column="16"/></operator><name pos:line="10" pos:column="16">headers_parsed<pos:position pos:line="10" pos:column="30"/></name></name> <operator pos:line="10" pos:column="31">&amp;&amp;<pos:position pos:line="10" pos:column="41"/></operator> <operator pos:line="10" pos:column="34">!<pos:position pos:line="10" pos:column="35"/></operator><name pos:line="10" pos:column="35">eof<pos:position pos:line="10" pos:column="38"/></name></expr>)<pos:position pos:line="10" pos:column="39"/></condition><then pos:line="10" pos:column="39"> <block pos:line="10" pos:column="40">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">debugs<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><literal type="number" pos:line="11" pos:column="16">11<pos:position pos:line="11" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="20">9<pos:position pos:line="11" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="23">HERE<pos:position pos:line="11" pos:column="27"/></name> <operator pos:line="11" pos:column="28">&lt;&lt;<pos:position pos:line="11" pos:column="36"/></operator> <literal type="string" pos:line="11" pos:column="31">"needs more at "<pos:position pos:line="11" pos:column="47"/></literal> <operator pos:line="11" pos:column="48">&lt;&lt;<pos:position pos:line="11" pos:column="56"/></operator> <call><name><name pos:line="11" pos:column="51">readBuf<pos:position pos:line="11" pos:column="58"/></name><operator pos:line="11" pos:column="58">-&gt;<pos:position pos:line="11" pos:column="63"/></operator><name pos:line="11" pos:column="60">contentSize<pos:position pos:line="11" pos:column="71"/></name></name><argument_list pos:line="11" pos:column="71">()<pos:position pos:line="11" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="75"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="12" pos:column="9">flags<pos:position pos:line="12" pos:column="14"/></name><operator pos:line="12" pos:column="14">.<pos:position pos:line="12" pos:column="15"/></operator><name pos:line="12" pos:column="15">do_next_read<pos:position pos:line="12" pos:column="27"/></name></name> <operator pos:line="12" pos:column="28">=<pos:position pos:line="12" pos:column="29"/></operator> <literal type="boolean" pos:line="12" pos:column="30">true<pos:position pos:line="12" pos:column="34"/></literal></expr>;<pos:position pos:line="12" pos:column="35"/></expr_stmt>
        <comment type="block" format="doxygen" pos:line="13" pos:column="9">/** \retval false If we have not finished parsing the headers and may get more data.
         *                Schedules more reads to retrieve the missing data.
         */</comment>
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">maybeReadVirginBody<pos:position pos:line="16" pos:column="28"/></name><argument_list pos:line="16" pos:column="28">()<pos:position pos:line="16" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="31"/></expr_stmt> <comment type="line" pos:line="16" pos:column="32">// schedules all kinds of reads; TODO: rename</comment>
        <return pos:line="17" pos:column="9">return <expr><literal type="boolean" pos:line="17" pos:column="16">false<pos:position pos:line="17" pos:column="21"/></literal></expr>;<pos:position pos:line="17" pos:column="22"/></return>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

    <comment type="block" format="doxygen" pos:line="20" pos:column="5">/** If we are done with parsing, check for errors */</comment>

    <decl_stmt><decl><type><name pos:line="22" pos:column="5">err_type<pos:position pos:line="22" pos:column="13"/></name></type> <name pos:line="22" pos:column="14">error<pos:position pos:line="22" pos:column="19"/></name> <init pos:line="22" pos:column="20">= <expr><name pos:line="22" pos:column="22">ERR_NONE<pos:position pos:line="22" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="22" pos:column="31"/></decl_stmt>

    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><name><name pos:line="24" pos:column="9">flags<pos:position pos:line="24" pos:column="14"/></name><operator pos:line="24" pos:column="14">.<pos:position pos:line="24" pos:column="15"/></operator><name pos:line="24" pos:column="15">headers_parsed<pos:position pos:line="24" pos:column="29"/></name></name></expr>)<pos:position pos:line="24" pos:column="30"/></condition><then pos:line="24" pos:column="30"> <block pos:line="24" pos:column="31">{ <comment type="line" pos:line="24" pos:column="33">// parsed headers, possibly with errors</comment>
        <comment type="line" pos:line="25" pos:column="9">// check for header parsing errors</comment>
        <if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<decl><type><name pos:line="26" pos:column="13">HttpReply<pos:position pos:line="26" pos:column="22"/></name> <modifier pos:line="26" pos:column="23">*<pos:position pos:line="26" pos:column="24"/></modifier></type><name pos:line="26" pos:column="24">vrep<pos:position pos:line="26" pos:column="28"/></name> <init pos:line="26" pos:column="29">= <expr><call><name pos:line="26" pos:column="31">virginReply<pos:position pos:line="26" pos:column="42"/></name><argument_list pos:line="26" pos:column="42">()<pos:position pos:line="26" pos:column="44"/></argument_list></call></expr></init></decl>)<pos:position pos:line="26" pos:column="45"/></condition><then pos:line="26" pos:column="45"> <block pos:line="26" pos:column="46">{
            <decl_stmt><decl><type><specifier pos:line="27" pos:column="13">const<pos:position pos:line="27" pos:column="18"/></specifier> <name><name pos:line="27" pos:column="19">Http<pos:position pos:line="27" pos:column="23"/></name><operator pos:line="27" pos:column="23">::<pos:position pos:line="27" pos:column="25"/></operator><name pos:line="27" pos:column="25">StatusCode<pos:position pos:line="27" pos:column="35"/></name></name></type> <name pos:line="27" pos:column="36">s<pos:position pos:line="27" pos:column="37"/></name> <init pos:line="27" pos:column="38">= <expr><call><name><name pos:line="27" pos:column="40">vrep<pos:position pos:line="27" pos:column="44"/></name><operator pos:line="27" pos:column="44">-&gt;<pos:position pos:line="27" pos:column="49"/></operator><name pos:line="27" pos:column="46">sline<pos:position pos:line="27" pos:column="51"/></name><operator pos:line="27" pos:column="51">.<pos:position pos:line="27" pos:column="52"/></operator><name pos:line="27" pos:column="52">status<pos:position pos:line="27" pos:column="58"/></name></name><argument_list pos:line="27" pos:column="58">()<pos:position pos:line="27" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="27" pos:column="61"/></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="28" pos:column="13">const<pos:position pos:line="28" pos:column="18"/></specifier> <name><name pos:line="28" pos:column="19">Http<pos:position pos:line="28" pos:column="23"/></name><operator pos:line="28" pos:column="23">::<pos:position pos:line="28" pos:column="25"/></operator><name pos:line="28" pos:column="25">ProtocolVersion<pos:position pos:line="28" pos:column="40"/></name></name> <modifier pos:line="28" pos:column="41">&amp;<pos:position pos:line="28" pos:column="46"/></modifier></type><name pos:line="28" pos:column="42">v<pos:position pos:line="28" pos:column="43"/></name> <init pos:line="28" pos:column="44">= <expr><name><name pos:line="28" pos:column="46">vrep<pos:position pos:line="28" pos:column="50"/></name><operator pos:line="28" pos:column="50">-&gt;<pos:position pos:line="28" pos:column="55"/></operator><name pos:line="28" pos:column="52">sline<pos:position pos:line="28" pos:column="57"/></name><operator pos:line="28" pos:column="57">.<pos:position pos:line="28" pos:column="58"/></operator><name pos:line="28" pos:column="58">version<pos:position pos:line="28" pos:column="65"/></name></name></expr></init></decl>;<pos:position pos:line="28" pos:column="66"/></decl_stmt>
            <if pos:line="29" pos:column="13">if <condition pos:line="29" pos:column="16">(<expr><name pos:line="29" pos:column="17">s<pos:position pos:line="29" pos:column="18"/></name> <operator pos:line="29" pos:column="19">==<pos:position pos:line="29" pos:column="21"/></operator> <name><name pos:line="29" pos:column="22">Http<pos:position pos:line="29" pos:column="26"/></name><operator pos:line="29" pos:column="26">::<pos:position pos:line="29" pos:column="28"/></operator><name pos:line="29" pos:column="28">scInvalidHeader<pos:position pos:line="29" pos:column="43"/></name></name> <operator pos:line="29" pos:column="44">&amp;&amp;<pos:position pos:line="29" pos:column="54"/></operator> <name pos:line="29" pos:column="47">v<pos:position pos:line="29" pos:column="48"/></name> <operator pos:line="29" pos:column="49">!=<pos:position pos:line="29" pos:column="51"/></operator> <call><name><name pos:line="29" pos:column="52">Http<pos:position pos:line="29" pos:column="56"/></name><operator pos:line="29" pos:column="56">::<pos:position pos:line="29" pos:column="58"/></operator><name pos:line="29" pos:column="58">ProtocolVersion<pos:position pos:line="29" pos:column="73"/></name></name><argument_list pos:line="29" pos:column="73">(<argument><expr><literal type="number" pos:line="29" pos:column="74">0<pos:position pos:line="29" pos:column="75"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="29" pos:column="76">9<pos:position pos:line="29" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="78"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="79"/></condition><then pos:line="29" pos:column="79"> <block pos:line="29" pos:column="80">{
                <expr_stmt><expr><call><name pos:line="30" pos:column="17">debugs<pos:position pos:line="30" pos:column="23"/></name><argument_list pos:line="30" pos:column="23">(<argument><expr><literal type="number" pos:line="30" pos:column="24">11<pos:position pos:line="30" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="28">DBG_IMPORTANT<pos:position pos:line="30" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="43">"WARNING: HTTP: Invalid Response: Bad header encountered from "<pos:position pos:line="30" pos:column="106"/></literal> <operator pos:line="30" pos:column="107">&lt;&lt;<pos:position pos:line="30" pos:column="115"/></operator> <call><name><name pos:line="30" pos:column="110">entry<pos:position pos:line="30" pos:column="115"/></name><operator pos:line="30" pos:column="115">-&gt;<pos:position pos:line="30" pos:column="120"/></operator><name pos:line="30" pos:column="117">url<pos:position pos:line="30" pos:column="120"/></name></name><argument_list pos:line="30" pos:column="120">()<pos:position pos:line="30" pos:column="122"/></argument_list></call> <operator pos:line="30" pos:column="123">&lt;&lt;<pos:position pos:line="30" pos:column="131"/></operator> <literal type="string" pos:line="30" pos:column="126">" AKA "<pos:position pos:line="30" pos:column="133"/></literal> <operator pos:line="30" pos:column="134">&lt;&lt;<pos:position pos:line="30" pos:column="142"/></operator> <call><name><name pos:line="30" pos:column="137">request<pos:position pos:line="30" pos:column="144"/></name><operator pos:line="30" pos:column="144">-&gt;<pos:position pos:line="30" pos:column="149"/></operator><name pos:line="30" pos:column="146">GetHost<pos:position pos:line="30" pos:column="153"/></name></name><argument_list pos:line="30" pos:column="153">()<pos:position pos:line="30" pos:column="155"/></argument_list></call> <operator pos:line="30" pos:column="156">&lt;&lt;<pos:position pos:line="30" pos:column="164"/></operator> <call><name><name pos:line="30" pos:column="159">request<pos:position pos:line="30" pos:column="166"/></name><operator pos:line="30" pos:column="166">-&gt;<pos:position pos:line="30" pos:column="171"/></operator><name pos:line="30" pos:column="168">urlpath<pos:position pos:line="30" pos:column="175"/></name><operator pos:line="30" pos:column="175">.<pos:position pos:line="30" pos:column="176"/></operator><name pos:line="30" pos:column="176">termedBuf<pos:position pos:line="30" pos:column="185"/></name></name><argument_list pos:line="30" pos:column="185">()<pos:position pos:line="30" pos:column="187"/></argument_list></call></expr></argument> )<pos:position pos:line="30" pos:column="189"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="190"/></expr_stmt>
                <expr_stmt><expr><name pos:line="31" pos:column="17">error<pos:position pos:line="31" pos:column="22"/></name> <operator pos:line="31" pos:column="23">=<pos:position pos:line="31" pos:column="24"/></operator> <name pos:line="31" pos:column="25">ERR_INVALID_RESP<pos:position pos:line="31" pos:column="41"/></name></expr>;<pos:position pos:line="31" pos:column="42"/></expr_stmt>
            }<pos:position pos:line="32" pos:column="14"/></block></then> <elseif pos:line="32" pos:column="15">else <if pos:line="32" pos:column="20">if <condition pos:line="32" pos:column="23">(<expr><name pos:line="32" pos:column="24">s<pos:position pos:line="32" pos:column="25"/></name> <operator pos:line="32" pos:column="26">==<pos:position pos:line="32" pos:column="28"/></operator> <name><name pos:line="32" pos:column="29">Http<pos:position pos:line="32" pos:column="33"/></name><operator pos:line="32" pos:column="33">::<pos:position pos:line="32" pos:column="35"/></operator><name pos:line="32" pos:column="35">scHeaderTooLarge<pos:position pos:line="32" pos:column="51"/></name></name></expr>)<pos:position pos:line="32" pos:column="52"/></condition><then pos:line="32" pos:column="52"> <block pos:line="32" pos:column="53">{
                <expr_stmt><expr><call><name><name pos:line="33" pos:column="17">fwd<pos:position pos:line="33" pos:column="20"/></name><operator pos:line="33" pos:column="20">-&gt;<pos:position pos:line="33" pos:column="25"/></operator><name pos:line="33" pos:column="22">dontRetry<pos:position pos:line="33" pos:column="31"/></name></name><argument_list pos:line="33" pos:column="31">(<argument><expr><literal type="boolean" pos:line="33" pos:column="32">true<pos:position pos:line="33" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="38"/></expr_stmt>
                <expr_stmt><expr><name pos:line="34" pos:column="17">error<pos:position pos:line="34" pos:column="22"/></name> <operator pos:line="34" pos:column="23">=<pos:position pos:line="34" pos:column="24"/></operator> <name pos:line="34" pos:column="25">ERR_TOO_BIG<pos:position pos:line="34" pos:column="36"/></name></expr>;<pos:position pos:line="34" pos:column="37"/></expr_stmt>
            }<pos:position pos:line="35" pos:column="14"/></block></then></if></elseif> <elseif pos:line="35" pos:column="15">else <if pos:line="35" pos:column="20">if <condition pos:line="35" pos:column="23">(<expr><call><name><name pos:line="35" pos:column="24">vrep<pos:position pos:line="35" pos:column="28"/></name><operator pos:line="35" pos:column="28">-&gt;<pos:position pos:line="35" pos:column="33"/></operator><name pos:line="35" pos:column="30">header<pos:position pos:line="35" pos:column="36"/></name><operator pos:line="35" pos:column="36">.<pos:position pos:line="35" pos:column="37"/></operator><name pos:line="35" pos:column="37">conflictingContentLength<pos:position pos:line="35" pos:column="61"/></name></name><argument_list pos:line="35" pos:column="61">()<pos:position pos:line="35" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="64"/></condition><then pos:line="35" pos:column="64"> <block pos:line="35" pos:column="65">{
                <expr_stmt><expr><call><name><name pos:line="36" pos:column="17">fwd<pos:position pos:line="36" pos:column="20"/></name><operator pos:line="36" pos:column="20">-&gt;<pos:position pos:line="36" pos:column="25"/></operator><name pos:line="36" pos:column="22">dontRetry<pos:position pos:line="36" pos:column="31"/></name></name><argument_list pos:line="36" pos:column="31">(<argument><expr><literal type="boolean" pos:line="36" pos:column="32">true<pos:position pos:line="36" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="38"/></expr_stmt>
                <expr_stmt><expr><name pos:line="37" pos:column="17">error<pos:position pos:line="37" pos:column="22"/></name> <operator pos:line="37" pos:column="23">=<pos:position pos:line="37" pos:column="24"/></operator> <name pos:line="37" pos:column="25">ERR_INVALID_RESP<pos:position pos:line="37" pos:column="41"/></name></expr>;<pos:position pos:line="37" pos:column="42"/></expr_stmt>
            }<pos:position pos:line="38" pos:column="14"/></block></then></if></elseif> <else pos:line="38" pos:column="15">else <block pos:line="38" pos:column="20">{
                <return pos:line="39" pos:column="17">return <expr><literal type="boolean" pos:line="39" pos:column="24">true<pos:position pos:line="39" pos:column="28"/></literal></expr>;<pos:position pos:line="39" pos:column="29"/></return> <comment type="line" pos:line="39" pos:column="30">// done parsing, got reply, and no error</comment>
            }<pos:position pos:line="40" pos:column="14"/></block></else></if>
        }<pos:position pos:line="41" pos:column="10"/></block></then> <else pos:line="41" pos:column="11">else <block pos:line="41" pos:column="16">{
            <comment type="line" pos:line="42" pos:column="13">// parsed headers but got no reply</comment>
            <expr_stmt><expr><call><name pos:line="43" pos:column="13">debugs<pos:position pos:line="43" pos:column="19"/></name><argument_list pos:line="43" pos:column="19">(<argument><expr><literal type="number" pos:line="43" pos:column="20">11<pos:position pos:line="43" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="24">DBG_IMPORTANT<pos:position pos:line="43" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="39">"WARNING: HTTP: Invalid Response: No reply at all for "<pos:position pos:line="43" pos:column="94"/></literal> <operator pos:line="43" pos:column="95">&lt;&lt;<pos:position pos:line="43" pos:column="103"/></operator> <call><name><name pos:line="43" pos:column="98">entry<pos:position pos:line="43" pos:column="103"/></name><operator pos:line="43" pos:column="103">-&gt;<pos:position pos:line="43" pos:column="108"/></operator><name pos:line="43" pos:column="105">url<pos:position pos:line="43" pos:column="108"/></name></name><argument_list pos:line="43" pos:column="108">()<pos:position pos:line="43" pos:column="110"/></argument_list></call> <operator pos:line="43" pos:column="111">&lt;&lt;<pos:position pos:line="43" pos:column="119"/></operator> <literal type="string" pos:line="43" pos:column="114">" AKA "<pos:position pos:line="43" pos:column="121"/></literal> <operator pos:line="43" pos:column="122">&lt;&lt;<pos:position pos:line="43" pos:column="130"/></operator> <call><name><name pos:line="43" pos:column="125">request<pos:position pos:line="43" pos:column="132"/></name><operator pos:line="43" pos:column="132">-&gt;<pos:position pos:line="43" pos:column="137"/></operator><name pos:line="43" pos:column="134">GetHost<pos:position pos:line="43" pos:column="141"/></name></name><argument_list pos:line="43" pos:column="141">()<pos:position pos:line="43" pos:column="143"/></argument_list></call> <operator pos:line="43" pos:column="144">&lt;&lt;<pos:position pos:line="43" pos:column="152"/></operator> <call><name><name pos:line="43" pos:column="147">request<pos:position pos:line="43" pos:column="154"/></name><operator pos:line="43" pos:column="154">-&gt;<pos:position pos:line="43" pos:column="159"/></operator><name pos:line="43" pos:column="156">urlpath<pos:position pos:line="43" pos:column="163"/></name><operator pos:line="43" pos:column="163">.<pos:position pos:line="43" pos:column="164"/></operator><name pos:line="43" pos:column="164">termedBuf<pos:position pos:line="43" pos:column="173"/></name></name><argument_list pos:line="43" pos:column="173">()<pos:position pos:line="43" pos:column="175"/></argument_list></call></expr></argument> )<pos:position pos:line="43" pos:column="177"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="178"/></expr_stmt>
            <expr_stmt><expr><name pos:line="44" pos:column="13">error<pos:position pos:line="44" pos:column="18"/></name> <operator pos:line="44" pos:column="19">=<pos:position pos:line="44" pos:column="20"/></operator> <name pos:line="44" pos:column="21">ERR_INVALID_RESP<pos:position pos:line="44" pos:column="37"/></name></expr>;<pos:position pos:line="44" pos:column="38"/></expr_stmt>
        }<pos:position pos:line="45" pos:column="10"/></block></else></if>
    }<pos:position pos:line="46" pos:column="6"/></block></then> <else pos:line="46" pos:column="7">else <block pos:line="46" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="47" pos:column="9">assert<pos:position pos:line="47" pos:column="15"/></name><argument_list pos:line="47" pos:column="15">(<argument><expr><name pos:line="47" pos:column="16">eof<pos:position pos:line="47" pos:column="19"/></name></expr></argument>)<pos:position pos:line="47" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="21"/></expr_stmt>
        <if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><call><name><name pos:line="48" pos:column="13">readBuf<pos:position pos:line="48" pos:column="20"/></name><operator pos:line="48" pos:column="20">-&gt;<pos:position pos:line="48" pos:column="25"/></operator><name pos:line="48" pos:column="22">hasContent<pos:position pos:line="48" pos:column="32"/></name></name><argument_list pos:line="48" pos:column="32">()<pos:position pos:line="48" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="35"/></condition><then pos:line="48" pos:column="35"> <block pos:line="48" pos:column="36">{
            <expr_stmt><expr><name pos:line="49" pos:column="13">error<pos:position pos:line="49" pos:column="18"/></name> <operator pos:line="49" pos:column="19">=<pos:position pos:line="49" pos:column="20"/></operator> <name pos:line="49" pos:column="21">ERR_INVALID_RESP<pos:position pos:line="49" pos:column="37"/></name></expr>;<pos:position pos:line="49" pos:column="38"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="50" pos:column="13">debugs<pos:position pos:line="50" pos:column="19"/></name><argument_list pos:line="50" pos:column="19">(<argument><expr><literal type="number" pos:line="50" pos:column="20">11<pos:position pos:line="50" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="50" pos:column="24">DBG_IMPORTANT<pos:position pos:line="50" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="39">"WARNING: HTTP: Invalid Response: Headers did not parse at all for "<pos:position pos:line="50" pos:column="107"/></literal> <operator pos:line="50" pos:column="108">&lt;&lt;<pos:position pos:line="50" pos:column="116"/></operator> <call><name><name pos:line="50" pos:column="111">entry<pos:position pos:line="50" pos:column="116"/></name><operator pos:line="50" pos:column="116">-&gt;<pos:position pos:line="50" pos:column="121"/></operator><name pos:line="50" pos:column="118">url<pos:position pos:line="50" pos:column="121"/></name></name><argument_list pos:line="50" pos:column="121">()<pos:position pos:line="50" pos:column="123"/></argument_list></call> <operator pos:line="50" pos:column="124">&lt;&lt;<pos:position pos:line="50" pos:column="132"/></operator> <literal type="string" pos:line="50" pos:column="127">" AKA "<pos:position pos:line="50" pos:column="134"/></literal> <operator pos:line="50" pos:column="135">&lt;&lt;<pos:position pos:line="50" pos:column="143"/></operator> <call><name><name pos:line="50" pos:column="138">request<pos:position pos:line="50" pos:column="145"/></name><operator pos:line="50" pos:column="145">-&gt;<pos:position pos:line="50" pos:column="150"/></operator><name pos:line="50" pos:column="147">GetHost<pos:position pos:line="50" pos:column="154"/></name></name><argument_list pos:line="50" pos:column="154">()<pos:position pos:line="50" pos:column="156"/></argument_list></call> <operator pos:line="50" pos:column="157">&lt;&lt;<pos:position pos:line="50" pos:column="165"/></operator> <call><name><name pos:line="50" pos:column="160">request<pos:position pos:line="50" pos:column="167"/></name><operator pos:line="50" pos:column="167">-&gt;<pos:position pos:line="50" pos:column="172"/></operator><name pos:line="50" pos:column="169">urlpath<pos:position pos:line="50" pos:column="176"/></name><operator pos:line="50" pos:column="176">.<pos:position pos:line="50" pos:column="177"/></operator><name pos:line="50" pos:column="177">termedBuf<pos:position pos:line="50" pos:column="186"/></name></name><argument_list pos:line="50" pos:column="186">()<pos:position pos:line="50" pos:column="188"/></argument_list></call></expr></argument> )<pos:position pos:line="50" pos:column="190"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="191"/></expr_stmt>
        }<pos:position pos:line="51" pos:column="10"/></block></then> <else pos:line="51" pos:column="11">else <block pos:line="51" pos:column="16">{
            <expr_stmt><expr><name pos:line="52" pos:column="13">error<pos:position pos:line="52" pos:column="18"/></name> <operator pos:line="52" pos:column="19">=<pos:position pos:line="52" pos:column="20"/></operator> <name pos:line="52" pos:column="21">ERR_ZERO_SIZE_OBJECT<pos:position pos:line="52" pos:column="41"/></name></expr>;<pos:position pos:line="52" pos:column="42"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="53" pos:column="13">debugs<pos:position pos:line="53" pos:column="19"/></name><argument_list pos:line="53" pos:column="19">(<argument><expr><literal type="number" pos:line="53" pos:column="20">11<pos:position pos:line="53" pos:column="22"/></literal></expr></argument>, <argument><expr><operator pos:line="53" pos:column="24">(<pos:position pos:line="53" pos:column="25"/></operator><ternary><condition><expr><name><name pos:line="53" pos:column="25">request<pos:position pos:line="53" pos:column="32"/></name><operator pos:line="53" pos:column="32">-&gt;<pos:position pos:line="53" pos:column="37"/></operator><name pos:line="53" pos:column="34">flags<pos:position pos:line="53" pos:column="39"/></name><operator pos:line="53" pos:column="39">.<pos:position pos:line="53" pos:column="40"/></operator><name pos:line="53" pos:column="40">accelerated<pos:position pos:line="53" pos:column="51"/></name></name></expr>?<pos:position pos:line="53" pos:column="52"/></condition><then><expr><name pos:line="53" pos:column="52">DBG_IMPORTANT<pos:position pos:line="53" pos:column="65"/></name></expr></then><else pos:line="53" pos:column="65">:<expr><literal type="number" pos:line="53" pos:column="66">2<pos:position pos:line="53" pos:column="67"/></literal></expr></else></ternary><operator pos:line="53" pos:column="67">)<pos:position pos:line="53" pos:column="68"/></operator></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="70">"WARNING: HTTP: Invalid Response: No object data received for "<pos:position pos:line="53" pos:column="133"/></literal> <operator pos:line="53" pos:column="134">&lt;&lt;<pos:position pos:line="53" pos:column="142"/></operator>
                   <call><name><name pos:line="54" pos:column="20">entry<pos:position pos:line="54" pos:column="25"/></name><operator pos:line="54" pos:column="25">-&gt;<pos:position pos:line="54" pos:column="30"/></operator><name pos:line="54" pos:column="27">url<pos:position pos:line="54" pos:column="30"/></name></name><argument_list pos:line="54" pos:column="30">()<pos:position pos:line="54" pos:column="32"/></argument_list></call> <operator pos:line="54" pos:column="33">&lt;&lt;<pos:position pos:line="54" pos:column="41"/></operator> <literal type="string" pos:line="54" pos:column="36">" AKA "<pos:position pos:line="54" pos:column="43"/></literal> <operator pos:line="54" pos:column="44">&lt;&lt;<pos:position pos:line="54" pos:column="52"/></operator> <call><name><name pos:line="54" pos:column="47">request<pos:position pos:line="54" pos:column="54"/></name><operator pos:line="54" pos:column="54">-&gt;<pos:position pos:line="54" pos:column="59"/></operator><name pos:line="54" pos:column="56">GetHost<pos:position pos:line="54" pos:column="63"/></name></name><argument_list pos:line="54" pos:column="63">()<pos:position pos:line="54" pos:column="65"/></argument_list></call> <operator pos:line="54" pos:column="66">&lt;&lt;<pos:position pos:line="54" pos:column="74"/></operator> <call><name><name pos:line="54" pos:column="69">request<pos:position pos:line="54" pos:column="76"/></name><operator pos:line="54" pos:column="76">-&gt;<pos:position pos:line="54" pos:column="81"/></operator><name pos:line="54" pos:column="78">urlpath<pos:position pos:line="54" pos:column="85"/></name><operator pos:line="54" pos:column="85">.<pos:position pos:line="54" pos:column="86"/></operator><name pos:line="54" pos:column="86">termedBuf<pos:position pos:line="54" pos:column="95"/></name></name><argument_list pos:line="54" pos:column="95">()<pos:position pos:line="54" pos:column="97"/></argument_list></call></expr></argument> )<pos:position pos:line="54" pos:column="99"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="100"/></expr_stmt>
        }<pos:position pos:line="55" pos:column="10"/></block></else></if>
    }<pos:position pos:line="56" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="58" pos:column="5">assert<pos:position pos:line="58" pos:column="11"/></name><argument_list pos:line="58" pos:column="11">(<argument><expr><name pos:line="58" pos:column="12">error<pos:position pos:line="58" pos:column="17"/></name> <operator pos:line="58" pos:column="18">!=<pos:position pos:line="58" pos:column="20"/></operator> <name pos:line="58" pos:column="21">ERR_NONE<pos:position pos:line="58" pos:column="29"/></name></expr></argument>)<pos:position pos:line="58" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="59" pos:column="5">entry<pos:position pos:line="59" pos:column="10"/></name><operator pos:line="59" pos:column="10">-&gt;<pos:position pos:line="59" pos:column="15"/></operator><name pos:line="59" pos:column="12">reset<pos:position pos:line="59" pos:column="17"/></name></name><argument_list pos:line="59" pos:column="17">()<pos:position pos:line="59" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="60" pos:column="5">fwd<pos:position pos:line="60" pos:column="8"/></name><operator pos:line="60" pos:column="8">-&gt;<pos:position pos:line="60" pos:column="13"/></operator><name pos:line="60" pos:column="10">fail<pos:position pos:line="60" pos:column="14"/></name></name><argument_list pos:line="60" pos:column="14">(<argument><expr><operator pos:line="60" pos:column="15">new<pos:position pos:line="60" pos:column="18"/></operator> <call><name pos:line="60" pos:column="19">ErrorState<pos:position pos:line="60" pos:column="29"/></name><argument_list pos:line="60" pos:column="29">(<argument><expr><name pos:line="60" pos:column="30">error<pos:position pos:line="60" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="60" pos:column="37">Http<pos:position pos:line="60" pos:column="41"/></name><operator pos:line="60" pos:column="41">::<pos:position pos:line="60" pos:column="43"/></operator><name pos:line="60" pos:column="43">scBadGateway<pos:position pos:line="60" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="60" pos:column="57">fwd<pos:position pos:line="60" pos:column="60"/></name><operator pos:line="60" pos:column="60">-&gt;<pos:position pos:line="60" pos:column="65"/></operator><name pos:line="60" pos:column="62">request<pos:position pos:line="60" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="60" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="60" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="72"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="61" pos:column="5">flags<pos:position pos:line="61" pos:column="10"/></name><operator pos:line="61" pos:column="10">.<pos:position pos:line="61" pos:column="11"/></operator><name pos:line="61" pos:column="11">do_next_read<pos:position pos:line="61" pos:column="23"/></name></name> <operator pos:line="61" pos:column="24">=<pos:position pos:line="61" pos:column="25"/></operator> <literal type="boolean" pos:line="61" pos:column="26">false<pos:position pos:line="61" pos:column="31"/></literal></expr>;<pos:position pos:line="61" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="62" pos:column="5">closeServer<pos:position pos:line="62" pos:column="16"/></name><argument_list pos:line="62" pos:column="16">()<pos:position pos:line="62" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="63" pos:column="5">mustStop<pos:position pos:line="63" pos:column="13"/></name><argument_list pos:line="63" pos:column="13">(<argument><expr><literal type="string" pos:line="63" pos:column="14">"HttpStateData::continueAfterParsingHeader"<pos:position pos:line="63" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="59"/></expr_stmt>
    <return pos:line="64" pos:column="5">return <expr><literal type="boolean" pos:line="64" pos:column="12">false<pos:position pos:line="64" pos:column="17"/></literal></expr>;<pos:position pos:line="64" pos:column="18"/></return> <comment type="line" pos:line="64" pos:column="19">// quit on error</comment>
}<pos:position pos:line="65" pos:column="2"/></block></function></unit>
