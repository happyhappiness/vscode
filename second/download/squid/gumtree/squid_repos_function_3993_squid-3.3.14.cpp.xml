<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3993_squid-3.3.14.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">libecap<pos:position pos:line="1" pos:column="8"/></name><operator pos:line="1" pos:column="8">::<pos:position pos:line="1" pos:column="10"/></operator><name pos:line="1" pos:column="10">Area<pos:position pos:line="1" pos:column="14"/></name></name></type>
<name><name pos:line="2" pos:column="1">Adaptation<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">Ecap<pos:position pos:line="2" pos:column="17"/></name><operator pos:line="2" pos:column="17">::<pos:position pos:line="2" pos:column="19"/></operator><name pos:line="2" pos:column="19">XactionRep<pos:position pos:line="2" pos:column="29"/></name><operator pos:line="2" pos:column="29">::<pos:position pos:line="2" pos:column="31"/></operator><name pos:line="2" pos:column="31">vbContent<pos:position pos:line="2" pos:column="40"/></name></name><parameter_list pos:line="2" pos:column="40">(<parameter><decl><type><name><name pos:line="2" pos:column="41">libecap<pos:position pos:line="2" pos:column="48"/></name><operator pos:line="2" pos:column="48">::<pos:position pos:line="2" pos:column="50"/></operator><name pos:line="2" pos:column="50">size_type<pos:position pos:line="2" pos:column="59"/></name></name></type> <name pos:line="2" pos:column="60">o<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="63">libecap<pos:position pos:line="2" pos:column="70"/></name><operator pos:line="2" pos:column="70">::<pos:position pos:line="2" pos:column="72"/></operator><name pos:line="2" pos:column="72">size_type<pos:position pos:line="2" pos:column="81"/></name></name></type> <name pos:line="2" pos:column="82">s<pos:position pos:line="2" pos:column="83"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="84"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// We may not be makingVb yet. It should be OK, but see vbContentShift().</comment>

    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">BodyPipePointer<pos:position pos:line="6" pos:column="26"/></name> <modifier pos:line="6" pos:column="27">&amp;<pos:position pos:line="6" pos:column="32"/></modifier></type><name pos:line="6" pos:column="28">p<pos:position pos:line="6" pos:column="29"/></name> <init pos:line="6" pos:column="30">= <expr><call><name><name pos:line="6" pos:column="32">theVirginRep<pos:position pos:line="6" pos:column="44"/></name><operator pos:line="6" pos:column="44">.<pos:position pos:line="6" pos:column="45"/></operator><name pos:line="6" pos:column="45">raw<pos:position pos:line="6" pos:column="48"/></name></name><argument_list pos:line="6" pos:column="48">()<pos:position pos:line="6" pos:column="50"/></argument_list></call><operator pos:line="6" pos:column="50">.<pos:position pos:line="6" pos:column="51"/></operator><name pos:line="6" pos:column="51">body_pipe<pos:position pos:line="6" pos:column="60"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="61"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">Must<pos:position pos:line="7" pos:column="9"/></name><argument_list pos:line="7" pos:column="9">(<argument><expr><name pos:line="7" pos:column="10">p<pos:position pos:line="7" pos:column="11"/></name> <operator pos:line="7" pos:column="12">!=<pos:position pos:line="7" pos:column="14"/></operator> <name pos:line="7" pos:column="15">NULL<pos:position pos:line="7" pos:column="19"/></name></expr></argument>)<pos:position pos:line="7" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="21"/></expr_stmt>

    <comment type="line" pos:line="9" pos:column="5">// TODO: make MemBuf use size_t?</comment>
    <decl_stmt><decl><type><specifier pos:line="10" pos:column="5">const<pos:position pos:line="10" pos:column="10"/></specifier> <name pos:line="10" pos:column="11">size_t<pos:position pos:line="10" pos:column="17"/></name></type> <name pos:line="10" pos:column="18">haveSize<pos:position pos:line="10" pos:column="26"/></name> <init pos:line="10" pos:column="27">= <expr><cast type="static" pos:line="10" pos:column="29">static_cast<argument_list type="generic" pos:line="10" pos:column="40">&lt;<argument><expr><name pos:line="10" pos:column="41">size_t<pos:position pos:line="10" pos:column="47"/></name></expr></argument>&gt;<pos:position pos:line="10" pos:column="51"/></argument_list><argument_list pos:line="10" pos:column="48">(<argument><expr><call><name><name pos:line="10" pos:column="49">p<pos:position pos:line="10" pos:column="50"/></name><operator pos:line="10" pos:column="50">-&gt;<pos:position pos:line="10" pos:column="55"/></operator><name pos:line="10" pos:column="52">buf<pos:position pos:line="10" pos:column="55"/></name></name><argument_list pos:line="10" pos:column="55">()<pos:position pos:line="10" pos:column="57"/></argument_list></call><operator pos:line="10" pos:column="57">.<pos:position pos:line="10" pos:column="58"/></operator><call><name pos:line="10" pos:column="58">contentSize<pos:position pos:line="10" pos:column="69"/></name><argument_list pos:line="10" pos:column="69">()<pos:position pos:line="10" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="72"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="10" pos:column="73"/></decl_stmt>

    <comment type="line" pos:line="12" pos:column="5">// convert to Squid types; XXX: check for overflow</comment>
    <decl_stmt><decl><type><specifier pos:line="13" pos:column="5">const<pos:position pos:line="13" pos:column="10"/></specifier> <name pos:line="13" pos:column="11">uint64_t<pos:position pos:line="13" pos:column="19"/></name></type> <name pos:line="13" pos:column="20">offset<pos:position pos:line="13" pos:column="26"/></name> <init pos:line="13" pos:column="27">= <expr><cast type="static" pos:line="13" pos:column="29">static_cast<argument_list type="generic" pos:line="13" pos:column="40">&lt;<argument><expr><name pos:line="13" pos:column="41">uint64_t<pos:position pos:line="13" pos:column="49"/></name></expr></argument>&gt;<pos:position pos:line="13" pos:column="53"/></argument_list><argument_list pos:line="13" pos:column="50">(<argument><expr><name pos:line="13" pos:column="51">o<pos:position pos:line="13" pos:column="52"/></name></expr></argument>)<pos:position pos:line="13" pos:column="53"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="13" pos:column="54"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">Must<pos:position pos:line="14" pos:column="9"/></name><argument_list pos:line="14" pos:column="9">(<argument><expr><name pos:line="14" pos:column="10">offset<pos:position pos:line="14" pos:column="16"/></name> <operator pos:line="14" pos:column="17">&lt;=<pos:position pos:line="14" pos:column="22"/></operator> <name pos:line="14" pos:column="20">haveSize<pos:position pos:line="14" pos:column="28"/></name></expr></argument>)<pos:position pos:line="14" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="30"/></expr_stmt> <comment type="line" pos:line="14" pos:column="31">// equal iff at the end of content</comment>

    <comment type="line" pos:line="16" pos:column="5">// nsize means no size limit: all content starting from offset</comment>
    <decl_stmt><decl><type><specifier pos:line="17" pos:column="5">const<pos:position pos:line="17" pos:column="10"/></specifier> <name pos:line="17" pos:column="11">size_t<pos:position pos:line="17" pos:column="17"/></name></type> <name pos:line="17" pos:column="18">size<pos:position pos:line="17" pos:column="22"/></name> <init pos:line="17" pos:column="23">= <expr><ternary><condition><expr><name pos:line="17" pos:column="25">s<pos:position pos:line="17" pos:column="26"/></name> <operator pos:line="17" pos:column="27">==<pos:position pos:line="17" pos:column="29"/></operator> <name><name pos:line="17" pos:column="30">libecap<pos:position pos:line="17" pos:column="37"/></name><operator pos:line="17" pos:column="37">::<pos:position pos:line="17" pos:column="39"/></operator><name pos:line="17" pos:column="39">nsize<pos:position pos:line="17" pos:column="44"/></name></name></expr> ?<pos:position pos:line="17" pos:column="46"/></condition><then pos:line="17" pos:column="46">
                        <expr><name pos:line="18" pos:column="25">haveSize<pos:position pos:line="18" pos:column="33"/></name> <operator pos:line="18" pos:column="34">-<pos:position pos:line="18" pos:column="35"/></operator> <name pos:line="18" pos:column="36">offset<pos:position pos:line="18" pos:column="42"/></name></expr> <pos:position pos:line="18" pos:column="43"/></then><else pos:line="18" pos:column="43">: <expr><cast type="static" pos:line="18" pos:column="45">static_cast<argument_list type="generic" pos:line="18" pos:column="56">&lt;<argument><expr><name pos:line="18" pos:column="57">size_t<pos:position pos:line="18" pos:column="63"/></name></expr></argument>&gt;<pos:position pos:line="18" pos:column="67"/></argument_list><argument_list pos:line="18" pos:column="64">(<argument><expr><name pos:line="18" pos:column="65">s<pos:position pos:line="18" pos:column="66"/></name></expr></argument>)<pos:position pos:line="18" pos:column="67"/></argument_list></cast></expr></else></ternary></expr></init></decl>;<pos:position pos:line="18" pos:column="68"/></decl_stmt>

    <comment type="line" pos:line="20" pos:column="5">// XXX: optimize by making theBody a shared_ptr (see Area::FromTemp*() src)</comment>
    <return pos:line="21" pos:column="5">return <expr><call><name><name pos:line="21" pos:column="12">libecap<pos:position pos:line="21" pos:column="19"/></name><operator pos:line="21" pos:column="19">::<pos:position pos:line="21" pos:column="21"/></operator><name pos:line="21" pos:column="21">Area<pos:position pos:line="21" pos:column="25"/></name><operator pos:line="21" pos:column="25">::<pos:position pos:line="21" pos:column="27"/></operator><name pos:line="21" pos:column="27">FromTempBuffer<pos:position pos:line="21" pos:column="41"/></name></name><argument_list pos:line="21" pos:column="41">(<argument><expr><call><name><name pos:line="21" pos:column="42">p<pos:position pos:line="21" pos:column="43"/></name><operator pos:line="21" pos:column="43">-&gt;<pos:position pos:line="21" pos:column="48"/></operator><name pos:line="21" pos:column="45">buf<pos:position pos:line="21" pos:column="48"/></name></name><argument_list pos:line="21" pos:column="48">()<pos:position pos:line="21" pos:column="50"/></argument_list></call><operator pos:line="21" pos:column="50">.<pos:position pos:line="21" pos:column="51"/></operator><call><name pos:line="21" pos:column="51">content<pos:position pos:line="21" pos:column="58"/></name><argument_list pos:line="21" pos:column="58">()<pos:position pos:line="21" pos:column="60"/></argument_list></call> <operator pos:line="21" pos:column="61">+<pos:position pos:line="21" pos:column="62"/></operator> <name pos:line="21" pos:column="63">offset<pos:position pos:line="21" pos:column="69"/></name></expr></argument>,
                                         <argument><expr><call><name pos:line="22" pos:column="42">min<pos:position pos:line="22" pos:column="45"/></name><argument_list pos:line="22" pos:column="45">(<argument><expr><cast type="static" pos:line="22" pos:column="46">static_cast<argument_list type="generic" pos:line="22" pos:column="57">&lt;<argument><expr><name pos:line="22" pos:column="58">size_t<pos:position pos:line="22" pos:column="64"/></name></expr></argument>&gt;<pos:position pos:line="22" pos:column="68"/></argument_list><argument_list pos:line="22" pos:column="65">(<argument><expr><name pos:line="22" pos:column="66">haveSize<pos:position pos:line="22" pos:column="74"/></name> <operator pos:line="22" pos:column="75">-<pos:position pos:line="22" pos:column="76"/></operator> <name pos:line="22" pos:column="77">offset<pos:position pos:line="22" pos:column="83"/></name></expr></argument>)<pos:position pos:line="22" pos:column="84"/></argument_list></cast></expr></argument>, <argument><expr><name pos:line="22" pos:column="86">size<pos:position pos:line="22" pos:column="90"/></name></expr></argument>)<pos:position pos:line="22" pos:column="91"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="93"/></return>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
