<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4286_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ACLIntRange<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">match<pos:position pos:line="2" pos:column="19"/></name></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name pos:line="2" pos:column="20">int<pos:position pos:line="2" pos:column="23"/></name></type> <name pos:line="2" pos:column="24">i<pos:position pos:line="2" pos:column="25"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="26"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">RangeType<pos:position pos:line="4" pos:column="14"/></name> <specifier pos:line="4" pos:column="15">const<pos:position pos:line="4" pos:column="20"/></specifier></type> <name pos:line="4" pos:column="21">toFind<pos:position pos:line="4" pos:column="27"/></name><argument_list pos:line="4" pos:column="27">(<argument><expr><name pos:line="4" pos:column="28">i<pos:position pos:line="4" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="31">i<pos:position pos:line="4" pos:column="32"/></name><operator pos:line="4" pos:column="32">+<pos:position pos:line="4" pos:column="33"/></operator><literal type="number" pos:line="4" pos:column="33">1<pos:position pos:line="4" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="35"/></argument_list></decl>;<pos:position pos:line="4" pos:column="36"/></decl_stmt>
    <for pos:line="5" pos:column="5">for <control pos:line="5" pos:column="9">(<init><decl><type><name><name pos:line="5" pos:column="10">std<pos:position pos:line="5" pos:column="13"/></name><operator pos:line="5" pos:column="13">::<pos:position pos:line="5" pos:column="15"/></operator><name><name pos:line="5" pos:column="15">list<pos:position pos:line="5" pos:column="19"/></name><argument_list type="generic" pos:line="5" pos:column="19">&lt;<argument><expr><name pos:line="5" pos:column="20">RangeType<pos:position pos:line="5" pos:column="29"/></name></expr></argument>&gt;<pos:position pos:line="5" pos:column="33"/></argument_list></name><operator pos:line="5" pos:column="30">::<pos:position pos:line="5" pos:column="32"/></operator><name pos:line="5" pos:column="32">const_iterator<pos:position pos:line="5" pos:column="46"/></name></name></type> <name pos:line="5" pos:column="47">iter<pos:position pos:line="5" pos:column="51"/></name> <init pos:line="5" pos:column="52">= <expr><call><name><name pos:line="5" pos:column="54">ranges<pos:position pos:line="5" pos:column="60"/></name><operator pos:line="5" pos:column="60">.<pos:position pos:line="5" pos:column="61"/></operator><name pos:line="5" pos:column="61">begin<pos:position pos:line="5" pos:column="66"/></name></name><argument_list pos:line="5" pos:column="66">()<pos:position pos:line="5" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="69"/></init> <condition><expr><name pos:line="5" pos:column="70">iter<pos:position pos:line="5" pos:column="74"/></name> <operator pos:line="5" pos:column="75">!=<pos:position pos:line="5" pos:column="77"/></operator> <call><name><name pos:line="5" pos:column="78">ranges<pos:position pos:line="5" pos:column="84"/></name><operator pos:line="5" pos:column="84">.<pos:position pos:line="5" pos:column="85"/></operator><name pos:line="5" pos:column="85">end<pos:position pos:line="5" pos:column="88"/></name></name><argument_list pos:line="5" pos:column="88">()<pos:position pos:line="5" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="91"/></condition> <incr><expr><operator pos:line="5" pos:column="92">++<pos:position pos:line="5" pos:column="94"/></operator><name pos:line="5" pos:column="94">iter<pos:position pos:line="5" pos:column="98"/></name></expr></incr>)<pos:position pos:line="5" pos:column="99"/></control> <block pos:line="5" pos:column="100">{
        <decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">RangeType<pos:position pos:line="6" pos:column="24"/></name> <modifier pos:line="6" pos:column="25">&amp;<pos:position pos:line="6" pos:column="30"/></modifier></type> <name pos:line="6" pos:column="27">element<pos:position pos:line="6" pos:column="34"/></name> <init pos:line="6" pos:column="35">= <expr><operator pos:line="6" pos:column="37">*<pos:position pos:line="6" pos:column="38"/></operator><name pos:line="6" pos:column="38">iter<pos:position pos:line="6" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="43"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="7" pos:column="9">RangeType<pos:position pos:line="7" pos:column="18"/></name></type> <name pos:line="7" pos:column="19">result<pos:position pos:line="7" pos:column="25"/></name> <init pos:line="7" pos:column="26">= <expr><call><name><name pos:line="7" pos:column="28">element<pos:position pos:line="7" pos:column="35"/></name><operator pos:line="7" pos:column="35">.<pos:position pos:line="7" pos:column="36"/></operator><name pos:line="7" pos:column="36">intersection<pos:position pos:line="7" pos:column="48"/></name></name><argument_list pos:line="7" pos:column="48">(<argument><expr><name pos:line="7" pos:column="49">toFind<pos:position pos:line="7" pos:column="55"/></name></expr></argument>)<pos:position pos:line="7" pos:column="56"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="57"/></decl_stmt>

        <if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><call><name><name pos:line="9" pos:column="13">result<pos:position pos:line="9" pos:column="19"/></name><operator pos:line="9" pos:column="19">.<pos:position pos:line="9" pos:column="20"/></operator><name pos:line="9" pos:column="20">size<pos:position pos:line="9" pos:column="24"/></name></name><argument_list pos:line="9" pos:column="24">()<pos:position pos:line="9" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="27"/></condition><then pos:line="9" pos:column="27">
            <block type="pseudo"><return pos:line="10" pos:column="13">return <expr><literal type="boolean" pos:line="10" pos:column="20">true<pos:position pos:line="10" pos:column="24"/></literal></expr>;<pos:position pos:line="10" pos:column="25"/></return></block></then></if>
    }<pos:position pos:line="11" pos:column="6"/></block></for>

    <return pos:line="13" pos:column="5">return <expr><literal type="boolean" pos:line="13" pos:column="12">false<pos:position pos:line="13" pos:column="17"/></literal></expr>;<pos:position pos:line="13" pos:column="18"/></return>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
