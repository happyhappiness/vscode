<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2818_squid-3.3.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name></type>

<name pos:line="3" pos:column="1">wccp2_check_security<pos:position pos:line="3" pos:column="21"/></name><parameter_list pos:line="3" pos:column="21">(<parameter><decl><type><name><name pos:line="3" pos:column="22">struct<pos:position pos:line="3" pos:column="28"/></name> <name pos:line="3" pos:column="29">wccp2_service_list_t<pos:position pos:line="3" pos:column="49"/></name></name> <modifier pos:line="3" pos:column="50">*<pos:position pos:line="3" pos:column="51"/></modifier></type><name pos:line="3" pos:column="51">srv<pos:position pos:line="3" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="56">char<pos:position pos:line="3" pos:column="60"/></name> <modifier pos:line="3" pos:column="61">*<pos:position pos:line="3" pos:column="62"/></modifier></type><name pos:line="3" pos:column="62">security<pos:position pos:line="3" pos:column="70"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="72">char<pos:position pos:line="3" pos:column="76"/></name> <modifier pos:line="3" pos:column="77">*<pos:position pos:line="3" pos:column="78"/></modifier></type><name pos:line="3" pos:column="78">packet<pos:position pos:line="3" pos:column="84"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="86">int<pos:position pos:line="3" pos:column="89"/></name></type> <name pos:line="3" pos:column="90">len<pos:position pos:line="3" pos:column="93"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="94"/></parameter_list>
<block pos:line="4" pos:column="1">{

    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">struct<pos:position pos:line="6" pos:column="11"/></name> <name pos:line="6" pos:column="12">wccp2_security_md5_t<pos:position pos:line="6" pos:column="32"/></name></name> <modifier pos:line="6" pos:column="33">*<pos:position pos:line="6" pos:column="34"/></modifier></type><name pos:line="6" pos:column="34">ws<pos:position pos:line="6" pos:column="36"/></name> <init pos:line="6" pos:column="37">= <expr><operator pos:line="6" pos:column="39">(<pos:position pos:line="6" pos:column="40"/></operator>struct <name pos:line="6" pos:column="47">wccp2_security_md5_t<pos:position pos:line="6" pos:column="67"/></name> <operator pos:line="6" pos:column="68">*<pos:position pos:line="6" pos:column="69"/></operator><operator pos:line="6" pos:column="69">)<pos:position pos:line="6" pos:column="70"/></operator> <name pos:line="6" pos:column="71">security<pos:position pos:line="6" pos:column="79"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="80"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">uint8_t<pos:position pos:line="7" pos:column="12"/></name></type> <name><name pos:line="7" pos:column="13">md5_digest<pos:position pos:line="7" pos:column="23"/></name><index pos:line="7" pos:column="23">[<expr><literal type="number" pos:line="7" pos:column="24">16<pos:position pos:line="7" pos:column="26"/></literal></expr>]<pos:position pos:line="7" pos:column="27"/></index></name></decl>, <decl><type ref="prev"/><name><name pos:line="7" pos:column="29">md5_challenge<pos:position pos:line="7" pos:column="42"/></name><index pos:line="7" pos:column="42">[<expr><literal type="number" pos:line="7" pos:column="43">16<pos:position pos:line="7" pos:column="45"/></literal></expr>]<pos:position pos:line="7" pos:column="46"/></index></name></decl>;<pos:position pos:line="7" pos:column="47"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">char<pos:position pos:line="8" pos:column="9"/></name></type> <name><name pos:line="8" pos:column="10">pwd<pos:position pos:line="8" pos:column="13"/></name><index pos:line="8" pos:column="13">[<expr><name pos:line="8" pos:column="14">WCCP2_PASSWORD_LEN<pos:position pos:line="8" pos:column="32"/></name></expr>]<pos:position pos:line="8" pos:column="33"/></index></name></decl>;<pos:position pos:line="8" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">SquidMD5_CTX<pos:position pos:line="9" pos:column="17"/></name></type> <name pos:line="9" pos:column="18">M<pos:position pos:line="9" pos:column="19"/></name></decl>;<pos:position pos:line="9" pos:column="20"/></decl_stmt>

    <comment type="block" pos:line="11" pos:column="5">/* Make sure the security type matches what we expect */</comment>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><call><name pos:line="13" pos:column="9">ntohl<pos:position pos:line="13" pos:column="14"/></name><argument_list pos:line="13" pos:column="14">(<argument><expr><name><name pos:line="13" pos:column="15">ws<pos:position pos:line="13" pos:column="17"/></name><operator pos:line="13" pos:column="17">-&gt;<pos:position pos:line="13" pos:column="22"/></operator><name pos:line="13" pos:column="19">security_option<pos:position pos:line="13" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="35"/></argument_list></call> <operator pos:line="13" pos:column="36">!=<pos:position pos:line="13" pos:column="38"/></operator> <name><name pos:line="13" pos:column="39">srv<pos:position pos:line="13" pos:column="42"/></name><operator pos:line="13" pos:column="42">-&gt;<pos:position pos:line="13" pos:column="47"/></operator><name pos:line="13" pos:column="44">wccp2_security_type<pos:position pos:line="13" pos:column="63"/></name></name></expr>)<pos:position pos:line="13" pos:column="64"/></condition><then pos:line="13" pos:column="64"> <block pos:line="13" pos:column="65">{
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">debugs<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><literal type="number" pos:line="14" pos:column="16">80<pos:position pos:line="14" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="20">DBG_IMPORTANT<pos:position pos:line="14" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="35">"wccp2_check_security: received packet has the wrong security option"<pos:position pos:line="14" pos:column="104"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="105"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="106"/></expr_stmt>
        <return pos:line="15" pos:column="9">return <expr><literal type="number" pos:line="15" pos:column="16">0<pos:position pos:line="15" pos:column="17"/></literal></expr>;<pos:position pos:line="15" pos:column="18"/></return>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name><name pos:line="18" pos:column="9">srv<pos:position pos:line="18" pos:column="12"/></name><operator pos:line="18" pos:column="12">-&gt;<pos:position pos:line="18" pos:column="17"/></operator><name pos:line="18" pos:column="14">wccp2_security_type<pos:position pos:line="18" pos:column="33"/></name></name> <operator pos:line="18" pos:column="34">==<pos:position pos:line="18" pos:column="36"/></operator> <name pos:line="18" pos:column="37">WCCP2_NO_SECURITY<pos:position pos:line="18" pos:column="54"/></name></expr>)<pos:position pos:line="18" pos:column="55"/></condition><then pos:line="18" pos:column="55"> <block pos:line="18" pos:column="56">{
        <return pos:line="19" pos:column="9">return <expr><literal type="number" pos:line="19" pos:column="16">1<pos:position pos:line="19" pos:column="17"/></literal></expr>;<pos:position pos:line="19" pos:column="18"/></return>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>

    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><name><name pos:line="22" pos:column="9">srv<pos:position pos:line="22" pos:column="12"/></name><operator pos:line="22" pos:column="12">-&gt;<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="14">wccp2_security_type<pos:position pos:line="22" pos:column="33"/></name></name> <operator pos:line="22" pos:column="34">!=<pos:position pos:line="22" pos:column="36"/></operator> <name pos:line="22" pos:column="37">WCCP2_MD5_SECURITY<pos:position pos:line="22" pos:column="55"/></name></expr>)<pos:position pos:line="22" pos:column="56"/></condition><then pos:line="22" pos:column="56"> <block pos:line="22" pos:column="57">{
        <expr_stmt><expr><call><name pos:line="23" pos:column="9">debugs<pos:position pos:line="23" pos:column="15"/></name><argument_list pos:line="23" pos:column="15">(<argument><expr><literal type="number" pos:line="23" pos:column="16">80<pos:position pos:line="23" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="20">DBG_IMPORTANT<pos:position pos:line="23" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="35">"wccp2_check_security: invalid security option"<pos:position pos:line="23" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="84"/></expr_stmt>
        <return pos:line="24" pos:column="9">return <expr><literal type="number" pos:line="24" pos:column="16">0<pos:position pos:line="24" pos:column="17"/></literal></expr>;<pos:position pos:line="24" pos:column="18"/></return>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="27" pos:column="5">/* If execution makes it here then we have an MD5 security */</comment>

    <comment type="block" pos:line="29" pos:column="5">/* The password field, for the MD5 hash, needs to be 8 bytes and NUL padded. */</comment>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">memset<pos:position pos:line="30" pos:column="11"/></name><argument_list pos:line="30" pos:column="11">(<argument><expr><name pos:line="30" pos:column="12">pwd<pos:position pos:line="30" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="17">0<pos:position pos:line="30" pos:column="18"/></literal></expr></argument>, <argument><expr><sizeof pos:line="30" pos:column="20">sizeof<argument_list pos:line="30" pos:column="26">(<argument><expr><name pos:line="30" pos:column="27">pwd<pos:position pos:line="30" pos:column="30"/></name></expr></argument>)<pos:position pos:line="30" pos:column="31"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="30" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">strncpy<pos:position pos:line="31" pos:column="12"/></name><argument_list pos:line="31" pos:column="12">(<argument><expr><name pos:line="31" pos:column="13">pwd<pos:position pos:line="31" pos:column="16"/></name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="18">srv<pos:position pos:line="31" pos:column="21"/></name><operator pos:line="31" pos:column="21">-&gt;<pos:position pos:line="31" pos:column="26"/></operator><name pos:line="31" pos:column="23">wccp_password<pos:position pos:line="31" pos:column="36"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="31" pos:column="38">sizeof<argument_list pos:line="31" pos:column="44">(<argument><expr><name pos:line="31" pos:column="45">pwd<pos:position pos:line="31" pos:column="48"/></name></expr></argument>)<pos:position pos:line="31" pos:column="49"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="31" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="32" pos:column="5">pwd<pos:position pos:line="32" pos:column="8"/></name><index pos:line="32" pos:column="8">[<expr><sizeof pos:line="32" pos:column="9">sizeof<argument_list pos:line="32" pos:column="15">(<argument><expr><name pos:line="32" pos:column="16">pwd<pos:position pos:line="32" pos:column="19"/></name></expr></argument>)<pos:position pos:line="32" pos:column="20"/></argument_list></sizeof> <operator pos:line="32" pos:column="21">-<pos:position pos:line="32" pos:column="22"/></operator> <literal type="number" pos:line="32" pos:column="23">1<pos:position pos:line="32" pos:column="24"/></literal></expr>]<pos:position pos:line="32" pos:column="25"/></index></name> <operator pos:line="32" pos:column="26">=<pos:position pos:line="32" pos:column="27"/></operator> <literal type="char" pos:line="32" pos:column="28">'\0'<pos:position pos:line="32" pos:column="32"/></literal></expr>;<pos:position pos:line="32" pos:column="33"/></expr_stmt>

    <comment type="block" pos:line="34" pos:column="5">/* Take a copy of the challenge: we need to NUL it before comparing */</comment>
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">memcpy<pos:position pos:line="35" pos:column="11"/></name><argument_list pos:line="35" pos:column="11">(<argument><expr><name pos:line="35" pos:column="12">md5_challenge<pos:position pos:line="35" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="27">ws<pos:position pos:line="35" pos:column="29"/></name><operator pos:line="35" pos:column="29">-&gt;<pos:position pos:line="35" pos:column="34"/></operator><name pos:line="35" pos:column="31">security_implementation<pos:position pos:line="35" pos:column="54"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="56">16<pos:position pos:line="35" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="60"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="37" pos:column="5">memset<pos:position pos:line="37" pos:column="11"/></name><argument_list pos:line="37" pos:column="11">(<argument><expr><name><name pos:line="37" pos:column="12">ws<pos:position pos:line="37" pos:column="14"/></name><operator pos:line="37" pos:column="14">-&gt;<pos:position pos:line="37" pos:column="19"/></operator><name pos:line="37" pos:column="16">security_implementation<pos:position pos:line="37" pos:column="39"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="41">0<pos:position pos:line="37" pos:column="42"/></literal></expr></argument>, <argument><expr><sizeof pos:line="37" pos:column="44">sizeof<argument_list pos:line="37" pos:column="50">(<argument><expr><name><name pos:line="37" pos:column="51">ws<pos:position pos:line="37" pos:column="53"/></name><operator pos:line="37" pos:column="53">-&gt;<pos:position pos:line="37" pos:column="58"/></operator><name pos:line="37" pos:column="55">security_implementation<pos:position pos:line="37" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="79"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="37" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="81"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="39" pos:column="5">SquidMD5Init<pos:position pos:line="39" pos:column="17"/></name><argument_list pos:line="39" pos:column="17">(<argument><expr><operator pos:line="39" pos:column="18">&amp;<pos:position pos:line="39" pos:column="23"/></operator><name pos:line="39" pos:column="19">M<pos:position pos:line="39" pos:column="20"/></name></expr></argument>)<pos:position pos:line="39" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="22"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="41" pos:column="5">SquidMD5Update<pos:position pos:line="41" pos:column="19"/></name><argument_list pos:line="41" pos:column="19">(<argument><expr><operator pos:line="41" pos:column="20">&amp;<pos:position pos:line="41" pos:column="25"/></operator><name pos:line="41" pos:column="21">M<pos:position pos:line="41" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="24">pwd<pos:position pos:line="41" pos:column="27"/></name></expr></argument>, <argument><expr><sizeof pos:line="41" pos:column="29">sizeof<argument_list pos:line="41" pos:column="35">(<argument><expr><name pos:line="41" pos:column="36">pwd<pos:position pos:line="41" pos:column="39"/></name></expr></argument>)<pos:position pos:line="41" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="41" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="42"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="43" pos:column="5">SquidMD5Update<pos:position pos:line="43" pos:column="19"/></name><argument_list pos:line="43" pos:column="19">(<argument><expr><operator pos:line="43" pos:column="20">&amp;<pos:position pos:line="43" pos:column="25"/></operator><name pos:line="43" pos:column="21">M<pos:position pos:line="43" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="24">packet<pos:position pos:line="43" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="32">len<pos:position pos:line="43" pos:column="35"/></name></expr></argument>)<pos:position pos:line="43" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="37"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="45" pos:column="5">SquidMD5Final<pos:position pos:line="45" pos:column="18"/></name><argument_list pos:line="45" pos:column="18">(<argument><expr><name pos:line="45" pos:column="19">md5_digest<pos:position pos:line="45" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="31">&amp;<pos:position pos:line="45" pos:column="36"/></operator><name pos:line="45" pos:column="32">M<pos:position pos:line="45" pos:column="33"/></name></expr></argument>)<pos:position pos:line="45" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="35"/></expr_stmt>

    <return pos:line="47" pos:column="5">return <expr><operator pos:line="47" pos:column="12">(<pos:position pos:line="47" pos:column="13"/></operator><call><name pos:line="47" pos:column="13">memcmp<pos:position pos:line="47" pos:column="19"/></name><argument_list pos:line="47" pos:column="19">(<argument><expr><name pos:line="47" pos:column="20">md5_digest<pos:position pos:line="47" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="32">md5_challenge<pos:position pos:line="47" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="47">16<pos:position pos:line="47" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="50"/></argument_list></call> <operator pos:line="47" pos:column="51">==<pos:position pos:line="47" pos:column="53"/></operator> <literal type="number" pos:line="47" pos:column="54">0<pos:position pos:line="47" pos:column="55"/></literal><operator pos:line="47" pos:column="55">)<pos:position pos:line="47" pos:column="56"/></operator></expr>;<pos:position pos:line="47" pos:column="57"/></return>
}<pos:position pos:line="48" pos:column="2"/></block></function></unit>
