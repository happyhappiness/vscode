<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_function_997.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ConnStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">parseProxy1p0<pos:position pos:line="2" pos:column="29"/></name></name><parameter_list pos:line="2" pos:column="29">()<pos:position pos:line="2" pos:column="31"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><operator pos:line="4" pos:column="5">::<pos:position pos:line="4" pos:column="7"/></operator><name pos:line="4" pos:column="7">Parser<pos:position pos:line="4" pos:column="13"/></name><operator pos:line="4" pos:column="13">::<pos:position pos:line="4" pos:column="15"/></operator><name pos:line="4" pos:column="15">Tokenizer<pos:position pos:line="4" pos:column="24"/></name></name></type> <name pos:line="4" pos:column="25">tok<pos:position pos:line="4" pos:column="28"/></name><argument_list pos:line="4" pos:column="28">(<argument><expr><name><name pos:line="4" pos:column="29">in<pos:position pos:line="4" pos:column="31"/></name><operator pos:line="4" pos:column="31">.<pos:position pos:line="4" pos:column="32"/></operator><name pos:line="4" pos:column="32">buf<pos:position pos:line="4" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="4" pos:column="36"/></argument_list></decl>;<pos:position pos:line="4" pos:column="37"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="5" pos:column="5">tok<pos:position pos:line="5" pos:column="8"/></name><operator pos:line="5" pos:column="8">.<pos:position pos:line="5" pos:column="9"/></operator><name pos:line="5" pos:column="9">skip<pos:position pos:line="5" pos:column="13"/></name></name><argument_list pos:line="5" pos:column="13">(<argument><expr><name pos:line="5" pos:column="14">Proxy1p0magic<pos:position pos:line="5" pos:column="27"/></name></expr></argument>)<pos:position pos:line="5" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="29"/></expr_stmt>

    <comment type="line" pos:line="7" pos:column="5">// skip to first LF (assumes it is part of CRLF)</comment>
    <decl_stmt><decl><specifier pos:line="8" pos:column="5">static<pos:position pos:line="8" pos:column="11"/></specifier> <type><specifier pos:line="8" pos:column="12">const<pos:position pos:line="8" pos:column="17"/></specifier> <name pos:line="8" pos:column="18">CharacterSet<pos:position pos:line="8" pos:column="30"/></name></type> <name pos:line="8" pos:column="31">lineContent<pos:position pos:line="8" pos:column="42"/></name> <init pos:line="8" pos:column="43">= <expr><call><name><name pos:line="8" pos:column="45">CharacterSet<pos:position pos:line="8" pos:column="57"/></name><operator pos:line="8" pos:column="57">::<pos:position pos:line="8" pos:column="59"/></operator><name pos:line="8" pos:column="59">LF<pos:position pos:line="8" pos:column="61"/></name><operator pos:line="8" pos:column="61">.<pos:position pos:line="8" pos:column="62"/></operator><name pos:line="8" pos:column="62">complement<pos:position pos:line="8" pos:column="72"/></name></name><argument_list pos:line="8" pos:column="72">(<argument><expr><literal type="string" pos:line="8" pos:column="73">"non-LF"<pos:position pos:line="8" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="82"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="83"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">SBuf<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">line<pos:position pos:line="9" pos:column="14"/></name></decl>;<pos:position pos:line="9" pos:column="15"/></decl_stmt>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><call><name><name pos:line="10" pos:column="9">tok<pos:position pos:line="10" pos:column="12"/></name><operator pos:line="10" pos:column="12">.<pos:position pos:line="10" pos:column="13"/></operator><name pos:line="10" pos:column="13">prefix<pos:position pos:line="10" pos:column="19"/></name></name><argument_list pos:line="10" pos:column="19">(<argument><expr><name pos:line="10" pos:column="20">line<pos:position pos:line="10" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="26">lineContent<pos:position pos:line="10" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="39">107<pos:position pos:line="10" pos:column="42"/></literal><operator pos:line="10" pos:column="42">-<pos:position pos:line="10" pos:column="43"/></operator><call><name><name pos:line="10" pos:column="43">Proxy1p0magic<pos:position pos:line="10" pos:column="56"/></name><operator pos:line="10" pos:column="56">.<pos:position pos:line="10" pos:column="57"/></operator><name pos:line="10" pos:column="57">length<pos:position pos:line="10" pos:column="63"/></name></name><argument_list pos:line="10" pos:column="63">()<pos:position pos:line="10" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="67"/></condition><then pos:line="10" pos:column="67"> <block pos:line="10" pos:column="68">{
        <if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><call><name><name pos:line="11" pos:column="13">tok<pos:position pos:line="11" pos:column="16"/></name><operator pos:line="11" pos:column="16">.<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="17">skip<pos:position pos:line="11" pos:column="21"/></name></name><argument_list pos:line="11" pos:column="21">(<argument><expr><literal type="char" pos:line="11" pos:column="22">'\n'<pos:position pos:line="11" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="28"/></condition><then pos:line="11" pos:column="28"> <block pos:line="11" pos:column="29">{
            <comment type="line" pos:line="12" pos:column="13">// found valid header</comment>
            <expr_stmt><expr><name><name pos:line="13" pos:column="13">in<pos:position pos:line="13" pos:column="15"/></name><operator pos:line="13" pos:column="15">.<pos:position pos:line="13" pos:column="16"/></operator><name pos:line="13" pos:column="16">buf<pos:position pos:line="13" pos:column="19"/></name></name> <operator pos:line="13" pos:column="20">=<pos:position pos:line="13" pos:column="21"/></operator> <call><name><name pos:line="13" pos:column="22">tok<pos:position pos:line="13" pos:column="25"/></name><operator pos:line="13" pos:column="25">.<pos:position pos:line="13" pos:column="26"/></operator><name pos:line="13" pos:column="26">remaining<pos:position pos:line="13" pos:column="35"/></name></name><argument_list pos:line="13" pos:column="35">()<pos:position pos:line="13" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="38"/></expr_stmt>
            <expr_stmt><expr><name pos:line="14" pos:column="13">needProxyProtocolHeader_<pos:position pos:line="14" pos:column="37"/></name> <operator pos:line="14" pos:column="38">=<pos:position pos:line="14" pos:column="39"/></operator> <literal type="boolean" pos:line="14" pos:column="40">false<pos:position pos:line="14" pos:column="45"/></literal></expr>;<pos:position pos:line="14" pos:column="46"/></expr_stmt>
            <comment type="line" pos:line="15" pos:column="13">// reset the tokenizer to work on found line only.</comment>
            <expr_stmt><expr><call><name><name pos:line="16" pos:column="13">tok<pos:position pos:line="16" pos:column="16"/></name><operator pos:line="16" pos:column="16">.<pos:position pos:line="16" pos:column="17"/></operator><name pos:line="16" pos:column="17">reset<pos:position pos:line="16" pos:column="22"/></name></name><argument_list pos:line="16" pos:column="22">(<argument><expr><name pos:line="16" pos:column="23">line<pos:position pos:line="16" pos:column="27"/></name></expr></argument>)<pos:position pos:line="16" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="17" pos:column="10"/></block></then> <else pos:line="17" pos:column="11">else
            <block type="pseudo"><return pos:line="18" pos:column="13">return <expr><literal type="boolean" pos:line="18" pos:column="20">false<pos:position pos:line="18" pos:column="25"/></literal></expr>;<pos:position pos:line="18" pos:column="26"/></return></block></else></if> <comment type="line" pos:line="18" pos:column="27">// no LF yet</comment>

    }<pos:position pos:line="20" pos:column="6"/></block></then> <else pos:line="20" pos:column="7">else <comment type="line" pos:line="20" pos:column="12">// protocol error only if there are more than 107 bytes prefix header</comment>
        <block type="pseudo"><return pos:line="21" pos:column="9">return <expr><call><name pos:line="21" pos:column="16">proxyProtocolError<pos:position pos:line="21" pos:column="34"/></name><argument_list pos:line="21" pos:column="34">(<argument><expr><ternary><condition><expr><call><name><name pos:line="21" pos:column="35">in<pos:position pos:line="21" pos:column="37"/></name><operator pos:line="21" pos:column="37">.<pos:position pos:line="21" pos:column="38"/></operator><name pos:line="21" pos:column="38">buf<pos:position pos:line="21" pos:column="41"/></name><operator pos:line="21" pos:column="41">.<pos:position pos:line="21" pos:column="42"/></operator><name pos:line="21" pos:column="42">length<pos:position pos:line="21" pos:column="48"/></name></name><argument_list pos:line="21" pos:column="48">()<pos:position pos:line="21" pos:column="50"/></argument_list></call> <operator pos:line="21" pos:column="51">&gt;<pos:position pos:line="21" pos:column="55"/></operator> <literal type="number" pos:line="21" pos:column="53">107<pos:position pos:line="21" pos:column="56"/></literal></expr>?<pos:position pos:line="21" pos:column="57"/></condition><then pos:line="21" pos:column="57"> <expr><literal type="string" pos:line="21" pos:column="58">"PROXY/1.0 error: missing CRLF"<pos:position pos:line="21" pos:column="89"/></literal></expr> <pos:position pos:line="21" pos:column="90"/></then><else pos:line="21" pos:column="90">: <expr><name pos:line="21" pos:column="92">NULL<pos:position pos:line="21" pos:column="96"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="21" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="98"/></return></block></else></if>

    <decl_stmt><decl><specifier pos:line="23" pos:column="5">static<pos:position pos:line="23" pos:column="11"/></specifier> <type><specifier pos:line="23" pos:column="12">const<pos:position pos:line="23" pos:column="17"/></specifier> <name pos:line="23" pos:column="18">SBuf<pos:position pos:line="23" pos:column="22"/></name></type> <name pos:line="23" pos:column="23">unknown<pos:position pos:line="23" pos:column="30"/></name><argument_list pos:line="23" pos:column="30">(<argument><expr><literal type="string" pos:line="23" pos:column="31">"UNKNOWN"<pos:position pos:line="23" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="41"/></argument_list></decl>, <decl><type ref="prev"/><name pos:line="23" pos:column="43">tcpName<pos:position pos:line="23" pos:column="50"/></name><argument_list pos:line="23" pos:column="50">(<argument><expr><literal type="string" pos:line="23" pos:column="51">"TCP"<pos:position pos:line="23" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="57"/></argument_list></decl>;<pos:position pos:line="23" pos:column="58"/></decl_stmt>
    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><call><name><name pos:line="24" pos:column="9">tok<pos:position pos:line="24" pos:column="12"/></name><operator pos:line="24" pos:column="12">.<pos:position pos:line="24" pos:column="13"/></operator><name pos:line="24" pos:column="13">skip<pos:position pos:line="24" pos:column="17"/></name></name><argument_list pos:line="24" pos:column="17">(<argument><expr><name pos:line="24" pos:column="18">tcpName<pos:position pos:line="24" pos:column="25"/></name></expr></argument>)<pos:position pos:line="24" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="27"/></condition><then pos:line="24" pos:column="27"> <block pos:line="24" pos:column="28">{

        <comment type="line" pos:line="26" pos:column="9">// skip TCP/IP version number</comment>
        <decl_stmt><decl><specifier pos:line="27" pos:column="9">static<pos:position pos:line="27" pos:column="15"/></specifier> <type><specifier pos:line="27" pos:column="16">const<pos:position pos:line="27" pos:column="21"/></specifier> <name pos:line="27" pos:column="22">CharacterSet<pos:position pos:line="27" pos:column="34"/></name></type> <name pos:line="27" pos:column="35">tcpVersions<pos:position pos:line="27" pos:column="46"/></name><argument_list pos:line="27" pos:column="46">(<argument><expr><literal type="string" pos:line="27" pos:column="47">"TCP-version"<pos:position pos:line="27" pos:column="60"/></literal></expr></argument>,<argument><expr><literal type="string" pos:line="27" pos:column="61">"46"<pos:position pos:line="27" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="66"/></argument_list></decl>;<pos:position pos:line="27" pos:column="67"/></decl_stmt>
        <if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><operator pos:line="28" pos:column="13">!<pos:position pos:line="28" pos:column="14"/></operator><call><name><name pos:line="28" pos:column="14">tok<pos:position pos:line="28" pos:column="17"/></name><operator pos:line="28" pos:column="17">.<pos:position pos:line="28" pos:column="18"/></operator><name pos:line="28" pos:column="18">skipOne<pos:position pos:line="28" pos:column="25"/></name></name><argument_list pos:line="28" pos:column="25">(<argument><expr><name pos:line="28" pos:column="26">tcpVersions<pos:position pos:line="28" pos:column="37"/></name></expr></argument>)<pos:position pos:line="28" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="39"/></condition><then pos:line="28" pos:column="39">
            <block type="pseudo"><return pos:line="29" pos:column="13">return <expr><call><name pos:line="29" pos:column="20">proxyProtocolError<pos:position pos:line="29" pos:column="38"/></name><argument_list pos:line="29" pos:column="38">(<argument><expr><literal type="string" pos:line="29" pos:column="39">"PROXY/1.0 error: missing TCP version"<pos:position pos:line="29" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="79"/></return></block></then></if>

        <comment type="line" pos:line="31" pos:column="9">// skip SP after protocol version</comment>
        <if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><operator pos:line="32" pos:column="13">!<pos:position pos:line="32" pos:column="14"/></operator><call><name><name pos:line="32" pos:column="14">tok<pos:position pos:line="32" pos:column="17"/></name><operator pos:line="32" pos:column="17">.<pos:position pos:line="32" pos:column="18"/></operator><name pos:line="32" pos:column="18">skip<pos:position pos:line="32" pos:column="22"/></name></name><argument_list pos:line="32" pos:column="22">(<argument><expr><literal type="char" pos:line="32" pos:column="23">' '<pos:position pos:line="32" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="28"/></condition><then pos:line="32" pos:column="28">
            <block type="pseudo"><return pos:line="33" pos:column="13">return <expr><call><name pos:line="33" pos:column="20">proxyProtocolError<pos:position pos:line="33" pos:column="38"/></name><argument_list pos:line="33" pos:column="38">(<argument><expr><literal type="string" pos:line="33" pos:column="39">"PROXY/1.0 error: missing SP"<pos:position pos:line="33" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="70"/></return></block></then></if>

        <decl_stmt><decl><type><name pos:line="35" pos:column="9">SBuf<pos:position pos:line="35" pos:column="13"/></name></type> <name pos:line="35" pos:column="14">ipa<pos:position pos:line="35" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="35" pos:column="19">ipb<pos:position pos:line="35" pos:column="22"/></name></decl>;<pos:position pos:line="35" pos:column="23"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="36" pos:column="9">int64_t<pos:position pos:line="36" pos:column="16"/></name></type> <name pos:line="36" pos:column="17">porta<pos:position pos:line="36" pos:column="22"/></name></decl>, <decl><type ref="prev"/><name pos:line="36" pos:column="24">portb<pos:position pos:line="36" pos:column="29"/></name></decl>;<pos:position pos:line="36" pos:column="30"/></decl_stmt>
        <decl_stmt><decl><specifier pos:line="37" pos:column="9">static<pos:position pos:line="37" pos:column="15"/></specifier> <type><specifier pos:line="37" pos:column="16">const<pos:position pos:line="37" pos:column="21"/></specifier> <name pos:line="37" pos:column="22">CharacterSet<pos:position pos:line="37" pos:column="34"/></name></type> <name pos:line="37" pos:column="35">ipChars<pos:position pos:line="37" pos:column="42"/></name> <init pos:line="37" pos:column="43">= <expr><call><name pos:line="37" pos:column="45">CharacterSet<pos:position pos:line="37" pos:column="57"/></name><argument_list pos:line="37" pos:column="57">(<argument><expr><literal type="string" pos:line="37" pos:column="58">"IP Address"<pos:position pos:line="37" pos:column="70"/></literal></expr></argument>,<argument><expr><literal type="string" pos:line="37" pos:column="71">".:"<pos:position pos:line="37" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="76"/></argument_list></call> <operator pos:line="37" pos:column="77">+<pos:position pos:line="37" pos:column="78"/></operator> <name><name pos:line="37" pos:column="79">CharacterSet<pos:position pos:line="37" pos:column="91"/></name><operator pos:line="37" pos:column="91">::<pos:position pos:line="37" pos:column="93"/></operator><name pos:line="37" pos:column="93">HEXDIG<pos:position pos:line="37" pos:column="99"/></name></name></expr></init></decl>;<pos:position pos:line="37" pos:column="100"/></decl_stmt>

        <comment type="line" pos:line="39" pos:column="9">// parse:  src-IP SP dst-IP SP src-port SP dst-port CR</comment>
        <comment type="line" pos:line="40" pos:column="9">// leave the LF until later.</comment>
        <decl_stmt><decl><type><specifier pos:line="41" pos:column="9">const<pos:position pos:line="41" pos:column="14"/></specifier> <name pos:line="41" pos:column="15">bool<pos:position pos:line="41" pos:column="19"/></name></type> <name pos:line="41" pos:column="20">correct<pos:position pos:line="41" pos:column="27"/></name> <init pos:line="41" pos:column="28">= <expr><call><name><name pos:line="41" pos:column="30">tok<pos:position pos:line="41" pos:column="33"/></name><operator pos:line="41" pos:column="33">.<pos:position pos:line="41" pos:column="34"/></operator><name pos:line="41" pos:column="34">prefix<pos:position pos:line="41" pos:column="40"/></name></name><argument_list pos:line="41" pos:column="40">(<argument><expr><name pos:line="41" pos:column="41">ipa<pos:position pos:line="41" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="46">ipChars<pos:position pos:line="41" pos:column="53"/></name></expr></argument>)<pos:position pos:line="41" pos:column="54"/></argument_list></call> <operator pos:line="41" pos:column="55">&amp;&amp;<pos:position pos:line="41" pos:column="65"/></operator> <call><name><name pos:line="41" pos:column="58">tok<pos:position pos:line="41" pos:column="61"/></name><operator pos:line="41" pos:column="61">.<pos:position pos:line="41" pos:column="62"/></operator><name pos:line="41" pos:column="62">skip<pos:position pos:line="41" pos:column="66"/></name></name><argument_list pos:line="41" pos:column="66">(<argument><expr><literal type="char" pos:line="41" pos:column="67">' '<pos:position pos:line="41" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="71"/></argument_list></call> <operator pos:line="41" pos:column="72">&amp;&amp;<pos:position pos:line="41" pos:column="82"/></operator>
                             <call><name><name pos:line="42" pos:column="30">tok<pos:position pos:line="42" pos:column="33"/></name><operator pos:line="42" pos:column="33">.<pos:position pos:line="42" pos:column="34"/></operator><name pos:line="42" pos:column="34">prefix<pos:position pos:line="42" pos:column="40"/></name></name><argument_list pos:line="42" pos:column="40">(<argument><expr><name pos:line="42" pos:column="41">ipb<pos:position pos:line="42" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="46">ipChars<pos:position pos:line="42" pos:column="53"/></name></expr></argument>)<pos:position pos:line="42" pos:column="54"/></argument_list></call> <operator pos:line="42" pos:column="55">&amp;&amp;<pos:position pos:line="42" pos:column="65"/></operator> <call><name><name pos:line="42" pos:column="58">tok<pos:position pos:line="42" pos:column="61"/></name><operator pos:line="42" pos:column="61">.<pos:position pos:line="42" pos:column="62"/></operator><name pos:line="42" pos:column="62">skip<pos:position pos:line="42" pos:column="66"/></name></name><argument_list pos:line="42" pos:column="66">(<argument><expr><literal type="char" pos:line="42" pos:column="67">' '<pos:position pos:line="42" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="71"/></argument_list></call> <operator pos:line="42" pos:column="72">&amp;&amp;<pos:position pos:line="42" pos:column="82"/></operator>
                             <call><name><name pos:line="43" pos:column="30">tok<pos:position pos:line="43" pos:column="33"/></name><operator pos:line="43" pos:column="33">.<pos:position pos:line="43" pos:column="34"/></operator><name pos:line="43" pos:column="34">int64<pos:position pos:line="43" pos:column="39"/></name></name><argument_list pos:line="43" pos:column="39">(<argument><expr><name pos:line="43" pos:column="40">porta<pos:position pos:line="43" pos:column="45"/></name></expr></argument>)<pos:position pos:line="43" pos:column="46"/></argument_list></call> <operator pos:line="43" pos:column="47">&amp;&amp;<pos:position pos:line="43" pos:column="57"/></operator> <call><name><name pos:line="43" pos:column="50">tok<pos:position pos:line="43" pos:column="53"/></name><operator pos:line="43" pos:column="53">.<pos:position pos:line="43" pos:column="54"/></operator><name pos:line="43" pos:column="54">skip<pos:position pos:line="43" pos:column="58"/></name></name><argument_list pos:line="43" pos:column="58">(<argument><expr><literal type="char" pos:line="43" pos:column="59">' '<pos:position pos:line="43" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="63"/></argument_list></call> <operator pos:line="43" pos:column="64">&amp;&amp;<pos:position pos:line="43" pos:column="74"/></operator>
                             <call><name><name pos:line="44" pos:column="30">tok<pos:position pos:line="44" pos:column="33"/></name><operator pos:line="44" pos:column="33">.<pos:position pos:line="44" pos:column="34"/></operator><name pos:line="44" pos:column="34">int64<pos:position pos:line="44" pos:column="39"/></name></name><argument_list pos:line="44" pos:column="39">(<argument><expr><name pos:line="44" pos:column="40">portb<pos:position pos:line="44" pos:column="45"/></name></expr></argument>)<pos:position pos:line="44" pos:column="46"/></argument_list></call> <operator pos:line="44" pos:column="47">&amp;&amp;<pos:position pos:line="44" pos:column="57"/></operator>
                             <call><name><name pos:line="45" pos:column="30">tok<pos:position pos:line="45" pos:column="33"/></name><operator pos:line="45" pos:column="33">.<pos:position pos:line="45" pos:column="34"/></operator><name pos:line="45" pos:column="34">skip<pos:position pos:line="45" pos:column="38"/></name></name><argument_list pos:line="45" pos:column="38">(<argument><expr><literal type="char" pos:line="45" pos:column="39">'\r'<pos:position pos:line="45" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="45" pos:column="45"/></decl_stmt>
        <if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><operator pos:line="46" pos:column="13">!<pos:position pos:line="46" pos:column="14"/></operator><name pos:line="46" pos:column="14">correct<pos:position pos:line="46" pos:column="21"/></name></expr>)<pos:position pos:line="46" pos:column="22"/></condition><then pos:line="46" pos:column="22">
            <block type="pseudo"><return pos:line="47" pos:column="13">return <expr><call><name pos:line="47" pos:column="20">proxyProtocolError<pos:position pos:line="47" pos:column="38"/></name><argument_list pos:line="47" pos:column="38">(<argument><expr><literal type="string" pos:line="47" pos:column="39">"PROXY/1.0 error: invalid syntax"<pos:position pos:line="47" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="74"/></return></block></then></if>

        <comment type="line" pos:line="49" pos:column="9">// parse IP and port strings</comment>
        <decl_stmt><decl><type><name><name pos:line="50" pos:column="9">Ip<pos:position pos:line="50" pos:column="11"/></name><operator pos:line="50" pos:column="11">::<pos:position pos:line="50" pos:column="13"/></operator><name pos:line="50" pos:column="13">Address<pos:position pos:line="50" pos:column="20"/></name></name></type> <name pos:line="50" pos:column="21">originalClient<pos:position pos:line="50" pos:column="35"/></name></decl>, <decl><type ref="prev"/><name pos:line="50" pos:column="37">originalDest<pos:position pos:line="50" pos:column="49"/></name></decl>;<pos:position pos:line="50" pos:column="50"/></decl_stmt>

        <if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><operator pos:line="52" pos:column="13">!<pos:position pos:line="52" pos:column="14"/></operator><call><name><name pos:line="52" pos:column="14">originalClient<pos:position pos:line="52" pos:column="28"/></name><operator pos:line="52" pos:column="28">.<pos:position pos:line="52" pos:column="29"/></operator><name pos:line="52" pos:column="29">GetHostByName<pos:position pos:line="52" pos:column="42"/></name></name><argument_list pos:line="52" pos:column="42">(<argument><expr><call><name><name pos:line="52" pos:column="43">ipa<pos:position pos:line="52" pos:column="46"/></name><operator pos:line="52" pos:column="46">.<pos:position pos:line="52" pos:column="47"/></operator><name pos:line="52" pos:column="47">c_str<pos:position pos:line="52" pos:column="52"/></name></name><argument_list pos:line="52" pos:column="52">()<pos:position pos:line="52" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="52" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="56"/></condition><then pos:line="52" pos:column="56">
            <block type="pseudo"><return pos:line="53" pos:column="13">return <expr><call><name pos:line="53" pos:column="20">proxyProtocolError<pos:position pos:line="53" pos:column="38"/></name><argument_list pos:line="53" pos:column="38">(<argument><expr><literal type="string" pos:line="53" pos:column="39">"PROXY/1.0 error: invalid src-IP address"<pos:position pos:line="53" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="82"/></return></block></then></if>

        <if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><operator pos:line="55" pos:column="13">!<pos:position pos:line="55" pos:column="14"/></operator><call><name><name pos:line="55" pos:column="14">originalDest<pos:position pos:line="55" pos:column="26"/></name><operator pos:line="55" pos:column="26">.<pos:position pos:line="55" pos:column="27"/></operator><name pos:line="55" pos:column="27">GetHostByName<pos:position pos:line="55" pos:column="40"/></name></name><argument_list pos:line="55" pos:column="40">(<argument><expr><call><name><name pos:line="55" pos:column="41">ipb<pos:position pos:line="55" pos:column="44"/></name><operator pos:line="55" pos:column="44">.<pos:position pos:line="55" pos:column="45"/></operator><name pos:line="55" pos:column="45">c_str<pos:position pos:line="55" pos:column="50"/></name></name><argument_list pos:line="55" pos:column="50">()<pos:position pos:line="55" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="55" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="54"/></condition><then pos:line="55" pos:column="54">
            <block type="pseudo"><return pos:line="56" pos:column="13">return <expr><call><name pos:line="56" pos:column="20">proxyProtocolError<pos:position pos:line="56" pos:column="38"/></name><argument_list pos:line="56" pos:column="38">(<argument><expr><literal type="string" pos:line="56" pos:column="39">"PROXY/1.0 error: invalid dst-IP address"<pos:position pos:line="56" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="82"/></return></block></then></if>

        <if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><name pos:line="58" pos:column="13">porta<pos:position pos:line="58" pos:column="18"/></name> <operator pos:line="58" pos:column="19">&gt;<pos:position pos:line="58" pos:column="23"/></operator> <literal type="number" pos:line="58" pos:column="21">0<pos:position pos:line="58" pos:column="22"/></literal> <operator pos:line="58" pos:column="23">&amp;&amp;<pos:position pos:line="58" pos:column="33"/></operator> <name pos:line="58" pos:column="26">porta<pos:position pos:line="58" pos:column="31"/></name> <operator pos:line="58" pos:column="32">&lt;=<pos:position pos:line="58" pos:column="37"/></operator> <literal type="number" pos:line="58" pos:column="35">0xFFFF<pos:position pos:line="58" pos:column="41"/></literal></expr>)<pos:position pos:line="58" pos:column="42"/></condition><then pos:line="58" pos:column="42"> <comment type="line" pos:line="58" pos:column="43">// max uint16_t</comment>
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="59" pos:column="13">originalClient<pos:position pos:line="59" pos:column="27"/></name><operator pos:line="59" pos:column="27">.<pos:position pos:line="59" pos:column="28"/></operator><name pos:line="59" pos:column="28">port<pos:position pos:line="59" pos:column="32"/></name></name><argument_list pos:line="59" pos:column="32">(<argument><expr><cast type="static" pos:line="59" pos:column="33">static_cast<argument_list type="generic" pos:line="59" pos:column="44">&lt;<argument><expr><name pos:line="59" pos:column="45">uint16_t<pos:position pos:line="59" pos:column="53"/></name></expr></argument>&gt;<pos:position pos:line="59" pos:column="57"/></argument_list><argument_list pos:line="59" pos:column="54">(<argument><expr><name pos:line="59" pos:column="55">porta<pos:position pos:line="59" pos:column="60"/></name></expr></argument>)<pos:position pos:line="59" pos:column="61"/></argument_list></cast></expr></argument>)<pos:position pos:line="59" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="63"/></expr_stmt></block></then>
        <else pos:line="60" pos:column="9">else
            <block type="pseudo"><return pos:line="61" pos:column="13">return <expr><call><name pos:line="61" pos:column="20">proxyProtocolError<pos:position pos:line="61" pos:column="38"/></name><argument_list pos:line="61" pos:column="38">(<argument><expr><literal type="string" pos:line="61" pos:column="39">"PROXY/1.0 error: invalid src port"<pos:position pos:line="61" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="76"/></return></block></else></if>

        <if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><name pos:line="63" pos:column="13">portb<pos:position pos:line="63" pos:column="18"/></name> <operator pos:line="63" pos:column="19">&gt;<pos:position pos:line="63" pos:column="23"/></operator> <literal type="number" pos:line="63" pos:column="21">0<pos:position pos:line="63" pos:column="22"/></literal> <operator pos:line="63" pos:column="23">&amp;&amp;<pos:position pos:line="63" pos:column="33"/></operator> <name pos:line="63" pos:column="26">portb<pos:position pos:line="63" pos:column="31"/></name> <operator pos:line="63" pos:column="32">&lt;=<pos:position pos:line="63" pos:column="37"/></operator> <literal type="number" pos:line="63" pos:column="35">0xFFFF<pos:position pos:line="63" pos:column="41"/></literal></expr>)<pos:position pos:line="63" pos:column="42"/></condition><then pos:line="63" pos:column="42"> <comment type="line" pos:line="63" pos:column="43">// max uint16_t</comment>
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="64" pos:column="13">originalDest<pos:position pos:line="64" pos:column="25"/></name><operator pos:line="64" pos:column="25">.<pos:position pos:line="64" pos:column="26"/></operator><name pos:line="64" pos:column="26">port<pos:position pos:line="64" pos:column="30"/></name></name><argument_list pos:line="64" pos:column="30">(<argument><expr><cast type="static" pos:line="64" pos:column="31">static_cast<argument_list type="generic" pos:line="64" pos:column="42">&lt;<argument><expr><name pos:line="64" pos:column="43">uint16_t<pos:position pos:line="64" pos:column="51"/></name></expr></argument>&gt;<pos:position pos:line="64" pos:column="55"/></argument_list><argument_list pos:line="64" pos:column="52">(<argument><expr><name pos:line="64" pos:column="53">portb<pos:position pos:line="64" pos:column="58"/></name></expr></argument>)<pos:position pos:line="64" pos:column="59"/></argument_list></cast></expr></argument>)<pos:position pos:line="64" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="61"/></expr_stmt></block></then>
        <else pos:line="65" pos:column="9">else
            <block type="pseudo"><return pos:line="66" pos:column="13">return <expr><call><name pos:line="66" pos:column="20">proxyProtocolError<pos:position pos:line="66" pos:column="38"/></name><argument_list pos:line="66" pos:column="38">(<argument><expr><literal type="string" pos:line="66" pos:column="39">"PROXY/1.0 error: invalid dst port"<pos:position pos:line="66" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="76"/></return></block></else></if>

        <comment type="line" pos:line="68" pos:column="9">// we have original client and destination details now</comment>
        <comment type="line" pos:line="69" pos:column="9">// replace the client connection values</comment>
        <expr_stmt><expr><call><name pos:line="70" pos:column="9">debugs<pos:position pos:line="70" pos:column="15"/></name><argument_list pos:line="70" pos:column="15">(<argument><expr><literal type="number" pos:line="70" pos:column="16">33<pos:position pos:line="70" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="70" pos:column="20">5<pos:position pos:line="70" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="70" pos:column="23">"PROXY/1.0 protocol on connection "<pos:position pos:line="70" pos:column="58"/></literal> <operator pos:line="70" pos:column="59">&lt;&lt;<pos:position pos:line="70" pos:column="67"/></operator> <name pos:line="70" pos:column="62">clientConnection<pos:position pos:line="70" pos:column="78"/></name></expr></argument>)<pos:position pos:line="70" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="80"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="71" pos:column="9">clientConnection<pos:position pos:line="71" pos:column="25"/></name><operator pos:line="71" pos:column="25">-&gt;<pos:position pos:line="71" pos:column="30"/></operator><name pos:line="71" pos:column="27">local<pos:position pos:line="71" pos:column="32"/></name></name> <operator pos:line="71" pos:column="33">=<pos:position pos:line="71" pos:column="34"/></operator> <name pos:line="71" pos:column="35">originalDest<pos:position pos:line="71" pos:column="47"/></name></expr>;<pos:position pos:line="71" pos:column="48"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="72" pos:column="9">clientConnection<pos:position pos:line="72" pos:column="25"/></name><operator pos:line="72" pos:column="25">-&gt;<pos:position pos:line="72" pos:column="30"/></operator><name pos:line="72" pos:column="27">remote<pos:position pos:line="72" pos:column="33"/></name></name> <operator pos:line="72" pos:column="34">=<pos:position pos:line="72" pos:column="35"/></operator> <name pos:line="72" pos:column="36">originalClient<pos:position pos:line="72" pos:column="50"/></name></expr>;<pos:position pos:line="72" pos:column="51"/></expr_stmt>
        <if pos:line="73" pos:column="9">if <condition pos:line="73" pos:column="12">(<expr><operator pos:line="73" pos:column="13">(<pos:position pos:line="73" pos:column="14"/></operator><name><name pos:line="73" pos:column="14">clientConnection<pos:position pos:line="73" pos:column="30"/></name><operator pos:line="73" pos:column="30">-&gt;<pos:position pos:line="73" pos:column="35"/></operator><name pos:line="73" pos:column="32">flags<pos:position pos:line="73" pos:column="37"/></name></name> <operator pos:line="73" pos:column="38">&amp;<pos:position pos:line="73" pos:column="43"/></operator> <name pos:line="73" pos:column="40">COMM_TRANSPARENT<pos:position pos:line="73" pos:column="56"/></name><operator pos:line="73" pos:column="56">)<pos:position pos:line="73" pos:column="57"/></operator></expr>)<pos:position pos:line="73" pos:column="58"/></condition><then pos:line="73" pos:column="58">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="74" pos:column="13">clientConnection<pos:position pos:line="74" pos:column="29"/></name><operator pos:line="74" pos:column="29">-&gt;<pos:position pos:line="74" pos:column="34"/></operator><name pos:line="74" pos:column="31">flags<pos:position pos:line="74" pos:column="36"/></name></name> <operator pos:line="74" pos:column="37">^=<pos:position pos:line="74" pos:column="39"/></operator> <name pos:line="74" pos:column="40">COMM_TRANSPARENT<pos:position pos:line="74" pos:column="56"/></name></expr>;<pos:position pos:line="74" pos:column="57"/></expr_stmt></block></then></if> <comment type="line" pos:line="74" pos:column="58">// prevent TPROXY spoofing of this new IP.</comment>
        <expr_stmt><expr><call><name pos:line="75" pos:column="9">debugs<pos:position pos:line="75" pos:column="15"/></name><argument_list pos:line="75" pos:column="15">(<argument><expr><literal type="number" pos:line="75" pos:column="16">33<pos:position pos:line="75" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="75" pos:column="20">5<pos:position pos:line="75" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="75" pos:column="23">"PROXY/1.0 upgrade: "<pos:position pos:line="75" pos:column="44"/></literal> <operator pos:line="75" pos:column="45">&lt;&lt;<pos:position pos:line="75" pos:column="53"/></operator> <name pos:line="75" pos:column="48">clientConnection<pos:position pos:line="75" pos:column="64"/></name></expr></argument>)<pos:position pos:line="75" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="66"/></expr_stmt>

        <comment type="line" pos:line="77" pos:column="9">// repeat fetch ensuring the new client FQDN can be logged</comment>
        <if pos:line="78" pos:column="9">if <condition pos:line="78" pos:column="12">(<expr><name><name pos:line="78" pos:column="13">Config<pos:position pos:line="78" pos:column="19"/></name><operator pos:line="78" pos:column="19">.<pos:position pos:line="78" pos:column="20"/></operator><name pos:line="78" pos:column="20">onoff<pos:position pos:line="78" pos:column="25"/></name><operator pos:line="78" pos:column="25">.<pos:position pos:line="78" pos:column="26"/></operator><name pos:line="78" pos:column="26">log_fqdn<pos:position pos:line="78" pos:column="34"/></name></name></expr>)<pos:position pos:line="78" pos:column="35"/></condition><then pos:line="78" pos:column="35">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="79" pos:column="13">fqdncache_gethostbyaddr<pos:position pos:line="79" pos:column="36"/></name><argument_list pos:line="79" pos:column="36">(<argument><expr><name><name pos:line="79" pos:column="37">clientConnection<pos:position pos:line="79" pos:column="53"/></name><operator pos:line="79" pos:column="53">-&gt;<pos:position pos:line="79" pos:column="58"/></operator><name pos:line="79" pos:column="55">remote<pos:position pos:line="79" pos:column="61"/></name></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="63">FQDN_LOOKUP_IF_MISS<pos:position pos:line="79" pos:column="82"/></name></expr></argument>)<pos:position pos:line="79" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="84"/></expr_stmt></block></then></if>

        <return pos:line="81" pos:column="9">return <expr><literal type="boolean" pos:line="81" pos:column="16">true<pos:position pos:line="81" pos:column="20"/></literal></expr>;<pos:position pos:line="81" pos:column="21"/></return>

    }<pos:position pos:line="83" pos:column="6"/></block></then> <elseif pos:line="83" pos:column="7">else <if pos:line="83" pos:column="12">if <condition pos:line="83" pos:column="15">(<expr><call><name><name pos:line="83" pos:column="16">tok<pos:position pos:line="83" pos:column="19"/></name><operator pos:line="83" pos:column="19">.<pos:position pos:line="83" pos:column="20"/></operator><name pos:line="83" pos:column="20">skip<pos:position pos:line="83" pos:column="24"/></name></name><argument_list pos:line="83" pos:column="24">(<argument><expr><name pos:line="83" pos:column="25">unknown<pos:position pos:line="83" pos:column="32"/></name></expr></argument>)<pos:position pos:line="83" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="83" pos:column="34"/></condition><then pos:line="83" pos:column="34"> <block pos:line="83" pos:column="35">{
        <comment type="line" pos:line="84" pos:column="9">// found valid but unusable header</comment>
        <return pos:line="85" pos:column="9">return <expr><literal type="boolean" pos:line="85" pos:column="16">true<pos:position pos:line="85" pos:column="20"/></literal></expr>;<pos:position pos:line="85" pos:column="21"/></return>

    }<pos:position pos:line="87" pos:column="6"/></block></then></if></elseif> <else pos:line="87" pos:column="7">else
        <block type="pseudo"><return pos:line="88" pos:column="9">return <expr><call><name pos:line="88" pos:column="16">proxyProtocolError<pos:position pos:line="88" pos:column="34"/></name><argument_list pos:line="88" pos:column="34">(<argument><expr><literal type="string" pos:line="88" pos:column="35">"PROXY/1.0 error: invalid protocol family"<pos:position pos:line="88" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="79"/></return></block></else></if>

    <return pos:line="90" pos:column="5">return <expr><literal type="boolean" pos:line="90" pos:column="12">false<pos:position pos:line="90" pos:column="17"/></literal></expr>;<pos:position pos:line="90" pos:column="18"/></return>
}<pos:position pos:line="91" pos:column="2"/></block></function></unit>
