<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2399_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HttpRequest<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">sanityCheckStartLine<pos:position pos:line="2" pos:column="34"/></name></name><parameter_list pos:line="2" pos:column="34">(<parameter><decl><type><specifier pos:line="2" pos:column="35">const<pos:position pos:line="2" pos:column="40"/></specifier> <name pos:line="2" pos:column="41">char<pos:position pos:line="2" pos:column="45"/></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="47">buf<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="52">const<pos:position pos:line="2" pos:column="57"/></specifier> <name pos:line="2" pos:column="58">size_t<pos:position pos:line="2" pos:column="64"/></name></type> <name pos:line="2" pos:column="65">hdr_len<pos:position pos:line="2" pos:column="72"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="74">Http<pos:position pos:line="2" pos:column="78"/></name><operator pos:line="2" pos:column="78">::<pos:position pos:line="2" pos:column="80"/></operator><name pos:line="2" pos:column="80">StatusCode<pos:position pos:line="2" pos:column="90"/></name></name> <modifier pos:line="2" pos:column="91">*<pos:position pos:line="2" pos:column="92"/></modifier></type><name pos:line="2" pos:column="92">error<pos:position pos:line="2" pos:column="97"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="98"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// content is long enough to possibly hold a reply</comment>
    <comment type="line" pos:line="5" pos:column="5">// 2 being magic size of a 1-byte request method plus space delimiter</comment>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">hdr_len<pos:position pos:line="6" pos:column="16"/></name> <operator pos:line="6" pos:column="17">&lt;<pos:position pos:line="6" pos:column="21"/></operator> <literal type="number" pos:line="6" pos:column="19">2<pos:position pos:line="6" pos:column="20"/></literal></expr>)<pos:position pos:line="6" pos:column="21"/></condition><then pos:line="6" pos:column="21"> <block pos:line="6" pos:column="22">{
        <comment type="line" pos:line="7" pos:column="9">// this is ony a real error if the headers apparently complete.</comment>
        <if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">hdr_len<pos:position pos:line="8" pos:column="20"/></name> <operator pos:line="8" pos:column="21">&gt;<pos:position pos:line="8" pos:column="25"/></operator> <literal type="number" pos:line="8" pos:column="23">0<pos:position pos:line="8" pos:column="24"/></literal></expr>)<pos:position pos:line="8" pos:column="25"/></condition><then pos:line="8" pos:column="25"> <block pos:line="8" pos:column="26">{
            <expr_stmt><expr><call><name pos:line="9" pos:column="13">debugs<pos:position pos:line="9" pos:column="19"/></name><argument_list pos:line="9" pos:column="19">(<argument><expr><literal type="number" pos:line="9" pos:column="20">58<pos:position pos:line="9" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="24">3<pos:position pos:line="9" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="27">HERE<pos:position pos:line="9" pos:column="31"/></name> <operator pos:line="9" pos:column="32">&lt;&lt;<pos:position pos:line="9" pos:column="40"/></operator> <literal type="string" pos:line="9" pos:column="35">"Too large request header ("<pos:position pos:line="9" pos:column="63"/></literal> <operator pos:line="9" pos:column="64">&lt;&lt;<pos:position pos:line="9" pos:column="72"/></operator> <name pos:line="9" pos:column="67">hdr_len<pos:position pos:line="9" pos:column="74"/></name> <operator pos:line="9" pos:column="75">&lt;&lt;<pos:position pos:line="9" pos:column="83"/></operator> <literal type="string" pos:line="9" pos:column="78">" bytes)"<pos:position pos:line="9" pos:column="87"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="89"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="10" pos:column="13">*<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">error<pos:position pos:line="10" pos:column="19"/></name> <operator pos:line="10" pos:column="20">=<pos:position pos:line="10" pos:column="21"/></operator> <name><name pos:line="10" pos:column="22">Http<pos:position pos:line="10" pos:column="26"/></name><operator pos:line="10" pos:column="26">::<pos:position pos:line="10" pos:column="28"/></operator><name pos:line="10" pos:column="28">scInvalidHeader<pos:position pos:line="10" pos:column="43"/></name></name></expr>;<pos:position pos:line="10" pos:column="44"/></expr_stmt>
        }<pos:position pos:line="11" pos:column="10"/></block></then></if>
        <return pos:line="12" pos:column="9">return <expr><literal type="boolean" pos:line="12" pos:column="16">false<pos:position pos:line="12" pos:column="21"/></literal></expr>;<pos:position pos:line="12" pos:column="22"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="15" pos:column="5">/* See if the request buffer starts with a non-whitespace HTTP request 'method'. */</comment>
    <decl_stmt><decl><type><name pos:line="16" pos:column="5">HttpRequestMethod<pos:position pos:line="16" pos:column="22"/></name></type> <name pos:line="16" pos:column="23">m<pos:position pos:line="16" pos:column="24"/></name></decl>;<pos:position pos:line="16" pos:column="25"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="17" pos:column="5">m<pos:position pos:line="17" pos:column="6"/></name><operator pos:line="17" pos:column="6">.<pos:position pos:line="17" pos:column="7"/></operator><name pos:line="17" pos:column="7">HttpRequestMethodXXX<pos:position pos:line="17" pos:column="27"/></name></name><argument_list pos:line="17" pos:column="27">(<argument><expr><name pos:line="17" pos:column="28">buf<pos:position pos:line="17" pos:column="31"/></name></expr></argument>)<pos:position pos:line="17" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="33"/></expr_stmt>
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name pos:line="18" pos:column="9">m<pos:position pos:line="18" pos:column="10"/></name> <operator pos:line="18" pos:column="11">==<pos:position pos:line="18" pos:column="13"/></operator> <name><name pos:line="18" pos:column="14">Http<pos:position pos:line="18" pos:column="18"/></name><operator pos:line="18" pos:column="18">::<pos:position pos:line="18" pos:column="20"/></operator><name pos:line="18" pos:column="20">METHOD_NONE<pos:position pos:line="18" pos:column="31"/></name></name></expr>)<pos:position pos:line="18" pos:column="32"/></condition><then pos:line="18" pos:column="32"> <block pos:line="18" pos:column="33">{
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">debugs<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><literal type="number" pos:line="19" pos:column="16">73<pos:position pos:line="19" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="20">3<pos:position pos:line="19" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="23">"HttpRequest::sanityCheckStartLine: did not find HTTP request method"<pos:position pos:line="19" pos:column="92"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="94"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="20" pos:column="9">*<pos:position pos:line="20" pos:column="10"/></operator><name pos:line="20" pos:column="10">error<pos:position pos:line="20" pos:column="15"/></name> <operator pos:line="20" pos:column="16">=<pos:position pos:line="20" pos:column="17"/></operator> <name><name pos:line="20" pos:column="18">Http<pos:position pos:line="20" pos:column="22"/></name><operator pos:line="20" pos:column="22">::<pos:position pos:line="20" pos:column="24"/></operator><name pos:line="20" pos:column="24">scInvalidHeader<pos:position pos:line="20" pos:column="39"/></name></name></expr>;<pos:position pos:line="20" pos:column="40"/></expr_stmt>
        <return pos:line="21" pos:column="9">return <expr><literal type="boolean" pos:line="21" pos:column="16">false<pos:position pos:line="21" pos:column="21"/></literal></expr>;<pos:position pos:line="21" pos:column="22"/></return>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>

    <return pos:line="24" pos:column="5">return <expr><literal type="boolean" pos:line="24" pos:column="12">true<pos:position pos:line="24" pos:column="16"/></literal></expr>;<pos:position pos:line="24" pos:column="17"/></return>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
