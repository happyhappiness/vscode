<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4515_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ACLUserData<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">parse<pos:position pos:line="2" pos:column="19"/></name></name><parameter_list pos:line="2" pos:column="19">()<pos:position pos:line="2" pos:column="21"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">28<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">2<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="19">"aclParseUserList: parsing user list"<pos:position pos:line="4" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="58"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">t<pos:position pos:line="5" pos:column="12"/></name> <init pos:line="5" pos:column="13">= <expr><name pos:line="5" pos:column="15">NULL<pos:position pos:line="5" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><operator pos:line="7" pos:column="9">(<pos:position pos:line="7" pos:column="10"/></operator><name pos:line="7" pos:column="10">t<pos:position pos:line="7" pos:column="11"/></name> <operator pos:line="7" pos:column="12">=<pos:position pos:line="7" pos:column="13"/></operator> <call><name><name pos:line="7" pos:column="14">ConfigParser<pos:position pos:line="7" pos:column="26"/></name><operator pos:line="7" pos:column="26">::<pos:position pos:line="7" pos:column="28"/></operator><name pos:line="7" pos:column="28">strtokFile<pos:position pos:line="7" pos:column="38"/></name></name><argument_list pos:line="7" pos:column="38">()<pos:position pos:line="7" pos:column="40"/></argument_list></call><operator pos:line="7" pos:column="40">)<pos:position pos:line="7" pos:column="41"/></operator></expr>)<pos:position pos:line="7" pos:column="42"/></condition><then pos:line="7" pos:column="42"> <block pos:line="7" pos:column="43">{
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">debugs<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><literal type="number" pos:line="8" pos:column="16">28<pos:position pos:line="8" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="20">5<pos:position pos:line="8" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="23">"aclParseUserList: First token is "<pos:position pos:line="8" pos:column="58"/></literal> <operator pos:line="8" pos:column="59">&lt;&lt;<pos:position pos:line="8" pos:column="67"/></operator> <name pos:line="8" pos:column="62">t<pos:position pos:line="8" pos:column="63"/></name></expr></argument>)<pos:position pos:line="8" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="65"/></expr_stmt>

        <if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><call><name pos:line="10" pos:column="13">strcmp<pos:position pos:line="10" pos:column="19"/></name><argument_list pos:line="10" pos:column="19">(<argument><expr><literal type="string" pos:line="10" pos:column="20">"-i"<pos:position pos:line="10" pos:column="24"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="26">t<pos:position pos:line="10" pos:column="27"/></name></expr></argument>)<pos:position pos:line="10" pos:column="28"/></argument_list></call> <operator pos:line="10" pos:column="29">==<pos:position pos:line="10" pos:column="31"/></operator> <literal type="number" pos:line="10" pos:column="32">0<pos:position pos:line="10" pos:column="33"/></literal></expr>)<pos:position pos:line="10" pos:column="34"/></condition><then pos:line="10" pos:column="34"> <block pos:line="10" pos:column="35">{
            <expr_stmt><expr><call><name pos:line="11" pos:column="13">debugs<pos:position pos:line="11" pos:column="19"/></name><argument_list pos:line="11" pos:column="19">(<argument><expr><literal type="number" pos:line="11" pos:column="20">28<pos:position pos:line="11" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="24">5<pos:position pos:line="11" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="27">"aclParseUserList: Going case-insensitive"<pos:position pos:line="11" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="71"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="12" pos:column="13">flags<pos:position pos:line="12" pos:column="18"/></name><operator pos:line="12" pos:column="18">.<pos:position pos:line="12" pos:column="19"/></operator><name pos:line="12" pos:column="19">case_insensitive<pos:position pos:line="12" pos:column="35"/></name></name> <operator pos:line="12" pos:column="36">=<pos:position pos:line="12" pos:column="37"/></operator> <literal type="boolean" pos:line="12" pos:column="38">true<pos:position pos:line="12" pos:column="42"/></literal></expr>;<pos:position pos:line="12" pos:column="43"/></expr_stmt>
        }<pos:position pos:line="13" pos:column="10"/></block></then> <elseif pos:line="13" pos:column="11">else <if pos:line="13" pos:column="16">if <condition pos:line="13" pos:column="19">(<expr><call><name pos:line="13" pos:column="20">strcmp<pos:position pos:line="13" pos:column="26"/></name><argument_list pos:line="13" pos:column="26">(<argument><expr><literal type="string" pos:line="13" pos:column="27">"REQUIRED"<pos:position pos:line="13" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="39">t<pos:position pos:line="13" pos:column="40"/></name></expr></argument>)<pos:position pos:line="13" pos:column="41"/></argument_list></call> <operator pos:line="13" pos:column="42">==<pos:position pos:line="13" pos:column="44"/></operator> <literal type="number" pos:line="13" pos:column="45">0<pos:position pos:line="13" pos:column="46"/></literal></expr>)<pos:position pos:line="13" pos:column="47"/></condition><then pos:line="13" pos:column="47"> <block pos:line="13" pos:column="48">{
            <expr_stmt><expr><call><name pos:line="14" pos:column="13">debugs<pos:position pos:line="14" pos:column="19"/></name><argument_list pos:line="14" pos:column="19">(<argument><expr><literal type="number" pos:line="14" pos:column="20">28<pos:position pos:line="14" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="24">5<pos:position pos:line="14" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="27">"aclParseUserList: REQUIRED-type enabled"<pos:position pos:line="14" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="70"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="15" pos:column="13">flags<pos:position pos:line="15" pos:column="18"/></name><operator pos:line="15" pos:column="18">.<pos:position pos:line="15" pos:column="19"/></operator><name pos:line="15" pos:column="19">required<pos:position pos:line="15" pos:column="27"/></name></name> <operator pos:line="15" pos:column="28">=<pos:position pos:line="15" pos:column="29"/></operator> <literal type="boolean" pos:line="15" pos:column="30">true<pos:position pos:line="15" pos:column="34"/></literal></expr>;<pos:position pos:line="15" pos:column="35"/></expr_stmt>
        }<pos:position pos:line="16" pos:column="10"/></block></then></if></elseif> <else pos:line="16" pos:column="11">else <block pos:line="16" pos:column="16">{
            <if pos:line="17" pos:column="13">if <condition pos:line="17" pos:column="16">(<expr><name><name pos:line="17" pos:column="17">flags<pos:position pos:line="17" pos:column="22"/></name><operator pos:line="17" pos:column="22">.<pos:position pos:line="17" pos:column="23"/></operator><name pos:line="17" pos:column="23">case_insensitive<pos:position pos:line="17" pos:column="39"/></name></name></expr>)<pos:position pos:line="17" pos:column="40"/></condition><then pos:line="17" pos:column="40">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="17">Tolower<pos:position pos:line="18" pos:column="24"/></name><argument_list pos:line="18" pos:column="24">(<argument><expr><name pos:line="18" pos:column="25">t<pos:position pos:line="18" pos:column="26"/></name></expr></argument>)<pos:position pos:line="18" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="28"/></expr_stmt></block></then></if>

            <expr_stmt><expr><name pos:line="20" pos:column="13">names<pos:position pos:line="20" pos:column="18"/></name> <operator pos:line="20" pos:column="19">=<pos:position pos:line="20" pos:column="20"/></operator> <call><name><name pos:line="20" pos:column="21">names<pos:position pos:line="20" pos:column="26"/></name><operator pos:line="20" pos:column="26">-&gt;<pos:position pos:line="20" pos:column="31"/></operator><name pos:line="20" pos:column="28">insert<pos:position pos:line="20" pos:column="34"/></name></name><argument_list pos:line="20" pos:column="34">(<argument><expr><call><name pos:line="20" pos:column="35">xstrdup<pos:position pos:line="20" pos:column="42"/></name><argument_list pos:line="20" pos:column="42">(<argument><expr><name pos:line="20" pos:column="43">t<pos:position pos:line="20" pos:column="44"/></name></expr></argument>)<pos:position pos:line="20" pos:column="45"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="20" pos:column="47">splaystrcmp<pos:position pos:line="20" pos:column="58"/></name></expr></argument>)<pos:position pos:line="20" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="60"/></expr_stmt>
        }<pos:position pos:line="21" pos:column="10"/></block></else></if>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="24" pos:column="5">debugs<pos:position pos:line="24" pos:column="11"/></name><argument_list pos:line="24" pos:column="11">(<argument><expr><literal type="number" pos:line="24" pos:column="12">28<pos:position pos:line="24" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="16">3<pos:position pos:line="24" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="19">"aclParseUserList: Case-insensitive-switch is "<pos:position pos:line="24" pos:column="66"/></literal> <operator pos:line="24" pos:column="67">&lt;&lt;<pos:position pos:line="24" pos:column="75"/></operator> <name><name pos:line="24" pos:column="70">flags<pos:position pos:line="24" pos:column="75"/></name><operator pos:line="24" pos:column="75">.<pos:position pos:line="24" pos:column="76"/></operator><name pos:line="24" pos:column="76">case_insensitive<pos:position pos:line="24" pos:column="92"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="94"/></expr_stmt>
    <comment type="block" pos:line="25" pos:column="5">/* we might inherit from a previous declaration */</comment>

    <expr_stmt><expr><call><name pos:line="27" pos:column="5">debugs<pos:position pos:line="27" pos:column="11"/></name><argument_list pos:line="27" pos:column="11">(<argument><expr><literal type="number" pos:line="27" pos:column="12">28<pos:position pos:line="27" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="16">4<pos:position pos:line="27" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="19">"aclParseUserList: parsing user list"<pos:position pos:line="27" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="58"/></expr_stmt>

    <while pos:line="29" pos:column="5">while <condition pos:line="29" pos:column="11">(<expr><operator pos:line="29" pos:column="12">(<pos:position pos:line="29" pos:column="13"/></operator><name pos:line="29" pos:column="13">t<pos:position pos:line="29" pos:column="14"/></name> <operator pos:line="29" pos:column="15">=<pos:position pos:line="29" pos:column="16"/></operator> <call><name><name pos:line="29" pos:column="17">ConfigParser<pos:position pos:line="29" pos:column="29"/></name><operator pos:line="29" pos:column="29">::<pos:position pos:line="29" pos:column="31"/></operator><name pos:line="29" pos:column="31">strtokFile<pos:position pos:line="29" pos:column="41"/></name></name><argument_list pos:line="29" pos:column="41">()<pos:position pos:line="29" pos:column="43"/></argument_list></call><operator pos:line="29" pos:column="43">)<pos:position pos:line="29" pos:column="44"/></operator></expr>)<pos:position pos:line="29" pos:column="45"/></condition> <block pos:line="29" pos:column="46">{
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">debugs<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><literal type="number" pos:line="30" pos:column="16">28<pos:position pos:line="30" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="20">6<pos:position pos:line="30" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="23">"aclParseUserList: Got token: "<pos:position pos:line="30" pos:column="54"/></literal> <operator pos:line="30" pos:column="55">&lt;&lt;<pos:position pos:line="30" pos:column="63"/></operator> <name pos:line="30" pos:column="58">t<pos:position pos:line="30" pos:column="59"/></name></expr></argument>)<pos:position pos:line="30" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="61"/></expr_stmt>

        <if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name><name pos:line="32" pos:column="13">flags<pos:position pos:line="32" pos:column="18"/></name><operator pos:line="32" pos:column="18">.<pos:position pos:line="32" pos:column="19"/></operator><name pos:line="32" pos:column="19">case_insensitive<pos:position pos:line="32" pos:column="35"/></name></name></expr>)<pos:position pos:line="32" pos:column="36"/></condition><then pos:line="32" pos:column="36">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="33" pos:column="13">Tolower<pos:position pos:line="33" pos:column="20"/></name><argument_list pos:line="33" pos:column="20">(<argument><expr><name pos:line="33" pos:column="21">t<pos:position pos:line="33" pos:column="22"/></name></expr></argument>)<pos:position pos:line="33" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="24"/></expr_stmt></block></then></if>

        <expr_stmt><expr><name pos:line="35" pos:column="9">names<pos:position pos:line="35" pos:column="14"/></name> <operator pos:line="35" pos:column="15">=<pos:position pos:line="35" pos:column="16"/></operator> <call><name><name pos:line="35" pos:column="17">names<pos:position pos:line="35" pos:column="22"/></name><operator pos:line="35" pos:column="22">-&gt;<pos:position pos:line="35" pos:column="27"/></operator><name pos:line="35" pos:column="24">insert<pos:position pos:line="35" pos:column="30"/></name></name><argument_list pos:line="35" pos:column="30">(<argument><expr><call><name pos:line="35" pos:column="31">xstrdup<pos:position pos:line="35" pos:column="38"/></name><argument_list pos:line="35" pos:column="38">(<argument><expr><name pos:line="35" pos:column="39">t<pos:position pos:line="35" pos:column="40"/></name></expr></argument>)<pos:position pos:line="35" pos:column="41"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="35" pos:column="43">splaystrcmp<pos:position pos:line="35" pos:column="54"/></name></expr></argument>)<pos:position pos:line="35" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="56"/></expr_stmt>
    }<pos:position pos:line="36" pos:column="6"/></block></while>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
