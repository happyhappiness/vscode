<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7458_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Security<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">HandshakeParser<pos:position pos:line="2" pos:column="26"/></name><operator pos:line="2" pos:column="26">::<pos:position pos:line="2" pos:column="28"/></operator><name pos:line="2" pos:column="28">parseHello<pos:position pos:line="2" pos:column="38"/></name></name><parameter_list pos:line="2" pos:column="38">(<parameter><decl><type><specifier pos:line="2" pos:column="39">const<pos:position pos:line="2" pos:column="44"/></specifier> <name pos:line="2" pos:column="45">SBuf<pos:position pos:line="2" pos:column="49"/></name> <modifier pos:line="2" pos:column="50">&amp;<pos:position pos:line="2" pos:column="55"/></modifier></type><name pos:line="2" pos:column="51">data<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="56"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <try pos:line="4" pos:column="5">try <block pos:line="4" pos:column="9">{
        <if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><operator pos:line="5" pos:column="13">!<pos:position pos:line="5" pos:column="14"/></operator><call><name><name pos:line="5" pos:column="14">expectingModernRecords<pos:position pos:line="5" pos:column="36"/></name><operator pos:line="5" pos:column="36">.<pos:position pos:line="5" pos:column="37"/></operator><name pos:line="5" pos:column="37">configured<pos:position pos:line="5" pos:column="47"/></name></name><argument_list pos:line="5" pos:column="47">()<pos:position pos:line="5" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="50"/></condition><then pos:line="5" pos:column="50">
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="6" pos:column="13">expectingModernRecords<pos:position pos:line="6" pos:column="35"/></name><operator pos:line="6" pos:column="35">.<pos:position pos:line="6" pos:column="36"/></operator><name pos:line="6" pos:column="36">configure<pos:position pos:line="6" pos:column="45"/></name></name><argument_list pos:line="6" pos:column="45">(<argument><expr><operator pos:line="6" pos:column="46">!<pos:position pos:line="6" pos:column="47"/></operator><call><name pos:line="6" pos:column="47">isSslv2Record<pos:position pos:line="6" pos:column="60"/></name><argument_list pos:line="6" pos:column="60">(<argument><expr><name pos:line="6" pos:column="61">data<pos:position pos:line="6" pos:column="65"/></name></expr></argument>)<pos:position pos:line="6" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="68"/></expr_stmt></block></then></if>

        <comment type="line" pos:line="8" pos:column="9">// data contains everything read so far, but we may read more later</comment>
        <expr_stmt><expr><call><name><name pos:line="9" pos:column="9">tkRecords<pos:position pos:line="9" pos:column="18"/></name><operator pos:line="9" pos:column="18">.<pos:position pos:line="9" pos:column="19"/></operator><name pos:line="9" pos:column="19">reinput<pos:position pos:line="9" pos:column="26"/></name></name><argument_list pos:line="9" pos:column="26">(<argument><expr><name pos:line="9" pos:column="27">data<pos:position pos:line="9" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="9" pos:column="33">true<pos:position pos:line="9" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="10" pos:column="9">tkRecords<pos:position pos:line="10" pos:column="18"/></name><operator pos:line="10" pos:column="18">.<pos:position pos:line="10" pos:column="19"/></operator><name pos:line="10" pos:column="19">rollback<pos:position pos:line="10" pos:column="27"/></name></name><argument_list pos:line="10" pos:column="27">()<pos:position pos:line="10" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="30"/></expr_stmt>
        <while pos:line="11" pos:column="9">while <condition pos:line="11" pos:column="15">(<expr><operator pos:line="11" pos:column="16">!<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="17">done<pos:position pos:line="11" pos:column="21"/></name></expr>)<pos:position pos:line="11" pos:column="22"/></condition>
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="13">parseRecord<pos:position pos:line="12" pos:column="24"/></name><argument_list pos:line="12" pos:column="24">()<pos:position pos:line="12" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="27"/></expr_stmt></block></while>
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">debugs<pos:position pos:line="13" pos:column="15"/></name><argument_list pos:line="13" pos:column="15">(<argument><expr><literal type="number" pos:line="13" pos:column="16">83<pos:position pos:line="13" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="20">7<pos:position pos:line="13" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="23">"success; got: "<pos:position pos:line="13" pos:column="39"/></literal> <operator pos:line="13" pos:column="40">&lt;&lt;<pos:position pos:line="13" pos:column="48"/></operator> <name pos:line="13" pos:column="43">done<pos:position pos:line="13" pos:column="47"/></name></expr></argument>)<pos:position pos:line="13" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="49"/></expr_stmt>
        <comment type="line" pos:line="14" pos:column="9">// we are done; tkRecords may have leftovers we are not interested in</comment>
        <return pos:line="15" pos:column="9">return <expr><literal type="boolean" pos:line="15" pos:column="16">true<pos:position pos:line="15" pos:column="20"/></literal></expr>;<pos:position pos:line="15" pos:column="21"/></return>
    }<pos:position pos:line="16" pos:column="6"/></block>
    <catch pos:line="17" pos:column="5">catch <parameter_list pos:line="17" pos:column="11">(<parameter><decl><type><specifier pos:line="17" pos:column="12">const<pos:position pos:line="17" pos:column="17"/></specifier> <name><name pos:line="17" pos:column="18">Parser<pos:position pos:line="17" pos:column="24"/></name><operator pos:line="17" pos:column="24">::<pos:position pos:line="17" pos:column="26"/></operator><name pos:line="17" pos:column="26">BinaryTokenizer<pos:position pos:line="17" pos:column="41"/></name><operator pos:line="17" pos:column="41">::<pos:position pos:line="17" pos:column="43"/></operator><name pos:line="17" pos:column="43">InsufficientInput<pos:position pos:line="17" pos:column="60"/></name></name> <modifier pos:line="17" pos:column="61">&amp;<pos:position pos:line="17" pos:column="66"/></modifier></type></decl></parameter>)<pos:position pos:line="17" pos:column="63"/></parameter_list> <block pos:line="17" pos:column="64">{
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">debugs<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><literal type="number" pos:line="18" pos:column="16">83<pos:position pos:line="18" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="20">5<pos:position pos:line="18" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="23">"need more data"<pos:position pos:line="18" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="41"/></expr_stmt>
        <return pos:line="19" pos:column="9">return <expr><literal type="boolean" pos:line="19" pos:column="16">false<pos:position pos:line="19" pos:column="21"/></literal></expr>;<pos:position pos:line="19" pos:column="22"/></return>
    }<pos:position pos:line="20" pos:column="6"/></block></catch></try>
    <return pos:line="21" pos:column="5">return <expr><literal type="boolean" pos:line="21" pos:column="12">false<pos:position pos:line="21" pos:column="17"/></literal></expr>;<pos:position pos:line="21" pos:column="18"/></return> <comment type="line" pos:line="21" pos:column="19">// unreached</comment>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
