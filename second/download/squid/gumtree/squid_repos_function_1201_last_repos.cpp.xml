<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1201_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">SquidMainSafe<pos:position pos:line="2" pos:column="14"/></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><name pos:line="2" pos:column="15">int<pos:position pos:line="2" pos:column="18"/></name></type> <name pos:line="2" pos:column="19">argc<pos:position pos:line="2" pos:column="23"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="25">char<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier><modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type><name pos:line="2" pos:column="32">argv<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="37"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><operator pos:line="4" pos:column="5">(<pos:position pos:line="4" pos:column="6"/></operator><name pos:line="4" pos:column="6">void<pos:position pos:line="4" pos:column="10"/></name><operator pos:line="4" pos:column="10">)<pos:position pos:line="4" pos:column="11"/></operator><call><name><name pos:line="4" pos:column="11">std<pos:position pos:line="4" pos:column="14"/></name><operator pos:line="4" pos:column="14">::<pos:position pos:line="4" pos:column="16"/></operator><name pos:line="4" pos:column="16">set_terminate<pos:position pos:line="4" pos:column="29"/></name></name><argument_list pos:line="4" pos:column="29">(<argument><expr><operator pos:line="4" pos:column="30">&amp;<pos:position pos:line="4" pos:column="35"/></operator><name pos:line="4" pos:column="31">OnTerminate<pos:position pos:line="4" pos:column="42"/></name></expr></argument>)<pos:position pos:line="4" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="44"/></expr_stmt>
    <comment type="line" pos:line="5" pos:column="5">// XXX: This top-level catch works great for startup, but, during runtime,</comment>
    <comment type="line" pos:line="6" pos:column="5">// it erases valuable stack info. TODO: Let stack-preserving OnTerminate()</comment>
    <comment type="line" pos:line="7" pos:column="5">// handle FATAL runtime errors by splitting main code into protected</comment>
    <comment type="line" pos:line="8" pos:column="5">// startup, unprotected runtime, and protected termination sections!</comment>
    <try pos:line="9" pos:column="5">try <block pos:line="9" pos:column="9">{
        <return pos:line="10" pos:column="9">return <expr><call><name pos:line="10" pos:column="16">SquidMain<pos:position pos:line="10" pos:column="25"/></name><argument_list pos:line="10" pos:column="25">(<argument><expr><name pos:line="10" pos:column="26">argc<pos:position pos:line="10" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="32">argv<pos:position pos:line="10" pos:column="36"/></name></expr></argument>)<pos:position pos:line="10" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="38"/></return>
    }<pos:position pos:line="11" pos:column="6"/></block> <catch pos:line="11" pos:column="7">catch <parameter_list pos:line="11" pos:column="13">(<parameter><decl><type><modifier pos:line="11" pos:column="14">...<pos:position pos:line="11" pos:column="17"/></modifier></type></decl></parameter>)<pos:position pos:line="11" pos:column="18"/></parameter_list> <block pos:line="11" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">debugs<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><literal type="number" pos:line="12" pos:column="16">1<pos:position pos:line="12" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="19">DBG_CRITICAL<pos:position pos:line="12" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="33">"FATAL: "<pos:position pos:line="12" pos:column="42"/></literal> <operator pos:line="12" pos:column="43">&lt;&lt;<pos:position pos:line="12" pos:column="51"/></operator> <name pos:line="12" pos:column="46">CurrentException<pos:position pos:line="12" pos:column="62"/></name></expr></argument>)<pos:position pos:line="12" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="64"/></expr_stmt>
    }<pos:position pos:line="13" pos:column="6"/></block></catch></try>
    <return pos:line="14" pos:column="5">return <expr><operator pos:line="14" pos:column="12">-<pos:position pos:line="14" pos:column="13"/></operator><literal type="number" pos:line="14" pos:column="13">1<pos:position pos:line="14" pos:column="14"/></literal></expr>;<pos:position pos:line="14" pos:column="15"/></return> <comment type="line" pos:line="14" pos:column="16">// TODO: return EXIT_FAILURE instead</comment>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
