<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_46_squid-3.4.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">client_comm_connect<pos:position pos:line="2" pos:column="20"/></name><parameter_list pos:line="2" pos:column="20">(<parameter><decl><type><name pos:line="2" pos:column="21">int<pos:position pos:line="2" pos:column="24"/></name></type> <name pos:line="2" pos:column="25">sock<pos:position pos:line="2" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="31">const<pos:position pos:line="2" pos:column="36"/></specifier> <name><name pos:line="2" pos:column="37">Ip<pos:position pos:line="2" pos:column="39"/></name><operator pos:line="2" pos:column="39">::<pos:position pos:line="2" pos:column="41"/></operator><name pos:line="2" pos:column="41">Address<pos:position pos:line="2" pos:column="48"/></name></name> <modifier pos:line="2" pos:column="49">&amp;<pos:position pos:line="2" pos:column="54"/></modifier></type><name pos:line="2" pos:column="50">addr<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="56">struct<pos:position pos:line="2" pos:column="62"/></name> <name pos:line="2" pos:column="63">timeval<pos:position pos:line="2" pos:column="70"/></name></name> <modifier pos:line="2" pos:column="71">*<pos:position pos:line="2" pos:column="72"/></modifier></type><name pos:line="2" pos:column="72">tvp<pos:position pos:line="2" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="76"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/* Set up the destination socket address for message to send to. */</comment>
    <decl_stmt><decl><specifier pos:line="5" pos:column="5">static<pos:position pos:line="5" pos:column="11"/></specifier> <type><name><name pos:line="5" pos:column="12">struct<pos:position pos:line="5" pos:column="18"/></name> <name pos:line="5" pos:column="19">addrinfo<pos:position pos:line="5" pos:column="27"/></name></name> <modifier pos:line="5" pos:column="28">*<pos:position pos:line="5" pos:column="29"/></modifier></type><name pos:line="5" pos:column="29">AI<pos:position pos:line="5" pos:column="31"/></name> <init pos:line="5" pos:column="32">= <expr><name pos:line="5" pos:column="34">NULL<pos:position pos:line="5" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="39"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="6" pos:column="5">addr<pos:position pos:line="6" pos:column="9"/></name><operator pos:line="6" pos:column="9">.<pos:position pos:line="6" pos:column="10"/></operator><name pos:line="6" pos:column="10">getAddrInfo<pos:position pos:line="6" pos:column="21"/></name></name><argument_list pos:line="6" pos:column="21">(<argument><expr><name pos:line="6" pos:column="22">AI<pos:position pos:line="6" pos:column="24"/></name></expr></argument>)<pos:position pos:line="6" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="26"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">res<pos:position pos:line="7" pos:column="12"/></name> <init pos:line="7" pos:column="13">= <expr><call><name pos:line="7" pos:column="15">connect<pos:position pos:line="7" pos:column="22"/></name><argument_list pos:line="7" pos:column="22">(<argument><expr><name pos:line="7" pos:column="23">sock<pos:position pos:line="7" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="7" pos:column="29">AI<pos:position pos:line="7" pos:column="31"/></name><operator pos:line="7" pos:column="31">-&gt;<pos:position pos:line="7" pos:column="36"/></operator><name pos:line="7" pos:column="33">ai_addr<pos:position pos:line="7" pos:column="40"/></name></name></expr></argument>, <argument><expr><name><name pos:line="7" pos:column="42">AI<pos:position pos:line="7" pos:column="44"/></name><operator pos:line="7" pos:column="44">-&gt;<pos:position pos:line="7" pos:column="49"/></operator><name pos:line="7" pos:column="46">ai_addrlen<pos:position pos:line="7" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="58"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="8" pos:column="5">Ip<pos:position pos:line="8" pos:column="7"/></name><operator pos:line="8" pos:column="7">::<pos:position pos:line="8" pos:column="9"/></operator><name pos:line="8" pos:column="9">Address<pos:position pos:line="8" pos:column="16"/></name><operator pos:line="8" pos:column="16">::<pos:position pos:line="8" pos:column="18"/></operator><name pos:line="8" pos:column="18">FreeAddrInfo<pos:position pos:line="8" pos:column="30"/></name></name><argument_list pos:line="8" pos:column="30">(<argument><expr><name pos:line="8" pos:column="31">AI<pos:position pos:line="8" pos:column="33"/></name></expr></argument>)<pos:position pos:line="8" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="35"/></expr_stmt>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">tvp<pos:position pos:line="9" pos:column="12"/></name></expr>)<pos:position pos:line="9" pos:column="13"/></condition><then pos:line="9" pos:column="13">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="10" pos:column="9">(<pos:position pos:line="10" pos:column="10"/></operator><name pos:line="10" pos:column="10">void<pos:position pos:line="10" pos:column="14"/></name><operator pos:line="10" pos:column="14">)<pos:position pos:line="10" pos:column="15"/></operator> <call><name pos:line="10" pos:column="16">Now<pos:position pos:line="10" pos:column="19"/></name><argument_list pos:line="10" pos:column="19">(<argument><expr><name pos:line="10" pos:column="20">tvp<pos:position pos:line="10" pos:column="23"/></name></expr></argument>)<pos:position pos:line="10" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="25"/></expr_stmt></block></then></if>
    <return pos:line="11" pos:column="5">return <expr><name pos:line="11" pos:column="12">res<pos:position pos:line="11" pos:column="15"/></name></expr>;<pos:position pos:line="11" pos:column="16"/></return>
}<pos:position pos:line="12" pos:column="2"/></block></function></unit>
