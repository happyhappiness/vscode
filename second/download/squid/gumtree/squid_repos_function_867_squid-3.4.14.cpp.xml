<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_867_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">commHandleRead<pos:position pos:line="2" pos:column="15"/></name><parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><name pos:line="2" pos:column="16">int<pos:position pos:line="2" pos:column="19"/></name></type> <name pos:line="2" pos:column="20">fd<pos:position pos:line="2" pos:column="22"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="24">void<pos:position pos:line="2" pos:column="28"/></name> <modifier pos:line="2" pos:column="29">*<pos:position pos:line="2" pos:column="30"/></modifier></type><name pos:line="2" pos:column="30">data<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="35"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">Comm<pos:position pos:line="4" pos:column="9"/></name><operator pos:line="4" pos:column="9">::<pos:position pos:line="4" pos:column="11"/></operator><name pos:line="4" pos:column="11">IoCallback<pos:position pos:line="4" pos:column="21"/></name></name> <modifier pos:line="4" pos:column="22">*<pos:position pos:line="4" pos:column="23"/></modifier></type><name pos:line="4" pos:column="23">ccb<pos:position pos:line="4" pos:column="26"/></name> <init pos:line="4" pos:column="27">= <expr><operator pos:line="4" pos:column="29">(<pos:position pos:line="4" pos:column="30"/></operator><name><name pos:line="4" pos:column="30">Comm<pos:position pos:line="4" pos:column="34"/></name><operator pos:line="4" pos:column="34">::<pos:position pos:line="4" pos:column="36"/></operator><name pos:line="4" pos:column="36">IoCallback<pos:position pos:line="4" pos:column="46"/></name></name> <operator pos:line="4" pos:column="47">*<pos:position pos:line="4" pos:column="48"/></operator><operator pos:line="4" pos:column="48">)<pos:position pos:line="4" pos:column="49"/></operator> <name pos:line="4" pos:column="50">data<pos:position pos:line="4" pos:column="54"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="55"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><name pos:line="6" pos:column="12">data<pos:position pos:line="6" pos:column="16"/></name> <operator pos:line="6" pos:column="17">==<pos:position pos:line="6" pos:column="19"/></operator> <call><name pos:line="6" pos:column="20">COMMIO_FD_READCB<pos:position pos:line="6" pos:column="36"/></name><argument_list pos:line="6" pos:column="36">(<argument><expr><name pos:line="6" pos:column="37">fd<pos:position pos:line="6" pos:column="39"/></name></expr></argument>)<pos:position pos:line="6" pos:column="40"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><call><name><name pos:line="7" pos:column="12">ccb<pos:position pos:line="7" pos:column="15"/></name><operator pos:line="7" pos:column="15">-&gt;<pos:position pos:line="7" pos:column="20"/></operator><name pos:line="7" pos:column="17">active<pos:position pos:line="7" pos:column="23"/></name></name><argument_list pos:line="7" pos:column="23">()<pos:position pos:line="7" pos:column="25"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="27"/></expr_stmt>
    <comment type="block" pos:line="8" pos:column="5">/* Attempt a read */</comment>
    <expr_stmt><expr><operator pos:line="9" pos:column="5">++<pos:position pos:line="9" pos:column="7"/></operator> <name><name pos:line="9" pos:column="8">statCounter<pos:position pos:line="9" pos:column="19"/></name><operator pos:line="9" pos:column="19">.<pos:position pos:line="9" pos:column="20"/></operator><name pos:line="9" pos:column="20">syscalls<pos:position pos:line="9" pos:column="28"/></name><operator pos:line="9" pos:column="28">.<pos:position pos:line="9" pos:column="29"/></operator><name pos:line="9" pos:column="29">sock<pos:position pos:line="9" pos:column="33"/></name><operator pos:line="9" pos:column="33">.<pos:position pos:line="9" pos:column="34"/></operator><name pos:line="9" pos:column="34">reads<pos:position pos:line="9" pos:column="39"/></name></name></expr>;<pos:position pos:line="9" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name pos:line="10" pos:column="5">errno<pos:position pos:line="10" pos:column="10"/></name> <operator pos:line="10" pos:column="11">=<pos:position pos:line="10" pos:column="12"/></operator> <literal type="number" pos:line="10" pos:column="13">0<pos:position pos:line="10" pos:column="14"/></literal></expr>;<pos:position pos:line="10" pos:column="15"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">int<pos:position pos:line="11" pos:column="8"/></name></type> <name pos:line="11" pos:column="9">retval<pos:position pos:line="11" pos:column="15"/></name></decl>;<pos:position pos:line="11" pos:column="16"/></decl_stmt>
    <expr_stmt><expr><name pos:line="12" pos:column="5">retval<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">=<pos:position pos:line="12" pos:column="13"/></operator> <call><name pos:line="12" pos:column="14">FD_READ_METHOD<pos:position pos:line="12" pos:column="28"/></name><argument_list pos:line="12" pos:column="28">(<argument><expr><name pos:line="12" pos:column="29">fd<pos:position pos:line="12" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="33">ccb<pos:position pos:line="12" pos:column="36"/></name><operator pos:line="12" pos:column="36">-&gt;<pos:position pos:line="12" pos:column="41"/></operator><name pos:line="12" pos:column="38">buf<pos:position pos:line="12" pos:column="41"/></name></name></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="43">ccb<pos:position pos:line="12" pos:column="46"/></name><operator pos:line="12" pos:column="46">-&gt;<pos:position pos:line="12" pos:column="51"/></operator><name pos:line="12" pos:column="48">size<pos:position pos:line="12" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">debugs<pos:position pos:line="13" pos:column="11"/></name><argument_list pos:line="13" pos:column="11">(<argument><expr><literal type="number" pos:line="13" pos:column="12">5<pos:position pos:line="13" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="15">3<pos:position pos:line="13" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="18">"comm_read_try: FD "<pos:position pos:line="13" pos:column="38"/></literal> <operator pos:line="13" pos:column="39">&lt;&lt;<pos:position pos:line="13" pos:column="47"/></operator> <name pos:line="13" pos:column="42">fd<pos:position pos:line="13" pos:column="44"/></name> <operator pos:line="13" pos:column="45">&lt;&lt;<pos:position pos:line="13" pos:column="53"/></operator> <literal type="string" pos:line="13" pos:column="48">", size "<pos:position pos:line="13" pos:column="57"/></literal> <operator pos:line="13" pos:column="58">&lt;&lt;<pos:position pos:line="13" pos:column="66"/></operator> <name><name pos:line="13" pos:column="61">ccb<pos:position pos:line="13" pos:column="64"/></name><operator pos:line="13" pos:column="64">-&gt;<pos:position pos:line="13" pos:column="69"/></operator><name pos:line="13" pos:column="66">size<pos:position pos:line="13" pos:column="70"/></name></name> <operator pos:line="13" pos:column="71">&lt;&lt;<pos:position pos:line="13" pos:column="79"/></operator> <literal type="string" pos:line="13" pos:column="74">", retval "<pos:position pos:line="13" pos:column="85"/></literal> <operator pos:line="13" pos:column="86">&lt;&lt;<pos:position pos:line="13" pos:column="94"/></operator> <name pos:line="13" pos:column="89">retval<pos:position pos:line="13" pos:column="95"/></name> <operator pos:line="13" pos:column="96">&lt;&lt;<pos:position pos:line="13" pos:column="104"/></operator> <literal type="string" pos:line="13" pos:column="99">", errno "<pos:position pos:line="13" pos:column="109"/></literal> <operator pos:line="13" pos:column="110">&lt;&lt;<pos:position pos:line="13" pos:column="118"/></operator> <name pos:line="13" pos:column="113">errno<pos:position pos:line="13" pos:column="118"/></name></expr></argument>)<pos:position pos:line="13" pos:column="119"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="120"/></expr_stmt>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">retval<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">&lt;<pos:position pos:line="15" pos:column="20"/></operator> <literal type="number" pos:line="15" pos:column="18">0<pos:position pos:line="15" pos:column="19"/></literal> <operator pos:line="15" pos:column="20">&amp;&amp;<pos:position pos:line="15" pos:column="30"/></operator> <operator pos:line="15" pos:column="23">!<pos:position pos:line="15" pos:column="24"/></operator><call><name pos:line="15" pos:column="24">ignoreErrno<pos:position pos:line="15" pos:column="35"/></name><argument_list pos:line="15" pos:column="35">(<argument><expr><name pos:line="15" pos:column="36">errno<pos:position pos:line="15" pos:column="41"/></name></expr></argument>)<pos:position pos:line="15" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="43"/></condition><then pos:line="15" pos:column="43"> <block pos:line="15" pos:column="44">{
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">debugs<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><literal type="number" pos:line="16" pos:column="16">5<pos:position pos:line="16" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="19">3<pos:position pos:line="16" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="22">"comm_read_try: scheduling COMM_ERROR"<pos:position pos:line="16" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="62"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="17" pos:column="9">ccb<pos:position pos:line="17" pos:column="12"/></name><operator pos:line="17" pos:column="12">-&gt;<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="14">offset<pos:position pos:line="17" pos:column="20"/></name></name> <operator pos:line="17" pos:column="21">=<pos:position pos:line="17" pos:column="22"/></operator> <literal type="number" pos:line="17" pos:column="23">0<pos:position pos:line="17" pos:column="24"/></literal></expr>;<pos:position pos:line="17" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="18" pos:column="9">ccb<pos:position pos:line="18" pos:column="12"/></name><operator pos:line="18" pos:column="12">-&gt;<pos:position pos:line="18" pos:column="17"/></operator><name pos:line="18" pos:column="14">finish<pos:position pos:line="18" pos:column="20"/></name></name><argument_list pos:line="18" pos:column="20">(<argument><expr><name pos:line="18" pos:column="21">COMM_ERROR<pos:position pos:line="18" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="33">errno<pos:position pos:line="18" pos:column="38"/></name></expr></argument>)<pos:position pos:line="18" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="40"/></expr_stmt>
        <return pos:line="19" pos:column="9">return;<pos:position pos:line="19" pos:column="16"/></return>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if><empty_stmt pos:line="20" pos:column="6">;<pos:position pos:line="20" pos:column="7"/></empty_stmt>

    <comment type="block" pos:line="22" pos:column="5">/* See if we read anything */</comment>
    <comment type="block" pos:line="23" pos:column="5">/* Note - read 0 == socket EOF, which is a valid read */</comment>
    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><name pos:line="24" pos:column="9">retval<pos:position pos:line="24" pos:column="15"/></name> <operator pos:line="24" pos:column="16">&gt;=<pos:position pos:line="24" pos:column="21"/></operator> <literal type="number" pos:line="24" pos:column="19">0<pos:position pos:line="24" pos:column="20"/></literal></expr>)<pos:position pos:line="24" pos:column="21"/></condition><then pos:line="24" pos:column="21"> <block pos:line="24" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">fd_bytes<pos:position pos:line="25" pos:column="17"/></name><argument_list pos:line="25" pos:column="17">(<argument><expr><name pos:line="25" pos:column="18">fd<pos:position pos:line="25" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="22">retval<pos:position pos:line="25" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="30">FD_READ<pos:position pos:line="25" pos:column="37"/></name></expr></argument>)<pos:position pos:line="25" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="26" pos:column="9">ccb<pos:position pos:line="26" pos:column="12"/></name><operator pos:line="26" pos:column="12">-&gt;<pos:position pos:line="26" pos:column="17"/></operator><name pos:line="26" pos:column="14">offset<pos:position pos:line="26" pos:column="20"/></name></name> <operator pos:line="26" pos:column="21">=<pos:position pos:line="26" pos:column="22"/></operator> <name pos:line="26" pos:column="23">retval<pos:position pos:line="26" pos:column="29"/></name></expr>;<pos:position pos:line="26" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="27" pos:column="9">ccb<pos:position pos:line="27" pos:column="12"/></name><operator pos:line="27" pos:column="12">-&gt;<pos:position pos:line="27" pos:column="17"/></operator><name pos:line="27" pos:column="14">finish<pos:position pos:line="27" pos:column="20"/></name></name><argument_list pos:line="27" pos:column="20">(<argument><expr><name pos:line="27" pos:column="21">COMM_OK<pos:position pos:line="27" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="30">errno<pos:position pos:line="27" pos:column="35"/></name></expr></argument>)<pos:position pos:line="27" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="37"/></expr_stmt>
        <return pos:line="28" pos:column="9">return;<pos:position pos:line="28" pos:column="16"/></return>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="31" pos:column="5">/* Nope, register for some more IO */</comment>
    <expr_stmt><expr><call><name><name pos:line="32" pos:column="5">Comm<pos:position pos:line="32" pos:column="9"/></name><operator pos:line="32" pos:column="9">::<pos:position pos:line="32" pos:column="11"/></operator><name pos:line="32" pos:column="11">SetSelect<pos:position pos:line="32" pos:column="20"/></name></name><argument_list pos:line="32" pos:column="20">(<argument><expr><name pos:line="32" pos:column="21">fd<pos:position pos:line="32" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="25">COMM_SELECT_READ<pos:position pos:line="32" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="43">commHandleRead<pos:position pos:line="32" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="59">data<pos:position pos:line="32" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="65">0<pos:position pos:line="32" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="68"/></expr_stmt>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
