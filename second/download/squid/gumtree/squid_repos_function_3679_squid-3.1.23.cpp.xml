<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3679_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">IpAddress<pos:position pos:line="1" pos:column="15"/></name><operator pos:line="1" pos:column="15">::<pos:position pos:line="1" pos:column="17"/></operator><name pos:line="1" pos:column="17">GetSockAddr<pos:position pos:line="1" pos:column="28"/></name></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name><name pos:line="1" pos:column="29">struct<pos:position pos:line="1" pos:column="35"/></name> <name pos:line="1" pos:column="36">sockaddr_storage<pos:position pos:line="1" pos:column="52"/></name></name> <modifier pos:line="1" pos:column="53">&amp;<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="54">addr<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="60">const<pos:position pos:line="1" pos:column="65"/></specifier> <name pos:line="1" pos:column="66">int<pos:position pos:line="1" pos:column="69"/></name></type> <name pos:line="1" pos:column="70">family<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="77"/></parameter_list> <specifier pos:line="1" pos:column="78">const<pos:position pos:line="1" pos:column="83"/></specifier>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="3" pos:column="5">struct<pos:position pos:line="3" pos:column="11"/></name> <name pos:line="3" pos:column="12">sockaddr_in<pos:position pos:line="3" pos:column="23"/></name></name> <modifier pos:line="3" pos:column="24">*<pos:position pos:line="3" pos:column="25"/></modifier></type><name pos:line="3" pos:column="25">sin<pos:position pos:line="3" pos:column="28"/></name> <init pos:line="3" pos:column="29">= <expr><name pos:line="3" pos:column="31">NULL<pos:position pos:line="3" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="36"/></decl_stmt>

    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">( <expr><name pos:line="5" pos:column="10">family<pos:position pos:line="5" pos:column="16"/></name> <operator pos:line="5" pos:column="17">==<pos:position pos:line="5" pos:column="19"/></operator> <name pos:line="5" pos:column="20">AF_INET<pos:position pos:line="5" pos:column="27"/></name> <operator pos:line="5" pos:column="28">&amp;&amp;<pos:position pos:line="5" pos:column="38"/></operator> <operator pos:line="5" pos:column="31">!<pos:position pos:line="5" pos:column="32"/></operator><call><name pos:line="5" pos:column="32">IsIPv4<pos:position pos:line="5" pos:column="38"/></name><argument_list pos:line="5" pos:column="38">()<pos:position pos:line="5" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="41"/></condition><then pos:line="5" pos:column="41"> <block pos:line="5" pos:column="42">{
        <comment type="line" pos:line="6" pos:column="9">// FIXME INET6: caller using the wrong socket type!</comment>
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">debugs<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><literal type="number" pos:line="7" pos:column="16">14<pos:position pos:line="7" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="20">DBG_CRITICAL<pos:position pos:line="7" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="34">HERE<pos:position pos:line="7" pos:column="38"/></name> <operator pos:line="7" pos:column="39">&lt;&lt;<pos:position pos:line="7" pos:column="47"/></operator> <literal type="string" pos:line="7" pos:column="42">"IpAddress::GetSockAddr : Cannot convert non-IPv4 to IPv4. from "<pos:position pos:line="7" pos:column="107"/></literal> <operator pos:line="7" pos:column="108">&lt;&lt;<pos:position pos:line="7" pos:column="116"/></operator> <operator pos:line="7" pos:column="111">*<pos:position pos:line="7" pos:column="112"/></operator><name pos:line="7" pos:column="112">this<pos:position pos:line="7" pos:column="116"/></name></expr></argument>)<pos:position pos:line="7" pos:column="117"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="118"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">assert<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><literal type="boolean" pos:line="8" pos:column="16">false<pos:position pos:line="8" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">( <expr><name pos:line="11" pos:column="10">family<pos:position pos:line="11" pos:column="16"/></name> <operator pos:line="11" pos:column="17">==<pos:position pos:line="11" pos:column="19"/></operator> <name pos:line="11" pos:column="20">AF_INET6<pos:position pos:line="11" pos:column="28"/></name> <operator pos:line="11" pos:column="29">||<pos:position pos:line="11" pos:column="31"/></operator> <operator pos:line="11" pos:column="32">(<pos:position pos:line="11" pos:column="33"/></operator><name pos:line="11" pos:column="33">family<pos:position pos:line="11" pos:column="39"/></name> <operator pos:line="11" pos:column="40">==<pos:position pos:line="11" pos:column="42"/></operator> <name pos:line="11" pos:column="43">AF_UNSPEC<pos:position pos:line="11" pos:column="52"/></name> <operator pos:line="11" pos:column="53">&amp;&amp;<pos:position pos:line="11" pos:column="63"/></operator> <call><name pos:line="11" pos:column="56">IsIPv6<pos:position pos:line="11" pos:column="62"/></name><argument_list pos:line="11" pos:column="62">()<pos:position pos:line="11" pos:column="64"/></argument_list></call><operator pos:line="11" pos:column="64">)<pos:position pos:line="11" pos:column="65"/></operator></expr> )<pos:position pos:line="11" pos:column="67"/></condition><then pos:line="11" pos:column="67"> <block pos:line="11" pos:column="68">{
        <decl_stmt><decl><type><name><name pos:line="12" pos:column="9">struct<pos:position pos:line="12" pos:column="15"/></name> <name pos:line="12" pos:column="16">sockaddr_in6<pos:position pos:line="12" pos:column="28"/></name></name> <modifier pos:line="12" pos:column="29">*<pos:position pos:line="12" pos:column="30"/></modifier></type><name pos:line="12" pos:column="30">ss6<pos:position pos:line="12" pos:column="33"/></name> <init pos:line="12" pos:column="34">= <expr><operator pos:line="12" pos:column="36">(<pos:position pos:line="12" pos:column="37"/></operator>struct <name pos:line="12" pos:column="44">sockaddr_in6<pos:position pos:line="12" pos:column="56"/></name><operator pos:line="12" pos:column="56">*<pos:position pos:line="12" pos:column="57"/></operator><operator pos:line="12" pos:column="57">)<pos:position pos:line="12" pos:column="58"/></operator><operator pos:line="12" pos:column="58">&amp;<pos:position pos:line="12" pos:column="63"/></operator><name pos:line="12" pos:column="59">addr<pos:position pos:line="12" pos:column="63"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="64"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">GetSockAddr<pos:position pos:line="13" pos:column="20"/></name><argument_list pos:line="13" pos:column="20">(<argument><expr><operator pos:line="13" pos:column="21">*<pos:position pos:line="13" pos:column="22"/></operator><name pos:line="13" pos:column="22">ss6<pos:position pos:line="13" pos:column="25"/></name></expr></argument>)<pos:position pos:line="13" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></then> <elseif pos:line="14" pos:column="7">else <if pos:line="14" pos:column="12">if <condition pos:line="14" pos:column="15">( <expr><name pos:line="14" pos:column="17">family<pos:position pos:line="14" pos:column="23"/></name> <operator pos:line="14" pos:column="24">==<pos:position pos:line="14" pos:column="26"/></operator> <name pos:line="14" pos:column="27">AF_INET<pos:position pos:line="14" pos:column="34"/></name> <operator pos:line="14" pos:column="35">||<pos:position pos:line="14" pos:column="37"/></operator> <operator pos:line="14" pos:column="38">(<pos:position pos:line="14" pos:column="39"/></operator><name pos:line="14" pos:column="39">family<pos:position pos:line="14" pos:column="45"/></name> <operator pos:line="14" pos:column="46">==<pos:position pos:line="14" pos:column="48"/></operator> <name pos:line="14" pos:column="49">AF_UNSPEC<pos:position pos:line="14" pos:column="58"/></name> <operator pos:line="14" pos:column="59">&amp;&amp;<pos:position pos:line="14" pos:column="69"/></operator> <call><name pos:line="14" pos:column="62">IsIPv4<pos:position pos:line="14" pos:column="68"/></name><argument_list pos:line="14" pos:column="68">()<pos:position pos:line="14" pos:column="70"/></argument_list></call><operator pos:line="14" pos:column="70">)<pos:position pos:line="14" pos:column="71"/></operator></expr> )<pos:position pos:line="14" pos:column="73"/></condition><then pos:line="14" pos:column="73"> <block pos:line="14" pos:column="74">{
        <expr_stmt><expr><name pos:line="15" pos:column="9">sin<pos:position pos:line="15" pos:column="12"/></name> <operator pos:line="15" pos:column="13">=<pos:position pos:line="15" pos:column="14"/></operator> <operator pos:line="15" pos:column="15">(<pos:position pos:line="15" pos:column="16"/></operator>struct <name pos:line="15" pos:column="23">sockaddr_in<pos:position pos:line="15" pos:column="34"/></name><operator pos:line="15" pos:column="34">*<pos:position pos:line="15" pos:column="35"/></operator><operator pos:line="15" pos:column="35">)<pos:position pos:line="15" pos:column="36"/></operator><operator pos:line="15" pos:column="36">&amp;<pos:position pos:line="15" pos:column="41"/></operator><name pos:line="15" pos:column="37">addr<pos:position pos:line="15" pos:column="41"/></name></expr>;<pos:position pos:line="15" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">GetSockAddr<pos:position pos:line="16" pos:column="20"/></name><argument_list pos:line="16" pos:column="20">(<argument><expr><operator pos:line="16" pos:column="21">*<pos:position pos:line="16" pos:column="22"/></operator><name pos:line="16" pos:column="22">sin<pos:position pos:line="16" pos:column="25"/></name></expr></argument>)<pos:position pos:line="16" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if></elseif> <else pos:line="17" pos:column="7">else <block pos:line="17" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">IASSERT<pos:position pos:line="18" pos:column="16"/></name><argument_list pos:line="18" pos:column="16">(<argument><expr><literal type="string" pos:line="18" pos:column="17">"false"<pos:position pos:line="18" pos:column="24"/></literal></expr></argument>,<argument><expr><literal type="boolean" pos:line="18" pos:column="25">false<pos:position pos:line="18" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="19" pos:column="6"/></block></else></if>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
