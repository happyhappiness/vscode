<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1462_squid-3.5.27.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">SBuf<pos:position pos:line="1" pos:column="5"/></name><operator pos:line="1" pos:column="5">::<pos:position pos:line="1" pos:column="7"/></operator><name pos:line="1" pos:column="7">size_type<pos:position pos:line="1" pos:column="16"/></name></name></type>
<name><name pos:line="2" pos:column="1">SBuf<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">rfind<pos:position pos:line="2" pos:column="12"/></name></name><parameter_list pos:line="2" pos:column="12">(<parameter><decl><type><specifier pos:line="2" pos:column="13">const<pos:position pos:line="2" pos:column="18"/></specifier> <name pos:line="2" pos:column="19">SBuf<pos:position pos:line="2" pos:column="23"/></name> <modifier pos:line="2" pos:column="24">&amp;<pos:position pos:line="2" pos:column="29"/></modifier></type><name pos:line="2" pos:column="25">needle<pos:position pos:line="2" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="33">SBuf<pos:position pos:line="2" pos:column="37"/></name><operator pos:line="2" pos:column="37">::<pos:position pos:line="2" pos:column="39"/></operator><name pos:line="2" pos:column="39">size_type<pos:position pos:line="2" pos:column="48"/></name></name></type> <name pos:line="2" pos:column="49">endPos<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="56"/></parameter_list> <specifier pos:line="2" pos:column="57">const<pos:position pos:line="2" pos:column="62"/></specifier>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// when the needle is 1 char, use the 1-char rfind()</comment>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><call><name><name pos:line="5" pos:column="9">needle<pos:position pos:line="5" pos:column="15"/></name><operator pos:line="5" pos:column="15">.<pos:position pos:line="5" pos:column="16"/></operator><name pos:line="5" pos:column="16">length<pos:position pos:line="5" pos:column="22"/></name></name><argument_list pos:line="5" pos:column="22">()<pos:position pos:line="5" pos:column="24"/></argument_list></call> <operator pos:line="5" pos:column="25">==<pos:position pos:line="5" pos:column="27"/></operator> <literal type="number" pos:line="5" pos:column="28">1<pos:position pos:line="5" pos:column="29"/></literal></expr>)<pos:position pos:line="5" pos:column="30"/></condition><then pos:line="5" pos:column="30">
        <block type="pseudo"><return pos:line="6" pos:column="9">return <expr><call><name pos:line="6" pos:column="16">rfind<pos:position pos:line="6" pos:column="21"/></name><argument_list pos:line="6" pos:column="21">(<argument><expr><name><name pos:line="6" pos:column="22">needle<pos:position pos:line="6" pos:column="28"/></name><index pos:line="6" pos:column="28">[<expr><literal type="number" pos:line="6" pos:column="29">0<pos:position pos:line="6" pos:column="30"/></literal></expr>]<pos:position pos:line="6" pos:column="31"/></index></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="33">endPos<pos:position pos:line="6" pos:column="39"/></name></expr></argument>)<pos:position pos:line="6" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="41"/></return></block></then></if>

    <expr_stmt><expr><operator pos:line="8" pos:column="5">++<pos:position pos:line="8" pos:column="7"/></operator><name><name pos:line="8" pos:column="7">stats<pos:position pos:line="8" pos:column="12"/></name><operator pos:line="8" pos:column="12">.<pos:position pos:line="8" pos:column="13"/></operator><name pos:line="8" pos:column="13">find<pos:position pos:line="8" pos:column="17"/></name></name></expr>;<pos:position pos:line="8" pos:column="18"/></expr_stmt>

    <comment type="line" pos:line="10" pos:column="5">// needle is bigger than haystack, impossible find</comment>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><call><name pos:line="11" pos:column="9">length<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">()<pos:position pos:line="11" pos:column="17"/></argument_list></call> <operator pos:line="11" pos:column="18">&lt;<pos:position pos:line="11" pos:column="22"/></operator> <call><name><name pos:line="11" pos:column="20">needle<pos:position pos:line="11" pos:column="26"/></name><operator pos:line="11" pos:column="26">.<pos:position pos:line="11" pos:column="27"/></operator><name pos:line="11" pos:column="27">length<pos:position pos:line="11" pos:column="33"/></name></name><argument_list pos:line="11" pos:column="33">()<pos:position pos:line="11" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="36"/></condition><then pos:line="11" pos:column="36">
        <block type="pseudo"><return pos:line="12" pos:column="9">return <expr><name pos:line="12" pos:column="16">npos<pos:position pos:line="12" pos:column="20"/></name></expr>;<pos:position pos:line="12" pos:column="21"/></return></block></then></if>

    <comment type="line" pos:line="14" pos:column="5">// if startPos is npos, std::string scans from the end of hay</comment>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">endPos<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">==<pos:position pos:line="15" pos:column="18"/></operator> <name pos:line="15" pos:column="19">npos<pos:position pos:line="15" pos:column="23"/></name> <operator pos:line="15" pos:column="24">||<pos:position pos:line="15" pos:column="26"/></operator> <name pos:line="15" pos:column="27">endPos<pos:position pos:line="15" pos:column="33"/></name> <operator pos:line="15" pos:column="34">&gt;<pos:position pos:line="15" pos:column="38"/></operator> <call><name pos:line="15" pos:column="36">length<pos:position pos:line="15" pos:column="42"/></name><argument_list pos:line="15" pos:column="42">()<pos:position pos:line="15" pos:column="44"/></argument_list></call><operator pos:line="15" pos:column="44">-<pos:position pos:line="15" pos:column="45"/></operator><call><name><name pos:line="15" pos:column="45">needle<pos:position pos:line="15" pos:column="51"/></name><operator pos:line="15" pos:column="51">.<pos:position pos:line="15" pos:column="52"/></operator><name pos:line="15" pos:column="52">length<pos:position pos:line="15" pos:column="58"/></name></name><argument_list pos:line="15" pos:column="58">()<pos:position pos:line="15" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="61"/></condition><then pos:line="15" pos:column="61">
        <block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="9">endPos<pos:position pos:line="16" pos:column="15"/></name> <operator pos:line="16" pos:column="16">=<pos:position pos:line="16" pos:column="17"/></operator> <call><name pos:line="16" pos:column="18">length<pos:position pos:line="16" pos:column="24"/></name><argument_list pos:line="16" pos:column="24">()<pos:position pos:line="16" pos:column="26"/></argument_list></call><operator pos:line="16" pos:column="26">-<pos:position pos:line="16" pos:column="27"/></operator><call><name><name pos:line="16" pos:column="27">needle<pos:position pos:line="16" pos:column="33"/></name><operator pos:line="16" pos:column="33">.<pos:position pos:line="16" pos:column="34"/></operator><name pos:line="16" pos:column="34">length<pos:position pos:line="16" pos:column="40"/></name></name><argument_list pos:line="16" pos:column="40">()<pos:position pos:line="16" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="43"/></expr_stmt></block></then></if>

    <comment type="line" pos:line="18" pos:column="5">// an empty needle found at the end of the haystack</comment>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><call><name><name pos:line="19" pos:column="9">needle<pos:position pos:line="19" pos:column="15"/></name><operator pos:line="19" pos:column="15">.<pos:position pos:line="19" pos:column="16"/></operator><name pos:line="19" pos:column="16">length<pos:position pos:line="19" pos:column="22"/></name></name><argument_list pos:line="19" pos:column="22">()<pos:position pos:line="19" pos:column="24"/></argument_list></call> <operator pos:line="19" pos:column="25">==<pos:position pos:line="19" pos:column="27"/></operator> <literal type="number" pos:line="19" pos:column="28">0<pos:position pos:line="19" pos:column="29"/></literal></expr>)<pos:position pos:line="19" pos:column="30"/></condition><then pos:line="19" pos:column="30">
        <block type="pseudo"><return pos:line="20" pos:column="9">return <expr><name pos:line="20" pos:column="16">endPos<pos:position pos:line="20" pos:column="22"/></name></expr>;<pos:position pos:line="20" pos:column="23"/></return></block></then></if>

    <decl_stmt><decl><type><name pos:line="22" pos:column="5">char<pos:position pos:line="22" pos:column="9"/></name> <modifier pos:line="22" pos:column="10">*<pos:position pos:line="22" pos:column="11"/></modifier></type><name pos:line="22" pos:column="11">bufBegin<pos:position pos:line="22" pos:column="19"/></name> <init pos:line="22" pos:column="20">= <expr><call><name pos:line="22" pos:column="22">buf<pos:position pos:line="22" pos:column="25"/></name><argument_list pos:line="22" pos:column="25">()<pos:position pos:line="22" pos:column="27"/></argument_list></call></expr></init></decl>;<pos:position pos:line="22" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="23" pos:column="5">char<pos:position pos:line="23" pos:column="9"/></name> <modifier pos:line="23" pos:column="10">*<pos:position pos:line="23" pos:column="11"/></modifier></type><name pos:line="23" pos:column="11">cur<pos:position pos:line="23" pos:column="14"/></name> <init pos:line="23" pos:column="15">= <expr><name pos:line="23" pos:column="17">bufBegin<pos:position pos:line="23" pos:column="25"/></name><operator pos:line="23" pos:column="25">+<pos:position pos:line="23" pos:column="26"/></operator><name pos:line="23" pos:column="26">endPos<pos:position pos:line="23" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="23" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="24" pos:column="5">const<pos:position pos:line="24" pos:column="10"/></specifier> <name pos:line="24" pos:column="11">char<pos:position pos:line="24" pos:column="15"/></name></type> <name pos:line="24" pos:column="16">needleBegin<pos:position pos:line="24" pos:column="27"/></name> <init pos:line="24" pos:column="28">= <expr><name><name pos:line="24" pos:column="30">needle<pos:position pos:line="24" pos:column="36"/></name><index pos:line="24" pos:column="36">[<expr><literal type="number" pos:line="24" pos:column="37">0<pos:position pos:line="24" pos:column="38"/></literal></expr>]<pos:position pos:line="24" pos:column="39"/></index></name></expr></init></decl>;<pos:position pos:line="24" pos:column="40"/></decl_stmt>
    <while pos:line="25" pos:column="5">while <condition pos:line="25" pos:column="11">(<expr><name pos:line="25" pos:column="12">cur<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">&gt;=<pos:position pos:line="25" pos:column="21"/></operator> <name pos:line="25" pos:column="19">bufBegin<pos:position pos:line="25" pos:column="27"/></name></expr>)<pos:position pos:line="25" pos:column="28"/></condition> <block pos:line="25" pos:column="29">{
        <if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><operator pos:line="26" pos:column="13">*<pos:position pos:line="26" pos:column="14"/></operator><name pos:line="26" pos:column="14">cur<pos:position pos:line="26" pos:column="17"/></name> <operator pos:line="26" pos:column="18">==<pos:position pos:line="26" pos:column="20"/></operator> <name pos:line="26" pos:column="21">needleBegin<pos:position pos:line="26" pos:column="32"/></name></expr>)<pos:position pos:line="26" pos:column="33"/></condition><then pos:line="26" pos:column="33"> <block pos:line="26" pos:column="34">{
            <if pos:line="27" pos:column="13">if <condition pos:line="27" pos:column="16">(<expr><literal type="number" pos:line="27" pos:column="17">0<pos:position pos:line="27" pos:column="18"/></literal> <operator pos:line="27" pos:column="19">==<pos:position pos:line="27" pos:column="21"/></operator> <call><name pos:line="27" pos:column="22">memcmp<pos:position pos:line="27" pos:column="28"/></name><argument_list pos:line="27" pos:column="28">(<argument><expr><call><name><name pos:line="27" pos:column="29">needle<pos:position pos:line="27" pos:column="35"/></name><operator pos:line="27" pos:column="35">.<pos:position pos:line="27" pos:column="36"/></operator><name pos:line="27" pos:column="36">buf<pos:position pos:line="27" pos:column="39"/></name></name><argument_list pos:line="27" pos:column="39">()<pos:position pos:line="27" pos:column="41"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="27" pos:column="43">cur<pos:position pos:line="27" pos:column="46"/></name></expr></argument>, <argument><expr><call><name><name pos:line="27" pos:column="48">needle<pos:position pos:line="27" pos:column="54"/></name><operator pos:line="27" pos:column="54">.<pos:position pos:line="27" pos:column="55"/></operator><name pos:line="27" pos:column="55">length<pos:position pos:line="27" pos:column="61"/></name></name><argument_list pos:line="27" pos:column="61">()<pos:position pos:line="27" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="65"/></condition><then pos:line="27" pos:column="65"> <block pos:line="27" pos:column="66">{
                <comment type="line" pos:line="28" pos:column="17">// found</comment>
                <return pos:line="29" pos:column="17">return <expr><operator pos:line="29" pos:column="24">(<pos:position pos:line="29" pos:column="25"/></operator><name pos:line="29" pos:column="25">cur<pos:position pos:line="29" pos:column="28"/></name><operator pos:line="29" pos:column="28">-<pos:position pos:line="29" pos:column="29"/></operator><call><name pos:line="29" pos:column="29">buf<pos:position pos:line="29" pos:column="32"/></name><argument_list pos:line="29" pos:column="32">()<pos:position pos:line="29" pos:column="34"/></argument_list></call><operator pos:line="29" pos:column="34">)<pos:position pos:line="29" pos:column="35"/></operator></expr>;<pos:position pos:line="29" pos:column="36"/></return>
            }<pos:position pos:line="30" pos:column="14"/></block></then></if>
        }<pos:position pos:line="31" pos:column="10"/></block></then></if>
        <expr_stmt><expr><operator pos:line="32" pos:column="9">--<pos:position pos:line="32" pos:column="11"/></operator><name pos:line="32" pos:column="11">cur<pos:position pos:line="32" pos:column="14"/></name></expr>;<pos:position pos:line="32" pos:column="15"/></expr_stmt>
    }<pos:position pos:line="33" pos:column="6"/></block></while>
    <return pos:line="34" pos:column="5">return <expr><name pos:line="34" pos:column="12">npos<pos:position pos:line="34" pos:column="16"/></name></expr>;<pos:position pos:line="34" pos:column="17"/></return>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
