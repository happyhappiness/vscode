<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7542_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">RFCNB_Put_Pkt<pos:position pos:line="2" pos:column="14"/></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><name><name pos:line="2" pos:column="15">struct<pos:position pos:line="2" pos:column="21"/></name> <name pos:line="2" pos:column="22">RFCNB_Con<pos:position pos:line="2" pos:column="31"/></name></name> <modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type><name pos:line="2" pos:column="33">con<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="38">struct<pos:position pos:line="2" pos:column="44"/></name> <name pos:line="2" pos:column="45">RFCNB_Pkt<pos:position pos:line="2" pos:column="54"/></name></name> <modifier pos:line="2" pos:column="55">*<pos:position pos:line="2" pos:column="56"/></modifier></type><name pos:line="2" pos:column="56">pkt<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="61">int<pos:position pos:line="2" pos:column="64"/></name></type> <name pos:line="2" pos:column="65">len<pos:position pos:line="2" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="69"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">len_sent<pos:position pos:line="4" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="19">tot_sent<pos:position pos:line="4" pos:column="27"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="29">this_len<pos:position pos:line="4" pos:column="37"/></name></decl>;<pos:position pos:line="4" pos:column="38"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="5" pos:column="5">struct<pos:position pos:line="5" pos:column="11"/></name> <name pos:line="5" pos:column="12">RFCNB_Pkt<pos:position pos:line="5" pos:column="21"/></name></name> <modifier pos:line="5" pos:column="22">*<pos:position pos:line="5" pos:column="23"/></modifier></type><name pos:line="5" pos:column="23">pkt_ptr<pos:position pos:line="5" pos:column="30"/></name></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name> <modifier pos:line="6" pos:column="10">*<pos:position pos:line="6" pos:column="11"/></modifier></type><name pos:line="6" pos:column="11">this_data<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">i<pos:position pos:line="7" pos:column="10"/></name></decl>;<pos:position pos:line="7" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="8" pos:column="5">struct<pos:position pos:line="8" pos:column="11"/></name> <name pos:line="8" pos:column="12">iovec<pos:position pos:line="8" pos:column="17"/></name></name></type> <name><name pos:line="8" pos:column="18">io_list<pos:position pos:line="8" pos:column="25"/></name><index pos:line="8" pos:column="25">[<expr><literal type="number" pos:line="8" pos:column="26">10<pos:position pos:line="8" pos:column="28"/></literal></expr>]<pos:position pos:line="8" pos:column="29"/></index></name></decl>;<pos:position pos:line="8" pos:column="30"/></decl_stmt>   <comment type="block" pos:line="8" pos:column="33">/* We should never have more      */</comment>
    <comment type="block" pos:line="9" pos:column="5">/* If we do, this will blow up ... */</comment>

    <comment type="block" pos:line="11" pos:column="5">/* Try to send the data ... We only send as many bytes as len claims */</comment>
    <comment type="block" pos:line="12" pos:column="5">/* We should try to stuff it into an IOVEC and send as one write     */</comment>

    <expr_stmt><expr><name pos:line="14" pos:column="5">pkt_ptr<pos:position pos:line="14" pos:column="12"/></name> <operator pos:line="14" pos:column="13">=<pos:position pos:line="14" pos:column="14"/></operator> <name pos:line="14" pos:column="15">pkt<pos:position pos:line="14" pos:column="18"/></name></expr>;<pos:position pos:line="14" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><name pos:line="15" pos:column="5">len_sent<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">=<pos:position pos:line="15" pos:column="15"/></operator> <name pos:line="15" pos:column="16">tot_sent<pos:position pos:line="15" pos:column="24"/></name> <operator pos:line="15" pos:column="25">=<pos:position pos:line="15" pos:column="26"/></operator> <literal type="number" pos:line="15" pos:column="27">0<pos:position pos:line="15" pos:column="28"/></literal></expr>;<pos:position pos:line="15" pos:column="29"/></expr_stmt>    <comment type="block" pos:line="15" pos:column="33">/* Nothing sent so far */</comment>
    <expr_stmt><expr><name pos:line="16" pos:column="5">i<pos:position pos:line="16" pos:column="6"/></name> <operator pos:line="16" pos:column="7">=<pos:position pos:line="16" pos:column="8"/></operator> <literal type="number" pos:line="16" pos:column="9">0<pos:position pos:line="16" pos:column="10"/></literal></expr>;<pos:position pos:line="16" pos:column="11"/></expr_stmt>

    <while pos:line="18" pos:column="5">while <condition pos:line="18" pos:column="11">(<expr><operator pos:line="18" pos:column="12">(<pos:position pos:line="18" pos:column="13"/></operator><name pos:line="18" pos:column="13">pkt_ptr<pos:position pos:line="18" pos:column="20"/></name> <operator pos:line="18" pos:column="21">!=<pos:position pos:line="18" pos:column="23"/></operator> <name pos:line="18" pos:column="24">NULL<pos:position pos:line="18" pos:column="28"/></name><operator pos:line="18" pos:column="28">)<pos:position pos:line="18" pos:column="29"/></operator> <operator pos:line="18" pos:column="30">&amp;<pos:position pos:line="18" pos:column="35"/></operator> <operator pos:line="18" pos:column="32">(<pos:position pos:line="18" pos:column="33"/></operator><name pos:line="18" pos:column="33">i<pos:position pos:line="18" pos:column="34"/></name> <operator pos:line="18" pos:column="35">&lt;<pos:position pos:line="18" pos:column="39"/></operator> <literal type="number" pos:line="18" pos:column="37">10<pos:position pos:line="18" pos:column="39"/></literal><operator pos:line="18" pos:column="39">)<pos:position pos:line="18" pos:column="40"/></operator></expr>)<pos:position pos:line="18" pos:column="41"/></condition> <block pos:line="18" pos:column="42">{      <comment type="block" pos:line="18" pos:column="49">/* Watch that magic number! */</comment>

        <expr_stmt><expr><name pos:line="20" pos:column="9">this_len<pos:position pos:line="20" pos:column="17"/></name> <operator pos:line="20" pos:column="18">=<pos:position pos:line="20" pos:column="19"/></operator> <name><name pos:line="20" pos:column="20">pkt_ptr<pos:position pos:line="20" pos:column="27"/></name><operator pos:line="20" pos:column="27">-&gt;<pos:position pos:line="20" pos:column="32"/></operator><name pos:line="20" pos:column="29">len<pos:position pos:line="20" pos:column="32"/></name></name></expr>;<pos:position pos:line="20" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name pos:line="21" pos:column="9">this_data<pos:position pos:line="21" pos:column="18"/></name> <operator pos:line="21" pos:column="19">=<pos:position pos:line="21" pos:column="20"/></operator> <name><name pos:line="21" pos:column="21">pkt_ptr<pos:position pos:line="21" pos:column="28"/></name><operator pos:line="21" pos:column="28">-&gt;<pos:position pos:line="21" pos:column="33"/></operator><name pos:line="21" pos:column="30">data<pos:position pos:line="21" pos:column="34"/></name></name></expr>;<pos:position pos:line="21" pos:column="35"/></expr_stmt>
        <if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><operator pos:line="22" pos:column="13">(<pos:position pos:line="22" pos:column="14"/></operator><name pos:line="22" pos:column="14">tot_sent<pos:position pos:line="22" pos:column="22"/></name> <operator pos:line="22" pos:column="23">+<pos:position pos:line="22" pos:column="24"/></operator> <name pos:line="22" pos:column="25">this_len<pos:position pos:line="22" pos:column="33"/></name><operator pos:line="22" pos:column="33">)<pos:position pos:line="22" pos:column="34"/></operator> <operator pos:line="22" pos:column="35">&gt;<pos:position pos:line="22" pos:column="39"/></operator> <name pos:line="22" pos:column="37">len<pos:position pos:line="22" pos:column="40"/></name></expr>)<pos:position pos:line="22" pos:column="41"/></condition><then pos:line="22" pos:column="41">
            <block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="13">this_len<pos:position pos:line="23" pos:column="21"/></name> <operator pos:line="23" pos:column="22">=<pos:position pos:line="23" pos:column="23"/></operator> <name pos:line="23" pos:column="24">len<pos:position pos:line="23" pos:column="27"/></name> <operator pos:line="23" pos:column="28">-<pos:position pos:line="23" pos:column="29"/></operator> <name pos:line="23" pos:column="30">tot_sent<pos:position pos:line="23" pos:column="38"/></name></expr>;<pos:position pos:line="23" pos:column="39"/></expr_stmt></block></then></if>  <comment type="block" pos:line="23" pos:column="41">/* Adjust so we don't send too much */</comment>

        <comment type="block" pos:line="25" pos:column="9">/* Now plug into the iovec ... */</comment>

        <expr_stmt><expr><name><name pos:line="27" pos:column="9">io_list<pos:position pos:line="27" pos:column="16"/></name><index pos:line="27" pos:column="16">[<expr><name pos:line="27" pos:column="17">i<pos:position pos:line="27" pos:column="18"/></name></expr>]<pos:position pos:line="27" pos:column="19"/></index></name><operator pos:line="27" pos:column="19">.<pos:position pos:line="27" pos:column="20"/></operator><name pos:line="27" pos:column="20">iov_len<pos:position pos:line="27" pos:column="27"/></name> <operator pos:line="27" pos:column="28">=<pos:position pos:line="27" pos:column="29"/></operator> <name pos:line="27" pos:column="30">this_len<pos:position pos:line="27" pos:column="38"/></name></expr>;<pos:position pos:line="27" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="28" pos:column="9">io_list<pos:position pos:line="28" pos:column="16"/></name><index pos:line="28" pos:column="16">[<expr><name pos:line="28" pos:column="17">i<pos:position pos:line="28" pos:column="18"/></name></expr>]<pos:position pos:line="28" pos:column="19"/></index></name><operator pos:line="28" pos:column="19">.<pos:position pos:line="28" pos:column="20"/></operator><name pos:line="28" pos:column="20">iov_base<pos:position pos:line="28" pos:column="28"/></name> <operator pos:line="28" pos:column="29">=<pos:position pos:line="28" pos:column="30"/></operator> <name pos:line="28" pos:column="31">this_data<pos:position pos:line="28" pos:column="40"/></name></expr>;<pos:position pos:line="28" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><name pos:line="29" pos:column="9">i<pos:position pos:line="29" pos:column="10"/></name><operator pos:line="29" pos:column="10">++<pos:position pos:line="29" pos:column="12"/></operator></expr>;<pos:position pos:line="29" pos:column="13"/></expr_stmt>

        <expr_stmt><expr><name pos:line="31" pos:column="9">tot_sent<pos:position pos:line="31" pos:column="17"/></name> <operator pos:line="31" pos:column="18">+=<pos:position pos:line="31" pos:column="20"/></operator> <name pos:line="31" pos:column="21">this_len<pos:position pos:line="31" pos:column="29"/></name></expr>;<pos:position pos:line="31" pos:column="30"/></expr_stmt>

        <if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><name pos:line="33" pos:column="13">tot_sent<pos:position pos:line="33" pos:column="21"/></name> <operator pos:line="33" pos:column="22">==<pos:position pos:line="33" pos:column="24"/></operator> <name pos:line="33" pos:column="25">len<pos:position pos:line="33" pos:column="28"/></name></expr>)<pos:position pos:line="33" pos:column="29"/></condition><then pos:line="33" pos:column="29">
            <block type="pseudo"><break pos:line="34" pos:column="13">break;<pos:position pos:line="34" pos:column="19"/></break></block></then></if>              <comment type="block" pos:line="34" pos:column="33">/* Let's not send too much */</comment>

        <expr_stmt><expr><name pos:line="36" pos:column="9">pkt_ptr<pos:position pos:line="36" pos:column="16"/></name> <operator pos:line="36" pos:column="17">=<pos:position pos:line="36" pos:column="18"/></operator> <name><name pos:line="36" pos:column="19">pkt_ptr<pos:position pos:line="36" pos:column="26"/></name><operator pos:line="36" pos:column="26">-&gt;<pos:position pos:line="36" pos:column="31"/></operator><name pos:line="36" pos:column="28">next<pos:position pos:line="36" pos:column="32"/></name></name></expr>;<pos:position pos:line="36" pos:column="33"/></expr_stmt>

    }<pos:position pos:line="38" pos:column="6"/></block></while>

<cpp:ifdef pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">ifdef<pos:position pos:line="40" pos:column="7"/></cpp:directive> <name pos:line="40" pos:column="8">RFCNB_DEBUG<pos:position pos:line="40" pos:column="19"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="41" pos:column="5">fprintf<pos:position pos:line="41" pos:column="12"/></name><argument_list pos:line="41" pos:column="12">(<argument><expr><name pos:line="41" pos:column="13">stderr<pos:position pos:line="41" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="21">"Frags = %i, tot_sent = %i\n"<pos:position pos:line="41" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="52">i<pos:position pos:line="41" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="55">tot_sent<pos:position pos:line="41" pos:column="63"/></name></expr></argument>)<pos:position pos:line="41" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="65"/></expr_stmt>
<cpp:endif pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">endif<pos:position pos:line="42" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="44" pos:column="5">/* Set up an alarm if timeouts are set ... */</comment>

    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><name pos:line="46" pos:column="9">RFCNB_Timeout<pos:position pos:line="46" pos:column="22"/></name> <operator pos:line="46" pos:column="23">&gt;<pos:position pos:line="46" pos:column="27"/></operator> <literal type="number" pos:line="46" pos:column="25">0<pos:position pos:line="46" pos:column="26"/></literal></expr>)<pos:position pos:line="46" pos:column="27"/></condition><then pos:line="46" pos:column="27">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="9">alarm<pos:position pos:line="47" pos:column="14"/></name><argument_list pos:line="47" pos:column="14">(<argument><expr><name pos:line="47" pos:column="15">RFCNB_Timeout<pos:position pos:line="47" pos:column="28"/></name></expr></argument>)<pos:position pos:line="47" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="30"/></expr_stmt></block></then></if>

    <if pos:line="49" pos:column="5">if <condition pos:line="49" pos:column="8">(<expr><operator pos:line="49" pos:column="9">(<pos:position pos:line="49" pos:column="10"/></operator><name pos:line="49" pos:column="10">len_sent<pos:position pos:line="49" pos:column="18"/></name> <operator pos:line="49" pos:column="19">=<pos:position pos:line="49" pos:column="20"/></operator> <call><name pos:line="49" pos:column="21">writev<pos:position pos:line="49" pos:column="27"/></name><argument_list pos:line="49" pos:column="27">(<argument><expr><name><name pos:line="49" pos:column="28">con<pos:position pos:line="49" pos:column="31"/></name><operator pos:line="49" pos:column="31">-&gt;<pos:position pos:line="49" pos:column="36"/></operator><name pos:line="49" pos:column="33">fd<pos:position pos:line="49" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="37">io_list<pos:position pos:line="49" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="46">i<pos:position pos:line="49" pos:column="47"/></name></expr></argument>)<pos:position pos:line="49" pos:column="48"/></argument_list></call><operator pos:line="49" pos:column="48">)<pos:position pos:line="49" pos:column="49"/></operator> <operator pos:line="49" pos:column="50">&lt;<pos:position pos:line="49" pos:column="54"/></operator> <literal type="number" pos:line="49" pos:column="52">0<pos:position pos:line="49" pos:column="53"/></literal></expr>)<pos:position pos:line="49" pos:column="54"/></condition><then pos:line="49" pos:column="54"> <block pos:line="49" pos:column="55">{         <comment type="block" pos:line="49" pos:column="65">/* An error */</comment>

        <expr_stmt><expr><name><name pos:line="51" pos:column="9">con<pos:position pos:line="51" pos:column="12"/></name><operator pos:line="51" pos:column="12">-&gt;<pos:position pos:line="51" pos:column="17"/></operator><name pos:line="51" pos:column="14">errn<pos:position pos:line="51" pos:column="18"/></name></name> <operator pos:line="51" pos:column="19">=<pos:position pos:line="51" pos:column="20"/></operator> <name pos:line="51" pos:column="21">errno<pos:position pos:line="51" pos:column="26"/></name></expr>;<pos:position pos:line="51" pos:column="27"/></expr_stmt>
        <if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><name pos:line="52" pos:column="13">errno<pos:position pos:line="52" pos:column="18"/></name> <operator pos:line="52" pos:column="19">==<pos:position pos:line="52" pos:column="21"/></operator> <name pos:line="52" pos:column="22">EINTR<pos:position pos:line="52" pos:column="27"/></name></expr>)<pos:position pos:line="52" pos:column="28"/></condition><then pos:line="52" pos:column="28">     <comment type="block" pos:line="52" pos:column="33">/* We were interrupted ... */</comment>
            <block type="pseudo"><expr_stmt><expr><name pos:line="53" pos:column="13">RFCNB_errno<pos:position pos:line="53" pos:column="24"/></name> <operator pos:line="53" pos:column="25">=<pos:position pos:line="53" pos:column="26"/></operator> <name pos:line="53" pos:column="27">RFCNBE_Timeout<pos:position pos:line="53" pos:column="41"/></name></expr>;<pos:position pos:line="53" pos:column="42"/></expr_stmt></block></then>
        <else pos:line="54" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><name pos:line="55" pos:column="13">RFCNB_errno<pos:position pos:line="55" pos:column="24"/></name> <operator pos:line="55" pos:column="25">=<pos:position pos:line="55" pos:column="26"/></operator> <name pos:line="55" pos:column="27">RFCNBE_BadWrite<pos:position pos:line="55" pos:column="42"/></name></expr>;<pos:position pos:line="55" pos:column="43"/></expr_stmt></block></else></if>
        <expr_stmt><expr><name pos:line="56" pos:column="9">RFCNB_saved_errno<pos:position pos:line="56" pos:column="26"/></name> <operator pos:line="56" pos:column="27">=<pos:position pos:line="56" pos:column="28"/></operator> <name pos:line="56" pos:column="29">errno<pos:position pos:line="56" pos:column="34"/></name></expr>;<pos:position pos:line="56" pos:column="35"/></expr_stmt>
        <return pos:line="57" pos:column="9">return <expr><operator pos:line="57" pos:column="16">(<pos:position pos:line="57" pos:column="17"/></operator><name pos:line="57" pos:column="17">RFCNBE_Bad<pos:position pos:line="57" pos:column="27"/></name><operator pos:line="57" pos:column="27">)<pos:position pos:line="57" pos:column="28"/></operator></expr>;<pos:position pos:line="57" pos:column="29"/></return>

    }<pos:position pos:line="59" pos:column="6"/></block></then></if>
    <if pos:line="60" pos:column="5">if <condition pos:line="60" pos:column="8">(<expr><name pos:line="60" pos:column="9">len_sent<pos:position pos:line="60" pos:column="17"/></name> <operator pos:line="60" pos:column="18">&lt;<pos:position pos:line="60" pos:column="22"/></operator> <name pos:line="60" pos:column="20">tot_sent<pos:position pos:line="60" pos:column="28"/></name></expr>)<pos:position pos:line="60" pos:column="29"/></condition><then pos:line="60" pos:column="29"> <block pos:line="60" pos:column="30">{  <comment type="block" pos:line="60" pos:column="33">/* Less than we wanted */</comment>
        <if pos:line="61" pos:column="9">if <condition pos:line="61" pos:column="12">(<expr><name pos:line="61" pos:column="13">errno<pos:position pos:line="61" pos:column="18"/></name> <operator pos:line="61" pos:column="19">==<pos:position pos:line="61" pos:column="21"/></operator> <name pos:line="61" pos:column="22">EINTR<pos:position pos:line="61" pos:column="27"/></name></expr>)<pos:position pos:line="61" pos:column="28"/></condition><then pos:line="61" pos:column="28">     <comment type="block" pos:line="61" pos:column="33">/* We were interrupted */</comment>
            <block type="pseudo"><expr_stmt><expr><name pos:line="62" pos:column="13">RFCNB_errno<pos:position pos:line="62" pos:column="24"/></name> <operator pos:line="62" pos:column="25">=<pos:position pos:line="62" pos:column="26"/></operator> <name pos:line="62" pos:column="27">RFCNBE_Timeout<pos:position pos:line="62" pos:column="41"/></name></expr>;<pos:position pos:line="62" pos:column="42"/></expr_stmt></block></then>
        <else pos:line="63" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><name pos:line="64" pos:column="13">RFCNB_errno<pos:position pos:line="64" pos:column="24"/></name> <operator pos:line="64" pos:column="25">=<pos:position pos:line="64" pos:column="26"/></operator> <name pos:line="64" pos:column="27">RFCNBE_BadWrite<pos:position pos:line="64" pos:column="42"/></name></expr>;<pos:position pos:line="64" pos:column="43"/></expr_stmt></block></else></if>
        <expr_stmt><expr><name pos:line="65" pos:column="9">RFCNB_saved_errno<pos:position pos:line="65" pos:column="26"/></name> <operator pos:line="65" pos:column="27">=<pos:position pos:line="65" pos:column="28"/></operator> <name pos:line="65" pos:column="29">errno<pos:position pos:line="65" pos:column="34"/></name></expr>;<pos:position pos:line="65" pos:column="35"/></expr_stmt>
        <return pos:line="66" pos:column="9">return <expr><operator pos:line="66" pos:column="16">(<pos:position pos:line="66" pos:column="17"/></operator><name pos:line="66" pos:column="17">RFCNBE_Bad<pos:position pos:line="66" pos:column="27"/></name><operator pos:line="66" pos:column="27">)<pos:position pos:line="66" pos:column="28"/></operator></expr>;<pos:position pos:line="66" pos:column="29"/></return>
    }<pos:position pos:line="67" pos:column="6"/></block></then></if>
    <if pos:line="68" pos:column="5">if <condition pos:line="68" pos:column="8">(<expr><name pos:line="68" pos:column="9">RFCNB_Timeout<pos:position pos:line="68" pos:column="22"/></name> <operator pos:line="68" pos:column="23">&gt;<pos:position pos:line="68" pos:column="27"/></operator> <literal type="number" pos:line="68" pos:column="25">0<pos:position pos:line="68" pos:column="26"/></literal></expr>)<pos:position pos:line="68" pos:column="27"/></condition><then pos:line="68" pos:column="27">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="69" pos:column="9">alarm<pos:position pos:line="69" pos:column="14"/></name><argument_list pos:line="69" pos:column="14">(<argument><expr><literal type="number" pos:line="69" pos:column="15">0<pos:position pos:line="69" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="18"/></expr_stmt></block></then></if>               <comment type="block" pos:line="69" pos:column="33">/* Reset that sucker */</comment>

<cpp:ifdef pos:line="71" pos:column="1">#<cpp:directive pos:line="71" pos:column="2">ifdef<pos:position pos:line="71" pos:column="7"/></cpp:directive> <name pos:line="71" pos:column="8">RFCNB_DEBUG<pos:position pos:line="71" pos:column="19"/></name></cpp:ifdef>

    <expr_stmt><expr><call><name pos:line="73" pos:column="5">fprintf<pos:position pos:line="73" pos:column="12"/></name><argument_list pos:line="73" pos:column="12">(<argument><expr><name pos:line="73" pos:column="13">stderr<pos:position pos:line="73" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="21">"Len sent = %i ...\n"<pos:position pos:line="73" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="73" pos:column="44">len_sent<pos:position pos:line="73" pos:column="52"/></name></expr></argument>)<pos:position pos:line="73" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="74" pos:column="5">RFCNB_Print_Pkt<pos:position pos:line="74" pos:column="20"/></name><argument_list pos:line="74" pos:column="20">(<argument><expr><name pos:line="74" pos:column="21">stderr<pos:position pos:line="74" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="74" pos:column="29">"sent"<pos:position pos:line="74" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="74" pos:column="37">pkt<pos:position pos:line="74" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="42">len_sent<pos:position pos:line="74" pos:column="50"/></name></expr></argument>)<pos:position pos:line="74" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="52"/></expr_stmt>     <comment type="block" pos:line="74" pos:column="57">/* Print what send ... */</comment>

<cpp:endif pos:line="76" pos:column="1">#<cpp:directive pos:line="76" pos:column="2">endif<pos:position pos:line="76" pos:column="7"/></cpp:directive></cpp:endif>

    <return pos:line="78" pos:column="5">return <expr><operator pos:line="78" pos:column="12">(<pos:position pos:line="78" pos:column="13"/></operator><name pos:line="78" pos:column="13">len_sent<pos:position pos:line="78" pos:column="21"/></name><operator pos:line="78" pos:column="21">)<pos:position pos:line="78" pos:column="22"/></operator></expr>;<pos:position pos:line="78" pos:column="23"/></return>

}<pos:position pos:line="80" pos:column="2"/></block></function></unit>
