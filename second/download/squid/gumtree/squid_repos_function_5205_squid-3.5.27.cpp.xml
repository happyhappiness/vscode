<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5205_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Rock<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">Rebuild<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">useNewSlot<pos:position pos:line="2" pos:column="26"/></name></name><parameter_list pos:line="2" pos:column="26">(<parameter><decl><type><specifier pos:line="2" pos:column="27">const<pos:position pos:line="2" pos:column="32"/></specifier> <name pos:line="2" pos:column="33">SlotId<pos:position pos:line="2" pos:column="39"/></name></type> <name pos:line="2" pos:column="40">slotId<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="48">const<pos:position pos:line="2" pos:column="53"/></specifier> <name pos:line="2" pos:column="54">DbCellHeader<pos:position pos:line="2" pos:column="66"/></name> <modifier pos:line="2" pos:column="67">&amp;<pos:position pos:line="2" pos:column="72"/></modifier></type><name pos:line="2" pos:column="68">header<pos:position pos:line="2" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="75"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">LoadingEntry<pos:position pos:line="4" pos:column="17"/></name> <modifier pos:line="4" pos:column="18">&amp;<pos:position pos:line="4" pos:column="23"/></modifier></type><name pos:line="4" pos:column="19">slice<pos:position pos:line="4" pos:column="24"/></name> <init pos:line="4" pos:column="25">= <expr><name><name pos:line="4" pos:column="27">entries<pos:position pos:line="4" pos:column="34"/></name><index pos:line="4" pos:column="34">[<expr><name pos:line="4" pos:column="35">slotId<pos:position pos:line="4" pos:column="41"/></name></expr>]<pos:position pos:line="4" pos:column="42"/></index></name></expr></init></decl>;<pos:position pos:line="4" pos:column="43"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><operator pos:line="5" pos:column="12">!<pos:position pos:line="5" pos:column="13"/></operator><name><name pos:line="5" pos:column="13">slice<pos:position pos:line="5" pos:column="18"/></name><operator pos:line="5" pos:column="18">.<pos:position pos:line="5" pos:column="19"/></operator><name pos:line="5" pos:column="19">freed<pos:position pos:line="5" pos:column="24"/></name></name></expr></argument>)<pos:position pos:line="5" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="26"/></expr_stmt> <comment type="line" pos:line="5" pos:column="27">// we cannot free what was not loaded</comment>

    <decl_stmt><decl><type><specifier pos:line="7" pos:column="5">const<pos:position pos:line="7" pos:column="10"/></specifier> <name pos:line="7" pos:column="11">cache_key<pos:position pos:line="7" pos:column="20"/></name> <modifier pos:line="7" pos:column="21">*<pos:position pos:line="7" pos:column="22"/></modifier><specifier pos:line="7" pos:column="22">const<pos:position pos:line="7" pos:column="27"/></specifier></type> <name pos:line="7" pos:column="28">key<pos:position pos:line="7" pos:column="31"/></name> <init pos:line="7" pos:column="32">=
        <expr><cast type="reinterpret" pos:line="8" pos:column="9">reinterpret_cast<argument_list type="generic" pos:line="8" pos:column="25">&lt;<argument><expr><specifier pos:line="8" pos:column="26">const<pos:position pos:line="8" pos:column="31"/></specifier> <name pos:line="8" pos:column="32">cache_key<pos:position pos:line="8" pos:column="41"/></name><operator pos:line="8" pos:column="41">*<pos:position pos:line="8" pos:column="42"/></operator></expr></argument>&gt;<pos:position pos:line="8" pos:column="46"/></argument_list><argument_list pos:line="8" pos:column="43">(<argument><expr><name><name pos:line="8" pos:column="44">header<pos:position pos:line="8" pos:column="50"/></name><operator pos:line="8" pos:column="50">.<pos:position pos:line="8" pos:column="51"/></operator><name pos:line="8" pos:column="51">key<pos:position pos:line="8" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="55"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="8" pos:column="56"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="9" pos:column="5">const<pos:position pos:line="9" pos:column="10"/></specifier> <name pos:line="9" pos:column="11">sfileno<pos:position pos:line="9" pos:column="18"/></name></type> <name pos:line="9" pos:column="19">fileno<pos:position pos:line="9" pos:column="25"/></name> <init pos:line="9" pos:column="26">= <expr><call><name><name pos:line="9" pos:column="28">sd<pos:position pos:line="9" pos:column="30"/></name><operator pos:line="9" pos:column="30">-&gt;<pos:position pos:line="9" pos:column="35"/></operator><name pos:line="9" pos:column="32">map<pos:position pos:line="9" pos:column="35"/></name><operator pos:line="9" pos:column="35">-&gt;<pos:position pos:line="9" pos:column="40"/></operator><name pos:line="9" pos:column="37">anchorIndexByKey<pos:position pos:line="9" pos:column="53"/></name></name><argument_list pos:line="9" pos:column="53">(<argument><expr><name pos:line="9" pos:column="54">key<pos:position pos:line="9" pos:column="57"/></name></expr></argument>)<pos:position pos:line="9" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="59"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">assert<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><literal type="number" pos:line="10" pos:column="12">0<pos:position pos:line="10" pos:column="13"/></literal> <operator pos:line="10" pos:column="14">&lt;=<pos:position pos:line="10" pos:column="19"/></operator> <name pos:line="10" pos:column="17">fileno<pos:position pos:line="10" pos:column="23"/></name> <operator pos:line="10" pos:column="24">&amp;&amp;<pos:position pos:line="10" pos:column="34"/></operator> <name pos:line="10" pos:column="27">fileno<pos:position pos:line="10" pos:column="33"/></name> <operator pos:line="10" pos:column="34">&lt;<pos:position pos:line="10" pos:column="38"/></operator> <name pos:line="10" pos:column="36">dbEntryLimit<pos:position pos:line="10" pos:column="48"/></name></expr></argument>)<pos:position pos:line="10" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="50"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="12" pos:column="5">LoadingEntry<pos:position pos:line="12" pos:column="17"/></name> <modifier pos:line="12" pos:column="18">&amp;<pos:position pos:line="12" pos:column="23"/></modifier></type><name pos:line="12" pos:column="19">le<pos:position pos:line="12" pos:column="21"/></name> <init pos:line="12" pos:column="22">= <expr><name><name pos:line="12" pos:column="24">entries<pos:position pos:line="12" pos:column="31"/></name><index pos:line="12" pos:column="31">[<expr><name pos:line="12" pos:column="32">fileno<pos:position pos:line="12" pos:column="38"/></name></expr>]<pos:position pos:line="12" pos:column="39"/></index></name></expr></init></decl>;<pos:position pos:line="12" pos:column="40"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">debugs<pos:position pos:line="13" pos:column="11"/></name><argument_list pos:line="13" pos:column="11">(<argument><expr><literal type="number" pos:line="13" pos:column="12">47<pos:position pos:line="13" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="13" pos:column="15">9<pos:position pos:line="13" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="18">"entry "<pos:position pos:line="13" pos:column="26"/></literal> <operator pos:line="13" pos:column="27">&lt;&lt;<pos:position pos:line="13" pos:column="35"/></operator> <name pos:line="13" pos:column="30">fileno<pos:position pos:line="13" pos:column="36"/></name> <operator pos:line="13" pos:column="37">&lt;&lt;<pos:position pos:line="13" pos:column="45"/></operator> <literal type="string" pos:line="13" pos:column="40">" state: "<pos:position pos:line="13" pos:column="50"/></literal> <operator pos:line="13" pos:column="51">&lt;&lt;<pos:position pos:line="13" pos:column="59"/></operator> <name><name pos:line="13" pos:column="54">le<pos:position pos:line="13" pos:column="56"/></name><operator pos:line="13" pos:column="56">.<pos:position pos:line="13" pos:column="57"/></operator><name pos:line="13" pos:column="57">state<pos:position pos:line="13" pos:column="62"/></name></name> <operator pos:line="13" pos:column="63">&lt;&lt;<pos:position pos:line="13" pos:column="71"/></operator> <literal type="string" pos:line="13" pos:column="66">", inode: "<pos:position pos:line="13" pos:column="77"/></literal> <operator pos:line="13" pos:column="78">&lt;&lt;<pos:position pos:line="13" pos:column="86"/></operator>
           <name><name pos:line="14" pos:column="12">header<pos:position pos:line="14" pos:column="18"/></name><operator pos:line="14" pos:column="18">.<pos:position pos:line="14" pos:column="19"/></operator><name pos:line="14" pos:column="19">firstSlot<pos:position pos:line="14" pos:column="28"/></name></name> <operator pos:line="14" pos:column="29">&lt;&lt;<pos:position pos:line="14" pos:column="37"/></operator> <literal type="string" pos:line="14" pos:column="32">", size: "<pos:position pos:line="14" pos:column="42"/></literal> <operator pos:line="14" pos:column="43">&lt;&lt;<pos:position pos:line="14" pos:column="51"/></operator> <name><name pos:line="14" pos:column="46">header<pos:position pos:line="14" pos:column="52"/></name><operator pos:line="14" pos:column="52">.<pos:position pos:line="14" pos:column="53"/></operator><name pos:line="14" pos:column="53">payloadSize<pos:position pos:line="14" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="66"/></expr_stmt>

    <switch pos:line="16" pos:column="5">switch <condition pos:line="16" pos:column="12">(<expr><name><name pos:line="16" pos:column="13">le<pos:position pos:line="16" pos:column="15"/></name><operator pos:line="16" pos:column="15">.<pos:position pos:line="16" pos:column="16"/></operator><name pos:line="16" pos:column="16">state<pos:position pos:line="16" pos:column="21"/></name></name></expr>)<pos:position pos:line="16" pos:column="22"/></condition> <block pos:line="16" pos:column="23">{

    <case pos:line="18" pos:column="5">case <expr><name><name pos:line="18" pos:column="10">LoadingEntry<pos:position pos:line="18" pos:column="22"/></name><operator pos:line="18" pos:column="22">::<pos:position pos:line="18" pos:column="24"/></operator><name pos:line="18" pos:column="24">leEmpty<pos:position pos:line="18" pos:column="31"/></name></name></expr>:<pos:position pos:line="18" pos:column="32"/></case> <block pos:line="18" pos:column="33">{
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">startNewEntry<pos:position pos:line="19" pos:column="22"/></name><argument_list pos:line="19" pos:column="22">(<argument><expr><name pos:line="19" pos:column="23">fileno<pos:position pos:line="19" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="31">slotId<pos:position pos:line="19" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="39">header<pos:position pos:line="19" pos:column="45"/></name></expr></argument>)<pos:position pos:line="19" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="47"/></expr_stmt>
        <break pos:line="20" pos:column="9">break;<pos:position pos:line="20" pos:column="15"/></break>
    }<pos:position pos:line="21" pos:column="6"/></block>

    <case pos:line="23" pos:column="5">case <expr><name><name pos:line="23" pos:column="10">LoadingEntry<pos:position pos:line="23" pos:column="22"/></name><operator pos:line="23" pos:column="22">::<pos:position pos:line="23" pos:column="24"/></operator><name pos:line="23" pos:column="24">leLoading<pos:position pos:line="23" pos:column="33"/></name></name></expr>:<pos:position pos:line="23" pos:column="34"/></case> <block pos:line="23" pos:column="35">{
        <if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><call><name pos:line="24" pos:column="13">canAdd<pos:position pos:line="24" pos:column="19"/></name><argument_list pos:line="24" pos:column="19">(<argument><expr><name pos:line="24" pos:column="20">fileno<pos:position pos:line="24" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="28">slotId<pos:position pos:line="24" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="36">header<pos:position pos:line="24" pos:column="42"/></name></expr></argument>)<pos:position pos:line="24" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="44"/></condition><then pos:line="24" pos:column="44"> <block pos:line="24" pos:column="45">{
            <expr_stmt><expr><call><name pos:line="25" pos:column="13">addSlotToEntry<pos:position pos:line="25" pos:column="27"/></name><argument_list pos:line="25" pos:column="27">(<argument><expr><name pos:line="25" pos:column="28">fileno<pos:position pos:line="25" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="36">slotId<pos:position pos:line="25" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="44">header<pos:position pos:line="25" pos:column="50"/></name></expr></argument>)<pos:position pos:line="25" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="52"/></expr_stmt>
        }<pos:position pos:line="26" pos:column="10"/></block></then> <else pos:line="26" pos:column="11">else <block pos:line="26" pos:column="16">{
            <comment type="line" pos:line="27" pos:column="13">// either the loading chain or this slot is stale;</comment>
            <comment type="line" pos:line="28" pos:column="13">// be conservative and ignore both (and any future ones)</comment>
            <expr_stmt><expr><name><name pos:line="29" pos:column="13">le<pos:position pos:line="29" pos:column="15"/></name><operator pos:line="29" pos:column="15">.<pos:position pos:line="29" pos:column="16"/></operator><name pos:line="29" pos:column="16">state<pos:position pos:line="29" pos:column="21"/></name></name> <operator pos:line="29" pos:column="22">=<pos:position pos:line="29" pos:column="23"/></operator> <name><name pos:line="29" pos:column="24">LoadingEntry<pos:position pos:line="29" pos:column="36"/></name><operator pos:line="29" pos:column="36">::<pos:position pos:line="29" pos:column="38"/></operator><name pos:line="29" pos:column="38">leCorrupted<pos:position pos:line="29" pos:column="49"/></name></name></expr>;<pos:position pos:line="29" pos:column="50"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="30" pos:column="13">freeBadEntry<pos:position pos:line="30" pos:column="25"/></name><argument_list pos:line="30" pos:column="25">(<argument><expr><name pos:line="30" pos:column="26">fileno<pos:position pos:line="30" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="34">"duplicated"<pos:position pos:line="30" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="48"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="31" pos:column="13">freeSlotIfIdle<pos:position pos:line="31" pos:column="27"/></name><argument_list pos:line="31" pos:column="27">(<argument><expr><name pos:line="31" pos:column="28">slotId<pos:position pos:line="31" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="36">slotId<pos:position pos:line="31" pos:column="42"/></name> <operator pos:line="31" pos:column="43">==<pos:position pos:line="31" pos:column="45"/></operator> <name><name pos:line="31" pos:column="46">header<pos:position pos:line="31" pos:column="52"/></name><operator pos:line="31" pos:column="52">.<pos:position pos:line="31" pos:column="53"/></operator><name pos:line="31" pos:column="53">firstSlot<pos:position pos:line="31" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="64"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="32" pos:column="13">++<pos:position pos:line="32" pos:column="15"/></operator><name><name pos:line="32" pos:column="15">counts<pos:position pos:line="32" pos:column="21"/></name><operator pos:line="32" pos:column="21">.<pos:position pos:line="32" pos:column="22"/></operator><name pos:line="32" pos:column="22">dupcount<pos:position pos:line="32" pos:column="30"/></name></name></expr>;<pos:position pos:line="32" pos:column="31"/></expr_stmt>
        }<pos:position pos:line="33" pos:column="10"/></block></else></if>
        <break pos:line="34" pos:column="9">break;<pos:position pos:line="34" pos:column="15"/></break>
    }<pos:position pos:line="35" pos:column="6"/></block>

    <case pos:line="37" pos:column="5">case <expr><name><name pos:line="37" pos:column="10">LoadingEntry<pos:position pos:line="37" pos:column="22"/></name><operator pos:line="37" pos:column="22">::<pos:position pos:line="37" pos:column="24"/></operator><name pos:line="37" pos:column="24">leLoaded<pos:position pos:line="37" pos:column="32"/></name></name></expr>:<pos:position pos:line="37" pos:column="33"/></case> <block pos:line="37" pos:column="34">{
        <comment type="line" pos:line="38" pos:column="9">// either the previously loaded chain or this slot is stale;</comment>
        <comment type="line" pos:line="39" pos:column="9">// be conservative and ignore both (and any future ones)</comment>
        <expr_stmt><expr><name><name pos:line="40" pos:column="9">le<pos:position pos:line="40" pos:column="11"/></name><operator pos:line="40" pos:column="11">.<pos:position pos:line="40" pos:column="12"/></operator><name pos:line="40" pos:column="12">state<pos:position pos:line="40" pos:column="17"/></name></name> <operator pos:line="40" pos:column="18">=<pos:position pos:line="40" pos:column="19"/></operator> <name><name pos:line="40" pos:column="20">LoadingEntry<pos:position pos:line="40" pos:column="32"/></name><operator pos:line="40" pos:column="32">::<pos:position pos:line="40" pos:column="34"/></operator><name pos:line="40" pos:column="34">leCorrupted<pos:position pos:line="40" pos:column="45"/></name></name></expr>;<pos:position pos:line="40" pos:column="46"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="41" pos:column="9">sd<pos:position pos:line="41" pos:column="11"/></name><operator pos:line="41" pos:column="11">-&gt;<pos:position pos:line="41" pos:column="16"/></operator><name pos:line="41" pos:column="13">map<pos:position pos:line="41" pos:column="16"/></name><operator pos:line="41" pos:column="16">-&gt;<pos:position pos:line="41" pos:column="21"/></operator><name pos:line="41" pos:column="18">freeEntry<pos:position pos:line="41" pos:column="27"/></name></name><argument_list pos:line="41" pos:column="27">(<argument><expr><name pos:line="41" pos:column="28">fileno<pos:position pos:line="41" pos:column="34"/></name></expr></argument>)<pos:position pos:line="41" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="36"/></expr_stmt> <comment type="line" pos:line="41" pos:column="37">// may not be immediately successful</comment>
        <expr_stmt><expr><call><name pos:line="42" pos:column="9">freeSlotIfIdle<pos:position pos:line="42" pos:column="23"/></name><argument_list pos:line="42" pos:column="23">(<argument><expr><name pos:line="42" pos:column="24">slotId<pos:position pos:line="42" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="32">slotId<pos:position pos:line="42" pos:column="38"/></name> <operator pos:line="42" pos:column="39">==<pos:position pos:line="42" pos:column="41"/></operator> <name><name pos:line="42" pos:column="42">header<pos:position pos:line="42" pos:column="48"/></name><operator pos:line="42" pos:column="48">.<pos:position pos:line="42" pos:column="49"/></operator><name pos:line="42" pos:column="49">firstSlot<pos:position pos:line="42" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="60"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="43" pos:column="9">++<pos:position pos:line="43" pos:column="11"/></operator><name><name pos:line="43" pos:column="11">counts<pos:position pos:line="43" pos:column="17"/></name><operator pos:line="43" pos:column="17">.<pos:position pos:line="43" pos:column="18"/></operator><name pos:line="43" pos:column="18">dupcount<pos:position pos:line="43" pos:column="26"/></name></name></expr>;<pos:position pos:line="43" pos:column="27"/></expr_stmt>
        <break pos:line="44" pos:column="9">break;<pos:position pos:line="44" pos:column="15"/></break>
    }<pos:position pos:line="45" pos:column="6"/></block>

    <case pos:line="47" pos:column="5">case <expr><name><name pos:line="47" pos:column="10">LoadingEntry<pos:position pos:line="47" pos:column="22"/></name><operator pos:line="47" pos:column="22">::<pos:position pos:line="47" pos:column="24"/></operator><name pos:line="47" pos:column="24">leCorrupted<pos:position pos:line="47" pos:column="35"/></name></name></expr>:<pos:position pos:line="47" pos:column="36"/></case> <block pos:line="47" pos:column="37">{
        <comment type="line" pos:line="48" pos:column="9">// previously seen slots messed things up so we must ignore this one</comment>
        <expr_stmt><expr><call><name pos:line="49" pos:column="9">freeSlotIfIdle<pos:position pos:line="49" pos:column="23"/></name><argument_list pos:line="49" pos:column="23">(<argument><expr><name pos:line="49" pos:column="24">slotId<pos:position pos:line="49" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="49" pos:column="32">false<pos:position pos:line="49" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="39"/></expr_stmt>
        <break pos:line="50" pos:column="9">break;<pos:position pos:line="50" pos:column="15"/></break>
    }<pos:position pos:line="51" pos:column="6"/></block>

    <case pos:line="53" pos:column="5">case <expr><name><name pos:line="53" pos:column="10">LoadingEntry<pos:position pos:line="53" pos:column="22"/></name><operator pos:line="53" pos:column="22">::<pos:position pos:line="53" pos:column="24"/></operator><name pos:line="53" pos:column="24">leIgnored<pos:position pos:line="53" pos:column="33"/></name></name></expr>:<pos:position pos:line="53" pos:column="34"/></case> <block pos:line="53" pos:column="35">{
        <comment type="line" pos:line="54" pos:column="9">// already replaced by a fresher or colliding from-network entry</comment>
        <expr_stmt><expr><call><name pos:line="55" pos:column="9">freeSlotIfIdle<pos:position pos:line="55" pos:column="23"/></name><argument_list pos:line="55" pos:column="23">(<argument><expr><name pos:line="55" pos:column="24">slotId<pos:position pos:line="55" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="55" pos:column="32">false<pos:position pos:line="55" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="39"/></expr_stmt>
        <break pos:line="56" pos:column="9">break;<pos:position pos:line="56" pos:column="15"/></break>
    }<pos:position pos:line="57" pos:column="6"/></block>
    }<pos:position pos:line="58" pos:column="6"/></block></switch>
}<pos:position pos:line="59" pos:column="2"/></block></function></unit>
