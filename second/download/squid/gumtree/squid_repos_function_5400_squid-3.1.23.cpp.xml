<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5400_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">Trie<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type>
<name><name pos:line="2" pos:column="1">ESICustomParser<pos:position pos:line="2" pos:column="16"/></name><operator pos:line="2" pos:column="16">::<pos:position pos:line="2" pos:column="18"/></operator><name pos:line="2" pos:column="18">GetTrie<pos:position pos:line="2" pos:column="25"/></name></name><parameter_list pos:line="2" pos:column="25">()<pos:position pos:line="2" pos:column="27"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">SearchTrie<pos:position pos:line="4" pos:column="19"/></name></expr>)<pos:position pos:line="4" pos:column="20"/></condition><then pos:line="4" pos:column="20">
        <block type="pseudo"><return pos:line="5" pos:column="9">return <expr><name pos:line="5" pos:column="16">SearchTrie<pos:position pos:line="5" pos:column="26"/></name></expr>;<pos:position pos:line="5" pos:column="27"/></return></block></then></if>

    <expr_stmt><expr><name pos:line="7" pos:column="5">SearchTrie<pos:position pos:line="7" pos:column="15"/></name> <operator pos:line="7" pos:column="16">=<pos:position pos:line="7" pos:column="17"/></operator> <operator pos:line="7" pos:column="18">new<pos:position pos:line="7" pos:column="21"/></operator> <call><name pos:line="7" pos:column="22">Trie<pos:position pos:line="7" pos:column="26"/></name><argument_list pos:line="7" pos:column="26">(<argument><expr><operator pos:line="7" pos:column="27">new<pos:position pos:line="7" pos:column="30"/></operator> <name pos:line="7" pos:column="31">TrieCaseless<pos:position pos:line="7" pos:column="43"/></name></expr></argument>)<pos:position pos:line="7" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="45"/></expr_stmt>

    <decl_stmt><decl><specifier pos:line="9" pos:column="5">static<pos:position pos:line="9" pos:column="11"/></specifier> <type><specifier pos:line="9" pos:column="12">const<pos:position pos:line="9" pos:column="17"/></specifier> <name pos:line="9" pos:column="18">ESITAG_t<pos:position pos:line="9" pos:column="26"/></name></type> <name pos:line="9" pos:column="27">ESITAG_value<pos:position pos:line="9" pos:column="39"/></name> <init pos:line="9" pos:column="40">= <expr><name pos:line="9" pos:column="42">ESITAG<pos:position pos:line="9" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="49"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="11" pos:column="5">assert<pos:position pos:line="11" pos:column="11"/></name> <argument_list pos:line="11" pos:column="12">(<argument><expr><call><name><name pos:line="11" pos:column="13">SearchTrie<pos:position pos:line="11" pos:column="23"/></name><operator pos:line="11" pos:column="23">-&gt;<pos:position pos:line="11" pos:column="28"/></operator><name pos:line="11" pos:column="25">add<pos:position pos:line="11" pos:column="28"/></name></name>
            <argument_list pos:line="12" pos:column="13">(<argument><expr><literal type="string" pos:line="12" pos:column="14">"&lt;esi:"<pos:position pos:line="12" pos:column="24"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="12" pos:column="22">5<pos:position pos:line="12" pos:column="23"/></literal></expr></argument>,<argument><expr><operator pos:line="12" pos:column="24">(<pos:position pos:line="12" pos:column="25"/></operator><name pos:line="12" pos:column="25">void<pos:position pos:line="12" pos:column="29"/></name> <operator pos:line="12" pos:column="30">*<pos:position pos:line="12" pos:column="31"/></operator><operator pos:line="12" pos:column="31">)<pos:position pos:line="12" pos:column="32"/></operator><operator pos:line="12" pos:column="32">&amp;<pos:position pos:line="12" pos:column="37"/></operator><name pos:line="12" pos:column="33">ESITAG_value<pos:position pos:line="12" pos:column="45"/></name></expr></argument>)<pos:position pos:line="12" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="48"/></expr_stmt>

    <decl_stmt><decl><specifier pos:line="14" pos:column="5">static<pos:position pos:line="14" pos:column="11"/></specifier> <type><specifier pos:line="14" pos:column="12">const<pos:position pos:line="14" pos:column="17"/></specifier> <name pos:line="14" pos:column="18">ESITAG_t<pos:position pos:line="14" pos:column="26"/></name></type> <name pos:line="14" pos:column="27">ESIENDTAG_value<pos:position pos:line="14" pos:column="42"/></name> <init pos:line="14" pos:column="43">= <expr><name pos:line="14" pos:column="45">ESIENDTAG<pos:position pos:line="14" pos:column="54"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="55"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="16" pos:column="5">assert<pos:position pos:line="16" pos:column="11"/></name> <argument_list pos:line="16" pos:column="12">(<argument><expr><call><name><name pos:line="16" pos:column="13">SearchTrie<pos:position pos:line="16" pos:column="23"/></name><operator pos:line="16" pos:column="23">-&gt;<pos:position pos:line="16" pos:column="28"/></operator><name pos:line="16" pos:column="25">add<pos:position pos:line="16" pos:column="28"/></name></name>
            <argument_list pos:line="17" pos:column="13">(<argument><expr><literal type="string" pos:line="17" pos:column="14">"&lt;/esi:"<pos:position pos:line="17" pos:column="25"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="17" pos:column="23">6<pos:position pos:line="17" pos:column="24"/></literal></expr></argument>,<argument><expr><operator pos:line="17" pos:column="25">(<pos:position pos:line="17" pos:column="26"/></operator><name pos:line="17" pos:column="26">void<pos:position pos:line="17" pos:column="30"/></name> <operator pos:line="17" pos:column="31">*<pos:position pos:line="17" pos:column="32"/></operator><operator pos:line="17" pos:column="32">)<pos:position pos:line="17" pos:column="33"/></operator><operator pos:line="17" pos:column="33">&amp;<pos:position pos:line="17" pos:column="38"/></operator><name pos:line="17" pos:column="34">ESIENDTAG_value<pos:position pos:line="17" pos:column="49"/></name></expr></argument>)<pos:position pos:line="17" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="52"/></expr_stmt>

    <decl_stmt><decl><specifier pos:line="19" pos:column="5">static<pos:position pos:line="19" pos:column="11"/></specifier> <type><specifier pos:line="19" pos:column="12">const<pos:position pos:line="19" pos:column="17"/></specifier> <name pos:line="19" pos:column="18">ESITAG_t<pos:position pos:line="19" pos:column="26"/></name></type> <name pos:line="19" pos:column="27">ESICOMMENT_value<pos:position pos:line="19" pos:column="43"/></name> <init pos:line="19" pos:column="44">= <expr><name pos:line="19" pos:column="46">ESICOMMENT<pos:position pos:line="19" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="19" pos:column="57"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="21" pos:column="5">assert<pos:position pos:line="21" pos:column="11"/></name> <argument_list pos:line="21" pos:column="12">(<argument><expr><call><name><name pos:line="21" pos:column="13">SearchTrie<pos:position pos:line="21" pos:column="23"/></name><operator pos:line="21" pos:column="23">-&gt;<pos:position pos:line="21" pos:column="28"/></operator><name pos:line="21" pos:column="25">add<pos:position pos:line="21" pos:column="28"/></name></name>
            <argument_list pos:line="22" pos:column="13">(<argument><expr><literal type="string" pos:line="22" pos:column="14">"&lt;!--"<pos:position pos:line="22" pos:column="23"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="22" pos:column="21">4<pos:position pos:line="22" pos:column="22"/></literal></expr></argument>,<argument><expr><operator pos:line="22" pos:column="23">(<pos:position pos:line="22" pos:column="24"/></operator><name pos:line="22" pos:column="24">void<pos:position pos:line="22" pos:column="28"/></name> <operator pos:line="22" pos:column="29">*<pos:position pos:line="22" pos:column="30"/></operator><operator pos:line="22" pos:column="30">)<pos:position pos:line="22" pos:column="31"/></operator><operator pos:line="22" pos:column="31">&amp;<pos:position pos:line="22" pos:column="36"/></operator><name pos:line="22" pos:column="32">ESICOMMENT_value<pos:position pos:line="22" pos:column="48"/></name></expr></argument>)<pos:position pos:line="22" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="51"/></expr_stmt>

    <return pos:line="24" pos:column="5">return <expr><name pos:line="24" pos:column="12">SearchTrie<pos:position pos:line="24" pos:column="22"/></name></expr>;<pos:position pos:line="24" pos:column="23"/></return>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
