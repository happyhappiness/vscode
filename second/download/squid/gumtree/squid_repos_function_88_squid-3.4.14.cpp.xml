<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_88_squid-3.4.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier>
<type><name pos:line="2" pos:column="1">int<pos:position pos:line="2" pos:column="4"/></name></type>
<name pos:line="3" pos:column="1">makelinebuffered<pos:position pos:line="3" pos:column="17"/></name><parameter_list pos:line="3" pos:column="17">( <parameter><decl><type><name pos:line="3" pos:column="19">FILE<pos:position pos:line="3" pos:column="23"/></name><modifier pos:line="3" pos:column="23">*<pos:position pos:line="3" pos:column="24"/></modifier></type> <name pos:line="3" pos:column="25">fp<pos:position pos:line="3" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="3" pos:column="29">const<pos:position pos:line="3" pos:column="34"/></specifier> <name pos:line="3" pos:column="35">char<pos:position pos:line="3" pos:column="39"/></name><modifier pos:line="3" pos:column="39">*<pos:position pos:line="3" pos:column="40"/></modifier></type> <name pos:line="3" pos:column="41">fn<pos:position pos:line="3" pos:column="43"/></name> <init pos:line="3" pos:column="44">= <expr><literal type="number" pos:line="3" pos:column="46">0<pos:position pos:line="3" pos:column="47"/></literal></expr></init></decl></parameter> )<pos:position pos:line="3" pos:column="49"/></parameter_list>
<comment type="line" pos:line="4" pos:column="1">// purpose: make the given FILE line buffered</comment>
<comment type="line" pos:line="5" pos:column="1">// paramtr: fp (IO): file pointer which to put into line buffer mode</comment>
<comment type="line" pos:line="6" pos:column="1">//          fn (IN): name of file to print in case of error</comment>
<comment type="line" pos:line="7" pos:column="1">// returns: 0 is ok, -1 to indicate an error</comment>
<comment type="line" pos:line="8" pos:column="1">// warning: error messages will already be printed</comment>
<block pos:line="9" pos:column="1">{
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">( <expr><call><name pos:line="10" pos:column="10">setvbuf<pos:position pos:line="10" pos:column="17"/></name><argument_list pos:line="10" pos:column="17">( <argument><expr><name pos:line="10" pos:column="19">fp<pos:position pos:line="10" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="23">0<pos:position pos:line="10" pos:column="24"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="26">_IOLBF<pos:position pos:line="10" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="34">0<pos:position pos:line="10" pos:column="35"/></literal></expr></argument> )<pos:position pos:line="10" pos:column="37"/></argument_list></call> <operator pos:line="10" pos:column="38">==<pos:position pos:line="10" pos:column="40"/></operator> <literal type="number" pos:line="10" pos:column="41">0<pos:position pos:line="10" pos:column="42"/></literal></expr> )<pos:position pos:line="10" pos:column="44"/></condition><then pos:line="10" pos:column="44"> <block pos:line="10" pos:column="45">{
        <comment type="line" pos:line="11" pos:column="9">// ok</comment>
        <return pos:line="12" pos:column="9">return <expr><literal type="number" pos:line="12" pos:column="16">0<pos:position pos:line="12" pos:column="17"/></literal></expr>;<pos:position pos:line="12" pos:column="18"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then> <else pos:line="13" pos:column="7">else <block pos:line="13" pos:column="12">{
        <comment type="line" pos:line="14" pos:column="9">// error</comment>
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">fprintf<pos:position pos:line="15" pos:column="16"/></name><argument_list pos:line="15" pos:column="16">( <argument><expr><name pos:line="15" pos:column="18">stderr<pos:position pos:line="15" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="26">"unable to make \"%s\" line buffered: %s\n"<pos:position pos:line="15" pos:column="69"/></literal></expr></argument>,
                 <argument><expr><ternary><condition><expr><name pos:line="16" pos:column="18">fn<pos:position pos:line="16" pos:column="20"/></name></expr> ?<pos:position pos:line="16" pos:column="22"/></condition><then pos:line="16" pos:column="22"> <expr><name pos:line="16" pos:column="23">fn<pos:position pos:line="16" pos:column="25"/></name></expr> <pos:position pos:line="16" pos:column="26"/></then><else pos:line="16" pos:column="26">: <expr><literal type="string" pos:line="16" pos:column="28">""<pos:position pos:line="16" pos:column="30"/></literal></expr></else></ternary></expr></argument>, <argument><expr><call><name pos:line="16" pos:column="32">strerror<pos:position pos:line="16" pos:column="40"/></name><argument_list pos:line="16" pos:column="40">(<argument><expr><name pos:line="16" pos:column="41">errno<pos:position pos:line="16" pos:column="46"/></name></expr></argument>)<pos:position pos:line="16" pos:column="47"/></argument_list></call></expr></argument> )<pos:position pos:line="16" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="50"/></expr_stmt>
        <return pos:line="17" pos:column="9">return <expr><operator pos:line="17" pos:column="16">-<pos:position pos:line="17" pos:column="17"/></operator><literal type="number" pos:line="17" pos:column="17">1<pos:position pos:line="17" pos:column="18"/></literal></expr>;<pos:position pos:line="17" pos:column="19"/></return>
    }<pos:position pos:line="18" pos:column="6"/></block></else></if>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
