<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3903_squid-3.5.27.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">Adaptation<pos:position pos:line="1" pos:column="11"/></name><operator pos:line="1" pos:column="11">::<pos:position pos:line="1" pos:column="13"/></operator><name pos:line="1" pos:column="13">ServicePointer<pos:position pos:line="1" pos:column="27"/></name></name></type>
<name><name pos:line="2" pos:column="1">Adaptation<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">ServicePlan<pos:position pos:line="2" pos:column="24"/></name><operator pos:line="2" pos:column="24">::<pos:position pos:line="2" pos:column="26"/></operator><name pos:line="2" pos:column="26">replacement<pos:position pos:line="2" pos:column="37"/></name></name><parameter_list pos:line="2" pos:column="37">(<parameter><decl><type><specifier pos:line="2" pos:column="38">const<pos:position pos:line="2" pos:column="43"/></specifier> <name pos:line="2" pos:column="44">ServiceFilter<pos:position pos:line="2" pos:column="57"/></name> <modifier pos:line="2" pos:column="58">&amp;<pos:position pos:line="2" pos:column="63"/></modifier></type><name pos:line="2" pos:column="59">filter<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="66"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">!<pos:position pos:line="4" pos:column="10"/></operator><name pos:line="4" pos:column="10">atEof<pos:position pos:line="4" pos:column="15"/></name> <operator pos:line="4" pos:column="16">&amp;&amp;<pos:position pos:line="4" pos:column="26"/></operator> <operator pos:line="4" pos:column="19">!<pos:position pos:line="4" pos:column="20"/></operator><call><name><name pos:line="4" pos:column="20">group<pos:position pos:line="4" pos:column="25"/></name><operator pos:line="4" pos:column="25">-&gt;<pos:position pos:line="4" pos:column="30"/></operator><name pos:line="4" pos:column="27">findReplacement<pos:position pos:line="4" pos:column="42"/></name></name><argument_list pos:line="4" pos:column="42">(<argument><expr><name pos:line="4" pos:column="43">filter<pos:position pos:line="4" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="4" pos:column="51">++<pos:position pos:line="4" pos:column="53"/></operator><name pos:line="4" pos:column="53">pos<pos:position pos:line="4" pos:column="56"/></name></expr></argument>)<pos:position pos:line="4" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="58"/></condition><then pos:line="4" pos:column="58">
        <block type="pseudo"><expr_stmt><expr><name pos:line="5" pos:column="9">atEof<pos:position pos:line="5" pos:column="14"/></name> <operator pos:line="5" pos:column="15">=<pos:position pos:line="5" pos:column="16"/></operator> <literal type="boolean" pos:line="5" pos:column="17">true<pos:position pos:line="5" pos:column="21"/></literal></expr>;<pos:position pos:line="5" pos:column="22"/></expr_stmt></block></then></if>
    <return pos:line="6" pos:column="5">return <expr><call><name pos:line="6" pos:column="12">current<pos:position pos:line="6" pos:column="19"/></name><argument_list pos:line="6" pos:column="19">()<pos:position pos:line="6" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="22"/></return>
}<pos:position pos:line="7" pos:column="2"/></block></function></unit>
