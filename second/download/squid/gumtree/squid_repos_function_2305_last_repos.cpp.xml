<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2305_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int64_t<pos:position pos:line="1" pos:column="8"/></name></type>
<name><name pos:line="2" pos:column="1">HttpHeaderEntry<pos:position pos:line="2" pos:column="16"/></name><operator pos:line="2" pos:column="16">::<pos:position pos:line="2" pos:column="18"/></operator><name pos:line="2" pos:column="18">getInt64<pos:position pos:line="2" pos:column="26"/></name></name><parameter_list pos:line="2" pos:column="26">()<pos:position pos:line="2" pos:column="28"/></parameter_list> <specifier pos:line="2" pos:column="29">const<pos:position pos:line="2" pos:column="34"/></specifier>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int64_t<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">val<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><operator pos:line="4" pos:column="19">-<pos:position pos:line="4" pos:column="20"/></operator><literal type="number" pos:line="4" pos:column="20">1<pos:position pos:line="4" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">bool<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">ok<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><call><name pos:line="5" pos:column="21">httpHeaderParseOffset<pos:position pos:line="5" pos:column="42"/></name><argument_list pos:line="5" pos:column="42">(<argument><expr><call><name><name pos:line="5" pos:column="43">value<pos:position pos:line="5" pos:column="48"/></name><operator pos:line="5" pos:column="48">.<pos:position pos:line="5" pos:column="49"/></operator><name pos:line="5" pos:column="49">termedBuf<pos:position pos:line="5" pos:column="58"/></name></name><argument_list pos:line="5" pos:column="58">()<pos:position pos:line="5" pos:column="60"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="5" pos:column="62">&amp;<pos:position pos:line="5" pos:column="67"/></operator><name pos:line="5" pos:column="63">val<pos:position pos:line="5" pos:column="66"/></name></expr></argument>)<pos:position pos:line="5" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="68"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">httpHeaderNoteParsedEntry<pos:position pos:line="6" pos:column="30"/></name><argument_list pos:line="6" pos:column="30">(<argument><expr><name pos:line="6" pos:column="31">id<pos:position pos:line="6" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="35">value<pos:position pos:line="6" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="6" pos:column="42">!<pos:position pos:line="6" pos:column="43"/></operator><name pos:line="6" pos:column="43">ok<pos:position pos:line="6" pos:column="45"/></name></expr></argument>)<pos:position pos:line="6" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="47"/></expr_stmt>
    <return pos:line="7" pos:column="5">return <expr><name pos:line="7" pos:column="12">val<pos:position pos:line="7" pos:column="15"/></name></expr>;<pos:position pos:line="7" pos:column="16"/></return> <comment type="line" pos:line="7" pos:column="17">// remains -1 if !ok (XXX: bad method API)</comment>
}<pos:position pos:line="8" pos:column="2"/></block></function></unit>
