<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_function_1580.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">StoreEntry<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">vappendf<pos:position pos:line="2" pos:column="21"/></name></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><specifier pos:line="2" pos:column="22">const<pos:position pos:line="2" pos:column="27"/></specifier> <name pos:line="2" pos:column="28">char<pos:position pos:line="2" pos:column="32"/></name> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier></type><name pos:line="2" pos:column="34">fmt<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="39">va_list<pos:position pos:line="2" pos:column="46"/></name></type> <name pos:line="2" pos:column="47">vargs<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="53"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">LOCAL_ARRAY<pos:position pos:line="4" pos:column="16"/></name><argument_list pos:line="4" pos:column="16">(<argument><expr><name pos:line="4" pos:column="17">char<pos:position pos:line="4" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="23">buf<pos:position pos:line="4" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="28">4096<pos:position pos:line="4" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="5" pos:column="5">*<pos:position pos:line="5" pos:column="6"/></operator><name pos:line="5" pos:column="6">buf<pos:position pos:line="5" pos:column="9"/></name> <operator pos:line="5" pos:column="10">=<pos:position pos:line="5" pos:column="11"/></operator> <literal type="number" pos:line="5" pos:column="12">0<pos:position pos:line="5" pos:column="13"/></literal></expr>;<pos:position pos:line="5" pos:column="14"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">x<pos:position pos:line="6" pos:column="10"/></name></decl>;<pos:position pos:line="6" pos:column="11"/></decl_stmt>

<cpp:ifdef pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">ifdef<pos:position pos:line="8" pos:column="7"/></cpp:directive> <name pos:line="8" pos:column="8">VA_COPY<pos:position pos:line="8" pos:column="15"/></name></cpp:ifdef>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">va_args<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">ap<pos:position pos:line="9" pos:column="15"/></name></decl>;<pos:position pos:line="9" pos:column="16"/></decl_stmt>
    <comment type="block" pos:line="10" pos:column="5">/* Fix of bug 753r. The value of vargs is undefined
     * after vsnprintf() returns. Make a copy of vargs
     * incase we loop around and call vsnprintf() again.
     */</comment>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">VA_COPY<pos:position pos:line="14" pos:column="12"/></name><argument_list pos:line="14" pos:column="12">(<argument><expr><name pos:line="14" pos:column="13">ap<pos:position pos:line="14" pos:column="15"/></name></expr></argument>,<argument><expr><name pos:line="14" pos:column="16">vargs<pos:position pos:line="14" pos:column="21"/></name></expr></argument>)<pos:position pos:line="14" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name pos:line="15" pos:column="5">errno<pos:position pos:line="15" pos:column="10"/></name> <operator pos:line="15" pos:column="11">=<pos:position pos:line="15" pos:column="12"/></operator> <literal type="number" pos:line="15" pos:column="13">0<pos:position pos:line="15" pos:column="14"/></literal></expr>;<pos:position pos:line="15" pos:column="15"/></expr_stmt>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><operator pos:line="16" pos:column="9">(<pos:position pos:line="16" pos:column="10"/></operator><name pos:line="16" pos:column="10">x<pos:position pos:line="16" pos:column="11"/></name> <operator pos:line="16" pos:column="12">=<pos:position pos:line="16" pos:column="13"/></operator> <call><name pos:line="16" pos:column="14">vsnprintf<pos:position pos:line="16" pos:column="23"/></name><argument_list pos:line="16" pos:column="23">(<argument><expr><name pos:line="16" pos:column="24">buf<pos:position pos:line="16" pos:column="27"/></name></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="29">sizeof<argument_list pos:line="16" pos:column="35">(<argument><expr><name pos:line="16" pos:column="36">buf<pos:position pos:line="16" pos:column="39"/></name></expr></argument>)<pos:position pos:line="16" pos:column="40"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="16" pos:column="42">fmt<pos:position pos:line="16" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="47">ap<pos:position pos:line="16" pos:column="49"/></name></expr></argument>)<pos:position pos:line="16" pos:column="50"/></argument_list></call><operator pos:line="16" pos:column="50">)<pos:position pos:line="16" pos:column="51"/></operator> <operator pos:line="16" pos:column="52">&lt;<pos:position pos:line="16" pos:column="56"/></operator> <literal type="number" pos:line="16" pos:column="54">0<pos:position pos:line="16" pos:column="55"/></literal></expr>)<pos:position pos:line="16" pos:column="56"/></condition><then pos:line="16" pos:column="56"> <block pos:line="16" pos:column="57">{
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">fatal<pos:position pos:line="17" pos:column="14"/></name><argument_list pos:line="17" pos:column="14">(<argument><expr><call><name pos:line="17" pos:column="15">xstrerr<pos:position pos:line="17" pos:column="22"/></name><argument_list pos:line="17" pos:column="22">(<argument><expr><name pos:line="17" pos:column="23">errno<pos:position pos:line="17" pos:column="28"/></name></expr></argument>)<pos:position pos:line="17" pos:column="29"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="31"/></expr_stmt>
        <return pos:line="18" pos:column="9">return;<pos:position pos:line="18" pos:column="16"/></return>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">va_end<pos:position pos:line="20" pos:column="11"/></name><argument_list pos:line="20" pos:column="11">(<argument><expr><name pos:line="20" pos:column="12">ap<pos:position pos:line="20" pos:column="14"/></name></expr></argument>)<pos:position pos:line="20" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="16"/></expr_stmt>
<cpp:else pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">else<pos:position pos:line="21" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="21" pos:column="7">/* VA_COPY */</comment>
    <expr_stmt><expr><name pos:line="22" pos:column="5">errno<pos:position pos:line="22" pos:column="10"/></name> <operator pos:line="22" pos:column="11">=<pos:position pos:line="22" pos:column="12"/></operator> <literal type="number" pos:line="22" pos:column="13">0<pos:position pos:line="22" pos:column="14"/></literal></expr>;<pos:position pos:line="22" pos:column="15"/></expr_stmt>
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><operator pos:line="23" pos:column="9">(<pos:position pos:line="23" pos:column="10"/></operator><name pos:line="23" pos:column="10">x<pos:position pos:line="23" pos:column="11"/></name> <operator pos:line="23" pos:column="12">=<pos:position pos:line="23" pos:column="13"/></operator> <call><name pos:line="23" pos:column="14">vsnprintf<pos:position pos:line="23" pos:column="23"/></name><argument_list pos:line="23" pos:column="23">(<argument><expr><name pos:line="23" pos:column="24">buf<pos:position pos:line="23" pos:column="27"/></name></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="29">sizeof<argument_list pos:line="23" pos:column="35">(<argument><expr><name pos:line="23" pos:column="36">buf<pos:position pos:line="23" pos:column="39"/></name></expr></argument>)<pos:position pos:line="23" pos:column="40"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="23" pos:column="42">fmt<pos:position pos:line="23" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="47">vargs<pos:position pos:line="23" pos:column="52"/></name></expr></argument>)<pos:position pos:line="23" pos:column="53"/></argument_list></call><operator pos:line="23" pos:column="53">)<pos:position pos:line="23" pos:column="54"/></operator> <operator pos:line="23" pos:column="55">&lt;<pos:position pos:line="23" pos:column="59"/></operator> <literal type="number" pos:line="23" pos:column="57">0<pos:position pos:line="23" pos:column="58"/></literal></expr>)<pos:position pos:line="23" pos:column="59"/></condition><then pos:line="23" pos:column="59"> <block pos:line="23" pos:column="60">{
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">fatal<pos:position pos:line="24" pos:column="14"/></name><argument_list pos:line="24" pos:column="14">(<argument><expr><call><name pos:line="24" pos:column="15">xstrerr<pos:position pos:line="24" pos:column="22"/></name><argument_list pos:line="24" pos:column="22">(<argument><expr><name pos:line="24" pos:column="23">errno<pos:position pos:line="24" pos:column="28"/></name></expr></argument>)<pos:position pos:line="24" pos:column="29"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="31"/></expr_stmt>
        <return pos:line="25" pos:column="9">return;<pos:position pos:line="25" pos:column="16"/></return>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>
<cpp:endif pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">endif<pos:position pos:line="27" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="27" pos:column="8">/*VA_COPY*/</comment>

    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><name pos:line="29" pos:column="9">x<pos:position pos:line="29" pos:column="10"/></name> <operator pos:line="29" pos:column="11">&lt;<pos:position pos:line="29" pos:column="15"/></operator> <cast type="static" pos:line="29" pos:column="13">static_cast<argument_list type="generic" pos:line="29" pos:column="24">&lt;<argument><expr><name pos:line="29" pos:column="25">int<pos:position pos:line="29" pos:column="28"/></name></expr></argument>&gt;<pos:position pos:line="29" pos:column="32"/></argument_list><argument_list pos:line="29" pos:column="29">(<argument><expr><sizeof pos:line="29" pos:column="30">sizeof<argument_list pos:line="29" pos:column="36">(<argument><expr><name pos:line="29" pos:column="37">buf<pos:position pos:line="29" pos:column="40"/></name></expr></argument>)<pos:position pos:line="29" pos:column="41"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="29" pos:column="42"/></argument_list></cast></expr>)<pos:position pos:line="29" pos:column="43"/></condition><then pos:line="29" pos:column="43"> <block pos:line="29" pos:column="44">{
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">append<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><name pos:line="30" pos:column="16">buf<pos:position pos:line="30" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="21">x<pos:position pos:line="30" pos:column="22"/></name></expr></argument>)<pos:position pos:line="30" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="24"/></expr_stmt>
        <return pos:line="31" pos:column="9">return;<pos:position pos:line="31" pos:column="16"/></return>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="34" pos:column="5">// okay, do it the slow way.</comment>
    <decl_stmt><decl><type><name pos:line="35" pos:column="5">char<pos:position pos:line="35" pos:column="9"/></name> <modifier pos:line="35" pos:column="10">*<pos:position pos:line="35" pos:column="11"/></modifier></type><name pos:line="35" pos:column="11">buf2<pos:position pos:line="35" pos:column="15"/></name> <init pos:line="35" pos:column="16">= <expr><operator pos:line="35" pos:column="18">new<pos:position pos:line="35" pos:column="21"/></operator> <name><name pos:line="35" pos:column="22">char<pos:position pos:line="35" pos:column="26"/></name><index pos:line="35" pos:column="26">[<expr><name pos:line="35" pos:column="27">x<pos:position pos:line="35" pos:column="28"/></name><operator pos:line="35" pos:column="28">+<pos:position pos:line="35" pos:column="29"/></operator><literal type="number" pos:line="35" pos:column="29">1<pos:position pos:line="35" pos:column="30"/></literal></expr>]<pos:position pos:line="35" pos:column="31"/></index></name></expr></init></decl>;<pos:position pos:line="35" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="36" pos:column="5">int<pos:position pos:line="36" pos:column="8"/></name></type> <name pos:line="36" pos:column="9">y<pos:position pos:line="36" pos:column="10"/></name> <init pos:line="36" pos:column="11">= <expr><call><name pos:line="36" pos:column="13">vsnprintf<pos:position pos:line="36" pos:column="22"/></name><argument_list pos:line="36" pos:column="22">(<argument><expr><name pos:line="36" pos:column="23">buf2<pos:position pos:line="36" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="29">x<pos:position pos:line="36" pos:column="30"/></name><operator pos:line="36" pos:column="30">+<pos:position pos:line="36" pos:column="31"/></operator><literal type="number" pos:line="36" pos:column="31">1<pos:position pos:line="36" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="34">fmt<pos:position pos:line="36" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="39">vargs<pos:position pos:line="36" pos:column="44"/></name></expr></argument>)<pos:position pos:line="36" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="36" pos:column="46"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">assert<pos:position pos:line="37" pos:column="11"/></name><argument_list pos:line="37" pos:column="11">(<argument><expr><name pos:line="37" pos:column="12">y<pos:position pos:line="37" pos:column="13"/></name> <operator pos:line="37" pos:column="14">&gt;=<pos:position pos:line="37" pos:column="19"/></operator> <literal type="number" pos:line="37" pos:column="17">0<pos:position pos:line="37" pos:column="18"/></literal> <operator pos:line="37" pos:column="19">&amp;&amp;<pos:position pos:line="37" pos:column="29"/></operator> <name pos:line="37" pos:column="22">y<pos:position pos:line="37" pos:column="23"/></name> <operator pos:line="37" pos:column="24">==<pos:position pos:line="37" pos:column="26"/></operator> <name pos:line="37" pos:column="27">x<pos:position pos:line="37" pos:column="28"/></name></expr></argument>)<pos:position pos:line="37" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="38" pos:column="5">append<pos:position pos:line="38" pos:column="11"/></name><argument_list pos:line="38" pos:column="11">(<argument><expr><name pos:line="38" pos:column="12">buf2<pos:position pos:line="38" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="18">y<pos:position pos:line="38" pos:column="19"/></name></expr></argument>)<pos:position pos:line="38" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="39" pos:column="5">delete<pos:position pos:line="39" pos:column="11"/></operator><index pos:line="39" pos:column="11">[]<pos:position pos:line="39" pos:column="13"/></index> <name pos:line="39" pos:column="14">buf2<pos:position pos:line="39" pos:column="18"/></name></expr>;<pos:position pos:line="39" pos:column="19"/></expr_stmt>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
