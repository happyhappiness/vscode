<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_895_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">dump_sslproxy_ssl_bump<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name pos:line="1" pos:column="36">StoreEntry<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">entry<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="55">const<pos:position pos:line="1" pos:column="60"/></specifier> <name pos:line="1" pos:column="61">char<pos:position pos:line="1" pos:column="65"/></name> <modifier pos:line="1" pos:column="66">*<pos:position pos:line="1" pos:column="67"/></modifier></type><name pos:line="1" pos:column="67">name<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="73">acl_access<pos:position pos:line="1" pos:column="83"/></name> <modifier pos:line="1" pos:column="84">*<pos:position pos:line="1" pos:column="85"/></modifier></type><name pos:line="1" pos:column="85">ssl_bump<pos:position pos:line="1" pos:column="93"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="94"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <if pos:line="3" pos:column="5">if <condition pos:line="3" pos:column="8">(<expr><name pos:line="3" pos:column="9">ssl_bump<pos:position pos:line="3" pos:column="17"/></name></expr>)<pos:position pos:line="3" pos:column="18"/></condition><then pos:line="3" pos:column="18">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="4" pos:column="9">dump_SBufList<pos:position pos:line="4" pos:column="22"/></name><argument_list pos:line="4" pos:column="22">(<argument><expr><name pos:line="4" pos:column="23">entry<pos:position pos:line="4" pos:column="28"/></name></expr></argument>, <argument><expr><call><name><name pos:line="4" pos:column="30">ssl_bump<pos:position pos:line="4" pos:column="38"/></name><operator pos:line="4" pos:column="38">-&gt;<pos:position pos:line="4" pos:column="43"/></operator><name pos:line="4" pos:column="40">treeDump<pos:position pos:line="4" pos:column="48"/></name></name><argument_list pos:line="4" pos:column="48">(<argument><expr><name pos:line="4" pos:column="49">name<pos:position pos:line="4" pos:column="53"/></name></expr></argument>, <argument><expr><lambda><capture pos:line="4" pos:column="55">[]<pos:position pos:line="4" pos:column="57"/></capture><parameter_list pos:line="4" pos:column="57">(<parameter><decl><type><specifier pos:line="4" pos:column="58">const<pos:position pos:line="4" pos:column="63"/></specifier> <name pos:line="4" pos:column="64">allow_t<pos:position pos:line="4" pos:column="71"/></name> <modifier pos:line="4" pos:column="72">&amp;<pos:position pos:line="4" pos:column="77"/></modifier></type><name pos:line="4" pos:column="73">action<pos:position pos:line="4" pos:column="79"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="80"/></parameter_list> <block pos:line="4" pos:column="81">{
        <return pos:line="5" pos:column="9">return <expr><call><name><name pos:line="5" pos:column="16">Ssl<pos:position pos:line="5" pos:column="19"/></name><operator pos:line="5" pos:column="19">::<pos:position pos:line="5" pos:column="21"/></operator><name pos:line="5" pos:column="21">BumpModeStr<pos:position pos:line="5" pos:column="32"/></name><operator pos:line="5" pos:column="32">.<pos:position pos:line="5" pos:column="33"/></operator><name pos:line="5" pos:column="33">at<pos:position pos:line="5" pos:column="35"/></name></name><argument_list pos:line="5" pos:column="35">(<argument><expr><name><name pos:line="5" pos:column="36">action<pos:position pos:line="5" pos:column="42"/></name><operator pos:line="5" pos:column="42">.<pos:position pos:line="5" pos:column="43"/></operator><name pos:line="5" pos:column="43">kind<pos:position pos:line="5" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="5" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="49"/></return>
    }<pos:position pos:line="6" pos:column="6"/></block></lambda></expr></argument>)<pos:position pos:line="6" pos:column="7"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="8"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="9"/></expr_stmt></block></then></if>
}<pos:position pos:line="7" pos:column="2"/></block></function></unit>
