<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2369_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">FwdState<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">reforward<pos:position pos:line="2" pos:column="20"/></name></name><parameter_list pos:line="2" pos:column="20">()<pos:position pos:line="2" pos:column="22"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">StoreEntry<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">e<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><name pos:line="4" pos:column="21">entry<pos:position pos:line="4" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><call><name pos:line="6" pos:column="9">EBIT_TEST<pos:position pos:line="6" pos:column="18"/></name><argument_list pos:line="6" pos:column="18">(<argument><expr><name><name pos:line="6" pos:column="19">e<pos:position pos:line="6" pos:column="20"/></name><operator pos:line="6" pos:column="20">-&gt;<pos:position pos:line="6" pos:column="25"/></operator><name pos:line="6" pos:column="22">flags<pos:position pos:line="6" pos:column="27"/></name></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="29">ENTRY_ABORTED<pos:position pos:line="6" pos:column="42"/></name></expr></argument>)<pos:position pos:line="6" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="44"/></condition><then pos:line="6" pos:column="44"> <block pos:line="6" pos:column="45">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">debugs<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><literal type="number" pos:line="7" pos:column="16">17<pos:position pos:line="7" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="20">3<pos:position pos:line="7" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="23">HERE<pos:position pos:line="7" pos:column="27"/></name> <operator pos:line="7" pos:column="28">&lt;&lt;<pos:position pos:line="7" pos:column="36"/></operator> <literal type="string" pos:line="7" pos:column="31">"entry aborted"<pos:position pos:line="7" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="48"/></expr_stmt>
        <return pos:line="8" pos:column="9">return <expr><literal type="number" pos:line="8" pos:column="16">0<pos:position pos:line="8" pos:column="17"/></literal></expr>;<pos:position pos:line="8" pos:column="18"/></return>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="11" pos:column="5">assert<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><name><name pos:line="11" pos:column="12">e<pos:position pos:line="11" pos:column="13"/></name><operator pos:line="11" pos:column="13">-&gt;<pos:position pos:line="11" pos:column="18"/></operator><name pos:line="11" pos:column="15">store_status<pos:position pos:line="11" pos:column="27"/></name></name> <operator pos:line="11" pos:column="28">==<pos:position pos:line="11" pos:column="30"/></operator> <name pos:line="11" pos:column="31">STORE_PENDING<pos:position pos:line="11" pos:column="44"/></name></expr></argument>)<pos:position pos:line="11" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">assert<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><name><name pos:line="12" pos:column="12">e<pos:position pos:line="12" pos:column="13"/></name><operator pos:line="12" pos:column="13">-&gt;<pos:position pos:line="12" pos:column="18"/></operator><name pos:line="12" pos:column="15">mem_obj<pos:position pos:line="12" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="24"/></expr_stmt>
<cpp:if pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">if<pos:position pos:line="13" pos:column="4"/></cpp:directive> <expr><name pos:line="13" pos:column="5">URL_CHECKSUM_DEBUG<pos:position pos:line="13" pos:column="23"/></name></expr></cpp:if>

    <expr_stmt><expr><call><name><name pos:line="15" pos:column="5">e<pos:position pos:line="15" pos:column="6"/></name><operator pos:line="15" pos:column="6">-&gt;<pos:position pos:line="15" pos:column="11"/></operator><name pos:line="15" pos:column="8">mem_obj<pos:position pos:line="15" pos:column="15"/></name><operator pos:line="15" pos:column="15">-&gt;<pos:position pos:line="15" pos:column="20"/></operator><name pos:line="15" pos:column="17">checkUrlChecksum<pos:position pos:line="15" pos:column="33"/></name></name><argument_list pos:line="15" pos:column="33">()<pos:position pos:line="15" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="36"/></expr_stmt>
<cpp:endif pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">endif<pos:position pos:line="16" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="18" pos:column="5">debugs<pos:position pos:line="18" pos:column="11"/></name><argument_list pos:line="18" pos:column="11">(<argument><expr><literal type="number" pos:line="18" pos:column="12">17<pos:position pos:line="18" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="16">3<pos:position pos:line="18" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="19">HERE<pos:position pos:line="18" pos:column="23"/></name> <operator pos:line="18" pos:column="24">&lt;&lt;<pos:position pos:line="18" pos:column="32"/></operator> <call><name><name pos:line="18" pos:column="27">e<pos:position pos:line="18" pos:column="28"/></name><operator pos:line="18" pos:column="28">-&gt;<pos:position pos:line="18" pos:column="33"/></operator><name pos:line="18" pos:column="30">url<pos:position pos:line="18" pos:column="33"/></name></name><argument_list pos:line="18" pos:column="33">()<pos:position pos:line="18" pos:column="35"/></argument_list></call> <operator pos:line="18" pos:column="36">&lt;&lt;<pos:position pos:line="18" pos:column="44"/></operator> <literal type="string" pos:line="18" pos:column="39">"?"<pos:position pos:line="18" pos:column="42"/></literal></expr></argument> )<pos:position pos:line="18" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="45"/></expr_stmt>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><operator pos:line="20" pos:column="9">!<pos:position pos:line="20" pos:column="10"/></operator><call><name pos:line="20" pos:column="10">EBIT_TEST<pos:position pos:line="20" pos:column="19"/></name><argument_list pos:line="20" pos:column="19">(<argument><expr><name><name pos:line="20" pos:column="20">e<pos:position pos:line="20" pos:column="21"/></name><operator pos:line="20" pos:column="21">-&gt;<pos:position pos:line="20" pos:column="26"/></operator><name pos:line="20" pos:column="23">flags<pos:position pos:line="20" pos:column="28"/></name></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="30">ENTRY_FWD_HDR_WAIT<pos:position pos:line="20" pos:column="48"/></name></expr></argument>)<pos:position pos:line="20" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="50"/></condition><then pos:line="20" pos:column="50"> <block pos:line="20" pos:column="51">{
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">debugs<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><literal type="number" pos:line="21" pos:column="16">17<pos:position pos:line="21" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="20">3<pos:position pos:line="21" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="23">HERE<pos:position pos:line="21" pos:column="27"/></name> <operator pos:line="21" pos:column="28">&lt;&lt;<pos:position pos:line="21" pos:column="36"/></operator> <literal type="string" pos:line="21" pos:column="31">"No, ENTRY_FWD_HDR_WAIT isn't set"<pos:position pos:line="21" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="67"/></expr_stmt>
        <return pos:line="22" pos:column="9">return <expr><literal type="number" pos:line="22" pos:column="16">0<pos:position pos:line="22" pos:column="17"/></literal></expr>;<pos:position pos:line="22" pos:column="18"/></return>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>

    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name pos:line="25" pos:column="9">n_tries<pos:position pos:line="25" pos:column="16"/></name> <operator pos:line="25" pos:column="17">&gt;<pos:position pos:line="25" pos:column="21"/></operator> <name><name pos:line="25" pos:column="19">Config<pos:position pos:line="25" pos:column="25"/></name><operator pos:line="25" pos:column="25">.<pos:position pos:line="25" pos:column="26"/></operator><name pos:line="25" pos:column="26">forward_max_tries<pos:position pos:line="25" pos:column="43"/></name></name></expr>)<pos:position pos:line="25" pos:column="44"/></condition><then pos:line="25" pos:column="44">
        <block type="pseudo"><return pos:line="26" pos:column="9">return <expr><literal type="number" pos:line="26" pos:column="16">0<pos:position pos:line="26" pos:column="17"/></literal></expr>;<pos:position pos:line="26" pos:column="18"/></return></block></then></if>

    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><call><name><name pos:line="28" pos:column="9">request<pos:position pos:line="28" pos:column="16"/></name><operator pos:line="28" pos:column="16">-&gt;<pos:position pos:line="28" pos:column="21"/></operator><name pos:line="28" pos:column="18">bodyNibbled<pos:position pos:line="28" pos:column="29"/></name></name><argument_list pos:line="28" pos:column="29">()<pos:position pos:line="28" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="32"/></condition><then pos:line="28" pos:column="32">
        <block type="pseudo"><return pos:line="29" pos:column="9">return <expr><literal type="number" pos:line="29" pos:column="16">0<pos:position pos:line="29" pos:column="17"/></literal></expr>;<pos:position pos:line="29" pos:column="18"/></return></block></then></if>

    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><call><name><name pos:line="31" pos:column="9">serverDestinations<pos:position pos:line="31" pos:column="27"/></name><operator pos:line="31" pos:column="27">.<pos:position pos:line="31" pos:column="28"/></operator><name pos:line="31" pos:column="28">size<pos:position pos:line="31" pos:column="32"/></name></name><argument_list pos:line="31" pos:column="32">()<pos:position pos:line="31" pos:column="34"/></argument_list></call> <operator pos:line="31" pos:column="35">&lt;=<pos:position pos:line="31" pos:column="40"/></operator> <literal type="number" pos:line="31" pos:column="38">1<pos:position pos:line="31" pos:column="39"/></literal></expr>)<pos:position pos:line="31" pos:column="40"/></condition><then pos:line="31" pos:column="40"> <block pos:line="31" pos:column="41">{
        <comment type="line" pos:line="32" pos:column="9">// NP: &lt;= 1 since total count includes the recently failed one.</comment>
        <expr_stmt><expr><call><name pos:line="33" pos:column="9">debugs<pos:position pos:line="33" pos:column="15"/></name><argument_list pos:line="33" pos:column="15">(<argument><expr><literal type="number" pos:line="33" pos:column="16">17<pos:position pos:line="33" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="20">3<pos:position pos:line="33" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="23">HERE<pos:position pos:line="33" pos:column="27"/></name> <operator pos:line="33" pos:column="28">&lt;&lt;<pos:position pos:line="33" pos:column="36"/></operator> <literal type="string" pos:line="33" pos:column="31">"No alternative forwarding paths left"<pos:position pos:line="33" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="71"/></expr_stmt>
        <return pos:line="34" pos:column="9">return <expr><literal type="number" pos:line="34" pos:column="16">0<pos:position pos:line="34" pos:column="17"/></literal></expr>;<pos:position pos:line="34" pos:column="18"/></return>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><specifier pos:line="37" pos:column="5">const<pos:position pos:line="37" pos:column="10"/></specifier> <name><name pos:line="37" pos:column="11">Http<pos:position pos:line="37" pos:column="15"/></name><operator pos:line="37" pos:column="15">::<pos:position pos:line="37" pos:column="17"/></operator><name pos:line="37" pos:column="17">StatusCode<pos:position pos:line="37" pos:column="27"/></name></name></type> <name pos:line="37" pos:column="28">s<pos:position pos:line="37" pos:column="29"/></name> <init pos:line="37" pos:column="30">= <expr><call><name><name pos:line="37" pos:column="32">e<pos:position pos:line="37" pos:column="33"/></name><operator pos:line="37" pos:column="33">-&gt;<pos:position pos:line="37" pos:column="38"/></operator><name pos:line="37" pos:column="35">getReply<pos:position pos:line="37" pos:column="43"/></name></name><argument_list pos:line="37" pos:column="43">()<pos:position pos:line="37" pos:column="45"/></argument_list></call><operator pos:line="37" pos:column="45">-&gt;<pos:position pos:line="37" pos:column="50"/></operator><call><name><name pos:line="37" pos:column="47">sline<pos:position pos:line="37" pos:column="52"/></name><operator pos:line="37" pos:column="52">.<pos:position pos:line="37" pos:column="53"/></operator><name pos:line="37" pos:column="53">status<pos:position pos:line="37" pos:column="59"/></name></name><argument_list pos:line="37" pos:column="59">()<pos:position pos:line="37" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="37" pos:column="62"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="38" pos:column="5">debugs<pos:position pos:line="38" pos:column="11"/></name><argument_list pos:line="38" pos:column="11">(<argument><expr><literal type="number" pos:line="38" pos:column="12">17<pos:position pos:line="38" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="16">3<pos:position pos:line="38" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="19">HERE<pos:position pos:line="38" pos:column="23"/></name> <operator pos:line="38" pos:column="24">&lt;&lt;<pos:position pos:line="38" pos:column="32"/></operator> <literal type="string" pos:line="38" pos:column="27">"status "<pos:position pos:line="38" pos:column="36"/></literal> <operator pos:line="38" pos:column="37">&lt;&lt;<pos:position pos:line="38" pos:column="45"/></operator> <name pos:line="38" pos:column="40">s<pos:position pos:line="38" pos:column="41"/></name></expr></argument>)<pos:position pos:line="38" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="43"/></expr_stmt>
    <return pos:line="39" pos:column="5">return <expr><call><name pos:line="39" pos:column="12">reforwardableStatus<pos:position pos:line="39" pos:column="31"/></name><argument_list pos:line="39" pos:column="31">(<argument><expr><name pos:line="39" pos:column="32">s<pos:position pos:line="39" pos:column="33"/></name></expr></argument>)<pos:position pos:line="39" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="35"/></return>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
