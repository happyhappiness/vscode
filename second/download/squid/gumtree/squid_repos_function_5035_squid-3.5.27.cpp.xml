<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5035_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ftp<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">Server<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">handlePortRequest<pos:position pos:line="2" pos:column="31"/></name></name><parameter_list pos:line="2" pos:column="31">(<parameter><decl><type><name pos:line="2" pos:column="32">String<pos:position pos:line="2" pos:column="38"/></name> <modifier pos:line="2" pos:column="39">&amp;<pos:position pos:line="2" pos:column="44"/></modifier></type><name pos:line="2" pos:column="40">cmd<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="45">String<pos:position pos:line="2" pos:column="51"/></name> <modifier pos:line="2" pos:column="52">&amp;<pos:position pos:line="2" pos:column="57"/></modifier></type><name pos:line="2" pos:column="53">params<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="60"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// TODO: Should PORT errors trigger closeDataConnection() cleanup?</comment>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">gotEpsvAll<pos:position pos:line="6" pos:column="19"/></name></expr>)<pos:position pos:line="6" pos:column="20"/></condition><then pos:line="6" pos:column="20"> <block pos:line="6" pos:column="21">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">setReply<pos:position pos:line="7" pos:column="17"/></name><argument_list pos:line="7" pos:column="17">(<argument><expr><literal type="number" pos:line="7" pos:column="18">500<pos:position pos:line="7" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="23">"Rejecting PORT after EPSV ALL"<pos:position pos:line="7" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="56"/></expr_stmt>
        <return pos:line="8" pos:column="9">return <expr><literal type="boolean" pos:line="8" pos:column="16">false<pos:position pos:line="8" pos:column="21"/></literal></expr>;<pos:position pos:line="8" pos:column="22"/></return>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">!<pos:position pos:line="11" pos:column="10"/></operator><call><name><name pos:line="11" pos:column="10">params<pos:position pos:line="11" pos:column="16"/></name><operator pos:line="11" pos:column="16">.<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="17">size<pos:position pos:line="11" pos:column="21"/></name></name><argument_list pos:line="11" pos:column="21">()<pos:position pos:line="11" pos:column="23"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="24"/></condition><then pos:line="11" pos:column="24"> <block pos:line="11" pos:column="25">{
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">setReply<pos:position pos:line="12" pos:column="17"/></name><argument_list pos:line="12" pos:column="17">(<argument><expr><literal type="number" pos:line="12" pos:column="18">501<pos:position pos:line="12" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="23">"Missing parameter"<pos:position pos:line="12" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="44"/></expr_stmt>
        <return pos:line="13" pos:column="9">return <expr><literal type="boolean" pos:line="13" pos:column="16">false<pos:position pos:line="13" pos:column="21"/></literal></expr>;<pos:position pos:line="13" pos:column="22"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name><name pos:line="16" pos:column="5">Ip<pos:position pos:line="16" pos:column="7"/></name><operator pos:line="16" pos:column="7">::<pos:position pos:line="16" pos:column="9"/></operator><name pos:line="16" pos:column="9">Address<pos:position pos:line="16" pos:column="16"/></name></name></type> <name pos:line="16" pos:column="17">cltAddr<pos:position pos:line="16" pos:column="24"/></name></decl>;<pos:position pos:line="16" pos:column="25"/></decl_stmt>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><operator pos:line="17" pos:column="9">!<pos:position pos:line="17" pos:column="10"/></operator><call><name><name pos:line="17" pos:column="10">Ftp<pos:position pos:line="17" pos:column="13"/></name><operator pos:line="17" pos:column="13">::<pos:position pos:line="17" pos:column="15"/></operator><name pos:line="17" pos:column="15">ParseIpPort<pos:position pos:line="17" pos:column="26"/></name></name><argument_list pos:line="17" pos:column="26">(<argument><expr><call><name><name pos:line="17" pos:column="27">params<pos:position pos:line="17" pos:column="33"/></name><operator pos:line="17" pos:column="33">.<pos:position pos:line="17" pos:column="34"/></operator><name pos:line="17" pos:column="34">termedBuf<pos:position pos:line="17" pos:column="43"/></name></name><argument_list pos:line="17" pos:column="43">()<pos:position pos:line="17" pos:column="45"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="17" pos:column="47">NULL<pos:position pos:line="17" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="53">cltAddr<pos:position pos:line="17" pos:column="60"/></name></expr></argument>)<pos:position pos:line="17" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="62"/></condition><then pos:line="17" pos:column="62"> <block pos:line="17" pos:column="63">{
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">setReply<pos:position pos:line="18" pos:column="17"/></name><argument_list pos:line="18" pos:column="17">(<argument><expr><literal type="number" pos:line="18" pos:column="18">501<pos:position pos:line="18" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="23">"Invalid parameter"<pos:position pos:line="18" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="44"/></expr_stmt>
        <return pos:line="19" pos:column="9">return <expr><literal type="boolean" pos:line="19" pos:column="16">false<pos:position pos:line="19" pos:column="21"/></literal></expr>;<pos:position pos:line="19" pos:column="22"/></return>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>

    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><operator pos:line="22" pos:column="9">!<pos:position pos:line="22" pos:column="10"/></operator><call><name pos:line="22" pos:column="10">createDataConnection<pos:position pos:line="22" pos:column="30"/></name><argument_list pos:line="22" pos:column="30">(<argument><expr><name pos:line="22" pos:column="31">cltAddr<pos:position pos:line="22" pos:column="38"/></name></expr></argument>)<pos:position pos:line="22" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="40"/></condition><then pos:line="22" pos:column="40">
        <block type="pseudo"><return pos:line="23" pos:column="9">return <expr><literal type="boolean" pos:line="23" pos:column="16">false<pos:position pos:line="23" pos:column="21"/></literal></expr>;<pos:position pos:line="23" pos:column="22"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="25" pos:column="5">changeState<pos:position pos:line="25" pos:column="16"/></name><argument_list pos:line="25" pos:column="16">(<argument><expr><name pos:line="25" pos:column="17">fssHandlePort<pos:position pos:line="25" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="32">"handlePortRequest"<pos:position pos:line="25" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">setDataCommand<pos:position pos:line="26" pos:column="19"/></name><argument_list pos:line="26" pos:column="19">()<pos:position pos:line="26" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="22"/></expr_stmt>
    <return pos:line="27" pos:column="5">return <expr><literal type="boolean" pos:line="27" pos:column="12">true<pos:position pos:line="27" pos:column="16"/></literal></expr>;<pos:position pos:line="27" pos:column="17"/></return> <comment type="line" pos:line="27" pos:column="18">// forward our fake PASV request</comment>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
