<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4530_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ssl<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">PeerConnector<pos:position pos:line="2" pos:column="19"/></name><operator pos:line="2" pos:column="19">::<pos:position pos:line="2" pos:column="21"/></operator><name pos:line="2" pos:column="21">swanSong<pos:position pos:line="2" pos:column="29"/></name></name><parameter_list pos:line="2" pos:column="29">()<pos:position pos:line="2" pos:column="31"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// XXX: unregister fd-closure monitoring and CommSetSelect interest, if any</comment>
    <expr_stmt><expr><call><name><name pos:line="5" pos:column="5">AsyncJob<pos:position pos:line="5" pos:column="13"/></name><operator pos:line="5" pos:column="13">::<pos:position pos:line="5" pos:column="15"/></operator><name pos:line="5" pos:column="15">swanSong<pos:position pos:line="5" pos:column="23"/></name></name><argument_list pos:line="5" pos:column="23">()<pos:position pos:line="5" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="26"/></expr_stmt>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">callback<pos:position pos:line="6" pos:column="17"/></name> <operator pos:line="6" pos:column="18">!=<pos:position pos:line="6" pos:column="20"/></operator> <name pos:line="6" pos:column="21">NULL<pos:position pos:line="6" pos:column="25"/></name></expr>)<pos:position pos:line="6" pos:column="26"/></condition><then pos:line="6" pos:column="26"> <block pos:line="6" pos:column="27">{ <comment type="line" pos:line="6" pos:column="29">// paranoid: we have left the caller waiting</comment>
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">debugs<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><literal type="number" pos:line="7" pos:column="16">83<pos:position pos:line="7" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="20">DBG_IMPORTANT<pos:position pos:line="7" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="35">"BUG: Unexpected state while connecting to a cache_peer or origin server"<pos:position pos:line="7" pos:column="108"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="109"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="110"/></expr_stmt>
        <decl_stmt><decl><type><name pos:line="8" pos:column="9">ErrorState<pos:position pos:line="8" pos:column="19"/></name> <modifier pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></modifier></type><name pos:line="8" pos:column="21">anErr<pos:position pos:line="8" pos:column="26"/></name> <init pos:line="8" pos:column="27">= <expr><operator pos:line="8" pos:column="29">new<pos:position pos:line="8" pos:column="32"/></operator> <call><name pos:line="8" pos:column="33">ErrorState<pos:position pos:line="8" pos:column="43"/></name><argument_list pos:line="8" pos:column="43">(<argument><expr><name pos:line="8" pos:column="44">ERR_GATEWAY_FAILURE<pos:position pos:line="8" pos:column="63"/></name></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="65">Http<pos:position pos:line="8" pos:column="69"/></name><operator pos:line="8" pos:column="69">::<pos:position pos:line="8" pos:column="71"/></operator><name pos:line="8" pos:column="71">scInternalServerError<pos:position pos:line="8" pos:column="92"/></name></name></expr></argument>, <argument><expr><call><name><name pos:line="8" pos:column="94">request<pos:position pos:line="8" pos:column="101"/></name><operator pos:line="8" pos:column="101">.<pos:position pos:line="8" pos:column="102"/></operator><name pos:line="8" pos:column="102">getRaw<pos:position pos:line="8" pos:column="108"/></name></name><argument_list pos:line="8" pos:column="108">()<pos:position pos:line="8" pos:column="110"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="111"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="112"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">bail<pos:position pos:line="9" pos:column="13"/></name><argument_list pos:line="9" pos:column="13">(<argument><expr><name pos:line="9" pos:column="14">anErr<pos:position pos:line="9" pos:column="19"/></name></expr></argument>)<pos:position pos:line="9" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="21"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">assert<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><operator pos:line="10" pos:column="16">!<pos:position pos:line="10" pos:column="17"/></operator><name pos:line="10" pos:column="17">callback<pos:position pos:line="10" pos:column="25"/></name></expr></argument>)<pos:position pos:line="10" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="27"/></expr_stmt>
        <return pos:line="11" pos:column="9">return;<pos:position pos:line="11" pos:column="16"/></return>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
