<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6370_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">AIODiskIOStrategy<pos:position pos:line="2" pos:column="18"/></name><operator pos:line="2" pos:column="18">::<pos:position pos:line="2" pos:column="20"/></operator><name pos:line="2" pos:column="20">callback<pos:position pos:line="2" pos:column="28"/></name></name><parameter_list pos:line="2" pos:column="28">()<pos:position pos:line="2" pos:column="30"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <return pos:line="4" pos:column="5">return <expr><literal type="number" pos:line="4" pos:column="12">0<pos:position pos:line="4" pos:column="13"/></literal></expr>;<pos:position pos:line="4" pos:column="14"/></return>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">i<pos:position pos:line="5" pos:column="10"/></name></decl>;<pos:position pos:line="5" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">completed<pos:position pos:line="6" pos:column="18"/></name> <init pos:line="6" pos:column="19">= <expr><literal type="number" pos:line="6" pos:column="21">0<pos:position pos:line="6" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">retval<pos:position pos:line="7" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="17">reterr<pos:position pos:line="7" pos:column="23"/></name></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">FREE<pos:position pos:line="8" pos:column="9"/></name> <modifier pos:line="8" pos:column="10">*<pos:position pos:line="8" pos:column="11"/></modifier></type><name pos:line="8" pos:column="11">freefunc<pos:position pos:line="8" pos:column="19"/></name></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">void<pos:position pos:line="9" pos:column="9"/></name> <modifier pos:line="9" pos:column="10">*<pos:position pos:line="9" pos:column="11"/></modifier></type><name pos:line="9" pos:column="11">cbdata<pos:position pos:line="9" pos:column="17"/></name></decl>;<pos:position pos:line="9" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">callback_valid<pos:position pos:line="10" pos:column="23"/></name></decl>;<pos:position pos:line="10" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">void<pos:position pos:line="11" pos:column="9"/></name> <modifier pos:line="11" pos:column="10">*<pos:position pos:line="11" pos:column="11"/></modifier></type><name pos:line="11" pos:column="11">buf<pos:position pos:line="11" pos:column="14"/></name></decl>;<pos:position pos:line="11" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">async_queue_entry_t<pos:position pos:line="12" pos:column="24"/></name> <modifier pos:line="12" pos:column="25">*<pos:position pos:line="12" pos:column="26"/></modifier></type><name pos:line="12" pos:column="26">aqe<pos:position pos:line="12" pos:column="29"/></name></decl>;<pos:position pos:line="12" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">async_queue_entry_type_t<pos:position pos:line="13" pos:column="29"/></name></type> <name pos:line="13" pos:column="30">type<pos:position pos:line="13" pos:column="34"/></name></decl>;<pos:position pos:line="13" pos:column="35"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="15" pos:column="5">assert<pos:position pos:line="15" pos:column="11"/></name><argument_list pos:line="15" pos:column="11">(<argument><expr><name><name pos:line="15" pos:column="12">aq<pos:position pos:line="15" pos:column="14"/></name><operator pos:line="15" pos:column="14">.<pos:position pos:line="15" pos:column="15"/></operator><name pos:line="15" pos:column="15">aq_state<pos:position pos:line="15" pos:column="23"/></name></name> <operator pos:line="15" pos:column="24">==<pos:position pos:line="15" pos:column="26"/></operator> <name pos:line="15" pos:column="27">AQ_STATE_SETUP<pos:position pos:line="15" pos:column="41"/></name></expr></argument>)<pos:position pos:line="15" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="43"/></expr_stmt>

    <comment type="block" pos:line="17" pos:column="5">/* Loop through all slots */</comment>

    <for pos:line="19" pos:column="5">for <control pos:line="19" pos:column="9">(<init><expr><name pos:line="19" pos:column="10">i<pos:position pos:line="19" pos:column="11"/></name> <operator pos:line="19" pos:column="12">=<pos:position pos:line="19" pos:column="13"/></operator> <literal type="number" pos:line="19" pos:column="14">0<pos:position pos:line="19" pos:column="15"/></literal></expr>;<pos:position pos:line="19" pos:column="16"/></init> <condition><expr><name pos:line="19" pos:column="17">i<pos:position pos:line="19" pos:column="18"/></name> <operator pos:line="19" pos:column="19">&lt;<pos:position pos:line="19" pos:column="23"/></operator> <name pos:line="19" pos:column="21">MAX_ASYNCOP<pos:position pos:line="19" pos:column="32"/></name></expr>;<pos:position pos:line="19" pos:column="33"/></condition> <incr><expr><operator pos:line="19" pos:column="34">++<pos:position pos:line="19" pos:column="36"/></operator><name pos:line="19" pos:column="36">i<pos:position pos:line="19" pos:column="37"/></name></expr></incr>)<pos:position pos:line="19" pos:column="38"/></control> <block pos:line="19" pos:column="39">{
        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name><name pos:line="20" pos:column="13">aq<pos:position pos:line="20" pos:column="15"/></name><operator pos:line="20" pos:column="15">.<pos:position pos:line="20" pos:column="16"/></operator><name pos:line="20" pos:column="16">aq_queue<pos:position pos:line="20" pos:column="24"/></name><index pos:line="20" pos:column="24">[<expr><name pos:line="20" pos:column="25">i<pos:position pos:line="20" pos:column="26"/></name></expr>]<pos:position pos:line="20" pos:column="27"/></index></name><operator pos:line="20" pos:column="27">.<pos:position pos:line="20" pos:column="28"/></operator><name pos:line="20" pos:column="28">aq_e_state<pos:position pos:line="20" pos:column="38"/></name> <operator pos:line="20" pos:column="39">==<pos:position pos:line="20" pos:column="41"/></operator> <name pos:line="20" pos:column="42">AQ_ENTRY_USED<pos:position pos:line="20" pos:column="55"/></name></expr>)<pos:position pos:line="20" pos:column="56"/></condition><then pos:line="20" pos:column="56"> <block pos:line="20" pos:column="57">{
            <expr_stmt><expr><name pos:line="21" pos:column="13">aqe<pos:position pos:line="21" pos:column="16"/></name> <operator pos:line="21" pos:column="17">=<pos:position pos:line="21" pos:column="18"/></operator> <operator pos:line="21" pos:column="19">&amp;<pos:position pos:line="21" pos:column="24"/></operator><name><name pos:line="21" pos:column="20">aq<pos:position pos:line="21" pos:column="22"/></name><operator pos:line="21" pos:column="22">.<pos:position pos:line="21" pos:column="23"/></operator><name pos:line="21" pos:column="23">aq_queue<pos:position pos:line="21" pos:column="31"/></name><index pos:line="21" pos:column="31">[<expr><name pos:line="21" pos:column="32">i<pos:position pos:line="21" pos:column="33"/></name></expr>]<pos:position pos:line="21" pos:column="34"/></index></name></expr>;<pos:position pos:line="21" pos:column="35"/></expr_stmt>
            <comment type="block" pos:line="22" pos:column="13">/* Active, get status */</comment>
            <expr_stmt><expr><name pos:line="23" pos:column="13">reterr<pos:position pos:line="23" pos:column="19"/></name> <operator pos:line="23" pos:column="20">=<pos:position pos:line="23" pos:column="21"/></operator> <call><name pos:line="23" pos:column="22">aio_error<pos:position pos:line="23" pos:column="31"/></name><argument_list pos:line="23" pos:column="31">(<argument><expr><operator pos:line="23" pos:column="32">&amp;<pos:position pos:line="23" pos:column="37"/></operator><name><name pos:line="23" pos:column="33">aqe<pos:position pos:line="23" pos:column="36"/></name><operator pos:line="23" pos:column="36">-&gt;<pos:position pos:line="23" pos:column="41"/></operator><name pos:line="23" pos:column="38">aq_e_aiocb<pos:position pos:line="23" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="50"/></expr_stmt>

            <if pos:line="25" pos:column="13">if <condition pos:line="25" pos:column="16">(<expr><name pos:line="25" pos:column="17">reterr<pos:position pos:line="25" pos:column="23"/></name> <operator pos:line="25" pos:column="24">&lt;<pos:position pos:line="25" pos:column="28"/></operator> <literal type="number" pos:line="25" pos:column="26">0<pos:position pos:line="25" pos:column="27"/></literal></expr>)<pos:position pos:line="25" pos:column="28"/></condition><then pos:line="25" pos:column="28"> <block pos:line="25" pos:column="29">{
                <expr_stmt><expr><call><name pos:line="26" pos:column="17">fatal<pos:position pos:line="26" pos:column="22"/></name><argument_list pos:line="26" pos:column="22">(<argument><expr><literal type="string" pos:line="26" pos:column="23">"aio_error returned an error!\n"<pos:position pos:line="26" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="57"/></expr_stmt>
            }<pos:position pos:line="27" pos:column="14"/></block></then></if>

            <if pos:line="29" pos:column="13">if <condition pos:line="29" pos:column="16">(<expr><name pos:line="29" pos:column="17">reterr<pos:position pos:line="29" pos:column="23"/></name> <operator pos:line="29" pos:column="24">!=<pos:position pos:line="29" pos:column="26"/></operator> <name pos:line="29" pos:column="27">EINPROGRESS<pos:position pos:line="29" pos:column="38"/></name></expr>)<pos:position pos:line="29" pos:column="39"/></condition><then pos:line="29" pos:column="39"> <block pos:line="29" pos:column="40">{
                <comment type="block" pos:line="30" pos:column="17">/* Get the return code */</comment>
                <expr_stmt><expr><name pos:line="31" pos:column="17">retval<pos:position pos:line="31" pos:column="23"/></name> <operator pos:line="31" pos:column="24">=<pos:position pos:line="31" pos:column="25"/></operator> <call><name pos:line="31" pos:column="26">aio_return<pos:position pos:line="31" pos:column="36"/></name><argument_list pos:line="31" pos:column="36">(<argument><expr><operator pos:line="31" pos:column="37">&amp;<pos:position pos:line="31" pos:column="42"/></operator><name><name pos:line="31" pos:column="38">aqe<pos:position pos:line="31" pos:column="41"/></name><operator pos:line="31" pos:column="41">-&gt;<pos:position pos:line="31" pos:column="46"/></operator><name pos:line="31" pos:column="43">aq_e_aiocb<pos:position pos:line="31" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="55"/></expr_stmt>

                <comment type="block" pos:line="33" pos:column="17">/* Get the callback parameters */</comment>
                <expr_stmt><expr><name pos:line="34" pos:column="17">freefunc<pos:position pos:line="34" pos:column="25"/></name> <operator pos:line="34" pos:column="26">=<pos:position pos:line="34" pos:column="27"/></operator> <name><name pos:line="34" pos:column="28">aqe<pos:position pos:line="34" pos:column="31"/></name><operator pos:line="34" pos:column="31">-&gt;<pos:position pos:line="34" pos:column="36"/></operator><name pos:line="34" pos:column="33">aq_e_free<pos:position pos:line="34" pos:column="42"/></name></name></expr>;<pos:position pos:line="34" pos:column="43"/></expr_stmt>
                <expr_stmt><expr><name pos:line="35" pos:column="17">buf<pos:position pos:line="35" pos:column="20"/></name> <operator pos:line="35" pos:column="21">=<pos:position pos:line="35" pos:column="22"/></operator> <name><name pos:line="35" pos:column="23">aqe<pos:position pos:line="35" pos:column="26"/></name><operator pos:line="35" pos:column="26">-&gt;<pos:position pos:line="35" pos:column="31"/></operator><name pos:line="35" pos:column="28">aq_e_buf<pos:position pos:line="35" pos:column="36"/></name></name></expr>;<pos:position pos:line="35" pos:column="37"/></expr_stmt>
                <expr_stmt><expr><name pos:line="36" pos:column="17">type<pos:position pos:line="36" pos:column="21"/></name> <operator pos:line="36" pos:column="22">=<pos:position pos:line="36" pos:column="23"/></operator> <name><name pos:line="36" pos:column="24">aqe<pos:position pos:line="36" pos:column="27"/></name><operator pos:line="36" pos:column="27">-&gt;<pos:position pos:line="36" pos:column="32"/></operator><name pos:line="36" pos:column="29">aq_e_type<pos:position pos:line="36" pos:column="38"/></name></name></expr>;<pos:position pos:line="36" pos:column="39"/></expr_stmt>
                <expr_stmt><expr><name pos:line="37" pos:column="17">callback_valid<pos:position pos:line="37" pos:column="31"/></name> <operator pos:line="37" pos:column="32">=<pos:position pos:line="37" pos:column="33"/></operator> <call><name pos:line="37" pos:column="34">cbdataReferenceValidDone<pos:position pos:line="37" pos:column="58"/></name><argument_list pos:line="37" pos:column="58">(<argument><expr><name><name pos:line="37" pos:column="59">aqe<pos:position pos:line="37" pos:column="62"/></name><operator pos:line="37" pos:column="62">-&gt;<pos:position pos:line="37" pos:column="67"/></operator><name pos:line="37" pos:column="64">aq_e_callback_data<pos:position pos:line="37" pos:column="82"/></name></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="84">&amp;<pos:position pos:line="37" pos:column="89"/></operator><name pos:line="37" pos:column="85">cbdata<pos:position pos:line="37" pos:column="91"/></name></expr></argument>)<pos:position pos:line="37" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="93"/></expr_stmt>
                <decl_stmt><decl><type><name pos:line="38" pos:column="17">AIODiskFile<pos:position pos:line="38" pos:column="28"/></name> <modifier pos:line="38" pos:column="29">*<pos:position pos:line="38" pos:column="30"/></modifier></type> <name pos:line="38" pos:column="31">theFile<pos:position pos:line="38" pos:column="38"/></name> <init pos:line="38" pos:column="39">= <expr><name pos:line="38" pos:column="41">NULL<pos:position pos:line="38" pos:column="45"/></name></expr></init></decl>;<pos:position pos:line="38" pos:column="46"/></decl_stmt>
                <decl_stmt><decl><type><name pos:line="39" pos:column="17">void<pos:position pos:line="39" pos:column="21"/></name> <modifier pos:line="39" pos:column="22">*<pos:position pos:line="39" pos:column="23"/></modifier></type><name pos:line="39" pos:column="23">theFileVoid<pos:position pos:line="39" pos:column="34"/></name> <init pos:line="39" pos:column="35">= <expr><name pos:line="39" pos:column="37">NULL<pos:position pos:line="39" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="39" pos:column="42"/></decl_stmt>
                <decl_stmt><decl><type><name pos:line="40" pos:column="17">void<pos:position pos:line="40" pos:column="21"/></name> <modifier pos:line="40" pos:column="22">*<pos:position pos:line="40" pos:column="23"/></modifier></type><name pos:line="40" pos:column="23">theTmpFile<pos:position pos:line="40" pos:column="33"/></name> <init pos:line="40" pos:column="34">= <expr><name><name pos:line="40" pos:column="36">aqe<pos:position pos:line="40" pos:column="39"/></name><operator pos:line="40" pos:column="39">-&gt;<pos:position pos:line="40" pos:column="44"/></operator><name pos:line="40" pos:column="41">theFile<pos:position pos:line="40" pos:column="48"/></name></name></expr></init></decl>;<pos:position pos:line="40" pos:column="49"/></decl_stmt>
                <decl_stmt><decl><type><name pos:line="41" pos:column="17">bool<pos:position pos:line="41" pos:column="21"/></name></type> <name pos:line="41" pos:column="22">fileOk<pos:position pos:line="41" pos:column="28"/></name> <init pos:line="41" pos:column="29">= <expr><call><name pos:line="41" pos:column="31">cbdataReferenceValidDone<pos:position pos:line="41" pos:column="55"/></name><argument_list pos:line="41" pos:column="55">(<argument><expr><name pos:line="41" pos:column="56">theTmpFile<pos:position pos:line="41" pos:column="66"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="68">&amp;<pos:position pos:line="41" pos:column="73"/></operator><name pos:line="41" pos:column="69">theFileVoid<pos:position pos:line="41" pos:column="80"/></name></expr></argument>)<pos:position pos:line="41" pos:column="81"/></argument_list></call></expr></init></decl>;<pos:position pos:line="41" pos:column="82"/></decl_stmt>

                <if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><name pos:line="43" pos:column="21">fileOk<pos:position pos:line="43" pos:column="27"/></name></expr>)<pos:position pos:line="43" pos:column="28"/></condition><then pos:line="43" pos:column="28"> <block pos:line="43" pos:column="29">{
                    <expr_stmt><expr><name pos:line="44" pos:column="21">theFile<pos:position pos:line="44" pos:column="28"/></name> <operator pos:line="44" pos:column="29">=<pos:position pos:line="44" pos:column="30"/></operator> <cast type="static" pos:line="44" pos:column="31">static_cast<argument_list type="generic" pos:line="44" pos:column="42">&lt;<argument><expr><name pos:line="44" pos:column="43">AIODiskFile<pos:position pos:line="44" pos:column="54"/></name> <operator pos:line="44" pos:column="55">*<pos:position pos:line="44" pos:column="56"/></operator></expr></argument>&gt;<pos:position pos:line="44" pos:column="60"/></argument_list><argument_list pos:line="44" pos:column="57">(<argument><expr><name pos:line="44" pos:column="58">theFileVoid<pos:position pos:line="44" pos:column="69"/></name></expr></argument>)<pos:position pos:line="44" pos:column="70"/></argument_list></cast></expr>;<pos:position pos:line="44" pos:column="71"/></expr_stmt>
                }<pos:position pos:line="45" pos:column="18"/></block></then></if>

                <comment type="block" pos:line="47" pos:column="17">/* Free slot */</comment>
                <expr_stmt><expr><call><name pos:line="48" pos:column="17">memset<pos:position pos:line="48" pos:column="23"/></name><argument_list pos:line="48" pos:column="23">(<argument><expr><name pos:line="48" pos:column="24">aqe<pos:position pos:line="48" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="48" pos:column="29">0<pos:position pos:line="48" pos:column="30"/></literal></expr></argument>, <argument><expr><sizeof pos:line="48" pos:column="32">sizeof<argument_list pos:line="48" pos:column="38">(<argument><expr><name pos:line="48" pos:column="39">async_queue_entry_t<pos:position pos:line="48" pos:column="58"/></name></expr></argument>)<pos:position pos:line="48" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="48" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="61"/></expr_stmt>

                <expr_stmt><expr><name><name pos:line="50" pos:column="17">aqe<pos:position pos:line="50" pos:column="20"/></name><operator pos:line="50" pos:column="20">-&gt;<pos:position pos:line="50" pos:column="25"/></operator><name pos:line="50" pos:column="22">aq_e_state<pos:position pos:line="50" pos:column="32"/></name></name> <operator pos:line="50" pos:column="33">=<pos:position pos:line="50" pos:column="34"/></operator> <name pos:line="50" pos:column="35">AQ_ENTRY_FREE<pos:position pos:line="50" pos:column="48"/></name></expr>;<pos:position pos:line="50" pos:column="49"/></expr_stmt>

                <expr_stmt><expr><operator pos:line="52" pos:column="17">--<pos:position pos:line="52" pos:column="19"/></operator><name><name pos:line="52" pos:column="19">aq<pos:position pos:line="52" pos:column="21"/></name><operator pos:line="52" pos:column="21">.<pos:position pos:line="52" pos:column="22"/></operator><name pos:line="52" pos:column="22">aq_numpending<pos:position pos:line="52" pos:column="35"/></name></name></expr>;<pos:position pos:line="52" pos:column="36"/></expr_stmt>

                <comment type="block" pos:line="54" pos:column="17">/* Callback */</comment>

                <if pos:line="56" pos:column="17">if <condition pos:line="56" pos:column="20">(<expr><name pos:line="56" pos:column="21">callback_valid<pos:position pos:line="56" pos:column="35"/></name></expr>)<pos:position pos:line="56" pos:column="36"/></condition><then pos:line="56" pos:column="36"> <block pos:line="56" pos:column="37">{
                    <expr_stmt><expr><call><name pos:line="57" pos:column="21">assert<pos:position pos:line="57" pos:column="27"/></name> <argument_list pos:line="57" pos:column="28">(<argument><expr><name pos:line="57" pos:column="29">fileOk<pos:position pos:line="57" pos:column="35"/></name></expr></argument>)<pos:position pos:line="57" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="37"/></expr_stmt>

                    <if pos:line="59" pos:column="21">if <condition pos:line="59" pos:column="24">(<expr><name pos:line="59" pos:column="25">type<pos:position pos:line="59" pos:column="29"/></name> <operator pos:line="59" pos:column="30">==<pos:position pos:line="59" pos:column="32"/></operator> <name pos:line="59" pos:column="33">AQ_ENTRY_READ<pos:position pos:line="59" pos:column="46"/></name></expr>)<pos:position pos:line="59" pos:column="47"/></condition><then pos:line="59" pos:column="47">
                        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="60" pos:column="25">theFile<pos:position pos:line="60" pos:column="32"/></name><operator pos:line="60" pos:column="32">-&gt;<pos:position pos:line="60" pos:column="37"/></operator><name pos:line="60" pos:column="34">ioRequestor<pos:position pos:line="60" pos:column="45"/></name><operator pos:line="60" pos:column="45">-&gt;<pos:position pos:line="60" pos:column="50"/></operator><name pos:line="60" pos:column="47">readCompleted<pos:position pos:line="60" pos:column="60"/></name></name><argument_list pos:line="60" pos:column="60">(<argument><expr><operator pos:line="60" pos:column="61">(<pos:position pos:line="60" pos:column="62"/></operator><specifier pos:line="60" pos:column="62">const<pos:position pos:line="60" pos:column="67"/></specifier> <name pos:line="60" pos:column="68">char<pos:position pos:line="60" pos:column="72"/></name> <operator pos:line="60" pos:column="73">*<pos:position pos:line="60" pos:column="74"/></operator><operator pos:line="60" pos:column="74">)<pos:position pos:line="60" pos:column="75"/></operator><name pos:line="60" pos:column="75">buf<pos:position pos:line="60" pos:column="78"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="80">retval<pos:position pos:line="60" pos:column="86"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="88">reterr<pos:position pos:line="60" pos:column="94"/></name></expr></argument>, <argument><expr><cast type="static" pos:line="60" pos:column="96">static_cast<argument_list type="generic" pos:line="60" pos:column="107">&lt;<argument><expr><name pos:line="60" pos:column="108">ReadRequest<pos:position pos:line="60" pos:column="119"/></name> <operator pos:line="60" pos:column="120">*<pos:position pos:line="60" pos:column="121"/></operator></expr></argument>&gt;<pos:position pos:line="60" pos:column="125"/></argument_list><argument_list pos:line="60" pos:column="122">(<argument><expr><name pos:line="60" pos:column="123">cbdata<pos:position pos:line="60" pos:column="129"/></name></expr></argument>)<pos:position pos:line="60" pos:column="130"/></argument_list></cast></expr></argument>)<pos:position pos:line="60" pos:column="131"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="132"/></expr_stmt></block></then></if>

                    <if pos:line="62" pos:column="21">if <condition pos:line="62" pos:column="24">(<expr><name pos:line="62" pos:column="25">type<pos:position pos:line="62" pos:column="29"/></name> <operator pos:line="62" pos:column="30">==<pos:position pos:line="62" pos:column="32"/></operator> <name pos:line="62" pos:column="33">AQ_ENTRY_WRITE<pos:position pos:line="62" pos:column="47"/></name></expr>)<pos:position pos:line="62" pos:column="48"/></condition><then pos:line="62" pos:column="48">
                        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="63" pos:column="25">theFile<pos:position pos:line="63" pos:column="32"/></name><operator pos:line="63" pos:column="32">-&gt;<pos:position pos:line="63" pos:column="37"/></operator><name pos:line="63" pos:column="34">ioRequestor<pos:position pos:line="63" pos:column="45"/></name><operator pos:line="63" pos:column="45">-&gt;<pos:position pos:line="63" pos:column="50"/></operator><name pos:line="63" pos:column="47">writeCompleted<pos:position pos:line="63" pos:column="61"/></name></name><argument_list pos:line="63" pos:column="61">(<argument><expr><name pos:line="63" pos:column="62">reterr<pos:position pos:line="63" pos:column="68"/></name></expr></argument>,<argument><expr><name pos:line="63" pos:column="69">retval<pos:position pos:line="63" pos:column="75"/></name></expr></argument>, <argument><expr><cast type="static" pos:line="63" pos:column="77">static_cast<argument_list type="generic" pos:line="63" pos:column="88">&lt;<argument><expr><name pos:line="63" pos:column="89">WriteRequest<pos:position pos:line="63" pos:column="101"/></name> <operator pos:line="63" pos:column="102">*<pos:position pos:line="63" pos:column="103"/></operator></expr></argument>&gt;<pos:position pos:line="63" pos:column="107"/></argument_list><argument_list pos:line="63" pos:column="104">(<argument><expr><name pos:line="63" pos:column="105">cbdata<pos:position pos:line="63" pos:column="111"/></name></expr></argument>)<pos:position pos:line="63" pos:column="112"/></argument_list></cast></expr></argument>)<pos:position pos:line="63" pos:column="113"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="114"/></expr_stmt></block></then></if>
                }<pos:position pos:line="64" pos:column="18"/></block></then></if>

                <if pos:line="66" pos:column="17">if <condition pos:line="66" pos:column="20">(<expr><name pos:line="66" pos:column="21">type<pos:position pos:line="66" pos:column="25"/></name> <operator pos:line="66" pos:column="26">==<pos:position pos:line="66" pos:column="28"/></operator> <name pos:line="66" pos:column="29">AQ_ENTRY_WRITE<pos:position pos:line="66" pos:column="43"/></name> <operator pos:line="66" pos:column="44">&amp;&amp;<pos:position pos:line="66" pos:column="54"/></operator> <name pos:line="66" pos:column="47">freefunc<pos:position pos:line="66" pos:column="55"/></name></expr>)<pos:position pos:line="66" pos:column="56"/></condition><then pos:line="66" pos:column="56">
                    <block type="pseudo"><expr_stmt><expr><call><name pos:line="67" pos:column="21">freefunc<pos:position pos:line="67" pos:column="29"/></name><argument_list pos:line="67" pos:column="29">(<argument><expr><name pos:line="67" pos:column="30">buf<pos:position pos:line="67" pos:column="33"/></name></expr></argument>)<pos:position pos:line="67" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="35"/></expr_stmt></block></then></if>
            }<pos:position pos:line="68" pos:column="14"/></block></then></if>
        }<pos:position pos:line="69" pos:column="10"/></block></then></if>
    }<pos:position pos:line="70" pos:column="6"/></block></for>

    <return pos:line="72" pos:column="5">return <expr><name pos:line="72" pos:column="12">completed<pos:position pos:line="72" pos:column="21"/></name></expr>;<pos:position pos:line="72" pos:column="22"/></return>
}<pos:position pos:line="73" pos:column="2"/></block></function></unit>
