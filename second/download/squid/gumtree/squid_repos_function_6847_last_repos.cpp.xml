<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6847_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ESIVariableProcessor<pos:position pos:line="2" pos:column="21"/></name><operator pos:line="2" pos:column="21">::<pos:position pos:line="2" pos:column="23"/></operator><name pos:line="2" pos:column="23">doIt<pos:position pos:line="2" pos:column="27"/></name></name><parameter_list pos:line="2" pos:column="27">()<pos:position pos:line="2" pos:column="29"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name> <argument_list pos:line="4" pos:column="12">(<argument><expr><name pos:line="4" pos:column="13">output<pos:position pos:line="4" pos:column="19"/></name> <operator pos:line="4" pos:column="20">==<pos:position pos:line="4" pos:column="22"/></operator> <name pos:line="4" pos:column="23">NULL<pos:position pos:line="4" pos:column="27"/></name></expr></argument>)<pos:position pos:line="4" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="29"/></expr_stmt>

    <while pos:line="6" pos:column="5">while <condition pos:line="6" pos:column="11">(<expr><name pos:line="6" pos:column="12">pos<pos:position pos:line="6" pos:column="15"/></name> <operator pos:line="6" pos:column="16">&lt;<pos:position pos:line="6" pos:column="20"/></operator> <name pos:line="6" pos:column="18">len<pos:position pos:line="6" pos:column="21"/></name></expr>)<pos:position pos:line="6" pos:column="22"/></condition> <block pos:line="6" pos:column="23">{
        <comment type="block" pos:line="7" pos:column="9">/* skipping pre-variables */</comment>

        <if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name><name pos:line="9" pos:column="13">string<pos:position pos:line="9" pos:column="19"/></name><index pos:line="9" pos:column="19">[<expr><name pos:line="9" pos:column="20">pos<pos:position pos:line="9" pos:column="23"/></name></expr>]<pos:position pos:line="9" pos:column="24"/></index></name> <operator pos:line="9" pos:column="25">!=<pos:position pos:line="9" pos:column="27"/></operator> <literal type="char" pos:line="9" pos:column="28">'$'<pos:position pos:line="9" pos:column="31"/></literal></expr>)<pos:position pos:line="9" pos:column="32"/></condition><then pos:line="9" pos:column="32"> <block pos:line="9" pos:column="33">{
            <expr_stmt><expr><operator pos:line="10" pos:column="13">++<pos:position pos:line="10" pos:column="15"/></operator><name pos:line="10" pos:column="15">pos<pos:position pos:line="10" pos:column="18"/></name></expr>;<pos:position pos:line="10" pos:column="19"/></expr_stmt>
        }<pos:position pos:line="11" pos:column="10"/></block></then> <else pos:line="11" pos:column="11">else <block pos:line="11" pos:column="16">{
            <if pos:line="12" pos:column="13">if <condition pos:line="12" pos:column="16">(<expr><name pos:line="12" pos:column="17">pos<pos:position pos:line="12" pos:column="20"/></name> <operator pos:line="12" pos:column="21">-<pos:position pos:line="12" pos:column="22"/></operator> <name pos:line="12" pos:column="23">done_pos<pos:position pos:line="12" pos:column="31"/></name></expr>)<pos:position pos:line="12" pos:column="32"/></condition><then pos:line="12" pos:column="32">
                <comment type="block" pos:line="13" pos:column="17">/* extract known plain text */</comment>
                <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="14" pos:column="17">ESISegment<pos:position pos:line="14" pos:column="27"/></name><operator pos:line="14" pos:column="27">::<pos:position pos:line="14" pos:column="29"/></operator><name pos:line="14" pos:column="29">ListAppend<pos:position pos:line="14" pos:column="39"/></name></name> <argument_list pos:line="14" pos:column="40">(<argument><expr><name pos:line="14" pos:column="41">output<pos:position pos:line="14" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="49">string<pos:position pos:line="14" pos:column="55"/></name> <operator pos:line="14" pos:column="56">+<pos:position pos:line="14" pos:column="57"/></operator> <name pos:line="14" pos:column="58">done_pos<pos:position pos:line="14" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="68">pos<pos:position pos:line="14" pos:column="71"/></name> <operator pos:line="14" pos:column="72">-<pos:position pos:line="14" pos:column="73"/></operator> <name pos:line="14" pos:column="74">done_pos<pos:position pos:line="14" pos:column="82"/></name></expr></argument>)<pos:position pos:line="14" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="84"/></expr_stmt></block></then></if>

            <expr_stmt><expr><name pos:line="16" pos:column="13">done_pos<pos:position pos:line="16" pos:column="21"/></name> <operator pos:line="16" pos:column="22">=<pos:position pos:line="16" pos:column="23"/></operator> <name pos:line="16" pos:column="24">pos<pos:position pos:line="16" pos:column="27"/></name></expr>;<pos:position pos:line="16" pos:column="28"/></expr_stmt>

            <expr_stmt><expr><operator pos:line="18" pos:column="13">++<pos:position pos:line="18" pos:column="15"/></operator><name pos:line="18" pos:column="15">pos<pos:position pos:line="18" pos:column="18"/></name></expr>;<pos:position pos:line="18" pos:column="19"/></expr_stmt>

            <expr_stmt><expr><call><name pos:line="20" pos:column="13">identifyFunction<pos:position pos:line="20" pos:column="29"/></name><argument_list pos:line="20" pos:column="29">()<pos:position pos:line="20" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="32"/></expr_stmt>

            <expr_stmt><expr><call><name pos:line="22" pos:column="13">doFunction<pos:position pos:line="22" pos:column="23"/></name><argument_list pos:line="22" pos:column="23">()<pos:position pos:line="22" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="26"/></expr_stmt>
        }<pos:position pos:line="23" pos:column="10"/></block></else></if>
    }<pos:position pos:line="24" pos:column="6"/></block></while>

    <comment type="block" pos:line="26" pos:column="5">/* pos-done_pos chars are ready to copy */</comment>
    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name pos:line="27" pos:column="9">pos<pos:position pos:line="27" pos:column="12"/></name><operator pos:line="27" pos:column="12">-<pos:position pos:line="27" pos:column="13"/></operator><name pos:line="27" pos:column="13">done_pos<pos:position pos:line="27" pos:column="21"/></name></expr>)<pos:position pos:line="27" pos:column="22"/></condition><then pos:line="27" pos:column="22">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="28" pos:column="9">ESISegment<pos:position pos:line="28" pos:column="19"/></name><operator pos:line="28" pos:column="19">::<pos:position pos:line="28" pos:column="21"/></operator><name pos:line="28" pos:column="21">ListAppend<pos:position pos:line="28" pos:column="31"/></name></name> <argument_list pos:line="28" pos:column="32">(<argument><expr><name pos:line="28" pos:column="33">output<pos:position pos:line="28" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="41">string<pos:position pos:line="28" pos:column="47"/></name><operator pos:line="28" pos:column="47">+<pos:position pos:line="28" pos:column="48"/></operator><name pos:line="28" pos:column="48">done_pos<pos:position pos:line="28" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="58">pos<pos:position pos:line="28" pos:column="61"/></name> <operator pos:line="28" pos:column="62">-<pos:position pos:line="28" pos:column="63"/></operator> <name pos:line="28" pos:column="64">done_pos<pos:position pos:line="28" pos:column="72"/></name></expr></argument>)<pos:position pos:line="28" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="74"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="30" pos:column="5">safe_free<pos:position pos:line="30" pos:column="14"/></name> <argument_list pos:line="30" pos:column="15">(<argument><expr><name pos:line="30" pos:column="16">found_default<pos:position pos:line="30" pos:column="29"/></name></expr></argument>)<pos:position pos:line="30" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="31"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="32" pos:column="5">safe_free<pos:position pos:line="32" pos:column="14"/></name> <argument_list pos:line="32" pos:column="15">(<argument><expr><name pos:line="32" pos:column="16">found_subref<pos:position pos:line="32" pos:column="28"/></name></expr></argument>)<pos:position pos:line="32" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="30"/></expr_stmt>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
