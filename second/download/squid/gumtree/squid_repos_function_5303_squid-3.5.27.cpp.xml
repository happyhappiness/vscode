<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5303_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">Fs<pos:position pos:line="2" pos:column="3"/></name><operator pos:line="2" pos:column="3">::<pos:position pos:line="2" pos:column="5"/></operator><name pos:line="2" pos:column="5">Ufs<pos:position pos:line="2" pos:column="8"/></name><operator pos:line="2" pos:column="8">::<pos:position pos:line="2" pos:column="10"/></operator><name pos:line="2" pos:column="10">UFSSwapDir<pos:position pos:line="2" pos:column="20"/></name><operator pos:line="2" pos:column="20">::<pos:position pos:line="2" pos:column="22"/></operator><name pos:line="2" pos:column="22">writeCleanStart<pos:position pos:line="2" pos:column="37"/></name></name><parameter_list pos:line="2" pos:column="37">()<pos:position pos:line="2" pos:column="39"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">UFSCleanLog<pos:position pos:line="4" pos:column="16"/></name> <modifier pos:line="4" pos:column="17">*<pos:position pos:line="4" pos:column="18"/></modifier></type><name pos:line="4" pos:column="18">state<pos:position pos:line="4" pos:column="23"/></name> <init pos:line="4" pos:column="24">= <expr><operator pos:line="4" pos:column="26">new<pos:position pos:line="4" pos:column="29"/></operator> <call><name pos:line="4" pos:column="30">UFSCleanLog<pos:position pos:line="4" pos:column="41"/></name><argument_list pos:line="4" pos:column="41">(<argument><expr><name pos:line="4" pos:column="42">this<pos:position pos:line="4" pos:column="46"/></name></expr></argument>)<pos:position pos:line="4" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="48"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">StoreSwapLogHeader<pos:position pos:line="5" pos:column="23"/></name></type> <name pos:line="5" pos:column="24">header<pos:position pos:line="5" pos:column="30"/></name></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>
<cpp:if pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">if<pos:position pos:line="6" pos:column="4"/></cpp:directive> <expr><name pos:line="6" pos:column="5">HAVE_FCHMOD<pos:position pos:line="6" pos:column="16"/></name></expr></cpp:if>

    <decl_stmt><decl><type><name><name pos:line="8" pos:column="5">struct<pos:position pos:line="8" pos:column="11"/></name> <name pos:line="8" pos:column="12">stat<pos:position pos:line="8" pos:column="16"/></name></name></type> <name pos:line="8" pos:column="17">sb<pos:position pos:line="8" pos:column="19"/></name></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>
<cpp:endif pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endif<pos:position pos:line="9" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><name pos:line="11" pos:column="5">cleanLog<pos:position pos:line="11" pos:column="13"/></name> <operator pos:line="11" pos:column="14">=<pos:position pos:line="11" pos:column="15"/></operator> <name pos:line="11" pos:column="16">NULL<pos:position pos:line="11" pos:column="20"/></name></expr>;<pos:position pos:line="11" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="12" pos:column="5">state<pos:position pos:line="12" pos:column="10"/></name><operator pos:line="12" pos:column="10">-&gt;<pos:position pos:line="12" pos:column="15"/></operator><name pos:line="12" pos:column="12">newLog<pos:position pos:line="12" pos:column="18"/></name></name> <operator pos:line="12" pos:column="19">=<pos:position pos:line="12" pos:column="20"/></operator> <call><name pos:line="12" pos:column="21">xstrdup<pos:position pos:line="12" pos:column="28"/></name><argument_list pos:line="12" pos:column="28">(<argument><expr><call><name pos:line="12" pos:column="29">logFile<pos:position pos:line="12" pos:column="36"/></name><argument_list pos:line="12" pos:column="36">(<argument><expr><literal type="string" pos:line="12" pos:column="37">".clean"<pos:position pos:line="12" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="13" pos:column="5">state<pos:position pos:line="13" pos:column="10"/></name><operator pos:line="13" pos:column="10">-&gt;<pos:position pos:line="13" pos:column="15"/></operator><name pos:line="13" pos:column="12">fd<pos:position pos:line="13" pos:column="14"/></name></name> <operator pos:line="13" pos:column="15">=<pos:position pos:line="13" pos:column="16"/></operator> <call><name pos:line="13" pos:column="17">file_open<pos:position pos:line="13" pos:column="26"/></name><argument_list pos:line="13" pos:column="26">(<argument><expr><name><name pos:line="13" pos:column="27">state<pos:position pos:line="13" pos:column="32"/></name><operator pos:line="13" pos:column="32">-&gt;<pos:position pos:line="13" pos:column="37"/></operator><name pos:line="13" pos:column="34">newLog<pos:position pos:line="13" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="42">O_WRONLY<pos:position pos:line="13" pos:column="50"/></name> <operator pos:line="13" pos:column="51">|<pos:position pos:line="13" pos:column="52"/></operator> <name pos:line="13" pos:column="53">O_CREAT<pos:position pos:line="13" pos:column="60"/></name> <operator pos:line="13" pos:column="61">|<pos:position pos:line="13" pos:column="62"/></operator> <name pos:line="13" pos:column="63">O_TRUNC<pos:position pos:line="13" pos:column="70"/></name> <operator pos:line="13" pos:column="71">|<pos:position pos:line="13" pos:column="72"/></operator> <name pos:line="13" pos:column="73">O_BINARY<pos:position pos:line="13" pos:column="81"/></name></expr></argument>)<pos:position pos:line="13" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="83"/></expr_stmt>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name><name pos:line="15" pos:column="9">state<pos:position pos:line="15" pos:column="14"/></name><operator pos:line="15" pos:column="14">-&gt;<pos:position pos:line="15" pos:column="19"/></operator><name pos:line="15" pos:column="16">fd<pos:position pos:line="15" pos:column="18"/></name></name> <operator pos:line="15" pos:column="19">&lt;<pos:position pos:line="15" pos:column="23"/></operator> <literal type="number" pos:line="15" pos:column="21">0<pos:position pos:line="15" pos:column="22"/></literal></expr>)<pos:position pos:line="15" pos:column="23"/></condition><then pos:line="15" pos:column="23"> <block pos:line="15" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">xfree<pos:position pos:line="16" pos:column="14"/></name><argument_list pos:line="16" pos:column="14">(<argument><expr><name><name pos:line="16" pos:column="15">state<pos:position pos:line="16" pos:column="20"/></name><operator pos:line="16" pos:column="20">-&gt;<pos:position pos:line="16" pos:column="25"/></operator><name pos:line="16" pos:column="22">newLog<pos:position pos:line="16" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="17" pos:column="9">delete<pos:position pos:line="17" pos:column="15"/></operator> <name pos:line="17" pos:column="16">state<pos:position pos:line="17" pos:column="21"/></name></expr>;<pos:position pos:line="17" pos:column="22"/></expr_stmt>
        <return pos:line="18" pos:column="9">return <expr><operator pos:line="18" pos:column="16">-<pos:position pos:line="18" pos:column="17"/></operator><literal type="number" pos:line="18" pos:column="17">1<pos:position pos:line="18" pos:column="18"/></literal></expr>;<pos:position pos:line="18" pos:column="19"/></return>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="21" pos:column="5">state<pos:position pos:line="21" pos:column="10"/></name><operator pos:line="21" pos:column="10">-&gt;<pos:position pos:line="21" pos:column="15"/></operator><name pos:line="21" pos:column="12">cur<pos:position pos:line="21" pos:column="15"/></name></name> <operator pos:line="21" pos:column="16">=<pos:position pos:line="21" pos:column="17"/></operator> <call><name pos:line="21" pos:column="18">xstrdup<pos:position pos:line="21" pos:column="25"/></name><argument_list pos:line="21" pos:column="25">(<argument><expr><call><name pos:line="21" pos:column="26">logFile<pos:position pos:line="21" pos:column="33"/></name><argument_list pos:line="21" pos:column="33">(<argument><expr><name pos:line="21" pos:column="34">NULL<pos:position pos:line="21" pos:column="38"/></name></expr></argument>)<pos:position pos:line="21" pos:column="39"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="22" pos:column="5">state<pos:position pos:line="22" pos:column="10"/></name><operator pos:line="22" pos:column="10">-&gt;<pos:position pos:line="22" pos:column="15"/></operator><name pos:line="22" pos:column="12">cln<pos:position pos:line="22" pos:column="15"/></name></name> <operator pos:line="22" pos:column="16">=<pos:position pos:line="22" pos:column="17"/></operator> <call><name pos:line="22" pos:column="18">xstrdup<pos:position pos:line="22" pos:column="25"/></name><argument_list pos:line="22" pos:column="25">(<argument><expr><call><name pos:line="22" pos:column="26">logFile<pos:position pos:line="22" pos:column="33"/></name><argument_list pos:line="22" pos:column="33">(<argument><expr><literal type="string" pos:line="22" pos:column="34">".last-clean"<pos:position pos:line="22" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="23" pos:column="5">state<pos:position pos:line="23" pos:column="10"/></name><operator pos:line="23" pos:column="10">-&gt;<pos:position pos:line="23" pos:column="15"/></operator><name pos:line="23" pos:column="12">outbuf<pos:position pos:line="23" pos:column="18"/></name></name> <operator pos:line="23" pos:column="19">=<pos:position pos:line="23" pos:column="20"/></operator> <operator pos:line="23" pos:column="21">(<pos:position pos:line="23" pos:column="22"/></operator><name pos:line="23" pos:column="22">char<pos:position pos:line="23" pos:column="26"/></name> <operator pos:line="23" pos:column="27">*<pos:position pos:line="23" pos:column="28"/></operator><operator pos:line="23" pos:column="28">)<pos:position pos:line="23" pos:column="29"/></operator><call><name pos:line="23" pos:column="29">xcalloc<pos:position pos:line="23" pos:column="36"/></name><argument_list pos:line="23" pos:column="36">(<argument><expr><name pos:line="23" pos:column="37">CLEAN_BUF_SZ<pos:position pos:line="23" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="51">1<pos:position pos:line="23" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="24" pos:column="5">state<pos:position pos:line="24" pos:column="10"/></name><operator pos:line="24" pos:column="10">-&gt;<pos:position pos:line="24" pos:column="15"/></operator><name pos:line="24" pos:column="12">outbuf_offset<pos:position pos:line="24" pos:column="25"/></name></name> <operator pos:line="24" pos:column="26">=<pos:position pos:line="24" pos:column="27"/></operator> <literal type="number" pos:line="24" pos:column="28">0<pos:position pos:line="24" pos:column="29"/></literal></expr>;<pos:position pos:line="24" pos:column="30"/></expr_stmt>
    <comment type="block" pos:line="25" pos:column="5">/*copy the header */</comment>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">memcpy<pos:position pos:line="26" pos:column="11"/></name><argument_list pos:line="26" pos:column="11">(<argument><expr><name><name pos:line="26" pos:column="12">state<pos:position pos:line="26" pos:column="17"/></name><operator pos:line="26" pos:column="17">-&gt;<pos:position pos:line="26" pos:column="22"/></operator><name pos:line="26" pos:column="19">outbuf<pos:position pos:line="26" pos:column="25"/></name></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="27">&amp;<pos:position pos:line="26" pos:column="32"/></operator><name pos:line="26" pos:column="28">header<pos:position pos:line="26" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="26" pos:column="36">sizeof<argument_list pos:line="26" pos:column="42">(<argument><expr><name pos:line="26" pos:column="43">StoreSwapLogHeader<pos:position pos:line="26" pos:column="61"/></name></expr></argument>)<pos:position pos:line="26" pos:column="62"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="26" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="64"/></expr_stmt>
    <comment type="line" pos:line="27" pos:column="5">// Leave a gap to keep in sync with UFSSwapDir::openTmpSwapLog().</comment>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">memset<pos:position pos:line="28" pos:column="11"/></name><argument_list pos:line="28" pos:column="11">(<argument><expr><name><name pos:line="28" pos:column="12">state<pos:position pos:line="28" pos:column="17"/></name><operator pos:line="28" pos:column="17">-&gt;<pos:position pos:line="28" pos:column="22"/></operator><name pos:line="28" pos:column="19">outbuf<pos:position pos:line="28" pos:column="25"/></name></name> <operator pos:line="28" pos:column="26">+<pos:position pos:line="28" pos:column="27"/></operator> <sizeof pos:line="28" pos:column="28">sizeof<argument_list pos:line="28" pos:column="34">(<argument><expr><name pos:line="28" pos:column="35">StoreSwapLogHeader<pos:position pos:line="28" pos:column="53"/></name></expr></argument>)<pos:position pos:line="28" pos:column="54"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="56">0<pos:position pos:line="28" pos:column="57"/></literal></expr></argument>, <argument><expr><call><name><name pos:line="28" pos:column="59">header<pos:position pos:line="28" pos:column="65"/></name><operator pos:line="28" pos:column="65">.<pos:position pos:line="28" pos:column="66"/></operator><name pos:line="28" pos:column="66">gapSize<pos:position pos:line="28" pos:column="73"/></name></name><argument_list pos:line="28" pos:column="73">()<pos:position pos:line="28" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="28" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="77"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="29" pos:column="5">state<pos:position pos:line="29" pos:column="10"/></name><operator pos:line="29" pos:column="10">-&gt;<pos:position pos:line="29" pos:column="15"/></operator><name pos:line="29" pos:column="12">outbuf_offset<pos:position pos:line="29" pos:column="25"/></name></name> <operator pos:line="29" pos:column="26">+=<pos:position pos:line="29" pos:column="28"/></operator> <name><name pos:line="29" pos:column="29">header<pos:position pos:line="29" pos:column="35"/></name><operator pos:line="29" pos:column="35">.<pos:position pos:line="29" pos:column="36"/></operator><name pos:line="29" pos:column="36">record_size<pos:position pos:line="29" pos:column="47"/></name></name></expr>;<pos:position pos:line="29" pos:column="48"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="31" pos:column="5">state<pos:position pos:line="31" pos:column="10"/></name><operator pos:line="31" pos:column="10">-&gt;<pos:position pos:line="31" pos:column="15"/></operator><name pos:line="31" pos:column="12">walker<pos:position pos:line="31" pos:column="18"/></name></name> <operator pos:line="31" pos:column="19">=<pos:position pos:line="31" pos:column="20"/></operator> <call><name><name pos:line="31" pos:column="21">repl<pos:position pos:line="31" pos:column="25"/></name><operator pos:line="31" pos:column="25">-&gt;<pos:position pos:line="31" pos:column="30"/></operator><name pos:line="31" pos:column="27">WalkInit<pos:position pos:line="31" pos:column="35"/></name></name><argument_list pos:line="31" pos:column="35">(<argument><expr><name pos:line="31" pos:column="36">repl<pos:position pos:line="31" pos:column="40"/></name></expr></argument>)<pos:position pos:line="31" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name><operator pos:line="32" pos:column="5">::<pos:position pos:line="32" pos:column="7"/></operator><name pos:line="32" pos:column="7">unlink<pos:position pos:line="32" pos:column="13"/></name></name><argument_list pos:line="32" pos:column="13">(<argument><expr><name><name pos:line="32" pos:column="14">state<pos:position pos:line="32" pos:column="19"/></name><operator pos:line="32" pos:column="19">-&gt;<pos:position pos:line="32" pos:column="24"/></operator><name pos:line="32" pos:column="21">cln<pos:position pos:line="32" pos:column="24"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">debugs<pos:position pos:line="33" pos:column="11"/></name><argument_list pos:line="33" pos:column="11">(<argument><expr><literal type="number" pos:line="33" pos:column="12">47<pos:position pos:line="33" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="16">3<pos:position pos:line="33" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="19">HERE<pos:position pos:line="33" pos:column="23"/></name> <operator pos:line="33" pos:column="24">&lt;&lt;<pos:position pos:line="33" pos:column="32"/></operator> <literal type="string" pos:line="33" pos:column="27">"opened "<pos:position pos:line="33" pos:column="36"/></literal> <operator pos:line="33" pos:column="37">&lt;&lt;<pos:position pos:line="33" pos:column="45"/></operator> <name><name pos:line="33" pos:column="40">state<pos:position pos:line="33" pos:column="45"/></name><operator pos:line="33" pos:column="45">-&gt;<pos:position pos:line="33" pos:column="50"/></operator><name pos:line="33" pos:column="47">newLog<pos:position pos:line="33" pos:column="53"/></name></name> <operator pos:line="33" pos:column="54">&lt;&lt;<pos:position pos:line="33" pos:column="62"/></operator> <literal type="string" pos:line="33" pos:column="57">", FD "<pos:position pos:line="33" pos:column="64"/></literal> <operator pos:line="33" pos:column="65">&lt;&lt;<pos:position pos:line="33" pos:column="73"/></operator> <name><name pos:line="33" pos:column="68">state<pos:position pos:line="33" pos:column="73"/></name><operator pos:line="33" pos:column="73">-&gt;<pos:position pos:line="33" pos:column="78"/></operator><name pos:line="33" pos:column="75">fd<pos:position pos:line="33" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="79"/></expr_stmt>
<cpp:if pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">if<pos:position pos:line="34" pos:column="4"/></cpp:directive> <expr><name pos:line="34" pos:column="5">HAVE_FCHMOD<pos:position pos:line="34" pos:column="16"/></name></expr></cpp:if>

    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><call><name><operator pos:line="36" pos:column="9">::<pos:position pos:line="36" pos:column="11"/></operator><name pos:line="36" pos:column="11">stat<pos:position pos:line="36" pos:column="15"/></name></name><argument_list pos:line="36" pos:column="15">(<argument><expr><name><name pos:line="36" pos:column="16">state<pos:position pos:line="36" pos:column="21"/></name><operator pos:line="36" pos:column="21">-&gt;<pos:position pos:line="36" pos:column="26"/></operator><name pos:line="36" pos:column="23">cur<pos:position pos:line="36" pos:column="26"/></name></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="28">&amp;<pos:position pos:line="36" pos:column="33"/></operator><name pos:line="36" pos:column="29">sb<pos:position pos:line="36" pos:column="31"/></name></expr></argument>)<pos:position pos:line="36" pos:column="32"/></argument_list></call> <operator pos:line="36" pos:column="33">==<pos:position pos:line="36" pos:column="35"/></operator> <literal type="number" pos:line="36" pos:column="36">0<pos:position pos:line="36" pos:column="37"/></literal></expr>)<pos:position pos:line="36" pos:column="38"/></condition><then pos:line="36" pos:column="38">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="9">fchmod<pos:position pos:line="37" pos:column="15"/></name><argument_list pos:line="37" pos:column="15">(<argument><expr><name><name pos:line="37" pos:column="16">state<pos:position pos:line="37" pos:column="21"/></name><operator pos:line="37" pos:column="21">-&gt;<pos:position pos:line="37" pos:column="26"/></operator><name pos:line="37" pos:column="23">fd<pos:position pos:line="37" pos:column="25"/></name></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="27">sb<pos:position pos:line="37" pos:column="29"/></name><operator pos:line="37" pos:column="29">.<pos:position pos:line="37" pos:column="30"/></operator><name pos:line="37" pos:column="30">st_mode<pos:position pos:line="37" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="39"/></expr_stmt></block></then></if>

<cpp:endif pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">endif<pos:position pos:line="39" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><name pos:line="41" pos:column="5">cleanLog<pos:position pos:line="41" pos:column="13"/></name> <operator pos:line="41" pos:column="14">=<pos:position pos:line="41" pos:column="15"/></operator> <name pos:line="41" pos:column="16">state<pos:position pos:line="41" pos:column="21"/></name></expr>;<pos:position pos:line="41" pos:column="22"/></expr_stmt>
    <return pos:line="42" pos:column="5">return <expr><literal type="number" pos:line="42" pos:column="12">0<pos:position pos:line="42" pos:column="13"/></literal></expr>;<pos:position pos:line="42" pos:column="14"/></return>
}<pos:position pos:line="43" pos:column="2"/></block></function></unit>
