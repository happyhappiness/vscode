<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3692_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">squid_res_setservers<pos:position pos:line="2" pos:column="21"/></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><name pos:line="2" pos:column="22">int<pos:position pos:line="2" pos:column="25"/></name></type> <name pos:line="2" pos:column="26">reset<pos:position pos:line="2" pos:column="31"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="32"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:if pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">if<pos:position pos:line="4" pos:column="4"/></cpp:directive> <expr><name pos:line="4" pos:column="5">_SQUID_FREEBSD_<pos:position pos:line="4" pos:column="20"/></name> <operator pos:line="4" pos:column="21">&amp;&amp;<pos:position pos:line="4" pos:column="31"/></operator> <call><name pos:line="4" pos:column="24">defined<pos:position pos:line="4" pos:column="31"/></name><argument_list pos:line="4" pos:column="31">(<argument><expr><name pos:line="4" pos:column="32">_SQUID_RES_NSADDR6_COUNT<pos:position pos:line="4" pos:column="56"/></name></expr></argument>)<pos:position pos:line="4" pos:column="57"/></argument_list></call></expr></cpp:if>
    <comment type="block" pos:line="5" pos:column="5">/* Only seems to be valid on FreeBSD 5.5 where _res_ext was provided without an ns6addr counter! */</comment>
    <comment type="block" pos:line="6" pos:column="5">/* Gone again on FreeBSD 6.2 along with _res_ext itself in any form. */</comment>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">ns6count<pos:position pos:line="7" pos:column="17"/></name> <init pos:line="7" pos:column="18">= <expr><literal type="number" pos:line="7" pos:column="20">0<pos:position pos:line="7" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt>
<cpp:endif pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">endif<pos:position pos:line="8" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">if<pos:position pos:line="9" pos:column="4"/></cpp:directive> <expr><name pos:line="9" pos:column="5">HAVE_RES_INIT<pos:position pos:line="9" pos:column="18"/></name> <operator pos:line="9" pos:column="19">&amp;&amp;<pos:position pos:line="9" pos:column="29"/></operator> <call><name pos:line="9" pos:column="22">defined<pos:position pos:line="9" pos:column="29"/></name><argument_list pos:line="9" pos:column="29">(<argument><expr><name pos:line="9" pos:column="30">_SQUID_RES_NSADDR_LIST<pos:position pos:line="9" pos:column="52"/></name></expr></argument>)<pos:position pos:line="9" pos:column="53"/></argument_list></call></expr></cpp:if>
    <decl_stmt><decl><specifier pos:line="10" pos:column="5">extern<pos:position pos:line="10" pos:column="11"/></specifier> <type><name pos:line="10" pos:column="12">char<pos:position pos:line="10" pos:column="16"/></name> <modifier pos:line="10" pos:column="17">*<pos:position pos:line="10" pos:column="18"/></modifier></type><name pos:line="10" pos:column="18">optarg<pos:position pos:line="10" pos:column="24"/></name></decl>;<pos:position pos:line="10" pos:column="25"/></decl_stmt>
<cpp:endif pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">endif<pos:position pos:line="11" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">if<pos:position pos:line="13" pos:column="4"/></cpp:directive> <expr><name pos:line="13" pos:column="5">HAVE_RES_INIT<pos:position pos:line="13" pos:column="18"/></name> <operator pos:line="13" pos:column="19">&amp;&amp;<pos:position pos:line="13" pos:column="29"/></operator> <operator pos:line="13" pos:column="22">(<pos:position pos:line="13" pos:column="23"/></operator><call><name pos:line="13" pos:column="23">defined<pos:position pos:line="13" pos:column="30"/></name><argument_list pos:line="13" pos:column="30">(<argument><expr><name pos:line="13" pos:column="31">_SQUID_RES_NSADDR_LIST<pos:position pos:line="13" pos:column="53"/></name></expr></argument>)<pos:position pos:line="13" pos:column="54"/></argument_list></call> <operator pos:line="13" pos:column="55">||<pos:position pos:line="13" pos:column="57"/></operator> <call><name pos:line="13" pos:column="58">defined<pos:position pos:line="13" pos:column="65"/></name><argument_list pos:line="13" pos:column="65">(<argument><expr><name pos:line="13" pos:column="66">_SQUID_RES_NSADDR6_LIST<pos:position pos:line="13" pos:column="89"/></name></expr></argument>)<pos:position pos:line="13" pos:column="90"/></argument_list></call><operator pos:line="13" pos:column="90">)<pos:position pos:line="13" pos:column="91"/></operator></expr></cpp:if>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">reset<pos:position pos:line="15" pos:column="14"/></name> <operator pos:line="15" pos:column="15">==<pos:position pos:line="15" pos:column="17"/></operator> <literal type="number" pos:line="15" pos:column="18">0<pos:position pos:line="15" pos:column="19"/></literal></expr>)<pos:position pos:line="15" pos:column="20"/></condition><then pos:line="15" pos:column="20"> <block pos:line="15" pos:column="21">{
<cpp:if pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">if<pos:position pos:line="16" pos:column="4"/></cpp:directive> <expr><call><name pos:line="16" pos:column="5">defined<pos:position pos:line="16" pos:column="12"/></name><argument_list pos:line="16" pos:column="12">(<argument><expr><name pos:line="16" pos:column="13">_SQUID_RES_NSADDR_COUNT<pos:position pos:line="16" pos:column="36"/></name></expr></argument>)<pos:position pos:line="16" pos:column="37"/></argument_list></call></expr></cpp:if>
        <expr_stmt><expr><name pos:line="17" pos:column="9">_SQUID_RES_NSADDR_COUNT<pos:position pos:line="17" pos:column="32"/></name> <operator pos:line="17" pos:column="33">=<pos:position pos:line="17" pos:column="34"/></operator> <literal type="number" pos:line="17" pos:column="35">0<pos:position pos:line="17" pos:column="36"/></literal></expr>;<pos:position pos:line="17" pos:column="37"/></expr_stmt>
        <comment type="block" pos:line="18" pos:column="9">/* because I don't trust the nscount super-count entirely, make sure these are ALL invalid */</comment>
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">memset<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><name pos:line="19" pos:column="16">_SQUID_RES_NSADDR_LIST<pos:position pos:line="19" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="40">0<pos:position pos:line="19" pos:column="41"/></literal></expr></argument>, <argument><expr><sizeof pos:line="19" pos:column="43">sizeof<argument_list pos:line="19" pos:column="49">(<argument><expr pos:line="19" pos:column="50">struct <name pos:line="19" pos:column="57">sockaddr_in<pos:position pos:line="19" pos:column="68"/></name></expr></argument>)<pos:position pos:line="19" pos:column="69"/></argument_list></sizeof><operator pos:line="19" pos:column="69">*<pos:position pos:line="19" pos:column="70"/></operator><name pos:line="19" pos:column="70">MAXNS<pos:position pos:line="19" pos:column="75"/></name></expr></argument>)<pos:position pos:line="19" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="77"/></expr_stmt>
<cpp:endif pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">endif<pos:position pos:line="20" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">if<pos:position pos:line="21" pos:column="4"/></cpp:directive> <expr><call><name pos:line="21" pos:column="5">defined<pos:position pos:line="21" pos:column="12"/></name><argument_list pos:line="21" pos:column="12">(<argument><expr><name pos:line="21" pos:column="13">_SQUID_RES_NSADDR6_COUNT<pos:position pos:line="21" pos:column="37"/></name></expr></argument>)<pos:position pos:line="21" pos:column="38"/></argument_list></call></expr></cpp:if>
        <expr_stmt><expr><name pos:line="22" pos:column="9">_SQUID_RES_NSADDR6_COUNT<pos:position pos:line="22" pos:column="33"/></name> <operator pos:line="22" pos:column="34">=<pos:position pos:line="22" pos:column="35"/></operator> <literal type="number" pos:line="22" pos:column="36">0<pos:position pos:line="22" pos:column="37"/></literal></expr>;<pos:position pos:line="22" pos:column="38"/></expr_stmt>
<cpp:endif pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">endif<pos:position pos:line="23" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="26" pos:column="5">/* AYJ:
     *  I experimented with all the permutations of mixed/unmixed nscount/nscount6 IPv4/IPv6/Both/invalid
     *
     *  I'm not sure if splitting them really helps.
     *  I've seen no evidence of IPv4 resolver *ever* being used when some IPv6 are set (or not even)
     *  BUT, have seen segfault when IPv4 is added to NSADDR6 list (_res._u._ext).
     *  It also appears to not do ANY lookup when _res.nscount==0.
     *
     *  BUT, even if _res.nsaddrs is memset to NULL, it resolves IFF IPv6 set in _ext.
     *
     *  SO, am splitting the IPv4/v6 into the seperate _res fields
     *      and making nscount a total of IPv4+IPv6 /w nscount6 the IPv6 sub-counter
     *	ie. nscount = count(NSv4)+count(NSv6) &amp; nscount6 = count(NSv6)
     *
     * If ANYONE knows better please let us know.
     */</comment>
    <decl_stmt><decl><type><name><name pos:line="42" pos:column="5">struct<pos:position pos:line="42" pos:column="11"/></name> <name pos:line="42" pos:column="12">addrinfo<pos:position pos:line="42" pos:column="20"/></name></name></type> <name pos:line="42" pos:column="21">hints<pos:position pos:line="42" pos:column="26"/></name></decl>;<pos:position pos:line="42" pos:column="27"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">memset<pos:position pos:line="43" pos:column="11"/></name><argument_list pos:line="43" pos:column="11">(<argument><expr><operator pos:line="43" pos:column="12">&amp;<pos:position pos:line="43" pos:column="17"/></operator><name pos:line="43" pos:column="13">hints<pos:position pos:line="43" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="43" pos:column="20">'\0'<pos:position pos:line="43" pos:column="24"/></literal></expr></argument>, <argument><expr><sizeof pos:line="43" pos:column="26">sizeof<argument_list pos:line="43" pos:column="32">(<argument><expr pos:line="43" pos:column="33">struct <name pos:line="43" pos:column="40">addrinfo<pos:position pos:line="43" pos:column="48"/></name></expr></argument>)<pos:position pos:line="43" pos:column="49"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="43" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="44" pos:column="5">hints<pos:position pos:line="44" pos:column="10"/></name><operator pos:line="44" pos:column="10">.<pos:position pos:line="44" pos:column="11"/></operator><name pos:line="44" pos:column="11">ai_family<pos:position pos:line="44" pos:column="20"/></name></name> <operator pos:line="44" pos:column="21">=<pos:position pos:line="44" pos:column="22"/></operator> <name pos:line="44" pos:column="23">AF_UNSPEC<pos:position pos:line="44" pos:column="32"/></name></expr>;<pos:position pos:line="44" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="45" pos:column="5">hints<pos:position pos:line="45" pos:column="10"/></name><operator pos:line="45" pos:column="10">.<pos:position pos:line="45" pos:column="11"/></operator><name pos:line="45" pos:column="11">ai_flags<pos:position pos:line="45" pos:column="19"/></name></name> <operator pos:line="45" pos:column="20">=<pos:position pos:line="45" pos:column="21"/></operator> <name pos:line="45" pos:column="22">AI_NUMERICHOST<pos:position pos:line="45" pos:column="36"/></name></expr>;<pos:position pos:line="45" pos:column="37"/></expr_stmt> <comment type="line" pos:line="45" pos:column="38">// prevent repeated DNS lookups!</comment>
    <decl_stmt><decl><type><name><name pos:line="46" pos:column="5">struct<pos:position pos:line="46" pos:column="11"/></name> <name pos:line="46" pos:column="12">addrinfo<pos:position pos:line="46" pos:column="20"/></name></name> <modifier pos:line="46" pos:column="21">*<pos:position pos:line="46" pos:column="22"/></modifier></type><name pos:line="46" pos:column="22">AI<pos:position pos:line="46" pos:column="24"/></name> <init pos:line="46" pos:column="25">= <expr><name pos:line="46" pos:column="27">NULL<pos:position pos:line="46" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="46" pos:column="32"/></decl_stmt>
    <if pos:line="47" pos:column="5">if <condition pos:line="47" pos:column="8">( <expr><call><name pos:line="47" pos:column="10">getaddrinfo<pos:position pos:line="47" pos:column="21"/></name><argument_list pos:line="47" pos:column="21">(<argument><expr><name pos:line="47" pos:column="22">optarg<pos:position pos:line="47" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="30">NULL<pos:position pos:line="47" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="36">&amp;<pos:position pos:line="47" pos:column="41"/></operator><name pos:line="47" pos:column="37">hints<pos:position pos:line="47" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="44">&amp;<pos:position pos:line="47" pos:column="49"/></operator><name pos:line="47" pos:column="45">AI<pos:position pos:line="47" pos:column="47"/></name></expr></argument>)<pos:position pos:line="47" pos:column="48"/></argument_list></call> <operator pos:line="47" pos:column="49">!=<pos:position pos:line="47" pos:column="51"/></operator> <literal type="number" pos:line="47" pos:column="52">0<pos:position pos:line="47" pos:column="53"/></literal></expr>)<pos:position pos:line="47" pos:column="54"/></condition><then pos:line="47" pos:column="54"> <block pos:line="47" pos:column="55">{
        <expr_stmt><expr><call><name pos:line="48" pos:column="9">fprintf<pos:position pos:line="48" pos:column="16"/></name><argument_list pos:line="48" pos:column="16">(<argument><expr><name pos:line="48" pos:column="17">stderr<pos:position pos:line="48" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="25">"%s appears to be a bad nameserver FQDN/IP.\n"<pos:position pos:line="48" pos:column="71"/></literal></expr></argument>,<argument><expr><name pos:line="48" pos:column="72">optarg<pos:position pos:line="48" pos:column="78"/></name></expr></argument>)<pos:position pos:line="48" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="80"/></expr_stmt>
    }<pos:position pos:line="49" pos:column="6"/></block></then> <elseif pos:line="49" pos:column="7">else <if pos:line="49" pos:column="12">if <condition pos:line="49" pos:column="15">( <expr><name><name pos:line="49" pos:column="17">AI<pos:position pos:line="49" pos:column="19"/></name><operator pos:line="49" pos:column="19">-&gt;<pos:position pos:line="49" pos:column="24"/></operator><name pos:line="49" pos:column="21">ai_family<pos:position pos:line="49" pos:column="30"/></name></name> <operator pos:line="49" pos:column="31">==<pos:position pos:line="49" pos:column="33"/></operator> <name pos:line="49" pos:column="34">AF_INET<pos:position pos:line="49" pos:column="41"/></name></expr> )<pos:position pos:line="49" pos:column="43"/></condition><then pos:line="49" pos:column="43"> <block pos:line="49" pos:column="44">{
        <if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><name pos:line="50" pos:column="13">_SQUID_RES_NSADDR_COUNT<pos:position pos:line="50" pos:column="36"/></name> <operator pos:line="50" pos:column="37">==<pos:position pos:line="50" pos:column="39"/></operator> <name pos:line="50" pos:column="40">MAXNS<pos:position pos:line="50" pos:column="45"/></name></expr>)<pos:position pos:line="50" pos:column="46"/></condition><then pos:line="50" pos:column="46"> <block pos:line="50" pos:column="47">{
            <expr_stmt><expr><call><name pos:line="51" pos:column="13">fprintf<pos:position pos:line="51" pos:column="20"/></name><argument_list pos:line="51" pos:column="20">(<argument><expr><name pos:line="51" pos:column="21">stderr<pos:position pos:line="51" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="29">"Too many -s options, only %d are allowed\n"<pos:position pos:line="51" pos:column="73"/></literal></expr></argument>, <argument><expr><name pos:line="51" pos:column="75">MAXNS<pos:position pos:line="51" pos:column="80"/></name></expr></argument>)<pos:position pos:line="51" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="82"/></expr_stmt>
        }<pos:position pos:line="52" pos:column="10"/></block></then> <else pos:line="52" pos:column="11">else <block pos:line="52" pos:column="16">{
            <expr_stmt><expr><name><name pos:line="53" pos:column="13">_SQUID_RES_NSADDR_LIST<pos:position pos:line="53" pos:column="35"/></name><index pos:line="53" pos:column="35">[<expr><name pos:line="53" pos:column="36">_SQUID_RES_NSADDR_COUNT<pos:position pos:line="53" pos:column="59"/></name></expr>]<pos:position pos:line="53" pos:column="60"/></index></name> <operator pos:line="53" pos:column="61">=<pos:position pos:line="53" pos:column="62"/></operator> <name><name pos:line="53" pos:column="63">_SQUID_RES_NSADDR_LIST<pos:position pos:line="53" pos:column="85"/></name><index pos:line="53" pos:column="85">[<expr><literal type="number" pos:line="53" pos:column="86">0<pos:position pos:line="53" pos:column="87"/></literal></expr>]<pos:position pos:line="53" pos:column="88"/></index></name></expr>;<pos:position pos:line="53" pos:column="89"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="54" pos:column="13">memcpy<pos:position pos:line="54" pos:column="19"/></name><argument_list pos:line="54" pos:column="19">(<argument><expr><operator pos:line="54" pos:column="20">&amp;<pos:position pos:line="54" pos:column="25"/></operator><name><name pos:line="54" pos:column="21">_SQUID_RES_NSADDR_LIST<pos:position pos:line="54" pos:column="43"/></name><index pos:line="54" pos:column="43">[<expr><name pos:line="54" pos:column="44">_SQUID_RES_NSADDR_COUNT<pos:position pos:line="54" pos:column="67"/></name><operator pos:line="54" pos:column="67">++<pos:position pos:line="54" pos:column="69"/></operator></expr>]<pos:position pos:line="54" pos:column="70"/></index></name><operator pos:line="54" pos:column="70">.<pos:position pos:line="54" pos:column="71"/></operator><name pos:line="54" pos:column="71">sin_addr<pos:position pos:line="54" pos:column="79"/></name></expr></argument>, <argument><expr><operator pos:line="54" pos:column="81">&amp;<pos:position pos:line="54" pos:column="86"/></operator><operator pos:line="54" pos:column="82">(<pos:position pos:line="54" pos:column="83"/></operator><operator pos:line="54" pos:column="83">(<pos:position pos:line="54" pos:column="84"/></operator>struct <name pos:line="54" pos:column="91">sockaddr_in<pos:position pos:line="54" pos:column="102"/></name><operator pos:line="54" pos:column="102">*<pos:position pos:line="54" pos:column="103"/></operator><operator pos:line="54" pos:column="103">)<pos:position pos:line="54" pos:column="104"/></operator><name><name pos:line="54" pos:column="104">AI<pos:position pos:line="54" pos:column="106"/></name><operator pos:line="54" pos:column="106">-&gt;<pos:position pos:line="54" pos:column="111"/></operator><name pos:line="54" pos:column="108">ai_addr<pos:position pos:line="54" pos:column="115"/></name></name><operator pos:line="54" pos:column="115">)<pos:position pos:line="54" pos:column="116"/></operator><operator pos:line="54" pos:column="116">-&gt;<pos:position pos:line="54" pos:column="121"/></operator><name pos:line="54" pos:column="118">sin_addr<pos:position pos:line="54" pos:column="126"/></name></expr></argument>, <argument><expr><sizeof pos:line="54" pos:column="128">sizeof<argument_list pos:line="54" pos:column="134">(<argument><expr pos:line="54" pos:column="135">struct <name pos:line="54" pos:column="142">in_addr<pos:position pos:line="54" pos:column="149"/></name></expr></argument>)<pos:position pos:line="54" pos:column="150"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="54" pos:column="151"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="152"/></expr_stmt>
        }<pos:position pos:line="55" pos:column="10"/></block></else></if>
    }<pos:position pos:line="56" pos:column="6"/></block></then></if></elseif> <elseif pos:line="56" pos:column="7">else <if pos:line="56" pos:column="12">if <condition pos:line="56" pos:column="15">( <expr><name><name pos:line="56" pos:column="17">AI<pos:position pos:line="56" pos:column="19"/></name><operator pos:line="56" pos:column="19">-&gt;<pos:position pos:line="56" pos:column="24"/></operator><name pos:line="56" pos:column="21">ai_family<pos:position pos:line="56" pos:column="30"/></name></name> <operator pos:line="56" pos:column="31">==<pos:position pos:line="56" pos:column="33"/></operator> <name pos:line="56" pos:column="34">AF_INET6<pos:position pos:line="56" pos:column="42"/></name></expr> )<pos:position pos:line="56" pos:column="44"/></condition><then pos:line="56" pos:column="44"> <block pos:line="56" pos:column="45">{
<cpp:if pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">if<pos:position pos:line="57" pos:column="4"/></cpp:directive> <expr><name pos:line="57" pos:column="5">USE_IPV6<pos:position pos:line="57" pos:column="13"/></name> <operator pos:line="57" pos:column="14">&amp;&amp;<pos:position pos:line="57" pos:column="24"/></operator> <call><name pos:line="57" pos:column="17">defined<pos:position pos:line="57" pos:column="24"/></name><argument_list pos:line="57" pos:column="24">(<argument><expr><name pos:line="57" pos:column="25">_SQUID_RES_NSADDR6_LIST<pos:position pos:line="57" pos:column="48"/></name></expr></argument>)<pos:position pos:line="57" pos:column="49"/></argument_list></call></expr></cpp:if>
        <comment type="block" pos:line="58" pos:column="9">/* because things NEVER seem to resolve in tests without _res.nscount being a total. */</comment>
        <if pos:line="59" pos:column="9">if <condition pos:line="59" pos:column="12">(<expr><name pos:line="59" pos:column="13">_SQUID_RES_NSADDR_COUNT<pos:position pos:line="59" pos:column="36"/></name> <operator pos:line="59" pos:column="37">==<pos:position pos:line="59" pos:column="39"/></operator> <name pos:line="59" pos:column="40">MAXNS<pos:position pos:line="59" pos:column="45"/></name></expr>)<pos:position pos:line="59" pos:column="46"/></condition><then pos:line="59" pos:column="46"> <block pos:line="59" pos:column="47">{
            <expr_stmt><expr><call><name pos:line="60" pos:column="13">fprintf<pos:position pos:line="60" pos:column="20"/></name><argument_list pos:line="60" pos:column="20">(<argument><expr><name pos:line="60" pos:column="21">stderr<pos:position pos:line="60" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="29">"Too many -s options, only %d are allowed\n"<pos:position pos:line="60" pos:column="73"/></literal></expr></argument>, <argument><expr><name pos:line="60" pos:column="75">MAXNS<pos:position pos:line="60" pos:column="80"/></name></expr></argument>)<pos:position pos:line="60" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="82"/></expr_stmt>
        }<pos:position pos:line="61" pos:column="10"/></block></then> <else pos:line="61" pos:column="11">else <block pos:line="61" pos:column="16">{
            <expr_stmt><expr><operator pos:line="62" pos:column="13">++<pos:position pos:line="62" pos:column="15"/></operator> <name pos:line="62" pos:column="16">_SQUID_RES_NSADDR_COUNT<pos:position pos:line="62" pos:column="39"/></name></expr>;<pos:position pos:line="62" pos:column="40"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="63" pos:column="13">memcpy<pos:position pos:line="63" pos:column="19"/></name><argument_list pos:line="63" pos:column="19">(<argument><expr><operator pos:line="63" pos:column="20">&amp;<pos:position pos:line="63" pos:column="25"/></operator><call><name pos:line="63" pos:column="21">_SQUID_RES_NSADDR6_LIST<pos:position pos:line="63" pos:column="44"/></name><argument_list pos:line="63" pos:column="44">(<argument><expr><name pos:line="63" pos:column="45">_SQUID_RES_NSADDR6_COUNT<pos:position pos:line="63" pos:column="69"/></name><operator pos:line="63" pos:column="69">++<pos:position pos:line="63" pos:column="71"/></operator></expr></argument>)<pos:position pos:line="63" pos:column="72"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="63" pos:column="74">&amp;<pos:position pos:line="63" pos:column="79"/></operator><operator pos:line="63" pos:column="75">(<pos:position pos:line="63" pos:column="76"/></operator><operator pos:line="63" pos:column="76">(<pos:position pos:line="63" pos:column="77"/></operator>struct <name pos:line="63" pos:column="84">sockaddr_in6<pos:position pos:line="63" pos:column="96"/></name><operator pos:line="63" pos:column="96">*<pos:position pos:line="63" pos:column="97"/></operator><operator pos:line="63" pos:column="97">)<pos:position pos:line="63" pos:column="98"/></operator><name><name pos:line="63" pos:column="98">AI<pos:position pos:line="63" pos:column="100"/></name><operator pos:line="63" pos:column="100">-&gt;<pos:position pos:line="63" pos:column="105"/></operator><name pos:line="63" pos:column="102">ai_addr<pos:position pos:line="63" pos:column="109"/></name></name><operator pos:line="63" pos:column="109">)<pos:position pos:line="63" pos:column="110"/></operator><operator pos:line="63" pos:column="110">-&gt;<pos:position pos:line="63" pos:column="115"/></operator><name pos:line="63" pos:column="112">sin6_addr<pos:position pos:line="63" pos:column="121"/></name></expr></argument>, <argument><expr><sizeof pos:line="63" pos:column="123">sizeof<argument_list pos:line="63" pos:column="129">(<argument><expr pos:line="63" pos:column="130">struct <name pos:line="63" pos:column="137">in6_addr<pos:position pos:line="63" pos:column="145"/></name></expr></argument>)<pos:position pos:line="63" pos:column="146"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="63" pos:column="147"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="148"/></expr_stmt>
        }<pos:position pos:line="64" pos:column="10"/></block></else></if>
<cpp:else pos:line="65" pos:column="1">#<cpp:directive pos:line="65" pos:column="2">else<pos:position pos:line="65" pos:column="6"/></cpp:directive></cpp:else>
        <expr_stmt><expr><call><name pos:line="66" pos:column="9">fprintf<pos:position pos:line="66" pos:column="16"/></name><argument_list pos:line="66" pos:column="16">(<argument><expr><name pos:line="66" pos:column="17">stderr<pos:position pos:line="66" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="25">"IPv6 nameservers not supported on this resolver\n"<pos:position pos:line="66" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="78"/></expr_stmt>
<cpp:endif pos:line="67" pos:column="1">#<cpp:directive pos:line="67" pos:column="2">endif<pos:position pos:line="67" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="68" pos:column="6"/></block></then></if></elseif></if>
    <if pos:line="69" pos:column="5">if <condition pos:line="69" pos:column="8">(<expr><name pos:line="69" pos:column="9">AI<pos:position pos:line="69" pos:column="11"/></name> <operator pos:line="69" pos:column="12">!=<pos:position pos:line="69" pos:column="14"/></operator> <name pos:line="69" pos:column="15">NULL<pos:position pos:line="69" pos:column="19"/></name></expr>)<pos:position pos:line="69" pos:column="20"/></condition><then pos:line="69" pos:column="20">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="70" pos:column="9">freeaddrinfo<pos:position pos:line="70" pos:column="21"/></name><argument_list pos:line="70" pos:column="21">(<argument><expr><name pos:line="70" pos:column="22">AI<pos:position pos:line="70" pos:column="24"/></name></expr></argument>)<pos:position pos:line="70" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="26"/></expr_stmt></block></then></if>

<cpp:else pos:line="72" pos:column="1">#<cpp:directive pos:line="72" pos:column="2">else<pos:position pos:line="72" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="72" pos:column="7">/* !HAVE_RES_INIT || !defined(_SQUID_RES_NSADDR_LIST) */</comment>

    <expr_stmt><expr><call><name pos:line="74" pos:column="5">fprintf<pos:position pos:line="74" pos:column="12"/></name><argument_list pos:line="74" pos:column="12">(<argument><expr><name pos:line="74" pos:column="13">stderr<pos:position pos:line="74" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="74" pos:column="21">"-s is not supported on this resolver\n"<pos:position pos:line="74" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="63"/></expr_stmt>

<cpp:endif pos:line="76" pos:column="1">#<cpp:directive pos:line="76" pos:column="2">endif<pos:position pos:line="76" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="76" pos:column="8">/* HAVE_RES_INIT */</comment>
}<pos:position pos:line="77" pos:column="2"/></block></function></unit>
