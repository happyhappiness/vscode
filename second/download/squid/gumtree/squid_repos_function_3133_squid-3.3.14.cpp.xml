<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3133_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">strHdrAcptLangGetItem<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><specifier pos:line="1" pos:column="28">const<pos:position pos:line="1" pos:column="33"/></specifier> <name pos:line="1" pos:column="34">String<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">&amp;<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="42">hdr<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="47">char<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">lang<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="59">int<pos:position pos:line="1" pos:column="62"/></name></type> <name pos:line="1" pos:column="63">langLen<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="72">size_t<pos:position pos:line="1" pos:column="78"/></name> <modifier pos:line="1" pos:column="79">&amp;<pos:position pos:line="1" pos:column="84"/></modifier></type><name pos:line="1" pos:column="80">pos<pos:position pos:line="1" pos:column="83"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="84"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <while pos:line="3" pos:column="5">while <condition pos:line="3" pos:column="11">(<expr><name pos:line="3" pos:column="12">pos<pos:position pos:line="3" pos:column="15"/></name> <operator pos:line="3" pos:column="16">&lt;<pos:position pos:line="3" pos:column="20"/></operator> <call><name><name pos:line="3" pos:column="18">hdr<pos:position pos:line="3" pos:column="21"/></name><operator pos:line="3" pos:column="21">.<pos:position pos:line="3" pos:column="22"/></operator><name pos:line="3" pos:column="22">size<pos:position pos:line="3" pos:column="26"/></name></name><argument_list pos:line="3" pos:column="26">()<pos:position pos:line="3" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="3" pos:column="29"/></condition> <block pos:line="3" pos:column="30">{
        <decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">dt<pos:position pos:line="4" pos:column="17"/></name> <init pos:line="4" pos:column="18">= <expr><name pos:line="4" pos:column="20">lang<pos:position pos:line="4" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>

        <comment type="block" pos:line="6" pos:column="9">/* skip any initial whitespace. */</comment>
        <while pos:line="7" pos:column="9">while <condition pos:line="7" pos:column="15">(<expr><name pos:line="7" pos:column="16">pos<pos:position pos:line="7" pos:column="19"/></name> <operator pos:line="7" pos:column="20">&lt;<pos:position pos:line="7" pos:column="24"/></operator> <call><name><name pos:line="7" pos:column="22">hdr<pos:position pos:line="7" pos:column="25"/></name><operator pos:line="7" pos:column="25">.<pos:position pos:line="7" pos:column="26"/></operator><name pos:line="7" pos:column="26">size<pos:position pos:line="7" pos:column="30"/></name></name><argument_list pos:line="7" pos:column="30">()<pos:position pos:line="7" pos:column="32"/></argument_list></call> <operator pos:line="7" pos:column="33">&amp;&amp;<pos:position pos:line="7" pos:column="43"/></operator> <call><name pos:line="7" pos:column="36">xisspace<pos:position pos:line="7" pos:column="44"/></name><argument_list pos:line="7" pos:column="44">(<argument><expr><name><name pos:line="7" pos:column="45">hdr<pos:position pos:line="7" pos:column="48"/></name><index pos:line="7" pos:column="48">[<expr><name pos:line="7" pos:column="49">pos<pos:position pos:line="7" pos:column="52"/></name></expr>]<pos:position pos:line="7" pos:column="53"/></index></name></expr></argument>)<pos:position pos:line="7" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="55"/></condition>
            <block type="pseudo"><expr_stmt><expr><operator pos:line="8" pos:column="13">++<pos:position pos:line="8" pos:column="15"/></operator><name pos:line="8" pos:column="15">pos<pos:position pos:line="8" pos:column="18"/></name></expr>;<pos:position pos:line="8" pos:column="19"/></expr_stmt></block></while>

        <comment type="block" pos:line="10" pos:column="9">/*
         * Header value format:
         *  - sequence of whitespace delimited tags
         *  - each tag may suffix with ';'.* which we can ignore.
         *  - IFF a tag contains only two characters we can wildcard ANY translations matching: &lt;it&gt; '-'? .*
         *    with preference given to an exact match.
         */</comment>
        <decl_stmt><decl><type><name pos:line="17" pos:column="9">bool<pos:position pos:line="17" pos:column="13"/></name></type> <name pos:line="17" pos:column="14">invalid_byte<pos:position pos:line="17" pos:column="26"/></name> <init pos:line="17" pos:column="27">= <expr><literal type="boolean" pos:line="17" pos:column="29">false<pos:position pos:line="17" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="17" pos:column="35"/></decl_stmt>
        <while pos:line="18" pos:column="9">while <condition pos:line="18" pos:column="15">(<expr><name pos:line="18" pos:column="16">pos<pos:position pos:line="18" pos:column="19"/></name> <operator pos:line="18" pos:column="20">&lt;<pos:position pos:line="18" pos:column="24"/></operator> <call><name><name pos:line="18" pos:column="22">hdr<pos:position pos:line="18" pos:column="25"/></name><operator pos:line="18" pos:column="25">.<pos:position pos:line="18" pos:column="26"/></operator><name pos:line="18" pos:column="26">size<pos:position pos:line="18" pos:column="30"/></name></name><argument_list pos:line="18" pos:column="30">()<pos:position pos:line="18" pos:column="32"/></argument_list></call> <operator pos:line="18" pos:column="33">&amp;&amp;<pos:position pos:line="18" pos:column="43"/></operator> <name><name pos:line="18" pos:column="36">hdr<pos:position pos:line="18" pos:column="39"/></name><index pos:line="18" pos:column="39">[<expr><name pos:line="18" pos:column="40">pos<pos:position pos:line="18" pos:column="43"/></name></expr>]<pos:position pos:line="18" pos:column="44"/></index></name> <operator pos:line="18" pos:column="45">!=<pos:position pos:line="18" pos:column="47"/></operator> <literal type="char" pos:line="18" pos:column="48">';'<pos:position pos:line="18" pos:column="51"/></literal> <operator pos:line="18" pos:column="52">&amp;&amp;<pos:position pos:line="18" pos:column="62"/></operator> <name><name pos:line="18" pos:column="55">hdr<pos:position pos:line="18" pos:column="58"/></name><index pos:line="18" pos:column="58">[<expr><name pos:line="18" pos:column="59">pos<pos:position pos:line="18" pos:column="62"/></name></expr>]<pos:position pos:line="18" pos:column="63"/></index></name> <operator pos:line="18" pos:column="64">!=<pos:position pos:line="18" pos:column="66"/></operator> <literal type="char" pos:line="18" pos:column="67">','<pos:position pos:line="18" pos:column="70"/></literal> <operator pos:line="18" pos:column="71">&amp;&amp;<pos:position pos:line="18" pos:column="81"/></operator> <operator pos:line="18" pos:column="74">!<pos:position pos:line="18" pos:column="75"/></operator><call><name pos:line="18" pos:column="75">xisspace<pos:position pos:line="18" pos:column="83"/></name><argument_list pos:line="18" pos:column="83">(<argument><expr><name><name pos:line="18" pos:column="84">hdr<pos:position pos:line="18" pos:column="87"/></name><index pos:line="18" pos:column="87">[<expr><name pos:line="18" pos:column="88">pos<pos:position pos:line="18" pos:column="91"/></name></expr>]<pos:position pos:line="18" pos:column="92"/></index></name></expr></argument>)<pos:position pos:line="18" pos:column="93"/></argument_list></call> <operator pos:line="18" pos:column="94">&amp;&amp;<pos:position pos:line="18" pos:column="104"/></operator> <name pos:line="18" pos:column="97">dt<pos:position pos:line="18" pos:column="99"/></name> <operator pos:line="18" pos:column="100">&lt;<pos:position pos:line="18" pos:column="104"/></operator> <operator pos:line="18" pos:column="102">(<pos:position pos:line="18" pos:column="103"/></operator><name pos:line="18" pos:column="103">lang<pos:position pos:line="18" pos:column="107"/></name> <operator pos:line="18" pos:column="108">+<pos:position pos:line="18" pos:column="109"/></operator> <operator pos:line="18" pos:column="110">(<pos:position pos:line="18" pos:column="111"/></operator><name pos:line="18" pos:column="111">langLen<pos:position pos:line="18" pos:column="118"/></name> <operator pos:line="18" pos:column="119">-<pos:position pos:line="18" pos:column="120"/></operator><literal type="number" pos:line="18" pos:column="120">1<pos:position pos:line="18" pos:column="121"/></literal><operator pos:line="18" pos:column="121">)<pos:position pos:line="18" pos:column="122"/></operator><operator pos:line="18" pos:column="122">)<pos:position pos:line="18" pos:column="123"/></operator></expr> )<pos:position pos:line="18" pos:column="125"/></condition> <block pos:line="18" pos:column="126">{
            <if pos:line="19" pos:column="13">if <condition pos:line="19" pos:column="16">(<expr><operator pos:line="19" pos:column="17">!<pos:position pos:line="19" pos:column="18"/></operator><name pos:line="19" pos:column="18">invalid_byte<pos:position pos:line="19" pos:column="30"/></name></expr>)<pos:position pos:line="19" pos:column="31"/></condition><then pos:line="19" pos:column="31"> <block pos:line="19" pos:column="32">{
<cpp:if pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">if<pos:position pos:line="20" pos:column="4"/></cpp:directive> <expr><name pos:line="20" pos:column="5">USE_HTTP_VIOLATIONS<pos:position pos:line="20" pos:column="24"/></name></expr></cpp:if>
                <comment type="line" pos:line="21" pos:column="17">// if accepting violations we may as well accept some broken browsers</comment>
                <comment type="line" pos:line="22" pos:column="17">//  which may send us the right code, wrong ISO formatting.</comment>
                <if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><name><name pos:line="23" pos:column="21">hdr<pos:position pos:line="23" pos:column="24"/></name><index pos:line="23" pos:column="24">[<expr><name pos:line="23" pos:column="25">pos<pos:position pos:line="23" pos:column="28"/></name></expr>]<pos:position pos:line="23" pos:column="29"/></index></name> <operator pos:line="23" pos:column="30">==<pos:position pos:line="23" pos:column="32"/></operator> <literal type="char" pos:line="23" pos:column="33">'_'<pos:position pos:line="23" pos:column="36"/></literal></expr>)<pos:position pos:line="23" pos:column="37"/></condition><then pos:line="23" pos:column="37">
                    <block type="pseudo"><expr_stmt><expr><operator pos:line="24" pos:column="21">*<pos:position pos:line="24" pos:column="22"/></operator><name pos:line="24" pos:column="22">dt<pos:position pos:line="24" pos:column="24"/></name> <operator pos:line="24" pos:column="25">=<pos:position pos:line="24" pos:column="26"/></operator> <literal type="char" pos:line="24" pos:column="27">'-'<pos:position pos:line="24" pos:column="30"/></literal></expr>;<pos:position pos:line="24" pos:column="31"/></expr_stmt></block></then>
                <else pos:line="25" pos:column="17">else
<cpp:endif pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">endif<pos:position pos:line="26" pos:column="7"/></cpp:directive></cpp:endif>
                    <block type="pseudo"><expr_stmt><expr><operator pos:line="27" pos:column="21">*<pos:position pos:line="27" pos:column="22"/></operator><name pos:line="27" pos:column="22">dt<pos:position pos:line="27" pos:column="24"/></name> <operator pos:line="27" pos:column="25">=<pos:position pos:line="27" pos:column="26"/></operator> <call><name pos:line="27" pos:column="27">xtolower<pos:position pos:line="27" pos:column="35"/></name><argument_list pos:line="27" pos:column="35">(<argument><expr><name><name pos:line="27" pos:column="36">hdr<pos:position pos:line="27" pos:column="39"/></name><index pos:line="27" pos:column="39">[<expr><name pos:line="27" pos:column="40">pos<pos:position pos:line="27" pos:column="43"/></name></expr>]<pos:position pos:line="27" pos:column="44"/></index></name></expr></argument>)<pos:position pos:line="27" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="46"/></expr_stmt></block></else></if>
                <comment type="line" pos:line="28" pos:column="17">// valid codes only contain A-Z, hyphen (-) and *</comment>
                <if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><operator pos:line="29" pos:column="21">*<pos:position pos:line="29" pos:column="22"/></operator><name pos:line="29" pos:column="22">dt<pos:position pos:line="29" pos:column="24"/></name> <operator pos:line="29" pos:column="25">!=<pos:position pos:line="29" pos:column="27"/></operator> <literal type="char" pos:line="29" pos:column="28">'-'<pos:position pos:line="29" pos:column="31"/></literal> <operator pos:line="29" pos:column="32">&amp;&amp;<pos:position pos:line="29" pos:column="42"/></operator> <operator pos:line="29" pos:column="35">*<pos:position pos:line="29" pos:column="36"/></operator><name pos:line="29" pos:column="36">dt<pos:position pos:line="29" pos:column="38"/></name> <operator pos:line="29" pos:column="39">!=<pos:position pos:line="29" pos:column="41"/></operator> <literal type="char" pos:line="29" pos:column="42">'*'<pos:position pos:line="29" pos:column="45"/></literal> <operator pos:line="29" pos:column="46">&amp;&amp;<pos:position pos:line="29" pos:column="56"/></operator> <operator pos:line="29" pos:column="49">(<pos:position pos:line="29" pos:column="50"/></operator><operator pos:line="29" pos:column="50">*<pos:position pos:line="29" pos:column="51"/></operator><name><name pos:line="29" pos:column="51">dt<pos:position pos:line="29" pos:column="53"/></name> <argument_list type="generic" pos:line="29" pos:column="54">&lt; <argument><expr><literal type="char" pos:line="29" pos:column="56">'a'<pos:position pos:line="29" pos:column="59"/></literal> <operator pos:line="29" pos:column="60">||<pos:position pos:line="29" pos:column="62"/></operator> <operator pos:line="29" pos:column="63">*<pos:position pos:line="29" pos:column="64"/></operator><name pos:line="29" pos:column="64">dt<pos:position pos:line="29" pos:column="66"/></name></expr></argument> &gt;<pos:position pos:line="29" pos:column="71"/></argument_list></name> <literal type="char" pos:line="29" pos:column="69">'z'<pos:position pos:line="29" pos:column="72"/></literal><operator pos:line="29" pos:column="72">)<pos:position pos:line="29" pos:column="73"/></operator></expr> )<pos:position pos:line="29" pos:column="75"/></condition><then pos:line="29" pos:column="75">
                    <block type="pseudo"><expr_stmt><expr><name pos:line="30" pos:column="21">invalid_byte<pos:position pos:line="30" pos:column="33"/></name> <operator pos:line="30" pos:column="34">=<pos:position pos:line="30" pos:column="35"/></operator> <literal type="boolean" pos:line="30" pos:column="36">true<pos:position pos:line="30" pos:column="40"/></literal></expr>;<pos:position pos:line="30" pos:column="41"/></expr_stmt></block></then>
                <else pos:line="31" pos:column="17">else
                    <block type="pseudo"><expr_stmt><expr><operator pos:line="32" pos:column="21">++<pos:position pos:line="32" pos:column="23"/></operator><name pos:line="32" pos:column="23">dt<pos:position pos:line="32" pos:column="25"/></name></expr>;<pos:position pos:line="32" pos:column="26"/></expr_stmt></block></else></if> <comment type="line" pos:line="32" pos:column="27">// move to next destination byte.</comment>
            }<pos:position pos:line="33" pos:column="14"/></block></then></if>
            <expr_stmt><expr><operator pos:line="34" pos:column="13">++<pos:position pos:line="34" pos:column="15"/></operator><name pos:line="34" pos:column="15">pos<pos:position pos:line="34" pos:column="18"/></name></expr>;<pos:position pos:line="34" pos:column="19"/></expr_stmt>
        }<pos:position pos:line="35" pos:column="10"/></block></while>
        <expr_stmt><expr><operator pos:line="36" pos:column="9">*<pos:position pos:line="36" pos:column="10"/></operator><name pos:line="36" pos:column="10">dt<pos:position pos:line="36" pos:column="12"/></name> <operator pos:line="36" pos:column="13">=<pos:position pos:line="36" pos:column="14"/></operator> <literal type="char" pos:line="36" pos:column="15">'\0'<pos:position pos:line="36" pos:column="19"/></literal></expr>;<pos:position pos:line="36" pos:column="20"/></expr_stmt> <comment type="line" pos:line="36" pos:column="21">// nul-terminated the filename content string before system use.</comment>
        <expr_stmt><expr><operator pos:line="37" pos:column="9">++<pos:position pos:line="37" pos:column="11"/></operator><name pos:line="37" pos:column="11">dt<pos:position pos:line="37" pos:column="13"/></name></expr>;<pos:position pos:line="37" pos:column="14"/></expr_stmt>

        <comment type="line" pos:line="39" pos:column="9">// if we terminated the tag on garbage or ';' we need to skip to the next ',' or end of header.</comment>
        <while pos:line="40" pos:column="9">while <condition pos:line="40" pos:column="15">(<expr><name pos:line="40" pos:column="16">pos<pos:position pos:line="40" pos:column="19"/></name> <operator pos:line="40" pos:column="20">&lt;<pos:position pos:line="40" pos:column="24"/></operator> <call><name><name pos:line="40" pos:column="22">hdr<pos:position pos:line="40" pos:column="25"/></name><operator pos:line="40" pos:column="25">.<pos:position pos:line="40" pos:column="26"/></operator><name pos:line="40" pos:column="26">size<pos:position pos:line="40" pos:column="30"/></name></name><argument_list pos:line="40" pos:column="30">()<pos:position pos:line="40" pos:column="32"/></argument_list></call> <operator pos:line="40" pos:column="33">&amp;&amp;<pos:position pos:line="40" pos:column="43"/></operator> <name><name pos:line="40" pos:column="36">hdr<pos:position pos:line="40" pos:column="39"/></name><index pos:line="40" pos:column="39">[<expr><name pos:line="40" pos:column="40">pos<pos:position pos:line="40" pos:column="43"/></name></expr>]<pos:position pos:line="40" pos:column="44"/></index></name> <operator pos:line="40" pos:column="45">!=<pos:position pos:line="40" pos:column="47"/></operator> <literal type="char" pos:line="40" pos:column="48">','<pos:position pos:line="40" pos:column="51"/></literal></expr>)<pos:position pos:line="40" pos:column="52"/></condition>
            <block type="pseudo"><expr_stmt><expr><operator pos:line="41" pos:column="13">++<pos:position pos:line="41" pos:column="15"/></operator><name pos:line="41" pos:column="15">pos<pos:position pos:line="41" pos:column="18"/></name></expr>;<pos:position pos:line="41" pos:column="19"/></expr_stmt></block></while>

        <if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><name pos:line="43" pos:column="13">pos<pos:position pos:line="43" pos:column="16"/></name> <operator pos:line="43" pos:column="17">&lt;<pos:position pos:line="43" pos:column="21"/></operator> <call><name><name pos:line="43" pos:column="19">hdr<pos:position pos:line="43" pos:column="22"/></name><operator pos:line="43" pos:column="22">.<pos:position pos:line="43" pos:column="23"/></operator><name pos:line="43" pos:column="23">size<pos:position pos:line="43" pos:column="27"/></name></name><argument_list pos:line="43" pos:column="27">()<pos:position pos:line="43" pos:column="29"/></argument_list></call> <operator pos:line="43" pos:column="30">&amp;&amp;<pos:position pos:line="43" pos:column="40"/></operator> <name><name pos:line="43" pos:column="33">hdr<pos:position pos:line="43" pos:column="36"/></name><index pos:line="43" pos:column="36">[<expr><name pos:line="43" pos:column="37">pos<pos:position pos:line="43" pos:column="40"/></name></expr>]<pos:position pos:line="43" pos:column="41"/></index></name> <operator pos:line="43" pos:column="42">==<pos:position pos:line="43" pos:column="44"/></operator> <literal type="char" pos:line="43" pos:column="45">','<pos:position pos:line="43" pos:column="48"/></literal></expr>)<pos:position pos:line="43" pos:column="49"/></condition><then pos:line="43" pos:column="49">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="44" pos:column="13">++<pos:position pos:line="44" pos:column="15"/></operator><name pos:line="44" pos:column="15">pos<pos:position pos:line="44" pos:column="18"/></name></expr>;<pos:position pos:line="44" pos:column="19"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name pos:line="46" pos:column="9">debugs<pos:position pos:line="46" pos:column="15"/></name><argument_list pos:line="46" pos:column="15">(<argument><expr><literal type="number" pos:line="46" pos:column="16">4<pos:position pos:line="46" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="19">9<pos:position pos:line="46" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="22">HERE<pos:position pos:line="46" pos:column="26"/></name> <operator pos:line="46" pos:column="27">&lt;&lt;<pos:position pos:line="46" pos:column="35"/></operator> <literal type="string" pos:line="46" pos:column="30">"STATE: dt='"<pos:position pos:line="46" pos:column="43"/></literal> <operator pos:line="46" pos:column="44">&lt;&lt;<pos:position pos:line="46" pos:column="52"/></operator> <name pos:line="46" pos:column="47">dt<pos:position pos:line="46" pos:column="49"/></name> <operator pos:line="46" pos:column="50">&lt;&lt;<pos:position pos:line="46" pos:column="58"/></operator> <literal type="string" pos:line="46" pos:column="53">"', lang='"<pos:position pos:line="46" pos:column="64"/></literal> <operator pos:line="46" pos:column="65">&lt;&lt;<pos:position pos:line="46" pos:column="73"/></operator> <name pos:line="46" pos:column="68">lang<pos:position pos:line="46" pos:column="72"/></name> <operator pos:line="46" pos:column="73">&lt;&lt;<pos:position pos:line="46" pos:column="81"/></operator> <literal type="string" pos:line="46" pos:column="76">"', pos="<pos:position pos:line="46" pos:column="85"/></literal> <operator pos:line="46" pos:column="86">&lt;&lt;<pos:position pos:line="46" pos:column="94"/></operator> <name pos:line="46" pos:column="89">pos<pos:position pos:line="46" pos:column="92"/></name> <operator pos:line="46" pos:column="93">&lt;&lt;<pos:position pos:line="46" pos:column="101"/></operator> <literal type="string" pos:line="46" pos:column="96">", buf='"<pos:position pos:line="46" pos:column="105"/></literal> <operator pos:line="46" pos:column="106">&lt;&lt;<pos:position pos:line="46" pos:column="114"/></operator> <operator pos:line="46" pos:column="109">(<pos:position pos:line="46" pos:column="110"/></operator><ternary><condition><expr><operator pos:line="46" pos:column="110">(<pos:position pos:line="46" pos:column="111"/></operator><name pos:line="46" pos:column="111">pos<pos:position pos:line="46" pos:column="114"/></name> <operator pos:line="46" pos:column="115">&lt;<pos:position pos:line="46" pos:column="119"/></operator> <call><name><name pos:line="46" pos:column="117">hdr<pos:position pos:line="46" pos:column="120"/></name><operator pos:line="46" pos:column="120">.<pos:position pos:line="46" pos:column="121"/></operator><name pos:line="46" pos:column="121">size<pos:position pos:line="46" pos:column="125"/></name></name><argument_list pos:line="46" pos:column="125">()<pos:position pos:line="46" pos:column="127"/></argument_list></call><operator pos:line="46" pos:column="127">)<pos:position pos:line="46" pos:column="128"/></operator></expr> ?<pos:position pos:line="46" pos:column="130"/></condition><then pos:line="46" pos:column="130"> <expr><call><name><name pos:line="46" pos:column="131">hdr<pos:position pos:line="46" pos:column="134"/></name><operator pos:line="46" pos:column="134">.<pos:position pos:line="46" pos:column="135"/></operator><name pos:line="46" pos:column="135">substr<pos:position pos:line="46" pos:column="141"/></name></name><argument_list pos:line="46" pos:column="141">(<argument><expr><name pos:line="46" pos:column="142">pos<pos:position pos:line="46" pos:column="145"/></name></expr></argument>,<argument><expr><call><name><name pos:line="46" pos:column="146">hdr<pos:position pos:line="46" pos:column="149"/></name><operator pos:line="46" pos:column="149">.<pos:position pos:line="46" pos:column="150"/></operator><name pos:line="46" pos:column="150">size<pos:position pos:line="46" pos:column="154"/></name></name><argument_list pos:line="46" pos:column="154">()<pos:position pos:line="46" pos:column="156"/></argument_list></call></expr></argument>)<pos:position pos:line="46" pos:column="157"/></argument_list></call></expr> <pos:position pos:line="46" pos:column="158"/></then><else pos:line="46" pos:column="158">: <expr><literal type="string" pos:line="46" pos:column="160">""<pos:position pos:line="46" pos:column="162"/></literal></expr></else></ternary><operator pos:line="46" pos:column="162">)<pos:position pos:line="46" pos:column="163"/></operator> <operator pos:line="46" pos:column="164">&lt;&lt;<pos:position pos:line="46" pos:column="172"/></operator> <literal type="string" pos:line="46" pos:column="167">"'"<pos:position pos:line="46" pos:column="170"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="171"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="172"/></expr_stmt>

        <comment type="block" pos:line="48" pos:column="9">/* if we found anything we might use, try it. */</comment>
        <if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><operator pos:line="49" pos:column="13">*<pos:position pos:line="49" pos:column="14"/></operator><name pos:line="49" pos:column="14">lang<pos:position pos:line="49" pos:column="18"/></name> <operator pos:line="49" pos:column="19">!=<pos:position pos:line="49" pos:column="21"/></operator> <literal type="char" pos:line="49" pos:column="22">'\0'<pos:position pos:line="49" pos:column="26"/></literal> <operator pos:line="49" pos:column="27">&amp;&amp;<pos:position pos:line="49" pos:column="37"/></operator> <operator pos:line="49" pos:column="30">!<pos:position pos:line="49" pos:column="31"/></operator><name pos:line="49" pos:column="31">invalid_byte<pos:position pos:line="49" pos:column="43"/></name></expr>)<pos:position pos:line="49" pos:column="44"/></condition><then pos:line="49" pos:column="44">
            <block type="pseudo"><return pos:line="50" pos:column="13">return <expr><literal type="boolean" pos:line="50" pos:column="20">true<pos:position pos:line="50" pos:column="24"/></literal></expr>;<pos:position pos:line="50" pos:column="25"/></return></block></then></if>
    }<pos:position pos:line="51" pos:column="6"/></block></while>
    <return pos:line="52" pos:column="5">return <expr><literal type="boolean" pos:line="52" pos:column="12">false<pos:position pos:line="52" pos:column="17"/></literal></expr>;<pos:position pos:line="52" pos:column="18"/></return>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
