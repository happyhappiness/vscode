<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1441_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">SBuf<pos:position pos:line="1" pos:column="5"/></name><modifier pos:line="1" pos:column="5">&amp;<pos:position pos:line="1" pos:column="10"/></modifier></type>
<name><name pos:line="2" pos:column="1">SBuf<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">vappendf<pos:position pos:line="2" pos:column="15"/></name></name><parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><specifier pos:line="2" pos:column="16">const<pos:position pos:line="2" pos:column="21"/></specifier> <name pos:line="2" pos:column="22">char<pos:position pos:line="2" pos:column="26"/></name> <modifier pos:line="2" pos:column="27">*<pos:position pos:line="2" pos:column="28"/></modifier></type><name pos:line="2" pos:column="28">fmt<pos:position pos:line="2" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="33">va_list<pos:position pos:line="2" pos:column="40"/></name></type> <name pos:line="2" pos:column="41">vargs<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="47"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// with (v)appendf() the fmt or an arg might be a dangerous char*</comment>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">Locker<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">blobKeeper<pos:position pos:line="5" pos:column="28"/></name><argument_list pos:line="5" pos:column="28">(<argument><expr><name pos:line="5" pos:column="29">this<pos:position pos:line="5" pos:column="33"/></name></expr></argument>, <argument><expr><call><name pos:line="5" pos:column="35">buf<pos:position pos:line="5" pos:column="38"/></name><argument_list pos:line="5" pos:column="38">()<pos:position pos:line="5" pos:column="40"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="41"/></argument_list></decl>;<pos:position pos:line="5" pos:column="42"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">Must<pos:position pos:line="7" pos:column="9"/></name><argument_list pos:line="7" pos:column="9">(<argument><expr><name pos:line="7" pos:column="10">fmt<pos:position pos:line="7" pos:column="13"/></name> <operator pos:line="7" pos:column="14">!=<pos:position pos:line="7" pos:column="16"/></operator> <name pos:line="7" pos:column="17">NULL<pos:position pos:line="7" pos:column="21"/></name></expr></argument>)<pos:position pos:line="7" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="23"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">sz<pos:position pos:line="8" pos:column="11"/></name> <init pos:line="8" pos:column="12">= <expr><literal type="number" pos:line="8" pos:column="14">0<pos:position pos:line="8" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="16"/></decl_stmt>
    <comment type="line" pos:line="9" pos:column="5">//reserve twice the format-string size, it's a likely heuristic</comment>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">size_type<pos:position pos:line="10" pos:column="14"/></name></type> <name pos:line="10" pos:column="15">requiredSpaceEstimate<pos:position pos:line="10" pos:column="36"/></name> <init pos:line="10" pos:column="37">= <expr><call><name pos:line="10" pos:column="39">strlen<pos:position pos:line="10" pos:column="45"/></name><argument_list pos:line="10" pos:column="45">(<argument><expr><name pos:line="10" pos:column="46">fmt<pos:position pos:line="10" pos:column="49"/></name></expr></argument>)<pos:position pos:line="10" pos:column="50"/></argument_list></call><operator pos:line="10" pos:column="50">*<pos:position pos:line="10" pos:column="51"/></operator><literal type="number" pos:line="10" pos:column="51">2<pos:position pos:line="10" pos:column="52"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="53"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="12" pos:column="5">char<pos:position pos:line="12" pos:column="9"/></name> <modifier pos:line="12" pos:column="10">*<pos:position pos:line="12" pos:column="11"/></modifier></type><name pos:line="12" pos:column="11">space<pos:position pos:line="12" pos:column="16"/></name> <init pos:line="12" pos:column="17">= <expr><call><name pos:line="12" pos:column="19">rawSpace<pos:position pos:line="12" pos:column="27"/></name><argument_list pos:line="12" pos:column="27">(<argument><expr><name pos:line="12" pos:column="28">requiredSpaceEstimate<pos:position pos:line="12" pos:column="49"/></name></expr></argument>)<pos:position pos:line="12" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="51"/></decl_stmt>
<cpp:ifdef pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">ifdef<pos:position pos:line="13" pos:column="7"/></cpp:directive> <name pos:line="13" pos:column="8">VA_COPY<pos:position pos:line="13" pos:column="15"/></name></cpp:ifdef>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">va_list<pos:position pos:line="14" pos:column="12"/></name></type> <name pos:line="14" pos:column="13">ap<pos:position pos:line="14" pos:column="15"/></name></decl>;<pos:position pos:line="14" pos:column="16"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">VA_COPY<pos:position pos:line="15" pos:column="12"/></name><argument_list pos:line="15" pos:column="12">(<argument><expr><name pos:line="15" pos:column="13">ap<pos:position pos:line="15" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="17">vargs<pos:position pos:line="15" pos:column="22"/></name></expr></argument>)<pos:position pos:line="15" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name pos:line="16" pos:column="5">sz<pos:position pos:line="16" pos:column="7"/></name> <operator pos:line="16" pos:column="8">=<pos:position pos:line="16" pos:column="9"/></operator> <call><name pos:line="16" pos:column="10">vsnprintf<pos:position pos:line="16" pos:column="19"/></name><argument_list pos:line="16" pos:column="19">(<argument><expr><name pos:line="16" pos:column="20">space<pos:position pos:line="16" pos:column="25"/></name></expr></argument>, <argument><expr><call><name pos:line="16" pos:column="27">spaceSize<pos:position pos:line="16" pos:column="36"/></name><argument_list pos:line="16" pos:column="36">()<pos:position pos:line="16" pos:column="38"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="16" pos:column="40">fmt<pos:position pos:line="16" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="45">ap<pos:position pos:line="16" pos:column="47"/></name></expr></argument>)<pos:position pos:line="16" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">va_end<pos:position pos:line="17" pos:column="11"/></name><argument_list pos:line="17" pos:column="11">(<argument><expr><name pos:line="17" pos:column="12">ap<pos:position pos:line="17" pos:column="14"/></name></expr></argument>)<pos:position pos:line="17" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="16"/></expr_stmt>
<cpp:else pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">else<pos:position pos:line="18" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><name pos:line="19" pos:column="5">sz<pos:position pos:line="19" pos:column="7"/></name> <operator pos:line="19" pos:column="8">=<pos:position pos:line="19" pos:column="9"/></operator> <call><name pos:line="19" pos:column="10">vsnprintf<pos:position pos:line="19" pos:column="19"/></name><argument_list pos:line="19" pos:column="19">(<argument><expr><name pos:line="19" pos:column="20">space<pos:position pos:line="19" pos:column="25"/></name></expr></argument>, <argument><expr><call><name pos:line="19" pos:column="27">spaceSize<pos:position pos:line="19" pos:column="36"/></name><argument_list pos:line="19" pos:column="36">()<pos:position pos:line="19" pos:column="38"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="19" pos:column="40">fmt<pos:position pos:line="19" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="45">vargs<pos:position pos:line="19" pos:column="50"/></name></expr></argument>)<pos:position pos:line="19" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="52"/></expr_stmt>
<cpp:endif pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">endif<pos:position pos:line="20" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="22" pos:column="5">/* check for possible overflow */</comment>
    <comment type="block" pos:line="23" pos:column="5">/* snprintf on Linux returns -1 on output errors, or the size
     * that would have been written if enough space had been available */</comment>
    <comment type="block" pos:line="25" pos:column="5">/* vsnprintf is standard in C99 */</comment>

    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name pos:line="27" pos:column="9">sz<pos:position pos:line="27" pos:column="11"/></name> <operator pos:line="27" pos:column="12">&gt;=<pos:position pos:line="27" pos:column="17"/></operator> <cast type="static" pos:line="27" pos:column="15">static_cast<argument_list type="generic" pos:line="27" pos:column="26">&lt;<argument><expr><name pos:line="27" pos:column="27">int<pos:position pos:line="27" pos:column="30"/></name></expr></argument>&gt;<pos:position pos:line="27" pos:column="34"/></argument_list><argument_list pos:line="27" pos:column="31">(<argument><expr><call><name pos:line="27" pos:column="32">spaceSize<pos:position pos:line="27" pos:column="41"/></name><argument_list pos:line="27" pos:column="41">()<pos:position pos:line="27" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="44"/></argument_list></cast></expr>)<pos:position pos:line="27" pos:column="45"/></condition><then pos:line="27" pos:column="45"> <block pos:line="27" pos:column="46">{
        <comment type="line" pos:line="28" pos:column="9">// not enough space on the first go, we now know how much we need</comment>
        <expr_stmt><expr><name pos:line="29" pos:column="9">requiredSpaceEstimate<pos:position pos:line="29" pos:column="30"/></name> <operator pos:line="29" pos:column="31">=<pos:position pos:line="29" pos:column="32"/></operator> <name pos:line="29" pos:column="33">sz<pos:position pos:line="29" pos:column="35"/></name><operator pos:line="29" pos:column="35">*<pos:position pos:line="29" pos:column="36"/></operator><literal type="number" pos:line="29" pos:column="36">2<pos:position pos:line="29" pos:column="37"/></literal></expr>;<pos:position pos:line="29" pos:column="38"/></expr_stmt> <comment type="line" pos:line="29" pos:column="39">// TODO: tune heuristics</comment>
        <expr_stmt><expr><name pos:line="30" pos:column="9">space<pos:position pos:line="30" pos:column="14"/></name> <operator pos:line="30" pos:column="15">=<pos:position pos:line="30" pos:column="16"/></operator> <call><name pos:line="30" pos:column="17">rawSpace<pos:position pos:line="30" pos:column="25"/></name><argument_list pos:line="30" pos:column="25">(<argument><expr><name pos:line="30" pos:column="26">requiredSpaceEstimate<pos:position pos:line="30" pos:column="47"/></name></expr></argument>)<pos:position pos:line="30" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><name pos:line="31" pos:column="9">sz<pos:position pos:line="31" pos:column="11"/></name> <operator pos:line="31" pos:column="12">=<pos:position pos:line="31" pos:column="13"/></operator> <call><name pos:line="31" pos:column="14">vsnprintf<pos:position pos:line="31" pos:column="23"/></name><argument_list pos:line="31" pos:column="23">(<argument><expr><name pos:line="31" pos:column="24">space<pos:position pos:line="31" pos:column="29"/></name></expr></argument>, <argument><expr><call><name pos:line="31" pos:column="31">spaceSize<pos:position pos:line="31" pos:column="40"/></name><argument_list pos:line="31" pos:column="40">()<pos:position pos:line="31" pos:column="42"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="31" pos:column="44">fmt<pos:position pos:line="31" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="49">vargs<pos:position pos:line="31" pos:column="54"/></name></expr></argument>)<pos:position pos:line="31" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="56"/></expr_stmt>
        <if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name pos:line="32" pos:column="13">sz<pos:position pos:line="32" pos:column="15"/></name> <operator pos:line="32" pos:column="16">&lt;<pos:position pos:line="32" pos:column="20"/></operator> <literal type="number" pos:line="32" pos:column="18">0<pos:position pos:line="32" pos:column="19"/></literal></expr>)<pos:position pos:line="32" pos:column="20"/></condition><then pos:line="32" pos:column="20"> <comment type="line" pos:line="32" pos:column="21">// output error in vsnprintf</comment>
            <block type="pseudo"><throw pos:line="33" pos:column="13">throw <expr><call><name pos:line="33" pos:column="19">TextException<pos:position pos:line="33" pos:column="32"/></name><argument_list pos:line="33" pos:column="32">(<argument><expr><literal type="string" pos:line="33" pos:column="33">"output error in second-go vsnprintf"<pos:position pos:line="33" pos:column="70"/></literal></expr></argument>,<argument><expr><name pos:line="33" pos:column="71">__FILE__<pos:position pos:line="33" pos:column="79"/></name></expr></argument>,
                                <argument><expr><name pos:line="34" pos:column="33">__LINE__<pos:position pos:line="34" pos:column="41"/></name></expr></argument>)<pos:position pos:line="34" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="43"/></throw></block></then></if>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>

    <if pos:line="37" pos:column="5">if <condition pos:line="37" pos:column="8">(<expr><name pos:line="37" pos:column="9">sz<pos:position pos:line="37" pos:column="11"/></name> <operator pos:line="37" pos:column="12">&lt;<pos:position pos:line="37" pos:column="16"/></operator> <literal type="number" pos:line="37" pos:column="14">0<pos:position pos:line="37" pos:column="15"/></literal></expr>)<pos:position pos:line="37" pos:column="16"/></condition><then pos:line="37" pos:column="16"> <comment type="line" pos:line="37" pos:column="17">// output error in either vsnprintf</comment>
        <block type="pseudo"><throw pos:line="38" pos:column="9">throw <expr><call><name pos:line="38" pos:column="15">TextException<pos:position pos:line="38" pos:column="28"/></name><argument_list pos:line="38" pos:column="28">(<argument><expr><literal type="string" pos:line="38" pos:column="29">"output error in vsnprintf"<pos:position pos:line="38" pos:column="56"/></literal></expr></argument>,<argument><expr><name pos:line="38" pos:column="57">__FILE__<pos:position pos:line="38" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="67">__LINE__<pos:position pos:line="38" pos:column="75"/></name></expr></argument>)<pos:position pos:line="38" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="77"/></throw></block></then></if>

    <comment type="line" pos:line="40" pos:column="5">// data was appended, update internal state</comment>
    <expr_stmt><expr><name pos:line="41" pos:column="5">len_<pos:position pos:line="41" pos:column="9"/></name> <operator pos:line="41" pos:column="10">+=<pos:position pos:line="41" pos:column="12"/></operator> <name pos:line="41" pos:column="13">sz<pos:position pos:line="41" pos:column="15"/></name></expr>;<pos:position pos:line="41" pos:column="16"/></expr_stmt>

    <comment type="block" pos:line="43" pos:column="5">/* C99 specifies that the final '\0' is not counted in vsnprintf's
     * return value. Older compilers/libraries might instead count it */</comment>
    <comment type="block" pos:line="45" pos:column="5">/* check whether '\0' was appended and counted */</comment>
    <decl_stmt><decl><specifier pos:line="46" pos:column="5">static<pos:position pos:line="46" pos:column="11"/></specifier> <type><name pos:line="46" pos:column="12">bool<pos:position pos:line="46" pos:column="16"/></name></type> <name pos:line="46" pos:column="17">snPrintfTerminatorChecked<pos:position pos:line="46" pos:column="42"/></name> <init pos:line="46" pos:column="43">= <expr><literal type="boolean" pos:line="46" pos:column="45">false<pos:position pos:line="46" pos:column="50"/></literal></expr></init></decl>;<pos:position pos:line="46" pos:column="51"/></decl_stmt>
    <decl_stmt><decl><specifier pos:line="47" pos:column="5">static<pos:position pos:line="47" pos:column="11"/></specifier> <type><name pos:line="47" pos:column="12">bool<pos:position pos:line="47" pos:column="16"/></name></type> <name pos:line="47" pos:column="17">snPrintfTerminatorCounted<pos:position pos:line="47" pos:column="42"/></name> <init pos:line="47" pos:column="43">= <expr><literal type="boolean" pos:line="47" pos:column="45">false<pos:position pos:line="47" pos:column="50"/></literal></expr></init></decl>;<pos:position pos:line="47" pos:column="51"/></decl_stmt>
    <if pos:line="48" pos:column="5">if <condition pos:line="48" pos:column="8">(<expr><operator pos:line="48" pos:column="9">!<pos:position pos:line="48" pos:column="10"/></operator><name pos:line="48" pos:column="10">snPrintfTerminatorChecked<pos:position pos:line="48" pos:column="35"/></name></expr>)<pos:position pos:line="48" pos:column="36"/></condition><then pos:line="48" pos:column="36"> <block pos:line="48" pos:column="37">{
        <decl_stmt><decl><type><name pos:line="49" pos:column="9">char<pos:position pos:line="49" pos:column="13"/></name></type> <name><name pos:line="49" pos:column="14">testbuf<pos:position pos:line="49" pos:column="21"/></name><index pos:line="49" pos:column="21">[<expr><literal type="number" pos:line="49" pos:column="22">16<pos:position pos:line="49" pos:column="24"/></literal></expr>]<pos:position pos:line="49" pos:column="25"/></index></name></decl>;<pos:position pos:line="49" pos:column="26"/></decl_stmt>
        <expr_stmt><expr><name pos:line="50" pos:column="9">snPrintfTerminatorCounted<pos:position pos:line="50" pos:column="34"/></name> <operator pos:line="50" pos:column="35">=<pos:position pos:line="50" pos:column="36"/></operator> <call><name pos:line="50" pos:column="37">snprintf<pos:position pos:line="50" pos:column="45"/></name><argument_list pos:line="50" pos:column="45">(<argument><expr><name pos:line="50" pos:column="46">testbuf<pos:position pos:line="50" pos:column="53"/></name></expr></argument>, <argument><expr><sizeof pos:line="50" pos:column="55">sizeof<argument_list pos:line="50" pos:column="61">(<argument><expr><name pos:line="50" pos:column="62">testbuf<pos:position pos:line="50" pos:column="69"/></name></expr></argument>)<pos:position pos:line="50" pos:column="70"/></argument_list></sizeof></expr></argument>,
                                             <argument><expr><literal type="string" pos:line="51" pos:column="46">"%s"<pos:position pos:line="51" pos:column="50"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="52">"1"<pos:position pos:line="51" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="56"/></argument_list></call> <operator pos:line="51" pos:column="57">==<pos:position pos:line="51" pos:column="59"/></operator> <literal type="number" pos:line="51" pos:column="60">2<pos:position pos:line="51" pos:column="61"/></literal></expr>;<pos:position pos:line="51" pos:column="62"/></expr_stmt>
        <expr_stmt><expr><name pos:line="52" pos:column="9">snPrintfTerminatorChecked<pos:position pos:line="52" pos:column="34"/></name> <operator pos:line="52" pos:column="35">=<pos:position pos:line="52" pos:column="36"/></operator> <literal type="boolean" pos:line="52" pos:column="37">true<pos:position pos:line="52" pos:column="41"/></literal></expr>;<pos:position pos:line="52" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="53" pos:column="6"/></block></then></if>
    <if pos:line="54" pos:column="5">if <condition pos:line="54" pos:column="8">(<expr><name pos:line="54" pos:column="9">snPrintfTerminatorCounted<pos:position pos:line="54" pos:column="34"/></name></expr>)<pos:position pos:line="54" pos:column="35"/></condition><then pos:line="54" pos:column="35"> <block pos:line="54" pos:column="36">{
        <expr_stmt><expr><operator pos:line="55" pos:column="9">--<pos:position pos:line="55" pos:column="11"/></operator><name pos:line="55" pos:column="11">sz<pos:position pos:line="55" pos:column="13"/></name></expr>;<pos:position pos:line="55" pos:column="14"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="56" pos:column="9">--<pos:position pos:line="56" pos:column="11"/></operator><name pos:line="56" pos:column="11">len_<pos:position pos:line="56" pos:column="15"/></name></expr>;<pos:position pos:line="56" pos:column="16"/></expr_stmt>
    }<pos:position pos:line="57" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="59" pos:column="5">store_<pos:position pos:line="59" pos:column="11"/></name><operator pos:line="59" pos:column="11">-&gt;<pos:position pos:line="59" pos:column="16"/></operator><name pos:line="59" pos:column="13">size<pos:position pos:line="59" pos:column="17"/></name></name> <operator pos:line="59" pos:column="18">+=<pos:position pos:line="59" pos:column="20"/></operator> <name pos:line="59" pos:column="21">sz<pos:position pos:line="59" pos:column="23"/></name></expr>;<pos:position pos:line="59" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="60" pos:column="5">++<pos:position pos:line="60" pos:column="7"/></operator><name><name pos:line="60" pos:column="7">stats<pos:position pos:line="60" pos:column="12"/></name><operator pos:line="60" pos:column="12">.<pos:position pos:line="60" pos:column="13"/></operator><name pos:line="60" pos:column="13">append<pos:position pos:line="60" pos:column="19"/></name></name></expr>;<pos:position pos:line="60" pos:column="20"/></expr_stmt>

    <return pos:line="62" pos:column="5">return <expr><operator pos:line="62" pos:column="12">*<pos:position pos:line="62" pos:column="13"/></operator><name pos:line="62" pos:column="13">this<pos:position pos:line="62" pos:column="17"/></name></expr>;<pos:position pos:line="62" pos:column="18"/></return>
}<pos:position pos:line="63" pos:column="2"/></block></function></unit>
