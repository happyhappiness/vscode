<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4028_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Icap<pos:position pos:line="1" pos:column="22"/></name><operator pos:line="1" pos:column="22">::<pos:position pos:line="1" pos:column="24"/></operator><name pos:line="1" pos:column="24">ModXact<pos:position pos:line="1" pos:column="31"/></name><operator pos:line="1" pos:column="31">::<pos:position pos:line="1" pos:column="33"/></operator><name pos:line="1" pos:column="33">virginConsume<pos:position pos:line="1" pos:column="46"/></name></name><parameter_list pos:line="1" pos:column="46">()<pos:position pos:line="1" pos:column="48"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="3" pos:column="5">debugs<pos:position pos:line="3" pos:column="11"/></name><argument_list pos:line="3" pos:column="11">(<argument><expr><literal type="number" pos:line="3" pos:column="12">93<pos:position pos:line="3" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="3" pos:column="16">9<pos:position pos:line="3" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="3" pos:column="19">HERE<pos:position pos:line="3" pos:column="23"/></name> <operator pos:line="3" pos:column="24">&lt;&lt;<pos:position pos:line="3" pos:column="32"/></operator> <literal type="string" pos:line="3" pos:column="27">"consumption guards: "<pos:position pos:line="3" pos:column="49"/></literal> <operator pos:line="3" pos:column="50">&lt;&lt;<pos:position pos:line="3" pos:column="58"/></operator> <operator pos:line="3" pos:column="53">!<pos:position pos:line="3" pos:column="54"/></operator><name><name pos:line="3" pos:column="54">virgin<pos:position pos:line="3" pos:column="60"/></name><operator pos:line="3" pos:column="60">.<pos:position pos:line="3" pos:column="61"/></operator><name pos:line="3" pos:column="61">body_pipe<pos:position pos:line="3" pos:column="70"/></name></name> <operator pos:line="3" pos:column="71">&lt;&lt;<pos:position pos:line="3" pos:column="79"/></operator> <name pos:line="3" pos:column="74">isRetriable<pos:position pos:line="3" pos:column="85"/></name> <operator pos:line="3" pos:column="86">&lt;&lt;<pos:position pos:line="3" pos:column="94"/></operator>
           <name pos:line="4" pos:column="12">isRepeatable<pos:position pos:line="4" pos:column="24"/></name> <operator pos:line="4" pos:column="25">&lt;&lt;<pos:position pos:line="4" pos:column="33"/></operator> <name pos:line="4" pos:column="28">canStartBypass<pos:position pos:line="4" pos:column="42"/></name> <operator pos:line="4" pos:column="43">&lt;&lt;<pos:position pos:line="4" pos:column="51"/></operator> <name pos:line="4" pos:column="46">protectGroupBypass<pos:position pos:line="4" pos:column="64"/></name></expr></argument>)<pos:position pos:line="4" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="66"/></expr_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">!<pos:position pos:line="6" pos:column="10"/></operator><name><name pos:line="6" pos:column="10">virgin<pos:position pos:line="6" pos:column="16"/></name><operator pos:line="6" pos:column="16">.<pos:position pos:line="6" pos:column="17"/></operator><name pos:line="6" pos:column="17">body_pipe<pos:position pos:line="6" pos:column="26"/></name></name></expr>)<pos:position pos:line="6" pos:column="27"/></condition><then pos:line="6" pos:column="27">
        <block type="pseudo"><return pos:line="7" pos:column="9">return;<pos:position pos:line="7" pos:column="16"/></return></block></then></if> <comment type="line" pos:line="7" pos:column="17">// nothing to consume</comment>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">isRetriable<pos:position pos:line="9" pos:column="20"/></name></expr>)<pos:position pos:line="9" pos:column="21"/></condition><then pos:line="9" pos:column="21">
        <block type="pseudo"><return pos:line="10" pos:column="9">return;<pos:position pos:line="10" pos:column="16"/></return></block></then></if> <comment type="line" pos:line="10" pos:column="17">// do not consume if we may have to retry later</comment>

    <decl_stmt><decl><type><name pos:line="12" pos:column="5">BodyPipe<pos:position pos:line="12" pos:column="13"/></name> <modifier pos:line="12" pos:column="14">&amp;<pos:position pos:line="12" pos:column="19"/></modifier></type><name pos:line="12" pos:column="15">bp<pos:position pos:line="12" pos:column="17"/></name> <init pos:line="12" pos:column="18">= <expr><operator pos:line="12" pos:column="20">*<pos:position pos:line="12" pos:column="21"/></operator><name><name pos:line="12" pos:column="21">virgin<pos:position pos:line="12" pos:column="27"/></name><operator pos:line="12" pos:column="27">.<pos:position pos:line="12" pos:column="28"/></operator><name pos:line="12" pos:column="28">body_pipe<pos:position pos:line="12" pos:column="37"/></name></name></expr></init></decl>;<pos:position pos:line="12" pos:column="38"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="13" pos:column="5">const<pos:position pos:line="13" pos:column="10"/></specifier> <name pos:line="13" pos:column="11">bool<pos:position pos:line="13" pos:column="15"/></name></type> <name pos:line="13" pos:column="16">wantToPostpone<pos:position pos:line="13" pos:column="30"/></name> <init pos:line="13" pos:column="31">= <expr><name pos:line="13" pos:column="33">isRepeatable<pos:position pos:line="13" pos:column="45"/></name> <operator pos:line="13" pos:column="46">||<pos:position pos:line="13" pos:column="48"/></operator> <name pos:line="13" pos:column="49">canStartBypass<pos:position pos:line="13" pos:column="63"/></name> <operator pos:line="13" pos:column="64">||<pos:position pos:line="13" pos:column="66"/></operator> <name pos:line="13" pos:column="67">protectGroupBypass<pos:position pos:line="13" pos:column="85"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="86"/></decl_stmt>

    <comment type="line" pos:line="15" pos:column="5">// Why &gt; 2? HttpState does not use the last bytes in the buffer</comment>
    <comment type="line" pos:line="16" pos:column="5">// because delayAwareRead() is arguably broken. See</comment>
    <comment type="line" pos:line="17" pos:column="5">// HttpStateData::maybeReadVirginBody for more details.</comment>
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name pos:line="18" pos:column="9">wantToPostpone<pos:position pos:line="18" pos:column="23"/></name> <operator pos:line="18" pos:column="24">&amp;&amp;<pos:position pos:line="18" pos:column="34"/></operator> <call><name><name pos:line="18" pos:column="27">bp<pos:position pos:line="18" pos:column="29"/></name><operator pos:line="18" pos:column="29">.<pos:position pos:line="18" pos:column="30"/></operator><name pos:line="18" pos:column="30">buf<pos:position pos:line="18" pos:column="33"/></name></name><argument_list pos:line="18" pos:column="33">()<pos:position pos:line="18" pos:column="35"/></argument_list></call><operator pos:line="18" pos:column="35">.<pos:position pos:line="18" pos:column="36"/></operator><call><name pos:line="18" pos:column="36">spaceSize<pos:position pos:line="18" pos:column="45"/></name><argument_list pos:line="18" pos:column="45">()<pos:position pos:line="18" pos:column="47"/></argument_list></call> <operator pos:line="18" pos:column="48">&gt;<pos:position pos:line="18" pos:column="52"/></operator> <literal type="number" pos:line="18" pos:column="50">2<pos:position pos:line="18" pos:column="51"/></literal></expr>)<pos:position pos:line="18" pos:column="52"/></condition><then pos:line="18" pos:column="52"> <block pos:line="18" pos:column="53">{
        <comment type="line" pos:line="19" pos:column="9">// Postponing may increase memory footprint and slow the HTTP side</comment>
        <comment type="line" pos:line="20" pos:column="9">// down. Not postponing may increase the number of ICAP errors</comment>
        <comment type="line" pos:line="21" pos:column="9">// if the ICAP service fails. We may also use "potential" space to</comment>
        <comment type="line" pos:line="22" pos:column="9">// postpone more aggressively. Should the trade-off be configurable?</comment>
        <expr_stmt><expr><call><name pos:line="23" pos:column="9">debugs<pos:position pos:line="23" pos:column="15"/></name><argument_list pos:line="23" pos:column="15">(<argument><expr><literal type="number" pos:line="23" pos:column="16">93<pos:position pos:line="23" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="20">8<pos:position pos:line="23" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="23">HERE<pos:position pos:line="23" pos:column="27"/></name> <operator pos:line="23" pos:column="28">&lt;&lt;<pos:position pos:line="23" pos:column="36"/></operator> <literal type="string" pos:line="23" pos:column="31">"postponing consumption from "<pos:position pos:line="23" pos:column="61"/></literal> <operator pos:line="23" pos:column="62">&lt;&lt;<pos:position pos:line="23" pos:column="70"/></operator> <call><name><name pos:line="23" pos:column="65">bp<pos:position pos:line="23" pos:column="67"/></name><operator pos:line="23" pos:column="67">.<pos:position pos:line="23" pos:column="68"/></operator><name pos:line="23" pos:column="68">status<pos:position pos:line="23" pos:column="74"/></name></name><argument_list pos:line="23" pos:column="74">()<pos:position pos:line="23" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="78"/></expr_stmt>
        <return pos:line="24" pos:column="9">return;<pos:position pos:line="24" pos:column="16"/></return>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><specifier pos:line="27" pos:column="5">const<pos:position pos:line="27" pos:column="10"/></specifier> <name pos:line="27" pos:column="11">size_t<pos:position pos:line="27" pos:column="17"/></name></type> <name pos:line="27" pos:column="18">have<pos:position pos:line="27" pos:column="22"/></name> <init pos:line="27" pos:column="23">= <expr><cast type="static" pos:line="27" pos:column="25">static_cast<argument_list type="generic" pos:line="27" pos:column="36">&lt;<argument><expr><name pos:line="27" pos:column="37">size_t<pos:position pos:line="27" pos:column="43"/></name></expr></argument>&gt;<pos:position pos:line="27" pos:column="47"/></argument_list><argument_list pos:line="27" pos:column="44">(<argument><expr><call><name><name pos:line="27" pos:column="45">bp<pos:position pos:line="27" pos:column="47"/></name><operator pos:line="27" pos:column="47">.<pos:position pos:line="27" pos:column="48"/></operator><name pos:line="27" pos:column="48">buf<pos:position pos:line="27" pos:column="51"/></name></name><argument_list pos:line="27" pos:column="51">()<pos:position pos:line="27" pos:column="53"/></argument_list></call><operator pos:line="27" pos:column="53">.<pos:position pos:line="27" pos:column="54"/></operator><call><name pos:line="27" pos:column="54">contentSize<pos:position pos:line="27" pos:column="65"/></name><argument_list pos:line="27" pos:column="65">()<pos:position pos:line="27" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="68"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="27" pos:column="69"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="28" pos:column="5">const<pos:position pos:line="28" pos:column="10"/></specifier> <name pos:line="28" pos:column="11">uint64_t<pos:position pos:line="28" pos:column="19"/></name></type> <name pos:line="28" pos:column="20">end<pos:position pos:line="28" pos:column="23"/></name> <init pos:line="28" pos:column="24">= <expr><name pos:line="28" pos:column="26">virginConsumed<pos:position pos:line="28" pos:column="40"/></name> <operator pos:line="28" pos:column="41">+<pos:position pos:line="28" pos:column="42"/></operator> <name pos:line="28" pos:column="43">have<pos:position pos:line="28" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="28" pos:column="48"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="29" pos:column="5">uint64_t<pos:position pos:line="29" pos:column="13"/></name></type> <name pos:line="29" pos:column="14">offset<pos:position pos:line="29" pos:column="20"/></name> <init pos:line="29" pos:column="21">= <expr><name pos:line="29" pos:column="23">end<pos:position pos:line="29" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="29" pos:column="27"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="31" pos:column="5">debugs<pos:position pos:line="31" pos:column="11"/></name><argument_list pos:line="31" pos:column="11">(<argument><expr><literal type="number" pos:line="31" pos:column="12">93<pos:position pos:line="31" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="16">9<pos:position pos:line="31" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="19">HERE<pos:position pos:line="31" pos:column="23"/></name> <operator pos:line="31" pos:column="24">&lt;&lt;<pos:position pos:line="31" pos:column="32"/></operator> <literal type="string" pos:line="31" pos:column="27">"max virgin consumption offset="<pos:position pos:line="31" pos:column="59"/></literal> <operator pos:line="31" pos:column="60">&lt;&lt;<pos:position pos:line="31" pos:column="68"/></operator> <name pos:line="31" pos:column="63">offset<pos:position pos:line="31" pos:column="69"/></name> <operator pos:line="31" pos:column="70">&lt;&lt;<pos:position pos:line="31" pos:column="78"/></operator>
           <literal type="string" pos:line="32" pos:column="12">" acts "<pos:position pos:line="32" pos:column="20"/></literal> <operator pos:line="32" pos:column="21">&lt;&lt;<pos:position pos:line="32" pos:column="29"/></operator> <call><name><name pos:line="32" pos:column="24">virginBodyWriting<pos:position pos:line="32" pos:column="41"/></name><operator pos:line="32" pos:column="41">.<pos:position pos:line="32" pos:column="42"/></operator><name pos:line="32" pos:column="42">active<pos:position pos:line="32" pos:column="48"/></name></name><argument_list pos:line="32" pos:column="48">()<pos:position pos:line="32" pos:column="50"/></argument_list></call> <operator pos:line="32" pos:column="51">&lt;&lt;<pos:position pos:line="32" pos:column="59"/></operator> <call><name><name pos:line="32" pos:column="54">virginBodySending<pos:position pos:line="32" pos:column="71"/></name><operator pos:line="32" pos:column="71">.<pos:position pos:line="32" pos:column="72"/></operator><name pos:line="32" pos:column="72">active<pos:position pos:line="32" pos:column="78"/></name></name><argument_list pos:line="32" pos:column="78">()<pos:position pos:line="32" pos:column="80"/></argument_list></call> <operator pos:line="32" pos:column="81">&lt;&lt;<pos:position pos:line="32" pos:column="89"/></operator>
           <literal type="string" pos:line="33" pos:column="12">" consumed="<pos:position pos:line="33" pos:column="24"/></literal> <operator pos:line="33" pos:column="25">&lt;&lt;<pos:position pos:line="33" pos:column="33"/></operator> <name pos:line="33" pos:column="28">virginConsumed<pos:position pos:line="33" pos:column="42"/></name> <operator pos:line="33" pos:column="43">&lt;&lt;<pos:position pos:line="33" pos:column="51"/></operator>
           <literal type="string" pos:line="34" pos:column="12">" from "<pos:position pos:line="34" pos:column="20"/></literal> <operator pos:line="34" pos:column="21">&lt;&lt;<pos:position pos:line="34" pos:column="29"/></operator> <call><name><name pos:line="34" pos:column="24">virgin<pos:position pos:line="34" pos:column="30"/></name><operator pos:line="34" pos:column="30">.<pos:position pos:line="34" pos:column="31"/></operator><name pos:line="34" pos:column="31">body_pipe<pos:position pos:line="34" pos:column="40"/></name><operator pos:line="34" pos:column="40">-&gt;<pos:position pos:line="34" pos:column="45"/></operator><name pos:line="34" pos:column="42">status<pos:position pos:line="34" pos:column="48"/></name></name><argument_list pos:line="34" pos:column="48">()<pos:position pos:line="34" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="34" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="52"/></expr_stmt>

    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><call><name><name pos:line="36" pos:column="9">virginBodyWriting<pos:position pos:line="36" pos:column="26"/></name><operator pos:line="36" pos:column="26">.<pos:position pos:line="36" pos:column="27"/></operator><name pos:line="36" pos:column="27">active<pos:position pos:line="36" pos:column="33"/></name></name><argument_list pos:line="36" pos:column="33">()<pos:position pos:line="36" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="36"/></condition><then pos:line="36" pos:column="36">
        <block type="pseudo"><expr_stmt><expr><name pos:line="37" pos:column="9">offset<pos:position pos:line="37" pos:column="15"/></name> <operator pos:line="37" pos:column="16">=<pos:position pos:line="37" pos:column="17"/></operator> <call><name pos:line="37" pos:column="18">min<pos:position pos:line="37" pos:column="21"/></name><argument_list pos:line="37" pos:column="21">(<argument><expr><call><name><name pos:line="37" pos:column="22">virginBodyWriting<pos:position pos:line="37" pos:column="39"/></name><operator pos:line="37" pos:column="39">.<pos:position pos:line="37" pos:column="40"/></operator><name pos:line="37" pos:column="40">offset<pos:position pos:line="37" pos:column="46"/></name></name><argument_list pos:line="37" pos:column="46">()<pos:position pos:line="37" pos:column="48"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="37" pos:column="50">offset<pos:position pos:line="37" pos:column="56"/></name></expr></argument>)<pos:position pos:line="37" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="58"/></expr_stmt></block></then></if>

    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><call><name><name pos:line="39" pos:column="9">virginBodySending<pos:position pos:line="39" pos:column="26"/></name><operator pos:line="39" pos:column="26">.<pos:position pos:line="39" pos:column="27"/></operator><name pos:line="39" pos:column="27">active<pos:position pos:line="39" pos:column="33"/></name></name><argument_list pos:line="39" pos:column="33">()<pos:position pos:line="39" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="36"/></condition><then pos:line="39" pos:column="36">
        <block type="pseudo"><expr_stmt><expr><name pos:line="40" pos:column="9">offset<pos:position pos:line="40" pos:column="15"/></name> <operator pos:line="40" pos:column="16">=<pos:position pos:line="40" pos:column="17"/></operator> <call><name pos:line="40" pos:column="18">min<pos:position pos:line="40" pos:column="21"/></name><argument_list pos:line="40" pos:column="21">(<argument><expr><call><name><name pos:line="40" pos:column="22">virginBodySending<pos:position pos:line="40" pos:column="39"/></name><operator pos:line="40" pos:column="39">.<pos:position pos:line="40" pos:column="40"/></operator><name pos:line="40" pos:column="40">offset<pos:position pos:line="40" pos:column="46"/></name></name><argument_list pos:line="40" pos:column="46">()<pos:position pos:line="40" pos:column="48"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="40" pos:column="50">offset<pos:position pos:line="40" pos:column="56"/></name></expr></argument>)<pos:position pos:line="40" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="58"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="42" pos:column="5">Must<pos:position pos:line="42" pos:column="9"/></name><argument_list pos:line="42" pos:column="9">(<argument><expr><name pos:line="42" pos:column="10">virginConsumed<pos:position pos:line="42" pos:column="24"/></name> <operator pos:line="42" pos:column="25">&lt;=<pos:position pos:line="42" pos:column="30"/></operator> <name pos:line="42" pos:column="28">offset<pos:position pos:line="42" pos:column="34"/></name> <operator pos:line="42" pos:column="35">&amp;&amp;<pos:position pos:line="42" pos:column="45"/></operator> <name pos:line="42" pos:column="38">offset<pos:position pos:line="42" pos:column="44"/></name> <operator pos:line="42" pos:column="45">&lt;=<pos:position pos:line="42" pos:column="50"/></operator> <name pos:line="42" pos:column="48">end<pos:position pos:line="42" pos:column="51"/></name></expr></argument>)<pos:position pos:line="42" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="53"/></expr_stmt>

    <if pos:line="44" pos:column="5">if <condition pos:line="44" pos:column="8">(<decl><type><specifier pos:line="44" pos:column="9">const<pos:position pos:line="44" pos:column="14"/></specifier> <name pos:line="44" pos:column="15">size_t<pos:position pos:line="44" pos:column="21"/></name></type> <name pos:line="44" pos:column="22">size<pos:position pos:line="44" pos:column="26"/></name> <init pos:line="44" pos:column="27">= <expr><cast type="static" pos:line="44" pos:column="29">static_cast<argument_list type="generic" pos:line="44" pos:column="40">&lt;<argument><expr><name pos:line="44" pos:column="41">size_t<pos:position pos:line="44" pos:column="47"/></name></expr></argument>&gt;<pos:position pos:line="44" pos:column="51"/></argument_list><argument_list pos:line="44" pos:column="48">(<argument><expr><name pos:line="44" pos:column="49">offset<pos:position pos:line="44" pos:column="55"/></name> <operator pos:line="44" pos:column="56">-<pos:position pos:line="44" pos:column="57"/></operator> <name pos:line="44" pos:column="58">virginConsumed<pos:position pos:line="44" pos:column="72"/></name></expr></argument>)<pos:position pos:line="44" pos:column="73"/></argument_list></cast></expr></init></decl>)<pos:position pos:line="44" pos:column="74"/></condition><then pos:line="44" pos:column="74"> <block pos:line="44" pos:column="75">{
        <expr_stmt><expr><call><name pos:line="45" pos:column="9">debugs<pos:position pos:line="45" pos:column="15"/></name><argument_list pos:line="45" pos:column="15">(<argument><expr><literal type="number" pos:line="45" pos:column="16">93<pos:position pos:line="45" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="45" pos:column="20">8<pos:position pos:line="45" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="45" pos:column="23">HERE<pos:position pos:line="45" pos:column="27"/></name> <operator pos:line="45" pos:column="28">&lt;&lt;<pos:position pos:line="45" pos:column="36"/></operator> <literal type="string" pos:line="45" pos:column="31">"consuming "<pos:position pos:line="45" pos:column="43"/></literal> <operator pos:line="45" pos:column="44">&lt;&lt;<pos:position pos:line="45" pos:column="52"/></operator> <name pos:line="45" pos:column="47">size<pos:position pos:line="45" pos:column="51"/></name> <operator pos:line="45" pos:column="52">&lt;&lt;<pos:position pos:line="45" pos:column="60"/></operator> <literal type="string" pos:line="45" pos:column="55">" out of "<pos:position pos:line="45" pos:column="65"/></literal> <operator pos:line="45" pos:column="66">&lt;&lt;<pos:position pos:line="45" pos:column="74"/></operator> <name pos:line="45" pos:column="69">have<pos:position pos:line="45" pos:column="73"/></name> <operator pos:line="45" pos:column="74">&lt;&lt;<pos:position pos:line="45" pos:column="82"/></operator>
               <literal type="string" pos:line="46" pos:column="16">" virgin body bytes"<pos:position pos:line="46" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="47" pos:column="9">bp<pos:position pos:line="47" pos:column="11"/></name><operator pos:line="47" pos:column="11">.<pos:position pos:line="47" pos:column="12"/></operator><name pos:line="47" pos:column="12">consume<pos:position pos:line="47" pos:column="19"/></name></name><argument_list pos:line="47" pos:column="19">(<argument><expr><name pos:line="47" pos:column="20">size<pos:position pos:line="47" pos:column="24"/></name></expr></argument>)<pos:position pos:line="47" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><name pos:line="48" pos:column="9">virginConsumed<pos:position pos:line="48" pos:column="23"/></name> <operator pos:line="48" pos:column="24">+=<pos:position pos:line="48" pos:column="26"/></operator> <name pos:line="48" pos:column="27">size<pos:position pos:line="48" pos:column="31"/></name></expr>;<pos:position pos:line="48" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="49" pos:column="9">Must<pos:position pos:line="49" pos:column="13"/></name><argument_list pos:line="49" pos:column="13">(<argument><expr><operator pos:line="49" pos:column="14">!<pos:position pos:line="49" pos:column="15"/></operator><name pos:line="49" pos:column="15">isRetriable<pos:position pos:line="49" pos:column="26"/></name></expr></argument>)<pos:position pos:line="49" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="28"/></expr_stmt> <comment type="line" pos:line="49" pos:column="29">// or we should not be consuming</comment>
        <expr_stmt><expr><call><name pos:line="50" pos:column="9">disableRepeats<pos:position pos:line="50" pos:column="23"/></name><argument_list pos:line="50" pos:column="23">(<argument><expr><literal type="string" pos:line="50" pos:column="24">"consumed content"<pos:position pos:line="50" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="51" pos:column="9">disableBypass<pos:position pos:line="51" pos:column="22"/></name><argument_list pos:line="51" pos:column="22">(<argument><expr><literal type="string" pos:line="51" pos:column="23">"consumed content"<pos:position pos:line="51" pos:column="41"/></literal></expr></argument>, <argument><expr><literal type="boolean" pos:line="51" pos:column="43">true<pos:position pos:line="51" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="49"/></expr_stmt>
    }<pos:position pos:line="52" pos:column="6"/></block></then></if>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
