<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2723_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type>
<name pos:line="2" pos:column="1">xstrtok<pos:position pos:line="2" pos:column="8"/></name><parameter_list pos:line="2" pos:column="8">(<parameter><decl><type><name pos:line="2" pos:column="9">char<pos:position pos:line="2" pos:column="13"/></name> <modifier pos:line="2" pos:column="14">*<pos:position pos:line="2" pos:column="15"/></modifier></type><name pos:line="2" pos:column="15">str<pos:position pos:line="2" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="20">const<pos:position pos:line="2" pos:column="25"/></specifier> <name pos:line="2" pos:column="26">char<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type><name pos:line="2" pos:column="32">delimiters<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="43"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><operator pos:line="4" pos:column="12">!<pos:position pos:line="4" pos:column="13"/></operator><name pos:line="4" pos:column="13">str<pos:position pos:line="4" pos:column="16"/></name></expr></argument>)<pos:position pos:line="4" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="18"/></expr_stmt> <comment type="line" pos:line="4" pos:column="19">// we are parsing the configuration file</comment>
    <comment type="line" pos:line="5" pos:column="5">// no support unless enabled in the configuration and</comment>
    <comment type="line" pos:line="6" pos:column="5">// no support for other delimiters (they may need to be eradicated!)</comment>
    <return pos:line="7" pos:column="5">return <expr><ternary><condition><expr><operator pos:line="7" pos:column="12">(<pos:position pos:line="7" pos:column="13"/></operator><name><name pos:line="7" pos:column="13">ConfigParser<pos:position pos:line="7" pos:column="25"/></name><operator pos:line="7" pos:column="25">::<pos:position pos:line="7" pos:column="27"/></operator><name pos:line="7" pos:column="27">RecognizeQuotedValues<pos:position pos:line="7" pos:column="48"/></name></name> <operator pos:line="7" pos:column="49">&amp;&amp;<pos:position pos:line="7" pos:column="59"/></operator>
            <call><name pos:line="8" pos:column="13">strcmp<pos:position pos:line="8" pos:column="19"/></name><argument_list pos:line="8" pos:column="19">(<argument><expr><name pos:line="8" pos:column="20">delimiters<pos:position pos:line="8" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="32">" \t\n\r"<pos:position pos:line="8" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="42"/></argument_list></call> <operator pos:line="8" pos:column="43">==<pos:position pos:line="8" pos:column="45"/></operator> <literal type="number" pos:line="8" pos:column="46">0<pos:position pos:line="8" pos:column="47"/></literal><operator pos:line="8" pos:column="47">)<pos:position pos:line="8" pos:column="48"/></operator></expr> ?<pos:position pos:line="8" pos:column="50"/></condition><then pos:line="8" pos:column="50">
           <expr><call><name><name pos:line="9" pos:column="12">ConfigParser<pos:position pos:line="9" pos:column="24"/></name><operator pos:line="9" pos:column="24">::<pos:position pos:line="9" pos:column="26"/></operator><name pos:line="9" pos:column="26">NextToken<pos:position pos:line="9" pos:column="35"/></name></name><argument_list pos:line="9" pos:column="35">()<pos:position pos:line="9" pos:column="37"/></argument_list></call></expr> <pos:position pos:line="9" pos:column="38"/></then><else pos:line="9" pos:column="38">: <expr><call><name><operator pos:line="9" pos:column="40">::<pos:position pos:line="9" pos:column="42"/></operator><name pos:line="9" pos:column="42">strtok<pos:position pos:line="9" pos:column="48"/></name></name><argument_list pos:line="9" pos:column="48">(<argument><expr><name pos:line="9" pos:column="49">str<pos:position pos:line="9" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="54">delimiters<pos:position pos:line="9" pos:column="64"/></name></expr></argument>)<pos:position pos:line="9" pos:column="65"/></argument_list></call></expr></else></ternary></expr>;<pos:position pos:line="9" pos:column="66"/></return>
}<pos:position pos:line="10" pos:column="2"/></block></function></unit>
