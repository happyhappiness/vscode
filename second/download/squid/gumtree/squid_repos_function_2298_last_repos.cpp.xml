<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2298_last_repos.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">char<pos:position pos:line="1" pos:column="11"/></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type>
<name><name pos:line="2" pos:column="1">HttpHeader<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">getAuth<pos:position pos:line="2" pos:column="20"/></name></name><parameter_list pos:line="2" pos:column="20">(<parameter><decl><type><name><name pos:line="2" pos:column="21">Http<pos:position pos:line="2" pos:column="25"/></name><operator pos:line="2" pos:column="25">::<pos:position pos:line="2" pos:column="27"/></operator><name pos:line="2" pos:column="27">HdrType<pos:position pos:line="2" pos:column="34"/></name></name></type> <name pos:line="2" pos:column="35">id<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="39">const<pos:position pos:line="2" pos:column="44"/></specifier> <name pos:line="2" pos:column="45">char<pos:position pos:line="2" pos:column="49"/></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="51">auth_scheme<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="63"/></parameter_list> <specifier pos:line="2" pos:column="64">const<pos:position pos:line="2" pos:column="69"/></specifier>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">field<pos:position pos:line="4" pos:column="22"/></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">l<pos:position pos:line="5" pos:column="10"/></name></decl>;<pos:position pos:line="5" pos:column="11"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><name pos:line="6" pos:column="12">auth_scheme<pos:position pos:line="6" pos:column="23"/></name></expr></argument>)<pos:position pos:line="6" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name pos:line="7" pos:column="5">field<pos:position pos:line="7" pos:column="10"/></name> <operator pos:line="7" pos:column="11">=<pos:position pos:line="7" pos:column="12"/></operator> <call><name pos:line="7" pos:column="13">getStr<pos:position pos:line="7" pos:column="19"/></name><argument_list pos:line="7" pos:column="19">(<argument><expr><name pos:line="7" pos:column="20">id<pos:position pos:line="7" pos:column="22"/></name></expr></argument>)<pos:position pos:line="7" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="24"/></expr_stmt>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">!<pos:position pos:line="9" pos:column="10"/></operator><name pos:line="9" pos:column="10">field<pos:position pos:line="9" pos:column="15"/></name></expr>)<pos:position pos:line="9" pos:column="16"/></condition><then pos:line="9" pos:column="16">         <comment type="block" pos:line="9" pos:column="25">/* no authorization field */</comment>
        <block type="pseudo"><return pos:line="10" pos:column="9">return <expr><name pos:line="10" pos:column="16">NULL<pos:position pos:line="10" pos:column="20"/></name></expr>;<pos:position pos:line="10" pos:column="21"/></return></block></then></if>

    <expr_stmt><expr><name pos:line="12" pos:column="5">l<pos:position pos:line="12" pos:column="6"/></name> <operator pos:line="12" pos:column="7">=<pos:position pos:line="12" pos:column="8"/></operator> <call><name pos:line="12" pos:column="9">strlen<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><name pos:line="12" pos:column="16">auth_scheme<pos:position pos:line="12" pos:column="27"/></name></expr></argument>)<pos:position pos:line="12" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="29"/></expr_stmt>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><operator pos:line="14" pos:column="9">!<pos:position pos:line="14" pos:column="10"/></operator><name pos:line="14" pos:column="10">l<pos:position pos:line="14" pos:column="11"/></name> <operator pos:line="14" pos:column="12">||<pos:position pos:line="14" pos:column="14"/></operator> <call><name pos:line="14" pos:column="15">strncasecmp<pos:position pos:line="14" pos:column="26"/></name><argument_list pos:line="14" pos:column="26">(<argument><expr><name pos:line="14" pos:column="27">field<pos:position pos:line="14" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="34">auth_scheme<pos:position pos:line="14" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="47">l<pos:position pos:line="14" pos:column="48"/></name></expr></argument>)<pos:position pos:line="14" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="50"/></condition><then pos:line="14" pos:column="50">   <comment type="block" pos:line="14" pos:column="53">/* wrong scheme */</comment>
        <block type="pseudo"><return pos:line="15" pos:column="9">return <expr><name pos:line="15" pos:column="16">NULL<pos:position pos:line="15" pos:column="20"/></name></expr>;<pos:position pos:line="15" pos:column="21"/></return></block></then></if>

    <expr_stmt><expr><name pos:line="17" pos:column="5">field<pos:position pos:line="17" pos:column="10"/></name> <operator pos:line="17" pos:column="11">+=<pos:position pos:line="17" pos:column="13"/></operator> <name pos:line="17" pos:column="14">l<pos:position pos:line="17" pos:column="15"/></name></expr>;<pos:position pos:line="17" pos:column="16"/></expr_stmt>

    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><operator pos:line="19" pos:column="9">!<pos:position pos:line="19" pos:column="10"/></operator><call><name pos:line="19" pos:column="10">xisspace<pos:position pos:line="19" pos:column="18"/></name><argument_list pos:line="19" pos:column="18">(<argument><expr><operator pos:line="19" pos:column="19">*<pos:position pos:line="19" pos:column="20"/></operator><name pos:line="19" pos:column="20">field<pos:position pos:line="19" pos:column="25"/></name></expr></argument>)<pos:position pos:line="19" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="27"/></condition><then pos:line="19" pos:column="27">  <comment type="block" pos:line="19" pos:column="29">/* wrong scheme */</comment>
        <block type="pseudo"><return pos:line="20" pos:column="9">return <expr><name pos:line="20" pos:column="16">NULL<pos:position pos:line="20" pos:column="20"/></name></expr>;<pos:position pos:line="20" pos:column="21"/></return></block></then></if>

    <comment type="block" pos:line="22" pos:column="5">/* skip white space */</comment>
    <for pos:line="23" pos:column="5">for <control pos:line="23" pos:column="9">(<init pos:line="23" pos:column="10">;<pos:position pos:line="23" pos:column="11"/></init> <condition><expr><name pos:line="23" pos:column="12">field<pos:position pos:line="23" pos:column="17"/></name> <operator pos:line="23" pos:column="18">&amp;&amp;<pos:position pos:line="23" pos:column="28"/></operator> <call><name pos:line="23" pos:column="21">xisspace<pos:position pos:line="23" pos:column="29"/></name><argument_list pos:line="23" pos:column="29">(<argument><expr><operator pos:line="23" pos:column="30">*<pos:position pos:line="23" pos:column="31"/></operator><name pos:line="23" pos:column="31">field<pos:position pos:line="23" pos:column="36"/></name></expr></argument>)<pos:position pos:line="23" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="38"/></condition> <incr><expr><operator pos:line="23" pos:column="39">++<pos:position pos:line="23" pos:column="41"/></operator><name pos:line="23" pos:column="41">field<pos:position pos:line="23" pos:column="46"/></name></expr></incr>)<pos:position pos:line="23" pos:column="47"/></control><block type="pseudo"><empty_stmt pos:line="23" pos:column="47">;<pos:position pos:line="23" pos:column="48"/></empty_stmt></block></for>

    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><operator pos:line="25" pos:column="9">!<pos:position pos:line="25" pos:column="10"/></operator><operator pos:line="25" pos:column="10">*<pos:position pos:line="25" pos:column="11"/></operator><name pos:line="25" pos:column="11">field<pos:position pos:line="25" pos:column="16"/></name></expr>)<pos:position pos:line="25" pos:column="17"/></condition><then pos:line="25" pos:column="17">        <comment type="block" pos:line="25" pos:column="25">/* no authorization cookie */</comment>
        <block type="pseudo"><return pos:line="26" pos:column="9">return <expr><name pos:line="26" pos:column="16">NULL<pos:position pos:line="26" pos:column="20"/></name></expr>;<pos:position pos:line="26" pos:column="21"/></return></block></then></if>

    <decl_stmt><decl><specifier pos:line="28" pos:column="5">static<pos:position pos:line="28" pos:column="11"/></specifier> <type><name pos:line="28" pos:column="12">char<pos:position pos:line="28" pos:column="16"/></name></type> <name><name pos:line="28" pos:column="17">decodedAuthToken<pos:position pos:line="28" pos:column="33"/></name><index pos:line="28" pos:column="33">[<expr><literal type="number" pos:line="28" pos:column="34">8192<pos:position pos:line="28" pos:column="38"/></literal></expr>]<pos:position pos:line="28" pos:column="39"/></index></name></decl>;<pos:position pos:line="28" pos:column="40"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="29" pos:column="5">struct<pos:position pos:line="29" pos:column="11"/></name> <name pos:line="29" pos:column="12">base64_decode_ctx<pos:position pos:line="29" pos:column="29"/></name></name></type> <name pos:line="29" pos:column="30">ctx<pos:position pos:line="29" pos:column="33"/></name></decl>;<pos:position pos:line="29" pos:column="34"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">base64_decode_init<pos:position pos:line="30" pos:column="23"/></name><argument_list pos:line="30" pos:column="23">(<argument><expr><operator pos:line="30" pos:column="24">&amp;<pos:position pos:line="30" pos:column="29"/></operator><name pos:line="30" pos:column="25">ctx<pos:position pos:line="30" pos:column="28"/></name></expr></argument>)<pos:position pos:line="30" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="30"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="31" pos:column="5">size_t<pos:position pos:line="31" pos:column="11"/></name></type> <name pos:line="31" pos:column="12">decodedLen<pos:position pos:line="31" pos:column="22"/></name> <init pos:line="31" pos:column="23">= <expr><literal type="number" pos:line="31" pos:column="25">0<pos:position pos:line="31" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="31" pos:column="27"/></decl_stmt>
    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><operator pos:line="32" pos:column="9">!<pos:position pos:line="32" pos:column="10"/></operator><call><name pos:line="32" pos:column="10">base64_decode_update<pos:position pos:line="32" pos:column="30"/></name><argument_list pos:line="32" pos:column="30">(<argument><expr><operator pos:line="32" pos:column="31">&amp;<pos:position pos:line="32" pos:column="36"/></operator><name pos:line="32" pos:column="32">ctx<pos:position pos:line="32" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="37">&amp;<pos:position pos:line="32" pos:column="42"/></operator><name pos:line="32" pos:column="38">decodedLen<pos:position pos:line="32" pos:column="48"/></name></expr></argument>, <argument><expr><cast type="reinterpret" pos:line="32" pos:column="50">reinterpret_cast<argument_list type="generic" pos:line="32" pos:column="66">&lt;<argument><expr><name pos:line="32" pos:column="67">uint8_t<pos:position pos:line="32" pos:column="74"/></name><operator pos:line="32" pos:column="74">*<pos:position pos:line="32" pos:column="75"/></operator></expr></argument>&gt;<pos:position pos:line="32" pos:column="79"/></argument_list><argument_list pos:line="32" pos:column="76">(<argument><expr><name pos:line="32" pos:column="77">decodedAuthToken<pos:position pos:line="32" pos:column="93"/></name></expr></argument>)<pos:position pos:line="32" pos:column="94"/></argument_list></cast></expr></argument>, <argument><expr><call><name pos:line="32" pos:column="96">strlen<pos:position pos:line="32" pos:column="102"/></name><argument_list pos:line="32" pos:column="102">(<argument><expr><name pos:line="32" pos:column="103">field<pos:position pos:line="32" pos:column="108"/></name></expr></argument>)<pos:position pos:line="32" pos:column="109"/></argument_list></call></expr></argument>, <argument><expr><cast type="reinterpret" pos:line="32" pos:column="111">reinterpret_cast<argument_list type="generic" pos:line="32" pos:column="127">&lt;<argument><expr><specifier pos:line="32" pos:column="128">const<pos:position pos:line="32" pos:column="133"/></specifier> <name pos:line="32" pos:column="134">uint8_t<pos:position pos:line="32" pos:column="141"/></name><operator pos:line="32" pos:column="141">*<pos:position pos:line="32" pos:column="142"/></operator></expr></argument>&gt;<pos:position pos:line="32" pos:column="146"/></argument_list><argument_list pos:line="32" pos:column="143">(<argument><expr><name pos:line="32" pos:column="144">field<pos:position pos:line="32" pos:column="149"/></name></expr></argument>)<pos:position pos:line="32" pos:column="150"/></argument_list></cast></expr></argument>)<pos:position pos:line="32" pos:column="151"/></argument_list></call> <operator pos:line="32" pos:column="152">||<pos:position pos:line="32" pos:column="154"/></operator>
            <operator pos:line="33" pos:column="13">!<pos:position pos:line="33" pos:column="14"/></operator><call><name pos:line="33" pos:column="14">base64_decode_final<pos:position pos:line="33" pos:column="33"/></name><argument_list pos:line="33" pos:column="33">(<argument><expr><operator pos:line="33" pos:column="34">&amp;<pos:position pos:line="33" pos:column="39"/></operator><name pos:line="33" pos:column="35">ctx<pos:position pos:line="33" pos:column="38"/></name></expr></argument>)<pos:position pos:line="33" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="40"/></condition><then pos:line="33" pos:column="40"> <block pos:line="33" pos:column="41">{
        <return pos:line="34" pos:column="9">return <expr><name pos:line="34" pos:column="16">NULL<pos:position pos:line="34" pos:column="20"/></name></expr>;<pos:position pos:line="34" pos:column="21"/></return>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="36" pos:column="5">decodedAuthToken<pos:position pos:line="36" pos:column="21"/></name><index pos:line="36" pos:column="21">[<expr><name pos:line="36" pos:column="22">decodedLen<pos:position pos:line="36" pos:column="32"/></name></expr>]<pos:position pos:line="36" pos:column="33"/></index></name> <operator pos:line="36" pos:column="34">=<pos:position pos:line="36" pos:column="35"/></operator> <literal type="char" pos:line="36" pos:column="36">'\0'<pos:position pos:line="36" pos:column="40"/></literal></expr>;<pos:position pos:line="36" pos:column="41"/></expr_stmt>
    <return pos:line="37" pos:column="5">return <expr><name pos:line="37" pos:column="12">decodedAuthToken<pos:position pos:line="37" pos:column="28"/></name></expr>;<pos:position pos:line="37" pos:column="29"/></return>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
