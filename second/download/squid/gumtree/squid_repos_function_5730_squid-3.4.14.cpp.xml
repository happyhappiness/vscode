<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5730_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">DiskdIOStrategy<pos:position pos:line="2" pos:column="16"/></name><operator pos:line="2" pos:column="16">::<pos:position pos:line="2" pos:column="18"/></operator><name pos:line="2" pos:column="18">callback<pos:position pos:line="2" pos:column="26"/></name></name><parameter_list pos:line="2" pos:column="26">()<pos:position pos:line="2" pos:column="28"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">diomsg<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">M<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">x<pos:position pos:line="5" pos:column="10"/></name></decl>;<pos:position pos:line="5" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">retval<pos:position pos:line="6" pos:column="15"/></name> <init pos:line="6" pos:column="16">= <expr><literal type="number" pos:line="6" pos:column="18">0<pos:position pos:line="6" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">away<pos:position pos:line="8" pos:column="13"/></name> <operator pos:line="8" pos:column="14">&gt;=<pos:position pos:line="8" pos:column="19"/></operator> <name pos:line="8" pos:column="17">magic2<pos:position pos:line="8" pos:column="23"/></name></expr>)<pos:position pos:line="8" pos:column="24"/></condition><then pos:line="8" pos:column="24"> <block pos:line="8" pos:column="25">{
        <expr_stmt><expr><operator pos:line="9" pos:column="9">++<pos:position pos:line="9" pos:column="11"/></operator><name><name pos:line="9" pos:column="11">diskd_stats<pos:position pos:line="9" pos:column="22"/></name><operator pos:line="9" pos:column="22">.<pos:position pos:line="9" pos:column="23"/></operator><name pos:line="9" pos:column="23">block_queue_len<pos:position pos:line="9" pos:column="38"/></name></name></expr>;<pos:position pos:line="9" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><name pos:line="10" pos:column="9">retval<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">=<pos:position pos:line="10" pos:column="17"/></operator> <literal type="number" pos:line="10" pos:column="18">1<pos:position pos:line="10" pos:column="19"/></literal></expr>;<pos:position pos:line="10" pos:column="20"/></expr_stmt>
        <comment type="block" pos:line="11" pos:column="9">/* We might not have anything to do, but our queue
         * is full.. */</comment>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name><name pos:line="15" pos:column="9">diskd_stats<pos:position pos:line="15" pos:column="20"/></name><operator pos:line="15" pos:column="20">.<pos:position pos:line="15" pos:column="21"/></operator><name pos:line="15" pos:column="21">sent_count<pos:position pos:line="15" pos:column="31"/></name></name> <operator pos:line="15" pos:column="32">-<pos:position pos:line="15" pos:column="33"/></operator> <name><name pos:line="15" pos:column="34">diskd_stats<pos:position pos:line="15" pos:column="45"/></name><operator pos:line="15" pos:column="45">.<pos:position pos:line="15" pos:column="46"/></operator><name pos:line="15" pos:column="46">recv_count<pos:position pos:line="15" pos:column="56"/></name></name> <operator pos:line="15" pos:column="57">&gt;<pos:position pos:line="15" pos:column="61"/></operator>
            <name><name pos:line="16" pos:column="13">diskd_stats<pos:position pos:line="16" pos:column="24"/></name><operator pos:line="16" pos:column="24">.<pos:position pos:line="16" pos:column="25"/></operator><name pos:line="16" pos:column="25">max_away<pos:position pos:line="16" pos:column="33"/></name></name></expr>)<pos:position pos:line="16" pos:column="34"/></condition><then pos:line="16" pos:column="34"> <block pos:line="16" pos:column="35">{
        <expr_stmt><expr><name><name pos:line="17" pos:column="9">diskd_stats<pos:position pos:line="17" pos:column="20"/></name><operator pos:line="17" pos:column="20">.<pos:position pos:line="17" pos:column="21"/></operator><name pos:line="17" pos:column="21">max_away<pos:position pos:line="17" pos:column="29"/></name></name> <operator pos:line="17" pos:column="30">=<pos:position pos:line="17" pos:column="31"/></operator> <name><name pos:line="17" pos:column="32">diskd_stats<pos:position pos:line="17" pos:column="43"/></name><operator pos:line="17" pos:column="43">.<pos:position pos:line="17" pos:column="44"/></operator><name pos:line="17" pos:column="44">sent_count<pos:position pos:line="17" pos:column="54"/></name></name> <operator pos:line="17" pos:column="55">-<pos:position pos:line="17" pos:column="56"/></operator> <name><name pos:line="17" pos:column="57">diskd_stats<pos:position pos:line="17" pos:column="68"/></name><operator pos:line="17" pos:column="68">.<pos:position pos:line="17" pos:column="69"/></operator><name pos:line="17" pos:column="69">recv_count<pos:position pos:line="17" pos:column="79"/></name></name></expr>;<pos:position pos:line="17" pos:column="80"/></expr_stmt>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

    <while pos:line="20" pos:column="5">while <condition pos:line="20" pos:column="11">(<expr><literal type="number" pos:line="20" pos:column="12">1<pos:position pos:line="20" pos:column="13"/></literal></expr>)<pos:position pos:line="20" pos:column="14"/></condition> <block pos:line="20" pos:column="15">{
<cpp:ifdef pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">ifdef<pos:position pos:line="21" pos:column="7"/></cpp:directive>	<name pos:line="21" pos:column="9">ALWAYS_ZERO_BUFFERS<pos:position pos:line="21" pos:column="28"/></name></cpp:ifdef>
        <expr_stmt><expr><call><name pos:line="22" pos:column="9">memset<pos:position pos:line="22" pos:column="15"/></name><argument_list pos:line="22" pos:column="15">(<argument><expr><operator pos:line="22" pos:column="16">&amp;<pos:position pos:line="22" pos:column="21"/></operator><name pos:line="22" pos:column="17">M<pos:position pos:line="22" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="22" pos:column="20">'\0'<pos:position pos:line="22" pos:column="24"/></literal></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="26">sizeof<argument_list pos:line="22" pos:column="32">(<argument><expr><name pos:line="22" pos:column="33">M<pos:position pos:line="22" pos:column="34"/></name></expr></argument>)<pos:position pos:line="22" pos:column="35"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="37"/></expr_stmt>
<cpp:endif pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">endif<pos:position pos:line="23" pos:column="7"/></cpp:directive></cpp:endif>

        <expr_stmt><expr><name pos:line="25" pos:column="9">x<pos:position pos:line="25" pos:column="10"/></name> <operator pos:line="25" pos:column="11">=<pos:position pos:line="25" pos:column="12"/></operator> <call><name pos:line="25" pos:column="13">msgrcv<pos:position pos:line="25" pos:column="19"/></name><argument_list pos:line="25" pos:column="19">(<argument><expr><name pos:line="25" pos:column="20">rmsgid<pos:position pos:line="25" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="28">&amp;<pos:position pos:line="25" pos:column="33"/></operator><name pos:line="25" pos:column="29">M<pos:position pos:line="25" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="32">diomsg<pos:position pos:line="25" pos:column="38"/></name><operator pos:line="25" pos:column="38">::<pos:position pos:line="25" pos:column="40"/></operator><name pos:line="25" pos:column="40">msg_snd_rcv_sz<pos:position pos:line="25" pos:column="54"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="56">0<pos:position pos:line="25" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="59">IPC_NOWAIT<pos:position pos:line="25" pos:column="69"/></name></expr></argument>)<pos:position pos:line="25" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="71"/></expr_stmt>

        <if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><name pos:line="27" pos:column="13">x<pos:position pos:line="27" pos:column="14"/></name> <operator pos:line="27" pos:column="15">&lt;<pos:position pos:line="27" pos:column="19"/></operator> <literal type="number" pos:line="27" pos:column="17">0<pos:position pos:line="27" pos:column="18"/></literal></expr>)<pos:position pos:line="27" pos:column="19"/></condition><then pos:line="27" pos:column="19">
            <block type="pseudo"><break pos:line="28" pos:column="13">break;<pos:position pos:line="28" pos:column="19"/></break></block></then>
        <elseif pos:line="29" pos:column="9">else <if pos:line="29" pos:column="14">if <condition pos:line="29" pos:column="17">(<expr><name pos:line="29" pos:column="18">x<pos:position pos:line="29" pos:column="19"/></name> <operator pos:line="29" pos:column="20">!=<pos:position pos:line="29" pos:column="22"/></operator> <name><name pos:line="29" pos:column="23">diomsg<pos:position pos:line="29" pos:column="29"/></name><operator pos:line="29" pos:column="29">::<pos:position pos:line="29" pos:column="31"/></operator><name pos:line="29" pos:column="31">msg_snd_rcv_sz<pos:position pos:line="29" pos:column="45"/></name></name></expr>)<pos:position pos:line="29" pos:column="46"/></condition><then pos:line="29" pos:column="46"> <block pos:line="29" pos:column="47">{
            <expr_stmt><expr><call><name pos:line="30" pos:column="13">debugs<pos:position pos:line="30" pos:column="19"/></name><argument_list pos:line="30" pos:column="19">(<argument><expr><literal type="number" pos:line="30" pos:column="20">47<pos:position pos:line="30" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="24">DBG_IMPORTANT<pos:position pos:line="30" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="39">"storeDiskdDirCallback: msgget returns "<pos:position pos:line="30" pos:column="79"/></literal> <operator pos:line="30" pos:column="80">&lt;&lt;<pos:position pos:line="30" pos:column="88"/></operator> <name pos:line="30" pos:column="83">x<pos:position pos:line="30" pos:column="84"/></name></expr></argument>)<pos:position pos:line="30" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="86"/></expr_stmt>
            <break pos:line="31" pos:column="13">break;<pos:position pos:line="31" pos:column="19"/></break>
        }<pos:position pos:line="32" pos:column="10"/></block></then></if></elseif></if>

        <expr_stmt><expr><operator pos:line="34" pos:column="9">++<pos:position pos:line="34" pos:column="11"/></operator><name><name pos:line="34" pos:column="11">diskd_stats<pos:position pos:line="34" pos:column="22"/></name><operator pos:line="34" pos:column="22">.<pos:position pos:line="34" pos:column="23"/></operator><name pos:line="34" pos:column="23">recv_count<pos:position pos:line="34" pos:column="33"/></name></name></expr>;<pos:position pos:line="34" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="35" pos:column="9">--<pos:position pos:line="35" pos:column="11"/></operator><name pos:line="35" pos:column="11">away<pos:position pos:line="35" pos:column="15"/></name></expr>;<pos:position pos:line="35" pos:column="16"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">handle<pos:position pos:line="36" pos:column="15"/></name><argument_list pos:line="36" pos:column="15">(<argument><expr><operator pos:line="36" pos:column="16">&amp;<pos:position pos:line="36" pos:column="21"/></operator><name pos:line="36" pos:column="17">M<pos:position pos:line="36" pos:column="18"/></name></expr></argument>)<pos:position pos:line="36" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="20"/></expr_stmt>
        <expr_stmt><expr><name pos:line="37" pos:column="9">retval<pos:position pos:line="37" pos:column="15"/></name> <operator pos:line="37" pos:column="16">=<pos:position pos:line="37" pos:column="17"/></operator> <literal type="number" pos:line="37" pos:column="18">1<pos:position pos:line="37" pos:column="19"/></literal></expr>;<pos:position pos:line="37" pos:column="20"/></expr_stmt>		<comment type="block" pos:line="37" pos:column="33">/* Return that we've actually done some work */</comment>

        <if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><name><name pos:line="39" pos:column="13">M<pos:position pos:line="39" pos:column="14"/></name><operator pos:line="39" pos:column="14">.<pos:position pos:line="39" pos:column="15"/></operator><name pos:line="39" pos:column="15">shm_offset<pos:position pos:line="39" pos:column="25"/></name></name> <operator pos:line="39" pos:column="26">&gt;<pos:position pos:line="39" pos:column="30"/></operator> <operator pos:line="39" pos:column="28">-<pos:position pos:line="39" pos:column="29"/></operator><literal type="number" pos:line="39" pos:column="29">1<pos:position pos:line="39" pos:column="30"/></literal></expr>)<pos:position pos:line="39" pos:column="31"/></condition><then pos:line="39" pos:column="31">
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="40" pos:column="13">shm<pos:position pos:line="40" pos:column="16"/></name><operator pos:line="40" pos:column="16">.<pos:position pos:line="40" pos:column="17"/></operator><name pos:line="40" pos:column="17">put<pos:position pos:line="40" pos:column="20"/></name></name> <argument_list pos:line="40" pos:column="21">(<argument><expr><operator pos:line="40" pos:column="22">(<pos:position pos:line="40" pos:column="23"/></operator><name pos:line="40" pos:column="23">off_t<pos:position pos:line="40" pos:column="28"/></name><operator pos:line="40" pos:column="28">)<pos:position pos:line="40" pos:column="29"/></operator> <name><name pos:line="40" pos:column="30">M<pos:position pos:line="40" pos:column="31"/></name><operator pos:line="40" pos:column="31">.<pos:position pos:line="40" pos:column="32"/></operator><name pos:line="40" pos:column="32">shm_offset<pos:position pos:line="40" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="44"/></expr_stmt></block></then></if>
    }<pos:position pos:line="41" pos:column="6"/></block></while>

    <return pos:line="43" pos:column="5">return <expr><name pos:line="43" pos:column="12">retval<pos:position pos:line="43" pos:column="18"/></name></expr>;<pos:position pos:line="43" pos:column="19"/></return>
}<pos:position pos:line="44" pos:column="2"/></block></function></unit>
