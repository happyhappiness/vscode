<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1485_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">SquidMain<pos:position pos:line="2" pos:column="10"/></name><parameter_list pos:line="2" pos:column="10">(<parameter><decl><type><name pos:line="2" pos:column="11">int<pos:position pos:line="2" pos:column="14"/></name></type> <name pos:line="2" pos:column="15">argc<pos:position pos:line="2" pos:column="19"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="21">char<pos:position pos:line="2" pos:column="25"/></name> <modifier pos:line="2" pos:column="26">*<pos:position pos:line="2" pos:column="27"/></modifier><modifier pos:line="2" pos:column="27">*<pos:position pos:line="2" pos:column="28"/></modifier></type><name pos:line="2" pos:column="28">argv<pos:position pos:line="2" pos:column="32"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="33"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">ConfigureCurrentKid<pos:position pos:line="4" pos:column="24"/></name><argument_list pos:line="4" pos:column="24">(<argument><expr><name><name pos:line="4" pos:column="25">argv<pos:position pos:line="4" pos:column="29"/></name><index pos:line="4" pos:column="29">[<expr><literal type="number" pos:line="4" pos:column="30">0<pos:position pos:line="4" pos:column="31"/></literal></expr>]<pos:position pos:line="4" pos:column="32"/></index></name></expr></argument>)<pos:position pos:line="4" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="34"/></expr_stmt>

<cpp:if pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">if<pos:position pos:line="6" pos:column="4"/></cpp:directive> <expr><name pos:line="6" pos:column="5">HAVE_SBRK<pos:position pos:line="6" pos:column="14"/></name></expr></cpp:if>
    <expr_stmt><expr><name pos:line="7" pos:column="5">sbrk_start<pos:position pos:line="7" pos:column="15"/></name> <operator pos:line="7" pos:column="16">=<pos:position pos:line="7" pos:column="17"/></operator> <call><name pos:line="7" pos:column="18">sbrk<pos:position pos:line="7" pos:column="22"/></name><argument_list pos:line="7" pos:column="22">(<argument><expr><literal type="number" pos:line="7" pos:column="23">0<pos:position pos:line="7" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="26"/></expr_stmt>
<cpp:endif pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">endif<pos:position pos:line="8" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name><name pos:line="10" pos:column="5">Debug<pos:position pos:line="10" pos:column="10"/></name><operator pos:line="10" pos:column="10">::<pos:position pos:line="10" pos:column="12"/></operator><name pos:line="10" pos:column="12">parseOptions<pos:position pos:line="10" pos:column="24"/></name></name><argument_list pos:line="10" pos:column="24">(<argument><expr><name pos:line="10" pos:column="25">NULL<pos:position pos:line="10" pos:column="29"/></name></expr></argument>)<pos:position pos:line="10" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name pos:line="11" pos:column="5">debug_log<pos:position pos:line="11" pos:column="14"/></name> <operator pos:line="11" pos:column="15">=<pos:position pos:line="11" pos:column="16"/></operator> <name pos:line="11" pos:column="17">stderr<pos:position pos:line="11" pos:column="23"/></name></expr>;<pos:position pos:line="11" pos:column="24"/></expr_stmt>

<cpp:if pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">if<pos:position pos:line="13" pos:column="4"/></cpp:directive> <expr><call><name pos:line="13" pos:column="5">defined<pos:position pos:line="13" pos:column="12"/></name><argument_list pos:line="13" pos:column="12">(<argument><expr><name pos:line="13" pos:column="13">SQUID_MAXFD_LIMIT<pos:position pos:line="13" pos:column="30"/></name></expr></argument>)<pos:position pos:line="13" pos:column="31"/></argument_list></call></expr></cpp:if>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">SQUID_MAXFD_LIMIT<pos:position pos:line="15" pos:column="26"/></name> <operator pos:line="15" pos:column="27">&lt;<pos:position pos:line="15" pos:column="31"/></operator> <name pos:line="15" pos:column="29">Squid_MaxFD<pos:position pos:line="15" pos:column="40"/></name></expr>)<pos:position pos:line="15" pos:column="41"/></condition><then pos:line="15" pos:column="41">
        <block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="9">Squid_MaxFD<pos:position pos:line="16" pos:column="20"/></name> <operator pos:line="16" pos:column="21">=<pos:position pos:line="16" pos:column="22"/></operator> <name pos:line="16" pos:column="23">SQUID_MAXFD_LIMIT<pos:position pos:line="16" pos:column="40"/></name></expr>;<pos:position pos:line="16" pos:column="41"/></expr_stmt></block></then></if>

<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif<pos:position pos:line="18" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="20" pos:column="5">/* NOP under non-windows */</comment>
    <decl_stmt><decl><type><name pos:line="21" pos:column="5">int<pos:position pos:line="21" pos:column="8"/></name></type> <name pos:line="21" pos:column="9">WIN32_init_err<pos:position pos:line="21" pos:column="23"/></name><init pos:line="21" pos:column="23">=<expr><literal type="number" pos:line="21" pos:column="24">0<pos:position pos:line="21" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="21" pos:column="26"/></decl_stmt>
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><operator pos:line="22" pos:column="9">(<pos:position pos:line="22" pos:column="10"/></operator><name pos:line="22" pos:column="10">WIN32_init_err<pos:position pos:line="22" pos:column="24"/></name> <operator pos:line="22" pos:column="25">=<pos:position pos:line="22" pos:column="26"/></operator> <call><name pos:line="22" pos:column="27">WIN32_Subsystem_Init<pos:position pos:line="22" pos:column="47"/></name><argument_list pos:line="22" pos:column="47">(<argument><expr><operator pos:line="22" pos:column="48">&amp;<pos:position pos:line="22" pos:column="53"/></operator><name pos:line="22" pos:column="49">argc<pos:position pos:line="22" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="55">&amp;<pos:position pos:line="22" pos:column="60"/></operator><name pos:line="22" pos:column="56">argv<pos:position pos:line="22" pos:column="60"/></name></expr></argument>)<pos:position pos:line="22" pos:column="61"/></argument_list></call><operator pos:line="22" pos:column="61">)<pos:position pos:line="22" pos:column="62"/></operator></expr>)<pos:position pos:line="22" pos:column="63"/></condition><then pos:line="22" pos:column="63">
        <block type="pseudo"><return pos:line="23" pos:column="9">return <expr><name pos:line="23" pos:column="16">WIN32_init_err<pos:position pos:line="23" pos:column="30"/></name></expr>;<pos:position pos:line="23" pos:column="31"/></return></block></then></if>

    <comment type="block" pos:line="25" pos:column="5">/* call mallopt() before anything else */</comment>
<cpp:if pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">if<pos:position pos:line="26" pos:column="4"/></cpp:directive> <expr><name pos:line="26" pos:column="5">HAVE_MALLOPT<pos:position pos:line="26" pos:column="17"/></name></expr></cpp:if>
<cpp:ifdef pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">ifdef<pos:position pos:line="27" pos:column="7"/></cpp:directive> <name pos:line="27" pos:column="8">M_GRAIN<pos:position pos:line="27" pos:column="15"/></name></cpp:ifdef>
    <comment type="block" pos:line="28" pos:column="5">/* Round up all sizes to a multiple of this */</comment>
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">mallopt<pos:position pos:line="29" pos:column="12"/></name><argument_list pos:line="29" pos:column="12">(<argument><expr><name pos:line="29" pos:column="13">M_GRAIN<pos:position pos:line="29" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="22">16<pos:position pos:line="29" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="26"/></expr_stmt>

<cpp:endif pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">endif<pos:position pos:line="31" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">ifdef<pos:position pos:line="32" pos:column="7"/></cpp:directive> <name pos:line="32" pos:column="8">M_MXFAST<pos:position pos:line="32" pos:column="16"/></name></cpp:ifdef>
    <comment type="block" pos:line="33" pos:column="5">/* biggest size that is considered a small block */</comment>
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">mallopt<pos:position pos:line="34" pos:column="12"/></name><argument_list pos:line="34" pos:column="12">(<argument><expr><name pos:line="34" pos:column="13">M_MXFAST<pos:position pos:line="34" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="23">256<pos:position pos:line="34" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="28"/></expr_stmt>

<cpp:endif pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">endif<pos:position pos:line="36" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">ifdef<pos:position pos:line="37" pos:column="7"/></cpp:directive> <name pos:line="37" pos:column="8">M_NBLKS<pos:position pos:line="37" pos:column="15"/></name></cpp:ifdef>
    <comment type="block" pos:line="38" pos:column="5">/* allocate this many small blocks at once */</comment>
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">mallopt<pos:position pos:line="39" pos:column="12"/></name><argument_list pos:line="39" pos:column="12">(<argument><expr><name pos:line="39" pos:column="13">M_NLBLKS<pos:position pos:line="39" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="23">32<pos:position pos:line="39" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="27"/></expr_stmt>

<cpp:endif pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">endif<pos:position pos:line="41" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">endif<pos:position pos:line="42" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="42" pos:column="8">/* HAVE_MALLOPT */</comment>

    <expr_stmt><expr><call><name pos:line="44" pos:column="5">squid_srandom<pos:position pos:line="44" pos:column="18"/></name><argument_list pos:line="44" pos:column="18">(<argument><expr><call><name pos:line="44" pos:column="19">time<pos:position pos:line="44" pos:column="23"/></name><argument_list pos:line="44" pos:column="23">(<argument><expr><name pos:line="44" pos:column="24">NULL<pos:position pos:line="44" pos:column="28"/></name></expr></argument>)<pos:position pos:line="44" pos:column="29"/></argument_list></call></expr></argument>)<pos:position pos:line="44" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="31"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="46" pos:column="5">getCurrentTime<pos:position pos:line="46" pos:column="19"/></name><argument_list pos:line="46" pos:column="19">()<pos:position pos:line="46" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="22"/></expr_stmt>

    <expr_stmt><expr><name pos:line="48" pos:column="5">squid_start<pos:position pos:line="48" pos:column="16"/></name> <operator pos:line="48" pos:column="17">=<pos:position pos:line="48" pos:column="18"/></operator> <name pos:line="48" pos:column="19">current_time<pos:position pos:line="48" pos:column="31"/></name></expr>;<pos:position pos:line="48" pos:column="32"/></expr_stmt>

    <expr_stmt><expr><name pos:line="50" pos:column="5">failure_notify<pos:position pos:line="50" pos:column="19"/></name> <operator pos:line="50" pos:column="20">=<pos:position pos:line="50" pos:column="21"/></operator> <name pos:line="50" pos:column="22">fatal_dump<pos:position pos:line="50" pos:column="32"/></name></expr>;<pos:position pos:line="50" pos:column="33"/></expr_stmt>

<cpp:if pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">if<pos:position pos:line="52" pos:column="4"/></cpp:directive> <expr><name pos:line="52" pos:column="5">USE_WIN32_SERVICE<pos:position pos:line="52" pos:column="22"/></name></expr></cpp:if>

    <expr_stmt><expr><call><name pos:line="54" pos:column="5">WIN32_svcstatusupdate<pos:position pos:line="54" pos:column="26"/></name><argument_list pos:line="54" pos:column="26">(<argument><expr><name pos:line="54" pos:column="27">SERVICE_START_PENDING<pos:position pos:line="54" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="54" pos:column="50">10000<pos:position pos:line="54" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="57"/></expr_stmt>

<cpp:endif pos:line="56" pos:column="1">#<cpp:directive pos:line="56" pos:column="2">endif<pos:position pos:line="56" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="58" pos:column="5">mainParseOptions<pos:position pos:line="58" pos:column="21"/></name><argument_list pos:line="58" pos:column="21">(<argument><expr><name pos:line="58" pos:column="22">argc<pos:position pos:line="58" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="28">argv<pos:position pos:line="58" pos:column="32"/></name></expr></argument>)<pos:position pos:line="58" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="34"/></expr_stmt>

    <if pos:line="60" pos:column="5">if <condition pos:line="60" pos:column="8">(<expr><name pos:line="60" pos:column="9">opt_parse_cfg_only<pos:position pos:line="60" pos:column="27"/></name></expr>)<pos:position pos:line="60" pos:column="28"/></condition><then pos:line="60" pos:column="28"> <block pos:line="60" pos:column="29">{
        <expr_stmt><expr><call><name><name pos:line="61" pos:column="9">Debug<pos:position pos:line="61" pos:column="14"/></name><operator pos:line="61" pos:column="14">::<pos:position pos:line="61" pos:column="16"/></operator><name pos:line="61" pos:column="16">parseOptions<pos:position pos:line="61" pos:column="28"/></name></name><argument_list pos:line="61" pos:column="28">(<argument><expr><literal type="string" pos:line="61" pos:column="29">"ALL,1"<pos:position pos:line="61" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="62" pos:column="6"/></block></then></if>

<cpp:if pos:line="64" pos:column="1">#<cpp:directive pos:line="64" pos:column="2">if<pos:position pos:line="64" pos:column="4"/></cpp:directive> <expr><name pos:line="64" pos:column="5">USE_WIN32_SERVICE<pos:position pos:line="64" pos:column="22"/></name></expr></cpp:if>

    <if pos:line="66" pos:column="5">if <condition pos:line="66" pos:column="8">(<expr><name pos:line="66" pos:column="9">opt_install_service<pos:position pos:line="66" pos:column="28"/></name></expr>)<pos:position pos:line="66" pos:column="29"/></condition><then pos:line="66" pos:column="29"> <block pos:line="66" pos:column="30">{
        <expr_stmt><expr><call><name pos:line="67" pos:column="9">WIN32_InstallService<pos:position pos:line="67" pos:column="29"/></name><argument_list pos:line="67" pos:column="29">()<pos:position pos:line="67" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="32"/></expr_stmt>
        <return pos:line="68" pos:column="9">return <expr><literal type="number" pos:line="68" pos:column="16">0<pos:position pos:line="68" pos:column="17"/></literal></expr>;<pos:position pos:line="68" pos:column="18"/></return>
    }<pos:position pos:line="69" pos:column="6"/></block></then></if>

    <if pos:line="71" pos:column="5">if <condition pos:line="71" pos:column="8">(<expr><name pos:line="71" pos:column="9">opt_remove_service<pos:position pos:line="71" pos:column="27"/></name></expr>)<pos:position pos:line="71" pos:column="28"/></condition><then pos:line="71" pos:column="28"> <block pos:line="71" pos:column="29">{
        <expr_stmt><expr><call><name pos:line="72" pos:column="9">WIN32_RemoveService<pos:position pos:line="72" pos:column="28"/></name><argument_list pos:line="72" pos:column="28">()<pos:position pos:line="72" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="31"/></expr_stmt>
        <return pos:line="73" pos:column="9">return <expr><literal type="number" pos:line="73" pos:column="16">0<pos:position pos:line="73" pos:column="17"/></literal></expr>;<pos:position pos:line="73" pos:column="18"/></return>
    }<pos:position pos:line="74" pos:column="6"/></block></then></if>

    <if pos:line="76" pos:column="5">if <condition pos:line="76" pos:column="8">(<expr><name pos:line="76" pos:column="9">opt_command_line<pos:position pos:line="76" pos:column="25"/></name></expr>)<pos:position pos:line="76" pos:column="26"/></condition><then pos:line="76" pos:column="26"> <block pos:line="76" pos:column="27">{
        <expr_stmt><expr><call><name pos:line="77" pos:column="9">WIN32_SetServiceCommandLine<pos:position pos:line="77" pos:column="36"/></name><argument_list pos:line="77" pos:column="36">()<pos:position pos:line="77" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="39"/></expr_stmt>
        <return pos:line="78" pos:column="9">return <expr><literal type="number" pos:line="78" pos:column="16">0<pos:position pos:line="78" pos:column="17"/></literal></expr>;<pos:position pos:line="78" pos:column="18"/></return>
    }<pos:position pos:line="79" pos:column="6"/></block></then></if>

<cpp:endif pos:line="81" pos:column="1">#<cpp:directive pos:line="81" pos:column="2">endif<pos:position pos:line="81" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="83" pos:column="5">/* parse configuration file
     * note: in "normal" case this used to be called from mainInitialize() */</comment>
    <block pos:line="85" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="86" pos:column="9">int<pos:position pos:line="86" pos:column="12"/></name></type> <name pos:line="86" pos:column="13">parse_err<pos:position pos:line="86" pos:column="22"/></name></decl>;<pos:position pos:line="86" pos:column="23"/></decl_stmt>

        <if pos:line="88" pos:column="9">if <condition pos:line="88" pos:column="12">(<expr><operator pos:line="88" pos:column="13">!<pos:position pos:line="88" pos:column="14"/></operator><name pos:line="88" pos:column="14">ConfigFile<pos:position pos:line="88" pos:column="24"/></name></expr>)<pos:position pos:line="88" pos:column="25"/></condition><then pos:line="88" pos:column="25">
            <block type="pseudo"><expr_stmt><expr><name pos:line="89" pos:column="13">ConfigFile<pos:position pos:line="89" pos:column="23"/></name> <operator pos:line="89" pos:column="24">=<pos:position pos:line="89" pos:column="25"/></operator> <call><name pos:line="89" pos:column="26">xstrdup<pos:position pos:line="89" pos:column="33"/></name><argument_list pos:line="89" pos:column="33">(<argument><expr><name pos:line="89" pos:column="34">DefaultConfigFile<pos:position pos:line="89" pos:column="51"/></name></expr></argument>)<pos:position pos:line="89" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="53"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name pos:line="91" pos:column="9">assert<pos:position pos:line="91" pos:column="15"/></name><argument_list pos:line="91" pos:column="15">(<argument><expr><operator pos:line="91" pos:column="16">!<pos:position pos:line="91" pos:column="17"/></operator><name pos:line="91" pos:column="17">configured_once<pos:position pos:line="91" pos:column="32"/></name></expr></argument>)<pos:position pos:line="91" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="34"/></expr_stmt>

        <expr_stmt><expr><call><name><name pos:line="93" pos:column="9">Mem<pos:position pos:line="93" pos:column="12"/></name><operator pos:line="93" pos:column="12">::<pos:position pos:line="93" pos:column="14"/></operator><name pos:line="93" pos:column="14">Init<pos:position pos:line="93" pos:column="18"/></name></name><argument_list pos:line="93" pos:column="18">()<pos:position pos:line="93" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="21"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="95" pos:column="9">storeFsInit<pos:position pos:line="95" pos:column="20"/></name><argument_list pos:line="95" pos:column="20">()<pos:position pos:line="95" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="23"/></expr_stmt>		<comment type="block" pos:line="95" pos:column="33">/* required for config parsing */</comment>

        <comment type="block" pos:line="97" pos:column="9">/* TODO: call the FS::Clean() in shutdown to do Fs cleanups */</comment>
        <expr_stmt><expr><call><name><name pos:line="98" pos:column="9">Fs<pos:position pos:line="98" pos:column="11"/></name><operator pos:line="98" pos:column="11">::<pos:position pos:line="98" pos:column="13"/></operator><name pos:line="98" pos:column="13">Init<pos:position pos:line="98" pos:column="17"/></name></name><argument_list pos:line="98" pos:column="17">()<pos:position pos:line="98" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="20"/></expr_stmt>

        <comment type="block" pos:line="100" pos:column="9">/* May not be needed for parsing, have not audited for such */</comment>
        <expr_stmt><expr><call><name><name pos:line="101" pos:column="9">DiskIOModule<pos:position pos:line="101" pos:column="21"/></name><operator pos:line="101" pos:column="21">::<pos:position pos:line="101" pos:column="23"/></operator><name pos:line="101" pos:column="23">SetupAllModules<pos:position pos:line="101" pos:column="38"/></name></name><argument_list pos:line="101" pos:column="38">()<pos:position pos:line="101" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="41"/></expr_stmt>

        <comment type="block" pos:line="103" pos:column="9">/* Shouldn't be needed for config parsing, but have not audited for such */</comment>
        <expr_stmt><expr><call><name><name pos:line="104" pos:column="9">StoreFileSystem<pos:position pos:line="104" pos:column="24"/></name><operator pos:line="104" pos:column="24">::<pos:position pos:line="104" pos:column="26"/></operator><name pos:line="104" pos:column="26">SetupAllFs<pos:position pos:line="104" pos:column="36"/></name></name><argument_list pos:line="104" pos:column="36">()<pos:position pos:line="104" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="39"/></expr_stmt>

        <comment type="block" pos:line="106" pos:column="9">/* we may want the parsing process to set this up in the future */</comment>
        <expr_stmt><expr><call><name><name pos:line="107" pos:column="9">Store<pos:position pos:line="107" pos:column="14"/></name><operator pos:line="107" pos:column="14">::<pos:position pos:line="107" pos:column="16"/></operator><name pos:line="107" pos:column="16">Root<pos:position pos:line="107" pos:column="20"/></name></name><argument_list pos:line="107" pos:column="20">(<argument><expr><operator pos:line="107" pos:column="21">new<pos:position pos:line="107" pos:column="24"/></operator> <name pos:line="107" pos:column="25">StoreController<pos:position pos:line="107" pos:column="40"/></name></expr></argument>)<pos:position pos:line="107" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="108" pos:column="9">Auth<pos:position pos:line="108" pos:column="13"/></name><operator pos:line="108" pos:column="13">::<pos:position pos:line="108" pos:column="15"/></operator><name pos:line="108" pos:column="15">Init<pos:position pos:line="108" pos:column="19"/></name></name><argument_list pos:line="108" pos:column="19">()<pos:position pos:line="108" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="22"/></expr_stmt>      <comment type="block" pos:line="108" pos:column="28">/* required for config parsing. NOP if !USE_AUTH */</comment>
        <expr_stmt><expr><call><name><name pos:line="109" pos:column="9">Ip<pos:position pos:line="109" pos:column="11"/></name><operator pos:line="109" pos:column="11">::<pos:position pos:line="109" pos:column="13"/></operator><name pos:line="109" pos:column="13">ProbeTransport<pos:position pos:line="109" pos:column="27"/></name></name><argument_list pos:line="109" pos:column="27">()<pos:position pos:line="109" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="30"/></expr_stmt> <comment type="line" pos:line="109" pos:column="31">// determine IPv4 or IPv6 capabilities before parsing.</comment>

        <expr_stmt><expr><call><name><name pos:line="111" pos:column="9">Format<pos:position pos:line="111" pos:column="15"/></name><operator pos:line="111" pos:column="15">::<pos:position pos:line="111" pos:column="17"/></operator><name pos:line="111" pos:column="17">Token<pos:position pos:line="111" pos:column="22"/></name><operator pos:line="111" pos:column="22">::<pos:position pos:line="111" pos:column="24"/></operator><name pos:line="111" pos:column="24">Init<pos:position pos:line="111" pos:column="28"/></name></name><argument_list pos:line="111" pos:column="28">()<pos:position pos:line="111" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="31"/></expr_stmt> <comment type="line" pos:line="111" pos:column="32">// XXX: temporary. Use a runners registry of pre-parse runners instead.</comment>

        <expr_stmt><expr><name pos:line="113" pos:column="9">parse_err<pos:position pos:line="113" pos:column="18"/></name> <operator pos:line="113" pos:column="19">=<pos:position pos:line="113" pos:column="20"/></operator> <call><name pos:line="113" pos:column="21">parseConfigFile<pos:position pos:line="113" pos:column="36"/></name><argument_list pos:line="113" pos:column="36">(<argument><expr><name pos:line="113" pos:column="37">ConfigFile<pos:position pos:line="113" pos:column="47"/></name></expr></argument>)<pos:position pos:line="113" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="49"/></expr_stmt>

        <expr_stmt><expr><call><name><name pos:line="115" pos:column="9">Mem<pos:position pos:line="115" pos:column="12"/></name><operator pos:line="115" pos:column="12">::<pos:position pos:line="115" pos:column="14"/></operator><name pos:line="115" pos:column="14">Report<pos:position pos:line="115" pos:column="20"/></name></name><argument_list pos:line="115" pos:column="20">()<pos:position pos:line="115" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="23"/></expr_stmt>

        <if pos:line="117" pos:column="9">if <condition pos:line="117" pos:column="12">(<expr><name pos:line="117" pos:column="13">opt_parse_cfg_only<pos:position pos:line="117" pos:column="31"/></name> <operator pos:line="117" pos:column="32">||<pos:position pos:line="117" pos:column="34"/></operator> <name pos:line="117" pos:column="35">parse_err<pos:position pos:line="117" pos:column="44"/></name> <operator pos:line="117" pos:column="45">&gt;<pos:position pos:line="117" pos:column="49"/></operator> <literal type="number" pos:line="117" pos:column="47">0<pos:position pos:line="117" pos:column="48"/></literal></expr>)<pos:position pos:line="117" pos:column="49"/></condition><then pos:line="117" pos:column="49">
            <block type="pseudo"><return pos:line="118" pos:column="13">return <expr><name pos:line="118" pos:column="20">parse_err<pos:position pos:line="118" pos:column="29"/></name></expr>;<pos:position pos:line="118" pos:column="30"/></return></block></then></if>
    }<pos:position pos:line="119" pos:column="6"/></block>
    <expr_stmt><expr><call><name pos:line="120" pos:column="5">setUmask<pos:position pos:line="120" pos:column="13"/></name><argument_list pos:line="120" pos:column="13">(<argument><expr><name><name pos:line="120" pos:column="14">Config<pos:position pos:line="120" pos:column="20"/></name><operator pos:line="120" pos:column="20">.<pos:position pos:line="120" pos:column="21"/></operator><name pos:line="120" pos:column="21">umask<pos:position pos:line="120" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="120" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="28"/></expr_stmt>
    <if pos:line="121" pos:column="5">if <condition pos:line="121" pos:column="8">(<expr><operator pos:line="121" pos:column="9">-<pos:position pos:line="121" pos:column="10"/></operator><literal type="number" pos:line="121" pos:column="10">1<pos:position pos:line="121" pos:column="11"/></literal> <operator pos:line="121" pos:column="12">==<pos:position pos:line="121" pos:column="14"/></operator> <name pos:line="121" pos:column="15">opt_send_signal<pos:position pos:line="121" pos:column="30"/></name></expr>)<pos:position pos:line="121" pos:column="31"/></condition><then pos:line="121" pos:column="31">
        <block type="pseudo"><if pos:line="122" pos:column="9">if <condition pos:line="122" pos:column="12">(<expr><call><name pos:line="122" pos:column="13">checkRunningPid<pos:position pos:line="122" pos:column="28"/></name><argument_list pos:line="122" pos:column="28">()<pos:position pos:line="122" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="122" pos:column="31"/></condition><then pos:line="122" pos:column="31">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="123" pos:column="13">exit<pos:position pos:line="123" pos:column="17"/></name><argument_list pos:line="123" pos:column="17">(<argument><expr><literal type="number" pos:line="123" pos:column="18">0<pos:position pos:line="123" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="123" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="21"/></expr_stmt></block></then></if></block></then></if>

<cpp:if pos:line="125" pos:column="1">#<cpp:directive pos:line="125" pos:column="2">if<pos:position pos:line="125" pos:column="4"/></cpp:directive> <expr><name pos:line="125" pos:column="5">TEST_ACCESS<pos:position pos:line="125" pos:column="16"/></name></expr></cpp:if>

    <expr_stmt><expr><call><name pos:line="127" pos:column="5">comm_init<pos:position pos:line="127" pos:column="14"/></name><argument_list pos:line="127" pos:column="14">()<pos:position pos:line="127" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="17"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="129" pos:column="5">mainInitialize<pos:position pos:line="129" pos:column="19"/></name><argument_list pos:line="129" pos:column="19">()<pos:position pos:line="129" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="22"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="131" pos:column="5">test_access<pos:position pos:line="131" pos:column="16"/></name><argument_list pos:line="131" pos:column="16">()<pos:position pos:line="131" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="19"/></expr_stmt>

    <return pos:line="133" pos:column="5">return <expr><literal type="number" pos:line="133" pos:column="12">0<pos:position pos:line="133" pos:column="13"/></literal></expr>;<pos:position pos:line="133" pos:column="14"/></return>

<cpp:endif pos:line="135" pos:column="1">#<cpp:directive pos:line="135" pos:column="2">endif<pos:position pos:line="135" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="137" pos:column="5">/* send signal to running copy and exit */</comment>
    <if pos:line="138" pos:column="5">if <condition pos:line="138" pos:column="8">(<expr><name pos:line="138" pos:column="9">opt_send_signal<pos:position pos:line="138" pos:column="24"/></name> <operator pos:line="138" pos:column="25">!=<pos:position pos:line="138" pos:column="27"/></operator> <operator pos:line="138" pos:column="28">-<pos:position pos:line="138" pos:column="29"/></operator><literal type="number" pos:line="138" pos:column="29">1<pos:position pos:line="138" pos:column="30"/></literal></expr>)<pos:position pos:line="138" pos:column="31"/></condition><then pos:line="138" pos:column="31"> <block pos:line="138" pos:column="32">{
        <comment type="block" pos:line="139" pos:column="9">/* chroot if configured to run inside chroot */</comment>

        <if pos:line="141" pos:column="9">if <condition pos:line="141" pos:column="12">(<expr><name><name pos:line="141" pos:column="13">Config<pos:position pos:line="141" pos:column="19"/></name><operator pos:line="141" pos:column="19">.<pos:position pos:line="141" pos:column="20"/></operator><name pos:line="141" pos:column="20">chroot_dir<pos:position pos:line="141" pos:column="30"/></name></name></expr>)<pos:position pos:line="141" pos:column="31"/></condition><then pos:line="141" pos:column="31"> <block pos:line="141" pos:column="32">{
            <if pos:line="142" pos:column="13">if <condition pos:line="142" pos:column="16">(<expr><call><name pos:line="142" pos:column="17">chroot<pos:position pos:line="142" pos:column="23"/></name><argument_list pos:line="142" pos:column="23">(<argument><expr><name><name pos:line="142" pos:column="24">Config<pos:position pos:line="142" pos:column="30"/></name><operator pos:line="142" pos:column="30">.<pos:position pos:line="142" pos:column="31"/></operator><name pos:line="142" pos:column="31">chroot_dir<pos:position pos:line="142" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="142" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="142" pos:column="43"/></condition><then pos:line="142" pos:column="43">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="143" pos:column="17">fatal<pos:position pos:line="143" pos:column="22"/></name><argument_list pos:line="143" pos:column="22">(<argument><expr><literal type="string" pos:line="143" pos:column="23">"failed to chroot"<pos:position pos:line="143" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="143" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="43"/></expr_stmt></block></then></if>

            <expr_stmt><expr><call><name pos:line="145" pos:column="13">no_suid<pos:position pos:line="145" pos:column="20"/></name><argument_list pos:line="145" pos:column="20">()<pos:position pos:line="145" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="23"/></expr_stmt>
        }<pos:position pos:line="146" pos:column="10"/></block></then> <else pos:line="146" pos:column="11">else <block pos:line="146" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="147" pos:column="13">leave_suid<pos:position pos:line="147" pos:column="23"/></name><argument_list pos:line="147" pos:column="23">()<pos:position pos:line="147" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="26"/></expr_stmt>
        }<pos:position pos:line="148" pos:column="10"/></block></else></if>

        <expr_stmt><expr><call><name pos:line="150" pos:column="9">sendSignal<pos:position pos:line="150" pos:column="19"/></name><argument_list pos:line="150" pos:column="19">()<pos:position pos:line="150" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="22"/></expr_stmt>
        <comment type="block" pos:line="151" pos:column="9">/* NOTREACHED */</comment>
    }<pos:position pos:line="152" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="154" pos:column="5">debugs<pos:position pos:line="154" pos:column="11"/></name><argument_list pos:line="154" pos:column="11">(<argument><expr><literal type="number" pos:line="154" pos:column="12">1<pos:position pos:line="154" pos:column="13"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="154" pos:column="14">2<pos:position pos:line="154" pos:column="15"/></literal></expr></argument>, <argument><expr><name pos:line="154" pos:column="17">HERE<pos:position pos:line="154" pos:column="21"/></name> <operator pos:line="154" pos:column="22">&lt;&lt;<pos:position pos:line="154" pos:column="30"/></operator> <literal type="string" pos:line="154" pos:column="25">"Doing post-config initialization\n"<pos:position pos:line="154" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="154" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="63"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="155" pos:column="5">leave_suid<pos:position pos:line="155" pos:column="15"/></name><argument_list pos:line="155" pos:column="15">()<pos:position pos:line="155" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="156" pos:column="5">ActivateRegistered<pos:position pos:line="156" pos:column="23"/></name><argument_list pos:line="156" pos:column="23">(<argument><expr><name pos:line="156" pos:column="24">rrFinalizeConfig<pos:position pos:line="156" pos:column="40"/></name></expr></argument>)<pos:position pos:line="156" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="157" pos:column="5">ActivateRegistered<pos:position pos:line="157" pos:column="23"/></name><argument_list pos:line="157" pos:column="23">(<argument><expr><name pos:line="157" pos:column="24">rrClaimMemoryNeeds<pos:position pos:line="157" pos:column="42"/></name></expr></argument>)<pos:position pos:line="157" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="158" pos:column="5">ActivateRegistered<pos:position pos:line="158" pos:column="23"/></name><argument_list pos:line="158" pos:column="23">(<argument><expr><name pos:line="158" pos:column="24">rrAfterConfig<pos:position pos:line="158" pos:column="37"/></name></expr></argument>)<pos:position pos:line="158" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="158" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="159" pos:column="5">enter_suid<pos:position pos:line="159" pos:column="15"/></name><argument_list pos:line="159" pos:column="15">()<pos:position pos:line="159" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="159" pos:column="18"/></expr_stmt>

    <if pos:line="161" pos:column="5">if <condition pos:line="161" pos:column="8">(<expr><operator pos:line="161" pos:column="9">!<pos:position pos:line="161" pos:column="10"/></operator><name pos:line="161" pos:column="10">opt_no_daemon<pos:position pos:line="161" pos:column="23"/></name> <operator pos:line="161" pos:column="24">&amp;&amp;<pos:position pos:line="161" pos:column="34"/></operator> <name><name pos:line="161" pos:column="27">Config<pos:position pos:line="161" pos:column="33"/></name><operator pos:line="161" pos:column="33">.<pos:position pos:line="161" pos:column="34"/></operator><name pos:line="161" pos:column="34">workers<pos:position pos:line="161" pos:column="41"/></name></name> <operator pos:line="161" pos:column="42">&gt;<pos:position pos:line="161" pos:column="46"/></operator> <literal type="number" pos:line="161" pos:column="44">0<pos:position pos:line="161" pos:column="45"/></literal></expr>)<pos:position pos:line="161" pos:column="46"/></condition><then pos:line="161" pos:column="46">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="162" pos:column="9">watch_child<pos:position pos:line="162" pos:column="20"/></name><argument_list pos:line="162" pos:column="20">(<argument><expr><name pos:line="162" pos:column="21">argv<pos:position pos:line="162" pos:column="25"/></name></expr></argument>)<pos:position pos:line="162" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="27"/></expr_stmt></block></then></if>

    <if pos:line="164" pos:column="5">if <condition pos:line="164" pos:column="8">(<expr><name pos:line="164" pos:column="9">opt_create_swap_dirs<pos:position pos:line="164" pos:column="29"/></name></expr>)<pos:position pos:line="164" pos:column="30"/></condition><then pos:line="164" pos:column="30"> <block pos:line="164" pos:column="31">{
        <comment type="block" pos:line="165" pos:column="9">/* chroot if configured to run inside chroot */</comment>

        <if pos:line="167" pos:column="9">if <condition pos:line="167" pos:column="12">(<expr><name><name pos:line="167" pos:column="13">Config<pos:position pos:line="167" pos:column="19"/></name><operator pos:line="167" pos:column="19">.<pos:position pos:line="167" pos:column="20"/></operator><name pos:line="167" pos:column="20">chroot_dir<pos:position pos:line="167" pos:column="30"/></name></name> <operator pos:line="167" pos:column="31">&amp;&amp;<pos:position pos:line="167" pos:column="41"/></operator> <call><name pos:line="167" pos:column="34">chroot<pos:position pos:line="167" pos:column="40"/></name><argument_list pos:line="167" pos:column="40">(<argument><expr><name><name pos:line="167" pos:column="41">Config<pos:position pos:line="167" pos:column="47"/></name><operator pos:line="167" pos:column="47">.<pos:position pos:line="167" pos:column="48"/></operator><name pos:line="167" pos:column="48">chroot_dir<pos:position pos:line="167" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="167" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="167" pos:column="60"/></condition><then pos:line="167" pos:column="60"> <block pos:line="167" pos:column="61">{
            <expr_stmt><expr><call><name pos:line="168" pos:column="13">fatal<pos:position pos:line="168" pos:column="18"/></name><argument_list pos:line="168" pos:column="18">(<argument><expr><literal type="string" pos:line="168" pos:column="19">"failed to chroot"<pos:position pos:line="168" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="168" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="168" pos:column="39"/></expr_stmt>
        }<pos:position pos:line="169" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="171" pos:column="9">setEffectiveUser<pos:position pos:line="171" pos:column="25"/></name><argument_list pos:line="171" pos:column="25">()<pos:position pos:line="171" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="171" pos:column="28"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="172" pos:column="9">debugs<pos:position pos:line="172" pos:column="15"/></name><argument_list pos:line="172" pos:column="15">(<argument><expr><literal type="number" pos:line="172" pos:column="16">0<pos:position pos:line="172" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="172" pos:column="19">DBG_CRITICAL<pos:position pos:line="172" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="172" pos:column="33">"Creating missing swap directories"<pos:position pos:line="172" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="172" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="172" pos:column="70"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="173" pos:column="9">Store<pos:position pos:line="173" pos:column="14"/></name><operator pos:line="173" pos:column="14">::<pos:position pos:line="173" pos:column="16"/></operator><name pos:line="173" pos:column="16">Root<pos:position pos:line="173" pos:column="20"/></name></name><argument_list pos:line="173" pos:column="20">()<pos:position pos:line="173" pos:column="22"/></argument_list></call><operator pos:line="173" pos:column="22">.<pos:position pos:line="173" pos:column="23"/></operator><call><name pos:line="173" pos:column="23">create<pos:position pos:line="173" pos:column="29"/></name><argument_list pos:line="173" pos:column="29">()<pos:position pos:line="173" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="173" pos:column="32"/></expr_stmt>

        <return pos:line="175" pos:column="9">return <expr><literal type="number" pos:line="175" pos:column="16">0<pos:position pos:line="175" pos:column="17"/></literal></expr>;<pos:position pos:line="175" pos:column="18"/></return>
    }<pos:position pos:line="176" pos:column="6"/></block></then></if>

    <if pos:line="178" pos:column="5">if <condition pos:line="178" pos:column="8">(<expr><call><name pos:line="178" pos:column="9">IamPrimaryProcess<pos:position pos:line="178" pos:column="26"/></name><argument_list pos:line="178" pos:column="26">()<pos:position pos:line="178" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="178" pos:column="29"/></condition><then pos:line="178" pos:column="29">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="179" pos:column="9">CpuAffinityCheck<pos:position pos:line="179" pos:column="25"/></name><argument_list pos:line="179" pos:column="25">()<pos:position pos:line="179" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="179" pos:column="28"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="180" pos:column="5">CpuAffinityInit<pos:position pos:line="180" pos:column="20"/></name><argument_list pos:line="180" pos:column="20">()<pos:position pos:line="180" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="180" pos:column="23"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="182" pos:column="5">setMaxFD<pos:position pos:line="182" pos:column="13"/></name><argument_list pos:line="182" pos:column="13">()<pos:position pos:line="182" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="182" pos:column="16"/></expr_stmt>

    <comment type="block" pos:line="184" pos:column="5">/* init comm module */</comment>
    <expr_stmt><expr><call><name pos:line="185" pos:column="5">comm_init<pos:position pos:line="185" pos:column="14"/></name><argument_list pos:line="185" pos:column="14">()<pos:position pos:line="185" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="185" pos:column="17"/></expr_stmt>

    <if pos:line="187" pos:column="5">if <condition pos:line="187" pos:column="8">(<expr><name pos:line="187" pos:column="9">opt_no_daemon<pos:position pos:line="187" pos:column="22"/></name></expr>)<pos:position pos:line="187" pos:column="23"/></condition><then pos:line="187" pos:column="23"> <block pos:line="187" pos:column="24">{
        <comment type="block" pos:line="188" pos:column="9">/* we have to init fdstat here. */</comment>
        <expr_stmt><expr><call><name pos:line="189" pos:column="9">fd_open<pos:position pos:line="189" pos:column="16"/></name><argument_list pos:line="189" pos:column="16">(<argument><expr><literal type="number" pos:line="189" pos:column="17">0<pos:position pos:line="189" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="189" pos:column="20">FD_LOG<pos:position pos:line="189" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="189" pos:column="28">"stdin"<pos:position pos:line="189" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="189" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="189" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="190" pos:column="9">fd_open<pos:position pos:line="190" pos:column="16"/></name><argument_list pos:line="190" pos:column="16">(<argument><expr><literal type="number" pos:line="190" pos:column="17">1<pos:position pos:line="190" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="190" pos:column="20">FD_LOG<pos:position pos:line="190" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="190" pos:column="28">"stdout"<pos:position pos:line="190" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="190" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="190" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="191" pos:column="9">fd_open<pos:position pos:line="191" pos:column="16"/></name><argument_list pos:line="191" pos:column="16">(<argument><expr><literal type="number" pos:line="191" pos:column="17">2<pos:position pos:line="191" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="191" pos:column="20">FD_LOG<pos:position pos:line="191" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="191" pos:column="28">"stderr"<pos:position pos:line="191" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="191" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="191" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="192" pos:column="6"/></block></then></if>

<cpp:if pos:line="194" pos:column="1">#<cpp:directive pos:line="194" pos:column="2">if<pos:position pos:line="194" pos:column="4"/></cpp:directive> <expr><name pos:line="194" pos:column="5">USE_WIN32_SERVICE<pos:position pos:line="194" pos:column="22"/></name></expr></cpp:if>

    <expr_stmt><expr><call><name pos:line="196" pos:column="5">WIN32_svcstatusupdate<pos:position pos:line="196" pos:column="26"/></name><argument_list pos:line="196" pos:column="26">(<argument><expr><name pos:line="196" pos:column="27">SERVICE_START_PENDING<pos:position pos:line="196" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="196" pos:column="50">10000<pos:position pos:line="196" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="196" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="196" pos:column="57"/></expr_stmt>

<cpp:endif pos:line="198" pos:column="1">#<cpp:directive pos:line="198" pos:column="2">endif<pos:position pos:line="198" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="200" pos:column="5">mainInitialize<pos:position pos:line="200" pos:column="19"/></name><argument_list pos:line="200" pos:column="19">()<pos:position pos:line="200" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="200" pos:column="22"/></expr_stmt>

<cpp:if pos:line="202" pos:column="1">#<cpp:directive pos:line="202" pos:column="2">if<pos:position pos:line="202" pos:column="4"/></cpp:directive> <expr><name pos:line="202" pos:column="5">USE_WIN32_SERVICE<pos:position pos:line="202" pos:column="22"/></name></expr></cpp:if>

    <expr_stmt><expr><call><name pos:line="204" pos:column="5">WIN32_svcstatusupdate<pos:position pos:line="204" pos:column="26"/></name><argument_list pos:line="204" pos:column="26">(<argument><expr><name pos:line="204" pos:column="27">SERVICE_RUNNING<pos:position pos:line="204" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="204" pos:column="44">0<pos:position pos:line="204" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="204" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="204" pos:column="47"/></expr_stmt>

<cpp:endif pos:line="206" pos:column="1">#<cpp:directive pos:line="206" pos:column="2">endif<pos:position pos:line="206" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="208" pos:column="5">/* main loop */</comment>
    <decl_stmt><decl><type><name pos:line="209" pos:column="5">EventLoop<pos:position pos:line="209" pos:column="14"/></name></type> <name pos:line="209" pos:column="15">mainLoop<pos:position pos:line="209" pos:column="23"/></name></decl>;<pos:position pos:line="209" pos:column="24"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="211" pos:column="5">SignalEngine<pos:position pos:line="211" pos:column="17"/></name></type> <name pos:line="211" pos:column="18">signalEngine<pos:position pos:line="211" pos:column="30"/></name><argument_list pos:line="211" pos:column="30">(<argument><expr><name pos:line="211" pos:column="31">mainLoop<pos:position pos:line="211" pos:column="39"/></name></expr></argument>)<pos:position pos:line="211" pos:column="40"/></argument_list></decl>;<pos:position pos:line="211" pos:column="41"/></decl_stmt>

    <expr_stmt><expr><call><name><name pos:line="213" pos:column="5">mainLoop<pos:position pos:line="213" pos:column="13"/></name><operator pos:line="213" pos:column="13">.<pos:position pos:line="213" pos:column="14"/></operator><name pos:line="213" pos:column="14">registerEngine<pos:position pos:line="213" pos:column="28"/></name></name><argument_list pos:line="213" pos:column="28">(<argument><expr><operator pos:line="213" pos:column="29">&amp;<pos:position pos:line="213" pos:column="34"/></operator><name pos:line="213" pos:column="30">signalEngine<pos:position pos:line="213" pos:column="42"/></name></expr></argument>)<pos:position pos:line="213" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="213" pos:column="44"/></expr_stmt>

    <comment type="block" pos:line="215" pos:column="5">/* TODO: stop requiring the singleton here */</comment>
    <expr_stmt><expr><call><name><name pos:line="216" pos:column="5">mainLoop<pos:position pos:line="216" pos:column="13"/></name><operator pos:line="216" pos:column="13">.<pos:position pos:line="216" pos:column="14"/></operator><name pos:line="216" pos:column="14">registerEngine<pos:position pos:line="216" pos:column="28"/></name></name><argument_list pos:line="216" pos:column="28">(<argument><expr><call><name><name pos:line="216" pos:column="29">EventScheduler<pos:position pos:line="216" pos:column="43"/></name><operator pos:line="216" pos:column="43">::<pos:position pos:line="216" pos:column="45"/></operator><name pos:line="216" pos:column="45">GetInstance<pos:position pos:line="216" pos:column="56"/></name></name><argument_list pos:line="216" pos:column="56">()<pos:position pos:line="216" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="216" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="216" pos:column="60"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="218" pos:column="5">StoreRootEngine<pos:position pos:line="218" pos:column="20"/></name></type> <name pos:line="218" pos:column="21">store_engine<pos:position pos:line="218" pos:column="33"/></name></decl>;<pos:position pos:line="218" pos:column="34"/></decl_stmt>

    <expr_stmt><expr><call><name><name pos:line="220" pos:column="5">mainLoop<pos:position pos:line="220" pos:column="13"/></name><operator pos:line="220" pos:column="13">.<pos:position pos:line="220" pos:column="14"/></operator><name pos:line="220" pos:column="14">registerEngine<pos:position pos:line="220" pos:column="28"/></name></name><argument_list pos:line="220" pos:column="28">(<argument><expr><operator pos:line="220" pos:column="29">&amp;<pos:position pos:line="220" pos:column="34"/></operator><name pos:line="220" pos:column="30">store_engine<pos:position pos:line="220" pos:column="42"/></name></expr></argument>)<pos:position pos:line="220" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="220" pos:column="44"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="222" pos:column="5">CommSelectEngine<pos:position pos:line="222" pos:column="21"/></name></type> <name pos:line="222" pos:column="22">comm_engine<pos:position pos:line="222" pos:column="33"/></name></decl>;<pos:position pos:line="222" pos:column="34"/></decl_stmt>

    <expr_stmt><expr><call><name><name pos:line="224" pos:column="5">mainLoop<pos:position pos:line="224" pos:column="13"/></name><operator pos:line="224" pos:column="13">.<pos:position pos:line="224" pos:column="14"/></operator><name pos:line="224" pos:column="14">registerEngine<pos:position pos:line="224" pos:column="28"/></name></name><argument_list pos:line="224" pos:column="28">(<argument><expr><operator pos:line="224" pos:column="29">&amp;<pos:position pos:line="224" pos:column="34"/></operator><name pos:line="224" pos:column="30">comm_engine<pos:position pos:line="224" pos:column="41"/></name></expr></argument>)<pos:position pos:line="224" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="224" pos:column="43"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="226" pos:column="5">mainLoop<pos:position pos:line="226" pos:column="13"/></name><operator pos:line="226" pos:column="13">.<pos:position pos:line="226" pos:column="14"/></operator><name pos:line="226" pos:column="14">setPrimaryEngine<pos:position pos:line="226" pos:column="30"/></name></name><argument_list pos:line="226" pos:column="30">(<argument><expr><operator pos:line="226" pos:column="31">&amp;<pos:position pos:line="226" pos:column="36"/></operator><name pos:line="226" pos:column="32">comm_engine<pos:position pos:line="226" pos:column="43"/></name></expr></argument>)<pos:position pos:line="226" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="226" pos:column="45"/></expr_stmt>

    <comment type="block" pos:line="228" pos:column="5">/* use the standard time service */</comment>
    <decl_stmt><decl><type><name pos:line="229" pos:column="5">TimeEngine<pos:position pos:line="229" pos:column="15"/></name></type> <name pos:line="229" pos:column="16">time_engine<pos:position pos:line="229" pos:column="27"/></name></decl>;<pos:position pos:line="229" pos:column="28"/></decl_stmt>

    <expr_stmt><expr><call><name><name pos:line="231" pos:column="5">mainLoop<pos:position pos:line="231" pos:column="13"/></name><operator pos:line="231" pos:column="13">.<pos:position pos:line="231" pos:column="14"/></operator><name pos:line="231" pos:column="14">setTimeService<pos:position pos:line="231" pos:column="28"/></name></name><argument_list pos:line="231" pos:column="28">(<argument><expr><operator pos:line="231" pos:column="29">&amp;<pos:position pos:line="231" pos:column="34"/></operator><name pos:line="231" pos:column="30">time_engine<pos:position pos:line="231" pos:column="41"/></name></expr></argument>)<pos:position pos:line="231" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="231" pos:column="43"/></expr_stmt>

    <if pos:line="233" pos:column="5">if <condition pos:line="233" pos:column="8">(<expr><call><name pos:line="233" pos:column="9">IamCoordinatorProcess<pos:position pos:line="233" pos:column="30"/></name><argument_list pos:line="233" pos:column="30">()<pos:position pos:line="233" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="233" pos:column="33"/></condition><then pos:line="233" pos:column="33">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="234" pos:column="9">AsyncJob<pos:position pos:line="234" pos:column="17"/></name><operator pos:line="234" pos:column="17">::<pos:position pos:line="234" pos:column="19"/></operator><name pos:line="234" pos:column="19">Start<pos:position pos:line="234" pos:column="24"/></name></name><argument_list pos:line="234" pos:column="24">(<argument><expr><call><name><name pos:line="234" pos:column="25">Ipc<pos:position pos:line="234" pos:column="28"/></name><operator pos:line="234" pos:column="28">::<pos:position pos:line="234" pos:column="30"/></operator><name pos:line="234" pos:column="30">Coordinator<pos:position pos:line="234" pos:column="41"/></name><operator pos:line="234" pos:column="41">::<pos:position pos:line="234" pos:column="43"/></operator><name pos:line="234" pos:column="43">Instance<pos:position pos:line="234" pos:column="51"/></name></name><argument_list pos:line="234" pos:column="51">()<pos:position pos:line="234" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="234" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="234" pos:column="55"/></expr_stmt></block></then>
    <elseif pos:line="235" pos:column="5">else <if pos:line="235" pos:column="10">if <condition pos:line="235" pos:column="13">(<expr><call><name pos:line="235" pos:column="14">UsingSmp<pos:position pos:line="235" pos:column="22"/></name><argument_list pos:line="235" pos:column="22">()<pos:position pos:line="235" pos:column="24"/></argument_list></call> <operator pos:line="235" pos:column="25">&amp;&amp;<pos:position pos:line="235" pos:column="35"/></operator> <operator pos:line="235" pos:column="28">(<pos:position pos:line="235" pos:column="29"/></operator><call><name pos:line="235" pos:column="29">IamWorkerProcess<pos:position pos:line="235" pos:column="45"/></name><argument_list pos:line="235" pos:column="45">()<pos:position pos:line="235" pos:column="47"/></argument_list></call> <operator pos:line="235" pos:column="48">||<pos:position pos:line="235" pos:column="50"/></operator> <call><name pos:line="235" pos:column="51">IamDiskProcess<pos:position pos:line="235" pos:column="65"/></name><argument_list pos:line="235" pos:column="65">()<pos:position pos:line="235" pos:column="67"/></argument_list></call><operator pos:line="235" pos:column="67">)<pos:position pos:line="235" pos:column="68"/></operator></expr>)<pos:position pos:line="235" pos:column="69"/></condition><then pos:line="235" pos:column="69">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="236" pos:column="9">AsyncJob<pos:position pos:line="236" pos:column="17"/></name><operator pos:line="236" pos:column="17">::<pos:position pos:line="236" pos:column="19"/></operator><name pos:line="236" pos:column="19">Start<pos:position pos:line="236" pos:column="24"/></name></name><argument_list pos:line="236" pos:column="24">(<argument><expr><operator pos:line="236" pos:column="25">new<pos:position pos:line="236" pos:column="28"/></operator> <name><name pos:line="236" pos:column="29">Ipc<pos:position pos:line="236" pos:column="32"/></name><operator pos:line="236" pos:column="32">::<pos:position pos:line="236" pos:column="34"/></operator><name pos:line="236" pos:column="34">Strand<pos:position pos:line="236" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="236" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="236" pos:column="42"/></expr_stmt></block></then></if></elseif></if>

    <comment type="block" pos:line="238" pos:column="5">/* at this point we are finished the synchronous startup. */</comment>
    <expr_stmt><expr><name pos:line="239" pos:column="5">starting_up<pos:position pos:line="239" pos:column="16"/></name> <operator pos:line="239" pos:column="17">=<pos:position pos:line="239" pos:column="18"/></operator> <literal type="number" pos:line="239" pos:column="19">0<pos:position pos:line="239" pos:column="20"/></literal></expr>;<pos:position pos:line="239" pos:column="21"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="241" pos:column="5">mainLoop<pos:position pos:line="241" pos:column="13"/></name><operator pos:line="241" pos:column="13">.<pos:position pos:line="241" pos:column="14"/></operator><name pos:line="241" pos:column="14">run<pos:position pos:line="241" pos:column="17"/></name></name><argument_list pos:line="241" pos:column="17">()<pos:position pos:line="241" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="241" pos:column="20"/></expr_stmt>

    <if pos:line="243" pos:column="5">if <condition pos:line="243" pos:column="8">(<expr><name><name pos:line="243" pos:column="9">mainLoop<pos:position pos:line="243" pos:column="17"/></name><operator pos:line="243" pos:column="17">.<pos:position pos:line="243" pos:column="18"/></operator><name pos:line="243" pos:column="18">errcount<pos:position pos:line="243" pos:column="26"/></name></name> <operator pos:line="243" pos:column="27">==<pos:position pos:line="243" pos:column="29"/></operator> <literal type="number" pos:line="243" pos:column="30">10<pos:position pos:line="243" pos:column="32"/></literal></expr>)<pos:position pos:line="243" pos:column="33"/></condition><then pos:line="243" pos:column="33">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="244" pos:column="9">fatal_dump<pos:position pos:line="244" pos:column="19"/></name><argument_list pos:line="244" pos:column="19">(<argument><expr><literal type="string" pos:line="244" pos:column="20">"Event loop exited with failure."<pos:position pos:line="244" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="244" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="244" pos:column="55"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="246" pos:column="5">/* shutdown squid now */</comment>
    <expr_stmt><expr><call><name pos:line="247" pos:column="5">SquidShutdown<pos:position pos:line="247" pos:column="18"/></name><argument_list pos:line="247" pos:column="18">()<pos:position pos:line="247" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="247" pos:column="21"/></expr_stmt>

    <comment type="block" pos:line="249" pos:column="5">/* NOTREACHED */</comment>
    <return pos:line="250" pos:column="5">return <expr><literal type="number" pos:line="250" pos:column="12">0<pos:position pos:line="250" pos:column="13"/></literal></expr>;<pos:position pos:line="250" pos:column="14"/></return>
}<pos:position pos:line="251" pos:column="2"/></block></function></unit>
