<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5769_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">main<pos:position pos:line="2" pos:column="5"/></name><parameter_list pos:line="2" pos:column="5">(<parameter><decl><type><name pos:line="2" pos:column="6">int<pos:position pos:line="2" pos:column="9"/></name></type> <name pos:line="2" pos:column="10">argc<pos:position pos:line="2" pos:column="14"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="16">char<pos:position pos:line="2" pos:column="20"/></name> <modifier pos:line="2" pos:column="21">*<pos:position pos:line="2" pos:column="22"/></modifier></type><name><name pos:line="2" pos:column="22">argv<pos:position pos:line="2" pos:column="26"/></name><index pos:line="2" pos:column="26">[]<pos:position pos:line="2" pos:column="28"/></index></name></decl></parameter>)<pos:position pos:line="2" pos:column="29"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name></type> <name><name pos:line="4" pos:column="10">input<pos:position pos:line="4" pos:column="15"/></name><index pos:line="4" pos:column="15">[<expr><literal type="number" pos:line="4" pos:column="16">512<pos:position pos:line="4" pos:column="19"/></literal></expr>]<pos:position pos:line="4" pos:column="20"/></index></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name></type> <name><name pos:line="5" pos:column="10">buf<pos:position pos:line="5" pos:column="13"/></name><index pos:line="5" pos:column="13">[<expr><literal type="number" pos:line="5" pos:column="14">512<pos:position pos:line="5" pos:column="17"/></literal></expr>]<pos:position pos:line="5" pos:column="18"/></index></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name></type> <name><name pos:line="6" pos:column="10">rbuf<pos:position pos:line="6" pos:column="14"/></name><index pos:line="6" pos:column="14">[<expr><literal type="number" pos:line="6" pos:column="15">512<pos:position pos:line="6" pos:column="18"/></literal></expr>]<pos:position pos:line="6" pos:column="19"/></index></name></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">size_t<pos:position pos:line="7" pos:column="11"/></name></type> <name pos:line="7" pos:column="12">sz<pos:position pos:line="7" pos:column="14"/></name> <init pos:line="7" pos:column="15">= <expr><literal type="number" pos:line="7" pos:column="17">512<pos:position pos:line="7" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">unsigned<pos:position pos:line="8" pos:column="13"/></name> <name pos:line="8" pos:column="14">short<pos:position pos:line="8" pos:column="19"/></name></type> <name pos:line="8" pos:column="20">sid<pos:position pos:line="8" pos:column="23"/></name></decl>;<pos:position pos:line="8" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">s<pos:position pos:line="9" pos:column="10"/></name></decl>;<pos:position pos:line="9" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">rl<pos:position pos:line="10" pos:column="11"/></name></decl>;<pos:position pos:line="10" pos:column="12"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="11" pos:column="5">struct<pos:position pos:line="11" pos:column="11"/></name> <name pos:line="11" pos:column="12">sockaddr_in<pos:position pos:line="11" pos:column="23"/></name></name></type> <name pos:line="11" pos:column="24">S<pos:position pos:line="11" pos:column="25"/></name></decl>;<pos:position pos:line="11" pos:column="26"/></decl_stmt>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><literal type="number" pos:line="12" pos:column="9">3<pos:position pos:line="12" pos:column="10"/></literal> <operator pos:line="12" pos:column="11">!=<pos:position pos:line="12" pos:column="13"/></operator> <name pos:line="12" pos:column="14">argc<pos:position pos:line="12" pos:column="18"/></name></expr>)<pos:position pos:line="12" pos:column="19"/></condition><then pos:line="12" pos:column="19"> <block pos:line="12" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">fprintf<pos:position pos:line="13" pos:column="16"/></name><argument_list pos:line="13" pos:column="16">(<argument><expr><name pos:line="13" pos:column="17">stderr<pos:position pos:line="13" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="25">"usage: %s ip port\n"<pos:position pos:line="13" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="48">argv<pos:position pos:line="13" pos:column="52"/></name><index pos:line="13" pos:column="52">[<expr><literal type="number" pos:line="13" pos:column="53">0<pos:position pos:line="13" pos:column="54"/></literal></expr>]<pos:position pos:line="13" pos:column="55"/></index></name></expr></argument>)<pos:position pos:line="13" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="57"/></expr_stmt>
        <return pos:line="14" pos:column="9">return <expr><literal type="number" pos:line="14" pos:column="16">1<pos:position pos:line="14" pos:column="17"/></literal></expr>;<pos:position pos:line="14" pos:column="18"/></return>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">setbuf<pos:position pos:line="16" pos:column="11"/></name><argument_list pos:line="16" pos:column="11">(<argument><expr><name pos:line="16" pos:column="12">stdout<pos:position pos:line="16" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="20">NULL<pos:position pos:line="16" pos:column="24"/></name></expr></argument>)<pos:position pos:line="16" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">setbuf<pos:position pos:line="17" pos:column="11"/></name><argument_list pos:line="17" pos:column="11">(<argument><expr><name pos:line="17" pos:column="12">stderr<pos:position pos:line="17" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="20">NULL<pos:position pos:line="17" pos:column="24"/></name></expr></argument>)<pos:position pos:line="17" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="18" pos:column="5">s<pos:position pos:line="18" pos:column="6"/></name> <operator pos:line="18" pos:column="7">=<pos:position pos:line="18" pos:column="8"/></operator> <call><name pos:line="18" pos:column="9">socket<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><name pos:line="18" pos:column="16">PF_INET<pos:position pos:line="18" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="25">SOCK_DGRAM<pos:position pos:line="18" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="37">0<pos:position pos:line="18" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="40"/></expr_stmt>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name pos:line="19" pos:column="9">s<pos:position pos:line="19" pos:column="10"/></name> <operator pos:line="19" pos:column="11">&lt;<pos:position pos:line="19" pos:column="15"/></operator> <literal type="number" pos:line="19" pos:column="13">0<pos:position pos:line="19" pos:column="14"/></literal></expr>)<pos:position pos:line="19" pos:column="15"/></condition><then pos:line="19" pos:column="15"> <block pos:line="19" pos:column="16">{
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">perror<pos:position pos:line="20" pos:column="15"/></name><argument_list pos:line="20" pos:column="15">(<argument><expr><literal type="string" pos:line="20" pos:column="16">"socket"<pos:position pos:line="20" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="26"/></expr_stmt>
        <return pos:line="21" pos:column="9">return <expr><literal type="number" pos:line="21" pos:column="16">1<pos:position pos:line="21" pos:column="17"/></literal></expr>;<pos:position pos:line="21" pos:column="18"/></return>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">memset<pos:position pos:line="23" pos:column="11"/></name><argument_list pos:line="23" pos:column="11">(<argument><expr><operator pos:line="23" pos:column="12">&amp;<pos:position pos:line="23" pos:column="17"/></operator><name pos:line="23" pos:column="13">S<pos:position pos:line="23" pos:column="14"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="23" pos:column="16">'\0'<pos:position pos:line="23" pos:column="20"/></literal></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="22">sizeof<argument_list pos:line="23" pos:column="28">(<argument><expr><name pos:line="23" pos:column="29">S<pos:position pos:line="23" pos:column="30"/></name></expr></argument>)<pos:position pos:line="23" pos:column="31"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="23" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="24" pos:column="5">S<pos:position pos:line="24" pos:column="6"/></name><operator pos:line="24" pos:column="6">.<pos:position pos:line="24" pos:column="7"/></operator><name pos:line="24" pos:column="7">sin_family<pos:position pos:line="24" pos:column="17"/></name></name> <operator pos:line="24" pos:column="18">=<pos:position pos:line="24" pos:column="19"/></operator> <name pos:line="24" pos:column="20">AF_INET<pos:position pos:line="24" pos:column="27"/></name></expr>;<pos:position pos:line="24" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="25" pos:column="5">S<pos:position pos:line="25" pos:column="6"/></name><operator pos:line="25" pos:column="6">.<pos:position pos:line="25" pos:column="7"/></operator><name pos:line="25" pos:column="7">sin_port<pos:position pos:line="25" pos:column="15"/></name></name> <operator pos:line="25" pos:column="16">=<pos:position pos:line="25" pos:column="17"/></operator> <call><name pos:line="25" pos:column="18">htons<pos:position pos:line="25" pos:column="23"/></name><argument_list pos:line="25" pos:column="23">(<argument><expr><call><name pos:line="25" pos:column="24">atoi<pos:position pos:line="25" pos:column="28"/></name><argument_list pos:line="25" pos:column="28">(<argument><expr><name><name pos:line="25" pos:column="29">argv<pos:position pos:line="25" pos:column="33"/></name><index pos:line="25" pos:column="33">[<expr><literal type="number" pos:line="25" pos:column="34">2<pos:position pos:line="25" pos:column="35"/></literal></expr>]<pos:position pos:line="25" pos:column="36"/></index></name></expr></argument>)<pos:position pos:line="25" pos:column="37"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="26" pos:column="5">S<pos:position pos:line="26" pos:column="6"/></name><operator pos:line="26" pos:column="6">.<pos:position pos:line="26" pos:column="7"/></operator><name pos:line="26" pos:column="7">sin_addr<pos:position pos:line="26" pos:column="15"/></name><operator pos:line="26" pos:column="15">.<pos:position pos:line="26" pos:column="16"/></operator><name pos:line="26" pos:column="16">s_addr<pos:position pos:line="26" pos:column="22"/></name></name> <operator pos:line="26" pos:column="23">=<pos:position pos:line="26" pos:column="24"/></operator> <call><name pos:line="26" pos:column="25">inet_addr<pos:position pos:line="26" pos:column="34"/></name><argument_list pos:line="26" pos:column="34">(<argument><expr><name><name pos:line="26" pos:column="35">argv<pos:position pos:line="26" pos:column="39"/></name><index pos:line="26" pos:column="39">[<expr><literal type="number" pos:line="26" pos:column="40">1<pos:position pos:line="26" pos:column="41"/></literal></expr>]<pos:position pos:line="26" pos:column="42"/></index></name></expr></argument>)<pos:position pos:line="26" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="44"/></expr_stmt>
    <while pos:line="27" pos:column="5">while <condition pos:line="27" pos:column="11">(<expr><call><name pos:line="27" pos:column="12">fgets<pos:position pos:line="27" pos:column="17"/></name><argument_list pos:line="27" pos:column="17">(<argument><expr><name pos:line="27" pos:column="18">input<pos:position pos:line="27" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="25">512<pos:position pos:line="27" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="30">stdin<pos:position pos:line="27" pos:column="35"/></name></expr></argument>)<pos:position pos:line="27" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="37"/></condition> <block pos:line="27" pos:column="38">{
        <decl_stmt><decl><type><name><name pos:line="28" pos:column="9">struct<pos:position pos:line="28" pos:column="15"/></name> <name pos:line="28" pos:column="16">in_addr<pos:position pos:line="28" pos:column="23"/></name></name></type> <name pos:line="28" pos:column="24">junk<pos:position pos:line="28" pos:column="28"/></name></decl>;<pos:position pos:line="28" pos:column="29"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">strtok<pos:position pos:line="29" pos:column="15"/></name><argument_list pos:line="29" pos:column="15">(<argument><expr><name pos:line="29" pos:column="16">input<pos:position pos:line="29" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="23">"\r\n"<pos:position pos:line="29" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">memset<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><name pos:line="30" pos:column="16">buf<pos:position pos:line="30" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="30" pos:column="21">'\0'<pos:position pos:line="30" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="27">512<pos:position pos:line="30" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><name pos:line="31" pos:column="9">sz<pos:position pos:line="31" pos:column="11"/></name> <operator pos:line="31" pos:column="12">=<pos:position pos:line="31" pos:column="13"/></operator> <literal type="number" pos:line="31" pos:column="14">512<pos:position pos:line="31" pos:column="17"/></literal></expr>;<pos:position pos:line="31" pos:column="18"/></expr_stmt>
        <if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><call><name pos:line="32" pos:column="13">inet_pton<pos:position pos:line="32" pos:column="22"/></name><argument_list pos:line="32" pos:column="22">(<argument><expr><name pos:line="32" pos:column="23">AF_INET<pos:position pos:line="32" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="32">input<pos:position pos:line="32" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="39">&amp;<pos:position pos:line="32" pos:column="44"/></operator><name pos:line="32" pos:column="40">junk<pos:position pos:line="32" pos:column="44"/></name></expr></argument>)<pos:position pos:line="32" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="46"/></condition><then pos:line="32" pos:column="46"> <block pos:line="32" pos:column="47">{
            <expr_stmt><expr><name pos:line="33" pos:column="13">sid<pos:position pos:line="33" pos:column="16"/></name> <operator pos:line="33" pos:column="17">=<pos:position pos:line="33" pos:column="18"/></operator> <call><name pos:line="33" pos:column="19">rfc1035BuildPTRQuery<pos:position pos:line="33" pos:column="39"/></name><argument_list pos:line="33" pos:column="39">(<argument><expr><name pos:line="33" pos:column="40">junk<pos:position pos:line="33" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="46">buf<pos:position pos:line="33" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="51">&amp;<pos:position pos:line="33" pos:column="56"/></operator><name pos:line="33" pos:column="52">sz<pos:position pos:line="33" pos:column="54"/></name></expr></argument>)<pos:position pos:line="33" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="56"/></expr_stmt>
        }<pos:position pos:line="34" pos:column="10"/></block></then> <else pos:line="34" pos:column="11">else <block pos:line="34" pos:column="16">{
            <expr_stmt><expr><name pos:line="35" pos:column="13">sid<pos:position pos:line="35" pos:column="16"/></name> <operator pos:line="35" pos:column="17">=<pos:position pos:line="35" pos:column="18"/></operator> <call><name pos:line="35" pos:column="19">rfc1035BuildAQuery<pos:position pos:line="35" pos:column="37"/></name><argument_list pos:line="35" pos:column="37">(<argument><expr><name pos:line="35" pos:column="38">input<pos:position pos:line="35" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="45">buf<pos:position pos:line="35" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="50">&amp;<pos:position pos:line="35" pos:column="55"/></operator><name pos:line="35" pos:column="51">sz<pos:position pos:line="35" pos:column="53"/></name></expr></argument>)<pos:position pos:line="35" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="55"/></expr_stmt>
        }<pos:position pos:line="36" pos:column="10"/></block></else></if>
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">sendto<pos:position pos:line="37" pos:column="15"/></name><argument_list pos:line="37" pos:column="15">(<argument><expr><name pos:line="37" pos:column="16">s<pos:position pos:line="37" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="19">buf<pos:position pos:line="37" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="24">sz<pos:position pos:line="37" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="28">0<pos:position pos:line="37" pos:column="29"/></literal></expr></argument>, <argument><expr><operator pos:line="37" pos:column="31">(<pos:position pos:line="37" pos:column="32"/></operator>struct <name pos:line="37" pos:column="39">sockaddr<pos:position pos:line="37" pos:column="47"/></name> <operator pos:line="37" pos:column="48">*<pos:position pos:line="37" pos:column="49"/></operator><operator pos:line="37" pos:column="49">)<pos:position pos:line="37" pos:column="50"/></operator> <operator pos:line="37" pos:column="51">&amp;<pos:position pos:line="37" pos:column="56"/></operator><name pos:line="37" pos:column="52">S<pos:position pos:line="37" pos:column="53"/></name></expr></argument>, <argument><expr><sizeof pos:line="37" pos:column="55">sizeof<argument_list pos:line="37" pos:column="61">(<argument><expr><name pos:line="37" pos:column="62">S<pos:position pos:line="37" pos:column="63"/></name></expr></argument>)<pos:position pos:line="37" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="37" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="66"/></expr_stmt>
        <do pos:line="38" pos:column="9">do <block pos:line="38" pos:column="12">{
            <decl_stmt><decl><type><name pos:line="39" pos:column="13">fd_set<pos:position pos:line="39" pos:column="19"/></name></type> <name pos:line="39" pos:column="20">R<pos:position pos:line="39" pos:column="21"/></name></decl>;<pos:position pos:line="39" pos:column="22"/></decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="40" pos:column="13">struct<pos:position pos:line="40" pos:column="19"/></name> <name pos:line="40" pos:column="20">timeval<pos:position pos:line="40" pos:column="27"/></name></name></type> <name pos:line="40" pos:column="28">to<pos:position pos:line="40" pos:column="30"/></name></decl>;<pos:position pos:line="40" pos:column="31"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="41" pos:column="13">FD_ZERO<pos:position pos:line="41" pos:column="20"/></name><argument_list pos:line="41" pos:column="20">(<argument><expr><operator pos:line="41" pos:column="21">&amp;<pos:position pos:line="41" pos:column="26"/></operator><name pos:line="41" pos:column="22">R<pos:position pos:line="41" pos:column="23"/></name></expr></argument>)<pos:position pos:line="41" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="25"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="42" pos:column="13">FD_SET<pos:position pos:line="42" pos:column="19"/></name><argument_list pos:line="42" pos:column="19">(<argument><expr><name pos:line="42" pos:column="20">s<pos:position pos:line="42" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="23">&amp;<pos:position pos:line="42" pos:column="28"/></operator><name pos:line="42" pos:column="24">R<pos:position pos:line="42" pos:column="25"/></name></expr></argument>)<pos:position pos:line="42" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="27"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="43" pos:column="13">to<pos:position pos:line="43" pos:column="15"/></name><operator pos:line="43" pos:column="15">.<pos:position pos:line="43" pos:column="16"/></operator><name pos:line="43" pos:column="16">tv_sec<pos:position pos:line="43" pos:column="22"/></name></name> <operator pos:line="43" pos:column="23">=<pos:position pos:line="43" pos:column="24"/></operator> <literal type="number" pos:line="43" pos:column="25">10<pos:position pos:line="43" pos:column="27"/></literal></expr>;<pos:position pos:line="43" pos:column="28"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="44" pos:column="13">to<pos:position pos:line="44" pos:column="15"/></name><operator pos:line="44" pos:column="15">.<pos:position pos:line="44" pos:column="16"/></operator><name pos:line="44" pos:column="16">tv_usec<pos:position pos:line="44" pos:column="23"/></name></name> <operator pos:line="44" pos:column="24">=<pos:position pos:line="44" pos:column="25"/></operator> <literal type="number" pos:line="44" pos:column="26">0<pos:position pos:line="44" pos:column="27"/></literal></expr>;<pos:position pos:line="44" pos:column="28"/></expr_stmt>
            <expr_stmt><expr><name pos:line="45" pos:column="13">rl<pos:position pos:line="45" pos:column="15"/></name> <operator pos:line="45" pos:column="16">=<pos:position pos:line="45" pos:column="17"/></operator> <call><name pos:line="45" pos:column="18">select<pos:position pos:line="45" pos:column="24"/></name><argument_list pos:line="45" pos:column="24">(<argument><expr><name pos:line="45" pos:column="25">s<pos:position pos:line="45" pos:column="26"/></name> <operator pos:line="45" pos:column="27">+<pos:position pos:line="45" pos:column="28"/></operator> <literal type="number" pos:line="45" pos:column="29">1<pos:position pos:line="45" pos:column="30"/></literal></expr></argument>, <argument><expr><operator pos:line="45" pos:column="32">&amp;<pos:position pos:line="45" pos:column="37"/></operator><name pos:line="45" pos:column="33">R<pos:position pos:line="45" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="36">NULL<pos:position pos:line="45" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="42">NULL<pos:position pos:line="45" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="48">&amp;<pos:position pos:line="45" pos:column="53"/></operator><name pos:line="45" pos:column="49">to<pos:position pos:line="45" pos:column="51"/></name></expr></argument>)<pos:position pos:line="45" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="53"/></expr_stmt>
        }<pos:position pos:line="46" pos:column="10"/></block> while <condition pos:line="46" pos:column="17">(<expr><literal type="number" pos:line="46" pos:column="18">0<pos:position pos:line="46" pos:column="19"/></literal></expr>)<pos:position pos:line="46" pos:column="20"/></condition>;<pos:position pos:line="46" pos:column="21"/></do>
        <if pos:line="47" pos:column="9">if <condition pos:line="47" pos:column="12">(<expr><name pos:line="47" pos:column="13">rl<pos:position pos:line="47" pos:column="15"/></name> <operator pos:line="47" pos:column="16">&lt;<pos:position pos:line="47" pos:column="20"/></operator> <literal type="number" pos:line="47" pos:column="18">1<pos:position pos:line="47" pos:column="19"/></literal></expr>)<pos:position pos:line="47" pos:column="20"/></condition><then pos:line="47" pos:column="20"> <block pos:line="47" pos:column="21">{
            <expr_stmt><expr><call><name pos:line="48" pos:column="13">printf<pos:position pos:line="48" pos:column="19"/></name><argument_list pos:line="48" pos:column="19">(<argument><expr><literal type="string" pos:line="48" pos:column="20">"TIMEOUT\n"<pos:position pos:line="48" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="33"/></expr_stmt>
            <continue pos:line="49" pos:column="13">continue;<pos:position pos:line="49" pos:column="22"/></continue>
        }<pos:position pos:line="50" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="51" pos:column="9">memset<pos:position pos:line="51" pos:column="15"/></name><argument_list pos:line="51" pos:column="15">(<argument><expr><name pos:line="51" pos:column="16">rbuf<pos:position pos:line="51" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="51" pos:column="22">'\0'<pos:position pos:line="51" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="51" pos:column="28">512<pos:position pos:line="51" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name pos:line="52" pos:column="9">rl<pos:position pos:line="52" pos:column="11"/></name> <operator pos:line="52" pos:column="12">=<pos:position pos:line="52" pos:column="13"/></operator> <call><name pos:line="52" pos:column="14">recv<pos:position pos:line="52" pos:column="18"/></name><argument_list pos:line="52" pos:column="18">(<argument><expr><name pos:line="52" pos:column="19">s<pos:position pos:line="52" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="22">rbuf<pos:position pos:line="52" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="52" pos:column="28">512<pos:position pos:line="52" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="52" pos:column="33">0<pos:position pos:line="52" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="36"/></expr_stmt>
        <block pos:line="53" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="54" pos:column="13">unsigned<pos:position pos:line="54" pos:column="21"/></name> <name pos:line="54" pos:column="22">short<pos:position pos:line="54" pos:column="27"/></name></type> <name pos:line="54" pos:column="28">rid<pos:position pos:line="54" pos:column="31"/></name> <init pos:line="54" pos:column="32">= <expr><literal type="number" pos:line="54" pos:column="34">0<pos:position pos:line="54" pos:column="35"/></literal></expr></init></decl>;<pos:position pos:line="54" pos:column="36"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="55" pos:column="13">int<pos:position pos:line="55" pos:column="16"/></name></type> <name pos:line="55" pos:column="17">i<pos:position pos:line="55" pos:column="18"/></name></decl>;<pos:position pos:line="55" pos:column="19"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="56" pos:column="13">int<pos:position pos:line="56" pos:column="16"/></name></type> <name pos:line="56" pos:column="17">n<pos:position pos:line="56" pos:column="18"/></name></decl>;<pos:position pos:line="56" pos:column="19"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="57" pos:column="13">rfc1035_rr<pos:position pos:line="57" pos:column="23"/></name> <modifier pos:line="57" pos:column="24">*<pos:position pos:line="57" pos:column="25"/></modifier></type><name pos:line="57" pos:column="25">answers<pos:position pos:line="57" pos:column="32"/></name> <init pos:line="57" pos:column="33">= <expr><name pos:line="57" pos:column="35">NULL<pos:position pos:line="57" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="57" pos:column="40"/></decl_stmt>
            <expr_stmt><expr><name pos:line="58" pos:column="13">n<pos:position pos:line="58" pos:column="14"/></name> <operator pos:line="58" pos:column="15">=<pos:position pos:line="58" pos:column="16"/></operator> <call><name pos:line="58" pos:column="17">rfc1035AnswersUnpack<pos:position pos:line="58" pos:column="37"/></name><argument_list pos:line="58" pos:column="37">(<argument><expr><name pos:line="58" pos:column="38">rbuf<pos:position pos:line="58" pos:column="42"/></name></expr></argument>,
                                     <argument><expr><name pos:line="59" pos:column="38">rl<pos:position pos:line="59" pos:column="40"/></name></expr></argument>,
                                     <argument><expr><operator pos:line="60" pos:column="38">&amp;<pos:position pos:line="60" pos:column="43"/></operator><name pos:line="60" pos:column="39">answers<pos:position pos:line="60" pos:column="46"/></name></expr></argument>,
                                     <argument><expr><operator pos:line="61" pos:column="38">&amp;<pos:position pos:line="61" pos:column="43"/></operator><name pos:line="61" pos:column="39">rid<pos:position pos:line="61" pos:column="42"/></name></expr></argument>)<pos:position pos:line="61" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="44"/></expr_stmt>
            <if pos:line="62" pos:column="13">if <condition pos:line="62" pos:column="16">(<expr><name pos:line="62" pos:column="17">n<pos:position pos:line="62" pos:column="18"/></name> <operator pos:line="62" pos:column="19">&lt;<pos:position pos:line="62" pos:column="23"/></operator> <literal type="number" pos:line="62" pos:column="21">0<pos:position pos:line="62" pos:column="22"/></literal></expr>)<pos:position pos:line="62" pos:column="23"/></condition><then pos:line="62" pos:column="23"> <block pos:line="62" pos:column="24">{
                <expr_stmt><expr><call><name pos:line="63" pos:column="17">printf<pos:position pos:line="63" pos:column="23"/></name><argument_list pos:line="63" pos:column="23">(<argument><expr><literal type="string" pos:line="63" pos:column="24">"ERROR %d\n"<pos:position pos:line="63" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="63" pos:column="38">rfc1035_errno<pos:position pos:line="63" pos:column="51"/></name></expr></argument>)<pos:position pos:line="63" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="53"/></expr_stmt>
            }<pos:position pos:line="64" pos:column="14"/></block></then> <elseif pos:line="64" pos:column="15">else <if pos:line="64" pos:column="20">if <condition pos:line="64" pos:column="23">(<expr><name pos:line="64" pos:column="24">rid<pos:position pos:line="64" pos:column="27"/></name> <operator pos:line="64" pos:column="28">!=<pos:position pos:line="64" pos:column="30"/></operator> <name pos:line="64" pos:column="31">sid<pos:position pos:line="64" pos:column="34"/></name></expr>)<pos:position pos:line="64" pos:column="35"/></condition><then pos:line="64" pos:column="35"> <block pos:line="64" pos:column="36">{
                <expr_stmt><expr><call><name pos:line="65" pos:column="17">printf<pos:position pos:line="65" pos:column="23"/></name><argument_list pos:line="65" pos:column="23">(<argument><expr><literal type="string" pos:line="65" pos:column="24">"ERROR, ID mismatch (%#hx, %#hx)\n"<pos:position pos:line="65" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="65" pos:column="61">sid<pos:position pos:line="65" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="66">rid<pos:position pos:line="65" pos:column="69"/></name></expr></argument>)<pos:position pos:line="65" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="71"/></expr_stmt>
            }<pos:position pos:line="66" pos:column="14"/></block></then></if></elseif> <else pos:line="66" pos:column="15">else <block pos:line="66" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="67" pos:column="17">printf<pos:position pos:line="67" pos:column="23"/></name><argument_list pos:line="67" pos:column="23">(<argument><expr><literal type="string" pos:line="67" pos:column="24">"%d answers\n"<pos:position pos:line="67" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="67" pos:column="40">n<pos:position pos:line="67" pos:column="41"/></name></expr></argument>)<pos:position pos:line="67" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="43"/></expr_stmt>
                <for pos:line="68" pos:column="17">for <control pos:line="68" pos:column="21">(<init><expr><name pos:line="68" pos:column="22">i<pos:position pos:line="68" pos:column="23"/></name> <operator pos:line="68" pos:column="24">=<pos:position pos:line="68" pos:column="25"/></operator> <literal type="number" pos:line="68" pos:column="26">0<pos:position pos:line="68" pos:column="27"/></literal></expr>;<pos:position pos:line="68" pos:column="28"/></init> <condition><expr><name pos:line="68" pos:column="29">i<pos:position pos:line="68" pos:column="30"/></name> <operator pos:line="68" pos:column="31">&lt;<pos:position pos:line="68" pos:column="35"/></operator> <name pos:line="68" pos:column="33">n<pos:position pos:line="68" pos:column="34"/></name></expr>;<pos:position pos:line="68" pos:column="35"/></condition> <incr><expr><name pos:line="68" pos:column="36">i<pos:position pos:line="68" pos:column="37"/></name><operator pos:line="68" pos:column="37">++<pos:position pos:line="68" pos:column="39"/></operator></expr></incr>)<pos:position pos:line="68" pos:column="40"/></control> <block pos:line="68" pos:column="41">{
                    <if pos:line="69" pos:column="21">if <condition pos:line="69" pos:column="24">(<expr><name><name pos:line="69" pos:column="25">answers<pos:position pos:line="69" pos:column="32"/></name><index pos:line="69" pos:column="32">[<expr><name pos:line="69" pos:column="33">i<pos:position pos:line="69" pos:column="34"/></name></expr>]<pos:position pos:line="69" pos:column="35"/></index></name><operator pos:line="69" pos:column="35">.<pos:position pos:line="69" pos:column="36"/></operator><name pos:line="69" pos:column="36">type<pos:position pos:line="69" pos:column="40"/></name> <operator pos:line="69" pos:column="41">==<pos:position pos:line="69" pos:column="43"/></operator> <name pos:line="69" pos:column="44">RFC1035_TYPE_A<pos:position pos:line="69" pos:column="58"/></name></expr>)<pos:position pos:line="69" pos:column="59"/></condition><then pos:line="69" pos:column="59"> <block pos:line="69" pos:column="60">{
                        <decl_stmt><decl><type><name><name pos:line="70" pos:column="25">struct<pos:position pos:line="70" pos:column="31"/></name> <name pos:line="70" pos:column="32">in_addr<pos:position pos:line="70" pos:column="39"/></name></name></type> <name pos:line="70" pos:column="40">a<pos:position pos:line="70" pos:column="41"/></name></decl>;<pos:position pos:line="70" pos:column="42"/></decl_stmt>
                        <decl_stmt><decl><type><name pos:line="71" pos:column="25">char<pos:position pos:line="71" pos:column="29"/></name></type> <name><name pos:line="71" pos:column="30">ipa_str<pos:position pos:line="71" pos:column="37"/></name><index pos:line="71" pos:column="37">[<expr><sizeof pos:line="71" pos:column="38">sizeof<argument_list pos:line="71" pos:column="44">(<argument><expr><name pos:line="71" pos:column="45">a<pos:position pos:line="71" pos:column="46"/></name></expr></argument>)<pos:position pos:line="71" pos:column="47"/></argument_list></sizeof></expr>]<pos:position pos:line="71" pos:column="48"/></index></name></decl>;<pos:position pos:line="71" pos:column="49"/></decl_stmt>
                        <expr_stmt><expr><call><name pos:line="72" pos:column="25">memcpy<pos:position pos:line="72" pos:column="31"/></name><argument_list pos:line="72" pos:column="31">(<argument><expr><operator pos:line="72" pos:column="32">&amp;<pos:position pos:line="72" pos:column="37"/></operator><name pos:line="72" pos:column="33">a<pos:position pos:line="72" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="72" pos:column="36">answers<pos:position pos:line="72" pos:column="43"/></name><index pos:line="72" pos:column="43">[<expr><name pos:line="72" pos:column="44">i<pos:position pos:line="72" pos:column="45"/></name></expr>]<pos:position pos:line="72" pos:column="46"/></index></name><operator pos:line="72" pos:column="46">.<pos:position pos:line="72" pos:column="47"/></operator><name pos:line="72" pos:column="47">rdata<pos:position pos:line="72" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="72" pos:column="54">4<pos:position pos:line="72" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="57"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="73" pos:column="25">printf<pos:position pos:line="73" pos:column="31"/></name><argument_list pos:line="73" pos:column="31">(<argument><expr><literal type="string" pos:line="73" pos:column="32">"A\t%d\t%s\n"<pos:position pos:line="73" pos:column="45"/></literal></expr></argument>, <argument><expr><name><name pos:line="73" pos:column="47">answers<pos:position pos:line="73" pos:column="54"/></name><index pos:line="73" pos:column="54">[<expr><name pos:line="73" pos:column="55">i<pos:position pos:line="73" pos:column="56"/></name></expr>]<pos:position pos:line="73" pos:column="57"/></index></name><operator pos:line="73" pos:column="57">.<pos:position pos:line="73" pos:column="58"/></operator><name pos:line="73" pos:column="58">ttl<pos:position pos:line="73" pos:column="61"/></name></expr></argument>, <argument><expr><call><name pos:line="73" pos:column="63">inet_ntop<pos:position pos:line="73" pos:column="72"/></name><argument_list pos:line="73" pos:column="72">(<argument><expr><name pos:line="73" pos:column="73">AF_INET<pos:position pos:line="73" pos:column="80"/></name></expr></argument>,<argument><expr><operator pos:line="73" pos:column="81">&amp;<pos:position pos:line="73" pos:column="86"/></operator><name pos:line="73" pos:column="82">a<pos:position pos:line="73" pos:column="83"/></name></expr></argument>,<argument><expr><name pos:line="73" pos:column="84">tmp<pos:position pos:line="73" pos:column="87"/></name></expr></argument>,<argument><expr><sizeof pos:line="73" pos:column="88">sizeof<argument_list pos:line="73" pos:column="94">(<argument><expr><name pos:line="73" pos:column="95">a<pos:position pos:line="73" pos:column="96"/></name></expr></argument>)<pos:position pos:line="73" pos:column="97"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="73" pos:column="98"/></argument_list></call></expr></argument>)<pos:position pos:line="73" pos:column="99"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="100"/></expr_stmt>
                    }<pos:position pos:line="74" pos:column="22"/></block></then> <elseif pos:line="74" pos:column="23">else <if pos:line="74" pos:column="28">if <condition pos:line="74" pos:column="31">(<expr><name><name pos:line="74" pos:column="32">answers<pos:position pos:line="74" pos:column="39"/></name><index pos:line="74" pos:column="39">[<expr><name pos:line="74" pos:column="40">i<pos:position pos:line="74" pos:column="41"/></name></expr>]<pos:position pos:line="74" pos:column="42"/></index></name><operator pos:line="74" pos:column="42">.<pos:position pos:line="74" pos:column="43"/></operator><name pos:line="74" pos:column="43">type<pos:position pos:line="74" pos:column="47"/></name> <operator pos:line="74" pos:column="48">==<pos:position pos:line="74" pos:column="50"/></operator> <name pos:line="74" pos:column="51">RFC1035_TYPE_PTR<pos:position pos:line="74" pos:column="67"/></name></expr>)<pos:position pos:line="74" pos:column="68"/></condition><then pos:line="74" pos:column="68"> <block pos:line="74" pos:column="69">{
                        <decl_stmt><decl><type><name pos:line="75" pos:column="25">char<pos:position pos:line="75" pos:column="29"/></name></type> <name><name pos:line="75" pos:column="30">ptr<pos:position pos:line="75" pos:column="33"/></name><index pos:line="75" pos:column="33">[<expr><literal type="number" pos:line="75" pos:column="34">128<pos:position pos:line="75" pos:column="37"/></literal></expr>]<pos:position pos:line="75" pos:column="38"/></index></name></decl>;<pos:position pos:line="75" pos:column="39"/></decl_stmt>
                        <expr_stmt><expr><call><name pos:line="76" pos:column="25">strncpy<pos:position pos:line="76" pos:column="32"/></name><argument_list pos:line="76" pos:column="32">(<argument><expr><name pos:line="76" pos:column="33">ptr<pos:position pos:line="76" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="76" pos:column="38">answers<pos:position pos:line="76" pos:column="45"/></name><index pos:line="76" pos:column="45">[<expr><name pos:line="76" pos:column="46">i<pos:position pos:line="76" pos:column="47"/></name></expr>]<pos:position pos:line="76" pos:column="48"/></index></name><operator pos:line="76" pos:column="48">.<pos:position pos:line="76" pos:column="49"/></operator><name pos:line="76" pos:column="49">rdata<pos:position pos:line="76" pos:column="54"/></name></expr></argument>, <argument><expr><name><name pos:line="76" pos:column="56">answers<pos:position pos:line="76" pos:column="63"/></name><index pos:line="76" pos:column="63">[<expr><name pos:line="76" pos:column="64">i<pos:position pos:line="76" pos:column="65"/></name></expr>]<pos:position pos:line="76" pos:column="66"/></index></name><operator pos:line="76" pos:column="66">.<pos:position pos:line="76" pos:column="67"/></operator><name pos:line="76" pos:column="67">rdlength<pos:position pos:line="76" pos:column="75"/></name></expr></argument>)<pos:position pos:line="76" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="77"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="77" pos:column="25">printf<pos:position pos:line="77" pos:column="31"/></name><argument_list pos:line="77" pos:column="31">(<argument><expr><literal type="string" pos:line="77" pos:column="32">"PTR\t%d\t%s\n"<pos:position pos:line="77" pos:column="47"/></literal></expr></argument>, <argument><expr><name><name pos:line="77" pos:column="49">answers<pos:position pos:line="77" pos:column="56"/></name><index pos:line="77" pos:column="56">[<expr><name pos:line="77" pos:column="57">i<pos:position pos:line="77" pos:column="58"/></name></expr>]<pos:position pos:line="77" pos:column="59"/></index></name><operator pos:line="77" pos:column="59">.<pos:position pos:line="77" pos:column="60"/></operator><name pos:line="77" pos:column="60">ttl<pos:position pos:line="77" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="65">ptr<pos:position pos:line="77" pos:column="68"/></name></expr></argument>)<pos:position pos:line="77" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="70"/></expr_stmt>
                    }<pos:position pos:line="78" pos:column="22"/></block></then></if></elseif> <else pos:line="78" pos:column="23">else <block pos:line="78" pos:column="28">{
                        <expr_stmt><expr><call><name pos:line="79" pos:column="25">fprintf<pos:position pos:line="79" pos:column="32"/></name><argument_list pos:line="79" pos:column="32">(<argument><expr><name pos:line="79" pos:column="33">stderr<pos:position pos:line="79" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="79" pos:column="41">"can't print answer type %d\n"<pos:position pos:line="79" pos:column="71"/></literal></expr></argument>,
                                <argument><expr><operator pos:line="80" pos:column="33">(<pos:position pos:line="80" pos:column="34"/></operator><name pos:line="80" pos:column="34">int<pos:position pos:line="80" pos:column="37"/></name><operator pos:line="80" pos:column="37">)<pos:position pos:line="80" pos:column="38"/></operator> <name><name pos:line="80" pos:column="39">answers<pos:position pos:line="80" pos:column="46"/></name><index pos:line="80" pos:column="46">[<expr><name pos:line="80" pos:column="47">i<pos:position pos:line="80" pos:column="48"/></name></expr>]<pos:position pos:line="80" pos:column="49"/></index></name><operator pos:line="80" pos:column="49">.<pos:position pos:line="80" pos:column="50"/></operator><name pos:line="80" pos:column="50">type<pos:position pos:line="80" pos:column="54"/></name></expr></argument>)<pos:position pos:line="80" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="56"/></expr_stmt>
                    }<pos:position pos:line="81" pos:column="22"/></block></else></if>
                }<pos:position pos:line="82" pos:column="18"/></block></for>
            }<pos:position pos:line="83" pos:column="14"/></block></else></if>
        }<pos:position pos:line="84" pos:column="10"/></block>
    }<pos:position pos:line="85" pos:column="6"/></block></while>
    <return pos:line="86" pos:column="5">return <expr><literal type="number" pos:line="86" pos:column="12">0<pos:position pos:line="86" pos:column="13"/></literal></expr>;<pos:position pos:line="86" pos:column="14"/></return>
}<pos:position pos:line="87" pos:column="2"/></block></function></unit>
