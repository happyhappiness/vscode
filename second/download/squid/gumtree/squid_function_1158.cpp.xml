<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_function_1158.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">gopherSendRequest<pos:position pos:line="2" pos:column="18"/></name><parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><name pos:line="2" pos:column="19">int<pos:position pos:line="2" pos:column="22"/></name></type> <name pos:line="2" pos:column="23">fd<pos:position pos:line="2" pos:column="25"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="27">void<pos:position pos:line="2" pos:column="31"/></name> <modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type><name pos:line="2" pos:column="33">data<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="38"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">GopherStateData<pos:position pos:line="4" pos:column="20"/></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier></type><name pos:line="4" pos:column="22">gopherState<pos:position pos:line="4" pos:column="33"/></name> <init pos:line="4" pos:column="34">= <expr><operator pos:line="4" pos:column="36">(<pos:position pos:line="4" pos:column="37"/></operator><name pos:line="4" pos:column="37">GopherStateData<pos:position pos:line="4" pos:column="52"/></name> <operator pos:line="4" pos:column="53">*<pos:position pos:line="4" pos:column="54"/></operator><operator pos:line="4" pos:column="54">)<pos:position pos:line="4" pos:column="55"/></operator><name pos:line="4" pos:column="55">data<pos:position pos:line="4" pos:column="59"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="60"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">MemBuf<pos:position pos:line="5" pos:column="11"/></name></type> <name pos:line="5" pos:column="12">mb<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="6" pos:column="5">mb<pos:position pos:line="6" pos:column="7"/></name><operator pos:line="6" pos:column="7">.<pos:position pos:line="6" pos:column="8"/></operator><name pos:line="6" pos:column="8">init<pos:position pos:line="6" pos:column="12"/></name></name><argument_list pos:line="6" pos:column="12">()<pos:position pos:line="6" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="15"/></expr_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name><name pos:line="8" pos:column="9">gopherState<pos:position pos:line="8" pos:column="20"/></name><operator pos:line="8" pos:column="20">-&gt;<pos:position pos:line="8" pos:column="25"/></operator><name pos:line="8" pos:column="22">type_id<pos:position pos:line="8" pos:column="29"/></name></name> <operator pos:line="8" pos:column="30">==<pos:position pos:line="8" pos:column="32"/></operator> <name pos:line="8" pos:column="33">GOPHER_CSO<pos:position pos:line="8" pos:column="43"/></name></expr>)<pos:position pos:line="8" pos:column="44"/></condition><then pos:line="8" pos:column="44"> <block pos:line="8" pos:column="45">{
        <decl_stmt><decl><type><specifier pos:line="9" pos:column="9">const<pos:position pos:line="9" pos:column="14"/></specifier> <name pos:line="9" pos:column="15">char<pos:position pos:line="9" pos:column="19"/></name> <modifier pos:line="9" pos:column="20">*<pos:position pos:line="9" pos:column="21"/></modifier></type><name pos:line="9" pos:column="21">t<pos:position pos:line="9" pos:column="22"/></name> <init pos:line="9" pos:column="23">= <expr><call><name pos:line="9" pos:column="25">strchr<pos:position pos:line="9" pos:column="31"/></name><argument_list pos:line="9" pos:column="31">(<argument><expr><name><name pos:line="9" pos:column="32">gopherState<pos:position pos:line="9" pos:column="43"/></name><operator pos:line="9" pos:column="43">-&gt;<pos:position pos:line="9" pos:column="48"/></operator><name pos:line="9" pos:column="45">request<pos:position pos:line="9" pos:column="52"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="9" pos:column="54">'?'<pos:position pos:line="9" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="59"/></decl_stmt>

        <if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">t<pos:position pos:line="11" pos:column="14"/></name></expr>)<pos:position pos:line="11" pos:column="15"/></condition><then pos:line="11" pos:column="15">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="12" pos:column="13">++<pos:position pos:line="12" pos:column="15"/></operator><name pos:line="12" pos:column="15">t<pos:position pos:line="12" pos:column="16"/></name></expr>;<pos:position pos:line="12" pos:column="17"/></expr_stmt></block></then>        <comment type="block" pos:line="12" pos:column="25">/* skip the ? */</comment>
        <else pos:line="13" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="13">t<pos:position pos:line="14" pos:column="14"/></name> <operator pos:line="14" pos:column="15">=<pos:position pos:line="14" pos:column="16"/></operator> <literal type="string" pos:line="14" pos:column="17">""<pos:position pos:line="14" pos:column="19"/></literal></expr>;<pos:position pos:line="14" pos:column="20"/></expr_stmt></block></else></if>

        <expr_stmt><expr><call><name><name pos:line="16" pos:column="9">mb<pos:position pos:line="16" pos:column="11"/></name><operator pos:line="16" pos:column="11">.<pos:position pos:line="16" pos:column="12"/></operator><name pos:line="16" pos:column="12">Printf<pos:position pos:line="16" pos:column="18"/></name></name><argument_list pos:line="16" pos:column="18">(<argument><expr><literal type="string" pos:line="16" pos:column="19">"query %s\r\nquit"<pos:position pos:line="16" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="39">t<pos:position pos:line="16" pos:column="40"/></name></expr></argument>)<pos:position pos:line="16" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="17" pos:column="6"/></block></then> <else pos:line="17" pos:column="7">else <block pos:line="17" pos:column="12">{
        <if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name><name pos:line="18" pos:column="13">gopherState<pos:position pos:line="18" pos:column="24"/></name><operator pos:line="18" pos:column="24">-&gt;<pos:position pos:line="18" pos:column="29"/></operator><name pos:line="18" pos:column="26">type_id<pos:position pos:line="18" pos:column="33"/></name></name> <operator pos:line="18" pos:column="34">==<pos:position pos:line="18" pos:column="36"/></operator> <name pos:line="18" pos:column="37">GOPHER_INDEX<pos:position pos:line="18" pos:column="49"/></name></expr>)<pos:position pos:line="18" pos:column="50"/></condition><then pos:line="18" pos:column="50"> <block pos:line="18" pos:column="51">{
            <if pos:line="19" pos:column="13">if <condition pos:line="19" pos:column="16">(<decl><type><name pos:line="19" pos:column="17">char<pos:position pos:line="19" pos:column="21"/></name> <modifier pos:line="19" pos:column="22">*<pos:position pos:line="19" pos:column="23"/></modifier></type><name pos:line="19" pos:column="23">t<pos:position pos:line="19" pos:column="24"/></name> <init pos:line="19" pos:column="25">= <expr><call><name pos:line="19" pos:column="27">strchr<pos:position pos:line="19" pos:column="33"/></name><argument_list pos:line="19" pos:column="33">(<argument><expr><name><name pos:line="19" pos:column="34">gopherState<pos:position pos:line="19" pos:column="45"/></name><operator pos:line="19" pos:column="45">-&gt;<pos:position pos:line="19" pos:column="50"/></operator><name pos:line="19" pos:column="47">request<pos:position pos:line="19" pos:column="54"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="19" pos:column="56">'?'<pos:position pos:line="19" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="60"/></argument_list></call></expr></init></decl>)<pos:position pos:line="19" pos:column="61"/></condition><then pos:line="19" pos:column="61">
                <block type="pseudo"><expr_stmt><expr><operator pos:line="20" pos:column="17">*<pos:position pos:line="20" pos:column="18"/></operator><name pos:line="20" pos:column="18">t<pos:position pos:line="20" pos:column="19"/></name> <operator pos:line="20" pos:column="20">=<pos:position pos:line="20" pos:column="21"/></operator> <literal type="char" pos:line="20" pos:column="22">'\t'<pos:position pos:line="20" pos:column="26"/></literal></expr>;<pos:position pos:line="20" pos:column="27"/></expr_stmt></block></then></if>
        }<pos:position pos:line="21" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name><name pos:line="22" pos:column="9">mb<pos:position pos:line="22" pos:column="11"/></name><operator pos:line="22" pos:column="11">.<pos:position pos:line="22" pos:column="12"/></operator><name pos:line="22" pos:column="12">append<pos:position pos:line="22" pos:column="18"/></name></name><argument_list pos:line="22" pos:column="18">(<argument><expr><name><name pos:line="22" pos:column="19">gopherState<pos:position pos:line="22" pos:column="30"/></name><operator pos:line="22" pos:column="30">-&gt;<pos:position pos:line="22" pos:column="35"/></operator><name pos:line="22" pos:column="32">request<pos:position pos:line="22" pos:column="39"/></name></name></expr></argument>, <argument><expr><call><name pos:line="22" pos:column="41">strlen<pos:position pos:line="22" pos:column="47"/></name><argument_list pos:line="22" pos:column="47">(<argument><expr><name><name pos:line="22" pos:column="48">gopherState<pos:position pos:line="22" pos:column="59"/></name><operator pos:line="22" pos:column="59">-&gt;<pos:position pos:line="22" pos:column="64"/></operator><name pos:line="22" pos:column="61">request<pos:position pos:line="22" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="71"/></expr_stmt>
    }<pos:position pos:line="23" pos:column="6"/></block></else></if>
    <expr_stmt><expr><call><name><name pos:line="24" pos:column="5">mb<pos:position pos:line="24" pos:column="7"/></name><operator pos:line="24" pos:column="7">.<pos:position pos:line="24" pos:column="8"/></operator><name pos:line="24" pos:column="8">append<pos:position pos:line="24" pos:column="14"/></name></name><argument_list pos:line="24" pos:column="14">(<argument><expr><literal type="string" pos:line="24" pos:column="15">"\r\n"<pos:position pos:line="24" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="23">2<pos:position pos:line="24" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="26"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="26" pos:column="5">debugs<pos:position pos:line="26" pos:column="11"/></name><argument_list pos:line="26" pos:column="11">(<argument><expr><literal type="number" pos:line="26" pos:column="12">10<pos:position pos:line="26" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="16">5<pos:position pos:line="26" pos:column="17"/></literal></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="19">gopherState<pos:position pos:line="26" pos:column="30"/></name><operator pos:line="26" pos:column="30">-&gt;<pos:position pos:line="26" pos:column="35"/></operator><name pos:line="26" pos:column="32">serverConn<pos:position pos:line="26" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="44"/></expr_stmt>
    <decl_stmt><decl><type><name><name pos:line="27" pos:column="5">AsyncCall<pos:position pos:line="27" pos:column="14"/></name><operator pos:line="27" pos:column="14">::<pos:position pos:line="27" pos:column="16"/></operator><name pos:line="27" pos:column="16">Pointer<pos:position pos:line="27" pos:column="23"/></name></name></type> <name pos:line="27" pos:column="24">call<pos:position pos:line="27" pos:column="28"/></name> <init pos:line="27" pos:column="29">= <expr><call><name pos:line="27" pos:column="31">commCbCall<pos:position pos:line="27" pos:column="41"/></name><argument_list pos:line="27" pos:column="41">(<argument><expr><literal type="number" pos:line="27" pos:column="42">5<pos:position pos:line="27" pos:column="43"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="27" pos:column="44">5<pos:position pos:line="27" pos:column="45"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="47">"gopherSendComplete"<pos:position pos:line="27" pos:column="67"/></literal></expr></argument>,
                                         <argument><expr><call><name pos:line="28" pos:column="42">CommIoCbPtrFun<pos:position pos:line="28" pos:column="56"/></name><argument_list pos:line="28" pos:column="56">(<argument><expr><name pos:line="28" pos:column="57">gopherSendComplete<pos:position pos:line="28" pos:column="75"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="77">gopherState<pos:position pos:line="28" pos:column="88"/></name></expr></argument>)<pos:position pos:line="28" pos:column="89"/></argument_list></call></expr></argument>)<pos:position pos:line="28" pos:column="90"/></argument_list></call></expr></init></decl>;<pos:position pos:line="28" pos:column="91"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="29" pos:column="5">Comm<pos:position pos:line="29" pos:column="9"/></name><operator pos:line="29" pos:column="9">::<pos:position pos:line="29" pos:column="11"/></operator><name pos:line="29" pos:column="11">Write<pos:position pos:line="29" pos:column="16"/></name></name><argument_list pos:line="29" pos:column="16">(<argument><expr><name><name pos:line="29" pos:column="17">gopherState<pos:position pos:line="29" pos:column="28"/></name><operator pos:line="29" pos:column="28">-&gt;<pos:position pos:line="29" pos:column="33"/></operator><name pos:line="29" pos:column="30">serverConn<pos:position pos:line="29" pos:column="40"/></name></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="42">&amp;<pos:position pos:line="29" pos:column="47"/></operator><name pos:line="29" pos:column="43">mb<pos:position pos:line="29" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="47">call<pos:position pos:line="29" pos:column="51"/></name></expr></argument>)<pos:position pos:line="29" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="53"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="31" pos:column="5">gopherState<pos:position pos:line="31" pos:column="16"/></name><operator pos:line="31" pos:column="16">-&gt;<pos:position pos:line="31" pos:column="21"/></operator><name pos:line="31" pos:column="18">entry<pos:position pos:line="31" pos:column="23"/></name><operator pos:line="31" pos:column="23">-&gt;<pos:position pos:line="31" pos:column="28"/></operator><name pos:line="31" pos:column="25">makePublic<pos:position pos:line="31" pos:column="35"/></name></name><argument_list pos:line="31" pos:column="35">()<pos:position pos:line="31" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="38"/></expr_stmt>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
