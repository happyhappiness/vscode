<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4809_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">allow_t<pos:position pos:line="1" pos:column="8"/></name> <specifier pos:line="1" pos:column="9">const<pos:position pos:line="1" pos:column="14"/></specifier> <modifier pos:line="1" pos:column="15">&amp;<pos:position pos:line="1" pos:column="20"/></modifier></type>
<name><name pos:line="2" pos:column="1">ACLChecklist<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">fastCheck<pos:position pos:line="2" pos:column="24"/></name></name><parameter_list pos:line="2" pos:column="24">(<parameter><decl><type><specifier pos:line="2" pos:column="25">const<pos:position pos:line="2" pos:column="30"/></specifier> <name><name pos:line="2" pos:column="31">Acl<pos:position pos:line="2" pos:column="34"/></name><operator pos:line="2" pos:column="34">::<pos:position pos:line="2" pos:column="36"/></operator><name pos:line="2" pos:column="36">Tree<pos:position pos:line="2" pos:column="40"/></name></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type> <name pos:line="2" pos:column="43">list<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="48"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">PROF_start<pos:position pos:line="4" pos:column="15"/></name><argument_list pos:line="4" pos:column="15">(<argument><expr><name pos:line="4" pos:column="16">aclCheckFast<pos:position pos:line="4" pos:column="28"/></name></expr></argument>)<pos:position pos:line="4" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="30"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="6" pos:column="5">preCheck<pos:position pos:line="6" pos:column="13"/></name><argument_list pos:line="6" pos:column="13">(<argument><expr><literal type="string" pos:line="6" pos:column="14">"fast ACLs"<pos:position pos:line="6" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name pos:line="7" pos:column="5">asyncCaller_<pos:position pos:line="7" pos:column="17"/></name> <operator pos:line="7" pos:column="18">=<pos:position pos:line="7" pos:column="19"/></operator> <literal type="boolean" pos:line="7" pos:column="20">false<pos:position pos:line="7" pos:column="25"/></literal></expr>;<pos:position pos:line="7" pos:column="26"/></expr_stmt>

    <comment type="line" pos:line="9" pos:column="5">// Concurrent checks are not supported, but sequential checks are, and they</comment>
    <comment type="line" pos:line="10" pos:column="5">// may use a mixture of fastCheck(void) and fastCheck(list) calls.</comment>
    <decl_stmt><decl><type><specifier pos:line="11" pos:column="5">const<pos:position pos:line="11" pos:column="10"/></specifier> <name><name pos:line="11" pos:column="11">Acl<pos:position pos:line="11" pos:column="14"/></name><operator pos:line="11" pos:column="14">::<pos:position pos:line="11" pos:column="16"/></operator><name pos:line="11" pos:column="16">Tree<pos:position pos:line="11" pos:column="20"/></name></name> <modifier pos:line="11" pos:column="21">*<pos:position pos:line="11" pos:column="22"/></modifier> <specifier pos:line="11" pos:column="23">const<pos:position pos:line="11" pos:column="28"/></specifier></type> <name pos:line="11" pos:column="29">savedList<pos:position pos:line="11" pos:column="38"/></name> <init pos:line="11" pos:column="39">= <expr><name pos:line="11" pos:column="41">accessList<pos:position pos:line="11" pos:column="51"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="52"/></decl_stmt>

    <expr_stmt><expr><name pos:line="13" pos:column="5">accessList<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">=<pos:position pos:line="13" pos:column="17"/></operator> <call><name pos:line="13" pos:column="18">cbdataReference<pos:position pos:line="13" pos:column="33"/></name><argument_list pos:line="13" pos:column="33">(<argument><expr><name pos:line="13" pos:column="34">list<pos:position pos:line="13" pos:column="38"/></name></expr></argument>)<pos:position pos:line="13" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="40"/></expr_stmt>

    <comment type="line" pos:line="15" pos:column="5">// assume DENY/ALLOW on mis/matches due to action-free accessList</comment>
    <comment type="line" pos:line="16" pos:column="5">// matchAndFinish() takes care of the ALLOW case</comment>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name pos:line="17" pos:column="9">accessList<pos:position pos:line="17" pos:column="19"/></name> <operator pos:line="17" pos:column="20">&amp;&amp;<pos:position pos:line="17" pos:column="30"/></operator> <call><name pos:line="17" pos:column="23">cbdataReferenceValid<pos:position pos:line="17" pos:column="43"/></name><argument_list pos:line="17" pos:column="43">(<argument><expr><name pos:line="17" pos:column="44">accessList<pos:position pos:line="17" pos:column="54"/></name></expr></argument>)<pos:position pos:line="17" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="56"/></condition><then pos:line="17" pos:column="56">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="9">matchAndFinish<pos:position pos:line="18" pos:column="23"/></name><argument_list pos:line="18" pos:column="23">()<pos:position pos:line="18" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="26"/></expr_stmt></block></then></if> <comment type="line" pos:line="18" pos:column="27">// calls markFinished() on success</comment>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><operator pos:line="19" pos:column="9">!<pos:position pos:line="19" pos:column="10"/></operator><call><name pos:line="19" pos:column="10">finished<pos:position pos:line="19" pos:column="18"/></name><argument_list pos:line="19" pos:column="18">()<pos:position pos:line="19" pos:column="20"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="21"/></condition><then pos:line="19" pos:column="21">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="9">markFinished<pos:position pos:line="20" pos:column="21"/></name><argument_list pos:line="20" pos:column="21">(<argument><expr><name pos:line="20" pos:column="22">ACCESS_DENIED<pos:position pos:line="20" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="37">"ACLs failed to match"<pos:position pos:line="20" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="61"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="22" pos:column="5">cbdataReferenceDone<pos:position pos:line="22" pos:column="24"/></name><argument_list pos:line="22" pos:column="24">(<argument><expr><name pos:line="22" pos:column="25">accessList<pos:position pos:line="22" pos:column="35"/></name></expr></argument>)<pos:position pos:line="22" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name pos:line="23" pos:column="5">accessList<pos:position pos:line="23" pos:column="15"/></name> <operator pos:line="23" pos:column="16">=<pos:position pos:line="23" pos:column="17"/></operator> <name pos:line="23" pos:column="18">savedList<pos:position pos:line="23" pos:column="27"/></name></expr>;<pos:position pos:line="23" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name pos:line="24" pos:column="5">occupied_<pos:position pos:line="24" pos:column="14"/></name> <operator pos:line="24" pos:column="15">=<pos:position pos:line="24" pos:column="16"/></operator> <literal type="boolean" pos:line="24" pos:column="17">false<pos:position pos:line="24" pos:column="22"/></literal></expr>;<pos:position pos:line="24" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">PROF_stop<pos:position pos:line="25" pos:column="14"/></name><argument_list pos:line="25" pos:column="14">(<argument><expr><name pos:line="25" pos:column="15">aclCheckFast<pos:position pos:line="25" pos:column="27"/></name></expr></argument>)<pos:position pos:line="25" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="29"/></expr_stmt>
    <return pos:line="26" pos:column="5">return <expr><call><name pos:line="26" pos:column="12">currentAnswer<pos:position pos:line="26" pos:column="25"/></name><argument_list pos:line="26" pos:column="25">()<pos:position pos:line="26" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="28"/></return>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
