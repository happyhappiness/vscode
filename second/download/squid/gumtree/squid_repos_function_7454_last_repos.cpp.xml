<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7454_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Security<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">HandshakeParser<pos:position pos:line="2" pos:column="26"/></name><operator pos:line="2" pos:column="26">::<pos:position pos:line="2" pos:column="28"/></operator><name pos:line="2" pos:column="28">parseV23Ciphers<pos:position pos:line="2" pos:column="43"/></name></name><parameter_list pos:line="2" pos:column="43">(<parameter><decl><type><specifier pos:line="2" pos:column="44">const<pos:position pos:line="2" pos:column="49"/></specifier> <name pos:line="2" pos:column="50">SBuf<pos:position pos:line="2" pos:column="54"/></name> <modifier pos:line="2" pos:column="55">&amp;<pos:position pos:line="2" pos:column="60"/></modifier></type><name pos:line="2" pos:column="56">raw<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="60"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">Parser<pos:position pos:line="4" pos:column="11"/></name><operator pos:line="4" pos:column="11">::<pos:position pos:line="4" pos:column="13"/></operator><name pos:line="4" pos:column="13">BinaryTokenizer<pos:position pos:line="4" pos:column="28"/></name></name></type> <name pos:line="4" pos:column="29">tk<pos:position pos:line="4" pos:column="31"/></name><argument_list pos:line="4" pos:column="31">(<argument><expr><name pos:line="4" pos:column="32">raw<pos:position pos:line="4" pos:column="35"/></name></expr></argument>)<pos:position pos:line="4" pos:column="36"/></argument_list></decl>;<pos:position pos:line="4" pos:column="37"/></decl_stmt>
    <while pos:line="5" pos:column="5">while <condition pos:line="5" pos:column="11">(<expr><operator pos:line="5" pos:column="12">!<pos:position pos:line="5" pos:column="13"/></operator><call><name><name pos:line="5" pos:column="13">tk<pos:position pos:line="5" pos:column="15"/></name><operator pos:line="5" pos:column="15">.<pos:position pos:line="5" pos:column="16"/></operator><name pos:line="5" pos:column="16">atEnd<pos:position pos:line="5" pos:column="21"/></name></name><argument_list pos:line="5" pos:column="21">()<pos:position pos:line="5" pos:column="23"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="24"/></condition> <block pos:line="5" pos:column="25">{
        <comment type="line" pos:line="6" pos:column="9">// RFC 6101 Appendix E, RFC 5246 Appendix E2</comment>
        <comment type="line" pos:line="7" pos:column="9">// Unlike TLS, ciphers in SSLv23 Hellos are 3 bytes long and come in</comment>
        <comment type="line" pos:line="8" pos:column="9">// two versions: v2 and v3. The two versions may co-exist in a single</comment>
        <comment type="line" pos:line="9" pos:column="9">// SSLv23 Hello. Only v3 ciphers have a first byte value of zero.</comment>
        <comment type="line" pos:line="10" pos:column="9">// The ciphers are needed for our peeking/staring code that</comment>
        <comment type="line" pos:line="11" pos:column="9">// does not support SSLv2, so we ignore v2 ciphers.</comment>
        <decl_stmt><decl><type><specifier pos:line="12" pos:column="9">const<pos:position pos:line="12" pos:column="14"/></specifier> <name pos:line="12" pos:column="15">uint8_t<pos:position pos:line="12" pos:column="22"/></name></type> <name pos:line="12" pos:column="23">prefix<pos:position pos:line="12" pos:column="29"/></name> <init pos:line="12" pos:column="30">= <expr><call><name><name pos:line="12" pos:column="32">tk<pos:position pos:line="12" pos:column="34"/></name><operator pos:line="12" pos:column="34">.<pos:position pos:line="12" pos:column="35"/></operator><name pos:line="12" pos:column="35">uint8<pos:position pos:line="12" pos:column="40"/></name></name><argument_list pos:line="12" pos:column="40">(<argument><expr><literal type="string" pos:line="12" pos:column="41">"prefix"<pos:position pos:line="12" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="51"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="13" pos:column="9">const<pos:position pos:line="13" pos:column="14"/></specifier> <name pos:line="13" pos:column="15">uint16_t<pos:position pos:line="13" pos:column="23"/></name></type> <name pos:line="13" pos:column="24">cipher<pos:position pos:line="13" pos:column="30"/></name> <init pos:line="13" pos:column="31">= <expr><call><name><name pos:line="13" pos:column="33">tk<pos:position pos:line="13" pos:column="35"/></name><operator pos:line="13" pos:column="35">.<pos:position pos:line="13" pos:column="36"/></operator><name pos:line="13" pos:column="36">uint16<pos:position pos:line="13" pos:column="42"/></name></name><argument_list pos:line="13" pos:column="42">(<argument><expr><literal type="string" pos:line="13" pos:column="43">"cipher"<pos:position pos:line="13" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="53"/></decl_stmt>
        <if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">prefix<pos:position pos:line="14" pos:column="19"/></name> <operator pos:line="14" pos:column="20">==<pos:position pos:line="14" pos:column="22"/></operator> <literal type="number" pos:line="14" pos:column="23">0<pos:position pos:line="14" pos:column="24"/></literal></expr>)<pos:position pos:line="14" pos:column="25"/></condition><then pos:line="14" pos:column="25">
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="15" pos:column="13">details<pos:position pos:line="15" pos:column="20"/></name><operator pos:line="15" pos:column="20">-&gt;<pos:position pos:line="15" pos:column="25"/></operator><name pos:line="15" pos:column="22">ciphers<pos:position pos:line="15" pos:column="29"/></name><operator pos:line="15" pos:column="29">.<pos:position pos:line="15" pos:column="30"/></operator><name pos:line="15" pos:column="30">insert<pos:position pos:line="15" pos:column="36"/></name></name><argument_list pos:line="15" pos:column="36">(<argument><expr><name pos:line="15" pos:column="37">cipher<pos:position pos:line="15" pos:column="43"/></name></expr></argument>)<pos:position pos:line="15" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="45"/></expr_stmt></block></then></if>
    }<pos:position pos:line="16" pos:column="6"/></block></while>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
