<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_181_squid-3.5.27.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type>
<name pos:line="2" pos:column="1">xmemAlloc<pos:position pos:line="2" pos:column="10"/></name><parameter_list pos:line="2" pos:column="10">(<parameter><decl><type><name pos:line="2" pos:column="11">memitem<pos:position pos:line="2" pos:column="18"/></name> <modifier pos:line="2" pos:column="19">*<pos:position pos:line="2" pos:column="20"/></modifier></type> <name pos:line="2" pos:column="21">item<pos:position pos:line="2" pos:column="25"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="26"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><specifier pos:line="4" pos:column="5">extern<pos:position pos:line="4" pos:column="11"/></specifier> <type><name pos:line="4" pos:column="12">MemPool<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">StringPool<pos:position pos:line="4" pos:column="31"/></name></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><name pos:line="5" pos:column="12">item<pos:position pos:line="5" pos:column="16"/></name> <operator pos:line="5" pos:column="17">&amp;&amp;<pos:position pos:line="5" pos:column="27"/></operator> <name><name pos:line="5" pos:column="20">item<pos:position pos:line="5" pos:column="24"/></name><operator pos:line="5" pos:column="24">-&gt;<pos:position pos:line="5" pos:column="29"/></operator><name pos:line="5" pos:column="26">pool<pos:position pos:line="5" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="5" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="32"/></expr_stmt>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">StringPool<pos:position pos:line="6" pos:column="19"/></name> <operator pos:line="6" pos:column="20">==<pos:position pos:line="6" pos:column="22"/></operator> <name><name pos:line="6" pos:column="23">item<pos:position pos:line="6" pos:column="27"/></name><operator pos:line="6" pos:column="27">-&gt;<pos:position pos:line="6" pos:column="32"/></operator><name pos:line="6" pos:column="29">pool<pos:position pos:line="6" pos:column="33"/></name></name></expr>)<pos:position pos:line="6" pos:column="34"/></condition><then pos:line="6" pos:column="34">
        <block type="pseudo"><return pos:line="7" pos:column="9">return <expr><call><name pos:line="7" pos:column="16">memStringAlloc<pos:position pos:line="7" pos:column="30"/></name><argument_list pos:line="7" pos:column="30">(<argument><expr><name><name pos:line="7" pos:column="31">item<pos:position pos:line="7" pos:column="35"/></name><operator pos:line="7" pos:column="35">-&gt;<pos:position pos:line="7" pos:column="40"/></operator><name pos:line="7" pos:column="37">pool<pos:position pos:line="7" pos:column="41"/></name></name></expr></argument>, <argument><expr><name><name pos:line="7" pos:column="43">item<pos:position pos:line="7" pos:column="47"/></name><operator pos:line="7" pos:column="47">-&gt;<pos:position pos:line="7" pos:column="52"/></operator><name pos:line="7" pos:column="49">size<pos:position pos:line="7" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="55"/></return></block></then>
    <else pos:line="8" pos:column="5">else
        <block type="pseudo"><return pos:line="9" pos:column="9">return <expr><call><name pos:line="9" pos:column="16">memAlloc<pos:position pos:line="9" pos:column="24"/></name><argument_list pos:line="9" pos:column="24">(<argument><expr><name><name pos:line="9" pos:column="25">item<pos:position pos:line="9" pos:column="29"/></name><operator pos:line="9" pos:column="29">-&gt;<pos:position pos:line="9" pos:column="34"/></operator><name pos:line="9" pos:column="31">pool<pos:position pos:line="9" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="37"/></return></block></else></if>
}<pos:position pos:line="10" pos:column="2"/></block></function></unit>
