<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2327_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">store_client<pos:position pos:line="1" pos:column="13"/></name> <modifier pos:line="1" pos:column="14">*<pos:position pos:line="1" pos:column="15"/></modifier></type>
<name pos:line="2" pos:column="1">storeClientListAdd<pos:position pos:line="2" pos:column="19"/></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name pos:line="2" pos:column="20">StoreEntry<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type> <name pos:line="2" pos:column="33">e<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="36">void<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">data<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="47"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">MemObject<pos:position pos:line="4" pos:column="14"/></name> <modifier pos:line="4" pos:column="15">*<pos:position pos:line="4" pos:column="16"/></modifier></type><name pos:line="4" pos:column="16">mem<pos:position pos:line="4" pos:column="19"/></name> <init pos:line="4" pos:column="20">= <expr><name><name pos:line="4" pos:column="22">e<pos:position pos:line="4" pos:column="23"/></name><operator pos:line="4" pos:column="23">-&gt;<pos:position pos:line="4" pos:column="28"/></operator><name pos:line="4" pos:column="25">mem_obj<pos:position pos:line="4" pos:column="32"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">store_client<pos:position pos:line="5" pos:column="17"/></name> <modifier pos:line="5" pos:column="18">*<pos:position pos:line="5" pos:column="19"/></modifier></type><name pos:line="5" pos:column="19">sc<pos:position pos:line="5" pos:column="21"/></name></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><name pos:line="6" pos:column="12">mem<pos:position pos:line="6" pos:column="15"/></name></expr></argument>)<pos:position pos:line="6" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="17"/></expr_stmt>
<cpp:if pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">if<pos:position pos:line="7" pos:column="4"/></cpp:directive> <expr><name pos:line="7" pos:column="5">STORE_CLIENT_LIST_DEBUG<pos:position pos:line="7" pos:column="28"/></name></expr></cpp:if>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><call><name pos:line="9" pos:column="9">storeClientListSearch<pos:position pos:line="9" pos:column="30"/></name><argument_list pos:line="9" pos:column="30">(<argument><expr><name pos:line="9" pos:column="31">mem<pos:position pos:line="9" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="36">data<pos:position pos:line="9" pos:column="40"/></name></expr></argument>)<pos:position pos:line="9" pos:column="41"/></argument_list></call> <operator pos:line="9" pos:column="42">!=<pos:position pos:line="9" pos:column="44"/></operator> <name pos:line="9" pos:column="45">NULL<pos:position pos:line="9" pos:column="49"/></name></expr>)<pos:position pos:line="9" pos:column="50"/></condition><then pos:line="9" pos:column="50">
        <comment type="block" pos:line="10" pos:column="9">/* XXX die! */</comment>
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="9">assert<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><literal type="number" pos:line="11" pos:column="16">1<pos:position pos:line="11" pos:column="17"/></literal> <operator pos:line="11" pos:column="18">==<pos:position pos:line="11" pos:column="20"/></operator> <literal type="number" pos:line="11" pos:column="21">0<pos:position pos:line="11" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="24"/></expr_stmt></block></then></if>

<cpp:endif pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">endif<pos:position pos:line="13" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><name pos:line="15" pos:column="5">sc<pos:position pos:line="15" pos:column="7"/></name> <operator pos:line="15" pos:column="8">=<pos:position pos:line="15" pos:column="9"/></operator> <operator pos:line="15" pos:column="10">new<pos:position pos:line="15" pos:column="13"/></operator> <call><name pos:line="15" pos:column="14">store_client<pos:position pos:line="15" pos:column="26"/></name> <argument_list pos:line="15" pos:column="27">(<argument><expr><name pos:line="15" pos:column="28">e<pos:position pos:line="15" pos:column="29"/></name></expr></argument>)<pos:position pos:line="15" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="31"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="17" pos:column="5">mem<pos:position pos:line="17" pos:column="8"/></name><operator pos:line="17" pos:column="8">-&gt;<pos:position pos:line="17" pos:column="13"/></operator><name pos:line="17" pos:column="10">addClient<pos:position pos:line="17" pos:column="19"/></name></name><argument_list pos:line="17" pos:column="19">(<argument><expr><name pos:line="17" pos:column="20">sc<pos:position pos:line="17" pos:column="22"/></name></expr></argument>)<pos:position pos:line="17" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="24"/></expr_stmt>

    <return pos:line="19" pos:column="5">return <expr><name pos:line="19" pos:column="12">sc<pos:position pos:line="19" pos:column="14"/></name></expr>;<pos:position pos:line="19" pos:column="15"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
