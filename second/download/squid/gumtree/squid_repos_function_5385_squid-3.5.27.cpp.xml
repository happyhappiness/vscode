<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5385_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">size_t<pos:position pos:line="1" pos:column="7"/></name></type> <name><name pos:line="1" pos:column="8">Client<pos:position pos:line="1" pos:column="14"/></name><operator pos:line="1" pos:column="14">::<pos:position pos:line="1" pos:column="16"/></operator><name pos:line="1" pos:column="16">replyBodySpace<pos:position pos:line="1" pos:column="30"/></name></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><specifier pos:line="1" pos:column="31">const<pos:position pos:line="1" pos:column="36"/></specifier> <name pos:line="1" pos:column="37">MemBuf<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">&amp;<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="45">readBuf<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>,
                              <parameter><decl><type><specifier pos:line="2" pos:column="31">const<pos:position pos:line="2" pos:column="36"/></specifier> <name pos:line="2" pos:column="37">size_t<pos:position pos:line="2" pos:column="43"/></name></type> <name pos:line="2" pos:column="44">minSpace<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="53"/></parameter_list> <specifier pos:line="2" pos:column="54">const<pos:position pos:line="2" pos:column="59"/></specifier>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">size_t<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">space<pos:position pos:line="4" pos:column="17"/></name> <init pos:line="4" pos:column="18">= <expr><call><name><name pos:line="4" pos:column="20">readBuf<pos:position pos:line="4" pos:column="27"/></name><operator pos:line="4" pos:column="27">.<pos:position pos:line="4" pos:column="28"/></operator><name pos:line="4" pos:column="28">spaceSize<pos:position pos:line="4" pos:column="37"/></name></name><argument_list pos:line="4" pos:column="37">()<pos:position pos:line="4" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="40"/></decl_stmt> <comment type="line" pos:line="4" pos:column="41">// available space w/o heroic measures</comment>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><name pos:line="5" pos:column="9">space<pos:position pos:line="5" pos:column="14"/></name> <operator pos:line="5" pos:column="15">&lt;<pos:position pos:line="5" pos:column="19"/></operator> <name pos:line="5" pos:column="17">minSpace<pos:position pos:line="5" pos:column="25"/></name></expr>)<pos:position pos:line="5" pos:column="26"/></condition><then pos:line="5" pos:column="26"> <block pos:line="5" pos:column="27">{
        <decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">size_t<pos:position pos:line="6" pos:column="21"/></name></type> <name pos:line="6" pos:column="22">maxSpace<pos:position pos:line="6" pos:column="30"/></name> <init pos:line="6" pos:column="31">= <expr><call><name><name pos:line="6" pos:column="33">readBuf<pos:position pos:line="6" pos:column="40"/></name><operator pos:line="6" pos:column="40">.<pos:position pos:line="6" pos:column="41"/></operator><name pos:line="6" pos:column="41">potentialSpaceSize<pos:position pos:line="6" pos:column="59"/></name></name><argument_list pos:line="6" pos:column="59">()<pos:position pos:line="6" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="62"/></decl_stmt> <comment type="line" pos:line="6" pos:column="63">// absolute best</comment>
        <expr_stmt><expr><name pos:line="7" pos:column="9">space<pos:position pos:line="7" pos:column="14"/></name> <operator pos:line="7" pos:column="15">=<pos:position pos:line="7" pos:column="16"/></operator> <call><name pos:line="7" pos:column="17">min<pos:position pos:line="7" pos:column="20"/></name><argument_list pos:line="7" pos:column="20">(<argument><expr><name pos:line="7" pos:column="21">minSpace<pos:position pos:line="7" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="31">maxSpace<pos:position pos:line="7" pos:column="39"/></name></expr></argument>)<pos:position pos:line="7" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="41"/></expr_stmt> <comment type="line" pos:line="7" pos:column="42">// do not promise more than asked</comment>
    }<pos:position pos:line="8" pos:column="6"/></block></then></if>

<cpp:if pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">if<pos:position pos:line="10" pos:column="4"/></cpp:directive> <expr><name pos:line="10" pos:column="5">USE_ADAPTATION<pos:position pos:line="10" pos:column="19"/></name></expr></cpp:if>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name pos:line="11" pos:column="9">responseBodyBuffer<pos:position pos:line="11" pos:column="27"/></name></expr>)<pos:position pos:line="11" pos:column="28"/></condition><then pos:line="11" pos:column="28"> <block pos:line="11" pos:column="29">{
        <return pos:line="12" pos:column="9">return <expr><literal type="number" pos:line="12" pos:column="16">0<pos:position pos:line="12" pos:column="17"/></literal></expr>;<pos:position pos:line="12" pos:column="18"/></return>   <comment type="line" pos:line="12" pos:column="21">// Stop reading if already overflowed waiting for ICAP to catch up</comment>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">virginBodyDestination<pos:position pos:line="15" pos:column="30"/></name> <operator pos:line="15" pos:column="31">!=<pos:position pos:line="15" pos:column="33"/></operator> <name pos:line="15" pos:column="34">NULL<pos:position pos:line="15" pos:column="38"/></name></expr>)<pos:position pos:line="15" pos:column="39"/></condition><then pos:line="15" pos:column="39"> <block pos:line="15" pos:column="40">{
        <comment type="block" pos:line="16" pos:column="9">/*
         * BodyPipe buffer has a finite size limit.  We
         * should not read more data from the network than will fit
         * into the pipe buffer or we _lose_ what did not fit if
         * the response ends sooner that BodyPipe frees up space:
         * There is no code to keep pumping data into the pipe once
         * response ends and serverComplete() is called.
         *
         * If the pipe is totally full, don't register the read handler.
         * The BodyPipe will call our noteMoreBodySpaceAvailable() method
         * when it has free space again.
         */</comment>
        <decl_stmt><decl><type><name pos:line="28" pos:column="9">size_t<pos:position pos:line="28" pos:column="15"/></name></type> <name pos:line="28" pos:column="16">adaptation_space<pos:position pos:line="28" pos:column="32"/></name> <init pos:line="28" pos:column="33">=
            <expr><call><name><name pos:line="29" pos:column="13">virginBodyDestination<pos:position pos:line="29" pos:column="34"/></name><operator pos:line="29" pos:column="34">-&gt;<pos:position pos:line="29" pos:column="39"/></operator><name pos:line="29" pos:column="36">buf<pos:position pos:line="29" pos:column="39"/></name></name><argument_list pos:line="29" pos:column="39">()<pos:position pos:line="29" pos:column="41"/></argument_list></call><operator pos:line="29" pos:column="41">.<pos:position pos:line="29" pos:column="42"/></operator><call><name pos:line="29" pos:column="42">potentialSpaceSize<pos:position pos:line="29" pos:column="60"/></name><argument_list pos:line="29" pos:column="60">()<pos:position pos:line="29" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="29" pos:column="63"/></decl_stmt>

        <expr_stmt><expr><call><name pos:line="31" pos:column="9">debugs<pos:position pos:line="31" pos:column="15"/></name><argument_list pos:line="31" pos:column="15">(<argument><expr><literal type="number" pos:line="31" pos:column="16">11<pos:position pos:line="31" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="31" pos:column="19">9<pos:position pos:line="31" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="22">"Client may read up to min("<pos:position pos:line="31" pos:column="50"/></literal> <operator pos:line="31" pos:column="51">&lt;&lt;<pos:position pos:line="31" pos:column="59"/></operator>
               <name pos:line="32" pos:column="16">adaptation_space<pos:position pos:line="32" pos:column="32"/></name> <operator pos:line="32" pos:column="33">&lt;&lt;<pos:position pos:line="32" pos:column="41"/></operator> <literal type="string" pos:line="32" pos:column="36">", "<pos:position pos:line="32" pos:column="40"/></literal> <operator pos:line="32" pos:column="41">&lt;&lt;<pos:position pos:line="32" pos:column="49"/></operator> <name pos:line="32" pos:column="44">space<pos:position pos:line="32" pos:column="49"/></name> <operator pos:line="32" pos:column="50">&lt;&lt;<pos:position pos:line="32" pos:column="58"/></operator> <literal type="string" pos:line="32" pos:column="53">") bytes"<pos:position pos:line="32" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="64"/></expr_stmt>

        <if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name pos:line="34" pos:column="13">adaptation_space<pos:position pos:line="34" pos:column="29"/></name> <operator pos:line="34" pos:column="30">&lt;<pos:position pos:line="34" pos:column="34"/></operator> <name pos:line="34" pos:column="32">space<pos:position pos:line="34" pos:column="37"/></name></expr>)<pos:position pos:line="34" pos:column="38"/></condition><then pos:line="34" pos:column="38">
            <block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="13">space<pos:position pos:line="35" pos:column="18"/></name> <operator pos:line="35" pos:column="19">=<pos:position pos:line="35" pos:column="20"/></operator> <name pos:line="35" pos:column="21">adaptation_space<pos:position pos:line="35" pos:column="37"/></name></expr>;<pos:position pos:line="35" pos:column="38"/></expr_stmt></block></then></if>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if>
<cpp:endif pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">endif<pos:position pos:line="37" pos:column="7"/></cpp:directive></cpp:endif>

    <return pos:line="39" pos:column="5">return <expr><name pos:line="39" pos:column="12">space<pos:position pos:line="39" pos:column="17"/></name></expr>;<pos:position pos:line="39" pos:column="18"/></return>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
