<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3025_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">StoreEntry<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">setMemStatus<pos:position pos:line="2" pos:column="25"/></name></name><parameter_list pos:line="2" pos:column="25">(<parameter><decl><type><name pos:line="2" pos:column="26">mem_status_t<pos:position pos:line="2" pos:column="38"/></name></type> <name pos:line="2" pos:column="39">new_status<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="50"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">new_status<pos:position pos:line="4" pos:column="19"/></name> <operator pos:line="4" pos:column="20">==<pos:position pos:line="4" pos:column="22"/></operator> <name pos:line="4" pos:column="23">mem_status<pos:position pos:line="4" pos:column="33"/></name></expr>)<pos:position pos:line="4" pos:column="34"/></condition><then pos:line="4" pos:column="34">
        <block type="pseudo"><return pos:line="5" pos:column="9">return;<pos:position pos:line="5" pos:column="16"/></return></block></then></if>

    <comment type="line" pos:line="7" pos:column="5">// are we using a shared memory cache?</comment>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name><name pos:line="8" pos:column="9">Config<pos:position pos:line="8" pos:column="15"/></name><operator pos:line="8" pos:column="15">.<pos:position pos:line="8" pos:column="16"/></operator><name pos:line="8" pos:column="16">memShared<pos:position pos:line="8" pos:column="25"/></name></name> <operator pos:line="8" pos:column="26">&amp;&amp;<pos:position pos:line="8" pos:column="36"/></operator> <call><name pos:line="8" pos:column="29">IamWorkerProcess<pos:position pos:line="8" pos:column="45"/></name><argument_list pos:line="8" pos:column="45">()<pos:position pos:line="8" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="48"/></condition><then pos:line="8" pos:column="48"> <block pos:line="8" pos:column="49">{
        <comment type="line" pos:line="9" pos:column="9">// enumerate calling cases if shared memory is enabled</comment>
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">assert<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><name pos:line="10" pos:column="16">new_status<pos:position pos:line="10" pos:column="26"/></name> <operator pos:line="10" pos:column="27">!=<pos:position pos:line="10" pos:column="29"/></operator> <name pos:line="10" pos:column="30">IN_MEMORY<pos:position pos:line="10" pos:column="39"/></name> <operator pos:line="10" pos:column="40">||<pos:position pos:line="10" pos:column="42"/></operator> <call><name pos:line="10" pos:column="43">EBIT_TEST<pos:position pos:line="10" pos:column="52"/></name><argument_list pos:line="10" pos:column="52">(<argument><expr><name pos:line="10" pos:column="53">flags<pos:position pos:line="10" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="60">ENTRY_SPECIAL<pos:position pos:line="10" pos:column="73"/></name></expr></argument>)<pos:position pos:line="10" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="76"/></expr_stmt>
        <comment type="line" pos:line="11" pos:column="9">// This method was designed to update replacement policy, not to</comment>
        <comment type="line" pos:line="12" pos:column="9">// actually purge something from the memory cache (TODO: rename?).</comment>
        <comment type="line" pos:line="13" pos:column="9">// Shared memory cache does not have a policy that needs updates.</comment>
        <expr_stmt><expr><name pos:line="14" pos:column="9">mem_status<pos:position pos:line="14" pos:column="19"/></name> <operator pos:line="14" pos:column="20">=<pos:position pos:line="14" pos:column="21"/></operator> <name pos:line="14" pos:column="22">new_status<pos:position pos:line="14" pos:column="32"/></name></expr>;<pos:position pos:line="14" pos:column="33"/></expr_stmt>
        <return pos:line="15" pos:column="9">return;<pos:position pos:line="15" pos:column="16"/></return>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="18" pos:column="5">assert<pos:position pos:line="18" pos:column="11"/></name><argument_list pos:line="18" pos:column="11">(<argument><expr><name pos:line="18" pos:column="12">mem_obj<pos:position pos:line="18" pos:column="19"/></name> <operator pos:line="18" pos:column="20">!=<pos:position pos:line="18" pos:column="22"/></operator> <name pos:line="18" pos:column="23">NULL<pos:position pos:line="18" pos:column="27"/></name></expr></argument>)<pos:position pos:line="18" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="29"/></expr_stmt>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">new_status<pos:position pos:line="20" pos:column="19"/></name> <operator pos:line="20" pos:column="20">==<pos:position pos:line="20" pos:column="22"/></operator> <name pos:line="20" pos:column="23">IN_MEMORY<pos:position pos:line="20" pos:column="32"/></name></expr>)<pos:position pos:line="20" pos:column="33"/></condition><then pos:line="20" pos:column="33"> <block pos:line="20" pos:column="34">{
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">assert<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><name><name pos:line="21" pos:column="16">mem_obj<pos:position pos:line="21" pos:column="23"/></name><operator pos:line="21" pos:column="23">-&gt;<pos:position pos:line="21" pos:column="28"/></operator><name pos:line="21" pos:column="25">inmem_lo<pos:position pos:line="21" pos:column="33"/></name></name> <operator pos:line="21" pos:column="34">==<pos:position pos:line="21" pos:column="36"/></operator> <literal type="number" pos:line="21" pos:column="37">0<pos:position pos:line="21" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="40"/></expr_stmt>

        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><call><name pos:line="23" pos:column="13">EBIT_TEST<pos:position pos:line="23" pos:column="22"/></name><argument_list pos:line="23" pos:column="22">(<argument><expr><name pos:line="23" pos:column="23">flags<pos:position pos:line="23" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="30">ENTRY_SPECIAL<pos:position pos:line="23" pos:column="43"/></name></expr></argument>)<pos:position pos:line="23" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="45"/></condition><then pos:line="23" pos:column="45"> <block pos:line="23" pos:column="46">{
            <expr_stmt><expr><call><name pos:line="24" pos:column="13">debugs<pos:position pos:line="24" pos:column="19"/></name><argument_list pos:line="24" pos:column="19">(<argument><expr><literal type="number" pos:line="24" pos:column="20">20<pos:position pos:line="24" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="24">4<pos:position pos:line="24" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="27">"StoreEntry::setMemStatus: not inserting special "<pos:position pos:line="24" pos:column="77"/></literal> <operator pos:line="24" pos:column="78">&lt;&lt;<pos:position pos:line="24" pos:column="86"/></operator> <name><name pos:line="24" pos:column="81">mem_obj<pos:position pos:line="24" pos:column="88"/></name><operator pos:line="24" pos:column="88">-&gt;<pos:position pos:line="24" pos:column="93"/></operator><name pos:line="24" pos:column="90">url<pos:position pos:line="24" pos:column="93"/></name></name> <operator pos:line="24" pos:column="94">&lt;&lt;<pos:position pos:line="24" pos:column="102"/></operator> <literal type="string" pos:line="24" pos:column="97">" into policy"<pos:position pos:line="24" pos:column="111"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="112"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="113"/></expr_stmt>
        }<pos:position pos:line="25" pos:column="10"/></block></then> <else pos:line="25" pos:column="11">else <block pos:line="25" pos:column="16">{
            <expr_stmt><expr><call><name><name pos:line="26" pos:column="13">mem_policy<pos:position pos:line="26" pos:column="23"/></name><operator pos:line="26" pos:column="23">-&gt;<pos:position pos:line="26" pos:column="28"/></operator><name pos:line="26" pos:column="25">Add<pos:position pos:line="26" pos:column="28"/></name></name><argument_list pos:line="26" pos:column="28">(<argument><expr><name pos:line="26" pos:column="29">mem_policy<pos:position pos:line="26" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="41">this<pos:position pos:line="26" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="47">&amp;<pos:position pos:line="26" pos:column="52"/></operator><name><name pos:line="26" pos:column="48">mem_obj<pos:position pos:line="26" pos:column="55"/></name><operator pos:line="26" pos:column="55">-&gt;<pos:position pos:line="26" pos:column="60"/></operator><name pos:line="26" pos:column="57">repl<pos:position pos:line="26" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="63"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="27" pos:column="13">debugs<pos:position pos:line="27" pos:column="19"/></name><argument_list pos:line="27" pos:column="19">(<argument><expr><literal type="number" pos:line="27" pos:column="20">20<pos:position pos:line="27" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="24">4<pos:position pos:line="27" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="27">"StoreEntry::setMemStatus: inserted mem node "<pos:position pos:line="27" pos:column="73"/></literal> <operator pos:line="27" pos:column="74">&lt;&lt;<pos:position pos:line="27" pos:column="82"/></operator> <name><name pos:line="27" pos:column="77">mem_obj<pos:position pos:line="27" pos:column="84"/></name><operator pos:line="27" pos:column="84">-&gt;<pos:position pos:line="27" pos:column="89"/></operator><name pos:line="27" pos:column="86">url<pos:position pos:line="27" pos:column="89"/></name></name> <operator pos:line="27" pos:column="90">&lt;&lt;<pos:position pos:line="27" pos:column="98"/></operator> <literal type="string" pos:line="27" pos:column="93">" key: "<pos:position pos:line="27" pos:column="101"/></literal> <operator pos:line="27" pos:column="102">&lt;&lt;<pos:position pos:line="27" pos:column="110"/></operator> <call><name pos:line="27" pos:column="105">getMD5Text<pos:position pos:line="27" pos:column="115"/></name><argument_list pos:line="27" pos:column="115">()<pos:position pos:line="27" pos:column="117"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="118"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="119"/></expr_stmt>
        }<pos:position pos:line="28" pos:column="10"/></block></else></if>

        <expr_stmt><expr><operator pos:line="30" pos:column="9">++<pos:position pos:line="30" pos:column="11"/></operator><name pos:line="30" pos:column="11">hot_obj_count<pos:position pos:line="30" pos:column="24"/></name></expr>;<pos:position pos:line="30" pos:column="25"/></expr_stmt> <comment type="line" pos:line="30" pos:column="26">// TODO: maintain for the shared hot cache as well</comment>
    }<pos:position pos:line="31" pos:column="6"/></block></then> <else pos:line="31" pos:column="7">else <block pos:line="31" pos:column="12">{
        <if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><call><name pos:line="32" pos:column="13">EBIT_TEST<pos:position pos:line="32" pos:column="22"/></name><argument_list pos:line="32" pos:column="22">(<argument><expr><name pos:line="32" pos:column="23">flags<pos:position pos:line="32" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="30">ENTRY_SPECIAL<pos:position pos:line="32" pos:column="43"/></name></expr></argument>)<pos:position pos:line="32" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="45"/></condition><then pos:line="32" pos:column="45"> <block pos:line="32" pos:column="46">{
            <expr_stmt><expr><call><name pos:line="33" pos:column="13">debugs<pos:position pos:line="33" pos:column="19"/></name><argument_list pos:line="33" pos:column="19">(<argument><expr><literal type="number" pos:line="33" pos:column="20">20<pos:position pos:line="33" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="24">4<pos:position pos:line="33" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="27">"StoreEntry::setMemStatus: special entry "<pos:position pos:line="33" pos:column="69"/></literal> <operator pos:line="33" pos:column="70">&lt;&lt;<pos:position pos:line="33" pos:column="78"/></operator> <name><name pos:line="33" pos:column="73">mem_obj<pos:position pos:line="33" pos:column="80"/></name><operator pos:line="33" pos:column="80">-&gt;<pos:position pos:line="33" pos:column="85"/></operator><name pos:line="33" pos:column="82">url<pos:position pos:line="33" pos:column="85"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="87"/></expr_stmt>
        }<pos:position pos:line="34" pos:column="10"/></block></then> <else pos:line="34" pos:column="11">else <block pos:line="34" pos:column="16">{
            <expr_stmt><expr><call><name><name pos:line="35" pos:column="13">mem_policy<pos:position pos:line="35" pos:column="23"/></name><operator pos:line="35" pos:column="23">-&gt;<pos:position pos:line="35" pos:column="28"/></operator><name pos:line="35" pos:column="25">Remove<pos:position pos:line="35" pos:column="31"/></name></name><argument_list pos:line="35" pos:column="31">(<argument><expr><name pos:line="35" pos:column="32">mem_policy<pos:position pos:line="35" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="44">this<pos:position pos:line="35" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="50">&amp;<pos:position pos:line="35" pos:column="55"/></operator><name><name pos:line="35" pos:column="51">mem_obj<pos:position pos:line="35" pos:column="58"/></name><operator pos:line="35" pos:column="58">-&gt;<pos:position pos:line="35" pos:column="63"/></operator><name pos:line="35" pos:column="60">repl<pos:position pos:line="35" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="66"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="36" pos:column="13">debugs<pos:position pos:line="36" pos:column="19"/></name><argument_list pos:line="36" pos:column="19">(<argument><expr><literal type="number" pos:line="36" pos:column="20">20<pos:position pos:line="36" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="24">4<pos:position pos:line="36" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="27">"StoreEntry::setMemStatus: removed mem node "<pos:position pos:line="36" pos:column="72"/></literal> <operator pos:line="36" pos:column="73">&lt;&lt;<pos:position pos:line="36" pos:column="81"/></operator> <name><name pos:line="36" pos:column="76">mem_obj<pos:position pos:line="36" pos:column="83"/></name><operator pos:line="36" pos:column="83">-&gt;<pos:position pos:line="36" pos:column="88"/></operator><name pos:line="36" pos:column="85">url<pos:position pos:line="36" pos:column="88"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="90"/></expr_stmt>
        }<pos:position pos:line="37" pos:column="10"/></block></else></if>

        <expr_stmt><expr><operator pos:line="39" pos:column="9">--<pos:position pos:line="39" pos:column="11"/></operator><name pos:line="39" pos:column="11">hot_obj_count<pos:position pos:line="39" pos:column="24"/></name></expr>;<pos:position pos:line="39" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="40" pos:column="6"/></block></else></if>

    <expr_stmt><expr><name pos:line="42" pos:column="5">mem_status<pos:position pos:line="42" pos:column="15"/></name> <operator pos:line="42" pos:column="16">=<pos:position pos:line="42" pos:column="17"/></operator> <name pos:line="42" pos:column="18">new_status<pos:position pos:line="42" pos:column="28"/></name></expr>;<pos:position pos:line="42" pos:column="29"/></expr_stmt>
}<pos:position pos:line="43" pos:column="2"/></block></function></unit>
