<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3774_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">bool<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">replaceCommonName<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name><name pos:line="1" pos:column="31">Security<pos:position pos:line="1" pos:column="39"/></name><operator pos:line="1" pos:column="39">::<pos:position pos:line="1" pos:column="41"/></operator><name pos:line="1" pos:column="41">CertPointer<pos:position pos:line="1" pos:column="52"/></name></name> <modifier pos:line="1" pos:column="53">&amp;<pos:position pos:line="1" pos:column="58"/></modifier></type> <name pos:line="1" pos:column="55">cert<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="61">std<pos:position pos:line="1" pos:column="64"/></name><operator pos:line="1" pos:column="64">::<pos:position pos:line="1" pos:column="66"/></operator><name pos:line="1" pos:column="66">string<pos:position pos:line="1" pos:column="72"/></name></name> <specifier pos:line="1" pos:column="73">const<pos:position pos:line="1" pos:column="78"/></specifier> <modifier pos:line="1" pos:column="79">&amp;<pos:position pos:line="1" pos:column="84"/></modifier></type><name pos:line="1" pos:column="80">rawCn<pos:position pos:line="1" pos:column="85"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="86"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="3" pos:column="5">std<pos:position pos:line="3" pos:column="8"/></name><operator pos:line="3" pos:column="8">::<pos:position pos:line="3" pos:column="10"/></operator><name pos:line="3" pos:column="10">string<pos:position pos:line="3" pos:column="16"/></name></name></type> <name pos:line="3" pos:column="17">cn<pos:position pos:line="3" pos:column="19"/></name> <init pos:line="3" pos:column="20">= <expr><name pos:line="3" pos:column="22">rawCn<pos:position pos:line="3" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>

    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><call><name><name pos:line="5" pos:column="9">cn<pos:position pos:line="5" pos:column="11"/></name><operator pos:line="5" pos:column="11">.<pos:position pos:line="5" pos:column="12"/></operator><name pos:line="5" pos:column="12">length<pos:position pos:line="5" pos:column="18"/></name></name><argument_list pos:line="5" pos:column="18">()<pos:position pos:line="5" pos:column="20"/></argument_list></call> <operator pos:line="5" pos:column="21">&gt;<pos:position pos:line="5" pos:column="25"/></operator> <name pos:line="5" pos:column="23">MaxCnLen<pos:position pos:line="5" pos:column="31"/></name></expr>)<pos:position pos:line="5" pos:column="32"/></condition><then pos:line="5" pos:column="32"> <block pos:line="5" pos:column="33">{
        <comment type="line" pos:line="6" pos:column="9">// In the case the length od CN is more than the maximum supported size</comment>
        <comment type="line" pos:line="7" pos:column="9">// try to use the first upper level domain.</comment>
        <decl_stmt><decl><type><name pos:line="8" pos:column="9">size_t<pos:position pos:line="8" pos:column="15"/></name></type> <name pos:line="8" pos:column="16">pos<pos:position pos:line="8" pos:column="19"/></name> <init pos:line="8" pos:column="20">= <expr><literal type="number" pos:line="8" pos:column="22">0<pos:position pos:line="8" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="24"/></decl_stmt>
        <do pos:line="9" pos:column="9">do <block pos:line="9" pos:column="12">{
            <expr_stmt><expr><name pos:line="10" pos:column="13">pos<pos:position pos:line="10" pos:column="16"/></name> <operator pos:line="10" pos:column="17">=<pos:position pos:line="10" pos:column="18"/></operator> <call><name><name pos:line="10" pos:column="19">cn<pos:position pos:line="10" pos:column="21"/></name><operator pos:line="10" pos:column="21">.<pos:position pos:line="10" pos:column="22"/></operator><name pos:line="10" pos:column="22">find<pos:position pos:line="10" pos:column="26"/></name></name><argument_list pos:line="10" pos:column="26">(<argument><expr><literal type="char" pos:line="10" pos:column="27">'.'<pos:position pos:line="10" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="32">pos<pos:position pos:line="10" pos:column="35"/></name> <operator pos:line="10" pos:column="36">+<pos:position pos:line="10" pos:column="37"/></operator> <literal type="number" pos:line="10" pos:column="38">1<pos:position pos:line="10" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="41"/></expr_stmt>
        }<pos:position pos:line="11" pos:column="10"/></block> while <condition pos:line="11" pos:column="17">(<expr><name pos:line="11" pos:column="18">pos<pos:position pos:line="11" pos:column="21"/></name> <operator pos:line="11" pos:column="22">!=<pos:position pos:line="11" pos:column="24"/></operator> <name><name pos:line="11" pos:column="25">std<pos:position pos:line="11" pos:column="28"/></name><operator pos:line="11" pos:column="28">::<pos:position pos:line="11" pos:column="30"/></operator><name pos:line="11" pos:column="30">string<pos:position pos:line="11" pos:column="36"/></name><operator pos:line="11" pos:column="36">::<pos:position pos:line="11" pos:column="38"/></operator><name pos:line="11" pos:column="38">npos<pos:position pos:line="11" pos:column="42"/></name></name> <operator pos:line="11" pos:column="43">&amp;&amp;<pos:position pos:line="11" pos:column="53"/></operator> <operator pos:line="11" pos:column="46">(<pos:position pos:line="11" pos:column="47"/></operator><call><name><name pos:line="11" pos:column="47">cn<pos:position pos:line="11" pos:column="49"/></name><operator pos:line="11" pos:column="49">.<pos:position pos:line="11" pos:column="50"/></operator><name pos:line="11" pos:column="50">length<pos:position pos:line="11" pos:column="56"/></name></name><argument_list pos:line="11" pos:column="56">()<pos:position pos:line="11" pos:column="58"/></argument_list></call> <operator pos:line="11" pos:column="59">-<pos:position pos:line="11" pos:column="60"/></operator> <name pos:line="11" pos:column="61">pos<pos:position pos:line="11" pos:column="64"/></name> <operator pos:line="11" pos:column="65">+<pos:position pos:line="11" pos:column="66"/></operator> <literal type="number" pos:line="11" pos:column="67">2<pos:position pos:line="11" pos:column="68"/></literal><operator pos:line="11" pos:column="68">)<pos:position pos:line="11" pos:column="69"/></operator> <operator pos:line="11" pos:column="70">&gt;<pos:position pos:line="11" pos:column="74"/></operator> <name pos:line="11" pos:column="72">MaxCnLen<pos:position pos:line="11" pos:column="80"/></name></expr>)<pos:position pos:line="11" pos:column="81"/></condition>;<pos:position pos:line="11" pos:column="82"/></do>

        <comment type="line" pos:line="13" pos:column="9">// If no short domain found or this domain is a toplevel domain</comment>
        <comment type="line" pos:line="14" pos:column="9">// we failed to find a good cn name.</comment>
        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">pos<pos:position pos:line="15" pos:column="16"/></name> <operator pos:line="15" pos:column="17">==<pos:position pos:line="15" pos:column="19"/></operator> <name><name pos:line="15" pos:column="20">std<pos:position pos:line="15" pos:column="23"/></name><operator pos:line="15" pos:column="23">::<pos:position pos:line="15" pos:column="25"/></operator><name pos:line="15" pos:column="25">string<pos:position pos:line="15" pos:column="31"/></name><operator pos:line="15" pos:column="31">::<pos:position pos:line="15" pos:column="33"/></operator><name pos:line="15" pos:column="33">npos<pos:position pos:line="15" pos:column="37"/></name></name> <operator pos:line="15" pos:column="38">||<pos:position pos:line="15" pos:column="40"/></operator> <call><name><name pos:line="15" pos:column="41">cn<pos:position pos:line="15" pos:column="43"/></name><operator pos:line="15" pos:column="43">.<pos:position pos:line="15" pos:column="44"/></operator><name pos:line="15" pos:column="44">find<pos:position pos:line="15" pos:column="48"/></name></name><argument_list pos:line="15" pos:column="48">(<argument><expr><literal type="char" pos:line="15" pos:column="49">'.'<pos:position pos:line="15" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="54">pos<pos:position pos:line="15" pos:column="57"/></name> <operator pos:line="15" pos:column="58">+<pos:position pos:line="15" pos:column="59"/></operator> <literal type="number" pos:line="15" pos:column="60">1<pos:position pos:line="15" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="62"/></argument_list></call> <operator pos:line="15" pos:column="63">==<pos:position pos:line="15" pos:column="65"/></operator> <name><name pos:line="15" pos:column="66">std<pos:position pos:line="15" pos:column="69"/></name><operator pos:line="15" pos:column="69">::<pos:position pos:line="15" pos:column="71"/></operator><name pos:line="15" pos:column="71">string<pos:position pos:line="15" pos:column="77"/></name><operator pos:line="15" pos:column="77">::<pos:position pos:line="15" pos:column="79"/></operator><name pos:line="15" pos:column="79">npos<pos:position pos:line="15" pos:column="83"/></name></name></expr>)<pos:position pos:line="15" pos:column="84"/></condition><then pos:line="15" pos:column="84">
            <block type="pseudo"><return pos:line="16" pos:column="13">return <expr><literal type="boolean" pos:line="16" pos:column="20">false<pos:position pos:line="16" pos:column="25"/></literal></expr>;<pos:position pos:line="16" pos:column="26"/></return></block></then></if>

        <decl_stmt><decl><type><name><name pos:line="18" pos:column="9">std<pos:position pos:line="18" pos:column="12"/></name><operator pos:line="18" pos:column="12">::<pos:position pos:line="18" pos:column="14"/></operator><name pos:line="18" pos:column="14">string<pos:position pos:line="18" pos:column="20"/></name></name></type> <name pos:line="18" pos:column="21">fixedCn<pos:position pos:line="18" pos:column="28"/></name><argument_list pos:line="18" pos:column="28">(<argument><expr><literal type="number" pos:line="18" pos:column="29">1<pos:position pos:line="18" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="char" pos:line="18" pos:column="32">'*'<pos:position pos:line="18" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="36"/></argument_list></decl>;<pos:position pos:line="18" pos:column="37"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="19" pos:column="9">fixedCn<pos:position pos:line="19" pos:column="16"/></name><operator pos:line="19" pos:column="16">.<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="17">append<pos:position pos:line="19" pos:column="23"/></name></name><argument_list pos:line="19" pos:column="23">(<argument><expr><call><name><name pos:line="19" pos:column="24">cn<pos:position pos:line="19" pos:column="26"/></name><operator pos:line="19" pos:column="26">.<pos:position pos:line="19" pos:column="27"/></operator><name pos:line="19" pos:column="27">c_str<pos:position pos:line="19" pos:column="32"/></name></name><argument_list pos:line="19" pos:column="32">()<pos:position pos:line="19" pos:column="34"/></argument_list></call> <operator pos:line="19" pos:column="35">+<pos:position pos:line="19" pos:column="36"/></operator> <name pos:line="19" pos:column="37">pos<pos:position pos:line="19" pos:column="40"/></name></expr></argument>)<pos:position pos:line="19" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><name pos:line="20" pos:column="9">cn<pos:position pos:line="20" pos:column="11"/></name> <operator pos:line="20" pos:column="12">=<pos:position pos:line="20" pos:column="13"/></operator> <name pos:line="20" pos:column="14">fixedCn<pos:position pos:line="20" pos:column="21"/></name></expr>;<pos:position pos:line="20" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="23" pos:column="5">// Assume [] surround an IPv6 address and strip them because browsers such</comment>
    <comment type="line" pos:line="24" pos:column="5">// as Firefox, Chromium, and Safari prefer bare IPv6 addresses in CNs.</comment>
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><call><name><name pos:line="25" pos:column="9">cn<pos:position pos:line="25" pos:column="11"/></name><operator pos:line="25" pos:column="11">.<pos:position pos:line="25" pos:column="12"/></operator><name pos:line="25" pos:column="12">length<pos:position pos:line="25" pos:column="18"/></name></name><argument_list pos:line="25" pos:column="18">()<pos:position pos:line="25" pos:column="20"/></argument_list></call> <operator pos:line="25" pos:column="21">&gt;<pos:position pos:line="25" pos:column="25"/></operator> <literal type="number" pos:line="25" pos:column="23">2<pos:position pos:line="25" pos:column="24"/></literal> <operator pos:line="25" pos:column="25">&amp;&amp;<pos:position pos:line="25" pos:column="35"/></operator> <operator pos:line="25" pos:column="28">*<pos:position pos:line="25" pos:column="29"/></operator><call><name><name pos:line="25" pos:column="29">cn<pos:position pos:line="25" pos:column="31"/></name><operator pos:line="25" pos:column="31">.<pos:position pos:line="25" pos:column="32"/></operator><name pos:line="25" pos:column="32">begin<pos:position pos:line="25" pos:column="37"/></name></name><argument_list pos:line="25" pos:column="37">()<pos:position pos:line="25" pos:column="39"/></argument_list></call> <operator pos:line="25" pos:column="40">==<pos:position pos:line="25" pos:column="42"/></operator> <literal type="char" pos:line="25" pos:column="43">'['<pos:position pos:line="25" pos:column="46"/></literal> <operator pos:line="25" pos:column="47">&amp;&amp;<pos:position pos:line="25" pos:column="57"/></operator> <operator pos:line="25" pos:column="50">*<pos:position pos:line="25" pos:column="51"/></operator><call><name><name pos:line="25" pos:column="51">cn<pos:position pos:line="25" pos:column="53"/></name><operator pos:line="25" pos:column="53">.<pos:position pos:line="25" pos:column="54"/></operator><name pos:line="25" pos:column="54">rbegin<pos:position pos:line="25" pos:column="60"/></name></name><argument_list pos:line="25" pos:column="60">()<pos:position pos:line="25" pos:column="62"/></argument_list></call> <operator pos:line="25" pos:column="63">==<pos:position pos:line="25" pos:column="65"/></operator> <literal type="char" pos:line="25" pos:column="66">']'<pos:position pos:line="25" pos:column="69"/></literal></expr>)<pos:position pos:line="25" pos:column="70"/></condition><then pos:line="25" pos:column="70">
        <block type="pseudo"><expr_stmt><expr><name pos:line="26" pos:column="9">cn<pos:position pos:line="26" pos:column="11"/></name> <operator pos:line="26" pos:column="12">=<pos:position pos:line="26" pos:column="13"/></operator> <call><name><name pos:line="26" pos:column="14">cn<pos:position pos:line="26" pos:column="16"/></name><operator pos:line="26" pos:column="16">.<pos:position pos:line="26" pos:column="17"/></operator><name pos:line="26" pos:column="17">substr<pos:position pos:line="26" pos:column="23"/></name></name><argument_list pos:line="26" pos:column="23">(<argument><expr><literal type="number" pos:line="26" pos:column="24">1<pos:position pos:line="26" pos:column="25"/></literal></expr></argument>, <argument><expr><call><name><name pos:line="26" pos:column="27">cn<pos:position pos:line="26" pos:column="29"/></name><operator pos:line="26" pos:column="29">.<pos:position pos:line="26" pos:column="30"/></operator><name pos:line="26" pos:column="30">size<pos:position pos:line="26" pos:column="34"/></name></name><argument_list pos:line="26" pos:column="34">()<pos:position pos:line="26" pos:column="36"/></argument_list></call><operator pos:line="26" pos:column="36">-<pos:position pos:line="26" pos:column="37"/></operator><literal type="number" pos:line="26" pos:column="37">2<pos:position pos:line="26" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="40"/></expr_stmt></block></then></if>

    <decl_stmt><decl><type><name pos:line="28" pos:column="5">X509_NAME<pos:position pos:line="28" pos:column="14"/></name> <modifier pos:line="28" pos:column="15">*<pos:position pos:line="28" pos:column="16"/></modifier></type><name pos:line="28" pos:column="16">name<pos:position pos:line="28" pos:column="20"/></name> <init pos:line="28" pos:column="21">= <expr><call><name pos:line="28" pos:column="23">X509_get_subject_name<pos:position pos:line="28" pos:column="44"/></name><argument_list pos:line="28" pos:column="44">(<argument><expr><call><name><name pos:line="28" pos:column="45">cert<pos:position pos:line="28" pos:column="49"/></name><operator pos:line="28" pos:column="49">.<pos:position pos:line="28" pos:column="50"/></operator><name pos:line="28" pos:column="50">get<pos:position pos:line="28" pos:column="53"/></name></name><argument_list pos:line="28" pos:column="53">()<pos:position pos:line="28" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="28" pos:column="56"/></argument_list></call></expr></init></decl>;<pos:position pos:line="28" pos:column="57"/></decl_stmt>
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><operator pos:line="29" pos:column="9">!<pos:position pos:line="29" pos:column="10"/></operator><name pos:line="29" pos:column="10">name<pos:position pos:line="29" pos:column="14"/></name></expr>)<pos:position pos:line="29" pos:column="15"/></condition><then pos:line="29" pos:column="15">
        <block type="pseudo"><return pos:line="30" pos:column="9">return <expr><literal type="boolean" pos:line="30" pos:column="16">false<pos:position pos:line="30" pos:column="21"/></literal></expr>;<pos:position pos:line="30" pos:column="22"/></return></block></then></if>
    <comment type="line" pos:line="31" pos:column="5">// Remove the CN part:</comment>
    <decl_stmt><decl><type><name pos:line="32" pos:column="5">int<pos:position pos:line="32" pos:column="8"/></name></type> <name pos:line="32" pos:column="9">loc<pos:position pos:line="32" pos:column="12"/></name> <init pos:line="32" pos:column="13">= <expr><call><name pos:line="32" pos:column="15">X509_NAME_get_index_by_NID<pos:position pos:line="32" pos:column="41"/></name><argument_list pos:line="32" pos:column="41">(<argument><expr><name pos:line="32" pos:column="42">name<pos:position pos:line="32" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="48">NID_commonName<pos:position pos:line="32" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="64">-<pos:position pos:line="32" pos:column="65"/></operator><literal type="number" pos:line="32" pos:column="65">1<pos:position pos:line="32" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="32" pos:column="68"/></decl_stmt>
    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><name pos:line="33" pos:column="9">loc<pos:position pos:line="33" pos:column="12"/></name> <operator pos:line="33" pos:column="13">&gt;=<pos:position pos:line="33" pos:column="18"/></operator><literal type="number" pos:line="33" pos:column="15">0<pos:position pos:line="33" pos:column="16"/></literal></expr>)<pos:position pos:line="33" pos:column="17"/></condition><then pos:line="33" pos:column="17"> <block pos:line="33" pos:column="18">{
        <decl_stmt><decl><type><name pos:line="34" pos:column="9">X509_NAME_ENTRY<pos:position pos:line="34" pos:column="24"/></name> <modifier pos:line="34" pos:column="25">*<pos:position pos:line="34" pos:column="26"/></modifier></type><name pos:line="34" pos:column="26">tmp<pos:position pos:line="34" pos:column="29"/></name> <init pos:line="34" pos:column="30">= <expr><call><name pos:line="34" pos:column="32">X509_NAME_get_entry<pos:position pos:line="34" pos:column="51"/></name><argument_list pos:line="34" pos:column="51">(<argument><expr><name pos:line="34" pos:column="52">name<pos:position pos:line="34" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="58">loc<pos:position pos:line="34" pos:column="61"/></name></expr></argument>)<pos:position pos:line="34" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="34" pos:column="63"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">X509_NAME_delete_entry<pos:position pos:line="35" pos:column="31"/></name><argument_list pos:line="35" pos:column="31">(<argument><expr><name pos:line="35" pos:column="32">name<pos:position pos:line="35" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="38">loc<pos:position pos:line="35" pos:column="41"/></name></expr></argument>)<pos:position pos:line="35" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">X509_NAME_ENTRY_free<pos:position pos:line="36" pos:column="29"/></name><argument_list pos:line="36" pos:column="29">(<argument><expr><name pos:line="36" pos:column="30">tmp<pos:position pos:line="36" pos:column="33"/></name></expr></argument>)<pos:position pos:line="36" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="39" pos:column="5">// Add a new CN</comment>
    <return pos:line="40" pos:column="5">return <expr><call><name pos:line="40" pos:column="12">X509_NAME_add_entry_by_NID<pos:position pos:line="40" pos:column="38"/></name><argument_list pos:line="40" pos:column="38">(<argument><expr><name pos:line="40" pos:column="39">name<pos:position pos:line="40" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="45">NID_commonName<pos:position pos:line="40" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="61">MBSTRING_ASC<pos:position pos:line="40" pos:column="73"/></name></expr></argument>,
                                      <argument><expr><operator pos:line="41" pos:column="39">(<pos:position pos:line="41" pos:column="40"/></operator><name pos:line="41" pos:column="40">unsigned<pos:position pos:line="41" pos:column="48"/></name> <name pos:line="41" pos:column="49">char<pos:position pos:line="41" pos:column="53"/></name> <operator pos:line="41" pos:column="54">*<pos:position pos:line="41" pos:column="55"/></operator><operator pos:line="41" pos:column="55">)<pos:position pos:line="41" pos:column="56"/></operator><operator pos:line="41" pos:column="56">(<pos:position pos:line="41" pos:column="57"/></operator><call><name><name pos:line="41" pos:column="57">cn<pos:position pos:line="41" pos:column="59"/></name><operator pos:line="41" pos:column="59">.<pos:position pos:line="41" pos:column="60"/></operator><name pos:line="41" pos:column="60">c_str<pos:position pos:line="41" pos:column="65"/></name></name><argument_list pos:line="41" pos:column="65">()<pos:position pos:line="41" pos:column="67"/></argument_list></call><operator pos:line="41" pos:column="67">)<pos:position pos:line="41" pos:column="68"/></operator></expr></argument>, <argument><expr><operator pos:line="41" pos:column="70">-<pos:position pos:line="41" pos:column="71"/></operator><literal type="number" pos:line="41" pos:column="71">1<pos:position pos:line="41" pos:column="72"/></literal></expr></argument>, <argument><expr><operator pos:line="41" pos:column="74">-<pos:position pos:line="41" pos:column="75"/></operator><literal type="number" pos:line="41" pos:column="75">1<pos:position pos:line="41" pos:column="76"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="78">0<pos:position pos:line="41" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="81"/></return>
}<pos:position pos:line="42" pos:column="2"/></block></function></unit>
