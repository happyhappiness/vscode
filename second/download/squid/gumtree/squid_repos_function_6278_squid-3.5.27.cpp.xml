<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6278_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">IpcIoFile<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">readCompleted<pos:position pos:line="2" pos:column="25"/></name></name><parameter_list pos:line="2" pos:column="25">(<parameter><decl><type><name pos:line="2" pos:column="26">ReadRequest<pos:position pos:line="2" pos:column="37"/></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type><name pos:line="2" pos:column="39">readRequest<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>,
                         <parameter><decl><type><name pos:line="3" pos:column="26">IpcIoMsg<pos:position pos:line="3" pos:column="34"/></name> <modifier pos:line="3" pos:column="35">*<pos:position pos:line="3" pos:column="36"/></modifier><specifier pos:line="3" pos:column="36">const<pos:position pos:line="3" pos:column="41"/></specifier></type> <name pos:line="3" pos:column="42">response<pos:position pos:line="3" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="51"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">bool<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">ioError<pos:position pos:line="5" pos:column="17"/></name> <init pos:line="5" pos:column="18">= <expr><literal type="boolean" pos:line="5" pos:column="20">false<pos:position pos:line="5" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">!<pos:position pos:line="6" pos:column="10"/></operator><name pos:line="6" pos:column="10">response<pos:position pos:line="6" pos:column="18"/></name></expr>)<pos:position pos:line="6" pos:column="19"/></condition><then pos:line="6" pos:column="19"> <block pos:line="6" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">debugs<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><literal type="number" pos:line="7" pos:column="16">79<pos:position pos:line="7" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="20">3<pos:position pos:line="7" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="23">HERE<pos:position pos:line="7" pos:column="27"/></name> <operator pos:line="7" pos:column="28">&lt;&lt;<pos:position pos:line="7" pos:column="36"/></operator> <literal type="string" pos:line="7" pos:column="31">"error: timeout"<pos:position pos:line="7" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><name pos:line="8" pos:column="9">ioError<pos:position pos:line="8" pos:column="16"/></name> <operator pos:line="8" pos:column="17">=<pos:position pos:line="8" pos:column="18"/></operator> <literal type="boolean" pos:line="8" pos:column="19">true<pos:position pos:line="8" pos:column="23"/></literal></expr>;<pos:position pos:line="8" pos:column="24"/></expr_stmt> <comment type="line" pos:line="8" pos:column="25">// I/O timeout does not warrant setting error_?</comment>
    }<pos:position pos:line="9" pos:column="6"/></block></then> <else pos:line="9" pos:column="7">else <block pos:line="9" pos:column="12">{
        <if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name><name pos:line="10" pos:column="13">response<pos:position pos:line="10" pos:column="21"/></name><operator pos:line="10" pos:column="21">-&gt;<pos:position pos:line="10" pos:column="26"/></operator><name pos:line="10" pos:column="23">xerrno<pos:position pos:line="10" pos:column="29"/></name></name></expr>)<pos:position pos:line="10" pos:column="30"/></condition><then pos:line="10" pos:column="30"> <block pos:line="10" pos:column="31">{
            <expr_stmt><expr><call><name pos:line="11" pos:column="13">debugs<pos:position pos:line="11" pos:column="19"/></name><argument_list pos:line="11" pos:column="19">(<argument><expr><literal type="number" pos:line="11" pos:column="20">79<pos:position pos:line="11" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="24">DBG_IMPORTANT<pos:position pos:line="11" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="39">"ERROR: "<pos:position pos:line="11" pos:column="48"/></literal> <operator pos:line="11" pos:column="49">&lt;&lt;<pos:position pos:line="11" pos:column="57"/></operator> <name pos:line="11" pos:column="52">dbName<pos:position pos:line="11" pos:column="58"/></name> <operator pos:line="11" pos:column="59">&lt;&lt;<pos:position pos:line="11" pos:column="67"/></operator> <literal type="string" pos:line="11" pos:column="62">" read: "<pos:position pos:line="11" pos:column="71"/></literal> <operator pos:line="11" pos:column="72">&lt;&lt;<pos:position pos:line="11" pos:column="80"/></operator>
                   <call><name pos:line="12" pos:column="20">xstrerr<pos:position pos:line="12" pos:column="27"/></name><argument_list pos:line="12" pos:column="27">(<argument><expr><name><name pos:line="12" pos:column="28">response<pos:position pos:line="12" pos:column="36"/></name><operator pos:line="12" pos:column="36">-&gt;<pos:position pos:line="12" pos:column="41"/></operator><name pos:line="12" pos:column="38">xerrno<pos:position pos:line="12" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="47"/></expr_stmt>
            <expr_stmt><expr><name pos:line="13" pos:column="13">ioError<pos:position pos:line="13" pos:column="20"/></name> <operator pos:line="13" pos:column="21">=<pos:position pos:line="13" pos:column="22"/></operator> <name pos:line="13" pos:column="23">error_<pos:position pos:line="13" pos:column="29"/></name> <operator pos:line="13" pos:column="30">=<pos:position pos:line="13" pos:column="31"/></operator> <literal type="boolean" pos:line="13" pos:column="32">true<pos:position pos:line="13" pos:column="36"/></literal></expr>;<pos:position pos:line="13" pos:column="37"/></expr_stmt>
        }<pos:position pos:line="14" pos:column="10"/></block></then> <elseif pos:line="14" pos:column="11">else <if pos:line="14" pos:column="16">if <condition pos:line="14" pos:column="19">(<expr><operator pos:line="14" pos:column="20">!<pos:position pos:line="14" pos:column="21"/></operator><name><name pos:line="14" pos:column="21">response<pos:position pos:line="14" pos:column="29"/></name><operator pos:line="14" pos:column="29">-&gt;<pos:position pos:line="14" pos:column="34"/></operator><name pos:line="14" pos:column="31">page<pos:position pos:line="14" pos:column="35"/></name></name></expr>)<pos:position pos:line="14" pos:column="36"/></condition><then pos:line="14" pos:column="36"> <block pos:line="14" pos:column="37">{
            <expr_stmt><expr><call><name pos:line="15" pos:column="13">debugs<pos:position pos:line="15" pos:column="19"/></name><argument_list pos:line="15" pos:column="19">(<argument><expr><literal type="number" pos:line="15" pos:column="20">79<pos:position pos:line="15" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="24">DBG_IMPORTANT<pos:position pos:line="15" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="39">"ERROR: "<pos:position pos:line="15" pos:column="48"/></literal> <operator pos:line="15" pos:column="49">&lt;&lt;<pos:position pos:line="15" pos:column="57"/></operator> <name pos:line="15" pos:column="52">dbName<pos:position pos:line="15" pos:column="58"/></name> <operator pos:line="15" pos:column="59">&lt;&lt;<pos:position pos:line="15" pos:column="67"/></operator> <literal type="string" pos:line="15" pos:column="62">" read ran "<pos:position pos:line="15" pos:column="74"/></literal> <operator pos:line="15" pos:column="75">&lt;&lt;<pos:position pos:line="15" pos:column="83"/></operator>
                   <literal type="string" pos:line="16" pos:column="20">"out of shared memory pages"<pos:position pos:line="16" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="50"/></expr_stmt>
            <expr_stmt><expr><name pos:line="17" pos:column="13">ioError<pos:position pos:line="17" pos:column="20"/></name> <operator pos:line="17" pos:column="21">=<pos:position pos:line="17" pos:column="22"/></operator> <literal type="boolean" pos:line="17" pos:column="23">true<pos:position pos:line="17" pos:column="27"/></literal></expr>;<pos:position pos:line="17" pos:column="28"/></expr_stmt>
        }<pos:position pos:line="18" pos:column="10"/></block></then></if></elseif> <else pos:line="18" pos:column="11">else <block pos:line="18" pos:column="16">{
            <decl_stmt><decl><type><specifier pos:line="19" pos:column="13">const<pos:position pos:line="19" pos:column="18"/></specifier> <name pos:line="19" pos:column="19">char<pos:position pos:line="19" pos:column="23"/></name> <modifier pos:line="19" pos:column="24">*<pos:position pos:line="19" pos:column="25"/></modifier><specifier pos:line="19" pos:column="25">const<pos:position pos:line="19" pos:column="30"/></specifier></type> <name pos:line="19" pos:column="31">buf<pos:position pos:line="19" pos:column="34"/></name> <init pos:line="19" pos:column="35">= <expr><call><name><name pos:line="19" pos:column="37">Ipc<pos:position pos:line="19" pos:column="40"/></name><operator pos:line="19" pos:column="40">::<pos:position pos:line="19" pos:column="42"/></operator><name pos:line="19" pos:column="42">Mem<pos:position pos:line="19" pos:column="45"/></name><operator pos:line="19" pos:column="45">::<pos:position pos:line="19" pos:column="47"/></operator><name pos:line="19" pos:column="47">PagePointer<pos:position pos:line="19" pos:column="58"/></name></name><argument_list pos:line="19" pos:column="58">(<argument><expr><name><name pos:line="19" pos:column="59">response<pos:position pos:line="19" pos:column="67"/></name><operator pos:line="19" pos:column="67">-&gt;<pos:position pos:line="19" pos:column="72"/></operator><name pos:line="19" pos:column="69">page<pos:position pos:line="19" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="74"/></argument_list></call></expr></init></decl>;<pos:position pos:line="19" pos:column="75"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="20" pos:column="13">memcpy<pos:position pos:line="20" pos:column="19"/></name><argument_list pos:line="20" pos:column="19">(<argument><expr><name><name pos:line="20" pos:column="20">readRequest<pos:position pos:line="20" pos:column="31"/></name><operator pos:line="20" pos:column="31">-&gt;<pos:position pos:line="20" pos:column="36"/></operator><name pos:line="20" pos:column="33">buf<pos:position pos:line="20" pos:column="36"/></name></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="38">buf<pos:position pos:line="20" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="43">response<pos:position pos:line="20" pos:column="51"/></name><operator pos:line="20" pos:column="51">-&gt;<pos:position pos:line="20" pos:column="56"/></operator><name pos:line="20" pos:column="53">len<pos:position pos:line="20" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="58"/></expr_stmt>
        }<pos:position pos:line="21" pos:column="10"/></block></else></if>

        <expr_stmt><expr><call><name><name pos:line="23" pos:column="9">Ipc<pos:position pos:line="23" pos:column="12"/></name><operator pos:line="23" pos:column="12">::<pos:position pos:line="23" pos:column="14"/></operator><name pos:line="23" pos:column="14">Mem<pos:position pos:line="23" pos:column="17"/></name><operator pos:line="23" pos:column="17">::<pos:position pos:line="23" pos:column="19"/></operator><name pos:line="23" pos:column="19">PutPage<pos:position pos:line="23" pos:column="26"/></name></name><argument_list pos:line="23" pos:column="26">(<argument><expr><name><name pos:line="23" pos:column="27">response<pos:position pos:line="23" pos:column="35"/></name><operator pos:line="23" pos:column="35">-&gt;<pos:position pos:line="23" pos:column="40"/></operator><name pos:line="23" pos:column="37">page<pos:position pos:line="23" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="43"/></expr_stmt>
    }<pos:position pos:line="24" pos:column="6"/></block></else></if>

    <decl_stmt><decl><type><specifier pos:line="26" pos:column="5">const<pos:position pos:line="26" pos:column="10"/></specifier> <name pos:line="26" pos:column="11">ssize_t<pos:position pos:line="26" pos:column="18"/></name></type> <name pos:line="26" pos:column="19">rlen<pos:position pos:line="26" pos:column="23"/></name> <init pos:line="26" pos:column="24">= <expr><ternary><condition><expr><name pos:line="26" pos:column="26">ioError<pos:position pos:line="26" pos:column="33"/></name></expr> ?<pos:position pos:line="26" pos:column="35"/></condition><then pos:line="26" pos:column="35"> <expr><operator pos:line="26" pos:column="36">-<pos:position pos:line="26" pos:column="37"/></operator><literal type="number" pos:line="26" pos:column="37">1<pos:position pos:line="26" pos:column="38"/></literal></expr> <pos:position pos:line="26" pos:column="39"/></then><else pos:line="26" pos:column="39">: <expr><operator pos:line="26" pos:column="41">(<pos:position pos:line="26" pos:column="42"/></operator><name pos:line="26" pos:column="42">ssize_t<pos:position pos:line="26" pos:column="49"/></name><operator pos:line="26" pos:column="49">)<pos:position pos:line="26" pos:column="50"/></operator><name><name pos:line="26" pos:column="50">readRequest<pos:position pos:line="26" pos:column="61"/></name><operator pos:line="26" pos:column="61">-&gt;<pos:position pos:line="26" pos:column="66"/></operator><name pos:line="26" pos:column="63">len<pos:position pos:line="26" pos:column="66"/></name></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="26" pos:column="67"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="27" pos:column="5">const<pos:position pos:line="27" pos:column="10"/></specifier> <name pos:line="27" pos:column="11">int<pos:position pos:line="27" pos:column="14"/></name></type> <name pos:line="27" pos:column="15">errflag<pos:position pos:line="27" pos:column="22"/></name> <init pos:line="27" pos:column="23">= <expr><ternary><condition><expr><name pos:line="27" pos:column="25">ioError<pos:position pos:line="27" pos:column="32"/></name></expr> ?<pos:position pos:line="27" pos:column="34"/></condition><then pos:line="27" pos:column="34"> <expr><name pos:line="27" pos:column="35">DISK_ERROR<pos:position pos:line="27" pos:column="45"/></name></expr> <pos:position pos:line="27" pos:column="46"/></then><else pos:line="27" pos:column="46">:<expr><name pos:line="27" pos:column="47">DISK_OK<pos:position pos:line="27" pos:column="54"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="27" pos:column="55"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="28" pos:column="5">ioRequestor<pos:position pos:line="28" pos:column="16"/></name><operator pos:line="28" pos:column="16">-&gt;<pos:position pos:line="28" pos:column="21"/></operator><name pos:line="28" pos:column="18">readCompleted<pos:position pos:line="28" pos:column="31"/></name></name><argument_list pos:line="28" pos:column="31">(<argument><expr><name><name pos:line="28" pos:column="32">readRequest<pos:position pos:line="28" pos:column="43"/></name><operator pos:line="28" pos:column="43">-&gt;<pos:position pos:line="28" pos:column="48"/></operator><name pos:line="28" pos:column="45">buf<pos:position pos:line="28" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="50">rlen<pos:position pos:line="28" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="56">errflag<pos:position pos:line="28" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="65">readRequest<pos:position pos:line="28" pos:column="76"/></name></expr></argument>)<pos:position pos:line="28" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="78"/></expr_stmt>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
