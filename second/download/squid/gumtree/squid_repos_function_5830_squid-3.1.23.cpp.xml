<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5830_squid-3.1.23.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">char<pos:position pos:line="1" pos:column="11"/></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type>
<name pos:line="2" pos:column="1">xgai_strerror<pos:position pos:line="2" pos:column="14"/></name> <parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><name pos:line="2" pos:column="16">int<pos:position pos:line="2" pos:column="19"/></name></type> <name pos:line="2" pos:column="20">ecode<pos:position pos:line="2" pos:column="25"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="26"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><specifier pos:line="4" pos:column="5">static<pos:position pos:line="4" pos:column="11"/></specifier> <type><specifier pos:line="4" pos:column="12">const<pos:position pos:line="4" pos:column="17"/></specifier> <name pos:line="4" pos:column="18">char<pos:position pos:line="4" pos:column="22"/></name> <modifier pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></modifier></type><name><name pos:line="4" pos:column="24">eai_descr<pos:position pos:line="4" pos:column="33"/></name><index pos:line="4" pos:column="33">[]<pos:position pos:line="4" pos:column="35"/></index></name> <init pos:line="4" pos:column="36">= <expr><block pos:line="4" pos:column="38">{
        <expr><literal type="string" pos:line="5" pos:column="9">"no error"<pos:position pos:line="5" pos:column="19"/></literal></expr>,
        <expr><literal type="string" pos:line="6" pos:column="9">"address family for nodename not supported"<pos:position pos:line="6" pos:column="52"/></literal></expr>,	<comment type="block" pos:line="6" pos:column="57">/* EAI_ADDRFAMILY */</comment>
        <expr><literal type="string" pos:line="7" pos:column="9">"temporary failure in name resolution"<pos:position pos:line="7" pos:column="47"/></literal></expr>,		<comment type="block" pos:line="7" pos:column="57">/* EAI_AGAIN */</comment>
        <expr><literal type="string" pos:line="8" pos:column="9">"invalid value for ai_flags"<pos:position pos:line="8" pos:column="37"/></literal></expr>,	 		<comment type="block" pos:line="8" pos:column="57">/* EAI_BADFLAGS */</comment>
        <expr><literal type="string" pos:line="9" pos:column="9">"non-recoverable failure in name resolution"<pos:position pos:line="9" pos:column="53"/></literal></expr>,	<comment type="block" pos:line="9" pos:column="57">/* EAI_FAIL */</comment>
        <expr><literal type="string" pos:line="10" pos:column="9">"ai_family not supported"<pos:position pos:line="10" pos:column="34"/></literal></expr>,			<comment type="block" pos:line="10" pos:column="57">/* EAI_FAMILY */</comment>
        <expr><literal type="string" pos:line="11" pos:column="9">"memory allocation failure"<pos:position pos:line="11" pos:column="36"/></literal></expr>,			<comment type="block" pos:line="11" pos:column="57">/* EAI_MEMORY */</comment>
        <expr><literal type="string" pos:line="12" pos:column="9">"no address associated with nodename"<pos:position pos:line="12" pos:column="46"/></literal></expr>,		<comment type="block" pos:line="12" pos:column="57">/* EAI_NODATA */</comment>
        <expr><literal type="string" pos:line="13" pos:column="9">"nodename nor servname provided, or not known"<pos:position pos:line="13" pos:column="55"/></literal></expr>,	<comment type="block" pos:line="13" pos:column="57">/* EAI_NONAME */</comment>
        <expr><literal type="string" pos:line="14" pos:column="9">"servname not supported for ai_socktype"<pos:position pos:line="14" pos:column="49"/></literal></expr>,		<comment type="block" pos:line="14" pos:column="65">/* EAI_SERVICE */</comment>
        <expr><literal type="string" pos:line="15" pos:column="9">"ai_socktype not supported"<pos:position pos:line="15" pos:column="36"/></literal></expr>,			<comment type="block" pos:line="15" pos:column="57">/* EAI_SOCKTYPE */</comment>
        <expr><literal type="string" pos:line="16" pos:column="9">"system error returned in errno"<pos:position pos:line="16" pos:column="41"/></literal></expr>,			<comment type="block" pos:line="16" pos:column="65">/* EAI_SYSTEM */</comment>
        <expr><literal type="string" pos:line="17" pos:column="9">"argument buffer overflow"<pos:position pos:line="17" pos:column="35"/></literal></expr>,			<comment type="block" pos:line="17" pos:column="57">/* EAI_OVERFLOW */</comment>
    }<pos:position pos:line="18" pos:column="6"/></block></expr></init></decl>;<pos:position pos:line="18" pos:column="7"/></decl_stmt>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><call><call><name><name pos:line="20" pos:column="9">ecode<pos:position pos:line="20" pos:column="14"/></name> <argument_list type="generic" pos:line="20" pos:column="15">&lt; <argument><expr><literal type="number" pos:line="20" pos:column="17">0<pos:position pos:line="20" pos:column="18"/></literal> <operator pos:line="20" pos:column="19">||<pos:position pos:line="20" pos:column="21"/></operator> <name pos:line="20" pos:column="22">ecode<pos:position pos:line="20" pos:column="27"/></name></expr></argument> &gt;<pos:position pos:line="20" pos:column="32"/></argument_list></name> <argument_list pos:line="20" pos:column="30">(<argument><expr><name pos:line="20" pos:column="31">int<pos:position pos:line="20" pos:column="34"/></name></expr></argument>)<pos:position pos:line="20" pos:column="35"/></argument_list></call> <argument_list pos:line="20" pos:column="36">(<argument><expr><sizeof pos:line="20" pos:column="37">sizeof <name pos:line="20" pos:column="44">eai_descr<pos:position pos:line="20" pos:column="53"/></name></sizeof><operator pos:line="20" pos:column="53">/<pos:position pos:line="20" pos:column="54"/></operator> <sizeof pos:line="20" pos:column="55">sizeof <name><name pos:line="20" pos:column="62">eai_descr<pos:position pos:line="20" pos:column="71"/></name><index pos:line="20" pos:column="71">[<expr><literal type="number" pos:line="20" pos:column="72">0<pos:position pos:line="20" pos:column="73"/></literal></expr>]<pos:position pos:line="20" pos:column="74"/></index></name></sizeof></expr></argument>)<pos:position pos:line="20" pos:column="75"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="76"/></condition><then pos:line="20" pos:column="76">
        <block type="pseudo"><return pos:line="21" pos:column="9">return <expr><literal type="string" pos:line="21" pos:column="16">"unknown error"<pos:position pos:line="21" pos:column="31"/></literal></expr>;<pos:position pos:line="21" pos:column="32"/></return></block></then></if>
    <return pos:line="22" pos:column="5">return <expr><name><name pos:line="22" pos:column="12">eai_descr<pos:position pos:line="22" pos:column="21"/></name><index pos:line="22" pos:column="21">[<expr><name pos:line="22" pos:column="22">ecode<pos:position pos:line="22" pos:column="27"/></name></expr>]<pos:position pos:line="22" pos:column="28"/></index></name></expr>;<pos:position pos:line="22" pos:column="29"/></return>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
