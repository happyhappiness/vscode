<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4235_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">SBufList<pos:position pos:line="1" pos:column="9"/></name></type>
<name><name pos:line="2" pos:column="1">ACLRegexData<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">dump<pos:position pos:line="2" pos:column="19"/></name></name><parameter_list pos:line="2" pos:column="19">()<pos:position pos:line="2" pos:column="21"/></parameter_list> <specifier pos:line="2" pos:column="22">const<pos:position pos:line="2" pos:column="27"/></specifier>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">SBufList<pos:position pos:line="4" pos:column="13"/></name></type> <name pos:line="4" pos:column="14">sl<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">flags<pos:position pos:line="5" pos:column="14"/></name> <init pos:line="5" pos:column="15">= <expr><name pos:line="5" pos:column="17">REG_EXTENDED<pos:position pos:line="5" pos:column="29"/></name> <operator pos:line="5" pos:column="30">|<pos:position pos:line="5" pos:column="31"/></operator> <name pos:line="5" pos:column="32">REG_NOSUB<pos:position pos:line="5" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="42"/></decl_stmt>

    <comment type="line" pos:line="7" pos:column="5">// walk and dump the list</comment>
    <comment type="line" pos:line="8" pos:column="5">// keeping the flags values consistent</comment>
    <for pos:line="9" pos:column="5">for <control pos:line="9" pos:column="9">(<init><expr><name pos:line="9" pos:column="10">auto<pos:position pos:line="9" pos:column="14"/></name> <operator pos:line="9" pos:column="15">&amp;<pos:position pos:line="9" pos:column="20"/></operator><name pos:line="9" pos:column="16">i<pos:position pos:line="9" pos:column="17"/></name> <operator pos:line="9" pos:column="18">:<pos:position pos:line="9" pos:column="19"/></operator> <name pos:line="9" pos:column="20">data<pos:position pos:line="9" pos:column="24"/></name></expr></init>)<pos:position pos:line="9" pos:column="25"/></control> <block pos:line="9" pos:column="26">{
        <if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name><name pos:line="10" pos:column="13">i<pos:position pos:line="10" pos:column="14"/></name><operator pos:line="10" pos:column="14">.<pos:position pos:line="10" pos:column="15"/></operator><name pos:line="10" pos:column="15">flags<pos:position pos:line="10" pos:column="20"/></name></name> <operator pos:line="10" pos:column="21">!=<pos:position pos:line="10" pos:column="23"/></operator> <name pos:line="10" pos:column="24">flags<pos:position pos:line="10" pos:column="29"/></name></expr>)<pos:position pos:line="10" pos:column="30"/></condition><then pos:line="10" pos:column="30"> <block pos:line="10" pos:column="31">{
            <if pos:line="11" pos:column="13">if <condition pos:line="11" pos:column="16">(<expr><operator pos:line="11" pos:column="17">(<pos:position pos:line="11" pos:column="18"/></operator><name><name pos:line="11" pos:column="18">i<pos:position pos:line="11" pos:column="19"/></name><operator pos:line="11" pos:column="19">.<pos:position pos:line="11" pos:column="20"/></operator><name pos:line="11" pos:column="20">flags<pos:position pos:line="11" pos:column="25"/></name></name><operator pos:line="11" pos:column="25">&amp;<pos:position pos:line="11" pos:column="30"/></operator><name pos:line="11" pos:column="26">REG_ICASE<pos:position pos:line="11" pos:column="35"/></name><operator pos:line="11" pos:column="35">)<pos:position pos:line="11" pos:column="36"/></operator> <operator pos:line="11" pos:column="37">!=<pos:position pos:line="11" pos:column="39"/></operator> <literal type="number" pos:line="11" pos:column="40">0<pos:position pos:line="11" pos:column="41"/></literal></expr>)<pos:position pos:line="11" pos:column="42"/></condition><then pos:line="11" pos:column="42"> <block pos:line="11" pos:column="43">{
                <expr_stmt><expr><call><name><name pos:line="12" pos:column="17">sl<pos:position pos:line="12" pos:column="19"/></name><operator pos:line="12" pos:column="19">.<pos:position pos:line="12" pos:column="20"/></operator><name pos:line="12" pos:column="20">emplace_back<pos:position pos:line="12" pos:column="32"/></name></name><argument_list pos:line="12" pos:column="32">(<argument><expr><literal type="string" pos:line="12" pos:column="33">"-i"<pos:position pos:line="12" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="39"/></expr_stmt>
            }<pos:position pos:line="13" pos:column="14"/></block></then> <else pos:line="13" pos:column="15">else <block pos:line="13" pos:column="20">{
                <expr_stmt><expr><call><name><name pos:line="14" pos:column="17">sl<pos:position pos:line="14" pos:column="19"/></name><operator pos:line="14" pos:column="19">.<pos:position pos:line="14" pos:column="20"/></operator><name pos:line="14" pos:column="20">emplace_back<pos:position pos:line="14" pos:column="32"/></name></name><argument_list pos:line="14" pos:column="32">(<argument><expr><literal type="string" pos:line="14" pos:column="33">"+i"<pos:position pos:line="14" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="39"/></expr_stmt>
            }<pos:position pos:line="15" pos:column="14"/></block></else></if>
            <expr_stmt><expr><name pos:line="16" pos:column="13">flags<pos:position pos:line="16" pos:column="18"/></name> <operator pos:line="16" pos:column="19">=<pos:position pos:line="16" pos:column="20"/></operator> <name><name pos:line="16" pos:column="21">i<pos:position pos:line="16" pos:column="22"/></name><operator pos:line="16" pos:column="22">.<pos:position pos:line="16" pos:column="23"/></operator><name pos:line="16" pos:column="23">flags<pos:position pos:line="16" pos:column="28"/></name></name></expr>;<pos:position pos:line="16" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="17" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name><name pos:line="19" pos:column="9">sl<pos:position pos:line="19" pos:column="11"/></name><operator pos:line="19" pos:column="11">.<pos:position pos:line="19" pos:column="12"/></operator><name pos:line="19" pos:column="12">emplace_back<pos:position pos:line="19" pos:column="24"/></name></name><argument_list pos:line="19" pos:column="24">(<argument><expr><call><name><name pos:line="19" pos:column="25">i<pos:position pos:line="19" pos:column="26"/></name><operator pos:line="19" pos:column="26">.<pos:position pos:line="19" pos:column="27"/></operator><name pos:line="19" pos:column="27">c_str<pos:position pos:line="19" pos:column="32"/></name></name><argument_list pos:line="19" pos:column="32">()<pos:position pos:line="19" pos:column="34"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="20" pos:column="6"/></block></for>

    <return pos:line="22" pos:column="5">return <expr><name pos:line="22" pos:column="12">sl<pos:position pos:line="22" pos:column="14"/></name></expr>;<pos:position pos:line="22" pos:column="15"/></return>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
