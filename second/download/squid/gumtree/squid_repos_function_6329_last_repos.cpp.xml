<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6329_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">squidaio_cleanup_request<pos:position pos:line="2" pos:column="25"/></name><parameter_list pos:line="2" pos:column="25">(<parameter><decl><type><name pos:line="2" pos:column="26">squidaio_request_t<pos:position pos:line="2" pos:column="44"/></name> <modifier pos:line="2" pos:column="45">*<pos:position pos:line="2" pos:column="46"/></modifier></type> <name pos:line="2" pos:column="47">requestp<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="56"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">squidaio_result_t<pos:position pos:line="4" pos:column="22"/></name> <modifier pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></modifier></type><name pos:line="4" pos:column="24">resultp<pos:position pos:line="4" pos:column="31"/></name> <init pos:line="4" pos:column="32">= <expr><name><name pos:line="4" pos:column="34">requestp<pos:position pos:line="4" pos:column="42"/></name><operator pos:line="4" pos:column="42">-&gt;<pos:position pos:line="4" pos:column="47"/></operator><name pos:line="4" pos:column="44">resultp<pos:position pos:line="4" pos:column="51"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="52"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">cancelled<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><name><name pos:line="5" pos:column="21">requestp<pos:position pos:line="5" pos:column="29"/></name><operator pos:line="5" pos:column="29">-&gt;<pos:position pos:line="5" pos:column="34"/></operator><name pos:line="5" pos:column="31">cancelled<pos:position pos:line="5" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="41"/></decl_stmt>

    <comment type="block" pos:line="7" pos:column="5">/* Free allocated structures and copy data back to user space if the */</comment>
    <comment type="block" pos:line="8" pos:column="5">/* request hasn't been cancelled */</comment>

    <switch pos:line="10" pos:column="5">switch <condition pos:line="10" pos:column="12">(<expr><name><name pos:line="10" pos:column="13">requestp<pos:position pos:line="10" pos:column="21"/></name><operator pos:line="10" pos:column="21">-&gt;<pos:position pos:line="10" pos:column="26"/></operator><name pos:line="10" pos:column="23">request_type<pos:position pos:line="10" pos:column="35"/></name></name></expr>)<pos:position pos:line="10" pos:column="36"/></condition> <block pos:line="10" pos:column="37">{

    <case pos:line="12" pos:column="5">case <expr><name pos:line="12" pos:column="10">_AIO_OP_STAT<pos:position pos:line="12" pos:column="22"/></name></expr>:<pos:position pos:line="12" pos:column="23"/></case>

        <if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><operator pos:line="14" pos:column="13">!<pos:position pos:line="14" pos:column="14"/></operator><name pos:line="14" pos:column="14">cancelled<pos:position pos:line="14" pos:column="23"/></name> <operator pos:line="14" pos:column="24">&amp;&amp;<pos:position pos:line="14" pos:column="34"/></operator> <name><name pos:line="14" pos:column="27">requestp<pos:position pos:line="14" pos:column="35"/></name><operator pos:line="14" pos:column="35">-&gt;<pos:position pos:line="14" pos:column="40"/></operator><name pos:line="14" pos:column="37">ret<pos:position pos:line="14" pos:column="40"/></name></name> <operator pos:line="14" pos:column="41">==<pos:position pos:line="14" pos:column="43"/></operator> <literal type="number" pos:line="14" pos:column="44">0<pos:position pos:line="14" pos:column="45"/></literal></expr>)<pos:position pos:line="14" pos:column="46"/></condition><then pos:line="14" pos:column="46">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="13">memcpy<pos:position pos:line="15" pos:column="19"/></name><argument_list pos:line="15" pos:column="19">(<argument><expr><name><name pos:line="15" pos:column="20">requestp<pos:position pos:line="15" pos:column="28"/></name><operator pos:line="15" pos:column="28">-&gt;<pos:position pos:line="15" pos:column="33"/></operator><name pos:line="15" pos:column="30">statp<pos:position pos:line="15" pos:column="35"/></name></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="37">requestp<pos:position pos:line="15" pos:column="45"/></name><operator pos:line="15" pos:column="45">-&gt;<pos:position pos:line="15" pos:column="50"/></operator><name pos:line="15" pos:column="47">tmpstatp<pos:position pos:line="15" pos:column="55"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="15" pos:column="57">sizeof<argument_list pos:line="15" pos:column="63">(<argument><expr pos:line="15" pos:column="64">struct <name pos:line="15" pos:column="71">stat<pos:position pos:line="15" pos:column="75"/></name></expr></argument>)<pos:position pos:line="15" pos:column="76"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="15" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="78"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name pos:line="17" pos:column="9">squidaio_xfree<pos:position pos:line="17" pos:column="23"/></name><argument_list pos:line="17" pos:column="23">(<argument><expr><name><name pos:line="17" pos:column="24">requestp<pos:position pos:line="17" pos:column="32"/></name><operator pos:line="17" pos:column="32">-&gt;<pos:position pos:line="17" pos:column="37"/></operator><name pos:line="17" pos:column="34">tmpstatp<pos:position pos:line="17" pos:column="42"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="17" pos:column="44">sizeof<argument_list pos:line="17" pos:column="50">(<argument><expr pos:line="17" pos:column="51">struct <name pos:line="17" pos:column="58">stat<pos:position pos:line="17" pos:column="62"/></name></expr></argument>)<pos:position pos:line="17" pos:column="63"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="17" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="65"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="19" pos:column="9">squidaio_xstrfree<pos:position pos:line="19" pos:column="26"/></name><argument_list pos:line="19" pos:column="26">(<argument><expr><name><name pos:line="19" pos:column="27">requestp<pos:position pos:line="19" pos:column="35"/></name><operator pos:line="19" pos:column="35">-&gt;<pos:position pos:line="19" pos:column="40"/></operator><name pos:line="19" pos:column="37">path<pos:position pos:line="19" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="43"/></expr_stmt>

        <break pos:line="21" pos:column="9">break;<pos:position pos:line="21" pos:column="15"/></break>

    <case pos:line="23" pos:column="5">case <expr><name pos:line="23" pos:column="10">_AIO_OP_OPEN<pos:position pos:line="23" pos:column="22"/></name></expr>:<pos:position pos:line="23" pos:column="23"/></case>
        <if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">cancelled<pos:position pos:line="24" pos:column="22"/></name> <operator pos:line="24" pos:column="23">&amp;&amp;<pos:position pos:line="24" pos:column="33"/></operator> <name><name pos:line="24" pos:column="26">requestp<pos:position pos:line="24" pos:column="34"/></name><operator pos:line="24" pos:column="34">-&gt;<pos:position pos:line="24" pos:column="39"/></operator><name pos:line="24" pos:column="36">ret<pos:position pos:line="24" pos:column="39"/></name></name> <operator pos:line="24" pos:column="40">&gt;=<pos:position pos:line="24" pos:column="45"/></operator> <literal type="number" pos:line="24" pos:column="43">0<pos:position pos:line="24" pos:column="44"/></literal></expr>)<pos:position pos:line="24" pos:column="45"/></condition><then pos:line="24" pos:column="45">
            <comment type="block" pos:line="25" pos:column="13">/* The open() was cancelled but completed */</comment>
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="13">close<pos:position pos:line="26" pos:column="18"/></name><argument_list pos:line="26" pos:column="18">(<argument><expr><name><name pos:line="26" pos:column="19">requestp<pos:position pos:line="26" pos:column="27"/></name><operator pos:line="26" pos:column="27">-&gt;<pos:position pos:line="26" pos:column="32"/></operator><name pos:line="26" pos:column="29">ret<pos:position pos:line="26" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="34"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name pos:line="28" pos:column="9">squidaio_xstrfree<pos:position pos:line="28" pos:column="26"/></name><argument_list pos:line="28" pos:column="26">(<argument><expr><name><name pos:line="28" pos:column="27">requestp<pos:position pos:line="28" pos:column="35"/></name><operator pos:line="28" pos:column="35">-&gt;<pos:position pos:line="28" pos:column="40"/></operator><name pos:line="28" pos:column="37">path<pos:position pos:line="28" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="43"/></expr_stmt>

        <break pos:line="30" pos:column="9">break;<pos:position pos:line="30" pos:column="15"/></break>

    <case pos:line="32" pos:column="5">case <expr><name pos:line="32" pos:column="10">_AIO_OP_CLOSE<pos:position pos:line="32" pos:column="23"/></name></expr>:<pos:position pos:line="32" pos:column="24"/></case>
        <if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><name pos:line="33" pos:column="13">cancelled<pos:position pos:line="33" pos:column="22"/></name> <operator pos:line="33" pos:column="23">&amp;&amp;<pos:position pos:line="33" pos:column="33"/></operator> <name><name pos:line="33" pos:column="26">requestp<pos:position pos:line="33" pos:column="34"/></name><operator pos:line="33" pos:column="34">-&gt;<pos:position pos:line="33" pos:column="39"/></operator><name pos:line="33" pos:column="36">ret<pos:position pos:line="33" pos:column="39"/></name></name> <operator pos:line="33" pos:column="40">&lt;<pos:position pos:line="33" pos:column="44"/></operator> <literal type="number" pos:line="33" pos:column="42">0<pos:position pos:line="33" pos:column="43"/></literal></expr>)<pos:position pos:line="33" pos:column="44"/></condition><then pos:line="33" pos:column="44">
            <comment type="block" pos:line="34" pos:column="13">/* The close() was cancelled and never got executed */</comment>
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="13">close<pos:position pos:line="35" pos:column="18"/></name><argument_list pos:line="35" pos:column="18">(<argument><expr><name><name pos:line="35" pos:column="19">requestp<pos:position pos:line="35" pos:column="27"/></name><operator pos:line="35" pos:column="27">-&gt;<pos:position pos:line="35" pos:column="32"/></operator><name pos:line="35" pos:column="29">fd<pos:position pos:line="35" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="33"/></expr_stmt></block></then></if>

        <break pos:line="37" pos:column="9">break;<pos:position pos:line="37" pos:column="15"/></break>

    <case pos:line="39" pos:column="5">case <expr><name pos:line="39" pos:column="10">_AIO_OP_UNLINK<pos:position pos:line="39" pos:column="24"/></name></expr>:<pos:position pos:line="39" pos:column="25"/></case>

    <case pos:line="41" pos:column="5">case <expr><name pos:line="41" pos:column="10">_AIO_OP_OPENDIR<pos:position pos:line="41" pos:column="25"/></name></expr>:<pos:position pos:line="41" pos:column="26"/></case>
        <expr_stmt><expr><call><name pos:line="42" pos:column="9">squidaio_xstrfree<pos:position pos:line="42" pos:column="26"/></name><argument_list pos:line="42" pos:column="26">(<argument><expr><name><name pos:line="42" pos:column="27">requestp<pos:position pos:line="42" pos:column="35"/></name><operator pos:line="42" pos:column="35">-&gt;<pos:position pos:line="42" pos:column="40"/></operator><name pos:line="42" pos:column="37">path<pos:position pos:line="42" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="43"/></expr_stmt>

        <break pos:line="44" pos:column="9">break;<pos:position pos:line="44" pos:column="15"/></break>

    <case pos:line="46" pos:column="5">case <expr><name pos:line="46" pos:column="10">_AIO_OP_READ<pos:position pos:line="46" pos:column="22"/></name></expr>:<pos:position pos:line="46" pos:column="23"/></case>
        <break pos:line="47" pos:column="9">break;<pos:position pos:line="47" pos:column="15"/></break>

    <case pos:line="49" pos:column="5">case <expr><name pos:line="49" pos:column="10">_AIO_OP_WRITE<pos:position pos:line="49" pos:column="23"/></name></expr>:<pos:position pos:line="49" pos:column="24"/></case>
        <break pos:line="50" pos:column="9">break;<pos:position pos:line="50" pos:column="15"/></break>

    <default pos:line="52" pos:column="5">default:<pos:position pos:line="52" pos:column="13"/></default>
        <break pos:line="53" pos:column="9">break;<pos:position pos:line="53" pos:column="15"/></break>
    }<pos:position pos:line="54" pos:column="6"/></block></switch>

    <if pos:line="56" pos:column="5">if <condition pos:line="56" pos:column="8">(<expr><name pos:line="56" pos:column="9">resultp<pos:position pos:line="56" pos:column="16"/></name> <operator pos:line="56" pos:column="17">!=<pos:position pos:line="56" pos:column="19"/></operator> <name pos:line="56" pos:column="20">NULL<pos:position pos:line="56" pos:column="24"/></name> <operator pos:line="56" pos:column="25">&amp;&amp;<pos:position pos:line="56" pos:column="35"/></operator> <operator pos:line="56" pos:column="28">!<pos:position pos:line="56" pos:column="29"/></operator><name pos:line="56" pos:column="29">cancelled<pos:position pos:line="56" pos:column="38"/></name></expr>)<pos:position pos:line="56" pos:column="39"/></condition><then pos:line="56" pos:column="39"> <block pos:line="56" pos:column="40">{
        <expr_stmt><expr><name><name pos:line="57" pos:column="9">resultp<pos:position pos:line="57" pos:column="16"/></name><operator pos:line="57" pos:column="16">-&gt;<pos:position pos:line="57" pos:column="21"/></operator><name pos:line="57" pos:column="18">aio_return<pos:position pos:line="57" pos:column="28"/></name></name> <operator pos:line="57" pos:column="29">=<pos:position pos:line="57" pos:column="30"/></operator> <name><name pos:line="57" pos:column="31">requestp<pos:position pos:line="57" pos:column="39"/></name><operator pos:line="57" pos:column="39">-&gt;<pos:position pos:line="57" pos:column="44"/></operator><name pos:line="57" pos:column="41">ret<pos:position pos:line="57" pos:column="44"/></name></name></expr>;<pos:position pos:line="57" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="58" pos:column="9">resultp<pos:position pos:line="58" pos:column="16"/></name><operator pos:line="58" pos:column="16">-&gt;<pos:position pos:line="58" pos:column="21"/></operator><name pos:line="58" pos:column="18">aio_errno<pos:position pos:line="58" pos:column="27"/></name></name> <operator pos:line="58" pos:column="28">=<pos:position pos:line="58" pos:column="29"/></operator> <name><name pos:line="58" pos:column="30">requestp<pos:position pos:line="58" pos:column="38"/></name><operator pos:line="58" pos:column="38">-&gt;<pos:position pos:line="58" pos:column="43"/></operator><name pos:line="58" pos:column="40">err<pos:position pos:line="58" pos:column="43"/></name></name></expr>;<pos:position pos:line="58" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="59" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="61" pos:column="5">squidaio_request_pool<pos:position pos:line="61" pos:column="26"/></name><operator pos:line="61" pos:column="26">-&gt;<pos:position pos:line="61" pos:column="31"/></operator><name pos:line="61" pos:column="28">freeOne<pos:position pos:line="61" pos:column="35"/></name></name><argument_list pos:line="61" pos:column="35">(<argument><expr><name pos:line="61" pos:column="36">requestp<pos:position pos:line="61" pos:column="44"/></name></expr></argument>)<pos:position pos:line="61" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="46"/></expr_stmt>
}<pos:position pos:line="62" pos:column="2"/></block></function></unit>
