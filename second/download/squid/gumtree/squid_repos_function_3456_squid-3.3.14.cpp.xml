<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3456_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">httpStatusLineParse<pos:position pos:line="2" pos:column="20"/></name><parameter_list pos:line="2" pos:column="20">(<parameter><decl><type><name pos:line="2" pos:column="21">HttpStatusLine<pos:position pos:line="2" pos:column="35"/></name> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type> <name pos:line="2" pos:column="38">sline<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="45">const<pos:position pos:line="2" pos:column="50"/></specifier> <name pos:line="2" pos:column="51">String<pos:position pos:line="2" pos:column="57"/></name> <modifier pos:line="2" pos:column="58">&amp;<pos:position pos:line="2" pos:column="63"/></modifier></type><name pos:line="2" pos:column="59">protoPrefix<pos:position pos:line="2" pos:column="70"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="72">const<pos:position pos:line="2" pos:column="77"/></specifier> <name pos:line="2" pos:column="78">char<pos:position pos:line="2" pos:column="82"/></name> <modifier pos:line="2" pos:column="83">*<pos:position pos:line="2" pos:column="84"/></modifier></type><name pos:line="2" pos:column="84">start<pos:position pos:line="2" pos:column="89"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="91">const<pos:position pos:line="2" pos:column="96"/></specifier> <name pos:line="2" pos:column="97">char<pos:position pos:line="2" pos:column="101"/></name> <modifier pos:line="2" pos:column="102">*<pos:position pos:line="2" pos:column="103"/></modifier></type><name pos:line="2" pos:column="103">end<pos:position pos:line="2" pos:column="106"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="107"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">sline<pos:position pos:line="4" pos:column="17"/></name></expr></argument>)<pos:position pos:line="4" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="5" pos:column="5">sline<pos:position pos:line="5" pos:column="10"/></name><operator pos:line="5" pos:column="10">-&gt;<pos:position pos:line="5" pos:column="15"/></operator><name pos:line="5" pos:column="12">status<pos:position pos:line="5" pos:column="18"/></name></name> <operator pos:line="5" pos:column="19">=<pos:position pos:line="5" pos:column="20"/></operator> <name pos:line="5" pos:column="21">HTTP_INVALID_HEADER<pos:position pos:line="5" pos:column="40"/></name></expr>;<pos:position pos:line="5" pos:column="41"/></expr_stmt>	<comment type="block" pos:line="5" pos:column="49">/* Squid header parsing error */</comment>

    <comment type="line" pos:line="7" pos:column="5">// XXX: HttpMsg::parse() has a similar check but is using</comment>
    <comment type="line" pos:line="8" pos:column="5">// casesensitive comparison (which is required by HTTP errata?)</comment>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><call><name><name pos:line="10" pos:column="9">protoPrefix<pos:position pos:line="10" pos:column="20"/></name><operator pos:line="10" pos:column="20">.<pos:position pos:line="10" pos:column="21"/></operator><name pos:line="10" pos:column="21">cmp<pos:position pos:line="10" pos:column="24"/></name></name><argument_list pos:line="10" pos:column="24">(<argument><expr><literal type="string" pos:line="10" pos:column="25">"ICY"<pos:position pos:line="10" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="32">3<pos:position pos:line="10" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="34"/></argument_list></call> <operator pos:line="10" pos:column="35">==<pos:position pos:line="10" pos:column="37"/></operator> <literal type="number" pos:line="10" pos:column="38">0<pos:position pos:line="10" pos:column="39"/></literal></expr>)<pos:position pos:line="10" pos:column="40"/></condition><then pos:line="10" pos:column="40"> <block pos:line="10" pos:column="41">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">debugs<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><literal type="number" pos:line="11" pos:column="16">57<pos:position pos:line="11" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="20">3<pos:position pos:line="11" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="23">"httpStatusLineParse: Invalid HTTP identifier. Detected ICY protocol istead."<pos:position pos:line="11" pos:column="100"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="101"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="102"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="12" pos:column="9">sline<pos:position pos:line="12" pos:column="14"/></name><operator pos:line="12" pos:column="14">-&gt;<pos:position pos:line="12" pos:column="19"/></operator><name pos:line="12" pos:column="16">protocol<pos:position pos:line="12" pos:column="24"/></name></name> <operator pos:line="12" pos:column="25">=<pos:position pos:line="12" pos:column="26"/></operator> <name><name pos:line="12" pos:column="27">AnyP<pos:position pos:line="12" pos:column="31"/></name><operator pos:line="12" pos:column="31">::<pos:position pos:line="12" pos:column="33"/></operator><name pos:line="12" pos:column="33">PROTO_ICY<pos:position pos:line="12" pos:column="42"/></name></name></expr>;<pos:position pos:line="12" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><name pos:line="13" pos:column="9">start<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">+=<pos:position pos:line="13" pos:column="17"/></operator> <call><name><name pos:line="13" pos:column="18">protoPrefix<pos:position pos:line="13" pos:column="29"/></name><operator pos:line="13" pos:column="29">.<pos:position pos:line="13" pos:column="30"/></operator><name pos:line="13" pos:column="30">size<pos:position pos:line="13" pos:column="34"/></name></name><argument_list pos:line="13" pos:column="34">()<pos:position pos:line="13" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></then> <elseif pos:line="14" pos:column="7">else <if pos:line="14" pos:column="12">if <condition pos:line="14" pos:column="15">(<expr><call><name><name pos:line="14" pos:column="16">protoPrefix<pos:position pos:line="14" pos:column="27"/></name><operator pos:line="14" pos:column="27">.<pos:position pos:line="14" pos:column="28"/></operator><name pos:line="14" pos:column="28">caseCmp<pos:position pos:line="14" pos:column="35"/></name></name><argument_list pos:line="14" pos:column="35">(<argument><expr><name pos:line="14" pos:column="36">start<pos:position pos:line="14" pos:column="41"/></name></expr></argument>, <argument><expr><call><name><name pos:line="14" pos:column="43">protoPrefix<pos:position pos:line="14" pos:column="54"/></name><operator pos:line="14" pos:column="54">.<pos:position pos:line="14" pos:column="55"/></operator><name pos:line="14" pos:column="55">size<pos:position pos:line="14" pos:column="59"/></name></name><argument_list pos:line="14" pos:column="59">()<pos:position pos:line="14" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="62"/></argument_list></call> <operator pos:line="14" pos:column="63">==<pos:position pos:line="14" pos:column="65"/></operator> <literal type="number" pos:line="14" pos:column="66">0<pos:position pos:line="14" pos:column="67"/></literal></expr>)<pos:position pos:line="14" pos:column="68"/></condition><then pos:line="14" pos:column="68"> <block pos:line="14" pos:column="69">{

        <expr_stmt><expr><name pos:line="16" pos:column="9">start<pos:position pos:line="16" pos:column="14"/></name> <operator pos:line="16" pos:column="15">+=<pos:position pos:line="16" pos:column="17"/></operator> <call><name><name pos:line="16" pos:column="18">protoPrefix<pos:position pos:line="16" pos:column="29"/></name><operator pos:line="16" pos:column="29">.<pos:position pos:line="16" pos:column="30"/></operator><name pos:line="16" pos:column="30">size<pos:position pos:line="16" pos:column="34"/></name></name><argument_list pos:line="16" pos:column="34">()<pos:position pos:line="16" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="37"/></expr_stmt>

        <if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><operator pos:line="18" pos:column="13">!<pos:position pos:line="18" pos:column="14"/></operator><call><name pos:line="18" pos:column="14">xisdigit<pos:position pos:line="18" pos:column="22"/></name><argument_list pos:line="18" pos:column="22">(<argument><expr><operator pos:line="18" pos:column="23">*<pos:position pos:line="18" pos:column="24"/></operator><name pos:line="18" pos:column="24">start<pos:position pos:line="18" pos:column="29"/></name></expr></argument>)<pos:position pos:line="18" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="31"/></condition><then pos:line="18" pos:column="31">
            <block type="pseudo"><return pos:line="19" pos:column="13">return <expr><literal type="number" pos:line="19" pos:column="20">0<pos:position pos:line="19" pos:column="21"/></literal></expr>;<pos:position pos:line="19" pos:column="22"/></return></block></then></if>

        <if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><call><name pos:line="21" pos:column="13">sscanf<pos:position pos:line="21" pos:column="19"/></name><argument_list pos:line="21" pos:column="19">(<argument><expr><name pos:line="21" pos:column="20">start<pos:position pos:line="21" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="27">"%d.%d"<pos:position pos:line="21" pos:column="34"/></literal></expr></argument>, <argument><expr><operator pos:line="21" pos:column="36">&amp;<pos:position pos:line="21" pos:column="41"/></operator><name><name pos:line="21" pos:column="37">sline<pos:position pos:line="21" pos:column="42"/></name><operator pos:line="21" pos:column="42">-&gt;<pos:position pos:line="21" pos:column="47"/></operator><name pos:line="21" pos:column="44">version<pos:position pos:line="21" pos:column="51"/></name><operator pos:line="21" pos:column="51">.<pos:position pos:line="21" pos:column="52"/></operator><name pos:line="21" pos:column="52">major<pos:position pos:line="21" pos:column="57"/></name></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="59">&amp;<pos:position pos:line="21" pos:column="64"/></operator><name><name pos:line="21" pos:column="60">sline<pos:position pos:line="21" pos:column="65"/></name><operator pos:line="21" pos:column="65">-&gt;<pos:position pos:line="21" pos:column="70"/></operator><name pos:line="21" pos:column="67">version<pos:position pos:line="21" pos:column="74"/></name><operator pos:line="21" pos:column="74">.<pos:position pos:line="21" pos:column="75"/></operator><name pos:line="21" pos:column="75">minor<pos:position pos:line="21" pos:column="80"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="81"/></argument_list></call> <operator pos:line="21" pos:column="82">!=<pos:position pos:line="21" pos:column="84"/></operator> <literal type="number" pos:line="21" pos:column="85">2<pos:position pos:line="21" pos:column="86"/></literal></expr>)<pos:position pos:line="21" pos:column="87"/></condition><then pos:line="21" pos:column="87"> <block pos:line="21" pos:column="88">{
            <expr_stmt><expr><call><name pos:line="22" pos:column="13">debugs<pos:position pos:line="22" pos:column="19"/></name><argument_list pos:line="22" pos:column="19">(<argument><expr><literal type="number" pos:line="22" pos:column="20">57<pos:position pos:line="22" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="24">7<pos:position pos:line="22" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="27">"httpStatusLineParse: Invalid HTTP identifier."<pos:position pos:line="22" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="76"/></expr_stmt>
        }<pos:position pos:line="23" pos:column="10"/></block></then></if>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if></elseif> <else pos:line="24" pos:column="7">else
        <block type="pseudo"><return pos:line="25" pos:column="9">return <expr><literal type="number" pos:line="25" pos:column="16">0<pos:position pos:line="25" pos:column="17"/></literal></expr>;<pos:position pos:line="25" pos:column="18"/></return></block></else></if>

    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><operator pos:line="27" pos:column="9">!<pos:position pos:line="27" pos:column="10"/></operator><operator pos:line="27" pos:column="10">(<pos:position pos:line="27" pos:column="11"/></operator><name pos:line="27" pos:column="11">start<pos:position pos:line="27" pos:column="16"/></name> <operator pos:line="27" pos:column="17">=<pos:position pos:line="27" pos:column="18"/></operator> <call><name pos:line="27" pos:column="19">strchr<pos:position pos:line="27" pos:column="25"/></name><argument_list pos:line="27" pos:column="25">(<argument><expr><name pos:line="27" pos:column="26">start<pos:position pos:line="27" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="27" pos:column="33">' '<pos:position pos:line="27" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="37"/></argument_list></call><operator pos:line="27" pos:column="37">)<pos:position pos:line="27" pos:column="38"/></operator></expr>)<pos:position pos:line="27" pos:column="39"/></condition><then pos:line="27" pos:column="39">
        <block type="pseudo"><return pos:line="28" pos:column="9">return <expr><literal type="number" pos:line="28" pos:column="16">0<pos:position pos:line="28" pos:column="17"/></literal></expr>;<pos:position pos:line="28" pos:column="18"/></return></block></then></if>

    <expr_stmt><expr><name><name pos:line="30" pos:column="5">sline<pos:position pos:line="30" pos:column="10"/></name><operator pos:line="30" pos:column="10">-&gt;<pos:position pos:line="30" pos:column="15"/></operator><name pos:line="30" pos:column="12">status<pos:position pos:line="30" pos:column="18"/></name></name> <operator pos:line="30" pos:column="19">=<pos:position pos:line="30" pos:column="20"/></operator> <operator pos:line="30" pos:column="21">(<pos:position pos:line="30" pos:column="22"/></operator><name pos:line="30" pos:column="22">http_status<pos:position pos:line="30" pos:column="33"/></name><operator pos:line="30" pos:column="33">)<pos:position pos:line="30" pos:column="34"/></operator> <call><name pos:line="30" pos:column="35">atoi<pos:position pos:line="30" pos:column="39"/></name><argument_list pos:line="30" pos:column="39">(<argument><expr><operator pos:line="30" pos:column="40">++<pos:position pos:line="30" pos:column="42"/></operator><name pos:line="30" pos:column="42">start<pos:position pos:line="30" pos:column="47"/></name></expr></argument>)<pos:position pos:line="30" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="49"/></expr_stmt>

    <comment type="block" pos:line="32" pos:column="5">/* we ignore 'reason-phrase' */</comment>
    <comment type="block" pos:line="33" pos:column="5">/* Should assert start &lt; end ? */</comment>
    <return pos:line="34" pos:column="5">return <expr><literal type="number" pos:line="34" pos:column="12">1<pos:position pos:line="34" pos:column="13"/></literal></expr>;<pos:position pos:line="34" pos:column="14"/></return>			<comment type="block" pos:line="34" pos:column="33">/* success */</comment>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
