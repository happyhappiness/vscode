<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_507_squid-3.1.23.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">struct<pos:position pos:line="1" pos:column="7"/></name> <name pos:line="1" pos:column="8">variable_list<pos:position pos:line="1" pos:column="21"/></name></name> <modifier pos:line="1" pos:column="22">*<pos:position pos:line="1" pos:column="23"/></modifier></type>
<name pos:line="2" pos:column="1">snmp_var_clone<pos:position pos:line="2" pos:column="15"/></name><parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><name><name pos:line="2" pos:column="16">struct<pos:position pos:line="2" pos:column="22"/></name> <name pos:line="2" pos:column="23">variable_list<pos:position pos:line="2" pos:column="36"/></name></name> <modifier pos:line="2" pos:column="37">*<pos:position pos:line="2" pos:column="38"/></modifier></type><name pos:line="2" pos:column="38">Src<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="42"/></parameter_list> <block pos:line="2" pos:column="43">{
    <decl_stmt><decl><type><name><name pos:line="3" pos:column="5">struct<pos:position pos:line="3" pos:column="11"/></name> <name pos:line="3" pos:column="12">variable_list<pos:position pos:line="3" pos:column="25"/></name></name> <modifier pos:line="3" pos:column="26">*<pos:position pos:line="3" pos:column="27"/></modifier></type><name pos:line="3" pos:column="27">Dest<pos:position pos:line="3" pos:column="31"/></name></decl>;<pos:position pos:line="3" pos:column="32"/></decl_stmt>

<cpp:ifdef pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">ifdef<pos:position pos:line="5" pos:column="7"/></cpp:directive> <name pos:line="5" pos:column="8">DEBUG_VARS<pos:position pos:line="5" pos:column="18"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">printf<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><literal type="string" pos:line="6" pos:column="12">"VARS: Cloning.\n"<pos:position pos:line="6" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="32"/></expr_stmt>
<cpp:endif pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">endif<pos:position pos:line="7" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><name pos:line="9" pos:column="5">Dest<pos:position pos:line="9" pos:column="9"/></name> <operator pos:line="9" pos:column="10">=<pos:position pos:line="9" pos:column="11"/></operator> <operator pos:line="9" pos:column="12">(<pos:position pos:line="9" pos:column="13"/></operator>struct <name pos:line="9" pos:column="20">variable_list<pos:position pos:line="9" pos:column="33"/></name> <operator pos:line="9" pos:column="34">*<pos:position pos:line="9" pos:column="35"/></operator><operator pos:line="9" pos:column="35">)<pos:position pos:line="9" pos:column="36"/></operator> <call><name pos:line="9" pos:column="37">xmalloc<pos:position pos:line="9" pos:column="44"/></name><argument_list pos:line="9" pos:column="44">(<argument><expr><sizeof pos:line="9" pos:column="45">sizeof<argument_list pos:line="9" pos:column="51">(<argument><expr pos:line="9" pos:column="52">struct <name pos:line="9" pos:column="59">variable_list<pos:position pos:line="9" pos:column="72"/></name></expr></argument>)<pos:position pos:line="9" pos:column="73"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="75"/></expr_stmt>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">Dest<pos:position pos:line="10" pos:column="13"/></name> <operator pos:line="10" pos:column="14">==<pos:position pos:line="10" pos:column="16"/></operator> <name pos:line="10" pos:column="17">NULL<pos:position pos:line="10" pos:column="21"/></name></expr>)<pos:position pos:line="10" pos:column="22"/></condition><then pos:line="10" pos:column="22"> <block pos:line="10" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">snmp_set_api_error<pos:position pos:line="11" pos:column="27"/></name><argument_list pos:line="11" pos:column="27">(<argument><expr><name pos:line="11" pos:column="28">SNMPERR_OS_ERR<pos:position pos:line="11" pos:column="42"/></name></expr></argument>)<pos:position pos:line="11" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="44"/></expr_stmt>
        <return pos:line="12" pos:column="9">return <expr><operator pos:line="12" pos:column="16">(<pos:position pos:line="12" pos:column="17"/></operator><name pos:line="12" pos:column="17">NULL<pos:position pos:line="12" pos:column="21"/></name><operator pos:line="12" pos:column="21">)<pos:position pos:line="12" pos:column="22"/></operator></expr>;<pos:position pos:line="12" pos:column="23"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>
<cpp:ifdef pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">ifdef<pos:position pos:line="14" pos:column="7"/></cpp:directive> <name pos:line="14" pos:column="8">DEBUG_VARS<pos:position pos:line="14" pos:column="18"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">printf<pos:position pos:line="15" pos:column="11"/></name><argument_list pos:line="15" pos:column="11">(<argument><expr><literal type="string" pos:line="15" pos:column="12">"VARS: Copying entire variable list.  (Size %d)\n"<pos:position pos:line="15" pos:column="62"/></literal></expr></argument>,
           <argument><expr><sizeof pos:line="16" pos:column="12">sizeof<argument_list pos:line="16" pos:column="18">(<argument><expr pos:line="16" pos:column="19">struct <name pos:line="16" pos:column="26">variable_list<pos:position pos:line="16" pos:column="39"/></name></expr></argument>)<pos:position pos:line="16" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="16" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="42"/></expr_stmt>
<cpp:endif pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">endif<pos:position pos:line="17" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="19" pos:column="5">xmemcpy<pos:position pos:line="19" pos:column="12"/></name><argument_list pos:line="19" pos:column="12">(<argument><expr><operator pos:line="19" pos:column="13">(<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="14">char<pos:position pos:line="19" pos:column="18"/></name> <operator pos:line="19" pos:column="19">*<pos:position pos:line="19" pos:column="20"/></operator><operator pos:line="19" pos:column="20">)<pos:position pos:line="19" pos:column="21"/></operator> <name pos:line="19" pos:column="22">Dest<pos:position pos:line="19" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="28">(<pos:position pos:line="19" pos:column="29"/></operator><name pos:line="19" pos:column="29">char<pos:position pos:line="19" pos:column="33"/></name> <operator pos:line="19" pos:column="34">*<pos:position pos:line="19" pos:column="35"/></operator><operator pos:line="19" pos:column="35">)<pos:position pos:line="19" pos:column="36"/></operator> <name pos:line="19" pos:column="37">Src<pos:position pos:line="19" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="19" pos:column="42">sizeof<argument_list pos:line="19" pos:column="48">(<argument><expr pos:line="19" pos:column="49">struct <name pos:line="19" pos:column="56">variable_list<pos:position pos:line="19" pos:column="69"/></name></expr></argument>)<pos:position pos:line="19" pos:column="70"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="19" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="72"/></expr_stmt>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name><name pos:line="21" pos:column="9">Src<pos:position pos:line="21" pos:column="12"/></name><operator pos:line="21" pos:column="12">-&gt;<pos:position pos:line="21" pos:column="17"/></operator><name pos:line="21" pos:column="14">name<pos:position pos:line="21" pos:column="18"/></name></name> <operator pos:line="21" pos:column="19">!=<pos:position pos:line="21" pos:column="21"/></operator> <name pos:line="21" pos:column="22">NULL<pos:position pos:line="21" pos:column="26"/></name></expr>)<pos:position pos:line="21" pos:column="27"/></condition><then pos:line="21" pos:column="27"> <block pos:line="21" pos:column="28">{
        <expr_stmt><expr><name><name pos:line="22" pos:column="9">Dest<pos:position pos:line="22" pos:column="13"/></name><operator pos:line="22" pos:column="13">-&gt;<pos:position pos:line="22" pos:column="18"/></operator><name pos:line="22" pos:column="15">name<pos:position pos:line="22" pos:column="19"/></name></name> <operator pos:line="22" pos:column="20">=<pos:position pos:line="22" pos:column="21"/></operator> <operator pos:line="22" pos:column="22">(<pos:position pos:line="22" pos:column="23"/></operator><name pos:line="22" pos:column="23">oid<pos:position pos:line="22" pos:column="26"/></name> <operator pos:line="22" pos:column="27">*<pos:position pos:line="22" pos:column="28"/></operator><operator pos:line="22" pos:column="28">)<pos:position pos:line="22" pos:column="29"/></operator> <call><name pos:line="22" pos:column="30">xmalloc<pos:position pos:line="22" pos:column="37"/></name><argument_list pos:line="22" pos:column="37">(<argument><expr><name><name pos:line="22" pos:column="38">Src<pos:position pos:line="22" pos:column="41"/></name><operator pos:line="22" pos:column="41">-&gt;<pos:position pos:line="22" pos:column="46"/></operator><name pos:line="22" pos:column="43">name_length<pos:position pos:line="22" pos:column="54"/></name></name> <operator pos:line="22" pos:column="55">*<pos:position pos:line="22" pos:column="56"/></operator> <sizeof pos:line="22" pos:column="57">sizeof<argument_list pos:line="22" pos:column="63">(<argument><expr><name pos:line="22" pos:column="64">oid<pos:position pos:line="22" pos:column="67"/></name></expr></argument>)<pos:position pos:line="22" pos:column="68"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="70"/></expr_stmt>
        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name><name pos:line="23" pos:column="13">Dest<pos:position pos:line="23" pos:column="17"/></name><operator pos:line="23" pos:column="17">-&gt;<pos:position pos:line="23" pos:column="22"/></operator><name pos:line="23" pos:column="19">name<pos:position pos:line="23" pos:column="23"/></name></name> <operator pos:line="23" pos:column="24">==<pos:position pos:line="23" pos:column="26"/></operator> <name pos:line="23" pos:column="27">NULL<pos:position pos:line="23" pos:column="31"/></name></expr>)<pos:position pos:line="23" pos:column="32"/></condition><then pos:line="23" pos:column="32"> <block pos:line="23" pos:column="33">{
            <expr_stmt><expr><call><name pos:line="24" pos:column="13">snmp_set_api_error<pos:position pos:line="24" pos:column="31"/></name><argument_list pos:line="24" pos:column="31">(<argument><expr><name pos:line="24" pos:column="32">SNMPERR_OS_ERR<pos:position pos:line="24" pos:column="46"/></name></expr></argument>)<pos:position pos:line="24" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="48"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="25" pos:column="13">xfree<pos:position pos:line="25" pos:column="18"/></name><argument_list pos:line="25" pos:column="18">(<argument><expr><name pos:line="25" pos:column="19">Dest<pos:position pos:line="25" pos:column="23"/></name></expr></argument>)<pos:position pos:line="25" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="25"/></expr_stmt>
            <return pos:line="26" pos:column="13">return <expr><operator pos:line="26" pos:column="20">(<pos:position pos:line="26" pos:column="21"/></operator><name pos:line="26" pos:column="21">NULL<pos:position pos:line="26" pos:column="25"/></name><operator pos:line="26" pos:column="25">)<pos:position pos:line="26" pos:column="26"/></operator></expr>;<pos:position pos:line="26" pos:column="27"/></return>
        }<pos:position pos:line="27" pos:column="10"/></block></then></if>
<cpp:ifdef pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">ifdef<pos:position pos:line="28" pos:column="7"/></cpp:directive> <name pos:line="28" pos:column="8">DEBUG_VARS<pos:position pos:line="28" pos:column="18"/></name></cpp:ifdef>
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">printf<pos:position pos:line="29" pos:column="15"/></name><argument_list pos:line="29" pos:column="15">(<argument><expr><literal type="string" pos:line="29" pos:column="16">"VARS: Copying name OID. (Size %d)\n"<pos:position pos:line="29" pos:column="53"/></literal></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="55">Src<pos:position pos:line="29" pos:column="58"/></name><operator pos:line="29" pos:column="58">-&gt;<pos:position pos:line="29" pos:column="63"/></operator><name pos:line="29" pos:column="60">name_length<pos:position pos:line="29" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="73"/></expr_stmt>
<cpp:endif pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">endif<pos:position pos:line="30" pos:column="7"/></cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name pos:line="31" pos:column="9">xmemcpy<pos:position pos:line="31" pos:column="16"/></name><argument_list pos:line="31" pos:column="16">(<argument><expr><operator pos:line="31" pos:column="17">(<pos:position pos:line="31" pos:column="18"/></operator><name pos:line="31" pos:column="18">char<pos:position pos:line="31" pos:column="22"/></name> <operator pos:line="31" pos:column="23">*<pos:position pos:line="31" pos:column="24"/></operator><operator pos:line="31" pos:column="24">)<pos:position pos:line="31" pos:column="25"/></operator> <name><name pos:line="31" pos:column="26">Dest<pos:position pos:line="31" pos:column="30"/></name><operator pos:line="31" pos:column="30">-&gt;<pos:position pos:line="31" pos:column="35"/></operator><name pos:line="31" pos:column="32">name<pos:position pos:line="31" pos:column="36"/></name></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="38">(<pos:position pos:line="31" pos:column="39"/></operator><name pos:line="31" pos:column="39">char<pos:position pos:line="31" pos:column="43"/></name> <operator pos:line="31" pos:column="44">*<pos:position pos:line="31" pos:column="45"/></operator><operator pos:line="31" pos:column="45">)<pos:position pos:line="31" pos:column="46"/></operator> <name><name pos:line="31" pos:column="47">Src<pos:position pos:line="31" pos:column="50"/></name><operator pos:line="31" pos:column="50">-&gt;<pos:position pos:line="31" pos:column="55"/></operator><name pos:line="31" pos:column="52">name<pos:position pos:line="31" pos:column="56"/></name></name></expr></argument>,
                <argument><expr><name><name pos:line="32" pos:column="17">Src<pos:position pos:line="32" pos:column="20"/></name><operator pos:line="32" pos:column="20">-&gt;<pos:position pos:line="32" pos:column="25"/></operator><name pos:line="32" pos:column="22">name_length<pos:position pos:line="32" pos:column="33"/></name></name> <operator pos:line="32" pos:column="34">*<pos:position pos:line="32" pos:column="35"/></operator> <sizeof pos:line="32" pos:column="36">sizeof<argument_list pos:line="32" pos:column="42">(<argument><expr><name pos:line="32" pos:column="43">oid<pos:position pos:line="32" pos:column="46"/></name></expr></argument>)<pos:position pos:line="32" pos:column="47"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="32" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="49"/></expr_stmt>
    }<pos:position pos:line="33" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="34" pos:column="5">/* CISCO Catalyst 2900 returns NULL strings as data of length 0. */</comment>
    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><operator pos:line="35" pos:column="9">(<pos:position pos:line="35" pos:column="10"/></operator><name><name pos:line="35" pos:column="10">Src<pos:position pos:line="35" pos:column="13"/></name><operator pos:line="35" pos:column="13">-&gt;<pos:position pos:line="35" pos:column="18"/></operator><name pos:line="35" pos:column="15">val<pos:position pos:line="35" pos:column="18"/></name><operator pos:line="35" pos:column="18">.<pos:position pos:line="35" pos:column="19"/></operator><name pos:line="35" pos:column="19">string<pos:position pos:line="35" pos:column="25"/></name></name> <operator pos:line="35" pos:column="26">!=<pos:position pos:line="35" pos:column="28"/></operator> <name pos:line="35" pos:column="29">NULL<pos:position pos:line="35" pos:column="33"/></name><operator pos:line="35" pos:column="33">)<pos:position pos:line="35" pos:column="34"/></operator> <operator pos:line="35" pos:column="35">&amp;&amp;<pos:position pos:line="35" pos:column="45"/></operator>
            <operator pos:line="36" pos:column="13">(<pos:position pos:line="36" pos:column="14"/></operator><name><name pos:line="36" pos:column="14">Src<pos:position pos:line="36" pos:column="17"/></name><operator pos:line="36" pos:column="17">-&gt;<pos:position pos:line="36" pos:column="22"/></operator><name pos:line="36" pos:column="19">val_len<pos:position pos:line="36" pos:column="26"/></name></name><operator pos:line="36" pos:column="26">)<pos:position pos:line="36" pos:column="27"/></operator></expr>)<pos:position pos:line="36" pos:column="28"/></condition><then pos:line="36" pos:column="28"> <block pos:line="36" pos:column="29">{
        <expr_stmt><expr><name><name pos:line="37" pos:column="9">Dest<pos:position pos:line="37" pos:column="13"/></name><operator pos:line="37" pos:column="13">-&gt;<pos:position pos:line="37" pos:column="18"/></operator><name pos:line="37" pos:column="15">val<pos:position pos:line="37" pos:column="18"/></name><operator pos:line="37" pos:column="18">.<pos:position pos:line="37" pos:column="19"/></operator><name pos:line="37" pos:column="19">string<pos:position pos:line="37" pos:column="25"/></name></name> <operator pos:line="37" pos:column="26">=<pos:position pos:line="37" pos:column="27"/></operator> <operator pos:line="37" pos:column="28">(<pos:position pos:line="37" pos:column="29"/></operator><name pos:line="37" pos:column="29">u_char<pos:position pos:line="37" pos:column="35"/></name> <operator pos:line="37" pos:column="36">*<pos:position pos:line="37" pos:column="37"/></operator><operator pos:line="37" pos:column="37">)<pos:position pos:line="37" pos:column="38"/></operator> <call><name pos:line="37" pos:column="39">xmalloc<pos:position pos:line="37" pos:column="46"/></name><argument_list pos:line="37" pos:column="46">(<argument><expr><name><name pos:line="37" pos:column="47">Src<pos:position pos:line="37" pos:column="50"/></name><operator pos:line="37" pos:column="50">-&gt;<pos:position pos:line="37" pos:column="55"/></operator><name pos:line="37" pos:column="52">val_len<pos:position pos:line="37" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="61"/></expr_stmt>
        <if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name><name pos:line="38" pos:column="13">Dest<pos:position pos:line="38" pos:column="17"/></name><operator pos:line="38" pos:column="17">-&gt;<pos:position pos:line="38" pos:column="22"/></operator><name pos:line="38" pos:column="19">val<pos:position pos:line="38" pos:column="22"/></name><operator pos:line="38" pos:column="22">.<pos:position pos:line="38" pos:column="23"/></operator><name pos:line="38" pos:column="23">string<pos:position pos:line="38" pos:column="29"/></name></name> <operator pos:line="38" pos:column="30">==<pos:position pos:line="38" pos:column="32"/></operator> <name pos:line="38" pos:column="33">NULL<pos:position pos:line="38" pos:column="37"/></name></expr>)<pos:position pos:line="38" pos:column="38"/></condition><then pos:line="38" pos:column="38"> <block pos:line="38" pos:column="39">{
            <expr_stmt><expr><call><name pos:line="39" pos:column="13">snmp_set_api_error<pos:position pos:line="39" pos:column="31"/></name><argument_list pos:line="39" pos:column="31">(<argument><expr><name pos:line="39" pos:column="32">SNMPERR_OS_ERR<pos:position pos:line="39" pos:column="46"/></name></expr></argument>)<pos:position pos:line="39" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="48"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="40" pos:column="13">xfree<pos:position pos:line="40" pos:column="18"/></name><argument_list pos:line="40" pos:column="18">(<argument><expr><name><name pos:line="40" pos:column="19">Dest<pos:position pos:line="40" pos:column="23"/></name><operator pos:line="40" pos:column="23">-&gt;<pos:position pos:line="40" pos:column="28"/></operator><name pos:line="40" pos:column="25">name<pos:position pos:line="40" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="31"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="41" pos:column="13">xfree<pos:position pos:line="41" pos:column="18"/></name><argument_list pos:line="41" pos:column="18">(<argument><expr><name pos:line="41" pos:column="19">Dest<pos:position pos:line="41" pos:column="23"/></name></expr></argument>)<pos:position pos:line="41" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="25"/></expr_stmt>
            <return pos:line="42" pos:column="13">return <expr><operator pos:line="42" pos:column="20">(<pos:position pos:line="42" pos:column="21"/></operator><name pos:line="42" pos:column="21">NULL<pos:position pos:line="42" pos:column="25"/></name><operator pos:line="42" pos:column="25">)<pos:position pos:line="42" pos:column="26"/></operator></expr>;<pos:position pos:line="42" pos:column="27"/></return>
        }<pos:position pos:line="43" pos:column="10"/></block></then></if>
<cpp:ifdef pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">ifdef<pos:position pos:line="44" pos:column="7"/></cpp:directive> <name pos:line="44" pos:column="8">DEBUG_VARS<pos:position pos:line="44" pos:column="18"/></name></cpp:ifdef>
        <expr_stmt><expr><call><name pos:line="45" pos:column="9">printf<pos:position pos:line="45" pos:column="15"/></name><argument_list pos:line="45" pos:column="15">(<argument><expr><literal type="string" pos:line="45" pos:column="16">"VARS: Copying value (Size %d)\n"<pos:position pos:line="45" pos:column="49"/></literal></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="51">Src<pos:position pos:line="45" pos:column="54"/></name><operator pos:line="45" pos:column="54">-&gt;<pos:position pos:line="45" pos:column="59"/></operator><name pos:line="45" pos:column="56">val_len<pos:position pos:line="45" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="65"/></expr_stmt>
<cpp:endif pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">endif<pos:position pos:line="46" pos:column="7"/></cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name pos:line="47" pos:column="9">xmemcpy<pos:position pos:line="47" pos:column="16"/></name><argument_list pos:line="47" pos:column="16">(<argument><expr><operator pos:line="47" pos:column="17">(<pos:position pos:line="47" pos:column="18"/></operator><name pos:line="47" pos:column="18">char<pos:position pos:line="47" pos:column="22"/></name> <operator pos:line="47" pos:column="23">*<pos:position pos:line="47" pos:column="24"/></operator><operator pos:line="47" pos:column="24">)<pos:position pos:line="47" pos:column="25"/></operator> <name><name pos:line="47" pos:column="26">Dest<pos:position pos:line="47" pos:column="30"/></name><operator pos:line="47" pos:column="30">-&gt;<pos:position pos:line="47" pos:column="35"/></operator><name pos:line="47" pos:column="32">val<pos:position pos:line="47" pos:column="35"/></name><operator pos:line="47" pos:column="35">.<pos:position pos:line="47" pos:column="36"/></operator><name pos:line="47" pos:column="36">string<pos:position pos:line="47" pos:column="42"/></name></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="44">(<pos:position pos:line="47" pos:column="45"/></operator><name pos:line="47" pos:column="45">char<pos:position pos:line="47" pos:column="49"/></name> <operator pos:line="47" pos:column="50">*<pos:position pos:line="47" pos:column="51"/></operator><operator pos:line="47" pos:column="51">)<pos:position pos:line="47" pos:column="52"/></operator> <name><name pos:line="47" pos:column="53">Src<pos:position pos:line="47" pos:column="56"/></name><operator pos:line="47" pos:column="56">-&gt;<pos:position pos:line="47" pos:column="61"/></operator><name pos:line="47" pos:column="58">val<pos:position pos:line="47" pos:column="61"/></name><operator pos:line="47" pos:column="61">.<pos:position pos:line="47" pos:column="62"/></operator><name pos:line="47" pos:column="62">string<pos:position pos:line="47" pos:column="68"/></name></name></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="70">Src<pos:position pos:line="47" pos:column="73"/></name><operator pos:line="47" pos:column="73">-&gt;<pos:position pos:line="47" pos:column="78"/></operator><name pos:line="47" pos:column="75">val_len<pos:position pos:line="47" pos:column="82"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="84"/></expr_stmt>
    }<pos:position pos:line="48" pos:column="6"/></block></then></if>
<cpp:ifdef pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">ifdef<pos:position pos:line="49" pos:column="7"/></cpp:directive> <name pos:line="49" pos:column="8">DEBUG_VARS<pos:position pos:line="49" pos:column="18"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="50" pos:column="5">printf<pos:position pos:line="50" pos:column="11"/></name><argument_list pos:line="50" pos:column="11">(<argument><expr><literal type="string" pos:line="50" pos:column="12">"VARS: Cloned %x.\n"<pos:position pos:line="50" pos:column="32"/></literal></expr></argument>, <argument><expr><operator pos:line="50" pos:column="34">(<pos:position pos:line="50" pos:column="35"/></operator><name pos:line="50" pos:column="35">unsigned<pos:position pos:line="50" pos:column="43"/></name> <name pos:line="50" pos:column="44">int<pos:position pos:line="50" pos:column="47"/></name><operator pos:line="50" pos:column="47">)<pos:position pos:line="50" pos:column="48"/></operator> <name pos:line="50" pos:column="49">Dest<pos:position pos:line="50" pos:column="53"/></name></expr></argument>)<pos:position pos:line="50" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="55"/></expr_stmt>
<cpp:endif pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">endif<pos:position pos:line="51" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">ifdef<pos:position pos:line="52" pos:column="7"/></cpp:directive> <name pos:line="52" pos:column="8">DEBUG_VARS_MALLOC<pos:position pos:line="52" pos:column="25"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="53" pos:column="5">printf<pos:position pos:line="53" pos:column="11"/></name><argument_list pos:line="53" pos:column="11">(<argument><expr><literal type="string" pos:line="53" pos:column="12">"VARS: Cloned  (%x)\n"<pos:position pos:line="53" pos:column="34"/></literal></expr></argument>, <argument><expr><operator pos:line="53" pos:column="36">(<pos:position pos:line="53" pos:column="37"/></operator><name pos:line="53" pos:column="37">unsigned<pos:position pos:line="53" pos:column="45"/></name> <name pos:line="53" pos:column="46">int<pos:position pos:line="53" pos:column="49"/></name><operator pos:line="53" pos:column="49">)<pos:position pos:line="53" pos:column="50"/></operator> <name pos:line="53" pos:column="51">Dest<pos:position pos:line="53" pos:column="55"/></name></expr></argument>)<pos:position pos:line="53" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="54" pos:column="5">printf<pos:position pos:line="54" pos:column="11"/></name><argument_list pos:line="54" pos:column="11">(<argument><expr><literal type="string" pos:line="54" pos:column="12">"VARS: Name is (%x)\n"<pos:position pos:line="54" pos:column="34"/></literal></expr></argument>, <argument><expr><operator pos:line="54" pos:column="36">(<pos:position pos:line="54" pos:column="37"/></operator><name pos:line="54" pos:column="37">unsigned<pos:position pos:line="54" pos:column="45"/></name> <name pos:line="54" pos:column="46">int<pos:position pos:line="54" pos:column="49"/></name><operator pos:line="54" pos:column="49">)<pos:position pos:line="54" pos:column="50"/></operator> <name><name pos:line="54" pos:column="51">Dest<pos:position pos:line="54" pos:column="55"/></name><operator pos:line="54" pos:column="55">-&gt;<pos:position pos:line="54" pos:column="60"/></operator><name pos:line="54" pos:column="57">name<pos:position pos:line="54" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="63"/></expr_stmt>
<cpp:endif pos:line="55" pos:column="1">#<cpp:directive pos:line="55" pos:column="2">endif<pos:position pos:line="55" pos:column="7"/></cpp:directive></cpp:endif>

    <return pos:line="57" pos:column="5">return <expr><operator pos:line="57" pos:column="12">(<pos:position pos:line="57" pos:column="13"/></operator><name pos:line="57" pos:column="13">Dest<pos:position pos:line="57" pos:column="17"/></name><operator pos:line="57" pos:column="17">)<pos:position pos:line="57" pos:column="18"/></operator></expr>;<pos:position pos:line="57" pos:column="19"/></return>
}<pos:position pos:line="58" pos:column="2"/></block></function></unit>
