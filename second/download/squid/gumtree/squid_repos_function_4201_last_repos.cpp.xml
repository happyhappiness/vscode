<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4201_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Acl<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">OptionExtractor<pos:position pos:line="2" pos:column="21"/></name><operator pos:line="2" pos:column="21">::<pos:position pos:line="2" pos:column="23"/></operator><name pos:line="2" pos:column="23">advance<pos:position pos:line="2" pos:column="30"/></name></name><parameter_list pos:line="2" pos:column="30">()<pos:position pos:line="2" pos:column="32"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">next<pos:position pos:line="4" pos:column="21"/></name> <init pos:line="4" pos:column="22">= <expr><call><name><name pos:line="4" pos:column="24">ConfigParser<pos:position pos:line="4" pos:column="36"/></name><operator pos:line="4" pos:column="36">::<pos:position pos:line="4" pos:column="38"/></operator><name pos:line="4" pos:column="38">PeekAtToken<pos:position pos:line="4" pos:column="49"/></name></name><argument_list pos:line="4" pos:column="49">()<pos:position pos:line="4" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="52"/></decl_stmt>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><operator pos:line="5" pos:column="9">!<pos:position pos:line="5" pos:column="10"/></operator><name pos:line="5" pos:column="10">next<pos:position pos:line="5" pos:column="14"/></name></expr>)<pos:position pos:line="5" pos:column="15"/></condition><then pos:line="5" pos:column="15">
        <block type="pseudo"><return pos:line="6" pos:column="9">return <expr><literal type="boolean" pos:line="6" pos:column="16">false<pos:position pos:line="6" pos:column="21"/></literal></expr>;<pos:position pos:line="6" pos:column="22"/></return></block></then></if> <comment type="line" pos:line="6" pos:column="23">// end of the "acl" line</comment>

    <decl_stmt><decl><type><specifier pos:line="8" pos:column="5">const<pos:position pos:line="8" pos:column="10"/></specifier> <name pos:line="8" pos:column="11">char<pos:position pos:line="8" pos:column="15"/></name></type> <name pos:line="8" pos:column="16">nextChar<pos:position pos:line="8" pos:column="24"/></name> <init pos:line="8" pos:column="25">= <expr><operator pos:line="8" pos:column="27">*<pos:position pos:line="8" pos:column="28"/></operator><name pos:line="8" pos:column="28">next<pos:position pos:line="8" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="33"/></decl_stmt>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">!<pos:position pos:line="9" pos:column="10"/></operator><operator pos:line="9" pos:column="10">(<pos:position pos:line="9" pos:column="11"/></operator><name pos:line="9" pos:column="11">nextChar<pos:position pos:line="9" pos:column="19"/></name> <operator pos:line="9" pos:column="20">==<pos:position pos:line="9" pos:column="22"/></operator> <literal type="char" pos:line="9" pos:column="23">'-'<pos:position pos:line="9" pos:column="26"/></literal> <operator pos:line="9" pos:column="27">||<pos:position pos:line="9" pos:column="29"/></operator> <name pos:line="9" pos:column="30">nextChar<pos:position pos:line="9" pos:column="38"/></name> <operator pos:line="9" pos:column="39">==<pos:position pos:line="9" pos:column="41"/></operator> <literal type="char" pos:line="9" pos:column="42">'+'<pos:position pos:line="9" pos:column="45"/></literal><operator pos:line="9" pos:column="45">)<pos:position pos:line="9" pos:column="46"/></operator></expr>)<pos:position pos:line="9" pos:column="47"/></condition><then pos:line="9" pos:column="47">
        <block type="pseudo"><return pos:line="10" pos:column="9">return <expr><literal type="boolean" pos:line="10" pos:column="16">false<pos:position pos:line="10" pos:column="21"/></literal></expr>;<pos:position pos:line="10" pos:column="22"/></return></block></then></if> <comment type="line" pos:line="10" pos:column="23">// start of ACL parameters</comment>

    <expr_stmt><expr><name pos:line="12" pos:column="5">sawValue_<pos:position pos:line="12" pos:column="14"/></name> <operator pos:line="12" pos:column="15">=<pos:position pos:line="12" pos:column="16"/></operator> <call><name pos:line="12" pos:column="17">strchr<pos:position pos:line="12" pos:column="23"/></name><argument_list pos:line="12" pos:column="23">(<argument><expr><name pos:line="12" pos:column="24">next<pos:position pos:line="12" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="12" pos:column="30">'='<pos:position pos:line="12" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="35"/></expr_stmt> <comment type="line" pos:line="12" pos:column="36">// TODO: Make ConfigParser reject '^=.*' tokens</comment>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">sawValue_<pos:position pos:line="13" pos:column="18"/></name></expr>)<pos:position pos:line="13" pos:column="19"/></condition><then pos:line="13" pos:column="19"> <block pos:line="13" pos:column="20">{
        <decl_stmt><decl><type><name pos:line="14" pos:column="9">char<pos:position pos:line="14" pos:column="13"/></name> <modifier pos:line="14" pos:column="14">*<pos:position pos:line="14" pos:column="15"/></modifier></type><name pos:line="14" pos:column="15">rawPrefix<pos:position pos:line="14" pos:column="24"/></name> <init pos:line="14" pos:column="25">= <expr><literal type="null" pos:line="14" pos:column="27">nullptr<pos:position pos:line="14" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="35"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="15" pos:column="9">char<pos:position pos:line="15" pos:column="13"/></name> <modifier pos:line="15" pos:column="14">*<pos:position pos:line="15" pos:column="15"/></modifier></type><name pos:line="15" pos:column="15">rawValue<pos:position pos:line="15" pos:column="23"/></name> <init pos:line="15" pos:column="24">= <expr><literal type="null" pos:line="15" pos:column="26">nullptr<pos:position pos:line="15" pos:column="33"/></literal></expr></init></decl>;<pos:position pos:line="15" pos:column="34"/></decl_stmt>
        <if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><operator pos:line="16" pos:column="13">!<pos:position pos:line="16" pos:column="14"/></operator><call><name><name pos:line="16" pos:column="14">ConfigParser<pos:position pos:line="16" pos:column="26"/></name><operator pos:line="16" pos:column="26">::<pos:position pos:line="16" pos:column="28"/></operator><name pos:line="16" pos:column="28">NextKvPair<pos:position pos:line="16" pos:column="38"/></name></name><argument_list pos:line="16" pos:column="38">(<argument><expr><name pos:line="16" pos:column="39">rawPrefix<pos:position pos:line="16" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="50">rawValue<pos:position pos:line="16" pos:column="58"/></name></expr></argument>)<pos:position pos:line="16" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="60"/></condition><then pos:line="16" pos:column="60">
            <block type="pseudo"><throw pos:line="17" pos:column="13">throw <expr><call><name pos:line="17" pos:column="19">TexcHere<pos:position pos:line="17" pos:column="27"/></name><argument_list pos:line="17" pos:column="27">(<argument><expr><call><name pos:line="17" pos:column="28">ToSBuf<pos:position pos:line="17" pos:column="34"/></name><argument_list pos:line="17" pos:column="34">(<argument><expr><literal type="string" pos:line="17" pos:column="35">"Malformed acl option=value: "<pos:position pos:line="17" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="67">next<pos:position pos:line="17" pos:column="71"/></name></expr></argument>)<pos:position pos:line="17" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="74"/></throw></block></then></if>
        <expr_stmt><expr><call><name><name pos:line="18" pos:column="9">prefix_<pos:position pos:line="18" pos:column="16"/></name><operator pos:line="18" pos:column="16">.<pos:position pos:line="18" pos:column="17"/></operator><name pos:line="18" pos:column="17">assign<pos:position pos:line="18" pos:column="23"/></name></name><argument_list pos:line="18" pos:column="23">(<argument><expr><name pos:line="18" pos:column="24">rawPrefix<pos:position pos:line="18" pos:column="33"/></name></expr></argument>)<pos:position pos:line="18" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="19" pos:column="9">value_<pos:position pos:line="19" pos:column="15"/></name><operator pos:line="19" pos:column="15">.<pos:position pos:line="19" pos:column="16"/></operator><name pos:line="19" pos:column="16">assign<pos:position pos:line="19" pos:column="22"/></name></name><argument_list pos:line="19" pos:column="22">(<argument><expr><name pos:line="19" pos:column="23">rawValue<pos:position pos:line="19" pos:column="31"/></name></expr></argument>)<pos:position pos:line="19" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="20" pos:column="6"/></block></then> <else pos:line="20" pos:column="7">else <block pos:line="20" pos:column="12">{
        <expr_stmt><expr><call><name><name pos:line="21" pos:column="9">prefix_<pos:position pos:line="21" pos:column="16"/></name><operator pos:line="21" pos:column="16">.<pos:position pos:line="21" pos:column="17"/></operator><name pos:line="21" pos:column="17">assign<pos:position pos:line="21" pos:column="23"/></name></name><argument_list pos:line="21" pos:column="23">(<argument><expr><name pos:line="21" pos:column="24">next<pos:position pos:line="21" pos:column="28"/></name></expr></argument>)<pos:position pos:line="21" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="22" pos:column="9">ConfigParser<pos:position pos:line="22" pos:column="21"/></name><operator pos:line="22" pos:column="21">::<pos:position pos:line="22" pos:column="23"/></operator><name pos:line="22" pos:column="23">NextToken<pos:position pos:line="22" pos:column="32"/></name></name><argument_list pos:line="22" pos:column="32">()<pos:position pos:line="22" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="35"/></expr_stmt> <comment type="line" pos:line="22" pos:column="36">// consume what we have peeked at</comment>
    }<pos:position pos:line="23" pos:column="6"/></block></else></if>
    <return pos:line="24" pos:column="5">return <expr><literal type="boolean" pos:line="24" pos:column="12">true<pos:position pos:line="24" pos:column="16"/></literal></expr>;<pos:position pos:line="24" pos:column="17"/></return>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
