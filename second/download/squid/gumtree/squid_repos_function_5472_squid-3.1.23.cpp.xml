<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5472_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ESIVariableQuery<pos:position pos:line="2" pos:column="17"/></name><operator pos:line="2" pos:column="17">::<pos:position pos:line="2" pos:column="19"/></operator><name pos:line="2" pos:column="19">eval<pos:position pos:line="2" pos:column="23"/></name></name> <parameter_list pos:line="2" pos:column="24">(<parameter><decl><type><name pos:line="2" pos:column="25">ESIVarState<pos:position pos:line="2" pos:column="36"/></name> <modifier pos:line="2" pos:column="37">&amp;<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="38">state<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="45">char<pos:position pos:line="2" pos:column="49"/></name> <specifier pos:line="2" pos:column="50">const<pos:position pos:line="2" pos:column="55"/></specifier> <modifier pos:line="2" pos:column="56">*<pos:position pos:line="2" pos:column="57"/></modifier></type><name pos:line="2" pos:column="57">subref<pos:position pos:line="2" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="65">char<pos:position pos:line="2" pos:column="69"/></name> <specifier pos:line="2" pos:column="70">const<pos:position pos:line="2" pos:column="75"/></specifier> <modifier pos:line="2" pos:column="76">*<pos:position pos:line="2" pos:column="77"/></modifier></type><name pos:line="2" pos:column="77">found_default<pos:position pos:line="2" pos:column="90"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="91"/></parameter_list> <specifier pos:line="2" pos:column="92">const<pos:position pos:line="2" pos:column="97"/></specifier>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <specifier pos:line="4" pos:column="10">const<pos:position pos:line="4" pos:column="15"/></specifier> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">s<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><name pos:line="4" pos:column="21">NULL<pos:position pos:line="4" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">!<pos:position pos:line="6" pos:column="10"/></operator><name pos:line="6" pos:column="10">subref<pos:position pos:line="6" pos:column="16"/></name></expr>)<pos:position pos:line="6" pos:column="17"/></condition><then pos:line="6" pos:column="17">
        <block type="pseudo"><expr_stmt><expr><name pos:line="7" pos:column="9">s<pos:position pos:line="7" pos:column="10"/></name> <operator pos:line="7" pos:column="11">=<pos:position pos:line="7" pos:column="12"/></operator> <call><name pos:line="7" pos:column="13">queryString<pos:position pos:line="7" pos:column="24"/></name><argument_list pos:line="7" pos:column="24">()<pos:position pos:line="7" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="27"/></expr_stmt></block></then>
    <else pos:line="8" pos:column="5">else <block pos:line="8" pos:column="10">{
        <decl_stmt><decl><type><name pos:line="9" pos:column="9">unsigned<pos:position pos:line="9" pos:column="17"/></name> <name pos:line="9" pos:column="18">int<pos:position pos:line="9" pos:column="21"/></name></type> <name pos:line="9" pos:column="22">i<pos:position pos:line="9" pos:column="23"/></name> <init pos:line="9" pos:column="24">= <expr><literal type="number" pos:line="9" pos:column="26">0<pos:position pos:line="9" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="28"/></decl_stmt>

        <while pos:line="11" pos:column="9">while <condition pos:line="11" pos:column="15">(<expr><name pos:line="11" pos:column="16">i<pos:position pos:line="11" pos:column="17"/></name> <operator pos:line="11" pos:column="18">&lt;<pos:position pos:line="11" pos:column="22"/></operator> <call><name pos:line="11" pos:column="20">queryElements<pos:position pos:line="11" pos:column="33"/></name><argument_list pos:line="11" pos:column="33">()<pos:position pos:line="11" pos:column="35"/></argument_list></call> <operator pos:line="11" pos:column="36">&amp;&amp;<pos:position pos:line="11" pos:column="46"/></operator> <operator pos:line="11" pos:column="39">!<pos:position pos:line="11" pos:column="40"/></operator><name pos:line="11" pos:column="40">s<pos:position pos:line="11" pos:column="41"/></name></expr>)<pos:position pos:line="11" pos:column="42"/></condition> <block pos:line="11" pos:column="43">{
            <if pos:line="12" pos:column="13">if <condition pos:line="12" pos:column="16">(<expr><operator pos:line="12" pos:column="17">!<pos:position pos:line="12" pos:column="18"/></operator><call><name pos:line="12" pos:column="18">strcmp<pos:position pos:line="12" pos:column="24"/></name> <argument_list pos:line="12" pos:column="25">(<argument><expr><name pos:line="12" pos:column="26">subref<pos:position pos:line="12" pos:column="32"/></name></expr></argument>, <argument><expr><call><name pos:line="12" pos:column="34">queryVector<pos:position pos:line="12" pos:column="45"/></name><argument_list pos:line="12" pos:column="45">()<pos:position pos:line="12" pos:column="47"/></argument_list></call><index pos:line="12" pos:column="47">[<expr><name pos:line="12" pos:column="48">i<pos:position pos:line="12" pos:column="49"/></name></expr>]<pos:position pos:line="12" pos:column="50"/></index><operator pos:line="12" pos:column="50">.<pos:position pos:line="12" pos:column="51"/></operator><name pos:line="12" pos:column="51">var<pos:position pos:line="12" pos:column="54"/></name></expr></argument>)<pos:position pos:line="12" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="56"/></condition><then pos:line="12" pos:column="56">
                <block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="17">s<pos:position pos:line="13" pos:column="18"/></name> <operator pos:line="13" pos:column="19">=<pos:position pos:line="13" pos:column="20"/></operator> <call><name pos:line="13" pos:column="21">queryVector<pos:position pos:line="13" pos:column="32"/></name><argument_list pos:line="13" pos:column="32">()<pos:position pos:line="13" pos:column="34"/></argument_list></call><index pos:line="13" pos:column="34">[<expr><name pos:line="13" pos:column="35">i<pos:position pos:line="13" pos:column="36"/></name></expr>]<pos:position pos:line="13" pos:column="37"/></index><operator pos:line="13" pos:column="37">.<pos:position pos:line="13" pos:column="38"/></operator><name pos:line="13" pos:column="38">val<pos:position pos:line="13" pos:column="41"/></name></expr>;<pos:position pos:line="13" pos:column="42"/></expr_stmt></block></then></if>

            <expr_stmt><expr><operator pos:line="15" pos:column="13">++<pos:position pos:line="15" pos:column="15"/></operator><name pos:line="15" pos:column="15">i<pos:position pos:line="15" pos:column="16"/></name></expr>;<pos:position pos:line="15" pos:column="17"/></expr_stmt>
        }<pos:position pos:line="16" pos:column="10"/></block></while>

        <if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><operator pos:line="18" pos:column="13">!<pos:position pos:line="18" pos:column="14"/></operator><name pos:line="18" pos:column="14">s<pos:position pos:line="18" pos:column="15"/></name></expr>)<pos:position pos:line="18" pos:column="16"/></condition><then pos:line="18" pos:column="16">
            <block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="13">s<pos:position pos:line="19" pos:column="14"/></name> <operator pos:line="19" pos:column="15">=<pos:position pos:line="19" pos:column="16"/></operator> <name pos:line="19" pos:column="17">found_default<pos:position pos:line="19" pos:column="30"/></name></expr>;<pos:position pos:line="19" pos:column="31"/></expr_stmt></block></then></if>
    }<pos:position pos:line="20" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name><name pos:line="22" pos:column="5">ESISegment<pos:position pos:line="22" pos:column="15"/></name><operator pos:line="22" pos:column="15">::<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="17">ListAppend<pos:position pos:line="22" pos:column="27"/></name></name> <argument_list pos:line="22" pos:column="28">(<argument><expr><call><name><name pos:line="22" pos:column="29">state<pos:position pos:line="22" pos:column="34"/></name><operator pos:line="22" pos:column="34">.<pos:position pos:line="22" pos:column="35"/></operator><name pos:line="22" pos:column="35">getOutput<pos:position pos:line="22" pos:column="44"/></name></name><argument_list pos:line="22" pos:column="44">()<pos:position pos:line="22" pos:column="46"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="22" pos:column="48">s<pos:position pos:line="22" pos:column="49"/></name></expr></argument>, <argument><expr><call><name pos:line="22" pos:column="51">strlen<pos:position pos:line="22" pos:column="57"/></name> <argument_list pos:line="22" pos:column="58">(<argument><expr><name pos:line="22" pos:column="59">s<pos:position pos:line="22" pos:column="60"/></name></expr></argument>)<pos:position pos:line="22" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="63"/></expr_stmt>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
