<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6421_squid-3.4.14.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">Ipc<pos:position pos:line="1" pos:column="4"/></name><operator pos:line="1" pos:column="4">::<pos:position pos:line="1" pos:column="6"/></operator><name pos:line="1" pos:column="6">StoreMap<pos:position pos:line="1" pos:column="14"/></name><operator pos:line="1" pos:column="14">::<pos:position pos:line="1" pos:column="16"/></operator><name pos:line="1" pos:column="16">Slot<pos:position pos:line="1" pos:column="20"/></name></name> <modifier pos:line="1" pos:column="21">*<pos:position pos:line="1" pos:column="22"/></modifier></type>
<name><name pos:line="2" pos:column="1">Ipc<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">StoreMap<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">openForWriting<pos:position pos:line="2" pos:column="30"/></name></name><parameter_list pos:line="2" pos:column="30">(<parameter><decl><type><specifier pos:line="2" pos:column="31">const<pos:position pos:line="2" pos:column="36"/></specifier> <name pos:line="2" pos:column="37">cache_key<pos:position pos:line="2" pos:column="46"/></name> <modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier><specifier pos:line="2" pos:column="48">const<pos:position pos:line="2" pos:column="53"/></specifier></type> <name pos:line="2" pos:column="54">key<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="59">sfileno<pos:position pos:line="2" pos:column="66"/></name> <modifier pos:line="2" pos:column="67">&amp;<pos:position pos:line="2" pos:column="72"/></modifier></type><name pos:line="2" pos:column="68">fileno<pos:position pos:line="2" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="75"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">54<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">5<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="19">HERE<pos:position pos:line="4" pos:column="23"/></name> <operator pos:line="4" pos:column="24">&lt;&lt;<pos:position pos:line="4" pos:column="32"/></operator> <literal type="string" pos:line="4" pos:column="27">" trying to open slot for key "<pos:position pos:line="4" pos:column="58"/></literal> <operator pos:line="4" pos:column="59">&lt;&lt;<pos:position pos:line="4" pos:column="67"/></operator> <call><name pos:line="4" pos:column="62">storeKeyText<pos:position pos:line="4" pos:column="74"/></name><argument_list pos:line="4" pos:column="74">(<argument><expr><name pos:line="4" pos:column="75">key<pos:position pos:line="4" pos:column="78"/></name></expr></argument>)<pos:position pos:line="4" pos:column="79"/></argument_list></call>
           <operator pos:line="5" pos:column="12">&lt;&lt;<pos:position pos:line="5" pos:column="20"/></operator> <literal type="string" pos:line="5" pos:column="15">" for writing in map ["<pos:position pos:line="5" pos:column="38"/></literal> <operator pos:line="5" pos:column="39">&lt;&lt;<pos:position pos:line="5" pos:column="47"/></operator> <name pos:line="5" pos:column="42">path<pos:position pos:line="5" pos:column="46"/></name> <operator pos:line="5" pos:column="47">&lt;&lt;<pos:position pos:line="5" pos:column="55"/></operator> <literal type="char" pos:line="5" pos:column="50">']'<pos:position pos:line="5" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="55"/></expr_stmt>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">int<pos:position pos:line="6" pos:column="14"/></name></type> <name pos:line="6" pos:column="15">idx<pos:position pos:line="6" pos:column="18"/></name> <init pos:line="6" pos:column="19">= <expr><call><name pos:line="6" pos:column="21">slotIndexByKey<pos:position pos:line="6" pos:column="35"/></name><argument_list pos:line="6" pos:column="35">(<argument><expr><name pos:line="6" pos:column="36">key<pos:position pos:line="6" pos:column="39"/></name></expr></argument>)<pos:position pos:line="6" pos:column="40"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="41"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="8" pos:column="5">Slot<pos:position pos:line="8" pos:column="9"/></name> <modifier pos:line="8" pos:column="10">&amp;<pos:position pos:line="8" pos:column="15"/></modifier></type><name pos:line="8" pos:column="11">s<pos:position pos:line="8" pos:column="12"/></name> <init pos:line="8" pos:column="13">= <expr><name><name pos:line="8" pos:column="15">shared<pos:position pos:line="8" pos:column="21"/></name><operator pos:line="8" pos:column="21">-&gt;<pos:position pos:line="8" pos:column="26"/></operator><name pos:line="8" pos:column="23">slots<pos:position pos:line="8" pos:column="28"/></name><index pos:line="8" pos:column="28">[<expr><name pos:line="8" pos:column="29">idx<pos:position pos:line="8" pos:column="32"/></name></expr>]<pos:position pos:line="8" pos:column="33"/></index></name></expr></init></decl>;<pos:position pos:line="8" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">ReadWriteLock<pos:position pos:line="9" pos:column="18"/></name> <modifier pos:line="9" pos:column="19">&amp;<pos:position pos:line="9" pos:column="24"/></modifier></type><name pos:line="9" pos:column="20">lock<pos:position pos:line="9" pos:column="24"/></name> <init pos:line="9" pos:column="25">= <expr><name><name pos:line="9" pos:column="27">s<pos:position pos:line="9" pos:column="28"/></name><operator pos:line="9" pos:column="28">.<pos:position pos:line="9" pos:column="29"/></operator><name pos:line="9" pos:column="29">lock<pos:position pos:line="9" pos:column="33"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="34"/></decl_stmt>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><call><name><name pos:line="11" pos:column="9">lock<pos:position pos:line="11" pos:column="13"/></name><operator pos:line="11" pos:column="13">.<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="14">lockExclusive<pos:position pos:line="11" pos:column="27"/></name></name><argument_list pos:line="11" pos:column="27">()<pos:position pos:line="11" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="30"/></condition><then pos:line="11" pos:column="30"> <block pos:line="11" pos:column="31">{
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">assert<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><name><name pos:line="12" pos:column="16">s<pos:position pos:line="12" pos:column="17"/></name><operator pos:line="12" pos:column="17">.<pos:position pos:line="12" pos:column="18"/></operator><name pos:line="12" pos:column="18">state<pos:position pos:line="12" pos:column="23"/></name></name> <operator pos:line="12" pos:column="24">!=<pos:position pos:line="12" pos:column="26"/></operator> <name><name pos:line="12" pos:column="27">Slot<pos:position pos:line="12" pos:column="31"/></name><operator pos:line="12" pos:column="31">::<pos:position pos:line="12" pos:column="33"/></operator><name pos:line="12" pos:column="33">Writeable<pos:position pos:line="12" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="44"/></expr_stmt> <comment type="line" pos:line="12" pos:column="45">// until we start breaking locks</comment>

        <comment type="line" pos:line="14" pos:column="9">// free if the entry was used, keeping the entry locked</comment>
        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name><name pos:line="15" pos:column="13">s<pos:position pos:line="15" pos:column="14"/></name><operator pos:line="15" pos:column="14">.<pos:position pos:line="15" pos:column="15"/></operator><name pos:line="15" pos:column="15">waitingToBeFreed<pos:position pos:line="15" pos:column="31"/></name></name> <operator pos:line="15" pos:column="32">||<pos:position pos:line="15" pos:column="34"/></operator> <name><name pos:line="15" pos:column="35">s<pos:position pos:line="15" pos:column="36"/></name><operator pos:line="15" pos:column="36">.<pos:position pos:line="15" pos:column="37"/></operator><name pos:line="15" pos:column="37">state<pos:position pos:line="15" pos:column="42"/></name></name> <operator pos:line="15" pos:column="43">==<pos:position pos:line="15" pos:column="45"/></operator> <name><name pos:line="15" pos:column="46">Slot<pos:position pos:line="15" pos:column="50"/></name><operator pos:line="15" pos:column="50">::<pos:position pos:line="15" pos:column="52"/></operator><name pos:line="15" pos:column="52">Readable<pos:position pos:line="15" pos:column="60"/></name></name></expr>)<pos:position pos:line="15" pos:column="61"/></condition><then pos:line="15" pos:column="61">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="13">freeLocked<pos:position pos:line="16" pos:column="23"/></name><argument_list pos:line="16" pos:column="23">(<argument><expr><name pos:line="16" pos:column="24">s<pos:position pos:line="16" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="16" pos:column="27">true<pos:position pos:line="16" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="33"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name pos:line="18" pos:column="9">assert<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><name><name pos:line="18" pos:column="16">s<pos:position pos:line="18" pos:column="17"/></name><operator pos:line="18" pos:column="17">.<pos:position pos:line="18" pos:column="18"/></operator><name pos:line="18" pos:column="18">state<pos:position pos:line="18" pos:column="23"/></name></name> <operator pos:line="18" pos:column="24">==<pos:position pos:line="18" pos:column="26"/></operator> <name><name pos:line="18" pos:column="27">Slot<pos:position pos:line="18" pos:column="31"/></name><operator pos:line="18" pos:column="31">::<pos:position pos:line="18" pos:column="33"/></operator><name pos:line="18" pos:column="33">Empty<pos:position pos:line="18" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="19" pos:column="9">++<pos:position pos:line="19" pos:column="11"/></operator><name><name pos:line="19" pos:column="11">shared<pos:position pos:line="19" pos:column="17"/></name><operator pos:line="19" pos:column="17">-&gt;<pos:position pos:line="19" pos:column="22"/></operator><name pos:line="19" pos:column="19">count<pos:position pos:line="19" pos:column="24"/></name></name></expr>;<pos:position pos:line="19" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="20" pos:column="9">s<pos:position pos:line="20" pos:column="10"/></name><operator pos:line="20" pos:column="10">.<pos:position pos:line="20" pos:column="11"/></operator><name pos:line="20" pos:column="11">state<pos:position pos:line="20" pos:column="16"/></name></name> <operator pos:line="20" pos:column="17">=<pos:position pos:line="20" pos:column="18"/></operator> <name><name pos:line="20" pos:column="19">Slot<pos:position pos:line="20" pos:column="23"/></name><operator pos:line="20" pos:column="23">::<pos:position pos:line="20" pos:column="25"/></operator><name pos:line="20" pos:column="25">Writeable<pos:position pos:line="20" pos:column="34"/></name></name></expr>;<pos:position pos:line="20" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><name pos:line="21" pos:column="9">fileno<pos:position pos:line="21" pos:column="15"/></name> <operator pos:line="21" pos:column="16">=<pos:position pos:line="21" pos:column="17"/></operator> <name pos:line="21" pos:column="18">idx<pos:position pos:line="21" pos:column="21"/></name></expr>;<pos:position pos:line="21" pos:column="22"/></expr_stmt>
        <comment type="line" pos:line="22" pos:column="9">//s.setKey(key); // XXX: the caller should do that</comment>
        <expr_stmt><expr><call><name pos:line="23" pos:column="9">debugs<pos:position pos:line="23" pos:column="15"/></name><argument_list pos:line="23" pos:column="15">(<argument><expr><literal type="number" pos:line="23" pos:column="16">54<pos:position pos:line="23" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="20">5<pos:position pos:line="23" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="23">HERE<pos:position pos:line="23" pos:column="27"/></name> <operator pos:line="23" pos:column="28">&lt;&lt;<pos:position pos:line="23" pos:column="36"/></operator> <literal type="string" pos:line="23" pos:column="31">" opened slot at "<pos:position pos:line="23" pos:column="49"/></literal> <operator pos:line="23" pos:column="50">&lt;&lt;<pos:position pos:line="23" pos:column="58"/></operator> <name pos:line="23" pos:column="53">idx<pos:position pos:line="23" pos:column="56"/></name> <operator pos:line="23" pos:column="57">&lt;&lt;<pos:position pos:line="23" pos:column="65"/></operator>
               <literal type="string" pos:line="24" pos:column="16">" for writing in map ["<pos:position pos:line="24" pos:column="39"/></literal> <operator pos:line="24" pos:column="40">&lt;&lt;<pos:position pos:line="24" pos:column="48"/></operator> <name pos:line="24" pos:column="43">path<pos:position pos:line="24" pos:column="47"/></name> <operator pos:line="24" pos:column="48">&lt;&lt;<pos:position pos:line="24" pos:column="56"/></operator> <literal type="char" pos:line="24" pos:column="51">']'<pos:position pos:line="24" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="56"/></expr_stmt>
        <return pos:line="25" pos:column="9">return <expr><operator pos:line="25" pos:column="16">&amp;<pos:position pos:line="25" pos:column="21"/></operator><name pos:line="25" pos:column="17">s<pos:position pos:line="25" pos:column="18"/></name></expr>;<pos:position pos:line="25" pos:column="19"/></return> <comment type="line" pos:line="25" pos:column="20">// and keep the entry locked</comment>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="28" pos:column="5">debugs<pos:position pos:line="28" pos:column="11"/></name><argument_list pos:line="28" pos:column="11">(<argument><expr><literal type="number" pos:line="28" pos:column="12">54<pos:position pos:line="28" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="16">5<pos:position pos:line="28" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="19">HERE<pos:position pos:line="28" pos:column="23"/></name> <operator pos:line="28" pos:column="24">&lt;&lt;<pos:position pos:line="28" pos:column="32"/></operator> <literal type="string" pos:line="28" pos:column="27">" failed to open slot at "<pos:position pos:line="28" pos:column="53"/></literal> <operator pos:line="28" pos:column="54">&lt;&lt;<pos:position pos:line="28" pos:column="62"/></operator> <name pos:line="28" pos:column="57">idx<pos:position pos:line="28" pos:column="60"/></name> <operator pos:line="28" pos:column="61">&lt;&lt;<pos:position pos:line="28" pos:column="69"/></operator>
           <literal type="string" pos:line="29" pos:column="12">" for writing in map ["<pos:position pos:line="29" pos:column="35"/></literal> <operator pos:line="29" pos:column="36">&lt;&lt;<pos:position pos:line="29" pos:column="44"/></operator> <name pos:line="29" pos:column="39">path<pos:position pos:line="29" pos:column="43"/></name> <operator pos:line="29" pos:column="44">&lt;&lt;<pos:position pos:line="29" pos:column="52"/></operator> <literal type="char" pos:line="29" pos:column="47">']'<pos:position pos:line="29" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="52"/></expr_stmt>
    <return pos:line="30" pos:column="5">return <expr><name pos:line="30" pos:column="12">NULL<pos:position pos:line="30" pos:column="16"/></name></expr>;<pos:position pos:line="30" pos:column="17"/></return>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
