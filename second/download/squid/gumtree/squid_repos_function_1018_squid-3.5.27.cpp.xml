<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1018_squid-3.5.27.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">debugOpenLog<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><specifier pos:line="2" pos:column="14">const<pos:position pos:line="2" pos:column="19"/></specifier> <name pos:line="2" pos:column="20">char<pos:position pos:line="2" pos:column="24"/></name> <modifier pos:line="2" pos:column="25">*<pos:position pos:line="2" pos:column="26"/></modifier></type><name pos:line="2" pos:column="26">logfile<pos:position pos:line="2" pos:column="33"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="34"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">logfile<pos:position pos:line="4" pos:column="16"/></name> <operator pos:line="4" pos:column="17">==<pos:position pos:line="4" pos:column="19"/></operator> <name pos:line="4" pos:column="20">NULL<pos:position pos:line="4" pos:column="24"/></name></expr>)<pos:position pos:line="4" pos:column="25"/></condition><then pos:line="4" pos:column="25"> <block pos:line="4" pos:column="26">{
        <expr_stmt><expr><name pos:line="5" pos:column="9">debug_log<pos:position pos:line="5" pos:column="18"/></name> <operator pos:line="5" pos:column="19">=<pos:position pos:line="5" pos:column="20"/></operator> <name pos:line="5" pos:column="21">stderr<pos:position pos:line="5" pos:column="27"/></name></expr>;<pos:position pos:line="5" pos:column="28"/></expr_stmt>
        <return pos:line="6" pos:column="9">return;<pos:position pos:line="6" pos:column="16"/></return>
    }<pos:position pos:line="7" pos:column="6"/></block></then></if>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">debug_log_file<pos:position pos:line="9" pos:column="23"/></name></expr>)<pos:position pos:line="9" pos:column="24"/></condition><then pos:line="9" pos:column="24">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="9">xfree<pos:position pos:line="10" pos:column="14"/></name><argument_list pos:line="10" pos:column="14">(<argument><expr><name pos:line="10" pos:column="15">debug_log_file<pos:position pos:line="10" pos:column="29"/></name></expr></argument>)<pos:position pos:line="10" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="31"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name pos:line="12" pos:column="5">debug_log_file<pos:position pos:line="12" pos:column="19"/></name> <operator pos:line="12" pos:column="20">=<pos:position pos:line="12" pos:column="21"/></operator> <call><name pos:line="12" pos:column="22">xstrdup<pos:position pos:line="12" pos:column="29"/></name><argument_list pos:line="12" pos:column="29">(<argument><expr><name pos:line="12" pos:column="30">logfile<pos:position pos:line="12" pos:column="37"/></name></expr></argument>)<pos:position pos:line="12" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="39"/></expr_stmt>  <comment type="block" pos:line="12" pos:column="41">/* keep a static copy */</comment>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name pos:line="14" pos:column="9">debug_log<pos:position pos:line="14" pos:column="18"/></name> <operator pos:line="14" pos:column="19">&amp;&amp;<pos:position pos:line="14" pos:column="29"/></operator> <name pos:line="14" pos:column="22">debug_log<pos:position pos:line="14" pos:column="31"/></name> <operator pos:line="14" pos:column="32">!=<pos:position pos:line="14" pos:column="34"/></operator> <name pos:line="14" pos:column="35">stderr<pos:position pos:line="14" pos:column="41"/></name></expr>)<pos:position pos:line="14" pos:column="42"/></condition><then pos:line="14" pos:column="42">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="9">fclose<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><name pos:line="15" pos:column="16">debug_log<pos:position pos:line="15" pos:column="25"/></name></expr></argument>)<pos:position pos:line="15" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="27"/></expr_stmt></block></then></if>

    <comment type="line" pos:line="17" pos:column="5">// Bug 4423: ignore the stdio: logging module name if present</comment>
    <decl_stmt><decl><type><specifier pos:line="18" pos:column="5">const<pos:position pos:line="18" pos:column="10"/></specifier> <name pos:line="18" pos:column="11">char<pos:position pos:line="18" pos:column="15"/></name> <modifier pos:line="18" pos:column="16">*<pos:position pos:line="18" pos:column="17"/></modifier></type><name pos:line="18" pos:column="17">logfilename<pos:position pos:line="18" pos:column="28"/></name></decl>;<pos:position pos:line="18" pos:column="29"/></decl_stmt>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><call><name pos:line="19" pos:column="9">strncmp<pos:position pos:line="19" pos:column="16"/></name><argument_list pos:line="19" pos:column="16">(<argument><expr><name pos:line="19" pos:column="17">logfile<pos:position pos:line="19" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="26">"stdio:"<pos:position pos:line="19" pos:column="34"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="19" pos:column="35">6<pos:position pos:line="19" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="37"/></argument_list></call> <operator pos:line="19" pos:column="38">==<pos:position pos:line="19" pos:column="40"/></operator> <literal type="number" pos:line="19" pos:column="41">0<pos:position pos:line="19" pos:column="42"/></literal></expr>)<pos:position pos:line="19" pos:column="43"/></condition><then pos:line="19" pos:column="43">
        <block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="9">logfilename<pos:position pos:line="20" pos:column="20"/></name> <operator pos:line="20" pos:column="21">=<pos:position pos:line="20" pos:column="22"/></operator> <name pos:line="20" pos:column="23">logfile<pos:position pos:line="20" pos:column="30"/></name> <operator pos:line="20" pos:column="31">+<pos:position pos:line="20" pos:column="32"/></operator> <literal type="number" pos:line="20" pos:column="33">6<pos:position pos:line="20" pos:column="34"/></literal></expr>;<pos:position pos:line="20" pos:column="35"/></expr_stmt></block></then>
    <else pos:line="21" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="9">logfilename<pos:position pos:line="22" pos:column="20"/></name> <operator pos:line="22" pos:column="21">=<pos:position pos:line="22" pos:column="22"/></operator> <name pos:line="22" pos:column="23">logfile<pos:position pos:line="22" pos:column="30"/></name></expr>;<pos:position pos:line="22" pos:column="31"/></expr_stmt></block></else></if>

    <expr_stmt><expr><name pos:line="24" pos:column="5">debug_log<pos:position pos:line="24" pos:column="14"/></name> <operator pos:line="24" pos:column="15">=<pos:position pos:line="24" pos:column="16"/></operator> <call><name pos:line="24" pos:column="17">fopen<pos:position pos:line="24" pos:column="22"/></name><argument_list pos:line="24" pos:column="22">(<argument><expr><name pos:line="24" pos:column="23">logfilename<pos:position pos:line="24" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="36">"a+"<pos:position pos:line="24" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="42"/></expr_stmt>

    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><operator pos:line="26" pos:column="9">!<pos:position pos:line="26" pos:column="10"/></operator><name pos:line="26" pos:column="10">debug_log<pos:position pos:line="26" pos:column="19"/></name></expr>)<pos:position pos:line="26" pos:column="20"/></condition><then pos:line="26" pos:column="20"> <block pos:line="26" pos:column="21">{
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">fprintf<pos:position pos:line="27" pos:column="16"/></name><argument_list pos:line="27" pos:column="16">(<argument><expr><name pos:line="27" pos:column="17">stderr<pos:position pos:line="27" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="25">"WARNING: Cannot write log file: %s\n"<pos:position pos:line="27" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="65">logfile<pos:position pos:line="27" pos:column="72"/></name></expr></argument>)<pos:position pos:line="27" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="74"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">perror<pos:position pos:line="28" pos:column="15"/></name><argument_list pos:line="28" pos:column="15">(<argument><expr><name pos:line="28" pos:column="16">logfile<pos:position pos:line="28" pos:column="23"/></name></expr></argument>)<pos:position pos:line="28" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">fprintf<pos:position pos:line="29" pos:column="16"/></name><argument_list pos:line="29" pos:column="16">(<argument><expr><name pos:line="29" pos:column="17">stderr<pos:position pos:line="29" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="25">"         messages will be sent to 'stderr'.\n"<pos:position pos:line="29" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="74"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">fflush<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><name pos:line="30" pos:column="16">stderr<pos:position pos:line="30" pos:column="22"/></name></expr></argument>)<pos:position pos:line="30" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><name pos:line="31" pos:column="9">debug_log<pos:position pos:line="31" pos:column="18"/></name> <operator pos:line="31" pos:column="19">=<pos:position pos:line="31" pos:column="20"/></operator> <name pos:line="31" pos:column="21">stderr<pos:position pos:line="31" pos:column="27"/></name></expr>;<pos:position pos:line="31" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>

<cpp:if pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">if<pos:position pos:line="34" pos:column="4"/></cpp:directive> <expr><name pos:line="34" pos:column="5">_SQUID_WINDOWS_<pos:position pos:line="34" pos:column="20"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">setmode<pos:position pos:line="35" pos:column="12"/></name><argument_list pos:line="35" pos:column="12">(<argument><expr><call><name pos:line="35" pos:column="13">fileno<pos:position pos:line="35" pos:column="19"/></name><argument_list pos:line="35" pos:column="19">(<argument><expr><name pos:line="35" pos:column="20">debug_log<pos:position pos:line="35" pos:column="29"/></name></expr></argument>)<pos:position pos:line="35" pos:column="30"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="35" pos:column="32">O_TEXT<pos:position pos:line="35" pos:column="38"/></name></expr></argument>)<pos:position pos:line="35" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="40"/></expr_stmt>
<cpp:endif pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">endif<pos:position pos:line="36" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
