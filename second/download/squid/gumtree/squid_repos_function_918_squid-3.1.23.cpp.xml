<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_918_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">AcceptFD<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">acceptOne<pos:position pos:line="2" pos:column="20"/></name></name><parameter_list pos:line="2" pos:column="20">()<pos:position pos:line="2" pos:column="22"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// If there is no callback and we accept, we will leak the accepted FD.</comment>
    <comment type="line" pos:line="5" pos:column="5">// When we are running out of FDs, there is often no callback.</comment>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">!<pos:position pos:line="6" pos:column="10"/></operator><name pos:line="6" pos:column="10">theCallback<pos:position pos:line="6" pos:column="21"/></name></expr>)<pos:position pos:line="6" pos:column="22"/></condition><then pos:line="6" pos:column="22"> <block pos:line="6" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">debugs<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><literal type="number" pos:line="7" pos:column="16">5<pos:position pos:line="7" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="19">5<pos:position pos:line="7" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="22">"AcceptFD::acceptOne orphaned: FD "<pos:position pos:line="7" pos:column="57"/></literal> <operator pos:line="7" pos:column="58">&lt;&lt;<pos:position pos:line="7" pos:column="66"/></operator> <name pos:line="7" pos:column="61">fd<pos:position pos:line="7" pos:column="63"/></name></expr></argument>)<pos:position pos:line="7" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="65"/></expr_stmt>
        <comment type="line" pos:line="8" pos:column="9">// XXX: can we remove this and similar "just in case" calls and</comment>
        <comment type="line" pos:line="9" pos:column="9">// either listen always or listen only when there is a callback?</comment>
        <if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><call><name><name pos:line="10" pos:column="14">AcceptLimiter<pos:position pos:line="10" pos:column="27"/></name><operator pos:line="10" pos:column="27">::<pos:position pos:line="10" pos:column="29"/></operator><name pos:line="10" pos:column="29">Instance<pos:position pos:line="10" pos:column="37"/></name></name><argument_list pos:line="10" pos:column="37">()<pos:position pos:line="10" pos:column="39"/></argument_list></call><operator pos:line="10" pos:column="39">.<pos:position pos:line="10" pos:column="40"/></operator><call><name pos:line="10" pos:column="40">deferring<pos:position pos:line="10" pos:column="49"/></name><argument_list pos:line="10" pos:column="49">()<pos:position pos:line="10" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="52"/></condition><then pos:line="10" pos:column="52">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="13">commSetSelect<pos:position pos:line="11" pos:column="26"/></name><argument_list pos:line="11" pos:column="26">(<argument><expr><name pos:line="11" pos:column="27">fd<pos:position pos:line="11" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="31">COMM_SELECT_READ<pos:position pos:line="11" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="49">comm_accept_try<pos:position pos:line="11" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="66">NULL<pos:position pos:line="11" pos:column="70"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="72">0<pos:position pos:line="11" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="75"/></expr_stmt></block></then></if>
        <expr_stmt><expr><name pos:line="12" pos:column="9">mayAcceptMore<pos:position pos:line="12" pos:column="22"/></name> <operator pos:line="12" pos:column="23">=<pos:position pos:line="12" pos:column="24"/></operator> <literal type="boolean" pos:line="12" pos:column="25">false<pos:position pos:line="12" pos:column="30"/></literal></expr>;<pos:position pos:line="12" pos:column="31"/></expr_stmt>
        <return pos:line="13" pos:column="9">return;<pos:position pos:line="13" pos:column="16"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="16" pos:column="5">/*
     * We don't worry about running low on FDs here.  Instead,
     * httpAccept() will use AcceptLimiter if we reach the limit
     * there.
     */</comment>

    <comment type="block" pos:line="22" pos:column="5">/* Accept a new connection */</comment>
    <decl_stmt><decl><type><name pos:line="23" pos:column="5">ConnectionDetail<pos:position pos:line="23" pos:column="21"/></name></type> <name pos:line="23" pos:column="22">connDetails<pos:position pos:line="23" pos:column="33"/></name></decl>;<pos:position pos:line="23" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="24" pos:column="5">int<pos:position pos:line="24" pos:column="8"/></name></type> <name pos:line="24" pos:column="9">newfd<pos:position pos:line="24" pos:column="14"/></name> <init pos:line="24" pos:column="15">= <expr><call><name pos:line="24" pos:column="17">comm_old_accept<pos:position pos:line="24" pos:column="32"/></name><argument_list pos:line="24" pos:column="32">(<argument><expr><name pos:line="24" pos:column="33">fd<pos:position pos:line="24" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="37">connDetails<pos:position pos:line="24" pos:column="48"/></name></expr></argument>)<pos:position pos:line="24" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="24" pos:column="50"/></decl_stmt>

    <comment type="block" pos:line="26" pos:column="5">/* Check for errors */</comment>

    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><name pos:line="28" pos:column="9">newfd<pos:position pos:line="28" pos:column="14"/></name> <operator pos:line="28" pos:column="15">&lt;<pos:position pos:line="28" pos:column="19"/></operator> <literal type="number" pos:line="28" pos:column="17">0<pos:position pos:line="28" pos:column="18"/></literal></expr>)<pos:position pos:line="28" pos:column="19"/></condition><then pos:line="28" pos:column="19"> <block pos:line="28" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">assert<pos:position pos:line="29" pos:column="15"/></name><argument_list pos:line="29" pos:column="15">(<argument><expr><name pos:line="29" pos:column="16">theCallback<pos:position pos:line="29" pos:column="27"/></name> <operator pos:line="29" pos:column="28">!=<pos:position pos:line="29" pos:column="30"/></operator> <name pos:line="29" pos:column="31">NULL<pos:position pos:line="29" pos:column="35"/></name></expr></argument>)<pos:position pos:line="29" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="37"/></expr_stmt>

        <if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><name pos:line="31" pos:column="13">newfd<pos:position pos:line="31" pos:column="18"/></name> <operator pos:line="31" pos:column="19">==<pos:position pos:line="31" pos:column="21"/></operator> <name pos:line="31" pos:column="22">COMM_NOMESSAGE<pos:position pos:line="31" pos:column="36"/></name></expr>)<pos:position pos:line="31" pos:column="37"/></condition><then pos:line="31" pos:column="37"> <block pos:line="31" pos:column="38">{
            <comment type="block" pos:line="32" pos:column="13">/* register interest again */</comment>
            <expr_stmt><expr><call><name pos:line="33" pos:column="13">debugs<pos:position pos:line="33" pos:column="19"/></name><argument_list pos:line="33" pos:column="19">(<argument><expr><literal type="number" pos:line="33" pos:column="20">5<pos:position pos:line="33" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="23">5<pos:position pos:line="33" pos:column="24"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="26">HERE<pos:position pos:line="33" pos:column="30"/></name> <operator pos:line="33" pos:column="31">&lt;&lt;<pos:position pos:line="33" pos:column="39"/></operator> <literal type="string" pos:line="33" pos:column="34">"try later: FD "<pos:position pos:line="33" pos:column="50"/></literal> <operator pos:line="33" pos:column="51">&lt;&lt;<pos:position pos:line="33" pos:column="59"/></operator> <name pos:line="33" pos:column="54">fd<pos:position pos:line="33" pos:column="56"/></name> <operator pos:line="33" pos:column="57">&lt;&lt;<pos:position pos:line="33" pos:column="65"/></operator>
                   <literal type="string" pos:line="34" pos:column="20">" handler: "<pos:position pos:line="34" pos:column="32"/></literal> <operator pos:line="34" pos:column="33">&lt;&lt;<pos:position pos:line="34" pos:column="41"/></operator> <name pos:line="34" pos:column="36">theCallback<pos:position pos:line="34" pos:column="47"/></name></expr></argument>)<pos:position pos:line="34" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="49"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="35" pos:column="13">commSetSelect<pos:position pos:line="35" pos:column="26"/></name><argument_list pos:line="35" pos:column="26">(<argument><expr><name pos:line="35" pos:column="27">fd<pos:position pos:line="35" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="31">COMM_SELECT_READ<pos:position pos:line="35" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="49">comm_accept_try<pos:position pos:line="35" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="66">NULL<pos:position pos:line="35" pos:column="70"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="72">0<pos:position pos:line="35" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="75"/></expr_stmt>
            <return pos:line="36" pos:column="13">return;<pos:position pos:line="36" pos:column="20"/></return>
        }<pos:position pos:line="37" pos:column="10"/></block></then></if>

        <comment type="line" pos:line="39" pos:column="9">// A non-recoverable error; notify the caller */</comment>
        <expr_stmt><expr><call><name pos:line="40" pos:column="9">notify<pos:position pos:line="40" pos:column="15"/></name><argument_list pos:line="40" pos:column="15">(<argument><expr><operator pos:line="40" pos:column="16">-<pos:position pos:line="40" pos:column="17"/></operator><literal type="number" pos:line="40" pos:column="17">1<pos:position pos:line="40" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="20">COMM_ERROR<pos:position pos:line="40" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="32">errno<pos:position pos:line="40" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="39">connDetails<pos:position pos:line="40" pos:column="50"/></name></expr></argument>)<pos:position pos:line="40" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><name pos:line="41" pos:column="9">mayAcceptMore<pos:position pos:line="41" pos:column="22"/></name> <operator pos:line="41" pos:column="23">=<pos:position pos:line="41" pos:column="24"/></operator> <literal type="boolean" pos:line="41" pos:column="25">false<pos:position pos:line="41" pos:column="30"/></literal></expr>;<pos:position pos:line="41" pos:column="31"/></expr_stmt>
        <return pos:line="42" pos:column="9">return;<pos:position pos:line="42" pos:column="16"/></return>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="45" pos:column="5">assert<pos:position pos:line="45" pos:column="11"/></name><argument_list pos:line="45" pos:column="11">(<argument><expr><name pos:line="45" pos:column="12">theCallback<pos:position pos:line="45" pos:column="23"/></name> <operator pos:line="45" pos:column="24">!=<pos:position pos:line="45" pos:column="26"/></operator> <name pos:line="45" pos:column="27">NULL<pos:position pos:line="45" pos:column="31"/></name></expr></argument>)<pos:position pos:line="45" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="46" pos:column="5">debugs<pos:position pos:line="46" pos:column="11"/></name><argument_list pos:line="46" pos:column="11">(<argument><expr><literal type="number" pos:line="46" pos:column="12">5<pos:position pos:line="46" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="15">5<pos:position pos:line="46" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="18">"AcceptFD::acceptOne accepted: FD "<pos:position pos:line="46" pos:column="53"/></literal> <operator pos:line="46" pos:column="54">&lt;&lt;<pos:position pos:line="46" pos:column="62"/></operator> <name pos:line="46" pos:column="57">fd<pos:position pos:line="46" pos:column="59"/></name> <operator pos:line="46" pos:column="60">&lt;&lt;<pos:position pos:line="46" pos:column="68"/></operator>
           <literal type="string" pos:line="47" pos:column="12">" newfd: "<pos:position pos:line="47" pos:column="22"/></literal> <operator pos:line="47" pos:column="23">&lt;&lt;<pos:position pos:line="47" pos:column="31"/></operator> <name pos:line="47" pos:column="26">newfd<pos:position pos:line="47" pos:column="31"/></name> <operator pos:line="47" pos:column="32">&lt;&lt;<pos:position pos:line="47" pos:column="40"/></operator> <literal type="string" pos:line="47" pos:column="35">" from: "<pos:position pos:line="47" pos:column="44"/></literal> <operator pos:line="47" pos:column="45">&lt;&lt;<pos:position pos:line="47" pos:column="53"/></operator> <name><name pos:line="47" pos:column="48">connDetails<pos:position pos:line="47" pos:column="59"/></name><operator pos:line="47" pos:column="59">.<pos:position pos:line="47" pos:column="60"/></operator><name pos:line="47" pos:column="60">peer<pos:position pos:line="47" pos:column="64"/></name></name> <operator pos:line="47" pos:column="65">&lt;&lt;<pos:position pos:line="47" pos:column="73"/></operator>
           <literal type="string" pos:line="48" pos:column="12">" handler: "<pos:position pos:line="48" pos:column="24"/></literal> <operator pos:line="48" pos:column="25">&lt;&lt;<pos:position pos:line="48" pos:column="33"/></operator> <operator pos:line="48" pos:column="28">*<pos:position pos:line="48" pos:column="29"/></operator><name pos:line="48" pos:column="29">theCallback<pos:position pos:line="48" pos:column="40"/></name></expr></argument>)<pos:position pos:line="48" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="49" pos:column="5">notify<pos:position pos:line="49" pos:column="11"/></name><argument_list pos:line="49" pos:column="11">(<argument><expr><name pos:line="49" pos:column="12">newfd<pos:position pos:line="49" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="19">COMM_OK<pos:position pos:line="49" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="49" pos:column="28">0<pos:position pos:line="49" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="31">connDetails<pos:position pos:line="49" pos:column="42"/></name></expr></argument>)<pos:position pos:line="49" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><name pos:line="50" pos:column="5">mayAcceptMore<pos:position pos:line="50" pos:column="18"/></name> <operator pos:line="50" pos:column="19">=<pos:position pos:line="50" pos:column="20"/></operator> <literal type="boolean" pos:line="50" pos:column="21">true<pos:position pos:line="50" pos:column="25"/></literal></expr>;<pos:position pos:line="50" pos:column="26"/></expr_stmt>
}<pos:position pos:line="51" pos:column="2"/></block></function></unit>
