<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3721_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Icap<pos:position pos:line="1" pos:column="22"/></name><operator pos:line="1" pos:column="22">::<pos:position pos:line="1" pos:column="24"/></operator><name pos:line="1" pos:column="24">OptXact<pos:position pos:line="1" pos:column="31"/></name><operator pos:line="1" pos:column="31">::<pos:position pos:line="1" pos:column="33"/></operator><name pos:line="1" pos:column="33">parseResponse<pos:position pos:line="1" pos:column="46"/></name></name><parameter_list pos:line="1" pos:column="46">()<pos:position pos:line="1" pos:column="48"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="3" pos:column="5">debugs<pos:position pos:line="3" pos:column="11"/></name><argument_list pos:line="3" pos:column="11">(<argument><expr><literal type="number" pos:line="3" pos:column="12">93<pos:position pos:line="3" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="3" pos:column="16">5<pos:position pos:line="3" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="3" pos:column="19">"have "<pos:position pos:line="3" pos:column="26"/></literal> <operator pos:line="3" pos:column="27">&lt;&lt;<pos:position pos:line="3" pos:column="35"/></operator> <call><name><name pos:line="3" pos:column="30">readBuf<pos:position pos:line="3" pos:column="37"/></name><operator pos:line="3" pos:column="37">.<pos:position pos:line="3" pos:column="38"/></operator><name pos:line="3" pos:column="38">length<pos:position pos:line="3" pos:column="44"/></name></name><argument_list pos:line="3" pos:column="44">()<pos:position pos:line="3" pos:column="46"/></argument_list></call> <operator pos:line="3" pos:column="47">&lt;&lt;<pos:position pos:line="3" pos:column="55"/></operator> <literal type="string" pos:line="3" pos:column="50">" bytes to parse"<pos:position pos:line="3" pos:column="67"/></literal> <operator pos:line="3" pos:column="68">&lt;&lt;<pos:position pos:line="3" pos:column="76"/></operator> <call><name pos:line="3" pos:column="71">status<pos:position pos:line="3" pos:column="77"/></name><argument_list pos:line="3" pos:column="77">()<pos:position pos:line="3" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="3" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="81"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">93<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="16">DBG_DATA<pos:position pos:line="4" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="26">"\n"<pos:position pos:line="4" pos:column="30"/></literal> <operator pos:line="4" pos:column="31">&lt;&lt;<pos:position pos:line="4" pos:column="39"/></operator> <name pos:line="4" pos:column="34">readBuf<pos:position pos:line="4" pos:column="41"/></name></expr></argument>)<pos:position pos:line="4" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="43"/></expr_stmt>

    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">HttpReply<pos:position pos:line="6" pos:column="14"/></name><operator pos:line="6" pos:column="14">::<pos:position pos:line="6" pos:column="16"/></operator><name pos:line="6" pos:column="16">Pointer<pos:position pos:line="6" pos:column="23"/></name></name></type> <name pos:line="6" pos:column="24">r<pos:position pos:line="6" pos:column="25"/></name><argument_list pos:line="6" pos:column="25">(<argument><expr><operator pos:line="6" pos:column="26">new<pos:position pos:line="6" pos:column="29"/></operator> <name pos:line="6" pos:column="30">HttpReply<pos:position pos:line="6" pos:column="39"/></name></expr></argument>)<pos:position pos:line="6" pos:column="40"/></argument_list></decl>;<pos:position pos:line="6" pos:column="41"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="7" pos:column="5">r<pos:position pos:line="7" pos:column="6"/></name><operator pos:line="7" pos:column="6">-&gt;<pos:position pos:line="7" pos:column="11"/></operator><name pos:line="7" pos:column="8">protoPrefix<pos:position pos:line="7" pos:column="19"/></name></name> <operator pos:line="7" pos:column="20">=<pos:position pos:line="7" pos:column="21"/></operator> <literal type="string" pos:line="7" pos:column="22">"ICAP/"<pos:position pos:line="7" pos:column="29"/></literal></expr>;<pos:position pos:line="7" pos:column="30"/></expr_stmt> <comment type="line" pos:line="7" pos:column="31">// TODO: make an IcapReply class?</comment>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">!<pos:position pos:line="9" pos:column="10"/></operator><call><name pos:line="9" pos:column="10">parseHttpMsg<pos:position pos:line="9" pos:column="22"/></name><argument_list pos:line="9" pos:column="22">(<argument><expr><call><name><name pos:line="9" pos:column="23">r<pos:position pos:line="9" pos:column="24"/></name><operator pos:line="9" pos:column="24">.<pos:position pos:line="9" pos:column="25"/></operator><name pos:line="9" pos:column="25">getRaw<pos:position pos:line="9" pos:column="31"/></name></name><argument_list pos:line="9" pos:column="31">()<pos:position pos:line="9" pos:column="33"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="35"/></condition><then pos:line="9" pos:column="35"> <comment type="line" pos:line="9" pos:column="36">// throws on errors</comment>
        <block type="pseudo"><return pos:line="10" pos:column="9">return <expr><literal type="boolean" pos:line="10" pos:column="16">false<pos:position pos:line="10" pos:column="21"/></literal></expr>;<pos:position pos:line="10" pos:column="22"/></return></block></then></if>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><call><name pos:line="12" pos:column="9">httpHeaderHasConnDir<pos:position pos:line="12" pos:column="29"/></name><argument_list pos:line="12" pos:column="29">(<argument><expr><operator pos:line="12" pos:column="30">&amp;<pos:position pos:line="12" pos:column="35"/></operator><name><name pos:line="12" pos:column="31">r<pos:position pos:line="12" pos:column="32"/></name><operator pos:line="12" pos:column="32">-&gt;<pos:position pos:line="12" pos:column="37"/></operator><name pos:line="12" pos:column="34">header<pos:position pos:line="12" pos:column="40"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="42">"close"<pos:position pos:line="12" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="51"/></condition><then pos:line="12" pos:column="51">
        <block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="9">reuseConnection<pos:position pos:line="13" pos:column="24"/></name> <operator pos:line="13" pos:column="25">=<pos:position pos:line="13" pos:column="26"/></operator> <literal type="boolean" pos:line="13" pos:column="27">false<pos:position pos:line="13" pos:column="32"/></literal></expr>;<pos:position pos:line="13" pos:column="33"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name pos:line="15" pos:column="5">icapReply<pos:position pos:line="15" pos:column="14"/></name> <operator pos:line="15" pos:column="15">=<pos:position pos:line="15" pos:column="16"/></operator> <name pos:line="15" pos:column="17">r<pos:position pos:line="15" pos:column="18"/></name></expr>;<pos:position pos:line="15" pos:column="19"/></expr_stmt>
    <return pos:line="16" pos:column="5">return <expr><literal type="boolean" pos:line="16" pos:column="12">true<pos:position pos:line="16" pos:column="16"/></literal></expr>;<pos:position pos:line="16" pos:column="17"/></return>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
