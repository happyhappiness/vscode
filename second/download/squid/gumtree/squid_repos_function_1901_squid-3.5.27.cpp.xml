<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1901_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">StatHist<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">dump<pos:position pos:line="2" pos:column="15"/></name></name><parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><name pos:line="2" pos:column="16">StoreEntry<pos:position pos:line="2" pos:column="26"/></name> <modifier pos:line="2" pos:column="27">*<pos:position pos:line="2" pos:column="28"/></modifier></type> <name pos:line="2" pos:column="29">sentry<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="37">StatHistBinDumper<pos:position pos:line="2" pos:column="54"/></name> <modifier pos:line="2" pos:column="55">*<pos:position pos:line="2" pos:column="56"/></modifier></type> <name pos:line="2" pos:column="57">bd<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="60"/></parameter_list> <specifier pos:line="2" pos:column="61">const<pos:position pos:line="2" pos:column="66"/></specifier>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">double<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">left_border<pos:position pos:line="4" pos:column="23"/></name> <init pos:line="4" pos:column="24">= <expr><name pos:line="4" pos:column="26">min_<pos:position pos:line="4" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">!<pos:position pos:line="6" pos:column="10"/></operator><name pos:line="6" pos:column="10">bd<pos:position pos:line="6" pos:column="12"/></name></expr>)<pos:position pos:line="6" pos:column="13"/></condition><then pos:line="6" pos:column="13">
        <block type="pseudo"><expr_stmt><expr><name pos:line="7" pos:column="9">bd<pos:position pos:line="7" pos:column="11"/></name> <operator pos:line="7" pos:column="12">=<pos:position pos:line="7" pos:column="13"/></operator> <name pos:line="7" pos:column="14">statHistBinDumper<pos:position pos:line="7" pos:column="31"/></name></expr>;<pos:position pos:line="7" pos:column="32"/></expr_stmt></block></then></if>

    <for pos:line="9" pos:column="5">for <control pos:line="9" pos:column="9">(<init><decl><type><name pos:line="9" pos:column="10">unsigned<pos:position pos:line="9" pos:column="18"/></name> <name pos:line="9" pos:column="19">int<pos:position pos:line="9" pos:column="22"/></name></type> <name pos:line="9" pos:column="23">i<pos:position pos:line="9" pos:column="24"/></name> <init pos:line="9" pos:column="25">= <expr><literal type="number" pos:line="9" pos:column="27">0<pos:position pos:line="9" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="29"/></init> <condition><expr><name pos:line="9" pos:column="30">i<pos:position pos:line="9" pos:column="31"/></name> <operator pos:line="9" pos:column="32">&lt;<pos:position pos:line="9" pos:column="36"/></operator> <name pos:line="9" pos:column="34">capacity_<pos:position pos:line="9" pos:column="43"/></name></expr>;<pos:position pos:line="9" pos:column="44"/></condition> <incr><expr><operator pos:line="9" pos:column="45">++<pos:position pos:line="9" pos:column="47"/></operator><name pos:line="9" pos:column="47">i<pos:position pos:line="9" pos:column="48"/></name></expr></incr>)<pos:position pos:line="9" pos:column="49"/></control> <block pos:line="9" pos:column="50">{
        <decl_stmt><decl><type><specifier pos:line="10" pos:column="9">const<pos:position pos:line="10" pos:column="14"/></specifier> <name pos:line="10" pos:column="15">double<pos:position pos:line="10" pos:column="21"/></name></type> <name pos:line="10" pos:column="22">right_border<pos:position pos:line="10" pos:column="34"/></name> <init pos:line="10" pos:column="35">= <expr><call><name pos:line="10" pos:column="37">val<pos:position pos:line="10" pos:column="40"/></name><argument_list pos:line="10" pos:column="40">(<argument><expr><name pos:line="10" pos:column="41">i<pos:position pos:line="10" pos:column="42"/></name> <operator pos:line="10" pos:column="43">+<pos:position pos:line="10" pos:column="44"/></operator> <literal type="number" pos:line="10" pos:column="45">1<pos:position pos:line="10" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="48"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">assert<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><name pos:line="11" pos:column="16">right_border<pos:position pos:line="11" pos:column="28"/></name> <operator pos:line="11" pos:column="29">-<pos:position pos:line="11" pos:column="30"/></operator> <name pos:line="11" pos:column="31">left_border<pos:position pos:line="11" pos:column="42"/></name> <operator pos:line="11" pos:column="43">&gt;<pos:position pos:line="11" pos:column="47"/></operator> <literal type="number" pos:line="11" pos:column="45">0.0<pos:position pos:line="11" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">bd<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><name pos:line="12" pos:column="12">sentry<pos:position pos:line="12" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="20">i<pos:position pos:line="12" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="23">left_border<pos:position pos:line="12" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="36">right_border<pos:position pos:line="12" pos:column="48"/></name> <operator pos:line="12" pos:column="49">-<pos:position pos:line="12" pos:column="50"/></operator> <name pos:line="12" pos:column="51">left_border<pos:position pos:line="12" pos:column="62"/></name></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="64">bins<pos:position pos:line="12" pos:column="68"/></name><index pos:line="12" pos:column="68">[<expr><name pos:line="12" pos:column="69">i<pos:position pos:line="12" pos:column="70"/></name></expr>]<pos:position pos:line="12" pos:column="71"/></index></name></expr></argument>)<pos:position pos:line="12" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="73"/></expr_stmt>
        <expr_stmt><expr><name pos:line="13" pos:column="9">left_border<pos:position pos:line="13" pos:column="20"/></name> <operator pos:line="13" pos:column="21">=<pos:position pos:line="13" pos:column="22"/></operator> <name pos:line="13" pos:column="23">right_border<pos:position pos:line="13" pos:column="35"/></name></expr>;<pos:position pos:line="13" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></for>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
