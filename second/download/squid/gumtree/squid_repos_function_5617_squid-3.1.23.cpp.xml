<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5617_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">GetProcessName<pos:position pos:line="2" pos:column="15"/></name><parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><name pos:line="2" pos:column="16">pid_t<pos:position pos:line="2" pos:column="21"/></name></type> <name pos:line="2" pos:column="22">pid<pos:position pos:line="2" pos:column="25"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="27">char<pos:position pos:line="2" pos:column="31"/></name> <modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type><name pos:line="2" pos:column="33">ProcessName<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="45"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">HANDLE<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">hProcess<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="6" pos:column="5">strcpy<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><name pos:line="6" pos:column="12">ProcessName<pos:position pos:line="6" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="25">"unknown"<pos:position pos:line="6" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="36"/></expr_stmt>
<cpp:if pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">if<pos:position pos:line="7" pos:column="4"/></cpp:directive> <expr><name pos:line="7" pos:column="5">HAVE_WIN32_PSAPI<pos:position pos:line="7" pos:column="21"/></name></expr></cpp:if>
    <comment type="block" pos:line="8" pos:column="5">/* Get a handle to the process. */</comment>
    <expr_stmt><expr><name pos:line="9" pos:column="5">hProcess<pos:position pos:line="9" pos:column="13"/></name> <operator pos:line="9" pos:column="14">=<pos:position pos:line="9" pos:column="15"/></operator> <call><name pos:line="9" pos:column="16">OpenProcess<pos:position pos:line="9" pos:column="27"/></name><argument_list pos:line="9" pos:column="27">(<argument><expr><name pos:line="9" pos:column="28">PROCESS_QUERY_INFORMATION<pos:position pos:line="9" pos:column="53"/></name> <operator pos:line="9" pos:column="54">|<pos:position pos:line="9" pos:column="55"/></operator>
                           <name pos:line="10" pos:column="28">PROCESS_VM_READ<pos:position pos:line="10" pos:column="43"/></name></expr></argument>,
                           <argument><expr><name pos:line="11" pos:column="28">FALSE<pos:position pos:line="11" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="35">pid<pos:position pos:line="11" pos:column="38"/></name></expr></argument>)<pos:position pos:line="11" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="40"/></expr_stmt>
    <comment type="block" pos:line="12" pos:column="5">/* Get the process name. */</comment>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">NULL<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">!=<pos:position pos:line="13" pos:column="16"/></operator> <name pos:line="13" pos:column="17">hProcess<pos:position pos:line="13" pos:column="25"/></name></expr>)<pos:position pos:line="13" pos:column="26"/></condition><then pos:line="13" pos:column="26"> <block pos:line="13" pos:column="27">{
        <decl_stmt><decl><type><name pos:line="14" pos:column="9">HMODULE<pos:position pos:line="14" pos:column="16"/></name></type> <name pos:line="14" pos:column="17">hMod<pos:position pos:line="14" pos:column="21"/></name></decl>;<pos:position pos:line="14" pos:column="22"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="15" pos:column="9">DWORD<pos:position pos:line="15" pos:column="14"/></name></type> <name pos:line="15" pos:column="15">cbNeeded<pos:position pos:line="15" pos:column="23"/></name></decl>;<pos:position pos:line="15" pos:column="24"/></decl_stmt>

        <if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><call><name pos:line="17" pos:column="13">EnumProcessModules<pos:position pos:line="17" pos:column="31"/></name><argument_list pos:line="17" pos:column="31">(<argument><expr><name pos:line="17" pos:column="32">hProcess<pos:position pos:line="17" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="42">&amp;<pos:position pos:line="17" pos:column="47"/></operator><name pos:line="17" pos:column="43">hMod<pos:position pos:line="17" pos:column="47"/></name></expr></argument>, <argument><expr><sizeof pos:line="17" pos:column="49">sizeof<argument_list pos:line="17" pos:column="55">(<argument><expr><name pos:line="17" pos:column="56">hMod<pos:position pos:line="17" pos:column="60"/></name></expr></argument>)<pos:position pos:line="17" pos:column="61"/></argument_list></sizeof></expr></argument>, <argument><expr><operator pos:line="17" pos:column="63">&amp;<pos:position pos:line="17" pos:column="68"/></operator><name pos:line="17" pos:column="64">cbNeeded<pos:position pos:line="17" pos:column="72"/></name></expr></argument>)<pos:position pos:line="17" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="74"/></condition><then pos:line="17" pos:column="74">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="13">GetModuleBaseName<pos:position pos:line="18" pos:column="30"/></name><argument_list pos:line="18" pos:column="30">(<argument><expr><name pos:line="18" pos:column="31">hProcess<pos:position pos:line="18" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="41">hMod<pos:position pos:line="18" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="47">ProcessName<pos:position pos:line="18" pos:column="58"/></name></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="60">sizeof<argument_list pos:line="18" pos:column="66">(<argument><expr><name pos:line="18" pos:column="67">ProcessName<pos:position pos:line="18" pos:column="78"/></name></expr></argument>)<pos:position pos:line="18" pos:column="79"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="18" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="81"/></expr_stmt></block></then>
        <else pos:line="19" pos:column="9">else <block pos:line="19" pos:column="14">{
            <expr_stmt><expr><call><name pos:line="20" pos:column="13">CloseHandle<pos:position pos:line="20" pos:column="24"/></name><argument_list pos:line="20" pos:column="24">(<argument><expr><name pos:line="20" pos:column="25">hProcess<pos:position pos:line="20" pos:column="33"/></name></expr></argument>)<pos:position pos:line="20" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="35"/></expr_stmt>
            <return pos:line="21" pos:column="13">return;<pos:position pos:line="21" pos:column="20"/></return>
        }<pos:position pos:line="22" pos:column="10"/></block></else></if>
    }<pos:position pos:line="23" pos:column="6"/></block></then> <else pos:line="23" pos:column="7">else
        <block type="pseudo"><return pos:line="24" pos:column="9">return;<pos:position pos:line="24" pos:column="16"/></return></block></else></if>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">CloseHandle<pos:position pos:line="25" pos:column="16"/></name><argument_list pos:line="25" pos:column="16">(<argument><expr><name pos:line="25" pos:column="17">hProcess<pos:position pos:line="25" pos:column="25"/></name></expr></argument>)<pos:position pos:line="25" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="27"/></expr_stmt>
<cpp:endif pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">endif<pos:position pos:line="26" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
