<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5679_last_repos.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">Auth<pos:position pos:line="1" pos:column="5"/></name><operator pos:line="1" pos:column="5">::<pos:position pos:line="1" pos:column="7"/></operator><name pos:line="1" pos:column="7">User<pos:position pos:line="1" pos:column="11"/></name><operator pos:line="1" pos:column="11">::<pos:position pos:line="1" pos:column="13"/></operator><name pos:line="1" pos:column="13">Pointer<pos:position pos:line="1" pos:column="20"/></name></name></type>
<name><name pos:line="2" pos:column="1">CredentialsCache<pos:position pos:line="2" pos:column="17"/></name><operator pos:line="2" pos:column="17">::<pos:position pos:line="2" pos:column="19"/></operator><name pos:line="2" pos:column="19">lookup<pos:position pos:line="2" pos:column="25"/></name></name><parameter_list pos:line="2" pos:column="25">(<parameter><decl><type><specifier pos:line="2" pos:column="26">const<pos:position pos:line="2" pos:column="31"/></specifier> <name pos:line="2" pos:column="32">SBuf<pos:position pos:line="2" pos:column="36"/></name> <modifier pos:line="2" pos:column="37">&amp;<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="38">userKey<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="46"/></parameter_list> <specifier pos:line="2" pos:column="47">const<pos:position pos:line="2" pos:column="52"/></specifier>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">29<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">6<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="19">"lookup for "<pos:position pos:line="4" pos:column="32"/></literal> <operator pos:line="4" pos:column="33">&lt;&lt;<pos:position pos:line="4" pos:column="41"/></operator> <name pos:line="4" pos:column="36">userKey<pos:position pos:line="4" pos:column="43"/></name></expr></argument>)<pos:position pos:line="4" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="45"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">auto<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">p<pos:position pos:line="5" pos:column="11"/></name> <init pos:line="5" pos:column="12">= <expr><call><name><name pos:line="5" pos:column="14">store_<pos:position pos:line="5" pos:column="20"/></name><operator pos:line="5" pos:column="20">.<pos:position pos:line="5" pos:column="21"/></operator><name pos:line="5" pos:column="21">find<pos:position pos:line="5" pos:column="25"/></name></name><argument_list pos:line="5" pos:column="25">(<argument><expr><name pos:line="5" pos:column="26">userKey<pos:position pos:line="5" pos:column="33"/></name></expr></argument>)<pos:position pos:line="5" pos:column="34"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="35"/></decl_stmt>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">p<pos:position pos:line="6" pos:column="10"/></name> <operator pos:line="6" pos:column="11">==<pos:position pos:line="6" pos:column="13"/></operator> <call><name><name pos:line="6" pos:column="14">store_<pos:position pos:line="6" pos:column="20"/></name><operator pos:line="6" pos:column="20">.<pos:position pos:line="6" pos:column="21"/></operator><name pos:line="6" pos:column="21">end<pos:position pos:line="6" pos:column="24"/></name></name><argument_list pos:line="6" pos:column="24">()<pos:position pos:line="6" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="27"/></condition><then pos:line="6" pos:column="27">
        <block type="pseudo"><return pos:line="7" pos:column="9">return <expr><call><name><name pos:line="7" pos:column="16">User<pos:position pos:line="7" pos:column="20"/></name><operator pos:line="7" pos:column="20">::<pos:position pos:line="7" pos:column="22"/></operator><name pos:line="7" pos:column="22">Pointer<pos:position pos:line="7" pos:column="29"/></name></name><argument_list pos:line="7" pos:column="29">(<argument><expr><literal type="null" pos:line="7" pos:column="30">nullptr<pos:position pos:line="7" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="39"/></return></block></then></if>
    <return pos:line="8" pos:column="5">return <expr><name><name pos:line="8" pos:column="12">p<pos:position pos:line="8" pos:column="13"/></name><operator pos:line="8" pos:column="13">-&gt;<pos:position pos:line="8" pos:column="18"/></operator><name pos:line="8" pos:column="15">second<pos:position pos:line="8" pos:column="21"/></name></name></expr>;<pos:position pos:line="8" pos:column="22"/></return>
}<pos:position pos:line="9" pos:column="2"/></block></function></unit>
