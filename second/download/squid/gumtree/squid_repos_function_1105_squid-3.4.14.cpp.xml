<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1105_squid-3.4.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">parse_hostdomain<pos:position pos:line="2" pos:column="17"/></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><name pos:line="2" pos:column="18">void<pos:position pos:line="2" pos:column="22"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="23"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">host<pos:position pos:line="4" pos:column="15"/></name> <init pos:line="4" pos:column="16">= <expr><name pos:line="4" pos:column="18">NULL<pos:position pos:line="4" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">domain<pos:position pos:line="5" pos:column="17"/></name> <init pos:line="5" pos:column="18">= <expr><name pos:line="5" pos:column="20">NULL<pos:position pos:line="5" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><operator pos:line="7" pos:column="9">!<pos:position pos:line="7" pos:column="10"/></operator><operator pos:line="7" pos:column="10">(<pos:position pos:line="7" pos:column="11"/></operator><name pos:line="7" pos:column="11">host<pos:position pos:line="7" pos:column="15"/></name> <operator pos:line="7" pos:column="16">=<pos:position pos:line="7" pos:column="17"/></operator> <call><name pos:line="7" pos:column="18">strtok<pos:position pos:line="7" pos:column="24"/></name><argument_list pos:line="7" pos:column="24">(<argument><expr><name pos:line="7" pos:column="25">NULL<pos:position pos:line="7" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="31">w_space<pos:position pos:line="7" pos:column="38"/></name></expr></argument>)<pos:position pos:line="7" pos:column="39"/></argument_list></call><operator pos:line="7" pos:column="39">)<pos:position pos:line="7" pos:column="40"/></operator></expr>)<pos:position pos:line="7" pos:column="41"/></condition><then pos:line="7" pos:column="41">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="8" pos:column="9">self_destruct<pos:position pos:line="8" pos:column="22"/></name><argument_list pos:line="8" pos:column="22">()<pos:position pos:line="8" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="25"/></expr_stmt></block></then></if>

    <while pos:line="10" pos:column="5">while <condition pos:line="10" pos:column="11">(<expr><operator pos:line="10" pos:column="12">(<pos:position pos:line="10" pos:column="13"/></operator><name pos:line="10" pos:column="13">domain<pos:position pos:line="10" pos:column="19"/></name> <operator pos:line="10" pos:column="20">=<pos:position pos:line="10" pos:column="21"/></operator> <call><name pos:line="10" pos:column="22">strtok<pos:position pos:line="10" pos:column="28"/></name><argument_list pos:line="10" pos:column="28">(<argument><expr><name pos:line="10" pos:column="29">NULL<pos:position pos:line="10" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="35">list_sep<pos:position pos:line="10" pos:column="43"/></name></expr></argument>)<pos:position pos:line="10" pos:column="44"/></argument_list></call><operator pos:line="10" pos:column="44">)<pos:position pos:line="10" pos:column="45"/></operator></expr>)<pos:position pos:line="10" pos:column="46"/></condition> <block pos:line="10" pos:column="47">{
        <decl_stmt><decl><type><name pos:line="11" pos:column="9">CachePeerDomainList<pos:position pos:line="11" pos:column="28"/></name> <modifier pos:line="11" pos:column="29">*<pos:position pos:line="11" pos:column="30"/></modifier></type><name pos:line="11" pos:column="30">l<pos:position pos:line="11" pos:column="31"/></name> <init pos:line="11" pos:column="32">= <expr><name pos:line="11" pos:column="34">NULL<pos:position pos:line="11" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="39"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="12" pos:column="9">CachePeerDomainList<pos:position pos:line="12" pos:column="28"/></name> <modifier pos:line="12" pos:column="29">*<pos:position pos:line="12" pos:column="30"/></modifier><modifier pos:line="12" pos:column="30">*<pos:position pos:line="12" pos:column="31"/></modifier></type><name pos:line="12" pos:column="31">L<pos:position pos:line="12" pos:column="32"/></name> <init pos:line="12" pos:column="33">= <expr><name pos:line="12" pos:column="35">NULL<pos:position pos:line="12" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="40"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="13" pos:column="9">CachePeer<pos:position pos:line="13" pos:column="18"/></name> <modifier pos:line="13" pos:column="19">*<pos:position pos:line="13" pos:column="20"/></modifier></type><name pos:line="13" pos:column="20">p<pos:position pos:line="13" pos:column="21"/></name></decl>;<pos:position pos:line="13" pos:column="22"/></decl_stmt>

        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><operator pos:line="15" pos:column="13">(<pos:position pos:line="15" pos:column="14"/></operator><name pos:line="15" pos:column="14">p<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">=<pos:position pos:line="15" pos:column="17"/></operator> <call><name pos:line="15" pos:column="18">peerFindByName<pos:position pos:line="15" pos:column="32"/></name><argument_list pos:line="15" pos:column="32">(<argument><expr><name pos:line="15" pos:column="33">host<pos:position pos:line="15" pos:column="37"/></name></expr></argument>)<pos:position pos:line="15" pos:column="38"/></argument_list></call><operator pos:line="15" pos:column="38">)<pos:position pos:line="15" pos:column="39"/></operator> <operator pos:line="15" pos:column="40">==<pos:position pos:line="15" pos:column="42"/></operator> <name pos:line="15" pos:column="43">NULL<pos:position pos:line="15" pos:column="47"/></name></expr>)<pos:position pos:line="15" pos:column="48"/></condition><then pos:line="15" pos:column="48"> <block pos:line="15" pos:column="49">{
            <expr_stmt><expr><call><name pos:line="16" pos:column="13">debugs<pos:position pos:line="16" pos:column="19"/></name><argument_list pos:line="16" pos:column="19">(<argument><expr><literal type="number" pos:line="16" pos:column="20">15<pos:position pos:line="16" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="24">DBG_CRITICAL<pos:position pos:line="16" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="38">""<pos:position pos:line="16" pos:column="40"/></literal> <operator pos:line="16" pos:column="41">&lt;&lt;<pos:position pos:line="16" pos:column="49"/></operator> <name pos:line="16" pos:column="44">cfg_filename<pos:position pos:line="16" pos:column="56"/></name> <operator pos:line="16" pos:column="57">&lt;&lt;<pos:position pos:line="16" pos:column="65"/></operator> <literal type="string" pos:line="16" pos:column="60">", line "<pos:position pos:line="16" pos:column="69"/></literal> <operator pos:line="16" pos:column="70">&lt;&lt;<pos:position pos:line="16" pos:column="78"/></operator> <name pos:line="16" pos:column="73">config_lineno<pos:position pos:line="16" pos:column="86"/></name> <operator pos:line="16" pos:column="87">&lt;&lt;<pos:position pos:line="16" pos:column="95"/></operator> <literal type="string" pos:line="16" pos:column="90">": No cache_peer '"<pos:position pos:line="16" pos:column="109"/></literal> <operator pos:line="16" pos:column="110">&lt;&lt;<pos:position pos:line="16" pos:column="118"/></operator> <name pos:line="16" pos:column="113">host<pos:position pos:line="16" pos:column="117"/></name> <operator pos:line="16" pos:column="118">&lt;&lt;<pos:position pos:line="16" pos:column="126"/></operator> <literal type="string" pos:line="16" pos:column="121">"'"<pos:position pos:line="16" pos:column="124"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="125"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="126"/></expr_stmt>
            <continue pos:line="17" pos:column="13">continue;<pos:position pos:line="17" pos:column="22"/></continue>
        }<pos:position pos:line="18" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="20" pos:column="9">l<pos:position pos:line="20" pos:column="10"/></name> <operator pos:line="20" pos:column="11">=<pos:position pos:line="20" pos:column="12"/></operator> <cast type="static" pos:line="20" pos:column="13">static_cast<argument_list type="generic" pos:line="20" pos:column="24">&lt;<argument><expr><name pos:line="20" pos:column="25">CachePeerDomainList<pos:position pos:line="20" pos:column="44"/></name> <operator pos:line="20" pos:column="45">*<pos:position pos:line="20" pos:column="46"/></operator></expr></argument>&gt;<pos:position pos:line="20" pos:column="50"/></argument_list><argument_list pos:line="20" pos:column="47">(<argument><expr><call><name pos:line="20" pos:column="48">xcalloc<pos:position pos:line="20" pos:column="55"/></name><argument_list pos:line="20" pos:column="55">(<argument><expr><literal type="number" pos:line="20" pos:column="56">1<pos:position pos:line="20" pos:column="57"/></literal></expr></argument>, <argument><expr><sizeof pos:line="20" pos:column="59">sizeof<argument_list pos:line="20" pos:column="65">(<argument><expr><name pos:line="20" pos:column="66">CachePeerDomainList<pos:position pos:line="20" pos:column="85"/></name></expr></argument>)<pos:position pos:line="20" pos:column="86"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="20" pos:column="87"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="88"/></argument_list></cast></expr>;<pos:position pos:line="20" pos:column="89"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="21" pos:column="9">l<pos:position pos:line="21" pos:column="10"/></name><operator pos:line="21" pos:column="10">-&gt;<pos:position pos:line="21" pos:column="15"/></operator><name pos:line="21" pos:column="12">do_ping<pos:position pos:line="21" pos:column="19"/></name></name> <operator pos:line="21" pos:column="20">=<pos:position pos:line="21" pos:column="21"/></operator> <literal type="boolean" pos:line="21" pos:column="22">true<pos:position pos:line="21" pos:column="26"/></literal></expr>;<pos:position pos:line="21" pos:column="27"/></expr_stmt>

        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><operator pos:line="23" pos:column="13">*<pos:position pos:line="23" pos:column="14"/></operator><name pos:line="23" pos:column="14">domain<pos:position pos:line="23" pos:column="20"/></name> <operator pos:line="23" pos:column="21">==<pos:position pos:line="23" pos:column="23"/></operator> <literal type="char" pos:line="23" pos:column="24">'!'<pos:position pos:line="23" pos:column="27"/></literal></expr>)<pos:position pos:line="23" pos:column="28"/></condition><then pos:line="23" pos:column="28"> <block pos:line="23" pos:column="29">{	<comment type="block" pos:line="23" pos:column="33">/* check for !.edu */</comment>
            <expr_stmt><expr><name><name pos:line="24" pos:column="13">l<pos:position pos:line="24" pos:column="14"/></name><operator pos:line="24" pos:column="14">-&gt;<pos:position pos:line="24" pos:column="19"/></operator><name pos:line="24" pos:column="16">do_ping<pos:position pos:line="24" pos:column="23"/></name></name> <operator pos:line="24" pos:column="24">=<pos:position pos:line="24" pos:column="25"/></operator> <literal type="boolean" pos:line="24" pos:column="26">false<pos:position pos:line="24" pos:column="31"/></literal></expr>;<pos:position pos:line="24" pos:column="32"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="25" pos:column="13">++<pos:position pos:line="25" pos:column="15"/></operator><name pos:line="25" pos:column="15">domain<pos:position pos:line="25" pos:column="21"/></name></expr>;<pos:position pos:line="25" pos:column="22"/></expr_stmt>
        }<pos:position pos:line="26" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name><name pos:line="28" pos:column="9">l<pos:position pos:line="28" pos:column="10"/></name><operator pos:line="28" pos:column="10">-&gt;<pos:position pos:line="28" pos:column="15"/></operator><name pos:line="28" pos:column="12">domain<pos:position pos:line="28" pos:column="18"/></name></name> <operator pos:line="28" pos:column="19">=<pos:position pos:line="28" pos:column="20"/></operator> <call><name pos:line="28" pos:column="21">xstrdup<pos:position pos:line="28" pos:column="28"/></name><argument_list pos:line="28" pos:column="28">(<argument><expr><name pos:line="28" pos:column="29">domain<pos:position pos:line="28" pos:column="35"/></name></expr></argument>)<pos:position pos:line="28" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="37"/></expr_stmt>

        <for pos:line="30" pos:column="9">for <control pos:line="30" pos:column="13">(<init><expr><name pos:line="30" pos:column="14">L<pos:position pos:line="30" pos:column="15"/></name> <operator pos:line="30" pos:column="16">=<pos:position pos:line="30" pos:column="17"/></operator> <operator pos:line="30" pos:column="18">&amp;<pos:position pos:line="30" pos:column="23"/></operator><operator pos:line="30" pos:column="19">(<pos:position pos:line="30" pos:column="20"/></operator><name><name pos:line="30" pos:column="20">p<pos:position pos:line="30" pos:column="21"/></name><operator pos:line="30" pos:column="21">-&gt;<pos:position pos:line="30" pos:column="26"/></operator><name pos:line="30" pos:column="23">peer_domain<pos:position pos:line="30" pos:column="34"/></name></name><operator pos:line="30" pos:column="34">)<pos:position pos:line="30" pos:column="35"/></operator></expr>;<pos:position pos:line="30" pos:column="36"/></init> <condition><expr><operator pos:line="30" pos:column="37">*<pos:position pos:line="30" pos:column="38"/></operator><name pos:line="30" pos:column="38">L<pos:position pos:line="30" pos:column="39"/></name></expr>;<pos:position pos:line="30" pos:column="40"/></condition> <incr><expr><name pos:line="30" pos:column="41">L<pos:position pos:line="30" pos:column="42"/></name> <operator pos:line="30" pos:column="43">=<pos:position pos:line="30" pos:column="44"/></operator> <operator pos:line="30" pos:column="45">&amp;<pos:position pos:line="30" pos:column="50"/></operator><operator pos:line="30" pos:column="46">(<pos:position pos:line="30" pos:column="47"/></operator><name><operator pos:line="30" pos:column="47">(<pos:position pos:line="30" pos:column="48"/></operator><operator pos:line="30" pos:column="48">*<pos:position pos:line="30" pos:column="49"/></operator><name pos:line="30" pos:column="49">L<pos:position pos:line="30" pos:column="50"/></name><operator pos:line="30" pos:column="50">)<pos:position pos:line="30" pos:column="51"/></operator><operator pos:line="30" pos:column="51">-&gt;<pos:position pos:line="30" pos:column="56"/></operator><name pos:line="30" pos:column="53">next<pos:position pos:line="30" pos:column="57"/></name></name><operator pos:line="30" pos:column="57">)<pos:position pos:line="30" pos:column="58"/></operator></expr></incr>)<pos:position pos:line="30" pos:column="59"/></control><block type="pseudo"><empty_stmt pos:line="30" pos:column="59">;<pos:position pos:line="30" pos:column="60"/></empty_stmt></block></for>
        <expr_stmt><expr><operator pos:line="31" pos:column="9">*<pos:position pos:line="31" pos:column="10"/></operator><name pos:line="31" pos:column="10">L<pos:position pos:line="31" pos:column="11"/></name> <operator pos:line="31" pos:column="12">=<pos:position pos:line="31" pos:column="13"/></operator> <name pos:line="31" pos:column="14">l<pos:position pos:line="31" pos:column="15"/></name></expr>;<pos:position pos:line="31" pos:column="16"/></expr_stmt>
    }<pos:position pos:line="32" pos:column="6"/></block></while>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
