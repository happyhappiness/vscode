<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2053_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">mem_hdr<pos:position pos:line="2" pos:column="8"/></name><operator pos:line="2" pos:column="8">::<pos:position pos:line="2" pos:column="10"/></operator><name pos:line="2" pos:column="10">unionNotEmpty<pos:position pos:line="2" pos:column="23"/></name></name><parameter_list pos:line="2" pos:column="23">(<parameter><decl><type><name pos:line="2" pos:column="24">StoreIOBuffer<pos:position pos:line="2" pos:column="37"/></name> <specifier pos:line="2" pos:column="38">const<pos:position pos:line="2" pos:column="43"/></specifier> <modifier pos:line="2" pos:column="44">&amp;<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="45">candidate<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="55"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name> <argument_list pos:line="4" pos:column="12">(<argument><expr><name><name pos:line="4" pos:column="13">candidate<pos:position pos:line="4" pos:column="22"/></name><operator pos:line="4" pos:column="22">.<pos:position pos:line="4" pos:column="23"/></operator><name pos:line="4" pos:column="23">offset<pos:position pos:line="4" pos:column="29"/></name></name> <operator pos:line="4" pos:column="30">&gt;=<pos:position pos:line="4" pos:column="35"/></operator> <literal type="number" pos:line="4" pos:column="33">0<pos:position pos:line="4" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="36"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">mem_node<pos:position pos:line="5" pos:column="13"/></name></type> <name pos:line="5" pos:column="14">target<pos:position pos:line="5" pos:column="20"/></name><argument_list pos:line="5" pos:column="20">(<argument><expr><name><name pos:line="5" pos:column="21">candidate<pos:position pos:line="5" pos:column="30"/></name><operator pos:line="5" pos:column="30">.<pos:position pos:line="5" pos:column="31"/></operator><name pos:line="5" pos:column="31">offset<pos:position pos:line="5" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="5" pos:column="38"/></argument_list></decl>;<pos:position pos:line="5" pos:column="39"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="6" pos:column="5">target<pos:position pos:line="6" pos:column="11"/></name><operator pos:line="6" pos:column="11">.<pos:position pos:line="6" pos:column="12"/></operator><name pos:line="6" pos:column="12">nodeBuffer<pos:position pos:line="6" pos:column="22"/></name><operator pos:line="6" pos:column="22">.<pos:position pos:line="6" pos:column="23"/></operator><name pos:line="6" pos:column="23">length<pos:position pos:line="6" pos:column="29"/></name></name> <operator pos:line="6" pos:column="30">=<pos:position pos:line="6" pos:column="31"/></operator> <name><name pos:line="6" pos:column="32">candidate<pos:position pos:line="6" pos:column="41"/></name><operator pos:line="6" pos:column="41">.<pos:position pos:line="6" pos:column="42"/></operator><name pos:line="6" pos:column="42">length<pos:position pos:line="6" pos:column="48"/></name></name></expr>;<pos:position pos:line="6" pos:column="49"/></expr_stmt>
    <return pos:line="7" pos:column="5">return <expr><call><name><name pos:line="7" pos:column="12">nodes<pos:position pos:line="7" pos:column="17"/></name><operator pos:line="7" pos:column="17">.<pos:position pos:line="7" pos:column="18"/></operator><name pos:line="7" pos:column="18">find<pos:position pos:line="7" pos:column="22"/></name></name> <argument_list pos:line="7" pos:column="23">(<argument><expr><operator pos:line="7" pos:column="24">&amp;<pos:position pos:line="7" pos:column="29"/></operator><name pos:line="7" pos:column="25">target<pos:position pos:line="7" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="33">NodeCompare<pos:position pos:line="7" pos:column="44"/></name></expr></argument>)<pos:position pos:line="7" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="46"/></return>
}<pos:position pos:line="8" pos:column="2"/></block></function></unit>
