<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2253_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">HttpHeader<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">parse<pos:position pos:line="2" pos:column="18"/></name></name><parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><specifier pos:line="2" pos:column="19">const<pos:position pos:line="2" pos:column="24"/></specifier> <name pos:line="2" pos:column="25">char<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">header_start<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="45">size_t<pos:position pos:line="2" pos:column="51"/></name></type> <name pos:line="2" pos:column="52">hdrLen<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="59"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">field_ptr<pos:position pos:line="4" pos:column="26"/></name> <init pos:line="4" pos:column="27">= <expr><name pos:line="4" pos:column="29">header_start<pos:position pos:line="4" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="42"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">char<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">header_end<pos:position pos:line="5" pos:column="27"/></name> <init pos:line="5" pos:column="28">= <expr><name pos:line="5" pos:column="30">header_start<pos:position pos:line="5" pos:column="42"/></name> <operator pos:line="5" pos:column="43">+<pos:position pos:line="5" pos:column="44"/></operator> <name pos:line="5" pos:column="45">hdrLen<pos:position pos:line="5" pos:column="51"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="52"/></decl_stmt> <comment type="line" pos:line="5" pos:column="53">// XXX: remove</comment>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">warnOnError<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><operator pos:line="6" pos:column="23">(<pos:position pos:line="6" pos:column="24"/></operator><ternary><condition><expr><name><name pos:line="6" pos:column="24">Config<pos:position pos:line="6" pos:column="30"/></name><operator pos:line="6" pos:column="30">.<pos:position pos:line="6" pos:column="31"/></operator><name pos:line="6" pos:column="31">onoff<pos:position pos:line="6" pos:column="36"/></name><operator pos:line="6" pos:column="36">.<pos:position pos:line="6" pos:column="37"/></operator><name pos:line="6" pos:column="37">relaxed_header_parser<pos:position pos:line="6" pos:column="58"/></name></name> <operator pos:line="6" pos:column="59">&lt;=<pos:position pos:line="6" pos:column="64"/></operator> <literal type="number" pos:line="6" pos:column="62">0<pos:position pos:line="6" pos:column="63"/></literal></expr> ?<pos:position pos:line="6" pos:column="65"/></condition><then pos:line="6" pos:column="65"> <expr><name pos:line="6" pos:column="66">DBG_IMPORTANT<pos:position pos:line="6" pos:column="79"/></name></expr> <pos:position pos:line="6" pos:column="80"/></then><else pos:line="6" pos:column="80">: <expr><literal type="number" pos:line="6" pos:column="82">2<pos:position pos:line="6" pos:column="83"/></literal></expr></else></ternary><operator pos:line="6" pos:column="83">)<pos:position pos:line="6" pos:column="84"/></operator></expr></init></decl>;<pos:position pos:line="6" pos:column="85"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="8" pos:column="5">PROF_start<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><name pos:line="8" pos:column="16">HttpHeaderParse<pos:position pos:line="8" pos:column="31"/></name></expr></argument>)<pos:position pos:line="8" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="33"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="10" pos:column="5">assert<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><name pos:line="10" pos:column="12">header_start<pos:position pos:line="10" pos:column="24"/></name> <operator pos:line="10" pos:column="25">&amp;&amp;<pos:position pos:line="10" pos:column="35"/></operator> <name pos:line="10" pos:column="28">header_end<pos:position pos:line="10" pos:column="38"/></name></expr></argument>)<pos:position pos:line="10" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">debugs<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><literal type="number" pos:line="11" pos:column="12">55<pos:position pos:line="11" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="16">7<pos:position pos:line="11" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="19">"parsing hdr: ("<pos:position pos:line="11" pos:column="35"/></literal> <operator pos:line="11" pos:column="36">&lt;&lt;<pos:position pos:line="11" pos:column="44"/></operator> <name pos:line="11" pos:column="39">this<pos:position pos:line="11" pos:column="43"/></name> <operator pos:line="11" pos:column="44">&lt;&lt;<pos:position pos:line="11" pos:column="52"/></operator> <literal type="string" pos:line="11" pos:column="47">")"<pos:position pos:line="11" pos:column="50"/></literal> <operator pos:line="11" pos:column="51">&lt;&lt;<pos:position pos:line="11" pos:column="59"/></operator> <name><name pos:line="11" pos:column="54">std<pos:position pos:line="11" pos:column="57"/></name><operator pos:line="11" pos:column="57">::<pos:position pos:line="11" pos:column="59"/></operator><name pos:line="11" pos:column="59">endl<pos:position pos:line="11" pos:column="63"/></name></name> <operator pos:line="11" pos:column="64">&lt;&lt;<pos:position pos:line="11" pos:column="72"/></operator> <call><name pos:line="11" pos:column="67">getStringPrefix<pos:position pos:line="11" pos:column="82"/></name><argument_list pos:line="11" pos:column="82">(<argument><expr><name pos:line="11" pos:column="83">header_start<pos:position pos:line="11" pos:column="95"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="97">hdrLen<pos:position pos:line="11" pos:column="103"/></name></expr></argument>)<pos:position pos:line="11" pos:column="104"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="105"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="106"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="12" pos:column="5">++<pos:position pos:line="12" pos:column="7"/></operator> <name><name pos:line="12" pos:column="8">HttpHeaderStats<pos:position pos:line="12" pos:column="23"/></name><index pos:line="12" pos:column="23">[<expr><name pos:line="12" pos:column="24">owner<pos:position pos:line="12" pos:column="29"/></name></expr>]<pos:position pos:line="12" pos:column="30"/></index></name><operator pos:line="12" pos:column="30">.<pos:position pos:line="12" pos:column="31"/></operator><name pos:line="12" pos:column="31">parsedCount<pos:position pos:line="12" pos:column="42"/></name></expr>;<pos:position pos:line="12" pos:column="43"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="14" pos:column="5">char<pos:position pos:line="14" pos:column="9"/></name> <modifier pos:line="14" pos:column="10">*<pos:position pos:line="14" pos:column="11"/></modifier></type><name pos:line="14" pos:column="11">nulpos<pos:position pos:line="14" pos:column="17"/></name></decl>;<pos:position pos:line="14" pos:column="18"/></decl_stmt>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><operator pos:line="15" pos:column="9">(<pos:position pos:line="15" pos:column="10"/></operator><name pos:line="15" pos:column="10">nulpos<pos:position pos:line="15" pos:column="16"/></name> <operator pos:line="15" pos:column="17">=<pos:position pos:line="15" pos:column="18"/></operator> <operator pos:line="15" pos:column="19">(<pos:position pos:line="15" pos:column="20"/></operator><name pos:line="15" pos:column="20">char<pos:position pos:line="15" pos:column="24"/></name><operator pos:line="15" pos:column="24">*<pos:position pos:line="15" pos:column="25"/></operator><operator pos:line="15" pos:column="25">)<pos:position pos:line="15" pos:column="26"/></operator><call><name pos:line="15" pos:column="26">memchr<pos:position pos:line="15" pos:column="32"/></name><argument_list pos:line="15" pos:column="32">(<argument><expr><name pos:line="15" pos:column="33">header_start<pos:position pos:line="15" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="15" pos:column="47">'\0'<pos:position pos:line="15" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="53">hdrLen<pos:position pos:line="15" pos:column="59"/></name></expr></argument>)<pos:position pos:line="15" pos:column="60"/></argument_list></call><operator pos:line="15" pos:column="60">)<pos:position pos:line="15" pos:column="61"/></operator></expr>)<pos:position pos:line="15" pos:column="62"/></condition><then pos:line="15" pos:column="62"> <block pos:line="15" pos:column="63">{
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">debugs<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><literal type="number" pos:line="16" pos:column="16">55<pos:position pos:line="16" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="20">DBG_IMPORTANT<pos:position pos:line="16" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="35">"WARNING: HTTP header contains NULL characters {"<pos:position pos:line="16" pos:column="84"/></literal> <operator pos:line="16" pos:column="85">&lt;&lt;<pos:position pos:line="16" pos:column="93"/></operator>
               <call><name pos:line="17" pos:column="16">getStringPrefix<pos:position pos:line="17" pos:column="31"/></name><argument_list pos:line="17" pos:column="31">(<argument><expr><name pos:line="17" pos:column="32">header_start<pos:position pos:line="17" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="46">nulpos<pos:position pos:line="17" pos:column="52"/></name><operator pos:line="17" pos:column="52">-<pos:position pos:line="17" pos:column="53"/></operator><name pos:line="17" pos:column="53">header_start<pos:position pos:line="17" pos:column="65"/></name></expr></argument>)<pos:position pos:line="17" pos:column="66"/></argument_list></call> <operator pos:line="17" pos:column="67">&lt;&lt;<pos:position pos:line="17" pos:column="75"/></operator> <literal type="string" pos:line="17" pos:column="70">"}\nNULL\n{"<pos:position pos:line="17" pos:column="82"/></literal> <operator pos:line="17" pos:column="83">&lt;&lt;<pos:position pos:line="17" pos:column="91"/></operator> <call><name pos:line="17" pos:column="86">getStringPrefix<pos:position pos:line="17" pos:column="101"/></name><argument_list pos:line="17" pos:column="101">(<argument><expr><name pos:line="17" pos:column="102">nulpos<pos:position pos:line="17" pos:column="108"/></name><operator pos:line="17" pos:column="108">+<pos:position pos:line="17" pos:column="109"/></operator><literal type="number" pos:line="17" pos:column="109">1<pos:position pos:line="17" pos:column="110"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="112">hdrLen<pos:position pos:line="17" pos:column="118"/></name><operator pos:line="17" pos:column="118">-<pos:position pos:line="17" pos:column="119"/></operator><operator pos:line="17" pos:column="119">(<pos:position pos:line="17" pos:column="120"/></operator><name pos:line="17" pos:column="120">nulpos<pos:position pos:line="17" pos:column="126"/></name><operator pos:line="17" pos:column="126">-<pos:position pos:line="17" pos:column="127"/></operator><name pos:line="17" pos:column="127">header_start<pos:position pos:line="17" pos:column="139"/></name><operator pos:line="17" pos:column="139">)<pos:position pos:line="17" pos:column="140"/></operator><operator pos:line="17" pos:column="140">-<pos:position pos:line="17" pos:column="141"/></operator><literal type="number" pos:line="17" pos:column="141">1<pos:position pos:line="17" pos:column="142"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="143"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="144"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="145"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">PROF_stop<pos:position pos:line="18" pos:column="18"/></name><argument_list pos:line="18" pos:column="18">(<argument><expr><name pos:line="18" pos:column="19">HttpHeaderParse<pos:position pos:line="18" pos:column="34"/></name></expr></argument>)<pos:position pos:line="18" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">clean<pos:position pos:line="19" pos:column="14"/></name><argument_list pos:line="19" pos:column="14">()<pos:position pos:line="19" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="17"/></expr_stmt>
        <return pos:line="20" pos:column="9">return <expr><literal type="number" pos:line="20" pos:column="16">0<pos:position pos:line="20" pos:column="17"/></literal></expr>;<pos:position pos:line="20" pos:column="18"/></return>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name><name pos:line="23" pos:column="5">Http<pos:position pos:line="23" pos:column="9"/></name><operator pos:line="23" pos:column="9">::<pos:position pos:line="23" pos:column="11"/></operator><name pos:line="23" pos:column="11">ContentLengthInterpreter<pos:position pos:line="23" pos:column="35"/></name></name></type> <name pos:line="23" pos:column="36">clen<pos:position pos:line="23" pos:column="40"/></name><argument_list pos:line="23" pos:column="40">(<argument><expr><name pos:line="23" pos:column="41">warnOnError<pos:position pos:line="23" pos:column="52"/></name></expr></argument>)<pos:position pos:line="23" pos:column="53"/></argument_list></decl>;<pos:position pos:line="23" pos:column="54"/></decl_stmt>
    <comment type="block" pos:line="24" pos:column="5">/* common format headers are "&lt;name&gt;:[ws]&lt;value&gt;" lines delimited by &lt;CRLF&gt;.
     * continuation lines start with a (single) space or tab */</comment>
    <while pos:line="26" pos:column="5">while <condition pos:line="26" pos:column="11">(<expr><name pos:line="26" pos:column="12">field_ptr<pos:position pos:line="26" pos:column="21"/></name> <operator pos:line="26" pos:column="22">&lt;<pos:position pos:line="26" pos:column="26"/></operator> <name pos:line="26" pos:column="24">header_end<pos:position pos:line="26" pos:column="34"/></name></expr>)<pos:position pos:line="26" pos:column="35"/></condition> <block pos:line="26" pos:column="36">{
        <decl_stmt><decl><type><specifier pos:line="27" pos:column="9">const<pos:position pos:line="27" pos:column="14"/></specifier> <name pos:line="27" pos:column="15">char<pos:position pos:line="27" pos:column="19"/></name> <modifier pos:line="27" pos:column="20">*<pos:position pos:line="27" pos:column="21"/></modifier></type><name pos:line="27" pos:column="21">field_start<pos:position pos:line="27" pos:column="32"/></name> <init pos:line="27" pos:column="33">= <expr><name pos:line="27" pos:column="35">field_ptr<pos:position pos:line="27" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="27" pos:column="45"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="28" pos:column="9">const<pos:position pos:line="28" pos:column="14"/></specifier> <name pos:line="28" pos:column="15">char<pos:position pos:line="28" pos:column="19"/></name> <modifier pos:line="28" pos:column="20">*<pos:position pos:line="28" pos:column="21"/></modifier></type><name pos:line="28" pos:column="21">field_end<pos:position pos:line="28" pos:column="30"/></name></decl>;<pos:position pos:line="28" pos:column="31"/></decl_stmt>

        <do pos:line="30" pos:column="9">do <block pos:line="30" pos:column="12">{
            <decl_stmt><decl><type><specifier pos:line="31" pos:column="13">const<pos:position pos:line="31" pos:column="18"/></specifier> <name pos:line="31" pos:column="19">char<pos:position pos:line="31" pos:column="23"/></name> <modifier pos:line="31" pos:column="24">*<pos:position pos:line="31" pos:column="25"/></modifier></type><name pos:line="31" pos:column="25">this_line<pos:position pos:line="31" pos:column="34"/></name> <init pos:line="31" pos:column="35">= <expr><name pos:line="31" pos:column="37">field_ptr<pos:position pos:line="31" pos:column="46"/></name></expr></init></decl>;<pos:position pos:line="31" pos:column="47"/></decl_stmt>
            <expr_stmt><expr><name pos:line="32" pos:column="13">field_ptr<pos:position pos:line="32" pos:column="22"/></name> <operator pos:line="32" pos:column="23">=<pos:position pos:line="32" pos:column="24"/></operator> <operator pos:line="32" pos:column="25">(<pos:position pos:line="32" pos:column="26"/></operator><specifier pos:line="32" pos:column="26">const<pos:position pos:line="32" pos:column="31"/></specifier> <name pos:line="32" pos:column="32">char<pos:position pos:line="32" pos:column="36"/></name> <operator pos:line="32" pos:column="37">*<pos:position pos:line="32" pos:column="38"/></operator><operator pos:line="32" pos:column="38">)<pos:position pos:line="32" pos:column="39"/></operator><call><name pos:line="32" pos:column="39">memchr<pos:position pos:line="32" pos:column="45"/></name><argument_list pos:line="32" pos:column="45">(<argument><expr><name pos:line="32" pos:column="46">field_ptr<pos:position pos:line="32" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="32" pos:column="57">'\n'<pos:position pos:line="32" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="63">header_end<pos:position pos:line="32" pos:column="73"/></name> <operator pos:line="32" pos:column="74">-<pos:position pos:line="32" pos:column="75"/></operator> <name pos:line="32" pos:column="76">field_ptr<pos:position pos:line="32" pos:column="85"/></name></expr></argument>)<pos:position pos:line="32" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="87"/></expr_stmt>

            <if pos:line="34" pos:column="13">if <condition pos:line="34" pos:column="16">(<expr><operator pos:line="34" pos:column="17">!<pos:position pos:line="34" pos:column="18"/></operator><name pos:line="34" pos:column="18">field_ptr<pos:position pos:line="34" pos:column="27"/></name></expr>)<pos:position pos:line="34" pos:column="28"/></condition><then pos:line="34" pos:column="28"> <block pos:line="34" pos:column="29">{
                <comment type="line" pos:line="35" pos:column="17">// missing &lt;LF&gt;</comment>
                <expr_stmt><expr><call><name pos:line="36" pos:column="17">PROF_stop<pos:position pos:line="36" pos:column="26"/></name><argument_list pos:line="36" pos:column="26">(<argument><expr><name pos:line="36" pos:column="27">HttpHeaderParse<pos:position pos:line="36" pos:column="42"/></name></expr></argument>)<pos:position pos:line="36" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="44"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="37" pos:column="17">clean<pos:position pos:line="37" pos:column="22"/></name><argument_list pos:line="37" pos:column="22">()<pos:position pos:line="37" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="25"/></expr_stmt>
                <return pos:line="38" pos:column="17">return <expr><literal type="number" pos:line="38" pos:column="24">0<pos:position pos:line="38" pos:column="25"/></literal></expr>;<pos:position pos:line="38" pos:column="26"/></return>
            }<pos:position pos:line="39" pos:column="14"/></block></then></if>

            <expr_stmt><expr><name pos:line="41" pos:column="13">field_end<pos:position pos:line="41" pos:column="22"/></name> <operator pos:line="41" pos:column="23">=<pos:position pos:line="41" pos:column="24"/></operator> <name pos:line="41" pos:column="25">field_ptr<pos:position pos:line="41" pos:column="34"/></name></expr>;<pos:position pos:line="41" pos:column="35"/></expr_stmt>

            <expr_stmt><expr><operator pos:line="43" pos:column="13">++<pos:position pos:line="43" pos:column="15"/></operator><name pos:line="43" pos:column="15">field_ptr<pos:position pos:line="43" pos:column="24"/></name></expr>;<pos:position pos:line="43" pos:column="25"/></expr_stmt>    <comment type="block" pos:line="43" pos:column="29">/* Move to next line */</comment>

            <if pos:line="45" pos:column="13">if <condition pos:line="45" pos:column="16">(<expr><name pos:line="45" pos:column="17">field_end<pos:position pos:line="45" pos:column="26"/></name> <operator pos:line="45" pos:column="27">&gt;<pos:position pos:line="45" pos:column="31"/></operator> <name pos:line="45" pos:column="29">this_line<pos:position pos:line="45" pos:column="38"/></name> <operator pos:line="45" pos:column="39">&amp;&amp;<pos:position pos:line="45" pos:column="49"/></operator> <name><name pos:line="45" pos:column="42">field_end<pos:position pos:line="45" pos:column="51"/></name><index pos:line="45" pos:column="51">[<expr><operator pos:line="45" pos:column="52">-<pos:position pos:line="45" pos:column="53"/></operator><literal type="number" pos:line="45" pos:column="53">1<pos:position pos:line="45" pos:column="54"/></literal></expr>]<pos:position pos:line="45" pos:column="55"/></index></name> <operator pos:line="45" pos:column="56">==<pos:position pos:line="45" pos:column="58"/></operator> <literal type="char" pos:line="45" pos:column="59">'\r'<pos:position pos:line="45" pos:column="63"/></literal></expr>)<pos:position pos:line="45" pos:column="64"/></condition><then pos:line="45" pos:column="64"> <block pos:line="45" pos:column="65">{
                <expr_stmt><expr><operator pos:line="46" pos:column="17">--<pos:position pos:line="46" pos:column="19"/></operator><name pos:line="46" pos:column="19">field_end<pos:position pos:line="46" pos:column="28"/></name></expr>;<pos:position pos:line="46" pos:column="29"/></expr_stmt>    <comment type="block" pos:line="46" pos:column="33">/* Ignore CR LF */</comment>

                <if pos:line="48" pos:column="17">if <condition pos:line="48" pos:column="20">(<expr><name pos:line="48" pos:column="21">owner<pos:position pos:line="48" pos:column="26"/></name> <operator pos:line="48" pos:column="27">==<pos:position pos:line="48" pos:column="29"/></operator> <name pos:line="48" pos:column="30">hoRequest<pos:position pos:line="48" pos:column="39"/></name> <operator pos:line="48" pos:column="40">&amp;&amp;<pos:position pos:line="48" pos:column="50"/></operator> <name pos:line="48" pos:column="43">field_end<pos:position pos:line="48" pos:column="52"/></name> <operator pos:line="48" pos:column="53">&gt;<pos:position pos:line="48" pos:column="57"/></operator> <name pos:line="48" pos:column="55">this_line<pos:position pos:line="48" pos:column="64"/></name></expr>)<pos:position pos:line="48" pos:column="65"/></condition><then pos:line="48" pos:column="65"> <block pos:line="48" pos:column="66">{
                    <decl_stmt><decl><type><name pos:line="49" pos:column="21">bool<pos:position pos:line="49" pos:column="25"/></name></type> <name pos:line="49" pos:column="26">cr_only<pos:position pos:line="49" pos:column="33"/></name> <init pos:line="49" pos:column="34">= <expr><literal type="boolean" pos:line="49" pos:column="36">true<pos:position pos:line="49" pos:column="40"/></literal></expr></init></decl>;<pos:position pos:line="49" pos:column="41"/></decl_stmt>
                    <for pos:line="50" pos:column="21">for <control pos:line="50" pos:column="25">(<init><decl><type><specifier pos:line="50" pos:column="26">const<pos:position pos:line="50" pos:column="31"/></specifier> <name pos:line="50" pos:column="32">char<pos:position pos:line="50" pos:column="36"/></name> <modifier pos:line="50" pos:column="37">*<pos:position pos:line="50" pos:column="38"/></modifier></type><name pos:line="50" pos:column="38">p<pos:position pos:line="50" pos:column="39"/></name> <init pos:line="50" pos:column="40">= <expr><name pos:line="50" pos:column="42">this_line<pos:position pos:line="50" pos:column="51"/></name></expr></init></decl>;<pos:position pos:line="50" pos:column="52"/></init> <condition><expr><name pos:line="50" pos:column="53">p<pos:position pos:line="50" pos:column="54"/></name> <operator pos:line="50" pos:column="55">&lt;<pos:position pos:line="50" pos:column="59"/></operator> <name pos:line="50" pos:column="57">field_end<pos:position pos:line="50" pos:column="66"/></name> <operator pos:line="50" pos:column="67">&amp;&amp;<pos:position pos:line="50" pos:column="77"/></operator> <name pos:line="50" pos:column="70">cr_only<pos:position pos:line="50" pos:column="77"/></name></expr>;<pos:position pos:line="50" pos:column="78"/></condition> <incr><expr><operator pos:line="50" pos:column="79">++<pos:position pos:line="50" pos:column="81"/></operator><name pos:line="50" pos:column="81">p<pos:position pos:line="50" pos:column="82"/></name></expr></incr>)<pos:position pos:line="50" pos:column="83"/></control> <block pos:line="50" pos:column="84">{
                        <if pos:line="51" pos:column="25">if <condition pos:line="51" pos:column="28">(<expr><operator pos:line="51" pos:column="29">*<pos:position pos:line="51" pos:column="30"/></operator><name pos:line="51" pos:column="30">p<pos:position pos:line="51" pos:column="31"/></name> <operator pos:line="51" pos:column="32">!=<pos:position pos:line="51" pos:column="34"/></operator> <literal type="char" pos:line="51" pos:column="35">'\r'<pos:position pos:line="51" pos:column="39"/></literal></expr>)<pos:position pos:line="51" pos:column="40"/></condition><then pos:line="51" pos:column="40">
                            <block type="pseudo"><expr_stmt><expr><name pos:line="52" pos:column="29">cr_only<pos:position pos:line="52" pos:column="36"/></name> <operator pos:line="52" pos:column="37">=<pos:position pos:line="52" pos:column="38"/></operator> <literal type="boolean" pos:line="52" pos:column="39">false<pos:position pos:line="52" pos:column="44"/></literal></expr>;<pos:position pos:line="52" pos:column="45"/></expr_stmt></block></then></if>
                    }<pos:position pos:line="53" pos:column="22"/></block></for>
                    <if pos:line="54" pos:column="21">if <condition pos:line="54" pos:column="24">(<expr><name pos:line="54" pos:column="25">cr_only<pos:position pos:line="54" pos:column="32"/></name></expr>)<pos:position pos:line="54" pos:column="33"/></condition><then pos:line="54" pos:column="33"> <block pos:line="54" pos:column="34">{
                        <expr_stmt><expr><call><name pos:line="55" pos:column="25">debugs<pos:position pos:line="55" pos:column="31"/></name><argument_list pos:line="55" pos:column="31">(<argument><expr><literal type="number" pos:line="55" pos:column="32">55<pos:position pos:line="55" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="55" pos:column="36">DBG_IMPORTANT<pos:position pos:line="55" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="51">"SECURITY WARNING: Rejecting HTTP request with a CR+ "<pos:position pos:line="55" pos:column="105"/></literal>
                               <literal type="string" pos:line="56" pos:column="32">"header field to prevent request smuggling attacks: {"<pos:position pos:line="56" pos:column="86"/></literal> <operator pos:line="56" pos:column="87">&lt;&lt;<pos:position pos:line="56" pos:column="95"/></operator>
                               <call><name pos:line="57" pos:column="32">getStringPrefix<pos:position pos:line="57" pos:column="47"/></name><argument_list pos:line="57" pos:column="47">(<argument><expr><name pos:line="57" pos:column="48">header_start<pos:position pos:line="57" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="62">hdrLen<pos:position pos:line="57" pos:column="68"/></name></expr></argument>)<pos:position pos:line="57" pos:column="69"/></argument_list></call> <operator pos:line="57" pos:column="70">&lt;&lt;<pos:position pos:line="57" pos:column="78"/></operator> <literal type="string" pos:line="57" pos:column="73">"}"<pos:position pos:line="57" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="78"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="58" pos:column="25">PROF_stop<pos:position pos:line="58" pos:column="34"/></name><argument_list pos:line="58" pos:column="34">(<argument><expr><name pos:line="58" pos:column="35">HttpHeaderParse<pos:position pos:line="58" pos:column="50"/></name></expr></argument>)<pos:position pos:line="58" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="52"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="59" pos:column="25">clean<pos:position pos:line="59" pos:column="30"/></name><argument_list pos:line="59" pos:column="30">()<pos:position pos:line="59" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="33"/></expr_stmt>
                        <return pos:line="60" pos:column="25">return <expr><literal type="number" pos:line="60" pos:column="32">0<pos:position pos:line="60" pos:column="33"/></literal></expr>;<pos:position pos:line="60" pos:column="34"/></return>
                    }<pos:position pos:line="61" pos:column="22"/></block></then></if>
                }<pos:position pos:line="62" pos:column="18"/></block></then></if>
            }<pos:position pos:line="63" pos:column="14"/></block></then></if>

            <comment type="block" pos:line="65" pos:column="13">/* Barf on stray CR characters */</comment>
            <if pos:line="66" pos:column="13">if <condition pos:line="66" pos:column="16">(<expr><call><name pos:line="66" pos:column="17">memchr<pos:position pos:line="66" pos:column="23"/></name><argument_list pos:line="66" pos:column="23">(<argument><expr><name pos:line="66" pos:column="24">this_line<pos:position pos:line="66" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="66" pos:column="35">'\r'<pos:position pos:line="66" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="66" pos:column="41">field_end<pos:position pos:line="66" pos:column="50"/></name> <operator pos:line="66" pos:column="51">-<pos:position pos:line="66" pos:column="52"/></operator> <name pos:line="66" pos:column="53">this_line<pos:position pos:line="66" pos:column="62"/></name></expr></argument>)<pos:position pos:line="66" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="66" pos:column="64"/></condition><then pos:line="66" pos:column="64"> <block pos:line="66" pos:column="65">{
                <expr_stmt><expr><call><name pos:line="67" pos:column="17">debugs<pos:position pos:line="67" pos:column="23"/></name><argument_list pos:line="67" pos:column="23">(<argument><expr><literal type="number" pos:line="67" pos:column="24">55<pos:position pos:line="67" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="67" pos:column="28">warnOnError<pos:position pos:line="67" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="41">"WARNING: suspicious CR characters in HTTP header {"<pos:position pos:line="67" pos:column="93"/></literal> <operator pos:line="67" pos:column="94">&lt;&lt;<pos:position pos:line="67" pos:column="102"/></operator>
                       <call><name pos:line="68" pos:column="24">getStringPrefix<pos:position pos:line="68" pos:column="39"/></name><argument_list pos:line="68" pos:column="39">(<argument><expr><name pos:line="68" pos:column="40">field_start<pos:position pos:line="68" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="53">field_end<pos:position pos:line="68" pos:column="62"/></name><operator pos:line="68" pos:column="62">-<pos:position pos:line="68" pos:column="63"/></operator><name pos:line="68" pos:column="63">field_start<pos:position pos:line="68" pos:column="74"/></name></expr></argument>)<pos:position pos:line="68" pos:column="75"/></argument_list></call> <operator pos:line="68" pos:column="76">&lt;&lt;<pos:position pos:line="68" pos:column="84"/></operator> <literal type="string" pos:line="68" pos:column="79">"}"<pos:position pos:line="68" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="84"/></expr_stmt>

                <if pos:line="70" pos:column="17">if <condition pos:line="70" pos:column="20">(<expr><name><name pos:line="70" pos:column="21">Config<pos:position pos:line="70" pos:column="27"/></name><operator pos:line="70" pos:column="27">.<pos:position pos:line="70" pos:column="28"/></operator><name pos:line="70" pos:column="28">onoff<pos:position pos:line="70" pos:column="33"/></name><operator pos:line="70" pos:column="33">.<pos:position pos:line="70" pos:column="34"/></operator><name pos:line="70" pos:column="34">relaxed_header_parser<pos:position pos:line="70" pos:column="55"/></name></name></expr>)<pos:position pos:line="70" pos:column="56"/></condition><then pos:line="70" pos:column="56"> <block pos:line="70" pos:column="57">{
                    <decl_stmt><decl><type><name pos:line="71" pos:column="21">char<pos:position pos:line="71" pos:column="25"/></name> <modifier pos:line="71" pos:column="26">*<pos:position pos:line="71" pos:column="27"/></modifier></type><name pos:line="71" pos:column="27">p<pos:position pos:line="71" pos:column="28"/></name> <init pos:line="71" pos:column="29">= <expr><operator pos:line="71" pos:column="31">(<pos:position pos:line="71" pos:column="32"/></operator><name pos:line="71" pos:column="32">char<pos:position pos:line="71" pos:column="36"/></name> <operator pos:line="71" pos:column="37">*<pos:position pos:line="71" pos:column="38"/></operator><operator pos:line="71" pos:column="38">)<pos:position pos:line="71" pos:column="39"/></operator> <name pos:line="71" pos:column="40">this_line<pos:position pos:line="71" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="71" pos:column="50"/></decl_stmt>   <comment type="block" pos:line="71" pos:column="53">/* XXX Warning! This destroys original header content and violates specifications somewhat */</comment>

                    <while pos:line="73" pos:column="21">while <condition pos:line="73" pos:column="27">(<expr><operator pos:line="73" pos:column="28">(<pos:position pos:line="73" pos:column="29"/></operator><name pos:line="73" pos:column="29">p<pos:position pos:line="73" pos:column="30"/></name> <operator pos:line="73" pos:column="31">=<pos:position pos:line="73" pos:column="32"/></operator> <operator pos:line="73" pos:column="33">(<pos:position pos:line="73" pos:column="34"/></operator><name pos:line="73" pos:column="34">char<pos:position pos:line="73" pos:column="38"/></name> <operator pos:line="73" pos:column="39">*<pos:position pos:line="73" pos:column="40"/></operator><operator pos:line="73" pos:column="40">)<pos:position pos:line="73" pos:column="41"/></operator><call><name pos:line="73" pos:column="41">memchr<pos:position pos:line="73" pos:column="47"/></name><argument_list pos:line="73" pos:column="47">(<argument><expr><name pos:line="73" pos:column="48">p<pos:position pos:line="73" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="73" pos:column="51">'\r'<pos:position pos:line="73" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="73" pos:column="57">field_end<pos:position pos:line="73" pos:column="66"/></name> <operator pos:line="73" pos:column="67">-<pos:position pos:line="73" pos:column="68"/></operator> <name pos:line="73" pos:column="69">p<pos:position pos:line="73" pos:column="70"/></name></expr></argument>)<pos:position pos:line="73" pos:column="71"/></argument_list></call><operator pos:line="73" pos:column="71">)<pos:position pos:line="73" pos:column="72"/></operator> <operator pos:line="73" pos:column="73">!=<pos:position pos:line="73" pos:column="75"/></operator> <name pos:line="73" pos:column="76">NULL<pos:position pos:line="73" pos:column="80"/></name></expr>)<pos:position pos:line="73" pos:column="81"/></condition> <block pos:line="73" pos:column="82">{
                        <expr_stmt><expr><operator pos:line="74" pos:column="25">*<pos:position pos:line="74" pos:column="26"/></operator><name pos:line="74" pos:column="26">p<pos:position pos:line="74" pos:column="27"/></name> <operator pos:line="74" pos:column="28">=<pos:position pos:line="74" pos:column="29"/></operator> <literal type="char" pos:line="74" pos:column="30">' '<pos:position pos:line="74" pos:column="33"/></literal></expr>;<pos:position pos:line="74" pos:column="34"/></expr_stmt>
                        <expr_stmt><expr><operator pos:line="75" pos:column="25">++<pos:position pos:line="75" pos:column="27"/></operator><name pos:line="75" pos:column="27">p<pos:position pos:line="75" pos:column="28"/></name></expr>;<pos:position pos:line="75" pos:column="29"/></expr_stmt>
                    }<pos:position pos:line="76" pos:column="22"/></block></while>
                }<pos:position pos:line="77" pos:column="18"/></block></then> <else pos:line="77" pos:column="19">else <block pos:line="77" pos:column="24">{
                    <expr_stmt><expr><call><name pos:line="78" pos:column="21">PROF_stop<pos:position pos:line="78" pos:column="30"/></name><argument_list pos:line="78" pos:column="30">(<argument><expr><name pos:line="78" pos:column="31">HttpHeaderParse<pos:position pos:line="78" pos:column="46"/></name></expr></argument>)<pos:position pos:line="78" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="48"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="79" pos:column="21">clean<pos:position pos:line="79" pos:column="26"/></name><argument_list pos:line="79" pos:column="26">()<pos:position pos:line="79" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="29"/></expr_stmt>
                    <return pos:line="80" pos:column="21">return <expr><literal type="number" pos:line="80" pos:column="28">0<pos:position pos:line="80" pos:column="29"/></literal></expr>;<pos:position pos:line="80" pos:column="30"/></return>
                }<pos:position pos:line="81" pos:column="18"/></block></else></if>
            }<pos:position pos:line="82" pos:column="14"/></block></then></if>

            <if pos:line="84" pos:column="13">if <condition pos:line="84" pos:column="16">(<expr><name pos:line="84" pos:column="17">this_line<pos:position pos:line="84" pos:column="26"/></name> <operator pos:line="84" pos:column="27">+<pos:position pos:line="84" pos:column="28"/></operator> <literal type="number" pos:line="84" pos:column="29">1<pos:position pos:line="84" pos:column="30"/></literal> <operator pos:line="84" pos:column="31">==<pos:position pos:line="84" pos:column="33"/></operator> <name pos:line="84" pos:column="34">field_end<pos:position pos:line="84" pos:column="43"/></name> <operator pos:line="84" pos:column="44">&amp;&amp;<pos:position pos:line="84" pos:column="54"/></operator> <name pos:line="84" pos:column="47">this_line<pos:position pos:line="84" pos:column="56"/></name> <operator pos:line="84" pos:column="57">&gt;<pos:position pos:line="84" pos:column="61"/></operator> <name pos:line="84" pos:column="59">field_start<pos:position pos:line="84" pos:column="70"/></name></expr>)<pos:position pos:line="84" pos:column="71"/></condition><then pos:line="84" pos:column="71"> <block pos:line="84" pos:column="72">{
                <expr_stmt><expr><call><name pos:line="85" pos:column="17">debugs<pos:position pos:line="85" pos:column="23"/></name><argument_list pos:line="85" pos:column="23">(<argument><expr><literal type="number" pos:line="85" pos:column="24">55<pos:position pos:line="85" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="85" pos:column="28">warnOnError<pos:position pos:line="85" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="85" pos:column="41">"WARNING: Blank continuation line in HTTP header {"<pos:position pos:line="85" pos:column="92"/></literal> <operator pos:line="85" pos:column="93">&lt;&lt;<pos:position pos:line="85" pos:column="101"/></operator>
                       <call><name pos:line="86" pos:column="24">getStringPrefix<pos:position pos:line="86" pos:column="39"/></name><argument_list pos:line="86" pos:column="39">(<argument><expr><name pos:line="86" pos:column="40">header_start<pos:position pos:line="86" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="54">hdrLen<pos:position pos:line="86" pos:column="60"/></name></expr></argument>)<pos:position pos:line="86" pos:column="61"/></argument_list></call> <operator pos:line="86" pos:column="62">&lt;&lt;<pos:position pos:line="86" pos:column="70"/></operator> <literal type="string" pos:line="86" pos:column="65">"}"<pos:position pos:line="86" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="70"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="87" pos:column="17">PROF_stop<pos:position pos:line="87" pos:column="26"/></name><argument_list pos:line="87" pos:column="26">(<argument><expr><name pos:line="87" pos:column="27">HttpHeaderParse<pos:position pos:line="87" pos:column="42"/></name></expr></argument>)<pos:position pos:line="87" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="44"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="88" pos:column="17">clean<pos:position pos:line="88" pos:column="22"/></name><argument_list pos:line="88" pos:column="22">()<pos:position pos:line="88" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="25"/></expr_stmt>
                <return pos:line="89" pos:column="17">return <expr><literal type="number" pos:line="89" pos:column="24">0<pos:position pos:line="89" pos:column="25"/></literal></expr>;<pos:position pos:line="89" pos:column="26"/></return>
            }<pos:position pos:line="90" pos:column="14"/></block></then></if>
        }<pos:position pos:line="91" pos:column="10"/></block> while <condition pos:line="91" pos:column="17">(<expr><name pos:line="91" pos:column="18">field_ptr<pos:position pos:line="91" pos:column="27"/></name> <operator pos:line="91" pos:column="28">&lt;<pos:position pos:line="91" pos:column="32"/></operator> <name pos:line="91" pos:column="30">header_end<pos:position pos:line="91" pos:column="40"/></name> <operator pos:line="91" pos:column="41">&amp;&amp;<pos:position pos:line="91" pos:column="51"/></operator> <operator pos:line="91" pos:column="44">(<pos:position pos:line="91" pos:column="45"/></operator><operator pos:line="91" pos:column="45">*<pos:position pos:line="91" pos:column="46"/></operator><name pos:line="91" pos:column="46">field_ptr<pos:position pos:line="91" pos:column="55"/></name> <operator pos:line="91" pos:column="56">==<pos:position pos:line="91" pos:column="58"/></operator> <literal type="char" pos:line="91" pos:column="59">' '<pos:position pos:line="91" pos:column="62"/></literal> <operator pos:line="91" pos:column="63">||<pos:position pos:line="91" pos:column="65"/></operator> <operator pos:line="91" pos:column="66">*<pos:position pos:line="91" pos:column="67"/></operator><name pos:line="91" pos:column="67">field_ptr<pos:position pos:line="91" pos:column="76"/></name> <operator pos:line="91" pos:column="77">==<pos:position pos:line="91" pos:column="79"/></operator> <literal type="char" pos:line="91" pos:column="80">'\t'<pos:position pos:line="91" pos:column="84"/></literal><operator pos:line="91" pos:column="84">)<pos:position pos:line="91" pos:column="85"/></operator></expr>)<pos:position pos:line="91" pos:column="86"/></condition>;<pos:position pos:line="91" pos:column="87"/></do>

        <if pos:line="93" pos:column="9">if <condition pos:line="93" pos:column="12">(<expr><name pos:line="93" pos:column="13">field_start<pos:position pos:line="93" pos:column="24"/></name> <operator pos:line="93" pos:column="25">==<pos:position pos:line="93" pos:column="27"/></operator> <name pos:line="93" pos:column="28">field_end<pos:position pos:line="93" pos:column="37"/></name></expr>)<pos:position pos:line="93" pos:column="38"/></condition><then pos:line="93" pos:column="38"> <block pos:line="93" pos:column="39">{
            <if pos:line="94" pos:column="13">if <condition pos:line="94" pos:column="16">(<expr><name pos:line="94" pos:column="17">field_ptr<pos:position pos:line="94" pos:column="26"/></name> <operator pos:line="94" pos:column="27">&lt;<pos:position pos:line="94" pos:column="31"/></operator> <name pos:line="94" pos:column="29">header_end<pos:position pos:line="94" pos:column="39"/></name></expr>)<pos:position pos:line="94" pos:column="40"/></condition><then pos:line="94" pos:column="40"> <block pos:line="94" pos:column="41">{
                <expr_stmt><expr><call><name pos:line="95" pos:column="17">debugs<pos:position pos:line="95" pos:column="23"/></name><argument_list pos:line="95" pos:column="23">(<argument><expr><literal type="number" pos:line="95" pos:column="24">55<pos:position pos:line="95" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="95" pos:column="28">warnOnError<pos:position pos:line="95" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="95" pos:column="41">"WARNING: unparseable HTTP header field near {"<pos:position pos:line="95" pos:column="88"/></literal> <operator pos:line="95" pos:column="89">&lt;&lt;<pos:position pos:line="95" pos:column="97"/></operator>
                       <call><name pos:line="96" pos:column="24">getStringPrefix<pos:position pos:line="96" pos:column="39"/></name><argument_list pos:line="96" pos:column="39">(<argument><expr><name pos:line="96" pos:column="40">field_start<pos:position pos:line="96" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="53">hdrLen<pos:position pos:line="96" pos:column="59"/></name><operator pos:line="96" pos:column="59">-<pos:position pos:line="96" pos:column="60"/></operator><operator pos:line="96" pos:column="60">(<pos:position pos:line="96" pos:column="61"/></operator><name pos:line="96" pos:column="61">field_start<pos:position pos:line="96" pos:column="72"/></name><operator pos:line="96" pos:column="72">-<pos:position pos:line="96" pos:column="73"/></operator><name pos:line="96" pos:column="73">header_start<pos:position pos:line="96" pos:column="85"/></name><operator pos:line="96" pos:column="85">)<pos:position pos:line="96" pos:column="86"/></operator></expr></argument>)<pos:position pos:line="96" pos:column="87"/></argument_list></call> <operator pos:line="96" pos:column="88">&lt;&lt;<pos:position pos:line="96" pos:column="96"/></operator> <literal type="string" pos:line="96" pos:column="91">"}"<pos:position pos:line="96" pos:column="94"/></literal></expr></argument>)<pos:position pos:line="96" pos:column="95"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="96"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="97" pos:column="17">PROF_stop<pos:position pos:line="97" pos:column="26"/></name><argument_list pos:line="97" pos:column="26">(<argument><expr><name pos:line="97" pos:column="27">HttpHeaderParse<pos:position pos:line="97" pos:column="42"/></name></expr></argument>)<pos:position pos:line="97" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="44"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="98" pos:column="17">clean<pos:position pos:line="98" pos:column="22"/></name><argument_list pos:line="98" pos:column="22">()<pos:position pos:line="98" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="25"/></expr_stmt>
                <return pos:line="99" pos:column="17">return <expr><literal type="number" pos:line="99" pos:column="24">0<pos:position pos:line="99" pos:column="25"/></literal></expr>;<pos:position pos:line="99" pos:column="26"/></return>
            }<pos:position pos:line="100" pos:column="14"/></block></then></if>

            <break pos:line="102" pos:column="13">break;<pos:position pos:line="102" pos:column="19"/></break>      <comment type="block" pos:line="102" pos:column="25">/* terminating blank line */</comment>
        }<pos:position pos:line="103" pos:column="10"/></block></then></if>

        <decl_stmt><decl><type><name pos:line="105" pos:column="9">HttpHeaderEntry<pos:position pos:line="105" pos:column="24"/></name> <modifier pos:line="105" pos:column="25">*<pos:position pos:line="105" pos:column="26"/></modifier></type><name pos:line="105" pos:column="26">e<pos:position pos:line="105" pos:column="27"/></name></decl>;<pos:position pos:line="105" pos:column="28"/></decl_stmt>
        <if pos:line="106" pos:column="9">if <condition pos:line="106" pos:column="12">(<expr><operator pos:line="106" pos:column="13">(<pos:position pos:line="106" pos:column="14"/></operator><name pos:line="106" pos:column="14">e<pos:position pos:line="106" pos:column="15"/></name> <operator pos:line="106" pos:column="16">=<pos:position pos:line="106" pos:column="17"/></operator> <call><name><name pos:line="106" pos:column="18">HttpHeaderEntry<pos:position pos:line="106" pos:column="33"/></name><operator pos:line="106" pos:column="33">::<pos:position pos:line="106" pos:column="35"/></operator><name pos:line="106" pos:column="35">parse<pos:position pos:line="106" pos:column="40"/></name></name><argument_list pos:line="106" pos:column="40">(<argument><expr><name pos:line="106" pos:column="41">field_start<pos:position pos:line="106" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="54">field_end<pos:position pos:line="106" pos:column="63"/></name></expr></argument>)<pos:position pos:line="106" pos:column="64"/></argument_list></call><operator pos:line="106" pos:column="64">)<pos:position pos:line="106" pos:column="65"/></operator> <operator pos:line="106" pos:column="66">==<pos:position pos:line="106" pos:column="68"/></operator> <name pos:line="106" pos:column="69">NULL<pos:position pos:line="106" pos:column="73"/></name></expr>)<pos:position pos:line="106" pos:column="74"/></condition><then pos:line="106" pos:column="74"> <block pos:line="106" pos:column="75">{
            <expr_stmt><expr><call><name pos:line="107" pos:column="13">debugs<pos:position pos:line="107" pos:column="19"/></name><argument_list pos:line="107" pos:column="19">(<argument><expr><literal type="number" pos:line="107" pos:column="20">55<pos:position pos:line="107" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="107" pos:column="24">warnOnError<pos:position pos:line="107" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="107" pos:column="37">"WARNING: unparseable HTTP header field {"<pos:position pos:line="107" pos:column="79"/></literal> <operator pos:line="107" pos:column="80">&lt;&lt;<pos:position pos:line="107" pos:column="88"/></operator>
                   <call><name pos:line="108" pos:column="20">getStringPrefix<pos:position pos:line="108" pos:column="35"/></name><argument_list pos:line="108" pos:column="35">(<argument><expr><name pos:line="108" pos:column="36">field_start<pos:position pos:line="108" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="49">field_end<pos:position pos:line="108" pos:column="58"/></name><operator pos:line="108" pos:column="58">-<pos:position pos:line="108" pos:column="59"/></operator><name pos:line="108" pos:column="59">field_start<pos:position pos:line="108" pos:column="70"/></name></expr></argument>)<pos:position pos:line="108" pos:column="71"/></argument_list></call> <operator pos:line="108" pos:column="72">&lt;&lt;<pos:position pos:line="108" pos:column="80"/></operator> <literal type="string" pos:line="108" pos:column="75">"}"<pos:position pos:line="108" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="108" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="80"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="109" pos:column="13">debugs<pos:position pos:line="109" pos:column="19"/></name><argument_list pos:line="109" pos:column="19">(<argument><expr><literal type="number" pos:line="109" pos:column="20">55<pos:position pos:line="109" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="109" pos:column="24">warnOnError<pos:position pos:line="109" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="109" pos:column="37">" in {"<pos:position pos:line="109" pos:column="44"/></literal> <operator pos:line="109" pos:column="45">&lt;&lt;<pos:position pos:line="109" pos:column="53"/></operator> <call><name pos:line="109" pos:column="48">getStringPrefix<pos:position pos:line="109" pos:column="63"/></name><argument_list pos:line="109" pos:column="63">(<argument><expr><name pos:line="109" pos:column="64">header_start<pos:position pos:line="109" pos:column="76"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="78">hdrLen<pos:position pos:line="109" pos:column="84"/></name></expr></argument>)<pos:position pos:line="109" pos:column="85"/></argument_list></call> <operator pos:line="109" pos:column="86">&lt;&lt;<pos:position pos:line="109" pos:column="94"/></operator> <literal type="string" pos:line="109" pos:column="89">"}"<pos:position pos:line="109" pos:column="92"/></literal></expr></argument>)<pos:position pos:line="109" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="94"/></expr_stmt>

            <if pos:line="111" pos:column="13">if <condition pos:line="111" pos:column="16">(<expr><name><name pos:line="111" pos:column="17">Config<pos:position pos:line="111" pos:column="23"/></name><operator pos:line="111" pos:column="23">.<pos:position pos:line="111" pos:column="24"/></operator><name pos:line="111" pos:column="24">onoff<pos:position pos:line="111" pos:column="29"/></name><operator pos:line="111" pos:column="29">.<pos:position pos:line="111" pos:column="30"/></operator><name pos:line="111" pos:column="30">relaxed_header_parser<pos:position pos:line="111" pos:column="51"/></name></name></expr>)<pos:position pos:line="111" pos:column="52"/></condition><then pos:line="111" pos:column="52">
                <block type="pseudo"><continue pos:line="112" pos:column="17">continue;<pos:position pos:line="112" pos:column="26"/></continue></block></then></if>

            <expr_stmt><expr><call><name pos:line="114" pos:column="13">PROF_stop<pos:position pos:line="114" pos:column="22"/></name><argument_list pos:line="114" pos:column="22">(<argument><expr><name pos:line="114" pos:column="23">HttpHeaderParse<pos:position pos:line="114" pos:column="38"/></name></expr></argument>)<pos:position pos:line="114" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="40"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="115" pos:column="13">clean<pos:position pos:line="115" pos:column="18"/></name><argument_list pos:line="115" pos:column="18">()<pos:position pos:line="115" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="21"/></expr_stmt>
            <return pos:line="116" pos:column="13">return <expr><literal type="number" pos:line="116" pos:column="20">0<pos:position pos:line="116" pos:column="21"/></literal></expr>;<pos:position pos:line="116" pos:column="22"/></return>
        }<pos:position pos:line="117" pos:column="10"/></block></then></if>

        <if pos:line="119" pos:column="9">if <condition pos:line="119" pos:column="12">(<expr><name><name pos:line="119" pos:column="13">e<pos:position pos:line="119" pos:column="14"/></name><operator pos:line="119" pos:column="14">-&gt;<pos:position pos:line="119" pos:column="19"/></operator><name pos:line="119" pos:column="16">id<pos:position pos:line="119" pos:column="18"/></name></name> <operator pos:line="119" pos:column="19">==<pos:position pos:line="119" pos:column="21"/></operator> <name><name pos:line="119" pos:column="22">Http<pos:position pos:line="119" pos:column="26"/></name><operator pos:line="119" pos:column="26">::<pos:position pos:line="119" pos:column="28"/></operator><name pos:line="119" pos:column="28">HdrType<pos:position pos:line="119" pos:column="35"/></name><operator pos:line="119" pos:column="35">::<pos:position pos:line="119" pos:column="37"/></operator><name pos:line="119" pos:column="37">CONTENT_LENGTH<pos:position pos:line="119" pos:column="51"/></name></name> <operator pos:line="119" pos:column="52">&amp;&amp;<pos:position pos:line="119" pos:column="62"/></operator> <operator pos:line="119" pos:column="55">!<pos:position pos:line="119" pos:column="56"/></operator><call><name><name pos:line="119" pos:column="56">clen<pos:position pos:line="119" pos:column="60"/></name><operator pos:line="119" pos:column="60">.<pos:position pos:line="119" pos:column="61"/></operator><name pos:line="119" pos:column="61">checkField<pos:position pos:line="119" pos:column="71"/></name></name><argument_list pos:line="119" pos:column="71">(<argument><expr><name><name pos:line="119" pos:column="72">e<pos:position pos:line="119" pos:column="73"/></name><operator pos:line="119" pos:column="73">-&gt;<pos:position pos:line="119" pos:column="78"/></operator><name pos:line="119" pos:column="75">value<pos:position pos:line="119" pos:column="80"/></name></name></expr></argument>)<pos:position pos:line="119" pos:column="81"/></argument_list></call></expr>)<pos:position pos:line="119" pos:column="82"/></condition><then pos:line="119" pos:column="82"> <block pos:line="119" pos:column="83">{
            <expr_stmt><expr><operator pos:line="120" pos:column="13">delete<pos:position pos:line="120" pos:column="19"/></operator> <name pos:line="120" pos:column="20">e<pos:position pos:line="120" pos:column="21"/></name></expr>;<pos:position pos:line="120" pos:column="22"/></expr_stmt>

            <if pos:line="122" pos:column="13">if <condition pos:line="122" pos:column="16">(<expr><name><name pos:line="122" pos:column="17">Config<pos:position pos:line="122" pos:column="23"/></name><operator pos:line="122" pos:column="23">.<pos:position pos:line="122" pos:column="24"/></operator><name pos:line="122" pos:column="24">onoff<pos:position pos:line="122" pos:column="29"/></name><operator pos:line="122" pos:column="29">.<pos:position pos:line="122" pos:column="30"/></operator><name pos:line="122" pos:column="30">relaxed_header_parser<pos:position pos:line="122" pos:column="51"/></name></name></expr>)<pos:position pos:line="122" pos:column="52"/></condition><then pos:line="122" pos:column="52">
                <block type="pseudo"><continue pos:line="123" pos:column="17">continue;<pos:position pos:line="123" pos:column="26"/></continue></block></then></if> <comment type="line" pos:line="123" pos:column="27">// clen has printed any necessary warnings</comment>

            <expr_stmt><expr><call><name pos:line="125" pos:column="13">PROF_stop<pos:position pos:line="125" pos:column="22"/></name><argument_list pos:line="125" pos:column="22">(<argument><expr><name pos:line="125" pos:column="23">HttpHeaderParse<pos:position pos:line="125" pos:column="38"/></name></expr></argument>)<pos:position pos:line="125" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="40"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="126" pos:column="13">clean<pos:position pos:line="126" pos:column="18"/></name><argument_list pos:line="126" pos:column="18">()<pos:position pos:line="126" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="21"/></expr_stmt>
            <return pos:line="127" pos:column="13">return <expr><literal type="number" pos:line="127" pos:column="20">0<pos:position pos:line="127" pos:column="21"/></literal></expr>;<pos:position pos:line="127" pos:column="22"/></return>
        }<pos:position pos:line="128" pos:column="10"/></block></then></if>

        <if pos:line="130" pos:column="9">if <condition pos:line="130" pos:column="12">(<expr><name><name pos:line="130" pos:column="13">e<pos:position pos:line="130" pos:column="14"/></name><operator pos:line="130" pos:column="14">-&gt;<pos:position pos:line="130" pos:column="19"/></operator><name pos:line="130" pos:column="16">id<pos:position pos:line="130" pos:column="18"/></name></name> <operator pos:line="130" pos:column="19">==<pos:position pos:line="130" pos:column="21"/></operator> <name><name pos:line="130" pos:column="22">Http<pos:position pos:line="130" pos:column="26"/></name><operator pos:line="130" pos:column="26">::<pos:position pos:line="130" pos:column="28"/></operator><name pos:line="130" pos:column="28">HdrType<pos:position pos:line="130" pos:column="35"/></name><operator pos:line="130" pos:column="35">::<pos:position pos:line="130" pos:column="37"/></operator><name pos:line="130" pos:column="37">OTHER<pos:position pos:line="130" pos:column="42"/></name></name> <operator pos:line="130" pos:column="43">&amp;&amp;<pos:position pos:line="130" pos:column="53"/></operator> <call><name pos:line="130" pos:column="46">stringHasWhitespace<pos:position pos:line="130" pos:column="65"/></name><argument_list pos:line="130" pos:column="65">(<argument><expr><call><name><name pos:line="130" pos:column="66">e<pos:position pos:line="130" pos:column="67"/></name><operator pos:line="130" pos:column="67">-&gt;<pos:position pos:line="130" pos:column="72"/></operator><name pos:line="130" pos:column="69">name<pos:position pos:line="130" pos:column="73"/></name><operator pos:line="130" pos:column="73">.<pos:position pos:line="130" pos:column="74"/></operator><name pos:line="130" pos:column="74">termedBuf<pos:position pos:line="130" pos:column="83"/></name></name><argument_list pos:line="130" pos:column="83">()<pos:position pos:line="130" pos:column="85"/></argument_list></call></expr></argument>)<pos:position pos:line="130" pos:column="86"/></argument_list></call></expr>)<pos:position pos:line="130" pos:column="87"/></condition><then pos:line="130" pos:column="87"> <block pos:line="130" pos:column="88">{
            <expr_stmt><expr><call><name pos:line="131" pos:column="13">debugs<pos:position pos:line="131" pos:column="19"/></name><argument_list pos:line="131" pos:column="19">(<argument><expr><literal type="number" pos:line="131" pos:column="20">55<pos:position pos:line="131" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="131" pos:column="24">warnOnError<pos:position pos:line="131" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="131" pos:column="37">"WARNING: found whitespace in HTTP header name {"<pos:position pos:line="131" pos:column="86"/></literal> <operator pos:line="131" pos:column="87">&lt;&lt;<pos:position pos:line="131" pos:column="95"/></operator>
                   <call><name pos:line="132" pos:column="20">getStringPrefix<pos:position pos:line="132" pos:column="35"/></name><argument_list pos:line="132" pos:column="35">(<argument><expr><name pos:line="132" pos:column="36">field_start<pos:position pos:line="132" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="49">field_end<pos:position pos:line="132" pos:column="58"/></name><operator pos:line="132" pos:column="58">-<pos:position pos:line="132" pos:column="59"/></operator><name pos:line="132" pos:column="59">field_start<pos:position pos:line="132" pos:column="70"/></name></expr></argument>)<pos:position pos:line="132" pos:column="71"/></argument_list></call> <operator pos:line="132" pos:column="72">&lt;&lt;<pos:position pos:line="132" pos:column="80"/></operator> <literal type="string" pos:line="132" pos:column="75">"}"<pos:position pos:line="132" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="132" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="80"/></expr_stmt>

            <if pos:line="134" pos:column="13">if <condition pos:line="134" pos:column="16">(<expr><operator pos:line="134" pos:column="17">!<pos:position pos:line="134" pos:column="18"/></operator><name><name pos:line="134" pos:column="18">Config<pos:position pos:line="134" pos:column="24"/></name><operator pos:line="134" pos:column="24">.<pos:position pos:line="134" pos:column="25"/></operator><name pos:line="134" pos:column="25">onoff<pos:position pos:line="134" pos:column="30"/></name><operator pos:line="134" pos:column="30">.<pos:position pos:line="134" pos:column="31"/></operator><name pos:line="134" pos:column="31">relaxed_header_parser<pos:position pos:line="134" pos:column="52"/></name></name></expr>)<pos:position pos:line="134" pos:column="53"/></condition><then pos:line="134" pos:column="53"> <block pos:line="134" pos:column="54">{
                <expr_stmt><expr><operator pos:line="135" pos:column="17">delete<pos:position pos:line="135" pos:column="23"/></operator> <name pos:line="135" pos:column="24">e<pos:position pos:line="135" pos:column="25"/></name></expr>;<pos:position pos:line="135" pos:column="26"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="136" pos:column="17">PROF_stop<pos:position pos:line="136" pos:column="26"/></name><argument_list pos:line="136" pos:column="26">(<argument><expr><name pos:line="136" pos:column="27">HttpHeaderParse<pos:position pos:line="136" pos:column="42"/></name></expr></argument>)<pos:position pos:line="136" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="44"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="137" pos:column="17">clean<pos:position pos:line="137" pos:column="22"/></name><argument_list pos:line="137" pos:column="22">()<pos:position pos:line="137" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="25"/></expr_stmt>
                <return pos:line="138" pos:column="17">return <expr><literal type="number" pos:line="138" pos:column="24">0<pos:position pos:line="138" pos:column="25"/></literal></expr>;<pos:position pos:line="138" pos:column="26"/></return>
            }<pos:position pos:line="139" pos:column="14"/></block></then></if>
        }<pos:position pos:line="140" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="142" pos:column="9">addEntry<pos:position pos:line="142" pos:column="17"/></name><argument_list pos:line="142" pos:column="17">(<argument><expr><name pos:line="142" pos:column="18">e<pos:position pos:line="142" pos:column="19"/></name></expr></argument>)<pos:position pos:line="142" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="143" pos:column="6"/></block></while>

    <if pos:line="145" pos:column="5">if <condition pos:line="145" pos:column="8">(<expr><name><name pos:line="145" pos:column="9">clen<pos:position pos:line="145" pos:column="13"/></name><operator pos:line="145" pos:column="13">.<pos:position pos:line="145" pos:column="14"/></operator><name pos:line="145" pos:column="14">headerWideProblem<pos:position pos:line="145" pos:column="31"/></name></name></expr>)<pos:position pos:line="145" pos:column="32"/></condition><then pos:line="145" pos:column="32"> <block pos:line="145" pos:column="33">{
        <expr_stmt><expr><call><name pos:line="146" pos:column="9">debugs<pos:position pos:line="146" pos:column="15"/></name><argument_list pos:line="146" pos:column="15">(<argument><expr><literal type="number" pos:line="146" pos:column="16">55<pos:position pos:line="146" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="146" pos:column="20">warnOnError<pos:position pos:line="146" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="146" pos:column="33">"WARNING: "<pos:position pos:line="146" pos:column="44"/></literal> <operator pos:line="146" pos:column="45">&lt;&lt;<pos:position pos:line="146" pos:column="53"/></operator> <name><name pos:line="146" pos:column="48">clen<pos:position pos:line="146" pos:column="52"/></name><operator pos:line="146" pos:column="52">.<pos:position pos:line="146" pos:column="53"/></operator><name pos:line="146" pos:column="53">headerWideProblem<pos:position pos:line="146" pos:column="70"/></name></name> <operator pos:line="146" pos:column="71">&lt;&lt;<pos:position pos:line="146" pos:column="79"/></operator>
               <literal type="string" pos:line="147" pos:column="16">" Content-Length field values in"<pos:position pos:line="147" pos:column="49"/></literal> <operator pos:line="147" pos:column="50">&lt;&lt;<pos:position pos:line="147" pos:column="58"/></operator>
               <call><name pos:line="148" pos:column="16">Raw<pos:position pos:line="148" pos:column="19"/></name><argument_list pos:line="148" pos:column="19">(<argument><expr><literal type="string" pos:line="148" pos:column="20">"header"<pos:position pos:line="148" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="148" pos:column="30">header_start<pos:position pos:line="148" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="148" pos:column="44">hdrLen<pos:position pos:line="148" pos:column="50"/></name></expr></argument>)<pos:position pos:line="148" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="148" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="53"/></expr_stmt>
    }<pos:position pos:line="149" pos:column="6"/></block></then></if>

    <if pos:line="151" pos:column="5">if <condition pos:line="151" pos:column="8">(<expr><call><name pos:line="151" pos:column="9">chunked<pos:position pos:line="151" pos:column="16"/></name><argument_list pos:line="151" pos:column="16">()<pos:position pos:line="151" pos:column="18"/></argument_list></call></expr>)<pos:position pos:line="151" pos:column="19"/></condition><then pos:line="151" pos:column="19"> <block pos:line="151" pos:column="20">{
        <comment type="line" pos:line="152" pos:column="9">// RFC 2616 section 4.4: ignore Content-Length with Transfer-Encoding</comment>
        <comment type="line" pos:line="153" pos:column="9">// RFC 7230 section 3.3.3 #3: Transfer-Encoding overwrites Content-Length</comment>
        <expr_stmt><expr><call><name pos:line="154" pos:column="9">delById<pos:position pos:line="154" pos:column="16"/></name><argument_list pos:line="154" pos:column="16">(<argument><expr><name><name pos:line="154" pos:column="17">Http<pos:position pos:line="154" pos:column="21"/></name><operator pos:line="154" pos:column="21">::<pos:position pos:line="154" pos:column="23"/></operator><name pos:line="154" pos:column="23">HdrType<pos:position pos:line="154" pos:column="30"/></name><operator pos:line="154" pos:column="30">::<pos:position pos:line="154" pos:column="32"/></operator><name pos:line="154" pos:column="32">CONTENT_LENGTH<pos:position pos:line="154" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="154" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="48"/></expr_stmt>
        <comment type="line" pos:line="155" pos:column="9">// and clen state becomes irrelevant</comment>
    }<pos:position pos:line="156" pos:column="6"/></block></then> <elseif pos:line="156" pos:column="7">else <if pos:line="156" pos:column="12">if <condition pos:line="156" pos:column="15">(<expr><name><name pos:line="156" pos:column="16">clen<pos:position pos:line="156" pos:column="20"/></name><operator pos:line="156" pos:column="20">.<pos:position pos:line="156" pos:column="21"/></operator><name pos:line="156" pos:column="21">sawBad<pos:position pos:line="156" pos:column="27"/></name></name></expr>)<pos:position pos:line="156" pos:column="28"/></condition><then pos:line="156" pos:column="28"> <block pos:line="156" pos:column="29">{
        <comment type="line" pos:line="157" pos:column="9">// ensure our callers do not accidentally see bad Content-Length values</comment>
        <expr_stmt><expr><call><name pos:line="158" pos:column="9">delById<pos:position pos:line="158" pos:column="16"/></name><argument_list pos:line="158" pos:column="16">(<argument><expr><name><name pos:line="158" pos:column="17">Http<pos:position pos:line="158" pos:column="21"/></name><operator pos:line="158" pos:column="21">::<pos:position pos:line="158" pos:column="23"/></operator><name pos:line="158" pos:column="23">HdrType<pos:position pos:line="158" pos:column="30"/></name><operator pos:line="158" pos:column="30">::<pos:position pos:line="158" pos:column="32"/></operator><name pos:line="158" pos:column="32">CONTENT_LENGTH<pos:position pos:line="158" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="158" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="158" pos:column="48"/></expr_stmt>
        <expr_stmt><expr><name pos:line="159" pos:column="9">conflictingContentLength_<pos:position pos:line="159" pos:column="34"/></name> <operator pos:line="159" pos:column="35">=<pos:position pos:line="159" pos:column="36"/></operator> <literal type="boolean" pos:line="159" pos:column="37">true<pos:position pos:line="159" pos:column="41"/></literal></expr>;<pos:position pos:line="159" pos:column="42"/></expr_stmt> <comment type="line" pos:line="159" pos:column="43">// TODO: Rename to badContentLength_.</comment>
    }<pos:position pos:line="160" pos:column="6"/></block></then></if></elseif> <elseif pos:line="160" pos:column="7">else <if pos:line="160" pos:column="12">if <condition pos:line="160" pos:column="15">(<expr><name><name pos:line="160" pos:column="16">clen<pos:position pos:line="160" pos:column="20"/></name><operator pos:line="160" pos:column="20">.<pos:position pos:line="160" pos:column="21"/></operator><name pos:line="160" pos:column="21">needsSanitizing<pos:position pos:line="160" pos:column="36"/></name></name></expr>)<pos:position pos:line="160" pos:column="37"/></condition><then pos:line="160" pos:column="37"> <block pos:line="160" pos:column="38">{
        <comment type="line" pos:line="161" pos:column="9">// RFC 7230 section 3.3.2: MUST either reject or ... [sanitize];</comment>
        <comment type="line" pos:line="162" pos:column="9">// ensure our callers see a clean Content-Length value or none at all</comment>
        <expr_stmt><expr><call><name pos:line="163" pos:column="9">delById<pos:position pos:line="163" pos:column="16"/></name><argument_list pos:line="163" pos:column="16">(<argument><expr><name><name pos:line="163" pos:column="17">Http<pos:position pos:line="163" pos:column="21"/></name><operator pos:line="163" pos:column="21">::<pos:position pos:line="163" pos:column="23"/></operator><name pos:line="163" pos:column="23">HdrType<pos:position pos:line="163" pos:column="30"/></name><operator pos:line="163" pos:column="30">::<pos:position pos:line="163" pos:column="32"/></operator><name pos:line="163" pos:column="32">CONTENT_LENGTH<pos:position pos:line="163" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="163" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="163" pos:column="48"/></expr_stmt>
        <if pos:line="164" pos:column="9">if <condition pos:line="164" pos:column="12">(<expr><name><name pos:line="164" pos:column="13">clen<pos:position pos:line="164" pos:column="17"/></name><operator pos:line="164" pos:column="17">.<pos:position pos:line="164" pos:column="18"/></operator><name pos:line="164" pos:column="18">sawGood<pos:position pos:line="164" pos:column="25"/></name></name></expr>)<pos:position pos:line="164" pos:column="26"/></condition><then pos:line="164" pos:column="26"> <block pos:line="164" pos:column="27">{
            <expr_stmt><expr><call><name pos:line="165" pos:column="13">putInt64<pos:position pos:line="165" pos:column="21"/></name><argument_list pos:line="165" pos:column="21">(<argument><expr><name><name pos:line="165" pos:column="22">Http<pos:position pos:line="165" pos:column="26"/></name><operator pos:line="165" pos:column="26">::<pos:position pos:line="165" pos:column="28"/></operator><name pos:line="165" pos:column="28">HdrType<pos:position pos:line="165" pos:column="35"/></name><operator pos:line="165" pos:column="35">::<pos:position pos:line="165" pos:column="37"/></operator><name pos:line="165" pos:column="37">CONTENT_LENGTH<pos:position pos:line="165" pos:column="51"/></name></name></expr></argument>, <argument><expr><name><name pos:line="165" pos:column="53">clen<pos:position pos:line="165" pos:column="57"/></name><operator pos:line="165" pos:column="57">.<pos:position pos:line="165" pos:column="58"/></operator><name pos:line="165" pos:column="58">value<pos:position pos:line="165" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="165" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="165" pos:column="65"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="166" pos:column="13">debugs<pos:position pos:line="166" pos:column="19"/></name><argument_list pos:line="166" pos:column="19">(<argument><expr><literal type="number" pos:line="166" pos:column="20">55<pos:position pos:line="166" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="166" pos:column="24">5<pos:position pos:line="166" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="166" pos:column="27">"sanitized Content-Length to be "<pos:position pos:line="166" pos:column="60"/></literal> <operator pos:line="166" pos:column="61">&lt;&lt;<pos:position pos:line="166" pos:column="69"/></operator> <name><name pos:line="166" pos:column="64">clen<pos:position pos:line="166" pos:column="68"/></name><operator pos:line="166" pos:column="68">.<pos:position pos:line="166" pos:column="69"/></operator><name pos:line="166" pos:column="69">value<pos:position pos:line="166" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="166" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="76"/></expr_stmt>
        }<pos:position pos:line="167" pos:column="10"/></block></then></if>
    }<pos:position pos:line="168" pos:column="6"/></block></then></if></elseif></if>

    <expr_stmt><expr><call><name pos:line="170" pos:column="5">PROF_stop<pos:position pos:line="170" pos:column="14"/></name><argument_list pos:line="170" pos:column="14">(<argument><expr><name pos:line="170" pos:column="15">HttpHeaderParse<pos:position pos:line="170" pos:column="30"/></name></expr></argument>)<pos:position pos:line="170" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="170" pos:column="32"/></expr_stmt>
    <return pos:line="171" pos:column="5">return <expr><literal type="number" pos:line="171" pos:column="12">1<pos:position pos:line="171" pos:column="13"/></literal></expr>;<pos:position pos:line="171" pos:column="14"/></return>           <comment type="block" pos:line="171" pos:column="25">/* even if no fields where found, it is a valid header */</comment>
}<pos:position pos:line="172" pos:column="2"/></block></function></unit>
