<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_function_1063.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">mainParseOptions<pos:position pos:line="2" pos:column="17"/></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><name pos:line="2" pos:column="18">int<pos:position pos:line="2" pos:column="21"/></name></type> <name pos:line="2" pos:column="22">argc<pos:position pos:line="2" pos:column="26"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="28">char<pos:position pos:line="2" pos:column="32"/></name> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier></type><name><name pos:line="2" pos:column="34">argv<pos:position pos:line="2" pos:column="38"/></name><index pos:line="2" pos:column="38">[]<pos:position pos:line="2" pos:column="40"/></index></name></decl></parameter>)<pos:position pos:line="2" pos:column="41"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><specifier pos:line="4" pos:column="5">extern<pos:position pos:line="4" pos:column="11"/></specifier> <type><name pos:line="4" pos:column="12">char<pos:position pos:line="4" pos:column="16"/></name> <modifier pos:line="4" pos:column="17">*<pos:position pos:line="4" pos:column="18"/></modifier></type><name pos:line="4" pos:column="18">optarg<pos:position pos:line="4" pos:column="24"/></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">c<pos:position pos:line="5" pos:column="10"/></name></decl>;<pos:position pos:line="5" pos:column="11"/></decl_stmt>

<cpp:if pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">if<pos:position pos:line="7" pos:column="4"/></cpp:directive> <expr><name pos:line="7" pos:column="5">USE_WIN32_SERVICE<pos:position pos:line="7" pos:column="22"/></name></expr></cpp:if>
    <while pos:line="8" pos:column="5">while <condition pos:line="8" pos:column="11">(<expr><operator pos:line="8" pos:column="12">(<pos:position pos:line="8" pos:column="13"/></operator><name pos:line="8" pos:column="13">c<pos:position pos:line="8" pos:column="14"/></name> <operator pos:line="8" pos:column="15">=<pos:position pos:line="8" pos:column="16"/></operator> <call><name pos:line="8" pos:column="17">getopt<pos:position pos:line="8" pos:column="23"/></name><argument_list pos:line="8" pos:column="23">(<argument><expr><name pos:line="8" pos:column="24">argc<pos:position pos:line="8" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="30">argv<pos:position pos:line="8" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="36">"CDFNO:RSVYXa:d:f:hik:m::n:rsl:u:vz?"<pos:position pos:line="8" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="74"/></argument_list></call><operator pos:line="8" pos:column="74">)<pos:position pos:line="8" pos:column="75"/></operator> <operator pos:line="8" pos:column="76">!=<pos:position pos:line="8" pos:column="78"/></operator> <operator pos:line="8" pos:column="79">-<pos:position pos:line="8" pos:column="80"/></operator><literal type="number" pos:line="8" pos:column="80">1<pos:position pos:line="8" pos:column="81"/></literal></expr>)<pos:position pos:line="8" pos:column="82"/></condition>
<cpp:else pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">else<pos:position pos:line="9" pos:column="6"/></cpp:directive></cpp:else>
    <block type="pseudo"><while pos:line="10" pos:column="5">while <condition pos:line="10" pos:column="11">(<expr><operator pos:line="10" pos:column="12">(<pos:position pos:line="10" pos:column="13"/></operator><name pos:line="10" pos:column="13">c<pos:position pos:line="10" pos:column="14"/></name> <operator pos:line="10" pos:column="15">=<pos:position pos:line="10" pos:column="16"/></operator> <call><name pos:line="10" pos:column="17">getopt<pos:position pos:line="10" pos:column="23"/></name><argument_list pos:line="10" pos:column="23">(<argument><expr><name pos:line="10" pos:column="24">argc<pos:position pos:line="10" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="30">argv<pos:position pos:line="10" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="36">"CDFNRSYXa:d:f:hk:m::n:sl:u:vz?"<pos:position pos:line="10" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="69"/></argument_list></call><operator pos:line="10" pos:column="69">)<pos:position pos:line="10" pos:column="70"/></operator> <operator pos:line="10" pos:column="71">!=<pos:position pos:line="10" pos:column="73"/></operator> <operator pos:line="10" pos:column="74">-<pos:position pos:line="10" pos:column="75"/></operator><literal type="number" pos:line="10" pos:column="75">1<pos:position pos:line="10" pos:column="76"/></literal></expr>)<pos:position pos:line="10" pos:column="77"/></condition>
<cpp:endif pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">endif<pos:position pos:line="11" pos:column="7"/></cpp:directive></cpp:endif>
    <block pos:line="12" pos:column="5">{

        <switch pos:line="14" pos:column="9">switch <condition pos:line="14" pos:column="16">(<expr><name pos:line="14" pos:column="17">c<pos:position pos:line="14" pos:column="18"/></name></expr>)<pos:position pos:line="14" pos:column="19"/></condition> <block pos:line="14" pos:column="20">{

        <case pos:line="16" pos:column="9">case <expr><literal type="char" pos:line="16" pos:column="14">'C'<pos:position pos:line="16" pos:column="17"/></literal></expr>:<pos:position pos:line="16" pos:column="18"/></case>
            <comment type="block" format="doxygen" pos:line="17" pos:column="13">/** \par C
             * Unset/disabel global option for catchign signals. opt_catch_signals */</comment>
            <expr_stmt><expr><name pos:line="19" pos:column="13">opt_catch_signals<pos:position pos:line="19" pos:column="30"/></name> <operator pos:line="19" pos:column="31">=<pos:position pos:line="19" pos:column="32"/></operator> <literal type="number" pos:line="19" pos:column="33">0<pos:position pos:line="19" pos:column="34"/></literal></expr>;<pos:position pos:line="19" pos:column="35"/></expr_stmt>
            <break pos:line="20" pos:column="13">break;<pos:position pos:line="20" pos:column="19"/></break>

        <case pos:line="22" pos:column="9">case <expr><literal type="char" pos:line="22" pos:column="14">'D'<pos:position pos:line="22" pos:column="17"/></literal></expr>:<pos:position pos:line="22" pos:column="18"/></case>
            <comment type="block" format="doxygen" pos:line="23" pos:column="13">/** \par D
             * OBSOLETE: WAS: override to prevent optional startup DNS tests. */</comment>
            <expr_stmt><expr><call><name pos:line="25" pos:column="13">debugs<pos:position pos:line="25" pos:column="19"/></name><argument_list pos:line="25" pos:column="19">(<argument><expr><literal type="number" pos:line="25" pos:column="20">1<pos:position pos:line="25" pos:column="21"/></literal></expr></argument>,<argument><expr><name pos:line="25" pos:column="22">DBG_CRITICAL<pos:position pos:line="25" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="36">"WARNING: -D command-line option is obsolete."<pos:position pos:line="25" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="84"/></expr_stmt>
            <break pos:line="26" pos:column="13">break;<pos:position pos:line="26" pos:column="19"/></break>

        <case pos:line="28" pos:column="9">case <expr><literal type="char" pos:line="28" pos:column="14">'F'<pos:position pos:line="28" pos:column="17"/></literal></expr>:<pos:position pos:line="28" pos:column="18"/></case>
            <comment type="block" format="doxygen" pos:line="29" pos:column="13">/** \par F
             * Set global option for foreground rebuild. opt_foreground_rebuild */</comment>
            <expr_stmt><expr><name pos:line="31" pos:column="13">opt_foreground_rebuild<pos:position pos:line="31" pos:column="35"/></name> <operator pos:line="31" pos:column="36">=<pos:position pos:line="31" pos:column="37"/></operator> <literal type="number" pos:line="31" pos:column="38">1<pos:position pos:line="31" pos:column="39"/></literal></expr>;<pos:position pos:line="31" pos:column="40"/></expr_stmt>
            <break pos:line="32" pos:column="13">break;<pos:position pos:line="32" pos:column="19"/></break>

        <case pos:line="34" pos:column="9">case <expr><literal type="char" pos:line="34" pos:column="14">'N'<pos:position pos:line="34" pos:column="17"/></literal></expr>:<pos:position pos:line="34" pos:column="18"/></case>
            <comment type="block" format="doxygen" pos:line="35" pos:column="13">/** \par N
             * Set global option for 'no_daemon' mode. opt_no_daemon */</comment>
            <expr_stmt><expr><name pos:line="37" pos:column="13">opt_no_daemon<pos:position pos:line="37" pos:column="26"/></name> <operator pos:line="37" pos:column="27">=<pos:position pos:line="37" pos:column="28"/></operator> <literal type="number" pos:line="37" pos:column="29">1<pos:position pos:line="37" pos:column="30"/></literal></expr>;<pos:position pos:line="37" pos:column="31"/></expr_stmt>
            <break pos:line="38" pos:column="13">break;<pos:position pos:line="38" pos:column="19"/></break>

<cpp:if pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">if<pos:position pos:line="40" pos:column="4"/></cpp:directive> <expr><name pos:line="40" pos:column="5">USE_WIN32_SERVICE<pos:position pos:line="40" pos:column="22"/></name></expr></cpp:if>

        <case pos:line="42" pos:column="9">case <expr><literal type="char" pos:line="42" pos:column="14">'O'<pos:position pos:line="42" pos:column="17"/></literal></expr>:<pos:position pos:line="42" pos:column="18"/></case>
            <comment type="block" format="doxygen" pos:line="43" pos:column="13">/** \par O
             * Set global option. opt_command_lin and WIN32_Command_Line */</comment>
            <expr_stmt><expr><name pos:line="45" pos:column="13">opt_command_line<pos:position pos:line="45" pos:column="29"/></name> <operator pos:line="45" pos:column="30">=<pos:position pos:line="45" pos:column="31"/></operator> <literal type="number" pos:line="45" pos:column="32">1<pos:position pos:line="45" pos:column="33"/></literal></expr>;<pos:position pos:line="45" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><name pos:line="46" pos:column="13">WIN32_Command_Line<pos:position pos:line="46" pos:column="31"/></name> <operator pos:line="46" pos:column="32">=<pos:position pos:line="46" pos:column="33"/></operator> <call><name pos:line="46" pos:column="34">xstrdup<pos:position pos:line="46" pos:column="41"/></name><argument_list pos:line="46" pos:column="41">(<argument><expr><name pos:line="46" pos:column="42">optarg<pos:position pos:line="46" pos:column="48"/></name></expr></argument>)<pos:position pos:line="46" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="50"/></expr_stmt>
            <break pos:line="47" pos:column="13">break;<pos:position pos:line="47" pos:column="19"/></break>
<cpp:endif pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">endif<pos:position pos:line="48" pos:column="7"/></cpp:directive></cpp:endif>

        <case pos:line="50" pos:column="9">case <expr><literal type="char" pos:line="50" pos:column="14">'R'<pos:position pos:line="50" pos:column="17"/></literal></expr>:<pos:position pos:line="50" pos:column="18"/></case>
            <comment type="block" format="doxygen" pos:line="51" pos:column="13">/** \par R
             * Unset/disable global option opt_reuseaddr */</comment>
            <expr_stmt><expr><name pos:line="53" pos:column="13">opt_reuseaddr<pos:position pos:line="53" pos:column="26"/></name> <operator pos:line="53" pos:column="27">=<pos:position pos:line="53" pos:column="28"/></operator> <literal type="number" pos:line="53" pos:column="29">0<pos:position pos:line="53" pos:column="30"/></literal></expr>;<pos:position pos:line="53" pos:column="31"/></expr_stmt>
            <break pos:line="54" pos:column="13">break;<pos:position pos:line="54" pos:column="19"/></break>

        <case pos:line="56" pos:column="9">case <expr><literal type="char" pos:line="56" pos:column="14">'S'<pos:position pos:line="56" pos:column="17"/></literal></expr>:<pos:position pos:line="56" pos:column="18"/></case>
            <comment type="block" format="doxygen" pos:line="57" pos:column="13">/** \par S
             * Set global option opt_store_doublecheck */</comment>
            <expr_stmt><expr><name pos:line="59" pos:column="13">opt_store_doublecheck<pos:position pos:line="59" pos:column="34"/></name> <operator pos:line="59" pos:column="35">=<pos:position pos:line="59" pos:column="36"/></operator> <literal type="number" pos:line="59" pos:column="37">1<pos:position pos:line="59" pos:column="38"/></literal></expr>;<pos:position pos:line="59" pos:column="39"/></expr_stmt>
            <break pos:line="60" pos:column="13">break;<pos:position pos:line="60" pos:column="19"/></break>

        <case pos:line="62" pos:column="9">case <expr><literal type="char" pos:line="62" pos:column="14">'X'<pos:position pos:line="62" pos:column="17"/></literal></expr>:<pos:position pos:line="62" pos:column="18"/></case>
            <comment type="block" format="doxygen" pos:line="63" pos:column="13">/** \par X
             * Force full debugging */</comment>
            <expr_stmt><expr><call><name><name pos:line="65" pos:column="13">Debug<pos:position pos:line="65" pos:column="18"/></name><operator pos:line="65" pos:column="18">::<pos:position pos:line="65" pos:column="20"/></operator><name pos:line="65" pos:column="20">parseOptions<pos:position pos:line="65" pos:column="32"/></name></name><argument_list pos:line="65" pos:column="32">(<argument><expr><literal type="string" pos:line="65" pos:column="33">"rotate=0 ALL,9"<pos:position pos:line="65" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="51"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="66" pos:column="13">Debug<pos:position pos:line="66" pos:column="18"/></name><operator pos:line="66" pos:column="18">::<pos:position pos:line="66" pos:column="20"/></operator><name pos:line="66" pos:column="20">override_X<pos:position pos:line="66" pos:column="30"/></name></name> <operator pos:line="66" pos:column="31">=<pos:position pos:line="66" pos:column="32"/></operator> <literal type="number" pos:line="66" pos:column="33">1<pos:position pos:line="66" pos:column="34"/></literal></expr>;<pos:position pos:line="66" pos:column="35"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="67" pos:column="13">sigusr2_handle<pos:position pos:line="67" pos:column="27"/></name><argument_list pos:line="67" pos:column="27">(<argument><expr><name pos:line="67" pos:column="28">SIGUSR2<pos:position pos:line="67" pos:column="35"/></name></expr></argument>)<pos:position pos:line="67" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="37"/></expr_stmt>
            <break pos:line="68" pos:column="13">break;<pos:position pos:line="68" pos:column="19"/></break>

        <case pos:line="70" pos:column="9">case <expr><literal type="char" pos:line="70" pos:column="14">'Y'<pos:position pos:line="70" pos:column="17"/></literal></expr>:<pos:position pos:line="70" pos:column="18"/></case>
            <comment type="block" format="doxygen" pos:line="71" pos:column="13">/** \par Y
             * Set global option opt_reload_hit_only */</comment>
            <expr_stmt><expr><name pos:line="73" pos:column="13">opt_reload_hit_only<pos:position pos:line="73" pos:column="32"/></name> <operator pos:line="73" pos:column="33">=<pos:position pos:line="73" pos:column="34"/></operator> <literal type="number" pos:line="73" pos:column="35">1<pos:position pos:line="73" pos:column="36"/></literal></expr>;<pos:position pos:line="73" pos:column="37"/></expr_stmt>
            <break pos:line="74" pos:column="13">break;<pos:position pos:line="74" pos:column="19"/></break>

<cpp:if pos:line="76" pos:column="1">#<cpp:directive pos:line="76" pos:column="2">if<pos:position pos:line="76" pos:column="4"/></cpp:directive> <expr><name pos:line="76" pos:column="5">USE_WIN32_SERVICE<pos:position pos:line="76" pos:column="22"/></name></expr></cpp:if>

        <case pos:line="78" pos:column="9">case <expr><literal type="char" pos:line="78" pos:column="14">'i'<pos:position pos:line="78" pos:column="17"/></literal></expr>:<pos:position pos:line="78" pos:column="18"/></case>
            <comment type="block" format="doxygen" pos:line="79" pos:column="13">/** \par i
             * Set global option opt_install_service (to TRUE) */</comment>
            <expr_stmt><expr><name pos:line="81" pos:column="13">opt_install_service<pos:position pos:line="81" pos:column="32"/></name> <operator pos:line="81" pos:column="33">=<pos:position pos:line="81" pos:column="34"/></operator> <name pos:line="81" pos:column="35">TRUE<pos:position pos:line="81" pos:column="39"/></name></expr>;<pos:position pos:line="81" pos:column="40"/></expr_stmt>
            <break pos:line="82" pos:column="13">break;<pos:position pos:line="82" pos:column="19"/></break>
<cpp:endif pos:line="83" pos:column="1">#<cpp:directive pos:line="83" pos:column="2">endif<pos:position pos:line="83" pos:column="7"/></cpp:directive></cpp:endif>

        <case pos:line="85" pos:column="9">case <expr><literal type="char" pos:line="85" pos:column="14">'a'<pos:position pos:line="85" pos:column="17"/></literal></expr>:<pos:position pos:line="85" pos:column="18"/></case>
            <comment type="block" format="doxygen" pos:line="86" pos:column="13">/** \par a
             * Add optional HTTP port as given following the option */</comment>
            <expr_stmt><expr><call><name pos:line="88" pos:column="13">add_http_port<pos:position pos:line="88" pos:column="26"/></name><argument_list pos:line="88" pos:column="26">(<argument><expr><name pos:line="88" pos:column="27">optarg<pos:position pos:line="88" pos:column="33"/></name></expr></argument>)<pos:position pos:line="88" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="35"/></expr_stmt>
            <break pos:line="89" pos:column="13">break;<pos:position pos:line="89" pos:column="19"/></break>

        <case pos:line="91" pos:column="9">case <expr><literal type="char" pos:line="91" pos:column="14">'d'<pos:position pos:line="91" pos:column="17"/></literal></expr>:<pos:position pos:line="91" pos:column="18"/></case>
            <comment type="block" format="doxygen" pos:line="92" pos:column="13">/** \par d
             * Set global option Debug::log_stderr to the number given follwoign the option */</comment>
            <expr_stmt><expr><name><name pos:line="94" pos:column="13">Debug<pos:position pos:line="94" pos:column="18"/></name><operator pos:line="94" pos:column="18">::<pos:position pos:line="94" pos:column="20"/></operator><name pos:line="94" pos:column="20">log_stderr<pos:position pos:line="94" pos:column="30"/></name></name> <operator pos:line="94" pos:column="31">=<pos:position pos:line="94" pos:column="32"/></operator> <call><name pos:line="94" pos:column="33">atoi<pos:position pos:line="94" pos:column="37"/></name><argument_list pos:line="94" pos:column="37">(<argument><expr><name pos:line="94" pos:column="38">optarg<pos:position pos:line="94" pos:column="44"/></name></expr></argument>)<pos:position pos:line="94" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="46"/></expr_stmt>
            <break pos:line="95" pos:column="13">break;<pos:position pos:line="95" pos:column="19"/></break>

        <case pos:line="97" pos:column="9">case <expr><literal type="char" pos:line="97" pos:column="14">'f'<pos:position pos:line="97" pos:column="17"/></literal></expr>:<pos:position pos:line="97" pos:column="18"/></case>
            <comment type="block" format="doxygen" pos:line="98" pos:column="13">/** \par f
             * Load the file given instead of the default squid.conf. */</comment>
            <expr_stmt><expr><call><name pos:line="100" pos:column="13">xfree<pos:position pos:line="100" pos:column="18"/></name><argument_list pos:line="100" pos:column="18">(<argument><expr><name pos:line="100" pos:column="19">ConfigFile<pos:position pos:line="100" pos:column="29"/></name></expr></argument>)<pos:position pos:line="100" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="31"/></expr_stmt>
            <expr_stmt><expr><name pos:line="101" pos:column="13">ConfigFile<pos:position pos:line="101" pos:column="23"/></name> <operator pos:line="101" pos:column="24">=<pos:position pos:line="101" pos:column="25"/></operator> <call><name pos:line="101" pos:column="26">xstrdup<pos:position pos:line="101" pos:column="33"/></name><argument_list pos:line="101" pos:column="33">(<argument><expr><name pos:line="101" pos:column="34">optarg<pos:position pos:line="101" pos:column="40"/></name></expr></argument>)<pos:position pos:line="101" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="42"/></expr_stmt>
            <break pos:line="102" pos:column="13">break;<pos:position pos:line="102" pos:column="19"/></break>

        <case pos:line="104" pos:column="9">case <expr><literal type="char" pos:line="104" pos:column="14">'k'<pos:position pos:line="104" pos:column="17"/></literal></expr>:<pos:position pos:line="104" pos:column="18"/></case>
            <comment type="block" format="doxygen" pos:line="105" pos:column="13">/** \par k
             * Run the administrative action given following the option */</comment>

            <comment type="block" format="doxygen" pos:line="108" pos:column="13">/** \li When it is missing or an unknown option display the usage help. */</comment>
            <if pos:line="109" pos:column="13">if <condition pos:line="109" pos:column="16">(<expr><operator pos:line="109" pos:column="17">!<pos:position pos:line="109" pos:column="18"/></operator><name pos:line="109" pos:column="18">optarg<pos:position pos:line="109" pos:column="24"/></name> <operator pos:line="109" pos:column="25">||<pos:position pos:line="109" pos:column="27"/></operator> <call><name pos:line="109" pos:column="28">strlen<pos:position pos:line="109" pos:column="34"/></name><argument_list pos:line="109" pos:column="34">(<argument><expr><name pos:line="109" pos:column="35">optarg<pos:position pos:line="109" pos:column="41"/></name></expr></argument>)<pos:position pos:line="109" pos:column="42"/></argument_list></call> <operator pos:line="109" pos:column="43">&lt;<pos:position pos:line="109" pos:column="47"/></operator> <literal type="number" pos:line="109" pos:column="45">1<pos:position pos:line="109" pos:column="46"/></literal></expr>)<pos:position pos:line="109" pos:column="47"/></condition><then pos:line="109" pos:column="47">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="110" pos:column="17">usage<pos:position pos:line="110" pos:column="22"/></name><argument_list pos:line="110" pos:column="22">()<pos:position pos:line="110" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="25"/></expr_stmt></block></then>

            <elseif pos:line="112" pos:column="13">else <if pos:line="112" pos:column="18">if <condition pos:line="112" pos:column="21">(<expr><operator pos:line="112" pos:column="22">!<pos:position pos:line="112" pos:column="23"/></operator><call><name pos:line="112" pos:column="23">strncmp<pos:position pos:line="112" pos:column="30"/></name><argument_list pos:line="112" pos:column="30">(<argument><expr><name pos:line="112" pos:column="31">optarg<pos:position pos:line="112" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="112" pos:column="39">"reconfigure"<pos:position pos:line="112" pos:column="52"/></literal></expr></argument>, <argument><expr><call><name pos:line="112" pos:column="54">strlen<pos:position pos:line="112" pos:column="60"/></name><argument_list pos:line="112" pos:column="60">(<argument><expr><name pos:line="112" pos:column="61">optarg<pos:position pos:line="112" pos:column="67"/></name></expr></argument>)<pos:position pos:line="112" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="112" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="112" pos:column="70"/></condition><then pos:line="112" pos:column="70">
                <comment type="block" format="doxygen" pos:line="113" pos:column="17">/** \li On reconfigure send SIGHUP. */</comment>
                <block type="pseudo"><expr_stmt><expr><name pos:line="114" pos:column="17">opt_send_signal<pos:position pos:line="114" pos:column="32"/></name> <operator pos:line="114" pos:column="33">=<pos:position pos:line="114" pos:column="34"/></operator> <name pos:line="114" pos:column="35">SIGHUP<pos:position pos:line="114" pos:column="41"/></name></expr>;<pos:position pos:line="114" pos:column="42"/></expr_stmt></block></then></if></elseif>
            <elseif pos:line="115" pos:column="13">else <if pos:line="115" pos:column="18">if <condition pos:line="115" pos:column="21">(<expr><operator pos:line="115" pos:column="22">!<pos:position pos:line="115" pos:column="23"/></operator><call><name pos:line="115" pos:column="23">strncmp<pos:position pos:line="115" pos:column="30"/></name><argument_list pos:line="115" pos:column="30">(<argument><expr><name pos:line="115" pos:column="31">optarg<pos:position pos:line="115" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="115" pos:column="39">"rotate"<pos:position pos:line="115" pos:column="47"/></literal></expr></argument>, <argument><expr><call><name pos:line="115" pos:column="49">strlen<pos:position pos:line="115" pos:column="55"/></name><argument_list pos:line="115" pos:column="55">(<argument><expr><name pos:line="115" pos:column="56">optarg<pos:position pos:line="115" pos:column="62"/></name></expr></argument>)<pos:position pos:line="115" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="115" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="115" pos:column="65"/></condition><then pos:line="115" pos:column="65">
                <comment type="block" format="doxygen" pos:line="116" pos:column="17">/** \li On rotate send SIGQUIT or SIGUSR1. */</comment>
<cpp:if pos:line="117" pos:column="1">#<cpp:directive pos:line="117" pos:column="2">if<pos:position pos:line="117" pos:column="4"/></cpp:directive> <expr><call><name pos:line="117" pos:column="5">defined<pos:position pos:line="117" pos:column="12"/></name><argument_list pos:line="117" pos:column="12">(<argument><expr><name pos:line="117" pos:column="13">_SQUID_LINUX_THREADS_<pos:position pos:line="117" pos:column="34"/></name></expr></argument>)<pos:position pos:line="117" pos:column="35"/></argument_list></call></expr></cpp:if>
                <block type="pseudo"><expr_stmt><expr><name pos:line="118" pos:column="17">opt_send_signal<pos:position pos:line="118" pos:column="32"/></name> <operator pos:line="118" pos:column="33">=<pos:position pos:line="118" pos:column="34"/></operator> <name pos:line="118" pos:column="35">SIGQUIT<pos:position pos:line="118" pos:column="42"/></name></expr>;<pos:position pos:line="118" pos:column="43"/></expr_stmt></block></then></if></elseif></if>
<cpp:else pos:line="119" pos:column="1">#<cpp:directive pos:line="119" pos:column="2">else<pos:position pos:line="119" pos:column="6"/></cpp:directive></cpp:else>
                <expr_stmt><expr><name pos:line="120" pos:column="17">opt_send_signal<pos:position pos:line="120" pos:column="32"/></name> <operator pos:line="120" pos:column="33">=<pos:position pos:line="120" pos:column="34"/></operator> <name pos:line="120" pos:column="35">SIGUSR1<pos:position pos:line="120" pos:column="42"/></name></expr>;<pos:position pos:line="120" pos:column="43"/></expr_stmt>
<cpp:endif pos:line="121" pos:column="1">#<cpp:directive pos:line="121" pos:column="2">endif<pos:position pos:line="121" pos:column="7"/></cpp:directive></cpp:endif>

            <elseif pos:line="123" pos:column="13">else <if pos:line="123" pos:column="18">if <condition pos:line="123" pos:column="21">(<expr><operator pos:line="123" pos:column="22">!<pos:position pos:line="123" pos:column="23"/></operator><call><name pos:line="123" pos:column="23">strncmp<pos:position pos:line="123" pos:column="30"/></name><argument_list pos:line="123" pos:column="30">(<argument><expr><name pos:line="123" pos:column="31">optarg<pos:position pos:line="123" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="123" pos:column="39">"debug"<pos:position pos:line="123" pos:column="46"/></literal></expr></argument>, <argument><expr><call><name pos:line="123" pos:column="48">strlen<pos:position pos:line="123" pos:column="54"/></name><argument_list pos:line="123" pos:column="54">(<argument><expr><name pos:line="123" pos:column="55">optarg<pos:position pos:line="123" pos:column="61"/></name></expr></argument>)<pos:position pos:line="123" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="123" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="123" pos:column="64"/></condition><then pos:line="123" pos:column="64">
                <comment type="block" format="doxygen" pos:line="124" pos:column="17">/** \li On debug send SIGTRAP or SIGUSR2. */</comment>
<cpp:if pos:line="125" pos:column="1">#<cpp:directive pos:line="125" pos:column="2">if<pos:position pos:line="125" pos:column="4"/></cpp:directive> <expr><call><name pos:line="125" pos:column="5">defined<pos:position pos:line="125" pos:column="12"/></name><argument_list pos:line="125" pos:column="12">(<argument><expr><name pos:line="125" pos:column="13">_SQUID_LINUX_THREADS_<pos:position pos:line="125" pos:column="34"/></name></expr></argument>)<pos:position pos:line="125" pos:column="35"/></argument_list></call></expr></cpp:if>
                <block type="pseudo"><expr_stmt><expr><name pos:line="126" pos:column="17">opt_send_signal<pos:position pos:line="126" pos:column="32"/></name> <operator pos:line="126" pos:column="33">=<pos:position pos:line="126" pos:column="34"/></operator> <name pos:line="126" pos:column="35">SIGTRAP<pos:position pos:line="126" pos:column="42"/></name></expr>;<pos:position pos:line="126" pos:column="43"/></expr_stmt></block></then></if></elseif>
<cpp:else pos:line="127" pos:column="1">#<cpp:directive pos:line="127" pos:column="2">else<pos:position pos:line="127" pos:column="6"/></cpp:directive></cpp:else>
                <expr_stmt><expr><name pos:line="128" pos:column="17">opt_send_signal<pos:position pos:line="128" pos:column="32"/></name> <operator pos:line="128" pos:column="33">=<pos:position pos:line="128" pos:column="34"/></operator> <name pos:line="128" pos:column="35">SIGUSR2<pos:position pos:line="128" pos:column="42"/></name></expr>;<pos:position pos:line="128" pos:column="43"/></expr_stmt>
<cpp:endif pos:line="129" pos:column="1">#<cpp:directive pos:line="129" pos:column="2">endif<pos:position pos:line="129" pos:column="7"/></cpp:directive></cpp:endif>

            <elseif pos:line="131" pos:column="13">else <if pos:line="131" pos:column="18">if <condition pos:line="131" pos:column="21">(<expr><operator pos:line="131" pos:column="22">!<pos:position pos:line="131" pos:column="23"/></operator><call><name pos:line="131" pos:column="23">strncmp<pos:position pos:line="131" pos:column="30"/></name><argument_list pos:line="131" pos:column="30">(<argument><expr><name pos:line="131" pos:column="31">optarg<pos:position pos:line="131" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="131" pos:column="39">"shutdown"<pos:position pos:line="131" pos:column="49"/></literal></expr></argument>, <argument><expr><call><name pos:line="131" pos:column="51">strlen<pos:position pos:line="131" pos:column="57"/></name><argument_list pos:line="131" pos:column="57">(<argument><expr><name pos:line="131" pos:column="58">optarg<pos:position pos:line="131" pos:column="64"/></name></expr></argument>)<pos:position pos:line="131" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="131" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="131" pos:column="67"/></condition><then pos:line="131" pos:column="67">
                <comment type="block" format="doxygen" pos:line="132" pos:column="17">/** \li On shutdown send SIGTERM. */</comment>
                <block type="pseudo"><expr_stmt><expr><name pos:line="133" pos:column="17">opt_send_signal<pos:position pos:line="133" pos:column="32"/></name> <operator pos:line="133" pos:column="33">=<pos:position pos:line="133" pos:column="34"/></operator> <name pos:line="133" pos:column="35">SIGTERM<pos:position pos:line="133" pos:column="42"/></name></expr>;<pos:position pos:line="133" pos:column="43"/></expr_stmt></block></then></if></elseif>
            <elseif pos:line="134" pos:column="13">else <if pos:line="134" pos:column="18">if <condition pos:line="134" pos:column="21">(<expr><operator pos:line="134" pos:column="22">!<pos:position pos:line="134" pos:column="23"/></operator><call><name pos:line="134" pos:column="23">strncmp<pos:position pos:line="134" pos:column="30"/></name><argument_list pos:line="134" pos:column="30">(<argument><expr><name pos:line="134" pos:column="31">optarg<pos:position pos:line="134" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="134" pos:column="39">"interrupt"<pos:position pos:line="134" pos:column="50"/></literal></expr></argument>, <argument><expr><call><name pos:line="134" pos:column="52">strlen<pos:position pos:line="134" pos:column="58"/></name><argument_list pos:line="134" pos:column="58">(<argument><expr><name pos:line="134" pos:column="59">optarg<pos:position pos:line="134" pos:column="65"/></name></expr></argument>)<pos:position pos:line="134" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="134" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="134" pos:column="68"/></condition><then pos:line="134" pos:column="68">
                <comment type="block" format="doxygen" pos:line="135" pos:column="17">/** \li On interrupt send SIGINT. */</comment>
                <block type="pseudo"><expr_stmt><expr><name pos:line="136" pos:column="17">opt_send_signal<pos:position pos:line="136" pos:column="32"/></name> <operator pos:line="136" pos:column="33">=<pos:position pos:line="136" pos:column="34"/></operator> <name pos:line="136" pos:column="35">SIGINT<pos:position pos:line="136" pos:column="41"/></name></expr>;<pos:position pos:line="136" pos:column="42"/></expr_stmt></block></then></if></elseif>
            <elseif pos:line="137" pos:column="13">else <if pos:line="137" pos:column="18">if <condition pos:line="137" pos:column="21">(<expr><operator pos:line="137" pos:column="22">!<pos:position pos:line="137" pos:column="23"/></operator><call><name pos:line="137" pos:column="23">strncmp<pos:position pos:line="137" pos:column="30"/></name><argument_list pos:line="137" pos:column="30">(<argument><expr><name pos:line="137" pos:column="31">optarg<pos:position pos:line="137" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="137" pos:column="39">"kill"<pos:position pos:line="137" pos:column="45"/></literal></expr></argument>, <argument><expr><call><name pos:line="137" pos:column="47">strlen<pos:position pos:line="137" pos:column="53"/></name><argument_list pos:line="137" pos:column="53">(<argument><expr><name pos:line="137" pos:column="54">optarg<pos:position pos:line="137" pos:column="60"/></name></expr></argument>)<pos:position pos:line="137" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="137" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="137" pos:column="63"/></condition><then pos:line="137" pos:column="63">
                <comment type="block" format="doxygen" pos:line="138" pos:column="17">/** \li On kill send SIGKILL. */</comment>
                <block type="pseudo"><expr_stmt><expr><name pos:line="139" pos:column="17">opt_send_signal<pos:position pos:line="139" pos:column="32"/></name> <operator pos:line="139" pos:column="33">=<pos:position pos:line="139" pos:column="34"/></operator> <name pos:line="139" pos:column="35">SIGKILL<pos:position pos:line="139" pos:column="42"/></name></expr>;<pos:position pos:line="139" pos:column="43"/></expr_stmt></block></then></if></elseif>

<cpp:ifdef pos:line="141" pos:column="1">#<cpp:directive pos:line="141" pos:column="2">ifdef<pos:position pos:line="141" pos:column="7"/></cpp:directive> <name pos:line="141" pos:column="8">SIGTTIN<pos:position pos:line="141" pos:column="15"/></name></cpp:ifdef>

            <elseif pos:line="143" pos:column="13">else <if pos:line="143" pos:column="18">if <condition pos:line="143" pos:column="21">(<expr><operator pos:line="143" pos:column="22">!<pos:position pos:line="143" pos:column="23"/></operator><call><name pos:line="143" pos:column="23">strncmp<pos:position pos:line="143" pos:column="30"/></name><argument_list pos:line="143" pos:column="30">(<argument><expr><name pos:line="143" pos:column="31">optarg<pos:position pos:line="143" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="143" pos:column="39">"restart"<pos:position pos:line="143" pos:column="48"/></literal></expr></argument>, <argument><expr><call><name pos:line="143" pos:column="50">strlen<pos:position pos:line="143" pos:column="56"/></name><argument_list pos:line="143" pos:column="56">(<argument><expr><name pos:line="143" pos:column="57">optarg<pos:position pos:line="143" pos:column="63"/></name></expr></argument>)<pos:position pos:line="143" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="143" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="143" pos:column="66"/></condition><then pos:line="143" pos:column="66">
                <comment type="block" format="doxygen" pos:line="144" pos:column="17">/** \li On restart send SIGTTIN. (exit and restart by parent) */</comment>
                <block type="pseudo"><expr_stmt><expr><name pos:line="145" pos:column="17">opt_send_signal<pos:position pos:line="145" pos:column="32"/></name> <operator pos:line="145" pos:column="33">=<pos:position pos:line="145" pos:column="34"/></operator> <name pos:line="145" pos:column="35">SIGTTIN<pos:position pos:line="145" pos:column="42"/></name></expr>;<pos:position pos:line="145" pos:column="43"/></expr_stmt></block></then></if></elseif>

<cpp:endif pos:line="147" pos:column="1">#<cpp:directive pos:line="147" pos:column="2">endif<pos:position pos:line="147" pos:column="7"/></cpp:directive></cpp:endif>

            <elseif pos:line="149" pos:column="13">else <if pos:line="149" pos:column="18">if <condition pos:line="149" pos:column="21">(<expr><operator pos:line="149" pos:column="22">!<pos:position pos:line="149" pos:column="23"/></operator><call><name pos:line="149" pos:column="23">strncmp<pos:position pos:line="149" pos:column="30"/></name><argument_list pos:line="149" pos:column="30">(<argument><expr><name pos:line="149" pos:column="31">optarg<pos:position pos:line="149" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="149" pos:column="39">"check"<pos:position pos:line="149" pos:column="46"/></literal></expr></argument>, <argument><expr><call><name pos:line="149" pos:column="48">strlen<pos:position pos:line="149" pos:column="54"/></name><argument_list pos:line="149" pos:column="54">(<argument><expr><name pos:line="149" pos:column="55">optarg<pos:position pos:line="149" pos:column="61"/></name></expr></argument>)<pos:position pos:line="149" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="149" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="149" pos:column="64"/></condition><then pos:line="149" pos:column="64">
                <comment type="block" format="doxygen" pos:line="150" pos:column="17">/** \li On check send 0 / SIGNULL. */</comment>
                <block type="pseudo"><expr_stmt><expr><name pos:line="151" pos:column="17">opt_send_signal<pos:position pos:line="151" pos:column="32"/></name> <operator pos:line="151" pos:column="33">=<pos:position pos:line="151" pos:column="34"/></operator> <literal type="number" pos:line="151" pos:column="35">0<pos:position pos:line="151" pos:column="36"/></literal></expr>;<pos:position pos:line="151" pos:column="37"/></expr_stmt></block></then></if></elseif>    <comment type="block" pos:line="151" pos:column="41">/* SIGNULL */</comment>
            <elseif pos:line="152" pos:column="13">else <if pos:line="152" pos:column="18">if <condition pos:line="152" pos:column="21">(<expr><operator pos:line="152" pos:column="22">!<pos:position pos:line="152" pos:column="23"/></operator><call><name pos:line="152" pos:column="23">strncmp<pos:position pos:line="152" pos:column="30"/></name><argument_list pos:line="152" pos:column="30">(<argument><expr><name pos:line="152" pos:column="31">optarg<pos:position pos:line="152" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="152" pos:column="39">"parse"<pos:position pos:line="152" pos:column="46"/></literal></expr></argument>, <argument><expr><call><name pos:line="152" pos:column="48">strlen<pos:position pos:line="152" pos:column="54"/></name><argument_list pos:line="152" pos:column="54">(<argument><expr><name pos:line="152" pos:column="55">optarg<pos:position pos:line="152" pos:column="61"/></name></expr></argument>)<pos:position pos:line="152" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="152" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="152" pos:column="64"/></condition><then pos:line="152" pos:column="64">
                <comment type="block" format="doxygen" pos:line="153" pos:column="17">/** \li On parse set global flag to re-parse the config file only. */</comment>
                <block type="pseudo"><expr_stmt><expr><name pos:line="154" pos:column="17">opt_parse_cfg_only<pos:position pos:line="154" pos:column="35"/></name> <operator pos:line="154" pos:column="36">=<pos:position pos:line="154" pos:column="37"/></operator> <literal type="number" pos:line="154" pos:column="38">1<pos:position pos:line="154" pos:column="39"/></literal></expr>;<pos:position pos:line="154" pos:column="40"/></expr_stmt></block></then></if></elseif>
            <else pos:line="155" pos:column="13">else
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="156" pos:column="17">usage<pos:position pos:line="156" pos:column="22"/></name><argument_list pos:line="156" pos:column="22">()<pos:position pos:line="156" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="25"/></expr_stmt></block></else>

            <break pos:line="158" pos:column="13">break;<pos:position pos:line="158" pos:column="19"/></break>

        <case pos:line="160" pos:column="9">case <expr><literal type="char" pos:line="160" pos:column="14">'m'<pos:position pos:line="160" pos:column="17"/></literal></expr>:<pos:position pos:line="160" pos:column="18"/></case>
            <comment type="block" format="doxygen" pos:line="161" pos:column="13">/** \par m
             * Set global malloc_debug_level to the value given following the option.
             * if none is given it toggles the xmalloc_trace option on/off */</comment>
            <if pos:line="164" pos:column="13">if <condition pos:line="164" pos:column="16">(<expr><name pos:line="164" pos:column="17">optarg<pos:position pos:line="164" pos:column="23"/></name></expr>)<pos:position pos:line="164" pos:column="24"/></condition><then pos:line="164" pos:column="24"> <block pos:line="164" pos:column="25">{
<cpp:if pos:line="165" pos:column="1">#<cpp:directive pos:line="165" pos:column="2">if<pos:position pos:line="165" pos:column="4"/></cpp:directive> <expr><name pos:line="165" pos:column="5">MALLOC_DBG<pos:position pos:line="165" pos:column="15"/></name></expr></cpp:if>
                <expr_stmt><expr><name pos:line="166" pos:column="17">malloc_debug_level<pos:position pos:line="166" pos:column="35"/></name> <operator pos:line="166" pos:column="36">=<pos:position pos:line="166" pos:column="37"/></operator> <call><name pos:line="166" pos:column="38">atoi<pos:position pos:line="166" pos:column="42"/></name><argument_list pos:line="166" pos:column="42">(<argument><expr><name pos:line="166" pos:column="43">optarg<pos:position pos:line="166" pos:column="49"/></name></expr></argument>)<pos:position pos:line="166" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="51"/></expr_stmt>
<cpp:else pos:line="167" pos:column="1">#<cpp:directive pos:line="167" pos:column="2">else<pos:position pos:line="167" pos:column="6"/></cpp:directive></cpp:else>
                <expr_stmt><expr><call><name pos:line="168" pos:column="17">fatal<pos:position pos:line="168" pos:column="22"/></name><argument_list pos:line="168" pos:column="22">(<argument><expr><literal type="string" pos:line="168" pos:column="23">"Need to add -DMALLOC_DBG when compiling to use -mX option"<pos:position pos:line="168" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="168" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="168" pos:column="84"/></expr_stmt>
<cpp:endif pos:line="169" pos:column="1">#<cpp:directive pos:line="169" pos:column="2">endif<pos:position pos:line="169" pos:column="7"/></cpp:directive></cpp:endif>

            }<pos:position pos:line="171" pos:column="14"/></block></then></if>
            <break pos:line="172" pos:column="13">break;<pos:position pos:line="172" pos:column="19"/></break>

        <case pos:line="174" pos:column="9">case <expr><literal type="char" pos:line="174" pos:column="14">'n'<pos:position pos:line="174" pos:column="17"/></literal></expr>:<pos:position pos:line="174" pos:column="18"/></case>
            <comment type="block" format="doxygen" pos:line="175" pos:column="13">/** \par n
             * Set global option opt_signal_service (to true).
             * Stores the additional parameter given in global service_name */</comment>
            <if pos:line="178" pos:column="13">if <condition pos:line="178" pos:column="16">(<expr><name pos:line="178" pos:column="17">optarg<pos:position pos:line="178" pos:column="23"/></name> <operator pos:line="178" pos:column="24">&amp;&amp;<pos:position pos:line="178" pos:column="34"/></operator> <operator pos:line="178" pos:column="27">*<pos:position pos:line="178" pos:column="28"/></operator><name pos:line="178" pos:column="28">optarg<pos:position pos:line="178" pos:column="34"/></name> <operator pos:line="178" pos:column="35">!=<pos:position pos:line="178" pos:column="37"/></operator> <literal type="char" pos:line="178" pos:column="38">'\0'<pos:position pos:line="178" pos:column="42"/></literal></expr>)<pos:position pos:line="178" pos:column="43"/></condition><then pos:line="178" pos:column="43"> <block pos:line="178" pos:column="44">{
                <decl_stmt><decl><type><specifier pos:line="179" pos:column="17">const<pos:position pos:line="179" pos:column="22"/></specifier> <name pos:line="179" pos:column="23">SBuf<pos:position pos:line="179" pos:column="27"/></name></type> <name pos:line="179" pos:column="28">t<pos:position pos:line="179" pos:column="29"/></name><argument_list pos:line="179" pos:column="29">(<argument><expr><name pos:line="179" pos:column="30">optarg<pos:position pos:line="179" pos:column="36"/></name></expr></argument>)<pos:position pos:line="179" pos:column="37"/></argument_list></decl>;<pos:position pos:line="179" pos:column="38"/></decl_stmt>
                <decl_stmt><decl><type><name><operator pos:line="180" pos:column="17">::<pos:position pos:line="180" pos:column="19"/></operator><name pos:line="180" pos:column="19">Parser<pos:position pos:line="180" pos:column="25"/></name><operator pos:line="180" pos:column="25">::<pos:position pos:line="180" pos:column="27"/></operator><name pos:line="180" pos:column="27">Tokenizer<pos:position pos:line="180" pos:column="36"/></name></name></type> <name pos:line="180" pos:column="37">tok<pos:position pos:line="180" pos:column="40"/></name><argument_list pos:line="180" pos:column="40">(<argument><expr><name pos:line="180" pos:column="41">t<pos:position pos:line="180" pos:column="42"/></name></expr></argument>)<pos:position pos:line="180" pos:column="43"/></argument_list></decl>;<pos:position pos:line="180" pos:column="44"/></decl_stmt>
                <decl_stmt><decl><type><specifier pos:line="181" pos:column="17">const<pos:position pos:line="181" pos:column="22"/></specifier> <name pos:line="181" pos:column="23">CharacterSet<pos:position pos:line="181" pos:column="35"/></name></type> <name pos:line="181" pos:column="36">chr<pos:position pos:line="181" pos:column="39"/></name> <init pos:line="181" pos:column="40">= <expr><name><name pos:line="181" pos:column="42">CharacterSet<pos:position pos:line="181" pos:column="54"/></name><operator pos:line="181" pos:column="54">::<pos:position pos:line="181" pos:column="56"/></operator><name pos:line="181" pos:column="56">ALPHA<pos:position pos:line="181" pos:column="61"/></name></name><operator pos:line="181" pos:column="61">+<pos:position pos:line="181" pos:column="62"/></operator><name><name pos:line="181" pos:column="62">CharacterSet<pos:position pos:line="181" pos:column="74"/></name><operator pos:line="181" pos:column="74">::<pos:position pos:line="181" pos:column="76"/></operator><name pos:line="181" pos:column="76">DIGIT<pos:position pos:line="181" pos:column="81"/></name></name></expr></init></decl>;<pos:position pos:line="181" pos:column="82"/></decl_stmt>
                <if pos:line="182" pos:column="17">if <condition pos:line="182" pos:column="20">(<expr><operator pos:line="182" pos:column="21">!<pos:position pos:line="182" pos:column="22"/></operator><call><name><name pos:line="182" pos:column="22">tok<pos:position pos:line="182" pos:column="25"/></name><operator pos:line="182" pos:column="25">.<pos:position pos:line="182" pos:column="26"/></operator><name pos:line="182" pos:column="26">prefix<pos:position pos:line="182" pos:column="32"/></name></name><argument_list pos:line="182" pos:column="32">(<argument><expr><name pos:line="182" pos:column="33">service_name<pos:position pos:line="182" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="182" pos:column="47">chr<pos:position pos:line="182" pos:column="50"/></name></expr></argument>)<pos:position pos:line="182" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="182" pos:column="52"/></condition><then pos:line="182" pos:column="52">
                    <block type="pseudo"><expr_stmt><expr><call><name pos:line="183" pos:column="21">fatalf<pos:position pos:line="183" pos:column="27"/></name><argument_list pos:line="183" pos:column="27">(<argument><expr><literal type="string" pos:line="183" pos:column="28">"Expected alphanumeric service name for the -n option but got: %s"<pos:position pos:line="183" pos:column="94"/></literal></expr></argument>, <argument><expr><name pos:line="183" pos:column="96">optarg<pos:position pos:line="183" pos:column="102"/></name></expr></argument>)<pos:position pos:line="183" pos:column="103"/></argument_list></call></expr>;<pos:position pos:line="183" pos:column="104"/></expr_stmt></block></then></if>
                <if pos:line="184" pos:column="17">if <condition pos:line="184" pos:column="20">(<expr><operator pos:line="184" pos:column="21">!<pos:position pos:line="184" pos:column="22"/></operator><call><name><name pos:line="184" pos:column="22">tok<pos:position pos:line="184" pos:column="25"/></name><operator pos:line="184" pos:column="25">.<pos:position pos:line="184" pos:column="26"/></operator><name pos:line="184" pos:column="26">atEnd<pos:position pos:line="184" pos:column="31"/></name></name><argument_list pos:line="184" pos:column="31">()<pos:position pos:line="184" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="184" pos:column="34"/></condition><then pos:line="184" pos:column="34">
                    <block type="pseudo"><expr_stmt><expr><call><name pos:line="185" pos:column="21">fatalf<pos:position pos:line="185" pos:column="27"/></name><argument_list pos:line="185" pos:column="27">(<argument><expr><literal type="string" pos:line="185" pos:column="28">"Garbage after alphanumeric service name in the -n option value: %s"<pos:position pos:line="185" pos:column="96"/></literal></expr></argument>, <argument><expr><name pos:line="185" pos:column="98">optarg<pos:position pos:line="185" pos:column="104"/></name></expr></argument>)<pos:position pos:line="185" pos:column="105"/></argument_list></call></expr>;<pos:position pos:line="185" pos:column="106"/></expr_stmt></block></then></if>
                <if pos:line="186" pos:column="17">if <condition pos:line="186" pos:column="20">(<expr><call><name><name pos:line="186" pos:column="21">service_name<pos:position pos:line="186" pos:column="33"/></name><operator pos:line="186" pos:column="33">.<pos:position pos:line="186" pos:column="34"/></operator><name pos:line="186" pos:column="34">length<pos:position pos:line="186" pos:column="40"/></name></name><argument_list pos:line="186" pos:column="40">()<pos:position pos:line="186" pos:column="42"/></argument_list></call> <operator pos:line="186" pos:column="43">&gt;<pos:position pos:line="186" pos:column="47"/></operator> <literal type="number" pos:line="186" pos:column="45">32<pos:position pos:line="186" pos:column="47"/></literal></expr>)<pos:position pos:line="186" pos:column="48"/></condition><then pos:line="186" pos:column="48">
                    <block type="pseudo"><expr_stmt><expr><call><name pos:line="187" pos:column="21">fatalf<pos:position pos:line="187" pos:column="27"/></name><argument_list pos:line="187" pos:column="27">(<argument><expr><literal type="string" pos:line="187" pos:column="28">"Service name (-n option) must be limited to 32 characters but got %u"<pos:position pos:line="187" pos:column="98"/></literal></expr></argument>, <argument><expr><call><name><name pos:line="187" pos:column="100">service_name<pos:position pos:line="187" pos:column="112"/></name><operator pos:line="187" pos:column="112">.<pos:position pos:line="187" pos:column="113"/></operator><name pos:line="187" pos:column="113">length<pos:position pos:line="187" pos:column="119"/></name></name><argument_list pos:line="187" pos:column="119">()<pos:position pos:line="187" pos:column="121"/></argument_list></call></expr></argument>)<pos:position pos:line="187" pos:column="122"/></argument_list></call></expr>;<pos:position pos:line="187" pos:column="123"/></expr_stmt></block></then></if>
                <expr_stmt><expr><name pos:line="188" pos:column="17">opt_signal_service<pos:position pos:line="188" pos:column="35"/></name> <operator pos:line="188" pos:column="36">=<pos:position pos:line="188" pos:column="37"/></operator> <literal type="boolean" pos:line="188" pos:column="38">true<pos:position pos:line="188" pos:column="42"/></literal></expr>;<pos:position pos:line="188" pos:column="43"/></expr_stmt>
            }<pos:position pos:line="189" pos:column="14"/></block></then> <else pos:line="189" pos:column="15">else <block pos:line="189" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="190" pos:column="17">fatal<pos:position pos:line="190" pos:column="22"/></name><argument_list pos:line="190" pos:column="22">(<argument><expr><literal type="string" pos:line="190" pos:column="23">"A service name is required for the -n option"<pos:position pos:line="190" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="190" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="190" pos:column="71"/></expr_stmt>
            }<pos:position pos:line="191" pos:column="14"/></block></else></if>
            <break pos:line="192" pos:column="13">break;<pos:position pos:line="192" pos:column="19"/></break>

<cpp:if pos:line="194" pos:column="1">#<cpp:directive pos:line="194" pos:column="2">if<pos:position pos:line="194" pos:column="4"/></cpp:directive> <expr><name pos:line="194" pos:column="5">USE_WIN32_SERVICE<pos:position pos:line="194" pos:column="22"/></name></expr></cpp:if>

        <case pos:line="196" pos:column="9">case <expr><literal type="char" pos:line="196" pos:column="14">'r'<pos:position pos:line="196" pos:column="17"/></literal></expr>:<pos:position pos:line="196" pos:column="18"/></case>
            <comment type="block" format="doxygen" pos:line="197" pos:column="13">/** \par r
             * Set global option opt_remove_service (to TRUE) */</comment>
            <expr_stmt><expr><name pos:line="199" pos:column="13">opt_remove_service<pos:position pos:line="199" pos:column="31"/></name> <operator pos:line="199" pos:column="32">=<pos:position pos:line="199" pos:column="33"/></operator> <name pos:line="199" pos:column="34">TRUE<pos:position pos:line="199" pos:column="38"/></name></expr>;<pos:position pos:line="199" pos:column="39"/></expr_stmt>

            <break pos:line="201" pos:column="13">break;<pos:position pos:line="201" pos:column="19"/></break>

<cpp:endif pos:line="203" pos:column="1">#<cpp:directive pos:line="203" pos:column="2">endif<pos:position pos:line="203" pos:column="7"/></cpp:directive></cpp:endif>

        <case pos:line="205" pos:column="9">case <expr><literal type="char" pos:line="205" pos:column="14">'l'<pos:position pos:line="205" pos:column="17"/></literal></expr>:<pos:position pos:line="205" pos:column="18"/></case>
            <comment type="block" format="doxygen" pos:line="206" pos:column="13">/** \par l
             * Stores the syslog facility name in global opt_syslog_facility
             * then performs actions for -s option. */</comment>
            <expr_stmt><expr><call><name pos:line="209" pos:column="13">xfree<pos:position pos:line="209" pos:column="18"/></name><argument_list pos:line="209" pos:column="18">(<argument><expr><name pos:line="209" pos:column="19">opt_syslog_facility<pos:position pos:line="209" pos:column="38"/></name></expr></argument>)<pos:position pos:line="209" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="209" pos:column="40"/></expr_stmt> <comment type="line" pos:line="209" pos:column="41">// ignore any previous options sent</comment>
            <expr_stmt><expr><name pos:line="210" pos:column="13">opt_syslog_facility<pos:position pos:line="210" pos:column="32"/></name> <operator pos:line="210" pos:column="33">=<pos:position pos:line="210" pos:column="34"/></operator> <call><name pos:line="210" pos:column="35">xstrdup<pos:position pos:line="210" pos:column="42"/></name><argument_list pos:line="210" pos:column="42">(<argument><expr><name pos:line="210" pos:column="43">optarg<pos:position pos:line="210" pos:column="49"/></name></expr></argument>)<pos:position pos:line="210" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="210" pos:column="51"/></expr_stmt>

        <case pos:line="212" pos:column="9">case <expr><literal type="char" pos:line="212" pos:column="14">'s'<pos:position pos:line="212" pos:column="17"/></literal></expr>:<pos:position pos:line="212" pos:column="18"/></case>
            <comment type="block" format="doxygen" pos:line="213" pos:column="13">/** \par s
             * Initialize the syslog for output */</comment>
<cpp:if pos:line="215" pos:column="1">#<cpp:directive pos:line="215" pos:column="2">if<pos:position pos:line="215" pos:column="4"/></cpp:directive> <expr><name pos:line="215" pos:column="5">HAVE_SYSLOG<pos:position pos:line="215" pos:column="16"/></name></expr></cpp:if>

            <expr_stmt><expr><call><name pos:line="217" pos:column="13">_db_set_syslog<pos:position pos:line="217" pos:column="27"/></name><argument_list pos:line="217" pos:column="27">(<argument><expr><name pos:line="217" pos:column="28">opt_syslog_facility<pos:position pos:line="217" pos:column="47"/></name></expr></argument>)<pos:position pos:line="217" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="217" pos:column="49"/></expr_stmt>

            <break pos:line="219" pos:column="13">break;<pos:position pos:line="219" pos:column="19"/></break>

<cpp:else pos:line="221" pos:column="1">#<cpp:directive pos:line="221" pos:column="2">else<pos:position pos:line="221" pos:column="6"/></cpp:directive></cpp:else>

            <expr_stmt><expr><call><name pos:line="223" pos:column="13">fatal<pos:position pos:line="223" pos:column="18"/></name><argument_list pos:line="223" pos:column="18">(<argument><expr><literal type="string" pos:line="223" pos:column="19">"Logging to syslog not available on this platform"<pos:position pos:line="223" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="223" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="223" pos:column="71"/></expr_stmt>

            <comment type="block" pos:line="225" pos:column="13">/* NOTREACHED */</comment>
<cpp:endif pos:line="226" pos:column="1">#<cpp:directive pos:line="226" pos:column="2">endif<pos:position pos:line="226" pos:column="7"/></cpp:directive></cpp:endif>

        <case pos:line="228" pos:column="9">case <expr><literal type="char" pos:line="228" pos:column="14">'u'<pos:position pos:line="228" pos:column="17"/></literal></expr>:<pos:position pos:line="228" pos:column="18"/></case>
            <comment type="block" format="doxygen" pos:line="229" pos:column="13">/** \par u
             * Store the ICP port number given in global option icpPortNumOverride
             * ensuring its a positive number. */</comment>
            <expr_stmt><expr><name pos:line="232" pos:column="13">icpPortNumOverride<pos:position pos:line="232" pos:column="31"/></name> <operator pos:line="232" pos:column="32">=<pos:position pos:line="232" pos:column="33"/></operator> <call><name pos:line="232" pos:column="34">atoi<pos:position pos:line="232" pos:column="38"/></name><argument_list pos:line="232" pos:column="38">(<argument><expr><name pos:line="232" pos:column="39">optarg<pos:position pos:line="232" pos:column="45"/></name></expr></argument>)<pos:position pos:line="232" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="232" pos:column="47"/></expr_stmt>

            <if pos:line="234" pos:column="13">if <condition pos:line="234" pos:column="16">(<expr><name pos:line="234" pos:column="17">icpPortNumOverride<pos:position pos:line="234" pos:column="35"/></name> <operator pos:line="234" pos:column="36">&lt;<pos:position pos:line="234" pos:column="40"/></operator> <literal type="number" pos:line="234" pos:column="38">0<pos:position pos:line="234" pos:column="39"/></literal></expr>)<pos:position pos:line="234" pos:column="40"/></condition><then pos:line="234" pos:column="40">
                <block type="pseudo"><expr_stmt><expr><name pos:line="235" pos:column="17">icpPortNumOverride<pos:position pos:line="235" pos:column="35"/></name> <operator pos:line="235" pos:column="36">=<pos:position pos:line="235" pos:column="37"/></operator> <literal type="number" pos:line="235" pos:column="38">0<pos:position pos:line="235" pos:column="39"/></literal></expr>;<pos:position pos:line="235" pos:column="40"/></expr_stmt></block></then></if>

            <break pos:line="237" pos:column="13">break;<pos:position pos:line="237" pos:column="19"/></break>

        <case pos:line="239" pos:column="9">case <expr><literal type="char" pos:line="239" pos:column="14">'v'<pos:position pos:line="239" pos:column="17"/></literal></expr>:<pos:position pos:line="239" pos:column="18"/></case>
            <comment type="block" format="doxygen" pos:line="240" pos:column="13">/** \par v
             * Display squid version and build information. Then exit. */</comment>
            <expr_stmt><expr><call><name pos:line="242" pos:column="13">printf<pos:position pos:line="242" pos:column="19"/></name><argument_list pos:line="242" pos:column="19">(<argument><expr><literal type="string" pos:line="242" pos:column="20">"Squid Cache: Version %s\n"<pos:position pos:line="242" pos:column="47"/></literal></expr></argument> ,<argument><expr><name pos:line="242" pos:column="49">version_string<pos:position pos:line="242" pos:column="63"/></name></expr></argument>)<pos:position pos:line="242" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="242" pos:column="65"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="243" pos:column="13">printf<pos:position pos:line="243" pos:column="19"/></name><argument_list pos:line="243" pos:column="19">(<argument><expr><literal type="string" pos:line="243" pos:column="20">"Service Name: "<pos:position pos:line="243" pos:column="36"/></literal> <name pos:line="243" pos:column="37">SQUIDSBUFPH<pos:position pos:line="243" pos:column="48"/></name> <literal type="string" pos:line="243" pos:column="49">"\n"<pos:position pos:line="243" pos:column="53"/></literal></expr></argument>, <argument><expr><call><name pos:line="243" pos:column="55">SQUIDSBUFPRINT<pos:position pos:line="243" pos:column="69"/></name><argument_list pos:line="243" pos:column="69">(<argument><expr><name pos:line="243" pos:column="70">service_name<pos:position pos:line="243" pos:column="82"/></name></expr></argument>)<pos:position pos:line="243" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="243" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="243" pos:column="85"/></expr_stmt>
            <if pos:line="244" pos:column="13">if <condition pos:line="244" pos:column="16">(<expr><call><name pos:line="244" pos:column="17">strlen<pos:position pos:line="244" pos:column="23"/></name><argument_list pos:line="244" pos:column="23">(<argument><expr><name pos:line="244" pos:column="24">SQUID_BUILD_INFO<pos:position pos:line="244" pos:column="40"/></name></expr></argument>)<pos:position pos:line="244" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="244" pos:column="42"/></condition><then pos:line="244" pos:column="42">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="245" pos:column="17">printf<pos:position pos:line="245" pos:column="23"/></name><argument_list pos:line="245" pos:column="23">(<argument><expr><literal type="string" pos:line="245" pos:column="24">"%s\n"<pos:position pos:line="245" pos:column="30"/></literal></expr></argument>,<argument><expr><name pos:line="245" pos:column="31">SQUID_BUILD_INFO<pos:position pos:line="245" pos:column="47"/></name></expr></argument>)<pos:position pos:line="245" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="245" pos:column="49"/></expr_stmt></block></then></if>
<cpp:if pos:line="246" pos:column="1">#<cpp:directive pos:line="246" pos:column="2">if<pos:position pos:line="246" pos:column="4"/></cpp:directive> <expr><name pos:line="246" pos:column="5">USE_OPENSSL<pos:position pos:line="246" pos:column="16"/></name></expr></cpp:if>
            <expr_stmt><expr><call><name pos:line="247" pos:column="13">printf<pos:position pos:line="247" pos:column="19"/></name><argument_list pos:line="247" pos:column="19">(<argument><expr><literal type="string" pos:line="247" pos:column="20">"\nThis binary uses %s. "<pos:position pos:line="247" pos:column="45"/></literal></expr></argument>, <argument><expr><call><name pos:line="247" pos:column="47">SSLeay_version<pos:position pos:line="247" pos:column="61"/></name><argument_list pos:line="247" pos:column="61">(<argument><expr><name pos:line="247" pos:column="62">SSLEAY_VERSION<pos:position pos:line="247" pos:column="76"/></name></expr></argument>)<pos:position pos:line="247" pos:column="77"/></argument_list></call></expr></argument>)<pos:position pos:line="247" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="247" pos:column="79"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="248" pos:column="13">printf<pos:position pos:line="248" pos:column="19"/></name><argument_list pos:line="248" pos:column="19">(<argument><expr><literal type="string" pos:line="248" pos:column="20">"For legal restrictions on distribution see https://www.openssl.org/source/license.html\n\n"<pos:position pos:line="248" pos:column="112"/></literal></expr></argument>)<pos:position pos:line="248" pos:column="113"/></argument_list></call></expr>;<pos:position pos:line="248" pos:column="114"/></expr_stmt>
<cpp:endif pos:line="249" pos:column="1">#<cpp:directive pos:line="249" pos:column="2">endif<pos:position pos:line="249" pos:column="7"/></cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name pos:line="250" pos:column="13">printf<pos:position pos:line="250" pos:column="19"/></name><argument_list pos:line="250" pos:column="19">( <argument><expr><literal type="string" pos:line="250" pos:column="21">"configure options: %s\n"<pos:position pos:line="250" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="250" pos:column="48">SQUID_CONFIGURE_OPTIONS<pos:position pos:line="250" pos:column="71"/></name></expr></argument>)<pos:position pos:line="250" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="250" pos:column="73"/></expr_stmt>

<cpp:if pos:line="252" pos:column="1">#<cpp:directive pos:line="252" pos:column="2">if<pos:position pos:line="252" pos:column="4"/></cpp:directive> <expr><name pos:line="252" pos:column="5">USE_WIN32_SERVICE<pos:position pos:line="252" pos:column="22"/></name></expr></cpp:if>

            <expr_stmt><expr><call><name pos:line="254" pos:column="13">printf<pos:position pos:line="254" pos:column="19"/></name><argument_list pos:line="254" pos:column="19">(<argument><expr><literal type="string" pos:line="254" pos:column="20">"Compiled as Windows System Service.\n"<pos:position pos:line="254" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="254" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="254" pos:column="61"/></expr_stmt>

<cpp:endif pos:line="256" pos:column="1">#<cpp:directive pos:line="256" pos:column="2">endif<pos:position pos:line="256" pos:column="7"/></cpp:directive></cpp:endif>

            <expr_stmt><expr><call><name pos:line="258" pos:column="13">exit<pos:position pos:line="258" pos:column="17"/></name><argument_list pos:line="258" pos:column="17">(<argument><expr><literal type="number" pos:line="258" pos:column="18">0<pos:position pos:line="258" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="258" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="258" pos:column="21"/></expr_stmt>

        <comment type="block" pos:line="260" pos:column="9">/* NOTREACHED */</comment>

        <case pos:line="262" pos:column="9">case <expr><literal type="char" pos:line="262" pos:column="14">'z'<pos:position pos:line="262" pos:column="17"/></literal></expr>:<pos:position pos:line="262" pos:column="18"/></case>
            <comment type="block" format="doxygen" pos:line="263" pos:column="13">/** \par z
             * Set global option Debug::log_stderr and opt_create_swap_dirs */</comment>
            <expr_stmt><expr><name><name pos:line="265" pos:column="13">Debug<pos:position pos:line="265" pos:column="18"/></name><operator pos:line="265" pos:column="18">::<pos:position pos:line="265" pos:column="20"/></operator><name pos:line="265" pos:column="20">log_stderr<pos:position pos:line="265" pos:column="30"/></name></name> <operator pos:line="265" pos:column="31">=<pos:position pos:line="265" pos:column="32"/></operator> <literal type="number" pos:line="265" pos:column="33">1<pos:position pos:line="265" pos:column="34"/></literal></expr>;<pos:position pos:line="265" pos:column="35"/></expr_stmt>
            <expr_stmt><expr><name pos:line="266" pos:column="13">opt_create_swap_dirs<pos:position pos:line="266" pos:column="33"/></name> <operator pos:line="266" pos:column="34">=<pos:position pos:line="266" pos:column="35"/></operator> <literal type="number" pos:line="266" pos:column="36">1<pos:position pos:line="266" pos:column="37"/></literal></expr>;<pos:position pos:line="266" pos:column="38"/></expr_stmt>
            <break pos:line="267" pos:column="13">break;<pos:position pos:line="267" pos:column="19"/></break>

        <case pos:line="269" pos:column="9">case <expr><literal type="char" pos:line="269" pos:column="14">'h'<pos:position pos:line="269" pos:column="17"/></literal></expr>:<pos:position pos:line="269" pos:column="18"/></case>

        <case pos:line="271" pos:column="9">case <expr><literal type="char" pos:line="271" pos:column="14">'?'<pos:position pos:line="271" pos:column="17"/></literal></expr>:<pos:position pos:line="271" pos:column="18"/></case>

        <default pos:line="273" pos:column="9">default:<pos:position pos:line="273" pos:column="17"/></default>
            <comment type="block" format="doxygen" pos:line="274" pos:column="13">/** \par h,?, or unknown
             * \copydoc usage() */</comment>
            <expr_stmt><expr><call><name pos:line="276" pos:column="13">usage<pos:position pos:line="276" pos:column="18"/></name><argument_list pos:line="276" pos:column="18">()<pos:position pos:line="276" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="276" pos:column="21"/></expr_stmt>

            <break pos:line="278" pos:column="13">break;<pos:position pos:line="278" pos:column="19"/></break>
        }<pos:position pos:line="279" pos:column="10"/></block></switch>

    }<pos:position pos:line="281" pos:column="6"/></block></while></block></while>
}<pos:position pos:line="282" pos:column="2"/></block></function></unit>
