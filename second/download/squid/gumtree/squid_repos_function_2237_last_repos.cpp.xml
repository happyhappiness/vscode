<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2237_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">tunnelRelayConnectRequest<pos:position pos:line="2" pos:column="26"/></name><parameter_list pos:line="2" pos:column="26">(<parameter><decl><type><specifier pos:line="2" pos:column="27">const<pos:position pos:line="2" pos:column="32"/></specifier> <name><name pos:line="2" pos:column="33">Comm<pos:position pos:line="2" pos:column="37"/></name><operator pos:line="2" pos:column="37">::<pos:position pos:line="2" pos:column="39"/></operator><name pos:line="2" pos:column="39">ConnectionPointer<pos:position pos:line="2" pos:column="56"/></name></name> <modifier pos:line="2" pos:column="57">&amp;<pos:position pos:line="2" pos:column="62"/></modifier></type><name pos:line="2" pos:column="58">srv<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="63">void<pos:position pos:line="2" pos:column="67"/></name> <modifier pos:line="2" pos:column="68">*<pos:position pos:line="2" pos:column="69"/></modifier></type><name pos:line="2" pos:column="69">data<pos:position pos:line="2" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="74"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">TunnelStateData<pos:position pos:line="4" pos:column="20"/></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier></type><name pos:line="4" pos:column="22">tunnelState<pos:position pos:line="4" pos:column="33"/></name> <init pos:line="4" pos:column="34">= <expr><operator pos:line="4" pos:column="36">(<pos:position pos:line="4" pos:column="37"/></operator><name pos:line="4" pos:column="37">TunnelStateData<pos:position pos:line="4" pos:column="52"/></name> <operator pos:line="4" pos:column="53">*<pos:position pos:line="4" pos:column="54"/></operator><operator pos:line="4" pos:column="54">)<pos:position pos:line="4" pos:column="55"/></operator><name pos:line="4" pos:column="55">data<pos:position pos:line="4" pos:column="59"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="60"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><operator pos:line="5" pos:column="12">!<pos:position pos:line="5" pos:column="13"/></operator><call><name><name pos:line="5" pos:column="13">tunnelState<pos:position pos:line="5" pos:column="24"/></name><operator pos:line="5" pos:column="24">-&gt;<pos:position pos:line="5" pos:column="29"/></operator><name pos:line="5" pos:column="26">waitingForConnectExchange<pos:position pos:line="5" pos:column="51"/></name></name><argument_list pos:line="5" pos:column="51">()<pos:position pos:line="5" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="55"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">HttpHeader<pos:position pos:line="6" pos:column="15"/></name></type> <name pos:line="6" pos:column="16">hdr_out<pos:position pos:line="6" pos:column="23"/></name><argument_list pos:line="6" pos:column="23">(<argument><expr><name pos:line="6" pos:column="24">hoRequest<pos:position pos:line="6" pos:column="33"/></name></expr></argument>)<pos:position pos:line="6" pos:column="34"/></argument_list></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="7" pos:column="5">Http<pos:position pos:line="7" pos:column="9"/></name><operator pos:line="7" pos:column="9">::<pos:position pos:line="7" pos:column="11"/></operator><name pos:line="7" pos:column="11">StateFlags<pos:position pos:line="7" pos:column="21"/></name></name></type> <name pos:line="7" pos:column="22">flags<pos:position pos:line="7" pos:column="27"/></name></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">debugs<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><literal type="number" pos:line="8" pos:column="12">26<pos:position pos:line="8" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="16">3<pos:position pos:line="8" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="19">HERE<pos:position pos:line="8" pos:column="23"/></name> <operator pos:line="8" pos:column="24">&lt;&lt;<pos:position pos:line="8" pos:column="32"/></operator> <name pos:line="8" pos:column="27">srv<pos:position pos:line="8" pos:column="30"/></name> <operator pos:line="8" pos:column="31">&lt;&lt;<pos:position pos:line="8" pos:column="39"/></operator> <literal type="string" pos:line="8" pos:column="34">", tunnelState="<pos:position pos:line="8" pos:column="50"/></literal> <operator pos:line="8" pos:column="51">&lt;&lt;<pos:position pos:line="8" pos:column="59"/></operator> <name pos:line="8" pos:column="54">tunnelState<pos:position pos:line="8" pos:column="65"/></name></expr></argument>)<pos:position pos:line="8" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="67"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">memset<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><operator pos:line="9" pos:column="12">&amp;<pos:position pos:line="9" pos:column="17"/></operator><name pos:line="9" pos:column="13">flags<pos:position pos:line="9" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="9" pos:column="20">'\0'<pos:position pos:line="9" pos:column="24"/></literal></expr></argument>, <argument><expr><sizeof pos:line="9" pos:column="26">sizeof<argument_list pos:line="9" pos:column="32">(<argument><expr><name pos:line="9" pos:column="33">flags<pos:position pos:line="9" pos:column="38"/></name></expr></argument>)<pos:position pos:line="9" pos:column="39"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="10" pos:column="5">flags<pos:position pos:line="10" pos:column="10"/></name><operator pos:line="10" pos:column="10">.<pos:position pos:line="10" pos:column="11"/></operator><name pos:line="10" pos:column="11">proxying<pos:position pos:line="10" pos:column="19"/></name></name> <operator pos:line="10" pos:column="20">=<pos:position pos:line="10" pos:column="21"/></operator> <name><name pos:line="10" pos:column="22">tunnelState<pos:position pos:line="10" pos:column="33"/></name><operator pos:line="10" pos:column="33">-&gt;<pos:position pos:line="10" pos:column="38"/></operator><name pos:line="10" pos:column="35">request<pos:position pos:line="10" pos:column="42"/></name><operator pos:line="10" pos:column="42">-&gt;<pos:position pos:line="10" pos:column="47"/></operator><name pos:line="10" pos:column="44">flags<pos:position pos:line="10" pos:column="49"/></name><operator pos:line="10" pos:column="49">.<pos:position pos:line="10" pos:column="50"/></operator><name pos:line="10" pos:column="50">proxying<pos:position pos:line="10" pos:column="58"/></name></name></expr>;<pos:position pos:line="10" pos:column="59"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">MemBuf<pos:position pos:line="11" pos:column="11"/></name></type> <name pos:line="11" pos:column="12">mb<pos:position pos:line="11" pos:column="14"/></name></decl>;<pos:position pos:line="11" pos:column="15"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="12" pos:column="5">mb<pos:position pos:line="12" pos:column="7"/></name><operator pos:line="12" pos:column="7">.<pos:position pos:line="12" pos:column="8"/></operator><name pos:line="12" pos:column="8">init<pos:position pos:line="12" pos:column="12"/></name></name><argument_list pos:line="12" pos:column="12">()<pos:position pos:line="12" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="13" pos:column="5">mb<pos:position pos:line="13" pos:column="7"/></name><operator pos:line="13" pos:column="7">.<pos:position pos:line="13" pos:column="8"/></operator><name pos:line="13" pos:column="8">appendf<pos:position pos:line="13" pos:column="15"/></name></name><argument_list pos:line="13" pos:column="15">(<argument><expr><literal type="string" pos:line="13" pos:column="16">"CONNECT %s HTTP/1.1\r\n"<pos:position pos:line="13" pos:column="41"/></literal></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="43">tunnelState<pos:position pos:line="13" pos:column="54"/></name><operator pos:line="13" pos:column="54">-&gt;<pos:position pos:line="13" pos:column="59"/></operator><name pos:line="13" pos:column="56">url<pos:position pos:line="13" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="61"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="14" pos:column="5">HttpStateData<pos:position pos:line="14" pos:column="18"/></name><operator pos:line="14" pos:column="18">::<pos:position pos:line="14" pos:column="20"/></operator><name pos:line="14" pos:column="20">httpBuildRequestHeader<pos:position pos:line="14" pos:column="42"/></name></name><argument_list pos:line="14" pos:column="42">(<argument><expr><call><name><name pos:line="14" pos:column="43">tunnelState<pos:position pos:line="14" pos:column="54"/></name><operator pos:line="14" pos:column="54">-&gt;<pos:position pos:line="14" pos:column="59"/></operator><name pos:line="14" pos:column="56">request<pos:position pos:line="14" pos:column="63"/></name><operator pos:line="14" pos:column="63">.<pos:position pos:line="14" pos:column="64"/></operator><name pos:line="14" pos:column="64">getRaw<pos:position pos:line="14" pos:column="70"/></name></name><argument_list pos:line="14" pos:column="70">()<pos:position pos:line="14" pos:column="72"/></argument_list></call></expr></argument>,
                                          <argument><expr><name pos:line="15" pos:column="43">NULL<pos:position pos:line="15" pos:column="47"/></name></expr></argument>,         <comment type="block" pos:line="15" pos:column="57">/* StoreEntry */</comment>
                                          <argument><expr><name><name pos:line="16" pos:column="43">tunnelState<pos:position pos:line="16" pos:column="54"/></name><operator pos:line="16" pos:column="54">-&gt;<pos:position pos:line="16" pos:column="59"/></operator><name pos:line="16" pos:column="56">al<pos:position pos:line="16" pos:column="58"/></name></name></expr></argument>,          <comment type="block" pos:line="16" pos:column="69">/* AccessLogEntry */</comment>
                                          <argument><expr><operator pos:line="17" pos:column="43">&amp;<pos:position pos:line="17" pos:column="48"/></operator><name pos:line="17" pos:column="44">hdr_out<pos:position pos:line="17" pos:column="51"/></name></expr></argument>,
                                          <argument><expr><name pos:line="18" pos:column="43">flags<pos:position pos:line="18" pos:column="48"/></name></expr></argument>)<pos:position pos:line="18" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="50"/></expr_stmt>           <comment type="block" pos:line="18" pos:column="61">/* flags */</comment>
    <expr_stmt><expr><call><name><name pos:line="19" pos:column="5">hdr_out<pos:position pos:line="19" pos:column="12"/></name><operator pos:line="19" pos:column="12">.<pos:position pos:line="19" pos:column="13"/></operator><name pos:line="19" pos:column="13">packInto<pos:position pos:line="19" pos:column="21"/></name></name><argument_list pos:line="19" pos:column="21">(<argument><expr><operator pos:line="19" pos:column="22">&amp;<pos:position pos:line="19" pos:column="27"/></operator><name pos:line="19" pos:column="23">mb<pos:position pos:line="19" pos:column="25"/></name></expr></argument>)<pos:position pos:line="19" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="20" pos:column="5">hdr_out<pos:position pos:line="20" pos:column="12"/></name><operator pos:line="20" pos:column="12">.<pos:position pos:line="20" pos:column="13"/></operator><name pos:line="20" pos:column="13">clean<pos:position pos:line="20" pos:column="18"/></name></name><argument_list pos:line="20" pos:column="18">()<pos:position pos:line="20" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="21" pos:column="5">mb<pos:position pos:line="21" pos:column="7"/></name><operator pos:line="21" pos:column="7">.<pos:position pos:line="21" pos:column="8"/></operator><name pos:line="21" pos:column="8">append<pos:position pos:line="21" pos:column="14"/></name></name><argument_list pos:line="21" pos:column="14">(<argument><expr><literal type="string" pos:line="21" pos:column="15">"\r\n"<pos:position pos:line="21" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="23">2<pos:position pos:line="21" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="26"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="23" pos:column="5">debugs<pos:position pos:line="23" pos:column="11"/></name><argument_list pos:line="23" pos:column="11">(<argument><expr><literal type="number" pos:line="23" pos:column="12">11<pos:position pos:line="23" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="16">2<pos:position pos:line="23" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="19">"Tunnel Server REQUEST: "<pos:position pos:line="23" pos:column="44"/></literal> <operator pos:line="23" pos:column="45">&lt;&lt;<pos:position pos:line="23" pos:column="53"/></operator> <name><name pos:line="23" pos:column="48">tunnelState<pos:position pos:line="23" pos:column="59"/></name><operator pos:line="23" pos:column="59">-&gt;<pos:position pos:line="23" pos:column="64"/></operator><name pos:line="23" pos:column="61">server<pos:position pos:line="23" pos:column="67"/></name><operator pos:line="23" pos:column="67">.<pos:position pos:line="23" pos:column="68"/></operator><name pos:line="23" pos:column="68">conn<pos:position pos:line="23" pos:column="72"/></name></name> <operator pos:line="23" pos:column="73">&lt;&lt;<pos:position pos:line="23" pos:column="81"/></operator>
           <literal type="string" pos:line="24" pos:column="12">":\n----------\n"<pos:position pos:line="24" pos:column="29"/></literal> <operator pos:line="24" pos:column="30">&lt;&lt;<pos:position pos:line="24" pos:column="38"/></operator> <name><name pos:line="24" pos:column="33">mb<pos:position pos:line="24" pos:column="35"/></name><operator pos:line="24" pos:column="35">.<pos:position pos:line="24" pos:column="36"/></operator><name pos:line="24" pos:column="36">buf<pos:position pos:line="24" pos:column="39"/></name></name> <operator pos:line="24" pos:column="40">&lt;&lt;<pos:position pos:line="24" pos:column="48"/></operator> <literal type="string" pos:line="24" pos:column="43">"\n----------"<pos:position pos:line="24" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="59"/></expr_stmt>

    <decl_stmt><decl><type><name><name pos:line="26" pos:column="5">AsyncCall<pos:position pos:line="26" pos:column="14"/></name><operator pos:line="26" pos:column="14">::<pos:position pos:line="26" pos:column="16"/></operator><name pos:line="26" pos:column="16">Pointer<pos:position pos:line="26" pos:column="23"/></name></name></type> <name pos:line="26" pos:column="24">writeCall<pos:position pos:line="26" pos:column="33"/></name> <init pos:line="26" pos:column="34">= <expr><call><name pos:line="26" pos:column="36">commCbCall<pos:position pos:line="26" pos:column="46"/></name><argument_list pos:line="26" pos:column="46">(<argument><expr><literal type="number" pos:line="26" pos:column="47">5<pos:position pos:line="26" pos:column="48"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="26" pos:column="49">5<pos:position pos:line="26" pos:column="50"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="52">"tunnelConnectReqWriteDone"<pos:position pos:line="26" pos:column="79"/></literal></expr></argument>,
                                   <argument><expr><call><name pos:line="27" pos:column="36">CommIoCbPtrFun<pos:position pos:line="27" pos:column="50"/></name><argument_list pos:line="27" pos:column="50">(<argument><expr><name pos:line="27" pos:column="51">tunnelConnectReqWriteDone<pos:position pos:line="27" pos:column="76"/></name></expr></argument>,
                                           <argument><expr><name pos:line="28" pos:column="44">tunnelState<pos:position pos:line="28" pos:column="55"/></name></expr></argument>)<pos:position pos:line="28" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="28" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="28" pos:column="58"/></decl_stmt>

    <expr_stmt><expr><call><name><name pos:line="30" pos:column="5">tunnelState<pos:position pos:line="30" pos:column="16"/></name><operator pos:line="30" pos:column="16">-&gt;<pos:position pos:line="30" pos:column="21"/></operator><name pos:line="30" pos:column="18">server<pos:position pos:line="30" pos:column="24"/></name><operator pos:line="30" pos:column="24">.<pos:position pos:line="30" pos:column="25"/></operator><name pos:line="30" pos:column="25">write<pos:position pos:line="30" pos:column="30"/></name></name><argument_list pos:line="30" pos:column="30">(<argument><expr><name><name pos:line="30" pos:column="31">mb<pos:position pos:line="30" pos:column="33"/></name><operator pos:line="30" pos:column="33">.<pos:position pos:line="30" pos:column="34"/></operator><name pos:line="30" pos:column="34">buf<pos:position pos:line="30" pos:column="37"/></name></name></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="39">mb<pos:position pos:line="30" pos:column="41"/></name><operator pos:line="30" pos:column="41">.<pos:position pos:line="30" pos:column="42"/></operator><name pos:line="30" pos:column="42">size<pos:position pos:line="30" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="48">writeCall<pos:position pos:line="30" pos:column="57"/></name></expr></argument>, <argument><expr><call><name><name pos:line="30" pos:column="59">mb<pos:position pos:line="30" pos:column="61"/></name><operator pos:line="30" pos:column="61">.<pos:position pos:line="30" pos:column="62"/></operator><name pos:line="30" pos:column="62">freeFunc<pos:position pos:line="30" pos:column="70"/></name></name><argument_list pos:line="30" pos:column="70">()<pos:position pos:line="30" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="74"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="31" pos:column="5">tunnelState<pos:position pos:line="31" pos:column="16"/></name><operator pos:line="31" pos:column="16">-&gt;<pos:position pos:line="31" pos:column="21"/></operator><name pos:line="31" pos:column="18">connectReqWriting<pos:position pos:line="31" pos:column="35"/></name></name> <operator pos:line="31" pos:column="36">=<pos:position pos:line="31" pos:column="37"/></operator> <literal type="boolean" pos:line="31" pos:column="38">true<pos:position pos:line="31" pos:column="42"/></literal></expr>;<pos:position pos:line="31" pos:column="43"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="33" pos:column="5">tunnelState<pos:position pos:line="33" pos:column="16"/></name><operator pos:line="33" pos:column="16">-&gt;<pos:position pos:line="33" pos:column="21"/></operator><name pos:line="33" pos:column="18">connectRespBuf<pos:position pos:line="33" pos:column="32"/></name></name> <operator pos:line="33" pos:column="33">=<pos:position pos:line="33" pos:column="34"/></operator> <operator pos:line="33" pos:column="35">new<pos:position pos:line="33" pos:column="38"/></operator> <name pos:line="33" pos:column="39">MemBuf<pos:position pos:line="33" pos:column="45"/></name></expr>;<pos:position pos:line="33" pos:column="46"/></expr_stmt>
    <comment type="line" pos:line="34" pos:column="5">// SQUID_TCP_SO_RCVBUF: we should not accumulate more than regular I/O buffer</comment>
    <comment type="line" pos:line="35" pos:column="5">// can hold since any CONNECT response leftovers have to fit into server.buf.</comment>
    <comment type="line" pos:line="36" pos:column="5">// 2*SQUID_TCP_SO_RCVBUF: HttpMsg::parse() zero-terminates, which uses space.</comment>
    <expr_stmt><expr><call><name><name pos:line="37" pos:column="5">tunnelState<pos:position pos:line="37" pos:column="16"/></name><operator pos:line="37" pos:column="16">-&gt;<pos:position pos:line="37" pos:column="21"/></operator><name pos:line="37" pos:column="18">connectRespBuf<pos:position pos:line="37" pos:column="32"/></name><operator pos:line="37" pos:column="32">-&gt;<pos:position pos:line="37" pos:column="37"/></operator><name pos:line="37" pos:column="34">init<pos:position pos:line="37" pos:column="38"/></name></name><argument_list pos:line="37" pos:column="38">(<argument><expr><name pos:line="37" pos:column="39">SQUID_TCP_SO_RCVBUF<pos:position pos:line="37" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="60">2<pos:position pos:line="37" pos:column="61"/></literal><operator pos:line="37" pos:column="61">*<pos:position pos:line="37" pos:column="62"/></operator><name pos:line="37" pos:column="62">SQUID_TCP_SO_RCVBUF<pos:position pos:line="37" pos:column="81"/></name></expr></argument>)<pos:position pos:line="37" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="83"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="38" pos:column="5">tunnelState<pos:position pos:line="38" pos:column="16"/></name><operator pos:line="38" pos:column="16">-&gt;<pos:position pos:line="38" pos:column="21"/></operator><name pos:line="38" pos:column="18">readConnectResponse<pos:position pos:line="38" pos:column="37"/></name></name><argument_list pos:line="38" pos:column="37">()<pos:position pos:line="38" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="40"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="40" pos:column="5">assert<pos:position pos:line="40" pos:column="11"/></name><argument_list pos:line="40" pos:column="11">(<argument><expr><call><name><name pos:line="40" pos:column="12">tunnelState<pos:position pos:line="40" pos:column="23"/></name><operator pos:line="40" pos:column="23">-&gt;<pos:position pos:line="40" pos:column="28"/></operator><name pos:line="40" pos:column="25">waitingForConnectExchange<pos:position pos:line="40" pos:column="50"/></name></name><argument_list pos:line="40" pos:column="50">()<pos:position pos:line="40" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="40" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="54"/></expr_stmt>

    <decl_stmt><decl><type><name><name pos:line="42" pos:column="5">AsyncCall<pos:position pos:line="42" pos:column="14"/></name><operator pos:line="42" pos:column="14">::<pos:position pos:line="42" pos:column="16"/></operator><name pos:line="42" pos:column="16">Pointer<pos:position pos:line="42" pos:column="23"/></name></name></type> <name pos:line="42" pos:column="24">timeoutCall<pos:position pos:line="42" pos:column="35"/></name> <init pos:line="42" pos:column="36">= <expr><call><name pos:line="42" pos:column="38">commCbCall<pos:position pos:line="42" pos:column="48"/></name><argument_list pos:line="42" pos:column="48">(<argument><expr><literal type="number" pos:line="42" pos:column="49">5<pos:position pos:line="42" pos:column="50"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="42" pos:column="52">4<pos:position pos:line="42" pos:column="53"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="55">"tunnelTimeout"<pos:position pos:line="42" pos:column="70"/></literal></expr></argument>,
                                     <argument><expr><call><name pos:line="43" pos:column="38">CommTimeoutCbPtrFun<pos:position pos:line="43" pos:column="57"/></name><argument_list pos:line="43" pos:column="57">(<argument><expr><name pos:line="43" pos:column="58">tunnelTimeout<pos:position pos:line="43" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="73">tunnelState<pos:position pos:line="43" pos:column="84"/></name></expr></argument>)<pos:position pos:line="43" pos:column="85"/></argument_list></call></expr></argument>)<pos:position pos:line="43" pos:column="86"/></argument_list></call></expr></init></decl>;<pos:position pos:line="43" pos:column="87"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="44" pos:column="5">commSetConnTimeout<pos:position pos:line="44" pos:column="23"/></name><argument_list pos:line="44" pos:column="23">(<argument><expr><name pos:line="44" pos:column="24">srv<pos:position pos:line="44" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="44" pos:column="29">Config<pos:position pos:line="44" pos:column="35"/></name><operator pos:line="44" pos:column="35">.<pos:position pos:line="44" pos:column="36"/></operator><name pos:line="44" pos:column="36">Timeout<pos:position pos:line="44" pos:column="43"/></name><operator pos:line="44" pos:column="43">.<pos:position pos:line="44" pos:column="44"/></operator><name pos:line="44" pos:column="44">read<pos:position pos:line="44" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="50">timeoutCall<pos:position pos:line="44" pos:column="61"/></name></expr></argument>)<pos:position pos:line="44" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="63"/></expr_stmt>
}<pos:position pos:line="45" pos:column="2"/></block></function></unit>
