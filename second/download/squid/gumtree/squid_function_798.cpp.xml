<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_function_798.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">aclParseAccessLine<pos:position pos:line="2" pos:column="19"/></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><specifier pos:line="2" pos:column="20">const<pos:position pos:line="2" pos:column="25"/></specifier> <name pos:line="2" pos:column="26">char<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type><name pos:line="2" pos:column="32">directive<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="43">ConfigParser<pos:position pos:line="2" pos:column="55"/></name> <modifier pos:line="2" pos:column="56">&amp;<pos:position pos:line="2" pos:column="61"/></modifier></type></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="59">acl_access<pos:position pos:line="2" pos:column="69"/></name> <modifier pos:line="2" pos:column="70">*<pos:position pos:line="2" pos:column="71"/></modifier><modifier pos:line="2" pos:column="71">*<pos:position pos:line="2" pos:column="72"/></modifier></type><name pos:line="2" pos:column="72">treep<pos:position pos:line="2" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="78"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/* first expect either 'allow' or 'deny' */</comment>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">char<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">t<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><call><name><name pos:line="5" pos:column="21">ConfigParser<pos:position pos:line="5" pos:column="33"/></name><operator pos:line="5" pos:column="33">::<pos:position pos:line="5" pos:column="35"/></operator><name pos:line="5" pos:column="35">strtokFile<pos:position pos:line="5" pos:column="45"/></name></name><argument_list pos:line="5" pos:column="45">()<pos:position pos:line="5" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="48"/></decl_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><operator pos:line="7" pos:column="9">!<pos:position pos:line="7" pos:column="10"/></operator><name pos:line="7" pos:column="10">t<pos:position pos:line="7" pos:column="11"/></name></expr>)<pos:position pos:line="7" pos:column="12"/></condition><then pos:line="7" pos:column="12"> <block pos:line="7" pos:column="13">{
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">debugs<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><literal type="number" pos:line="8" pos:column="16">28<pos:position pos:line="8" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="20">DBG_CRITICAL<pos:position pos:line="8" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="34">"aclParseAccessLine: "<pos:position pos:line="8" pos:column="56"/></literal> <operator pos:line="8" pos:column="57">&lt;&lt;<pos:position pos:line="8" pos:column="65"/></operator> <name pos:line="8" pos:column="60">cfg_filename<pos:position pos:line="8" pos:column="72"/></name> <operator pos:line="8" pos:column="73">&lt;&lt;<pos:position pos:line="8" pos:column="81"/></operator> <literal type="string" pos:line="8" pos:column="76">" line "<pos:position pos:line="8" pos:column="84"/></literal> <operator pos:line="8" pos:column="85">&lt;&lt;<pos:position pos:line="8" pos:column="93"/></operator> <name pos:line="8" pos:column="88">config_lineno<pos:position pos:line="8" pos:column="101"/></name> <operator pos:line="8" pos:column="102">&lt;&lt;<pos:position pos:line="8" pos:column="110"/></operator> <literal type="string" pos:line="8" pos:column="105">": "<pos:position pos:line="8" pos:column="109"/></literal> <operator pos:line="8" pos:column="110">&lt;&lt;<pos:position pos:line="8" pos:column="118"/></operator> <name pos:line="8" pos:column="113">config_input_line<pos:position pos:line="8" pos:column="130"/></name></expr></argument>)<pos:position pos:line="8" pos:column="131"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="132"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">debugs<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><literal type="number" pos:line="9" pos:column="16">28<pos:position pos:line="9" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="20">DBG_CRITICAL<pos:position pos:line="9" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="34">"aclParseAccessLine: missing 'allow' or 'deny'."<pos:position pos:line="9" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="84"/></expr_stmt>
        <return pos:line="10" pos:column="9">return;<pos:position pos:line="10" pos:column="16"/></return>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="13" pos:column="5">allow_t<pos:position pos:line="13" pos:column="12"/></name></type> <name pos:line="13" pos:column="13">action<pos:position pos:line="13" pos:column="19"/></name> <init pos:line="13" pos:column="20">= <expr><name pos:line="13" pos:column="22">ACCESS_DUNNO<pos:position pos:line="13" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="35"/></decl_stmt>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><operator pos:line="14" pos:column="9">!<pos:position pos:line="14" pos:column="10"/></operator><call><name pos:line="14" pos:column="10">strcmp<pos:position pos:line="14" pos:column="16"/></name><argument_list pos:line="14" pos:column="16">(<argument><expr><name pos:line="14" pos:column="17">t<pos:position pos:line="14" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="20">"allow"<pos:position pos:line="14" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="29"/></condition><then pos:line="14" pos:column="29">
        <block type="pseudo"><expr_stmt><expr><name pos:line="15" pos:column="9">action<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">=<pos:position pos:line="15" pos:column="17"/></operator> <name pos:line="15" pos:column="18">ACCESS_ALLOWED<pos:position pos:line="15" pos:column="32"/></name></expr>;<pos:position pos:line="15" pos:column="33"/></expr_stmt></block></then>
    <elseif pos:line="16" pos:column="5">else <if pos:line="16" pos:column="10">if <condition pos:line="16" pos:column="13">(<expr><operator pos:line="16" pos:column="14">!<pos:position pos:line="16" pos:column="15"/></operator><call><name pos:line="16" pos:column="15">strcmp<pos:position pos:line="16" pos:column="21"/></name><argument_list pos:line="16" pos:column="21">(<argument><expr><name pos:line="16" pos:column="22">t<pos:position pos:line="16" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="25">"deny"<pos:position pos:line="16" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="33"/></condition><then pos:line="16" pos:column="33">
        <block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="9">action<pos:position pos:line="17" pos:column="15"/></name> <operator pos:line="17" pos:column="16">=<pos:position pos:line="17" pos:column="17"/></operator> <name pos:line="17" pos:column="18">ACCESS_DENIED<pos:position pos:line="17" pos:column="31"/></name></expr>;<pos:position pos:line="17" pos:column="32"/></expr_stmt></block></then></if></elseif>
    <else pos:line="18" pos:column="5">else <block pos:line="18" pos:column="10">{
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">debugs<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><literal type="number" pos:line="19" pos:column="16">28<pos:position pos:line="19" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="20">DBG_CRITICAL<pos:position pos:line="19" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="34">"aclParseAccessLine: "<pos:position pos:line="19" pos:column="56"/></literal> <operator pos:line="19" pos:column="57">&lt;&lt;<pos:position pos:line="19" pos:column="65"/></operator> <name pos:line="19" pos:column="60">cfg_filename<pos:position pos:line="19" pos:column="72"/></name> <operator pos:line="19" pos:column="73">&lt;&lt;<pos:position pos:line="19" pos:column="81"/></operator> <literal type="string" pos:line="19" pos:column="76">" line "<pos:position pos:line="19" pos:column="84"/></literal> <operator pos:line="19" pos:column="85">&lt;&lt;<pos:position pos:line="19" pos:column="93"/></operator> <name pos:line="19" pos:column="88">config_lineno<pos:position pos:line="19" pos:column="101"/></name> <operator pos:line="19" pos:column="102">&lt;&lt;<pos:position pos:line="19" pos:column="110"/></operator> <literal type="string" pos:line="19" pos:column="105">": "<pos:position pos:line="19" pos:column="109"/></literal> <operator pos:line="19" pos:column="110">&lt;&lt;<pos:position pos:line="19" pos:column="118"/></operator> <name pos:line="19" pos:column="113">config_input_line<pos:position pos:line="19" pos:column="130"/></name></expr></argument>)<pos:position pos:line="19" pos:column="131"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="132"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">debugs<pos:position pos:line="20" pos:column="15"/></name><argument_list pos:line="20" pos:column="15">(<argument><expr><literal type="number" pos:line="20" pos:column="16">28<pos:position pos:line="20" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="20">DBG_CRITICAL<pos:position pos:line="20" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="34">"aclParseAccessLine: expecting 'allow' or 'deny', got '"<pos:position pos:line="20" pos:column="90"/></literal> <operator pos:line="20" pos:column="91">&lt;&lt;<pos:position pos:line="20" pos:column="99"/></operator> <name pos:line="20" pos:column="94">t<pos:position pos:line="20" pos:column="95"/></name> <operator pos:line="20" pos:column="96">&lt;&lt;<pos:position pos:line="20" pos:column="104"/></operator> <literal type="string" pos:line="20" pos:column="99">"'."<pos:position pos:line="20" pos:column="103"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="104"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="105"/></expr_stmt>
        <return pos:line="21" pos:column="9">return;<pos:position pos:line="21" pos:column="16"/></return>
    }<pos:position pos:line="22" pos:column="6"/></block></else></if>

    <decl_stmt><decl><type><specifier pos:line="24" pos:column="5">const<pos:position pos:line="24" pos:column="10"/></specifier> <name pos:line="24" pos:column="11">int<pos:position pos:line="24" pos:column="14"/></name></type> <name pos:line="24" pos:column="15">ruleId<pos:position pos:line="24" pos:column="21"/></name> <init pos:line="24" pos:column="22">= <expr><operator pos:line="24" pos:column="24">(<pos:position pos:line="24" pos:column="25"/></operator><ternary><condition><expr><operator pos:line="24" pos:column="25">(<pos:position pos:line="24" pos:column="26"/></operator><name pos:line="24" pos:column="26">treep<pos:position pos:line="24" pos:column="31"/></name> <operator pos:line="24" pos:column="32">&amp;&amp;<pos:position pos:line="24" pos:column="42"/></operator> <operator pos:line="24" pos:column="35">*<pos:position pos:line="24" pos:column="36"/></operator><name pos:line="24" pos:column="36">treep<pos:position pos:line="24" pos:column="41"/></name><operator pos:line="24" pos:column="41">)<pos:position pos:line="24" pos:column="42"/></operator></expr> ?<pos:position pos:line="24" pos:column="44"/></condition><then pos:line="24" pos:column="44"> <expr><call><name><operator pos:line="24" pos:column="45">(<pos:position pos:line="24" pos:column="46"/></operator><operator pos:line="24" pos:column="46">*<pos:position pos:line="24" pos:column="47"/></operator><name pos:line="24" pos:column="47">treep<pos:position pos:line="24" pos:column="52"/></name><operator pos:line="24" pos:column="52">)<pos:position pos:line="24" pos:column="53"/></operator><operator pos:line="24" pos:column="53">-&gt;<pos:position pos:line="24" pos:column="58"/></operator><name pos:line="24" pos:column="55">childrenCount<pos:position pos:line="24" pos:column="68"/></name></name><argument_list pos:line="24" pos:column="68">()<pos:position pos:line="24" pos:column="70"/></argument_list></call></expr> <pos:position pos:line="24" pos:column="71"/></then><else pos:line="24" pos:column="71">: <expr><literal type="number" pos:line="24" pos:column="73">0<pos:position pos:line="24" pos:column="74"/></literal></expr></else></ternary><operator pos:line="24" pos:column="74">)<pos:position pos:line="24" pos:column="75"/></operator> <operator pos:line="24" pos:column="76">+<pos:position pos:line="24" pos:column="77"/></operator> <literal type="number" pos:line="24" pos:column="78">1<pos:position pos:line="24" pos:column="79"/></literal></expr></init></decl>;<pos:position pos:line="24" pos:column="80"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="25" pos:column="5">MemBuf<pos:position pos:line="25" pos:column="11"/></name></type> <name pos:line="25" pos:column="12">ctxBuf<pos:position pos:line="25" pos:column="18"/></name></decl>;<pos:position pos:line="25" pos:column="19"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="26" pos:column="5">ctxBuf<pos:position pos:line="26" pos:column="11"/></name><operator pos:line="26" pos:column="11">.<pos:position pos:line="26" pos:column="12"/></operator><name pos:line="26" pos:column="12">init<pos:position pos:line="26" pos:column="16"/></name></name><argument_list pos:line="26" pos:column="16">()<pos:position pos:line="26" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="27" pos:column="5">ctxBuf<pos:position pos:line="27" pos:column="11"/></name><operator pos:line="27" pos:column="11">.<pos:position pos:line="27" pos:column="12"/></operator><name pos:line="27" pos:column="12">Printf<pos:position pos:line="27" pos:column="18"/></name></name><argument_list pos:line="27" pos:column="18">(<argument><expr><literal type="string" pos:line="27" pos:column="19">"%s#%d"<pos:position pos:line="27" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="28">directive<pos:position pos:line="27" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="39">ruleId<pos:position pos:line="27" pos:column="45"/></name></expr></argument>)<pos:position pos:line="27" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="28" pos:column="5">ctxBuf<pos:position pos:line="28" pos:column="11"/></name><operator pos:line="28" pos:column="11">.<pos:position pos:line="28" pos:column="12"/></operator><name pos:line="28" pos:column="12">terminate<pos:position pos:line="28" pos:column="21"/></name></name><argument_list pos:line="28" pos:column="21">()<pos:position pos:line="28" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="24"/></expr_stmt>

    <decl_stmt><decl><type><name><name pos:line="30" pos:column="5">Acl<pos:position pos:line="30" pos:column="8"/></name><operator pos:line="30" pos:column="8">::<pos:position pos:line="30" pos:column="10"/></operator><name pos:line="30" pos:column="10">AndNode<pos:position pos:line="30" pos:column="17"/></name></name> <modifier pos:line="30" pos:column="18">*<pos:position pos:line="30" pos:column="19"/></modifier></type><name pos:line="30" pos:column="19">rule<pos:position pos:line="30" pos:column="23"/></name> <init pos:line="30" pos:column="24">= <expr><operator pos:line="30" pos:column="26">new<pos:position pos:line="30" pos:column="29"/></operator> <name><name pos:line="30" pos:column="30">Acl<pos:position pos:line="30" pos:column="33"/></name><operator pos:line="30" pos:column="33">::<pos:position pos:line="30" pos:column="35"/></operator><name pos:line="30" pos:column="35">AndNode<pos:position pos:line="30" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="30" pos:column="43"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="31" pos:column="5">rule<pos:position pos:line="31" pos:column="9"/></name><operator pos:line="31" pos:column="9">-&gt;<pos:position pos:line="31" pos:column="14"/></operator><name pos:line="31" pos:column="11">context<pos:position pos:line="31" pos:column="18"/></name></name><argument_list pos:line="31" pos:column="18">(<argument><expr><call><name><name pos:line="31" pos:column="19">ctxBuf<pos:position pos:line="31" pos:column="25"/></name><operator pos:line="31" pos:column="25">.<pos:position pos:line="31" pos:column="26"/></operator><name pos:line="31" pos:column="26">content<pos:position pos:line="31" pos:column="33"/></name></name><argument_list pos:line="31" pos:column="33">()<pos:position pos:line="31" pos:column="35"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="31" pos:column="37">config_input_line<pos:position pos:line="31" pos:column="54"/></name></expr></argument>)<pos:position pos:line="31" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="56"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="32" pos:column="5">rule<pos:position pos:line="32" pos:column="9"/></name><operator pos:line="32" pos:column="9">-&gt;<pos:position pos:line="32" pos:column="14"/></operator><name pos:line="32" pos:column="11">lineParse<pos:position pos:line="32" pos:column="20"/></name></name><argument_list pos:line="32" pos:column="20">()<pos:position pos:line="32" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="23"/></expr_stmt>
    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><call><name><name pos:line="33" pos:column="9">rule<pos:position pos:line="33" pos:column="13"/></name><operator pos:line="33" pos:column="13">-&gt;<pos:position pos:line="33" pos:column="18"/></operator><name pos:line="33" pos:column="15">empty<pos:position pos:line="33" pos:column="20"/></name></name><argument_list pos:line="33" pos:column="20">()<pos:position pos:line="33" pos:column="22"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="23"/></condition><then pos:line="33" pos:column="23"> <block pos:line="33" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="34" pos:column="9">debugs<pos:position pos:line="34" pos:column="15"/></name><argument_list pos:line="34" pos:column="15">(<argument><expr><literal type="number" pos:line="34" pos:column="16">28<pos:position pos:line="34" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="20">DBG_CRITICAL<pos:position pos:line="34" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="34">"aclParseAccessLine: "<pos:position pos:line="34" pos:column="56"/></literal> <operator pos:line="34" pos:column="57">&lt;&lt;<pos:position pos:line="34" pos:column="65"/></operator> <name pos:line="34" pos:column="60">cfg_filename<pos:position pos:line="34" pos:column="72"/></name> <operator pos:line="34" pos:column="73">&lt;&lt;<pos:position pos:line="34" pos:column="81"/></operator> <literal type="string" pos:line="34" pos:column="76">" line "<pos:position pos:line="34" pos:column="84"/></literal> <operator pos:line="34" pos:column="85">&lt;&lt;<pos:position pos:line="34" pos:column="93"/></operator> <name pos:line="34" pos:column="88">config_lineno<pos:position pos:line="34" pos:column="101"/></name> <operator pos:line="34" pos:column="102">&lt;&lt;<pos:position pos:line="34" pos:column="110"/></operator> <literal type="string" pos:line="34" pos:column="105">": "<pos:position pos:line="34" pos:column="109"/></literal> <operator pos:line="34" pos:column="110">&lt;&lt;<pos:position pos:line="34" pos:column="118"/></operator> <name pos:line="34" pos:column="113">config_input_line<pos:position pos:line="34" pos:column="130"/></name></expr></argument>)<pos:position pos:line="34" pos:column="131"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="132"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">debugs<pos:position pos:line="35" pos:column="15"/></name><argument_list pos:line="35" pos:column="15">(<argument><expr><literal type="number" pos:line="35" pos:column="16">28<pos:position pos:line="35" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="20">DBG_CRITICAL<pos:position pos:line="35" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="34">"aclParseAccessLine: Access line contains no ACL's, skipping"<pos:position pos:line="35" pos:column="95"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="96"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="97"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="36" pos:column="9">delete<pos:position pos:line="36" pos:column="15"/></operator> <name pos:line="36" pos:column="16">rule<pos:position pos:line="36" pos:column="20"/></name></expr>;<pos:position pos:line="36" pos:column="21"/></expr_stmt>
        <return pos:line="37" pos:column="9">return;<pos:position pos:line="37" pos:column="16"/></return>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="40" pos:column="5">/* Append to the end of this list */</comment>

    <expr_stmt><expr><call><name pos:line="42" pos:column="5">assert<pos:position pos:line="42" pos:column="11"/></name><argument_list pos:line="42" pos:column="11">(<argument><expr><name pos:line="42" pos:column="12">treep<pos:position pos:line="42" pos:column="17"/></name></expr></argument>)<pos:position pos:line="42" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="19"/></expr_stmt>
    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><operator pos:line="43" pos:column="9">!<pos:position pos:line="43" pos:column="10"/></operator><operator pos:line="43" pos:column="10">*<pos:position pos:line="43" pos:column="11"/></operator><name pos:line="43" pos:column="11">treep<pos:position pos:line="43" pos:column="16"/></name></expr>)<pos:position pos:line="43" pos:column="17"/></condition><then pos:line="43" pos:column="17"> <block pos:line="43" pos:column="18">{
        <expr_stmt><expr><operator pos:line="44" pos:column="9">*<pos:position pos:line="44" pos:column="10"/></operator><name pos:line="44" pos:column="10">treep<pos:position pos:line="44" pos:column="15"/></name> <operator pos:line="44" pos:column="16">=<pos:position pos:line="44" pos:column="17"/></operator> <operator pos:line="44" pos:column="18">new<pos:position pos:line="44" pos:column="21"/></operator> <name><name pos:line="44" pos:column="22">Acl<pos:position pos:line="44" pos:column="25"/></name><operator pos:line="44" pos:column="25">::<pos:position pos:line="44" pos:column="27"/></operator><name pos:line="44" pos:column="27">Tree<pos:position pos:line="44" pos:column="31"/></name></name></expr>;<pos:position pos:line="44" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><call><name><operator pos:line="45" pos:column="9">(<pos:position pos:line="45" pos:column="10"/></operator><operator pos:line="45" pos:column="10">*<pos:position pos:line="45" pos:column="11"/></operator><name pos:line="45" pos:column="11">treep<pos:position pos:line="45" pos:column="16"/></name><operator pos:line="45" pos:column="16">)<pos:position pos:line="45" pos:column="17"/></operator><operator pos:line="45" pos:column="17">-&gt;<pos:position pos:line="45" pos:column="22"/></operator><name pos:line="45" pos:column="19">context<pos:position pos:line="45" pos:column="26"/></name></name><argument_list pos:line="45" pos:column="26">(<argument><expr><name pos:line="45" pos:column="27">directive<pos:position pos:line="45" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="38">config_input_line<pos:position pos:line="45" pos:column="55"/></name></expr></argument>)<pos:position pos:line="45" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="57"/></expr_stmt>
    }<pos:position pos:line="46" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name><operator pos:line="48" pos:column="5">(<pos:position pos:line="48" pos:column="6"/></operator><operator pos:line="48" pos:column="6">*<pos:position pos:line="48" pos:column="7"/></operator><name pos:line="48" pos:column="7">treep<pos:position pos:line="48" pos:column="12"/></name><operator pos:line="48" pos:column="12">)<pos:position pos:line="48" pos:column="13"/></operator><operator pos:line="48" pos:column="13">-&gt;<pos:position pos:line="48" pos:column="18"/></operator><name pos:line="48" pos:column="15">add<pos:position pos:line="48" pos:column="18"/></name></name><argument_list pos:line="48" pos:column="18">(<argument><expr><name pos:line="48" pos:column="19">rule<pos:position pos:line="48" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="25">action<pos:position pos:line="48" pos:column="31"/></name></expr></argument>)<pos:position pos:line="48" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="33"/></expr_stmt>

    <comment type="block" pos:line="50" pos:column="5">/* We lock _acl_access structures in ACLChecklist::matchNonBlocking() */</comment>
}<pos:position pos:line="51" pos:column="2"/></block></function></unit>
