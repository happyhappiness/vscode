<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2339_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">store_client<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">fileRead<pos:position pos:line="2" pos:column="23"/></name></name><parameter_list pos:line="2" pos:column="23">()<pos:position pos:line="2" pos:column="25"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">MemObject<pos:position pos:line="4" pos:column="14"/></name> <modifier pos:line="4" pos:column="15">*<pos:position pos:line="4" pos:column="16"/></modifier></type><name pos:line="4" pos:column="16">mem<pos:position pos:line="4" pos:column="19"/></name> <init pos:line="4" pos:column="20">= <expr><name><name pos:line="4" pos:column="22">entry<pos:position pos:line="4" pos:column="27"/></name><operator pos:line="4" pos:column="27">-&gt;<pos:position pos:line="4" pos:column="32"/></operator><name pos:line="4" pos:column="29">mem_obj<pos:position pos:line="4" pos:column="36"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="37"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><call><name><name pos:line="6" pos:column="12">_callback<pos:position pos:line="6" pos:column="21"/></name><operator pos:line="6" pos:column="21">.<pos:position pos:line="6" pos:column="22"/></operator><name pos:line="6" pos:column="22">pending<pos:position pos:line="6" pos:column="29"/></name></name><argument_list pos:line="6" pos:column="29">()<pos:position pos:line="6" pos:column="31"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><operator pos:line="7" pos:column="12">!<pos:position pos:line="7" pos:column="13"/></operator><name><name pos:line="7" pos:column="13">flags<pos:position pos:line="7" pos:column="18"/></name><operator pos:line="7" pos:column="18">.<pos:position pos:line="7" pos:column="19"/></operator><name pos:line="7" pos:column="19">disk_io_pending<pos:position pos:line="7" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="8" pos:column="5">flags<pos:position pos:line="8" pos:column="10"/></name><operator pos:line="8" pos:column="10">.<pos:position pos:line="8" pos:column="11"/></operator><name pos:line="8" pos:column="11">disk_io_pending<pos:position pos:line="8" pos:column="26"/></name></name> <operator pos:line="8" pos:column="27">=<pos:position pos:line="8" pos:column="28"/></operator> <literal type="number" pos:line="8" pos:column="29">1<pos:position pos:line="8" pos:column="30"/></literal></expr>;<pos:position pos:line="8" pos:column="31"/></expr_stmt>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name><name pos:line="10" pos:column="9">mem<pos:position pos:line="10" pos:column="12"/></name><operator pos:line="10" pos:column="12">-&gt;<pos:position pos:line="10" pos:column="17"/></operator><name pos:line="10" pos:column="14">swap_hdr_sz<pos:position pos:line="10" pos:column="25"/></name></name> <operator pos:line="10" pos:column="26">!=<pos:position pos:line="10" pos:column="28"/></operator> <literal type="number" pos:line="10" pos:column="29">0<pos:position pos:line="10" pos:column="30"/></literal></expr>)<pos:position pos:line="10" pos:column="31"/></condition><then pos:line="10" pos:column="31">
        <block type="pseudo"><if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name><name pos:line="11" pos:column="13">entry<pos:position pos:line="11" pos:column="18"/></name><operator pos:line="11" pos:column="18">-&gt;<pos:position pos:line="11" pos:column="23"/></operator><name pos:line="11" pos:column="20">swap_status<pos:position pos:line="11" pos:column="31"/></name></name> <operator pos:line="11" pos:column="32">==<pos:position pos:line="11" pos:column="34"/></operator> <name pos:line="11" pos:column="35">SWAPOUT_WRITING<pos:position pos:line="11" pos:column="50"/></name></expr>)<pos:position pos:line="11" pos:column="51"/></condition><then pos:line="11" pos:column="51">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="13">assert<pos:position pos:line="12" pos:column="19"/></name><argument_list pos:line="12" pos:column="19">(<argument><expr><call><name><name pos:line="12" pos:column="20">mem<pos:position pos:line="12" pos:column="23"/></name><operator pos:line="12" pos:column="23">-&gt;<pos:position pos:line="12" pos:column="28"/></operator><name pos:line="12" pos:column="25">swapout<pos:position pos:line="12" pos:column="32"/></name><operator pos:line="12" pos:column="32">.<pos:position pos:line="12" pos:column="33"/></operator><name pos:line="12" pos:column="33">sio<pos:position pos:line="12" pos:column="36"/></name><operator pos:line="12" pos:column="36">-&gt;<pos:position pos:line="12" pos:column="41"/></operator><name pos:line="12" pos:column="38">offset<pos:position pos:line="12" pos:column="44"/></name></name><argument_list pos:line="12" pos:column="44">()<pos:position pos:line="12" pos:column="46"/></argument_list></call> <operator pos:line="12" pos:column="47">&gt;<pos:position pos:line="12" pos:column="51"/></operator> <name><name pos:line="12" pos:column="49">copyInto<pos:position pos:line="12" pos:column="57"/></name><operator pos:line="12" pos:column="57">.<pos:position pos:line="12" pos:column="58"/></operator><name pos:line="12" pos:column="58">offset<pos:position pos:line="12" pos:column="64"/></name></name> <operator pos:line="12" pos:column="65">+<pos:position pos:line="12" pos:column="66"/></operator> <operator pos:line="12" pos:column="67">(<pos:position pos:line="12" pos:column="68"/></operator><name pos:line="12" pos:column="68">int64_t<pos:position pos:line="12" pos:column="75"/></name><operator pos:line="12" pos:column="75">)<pos:position pos:line="12" pos:column="76"/></operator><name><name pos:line="12" pos:column="76">mem<pos:position pos:line="12" pos:column="79"/></name><operator pos:line="12" pos:column="79">-&gt;<pos:position pos:line="12" pos:column="84"/></operator><name pos:line="12" pos:column="81">swap_hdr_sz<pos:position pos:line="12" pos:column="92"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="94"/></expr_stmt></block></then></if></block></then></if>

    <expr_stmt><expr><call><name pos:line="14" pos:column="5">storeRead<pos:position pos:line="14" pos:column="14"/></name><argument_list pos:line="14" pos:column="14">(<argument><expr><name pos:line="14" pos:column="15">swapin_sio<pos:position pos:line="14" pos:column="25"/></name></expr></argument>,
              <argument><expr><name><name pos:line="15" pos:column="15">copyInto<pos:position pos:line="15" pos:column="23"/></name><operator pos:line="15" pos:column="23">.<pos:position pos:line="15" pos:column="24"/></operator><name pos:line="15" pos:column="24">data<pos:position pos:line="15" pos:column="28"/></name></name></expr></argument>,
              <argument><expr><name><name pos:line="16" pos:column="15">copyInto<pos:position pos:line="16" pos:column="23"/></name><operator pos:line="16" pos:column="23">.<pos:position pos:line="16" pos:column="24"/></operator><name pos:line="16" pos:column="24">length<pos:position pos:line="16" pos:column="30"/></name></name></expr></argument>,
              <argument><expr><name><name pos:line="17" pos:column="15">copyInto<pos:position pos:line="17" pos:column="23"/></name><operator pos:line="17" pos:column="23">.<pos:position pos:line="17" pos:column="24"/></operator><name pos:line="17" pos:column="24">offset<pos:position pos:line="17" pos:column="30"/></name></name> <operator pos:line="17" pos:column="31">+<pos:position pos:line="17" pos:column="32"/></operator> <name><name pos:line="17" pos:column="33">mem<pos:position pos:line="17" pos:column="36"/></name><operator pos:line="17" pos:column="36">-&gt;<pos:position pos:line="17" pos:column="41"/></operator><name pos:line="17" pos:column="38">swap_hdr_sz<pos:position pos:line="17" pos:column="49"/></name></name></expr></argument>,
              <argument><expr><ternary><condition><expr><name><name pos:line="18" pos:column="15">mem<pos:position pos:line="18" pos:column="18"/></name><operator pos:line="18" pos:column="18">-&gt;<pos:position pos:line="18" pos:column="23"/></operator><name pos:line="18" pos:column="20">swap_hdr_sz<pos:position pos:line="18" pos:column="31"/></name></name> <operator pos:line="18" pos:column="32">==<pos:position pos:line="18" pos:column="34"/></operator> <literal type="number" pos:line="18" pos:column="35">0<pos:position pos:line="18" pos:column="36"/></literal></expr> ?<pos:position pos:line="18" pos:column="38"/></condition><then pos:line="18" pos:column="38"> <expr><name pos:line="18" pos:column="39">storeClientReadHeader<pos:position pos:line="18" pos:column="60"/></name></expr>
              <pos:position pos:line="19" pos:column="15"/></then><else pos:line="19" pos:column="15">: <expr><name pos:line="19" pos:column="17">storeClientReadBody<pos:position pos:line="19" pos:column="36"/></name></expr></else></ternary></expr></argument>,
              <argument><expr><name pos:line="20" pos:column="15">this<pos:position pos:line="20" pos:column="19"/></name></expr></argument>)<pos:position pos:line="20" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="21"/></expr_stmt>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
