<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5640_squid-3.1.23.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">struct<pos:position pos:line="1" pos:column="7"/></name> <name pos:line="1" pos:column="8">squid_radix_node<pos:position pos:line="1" pos:column="24"/></name></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type>
<name pos:line="2" pos:column="1">squid_rn_addmask<pos:position pos:line="2" pos:column="17"/></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><name pos:line="2" pos:column="18">void<pos:position pos:line="2" pos:column="22"/></name> <modifier pos:line="2" pos:column="23">*<pos:position pos:line="2" pos:column="24"/></modifier></type><name pos:line="2" pos:column="24">n_arg<pos:position pos:line="2" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="31">int<pos:position pos:line="2" pos:column="34"/></name></type> <name pos:line="2" pos:column="35">search<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="43">int<pos:position pos:line="2" pos:column="46"/></name></type> <name pos:line="2" pos:column="47">skip<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="52"/></parameter_list> <block pos:line="2" pos:column="53">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">caddr_t<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">netmask<pos:position pos:line="3" pos:column="20"/></name> <init pos:line="3" pos:column="21">= <expr><operator pos:line="3" pos:column="23">(<pos:position pos:line="3" pos:column="24"/></operator><name pos:line="3" pos:column="24">caddr_t<pos:position pos:line="3" pos:column="31"/></name><operator pos:line="3" pos:column="31">)<pos:position pos:line="3" pos:column="32"/></operator> <name pos:line="3" pos:column="33">n_arg<pos:position pos:line="3" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="39"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">register<pos:position pos:line="4" pos:column="13"/></specifier> <name><name pos:line="4" pos:column="14">struct<pos:position pos:line="4" pos:column="20"/></name> <name pos:line="4" pos:column="21">squid_radix_node<pos:position pos:line="4" pos:column="37"/></name></name> <modifier pos:line="4" pos:column="38">*<pos:position pos:line="4" pos:column="39"/></modifier></type><name pos:line="4" pos:column="39">x<pos:position pos:line="4" pos:column="40"/></name></decl>;<pos:position pos:line="4" pos:column="41"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">register<pos:position pos:line="5" pos:column="13"/></specifier> <name pos:line="5" pos:column="14">caddr_t<pos:position pos:line="5" pos:column="21"/></name></type> <name pos:line="5" pos:column="22">cp<pos:position pos:line="5" pos:column="24"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="26">cplim<pos:position pos:line="5" pos:column="31"/></name></decl>;<pos:position pos:line="5" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">register<pos:position pos:line="6" pos:column="13"/></specifier> <name pos:line="6" pos:column="14">int<pos:position pos:line="6" pos:column="17"/></name></type> <name pos:line="6" pos:column="18">b<pos:position pos:line="6" pos:column="19"/></name> <init pos:line="6" pos:column="20">= <expr><literal type="number" pos:line="6" pos:column="22">0<pos:position pos:line="6" pos:column="23"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="25">mlen<pos:position pos:line="6" pos:column="29"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="31">j<pos:position pos:line="6" pos:column="32"/></name></decl>;<pos:position pos:line="6" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">maskduplicated<pos:position pos:line="7" pos:column="23"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="25">m0<pos:position pos:line="7" pos:column="27"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="29">isnormal<pos:position pos:line="7" pos:column="37"/></name></decl>;<pos:position pos:line="7" pos:column="38"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="8" pos:column="5">struct<pos:position pos:line="8" pos:column="11"/></name> <name pos:line="8" pos:column="12">squid_radix_node<pos:position pos:line="8" pos:column="28"/></name></name> <modifier pos:line="8" pos:column="29">*<pos:position pos:line="8" pos:column="30"/></modifier></type><name pos:line="8" pos:column="30">saved_x<pos:position pos:line="8" pos:column="37"/></name></decl>;<pos:position pos:line="8" pos:column="38"/></decl_stmt>
    <decl_stmt><decl><specifier pos:line="9" pos:column="5">static<pos:position pos:line="9" pos:column="11"/></specifier> <type><name pos:line="9" pos:column="12">int<pos:position pos:line="9" pos:column="15"/></name></type> <name pos:line="9" pos:column="16">last_zeroed<pos:position pos:line="9" pos:column="27"/></name> <init pos:line="9" pos:column="28">= <expr><literal type="number" pos:line="9" pos:column="30">0<pos:position pos:line="9" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="32"/></decl_stmt>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">(<pos:position pos:line="11" pos:column="10"/></operator><name pos:line="11" pos:column="10">mlen<pos:position pos:line="11" pos:column="14"/></name> <operator pos:line="11" pos:column="15">=<pos:position pos:line="11" pos:column="16"/></operator> <operator pos:line="11" pos:column="17">*<pos:position pos:line="11" pos:column="18"/></operator><operator pos:line="11" pos:column="18">(<pos:position pos:line="11" pos:column="19"/></operator><name pos:line="11" pos:column="19">u_char<pos:position pos:line="11" pos:column="25"/></name> <operator pos:line="11" pos:column="26">*<pos:position pos:line="11" pos:column="27"/></operator><operator pos:line="11" pos:column="27">)<pos:position pos:line="11" pos:column="28"/></operator> <name pos:line="11" pos:column="29">netmask<pos:position pos:line="11" pos:column="36"/></name><operator pos:line="11" pos:column="36">)<pos:position pos:line="11" pos:column="37"/></operator> <operator pos:line="11" pos:column="38">&gt;<pos:position pos:line="11" pos:column="42"/></operator> <name pos:line="11" pos:column="40">squid_max_keylen<pos:position pos:line="11" pos:column="56"/></name></expr>)<pos:position pos:line="11" pos:column="57"/></condition><then pos:line="11" pos:column="57">
        <block type="pseudo"><expr_stmt><expr><name pos:line="12" pos:column="9">mlen<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">=<pos:position pos:line="12" pos:column="15"/></operator> <name pos:line="12" pos:column="16">squid_max_keylen<pos:position pos:line="12" pos:column="32"/></name></expr>;<pos:position pos:line="12" pos:column="33"/></expr_stmt></block></then></if>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">skip<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">==<pos:position pos:line="13" pos:column="16"/></operator> <literal type="number" pos:line="13" pos:column="17">0<pos:position pos:line="13" pos:column="18"/></literal></expr>)<pos:position pos:line="13" pos:column="19"/></condition><then pos:line="13" pos:column="19">
        <block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="9">skip<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">=<pos:position pos:line="14" pos:column="15"/></operator> <literal type="number" pos:line="14" pos:column="16">1<pos:position pos:line="14" pos:column="17"/></literal></expr>;<pos:position pos:line="14" pos:column="18"/></expr_stmt></block></then></if>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">mlen<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">&lt;=<pos:position pos:line="15" pos:column="19"/></operator> <name pos:line="15" pos:column="17">skip<pos:position pos:line="15" pos:column="21"/></name></expr>)<pos:position pos:line="15" pos:column="22"/></condition><then pos:line="15" pos:column="22">
        <block type="pseudo"><return pos:line="16" pos:column="9">return <expr><operator pos:line="16" pos:column="16">(<pos:position pos:line="16" pos:column="17"/></operator><name><name pos:line="16" pos:column="17">squid_mask_rnhead<pos:position pos:line="16" pos:column="34"/></name><operator pos:line="16" pos:column="34">-&gt;<pos:position pos:line="16" pos:column="39"/></operator><name pos:line="16" pos:column="36">rnh_nodes<pos:position pos:line="16" pos:column="45"/></name></name><operator pos:line="16" pos:column="45">)<pos:position pos:line="16" pos:column="46"/></operator></expr>;<pos:position pos:line="16" pos:column="47"/></return></block></then></if>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name pos:line="17" pos:column="9">skip<pos:position pos:line="17" pos:column="13"/></name> <operator pos:line="17" pos:column="14">&gt;<pos:position pos:line="17" pos:column="18"/></operator> <literal type="number" pos:line="17" pos:column="16">1<pos:position pos:line="17" pos:column="17"/></literal></expr>)<pos:position pos:line="17" pos:column="18"/></condition><then pos:line="17" pos:column="18">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="9">memcpy<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><name pos:line="18" pos:column="16">addmask_key<pos:position pos:line="18" pos:column="27"/></name> <operator pos:line="18" pos:column="28">+<pos:position pos:line="18" pos:column="29"/></operator> <literal type="number" pos:line="18" pos:column="30">1<pos:position pos:line="18" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="33">rn_ones<pos:position pos:line="18" pos:column="40"/></name> <operator pos:line="18" pos:column="41">+<pos:position pos:line="18" pos:column="42"/></operator> <literal type="number" pos:line="18" pos:column="43">1<pos:position pos:line="18" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="46">skip<pos:position pos:line="18" pos:column="50"/></name> <operator pos:line="18" pos:column="51">-<pos:position pos:line="18" pos:column="52"/></operator> <literal type="number" pos:line="18" pos:column="53">1<pos:position pos:line="18" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="56"/></expr_stmt></block></then></if>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><operator pos:line="19" pos:column="9">(<pos:position pos:line="19" pos:column="10"/></operator><name pos:line="19" pos:column="10">m0<pos:position pos:line="19" pos:column="12"/></name> <operator pos:line="19" pos:column="13">=<pos:position pos:line="19" pos:column="14"/></operator> <name pos:line="19" pos:column="15">mlen<pos:position pos:line="19" pos:column="19"/></name><operator pos:line="19" pos:column="19">)<pos:position pos:line="19" pos:column="20"/></operator> <operator pos:line="19" pos:column="21">&gt;<pos:position pos:line="19" pos:column="25"/></operator> <name pos:line="19" pos:column="23">skip<pos:position pos:line="19" pos:column="27"/></name></expr>)<pos:position pos:line="19" pos:column="28"/></condition><then pos:line="19" pos:column="28">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="9">memcpy<pos:position pos:line="20" pos:column="15"/></name><argument_list pos:line="20" pos:column="15">(<argument><expr><name pos:line="20" pos:column="16">addmask_key<pos:position pos:line="20" pos:column="27"/></name> <operator pos:line="20" pos:column="28">+<pos:position pos:line="20" pos:column="29"/></operator> <name pos:line="20" pos:column="30">skip<pos:position pos:line="20" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="36">netmask<pos:position pos:line="20" pos:column="43"/></name> <operator pos:line="20" pos:column="44">+<pos:position pos:line="20" pos:column="45"/></operator> <name pos:line="20" pos:column="46">skip<pos:position pos:line="20" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="52">mlen<pos:position pos:line="20" pos:column="56"/></name> <operator pos:line="20" pos:column="57">-<pos:position pos:line="20" pos:column="58"/></operator> <name pos:line="20" pos:column="59">skip<pos:position pos:line="20" pos:column="63"/></name></expr></argument>)<pos:position pos:line="20" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="65"/></expr_stmt></block></then></if>
    <comment type="block" pos:line="21" pos:column="5">/*
     * Trim trailing zeroes.
     */</comment>
    <for pos:line="24" pos:column="5">for <control pos:line="24" pos:column="9">(<init><expr><name pos:line="24" pos:column="10">cp<pos:position pos:line="24" pos:column="12"/></name> <operator pos:line="24" pos:column="13">=<pos:position pos:line="24" pos:column="14"/></operator> <name pos:line="24" pos:column="15">addmask_key<pos:position pos:line="24" pos:column="26"/></name> <operator pos:line="24" pos:column="27">+<pos:position pos:line="24" pos:column="28"/></operator> <name pos:line="24" pos:column="29">mlen<pos:position pos:line="24" pos:column="33"/></name></expr>;<pos:position pos:line="24" pos:column="34"/></init> <condition><expr><operator pos:line="24" pos:column="35">(<pos:position pos:line="24" pos:column="36"/></operator><name pos:line="24" pos:column="36">cp<pos:position pos:line="24" pos:column="38"/></name> <operator pos:line="24" pos:column="39">&gt;<pos:position pos:line="24" pos:column="43"/></operator> <name pos:line="24" pos:column="41">addmask_key<pos:position pos:line="24" pos:column="52"/></name><operator pos:line="24" pos:column="52">)<pos:position pos:line="24" pos:column="53"/></operator> <operator pos:line="24" pos:column="54">&amp;&amp;<pos:position pos:line="24" pos:column="64"/></operator> <name><name pos:line="24" pos:column="57">cp<pos:position pos:line="24" pos:column="59"/></name><index pos:line="24" pos:column="59">[<expr><operator pos:line="24" pos:column="60">-<pos:position pos:line="24" pos:column="61"/></operator><literal type="number" pos:line="24" pos:column="61">1<pos:position pos:line="24" pos:column="62"/></literal></expr>]<pos:position pos:line="24" pos:column="63"/></index></name> <operator pos:line="24" pos:column="64">==<pos:position pos:line="24" pos:column="66"/></operator> <literal type="number" pos:line="24" pos:column="67">0<pos:position pos:line="24" pos:column="68"/></literal></expr>;<pos:position pos:line="24" pos:column="69"/></condition><incr/>)<pos:position pos:line="24" pos:column="70"/></control>
        <block type="pseudo"><expr_stmt><expr><name pos:line="25" pos:column="9">cp<pos:position pos:line="25" pos:column="11"/></name><operator pos:line="25" pos:column="11">--<pos:position pos:line="25" pos:column="13"/></operator></expr>;<pos:position pos:line="25" pos:column="14"/></expr_stmt></block></for>
    <expr_stmt><expr><name pos:line="26" pos:column="5">mlen<pos:position pos:line="26" pos:column="9"/></name> <operator pos:line="26" pos:column="10">=<pos:position pos:line="26" pos:column="11"/></operator> <name pos:line="26" pos:column="12">cp<pos:position pos:line="26" pos:column="14"/></name> <operator pos:line="26" pos:column="15">-<pos:position pos:line="26" pos:column="16"/></operator> <name pos:line="26" pos:column="17">addmask_key<pos:position pos:line="26" pos:column="28"/></name></expr>;<pos:position pos:line="26" pos:column="29"/></expr_stmt>
    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name pos:line="27" pos:column="9">mlen<pos:position pos:line="27" pos:column="13"/></name> <operator pos:line="27" pos:column="14">&lt;=<pos:position pos:line="27" pos:column="19"/></operator> <name pos:line="27" pos:column="17">skip<pos:position pos:line="27" pos:column="21"/></name></expr>)<pos:position pos:line="27" pos:column="22"/></condition><then pos:line="27" pos:column="22"> <block pos:line="27" pos:column="23">{
        <if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><name pos:line="28" pos:column="13">m0<pos:position pos:line="28" pos:column="15"/></name> <operator pos:line="28" pos:column="16">&gt;=<pos:position pos:line="28" pos:column="21"/></operator> <name pos:line="28" pos:column="19">last_zeroed<pos:position pos:line="28" pos:column="30"/></name></expr>)<pos:position pos:line="28" pos:column="31"/></condition><then pos:line="28" pos:column="31">
            <block type="pseudo"><expr_stmt><expr><name pos:line="29" pos:column="13">last_zeroed<pos:position pos:line="29" pos:column="24"/></name> <operator pos:line="29" pos:column="25">=<pos:position pos:line="29" pos:column="26"/></operator> <name pos:line="29" pos:column="27">mlen<pos:position pos:line="29" pos:column="31"/></name></expr>;<pos:position pos:line="29" pos:column="32"/></expr_stmt></block></then></if>
        <return pos:line="30" pos:column="9">return <expr><operator pos:line="30" pos:column="16">(<pos:position pos:line="30" pos:column="17"/></operator><name><name pos:line="30" pos:column="17">squid_mask_rnhead<pos:position pos:line="30" pos:column="34"/></name><operator pos:line="30" pos:column="34">-&gt;<pos:position pos:line="30" pos:column="39"/></operator><name pos:line="30" pos:column="36">rnh_nodes<pos:position pos:line="30" pos:column="45"/></name></name><operator pos:line="30" pos:column="45">)<pos:position pos:line="30" pos:column="46"/></operator></expr>;<pos:position pos:line="30" pos:column="47"/></return>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>
    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><name pos:line="32" pos:column="9">m0<pos:position pos:line="32" pos:column="11"/></name> <operator pos:line="32" pos:column="12">&lt;<pos:position pos:line="32" pos:column="16"/></operator> <name pos:line="32" pos:column="14">last_zeroed<pos:position pos:line="32" pos:column="25"/></name></expr>)<pos:position pos:line="32" pos:column="26"/></condition><then pos:line="32" pos:column="26">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="33" pos:column="9">memset<pos:position pos:line="33" pos:column="15"/></name><argument_list pos:line="33" pos:column="15">(<argument><expr><name pos:line="33" pos:column="16">addmask_key<pos:position pos:line="33" pos:column="27"/></name> <operator pos:line="33" pos:column="28">+<pos:position pos:line="33" pos:column="29"/></operator> <name pos:line="33" pos:column="30">m0<pos:position pos:line="33" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="33" pos:column="34">'\0'<pos:position pos:line="33" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="40">last_zeroed<pos:position pos:line="33" pos:column="51"/></name> <operator pos:line="33" pos:column="52">-<pos:position pos:line="33" pos:column="53"/></operator> <name pos:line="33" pos:column="54">m0<pos:position pos:line="33" pos:column="56"/></name></expr></argument>)<pos:position pos:line="33" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="58"/></expr_stmt></block></then></if>
    <expr_stmt><expr><operator pos:line="34" pos:column="5">*<pos:position pos:line="34" pos:column="6"/></operator><name pos:line="34" pos:column="6">addmask_key<pos:position pos:line="34" pos:column="17"/></name> <operator pos:line="34" pos:column="18">=<pos:position pos:line="34" pos:column="19"/></operator> <name pos:line="34" pos:column="20">last_zeroed<pos:position pos:line="34" pos:column="31"/></name> <operator pos:line="34" pos:column="32">=<pos:position pos:line="34" pos:column="33"/></operator> <name pos:line="34" pos:column="34">mlen<pos:position pos:line="34" pos:column="38"/></name></expr>;<pos:position pos:line="34" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name pos:line="35" pos:column="5">x<pos:position pos:line="35" pos:column="6"/></name> <operator pos:line="35" pos:column="7">=<pos:position pos:line="35" pos:column="8"/></operator> <call><name pos:line="35" pos:column="9">squid_rn_search<pos:position pos:line="35" pos:column="24"/></name><argument_list pos:line="35" pos:column="24">(<argument><expr><name pos:line="35" pos:column="25">addmask_key<pos:position pos:line="35" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="38">rn_masktop<pos:position pos:line="35" pos:column="48"/></name></expr></argument>)<pos:position pos:line="35" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="50"/></expr_stmt>
    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><call><name pos:line="36" pos:column="9">memcmp<pos:position pos:line="36" pos:column="15"/></name><argument_list pos:line="36" pos:column="15">(<argument><expr><name pos:line="36" pos:column="16">addmask_key<pos:position pos:line="36" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="29">x<pos:position pos:line="36" pos:column="30"/></name><operator pos:line="36" pos:column="30">-&gt;<pos:position pos:line="36" pos:column="35"/></operator><name pos:line="36" pos:column="32">rn_key<pos:position pos:line="36" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="40">mlen<pos:position pos:line="36" pos:column="44"/></name></expr></argument>)<pos:position pos:line="36" pos:column="45"/></argument_list></call> <operator pos:line="36" pos:column="46">!=<pos:position pos:line="36" pos:column="48"/></operator> <literal type="number" pos:line="36" pos:column="49">0<pos:position pos:line="36" pos:column="50"/></literal></expr>)<pos:position pos:line="36" pos:column="51"/></condition><then pos:line="36" pos:column="51">
        <block type="pseudo"><expr_stmt><expr><name pos:line="37" pos:column="9">x<pos:position pos:line="37" pos:column="10"/></name> <operator pos:line="37" pos:column="11">=<pos:position pos:line="37" pos:column="12"/></operator> <literal type="number" pos:line="37" pos:column="13">0<pos:position pos:line="37" pos:column="14"/></literal></expr>;<pos:position pos:line="37" pos:column="15"/></expr_stmt></block></then></if>
    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><name pos:line="38" pos:column="9">x<pos:position pos:line="38" pos:column="10"/></name> <operator pos:line="38" pos:column="11">||<pos:position pos:line="38" pos:column="13"/></operator> <name pos:line="38" pos:column="14">search<pos:position pos:line="38" pos:column="20"/></name></expr>)<pos:position pos:line="38" pos:column="21"/></condition><then pos:line="38" pos:column="21">
        <block type="pseudo"><return pos:line="39" pos:column="9">return <expr><operator pos:line="39" pos:column="16">(<pos:position pos:line="39" pos:column="17"/></operator><name pos:line="39" pos:column="17">x<pos:position pos:line="39" pos:column="18"/></name><operator pos:line="39" pos:column="18">)<pos:position pos:line="39" pos:column="19"/></operator></expr>;<pos:position pos:line="39" pos:column="20"/></return></block></then></if>
    <expr_stmt><expr><call><name pos:line="40" pos:column="5">squid_R_Malloc<pos:position pos:line="40" pos:column="19"/></name><argument_list pos:line="40" pos:column="19">(<argument><expr><name pos:line="40" pos:column="20">x<pos:position pos:line="40" pos:column="21"/></name></expr></argument>, <argument><expr pos:line="40" pos:column="23">struct <name pos:line="40" pos:column="30">squid_radix_node<pos:position pos:line="40" pos:column="46"/></name> <operator pos:line="40" pos:column="47">*<pos:position pos:line="40" pos:column="48"/></operator></expr></argument>, <argument><expr><name pos:line="40" pos:column="50">squid_max_keylen<pos:position pos:line="40" pos:column="66"/></name> <operator pos:line="40" pos:column="67">+<pos:position pos:line="40" pos:column="68"/></operator> <literal type="number" pos:line="40" pos:column="69">2<pos:position pos:line="40" pos:column="70"/></literal> <operator pos:line="40" pos:column="71">*<pos:position pos:line="40" pos:column="72"/></operator> <sizeof pos:line="40" pos:column="73">sizeof<argument_list pos:line="40" pos:column="79">(<argument><expr><operator pos:line="40" pos:column="80">*<pos:position pos:line="40" pos:column="81"/></operator><name pos:line="40" pos:column="81">x<pos:position pos:line="40" pos:column="82"/></name></expr></argument>)<pos:position pos:line="40" pos:column="83"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="40" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="85"/></expr_stmt>
    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><operator pos:line="41" pos:column="9">(<pos:position pos:line="41" pos:column="10"/></operator><name pos:line="41" pos:column="10">saved_x<pos:position pos:line="41" pos:column="17"/></name> <operator pos:line="41" pos:column="18">=<pos:position pos:line="41" pos:column="19"/></operator> <name pos:line="41" pos:column="20">x<pos:position pos:line="41" pos:column="21"/></name><operator pos:line="41" pos:column="21">)<pos:position pos:line="41" pos:column="22"/></operator> <operator pos:line="41" pos:column="23">==<pos:position pos:line="41" pos:column="25"/></operator> <literal type="number" pos:line="41" pos:column="26">0<pos:position pos:line="41" pos:column="27"/></literal></expr>)<pos:position pos:line="41" pos:column="28"/></condition><then pos:line="41" pos:column="28">
        <block type="pseudo"><return pos:line="42" pos:column="9">return <expr><operator pos:line="42" pos:column="16">(<pos:position pos:line="42" pos:column="17"/></operator><literal type="number" pos:line="42" pos:column="17">0<pos:position pos:line="42" pos:column="18"/></literal><operator pos:line="42" pos:column="18">)<pos:position pos:line="42" pos:column="19"/></operator></expr>;<pos:position pos:line="42" pos:column="20"/></return></block></then></if>
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">memset<pos:position pos:line="43" pos:column="11"/></name><argument_list pos:line="43" pos:column="11">(<argument><expr><name pos:line="43" pos:column="12">x<pos:position pos:line="43" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="43" pos:column="15">'\0'<pos:position pos:line="43" pos:column="19"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="21">squid_max_keylen<pos:position pos:line="43" pos:column="37"/></name> <operator pos:line="43" pos:column="38">+<pos:position pos:line="43" pos:column="39"/></operator> <literal type="number" pos:line="43" pos:column="40">2<pos:position pos:line="43" pos:column="41"/></literal> <operator pos:line="43" pos:column="42">*<pos:position pos:line="43" pos:column="43"/></operator> <sizeof pos:line="43" pos:column="44">sizeof<argument_list pos:line="43" pos:column="50">(<argument><expr><operator pos:line="43" pos:column="51">*<pos:position pos:line="43" pos:column="52"/></operator><name pos:line="43" pos:column="52">x<pos:position pos:line="43" pos:column="53"/></name></expr></argument>)<pos:position pos:line="43" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="43" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="56"/></expr_stmt>
    <expr_stmt><expr><name pos:line="44" pos:column="5">netmask<pos:position pos:line="44" pos:column="12"/></name> <operator pos:line="44" pos:column="13">=<pos:position pos:line="44" pos:column="14"/></operator> <name pos:line="44" pos:column="15">cp<pos:position pos:line="44" pos:column="17"/></name> <operator pos:line="44" pos:column="18">=<pos:position pos:line="44" pos:column="19"/></operator> <call pos:line="44" pos:column="20">(<name pos:line="44" pos:column="21">caddr_t<pos:position pos:line="44" pos:column="28"/></name>) <argument_list pos:line="44" pos:column="30">(<argument><expr><name pos:line="44" pos:column="31">x<pos:position pos:line="44" pos:column="32"/></name> <operator pos:line="44" pos:column="33">+<pos:position pos:line="44" pos:column="34"/></operator> <literal type="number" pos:line="44" pos:column="35">2<pos:position pos:line="44" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="45" pos:column="5">memcpy<pos:position pos:line="45" pos:column="11"/></name><argument_list pos:line="45" pos:column="11">(<argument><expr><name pos:line="45" pos:column="12">cp<pos:position pos:line="45" pos:column="14"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="16">addmask_key<pos:position pos:line="45" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="29">mlen<pos:position pos:line="45" pos:column="33"/></name></expr></argument>)<pos:position pos:line="45" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name pos:line="46" pos:column="5">x<pos:position pos:line="46" pos:column="6"/></name> <operator pos:line="46" pos:column="7">=<pos:position pos:line="46" pos:column="8"/></operator> <call><name pos:line="46" pos:column="9">squid_rn_insert<pos:position pos:line="46" pos:column="24"/></name><argument_list pos:line="46" pos:column="24">(<argument><expr><name pos:line="46" pos:column="25">cp<pos:position pos:line="46" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="29">squid_mask_rnhead<pos:position pos:line="46" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="48">&amp;<pos:position pos:line="46" pos:column="53"/></operator><name pos:line="46" pos:column="49">maskduplicated<pos:position pos:line="46" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="65">x<pos:position pos:line="46" pos:column="66"/></name></expr></argument>)<pos:position pos:line="46" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="68"/></expr_stmt>
    <if pos:line="47" pos:column="5">if <condition pos:line="47" pos:column="8">(<expr><name pos:line="47" pos:column="9">maskduplicated<pos:position pos:line="47" pos:column="23"/></name></expr>)<pos:position pos:line="47" pos:column="24"/></condition><then pos:line="47" pos:column="24"> <block pos:line="47" pos:column="25">{
        <expr_stmt><expr><call><name pos:line="48" pos:column="9">fprintf<pos:position pos:line="48" pos:column="16"/></name><argument_list pos:line="48" pos:column="16">(<argument><expr><name pos:line="48" pos:column="17">stderr<pos:position pos:line="48" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="25">"squid_rn_addmask: mask impossibly already in tree"<pos:position pos:line="48" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="78"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="49" pos:column="9">squid_Free<pos:position pos:line="49" pos:column="19"/></name><argument_list pos:line="49" pos:column="19">(<argument><expr><name pos:line="49" pos:column="20">saved_x<pos:position pos:line="49" pos:column="27"/></name></expr></argument>)<pos:position pos:line="49" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="29"/></expr_stmt>
        <return pos:line="50" pos:column="9">return <expr><operator pos:line="50" pos:column="16">(<pos:position pos:line="50" pos:column="17"/></operator><name pos:line="50" pos:column="17">x<pos:position pos:line="50" pos:column="18"/></name><operator pos:line="50" pos:column="18">)<pos:position pos:line="50" pos:column="19"/></operator></expr>;<pos:position pos:line="50" pos:column="20"/></return>
    }<pos:position pos:line="51" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="52" pos:column="5">/*
     * Calculate index of mask, and check for normalcy.
     */</comment>
    <expr_stmt><expr><name pos:line="55" pos:column="5">cplim<pos:position pos:line="55" pos:column="10"/></name> <operator pos:line="55" pos:column="11">=<pos:position pos:line="55" pos:column="12"/></operator> <name pos:line="55" pos:column="13">netmask<pos:position pos:line="55" pos:column="20"/></name> <operator pos:line="55" pos:column="21">+<pos:position pos:line="55" pos:column="22"/></operator> <name pos:line="55" pos:column="23">mlen<pos:position pos:line="55" pos:column="27"/></name></expr>;<pos:position pos:line="55" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name pos:line="56" pos:column="5">isnormal<pos:position pos:line="56" pos:column="13"/></name> <operator pos:line="56" pos:column="14">=<pos:position pos:line="56" pos:column="15"/></operator> <literal type="number" pos:line="56" pos:column="16">1<pos:position pos:line="56" pos:column="17"/></literal></expr>;<pos:position pos:line="56" pos:column="18"/></expr_stmt>
    <for pos:line="57" pos:column="5">for <control pos:line="57" pos:column="9">(<init><expr><name pos:line="57" pos:column="10">cp<pos:position pos:line="57" pos:column="12"/></name> <operator pos:line="57" pos:column="13">=<pos:position pos:line="57" pos:column="14"/></operator> <name pos:line="57" pos:column="15">netmask<pos:position pos:line="57" pos:column="22"/></name> <operator pos:line="57" pos:column="23">+<pos:position pos:line="57" pos:column="24"/></operator> <name pos:line="57" pos:column="25">skip<pos:position pos:line="57" pos:column="29"/></name></expr>;<pos:position pos:line="57" pos:column="30"/></init> <condition><expr><operator pos:line="57" pos:column="31">(<pos:position pos:line="57" pos:column="32"/></operator><name pos:line="57" pos:column="32">cp<pos:position pos:line="57" pos:column="34"/></name> <operator pos:line="57" pos:column="35">&lt;<pos:position pos:line="57" pos:column="39"/></operator> <name pos:line="57" pos:column="37">cplim<pos:position pos:line="57" pos:column="42"/></name><operator pos:line="57" pos:column="42">)<pos:position pos:line="57" pos:column="43"/></operator> <operator pos:line="57" pos:column="44">&amp;&amp;<pos:position pos:line="57" pos:column="54"/></operator> <operator pos:line="57" pos:column="47">*<pos:position pos:line="57" pos:column="48"/></operator><operator pos:line="57" pos:column="48">(<pos:position pos:line="57" pos:column="49"/></operator><name pos:line="57" pos:column="49">u_char<pos:position pos:line="57" pos:column="55"/></name> <operator pos:line="57" pos:column="56">*<pos:position pos:line="57" pos:column="57"/></operator><operator pos:line="57" pos:column="57">)<pos:position pos:line="57" pos:column="58"/></operator> <name pos:line="57" pos:column="59">cp<pos:position pos:line="57" pos:column="61"/></name> <operator pos:line="57" pos:column="62">==<pos:position pos:line="57" pos:column="64"/></operator> <literal type="number" pos:line="57" pos:column="65">0xff<pos:position pos:line="57" pos:column="69"/></literal></expr>;<pos:position pos:line="57" pos:column="70"/></condition><incr/>)<pos:position pos:line="57" pos:column="71"/></control>
        <block type="pseudo"><expr_stmt><expr><name pos:line="58" pos:column="9">cp<pos:position pos:line="58" pos:column="11"/></name><operator pos:line="58" pos:column="11">++<pos:position pos:line="58" pos:column="13"/></operator></expr>;<pos:position pos:line="58" pos:column="14"/></expr_stmt></block></for>
    <if pos:line="59" pos:column="5">if <condition pos:line="59" pos:column="8">(<expr><name pos:line="59" pos:column="9">cp<pos:position pos:line="59" pos:column="11"/></name> <operator pos:line="59" pos:column="12">!=<pos:position pos:line="59" pos:column="14"/></operator> <name pos:line="59" pos:column="15">cplim<pos:position pos:line="59" pos:column="20"/></name></expr>)<pos:position pos:line="59" pos:column="21"/></condition><then pos:line="59" pos:column="21"> <block pos:line="59" pos:column="22">{
        <for pos:line="60" pos:column="9">for <control pos:line="60" pos:column="13">(<init><expr><name pos:line="60" pos:column="14">j<pos:position pos:line="60" pos:column="15"/></name> <operator pos:line="60" pos:column="16">=<pos:position pos:line="60" pos:column="17"/></operator> <literal type="number" pos:line="60" pos:column="18">0x80<pos:position pos:line="60" pos:column="22"/></literal></expr>;<pos:position pos:line="60" pos:column="23"/></init> <condition><expr><operator pos:line="60" pos:column="24">(<pos:position pos:line="60" pos:column="25"/></operator><name pos:line="60" pos:column="25">j<pos:position pos:line="60" pos:column="26"/></name> <operator pos:line="60" pos:column="27">&amp;<pos:position pos:line="60" pos:column="32"/></operator> <operator pos:line="60" pos:column="29">*<pos:position pos:line="60" pos:column="30"/></operator><name pos:line="60" pos:column="30">cp<pos:position pos:line="60" pos:column="32"/></name><operator pos:line="60" pos:column="32">)<pos:position pos:line="60" pos:column="33"/></operator> <operator pos:line="60" pos:column="34">!=<pos:position pos:line="60" pos:column="36"/></operator> <literal type="number" pos:line="60" pos:column="37">0<pos:position pos:line="60" pos:column="38"/></literal></expr>;<pos:position pos:line="60" pos:column="39"/></condition> <incr><expr><name pos:line="60" pos:column="40">j<pos:position pos:line="60" pos:column="41"/></name> <operator pos:line="60" pos:column="42">&gt;&gt;=<pos:position pos:line="60" pos:column="51"/></operator> <literal type="number" pos:line="60" pos:column="46">1<pos:position pos:line="60" pos:column="47"/></literal></expr></incr>)<pos:position pos:line="60" pos:column="48"/></control>
            <block type="pseudo"><expr_stmt><expr><name pos:line="61" pos:column="13">b<pos:position pos:line="61" pos:column="14"/></name><operator pos:line="61" pos:column="14">++<pos:position pos:line="61" pos:column="16"/></operator></expr>;<pos:position pos:line="61" pos:column="17"/></expr_stmt></block></for>
        <if pos:line="62" pos:column="9">if <condition pos:line="62" pos:column="12">(<expr><operator pos:line="62" pos:column="13">*<pos:position pos:line="62" pos:column="14"/></operator><name pos:line="62" pos:column="14">cp<pos:position pos:line="62" pos:column="16"/></name> <operator pos:line="62" pos:column="17">!=<pos:position pos:line="62" pos:column="19"/></operator> <name><name pos:line="62" pos:column="20">normal_chars<pos:position pos:line="62" pos:column="32"/></name><index pos:line="62" pos:column="32">[<expr><name pos:line="62" pos:column="33">b<pos:position pos:line="62" pos:column="34"/></name></expr>]<pos:position pos:line="62" pos:column="35"/></index></name> <operator pos:line="62" pos:column="36">||<pos:position pos:line="62" pos:column="38"/></operator> <name pos:line="62" pos:column="39">cp<pos:position pos:line="62" pos:column="41"/></name> <operator pos:line="62" pos:column="42">!=<pos:position pos:line="62" pos:column="44"/></operator> <operator pos:line="62" pos:column="45">(<pos:position pos:line="62" pos:column="46"/></operator><name pos:line="62" pos:column="46">cplim<pos:position pos:line="62" pos:column="51"/></name> <operator pos:line="62" pos:column="52">-<pos:position pos:line="62" pos:column="53"/></operator> <literal type="number" pos:line="62" pos:column="54">1<pos:position pos:line="62" pos:column="55"/></literal><operator pos:line="62" pos:column="55">)<pos:position pos:line="62" pos:column="56"/></operator></expr>)<pos:position pos:line="62" pos:column="57"/></condition><then pos:line="62" pos:column="57">
            <block type="pseudo"><expr_stmt><expr><name pos:line="63" pos:column="13">isnormal<pos:position pos:line="63" pos:column="21"/></name> <operator pos:line="63" pos:column="22">=<pos:position pos:line="63" pos:column="23"/></operator> <literal type="number" pos:line="63" pos:column="24">0<pos:position pos:line="63" pos:column="25"/></literal></expr>;<pos:position pos:line="63" pos:column="26"/></expr_stmt></block></then></if>
    }<pos:position pos:line="64" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="65" pos:column="5">b<pos:position pos:line="65" pos:column="6"/></name> <operator pos:line="65" pos:column="7">+=<pos:position pos:line="65" pos:column="9"/></operator> <operator pos:line="65" pos:column="10">(<pos:position pos:line="65" pos:column="11"/></operator><name pos:line="65" pos:column="11">cp<pos:position pos:line="65" pos:column="13"/></name> <operator pos:line="65" pos:column="14">-<pos:position pos:line="65" pos:column="15"/></operator> <name pos:line="65" pos:column="16">netmask<pos:position pos:line="65" pos:column="23"/></name><operator pos:line="65" pos:column="23">)<pos:position pos:line="65" pos:column="24"/></operator> <operator pos:line="65" pos:column="25">&lt;&lt;<pos:position pos:line="65" pos:column="33"/></operator> <literal type="number" pos:line="65" pos:column="28">3<pos:position pos:line="65" pos:column="29"/></literal></expr>;<pos:position pos:line="65" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="66" pos:column="5">x<pos:position pos:line="66" pos:column="6"/></name><operator pos:line="66" pos:column="6">-&gt;<pos:position pos:line="66" pos:column="11"/></operator><name pos:line="66" pos:column="8">rn_b<pos:position pos:line="66" pos:column="12"/></name></name> <operator pos:line="66" pos:column="13">=<pos:position pos:line="66" pos:column="14"/></operator> <operator pos:line="66" pos:column="15">-<pos:position pos:line="66" pos:column="16"/></operator><literal type="number" pos:line="66" pos:column="16">1<pos:position pos:line="66" pos:column="17"/></literal> <operator pos:line="66" pos:column="18">-<pos:position pos:line="66" pos:column="19"/></operator> <name pos:line="66" pos:column="20">b<pos:position pos:line="66" pos:column="21"/></name></expr>;<pos:position pos:line="66" pos:column="22"/></expr_stmt>
    <if pos:line="67" pos:column="5">if <condition pos:line="67" pos:column="8">(<expr><name pos:line="67" pos:column="9">isnormal<pos:position pos:line="67" pos:column="17"/></name></expr>)<pos:position pos:line="67" pos:column="18"/></condition><then pos:line="67" pos:column="18">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="68" pos:column="9">x<pos:position pos:line="68" pos:column="10"/></name><operator pos:line="68" pos:column="10">-&gt;<pos:position pos:line="68" pos:column="15"/></operator><name pos:line="68" pos:column="12">rn_flags<pos:position pos:line="68" pos:column="20"/></name></name> <operator pos:line="68" pos:column="21">|=<pos:position pos:line="68" pos:column="23"/></operator> <name pos:line="68" pos:column="24">RNF_NORMAL<pos:position pos:line="68" pos:column="34"/></name></expr>;<pos:position pos:line="68" pos:column="35"/></expr_stmt></block></then></if>
    <return pos:line="69" pos:column="5">return <expr><operator pos:line="69" pos:column="12">(<pos:position pos:line="69" pos:column="13"/></operator><name pos:line="69" pos:column="13">x<pos:position pos:line="69" pos:column="14"/></name><operator pos:line="69" pos:column="14">)<pos:position pos:line="69" pos:column="15"/></operator></expr>;<pos:position pos:line="69" pos:column="16"/></return>
}<pos:position pos:line="70" pos:column="2"/></block></function></unit>
