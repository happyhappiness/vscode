<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4891_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">Http<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">One<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">RequestParser<pos:position pos:line="2" pos:column="25"/></name><operator pos:line="2" pos:column="25">::<pos:position pos:line="2" pos:column="27"/></operator><name pos:line="2" pos:column="27">parseRequestFirstLine<pos:position pos:line="2" pos:column="48"/></name></name><parameter_list pos:line="2" pos:column="48">()<pos:position pos:line="2" pos:column="50"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">74<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">5<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="19">"parsing possible request: buf.length="<pos:position pos:line="4" pos:column="58"/></literal> <operator pos:line="4" pos:column="59">&lt;&lt;<pos:position pos:line="4" pos:column="67"/></operator> <call><name><name pos:line="4" pos:column="62">buf_<pos:position pos:line="4" pos:column="66"/></name><operator pos:line="4" pos:column="66">.<pos:position pos:line="4" pos:column="67"/></operator><name pos:line="4" pos:column="67">length<pos:position pos:line="4" pos:column="73"/></name></name><argument_list pos:line="4" pos:column="73">()<pos:position pos:line="4" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="77"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">debugs<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><literal type="number" pos:line="5" pos:column="12">74<pos:position pos:line="5" pos:column="14"/></literal></expr></argument>, <argument><expr><name pos:line="5" pos:column="16">DBG_DATA<pos:position pos:line="5" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="26">buf_<pos:position pos:line="5" pos:column="30"/></name></expr></argument>)<pos:position pos:line="5" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="32"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="7" pos:column="5">SBuf<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">line<pos:position pos:line="7" pos:column="14"/></name></decl>;<pos:position pos:line="7" pos:column="15"/></decl_stmt>

    <comment type="line" pos:line="9" pos:column="5">// Earlier, skipGarbageLines() took care of any leading LFs (if allowed).</comment>
    <comment type="line" pos:line="10" pos:column="5">// Now, the request line has to end at the first LF.</comment>
    <decl_stmt><decl><specifier pos:line="11" pos:column="5">static<pos:position pos:line="11" pos:column="11"/></specifier> <type><specifier pos:line="11" pos:column="12">const<pos:position pos:line="11" pos:column="17"/></specifier> <name pos:line="11" pos:column="18">CharacterSet<pos:position pos:line="11" pos:column="30"/></name></type> <name pos:line="11" pos:column="31">lineChars<pos:position pos:line="11" pos:column="40"/></name> <init pos:line="11" pos:column="41">= <expr><call><name><name pos:line="11" pos:column="43">CharacterSet<pos:position pos:line="11" pos:column="55"/></name><operator pos:line="11" pos:column="55">::<pos:position pos:line="11" pos:column="57"/></operator><name pos:line="11" pos:column="57">LF<pos:position pos:line="11" pos:column="59"/></name><operator pos:line="11" pos:column="59">.<pos:position pos:line="11" pos:column="60"/></operator><name pos:line="11" pos:column="60">complement<pos:position pos:line="11" pos:column="70"/></name></name><argument_list pos:line="11" pos:column="70">(<argument><expr><literal type="string" pos:line="11" pos:column="71">"notLF"<pos:position pos:line="11" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="79"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="80"/></decl_stmt>
    <decl_stmt><decl><type><name><operator pos:line="12" pos:column="5">::<pos:position pos:line="12" pos:column="7"/></operator><name pos:line="12" pos:column="7">Parser<pos:position pos:line="12" pos:column="13"/></name><operator pos:line="12" pos:column="13">::<pos:position pos:line="12" pos:column="15"/></operator><name pos:line="12" pos:column="15">Tokenizer<pos:position pos:line="12" pos:column="24"/></name></name></type> <name pos:line="12" pos:column="25">lineTok<pos:position pos:line="12" pos:column="32"/></name><argument_list pos:line="12" pos:column="32">(<argument><expr><name pos:line="12" pos:column="33">buf_<pos:position pos:line="12" pos:column="37"/></name></expr></argument>)<pos:position pos:line="12" pos:column="38"/></argument_list></decl>;<pos:position pos:line="12" pos:column="39"/></decl_stmt>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><operator pos:line="13" pos:column="9">!<pos:position pos:line="13" pos:column="10"/></operator><call><name><name pos:line="13" pos:column="10">lineTok<pos:position pos:line="13" pos:column="17"/></name><operator pos:line="13" pos:column="17">.<pos:position pos:line="13" pos:column="18"/></operator><name pos:line="13" pos:column="18">prefix<pos:position pos:line="13" pos:column="24"/></name></name><argument_list pos:line="13" pos:column="24">(<argument><expr><name pos:line="13" pos:column="25">line<pos:position pos:line="13" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="31">lineChars<pos:position pos:line="13" pos:column="40"/></name></expr></argument>)<pos:position pos:line="13" pos:column="41"/></argument_list></call> <operator pos:line="13" pos:column="42">||<pos:position pos:line="13" pos:column="44"/></operator> <operator pos:line="13" pos:column="45">!<pos:position pos:line="13" pos:column="46"/></operator><call><name><name pos:line="13" pos:column="46">lineTok<pos:position pos:line="13" pos:column="53"/></name><operator pos:line="13" pos:column="53">.<pos:position pos:line="13" pos:column="54"/></operator><name pos:line="13" pos:column="54">skip<pos:position pos:line="13" pos:column="58"/></name></name><argument_list pos:line="13" pos:column="58">(<argument><expr><literal type="char" pos:line="13" pos:column="59">'\n'<pos:position pos:line="13" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="65"/></condition><then pos:line="13" pos:column="65"> <block pos:line="13" pos:column="66">{
        <if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><call><name><name pos:line="14" pos:column="13">buf_<pos:position pos:line="14" pos:column="17"/></name><operator pos:line="14" pos:column="17">.<pos:position pos:line="14" pos:column="18"/></operator><name pos:line="14" pos:column="18">length<pos:position pos:line="14" pos:column="24"/></name></name><argument_list pos:line="14" pos:column="24">()<pos:position pos:line="14" pos:column="26"/></argument_list></call> <operator pos:line="14" pos:column="27">&gt;=<pos:position pos:line="14" pos:column="32"/></operator> <name><name pos:line="14" pos:column="30">Config<pos:position pos:line="14" pos:column="36"/></name><operator pos:line="14" pos:column="36">.<pos:position pos:line="14" pos:column="37"/></operator><name pos:line="14" pos:column="37">maxRequestHeaderSize<pos:position pos:line="14" pos:column="57"/></name></name></expr>)<pos:position pos:line="14" pos:column="58"/></condition><then pos:line="14" pos:column="58"> <block pos:line="14" pos:column="59">{
            <comment type="block" pos:line="15" pos:column="13">/* who should we blame for our failure to parse this line? */</comment>

            <decl_stmt><decl><type><name><name pos:line="17" pos:column="13">Http1<pos:position pos:line="17" pos:column="18"/></name><operator pos:line="17" pos:column="18">::<pos:position pos:line="17" pos:column="20"/></operator><name pos:line="17" pos:column="20">Tokenizer<pos:position pos:line="17" pos:column="29"/></name></name></type> <name pos:line="17" pos:column="30">methodTok<pos:position pos:line="17" pos:column="39"/></name><argument_list pos:line="17" pos:column="39">(<argument><expr><name pos:line="17" pos:column="40">buf_<pos:position pos:line="17" pos:column="44"/></name></expr></argument>)<pos:position pos:line="17" pos:column="45"/></argument_list></decl>;<pos:position pos:line="17" pos:column="46"/></decl_stmt>
            <if pos:line="18" pos:column="13">if <condition pos:line="18" pos:column="16">(<expr><operator pos:line="18" pos:column="17">!<pos:position pos:line="18" pos:column="18"/></operator><call><name pos:line="18" pos:column="18">parseMethodField<pos:position pos:line="18" pos:column="34"/></name><argument_list pos:line="18" pos:column="34">(<argument><expr><name pos:line="18" pos:column="35">methodTok<pos:position pos:line="18" pos:column="44"/></name></expr></argument>)<pos:position pos:line="18" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="46"/></condition><then pos:line="18" pos:column="46">
                <block type="pseudo"><return pos:line="19" pos:column="17">return <expr><operator pos:line="19" pos:column="24">-<pos:position pos:line="19" pos:column="25"/></operator><literal type="number" pos:line="19" pos:column="25">1<pos:position pos:line="19" pos:column="26"/></literal></expr>;<pos:position pos:line="19" pos:column="27"/></return></block></then></if> <comment type="line" pos:line="19" pos:column="28">// blame a bad method (or its delimiter)</comment>

            <comment type="line" pos:line="21" pos:column="13">// assume it is the URI</comment>
            <expr_stmt><expr><call><name pos:line="22" pos:column="13">debugs<pos:position pos:line="22" pos:column="19"/></name><argument_list pos:line="22" pos:column="19">(<argument><expr><literal type="number" pos:line="22" pos:column="20">74<pos:position pos:line="22" pos:column="22"/></literal></expr></argument>, <argument><expr><call><name pos:line="22" pos:column="24">ErrorLevel<pos:position pos:line="22" pos:column="34"/></name><argument_list pos:line="22" pos:column="34">()<pos:position pos:line="22" pos:column="36"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="38">"invalid request-line: URI exceeds "<pos:position pos:line="22" pos:column="74"/></literal> <operator pos:line="22" pos:column="75">&lt;&lt;<pos:position pos:line="22" pos:column="83"/></operator>
                   <name><name pos:line="23" pos:column="20">Config<pos:position pos:line="23" pos:column="26"/></name><operator pos:line="23" pos:column="26">.<pos:position pos:line="23" pos:column="27"/></operator><name pos:line="23" pos:column="27">maxRequestHeaderSize<pos:position pos:line="23" pos:column="47"/></name></name> <operator pos:line="23" pos:column="48">&lt;&lt;<pos:position pos:line="23" pos:column="56"/></operator> <literal type="string" pos:line="23" pos:column="51">"-byte limit"<pos:position pos:line="23" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="66"/></expr_stmt>
            <expr_stmt><expr><name pos:line="24" pos:column="13">parseStatusCode<pos:position pos:line="24" pos:column="28"/></name> <operator pos:line="24" pos:column="29">=<pos:position pos:line="24" pos:column="30"/></operator> <name><name pos:line="24" pos:column="31">Http<pos:position pos:line="24" pos:column="35"/></name><operator pos:line="24" pos:column="35">::<pos:position pos:line="24" pos:column="37"/></operator><name pos:line="24" pos:column="37">scUriTooLong<pos:position pos:line="24" pos:column="49"/></name></name></expr>;<pos:position pos:line="24" pos:column="50"/></expr_stmt>
            <return pos:line="25" pos:column="13">return <expr><operator pos:line="25" pos:column="20">-<pos:position pos:line="25" pos:column="21"/></operator><literal type="number" pos:line="25" pos:column="21">1<pos:position pos:line="25" pos:column="22"/></literal></expr>;<pos:position pos:line="25" pos:column="23"/></return>
        }<pos:position pos:line="26" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">debugs<pos:position pos:line="27" pos:column="15"/></name><argument_list pos:line="27" pos:column="15">(<argument><expr><literal type="number" pos:line="27" pos:column="16">74<pos:position pos:line="27" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="20">5<pos:position pos:line="27" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="23">"Parser needs more data"<pos:position pos:line="27" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="49"/></expr_stmt>
        <return pos:line="28" pos:column="9">return <expr><literal type="number" pos:line="28" pos:column="16">0<pos:position pos:line="28" pos:column="17"/></literal></expr>;<pos:position pos:line="28" pos:column="18"/></return>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name><name pos:line="31" pos:column="5">Http1<pos:position pos:line="31" pos:column="10"/></name><operator pos:line="31" pos:column="10">::<pos:position pos:line="31" pos:column="12"/></operator><name pos:line="31" pos:column="12">Tokenizer<pos:position pos:line="31" pos:column="21"/></name></name></type> <name pos:line="31" pos:column="22">tok<pos:position pos:line="31" pos:column="25"/></name><argument_list pos:line="31" pos:column="25">(<argument><expr><name pos:line="31" pos:column="26">line<pos:position pos:line="31" pos:column="30"/></name></expr></argument>)<pos:position pos:line="31" pos:column="31"/></argument_list></decl>;<pos:position pos:line="31" pos:column="32"/></decl_stmt>

    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><operator pos:line="33" pos:column="9">!<pos:position pos:line="33" pos:column="10"/></operator><call><name pos:line="33" pos:column="10">parseMethodField<pos:position pos:line="33" pos:column="26"/></name><argument_list pos:line="33" pos:column="26">(<argument><expr><name pos:line="33" pos:column="27">tok<pos:position pos:line="33" pos:column="30"/></name></expr></argument>)<pos:position pos:line="33" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="32"/></condition><then pos:line="33" pos:column="32">
        <block type="pseudo"><return pos:line="34" pos:column="9">return <expr><operator pos:line="34" pos:column="16">-<pos:position pos:line="34" pos:column="17"/></operator><literal type="number" pos:line="34" pos:column="17">1<pos:position pos:line="34" pos:column="18"/></literal></expr>;<pos:position pos:line="34" pos:column="19"/></return></block></then></if>

    <comment type="block" pos:line="36" pos:column="5">/* now parse backwards, to leave just the URI */</comment>
    <if pos:line="37" pos:column="5">if <condition pos:line="37" pos:column="8">(<expr><operator pos:line="37" pos:column="9">!<pos:position pos:line="37" pos:column="10"/></operator><call><name pos:line="37" pos:column="10">skipTrailingCrs<pos:position pos:line="37" pos:column="25"/></name><argument_list pos:line="37" pos:column="25">(<argument><expr><name pos:line="37" pos:column="26">tok<pos:position pos:line="37" pos:column="29"/></name></expr></argument>)<pos:position pos:line="37" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="31"/></condition><then pos:line="37" pos:column="31">
        <block type="pseudo"><return pos:line="38" pos:column="9">return <expr><operator pos:line="38" pos:column="16">-<pos:position pos:line="38" pos:column="17"/></operator><literal type="number" pos:line="38" pos:column="17">1<pos:position pos:line="38" pos:column="18"/></literal></expr>;<pos:position pos:line="38" pos:column="19"/></return></block></then></if>

    <if pos:line="40" pos:column="5">if <condition pos:line="40" pos:column="8">(<expr><operator pos:line="40" pos:column="9">!<pos:position pos:line="40" pos:column="10"/></operator><call><name pos:line="40" pos:column="10">parseHttpVersionField<pos:position pos:line="40" pos:column="31"/></name><argument_list pos:line="40" pos:column="31">(<argument><expr><name pos:line="40" pos:column="32">tok<pos:position pos:line="40" pos:column="35"/></name></expr></argument>)<pos:position pos:line="40" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="37"/></condition><then pos:line="40" pos:column="37">
        <block type="pseudo"><return pos:line="41" pos:column="9">return <expr><operator pos:line="41" pos:column="16">-<pos:position pos:line="41" pos:column="17"/></operator><literal type="number" pos:line="41" pos:column="17">1<pos:position pos:line="41" pos:column="18"/></literal></expr>;<pos:position pos:line="41" pos:column="19"/></return></block></then></if>

    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><operator pos:line="43" pos:column="9">!<pos:position pos:line="43" pos:column="10"/></operator><call><name pos:line="43" pos:column="10">http0<pos:position pos:line="43" pos:column="15"/></name><argument_list pos:line="43" pos:column="15">()<pos:position pos:line="43" pos:column="17"/></argument_list></call> <operator pos:line="43" pos:column="18">&amp;&amp;<pos:position pos:line="43" pos:column="28"/></operator> <operator pos:line="43" pos:column="21">!<pos:position pos:line="43" pos:column="22"/></operator><call><name pos:line="43" pos:column="22">skipDelimiter<pos:position pos:line="43" pos:column="35"/></name><argument_list pos:line="43" pos:column="35">(<argument><expr><call><name><name pos:line="43" pos:column="36">tok<pos:position pos:line="43" pos:column="39"/></name><operator pos:line="43" pos:column="39">.<pos:position pos:line="43" pos:column="40"/></operator><name pos:line="43" pos:column="40">skipAllTrailing<pos:position pos:line="43" pos:column="55"/></name></name><argument_list pos:line="43" pos:column="55">(<argument><expr><call><name pos:line="43" pos:column="56">DelimiterCharacters<pos:position pos:line="43" pos:column="75"/></name><argument_list pos:line="43" pos:column="75">()<pos:position pos:line="43" pos:column="77"/></argument_list></call></expr></argument>)<pos:position pos:line="43" pos:column="78"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="80">"before protocol version"<pos:position pos:line="43" pos:column="105"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="106"/></argument_list></call></expr>)<pos:position pos:line="43" pos:column="107"/></condition><then pos:line="43" pos:column="107">
        <block type="pseudo"><return pos:line="44" pos:column="9">return <expr><operator pos:line="44" pos:column="16">-<pos:position pos:line="44" pos:column="17"/></operator><literal type="number" pos:line="44" pos:column="17">1<pos:position pos:line="44" pos:column="18"/></literal></expr>;<pos:position pos:line="44" pos:column="19"/></return></block></then></if>

    <comment type="block" pos:line="46" pos:column="5">/* parsed everything before and after the URI */</comment>

    <if pos:line="48" pos:column="5">if <condition pos:line="48" pos:column="8">(<expr><operator pos:line="48" pos:column="9">!<pos:position pos:line="48" pos:column="10"/></operator><call><name pos:line="48" pos:column="10">parseUriField<pos:position pos:line="48" pos:column="23"/></name><argument_list pos:line="48" pos:column="23">(<argument><expr><name pos:line="48" pos:column="24">tok<pos:position pos:line="48" pos:column="27"/></name></expr></argument>)<pos:position pos:line="48" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="29"/></condition><then pos:line="48" pos:column="29">
        <block type="pseudo"><return pos:line="49" pos:column="9">return <expr><operator pos:line="49" pos:column="16">-<pos:position pos:line="49" pos:column="17"/></operator><literal type="number" pos:line="49" pos:column="17">1<pos:position pos:line="49" pos:column="18"/></literal></expr>;<pos:position pos:line="49" pos:column="19"/></return></block></then></if>

    <if pos:line="51" pos:column="5">if <condition pos:line="51" pos:column="8">(<expr><operator pos:line="51" pos:column="9">!<pos:position pos:line="51" pos:column="10"/></operator><call><name><name pos:line="51" pos:column="10">tok<pos:position pos:line="51" pos:column="13"/></name><operator pos:line="51" pos:column="13">.<pos:position pos:line="51" pos:column="14"/></operator><name pos:line="51" pos:column="14">atEnd<pos:position pos:line="51" pos:column="19"/></name></name><argument_list pos:line="51" pos:column="19">()<pos:position pos:line="51" pos:column="21"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="22"/></condition><then pos:line="51" pos:column="22"> <block pos:line="51" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="52" pos:column="9">debugs<pos:position pos:line="52" pos:column="15"/></name><argument_list pos:line="52" pos:column="15">(<argument><expr><literal type="number" pos:line="52" pos:column="16">33<pos:position pos:line="52" pos:column="18"/></literal></expr></argument>, <argument><expr><call><name pos:line="52" pos:column="20">ErrorLevel<pos:position pos:line="52" pos:column="30"/></name><argument_list pos:line="52" pos:column="30">()<pos:position pos:line="52" pos:column="32"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="34">"invalid request-line: garbage after URI"<pos:position pos:line="52" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="77"/></expr_stmt>
        <expr_stmt><expr><name pos:line="53" pos:column="9">parseStatusCode<pos:position pos:line="53" pos:column="24"/></name> <operator pos:line="53" pos:column="25">=<pos:position pos:line="53" pos:column="26"/></operator> <name><name pos:line="53" pos:column="27">Http<pos:position pos:line="53" pos:column="31"/></name><operator pos:line="53" pos:column="31">::<pos:position pos:line="53" pos:column="33"/></operator><name pos:line="53" pos:column="33">scBadRequest<pos:position pos:line="53" pos:column="45"/></name></name></expr>;<pos:position pos:line="53" pos:column="46"/></expr_stmt>
        <return pos:line="54" pos:column="9">return <expr><operator pos:line="54" pos:column="16">-<pos:position pos:line="54" pos:column="17"/></operator><literal type="number" pos:line="54" pos:column="17">1<pos:position pos:line="54" pos:column="18"/></literal></expr>;<pos:position pos:line="54" pos:column="19"/></return>
    }<pos:position pos:line="55" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="57" pos:column="5">parseStatusCode<pos:position pos:line="57" pos:column="20"/></name> <operator pos:line="57" pos:column="21">=<pos:position pos:line="57" pos:column="22"/></operator> <name><name pos:line="57" pos:column="23">Http<pos:position pos:line="57" pos:column="27"/></name><operator pos:line="57" pos:column="27">::<pos:position pos:line="57" pos:column="29"/></operator><name pos:line="57" pos:column="29">scOkay<pos:position pos:line="57" pos:column="35"/></name></name></expr>;<pos:position pos:line="57" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name pos:line="58" pos:column="5">buf_<pos:position pos:line="58" pos:column="9"/></name> <operator pos:line="58" pos:column="10">=<pos:position pos:line="58" pos:column="11"/></operator> <call><name><name pos:line="58" pos:column="12">lineTok<pos:position pos:line="58" pos:column="19"/></name><operator pos:line="58" pos:column="19">.<pos:position pos:line="58" pos:column="20"/></operator><name pos:line="58" pos:column="20">remaining<pos:position pos:line="58" pos:column="29"/></name></name><argument_list pos:line="58" pos:column="29">()<pos:position pos:line="58" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="32"/></expr_stmt> <comment type="line" pos:line="58" pos:column="33">// incremental parse checkpoint</comment>
    <return pos:line="59" pos:column="5">return <expr><literal type="number" pos:line="59" pos:column="12">1<pos:position pos:line="59" pos:column="13"/></literal></expr>;<pos:position pos:line="59" pos:column="14"/></return>
}<pos:position pos:line="60" pos:column="2"/></block></function></unit>
