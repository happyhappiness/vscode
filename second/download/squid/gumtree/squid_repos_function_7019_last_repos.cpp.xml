<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7019_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Ipc<pos:position pos:line="1" pos:column="9"/></name><operator pos:line="1" pos:column="9">::<pos:position pos:line="1" pos:column="11"/></operator><name pos:line="1" pos:column="11">AssertFlagIsSet<pos:position pos:line="1" pos:column="26"/></name></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">std<pos:position pos:line="1" pos:column="30"/></name><operator pos:line="1" pos:column="30">::<pos:position pos:line="1" pos:column="32"/></operator><name pos:line="1" pos:column="32">atomic_flag<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">&amp;<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="45">flag<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="50"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <comment type="line" pos:line="3" pos:column="5">// If the flag was false, then we set it to true and assert. A true flag</comment>
    <comment type="line" pos:line="4" pos:column="5">// may help keep other processes away from this broken entry.</comment>
    <comment type="line" pos:line="5" pos:column="5">// Otherwise, we just set an already set flag, which is probably a no-op.</comment>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><call><name><name pos:line="6" pos:column="12">flag<pos:position pos:line="6" pos:column="16"/></name><operator pos:line="6" pos:column="16">.<pos:position pos:line="6" pos:column="17"/></operator><name pos:line="6" pos:column="17">test_and_set<pos:position pos:line="6" pos:column="29"/></name></name><argument_list pos:line="6" pos:column="29">(<argument><expr><name><name pos:line="6" pos:column="30">std<pos:position pos:line="6" pos:column="33"/></name><operator pos:line="6" pos:column="33">::<pos:position pos:line="6" pos:column="35"/></operator><name pos:line="6" pos:column="35">memory_order_relaxed<pos:position pos:line="6" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="58"/></expr_stmt>
}<pos:position pos:line="7" pos:column="2"/></block></function></unit>
