<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6207_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Log<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">LogConfig<pos:position pos:line="2" pos:column="15"/></name><operator pos:line="2" pos:column="15">::<pos:position pos:line="2" pos:column="17"/></operator><name pos:line="2" pos:column="17">parseFormats<pos:position pos:line="2" pos:column="29"/></name></name><parameter_list pos:line="2" pos:column="29">()<pos:position pos:line="2" pos:column="31"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">name<pos:position pos:line="4" pos:column="15"/></name></decl>, <modifier pos:line="4" pos:column="17">*<pos:position pos:line="4" pos:column="18"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="18">def<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">!<pos:position pos:line="6" pos:column="10"/></operator><operator pos:line="6" pos:column="10">(<pos:position pos:line="6" pos:column="11"/></operator><name pos:line="6" pos:column="11">name<pos:position pos:line="6" pos:column="15"/></name> <operator pos:line="6" pos:column="16">=<pos:position pos:line="6" pos:column="17"/></operator> <call><name><name pos:line="6" pos:column="18">ConfigParser<pos:position pos:line="6" pos:column="30"/></name><operator pos:line="6" pos:column="30">::<pos:position pos:line="6" pos:column="32"/></operator><name pos:line="6" pos:column="32">NextToken<pos:position pos:line="6" pos:column="41"/></name></name><argument_list pos:line="6" pos:column="41">()<pos:position pos:line="6" pos:column="43"/></argument_list></call><operator pos:line="6" pos:column="43">)<pos:position pos:line="6" pos:column="44"/></operator></expr>)<pos:position pos:line="6" pos:column="45"/></condition><then pos:line="6" pos:column="45"> <block pos:line="6" pos:column="46">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">debugs<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><literal type="number" pos:line="7" pos:column="16">3<pos:position pos:line="7" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="19">DBG_CRITICAL<pos:position pos:line="7" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="33">"FATAL: missing logformat details in "<pos:position pos:line="7" pos:column="71"/></literal> <operator pos:line="7" pos:column="72">&lt;&lt;<pos:position pos:line="7" pos:column="80"/></operator> <name pos:line="7" pos:column="75">cfg_filename<pos:position pos:line="7" pos:column="87"/></name> <operator pos:line="7" pos:column="88">&lt;&lt;<pos:position pos:line="7" pos:column="96"/></operator> <literal type="string" pos:line="7" pos:column="91">" line "<pos:position pos:line="7" pos:column="99"/></literal> <operator pos:line="7" pos:column="100">&lt;&lt;<pos:position pos:line="7" pos:column="108"/></operator> <name pos:line="7" pos:column="103">config_lineno<pos:position pos:line="7" pos:column="116"/></name></expr></argument>)<pos:position pos:line="7" pos:column="117"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="118"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">self_destruct<pos:position pos:line="8" pos:column="22"/></name><argument_list pos:line="8" pos:column="22">()<pos:position pos:line="8" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="25"/></expr_stmt>
        <return pos:line="9" pos:column="9">return;<pos:position pos:line="9" pos:column="16"/></return>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="12" pos:column="5">// check for re-definition of built-in formats</comment>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><call><name pos:line="13" pos:column="9">strcmp<pos:position pos:line="13" pos:column="15"/></name><argument_list pos:line="13" pos:column="15">(<argument><expr><name pos:line="13" pos:column="16">name<pos:position pos:line="13" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="22">"squid"<pos:position pos:line="13" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="30"/></argument_list></call> <operator pos:line="13" pos:column="31">==<pos:position pos:line="13" pos:column="33"/></operator> <literal type="number" pos:line="13" pos:column="34">0<pos:position pos:line="13" pos:column="35"/></literal> <operator pos:line="13" pos:column="36">||<pos:position pos:line="13" pos:column="38"/></operator>
            <call><name pos:line="14" pos:column="13">strcmp<pos:position pos:line="14" pos:column="19"/></name><argument_list pos:line="14" pos:column="19">(<argument><expr><name pos:line="14" pos:column="20">name<pos:position pos:line="14" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="26">"common"<pos:position pos:line="14" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="35"/></argument_list></call> <operator pos:line="14" pos:column="36">==<pos:position pos:line="14" pos:column="38"/></operator> <literal type="number" pos:line="14" pos:column="39">0<pos:position pos:line="14" pos:column="40"/></literal> <operator pos:line="14" pos:column="41">||<pos:position pos:line="14" pos:column="43"/></operator>
            <call><name pos:line="15" pos:column="13">strcmp<pos:position pos:line="15" pos:column="19"/></name><argument_list pos:line="15" pos:column="19">(<argument><expr><name pos:line="15" pos:column="20">name<pos:position pos:line="15" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="26">"combined"<pos:position pos:line="15" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="37"/></argument_list></call> <operator pos:line="15" pos:column="38">==<pos:position pos:line="15" pos:column="40"/></operator> <literal type="number" pos:line="15" pos:column="41">0<pos:position pos:line="15" pos:column="42"/></literal> <operator pos:line="15" pos:column="43">||<pos:position pos:line="15" pos:column="45"/></operator>
            <call><name pos:line="16" pos:column="13">strcmp<pos:position pos:line="16" pos:column="19"/></name><argument_list pos:line="16" pos:column="19">(<argument><expr><name pos:line="16" pos:column="20">name<pos:position pos:line="16" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="26">"useragent"<pos:position pos:line="16" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="38"/></argument_list></call> <operator pos:line="16" pos:column="39">==<pos:position pos:line="16" pos:column="41"/></operator> <literal type="number" pos:line="16" pos:column="42">0<pos:position pos:line="16" pos:column="43"/></literal> <operator pos:line="16" pos:column="44">||<pos:position pos:line="16" pos:column="46"/></operator>
            <call><name pos:line="17" pos:column="13">strcmp<pos:position pos:line="17" pos:column="19"/></name><argument_list pos:line="17" pos:column="19">(<argument><expr><name pos:line="17" pos:column="20">name<pos:position pos:line="17" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="26">"referrer"<pos:position pos:line="17" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="37"/></argument_list></call> <operator pos:line="17" pos:column="38">==<pos:position pos:line="17" pos:column="40"/></operator> <literal type="number" pos:line="17" pos:column="41">0<pos:position pos:line="17" pos:column="42"/></literal></expr>)<pos:position pos:line="17" pos:column="43"/></condition><then pos:line="17" pos:column="43"> <block pos:line="17" pos:column="44">{
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">debugs<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><literal type="number" pos:line="18" pos:column="16">3<pos:position pos:line="18" pos:column="17"/></literal></expr></argument>, <argument><expr><call><name pos:line="18" pos:column="19">DBG_PARSE_NOTE<pos:position pos:line="18" pos:column="33"/></name><argument_list pos:line="18" pos:column="33">(<argument><expr><name pos:line="18" pos:column="34">DBG_IMPORTANT<pos:position pos:line="18" pos:column="47"/></name></expr></argument>)<pos:position pos:line="18" pos:column="48"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="50">"ERROR: logformat "<pos:position pos:line="18" pos:column="69"/></literal> <operator pos:line="18" pos:column="70">&lt;&lt;<pos:position pos:line="18" pos:column="78"/></operator> <name pos:line="18" pos:column="73">name<pos:position pos:line="18" pos:column="77"/></name> <operator pos:line="18" pos:column="78">&lt;&lt;<pos:position pos:line="18" pos:column="86"/></operator> <literal type="string" pos:line="18" pos:column="81">" is already defined. Ignoring."<pos:position pos:line="18" pos:column="113"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="114"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="115"/></expr_stmt>
        <return pos:line="19" pos:column="9">return;<pos:position pos:line="19" pos:column="16"/></return>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="22" pos:column="5">// check for re-definition of custom formats</comment>
    <for pos:line="23" pos:column="5">for <control pos:line="23" pos:column="9">(<init><decl><type><name pos:line="23" pos:column="10">auto<pos:position pos:line="23" pos:column="14"/></name></type> <name pos:line="23" pos:column="15">i<pos:position pos:line="23" pos:column="16"/></name> <init pos:line="23" pos:column="17">= <expr><name pos:line="23" pos:column="19">logformats<pos:position pos:line="23" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="23" pos:column="30"/></init> <condition><expr><name pos:line="23" pos:column="31">i<pos:position pos:line="23" pos:column="32"/></name></expr> ;<pos:position pos:line="23" pos:column="34"/></condition> <incr><expr><name pos:line="23" pos:column="35">i<pos:position pos:line="23" pos:column="36"/></name> <operator pos:line="23" pos:column="37">=<pos:position pos:line="23" pos:column="38"/></operator> <name><name pos:line="23" pos:column="39">i<pos:position pos:line="23" pos:column="40"/></name><operator pos:line="23" pos:column="40">-&gt;<pos:position pos:line="23" pos:column="45"/></operator><name pos:line="23" pos:column="42">next<pos:position pos:line="23" pos:column="46"/></name></name></expr></incr>)<pos:position pos:line="23" pos:column="47"/></control> <block pos:line="23" pos:column="48">{
        <if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><call><name pos:line="24" pos:column="13">strcmp<pos:position pos:line="24" pos:column="19"/></name><argument_list pos:line="24" pos:column="19">(<argument><expr><name><name pos:line="24" pos:column="20">i<pos:position pos:line="24" pos:column="21"/></name><operator pos:line="24" pos:column="21">-&gt;<pos:position pos:line="24" pos:column="26"/></operator><name pos:line="24" pos:column="23">name<pos:position pos:line="24" pos:column="27"/></name></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="29">name<pos:position pos:line="24" pos:column="33"/></name></expr></argument>)<pos:position pos:line="24" pos:column="34"/></argument_list></call> <operator pos:line="24" pos:column="35">==<pos:position pos:line="24" pos:column="37"/></operator> <literal type="number" pos:line="24" pos:column="38">0<pos:position pos:line="24" pos:column="39"/></literal></expr>)<pos:position pos:line="24" pos:column="40"/></condition><then pos:line="24" pos:column="40"> <block pos:line="24" pos:column="41">{
            <expr_stmt><expr><call><name pos:line="25" pos:column="13">debugs<pos:position pos:line="25" pos:column="19"/></name><argument_list pos:line="25" pos:column="19">(<argument><expr><literal type="number" pos:line="25" pos:column="20">3<pos:position pos:line="25" pos:column="21"/></literal></expr></argument>, <argument><expr><call><name pos:line="25" pos:column="23">DBG_PARSE_NOTE<pos:position pos:line="25" pos:column="37"/></name><argument_list pos:line="25" pos:column="37">(<argument><expr><name pos:line="25" pos:column="38">DBG_IMPORTANT<pos:position pos:line="25" pos:column="51"/></name></expr></argument>)<pos:position pos:line="25" pos:column="52"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="54">"ERROR: logformat "<pos:position pos:line="25" pos:column="73"/></literal> <operator pos:line="25" pos:column="74">&lt;&lt;<pos:position pos:line="25" pos:column="82"/></operator> <name pos:line="25" pos:column="77">name<pos:position pos:line="25" pos:column="81"/></name> <operator pos:line="25" pos:column="82">&lt;&lt;<pos:position pos:line="25" pos:column="90"/></operator> <literal type="string" pos:line="25" pos:column="85">" is already defined. Ignoring."<pos:position pos:line="25" pos:column="117"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="118"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="119"/></expr_stmt>
            <return pos:line="26" pos:column="13">return;<pos:position pos:line="26" pos:column="20"/></return>
        }<pos:position pos:line="27" pos:column="10"/></block></then></if>
    }<pos:position pos:line="28" pos:column="6"/></block></for>

    <decl_stmt><decl><type><name><operator pos:line="30" pos:column="5">::<pos:position pos:line="30" pos:column="7"/></operator><name pos:line="30" pos:column="7">Format<pos:position pos:line="30" pos:column="13"/></name><operator pos:line="30" pos:column="13">::<pos:position pos:line="30" pos:column="15"/></operator><name pos:line="30" pos:column="15">Format<pos:position pos:line="30" pos:column="21"/></name></name> <modifier pos:line="30" pos:column="22">*<pos:position pos:line="30" pos:column="23"/></modifier></type><name pos:line="30" pos:column="23">nlf<pos:position pos:line="30" pos:column="26"/></name> <init pos:line="30" pos:column="27">= <expr><operator pos:line="30" pos:column="29">new<pos:position pos:line="30" pos:column="32"/></operator> <call><name><operator pos:line="30" pos:column="33">::<pos:position pos:line="30" pos:column="35"/></operator><name pos:line="30" pos:column="35">Format<pos:position pos:line="30" pos:column="41"/></name><operator pos:line="30" pos:column="41">::<pos:position pos:line="30" pos:column="43"/></operator><name pos:line="30" pos:column="43">Format<pos:position pos:line="30" pos:column="49"/></name></name><argument_list pos:line="30" pos:column="49">(<argument><expr><name pos:line="30" pos:column="50">name<pos:position pos:line="30" pos:column="54"/></name></expr></argument>)<pos:position pos:line="30" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="30" pos:column="56"/></decl_stmt>

    <expr_stmt><expr><call><name><name pos:line="32" pos:column="5">ConfigParser<pos:position pos:line="32" pos:column="17"/></name><operator pos:line="32" pos:column="17">::<pos:position pos:line="32" pos:column="19"/></operator><name pos:line="32" pos:column="19">EnableMacros<pos:position pos:line="32" pos:column="31"/></name></name><argument_list pos:line="32" pos:column="31">()<pos:position pos:line="32" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="34"/></expr_stmt>
    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><operator pos:line="33" pos:column="9">!<pos:position pos:line="33" pos:column="10"/></operator><operator pos:line="33" pos:column="10">(<pos:position pos:line="33" pos:column="11"/></operator><name pos:line="33" pos:column="11">def<pos:position pos:line="33" pos:column="14"/></name> <operator pos:line="33" pos:column="15">=<pos:position pos:line="33" pos:column="16"/></operator> <call><name><name pos:line="33" pos:column="17">ConfigParser<pos:position pos:line="33" pos:column="29"/></name><operator pos:line="33" pos:column="29">::<pos:position pos:line="33" pos:column="31"/></operator><name pos:line="33" pos:column="31">NextQuotedOrToEol<pos:position pos:line="33" pos:column="48"/></name></name><argument_list pos:line="33" pos:column="48">()<pos:position pos:line="33" pos:column="50"/></argument_list></call><operator pos:line="33" pos:column="50">)<pos:position pos:line="33" pos:column="51"/></operator></expr>)<pos:position pos:line="33" pos:column="52"/></condition><then pos:line="33" pos:column="52"> <block pos:line="33" pos:column="53">{
        <expr_stmt><expr><operator pos:line="34" pos:column="9">delete<pos:position pos:line="34" pos:column="15"/></operator> <name pos:line="34" pos:column="16">nlf<pos:position pos:line="34" pos:column="19"/></name></expr>;<pos:position pos:line="34" pos:column="20"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">self_destruct<pos:position pos:line="35" pos:column="22"/></name><argument_list pos:line="35" pos:column="22">()<pos:position pos:line="35" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="25"/></expr_stmt>
        <return pos:line="36" pos:column="9">return;<pos:position pos:line="36" pos:column="16"/></return>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name><name pos:line="38" pos:column="5">ConfigParser<pos:position pos:line="38" pos:column="17"/></name><operator pos:line="38" pos:column="17">::<pos:position pos:line="38" pos:column="19"/></operator><name pos:line="38" pos:column="19">DisableMacros<pos:position pos:line="38" pos:column="32"/></name></name><argument_list pos:line="38" pos:column="32">()<pos:position pos:line="38" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="35"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="40" pos:column="5">debugs<pos:position pos:line="40" pos:column="11"/></name><argument_list pos:line="40" pos:column="11">(<argument><expr><literal type="number" pos:line="40" pos:column="12">3<pos:position pos:line="40" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="15">2<pos:position pos:line="40" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="18">"Log Format for '"<pos:position pos:line="40" pos:column="36"/></literal> <operator pos:line="40" pos:column="37">&lt;&lt;<pos:position pos:line="40" pos:column="45"/></operator> <name pos:line="40" pos:column="40">name<pos:position pos:line="40" pos:column="44"/></name> <operator pos:line="40" pos:column="45">&lt;&lt;<pos:position pos:line="40" pos:column="53"/></operator> <literal type="string" pos:line="40" pos:column="48">"' is '"<pos:position pos:line="40" pos:column="56"/></literal> <operator pos:line="40" pos:column="57">&lt;&lt;<pos:position pos:line="40" pos:column="65"/></operator> <name pos:line="40" pos:column="60">def<pos:position pos:line="40" pos:column="63"/></name> <operator pos:line="40" pos:column="64">&lt;&lt;<pos:position pos:line="40" pos:column="72"/></operator> <literal type="string" pos:line="40" pos:column="67">"'"<pos:position pos:line="40" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="72"/></expr_stmt>

    <if pos:line="42" pos:column="5">if <condition pos:line="42" pos:column="8">(<expr><operator pos:line="42" pos:column="9">!<pos:position pos:line="42" pos:column="10"/></operator><call><name><name pos:line="42" pos:column="10">nlf<pos:position pos:line="42" pos:column="13"/></name><operator pos:line="42" pos:column="13">-&gt;<pos:position pos:line="42" pos:column="18"/></operator><name pos:line="42" pos:column="15">parse<pos:position pos:line="42" pos:column="20"/></name></name><argument_list pos:line="42" pos:column="20">(<argument><expr><name pos:line="42" pos:column="21">def<pos:position pos:line="42" pos:column="24"/></name></expr></argument>)<pos:position pos:line="42" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="26"/></condition><then pos:line="42" pos:column="26"> <block pos:line="42" pos:column="27">{
        <expr_stmt><expr><operator pos:line="43" pos:column="9">delete<pos:position pos:line="43" pos:column="15"/></operator> <name pos:line="43" pos:column="16">nlf<pos:position pos:line="43" pos:column="19"/></name></expr>;<pos:position pos:line="43" pos:column="20"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="44" pos:column="9">self_destruct<pos:position pos:line="44" pos:column="22"/></name><argument_list pos:line="44" pos:column="22">()<pos:position pos:line="44" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="25"/></expr_stmt>
        <return pos:line="45" pos:column="9">return;<pos:position pos:line="45" pos:column="16"/></return>
    }<pos:position pos:line="46" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="48" pos:column="5">// add to global config list</comment>
    <expr_stmt><expr><name><name pos:line="49" pos:column="5">nlf<pos:position pos:line="49" pos:column="8"/></name><operator pos:line="49" pos:column="8">-&gt;<pos:position pos:line="49" pos:column="13"/></operator><name pos:line="49" pos:column="10">next<pos:position pos:line="49" pos:column="14"/></name></name> <operator pos:line="49" pos:column="15">=<pos:position pos:line="49" pos:column="16"/></operator> <name pos:line="49" pos:column="17">logformats<pos:position pos:line="49" pos:column="27"/></name></expr>;<pos:position pos:line="49" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name pos:line="50" pos:column="5">logformats<pos:position pos:line="50" pos:column="15"/></name> <operator pos:line="50" pos:column="16">=<pos:position pos:line="50" pos:column="17"/></operator> <name pos:line="50" pos:column="18">nlf<pos:position pos:line="50" pos:column="21"/></name></expr>;<pos:position pos:line="50" pos:column="22"/></expr_stmt>
}<pos:position pos:line="51" pos:column="2"/></block></function></unit>
