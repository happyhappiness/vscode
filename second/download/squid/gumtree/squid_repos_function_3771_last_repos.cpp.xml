<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3771_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Ssl<pos:position pos:line="1" pos:column="9"/></name><operator pos:line="1" pos:column="9">::<pos:position pos:line="1" pos:column="11"/></operator><name pos:line="1" pos:column="11">writeCertAndPrivateKeyToFile<pos:position pos:line="1" pos:column="39"/></name></name><parameter_list pos:line="1" pos:column="39">(<parameter><decl><type><name><name pos:line="1" pos:column="40">Security<pos:position pos:line="1" pos:column="48"/></name><operator pos:line="1" pos:column="48">::<pos:position pos:line="1" pos:column="50"/></operator><name pos:line="1" pos:column="50">CertPointer<pos:position pos:line="1" pos:column="61"/></name></name> <specifier pos:line="1" pos:column="62">const<pos:position pos:line="1" pos:column="67"/></specifier> <modifier pos:line="1" pos:column="68">&amp;<pos:position pos:line="1" pos:column="73"/></modifier></type> <name pos:line="1" pos:column="70">cert<pos:position pos:line="1" pos:column="74"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="76">Ssl<pos:position pos:line="1" pos:column="79"/></name><operator pos:line="1" pos:column="79">::<pos:position pos:line="1" pos:column="81"/></operator><name pos:line="1" pos:column="81">EVP_PKEY_Pointer<pos:position pos:line="1" pos:column="97"/></name></name> <specifier pos:line="1" pos:column="98">const<pos:position pos:line="1" pos:column="103"/></specifier> <modifier pos:line="1" pos:column="104">&amp;<pos:position pos:line="1" pos:column="109"/></modifier></type> <name pos:line="1" pos:column="106">pkey<pos:position pos:line="1" pos:column="110"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="112">char<pos:position pos:line="1" pos:column="116"/></name> <specifier pos:line="1" pos:column="117">const<pos:position pos:line="1" pos:column="122"/></specifier> <modifier pos:line="1" pos:column="123">*<pos:position pos:line="1" pos:column="124"/></modifier></type> <name pos:line="1" pos:column="125">filename<pos:position pos:line="1" pos:column="133"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="134"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <if pos:line="3" pos:column="5">if <condition pos:line="3" pos:column="8">(<expr><operator pos:line="3" pos:column="9">!<pos:position pos:line="3" pos:column="10"/></operator><name pos:line="3" pos:column="10">pkey<pos:position pos:line="3" pos:column="14"/></name> <operator pos:line="3" pos:column="15">||<pos:position pos:line="3" pos:column="17"/></operator> <operator pos:line="3" pos:column="18">!<pos:position pos:line="3" pos:column="19"/></operator><name pos:line="3" pos:column="19">cert<pos:position pos:line="3" pos:column="23"/></name></expr>)<pos:position pos:line="3" pos:column="24"/></condition><then pos:line="3" pos:column="24">
        <block type="pseudo"><return pos:line="4" pos:column="9">return <expr><literal type="boolean" pos:line="4" pos:column="16">false<pos:position pos:line="4" pos:column="21"/></literal></expr>;<pos:position pos:line="4" pos:column="22"/></return></block></then></if>

    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">Ssl<pos:position pos:line="6" pos:column="8"/></name><operator pos:line="6" pos:column="8">::<pos:position pos:line="6" pos:column="10"/></operator><name pos:line="6" pos:column="10">BIO_Pointer<pos:position pos:line="6" pos:column="21"/></name></name></type> <name pos:line="6" pos:column="22">bio<pos:position pos:line="6" pos:column="25"/></name><argument_list pos:line="6" pos:column="25">(<argument><expr><call><name pos:line="6" pos:column="26">BIO_new<pos:position pos:line="6" pos:column="33"/></name><argument_list pos:line="6" pos:column="33">(<argument><expr><call><name pos:line="6" pos:column="34">BIO_s_file<pos:position pos:line="6" pos:column="44"/></name><argument_list pos:line="6" pos:column="44">()<pos:position pos:line="6" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="48"/></argument_list></decl>;<pos:position pos:line="6" pos:column="49"/></decl_stmt>
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><operator pos:line="7" pos:column="9">!<pos:position pos:line="7" pos:column="10"/></operator><name pos:line="7" pos:column="10">bio<pos:position pos:line="7" pos:column="13"/></name></expr>)<pos:position pos:line="7" pos:column="14"/></condition><then pos:line="7" pos:column="14">
        <block type="pseudo"><return pos:line="8" pos:column="9">return <expr><literal type="boolean" pos:line="8" pos:column="16">false<pos:position pos:line="8" pos:column="21"/></literal></expr>;<pos:position pos:line="8" pos:column="22"/></return></block></then></if>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">!<pos:position pos:line="9" pos:column="10"/></operator><call><name pos:line="9" pos:column="10">BIO_write_filename<pos:position pos:line="9" pos:column="28"/></name><argument_list pos:line="9" pos:column="28">(<argument><expr><call><name><name pos:line="9" pos:column="29">bio<pos:position pos:line="9" pos:column="32"/></name><operator pos:line="9" pos:column="32">.<pos:position pos:line="9" pos:column="33"/></operator><name pos:line="9" pos:column="33">get<pos:position pos:line="9" pos:column="36"/></name></name><argument_list pos:line="9" pos:column="36">()<pos:position pos:line="9" pos:column="38"/></argument_list></call></expr></argument>, <argument><expr><cast type="const" pos:line="9" pos:column="40">const_cast<argument_list type="generic" pos:line="9" pos:column="50">&lt;<argument><expr><name pos:line="9" pos:column="51">char<pos:position pos:line="9" pos:column="55"/></name> <operator pos:line="9" pos:column="56">*<pos:position pos:line="9" pos:column="57"/></operator></expr></argument>&gt;<pos:position pos:line="9" pos:column="61"/></argument_list><argument_list pos:line="9" pos:column="58">(<argument><expr><name pos:line="9" pos:column="59">filename<pos:position pos:line="9" pos:column="67"/></name></expr></argument>)<pos:position pos:line="9" pos:column="68"/></argument_list></cast></expr></argument>)<pos:position pos:line="9" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="70"/></condition><then pos:line="9" pos:column="70">
        <block type="pseudo"><return pos:line="10" pos:column="9">return <expr><literal type="boolean" pos:line="10" pos:column="16">false<pos:position pos:line="10" pos:column="21"/></literal></expr>;<pos:position pos:line="10" pos:column="22"/></return></block></then></if>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><operator pos:line="12" pos:column="9">!<pos:position pos:line="12" pos:column="10"/></operator><call><name pos:line="12" pos:column="10">PEM_write_bio_X509<pos:position pos:line="12" pos:column="28"/></name><argument_list pos:line="12" pos:column="28">(<argument><expr><call><name><name pos:line="12" pos:column="29">bio<pos:position pos:line="12" pos:column="32"/></name><operator pos:line="12" pos:column="32">.<pos:position pos:line="12" pos:column="33"/></operator><name pos:line="12" pos:column="33">get<pos:position pos:line="12" pos:column="36"/></name></name><argument_list pos:line="12" pos:column="36">()<pos:position pos:line="12" pos:column="38"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="12" pos:column="40">cert<pos:position pos:line="12" pos:column="44"/></name><operator pos:line="12" pos:column="44">.<pos:position pos:line="12" pos:column="45"/></operator><name pos:line="12" pos:column="45">get<pos:position pos:line="12" pos:column="48"/></name></name><argument_list pos:line="12" pos:column="48">()<pos:position pos:line="12" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="52"/></condition><then pos:line="12" pos:column="52">
        <block type="pseudo"><return pos:line="13" pos:column="9">return <expr><literal type="boolean" pos:line="13" pos:column="16">false<pos:position pos:line="13" pos:column="21"/></literal></expr>;<pos:position pos:line="13" pos:column="22"/></return></block></then></if>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><operator pos:line="15" pos:column="9">!<pos:position pos:line="15" pos:column="10"/></operator><call><name pos:line="15" pos:column="10">PEM_write_bio_PrivateKey<pos:position pos:line="15" pos:column="34"/></name><argument_list pos:line="15" pos:column="34">(<argument><expr><call><name><name pos:line="15" pos:column="35">bio<pos:position pos:line="15" pos:column="38"/></name><operator pos:line="15" pos:column="38">.<pos:position pos:line="15" pos:column="39"/></operator><name pos:line="15" pos:column="39">get<pos:position pos:line="15" pos:column="42"/></name></name><argument_list pos:line="15" pos:column="42">()<pos:position pos:line="15" pos:column="44"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="15" pos:column="46">pkey<pos:position pos:line="15" pos:column="50"/></name><operator pos:line="15" pos:column="50">.<pos:position pos:line="15" pos:column="51"/></operator><name pos:line="15" pos:column="51">get<pos:position pos:line="15" pos:column="54"/></name></name><argument_list pos:line="15" pos:column="54">()<pos:position pos:line="15" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="15" pos:column="58">NULL<pos:position pos:line="15" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="64">NULL<pos:position pos:line="15" pos:column="68"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="70">0<pos:position pos:line="15" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="73">NULL<pos:position pos:line="15" pos:column="77"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="79">NULL<pos:position pos:line="15" pos:column="83"/></name></expr></argument>)<pos:position pos:line="15" pos:column="84"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="85"/></condition><then pos:line="15" pos:column="85">
        <block type="pseudo"><return pos:line="16" pos:column="9">return <expr><literal type="boolean" pos:line="16" pos:column="16">false<pos:position pos:line="16" pos:column="21"/></literal></expr>;<pos:position pos:line="16" pos:column="22"/></return></block></then></if>

    <return pos:line="18" pos:column="5">return <expr><literal type="boolean" pos:line="18" pos:column="12">true<pos:position pos:line="18" pos:column="16"/></literal></expr>;<pos:position pos:line="18" pos:column="17"/></return>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
