<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5057_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Rock<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">HeaderUpdater<pos:position pos:line="2" pos:column="20"/></name><operator pos:line="2" pos:column="20">::<pos:position pos:line="2" pos:column="22"/></operator><name pos:line="2" pos:column="22">startWriting<pos:position pos:line="2" pos:column="34"/></name></name><parameter_list pos:line="2" pos:column="34">()<pos:position pos:line="2" pos:column="36"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><name pos:line="4" pos:column="5">writer<pos:position pos:line="4" pos:column="11"/></name> <operator pos:line="4" pos:column="12">=<pos:position pos:line="4" pos:column="13"/></operator> <call><name><name pos:line="4" pos:column="14">store<pos:position pos:line="4" pos:column="19"/></name><operator pos:line="4" pos:column="19">-&gt;<pos:position pos:line="4" pos:column="24"/></operator><name pos:line="4" pos:column="21">createUpdateIO<pos:position pos:line="4" pos:column="35"/></name></name><argument_list pos:line="4" pos:column="35">(
                 <argument><expr><name pos:line="5" pos:column="18">update<pos:position pos:line="5" pos:column="24"/></name></expr></argument>,
                 <argument><expr><literal type="null" pos:line="6" pos:column="18">nullptr<pos:position pos:line="6" pos:column="25"/></literal></expr></argument>, <comment type="line" pos:line="6" pos:column="27">// unused; see StoreIOState::file_callback</comment>
                 <argument><expr><operator pos:line="7" pos:column="18">&amp;<pos:position pos:line="7" pos:column="23"/></operator><name pos:line="7" pos:column="19">NoteDoneWriting<pos:position pos:line="7" pos:column="34"/></name></expr></argument>,
                 <argument><expr><name pos:line="8" pos:column="18">this<pos:position pos:line="8" pos:column="22"/></name></expr></argument>)<pos:position pos:line="8" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">Must<pos:position pos:line="9" pos:column="9"/></name><argument_list pos:line="9" pos:column="9">(<argument><expr><name pos:line="9" pos:column="10">writer<pos:position pos:line="9" pos:column="16"/></name></expr></argument>)<pos:position pos:line="9" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="18"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="11" pos:column="5">IoState<pos:position pos:line="11" pos:column="12"/></name> <modifier pos:line="11" pos:column="13">&amp;<pos:position pos:line="11" pos:column="18"/></modifier></type><name pos:line="11" pos:column="14">rockWriter<pos:position pos:line="11" pos:column="24"/></name> <init pos:line="11" pos:column="25">= <expr><cast type="dynamic" pos:line="11" pos:column="27">dynamic_cast<argument_list type="generic" pos:line="11" pos:column="39">&lt;<argument><expr><name pos:line="11" pos:column="40">IoState<pos:position pos:line="11" pos:column="47"/></name><operator pos:line="11" pos:column="47">&amp;<pos:position pos:line="11" pos:column="52"/></operator></expr></argument>&gt;<pos:position pos:line="11" pos:column="52"/></argument_list><argument_list pos:line="11" pos:column="49">(<argument><expr><operator pos:line="11" pos:column="50">*<pos:position pos:line="11" pos:column="51"/></operator><name pos:line="11" pos:column="51">writer<pos:position pos:line="11" pos:column="57"/></name></expr></argument>)<pos:position pos:line="11" pos:column="58"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="11" pos:column="59"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="12" pos:column="5">rockWriter<pos:position pos:line="12" pos:column="15"/></name><operator pos:line="12" pos:column="15">.<pos:position pos:line="12" pos:column="16"/></operator><name pos:line="12" pos:column="16">staleSplicingPointNext<pos:position pos:line="12" pos:column="38"/></name></name> <operator pos:line="12" pos:column="39">=<pos:position pos:line="12" pos:column="40"/></operator> <name pos:line="12" pos:column="41">staleSplicingPointNext<pos:position pos:line="12" pos:column="63"/></name></expr>;<pos:position pos:line="12" pos:column="64"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="14" pos:column="5">off_t<pos:position pos:line="14" pos:column="10"/></name></type> <name pos:line="14" pos:column="11">offset<pos:position pos:line="14" pos:column="17"/></name> <init pos:line="14" pos:column="18">= <expr><literal type="number" pos:line="14" pos:column="20">0<pos:position pos:line="14" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="22"/></decl_stmt> <comment type="line" pos:line="14" pos:column="23">// current writing offset (for debugging)</comment>

    <block pos:line="16" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">debugs<pos:position pos:line="17" pos:column="15"/></name><argument_list pos:line="17" pos:column="15">(<argument><expr><literal type="number" pos:line="17" pos:column="16">20<pos:position pos:line="17" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="20">7<pos:position pos:line="17" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="23">"fresh store meta for "<pos:position pos:line="17" pos:column="46"/></literal> <operator pos:line="17" pos:column="47">&lt;&lt;<pos:position pos:line="17" pos:column="55"/></operator> <operator pos:line="17" pos:column="50">*<pos:position pos:line="17" pos:column="51"/></operator><name><name pos:line="17" pos:column="51">update<pos:position pos:line="17" pos:column="57"/></name><operator pos:line="17" pos:column="57">.<pos:position pos:line="17" pos:column="58"/></operator><name pos:line="17" pos:column="58">entry<pos:position pos:line="17" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="65"/></expr_stmt>
        <decl_stmt><decl><type><specifier pos:line="18" pos:column="9">const<pos:position pos:line="18" pos:column="14"/></specifier> <name pos:line="18" pos:column="15">char<pos:position pos:line="18" pos:column="19"/></name> <modifier pos:line="18" pos:column="20">*<pos:position pos:line="18" pos:column="21"/></modifier></type><name pos:line="18" pos:column="21">freshSwapHeader<pos:position pos:line="18" pos:column="36"/></name> <init pos:line="18" pos:column="37">= <expr><call><name><name pos:line="18" pos:column="39">update<pos:position pos:line="18" pos:column="45"/></name><operator pos:line="18" pos:column="45">.<pos:position pos:line="18" pos:column="46"/></operator><name pos:line="18" pos:column="46">entry<pos:position pos:line="18" pos:column="51"/></name><operator pos:line="18" pos:column="51">-&gt;<pos:position pos:line="18" pos:column="56"/></operator><name pos:line="18" pos:column="53">getSerialisedMetaData<pos:position pos:line="18" pos:column="74"/></name></name><argument_list pos:line="18" pos:column="74">()<pos:position pos:line="18" pos:column="76"/></argument_list></call></expr></init></decl>;<pos:position pos:line="18" pos:column="77"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="19" pos:column="9">const<pos:position pos:line="19" pos:column="14"/></specifier> <specifier pos:line="19" pos:column="15">auto<pos:position pos:line="19" pos:column="19"/></specifier></type> <name pos:line="19" pos:column="20">freshSwapHeaderSize<pos:position pos:line="19" pos:column="39"/></name> <init pos:line="19" pos:column="40">= <expr><name><name pos:line="19" pos:column="42">update<pos:position pos:line="19" pos:column="48"/></name><operator pos:line="19" pos:column="48">.<pos:position pos:line="19" pos:column="49"/></operator><name pos:line="19" pos:column="49">entry<pos:position pos:line="19" pos:column="54"/></name><operator pos:line="19" pos:column="54">-&gt;<pos:position pos:line="19" pos:column="59"/></operator><name pos:line="19" pos:column="56">mem_obj<pos:position pos:line="19" pos:column="63"/></name><operator pos:line="19" pos:column="63">-&gt;<pos:position pos:line="19" pos:column="68"/></operator><name pos:line="19" pos:column="65">swap_hdr_sz<pos:position pos:line="19" pos:column="76"/></name></name></expr></init></decl>;<pos:position pos:line="19" pos:column="77"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">Must<pos:position pos:line="20" pos:column="13"/></name><argument_list pos:line="20" pos:column="13">(<argument><expr><name pos:line="20" pos:column="14">freshSwapHeader<pos:position pos:line="20" pos:column="29"/></name></expr></argument>)<pos:position pos:line="20" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="21" pos:column="9">writer<pos:position pos:line="21" pos:column="15"/></name><operator pos:line="21" pos:column="15">-&gt;<pos:position pos:line="21" pos:column="20"/></operator><name pos:line="21" pos:column="17">write<pos:position pos:line="21" pos:column="22"/></name></name><argument_list pos:line="21" pos:column="22">(<argument><expr><name pos:line="21" pos:column="23">freshSwapHeader<pos:position pos:line="21" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="40">freshSwapHeaderSize<pos:position pos:line="21" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="61">0<pos:position pos:line="21" pos:column="62"/></literal></expr></argument>, <argument><expr><literal type="null" pos:line="21" pos:column="64">nullptr<pos:position pos:line="21" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="73"/></expr_stmt>
        <expr_stmt><expr><name pos:line="22" pos:column="9">offset<pos:position pos:line="22" pos:column="15"/></name> <operator pos:line="22" pos:column="16">+=<pos:position pos:line="22" pos:column="18"/></operator> <name pos:line="22" pos:column="19">freshSwapHeaderSize<pos:position pos:line="22" pos:column="38"/></name></expr>;<pos:position pos:line="22" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="23" pos:column="9">xfree<pos:position pos:line="23" pos:column="14"/></name><argument_list pos:line="23" pos:column="14">(<argument><expr><name pos:line="23" pos:column="15">freshSwapHeader<pos:position pos:line="23" pos:column="30"/></name></expr></argument>)<pos:position pos:line="23" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="24" pos:column="6"/></block>

    <block pos:line="26" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">debugs<pos:position pos:line="27" pos:column="15"/></name><argument_list pos:line="27" pos:column="15">(<argument><expr><literal type="number" pos:line="27" pos:column="16">20<pos:position pos:line="27" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="20">7<pos:position pos:line="27" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="23">"fresh HTTP header @ "<pos:position pos:line="27" pos:column="45"/></literal> <operator pos:line="27" pos:column="46">&lt;&lt;<pos:position pos:line="27" pos:column="54"/></operator> <name pos:line="27" pos:column="49">offset<pos:position pos:line="27" pos:column="55"/></name></expr></argument>)<pos:position pos:line="27" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="57"/></expr_stmt>
        <decl_stmt><decl><type><name pos:line="28" pos:column="9">MemBuf<pos:position pos:line="28" pos:column="15"/></name> <modifier pos:line="28" pos:column="16">*<pos:position pos:line="28" pos:column="17"/></modifier></type><name pos:line="28" pos:column="17">httpHeader<pos:position pos:line="28" pos:column="27"/></name> <init pos:line="28" pos:column="28">= <expr><call><name><name pos:line="28" pos:column="30">update<pos:position pos:line="28" pos:column="36"/></name><operator pos:line="28" pos:column="36">.<pos:position pos:line="28" pos:column="37"/></operator><name pos:line="28" pos:column="37">entry<pos:position pos:line="28" pos:column="42"/></name><operator pos:line="28" pos:column="42">-&gt;<pos:position pos:line="28" pos:column="47"/></operator><name pos:line="28" pos:column="44">mem_obj<pos:position pos:line="28" pos:column="51"/></name><operator pos:line="28" pos:column="51">-&gt;<pos:position pos:line="28" pos:column="56"/></operator><name pos:line="28" pos:column="53">getReply<pos:position pos:line="28" pos:column="61"/></name></name><argument_list pos:line="28" pos:column="61">()<pos:position pos:line="28" pos:column="63"/></argument_list></call><operator pos:line="28" pos:column="63">-&gt;<pos:position pos:line="28" pos:column="68"/></operator><call><name pos:line="28" pos:column="65">pack<pos:position pos:line="28" pos:column="69"/></name><argument_list pos:line="28" pos:column="69">()<pos:position pos:line="28" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="28" pos:column="72"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="29" pos:column="9">writer<pos:position pos:line="29" pos:column="15"/></name><operator pos:line="29" pos:column="15">-&gt;<pos:position pos:line="29" pos:column="20"/></operator><name pos:line="29" pos:column="17">write<pos:position pos:line="29" pos:column="22"/></name></name><argument_list pos:line="29" pos:column="22">(<argument><expr><call><name><name pos:line="29" pos:column="23">httpHeader<pos:position pos:line="29" pos:column="33"/></name><operator pos:line="29" pos:column="33">-&gt;<pos:position pos:line="29" pos:column="38"/></operator><name pos:line="29" pos:column="35">content<pos:position pos:line="29" pos:column="42"/></name></name><argument_list pos:line="29" pos:column="42">()<pos:position pos:line="29" pos:column="44"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="29" pos:column="46">httpHeader<pos:position pos:line="29" pos:column="56"/></name><operator pos:line="29" pos:column="56">-&gt;<pos:position pos:line="29" pos:column="61"/></operator><name pos:line="29" pos:column="58">contentSize<pos:position pos:line="29" pos:column="69"/></name></name><argument_list pos:line="29" pos:column="69">()<pos:position pos:line="29" pos:column="71"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="29" pos:column="73">-<pos:position pos:line="29" pos:column="74"/></operator><literal type="number" pos:line="29" pos:column="74">1<pos:position pos:line="29" pos:column="75"/></literal></expr></argument>, <argument><expr><literal type="null" pos:line="29" pos:column="77">nullptr<pos:position pos:line="29" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="86"/></expr_stmt>
        <expr_stmt><expr><name pos:line="30" pos:column="9">offset<pos:position pos:line="30" pos:column="15"/></name> <operator pos:line="30" pos:column="16">+=<pos:position pos:line="30" pos:column="18"/></operator> <call><name><name pos:line="30" pos:column="19">httpHeader<pos:position pos:line="30" pos:column="29"/></name><operator pos:line="30" pos:column="29">-&gt;<pos:position pos:line="30" pos:column="34"/></operator><name pos:line="30" pos:column="31">contentSize<pos:position pos:line="30" pos:column="42"/></name></name><argument_list pos:line="30" pos:column="42">()<pos:position pos:line="30" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="31" pos:column="9">delete<pos:position pos:line="31" pos:column="15"/></operator> <name pos:line="31" pos:column="16">httpHeader<pos:position pos:line="31" pos:column="26"/></name></expr>;<pos:position pos:line="31" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="32" pos:column="6"/></block>

    <block pos:line="34" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">debugs<pos:position pos:line="35" pos:column="15"/></name><argument_list pos:line="35" pos:column="15">(<argument><expr><literal type="number" pos:line="35" pos:column="16">20<pos:position pos:line="35" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="20">7<pos:position pos:line="35" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="23">"moved HTTP body prefix @ "<pos:position pos:line="35" pos:column="50"/></literal> <operator pos:line="35" pos:column="51">&lt;&lt;<pos:position pos:line="35" pos:column="59"/></operator> <name pos:line="35" pos:column="54">offset<pos:position pos:line="35" pos:column="60"/></name></expr></argument>)<pos:position pos:line="35" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="62"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="36" pos:column="9">writer<pos:position pos:line="36" pos:column="15"/></name><operator pos:line="36" pos:column="15">-&gt;<pos:position pos:line="36" pos:column="20"/></operator><name pos:line="36" pos:column="17">write<pos:position pos:line="36" pos:column="22"/></name></name><argument_list pos:line="36" pos:column="22">(<argument><expr><call><name><name pos:line="36" pos:column="23">exchangeBuffer<pos:position pos:line="36" pos:column="37"/></name><operator pos:line="36" pos:column="37">.<pos:position pos:line="36" pos:column="38"/></operator><name pos:line="36" pos:column="38">rawContent<pos:position pos:line="36" pos:column="48"/></name></name><argument_list pos:line="36" pos:column="48">()<pos:position pos:line="36" pos:column="50"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="36" pos:column="52">exchangeBuffer<pos:position pos:line="36" pos:column="66"/></name><operator pos:line="36" pos:column="66">.<pos:position pos:line="36" pos:column="67"/></operator><name pos:line="36" pos:column="67">length<pos:position pos:line="36" pos:column="73"/></name></name><argument_list pos:line="36" pos:column="73">()<pos:position pos:line="36" pos:column="75"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="36" pos:column="77">-<pos:position pos:line="36" pos:column="78"/></operator><literal type="number" pos:line="36" pos:column="78">1<pos:position pos:line="36" pos:column="79"/></literal></expr></argument>, <argument><expr><literal type="null" pos:line="36" pos:column="81">nullptr<pos:position pos:line="36" pos:column="88"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="90"/></expr_stmt>
        <expr_stmt><expr><name pos:line="37" pos:column="9">offset<pos:position pos:line="37" pos:column="15"/></name> <operator pos:line="37" pos:column="16">+=<pos:position pos:line="37" pos:column="18"/></operator> <call><name><name pos:line="37" pos:column="19">exchangeBuffer<pos:position pos:line="37" pos:column="33"/></name><operator pos:line="37" pos:column="33">.<pos:position pos:line="37" pos:column="34"/></operator><name pos:line="37" pos:column="34">length<pos:position pos:line="37" pos:column="40"/></name></name><argument_list pos:line="37" pos:column="40">()<pos:position pos:line="37" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="38" pos:column="9">exchangeBuffer<pos:position pos:line="38" pos:column="23"/></name><operator pos:line="38" pos:column="23">.<pos:position pos:line="38" pos:column="24"/></operator><name pos:line="38" pos:column="24">clear<pos:position pos:line="38" pos:column="29"/></name></name><argument_list pos:line="38" pos:column="29">()<pos:position pos:line="38" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="39" pos:column="6"/></block>

    <expr_stmt><expr><call><name pos:line="41" pos:column="5">debugs<pos:position pos:line="41" pos:column="11"/></name><argument_list pos:line="41" pos:column="11">(<argument><expr><literal type="number" pos:line="41" pos:column="12">20<pos:position pos:line="41" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="16">7<pos:position pos:line="41" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="19">"wrote "<pos:position pos:line="41" pos:column="27"/></literal> <operator pos:line="41" pos:column="28">&lt;&lt;<pos:position pos:line="41" pos:column="36"/></operator> <name pos:line="41" pos:column="31">offset<pos:position pos:line="41" pos:column="37"/></name></expr></argument>)<pos:position pos:line="41" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="39"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="43" pos:column="5">writer<pos:position pos:line="43" pos:column="11"/></name><operator pos:line="43" pos:column="11">-&gt;<pos:position pos:line="43" pos:column="16"/></operator><name pos:line="43" pos:column="13">close<pos:position pos:line="43" pos:column="18"/></name></name><argument_list pos:line="43" pos:column="18">(<argument><expr><name><name pos:line="43" pos:column="19">StoreIOState<pos:position pos:line="43" pos:column="31"/></name><operator pos:line="43" pos:column="31">::<pos:position pos:line="43" pos:column="33"/></operator><name pos:line="43" pos:column="33">wroteAll<pos:position pos:line="43" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="43"/></expr_stmt> <comment type="line" pos:line="43" pos:column="44">// should call noteDoneWriting()</comment>
}<pos:position pos:line="44" pos:column="2"/></block></function></unit>
