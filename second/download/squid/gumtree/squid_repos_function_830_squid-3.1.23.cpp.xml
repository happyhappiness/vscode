<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_830_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">WhoisState<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">readReply<pos:position pos:line="2" pos:column="22"/></name></name> <parameter_list pos:line="2" pos:column="23">(<parameter><decl><type><name pos:line="2" pos:column="24">int<pos:position pos:line="2" pos:column="27"/></name></type> <name pos:line="2" pos:column="28">fd<pos:position pos:line="2" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="32">char<pos:position pos:line="2" pos:column="36"/></name> <modifier pos:line="2" pos:column="37">*<pos:position pos:line="2" pos:column="38"/></modifier></type><name pos:line="2" pos:column="38">aBuffer<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="47">size_t<pos:position pos:line="2" pos:column="53"/></name></type> <name pos:line="2" pos:column="54">aBufferLength<pos:position pos:line="2" pos:column="67"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="69">comm_err_t<pos:position pos:line="2" pos:column="79"/></name></type> <name pos:line="2" pos:column="80">flag<pos:position pos:line="2" pos:column="84"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="86">int<pos:position pos:line="2" pos:column="89"/></name></type> <name pos:line="2" pos:column="90">xerrno<pos:position pos:line="2" pos:column="96"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="97"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/* Bail out early on COMM_ERR_CLOSING - close handlers will tidy up for us */</comment>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><name pos:line="5" pos:column="9">flag<pos:position pos:line="5" pos:column="13"/></name> <operator pos:line="5" pos:column="14">==<pos:position pos:line="5" pos:column="16"/></operator> <name pos:line="5" pos:column="17">COMM_ERR_CLOSING<pos:position pos:line="5" pos:column="33"/></name></expr>)<pos:position pos:line="5" pos:column="34"/></condition><then pos:line="5" pos:column="34">
        <block type="pseudo"><return pos:line="6" pos:column="9">return;<pos:position pos:line="6" pos:column="16"/></return></block></then></if>

    <expr_stmt><expr><name><name pos:line="8" pos:column="5">aBuffer<pos:position pos:line="8" pos:column="12"/></name><index pos:line="8" pos:column="12">[<expr><name pos:line="8" pos:column="13">aBufferLength<pos:position pos:line="8" pos:column="26"/></name></expr>]<pos:position pos:line="8" pos:column="27"/></index></name> <operator pos:line="8" pos:column="28">=<pos:position pos:line="8" pos:column="29"/></operator> <literal type="char" pos:line="8" pos:column="30">'\0'<pos:position pos:line="8" pos:column="34"/></literal></expr>;<pos:position pos:line="8" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">debugs<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><literal type="number" pos:line="9" pos:column="12">75<pos:position pos:line="9" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="16">3<pos:position pos:line="9" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="19">"whoisReadReply: FD "<pos:position pos:line="9" pos:column="40"/></literal> <operator pos:line="9" pos:column="41">&lt;&lt;<pos:position pos:line="9" pos:column="49"/></operator> <name pos:line="9" pos:column="44">fd<pos:position pos:line="9" pos:column="46"/></name> <operator pos:line="9" pos:column="47">&lt;&lt;<pos:position pos:line="9" pos:column="55"/></operator> <literal type="string" pos:line="9" pos:column="50">" read "<pos:position pos:line="9" pos:column="58"/></literal> <operator pos:line="9" pos:column="59">&lt;&lt;<pos:position pos:line="9" pos:column="67"/></operator> <name pos:line="9" pos:column="62">aBufferLength<pos:position pos:line="9" pos:column="75"/></name> <operator pos:line="9" pos:column="76">&lt;&lt;<pos:position pos:line="9" pos:column="84"/></operator> <literal type="string" pos:line="9" pos:column="79">" bytes"<pos:position pos:line="9" pos:column="87"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="89"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">debugs<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><literal type="number" pos:line="10" pos:column="12">75<pos:position pos:line="10" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="16">5<pos:position pos:line="10" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="19">"{"<pos:position pos:line="10" pos:column="22"/></literal> <operator pos:line="10" pos:column="23">&lt;&lt;<pos:position pos:line="10" pos:column="31"/></operator> <name pos:line="10" pos:column="26">aBuffer<pos:position pos:line="10" pos:column="33"/></name> <operator pos:line="10" pos:column="34">&lt;&lt;<pos:position pos:line="10" pos:column="42"/></operator> <literal type="string" pos:line="10" pos:column="37">"}"<pos:position pos:line="10" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="42"/></expr_stmt>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">flag<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">!=<pos:position pos:line="12" pos:column="16"/></operator> <name pos:line="12" pos:column="17">COMM_OK<pos:position pos:line="12" pos:column="24"/></name></expr>)<pos:position pos:line="12" pos:column="25"/></condition><then pos:line="12" pos:column="25"> <block pos:line="12" pos:column="26">{
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">debugs<pos:position pos:line="13" pos:column="15"/></name><argument_list pos:line="13" pos:column="15">(<argument><expr><literal type="number" pos:line="13" pos:column="16">50<pos:position pos:line="13" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="20">2<pos:position pos:line="13" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="23">"whoisReadReply: FD "<pos:position pos:line="13" pos:column="44"/></literal> <operator pos:line="13" pos:column="45">&lt;&lt;<pos:position pos:line="13" pos:column="53"/></operator> <name pos:line="13" pos:column="48">fd<pos:position pos:line="13" pos:column="50"/></name> <operator pos:line="13" pos:column="51">&lt;&lt;<pos:position pos:line="13" pos:column="59"/></operator> <literal type="string" pos:line="13" pos:column="54">": read failure: "<pos:position pos:line="13" pos:column="72"/></literal> <operator pos:line="13" pos:column="73">&lt;&lt;<pos:position pos:line="13" pos:column="81"/></operator> <call><name pos:line="13" pos:column="76">xstrerror<pos:position pos:line="13" pos:column="85"/></name><argument_list pos:line="13" pos:column="85">()<pos:position pos:line="13" pos:column="87"/></argument_list></call> <operator pos:line="13" pos:column="88">&lt;&lt;<pos:position pos:line="13" pos:column="96"/></operator> <literal type="string" pos:line="13" pos:column="91">"."<pos:position pos:line="13" pos:column="94"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="95"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="96"/></expr_stmt>

        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><call><name pos:line="15" pos:column="13">ignoreErrno<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">(<argument><expr><name pos:line="15" pos:column="25">errno<pos:position pos:line="15" pos:column="30"/></name></expr></argument>)<pos:position pos:line="15" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="32"/></condition><then pos:line="15" pos:column="32"> <block pos:line="15" pos:column="33">{
            <expr_stmt><expr><call><name pos:line="16" pos:column="13">comm_read<pos:position pos:line="16" pos:column="22"/></name><argument_list pos:line="16" pos:column="22">(<argument><expr><name pos:line="16" pos:column="23">fd<pos:position pos:line="16" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="27">aBuffer<pos:position pos:line="16" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="36">BUFSIZ<pos:position pos:line="16" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="44">whoisReadReply<pos:position pos:line="16" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="60">this<pos:position pos:line="16" pos:column="64"/></name></expr></argument>)<pos:position pos:line="16" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="66"/></expr_stmt>
        }<pos:position pos:line="17" pos:column="10"/></block></then> <else pos:line="17" pos:column="11">else <block pos:line="17" pos:column="16">{
            <decl_stmt><decl><type><name pos:line="18" pos:column="13">ErrorState<pos:position pos:line="18" pos:column="23"/></name> <modifier pos:line="18" pos:column="24">*<pos:position pos:line="18" pos:column="25"/></modifier></type><name pos:line="18" pos:column="25">err<pos:position pos:line="18" pos:column="28"/></name></decl>;<pos:position pos:line="18" pos:column="29"/></decl_stmt>
            <expr_stmt><expr><name pos:line="19" pos:column="13">err<pos:position pos:line="19" pos:column="16"/></name> <operator pos:line="19" pos:column="17">=<pos:position pos:line="19" pos:column="18"/></operator> <call><name pos:line="19" pos:column="19">errorCon<pos:position pos:line="19" pos:column="27"/></name><argument_list pos:line="19" pos:column="27">(<argument><expr><name pos:line="19" pos:column="28">ERR_READ_ERROR<pos:position pos:line="19" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="44">HTTP_INTERNAL_SERVER_ERROR<pos:position pos:line="19" pos:column="70"/></name></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="72">fwd<pos:position pos:line="19" pos:column="75"/></name><operator pos:line="19" pos:column="75">-&gt;<pos:position pos:line="19" pos:column="80"/></operator><name pos:line="19" pos:column="77">request<pos:position pos:line="19" pos:column="84"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="86"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="20" pos:column="13">err<pos:position pos:line="20" pos:column="16"/></name><operator pos:line="20" pos:column="16">-&gt;<pos:position pos:line="20" pos:column="21"/></operator><name pos:line="20" pos:column="18">xerrno<pos:position pos:line="20" pos:column="24"/></name></name> <operator pos:line="20" pos:column="25">=<pos:position pos:line="20" pos:column="26"/></operator> <name pos:line="20" pos:column="27">errno<pos:position pos:line="20" pos:column="32"/></name></expr>;<pos:position pos:line="20" pos:column="33"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="21" pos:column="13">fwd<pos:position pos:line="21" pos:column="16"/></name><operator pos:line="21" pos:column="16">-&gt;<pos:position pos:line="21" pos:column="21"/></operator><name pos:line="21" pos:column="18">fail<pos:position pos:line="21" pos:column="22"/></name></name><argument_list pos:line="21" pos:column="22">(<argument><expr><name pos:line="21" pos:column="23">err<pos:position pos:line="21" pos:column="26"/></name></expr></argument>)<pos:position pos:line="21" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="28"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="22" pos:column="13">comm_close<pos:position pos:line="22" pos:column="23"/></name><argument_list pos:line="22" pos:column="23">(<argument><expr><name pos:line="22" pos:column="24">fd<pos:position pos:line="22" pos:column="26"/></name></expr></argument>)<pos:position pos:line="22" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="28"/></expr_stmt>
        }<pos:position pos:line="23" pos:column="10"/></block></else></if>
        <return pos:line="24" pos:column="9">return;<pos:position pos:line="24" pos:column="16"/></return>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>

    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name pos:line="27" pos:column="9">aBufferLength<pos:position pos:line="27" pos:column="22"/></name> <operator pos:line="27" pos:column="23">&gt;<pos:position pos:line="27" pos:column="27"/></operator> <literal type="number" pos:line="27" pos:column="25">0<pos:position pos:line="27" pos:column="26"/></literal></expr>)<pos:position pos:line="27" pos:column="27"/></condition><then pos:line="27" pos:column="27"> <block pos:line="27" pos:column="28">{
        <if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><operator pos:line="28" pos:column="13">!<pos:position pos:line="28" pos:column="14"/></operator><name pos:line="28" pos:column="14">dataWritten<pos:position pos:line="28" pos:column="25"/></name></expr>)<pos:position pos:line="28" pos:column="26"/></condition><then pos:line="28" pos:column="26">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="13">setReplyToOK<pos:position pos:line="29" pos:column="25"/></name><argument_list pos:line="29" pos:column="25">(<argument><expr><name pos:line="29" pos:column="26">entry<pos:position pos:line="29" pos:column="31"/></name></expr></argument>)<pos:position pos:line="29" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="33"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name pos:line="31" pos:column="9">kb_incr<pos:position pos:line="31" pos:column="16"/></name><argument_list pos:line="31" pos:column="16">(<argument><expr><operator pos:line="31" pos:column="17">&amp;<pos:position pos:line="31" pos:column="22"/></operator><name><name pos:line="31" pos:column="18">statCounter<pos:position pos:line="31" pos:column="29"/></name><operator pos:line="31" pos:column="29">.<pos:position pos:line="31" pos:column="30"/></operator><name pos:line="31" pos:column="30">server<pos:position pos:line="31" pos:column="36"/></name><operator pos:line="31" pos:column="36">.<pos:position pos:line="31" pos:column="37"/></operator><name pos:line="31" pos:column="37">all<pos:position pos:line="31" pos:column="40"/></name><operator pos:line="31" pos:column="40">.<pos:position pos:line="31" pos:column="41"/></operator><name pos:line="31" pos:column="41">kbytes_in<pos:position pos:line="31" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="52">aBufferLength<pos:position pos:line="31" pos:column="65"/></name></expr></argument>)<pos:position pos:line="31" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="67"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">kb_incr<pos:position pos:line="32" pos:column="16"/></name><argument_list pos:line="32" pos:column="16">(<argument><expr><operator pos:line="32" pos:column="17">&amp;<pos:position pos:line="32" pos:column="22"/></operator><name><name pos:line="32" pos:column="18">statCounter<pos:position pos:line="32" pos:column="29"/></name><operator pos:line="32" pos:column="29">.<pos:position pos:line="32" pos:column="30"/></operator><name pos:line="32" pos:column="30">server<pos:position pos:line="32" pos:column="36"/></name><operator pos:line="32" pos:column="36">.<pos:position pos:line="32" pos:column="37"/></operator><name pos:line="32" pos:column="37">http<pos:position pos:line="32" pos:column="41"/></name><operator pos:line="32" pos:column="41">.<pos:position pos:line="32" pos:column="42"/></operator><name pos:line="32" pos:column="42">kbytes_in<pos:position pos:line="32" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="53">aBufferLength<pos:position pos:line="32" pos:column="66"/></name></expr></argument>)<pos:position pos:line="32" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="68"/></expr_stmt>

        <comment type="block" pos:line="34" pos:column="9">/* No range support, we always grab it all */</comment>
        <expr_stmt><expr><name pos:line="35" pos:column="9">dataWritten<pos:position pos:line="35" pos:column="20"/></name> <operator pos:line="35" pos:column="21">=<pos:position pos:line="35" pos:column="22"/></operator> <literal type="boolean" pos:line="35" pos:column="23">true<pos:position pos:line="35" pos:column="27"/></literal></expr>;<pos:position pos:line="35" pos:column="28"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="36" pos:column="9">entry<pos:position pos:line="36" pos:column="14"/></name><operator pos:line="36" pos:column="14">-&gt;<pos:position pos:line="36" pos:column="19"/></operator><name pos:line="36" pos:column="16">append<pos:position pos:line="36" pos:column="22"/></name></name><argument_list pos:line="36" pos:column="22">(<argument><expr><name pos:line="36" pos:column="23">aBuffer<pos:position pos:line="36" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="32">aBufferLength<pos:position pos:line="36" pos:column="45"/></name></expr></argument>)<pos:position pos:line="36" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="37" pos:column="9">entry<pos:position pos:line="37" pos:column="14"/></name><operator pos:line="37" pos:column="14">-&gt;<pos:position pos:line="37" pos:column="19"/></operator><name pos:line="37" pos:column="16">flush<pos:position pos:line="37" pos:column="21"/></name></name><argument_list pos:line="37" pos:column="21">()<pos:position pos:line="37" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="24"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="39" pos:column="9">comm_read<pos:position pos:line="39" pos:column="18"/></name><argument_list pos:line="39" pos:column="18">(<argument><expr><name pos:line="39" pos:column="19">fd<pos:position pos:line="39" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="23">aBuffer<pos:position pos:line="39" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="32">BUFSIZ<pos:position pos:line="39" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="40">whoisReadReply<pos:position pos:line="39" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="56">this<pos:position pos:line="39" pos:column="60"/></name></expr></argument>)<pos:position pos:line="39" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="62"/></expr_stmt>
        <return pos:line="40" pos:column="9">return;<pos:position pos:line="40" pos:column="16"/></return>
    }<pos:position pos:line="41" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="43" pos:column="5">/* no bytes read. stop reading */</comment>
    <expr_stmt><expr><call><name><name pos:line="44" pos:column="5">entry<pos:position pos:line="44" pos:column="10"/></name><operator pos:line="44" pos:column="10">-&gt;<pos:position pos:line="44" pos:column="15"/></operator><name pos:line="44" pos:column="12">timestampsSet<pos:position pos:line="44" pos:column="25"/></name></name><argument_list pos:line="44" pos:column="25">()<pos:position pos:line="44" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="45" pos:column="5">entry<pos:position pos:line="45" pos:column="10"/></name><operator pos:line="45" pos:column="10">-&gt;<pos:position pos:line="45" pos:column="15"/></operator><name pos:line="45" pos:column="12">flush<pos:position pos:line="45" pos:column="17"/></name></name><argument_list pos:line="45" pos:column="17">()<pos:position pos:line="45" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="20"/></expr_stmt>

    <if pos:line="47" pos:column="5">if <condition pos:line="47" pos:column="8">(<expr><operator pos:line="47" pos:column="9">!<pos:position pos:line="47" pos:column="10"/></operator><call><name pos:line="47" pos:column="10">EBIT_TEST<pos:position pos:line="47" pos:column="19"/></name><argument_list pos:line="47" pos:column="19">(<argument><expr><name><name pos:line="47" pos:column="20">entry<pos:position pos:line="47" pos:column="25"/></name><operator pos:line="47" pos:column="25">-&gt;<pos:position pos:line="47" pos:column="30"/></operator><name pos:line="47" pos:column="27">flags<pos:position pos:line="47" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="34">RELEASE_REQUEST<pos:position pos:line="47" pos:column="49"/></name></expr></argument>)<pos:position pos:line="47" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="51"/></condition><then pos:line="47" pos:column="51">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="48" pos:column="9">entry<pos:position pos:line="48" pos:column="14"/></name><operator pos:line="48" pos:column="14">-&gt;<pos:position pos:line="48" pos:column="19"/></operator><name pos:line="48" pos:column="16">setPublicKey<pos:position pos:line="48" pos:column="28"/></name></name><argument_list pos:line="48" pos:column="28">()<pos:position pos:line="48" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="31"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="50" pos:column="5">fwd<pos:position pos:line="50" pos:column="8"/></name><operator pos:line="50" pos:column="8">-&gt;<pos:position pos:line="50" pos:column="13"/></operator><name pos:line="50" pos:column="10">complete<pos:position pos:line="50" pos:column="18"/></name></name><argument_list pos:line="50" pos:column="18">()<pos:position pos:line="50" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="51" pos:column="5">debugs<pos:position pos:line="51" pos:column="11"/></name><argument_list pos:line="51" pos:column="11">(<argument><expr><literal type="number" pos:line="51" pos:column="12">75<pos:position pos:line="51" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="51" pos:column="16">3<pos:position pos:line="51" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="19">"whoisReadReply: Done: "<pos:position pos:line="51" pos:column="43"/></literal> <operator pos:line="51" pos:column="44">&lt;&lt;<pos:position pos:line="51" pos:column="52"/></operator> <call><name><name pos:line="51" pos:column="47">entry<pos:position pos:line="51" pos:column="52"/></name><operator pos:line="51" pos:column="52">-&gt;<pos:position pos:line="51" pos:column="57"/></operator><name pos:line="51" pos:column="54">url<pos:position pos:line="51" pos:column="57"/></name></name><argument_list pos:line="51" pos:column="57">()<pos:position pos:line="51" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="51" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="61"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="52" pos:column="5">comm_close<pos:position pos:line="52" pos:column="15"/></name><argument_list pos:line="52" pos:column="15">(<argument><expr><name pos:line="52" pos:column="16">fd<pos:position pos:line="52" pos:column="18"/></name></expr></argument>)<pos:position pos:line="52" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="20"/></expr_stmt>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
