<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5846_squid-3.1.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">_heap_ify_down<pos:position pos:line="2" pos:column="15"/></name><parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><name pos:line="2" pos:column="16">heap<pos:position pos:line="2" pos:column="20"/></name> <modifier pos:line="2" pos:column="21">*<pos:position pos:line="2" pos:column="22"/></modifier></type> <name pos:line="2" pos:column="23">hp<pos:position pos:line="2" pos:column="25"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="27">heap_node<pos:position pos:line="2" pos:column="36"/></name> <modifier pos:line="2" pos:column="37">*<pos:position pos:line="2" pos:column="38"/></modifier></type> <name pos:line="2" pos:column="39">elm<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="43"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">heap_node<pos:position pos:line="4" pos:column="14"/></name> <modifier pos:line="4" pos:column="15">*<pos:position pos:line="4" pos:column="16"/></modifier></type><name pos:line="4" pos:column="16">kid<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">left<pos:position pos:line="5" pos:column="13"/></name> <init pos:line="5" pos:column="14">= <expr><literal type="number" pos:line="5" pos:column="16">0<pos:position pos:line="5" pos:column="17"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="19">right<pos:position pos:line="5" pos:column="24"/></name> <init pos:line="5" pos:column="25">= <expr><literal type="number" pos:line="5" pos:column="27">0<pos:position pos:line="5" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">isTrue<pos:position pos:line="6" pos:column="15"/></name> <init pos:line="6" pos:column="16">= <expr><literal type="number" pos:line="6" pos:column="18">1<pos:position pos:line="6" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
    <while pos:line="7" pos:column="5">while <condition pos:line="7" pos:column="11">(<expr><name pos:line="7" pos:column="12">isTrue<pos:position pos:line="7" pos:column="18"/></name></expr>)<pos:position pos:line="7" pos:column="19"/></condition> <block pos:line="7" pos:column="20">{
        <expr_stmt><expr><name pos:line="8" pos:column="9">left<pos:position pos:line="8" pos:column="13"/></name> <operator pos:line="8" pos:column="14">=<pos:position pos:line="8" pos:column="15"/></operator> <call><name pos:line="8" pos:column="16">Left<pos:position pos:line="8" pos:column="20"/></name><argument_list pos:line="8" pos:column="20">(<argument><expr><name><name pos:line="8" pos:column="21">elm<pos:position pos:line="8" pos:column="24"/></name><operator pos:line="8" pos:column="24">-&gt;<pos:position pos:line="8" pos:column="29"/></operator><name pos:line="8" pos:column="26">id<pos:position pos:line="8" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><name pos:line="9" pos:column="9">right<pos:position pos:line="9" pos:column="14"/></name> <operator pos:line="9" pos:column="15">=<pos:position pos:line="9" pos:column="16"/></operator> <call><name pos:line="9" pos:column="17">Right<pos:position pos:line="9" pos:column="22"/></name><argument_list pos:line="9" pos:column="22">(<argument><expr><name><name pos:line="9" pos:column="23">elm<pos:position pos:line="9" pos:column="26"/></name><operator pos:line="9" pos:column="26">-&gt;<pos:position pos:line="9" pos:column="31"/></operator><name pos:line="9" pos:column="28">id<pos:position pos:line="9" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="32"/></expr_stmt>
        <if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><call><name pos:line="10" pos:column="14">_heap_node_exist<pos:position pos:line="10" pos:column="30"/></name><argument_list pos:line="10" pos:column="30">(<argument><expr><name pos:line="10" pos:column="31">hp<pos:position pos:line="10" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="35">left<pos:position pos:line="10" pos:column="39"/></name></expr></argument>)<pos:position pos:line="10" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="41"/></condition><then pos:line="10" pos:column="41"> <block pos:line="10" pos:column="42">{
            <comment type="block" pos:line="11" pos:column="13">/* At the bottom of the heap (no child). */</comment>

            <expr_stmt><expr><call><name pos:line="13" pos:column="13">assert<pos:position pos:line="13" pos:column="19"/></name><argument_list pos:line="13" pos:column="19">(<argument><expr><operator pos:line="13" pos:column="20">!<pos:position pos:line="13" pos:column="21"/></operator><call><name pos:line="13" pos:column="21">_heap_node_exist<pos:position pos:line="13" pos:column="37"/></name><argument_list pos:line="13" pos:column="37">(<argument><expr><name pos:line="13" pos:column="38">hp<pos:position pos:line="13" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="42">right<pos:position pos:line="13" pos:column="47"/></name></expr></argument>)<pos:position pos:line="13" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="50"/></expr_stmt>
            <break pos:line="14" pos:column="13">break;<pos:position pos:line="14" pos:column="19"/></break>
        }<pos:position pos:line="15" pos:column="10"/></block></then> <elseif pos:line="15" pos:column="11">else <if pos:line="15" pos:column="16">if <condition pos:line="15" pos:column="19">(<expr><operator pos:line="15" pos:column="20">!<pos:position pos:line="15" pos:column="21"/></operator><call><name pos:line="15" pos:column="21">_heap_node_exist<pos:position pos:line="15" pos:column="37"/></name><argument_list pos:line="15" pos:column="37">(<argument><expr><name pos:line="15" pos:column="38">hp<pos:position pos:line="15" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="42">right<pos:position pos:line="15" pos:column="47"/></name></expr></argument>)<pos:position pos:line="15" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="49"/></condition><then pos:line="15" pos:column="49">
            <comment type="block" pos:line="16" pos:column="13">/*  Only left child exists. */</comment>

            <block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="13">kid<pos:position pos:line="18" pos:column="16"/></name> <operator pos:line="18" pos:column="17">=<pos:position pos:line="18" pos:column="18"/></operator> <name><name pos:line="18" pos:column="19">hp<pos:position pos:line="18" pos:column="21"/></name><operator pos:line="18" pos:column="21">-&gt;<pos:position pos:line="18" pos:column="26"/></operator><name pos:line="18" pos:column="23">nodes<pos:position pos:line="18" pos:column="28"/></name><index pos:line="18" pos:column="28">[<expr><name pos:line="18" pos:column="29">left<pos:position pos:line="18" pos:column="33"/></name></expr>]<pos:position pos:line="18" pos:column="34"/></index></name></expr>;<pos:position pos:line="18" pos:column="35"/></expr_stmt></block></then></if></elseif>
        <else pos:line="19" pos:column="9">else <block pos:line="19" pos:column="14">{
            <if pos:line="20" pos:column="13">if <condition pos:line="20" pos:column="16">(<expr><name><name pos:line="20" pos:column="17">hp<pos:position pos:line="20" pos:column="19"/></name><operator pos:line="20" pos:column="19">-&gt;<pos:position pos:line="20" pos:column="24"/></operator><name pos:line="20" pos:column="21">nodes<pos:position pos:line="20" pos:column="26"/></name><index pos:line="20" pos:column="26">[<expr><name pos:line="20" pos:column="27">right<pos:position pos:line="20" pos:column="32"/></name></expr>]<pos:position pos:line="20" pos:column="33"/></index></name><operator pos:line="20" pos:column="33">-&gt;<pos:position pos:line="20" pos:column="38"/></operator><name pos:line="20" pos:column="35">key<pos:position pos:line="20" pos:column="38"/></name> <operator pos:line="20" pos:column="39">&lt;<pos:position pos:line="20" pos:column="43"/></operator> <name><name pos:line="20" pos:column="41">hp<pos:position pos:line="20" pos:column="43"/></name><operator pos:line="20" pos:column="43">-&gt;<pos:position pos:line="20" pos:column="48"/></operator><name pos:line="20" pos:column="45">nodes<pos:position pos:line="20" pos:column="50"/></name><index pos:line="20" pos:column="50">[<expr><name pos:line="20" pos:column="51">left<pos:position pos:line="20" pos:column="55"/></name></expr>]<pos:position pos:line="20" pos:column="56"/></index></name><operator pos:line="20" pos:column="56">-&gt;<pos:position pos:line="20" pos:column="61"/></operator><name pos:line="20" pos:column="58">key<pos:position pos:line="20" pos:column="61"/></name></expr>)<pos:position pos:line="20" pos:column="62"/></condition><then pos:line="20" pos:column="62">
                <block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="17">kid<pos:position pos:line="21" pos:column="20"/></name> <operator pos:line="21" pos:column="21">=<pos:position pos:line="21" pos:column="22"/></operator> <name><name pos:line="21" pos:column="23">hp<pos:position pos:line="21" pos:column="25"/></name><operator pos:line="21" pos:column="25">-&gt;<pos:position pos:line="21" pos:column="30"/></operator><name pos:line="21" pos:column="27">nodes<pos:position pos:line="21" pos:column="32"/></name><index pos:line="21" pos:column="32">[<expr><name pos:line="21" pos:column="33">right<pos:position pos:line="21" pos:column="38"/></name></expr>]<pos:position pos:line="21" pos:column="39"/></index></name></expr>;<pos:position pos:line="21" pos:column="40"/></expr_stmt></block></then>
            <else pos:line="22" pos:column="13">else
                <block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="17">kid<pos:position pos:line="23" pos:column="20"/></name> <operator pos:line="23" pos:column="21">=<pos:position pos:line="23" pos:column="22"/></operator> <name><name pos:line="23" pos:column="23">hp<pos:position pos:line="23" pos:column="25"/></name><operator pos:line="23" pos:column="25">-&gt;<pos:position pos:line="23" pos:column="30"/></operator><name pos:line="23" pos:column="27">nodes<pos:position pos:line="23" pos:column="32"/></name><index pos:line="23" pos:column="32">[<expr><name pos:line="23" pos:column="33">left<pos:position pos:line="23" pos:column="37"/></name></expr>]<pos:position pos:line="23" pos:column="38"/></index></name></expr>;<pos:position pos:line="23" pos:column="39"/></expr_stmt></block></else></if>
        }<pos:position pos:line="24" pos:column="10"/></block></else></if>
        <if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><name><name pos:line="25" pos:column="13">elm<pos:position pos:line="25" pos:column="16"/></name><operator pos:line="25" pos:column="16">-&gt;<pos:position pos:line="25" pos:column="21"/></operator><name pos:line="25" pos:column="18">key<pos:position pos:line="25" pos:column="21"/></name></name> <operator pos:line="25" pos:column="22">&lt;=<pos:position pos:line="25" pos:column="27"/></operator> <name><name pos:line="25" pos:column="25">kid<pos:position pos:line="25" pos:column="28"/></name><operator pos:line="25" pos:column="28">-&gt;<pos:position pos:line="25" pos:column="33"/></operator><name pos:line="25" pos:column="30">key<pos:position pos:line="25" pos:column="33"/></name></name></expr>)<pos:position pos:line="25" pos:column="34"/></condition><then pos:line="25" pos:column="34">
            <block type="pseudo"><break pos:line="26" pos:column="13">break;<pos:position pos:line="26" pos:column="19"/></break></block></then></if>
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">_heap_swap_element<pos:position pos:line="27" pos:column="27"/></name><argument_list pos:line="27" pos:column="27">(<argument><expr><name pos:line="27" pos:column="28">hp<pos:position pos:line="27" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="32">kid<pos:position pos:line="27" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="37">elm<pos:position pos:line="27" pos:column="40"/></name></expr></argument>)<pos:position pos:line="27" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="28" pos:column="6"/></block></while>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
