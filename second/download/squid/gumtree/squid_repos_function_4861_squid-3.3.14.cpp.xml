<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4861_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Rock<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">Rebuild<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">doOneEntry<pos:position pos:line="2" pos:column="26"/></name></name><parameter_list pos:line="2" pos:column="26">()<pos:position pos:line="2" pos:column="28"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">47<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="4" pos:column="15">5<pos:position pos:line="4" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="18">HERE<pos:position pos:line="4" pos:column="22"/></name> <operator pos:line="4" pos:column="23">&lt;&lt;<pos:position pos:line="4" pos:column="31"/></operator> <name><name pos:line="4" pos:column="26">sd<pos:position pos:line="4" pos:column="28"/></name><operator pos:line="4" pos:column="28">-&gt;<pos:position pos:line="4" pos:column="33"/></operator><name pos:line="4" pos:column="30">index<pos:position pos:line="4" pos:column="35"/></name></name> <operator pos:line="4" pos:column="36">&lt;&lt;<pos:position pos:line="4" pos:column="44"/></operator> <literal type="string" pos:line="4" pos:column="39">" filen "<pos:position pos:line="4" pos:column="48"/></literal> <operator pos:line="4" pos:column="49">&lt;&lt;<pos:position pos:line="4" pos:column="57"/></operator> <name pos:line="4" pos:column="52">filen<pos:position pos:line="4" pos:column="57"/></name> <operator pos:line="4" pos:column="58">&lt;&lt;<pos:position pos:line="4" pos:column="66"/></operator> <literal type="string" pos:line="4" pos:column="61">" at "<pos:position pos:line="4" pos:column="67"/></literal> <operator pos:line="4" pos:column="68">&lt;&lt;<pos:position pos:line="4" pos:column="76"/></operator>
           <name pos:line="5" pos:column="12">dbOffset<pos:position pos:line="5" pos:column="20"/></name> <operator pos:line="5" pos:column="21">&lt;&lt;<pos:position pos:line="5" pos:column="29"/></operator> <literal type="string" pos:line="5" pos:column="24">" &lt;= "<pos:position pos:line="5" pos:column="33"/></literal> <operator pos:line="5" pos:column="31">&lt;&lt;<pos:position pos:line="5" pos:column="39"/></operator> <name pos:line="5" pos:column="34">dbSize<pos:position pos:line="5" pos:column="40"/></name></expr></argument>)<pos:position pos:line="5" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="42"/></expr_stmt>

    <expr_stmt><expr><operator pos:line="7" pos:column="5">++<pos:position pos:line="7" pos:column="7"/></operator><name><name pos:line="7" pos:column="7">counts<pos:position pos:line="7" pos:column="13"/></name><operator pos:line="7" pos:column="13">.<pos:position pos:line="7" pos:column="14"/></operator><name pos:line="7" pos:column="14">scancount<pos:position pos:line="7" pos:column="23"/></name></name></expr>;<pos:position pos:line="7" pos:column="24"/></expr_stmt>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><call><name pos:line="9" pos:column="9">lseek<pos:position pos:line="9" pos:column="14"/></name><argument_list pos:line="9" pos:column="14">(<argument><expr><name pos:line="9" pos:column="15">fd<pos:position pos:line="9" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="19">dbOffset<pos:position pos:line="9" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="29">SEEK_SET<pos:position pos:line="9" pos:column="37"/></name></expr></argument>)<pos:position pos:line="9" pos:column="38"/></argument_list></call> <operator pos:line="9" pos:column="39">&lt;<pos:position pos:line="9" pos:column="43"/></operator> <literal type="number" pos:line="9" pos:column="41">0<pos:position pos:line="9" pos:column="42"/></literal></expr>)<pos:position pos:line="9" pos:column="43"/></condition><then pos:line="9" pos:column="43">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="9">failure<pos:position pos:line="10" pos:column="16"/></name><argument_list pos:line="10" pos:column="16">(<argument><expr><literal type="string" pos:line="10" pos:column="17">"cannot seek to db entry"<pos:position pos:line="10" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="44">errno<pos:position pos:line="10" pos:column="49"/></name></expr></argument>)<pos:position pos:line="10" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="51"/></expr_stmt></block></then></if>

    <decl_stmt><decl><type><name pos:line="12" pos:column="5">MemBuf<pos:position pos:line="12" pos:column="11"/></name></type> <name pos:line="12" pos:column="12">buf<pos:position pos:line="12" pos:column="15"/></name></decl>;<pos:position pos:line="12" pos:column="16"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="13" pos:column="5">buf<pos:position pos:line="13" pos:column="8"/></name><operator pos:line="13" pos:column="8">.<pos:position pos:line="13" pos:column="9"/></operator><name pos:line="13" pos:column="9">init<pos:position pos:line="13" pos:column="13"/></name></name><argument_list pos:line="13" pos:column="13">(<argument><expr><name pos:line="13" pos:column="14">SM_PAGE_SIZE<pos:position pos:line="13" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="28">SM_PAGE_SIZE<pos:position pos:line="13" pos:column="40"/></name></expr></argument>)<pos:position pos:line="13" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="42"/></expr_stmt>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><operator pos:line="15" pos:column="9">!<pos:position pos:line="15" pos:column="10"/></operator><call><name pos:line="15" pos:column="10">storeRebuildLoadEntry<pos:position pos:line="15" pos:column="31"/></name><argument_list pos:line="15" pos:column="31">(<argument><expr><name pos:line="15" pos:column="32">fd<pos:position pos:line="15" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="36">sd<pos:position pos:line="15" pos:column="38"/></name><operator pos:line="15" pos:column="38">-&gt;<pos:position pos:line="15" pos:column="43"/></operator><name pos:line="15" pos:column="40">index<pos:position pos:line="15" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="47">buf<pos:position pos:line="15" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="52">counts<pos:position pos:line="15" pos:column="58"/></name></expr></argument>)<pos:position pos:line="15" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="60"/></condition><then pos:line="15" pos:column="60">
        <block type="pseudo"><return pos:line="16" pos:column="9">return;<pos:position pos:line="16" pos:column="16"/></return></block></then></if>

    <comment type="line" pos:line="18" pos:column="5">// get our header</comment>
    <decl_stmt><decl><type><name pos:line="19" pos:column="5">DbCellHeader<pos:position pos:line="19" pos:column="17"/></name></type> <name pos:line="19" pos:column="18">header<pos:position pos:line="19" pos:column="24"/></name></decl>;<pos:position pos:line="19" pos:column="25"/></decl_stmt>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><call><name><name pos:line="20" pos:column="9">buf<pos:position pos:line="20" pos:column="12"/></name><operator pos:line="20" pos:column="12">.<pos:position pos:line="20" pos:column="13"/></operator><name pos:line="20" pos:column="13">contentSize<pos:position pos:line="20" pos:column="24"/></name></name><argument_list pos:line="20" pos:column="24">()<pos:position pos:line="20" pos:column="26"/></argument_list></call> <operator pos:line="20" pos:column="27">&lt;<pos:position pos:line="20" pos:column="31"/></operator> <cast type="static" pos:line="20" pos:column="29">static_cast<argument_list type="generic" pos:line="20" pos:column="40">&lt;<argument><expr><name pos:line="20" pos:column="41">mb_size_t<pos:position pos:line="20" pos:column="50"/></name></expr></argument>&gt;<pos:position pos:line="20" pos:column="54"/></argument_list><argument_list pos:line="20" pos:column="51">(<argument><expr><sizeof pos:line="20" pos:column="52">sizeof<argument_list pos:line="20" pos:column="58">(<argument><expr><name pos:line="20" pos:column="59">header<pos:position pos:line="20" pos:column="65"/></name></expr></argument>)<pos:position pos:line="20" pos:column="66"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="20" pos:column="67"/></argument_list></cast></expr>)<pos:position pos:line="20" pos:column="68"/></condition><then pos:line="20" pos:column="68"> <block pos:line="20" pos:column="69">{
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">debugs<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><literal type="number" pos:line="21" pos:column="16">47<pos:position pos:line="21" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="20">DBG_IMPORTANT<pos:position pos:line="21" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="35">"WARNING: cache_dir["<pos:position pos:line="21" pos:column="56"/></literal> <operator pos:line="21" pos:column="57">&lt;&lt;<pos:position pos:line="21" pos:column="65"/></operator> <name><name pos:line="21" pos:column="60">sd<pos:position pos:line="21" pos:column="62"/></name><operator pos:line="21" pos:column="62">-&gt;<pos:position pos:line="21" pos:column="67"/></operator><name pos:line="21" pos:column="64">index<pos:position pos:line="21" pos:column="69"/></name></name> <operator pos:line="21" pos:column="70">&lt;&lt;<pos:position pos:line="21" pos:column="78"/></operator> <literal type="string" pos:line="21" pos:column="73">"]: "<pos:position pos:line="21" pos:column="78"/></literal> <operator pos:line="21" pos:column="79">&lt;&lt;<pos:position pos:line="21" pos:column="87"/></operator>
               <literal type="string" pos:line="22" pos:column="16">"Ignoring truncated cache entry meta data at "<pos:position pos:line="22" pos:column="62"/></literal> <operator pos:line="22" pos:column="63">&lt;&lt;<pos:position pos:line="22" pos:column="71"/></operator> <name pos:line="22" pos:column="66">dbOffset<pos:position pos:line="22" pos:column="74"/></name></expr></argument>)<pos:position pos:line="22" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="76"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="23" pos:column="9">++<pos:position pos:line="23" pos:column="11"/></operator><name><name pos:line="23" pos:column="11">counts<pos:position pos:line="23" pos:column="17"/></name><operator pos:line="23" pos:column="17">.<pos:position pos:line="23" pos:column="18"/></operator><name pos:line="23" pos:column="18">invalid<pos:position pos:line="23" pos:column="25"/></name></name></expr>;<pos:position pos:line="23" pos:column="26"/></expr_stmt>
        <return pos:line="24" pos:column="9">return;<pos:position pos:line="24" pos:column="16"/></return>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">memcpy<pos:position pos:line="26" pos:column="11"/></name><argument_list pos:line="26" pos:column="11">(<argument><expr><operator pos:line="26" pos:column="12">&amp;<pos:position pos:line="26" pos:column="17"/></operator><name pos:line="26" pos:column="13">header<pos:position pos:line="26" pos:column="19"/></name></expr></argument>, <argument><expr><call><name><name pos:line="26" pos:column="21">buf<pos:position pos:line="26" pos:column="24"/></name><operator pos:line="26" pos:column="24">.<pos:position pos:line="26" pos:column="25"/></operator><name pos:line="26" pos:column="25">content<pos:position pos:line="26" pos:column="32"/></name></name><argument_list pos:line="26" pos:column="32">()<pos:position pos:line="26" pos:column="34"/></argument_list></call></expr></argument>, <argument><expr><sizeof pos:line="26" pos:column="36">sizeof<argument_list pos:line="26" pos:column="42">(<argument><expr><name pos:line="26" pos:column="43">header<pos:position pos:line="26" pos:column="49"/></name></expr></argument>)<pos:position pos:line="26" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="26" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="52"/></expr_stmt>

    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><operator pos:line="28" pos:column="9">!<pos:position pos:line="28" pos:column="10"/></operator><call><name><name pos:line="28" pos:column="10">header<pos:position pos:line="28" pos:column="16"/></name><operator pos:line="28" pos:column="16">.<pos:position pos:line="28" pos:column="17"/></operator><name pos:line="28" pos:column="17">sane<pos:position pos:line="28" pos:column="21"/></name></name><argument_list pos:line="28" pos:column="21">()<pos:position pos:line="28" pos:column="23"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="24"/></condition><then pos:line="28" pos:column="24"> <block pos:line="28" pos:column="25">{
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">debugs<pos:position pos:line="29" pos:column="15"/></name><argument_list pos:line="29" pos:column="15">(<argument><expr><literal type="number" pos:line="29" pos:column="16">47<pos:position pos:line="29" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="20">DBG_IMPORTANT<pos:position pos:line="29" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="35">"WARNING: cache_dir["<pos:position pos:line="29" pos:column="56"/></literal> <operator pos:line="29" pos:column="57">&lt;&lt;<pos:position pos:line="29" pos:column="65"/></operator> <name><name pos:line="29" pos:column="60">sd<pos:position pos:line="29" pos:column="62"/></name><operator pos:line="29" pos:column="62">-&gt;<pos:position pos:line="29" pos:column="67"/></operator><name pos:line="29" pos:column="64">index<pos:position pos:line="29" pos:column="69"/></name></name> <operator pos:line="29" pos:column="70">&lt;&lt;<pos:position pos:line="29" pos:column="78"/></operator> <literal type="string" pos:line="29" pos:column="73">"]: "<pos:position pos:line="29" pos:column="78"/></literal> <operator pos:line="29" pos:column="79">&lt;&lt;<pos:position pos:line="29" pos:column="87"/></operator>
               <literal type="string" pos:line="30" pos:column="16">"Ignoring malformed cache entry meta data at "<pos:position pos:line="30" pos:column="62"/></literal> <operator pos:line="30" pos:column="63">&lt;&lt;<pos:position pos:line="30" pos:column="71"/></operator> <name pos:line="30" pos:column="66">dbOffset<pos:position pos:line="30" pos:column="74"/></name></expr></argument>)<pos:position pos:line="30" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="76"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="31" pos:column="9">++<pos:position pos:line="31" pos:column="11"/></operator><name><name pos:line="31" pos:column="11">counts<pos:position pos:line="31" pos:column="17"/></name><operator pos:line="31" pos:column="17">.<pos:position pos:line="31" pos:column="18"/></operator><name pos:line="31" pos:column="18">invalid<pos:position pos:line="31" pos:column="25"/></name></name></expr>;<pos:position pos:line="31" pos:column="26"/></expr_stmt>
        <return pos:line="32" pos:column="9">return;<pos:position pos:line="32" pos:column="16"/></return>
    }<pos:position pos:line="33" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name><name pos:line="34" pos:column="5">buf<pos:position pos:line="34" pos:column="8"/></name><operator pos:line="34" pos:column="8">.<pos:position pos:line="34" pos:column="9"/></operator><name pos:line="34" pos:column="9">consume<pos:position pos:line="34" pos:column="16"/></name></name><argument_list pos:line="34" pos:column="16">(<argument><expr><sizeof pos:line="34" pos:column="17">sizeof<argument_list pos:line="34" pos:column="23">(<argument><expr><name pos:line="34" pos:column="24">header<pos:position pos:line="34" pos:column="30"/></name></expr></argument>)<pos:position pos:line="34" pos:column="31"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="34" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="33"/></expr_stmt> <comment type="line" pos:line="34" pos:column="34">// optimize to avoid memmove()</comment>

    <decl_stmt><decl><type><name pos:line="36" pos:column="5">cache_key<pos:position pos:line="36" pos:column="14"/></name></type> <name><name pos:line="36" pos:column="15">key<pos:position pos:line="36" pos:column="18"/></name><index pos:line="36" pos:column="18">[<expr><name pos:line="36" pos:column="19">SQUID_MD5_DIGEST_LENGTH<pos:position pos:line="36" pos:column="42"/></name></expr>]<pos:position pos:line="36" pos:column="43"/></index></name></decl>;<pos:position pos:line="36" pos:column="44"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="37" pos:column="5">StoreEntry<pos:position pos:line="37" pos:column="15"/></name></type> <name pos:line="37" pos:column="16">loadedE<pos:position pos:line="37" pos:column="23"/></name></decl>;<pos:position pos:line="37" pos:column="24"/></decl_stmt>
    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><operator pos:line="38" pos:column="9">!<pos:position pos:line="38" pos:column="10"/></operator><call><name pos:line="38" pos:column="10">storeRebuildParseEntry<pos:position pos:line="38" pos:column="32"/></name><argument_list pos:line="38" pos:column="32">(<argument><expr><name pos:line="38" pos:column="33">buf<pos:position pos:line="38" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="38">loadedE<pos:position pos:line="38" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="47">key<pos:position pos:line="38" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="52">counts<pos:position pos:line="38" pos:column="58"/></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="60">header<pos:position pos:line="38" pos:column="66"/></name><operator pos:line="38" pos:column="66">.<pos:position pos:line="38" pos:column="67"/></operator><name pos:line="38" pos:column="67">payloadSize<pos:position pos:line="38" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="79"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="80"/></condition><then pos:line="38" pos:column="80"> <block pos:line="38" pos:column="81">{
        <comment type="line" pos:line="39" pos:column="9">// skip empty slots</comment>
        <if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><name><name pos:line="40" pos:column="13">loadedE<pos:position pos:line="40" pos:column="20"/></name><operator pos:line="40" pos:column="20">.<pos:position pos:line="40" pos:column="21"/></operator><name pos:line="40" pos:column="21">swap_filen<pos:position pos:line="40" pos:column="31"/></name></name> <operator pos:line="40" pos:column="32">&gt;<pos:position pos:line="40" pos:column="36"/></operator> <literal type="number" pos:line="40" pos:column="34">0<pos:position pos:line="40" pos:column="35"/></literal> <operator pos:line="40" pos:column="36">||<pos:position pos:line="40" pos:column="38"/></operator> <name><name pos:line="40" pos:column="39">loadedE<pos:position pos:line="40" pos:column="46"/></name><operator pos:line="40" pos:column="46">.<pos:position pos:line="40" pos:column="47"/></operator><name pos:line="40" pos:column="47">swap_file_sz<pos:position pos:line="40" pos:column="59"/></name></name> <operator pos:line="40" pos:column="60">&gt;<pos:position pos:line="40" pos:column="64"/></operator> <literal type="number" pos:line="40" pos:column="62">0<pos:position pos:line="40" pos:column="63"/></literal></expr>)<pos:position pos:line="40" pos:column="64"/></condition><then pos:line="40" pos:column="64"> <block pos:line="40" pos:column="65">{
            <expr_stmt><expr><operator pos:line="41" pos:column="13">++<pos:position pos:line="41" pos:column="15"/></operator><name><name pos:line="41" pos:column="15">counts<pos:position pos:line="41" pos:column="21"/></name><operator pos:line="41" pos:column="21">.<pos:position pos:line="41" pos:column="22"/></operator><name pos:line="41" pos:column="22">invalid<pos:position pos:line="41" pos:column="29"/></name></name></expr>;<pos:position pos:line="41" pos:column="30"/></expr_stmt>
            <comment type="line" pos:line="42" pos:column="13">//sd-&gt;unlink(filen); leave garbage on disk, it should not hurt</comment>
        }<pos:position pos:line="43" pos:column="10"/></block></then></if>
        <return pos:line="44" pos:column="9">return;<pos:position pos:line="44" pos:column="16"/></return>
    }<pos:position pos:line="45" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="47" pos:column="5">assert<pos:position pos:line="47" pos:column="11"/></name><argument_list pos:line="47" pos:column="11">(<argument><expr><name><name pos:line="47" pos:column="12">loadedE<pos:position pos:line="47" pos:column="19"/></name><operator pos:line="47" pos:column="19">.<pos:position pos:line="47" pos:column="20"/></operator><name pos:line="47" pos:column="20">swap_filen<pos:position pos:line="47" pos:column="30"/></name></name> <operator pos:line="47" pos:column="31">&lt;<pos:position pos:line="47" pos:column="35"/></operator> <name pos:line="47" pos:column="33">dbEntryLimit<pos:position pos:line="47" pos:column="45"/></name></expr></argument>)<pos:position pos:line="47" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="47"/></expr_stmt>
    <if pos:line="48" pos:column="5">if <condition pos:line="48" pos:column="8">(<expr><operator pos:line="48" pos:column="9">!<pos:position pos:line="48" pos:column="10"/></operator><call><name pos:line="48" pos:column="10">storeRebuildKeepEntry<pos:position pos:line="48" pos:column="31"/></name><argument_list pos:line="48" pos:column="31">(<argument><expr><name pos:line="48" pos:column="32">loadedE<pos:position pos:line="48" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="41">key<pos:position pos:line="48" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="46">counts<pos:position pos:line="48" pos:column="52"/></name></expr></argument>)<pos:position pos:line="48" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="54"/></condition><then pos:line="48" pos:column="54">
        <block type="pseudo"><return pos:line="49" pos:column="9">return;<pos:position pos:line="49" pos:column="16"/></return></block></then></if>

    <expr_stmt><expr><operator pos:line="51" pos:column="5">++<pos:position pos:line="51" pos:column="7"/></operator><name><name pos:line="51" pos:column="7">counts<pos:position pos:line="51" pos:column="13"/></name><operator pos:line="51" pos:column="13">.<pos:position pos:line="51" pos:column="14"/></operator><name pos:line="51" pos:column="14">objcount<pos:position pos:line="51" pos:column="22"/></name></name></expr>;<pos:position pos:line="51" pos:column="23"/></expr_stmt>
    <comment type="line" pos:line="52" pos:column="5">// loadedE-&gt;dump(5);</comment>

    <expr_stmt><expr><call><name><name pos:line="54" pos:column="5">sd<pos:position pos:line="54" pos:column="7"/></name><operator pos:line="54" pos:column="7">-&gt;<pos:position pos:line="54" pos:column="12"/></operator><name pos:line="54" pos:column="9">addEntry<pos:position pos:line="54" pos:column="17"/></name></name><argument_list pos:line="54" pos:column="17">(<argument><expr><name pos:line="54" pos:column="18">filen<pos:position pos:line="54" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="25">header<pos:position pos:line="54" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="33">loadedE<pos:position pos:line="54" pos:column="40"/></name></expr></argument>)<pos:position pos:line="54" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="42"/></expr_stmt>
}<pos:position pos:line="55" pos:column="2"/></block></function></unit>
