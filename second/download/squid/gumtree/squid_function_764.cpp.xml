<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_function_764.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">fatal_common<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><specifier pos:line="2" pos:column="14">const<pos:position pos:line="2" pos:column="19"/></specifier> <name pos:line="2" pos:column="20">char<pos:position pos:line="2" pos:column="24"/></name> <modifier pos:line="2" pos:column="25">*<pos:position pos:line="2" pos:column="26"/></modifier></type><name pos:line="2" pos:column="26">message<pos:position pos:line="2" pos:column="33"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="34"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:if pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">if<pos:position pos:line="4" pos:column="4"/></cpp:directive> <expr><name pos:line="4" pos:column="5">HAVE_SYSLOG<pos:position pos:line="4" pos:column="16"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">syslog<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><name pos:line="5" pos:column="12">LOG_ALERT<pos:position pos:line="5" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="23">"%s"<pos:position pos:line="5" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="5" pos:column="29">message<pos:position pos:line="5" pos:column="36"/></name></expr></argument>)<pos:position pos:line="5" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="38"/></expr_stmt>
<cpp:endif pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">endif<pos:position pos:line="6" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="8" pos:column="5">fprintf<pos:position pos:line="8" pos:column="12"/></name><argument_list pos:line="8" pos:column="12">(<argument><expr><name pos:line="8" pos:column="13">debug_log<pos:position pos:line="8" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="24">"FATAL: %s\n"<pos:position pos:line="8" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="39">message<pos:position pos:line="8" pos:column="46"/></name></expr></argument>)<pos:position pos:line="8" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="48"/></expr_stmt>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name><name pos:line="10" pos:column="9">Debug<pos:position pos:line="10" pos:column="14"/></name><operator pos:line="10" pos:column="14">::<pos:position pos:line="10" pos:column="16"/></operator><name pos:line="10" pos:column="16">log_stderr<pos:position pos:line="10" pos:column="26"/></name></name> <operator pos:line="10" pos:column="27">&gt;<pos:position pos:line="10" pos:column="31"/></operator> <literal type="number" pos:line="10" pos:column="29">0<pos:position pos:line="10" pos:column="30"/></literal> <operator pos:line="10" pos:column="31">&amp;&amp;<pos:position pos:line="10" pos:column="41"/></operator> <name pos:line="10" pos:column="34">debug_log<pos:position pos:line="10" pos:column="43"/></name> <operator pos:line="10" pos:column="44">!=<pos:position pos:line="10" pos:column="46"/></operator> <name pos:line="10" pos:column="47">stderr<pos:position pos:line="10" pos:column="53"/></name></expr>)<pos:position pos:line="10" pos:column="54"/></condition><then pos:line="10" pos:column="54">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="9">fprintf<pos:position pos:line="11" pos:column="16"/></name><argument_list pos:line="11" pos:column="16">(<argument><expr><name pos:line="11" pos:column="17">stderr<pos:position pos:line="11" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="25">"FATAL: %s\n"<pos:position pos:line="11" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="40">message<pos:position pos:line="11" pos:column="47"/></name></expr></argument>)<pos:position pos:line="11" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="49"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="13" pos:column="5">fprintf<pos:position pos:line="13" pos:column="12"/></name><argument_list pos:line="13" pos:column="12">(<argument><expr><name pos:line="13" pos:column="13">debug_log<pos:position pos:line="13" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="24">"Squid Cache (Version %s): Terminated abnormally.\n"<pos:position pos:line="13" pos:column="76"/></literal></expr></argument>,
            <argument><expr><name pos:line="14" pos:column="13">version_string<pos:position pos:line="14" pos:column="27"/></name></expr></argument>)<pos:position pos:line="14" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="29"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="16" pos:column="5">fflush<pos:position pos:line="16" pos:column="11"/></name><argument_list pos:line="16" pos:column="11">(<argument><expr><name pos:line="16" pos:column="12">debug_log<pos:position pos:line="16" pos:column="21"/></name></expr></argument>)<pos:position pos:line="16" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="23"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="18" pos:column="5">PrintRusage<pos:position pos:line="18" pos:column="16"/></name><argument_list pos:line="18" pos:column="16">()<pos:position pos:line="18" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="19"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="20" pos:column="5">dumpMallocStats<pos:position pos:line="20" pos:column="20"/></name><argument_list pos:line="20" pos:column="20">()<pos:position pos:line="20" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="23"/></expr_stmt>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
