<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5443_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ftp<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">Client<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">handleEpsvReply<pos:position pos:line="2" pos:column="29"/></name></name><parameter_list pos:line="2" pos:column="29">(<parameter><decl><type><name><name pos:line="2" pos:column="30">Ip<pos:position pos:line="2" pos:column="32"/></name><operator pos:line="2" pos:column="32">::<pos:position pos:line="2" pos:column="34"/></operator><name pos:line="2" pos:column="34">Address<pos:position pos:line="2" pos:column="41"/></name></name> <modifier pos:line="2" pos:column="42">&amp;<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="43">remoteAddr<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="54"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">code<pos:position pos:line="4" pos:column="13"/></name> <init pos:line="4" pos:column="14">= <expr><name><name pos:line="4" pos:column="16">ctrl<pos:position pos:line="4" pos:column="20"/></name><operator pos:line="4" pos:column="20">.<pos:position pos:line="4" pos:column="21"/></operator><name pos:line="4" pos:column="21">replycode<pos:position pos:line="4" pos:column="30"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">buf<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">debugs<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><literal type="number" pos:line="6" pos:column="12">9<pos:position pos:line="6" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="15">3<pos:position pos:line="6" pos:column="16"/></literal></expr></argument>, <argument><expr><call><name pos:line="6" pos:column="18">status<pos:position pos:line="6" pos:column="24"/></name><argument_list pos:line="6" pos:column="24">()<pos:position pos:line="6" pos:column="26"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="28"/></expr_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><operator pos:line="8" pos:column="9">!<pos:position pos:line="8" pos:column="10"/></operator><call><name><name pos:line="8" pos:column="10">Comm<pos:position pos:line="8" pos:column="14"/></name><operator pos:line="8" pos:column="14">::<pos:position pos:line="8" pos:column="16"/></operator><name pos:line="8" pos:column="16">IsConnOpen<pos:position pos:line="8" pos:column="26"/></name></name><argument_list pos:line="8" pos:column="26">(<argument><expr><name><name pos:line="8" pos:column="27">ctrl<pos:position pos:line="8" pos:column="31"/></name><operator pos:line="8" pos:column="31">.<pos:position pos:line="8" pos:column="32"/></operator><name pos:line="8" pos:column="32">conn<pos:position pos:line="8" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="38"/></condition><then pos:line="8" pos:column="38"> <block pos:line="8" pos:column="39">{
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">debugs<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><literal type="number" pos:line="9" pos:column="16">9<pos:position pos:line="9" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="19">5<pos:position pos:line="9" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="22">"The control connection to the remote end is closed"<pos:position pos:line="9" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="76"/></expr_stmt>
        <return pos:line="10" pos:column="9">return <expr><literal type="boolean" pos:line="10" pos:column="16">false<pos:position pos:line="10" pos:column="21"/></literal></expr>;<pos:position pos:line="10" pos:column="22"/></return>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">code<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">!=<pos:position pos:line="13" pos:column="16"/></operator> <literal type="number" pos:line="13" pos:column="17">229<pos:position pos:line="13" pos:column="20"/></literal> <operator pos:line="13" pos:column="21">&amp;&amp;<pos:position pos:line="13" pos:column="31"/></operator> <name pos:line="13" pos:column="24">code<pos:position pos:line="13" pos:column="28"/></name> <operator pos:line="13" pos:column="29">!=<pos:position pos:line="13" pos:column="31"/></operator> <literal type="number" pos:line="13" pos:column="32">522<pos:position pos:line="13" pos:column="35"/></literal></expr>)<pos:position pos:line="13" pos:column="36"/></condition><then pos:line="13" pos:column="36"> <block pos:line="13" pos:column="37">{
        <if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">code<pos:position pos:line="14" pos:column="17"/></name> <operator pos:line="14" pos:column="18">==<pos:position pos:line="14" pos:column="20"/></operator> <literal type="number" pos:line="14" pos:column="21">200<pos:position pos:line="14" pos:column="24"/></literal></expr>)<pos:position pos:line="14" pos:column="25"/></condition><then pos:line="14" pos:column="25"> <block pos:line="14" pos:column="26">{
            <comment type="block" pos:line="15" pos:column="13">/* handle broken servers (RFC 2428 says OK code for EPSV MUST be 229 not 200) */</comment>
            <comment type="block" pos:line="16" pos:column="13">/* vsftpd for one send '200 EPSV ALL ok.' without even port info.
             * Its okay to re-send EPSV 1/2 but nothing else. */</comment>
            <expr_stmt><expr><call><name pos:line="18" pos:column="13">debugs<pos:position pos:line="18" pos:column="19"/></name><argument_list pos:line="18" pos:column="19">(<argument><expr><literal type="number" pos:line="18" pos:column="20">9<pos:position pos:line="18" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="23">DBG_IMPORTANT<pos:position pos:line="18" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="38">"Broken FTP Server at "<pos:position pos:line="18" pos:column="61"/></literal> <operator pos:line="18" pos:column="62">&lt;&lt;<pos:position pos:line="18" pos:column="70"/></operator> <name><name pos:line="18" pos:column="65">ctrl<pos:position pos:line="18" pos:column="69"/></name><operator pos:line="18" pos:column="69">.<pos:position pos:line="18" pos:column="70"/></operator><name pos:line="18" pos:column="70">conn<pos:position pos:line="18" pos:column="74"/></name><operator pos:line="18" pos:column="74">-&gt;<pos:position pos:line="18" pos:column="79"/></operator><name pos:line="18" pos:column="76">remote<pos:position pos:line="18" pos:column="82"/></name></name> <operator pos:line="18" pos:column="83">&lt;&lt;<pos:position pos:line="18" pos:column="91"/></operator> <literal type="string" pos:line="18" pos:column="86">". Wrong accept code for EPSV"<pos:position pos:line="18" pos:column="116"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="117"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="118"/></expr_stmt>
        }<pos:position pos:line="19" pos:column="10"/></block></then> <else pos:line="19" pos:column="11">else <block pos:line="19" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="20" pos:column="13">debugs<pos:position pos:line="20" pos:column="19"/></name><argument_list pos:line="20" pos:column="19">(<argument><expr><literal type="number" pos:line="20" pos:column="20">9<pos:position pos:line="20" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="23">2<pos:position pos:line="20" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="26">"EPSV not supported by remote end"<pos:position pos:line="20" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="62"/></expr_stmt>
        }<pos:position pos:line="21" pos:column="10"/></block></else></if>
        <return pos:line="22" pos:column="9">return <expr><call><name pos:line="22" pos:column="16">sendPassive<pos:position pos:line="22" pos:column="27"/></name><argument_list pos:line="22" pos:column="27">()<pos:position pos:line="22" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="30"/></return>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>

    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name pos:line="25" pos:column="9">code<pos:position pos:line="25" pos:column="13"/></name> <operator pos:line="25" pos:column="14">==<pos:position pos:line="25" pos:column="16"/></operator> <literal type="number" pos:line="25" pos:column="17">522<pos:position pos:line="25" pos:column="20"/></literal></expr>)<pos:position pos:line="25" pos:column="21"/></condition><then pos:line="25" pos:column="21"> <block pos:line="25" pos:column="22">{
        <comment type="block" pos:line="26" pos:column="9">/* Peer responded with a list of supported methods:
         *   522 Network protocol not supported, use (1)
         *   522 Network protocol not supported, use (1,2)
         *   522 Network protocol not supported, use (2)
         * TODO: Handle the (1,2) case which may happen after EPSV ALL. Close
         * data + control without self-destructing and re-open from scratch.
         */</comment>
        <expr_stmt><expr><call><name pos:line="33" pos:column="9">debugs<pos:position pos:line="33" pos:column="15"/></name><argument_list pos:line="33" pos:column="15">(<argument><expr><literal type="number" pos:line="33" pos:column="16">9<pos:position pos:line="33" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="19">5<pos:position pos:line="33" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="22">"scanning: "<pos:position pos:line="33" pos:column="34"/></literal> <operator pos:line="33" pos:column="35">&lt;&lt;<pos:position pos:line="33" pos:column="43"/></operator> <name><name pos:line="33" pos:column="38">ctrl<pos:position pos:line="33" pos:column="42"/></name><operator pos:line="33" pos:column="42">.<pos:position pos:line="33" pos:column="43"/></operator><name pos:line="33" pos:column="43">last_reply<pos:position pos:line="33" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="55"/></expr_stmt>
        <expr_stmt><expr><name pos:line="34" pos:column="9">buf<pos:position pos:line="34" pos:column="12"/></name> <operator pos:line="34" pos:column="13">=<pos:position pos:line="34" pos:column="14"/></operator> <name><name pos:line="34" pos:column="15">ctrl<pos:position pos:line="34" pos:column="19"/></name><operator pos:line="34" pos:column="19">.<pos:position pos:line="34" pos:column="20"/></operator><name pos:line="34" pos:column="20">last_reply<pos:position pos:line="34" pos:column="30"/></name></name></expr>;<pos:position pos:line="34" pos:column="31"/></expr_stmt>
        <while pos:line="35" pos:column="9">while <condition pos:line="35" pos:column="15">(<expr><name pos:line="35" pos:column="16">buf<pos:position pos:line="35" pos:column="19"/></name> <operator pos:line="35" pos:column="20">!=<pos:position pos:line="35" pos:column="22"/></operator> <name pos:line="35" pos:column="23">NULL<pos:position pos:line="35" pos:column="27"/></name> <operator pos:line="35" pos:column="28">&amp;&amp;<pos:position pos:line="35" pos:column="38"/></operator> <operator pos:line="35" pos:column="31">*<pos:position pos:line="35" pos:column="32"/></operator><name pos:line="35" pos:column="32">buf<pos:position pos:line="35" pos:column="35"/></name> <operator pos:line="35" pos:column="36">!=<pos:position pos:line="35" pos:column="38"/></operator> <literal type="char" pos:line="35" pos:column="39">'\0'<pos:position pos:line="35" pos:column="43"/></literal> <operator pos:line="35" pos:column="44">&amp;&amp;<pos:position pos:line="35" pos:column="54"/></operator> <operator pos:line="35" pos:column="47">*<pos:position pos:line="35" pos:column="48"/></operator><name pos:line="35" pos:column="48">buf<pos:position pos:line="35" pos:column="51"/></name> <operator pos:line="35" pos:column="52">!=<pos:position pos:line="35" pos:column="54"/></operator> <literal type="char" pos:line="35" pos:column="55">'\n'<pos:position pos:line="35" pos:column="59"/></literal> <operator pos:line="35" pos:column="60">&amp;&amp;<pos:position pos:line="35" pos:column="70"/></operator> <operator pos:line="35" pos:column="63">*<pos:position pos:line="35" pos:column="64"/></operator><name pos:line="35" pos:column="64">buf<pos:position pos:line="35" pos:column="67"/></name> <operator pos:line="35" pos:column="68">!=<pos:position pos:line="35" pos:column="70"/></operator> <literal type="char" pos:line="35" pos:column="71">'('<pos:position pos:line="35" pos:column="74"/></literal></expr>)<pos:position pos:line="35" pos:column="75"/></condition>
            <block type="pseudo"><expr_stmt><expr><operator pos:line="36" pos:column="13">++<pos:position pos:line="36" pos:column="15"/></operator><name pos:line="36" pos:column="15">buf<pos:position pos:line="36" pos:column="18"/></name></expr>;<pos:position pos:line="36" pos:column="19"/></expr_stmt></block></while>
        <if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><name pos:line="37" pos:column="13">buf<pos:position pos:line="37" pos:column="16"/></name> <operator pos:line="37" pos:column="17">!=<pos:position pos:line="37" pos:column="19"/></operator> <name pos:line="37" pos:column="20">NULL<pos:position pos:line="37" pos:column="24"/></name> <operator pos:line="37" pos:column="25">&amp;&amp;<pos:position pos:line="37" pos:column="35"/></operator> <operator pos:line="37" pos:column="28">*<pos:position pos:line="37" pos:column="29"/></operator><name pos:line="37" pos:column="29">buf<pos:position pos:line="37" pos:column="32"/></name> <operator pos:line="37" pos:column="33">==<pos:position pos:line="37" pos:column="35"/></operator> <literal type="char" pos:line="37" pos:column="36">'\n'<pos:position pos:line="37" pos:column="40"/></literal></expr>)<pos:position pos:line="37" pos:column="41"/></condition><then pos:line="37" pos:column="41">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="38" pos:column="13">++<pos:position pos:line="38" pos:column="15"/></operator><name pos:line="38" pos:column="15">buf<pos:position pos:line="38" pos:column="18"/></name></expr>;<pos:position pos:line="38" pos:column="19"/></expr_stmt></block></then></if>

        <if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><name pos:line="40" pos:column="13">buf<pos:position pos:line="40" pos:column="16"/></name> <operator pos:line="40" pos:column="17">==<pos:position pos:line="40" pos:column="19"/></operator> <name pos:line="40" pos:column="20">NULL<pos:position pos:line="40" pos:column="24"/></name> <operator pos:line="40" pos:column="25">||<pos:position pos:line="40" pos:column="27"/></operator> <operator pos:line="40" pos:column="28">*<pos:position pos:line="40" pos:column="29"/></operator><name pos:line="40" pos:column="29">buf<pos:position pos:line="40" pos:column="32"/></name> <operator pos:line="40" pos:column="33">==<pos:position pos:line="40" pos:column="35"/></operator> <literal type="char" pos:line="40" pos:column="36">'\0'<pos:position pos:line="40" pos:column="40"/></literal></expr>)<pos:position pos:line="40" pos:column="41"/></condition><then pos:line="40" pos:column="41"> <block pos:line="40" pos:column="42">{
            <comment type="block" pos:line="41" pos:column="13">/* handle broken server (RFC 2428 says MUST specify supported protocols in 522) */</comment>
            <expr_stmt><expr><call><name pos:line="42" pos:column="13">debugs<pos:position pos:line="42" pos:column="19"/></name><argument_list pos:line="42" pos:column="19">(<argument><expr><literal type="number" pos:line="42" pos:column="20">9<pos:position pos:line="42" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="23">DBG_IMPORTANT<pos:position pos:line="42" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="38">"Broken FTP Server at "<pos:position pos:line="42" pos:column="61"/></literal> <operator pos:line="42" pos:column="62">&lt;&lt;<pos:position pos:line="42" pos:column="70"/></operator> <name><name pos:line="42" pos:column="65">ctrl<pos:position pos:line="42" pos:column="69"/></name><operator pos:line="42" pos:column="69">.<pos:position pos:line="42" pos:column="70"/></operator><name pos:line="42" pos:column="70">conn<pos:position pos:line="42" pos:column="74"/></name><operator pos:line="42" pos:column="74">-&gt;<pos:position pos:line="42" pos:column="79"/></operator><name pos:line="42" pos:column="76">remote<pos:position pos:line="42" pos:column="82"/></name></name> <operator pos:line="42" pos:column="83">&lt;&lt;<pos:position pos:line="42" pos:column="91"/></operator> <literal type="string" pos:line="42" pos:column="86">". 522 error missing protocol negotiation hints"<pos:position pos:line="42" pos:column="134"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="135"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="136"/></expr_stmt>
            <return pos:line="43" pos:column="13">return <expr><call><name pos:line="43" pos:column="20">sendPassive<pos:position pos:line="43" pos:column="31"/></name><argument_list pos:line="43" pos:column="31">()<pos:position pos:line="43" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="34"/></return>
        }<pos:position pos:line="44" pos:column="10"/></block></then> <elseif pos:line="44" pos:column="11">else <if pos:line="44" pos:column="16">if <condition pos:line="44" pos:column="19">(<expr><call><name pos:line="44" pos:column="20">strcmp<pos:position pos:line="44" pos:column="26"/></name><argument_list pos:line="44" pos:column="26">(<argument><expr><name pos:line="44" pos:column="27">buf<pos:position pos:line="44" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="32">"(1)"<pos:position pos:line="44" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="38"/></argument_list></call> <operator pos:line="44" pos:column="39">==<pos:position pos:line="44" pos:column="41"/></operator> <literal type="number" pos:line="44" pos:column="42">0<pos:position pos:line="44" pos:column="43"/></literal></expr>)<pos:position pos:line="44" pos:column="44"/></condition><then pos:line="44" pos:column="44"> <block pos:line="44" pos:column="45">{
            <expr_stmt><expr><name pos:line="45" pos:column="13">state<pos:position pos:line="45" pos:column="18"/></name> <operator pos:line="45" pos:column="19">=<pos:position pos:line="45" pos:column="20"/></operator> <name pos:line="45" pos:column="21">SENT_EPSV_2<pos:position pos:line="45" pos:column="32"/></name></expr>;<pos:position pos:line="45" pos:column="33"/></expr_stmt> <comment type="block" pos:line="45" pos:column="34">/* simulate having sent and failed EPSV 2 */</comment>
            <return pos:line="46" pos:column="13">return <expr><call><name pos:line="46" pos:column="20">sendPassive<pos:position pos:line="46" pos:column="31"/></name><argument_list pos:line="46" pos:column="31">()<pos:position pos:line="46" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="34"/></return>
        }<pos:position pos:line="47" pos:column="10"/></block></then></if></elseif> <elseif pos:line="47" pos:column="11">else <if pos:line="47" pos:column="16">if <condition pos:line="47" pos:column="19">(<expr><call><name pos:line="47" pos:column="20">strcmp<pos:position pos:line="47" pos:column="26"/></name><argument_list pos:line="47" pos:column="26">(<argument><expr><name pos:line="47" pos:column="27">buf<pos:position pos:line="47" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="32">"(2)"<pos:position pos:line="47" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="38"/></argument_list></call> <operator pos:line="47" pos:column="39">==<pos:position pos:line="47" pos:column="41"/></operator> <literal type="number" pos:line="47" pos:column="42">0<pos:position pos:line="47" pos:column="43"/></literal></expr>)<pos:position pos:line="47" pos:column="44"/></condition><then pos:line="47" pos:column="44"> <block pos:line="47" pos:column="45">{
            <if pos:line="48" pos:column="13">if <condition pos:line="48" pos:column="16">(<expr><name><name pos:line="48" pos:column="17">Ip<pos:position pos:line="48" pos:column="19"/></name><operator pos:line="48" pos:column="19">::<pos:position pos:line="48" pos:column="21"/></operator><name pos:line="48" pos:column="21">EnableIpv6<pos:position pos:line="48" pos:column="31"/></name></name></expr>)<pos:position pos:line="48" pos:column="32"/></condition><then pos:line="48" pos:column="32"> <block pos:line="48" pos:column="33">{
                <comment type="block" pos:line="49" pos:column="17">/* If server only supports EPSV 2 and we have already tried that. Go straight to EPRT */</comment>
                <if pos:line="50" pos:column="17">if <condition pos:line="50" pos:column="20">(<expr><name pos:line="50" pos:column="21">state<pos:position pos:line="50" pos:column="26"/></name> <operator pos:line="50" pos:column="27">==<pos:position pos:line="50" pos:column="29"/></operator> <name pos:line="50" pos:column="30">SENT_EPSV_2<pos:position pos:line="50" pos:column="41"/></name></expr>)<pos:position pos:line="50" pos:column="42"/></condition><then pos:line="50" pos:column="42"> <block pos:line="50" pos:column="43">{
                    <return pos:line="51" pos:column="21">return <expr><call><name pos:line="51" pos:column="28">sendEprt<pos:position pos:line="51" pos:column="36"/></name><argument_list pos:line="51" pos:column="36">()<pos:position pos:line="51" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="39"/></return>
                }<pos:position pos:line="52" pos:column="18"/></block></then> <else pos:line="52" pos:column="19">else <block pos:line="52" pos:column="24">{
                    <comment type="block" pos:line="53" pos:column="21">/* or try the next Passive mode down the chain. */</comment>
                    <return pos:line="54" pos:column="21">return <expr><call><name pos:line="54" pos:column="28">sendPassive<pos:position pos:line="54" pos:column="39"/></name><argument_list pos:line="54" pos:column="39">()<pos:position pos:line="54" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="42"/></return>
                }<pos:position pos:line="55" pos:column="18"/></block></else></if>
            }<pos:position pos:line="56" pos:column="14"/></block></then> <else pos:line="56" pos:column="15">else <block pos:line="56" pos:column="20">{
                <comment type="block" pos:line="57" pos:column="17">/* Server only accept EPSV in IPv6 traffic. */</comment>
                <expr_stmt><expr><name pos:line="58" pos:column="17">state<pos:position pos:line="58" pos:column="22"/></name> <operator pos:line="58" pos:column="23">=<pos:position pos:line="58" pos:column="24"/></operator> <name pos:line="58" pos:column="25">SENT_EPSV_1<pos:position pos:line="58" pos:column="36"/></name></expr>;<pos:position pos:line="58" pos:column="37"/></expr_stmt> <comment type="block" pos:line="58" pos:column="38">/* simulate having sent and failed EPSV 1 */</comment>
                <return pos:line="59" pos:column="17">return <expr><call><name pos:line="59" pos:column="24">sendPassive<pos:position pos:line="59" pos:column="35"/></name><argument_list pos:line="59" pos:column="35">()<pos:position pos:line="59" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="38"/></return>
            }<pos:position pos:line="60" pos:column="14"/></block></else></if>
        }<pos:position pos:line="61" pos:column="10"/></block></then></if></elseif> <else pos:line="61" pos:column="11">else <block pos:line="61" pos:column="16">{
            <comment type="block" pos:line="62" pos:column="13">/* handle broken server (RFC 2428 says MUST specify supported protocols in 522) */</comment>
            <expr_stmt><expr><call><name pos:line="63" pos:column="13">debugs<pos:position pos:line="63" pos:column="19"/></name><argument_list pos:line="63" pos:column="19">(<argument><expr><literal type="number" pos:line="63" pos:column="20">9<pos:position pos:line="63" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="63" pos:column="23">DBG_IMPORTANT<pos:position pos:line="63" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="38">"WARNING: Server at "<pos:position pos:line="63" pos:column="59"/></literal> <operator pos:line="63" pos:column="60">&lt;&lt;<pos:position pos:line="63" pos:column="68"/></operator> <name><name pos:line="63" pos:column="63">ctrl<pos:position pos:line="63" pos:column="67"/></name><operator pos:line="63" pos:column="67">.<pos:position pos:line="63" pos:column="68"/></operator><name pos:line="63" pos:column="68">conn<pos:position pos:line="63" pos:column="72"/></name><operator pos:line="63" pos:column="72">-&gt;<pos:position pos:line="63" pos:column="77"/></operator><name pos:line="63" pos:column="74">remote<pos:position pos:line="63" pos:column="80"/></name></name> <operator pos:line="63" pos:column="81">&lt;&lt;<pos:position pos:line="63" pos:column="89"/></operator> <literal type="string" pos:line="63" pos:column="84">" sent unknown protocol negotiation hint: "<pos:position pos:line="63" pos:column="127"/></literal> <operator pos:line="63" pos:column="128">&lt;&lt;<pos:position pos:line="63" pos:column="136"/></operator> <name pos:line="63" pos:column="131">buf<pos:position pos:line="63" pos:column="134"/></name></expr></argument>)<pos:position pos:line="63" pos:column="135"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="136"/></expr_stmt>
            <return pos:line="64" pos:column="13">return <expr><call><name pos:line="64" pos:column="20">sendPassive<pos:position pos:line="64" pos:column="31"/></name><argument_list pos:line="64" pos:column="31">()<pos:position pos:line="64" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="34"/></return>
        }<pos:position pos:line="65" pos:column="10"/></block></else></if>
        <expr_stmt><expr><call><name pos:line="66" pos:column="9">failed<pos:position pos:line="66" pos:column="15"/></name><argument_list pos:line="66" pos:column="15">(<argument><expr><name pos:line="66" pos:column="16">ERR_FTP_FAILURE<pos:position pos:line="66" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="66" pos:column="33">0<pos:position pos:line="66" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="36"/></expr_stmt>
        <return pos:line="67" pos:column="9">return <expr><literal type="boolean" pos:line="67" pos:column="16">false<pos:position pos:line="67" pos:column="21"/></literal></expr>;<pos:position pos:line="67" pos:column="22"/></return>
    }<pos:position pos:line="68" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="70" pos:column="5">/*  229 Entering Extended Passive Mode (|||port|) */</comment>
    <comment type="block" pos:line="71" pos:column="5">/*  ANSI sez [^0-9] is undefined, it breaks on Watcom cc */</comment>
    <expr_stmt><expr><call><name pos:line="72" pos:column="5">debugs<pos:position pos:line="72" pos:column="11"/></name><argument_list pos:line="72" pos:column="11">(<argument><expr><literal type="number" pos:line="72" pos:column="12">9<pos:position pos:line="72" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="72" pos:column="15">5<pos:position pos:line="72" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="72" pos:column="18">"scanning: "<pos:position pos:line="72" pos:column="30"/></literal> <operator pos:line="72" pos:column="31">&lt;&lt;<pos:position pos:line="72" pos:column="39"/></operator> <name><name pos:line="72" pos:column="34">ctrl<pos:position pos:line="72" pos:column="38"/></name><operator pos:line="72" pos:column="38">.<pos:position pos:line="72" pos:column="39"/></operator><name pos:line="72" pos:column="39">last_reply<pos:position pos:line="72" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="72" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="51"/></expr_stmt>

    <expr_stmt><expr><name pos:line="74" pos:column="5">buf<pos:position pos:line="74" pos:column="8"/></name> <operator pos:line="74" pos:column="9">=<pos:position pos:line="74" pos:column="10"/></operator> <name><name pos:line="74" pos:column="11">ctrl<pos:position pos:line="74" pos:column="15"/></name><operator pos:line="74" pos:column="15">.<pos:position pos:line="74" pos:column="16"/></operator><name pos:line="74" pos:column="16">last_reply<pos:position pos:line="74" pos:column="26"/></name></name> <operator pos:line="74" pos:column="27">+<pos:position pos:line="74" pos:column="28"/></operator> <call><name pos:line="74" pos:column="29">strcspn<pos:position pos:line="74" pos:column="36"/></name><argument_list pos:line="74" pos:column="36">(<argument><expr><name><name pos:line="74" pos:column="37">ctrl<pos:position pos:line="74" pos:column="41"/></name><operator pos:line="74" pos:column="41">.<pos:position pos:line="74" pos:column="42"/></operator><name pos:line="74" pos:column="42">last_reply<pos:position pos:line="74" pos:column="52"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="74" pos:column="54">"("<pos:position pos:line="74" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="59"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="76" pos:column="5">char<pos:position pos:line="76" pos:column="9"/></name></type> <name pos:line="76" pos:column="10">h1<pos:position pos:line="76" pos:column="12"/></name></decl>, <decl><type ref="prev"/><name pos:line="76" pos:column="14">h2<pos:position pos:line="76" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="76" pos:column="18">h3<pos:position pos:line="76" pos:column="20"/></name></decl>, <decl><type ref="prev"/><name pos:line="76" pos:column="22">h4<pos:position pos:line="76" pos:column="24"/></name></decl>;<pos:position pos:line="76" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="77" pos:column="5">unsigned<pos:position pos:line="77" pos:column="13"/></name> <name pos:line="77" pos:column="14">short<pos:position pos:line="77" pos:column="19"/></name></type> <name pos:line="77" pos:column="20">port<pos:position pos:line="77" pos:column="24"/></name></decl>;<pos:position pos:line="77" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="78" pos:column="5">int<pos:position pos:line="78" pos:column="8"/></name></type> <name pos:line="78" pos:column="9">n<pos:position pos:line="78" pos:column="10"/></name> <init pos:line="78" pos:column="11">= <expr><call><name pos:line="78" pos:column="13">sscanf<pos:position pos:line="78" pos:column="19"/></name><argument_list pos:line="78" pos:column="19">(<argument><expr><name pos:line="78" pos:column="20">buf<pos:position pos:line="78" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="78" pos:column="25">"(%c%c%c%hu%c)"<pos:position pos:line="78" pos:column="40"/></literal></expr></argument>, <argument><expr><operator pos:line="78" pos:column="42">&amp;<pos:position pos:line="78" pos:column="47"/></operator><name pos:line="78" pos:column="43">h1<pos:position pos:line="78" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="78" pos:column="47">&amp;<pos:position pos:line="78" pos:column="52"/></operator><name pos:line="78" pos:column="48">h2<pos:position pos:line="78" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="78" pos:column="52">&amp;<pos:position pos:line="78" pos:column="57"/></operator><name pos:line="78" pos:column="53">h3<pos:position pos:line="78" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="78" pos:column="57">&amp;<pos:position pos:line="78" pos:column="62"/></operator><name pos:line="78" pos:column="58">port<pos:position pos:line="78" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="78" pos:column="64">&amp;<pos:position pos:line="78" pos:column="69"/></operator><name pos:line="78" pos:column="65">h4<pos:position pos:line="78" pos:column="67"/></name></expr></argument>)<pos:position pos:line="78" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="78" pos:column="69"/></decl_stmt>

    <if pos:line="80" pos:column="5">if <condition pos:line="80" pos:column="8">(<expr><name pos:line="80" pos:column="9">n<pos:position pos:line="80" pos:column="10"/></name> <operator pos:line="80" pos:column="11">&lt;<pos:position pos:line="80" pos:column="15"/></operator> <literal type="number" pos:line="80" pos:column="13">4<pos:position pos:line="80" pos:column="14"/></literal> <operator pos:line="80" pos:column="15">||<pos:position pos:line="80" pos:column="17"/></operator> <name pos:line="80" pos:column="18">h1<pos:position pos:line="80" pos:column="20"/></name> <operator pos:line="80" pos:column="21">!=<pos:position pos:line="80" pos:column="23"/></operator> <name pos:line="80" pos:column="24">h2<pos:position pos:line="80" pos:column="26"/></name> <operator pos:line="80" pos:column="27">||<pos:position pos:line="80" pos:column="29"/></operator> <name pos:line="80" pos:column="30">h1<pos:position pos:line="80" pos:column="32"/></name> <operator pos:line="80" pos:column="33">!=<pos:position pos:line="80" pos:column="35"/></operator> <name pos:line="80" pos:column="36">h3<pos:position pos:line="80" pos:column="38"/></name> <operator pos:line="80" pos:column="39">||<pos:position pos:line="80" pos:column="41"/></operator> <name pos:line="80" pos:column="42">h1<pos:position pos:line="80" pos:column="44"/></name> <operator pos:line="80" pos:column="45">!=<pos:position pos:line="80" pos:column="47"/></operator> <name pos:line="80" pos:column="48">h4<pos:position pos:line="80" pos:column="50"/></name></expr>)<pos:position pos:line="80" pos:column="51"/></condition><then pos:line="80" pos:column="51"> <block pos:line="80" pos:column="52">{
        <expr_stmt><expr><call><name pos:line="81" pos:column="9">debugs<pos:position pos:line="81" pos:column="15"/></name><argument_list pos:line="81" pos:column="15">(<argument><expr><literal type="number" pos:line="81" pos:column="16">9<pos:position pos:line="81" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="81" pos:column="19">DBG_IMPORTANT<pos:position pos:line="81" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="81" pos:column="34">"Invalid EPSV reply from "<pos:position pos:line="81" pos:column="60"/></literal> <operator pos:line="81" pos:column="61">&lt;&lt;<pos:position pos:line="81" pos:column="69"/></operator>
               <name><name pos:line="82" pos:column="16">ctrl<pos:position pos:line="82" pos:column="20"/></name><operator pos:line="82" pos:column="20">.<pos:position pos:line="82" pos:column="21"/></operator><name pos:line="82" pos:column="21">conn<pos:position pos:line="82" pos:column="25"/></name><operator pos:line="82" pos:column="25">-&gt;<pos:position pos:line="82" pos:column="30"/></operator><name pos:line="82" pos:column="27">remote<pos:position pos:line="82" pos:column="33"/></name></name> <operator pos:line="82" pos:column="34">&lt;&lt;<pos:position pos:line="82" pos:column="42"/></operator> <literal type="string" pos:line="82" pos:column="37">": "<pos:position pos:line="82" pos:column="41"/></literal> <operator pos:line="82" pos:column="42">&lt;&lt;<pos:position pos:line="82" pos:column="50"/></operator>
               <name><name pos:line="83" pos:column="16">ctrl<pos:position pos:line="83" pos:column="20"/></name><operator pos:line="83" pos:column="20">.<pos:position pos:line="83" pos:column="21"/></operator><name pos:line="83" pos:column="21">last_reply<pos:position pos:line="83" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="83" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="33"/></expr_stmt>

        <return pos:line="85" pos:column="9">return <expr><call><name pos:line="85" pos:column="16">sendPassive<pos:position pos:line="85" pos:column="27"/></name><argument_list pos:line="85" pos:column="27">()<pos:position pos:line="85" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="30"/></return>
    }<pos:position pos:line="86" pos:column="6"/></block></then></if>

    <if pos:line="88" pos:column="5">if <condition pos:line="88" pos:column="8">(<expr><literal type="number" pos:line="88" pos:column="9">0<pos:position pos:line="88" pos:column="10"/></literal> <operator pos:line="88" pos:column="11">==<pos:position pos:line="88" pos:column="13"/></operator> <name pos:line="88" pos:column="14">port<pos:position pos:line="88" pos:column="18"/></name></expr>)<pos:position pos:line="88" pos:column="19"/></condition><then pos:line="88" pos:column="19"> <block pos:line="88" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="89" pos:column="9">debugs<pos:position pos:line="89" pos:column="15"/></name><argument_list pos:line="89" pos:column="15">(<argument><expr><literal type="number" pos:line="89" pos:column="16">9<pos:position pos:line="89" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="89" pos:column="19">DBG_IMPORTANT<pos:position pos:line="89" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="89" pos:column="34">"Unsafe EPSV reply from "<pos:position pos:line="89" pos:column="59"/></literal> <operator pos:line="89" pos:column="60">&lt;&lt;<pos:position pos:line="89" pos:column="68"/></operator>
               <name><name pos:line="90" pos:column="16">ctrl<pos:position pos:line="90" pos:column="20"/></name><operator pos:line="90" pos:column="20">.<pos:position pos:line="90" pos:column="21"/></operator><name pos:line="90" pos:column="21">conn<pos:position pos:line="90" pos:column="25"/></name><operator pos:line="90" pos:column="25">-&gt;<pos:position pos:line="90" pos:column="30"/></operator><name pos:line="90" pos:column="27">remote<pos:position pos:line="90" pos:column="33"/></name></name> <operator pos:line="90" pos:column="34">&lt;&lt;<pos:position pos:line="90" pos:column="42"/></operator> <literal type="string" pos:line="90" pos:column="37">": "<pos:position pos:line="90" pos:column="41"/></literal> <operator pos:line="90" pos:column="42">&lt;&lt;<pos:position pos:line="90" pos:column="50"/></operator>
               <name><name pos:line="91" pos:column="16">ctrl<pos:position pos:line="91" pos:column="20"/></name><operator pos:line="91" pos:column="20">.<pos:position pos:line="91" pos:column="21"/></operator><name pos:line="91" pos:column="21">last_reply<pos:position pos:line="91" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="91" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="33"/></expr_stmt>

        <return pos:line="93" pos:column="9">return <expr><call><name pos:line="93" pos:column="16">sendPassive<pos:position pos:line="93" pos:column="27"/></name><argument_list pos:line="93" pos:column="27">()<pos:position pos:line="93" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="30"/></return>
    }<pos:position pos:line="94" pos:column="6"/></block></then></if>

    <if pos:line="96" pos:column="5">if <condition pos:line="96" pos:column="8">(<expr><name><name pos:line="96" pos:column="9">Config<pos:position pos:line="96" pos:column="15"/></name><operator pos:line="96" pos:column="15">.<pos:position pos:line="96" pos:column="16"/></operator><name pos:line="96" pos:column="16">Ftp<pos:position pos:line="96" pos:column="19"/></name><operator pos:line="96" pos:column="19">.<pos:position pos:line="96" pos:column="20"/></operator><name pos:line="96" pos:column="20">sanitycheck<pos:position pos:line="96" pos:column="31"/></name></name></expr>)<pos:position pos:line="96" pos:column="32"/></condition><then pos:line="96" pos:column="32"> <block pos:line="96" pos:column="33">{
        <if pos:line="97" pos:column="9">if <condition pos:line="97" pos:column="12">(<expr><name pos:line="97" pos:column="13">port<pos:position pos:line="97" pos:column="17"/></name> <operator pos:line="97" pos:column="18">&lt;<pos:position pos:line="97" pos:column="22"/></operator> <literal type="number" pos:line="97" pos:column="20">1024<pos:position pos:line="97" pos:column="24"/></literal></expr>)<pos:position pos:line="97" pos:column="25"/></condition><then pos:line="97" pos:column="25"> <block pos:line="97" pos:column="26">{
            <expr_stmt><expr><call><name pos:line="98" pos:column="13">debugs<pos:position pos:line="98" pos:column="19"/></name><argument_list pos:line="98" pos:column="19">(<argument><expr><literal type="number" pos:line="98" pos:column="20">9<pos:position pos:line="98" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="98" pos:column="23">DBG_IMPORTANT<pos:position pos:line="98" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="98" pos:column="38">"Unsafe EPSV reply from "<pos:position pos:line="98" pos:column="63"/></literal> <operator pos:line="98" pos:column="64">&lt;&lt;<pos:position pos:line="98" pos:column="72"/></operator>
                   <name><name pos:line="99" pos:column="20">ctrl<pos:position pos:line="99" pos:column="24"/></name><operator pos:line="99" pos:column="24">.<pos:position pos:line="99" pos:column="25"/></operator><name pos:line="99" pos:column="25">conn<pos:position pos:line="99" pos:column="29"/></name><operator pos:line="99" pos:column="29">-&gt;<pos:position pos:line="99" pos:column="34"/></operator><name pos:line="99" pos:column="31">remote<pos:position pos:line="99" pos:column="37"/></name></name> <operator pos:line="99" pos:column="38">&lt;&lt;<pos:position pos:line="99" pos:column="46"/></operator> <literal type="string" pos:line="99" pos:column="41">": "<pos:position pos:line="99" pos:column="45"/></literal> <operator pos:line="99" pos:column="46">&lt;&lt;<pos:position pos:line="99" pos:column="54"/></operator>
                   <name><name pos:line="100" pos:column="20">ctrl<pos:position pos:line="100" pos:column="24"/></name><operator pos:line="100" pos:column="24">.<pos:position pos:line="100" pos:column="25"/></operator><name pos:line="100" pos:column="25">last_reply<pos:position pos:line="100" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="100" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="37"/></expr_stmt>

            <return pos:line="102" pos:column="13">return <expr><call><name pos:line="102" pos:column="20">sendPassive<pos:position pos:line="102" pos:column="31"/></name><argument_list pos:line="102" pos:column="31">()<pos:position pos:line="102" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="34"/></return>
        }<pos:position pos:line="103" pos:column="10"/></block></then></if>
    }<pos:position pos:line="104" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="106" pos:column="5">remoteAddr<pos:position pos:line="106" pos:column="15"/></name> <operator pos:line="106" pos:column="16">=<pos:position pos:line="106" pos:column="17"/></operator> <name><name pos:line="106" pos:column="18">ctrl<pos:position pos:line="106" pos:column="22"/></name><operator pos:line="106" pos:column="22">.<pos:position pos:line="106" pos:column="23"/></operator><name pos:line="106" pos:column="23">conn<pos:position pos:line="106" pos:column="27"/></name><operator pos:line="106" pos:column="27">-&gt;<pos:position pos:line="106" pos:column="32"/></operator><name pos:line="106" pos:column="29">remote<pos:position pos:line="106" pos:column="35"/></name></name></expr>;<pos:position pos:line="106" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="107" pos:column="5">remoteAddr<pos:position pos:line="107" pos:column="15"/></name><operator pos:line="107" pos:column="15">.<pos:position pos:line="107" pos:column="16"/></operator><name pos:line="107" pos:column="16">port<pos:position pos:line="107" pos:column="20"/></name></name><argument_list pos:line="107" pos:column="20">(<argument><expr><name pos:line="107" pos:column="21">port<pos:position pos:line="107" pos:column="25"/></name></expr></argument>)<pos:position pos:line="107" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="108" pos:column="5">data<pos:position pos:line="108" pos:column="9"/></name><operator pos:line="108" pos:column="9">.<pos:position pos:line="108" pos:column="10"/></operator><name pos:line="108" pos:column="10">addr<pos:position pos:line="108" pos:column="14"/></name></name><argument_list pos:line="108" pos:column="14">(<argument><expr><name pos:line="108" pos:column="15">remoteAddr<pos:position pos:line="108" pos:column="25"/></name></expr></argument>)<pos:position pos:line="108" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="27"/></expr_stmt>
    <return pos:line="109" pos:column="5">return <expr><literal type="boolean" pos:line="109" pos:column="12">true<pos:position pos:line="109" pos:column="16"/></literal></expr>;<pos:position pos:line="109" pos:column="17"/></return>
}<pos:position pos:line="110" pos:column="2"/></block></function></unit>
