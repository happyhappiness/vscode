<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6093_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">File<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type>
<name><name pos:line="2" pos:column="1">File<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">Optional<pos:position pos:line="2" pos:column="15"/></name></name><parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><specifier pos:line="2" pos:column="16">const<pos:position pos:line="2" pos:column="21"/></specifier> <name pos:line="2" pos:column="22">SBuf<pos:position pos:line="2" pos:column="26"/></name> <modifier pos:line="2" pos:column="27">&amp;<pos:position pos:line="2" pos:column="32"/></modifier></type><name pos:line="2" pos:column="28">filename<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="38">const<pos:position pos:line="2" pos:column="43"/></specifier> <name pos:line="2" pos:column="44">FileOpeningConfig<pos:position pos:line="2" pos:column="61"/></name> <modifier pos:line="2" pos:column="62">&amp;<pos:position pos:line="2" pos:column="67"/></modifier></type><name pos:line="2" pos:column="63">cfg<pos:position pos:line="2" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="67"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <try pos:line="4" pos:column="5">try <block pos:line="4" pos:column="9">{
        <return pos:line="5" pos:column="9">return <expr><operator pos:line="5" pos:column="16">new<pos:position pos:line="5" pos:column="19"/></operator> <call><name pos:line="5" pos:column="20">File<pos:position pos:line="5" pos:column="24"/></name><argument_list pos:line="5" pos:column="24">(<argument><expr><name pos:line="5" pos:column="25">filename<pos:position pos:line="5" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="35">cfg<pos:position pos:line="5" pos:column="38"/></name></expr></argument>)<pos:position pos:line="5" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="40"/></return>
    }<pos:position pos:line="6" pos:column="6"/></block>
    <catch pos:line="7" pos:column="5">catch <parameter_list pos:line="7" pos:column="11">(<parameter><decl><type><specifier pos:line="7" pos:column="12">const<pos:position pos:line="7" pos:column="17"/></specifier> <name><name pos:line="7" pos:column="18">std<pos:position pos:line="7" pos:column="21"/></name><operator pos:line="7" pos:column="21">::<pos:position pos:line="7" pos:column="23"/></operator><name pos:line="7" pos:column="23">exception<pos:position pos:line="7" pos:column="32"/></name></name> <modifier pos:line="7" pos:column="33">&amp;<pos:position pos:line="7" pos:column="38"/></modifier></type><name pos:line="7" pos:column="34">ex<pos:position pos:line="7" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="7" pos:column="37"/></parameter_list> <block pos:line="7" pos:column="38">{
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">debugs<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><literal type="number" pos:line="8" pos:column="16">54<pos:position pos:line="8" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="20">5<pos:position pos:line="8" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="23">"will not lock: "<pos:position pos:line="8" pos:column="40"/></literal> <operator pos:line="8" pos:column="41">&lt;&lt;<pos:position pos:line="8" pos:column="49"/></operator> <call><name><name pos:line="8" pos:column="44">ex<pos:position pos:line="8" pos:column="46"/></name><operator pos:line="8" pos:column="46">.<pos:position pos:line="8" pos:column="47"/></operator><name pos:line="8" pos:column="47">what<pos:position pos:line="8" pos:column="51"/></name></name><argument_list pos:line="8" pos:column="51">()<pos:position pos:line="8" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="55"/></expr_stmt>
    }<pos:position pos:line="9" pos:column="6"/></block></catch></try>
    <return pos:line="10" pos:column="5">return <expr><literal type="null" pos:line="10" pos:column="12">nullptr<pos:position pos:line="10" pos:column="19"/></literal></expr>;<pos:position pos:line="10" pos:column="20"/></return>
}<pos:position pos:line="11" pos:column="2"/></block></function></unit>
