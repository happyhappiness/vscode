<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3454_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ClientSocketContext<pos:position pos:line="2" pos:column="20"/></name><operator pos:line="2" pos:column="20">::<pos:position pos:line="2" pos:column="22"/></operator><name pos:line="2" pos:column="22">keepaliveNextRequest<pos:position pos:line="2" pos:column="42"/></name></name><parameter_list pos:line="2" pos:column="42">()<pos:position pos:line="2" pos:column="44"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">ConnStateData<pos:position pos:line="4" pos:column="18"/></name> <modifier pos:line="4" pos:column="19">*<pos:position pos:line="4" pos:column="20"/></modifier></type> <name pos:line="4" pos:column="21">conn<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><call><name><name pos:line="4" pos:column="28">http<pos:position pos:line="4" pos:column="32"/></name><operator pos:line="4" pos:column="32">-&gt;<pos:position pos:line="4" pos:column="37"/></operator><name pos:line="4" pos:column="34">getConn<pos:position pos:line="4" pos:column="41"/></name></name><argument_list pos:line="4" pos:column="41">()<pos:position pos:line="4" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="44"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">bool<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">do_next_read<pos:position pos:line="5" pos:column="22"/></name> <init pos:line="5" pos:column="23">= <expr><literal type="boolean" pos:line="5" pos:column="25">false<pos:position pos:line="5" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">debugs<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><literal type="number" pos:line="7" pos:column="12">33<pos:position pos:line="7" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="16">3<pos:position pos:line="7" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="19">"ClientSocketContext::keepaliveNextRequest: FD "<pos:position pos:line="7" pos:column="67"/></literal> <operator pos:line="7" pos:column="68">&lt;&lt;<pos:position pos:line="7" pos:column="76"/></operator> <name><name pos:line="7" pos:column="71">conn<pos:position pos:line="7" pos:column="75"/></name><operator pos:line="7" pos:column="75">-&gt;<pos:position pos:line="7" pos:column="80"/></operator><name pos:line="7" pos:column="77">fd<pos:position pos:line="7" pos:column="79"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="81"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">connIsFinished<pos:position pos:line="8" pos:column="19"/></name><argument_list pos:line="8" pos:column="19">()<pos:position pos:line="8" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="22"/></expr_stmt>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name><name pos:line="10" pos:column="9">conn<pos:position pos:line="10" pos:column="13"/></name><operator pos:line="10" pos:column="13">-&gt;<pos:position pos:line="10" pos:column="18"/></operator><name pos:line="10" pos:column="15">pinning<pos:position pos:line="10" pos:column="22"/></name><operator pos:line="10" pos:column="22">.<pos:position pos:line="10" pos:column="23"/></operator><name pos:line="10" pos:column="23">pinned<pos:position pos:line="10" pos:column="29"/></name></name> <operator pos:line="10" pos:column="30">&amp;&amp;<pos:position pos:line="10" pos:column="40"/></operator> <name><name pos:line="10" pos:column="33">conn<pos:position pos:line="10" pos:column="37"/></name><operator pos:line="10" pos:column="37">-&gt;<pos:position pos:line="10" pos:column="42"/></operator><name pos:line="10" pos:column="39">pinning<pos:position pos:line="10" pos:column="46"/></name><operator pos:line="10" pos:column="46">.<pos:position pos:line="10" pos:column="47"/></operator><name pos:line="10" pos:column="47">fd<pos:position pos:line="10" pos:column="49"/></name></name> <operator pos:line="10" pos:column="50">==<pos:position pos:line="10" pos:column="52"/></operator> <operator pos:line="10" pos:column="53">-<pos:position pos:line="10" pos:column="54"/></operator><literal type="number" pos:line="10" pos:column="54">1<pos:position pos:line="10" pos:column="55"/></literal></expr>)<pos:position pos:line="10" pos:column="56"/></condition><then pos:line="10" pos:column="56"> <block pos:line="10" pos:column="57">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">debugs<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><literal type="number" pos:line="11" pos:column="16">33<pos:position pos:line="11" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="20">2<pos:position pos:line="11" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="23">"clientKeepaliveNextRequest: FD "<pos:position pos:line="11" pos:column="56"/></literal> <operator pos:line="11" pos:column="57">&lt;&lt;<pos:position pos:line="11" pos:column="65"/></operator> <name><name pos:line="11" pos:column="60">conn<pos:position pos:line="11" pos:column="64"/></name><operator pos:line="11" pos:column="64">-&gt;<pos:position pos:line="11" pos:column="69"/></operator><name pos:line="11" pos:column="66">fd<pos:position pos:line="11" pos:column="68"/></name></name> <operator pos:line="11" pos:column="69">&lt;&lt;<pos:position pos:line="11" pos:column="77"/></operator> <literal type="string" pos:line="11" pos:column="72">" Connection was pinned but server side gone. Terminating client connection"<pos:position pos:line="11" pos:column="148"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="149"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="150"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">comm_close<pos:position pos:line="12" pos:column="19"/></name><argument_list pos:line="12" pos:column="19">(<argument><expr><name><name pos:line="12" pos:column="20">conn<pos:position pos:line="12" pos:column="24"/></name><operator pos:line="12" pos:column="24">-&gt;<pos:position pos:line="12" pos:column="29"/></operator><name pos:line="12" pos:column="26">fd<pos:position pos:line="12" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="30"/></expr_stmt>
        <return pos:line="13" pos:column="9">return;<pos:position pos:line="13" pos:column="16"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <comment type="block" format="doxygen" pos:line="16" pos:column="5">/** \par
     * We are done with the response, and we are either still receiving request
     * body (early response!) or have already stopped receiving anything.
     *
     * If we are still receiving, then clientParseRequest() below will fail.
     * (XXX: but then we will call readNextRequest() which may succeed and
     * execute a smuggled request as we are not done with the current request).
     *
     * If we stopped because we got everything, then try the next request.
     *
     * If we stopped receiving because of an error, then close now to avoid
     * getting stuck and to prevent accidental request smuggling.
     */</comment>

    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<decl><type><specifier pos:line="30" pos:column="9">const<pos:position pos:line="30" pos:column="14"/></specifier> <name pos:line="30" pos:column="15">char<pos:position pos:line="30" pos:column="19"/></name> <modifier pos:line="30" pos:column="20">*<pos:position pos:line="30" pos:column="21"/></modifier></type><name pos:line="30" pos:column="21">reason<pos:position pos:line="30" pos:column="27"/></name> <init pos:line="30" pos:column="28">= <expr><call><name><name pos:line="30" pos:column="30">conn<pos:position pos:line="30" pos:column="34"/></name><operator pos:line="30" pos:column="34">-&gt;<pos:position pos:line="30" pos:column="39"/></operator><name pos:line="30" pos:column="36">stoppedReceiving<pos:position pos:line="30" pos:column="52"/></name></name><argument_list pos:line="30" pos:column="52">()<pos:position pos:line="30" pos:column="54"/></argument_list></call></expr></init></decl>)<pos:position pos:line="30" pos:column="55"/></condition><then pos:line="30" pos:column="55"> <block pos:line="30" pos:column="56">{
        <expr_stmt><expr><call><name pos:line="31" pos:column="9">debugs<pos:position pos:line="31" pos:column="15"/></name><argument_list pos:line="31" pos:column="15">(<argument><expr><literal type="number" pos:line="31" pos:column="16">33<pos:position pos:line="31" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="20">3<pos:position pos:line="31" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="23">HERE<pos:position pos:line="31" pos:column="27"/></name> <operator pos:line="31" pos:column="28">&lt;&lt;<pos:position pos:line="31" pos:column="36"/></operator> <literal type="string" pos:line="31" pos:column="31">"closing for earlier request error: "<pos:position pos:line="31" pos:column="68"/></literal> <operator pos:line="31" pos:column="69">&lt;&lt;<pos:position pos:line="31" pos:column="77"/></operator> <name pos:line="31" pos:column="72">reason<pos:position pos:line="31" pos:column="78"/></name></expr></argument>)<pos:position pos:line="31" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="80"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">comm_close<pos:position pos:line="32" pos:column="19"/></name><argument_list pos:line="32" pos:column="19">(<argument><expr><name><name pos:line="32" pos:column="20">conn<pos:position pos:line="32" pos:column="24"/></name><operator pos:line="32" pos:column="24">-&gt;<pos:position pos:line="32" pos:column="29"/></operator><name pos:line="32" pos:column="26">fd<pos:position pos:line="32" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="30"/></expr_stmt>
        <return pos:line="33" pos:column="9">return;<pos:position pos:line="33" pos:column="16"/></return>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>

    <comment type="block" format="doxygen" pos:line="36" pos:column="5">/** \par
     * Attempt to parse a request from the request buffer.
     * If we've been fed a pipelined request it may already
     * be in our read buffer.
     *
     \par
     * This needs to fall through - if we're unlucky and parse the _last_ request
     * from our read buffer we may never re-register for another client read.
     */</comment>

    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><call><name pos:line="46" pos:column="9">clientParseRequest<pos:position pos:line="46" pos:column="27"/></name><argument_list pos:line="46" pos:column="27">(<argument><expr><name pos:line="46" pos:column="28">conn<pos:position pos:line="46" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="34">do_next_read<pos:position pos:line="46" pos:column="46"/></name></expr></argument>)<pos:position pos:line="46" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="48"/></condition><then pos:line="46" pos:column="48"> <block pos:line="46" pos:column="49">{
        <expr_stmt><expr><call><name pos:line="47" pos:column="9">debugs<pos:position pos:line="47" pos:column="15"/></name><argument_list pos:line="47" pos:column="15">(<argument><expr><literal type="number" pos:line="47" pos:column="16">33<pos:position pos:line="47" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="20">3<pos:position pos:line="47" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="23">"clientSocketContext::keepaliveNextRequest: FD "<pos:position pos:line="47" pos:column="71"/></literal> <operator pos:line="47" pos:column="72">&lt;&lt;<pos:position pos:line="47" pos:column="80"/></operator> <name><name pos:line="47" pos:column="75">conn<pos:position pos:line="47" pos:column="79"/></name><operator pos:line="47" pos:column="79">-&gt;<pos:position pos:line="47" pos:column="84"/></operator><name pos:line="47" pos:column="81">fd<pos:position pos:line="47" pos:column="83"/></name></name> <operator pos:line="47" pos:column="84">&lt;&lt;<pos:position pos:line="47" pos:column="92"/></operator> <literal type="string" pos:line="47" pos:column="87">": parsed next request from buffer"<pos:position pos:line="47" pos:column="122"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="123"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="124"/></expr_stmt>
    }<pos:position pos:line="48" pos:column="6"/></block></then></if>

    <comment type="block" format="doxygen" pos:line="50" pos:column="5">/** \par
     * Either we need to kick-start another read or, if we have
     * a half-closed connection, kill it after the last request.
     * This saves waiting for half-closed connections to finished being
     * half-closed _AND_ then, sometimes, spending "Timeout" time in
     * the keepalive "Waiting for next request" state.
     */</comment>
    <if pos:line="57" pos:column="5">if <condition pos:line="57" pos:column="8">(<expr><call><name pos:line="57" pos:column="9">commIsHalfClosed<pos:position pos:line="57" pos:column="25"/></name><argument_list pos:line="57" pos:column="25">(<argument><expr><name><name pos:line="57" pos:column="26">conn<pos:position pos:line="57" pos:column="30"/></name><operator pos:line="57" pos:column="30">-&gt;<pos:position pos:line="57" pos:column="35"/></operator><name pos:line="57" pos:column="32">fd<pos:position pos:line="57" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="35"/></argument_list></call> <operator pos:line="57" pos:column="36">&amp;&amp;<pos:position pos:line="57" pos:column="46"/></operator> <operator pos:line="57" pos:column="39">(<pos:position pos:line="57" pos:column="40"/></operator><call><name><name pos:line="57" pos:column="40">conn<pos:position pos:line="57" pos:column="44"/></name><operator pos:line="57" pos:column="44">-&gt;<pos:position pos:line="57" pos:column="49"/></operator><name pos:line="57" pos:column="46">getConcurrentRequestCount<pos:position pos:line="57" pos:column="71"/></name></name><argument_list pos:line="57" pos:column="71">()<pos:position pos:line="57" pos:column="73"/></argument_list></call> <operator pos:line="57" pos:column="74">==<pos:position pos:line="57" pos:column="76"/></operator> <literal type="number" pos:line="57" pos:column="77">0<pos:position pos:line="57" pos:column="78"/></literal><operator pos:line="57" pos:column="78">)<pos:position pos:line="57" pos:column="79"/></operator></expr>)<pos:position pos:line="57" pos:column="80"/></condition><then pos:line="57" pos:column="80"> <block pos:line="57" pos:column="81">{
        <expr_stmt><expr><call><name pos:line="58" pos:column="9">debugs<pos:position pos:line="58" pos:column="15"/></name><argument_list pos:line="58" pos:column="15">(<argument><expr><literal type="number" pos:line="58" pos:column="16">33<pos:position pos:line="58" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="58" pos:column="20">3<pos:position pos:line="58" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="58" pos:column="23">"ClientSocketContext::keepaliveNextRequest: half-closed client with no pending requests, closing"<pos:position pos:line="58" pos:column="120"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="121"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="122"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="59" pos:column="9">comm_close<pos:position pos:line="59" pos:column="19"/></name><argument_list pos:line="59" pos:column="19">(<argument><expr><name><name pos:line="59" pos:column="20">conn<pos:position pos:line="59" pos:column="24"/></name><operator pos:line="59" pos:column="24">-&gt;<pos:position pos:line="59" pos:column="29"/></operator><name pos:line="59" pos:column="26">fd<pos:position pos:line="59" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="59" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="30"/></expr_stmt>
        <return pos:line="60" pos:column="9">return;<pos:position pos:line="60" pos:column="16"/></return>
    }<pos:position pos:line="61" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name><name pos:line="63" pos:column="5">ClientSocketContext<pos:position pos:line="63" pos:column="24"/></name><operator pos:line="63" pos:column="24">::<pos:position pos:line="63" pos:column="26"/></operator><name pos:line="63" pos:column="26">Pointer<pos:position pos:line="63" pos:column="33"/></name></name></type> <name pos:line="63" pos:column="34">deferredRequest<pos:position pos:line="63" pos:column="49"/></name></decl>;<pos:position pos:line="63" pos:column="50"/></decl_stmt>

    <comment type="block" format="doxygen" pos:line="65" pos:column="5">/** \par
     * At this point we either have a parsed request (which we've
     * kicked off the processing for) or not. If we have a deferred
     * request (parsed but deferred for pipeling processing reasons)
     * then look at processing it. If not, simply kickstart
     * another read.
     */</comment>

    <if pos:line="73" pos:column="5">if <condition pos:line="73" pos:column="8">(<expr><operator pos:line="73" pos:column="9">(<pos:position pos:line="73" pos:column="10"/></operator><name pos:line="73" pos:column="10">deferredRequest<pos:position pos:line="73" pos:column="25"/></name> <operator pos:line="73" pos:column="26">=<pos:position pos:line="73" pos:column="27"/></operator> <call><name><name pos:line="73" pos:column="28">conn<pos:position pos:line="73" pos:column="32"/></name><operator pos:line="73" pos:column="32">-&gt;<pos:position pos:line="73" pos:column="37"/></operator><name pos:line="73" pos:column="34">getCurrentContext<pos:position pos:line="73" pos:column="51"/></name></name><argument_list pos:line="73" pos:column="51">()<pos:position pos:line="73" pos:column="53"/></argument_list></call><operator pos:line="73" pos:column="53">)<pos:position pos:line="73" pos:column="54"/></operator><operator pos:line="73" pos:column="54">.<pos:position pos:line="73" pos:column="55"/></operator><call><name pos:line="73" pos:column="55">getRaw<pos:position pos:line="73" pos:column="61"/></name><argument_list pos:line="73" pos:column="61">()<pos:position pos:line="73" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="73" pos:column="64"/></condition><then pos:line="73" pos:column="64"> <block pos:line="73" pos:column="65">{
        <expr_stmt><expr><call><name pos:line="74" pos:column="9">debugs<pos:position pos:line="74" pos:column="15"/></name><argument_list pos:line="74" pos:column="15">(<argument><expr><literal type="number" pos:line="74" pos:column="16">33<pos:position pos:line="74" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="74" pos:column="20">3<pos:position pos:line="74" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="74" pos:column="23">"ClientSocketContext:: FD "<pos:position pos:line="74" pos:column="50"/></literal> <operator pos:line="74" pos:column="51">&lt;&lt;<pos:position pos:line="74" pos:column="59"/></operator> <name><name pos:line="74" pos:column="54">conn<pos:position pos:line="74" pos:column="58"/></name><operator pos:line="74" pos:column="58">-&gt;<pos:position pos:line="74" pos:column="63"/></operator><name pos:line="74" pos:column="60">fd<pos:position pos:line="74" pos:column="62"/></name></name> <operator pos:line="74" pos:column="63">&lt;&lt;<pos:position pos:line="74" pos:column="71"/></operator> <literal type="string" pos:line="74" pos:column="66">": calling PushDeferredIfNeeded"<pos:position pos:line="74" pos:column="98"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="99"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="100"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="75" pos:column="9">ClientSocketContextPushDeferredIfNeeded<pos:position pos:line="75" pos:column="48"/></name><argument_list pos:line="75" pos:column="48">(<argument><expr><name pos:line="75" pos:column="49">deferredRequest<pos:position pos:line="75" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="66">conn<pos:position pos:line="75" pos:column="70"/></name></expr></argument>)<pos:position pos:line="75" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="72"/></expr_stmt>
    }<pos:position pos:line="76" pos:column="6"/></block></then> <else pos:line="76" pos:column="7">else <block pos:line="76" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="77" pos:column="9">debugs<pos:position pos:line="77" pos:column="15"/></name><argument_list pos:line="77" pos:column="15">(<argument><expr><literal type="number" pos:line="77" pos:column="16">33<pos:position pos:line="77" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="77" pos:column="20">3<pos:position pos:line="77" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="77" pos:column="23">"ClientSocketContext:: FD "<pos:position pos:line="77" pos:column="50"/></literal> <operator pos:line="77" pos:column="51">&lt;&lt;<pos:position pos:line="77" pos:column="59"/></operator> <name><name pos:line="77" pos:column="54">conn<pos:position pos:line="77" pos:column="58"/></name><operator pos:line="77" pos:column="58">-&gt;<pos:position pos:line="77" pos:column="63"/></operator><name pos:line="77" pos:column="60">fd<pos:position pos:line="77" pos:column="62"/></name></name> <operator pos:line="77" pos:column="63">&lt;&lt;<pos:position pos:line="77" pos:column="71"/></operator> <literal type="string" pos:line="77" pos:column="66">": calling conn-&gt;readNextRequest()"<pos:position pos:line="77" pos:column="104"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="102"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="103"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="78" pos:column="9">conn<pos:position pos:line="78" pos:column="13"/></name><operator pos:line="78" pos:column="13">-&gt;<pos:position pos:line="78" pos:column="18"/></operator><name pos:line="78" pos:column="15">readNextRequest<pos:position pos:line="78" pos:column="30"/></name></name><argument_list pos:line="78" pos:column="30">()<pos:position pos:line="78" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="79" pos:column="6"/></block></else></if>
}<pos:position pos:line="80" pos:column="2"/></block></function></unit>
