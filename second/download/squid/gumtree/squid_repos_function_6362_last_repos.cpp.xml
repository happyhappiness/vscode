<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6362_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">MmappedFile<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">open<pos:position pos:line="2" pos:column="18"/></name></name><parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><name pos:line="2" pos:column="19">int<pos:position pos:line="2" pos:column="22"/></name></type> <name pos:line="2" pos:column="23">flags<pos:position pos:line="2" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="30">mode_t<pos:position pos:line="2" pos:column="36"/></name></type></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="38">RefCount<pos:position pos:line="2" pos:column="46"/></name><argument_list type="generic" pos:line="2" pos:column="46">&lt;<argument><expr><name pos:line="2" pos:column="47">IORequestor<pos:position pos:line="2" pos:column="58"/></name></expr></argument>&gt;<pos:position pos:line="2" pos:column="62"/></argument_list></name></type> <name pos:line="2" pos:column="60">callback<pos:position pos:line="2" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="69"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">fd<pos:position pos:line="4" pos:column="14"/></name> <operator pos:line="4" pos:column="15">&lt;<pos:position pos:line="4" pos:column="19"/></operator> <literal type="number" pos:line="4" pos:column="17">0<pos:position pos:line="4" pos:column="18"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="20"/></expr_stmt>

    <comment type="block" pos:line="6" pos:column="5">/* Simulate async calls */</comment>
    <expr_stmt><expr><name pos:line="7" pos:column="5">fd<pos:position pos:line="7" pos:column="7"/></name> <operator pos:line="7" pos:column="8">=<pos:position pos:line="7" pos:column="9"/></operator> <call><name pos:line="7" pos:column="10">file_open<pos:position pos:line="7" pos:column="19"/></name><argument_list pos:line="7" pos:column="19">(<argument><expr><name pos:line="7" pos:column="20">path_<pos:position pos:line="7" pos:column="25"/></name></expr></argument> , <argument><expr><name pos:line="7" pos:column="28">flags<pos:position pos:line="7" pos:column="33"/></name></expr></argument>)<pos:position pos:line="7" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name pos:line="8" pos:column="5">ioRequestor<pos:position pos:line="8" pos:column="16"/></name> <operator pos:line="8" pos:column="17">=<pos:position pos:line="8" pos:column="18"/></operator> <name pos:line="8" pos:column="19">callback<pos:position pos:line="8" pos:column="27"/></name></expr>;<pos:position pos:line="8" pos:column="28"/></expr_stmt>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">fd<pos:position pos:line="10" pos:column="11"/></name> <operator pos:line="10" pos:column="12">&lt;<pos:position pos:line="10" pos:column="16"/></operator> <literal type="number" pos:line="10" pos:column="14">0<pos:position pos:line="10" pos:column="15"/></literal></expr>)<pos:position pos:line="10" pos:column="16"/></condition><then pos:line="10" pos:column="16"> <block pos:line="10" pos:column="17">{
        <decl_stmt><decl><type><name pos:line="11" pos:column="9">int<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">xerrno<pos:position pos:line="11" pos:column="19"/></name> <init pos:line="11" pos:column="20">= <expr><name pos:line="11" pos:column="22">errno<pos:position pos:line="11" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="28"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">debugs<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><literal type="number" pos:line="12" pos:column="16">79<pos:position pos:line="12" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="12" pos:column="19">3<pos:position pos:line="12" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="22">"open error: "<pos:position pos:line="12" pos:column="36"/></literal> <operator pos:line="12" pos:column="37">&lt;&lt;<pos:position pos:line="12" pos:column="45"/></operator> <call><name pos:line="12" pos:column="40">xstrerr<pos:position pos:line="12" pos:column="47"/></name><argument_list pos:line="12" pos:column="47">(<argument><expr><name pos:line="12" pos:column="48">xerrno<pos:position pos:line="12" pos:column="54"/></name></expr></argument>)<pos:position pos:line="12" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="57"/></expr_stmt>
        <expr_stmt><expr><name pos:line="13" pos:column="9">error_<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">=<pos:position pos:line="13" pos:column="17"/></operator> <literal type="boolean" pos:line="13" pos:column="18">true<pos:position pos:line="13" pos:column="22"/></literal></expr>;<pos:position pos:line="13" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></then> <else pos:line="14" pos:column="7">else <block pos:line="14" pos:column="12">{
        <expr_stmt><expr><operator pos:line="15" pos:column="9">++<pos:position pos:line="15" pos:column="11"/></operator><name pos:line="15" pos:column="11">store_open_disk_fd<pos:position pos:line="15" pos:column="29"/></name></expr>;<pos:position pos:line="15" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">debugs<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><literal type="number" pos:line="16" pos:column="16">79<pos:position pos:line="16" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="16" pos:column="19">3<pos:position pos:line="16" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="22">"FD "<pos:position pos:line="16" pos:column="27"/></literal> <operator pos:line="16" pos:column="28">&lt;&lt;<pos:position pos:line="16" pos:column="36"/></operator> <name pos:line="16" pos:column="31">fd<pos:position pos:line="16" pos:column="33"/></name></expr></argument>)<pos:position pos:line="16" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="35"/></expr_stmt>

        <comment type="line" pos:line="18" pos:column="9">// setup mapping boundaries</comment>
        <decl_stmt><decl><type><name><name pos:line="19" pos:column="9">struct<pos:position pos:line="19" pos:column="15"/></name> <name pos:line="19" pos:column="16">stat<pos:position pos:line="19" pos:column="20"/></name></name></type> <name pos:line="19" pos:column="21">sb<pos:position pos:line="19" pos:column="23"/></name></decl>;<pos:position pos:line="19" pos:column="24"/></decl_stmt>
        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><call><name pos:line="20" pos:column="13">fstat<pos:position pos:line="20" pos:column="18"/></name><argument_list pos:line="20" pos:column="18">(<argument><expr><name pos:line="20" pos:column="19">fd<pos:position pos:line="20" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="23">&amp;<pos:position pos:line="20" pos:column="28"/></operator><name pos:line="20" pos:column="24">sb<pos:position pos:line="20" pos:column="26"/></name></expr></argument>)<pos:position pos:line="20" pos:column="27"/></argument_list></call> <operator pos:line="20" pos:column="28">==<pos:position pos:line="20" pos:column="30"/></operator> <literal type="number" pos:line="20" pos:column="31">0<pos:position pos:line="20" pos:column="32"/></literal></expr>)<pos:position pos:line="20" pos:column="33"/></condition><then pos:line="20" pos:column="33">
            <block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="13">maxOffset<pos:position pos:line="21" pos:column="22"/></name> <operator pos:line="21" pos:column="23">=<pos:position pos:line="21" pos:column="24"/></operator> <name><name pos:line="21" pos:column="25">sb<pos:position pos:line="21" pos:column="27"/></name><operator pos:line="21" pos:column="27">.<pos:position pos:line="21" pos:column="28"/></operator><name pos:line="21" pos:column="28">st_size<pos:position pos:line="21" pos:column="35"/></name></name></expr>;<pos:position pos:line="21" pos:column="36"/></expr_stmt></block></then></if> <comment type="line" pos:line="21" pos:column="37">// we do not expect it to change</comment>
    }<pos:position pos:line="22" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name><name pos:line="24" pos:column="5">callback<pos:position pos:line="24" pos:column="13"/></name><operator pos:line="24" pos:column="13">-&gt;<pos:position pos:line="24" pos:column="18"/></operator><name pos:line="24" pos:column="15">ioCompletedNotification<pos:position pos:line="24" pos:column="38"/></name></name><argument_list pos:line="24" pos:column="38">()<pos:position pos:line="24" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="41"/></expr_stmt>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
