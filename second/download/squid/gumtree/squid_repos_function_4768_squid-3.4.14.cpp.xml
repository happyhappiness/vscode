<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4768_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Acl<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">InnerNode<pos:position pos:line="2" pos:column="15"/></name><operator pos:line="2" pos:column="15">::<pos:position pos:line="2" pos:column="17"/></operator><name pos:line="2" pos:column="17">prepareForUse<pos:position pos:line="2" pos:column="30"/></name></name><parameter_list pos:line="2" pos:column="30">()<pos:position pos:line="2" pos:column="32"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name><name pos:line="4" pos:column="5">std<pos:position pos:line="4" pos:column="8"/></name><operator pos:line="4" pos:column="8">::<pos:position pos:line="4" pos:column="10"/></operator><name pos:line="4" pos:column="10">for_each<pos:position pos:line="4" pos:column="18"/></name></name><argument_list pos:line="4" pos:column="18">(<argument><expr><call><name><name pos:line="4" pos:column="19">nodes<pos:position pos:line="4" pos:column="24"/></name><operator pos:line="4" pos:column="24">.<pos:position pos:line="4" pos:column="25"/></operator><name pos:line="4" pos:column="25">begin<pos:position pos:line="4" pos:column="30"/></name></name><argument_list pos:line="4" pos:column="30">()<pos:position pos:line="4" pos:column="32"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="4" pos:column="34">nodes<pos:position pos:line="4" pos:column="39"/></name><operator pos:line="4" pos:column="39">.<pos:position pos:line="4" pos:column="40"/></operator><name pos:line="4" pos:column="40">end<pos:position pos:line="4" pos:column="43"/></name></name><argument_list pos:line="4" pos:column="43">()<pos:position pos:line="4" pos:column="45"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="4" pos:column="47">std<pos:position pos:line="4" pos:column="50"/></name><operator pos:line="4" pos:column="50">::<pos:position pos:line="4" pos:column="52"/></operator><name pos:line="4" pos:column="52">mem_fun<pos:position pos:line="4" pos:column="59"/></name></name><argument_list pos:line="4" pos:column="59">(<argument><expr><operator pos:line="4" pos:column="60">&amp;<pos:position pos:line="4" pos:column="65"/></operator><name><name pos:line="4" pos:column="61">ACL<pos:position pos:line="4" pos:column="64"/></name><operator pos:line="4" pos:column="64">::<pos:position pos:line="4" pos:column="66"/></operator><name pos:line="4" pos:column="66">prepareForUse<pos:position pos:line="4" pos:column="79"/></name></name></expr></argument>)<pos:position pos:line="4" pos:column="80"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="82"/></expr_stmt>
}<pos:position pos:line="5" pos:column="2"/></block></function></unit>
