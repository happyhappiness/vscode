<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4362_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">bool<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">build_filter<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><name><name pos:line="2" pos:column="14">std<pos:position pos:line="2" pos:column="17"/></name><operator pos:line="2" pos:column="17">::<pos:position pos:line="2" pos:column="19"/></operator><name pos:line="2" pos:column="19">string<pos:position pos:line="2" pos:column="25"/></name></name> <modifier pos:line="2" pos:column="26">&amp;<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="27">filter<pos:position pos:line="2" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="35">const<pos:position pos:line="2" pos:column="40"/></specifier> <name pos:line="2" pos:column="41">char<pos:position pos:line="2" pos:column="45"/></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="47">templ<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="54">const<pos:position pos:line="2" pos:column="59"/></specifier> <name pos:line="2" pos:column="60">char<pos:position pos:line="2" pos:column="64"/></name> <modifier pos:line="2" pos:column="65">*<pos:position pos:line="2" pos:column="66"/></modifier></type><name pos:line="2" pos:column="66">user<pos:position pos:line="2" pos:column="70"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="72">const<pos:position pos:line="2" pos:column="77"/></specifier> <name pos:line="2" pos:column="78">char<pos:position pos:line="2" pos:column="82"/></name> <modifier pos:line="2" pos:column="83">*<pos:position pos:line="2" pos:column="84"/></modifier></type><name pos:line="2" pos:column="84">group<pos:position pos:line="2" pos:column="89"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="90"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">std<pos:position pos:line="4" pos:column="8"/></name><operator pos:line="4" pos:column="8">::<pos:position pos:line="4" pos:column="10"/></operator><name pos:line="4" pos:column="10">stringstream<pos:position pos:line="4" pos:column="22"/></name></name></type> <name pos:line="4" pos:column="23">str<pos:position pos:line="4" pos:column="26"/></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
    <while pos:line="5" pos:column="5">while <condition pos:line="5" pos:column="11">(<expr><operator pos:line="5" pos:column="12">*<pos:position pos:line="5" pos:column="13"/></operator><name pos:line="5" pos:column="13">templ<pos:position pos:line="5" pos:column="18"/></name></expr>)<pos:position pos:line="5" pos:column="19"/></condition> <block pos:line="5" pos:column="20">{
        <switch pos:line="6" pos:column="9">switch <condition pos:line="6" pos:column="16">(<expr><operator pos:line="6" pos:column="17">*<pos:position pos:line="6" pos:column="18"/></operator><name pos:line="6" pos:column="18">templ<pos:position pos:line="6" pos:column="23"/></name></expr>)<pos:position pos:line="6" pos:column="24"/></condition> <block pos:line="6" pos:column="25">{
        <case pos:line="7" pos:column="9">case <expr><literal type="char" pos:line="7" pos:column="14">'%'<pos:position pos:line="7" pos:column="17"/></literal></expr>:<pos:position pos:line="7" pos:column="18"/></case>
            <expr_stmt><expr><operator pos:line="8" pos:column="13">++<pos:position pos:line="8" pos:column="15"/></operator><name pos:line="8" pos:column="15">templ<pos:position pos:line="8" pos:column="20"/></name></expr>;<pos:position pos:line="8" pos:column="21"/></expr_stmt>
            <switch pos:line="9" pos:column="13">switch <condition pos:line="9" pos:column="20">(<expr><operator pos:line="9" pos:column="21">*<pos:position pos:line="9" pos:column="22"/></operator><name pos:line="9" pos:column="22">templ<pos:position pos:line="9" pos:column="27"/></name></expr>)<pos:position pos:line="9" pos:column="28"/></condition> <block pos:line="9" pos:column="29">{
            <case pos:line="10" pos:column="13">case <expr><literal type="char" pos:line="10" pos:column="18">'u'<pos:position pos:line="10" pos:column="21"/></literal></expr>:<pos:position pos:line="10" pos:column="22"/></case>
            <case pos:line="11" pos:column="13">case <expr><literal type="char" pos:line="11" pos:column="18">'v'<pos:position pos:line="11" pos:column="21"/></literal></expr>:<pos:position pos:line="11" pos:column="22"/></case>
                <expr_stmt><expr><operator pos:line="12" pos:column="17">++<pos:position pos:line="12" pos:column="19"/></operator><name pos:line="12" pos:column="19">templ<pos:position pos:line="12" pos:column="24"/></name></expr>;<pos:position pos:line="12" pos:column="25"/></expr_stmt>
                <expr_stmt><expr><name pos:line="13" pos:column="17">str<pos:position pos:line="13" pos:column="20"/></name> <operator pos:line="13" pos:column="21">&lt;&lt;<pos:position pos:line="13" pos:column="29"/></operator> <call><name pos:line="13" pos:column="24">ldap_escape_value<pos:position pos:line="13" pos:column="41"/></name><argument_list pos:line="13" pos:column="41">(<argument><expr><name pos:line="13" pos:column="42">user<pos:position pos:line="13" pos:column="46"/></name></expr></argument>)<pos:position pos:line="13" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="48"/></expr_stmt>
                <break pos:line="14" pos:column="17">break;<pos:position pos:line="14" pos:column="23"/></break>
            <case pos:line="15" pos:column="13">case <expr><literal type="char" pos:line="15" pos:column="18">'g'<pos:position pos:line="15" pos:column="21"/></literal></expr>:<pos:position pos:line="15" pos:column="22"/></case>
            <case pos:line="16" pos:column="13">case <expr><literal type="char" pos:line="16" pos:column="18">'a'<pos:position pos:line="16" pos:column="21"/></literal></expr>:<pos:position pos:line="16" pos:column="22"/></case>
                <expr_stmt><expr><operator pos:line="17" pos:column="17">++<pos:position pos:line="17" pos:column="19"/></operator><name pos:line="17" pos:column="19">templ<pos:position pos:line="17" pos:column="24"/></name></expr>;<pos:position pos:line="17" pos:column="25"/></expr_stmt>
                <expr_stmt><expr><name pos:line="18" pos:column="17">str<pos:position pos:line="18" pos:column="20"/></name> <operator pos:line="18" pos:column="21">&lt;&lt;<pos:position pos:line="18" pos:column="29"/></operator> <call><name pos:line="18" pos:column="24">ldap_escape_value<pos:position pos:line="18" pos:column="41"/></name><argument_list pos:line="18" pos:column="41">(<argument><expr><name pos:line="18" pos:column="42">group<pos:position pos:line="18" pos:column="47"/></name></expr></argument>)<pos:position pos:line="18" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="49"/></expr_stmt>
                <break pos:line="19" pos:column="17">break;<pos:position pos:line="19" pos:column="23"/></break>
            <default pos:line="20" pos:column="13">default:<pos:position pos:line="20" pos:column="21"/></default>
                <expr_stmt><expr><call><name pos:line="21" pos:column="17">fprintf<pos:position pos:line="21" pos:column="24"/></name><argument_list pos:line="21" pos:column="24">(<argument><expr><name pos:line="21" pos:column="25">stderr<pos:position pos:line="21" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="33">"ERROR: Unknown filter template string %%%c\n"<pos:position pos:line="21" pos:column="79"/></literal></expr></argument>, <argument><expr><operator pos:line="21" pos:column="81">*<pos:position pos:line="21" pos:column="82"/></operator><name pos:line="21" pos:column="82">templ<pos:position pos:line="21" pos:column="87"/></name></expr></argument>)<pos:position pos:line="21" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="89"/></expr_stmt>
                <expr_stmt><expr><name pos:line="22" pos:column="17">filter<pos:position pos:line="22" pos:column="23"/></name> <operator pos:line="22" pos:column="24">=<pos:position pos:line="22" pos:column="25"/></operator> <call><name><name pos:line="22" pos:column="26">str<pos:position pos:line="22" pos:column="29"/></name><operator pos:line="22" pos:column="29">.<pos:position pos:line="22" pos:column="30"/></operator><name pos:line="22" pos:column="30">str<pos:position pos:line="22" pos:column="33"/></name></name><argument_list pos:line="22" pos:column="33">()<pos:position pos:line="22" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="36"/></expr_stmt>
                <return pos:line="23" pos:column="17">return <expr><literal type="boolean" pos:line="23" pos:column="24">false<pos:position pos:line="23" pos:column="29"/></literal></expr>;<pos:position pos:line="23" pos:column="30"/></return>
            }<pos:position pos:line="24" pos:column="14"/></block></switch>
            <break pos:line="25" pos:column="13">break;<pos:position pos:line="25" pos:column="19"/></break>
        <case pos:line="26" pos:column="9">case <expr><literal type="char" pos:line="26" pos:column="14">'\\'<pos:position pos:line="26" pos:column="18"/></literal></expr>:<pos:position pos:line="26" pos:column="19"/></case>
            <expr_stmt><expr><operator pos:line="27" pos:column="13">++<pos:position pos:line="27" pos:column="15"/></operator><name pos:line="27" pos:column="15">templ<pos:position pos:line="27" pos:column="20"/></name></expr>;<pos:position pos:line="27" pos:column="21"/></expr_stmt>
            <if pos:line="28" pos:column="13">if <condition pos:line="28" pos:column="16">(<expr><operator pos:line="28" pos:column="17">*<pos:position pos:line="28" pos:column="18"/></operator><name pos:line="28" pos:column="18">templ<pos:position pos:line="28" pos:column="23"/></name></expr>)<pos:position pos:line="28" pos:column="24"/></condition><then pos:line="28" pos:column="24"> <block pos:line="28" pos:column="25">{
                <expr_stmt><expr><name pos:line="29" pos:column="17">str<pos:position pos:line="29" pos:column="20"/></name> <operator pos:line="29" pos:column="21">&lt;&lt;<pos:position pos:line="29" pos:column="29"/></operator> <operator pos:line="29" pos:column="24">*<pos:position pos:line="29" pos:column="25"/></operator><name pos:line="29" pos:column="25">templ<pos:position pos:line="29" pos:column="30"/></name></expr>;<pos:position pos:line="29" pos:column="31"/></expr_stmt>
                <expr_stmt><expr><operator pos:line="30" pos:column="17">++<pos:position pos:line="30" pos:column="19"/></operator><name pos:line="30" pos:column="19">templ<pos:position pos:line="30" pos:column="24"/></name></expr>;<pos:position pos:line="30" pos:column="25"/></expr_stmt>
            }<pos:position pos:line="31" pos:column="14"/></block></then></if>
            <break pos:line="32" pos:column="13">break;<pos:position pos:line="32" pos:column="19"/></break>
        <default pos:line="33" pos:column="9">default:<pos:position pos:line="33" pos:column="17"/></default>
            <expr_stmt><expr><name pos:line="34" pos:column="13">str<pos:position pos:line="34" pos:column="16"/></name> <operator pos:line="34" pos:column="17">&lt;&lt;<pos:position pos:line="34" pos:column="25"/></operator> <operator pos:line="34" pos:column="20">*<pos:position pos:line="34" pos:column="21"/></operator><name pos:line="34" pos:column="21">templ<pos:position pos:line="34" pos:column="26"/></name></expr>;<pos:position pos:line="34" pos:column="27"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="35" pos:column="13">++<pos:position pos:line="35" pos:column="15"/></operator><name pos:line="35" pos:column="15">templ<pos:position pos:line="35" pos:column="20"/></name></expr>;<pos:position pos:line="35" pos:column="21"/></expr_stmt>
            <break pos:line="36" pos:column="13">break;<pos:position pos:line="36" pos:column="19"/></break>
        }<pos:position pos:line="37" pos:column="10"/></block></switch>
    }<pos:position pos:line="38" pos:column="6"/></block></while>
    <expr_stmt><expr><name pos:line="39" pos:column="5">filter<pos:position pos:line="39" pos:column="11"/></name> <operator pos:line="39" pos:column="12">=<pos:position pos:line="39" pos:column="13"/></operator> <call><name><name pos:line="39" pos:column="14">str<pos:position pos:line="39" pos:column="17"/></name><operator pos:line="39" pos:column="17">.<pos:position pos:line="39" pos:column="18"/></operator><name pos:line="39" pos:column="18">str<pos:position pos:line="39" pos:column="21"/></name></name><argument_list pos:line="39" pos:column="21">()<pos:position pos:line="39" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="24"/></expr_stmt>
    <return pos:line="40" pos:column="5">return <expr><literal type="boolean" pos:line="40" pos:column="12">true<pos:position pos:line="40" pos:column="16"/></literal></expr>;<pos:position pos:line="40" pos:column="17"/></return>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
