<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3563_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">httpAccept<pos:position pos:line="2" pos:column="11"/></name><parameter_list pos:line="2" pos:column="11">(<parameter><decl><type><specifier pos:line="2" pos:column="12">const<pos:position pos:line="2" pos:column="17"/></specifier> <name pos:line="2" pos:column="18">CommAcceptCbParams<pos:position pos:line="2" pos:column="36"/></name> <modifier pos:line="2" pos:column="37">&amp;<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="38">params<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="45"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">AnyP<pos:position pos:line="4" pos:column="9"/></name><operator pos:line="4" pos:column="9">::<pos:position pos:line="4" pos:column="11"/></operator><name pos:line="4" pos:column="11">PortCfg<pos:position pos:line="4" pos:column="18"/></name></name> <modifier pos:line="4" pos:column="19">*<pos:position pos:line="4" pos:column="20"/></modifier></type><name pos:line="4" pos:column="20">s<pos:position pos:line="4" pos:column="21"/></name> <init pos:line="4" pos:column="22">= <expr><cast type="static" pos:line="4" pos:column="24">static_cast<argument_list type="generic" pos:line="4" pos:column="35">&lt;<argument><expr><name><name pos:line="4" pos:column="36">AnyP<pos:position pos:line="4" pos:column="40"/></name><operator pos:line="4" pos:column="40">::<pos:position pos:line="4" pos:column="42"/></operator><name pos:line="4" pos:column="42">PortCfg<pos:position pos:line="4" pos:column="49"/></name></name> <operator pos:line="4" pos:column="50">*<pos:position pos:line="4" pos:column="51"/></operator></expr></argument>&gt;<pos:position pos:line="4" pos:column="55"/></argument_list><argument_list pos:line="4" pos:column="52">(<argument><expr><name><name pos:line="4" pos:column="53">params<pos:position pos:line="4" pos:column="59"/></name><operator pos:line="4" pos:column="59">.<pos:position pos:line="4" pos:column="60"/></operator><name pos:line="4" pos:column="60">data<pos:position pos:line="4" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="4" pos:column="65"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="4" pos:column="66"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name><name pos:line="6" pos:column="9">params<pos:position pos:line="6" pos:column="15"/></name><operator pos:line="6" pos:column="15">.<pos:position pos:line="6" pos:column="16"/></operator><name pos:line="6" pos:column="16">flag<pos:position pos:line="6" pos:column="20"/></name></name> <operator pos:line="6" pos:column="21">!=<pos:position pos:line="6" pos:column="23"/></operator> <name pos:line="6" pos:column="24">COMM_OK<pos:position pos:line="6" pos:column="31"/></name></expr>)<pos:position pos:line="6" pos:column="32"/></condition><then pos:line="6" pos:column="32"> <block pos:line="6" pos:column="33">{
        <comment type="line" pos:line="7" pos:column="9">// Its possible the call was still queued when the client disconnected</comment>
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">debugs<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><literal type="number" pos:line="8" pos:column="16">33<pos:position pos:line="8" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="20">2<pos:position pos:line="8" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="23">"httpAccept: "<pos:position pos:line="8" pos:column="37"/></literal> <operator pos:line="8" pos:column="38">&lt;&lt;<pos:position pos:line="8" pos:column="46"/></operator> <name><name pos:line="8" pos:column="41">s<pos:position pos:line="8" pos:column="42"/></name><operator pos:line="8" pos:column="42">-&gt;<pos:position pos:line="8" pos:column="47"/></operator><name pos:line="8" pos:column="44">listenConn<pos:position pos:line="8" pos:column="54"/></name></name> <operator pos:line="8" pos:column="55">&lt;&lt;<pos:position pos:line="8" pos:column="63"/></operator> <literal type="string" pos:line="8" pos:column="58">": accept failure: "<pos:position pos:line="8" pos:column="78"/></literal> <operator pos:line="8" pos:column="79">&lt;&lt;<pos:position pos:line="8" pos:column="87"/></operator> <call><name pos:line="8" pos:column="82">xstrerr<pos:position pos:line="8" pos:column="89"/></name><argument_list pos:line="8" pos:column="89">(<argument><expr><name><name pos:line="8" pos:column="90">params<pos:position pos:line="8" pos:column="96"/></name><operator pos:line="8" pos:column="96">.<pos:position pos:line="8" pos:column="97"/></operator><name pos:line="8" pos:column="97">xerrno<pos:position pos:line="8" pos:column="103"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="104"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="105"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="106"/></expr_stmt>
        <return pos:line="9" pos:column="9">return;<pos:position pos:line="9" pos:column="16"/></return>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="12" pos:column="5">debugs<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><literal type="number" pos:line="12" pos:column="12">33<pos:position pos:line="12" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="16">4<pos:position pos:line="12" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="19">HERE<pos:position pos:line="12" pos:column="23"/></name> <operator pos:line="12" pos:column="24">&lt;&lt;<pos:position pos:line="12" pos:column="32"/></operator> <name><name pos:line="12" pos:column="27">params<pos:position pos:line="12" pos:column="33"/></name><operator pos:line="12" pos:column="33">.<pos:position pos:line="12" pos:column="34"/></operator><name pos:line="12" pos:column="34">conn<pos:position pos:line="12" pos:column="38"/></name></name> <operator pos:line="12" pos:column="39">&lt;&lt;<pos:position pos:line="12" pos:column="47"/></operator> <literal type="string" pos:line="12" pos:column="42">": accepted"<pos:position pos:line="12" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="56"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">fd_note<pos:position pos:line="13" pos:column="12"/></name><argument_list pos:line="13" pos:column="12">(<argument><expr><name><name pos:line="13" pos:column="13">params<pos:position pos:line="13" pos:column="19"/></name><operator pos:line="13" pos:column="19">.<pos:position pos:line="13" pos:column="20"/></operator><name pos:line="13" pos:column="20">conn<pos:position pos:line="13" pos:column="24"/></name><operator pos:line="13" pos:column="24">-&gt;<pos:position pos:line="13" pos:column="29"/></operator><name pos:line="13" pos:column="26">fd<pos:position pos:line="13" pos:column="28"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="30">"client http connect"<pos:position pos:line="13" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="53"/></expr_stmt>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name><name pos:line="15" pos:column="9">s<pos:position pos:line="15" pos:column="10"/></name><operator pos:line="15" pos:column="10">-&gt;<pos:position pos:line="15" pos:column="15"/></operator><name pos:line="15" pos:column="12">tcp_keepalive<pos:position pos:line="15" pos:column="25"/></name><operator pos:line="15" pos:column="25">.<pos:position pos:line="15" pos:column="26"/></operator><name pos:line="15" pos:column="26">enabled<pos:position pos:line="15" pos:column="33"/></name></name></expr>)<pos:position pos:line="15" pos:column="34"/></condition><then pos:line="15" pos:column="34"> <block pos:line="15" pos:column="35">{
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">commSetTcpKeepalive<pos:position pos:line="16" pos:column="28"/></name><argument_list pos:line="16" pos:column="28">(<argument><expr><name><name pos:line="16" pos:column="29">params<pos:position pos:line="16" pos:column="35"/></name><operator pos:line="16" pos:column="35">.<pos:position pos:line="16" pos:column="36"/></operator><name pos:line="16" pos:column="36">conn<pos:position pos:line="16" pos:column="40"/></name><operator pos:line="16" pos:column="40">-&gt;<pos:position pos:line="16" pos:column="45"/></operator><name pos:line="16" pos:column="42">fd<pos:position pos:line="16" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="46">s<pos:position pos:line="16" pos:column="47"/></name><operator pos:line="16" pos:column="47">-&gt;<pos:position pos:line="16" pos:column="52"/></operator><name pos:line="16" pos:column="49">tcp_keepalive<pos:position pos:line="16" pos:column="62"/></name><operator pos:line="16" pos:column="62">.<pos:position pos:line="16" pos:column="63"/></operator><name pos:line="16" pos:column="63">idle<pos:position pos:line="16" pos:column="67"/></name></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="69">s<pos:position pos:line="16" pos:column="70"/></name><operator pos:line="16" pos:column="70">-&gt;<pos:position pos:line="16" pos:column="75"/></operator><name pos:line="16" pos:column="72">tcp_keepalive<pos:position pos:line="16" pos:column="85"/></name><operator pos:line="16" pos:column="85">.<pos:position pos:line="16" pos:column="86"/></operator><name pos:line="16" pos:column="86">interval<pos:position pos:line="16" pos:column="94"/></name></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="96">s<pos:position pos:line="16" pos:column="97"/></name><operator pos:line="16" pos:column="97">-&gt;<pos:position pos:line="16" pos:column="102"/></operator><name pos:line="16" pos:column="99">tcp_keepalive<pos:position pos:line="16" pos:column="112"/></name><operator pos:line="16" pos:column="112">.<pos:position pos:line="16" pos:column="113"/></operator><name pos:line="16" pos:column="113">timeout<pos:position pos:line="16" pos:column="120"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="121"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="122"/></expr_stmt>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>

    <expr_stmt><expr><operator pos:line="19" pos:column="5">++<pos:position pos:line="19" pos:column="7"/></operator> <name pos:line="19" pos:column="8">incoming_sockets_accepted<pos:position pos:line="19" pos:column="33"/></name></expr>;<pos:position pos:line="19" pos:column="34"/></expr_stmt>

    <comment type="line" pos:line="21" pos:column="5">// Socket is ready, setup the connection manager to start using it</comment>
    <decl_stmt><decl><type><name pos:line="22" pos:column="5">ConnStateData<pos:position pos:line="22" pos:column="18"/></name> <modifier pos:line="22" pos:column="19">*<pos:position pos:line="22" pos:column="20"/></modifier></type><name pos:line="22" pos:column="20">connState<pos:position pos:line="22" pos:column="29"/></name> <init pos:line="22" pos:column="30">= <expr><call><name pos:line="22" pos:column="32">connStateCreate<pos:position pos:line="22" pos:column="47"/></name><argument_list pos:line="22" pos:column="47">(<argument><expr><name><name pos:line="22" pos:column="48">params<pos:position pos:line="22" pos:column="54"/></name><operator pos:line="22" pos:column="54">.<pos:position pos:line="22" pos:column="55"/></operator><name pos:line="22" pos:column="55">conn<pos:position pos:line="22" pos:column="59"/></name></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="61">s<pos:position pos:line="22" pos:column="62"/></name></expr></argument>)<pos:position pos:line="22" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="22" pos:column="64"/></decl_stmt>

    <typedef pos:line="24" pos:column="5">typedef <type><name><name pos:line="24" pos:column="13">CommCbMemFunT<pos:position pos:line="24" pos:column="26"/></name><argument_list type="generic" pos:line="24" pos:column="26">&lt;<argument><expr><name pos:line="24" pos:column="27">ConnStateData<pos:position pos:line="24" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="42">CommTimeoutCbParams<pos:position pos:line="24" pos:column="61"/></name></expr></argument>&gt;<pos:position pos:line="24" pos:column="65"/></argument_list></name></type> <name pos:line="24" pos:column="63">TimeoutDialer<pos:position pos:line="24" pos:column="76"/></name>;<pos:position pos:line="24" pos:column="77"/></typedef>
    <decl_stmt><decl><type><name><name pos:line="25" pos:column="5">AsyncCall<pos:position pos:line="25" pos:column="14"/></name><operator pos:line="25" pos:column="14">::<pos:position pos:line="25" pos:column="16"/></operator><name pos:line="25" pos:column="16">Pointer<pos:position pos:line="25" pos:column="23"/></name></name></type> <name pos:line="25" pos:column="24">timeoutCall<pos:position pos:line="25" pos:column="35"/></name> <init pos:line="25" pos:column="36">=  <expr><call><name pos:line="25" pos:column="39">JobCallback<pos:position pos:line="25" pos:column="50"/></name><argument_list pos:line="25" pos:column="50">(<argument><expr><literal type="number" pos:line="25" pos:column="51">33<pos:position pos:line="25" pos:column="53"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="55">5<pos:position pos:line="25" pos:column="56"/></literal></expr></argument>,
                                      <argument><expr><name pos:line="26" pos:column="39">TimeoutDialer<pos:position pos:line="26" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="54">connState<pos:position pos:line="26" pos:column="63"/></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="65">ConnStateData<pos:position pos:line="26" pos:column="78"/></name><operator pos:line="26" pos:column="78">::<pos:position pos:line="26" pos:column="80"/></operator><name pos:line="26" pos:column="80">requestTimeout<pos:position pos:line="26" pos:column="94"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="95"/></argument_list></call></expr></init></decl>;<pos:position pos:line="26" pos:column="96"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">commSetConnTimeout<pos:position pos:line="27" pos:column="23"/></name><argument_list pos:line="27" pos:column="23">(<argument><expr><name><name pos:line="27" pos:column="24">params<pos:position pos:line="27" pos:column="30"/></name><operator pos:line="27" pos:column="30">.<pos:position pos:line="27" pos:column="31"/></operator><name pos:line="27" pos:column="31">conn<pos:position pos:line="27" pos:column="35"/></name></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="37">Config<pos:position pos:line="27" pos:column="43"/></name><operator pos:line="27" pos:column="43">.<pos:position pos:line="27" pos:column="44"/></operator><name pos:line="27" pos:column="44">Timeout<pos:position pos:line="27" pos:column="51"/></name><operator pos:line="27" pos:column="51">.<pos:position pos:line="27" pos:column="52"/></operator><name pos:line="27" pos:column="52">request<pos:position pos:line="27" pos:column="59"/></name></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="61">timeoutCall<pos:position pos:line="27" pos:column="72"/></name></expr></argument>)<pos:position pos:line="27" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="74"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="29" pos:column="5">connState<pos:position pos:line="29" pos:column="14"/></name><operator pos:line="29" pos:column="14">-&gt;<pos:position pos:line="29" pos:column="19"/></operator><name pos:line="29" pos:column="16">readSomeData<pos:position pos:line="29" pos:column="28"/></name></name><argument_list pos:line="29" pos:column="28">()<pos:position pos:line="29" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="31"/></expr_stmt>

<cpp:if pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">if<pos:position pos:line="31" pos:column="4"/></cpp:directive> <expr><name pos:line="31" pos:column="5">USE_DELAY_POOLS<pos:position pos:line="31" pos:column="20"/></name></expr></cpp:if>
    <expr_stmt><expr><name><name pos:line="32" pos:column="5">fd_table<pos:position pos:line="32" pos:column="13"/></name><index pos:line="32" pos:column="13">[<expr><name><name pos:line="32" pos:column="14">params<pos:position pos:line="32" pos:column="20"/></name><operator pos:line="32" pos:column="20">.<pos:position pos:line="32" pos:column="21"/></operator><name pos:line="32" pos:column="21">conn<pos:position pos:line="32" pos:column="25"/></name><operator pos:line="32" pos:column="25">-&gt;<pos:position pos:line="32" pos:column="30"/></operator><name pos:line="32" pos:column="27">fd<pos:position pos:line="32" pos:column="29"/></name></name></expr>]<pos:position pos:line="32" pos:column="30"/></index></name><operator pos:line="32" pos:column="30">.<pos:position pos:line="32" pos:column="31"/></operator><name pos:line="32" pos:column="31">clientInfo<pos:position pos:line="32" pos:column="41"/></name> <operator pos:line="32" pos:column="42">=<pos:position pos:line="32" pos:column="43"/></operator> <name pos:line="32" pos:column="44">NULL<pos:position pos:line="32" pos:column="48"/></name></expr>;<pos:position pos:line="32" pos:column="49"/></expr_stmt>

    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">(<expr><name><name pos:line="34" pos:column="9">Config<pos:position pos:line="34" pos:column="15"/></name><operator pos:line="34" pos:column="15">.<pos:position pos:line="34" pos:column="16"/></operator><name pos:line="34" pos:column="16">onoff<pos:position pos:line="34" pos:column="21"/></name><operator pos:line="34" pos:column="21">.<pos:position pos:line="34" pos:column="22"/></operator><name pos:line="34" pos:column="22">client_db<pos:position pos:line="34" pos:column="31"/></name></name></expr>)<pos:position pos:line="34" pos:column="32"/></condition><then pos:line="34" pos:column="32"> <block pos:line="34" pos:column="33">{
        <comment type="block" pos:line="35" pos:column="9">/* it was said several times that client write limiter does not work if client_db is disabled */</comment>

        <decl_stmt><decl><type><name pos:line="37" pos:column="9">ClientDelayPools<pos:position pos:line="37" pos:column="25"/></name><modifier pos:line="37" pos:column="25">&amp;<pos:position pos:line="37" pos:column="30"/></modifier></type> <name pos:line="37" pos:column="27">pools<pos:position pos:line="37" pos:column="32"/></name><argument_list pos:line="37" pos:column="32">(<argument><expr><name><name pos:line="37" pos:column="33">Config<pos:position pos:line="37" pos:column="39"/></name><operator pos:line="37" pos:column="39">.<pos:position pos:line="37" pos:column="40"/></operator><name pos:line="37" pos:column="40">ClientDelay<pos:position pos:line="37" pos:column="51"/></name><operator pos:line="37" pos:column="51">.<pos:position pos:line="37" pos:column="52"/></operator><name pos:line="37" pos:column="52">pools<pos:position pos:line="37" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="58"/></argument_list></decl>;<pos:position pos:line="37" pos:column="59"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="38" pos:column="9">ACLFilledChecklist<pos:position pos:line="38" pos:column="27"/></name></type> <name pos:line="38" pos:column="28">ch<pos:position pos:line="38" pos:column="30"/></name><argument_list pos:line="38" pos:column="30">(<argument><expr><name pos:line="38" pos:column="31">NULL<pos:position pos:line="38" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="37">NULL<pos:position pos:line="38" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="43">NULL<pos:position pos:line="38" pos:column="47"/></name></expr></argument>)<pos:position pos:line="38" pos:column="48"/></argument_list></decl>;<pos:position pos:line="38" pos:column="49"/></decl_stmt>

        <comment type="line" pos:line="40" pos:column="9">// TODO: we check early to limit error response bandwith but we</comment>
        <comment type="line" pos:line="41" pos:column="9">// should recheck when we can honor delay_pool_uses_indirect</comment>
        <comment type="line" pos:line="42" pos:column="9">// TODO: we should also pass the port details for myportname here.</comment>
        <expr_stmt><expr><name><name pos:line="43" pos:column="9">ch<pos:position pos:line="43" pos:column="11"/></name><operator pos:line="43" pos:column="11">.<pos:position pos:line="43" pos:column="12"/></operator><name pos:line="43" pos:column="12">src_addr<pos:position pos:line="43" pos:column="20"/></name></name> <operator pos:line="43" pos:column="21">=<pos:position pos:line="43" pos:column="22"/></operator> <name><name pos:line="43" pos:column="23">params<pos:position pos:line="43" pos:column="29"/></name><operator pos:line="43" pos:column="29">.<pos:position pos:line="43" pos:column="30"/></operator><name pos:line="43" pos:column="30">conn<pos:position pos:line="43" pos:column="34"/></name><operator pos:line="43" pos:column="34">-&gt;<pos:position pos:line="43" pos:column="39"/></operator><name pos:line="43" pos:column="36">remote<pos:position pos:line="43" pos:column="42"/></name></name></expr>;<pos:position pos:line="43" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="44" pos:column="9">ch<pos:position pos:line="44" pos:column="11"/></name><operator pos:line="44" pos:column="11">.<pos:position pos:line="44" pos:column="12"/></operator><name pos:line="44" pos:column="12">my_addr<pos:position pos:line="44" pos:column="19"/></name></name> <operator pos:line="44" pos:column="20">=<pos:position pos:line="44" pos:column="21"/></operator> <name><name pos:line="44" pos:column="22">params<pos:position pos:line="44" pos:column="28"/></name><operator pos:line="44" pos:column="28">.<pos:position pos:line="44" pos:column="29"/></operator><name pos:line="44" pos:column="29">conn<pos:position pos:line="44" pos:column="33"/></name><operator pos:line="44" pos:column="33">-&gt;<pos:position pos:line="44" pos:column="38"/></operator><name pos:line="44" pos:column="35">local<pos:position pos:line="44" pos:column="40"/></name></name></expr>;<pos:position pos:line="44" pos:column="41"/></expr_stmt>

        <for pos:line="46" pos:column="9">for <control pos:line="46" pos:column="13">(<init><decl><type><name pos:line="46" pos:column="14">unsigned<pos:position pos:line="46" pos:column="22"/></name> <name pos:line="46" pos:column="23">int<pos:position pos:line="46" pos:column="26"/></name></type> <name pos:line="46" pos:column="27">pool<pos:position pos:line="46" pos:column="31"/></name> <init pos:line="46" pos:column="32">= <expr><literal type="number" pos:line="46" pos:column="34">0<pos:position pos:line="46" pos:column="35"/></literal></expr></init></decl>;<pos:position pos:line="46" pos:column="36"/></init> <condition><expr><name pos:line="46" pos:column="37">pool<pos:position pos:line="46" pos:column="41"/></name> <operator pos:line="46" pos:column="42">&lt;<pos:position pos:line="46" pos:column="46"/></operator> <call><name><name pos:line="46" pos:column="44">pools<pos:position pos:line="46" pos:column="49"/></name><operator pos:line="46" pos:column="49">.<pos:position pos:line="46" pos:column="50"/></operator><name pos:line="46" pos:column="50">size<pos:position pos:line="46" pos:column="54"/></name></name><argument_list pos:line="46" pos:column="54">()<pos:position pos:line="46" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="57"/></condition> <incr><expr><operator pos:line="46" pos:column="58">++<pos:position pos:line="46" pos:column="60"/></operator><name pos:line="46" pos:column="60">pool<pos:position pos:line="46" pos:column="64"/></name></expr></incr>)<pos:position pos:line="46" pos:column="65"/></control> <block pos:line="46" pos:column="66">{

            <comment type="block" pos:line="48" pos:column="13">/* pools require explicit 'allow' to assign a client into them */</comment>
            <if pos:line="49" pos:column="13">if <condition pos:line="49" pos:column="16">(<expr><name><name pos:line="49" pos:column="17">pools<pos:position pos:line="49" pos:column="22"/></name><index pos:line="49" pos:column="22">[<expr><name pos:line="49" pos:column="23">pool<pos:position pos:line="49" pos:column="27"/></name></expr>]<pos:position pos:line="49" pos:column="28"/></index></name><operator pos:line="49" pos:column="28">.<pos:position pos:line="49" pos:column="29"/></operator><name pos:line="49" pos:column="29">access<pos:position pos:line="49" pos:column="35"/></name></expr>)<pos:position pos:line="49" pos:column="36"/></condition><then pos:line="49" pos:column="36"> <block pos:line="49" pos:column="37">{
                <expr_stmt><expr><name><name pos:line="50" pos:column="17">ch<pos:position pos:line="50" pos:column="19"/></name><operator pos:line="50" pos:column="19">.<pos:position pos:line="50" pos:column="20"/></operator><name pos:line="50" pos:column="20">accessList<pos:position pos:line="50" pos:column="30"/></name></name> <operator pos:line="50" pos:column="31">=<pos:position pos:line="50" pos:column="32"/></operator> <name><name pos:line="50" pos:column="33">pools<pos:position pos:line="50" pos:column="38"/></name><index pos:line="50" pos:column="38">[<expr><name pos:line="50" pos:column="39">pool<pos:position pos:line="50" pos:column="43"/></name></expr>]<pos:position pos:line="50" pos:column="44"/></index></name><operator pos:line="50" pos:column="44">.<pos:position pos:line="50" pos:column="45"/></operator><name pos:line="50" pos:column="45">access<pos:position pos:line="50" pos:column="51"/></name></expr>;<pos:position pos:line="50" pos:column="52"/></expr_stmt>
                <decl_stmt><decl><type><name pos:line="51" pos:column="17">allow_t<pos:position pos:line="51" pos:column="24"/></name></type> <name pos:line="51" pos:column="25">answer<pos:position pos:line="51" pos:column="31"/></name> <init pos:line="51" pos:column="32">= <expr><call><name><name pos:line="51" pos:column="34">ch<pos:position pos:line="51" pos:column="36"/></name><operator pos:line="51" pos:column="36">.<pos:position pos:line="51" pos:column="37"/></operator><name pos:line="51" pos:column="37">fastCheck<pos:position pos:line="51" pos:column="46"/></name></name><argument_list pos:line="51" pos:column="46">()<pos:position pos:line="51" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="51" pos:column="49"/></decl_stmt>
                <if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><name pos:line="52" pos:column="21">answer<pos:position pos:line="52" pos:column="27"/></name> <operator pos:line="52" pos:column="28">==<pos:position pos:line="52" pos:column="30"/></operator> <name pos:line="52" pos:column="31">ACCESS_ALLOWED<pos:position pos:line="52" pos:column="45"/></name></expr>)<pos:position pos:line="52" pos:column="46"/></condition><then pos:line="52" pos:column="46"> <block pos:line="52" pos:column="47">{

                    <comment type="block" pos:line="54" pos:column="21">/*  request client information from db after we did all checks
                        this will save hash lookup if client failed checks */</comment>
                    <decl_stmt><decl><type><name pos:line="56" pos:column="21">ClientInfo<pos:position pos:line="56" pos:column="31"/></name> <modifier pos:line="56" pos:column="32">*<pos:position pos:line="56" pos:column="33"/></modifier></type> <name pos:line="56" pos:column="34">cli<pos:position pos:line="56" pos:column="37"/></name> <init pos:line="56" pos:column="38">= <expr><call><name pos:line="56" pos:column="40">clientdbGetInfo<pos:position pos:line="56" pos:column="55"/></name><argument_list pos:line="56" pos:column="55">(<argument><expr><name><name pos:line="56" pos:column="56">params<pos:position pos:line="56" pos:column="62"/></name><operator pos:line="56" pos:column="62">.<pos:position pos:line="56" pos:column="63"/></operator><name pos:line="56" pos:column="63">conn<pos:position pos:line="56" pos:column="67"/></name><operator pos:line="56" pos:column="67">-&gt;<pos:position pos:line="56" pos:column="72"/></operator><name pos:line="56" pos:column="69">remote<pos:position pos:line="56" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="76"/></argument_list></call></expr></init></decl>;<pos:position pos:line="56" pos:column="77"/></decl_stmt>
                    <expr_stmt><expr><call><name pos:line="57" pos:column="21">assert<pos:position pos:line="57" pos:column="27"/></name><argument_list pos:line="57" pos:column="27">(<argument><expr><name pos:line="57" pos:column="28">cli<pos:position pos:line="57" pos:column="31"/></name></expr></argument>)<pos:position pos:line="57" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="33"/></expr_stmt>

                    <comment type="block" pos:line="59" pos:column="21">/* put client info in FDE */</comment>
                    <expr_stmt><expr><name><name pos:line="60" pos:column="21">fd_table<pos:position pos:line="60" pos:column="29"/></name><index pos:line="60" pos:column="29">[<expr><name><name pos:line="60" pos:column="30">params<pos:position pos:line="60" pos:column="36"/></name><operator pos:line="60" pos:column="36">.<pos:position pos:line="60" pos:column="37"/></operator><name pos:line="60" pos:column="37">conn<pos:position pos:line="60" pos:column="41"/></name><operator pos:line="60" pos:column="41">-&gt;<pos:position pos:line="60" pos:column="46"/></operator><name pos:line="60" pos:column="43">fd<pos:position pos:line="60" pos:column="45"/></name></name></expr>]<pos:position pos:line="60" pos:column="46"/></index></name><operator pos:line="60" pos:column="46">.<pos:position pos:line="60" pos:column="47"/></operator><name pos:line="60" pos:column="47">clientInfo<pos:position pos:line="60" pos:column="57"/></name> <operator pos:line="60" pos:column="58">=<pos:position pos:line="60" pos:column="59"/></operator> <name pos:line="60" pos:column="60">cli<pos:position pos:line="60" pos:column="63"/></name></expr>;<pos:position pos:line="60" pos:column="64"/></expr_stmt>

                    <comment type="block" pos:line="62" pos:column="21">/* setup write limiter for this request */</comment>
                    <decl_stmt><decl><type><specifier pos:line="63" pos:column="21">const<pos:position pos:line="63" pos:column="26"/></specifier> <name pos:line="63" pos:column="27">double<pos:position pos:line="63" pos:column="33"/></name></type> <name pos:line="63" pos:column="34">burst<pos:position pos:line="63" pos:column="39"/></name> <init pos:line="63" pos:column="40">= <expr><call><name pos:line="63" pos:column="42">floor<pos:position pos:line="63" pos:column="47"/></name><argument_list pos:line="63" pos:column="47">(<argument><expr><literal type="number" pos:line="63" pos:column="48">0.5<pos:position pos:line="63" pos:column="51"/></literal> <operator pos:line="63" pos:column="52">+<pos:position pos:line="63" pos:column="53"/></operator>
                                               <operator pos:line="64" pos:column="48">(<pos:position pos:line="64" pos:column="49"/></operator><name><name pos:line="64" pos:column="49">pools<pos:position pos:line="64" pos:column="54"/></name><index pos:line="64" pos:column="54">[<expr><name pos:line="64" pos:column="55">pool<pos:position pos:line="64" pos:column="59"/></name></expr>]<pos:position pos:line="64" pos:column="60"/></index></name><operator pos:line="64" pos:column="60">.<pos:position pos:line="64" pos:column="61"/></operator><name pos:line="64" pos:column="61">highwatermark<pos:position pos:line="64" pos:column="74"/></name> <operator pos:line="64" pos:column="75">*<pos:position pos:line="64" pos:column="76"/></operator> <name><name pos:line="64" pos:column="77">Config<pos:position pos:line="64" pos:column="83"/></name><operator pos:line="64" pos:column="83">.<pos:position pos:line="64" pos:column="84"/></operator><name pos:line="64" pos:column="84">ClientDelay<pos:position pos:line="64" pos:column="95"/></name><operator pos:line="64" pos:column="95">.<pos:position pos:line="64" pos:column="96"/></operator><name pos:line="64" pos:column="96">initial<pos:position pos:line="64" pos:column="103"/></name></name><operator pos:line="64" pos:column="103">)<pos:position pos:line="64" pos:column="104"/></operator><operator pos:line="64" pos:column="104">/<pos:position pos:line="64" pos:column="105"/></operator><literal type="number" pos:line="64" pos:column="105">100.0<pos:position pos:line="64" pos:column="110"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="111"/></argument_list></call></expr></init></decl>;<pos:position pos:line="64" pos:column="112"/></decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="65" pos:column="21">cli<pos:position pos:line="65" pos:column="24"/></name><operator pos:line="65" pos:column="24">-&gt;<pos:position pos:line="65" pos:column="29"/></operator><name pos:line="65" pos:column="26">setWriteLimiter<pos:position pos:line="65" pos:column="41"/></name></name><argument_list pos:line="65" pos:column="41">(<argument><expr><name><name pos:line="65" pos:column="42">pools<pos:position pos:line="65" pos:column="47"/></name><index pos:line="65" pos:column="47">[<expr><name pos:line="65" pos:column="48">pool<pos:position pos:line="65" pos:column="52"/></name></expr>]<pos:position pos:line="65" pos:column="53"/></index></name><operator pos:line="65" pos:column="53">.<pos:position pos:line="65" pos:column="54"/></operator><name pos:line="65" pos:column="54">rate<pos:position pos:line="65" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="60">burst<pos:position pos:line="65" pos:column="65"/></name></expr></argument>, <argument><expr><name><name pos:line="65" pos:column="67">pools<pos:position pos:line="65" pos:column="72"/></name><index pos:line="65" pos:column="72">[<expr><name pos:line="65" pos:column="73">pool<pos:position pos:line="65" pos:column="77"/></name></expr>]<pos:position pos:line="65" pos:column="78"/></index></name><operator pos:line="65" pos:column="78">.<pos:position pos:line="65" pos:column="79"/></operator><name pos:line="65" pos:column="79">highwatermark<pos:position pos:line="65" pos:column="92"/></name></expr></argument>)<pos:position pos:line="65" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="94"/></expr_stmt>
                    <break pos:line="66" pos:column="21">break;<pos:position pos:line="66" pos:column="27"/></break>
                }<pos:position pos:line="67" pos:column="18"/></block></then> <else pos:line="67" pos:column="19">else <block pos:line="67" pos:column="24">{
                    <expr_stmt><expr><call><name pos:line="68" pos:column="21">debugs<pos:position pos:line="68" pos:column="27"/></name><argument_list pos:line="68" pos:column="27">(<argument><expr><literal type="number" pos:line="68" pos:column="28">83<pos:position pos:line="68" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="68" pos:column="32">4<pos:position pos:line="68" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="68" pos:column="35">HERE<pos:position pos:line="68" pos:column="39"/></name> <operator pos:line="68" pos:column="40">&lt;&lt;<pos:position pos:line="68" pos:column="48"/></operator> <literal type="string" pos:line="68" pos:column="43">"Delay pool "<pos:position pos:line="68" pos:column="56"/></literal> <operator pos:line="68" pos:column="57">&lt;&lt;<pos:position pos:line="68" pos:column="65"/></operator> <name pos:line="68" pos:column="60">pool<pos:position pos:line="68" pos:column="64"/></name> <operator pos:line="68" pos:column="65">&lt;&lt;<pos:position pos:line="68" pos:column="73"/></operator> <literal type="string" pos:line="68" pos:column="68">" skipped because ACL "<pos:position pos:line="68" pos:column="91"/></literal> <operator pos:line="68" pos:column="92">&lt;&lt;<pos:position pos:line="68" pos:column="100"/></operator> <name pos:line="68" pos:column="95">answer<pos:position pos:line="68" pos:column="101"/></name></expr></argument>)<pos:position pos:line="68" pos:column="102"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="103"/></expr_stmt>
                }<pos:position pos:line="69" pos:column="18"/></block></else></if>
            }<pos:position pos:line="70" pos:column="14"/></block></then></if>
        }<pos:position pos:line="71" pos:column="10"/></block></for>
    }<pos:position pos:line="72" pos:column="6"/></block></then></if>
<cpp:endif pos:line="73" pos:column="1">#<cpp:directive pos:line="73" pos:column="2">endif<pos:position pos:line="73" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="74" pos:column="2"/></block></function></unit>
