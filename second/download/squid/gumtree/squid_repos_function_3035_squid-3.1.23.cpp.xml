<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3035_squid-3.1.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">mimeEntry<pos:position pos:line="1" pos:column="17"/></name> <modifier pos:line="1" pos:column="18">*<pos:position pos:line="1" pos:column="19"/></modifier></type>
<name pos:line="2" pos:column="1">mimeGetEntry<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><specifier pos:line="2" pos:column="14">const<pos:position pos:line="2" pos:column="19"/></specifier> <name pos:line="2" pos:column="20">char<pos:position pos:line="2" pos:column="24"/></name> <modifier pos:line="2" pos:column="25">*<pos:position pos:line="2" pos:column="26"/></modifier></type><name pos:line="2" pos:column="26">fn<pos:position pos:line="2" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="30">int<pos:position pos:line="2" pos:column="33"/></name></type> <name pos:line="2" pos:column="34">skip_encodings<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="49"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">mimeEntry<pos:position pos:line="4" pos:column="14"/></name> <modifier pos:line="4" pos:column="15">*<pos:position pos:line="4" pos:column="16"/></modifier></type><name pos:line="4" pos:column="16">m<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">t<pos:position pos:line="5" pos:column="12"/></name></decl>;<pos:position pos:line="5" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name> <modifier pos:line="6" pos:column="10">*<pos:position pos:line="6" pos:column="11"/></modifier></type><name pos:line="6" pos:column="11">name<pos:position pos:line="6" pos:column="15"/></name> <init pos:line="6" pos:column="16">= <expr><call><name pos:line="6" pos:column="18">xstrdup<pos:position pos:line="6" pos:column="25"/></name><argument_list pos:line="6" pos:column="25">(<argument><expr><name pos:line="6" pos:column="26">fn<pos:position pos:line="6" pos:column="28"/></name></expr></argument>)<pos:position pos:line="6" pos:column="29"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>

    <do pos:line="8" pos:column="5">do <block pos:line="8" pos:column="8">{
        <expr_stmt><expr><name pos:line="9" pos:column="9">t<pos:position pos:line="9" pos:column="10"/></name> <operator pos:line="9" pos:column="11">=<pos:position pos:line="9" pos:column="12"/></operator> <name pos:line="9" pos:column="13">NULL<pos:position pos:line="9" pos:column="17"/></name></expr>;<pos:position pos:line="9" pos:column="18"/></expr_stmt>

        <for pos:line="11" pos:column="9">for <control pos:line="11" pos:column="13">(<init><expr><name pos:line="11" pos:column="14">m<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">=<pos:position pos:line="11" pos:column="17"/></operator> <name pos:line="11" pos:column="18">MimeTable<pos:position pos:line="11" pos:column="27"/></name></expr>;<pos:position pos:line="11" pos:column="28"/></init> <condition><expr><name pos:line="11" pos:column="29">m<pos:position pos:line="11" pos:column="30"/></name></expr>;<pos:position pos:line="11" pos:column="31"/></condition> <incr><expr><name pos:line="11" pos:column="32">m<pos:position pos:line="11" pos:column="33"/></name> <operator pos:line="11" pos:column="34">=<pos:position pos:line="11" pos:column="35"/></operator> <name><name pos:line="11" pos:column="36">m<pos:position pos:line="11" pos:column="37"/></name><operator pos:line="11" pos:column="37">-&gt;<pos:position pos:line="11" pos:column="42"/></operator><name pos:line="11" pos:column="39">next<pos:position pos:line="11" pos:column="43"/></name></name></expr></incr>)<pos:position pos:line="11" pos:column="44"/></control> <block pos:line="11" pos:column="45">{
            <if pos:line="12" pos:column="13">if <condition pos:line="12" pos:column="16">(<expr><call><name pos:line="12" pos:column="17">regexec<pos:position pos:line="12" pos:column="24"/></name><argument_list pos:line="12" pos:column="24">(<argument><expr><operator pos:line="12" pos:column="25">&amp;<pos:position pos:line="12" pos:column="30"/></operator><name><name pos:line="12" pos:column="26">m<pos:position pos:line="12" pos:column="27"/></name><operator pos:line="12" pos:column="27">-&gt;<pos:position pos:line="12" pos:column="32"/></operator><name pos:line="12" pos:column="29">compiled_pattern<pos:position pos:line="12" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="47">name<pos:position pos:line="12" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="53">0<pos:position pos:line="12" pos:column="54"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="56">0<pos:position pos:line="12" pos:column="57"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="59">0<pos:position pos:line="12" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="61"/></argument_list></call> <operator pos:line="12" pos:column="62">==<pos:position pos:line="12" pos:column="64"/></operator> <literal type="number" pos:line="12" pos:column="65">0<pos:position pos:line="12" pos:column="66"/></literal></expr>)<pos:position pos:line="12" pos:column="67"/></condition><then pos:line="12" pos:column="67">
                <block type="pseudo"><break pos:line="13" pos:column="17">break;<pos:position pos:line="13" pos:column="23"/></break></block></then></if>
        }<pos:position pos:line="14" pos:column="10"/></block></for>

        <if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><operator pos:line="16" pos:column="13">!<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="14">skip_encodings<pos:position pos:line="16" pos:column="28"/></name></expr>)<pos:position pos:line="16" pos:column="29"/></condition><then pos:line="16" pos:column="29">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="17" pos:column="13">(<pos:position pos:line="17" pos:column="14"/></operator><name pos:line="17" pos:column="14">void<pos:position pos:line="17" pos:column="18"/></name><operator pos:line="17" pos:column="18">)<pos:position pos:line="17" pos:column="19"/></operator> <literal type="number" pos:line="17" pos:column="20">0<pos:position pos:line="17" pos:column="21"/></literal></expr>;<pos:position pos:line="17" pos:column="22"/></expr_stmt></block></then>
        <elseif pos:line="18" pos:column="9">else <if pos:line="18" pos:column="14">if <condition pos:line="18" pos:column="17">(<expr><name pos:line="18" pos:column="18">m<pos:position pos:line="18" pos:column="19"/></name> <operator pos:line="18" pos:column="20">==<pos:position pos:line="18" pos:column="22"/></operator> <name pos:line="18" pos:column="23">NULL<pos:position pos:line="18" pos:column="27"/></name></expr>)<pos:position pos:line="18" pos:column="28"/></condition><then pos:line="18" pos:column="28">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="19" pos:column="13">(<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="14">void<pos:position pos:line="19" pos:column="18"/></name><operator pos:line="19" pos:column="18">)<pos:position pos:line="19" pos:column="19"/></operator> <literal type="number" pos:line="19" pos:column="20">0<pos:position pos:line="19" pos:column="21"/></literal></expr>;<pos:position pos:line="19" pos:column="22"/></expr_stmt></block></then></if></elseif>
        <elseif pos:line="20" pos:column="9">else <if pos:line="20" pos:column="14">if <condition pos:line="20" pos:column="17">(<expr><call><name pos:line="20" pos:column="18">strcmp<pos:position pos:line="20" pos:column="24"/></name><argument_list pos:line="20" pos:column="24">(<argument><expr><name><name pos:line="20" pos:column="25">m<pos:position pos:line="20" pos:column="26"/></name><operator pos:line="20" pos:column="26">-&gt;<pos:position pos:line="20" pos:column="31"/></operator><name pos:line="20" pos:column="28">content_type<pos:position pos:line="20" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="42">dash_str<pos:position pos:line="20" pos:column="50"/></name></expr></argument>)<pos:position pos:line="20" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="52"/></condition><then pos:line="20" pos:column="52">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="21" pos:column="13">(<pos:position pos:line="21" pos:column="14"/></operator><name pos:line="21" pos:column="14">void<pos:position pos:line="21" pos:column="18"/></name><operator pos:line="21" pos:column="18">)<pos:position pos:line="21" pos:column="19"/></operator> <literal type="number" pos:line="21" pos:column="20">0<pos:position pos:line="21" pos:column="21"/></literal></expr>;<pos:position pos:line="21" pos:column="22"/></expr_stmt></block></then></if></elseif>
        <elseif pos:line="22" pos:column="9">else <if pos:line="22" pos:column="14">if <condition pos:line="22" pos:column="17">(<expr><operator pos:line="22" pos:column="18">!<pos:position pos:line="22" pos:column="19"/></operator><call><name pos:line="22" pos:column="19">strcmp<pos:position pos:line="22" pos:column="25"/></name><argument_list pos:line="22" pos:column="25">(<argument><expr><name><name pos:line="22" pos:column="26">m<pos:position pos:line="22" pos:column="27"/></name><operator pos:line="22" pos:column="27">-&gt;<pos:position pos:line="22" pos:column="32"/></operator><name pos:line="22" pos:column="29">content_encoding<pos:position pos:line="22" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="47">dash_str<pos:position pos:line="22" pos:column="55"/></name></expr></argument>)<pos:position pos:line="22" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="57"/></condition><then pos:line="22" pos:column="57">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="23" pos:column="13">(<pos:position pos:line="23" pos:column="14"/></operator><name pos:line="23" pos:column="14">void<pos:position pos:line="23" pos:column="18"/></name><operator pos:line="23" pos:column="18">)<pos:position pos:line="23" pos:column="19"/></operator> <literal type="number" pos:line="23" pos:column="20">0<pos:position pos:line="23" pos:column="21"/></literal></expr>;<pos:position pos:line="23" pos:column="22"/></expr_stmt></block></then></if></elseif>
        <else pos:line="24" pos:column="9">else <block pos:line="24" pos:column="14">{
            <comment type="block" pos:line="25" pos:column="13">/* Assume we matched /\.\w$/ and cut off the last extension */</comment>
            <if pos:line="26" pos:column="13">if <condition pos:line="26" pos:column="16">(<expr><operator pos:line="26" pos:column="17">(<pos:position pos:line="26" pos:column="18"/></operator><name pos:line="26" pos:column="18">t<pos:position pos:line="26" pos:column="19"/></name> <operator pos:line="26" pos:column="20">=<pos:position pos:line="26" pos:column="21"/></operator> <call><name pos:line="26" pos:column="22">strrchr<pos:position pos:line="26" pos:column="29"/></name><argument_list pos:line="26" pos:column="29">(<argument><expr><name pos:line="26" pos:column="30">name<pos:position pos:line="26" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="26" pos:column="36">'.'<pos:position pos:line="26" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="40"/></argument_list></call><operator pos:line="26" pos:column="40">)<pos:position pos:line="26" pos:column="41"/></operator></expr>)<pos:position pos:line="26" pos:column="42"/></condition><then pos:line="26" pos:column="42"> <block pos:line="26" pos:column="43">{
                <expr_stmt><expr><operator pos:line="27" pos:column="17">*<pos:position pos:line="27" pos:column="18"/></operator><name pos:line="27" pos:column="18">t<pos:position pos:line="27" pos:column="19"/></name> <operator pos:line="27" pos:column="20">=<pos:position pos:line="27" pos:column="21"/></operator> <literal type="char" pos:line="27" pos:column="22">'\0'<pos:position pos:line="27" pos:column="26"/></literal></expr>;<pos:position pos:line="27" pos:column="27"/></expr_stmt>
            }<pos:position pos:line="28" pos:column="14"/></block></then> <else pos:line="28" pos:column="15">else <block pos:line="28" pos:column="20">{
                <comment type="block" pos:line="29" pos:column="17">/* What? A encoding without a extension? */</comment>
                <expr_stmt><expr><name pos:line="30" pos:column="17">m<pos:position pos:line="30" pos:column="18"/></name> <operator pos:line="30" pos:column="19">=<pos:position pos:line="30" pos:column="20"/></operator> <name pos:line="30" pos:column="21">NULL<pos:position pos:line="30" pos:column="25"/></name></expr>;<pos:position pos:line="30" pos:column="26"/></expr_stmt>
            }<pos:position pos:line="31" pos:column="14"/></block></else></if>
        }<pos:position pos:line="32" pos:column="10"/></block></else></if>
    }<pos:position pos:line="33" pos:column="6"/></block> while <condition pos:line="33" pos:column="13">(<expr><name pos:line="33" pos:column="14">t<pos:position pos:line="33" pos:column="15"/></name></expr>)<pos:position pos:line="33" pos:column="16"/></condition>;<pos:position pos:line="33" pos:column="17"/></do>

    <expr_stmt><expr><call><name pos:line="35" pos:column="5">xfree<pos:position pos:line="35" pos:column="10"/></name><argument_list pos:line="35" pos:column="10">(<argument><expr><name pos:line="35" pos:column="11">name<pos:position pos:line="35" pos:column="15"/></name></expr></argument>)<pos:position pos:line="35" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="17"/></expr_stmt>
    <return pos:line="36" pos:column="5">return <expr><name pos:line="36" pos:column="12">m<pos:position pos:line="36" pos:column="13"/></name></expr>;<pos:position pos:line="36" pos:column="14"/></return>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
