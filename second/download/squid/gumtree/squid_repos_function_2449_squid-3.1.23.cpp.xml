<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2449_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">logfileWrite<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><name pos:line="2" pos:column="14">Logfile<pos:position pos:line="2" pos:column="21"/></name> <modifier pos:line="2" pos:column="22">*<pos:position pos:line="2" pos:column="23"/></modifier></type> <name pos:line="2" pos:column="24">lf<pos:position pos:line="2" pos:column="26"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="28">void<pos:position pos:line="2" pos:column="32"/></name> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier></type><name pos:line="2" pos:column="34">buf<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="39">size_t<pos:position pos:line="2" pos:column="45"/></name></type> <name pos:line="2" pos:column="46">len<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="50"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:if pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">if<pos:position pos:line="4" pos:column="4"/></cpp:directive> <expr><name pos:line="4" pos:column="5">HAVE_SYSLOG<pos:position pos:line="4" pos:column="16"/></name></expr></cpp:if>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name><name pos:line="6" pos:column="9">lf<pos:position pos:line="6" pos:column="11"/></name><operator pos:line="6" pos:column="11">-&gt;<pos:position pos:line="6" pos:column="16"/></operator><name pos:line="6" pos:column="13">flags<pos:position pos:line="6" pos:column="18"/></name><operator pos:line="6" pos:column="18">.<pos:position pos:line="6" pos:column="19"/></operator><name pos:line="6" pos:column="19">syslog<pos:position pos:line="6" pos:column="25"/></name></name></expr>)<pos:position pos:line="6" pos:column="26"/></condition><then pos:line="6" pos:column="26"> <block pos:line="6" pos:column="27">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">syslog<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><name><name pos:line="7" pos:column="16">lf<pos:position pos:line="7" pos:column="18"/></name><operator pos:line="7" pos:column="18">-&gt;<pos:position pos:line="7" pos:column="23"/></operator><name pos:line="7" pos:column="20">syslog_priority<pos:position pos:line="7" pos:column="35"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="37">"%s"<pos:position pos:line="7" pos:column="41"/></literal></expr></argument>, <argument><expr><operator pos:line="7" pos:column="43">(<pos:position pos:line="7" pos:column="44"/></operator><name pos:line="7" pos:column="44">char<pos:position pos:line="7" pos:column="48"/></name> <operator pos:line="7" pos:column="49">*<pos:position pos:line="7" pos:column="50"/></operator><operator pos:line="7" pos:column="50">)<pos:position pos:line="7" pos:column="51"/></operator><name pos:line="7" pos:column="51">buf<pos:position pos:line="7" pos:column="54"/></name></expr></argument>)<pos:position pos:line="7" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="56"/></expr_stmt>
        <return pos:line="8" pos:column="9">return;<pos:position pos:line="8" pos:column="16"/></return>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>

<cpp:endif pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">endif<pos:position pos:line="11" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><literal type="number" pos:line="13" pos:column="9">0<pos:position pos:line="13" pos:column="10"/></literal> <operator pos:line="13" pos:column="11">==<pos:position pos:line="13" pos:column="13"/></operator> <name><name pos:line="13" pos:column="14">lf<pos:position pos:line="13" pos:column="16"/></name><operator pos:line="13" pos:column="16">-&gt;<pos:position pos:line="13" pos:column="21"/></operator><name pos:line="13" pos:column="18">bufsz<pos:position pos:line="13" pos:column="23"/></name></name></expr>)<pos:position pos:line="13" pos:column="24"/></condition><then pos:line="13" pos:column="24"> <block pos:line="13" pos:column="25">{
        <comment type="block" pos:line="14" pos:column="9">/* buffering disabled */</comment>
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">logfileWriteWrapper<pos:position pos:line="15" pos:column="28"/></name><argument_list pos:line="15" pos:column="28">(<argument><expr><name pos:line="15" pos:column="29">lf<pos:position pos:line="15" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="33">buf<pos:position pos:line="15" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="38">len<pos:position pos:line="15" pos:column="41"/></name></expr></argument>)<pos:position pos:line="15" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="43"/></expr_stmt>
        <return pos:line="16" pos:column="9">return;<pos:position pos:line="16" pos:column="16"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>

    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name><name pos:line="19" pos:column="9">lf<pos:position pos:line="19" pos:column="11"/></name><operator pos:line="19" pos:column="11">-&gt;<pos:position pos:line="19" pos:column="16"/></operator><name pos:line="19" pos:column="13">offset<pos:position pos:line="19" pos:column="19"/></name></name> <operator pos:line="19" pos:column="20">&gt;<pos:position pos:line="19" pos:column="24"/></operator> <literal type="number" pos:line="19" pos:column="22">0<pos:position pos:line="19" pos:column="23"/></literal> <operator pos:line="19" pos:column="24">&amp;&amp;<pos:position pos:line="19" pos:column="34"/></operator> <name><name pos:line="19" pos:column="27">lf<pos:position pos:line="19" pos:column="29"/></name><operator pos:line="19" pos:column="29">-&gt;<pos:position pos:line="19" pos:column="34"/></operator><name pos:line="19" pos:column="31">offset<pos:position pos:line="19" pos:column="37"/></name></name> <operator pos:line="19" pos:column="38">+<pos:position pos:line="19" pos:column="39"/></operator> <name pos:line="19" pos:column="40">len<pos:position pos:line="19" pos:column="43"/></name> <operator pos:line="19" pos:column="44">&gt;<pos:position pos:line="19" pos:column="48"/></operator> <name><name pos:line="19" pos:column="46">lf<pos:position pos:line="19" pos:column="48"/></name><operator pos:line="19" pos:column="48">-&gt;<pos:position pos:line="19" pos:column="53"/></operator><name pos:line="19" pos:column="50">bufsz<pos:position pos:line="19" pos:column="55"/></name></name></expr>)<pos:position pos:line="19" pos:column="56"/></condition><then pos:line="19" pos:column="56">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="9">logfileFlush<pos:position pos:line="20" pos:column="21"/></name><argument_list pos:line="20" pos:column="21">(<argument><expr><name pos:line="20" pos:column="22">lf<pos:position pos:line="20" pos:column="24"/></name></expr></argument>)<pos:position pos:line="20" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="26"/></expr_stmt></block></then></if>

    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><name pos:line="22" pos:column="9">len<pos:position pos:line="22" pos:column="12"/></name> <operator pos:line="22" pos:column="13">&gt;<pos:position pos:line="22" pos:column="17"/></operator> <name><name pos:line="22" pos:column="15">lf<pos:position pos:line="22" pos:column="17"/></name><operator pos:line="22" pos:column="17">-&gt;<pos:position pos:line="22" pos:column="22"/></operator><name pos:line="22" pos:column="19">bufsz<pos:position pos:line="22" pos:column="24"/></name></name></expr>)<pos:position pos:line="22" pos:column="25"/></condition><then pos:line="22" pos:column="25"> <block pos:line="22" pos:column="26">{
        <comment type="block" pos:line="23" pos:column="9">/* too big to fit in buffer */</comment>
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">logfileWriteWrapper<pos:position pos:line="24" pos:column="28"/></name><argument_list pos:line="24" pos:column="28">(<argument><expr><name pos:line="24" pos:column="29">lf<pos:position pos:line="24" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="33">buf<pos:position pos:line="24" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="38">len<pos:position pos:line="24" pos:column="41"/></name></expr></argument>)<pos:position pos:line="24" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="43"/></expr_stmt>
        <return pos:line="25" pos:column="9">return;<pos:position pos:line="25" pos:column="16"/></return>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="28" pos:column="5">/* buffer it */</comment>
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">xmemcpy<pos:position pos:line="29" pos:column="12"/></name><argument_list pos:line="29" pos:column="12">(<argument><expr><name><name pos:line="29" pos:column="13">lf<pos:position pos:line="29" pos:column="15"/></name><operator pos:line="29" pos:column="15">-&gt;<pos:position pos:line="29" pos:column="20"/></operator><name pos:line="29" pos:column="17">buf<pos:position pos:line="29" pos:column="20"/></name></name> <operator pos:line="29" pos:column="21">+<pos:position pos:line="29" pos:column="22"/></operator> <name><name pos:line="29" pos:column="23">lf<pos:position pos:line="29" pos:column="25"/></name><operator pos:line="29" pos:column="25">-&gt;<pos:position pos:line="29" pos:column="30"/></operator><name pos:line="29" pos:column="27">offset<pos:position pos:line="29" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="35">buf<pos:position pos:line="29" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="40">len<pos:position pos:line="29" pos:column="43"/></name></expr></argument>)<pos:position pos:line="29" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="45"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="31" pos:column="5">lf<pos:position pos:line="31" pos:column="7"/></name><operator pos:line="31" pos:column="7">-&gt;<pos:position pos:line="31" pos:column="12"/></operator><name pos:line="31" pos:column="9">offset<pos:position pos:line="31" pos:column="15"/></name></name> <operator pos:line="31" pos:column="16">+=<pos:position pos:line="31" pos:column="18"/></operator> <name pos:line="31" pos:column="19">len<pos:position pos:line="31" pos:column="22"/></name></expr>;<pos:position pos:line="31" pos:column="23"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="33" pos:column="5">assert<pos:position pos:line="33" pos:column="11"/></name> <argument_list pos:line="33" pos:column="12">(<argument><expr><name><name pos:line="33" pos:column="13">lf<pos:position pos:line="33" pos:column="15"/></name><operator pos:line="33" pos:column="15">-&gt;<pos:position pos:line="33" pos:column="20"/></operator><name pos:line="33" pos:column="17">offset<pos:position pos:line="33" pos:column="23"/></name></name> <operator pos:line="33" pos:column="24">&gt;=<pos:position pos:line="33" pos:column="29"/></operator> <literal type="number" pos:line="33" pos:column="27">0<pos:position pos:line="33" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="30"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="35" pos:column="5">assert<pos:position pos:line="35" pos:column="11"/></name><argument_list pos:line="35" pos:column="11">(<argument><expr><operator pos:line="35" pos:column="12">(<pos:position pos:line="35" pos:column="13"/></operator><name pos:line="35" pos:column="13">size_t<pos:position pos:line="35" pos:column="19"/></name><operator pos:line="35" pos:column="19">)<pos:position pos:line="35" pos:column="20"/></operator><name><name pos:line="35" pos:column="20">lf<pos:position pos:line="35" pos:column="22"/></name><operator pos:line="35" pos:column="22">-&gt;<pos:position pos:line="35" pos:column="27"/></operator><name pos:line="35" pos:column="24">offset<pos:position pos:line="35" pos:column="30"/></name></name> <operator pos:line="35" pos:column="31">&lt;=<pos:position pos:line="35" pos:column="36"/></operator> <name><name pos:line="35" pos:column="34">lf<pos:position pos:line="35" pos:column="36"/></name><operator pos:line="35" pos:column="36">-&gt;<pos:position pos:line="35" pos:column="41"/></operator><name pos:line="35" pos:column="38">bufsz<pos:position pos:line="35" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="45"/></expr_stmt>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
