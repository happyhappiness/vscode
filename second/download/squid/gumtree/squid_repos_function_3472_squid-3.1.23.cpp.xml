<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3472_squid-3.1.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">ClientSocketContext<pos:position pos:line="1" pos:column="27"/></name> <modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier></type>
<name pos:line="2" pos:column="1">parseHttpRequest<pos:position pos:line="2" pos:column="17"/></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><name pos:line="2" pos:column="18">ConnStateData<pos:position pos:line="2" pos:column="31"/></name> <modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type><name pos:line="2" pos:column="33">conn<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="39">HttpParser<pos:position pos:line="2" pos:column="49"/></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="51">hp<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="55">HttpRequestMethod<pos:position pos:line="2" pos:column="72"/></name> <modifier pos:line="2" pos:column="73">*<pos:position pos:line="2" pos:column="74"/></modifier></type> <name pos:line="2" pos:column="75">method_p<pos:position pos:line="2" pos:column="83"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="85">HttpVersion<pos:position pos:line="2" pos:column="96"/></name> <modifier pos:line="2" pos:column="97">*<pos:position pos:line="2" pos:column="98"/></modifier></type><name pos:line="2" pos:column="98">http_ver<pos:position pos:line="2" pos:column="106"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="107"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">req_hdr<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><name pos:line="4" pos:column="21">NULL<pos:position pos:line="4" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">end<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">size_t<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">req_sz<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">ClientHttpRequest<pos:position pos:line="7" pos:column="22"/></name> <modifier pos:line="7" pos:column="23">*<pos:position pos:line="7" pos:column="24"/></modifier></type><name pos:line="7" pos:column="24">http<pos:position pos:line="7" pos:column="28"/></name></decl>;<pos:position pos:line="7" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">ClientSocketContext<pos:position pos:line="8" pos:column="24"/></name> <modifier pos:line="8" pos:column="25">*<pos:position pos:line="8" pos:column="26"/></modifier></type><name pos:line="8" pos:column="26">result<pos:position pos:line="8" pos:column="32"/></name></decl>;<pos:position pos:line="8" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">StoreIOBuffer<pos:position pos:line="9" pos:column="18"/></name></type> <name pos:line="9" pos:column="19">tempBuffer<pos:position pos:line="9" pos:column="29"/></name></decl>;<pos:position pos:line="9" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">r<pos:position pos:line="10" pos:column="10"/></name></decl>;<pos:position pos:line="10" pos:column="11"/></decl_stmt>

    <comment type="block" pos:line="12" pos:column="5">/* pre-set these values to make aborting simpler */</comment>
    <expr_stmt><expr><operator pos:line="13" pos:column="5">*<pos:position pos:line="13" pos:column="6"/></operator><name pos:line="13" pos:column="6">method_p<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">=<pos:position pos:line="13" pos:column="16"/></operator> <name pos:line="13" pos:column="17">METHOD_NONE<pos:position pos:line="13" pos:column="28"/></name></expr>;<pos:position pos:line="13" pos:column="29"/></expr_stmt>

    <comment type="block" pos:line="15" pos:column="5">/* NP: don't be tempted to move this down or remove again.
     * It's the only DDoS protection old-String has against long URL */</comment>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">( <expr><name><name pos:line="17" pos:column="10">hp<pos:position pos:line="17" pos:column="12"/></name><operator pos:line="17" pos:column="12">-&gt;<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="14">bufsiz<pos:position pos:line="17" pos:column="20"/></name></name> <operator pos:line="17" pos:column="21">&lt;=<pos:position pos:line="17" pos:column="26"/></operator> <literal type="number" pos:line="17" pos:column="24">0<pos:position pos:line="17" pos:column="25"/></literal></expr>)<pos:position pos:line="17" pos:column="26"/></condition><then pos:line="17" pos:column="26"> <block pos:line="17" pos:column="27">{
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">debugs<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><literal type="number" pos:line="18" pos:column="16">33<pos:position pos:line="18" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="20">5<pos:position pos:line="18" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="23">"Incomplete request, waiting for end of request line"<pos:position pos:line="18" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="78"/></expr_stmt>
        <return pos:line="19" pos:column="9">return <expr><name pos:line="19" pos:column="16">NULL<pos:position pos:line="19" pos:column="20"/></name></expr>;<pos:position pos:line="19" pos:column="21"/></return>
    }<pos:position pos:line="20" pos:column="6"/></block></then> <elseif pos:line="20" pos:column="7">else <if pos:line="20" pos:column="12">if <condition pos:line="20" pos:column="15">( <expr><operator pos:line="20" pos:column="17">(<pos:position pos:line="20" pos:column="18"/></operator><name pos:line="20" pos:column="18">size_t<pos:position pos:line="20" pos:column="24"/></name><operator pos:line="20" pos:column="24">)<pos:position pos:line="20" pos:column="25"/></operator><name><name pos:line="20" pos:column="25">hp<pos:position pos:line="20" pos:column="27"/></name><operator pos:line="20" pos:column="27">-&gt;<pos:position pos:line="20" pos:column="32"/></operator><name pos:line="20" pos:column="29">bufsiz<pos:position pos:line="20" pos:column="35"/></name></name> <operator pos:line="20" pos:column="36">&gt;=<pos:position pos:line="20" pos:column="41"/></operator> <name><name pos:line="20" pos:column="39">Config<pos:position pos:line="20" pos:column="45"/></name><operator pos:line="20" pos:column="45">.<pos:position pos:line="20" pos:column="46"/></operator><name pos:line="20" pos:column="46">maxRequestHeaderSize<pos:position pos:line="20" pos:column="66"/></name></name> <operator pos:line="20" pos:column="67">&amp;&amp;<pos:position pos:line="20" pos:column="77"/></operator> <call><name pos:line="20" pos:column="70">headersEnd<pos:position pos:line="20" pos:column="80"/></name><argument_list pos:line="20" pos:column="80">(<argument><expr><name><name pos:line="20" pos:column="81">hp<pos:position pos:line="20" pos:column="83"/></name><operator pos:line="20" pos:column="83">-&gt;<pos:position pos:line="20" pos:column="88"/></operator><name pos:line="20" pos:column="85">buf<pos:position pos:line="20" pos:column="88"/></name></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="90">Config<pos:position pos:line="20" pos:column="96"/></name><operator pos:line="20" pos:column="96">.<pos:position pos:line="20" pos:column="97"/></operator><name pos:line="20" pos:column="97">maxRequestHeaderSize<pos:position pos:line="20" pos:column="117"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="118"/></argument_list></call> <operator pos:line="20" pos:column="119">==<pos:position pos:line="20" pos:column="121"/></operator> <literal type="number" pos:line="20" pos:column="122">0<pos:position pos:line="20" pos:column="123"/></literal></expr>)<pos:position pos:line="20" pos:column="124"/></condition><then pos:line="20" pos:column="124"> <block pos:line="20" pos:column="125">{
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">debugs<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><literal type="number" pos:line="21" pos:column="16">33<pos:position pos:line="21" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="20">5<pos:position pos:line="21" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="23">"parseHttpRequest: Too large request"<pos:position pos:line="21" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="62"/></expr_stmt>
        <return pos:line="22" pos:column="9">return <expr><call><name pos:line="22" pos:column="16">parseHttpRequestAbort<pos:position pos:line="22" pos:column="37"/></name><argument_list pos:line="22" pos:column="37">(<argument><expr><name pos:line="22" pos:column="38">conn<pos:position pos:line="22" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="44">"error:request-too-large"<pos:position pos:line="22" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="71"/></return>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if></elseif></if>

    <comment type="block" pos:line="25" pos:column="5">/* Attempt to parse the first line; this'll define the method, url, version and header begin */</comment>
    <expr_stmt><expr><name pos:line="26" pos:column="5">r<pos:position pos:line="26" pos:column="6"/></name> <operator pos:line="26" pos:column="7">=<pos:position pos:line="26" pos:column="8"/></operator> <call><name pos:line="26" pos:column="9">HttpParserParseReqLine<pos:position pos:line="26" pos:column="31"/></name><argument_list pos:line="26" pos:column="31">(<argument><expr><name pos:line="26" pos:column="32">hp<pos:position pos:line="26" pos:column="34"/></name></expr></argument>)<pos:position pos:line="26" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="36"/></expr_stmt>

    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><name pos:line="28" pos:column="9">r<pos:position pos:line="28" pos:column="10"/></name> <operator pos:line="28" pos:column="11">==<pos:position pos:line="28" pos:column="13"/></operator> <literal type="number" pos:line="28" pos:column="14">0<pos:position pos:line="28" pos:column="15"/></literal></expr>)<pos:position pos:line="28" pos:column="16"/></condition><then pos:line="28" pos:column="16"> <block pos:line="28" pos:column="17">{
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">debugs<pos:position pos:line="29" pos:column="15"/></name><argument_list pos:line="29" pos:column="15">(<argument><expr><literal type="number" pos:line="29" pos:column="16">33<pos:position pos:line="29" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="20">5<pos:position pos:line="29" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="23">"Incomplete request, waiting for end of request line"<pos:position pos:line="29" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="78"/></expr_stmt>
        <return pos:line="30" pos:column="9">return <expr><name pos:line="30" pos:column="16">NULL<pos:position pos:line="30" pos:column="20"/></name></expr>;<pos:position pos:line="30" pos:column="21"/></return>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>

    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><name pos:line="33" pos:column="9">r<pos:position pos:line="33" pos:column="10"/></name> <operator pos:line="33" pos:column="11">==<pos:position pos:line="33" pos:column="13"/></operator> <operator pos:line="33" pos:column="14">-<pos:position pos:line="33" pos:column="15"/></operator><literal type="number" pos:line="33" pos:column="15">1<pos:position pos:line="33" pos:column="16"/></literal></expr>)<pos:position pos:line="33" pos:column="17"/></condition><then pos:line="33" pos:column="17"> <block pos:line="33" pos:column="18">{
        <return pos:line="34" pos:column="9">return <expr><call><name pos:line="34" pos:column="16">parseHttpRequestAbort<pos:position pos:line="34" pos:column="37"/></name><argument_list pos:line="34" pos:column="37">(<argument><expr><name pos:line="34" pos:column="38">conn<pos:position pos:line="34" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="44">"error:invalid-request"<pos:position pos:line="34" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="69"/></return>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="37" pos:column="5">/* Request line is valid here .. */</comment>
    <expr_stmt><expr><operator pos:line="38" pos:column="5">*<pos:position pos:line="38" pos:column="6"/></operator><name pos:line="38" pos:column="6">http_ver<pos:position pos:line="38" pos:column="14"/></name> <operator pos:line="38" pos:column="15">=<pos:position pos:line="38" pos:column="16"/></operator> <call><name pos:line="38" pos:column="17">HttpVersion<pos:position pos:line="38" pos:column="28"/></name><argument_list pos:line="38" pos:column="28">(<argument><expr><name><name pos:line="38" pos:column="29">hp<pos:position pos:line="38" pos:column="31"/></name><operator pos:line="38" pos:column="31">-&gt;<pos:position pos:line="38" pos:column="36"/></operator><name pos:line="38" pos:column="33">v_maj<pos:position pos:line="38" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="40">hp<pos:position pos:line="38" pos:column="42"/></name><operator pos:line="38" pos:column="42">-&gt;<pos:position pos:line="38" pos:column="47"/></operator><name pos:line="38" pos:column="44">v_min<pos:position pos:line="38" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="51"/></expr_stmt>

    <comment type="block" pos:line="40" pos:column="5">/* This call scans the entire request, not just the headers */</comment>
    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><name><name pos:line="41" pos:column="9">hp<pos:position pos:line="41" pos:column="11"/></name><operator pos:line="41" pos:column="11">-&gt;<pos:position pos:line="41" pos:column="16"/></operator><name pos:line="41" pos:column="13">v_maj<pos:position pos:line="41" pos:column="18"/></name></name> <operator pos:line="41" pos:column="19">&gt;<pos:position pos:line="41" pos:column="23"/></operator> <literal type="number" pos:line="41" pos:column="21">0<pos:position pos:line="41" pos:column="22"/></literal></expr>)<pos:position pos:line="41" pos:column="23"/></condition><then pos:line="41" pos:column="23"> <block pos:line="41" pos:column="24">{
        <if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><operator pos:line="42" pos:column="13">(<pos:position pos:line="42" pos:column="14"/></operator><name pos:line="42" pos:column="14">req_sz<pos:position pos:line="42" pos:column="20"/></name> <operator pos:line="42" pos:column="21">=<pos:position pos:line="42" pos:column="22"/></operator> <call><name pos:line="42" pos:column="23">headersEnd<pos:position pos:line="42" pos:column="33"/></name><argument_list pos:line="42" pos:column="33">(<argument><expr><name><name pos:line="42" pos:column="34">hp<pos:position pos:line="42" pos:column="36"/></name><operator pos:line="42" pos:column="36">-&gt;<pos:position pos:line="42" pos:column="41"/></operator><name pos:line="42" pos:column="38">buf<pos:position pos:line="42" pos:column="41"/></name></name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="43">hp<pos:position pos:line="42" pos:column="45"/></name><operator pos:line="42" pos:column="45">-&gt;<pos:position pos:line="42" pos:column="50"/></operator><name pos:line="42" pos:column="47">bufsiz<pos:position pos:line="42" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="54"/></argument_list></call><operator pos:line="42" pos:column="54">)<pos:position pos:line="42" pos:column="55"/></operator> <operator pos:line="42" pos:column="56">==<pos:position pos:line="42" pos:column="58"/></operator> <literal type="number" pos:line="42" pos:column="59">0<pos:position pos:line="42" pos:column="60"/></literal></expr>)<pos:position pos:line="42" pos:column="61"/></condition><then pos:line="42" pos:column="61"> <block pos:line="42" pos:column="62">{
            <expr_stmt><expr><call><name pos:line="43" pos:column="13">debugs<pos:position pos:line="43" pos:column="19"/></name><argument_list pos:line="43" pos:column="19">(<argument><expr><literal type="number" pos:line="43" pos:column="20">33<pos:position pos:line="43" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="24">5<pos:position pos:line="43" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="27">"Incomplete request, waiting for end of headers"<pos:position pos:line="43" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="77"/></expr_stmt>
            <return pos:line="44" pos:column="13">return <expr><name pos:line="44" pos:column="20">NULL<pos:position pos:line="44" pos:column="24"/></name></expr>;<pos:position pos:line="44" pos:column="25"/></return>
        }<pos:position pos:line="45" pos:column="10"/></block></then></if>
    }<pos:position pos:line="46" pos:column="6"/></block></then> <else pos:line="46" pos:column="7">else <block pos:line="46" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="47" pos:column="9">debugs<pos:position pos:line="47" pos:column="15"/></name><argument_list pos:line="47" pos:column="15">(<argument><expr><literal type="number" pos:line="47" pos:column="16">33<pos:position pos:line="47" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="20">3<pos:position pos:line="47" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="23">"parseHttpRequest: Missing HTTP identifier"<pos:position pos:line="47" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><name pos:line="48" pos:column="9">req_sz<pos:position pos:line="48" pos:column="15"/></name> <operator pos:line="48" pos:column="16">=<pos:position pos:line="48" pos:column="17"/></operator> <call><name pos:line="48" pos:column="18">HttpParserReqSz<pos:position pos:line="48" pos:column="33"/></name><argument_list pos:line="48" pos:column="33">(<argument><expr><name pos:line="48" pos:column="34">hp<pos:position pos:line="48" pos:column="36"/></name></expr></argument>)<pos:position pos:line="48" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="49" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="51" pos:column="5">/* We know the whole request is in hp-&gt;buf now */</comment>

    <expr_stmt><expr><call><name pos:line="53" pos:column="5">assert<pos:position pos:line="53" pos:column="11"/></name><argument_list pos:line="53" pos:column="11">(<argument><expr><name pos:line="53" pos:column="12">req_sz<pos:position pos:line="53" pos:column="18"/></name> <operator pos:line="53" pos:column="19">&lt;=<pos:position pos:line="53" pos:column="24"/></operator> <operator pos:line="53" pos:column="22">(<pos:position pos:line="53" pos:column="23"/></operator><name pos:line="53" pos:column="23">size_t<pos:position pos:line="53" pos:column="29"/></name><operator pos:line="53" pos:column="29">)<pos:position pos:line="53" pos:column="30"/></operator> <name><name pos:line="53" pos:column="31">hp<pos:position pos:line="53" pos:column="33"/></name><operator pos:line="53" pos:column="33">-&gt;<pos:position pos:line="53" pos:column="38"/></operator><name pos:line="53" pos:column="35">bufsiz<pos:position pos:line="53" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="43"/></expr_stmt>

    <comment type="block" pos:line="55" pos:column="5">/* Will the following be true with HTTP/0.9 requests? probably not .. */</comment>
    <comment type="block" pos:line="56" pos:column="5">/* So the rest of the code will need to deal with '0'-byte headers (ie, none, so don't try parsing em) */</comment>
    <expr_stmt><expr><call><name pos:line="57" pos:column="5">assert<pos:position pos:line="57" pos:column="11"/></name><argument_list pos:line="57" pos:column="11">(<argument><expr><name pos:line="57" pos:column="12">req_sz<pos:position pos:line="57" pos:column="18"/></name> <operator pos:line="57" pos:column="19">&gt;<pos:position pos:line="57" pos:column="23"/></operator> <literal type="number" pos:line="57" pos:column="21">0<pos:position pos:line="57" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="24"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="59" pos:column="5">hp<pos:position pos:line="59" pos:column="7"/></name><operator pos:line="59" pos:column="7">-&gt;<pos:position pos:line="59" pos:column="12"/></operator><name pos:line="59" pos:column="9">hdr_end<pos:position pos:line="59" pos:column="16"/></name></name> <operator pos:line="59" pos:column="17">=<pos:position pos:line="59" pos:column="18"/></operator> <name pos:line="59" pos:column="19">req_sz<pos:position pos:line="59" pos:column="25"/></name> <operator pos:line="59" pos:column="26">-<pos:position pos:line="59" pos:column="27"/></operator> <literal type="number" pos:line="59" pos:column="28">1<pos:position pos:line="59" pos:column="29"/></literal></expr>;<pos:position pos:line="59" pos:column="30"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="61" pos:column="5">hp<pos:position pos:line="61" pos:column="7"/></name><operator pos:line="61" pos:column="7">-&gt;<pos:position pos:line="61" pos:column="12"/></operator><name pos:line="61" pos:column="9">hdr_start<pos:position pos:line="61" pos:column="18"/></name></name> <operator pos:line="61" pos:column="19">=<pos:position pos:line="61" pos:column="20"/></operator> <name><name pos:line="61" pos:column="21">hp<pos:position pos:line="61" pos:column="23"/></name><operator pos:line="61" pos:column="23">-&gt;<pos:position pos:line="61" pos:column="28"/></operator><name pos:line="61" pos:column="25">req_end<pos:position pos:line="61" pos:column="32"/></name></name> <operator pos:line="61" pos:column="33">+<pos:position pos:line="61" pos:column="34"/></operator> <literal type="number" pos:line="61" pos:column="35">1<pos:position pos:line="61" pos:column="36"/></literal></expr>;<pos:position pos:line="61" pos:column="37"/></expr_stmt>

    <comment type="block" pos:line="63" pos:column="5">/* Enforce max_request_size */</comment>
    <if pos:line="64" pos:column="5">if <condition pos:line="64" pos:column="8">(<expr><name pos:line="64" pos:column="9">req_sz<pos:position pos:line="64" pos:column="15"/></name> <operator pos:line="64" pos:column="16">&gt;=<pos:position pos:line="64" pos:column="21"/></operator> <name><name pos:line="64" pos:column="19">Config<pos:position pos:line="64" pos:column="25"/></name><operator pos:line="64" pos:column="25">.<pos:position pos:line="64" pos:column="26"/></operator><name pos:line="64" pos:column="26">maxRequestHeaderSize<pos:position pos:line="64" pos:column="46"/></name></name></expr>)<pos:position pos:line="64" pos:column="47"/></condition><then pos:line="64" pos:column="47"> <block pos:line="64" pos:column="48">{
        <expr_stmt><expr><call><name pos:line="65" pos:column="9">debugs<pos:position pos:line="65" pos:column="15"/></name><argument_list pos:line="65" pos:column="15">(<argument><expr><literal type="number" pos:line="65" pos:column="16">33<pos:position pos:line="65" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="65" pos:column="20">5<pos:position pos:line="65" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="23">"parseHttpRequest: Too large request"<pos:position pos:line="65" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="62"/></expr_stmt>
        <return pos:line="66" pos:column="9">return <expr><call><name pos:line="66" pos:column="16">parseHttpRequestAbort<pos:position pos:line="66" pos:column="37"/></name><argument_list pos:line="66" pos:column="37">(<argument><expr><name pos:line="66" pos:column="38">conn<pos:position pos:line="66" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="44">"error:request-too-large"<pos:position pos:line="66" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="71"/></return>
    }<pos:position pos:line="67" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="69" pos:column="5">/* Set method_p */</comment>
    <expr_stmt><expr><operator pos:line="70" pos:column="5">*<pos:position pos:line="70" pos:column="6"/></operator><name pos:line="70" pos:column="6">method_p<pos:position pos:line="70" pos:column="14"/></name> <operator pos:line="70" pos:column="15">=<pos:position pos:line="70" pos:column="16"/></operator> <call><name pos:line="70" pos:column="17">HttpRequestMethod<pos:position pos:line="70" pos:column="34"/></name><argument_list pos:line="70" pos:column="34">(<argument><expr><operator pos:line="70" pos:column="35">&amp;<pos:position pos:line="70" pos:column="40"/></operator><name><name pos:line="70" pos:column="36">hp<pos:position pos:line="70" pos:column="38"/></name><operator pos:line="70" pos:column="38">-&gt;<pos:position pos:line="70" pos:column="43"/></operator><name pos:line="70" pos:column="40">buf<pos:position pos:line="70" pos:column="43"/></name><index pos:line="70" pos:column="43">[<expr><name><name pos:line="70" pos:column="44">hp<pos:position pos:line="70" pos:column="46"/></name><operator pos:line="70" pos:column="46">-&gt;<pos:position pos:line="70" pos:column="51"/></operator><name pos:line="70" pos:column="48">m_start<pos:position pos:line="70" pos:column="55"/></name></name></expr>]<pos:position pos:line="70" pos:column="56"/></index></name></expr></argument>, <argument><expr><operator pos:line="70" pos:column="58">&amp;<pos:position pos:line="70" pos:column="63"/></operator><name><name pos:line="70" pos:column="59">hp<pos:position pos:line="70" pos:column="61"/></name><operator pos:line="70" pos:column="61">-&gt;<pos:position pos:line="70" pos:column="66"/></operator><name pos:line="70" pos:column="63">buf<pos:position pos:line="70" pos:column="66"/></name><index pos:line="70" pos:column="66">[<expr><name><name pos:line="70" pos:column="67">hp<pos:position pos:line="70" pos:column="69"/></name><operator pos:line="70" pos:column="69">-&gt;<pos:position pos:line="70" pos:column="74"/></operator><name pos:line="70" pos:column="71">m_end<pos:position pos:line="70" pos:column="76"/></name></name></expr>]<pos:position pos:line="70" pos:column="77"/></index></name><operator pos:line="70" pos:column="77">+<pos:position pos:line="70" pos:column="78"/></operator><literal type="number" pos:line="70" pos:column="78">1<pos:position pos:line="70" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="81"/></expr_stmt>

    <comment type="block" pos:line="72" pos:column="5">/* deny CONNECT via accelerated ports */</comment>
    <if pos:line="73" pos:column="5">if <condition pos:line="73" pos:column="8">(<expr><operator pos:line="73" pos:column="9">*<pos:position pos:line="73" pos:column="10"/></operator><name pos:line="73" pos:column="10">method_p<pos:position pos:line="73" pos:column="18"/></name> <operator pos:line="73" pos:column="19">==<pos:position pos:line="73" pos:column="21"/></operator> <name pos:line="73" pos:column="22">METHOD_CONNECT<pos:position pos:line="73" pos:column="36"/></name> <operator pos:line="73" pos:column="37">&amp;&amp;<pos:position pos:line="73" pos:column="47"/></operator> <name pos:line="73" pos:column="40">conn<pos:position pos:line="73" pos:column="44"/></name> <operator pos:line="73" pos:column="45">&amp;&amp;<pos:position pos:line="73" pos:column="55"/></operator> <name><name pos:line="73" pos:column="48">conn<pos:position pos:line="73" pos:column="52"/></name><operator pos:line="73" pos:column="52">-&gt;<pos:position pos:line="73" pos:column="57"/></operator><name pos:line="73" pos:column="54">port<pos:position pos:line="73" pos:column="58"/></name></name> <operator pos:line="73" pos:column="59">&amp;&amp;<pos:position pos:line="73" pos:column="69"/></operator> <name><name pos:line="73" pos:column="62">conn<pos:position pos:line="73" pos:column="66"/></name><operator pos:line="73" pos:column="66">-&gt;<pos:position pos:line="73" pos:column="71"/></operator><name pos:line="73" pos:column="68">port<pos:position pos:line="73" pos:column="72"/></name><operator pos:line="73" pos:column="72">-&gt;<pos:position pos:line="73" pos:column="77"/></operator><name pos:line="73" pos:column="74">accel<pos:position pos:line="73" pos:column="79"/></name></name></expr>)<pos:position pos:line="73" pos:column="80"/></condition><then pos:line="73" pos:column="80"> <block pos:line="73" pos:column="81">{
        <expr_stmt><expr><call><name pos:line="74" pos:column="9">debugs<pos:position pos:line="74" pos:column="15"/></name><argument_list pos:line="74" pos:column="15">(<argument><expr><literal type="number" pos:line="74" pos:column="16">33<pos:position pos:line="74" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="74" pos:column="20">DBG_IMPORTANT<pos:position pos:line="74" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="74" pos:column="35">"WARNING: CONNECT method received on "<pos:position pos:line="74" pos:column="73"/></literal> <operator pos:line="74" pos:column="74">&lt;&lt;<pos:position pos:line="74" pos:column="82"/></operator> <name><name pos:line="74" pos:column="77">conn<pos:position pos:line="74" pos:column="81"/></name><operator pos:line="74" pos:column="81">-&gt;<pos:position pos:line="74" pos:column="86"/></operator><name pos:line="74" pos:column="83">port<pos:position pos:line="74" pos:column="87"/></name><operator pos:line="74" pos:column="87">-&gt;<pos:position pos:line="74" pos:column="92"/></operator><name pos:line="74" pos:column="89">protocol<pos:position pos:line="74" pos:column="97"/></name></name> <operator pos:line="74" pos:column="98">&lt;&lt;<pos:position pos:line="74" pos:column="106"/></operator> <literal type="string" pos:line="74" pos:column="101">" Accelerator port "<pos:position pos:line="74" pos:column="121"/></literal> <operator pos:line="74" pos:column="122">&lt;&lt;<pos:position pos:line="74" pos:column="130"/></operator> <call><name><name pos:line="74" pos:column="125">conn<pos:position pos:line="74" pos:column="129"/></name><operator pos:line="74" pos:column="129">-&gt;<pos:position pos:line="74" pos:column="134"/></operator><name pos:line="74" pos:column="131">port<pos:position pos:line="74" pos:column="135"/></name><operator pos:line="74" pos:column="135">-&gt;<pos:position pos:line="74" pos:column="140"/></operator><name pos:line="74" pos:column="137">s<pos:position pos:line="74" pos:column="138"/></name><operator pos:line="74" pos:column="138">.<pos:position pos:line="74" pos:column="139"/></operator><name pos:line="74" pos:column="139">GetPort<pos:position pos:line="74" pos:column="146"/></name></name><argument_list pos:line="74" pos:column="146">()<pos:position pos:line="74" pos:column="148"/></argument_list></call></expr></argument> )<pos:position pos:line="74" pos:column="150"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="151"/></expr_stmt>
        <comment type="block" pos:line="75" pos:column="9">/* XXX need a way to say "this many character length string" */</comment>
        <expr_stmt><expr><call><name pos:line="76" pos:column="9">debugs<pos:position pos:line="76" pos:column="15"/></name><argument_list pos:line="76" pos:column="15">(<argument><expr><literal type="number" pos:line="76" pos:column="16">33<pos:position pos:line="76" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="76" pos:column="20">DBG_IMPORTANT<pos:position pos:line="76" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="35">"WARNING: for request: "<pos:position pos:line="76" pos:column="59"/></literal> <operator pos:line="76" pos:column="60">&lt;&lt;<pos:position pos:line="76" pos:column="68"/></operator> <name><name pos:line="76" pos:column="63">hp<pos:position pos:line="76" pos:column="65"/></name><operator pos:line="76" pos:column="65">-&gt;<pos:position pos:line="76" pos:column="70"/></operator><name pos:line="76" pos:column="67">buf<pos:position pos:line="76" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="76" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="72"/></expr_stmt>
        <comment type="block" pos:line="77" pos:column="9">/* XXX need some way to set 405 status on the error reply */</comment>
        <return pos:line="78" pos:column="9">return <expr><call><name pos:line="78" pos:column="16">parseHttpRequestAbort<pos:position pos:line="78" pos:column="37"/></name><argument_list pos:line="78" pos:column="37">(<argument><expr><name pos:line="78" pos:column="38">conn<pos:position pos:line="78" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="78" pos:column="44">"error:method-not-allowed"<pos:position pos:line="78" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="78" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="72"/></return>
    }<pos:position pos:line="79" pos:column="6"/></block></then></if>

    <if pos:line="81" pos:column="5">if <condition pos:line="81" pos:column="8">(<expr><operator pos:line="81" pos:column="9">*<pos:position pos:line="81" pos:column="10"/></operator><name pos:line="81" pos:column="10">method_p<pos:position pos:line="81" pos:column="18"/></name> <operator pos:line="81" pos:column="19">==<pos:position pos:line="81" pos:column="21"/></operator> <name pos:line="81" pos:column="22">METHOD_NONE<pos:position pos:line="81" pos:column="33"/></name></expr>)<pos:position pos:line="81" pos:column="34"/></condition><then pos:line="81" pos:column="34"> <block pos:line="81" pos:column="35">{
        <comment type="block" pos:line="82" pos:column="9">/* XXX need a way to say "this many character length string" */</comment>
        <expr_stmt><expr><call><name pos:line="83" pos:column="9">debugs<pos:position pos:line="83" pos:column="15"/></name><argument_list pos:line="83" pos:column="15">(<argument><expr><literal type="number" pos:line="83" pos:column="16">33<pos:position pos:line="83" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="83" pos:column="20">1<pos:position pos:line="83" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="83" pos:column="23">"clientParseRequestMethod: Unsupported method in request '"<pos:position pos:line="83" pos:column="82"/></literal> <operator pos:line="83" pos:column="83">&lt;&lt;<pos:position pos:line="83" pos:column="91"/></operator> <name><name pos:line="83" pos:column="86">hp<pos:position pos:line="83" pos:column="88"/></name><operator pos:line="83" pos:column="88">-&gt;<pos:position pos:line="83" pos:column="93"/></operator><name pos:line="83" pos:column="90">buf<pos:position pos:line="83" pos:column="93"/></name></name> <operator pos:line="83" pos:column="94">&lt;&lt;<pos:position pos:line="83" pos:column="102"/></operator> <literal type="string" pos:line="83" pos:column="97">"'"<pos:position pos:line="83" pos:column="100"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="101"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="102"/></expr_stmt>

        <comment type="block" pos:line="85" pos:column="9">/* XXX where's the method set for this error? */</comment>
        <return pos:line="86" pos:column="9">return <expr><call><name pos:line="86" pos:column="16">parseHttpRequestAbort<pos:position pos:line="86" pos:column="37"/></name><argument_list pos:line="86" pos:column="37">(<argument><expr><name pos:line="86" pos:column="38">conn<pos:position pos:line="86" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="86" pos:column="44">"error:unsupported-request-method"<pos:position pos:line="86" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="80"/></return>
    }<pos:position pos:line="87" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="89" pos:column="5">/*
     * Process headers after request line
     * TODO: Use httpRequestParse here.
     */</comment>
    <comment type="block" pos:line="93" pos:column="5">/* XXX this code should be modified to take a const char * later! */</comment>
    <expr_stmt><expr><name pos:line="94" pos:column="5">req_hdr<pos:position pos:line="94" pos:column="12"/></name> <operator pos:line="94" pos:column="13">=<pos:position pos:line="94" pos:column="14"/></operator> <operator pos:line="94" pos:column="15">(<pos:position pos:line="94" pos:column="16"/></operator><name pos:line="94" pos:column="16">char<pos:position pos:line="94" pos:column="20"/></name> <operator pos:line="94" pos:column="21">*<pos:position pos:line="94" pos:column="22"/></operator><operator pos:line="94" pos:column="22">)<pos:position pos:line="94" pos:column="23"/></operator> <name><name pos:line="94" pos:column="24">hp<pos:position pos:line="94" pos:column="26"/></name><operator pos:line="94" pos:column="26">-&gt;<pos:position pos:line="94" pos:column="31"/></operator><name pos:line="94" pos:column="28">buf<pos:position pos:line="94" pos:column="31"/></name></name> <operator pos:line="94" pos:column="32">+<pos:position pos:line="94" pos:column="33"/></operator> <name><name pos:line="94" pos:column="34">hp<pos:position pos:line="94" pos:column="36"/></name><operator pos:line="94" pos:column="36">-&gt;<pos:position pos:line="94" pos:column="41"/></operator><name pos:line="94" pos:column="38">req_end<pos:position pos:line="94" pos:column="45"/></name></name> <operator pos:line="94" pos:column="46">+<pos:position pos:line="94" pos:column="47"/></operator> <literal type="number" pos:line="94" pos:column="48">1<pos:position pos:line="94" pos:column="49"/></literal></expr>;<pos:position pos:line="94" pos:column="50"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="96" pos:column="5">debugs<pos:position pos:line="96" pos:column="11"/></name><argument_list pos:line="96" pos:column="11">(<argument><expr><literal type="number" pos:line="96" pos:column="12">33<pos:position pos:line="96" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="96" pos:column="16">3<pos:position pos:line="96" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="96" pos:column="19">"parseHttpRequest: req_hdr = {"<pos:position pos:line="96" pos:column="50"/></literal> <operator pos:line="96" pos:column="51">&lt;&lt;<pos:position pos:line="96" pos:column="59"/></operator> <name pos:line="96" pos:column="54">req_hdr<pos:position pos:line="96" pos:column="61"/></name> <operator pos:line="96" pos:column="62">&lt;&lt;<pos:position pos:line="96" pos:column="70"/></operator> <literal type="string" pos:line="96" pos:column="65">"}"<pos:position pos:line="96" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="96" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="70"/></expr_stmt>

    <expr_stmt><expr><name pos:line="98" pos:column="5">end<pos:position pos:line="98" pos:column="8"/></name> <operator pos:line="98" pos:column="9">=<pos:position pos:line="98" pos:column="10"/></operator> <operator pos:line="98" pos:column="11">(<pos:position pos:line="98" pos:column="12"/></operator><name pos:line="98" pos:column="12">char<pos:position pos:line="98" pos:column="16"/></name> <operator pos:line="98" pos:column="17">*<pos:position pos:line="98" pos:column="18"/></operator><operator pos:line="98" pos:column="18">)<pos:position pos:line="98" pos:column="19"/></operator> <name><name pos:line="98" pos:column="20">hp<pos:position pos:line="98" pos:column="22"/></name><operator pos:line="98" pos:column="22">-&gt;<pos:position pos:line="98" pos:column="27"/></operator><name pos:line="98" pos:column="24">buf<pos:position pos:line="98" pos:column="27"/></name></name> <operator pos:line="98" pos:column="28">+<pos:position pos:line="98" pos:column="29"/></operator> <name><name pos:line="98" pos:column="30">hp<pos:position pos:line="98" pos:column="32"/></name><operator pos:line="98" pos:column="32">-&gt;<pos:position pos:line="98" pos:column="37"/></operator><name pos:line="98" pos:column="34">hdr_end<pos:position pos:line="98" pos:column="41"/></name></name></expr>;<pos:position pos:line="98" pos:column="42"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="100" pos:column="5">debugs<pos:position pos:line="100" pos:column="11"/></name><argument_list pos:line="100" pos:column="11">(<argument><expr><literal type="number" pos:line="100" pos:column="12">33<pos:position pos:line="100" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="100" pos:column="16">3<pos:position pos:line="100" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="100" pos:column="19">"parseHttpRequest: end = {"<pos:position pos:line="100" pos:column="46"/></literal> <operator pos:line="100" pos:column="47">&lt;&lt;<pos:position pos:line="100" pos:column="55"/></operator> <name pos:line="100" pos:column="50">end<pos:position pos:line="100" pos:column="53"/></name> <operator pos:line="100" pos:column="54">&lt;&lt;<pos:position pos:line="100" pos:column="62"/></operator> <literal type="string" pos:line="100" pos:column="57">"}"<pos:position pos:line="100" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="100" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="62"/></expr_stmt>

    <comment type="block" pos:line="102" pos:column="5">/*
     * Check that the headers don't have double-CR.
     * NP: strnstr is required so we don't search any possible binary body blobs.
     */</comment>
    <if pos:line="106" pos:column="5">if <condition pos:line="106" pos:column="8">( <expr><call><name pos:line="106" pos:column="10">squid_strnstr<pos:position pos:line="106" pos:column="23"/></name><argument_list pos:line="106" pos:column="23">(<argument><expr><name pos:line="106" pos:column="24">req_hdr<pos:position pos:line="106" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="106" pos:column="33">"\r\r\n"<pos:position pos:line="106" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="106" pos:column="43">req_sz<pos:position pos:line="106" pos:column="49"/></name></expr></argument>)<pos:position pos:line="106" pos:column="50"/></argument_list></call></expr> )<pos:position pos:line="106" pos:column="52"/></condition><then pos:line="106" pos:column="52"> <block pos:line="106" pos:column="53">{
        <expr_stmt><expr><call><name pos:line="107" pos:column="9">debugs<pos:position pos:line="107" pos:column="15"/></name><argument_list pos:line="107" pos:column="15">(<argument><expr><literal type="number" pos:line="107" pos:column="16">33<pos:position pos:line="107" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="107" pos:column="20">1<pos:position pos:line="107" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="107" pos:column="23">"WARNING: suspicious HTTP request contains double CR"<pos:position pos:line="107" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="107" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="78"/></expr_stmt>
        <return pos:line="108" pos:column="9">return <expr><call><name pos:line="108" pos:column="16">parseHttpRequestAbort<pos:position pos:line="108" pos:column="37"/></name><argument_list pos:line="108" pos:column="37">(<argument><expr><name pos:line="108" pos:column="38">conn<pos:position pos:line="108" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="108" pos:column="44">"error:double-CR"<pos:position pos:line="108" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="108" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="63"/></return>
    }<pos:position pos:line="109" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="111" pos:column="5">debugs<pos:position pos:line="111" pos:column="11"/></name><argument_list pos:line="111" pos:column="11">(<argument><expr><literal type="number" pos:line="111" pos:column="12">33<pos:position pos:line="111" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="111" pos:column="16">3<pos:position pos:line="111" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="111" pos:column="19">"parseHttpRequest: prefix_sz = "<pos:position pos:line="111" pos:column="51"/></literal> <operator pos:line="111" pos:column="52">&lt;&lt;<pos:position pos:line="111" pos:column="60"/></operator>
           <operator pos:line="112" pos:column="12">(<pos:position pos:line="112" pos:column="13"/></operator><name pos:line="112" pos:column="13">int<pos:position pos:line="112" pos:column="16"/></name><operator pos:line="112" pos:column="16">)<pos:position pos:line="112" pos:column="17"/></operator> <call><name pos:line="112" pos:column="18">HttpParserRequestLen<pos:position pos:line="112" pos:column="38"/></name><argument_list pos:line="112" pos:column="38">(<argument><expr><name pos:line="112" pos:column="39">hp<pos:position pos:line="112" pos:column="41"/></name></expr></argument>)<pos:position pos:line="112" pos:column="42"/></argument_list></call> <operator pos:line="112" pos:column="43">&lt;&lt;<pos:position pos:line="112" pos:column="51"/></operator> <literal type="string" pos:line="112" pos:column="46">", req_line_sz = "<pos:position pos:line="112" pos:column="64"/></literal> <operator pos:line="112" pos:column="65">&lt;&lt;<pos:position pos:line="112" pos:column="73"/></operator>
           <call><name pos:line="113" pos:column="12">HttpParserReqSz<pos:position pos:line="113" pos:column="27"/></name><argument_list pos:line="113" pos:column="27">(<argument><expr><name pos:line="113" pos:column="28">hp<pos:position pos:line="113" pos:column="30"/></name></expr></argument>)<pos:position pos:line="113" pos:column="31"/></argument_list></call></expr></argument>)<pos:position pos:line="113" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="33"/></expr_stmt>

    <comment type="line" pos:line="115" pos:column="5">// Temporary hack: We might receive a chunked body from a broken HTTP/1.1</comment>
    <comment type="line" pos:line="116" pos:column="5">// client that sends chunked requests to HTTP/1.0 Squid. If the request</comment>
    <comment type="line" pos:line="117" pos:column="5">// might have a chunked body, parse the headers early to look for the</comment>
    <comment type="line" pos:line="118" pos:column="5">// "Transfer-Encoding: chunked" header. If we find it, wait until the</comment>
    <comment type="line" pos:line="119" pos:column="5">// entire body is available so that we can set the content length and</comment>
    <comment type="line" pos:line="120" pos:column="5">// forward the request without chunks. The primary reason for this is</comment>
    <comment type="line" pos:line="121" pos:column="5">// to avoid forwarding a chunked request because the server side lacks</comment>
    <comment type="line" pos:line="122" pos:column="5">// logic to determine when it is valid to do so.</comment>
    <comment type="line" pos:line="123" pos:column="5">// FUTURE_CODE_TO_SUPPORT_CHUNKED_REQUESTS below will replace this hack.</comment>
    <if pos:line="124" pos:column="5">if <condition pos:line="124" pos:column="8">(<expr><name><name pos:line="124" pos:column="9">hp<pos:position pos:line="124" pos:column="11"/></name><operator pos:line="124" pos:column="11">-&gt;<pos:position pos:line="124" pos:column="16"/></operator><name pos:line="124" pos:column="13">v_min<pos:position pos:line="124" pos:column="18"/></name></name> <operator pos:line="124" pos:column="19">==<pos:position pos:line="124" pos:column="21"/></operator> <literal type="number" pos:line="124" pos:column="22">1<pos:position pos:line="124" pos:column="23"/></literal> <operator pos:line="124" pos:column="24">&amp;&amp;<pos:position pos:line="124" pos:column="34"/></operator> <name><name pos:line="124" pos:column="27">hp<pos:position pos:line="124" pos:column="29"/></name><operator pos:line="124" pos:column="29">-&gt;<pos:position pos:line="124" pos:column="34"/></operator><name pos:line="124" pos:column="31">v_maj<pos:position pos:line="124" pos:column="36"/></name></name> <operator pos:line="124" pos:column="37">==<pos:position pos:line="124" pos:column="39"/></operator> <literal type="number" pos:line="124" pos:column="40">1<pos:position pos:line="124" pos:column="41"/></literal> <operator pos:line="124" pos:column="42">&amp;&amp;<pos:position pos:line="124" pos:column="52"/></operator> <comment type="line" pos:line="124" pos:column="45">// broken client, may send chunks</comment>
            <name><name pos:line="125" pos:column="13">Config<pos:position pos:line="125" pos:column="19"/></name><operator pos:line="125" pos:column="19">.<pos:position pos:line="125" pos:column="20"/></operator><name pos:line="125" pos:column="20">maxChunkedRequestBodySize<pos:position pos:line="125" pos:column="45"/></name></name> <operator pos:line="125" pos:column="46">&gt;<pos:position pos:line="125" pos:column="50"/></operator> <literal type="number" pos:line="125" pos:column="48">0<pos:position pos:line="125" pos:column="49"/></literal> <operator pos:line="125" pos:column="50">&amp;&amp;<pos:position pos:line="125" pos:column="60"/></operator> <comment type="line" pos:line="125" pos:column="53">// configured to dechunk</comment>
            <operator pos:line="126" pos:column="13">(<pos:position pos:line="126" pos:column="14"/></operator><operator pos:line="126" pos:column="14">*<pos:position pos:line="126" pos:column="15"/></operator><name pos:line="126" pos:column="15">method_p<pos:position pos:line="126" pos:column="23"/></name> <operator pos:line="126" pos:column="24">==<pos:position pos:line="126" pos:column="26"/></operator> <name pos:line="126" pos:column="27">METHOD_PUT<pos:position pos:line="126" pos:column="37"/></name> <operator pos:line="126" pos:column="38">||<pos:position pos:line="126" pos:column="40"/></operator> <operator pos:line="126" pos:column="41">*<pos:position pos:line="126" pos:column="42"/></operator><name pos:line="126" pos:column="42">method_p<pos:position pos:line="126" pos:column="50"/></name> <operator pos:line="126" pos:column="51">==<pos:position pos:line="126" pos:column="53"/></operator> <name pos:line="126" pos:column="54">METHOD_POST<pos:position pos:line="126" pos:column="65"/></name><operator pos:line="126" pos:column="65">)<pos:position pos:line="126" pos:column="66"/></operator></expr>)<pos:position pos:line="126" pos:column="67"/></condition><then pos:line="126" pos:column="67"> <block pos:line="126" pos:column="68">{

        <comment type="line" pos:line="128" pos:column="9">// check only once per request because isChunkedRequest is expensive</comment>
        <if pos:line="129" pos:column="9">if <condition pos:line="129" pos:column="12">(<expr><name><name pos:line="129" pos:column="13">conn<pos:position pos:line="129" pos:column="17"/></name><operator pos:line="129" pos:column="17">-&gt;<pos:position pos:line="129" pos:column="22"/></operator><name pos:line="129" pos:column="19">in<pos:position pos:line="129" pos:column="21"/></name><operator pos:line="129" pos:column="21">.<pos:position pos:line="129" pos:column="22"/></operator><name pos:line="129" pos:column="22">dechunkingState<pos:position pos:line="129" pos:column="37"/></name></name> <operator pos:line="129" pos:column="38">==<pos:position pos:line="129" pos:column="40"/></operator> <name><name pos:line="129" pos:column="41">ConnStateData<pos:position pos:line="129" pos:column="54"/></name><operator pos:line="129" pos:column="54">::<pos:position pos:line="129" pos:column="56"/></operator><name pos:line="129" pos:column="56">chunkUnknown<pos:position pos:line="129" pos:column="68"/></name></name></expr>)<pos:position pos:line="129" pos:column="69"/></condition><then pos:line="129" pos:column="69"> <block pos:line="129" pos:column="70">{
            <if pos:line="130" pos:column="13">if <condition pos:line="130" pos:column="16">(<expr><call><name pos:line="130" pos:column="17">isChunkedRequest<pos:position pos:line="130" pos:column="33"/></name><argument_list pos:line="130" pos:column="33">(<argument><expr><name pos:line="130" pos:column="34">hp<pos:position pos:line="130" pos:column="36"/></name></expr></argument>)<pos:position pos:line="130" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="130" pos:column="38"/></condition><then pos:line="130" pos:column="38">
                <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="131" pos:column="17">conn<pos:position pos:line="131" pos:column="21"/></name><operator pos:line="131" pos:column="21">-&gt;<pos:position pos:line="131" pos:column="26"/></operator><name pos:line="131" pos:column="23">startDechunkingRequest<pos:position pos:line="131" pos:column="45"/></name></name><argument_list pos:line="131" pos:column="45">(<argument><expr><name pos:line="131" pos:column="46">hp<pos:position pos:line="131" pos:column="48"/></name></expr></argument>)<pos:position pos:line="131" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="50"/></expr_stmt></block></then>
            <else pos:line="132" pos:column="13">else
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="133" pos:column="17">conn<pos:position pos:line="133" pos:column="21"/></name><operator pos:line="133" pos:column="21">-&gt;<pos:position pos:line="133" pos:column="26"/></operator><name pos:line="133" pos:column="23">in<pos:position pos:line="133" pos:column="25"/></name><operator pos:line="133" pos:column="25">.<pos:position pos:line="133" pos:column="26"/></operator><name pos:line="133" pos:column="26">dechunkingState<pos:position pos:line="133" pos:column="41"/></name></name> <operator pos:line="133" pos:column="42">=<pos:position pos:line="133" pos:column="43"/></operator> <name><name pos:line="133" pos:column="44">ConnStateData<pos:position pos:line="133" pos:column="57"/></name><operator pos:line="133" pos:column="57">::<pos:position pos:line="133" pos:column="59"/></operator><name pos:line="133" pos:column="59">chunkNone<pos:position pos:line="133" pos:column="68"/></name></name></expr>;<pos:position pos:line="133" pos:column="69"/></expr_stmt></block></else></if>
        }<pos:position pos:line="134" pos:column="10"/></block></then></if>

        <if pos:line="136" pos:column="9">if <condition pos:line="136" pos:column="12">(<expr><name><name pos:line="136" pos:column="13">conn<pos:position pos:line="136" pos:column="17"/></name><operator pos:line="136" pos:column="17">-&gt;<pos:position pos:line="136" pos:column="22"/></operator><name pos:line="136" pos:column="19">in<pos:position pos:line="136" pos:column="21"/></name><operator pos:line="136" pos:column="21">.<pos:position pos:line="136" pos:column="22"/></operator><name pos:line="136" pos:column="22">dechunkingState<pos:position pos:line="136" pos:column="37"/></name></name> <operator pos:line="136" pos:column="38">==<pos:position pos:line="136" pos:column="40"/></operator> <name><name pos:line="136" pos:column="41">ConnStateData<pos:position pos:line="136" pos:column="54"/></name><operator pos:line="136" pos:column="54">::<pos:position pos:line="136" pos:column="56"/></operator><name pos:line="136" pos:column="56">chunkParsing<pos:position pos:line="136" pos:column="68"/></name></name></expr>)<pos:position pos:line="136" pos:column="69"/></condition><then pos:line="136" pos:column="69"> <block pos:line="136" pos:column="70">{
            <if pos:line="137" pos:column="13">if <condition pos:line="137" pos:column="16">(<expr><call><name><name pos:line="137" pos:column="17">conn<pos:position pos:line="137" pos:column="21"/></name><operator pos:line="137" pos:column="21">-&gt;<pos:position pos:line="137" pos:column="26"/></operator><name pos:line="137" pos:column="23">parseRequestChunks<pos:position pos:line="137" pos:column="41"/></name></name><argument_list pos:line="137" pos:column="41">(<argument><expr><name pos:line="137" pos:column="42">hp<pos:position pos:line="137" pos:column="44"/></name></expr></argument>)<pos:position pos:line="137" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="137" pos:column="46"/></condition><then pos:line="137" pos:column="46"> <comment type="line" pos:line="137" pos:column="47">// parses newly read chunks</comment>
                <block type="pseudo"><return pos:line="138" pos:column="17">return <expr><name pos:line="138" pos:column="24">NULL<pos:position pos:line="138" pos:column="28"/></name></expr>;<pos:position pos:line="138" pos:column="29"/></return></block></then></if> <comment type="line" pos:line="138" pos:column="30">// wait for more data</comment>
            <expr_stmt><expr><call><name pos:line="139" pos:column="13">debugs<pos:position pos:line="139" pos:column="19"/></name><argument_list pos:line="139" pos:column="19">(<argument><expr><literal type="number" pos:line="139" pos:column="20">33<pos:position pos:line="139" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="139" pos:column="24">5<pos:position pos:line="139" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="139" pos:column="27">HERE<pos:position pos:line="139" pos:column="31"/></name> <operator pos:line="139" pos:column="32">&lt;&lt;<pos:position pos:line="139" pos:column="40"/></operator> <literal type="string" pos:line="139" pos:column="35">"Got complete chunked request or err."<pos:position pos:line="139" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="139" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="75"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="140" pos:column="13">assert<pos:position pos:line="140" pos:column="19"/></name><argument_list pos:line="140" pos:column="19">(<argument><expr><name><name pos:line="140" pos:column="20">conn<pos:position pos:line="140" pos:column="24"/></name><operator pos:line="140" pos:column="24">-&gt;<pos:position pos:line="140" pos:column="29"/></operator><name pos:line="140" pos:column="26">in<pos:position pos:line="140" pos:column="28"/></name><operator pos:line="140" pos:column="28">.<pos:position pos:line="140" pos:column="29"/></operator><name pos:line="140" pos:column="29">dechunkingState<pos:position pos:line="140" pos:column="44"/></name></name> <operator pos:line="140" pos:column="45">!=<pos:position pos:line="140" pos:column="47"/></operator> <name><name pos:line="140" pos:column="48">ConnStateData<pos:position pos:line="140" pos:column="61"/></name><operator pos:line="140" pos:column="61">::<pos:position pos:line="140" pos:column="63"/></operator><name pos:line="140" pos:column="63">chunkParsing<pos:position pos:line="140" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="140" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="77"/></expr_stmt>
        }<pos:position pos:line="141" pos:column="10"/></block></then></if>
    }<pos:position pos:line="142" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="144" pos:column="5">/* Ok, all headers are received */</comment>
    <expr_stmt><expr><name pos:line="145" pos:column="5">http<pos:position pos:line="145" pos:column="9"/></name> <operator pos:line="145" pos:column="10">=<pos:position pos:line="145" pos:column="11"/></operator> <operator pos:line="145" pos:column="12">new<pos:position pos:line="145" pos:column="15"/></operator> <call><name pos:line="145" pos:column="16">ClientHttpRequest<pos:position pos:line="145" pos:column="33"/></name><argument_list pos:line="145" pos:column="33">(<argument><expr><name pos:line="145" pos:column="34">conn<pos:position pos:line="145" pos:column="38"/></name></expr></argument>)<pos:position pos:line="145" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="40"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="147" pos:column="5">http<pos:position pos:line="147" pos:column="9"/></name><operator pos:line="147" pos:column="9">-&gt;<pos:position pos:line="147" pos:column="14"/></operator><name pos:line="147" pos:column="11">req_sz<pos:position pos:line="147" pos:column="17"/></name></name> <operator pos:line="147" pos:column="18">=<pos:position pos:line="147" pos:column="19"/></operator> <call><name pos:line="147" pos:column="20">HttpParserRequestLen<pos:position pos:line="147" pos:column="40"/></name><argument_list pos:line="147" pos:column="40">(<argument><expr><name pos:line="147" pos:column="41">hp<pos:position pos:line="147" pos:column="43"/></name></expr></argument>)<pos:position pos:line="147" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><name pos:line="148" pos:column="5">result<pos:position pos:line="148" pos:column="11"/></name> <operator pos:line="148" pos:column="12">=<pos:position pos:line="148" pos:column="13"/></operator> <call><name pos:line="148" pos:column="14">ClientSocketContextNew<pos:position pos:line="148" pos:column="36"/></name><argument_list pos:line="148" pos:column="36">(<argument><expr><name pos:line="148" pos:column="37">http<pos:position pos:line="148" pos:column="41"/></name></expr></argument>)<pos:position pos:line="148" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="149" pos:column="5">tempBuffer<pos:position pos:line="149" pos:column="15"/></name><operator pos:line="149" pos:column="15">.<pos:position pos:line="149" pos:column="16"/></operator><name pos:line="149" pos:column="16">data<pos:position pos:line="149" pos:column="20"/></name></name> <operator pos:line="149" pos:column="21">=<pos:position pos:line="149" pos:column="22"/></operator> <name><name pos:line="149" pos:column="23">result<pos:position pos:line="149" pos:column="29"/></name><operator pos:line="149" pos:column="29">-&gt;<pos:position pos:line="149" pos:column="34"/></operator><name pos:line="149" pos:column="31">reqbuf<pos:position pos:line="149" pos:column="37"/></name></name></expr>;<pos:position pos:line="149" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="150" pos:column="5">tempBuffer<pos:position pos:line="150" pos:column="15"/></name><operator pos:line="150" pos:column="15">.<pos:position pos:line="150" pos:column="16"/></operator><name pos:line="150" pos:column="16">length<pos:position pos:line="150" pos:column="22"/></name></name> <operator pos:line="150" pos:column="23">=<pos:position pos:line="150" pos:column="24"/></operator> <name pos:line="150" pos:column="25">HTTP_REQBUF_SZ<pos:position pos:line="150" pos:column="39"/></name></expr>;<pos:position pos:line="150" pos:column="40"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="152" pos:column="5">ClientStreamData<pos:position pos:line="152" pos:column="21"/></name></type> <name pos:line="152" pos:column="22">newServer<pos:position pos:line="152" pos:column="31"/></name> <init pos:line="152" pos:column="32">= <expr><operator pos:line="152" pos:column="34">new<pos:position pos:line="152" pos:column="37"/></operator> <call><name pos:line="152" pos:column="38">clientReplyContext<pos:position pos:line="152" pos:column="56"/></name><argument_list pos:line="152" pos:column="56">(<argument><expr><name pos:line="152" pos:column="57">http<pos:position pos:line="152" pos:column="61"/></name></expr></argument>)<pos:position pos:line="152" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="152" pos:column="63"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="153" pos:column="5">ClientStreamData<pos:position pos:line="153" pos:column="21"/></name></type> <name pos:line="153" pos:column="22">newClient<pos:position pos:line="153" pos:column="31"/></name> <init pos:line="153" pos:column="32">= <expr><name pos:line="153" pos:column="34">result<pos:position pos:line="153" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="153" pos:column="41"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="154" pos:column="5">clientStreamInit<pos:position pos:line="154" pos:column="21"/></name><argument_list pos:line="154" pos:column="21">(<argument><expr><operator pos:line="154" pos:column="22">&amp;<pos:position pos:line="154" pos:column="27"/></operator><name><name pos:line="154" pos:column="23">http<pos:position pos:line="154" pos:column="27"/></name><operator pos:line="154" pos:column="27">-&gt;<pos:position pos:line="154" pos:column="32"/></operator><name pos:line="154" pos:column="29">client_stream<pos:position pos:line="154" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="154" pos:column="44">clientGetMoreData<pos:position pos:line="154" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="154" pos:column="63">clientReplyDetach<pos:position pos:line="154" pos:column="80"/></name></expr></argument>,
                     <argument><expr><name pos:line="155" pos:column="22">clientReplyStatus<pos:position pos:line="155" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="155" pos:column="41">newServer<pos:position pos:line="155" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="155" pos:column="52">clientSocketRecipient<pos:position pos:line="155" pos:column="73"/></name></expr></argument>,
                     <argument><expr><name pos:line="156" pos:column="22">clientSocketDetach<pos:position pos:line="156" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="156" pos:column="42">newClient<pos:position pos:line="156" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="156" pos:column="53">tempBuffer<pos:position pos:line="156" pos:column="63"/></name></expr></argument>)<pos:position pos:line="156" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="65"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="158" pos:column="5">debugs<pos:position pos:line="158" pos:column="11"/></name><argument_list pos:line="158" pos:column="11">(<argument><expr><literal type="number" pos:line="158" pos:column="12">33<pos:position pos:line="158" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="158" pos:column="16">5<pos:position pos:line="158" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="158" pos:column="19">"parseHttpRequest: Request Header is\n"<pos:position pos:line="158" pos:column="58"/></literal> <operator pos:line="158" pos:column="59">&lt;&lt;<pos:position pos:line="158" pos:column="67"/></operator><operator pos:line="158" pos:column="61">(<pos:position pos:line="158" pos:column="62"/></operator><name><name pos:line="158" pos:column="62">hp<pos:position pos:line="158" pos:column="64"/></name><operator pos:line="158" pos:column="64">-&gt;<pos:position pos:line="158" pos:column="69"/></operator><name pos:line="158" pos:column="66">buf<pos:position pos:line="158" pos:column="69"/></name></name><operator pos:line="158" pos:column="69">)<pos:position pos:line="158" pos:column="70"/></operator> <operator pos:line="158" pos:column="71">+<pos:position pos:line="158" pos:column="72"/></operator> <name><name pos:line="158" pos:column="73">hp<pos:position pos:line="158" pos:column="75"/></name><operator pos:line="158" pos:column="75">-&gt;<pos:position pos:line="158" pos:column="80"/></operator><name pos:line="158" pos:column="77">hdr_start<pos:position pos:line="158" pos:column="86"/></name></name></expr></argument>)<pos:position pos:line="158" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="158" pos:column="88"/></expr_stmt>

    <comment type="block" pos:line="160" pos:column="5">/* set url */</comment>
    <comment type="block" pos:line="161" pos:column="5">/*
     * XXX this should eventually not use a malloc'ed buffer; the transformation code
     * below needs to be modified to not expect a mutable nul-terminated string.
     */</comment>
    <decl_stmt><decl><type><name pos:line="165" pos:column="5">char<pos:position pos:line="165" pos:column="9"/></name> <modifier pos:line="165" pos:column="10">*<pos:position pos:line="165" pos:column="11"/></modifier></type><name pos:line="165" pos:column="11">url<pos:position pos:line="165" pos:column="14"/></name> <init pos:line="165" pos:column="15">= <expr><operator pos:line="165" pos:column="17">(<pos:position pos:line="165" pos:column="18"/></operator><name pos:line="165" pos:column="18">char<pos:position pos:line="165" pos:column="22"/></name> <operator pos:line="165" pos:column="23">*<pos:position pos:line="165" pos:column="24"/></operator><operator pos:line="165" pos:column="24">)<pos:position pos:line="165" pos:column="25"/></operator><call><name pos:line="165" pos:column="25">xmalloc<pos:position pos:line="165" pos:column="32"/></name><argument_list pos:line="165" pos:column="32">(<argument><expr><name><name pos:line="165" pos:column="33">hp<pos:position pos:line="165" pos:column="35"/></name><operator pos:line="165" pos:column="35">-&gt;<pos:position pos:line="165" pos:column="40"/></operator><name pos:line="165" pos:column="37">u_end<pos:position pos:line="165" pos:column="42"/></name></name> <operator pos:line="165" pos:column="43">-<pos:position pos:line="165" pos:column="44"/></operator> <name><name pos:line="165" pos:column="45">hp<pos:position pos:line="165" pos:column="47"/></name><operator pos:line="165" pos:column="47">-&gt;<pos:position pos:line="165" pos:column="52"/></operator><name pos:line="165" pos:column="49">u_start<pos:position pos:line="165" pos:column="56"/></name></name> <operator pos:line="165" pos:column="57">+<pos:position pos:line="165" pos:column="58"/></operator> <literal type="number" pos:line="165" pos:column="59">16<pos:position pos:line="165" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="165" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="165" pos:column="63"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="167" pos:column="5">memcpy<pos:position pos:line="167" pos:column="11"/></name><argument_list pos:line="167" pos:column="11">(<argument><expr><name pos:line="167" pos:column="12">url<pos:position pos:line="167" pos:column="15"/></name></expr></argument>, <argument><expr><name><name pos:line="167" pos:column="17">hp<pos:position pos:line="167" pos:column="19"/></name><operator pos:line="167" pos:column="19">-&gt;<pos:position pos:line="167" pos:column="24"/></operator><name pos:line="167" pos:column="21">buf<pos:position pos:line="167" pos:column="24"/></name></name> <operator pos:line="167" pos:column="25">+<pos:position pos:line="167" pos:column="26"/></operator> <name><name pos:line="167" pos:column="27">hp<pos:position pos:line="167" pos:column="29"/></name><operator pos:line="167" pos:column="29">-&gt;<pos:position pos:line="167" pos:column="34"/></operator><name pos:line="167" pos:column="31">u_start<pos:position pos:line="167" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="167" pos:column="40">hp<pos:position pos:line="167" pos:column="42"/></name><operator pos:line="167" pos:column="42">-&gt;<pos:position pos:line="167" pos:column="47"/></operator><name pos:line="167" pos:column="44">u_end<pos:position pos:line="167" pos:column="49"/></name></name> <operator pos:line="167" pos:column="50">-<pos:position pos:line="167" pos:column="51"/></operator> <name><name pos:line="167" pos:column="52">hp<pos:position pos:line="167" pos:column="54"/></name><operator pos:line="167" pos:column="54">-&gt;<pos:position pos:line="167" pos:column="59"/></operator><name pos:line="167" pos:column="56">u_start<pos:position pos:line="167" pos:column="63"/></name></name> <operator pos:line="167" pos:column="64">+<pos:position pos:line="167" pos:column="65"/></operator> <literal type="number" pos:line="167" pos:column="66">1<pos:position pos:line="167" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="167" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="167" pos:column="69"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="169" pos:column="5">url<pos:position pos:line="169" pos:column="8"/></name><index pos:line="169" pos:column="8">[<expr><name><name pos:line="169" pos:column="9">hp<pos:position pos:line="169" pos:column="11"/></name><operator pos:line="169" pos:column="11">-&gt;<pos:position pos:line="169" pos:column="16"/></operator><name pos:line="169" pos:column="13">u_end<pos:position pos:line="169" pos:column="18"/></name></name> <operator pos:line="169" pos:column="19">-<pos:position pos:line="169" pos:column="20"/></operator> <name><name pos:line="169" pos:column="21">hp<pos:position pos:line="169" pos:column="23"/></name><operator pos:line="169" pos:column="23">-&gt;<pos:position pos:line="169" pos:column="28"/></operator><name pos:line="169" pos:column="25">u_start<pos:position pos:line="169" pos:column="32"/></name></name> <operator pos:line="169" pos:column="33">+<pos:position pos:line="169" pos:column="34"/></operator> <literal type="number" pos:line="169" pos:column="35">1<pos:position pos:line="169" pos:column="36"/></literal></expr>]<pos:position pos:line="169" pos:column="37"/></index></name> <operator pos:line="169" pos:column="38">=<pos:position pos:line="169" pos:column="39"/></operator> <literal type="char" pos:line="169" pos:column="40">'\0'<pos:position pos:line="169" pos:column="44"/></literal></expr>;<pos:position pos:line="169" pos:column="45"/></expr_stmt>

<cpp:if pos:line="171" pos:column="1">#<cpp:directive pos:line="171" pos:column="2">if<pos:position pos:line="171" pos:column="4"/></cpp:directive> <expr><name pos:line="171" pos:column="5">THIS_VIOLATES_HTTP_SPECS_ON_URL_TRANSFORMATION<pos:position pos:line="171" pos:column="51"/></name></expr></cpp:if>

    <if pos:line="173" pos:column="5">if <condition pos:line="173" pos:column="8">(<expr><operator pos:line="173" pos:column="9">(<pos:position pos:line="173" pos:column="10"/></operator><name pos:line="173" pos:column="10">t<pos:position pos:line="173" pos:column="11"/></name> <operator pos:line="173" pos:column="12">=<pos:position pos:line="173" pos:column="13"/></operator> <call><name pos:line="173" pos:column="14">strchr<pos:position pos:line="173" pos:column="20"/></name><argument_list pos:line="173" pos:column="20">(<argument><expr><name pos:line="173" pos:column="21">url<pos:position pos:line="173" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="173" pos:column="26">'#'<pos:position pos:line="173" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="173" pos:column="30"/></argument_list></call><operator pos:line="173" pos:column="30">)<pos:position pos:line="173" pos:column="31"/></operator></expr>)<pos:position pos:line="173" pos:column="32"/></condition><then pos:line="173" pos:column="32">	<comment type="block" pos:line="173" pos:column="33">/* remove HTML anchors */</comment>
        <block type="pseudo"><expr_stmt><expr><operator pos:line="174" pos:column="9">*<pos:position pos:line="174" pos:column="10"/></operator><name pos:line="174" pos:column="10">t<pos:position pos:line="174" pos:column="11"/></name> <operator pos:line="174" pos:column="12">=<pos:position pos:line="174" pos:column="13"/></operator> <literal type="char" pos:line="174" pos:column="14">'\0'<pos:position pos:line="174" pos:column="18"/></literal></expr>;<pos:position pos:line="174" pos:column="19"/></expr_stmt></block></then></if>

<cpp:endif pos:line="176" pos:column="1">#<cpp:directive pos:line="176" pos:column="2">endif<pos:position pos:line="176" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="178" pos:column="5">debugs<pos:position pos:line="178" pos:column="11"/></name><argument_list pos:line="178" pos:column="11">(<argument><expr><literal type="number" pos:line="178" pos:column="12">33<pos:position pos:line="178" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="178" pos:column="15">5<pos:position pos:line="178" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="178" pos:column="18">HERE<pos:position pos:line="178" pos:column="22"/></name> <operator pos:line="178" pos:column="23">&lt;&lt;<pos:position pos:line="178" pos:column="31"/></operator> <literal type="string" pos:line="178" pos:column="26">"repare absolute URL from "<pos:position pos:line="178" pos:column="53"/></literal> <operator pos:line="178" pos:column="54">&lt;&lt;<pos:position pos:line="178" pos:column="62"/></operator> <operator pos:line="178" pos:column="57">(<pos:position pos:line="178" pos:column="58"/></operator><ternary><condition><expr><call><name><name pos:line="178" pos:column="58">conn<pos:position pos:line="178" pos:column="62"/></name><operator pos:line="178" pos:column="62">-&gt;<pos:position pos:line="178" pos:column="67"/></operator><name pos:line="178" pos:column="64">transparent<pos:position pos:line="178" pos:column="75"/></name></name><argument_list pos:line="178" pos:column="75">()<pos:position pos:line="178" pos:column="77"/></argument_list></call></expr>?<pos:position pos:line="178" pos:column="78"/></condition><then><expr><literal type="string" pos:line="178" pos:column="78">"intercept"<pos:position pos:line="178" pos:column="89"/></literal></expr></then><else pos:line="178" pos:column="89">:<expr><operator pos:line="178" pos:column="90">(<pos:position pos:line="178" pos:column="91"/></operator><ternary><condition><expr><name><name pos:line="178" pos:column="91">conn<pos:position pos:line="178" pos:column="95"/></name><operator pos:line="178" pos:column="95">-&gt;<pos:position pos:line="178" pos:column="100"/></operator><name pos:line="178" pos:column="97">port<pos:position pos:line="178" pos:column="101"/></name><operator pos:line="178" pos:column="101">-&gt;<pos:position pos:line="178" pos:column="106"/></operator><name pos:line="178" pos:column="103">accel<pos:position pos:line="178" pos:column="108"/></name></name></expr> ?<pos:position pos:line="178" pos:column="110"/></condition><then pos:line="178" pos:column="110"> <expr><literal type="string" pos:line="178" pos:column="111">"accel"<pos:position pos:line="178" pos:column="118"/></literal></expr></then><else pos:line="178" pos:column="118">:<expr><literal type="string" pos:line="178" pos:column="119">""<pos:position pos:line="178" pos:column="121"/></literal></expr></else></ternary><operator pos:line="178" pos:column="121">)<pos:position pos:line="178" pos:column="122"/></operator></expr></else></ternary><operator pos:line="178" pos:column="122">)<pos:position pos:line="178" pos:column="123"/></operator></expr></argument>)<pos:position pos:line="178" pos:column="124"/></argument_list></call></expr>;<pos:position pos:line="178" pos:column="125"/></expr_stmt>
    <comment type="block" pos:line="179" pos:column="5">/* Rewrite the URL in transparent or accelerator mode */</comment>
    <comment type="block" pos:line="180" pos:column="5">/* NP: there are several cases to traverse here:
     *  - standard mode (forward proxy)
     *  - transparent mode (TPROXY)
     *  - transparent mode with failures
     *  - intercept mode (NAT)
     *  - intercept mode with failures
     *  - accelerator mode (reverse proxy)
     *  - internal URL
     *  - mixed combos of the above with internal URL
     */</comment>
    <if pos:line="190" pos:column="5">if <condition pos:line="190" pos:column="8">(<expr><call><name><name pos:line="190" pos:column="9">conn<pos:position pos:line="190" pos:column="13"/></name><operator pos:line="190" pos:column="13">-&gt;<pos:position pos:line="190" pos:column="18"/></operator><name pos:line="190" pos:column="15">transparent<pos:position pos:line="190" pos:column="26"/></name></name><argument_list pos:line="190" pos:column="26">()<pos:position pos:line="190" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="190" pos:column="29"/></condition><then pos:line="190" pos:column="29"> <block pos:line="190" pos:column="30">{
        <comment type="block" pos:line="191" pos:column="9">/* intercept or transparent mode, properly working with no failures */</comment>
        <expr_stmt><expr><name><name pos:line="192" pos:column="9">http<pos:position pos:line="192" pos:column="13"/></name><operator pos:line="192" pos:column="13">-&gt;<pos:position pos:line="192" pos:column="18"/></operator><name pos:line="192" pos:column="15">flags<pos:position pos:line="192" pos:column="20"/></name><operator pos:line="192" pos:column="20">.<pos:position pos:line="192" pos:column="21"/></operator><name pos:line="192" pos:column="21">intercepted<pos:position pos:line="192" pos:column="32"/></name></name> <operator pos:line="192" pos:column="33">=<pos:position pos:line="192" pos:column="34"/></operator> <name><name pos:line="192" pos:column="35">conn<pos:position pos:line="192" pos:column="39"/></name><operator pos:line="192" pos:column="39">-&gt;<pos:position pos:line="192" pos:column="44"/></operator><name pos:line="192" pos:column="41">port<pos:position pos:line="192" pos:column="45"/></name><operator pos:line="192" pos:column="45">-&gt;<pos:position pos:line="192" pos:column="50"/></operator><name pos:line="192" pos:column="47">intercepted<pos:position pos:line="192" pos:column="58"/></name></name></expr>;<pos:position pos:line="192" pos:column="59"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="193" pos:column="9">http<pos:position pos:line="193" pos:column="13"/></name><operator pos:line="193" pos:column="13">-&gt;<pos:position pos:line="193" pos:column="18"/></operator><name pos:line="193" pos:column="15">flags<pos:position pos:line="193" pos:column="20"/></name><operator pos:line="193" pos:column="20">.<pos:position pos:line="193" pos:column="21"/></operator><name pos:line="193" pos:column="21">spoof_client_ip<pos:position pos:line="193" pos:column="36"/></name></name> <operator pos:line="193" pos:column="37">=<pos:position pos:line="193" pos:column="38"/></operator> <name><name pos:line="193" pos:column="39">conn<pos:position pos:line="193" pos:column="43"/></name><operator pos:line="193" pos:column="43">-&gt;<pos:position pos:line="193" pos:column="48"/></operator><name pos:line="193" pos:column="45">port<pos:position pos:line="193" pos:column="49"/></name><operator pos:line="193" pos:column="49">-&gt;<pos:position pos:line="193" pos:column="54"/></operator><name pos:line="193" pos:column="51">spoof_client_ip<pos:position pos:line="193" pos:column="66"/></name></name></expr>;<pos:position pos:line="193" pos:column="67"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="194" pos:column="9">prepareTransparentURL<pos:position pos:line="194" pos:column="30"/></name><argument_list pos:line="194" pos:column="30">(<argument><expr><name pos:line="194" pos:column="31">conn<pos:position pos:line="194" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="194" pos:column="37">http<pos:position pos:line="194" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="194" pos:column="43">url<pos:position pos:line="194" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="194" pos:column="48">req_hdr<pos:position pos:line="194" pos:column="55"/></name></expr></argument>)<pos:position pos:line="194" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="194" pos:column="57"/></expr_stmt>

    }<pos:position pos:line="196" pos:column="6"/></block></then> <elseif pos:line="196" pos:column="7">else <if pos:line="196" pos:column="12">if <condition pos:line="196" pos:column="15">(<expr><name><name pos:line="196" pos:column="16">conn<pos:position pos:line="196" pos:column="20"/></name><operator pos:line="196" pos:column="20">-&gt;<pos:position pos:line="196" pos:column="25"/></operator><name pos:line="196" pos:column="22">port<pos:position pos:line="196" pos:column="26"/></name><operator pos:line="196" pos:column="26">-&gt;<pos:position pos:line="196" pos:column="31"/></operator><name pos:line="196" pos:column="28">intercepted<pos:position pos:line="196" pos:column="39"/></name></name> <operator pos:line="196" pos:column="40">||<pos:position pos:line="196" pos:column="42"/></operator> <name><name pos:line="196" pos:column="43">conn<pos:position pos:line="196" pos:column="47"/></name><operator pos:line="196" pos:column="47">-&gt;<pos:position pos:line="196" pos:column="52"/></operator><name pos:line="196" pos:column="49">port<pos:position pos:line="196" pos:column="53"/></name><operator pos:line="196" pos:column="53">-&gt;<pos:position pos:line="196" pos:column="58"/></operator><name pos:line="196" pos:column="55">spoof_client_ip<pos:position pos:line="196" pos:column="70"/></name></name></expr>)<pos:position pos:line="196" pos:column="71"/></condition><then pos:line="196" pos:column="71"> <block pos:line="196" pos:column="72">{
        <comment type="block" pos:line="197" pos:column="9">/* transparent or intercept mode with failures */</comment>
        <expr_stmt><expr><call><name pos:line="198" pos:column="9">prepareTransparentURL<pos:position pos:line="198" pos:column="30"/></name><argument_list pos:line="198" pos:column="30">(<argument><expr><name pos:line="198" pos:column="31">conn<pos:position pos:line="198" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="198" pos:column="37">http<pos:position pos:line="198" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="198" pos:column="43">url<pos:position pos:line="198" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="198" pos:column="48">req_hdr<pos:position pos:line="198" pos:column="55"/></name></expr></argument>)<pos:position pos:line="198" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="198" pos:column="57"/></expr_stmt>

    }<pos:position pos:line="200" pos:column="6"/></block></then></if></elseif> <elseif pos:line="200" pos:column="7">else <if pos:line="200" pos:column="12">if <condition pos:line="200" pos:column="15">(<expr><name><name pos:line="200" pos:column="16">conn<pos:position pos:line="200" pos:column="20"/></name><operator pos:line="200" pos:column="20">-&gt;<pos:position pos:line="200" pos:column="25"/></operator><name pos:line="200" pos:column="22">port<pos:position pos:line="200" pos:column="26"/></name><operator pos:line="200" pos:column="26">-&gt;<pos:position pos:line="200" pos:column="31"/></operator><name pos:line="200" pos:column="28">accel<pos:position pos:line="200" pos:column="33"/></name></name> <operator pos:line="200" pos:column="34">||<pos:position pos:line="200" pos:column="36"/></operator> <call><name><name pos:line="200" pos:column="37">conn<pos:position pos:line="200" pos:column="41"/></name><operator pos:line="200" pos:column="41">-&gt;<pos:position pos:line="200" pos:column="46"/></operator><name pos:line="200" pos:column="43">switchedToHttps<pos:position pos:line="200" pos:column="58"/></name></name><argument_list pos:line="200" pos:column="58">()<pos:position pos:line="200" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="200" pos:column="61"/></condition><then pos:line="200" pos:column="61"> <block pos:line="200" pos:column="62">{
        <comment type="block" pos:line="201" pos:column="9">/* accelerator mode */</comment>
        <expr_stmt><expr><call><name pos:line="202" pos:column="9">prepareAcceleratedURL<pos:position pos:line="202" pos:column="30"/></name><argument_list pos:line="202" pos:column="30">(<argument><expr><name pos:line="202" pos:column="31">conn<pos:position pos:line="202" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="202" pos:column="37">http<pos:position pos:line="202" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="202" pos:column="43">url<pos:position pos:line="202" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="202" pos:column="48">req_hdr<pos:position pos:line="202" pos:column="55"/></name></expr></argument>)<pos:position pos:line="202" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="202" pos:column="57"/></expr_stmt>

    }<pos:position pos:line="204" pos:column="6"/></block></then></if></elseif> <elseif pos:line="204" pos:column="7">else <if pos:line="204" pos:column="12">if <condition pos:line="204" pos:column="15">(<expr><call><name pos:line="204" pos:column="16">internalCheck<pos:position pos:line="204" pos:column="29"/></name><argument_list pos:line="204" pos:column="29">(<argument><expr><name pos:line="204" pos:column="30">url<pos:position pos:line="204" pos:column="33"/></name></expr></argument>)<pos:position pos:line="204" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="204" pos:column="35"/></condition><then pos:line="204" pos:column="35"> <block pos:line="204" pos:column="36">{
        <comment type="block" pos:line="205" pos:column="9">/* internal URL mode */</comment>
        <comment type="block" pos:line="206" pos:column="9">/* prepend our name &amp; port */</comment>
        <expr_stmt><expr><name><name pos:line="207" pos:column="9">http<pos:position pos:line="207" pos:column="13"/></name><operator pos:line="207" pos:column="13">-&gt;<pos:position pos:line="207" pos:column="18"/></operator><name pos:line="207" pos:column="15">uri<pos:position pos:line="207" pos:column="18"/></name></name> <operator pos:line="207" pos:column="19">=<pos:position pos:line="207" pos:column="20"/></operator> <call><name pos:line="207" pos:column="21">xstrdup<pos:position pos:line="207" pos:column="28"/></name><argument_list pos:line="207" pos:column="28">(<argument><expr><call><name pos:line="207" pos:column="29">internalLocalUri<pos:position pos:line="207" pos:column="45"/></name><argument_list pos:line="207" pos:column="45">(<argument><expr><name pos:line="207" pos:column="46">NULL<pos:position pos:line="207" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="207" pos:column="52">url<pos:position pos:line="207" pos:column="55"/></name></expr></argument>)<pos:position pos:line="207" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="207" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="207" pos:column="58"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="208" pos:column="9">http<pos:position pos:line="208" pos:column="13"/></name><operator pos:line="208" pos:column="13">-&gt;<pos:position pos:line="208" pos:column="18"/></operator><name pos:line="208" pos:column="15">flags<pos:position pos:line="208" pos:column="20"/></name><operator pos:line="208" pos:column="20">.<pos:position pos:line="208" pos:column="21"/></operator><name pos:line="208" pos:column="21">accel<pos:position pos:line="208" pos:column="26"/></name></name> <operator pos:line="208" pos:column="27">=<pos:position pos:line="208" pos:column="28"/></operator> <literal type="number" pos:line="208" pos:column="29">1<pos:position pos:line="208" pos:column="30"/></literal></expr>;<pos:position pos:line="208" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="209" pos:column="6"/></block></then></if></elseif></if>

    <if pos:line="211" pos:column="5">if <condition pos:line="211" pos:column="8">(<expr><operator pos:line="211" pos:column="9">!<pos:position pos:line="211" pos:column="10"/></operator><name><name pos:line="211" pos:column="10">http<pos:position pos:line="211" pos:column="14"/></name><operator pos:line="211" pos:column="14">-&gt;<pos:position pos:line="211" pos:column="19"/></operator><name pos:line="211" pos:column="16">uri<pos:position pos:line="211" pos:column="19"/></name></name></expr>)<pos:position pos:line="211" pos:column="20"/></condition><then pos:line="211" pos:column="20"> <block pos:line="211" pos:column="21">{
        <comment type="block" pos:line="212" pos:column="9">/* No special rewrites have been applied above, use the
         * requested url. may be rewritten later, so make extra room */</comment>
        <decl_stmt><decl><type><name pos:line="214" pos:column="9">int<pos:position pos:line="214" pos:column="12"/></name></type> <name pos:line="214" pos:column="13">url_sz<pos:position pos:line="214" pos:column="19"/></name> <init pos:line="214" pos:column="20">= <expr><call><name pos:line="214" pos:column="22">strlen<pos:position pos:line="214" pos:column="28"/></name><argument_list pos:line="214" pos:column="28">(<argument><expr><name pos:line="214" pos:column="29">url<pos:position pos:line="214" pos:column="32"/></name></expr></argument>)<pos:position pos:line="214" pos:column="33"/></argument_list></call> <operator pos:line="214" pos:column="34">+<pos:position pos:line="214" pos:column="35"/></operator> <name><name pos:line="214" pos:column="36">Config<pos:position pos:line="214" pos:column="42"/></name><operator pos:line="214" pos:column="42">.<pos:position pos:line="214" pos:column="43"/></operator><name pos:line="214" pos:column="43">appendDomainLen<pos:position pos:line="214" pos:column="58"/></name></name> <operator pos:line="214" pos:column="59">+<pos:position pos:line="214" pos:column="60"/></operator> <literal type="number" pos:line="214" pos:column="61">5<pos:position pos:line="214" pos:column="62"/></literal></expr></init></decl>;<pos:position pos:line="214" pos:column="63"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="215" pos:column="9">http<pos:position pos:line="215" pos:column="13"/></name><operator pos:line="215" pos:column="13">-&gt;<pos:position pos:line="215" pos:column="18"/></operator><name pos:line="215" pos:column="15">uri<pos:position pos:line="215" pos:column="18"/></name></name> <operator pos:line="215" pos:column="19">=<pos:position pos:line="215" pos:column="20"/></operator> <operator pos:line="215" pos:column="21">(<pos:position pos:line="215" pos:column="22"/></operator><name pos:line="215" pos:column="22">char<pos:position pos:line="215" pos:column="26"/></name> <operator pos:line="215" pos:column="27">*<pos:position pos:line="215" pos:column="28"/></operator><operator pos:line="215" pos:column="28">)<pos:position pos:line="215" pos:column="29"/></operator><call><name pos:line="215" pos:column="29">xcalloc<pos:position pos:line="215" pos:column="36"/></name><argument_list pos:line="215" pos:column="36">(<argument><expr><name pos:line="215" pos:column="37">url_sz<pos:position pos:line="215" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="215" pos:column="45">1<pos:position pos:line="215" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="215" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="215" pos:column="48"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="216" pos:column="9">strcpy<pos:position pos:line="216" pos:column="15"/></name><argument_list pos:line="216" pos:column="15">(<argument><expr><name><name pos:line="216" pos:column="16">http<pos:position pos:line="216" pos:column="20"/></name><operator pos:line="216" pos:column="20">-&gt;<pos:position pos:line="216" pos:column="25"/></operator><name pos:line="216" pos:column="22">uri<pos:position pos:line="216" pos:column="25"/></name></name></expr></argument>, <argument><expr><name pos:line="216" pos:column="27">url<pos:position pos:line="216" pos:column="30"/></name></expr></argument>)<pos:position pos:line="216" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="216" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="217" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="219" pos:column="5">debugs<pos:position pos:line="219" pos:column="11"/></name><argument_list pos:line="219" pos:column="11">(<argument><expr><literal type="number" pos:line="219" pos:column="12">33<pos:position pos:line="219" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="219" pos:column="16">5<pos:position pos:line="219" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="219" pos:column="19">"parseHttpRequest: Complete request received"<pos:position pos:line="219" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="219" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="219" pos:column="66"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="220" pos:column="5">result<pos:position pos:line="220" pos:column="11"/></name><operator pos:line="220" pos:column="11">-&gt;<pos:position pos:line="220" pos:column="16"/></operator><name pos:line="220" pos:column="13">flags<pos:position pos:line="220" pos:column="18"/></name><operator pos:line="220" pos:column="18">.<pos:position pos:line="220" pos:column="19"/></operator><name pos:line="220" pos:column="19">parsed_ok<pos:position pos:line="220" pos:column="28"/></name></name> <operator pos:line="220" pos:column="29">=<pos:position pos:line="220" pos:column="30"/></operator> <literal type="number" pos:line="220" pos:column="31">1<pos:position pos:line="220" pos:column="32"/></literal></expr>;<pos:position pos:line="220" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="221" pos:column="5">xfree<pos:position pos:line="221" pos:column="10"/></name><argument_list pos:line="221" pos:column="10">(<argument><expr><name pos:line="221" pos:column="11">url<pos:position pos:line="221" pos:column="14"/></name></expr></argument>)<pos:position pos:line="221" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="221" pos:column="16"/></expr_stmt>
    <return pos:line="222" pos:column="5">return <expr><name pos:line="222" pos:column="12">result<pos:position pos:line="222" pos:column="18"/></name></expr>;<pos:position pos:line="222" pos:column="19"/></return>
}<pos:position pos:line="223" pos:column="2"/></block></function></unit>
