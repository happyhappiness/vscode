<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4133_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Icap<pos:position pos:line="1" pos:column="22"/></name><operator pos:line="1" pos:column="22">::<pos:position pos:line="1" pos:column="24"/></operator><name pos:line="1" pos:column="24">ModXact<pos:position pos:line="1" pos:column="31"/></name><operator pos:line="1" pos:column="31">::<pos:position pos:line="1" pos:column="33"/></operator><name pos:line="1" pos:column="33">stopSending<pos:position pos:line="1" pos:column="44"/></name></name><parameter_list pos:line="1" pos:column="44">(<parameter><decl><type><name pos:line="1" pos:column="45">bool<pos:position pos:line="1" pos:column="49"/></name></type> <name pos:line="1" pos:column="50">nicely<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="57"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="3" pos:column="5">debugs<pos:position pos:line="3" pos:column="11"/></name><argument_list pos:line="3" pos:column="11">(<argument><expr><literal type="number" pos:line="3" pos:column="12">93<pos:position pos:line="3" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="3" pos:column="16">7<pos:position pos:line="3" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="3" pos:column="19">HERE<pos:position pos:line="3" pos:column="23"/></name> <operator pos:line="3" pos:column="24">&lt;&lt;<pos:position pos:line="3" pos:column="32"/></operator> <literal type="string" pos:line="3" pos:column="27">"Enter stop sending "<pos:position pos:line="3" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="50"/></expr_stmt>
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><call><name pos:line="4" pos:column="9">doneSending<pos:position pos:line="4" pos:column="20"/></name><argument_list pos:line="4" pos:column="20">()<pos:position pos:line="4" pos:column="22"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="23"/></condition><then pos:line="4" pos:column="23">
        <block type="pseudo"><return pos:line="5" pos:column="9">return;<pos:position pos:line="5" pos:column="16"/></return></block></then></if>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">debugs<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><literal type="number" pos:line="6" pos:column="12">93<pos:position pos:line="6" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="16">7<pos:position pos:line="6" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="6" pos:column="19">HERE<pos:position pos:line="6" pos:column="23"/></name> <operator pos:line="6" pos:column="24">&lt;&lt;<pos:position pos:line="6" pos:column="32"/></operator> <literal type="string" pos:line="6" pos:column="27">"Proceed with stop sending "<pos:position pos:line="6" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="57"/></expr_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name><name pos:line="8" pos:column="9">state<pos:position pos:line="8" pos:column="14"/></name><operator pos:line="8" pos:column="14">.<pos:position pos:line="8" pos:column="15"/></operator><name pos:line="8" pos:column="15">sending<pos:position pos:line="8" pos:column="22"/></name></name> <operator pos:line="8" pos:column="23">!=<pos:position pos:line="8" pos:column="25"/></operator> <name><name pos:line="8" pos:column="26">State<pos:position pos:line="8" pos:column="31"/></name><operator pos:line="8" pos:column="31">::<pos:position pos:line="8" pos:column="33"/></operator><name pos:line="8" pos:column="33">sendingUndecided<pos:position pos:line="8" pos:column="49"/></name></name></expr>)<pos:position pos:line="8" pos:column="50"/></condition><then pos:line="8" pos:column="50"> <block pos:line="8" pos:column="51">{
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">debugs<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><literal type="number" pos:line="9" pos:column="16">93<pos:position pos:line="9" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="20">7<pos:position pos:line="9" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="23">HERE<pos:position pos:line="9" pos:column="27"/></name> <operator pos:line="9" pos:column="28">&lt;&lt;<pos:position pos:line="9" pos:column="36"/></operator> <literal type="string" pos:line="9" pos:column="31">"will no longer send"<pos:position pos:line="9" pos:column="52"/></literal> <operator pos:line="9" pos:column="53">&lt;&lt;<pos:position pos:line="9" pos:column="61"/></operator> <call><name pos:line="9" pos:column="56">status<pos:position pos:line="9" pos:column="62"/></name><argument_list pos:line="9" pos:column="62">()<pos:position pos:line="9" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="66"/></expr_stmt>
        <if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name><name pos:line="10" pos:column="13">adapted<pos:position pos:line="10" pos:column="20"/></name><operator pos:line="10" pos:column="20">.<pos:position pos:line="10" pos:column="21"/></operator><name pos:line="10" pos:column="21">body_pipe<pos:position pos:line="10" pos:column="30"/></name></name> <operator pos:line="10" pos:column="31">!=<pos:position pos:line="10" pos:column="33"/></operator> <name pos:line="10" pos:column="34">NULL<pos:position pos:line="10" pos:column="38"/></name></expr>)<pos:position pos:line="10" pos:column="39"/></condition><then pos:line="10" pos:column="39"> <block pos:line="10" pos:column="40">{
            <expr_stmt><expr><call><name><name pos:line="11" pos:column="13">virginBodySending<pos:position pos:line="11" pos:column="30"/></name><operator pos:line="11" pos:column="30">.<pos:position pos:line="11" pos:column="31"/></operator><name pos:line="11" pos:column="31">disable<pos:position pos:line="11" pos:column="38"/></name></name><argument_list pos:line="11" pos:column="38">()<pos:position pos:line="11" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="41"/></expr_stmt>
            <comment type="line" pos:line="12" pos:column="13">// we may leave debts if we were echoing and the virgin</comment>
            <comment type="line" pos:line="13" pos:column="13">// body_pipe got exhausted before we echoed all planned bytes</comment>
            <decl_stmt><decl><type><specifier pos:line="14" pos:column="13">const<pos:position pos:line="14" pos:column="18"/></specifier> <name pos:line="14" pos:column="19">bool<pos:position pos:line="14" pos:column="23"/></name></type> <name pos:line="14" pos:column="24">leftDebts<pos:position pos:line="14" pos:column="33"/></name> <init pos:line="14" pos:column="34">= <expr><call><name><name pos:line="14" pos:column="36">adapted<pos:position pos:line="14" pos:column="43"/></name><operator pos:line="14" pos:column="43">.<pos:position pos:line="14" pos:column="44"/></operator><name pos:line="14" pos:column="44">body_pipe<pos:position pos:line="14" pos:column="53"/></name><operator pos:line="14" pos:column="53">-&gt;<pos:position pos:line="14" pos:column="58"/></operator><name pos:line="14" pos:column="55">needsMoreData<pos:position pos:line="14" pos:column="68"/></name></name><argument_list pos:line="14" pos:column="68">()<pos:position pos:line="14" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="71"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="15" pos:column="13">stopProducingFor<pos:position pos:line="15" pos:column="29"/></name><argument_list pos:line="15" pos:column="29">(<argument><expr><name><name pos:line="15" pos:column="30">adapted<pos:position pos:line="15" pos:column="37"/></name><operator pos:line="15" pos:column="37">.<pos:position pos:line="15" pos:column="38"/></operator><name pos:line="15" pos:column="38">body_pipe<pos:position pos:line="15" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="49">nicely<pos:position pos:line="15" pos:column="55"/></name> <operator pos:line="15" pos:column="56">&amp;&amp;<pos:position pos:line="15" pos:column="66"/></operator> <operator pos:line="15" pos:column="59">!<pos:position pos:line="15" pos:column="60"/></operator><name pos:line="15" pos:column="60">leftDebts<pos:position pos:line="15" pos:column="69"/></name></expr></argument>)<pos:position pos:line="15" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="71"/></expr_stmt>
        }<pos:position pos:line="16" pos:column="10"/></block></then></if>
    }<pos:position pos:line="17" pos:column="6"/></block></then> <else pos:line="17" pos:column="7">else <block pos:line="17" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">debugs<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><literal type="number" pos:line="18" pos:column="16">93<pos:position pos:line="18" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="20">7<pos:position pos:line="18" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="23">HERE<pos:position pos:line="18" pos:column="27"/></name> <operator pos:line="18" pos:column="28">&lt;&lt;<pos:position pos:line="18" pos:column="36"/></operator> <literal type="string" pos:line="18" pos:column="31">"will not start sending"<pos:position pos:line="18" pos:column="55"/></literal> <operator pos:line="18" pos:column="56">&lt;&lt;<pos:position pos:line="18" pos:column="64"/></operator> <call><name pos:line="18" pos:column="59">status<pos:position pos:line="18" pos:column="65"/></name><argument_list pos:line="18" pos:column="65">()<pos:position pos:line="18" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="69"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">Must<pos:position pos:line="19" pos:column="13"/></name><argument_list pos:line="19" pos:column="13">(<argument><expr><operator pos:line="19" pos:column="14">!<pos:position pos:line="19" pos:column="15"/></operator><name><name pos:line="19" pos:column="15">adapted<pos:position pos:line="19" pos:column="22"/></name><operator pos:line="19" pos:column="22">.<pos:position pos:line="19" pos:column="23"/></operator><name pos:line="19" pos:column="23">body_pipe<pos:position pos:line="19" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="20" pos:column="6"/></block></else></if>

    <expr_stmt><expr><name><name pos:line="22" pos:column="5">state<pos:position pos:line="22" pos:column="10"/></name><operator pos:line="22" pos:column="10">.<pos:position pos:line="22" pos:column="11"/></operator><name pos:line="22" pos:column="11">sending<pos:position pos:line="22" pos:column="18"/></name></name> <operator pos:line="22" pos:column="19">=<pos:position pos:line="22" pos:column="20"/></operator> <name><name pos:line="22" pos:column="21">State<pos:position pos:line="22" pos:column="26"/></name><operator pos:line="22" pos:column="26">::<pos:position pos:line="22" pos:column="28"/></operator><name pos:line="22" pos:column="28">sendingDone<pos:position pos:line="22" pos:column="39"/></name></name></expr>;<pos:position pos:line="22" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">checkConsuming<pos:position pos:line="23" pos:column="19"/></name><argument_list pos:line="23" pos:column="19">()<pos:position pos:line="23" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="22"/></expr_stmt>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
