<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4910_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Http<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">One<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">TeChunkedParser<pos:position pos:line="2" pos:column="27"/></name><operator pos:line="2" pos:column="27">::<pos:position pos:line="2" pos:column="29"/></operator><name pos:line="2" pos:column="29">parseChunkSize<pos:position pos:line="2" pos:column="43"/></name></name><parameter_list pos:line="2" pos:column="43">(<parameter><decl><type><name><name pos:line="2" pos:column="44">Http1<pos:position pos:line="2" pos:column="49"/></name><operator pos:line="2" pos:column="49">::<pos:position pos:line="2" pos:column="51"/></operator><name pos:line="2" pos:column="51">Tokenizer<pos:position pos:line="2" pos:column="60"/></name></name> <modifier pos:line="2" pos:column="61">&amp;<pos:position pos:line="2" pos:column="66"/></modifier></type><name pos:line="2" pos:column="62">tok<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="66"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">Must<pos:position pos:line="4" pos:column="9"/></name><argument_list pos:line="4" pos:column="9">(<argument><expr><name pos:line="4" pos:column="10">theChunkSize<pos:position pos:line="4" pos:column="22"/></name> <operator pos:line="4" pos:column="23">&lt;=<pos:position pos:line="4" pos:column="28"/></operator> <literal type="number" pos:line="4" pos:column="26">0<pos:position pos:line="4" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="29"/></expr_stmt> <comment type="line" pos:line="4" pos:column="30">// Should(), really</comment>

    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int64_t<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">size<pos:position pos:line="6" pos:column="17"/></name> <init pos:line="6" pos:column="18">= <expr><operator pos:line="6" pos:column="20">-<pos:position pos:line="6" pos:column="21"/></operator><literal type="number" pos:line="6" pos:column="21">1<pos:position pos:line="6" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><call><name><name pos:line="7" pos:column="9">tok<pos:position pos:line="7" pos:column="12"/></name><operator pos:line="7" pos:column="12">.<pos:position pos:line="7" pos:column="13"/></operator><name pos:line="7" pos:column="13">int64<pos:position pos:line="7" pos:column="18"/></name></name><argument_list pos:line="7" pos:column="18">(<argument><expr><name pos:line="7" pos:column="19">size<pos:position pos:line="7" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="25">16<pos:position pos:line="7" pos:column="27"/></literal></expr></argument>, <argument><expr><literal type="boolean" pos:line="7" pos:column="29">false<pos:position pos:line="7" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="35"/></argument_list></call> <operator pos:line="7" pos:column="36">&amp;&amp;<pos:position pos:line="7" pos:column="46"/></operator> <operator pos:line="7" pos:column="39">!<pos:position pos:line="7" pos:column="40"/></operator><call><name><name pos:line="7" pos:column="40">tok<pos:position pos:line="7" pos:column="43"/></name><operator pos:line="7" pos:column="43">.<pos:position pos:line="7" pos:column="44"/></operator><name pos:line="7" pos:column="44">atEnd<pos:position pos:line="7" pos:column="49"/></name></name><argument_list pos:line="7" pos:column="49">()<pos:position pos:line="7" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="52"/></condition><then pos:line="7" pos:column="52"> <block pos:line="7" pos:column="53">{
        <if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">size<pos:position pos:line="8" pos:column="17"/></name> <operator pos:line="8" pos:column="18">&lt;<pos:position pos:line="8" pos:column="22"/></operator> <literal type="number" pos:line="8" pos:column="20">0<pos:position pos:line="8" pos:column="21"/></literal></expr>)<pos:position pos:line="8" pos:column="22"/></condition><then pos:line="8" pos:column="22">
            <block type="pseudo"><throw pos:line="9" pos:column="13">throw <expr><call><name pos:line="9" pos:column="19">TexcHere<pos:position pos:line="9" pos:column="27"/></name><argument_list pos:line="9" pos:column="27">(<argument><expr><literal type="string" pos:line="9" pos:column="28">"negative chunk size"<pos:position pos:line="9" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="51"/></throw></block></then></if>

        <expr_stmt><expr><name pos:line="11" pos:column="9">theChunkSize<pos:position pos:line="11" pos:column="21"/></name> <operator pos:line="11" pos:column="22">=<pos:position pos:line="11" pos:column="23"/></operator> <name pos:line="11" pos:column="24">theLeftBodySize<pos:position pos:line="11" pos:column="39"/></name> <operator pos:line="11" pos:column="40">=<pos:position pos:line="11" pos:column="41"/></operator> <name pos:line="11" pos:column="42">size<pos:position pos:line="11" pos:column="46"/></name></expr>;<pos:position pos:line="11" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">debugs<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><literal type="number" pos:line="12" pos:column="16">94<pos:position pos:line="12" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="12" pos:column="19">7<pos:position pos:line="12" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="22">"found chunk: "<pos:position pos:line="12" pos:column="37"/></literal> <operator pos:line="12" pos:column="38">&lt;&lt;<pos:position pos:line="12" pos:column="46"/></operator> <name pos:line="12" pos:column="41">theChunkSize<pos:position pos:line="12" pos:column="53"/></name></expr></argument>)<pos:position pos:line="12" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="55"/></expr_stmt>
        <expr_stmt><expr><name pos:line="13" pos:column="9">buf_<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">=<pos:position pos:line="13" pos:column="15"/></operator> <call><name><name pos:line="13" pos:column="16">tok<pos:position pos:line="13" pos:column="19"/></name><operator pos:line="13" pos:column="19">.<pos:position pos:line="13" pos:column="20"/></operator><name pos:line="13" pos:column="20">remaining<pos:position pos:line="13" pos:column="29"/></name></name><argument_list pos:line="13" pos:column="29">()<pos:position pos:line="13" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="32"/></expr_stmt> <comment type="line" pos:line="13" pos:column="33">// parse checkpoint</comment>
        <expr_stmt><expr><name pos:line="14" pos:column="9">parsingStage_<pos:position pos:line="14" pos:column="22"/></name> <operator pos:line="14" pos:column="23">=<pos:position pos:line="14" pos:column="24"/></operator> <name><name pos:line="14" pos:column="25">Http1<pos:position pos:line="14" pos:column="30"/></name><operator pos:line="14" pos:column="30">::<pos:position pos:line="14" pos:column="32"/></operator><name pos:line="14" pos:column="32">HTTP_PARSE_CHUNK_EXT<pos:position pos:line="14" pos:column="52"/></name></name></expr>;<pos:position pos:line="14" pos:column="53"/></expr_stmt>
        <return pos:line="15" pos:column="9">return <expr><literal type="boolean" pos:line="15" pos:column="16">true<pos:position pos:line="15" pos:column="20"/></literal></expr>;<pos:position pos:line="15" pos:column="21"/></return>

    }<pos:position pos:line="17" pos:column="6"/></block></then> <elseif pos:line="17" pos:column="7">else <if pos:line="17" pos:column="12">if <condition pos:line="17" pos:column="15">(<expr><call><name><name pos:line="17" pos:column="16">tok<pos:position pos:line="17" pos:column="19"/></name><operator pos:line="17" pos:column="19">.<pos:position pos:line="17" pos:column="20"/></operator><name pos:line="17" pos:column="20">atEnd<pos:position pos:line="17" pos:column="25"/></name></name><argument_list pos:line="17" pos:column="25">()<pos:position pos:line="17" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="28"/></condition><then pos:line="17" pos:column="28"> <block pos:line="17" pos:column="29">{
        <return pos:line="18" pos:column="9">return <expr><literal type="boolean" pos:line="18" pos:column="16">false<pos:position pos:line="18" pos:column="21"/></literal></expr>;<pos:position pos:line="18" pos:column="22"/></return> <comment type="line" pos:line="18" pos:column="23">// need more data</comment>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if></elseif></if>

    <comment type="line" pos:line="21" pos:column="5">// else error</comment>
    <throw pos:line="22" pos:column="5">throw <expr><call><name pos:line="22" pos:column="11">TexcHere<pos:position pos:line="22" pos:column="19"/></name><argument_list pos:line="22" pos:column="19">(<argument><expr><literal type="string" pos:line="22" pos:column="20">"corrupted chunk size"<pos:position pos:line="22" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="44"/></throw>
    <return pos:line="23" pos:column="5">return <expr><literal type="boolean" pos:line="23" pos:column="12">false<pos:position pos:line="23" pos:column="17"/></literal></expr>;<pos:position pos:line="23" pos:column="18"/></return> <comment type="line" pos:line="23" pos:column="19">// should not be reachable</comment>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
