<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_505_squid-3.1.23.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">struct<pos:position pos:line="1" pos:column="7"/></name> <name pos:line="1" pos:column="8">variable_list<pos:position pos:line="1" pos:column="21"/></name></name> <modifier pos:line="1" pos:column="22">*<pos:position pos:line="1" pos:column="23"/></modifier></type>
<name pos:line="2" pos:column="1">snmp_var_new<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><name pos:line="2" pos:column="14">oid<pos:position pos:line="2" pos:column="17"/></name> <modifier pos:line="2" pos:column="18">*<pos:position pos:line="2" pos:column="19"/></modifier></type> <name pos:line="2" pos:column="20">Name<pos:position pos:line="2" pos:column="24"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="26">int<pos:position pos:line="2" pos:column="29"/></name></type> <name pos:line="2" pos:column="30">Len<pos:position pos:line="2" pos:column="33"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="34"/></parameter_list> <block pos:line="2" pos:column="35">{
    <decl_stmt><decl><type><name><name pos:line="3" pos:column="5">struct<pos:position pos:line="3" pos:column="11"/></name> <name pos:line="3" pos:column="12">variable_list<pos:position pos:line="3" pos:column="25"/></name></name> <modifier pos:line="3" pos:column="26">*<pos:position pos:line="3" pos:column="27"/></modifier></type><name pos:line="3" pos:column="27">New<pos:position pos:line="3" pos:column="30"/></name></decl>;<pos:position pos:line="3" pos:column="31"/></decl_stmt>

<cpp:ifdef pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">ifdef<pos:position pos:line="5" pos:column="7"/></cpp:directive> <name pos:line="5" pos:column="8">DEBUG_VARS<pos:position pos:line="5" pos:column="18"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">printf<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><literal type="string" pos:line="6" pos:column="12">"VARS: Creating.\n"<pos:position pos:line="6" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="33"/></expr_stmt>
<cpp:endif pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">endif<pos:position pos:line="7" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><name pos:line="9" pos:column="5">New<pos:position pos:line="9" pos:column="8"/></name> <operator pos:line="9" pos:column="9">=<pos:position pos:line="9" pos:column="10"/></operator> <call><name pos:line="9" pos:column="11">xmalloc<pos:position pos:line="9" pos:column="18"/></name><argument_list pos:line="9" pos:column="18">(<argument><expr><sizeof pos:line="9" pos:column="19">sizeof<argument_list pos:line="9" pos:column="25">(<argument><expr><operator pos:line="9" pos:column="26">*<pos:position pos:line="9" pos:column="27"/></operator><name pos:line="9" pos:column="27">New<pos:position pos:line="9" pos:column="30"/></name></expr></argument>)<pos:position pos:line="9" pos:column="31"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="33"/></expr_stmt>
    <comment type="block" pos:line="10" pos:column="5">/* XXX xmalloc never returns NULL */</comment>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name pos:line="11" pos:column="9">New<pos:position pos:line="11" pos:column="12"/></name> <operator pos:line="11" pos:column="13">==<pos:position pos:line="11" pos:column="15"/></operator> <name pos:line="11" pos:column="16">NULL<pos:position pos:line="11" pos:column="20"/></name></expr>)<pos:position pos:line="11" pos:column="21"/></condition><then pos:line="11" pos:column="21"> <block pos:line="11" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">snmp_set_api_error<pos:position pos:line="12" pos:column="27"/></name><argument_list pos:line="12" pos:column="27">(<argument><expr><name pos:line="12" pos:column="28">SNMPERR_OS_ERR<pos:position pos:line="12" pos:column="42"/></name></expr></argument>)<pos:position pos:line="12" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="44"/></expr_stmt>
        <return pos:line="13" pos:column="9">return <expr><operator pos:line="13" pos:column="16">(<pos:position pos:line="13" pos:column="17"/></operator><name pos:line="13" pos:column="17">NULL<pos:position pos:line="13" pos:column="21"/></name><operator pos:line="13" pos:column="21">)<pos:position pos:line="13" pos:column="22"/></operator></expr>;<pos:position pos:line="13" pos:column="23"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">memset<pos:position pos:line="15" pos:column="11"/></name><argument_list pos:line="15" pos:column="11">(<argument><expr><name pos:line="15" pos:column="12">New<pos:position pos:line="15" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="15" pos:column="17">'\0'<pos:position pos:line="15" pos:column="21"/></literal></expr></argument>, <argument><expr><sizeof pos:line="15" pos:column="23">sizeof<argument_list pos:line="15" pos:column="29">(<argument><expr pos:line="15" pos:column="30">struct <name pos:line="15" pos:column="37">variable_list<pos:position pos:line="15" pos:column="50"/></name></expr></argument>)<pos:position pos:line="15" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="15" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="53"/></expr_stmt>
    <comment type="block" pos:line="16" pos:column="5">/*  New-&gt;next_variable = NULL; */</comment>

    <expr_stmt><expr><name><name pos:line="18" pos:column="5">New<pos:position pos:line="18" pos:column="8"/></name><operator pos:line="18" pos:column="8">-&gt;<pos:position pos:line="18" pos:column="13"/></operator><name pos:line="18" pos:column="10">type<pos:position pos:line="18" pos:column="14"/></name></name> <operator pos:line="18" pos:column="15">=<pos:position pos:line="18" pos:column="16"/></operator> <name pos:line="18" pos:column="17">ASN_NULL<pos:position pos:line="18" pos:column="25"/></name></expr>;<pos:position pos:line="18" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="19" pos:column="5">New<pos:position pos:line="19" pos:column="8"/></name><operator pos:line="19" pos:column="8">-&gt;<pos:position pos:line="19" pos:column="13"/></operator><name pos:line="19" pos:column="10">name_length<pos:position pos:line="19" pos:column="21"/></name></name> <operator pos:line="19" pos:column="22">=<pos:position pos:line="19" pos:column="23"/></operator> <name pos:line="19" pos:column="24">Len<pos:position pos:line="19" pos:column="27"/></name></expr>;<pos:position pos:line="19" pos:column="28"/></expr_stmt>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name><name pos:line="21" pos:column="9">New<pos:position pos:line="21" pos:column="12"/></name><operator pos:line="21" pos:column="12">-&gt;<pos:position pos:line="21" pos:column="17"/></operator><name pos:line="21" pos:column="14">name_length<pos:position pos:line="21" pos:column="25"/></name></name> <operator pos:line="21" pos:column="26">==<pos:position pos:line="21" pos:column="28"/></operator> <literal type="number" pos:line="21" pos:column="29">0<pos:position pos:line="21" pos:column="30"/></literal></expr>)<pos:position pos:line="21" pos:column="31"/></condition><then pos:line="21" pos:column="31"> <block pos:line="21" pos:column="32">{
        <expr_stmt><expr><name><name pos:line="22" pos:column="9">New<pos:position pos:line="22" pos:column="12"/></name><operator pos:line="22" pos:column="12">-&gt;<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="14">name<pos:position pos:line="22" pos:column="18"/></name></name> <operator pos:line="22" pos:column="19">=<pos:position pos:line="22" pos:column="20"/></operator> <name pos:line="22" pos:column="21">NULL<pos:position pos:line="22" pos:column="25"/></name></expr>;<pos:position pos:line="22" pos:column="26"/></expr_stmt>
        <return pos:line="23" pos:column="9">return <expr><operator pos:line="23" pos:column="16">(<pos:position pos:line="23" pos:column="17"/></operator><name pos:line="23" pos:column="17">New<pos:position pos:line="23" pos:column="20"/></name><operator pos:line="23" pos:column="20">)<pos:position pos:line="23" pos:column="21"/></operator></expr>;<pos:position pos:line="23" pos:column="22"/></return>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="25" pos:column="5">New<pos:position pos:line="25" pos:column="8"/></name><operator pos:line="25" pos:column="8">-&gt;<pos:position pos:line="25" pos:column="13"/></operator><name pos:line="25" pos:column="10">name<pos:position pos:line="25" pos:column="14"/></name></name> <operator pos:line="25" pos:column="15">=<pos:position pos:line="25" pos:column="16"/></operator> <operator pos:line="25" pos:column="17">(<pos:position pos:line="25" pos:column="18"/></operator><name pos:line="25" pos:column="18">oid<pos:position pos:line="25" pos:column="21"/></name> <operator pos:line="25" pos:column="22">*<pos:position pos:line="25" pos:column="23"/></operator><operator pos:line="25" pos:column="23">)<pos:position pos:line="25" pos:column="24"/></operator> <call><name pos:line="25" pos:column="25">xmalloc<pos:position pos:line="25" pos:column="32"/></name><argument_list pos:line="25" pos:column="32">(<argument><expr><name pos:line="25" pos:column="33">Len<pos:position pos:line="25" pos:column="36"/></name> <operator pos:line="25" pos:column="37">*<pos:position pos:line="25" pos:column="38"/></operator> <sizeof pos:line="25" pos:column="39">sizeof<argument_list pos:line="25" pos:column="45">(<argument><expr><name pos:line="25" pos:column="46">oid<pos:position pos:line="25" pos:column="49"/></name></expr></argument>)<pos:position pos:line="25" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="25" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="52"/></expr_stmt>
    <comment type="block" pos:line="26" pos:column="5">/* XXX xmalloc never returns NULL */</comment>
    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name><name pos:line="27" pos:column="9">New<pos:position pos:line="27" pos:column="12"/></name><operator pos:line="27" pos:column="12">-&gt;<pos:position pos:line="27" pos:column="17"/></operator><name pos:line="27" pos:column="14">name<pos:position pos:line="27" pos:column="18"/></name></name> <operator pos:line="27" pos:column="19">==<pos:position pos:line="27" pos:column="21"/></operator> <name pos:line="27" pos:column="22">NULL<pos:position pos:line="27" pos:column="26"/></name></expr>)<pos:position pos:line="27" pos:column="27"/></condition><then pos:line="27" pos:column="27"> <block pos:line="27" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">xfree<pos:position pos:line="28" pos:column="14"/></name><argument_list pos:line="28" pos:column="14">(<argument><expr><name pos:line="28" pos:column="15">New<pos:position pos:line="28" pos:column="18"/></name></expr></argument>)<pos:position pos:line="28" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="20"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">snmp_set_api_error<pos:position pos:line="29" pos:column="27"/></name><argument_list pos:line="29" pos:column="27">(<argument><expr><name pos:line="29" pos:column="28">SNMPERR_OS_ERR<pos:position pos:line="29" pos:column="42"/></name></expr></argument>)<pos:position pos:line="29" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="44"/></expr_stmt>
        <return pos:line="30" pos:column="9">return <expr><operator pos:line="30" pos:column="16">(<pos:position pos:line="30" pos:column="17"/></operator><name pos:line="30" pos:column="17">NULL<pos:position pos:line="30" pos:column="21"/></name><operator pos:line="30" pos:column="21">)<pos:position pos:line="30" pos:column="22"/></operator></expr>;<pos:position pos:line="30" pos:column="23"/></return>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>
<cpp:ifdef pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">ifdef<pos:position pos:line="32" pos:column="7"/></cpp:directive> <name pos:line="32" pos:column="8">DEBUG_VARS<pos:position pos:line="32" pos:column="18"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">printf<pos:position pos:line="33" pos:column="11"/></name><argument_list pos:line="33" pos:column="11">(<argument><expr><literal type="string" pos:line="33" pos:column="12">"VARS: Copying name, size (%d)\n"<pos:position pos:line="33" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="47">Len<pos:position pos:line="33" pos:column="50"/></name></expr></argument>)<pos:position pos:line="33" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="52"/></expr_stmt>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif<pos:position pos:line="34" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="36" pos:column="5">/* Only copy a name if it was specified. */</comment>
    <if pos:line="37" pos:column="5">if <condition pos:line="37" pos:column="8">(<expr><name pos:line="37" pos:column="9">Name<pos:position pos:line="37" pos:column="13"/></name></expr>)<pos:position pos:line="37" pos:column="14"/></condition><then pos:line="37" pos:column="14">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="38" pos:column="9">xmemcpy<pos:position pos:line="38" pos:column="16"/></name><argument_list pos:line="38" pos:column="16">(<argument><expr><operator pos:line="38" pos:column="17">(<pos:position pos:line="38" pos:column="18"/></operator><name pos:line="38" pos:column="18">char<pos:position pos:line="38" pos:column="22"/></name> <operator pos:line="38" pos:column="23">*<pos:position pos:line="38" pos:column="24"/></operator><operator pos:line="38" pos:column="24">)<pos:position pos:line="38" pos:column="25"/></operator> <name><name pos:line="38" pos:column="26">New<pos:position pos:line="38" pos:column="29"/></name><operator pos:line="38" pos:column="29">-&gt;<pos:position pos:line="38" pos:column="34"/></operator><name pos:line="38" pos:column="31">name<pos:position pos:line="38" pos:column="35"/></name></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="37">(<pos:position pos:line="38" pos:column="38"/></operator><name pos:line="38" pos:column="38">char<pos:position pos:line="38" pos:column="42"/></name> <operator pos:line="38" pos:column="43">*<pos:position pos:line="38" pos:column="44"/></operator><operator pos:line="38" pos:column="44">)<pos:position pos:line="38" pos:column="45"/></operator> <name pos:line="38" pos:column="46">Name<pos:position pos:line="38" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="52">Len<pos:position pos:line="38" pos:column="55"/></name> <operator pos:line="38" pos:column="56">*<pos:position pos:line="38" pos:column="57"/></operator> <sizeof pos:line="38" pos:column="58">sizeof<argument_list pos:line="38" pos:column="64">(<argument><expr><name pos:line="38" pos:column="65">oid<pos:position pos:line="38" pos:column="68"/></name></expr></argument>)<pos:position pos:line="38" pos:column="69"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="38" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="71"/></expr_stmt></block></then></if>

    <return pos:line="40" pos:column="5">return <expr><operator pos:line="40" pos:column="12">(<pos:position pos:line="40" pos:column="13"/></operator><name pos:line="40" pos:column="13">New<pos:position pos:line="40" pos:column="16"/></name><operator pos:line="40" pos:column="16">)<pos:position pos:line="40" pos:column="17"/></operator></expr>;<pos:position pos:line="40" pos:column="18"/></return>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
