<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4741_last_repos.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">SBuf<pos:position pos:line="1" pos:column="5"/></name><operator pos:line="1" pos:column="5">::<pos:position pos:line="1" pos:column="7"/></operator><name pos:line="1" pos:column="7">size_type<pos:position pos:line="1" pos:column="16"/></name></name></type>
<name><name pos:line="2" pos:column="1">SBuf<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">find<pos:position pos:line="2" pos:column="11"/></name></name><parameter_list pos:line="2" pos:column="11">(<parameter><decl><type><specifier pos:line="2" pos:column="12">const<pos:position pos:line="2" pos:column="17"/></specifier> <name pos:line="2" pos:column="18">SBuf<pos:position pos:line="2" pos:column="22"/></name> <modifier pos:line="2" pos:column="23">&amp;<pos:position pos:line="2" pos:column="28"/></modifier></type><name pos:line="2" pos:column="24">needle<pos:position pos:line="2" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="32">size_type<pos:position pos:line="2" pos:column="41"/></name></type> <name pos:line="2" pos:column="42">startPos<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="51"/></parameter_list> <specifier pos:line="2" pos:column="52">const<pos:position pos:line="2" pos:column="57"/></specifier>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">startPos<pos:position pos:line="4" pos:column="17"/></name> <operator pos:line="4" pos:column="18">==<pos:position pos:line="4" pos:column="20"/></operator> <name pos:line="4" pos:column="21">npos<pos:position pos:line="4" pos:column="25"/></name></expr>)<pos:position pos:line="4" pos:column="26"/></condition><then pos:line="4" pos:column="26"> <block pos:line="4" pos:column="27">{ <comment type="line" pos:line="4" pos:column="29">// can't find anything if we look past end of SBuf</comment>
        <expr_stmt><expr><operator pos:line="5" pos:column="9">++<pos:position pos:line="5" pos:column="11"/></operator><name><name pos:line="5" pos:column="11">stats<pos:position pos:line="5" pos:column="16"/></name><operator pos:line="5" pos:column="16">.<pos:position pos:line="5" pos:column="17"/></operator><name pos:line="5" pos:column="17">find<pos:position pos:line="5" pos:column="21"/></name></name></expr>;<pos:position pos:line="5" pos:column="22"/></expr_stmt>
        <return pos:line="6" pos:column="9">return <expr><name pos:line="6" pos:column="16">npos<pos:position pos:line="6" pos:column="20"/></name></expr>;<pos:position pos:line="6" pos:column="21"/></return>
    }<pos:position pos:line="7" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="9" pos:column="5">// std::string allows needle to overhang hay but not start outside</comment>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">startPos<pos:position pos:line="10" pos:column="17"/></name> <operator pos:line="10" pos:column="18">&gt;<pos:position pos:line="10" pos:column="22"/></operator> <call><name pos:line="10" pos:column="20">length<pos:position pos:line="10" pos:column="26"/></name><argument_list pos:line="10" pos:column="26">()<pos:position pos:line="10" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="29"/></condition><then pos:line="10" pos:column="29"> <block pos:line="10" pos:column="30">{
        <expr_stmt><expr><operator pos:line="11" pos:column="9">++<pos:position pos:line="11" pos:column="11"/></operator><name><name pos:line="11" pos:column="11">stats<pos:position pos:line="11" pos:column="16"/></name><operator pos:line="11" pos:column="16">.<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="17">find<pos:position pos:line="11" pos:column="21"/></name></name></expr>;<pos:position pos:line="11" pos:column="22"/></expr_stmt>
        <return pos:line="12" pos:column="9">return <expr><name pos:line="12" pos:column="16">npos<pos:position pos:line="12" pos:column="20"/></name></expr>;<pos:position pos:line="12" pos:column="21"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="15" pos:column="5">// for empty needle std::string returns startPos</comment>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><call><name><name pos:line="16" pos:column="9">needle<pos:position pos:line="16" pos:column="15"/></name><operator pos:line="16" pos:column="15">.<pos:position pos:line="16" pos:column="16"/></operator><name pos:line="16" pos:column="16">length<pos:position pos:line="16" pos:column="22"/></name></name><argument_list pos:line="16" pos:column="22">()<pos:position pos:line="16" pos:column="24"/></argument_list></call> <operator pos:line="16" pos:column="25">==<pos:position pos:line="16" pos:column="27"/></operator> <literal type="number" pos:line="16" pos:column="28">0<pos:position pos:line="16" pos:column="29"/></literal></expr>)<pos:position pos:line="16" pos:column="30"/></condition><then pos:line="16" pos:column="30"> <block pos:line="16" pos:column="31">{
        <expr_stmt><expr><operator pos:line="17" pos:column="9">++<pos:position pos:line="17" pos:column="11"/></operator><name><name pos:line="17" pos:column="11">stats<pos:position pos:line="17" pos:column="16"/></name><operator pos:line="17" pos:column="16">.<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="17">find<pos:position pos:line="17" pos:column="21"/></name></name></expr>;<pos:position pos:line="17" pos:column="22"/></expr_stmt>
        <return pos:line="18" pos:column="9">return <expr><name pos:line="18" pos:column="16">startPos<pos:position pos:line="18" pos:column="24"/></name></expr>;<pos:position pos:line="18" pos:column="25"/></return>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="21" pos:column="5">// if needle length is 1 use the char search</comment>
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><call><name><name pos:line="22" pos:column="9">needle<pos:position pos:line="22" pos:column="15"/></name><operator pos:line="22" pos:column="15">.<pos:position pos:line="22" pos:column="16"/></operator><name pos:line="22" pos:column="16">length<pos:position pos:line="22" pos:column="22"/></name></name><argument_list pos:line="22" pos:column="22">()<pos:position pos:line="22" pos:column="24"/></argument_list></call> <operator pos:line="22" pos:column="25">==<pos:position pos:line="22" pos:column="27"/></operator> <literal type="number" pos:line="22" pos:column="28">1<pos:position pos:line="22" pos:column="29"/></literal></expr>)<pos:position pos:line="22" pos:column="30"/></condition><then pos:line="22" pos:column="30">
        <block type="pseudo"><return pos:line="23" pos:column="9">return <expr><call><name pos:line="23" pos:column="16">find<pos:position pos:line="23" pos:column="20"/></name><argument_list pos:line="23" pos:column="20">(<argument><expr><name><name pos:line="23" pos:column="21">needle<pos:position pos:line="23" pos:column="27"/></name><index pos:line="23" pos:column="27">[<expr><literal type="number" pos:line="23" pos:column="28">0<pos:position pos:line="23" pos:column="29"/></literal></expr>]<pos:position pos:line="23" pos:column="30"/></index></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="32">startPos<pos:position pos:line="23" pos:column="40"/></name></expr></argument>)<pos:position pos:line="23" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="42"/></return></block></then></if>

    <expr_stmt><expr><operator pos:line="25" pos:column="5">++<pos:position pos:line="25" pos:column="7"/></operator><name><name pos:line="25" pos:column="7">stats<pos:position pos:line="25" pos:column="12"/></name><operator pos:line="25" pos:column="12">.<pos:position pos:line="25" pos:column="13"/></operator><name pos:line="25" pos:column="13">find<pos:position pos:line="25" pos:column="17"/></name></name></expr>;<pos:position pos:line="25" pos:column="18"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="27" pos:column="5">char<pos:position pos:line="27" pos:column="9"/></name> <modifier pos:line="27" pos:column="10">*<pos:position pos:line="27" pos:column="11"/></modifier></type><name pos:line="27" pos:column="11">start<pos:position pos:line="27" pos:column="16"/></name> <init pos:line="27" pos:column="17">= <expr><call><name pos:line="27" pos:column="19">buf<pos:position pos:line="27" pos:column="22"/></name><argument_list pos:line="27" pos:column="22">()<pos:position pos:line="27" pos:column="24"/></argument_list></call><operator pos:line="27" pos:column="24">+<pos:position pos:line="27" pos:column="25"/></operator><name pos:line="27" pos:column="25">startPos<pos:position pos:line="27" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="27" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="28" pos:column="5">char<pos:position pos:line="28" pos:column="9"/></name> <modifier pos:line="28" pos:column="10">*<pos:position pos:line="28" pos:column="11"/></modifier></type><name pos:line="28" pos:column="11">lastPossible<pos:position pos:line="28" pos:column="23"/></name> <init pos:line="28" pos:column="24">= <expr><call><name pos:line="28" pos:column="26">buf<pos:position pos:line="28" pos:column="29"/></name><argument_list pos:line="28" pos:column="29">()<pos:position pos:line="28" pos:column="31"/></argument_list></call><operator pos:line="28" pos:column="31">+<pos:position pos:line="28" pos:column="32"/></operator><call><name pos:line="28" pos:column="32">length<pos:position pos:line="28" pos:column="38"/></name><argument_list pos:line="28" pos:column="38">()<pos:position pos:line="28" pos:column="40"/></argument_list></call><operator pos:line="28" pos:column="40">-<pos:position pos:line="28" pos:column="41"/></operator><call><name><name pos:line="28" pos:column="41">needle<pos:position pos:line="28" pos:column="47"/></name><operator pos:line="28" pos:column="47">.<pos:position pos:line="28" pos:column="48"/></operator><name pos:line="28" pos:column="48">length<pos:position pos:line="28" pos:column="54"/></name></name><argument_list pos:line="28" pos:column="54">()<pos:position pos:line="28" pos:column="56"/></argument_list></call><operator pos:line="28" pos:column="56">+<pos:position pos:line="28" pos:column="57"/></operator><literal type="number" pos:line="28" pos:column="57">1<pos:position pos:line="28" pos:column="58"/></literal></expr></init></decl>;<pos:position pos:line="28" pos:column="59"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="29" pos:column="5">char<pos:position pos:line="29" pos:column="9"/></name></type> <name pos:line="29" pos:column="10">needleBegin<pos:position pos:line="29" pos:column="21"/></name> <init pos:line="29" pos:column="22">= <expr><name><name pos:line="29" pos:column="24">needle<pos:position pos:line="29" pos:column="30"/></name><index pos:line="29" pos:column="30">[<expr><literal type="number" pos:line="29" pos:column="31">0<pos:position pos:line="29" pos:column="32"/></literal></expr>]<pos:position pos:line="29" pos:column="33"/></index></name></expr></init></decl>;<pos:position pos:line="29" pos:column="34"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="31" pos:column="5">debugs<pos:position pos:line="31" pos:column="11"/></name><argument_list pos:line="31" pos:column="11">(<argument><expr><literal type="number" pos:line="31" pos:column="12">24<pos:position pos:line="31" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="16">7<pos:position pos:line="31" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="19">"looking for "<pos:position pos:line="31" pos:column="33"/></literal> <operator pos:line="31" pos:column="34">&lt;&lt;<pos:position pos:line="31" pos:column="42"/></operator> <name pos:line="31" pos:column="37">needle<pos:position pos:line="31" pos:column="43"/></name> <operator pos:line="31" pos:column="44">&lt;&lt;<pos:position pos:line="31" pos:column="52"/></operator> <literal type="string" pos:line="31" pos:column="47">"starting at "<pos:position pos:line="31" pos:column="61"/></literal> <operator pos:line="31" pos:column="62">&lt;&lt;<pos:position pos:line="31" pos:column="70"/></operator> <name pos:line="31" pos:column="65">startPos<pos:position pos:line="31" pos:column="73"/></name> <operator pos:line="31" pos:column="74">&lt;&lt;<pos:position pos:line="31" pos:column="82"/></operator>
           <literal type="string" pos:line="32" pos:column="12">" in id "<pos:position pos:line="32" pos:column="21"/></literal> <operator pos:line="32" pos:column="22">&lt;&lt;<pos:position pos:line="32" pos:column="30"/></operator> <name pos:line="32" pos:column="25">id<pos:position pos:line="32" pos:column="27"/></name></expr></argument>)<pos:position pos:line="32" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="29"/></expr_stmt>
    <while pos:line="33" pos:column="5">while <condition pos:line="33" pos:column="11">(<expr><name pos:line="33" pos:column="12">start<pos:position pos:line="33" pos:column="17"/></name> <operator pos:line="33" pos:column="18">&lt;<pos:position pos:line="33" pos:column="22"/></operator> <name pos:line="33" pos:column="20">lastPossible<pos:position pos:line="33" pos:column="32"/></name></expr>)<pos:position pos:line="33" pos:column="33"/></condition> <block pos:line="33" pos:column="34">{
        <decl_stmt><decl><type><name pos:line="34" pos:column="9">char<pos:position pos:line="34" pos:column="13"/></name> <modifier pos:line="34" pos:column="14">*<pos:position pos:line="34" pos:column="15"/></modifier></type><name pos:line="34" pos:column="15">tmp<pos:position pos:line="34" pos:column="18"/></name></decl>;<pos:position pos:line="34" pos:column="19"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">debugs<pos:position pos:line="35" pos:column="15"/></name><argument_list pos:line="35" pos:column="15">(<argument><expr><literal type="number" pos:line="35" pos:column="16">24<pos:position pos:line="35" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="20">8<pos:position pos:line="35" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="23">" begin="<pos:position pos:line="35" pos:column="32"/></literal> <operator pos:line="35" pos:column="33">&lt;&lt;<pos:position pos:line="35" pos:column="41"/></operator> <operator pos:line="35" pos:column="36">(<pos:position pos:line="35" pos:column="37"/></operator><name pos:line="35" pos:column="37">void<pos:position pos:line="35" pos:column="41"/></name> <operator pos:line="35" pos:column="42">*<pos:position pos:line="35" pos:column="43"/></operator><operator pos:line="35" pos:column="43">)<pos:position pos:line="35" pos:column="44"/></operator> <name pos:line="35" pos:column="45">start<pos:position pos:line="35" pos:column="50"/></name> <operator pos:line="35" pos:column="51">&lt;&lt;<pos:position pos:line="35" pos:column="59"/></operator>
               <literal type="string" pos:line="36" pos:column="16">", lastPossible="<pos:position pos:line="36" pos:column="33"/></literal> <operator pos:line="36" pos:column="34">&lt;&lt;<pos:position pos:line="36" pos:column="42"/></operator> <operator pos:line="36" pos:column="37">(<pos:position pos:line="36" pos:column="38"/></operator><name pos:line="36" pos:column="38">void<pos:position pos:line="36" pos:column="42"/></name><operator pos:line="36" pos:column="42">*<pos:position pos:line="36" pos:column="43"/></operator><operator pos:line="36" pos:column="43">)<pos:position pos:line="36" pos:column="44"/></operator> <name pos:line="36" pos:column="45">lastPossible<pos:position pos:line="36" pos:column="57"/></name></expr></argument> )<pos:position pos:line="36" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="60"/></expr_stmt>
        <expr_stmt><expr><name pos:line="37" pos:column="9">tmp<pos:position pos:line="37" pos:column="12"/></name> <operator pos:line="37" pos:column="13">=<pos:position pos:line="37" pos:column="14"/></operator> <cast type="static" pos:line="37" pos:column="15">static_cast<argument_list type="generic" pos:line="37" pos:column="26">&lt;<argument><expr><name pos:line="37" pos:column="27">char<pos:position pos:line="37" pos:column="31"/></name> <operator pos:line="37" pos:column="32">*<pos:position pos:line="37" pos:column="33"/></operator></expr></argument>&gt;<pos:position pos:line="37" pos:column="37"/></argument_list><argument_list pos:line="37" pos:column="34">(<argument><expr><call><name pos:line="37" pos:column="35">memchr<pos:position pos:line="37" pos:column="41"/></name><argument_list pos:line="37" pos:column="41">(<argument><expr><name pos:line="37" pos:column="42">start<pos:position pos:line="37" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="49">needleBegin<pos:position pos:line="37" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="62">lastPossible<pos:position pos:line="37" pos:column="74"/></name><operator pos:line="37" pos:column="74">-<pos:position pos:line="37" pos:column="75"/></operator><name pos:line="37" pos:column="75">start<pos:position pos:line="37" pos:column="80"/></name></expr></argument>)<pos:position pos:line="37" pos:column="81"/></argument_list></call></expr></argument>)<pos:position pos:line="37" pos:column="82"/></argument_list></cast></expr>;<pos:position pos:line="37" pos:column="83"/></expr_stmt>
        <if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name pos:line="38" pos:column="13">tmp<pos:position pos:line="38" pos:column="16"/></name> <operator pos:line="38" pos:column="17">==<pos:position pos:line="38" pos:column="19"/></operator> <name pos:line="38" pos:column="20">NULL<pos:position pos:line="38" pos:column="24"/></name></expr>)<pos:position pos:line="38" pos:column="25"/></condition><then pos:line="38" pos:column="25"> <block pos:line="38" pos:column="26">{
            <expr_stmt><expr><call><name pos:line="39" pos:column="13">debugs<pos:position pos:line="39" pos:column="19"/></name><argument_list pos:line="39" pos:column="19">(<argument><expr><literal type="number" pos:line="39" pos:column="20">24<pos:position pos:line="39" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="24">8<pos:position pos:line="39" pos:column="25"/></literal></expr></argument> , <argument><expr><literal type="string" pos:line="39" pos:column="28">"First byte not found"<pos:position pos:line="39" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="52"/></expr_stmt>
            <return pos:line="40" pos:column="13">return <expr><name pos:line="40" pos:column="20">npos<pos:position pos:line="40" pos:column="24"/></name></expr>;<pos:position pos:line="40" pos:column="25"/></return>
        }<pos:position pos:line="41" pos:column="10"/></block></then></if>
        <comment type="line" pos:line="42" pos:column="9">// lastPossible guarrantees no out-of-bounds with memcmp()</comment>
        <if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><literal type="number" pos:line="43" pos:column="13">0<pos:position pos:line="43" pos:column="14"/></literal> <operator pos:line="43" pos:column="15">==<pos:position pos:line="43" pos:column="17"/></operator> <call><name pos:line="43" pos:column="18">memcmp<pos:position pos:line="43" pos:column="24"/></name><argument_list pos:line="43" pos:column="24">(<argument><expr><call><name><name pos:line="43" pos:column="25">needle<pos:position pos:line="43" pos:column="31"/></name><operator pos:line="43" pos:column="31">.<pos:position pos:line="43" pos:column="32"/></operator><name pos:line="43" pos:column="32">buf<pos:position pos:line="43" pos:column="35"/></name></name><argument_list pos:line="43" pos:column="35">()<pos:position pos:line="43" pos:column="37"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="43" pos:column="39">tmp<pos:position pos:line="43" pos:column="42"/></name></expr></argument>, <argument><expr><call><name><name pos:line="43" pos:column="44">needle<pos:position pos:line="43" pos:column="50"/></name><operator pos:line="43" pos:column="50">.<pos:position pos:line="43" pos:column="51"/></operator><name pos:line="43" pos:column="51">length<pos:position pos:line="43" pos:column="57"/></name></name><argument_list pos:line="43" pos:column="57">()<pos:position pos:line="43" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="43" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="43" pos:column="61"/></condition><then pos:line="43" pos:column="61"> <block pos:line="43" pos:column="62">{
            <expr_stmt><expr><call><name pos:line="44" pos:column="13">debugs<pos:position pos:line="44" pos:column="19"/></name><argument_list pos:line="44" pos:column="19">(<argument><expr><literal type="number" pos:line="44" pos:column="20">24<pos:position pos:line="44" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="24">8<pos:position pos:line="44" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="27">"Found at "<pos:position pos:line="44" pos:column="38"/></literal> <operator pos:line="44" pos:column="39">&lt;&lt;<pos:position pos:line="44" pos:column="47"/></operator> <operator pos:line="44" pos:column="42">(<pos:position pos:line="44" pos:column="43"/></operator><name pos:line="44" pos:column="43">tmp<pos:position pos:line="44" pos:column="46"/></name><operator pos:line="44" pos:column="46">-<pos:position pos:line="44" pos:column="47"/></operator><call><name pos:line="44" pos:column="47">buf<pos:position pos:line="44" pos:column="50"/></name><argument_list pos:line="44" pos:column="50">()<pos:position pos:line="44" pos:column="52"/></argument_list></call><operator pos:line="44" pos:column="52">)<pos:position pos:line="44" pos:column="53"/></operator></expr></argument>)<pos:position pos:line="44" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="55"/></expr_stmt>
            <return pos:line="45" pos:column="13">return <expr><operator pos:line="45" pos:column="20">(<pos:position pos:line="45" pos:column="21"/></operator><name pos:line="45" pos:column="21">tmp<pos:position pos:line="45" pos:column="24"/></name><operator pos:line="45" pos:column="24">-<pos:position pos:line="45" pos:column="25"/></operator><call><name pos:line="45" pos:column="25">buf<pos:position pos:line="45" pos:column="28"/></name><argument_list pos:line="45" pos:column="28">()<pos:position pos:line="45" pos:column="30"/></argument_list></call><operator pos:line="45" pos:column="30">)<pos:position pos:line="45" pos:column="31"/></operator></expr>;<pos:position pos:line="45" pos:column="32"/></return>
        }<pos:position pos:line="46" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="47" pos:column="9">start<pos:position pos:line="47" pos:column="14"/></name> <operator pos:line="47" pos:column="15">=<pos:position pos:line="47" pos:column="16"/></operator> <name pos:line="47" pos:column="17">tmp<pos:position pos:line="47" pos:column="20"/></name><operator pos:line="47" pos:column="20">+<pos:position pos:line="47" pos:column="21"/></operator><literal type="number" pos:line="47" pos:column="21">1<pos:position pos:line="47" pos:column="22"/></literal></expr>;<pos:position pos:line="47" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="48" pos:column="6"/></block></while>
    <expr_stmt><expr><call><name pos:line="49" pos:column="5">debugs<pos:position pos:line="49" pos:column="11"/></name><argument_list pos:line="49" pos:column="11">(<argument><expr><literal type="number" pos:line="49" pos:column="12">24<pos:position pos:line="49" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="49" pos:column="16">8<pos:position pos:line="49" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="19">"not found"<pos:position pos:line="49" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="32"/></expr_stmt>
    <return pos:line="50" pos:column="5">return <expr><name pos:line="50" pos:column="12">npos<pos:position pos:line="50" pos:column="16"/></name></expr>;<pos:position pos:line="50" pos:column="17"/></return>
}<pos:position pos:line="51" pos:column="2"/></block></function></unit>
