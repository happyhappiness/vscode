<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4859_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Http<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">ContentLengthInterpreter<pos:position pos:line="2" pos:column="31"/></name><operator pos:line="2" pos:column="31">::<pos:position pos:line="2" pos:column="33"/></operator><name pos:line="2" pos:column="33">checkList<pos:position pos:line="2" pos:column="42"/></name></name><parameter_list pos:line="2" pos:column="42">(<parameter><decl><type><specifier pos:line="2" pos:column="43">const<pos:position pos:line="2" pos:column="48"/></specifier> <name pos:line="2" pos:column="49">String<pos:position pos:line="2" pos:column="55"/></name> <modifier pos:line="2" pos:column="56">&amp;<pos:position pos:line="2" pos:column="61"/></modifier></type><name pos:line="2" pos:column="57">list<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="62"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">Must<pos:position pos:line="4" pos:column="9"/></name><argument_list pos:line="4" pos:column="9">(<argument><expr><operator pos:line="4" pos:column="10">!<pos:position pos:line="4" pos:column="11"/></operator><name pos:line="4" pos:column="11">sawBad<pos:position pos:line="4" pos:column="17"/></name></expr></argument>)<pos:position pos:line="4" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="19"/></expr_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">!<pos:position pos:line="6" pos:column="10"/></operator><name><name pos:line="6" pos:column="10">Config<pos:position pos:line="6" pos:column="16"/></name><operator pos:line="6" pos:column="16">.<pos:position pos:line="6" pos:column="17"/></operator><name pos:line="6" pos:column="17">onoff<pos:position pos:line="6" pos:column="22"/></name><operator pos:line="6" pos:column="22">.<pos:position pos:line="6" pos:column="23"/></operator><name pos:line="6" pos:column="23">relaxed_header_parser<pos:position pos:line="6" pos:column="44"/></name></name></expr>)<pos:position pos:line="6" pos:column="45"/></condition><then pos:line="6" pos:column="45"> <block pos:line="6" pos:column="46">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">debugs<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><literal type="number" pos:line="7" pos:column="16">55<pos:position pos:line="7" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="20">debugLevel<pos:position pos:line="7" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="32">"WARNING: List-like"<pos:position pos:line="7" pos:column="52"/></literal> <operator pos:line="7" pos:column="53">&lt;&lt;<pos:position pos:line="7" pos:column="61"/></operator> <call><name pos:line="7" pos:column="56">Raw<pos:position pos:line="7" pos:column="59"/></name><argument_list pos:line="7" pos:column="59">(<argument><expr><literal type="string" pos:line="7" pos:column="60">"Content-Length"<pos:position pos:line="7" pos:column="76"/></literal></expr></argument>, <argument><expr><call><name><name pos:line="7" pos:column="78">list<pos:position pos:line="7" pos:column="82"/></name><operator pos:line="7" pos:column="82">.<pos:position pos:line="7" pos:column="83"/></operator><name pos:line="7" pos:column="83">rawBuf<pos:position pos:line="7" pos:column="89"/></name></name><argument_list pos:line="7" pos:column="89">()<pos:position pos:line="7" pos:column="91"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="7" pos:column="93">list<pos:position pos:line="7" pos:column="97"/></name><operator pos:line="7" pos:column="97">.<pos:position pos:line="7" pos:column="98"/></operator><name pos:line="7" pos:column="98">size<pos:position pos:line="7" pos:column="102"/></name></name><argument_list pos:line="7" pos:column="102">()<pos:position pos:line="7" pos:column="104"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="105"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="106"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="107"/></expr_stmt>
        <expr_stmt><expr><name pos:line="8" pos:column="9">sawBad<pos:position pos:line="8" pos:column="15"/></name> <operator pos:line="8" pos:column="16">=<pos:position pos:line="8" pos:column="17"/></operator> <literal type="boolean" pos:line="8" pos:column="18">true<pos:position pos:line="8" pos:column="22"/></literal></expr>;<pos:position pos:line="8" pos:column="23"/></expr_stmt>
        <return pos:line="9" pos:column="9">return <expr><literal type="boolean" pos:line="9" pos:column="16">false<pos:position pos:line="9" pos:column="21"/></literal></expr>;<pos:position pos:line="9" pos:column="22"/></return>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="12" pos:column="5">needsSanitizing<pos:position pos:line="12" pos:column="20"/></name> <operator pos:line="12" pos:column="21">=<pos:position pos:line="12" pos:column="22"/></operator> <literal type="boolean" pos:line="12" pos:column="23">true<pos:position pos:line="12" pos:column="27"/></literal></expr>;<pos:position pos:line="12" pos:column="28"/></expr_stmt> <comment type="line" pos:line="12" pos:column="29">// remove extra commas (at least)</comment>

    <decl_stmt><decl><type><specifier pos:line="14" pos:column="5">const<pos:position pos:line="14" pos:column="10"/></specifier> <name pos:line="14" pos:column="11">char<pos:position pos:line="14" pos:column="15"/></name> <modifier pos:line="14" pos:column="16">*<pos:position pos:line="14" pos:column="17"/></modifier></type><name pos:line="14" pos:column="17">pos<pos:position pos:line="14" pos:column="20"/></name> <init pos:line="14" pos:column="21">= <expr><literal type="null" pos:line="14" pos:column="23">nullptr<pos:position pos:line="14" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="15" pos:column="5">const<pos:position pos:line="15" pos:column="10"/></specifier> <name pos:line="15" pos:column="11">char<pos:position pos:line="15" pos:column="15"/></name> <modifier pos:line="15" pos:column="16">*<pos:position pos:line="15" pos:column="17"/></modifier></type><name pos:line="15" pos:column="17">item<pos:position pos:line="15" pos:column="21"/></name> <init pos:line="15" pos:column="22">= <expr><literal type="null" pos:line="15" pos:column="24">nullptr<pos:position pos:line="15" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="15" pos:column="32"/></decl_stmt><empty_stmt pos:line="15" pos:column="32">;<pos:position pos:line="15" pos:column="33"/></empty_stmt>
    <decl_stmt><decl><type><name pos:line="16" pos:column="5">int<pos:position pos:line="16" pos:column="8"/></name></type> <name pos:line="16" pos:column="9">ilen<pos:position pos:line="16" pos:column="13"/></name> <init pos:line="16" pos:column="14">= <expr><operator pos:line="16" pos:column="16">-<pos:position pos:line="16" pos:column="17"/></operator><literal type="number" pos:line="16" pos:column="17">1<pos:position pos:line="16" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="16" pos:column="19"/></decl_stmt>
    <while pos:line="17" pos:column="5">while <condition pos:line="17" pos:column="11">(<expr><call><name pos:line="17" pos:column="12">strListGetItem<pos:position pos:line="17" pos:column="26"/></name><argument_list pos:line="17" pos:column="26">(<argument><expr><operator pos:line="17" pos:column="27">&amp;<pos:position pos:line="17" pos:column="32"/></operator><name pos:line="17" pos:column="28">list<pos:position pos:line="17" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="17" pos:column="34">','<pos:position pos:line="17" pos:column="37"/></literal></expr></argument>, <argument><expr><operator pos:line="17" pos:column="39">&amp;<pos:position pos:line="17" pos:column="44"/></operator><name pos:line="17" pos:column="40">item<pos:position pos:line="17" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="46">&amp;<pos:position pos:line="17" pos:column="51"/></operator><name pos:line="17" pos:column="47">ilen<pos:position pos:line="17" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="53">&amp;<pos:position pos:line="17" pos:column="58"/></operator><name pos:line="17" pos:column="54">pos<pos:position pos:line="17" pos:column="57"/></name></expr></argument>)<pos:position pos:line="17" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="59"/></condition> <block pos:line="17" pos:column="60">{
        <if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><operator pos:line="18" pos:column="13">!<pos:position pos:line="18" pos:column="14"/></operator><call><name pos:line="18" pos:column="14">checkValue<pos:position pos:line="18" pos:column="24"/></name><argument_list pos:line="18" pos:column="24">(<argument><expr><name pos:line="18" pos:column="25">item<pos:position pos:line="18" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="31">ilen<pos:position pos:line="18" pos:column="35"/></name></expr></argument>)<pos:position pos:line="18" pos:column="36"/></argument_list></call> <operator pos:line="18" pos:column="37">&amp;&amp;<pos:position pos:line="18" pos:column="47"/></operator> <name pos:line="18" pos:column="40">sawBad<pos:position pos:line="18" pos:column="46"/></name></expr>)<pos:position pos:line="18" pos:column="47"/></condition><then pos:line="18" pos:column="47">
            <block type="pseudo"><break pos:line="19" pos:column="13">break;<pos:position pos:line="19" pos:column="19"/></break></block></then></if>
        <comment type="line" pos:line="20" pos:column="9">// keep going after a duplicate value to find conflicting ones</comment>
    }<pos:position pos:line="21" pos:column="6"/></block></while>
    <return pos:line="22" pos:column="5">return <expr><literal type="boolean" pos:line="22" pos:column="12">false<pos:position pos:line="22" pos:column="17"/></literal></expr>;<pos:position pos:line="22" pos:column="18"/></return> <comment type="line" pos:line="22" pos:column="19">// no need to keep this list field; it will be sanitized away</comment>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
