<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3647_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ConnStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">abortChunkedRequestBody<pos:position pos:line="2" pos:column="39"/></name></name><parameter_list pos:line="2" pos:column="39">(<parameter><decl><type><specifier pos:line="2" pos:column="40">const<pos:position pos:line="2" pos:column="45"/></specifier> <name pos:line="2" pos:column="46">err_type<pos:position pos:line="2" pos:column="54"/></name></type> <name pos:line="2" pos:column="55">error<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="61"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">finishDechunkingRequest<pos:position pos:line="4" pos:column="28"/></name><argument_list pos:line="4" pos:column="28">(<argument><expr><literal type="boolean" pos:line="4" pos:column="29">false<pos:position pos:line="4" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="36"/></expr_stmt>

    <comment type="line" pos:line="6" pos:column="5">// XXX: The code below works if we fail during initial request parsing,</comment>
    <comment type="line" pos:line="7" pos:column="5">// but if we fail when the server connection is used already, the server may send</comment>
    <comment type="line" pos:line="8" pos:column="5">// us its response too, causing various assertions. How to prevent that?</comment>
<cpp:if pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">if<pos:position pos:line="9" pos:column="4"/></cpp:directive> <expr><name pos:line="9" pos:column="5">WE_KNOW_HOW_TO_SEND_ERRORS<pos:position pos:line="9" pos:column="31"/></name></expr></cpp:if>
    <decl_stmt><decl><type><name><name pos:line="10" pos:column="5">ClientSocketContext<pos:position pos:line="10" pos:column="24"/></name><operator pos:line="10" pos:column="24">::<pos:position pos:line="10" pos:column="26"/></operator><name pos:line="10" pos:column="26">Pointer<pos:position pos:line="10" pos:column="33"/></name></name></type> <name pos:line="10" pos:column="34">context<pos:position pos:line="10" pos:column="41"/></name> <init pos:line="10" pos:column="42">= <expr><call><name pos:line="10" pos:column="44">getCurrentContext<pos:position pos:line="10" pos:column="61"/></name><argument_list pos:line="10" pos:column="61">()<pos:position pos:line="10" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="64"/></decl_stmt>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name pos:line="11" pos:column="9">context<pos:position pos:line="11" pos:column="16"/></name> <operator pos:line="11" pos:column="17">!=<pos:position pos:line="11" pos:column="19"/></operator> <name pos:line="11" pos:column="20">NULL<pos:position pos:line="11" pos:column="24"/></name> <operator pos:line="11" pos:column="25">&amp;&amp;<pos:position pos:line="11" pos:column="35"/></operator> <operator pos:line="11" pos:column="28">!<pos:position pos:line="11" pos:column="29"/></operator><name><name pos:line="11" pos:column="29">context<pos:position pos:line="11" pos:column="36"/></name><operator pos:line="11" pos:column="36">-&gt;<pos:position pos:line="11" pos:column="41"/></operator><name pos:line="11" pos:column="38">http<pos:position pos:line="11" pos:column="42"/></name><operator pos:line="11" pos:column="42">-&gt;<pos:position pos:line="11" pos:column="47"/></operator><name pos:line="11" pos:column="44">out<pos:position pos:line="11" pos:column="47"/></name><operator pos:line="11" pos:column="47">.<pos:position pos:line="11" pos:column="48"/></operator><name pos:line="11" pos:column="48">offset<pos:position pos:line="11" pos:column="54"/></name></name></expr>)<pos:position pos:line="11" pos:column="55"/></condition><then pos:line="11" pos:column="55"> <block pos:line="11" pos:column="56">{ <comment type="line" pos:line="11" pos:column="58">// output nothing yet</comment>
        <decl_stmt><decl><type><name pos:line="12" pos:column="9">clientStreamNode<pos:position pos:line="12" pos:column="25"/></name> <modifier pos:line="12" pos:column="26">*<pos:position pos:line="12" pos:column="27"/></modifier></type><name pos:line="12" pos:column="27">node<pos:position pos:line="12" pos:column="31"/></name> <init pos:line="12" pos:column="32">= <expr><call><name><name pos:line="12" pos:column="34">context<pos:position pos:line="12" pos:column="41"/></name><operator pos:line="12" pos:column="41">-&gt;<pos:position pos:line="12" pos:column="46"/></operator><name pos:line="12" pos:column="43">getClientReplyContext<pos:position pos:line="12" pos:column="64"/></name></name><argument_list pos:line="12" pos:column="64">()<pos:position pos:line="12" pos:column="66"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="67"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="13" pos:column="9">clientReplyContext<pos:position pos:line="13" pos:column="27"/></name> <modifier pos:line="13" pos:column="28">*<pos:position pos:line="13" pos:column="29"/></modifier></type><name pos:line="13" pos:column="29">repContext<pos:position pos:line="13" pos:column="39"/></name> <init pos:line="13" pos:column="40">= <expr><cast type="dynamic" pos:line="13" pos:column="42">dynamic_cast<argument_list type="generic" pos:line="13" pos:column="54">&lt;<argument><expr><name pos:line="13" pos:column="55">clientReplyContext<pos:position pos:line="13" pos:column="73"/></name><operator pos:line="13" pos:column="73">*<pos:position pos:line="13" pos:column="74"/></operator></expr></argument>&gt;<pos:position pos:line="13" pos:column="78"/></argument_list><argument_list pos:line="13" pos:column="75">(<argument><expr><call><name><name pos:line="13" pos:column="76">node<pos:position pos:line="13" pos:column="80"/></name><operator pos:line="13" pos:column="80">-&gt;<pos:position pos:line="13" pos:column="85"/></operator><name pos:line="13" pos:column="82">data<pos:position pos:line="13" pos:column="86"/></name><operator pos:line="13" pos:column="86">.<pos:position pos:line="13" pos:column="87"/></operator><name pos:line="13" pos:column="87">getRaw<pos:position pos:line="13" pos:column="93"/></name></name><argument_list pos:line="13" pos:column="93">()<pos:position pos:line="13" pos:column="95"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="96"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="13" pos:column="97"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">assert<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><name pos:line="14" pos:column="16">repContext<pos:position pos:line="14" pos:column="26"/></name></expr></argument>)<pos:position pos:line="14" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="28"/></expr_stmt>
        <decl_stmt><decl><type><specifier pos:line="15" pos:column="9">const<pos:position pos:line="15" pos:column="14"/></specifier> <name><name pos:line="15" pos:column="15">Http<pos:position pos:line="15" pos:column="19"/></name><operator pos:line="15" pos:column="19">::<pos:position pos:line="15" pos:column="21"/></operator><name pos:line="15" pos:column="21">StatusCode<pos:position pos:line="15" pos:column="31"/></name></name></type> <name pos:line="15" pos:column="32">scode<pos:position pos:line="15" pos:column="37"/></name> <init pos:line="15" pos:column="38">= <expr><ternary><condition><expr><operator pos:line="15" pos:column="40">(<pos:position pos:line="15" pos:column="41"/></operator><name pos:line="15" pos:column="41">error<pos:position pos:line="15" pos:column="46"/></name> <operator pos:line="15" pos:column="47">==<pos:position pos:line="15" pos:column="49"/></operator> <name pos:line="15" pos:column="50">ERR_TOO_BIG<pos:position pos:line="15" pos:column="61"/></name><operator pos:line="15" pos:column="61">)<pos:position pos:line="15" pos:column="62"/></operator></expr> ?<pos:position pos:line="15" pos:column="64"/></condition><then pos:line="15" pos:column="64">
                                       <expr><name><name pos:line="16" pos:column="40">Http<pos:position pos:line="16" pos:column="44"/></name><operator pos:line="16" pos:column="44">::<pos:position pos:line="16" pos:column="46"/></operator><name pos:line="16" pos:column="46">scPayloadTooLarge<pos:position pos:line="16" pos:column="63"/></name></name></expr> <pos:position pos:line="16" pos:column="64"/></then><else pos:line="16" pos:column="64">: <expr><name pos:line="16" pos:column="66">HTTP_BAD_REQUEST<pos:position pos:line="16" pos:column="82"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="16" pos:column="83"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="17" pos:column="9">repContext<pos:position pos:line="17" pos:column="19"/></name><operator pos:line="17" pos:column="19">-&gt;<pos:position pos:line="17" pos:column="24"/></operator><name pos:line="17" pos:column="21">setReplyToError<pos:position pos:line="17" pos:column="36"/></name></name><argument_list pos:line="17" pos:column="36">(<argument><expr><name pos:line="17" pos:column="37">error<pos:position pos:line="17" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="44">scode<pos:position pos:line="17" pos:column="49"/></name></expr></argument>,
                                    <argument><expr><name><name pos:line="18" pos:column="37">repContext<pos:position pos:line="18" pos:column="47"/></name><operator pos:line="18" pos:column="47">-&gt;<pos:position pos:line="18" pos:column="52"/></operator><name pos:line="18" pos:column="49">http<pos:position pos:line="18" pos:column="53"/></name><operator pos:line="18" pos:column="53">-&gt;<pos:position pos:line="18" pos:column="58"/></operator><name pos:line="18" pos:column="55">request<pos:position pos:line="18" pos:column="62"/></name><operator pos:line="18" pos:column="62">-&gt;<pos:position pos:line="18" pos:column="67"/></operator><name pos:line="18" pos:column="64">method<pos:position pos:line="18" pos:column="70"/></name></name></expr></argument>,
                                    <argument><expr><name><name pos:line="19" pos:column="37">repContext<pos:position pos:line="19" pos:column="47"/></name><operator pos:line="19" pos:column="47">-&gt;<pos:position pos:line="19" pos:column="52"/></operator><name pos:line="19" pos:column="49">http<pos:position pos:line="19" pos:column="53"/></name><operator pos:line="19" pos:column="53">-&gt;<pos:position pos:line="19" pos:column="58"/></operator><name pos:line="19" pos:column="55">uri<pos:position pos:line="19" pos:column="58"/></name></name></expr></argument>,
                                    <argument><expr><name pos:line="20" pos:column="37">CachePeer<pos:position pos:line="20" pos:column="46"/></name></expr></argument>,
                                    <argument><expr><name><name pos:line="21" pos:column="37">repContext<pos:position pos:line="21" pos:column="47"/></name><operator pos:line="21" pos:column="47">-&gt;<pos:position pos:line="21" pos:column="52"/></operator><name pos:line="21" pos:column="49">http<pos:position pos:line="21" pos:column="53"/></name><operator pos:line="21" pos:column="53">-&gt;<pos:position pos:line="21" pos:column="58"/></operator><name pos:line="21" pos:column="55">request<pos:position pos:line="21" pos:column="62"/></name></name></expr></argument>,
                                    <argument><expr><name><name pos:line="22" pos:column="37">in<pos:position pos:line="22" pos:column="39"/></name><operator pos:line="22" pos:column="39">.<pos:position pos:line="22" pos:column="40"/></operator><name pos:line="22" pos:column="40">buf<pos:position pos:line="22" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="45">NULL<pos:position pos:line="22" pos:column="49"/></name></expr></argument>)<pos:position pos:line="22" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="51"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="23" pos:column="9">context<pos:position pos:line="23" pos:column="16"/></name><operator pos:line="23" pos:column="16">-&gt;<pos:position pos:line="23" pos:column="21"/></operator><name pos:line="23" pos:column="18">pullData<pos:position pos:line="23" pos:column="26"/></name></name><argument_list pos:line="23" pos:column="26">()<pos:position pos:line="23" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="24" pos:column="6"/></block></then> <else pos:line="24" pos:column="7">else <block pos:line="24" pos:column="12">{
        <comment type="line" pos:line="25" pos:column="9">// close or otherwise we may get stuck as nobody will notice the error?</comment>
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">comm_reset_close<pos:position pos:line="26" pos:column="25"/></name><argument_list pos:line="26" pos:column="25">(<argument><expr><name pos:line="26" pos:column="26">clientConnection<pos:position pos:line="26" pos:column="42"/></name></expr></argument>)<pos:position pos:line="26" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="27" pos:column="6"/></block></else></if>
<cpp:else pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">else<pos:position pos:line="28" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">debugs<pos:position pos:line="29" pos:column="11"/></name><argument_list pos:line="29" pos:column="11">(<argument><expr><literal type="number" pos:line="29" pos:column="12">33<pos:position pos:line="29" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="16">3<pos:position pos:line="29" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="19">HERE<pos:position pos:line="29" pos:column="23"/></name> <operator pos:line="29" pos:column="24">&lt;&lt;<pos:position pos:line="29" pos:column="32"/></operator> <literal type="string" pos:line="29" pos:column="27">"aborting chunked request without error "<pos:position pos:line="29" pos:column="68"/></literal> <operator pos:line="29" pos:column="69">&lt;&lt;<pos:position pos:line="29" pos:column="77"/></operator> <name pos:line="29" pos:column="72">error<pos:position pos:line="29" pos:column="77"/></name></expr></argument>)<pos:position pos:line="29" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="79"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">comm_reset_close<pos:position pos:line="30" pos:column="21"/></name><argument_list pos:line="30" pos:column="21">(<argument><expr><name pos:line="30" pos:column="22">clientConnection<pos:position pos:line="30" pos:column="38"/></name></expr></argument>)<pos:position pos:line="30" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="40"/></expr_stmt>
<cpp:endif pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">endif<pos:position pos:line="31" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name pos:line="32" pos:column="5">flags<pos:position pos:line="32" pos:column="10"/></name><operator pos:line="32" pos:column="10">.<pos:position pos:line="32" pos:column="11"/></operator><name pos:line="32" pos:column="11">readMore<pos:position pos:line="32" pos:column="19"/></name></name> <operator pos:line="32" pos:column="20">=<pos:position pos:line="32" pos:column="21"/></operator> <literal type="boolean" pos:line="32" pos:column="22">false<pos:position pos:line="32" pos:column="27"/></literal></expr>;<pos:position pos:line="32" pos:column="28"/></expr_stmt>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
