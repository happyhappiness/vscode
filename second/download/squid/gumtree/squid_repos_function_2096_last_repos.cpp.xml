<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2096_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">sigusr2_handle<pos:position pos:line="2" pos:column="15"/></name><parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><name pos:line="2" pos:column="16">int<pos:position pos:line="2" pos:column="19"/></name></type> <name pos:line="2" pos:column="20">sig<pos:position pos:line="2" pos:column="23"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="24"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><specifier pos:line="4" pos:column="5">static<pos:position pos:line="4" pos:column="11"/></specifier> <type><name pos:line="4" pos:column="12">int<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">state<pos:position pos:line="4" pos:column="21"/></name> <init pos:line="4" pos:column="22">= <expr><literal type="number" pos:line="4" pos:column="24">0<pos:position pos:line="4" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>
    <comment type="block" pos:line="5" pos:column="5">/* no debugs() here; bad things happen if the signal is delivered during _db_print() */</comment>

    <expr_stmt><expr><name pos:line="7" pos:column="5">DebugSignal<pos:position pos:line="7" pos:column="16"/></name> <operator pos:line="7" pos:column="17">=<pos:position pos:line="7" pos:column="18"/></operator> <name pos:line="7" pos:column="19">sig<pos:position pos:line="7" pos:column="22"/></name></expr>;<pos:position pos:line="7" pos:column="23"/></expr_stmt>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">state<pos:position pos:line="9" pos:column="14"/></name> <operator pos:line="9" pos:column="15">==<pos:position pos:line="9" pos:column="17"/></operator> <literal type="number" pos:line="9" pos:column="18">0<pos:position pos:line="9" pos:column="19"/></literal></expr>)<pos:position pos:line="9" pos:column="20"/></condition><then pos:line="9" pos:column="20"> <block pos:line="9" pos:column="21">{
        <expr_stmt><expr><call><name><name pos:line="10" pos:column="9">Debug<pos:position pos:line="10" pos:column="14"/></name><operator pos:line="10" pos:column="14">::<pos:position pos:line="10" pos:column="16"/></operator><name pos:line="10" pos:column="16">parseOptions<pos:position pos:line="10" pos:column="28"/></name></name><argument_list pos:line="10" pos:column="28">(<argument><expr><literal type="string" pos:line="10" pos:column="29">"ALL,7"<pos:position pos:line="10" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><name pos:line="11" pos:column="9">state<pos:position pos:line="11" pos:column="14"/></name> <operator pos:line="11" pos:column="15">=<pos:position pos:line="11" pos:column="16"/></operator> <literal type="number" pos:line="11" pos:column="17">1<pos:position pos:line="11" pos:column="18"/></literal></expr>;<pos:position pos:line="11" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="12" pos:column="6"/></block></then> <else pos:line="12" pos:column="7">else <block pos:line="12" pos:column="12">{
        <expr_stmt><expr><call><name><name pos:line="13" pos:column="9">Debug<pos:position pos:line="13" pos:column="14"/></name><operator pos:line="13" pos:column="14">::<pos:position pos:line="13" pos:column="16"/></operator><name pos:line="13" pos:column="16">parseOptions<pos:position pos:line="13" pos:column="28"/></name></name><argument_list pos:line="13" pos:column="28">(<argument><expr><name><name pos:line="13" pos:column="29">Debug<pos:position pos:line="13" pos:column="34"/></name><operator pos:line="13" pos:column="34">::<pos:position pos:line="13" pos:column="36"/></operator><name pos:line="13" pos:column="36">debugOptions<pos:position pos:line="13" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><name pos:line="14" pos:column="9">state<pos:position pos:line="14" pos:column="14"/></name> <operator pos:line="14" pos:column="15">=<pos:position pos:line="14" pos:column="16"/></operator> <literal type="number" pos:line="14" pos:column="17">0<pos:position pos:line="14" pos:column="18"/></literal></expr>;<pos:position pos:line="14" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></else></if>

<cpp:if pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">if<pos:position pos:line="17" pos:column="4"/></cpp:directive> <expr><operator pos:line="17" pos:column="5">!<pos:position pos:line="17" pos:column="6"/></operator><name pos:line="17" pos:column="6">HAVE_SIGACTION<pos:position pos:line="17" pos:column="20"/></name></expr></cpp:if>
    <comment type="block" pos:line="18" pos:column="5">/* reinstall */</comment>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><call><name pos:line="19" pos:column="9">signal<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><name pos:line="19" pos:column="16">sig<pos:position pos:line="19" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="21">sigusr2_handle<pos:position pos:line="19" pos:column="35"/></name></expr></argument>)<pos:position pos:line="19" pos:column="36"/></argument_list></call> <operator pos:line="19" pos:column="37">==<pos:position pos:line="19" pos:column="39"/></operator> <name pos:line="19" pos:column="40">SIG_ERR<pos:position pos:line="19" pos:column="47"/></name></expr>)<pos:position pos:line="19" pos:column="48"/></condition><then pos:line="19" pos:column="48"> <block pos:line="19" pos:column="49">{
        <decl_stmt><decl><type><name pos:line="20" pos:column="9">int<pos:position pos:line="20" pos:column="12"/></name></type> <name pos:line="20" pos:column="13">xerrno<pos:position pos:line="20" pos:column="19"/></name> <init pos:line="20" pos:column="20">= <expr><name pos:line="20" pos:column="22">errno<pos:position pos:line="20" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="20" pos:column="28"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">debugs<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><literal type="number" pos:line="21" pos:column="16">50<pos:position pos:line="21" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="20">DBG_CRITICAL<pos:position pos:line="21" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="34">"signal: sig="<pos:position pos:line="21" pos:column="48"/></literal> <operator pos:line="21" pos:column="49">&lt;&lt;<pos:position pos:line="21" pos:column="57"/></operator> <name pos:line="21" pos:column="52">sig<pos:position pos:line="21" pos:column="55"/></name> <operator pos:line="21" pos:column="56">&lt;&lt;<pos:position pos:line="21" pos:column="64"/></operator> <literal type="string" pos:line="21" pos:column="59">" func=sigusr2_handle: "<pos:position pos:line="21" pos:column="83"/></literal> <operator pos:line="21" pos:column="84">&lt;&lt;<pos:position pos:line="21" pos:column="92"/></operator> <call><name pos:line="21" pos:column="87">xstrerr<pos:position pos:line="21" pos:column="94"/></name><argument_list pos:line="21" pos:column="94">(<argument><expr><name pos:line="21" pos:column="95">xerrno<pos:position pos:line="21" pos:column="101"/></name></expr></argument>)<pos:position pos:line="21" pos:column="102"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="103"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="104"/></expr_stmt>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>
<cpp:endif pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">endif<pos:position pos:line="23" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
