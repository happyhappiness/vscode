<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1458_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">SBuf<pos:position pos:line="1" pos:column="5"/></name><modifier pos:line="1" pos:column="5">&amp;<pos:position pos:line="1" pos:column="10"/></modifier></type>
<name><name pos:line="2" pos:column="1">SBuf<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">trim<pos:position pos:line="2" pos:column="11"/></name></name><parameter_list pos:line="2" pos:column="11">(<parameter><decl><type><specifier pos:line="2" pos:column="12">const<pos:position pos:line="2" pos:column="17"/></specifier> <name pos:line="2" pos:column="18">SBuf<pos:position pos:line="2" pos:column="22"/></name> <modifier pos:line="2" pos:column="23">&amp;<pos:position pos:line="2" pos:column="28"/></modifier></type><name pos:line="2" pos:column="24">toRemove<pos:position pos:line="2" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="34">bool<pos:position pos:line="2" pos:column="38"/></name></type> <name pos:line="2" pos:column="39">atBeginning<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="52">bool<pos:position pos:line="2" pos:column="56"/></name></type> <name pos:line="2" pos:column="57">atEnd<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="63"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><operator pos:line="4" pos:column="5">++<pos:position pos:line="4" pos:column="7"/></operator><name><name pos:line="4" pos:column="7">stats<pos:position pos:line="4" pos:column="12"/></name><operator pos:line="4" pos:column="12">.<pos:position pos:line="4" pos:column="13"/></operator><name pos:line="4" pos:column="13">trim<pos:position pos:line="4" pos:column="17"/></name></name></expr>;<pos:position pos:line="4" pos:column="18"/></expr_stmt>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><name pos:line="5" pos:column="9">atEnd<pos:position pos:line="5" pos:column="14"/></name></expr>)<pos:position pos:line="5" pos:column="15"/></condition><then pos:line="5" pos:column="15"> <block pos:line="5" pos:column="16">{
        <decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">char<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">p<pos:position pos:line="6" pos:column="22"/></name> <init pos:line="6" pos:column="23">= <expr><call><name pos:line="6" pos:column="25">bufEnd<pos:position pos:line="6" pos:column="31"/></name><argument_list pos:line="6" pos:column="31">()<pos:position pos:line="6" pos:column="33"/></argument_list></call><operator pos:line="6" pos:column="33">-<pos:position pos:line="6" pos:column="34"/></operator><literal type="number" pos:line="6" pos:column="34">1<pos:position pos:line="6" pos:column="35"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="36"/></decl_stmt>
        <while pos:line="7" pos:column="9">while <condition pos:line="7" pos:column="15">(<expr><operator pos:line="7" pos:column="16">!<pos:position pos:line="7" pos:column="17"/></operator><call><name pos:line="7" pos:column="17">isEmpty<pos:position pos:line="7" pos:column="24"/></name><argument_list pos:line="7" pos:column="24">()<pos:position pos:line="7" pos:column="26"/></argument_list></call> <operator pos:line="7" pos:column="27">&amp;&amp;<pos:position pos:line="7" pos:column="37"/></operator> <call><name pos:line="7" pos:column="30">memchr<pos:position pos:line="7" pos:column="36"/></name><argument_list pos:line="7" pos:column="36">(<argument><expr><call><name><name pos:line="7" pos:column="37">toRemove<pos:position pos:line="7" pos:column="45"/></name><operator pos:line="7" pos:column="45">.<pos:position pos:line="7" pos:column="46"/></operator><name pos:line="7" pos:column="46">buf<pos:position pos:line="7" pos:column="49"/></name></name><argument_list pos:line="7" pos:column="49">()<pos:position pos:line="7" pos:column="51"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="7" pos:column="53">*<pos:position pos:line="7" pos:column="54"/></operator><name pos:line="7" pos:column="54">p<pos:position pos:line="7" pos:column="55"/></name></expr></argument>, <argument><expr><call><name><name pos:line="7" pos:column="57">toRemove<pos:position pos:line="7" pos:column="65"/></name><operator pos:line="7" pos:column="65">.<pos:position pos:line="7" pos:column="66"/></operator><name pos:line="7" pos:column="66">length<pos:position pos:line="7" pos:column="72"/></name></name><argument_list pos:line="7" pos:column="72">()<pos:position pos:line="7" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="75"/></argument_list></call> <operator pos:line="7" pos:column="76">!=<pos:position pos:line="7" pos:column="78"/></operator> <name pos:line="7" pos:column="79">NULL<pos:position pos:line="7" pos:column="83"/></name></expr>)<pos:position pos:line="7" pos:column="84"/></condition> <block pos:line="7" pos:column="85">{
            <comment type="line" pos:line="8" pos:column="13">//current end-of-buf is in the searched set</comment>
            <expr_stmt><expr><operator pos:line="9" pos:column="13">--<pos:position pos:line="9" pos:column="15"/></operator><name pos:line="9" pos:column="15">len_<pos:position pos:line="9" pos:column="19"/></name></expr>;<pos:position pos:line="9" pos:column="20"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="10" pos:column="13">--<pos:position pos:line="10" pos:column="15"/></operator><name pos:line="10" pos:column="15">p<pos:position pos:line="10" pos:column="16"/></name></expr>;<pos:position pos:line="10" pos:column="17"/></expr_stmt>
        }<pos:position pos:line="11" pos:column="10"/></block></while>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">atBeginning<pos:position pos:line="13" pos:column="20"/></name></expr>)<pos:position pos:line="13" pos:column="21"/></condition><then pos:line="13" pos:column="21"> <block pos:line="13" pos:column="22">{
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">const<pos:position pos:line="14" pos:column="14"/></specifier> <name pos:line="14" pos:column="15">char<pos:position pos:line="14" pos:column="19"/></name> <modifier pos:line="14" pos:column="20">*<pos:position pos:line="14" pos:column="21"/></modifier></type><name pos:line="14" pos:column="21">p<pos:position pos:line="14" pos:column="22"/></name> <init pos:line="14" pos:column="23">= <expr><call><name pos:line="14" pos:column="25">buf<pos:position pos:line="14" pos:column="28"/></name><argument_list pos:line="14" pos:column="28">()<pos:position pos:line="14" pos:column="30"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="31"/></decl_stmt>
        <while pos:line="15" pos:column="9">while <condition pos:line="15" pos:column="15">(<expr><operator pos:line="15" pos:column="16">!<pos:position pos:line="15" pos:column="17"/></operator><call><name pos:line="15" pos:column="17">isEmpty<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">()<pos:position pos:line="15" pos:column="26"/></argument_list></call> <operator pos:line="15" pos:column="27">&amp;&amp;<pos:position pos:line="15" pos:column="37"/></operator> <call><name pos:line="15" pos:column="30">memchr<pos:position pos:line="15" pos:column="36"/></name><argument_list pos:line="15" pos:column="36">(<argument><expr><call><name><name pos:line="15" pos:column="37">toRemove<pos:position pos:line="15" pos:column="45"/></name><operator pos:line="15" pos:column="45">.<pos:position pos:line="15" pos:column="46"/></operator><name pos:line="15" pos:column="46">buf<pos:position pos:line="15" pos:column="49"/></name></name><argument_list pos:line="15" pos:column="49">()<pos:position pos:line="15" pos:column="51"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="15" pos:column="53">*<pos:position pos:line="15" pos:column="54"/></operator><name pos:line="15" pos:column="54">p<pos:position pos:line="15" pos:column="55"/></name></expr></argument>, <argument><expr><call><name><name pos:line="15" pos:column="57">toRemove<pos:position pos:line="15" pos:column="65"/></name><operator pos:line="15" pos:column="65">.<pos:position pos:line="15" pos:column="66"/></operator><name pos:line="15" pos:column="66">length<pos:position pos:line="15" pos:column="72"/></name></name><argument_list pos:line="15" pos:column="72">()<pos:position pos:line="15" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="15" pos:column="75"/></argument_list></call> <operator pos:line="15" pos:column="76">!=<pos:position pos:line="15" pos:column="78"/></operator> <name pos:line="15" pos:column="79">NULL<pos:position pos:line="15" pos:column="83"/></name></expr>)<pos:position pos:line="15" pos:column="84"/></condition> <block pos:line="15" pos:column="85">{
            <expr_stmt><expr><operator pos:line="16" pos:column="13">--<pos:position pos:line="16" pos:column="15"/></operator><name pos:line="16" pos:column="15">len_<pos:position pos:line="16" pos:column="19"/></name></expr>;<pos:position pos:line="16" pos:column="20"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="17" pos:column="13">++<pos:position pos:line="17" pos:column="15"/></operator><name pos:line="17" pos:column="15">off_<pos:position pos:line="17" pos:column="19"/></name></expr>;<pos:position pos:line="17" pos:column="20"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="18" pos:column="13">++<pos:position pos:line="18" pos:column="15"/></operator><name pos:line="18" pos:column="15">p<pos:position pos:line="18" pos:column="16"/></name></expr>;<pos:position pos:line="18" pos:column="17"/></expr_stmt>
        }<pos:position pos:line="19" pos:column="10"/></block></while>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><call><name pos:line="21" pos:column="9">isEmpty<pos:position pos:line="21" pos:column="16"/></name><argument_list pos:line="21" pos:column="16">()<pos:position pos:line="21" pos:column="18"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="19"/></condition><then pos:line="21" pos:column="19">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="9">clear<pos:position pos:line="22" pos:column="14"/></name><argument_list pos:line="22" pos:column="14">()<pos:position pos:line="22" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="17"/></expr_stmt></block></then></if>
    <return pos:line="23" pos:column="5">return <expr><operator pos:line="23" pos:column="12">*<pos:position pos:line="23" pos:column="13"/></operator><name pos:line="23" pos:column="13">this<pos:position pos:line="23" pos:column="17"/></name></expr>;<pos:position pos:line="23" pos:column="18"/></return>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
