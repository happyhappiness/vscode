<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4419_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ssl<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">Bio<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">sslFeatures<pos:position pos:line="2" pos:column="22"/></name><operator pos:line="2" pos:column="22">::<pos:position pos:line="2" pos:column="24"/></operator><name pos:line="2" pos:column="24">checkForCcsOrNst<pos:position pos:line="2" pos:column="40"/></name></name><parameter_list pos:line="2" pos:column="40">(<parameter><decl><type><specifier pos:line="2" pos:column="41">const<pos:position pos:line="2" pos:column="46"/></specifier> <name pos:line="2" pos:column="47">MemBuf<pos:position pos:line="2" pos:column="53"/></name> <modifier pos:line="2" pos:column="54">&amp;<pos:position pos:line="2" pos:column="59"/></modifier></type><name pos:line="2" pos:column="55">buf<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="59"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">helloMsgSize<pos:position pos:line="4" pos:column="21"/></name> <operator pos:line="4" pos:column="22">&lt;=<pos:position pos:line="4" pos:column="27"/></operator> <literal type="number" pos:line="4" pos:column="25">0<pos:position pos:line="4" pos:column="26"/></literal></expr>)<pos:position pos:line="4" pos:column="27"/></condition><then pos:line="4" pos:column="27"> <comment type="line" pos:line="4" pos:column="28">//unparsed content?</comment>
        <block type="pseudo"><return pos:line="5" pos:column="9">return <expr><literal type="boolean" pos:line="5" pos:column="16">false<pos:position pos:line="5" pos:column="21"/></literal></expr>;<pos:position pos:line="5" pos:column="22"/></return></block></then></if>

    <comment type="line" pos:line="7" pos:column="5">// Check the records after the Hello record.</comment>
    <decl_stmt><decl><type><specifier pos:line="8" pos:column="5">const<pos:position pos:line="8" pos:column="10"/></specifier> <name pos:line="8" pos:column="11">int<pos:position pos:line="8" pos:column="14"/></name></type> <name pos:line="8" pos:column="15">afterHello<pos:position pos:line="8" pos:column="25"/></name> <init pos:line="8" pos:column="26">= <expr><name pos:line="8" pos:column="28">helloRecordStart<pos:position pos:line="8" pos:column="44"/></name> <operator pos:line="8" pos:column="45">+<pos:position pos:line="8" pos:column="46"/></operator> <name pos:line="8" pos:column="47">helloMsgSize<pos:position pos:line="8" pos:column="59"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="60"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="9" pos:column="5">const<pos:position pos:line="9" pos:column="10"/></specifier> <name pos:line="9" pos:column="11">unsigned<pos:position pos:line="9" pos:column="19"/></name> <name pos:line="9" pos:column="20">char<pos:position pos:line="9" pos:column="24"/></name> <modifier pos:line="9" pos:column="25">*<pos:position pos:line="9" pos:column="26"/></modifier></type><name pos:line="9" pos:column="26">msg<pos:position pos:line="9" pos:column="29"/></name> <init pos:line="9" pos:column="30">= <expr><cast type="reinterpret" pos:line="9" pos:column="32">reinterpret_cast<argument_list type="generic" pos:line="9" pos:column="48">&lt;<argument><expr><specifier pos:line="9" pos:column="49">const<pos:position pos:line="9" pos:column="54"/></specifier> <name pos:line="9" pos:column="55">unsigned<pos:position pos:line="9" pos:column="63"/></name> <name pos:line="9" pos:column="64">char<pos:position pos:line="9" pos:column="68"/></name> <operator pos:line="9" pos:column="69">*<pos:position pos:line="9" pos:column="70"/></operator></expr></argument>&gt;<pos:position pos:line="9" pos:column="74"/></argument_list><argument_list pos:line="9" pos:column="71">(<argument><expr><call><name><name pos:line="9" pos:column="72">buf<pos:position pos:line="9" pos:column="75"/></name><operator pos:line="9" pos:column="75">.<pos:position pos:line="9" pos:column="76"/></operator><name pos:line="9" pos:column="76">content<pos:position pos:line="9" pos:column="83"/></name></name><argument_list pos:line="9" pos:column="83">()<pos:position pos:line="9" pos:column="85"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="86"/></argument_list></cast> <operator pos:line="9" pos:column="87">+<pos:position pos:line="9" pos:column="88"/></operator> <name pos:line="9" pos:column="89">afterHello<pos:position pos:line="9" pos:column="99"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="100"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">size_t<pos:position pos:line="10" pos:column="11"/></name></type> <name pos:line="10" pos:column="12">size<pos:position pos:line="10" pos:column="16"/></name> <init pos:line="10" pos:column="17">= <expr><ternary><condition><expr><operator pos:line="10" pos:column="19">(<pos:position pos:line="10" pos:column="20"/></operator><call><name><name pos:line="10" pos:column="20">buf<pos:position pos:line="10" pos:column="23"/></name><operator pos:line="10" pos:column="23">.<pos:position pos:line="10" pos:column="24"/></operator><name pos:line="10" pos:column="24">contentSize<pos:position pos:line="10" pos:column="35"/></name></name><argument_list pos:line="10" pos:column="35">()<pos:position pos:line="10" pos:column="37"/></argument_list></call> <operator pos:line="10" pos:column="38">&gt;<pos:position pos:line="10" pos:column="42"/></operator> <name pos:line="10" pos:column="40">afterHello<pos:position pos:line="10" pos:column="50"/></name><operator pos:line="10" pos:column="50">)<pos:position pos:line="10" pos:column="51"/></operator></expr> ?<pos:position pos:line="10" pos:column="53"/></condition><then pos:line="10" pos:column="53"> <expr><call pos:line="10" pos:column="54">(<name pos:line="10" pos:column="55">size_t<pos:position pos:line="10" pos:column="61"/></name>)<argument_list pos:line="10" pos:column="62">(<argument><expr><call><name><name pos:line="10" pos:column="63">buf<pos:position pos:line="10" pos:column="66"/></name><operator pos:line="10" pos:column="66">.<pos:position pos:line="10" pos:column="67"/></operator><name pos:line="10" pos:column="67">contentSize<pos:position pos:line="10" pos:column="78"/></name></name><argument_list pos:line="10" pos:column="78">()<pos:position pos:line="10" pos:column="80"/></argument_list></call> <operator pos:line="10" pos:column="81">-<pos:position pos:line="10" pos:column="82"/></operator> <name pos:line="10" pos:column="83">afterHello<pos:position pos:line="10" pos:column="93"/></name></expr></argument>)<pos:position pos:line="10" pos:column="94"/></argument_list></call></expr> <pos:position pos:line="10" pos:column="95"/></then><else pos:line="10" pos:column="95">: <expr><literal type="number" pos:line="10" pos:column="97">0<pos:position pos:line="10" pos:column="98"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="10" pos:column="99"/></decl_stmt>
    <while pos:line="11" pos:column="5">while <condition pos:line="11" pos:column="11">(<expr><name pos:line="11" pos:column="12">size<pos:position pos:line="11" pos:column="16"/></name> <operator pos:line="11" pos:column="17">&gt;<pos:position pos:line="11" pos:column="21"/></operator> <literal type="number" pos:line="11" pos:column="19">5<pos:position pos:line="11" pos:column="20"/></literal></expr>)<pos:position pos:line="11" pos:column="21"/></condition> <block pos:line="11" pos:column="22">{
        <decl_stmt><decl><type><specifier pos:line="12" pos:column="9">const<pos:position pos:line="12" pos:column="14"/></specifier> <name pos:line="12" pos:column="15">int<pos:position pos:line="12" pos:column="18"/></name></type> <name pos:line="12" pos:column="19">msgType<pos:position pos:line="12" pos:column="26"/></name> <init pos:line="12" pos:column="27">= <expr><name><name pos:line="12" pos:column="29">msg<pos:position pos:line="12" pos:column="32"/></name><index pos:line="12" pos:column="32">[<expr><literal type="number" pos:line="12" pos:column="33">0<pos:position pos:line="12" pos:column="34"/></literal></expr>]<pos:position pos:line="12" pos:column="35"/></index></name></expr></init></decl>;<pos:position pos:line="12" pos:column="36"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="13" pos:column="9">const<pos:position pos:line="13" pos:column="14"/></specifier> <name pos:line="13" pos:column="15">int<pos:position pos:line="13" pos:column="18"/></name></type> <name pos:line="13" pos:column="19">msgSslVersion<pos:position pos:line="13" pos:column="32"/></name> <init pos:line="13" pos:column="33">= <expr><operator pos:line="13" pos:column="35">(<pos:position pos:line="13" pos:column="36"/></operator><name><name pos:line="13" pos:column="36">msg<pos:position pos:line="13" pos:column="39"/></name><index pos:line="13" pos:column="39">[<expr><literal type="number" pos:line="13" pos:column="40">1<pos:position pos:line="13" pos:column="41"/></literal></expr>]<pos:position pos:line="13" pos:column="42"/></index></name> <operator pos:line="13" pos:column="43">&lt;&lt;<pos:position pos:line="13" pos:column="51"/></operator> <literal type="number" pos:line="13" pos:column="46">8<pos:position pos:line="13" pos:column="47"/></literal><operator pos:line="13" pos:column="47">)<pos:position pos:line="13" pos:column="48"/></operator> <operator pos:line="13" pos:column="49">|<pos:position pos:line="13" pos:column="50"/></operator> <name><name pos:line="13" pos:column="51">msg<pos:position pos:line="13" pos:column="54"/></name><index pos:line="13" pos:column="54">[<expr><literal type="number" pos:line="13" pos:column="55">2<pos:position pos:line="13" pos:column="56"/></literal></expr>]<pos:position pos:line="13" pos:column="57"/></index></name></expr></init></decl>;<pos:position pos:line="13" pos:column="58"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">debugs<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><literal type="number" pos:line="14" pos:column="16">83<pos:position pos:line="14" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="20">7<pos:position pos:line="14" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="23">"SSL Message Version :"<pos:position pos:line="14" pos:column="46"/></literal> <operator pos:line="14" pos:column="47">&lt;&lt;<pos:position pos:line="14" pos:column="55"/></operator> <name><name pos:line="14" pos:column="50">std<pos:position pos:line="14" pos:column="53"/></name><operator pos:line="14" pos:column="53">::<pos:position pos:line="14" pos:column="55"/></operator><name pos:line="14" pos:column="55">hex<pos:position pos:line="14" pos:column="58"/></name></name> <operator pos:line="14" pos:column="59">&lt;&lt;<pos:position pos:line="14" pos:column="67"/></operator> <call><name><name pos:line="14" pos:column="62">std<pos:position pos:line="14" pos:column="65"/></name><operator pos:line="14" pos:column="65">::<pos:position pos:line="14" pos:column="67"/></operator><name pos:line="14" pos:column="67">setw<pos:position pos:line="14" pos:column="71"/></name></name><argument_list pos:line="14" pos:column="71">(<argument><expr><literal type="number" pos:line="14" pos:column="72">8<pos:position pos:line="14" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="74"/></argument_list></call> <operator pos:line="14" pos:column="75">&lt;&lt;<pos:position pos:line="14" pos:column="83"/></operator> <call><name><name pos:line="14" pos:column="78">std<pos:position pos:line="14" pos:column="81"/></name><operator pos:line="14" pos:column="81">::<pos:position pos:line="14" pos:column="83"/></operator><name pos:line="14" pos:column="83">setfill<pos:position pos:line="14" pos:column="90"/></name></name><argument_list pos:line="14" pos:column="90">(<argument><expr><literal type="char" pos:line="14" pos:column="91">'0'<pos:position pos:line="14" pos:column="94"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="95"/></argument_list></call> <operator pos:line="14" pos:column="96">&lt;&lt;<pos:position pos:line="14" pos:column="104"/></operator> <name pos:line="14" pos:column="99">msgSslVersion<pos:position pos:line="14" pos:column="112"/></name></expr></argument>)<pos:position pos:line="14" pos:column="113"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="114"/></expr_stmt>
        <comment type="line" pos:line="15" pos:column="9">// Check for Change Cipher Spec message</comment>
        <comment type="line" pos:line="16" pos:column="9">// RFC5246 section 6.2.1</comment>
        <if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">msgType<pos:position pos:line="17" pos:column="20"/></name> <operator pos:line="17" pos:column="21">==<pos:position pos:line="17" pos:column="23"/></operator> <literal type="number" pos:line="17" pos:column="24">0x14<pos:position pos:line="17" pos:column="28"/></literal></expr>)<pos:position pos:line="17" pos:column="29"/></condition><then pos:line="17" pos:column="29"> <block pos:line="17" pos:column="30">{<comment type="line" pos:line="17" pos:column="31">// Change Cipher Spec message found</comment>
            <expr_stmt><expr><call><name pos:line="18" pos:column="13">debugs<pos:position pos:line="18" pos:column="19"/></name><argument_list pos:line="18" pos:column="19">(<argument><expr><literal type="number" pos:line="18" pos:column="20">83<pos:position pos:line="18" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="24">7<pos:position pos:line="18" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="27">"SSL  Change Cipher Spec message found"<pos:position pos:line="18" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="68"/></expr_stmt>
            <return pos:line="19" pos:column="13">return <expr><literal type="boolean" pos:line="19" pos:column="20">true<pos:position pos:line="19" pos:column="24"/></literal></expr>;<pos:position pos:line="19" pos:column="25"/></return>
        }<pos:position pos:line="20" pos:column="10"/></block></then></if>
        <comment type="line" pos:line="21" pos:column="9">// Check for New Session Ticket message</comment>
        <comment type="line" pos:line="22" pos:column="9">// RFC5077 section 3.3</comment>
        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">msgType<pos:position pos:line="23" pos:column="20"/></name> <operator pos:line="23" pos:column="21">==<pos:position pos:line="23" pos:column="23"/></operator> <literal type="number" pos:line="23" pos:column="24">0x04<pos:position pos:line="23" pos:column="28"/></literal></expr>)<pos:position pos:line="23" pos:column="29"/></condition><then pos:line="23" pos:column="29"> <block pos:line="23" pos:column="30">{<comment type="line" pos:line="23" pos:column="31">// New Session Ticket message found</comment>
            <expr_stmt><expr><call><name pos:line="24" pos:column="13">debugs<pos:position pos:line="24" pos:column="19"/></name><argument_list pos:line="24" pos:column="19">(<argument><expr><literal type="number" pos:line="24" pos:column="20">83<pos:position pos:line="24" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="24">7<pos:position pos:line="24" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="27">"TLS  New Session Ticket message found"<pos:position pos:line="24" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="68"/></expr_stmt>
            <return pos:line="25" pos:column="13">return <expr><literal type="boolean" pos:line="25" pos:column="20">true<pos:position pos:line="25" pos:column="24"/></literal></expr>;<pos:position pos:line="25" pos:column="25"/></return>
        }<pos:position pos:line="26" pos:column="10"/></block></then></if>
        <comment type="line" pos:line="27" pos:column="9">// The hello message size exist in 4th and 5th bytes</comment>
        <decl_stmt><decl><type><name pos:line="28" pos:column="9">size_t<pos:position pos:line="28" pos:column="15"/></name></type> <name pos:line="28" pos:column="16">msgLength<pos:position pos:line="28" pos:column="25"/></name> <init pos:line="28" pos:column="26">= <expr><operator pos:line="28" pos:column="28">(<pos:position pos:line="28" pos:column="29"/></operator><name><name pos:line="28" pos:column="29">msg<pos:position pos:line="28" pos:column="32"/></name><index pos:line="28" pos:column="32">[<expr><literal type="number" pos:line="28" pos:column="33">3<pos:position pos:line="28" pos:column="34"/></literal></expr>]<pos:position pos:line="28" pos:column="35"/></index></name> <operator pos:line="28" pos:column="36">&lt;&lt;<pos:position pos:line="28" pos:column="44"/></operator> <literal type="number" pos:line="28" pos:column="39">8<pos:position pos:line="28" pos:column="40"/></literal><operator pos:line="28" pos:column="40">)<pos:position pos:line="28" pos:column="41"/></operator> <operator pos:line="28" pos:column="42">+<pos:position pos:line="28" pos:column="43"/></operator> <name><name pos:line="28" pos:column="44">msg<pos:position pos:line="28" pos:column="47"/></name><index pos:line="28" pos:column="47">[<expr><literal type="number" pos:line="28" pos:column="48">4<pos:position pos:line="28" pos:column="49"/></literal></expr>]<pos:position pos:line="28" pos:column="50"/></index></name></expr></init></decl>;<pos:position pos:line="28" pos:column="51"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">debugs<pos:position pos:line="29" pos:column="15"/></name><argument_list pos:line="29" pos:column="15">(<argument><expr><literal type="number" pos:line="29" pos:column="16">83<pos:position pos:line="29" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="20">7<pos:position pos:line="29" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="23">"SSL Message Size: "<pos:position pos:line="29" pos:column="43"/></literal> <operator pos:line="29" pos:column="44">&lt;&lt;<pos:position pos:line="29" pos:column="52"/></operator> <name pos:line="29" pos:column="47">msgLength<pos:position pos:line="29" pos:column="56"/></name></expr></argument>)<pos:position pos:line="29" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="58"/></expr_stmt>
        <expr_stmt><expr><name pos:line="30" pos:column="9">msgLength<pos:position pos:line="30" pos:column="18"/></name> <operator pos:line="30" pos:column="19">+=<pos:position pos:line="30" pos:column="21"/></operator> <literal type="number" pos:line="30" pos:column="22">5<pos:position pos:line="30" pos:column="23"/></literal></expr>;<pos:position pos:line="30" pos:column="24"/></expr_stmt>

        <if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name pos:line="32" pos:column="13">msgLength<pos:position pos:line="32" pos:column="22"/></name> <operator pos:line="32" pos:column="23">&lt;=<pos:position pos:line="32" pos:column="28"/></operator> <name pos:line="32" pos:column="26">size<pos:position pos:line="32" pos:column="30"/></name></expr>)<pos:position pos:line="32" pos:column="31"/></condition><then pos:line="32" pos:column="31"> <block pos:line="32" pos:column="32">{
            <expr_stmt><expr><name pos:line="33" pos:column="13">msg<pos:position pos:line="33" pos:column="16"/></name> <operator pos:line="33" pos:column="17">+=<pos:position pos:line="33" pos:column="19"/></operator> <name pos:line="33" pos:column="20">msgLength<pos:position pos:line="33" pos:column="29"/></name></expr>;<pos:position pos:line="33" pos:column="30"/></expr_stmt>
            <expr_stmt><expr><name pos:line="34" pos:column="13">size<pos:position pos:line="34" pos:column="17"/></name> <operator pos:line="34" pos:column="18">-=<pos:position pos:line="34" pos:column="20"/></operator> <name pos:line="34" pos:column="21">msgLength<pos:position pos:line="34" pos:column="30"/></name></expr>;<pos:position pos:line="34" pos:column="31"/></expr_stmt>
        }<pos:position pos:line="35" pos:column="10"/></block></then> <else pos:line="35" pos:column="11">else
            <block type="pseudo"><expr_stmt><expr><name pos:line="36" pos:column="13">size<pos:position pos:line="36" pos:column="17"/></name> <operator pos:line="36" pos:column="18">=<pos:position pos:line="36" pos:column="19"/></operator> <literal type="number" pos:line="36" pos:column="20">0<pos:position pos:line="36" pos:column="21"/></literal></expr>;<pos:position pos:line="36" pos:column="22"/></expr_stmt></block></else></if>
    }<pos:position pos:line="37" pos:column="6"/></block></while>
    <return pos:line="38" pos:column="5">return <expr><literal type="boolean" pos:line="38" pos:column="12">false<pos:position pos:line="38" pos:column="17"/></literal></expr>;<pos:position pos:line="38" pos:column="18"/></return>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
