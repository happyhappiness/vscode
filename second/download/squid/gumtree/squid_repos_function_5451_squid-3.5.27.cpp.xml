<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5451_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ftp<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">Client<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">writeCommand<pos:position pos:line="2" pos:column="26"/></name></name><parameter_list pos:line="2" pos:column="26">(<parameter><decl><type><specifier pos:line="2" pos:column="27">const<pos:position pos:line="2" pos:column="32"/></specifier> <name pos:line="2" pos:column="33">char<pos:position pos:line="2" pos:column="37"/></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type><name pos:line="2" pos:column="39">buf<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="43"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">ebuf<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>
    <comment type="block" pos:line="5" pos:column="5">/* trace FTP protocol communications at level 2 */</comment>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">debugs<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><literal type="number" pos:line="6" pos:column="12">9<pos:position pos:line="6" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="15">2<pos:position pos:line="6" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="18">"ftp&lt;&lt; "<pos:position pos:line="6" pos:column="32"/></literal> <operator pos:line="6" pos:column="27">&lt;&lt;<pos:position pos:line="6" pos:column="35"/></operator> <name pos:line="6" pos:column="30">buf<pos:position pos:line="6" pos:column="33"/></name></expr></argument>)<pos:position pos:line="6" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="35"/></expr_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name><name pos:line="8" pos:column="9">Config<pos:position pos:line="8" pos:column="15"/></name><operator pos:line="8" pos:column="15">.<pos:position pos:line="8" pos:column="16"/></operator><name pos:line="8" pos:column="16">Ftp<pos:position pos:line="8" pos:column="19"/></name><operator pos:line="8" pos:column="19">.<pos:position pos:line="8" pos:column="20"/></operator><name pos:line="8" pos:column="20">telnet<pos:position pos:line="8" pos:column="26"/></name></name></expr>)<pos:position pos:line="8" pos:column="27"/></condition><then pos:line="8" pos:column="27">
        <block type="pseudo"><expr_stmt><expr><name pos:line="9" pos:column="9">ebuf<pos:position pos:line="9" pos:column="13"/></name> <operator pos:line="9" pos:column="14">=<pos:position pos:line="9" pos:column="15"/></operator> <call><name pos:line="9" pos:column="16">escapeIAC<pos:position pos:line="9" pos:column="25"/></name><argument_list pos:line="9" pos:column="25">(<argument><expr><name pos:line="9" pos:column="26">buf<pos:position pos:line="9" pos:column="29"/></name></expr></argument>)<pos:position pos:line="9" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="31"/></expr_stmt></block></then>
    <else pos:line="10" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="9">ebuf<pos:position pos:line="11" pos:column="13"/></name> <operator pos:line="11" pos:column="14">=<pos:position pos:line="11" pos:column="15"/></operator> <call><name pos:line="11" pos:column="16">xstrdup<pos:position pos:line="11" pos:column="23"/></name><argument_list pos:line="11" pos:column="23">(<argument><expr><name pos:line="11" pos:column="24">buf<pos:position pos:line="11" pos:column="27"/></name></expr></argument>)<pos:position pos:line="11" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="29"/></expr_stmt></block></else></if>

    <expr_stmt><expr><call><name pos:line="13" pos:column="5">safe_free<pos:position pos:line="13" pos:column="14"/></name><argument_list pos:line="13" pos:column="14">(<argument><expr><name><name pos:line="13" pos:column="15">ctrl<pos:position pos:line="13" pos:column="19"/></name><operator pos:line="13" pos:column="19">.<pos:position pos:line="13" pos:column="20"/></operator><name pos:line="13" pos:column="20">last_command<pos:position pos:line="13" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="34"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="15" pos:column="5">safe_free<pos:position pos:line="15" pos:column="14"/></name><argument_list pos:line="15" pos:column="14">(<argument><expr><name><name pos:line="15" pos:column="15">ctrl<pos:position pos:line="15" pos:column="19"/></name><operator pos:line="15" pos:column="19">.<pos:position pos:line="15" pos:column="20"/></operator><name pos:line="15" pos:column="20">last_reply<pos:position pos:line="15" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="32"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="17" pos:column="5">ctrl<pos:position pos:line="17" pos:column="9"/></name><operator pos:line="17" pos:column="9">.<pos:position pos:line="17" pos:column="10"/></operator><name pos:line="17" pos:column="10">last_command<pos:position pos:line="17" pos:column="22"/></name></name> <operator pos:line="17" pos:column="23">=<pos:position pos:line="17" pos:column="24"/></operator> <name pos:line="17" pos:column="25">ebuf<pos:position pos:line="17" pos:column="29"/></name></expr>;<pos:position pos:line="17" pos:column="30"/></expr_stmt>

    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><operator pos:line="19" pos:column="9">!<pos:position pos:line="19" pos:column="10"/></operator><call><name><name pos:line="19" pos:column="10">Comm<pos:position pos:line="19" pos:column="14"/></name><operator pos:line="19" pos:column="14">::<pos:position pos:line="19" pos:column="16"/></operator><name pos:line="19" pos:column="16">IsConnOpen<pos:position pos:line="19" pos:column="26"/></name></name><argument_list pos:line="19" pos:column="26">(<argument><expr><name><name pos:line="19" pos:column="27">ctrl<pos:position pos:line="19" pos:column="31"/></name><operator pos:line="19" pos:column="31">.<pos:position pos:line="19" pos:column="32"/></operator><name pos:line="19" pos:column="32">conn<pos:position pos:line="19" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="38"/></condition><then pos:line="19" pos:column="38"> <block pos:line="19" pos:column="39">{
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">debugs<pos:position pos:line="20" pos:column="15"/></name><argument_list pos:line="20" pos:column="15">(<argument><expr><literal type="number" pos:line="20" pos:column="16">9<pos:position pos:line="20" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="19">2<pos:position pos:line="20" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="22">"cannot send to closing ctrl "<pos:position pos:line="20" pos:column="52"/></literal> <operator pos:line="20" pos:column="53">&lt;&lt;<pos:position pos:line="20" pos:column="61"/></operator> <name><name pos:line="20" pos:column="56">ctrl<pos:position pos:line="20" pos:column="60"/></name><operator pos:line="20" pos:column="60">.<pos:position pos:line="20" pos:column="61"/></operator><name pos:line="20" pos:column="61">conn<pos:position pos:line="20" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="67"/></expr_stmt>
        <comment type="line" pos:line="21" pos:column="9">// TODO: assert(ctrl.closer != NULL);</comment>
        <return pos:line="22" pos:column="9">return;<pos:position pos:line="22" pos:column="16"/></return>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>

    <typedef pos:line="25" pos:column="5">typedef <type><name><name pos:line="25" pos:column="13">CommCbMemFunT<pos:position pos:line="25" pos:column="26"/></name><argument_list type="generic" pos:line="25" pos:column="26">&lt;<argument><expr><name pos:line="25" pos:column="27">Client<pos:position pos:line="25" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="35">CommIoCbParams<pos:position pos:line="25" pos:column="49"/></name></expr></argument>&gt;<pos:position pos:line="25" pos:column="53"/></argument_list></name></type> <name pos:line="25" pos:column="51">Dialer<pos:position pos:line="25" pos:column="57"/></name>;<pos:position pos:line="25" pos:column="58"/></typedef>
    <decl_stmt><decl><type><name><name pos:line="26" pos:column="5">AsyncCall<pos:position pos:line="26" pos:column="14"/></name><operator pos:line="26" pos:column="14">::<pos:position pos:line="26" pos:column="16"/></operator><name pos:line="26" pos:column="16">Pointer<pos:position pos:line="26" pos:column="23"/></name></name></type> <name pos:line="26" pos:column="24">call<pos:position pos:line="26" pos:column="28"/></name> <init pos:line="26" pos:column="29">= <expr><call><name pos:line="26" pos:column="31">JobCallback<pos:position pos:line="26" pos:column="42"/></name><argument_list pos:line="26" pos:column="42">(<argument><expr><literal type="number" pos:line="26" pos:column="43">9<pos:position pos:line="26" pos:column="44"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="46">5<pos:position pos:line="26" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="49">Dialer<pos:position pos:line="26" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="57">this<pos:position pos:line="26" pos:column="61"/></name></expr></argument>,
                                          <argument><expr><name><name pos:line="27" pos:column="43">Ftp<pos:position pos:line="27" pos:column="46"/></name><operator pos:line="27" pos:column="46">::<pos:position pos:line="27" pos:column="48"/></operator><name pos:line="27" pos:column="48">Client<pos:position pos:line="27" pos:column="54"/></name><operator pos:line="27" pos:column="54">::<pos:position pos:line="27" pos:column="56"/></operator><name pos:line="27" pos:column="56">writeCommandCallback<pos:position pos:line="27" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="77"/></argument_list></call></expr></init></decl>;<pos:position pos:line="27" pos:column="78"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="28" pos:column="5">Comm<pos:position pos:line="28" pos:column="9"/></name><operator pos:line="28" pos:column="9">::<pos:position pos:line="28" pos:column="11"/></operator><name pos:line="28" pos:column="11">Write<pos:position pos:line="28" pos:column="16"/></name></name><argument_list pos:line="28" pos:column="16">(<argument><expr><name><name pos:line="28" pos:column="17">ctrl<pos:position pos:line="28" pos:column="21"/></name><operator pos:line="28" pos:column="21">.<pos:position pos:line="28" pos:column="22"/></operator><name pos:line="28" pos:column="22">conn<pos:position pos:line="28" pos:column="26"/></name></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="28">ctrl<pos:position pos:line="28" pos:column="32"/></name><operator pos:line="28" pos:column="32">.<pos:position pos:line="28" pos:column="33"/></operator><name pos:line="28" pos:column="33">last_command<pos:position pos:line="28" pos:column="45"/></name></name></expr></argument>, <argument><expr><call><name pos:line="28" pos:column="47">strlen<pos:position pos:line="28" pos:column="53"/></name><argument_list pos:line="28" pos:column="53">(<argument><expr><name><name pos:line="28" pos:column="54">ctrl<pos:position pos:line="28" pos:column="58"/></name><operator pos:line="28" pos:column="58">.<pos:position pos:line="28" pos:column="59"/></operator><name pos:line="28" pos:column="59">last_command<pos:position pos:line="28" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="72"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="28" pos:column="74">call<pos:position pos:line="28" pos:column="78"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="80">NULL<pos:position pos:line="28" pos:column="84"/></name></expr></argument>)<pos:position pos:line="28" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="86"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="30" pos:column="5">scheduleReadControlReply<pos:position pos:line="30" pos:column="29"/></name><argument_list pos:line="30" pos:column="29">(<argument><expr><literal type="number" pos:line="30" pos:column="30">0<pos:position pos:line="30" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="33"/></expr_stmt>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
