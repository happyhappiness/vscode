<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1688_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HttpStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">processReplyHeader<pos:position pos:line="2" pos:column="34"/></name></name><parameter_list pos:line="2" pos:column="34">()<pos:position pos:line="2" pos:column="36"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" format="doxygen" pos:line="4" pos:column="5">/** Creates a blank header. If this routine is made incremental, this will not do */</comment>

    <comment type="block" pos:line="6" pos:column="5">/* NP: all exit points to this function MUST call ctx_exit(ctx) */</comment>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">Ctx<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">ctx<pos:position pos:line="7" pos:column="12"/></name> <init pos:line="7" pos:column="13">= <expr><call><name pos:line="7" pos:column="15">ctx_enter<pos:position pos:line="7" pos:column="24"/></name><argument_list pos:line="7" pos:column="24">(<argument><expr><call><name><name pos:line="7" pos:column="25">entry<pos:position pos:line="7" pos:column="30"/></name><operator pos:line="7" pos:column="30">-&gt;<pos:position pos:line="7" pos:column="35"/></operator><name pos:line="7" pos:column="32">mem_obj<pos:position pos:line="7" pos:column="39"/></name><operator pos:line="7" pos:column="39">-&gt;<pos:position pos:line="7" pos:column="44"/></operator><name pos:line="7" pos:column="41">urlXXX<pos:position pos:line="7" pos:column="47"/></name></name><argument_list pos:line="7" pos:column="47">()<pos:position pos:line="7" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="51"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="9" pos:column="5">debugs<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><literal type="number" pos:line="9" pos:column="12">11<pos:position pos:line="9" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="16">3<pos:position pos:line="9" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="19">"processReplyHeader: key '"<pos:position pos:line="9" pos:column="46"/></literal> <operator pos:line="9" pos:column="47">&lt;&lt;<pos:position pos:line="9" pos:column="55"/></operator> <call><name><name pos:line="9" pos:column="50">entry<pos:position pos:line="9" pos:column="55"/></name><operator pos:line="9" pos:column="55">-&gt;<pos:position pos:line="9" pos:column="60"/></operator><name pos:line="9" pos:column="57">getMD5Text<pos:position pos:line="9" pos:column="67"/></name></name><argument_list pos:line="9" pos:column="67">()<pos:position pos:line="9" pos:column="69"/></argument_list></call> <operator pos:line="9" pos:column="70">&lt;&lt;<pos:position pos:line="9" pos:column="78"/></operator> <literal type="string" pos:line="9" pos:column="73">"'"<pos:position pos:line="9" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="78"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="11" pos:column="5">assert<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><operator pos:line="11" pos:column="12">!<pos:position pos:line="11" pos:column="13"/></operator><name><name pos:line="11" pos:column="13">flags<pos:position pos:line="11" pos:column="18"/></name><operator pos:line="11" pos:column="18">.<pos:position pos:line="11" pos:column="19"/></operator><name pos:line="11" pos:column="19">headers_parsed<pos:position pos:line="11" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="35"/></expr_stmt>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><operator pos:line="13" pos:column="9">!<pos:position pos:line="13" pos:column="10"/></operator><call><name><name pos:line="13" pos:column="10">inBuf<pos:position pos:line="13" pos:column="15"/></name><operator pos:line="13" pos:column="15">.<pos:position pos:line="13" pos:column="16"/></operator><name pos:line="13" pos:column="16">length<pos:position pos:line="13" pos:column="22"/></name></name><argument_list pos:line="13" pos:column="22">()<pos:position pos:line="13" pos:column="24"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="25"/></condition><then pos:line="13" pos:column="25"> <block pos:line="13" pos:column="26">{
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">ctx_exit<pos:position pos:line="14" pos:column="17"/></name><argument_list pos:line="14" pos:column="17">(<argument><expr><name pos:line="14" pos:column="18">ctx<pos:position pos:line="14" pos:column="21"/></name></expr></argument>)<pos:position pos:line="14" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="23"/></expr_stmt>
        <return pos:line="15" pos:column="9">return;<pos:position pos:line="15" pos:column="16"/></return>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="18" pos:column="5">/* Attempt to parse the first line; this will define where the protocol, status, reason-phrase and header begin */</comment>
    <block pos:line="19" pos:column="5">{
        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">hp<pos:position pos:line="20" pos:column="15"/></name> <operator pos:line="20" pos:column="16">==<pos:position pos:line="20" pos:column="18"/></operator> <name pos:line="20" pos:column="19">NULL<pos:position pos:line="20" pos:column="23"/></name></expr>)<pos:position pos:line="20" pos:column="24"/></condition><then pos:line="20" pos:column="24">
            <block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="13">hp<pos:position pos:line="21" pos:column="15"/></name> <operator pos:line="21" pos:column="16">=<pos:position pos:line="21" pos:column="17"/></operator> <operator pos:line="21" pos:column="18">new<pos:position pos:line="21" pos:column="21"/></operator> <name><name pos:line="21" pos:column="22">Http1<pos:position pos:line="21" pos:column="27"/></name><operator pos:line="21" pos:column="27">::<pos:position pos:line="21" pos:column="29"/></operator><name pos:line="21" pos:column="29">ResponseParser<pos:position pos:line="21" pos:column="43"/></name></name></expr>;<pos:position pos:line="21" pos:column="44"/></expr_stmt></block></then></if>

        <decl_stmt><decl><type><name pos:line="23" pos:column="9">bool<pos:position pos:line="23" pos:column="13"/></name></type> <name pos:line="23" pos:column="14">parsedOk<pos:position pos:line="23" pos:column="22"/></name> <init pos:line="23" pos:column="23">= <expr><call><name><name pos:line="23" pos:column="25">hp<pos:position pos:line="23" pos:column="27"/></name><operator pos:line="23" pos:column="27">-&gt;<pos:position pos:line="23" pos:column="32"/></operator><name pos:line="23" pos:column="29">parse<pos:position pos:line="23" pos:column="34"/></name></name><argument_list pos:line="23" pos:column="34">(<argument><expr><name pos:line="23" pos:column="35">inBuf<pos:position pos:line="23" pos:column="40"/></name></expr></argument>)<pos:position pos:line="23" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="23" pos:column="42"/></decl_stmt>

        <comment type="line" pos:line="25" pos:column="9">// sync the buffers after parsing.</comment>
        <expr_stmt><expr><name pos:line="26" pos:column="9">inBuf<pos:position pos:line="26" pos:column="14"/></name> <operator pos:line="26" pos:column="15">=<pos:position pos:line="26" pos:column="16"/></operator> <call><name><name pos:line="26" pos:column="17">hp<pos:position pos:line="26" pos:column="19"/></name><operator pos:line="26" pos:column="19">-&gt;<pos:position pos:line="26" pos:column="24"/></operator><name pos:line="26" pos:column="21">remaining<pos:position pos:line="26" pos:column="30"/></name></name><argument_list pos:line="26" pos:column="30">()<pos:position pos:line="26" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="33"/></expr_stmt>

        <if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><call><name><name pos:line="28" pos:column="13">hp<pos:position pos:line="28" pos:column="15"/></name><operator pos:line="28" pos:column="15">-&gt;<pos:position pos:line="28" pos:column="20"/></operator><name pos:line="28" pos:column="17">needsMoreData<pos:position pos:line="28" pos:column="30"/></name></name><argument_list pos:line="28" pos:column="30">()<pos:position pos:line="28" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="33"/></condition><then pos:line="28" pos:column="33"> <block pos:line="28" pos:column="34">{
            <if pos:line="29" pos:column="13">if <condition pos:line="29" pos:column="16">(<expr><name pos:line="29" pos:column="17">eof<pos:position pos:line="29" pos:column="20"/></name></expr>)<pos:position pos:line="29" pos:column="21"/></condition><then pos:line="29" pos:column="21"> <block pos:line="29" pos:column="22">{ <comment type="line" pos:line="29" pos:column="24">// no more data coming</comment>
                <comment type="block" pos:line="30" pos:column="17">/* Bug 2879: Replies may terminate with \r\n then EOF instead of \r\n\r\n.
                 * We also may receive truncated responses.
                 * Ensure here that we have at minimum two \r\n when EOF is seen.
                 */</comment>
                <expr_stmt><expr><call><name><name pos:line="34" pos:column="17">inBuf<pos:position pos:line="34" pos:column="22"/></name><operator pos:line="34" pos:column="22">.<pos:position pos:line="34" pos:column="23"/></operator><name pos:line="34" pos:column="23">append<pos:position pos:line="34" pos:column="29"/></name></name><argument_list pos:line="34" pos:column="29">(<argument><expr><literal type="string" pos:line="34" pos:column="30">"\r\n\r\n"<pos:position pos:line="34" pos:column="40"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="42">4<pos:position pos:line="34" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="45"/></expr_stmt>
                <comment type="line" pos:line="35" pos:column="17">// retry the parse</comment>
                <expr_stmt><expr><name pos:line="36" pos:column="17">parsedOk<pos:position pos:line="36" pos:column="25"/></name> <operator pos:line="36" pos:column="26">=<pos:position pos:line="36" pos:column="27"/></operator> <call><name><name pos:line="36" pos:column="28">hp<pos:position pos:line="36" pos:column="30"/></name><operator pos:line="36" pos:column="30">-&gt;<pos:position pos:line="36" pos:column="35"/></operator><name pos:line="36" pos:column="32">parse<pos:position pos:line="36" pos:column="37"/></name></name><argument_list pos:line="36" pos:column="37">(<argument><expr><name pos:line="36" pos:column="38">inBuf<pos:position pos:line="36" pos:column="43"/></name></expr></argument>)<pos:position pos:line="36" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="45"/></expr_stmt>
                <comment type="line" pos:line="37" pos:column="17">// sync the buffers after parsing.</comment>
                <expr_stmt><expr><name pos:line="38" pos:column="17">inBuf<pos:position pos:line="38" pos:column="22"/></name> <operator pos:line="38" pos:column="23">=<pos:position pos:line="38" pos:column="24"/></operator> <call><name><name pos:line="38" pos:column="25">hp<pos:position pos:line="38" pos:column="27"/></name><operator pos:line="38" pos:column="27">-&gt;<pos:position pos:line="38" pos:column="32"/></operator><name pos:line="38" pos:column="29">remaining<pos:position pos:line="38" pos:column="38"/></name></name><argument_list pos:line="38" pos:column="38">()<pos:position pos:line="38" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="41"/></expr_stmt>
            }<pos:position pos:line="39" pos:column="14"/></block></then> <else pos:line="39" pos:column="15">else <block pos:line="39" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="40" pos:column="17">debugs<pos:position pos:line="40" pos:column="23"/></name><argument_list pos:line="40" pos:column="23">(<argument><expr><literal type="number" pos:line="40" pos:column="24">33<pos:position pos:line="40" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="28">5<pos:position pos:line="40" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="31">"Incomplete response, waiting for end of response headers"<pos:position pos:line="40" pos:column="89"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="91"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="41" pos:column="17">ctx_exit<pos:position pos:line="41" pos:column="25"/></name><argument_list pos:line="41" pos:column="25">(<argument><expr><name pos:line="41" pos:column="26">ctx<pos:position pos:line="41" pos:column="29"/></name></expr></argument>)<pos:position pos:line="41" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="31"/></expr_stmt>
                <return pos:line="42" pos:column="17">return;<pos:position pos:line="42" pos:column="24"/></return>
            }<pos:position pos:line="43" pos:column="14"/></block></else></if>
        }<pos:position pos:line="44" pos:column="10"/></block></then></if>

        <if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><operator pos:line="46" pos:column="13">!<pos:position pos:line="46" pos:column="14"/></operator><name pos:line="46" pos:column="14">parsedOk<pos:position pos:line="46" pos:column="22"/></name></expr>)<pos:position pos:line="46" pos:column="23"/></condition><then pos:line="46" pos:column="23"> <block pos:line="46" pos:column="24">{
            <comment type="line" pos:line="47" pos:column="13">// unrecoverable parsing error</comment>
            <comment type="line" pos:line="48" pos:column="13">// TODO: Use Raw! XXX: inBuf no longer has the [beginning of the] malformed header.</comment>
            <expr_stmt><expr><call><name pos:line="49" pos:column="13">debugs<pos:position pos:line="49" pos:column="19"/></name><argument_list pos:line="49" pos:column="19">(<argument><expr><literal type="number" pos:line="49" pos:column="20">11<pos:position pos:line="49" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="49" pos:column="24">3<pos:position pos:line="49" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="27">"Non-HTTP-compliant header:\n---------\n"<pos:position pos:line="49" pos:column="68"/></literal> <operator pos:line="49" pos:column="69">&lt;&lt;<pos:position pos:line="49" pos:column="77"/></operator> <name pos:line="49" pos:column="72">inBuf<pos:position pos:line="49" pos:column="77"/></name> <operator pos:line="49" pos:column="78">&lt;&lt;<pos:position pos:line="49" pos:column="86"/></operator> <literal type="string" pos:line="49" pos:column="81">"\n----------"<pos:position pos:line="49" pos:column="95"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="96"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="97"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="50" pos:column="13">flags<pos:position pos:line="50" pos:column="18"/></name><operator pos:line="50" pos:column="18">.<pos:position pos:line="50" pos:column="19"/></operator><name pos:line="50" pos:column="19">headers_parsed<pos:position pos:line="50" pos:column="33"/></name></name> <operator pos:line="50" pos:column="34">=<pos:position pos:line="50" pos:column="35"/></operator> <literal type="boolean" pos:line="50" pos:column="36">true<pos:position pos:line="50" pos:column="40"/></literal></expr>;<pos:position pos:line="50" pos:column="41"/></expr_stmt>
            <decl_stmt><decl><type><name pos:line="51" pos:column="13">HttpReply<pos:position pos:line="51" pos:column="22"/></name> <modifier pos:line="51" pos:column="23">*<pos:position pos:line="51" pos:column="24"/></modifier></type><name pos:line="51" pos:column="24">newrep<pos:position pos:line="51" pos:column="30"/></name> <init pos:line="51" pos:column="31">= <expr><operator pos:line="51" pos:column="33">new<pos:position pos:line="51" pos:column="36"/></operator> <name pos:line="51" pos:column="37">HttpReply<pos:position pos:line="51" pos:column="46"/></name></expr></init></decl>;<pos:position pos:line="51" pos:column="47"/></decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="52" pos:column="13">newrep<pos:position pos:line="52" pos:column="19"/></name><operator pos:line="52" pos:column="19">-&gt;<pos:position pos:line="52" pos:column="24"/></operator><name pos:line="52" pos:column="21">sline<pos:position pos:line="52" pos:column="26"/></name><operator pos:line="52" pos:column="26">.<pos:position pos:line="52" pos:column="27"/></operator><name pos:line="52" pos:column="27">set<pos:position pos:line="52" pos:column="30"/></name></name><argument_list pos:line="52" pos:column="30">(<argument><expr><call><name><name pos:line="52" pos:column="31">Http<pos:position pos:line="52" pos:column="35"/></name><operator pos:line="52" pos:column="35">::<pos:position pos:line="52" pos:column="37"/></operator><name pos:line="52" pos:column="37">ProtocolVersion<pos:position pos:line="52" pos:column="52"/></name></name><argument_list pos:line="52" pos:column="52">()<pos:position pos:line="52" pos:column="54"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="52" pos:column="56">hp<pos:position pos:line="52" pos:column="58"/></name><operator pos:line="52" pos:column="58">-&gt;<pos:position pos:line="52" pos:column="63"/></operator><name pos:line="52" pos:column="60">parseStatusCode<pos:position pos:line="52" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="77"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="53" pos:column="13">setVirginReply<pos:position pos:line="53" pos:column="27"/></name><argument_list pos:line="53" pos:column="27">(<argument><expr><name pos:line="53" pos:column="28">newrep<pos:position pos:line="53" pos:column="34"/></name></expr></argument>)<pos:position pos:line="53" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="36"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="54" pos:column="13">ctx_exit<pos:position pos:line="54" pos:column="21"/></name><argument_list pos:line="54" pos:column="21">(<argument><expr><name pos:line="54" pos:column="22">ctx<pos:position pos:line="54" pos:column="25"/></name></expr></argument>)<pos:position pos:line="54" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="27"/></expr_stmt>
            <return pos:line="55" pos:column="13">return;<pos:position pos:line="55" pos:column="20"/></return>
        }<pos:position pos:line="56" pos:column="10"/></block></then></if>
    }<pos:position pos:line="57" pos:column="6"/></block>

    <comment type="block" pos:line="59" pos:column="5">/* We know the whole response is in parser now */</comment>
    <expr_stmt><expr><call><name pos:line="60" pos:column="5">debugs<pos:position pos:line="60" pos:column="11"/></name><argument_list pos:line="60" pos:column="11">(<argument><expr><literal type="number" pos:line="60" pos:column="12">11<pos:position pos:line="60" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="60" pos:column="16">2<pos:position pos:line="60" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="19">"HTTP Server "<pos:position pos:line="60" pos:column="33"/></literal> <operator pos:line="60" pos:column="34">&lt;&lt;<pos:position pos:line="60" pos:column="42"/></operator> <name pos:line="60" pos:column="37">serverConnection<pos:position pos:line="60" pos:column="53"/></name></expr></argument>)<pos:position pos:line="60" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="61" pos:column="5">debugs<pos:position pos:line="61" pos:column="11"/></name><argument_list pos:line="61" pos:column="11">(<argument><expr><literal type="number" pos:line="61" pos:column="12">11<pos:position pos:line="61" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="61" pos:column="16">2<pos:position pos:line="61" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="19">"HTTP Server RESPONSE:\n---------\n"<pos:position pos:line="61" pos:column="55"/></literal> <operator pos:line="61" pos:column="56">&lt;&lt;<pos:position pos:line="61" pos:column="64"/></operator>
           <call><name><name pos:line="62" pos:column="12">hp<pos:position pos:line="62" pos:column="14"/></name><operator pos:line="62" pos:column="14">-&gt;<pos:position pos:line="62" pos:column="19"/></operator><name pos:line="62" pos:column="16">messageProtocol<pos:position pos:line="62" pos:column="31"/></name></name><argument_list pos:line="62" pos:column="31">()<pos:position pos:line="62" pos:column="33"/></argument_list></call> <operator pos:line="62" pos:column="34">&lt;&lt;<pos:position pos:line="62" pos:column="42"/></operator> <literal type="string" pos:line="62" pos:column="37">" "<pos:position pos:line="62" pos:column="40"/></literal> <operator pos:line="62" pos:column="41">&lt;&lt;<pos:position pos:line="62" pos:column="49"/></operator> <call><name><name pos:line="62" pos:column="44">hp<pos:position pos:line="62" pos:column="46"/></name><operator pos:line="62" pos:column="46">-&gt;<pos:position pos:line="62" pos:column="51"/></operator><name pos:line="62" pos:column="48">messageStatus<pos:position pos:line="62" pos:column="61"/></name></name><argument_list pos:line="62" pos:column="61">()<pos:position pos:line="62" pos:column="63"/></argument_list></call> <operator pos:line="62" pos:column="64">&lt;&lt;<pos:position pos:line="62" pos:column="72"/></operator> <literal type="string" pos:line="62" pos:column="67">" "<pos:position pos:line="62" pos:column="70"/></literal> <operator pos:line="62" pos:column="71">&lt;&lt;<pos:position pos:line="62" pos:column="79"/></operator> <call><name><name pos:line="62" pos:column="74">hp<pos:position pos:line="62" pos:column="76"/></name><operator pos:line="62" pos:column="76">-&gt;<pos:position pos:line="62" pos:column="81"/></operator><name pos:line="62" pos:column="78">reasonPhrase<pos:position pos:line="62" pos:column="90"/></name></name><argument_list pos:line="62" pos:column="90">()<pos:position pos:line="62" pos:column="92"/></argument_list></call> <operator pos:line="62" pos:column="93">&lt;&lt;<pos:position pos:line="62" pos:column="101"/></operator> <literal type="string" pos:line="62" pos:column="96">"\n"<pos:position pos:line="62" pos:column="100"/></literal> <operator pos:line="62" pos:column="101">&lt;&lt;<pos:position pos:line="62" pos:column="109"/></operator>
           <call><name><name pos:line="63" pos:column="12">hp<pos:position pos:line="63" pos:column="14"/></name><operator pos:line="63" pos:column="14">-&gt;<pos:position pos:line="63" pos:column="19"/></operator><name pos:line="63" pos:column="16">mimeHeader<pos:position pos:line="63" pos:column="26"/></name></name><argument_list pos:line="63" pos:column="26">()<pos:position pos:line="63" pos:column="28"/></argument_list></call> <operator pos:line="63" pos:column="29">&lt;&lt;<pos:position pos:line="63" pos:column="37"/></operator>
           <literal type="string" pos:line="64" pos:column="12">"----------"<pos:position pos:line="64" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="26"/></expr_stmt>

    <comment type="line" pos:line="66" pos:column="5">// reset payload tracking to begin after message headers</comment>
    <expr_stmt><expr><name pos:line="67" pos:column="5">payloadSeen<pos:position pos:line="67" pos:column="16"/></name> <operator pos:line="67" pos:column="17">=<pos:position pos:line="67" pos:column="18"/></operator> <call><name><name pos:line="67" pos:column="19">inBuf<pos:position pos:line="67" pos:column="24"/></name><operator pos:line="67" pos:column="24">.<pos:position pos:line="67" pos:column="25"/></operator><name pos:line="67" pos:column="25">length<pos:position pos:line="67" pos:column="31"/></name></name><argument_list pos:line="67" pos:column="31">()<pos:position pos:line="67" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="34"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="69" pos:column="5">HttpReply<pos:position pos:line="69" pos:column="14"/></name> <modifier pos:line="69" pos:column="15">*<pos:position pos:line="69" pos:column="16"/></modifier></type><name pos:line="69" pos:column="16">newrep<pos:position pos:line="69" pos:column="22"/></name> <init pos:line="69" pos:column="23">= <expr><operator pos:line="69" pos:column="25">new<pos:position pos:line="69" pos:column="28"/></operator> <name pos:line="69" pos:column="29">HttpReply<pos:position pos:line="69" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="69" pos:column="39"/></decl_stmt>
    <comment type="line" pos:line="70" pos:column="5">// XXX: RFC 7230 indicates we MAY ignore the reason phrase,</comment>
    <comment type="line" pos:line="71" pos:column="5">//      and use an empty string on unknown status.</comment>
    <comment type="line" pos:line="72" pos:column="5">//      We do that now to avoid performance regression from using SBuf::c_str()</comment>
    <expr_stmt><expr><call><name><name pos:line="73" pos:column="5">newrep<pos:position pos:line="73" pos:column="11"/></name><operator pos:line="73" pos:column="11">-&gt;<pos:position pos:line="73" pos:column="16"/></operator><name pos:line="73" pos:column="13">sline<pos:position pos:line="73" pos:column="18"/></name><operator pos:line="73" pos:column="18">.<pos:position pos:line="73" pos:column="19"/></operator><name pos:line="73" pos:column="19">set<pos:position pos:line="73" pos:column="22"/></name></name><argument_list pos:line="73" pos:column="22">(<argument><expr><call><name><name pos:line="73" pos:column="23">Http<pos:position pos:line="73" pos:column="27"/></name><operator pos:line="73" pos:column="27">::<pos:position pos:line="73" pos:column="29"/></operator><name pos:line="73" pos:column="29">ProtocolVersion<pos:position pos:line="73" pos:column="44"/></name></name><argument_list pos:line="73" pos:column="44">(<argument><expr><literal type="number" pos:line="73" pos:column="45">1<pos:position pos:line="73" pos:column="46"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="73" pos:column="47">1<pos:position pos:line="73" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="49"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="73" pos:column="51">hp<pos:position pos:line="73" pos:column="53"/></name><operator pos:line="73" pos:column="53">-&gt;<pos:position pos:line="73" pos:column="58"/></operator><name pos:line="73" pos:column="55">messageStatus<pos:position pos:line="73" pos:column="68"/></name></name><argument_list pos:line="73" pos:column="68">()<pos:position pos:line="73" pos:column="70"/></argument_list></call></expr></argument> <comment type="block" pos:line="73" pos:column="71">/* , hp-&gt;reasonPhrase() */</comment>)<pos:position pos:line="73" pos:column="98"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="99"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="74" pos:column="5">newrep<pos:position pos:line="74" pos:column="11"/></name><operator pos:line="74" pos:column="11">-&gt;<pos:position pos:line="74" pos:column="16"/></operator><name pos:line="74" pos:column="13">sline<pos:position pos:line="74" pos:column="18"/></name><operator pos:line="74" pos:column="18">.<pos:position pos:line="74" pos:column="19"/></operator><name pos:line="74" pos:column="19">protocol<pos:position pos:line="74" pos:column="27"/></name></name> <operator pos:line="74" pos:column="28">=<pos:position pos:line="74" pos:column="29"/></operator> <name><name pos:line="74" pos:column="30">newrep<pos:position pos:line="74" pos:column="36"/></name><operator pos:line="74" pos:column="36">-&gt;<pos:position pos:line="74" pos:column="41"/></operator><name pos:line="74" pos:column="38">sline<pos:position pos:line="74" pos:column="43"/></name><operator pos:line="74" pos:column="43">.<pos:position pos:line="74" pos:column="44"/></operator><name pos:line="74" pos:column="44">version<pos:position pos:line="74" pos:column="51"/></name><operator pos:line="74" pos:column="51">.<pos:position pos:line="74" pos:column="52"/></operator><name pos:line="74" pos:column="52">protocol<pos:position pos:line="74" pos:column="60"/></name></name> <operator pos:line="74" pos:column="61">=<pos:position pos:line="74" pos:column="62"/></operator> <call><name><name pos:line="74" pos:column="63">hp<pos:position pos:line="74" pos:column="65"/></name><operator pos:line="74" pos:column="65">-&gt;<pos:position pos:line="74" pos:column="70"/></operator><name pos:line="74" pos:column="67">messageProtocol<pos:position pos:line="74" pos:column="82"/></name></name><argument_list pos:line="74" pos:column="82">()<pos:position pos:line="74" pos:column="84"/></argument_list></call><operator pos:line="74" pos:column="84">.<pos:position pos:line="74" pos:column="85"/></operator><name pos:line="74" pos:column="85">protocol<pos:position pos:line="74" pos:column="93"/></name></expr>;<pos:position pos:line="74" pos:column="94"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="75" pos:column="5">newrep<pos:position pos:line="75" pos:column="11"/></name><operator pos:line="75" pos:column="11">-&gt;<pos:position pos:line="75" pos:column="16"/></operator><name pos:line="75" pos:column="13">sline<pos:position pos:line="75" pos:column="18"/></name><operator pos:line="75" pos:column="18">.<pos:position pos:line="75" pos:column="19"/></operator><name pos:line="75" pos:column="19">version<pos:position pos:line="75" pos:column="26"/></name><operator pos:line="75" pos:column="26">.<pos:position pos:line="75" pos:column="27"/></operator><name pos:line="75" pos:column="27">major<pos:position pos:line="75" pos:column="32"/></name></name> <operator pos:line="75" pos:column="33">=<pos:position pos:line="75" pos:column="34"/></operator> <call><name><name pos:line="75" pos:column="35">hp<pos:position pos:line="75" pos:column="37"/></name><operator pos:line="75" pos:column="37">-&gt;<pos:position pos:line="75" pos:column="42"/></operator><name pos:line="75" pos:column="39">messageProtocol<pos:position pos:line="75" pos:column="54"/></name></name><argument_list pos:line="75" pos:column="54">()<pos:position pos:line="75" pos:column="56"/></argument_list></call><operator pos:line="75" pos:column="56">.<pos:position pos:line="75" pos:column="57"/></operator><name pos:line="75" pos:column="57">major<pos:position pos:line="75" pos:column="62"/></name></expr>;<pos:position pos:line="75" pos:column="63"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="76" pos:column="5">newrep<pos:position pos:line="76" pos:column="11"/></name><operator pos:line="76" pos:column="11">-&gt;<pos:position pos:line="76" pos:column="16"/></operator><name pos:line="76" pos:column="13">sline<pos:position pos:line="76" pos:column="18"/></name><operator pos:line="76" pos:column="18">.<pos:position pos:line="76" pos:column="19"/></operator><name pos:line="76" pos:column="19">version<pos:position pos:line="76" pos:column="26"/></name><operator pos:line="76" pos:column="26">.<pos:position pos:line="76" pos:column="27"/></operator><name pos:line="76" pos:column="27">minor<pos:position pos:line="76" pos:column="32"/></name></name> <operator pos:line="76" pos:column="33">=<pos:position pos:line="76" pos:column="34"/></operator> <call><name><name pos:line="76" pos:column="35">hp<pos:position pos:line="76" pos:column="37"/></name><operator pos:line="76" pos:column="37">-&gt;<pos:position pos:line="76" pos:column="42"/></operator><name pos:line="76" pos:column="39">messageProtocol<pos:position pos:line="76" pos:column="54"/></name></name><argument_list pos:line="76" pos:column="54">()<pos:position pos:line="76" pos:column="56"/></argument_list></call><operator pos:line="76" pos:column="56">.<pos:position pos:line="76" pos:column="57"/></operator><name pos:line="76" pos:column="57">minor<pos:position pos:line="76" pos:column="62"/></name></expr>;<pos:position pos:line="76" pos:column="63"/></expr_stmt>

    <comment type="line" pos:line="78" pos:column="5">// parse headers</comment>
    <if pos:line="79" pos:column="5">if <condition pos:line="79" pos:column="8">(<expr><operator pos:line="79" pos:column="9">!<pos:position pos:line="79" pos:column="10"/></operator><call><name><name pos:line="79" pos:column="10">newrep<pos:position pos:line="79" pos:column="16"/></name><operator pos:line="79" pos:column="16">-&gt;<pos:position pos:line="79" pos:column="21"/></operator><name pos:line="79" pos:column="18">parseHeader<pos:position pos:line="79" pos:column="29"/></name></name><argument_list pos:line="79" pos:column="29">(<argument><expr><operator pos:line="79" pos:column="30">*<pos:position pos:line="79" pos:column="31"/></operator><name pos:line="79" pos:column="31">hp<pos:position pos:line="79" pos:column="33"/></name></expr></argument>)<pos:position pos:line="79" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="79" pos:column="35"/></condition><then pos:line="79" pos:column="35"> <block pos:line="79" pos:column="36">{
        <comment type="line" pos:line="80" pos:column="9">// XXX: when Http::ProtocolVersion is a function, remove this hack. just set with messageProtocol()</comment>
        <expr_stmt><expr><call><name><name pos:line="81" pos:column="9">newrep<pos:position pos:line="81" pos:column="15"/></name><operator pos:line="81" pos:column="15">-&gt;<pos:position pos:line="81" pos:column="20"/></operator><name pos:line="81" pos:column="17">sline<pos:position pos:line="81" pos:column="22"/></name><operator pos:line="81" pos:column="22">.<pos:position pos:line="81" pos:column="23"/></operator><name pos:line="81" pos:column="23">set<pos:position pos:line="81" pos:column="26"/></name></name><argument_list pos:line="81" pos:column="26">(<argument><expr><call><name><name pos:line="81" pos:column="27">Http<pos:position pos:line="81" pos:column="31"/></name><operator pos:line="81" pos:column="31">::<pos:position pos:line="81" pos:column="33"/></operator><name pos:line="81" pos:column="33">ProtocolVersion<pos:position pos:line="81" pos:column="48"/></name></name><argument_list pos:line="81" pos:column="48">()<pos:position pos:line="81" pos:column="50"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="81" pos:column="52">Http<pos:position pos:line="81" pos:column="56"/></name><operator pos:line="81" pos:column="56">::<pos:position pos:line="81" pos:column="58"/></operator><name pos:line="81" pos:column="58">scInvalidHeader<pos:position pos:line="81" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="81" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="75"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="82" pos:column="9">newrep<pos:position pos:line="82" pos:column="15"/></name><operator pos:line="82" pos:column="15">-&gt;<pos:position pos:line="82" pos:column="20"/></operator><name pos:line="82" pos:column="17">sline<pos:position pos:line="82" pos:column="22"/></name><operator pos:line="82" pos:column="22">.<pos:position pos:line="82" pos:column="23"/></operator><name pos:line="82" pos:column="23">version<pos:position pos:line="82" pos:column="30"/></name><operator pos:line="82" pos:column="30">.<pos:position pos:line="82" pos:column="31"/></operator><name pos:line="82" pos:column="31">protocol<pos:position pos:line="82" pos:column="39"/></name></name> <operator pos:line="82" pos:column="40">=<pos:position pos:line="82" pos:column="41"/></operator> <call><name><name pos:line="82" pos:column="42">hp<pos:position pos:line="82" pos:column="44"/></name><operator pos:line="82" pos:column="44">-&gt;<pos:position pos:line="82" pos:column="49"/></operator><name pos:line="82" pos:column="46">messageProtocol<pos:position pos:line="82" pos:column="61"/></name></name><argument_list pos:line="82" pos:column="61">()<pos:position pos:line="82" pos:column="63"/></argument_list></call><operator pos:line="82" pos:column="63">.<pos:position pos:line="82" pos:column="64"/></operator><name pos:line="82" pos:column="64">protocol<pos:position pos:line="82" pos:column="72"/></name></expr>;<pos:position pos:line="82" pos:column="73"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="83" pos:column="9">newrep<pos:position pos:line="83" pos:column="15"/></name><operator pos:line="83" pos:column="15">-&gt;<pos:position pos:line="83" pos:column="20"/></operator><name pos:line="83" pos:column="17">sline<pos:position pos:line="83" pos:column="22"/></name><operator pos:line="83" pos:column="22">.<pos:position pos:line="83" pos:column="23"/></operator><name pos:line="83" pos:column="23">version<pos:position pos:line="83" pos:column="30"/></name><operator pos:line="83" pos:column="30">.<pos:position pos:line="83" pos:column="31"/></operator><name pos:line="83" pos:column="31">major<pos:position pos:line="83" pos:column="36"/></name></name> <operator pos:line="83" pos:column="37">=<pos:position pos:line="83" pos:column="38"/></operator> <call><name><name pos:line="83" pos:column="39">hp<pos:position pos:line="83" pos:column="41"/></name><operator pos:line="83" pos:column="41">-&gt;<pos:position pos:line="83" pos:column="46"/></operator><name pos:line="83" pos:column="43">messageProtocol<pos:position pos:line="83" pos:column="58"/></name></name><argument_list pos:line="83" pos:column="58">()<pos:position pos:line="83" pos:column="60"/></argument_list></call><operator pos:line="83" pos:column="60">.<pos:position pos:line="83" pos:column="61"/></operator><name pos:line="83" pos:column="61">major<pos:position pos:line="83" pos:column="66"/></name></expr>;<pos:position pos:line="83" pos:column="67"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="84" pos:column="9">newrep<pos:position pos:line="84" pos:column="15"/></name><operator pos:line="84" pos:column="15">-&gt;<pos:position pos:line="84" pos:column="20"/></operator><name pos:line="84" pos:column="17">sline<pos:position pos:line="84" pos:column="22"/></name><operator pos:line="84" pos:column="22">.<pos:position pos:line="84" pos:column="23"/></operator><name pos:line="84" pos:column="23">version<pos:position pos:line="84" pos:column="30"/></name><operator pos:line="84" pos:column="30">.<pos:position pos:line="84" pos:column="31"/></operator><name pos:line="84" pos:column="31">minor<pos:position pos:line="84" pos:column="36"/></name></name> <operator pos:line="84" pos:column="37">=<pos:position pos:line="84" pos:column="38"/></operator> <call><name><name pos:line="84" pos:column="39">hp<pos:position pos:line="84" pos:column="41"/></name><operator pos:line="84" pos:column="41">-&gt;<pos:position pos:line="84" pos:column="46"/></operator><name pos:line="84" pos:column="43">messageProtocol<pos:position pos:line="84" pos:column="58"/></name></name><argument_list pos:line="84" pos:column="58">()<pos:position pos:line="84" pos:column="60"/></argument_list></call><operator pos:line="84" pos:column="60">.<pos:position pos:line="84" pos:column="61"/></operator><name pos:line="84" pos:column="61">minor<pos:position pos:line="84" pos:column="66"/></name></expr>;<pos:position pos:line="84" pos:column="67"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="85" pos:column="9">debugs<pos:position pos:line="85" pos:column="15"/></name><argument_list pos:line="85" pos:column="15">(<argument><expr><literal type="number" pos:line="85" pos:column="16">11<pos:position pos:line="85" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="85" pos:column="20">2<pos:position pos:line="85" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="85" pos:column="23">"error parsing response headers mime block"<pos:position pos:line="85" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="85" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="68"/></expr_stmt>
    }<pos:position pos:line="86" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="88" pos:column="5">// done with Parser, now process using the HttpReply</comment>
    <expr_stmt><expr><name pos:line="89" pos:column="5">hp<pos:position pos:line="89" pos:column="7"/></name> <operator pos:line="89" pos:column="8">=<pos:position pos:line="89" pos:column="9"/></operator> <name pos:line="89" pos:column="10">NULL<pos:position pos:line="89" pos:column="14"/></name></expr>;<pos:position pos:line="89" pos:column="15"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="91" pos:column="5">newrep<pos:position pos:line="91" pos:column="11"/></name><operator pos:line="91" pos:column="11">-&gt;<pos:position pos:line="91" pos:column="16"/></operator><name pos:line="91" pos:column="13">sources<pos:position pos:line="91" pos:column="20"/></name></name> <operator pos:line="91" pos:column="21">|=<pos:position pos:line="91" pos:column="23"/></operator> <ternary><condition><expr><call><name><name pos:line="91" pos:column="24">request<pos:position pos:line="91" pos:column="31"/></name><operator pos:line="91" pos:column="31">-&gt;<pos:position pos:line="91" pos:column="36"/></operator><name pos:line="91" pos:column="33">url<pos:position pos:line="91" pos:column="36"/></name><operator pos:line="91" pos:column="36">.<pos:position pos:line="91" pos:column="37"/></operator><name pos:line="91" pos:column="37">getScheme<pos:position pos:line="91" pos:column="46"/></name></name><argument_list pos:line="91" pos:column="46">()<pos:position pos:line="91" pos:column="48"/></argument_list></call> <operator pos:line="91" pos:column="49">==<pos:position pos:line="91" pos:column="51"/></operator> <name><name pos:line="91" pos:column="52">AnyP<pos:position pos:line="91" pos:column="56"/></name><operator pos:line="91" pos:column="56">::<pos:position pos:line="91" pos:column="58"/></operator><name pos:line="91" pos:column="58">PROTO_HTTPS<pos:position pos:line="91" pos:column="69"/></name></name></expr> ?<pos:position pos:line="91" pos:column="71"/></condition><then pos:line="91" pos:column="71"> <expr><name><name pos:line="91" pos:column="72">HttpMsg<pos:position pos:line="91" pos:column="79"/></name><operator pos:line="91" pos:column="79">::<pos:position pos:line="91" pos:column="81"/></operator><name pos:line="91" pos:column="81">srcHttps<pos:position pos:line="91" pos:column="89"/></name></name></expr> <pos:position pos:line="91" pos:column="90"/></then><else pos:line="91" pos:column="90">: <expr><name><name pos:line="91" pos:column="92">HttpMsg<pos:position pos:line="91" pos:column="99"/></name><operator pos:line="91" pos:column="99">::<pos:position pos:line="91" pos:column="101"/></operator><name pos:line="91" pos:column="101">srcHttp<pos:position pos:line="91" pos:column="108"/></name></name></expr></else></ternary></expr>;<pos:position pos:line="91" pos:column="109"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="93" pos:column="5">newrep<pos:position pos:line="93" pos:column="11"/></name><operator pos:line="93" pos:column="11">-&gt;<pos:position pos:line="93" pos:column="16"/></operator><name pos:line="93" pos:column="13">removeStaleWarnings<pos:position pos:line="93" pos:column="32"/></name></name><argument_list pos:line="93" pos:column="32">()<pos:position pos:line="93" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="35"/></expr_stmt>

    <if pos:line="95" pos:column="5">if <condition pos:line="95" pos:column="8">(<expr><name><name pos:line="95" pos:column="9">newrep<pos:position pos:line="95" pos:column="15"/></name><operator pos:line="95" pos:column="15">-&gt;<pos:position pos:line="95" pos:column="20"/></operator><name pos:line="95" pos:column="17">sline<pos:position pos:line="95" pos:column="22"/></name><operator pos:line="95" pos:column="22">.<pos:position pos:line="95" pos:column="23"/></operator><name pos:line="95" pos:column="23">protocol<pos:position pos:line="95" pos:column="31"/></name></name> <operator pos:line="95" pos:column="32">==<pos:position pos:line="95" pos:column="34"/></operator> <name><name pos:line="95" pos:column="35">AnyP<pos:position pos:line="95" pos:column="39"/></name><operator pos:line="95" pos:column="39">::<pos:position pos:line="95" pos:column="41"/></operator><name pos:line="95" pos:column="41">PROTO_HTTP<pos:position pos:line="95" pos:column="51"/></name></name> <operator pos:line="95" pos:column="52">&amp;&amp;<pos:position pos:line="95" pos:column="62"/></operator> <call><name><name pos:line="95" pos:column="55">newrep<pos:position pos:line="95" pos:column="61"/></name><operator pos:line="95" pos:column="61">-&gt;<pos:position pos:line="95" pos:column="66"/></operator><name pos:line="95" pos:column="63">sline<pos:position pos:line="95" pos:column="68"/></name><operator pos:line="95" pos:column="68">.<pos:position pos:line="95" pos:column="69"/></operator><name pos:line="95" pos:column="69">status<pos:position pos:line="95" pos:column="75"/></name></name><argument_list pos:line="95" pos:column="75">()<pos:position pos:line="95" pos:column="77"/></argument_list></call> <operator pos:line="95" pos:column="78">&gt;=<pos:position pos:line="95" pos:column="83"/></operator> <literal type="number" pos:line="95" pos:column="81">100<pos:position pos:line="95" pos:column="84"/></literal> <operator pos:line="95" pos:column="85">&amp;&amp;<pos:position pos:line="95" pos:column="95"/></operator> <call><name><name pos:line="95" pos:column="88">newrep<pos:position pos:line="95" pos:column="94"/></name><operator pos:line="95" pos:column="94">-&gt;<pos:position pos:line="95" pos:column="99"/></operator><name pos:line="95" pos:column="96">sline<pos:position pos:line="95" pos:column="101"/></name><operator pos:line="95" pos:column="101">.<pos:position pos:line="95" pos:column="102"/></operator><name pos:line="95" pos:column="102">status<pos:position pos:line="95" pos:column="108"/></name></name><argument_list pos:line="95" pos:column="108">()<pos:position pos:line="95" pos:column="110"/></argument_list></call> <operator pos:line="95" pos:column="111">&lt;<pos:position pos:line="95" pos:column="115"/></operator> <literal type="number" pos:line="95" pos:column="113">200<pos:position pos:line="95" pos:column="116"/></literal></expr>)<pos:position pos:line="95" pos:column="117"/></condition><then pos:line="95" pos:column="117"> <block pos:line="95" pos:column="118">{
        <expr_stmt><expr><call><name pos:line="96" pos:column="9">handle1xx<pos:position pos:line="96" pos:column="18"/></name><argument_list pos:line="96" pos:column="18">(<argument><expr><name pos:line="96" pos:column="19">newrep<pos:position pos:line="96" pos:column="25"/></name></expr></argument>)<pos:position pos:line="96" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="97" pos:column="9">ctx_exit<pos:position pos:line="97" pos:column="17"/></name><argument_list pos:line="97" pos:column="17">(<argument><expr><name pos:line="97" pos:column="18">ctx<pos:position pos:line="97" pos:column="21"/></name></expr></argument>)<pos:position pos:line="97" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="23"/></expr_stmt>
        <return pos:line="98" pos:column="9">return;<pos:position pos:line="98" pos:column="16"/></return>
    }<pos:position pos:line="99" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="101" pos:column="5">flags<pos:position pos:line="101" pos:column="10"/></name><operator pos:line="101" pos:column="10">.<pos:position pos:line="101" pos:column="11"/></operator><name pos:line="101" pos:column="11">chunked<pos:position pos:line="101" pos:column="18"/></name></name> <operator pos:line="101" pos:column="19">=<pos:position pos:line="101" pos:column="20"/></operator> <literal type="boolean" pos:line="101" pos:column="21">false<pos:position pos:line="101" pos:column="26"/></literal></expr>;<pos:position pos:line="101" pos:column="27"/></expr_stmt>
    <if pos:line="102" pos:column="5">if <condition pos:line="102" pos:column="8">(<expr><name><name pos:line="102" pos:column="9">newrep<pos:position pos:line="102" pos:column="15"/></name><operator pos:line="102" pos:column="15">-&gt;<pos:position pos:line="102" pos:column="20"/></operator><name pos:line="102" pos:column="17">sline<pos:position pos:line="102" pos:column="22"/></name><operator pos:line="102" pos:column="22">.<pos:position pos:line="102" pos:column="23"/></operator><name pos:line="102" pos:column="23">protocol<pos:position pos:line="102" pos:column="31"/></name></name> <operator pos:line="102" pos:column="32">==<pos:position pos:line="102" pos:column="34"/></operator> <name><name pos:line="102" pos:column="35">AnyP<pos:position pos:line="102" pos:column="39"/></name><operator pos:line="102" pos:column="39">::<pos:position pos:line="102" pos:column="41"/></operator><name pos:line="102" pos:column="41">PROTO_HTTP<pos:position pos:line="102" pos:column="51"/></name></name> <operator pos:line="102" pos:column="52">&amp;&amp;<pos:position pos:line="102" pos:column="62"/></operator> <call><name><name pos:line="102" pos:column="55">newrep<pos:position pos:line="102" pos:column="61"/></name><operator pos:line="102" pos:column="61">-&gt;<pos:position pos:line="102" pos:column="66"/></operator><name pos:line="102" pos:column="63">header<pos:position pos:line="102" pos:column="69"/></name><operator pos:line="102" pos:column="69">.<pos:position pos:line="102" pos:column="70"/></operator><name pos:line="102" pos:column="70">chunked<pos:position pos:line="102" pos:column="77"/></name></name><argument_list pos:line="102" pos:column="77">()<pos:position pos:line="102" pos:column="79"/></argument_list></call></expr>)<pos:position pos:line="102" pos:column="80"/></condition><then pos:line="102" pos:column="80"> <block pos:line="102" pos:column="81">{
        <expr_stmt><expr><name><name pos:line="103" pos:column="9">flags<pos:position pos:line="103" pos:column="14"/></name><operator pos:line="103" pos:column="14">.<pos:position pos:line="103" pos:column="15"/></operator><name pos:line="103" pos:column="15">chunked<pos:position pos:line="103" pos:column="22"/></name></name> <operator pos:line="103" pos:column="23">=<pos:position pos:line="103" pos:column="24"/></operator> <literal type="boolean" pos:line="103" pos:column="25">true<pos:position pos:line="103" pos:column="29"/></literal></expr>;<pos:position pos:line="103" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><name pos:line="104" pos:column="9">httpChunkDecoder<pos:position pos:line="104" pos:column="25"/></name> <operator pos:line="104" pos:column="26">=<pos:position pos:line="104" pos:column="27"/></operator> <operator pos:line="104" pos:column="28">new<pos:position pos:line="104" pos:column="31"/></operator> <name><name pos:line="104" pos:column="32">Http1<pos:position pos:line="104" pos:column="37"/></name><operator pos:line="104" pos:column="37">::<pos:position pos:line="104" pos:column="39"/></operator><name pos:line="104" pos:column="39">TeChunkedParser<pos:position pos:line="104" pos:column="54"/></name></name></expr>;<pos:position pos:line="104" pos:column="55"/></expr_stmt>
    }<pos:position pos:line="105" pos:column="6"/></block></then></if>

    <if pos:line="107" pos:column="5">if <condition pos:line="107" pos:column="8">(<expr><operator pos:line="107" pos:column="9">!<pos:position pos:line="107" pos:column="10"/></operator><call><name pos:line="107" pos:column="10">peerSupportsConnectionPinning<pos:position pos:line="107" pos:column="39"/></name><argument_list pos:line="107" pos:column="39">()<pos:position pos:line="107" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="107" pos:column="42"/></condition><then pos:line="107" pos:column="42">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="108" pos:column="9">request<pos:position pos:line="108" pos:column="16"/></name><operator pos:line="108" pos:column="16">-&gt;<pos:position pos:line="108" pos:column="21"/></operator><name pos:line="108" pos:column="18">flags<pos:position pos:line="108" pos:column="23"/></name><operator pos:line="108" pos:column="23">.<pos:position pos:line="108" pos:column="24"/></operator><name pos:line="108" pos:column="24">connectionAuthDisabled<pos:position pos:line="108" pos:column="46"/></name></name> <operator pos:line="108" pos:column="47">=<pos:position pos:line="108" pos:column="48"/></operator> <literal type="boolean" pos:line="108" pos:column="49">true<pos:position pos:line="108" pos:column="53"/></literal></expr>;<pos:position pos:line="108" pos:column="54"/></expr_stmt></block></then></if>

    <decl_stmt><decl><type><name pos:line="110" pos:column="5">HttpReply<pos:position pos:line="110" pos:column="14"/></name> <modifier pos:line="110" pos:column="15">*<pos:position pos:line="110" pos:column="16"/></modifier></type><name pos:line="110" pos:column="16">vrep<pos:position pos:line="110" pos:column="20"/></name> <init pos:line="110" pos:column="21">= <expr><call><name pos:line="110" pos:column="23">setVirginReply<pos:position pos:line="110" pos:column="37"/></name><argument_list pos:line="110" pos:column="37">(<argument><expr><name pos:line="110" pos:column="38">newrep<pos:position pos:line="110" pos:column="44"/></name></expr></argument>)<pos:position pos:line="110" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="110" pos:column="46"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="111" pos:column="5">flags<pos:position pos:line="111" pos:column="10"/></name><operator pos:line="111" pos:column="10">.<pos:position pos:line="111" pos:column="11"/></operator><name pos:line="111" pos:column="11">headers_parsed<pos:position pos:line="111" pos:column="25"/></name></name> <operator pos:line="111" pos:column="26">=<pos:position pos:line="111" pos:column="27"/></operator> <literal type="boolean" pos:line="111" pos:column="28">true<pos:position pos:line="111" pos:column="32"/></literal></expr>;<pos:position pos:line="111" pos:column="33"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="113" pos:column="5">keepaliveAccounting<pos:position pos:line="113" pos:column="24"/></name><argument_list pos:line="113" pos:column="24">(<argument><expr><name pos:line="113" pos:column="25">vrep<pos:position pos:line="113" pos:column="29"/></name></expr></argument>)<pos:position pos:line="113" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="31"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="115" pos:column="5">checkDateSkew<pos:position pos:line="115" pos:column="18"/></name><argument_list pos:line="115" pos:column="18">(<argument><expr><name pos:line="115" pos:column="19">vrep<pos:position pos:line="115" pos:column="23"/></name></expr></argument>)<pos:position pos:line="115" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="25"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="117" pos:column="5">processSurrogateControl<pos:position pos:line="117" pos:column="28"/></name> <argument_list pos:line="117" pos:column="29">(<argument><expr><name pos:line="117" pos:column="30">vrep<pos:position pos:line="117" pos:column="34"/></name></expr></argument>)<pos:position pos:line="117" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="36"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="119" pos:column="5">request<pos:position pos:line="119" pos:column="12"/></name><operator pos:line="119" pos:column="12">-&gt;<pos:position pos:line="119" pos:column="17"/></operator><name pos:line="119" pos:column="14">hier<pos:position pos:line="119" pos:column="18"/></name><operator pos:line="119" pos:column="18">.<pos:position pos:line="119" pos:column="19"/></operator><name pos:line="119" pos:column="19">peer_reply_status<pos:position pos:line="119" pos:column="36"/></name></name> <operator pos:line="119" pos:column="37">=<pos:position pos:line="119" pos:column="38"/></operator> <call><name><name pos:line="119" pos:column="39">newrep<pos:position pos:line="119" pos:column="45"/></name><operator pos:line="119" pos:column="45">-&gt;<pos:position pos:line="119" pos:column="50"/></operator><name pos:line="119" pos:column="47">sline<pos:position pos:line="119" pos:column="52"/></name><operator pos:line="119" pos:column="52">.<pos:position pos:line="119" pos:column="53"/></operator><name pos:line="119" pos:column="53">status<pos:position pos:line="119" pos:column="59"/></name></name><argument_list pos:line="119" pos:column="59">()<pos:position pos:line="119" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="62"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="121" pos:column="5">ctx_exit<pos:position pos:line="121" pos:column="13"/></name><argument_list pos:line="121" pos:column="13">(<argument><expr><name pos:line="121" pos:column="14">ctx<pos:position pos:line="121" pos:column="17"/></name></expr></argument>)<pos:position pos:line="121" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="19"/></expr_stmt>
}<pos:position pos:line="122" pos:column="2"/></block></function></unit>
