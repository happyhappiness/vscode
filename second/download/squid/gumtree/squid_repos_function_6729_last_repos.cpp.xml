<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6729_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">esiProcessResult_t<pos:position pos:line="1" pos:column="19"/></name></type>
<name><name pos:line="2" pos:column="1">esiLiteral<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">process<pos:position pos:line="2" pos:column="20"/></name></name> <parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><name pos:line="2" pos:column="22">int<pos:position pos:line="2" pos:column="25"/></name></type> <name pos:line="2" pos:column="26">dovars<pos:position pos:line="2" pos:column="32"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="33"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name><name pos:line="4" pos:column="9">flags<pos:position pos:line="4" pos:column="14"/></name><operator pos:line="4" pos:column="14">.<pos:position pos:line="4" pos:column="15"/></operator><name pos:line="4" pos:column="15">donevars<pos:position pos:line="4" pos:column="23"/></name></name></expr>)<pos:position pos:line="4" pos:column="24"/></condition><then pos:line="4" pos:column="24">
        <block type="pseudo"><return pos:line="5" pos:column="9">return <expr><name pos:line="5" pos:column="16">ESI_PROCESS_COMPLETE<pos:position pos:line="5" pos:column="36"/></name></expr>;<pos:position pos:line="5" pos:column="37"/></return></block></then></if>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name pos:line="7" pos:column="9">dovars<pos:position pos:line="7" pos:column="15"/></name></expr>)<pos:position pos:line="7" pos:column="16"/></condition><then pos:line="7" pos:column="16"> <block pos:line="7" pos:column="17">{
        <decl_stmt><decl><type><name><name pos:line="8" pos:column="9">ESISegment<pos:position pos:line="8" pos:column="19"/></name><operator pos:line="8" pos:column="19">::<pos:position pos:line="8" pos:column="21"/></operator><name pos:line="8" pos:column="21">Pointer<pos:position pos:line="8" pos:column="28"/></name></name></type> <name pos:line="8" pos:column="29">temp<pos:position pos:line="8" pos:column="33"/></name> <init pos:line="8" pos:column="34">= <expr><name pos:line="8" pos:column="36">buffer<pos:position pos:line="8" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="43"/></decl_stmt>
        <comment type="block" pos:line="9" pos:column="9">/* Ensure variable state is clean */</comment>

        <while pos:line="11" pos:column="9">while <condition pos:line="11" pos:column="15">(<expr><call><name><name pos:line="11" pos:column="16">temp<pos:position pos:line="11" pos:column="20"/></name><operator pos:line="11" pos:column="20">.<pos:position pos:line="11" pos:column="21"/></operator><name pos:line="11" pos:column="21">getRaw<pos:position pos:line="11" pos:column="27"/></name></name><argument_list pos:line="11" pos:column="27">()<pos:position pos:line="11" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="30"/></condition> <block pos:line="11" pos:column="31">{
            <expr_stmt><expr><call><name><name pos:line="12" pos:column="13">varState<pos:position pos:line="12" pos:column="21"/></name><operator pos:line="12" pos:column="21">-&gt;<pos:position pos:line="12" pos:column="26"/></operator><name pos:line="12" pos:column="23">feedData<pos:position pos:line="12" pos:column="31"/></name></name><argument_list pos:line="12" pos:column="31">(<argument><expr><name><name pos:line="12" pos:column="32">temp<pos:position pos:line="12" pos:column="36"/></name><operator pos:line="12" pos:column="36">-&gt;<pos:position pos:line="12" pos:column="41"/></operator><name pos:line="12" pos:column="38">buf<pos:position pos:line="12" pos:column="41"/></name></name></expr></argument>,<argument><expr><name><name pos:line="12" pos:column="42">temp<pos:position pos:line="12" pos:column="46"/></name><operator pos:line="12" pos:column="46">-&gt;<pos:position pos:line="12" pos:column="51"/></operator><name pos:line="12" pos:column="48">len<pos:position pos:line="12" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="53"/></expr_stmt>
            <expr_stmt><expr><name pos:line="13" pos:column="13">temp<pos:position pos:line="13" pos:column="17"/></name> <operator pos:line="13" pos:column="18">=<pos:position pos:line="13" pos:column="19"/></operator> <name><name pos:line="13" pos:column="20">temp<pos:position pos:line="13" pos:column="24"/></name><operator pos:line="13" pos:column="24">-&gt;<pos:position pos:line="13" pos:column="29"/></operator><name pos:line="13" pos:column="26">next<pos:position pos:line="13" pos:column="30"/></name></name></expr>;<pos:position pos:line="13" pos:column="31"/></expr_stmt>
        }<pos:position pos:line="14" pos:column="10"/></block></while>

        <comment type="block" pos:line="16" pos:column="9">/* free the pre-processed content */</comment>
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">ESISegmentFreeList<pos:position pos:line="17" pos:column="27"/></name> <argument_list pos:line="17" pos:column="28">(<argument><expr><name pos:line="17" pos:column="29">buffer<pos:position pos:line="17" pos:column="35"/></name></expr></argument>)<pos:position pos:line="17" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="37"/></expr_stmt>

        <expr_stmt><expr><name pos:line="19" pos:column="9">buffer<pos:position pos:line="19" pos:column="15"/></name> <operator pos:line="19" pos:column="16">=<pos:position pos:line="19" pos:column="17"/></operator> <call><name><name pos:line="19" pos:column="18">varState<pos:position pos:line="19" pos:column="26"/></name><operator pos:line="19" pos:column="26">-&gt;<pos:position pos:line="19" pos:column="31"/></operator><name pos:line="19" pos:column="28">extractList<pos:position pos:line="19" pos:column="39"/></name></name> <argument_list pos:line="19" pos:column="40">()<pos:position pos:line="19" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="43"/></expr_stmt>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="22" pos:column="5">flags<pos:position pos:line="22" pos:column="10"/></name><operator pos:line="22" pos:column="10">.<pos:position pos:line="22" pos:column="11"/></operator><name pos:line="22" pos:column="11">donevars<pos:position pos:line="22" pos:column="19"/></name></name> <operator pos:line="22" pos:column="20">=<pos:position pos:line="22" pos:column="21"/></operator> <literal type="number" pos:line="22" pos:column="22">1<pos:position pos:line="22" pos:column="23"/></literal></expr>;<pos:position pos:line="22" pos:column="24"/></expr_stmt>
    <return pos:line="23" pos:column="5">return <expr><name pos:line="23" pos:column="12">ESI_PROCESS_COMPLETE<pos:position pos:line="23" pos:column="32"/></name></expr>;<pos:position pos:line="23" pos:column="33"/></return>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
