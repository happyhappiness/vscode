<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2563_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">FtpStateData<pos:position pos:line="1" pos:column="18"/></name><operator pos:line="1" pos:column="18">::<pos:position pos:line="1" pos:column="20"/></operator><name pos:line="1" pos:column="20">ftpAcceptDataConnection<pos:position pos:line="1" pos:column="43"/></name></name><parameter_list pos:line="1" pos:column="43">(<parameter><decl><type><specifier pos:line="1" pos:column="44">const<pos:position pos:line="1" pos:column="49"/></specifier> <name pos:line="1" pos:column="50">CommAcceptCbParams<pos:position pos:line="1" pos:column="68"/></name> <modifier pos:line="1" pos:column="69">&amp;<pos:position pos:line="1" pos:column="74"/></modifier></type><name pos:line="1" pos:column="70">io<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="73"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">char<pos:position pos:line="3" pos:column="9"/></name></type> <name><name pos:line="3" pos:column="10">ntoapeer<pos:position pos:line="3" pos:column="18"/></name><index pos:line="3" pos:column="18">[<expr><name pos:line="3" pos:column="19">MAX_IPSTRLEN<pos:position pos:line="3" pos:column="31"/></name></expr>]<pos:position pos:line="3" pos:column="32"/></index></name></decl>;<pos:position pos:line="3" pos:column="33"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">9<pos:position pos:line="4" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="15">3<pos:position pos:line="4" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="18">"ftpAcceptDataConnection"<pos:position pos:line="4" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="45"/></expr_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name><name pos:line="6" pos:column="9">io<pos:position pos:line="6" pos:column="11"/></name><operator pos:line="6" pos:column="11">.<pos:position pos:line="6" pos:column="12"/></operator><name pos:line="6" pos:column="12">flag<pos:position pos:line="6" pos:column="16"/></name></name> <operator pos:line="6" pos:column="17">==<pos:position pos:line="6" pos:column="19"/></operator> <name pos:line="6" pos:column="20">COMM_ERR_CLOSING<pos:position pos:line="6" pos:column="36"/></name></expr>)<pos:position pos:line="6" pos:column="37"/></condition><then pos:line="6" pos:column="37">
        <block type="pseudo"><return pos:line="7" pos:column="9">return;<pos:position pos:line="7" pos:column="16"/></return></block></then></if>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><call><name pos:line="9" pos:column="9">EBIT_TEST<pos:position pos:line="9" pos:column="18"/></name><argument_list pos:line="9" pos:column="18">(<argument><expr><name><name pos:line="9" pos:column="19">entry<pos:position pos:line="9" pos:column="24"/></name><operator pos:line="9" pos:column="24">-&gt;<pos:position pos:line="9" pos:column="29"/></operator><name pos:line="9" pos:column="26">flags<pos:position pos:line="9" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="33">ENTRY_ABORTED<pos:position pos:line="9" pos:column="46"/></name></expr></argument>)<pos:position pos:line="9" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="48"/></condition><then pos:line="9" pos:column="48"> <block pos:line="9" pos:column="49">{
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">abortTransaction<pos:position pos:line="10" pos:column="25"/></name><argument_list pos:line="10" pos:column="25">(<argument><expr><literal type="string" pos:line="10" pos:column="26">"entry aborted when accepting data conn"<pos:position pos:line="10" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="68"/></expr_stmt>
        <return pos:line="11" pos:column="9">return;<pos:position pos:line="11" pos:column="16"/></return>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name><name pos:line="14" pos:column="9">io<pos:position pos:line="14" pos:column="11"/></name><operator pos:line="14" pos:column="11">.<pos:position pos:line="14" pos:column="12"/></operator><name pos:line="14" pos:column="12">flag<pos:position pos:line="14" pos:column="16"/></name></name> <operator pos:line="14" pos:column="17">!=<pos:position pos:line="14" pos:column="19"/></operator> <name pos:line="14" pos:column="20">COMM_OK<pos:position pos:line="14" pos:column="27"/></name></expr>)<pos:position pos:line="14" pos:column="28"/></condition><then pos:line="14" pos:column="28"> <block pos:line="14" pos:column="29">{
        <expr_stmt><expr><call><name><name pos:line="15" pos:column="9">data<pos:position pos:line="15" pos:column="13"/></name><operator pos:line="15" pos:column="13">.<pos:position pos:line="15" pos:column="14"/></operator><name pos:line="15" pos:column="14">close<pos:position pos:line="15" pos:column="19"/></name></name><argument_list pos:line="15" pos:column="19">()<pos:position pos:line="15" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="22"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">debugs<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><literal type="number" pos:line="16" pos:column="16">9<pos:position pos:line="16" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="19">DBG_IMPORTANT<pos:position pos:line="16" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="34">"FTP AcceptDataConnection: FD "<pos:position pos:line="16" pos:column="65"/></literal> <operator pos:line="16" pos:column="66">&lt;&lt;<pos:position pos:line="16" pos:column="74"/></operator> <name><name pos:line="16" pos:column="69">io<pos:position pos:line="16" pos:column="71"/></name><operator pos:line="16" pos:column="71">.<pos:position pos:line="16" pos:column="72"/></operator><name pos:line="16" pos:column="72">fd<pos:position pos:line="16" pos:column="74"/></name></name> <operator pos:line="16" pos:column="75">&lt;&lt;<pos:position pos:line="16" pos:column="83"/></operator> <literal type="string" pos:line="16" pos:column="78">": "<pos:position pos:line="16" pos:column="82"/></literal> <operator pos:line="16" pos:column="83">&lt;&lt;<pos:position pos:line="16" pos:column="91"/></operator> <call><name pos:line="16" pos:column="86">xstrerr<pos:position pos:line="16" pos:column="93"/></name><argument_list pos:line="16" pos:column="93">(<argument><expr><name><name pos:line="16" pos:column="94">io<pos:position pos:line="16" pos:column="96"/></name><operator pos:line="16" pos:column="96">.<pos:position pos:line="16" pos:column="97"/></operator><name pos:line="16" pos:column="97">xerrno<pos:position pos:line="16" pos:column="103"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="104"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="105"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="106"/></expr_stmt>
        <comment type="block" format="doxygen" pos:line="17" pos:column="9">/** \todo Need to send error message on control channel*/</comment>
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">ftpFail<pos:position pos:line="18" pos:column="16"/></name><argument_list pos:line="18" pos:column="16">(<argument><expr><name pos:line="18" pos:column="17">this<pos:position pos:line="18" pos:column="21"/></name></expr></argument>)<pos:position pos:line="18" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="23"/></expr_stmt>
        <return pos:line="19" pos:column="9">return;<pos:position pos:line="19" pos:column="16"/></return>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>

    <comment type="block" format="doxygen" pos:line="22" pos:column="5">/** \par
     * When squid.conf ftp_sanitycheck is enabled, check the new connection is actually being
     * made by the remote client which is connected to the FTP control socket.
     * This prevents third-party hacks, but also third-party load balancing handshakes.
     */</comment>
    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name><name pos:line="27" pos:column="9">Config<pos:position pos:line="27" pos:column="15"/></name><operator pos:line="27" pos:column="15">.<pos:position pos:line="27" pos:column="16"/></operator><name pos:line="27" pos:column="16">Ftp<pos:position pos:line="27" pos:column="19"/></name><operator pos:line="27" pos:column="19">.<pos:position pos:line="27" pos:column="20"/></operator><name pos:line="27" pos:column="20">sanitycheck<pos:position pos:line="27" pos:column="31"/></name></name></expr>)<pos:position pos:line="27" pos:column="32"/></condition><then pos:line="27" pos:column="32"> <block pos:line="27" pos:column="33">{
        <expr_stmt><expr><call><name><name pos:line="28" pos:column="9">io<pos:position pos:line="28" pos:column="11"/></name><operator pos:line="28" pos:column="11">.<pos:position pos:line="28" pos:column="12"/></operator><name pos:line="28" pos:column="12">details<pos:position pos:line="28" pos:column="19"/></name><operator pos:line="28" pos:column="19">.<pos:position pos:line="28" pos:column="20"/></operator><name pos:line="28" pos:column="20">peer<pos:position pos:line="28" pos:column="24"/></name><operator pos:line="28" pos:column="24">.<pos:position pos:line="28" pos:column="25"/></operator><name pos:line="28" pos:column="25">NtoA<pos:position pos:line="28" pos:column="29"/></name></name><argument_list pos:line="28" pos:column="29">(<argument><expr><name pos:line="28" pos:column="30">ntoapeer<pos:position pos:line="28" pos:column="38"/></name></expr></argument>,<argument><expr><name pos:line="28" pos:column="39">MAX_IPSTRLEN<pos:position pos:line="28" pos:column="51"/></name></expr></argument>)<pos:position pos:line="28" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="53"/></expr_stmt>

        <if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><call><name pos:line="30" pos:column="13">strcmp<pos:position pos:line="30" pos:column="19"/></name><argument_list pos:line="30" pos:column="19">(<argument><expr><name><name pos:line="30" pos:column="20">fd_table<pos:position pos:line="30" pos:column="28"/></name><index pos:line="30" pos:column="28">[<expr><name><name pos:line="30" pos:column="29">ctrl<pos:position pos:line="30" pos:column="33"/></name><operator pos:line="30" pos:column="33">.<pos:position pos:line="30" pos:column="34"/></operator><name pos:line="30" pos:column="34">fd<pos:position pos:line="30" pos:column="36"/></name></name></expr>]<pos:position pos:line="30" pos:column="37"/></index></name><operator pos:line="30" pos:column="37">.<pos:position pos:line="30" pos:column="38"/></operator><name pos:line="30" pos:column="38">ipaddr<pos:position pos:line="30" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="46">ntoapeer<pos:position pos:line="30" pos:column="54"/></name></expr></argument>)<pos:position pos:line="30" pos:column="55"/></argument_list></call> <operator pos:line="30" pos:column="56">!=<pos:position pos:line="30" pos:column="58"/></operator> <literal type="number" pos:line="30" pos:column="59">0<pos:position pos:line="30" pos:column="60"/></literal></expr>)<pos:position pos:line="30" pos:column="61"/></condition><then pos:line="30" pos:column="61"> <block pos:line="30" pos:column="62">{
            <expr_stmt><expr><call><name pos:line="31" pos:column="13">debugs<pos:position pos:line="31" pos:column="19"/></name><argument_list pos:line="31" pos:column="19">(<argument><expr><literal type="number" pos:line="31" pos:column="20">9<pos:position pos:line="31" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="23">DBG_IMPORTANT<pos:position pos:line="31" pos:column="36"/></name></expr></argument>,
                   <argument><expr><literal type="string" pos:line="32" pos:column="20">"FTP data connection from unexpected server ("<pos:position pos:line="32" pos:column="66"/></literal> <operator pos:line="32" pos:column="67">&lt;&lt;<pos:position pos:line="32" pos:column="75"/></operator>
                   <name><name pos:line="33" pos:column="20">io<pos:position pos:line="33" pos:column="22"/></name><operator pos:line="33" pos:column="22">.<pos:position pos:line="33" pos:column="23"/></operator><name pos:line="33" pos:column="23">details<pos:position pos:line="33" pos:column="30"/></name><operator pos:line="33" pos:column="30">.<pos:position pos:line="33" pos:column="31"/></operator><name pos:line="33" pos:column="31">peer<pos:position pos:line="33" pos:column="35"/></name></name> <operator pos:line="33" pos:column="36">&lt;&lt;<pos:position pos:line="33" pos:column="44"/></operator> <literal type="string" pos:line="33" pos:column="39">"), expecting "<pos:position pos:line="33" pos:column="54"/></literal> <operator pos:line="33" pos:column="55">&lt;&lt;<pos:position pos:line="33" pos:column="63"/></operator>
                   <name><name pos:line="34" pos:column="20">fd_table<pos:position pos:line="34" pos:column="28"/></name><index pos:line="34" pos:column="28">[<expr><name><name pos:line="34" pos:column="29">ctrl<pos:position pos:line="34" pos:column="33"/></name><operator pos:line="34" pos:column="33">.<pos:position pos:line="34" pos:column="34"/></operator><name pos:line="34" pos:column="34">fd<pos:position pos:line="34" pos:column="36"/></name></name></expr>]<pos:position pos:line="34" pos:column="37"/></index></name><operator pos:line="34" pos:column="37">.<pos:position pos:line="34" pos:column="38"/></operator><name pos:line="34" pos:column="38">ipaddr<pos:position pos:line="34" pos:column="44"/></name></expr></argument>)<pos:position pos:line="34" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="46"/></expr_stmt>

            <expr_stmt><expr><call><name pos:line="36" pos:column="13">comm_close<pos:position pos:line="36" pos:column="23"/></name><argument_list pos:line="36" pos:column="23">(<argument><expr><name><name pos:line="36" pos:column="24">io<pos:position pos:line="36" pos:column="26"/></name><operator pos:line="36" pos:column="26">.<pos:position pos:line="36" pos:column="27"/></operator><name pos:line="36" pos:column="27">nfd<pos:position pos:line="36" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="32"/></expr_stmt>
            <typedef pos:line="37" pos:column="13">typedef <type><name><name pos:line="37" pos:column="21">CommCbMemFunT<pos:position pos:line="37" pos:column="34"/></name><argument_list type="generic" pos:line="37" pos:column="34">&lt;<argument><expr><name pos:line="37" pos:column="35">FtpStateData<pos:position pos:line="37" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="49">CommAcceptCbParams<pos:position pos:line="37" pos:column="67"/></name></expr></argument>&gt;<pos:position pos:line="37" pos:column="71"/></argument_list></name></type> <name pos:line="37" pos:column="69">acceptDialer<pos:position pos:line="37" pos:column="81"/></name>;<pos:position pos:line="37" pos:column="82"/></typedef>
            <decl_stmt><decl><type><name><name pos:line="38" pos:column="13">AsyncCall<pos:position pos:line="38" pos:column="22"/></name><operator pos:line="38" pos:column="22">::<pos:position pos:line="38" pos:column="24"/></operator><name pos:line="38" pos:column="24">Pointer<pos:position pos:line="38" pos:column="31"/></name></name></type> <name pos:line="38" pos:column="32">acceptCall<pos:position pos:line="38" pos:column="42"/></name> <init pos:line="38" pos:column="43">= <expr><call><name pos:line="38" pos:column="45">JobCallback<pos:position pos:line="38" pos:column="56"/></name><argument_list pos:line="38" pos:column="56">(<argument><expr><literal type="number" pos:line="38" pos:column="57">11<pos:position pos:line="38" pos:column="59"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="61">5<pos:position pos:line="38" pos:column="62"/></literal></expr></argument>,
                                            <argument><expr><name pos:line="39" pos:column="45">acceptDialer<pos:position pos:line="39" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="59">this<pos:position pos:line="39" pos:column="63"/></name></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="65">FtpStateData<pos:position pos:line="39" pos:column="77"/></name><operator pos:line="39" pos:column="77">::<pos:position pos:line="39" pos:column="79"/></operator><name pos:line="39" pos:column="79">ftpAcceptDataConnection<pos:position pos:line="39" pos:column="102"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="103"/></argument_list></call></expr></init></decl>;<pos:position pos:line="39" pos:column="104"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="40" pos:column="13">comm_accept<pos:position pos:line="40" pos:column="24"/></name><argument_list pos:line="40" pos:column="24">(<argument><expr><name><name pos:line="40" pos:column="25">data<pos:position pos:line="40" pos:column="29"/></name><operator pos:line="40" pos:column="29">.<pos:position pos:line="40" pos:column="30"/></operator><name pos:line="40" pos:column="30">fd<pos:position pos:line="40" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="34">acceptCall<pos:position pos:line="40" pos:column="44"/></name></expr></argument>)<pos:position pos:line="40" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="46"/></expr_stmt>
            <return pos:line="41" pos:column="13">return;<pos:position pos:line="41" pos:column="20"/></return>
        }<pos:position pos:line="42" pos:column="10"/></block></then></if>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if>

    <comment type="block" format="doxygen" pos:line="45" pos:column="5">/**\par
     * Replace the Listen socket with the accepted data socket */</comment>
    <expr_stmt><expr><call><name><name pos:line="47" pos:column="5">data<pos:position pos:line="47" pos:column="9"/></name><operator pos:line="47" pos:column="9">.<pos:position pos:line="47" pos:column="10"/></operator><name pos:line="47" pos:column="10">close<pos:position pos:line="47" pos:column="15"/></name></name><argument_list pos:line="47" pos:column="15">()<pos:position pos:line="47" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="48" pos:column="5">data<pos:position pos:line="48" pos:column="9"/></name><operator pos:line="48" pos:column="9">.<pos:position pos:line="48" pos:column="10"/></operator><name pos:line="48" pos:column="10">opened<pos:position pos:line="48" pos:column="16"/></name></name><argument_list pos:line="48" pos:column="16">(<argument><expr><name><name pos:line="48" pos:column="17">io<pos:position pos:line="48" pos:column="19"/></name><operator pos:line="48" pos:column="19">.<pos:position pos:line="48" pos:column="20"/></operator><name pos:line="48" pos:column="20">nfd<pos:position pos:line="48" pos:column="23"/></name></name></expr></argument>, <argument><expr><call><name pos:line="48" pos:column="25">dataCloser<pos:position pos:line="48" pos:column="35"/></name><argument_list pos:line="48" pos:column="35">()<pos:position pos:line="48" pos:column="37"/></argument_list></call></expr></argument>)<pos:position pos:line="48" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="49" pos:column="5">data<pos:position pos:line="49" pos:column="9"/></name><operator pos:line="49" pos:column="9">.<pos:position pos:line="49" pos:column="10"/></operator><name pos:line="49" pos:column="10">port<pos:position pos:line="49" pos:column="14"/></name></name> <operator pos:line="49" pos:column="15">=<pos:position pos:line="49" pos:column="16"/></operator> <call><name><name pos:line="49" pos:column="17">io<pos:position pos:line="49" pos:column="19"/></name><operator pos:line="49" pos:column="19">.<pos:position pos:line="49" pos:column="20"/></operator><name pos:line="49" pos:column="20">details<pos:position pos:line="49" pos:column="27"/></name><operator pos:line="49" pos:column="27">.<pos:position pos:line="49" pos:column="28"/></operator><name pos:line="49" pos:column="28">peer<pos:position pos:line="49" pos:column="32"/></name><operator pos:line="49" pos:column="32">.<pos:position pos:line="49" pos:column="33"/></operator><name pos:line="49" pos:column="33">GetPort<pos:position pos:line="49" pos:column="40"/></name></name><argument_list pos:line="49" pos:column="40">()<pos:position pos:line="49" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="43"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="51" pos:column="5">io<pos:position pos:line="51" pos:column="7"/></name><operator pos:line="51" pos:column="7">.<pos:position pos:line="51" pos:column="8"/></operator><name pos:line="51" pos:column="8">details<pos:position pos:line="51" pos:column="15"/></name><operator pos:line="51" pos:column="15">.<pos:position pos:line="51" pos:column="16"/></operator><name pos:line="51" pos:column="16">peer<pos:position pos:line="51" pos:column="20"/></name><operator pos:line="51" pos:column="20">.<pos:position pos:line="51" pos:column="21"/></operator><name pos:line="51" pos:column="21">NtoA<pos:position pos:line="51" pos:column="25"/></name></name><argument_list pos:line="51" pos:column="25">(<argument><expr><name pos:line="51" pos:column="26">ntoapeer<pos:position pos:line="51" pos:column="34"/></name></expr></argument>,<argument><expr><sizeof pos:line="51" pos:column="35">sizeof<argument_list pos:line="51" pos:column="41">(<argument><expr><name pos:line="51" pos:column="42">ntoapeer<pos:position pos:line="51" pos:column="50"/></name></expr></argument>)<pos:position pos:line="51" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="51" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="52" pos:column="5">data<pos:position pos:line="52" pos:column="9"/></name><operator pos:line="52" pos:column="9">.<pos:position pos:line="52" pos:column="10"/></operator><name pos:line="52" pos:column="10">host<pos:position pos:line="52" pos:column="14"/></name></name> <operator pos:line="52" pos:column="15">=<pos:position pos:line="52" pos:column="16"/></operator> <call><name pos:line="52" pos:column="17">xstrdup<pos:position pos:line="52" pos:column="24"/></name><argument_list pos:line="52" pos:column="24">(<argument><expr><name pos:line="52" pos:column="25">ntoapeer<pos:position pos:line="52" pos:column="33"/></name></expr></argument>)<pos:position pos:line="52" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="35"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="54" pos:column="5">debugs<pos:position pos:line="54" pos:column="11"/></name><argument_list pos:line="54" pos:column="11">(<argument><expr><literal type="number" pos:line="54" pos:column="12">9<pos:position pos:line="54" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="54" pos:column="15">3<pos:position pos:line="54" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="18">"ftpAcceptDataConnection: Connected data socket on "<pos:position pos:line="54" pos:column="70"/></literal> <operator pos:line="54" pos:column="71">&lt;&lt;<pos:position pos:line="54" pos:column="79"/></operator>
           <literal type="string" pos:line="55" pos:column="12">"FD "<pos:position pos:line="55" pos:column="17"/></literal> <operator pos:line="55" pos:column="18">&lt;&lt;<pos:position pos:line="55" pos:column="26"/></operator> <name><name pos:line="55" pos:column="21">io<pos:position pos:line="55" pos:column="23"/></name><operator pos:line="55" pos:column="23">.<pos:position pos:line="55" pos:column="24"/></operator><name pos:line="55" pos:column="24">nfd<pos:position pos:line="55" pos:column="27"/></name></name> <operator pos:line="55" pos:column="28">&lt;&lt;<pos:position pos:line="55" pos:column="36"/></operator> <literal type="string" pos:line="55" pos:column="31">" to "<pos:position pos:line="55" pos:column="37"/></literal> <operator pos:line="55" pos:column="38">&lt;&lt;<pos:position pos:line="55" pos:column="46"/></operator> <name><name pos:line="55" pos:column="41">io<pos:position pos:line="55" pos:column="43"/></name><operator pos:line="55" pos:column="43">.<pos:position pos:line="55" pos:column="44"/></operator><name pos:line="55" pos:column="44">details<pos:position pos:line="55" pos:column="51"/></name><operator pos:line="55" pos:column="51">.<pos:position pos:line="55" pos:column="52"/></operator><name pos:line="55" pos:column="52">peer<pos:position pos:line="55" pos:column="56"/></name></name> <operator pos:line="55" pos:column="57">&lt;&lt;<pos:position pos:line="55" pos:column="65"/></operator> <literal type="string" pos:line="55" pos:column="60">" FD table says: "<pos:position pos:line="55" pos:column="78"/></literal> <operator pos:line="55" pos:column="79">&lt;&lt;<pos:position pos:line="55" pos:column="87"/></operator>
           <literal type="string" pos:line="56" pos:column="12">"ctrl-peer= "<pos:position pos:line="56" pos:column="25"/></literal> <operator pos:line="56" pos:column="26">&lt;&lt;<pos:position pos:line="56" pos:column="34"/></operator> <name><name pos:line="56" pos:column="29">fd_table<pos:position pos:line="56" pos:column="37"/></name><index pos:line="56" pos:column="37">[<expr><name><name pos:line="56" pos:column="38">ctrl<pos:position pos:line="56" pos:column="42"/></name><operator pos:line="56" pos:column="42">.<pos:position pos:line="56" pos:column="43"/></operator><name pos:line="56" pos:column="43">fd<pos:position pos:line="56" pos:column="45"/></name></name></expr>]<pos:position pos:line="56" pos:column="46"/></index></name><operator pos:line="56" pos:column="46">.<pos:position pos:line="56" pos:column="47"/></operator><name pos:line="56" pos:column="47">ipaddr<pos:position pos:line="56" pos:column="53"/></name> <operator pos:line="56" pos:column="54">&lt;&lt;<pos:position pos:line="56" pos:column="62"/></operator> <literal type="string" pos:line="56" pos:column="57">", "<pos:position pos:line="56" pos:column="61"/></literal> <operator pos:line="56" pos:column="62">&lt;&lt;<pos:position pos:line="56" pos:column="70"/></operator>
           <literal type="string" pos:line="57" pos:column="12">"data-peer= "<pos:position pos:line="57" pos:column="25"/></literal> <operator pos:line="57" pos:column="26">&lt;&lt;<pos:position pos:line="57" pos:column="34"/></operator> <name><name pos:line="57" pos:column="29">fd_table<pos:position pos:line="57" pos:column="37"/></name><index pos:line="57" pos:column="37">[<expr><name><name pos:line="57" pos:column="38">data<pos:position pos:line="57" pos:column="42"/></name><operator pos:line="57" pos:column="42">.<pos:position pos:line="57" pos:column="43"/></operator><name pos:line="57" pos:column="43">fd<pos:position pos:line="57" pos:column="45"/></name></name></expr>]<pos:position pos:line="57" pos:column="46"/></index></name><operator pos:line="57" pos:column="46">.<pos:position pos:line="57" pos:column="47"/></operator><name pos:line="57" pos:column="47">ipaddr<pos:position pos:line="57" pos:column="53"/></name></expr></argument>)<pos:position pos:line="57" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="55"/></expr_stmt>


    <decl_stmt><decl><type><name><name pos:line="60" pos:column="5">AsyncCall<pos:position pos:line="60" pos:column="14"/></name><operator pos:line="60" pos:column="14">::<pos:position pos:line="60" pos:column="16"/></operator><name pos:line="60" pos:column="16">Pointer<pos:position pos:line="60" pos:column="23"/></name></name></type> <name pos:line="60" pos:column="24">nullCall<pos:position pos:line="60" pos:column="32"/></name> <init pos:line="60" pos:column="33">= <expr><name pos:line="60" pos:column="35">NULL<pos:position pos:line="60" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="60" pos:column="40"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="61" pos:column="5">commSetTimeout<pos:position pos:line="61" pos:column="19"/></name><argument_list pos:line="61" pos:column="19">(<argument><expr><name><name pos:line="61" pos:column="20">ctrl<pos:position pos:line="61" pos:column="24"/></name><operator pos:line="61" pos:column="24">.<pos:position pos:line="61" pos:column="25"/></operator><name pos:line="61" pos:column="25">fd<pos:position pos:line="61" pos:column="27"/></name></name></expr></argument>, <argument><expr><operator pos:line="61" pos:column="29">-<pos:position pos:line="61" pos:column="30"/></operator><literal type="number" pos:line="61" pos:column="30">1<pos:position pos:line="61" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="61" pos:column="33">nullCall<pos:position pos:line="61" pos:column="41"/></name></expr></argument>)<pos:position pos:line="61" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="43"/></expr_stmt>

    <typedef pos:line="63" pos:column="5">typedef <type><name><name pos:line="63" pos:column="13">CommCbMemFunT<pos:position pos:line="63" pos:column="26"/></name><argument_list type="generic" pos:line="63" pos:column="26">&lt;<argument><expr><name pos:line="63" pos:column="27">FtpStateData<pos:position pos:line="63" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="41">CommTimeoutCbParams<pos:position pos:line="63" pos:column="60"/></name></expr></argument>&gt;<pos:position pos:line="63" pos:column="64"/></argument_list></name></type> <name pos:line="63" pos:column="62">TimeoutDialer<pos:position pos:line="63" pos:column="75"/></name>;<pos:position pos:line="63" pos:column="76"/></typedef>
    <decl_stmt><decl><type><name><name pos:line="64" pos:column="5">AsyncCall<pos:position pos:line="64" pos:column="14"/></name><operator pos:line="64" pos:column="14">::<pos:position pos:line="64" pos:column="16"/></operator><name pos:line="64" pos:column="16">Pointer<pos:position pos:line="64" pos:column="23"/></name></name></type> <name pos:line="64" pos:column="24">timeoutCall<pos:position pos:line="64" pos:column="35"/></name> <init pos:line="64" pos:column="36">=  <expr><call><name pos:line="64" pos:column="39">JobCallback<pos:position pos:line="64" pos:column="50"/></name><argument_list pos:line="64" pos:column="50">(<argument><expr><literal type="number" pos:line="64" pos:column="51">9<pos:position pos:line="64" pos:column="52"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="64" pos:column="54">5<pos:position pos:line="64" pos:column="55"/></literal></expr></argument>,
                                      <argument><expr><name pos:line="65" pos:column="39">TimeoutDialer<pos:position pos:line="65" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="54">this<pos:position pos:line="65" pos:column="58"/></name></expr></argument>, <argument><expr><name><name pos:line="65" pos:column="60">FtpStateData<pos:position pos:line="65" pos:column="72"/></name><operator pos:line="65" pos:column="72">::<pos:position pos:line="65" pos:column="74"/></operator><name pos:line="65" pos:column="74">ftpTimeout<pos:position pos:line="65" pos:column="84"/></name></name></expr></argument>)<pos:position pos:line="65" pos:column="85"/></argument_list></call></expr></init></decl>;<pos:position pos:line="65" pos:column="86"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="66" pos:column="5">commSetTimeout<pos:position pos:line="66" pos:column="19"/></name><argument_list pos:line="66" pos:column="19">(<argument><expr><name><name pos:line="66" pos:column="20">data<pos:position pos:line="66" pos:column="24"/></name><operator pos:line="66" pos:column="24">.<pos:position pos:line="66" pos:column="25"/></operator><name pos:line="66" pos:column="25">fd<pos:position pos:line="66" pos:column="27"/></name></name></expr></argument>, <argument><expr><name><name pos:line="66" pos:column="29">Config<pos:position pos:line="66" pos:column="35"/></name><operator pos:line="66" pos:column="35">.<pos:position pos:line="66" pos:column="36"/></operator><name pos:line="66" pos:column="36">Timeout<pos:position pos:line="66" pos:column="43"/></name><operator pos:line="66" pos:column="43">.<pos:position pos:line="66" pos:column="44"/></operator><name pos:line="66" pos:column="44">read<pos:position pos:line="66" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="50">timeoutCall<pos:position pos:line="66" pos:column="61"/></name></expr></argument>)<pos:position pos:line="66" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="63"/></expr_stmt>

    <comment type="block" pos:line="68" pos:column="5">/*\todo XXX We should have a flag to track connect state...
     *    host NULL -&gt; not connected, port == local port
     *    host set  -&gt; connected, port == remote port
     */</comment>
    <comment type="block" pos:line="72" pos:column="5">/* Restart state (SENT_NLST/LIST/RETR) */</comment>
    <expr_stmt><expr><name><name pos:line="73" pos:column="5">FTP_SM_FUNCS<pos:position pos:line="73" pos:column="17"/></name><index pos:line="73" pos:column="17">[<expr><name pos:line="73" pos:column="18">state<pos:position pos:line="73" pos:column="23"/></name></expr>]<pos:position pos:line="73" pos:column="24"/></index></name> <operator pos:line="73" pos:column="25">(<pos:position pos:line="73" pos:column="26"/></operator><name pos:line="73" pos:column="26">this<pos:position pos:line="73" pos:column="30"/></name><operator pos:line="73" pos:column="30">)<pos:position pos:line="73" pos:column="31"/></operator></expr>;<pos:position pos:line="73" pos:column="32"/></expr_stmt>
}<pos:position pos:line="74" pos:column="2"/></block></function></unit>
