<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6261_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Kid<pos:position pos:line="1" pos:column="9"/></name><operator pos:line="1" pos:column="9">::<pos:position pos:line="1" pos:column="11"/></operator><name pos:line="1" pos:column="11">stop<pos:position pos:line="1" pos:column="15"/></name></name><parameter_list pos:line="1" pos:column="15">(<parameter><decl><type><name pos:line="1" pos:column="16">status_type<pos:position pos:line="1" pos:column="27"/></name></type> <name pos:line="1" pos:column="28">exitStatus<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="39"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="3" pos:column="5">assert<pos:position pos:line="3" pos:column="11"/></name><argument_list pos:line="3" pos:column="11">(<argument><expr><call><name pos:line="3" pos:column="12">running<pos:position pos:line="3" pos:column="19"/></name><argument_list pos:line="3" pos:column="19">()<pos:position pos:line="3" pos:column="21"/></argument_list></call></expr></argument>)<pos:position pos:line="3" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">startTime<pos:position pos:line="4" pos:column="21"/></name> <operator pos:line="4" pos:column="22">!=<pos:position pos:line="4" pos:column="24"/></operator> <literal type="number" pos:line="4" pos:column="25">0<pos:position pos:line="4" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="28"/></expr_stmt>

    <expr_stmt><expr><name pos:line="6" pos:column="5">isRunning<pos:position pos:line="6" pos:column="14"/></name> <operator pos:line="6" pos:column="15">=<pos:position pos:line="6" pos:column="16"/></operator> <literal type="boolean" pos:line="6" pos:column="17">false<pos:position pos:line="6" pos:column="22"/></literal></expr>;<pos:position pos:line="6" pos:column="23"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="8" pos:column="5">time_t<pos:position pos:line="8" pos:column="11"/></name></type> <name pos:line="8" pos:column="12">stop_time<pos:position pos:line="8" pos:column="21"/></name></decl>;<pos:position pos:line="8" pos:column="22"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">time<pos:position pos:line="9" pos:column="9"/></name><argument_list pos:line="9" pos:column="9">(<argument><expr><operator pos:line="9" pos:column="10">&amp;<pos:position pos:line="9" pos:column="15"/></operator><name pos:line="9" pos:column="11">stop_time<pos:position pos:line="9" pos:column="20"/></name></expr></argument>)<pos:position pos:line="9" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="22"/></expr_stmt>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><operator pos:line="10" pos:column="9">(<pos:position pos:line="10" pos:column="10"/></operator><name pos:line="10" pos:column="10">stop_time<pos:position pos:line="10" pos:column="19"/></name> <operator pos:line="10" pos:column="20">-<pos:position pos:line="10" pos:column="21"/></operator> <name pos:line="10" pos:column="22">startTime<pos:position pos:line="10" pos:column="31"/></name><operator pos:line="10" pos:column="31">)<pos:position pos:line="10" pos:column="32"/></operator> <operator pos:line="10" pos:column="33">&lt;<pos:position pos:line="10" pos:column="37"/></operator> <name pos:line="10" pos:column="35">fastFailureTimeLimit<pos:position pos:line="10" pos:column="55"/></name></expr>)<pos:position pos:line="10" pos:column="56"/></condition><then pos:line="10" pos:column="56">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="11" pos:column="9">++<pos:position pos:line="11" pos:column="11"/></operator><name pos:line="11" pos:column="11">badFailures<pos:position pos:line="11" pos:column="22"/></name></expr>;<pos:position pos:line="11" pos:column="23"/></expr_stmt></block></then>
    <else pos:line="12" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="9">badFailures<pos:position pos:line="13" pos:column="20"/></name> <operator pos:line="13" pos:column="21">=<pos:position pos:line="13" pos:column="22"/></operator> <literal type="number" pos:line="13" pos:column="23">0<pos:position pos:line="13" pos:column="24"/></literal></expr>;<pos:position pos:line="13" pos:column="25"/></expr_stmt></block></else></if> <comment type="line" pos:line="13" pos:column="26">// the failures are not "frequent" [any more]</comment>

    <expr_stmt><expr><name pos:line="15" pos:column="5">status<pos:position pos:line="15" pos:column="11"/></name> <operator pos:line="15" pos:column="12">=<pos:position pos:line="15" pos:column="13"/></operator> <name pos:line="15" pos:column="14">exitStatus<pos:position pos:line="15" pos:column="24"/></name></expr>;<pos:position pos:line="15" pos:column="25"/></expr_stmt>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
