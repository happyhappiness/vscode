<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5801_squid-3.3.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">netdbExchangeHandleReply<pos:position pos:line="2" pos:column="25"/></name><parameter_list pos:line="2" pos:column="25">(<parameter><decl><type><name pos:line="2" pos:column="26">void<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type><name pos:line="2" pos:column="32">data<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="38">StoreIOBuffer<pos:position pos:line="2" pos:column="51"/></name></type> <name pos:line="2" pos:column="52">receivedData<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="65"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">Ip<pos:position pos:line="4" pos:column="7"/></name><operator pos:line="4" pos:column="7">::<pos:position pos:line="4" pos:column="9"/></operator><name pos:line="4" pos:column="9">Address<pos:position pos:line="4" pos:column="16"/></name></name></type> <name pos:line="4" pos:column="17">addr<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="6" pos:column="5">netdbExchangeState<pos:position pos:line="6" pos:column="23"/></name> <modifier pos:line="6" pos:column="24">*<pos:position pos:line="6" pos:column="25"/></modifier></type><name pos:line="6" pos:column="25">ex<pos:position pos:line="6" pos:column="27"/></name> <init pos:line="6" pos:column="28">= <expr><operator pos:line="6" pos:column="30">(<pos:position pos:line="6" pos:column="31"/></operator><name pos:line="6" pos:column="31">netdbExchangeState<pos:position pos:line="6" pos:column="49"/></name> <operator pos:line="6" pos:column="50">*<pos:position pos:line="6" pos:column="51"/></operator><operator pos:line="6" pos:column="51">)<pos:position pos:line="6" pos:column="52"/></operator><name pos:line="6" pos:column="52">data<pos:position pos:line="6" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="57"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">rec_sz<pos:position pos:line="7" pos:column="15"/></name> <init pos:line="7" pos:column="16">= <expr><literal type="number" pos:line="7" pos:column="18">0<pos:position pos:line="7" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">o<pos:position pos:line="8" pos:column="10"/></name></decl>;<pos:position pos:line="8" pos:column="11"/></decl_stmt>

    <decl_stmt><decl><type><name><name pos:line="10" pos:column="5">struct<pos:position pos:line="10" pos:column="11"/></name> <name pos:line="10" pos:column="12">in_addr<pos:position pos:line="10" pos:column="19"/></name></name></type> <name pos:line="10" pos:column="20">line_addr<pos:position pos:line="10" pos:column="29"/></name></decl>;<pos:position pos:line="10" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">double<pos:position pos:line="11" pos:column="11"/></name></type> <name pos:line="11" pos:column="12">rtt<pos:position pos:line="11" pos:column="15"/></name></decl>;<pos:position pos:line="11" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">double<pos:position pos:line="12" pos:column="11"/></name></type> <name pos:line="12" pos:column="12">hops<pos:position pos:line="12" pos:column="16"/></name></decl>;<pos:position pos:line="12" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">char<pos:position pos:line="13" pos:column="9"/></name> <modifier pos:line="13" pos:column="10">*<pos:position pos:line="13" pos:column="11"/></modifier></type><name pos:line="13" pos:column="11">p<pos:position pos:line="13" pos:column="12"/></name></decl>;<pos:position pos:line="13" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">int<pos:position pos:line="14" pos:column="8"/></name></type> <name pos:line="14" pos:column="9">j<pos:position pos:line="14" pos:column="10"/></name></decl>;<pos:position pos:line="14" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">HttpReply<pos:position pos:line="15" pos:column="14"/></name> <specifier pos:line="15" pos:column="15">const<pos:position pos:line="15" pos:column="20"/></specifier> <modifier pos:line="15" pos:column="21">*<pos:position pos:line="15" pos:column="22"/></modifier></type><name pos:line="15" pos:column="22">rep<pos:position pos:line="15" pos:column="25"/></name></decl>;<pos:position pos:line="15" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="16" pos:column="5">size_t<pos:position pos:line="16" pos:column="11"/></name></type> <name pos:line="16" pos:column="12">hdr_sz<pos:position pos:line="16" pos:column="18"/></name></decl>;<pos:position pos:line="16" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="17" pos:column="5">int<pos:position pos:line="17" pos:column="8"/></name></type> <name pos:line="17" pos:column="9">nused<pos:position pos:line="17" pos:column="14"/></name> <init pos:line="17" pos:column="15">= <expr><literal type="number" pos:line="17" pos:column="17">0<pos:position pos:line="17" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="17" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="18" pos:column="5">int<pos:position pos:line="18" pos:column="8"/></name></type> <name pos:line="18" pos:column="9">size<pos:position pos:line="18" pos:column="13"/></name></decl>;<pos:position pos:line="18" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="19" pos:column="5">int<pos:position pos:line="19" pos:column="8"/></name></type> <name pos:line="19" pos:column="9">oldbufofs<pos:position pos:line="19" pos:column="18"/></name> <init pos:line="19" pos:column="19">= <expr><name><name pos:line="19" pos:column="21">ex<pos:position pos:line="19" pos:column="23"/></name><operator pos:line="19" pos:column="23">-&gt;<pos:position pos:line="19" pos:column="28"/></operator><name pos:line="19" pos:column="25">buf_ofs<pos:position pos:line="19" pos:column="32"/></name></name></expr></init></decl>;<pos:position pos:line="19" pos:column="33"/></decl_stmt>

    <expr_stmt><expr><name pos:line="21" pos:column="5">rec_sz<pos:position pos:line="21" pos:column="11"/></name> <operator pos:line="21" pos:column="12">=<pos:position pos:line="21" pos:column="13"/></operator> <literal type="number" pos:line="21" pos:column="14">0<pos:position pos:line="21" pos:column="15"/></literal></expr>;<pos:position pos:line="21" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><name pos:line="22" pos:column="5">rec_sz<pos:position pos:line="22" pos:column="11"/></name> <operator pos:line="22" pos:column="12">+=<pos:position pos:line="22" pos:column="14"/></operator> <literal type="number" pos:line="22" pos:column="15">1<pos:position pos:line="22" pos:column="16"/></literal> <operator pos:line="22" pos:column="17">+<pos:position pos:line="22" pos:column="18"/></operator> <sizeof pos:line="22" pos:column="19">sizeof<argument_list pos:line="22" pos:column="25">(<argument><expr pos:line="22" pos:column="26">struct <name pos:line="22" pos:column="33">in_addr<pos:position pos:line="22" pos:column="40"/></name></expr></argument>)<pos:position pos:line="22" pos:column="41"/></argument_list></sizeof></expr>;<pos:position pos:line="22" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name pos:line="23" pos:column="5">rec_sz<pos:position pos:line="23" pos:column="11"/></name> <operator pos:line="23" pos:column="12">+=<pos:position pos:line="23" pos:column="14"/></operator> <literal type="number" pos:line="23" pos:column="15">1<pos:position pos:line="23" pos:column="16"/></literal> <operator pos:line="23" pos:column="17">+<pos:position pos:line="23" pos:column="18"/></operator> <sizeof pos:line="23" pos:column="19">sizeof<argument_list pos:line="23" pos:column="25">(<argument><expr><name pos:line="23" pos:column="26">int<pos:position pos:line="23" pos:column="29"/></name></expr></argument>)<pos:position pos:line="23" pos:column="30"/></argument_list></sizeof></expr>;<pos:position pos:line="23" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name pos:line="24" pos:column="5">rec_sz<pos:position pos:line="24" pos:column="11"/></name> <operator pos:line="24" pos:column="12">+=<pos:position pos:line="24" pos:column="14"/></operator> <literal type="number" pos:line="24" pos:column="15">1<pos:position pos:line="24" pos:column="16"/></literal> <operator pos:line="24" pos:column="17">+<pos:position pos:line="24" pos:column="18"/></operator> <sizeof pos:line="24" pos:column="19">sizeof<argument_list pos:line="24" pos:column="25">(<argument><expr><name pos:line="24" pos:column="26">int<pos:position pos:line="24" pos:column="29"/></name></expr></argument>)<pos:position pos:line="24" pos:column="30"/></argument_list></sizeof></expr>;<pos:position pos:line="24" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">debugs<pos:position pos:line="25" pos:column="11"/></name><argument_list pos:line="25" pos:column="11">(<argument><expr><literal type="number" pos:line="25" pos:column="12">38<pos:position pos:line="25" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="16">3<pos:position pos:line="25" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="19">"netdbExchangeHandleReply: "<pos:position pos:line="25" pos:column="47"/></literal> <operator pos:line="25" pos:column="48">&lt;&lt;<pos:position pos:line="25" pos:column="56"/></operator> <name><name pos:line="25" pos:column="51">receivedData<pos:position pos:line="25" pos:column="63"/></name><operator pos:line="25" pos:column="63">.<pos:position pos:line="25" pos:column="64"/></operator><name pos:line="25" pos:column="64">length<pos:position pos:line="25" pos:column="70"/></name></name> <operator pos:line="25" pos:column="71">&lt;&lt;<pos:position pos:line="25" pos:column="79"/></operator> <literal type="string" pos:line="25" pos:column="74">" read bytes"<pos:position pos:line="25" pos:column="87"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="89"/></expr_stmt>

    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><operator pos:line="27" pos:column="9">!<pos:position pos:line="27" pos:column="10"/></operator><call><name pos:line="27" pos:column="10">cbdataReferenceValid<pos:position pos:line="27" pos:column="30"/></name><argument_list pos:line="27" pos:column="30">(<argument><expr><name><name pos:line="27" pos:column="31">ex<pos:position pos:line="27" pos:column="33"/></name><operator pos:line="27" pos:column="33">-&gt;<pos:position pos:line="27" pos:column="38"/></operator><name pos:line="27" pos:column="35">p<pos:position pos:line="27" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="38"/></condition><then pos:line="27" pos:column="38"> <block pos:line="27" pos:column="39">{
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">debugs<pos:position pos:line="28" pos:column="15"/></name><argument_list pos:line="28" pos:column="15">(<argument><expr><literal type="number" pos:line="28" pos:column="16">38<pos:position pos:line="28" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="20">3<pos:position pos:line="28" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="23">"netdbExchangeHandleReply: Peer became invalid"<pos:position pos:line="28" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="72"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">netdbExchangeDone<pos:position pos:line="29" pos:column="26"/></name><argument_list pos:line="29" pos:column="26">(<argument><expr><name pos:line="29" pos:column="27">ex<pos:position pos:line="29" pos:column="29"/></name></expr></argument>)<pos:position pos:line="29" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="31"/></expr_stmt>
        <return pos:line="30" pos:column="9">return;<pos:position pos:line="30" pos:column="16"/></return>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="33" pos:column="5">debugs<pos:position pos:line="33" pos:column="11"/></name><argument_list pos:line="33" pos:column="11">(<argument><expr><literal type="number" pos:line="33" pos:column="12">38<pos:position pos:line="33" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="16">3<pos:position pos:line="33" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="19">"netdbExchangeHandleReply: for '"<pos:position pos:line="33" pos:column="52"/></literal> <operator pos:line="33" pos:column="53">&lt;&lt;<pos:position pos:line="33" pos:column="61"/></operator> <name><name pos:line="33" pos:column="56">ex<pos:position pos:line="33" pos:column="58"/></name><operator pos:line="33" pos:column="58">-&gt;<pos:position pos:line="33" pos:column="63"/></operator><name pos:line="33" pos:column="60">p<pos:position pos:line="33" pos:column="61"/></name><operator pos:line="33" pos:column="61">-&gt;<pos:position pos:line="33" pos:column="66"/></operator><name pos:line="33" pos:column="63">host<pos:position pos:line="33" pos:column="67"/></name></name> <operator pos:line="33" pos:column="68">&lt;&lt;<pos:position pos:line="33" pos:column="76"/></operator> <literal type="string" pos:line="33" pos:column="71">":"<pos:position pos:line="33" pos:column="74"/></literal> <operator pos:line="33" pos:column="75">&lt;&lt;<pos:position pos:line="33" pos:column="83"/></operator> <name><name pos:line="33" pos:column="78">ex<pos:position pos:line="33" pos:column="80"/></name><operator pos:line="33" pos:column="80">-&gt;<pos:position pos:line="33" pos:column="85"/></operator><name pos:line="33" pos:column="82">p<pos:position pos:line="33" pos:column="83"/></name><operator pos:line="33" pos:column="83">-&gt;<pos:position pos:line="33" pos:column="88"/></operator><name pos:line="33" pos:column="85">http_port<pos:position pos:line="33" pos:column="94"/></name></name> <operator pos:line="33" pos:column="95">&lt;&lt;<pos:position pos:line="33" pos:column="103"/></operator> <literal type="string" pos:line="33" pos:column="98">"'"<pos:position pos:line="33" pos:column="101"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="102"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="103"/></expr_stmt>

    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><name><name pos:line="35" pos:column="9">receivedData<pos:position pos:line="35" pos:column="21"/></name><operator pos:line="35" pos:column="21">.<pos:position pos:line="35" pos:column="22"/></operator><name pos:line="35" pos:column="22">length<pos:position pos:line="35" pos:column="28"/></name></name> <operator pos:line="35" pos:column="29">==<pos:position pos:line="35" pos:column="31"/></operator> <literal type="number" pos:line="35" pos:column="32">0<pos:position pos:line="35" pos:column="33"/></literal> <operator pos:line="35" pos:column="34">&amp;&amp;<pos:position pos:line="35" pos:column="44"/></operator>
            <operator pos:line="36" pos:column="13">!<pos:position pos:line="36" pos:column="14"/></operator><name><name pos:line="36" pos:column="14">receivedData<pos:position pos:line="36" pos:column="26"/></name><operator pos:line="36" pos:column="26">.<pos:position pos:line="36" pos:column="27"/></operator><name pos:line="36" pos:column="27">flags<pos:position pos:line="36" pos:column="32"/></name><operator pos:line="36" pos:column="32">.<pos:position pos:line="36" pos:column="33"/></operator><name pos:line="36" pos:column="33">error<pos:position pos:line="36" pos:column="38"/></name></name></expr>)<pos:position pos:line="36" pos:column="39"/></condition><then pos:line="36" pos:column="39"> <block pos:line="36" pos:column="40">{
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">debugs<pos:position pos:line="37" pos:column="15"/></name><argument_list pos:line="37" pos:column="15">(<argument><expr><literal type="number" pos:line="37" pos:column="16">38<pos:position pos:line="37" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="20">3<pos:position pos:line="37" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="23">"netdbExchangeHandleReply: Done"<pos:position pos:line="37" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="57"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="38" pos:column="9">netdbExchangeDone<pos:position pos:line="38" pos:column="26"/></name><argument_list pos:line="38" pos:column="26">(<argument><expr><name pos:line="38" pos:column="27">ex<pos:position pos:line="38" pos:column="29"/></name></expr></argument>)<pos:position pos:line="38" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="31"/></expr_stmt>
        <return pos:line="39" pos:column="9">return;<pos:position pos:line="39" pos:column="16"/></return>
    }<pos:position pos:line="40" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="42" pos:column="5">p<pos:position pos:line="42" pos:column="6"/></name> <operator pos:line="42" pos:column="7">=<pos:position pos:line="42" pos:column="8"/></operator> <name><name pos:line="42" pos:column="9">ex<pos:position pos:line="42" pos:column="11"/></name><operator pos:line="42" pos:column="11">-&gt;<pos:position pos:line="42" pos:column="16"/></operator><name pos:line="42" pos:column="13">buf<pos:position pos:line="42" pos:column="16"/></name></name></expr>;<pos:position pos:line="42" pos:column="17"/></expr_stmt>

    <comment type="block" pos:line="44" pos:column="5">/* Get the size of the buffer now */</comment>
    <expr_stmt><expr><name pos:line="45" pos:column="5">size<pos:position pos:line="45" pos:column="9"/></name> <operator pos:line="45" pos:column="10">=<pos:position pos:line="45" pos:column="11"/></operator> <name><name pos:line="45" pos:column="12">ex<pos:position pos:line="45" pos:column="14"/></name><operator pos:line="45" pos:column="14">-&gt;<pos:position pos:line="45" pos:column="19"/></operator><name pos:line="45" pos:column="16">buf_ofs<pos:position pos:line="45" pos:column="23"/></name></name> <operator pos:line="45" pos:column="24">+<pos:position pos:line="45" pos:column="25"/></operator> <name><name pos:line="45" pos:column="26">receivedData<pos:position pos:line="45" pos:column="38"/></name><operator pos:line="45" pos:column="38">.<pos:position pos:line="45" pos:column="39"/></operator><name pos:line="45" pos:column="39">length<pos:position pos:line="45" pos:column="45"/></name></name></expr>;<pos:position pos:line="45" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="46" pos:column="5">debugs<pos:position pos:line="46" pos:column="11"/></name><argument_list pos:line="46" pos:column="11">(<argument><expr><literal type="number" pos:line="46" pos:column="12">38<pos:position pos:line="46" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="16">3<pos:position pos:line="46" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="19">"netdbExchangeHandleReply: "<pos:position pos:line="46" pos:column="47"/></literal> <operator pos:line="46" pos:column="48">&lt;&lt;<pos:position pos:line="46" pos:column="56"/></operator> <name pos:line="46" pos:column="51">size<pos:position pos:line="46" pos:column="55"/></name> <operator pos:line="46" pos:column="56">&lt;&lt;<pos:position pos:line="46" pos:column="64"/></operator> <literal type="string" pos:line="46" pos:column="59">" bytes buf"<pos:position pos:line="46" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="73"/></expr_stmt>

    <comment type="block" pos:line="48" pos:column="5">/* Check if we're still doing headers */</comment>

    <if pos:line="50" pos:column="5">if <condition pos:line="50" pos:column="8">(<expr><name><name pos:line="50" pos:column="9">ex<pos:position pos:line="50" pos:column="11"/></name><operator pos:line="50" pos:column="11">-&gt;<pos:position pos:line="50" pos:column="16"/></operator><name pos:line="50" pos:column="13">connstate<pos:position pos:line="50" pos:column="22"/></name></name> <operator pos:line="50" pos:column="23">==<pos:position pos:line="50" pos:column="25"/></operator> <name pos:line="50" pos:column="26">STATE_HEADER<pos:position pos:line="50" pos:column="38"/></name></expr>)<pos:position pos:line="50" pos:column="39"/></condition><then pos:line="50" pos:column="39"> <block pos:line="50" pos:column="40">{

        <expr_stmt><expr><name><name pos:line="52" pos:column="9">ex<pos:position pos:line="52" pos:column="11"/></name><operator pos:line="52" pos:column="11">-&gt;<pos:position pos:line="52" pos:column="16"/></operator><name pos:line="52" pos:column="13">buf_ofs<pos:position pos:line="52" pos:column="20"/></name></name> <operator pos:line="52" pos:column="21">+=<pos:position pos:line="52" pos:column="23"/></operator> <name><name pos:line="52" pos:column="24">receivedData<pos:position pos:line="52" pos:column="36"/></name><operator pos:line="52" pos:column="36">.<pos:position pos:line="52" pos:column="37"/></operator><name pos:line="52" pos:column="37">length<pos:position pos:line="52" pos:column="43"/></name></name></expr>;<pos:position pos:line="52" pos:column="44"/></expr_stmt>

        <comment type="block" pos:line="54" pos:column="9">/* skip reply headers */</comment>

        <if pos:line="56" pos:column="9">if <condition pos:line="56" pos:column="12">(<expr><operator pos:line="56" pos:column="13">(<pos:position pos:line="56" pos:column="14"/></operator><name pos:line="56" pos:column="14">hdr_sz<pos:position pos:line="56" pos:column="20"/></name> <operator pos:line="56" pos:column="21">=<pos:position pos:line="56" pos:column="22"/></operator> <call><name pos:line="56" pos:column="23">headersEnd<pos:position pos:line="56" pos:column="33"/></name><argument_list pos:line="56" pos:column="33">(<argument><expr><name pos:line="56" pos:column="34">p<pos:position pos:line="56" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="37">ex<pos:position pos:line="56" pos:column="39"/></name><operator pos:line="56" pos:column="39">-&gt;<pos:position pos:line="56" pos:column="44"/></operator><name pos:line="56" pos:column="41">buf_ofs<pos:position pos:line="56" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="49"/></argument_list></call><operator pos:line="56" pos:column="49">)<pos:position pos:line="56" pos:column="50"/></operator></expr>)<pos:position pos:line="56" pos:column="51"/></condition><then pos:line="56" pos:column="51"> <block pos:line="56" pos:column="52">{
            <expr_stmt><expr><call><name pos:line="57" pos:column="13">debugs<pos:position pos:line="57" pos:column="19"/></name><argument_list pos:line="57" pos:column="19">(<argument><expr><literal type="number" pos:line="57" pos:column="20">38<pos:position pos:line="57" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="57" pos:column="24">5<pos:position pos:line="57" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="27">"netdbExchangeHandleReply: hdr_sz = "<pos:position pos:line="57" pos:column="64"/></literal> <operator pos:line="57" pos:column="65">&lt;&lt;<pos:position pos:line="57" pos:column="73"/></operator> <name pos:line="57" pos:column="68">hdr_sz<pos:position pos:line="57" pos:column="74"/></name></expr></argument>)<pos:position pos:line="57" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="76"/></expr_stmt>
            <expr_stmt><expr><name pos:line="58" pos:column="13">rep<pos:position pos:line="58" pos:column="16"/></name> <operator pos:line="58" pos:column="17">=<pos:position pos:line="58" pos:column="18"/></operator> <call><name><name pos:line="58" pos:column="19">ex<pos:position pos:line="58" pos:column="21"/></name><operator pos:line="58" pos:column="21">-&gt;<pos:position pos:line="58" pos:column="26"/></operator><name pos:line="58" pos:column="23">e<pos:position pos:line="58" pos:column="24"/></name><operator pos:line="58" pos:column="24">-&gt;<pos:position pos:line="58" pos:column="29"/></operator><name pos:line="58" pos:column="26">getReply<pos:position pos:line="58" pos:column="34"/></name></name><argument_list pos:line="58" pos:column="34">()<pos:position pos:line="58" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="37"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="59" pos:column="13">assert<pos:position pos:line="59" pos:column="19"/></name> <argument_list pos:line="59" pos:column="20">(<argument><expr><literal type="number" pos:line="59" pos:column="21">0<pos:position pos:line="59" pos:column="22"/></literal> <operator pos:line="59" pos:column="23">!=<pos:position pos:line="59" pos:column="25"/></operator> <name><name pos:line="59" pos:column="26">rep<pos:position pos:line="59" pos:column="29"/></name><operator pos:line="59" pos:column="29">-&gt;<pos:position pos:line="59" pos:column="34"/></operator><name pos:line="59" pos:column="31">sline<pos:position pos:line="59" pos:column="36"/></name><operator pos:line="59" pos:column="36">.<pos:position pos:line="59" pos:column="37"/></operator><name pos:line="59" pos:column="37">status<pos:position pos:line="59" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="59" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="45"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="60" pos:column="13">debugs<pos:position pos:line="60" pos:column="19"/></name><argument_list pos:line="60" pos:column="19">(<argument><expr><literal type="number" pos:line="60" pos:column="20">38<pos:position pos:line="60" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="60" pos:column="24">3<pos:position pos:line="60" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="27">"netdbExchangeHandleReply: reply status "<pos:position pos:line="60" pos:column="68"/></literal> <operator pos:line="60" pos:column="69">&lt;&lt;<pos:position pos:line="60" pos:column="77"/></operator> <name><name pos:line="60" pos:column="72">rep<pos:position pos:line="60" pos:column="75"/></name><operator pos:line="60" pos:column="75">-&gt;<pos:position pos:line="60" pos:column="80"/></operator><name pos:line="60" pos:column="77">sline<pos:position pos:line="60" pos:column="82"/></name><operator pos:line="60" pos:column="82">.<pos:position pos:line="60" pos:column="83"/></operator><name pos:line="60" pos:column="83">status<pos:position pos:line="60" pos:column="89"/></name></name></expr></argument>)<pos:position pos:line="60" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="91"/></expr_stmt>

            <if pos:line="62" pos:column="13">if <condition pos:line="62" pos:column="16">(<expr><name pos:line="62" pos:column="17">HTTP_OK<pos:position pos:line="62" pos:column="24"/></name> <operator pos:line="62" pos:column="25">!=<pos:position pos:line="62" pos:column="27"/></operator> <name><name pos:line="62" pos:column="28">rep<pos:position pos:line="62" pos:column="31"/></name><operator pos:line="62" pos:column="31">-&gt;<pos:position pos:line="62" pos:column="36"/></operator><name pos:line="62" pos:column="33">sline<pos:position pos:line="62" pos:column="38"/></name><operator pos:line="62" pos:column="38">.<pos:position pos:line="62" pos:column="39"/></operator><name pos:line="62" pos:column="39">status<pos:position pos:line="62" pos:column="45"/></name></name></expr>)<pos:position pos:line="62" pos:column="46"/></condition><then pos:line="62" pos:column="46"> <block pos:line="62" pos:column="47">{
                <expr_stmt><expr><call><name pos:line="63" pos:column="17">netdbExchangeDone<pos:position pos:line="63" pos:column="34"/></name><argument_list pos:line="63" pos:column="34">(<argument><expr><name pos:line="63" pos:column="35">ex<pos:position pos:line="63" pos:column="37"/></name></expr></argument>)<pos:position pos:line="63" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="39"/></expr_stmt>
                <return pos:line="64" pos:column="17">return;<pos:position pos:line="64" pos:column="24"/></return>
            }<pos:position pos:line="65" pos:column="14"/></block></then></if>

            <expr_stmt><expr><call><name pos:line="67" pos:column="13">assert<pos:position pos:line="67" pos:column="19"/></name><argument_list pos:line="67" pos:column="19">(<argument><expr><operator pos:line="67" pos:column="20">(<pos:position pos:line="67" pos:column="21"/></operator><name pos:line="67" pos:column="21">size_t<pos:position pos:line="67" pos:column="27"/></name><operator pos:line="67" pos:column="27">)<pos:position pos:line="67" pos:column="28"/></operator><name><name pos:line="67" pos:column="28">ex<pos:position pos:line="67" pos:column="30"/></name><operator pos:line="67" pos:column="30">-&gt;<pos:position pos:line="67" pos:column="35"/></operator><name pos:line="67" pos:column="32">buf_ofs<pos:position pos:line="67" pos:column="39"/></name></name> <operator pos:line="67" pos:column="40">&gt;=<pos:position pos:line="67" pos:column="45"/></operator> <name pos:line="67" pos:column="43">hdr_sz<pos:position pos:line="67" pos:column="49"/></name></expr></argument>)<pos:position pos:line="67" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="51"/></expr_stmt>

            <comment type="block" pos:line="69" pos:column="13">/*
             * Now, point p to the part of the buffer where the data
             * starts, and update the size accordingly
             */</comment>
            <expr_stmt><expr><call><name pos:line="73" pos:column="13">assert<pos:position pos:line="73" pos:column="19"/></name><argument_list pos:line="73" pos:column="19">(<argument><expr><name><name pos:line="73" pos:column="20">ex<pos:position pos:line="73" pos:column="22"/></name><operator pos:line="73" pos:column="22">-&gt;<pos:position pos:line="73" pos:column="27"/></operator><name pos:line="73" pos:column="24">used<pos:position pos:line="73" pos:column="28"/></name></name> <operator pos:line="73" pos:column="29">==<pos:position pos:line="73" pos:column="31"/></operator> <literal type="number" pos:line="73" pos:column="32">0<pos:position pos:line="73" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="35"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="74" pos:column="13">ex<pos:position pos:line="74" pos:column="15"/></name><operator pos:line="74" pos:column="15">-&gt;<pos:position pos:line="74" pos:column="20"/></operator><name pos:line="74" pos:column="17">used<pos:position pos:line="74" pos:column="21"/></name></name> <operator pos:line="74" pos:column="22">=<pos:position pos:line="74" pos:column="23"/></operator> <name pos:line="74" pos:column="24">hdr_sz<pos:position pos:line="74" pos:column="30"/></name></expr>;<pos:position pos:line="74" pos:column="31"/></expr_stmt>
            <expr_stmt><expr><name pos:line="75" pos:column="13">size<pos:position pos:line="75" pos:column="17"/></name> <operator pos:line="75" pos:column="18">=<pos:position pos:line="75" pos:column="19"/></operator> <name><name pos:line="75" pos:column="20">ex<pos:position pos:line="75" pos:column="22"/></name><operator pos:line="75" pos:column="22">-&gt;<pos:position pos:line="75" pos:column="27"/></operator><name pos:line="75" pos:column="24">buf_ofs<pos:position pos:line="75" pos:column="31"/></name></name> <operator pos:line="75" pos:column="32">-<pos:position pos:line="75" pos:column="33"/></operator> <name pos:line="75" pos:column="34">hdr_sz<pos:position pos:line="75" pos:column="40"/></name></expr>;<pos:position pos:line="75" pos:column="41"/></expr_stmt>
            <expr_stmt><expr><name pos:line="76" pos:column="13">p<pos:position pos:line="76" pos:column="14"/></name> <operator pos:line="76" pos:column="15">+=<pos:position pos:line="76" pos:column="17"/></operator> <name pos:line="76" pos:column="18">hdr_sz<pos:position pos:line="76" pos:column="24"/></name></expr>;<pos:position pos:line="76" pos:column="25"/></expr_stmt>

            <comment type="block" pos:line="78" pos:column="13">/* Finally, set the conn state mode to STATE_BODY */</comment>
            <expr_stmt><expr><name><name pos:line="79" pos:column="13">ex<pos:position pos:line="79" pos:column="15"/></name><operator pos:line="79" pos:column="15">-&gt;<pos:position pos:line="79" pos:column="20"/></operator><name pos:line="79" pos:column="17">connstate<pos:position pos:line="79" pos:column="26"/></name></name> <operator pos:line="79" pos:column="27">=<pos:position pos:line="79" pos:column="28"/></operator> <name pos:line="79" pos:column="29">STATE_BODY<pos:position pos:line="79" pos:column="39"/></name></expr>;<pos:position pos:line="79" pos:column="40"/></expr_stmt>
        }<pos:position pos:line="80" pos:column="10"/></block></then> <else pos:line="80" pos:column="11">else <block pos:line="80" pos:column="16">{
            <decl_stmt><decl><type><name pos:line="81" pos:column="13">StoreIOBuffer<pos:position pos:line="81" pos:column="26"/></name></type> <name pos:line="81" pos:column="27">tempBuffer<pos:position pos:line="81" pos:column="37"/></name></decl>;<pos:position pos:line="81" pos:column="38"/></decl_stmt>
            <expr_stmt><expr><name><name pos:line="82" pos:column="13">tempBuffer<pos:position pos:line="82" pos:column="23"/></name><operator pos:line="82" pos:column="23">.<pos:position pos:line="82" pos:column="24"/></operator><name pos:line="82" pos:column="24">offset<pos:position pos:line="82" pos:column="30"/></name></name> <operator pos:line="82" pos:column="31">=<pos:position pos:line="82" pos:column="32"/></operator> <name><name pos:line="82" pos:column="33">ex<pos:position pos:line="82" pos:column="35"/></name><operator pos:line="82" pos:column="35">-&gt;<pos:position pos:line="82" pos:column="40"/></operator><name pos:line="82" pos:column="37">buf_ofs<pos:position pos:line="82" pos:column="44"/></name></name></expr>;<pos:position pos:line="82" pos:column="45"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="83" pos:column="13">tempBuffer<pos:position pos:line="83" pos:column="23"/></name><operator pos:line="83" pos:column="23">.<pos:position pos:line="83" pos:column="24"/></operator><name pos:line="83" pos:column="24">length<pos:position pos:line="83" pos:column="30"/></name></name> <operator pos:line="83" pos:column="31">=<pos:position pos:line="83" pos:column="32"/></operator> <name><name pos:line="83" pos:column="33">ex<pos:position pos:line="83" pos:column="35"/></name><operator pos:line="83" pos:column="35">-&gt;<pos:position pos:line="83" pos:column="40"/></operator><name pos:line="83" pos:column="37">buf_sz<pos:position pos:line="83" pos:column="43"/></name></name> <operator pos:line="83" pos:column="44">-<pos:position pos:line="83" pos:column="45"/></operator> <name><name pos:line="83" pos:column="46">ex<pos:position pos:line="83" pos:column="48"/></name><operator pos:line="83" pos:column="48">-&gt;<pos:position pos:line="83" pos:column="53"/></operator><name pos:line="83" pos:column="50">buf_ofs<pos:position pos:line="83" pos:column="57"/></name></name></expr>;<pos:position pos:line="83" pos:column="58"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="84" pos:column="13">tempBuffer<pos:position pos:line="84" pos:column="23"/></name><operator pos:line="84" pos:column="23">.<pos:position pos:line="84" pos:column="24"/></operator><name pos:line="84" pos:column="24">data<pos:position pos:line="84" pos:column="28"/></name></name> <operator pos:line="84" pos:column="29">=<pos:position pos:line="84" pos:column="30"/></operator> <name><name pos:line="84" pos:column="31">ex<pos:position pos:line="84" pos:column="33"/></name><operator pos:line="84" pos:column="33">-&gt;<pos:position pos:line="84" pos:column="38"/></operator><name pos:line="84" pos:column="35">buf<pos:position pos:line="84" pos:column="38"/></name></name> <operator pos:line="84" pos:column="39">+<pos:position pos:line="84" pos:column="40"/></operator> <name><name pos:line="84" pos:column="41">ex<pos:position pos:line="84" pos:column="43"/></name><operator pos:line="84" pos:column="43">-&gt;<pos:position pos:line="84" pos:column="48"/></operator><name pos:line="84" pos:column="45">buf_ofs<pos:position pos:line="84" pos:column="52"/></name></name></expr>;<pos:position pos:line="84" pos:column="53"/></expr_stmt>
            <comment type="block" pos:line="85" pos:column="13">/* Have more headers .. */</comment>
            <expr_stmt><expr><call><name pos:line="86" pos:column="13">storeClientCopy<pos:position pos:line="86" pos:column="28"/></name><argument_list pos:line="86" pos:column="28">(<argument><expr><name><name pos:line="86" pos:column="29">ex<pos:position pos:line="86" pos:column="31"/></name><operator pos:line="86" pos:column="31">-&gt;<pos:position pos:line="86" pos:column="36"/></operator><name pos:line="86" pos:column="33">sc<pos:position pos:line="86" pos:column="35"/></name></name></expr></argument>, <argument><expr><name><name pos:line="86" pos:column="37">ex<pos:position pos:line="86" pos:column="39"/></name><operator pos:line="86" pos:column="39">-&gt;<pos:position pos:line="86" pos:column="44"/></operator><name pos:line="86" pos:column="41">e<pos:position pos:line="86" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="44">tempBuffer<pos:position pos:line="86" pos:column="54"/></name></expr></argument>,
                            <argument><expr><name pos:line="87" pos:column="29">netdbExchangeHandleReply<pos:position pos:line="87" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="55">ex<pos:position pos:line="87" pos:column="57"/></name></expr></argument>)<pos:position pos:line="87" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="59"/></expr_stmt>
            <return pos:line="88" pos:column="13">return;<pos:position pos:line="88" pos:column="20"/></return>
        }<pos:position pos:line="89" pos:column="10"/></block></else></if>
    }<pos:position pos:line="90" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="92" pos:column="5">assert<pos:position pos:line="92" pos:column="11"/></name><argument_list pos:line="92" pos:column="11">(<argument><expr><name><name pos:line="92" pos:column="12">ex<pos:position pos:line="92" pos:column="14"/></name><operator pos:line="92" pos:column="14">-&gt;<pos:position pos:line="92" pos:column="19"/></operator><name pos:line="92" pos:column="16">connstate<pos:position pos:line="92" pos:column="25"/></name></name> <operator pos:line="92" pos:column="26">==<pos:position pos:line="92" pos:column="28"/></operator> <name pos:line="92" pos:column="29">STATE_BODY<pos:position pos:line="92" pos:column="39"/></name></expr></argument>)<pos:position pos:line="92" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="41"/></expr_stmt>

    <comment type="block" pos:line="94" pos:column="5">/* If we get here, we have some body to parse .. */</comment>
    <expr_stmt><expr><call><name pos:line="95" pos:column="5">debugs<pos:position pos:line="95" pos:column="11"/></name><argument_list pos:line="95" pos:column="11">(<argument><expr><literal type="number" pos:line="95" pos:column="12">38<pos:position pos:line="95" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="95" pos:column="16">5<pos:position pos:line="95" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="95" pos:column="19">"netdbExchangeHandleReply: start parsing loop, size = "<pos:position pos:line="95" pos:column="74"/></literal> <operator pos:line="95" pos:column="75">&lt;&lt;<pos:position pos:line="95" pos:column="83"/></operator> <name pos:line="95" pos:column="78">size<pos:position pos:line="95" pos:column="82"/></name></expr></argument>)<pos:position pos:line="95" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="84"/></expr_stmt>

    <while pos:line="97" pos:column="5">while <condition pos:line="97" pos:column="11">(<expr><name pos:line="97" pos:column="12">size<pos:position pos:line="97" pos:column="16"/></name> <operator pos:line="97" pos:column="17">&gt;=<pos:position pos:line="97" pos:column="22"/></operator> <name pos:line="97" pos:column="20">rec_sz<pos:position pos:line="97" pos:column="26"/></name></expr>)<pos:position pos:line="97" pos:column="27"/></condition> <block pos:line="97" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="98" pos:column="9">debugs<pos:position pos:line="98" pos:column="15"/></name><argument_list pos:line="98" pos:column="15">(<argument><expr><literal type="number" pos:line="98" pos:column="16">38<pos:position pos:line="98" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="98" pos:column="20">5<pos:position pos:line="98" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="98" pos:column="23">"netdbExchangeHandleReply: in parsing loop, size = "<pos:position pos:line="98" pos:column="75"/></literal> <operator pos:line="98" pos:column="76">&lt;&lt;<pos:position pos:line="98" pos:column="84"/></operator> <name pos:line="98" pos:column="79">size<pos:position pos:line="98" pos:column="83"/></name></expr></argument>)<pos:position pos:line="98" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="85"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="99" pos:column="9">addr<pos:position pos:line="99" pos:column="13"/></name><operator pos:line="99" pos:column="13">.<pos:position pos:line="99" pos:column="14"/></operator><name pos:line="99" pos:column="14">SetAnyAddr<pos:position pos:line="99" pos:column="24"/></name></name><argument_list pos:line="99" pos:column="24">()<pos:position pos:line="99" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><name pos:line="100" pos:column="9">hops<pos:position pos:line="100" pos:column="13"/></name> <operator pos:line="100" pos:column="14">=<pos:position pos:line="100" pos:column="15"/></operator> <name pos:line="100" pos:column="16">rtt<pos:position pos:line="100" pos:column="19"/></name> <operator pos:line="100" pos:column="20">=<pos:position pos:line="100" pos:column="21"/></operator> <literal type="number" pos:line="100" pos:column="22">0.0<pos:position pos:line="100" pos:column="25"/></literal></expr>;<pos:position pos:line="100" pos:column="26"/></expr_stmt>

        <for pos:line="102" pos:column="9">for <control pos:line="102" pos:column="13">(<init><expr><name pos:line="102" pos:column="14">o<pos:position pos:line="102" pos:column="15"/></name> <operator pos:line="102" pos:column="16">=<pos:position pos:line="102" pos:column="17"/></operator> <literal type="number" pos:line="102" pos:column="18">0<pos:position pos:line="102" pos:column="19"/></literal></expr>;<pos:position pos:line="102" pos:column="20"/></init> <condition><expr><name pos:line="102" pos:column="21">o<pos:position pos:line="102" pos:column="22"/></name> <operator pos:line="102" pos:column="23">&lt;<pos:position pos:line="102" pos:column="27"/></operator> <name pos:line="102" pos:column="25">rec_sz<pos:position pos:line="102" pos:column="31"/></name></expr>;<pos:position pos:line="102" pos:column="32"/></condition><incr/>)<pos:position pos:line="102" pos:column="33"/></control> <block pos:line="102" pos:column="34">{
            <switch pos:line="103" pos:column="13">switch <condition pos:line="103" pos:column="20">(<expr><operator pos:line="103" pos:column="21">(<pos:position pos:line="103" pos:column="22"/></operator><name pos:line="103" pos:column="22">int<pos:position pos:line="103" pos:column="25"/></name><operator pos:line="103" pos:column="25">)<pos:position pos:line="103" pos:column="26"/></operator> <operator pos:line="103" pos:column="27">*<pos:position pos:line="103" pos:column="28"/></operator><operator pos:line="103" pos:column="28">(<pos:position pos:line="103" pos:column="29"/></operator><name pos:line="103" pos:column="29">p<pos:position pos:line="103" pos:column="30"/></name> <operator pos:line="103" pos:column="31">+<pos:position pos:line="103" pos:column="32"/></operator> <name pos:line="103" pos:column="33">o<pos:position pos:line="103" pos:column="34"/></name><operator pos:line="103" pos:column="34">)<pos:position pos:line="103" pos:column="35"/></operator></expr>)<pos:position pos:line="103" pos:column="36"/></condition> <block pos:line="103" pos:column="37">{

            <case pos:line="105" pos:column="13">case <expr><name pos:line="105" pos:column="18">NETDB_EX_NETWORK<pos:position pos:line="105" pos:column="34"/></name></expr>:<pos:position pos:line="105" pos:column="35"/></case>
                <expr_stmt><expr><operator pos:line="106" pos:column="17">++<pos:position pos:line="106" pos:column="19"/></operator><name pos:line="106" pos:column="19">o<pos:position pos:line="106" pos:column="20"/></name></expr>;<pos:position pos:line="106" pos:column="21"/></expr_stmt>
                <comment type="block" pos:line="107" pos:column="17">/* FIXME INET6 : NetDB can still ony send IPv4 */</comment>
                <expr_stmt><expr><call><name pos:line="108" pos:column="17">memcpy<pos:position pos:line="108" pos:column="23"/></name><argument_list pos:line="108" pos:column="23">(<argument><expr><operator pos:line="108" pos:column="24">&amp;<pos:position pos:line="108" pos:column="29"/></operator><name pos:line="108" pos:column="25">line_addr<pos:position pos:line="108" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="36">p<pos:position pos:line="108" pos:column="37"/></name> <operator pos:line="108" pos:column="38">+<pos:position pos:line="108" pos:column="39"/></operator> <name pos:line="108" pos:column="40">o<pos:position pos:line="108" pos:column="41"/></name></expr></argument>, <argument><expr><sizeof pos:line="108" pos:column="43">sizeof<argument_list pos:line="108" pos:column="49">(<argument><expr pos:line="108" pos:column="50">struct <name pos:line="108" pos:column="57">in_addr<pos:position pos:line="108" pos:column="64"/></name></expr></argument>)<pos:position pos:line="108" pos:column="65"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="108" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="67"/></expr_stmt>
                <expr_stmt><expr><name pos:line="109" pos:column="17">addr<pos:position pos:line="109" pos:column="21"/></name> <operator pos:line="109" pos:column="22">=<pos:position pos:line="109" pos:column="23"/></operator> <name pos:line="109" pos:column="24">line_addr<pos:position pos:line="109" pos:column="33"/></name></expr>;<pos:position pos:line="109" pos:column="34"/></expr_stmt>
                <expr_stmt><expr><name pos:line="110" pos:column="17">o<pos:position pos:line="110" pos:column="18"/></name> <operator pos:line="110" pos:column="19">+=<pos:position pos:line="110" pos:column="21"/></operator> <sizeof pos:line="110" pos:column="22">sizeof<argument_list pos:line="110" pos:column="28">(<argument><expr pos:line="110" pos:column="29">struct <name pos:line="110" pos:column="36">in_addr<pos:position pos:line="110" pos:column="43"/></name></expr></argument>)<pos:position pos:line="110" pos:column="44"/></argument_list></sizeof></expr>;<pos:position pos:line="110" pos:column="45"/></expr_stmt>
                <break pos:line="111" pos:column="17">break;<pos:position pos:line="111" pos:column="23"/></break>

            <case pos:line="113" pos:column="13">case <expr><name pos:line="113" pos:column="18">NETDB_EX_RTT<pos:position pos:line="113" pos:column="30"/></name></expr>:<pos:position pos:line="113" pos:column="31"/></case>
                <expr_stmt><expr><operator pos:line="114" pos:column="17">++<pos:position pos:line="114" pos:column="19"/></operator><name pos:line="114" pos:column="19">o<pos:position pos:line="114" pos:column="20"/></name></expr>;<pos:position pos:line="114" pos:column="21"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="115" pos:column="17">memcpy<pos:position pos:line="115" pos:column="23"/></name><argument_list pos:line="115" pos:column="23">(<argument><expr><operator pos:line="115" pos:column="24">&amp;<pos:position pos:line="115" pos:column="29"/></operator><name pos:line="115" pos:column="25">j<pos:position pos:line="115" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="115" pos:column="28">p<pos:position pos:line="115" pos:column="29"/></name> <operator pos:line="115" pos:column="30">+<pos:position pos:line="115" pos:column="31"/></operator> <name pos:line="115" pos:column="32">o<pos:position pos:line="115" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="115" pos:column="35">sizeof<argument_list pos:line="115" pos:column="41">(<argument><expr><name pos:line="115" pos:column="42">int<pos:position pos:line="115" pos:column="45"/></name></expr></argument>)<pos:position pos:line="115" pos:column="46"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="115" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="48"/></expr_stmt>
                <expr_stmt><expr><name pos:line="116" pos:column="17">o<pos:position pos:line="116" pos:column="18"/></name> <operator pos:line="116" pos:column="19">+=<pos:position pos:line="116" pos:column="21"/></operator> <sizeof pos:line="116" pos:column="22">sizeof<argument_list pos:line="116" pos:column="28">(<argument><expr><name pos:line="116" pos:column="29">int<pos:position pos:line="116" pos:column="32"/></name></expr></argument>)<pos:position pos:line="116" pos:column="33"/></argument_list></sizeof></expr>;<pos:position pos:line="116" pos:column="34"/></expr_stmt>
                <expr_stmt><expr><name pos:line="117" pos:column="17">rtt<pos:position pos:line="117" pos:column="20"/></name> <operator pos:line="117" pos:column="21">=<pos:position pos:line="117" pos:column="22"/></operator> <operator pos:line="117" pos:column="23">(<pos:position pos:line="117" pos:column="24"/></operator><name pos:line="117" pos:column="24">double<pos:position pos:line="117" pos:column="30"/></name><operator pos:line="117" pos:column="30">)<pos:position pos:line="117" pos:column="31"/></operator> <call><name pos:line="117" pos:column="32">ntohl<pos:position pos:line="117" pos:column="37"/></name><argument_list pos:line="117" pos:column="37">(<argument><expr><name pos:line="117" pos:column="38">j<pos:position pos:line="117" pos:column="39"/></name></expr></argument>)<pos:position pos:line="117" pos:column="40"/></argument_list></call> <operator pos:line="117" pos:column="41">/<pos:position pos:line="117" pos:column="42"/></operator> <literal type="number" pos:line="117" pos:column="43">1000.0<pos:position pos:line="117" pos:column="49"/></literal></expr>;<pos:position pos:line="117" pos:column="50"/></expr_stmt>
                <break pos:line="118" pos:column="17">break;<pos:position pos:line="118" pos:column="23"/></break>

            <case pos:line="120" pos:column="13">case <expr><name pos:line="120" pos:column="18">NETDB_EX_HOPS<pos:position pos:line="120" pos:column="31"/></name></expr>:<pos:position pos:line="120" pos:column="32"/></case>
                <expr_stmt><expr><operator pos:line="121" pos:column="17">++<pos:position pos:line="121" pos:column="19"/></operator><name pos:line="121" pos:column="19">o<pos:position pos:line="121" pos:column="20"/></name></expr>;<pos:position pos:line="121" pos:column="21"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="122" pos:column="17">memcpy<pos:position pos:line="122" pos:column="23"/></name><argument_list pos:line="122" pos:column="23">(<argument><expr><operator pos:line="122" pos:column="24">&amp;<pos:position pos:line="122" pos:column="29"/></operator><name pos:line="122" pos:column="25">j<pos:position pos:line="122" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="28">p<pos:position pos:line="122" pos:column="29"/></name> <operator pos:line="122" pos:column="30">+<pos:position pos:line="122" pos:column="31"/></operator> <name pos:line="122" pos:column="32">o<pos:position pos:line="122" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="122" pos:column="35">sizeof<argument_list pos:line="122" pos:column="41">(<argument><expr><name pos:line="122" pos:column="42">int<pos:position pos:line="122" pos:column="45"/></name></expr></argument>)<pos:position pos:line="122" pos:column="46"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="122" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="48"/></expr_stmt>
                <expr_stmt><expr><name pos:line="123" pos:column="17">o<pos:position pos:line="123" pos:column="18"/></name> <operator pos:line="123" pos:column="19">+=<pos:position pos:line="123" pos:column="21"/></operator> <sizeof pos:line="123" pos:column="22">sizeof<argument_list pos:line="123" pos:column="28">(<argument><expr><name pos:line="123" pos:column="29">int<pos:position pos:line="123" pos:column="32"/></name></expr></argument>)<pos:position pos:line="123" pos:column="33"/></argument_list></sizeof></expr>;<pos:position pos:line="123" pos:column="34"/></expr_stmt>
                <expr_stmt><expr><name pos:line="124" pos:column="17">hops<pos:position pos:line="124" pos:column="21"/></name> <operator pos:line="124" pos:column="22">=<pos:position pos:line="124" pos:column="23"/></operator> <operator pos:line="124" pos:column="24">(<pos:position pos:line="124" pos:column="25"/></operator><name pos:line="124" pos:column="25">double<pos:position pos:line="124" pos:column="31"/></name><operator pos:line="124" pos:column="31">)<pos:position pos:line="124" pos:column="32"/></operator> <call><name pos:line="124" pos:column="33">ntohl<pos:position pos:line="124" pos:column="38"/></name><argument_list pos:line="124" pos:column="38">(<argument><expr><name pos:line="124" pos:column="39">j<pos:position pos:line="124" pos:column="40"/></name></expr></argument>)<pos:position pos:line="124" pos:column="41"/></argument_list></call> <operator pos:line="124" pos:column="42">/<pos:position pos:line="124" pos:column="43"/></operator> <literal type="number" pos:line="124" pos:column="44">1000.0<pos:position pos:line="124" pos:column="50"/></literal></expr>;<pos:position pos:line="124" pos:column="51"/></expr_stmt>
                <break pos:line="125" pos:column="17">break;<pos:position pos:line="125" pos:column="23"/></break>

            <default pos:line="127" pos:column="13">default:<pos:position pos:line="127" pos:column="21"/></default>
                <expr_stmt><expr><call><name pos:line="128" pos:column="17">debugs<pos:position pos:line="128" pos:column="23"/></name><argument_list pos:line="128" pos:column="23">(<argument><expr><literal type="number" pos:line="128" pos:column="24">38<pos:position pos:line="128" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="128" pos:column="28">DBG_IMPORTANT<pos:position pos:line="128" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="128" pos:column="43">"netdbExchangeHandleReply: corrupt data, aborting"<pos:position pos:line="128" pos:column="93"/></literal></expr></argument>)<pos:position pos:line="128" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="95"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="129" pos:column="17">netdbExchangeDone<pos:position pos:line="129" pos:column="34"/></name><argument_list pos:line="129" pos:column="34">(<argument><expr><name pos:line="129" pos:column="35">ex<pos:position pos:line="129" pos:column="37"/></name></expr></argument>)<pos:position pos:line="129" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="39"/></expr_stmt>
                <return pos:line="130" pos:column="17">return;<pos:position pos:line="130" pos:column="24"/></return>
            }<pos:position pos:line="131" pos:column="14"/></block></switch>
        }<pos:position pos:line="132" pos:column="10"/></block></for>

        <if pos:line="134" pos:column="9">if <condition pos:line="134" pos:column="12">(<expr><operator pos:line="134" pos:column="13">!<pos:position pos:line="134" pos:column="14"/></operator><call><name><name pos:line="134" pos:column="14">addr<pos:position pos:line="134" pos:column="18"/></name><operator pos:line="134" pos:column="18">.<pos:position pos:line="134" pos:column="19"/></operator><name pos:line="134" pos:column="19">IsAnyAddr<pos:position pos:line="134" pos:column="28"/></name></name><argument_list pos:line="134" pos:column="28">()<pos:position pos:line="134" pos:column="30"/></argument_list></call> <operator pos:line="134" pos:column="31">&amp;&amp;<pos:position pos:line="134" pos:column="41"/></operator> <name pos:line="134" pos:column="34">rtt<pos:position pos:line="134" pos:column="37"/></name> <operator pos:line="134" pos:column="38">&gt;<pos:position pos:line="134" pos:column="42"/></operator> <literal type="number" pos:line="134" pos:column="40">0<pos:position pos:line="134" pos:column="41"/></literal></expr>)<pos:position pos:line="134" pos:column="42"/></condition><then pos:line="134" pos:column="42">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="135" pos:column="13">netdbExchangeUpdatePeer<pos:position pos:line="135" pos:column="36"/></name><argument_list pos:line="135" pos:column="36">(<argument><expr><name pos:line="135" pos:column="37">addr<pos:position pos:line="135" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="135" pos:column="43">ex<pos:position pos:line="135" pos:column="45"/></name><operator pos:line="135" pos:column="45">-&gt;<pos:position pos:line="135" pos:column="50"/></operator><name pos:line="135" pos:column="47">p<pos:position pos:line="135" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="50">rtt<pos:position pos:line="135" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="55">hops<pos:position pos:line="135" pos:column="59"/></name></expr></argument>)<pos:position pos:line="135" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="61"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name pos:line="137" pos:column="9">assert<pos:position pos:line="137" pos:column="15"/></name><argument_list pos:line="137" pos:column="15">(<argument><expr><name pos:line="137" pos:column="16">o<pos:position pos:line="137" pos:column="17"/></name> <operator pos:line="137" pos:column="18">==<pos:position pos:line="137" pos:column="20"/></operator> <name pos:line="137" pos:column="21">rec_sz<pos:position pos:line="137" pos:column="27"/></name></expr></argument>)<pos:position pos:line="137" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="29"/></expr_stmt>

        <expr_stmt><expr><name><name pos:line="139" pos:column="9">ex<pos:position pos:line="139" pos:column="11"/></name><operator pos:line="139" pos:column="11">-&gt;<pos:position pos:line="139" pos:column="16"/></operator><name pos:line="139" pos:column="13">used<pos:position pos:line="139" pos:column="17"/></name></name> <operator pos:line="139" pos:column="18">+=<pos:position pos:line="139" pos:column="20"/></operator> <name pos:line="139" pos:column="21">rec_sz<pos:position pos:line="139" pos:column="27"/></name></expr>;<pos:position pos:line="139" pos:column="28"/></expr_stmt>

        <expr_stmt><expr><name pos:line="141" pos:column="9">size<pos:position pos:line="141" pos:column="13"/></name> <operator pos:line="141" pos:column="14">-=<pos:position pos:line="141" pos:column="16"/></operator> <name pos:line="141" pos:column="17">rec_sz<pos:position pos:line="141" pos:column="23"/></name></expr>;<pos:position pos:line="141" pos:column="24"/></expr_stmt>

        <expr_stmt><expr><name pos:line="143" pos:column="9">p<pos:position pos:line="143" pos:column="10"/></name> <operator pos:line="143" pos:column="11">+=<pos:position pos:line="143" pos:column="13"/></operator> <name pos:line="143" pos:column="14">rec_sz<pos:position pos:line="143" pos:column="20"/></name></expr>;<pos:position pos:line="143" pos:column="21"/></expr_stmt>

        <expr_stmt><expr><operator pos:line="145" pos:column="9">++<pos:position pos:line="145" pos:column="11"/></operator><name pos:line="145" pos:column="11">nused<pos:position pos:line="145" pos:column="16"/></name></expr>;<pos:position pos:line="145" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="146" pos:column="6"/></block></while>

    <comment type="block" pos:line="148" pos:column="5">/*
     * Copy anything that is left over to the beginning of the buffer,
     * and adjust buf_ofs accordingly
     */</comment>

    <comment type="block" pos:line="153" pos:column="5">/*
     * Evilly, size refers to the buf size left now,
     * ex-&gt;buf_ofs is the original buffer size, so just copy that
     * much data over
     */</comment>
    <expr_stmt><expr><call><name pos:line="158" pos:column="5">memmove<pos:position pos:line="158" pos:column="12"/></name><argument_list pos:line="158" pos:column="12">(<argument><expr><name><name pos:line="158" pos:column="13">ex<pos:position pos:line="158" pos:column="15"/></name><operator pos:line="158" pos:column="15">-&gt;<pos:position pos:line="158" pos:column="20"/></operator><name pos:line="158" pos:column="17">buf<pos:position pos:line="158" pos:column="20"/></name></name></expr></argument>, <argument><expr><name><name pos:line="158" pos:column="22">ex<pos:position pos:line="158" pos:column="24"/></name><operator pos:line="158" pos:column="24">-&gt;<pos:position pos:line="158" pos:column="29"/></operator><name pos:line="158" pos:column="26">buf<pos:position pos:line="158" pos:column="29"/></name></name> <operator pos:line="158" pos:column="30">+<pos:position pos:line="158" pos:column="31"/></operator> <operator pos:line="158" pos:column="32">(<pos:position pos:line="158" pos:column="33"/></operator><name><name pos:line="158" pos:column="33">ex<pos:position pos:line="158" pos:column="35"/></name><operator pos:line="158" pos:column="35">-&gt;<pos:position pos:line="158" pos:column="40"/></operator><name pos:line="158" pos:column="37">buf_ofs<pos:position pos:line="158" pos:column="44"/></name></name> <operator pos:line="158" pos:column="45">-<pos:position pos:line="158" pos:column="46"/></operator> <name pos:line="158" pos:column="47">size<pos:position pos:line="158" pos:column="51"/></name><operator pos:line="158" pos:column="51">)<pos:position pos:line="158" pos:column="52"/></operator></expr></argument>, <argument><expr><name pos:line="158" pos:column="54">size<pos:position pos:line="158" pos:column="58"/></name></expr></argument>)<pos:position pos:line="158" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="158" pos:column="60"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="160" pos:column="5">ex<pos:position pos:line="160" pos:column="7"/></name><operator pos:line="160" pos:column="7">-&gt;<pos:position pos:line="160" pos:column="12"/></operator><name pos:line="160" pos:column="9">buf_ofs<pos:position pos:line="160" pos:column="16"/></name></name> <operator pos:line="160" pos:column="17">=<pos:position pos:line="160" pos:column="18"/></operator> <name pos:line="160" pos:column="19">size<pos:position pos:line="160" pos:column="23"/></name></expr>;<pos:position pos:line="160" pos:column="24"/></expr_stmt>

    <comment type="block" pos:line="162" pos:column="5">/*
     * And don't re-copy the remaining data ..
     */</comment>
    <expr_stmt><expr><name><name pos:line="165" pos:column="5">ex<pos:position pos:line="165" pos:column="7"/></name><operator pos:line="165" pos:column="7">-&gt;<pos:position pos:line="165" pos:column="12"/></operator><name pos:line="165" pos:column="9">used<pos:position pos:line="165" pos:column="13"/></name></name> <operator pos:line="165" pos:column="14">+=<pos:position pos:line="165" pos:column="16"/></operator> <name pos:line="165" pos:column="17">size<pos:position pos:line="165" pos:column="21"/></name></expr>;<pos:position pos:line="165" pos:column="22"/></expr_stmt>

    <comment type="block" pos:line="167" pos:column="5">/*
     * Now the tricky bit - size _included_ the leftover bit from the _last_
     * storeClientCopy. We don't want to include that, or our offset will be wrong.
     * So, don't count the size of the leftover buffer we began with.
     * This can _disappear_ when we're not tracking offsets ..
     */</comment>
    <expr_stmt><expr><name><name pos:line="173" pos:column="5">ex<pos:position pos:line="173" pos:column="7"/></name><operator pos:line="173" pos:column="7">-&gt;<pos:position pos:line="173" pos:column="12"/></operator><name pos:line="173" pos:column="9">used<pos:position pos:line="173" pos:column="13"/></name></name> <operator pos:line="173" pos:column="14">-=<pos:position pos:line="173" pos:column="16"/></operator> <name pos:line="173" pos:column="17">oldbufofs<pos:position pos:line="173" pos:column="26"/></name></expr>;<pos:position pos:line="173" pos:column="27"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="175" pos:column="5">debugs<pos:position pos:line="175" pos:column="11"/></name><argument_list pos:line="175" pos:column="11">(<argument><expr><literal type="number" pos:line="175" pos:column="12">38<pos:position pos:line="175" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="175" pos:column="16">3<pos:position pos:line="175" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="175" pos:column="19">"netdbExchangeHandleReply: size left over in this buffer: "<pos:position pos:line="175" pos:column="78"/></literal> <operator pos:line="175" pos:column="79">&lt;&lt;<pos:position pos:line="175" pos:column="87"/></operator> <name pos:line="175" pos:column="82">size<pos:position pos:line="175" pos:column="86"/></name> <operator pos:line="175" pos:column="87">&lt;&lt;<pos:position pos:line="175" pos:column="95"/></operator> <literal type="string" pos:line="175" pos:column="90">" bytes"<pos:position pos:line="175" pos:column="98"/></literal></expr></argument>)<pos:position pos:line="175" pos:column="99"/></argument_list></call></expr>;<pos:position pos:line="175" pos:column="100"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="177" pos:column="5">debugs<pos:position pos:line="177" pos:column="11"/></name><argument_list pos:line="177" pos:column="11">(<argument><expr><literal type="number" pos:line="177" pos:column="12">38<pos:position pos:line="177" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="177" pos:column="16">3<pos:position pos:line="177" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="177" pos:column="19">"netdbExchangeHandleReply: used "<pos:position pos:line="177" pos:column="52"/></literal> <operator pos:line="177" pos:column="53">&lt;&lt;<pos:position pos:line="177" pos:column="61"/></operator> <name pos:line="177" pos:column="56">nused<pos:position pos:line="177" pos:column="61"/></name> <operator pos:line="177" pos:column="62">&lt;&lt;<pos:position pos:line="177" pos:column="70"/></operator>
           <literal type="string" pos:line="178" pos:column="12">" entries, (x "<pos:position pos:line="178" pos:column="27"/></literal> <operator pos:line="178" pos:column="28">&lt;&lt;<pos:position pos:line="178" pos:column="36"/></operator> <name pos:line="178" pos:column="31">rec_sz<pos:position pos:line="178" pos:column="37"/></name> <operator pos:line="178" pos:column="38">&lt;&lt;<pos:position pos:line="178" pos:column="46"/></operator> <literal type="string" pos:line="178" pos:column="41">" bytes) == "<pos:position pos:line="178" pos:column="54"/></literal> <operator pos:line="178" pos:column="55">&lt;&lt;<pos:position pos:line="178" pos:column="63"/></operator> <name pos:line="178" pos:column="58">nused<pos:position pos:line="178" pos:column="63"/></name> <operator pos:line="178" pos:column="64">*<pos:position pos:line="178" pos:column="65"/></operator> <name pos:line="178" pos:column="66">rec_sz<pos:position pos:line="178" pos:column="72"/></name> <operator pos:line="178" pos:column="73">&lt;&lt;<pos:position pos:line="178" pos:column="81"/></operator>
           <literal type="string" pos:line="179" pos:column="12">" bytes total"<pos:position pos:line="179" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="179" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="179" pos:column="28"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="181" pos:column="5">debugs<pos:position pos:line="181" pos:column="11"/></name><argument_list pos:line="181" pos:column="11">(<argument><expr><literal type="number" pos:line="181" pos:column="12">38<pos:position pos:line="181" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="181" pos:column="16">3<pos:position pos:line="181" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="181" pos:column="19">"netdbExchangeHandleReply: used "<pos:position pos:line="181" pos:column="52"/></literal> <operator pos:line="181" pos:column="53">&lt;&lt;<pos:position pos:line="181" pos:column="61"/></operator> <name><name pos:line="181" pos:column="56">ex<pos:position pos:line="181" pos:column="58"/></name><operator pos:line="181" pos:column="58">-&gt;<pos:position pos:line="181" pos:column="63"/></operator><name pos:line="181" pos:column="60">used<pos:position pos:line="181" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="181" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="181" pos:column="66"/></expr_stmt>

    <if pos:line="183" pos:column="5">if <condition pos:line="183" pos:column="8">(<expr><call><name pos:line="183" pos:column="9">EBIT_TEST<pos:position pos:line="183" pos:column="18"/></name><argument_list pos:line="183" pos:column="18">(<argument><expr><name><name pos:line="183" pos:column="19">ex<pos:position pos:line="183" pos:column="21"/></name><operator pos:line="183" pos:column="21">-&gt;<pos:position pos:line="183" pos:column="26"/></operator><name pos:line="183" pos:column="23">e<pos:position pos:line="183" pos:column="24"/></name><operator pos:line="183" pos:column="24">-&gt;<pos:position pos:line="183" pos:column="29"/></operator><name pos:line="183" pos:column="26">flags<pos:position pos:line="183" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="183" pos:column="33">ENTRY_ABORTED<pos:position pos:line="183" pos:column="46"/></name></expr></argument>)<pos:position pos:line="183" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="183" pos:column="48"/></condition><then pos:line="183" pos:column="48"> <block pos:line="183" pos:column="49">{
        <expr_stmt><expr><call><name pos:line="184" pos:column="9">debugs<pos:position pos:line="184" pos:column="15"/></name><argument_list pos:line="184" pos:column="15">(<argument><expr><literal type="number" pos:line="184" pos:column="16">38<pos:position pos:line="184" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="184" pos:column="20">3<pos:position pos:line="184" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="184" pos:column="23">"netdbExchangeHandleReply: ENTRY_ABORTED"<pos:position pos:line="184" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="184" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="184" pos:column="66"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="185" pos:column="9">netdbExchangeDone<pos:position pos:line="185" pos:column="26"/></name><argument_list pos:line="185" pos:column="26">(<argument><expr><name pos:line="185" pos:column="27">ex<pos:position pos:line="185" pos:column="29"/></name></expr></argument>)<pos:position pos:line="185" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="185" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="186" pos:column="6"/></block></then> <elseif pos:line="186" pos:column="7">else <if pos:line="186" pos:column="12">if <condition pos:line="186" pos:column="15">(<expr><name><name pos:line="186" pos:column="16">ex<pos:position pos:line="186" pos:column="18"/></name><operator pos:line="186" pos:column="18">-&gt;<pos:position pos:line="186" pos:column="23"/></operator><name pos:line="186" pos:column="20">e<pos:position pos:line="186" pos:column="21"/></name><operator pos:line="186" pos:column="21">-&gt;<pos:position pos:line="186" pos:column="26"/></operator><name pos:line="186" pos:column="23">store_status<pos:position pos:line="186" pos:column="35"/></name></name> <operator pos:line="186" pos:column="36">==<pos:position pos:line="186" pos:column="38"/></operator> <name pos:line="186" pos:column="39">STORE_PENDING<pos:position pos:line="186" pos:column="52"/></name></expr>)<pos:position pos:line="186" pos:column="53"/></condition><then pos:line="186" pos:column="53"> <block pos:line="186" pos:column="54">{
        <decl_stmt><decl><type><name pos:line="187" pos:column="9">StoreIOBuffer<pos:position pos:line="187" pos:column="22"/></name></type> <name pos:line="187" pos:column="23">tempBuffer<pos:position pos:line="187" pos:column="33"/></name></decl>;<pos:position pos:line="187" pos:column="34"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="188" pos:column="9">tempBuffer<pos:position pos:line="188" pos:column="19"/></name><operator pos:line="188" pos:column="19">.<pos:position pos:line="188" pos:column="20"/></operator><name pos:line="188" pos:column="20">offset<pos:position pos:line="188" pos:column="26"/></name></name> <operator pos:line="188" pos:column="27">=<pos:position pos:line="188" pos:column="28"/></operator> <name><name pos:line="188" pos:column="29">ex<pos:position pos:line="188" pos:column="31"/></name><operator pos:line="188" pos:column="31">-&gt;<pos:position pos:line="188" pos:column="36"/></operator><name pos:line="188" pos:column="33">used<pos:position pos:line="188" pos:column="37"/></name></name></expr>;<pos:position pos:line="188" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="189" pos:column="9">tempBuffer<pos:position pos:line="189" pos:column="19"/></name><operator pos:line="189" pos:column="19">.<pos:position pos:line="189" pos:column="20"/></operator><name pos:line="189" pos:column="20">length<pos:position pos:line="189" pos:column="26"/></name></name> <operator pos:line="189" pos:column="27">=<pos:position pos:line="189" pos:column="28"/></operator> <name><name pos:line="189" pos:column="29">ex<pos:position pos:line="189" pos:column="31"/></name><operator pos:line="189" pos:column="31">-&gt;<pos:position pos:line="189" pos:column="36"/></operator><name pos:line="189" pos:column="33">buf_sz<pos:position pos:line="189" pos:column="39"/></name></name> <operator pos:line="189" pos:column="40">-<pos:position pos:line="189" pos:column="41"/></operator> <name><name pos:line="189" pos:column="42">ex<pos:position pos:line="189" pos:column="44"/></name><operator pos:line="189" pos:column="44">-&gt;<pos:position pos:line="189" pos:column="49"/></operator><name pos:line="189" pos:column="46">buf_ofs<pos:position pos:line="189" pos:column="53"/></name></name></expr>;<pos:position pos:line="189" pos:column="54"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="190" pos:column="9">tempBuffer<pos:position pos:line="190" pos:column="19"/></name><operator pos:line="190" pos:column="19">.<pos:position pos:line="190" pos:column="20"/></operator><name pos:line="190" pos:column="20">data<pos:position pos:line="190" pos:column="24"/></name></name> <operator pos:line="190" pos:column="25">=<pos:position pos:line="190" pos:column="26"/></operator> <name><name pos:line="190" pos:column="27">ex<pos:position pos:line="190" pos:column="29"/></name><operator pos:line="190" pos:column="29">-&gt;<pos:position pos:line="190" pos:column="34"/></operator><name pos:line="190" pos:column="31">buf<pos:position pos:line="190" pos:column="34"/></name></name> <operator pos:line="190" pos:column="35">+<pos:position pos:line="190" pos:column="36"/></operator> <name><name pos:line="190" pos:column="37">ex<pos:position pos:line="190" pos:column="39"/></name><operator pos:line="190" pos:column="39">-&gt;<pos:position pos:line="190" pos:column="44"/></operator><name pos:line="190" pos:column="41">buf_ofs<pos:position pos:line="190" pos:column="48"/></name></name></expr>;<pos:position pos:line="190" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="191" pos:column="9">debugs<pos:position pos:line="191" pos:column="15"/></name><argument_list pos:line="191" pos:column="15">(<argument><expr><literal type="number" pos:line="191" pos:column="16">38<pos:position pos:line="191" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="191" pos:column="20">3<pos:position pos:line="191" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="191" pos:column="23">"netdbExchangeHandleReply: EOF not received"<pos:position pos:line="191" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="191" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="191" pos:column="69"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="192" pos:column="9">storeClientCopy<pos:position pos:line="192" pos:column="24"/></name><argument_list pos:line="192" pos:column="24">(<argument><expr><name><name pos:line="192" pos:column="25">ex<pos:position pos:line="192" pos:column="27"/></name><operator pos:line="192" pos:column="27">-&gt;<pos:position pos:line="192" pos:column="32"/></operator><name pos:line="192" pos:column="29">sc<pos:position pos:line="192" pos:column="31"/></name></name></expr></argument>, <argument><expr><name><name pos:line="192" pos:column="33">ex<pos:position pos:line="192" pos:column="35"/></name><operator pos:line="192" pos:column="35">-&gt;<pos:position pos:line="192" pos:column="40"/></operator><name pos:line="192" pos:column="37">e<pos:position pos:line="192" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="192" pos:column="40">tempBuffer<pos:position pos:line="192" pos:column="50"/></name></expr></argument>,
                        <argument><expr><name pos:line="193" pos:column="25">netdbExchangeHandleReply<pos:position pos:line="193" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="193" pos:column="51">ex<pos:position pos:line="193" pos:column="53"/></name></expr></argument>)<pos:position pos:line="193" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="193" pos:column="55"/></expr_stmt>
    }<pos:position pos:line="194" pos:column="6"/></block></then></if></elseif></if>
}<pos:position pos:line="195" pos:column="2"/></block></function></unit>
