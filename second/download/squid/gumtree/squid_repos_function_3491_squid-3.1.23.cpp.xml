<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3491_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ConnStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">handleRequestBodyData<pos:position pos:line="2" pos:column="37"/></name></name><parameter_list pos:line="2" pos:column="37">()<pos:position pos:line="2" pos:column="39"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">bodyPipe<pos:position pos:line="4" pos:column="20"/></name> <operator pos:line="4" pos:column="21">!=<pos:position pos:line="4" pos:column="23"/></operator> <name pos:line="4" pos:column="24">NULL<pos:position pos:line="4" pos:column="28"/></name></expr></argument>)<pos:position pos:line="4" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="30"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="6" pos:column="5">size_t<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">putSize<pos:position pos:line="6" pos:column="19"/></name> <init pos:line="6" pos:column="20">= <expr><literal type="number" pos:line="6" pos:column="22">0<pos:position pos:line="6" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>

<cpp:if pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">if<pos:position pos:line="8" pos:column="4"/></cpp:directive> <expr><name pos:line="8" pos:column="5">FUTURE_CODE_TO_SUPPORT_CHUNKED_REQUESTS<pos:position pos:line="8" pos:column="44"/></name></expr></cpp:if>
    <comment type="line" pos:line="9" pos:column="5">// The code below works, in principle, but we cannot do dechunking</comment>
    <comment type="line" pos:line="10" pos:column="5">// on-the-fly because that would mean sending chunked requests to</comment>
    <comment type="line" pos:line="11" pos:column="5">// the next hop. Squid lacks logic to determine which servers can</comment>
    <comment type="line" pos:line="12" pos:column="5">// receive chunk requests. Squid v3.0 code cannot even handle chunked</comment>
    <comment type="line" pos:line="13" pos:column="5">// responses which we may encourage by sending chunked requests.</comment>
    <comment type="line" pos:line="14" pos:column="5">// The error generation code probably needs more work.</comment>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name><name pos:line="15" pos:column="9">in<pos:position pos:line="15" pos:column="11"/></name><operator pos:line="15" pos:column="11">.<pos:position pos:line="15" pos:column="12"/></operator><name pos:line="15" pos:column="12">bodyParser<pos:position pos:line="15" pos:column="22"/></name></name></expr>)<pos:position pos:line="15" pos:column="23"/></condition><then pos:line="15" pos:column="23"> <block pos:line="15" pos:column="24">{ <comment type="line" pos:line="15" pos:column="26">// chunked body</comment>
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">debugs<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><literal type="number" pos:line="16" pos:column="16">33<pos:position pos:line="16" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="16" pos:column="19">5<pos:position pos:line="16" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="22">HERE<pos:position pos:line="16" pos:column="26"/></name> <operator pos:line="16" pos:column="27">&lt;&lt;<pos:position pos:line="16" pos:column="35"/></operator> <literal type="string" pos:line="16" pos:column="30">"handling chunked request body for FD "<pos:position pos:line="16" pos:column="69"/></literal> <operator pos:line="16" pos:column="70">&lt;&lt;<pos:position pos:line="16" pos:column="78"/></operator> <name pos:line="16" pos:column="73">fd<pos:position pos:line="16" pos:column="75"/></name></expr></argument>)<pos:position pos:line="16" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="77"/></expr_stmt>
        <decl_stmt><decl><type><name pos:line="17" pos:column="9">bool<pos:position pos:line="17" pos:column="13"/></name></type> <name pos:line="17" pos:column="14">malformedChunks<pos:position pos:line="17" pos:column="29"/></name> <init pos:line="17" pos:column="30">= <expr><literal type="boolean" pos:line="17" pos:column="32">false<pos:position pos:line="17" pos:column="37"/></literal></expr></init></decl>;<pos:position pos:line="17" pos:column="38"/></decl_stmt>

        <decl_stmt><decl><type><name pos:line="19" pos:column="9">MemBuf<pos:position pos:line="19" pos:column="15"/></name></type> <name pos:line="19" pos:column="16">raw<pos:position pos:line="19" pos:column="19"/></name></decl>;<pos:position pos:line="19" pos:column="20"/></decl_stmt> <comment type="line" pos:line="19" pos:column="21">// ChunkedCodingParser only works with MemBufs</comment>
        <expr_stmt><expr><call><name><name pos:line="20" pos:column="9">raw<pos:position pos:line="20" pos:column="12"/></name><operator pos:line="20" pos:column="12">.<pos:position pos:line="20" pos:column="13"/></operator><name pos:line="20" pos:column="13">init<pos:position pos:line="20" pos:column="17"/></name></name><argument_list pos:line="20" pos:column="17">(<argument><expr><name><name pos:line="20" pos:column="18">in<pos:position pos:line="20" pos:column="20"/></name><operator pos:line="20" pos:column="20">.<pos:position pos:line="20" pos:column="21"/></operator><name pos:line="20" pos:column="21">notYetUsed<pos:position pos:line="20" pos:column="31"/></name></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="33">in<pos:position pos:line="20" pos:column="35"/></name><operator pos:line="20" pos:column="35">.<pos:position pos:line="20" pos:column="36"/></operator><name pos:line="20" pos:column="36">notYetUsed<pos:position pos:line="20" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="48"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="21" pos:column="9">raw<pos:position pos:line="21" pos:column="12"/></name><operator pos:line="21" pos:column="12">.<pos:position pos:line="21" pos:column="13"/></operator><name pos:line="21" pos:column="13">append<pos:position pos:line="21" pos:column="19"/></name></name><argument_list pos:line="21" pos:column="19">(<argument><expr><name><name pos:line="21" pos:column="20">in<pos:position pos:line="21" pos:column="22"/></name><operator pos:line="21" pos:column="22">.<pos:position pos:line="21" pos:column="23"/></operator><name pos:line="21" pos:column="23">buf<pos:position pos:line="21" pos:column="26"/></name></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="28">in<pos:position pos:line="21" pos:column="30"/></name><operator pos:line="21" pos:column="30">.<pos:position pos:line="21" pos:column="31"/></operator><name pos:line="21" pos:column="31">notYetUsed<pos:position pos:line="21" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="43"/></expr_stmt>
        <try pos:line="22" pos:column="9">try <block pos:line="22" pos:column="13">{ <comment type="line" pos:line="22" pos:column="15">// the parser will throw on errors</comment>
            <decl_stmt><decl><type><specifier pos:line="23" pos:column="13">const<pos:position pos:line="23" pos:column="18"/></specifier> <name pos:line="23" pos:column="19">mb_size_t<pos:position pos:line="23" pos:column="28"/></name></type> <name pos:line="23" pos:column="29">wasContentSize<pos:position pos:line="23" pos:column="43"/></name> <init pos:line="23" pos:column="44">= <expr><call><name><name pos:line="23" pos:column="46">raw<pos:position pos:line="23" pos:column="49"/></name><operator pos:line="23" pos:column="49">.<pos:position pos:line="23" pos:column="50"/></operator><name pos:line="23" pos:column="50">contentSize<pos:position pos:line="23" pos:column="61"/></name></name><argument_list pos:line="23" pos:column="61">()<pos:position pos:line="23" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="23" pos:column="64"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="24" pos:column="13">BodyPipeCheckout<pos:position pos:line="24" pos:column="29"/></name></type> <name pos:line="24" pos:column="30">bpc<pos:position pos:line="24" pos:column="33"/></name><argument_list pos:line="24" pos:column="33">(<argument><expr><operator pos:line="24" pos:column="34">*<pos:position pos:line="24" pos:column="35"/></operator><name pos:line="24" pos:column="35">bodyPipe<pos:position pos:line="24" pos:column="43"/></name></expr></argument>)<pos:position pos:line="24" pos:column="44"/></argument_list></decl>;<pos:position pos:line="24" pos:column="45"/></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="25" pos:column="13">const<pos:position pos:line="25" pos:column="18"/></specifier> <name pos:line="25" pos:column="19">bool<pos:position pos:line="25" pos:column="23"/></name></type> <name pos:line="25" pos:column="24">parsed<pos:position pos:line="25" pos:column="30"/></name> <init pos:line="25" pos:column="31">= <expr><call><name><name pos:line="25" pos:column="33">in<pos:position pos:line="25" pos:column="35"/></name><operator pos:line="25" pos:column="35">.<pos:position pos:line="25" pos:column="36"/></operator><name pos:line="25" pos:column="36">bodyParser<pos:position pos:line="25" pos:column="46"/></name><operator pos:line="25" pos:column="46">-&gt;<pos:position pos:line="25" pos:column="51"/></operator><name pos:line="25" pos:column="48">parse<pos:position pos:line="25" pos:column="53"/></name></name><argument_list pos:line="25" pos:column="53">(<argument><expr><operator pos:line="25" pos:column="54">&amp;<pos:position pos:line="25" pos:column="59"/></operator><name pos:line="25" pos:column="55">raw<pos:position pos:line="25" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="60">&amp;<pos:position pos:line="25" pos:column="65"/></operator><name><name pos:line="25" pos:column="61">bpc<pos:position pos:line="25" pos:column="64"/></name><operator pos:line="25" pos:column="64">.<pos:position pos:line="25" pos:column="65"/></operator><name pos:line="25" pos:column="65">buf<pos:position pos:line="25" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="25" pos:column="70"/></decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="26" pos:column="13">bpc<pos:position pos:line="26" pos:column="16"/></name><operator pos:line="26" pos:column="16">.<pos:position pos:line="26" pos:column="17"/></operator><name pos:line="26" pos:column="17">checkIn<pos:position pos:line="26" pos:column="24"/></name></name><argument_list pos:line="26" pos:column="24">()<pos:position pos:line="26" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="27"/></expr_stmt>
            <expr_stmt><expr><name pos:line="27" pos:column="13">putSize<pos:position pos:line="27" pos:column="20"/></name> <operator pos:line="27" pos:column="21">=<pos:position pos:line="27" pos:column="22"/></operator> <name pos:line="27" pos:column="23">wasContentSize<pos:position pos:line="27" pos:column="37"/></name> <operator pos:line="27" pos:column="38">-<pos:position pos:line="27" pos:column="39"/></operator> <call><name><name pos:line="27" pos:column="40">raw<pos:position pos:line="27" pos:column="43"/></name><operator pos:line="27" pos:column="43">.<pos:position pos:line="27" pos:column="44"/></operator><name pos:line="27" pos:column="44">contentSize<pos:position pos:line="27" pos:column="55"/></name></name><argument_list pos:line="27" pos:column="55">()<pos:position pos:line="27" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="58"/></expr_stmt>

            <if pos:line="29" pos:column="13">if <condition pos:line="29" pos:column="16">(<expr><name pos:line="29" pos:column="17">parsed<pos:position pos:line="29" pos:column="23"/></name></expr>)<pos:position pos:line="29" pos:column="24"/></condition><then pos:line="29" pos:column="24"> <block pos:line="29" pos:column="25">{
                <expr_stmt><expr><call><name pos:line="30" pos:column="17">stopProducingFor<pos:position pos:line="30" pos:column="33"/></name><argument_list pos:line="30" pos:column="33">(<argument><expr><name pos:line="30" pos:column="34">bodyPipe<pos:position pos:line="30" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="30" pos:column="44">true<pos:position pos:line="30" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="50"/></expr_stmt> <comment type="line" pos:line="30" pos:column="51">// this makes bodySize known</comment>
            }<pos:position pos:line="31" pos:column="14"/></block></then> <else pos:line="31" pos:column="15">else <block pos:line="31" pos:column="20">{
                <comment type="line" pos:line="32" pos:column="17">// parser needy state must imply body pipe needy state</comment>
                <if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><call><name><name pos:line="33" pos:column="21">in<pos:position pos:line="33" pos:column="23"/></name><operator pos:line="33" pos:column="23">.<pos:position pos:line="33" pos:column="24"/></operator><name pos:line="33" pos:column="24">bodyParser<pos:position pos:line="33" pos:column="34"/></name><operator pos:line="33" pos:column="34">-&gt;<pos:position pos:line="33" pos:column="39"/></operator><name pos:line="33" pos:column="36">needsMoreData<pos:position pos:line="33" pos:column="49"/></name></name><argument_list pos:line="33" pos:column="49">()<pos:position pos:line="33" pos:column="51"/></argument_list></call> <operator pos:line="33" pos:column="52">&amp;&amp;<pos:position pos:line="33" pos:column="62"/></operator>
                        <operator pos:line="34" pos:column="25">!<pos:position pos:line="34" pos:column="26"/></operator><call><name><name pos:line="34" pos:column="26">bodyPipe<pos:position pos:line="34" pos:column="34"/></name><operator pos:line="34" pos:column="34">-&gt;<pos:position pos:line="34" pos:column="39"/></operator><name pos:line="34" pos:column="36">mayNeedMoreData<pos:position pos:line="34" pos:column="51"/></name></name><argument_list pos:line="34" pos:column="51">()<pos:position pos:line="34" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="54"/></condition><then pos:line="34" pos:column="54">
                    <block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="21">malformedChunks<pos:position pos:line="35" pos:column="36"/></name> <operator pos:line="35" pos:column="37">=<pos:position pos:line="35" pos:column="38"/></operator> <literal type="boolean" pos:line="35" pos:column="39">true<pos:position pos:line="35" pos:column="43"/></literal></expr>;<pos:position pos:line="35" pos:column="44"/></expr_stmt></block></then></if>
                <comment type="line" pos:line="36" pos:column="17">// XXX: if bodyParser-&gt;needsMoreSpace, how can we guarantee it?</comment>
            }<pos:position pos:line="37" pos:column="14"/></block></else></if>
        }<pos:position pos:line="38" pos:column="10"/></block> <catch pos:line="38" pos:column="11">catch <parameter_list pos:line="38" pos:column="17">(<parameter><decl><type><modifier pos:line="38" pos:column="18">...<pos:position pos:line="38" pos:column="21"/></modifier></type></decl></parameter>)<pos:position pos:line="38" pos:column="22"/></parameter_list> <block pos:line="38" pos:column="23">{ <comment type="line" pos:line="38" pos:column="25">// XXX: be more specific</comment>
            <expr_stmt><expr><name pos:line="39" pos:column="13">malformedChunks<pos:position pos:line="39" pos:column="28"/></name> <operator pos:line="39" pos:column="29">=<pos:position pos:line="39" pos:column="30"/></operator> <literal type="boolean" pos:line="39" pos:column="31">true<pos:position pos:line="39" pos:column="35"/></literal></expr>;<pos:position pos:line="39" pos:column="36"/></expr_stmt>
        }<pos:position pos:line="40" pos:column="10"/></block></catch></try>

        <if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name pos:line="42" pos:column="13">malformedChunks<pos:position pos:line="42" pos:column="28"/></name></expr>)<pos:position pos:line="42" pos:column="29"/></condition><then pos:line="42" pos:column="29"> <block pos:line="42" pos:column="30">{
            <if pos:line="43" pos:column="13">if <condition pos:line="43" pos:column="16">(<expr><name pos:line="43" pos:column="17">bodyPipe<pos:position pos:line="43" pos:column="25"/></name> <operator pos:line="43" pos:column="26">!=<pos:position pos:line="43" pos:column="28"/></operator> <name pos:line="43" pos:column="29">NULL<pos:position pos:line="43" pos:column="33"/></name></expr>)<pos:position pos:line="43" pos:column="34"/></condition><then pos:line="43" pos:column="34">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="44" pos:column="17">stopProducingFor<pos:position pos:line="44" pos:column="33"/></name><argument_list pos:line="44" pos:column="33">(<argument><expr><name pos:line="44" pos:column="34">bodyPipe<pos:position pos:line="44" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="44" pos:column="44">false<pos:position pos:line="44" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="51"/></expr_stmt></block></then></if>

            <decl_stmt><decl><type><name><name pos:line="46" pos:column="13">ClientSocketContext<pos:position pos:line="46" pos:column="32"/></name><operator pos:line="46" pos:column="32">::<pos:position pos:line="46" pos:column="34"/></operator><name pos:line="46" pos:column="34">Pointer<pos:position pos:line="46" pos:column="41"/></name></name></type> <name pos:line="46" pos:column="42">context<pos:position pos:line="46" pos:column="49"/></name> <init pos:line="46" pos:column="50">= <expr><call><name pos:line="46" pos:column="52">getCurrentContext<pos:position pos:line="46" pos:column="69"/></name><argument_list pos:line="46" pos:column="69">()<pos:position pos:line="46" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="46" pos:column="72"/></decl_stmt>
            <if pos:line="47" pos:column="13">if <condition pos:line="47" pos:column="16">(<expr><operator pos:line="47" pos:column="17">!<pos:position pos:line="47" pos:column="18"/></operator><name><name pos:line="47" pos:column="18">context<pos:position pos:line="47" pos:column="25"/></name><operator pos:line="47" pos:column="25">-&gt;<pos:position pos:line="47" pos:column="30"/></operator><name pos:line="47" pos:column="27">http<pos:position pos:line="47" pos:column="31"/></name><operator pos:line="47" pos:column="31">-&gt;<pos:position pos:line="47" pos:column="36"/></operator><name pos:line="47" pos:column="33">out<pos:position pos:line="47" pos:column="36"/></name><operator pos:line="47" pos:column="36">.<pos:position pos:line="47" pos:column="37"/></operator><name pos:line="47" pos:column="37">offset<pos:position pos:line="47" pos:column="43"/></name></name></expr>)<pos:position pos:line="47" pos:column="44"/></condition><then pos:line="47" pos:column="44"> <block pos:line="47" pos:column="45">{
                <decl_stmt><decl><type><name pos:line="48" pos:column="17">clientStreamNode<pos:position pos:line="48" pos:column="33"/></name> <modifier pos:line="48" pos:column="34">*<pos:position pos:line="48" pos:column="35"/></modifier></type><name pos:line="48" pos:column="35">node<pos:position pos:line="48" pos:column="39"/></name> <init pos:line="48" pos:column="40">= <expr><call><name><name pos:line="48" pos:column="42">context<pos:position pos:line="48" pos:column="49"/></name><operator pos:line="48" pos:column="49">-&gt;<pos:position pos:line="48" pos:column="54"/></operator><name pos:line="48" pos:column="51">getClientReplyContext<pos:position pos:line="48" pos:column="72"/></name></name><argument_list pos:line="48" pos:column="72">()<pos:position pos:line="48" pos:column="74"/></argument_list></call></expr></init></decl>;<pos:position pos:line="48" pos:column="75"/></decl_stmt>
                <decl_stmt><decl><type><name pos:line="49" pos:column="17">clientReplyContext<pos:position pos:line="49" pos:column="35"/></name> <modifier pos:line="49" pos:column="36">*<pos:position pos:line="49" pos:column="37"/></modifier></type><name pos:line="49" pos:column="37">repContext<pos:position pos:line="49" pos:column="47"/></name> <init pos:line="49" pos:column="48">= <expr><cast type="dynamic" pos:line="49" pos:column="50">dynamic_cast<argument_list type="generic" pos:line="49" pos:column="62">&lt;<argument><expr><name pos:line="49" pos:column="63">clientReplyContext<pos:position pos:line="49" pos:column="81"/></name> <operator pos:line="49" pos:column="82">*<pos:position pos:line="49" pos:column="83"/></operator></expr></argument>&gt;<pos:position pos:line="49" pos:column="87"/></argument_list><argument_list pos:line="49" pos:column="84">(<argument><expr><call><name><name pos:line="49" pos:column="85">node<pos:position pos:line="49" pos:column="89"/></name><operator pos:line="49" pos:column="89">-&gt;<pos:position pos:line="49" pos:column="94"/></operator><name pos:line="49" pos:column="91">data<pos:position pos:line="49" pos:column="95"/></name><operator pos:line="49" pos:column="95">.<pos:position pos:line="49" pos:column="96"/></operator><name pos:line="49" pos:column="96">getRaw<pos:position pos:line="49" pos:column="102"/></name></name><argument_list pos:line="49" pos:column="102">()<pos:position pos:line="49" pos:column="104"/></argument_list></call></expr></argument>)<pos:position pos:line="49" pos:column="105"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="49" pos:column="106"/></decl_stmt>
                <expr_stmt><expr><call><name pos:line="50" pos:column="17">assert<pos:position pos:line="50" pos:column="23"/></name> <argument_list pos:line="50" pos:column="24">(<argument><expr><name pos:line="50" pos:column="25">repContext<pos:position pos:line="50" pos:column="35"/></name></expr></argument>)<pos:position pos:line="50" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="37"/></expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="51" pos:column="17">repContext<pos:position pos:line="51" pos:column="27"/></name><operator pos:line="51" pos:column="27">-&gt;<pos:position pos:line="51" pos:column="32"/></operator><name pos:line="51" pos:column="29">setReplyToError<pos:position pos:line="51" pos:column="44"/></name></name><argument_list pos:line="51" pos:column="44">(<argument><expr><name pos:line="51" pos:column="45">ERR_INVALID_REQ<pos:position pos:line="51" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="62">HTTP_BAD_REQUEST<pos:position pos:line="51" pos:column="78"/></name></expr></argument>,
                                            <argument><expr><name pos:line="52" pos:column="45">METHOD_NONE<pos:position pos:line="52" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="58">NULL<pos:position pos:line="52" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="52" pos:column="64">&amp;<pos:position pos:line="52" pos:column="69"/></operator><name><name pos:line="52" pos:column="65">peer<pos:position pos:line="52" pos:column="69"/></name><operator pos:line="52" pos:column="69">.<pos:position pos:line="52" pos:column="70"/></operator><name pos:line="52" pos:column="70">sin_addr<pos:position pos:line="52" pos:column="78"/></name></name></expr></argument>,
                                            <argument><expr><name pos:line="53" pos:column="45">NULL<pos:position pos:line="53" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="51">NULL<pos:position pos:line="53" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="57">NULL<pos:position pos:line="53" pos:column="61"/></name></expr></argument>)<pos:position pos:line="53" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="63"/></expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="54" pos:column="17">context<pos:position pos:line="54" pos:column="24"/></name><operator pos:line="54" pos:column="24">-&gt;<pos:position pos:line="54" pos:column="29"/></operator><name pos:line="54" pos:column="26">pullData<pos:position pos:line="54" pos:column="34"/></name></name><argument_list pos:line="54" pos:column="34">()<pos:position pos:line="54" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="37"/></expr_stmt>
            }<pos:position pos:line="55" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name><name pos:line="56" pos:column="13">flags<pos:position pos:line="56" pos:column="18"/></name><operator pos:line="56" pos:column="18">.<pos:position pos:line="56" pos:column="19"/></operator><name pos:line="56" pos:column="19">readMoreRequests<pos:position pos:line="56" pos:column="35"/></name></name> <operator pos:line="56" pos:column="36">=<pos:position pos:line="56" pos:column="37"/></operator> <literal type="boolean" pos:line="56" pos:column="38">false<pos:position pos:line="56" pos:column="43"/></literal></expr>;<pos:position pos:line="56" pos:column="44"/></expr_stmt>
            <return pos:line="57" pos:column="13">return;<pos:position pos:line="57" pos:column="20"/></return> <comment type="line" pos:line="57" pos:column="21">// XXX: is that sufficient to generate an error?</comment>
        }<pos:position pos:line="58" pos:column="10"/></block></then></if>
    }<pos:position pos:line="59" pos:column="6"/></block></then> <else pos:line="59" pos:column="7">else <comment type="line" pos:line="59" pos:column="12">// identity encoding</comment>
<cpp:endif pos:line="60" pos:column="1">#<cpp:directive pos:line="60" pos:column="2">endif<pos:position pos:line="60" pos:column="7"/></cpp:directive></cpp:endif>
    <block pos:line="61" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="62" pos:column="9">debugs<pos:position pos:line="62" pos:column="15"/></name><argument_list pos:line="62" pos:column="15">(<argument><expr><literal type="number" pos:line="62" pos:column="16">33<pos:position pos:line="62" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="62" pos:column="19">5<pos:position pos:line="62" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="62" pos:column="22">HERE<pos:position pos:line="62" pos:column="26"/></name> <operator pos:line="62" pos:column="27">&lt;&lt;<pos:position pos:line="62" pos:column="35"/></operator> <literal type="string" pos:line="62" pos:column="30">"handling plain request body for FD "<pos:position pos:line="62" pos:column="67"/></literal> <operator pos:line="62" pos:column="68">&lt;&lt;<pos:position pos:line="62" pos:column="76"/></operator> <name pos:line="62" pos:column="71">fd<pos:position pos:line="62" pos:column="73"/></name></expr></argument>)<pos:position pos:line="62" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="75"/></expr_stmt>
        <expr_stmt><expr><name pos:line="63" pos:column="9">putSize<pos:position pos:line="63" pos:column="16"/></name> <operator pos:line="63" pos:column="17">=<pos:position pos:line="63" pos:column="18"/></operator> <call><name><name pos:line="63" pos:column="19">bodyPipe<pos:position pos:line="63" pos:column="27"/></name><operator pos:line="63" pos:column="27">-&gt;<pos:position pos:line="63" pos:column="32"/></operator><name pos:line="63" pos:column="29">putMoreData<pos:position pos:line="63" pos:column="40"/></name></name><argument_list pos:line="63" pos:column="40">(<argument><expr><name><name pos:line="63" pos:column="41">in<pos:position pos:line="63" pos:column="43"/></name><operator pos:line="63" pos:column="43">.<pos:position pos:line="63" pos:column="44"/></operator><name pos:line="63" pos:column="44">buf<pos:position pos:line="63" pos:column="47"/></name></name></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="49">in<pos:position pos:line="63" pos:column="51"/></name><operator pos:line="63" pos:column="51">.<pos:position pos:line="63" pos:column="52"/></operator><name pos:line="63" pos:column="52">notYetUsed<pos:position pos:line="63" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="63" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="64"/></expr_stmt>
        <if pos:line="64" pos:column="9">if <condition pos:line="64" pos:column="12">(<expr><operator pos:line="64" pos:column="13">!<pos:position pos:line="64" pos:column="14"/></operator><call><name><name pos:line="64" pos:column="14">bodyPipe<pos:position pos:line="64" pos:column="22"/></name><operator pos:line="64" pos:column="22">-&gt;<pos:position pos:line="64" pos:column="27"/></operator><name pos:line="64" pos:column="24">mayNeedMoreData<pos:position pos:line="64" pos:column="39"/></name></name><argument_list pos:line="64" pos:column="39">()<pos:position pos:line="64" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="64" pos:column="42"/></condition><then pos:line="64" pos:column="42"> <block pos:line="64" pos:column="43">{
            <comment type="line" pos:line="65" pos:column="13">// BodyPipe will clear us automagically when we produced everything</comment>
            <expr_stmt><expr><name pos:line="66" pos:column="13">bodyPipe<pos:position pos:line="66" pos:column="21"/></name> <operator pos:line="66" pos:column="22">=<pos:position pos:line="66" pos:column="23"/></operator> <name pos:line="66" pos:column="24">NULL<pos:position pos:line="66" pos:column="28"/></name></expr>;<pos:position pos:line="66" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="67" pos:column="10"/></block></then></if>
    }<pos:position pos:line="68" pos:column="6"/></block></else></if>

    <if pos:line="70" pos:column="5">if <condition pos:line="70" pos:column="8">(<expr><name pos:line="70" pos:column="9">putSize<pos:position pos:line="70" pos:column="16"/></name> <operator pos:line="70" pos:column="17">&gt;<pos:position pos:line="70" pos:column="21"/></operator> <literal type="number" pos:line="70" pos:column="19">0<pos:position pos:line="70" pos:column="20"/></literal></expr>)<pos:position pos:line="70" pos:column="21"/></condition><then pos:line="70" pos:column="21">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="71" pos:column="9">connNoteUseOfBuffer<pos:position pos:line="71" pos:column="28"/></name><argument_list pos:line="71" pos:column="28">(<argument><expr><name pos:line="71" pos:column="29">this<pos:position pos:line="71" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="35">putSize<pos:position pos:line="71" pos:column="42"/></name></expr></argument>)<pos:position pos:line="71" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="44"/></expr_stmt></block></then></if>

    <if pos:line="73" pos:column="5">if <condition pos:line="73" pos:column="8">(<expr><operator pos:line="73" pos:column="9">!<pos:position pos:line="73" pos:column="10"/></operator><name pos:line="73" pos:column="10">bodyPipe<pos:position pos:line="73" pos:column="18"/></name></expr>)<pos:position pos:line="73" pos:column="19"/></condition><then pos:line="73" pos:column="19"> <block pos:line="73" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="74" pos:column="9">debugs<pos:position pos:line="74" pos:column="15"/></name><argument_list pos:line="74" pos:column="15">(<argument><expr><literal type="number" pos:line="74" pos:column="16">33<pos:position pos:line="74" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="74" pos:column="19">5<pos:position pos:line="74" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="74" pos:column="22">HERE<pos:position pos:line="74" pos:column="26"/></name> <operator pos:line="74" pos:column="27">&lt;&lt;<pos:position pos:line="74" pos:column="35"/></operator> <literal type="string" pos:line="74" pos:column="30">"produced entire request body for FD "<pos:position pos:line="74" pos:column="68"/></literal> <operator pos:line="74" pos:column="69">&lt;&lt;<pos:position pos:line="74" pos:column="77"/></operator> <name pos:line="74" pos:column="72">fd<pos:position pos:line="74" pos:column="74"/></name></expr></argument>)<pos:position pos:line="74" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="76"/></expr_stmt>

        <if pos:line="76" pos:column="9">if <condition pos:line="76" pos:column="12">(<decl><type><specifier pos:line="76" pos:column="13">const<pos:position pos:line="76" pos:column="18"/></specifier> <name pos:line="76" pos:column="19">char<pos:position pos:line="76" pos:column="23"/></name> <modifier pos:line="76" pos:column="24">*<pos:position pos:line="76" pos:column="25"/></modifier></type><name pos:line="76" pos:column="25">reason<pos:position pos:line="76" pos:column="31"/></name> <init pos:line="76" pos:column="32">= <expr><call><name pos:line="76" pos:column="34">stoppedSending<pos:position pos:line="76" pos:column="48"/></name><argument_list pos:line="76" pos:column="48">()<pos:position pos:line="76" pos:column="50"/></argument_list></call></expr></init></decl>)<pos:position pos:line="76" pos:column="51"/></condition><then pos:line="76" pos:column="51"> <block pos:line="76" pos:column="52">{
            <comment type="block" pos:line="77" pos:column="13">/* we've finished reading like good clients,
             * now do the close that initiateClose initiated.
             */</comment>
            <expr_stmt><expr><call><name pos:line="80" pos:column="13">debugs<pos:position pos:line="80" pos:column="19"/></name><argument_list pos:line="80" pos:column="19">(<argument><expr><literal type="number" pos:line="80" pos:column="20">33<pos:position pos:line="80" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="80" pos:column="24">3<pos:position pos:line="80" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="80" pos:column="27">HERE<pos:position pos:line="80" pos:column="31"/></name> <operator pos:line="80" pos:column="32">&lt;&lt;<pos:position pos:line="80" pos:column="40"/></operator> <literal type="string" pos:line="80" pos:column="35">"closing for earlier sending error: "<pos:position pos:line="80" pos:column="72"/></literal> <operator pos:line="80" pos:column="73">&lt;&lt;<pos:position pos:line="80" pos:column="81"/></operator> <name pos:line="80" pos:column="76">reason<pos:position pos:line="80" pos:column="82"/></name></expr></argument>)<pos:position pos:line="80" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="84"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="81" pos:column="13">comm_close<pos:position pos:line="81" pos:column="23"/></name><argument_list pos:line="81" pos:column="23">(<argument><expr><name pos:line="81" pos:column="24">fd<pos:position pos:line="81" pos:column="26"/></name></expr></argument>)<pos:position pos:line="81" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="28"/></expr_stmt>
            <return pos:line="82" pos:column="13">return <expr><literal type="boolean" pos:line="82" pos:column="20">false<pos:position pos:line="82" pos:column="25"/></literal></expr>;<pos:position pos:line="82" pos:column="26"/></return>
        }<pos:position pos:line="83" pos:column="10"/></block></then></if>
    }<pos:position pos:line="84" pos:column="6"/></block></then></if>
    <return pos:line="85" pos:column="5">return <expr><literal type="boolean" pos:line="85" pos:column="12">true<pos:position pos:line="85" pos:column="16"/></literal></expr>;<pos:position pos:line="85" pos:column="17"/></return>
}<pos:position pos:line="86" pos:column="2"/></block></function></unit>
