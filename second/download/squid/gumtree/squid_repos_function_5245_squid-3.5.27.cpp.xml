<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5245_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Fs<pos:position pos:line="2" pos:column="3"/></name><operator pos:line="2" pos:column="3">::<pos:position pos:line="2" pos:column="5"/></operator><name pos:line="2" pos:column="5">Ufs<pos:position pos:line="2" pos:column="8"/></name><operator pos:line="2" pos:column="8">::<pos:position pos:line="2" pos:column="10"/></operator><name pos:line="2" pos:column="10">UFSStoreState<pos:position pos:line="2" pos:column="23"/></name><operator pos:line="2" pos:column="23">::<pos:position pos:line="2" pos:column="25"/></operator><name pos:line="2" pos:column="25">freePending<pos:position pos:line="2" pos:column="36"/></name></name><parameter_list pos:line="2" pos:column="36">()<pos:position pos:line="2" pos:column="38"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">_queued_read<pos:position pos:line="4" pos:column="17"/></name> <modifier pos:line="4" pos:column="18">*<pos:position pos:line="4" pos:column="19"/></modifier></type><name pos:line="4" pos:column="19">qr<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>

    <while pos:line="6" pos:column="5">while <condition pos:line="6" pos:column="11">(<expr><operator pos:line="6" pos:column="12">(<pos:position pos:line="6" pos:column="13"/></operator><name pos:line="6" pos:column="13">qr<pos:position pos:line="6" pos:column="15"/></name> <operator pos:line="6" pos:column="16">=<pos:position pos:line="6" pos:column="17"/></operator> <operator pos:line="6" pos:column="18">(<pos:position pos:line="6" pos:column="19"/></operator><name pos:line="6" pos:column="19">_queued_read<pos:position pos:line="6" pos:column="31"/></name> <operator pos:line="6" pos:column="32">*<pos:position pos:line="6" pos:column="33"/></operator><operator pos:line="6" pos:column="33">)<pos:position pos:line="6" pos:column="34"/></operator><call><name pos:line="6" pos:column="34">linklistShift<pos:position pos:line="6" pos:column="47"/></name><argument_list pos:line="6" pos:column="47">(<argument><expr><operator pos:line="6" pos:column="48">&amp;<pos:position pos:line="6" pos:column="53"/></operator><name pos:line="6" pos:column="49">pending_reads<pos:position pos:line="6" pos:column="62"/></name></expr></argument>)<pos:position pos:line="6" pos:column="63"/></argument_list></call><operator pos:line="6" pos:column="63">)<pos:position pos:line="6" pos:column="64"/></operator></expr>)<pos:position pos:line="6" pos:column="65"/></condition> <block pos:line="6" pos:column="66">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">cbdataReferenceDone<pos:position pos:line="7" pos:column="28"/></name><argument_list pos:line="7" pos:column="28">(<argument><expr><name><name pos:line="7" pos:column="29">qr<pos:position pos:line="7" pos:column="31"/></name><operator pos:line="7" pos:column="31">-&gt;<pos:position pos:line="7" pos:column="36"/></operator><name pos:line="7" pos:column="33">callback_data<pos:position pos:line="7" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="48"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="8" pos:column="9">delete<pos:position pos:line="8" pos:column="15"/></operator> <name pos:line="8" pos:column="16">qr<pos:position pos:line="8" pos:column="18"/></name></expr>;<pos:position pos:line="8" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="9" pos:column="6"/></block></while>

    <expr_stmt><expr><call><name pos:line="11" pos:column="5">debugs<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><literal type="number" pos:line="11" pos:column="12">79<pos:position pos:line="11" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="11" pos:column="15">3<pos:position pos:line="11" pos:column="16"/></literal></expr></argument>,<argument><expr><name pos:line="11" pos:column="17">HERE<pos:position pos:line="11" pos:column="21"/></name> <operator pos:line="11" pos:column="22">&lt;&lt;<pos:position pos:line="11" pos:column="30"/></operator> <literal type="string" pos:line="11" pos:column="25">"UFSStoreState::freePending: freed pending reads"<pos:position pos:line="11" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="76"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="13" pos:column="5">_queued_write<pos:position pos:line="13" pos:column="18"/></name> <modifier pos:line="13" pos:column="19">*<pos:position pos:line="13" pos:column="20"/></modifier></type><name pos:line="13" pos:column="20">qw<pos:position pos:line="13" pos:column="22"/></name></decl>;<pos:position pos:line="13" pos:column="23"/></decl_stmt>

    <while pos:line="15" pos:column="5">while <condition pos:line="15" pos:column="11">(<expr><operator pos:line="15" pos:column="12">(<pos:position pos:line="15" pos:column="13"/></operator><name pos:line="15" pos:column="13">qw<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">=<pos:position pos:line="15" pos:column="17"/></operator> <operator pos:line="15" pos:column="18">(<pos:position pos:line="15" pos:column="19"/></operator><name pos:line="15" pos:column="19">_queued_write<pos:position pos:line="15" pos:column="32"/></name> <operator pos:line="15" pos:column="33">*<pos:position pos:line="15" pos:column="34"/></operator><operator pos:line="15" pos:column="34">)<pos:position pos:line="15" pos:column="35"/></operator><call><name pos:line="15" pos:column="35">linklistShift<pos:position pos:line="15" pos:column="48"/></name><argument_list pos:line="15" pos:column="48">(<argument><expr><operator pos:line="15" pos:column="49">&amp;<pos:position pos:line="15" pos:column="54"/></operator><name pos:line="15" pos:column="50">pending_writes<pos:position pos:line="15" pos:column="64"/></name></expr></argument>)<pos:position pos:line="15" pos:column="65"/></argument_list></call><operator pos:line="15" pos:column="65">)<pos:position pos:line="15" pos:column="66"/></operator></expr>)<pos:position pos:line="15" pos:column="67"/></condition> <block pos:line="15" pos:column="68">{
        <if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name><name pos:line="16" pos:column="13">qw<pos:position pos:line="16" pos:column="15"/></name><operator pos:line="16" pos:column="15">-&gt;<pos:position pos:line="16" pos:column="20"/></operator><name pos:line="16" pos:column="17">free_func<pos:position pos:line="16" pos:column="26"/></name></name></expr>)<pos:position pos:line="16" pos:column="27"/></condition><then pos:line="16" pos:column="27">
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="17" pos:column="13">qw<pos:position pos:line="17" pos:column="15"/></name><operator pos:line="17" pos:column="15">-&gt;<pos:position pos:line="17" pos:column="20"/></operator><name pos:line="17" pos:column="17">free_func<pos:position pos:line="17" pos:column="26"/></name></name><argument_list pos:line="17" pos:column="26">(<argument><expr><cast type="const" pos:line="17" pos:column="27">const_cast<argument_list type="generic" pos:line="17" pos:column="37">&lt;<argument><expr><name pos:line="17" pos:column="38">char<pos:position pos:line="17" pos:column="42"/></name> <operator pos:line="17" pos:column="43">*<pos:position pos:line="17" pos:column="44"/></operator></expr></argument>&gt;<pos:position pos:line="17" pos:column="48"/></argument_list><argument_list pos:line="17" pos:column="45">(<argument><expr><name><name pos:line="17" pos:column="46">qw<pos:position pos:line="17" pos:column="48"/></name><operator pos:line="17" pos:column="48">-&gt;<pos:position pos:line="17" pos:column="53"/></operator><name pos:line="17" pos:column="50">buf<pos:position pos:line="17" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="54"/></argument_list></cast></expr></argument>)<pos:position pos:line="17" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="56"/></expr_stmt></block></then></if>
        <expr_stmt><expr><operator pos:line="18" pos:column="9">delete<pos:position pos:line="18" pos:column="15"/></operator> <name pos:line="18" pos:column="16">qw<pos:position pos:line="18" pos:column="18"/></name></expr>;<pos:position pos:line="18" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="19" pos:column="6"/></block></while>

    <expr_stmt><expr><call><name pos:line="21" pos:column="5">debugs<pos:position pos:line="21" pos:column="11"/></name><argument_list pos:line="21" pos:column="11">(<argument><expr><literal type="number" pos:line="21" pos:column="12">79<pos:position pos:line="21" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="21" pos:column="15">3<pos:position pos:line="21" pos:column="16"/></literal></expr></argument>,<argument><expr><name pos:line="21" pos:column="17">HERE<pos:position pos:line="21" pos:column="21"/></name> <operator pos:line="21" pos:column="22">&lt;&lt;<pos:position pos:line="21" pos:column="30"/></operator> <literal type="string" pos:line="21" pos:column="25">"UFSStoreState::freePending: freed pending writes"<pos:position pos:line="21" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="77"/></expr_stmt>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
