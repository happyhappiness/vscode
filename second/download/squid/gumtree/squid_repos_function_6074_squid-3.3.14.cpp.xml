<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6074_squid-3.3.14.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">ESIVarState<pos:position pos:line="1" pos:column="12"/></name><operator pos:line="1" pos:column="12">::<pos:position pos:line="1" pos:column="14"/></operator><name pos:line="1" pos:column="14">Variable<pos:position pos:line="1" pos:column="22"/></name></name> <modifier pos:line="1" pos:column="23">*<pos:position pos:line="1" pos:column="24"/></modifier></type>
<name><name pos:line="2" pos:column="1">ESIVarState<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">GetVar<pos:position pos:line="2" pos:column="20"/></name></name><parameter_list pos:line="2" pos:column="20">(<parameter><decl><type><name pos:line="2" pos:column="21">char<pos:position pos:line="2" pos:column="25"/></name> <specifier pos:line="2" pos:column="26">const<pos:position pos:line="2" pos:column="31"/></specifier> <modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type><name pos:line="2" pos:column="33">symbol<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="41">int<pos:position pos:line="2" pos:column="44"/></name></type> <name pos:line="2" pos:column="45">len<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="49"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name> <argument_list pos:line="4" pos:column="12">(<argument><expr><name pos:line="4" pos:column="13">symbol<pos:position pos:line="4" pos:column="19"/></name></expr></argument>)<pos:position pos:line="4" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="21"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="6" pos:column="5">void<pos:position pos:line="6" pos:column="9"/></name> <modifier pos:line="6" pos:column="10">*<pos:position pos:line="6" pos:column="11"/></modifier></type><name pos:line="6" pos:column="11">result<pos:position pos:line="6" pos:column="17"/></name> <init pos:line="6" pos:column="18">= <expr><call><name><name pos:line="6" pos:column="20">variables<pos:position pos:line="6" pos:column="29"/></name><operator pos:line="6" pos:column="29">.<pos:position pos:line="6" pos:column="30"/></operator><name pos:line="6" pos:column="30">find<pos:position pos:line="6" pos:column="34"/></name></name> <argument_list pos:line="6" pos:column="35">(<argument><expr><name pos:line="6" pos:column="36">symbol<pos:position pos:line="6" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="44">len<pos:position pos:line="6" pos:column="47"/></name></expr></argument>)<pos:position pos:line="6" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="49"/></decl_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">result<pos:position pos:line="8" pos:column="15"/></name></expr>)<pos:position pos:line="8" pos:column="16"/></condition><then pos:line="8" pos:column="16">
        <block type="pseudo"><return pos:line="9" pos:column="9">return <expr><cast type="static" pos:line="9" pos:column="16">static_cast<argument_list type="generic" pos:line="9" pos:column="27">&lt;<argument><expr><name pos:line="9" pos:column="28">Variable<pos:position pos:line="9" pos:column="36"/></name> <operator pos:line="9" pos:column="37">*<pos:position pos:line="9" pos:column="38"/></operator></expr></argument>&gt;<pos:position pos:line="9" pos:column="42"/></argument_list><argument_list pos:line="9" pos:column="39">(<argument><expr><name pos:line="9" pos:column="40">result<pos:position pos:line="9" pos:column="46"/></name></expr></argument>)<pos:position pos:line="9" pos:column="47"/></argument_list></cast></expr>;<pos:position pos:line="9" pos:column="48"/></return></block></then></if>

    <return pos:line="11" pos:column="5">return <expr><name pos:line="11" pos:column="12">defaultVariable<pos:position pos:line="11" pos:column="27"/></name></expr>;<pos:position pos:line="11" pos:column="28"/></return>
}<pos:position pos:line="12" pos:column="2"/></block></function></unit>
