<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2393_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">MemObject<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">write<pos:position pos:line="2" pos:column="17"/></name></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><specifier pos:line="2" pos:column="18">const<pos:position pos:line="2" pos:column="23"/></specifier> <name pos:line="2" pos:column="24">StoreIOBuffer<pos:position pos:line="2" pos:column="37"/></name> <modifier pos:line="2" pos:column="38">&amp;<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="39">writeBuffer<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="51"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">PROF_start<pos:position pos:line="4" pos:column="15"/></name><argument_list pos:line="4" pos:column="15">(<argument><expr><name pos:line="4" pos:column="16">MemObject_write<pos:position pos:line="4" pos:column="31"/></name></expr></argument>)<pos:position pos:line="4" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">debugs<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><literal type="number" pos:line="5" pos:column="12">19<pos:position pos:line="5" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="16">6<pos:position pos:line="5" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="19">"memWrite: offset "<pos:position pos:line="5" pos:column="38"/></literal> <operator pos:line="5" pos:column="39">&lt;&lt;<pos:position pos:line="5" pos:column="47"/></operator> <name><name pos:line="5" pos:column="42">writeBuffer<pos:position pos:line="5" pos:column="53"/></name><operator pos:line="5" pos:column="53">.<pos:position pos:line="5" pos:column="54"/></operator><name pos:line="5" pos:column="54">offset<pos:position pos:line="5" pos:column="60"/></name></name> <operator pos:line="5" pos:column="61">&lt;&lt;<pos:position pos:line="5" pos:column="69"/></operator> <literal type="string" pos:line="5" pos:column="64">" len "<pos:position pos:line="5" pos:column="71"/></literal> <operator pos:line="5" pos:column="72">&lt;&lt;<pos:position pos:line="5" pos:column="80"/></operator> <name><name pos:line="5" pos:column="75">writeBuffer<pos:position pos:line="5" pos:column="86"/></name><operator pos:line="5" pos:column="86">.<pos:position pos:line="5" pos:column="87"/></operator><name pos:line="5" pos:column="87">length<pos:position pos:line="5" pos:column="93"/></name></name></expr></argument>)<pos:position pos:line="5" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="95"/></expr_stmt>

    <comment type="block" pos:line="7" pos:column="5">/* We don't separate out mime headers yet, so ensure that the first
     * write is at offset 0 - where they start
     */</comment>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">assert<pos:position pos:line="10" pos:column="11"/></name> <argument_list pos:line="10" pos:column="12">(<argument><expr><call><name><name pos:line="10" pos:column="13">data_hdr<pos:position pos:line="10" pos:column="21"/></name><operator pos:line="10" pos:column="21">.<pos:position pos:line="10" pos:column="22"/></operator><name pos:line="10" pos:column="22">endOffset<pos:position pos:line="10" pos:column="31"/></name></name><argument_list pos:line="10" pos:column="31">()<pos:position pos:line="10" pos:column="33"/></argument_list></call> <operator pos:line="10" pos:column="34">||<pos:position pos:line="10" pos:column="36"/></operator> <name><name pos:line="10" pos:column="37">writeBuffer<pos:position pos:line="10" pos:column="48"/></name><operator pos:line="10" pos:column="48">.<pos:position pos:line="10" pos:column="49"/></operator><name pos:line="10" pos:column="49">offset<pos:position pos:line="10" pos:column="55"/></name></name> <operator pos:line="10" pos:column="56">==<pos:position pos:line="10" pos:column="58"/></operator> <literal type="number" pos:line="10" pos:column="59">0<pos:position pos:line="10" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="62"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="12" pos:column="5">assert<pos:position pos:line="12" pos:column="11"/></name> <argument_list pos:line="12" pos:column="12">(<argument><expr><call><name><name pos:line="12" pos:column="13">data_hdr<pos:position pos:line="12" pos:column="21"/></name><operator pos:line="12" pos:column="21">.<pos:position pos:line="12" pos:column="22"/></operator><name pos:line="12" pos:column="22">write<pos:position pos:line="12" pos:column="27"/></name></name> <argument_list pos:line="12" pos:column="28">(<argument><expr><name pos:line="12" pos:column="29">writeBuffer<pos:position pos:line="12" pos:column="40"/></name></expr></argument>)<pos:position pos:line="12" pos:column="41"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">PROF_stop<pos:position pos:line="13" pos:column="14"/></name><argument_list pos:line="13" pos:column="14">(<argument><expr><name pos:line="13" pos:column="15">MemObject_write<pos:position pos:line="13" pos:column="30"/></name></expr></argument>)<pos:position pos:line="13" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="32"/></expr_stmt>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
