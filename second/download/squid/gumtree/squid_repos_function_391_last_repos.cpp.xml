<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_391_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">WIN32_StoreKey<pos:position pos:line="2" pos:column="15"/></name><parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><specifier pos:line="2" pos:column="16">const<pos:position pos:line="2" pos:column="21"/></specifier> <name pos:line="2" pos:column="22">char<pos:position pos:line="2" pos:column="26"/></name> <modifier pos:line="2" pos:column="27">*<pos:position pos:line="2" pos:column="28"/></modifier></type><name pos:line="2" pos:column="28">key<pos:position pos:line="2" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="33">DWORD<pos:position pos:line="2" pos:column="38"/></name></type> <name pos:line="2" pos:column="39">type<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="45">unsigned<pos:position pos:line="2" pos:column="53"/></name> <name pos:line="2" pos:column="54">char<pos:position pos:line="2" pos:column="58"/></name> <modifier pos:line="2" pos:column="59">*<pos:position pos:line="2" pos:column="60"/></modifier></type><name pos:line="2" pos:column="60">value<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>,
               <parameter><decl><type><name pos:line="3" pos:column="16">int<pos:position pos:line="3" pos:column="19"/></name></type> <name pos:line="3" pos:column="20">value_size<pos:position pos:line="3" pos:column="30"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="31"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">LONG<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">rv<pos:position pos:line="5" pos:column="12"/></name></decl>;<pos:position pos:line="5" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">HKEY<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">hKey<pos:position pos:line="6" pos:column="14"/></name></decl>;<pos:position pos:line="6" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">retval<pos:position pos:line="7" pos:column="15"/></name></decl>;<pos:position pos:line="7" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><name pos:line="9" pos:column="5">rv<pos:position pos:line="9" pos:column="7"/></name> <operator pos:line="9" pos:column="8">=<pos:position pos:line="9" pos:column="9"/></operator> <call><name pos:line="9" pos:column="10">RegOpenKeyEx<pos:position pos:line="9" pos:column="22"/></name><argument_list pos:line="9" pos:column="22">(<argument><expr><name pos:line="9" pos:column="23">HKEY_LOCAL_MACHINE<pos:position pos:line="9" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="43">REGKEY<pos:position pos:line="9" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="51">0<pos:position pos:line="9" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="54">KEY_WRITE<pos:position pos:line="9" pos:column="63"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="65">&amp;<pos:position pos:line="9" pos:column="70"/></operator><name pos:line="9" pos:column="66">hKey<pos:position pos:line="9" pos:column="70"/></name></expr></argument>)<pos:position pos:line="9" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="72"/></expr_stmt>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name pos:line="11" pos:column="9">rv<pos:position pos:line="11" pos:column="11"/></name> <operator pos:line="11" pos:column="12">==<pos:position pos:line="11" pos:column="14"/></operator> <name pos:line="11" pos:column="15">ERROR_FILE_NOT_FOUND<pos:position pos:line="11" pos:column="35"/></name></expr>)<pos:position pos:line="11" pos:column="36"/></condition><then pos:line="11" pos:column="36"> <block pos:line="11" pos:column="37">{
        <comment type="block" pos:line="12" pos:column="9">/* Key could not be opened -- try to create it
         */</comment>

        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><call><name pos:line="15" pos:column="13">WIN32_create_key<pos:position pos:line="15" pos:column="29"/></name><argument_list pos:line="15" pos:column="29">()<pos:position pos:line="15" pos:column="31"/></argument_list></call> <operator pos:line="15" pos:column="32">&lt;<pos:position pos:line="15" pos:column="36"/></operator> <literal type="number" pos:line="15" pos:column="34">0<pos:position pos:line="15" pos:column="35"/></literal></expr>)<pos:position pos:line="15" pos:column="36"/></condition><then pos:line="15" pos:column="36"> <block pos:line="15" pos:column="37">{
            <comment type="block" pos:line="16" pos:column="13">/* Creation failed (error already reported) */</comment>
            <return pos:line="17" pos:column="13">return <expr><operator pos:line="17" pos:column="20">-<pos:position pos:line="17" pos:column="21"/></operator><literal type="number" pos:line="17" pos:column="21">4<pos:position pos:line="17" pos:column="22"/></literal></expr>;<pos:position pos:line="17" pos:column="23"/></return>
        }<pos:position pos:line="18" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="20" pos:column="9">/* Now it has been created we should be able to open it
         */</comment>
        <expr_stmt><expr><name pos:line="22" pos:column="9">rv<pos:position pos:line="22" pos:column="11"/></name> <operator pos:line="22" pos:column="12">=<pos:position pos:line="22" pos:column="13"/></operator> <call><name pos:line="22" pos:column="14">RegOpenKeyEx<pos:position pos:line="22" pos:column="26"/></name><argument_list pos:line="22" pos:column="26">(<argument><expr><name pos:line="22" pos:column="27">HKEY_LOCAL_MACHINE<pos:position pos:line="22" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="47">REGKEY<pos:position pos:line="22" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="55">0<pos:position pos:line="22" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="58">KEY_WRITE<pos:position pos:line="22" pos:column="67"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="69">&amp;<pos:position pos:line="22" pos:column="74"/></operator><name pos:line="22" pos:column="70">hKey<pos:position pos:line="22" pos:column="74"/></name></expr></argument>)<pos:position pos:line="22" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="76"/></expr_stmt>

        <if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">rv<pos:position pos:line="24" pos:column="15"/></name> <operator pos:line="24" pos:column="16">==<pos:position pos:line="24" pos:column="18"/></operator> <name pos:line="24" pos:column="19">ERROR_FILE_NOT_FOUND<pos:position pos:line="24" pos:column="39"/></name></expr>)<pos:position pos:line="24" pos:column="40"/></condition><then pos:line="24" pos:column="40"> <block pos:line="24" pos:column="41">{
            <expr_stmt><expr><call><name pos:line="25" pos:column="13">fprintf<pos:position pos:line="25" pos:column="20"/></name><argument_list pos:line="25" pos:column="20">(<argument><expr><name pos:line="25" pos:column="21">stderr<pos:position pos:line="25" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="29">"Registry does not contain key %s after creation\n"<pos:position pos:line="25" pos:column="80"/></literal></expr></argument>,
                    <argument><expr><name pos:line="26" pos:column="21">REGKEY<pos:position pos:line="26" pos:column="27"/></name></expr></argument>)<pos:position pos:line="26" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="29"/></expr_stmt>
            <return pos:line="27" pos:column="13">return <expr><operator pos:line="27" pos:column="20">-<pos:position pos:line="27" pos:column="21"/></operator><literal type="number" pos:line="27" pos:column="21">1<pos:position pos:line="27" pos:column="22"/></literal></expr>;<pos:position pos:line="27" pos:column="23"/></return>
        }<pos:position pos:line="28" pos:column="10"/></block></then></if>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>

    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><name pos:line="31" pos:column="9">rv<pos:position pos:line="31" pos:column="11"/></name> <operator pos:line="31" pos:column="12">!=<pos:position pos:line="31" pos:column="14"/></operator> <name pos:line="31" pos:column="15">ERROR_SUCCESS<pos:position pos:line="31" pos:column="28"/></name></expr>)<pos:position pos:line="31" pos:column="29"/></condition><then pos:line="31" pos:column="29"> <block pos:line="31" pos:column="30">{
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">fprintf<pos:position pos:line="32" pos:column="16"/></name><argument_list pos:line="32" pos:column="16">(<argument><expr><name pos:line="32" pos:column="17">stderr<pos:position pos:line="32" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="25">"RegOpenKeyEx HKLM\\%s, %d\n"<pos:position pos:line="32" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="56">REGKEY<pos:position pos:line="32" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="64">(<pos:position pos:line="32" pos:column="65"/></operator><name pos:line="32" pos:column="65">int<pos:position pos:line="32" pos:column="68"/></name><operator pos:line="32" pos:column="68">)<pos:position pos:line="32" pos:column="69"/></operator> <name pos:line="32" pos:column="70">rv<pos:position pos:line="32" pos:column="72"/></name></expr></argument>)<pos:position pos:line="32" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="74"/></expr_stmt>
        <return pos:line="33" pos:column="9">return <expr><operator pos:line="33" pos:column="16">-<pos:position pos:line="33" pos:column="17"/></operator><literal type="number" pos:line="33" pos:column="17">4<pos:position pos:line="33" pos:column="18"/></literal></expr>;<pos:position pos:line="33" pos:column="19"/></return>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="36" pos:column="5">/* Now set the value and data */</comment>
    <expr_stmt><expr><name pos:line="37" pos:column="5">rv<pos:position pos:line="37" pos:column="7"/></name> <operator pos:line="37" pos:column="8">=<pos:position pos:line="37" pos:column="9"/></operator> <call><name pos:line="37" pos:column="10">RegSetValueEx<pos:position pos:line="37" pos:column="23"/></name><argument_list pos:line="37" pos:column="23">(<argument><expr><name pos:line="37" pos:column="24">hKey<pos:position pos:line="37" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="30">key<pos:position pos:line="37" pos:column="33"/></name></expr></argument>,   <comment type="block" pos:line="37" pos:column="37">/* value key name */</comment>
                       <argument><expr><literal type="number" pos:line="38" pos:column="24">0<pos:position pos:line="38" pos:column="25"/></literal></expr></argument>,           <comment type="block" pos:line="38" pos:column="37">/* reserved */</comment>
                       <argument><expr><name pos:line="39" pos:column="24">type<pos:position pos:line="39" pos:column="28"/></name></expr></argument>,            <comment type="block" pos:line="39" pos:column="41">/* type */</comment>
                       <argument><expr><name pos:line="40" pos:column="24">value<pos:position pos:line="40" pos:column="29"/></name></expr></argument>,           <comment type="block" pos:line="40" pos:column="41">/* value data */</comment>
                       <argument><expr><operator pos:line="41" pos:column="24">(<pos:position pos:line="41" pos:column="25"/></operator><name pos:line="41" pos:column="25">DWORD<pos:position pos:line="41" pos:column="30"/></name><operator pos:line="41" pos:column="30">)<pos:position pos:line="41" pos:column="31"/></operator> <name pos:line="41" pos:column="32">value_size<pos:position pos:line="41" pos:column="42"/></name></expr></argument>)<pos:position pos:line="41" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="44"/></expr_stmt> <comment type="block" pos:line="41" pos:column="45">/* for size of "value" */</comment>

    <expr_stmt><expr><name pos:line="43" pos:column="5">retval<pos:position pos:line="43" pos:column="11"/></name> <operator pos:line="43" pos:column="12">=<pos:position pos:line="43" pos:column="13"/></operator> <literal type="number" pos:line="43" pos:column="14">0<pos:position pos:line="43" pos:column="15"/></literal></expr>;<pos:position pos:line="43" pos:column="16"/></expr_stmt>         <comment type="block" pos:line="43" pos:column="25">/* Return value */</comment>

    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><name pos:line="45" pos:column="9">rv<pos:position pos:line="45" pos:column="11"/></name> <operator pos:line="45" pos:column="12">!=<pos:position pos:line="45" pos:column="14"/></operator> <name pos:line="45" pos:column="15">ERROR_SUCCESS<pos:position pos:line="45" pos:column="28"/></name></expr>)<pos:position pos:line="45" pos:column="29"/></condition><then pos:line="45" pos:column="29"> <block pos:line="45" pos:column="30">{
        <expr_stmt><expr><call><name pos:line="46" pos:column="9">fprintf<pos:position pos:line="46" pos:column="16"/></name><argument_list pos:line="46" pos:column="16">(<argument><expr><name pos:line="46" pos:column="17">stderr<pos:position pos:line="46" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="25">"RegQueryValueEx(key %s),%d\n"<pos:position pos:line="46" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="57">key<pos:position pos:line="46" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="62">(<pos:position pos:line="46" pos:column="63"/></operator><name pos:line="46" pos:column="63">int<pos:position pos:line="46" pos:column="66"/></name><operator pos:line="46" pos:column="66">)<pos:position pos:line="46" pos:column="67"/></operator> <name pos:line="46" pos:column="68">rv<pos:position pos:line="46" pos:column="70"/></name></expr></argument>)<pos:position pos:line="46" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="72"/></expr_stmt>
        <expr_stmt><expr><name pos:line="47" pos:column="9">retval<pos:position pos:line="47" pos:column="15"/></name> <operator pos:line="47" pos:column="16">=<pos:position pos:line="47" pos:column="17"/></operator> <operator pos:line="47" pos:column="18">-<pos:position pos:line="47" pos:column="19"/></operator><literal type="number" pos:line="47" pos:column="19">4<pos:position pos:line="47" pos:column="20"/></literal></expr>;<pos:position pos:line="47" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="48" pos:column="6"/></block></then> <else pos:line="48" pos:column="7">else <block pos:line="48" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="49" pos:column="9">fprintf<pos:position pos:line="49" pos:column="16"/></name><argument_list pos:line="49" pos:column="16">(<argument><expr><name pos:line="49" pos:column="17">stderr<pos:position pos:line="49" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="25">"Registry stored HKLM\\%s\\%s value %s\n"<pos:position pos:line="49" pos:column="66"/></literal></expr></argument>,
                <argument><expr><name pos:line="50" pos:column="17">REGKEY<pos:position pos:line="50" pos:column="23"/></name></expr></argument>,
                <argument><expr><name pos:line="51" pos:column="17">key<pos:position pos:line="51" pos:column="20"/></name></expr></argument>,
                <argument><expr><ternary><condition><expr><name pos:line="52" pos:column="17">type<pos:position pos:line="52" pos:column="21"/></name> <operator pos:line="52" pos:column="22">==<pos:position pos:line="52" pos:column="24"/></operator> <name pos:line="52" pos:column="25">REG_SZ<pos:position pos:line="52" pos:column="31"/></name></expr> ?<pos:position pos:line="52" pos:column="33"/></condition><then pos:line="52" pos:column="33"> <expr><name pos:line="52" pos:column="34">value<pos:position pos:line="52" pos:column="39"/></name></expr> <pos:position pos:line="52" pos:column="40"/></then><else pos:line="52" pos:column="40">: <expr><operator pos:line="52" pos:column="42">(<pos:position pos:line="52" pos:column="43"/></operator><name pos:line="52" pos:column="43">unsigned<pos:position pos:line="52" pos:column="51"/></name> <name pos:line="52" pos:column="52">char<pos:position pos:line="52" pos:column="56"/></name> <operator pos:line="52" pos:column="57">*<pos:position pos:line="52" pos:column="58"/></operator><operator pos:line="52" pos:column="58">)<pos:position pos:line="52" pos:column="59"/></operator> <literal type="string" pos:line="52" pos:column="60">"(not displayable)"<pos:position pos:line="52" pos:column="79"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="52" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="81"/></expr_stmt>
    }<pos:position pos:line="53" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="55" pos:column="5">/* Make sure we close the key even if there was an error storing
     * the data
     */</comment>
    <expr_stmt><expr><name pos:line="58" pos:column="5">rv<pos:position pos:line="58" pos:column="7"/></name> <operator pos:line="58" pos:column="8">=<pos:position pos:line="58" pos:column="9"/></operator> <call><name pos:line="58" pos:column="10">RegCloseKey<pos:position pos:line="58" pos:column="21"/></name><argument_list pos:line="58" pos:column="21">(<argument><expr><name pos:line="58" pos:column="22">hKey<pos:position pos:line="58" pos:column="26"/></name></expr></argument>)<pos:position pos:line="58" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="28"/></expr_stmt>

    <if pos:line="60" pos:column="5">if <condition pos:line="60" pos:column="8">(<expr><name pos:line="60" pos:column="9">rv<pos:position pos:line="60" pos:column="11"/></name> <operator pos:line="60" pos:column="12">!=<pos:position pos:line="60" pos:column="14"/></operator> <name pos:line="60" pos:column="15">ERROR_SUCCESS<pos:position pos:line="60" pos:column="28"/></name></expr>)<pos:position pos:line="60" pos:column="29"/></condition><then pos:line="60" pos:column="29"> <block pos:line="60" pos:column="30">{
        <expr_stmt><expr><call><name pos:line="61" pos:column="9">fprintf<pos:position pos:line="61" pos:column="16"/></name><argument_list pos:line="61" pos:column="16">(<argument><expr><name pos:line="61" pos:column="17">stderr<pos:position pos:line="61" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="25">"RegCloseKey HKLM\\%s, %d\n"<pos:position pos:line="61" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="61" pos:column="55">REGKEY<pos:position pos:line="61" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="61" pos:column="63">(<pos:position pos:line="61" pos:column="64"/></operator><name pos:line="61" pos:column="64">int<pos:position pos:line="61" pos:column="67"/></name><operator pos:line="61" pos:column="67">)<pos:position pos:line="61" pos:column="68"/></operator> <name pos:line="61" pos:column="69">rv<pos:position pos:line="61" pos:column="71"/></name></expr></argument>)<pos:position pos:line="61" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="73"/></expr_stmt>

        <if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><name pos:line="63" pos:column="13">retval<pos:position pos:line="63" pos:column="19"/></name> <operator pos:line="63" pos:column="20">==<pos:position pos:line="63" pos:column="22"/></operator> <literal type="number" pos:line="63" pos:column="23">0<pos:position pos:line="63" pos:column="24"/></literal></expr>)<pos:position pos:line="63" pos:column="25"/></condition><then pos:line="63" pos:column="25"> <block pos:line="63" pos:column="26">{
            <comment type="block" pos:line="64" pos:column="13">/* Keep error status from RegQueryValueEx, if any */</comment>
            <expr_stmt><expr><name pos:line="65" pos:column="13">retval<pos:position pos:line="65" pos:column="19"/></name> <operator pos:line="65" pos:column="20">=<pos:position pos:line="65" pos:column="21"/></operator> <operator pos:line="65" pos:column="22">-<pos:position pos:line="65" pos:column="23"/></operator><literal type="number" pos:line="65" pos:column="23">4<pos:position pos:line="65" pos:column="24"/></literal></expr>;<pos:position pos:line="65" pos:column="25"/></expr_stmt>
        }<pos:position pos:line="66" pos:column="10"/></block></then></if>
    }<pos:position pos:line="67" pos:column="6"/></block></then></if>

    <return pos:line="69" pos:column="5">return <expr><name pos:line="69" pos:column="12">retval<pos:position pos:line="69" pos:column="18"/></name></expr>;<pos:position pos:line="69" pos:column="19"/></return>
}<pos:position pos:line="70" pos:column="2"/></block></function></unit>
