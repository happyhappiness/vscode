<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4554_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ACLChecklist<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">matchNodes<pos:position pos:line="2" pos:column="25"/></name></name><parameter_list pos:line="2" pos:column="25">(<parameter><decl><type><specifier pos:line="2" pos:column="26">const<pos:position pos:line="2" pos:column="31"/></specifier> <name pos:line="2" pos:column="32">ACLList<pos:position pos:line="2" pos:column="39"/></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier></type> <name pos:line="2" pos:column="42">head<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="48">bool<pos:position pos:line="2" pos:column="52"/></name> <specifier pos:line="2" pos:column="53">const<pos:position pos:line="2" pos:column="58"/></specifier></type> <name pos:line="2" pos:column="59">fast<pos:position pos:line="2" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="64"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><operator pos:line="4" pos:column="12">!<pos:position pos:line="4" pos:column="13"/></operator><call><name pos:line="4" pos:column="13">finished<pos:position pos:line="4" pos:column="21"/></name><argument_list pos:line="4" pos:column="21">()<pos:position pos:line="4" pos:column="23"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="25"/></expr_stmt>

    <for pos:line="6" pos:column="5">for <control pos:line="6" pos:column="9">(<init><decl><type><specifier pos:line="6" pos:column="10">const<pos:position pos:line="6" pos:column="15"/></specifier> <name pos:line="6" pos:column="16">ACLList<pos:position pos:line="6" pos:column="23"/></name> <modifier pos:line="6" pos:column="24">*<pos:position pos:line="6" pos:column="25"/></modifier></type><name pos:line="6" pos:column="25">node<pos:position pos:line="6" pos:column="29"/></name> <init pos:line="6" pos:column="30">= <expr><name pos:line="6" pos:column="32">head<pos:position pos:line="6" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="37"/></init> <condition><expr><name pos:line="6" pos:column="38">node<pos:position pos:line="6" pos:column="42"/></name></expr>;<pos:position pos:line="6" pos:column="43"/></condition> <incr><expr><name pos:line="6" pos:column="44">node<pos:position pos:line="6" pos:column="48"/></name> <operator pos:line="6" pos:column="49">=<pos:position pos:line="6" pos:column="50"/></operator> <name><name pos:line="6" pos:column="51">node<pos:position pos:line="6" pos:column="55"/></name><operator pos:line="6" pos:column="55">-&gt;<pos:position pos:line="6" pos:column="60"/></operator><name pos:line="6" pos:column="57">next<pos:position pos:line="6" pos:column="61"/></name></name></expr></incr>)<pos:position pos:line="6" pos:column="62"/></control> <block pos:line="6" pos:column="63">{

        <decl_stmt><decl><type><specifier pos:line="8" pos:column="9">const<pos:position pos:line="8" pos:column="14"/></specifier> <name pos:line="8" pos:column="15">NodeMatchingResult<pos:position pos:line="8" pos:column="33"/></name></type> <name pos:line="8" pos:column="34">resultBeforeAsync<pos:position pos:line="8" pos:column="51"/></name> <init pos:line="8" pos:column="52">= <expr><call><name pos:line="8" pos:column="54">matchNode<pos:position pos:line="8" pos:column="63"/></name><argument_list pos:line="8" pos:column="63">(<argument><expr><operator pos:line="8" pos:column="64">*<pos:position pos:line="8" pos:column="65"/></operator><name pos:line="8" pos:column="65">node<pos:position pos:line="8" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="71">fast<pos:position pos:line="8" pos:column="75"/></name></expr></argument>)<pos:position pos:line="8" pos:column="76"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="77"/></decl_stmt>

        <if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">resultBeforeAsync<pos:position pos:line="10" pos:column="30"/></name> <operator pos:line="10" pos:column="31">==<pos:position pos:line="10" pos:column="33"/></operator> <name pos:line="10" pos:column="34">nmrMatch<pos:position pos:line="10" pos:column="42"/></name></expr>)<pos:position pos:line="10" pos:column="43"/></condition><then pos:line="10" pos:column="43">
            <block type="pseudo"><continue pos:line="11" pos:column="13">continue;<pos:position pos:line="11" pos:column="22"/></continue></block></then></if>

        <if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">resultBeforeAsync<pos:position pos:line="13" pos:column="30"/></name> <operator pos:line="13" pos:column="31">==<pos:position pos:line="13" pos:column="33"/></operator> <name pos:line="13" pos:column="34">nmrMismatch<pos:position pos:line="13" pos:column="45"/></name> <operator pos:line="13" pos:column="46">||<pos:position pos:line="13" pos:column="48"/></operator> <name pos:line="13" pos:column="49">resultBeforeAsync<pos:position pos:line="13" pos:column="66"/></name> <operator pos:line="13" pos:column="67">==<pos:position pos:line="13" pos:column="69"/></operator> <name pos:line="13" pos:column="70">nmrFinished<pos:position pos:line="13" pos:column="81"/></name></expr>)<pos:position pos:line="13" pos:column="82"/></condition><then pos:line="13" pos:column="82">
            <block type="pseudo"><return pos:line="14" pos:column="13">return <expr><literal type="boolean" pos:line="14" pos:column="20">false<pos:position pos:line="14" pos:column="25"/></literal></expr>;<pos:position pos:line="14" pos:column="26"/></return></block></then></if>

        <expr_stmt><expr><call><name pos:line="16" pos:column="9">assert<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><name pos:line="16" pos:column="16">resultBeforeAsync<pos:position pos:line="16" pos:column="33"/></name> <operator pos:line="16" pos:column="34">==<pos:position pos:line="16" pos:column="36"/></operator> <name pos:line="16" pos:column="37">nmrNeedsAsync<pos:position pos:line="16" pos:column="50"/></name></expr></argument>)<pos:position pos:line="16" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="52"/></expr_stmt>

        <comment type="line" pos:line="18" pos:column="9">// Ideally, this should be inside match() itself, but that requires</comment>
        <comment type="line" pos:line="19" pos:column="9">// prohibiting slow ACLs in options that do not support them.</comment>
        <comment type="line" pos:line="20" pos:column="9">// TODO: rename to maybeStartAsync()?</comment>
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">checkForAsync<pos:position pos:line="21" pos:column="22"/></name><argument_list pos:line="21" pos:column="22">()<pos:position pos:line="21" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="25"/></expr_stmt>

        <comment type="line" pos:line="23" pos:column="9">// Some match() code claims that an async lookup is needed, but then</comment>
        <comment type="line" pos:line="24" pos:column="9">// fails to start an async lookup when given a chance. We catch such</comment>
        <comment type="line" pos:line="25" pos:column="9">// cases here and call matchNode() again, hoping that some cached data</comment>
        <comment type="line" pos:line="26" pos:column="9">// prevents us from going async again.</comment>
        <comment type="line" pos:line="27" pos:column="9">// This is inefficient and ugly, but fixing all match() code, including</comment>
        <comment type="line" pos:line="28" pos:column="9">// the code it calls, such as ipcache_nbgethostbyname(), takes time.</comment>
        <if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><operator pos:line="29" pos:column="13">!<pos:position pos:line="29" pos:column="14"/></operator><call><name pos:line="29" pos:column="14">asyncInProgress<pos:position pos:line="29" pos:column="29"/></name><argument_list pos:line="29" pos:column="29">()<pos:position pos:line="29" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="32"/></condition><then pos:line="29" pos:column="32"> <block pos:line="29" pos:column="33">{ <comment type="line" pos:line="29" pos:column="35">// failed to start an async operation</comment>

            <if pos:line="31" pos:column="13">if <condition pos:line="31" pos:column="16">(<expr><call><name pos:line="31" pos:column="17">finished<pos:position pos:line="31" pos:column="25"/></name><argument_list pos:line="31" pos:column="25">()<pos:position pos:line="31" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="28"/></condition><then pos:line="31" pos:column="28"> <block pos:line="31" pos:column="29">{
                <expr_stmt><expr><call><name pos:line="32" pos:column="17">debugs<pos:position pos:line="32" pos:column="23"/></name><argument_list pos:line="32" pos:column="23">(<argument><expr><literal type="number" pos:line="32" pos:column="24">28<pos:position pos:line="32" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="28">3<pos:position pos:line="32" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="31">HERE<pos:position pos:line="32" pos:column="35"/></name> <operator pos:line="32" pos:column="36">&lt;&lt;<pos:position pos:line="32" pos:column="44"/></operator> <name pos:line="32" pos:column="39">this<pos:position pos:line="32" pos:column="43"/></name> <operator pos:line="32" pos:column="44">&lt;&lt;<pos:position pos:line="32" pos:column="52"/></operator> <literal type="string" pos:line="32" pos:column="47">" finished after failing to go async: "<pos:position pos:line="32" pos:column="86"/></literal> <operator pos:line="32" pos:column="87">&lt;&lt;<pos:position pos:line="32" pos:column="95"/></operator> <call><name pos:line="32" pos:column="90">currentAnswer<pos:position pos:line="32" pos:column="103"/></name><argument_list pos:line="32" pos:column="103">()<pos:position pos:line="32" pos:column="105"/></argument_list></call></expr></argument>)<pos:position pos:line="32" pos:column="106"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="107"/></expr_stmt>
                <return pos:line="33" pos:column="17">return <expr><literal type="boolean" pos:line="33" pos:column="24">false<pos:position pos:line="33" pos:column="29"/></literal></expr>;<pos:position pos:line="33" pos:column="30"/></return> <comment type="line" pos:line="33" pos:column="31">// an exceptional case</comment>
            }<pos:position pos:line="34" pos:column="14"/></block></then></if>

            <decl_stmt><decl><type><specifier pos:line="36" pos:column="13">const<pos:position pos:line="36" pos:column="18"/></specifier> <name pos:line="36" pos:column="19">NodeMatchingResult<pos:position pos:line="36" pos:column="37"/></name></type> <name pos:line="36" pos:column="38">resultAfterAsync<pos:position pos:line="36" pos:column="54"/></name> <init pos:line="36" pos:column="55">= <expr><call><name pos:line="36" pos:column="57">matchNode<pos:position pos:line="36" pos:column="66"/></name><argument_list pos:line="36" pos:column="66">(<argument><expr><operator pos:line="36" pos:column="67">*<pos:position pos:line="36" pos:column="68"/></operator><name pos:line="36" pos:column="68">node<pos:position pos:line="36" pos:column="72"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="36" pos:column="74">true<pos:position pos:line="36" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="79"/></argument_list></call></expr></init></decl>;<pos:position pos:line="36" pos:column="80"/></decl_stmt>
            <comment type="line" pos:line="37" pos:column="13">// the second call disables slow checks so we cannot go async again</comment>
            <expr_stmt><expr><call><name pos:line="38" pos:column="13">assert<pos:position pos:line="38" pos:column="19"/></name><argument_list pos:line="38" pos:column="19">(<argument><expr><name pos:line="38" pos:column="20">resultAfterAsync<pos:position pos:line="38" pos:column="36"/></name> <operator pos:line="38" pos:column="37">!=<pos:position pos:line="38" pos:column="39"/></operator> <name pos:line="38" pos:column="40">nmrNeedsAsync<pos:position pos:line="38" pos:column="53"/></name></expr></argument>)<pos:position pos:line="38" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="55"/></expr_stmt>
            <if pos:line="39" pos:column="13">if <condition pos:line="39" pos:column="16">(<expr><name pos:line="39" pos:column="17">resultAfterAsync<pos:position pos:line="39" pos:column="33"/></name> <operator pos:line="39" pos:column="34">==<pos:position pos:line="39" pos:column="36"/></operator> <name pos:line="39" pos:column="37">nmrMatch<pos:position pos:line="39" pos:column="45"/></name></expr>)<pos:position pos:line="39" pos:column="46"/></condition><then pos:line="39" pos:column="46">
                <block type="pseudo"><continue pos:line="40" pos:column="17">continue;<pos:position pos:line="40" pos:column="26"/></continue></block></then></if>

            <expr_stmt><expr><call><name pos:line="42" pos:column="13">assert<pos:position pos:line="42" pos:column="19"/></name><argument_list pos:line="42" pos:column="19">(<argument><expr><name pos:line="42" pos:column="20">resultAfterAsync<pos:position pos:line="42" pos:column="36"/></name> <operator pos:line="42" pos:column="37">==<pos:position pos:line="42" pos:column="39"/></operator> <name pos:line="42" pos:column="40">nmrMismatch<pos:position pos:line="42" pos:column="51"/></name> <operator pos:line="42" pos:column="52">||<pos:position pos:line="42" pos:column="54"/></operator> <name pos:line="42" pos:column="55">resultAfterAsync<pos:position pos:line="42" pos:column="71"/></name> <operator pos:line="42" pos:column="72">==<pos:position pos:line="42" pos:column="74"/></operator> <name pos:line="42" pos:column="75">nmrFinished<pos:position pos:line="42" pos:column="86"/></name></expr></argument>)<pos:position pos:line="42" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="88"/></expr_stmt>
            <return pos:line="43" pos:column="13">return <expr><literal type="boolean" pos:line="43" pos:column="20">false<pos:position pos:line="43" pos:column="25"/></literal></expr>;<pos:position pos:line="43" pos:column="26"/></return>
        }<pos:position pos:line="44" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="46" pos:column="9">assert<pos:position pos:line="46" pos:column="15"/></name><argument_list pos:line="46" pos:column="15">(<argument><expr><operator pos:line="46" pos:column="16">!<pos:position pos:line="46" pos:column="17"/></operator><call><name pos:line="46" pos:column="17">finished<pos:position pos:line="46" pos:column="25"/></name><argument_list pos:line="46" pos:column="25">()<pos:position pos:line="46" pos:column="27"/></argument_list></call></expr></argument>)<pos:position pos:line="46" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="29"/></expr_stmt> <comment type="line" pos:line="46" pos:column="30">// async operation is truly asynchronous</comment>
        <expr_stmt><expr><call><name pos:line="47" pos:column="9">debugs<pos:position pos:line="47" pos:column="15"/></name><argument_list pos:line="47" pos:column="15">(<argument><expr><literal type="number" pos:line="47" pos:column="16">28<pos:position pos:line="47" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="20">3<pos:position pos:line="47" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="23">HERE<pos:position pos:line="47" pos:column="27"/></name> <operator pos:line="47" pos:column="28">&lt;&lt;<pos:position pos:line="47" pos:column="36"/></operator> <name pos:line="47" pos:column="31">this<pos:position pos:line="47" pos:column="35"/></name> <operator pos:line="47" pos:column="36">&lt;&lt;<pos:position pos:line="47" pos:column="44"/></operator> <literal type="string" pos:line="47" pos:column="39">" awaiting async operation"<pos:position pos:line="47" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="68"/></expr_stmt>
        <return pos:line="48" pos:column="9">return <expr><literal type="boolean" pos:line="48" pos:column="16">false<pos:position pos:line="48" pos:column="21"/></literal></expr>;<pos:position pos:line="48" pos:column="22"/></return>
    }<pos:position pos:line="49" pos:column="6"/></block></for>

    <expr_stmt><expr><call><name pos:line="51" pos:column="5">debugs<pos:position pos:line="51" pos:column="11"/></name><argument_list pos:line="51" pos:column="11">(<argument><expr><literal type="number" pos:line="51" pos:column="12">28<pos:position pos:line="51" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="51" pos:column="16">3<pos:position pos:line="51" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="51" pos:column="19">HERE<pos:position pos:line="51" pos:column="23"/></name> <operator pos:line="51" pos:column="24">&lt;&lt;<pos:position pos:line="51" pos:column="32"/></operator> <name pos:line="51" pos:column="27">this<pos:position pos:line="51" pos:column="31"/></name> <operator pos:line="51" pos:column="32">&lt;&lt;<pos:position pos:line="51" pos:column="40"/></operator> <literal type="string" pos:line="51" pos:column="35">" success: all ACLs matched"<pos:position pos:line="51" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="65"/></expr_stmt>
    <return pos:line="52" pos:column="5">return <expr><literal type="boolean" pos:line="52" pos:column="12">true<pos:position pos:line="52" pos:column="16"/></literal></expr>;<pos:position pos:line="52" pos:column="17"/></return>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
