<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7145_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ipc<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">StoreMap<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">visitVictims<pos:position pos:line="2" pos:column="28"/></name></name><parameter_list pos:line="2" pos:column="28">(<parameter><decl><type><specifier pos:line="2" pos:column="29">const<pos:position pos:line="2" pos:column="34"/></specifier> <name pos:line="2" pos:column="35">NameFilter<pos:position pos:line="2" pos:column="45"/></name></type> <name pos:line="2" pos:column="46">visitor<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="54"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// Hopefully, we find a usable entry much sooner (TODO: use time?).</comment>
    <comment type="line" pos:line="5" pos:column="5">// The min() will protect us from division by zero inside the loop.</comment>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">int<pos:position pos:line="6" pos:column="14"/></name></type> <name pos:line="6" pos:column="15">searchLimit<pos:position pos:line="6" pos:column="26"/></name> <init pos:line="6" pos:column="27">= <expr><call><name pos:line="6" pos:column="29">min<pos:position pos:line="6" pos:column="32"/></name><argument_list pos:line="6" pos:column="32">(<argument><expr><literal type="number" pos:line="6" pos:column="33">10000<pos:position pos:line="6" pos:column="38"/></literal></expr></argument>, <argument><expr><call><name pos:line="6" pos:column="40">entryLimit<pos:position pos:line="6" pos:column="50"/></name><argument_list pos:line="6" pos:column="50">()<pos:position pos:line="6" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="54"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">tries<pos:position pos:line="7" pos:column="14"/></name> <init pos:line="7" pos:column="15">= <expr><literal type="number" pos:line="7" pos:column="17">0<pos:position pos:line="7" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="19"/></decl_stmt>
    <for pos:line="8" pos:column="5">for <control pos:line="8" pos:column="9">(<init pos:line="8" pos:column="10">;<pos:position pos:line="8" pos:column="11"/></init> <condition><expr><name pos:line="8" pos:column="12">tries<pos:position pos:line="8" pos:column="17"/></name> <operator pos:line="8" pos:column="18">&lt;<pos:position pos:line="8" pos:column="22"/></operator> <name pos:line="8" pos:column="20">searchLimit<pos:position pos:line="8" pos:column="31"/></name></expr>;<pos:position pos:line="8" pos:column="32"/></condition> <incr><expr><operator pos:line="8" pos:column="33">++<pos:position pos:line="8" pos:column="35"/></operator><name pos:line="8" pos:column="35">tries<pos:position pos:line="8" pos:column="40"/></name></expr></incr>)<pos:position pos:line="8" pos:column="41"/></control> <block pos:line="8" pos:column="42">{
        <decl_stmt><decl><type><specifier pos:line="9" pos:column="9">const<pos:position pos:line="9" pos:column="14"/></specifier> <name pos:line="9" pos:column="15">sfileno<pos:position pos:line="9" pos:column="22"/></name></type> <name pos:line="9" pos:column="23">name<pos:position pos:line="9" pos:column="27"/></name> <init pos:line="9" pos:column="28">= <expr><cast type="static" pos:line="9" pos:column="30">static_cast<argument_list type="generic" pos:line="9" pos:column="41">&lt;<argument><expr><name pos:line="9" pos:column="42">sfileno<pos:position pos:line="9" pos:column="49"/></name></expr></argument>&gt;<pos:position pos:line="9" pos:column="53"/></argument_list><argument_list pos:line="9" pos:column="50">(<argument><expr><operator pos:line="9" pos:column="51">++<pos:position pos:line="9" pos:column="53"/></operator><name><name pos:line="9" pos:column="53">anchors<pos:position pos:line="9" pos:column="60"/></name><operator pos:line="9" pos:column="60">-&gt;<pos:position pos:line="9" pos:column="65"/></operator><name pos:line="9" pos:column="62">victim<pos:position pos:line="9" pos:column="68"/></name></name> <operator pos:line="9" pos:column="69">%<pos:position pos:line="9" pos:column="70"/></operator> <call><name pos:line="9" pos:column="71">entryLimit<pos:position pos:line="9" pos:column="81"/></name><argument_list pos:line="9" pos:column="81">()<pos:position pos:line="9" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="84"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="9" pos:column="85"/></decl_stmt>
        <if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><call><name pos:line="10" pos:column="13">visitor<pos:position pos:line="10" pos:column="20"/></name><argument_list pos:line="10" pos:column="20">(<argument><expr><name pos:line="10" pos:column="21">name<pos:position pos:line="10" pos:column="25"/></name></expr></argument>)<pos:position pos:line="10" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="27"/></condition><then pos:line="10" pos:column="27">
            <block type="pseudo"><return pos:line="11" pos:column="13">return <expr><literal type="boolean" pos:line="11" pos:column="20">true<pos:position pos:line="11" pos:column="24"/></literal></expr>;<pos:position pos:line="11" pos:column="25"/></return></block></then></if>
    }<pos:position pos:line="12" pos:column="6"/></block></for>

    <expr_stmt><expr><call><name pos:line="14" pos:column="5">debugs<pos:position pos:line="14" pos:column="11"/></name><argument_list pos:line="14" pos:column="11">(<argument><expr><literal type="number" pos:line="14" pos:column="12">54<pos:position pos:line="14" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="16">5<pos:position pos:line="14" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="19">"no victims found in "<pos:position pos:line="14" pos:column="41"/></literal> <operator pos:line="14" pos:column="42">&lt;&lt;<pos:position pos:line="14" pos:column="50"/></operator> <name pos:line="14" pos:column="45">path<pos:position pos:line="14" pos:column="49"/></name> <operator pos:line="14" pos:column="50">&lt;&lt;<pos:position pos:line="14" pos:column="58"/></operator> <literal type="string" pos:line="14" pos:column="53">"; tried: "<pos:position pos:line="14" pos:column="64"/></literal> <operator pos:line="14" pos:column="65">&lt;&lt;<pos:position pos:line="14" pos:column="73"/></operator> <name pos:line="14" pos:column="68">tries<pos:position pos:line="14" pos:column="73"/></name></expr></argument>)<pos:position pos:line="14" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="75"/></expr_stmt>
    <return pos:line="15" pos:column="5">return <expr><literal type="boolean" pos:line="15" pos:column="12">false<pos:position pos:line="15" pos:column="17"/></literal></expr>;<pos:position pos:line="15" pos:column="18"/></return>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
