<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1298_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HelperReply<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">parse<pos:position pos:line="2" pos:column="19"/></name></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name pos:line="2" pos:column="20">char<pos:position pos:line="2" pos:column="24"/></name> <modifier pos:line="2" pos:column="25">*<pos:position pos:line="2" pos:column="26"/></modifier></type><name pos:line="2" pos:column="26">buf<pos:position pos:line="2" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="31">size_t<pos:position pos:line="2" pos:column="37"/></name></type> <name pos:line="2" pos:column="38">len<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="42"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">84<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">3<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="19">"Parsing helper buffer"<pos:position pos:line="4" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="44"/></expr_stmt>
    <comment type="line" pos:line="5" pos:column="5">// check we have something to parse</comment>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">!<pos:position pos:line="6" pos:column="10"/></operator><name pos:line="6" pos:column="10">buf<pos:position pos:line="6" pos:column="13"/></name> <operator pos:line="6" pos:column="14">||<pos:position pos:line="6" pos:column="16"/></operator> <name pos:line="6" pos:column="17">len<pos:position pos:line="6" pos:column="20"/></name> <operator pos:line="6" pos:column="21">&lt;<pos:position pos:line="6" pos:column="25"/></operator> <literal type="number" pos:line="6" pos:column="23">1<pos:position pos:line="6" pos:column="24"/></literal></expr>)<pos:position pos:line="6" pos:column="25"/></condition><then pos:line="6" pos:column="25"> <block pos:line="6" pos:column="26">{
        <comment type="line" pos:line="7" pos:column="9">// empty line response was the old URL-rewriter interface ERR response.</comment>
        <expr_stmt><expr><name pos:line="8" pos:column="9">result<pos:position pos:line="8" pos:column="15"/></name> <operator pos:line="8" pos:column="16">=<pos:position pos:line="8" pos:column="17"/></operator> <name><name pos:line="8" pos:column="18">HelperReply<pos:position pos:line="8" pos:column="29"/></name><operator pos:line="8" pos:column="29">::<pos:position pos:line="8" pos:column="31"/></operator><name pos:line="8" pos:column="31">Error<pos:position pos:line="8" pos:column="36"/></name></name></expr>;<pos:position pos:line="8" pos:column="37"/></expr_stmt>
        <comment type="line" pos:line="9" pos:column="9">// for now ensure that legacy handlers are not presented with NULL strings.</comment>
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">debugs<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><literal type="number" pos:line="10" pos:column="16">84<pos:position pos:line="10" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="20">3<pos:position pos:line="10" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="23">"Reply length is smaller than 1 or none at all "<pos:position pos:line="10" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="73"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="11" pos:column="9">other_<pos:position pos:line="11" pos:column="15"/></name><operator pos:line="11" pos:column="15">.<pos:position pos:line="11" pos:column="16"/></operator><name pos:line="11" pos:column="16">init<pos:position pos:line="11" pos:column="20"/></name></name><argument_list pos:line="11" pos:column="20">(<argument><expr><literal type="number" pos:line="11" pos:column="21">1<pos:position pos:line="11" pos:column="22"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="11" pos:column="23">1<pos:position pos:line="11" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="12" pos:column="9">other_<pos:position pos:line="12" pos:column="15"/></name><operator pos:line="12" pos:column="15">.<pos:position pos:line="12" pos:column="16"/></operator><name pos:line="12" pos:column="16">terminate<pos:position pos:line="12" pos:column="25"/></name></name><argument_list pos:line="12" pos:column="25">()<pos:position pos:line="12" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="28"/></expr_stmt>
        <return pos:line="13" pos:column="9">return;<pos:position pos:line="13" pos:column="16"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="16" pos:column="5">char<pos:position pos:line="16" pos:column="9"/></name> <modifier pos:line="16" pos:column="10">*<pos:position pos:line="16" pos:column="11"/></modifier></type><name pos:line="16" pos:column="11">p<pos:position pos:line="16" pos:column="12"/></name> <init pos:line="16" pos:column="13">= <expr><name pos:line="16" pos:column="15">buf<pos:position pos:line="16" pos:column="18"/></name></expr></init></decl>;<pos:position pos:line="16" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="17" pos:column="5">bool<pos:position pos:line="17" pos:column="9"/></name></type> <name pos:line="17" pos:column="10">sawNA<pos:position pos:line="17" pos:column="15"/></name> <init pos:line="17" pos:column="16">= <expr><literal type="boolean" pos:line="17" pos:column="18">false<pos:position pos:line="17" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="17" pos:column="24"/></decl_stmt>

    <comment type="line" pos:line="19" pos:column="5">// optimization: do not consider parsing result code if the response is short.</comment>
    <comment type="line" pos:line="20" pos:column="5">// URL-rewriter may return relative URLs or empty response for a large portion</comment>
    <comment type="line" pos:line="21" pos:column="5">// of its replies.</comment>
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><name pos:line="22" pos:column="9">len<pos:position pos:line="22" pos:column="12"/></name> <operator pos:line="22" pos:column="13">&gt;=<pos:position pos:line="22" pos:column="18"/></operator> <literal type="number" pos:line="22" pos:column="16">2<pos:position pos:line="22" pos:column="17"/></literal></expr>)<pos:position pos:line="22" pos:column="18"/></condition><then pos:line="22" pos:column="18"> <block pos:line="22" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="23" pos:column="9">debugs<pos:position pos:line="23" pos:column="15"/></name><argument_list pos:line="23" pos:column="15">(<argument><expr><literal type="number" pos:line="23" pos:column="16">84<pos:position pos:line="23" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="20">3<pos:position pos:line="23" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="23">"Buff length is larger than 2"<pos:position pos:line="23" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="55"/></expr_stmt>
        <comment type="line" pos:line="24" pos:column="9">// some helper formats (digest auth, URL-rewriter) just send a data string</comment>
        <comment type="line" pos:line="25" pos:column="9">// we must also check for the ' ' character after the response token (if anything)</comment>
        <if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><operator pos:line="26" pos:column="13">!<pos:position pos:line="26" pos:column="14"/></operator><call><name pos:line="26" pos:column="14">strncmp<pos:position pos:line="26" pos:column="21"/></name><argument_list pos:line="26" pos:column="21">(<argument><expr><name pos:line="26" pos:column="22">p<pos:position pos:line="26" pos:column="23"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="26" pos:column="24">"OK"<pos:position pos:line="26" pos:column="28"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="26" pos:column="29">2<pos:position pos:line="26" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="31"/></argument_list></call> <operator pos:line="26" pos:column="32">&amp;&amp;<pos:position pos:line="26" pos:column="42"/></operator> <operator pos:line="26" pos:column="35">(<pos:position pos:line="26" pos:column="36"/></operator><name pos:line="26" pos:column="36">len<pos:position pos:line="26" pos:column="39"/></name> <operator pos:line="26" pos:column="40">==<pos:position pos:line="26" pos:column="42"/></operator> <literal type="number" pos:line="26" pos:column="43">2<pos:position pos:line="26" pos:column="44"/></literal> <operator pos:line="26" pos:column="45">||<pos:position pos:line="26" pos:column="47"/></operator> <name><name pos:line="26" pos:column="48">p<pos:position pos:line="26" pos:column="49"/></name><index pos:line="26" pos:column="49">[<expr><literal type="number" pos:line="26" pos:column="50">2<pos:position pos:line="26" pos:column="51"/></literal></expr>]<pos:position pos:line="26" pos:column="52"/></index></name> <operator pos:line="26" pos:column="53">==<pos:position pos:line="26" pos:column="55"/></operator> <literal type="char" pos:line="26" pos:column="56">' '<pos:position pos:line="26" pos:column="59"/></literal><operator pos:line="26" pos:column="59">)<pos:position pos:line="26" pos:column="60"/></operator></expr>)<pos:position pos:line="26" pos:column="61"/></condition><then pos:line="26" pos:column="61"> <block pos:line="26" pos:column="62">{
            <expr_stmt><expr><call><name pos:line="27" pos:column="13">debugs<pos:position pos:line="27" pos:column="19"/></name><argument_list pos:line="27" pos:column="19">(<argument><expr><literal type="number" pos:line="27" pos:column="20">84<pos:position pos:line="27" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="24">3<pos:position pos:line="27" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="27">"helper Result = OK"<pos:position pos:line="27" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="49"/></expr_stmt>
            <expr_stmt><expr><name pos:line="28" pos:column="13">result<pos:position pos:line="28" pos:column="19"/></name> <operator pos:line="28" pos:column="20">=<pos:position pos:line="28" pos:column="21"/></operator> <name><name pos:line="28" pos:column="22">HelperReply<pos:position pos:line="28" pos:column="33"/></name><operator pos:line="28" pos:column="33">::<pos:position pos:line="28" pos:column="35"/></operator><name pos:line="28" pos:column="35">Okay<pos:position pos:line="28" pos:column="39"/></name></name></expr>;<pos:position pos:line="28" pos:column="40"/></expr_stmt>
            <expr_stmt><expr><name pos:line="29" pos:column="13">p<pos:position pos:line="29" pos:column="14"/></name><operator pos:line="29" pos:column="14">+=<pos:position pos:line="29" pos:column="16"/></operator><literal type="number" pos:line="29" pos:column="16">2<pos:position pos:line="29" pos:column="17"/></literal></expr>;<pos:position pos:line="29" pos:column="18"/></expr_stmt>
        }<pos:position pos:line="30" pos:column="10"/></block></then> <elseif pos:line="30" pos:column="11">else <if pos:line="30" pos:column="16">if <condition pos:line="30" pos:column="19">(<expr><operator pos:line="30" pos:column="20">!<pos:position pos:line="30" pos:column="21"/></operator><call><name pos:line="30" pos:column="21">strncmp<pos:position pos:line="30" pos:column="28"/></name><argument_list pos:line="30" pos:column="28">(<argument><expr><name pos:line="30" pos:column="29">p<pos:position pos:line="30" pos:column="30"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="30" pos:column="31">"ERR"<pos:position pos:line="30" pos:column="36"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="30" pos:column="37">3<pos:position pos:line="30" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="39"/></argument_list></call> <operator pos:line="30" pos:column="40">&amp;&amp;<pos:position pos:line="30" pos:column="50"/></operator> <operator pos:line="30" pos:column="43">(<pos:position pos:line="30" pos:column="44"/></operator><name pos:line="30" pos:column="44">len<pos:position pos:line="30" pos:column="47"/></name> <operator pos:line="30" pos:column="48">==<pos:position pos:line="30" pos:column="50"/></operator> <literal type="number" pos:line="30" pos:column="51">3<pos:position pos:line="30" pos:column="52"/></literal> <operator pos:line="30" pos:column="53">||<pos:position pos:line="30" pos:column="55"/></operator> <name><name pos:line="30" pos:column="56">p<pos:position pos:line="30" pos:column="57"/></name><index pos:line="30" pos:column="57">[<expr><literal type="number" pos:line="30" pos:column="58">3<pos:position pos:line="30" pos:column="59"/></literal></expr>]<pos:position pos:line="30" pos:column="60"/></index></name> <operator pos:line="30" pos:column="61">==<pos:position pos:line="30" pos:column="63"/></operator> <literal type="char" pos:line="30" pos:column="64">' '<pos:position pos:line="30" pos:column="67"/></literal><operator pos:line="30" pos:column="67">)<pos:position pos:line="30" pos:column="68"/></operator></expr>)<pos:position pos:line="30" pos:column="69"/></condition><then pos:line="30" pos:column="69"> <block pos:line="30" pos:column="70">{
            <expr_stmt><expr><call><name pos:line="31" pos:column="13">debugs<pos:position pos:line="31" pos:column="19"/></name><argument_list pos:line="31" pos:column="19">(<argument><expr><literal type="number" pos:line="31" pos:column="20">84<pos:position pos:line="31" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="24">3<pos:position pos:line="31" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="27">"helper Result = ERR"<pos:position pos:line="31" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="50"/></expr_stmt>
            <expr_stmt><expr><name pos:line="32" pos:column="13">result<pos:position pos:line="32" pos:column="19"/></name> <operator pos:line="32" pos:column="20">=<pos:position pos:line="32" pos:column="21"/></operator> <name><name pos:line="32" pos:column="22">HelperReply<pos:position pos:line="32" pos:column="33"/></name><operator pos:line="32" pos:column="33">::<pos:position pos:line="32" pos:column="35"/></operator><name pos:line="32" pos:column="35">Error<pos:position pos:line="32" pos:column="40"/></name></name></expr>;<pos:position pos:line="32" pos:column="41"/></expr_stmt>
            <expr_stmt><expr><name pos:line="33" pos:column="13">p<pos:position pos:line="33" pos:column="14"/></name><operator pos:line="33" pos:column="14">+=<pos:position pos:line="33" pos:column="16"/></operator><literal type="number" pos:line="33" pos:column="16">3<pos:position pos:line="33" pos:column="17"/></literal></expr>;<pos:position pos:line="33" pos:column="18"/></expr_stmt>
        }<pos:position pos:line="34" pos:column="10"/></block></then></if></elseif> <elseif pos:line="34" pos:column="11">else <if pos:line="34" pos:column="16">if <condition pos:line="34" pos:column="19">(<expr><operator pos:line="34" pos:column="20">!<pos:position pos:line="34" pos:column="21"/></operator><call><name pos:line="34" pos:column="21">strncmp<pos:position pos:line="34" pos:column="28"/></name><argument_list pos:line="34" pos:column="28">(<argument><expr><name pos:line="34" pos:column="29">p<pos:position pos:line="34" pos:column="30"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="34" pos:column="31">"BH"<pos:position pos:line="34" pos:column="35"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="34" pos:column="36">2<pos:position pos:line="34" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="38"/></argument_list></call> <operator pos:line="34" pos:column="39">&amp;&amp;<pos:position pos:line="34" pos:column="49"/></operator> <operator pos:line="34" pos:column="42">(<pos:position pos:line="34" pos:column="43"/></operator><name pos:line="34" pos:column="43">len<pos:position pos:line="34" pos:column="46"/></name> <operator pos:line="34" pos:column="47">==<pos:position pos:line="34" pos:column="49"/></operator> <literal type="number" pos:line="34" pos:column="50">2<pos:position pos:line="34" pos:column="51"/></literal> <operator pos:line="34" pos:column="52">||<pos:position pos:line="34" pos:column="54"/></operator> <name><name pos:line="34" pos:column="55">p<pos:position pos:line="34" pos:column="56"/></name><index pos:line="34" pos:column="56">[<expr><literal type="number" pos:line="34" pos:column="57">2<pos:position pos:line="34" pos:column="58"/></literal></expr>]<pos:position pos:line="34" pos:column="59"/></index></name> <operator pos:line="34" pos:column="60">==<pos:position pos:line="34" pos:column="62"/></operator> <literal type="char" pos:line="34" pos:column="63">' '<pos:position pos:line="34" pos:column="66"/></literal><operator pos:line="34" pos:column="66">)<pos:position pos:line="34" pos:column="67"/></operator></expr>)<pos:position pos:line="34" pos:column="68"/></condition><then pos:line="34" pos:column="68"> <block pos:line="34" pos:column="69">{
            <expr_stmt><expr><call><name pos:line="35" pos:column="13">debugs<pos:position pos:line="35" pos:column="19"/></name><argument_list pos:line="35" pos:column="19">(<argument><expr><literal type="number" pos:line="35" pos:column="20">84<pos:position pos:line="35" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="24">3<pos:position pos:line="35" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="27">"helper Result = BH"<pos:position pos:line="35" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="49"/></expr_stmt>
            <expr_stmt><expr><name pos:line="36" pos:column="13">result<pos:position pos:line="36" pos:column="19"/></name> <operator pos:line="36" pos:column="20">=<pos:position pos:line="36" pos:column="21"/></operator> <name><name pos:line="36" pos:column="22">HelperReply<pos:position pos:line="36" pos:column="33"/></name><operator pos:line="36" pos:column="33">::<pos:position pos:line="36" pos:column="35"/></operator><name pos:line="36" pos:column="35">BrokenHelper<pos:position pos:line="36" pos:column="47"/></name></name></expr>;<pos:position pos:line="36" pos:column="48"/></expr_stmt>
            <expr_stmt><expr><name pos:line="37" pos:column="13">p<pos:position pos:line="37" pos:column="14"/></name><operator pos:line="37" pos:column="14">+=<pos:position pos:line="37" pos:column="16"/></operator><literal type="number" pos:line="37" pos:column="16">2<pos:position pos:line="37" pos:column="17"/></literal></expr>;<pos:position pos:line="37" pos:column="18"/></expr_stmt>
        }<pos:position pos:line="38" pos:column="10"/></block></then></if></elseif> <elseif pos:line="38" pos:column="11">else <if pos:line="38" pos:column="16">if <condition pos:line="38" pos:column="19">(<expr><operator pos:line="38" pos:column="20">!<pos:position pos:line="38" pos:column="21"/></operator><call><name pos:line="38" pos:column="21">strncmp<pos:position pos:line="38" pos:column="28"/></name><argument_list pos:line="38" pos:column="28">(<argument><expr><name pos:line="38" pos:column="29">p<pos:position pos:line="38" pos:column="30"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="38" pos:column="31">"TT "<pos:position pos:line="38" pos:column="36"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="38" pos:column="37">3<pos:position pos:line="38" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="40"/></condition><then pos:line="38" pos:column="40"> <block pos:line="38" pos:column="41">{
            <comment type="line" pos:line="39" pos:column="13">// NTLM challenge token</comment>
            <expr_stmt><expr><name pos:line="40" pos:column="13">result<pos:position pos:line="40" pos:column="19"/></name> <operator pos:line="40" pos:column="20">=<pos:position pos:line="40" pos:column="21"/></operator> <name><name pos:line="40" pos:column="22">HelperReply<pos:position pos:line="40" pos:column="33"/></name><operator pos:line="40" pos:column="33">::<pos:position pos:line="40" pos:column="35"/></operator><name pos:line="40" pos:column="35">TT<pos:position pos:line="40" pos:column="37"/></name></name></expr>;<pos:position pos:line="40" pos:column="38"/></expr_stmt>
            <expr_stmt><expr><name pos:line="41" pos:column="13">p<pos:position pos:line="41" pos:column="14"/></name><operator pos:line="41" pos:column="14">+=<pos:position pos:line="41" pos:column="16"/></operator><literal type="number" pos:line="41" pos:column="16">3<pos:position pos:line="41" pos:column="17"/></literal></expr>;<pos:position pos:line="41" pos:column="18"/></expr_stmt>
            <comment type="line" pos:line="42" pos:column="13">// followed by an auth token</comment>
            <decl_stmt><decl><type><name pos:line="43" pos:column="13">char<pos:position pos:line="43" pos:column="17"/></name> <modifier pos:line="43" pos:column="18">*<pos:position pos:line="43" pos:column="19"/></modifier></type><name pos:line="43" pos:column="19">w1<pos:position pos:line="43" pos:column="21"/></name> <init pos:line="43" pos:column="22">= <expr><call><name pos:line="43" pos:column="24">strwordtok<pos:position pos:line="43" pos:column="34"/></name><argument_list pos:line="43" pos:column="34">(<argument><expr><name pos:line="43" pos:column="35">NULL<pos:position pos:line="43" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="41">&amp;<pos:position pos:line="43" pos:column="46"/></operator><name pos:line="43" pos:column="42">p<pos:position pos:line="43" pos:column="43"/></name></expr></argument>)<pos:position pos:line="43" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="43" pos:column="45"/></decl_stmt>
            <if pos:line="44" pos:column="13">if <condition pos:line="44" pos:column="16">(<expr><name pos:line="44" pos:column="17">w1<pos:position pos:line="44" pos:column="19"/></name> <operator pos:line="44" pos:column="20">!=<pos:position pos:line="44" pos:column="22"/></operator> <name pos:line="44" pos:column="23">NULL<pos:position pos:line="44" pos:column="27"/></name></expr>)<pos:position pos:line="44" pos:column="28"/></condition><then pos:line="44" pos:column="28"> <block pos:line="44" pos:column="29">{
                <decl_stmt><decl><type><name pos:line="45" pos:column="17">MemBuf<pos:position pos:line="45" pos:column="23"/></name></type> <name pos:line="45" pos:column="24">authToken<pos:position pos:line="45" pos:column="33"/></name></decl>;<pos:position pos:line="45" pos:column="34"/></decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="46" pos:column="17">authToken<pos:position pos:line="46" pos:column="26"/></name><operator pos:line="46" pos:column="26">.<pos:position pos:line="46" pos:column="27"/></operator><name pos:line="46" pos:column="27">init<pos:position pos:line="46" pos:column="31"/></name></name><argument_list pos:line="46" pos:column="31">()<pos:position pos:line="46" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="34"/></expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="47" pos:column="17">authToken<pos:position pos:line="47" pos:column="26"/></name><operator pos:line="47" pos:column="26">.<pos:position pos:line="47" pos:column="27"/></operator><name pos:line="47" pos:column="27">append<pos:position pos:line="47" pos:column="33"/></name></name><argument_list pos:line="47" pos:column="33">(<argument><expr><name pos:line="47" pos:column="34">w1<pos:position pos:line="47" pos:column="36"/></name></expr></argument>, <argument><expr><call><name pos:line="47" pos:column="38">strlen<pos:position pos:line="47" pos:column="44"/></name><argument_list pos:line="47" pos:column="44">(<argument><expr><name pos:line="47" pos:column="45">w1<pos:position pos:line="47" pos:column="47"/></name></expr></argument>)<pos:position pos:line="47" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="47" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="50"/></expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="48" pos:column="17">notes<pos:position pos:line="48" pos:column="22"/></name><operator pos:line="48" pos:column="22">.<pos:position pos:line="48" pos:column="23"/></operator><name pos:line="48" pos:column="23">add<pos:position pos:line="48" pos:column="26"/></name></name><argument_list pos:line="48" pos:column="26">(<argument><expr><literal type="string" pos:line="48" pos:column="27">"token"<pos:position pos:line="48" pos:column="34"/></literal></expr></argument>,<argument><expr><call><name><name pos:line="48" pos:column="35">authToken<pos:position pos:line="48" pos:column="44"/></name><operator pos:line="48" pos:column="44">.<pos:position pos:line="48" pos:column="45"/></operator><name pos:line="48" pos:column="45">content<pos:position pos:line="48" pos:column="52"/></name></name><argument_list pos:line="48" pos:column="52">()<pos:position pos:line="48" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="48" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="56"/></expr_stmt>
            }<pos:position pos:line="49" pos:column="14"/></block></then> <else pos:line="49" pos:column="15">else <block pos:line="49" pos:column="20">{
                <comment type="line" pos:line="50" pos:column="17">// token field is mandatory on this response code</comment>
                <expr_stmt><expr><name pos:line="51" pos:column="17">result<pos:position pos:line="51" pos:column="23"/></name> <operator pos:line="51" pos:column="24">=<pos:position pos:line="51" pos:column="25"/></operator> <name><name pos:line="51" pos:column="26">HelperReply<pos:position pos:line="51" pos:column="37"/></name><operator pos:line="51" pos:column="37">::<pos:position pos:line="51" pos:column="39"/></operator><name pos:line="51" pos:column="39">BrokenHelper<pos:position pos:line="51" pos:column="51"/></name></name></expr>;<pos:position pos:line="51" pos:column="52"/></expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="52" pos:column="17">notes<pos:position pos:line="52" pos:column="22"/></name><operator pos:line="52" pos:column="22">.<pos:position pos:line="52" pos:column="23"/></operator><name pos:line="52" pos:column="23">add<pos:position pos:line="52" pos:column="26"/></name></name><argument_list pos:line="52" pos:column="26">(<argument><expr><literal type="string" pos:line="52" pos:column="27">"message"<pos:position pos:line="52" pos:column="36"/></literal></expr></argument>,<argument><expr><literal type="string" pos:line="52" pos:column="37">"Missing 'token' data"<pos:position pos:line="52" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="61"/></expr_stmt>
            }<pos:position pos:line="53" pos:column="14"/></block></else></if>

        }<pos:position pos:line="55" pos:column="10"/></block></then></if></elseif> <elseif pos:line="55" pos:column="11">else <if pos:line="55" pos:column="16">if <condition pos:line="55" pos:column="19">(<expr><operator pos:line="55" pos:column="20">!<pos:position pos:line="55" pos:column="21"/></operator><call><name pos:line="55" pos:column="21">strncmp<pos:position pos:line="55" pos:column="28"/></name><argument_list pos:line="55" pos:column="28">(<argument><expr><name pos:line="55" pos:column="29">p<pos:position pos:line="55" pos:column="30"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="55" pos:column="31">"AF "<pos:position pos:line="55" pos:column="36"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="55" pos:column="37">3<pos:position pos:line="55" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="40"/></condition><then pos:line="55" pos:column="40"> <block pos:line="55" pos:column="41">{
            <comment type="line" pos:line="56" pos:column="13">// NTLM/Negotate OK response</comment>
            <expr_stmt><expr><name pos:line="57" pos:column="13">result<pos:position pos:line="57" pos:column="19"/></name> <operator pos:line="57" pos:column="20">=<pos:position pos:line="57" pos:column="21"/></operator> <name><name pos:line="57" pos:column="22">HelperReply<pos:position pos:line="57" pos:column="33"/></name><operator pos:line="57" pos:column="33">::<pos:position pos:line="57" pos:column="35"/></operator><name pos:line="57" pos:column="35">Okay<pos:position pos:line="57" pos:column="39"/></name></name></expr>;<pos:position pos:line="57" pos:column="40"/></expr_stmt>
            <expr_stmt><expr><name pos:line="58" pos:column="13">p<pos:position pos:line="58" pos:column="14"/></name><operator pos:line="58" pos:column="14">+=<pos:position pos:line="58" pos:column="16"/></operator><literal type="number" pos:line="58" pos:column="16">3<pos:position pos:line="58" pos:column="17"/></literal></expr>;<pos:position pos:line="58" pos:column="18"/></expr_stmt>
            <comment type="line" pos:line="59" pos:column="13">// followed by:</comment>
            <comment type="line" pos:line="60" pos:column="13">//  an optional auth token and user field</comment>
            <comment type="line" pos:line="61" pos:column="13">// or, an optional username field</comment>
            <decl_stmt><decl><type><name pos:line="62" pos:column="13">char<pos:position pos:line="62" pos:column="17"/></name> <modifier pos:line="62" pos:column="18">*<pos:position pos:line="62" pos:column="19"/></modifier></type><name pos:line="62" pos:column="19">w1<pos:position pos:line="62" pos:column="21"/></name> <init pos:line="62" pos:column="22">= <expr><call><name pos:line="62" pos:column="24">strwordtok<pos:position pos:line="62" pos:column="34"/></name><argument_list pos:line="62" pos:column="34">(<argument><expr><name pos:line="62" pos:column="35">NULL<pos:position pos:line="62" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="62" pos:column="41">&amp;<pos:position pos:line="62" pos:column="46"/></operator><name pos:line="62" pos:column="42">p<pos:position pos:line="62" pos:column="43"/></name></expr></argument>)<pos:position pos:line="62" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="62" pos:column="45"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="63" pos:column="13">char<pos:position pos:line="63" pos:column="17"/></name> <modifier pos:line="63" pos:column="18">*<pos:position pos:line="63" pos:column="19"/></modifier></type><name pos:line="63" pos:column="19">w2<pos:position pos:line="63" pos:column="21"/></name> <init pos:line="63" pos:column="22">= <expr><call><name pos:line="63" pos:column="24">strwordtok<pos:position pos:line="63" pos:column="34"/></name><argument_list pos:line="63" pos:column="34">(<argument><expr><name pos:line="63" pos:column="35">NULL<pos:position pos:line="63" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="63" pos:column="41">&amp;<pos:position pos:line="63" pos:column="46"/></operator><name pos:line="63" pos:column="42">p<pos:position pos:line="63" pos:column="43"/></name></expr></argument>)<pos:position pos:line="63" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="63" pos:column="45"/></decl_stmt>
            <if pos:line="64" pos:column="13">if <condition pos:line="64" pos:column="16">(<expr><name pos:line="64" pos:column="17">w2<pos:position pos:line="64" pos:column="19"/></name> <operator pos:line="64" pos:column="20">!=<pos:position pos:line="64" pos:column="22"/></operator> <name pos:line="64" pos:column="23">NULL<pos:position pos:line="64" pos:column="27"/></name></expr>)<pos:position pos:line="64" pos:column="28"/></condition><then pos:line="64" pos:column="28"> <block pos:line="64" pos:column="29">{
                <comment type="line" pos:line="65" pos:column="17">// Negotiate "token user"</comment>
                <decl_stmt><decl><type><name pos:line="66" pos:column="17">MemBuf<pos:position pos:line="66" pos:column="23"/></name></type> <name pos:line="66" pos:column="24">authToken<pos:position pos:line="66" pos:column="33"/></name></decl>;<pos:position pos:line="66" pos:column="34"/></decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="67" pos:column="17">authToken<pos:position pos:line="67" pos:column="26"/></name><operator pos:line="67" pos:column="26">.<pos:position pos:line="67" pos:column="27"/></operator><name pos:line="67" pos:column="27">init<pos:position pos:line="67" pos:column="31"/></name></name><argument_list pos:line="67" pos:column="31">()<pos:position pos:line="67" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="34"/></expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="68" pos:column="17">authToken<pos:position pos:line="68" pos:column="26"/></name><operator pos:line="68" pos:column="26">.<pos:position pos:line="68" pos:column="27"/></operator><name pos:line="68" pos:column="27">append<pos:position pos:line="68" pos:column="33"/></name></name><argument_list pos:line="68" pos:column="33">(<argument><expr><name pos:line="68" pos:column="34">w1<pos:position pos:line="68" pos:column="36"/></name></expr></argument>, <argument><expr><call><name pos:line="68" pos:column="38">strlen<pos:position pos:line="68" pos:column="44"/></name><argument_list pos:line="68" pos:column="44">(<argument><expr><name pos:line="68" pos:column="45">w1<pos:position pos:line="68" pos:column="47"/></name></expr></argument>)<pos:position pos:line="68" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="68" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="50"/></expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="69" pos:column="17">notes<pos:position pos:line="69" pos:column="22"/></name><operator pos:line="69" pos:column="22">.<pos:position pos:line="69" pos:column="23"/></operator><name pos:line="69" pos:column="23">add<pos:position pos:line="69" pos:column="26"/></name></name><argument_list pos:line="69" pos:column="26">(<argument><expr><literal type="string" pos:line="69" pos:column="27">"token"<pos:position pos:line="69" pos:column="34"/></literal></expr></argument>,<argument><expr><call><name><name pos:line="69" pos:column="35">authToken<pos:position pos:line="69" pos:column="44"/></name><operator pos:line="69" pos:column="44">.<pos:position pos:line="69" pos:column="45"/></operator><name pos:line="69" pos:column="45">content<pos:position pos:line="69" pos:column="52"/></name></name><argument_list pos:line="69" pos:column="52">()<pos:position pos:line="69" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="69" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="56"/></expr_stmt>

                <decl_stmt><decl><type><name pos:line="71" pos:column="17">MemBuf<pos:position pos:line="71" pos:column="23"/></name></type> <name pos:line="71" pos:column="24">user<pos:position pos:line="71" pos:column="28"/></name></decl>;<pos:position pos:line="71" pos:column="29"/></decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="72" pos:column="17">user<pos:position pos:line="72" pos:column="21"/></name><operator pos:line="72" pos:column="21">.<pos:position pos:line="72" pos:column="22"/></operator><name pos:line="72" pos:column="22">init<pos:position pos:line="72" pos:column="26"/></name></name><argument_list pos:line="72" pos:column="26">()<pos:position pos:line="72" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="29"/></expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="73" pos:column="17">user<pos:position pos:line="73" pos:column="21"/></name><operator pos:line="73" pos:column="21">.<pos:position pos:line="73" pos:column="22"/></operator><name pos:line="73" pos:column="22">append<pos:position pos:line="73" pos:column="28"/></name></name><argument_list pos:line="73" pos:column="28">(<argument><expr><name pos:line="73" pos:column="29">w2<pos:position pos:line="73" pos:column="31"/></name></expr></argument>,<argument><expr><call><name pos:line="73" pos:column="32">strlen<pos:position pos:line="73" pos:column="38"/></name><argument_list pos:line="73" pos:column="38">(<argument><expr><name pos:line="73" pos:column="39">w2<pos:position pos:line="73" pos:column="41"/></name></expr></argument>)<pos:position pos:line="73" pos:column="42"/></argument_list></call></expr></argument>)<pos:position pos:line="73" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="44"/></expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="74" pos:column="17">notes<pos:position pos:line="74" pos:column="22"/></name><operator pos:line="74" pos:column="22">.<pos:position pos:line="74" pos:column="23"/></operator><name pos:line="74" pos:column="23">add<pos:position pos:line="74" pos:column="26"/></name></name><argument_list pos:line="74" pos:column="26">(<argument><expr><literal type="string" pos:line="74" pos:column="27">"user"<pos:position pos:line="74" pos:column="33"/></literal></expr></argument>,<argument><expr><call><name><name pos:line="74" pos:column="34">user<pos:position pos:line="74" pos:column="38"/></name><operator pos:line="74" pos:column="38">.<pos:position pos:line="74" pos:column="39"/></operator><name pos:line="74" pos:column="39">content<pos:position pos:line="74" pos:column="46"/></name></name><argument_list pos:line="74" pos:column="46">()<pos:position pos:line="74" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="74" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="50"/></expr_stmt>

            }<pos:position pos:line="76" pos:column="14"/></block></then> <elseif pos:line="76" pos:column="15">else <if pos:line="76" pos:column="20">if <condition pos:line="76" pos:column="23">(<expr><name pos:line="76" pos:column="24">w1<pos:position pos:line="76" pos:column="26"/></name> <operator pos:line="76" pos:column="27">!=<pos:position pos:line="76" pos:column="29"/></operator> <name pos:line="76" pos:column="30">NULL<pos:position pos:line="76" pos:column="34"/></name></expr>)<pos:position pos:line="76" pos:column="35"/></condition><then pos:line="76" pos:column="35"> <block pos:line="76" pos:column="36">{
                <comment type="line" pos:line="77" pos:column="17">// NTLM "user"</comment>
                <decl_stmt><decl><type><name pos:line="78" pos:column="17">MemBuf<pos:position pos:line="78" pos:column="23"/></name></type> <name pos:line="78" pos:column="24">user<pos:position pos:line="78" pos:column="28"/></name></decl>;<pos:position pos:line="78" pos:column="29"/></decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="79" pos:column="17">user<pos:position pos:line="79" pos:column="21"/></name><operator pos:line="79" pos:column="21">.<pos:position pos:line="79" pos:column="22"/></operator><name pos:line="79" pos:column="22">init<pos:position pos:line="79" pos:column="26"/></name></name><argument_list pos:line="79" pos:column="26">()<pos:position pos:line="79" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="29"/></expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="80" pos:column="17">user<pos:position pos:line="80" pos:column="21"/></name><operator pos:line="80" pos:column="21">.<pos:position pos:line="80" pos:column="22"/></operator><name pos:line="80" pos:column="22">append<pos:position pos:line="80" pos:column="28"/></name></name><argument_list pos:line="80" pos:column="28">(<argument><expr><name pos:line="80" pos:column="29">w1<pos:position pos:line="80" pos:column="31"/></name></expr></argument>,<argument><expr><call><name pos:line="80" pos:column="32">strlen<pos:position pos:line="80" pos:column="38"/></name><argument_list pos:line="80" pos:column="38">(<argument><expr><name pos:line="80" pos:column="39">w1<pos:position pos:line="80" pos:column="41"/></name></expr></argument>)<pos:position pos:line="80" pos:column="42"/></argument_list></call></expr></argument>)<pos:position pos:line="80" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="44"/></expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="81" pos:column="17">notes<pos:position pos:line="81" pos:column="22"/></name><operator pos:line="81" pos:column="22">.<pos:position pos:line="81" pos:column="23"/></operator><name pos:line="81" pos:column="23">add<pos:position pos:line="81" pos:column="26"/></name></name><argument_list pos:line="81" pos:column="26">(<argument><expr><literal type="string" pos:line="81" pos:column="27">"user"<pos:position pos:line="81" pos:column="33"/></literal></expr></argument>,<argument><expr><call><name><name pos:line="81" pos:column="34">user<pos:position pos:line="81" pos:column="38"/></name><operator pos:line="81" pos:column="38">.<pos:position pos:line="81" pos:column="39"/></operator><name pos:line="81" pos:column="39">content<pos:position pos:line="81" pos:column="46"/></name></name><argument_list pos:line="81" pos:column="46">()<pos:position pos:line="81" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="81" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="50"/></expr_stmt>
            }<pos:position pos:line="82" pos:column="14"/></block></then></if></elseif></if>
        }<pos:position pos:line="83" pos:column="10"/></block></then></if></elseif> <elseif pos:line="83" pos:column="11">else <if pos:line="83" pos:column="16">if <condition pos:line="83" pos:column="19">(<expr><operator pos:line="83" pos:column="20">!<pos:position pos:line="83" pos:column="21"/></operator><call><name pos:line="83" pos:column="21">strncmp<pos:position pos:line="83" pos:column="28"/></name><argument_list pos:line="83" pos:column="28">(<argument><expr><name pos:line="83" pos:column="29">p<pos:position pos:line="83" pos:column="30"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="83" pos:column="31">"NA "<pos:position pos:line="83" pos:column="36"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="83" pos:column="37">3<pos:position pos:line="83" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="83" pos:column="40"/></condition><then pos:line="83" pos:column="40"> <block pos:line="83" pos:column="41">{
            <comment type="line" pos:line="84" pos:column="13">// NTLM fail-closed ERR response</comment>
            <expr_stmt><expr><name pos:line="85" pos:column="13">result<pos:position pos:line="85" pos:column="19"/></name> <operator pos:line="85" pos:column="20">=<pos:position pos:line="85" pos:column="21"/></operator> <name><name pos:line="85" pos:column="22">HelperReply<pos:position pos:line="85" pos:column="33"/></name><operator pos:line="85" pos:column="33">::<pos:position pos:line="85" pos:column="35"/></operator><name pos:line="85" pos:column="35">Error<pos:position pos:line="85" pos:column="40"/></name></name></expr>;<pos:position pos:line="85" pos:column="41"/></expr_stmt>
            <expr_stmt><expr><name pos:line="86" pos:column="13">p<pos:position pos:line="86" pos:column="14"/></name><operator pos:line="86" pos:column="14">+=<pos:position pos:line="86" pos:column="16"/></operator><literal type="number" pos:line="86" pos:column="16">3<pos:position pos:line="86" pos:column="17"/></literal></expr>;<pos:position pos:line="86" pos:column="18"/></expr_stmt>
            <expr_stmt><expr><name pos:line="87" pos:column="13">sawNA<pos:position pos:line="87" pos:column="18"/></name><operator pos:line="87" pos:column="18">=<pos:position pos:line="87" pos:column="19"/></operator><literal type="boolean" pos:line="87" pos:column="19">true<pos:position pos:line="87" pos:column="23"/></literal></expr>;<pos:position pos:line="87" pos:column="24"/></expr_stmt>
        }<pos:position pos:line="88" pos:column="10"/></block></then></if></elseif></if>

        <for pos:line="90" pos:column="9">for <control pos:line="90" pos:column="13">(<init pos:line="90" pos:column="14">;<pos:position pos:line="90" pos:column="15"/></init> <condition><expr><call><name pos:line="90" pos:column="16">xisspace<pos:position pos:line="90" pos:column="24"/></name><argument_list pos:line="90" pos:column="24">(<argument><expr><operator pos:line="90" pos:column="25">*<pos:position pos:line="90" pos:column="26"/></operator><name pos:line="90" pos:column="26">p<pos:position pos:line="90" pos:column="27"/></name></expr></argument>)<pos:position pos:line="90" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="29"/></condition> <incr><expr><operator pos:line="90" pos:column="30">++<pos:position pos:line="90" pos:column="32"/></operator><name pos:line="90" pos:column="32">p<pos:position pos:line="90" pos:column="33"/></name></expr></incr>)<pos:position pos:line="90" pos:column="34"/></control><block type="pseudo"><empty_stmt pos:line="90" pos:column="34">;<pos:position pos:line="90" pos:column="35"/></empty_stmt></block></for> <comment type="line" pos:line="90" pos:column="36">// skip whitespace</comment>
    }<pos:position pos:line="91" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><specifier pos:line="93" pos:column="5">const<pos:position pos:line="93" pos:column="10"/></specifier> <name pos:line="93" pos:column="11">mb_size_t<pos:position pos:line="93" pos:column="20"/></name></type> <name pos:line="93" pos:column="21">blobSize<pos:position pos:line="93" pos:column="29"/></name> <init pos:line="93" pos:column="30">= <expr><operator pos:line="93" pos:column="32">(<pos:position pos:line="93" pos:column="33"/></operator><name pos:line="93" pos:column="33">buf<pos:position pos:line="93" pos:column="36"/></name><operator pos:line="93" pos:column="36">+<pos:position pos:line="93" pos:column="37"/></operator><name pos:line="93" pos:column="37">len<pos:position pos:line="93" pos:column="40"/></name><operator pos:line="93" pos:column="40">-<pos:position pos:line="93" pos:column="41"/></operator><name pos:line="93" pos:column="41">p<pos:position pos:line="93" pos:column="42"/></name><operator pos:line="93" pos:column="42">)<pos:position pos:line="93" pos:column="43"/></operator></expr></init></decl>;<pos:position pos:line="93" pos:column="44"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="94" pos:column="5">other_<pos:position pos:line="94" pos:column="11"/></name><operator pos:line="94" pos:column="11">.<pos:position pos:line="94" pos:column="12"/></operator><name pos:line="94" pos:column="12">init<pos:position pos:line="94" pos:column="16"/></name></name><argument_list pos:line="94" pos:column="16">(<argument><expr><name pos:line="94" pos:column="17">blobSize<pos:position pos:line="94" pos:column="25"/></name><operator pos:line="94" pos:column="25">+<pos:position pos:line="94" pos:column="26"/></operator><literal type="number" pos:line="94" pos:column="26">1<pos:position pos:line="94" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="94" pos:column="29">blobSize<pos:position pos:line="94" pos:column="37"/></name><operator pos:line="94" pos:column="37">+<pos:position pos:line="94" pos:column="38"/></operator><literal type="number" pos:line="94" pos:column="38">1<pos:position pos:line="94" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="94" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="95" pos:column="5">other_<pos:position pos:line="95" pos:column="11"/></name><operator pos:line="95" pos:column="11">.<pos:position pos:line="95" pos:column="12"/></operator><name pos:line="95" pos:column="12">append<pos:position pos:line="95" pos:column="18"/></name></name><argument_list pos:line="95" pos:column="18">(<argument><expr><name pos:line="95" pos:column="19">p<pos:position pos:line="95" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="22">blobSize<pos:position pos:line="95" pos:column="30"/></name></expr></argument>)<pos:position pos:line="95" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="32"/></expr_stmt> <comment type="line" pos:line="95" pos:column="33">// remainders of the line.</comment>

    <comment type="line" pos:line="97" pos:column="5">// NULL-terminate so the helper callback handlers do not buffer-overrun</comment>
    <expr_stmt><expr><call><name><name pos:line="98" pos:column="5">other_<pos:position pos:line="98" pos:column="11"/></name><operator pos:line="98" pos:column="11">.<pos:position pos:line="98" pos:column="12"/></operator><name pos:line="98" pos:column="12">terminate<pos:position pos:line="98" pos:column="21"/></name></name><argument_list pos:line="98" pos:column="21">()<pos:position pos:line="98" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="24"/></expr_stmt>

    <comment type="line" pos:line="100" pos:column="5">// Hack for backward-compatibility: Do not parse for kv-pairs on NA response</comment>
    <if pos:line="101" pos:column="5">if <condition pos:line="101" pos:column="8">(<expr><operator pos:line="101" pos:column="9">!<pos:position pos:line="101" pos:column="10"/></operator><name pos:line="101" pos:column="10">sawNA<pos:position pos:line="101" pos:column="15"/></name></expr>)<pos:position pos:line="101" pos:column="16"/></condition><then pos:line="101" pos:column="16">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="102" pos:column="9">parseResponseKeys<pos:position pos:line="102" pos:column="26"/></name><argument_list pos:line="102" pos:column="26">()<pos:position pos:line="102" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="29"/></expr_stmt></block></then></if>

    <comment type="line" pos:line="104" pos:column="5">// Hack for backward-compatibility: BH and NA used to be a text message...</comment>
    <if pos:line="105" pos:column="5">if <condition pos:line="105" pos:column="8">(<expr><call><name pos:line="105" pos:column="9">other<pos:position pos:line="105" pos:column="14"/></name><argument_list pos:line="105" pos:column="14">()<pos:position pos:line="105" pos:column="16"/></argument_list></call><operator pos:line="105" pos:column="16">.<pos:position pos:line="105" pos:column="17"/></operator><call><name pos:line="105" pos:column="17">hasContent<pos:position pos:line="105" pos:column="27"/></name><argument_list pos:line="105" pos:column="27">()<pos:position pos:line="105" pos:column="29"/></argument_list></call> <operator pos:line="105" pos:column="30">&amp;&amp;<pos:position pos:line="105" pos:column="40"/></operator> <operator pos:line="105" pos:column="33">(<pos:position pos:line="105" pos:column="34"/></operator><name pos:line="105" pos:column="34">sawNA<pos:position pos:line="105" pos:column="39"/></name> <operator pos:line="105" pos:column="40">||<pos:position pos:line="105" pos:column="42"/></operator> <name pos:line="105" pos:column="43">result<pos:position pos:line="105" pos:column="49"/></name> <operator pos:line="105" pos:column="50">==<pos:position pos:line="105" pos:column="52"/></operator> <name><name pos:line="105" pos:column="53">HelperReply<pos:position pos:line="105" pos:column="64"/></name><operator pos:line="105" pos:column="64">::<pos:position pos:line="105" pos:column="66"/></operator><name pos:line="105" pos:column="66">BrokenHelper<pos:position pos:line="105" pos:column="78"/></name></name><operator pos:line="105" pos:column="78">)<pos:position pos:line="105" pos:column="79"/></operator></expr>)<pos:position pos:line="105" pos:column="80"/></condition><then pos:line="105" pos:column="80"> <block pos:line="105" pos:column="81">{
        <expr_stmt><expr><call><name><name pos:line="106" pos:column="9">notes<pos:position pos:line="106" pos:column="14"/></name><operator pos:line="106" pos:column="14">.<pos:position pos:line="106" pos:column="15"/></operator><name pos:line="106" pos:column="15">add<pos:position pos:line="106" pos:column="18"/></name></name><argument_list pos:line="106" pos:column="18">(<argument><expr><literal type="string" pos:line="106" pos:column="19">"message"<pos:position pos:line="106" pos:column="28"/></literal></expr></argument>,<argument><expr><call><name pos:line="106" pos:column="29">other<pos:position pos:line="106" pos:column="34"/></name><argument_list pos:line="106" pos:column="34">()<pos:position pos:line="106" pos:column="36"/></argument_list></call><operator pos:line="106" pos:column="36">.<pos:position pos:line="106" pos:column="37"/></operator><call><name pos:line="106" pos:column="37">content<pos:position pos:line="106" pos:column="44"/></name><argument_list pos:line="106" pos:column="44">()<pos:position pos:line="106" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="106" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="48"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="107" pos:column="9">modifiableOther<pos:position pos:line="107" pos:column="24"/></name><argument_list pos:line="107" pos:column="24">()<pos:position pos:line="107" pos:column="26"/></argument_list></call><operator pos:line="107" pos:column="26">.<pos:position pos:line="107" pos:column="27"/></operator><call><name pos:line="107" pos:column="27">clean<pos:position pos:line="107" pos:column="32"/></name><argument_list pos:line="107" pos:column="32">()<pos:position pos:line="107" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="108" pos:column="6"/></block></then></if>
}<pos:position pos:line="109" pos:column="2"/></block></function></unit>
