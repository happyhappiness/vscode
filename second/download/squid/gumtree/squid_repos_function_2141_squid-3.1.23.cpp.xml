<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2141_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ServerStateData<pos:position pos:line="2" pos:column="16"/></name><operator pos:line="2" pos:column="16">::<pos:position pos:line="2" pos:column="18"/></operator><name pos:line="2" pos:column="18">noteAdaptationAnswer<pos:position pos:line="2" pos:column="38"/></name></name><parameter_list pos:line="2" pos:column="38">(<parameter><decl><type><name pos:line="2" pos:column="39">HttpMsg<pos:position pos:line="2" pos:column="46"/></name> <modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier></type><name pos:line="2" pos:column="48">msg<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="52"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">clearAdaptation<pos:position pos:line="4" pos:column="20"/></name><argument_list pos:line="4" pos:column="20">(<argument><expr><name pos:line="4" pos:column="21">adaptedHeadSource<pos:position pos:line="4" pos:column="38"/></name></expr></argument>)<pos:position pos:line="4" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="40"/></expr_stmt> <comment type="line" pos:line="4" pos:column="41">// we do not expect more messages</comment>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><call><name pos:line="6" pos:column="9">abortOnBadEntry<pos:position pos:line="6" pos:column="24"/></name><argument_list pos:line="6" pos:column="24">(<argument><expr><literal type="string" pos:line="6" pos:column="25">"entry went bad while waiting for adapted headers"<pos:position pos:line="6" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="76"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="77"/></condition><then pos:line="6" pos:column="77"> <block pos:line="6" pos:column="78">{
        <comment type="line" pos:line="7" pos:column="9">// If the adapted response has a body, the ICAP side needs to know</comment>
        <comment type="line" pos:line="8" pos:column="9">// that nobody will consume that body. We will be destroyed upon</comment>
        <comment type="line" pos:line="9" pos:column="9">// return. Tell the ICAP side that it is on its own.</comment>
        <decl_stmt><decl><type><name pos:line="10" pos:column="9">HttpReply<pos:position pos:line="10" pos:column="18"/></name> <modifier pos:line="10" pos:column="19">*<pos:position pos:line="10" pos:column="20"/></modifier></type><name pos:line="10" pos:column="20">rep<pos:position pos:line="10" pos:column="23"/></name> <init pos:line="10" pos:column="24">= <expr><cast type="dynamic" pos:line="10" pos:column="26">dynamic_cast<argument_list type="generic" pos:line="10" pos:column="38">&lt;<argument><expr><name pos:line="10" pos:column="39">HttpReply<pos:position pos:line="10" pos:column="48"/></name><operator pos:line="10" pos:column="48">*<pos:position pos:line="10" pos:column="49"/></operator></expr></argument>&gt;<pos:position pos:line="10" pos:column="53"/></argument_list><argument_list pos:line="10" pos:column="50">(<argument><expr><name pos:line="10" pos:column="51">msg<pos:position pos:line="10" pos:column="54"/></name></expr></argument>)<pos:position pos:line="10" pos:column="55"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="10" pos:column="56"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">assert<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><name pos:line="11" pos:column="16">rep<pos:position pos:line="11" pos:column="19"/></name></expr></argument>)<pos:position pos:line="11" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="21"/></expr_stmt>
        <if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name><name pos:line="12" pos:column="13">rep<pos:position pos:line="12" pos:column="16"/></name><operator pos:line="12" pos:column="16">-&gt;<pos:position pos:line="12" pos:column="21"/></operator><name pos:line="12" pos:column="18">body_pipe<pos:position pos:line="12" pos:column="27"/></name></name> <operator pos:line="12" pos:column="28">!=<pos:position pos:line="12" pos:column="30"/></operator> <name pos:line="12" pos:column="31">NULL<pos:position pos:line="12" pos:column="35"/></name></expr>)<pos:position pos:line="12" pos:column="36"/></condition><then pos:line="12" pos:column="36">
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="13" pos:column="13">rep<pos:position pos:line="13" pos:column="16"/></name><operator pos:line="13" pos:column="16">-&gt;<pos:position pos:line="13" pos:column="21"/></operator><name pos:line="13" pos:column="18">body_pipe<pos:position pos:line="13" pos:column="27"/></name><operator pos:line="13" pos:column="27">-&gt;<pos:position pos:line="13" pos:column="32"/></operator><name pos:line="13" pos:column="29">expectNoConsumption<pos:position pos:line="13" pos:column="48"/></name></name><argument_list pos:line="13" pos:column="48">()<pos:position pos:line="13" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="51"/></expr_stmt></block></then></if>

        <return pos:line="15" pos:column="9">return;<pos:position pos:line="15" pos:column="16"/></return>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="18" pos:column="5">HttpReply<pos:position pos:line="18" pos:column="14"/></name> <modifier pos:line="18" pos:column="15">*<pos:position pos:line="18" pos:column="16"/></modifier></type><name pos:line="18" pos:column="16">rep<pos:position pos:line="18" pos:column="19"/></name> <init pos:line="18" pos:column="20">= <expr><cast type="dynamic" pos:line="18" pos:column="22">dynamic_cast<argument_list type="generic" pos:line="18" pos:column="34">&lt;<argument><expr><name pos:line="18" pos:column="35">HttpReply<pos:position pos:line="18" pos:column="44"/></name><operator pos:line="18" pos:column="44">*<pos:position pos:line="18" pos:column="45"/></operator></expr></argument>&gt;<pos:position pos:line="18" pos:column="49"/></argument_list><argument_list pos:line="18" pos:column="46">(<argument><expr><name pos:line="18" pos:column="47">msg<pos:position pos:line="18" pos:column="50"/></name></expr></argument>)<pos:position pos:line="18" pos:column="51"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="18" pos:column="52"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">assert<pos:position pos:line="19" pos:column="11"/></name><argument_list pos:line="19" pos:column="11">(<argument><expr><name pos:line="19" pos:column="12">rep<pos:position pos:line="19" pos:column="15"/></name></expr></argument>)<pos:position pos:line="19" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">debugs<pos:position pos:line="20" pos:column="11"/></name><argument_list pos:line="20" pos:column="11">(<argument><expr><literal type="number" pos:line="20" pos:column="12">11<pos:position pos:line="20" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="20" pos:column="15">5<pos:position pos:line="20" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="18">HERE<pos:position pos:line="20" pos:column="22"/></name> <operator pos:line="20" pos:column="23">&lt;&lt;<pos:position pos:line="20" pos:column="31"/></operator> <name pos:line="20" pos:column="26">this<pos:position pos:line="20" pos:column="30"/></name> <operator pos:line="20" pos:column="31">&lt;&lt;<pos:position pos:line="20" pos:column="39"/></operator> <literal type="string" pos:line="20" pos:column="34">" setting adapted reply to "<pos:position pos:line="20" pos:column="62"/></literal> <operator pos:line="20" pos:column="63">&lt;&lt;<pos:position pos:line="20" pos:column="71"/></operator> <name pos:line="20" pos:column="66">rep<pos:position pos:line="20" pos:column="69"/></name></expr></argument>)<pos:position pos:line="20" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="71"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">setFinalReply<pos:position pos:line="21" pos:column="18"/></name><argument_list pos:line="21" pos:column="18">(<argument><expr><name pos:line="21" pos:column="19">rep<pos:position pos:line="21" pos:column="22"/></name></expr></argument>)<pos:position pos:line="21" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="24"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="23" pos:column="5">assert<pos:position pos:line="23" pos:column="11"/></name><argument_list pos:line="23" pos:column="11">(<argument><expr><operator pos:line="23" pos:column="12">!<pos:position pos:line="23" pos:column="13"/></operator><name pos:line="23" pos:column="13">adaptedBodySource<pos:position pos:line="23" pos:column="30"/></name></expr></argument>)<pos:position pos:line="23" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="32"/></expr_stmt>
    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><name><name pos:line="24" pos:column="9">rep<pos:position pos:line="24" pos:column="12"/></name><operator pos:line="24" pos:column="12">-&gt;<pos:position pos:line="24" pos:column="17"/></operator><name pos:line="24" pos:column="14">body_pipe<pos:position pos:line="24" pos:column="23"/></name></name> <operator pos:line="24" pos:column="24">!=<pos:position pos:line="24" pos:column="26"/></operator> <name pos:line="24" pos:column="27">NULL<pos:position pos:line="24" pos:column="31"/></name></expr>)<pos:position pos:line="24" pos:column="32"/></condition><then pos:line="24" pos:column="32"> <block pos:line="24" pos:column="33">{
        <comment type="line" pos:line="25" pos:column="9">// subscribe to receive adapted body</comment>
        <expr_stmt><expr><name pos:line="26" pos:column="9">adaptedBodySource<pos:position pos:line="26" pos:column="26"/></name> <operator pos:line="26" pos:column="27">=<pos:position pos:line="26" pos:column="28"/></operator> <name><name pos:line="26" pos:column="29">rep<pos:position pos:line="26" pos:column="32"/></name><operator pos:line="26" pos:column="32">-&gt;<pos:position pos:line="26" pos:column="37"/></operator><name pos:line="26" pos:column="34">body_pipe<pos:position pos:line="26" pos:column="43"/></name></name></expr>;<pos:position pos:line="26" pos:column="44"/></expr_stmt>
        <comment type="line" pos:line="27" pos:column="9">// assume that ICAP does not auto-consume on failures</comment>
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">assert<pos:position pos:line="28" pos:column="15"/></name><argument_list pos:line="28" pos:column="15">(<argument><expr><call><name><name pos:line="28" pos:column="16">adaptedBodySource<pos:position pos:line="28" pos:column="33"/></name><operator pos:line="28" pos:column="33">-&gt;<pos:position pos:line="28" pos:column="38"/></operator><name pos:line="28" pos:column="35">setConsumerIfNotLate<pos:position pos:line="28" pos:column="55"/></name></name><argument_list pos:line="28" pos:column="55">(<argument><expr><name pos:line="28" pos:column="56">this<pos:position pos:line="28" pos:column="60"/></name></expr></argument>)<pos:position pos:line="28" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="28" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="63"/></expr_stmt>
    }<pos:position pos:line="29" pos:column="6"/></block></then> <else pos:line="29" pos:column="7">else <block pos:line="29" pos:column="12">{
        <comment type="line" pos:line="30" pos:column="9">// no body</comment>
        <if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><call><name pos:line="31" pos:column="13">doneWithAdaptation<pos:position pos:line="31" pos:column="31"/></name><argument_list pos:line="31" pos:column="31">()<pos:position pos:line="31" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="34"/></condition><then pos:line="31" pos:column="34"> <comment type="line" pos:line="31" pos:column="35">// we may still be sending virgin response</comment>
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="13">handleAdaptationCompleted<pos:position pos:line="32" pos:column="38"/></name><argument_list pos:line="32" pos:column="38">()<pos:position pos:line="32" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="41"/></expr_stmt></block></then></if>
    }<pos:position pos:line="33" pos:column="6"/></block></else></if>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
