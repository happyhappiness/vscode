<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_534_squid-3.3.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier>
<cpp:endif pos:line="2" pos:column="1">#<cpp:directive pos:line="2" pos:column="2">endif<pos:position pos:line="2" pos:column="7"/></cpp:directive></cpp:endif>
<type><name><name pos:line="3" pos:column="1">struct<pos:position pos:line="3" pos:column="7"/></name> <name pos:line="3" pos:column="8">node<pos:position pos:line="3" pos:column="12"/></name></name> <modifier pos:line="3" pos:column="13">*<pos:position pos:line="3" pos:column="14"/></modifier></type>
<name pos:line="4" pos:column="1">parse<pos:position pos:line="4" pos:column="6"/></name><parameter_list pos:line="4" pos:column="6">(<parameter><decl><type><name pos:line="4" pos:column="7">FILE<pos:position pos:line="4" pos:column="11"/></name> <modifier pos:line="4" pos:column="12">*<pos:position pos:line="4" pos:column="13"/></modifier></type><name pos:line="4" pos:column="13">fp<pos:position pos:line="4" pos:column="15"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="16"/></parameter_list> <block pos:line="4" pos:column="17">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name></type> <name><name pos:line="5" pos:column="10">token<pos:position pos:line="5" pos:column="15"/></name><index pos:line="5" pos:column="15">[<expr><literal type="number" pos:line="5" pos:column="16">64<pos:position pos:line="5" pos:column="18"/></literal></expr>]<pos:position pos:line="5" pos:column="19"/></index></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name></type> <name><name pos:line="6" pos:column="10">name<pos:position pos:line="6" pos:column="14"/></name><index pos:line="6" pos:column="14">[<expr><literal type="number" pos:line="6" pos:column="15">64<pos:position pos:line="6" pos:column="17"/></literal></expr>]<pos:position pos:line="6" pos:column="18"/></index></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">type<pos:position pos:line="7" pos:column="13"/></name> <init pos:line="7" pos:column="14">= <expr><literal type="number" pos:line="7" pos:column="16">1<pos:position pos:line="7" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="8" pos:column="5">struct<pos:position pos:line="8" pos:column="11"/></name> <name pos:line="8" pos:column="12">node<pos:position pos:line="8" pos:column="16"/></name></name> <modifier pos:line="8" pos:column="17">*<pos:position pos:line="8" pos:column="18"/></modifier></type><name pos:line="8" pos:column="18">np<pos:position pos:line="8" pos:column="20"/></name> <init pos:line="8" pos:column="21">= <expr><name pos:line="8" pos:column="23">NULL<pos:position pos:line="8" pos:column="27"/></name></expr></init></decl>, <modifier pos:line="8" pos:column="29">*<pos:position pos:line="8" pos:column="30"/></modifier><decl><type ref="prev"/><name pos:line="8" pos:column="30">root<pos:position pos:line="8" pos:column="34"/></name> <init pos:line="8" pos:column="35">= <expr><name pos:line="8" pos:column="37">NULL<pos:position pos:line="8" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="42"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="10" pos:column="5">hash_init<pos:position pos:line="10" pos:column="14"/></name><argument_list pos:line="10" pos:column="14">()<pos:position pos:line="10" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="17"/></expr_stmt>

    <while pos:line="12" pos:column="5">while <condition pos:line="12" pos:column="11">(<expr><name pos:line="12" pos:column="12">type<pos:position pos:line="12" pos:column="16"/></name> <operator pos:line="12" pos:column="17">!=<pos:position pos:line="12" pos:column="19"/></operator> <name pos:line="12" pos:column="20">ENDOFFILE<pos:position pos:line="12" pos:column="29"/></name></expr>)<pos:position pos:line="12" pos:column="30"/></condition> <block pos:line="12" pos:column="31">{
        <expr_stmt><expr><name pos:line="13" pos:column="9">type<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">=<pos:position pos:line="13" pos:column="15"/></operator> <call><name pos:line="13" pos:column="16">get_token<pos:position pos:line="13" pos:column="25"/></name><argument_list pos:line="13" pos:column="25">(<argument><expr><name pos:line="13" pos:column="26">fp<pos:position pos:line="13" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="30">token<pos:position pos:line="13" pos:column="35"/></name></expr></argument>)<pos:position pos:line="13" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="37"/></expr_stmt>
        <if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">type<pos:position pos:line="14" pos:column="17"/></name> <operator pos:line="14" pos:column="18">!=<pos:position pos:line="14" pos:column="20"/></operator> <name pos:line="14" pos:column="21">LABEL<pos:position pos:line="14" pos:column="26"/></name></expr>)<pos:position pos:line="14" pos:column="27"/></condition><then pos:line="14" pos:column="27"> <block pos:line="14" pos:column="28">{
            <if pos:line="15" pos:column="13">if <condition pos:line="15" pos:column="16">(<expr><name pos:line="15" pos:column="17">type<pos:position pos:line="15" pos:column="21"/></name> <operator pos:line="15" pos:column="22">==<pos:position pos:line="15" pos:column="24"/></operator> <name pos:line="15" pos:column="25">ENDOFFILE<pos:position pos:line="15" pos:column="34"/></name></expr>)<pos:position pos:line="15" pos:column="35"/></condition><then pos:line="15" pos:column="35"> <block pos:line="15" pos:column="36">{
                <return pos:line="16" pos:column="17">return <expr><name pos:line="16" pos:column="24">root<pos:position pos:line="16" pos:column="28"/></name></expr>;<pos:position pos:line="16" pos:column="29"/></return>
            }<pos:position pos:line="17" pos:column="14"/></block></then></if>
            <expr_stmt><expr><call><name pos:line="18" pos:column="13">print_error<pos:position pos:line="18" pos:column="24"/></name><argument_list pos:line="18" pos:column="24">(<argument><expr><name pos:line="18" pos:column="25">token<pos:position pos:line="18" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="32">"is a reserved word"<pos:position pos:line="18" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="54">type<pos:position pos:line="18" pos:column="58"/></name></expr></argument>)<pos:position pos:line="18" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="60"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="19" pos:column="13">free_node_list<pos:position pos:line="19" pos:column="27"/></name><argument_list pos:line="19" pos:column="27">(<argument><expr><name pos:line="19" pos:column="28">root<pos:position pos:line="19" pos:column="32"/></name></expr></argument>)<pos:position pos:line="19" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="34"/></expr_stmt>
            <return pos:line="20" pos:column="13">return <expr><name pos:line="20" pos:column="20">NULL<pos:position pos:line="20" pos:column="24"/></name></expr>;<pos:position pos:line="20" pos:column="25"/></return>
        }<pos:position pos:line="21" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="22" pos:column="9">strncpy<pos:position pos:line="22" pos:column="16"/></name><argument_list pos:line="22" pos:column="16">(<argument><expr><name pos:line="22" pos:column="17">name<pos:position pos:line="22" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="23">token<pos:position pos:line="22" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="30">64<pos:position pos:line="22" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="23" pos:column="9">name<pos:position pos:line="23" pos:column="13"/></name><index pos:line="23" pos:column="13">[<expr><literal type="number" pos:line="23" pos:column="14">63<pos:position pos:line="23" pos:column="16"/></literal></expr>]<pos:position pos:line="23" pos:column="17"/></index></name> <operator pos:line="23" pos:column="18">=<pos:position pos:line="23" pos:column="19"/></operator> <literal type="char" pos:line="23" pos:column="20">'\0'<pos:position pos:line="23" pos:column="24"/></literal></expr>;<pos:position pos:line="23" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><name pos:line="24" pos:column="9">type<pos:position pos:line="24" pos:column="13"/></name> <operator pos:line="24" pos:column="14">=<pos:position pos:line="24" pos:column="15"/></operator> <call><name pos:line="24" pos:column="16">get_token<pos:position pos:line="24" pos:column="25"/></name><argument_list pos:line="24" pos:column="25">(<argument><expr><name pos:line="24" pos:column="26">fp<pos:position pos:line="24" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="30">token<pos:position pos:line="24" pos:column="35"/></name></expr></argument>)<pos:position pos:line="24" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="37"/></expr_stmt>
        <if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><name pos:line="25" pos:column="13">type<pos:position pos:line="25" pos:column="17"/></name> <operator pos:line="25" pos:column="18">==<pos:position pos:line="25" pos:column="20"/></operator> <name pos:line="25" pos:column="21">OBJTYPE<pos:position pos:line="25" pos:column="28"/></name></expr>)<pos:position pos:line="25" pos:column="29"/></condition><then pos:line="25" pos:column="29"> <block pos:line="25" pos:column="30">{
            <if pos:line="26" pos:column="13">if <condition pos:line="26" pos:column="16">(<expr><name pos:line="26" pos:column="17">root<pos:position pos:line="26" pos:column="21"/></name> <operator pos:line="26" pos:column="22">==<pos:position pos:line="26" pos:column="24"/></operator> <name pos:line="26" pos:column="25">NULL<pos:position pos:line="26" pos:column="29"/></name></expr>)<pos:position pos:line="26" pos:column="30"/></condition><then pos:line="26" pos:column="30"> <block pos:line="26" pos:column="31">{
                <comment type="block" pos:line="27" pos:column="17">/* first link in chain */</comment>
                <expr_stmt><expr><name pos:line="28" pos:column="17">np<pos:position pos:line="28" pos:column="19"/></name> <operator pos:line="28" pos:column="20">=<pos:position pos:line="28" pos:column="21"/></operator> <name pos:line="28" pos:column="22">root<pos:position pos:line="28" pos:column="26"/></name> <operator pos:line="28" pos:column="27">=<pos:position pos:line="28" pos:column="28"/></operator> <call><name pos:line="28" pos:column="29">parse_objecttype<pos:position pos:line="28" pos:column="45"/></name><argument_list pos:line="28" pos:column="45">(<argument><expr><name pos:line="28" pos:column="46">fp<pos:position pos:line="28" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="50">name<pos:position pos:line="28" pos:column="54"/></name></expr></argument>)<pos:position pos:line="28" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="56"/></expr_stmt>
                <if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><name pos:line="29" pos:column="21">np<pos:position pos:line="29" pos:column="23"/></name> <operator pos:line="29" pos:column="24">==<pos:position pos:line="29" pos:column="26"/></operator> <name pos:line="29" pos:column="27">NULL<pos:position pos:line="29" pos:column="31"/></name></expr>)<pos:position pos:line="29" pos:column="32"/></condition><then pos:line="29" pos:column="32"> <block pos:line="29" pos:column="33">{
                    <expr_stmt><expr><call><name pos:line="30" pos:column="21">print_error<pos:position pos:line="30" pos:column="32"/></name><argument_list pos:line="30" pos:column="32">(<argument><expr><literal type="string" pos:line="30" pos:column="33">"Bad parse of object type"<pos:position pos:line="30" pos:column="59"/></literal></expr></argument>, <argument><expr><operator pos:line="30" pos:column="61">(<pos:position pos:line="30" pos:column="62"/></operator><name pos:line="30" pos:column="62">char<pos:position pos:line="30" pos:column="66"/></name> <operator pos:line="30" pos:column="67">*<pos:position pos:line="30" pos:column="68"/></operator><operator pos:line="30" pos:column="68">)<pos:position pos:line="30" pos:column="69"/></operator> <name pos:line="30" pos:column="70">NULL<pos:position pos:line="30" pos:column="74"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="76">type<pos:position pos:line="30" pos:column="80"/></name></expr></argument>)<pos:position pos:line="30" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="82"/></expr_stmt>
                    <return pos:line="31" pos:column="21">return <expr><name pos:line="31" pos:column="28">NULL<pos:position pos:line="31" pos:column="32"/></name></expr>;<pos:position pos:line="31" pos:column="33"/></return>
                }<pos:position pos:line="32" pos:column="18"/></block></then></if>
            }<pos:position pos:line="33" pos:column="14"/></block></then> <else pos:line="33" pos:column="15">else <block pos:line="33" pos:column="20">{
                <expr_stmt><expr><name><name pos:line="34" pos:column="17">np<pos:position pos:line="34" pos:column="19"/></name><operator pos:line="34" pos:column="19">-&gt;<pos:position pos:line="34" pos:column="24"/></operator><name pos:line="34" pos:column="21">next<pos:position pos:line="34" pos:column="25"/></name></name> <operator pos:line="34" pos:column="26">=<pos:position pos:line="34" pos:column="27"/></operator> <call><name pos:line="34" pos:column="28">parse_objecttype<pos:position pos:line="34" pos:column="44"/></name><argument_list pos:line="34" pos:column="44">(<argument><expr><name pos:line="34" pos:column="45">fp<pos:position pos:line="34" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="49">name<pos:position pos:line="34" pos:column="53"/></name></expr></argument>)<pos:position pos:line="34" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="55"/></expr_stmt>
                <if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><name><name pos:line="35" pos:column="21">np<pos:position pos:line="35" pos:column="23"/></name><operator pos:line="35" pos:column="23">-&gt;<pos:position pos:line="35" pos:column="28"/></operator><name pos:line="35" pos:column="25">next<pos:position pos:line="35" pos:column="29"/></name></name> <operator pos:line="35" pos:column="30">==<pos:position pos:line="35" pos:column="32"/></operator> <name pos:line="35" pos:column="33">NULL<pos:position pos:line="35" pos:column="37"/></name></expr>)<pos:position pos:line="35" pos:column="38"/></condition><then pos:line="35" pos:column="38"> <block pos:line="35" pos:column="39">{
                    <expr_stmt><expr><call><name pos:line="36" pos:column="21">print_error<pos:position pos:line="36" pos:column="32"/></name><argument_list pos:line="36" pos:column="32">(<argument><expr><literal type="string" pos:line="36" pos:column="33">"Bad parse of objecttype"<pos:position pos:line="36" pos:column="58"/></literal></expr></argument>, <argument><expr><operator pos:line="36" pos:column="60">(<pos:position pos:line="36" pos:column="61"/></operator><name pos:line="36" pos:column="61">char<pos:position pos:line="36" pos:column="65"/></name> <operator pos:line="36" pos:column="66">*<pos:position pos:line="36" pos:column="67"/></operator><operator pos:line="36" pos:column="67">)<pos:position pos:line="36" pos:column="68"/></operator> <name pos:line="36" pos:column="69">NULL<pos:position pos:line="36" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="75">type<pos:position pos:line="36" pos:column="79"/></name></expr></argument>)<pos:position pos:line="36" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="81"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="37" pos:column="21">free_node_list<pos:position pos:line="37" pos:column="35"/></name><argument_list pos:line="37" pos:column="35">(<argument><expr><name pos:line="37" pos:column="36">root<pos:position pos:line="37" pos:column="40"/></name></expr></argument>)<pos:position pos:line="37" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="42"/></expr_stmt>
                    <return pos:line="38" pos:column="21">return <expr><name pos:line="38" pos:column="28">NULL<pos:position pos:line="38" pos:column="32"/></name></expr>;<pos:position pos:line="38" pos:column="33"/></return>
                }<pos:position pos:line="39" pos:column="18"/></block></then></if>
            }<pos:position pos:line="40" pos:column="14"/></block></else></if>
            <comment type="block" pos:line="41" pos:column="13">/* now find end of chain */</comment>
            <while pos:line="42" pos:column="13">while <condition pos:line="42" pos:column="19">(<expr><name><name pos:line="42" pos:column="20">np<pos:position pos:line="42" pos:column="22"/></name><operator pos:line="42" pos:column="22">-&gt;<pos:position pos:line="42" pos:column="27"/></operator><name pos:line="42" pos:column="24">next<pos:position pos:line="42" pos:column="28"/></name></name></expr>)<pos:position pos:line="42" pos:column="29"/></condition>
                <block type="pseudo"><expr_stmt><expr><name pos:line="43" pos:column="17">np<pos:position pos:line="43" pos:column="19"/></name> <operator pos:line="43" pos:column="20">=<pos:position pos:line="43" pos:column="21"/></operator> <name><name pos:line="43" pos:column="22">np<pos:position pos:line="43" pos:column="24"/></name><operator pos:line="43" pos:column="24">-&gt;<pos:position pos:line="43" pos:column="29"/></operator><name pos:line="43" pos:column="26">next<pos:position pos:line="43" pos:column="30"/></name></name></expr>;<pos:position pos:line="43" pos:column="31"/></expr_stmt></block></while>
        }<pos:position pos:line="44" pos:column="10"/></block></then> <elseif pos:line="44" pos:column="11">else <if pos:line="44" pos:column="16">if <condition pos:line="44" pos:column="19">(<expr><name pos:line="44" pos:column="20">type<pos:position pos:line="44" pos:column="24"/></name> <operator pos:line="44" pos:column="25">==<pos:position pos:line="44" pos:column="27"/></operator> <name pos:line="44" pos:column="28">OBJID<pos:position pos:line="44" pos:column="33"/></name></expr>)<pos:position pos:line="44" pos:column="34"/></condition><then pos:line="44" pos:column="34"> <block pos:line="44" pos:column="35">{
            <if pos:line="45" pos:column="13">if <condition pos:line="45" pos:column="16">(<expr><name pos:line="45" pos:column="17">root<pos:position pos:line="45" pos:column="21"/></name> <operator pos:line="45" pos:column="22">==<pos:position pos:line="45" pos:column="24"/></operator> <name pos:line="45" pos:column="25">NULL<pos:position pos:line="45" pos:column="29"/></name></expr>)<pos:position pos:line="45" pos:column="30"/></condition><then pos:line="45" pos:column="30"> <block pos:line="45" pos:column="31">{
                <comment type="block" pos:line="46" pos:column="17">/* first link in chain */</comment>
                <expr_stmt><expr><name pos:line="47" pos:column="17">np<pos:position pos:line="47" pos:column="19"/></name> <operator pos:line="47" pos:column="20">=<pos:position pos:line="47" pos:column="21"/></operator> <name pos:line="47" pos:column="22">root<pos:position pos:line="47" pos:column="26"/></name> <operator pos:line="47" pos:column="27">=<pos:position pos:line="47" pos:column="28"/></operator> <call><name pos:line="47" pos:column="29">parse_objectid<pos:position pos:line="47" pos:column="43"/></name><argument_list pos:line="47" pos:column="43">(<argument><expr><name pos:line="47" pos:column="44">fp<pos:position pos:line="47" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="48">name<pos:position pos:line="47" pos:column="52"/></name></expr></argument>)<pos:position pos:line="47" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="54"/></expr_stmt>
                <if pos:line="48" pos:column="17">if <condition pos:line="48" pos:column="20">(<expr><name pos:line="48" pos:column="21">np<pos:position pos:line="48" pos:column="23"/></name> <operator pos:line="48" pos:column="24">==<pos:position pos:line="48" pos:column="26"/></operator> <name pos:line="48" pos:column="27">NULL<pos:position pos:line="48" pos:column="31"/></name></expr>)<pos:position pos:line="48" pos:column="32"/></condition><then pos:line="48" pos:column="32"> <block pos:line="48" pos:column="33">{
                    <expr_stmt><expr><call><name pos:line="49" pos:column="21">print_error<pos:position pos:line="49" pos:column="32"/></name><argument_list pos:line="49" pos:column="32">(<argument><expr><literal type="string" pos:line="49" pos:column="33">"Bad parse of object id"<pos:position pos:line="49" pos:column="57"/></literal></expr></argument>, <argument><expr><operator pos:line="49" pos:column="59">(<pos:position pos:line="49" pos:column="60"/></operator><name pos:line="49" pos:column="60">char<pos:position pos:line="49" pos:column="64"/></name> <operator pos:line="49" pos:column="65">*<pos:position pos:line="49" pos:column="66"/></operator><operator pos:line="49" pos:column="66">)<pos:position pos:line="49" pos:column="67"/></operator> <name pos:line="49" pos:column="68">NULL<pos:position pos:line="49" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="74">type<pos:position pos:line="49" pos:column="78"/></name></expr></argument>)<pos:position pos:line="49" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="80"/></expr_stmt>
                    <return pos:line="50" pos:column="21">return <expr><name pos:line="50" pos:column="28">NULL<pos:position pos:line="50" pos:column="32"/></name></expr>;<pos:position pos:line="50" pos:column="33"/></return>
                }<pos:position pos:line="51" pos:column="18"/></block></then></if>
            }<pos:position pos:line="52" pos:column="14"/></block></then> <else pos:line="52" pos:column="15">else <block pos:line="52" pos:column="20">{
                <expr_stmt><expr><name><name pos:line="53" pos:column="17">np<pos:position pos:line="53" pos:column="19"/></name><operator pos:line="53" pos:column="19">-&gt;<pos:position pos:line="53" pos:column="24"/></operator><name pos:line="53" pos:column="21">next<pos:position pos:line="53" pos:column="25"/></name></name> <operator pos:line="53" pos:column="26">=<pos:position pos:line="53" pos:column="27"/></operator> <call><name pos:line="53" pos:column="28">parse_objectid<pos:position pos:line="53" pos:column="42"/></name><argument_list pos:line="53" pos:column="42">(<argument><expr><name pos:line="53" pos:column="43">fp<pos:position pos:line="53" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="47">name<pos:position pos:line="53" pos:column="51"/></name></expr></argument>)<pos:position pos:line="53" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="53"/></expr_stmt>
                <if pos:line="54" pos:column="17">if <condition pos:line="54" pos:column="20">(<expr><name><name pos:line="54" pos:column="21">np<pos:position pos:line="54" pos:column="23"/></name><operator pos:line="54" pos:column="23">-&gt;<pos:position pos:line="54" pos:column="28"/></operator><name pos:line="54" pos:column="25">next<pos:position pos:line="54" pos:column="29"/></name></name> <operator pos:line="54" pos:column="30">==<pos:position pos:line="54" pos:column="32"/></operator> <name pos:line="54" pos:column="33">NULL<pos:position pos:line="54" pos:column="37"/></name></expr>)<pos:position pos:line="54" pos:column="38"/></condition><then pos:line="54" pos:column="38"> <block pos:line="54" pos:column="39">{
                    <expr_stmt><expr><call><name pos:line="55" pos:column="21">print_error<pos:position pos:line="55" pos:column="32"/></name><argument_list pos:line="55" pos:column="32">(<argument><expr><literal type="string" pos:line="55" pos:column="33">"Bad parse of object type"<pos:position pos:line="55" pos:column="59"/></literal></expr></argument>, <argument><expr><operator pos:line="55" pos:column="61">(<pos:position pos:line="55" pos:column="62"/></operator><name pos:line="55" pos:column="62">char<pos:position pos:line="55" pos:column="66"/></name> <operator pos:line="55" pos:column="67">*<pos:position pos:line="55" pos:column="68"/></operator><operator pos:line="55" pos:column="68">)<pos:position pos:line="55" pos:column="69"/></operator> <name pos:line="55" pos:column="70">NULL<pos:position pos:line="55" pos:column="74"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="76">type<pos:position pos:line="55" pos:column="80"/></name></expr></argument>)<pos:position pos:line="55" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="82"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="56" pos:column="21">free_node_list<pos:position pos:line="56" pos:column="35"/></name><argument_list pos:line="56" pos:column="35">(<argument><expr><name pos:line="56" pos:column="36">root<pos:position pos:line="56" pos:column="40"/></name></expr></argument>)<pos:position pos:line="56" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="42"/></expr_stmt>
                    <return pos:line="57" pos:column="21">return <expr><name pos:line="57" pos:column="28">NULL<pos:position pos:line="57" pos:column="32"/></name></expr>;<pos:position pos:line="57" pos:column="33"/></return>
                }<pos:position pos:line="58" pos:column="18"/></block></then></if>
            }<pos:position pos:line="59" pos:column="14"/></block></else></if>
            <comment type="block" pos:line="60" pos:column="13">/* now find end of chain */</comment>
            <while pos:line="61" pos:column="13">while <condition pos:line="61" pos:column="19">(<expr><name><name pos:line="61" pos:column="20">np<pos:position pos:line="61" pos:column="22"/></name><operator pos:line="61" pos:column="22">-&gt;<pos:position pos:line="61" pos:column="27"/></operator><name pos:line="61" pos:column="24">next<pos:position pos:line="61" pos:column="28"/></name></name></expr>)<pos:position pos:line="61" pos:column="29"/></condition>
                <block type="pseudo"><expr_stmt><expr><name pos:line="62" pos:column="17">np<pos:position pos:line="62" pos:column="19"/></name> <operator pos:line="62" pos:column="20">=<pos:position pos:line="62" pos:column="21"/></operator> <name><name pos:line="62" pos:column="22">np<pos:position pos:line="62" pos:column="24"/></name><operator pos:line="62" pos:column="24">-&gt;<pos:position pos:line="62" pos:column="29"/></operator><name pos:line="62" pos:column="26">next<pos:position pos:line="62" pos:column="30"/></name></name></expr>;<pos:position pos:line="62" pos:column="31"/></expr_stmt></block></while>
        }<pos:position pos:line="63" pos:column="10"/></block></then></if></elseif> <elseif pos:line="63" pos:column="11">else <if pos:line="63" pos:column="16">if <condition pos:line="63" pos:column="19">(<expr><name pos:line="63" pos:column="20">type<pos:position pos:line="63" pos:column="24"/></name> <operator pos:line="63" pos:column="25">==<pos:position pos:line="63" pos:column="27"/></operator> <name pos:line="63" pos:column="28">EQUALS<pos:position pos:line="63" pos:column="34"/></name></expr>)<pos:position pos:line="63" pos:column="35"/></condition><then pos:line="63" pos:column="35"> <block pos:line="63" pos:column="36">{
            <expr_stmt><expr><name pos:line="64" pos:column="13">type<pos:position pos:line="64" pos:column="17"/></name> <operator pos:line="64" pos:column="18">=<pos:position pos:line="64" pos:column="19"/></operator> <call><name pos:line="64" pos:column="20">parse_asntype<pos:position pos:line="64" pos:column="33"/></name><argument_list pos:line="64" pos:column="33">(<argument><expr><name pos:line="64" pos:column="34">fp<pos:position pos:line="64" pos:column="36"/></name></expr></argument>)<pos:position pos:line="64" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="38"/></expr_stmt>
        }<pos:position pos:line="65" pos:column="10"/></block></then></if></elseif> <elseif pos:line="65" pos:column="11">else <if pos:line="65" pos:column="16">if <condition pos:line="65" pos:column="19">(<expr><name pos:line="65" pos:column="20">type<pos:position pos:line="65" pos:column="24"/></name> <operator pos:line="65" pos:column="25">==<pos:position pos:line="65" pos:column="27"/></operator> <name pos:line="65" pos:column="28">ENDOFFILE<pos:position pos:line="65" pos:column="37"/></name></expr>)<pos:position pos:line="65" pos:column="38"/></condition><then pos:line="65" pos:column="38"> <block pos:line="65" pos:column="39">{
            <break pos:line="66" pos:column="13">break;<pos:position pos:line="66" pos:column="19"/></break>
        }<pos:position pos:line="67" pos:column="10"/></block></then></if></elseif> <else pos:line="67" pos:column="11">else <block pos:line="67" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="68" pos:column="13">print_error<pos:position pos:line="68" pos:column="24"/></name><argument_list pos:line="68" pos:column="24">(<argument><expr><literal type="string" pos:line="68" pos:column="25">"Bad operator"<pos:position pos:line="68" pos:column="39"/></literal></expr></argument>, <argument><expr><operator pos:line="68" pos:column="41">(<pos:position pos:line="68" pos:column="42"/></operator><name pos:line="68" pos:column="42">char<pos:position pos:line="68" pos:column="46"/></name> <operator pos:line="68" pos:column="47">*<pos:position pos:line="68" pos:column="48"/></operator><operator pos:line="68" pos:column="48">)<pos:position pos:line="68" pos:column="49"/></operator> <name pos:line="68" pos:column="50">NULL<pos:position pos:line="68" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="56">type<pos:position pos:line="68" pos:column="60"/></name></expr></argument>)<pos:position pos:line="68" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="62"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="69" pos:column="13">free_node_list<pos:position pos:line="69" pos:column="27"/></name><argument_list pos:line="69" pos:column="27">(<argument><expr><name pos:line="69" pos:column="28">root<pos:position pos:line="69" pos:column="32"/></name></expr></argument>)<pos:position pos:line="69" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="34"/></expr_stmt>
            <return pos:line="70" pos:column="13">return <expr><name pos:line="70" pos:column="20">NULL<pos:position pos:line="70" pos:column="24"/></name></expr>;<pos:position pos:line="70" pos:column="25"/></return>
        }<pos:position pos:line="71" pos:column="10"/></block></else></if>
    }<pos:position pos:line="72" pos:column="6"/></block></while>
<cpp:if pos:line="73" pos:column="1">#<cpp:directive pos:line="73" pos:column="2">if<pos:position pos:line="73" pos:column="4"/></cpp:directive> <expr><name pos:line="73" pos:column="5">TEST<pos:position pos:line="73" pos:column="9"/></name></expr></cpp:if>
    <block pos:line="74" pos:column="5">{
        <decl_stmt><decl><type><name><name pos:line="75" pos:column="9">struct<pos:position pos:line="75" pos:column="15"/></name> <name pos:line="75" pos:column="16">enum_list<pos:position pos:line="75" pos:column="25"/></name></name> <modifier pos:line="75" pos:column="26">*<pos:position pos:line="75" pos:column="27"/></modifier></type><name pos:line="75" pos:column="27">ep<pos:position pos:line="75" pos:column="29"/></name></decl>;<pos:position pos:line="75" pos:column="30"/></decl_stmt>

        <for pos:line="77" pos:column="9">for <control pos:line="77" pos:column="13">(<init><expr><name pos:line="77" pos:column="14">np<pos:position pos:line="77" pos:column="16"/></name> <operator pos:line="77" pos:column="17">=<pos:position pos:line="77" pos:column="18"/></operator> <name pos:line="77" pos:column="19">root<pos:position pos:line="77" pos:column="23"/></name></expr>;<pos:position pos:line="77" pos:column="24"/></init> <condition><expr><name pos:line="77" pos:column="25">np<pos:position pos:line="77" pos:column="27"/></name></expr>;<pos:position pos:line="77" pos:column="28"/></condition> <incr><expr><name pos:line="77" pos:column="29">np<pos:position pos:line="77" pos:column="31"/></name> <operator pos:line="77" pos:column="32">=<pos:position pos:line="77" pos:column="33"/></operator> <name><name pos:line="77" pos:column="34">np<pos:position pos:line="77" pos:column="36"/></name><operator pos:line="77" pos:column="36">-&gt;<pos:position pos:line="77" pos:column="41"/></operator><name pos:line="77" pos:column="38">next<pos:position pos:line="77" pos:column="42"/></name></name></expr></incr>)<pos:position pos:line="77" pos:column="43"/></control> <block pos:line="77" pos:column="44">{
            <expr_stmt><expr><call><name pos:line="78" pos:column="13">printf<pos:position pos:line="78" pos:column="19"/></name><argument_list pos:line="78" pos:column="19">(<argument><expr><literal type="string" pos:line="78" pos:column="20">"%s ::= { %s %d } (%d)\n"<pos:position pos:line="78" pos:column="45"/></literal></expr></argument>, <argument><expr><name><name pos:line="78" pos:column="47">np<pos:position pos:line="78" pos:column="49"/></name><operator pos:line="78" pos:column="49">-&gt;<pos:position pos:line="78" pos:column="54"/></operator><name pos:line="78" pos:column="51">label<pos:position pos:line="78" pos:column="56"/></name></name></expr></argument>, <argument><expr><name><name pos:line="78" pos:column="58">np<pos:position pos:line="78" pos:column="60"/></name><operator pos:line="78" pos:column="60">-&gt;<pos:position pos:line="78" pos:column="65"/></operator><name pos:line="78" pos:column="62">parent<pos:position pos:line="78" pos:column="68"/></name></name></expr></argument>, <argument><expr><name><name pos:line="78" pos:column="70">np<pos:position pos:line="78" pos:column="72"/></name><operator pos:line="78" pos:column="72">-&gt;<pos:position pos:line="78" pos:column="77"/></operator><name pos:line="78" pos:column="74">subid<pos:position pos:line="78" pos:column="79"/></name></name></expr></argument>,
                   <argument><expr><name><name pos:line="79" pos:column="20">np<pos:position pos:line="79" pos:column="22"/></name><operator pos:line="79" pos:column="22">-&gt;<pos:position pos:line="79" pos:column="27"/></operator><name pos:line="79" pos:column="24">type<pos:position pos:line="79" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="79" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="30"/></expr_stmt>
            <if pos:line="80" pos:column="13">if <condition pos:line="80" pos:column="16">(<expr><name><name pos:line="80" pos:column="17">np<pos:position pos:line="80" pos:column="19"/></name><operator pos:line="80" pos:column="19">-&gt;<pos:position pos:line="80" pos:column="24"/></operator><name pos:line="80" pos:column="21">enums<pos:position pos:line="80" pos:column="26"/></name></name></expr>)<pos:position pos:line="80" pos:column="27"/></condition><then pos:line="80" pos:column="27"> <block pos:line="80" pos:column="28">{
                <expr_stmt><expr><call><name pos:line="81" pos:column="17">printf<pos:position pos:line="81" pos:column="23"/></name><argument_list pos:line="81" pos:column="23">(<argument><expr><literal type="string" pos:line="81" pos:column="24">"Enums: \n"<pos:position pos:line="81" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="81" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="37"/></expr_stmt>
                <for pos:line="82" pos:column="17">for <control pos:line="82" pos:column="21">(<init><expr><name pos:line="82" pos:column="22">ep<pos:position pos:line="82" pos:column="24"/></name> <operator pos:line="82" pos:column="25">=<pos:position pos:line="82" pos:column="26"/></operator> <name><name pos:line="82" pos:column="27">np<pos:position pos:line="82" pos:column="29"/></name><operator pos:line="82" pos:column="29">-&gt;<pos:position pos:line="82" pos:column="34"/></operator><name pos:line="82" pos:column="31">enums<pos:position pos:line="82" pos:column="36"/></name></name></expr>;<pos:position pos:line="82" pos:column="37"/></init> <condition><expr><name pos:line="82" pos:column="38">ep<pos:position pos:line="82" pos:column="40"/></name></expr>;<pos:position pos:line="82" pos:column="41"/></condition> <incr><expr><name pos:line="82" pos:column="42">ep<pos:position pos:line="82" pos:column="44"/></name> <operator pos:line="82" pos:column="45">=<pos:position pos:line="82" pos:column="46"/></operator> <name><name pos:line="82" pos:column="47">ep<pos:position pos:line="82" pos:column="49"/></name><operator pos:line="82" pos:column="49">-&gt;<pos:position pos:line="82" pos:column="54"/></operator><name pos:line="82" pos:column="51">next<pos:position pos:line="82" pos:column="55"/></name></name></expr></incr>)<pos:position pos:line="82" pos:column="56"/></control> <block pos:line="82" pos:column="57">{
                    <expr_stmt><expr><call><name pos:line="83" pos:column="21">printf<pos:position pos:line="83" pos:column="27"/></name><argument_list pos:line="83" pos:column="27">(<argument><expr><literal type="string" pos:line="83" pos:column="28">"%s(%d)\n"<pos:position pos:line="83" pos:column="38"/></literal></expr></argument>, <argument><expr><name><name pos:line="83" pos:column="40">ep<pos:position pos:line="83" pos:column="42"/></name><operator pos:line="83" pos:column="42">-&gt;<pos:position pos:line="83" pos:column="47"/></operator><name pos:line="83" pos:column="44">label<pos:position pos:line="83" pos:column="49"/></name></name></expr></argument>, <argument><expr><name><name pos:line="83" pos:column="51">ep<pos:position pos:line="83" pos:column="53"/></name><operator pos:line="83" pos:column="53">-&gt;<pos:position pos:line="83" pos:column="58"/></operator><name pos:line="83" pos:column="55">value<pos:position pos:line="83" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="83" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="62"/></expr_stmt>
                }<pos:position pos:line="84" pos:column="18"/></block></for>
            }<pos:position pos:line="85" pos:column="14"/></block></then></if>
        }<pos:position pos:line="86" pos:column="10"/></block></for>
    }<pos:position pos:line="87" pos:column="6"/></block>
<cpp:endif pos:line="88" pos:column="1">#<cpp:directive pos:line="88" pos:column="2">endif<pos:position pos:line="88" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="88" pos:column="8">/* TEST */</comment>
    <return pos:line="89" pos:column="5">return <expr><name pos:line="89" pos:column="12">root<pos:position pos:line="89" pos:column="16"/></name></expr>;<pos:position pos:line="89" pos:column="17"/></return>
}<pos:position pos:line="90" pos:column="2"/></block></function></unit>
