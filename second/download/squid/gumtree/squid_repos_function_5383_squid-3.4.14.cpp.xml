<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5383_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Auth<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">Digest<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">Config<pos:position pos:line="2" pos:column="21"/></name><operator pos:line="2" pos:column="21">::<pos:position pos:line="2" pos:column="23"/></operator><name pos:line="2" pos:column="23">parse<pos:position pos:line="2" pos:column="28"/></name></name><parameter_list pos:line="2" pos:column="28">(<parameter><decl><type><name><name pos:line="2" pos:column="29">Auth<pos:position pos:line="2" pos:column="33"/></name><operator pos:line="2" pos:column="33">::<pos:position pos:line="2" pos:column="35"/></operator><name pos:line="2" pos:column="35">Config<pos:position pos:line="2" pos:column="41"/></name></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type> <name pos:line="2" pos:column="44">scheme<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="52">int<pos:position pos:line="2" pos:column="55"/></name></type> <name pos:line="2" pos:column="56">n_configured<pos:position pos:line="2" pos:column="68"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="70">char<pos:position pos:line="2" pos:column="74"/></name> <modifier pos:line="2" pos:column="75">*<pos:position pos:line="2" pos:column="76"/></modifier></type><name pos:line="2" pos:column="76">param_str<pos:position pos:line="2" pos:column="85"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="86"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><call><name pos:line="4" pos:column="9">strcmp<pos:position pos:line="4" pos:column="15"/></name><argument_list pos:line="4" pos:column="15">(<argument><expr><name pos:line="4" pos:column="16">param_str<pos:position pos:line="4" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="27">"program"<pos:position pos:line="4" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="37"/></argument_list></call> <operator pos:line="4" pos:column="38">==<pos:position pos:line="4" pos:column="40"/></operator> <literal type="number" pos:line="4" pos:column="41">0<pos:position pos:line="4" pos:column="42"/></literal></expr>)<pos:position pos:line="4" pos:column="43"/></condition><then pos:line="4" pos:column="43"> <block pos:line="4" pos:column="44">{
        <if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">authenticateProgram<pos:position pos:line="5" pos:column="32"/></name></expr>)<pos:position pos:line="5" pos:column="33"/></condition><then pos:line="5" pos:column="33">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="6" pos:column="13">wordlistDestroy<pos:position pos:line="6" pos:column="28"/></name><argument_list pos:line="6" pos:column="28">(<argument><expr><operator pos:line="6" pos:column="29">&amp;<pos:position pos:line="6" pos:column="34"/></operator><name pos:line="6" pos:column="30">authenticateProgram<pos:position pos:line="6" pos:column="49"/></name></expr></argument>)<pos:position pos:line="6" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="51"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name pos:line="8" pos:column="9">parse_wordlist<pos:position pos:line="8" pos:column="23"/></name><argument_list pos:line="8" pos:column="23">(<argument><expr><operator pos:line="8" pos:column="24">&amp;<pos:position pos:line="8" pos:column="29"/></operator><name pos:line="8" pos:column="25">authenticateProgram<pos:position pos:line="8" pos:column="44"/></name></expr></argument>)<pos:position pos:line="8" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="46"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="10" pos:column="9">requirePathnameExists<pos:position pos:line="10" pos:column="30"/></name><argument_list pos:line="10" pos:column="30">(<argument><expr><literal type="string" pos:line="10" pos:column="31">"auth_param digest program"<pos:position pos:line="10" pos:column="58"/></literal></expr></argument>, <argument><expr><name><name pos:line="10" pos:column="60">authenticateProgram<pos:position pos:line="10" pos:column="79"/></name><operator pos:line="10" pos:column="79">-&gt;<pos:position pos:line="10" pos:column="84"/></operator><name pos:line="10" pos:column="81">key<pos:position pos:line="10" pos:column="84"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="86"/></expr_stmt>
    }<pos:position pos:line="11" pos:column="6"/></block></then> <elseif pos:line="11" pos:column="7">else <if pos:line="11" pos:column="12">if <condition pos:line="11" pos:column="15">(<expr><call><name pos:line="11" pos:column="16">strcmp<pos:position pos:line="11" pos:column="22"/></name><argument_list pos:line="11" pos:column="22">(<argument><expr><name pos:line="11" pos:column="23">param_str<pos:position pos:line="11" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="34">"children"<pos:position pos:line="11" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="45"/></argument_list></call> <operator pos:line="11" pos:column="46">==<pos:position pos:line="11" pos:column="48"/></operator> <literal type="number" pos:line="11" pos:column="49">0<pos:position pos:line="11" pos:column="50"/></literal></expr>)<pos:position pos:line="11" pos:column="51"/></condition><then pos:line="11" pos:column="51"> <block pos:line="11" pos:column="52">{
        <expr_stmt><expr><call><name><name pos:line="12" pos:column="9">authenticateChildren<pos:position pos:line="12" pos:column="29"/></name><operator pos:line="12" pos:column="29">.<pos:position pos:line="12" pos:column="30"/></operator><name pos:line="12" pos:column="30">parseConfig<pos:position pos:line="12" pos:column="41"/></name></name><argument_list pos:line="12" pos:column="41">()<pos:position pos:line="12" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if></elseif> <elseif pos:line="13" pos:column="7">else <if pos:line="13" pos:column="12">if <condition pos:line="13" pos:column="15">(<expr><call><name pos:line="13" pos:column="16">strcmp<pos:position pos:line="13" pos:column="22"/></name><argument_list pos:line="13" pos:column="22">(<argument><expr><name pos:line="13" pos:column="23">param_str<pos:position pos:line="13" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="34">"realm"<pos:position pos:line="13" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="42"/></argument_list></call> <operator pos:line="13" pos:column="43">==<pos:position pos:line="13" pos:column="45"/></operator> <literal type="number" pos:line="13" pos:column="46">0<pos:position pos:line="13" pos:column="47"/></literal></expr>)<pos:position pos:line="13" pos:column="48"/></condition><then pos:line="13" pos:column="48"> <block pos:line="13" pos:column="49">{
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">parse_eol<pos:position pos:line="14" pos:column="18"/></name><argument_list pos:line="14" pos:column="18">(<argument><expr><operator pos:line="14" pos:column="19">&amp;<pos:position pos:line="14" pos:column="24"/></operator><name pos:line="14" pos:column="20">digestAuthRealm<pos:position pos:line="14" pos:column="35"/></name></expr></argument>)<pos:position pos:line="14" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if></elseif> <elseif pos:line="15" pos:column="7">else <if pos:line="15" pos:column="12">if <condition pos:line="15" pos:column="15">(<expr><call><name pos:line="15" pos:column="16">strcmp<pos:position pos:line="15" pos:column="22"/></name><argument_list pos:line="15" pos:column="22">(<argument><expr><name pos:line="15" pos:column="23">param_str<pos:position pos:line="15" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="34">"nonce_garbage_interval"<pos:position pos:line="15" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="59"/></argument_list></call> <operator pos:line="15" pos:column="60">==<pos:position pos:line="15" pos:column="62"/></operator> <literal type="number" pos:line="15" pos:column="63">0<pos:position pos:line="15" pos:column="64"/></literal></expr>)<pos:position pos:line="15" pos:column="65"/></condition><then pos:line="15" pos:column="65"> <block pos:line="15" pos:column="66">{
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">parse_time_t<pos:position pos:line="16" pos:column="21"/></name><argument_list pos:line="16" pos:column="21">(<argument><expr><operator pos:line="16" pos:column="22">&amp;<pos:position pos:line="16" pos:column="27"/></operator><name pos:line="16" pos:column="23">nonceGCInterval<pos:position pos:line="16" pos:column="38"/></name></expr></argument>)<pos:position pos:line="16" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="40"/></expr_stmt>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if></elseif> <elseif pos:line="17" pos:column="7">else <if pos:line="17" pos:column="12">if <condition pos:line="17" pos:column="15">(<expr><call><name pos:line="17" pos:column="16">strcmp<pos:position pos:line="17" pos:column="22"/></name><argument_list pos:line="17" pos:column="22">(<argument><expr><name pos:line="17" pos:column="23">param_str<pos:position pos:line="17" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="34">"nonce_max_duration"<pos:position pos:line="17" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="55"/></argument_list></call> <operator pos:line="17" pos:column="56">==<pos:position pos:line="17" pos:column="58"/></operator> <literal type="number" pos:line="17" pos:column="59">0<pos:position pos:line="17" pos:column="60"/></literal></expr>)<pos:position pos:line="17" pos:column="61"/></condition><then pos:line="17" pos:column="61"> <block pos:line="17" pos:column="62">{
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">parse_time_t<pos:position pos:line="18" pos:column="21"/></name><argument_list pos:line="18" pos:column="21">(<argument><expr><operator pos:line="18" pos:column="22">&amp;<pos:position pos:line="18" pos:column="27"/></operator><name pos:line="18" pos:column="23">noncemaxduration<pos:position pos:line="18" pos:column="39"/></name></expr></argument>)<pos:position pos:line="18" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if></elseif> <elseif pos:line="19" pos:column="7">else <if pos:line="19" pos:column="12">if <condition pos:line="19" pos:column="15">(<expr><call><name pos:line="19" pos:column="16">strcmp<pos:position pos:line="19" pos:column="22"/></name><argument_list pos:line="19" pos:column="22">(<argument><expr><name pos:line="19" pos:column="23">param_str<pos:position pos:line="19" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="34">"nonce_max_count"<pos:position pos:line="19" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="52"/></argument_list></call> <operator pos:line="19" pos:column="53">==<pos:position pos:line="19" pos:column="55"/></operator> <literal type="number" pos:line="19" pos:column="56">0<pos:position pos:line="19" pos:column="57"/></literal></expr>)<pos:position pos:line="19" pos:column="58"/></condition><then pos:line="19" pos:column="58"> <block pos:line="19" pos:column="59">{
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">parse_int<pos:position pos:line="20" pos:column="18"/></name><argument_list pos:line="20" pos:column="18">(<argument><expr><operator pos:line="20" pos:column="19">(<pos:position pos:line="20" pos:column="20"/></operator><name pos:line="20" pos:column="20">int<pos:position pos:line="20" pos:column="23"/></name> <operator pos:line="20" pos:column="24">*<pos:position pos:line="20" pos:column="25"/></operator><operator pos:line="20" pos:column="25">)<pos:position pos:line="20" pos:column="26"/></operator> <operator pos:line="20" pos:column="27">&amp;<pos:position pos:line="20" pos:column="32"/></operator><name pos:line="20" pos:column="28">noncemaxuses<pos:position pos:line="20" pos:column="40"/></name></expr></argument>)<pos:position pos:line="20" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if></elseif> <elseif pos:line="21" pos:column="7">else <if pos:line="21" pos:column="12">if <condition pos:line="21" pos:column="15">(<expr><call><name pos:line="21" pos:column="16">strcmp<pos:position pos:line="21" pos:column="22"/></name><argument_list pos:line="21" pos:column="22">(<argument><expr><name pos:line="21" pos:column="23">param_str<pos:position pos:line="21" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="34">"nonce_strictness"<pos:position pos:line="21" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="53"/></argument_list></call> <operator pos:line="21" pos:column="54">==<pos:position pos:line="21" pos:column="56"/></operator> <literal type="number" pos:line="21" pos:column="57">0<pos:position pos:line="21" pos:column="58"/></literal></expr>)<pos:position pos:line="21" pos:column="59"/></condition><then pos:line="21" pos:column="59"> <block pos:line="21" pos:column="60">{
        <expr_stmt><expr><call><name pos:line="22" pos:column="9">parse_onoff<pos:position pos:line="22" pos:column="20"/></name><argument_list pos:line="22" pos:column="20">(<argument><expr><operator pos:line="22" pos:column="21">&amp;<pos:position pos:line="22" pos:column="26"/></operator><name pos:line="22" pos:column="22">NonceStrictness<pos:position pos:line="22" pos:column="37"/></name></expr></argument>)<pos:position pos:line="22" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if></elseif> <elseif pos:line="23" pos:column="7">else <if pos:line="23" pos:column="12">if <condition pos:line="23" pos:column="15">(<expr><call><name pos:line="23" pos:column="16">strcmp<pos:position pos:line="23" pos:column="22"/></name><argument_list pos:line="23" pos:column="22">(<argument><expr><name pos:line="23" pos:column="23">param_str<pos:position pos:line="23" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="34">"check_nonce_count"<pos:position pos:line="23" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="54"/></argument_list></call> <operator pos:line="23" pos:column="55">==<pos:position pos:line="23" pos:column="57"/></operator> <literal type="number" pos:line="23" pos:column="58">0<pos:position pos:line="23" pos:column="59"/></literal></expr>)<pos:position pos:line="23" pos:column="60"/></condition><then pos:line="23" pos:column="60"> <block pos:line="23" pos:column="61">{
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">parse_onoff<pos:position pos:line="24" pos:column="20"/></name><argument_list pos:line="24" pos:column="20">(<argument><expr><operator pos:line="24" pos:column="21">&amp;<pos:position pos:line="24" pos:column="26"/></operator><name pos:line="24" pos:column="22">CheckNonceCount<pos:position pos:line="24" pos:column="37"/></name></expr></argument>)<pos:position pos:line="24" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if></elseif> <elseif pos:line="25" pos:column="7">else <if pos:line="25" pos:column="12">if <condition pos:line="25" pos:column="15">(<expr><call><name pos:line="25" pos:column="16">strcmp<pos:position pos:line="25" pos:column="22"/></name><argument_list pos:line="25" pos:column="22">(<argument><expr><name pos:line="25" pos:column="23">param_str<pos:position pos:line="25" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="34">"post_workaround"<pos:position pos:line="25" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="52"/></argument_list></call> <operator pos:line="25" pos:column="53">==<pos:position pos:line="25" pos:column="55"/></operator> <literal type="number" pos:line="25" pos:column="56">0<pos:position pos:line="25" pos:column="57"/></literal></expr>)<pos:position pos:line="25" pos:column="58"/></condition><then pos:line="25" pos:column="58"> <block pos:line="25" pos:column="59">{
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">parse_onoff<pos:position pos:line="26" pos:column="20"/></name><argument_list pos:line="26" pos:column="20">(<argument><expr><operator pos:line="26" pos:column="21">&amp;<pos:position pos:line="26" pos:column="26"/></operator><name pos:line="26" pos:column="22">PostWorkaround<pos:position pos:line="26" pos:column="36"/></name></expr></argument>)<pos:position pos:line="26" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if></elseif> <elseif pos:line="27" pos:column="7">else <if pos:line="27" pos:column="12">if <condition pos:line="27" pos:column="15">(<expr><call><name pos:line="27" pos:column="16">strcmp<pos:position pos:line="27" pos:column="22"/></name><argument_list pos:line="27" pos:column="22">(<argument><expr><name pos:line="27" pos:column="23">param_str<pos:position pos:line="27" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="34">"utf8"<pos:position pos:line="27" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="41"/></argument_list></call> <operator pos:line="27" pos:column="42">==<pos:position pos:line="27" pos:column="44"/></operator> <literal type="number" pos:line="27" pos:column="45">0<pos:position pos:line="27" pos:column="46"/></literal></expr>)<pos:position pos:line="27" pos:column="47"/></condition><then pos:line="27" pos:column="47"> <block pos:line="27" pos:column="48">{
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">parse_onoff<pos:position pos:line="28" pos:column="20"/></name><argument_list pos:line="28" pos:column="20">(<argument><expr><operator pos:line="28" pos:column="21">&amp;<pos:position pos:line="28" pos:column="26"/></operator><name pos:line="28" pos:column="22">utf8<pos:position pos:line="28" pos:column="26"/></name></expr></argument>)<pos:position pos:line="28" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if></elseif> <else pos:line="29" pos:column="7">else <block pos:line="29" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">debugs<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><literal type="number" pos:line="30" pos:column="16">29<pos:position pos:line="30" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="20">DBG_CRITICAL<pos:position pos:line="30" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="34">"unrecognised digest auth scheme parameter '"<pos:position pos:line="30" pos:column="79"/></literal> <operator pos:line="30" pos:column="80">&lt;&lt;<pos:position pos:line="30" pos:column="88"/></operator> <name pos:line="30" pos:column="83">param_str<pos:position pos:line="30" pos:column="92"/></name> <operator pos:line="30" pos:column="93">&lt;&lt;<pos:position pos:line="30" pos:column="101"/></operator> <literal type="string" pos:line="30" pos:column="96">"'"<pos:position pos:line="30" pos:column="99"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="100"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="101"/></expr_stmt>
    }<pos:position pos:line="31" pos:column="6"/></block></else></if>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
