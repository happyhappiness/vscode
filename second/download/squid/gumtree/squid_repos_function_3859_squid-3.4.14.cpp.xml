<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3859_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">History<pos:position pos:line="1" pos:column="25"/></name><operator pos:line="1" pos:column="25">::<pos:position pos:line="1" pos:column="27"/></operator><name pos:line="1" pos:column="27">allLogString<pos:position pos:line="1" pos:column="39"/></name></name><parameter_list pos:line="1" pos:column="39">(<parameter><decl><type><specifier pos:line="1" pos:column="40">const<pos:position pos:line="1" pos:column="45"/></specifier> <name pos:line="1" pos:column="46">char<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">serviceId<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="63">String<pos:position pos:line="1" pos:column="69"/></name> <modifier pos:line="1" pos:column="70">&amp;<pos:position pos:line="1" pos:column="75"/></modifier></type><name pos:line="1" pos:column="71">s<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="73"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><name pos:line="3" pos:column="5">s<pos:position pos:line="3" pos:column="6"/></name><operator pos:line="3" pos:column="6">=<pos:position pos:line="3" pos:column="7"/></operator><literal type="string" pos:line="3" pos:column="7">""<pos:position pos:line="3" pos:column="9"/></literal></expr>;<pos:position pos:line="3" pos:column="10"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">bool<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">prevWasRetried<pos:position pos:line="4" pos:column="24"/></name> <init pos:line="4" pos:column="25">= <expr><literal type="boolean" pos:line="4" pos:column="27">false<pos:position pos:line="4" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>
    <comment type="line" pos:line="5" pos:column="5">// XXX: Fix Vector&lt;&gt; so that we can use const_iterator here</comment>
    <typedef pos:line="6" pos:column="5">typedef <type><name><name pos:line="6" pos:column="13">Adaptation<pos:position pos:line="6" pos:column="23"/></name><operator pos:line="6" pos:column="23">::<pos:position pos:line="6" pos:column="25"/></operator><name pos:line="6" pos:column="25">History<pos:position pos:line="6" pos:column="32"/></name><operator pos:line="6" pos:column="32">::<pos:position pos:line="6" pos:column="34"/></operator><name pos:line="6" pos:column="34">Entries<pos:position pos:line="6" pos:column="41"/></name><operator pos:line="6" pos:column="41">::<pos:position pos:line="6" pos:column="43"/></operator><name pos:line="6" pos:column="43">iterator<pos:position pos:line="6" pos:column="51"/></name></name></type> <name pos:line="6" pos:column="52">ECI<pos:position pos:line="6" pos:column="55"/></name>;<pos:position pos:line="6" pos:column="56"/></typedef>
    <for pos:line="7" pos:column="5">for <control pos:line="7" pos:column="9">(<init><decl><type><name pos:line="7" pos:column="10">ECI<pos:position pos:line="7" pos:column="13"/></name></type> <name pos:line="7" pos:column="14">i<pos:position pos:line="7" pos:column="15"/></name> <init pos:line="7" pos:column="16">= <expr><call><name><name pos:line="7" pos:column="18">theEntries<pos:position pos:line="7" pos:column="28"/></name><operator pos:line="7" pos:column="28">.<pos:position pos:line="7" pos:column="29"/></operator><name pos:line="7" pos:column="29">begin<pos:position pos:line="7" pos:column="34"/></name></name><argument_list pos:line="7" pos:column="34">()<pos:position pos:line="7" pos:column="36"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="37"/></init> <condition><expr><name pos:line="7" pos:column="38">i<pos:position pos:line="7" pos:column="39"/></name> <operator pos:line="7" pos:column="40">!=<pos:position pos:line="7" pos:column="42"/></operator> <call><name><name pos:line="7" pos:column="43">theEntries<pos:position pos:line="7" pos:column="53"/></name><operator pos:line="7" pos:column="53">.<pos:position pos:line="7" pos:column="54"/></operator><name pos:line="7" pos:column="54">end<pos:position pos:line="7" pos:column="57"/></name></name><argument_list pos:line="7" pos:column="57">()<pos:position pos:line="7" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="60"/></condition> <incr><expr><operator pos:line="7" pos:column="61">++<pos:position pos:line="7" pos:column="63"/></operator><name pos:line="7" pos:column="63">i<pos:position pos:line="7" pos:column="64"/></name></expr></incr>)<pos:position pos:line="7" pos:column="65"/></control> <block pos:line="7" pos:column="66">{
        <comment type="line" pos:line="8" pos:column="9">// TODO: here and below, optimize service ID comparison?</comment>
        <if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><name pos:line="9" pos:column="14">serviceId<pos:position pos:line="9" pos:column="23"/></name> <operator pos:line="9" pos:column="24">||<pos:position pos:line="9" pos:column="26"/></operator> <name><name pos:line="9" pos:column="27">i<pos:position pos:line="9" pos:column="28"/></name><operator pos:line="9" pos:column="28">-&gt;<pos:position pos:line="9" pos:column="33"/></operator><name pos:line="9" pos:column="30">service<pos:position pos:line="9" pos:column="37"/></name></name> <operator pos:line="9" pos:column="38">==<pos:position pos:line="9" pos:column="40"/></operator> <name pos:line="9" pos:column="41">serviceId<pos:position pos:line="9" pos:column="50"/></name></expr>)<pos:position pos:line="9" pos:column="51"/></condition><then pos:line="9" pos:column="51"> <block pos:line="9" pos:column="52">{
            <if pos:line="10" pos:column="13">if <condition pos:line="10" pos:column="16">(<expr><call><name><name pos:line="10" pos:column="17">s<pos:position pos:line="10" pos:column="18"/></name><operator pos:line="10" pos:column="18">.<pos:position pos:line="10" pos:column="19"/></operator><name pos:line="10" pos:column="19">size<pos:position pos:line="10" pos:column="23"/></name></name><argument_list pos:line="10" pos:column="23">()<pos:position pos:line="10" pos:column="25"/></argument_list></call> <operator pos:line="10" pos:column="26">&gt;<pos:position pos:line="10" pos:column="30"/></operator> <literal type="number" pos:line="10" pos:column="28">0<pos:position pos:line="10" pos:column="29"/></literal></expr>)<pos:position pos:line="10" pos:column="30"/></condition><then pos:line="10" pos:column="30"> <comment type="line" pos:line="10" pos:column="31">// not the first logged time, must delimit</comment>
                <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="11" pos:column="17">s<pos:position pos:line="11" pos:column="18"/></name><operator pos:line="11" pos:column="18">.<pos:position pos:line="11" pos:column="19"/></operator><name pos:line="11" pos:column="19">append<pos:position pos:line="11" pos:column="25"/></name></name><argument_list pos:line="11" pos:column="25">(<argument><expr><ternary><condition><expr><name pos:line="11" pos:column="26">prevWasRetried<pos:position pos:line="11" pos:column="40"/></name></expr> ?<pos:position pos:line="11" pos:column="42"/></condition><then pos:line="11" pos:column="42"> <expr><literal type="string" pos:line="11" pos:column="43">"+"<pos:position pos:line="11" pos:column="46"/></literal></expr> <pos:position pos:line="11" pos:column="47"/></then><else pos:line="11" pos:column="47">: <expr><literal type="string" pos:line="11" pos:column="49">","<pos:position pos:line="11" pos:column="52"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="11" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="54"/></expr_stmt></block></then></if>

            <decl_stmt><decl><type><name pos:line="13" pos:column="13">char<pos:position pos:line="13" pos:column="17"/></name></type> <name><name pos:line="13" pos:column="18">buf<pos:position pos:line="13" pos:column="21"/></name><index pos:line="13" pos:column="21">[<expr><literal type="number" pos:line="13" pos:column="22">64<pos:position pos:line="13" pos:column="24"/></literal></expr>]<pos:position pos:line="13" pos:column="25"/></index></name></decl>;<pos:position pos:line="13" pos:column="26"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="14" pos:column="13">snprintf<pos:position pos:line="14" pos:column="21"/></name><argument_list pos:line="14" pos:column="21">(<argument><expr><name pos:line="14" pos:column="22">buf<pos:position pos:line="14" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="14" pos:column="27">sizeof<argument_list pos:line="14" pos:column="33">(<argument><expr><name pos:line="14" pos:column="34">buf<pos:position pos:line="14" pos:column="37"/></name></expr></argument>)<pos:position pos:line="14" pos:column="38"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="40">"%d"<pos:position pos:line="14" pos:column="44"/></literal></expr></argument>, <argument><expr><call><name><name pos:line="14" pos:column="46">i<pos:position pos:line="14" pos:column="47"/></name><operator pos:line="14" pos:column="47">-&gt;<pos:position pos:line="14" pos:column="52"/></operator><name pos:line="14" pos:column="49">rptm<pos:position pos:line="14" pos:column="53"/></name></name><argument_list pos:line="14" pos:column="53">()<pos:position pos:line="14" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="57"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="15" pos:column="13">s<pos:position pos:line="15" pos:column="14"/></name><operator pos:line="15" pos:column="14">.<pos:position pos:line="15" pos:column="15"/></operator><name pos:line="15" pos:column="15">append<pos:position pos:line="15" pos:column="21"/></name></name><argument_list pos:line="15" pos:column="21">(<argument><expr><name pos:line="15" pos:column="22">buf<pos:position pos:line="15" pos:column="25"/></name></expr></argument>)<pos:position pos:line="15" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="27"/></expr_stmt>

            <comment type="line" pos:line="17" pos:column="13">// continue; we may have two identical services (e.g., for retries)</comment>
        }<pos:position pos:line="18" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="19" pos:column="9">prevWasRetried<pos:position pos:line="19" pos:column="23"/></name> <operator pos:line="19" pos:column="24">=<pos:position pos:line="19" pos:column="25"/></operator> <name><name pos:line="19" pos:column="26">i<pos:position pos:line="19" pos:column="27"/></name><operator pos:line="19" pos:column="27">-&gt;<pos:position pos:line="19" pos:column="32"/></operator><name pos:line="19" pos:column="29">retried<pos:position pos:line="19" pos:column="36"/></name></name></expr>;<pos:position pos:line="19" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="20" pos:column="6"/></block></for>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
