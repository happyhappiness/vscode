<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4964_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ACLStringData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">match<pos:position pos:line="2" pos:column="21"/></name></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><name pos:line="2" pos:column="22">char<pos:position pos:line="2" pos:column="26"/></name> <specifier pos:line="2" pos:column="27">const<pos:position pos:line="2" pos:column="32"/></specifier> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier></type><name pos:line="2" pos:column="34">toFind<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="41"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><call><name><name pos:line="4" pos:column="9">stringValues<pos:position pos:line="4" pos:column="21"/></name><operator pos:line="4" pos:column="21">.<pos:position pos:line="4" pos:column="22"/></operator><name pos:line="4" pos:column="22">empty<pos:position pos:line="4" pos:column="27"/></name></name><argument_list pos:line="4" pos:column="27">()<pos:position pos:line="4" pos:column="29"/></argument_list></call> <operator pos:line="4" pos:column="30">||<pos:position pos:line="4" pos:column="32"/></operator> <operator pos:line="4" pos:column="33">!<pos:position pos:line="4" pos:column="34"/></operator><name pos:line="4" pos:column="34">toFind<pos:position pos:line="4" pos:column="40"/></name></expr>)<pos:position pos:line="4" pos:column="41"/></condition><then pos:line="4" pos:column="41">
        <block type="pseudo"><return pos:line="5" pos:column="9">return <expr><literal type="number" pos:line="5" pos:column="16">0<pos:position pos:line="5" pos:column="17"/></literal></expr>;<pos:position pos:line="5" pos:column="18"/></return></block></then></if>

    <decl_stmt><decl><type><name pos:line="7" pos:column="5">SBuf<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">tf<pos:position pos:line="7" pos:column="12"/></name><argument_list pos:line="7" pos:column="12">(<argument><expr><name pos:line="7" pos:column="13">toFind<pos:position pos:line="7" pos:column="19"/></name></expr></argument>)<pos:position pos:line="7" pos:column="20"/></argument_list></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">debugs<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><literal type="number" pos:line="8" pos:column="12">28<pos:position pos:line="8" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="16">3<pos:position pos:line="8" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="19">"aclMatchStringList: checking '"<pos:position pos:line="8" pos:column="51"/></literal> <operator pos:line="8" pos:column="52">&lt;&lt;<pos:position pos:line="8" pos:column="60"/></operator> <name pos:line="8" pos:column="55">tf<pos:position pos:line="8" pos:column="57"/></name> <operator pos:line="8" pos:column="58">&lt;&lt;<pos:position pos:line="8" pos:column="66"/></operator> <literal type="string" pos:line="8" pos:column="61">"'"<pos:position pos:line="8" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="66"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="10" pos:column="5">bool<pos:position pos:line="10" pos:column="9"/></name></type> <name pos:line="10" pos:column="10">found<pos:position pos:line="10" pos:column="15"/></name> <init pos:line="10" pos:column="16">= <expr><operator pos:line="10" pos:column="18">(<pos:position pos:line="10" pos:column="19"/></operator><call><name><name pos:line="10" pos:column="19">stringValues<pos:position pos:line="10" pos:column="31"/></name><operator pos:line="10" pos:column="31">.<pos:position pos:line="10" pos:column="32"/></operator><name pos:line="10" pos:column="32">find<pos:position pos:line="10" pos:column="36"/></name></name><argument_list pos:line="10" pos:column="36">(<argument><expr><name pos:line="10" pos:column="37">tf<pos:position pos:line="10" pos:column="39"/></name></expr></argument>)<pos:position pos:line="10" pos:column="40"/></argument_list></call> <operator pos:line="10" pos:column="41">!=<pos:position pos:line="10" pos:column="43"/></operator> <call><name><name pos:line="10" pos:column="44">stringValues<pos:position pos:line="10" pos:column="56"/></name><operator pos:line="10" pos:column="56">.<pos:position pos:line="10" pos:column="57"/></operator><name pos:line="10" pos:column="57">end<pos:position pos:line="10" pos:column="60"/></name></name><argument_list pos:line="10" pos:column="60">()<pos:position pos:line="10" pos:column="62"/></argument_list></call><operator pos:line="10" pos:column="62">)<pos:position pos:line="10" pos:column="63"/></operator></expr></init></decl>;<pos:position pos:line="10" pos:column="64"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">debugs<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><literal type="number" pos:line="11" pos:column="12">28<pos:position pos:line="11" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="16">3<pos:position pos:line="11" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="19">"aclMatchStringList: '"<pos:position pos:line="11" pos:column="42"/></literal> <operator pos:line="11" pos:column="43">&lt;&lt;<pos:position pos:line="11" pos:column="51"/></operator> <name pos:line="11" pos:column="46">tf<pos:position pos:line="11" pos:column="48"/></name> <operator pos:line="11" pos:column="49">&lt;&lt;<pos:position pos:line="11" pos:column="57"/></operator> <literal type="string" pos:line="11" pos:column="52">"' "<pos:position pos:line="11" pos:column="56"/></literal> <operator pos:line="11" pos:column="57">&lt;&lt;<pos:position pos:line="11" pos:column="65"/></operator> <operator pos:line="11" pos:column="60">(<pos:position pos:line="11" pos:column="61"/></operator><ternary><condition><expr><name pos:line="11" pos:column="61">found<pos:position pos:line="11" pos:column="66"/></name></expr> ?<pos:position pos:line="11" pos:column="68"/></condition><then pos:line="11" pos:column="68"> <expr><literal type="string" pos:line="11" pos:column="69">"found"<pos:position pos:line="11" pos:column="76"/></literal></expr> <pos:position pos:line="11" pos:column="77"/></then><else pos:line="11" pos:column="77">: <expr><literal type="string" pos:line="11" pos:column="79">"NOT found"<pos:position pos:line="11" pos:column="90"/></literal></expr></else></ternary><operator pos:line="11" pos:column="90">)<pos:position pos:line="11" pos:column="91"/></operator></expr></argument>)<pos:position pos:line="11" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="93"/></expr_stmt>

    <return pos:line="13" pos:column="5">return <expr><name pos:line="13" pos:column="12">found<pos:position pos:line="13" pos:column="17"/></name></expr>;<pos:position pos:line="13" pos:column="18"/></return>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
