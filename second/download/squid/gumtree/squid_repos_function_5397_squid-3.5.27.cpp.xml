<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5397_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ftp<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">Relay<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">processReplyBody<pos:position pos:line="2" pos:column="29"/></name></name><parameter_list pos:line="2" pos:column="29">()<pos:position pos:line="2" pos:column="31"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">9<pos:position pos:line="4" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="15">3<pos:position pos:line="4" pos:column="16"/></literal></expr></argument>, <argument><expr><call><name pos:line="4" pos:column="18">status<pos:position pos:line="4" pos:column="24"/></name><argument_list pos:line="4" pos:column="24">()<pos:position pos:line="4" pos:column="26"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="28"/></expr_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><call><name pos:line="6" pos:column="9">EBIT_TEST<pos:position pos:line="6" pos:column="18"/></name><argument_list pos:line="6" pos:column="18">(<argument><expr><name><name pos:line="6" pos:column="19">entry<pos:position pos:line="6" pos:column="24"/></name><operator pos:line="6" pos:column="24">-&gt;<pos:position pos:line="6" pos:column="29"/></operator><name pos:line="6" pos:column="26">flags<pos:position pos:line="6" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="33">ENTRY_ABORTED<pos:position pos:line="6" pos:column="46"/></name></expr></argument>)<pos:position pos:line="6" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="48"/></condition><then pos:line="6" pos:column="48"> <block pos:line="6" pos:column="49">{
        <comment type="block" pos:line="7" pos:column="9">/*
         * probably was aborted because content length exceeds one
         * of the maximum size limits.
         */</comment>
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">abortOnData<pos:position pos:line="11" pos:column="20"/></name><argument_list pos:line="11" pos:column="20">(<argument><expr><literal type="string" pos:line="11" pos:column="21">"entry aborted after calling appendSuccessHeader()"<pos:position pos:line="11" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="74"/></expr_stmt>
        <return pos:line="12" pos:column="9">return;<pos:position pos:line="12" pos:column="16"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><call><name pos:line="15" pos:column="9">master<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">()<pos:position pos:line="15" pos:column="17"/></argument_list></call><operator pos:line="15" pos:column="17">.<pos:position pos:line="15" pos:column="18"/></operator><name pos:line="15" pos:column="18">userDataDone<pos:position pos:line="15" pos:column="30"/></name></expr>)<pos:position pos:line="15" pos:column="31"/></condition><then pos:line="15" pos:column="31"> <block pos:line="15" pos:column="32">{
        <comment type="line" pos:line="16" pos:column="9">// Squid-to-client data transfer done. Abort data transfer on our</comment>
        <comment type="line" pos:line="17" pos:column="9">// side to allow new commands from ftp client</comment>
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">abortOnData<pos:position pos:line="18" pos:column="20"/></name><argument_list pos:line="18" pos:column="20">(<argument><expr><literal type="string" pos:line="18" pos:column="21">"Squid-to-client data connection is closed"<pos:position pos:line="18" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="66"/></expr_stmt>
        <return pos:line="19" pos:column="9">return;<pos:position pos:line="19" pos:column="16"/></return>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>

<cpp:if pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">if<pos:position pos:line="22" pos:column="4"/></cpp:directive> <expr><name pos:line="22" pos:column="5">USE_ADAPTATION<pos:position pos:line="22" pos:column="19"/></name></expr></cpp:if>

    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><name pos:line="24" pos:column="9">adaptationAccessCheckPending<pos:position pos:line="24" pos:column="37"/></name></expr>)<pos:position pos:line="24" pos:column="38"/></condition><then pos:line="24" pos:column="38"> <block pos:line="24" pos:column="39">{
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">debugs<pos:position pos:line="25" pos:column="15"/></name><argument_list pos:line="25" pos:column="15">(<argument><expr><literal type="number" pos:line="25" pos:column="16">9<pos:position pos:line="25" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="19">3<pos:position pos:line="25" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="22">"returning due to adaptationAccessCheckPending"<pos:position pos:line="25" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="71"/></expr_stmt>
        <return pos:line="26" pos:column="9">return;<pos:position pos:line="26" pos:column="16"/></return>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>

<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif<pos:position pos:line="29" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><name><name pos:line="31" pos:column="9">data<pos:position pos:line="31" pos:column="13"/></name><operator pos:line="31" pos:column="13">.<pos:position pos:line="31" pos:column="14"/></operator><name pos:line="31" pos:column="14">readBuf<pos:position pos:line="31" pos:column="21"/></name></name> <operator pos:line="31" pos:column="22">!=<pos:position pos:line="31" pos:column="24"/></operator> <name pos:line="31" pos:column="25">NULL<pos:position pos:line="31" pos:column="29"/></name> <operator pos:line="31" pos:column="30">&amp;&amp;<pos:position pos:line="31" pos:column="40"/></operator> <call><name><name pos:line="31" pos:column="33">data<pos:position pos:line="31" pos:column="37"/></name><operator pos:line="31" pos:column="37">.<pos:position pos:line="31" pos:column="38"/></operator><name pos:line="31" pos:column="38">readBuf<pos:position pos:line="31" pos:column="45"/></name><operator pos:line="31" pos:column="45">-&gt;<pos:position pos:line="31" pos:column="50"/></operator><name pos:line="31" pos:column="47">hasContent<pos:position pos:line="31" pos:column="57"/></name></name><argument_list pos:line="31" pos:column="57">()<pos:position pos:line="31" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="60"/></condition><then pos:line="31" pos:column="60"> <block pos:line="31" pos:column="61">{
        <decl_stmt><decl><type><specifier pos:line="32" pos:column="9">const<pos:position pos:line="32" pos:column="14"/></specifier> <name pos:line="32" pos:column="15">mb_size_t<pos:position pos:line="32" pos:column="24"/></name></type> <name pos:line="32" pos:column="25">csize<pos:position pos:line="32" pos:column="30"/></name> <init pos:line="32" pos:column="31">= <expr><call><name><name pos:line="32" pos:column="33">data<pos:position pos:line="32" pos:column="37"/></name><operator pos:line="32" pos:column="37">.<pos:position pos:line="32" pos:column="38"/></operator><name pos:line="32" pos:column="38">readBuf<pos:position pos:line="32" pos:column="45"/></name><operator pos:line="32" pos:column="45">-&gt;<pos:position pos:line="32" pos:column="50"/></operator><name pos:line="32" pos:column="47">contentSize<pos:position pos:line="32" pos:column="58"/></name></name><argument_list pos:line="32" pos:column="58">()<pos:position pos:line="32" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="32" pos:column="61"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="33" pos:column="9">debugs<pos:position pos:line="33" pos:column="15"/></name><argument_list pos:line="33" pos:column="15">(<argument><expr><literal type="number" pos:line="33" pos:column="16">9<pos:position pos:line="33" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="19">5<pos:position pos:line="33" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="22">"writing "<pos:position pos:line="33" pos:column="32"/></literal> <operator pos:line="33" pos:column="33">&lt;&lt;<pos:position pos:line="33" pos:column="41"/></operator> <name pos:line="33" pos:column="36">csize<pos:position pos:line="33" pos:column="41"/></name> <operator pos:line="33" pos:column="42">&lt;&lt;<pos:position pos:line="33" pos:column="50"/></operator> <literal type="string" pos:line="33" pos:column="45">" bytes to the reply"<pos:position pos:line="33" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="34" pos:column="9">addVirginReplyBody<pos:position pos:line="34" pos:column="27"/></name><argument_list pos:line="34" pos:column="27">(<argument><expr><call><name><name pos:line="34" pos:column="28">data<pos:position pos:line="34" pos:column="32"/></name><operator pos:line="34" pos:column="32">.<pos:position pos:line="34" pos:column="33"/></operator><name pos:line="34" pos:column="33">readBuf<pos:position pos:line="34" pos:column="40"/></name><operator pos:line="34" pos:column="40">-&gt;<pos:position pos:line="34" pos:column="45"/></operator><name pos:line="34" pos:column="42">content<pos:position pos:line="34" pos:column="49"/></name></name><argument_list pos:line="34" pos:column="49">()<pos:position pos:line="34" pos:column="51"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="34" pos:column="53">csize<pos:position pos:line="34" pos:column="58"/></name></expr></argument>)<pos:position pos:line="34" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="60"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="35" pos:column="9">data<pos:position pos:line="35" pos:column="13"/></name><operator pos:line="35" pos:column="13">.<pos:position pos:line="35" pos:column="14"/></operator><name pos:line="35" pos:column="14">readBuf<pos:position pos:line="35" pos:column="21"/></name><operator pos:line="35" pos:column="21">-&gt;<pos:position pos:line="35" pos:column="26"/></operator><name pos:line="35" pos:column="23">consume<pos:position pos:line="35" pos:column="30"/></name></name><argument_list pos:line="35" pos:column="30">(<argument><expr><name pos:line="35" pos:column="31">csize<pos:position pos:line="35" pos:column="36"/></name></expr></argument>)<pos:position pos:line="35" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="38" pos:column="5">entry<pos:position pos:line="38" pos:column="10"/></name><operator pos:line="38" pos:column="10">-&gt;<pos:position pos:line="38" pos:column="15"/></operator><name pos:line="38" pos:column="12">flush<pos:position pos:line="38" pos:column="17"/></name></name><argument_list pos:line="38" pos:column="17">()<pos:position pos:line="38" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="20"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="40" pos:column="5">maybeReadVirginBody<pos:position pos:line="40" pos:column="24"/></name><argument_list pos:line="40" pos:column="24">()<pos:position pos:line="40" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="27"/></expr_stmt>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
