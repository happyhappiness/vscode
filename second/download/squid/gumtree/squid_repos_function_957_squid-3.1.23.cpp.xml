<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_957_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">HttpMsg<pos:position pos:line="1" pos:column="13"/></name><operator pos:line="1" pos:column="13">::<pos:position pos:line="1" pos:column="15"/></operator><name pos:line="1" pos:column="15">parse<pos:position pos:line="1" pos:column="20"/></name></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">MemBuf<pos:position pos:line="1" pos:column="27"/></name> <modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier></type><name pos:line="1" pos:column="29">buf<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="34">bool<pos:position pos:line="1" pos:column="38"/></name></type> <name pos:line="1" pos:column="39">eof<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">http_status<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">error<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="63"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="3" pos:column="5">assert<pos:position pos:line="3" pos:column="11"/></name><argument_list pos:line="3" pos:column="11">(<argument><expr><name pos:line="3" pos:column="12">error<pos:position pos:line="3" pos:column="17"/></name></expr></argument>)<pos:position pos:line="3" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="4" pos:column="5">*<pos:position pos:line="4" pos:column="6"/></operator><name pos:line="4" pos:column="6">error<pos:position pos:line="4" pos:column="11"/></name> <operator pos:line="4" pos:column="12">=<pos:position pos:line="4" pos:column="13"/></operator> <name pos:line="4" pos:column="14">HTTP_STATUS_NONE<pos:position pos:line="4" pos:column="30"/></name></expr>;<pos:position pos:line="4" pos:column="31"/></expr_stmt>

    <comment type="line" pos:line="6" pos:column="5">// httpMsgParseStep() and debugging require 0-termination, unfortunately</comment>
    <expr_stmt><expr><call><name><name pos:line="7" pos:column="5">buf<pos:position pos:line="7" pos:column="8"/></name><operator pos:line="7" pos:column="8">-&gt;<pos:position pos:line="7" pos:column="13"/></operator><name pos:line="7" pos:column="10">terminate<pos:position pos:line="7" pos:column="19"/></name></name><argument_list pos:line="7" pos:column="19">()<pos:position pos:line="7" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="22"/></expr_stmt> <comment type="line" pos:line="7" pos:column="23">// does not affect content size</comment>

    <comment type="line" pos:line="9" pos:column="5">// find the end of headers</comment>
    <decl_stmt><decl><type><specifier pos:line="10" pos:column="5">const<pos:position pos:line="10" pos:column="10"/></specifier> <name pos:line="10" pos:column="11">size_t<pos:position pos:line="10" pos:column="17"/></name></type> <name pos:line="10" pos:column="18">hdr_len<pos:position pos:line="10" pos:column="25"/></name> <init pos:line="10" pos:column="26">= <expr><call><name pos:line="10" pos:column="28">headersEnd<pos:position pos:line="10" pos:column="38"/></name><argument_list pos:line="10" pos:column="38">(<argument><expr><call><name><name pos:line="10" pos:column="39">buf<pos:position pos:line="10" pos:column="42"/></name><operator pos:line="10" pos:column="42">-&gt;<pos:position pos:line="10" pos:column="47"/></operator><name pos:line="10" pos:column="44">content<pos:position pos:line="10" pos:column="51"/></name></name><argument_list pos:line="10" pos:column="51">()<pos:position pos:line="10" pos:column="53"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="10" pos:column="55">buf<pos:position pos:line="10" pos:column="58"/></name><operator pos:line="10" pos:column="58">-&gt;<pos:position pos:line="10" pos:column="63"/></operator><name pos:line="10" pos:column="60">contentSize<pos:position pos:line="10" pos:column="71"/></name></name><argument_list pos:line="10" pos:column="71">()<pos:position pos:line="10" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="74"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="75"/></decl_stmt>

    <comment type="line" pos:line="12" pos:column="5">// sanity check the start line to see if this is in fact an HTTP message</comment>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><operator pos:line="13" pos:column="9">!<pos:position pos:line="13" pos:column="10"/></operator><call><name pos:line="13" pos:column="10">sanityCheckStartLine<pos:position pos:line="13" pos:column="30"/></name><argument_list pos:line="13" pos:column="30">(<argument><expr><name pos:line="13" pos:column="31">buf<pos:position pos:line="13" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="36">hdr_len<pos:position pos:line="13" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="45">error<pos:position pos:line="13" pos:column="50"/></name></expr></argument>)<pos:position pos:line="13" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="52"/></condition><then pos:line="13" pos:column="52"> <block pos:line="13" pos:column="53">{
        <comment type="line" pos:line="14" pos:column="9">// NP: sanityCheck sets *error and sends debug warnings on syntax errors.</comment>
        <comment type="line" pos:line="15" pos:column="9">// if we have seen the connection close, this is an error too</comment>
        <if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">eof<pos:position pos:line="16" pos:column="16"/></name> <operator pos:line="16" pos:column="17">&amp;&amp;<pos:position pos:line="16" pos:column="27"/></operator> <operator pos:line="16" pos:column="20">*<pos:position pos:line="16" pos:column="21"/></operator><name pos:line="16" pos:column="21">error<pos:position pos:line="16" pos:column="26"/></name><operator pos:line="16" pos:column="26">==<pos:position pos:line="16" pos:column="28"/></operator><name pos:line="16" pos:column="28">HTTP_STATUS_NONE<pos:position pos:line="16" pos:column="44"/></name></expr>)<pos:position pos:line="16" pos:column="45"/></condition><then pos:line="16" pos:column="45">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="17" pos:column="13">*<pos:position pos:line="17" pos:column="14"/></operator><name pos:line="17" pos:column="14">error<pos:position pos:line="17" pos:column="19"/></name> <operator pos:line="17" pos:column="20">=<pos:position pos:line="17" pos:column="21"/></operator> <name pos:line="17" pos:column="22">HTTP_INVALID_HEADER<pos:position pos:line="17" pos:column="41"/></name></expr>;<pos:position pos:line="17" pos:column="42"/></expr_stmt></block></then></if>

        <return pos:line="19" pos:column="9">return <expr><literal type="boolean" pos:line="19" pos:column="16">false<pos:position pos:line="19" pos:column="21"/></literal></expr>;<pos:position pos:line="19" pos:column="22"/></return>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="22" pos:column="5">// TODO: move to httpReplyParseStep()</comment>
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><name pos:line="23" pos:column="9">hdr_len<pos:position pos:line="23" pos:column="16"/></name> <operator pos:line="23" pos:column="17">&gt;<pos:position pos:line="23" pos:column="21"/></operator> <name><name pos:line="23" pos:column="19">Config<pos:position pos:line="23" pos:column="25"/></name><operator pos:line="23" pos:column="25">.<pos:position pos:line="23" pos:column="26"/></operator><name pos:line="23" pos:column="26">maxReplyHeaderSize<pos:position pos:line="23" pos:column="44"/></name></name> <operator pos:line="23" pos:column="45">||<pos:position pos:line="23" pos:column="47"/></operator> <operator pos:line="23" pos:column="48">(<pos:position pos:line="23" pos:column="49"/></operator><name pos:line="23" pos:column="49">hdr_len<pos:position pos:line="23" pos:column="56"/></name> <operator pos:line="23" pos:column="57">&lt;=<pos:position pos:line="23" pos:column="62"/></operator> <literal type="number" pos:line="23" pos:column="60">0<pos:position pos:line="23" pos:column="61"/></literal> <operator pos:line="23" pos:column="62">&amp;&amp;<pos:position pos:line="23" pos:column="72"/></operator> <operator pos:line="23" pos:column="65">(<pos:position pos:line="23" pos:column="66"/></operator><name pos:line="23" pos:column="66">size_t<pos:position pos:line="23" pos:column="72"/></name><operator pos:line="23" pos:column="72">)<pos:position pos:line="23" pos:column="73"/></operator><call><name><name pos:line="23" pos:column="73">buf<pos:position pos:line="23" pos:column="76"/></name><operator pos:line="23" pos:column="76">-&gt;<pos:position pos:line="23" pos:column="81"/></operator><name pos:line="23" pos:column="78">contentSize<pos:position pos:line="23" pos:column="89"/></name></name><argument_list pos:line="23" pos:column="89">()<pos:position pos:line="23" pos:column="91"/></argument_list></call> <operator pos:line="23" pos:column="92">&gt;<pos:position pos:line="23" pos:column="96"/></operator> <name><name pos:line="23" pos:column="94">Config<pos:position pos:line="23" pos:column="100"/></name><operator pos:line="23" pos:column="100">.<pos:position pos:line="23" pos:column="101"/></operator><name pos:line="23" pos:column="101">maxReplyHeaderSize<pos:position pos:line="23" pos:column="119"/></name></name><operator pos:line="23" pos:column="119">)<pos:position pos:line="23" pos:column="120"/></operator></expr>)<pos:position pos:line="23" pos:column="121"/></condition><then pos:line="23" pos:column="121"> <block pos:line="23" pos:column="122">{
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">debugs<pos:position pos:line="24" pos:column="15"/></name><argument_list pos:line="24" pos:column="15">(<argument><expr><literal type="number" pos:line="24" pos:column="16">58<pos:position pos:line="24" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="20">1<pos:position pos:line="24" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="23">"HttpMsg::parse: Too large reply header ("<pos:position pos:line="24" pos:column="65"/></literal> <operator pos:line="24" pos:column="66">&lt;&lt;<pos:position pos:line="24" pos:column="74"/></operator> <name pos:line="24" pos:column="69">hdr_len<pos:position pos:line="24" pos:column="76"/></name> <operator pos:line="24" pos:column="77">&lt;&lt;<pos:position pos:line="24" pos:column="85"/></operator> <literal type="string" pos:line="24" pos:column="80">" &gt; "<pos:position pos:line="24" pos:column="88"/></literal> <operator pos:line="24" pos:column="86">&lt;&lt;<pos:position pos:line="24" pos:column="94"/></operator> <name><name pos:line="24" pos:column="89">Config<pos:position pos:line="24" pos:column="95"/></name><operator pos:line="24" pos:column="95">.<pos:position pos:line="24" pos:column="96"/></operator><name pos:line="24" pos:column="96">maxReplyHeaderSize<pos:position pos:line="24" pos:column="114"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="115"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="116"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="25" pos:column="9">*<pos:position pos:line="25" pos:column="10"/></operator><name pos:line="25" pos:column="10">error<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">=<pos:position pos:line="25" pos:column="17"/></operator> <name pos:line="25" pos:column="18">HTTP_HEADER_TOO_LARGE<pos:position pos:line="25" pos:column="39"/></name></expr>;<pos:position pos:line="25" pos:column="40"/></expr_stmt>
        <return pos:line="26" pos:column="9">return <expr><literal type="boolean" pos:line="26" pos:column="16">false<pos:position pos:line="26" pos:column="21"/></literal></expr>;<pos:position pos:line="26" pos:column="22"/></return>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>

    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><name pos:line="29" pos:column="9">hdr_len<pos:position pos:line="29" pos:column="16"/></name> <operator pos:line="29" pos:column="17">&lt;=<pos:position pos:line="29" pos:column="22"/></operator> <literal type="number" pos:line="29" pos:column="20">0<pos:position pos:line="29" pos:column="21"/></literal></expr>)<pos:position pos:line="29" pos:column="22"/></condition><then pos:line="29" pos:column="22"> <block pos:line="29" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">debugs<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><literal type="number" pos:line="30" pos:column="16">58<pos:position pos:line="30" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="20">3<pos:position pos:line="30" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="23">"HttpMsg::parse: failed to find end of headers (eof: "<pos:position pos:line="30" pos:column="77"/></literal> <operator pos:line="30" pos:column="78">&lt;&lt;<pos:position pos:line="30" pos:column="86"/></operator> <name pos:line="30" pos:column="81">eof<pos:position pos:line="30" pos:column="84"/></name> <operator pos:line="30" pos:column="85">&lt;&lt;<pos:position pos:line="30" pos:column="93"/></operator> <literal type="string" pos:line="30" pos:column="88">") in '"<pos:position pos:line="30" pos:column="96"/></literal> <operator pos:line="30" pos:column="97">&lt;&lt;<pos:position pos:line="30" pos:column="105"/></operator> <call><name><name pos:line="30" pos:column="100">buf<pos:position pos:line="30" pos:column="103"/></name><operator pos:line="30" pos:column="103">-&gt;<pos:position pos:line="30" pos:column="108"/></operator><name pos:line="30" pos:column="105">content<pos:position pos:line="30" pos:column="112"/></name></name><argument_list pos:line="30" pos:column="112">()<pos:position pos:line="30" pos:column="114"/></argument_list></call> <operator pos:line="30" pos:column="115">&lt;&lt;<pos:position pos:line="30" pos:column="123"/></operator> <literal type="string" pos:line="30" pos:column="118">"'"<pos:position pos:line="30" pos:column="121"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="122"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="123"/></expr_stmt>

        <if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name pos:line="32" pos:column="13">eof<pos:position pos:line="32" pos:column="16"/></name></expr>)<pos:position pos:line="32" pos:column="17"/></condition><then pos:line="32" pos:column="17"> <comment type="line" pos:line="32" pos:column="18">// iff we have seen the end, this is an error</comment>
            <block type="pseudo"><expr_stmt><expr><operator pos:line="33" pos:column="13">*<pos:position pos:line="33" pos:column="14"/></operator><name pos:line="33" pos:column="14">error<pos:position pos:line="33" pos:column="19"/></name> <operator pos:line="33" pos:column="20">=<pos:position pos:line="33" pos:column="21"/></operator> <name pos:line="33" pos:column="22">HTTP_INVALID_HEADER<pos:position pos:line="33" pos:column="41"/></name></expr>;<pos:position pos:line="33" pos:column="42"/></expr_stmt></block></then></if>

        <return pos:line="35" pos:column="9">return <expr><literal type="boolean" pos:line="35" pos:column="16">false<pos:position pos:line="35" pos:column="21"/></literal></expr>;<pos:position pos:line="35" pos:column="22"/></return>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><specifier pos:line="38" pos:column="5">const<pos:position pos:line="38" pos:column="10"/></specifier> <name pos:line="38" pos:column="11">int<pos:position pos:line="38" pos:column="14"/></name></type> <name pos:line="38" pos:column="15">res<pos:position pos:line="38" pos:column="18"/></name> <init pos:line="38" pos:column="19">= <expr><call><name pos:line="38" pos:column="21">httpMsgParseStep<pos:position pos:line="38" pos:column="37"/></name><argument_list pos:line="38" pos:column="37">(<argument><expr><call><name><name pos:line="38" pos:column="38">buf<pos:position pos:line="38" pos:column="41"/></name><operator pos:line="38" pos:column="41">-&gt;<pos:position pos:line="38" pos:column="46"/></operator><name pos:line="38" pos:column="43">content<pos:position pos:line="38" pos:column="50"/></name></name><argument_list pos:line="38" pos:column="50">()<pos:position pos:line="38" pos:column="52"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="38" pos:column="54">buf<pos:position pos:line="38" pos:column="57"/></name><operator pos:line="38" pos:column="57">-&gt;<pos:position pos:line="38" pos:column="62"/></operator><name pos:line="38" pos:column="59">contentSize<pos:position pos:line="38" pos:column="70"/></name></name><argument_list pos:line="38" pos:column="70">()<pos:position pos:line="38" pos:column="72"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="38" pos:column="74">eof<pos:position pos:line="38" pos:column="77"/></name></expr></argument>)<pos:position pos:line="38" pos:column="78"/></argument_list></call></expr></init></decl>;<pos:position pos:line="38" pos:column="79"/></decl_stmt>

    <if pos:line="40" pos:column="5">if <condition pos:line="40" pos:column="8">(<expr><name pos:line="40" pos:column="9">res<pos:position pos:line="40" pos:column="12"/></name> <operator pos:line="40" pos:column="13">&lt;<pos:position pos:line="40" pos:column="17"/></operator> <literal type="number" pos:line="40" pos:column="15">0<pos:position pos:line="40" pos:column="16"/></literal></expr>)<pos:position pos:line="40" pos:column="17"/></condition><then pos:line="40" pos:column="17"> <block pos:line="40" pos:column="18">{ <comment type="line" pos:line="40" pos:column="20">// error</comment>
        <expr_stmt><expr><call><name pos:line="41" pos:column="9">debugs<pos:position pos:line="41" pos:column="15"/></name><argument_list pos:line="41" pos:column="15">(<argument><expr><literal type="number" pos:line="41" pos:column="16">58<pos:position pos:line="41" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="20">3<pos:position pos:line="41" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="23">"HttpMsg::parse: cannot parse isolated headers in '"<pos:position pos:line="41" pos:column="75"/></literal> <operator pos:line="41" pos:column="76">&lt;&lt;<pos:position pos:line="41" pos:column="84"/></operator> <call><name><name pos:line="41" pos:column="79">buf<pos:position pos:line="41" pos:column="82"/></name><operator pos:line="41" pos:column="82">-&gt;<pos:position pos:line="41" pos:column="87"/></operator><name pos:line="41" pos:column="84">content<pos:position pos:line="41" pos:column="91"/></name></name><argument_list pos:line="41" pos:column="91">()<pos:position pos:line="41" pos:column="93"/></argument_list></call> <operator pos:line="41" pos:column="94">&lt;&lt;<pos:position pos:line="41" pos:column="102"/></operator> <literal type="string" pos:line="41" pos:column="97">"'"<pos:position pos:line="41" pos:column="100"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="101"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="102"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="42" pos:column="9">*<pos:position pos:line="42" pos:column="10"/></operator><name pos:line="42" pos:column="10">error<pos:position pos:line="42" pos:column="15"/></name> <operator pos:line="42" pos:column="16">=<pos:position pos:line="42" pos:column="17"/></operator> <name pos:line="42" pos:column="18">HTTP_INVALID_HEADER<pos:position pos:line="42" pos:column="37"/></name></expr>;<pos:position pos:line="42" pos:column="38"/></expr_stmt>
        <return pos:line="43" pos:column="9">return <expr><literal type="boolean" pos:line="43" pos:column="16">false<pos:position pos:line="43" pos:column="21"/></literal></expr>;<pos:position pos:line="43" pos:column="22"/></return>
    }<pos:position pos:line="44" pos:column="6"/></block></then></if>

    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><name pos:line="46" pos:column="9">res<pos:position pos:line="46" pos:column="12"/></name> <operator pos:line="46" pos:column="13">==<pos:position pos:line="46" pos:column="15"/></operator> <literal type="number" pos:line="46" pos:column="16">0<pos:position pos:line="46" pos:column="17"/></literal></expr>)<pos:position pos:line="46" pos:column="18"/></condition><then pos:line="46" pos:column="18"> <block pos:line="46" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="47" pos:column="9">debugs<pos:position pos:line="47" pos:column="15"/></name><argument_list pos:line="47" pos:column="15">(<argument><expr><literal type="number" pos:line="47" pos:column="16">58<pos:position pos:line="47" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="20">2<pos:position pos:line="47" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="23">"HttpMsg::parse: strange, need more data near '"<pos:position pos:line="47" pos:column="71"/></literal> <operator pos:line="47" pos:column="72">&lt;&lt;<pos:position pos:line="47" pos:column="80"/></operator> <call><name><name pos:line="47" pos:column="75">buf<pos:position pos:line="47" pos:column="78"/></name><operator pos:line="47" pos:column="78">-&gt;<pos:position pos:line="47" pos:column="83"/></operator><name pos:line="47" pos:column="80">content<pos:position pos:line="47" pos:column="87"/></name></name><argument_list pos:line="47" pos:column="87">()<pos:position pos:line="47" pos:column="89"/></argument_list></call> <operator pos:line="47" pos:column="90">&lt;&lt;<pos:position pos:line="47" pos:column="98"/></operator> <literal type="string" pos:line="47" pos:column="93">"'"<pos:position pos:line="47" pos:column="96"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="98"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="48" pos:column="9">*<pos:position pos:line="48" pos:column="10"/></operator><name pos:line="48" pos:column="10">error<pos:position pos:line="48" pos:column="15"/></name> <operator pos:line="48" pos:column="16">=<pos:position pos:line="48" pos:column="17"/></operator> <name pos:line="48" pos:column="18">HTTP_INVALID_HEADER<pos:position pos:line="48" pos:column="37"/></name></expr>;<pos:position pos:line="48" pos:column="38"/></expr_stmt>
        <return pos:line="49" pos:column="9">return <expr><literal type="boolean" pos:line="49" pos:column="16">false<pos:position pos:line="49" pos:column="21"/></literal></expr>;<pos:position pos:line="49" pos:column="22"/></return> <comment type="line" pos:line="49" pos:column="23">// but this should not happen due to headersEnd() above</comment>
    }<pos:position pos:line="50" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="52" pos:column="5">assert<pos:position pos:line="52" pos:column="11"/></name><argument_list pos:line="52" pos:column="11">(<argument><expr><name pos:line="52" pos:column="12">res<pos:position pos:line="52" pos:column="15"/></name> <operator pos:line="52" pos:column="16">&gt;<pos:position pos:line="52" pos:column="20"/></operator> <literal type="number" pos:line="52" pos:column="18">0<pos:position pos:line="52" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="53" pos:column="5">debugs<pos:position pos:line="53" pos:column="11"/></name><argument_list pos:line="53" pos:column="11">(<argument><expr><literal type="number" pos:line="53" pos:column="12">58<pos:position pos:line="53" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="53" pos:column="16">9<pos:position pos:line="53" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="19">"HttpMsg::parse success ("<pos:position pos:line="53" pos:column="45"/></literal> <operator pos:line="53" pos:column="46">&lt;&lt;<pos:position pos:line="53" pos:column="54"/></operator> <name pos:line="53" pos:column="49">hdr_len<pos:position pos:line="53" pos:column="56"/></name> <operator pos:line="53" pos:column="57">&lt;&lt;<pos:position pos:line="53" pos:column="65"/></operator> <literal type="string" pos:line="53" pos:column="60">" bytes) near '"<pos:position pos:line="53" pos:column="76"/></literal> <operator pos:line="53" pos:column="77">&lt;&lt;<pos:position pos:line="53" pos:column="85"/></operator> <call><name><name pos:line="53" pos:column="80">buf<pos:position pos:line="53" pos:column="83"/></name><operator pos:line="53" pos:column="83">-&gt;<pos:position pos:line="53" pos:column="88"/></operator><name pos:line="53" pos:column="85">content<pos:position pos:line="53" pos:column="92"/></name></name><argument_list pos:line="53" pos:column="92">()<pos:position pos:line="53" pos:column="94"/></argument_list></call> <operator pos:line="53" pos:column="95">&lt;&lt;<pos:position pos:line="53" pos:column="103"/></operator> <literal type="string" pos:line="53" pos:column="98">"'"<pos:position pos:line="53" pos:column="101"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="102"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="103"/></expr_stmt>

    <if pos:line="55" pos:column="5">if <condition pos:line="55" pos:column="8">(<expr><name pos:line="55" pos:column="9">hdr_sz<pos:position pos:line="55" pos:column="15"/></name> <operator pos:line="55" pos:column="16">!=<pos:position pos:line="55" pos:column="18"/></operator> <operator pos:line="55" pos:column="19">(<pos:position pos:line="55" pos:column="20"/></operator><name pos:line="55" pos:column="20">int<pos:position pos:line="55" pos:column="23"/></name><operator pos:line="55" pos:column="23">)<pos:position pos:line="55" pos:column="24"/></operator><name pos:line="55" pos:column="24">hdr_len<pos:position pos:line="55" pos:column="31"/></name></expr>)<pos:position pos:line="55" pos:column="32"/></condition><then pos:line="55" pos:column="32"> <block pos:line="55" pos:column="33">{
        <expr_stmt><expr><call><name pos:line="56" pos:column="9">debugs<pos:position pos:line="56" pos:column="15"/></name><argument_list pos:line="56" pos:column="15">(<argument><expr><literal type="number" pos:line="56" pos:column="16">58<pos:position pos:line="56" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="56" pos:column="20">1<pos:position pos:line="56" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="23">"internal HttpMsg::parse vs. headersEnd error: "<pos:position pos:line="56" pos:column="71"/></literal> <operator pos:line="56" pos:column="72">&lt;&lt;<pos:position pos:line="56" pos:column="80"/></operator>
               <name pos:line="57" pos:column="16">hdr_sz<pos:position pos:line="57" pos:column="22"/></name> <operator pos:line="57" pos:column="23">&lt;&lt;<pos:position pos:line="57" pos:column="31"/></operator> <literal type="string" pos:line="57" pos:column="26">" != "<pos:position pos:line="57" pos:column="32"/></literal> <operator pos:line="57" pos:column="33">&lt;&lt;<pos:position pos:line="57" pos:column="41"/></operator> <name pos:line="57" pos:column="36">hdr_len<pos:position pos:line="57" pos:column="43"/></name></expr></argument>)<pos:position pos:line="57" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><name pos:line="58" pos:column="9">hdr_sz<pos:position pos:line="58" pos:column="15"/></name> <operator pos:line="58" pos:column="16">=<pos:position pos:line="58" pos:column="17"/></operator> <operator pos:line="58" pos:column="18">(<pos:position pos:line="58" pos:column="19"/></operator><name pos:line="58" pos:column="19">int<pos:position pos:line="58" pos:column="22"/></name><operator pos:line="58" pos:column="22">)<pos:position pos:line="58" pos:column="23"/></operator><name pos:line="58" pos:column="23">hdr_len<pos:position pos:line="58" pos:column="30"/></name></expr>;<pos:position pos:line="58" pos:column="31"/></expr_stmt> <comment type="line" pos:line="58" pos:column="32">// because old http.cc code used hdr_len</comment>
    }<pos:position pos:line="59" pos:column="6"/></block></then></if>

    <return pos:line="61" pos:column="5">return <expr><literal type="boolean" pos:line="61" pos:column="12">true<pos:position pos:line="61" pos:column="16"/></literal></expr>;<pos:position pos:line="61" pos:column="17"/></return>
}<pos:position pos:line="62" pos:column="2"/></block></function></unit>
