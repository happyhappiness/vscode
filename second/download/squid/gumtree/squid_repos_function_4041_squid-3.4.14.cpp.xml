<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4041_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Icap<pos:position pos:line="1" pos:column="22"/></name><operator pos:line="1" pos:column="22">::<pos:position pos:line="1" pos:column="24"/></operator><name pos:line="1" pos:column="24">ModXact<pos:position pos:line="1" pos:column="31"/></name><operator pos:line="1" pos:column="31">::<pos:position pos:line="1" pos:column="33"/></operator><name pos:line="1" pos:column="33">writeSomeBody<pos:position pos:line="1" pos:column="46"/></name></name><parameter_list pos:line="1" pos:column="46">(<parameter><decl><type><specifier pos:line="1" pos:column="47">const<pos:position pos:line="1" pos:column="52"/></specifier> <name pos:line="1" pos:column="53">char<pos:position pos:line="1" pos:column="57"/></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">label<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="66">size_t<pos:position pos:line="1" pos:column="72"/></name></type> <name pos:line="1" pos:column="73">size<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="78"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="3" pos:column="5">Must<pos:position pos:line="3" pos:column="9"/></name><argument_list pos:line="3" pos:column="9">(<argument><expr><operator pos:line="3" pos:column="10">!<pos:position pos:line="3" pos:column="11"/></operator><name pos:line="3" pos:column="11">writer<pos:position pos:line="3" pos:column="17"/></name> <operator pos:line="3" pos:column="18">&amp;&amp;<pos:position pos:line="3" pos:column="28"/></operator> <name><name pos:line="3" pos:column="21">state<pos:position pos:line="3" pos:column="26"/></name><operator pos:line="3" pos:column="26">.<pos:position pos:line="3" pos:column="27"/></operator><name pos:line="3" pos:column="27">writing<pos:position pos:line="3" pos:column="34"/></name></name> <operator pos:line="3" pos:column="35">&lt;<pos:position pos:line="3" pos:column="39"/></operator> <name><name pos:line="3" pos:column="37">state<pos:position pos:line="3" pos:column="42"/></name><operator pos:line="3" pos:column="42">.<pos:position pos:line="3" pos:column="43"/></operator><name pos:line="3" pos:column="43">writingAlmostDone<pos:position pos:line="3" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="3" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">Must<pos:position pos:line="4" pos:column="9"/></name><argument_list pos:line="4" pos:column="9">(<argument><expr><name><name pos:line="4" pos:column="10">virgin<pos:position pos:line="4" pos:column="16"/></name><operator pos:line="4" pos:column="16">.<pos:position pos:line="4" pos:column="17"/></operator><name pos:line="4" pos:column="17">body_pipe<pos:position pos:line="4" pos:column="26"/></name></name> <operator pos:line="4" pos:column="27">!=<pos:position pos:line="4" pos:column="29"/></operator> <name pos:line="4" pos:column="30">NULL<pos:position pos:line="4" pos:column="34"/></name></expr></argument>)<pos:position pos:line="4" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">debugs<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><literal type="number" pos:line="5" pos:column="12">93<pos:position pos:line="5" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="16">8<pos:position pos:line="5" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="5" pos:column="19">HERE<pos:position pos:line="5" pos:column="23"/></name> <operator pos:line="5" pos:column="24">&lt;&lt;<pos:position pos:line="5" pos:column="32"/></operator> <literal type="string" pos:line="5" pos:column="27">"will write up to "<pos:position pos:line="5" pos:column="46"/></literal> <operator pos:line="5" pos:column="47">&lt;&lt;<pos:position pos:line="5" pos:column="55"/></operator> <name pos:line="5" pos:column="50">size<pos:position pos:line="5" pos:column="54"/></name> <operator pos:line="5" pos:column="55">&lt;&lt;<pos:position pos:line="5" pos:column="63"/></operator> <literal type="string" pos:line="5" pos:column="58">" bytes of "<pos:position pos:line="5" pos:column="70"/></literal> <operator pos:line="5" pos:column="71">&lt;&lt;<pos:position pos:line="5" pos:column="79"/></operator>
           <name pos:line="6" pos:column="12">label<pos:position pos:line="6" pos:column="17"/></name></expr></argument>)<pos:position pos:line="6" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="19"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="8" pos:column="5">MemBuf<pos:position pos:line="8" pos:column="11"/></name></type> <name pos:line="8" pos:column="12">writeBuf<pos:position pos:line="8" pos:column="20"/></name></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt> <comment type="line" pos:line="8" pos:column="22">// TODO: suggest a min size based on size and lastChunk</comment>

    <expr_stmt><expr><call><name><name pos:line="10" pos:column="5">writeBuf<pos:position pos:line="10" pos:column="13"/></name><operator pos:line="10" pos:column="13">.<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">init<pos:position pos:line="10" pos:column="18"/></name></name><argument_list pos:line="10" pos:column="18">()<pos:position pos:line="10" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="21"/></expr_stmt> <comment type="line" pos:line="10" pos:column="22">// note: we assume that last-chunk will fit</comment>

    <decl_stmt><decl><type><specifier pos:line="12" pos:column="5">const<pos:position pos:line="12" pos:column="10"/></specifier> <name pos:line="12" pos:column="11">size_t<pos:position pos:line="12" pos:column="17"/></name></type> <name pos:line="12" pos:column="18">writableSize<pos:position pos:line="12" pos:column="30"/></name> <init pos:line="12" pos:column="31">= <expr><call><name pos:line="12" pos:column="33">virginContentSize<pos:position pos:line="12" pos:column="50"/></name><argument_list pos:line="12" pos:column="50">(<argument><expr><name pos:line="12" pos:column="51">virginBodyWriting<pos:position pos:line="12" pos:column="68"/></name></expr></argument>)<pos:position pos:line="12" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="70"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="13" pos:column="5">const<pos:position pos:line="13" pos:column="10"/></specifier> <name pos:line="13" pos:column="11">size_t<pos:position pos:line="13" pos:column="17"/></name></type> <name pos:line="13" pos:column="18">chunkSize<pos:position pos:line="13" pos:column="27"/></name> <init pos:line="13" pos:column="28">= <expr><call><name pos:line="13" pos:column="30">min<pos:position pos:line="13" pos:column="33"/></name><argument_list pos:line="13" pos:column="33">(<argument><expr><name pos:line="13" pos:column="34">writableSize<pos:position pos:line="13" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="48">size<pos:position pos:line="13" pos:column="52"/></name></expr></argument>)<pos:position pos:line="13" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="54"/></decl_stmt>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">chunkSize<pos:position pos:line="15" pos:column="18"/></name></expr>)<pos:position pos:line="15" pos:column="19"/></condition><then pos:line="15" pos:column="19"> <block pos:line="15" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">debugs<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><literal type="number" pos:line="16" pos:column="16">93<pos:position pos:line="16" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="20">7<pos:position pos:line="16" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="23">HERE<pos:position pos:line="16" pos:column="27"/></name> <operator pos:line="16" pos:column="28">&lt;&lt;<pos:position pos:line="16" pos:column="36"/></operator> <literal type="string" pos:line="16" pos:column="31">"will write "<pos:position pos:line="16" pos:column="44"/></literal> <operator pos:line="16" pos:column="45">&lt;&lt;<pos:position pos:line="16" pos:column="53"/></operator> <name pos:line="16" pos:column="48">chunkSize<pos:position pos:line="16" pos:column="57"/></name> <operator pos:line="16" pos:column="58">&lt;&lt;<pos:position pos:line="16" pos:column="66"/></operator>
               <literal type="string" pos:line="17" pos:column="16">"-byte chunk of "<pos:position pos:line="17" pos:column="33"/></literal> <operator pos:line="17" pos:column="34">&lt;&lt;<pos:position pos:line="17" pos:column="42"/></operator> <name pos:line="17" pos:column="37">label<pos:position pos:line="17" pos:column="42"/></name></expr></argument>)<pos:position pos:line="17" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="44"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="19" pos:column="9">openChunk<pos:position pos:line="19" pos:column="18"/></name><argument_list pos:line="19" pos:column="18">(<argument><expr><name pos:line="19" pos:column="19">writeBuf<pos:position pos:line="19" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="29">chunkSize<pos:position pos:line="19" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="19" pos:column="40">false<pos:position pos:line="19" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="20" pos:column="9">writeBuf<pos:position pos:line="20" pos:column="17"/></name><operator pos:line="20" pos:column="17">.<pos:position pos:line="20" pos:column="18"/></operator><name pos:line="20" pos:column="18">append<pos:position pos:line="20" pos:column="24"/></name></name><argument_list pos:line="20" pos:column="24">(<argument><expr><call><name pos:line="20" pos:column="25">virginContentData<pos:position pos:line="20" pos:column="42"/></name><argument_list pos:line="20" pos:column="42">(<argument><expr><name pos:line="20" pos:column="43">virginBodyWriting<pos:position pos:line="20" pos:column="60"/></name></expr></argument>)<pos:position pos:line="20" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="20" pos:column="63">chunkSize<pos:position pos:line="20" pos:column="72"/></name></expr></argument>)<pos:position pos:line="20" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="74"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">closeChunk<pos:position pos:line="21" pos:column="19"/></name><argument_list pos:line="21" pos:column="19">(<argument><expr><name pos:line="21" pos:column="20">writeBuf<pos:position pos:line="21" pos:column="28"/></name></expr></argument>)<pos:position pos:line="21" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="30"/></expr_stmt>

        <expr_stmt><expr><call><name><name pos:line="23" pos:column="9">virginBodyWriting<pos:position pos:line="23" pos:column="26"/></name><operator pos:line="23" pos:column="26">.<pos:position pos:line="23" pos:column="27"/></operator><name pos:line="23" pos:column="27">progress<pos:position pos:line="23" pos:column="35"/></name></name><argument_list pos:line="23" pos:column="35">(<argument><expr><name pos:line="23" pos:column="36">chunkSize<pos:position pos:line="23" pos:column="45"/></name></expr></argument>)<pos:position pos:line="23" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">virginConsume<pos:position pos:line="24" pos:column="22"/></name><argument_list pos:line="24" pos:column="22">()<pos:position pos:line="24" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="25" pos:column="6"/></block></then> <else pos:line="25" pos:column="7">else <block pos:line="25" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">debugs<pos:position pos:line="26" pos:column="15"/></name><argument_list pos:line="26" pos:column="15">(<argument><expr><literal type="number" pos:line="26" pos:column="16">93<pos:position pos:line="26" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="20">7<pos:position pos:line="26" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="23">HERE<pos:position pos:line="26" pos:column="27"/></name> <operator pos:line="26" pos:column="28">&lt;&lt;<pos:position pos:line="26" pos:column="36"/></operator> <literal type="string" pos:line="26" pos:column="31">"has no writable "<pos:position pos:line="26" pos:column="49"/></literal> <operator pos:line="26" pos:column="50">&lt;&lt;<pos:position pos:line="26" pos:column="58"/></operator> <name pos:line="26" pos:column="53">label<pos:position pos:line="26" pos:column="58"/></name> <operator pos:line="26" pos:column="59">&lt;&lt;<pos:position pos:line="26" pos:column="67"/></operator> <literal type="string" pos:line="26" pos:column="62">" content"<pos:position pos:line="26" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="74"/></expr_stmt>
    }<pos:position pos:line="27" pos:column="6"/></block></else></if>

    <decl_stmt><decl><type><specifier pos:line="29" pos:column="5">const<pos:position pos:line="29" pos:column="10"/></specifier> <name pos:line="29" pos:column="11">bool<pos:position pos:line="29" pos:column="15"/></name></type> <name pos:line="29" pos:column="16">wroteEof<pos:position pos:line="29" pos:column="24"/></name> <init pos:line="29" pos:column="25">= <expr><call><name pos:line="29" pos:column="27">virginBodyEndReached<pos:position pos:line="29" pos:column="47"/></name><argument_list pos:line="29" pos:column="47">(<argument><expr><name pos:line="29" pos:column="48">virginBodyWriting<pos:position pos:line="29" pos:column="65"/></name></expr></argument>)<pos:position pos:line="29" pos:column="66"/></argument_list></call></expr></init></decl>;<pos:position pos:line="29" pos:column="67"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="30" pos:column="5">bool<pos:position pos:line="30" pos:column="9"/></name></type> <name pos:line="30" pos:column="10">lastChunk<pos:position pos:line="30" pos:column="19"/></name> <init pos:line="30" pos:column="20">= <expr><name pos:line="30" pos:column="22">wroteEof<pos:position pos:line="30" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="30" pos:column="31"/></decl_stmt>
    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><name><name pos:line="31" pos:column="9">state<pos:position pos:line="31" pos:column="14"/></name><operator pos:line="31" pos:column="14">.<pos:position pos:line="31" pos:column="15"/></operator><name pos:line="31" pos:column="15">writing<pos:position pos:line="31" pos:column="22"/></name></name> <operator pos:line="31" pos:column="23">==<pos:position pos:line="31" pos:column="25"/></operator> <name><name pos:line="31" pos:column="26">State<pos:position pos:line="31" pos:column="31"/></name><operator pos:line="31" pos:column="31">::<pos:position pos:line="31" pos:column="33"/></operator><name pos:line="31" pos:column="33">writingPreview<pos:position pos:line="31" pos:column="47"/></name></name></expr>)<pos:position pos:line="31" pos:column="48"/></condition><then pos:line="31" pos:column="48"> <block pos:line="31" pos:column="49">{
        <expr_stmt><expr><call><name><name pos:line="32" pos:column="9">preview<pos:position pos:line="32" pos:column="16"/></name><operator pos:line="32" pos:column="16">.<pos:position pos:line="32" pos:column="17"/></operator><name pos:line="32" pos:column="17">wrote<pos:position pos:line="32" pos:column="22"/></name></name><argument_list pos:line="32" pos:column="22">(<argument><expr><name pos:line="32" pos:column="23">chunkSize<pos:position pos:line="32" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="34">wroteEof<pos:position pos:line="32" pos:column="42"/></name></expr></argument>)<pos:position pos:line="32" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="44"/></expr_stmt> <comment type="line" pos:line="32" pos:column="45">// even if wrote nothing</comment>
        <expr_stmt><expr><name pos:line="33" pos:column="9">lastChunk<pos:position pos:line="33" pos:column="18"/></name> <operator pos:line="33" pos:column="19">=<pos:position pos:line="33" pos:column="20"/></operator> <name pos:line="33" pos:column="21">lastChunk<pos:position pos:line="33" pos:column="30"/></name> <operator pos:line="33" pos:column="31">||<pos:position pos:line="33" pos:column="33"/></operator> <call><name><name pos:line="33" pos:column="34">preview<pos:position pos:line="33" pos:column="41"/></name><operator pos:line="33" pos:column="41">.<pos:position pos:line="33" pos:column="42"/></operator><name pos:line="33" pos:column="42">done<pos:position pos:line="33" pos:column="46"/></name></name><argument_list pos:line="33" pos:column="46">()<pos:position pos:line="33" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="49"/></expr_stmt>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>

    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><name pos:line="36" pos:column="9">lastChunk<pos:position pos:line="36" pos:column="18"/></name></expr>)<pos:position pos:line="36" pos:column="19"/></condition><then pos:line="36" pos:column="19"> <block pos:line="36" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">debugs<pos:position pos:line="37" pos:column="15"/></name><argument_list pos:line="37" pos:column="15">(<argument><expr><literal type="number" pos:line="37" pos:column="16">93<pos:position pos:line="37" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="20">8<pos:position pos:line="37" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="23">HERE<pos:position pos:line="37" pos:column="27"/></name> <operator pos:line="37" pos:column="28">&lt;&lt;<pos:position pos:line="37" pos:column="36"/></operator> <literal type="string" pos:line="37" pos:column="31">"will write last-chunk of "<pos:position pos:line="37" pos:column="58"/></literal> <operator pos:line="37" pos:column="59">&lt;&lt;<pos:position pos:line="37" pos:column="67"/></operator> <name pos:line="37" pos:column="62">label<pos:position pos:line="37" pos:column="67"/></name></expr></argument>)<pos:position pos:line="37" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="69"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="38" pos:column="9">addLastRequestChunk<pos:position pos:line="38" pos:column="28"/></name><argument_list pos:line="38" pos:column="28">(<argument><expr><name pos:line="38" pos:column="29">writeBuf<pos:position pos:line="38" pos:column="37"/></name></expr></argument>)<pos:position pos:line="38" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="41" pos:column="5">debugs<pos:position pos:line="41" pos:column="11"/></name><argument_list pos:line="41" pos:column="11">(<argument><expr><literal type="number" pos:line="41" pos:column="12">93<pos:position pos:line="41" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="16">7<pos:position pos:line="41" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="19">HERE<pos:position pos:line="41" pos:column="23"/></name> <operator pos:line="41" pos:column="24">&lt;&lt;<pos:position pos:line="41" pos:column="32"/></operator> <literal type="string" pos:line="41" pos:column="27">"will write "<pos:position pos:line="41" pos:column="40"/></literal> <operator pos:line="41" pos:column="41">&lt;&lt;<pos:position pos:line="41" pos:column="49"/></operator> <call><name><name pos:line="41" pos:column="44">writeBuf<pos:position pos:line="41" pos:column="52"/></name><operator pos:line="41" pos:column="52">.<pos:position pos:line="41" pos:column="53"/></operator><name pos:line="41" pos:column="53">contentSize<pos:position pos:line="41" pos:column="64"/></name></name><argument_list pos:line="41" pos:column="64">()<pos:position pos:line="41" pos:column="66"/></argument_list></call>
           <operator pos:line="42" pos:column="12">&lt;&lt;<pos:position pos:line="42" pos:column="20"/></operator> <literal type="string" pos:line="42" pos:column="15">" raw bytes of "<pos:position pos:line="42" pos:column="31"/></literal> <operator pos:line="42" pos:column="32">&lt;&lt;<pos:position pos:line="42" pos:column="40"/></operator> <name pos:line="42" pos:column="35">label<pos:position pos:line="42" pos:column="40"/></name></expr></argument>)<pos:position pos:line="42" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="42"/></expr_stmt>

    <if pos:line="44" pos:column="5">if <condition pos:line="44" pos:column="8">(<expr><call><name><name pos:line="44" pos:column="9">writeBuf<pos:position pos:line="44" pos:column="17"/></name><operator pos:line="44" pos:column="17">.<pos:position pos:line="44" pos:column="18"/></operator><name pos:line="44" pos:column="18">hasContent<pos:position pos:line="44" pos:column="28"/></name></name><argument_list pos:line="44" pos:column="28">()<pos:position pos:line="44" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="31"/></condition><then pos:line="44" pos:column="31"> <block pos:line="44" pos:column="32">{
        <expr_stmt><expr><call><name pos:line="45" pos:column="9">scheduleWrite<pos:position pos:line="45" pos:column="22"/></name><argument_list pos:line="45" pos:column="22">(<argument><expr><name pos:line="45" pos:column="23">writeBuf<pos:position pos:line="45" pos:column="31"/></name></expr></argument>)<pos:position pos:line="45" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="33"/></expr_stmt> <comment type="line" pos:line="45" pos:column="34">// comm will free the chunk</comment>
    }<pos:position pos:line="46" pos:column="6"/></block></then> <else pos:line="46" pos:column="7">else <block pos:line="46" pos:column="12">{
        <expr_stmt><expr><call><name><name pos:line="47" pos:column="9">writeBuf<pos:position pos:line="47" pos:column="17"/></name><operator pos:line="47" pos:column="17">.<pos:position pos:line="47" pos:column="18"/></operator><name pos:line="47" pos:column="18">clean<pos:position pos:line="47" pos:column="23"/></name></name><argument_list pos:line="47" pos:column="23">()<pos:position pos:line="47" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="48" pos:column="6"/></block></else></if>
}<pos:position pos:line="49" pos:column="2"/></block></function></unit>
