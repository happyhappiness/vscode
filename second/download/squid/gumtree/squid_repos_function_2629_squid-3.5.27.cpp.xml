<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2629_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">death<pos:position pos:line="2" pos:column="6"/></name><parameter_list pos:line="2" pos:column="6">(<parameter><decl><type><name pos:line="2" pos:column="7">int<pos:position pos:line="2" pos:column="10"/></name></type> <name pos:line="2" pos:column="11">sig<pos:position pos:line="2" pos:column="14"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="15"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">sig<pos:position pos:line="4" pos:column="12"/></name> <operator pos:line="4" pos:column="13">==<pos:position pos:line="4" pos:column="15"/></operator> <name pos:line="4" pos:column="16">SIGSEGV<pos:position pos:line="4" pos:column="23"/></name></expr>)<pos:position pos:line="4" pos:column="24"/></condition><then pos:line="4" pos:column="24">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="5" pos:column="9">fprintf<pos:position pos:line="5" pos:column="16"/></name><argument_list pos:line="5" pos:column="16">(<argument><expr><name pos:line="5" pos:column="17">debug_log<pos:position pos:line="5" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="28">"FATAL: Received Segment Violation...dying.\n"<pos:position pos:line="5" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="76"/></expr_stmt></block></then>
    <elseif pos:line="6" pos:column="5">else <if pos:line="6" pos:column="10">if <condition pos:line="6" pos:column="13">(<expr><name pos:line="6" pos:column="14">sig<pos:position pos:line="6" pos:column="17"/></name> <operator pos:line="6" pos:column="18">==<pos:position pos:line="6" pos:column="20"/></operator> <name pos:line="6" pos:column="21">SIGBUS<pos:position pos:line="6" pos:column="27"/></name></expr>)<pos:position pos:line="6" pos:column="28"/></condition><then pos:line="6" pos:column="28">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="7" pos:column="9">fprintf<pos:position pos:line="7" pos:column="16"/></name><argument_list pos:line="7" pos:column="16">(<argument><expr><name pos:line="7" pos:column="17">debug_log<pos:position pos:line="7" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="28">"FATAL: Received Bus Error...dying.\n"<pos:position pos:line="7" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="68"/></expr_stmt></block></then></if></elseif>
    <else pos:line="8" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="9" pos:column="9">fprintf<pos:position pos:line="9" pos:column="16"/></name><argument_list pos:line="9" pos:column="16">(<argument><expr><name pos:line="9" pos:column="17">debug_log<pos:position pos:line="9" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="28">"FATAL: Received signal %d...dying.\n"<pos:position pos:line="9" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="68">sig<pos:position pos:line="9" pos:column="71"/></name></expr></argument>)<pos:position pos:line="9" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="73"/></expr_stmt></block></else></if>

<cpp:if pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">if<pos:position pos:line="11" pos:column="4"/></cpp:directive> <expr><name pos:line="11" pos:column="5">PRINT_STACK_TRACE<pos:position pos:line="11" pos:column="22"/></name></expr></cpp:if>
<cpp:if pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">if<pos:position pos:line="12" pos:column="4"/></cpp:directive> <expr><name pos:line="12" pos:column="5">_SQUID_HPUX_<pos:position pos:line="12" pos:column="17"/></name></expr></cpp:if>
    <block pos:line="13" pos:column="5">{
        <decl_stmt><decl><specifier pos:line="14" pos:column="9">extern<pos:position pos:line="14" pos:column="15"/></specifier> <type><name pos:line="14" pos:column="16">void<pos:position pos:line="14" pos:column="20"/></name></type> <name pos:line="14" pos:column="21">U_STACK_TRACE<pos:position pos:line="14" pos:column="34"/></name><argument_list pos:line="14" pos:column="34">(<argument><expr><name pos:line="14" pos:column="35">void<pos:position pos:line="14" pos:column="39"/></name></expr></argument>)<pos:position pos:line="14" pos:column="40"/></argument_list></decl>;<pos:position pos:line="14" pos:column="41"/></decl_stmt>    <comment type="block" pos:line="14" pos:column="45">/* link with -lcl */</comment>
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">fflush<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><name pos:line="15" pos:column="16">debug_log<pos:position pos:line="15" pos:column="25"/></name></expr></argument>)<pos:position pos:line="15" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">dup2<pos:position pos:line="16" pos:column="13"/></name><argument_list pos:line="16" pos:column="13">(<argument><expr><call><name pos:line="16" pos:column="14">fileno<pos:position pos:line="16" pos:column="20"/></name><argument_list pos:line="16" pos:column="20">(<argument><expr><name pos:line="16" pos:column="21">debug_log<pos:position pos:line="16" pos:column="30"/></name></expr></argument>)<pos:position pos:line="16" pos:column="31"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="33">2<pos:position pos:line="16" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">U_STACK_TRACE<pos:position pos:line="17" pos:column="22"/></name><argument_list pos:line="17" pos:column="22">()<pos:position pos:line="17" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="18" pos:column="6"/></block>

<cpp:endif pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">endif<pos:position pos:line="20" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="20" pos:column="8">/* _SQUID_HPUX_ */</comment>
<cpp:if pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">if<pos:position pos:line="21" pos:column="4"/></cpp:directive> <expr><name pos:line="21" pos:column="5">_SQUID_SOLARIS_<pos:position pos:line="21" pos:column="20"/></name> <operator pos:line="21" pos:column="21">&amp;&amp;<pos:position pos:line="21" pos:column="31"/></operator> <name pos:line="21" pos:column="24">HAVE_LIBOPCOM_STACK<pos:position pos:line="21" pos:column="43"/></name></expr></cpp:if>
    <block pos:line="22" pos:column="5">{   <comment type="block" pos:line="22" pos:column="9">/* get ftp://opcom.sun.ca/pub/tars/opcom_stack.tar.gz and */</comment>
        <decl_stmt><decl><specifier pos:line="23" pos:column="9">extern<pos:position pos:line="23" pos:column="15"/></specifier> <type><name pos:line="23" pos:column="16">void<pos:position pos:line="23" pos:column="20"/></name></type> <name pos:line="23" pos:column="21">opcom_stack_trace<pos:position pos:line="23" pos:column="38"/></name><argument_list pos:line="23" pos:column="38">(<argument><expr><name pos:line="23" pos:column="39">void<pos:position pos:line="23" pos:column="43"/></name></expr></argument>)<pos:position pos:line="23" pos:column="44"/></argument_list></decl>;<pos:position pos:line="23" pos:column="45"/></decl_stmt>    <comment type="block" pos:line="23" pos:column="49">/* link with -lopcom_stack */</comment>
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">fflush<pos:position pos:line="24" pos:column="15"/></name><argument_list pos:line="24" pos:column="15">(<argument><expr><name pos:line="24" pos:column="16">debug_log<pos:position pos:line="24" pos:column="25"/></name></expr></argument>)<pos:position pos:line="24" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">dup2<pos:position pos:line="25" pos:column="13"/></name><argument_list pos:line="25" pos:column="13">(<argument><expr><call><name pos:line="25" pos:column="14">fileno<pos:position pos:line="25" pos:column="20"/></name><argument_list pos:line="25" pos:column="20">(<argument><expr><name pos:line="25" pos:column="21">debug_log<pos:position pos:line="25" pos:column="30"/></name></expr></argument>)<pos:position pos:line="25" pos:column="31"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="25" pos:column="33">fileno<pos:position pos:line="25" pos:column="39"/></name><argument_list pos:line="25" pos:column="39">(<argument><expr><name pos:line="25" pos:column="40">stdout<pos:position pos:line="25" pos:column="46"/></name></expr></argument>)<pos:position pos:line="25" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">opcom_stack_trace<pos:position pos:line="26" pos:column="26"/></name><argument_list pos:line="26" pos:column="26">()<pos:position pos:line="26" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">fflush<pos:position pos:line="27" pos:column="15"/></name><argument_list pos:line="27" pos:column="15">(<argument><expr><name pos:line="27" pos:column="16">stdout<pos:position pos:line="27" pos:column="22"/></name></expr></argument>)<pos:position pos:line="27" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="28" pos:column="6"/></block>

<cpp:endif pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">endif<pos:position pos:line="30" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="30" pos:column="8">/* _SQUID_SOLARIS_and HAVE_LIBOPCOM_STACK */</comment>
<cpp:if pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">if<pos:position pos:line="31" pos:column="4"/></cpp:directive> <expr><name pos:line="31" pos:column="5">HAVE_BACKTRACE_SYMBOLS_FD<pos:position pos:line="31" pos:column="30"/></name></expr></cpp:if>
    <block pos:line="32" pos:column="5">{
        <expr_stmt><expr><specifier pos:line="33" pos:column="9">static<pos:position pos:line="33" pos:column="15"/></specifier> <name pos:line="33" pos:column="16">void<pos:position pos:line="33" pos:column="20"/></name> <operator pos:line="33" pos:column="21">*<pos:position pos:line="33" pos:column="22"/></operator><operator pos:line="33" pos:column="22">(<pos:position pos:line="33" pos:column="23"/></operator><name><name pos:line="33" pos:column="23">callarray<pos:position pos:line="33" pos:column="32"/></name><index pos:line="33" pos:column="32">[<expr><literal type="number" pos:line="33" pos:column="33">8192<pos:position pos:line="33" pos:column="37"/></literal></expr>]<pos:position pos:line="33" pos:column="38"/></index></name><operator pos:line="33" pos:column="38">)<pos:position pos:line="33" pos:column="39"/></operator></expr>;<pos:position pos:line="33" pos:column="40"/></expr_stmt>
        <decl_stmt><decl><type><name pos:line="34" pos:column="9">int<pos:position pos:line="34" pos:column="12"/></name></type> <name pos:line="34" pos:column="13">n<pos:position pos:line="34" pos:column="14"/></name></decl>;<pos:position pos:line="34" pos:column="15"/></decl_stmt>
        <expr_stmt><expr><name pos:line="35" pos:column="9">n<pos:position pos:line="35" pos:column="10"/></name> <operator pos:line="35" pos:column="11">=<pos:position pos:line="35" pos:column="12"/></operator> <call><name pos:line="35" pos:column="13">backtrace<pos:position pos:line="35" pos:column="22"/></name><argument_list pos:line="35" pos:column="22">(<argument><expr><name pos:line="35" pos:column="23">callarray<pos:position pos:line="35" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="34">8192<pos:position pos:line="35" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">backtrace_symbols_fd<pos:position pos:line="36" pos:column="29"/></name><argument_list pos:line="36" pos:column="29">(<argument><expr><name pos:line="36" pos:column="30">callarray<pos:position pos:line="36" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="41">n<pos:position pos:line="36" pos:column="42"/></name></expr></argument>, <argument><expr><call><name pos:line="36" pos:column="44">fileno<pos:position pos:line="36" pos:column="50"/></name><argument_list pos:line="36" pos:column="50">(<argument><expr><name pos:line="36" pos:column="51">debug_log<pos:position pos:line="36" pos:column="60"/></name></expr></argument>)<pos:position pos:line="36" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="36" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="63"/></expr_stmt>
    }<pos:position pos:line="37" pos:column="6"/></block>

<cpp:endif pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">endif<pos:position pos:line="39" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">endif<pos:position pos:line="40" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="40" pos:column="8">/* PRINT_STACK_TRACE */</comment>

<cpp:if pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">if<pos:position pos:line="42" pos:column="4"/></cpp:directive> <expr><name pos:line="42" pos:column="5">SA_RESETHAND<pos:position pos:line="42" pos:column="17"/></name> <operator pos:line="42" pos:column="18">==<pos:position pos:line="42" pos:column="20"/></operator> <literal type="number" pos:line="42" pos:column="21">0<pos:position pos:line="42" pos:column="22"/></literal> <operator pos:line="42" pos:column="23">&amp;&amp;<pos:position pos:line="42" pos:column="33"/></operator> <operator pos:line="42" pos:column="26">!<pos:position pos:line="42" pos:column="27"/></operator><name pos:line="42" pos:column="27">_SQUID_WINDOWS_<pos:position pos:line="42" pos:column="42"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">signal<pos:position pos:line="43" pos:column="11"/></name><argument_list pos:line="43" pos:column="11">(<argument><expr><name pos:line="43" pos:column="12">SIGSEGV<pos:position pos:line="43" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="21">SIG_DFL<pos:position pos:line="43" pos:column="28"/></name></expr></argument>)<pos:position pos:line="43" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="30"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="45" pos:column="5">signal<pos:position pos:line="45" pos:column="11"/></name><argument_list pos:line="45" pos:column="11">(<argument><expr><name pos:line="45" pos:column="12">SIGBUS<pos:position pos:line="45" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="20">SIG_DFL<pos:position pos:line="45" pos:column="27"/></name></expr></argument>)<pos:position pos:line="45" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="29"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="47" pos:column="5">signal<pos:position pos:line="47" pos:column="11"/></name><argument_list pos:line="47" pos:column="11">(<argument><expr><name pos:line="47" pos:column="12">sig<pos:position pos:line="47" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="17">SIG_DFL<pos:position pos:line="47" pos:column="24"/></name></expr></argument>)<pos:position pos:line="47" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="26"/></expr_stmt>

<cpp:endif pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">endif<pos:position pos:line="49" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="51" pos:column="5">releaseServerSockets<pos:position pos:line="51" pos:column="25"/></name><argument_list pos:line="51" pos:column="25">()<pos:position pos:line="51" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="28"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="53" pos:column="5">storeDirWriteCleanLogs<pos:position pos:line="53" pos:column="27"/></name><argument_list pos:line="53" pos:column="27">(<argument><expr><literal type="number" pos:line="53" pos:column="28">0<pos:position pos:line="53" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="31"/></expr_stmt>

    <if pos:line="55" pos:column="5">if <condition pos:line="55" pos:column="8">(<expr><operator pos:line="55" pos:column="9">!<pos:position pos:line="55" pos:column="10"/></operator><name pos:line="55" pos:column="10">shutting_down<pos:position pos:line="55" pos:column="23"/></name></expr>)<pos:position pos:line="55" pos:column="24"/></condition><then pos:line="55" pos:column="24"> <block pos:line="55" pos:column="25">{
        <expr_stmt><expr><call><name pos:line="56" pos:column="9">PrintRusage<pos:position pos:line="56" pos:column="20"/></name><argument_list pos:line="56" pos:column="20">()<pos:position pos:line="56" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="23"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="58" pos:column="9">dumpMallocStats<pos:position pos:line="58" pos:column="24"/></name><argument_list pos:line="58" pos:column="24">()<pos:position pos:line="58" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="59" pos:column="6"/></block></then></if>

    <if pos:line="61" pos:column="5">if <condition pos:line="61" pos:column="8">(<expr><name pos:line="61" pos:column="9">squid_curtime<pos:position pos:line="61" pos:column="22"/></name> <operator pos:line="61" pos:column="23">-<pos:position pos:line="61" pos:column="24"/></operator> <name pos:line="61" pos:column="25">SQUID_RELEASE_TIME<pos:position pos:line="61" pos:column="43"/></name> <operator pos:line="61" pos:column="44">&lt;<pos:position pos:line="61" pos:column="48"/></operator> <literal type="number" pos:line="61" pos:column="46">864000<pos:position pos:line="61" pos:column="52"/></literal></expr>)<pos:position pos:line="61" pos:column="53"/></condition><then pos:line="61" pos:column="53"> <block pos:line="61" pos:column="54">{
        <comment type="block" pos:line="62" pos:column="9">/* skip if more than 10 days old */</comment>

        <if pos:line="64" pos:column="9">if <condition pos:line="64" pos:column="12">(<expr><name><name pos:line="64" pos:column="13">Config<pos:position pos:line="64" pos:column="19"/></name><operator pos:line="64" pos:column="19">.<pos:position pos:line="64" pos:column="20"/></operator><name pos:line="64" pos:column="20">adminEmail<pos:position pos:line="64" pos:column="30"/></name></name></expr>)<pos:position pos:line="64" pos:column="31"/></condition><then pos:line="64" pos:column="31">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="65" pos:column="13">mail_warranty<pos:position pos:line="65" pos:column="26"/></name><argument_list pos:line="65" pos:column="26">()<pos:position pos:line="65" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="29"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name pos:line="67" pos:column="9">puts<pos:position pos:line="67" pos:column="13"/></name><argument_list pos:line="67" pos:column="13">(<argument><expr><call><name pos:line="67" pos:column="14">dead_msg<pos:position pos:line="67" pos:column="22"/></name><argument_list pos:line="67" pos:column="22">()<pos:position pos:line="67" pos:column="24"/></argument_list></call></expr></argument>)<pos:position pos:line="67" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="68" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="70" pos:column="5">abort<pos:position pos:line="70" pos:column="10"/></name><argument_list pos:line="70" pos:column="10">()<pos:position pos:line="70" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="13"/></expr_stmt>
}<pos:position pos:line="71" pos:column="2"/></block></function></unit>
