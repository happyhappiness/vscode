<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1712_squid-3.5.27.cpp" pos:tabs="8"><function><template pos:line="1" pos:column="1">template <parameter_list pos:line="1" pos:column="10">&lt;<parameter><type><name pos:line="1" pos:column="11">class<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">Key<pos:position pos:line="1" pos:column="20"/></name></parameter>, <parameter><type><name pos:line="1" pos:column="22">class<pos:position pos:line="1" pos:column="27"/></name></type> <name pos:line="1" pos:column="28">Value<pos:position pos:line="1" pos:column="33"/></name></parameter>&gt;<pos:position pos:line="1" pos:column="37"/></parameter_list></template>
<type><name pos:line="2" pos:column="1">unsigned<pos:position pos:line="2" pos:column="9"/></name> <name pos:line="2" pos:column="10">char<pos:position pos:line="2" pos:column="14"/></name></type>
<name><name><name pos:line="3" pos:column="1">VectorMap<pos:position pos:line="3" pos:column="10"/></name><argument_list type="generic" pos:line="3" pos:column="10">&lt;<argument><expr><name pos:line="3" pos:column="11">Key<pos:position pos:line="3" pos:column="14"/></name></expr></argument>,<argument><expr><name pos:line="3" pos:column="15">Value<pos:position pos:line="3" pos:column="20"/></name></expr></argument>&gt;<pos:position pos:line="3" pos:column="24"/></argument_list></name><operator pos:line="3" pos:column="21">::<pos:position pos:line="3" pos:column="23"/></operator><name pos:line="3" pos:column="23">findKeyIndex<pos:position pos:line="3" pos:column="35"/></name></name> <parameter_list pos:line="3" pos:column="36">(<parameter><decl><type><name pos:line="3" pos:column="37">Key<pos:position pos:line="3" pos:column="40"/></name> <specifier pos:line="3" pos:column="41">const<pos:position pos:line="3" pos:column="46"/></specifier></type> <name pos:line="3" pos:column="47">key<pos:position pos:line="3" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="51"/></parameter_list> <specifier pos:line="3" pos:column="52">const<pos:position pos:line="3" pos:column="57"/></specifier>
<block pos:line="4" pos:column="1">{
    <for pos:line="5" pos:column="5">for <control pos:line="5" pos:column="9">(<init><decl><type><name pos:line="5" pos:column="10">unsigned<pos:position pos:line="5" pos:column="18"/></name> <name pos:line="5" pos:column="19">int<pos:position pos:line="5" pos:column="22"/></name></type> <name pos:line="5" pos:column="23">index<pos:position pos:line="5" pos:column="28"/></name> <init pos:line="5" pos:column="29">= <expr><literal type="number" pos:line="5" pos:column="31">0<pos:position pos:line="5" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="33"/></init> <condition><expr><name pos:line="5" pos:column="34">index<pos:position pos:line="5" pos:column="39"/></name> <operator pos:line="5" pos:column="40">&lt;<pos:position pos:line="5" pos:column="44"/></operator> <call><name pos:line="5" pos:column="42">size<pos:position pos:line="5" pos:column="46"/></name><argument_list pos:line="5" pos:column="46">()<pos:position pos:line="5" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="49"/></condition> <incr><expr><operator pos:line="5" pos:column="50">++<pos:position pos:line="5" pos:column="52"/></operator><name pos:line="5" pos:column="52">index<pos:position pos:line="5" pos:column="57"/></name></expr></incr>)<pos:position pos:line="5" pos:column="58"/></control> <block pos:line="5" pos:column="59">{
        <expr_stmt><expr><call><name pos:line="6" pos:column="9">assert<pos:position pos:line="6" pos:column="15"/></name><argument_list pos:line="6" pos:column="15">(<argument><expr><call><name pos:line="6" pos:column="16">indexUsed<pos:position pos:line="6" pos:column="25"/></name><argument_list pos:line="6" pos:column="25">(<argument><expr><name pos:line="6" pos:column="26">index<pos:position pos:line="6" pos:column="31"/></name></expr></argument>)<pos:position pos:line="6" pos:column="32"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="34"/></expr_stmt>

        <if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name><name pos:line="8" pos:column="13">key_map<pos:position pos:line="8" pos:column="20"/></name><index pos:line="8" pos:column="20">[<expr><name pos:line="8" pos:column="21">index<pos:position pos:line="8" pos:column="26"/></name></expr>]<pos:position pos:line="8" pos:column="27"/></index></name> <operator pos:line="8" pos:column="28">==<pos:position pos:line="8" pos:column="30"/></operator> <name pos:line="8" pos:column="31">key<pos:position pos:line="8" pos:column="34"/></name></expr>)<pos:position pos:line="8" pos:column="35"/></condition><then pos:line="8" pos:column="35">
            <block type="pseudo"><return pos:line="9" pos:column="13">return <expr><name pos:line="9" pos:column="20">index<pos:position pos:line="9" pos:column="25"/></name></expr>;<pos:position pos:line="9" pos:column="26"/></return></block></then></if>
    }<pos:position pos:line="10" pos:column="6"/></block></for>

    <comment type="block" pos:line="12" pos:column="5">/* not in map */</comment>
    <return pos:line="13" pos:column="5">return <expr><call><name pos:line="13" pos:column="12">size<pos:position pos:line="13" pos:column="16"/></name><argument_list pos:line="13" pos:column="16">()<pos:position pos:line="13" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="19"/></return>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
