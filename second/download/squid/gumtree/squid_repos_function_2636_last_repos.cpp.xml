<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2636_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">TemplateFile<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">tryLoadTemplate<pos:position pos:line="2" pos:column="30"/></name></name><parameter_list pos:line="2" pos:column="30">(<parameter><decl><type><specifier pos:line="2" pos:column="31">const<pos:position pos:line="2" pos:column="36"/></specifier> <name pos:line="2" pos:column="37">char<pos:position pos:line="2" pos:column="41"/></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="43">lang<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="48"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">lang<pos:position pos:line="4" pos:column="16"/></name></expr></argument>)<pos:position pos:line="4" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="18"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name></type> <name><name pos:line="6" pos:column="10">path<pos:position pos:line="6" pos:column="14"/></name><index pos:line="6" pos:column="14">[<expr><name pos:line="6" pos:column="15">MAXPATHLEN<pos:position pos:line="6" pos:column="25"/></name></expr>]<pos:position pos:line="6" pos:column="26"/></index></name></decl>;<pos:position pos:line="6" pos:column="27"/></decl_stmt>
    <comment type="block" pos:line="7" pos:column="5">/* TODO: prep the directory path string to prevent snprintf ... */</comment>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">snprintf<pos:position pos:line="8" pos:column="13"/></name><argument_list pos:line="8" pos:column="13">(<argument><expr><name pos:line="8" pos:column="14">path<pos:position pos:line="8" pos:column="18"/></name></expr></argument>, <argument><expr><sizeof pos:line="8" pos:column="20">sizeof<argument_list pos:line="8" pos:column="26">(<argument><expr><name pos:line="8" pos:column="27">path<pos:position pos:line="8" pos:column="31"/></name></expr></argument>)<pos:position pos:line="8" pos:column="32"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="34">"%s/%s/%s"<pos:position pos:line="8" pos:column="44"/></literal></expr></argument>,
             <argument><expr><name pos:line="9" pos:column="14">DEFAULT_SQUID_ERROR_DIR<pos:position pos:line="9" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="39">lang<pos:position pos:line="9" pos:column="43"/></name></expr></argument>, <argument><expr><call><name><name pos:line="9" pos:column="45">templateName<pos:position pos:line="9" pos:column="57"/></name><operator pos:line="9" pos:column="57">.<pos:position pos:line="9" pos:column="58"/></operator><name pos:line="9" pos:column="58">termedBuf<pos:position pos:line="9" pos:column="67"/></name></name><argument_list pos:line="9" pos:column="67">()<pos:position pos:line="9" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="71"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="10" pos:column="5">path<pos:position pos:line="10" pos:column="9"/></name><index pos:line="10" pos:column="9">[<expr><name pos:line="10" pos:column="10">MAXPATHLEN<pos:position pos:line="10" pos:column="20"/></name><operator pos:line="10" pos:column="20">-<pos:position pos:line="10" pos:column="21"/></operator><literal type="number" pos:line="10" pos:column="21">1<pos:position pos:line="10" pos:column="22"/></literal></expr>]<pos:position pos:line="10" pos:column="23"/></index></name> <operator pos:line="10" pos:column="24">=<pos:position pos:line="10" pos:column="25"/></operator> <literal type="char" pos:line="10" pos:column="26">'\0'<pos:position pos:line="10" pos:column="30"/></literal></expr>;<pos:position pos:line="10" pos:column="31"/></expr_stmt>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><call><name pos:line="12" pos:column="9">loadFromFile<pos:position pos:line="12" pos:column="21"/></name><argument_list pos:line="12" pos:column="21">(<argument><expr><name pos:line="12" pos:column="22">path<pos:position pos:line="12" pos:column="26"/></name></expr></argument>)<pos:position pos:line="12" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="28"/></condition><then pos:line="12" pos:column="28">
        <block type="pseudo"><return pos:line="13" pos:column="9">return <expr><literal type="boolean" pos:line="13" pos:column="16">true<pos:position pos:line="13" pos:column="20"/></literal></expr>;<pos:position pos:line="13" pos:column="21"/></return></block></then></if>

<cpp:if pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">if<pos:position pos:line="15" pos:column="4"/></cpp:directive> <expr><name pos:line="15" pos:column="5">HAVE_GLOB<pos:position pos:line="15" pos:column="14"/></name></expr></cpp:if>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">( <expr><call><name pos:line="16" pos:column="10">strlen<pos:position pos:line="16" pos:column="16"/></name><argument_list pos:line="16" pos:column="16">(<argument><expr><name pos:line="16" pos:column="17">lang<pos:position pos:line="16" pos:column="21"/></name></expr></argument>)<pos:position pos:line="16" pos:column="22"/></argument_list></call> <operator pos:line="16" pos:column="23">==<pos:position pos:line="16" pos:column="25"/></operator> <literal type="number" pos:line="16" pos:column="26">2<pos:position pos:line="16" pos:column="27"/></literal></expr>)<pos:position pos:line="16" pos:column="28"/></condition><then pos:line="16" pos:column="28"> <block pos:line="16" pos:column="29">{
        <comment type="block" pos:line="17" pos:column="9">/* TODO glob the error directory for sub-dirs matching: &lt;tag&gt; '-*'   */</comment>
        <comment type="block" pos:line="18" pos:column="9">/* use first result. */</comment>
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">debugs<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><literal type="number" pos:line="19" pos:column="16">4<pos:position pos:line="19" pos:column="17"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="19" pos:column="18">2<pos:position pos:line="19" pos:column="19"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="21">HERE<pos:position pos:line="19" pos:column="25"/></name> <operator pos:line="19" pos:column="26">&lt;&lt;<pos:position pos:line="19" pos:column="34"/></operator> <literal type="string" pos:line="19" pos:column="29">"wildcard fallback errors not coded yet."<pos:position pos:line="19" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="72"/></expr_stmt>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>
<cpp:endif pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">endif<pos:position pos:line="21" pos:column="7"/></cpp:directive></cpp:endif>

    <return pos:line="23" pos:column="5">return <expr><literal type="boolean" pos:line="23" pos:column="12">false<pos:position pos:line="23" pos:column="17"/></literal></expr>;<pos:position pos:line="23" pos:column="18"/></return>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
