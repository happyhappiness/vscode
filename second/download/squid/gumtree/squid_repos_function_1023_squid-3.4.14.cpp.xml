<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1023_squid-3.4.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">SubstituteMacro<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name pos:line="2" pos:column="17">char<pos:position pos:line="2" pos:column="21"/></name><modifier pos:line="2" pos:column="21">*<pos:position pos:line="2" pos:column="22"/></modifier><modifier pos:line="2" pos:column="22">&amp;<pos:position pos:line="2" pos:column="27"/></modifier></type> <name pos:line="2" pos:column="24">line<pos:position pos:line="2" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="30">int<pos:position pos:line="2" pos:column="33"/></name><modifier pos:line="2" pos:column="33">&amp;<pos:position pos:line="2" pos:column="38"/></modifier></type> <name pos:line="2" pos:column="35">len<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="40">const<pos:position pos:line="2" pos:column="45"/></specifier> <name pos:line="2" pos:column="46">char<pos:position pos:line="2" pos:column="50"/></name><modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type> <name pos:line="2" pos:column="52">macroName<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="63">const<pos:position pos:line="2" pos:column="68"/></specifier> <name pos:line="2" pos:column="69">char<pos:position pos:line="2" pos:column="73"/></name><modifier pos:line="2" pos:column="73">*<pos:position pos:line="2" pos:column="74"/></modifier></type> <name pos:line="2" pos:column="75">substStr<pos:position pos:line="2" pos:column="83"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="84"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">line<pos:position pos:line="4" pos:column="16"/></name> <operator pos:line="4" pos:column="17">!=<pos:position pos:line="4" pos:column="19"/></operator> <name pos:line="4" pos:column="20">NULL<pos:position pos:line="4" pos:column="24"/></name></expr></argument>)<pos:position pos:line="4" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><name pos:line="5" pos:column="12">macroName<pos:position pos:line="5" pos:column="21"/></name> <operator pos:line="5" pos:column="22">!=<pos:position pos:line="5" pos:column="24"/></operator> <name pos:line="5" pos:column="25">NULL<pos:position pos:line="5" pos:column="29"/></name></expr></argument>)<pos:position pos:line="5" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><name pos:line="6" pos:column="12">substStr<pos:position pos:line="6" pos:column="20"/></name> <operator pos:line="6" pos:column="21">!=<pos:position pos:line="6" pos:column="23"/></operator> <name pos:line="6" pos:column="24">NULL<pos:position pos:line="6" pos:column="28"/></name></expr></argument>)<pos:position pos:line="6" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="30"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">unsigned<pos:position pos:line="7" pos:column="13"/></name></type> <name pos:line="7" pos:column="14">macroNameLen<pos:position pos:line="7" pos:column="26"/></name> <init pos:line="7" pos:column="27">= <expr><call><name pos:line="7" pos:column="29">strlen<pos:position pos:line="7" pos:column="35"/></name><argument_list pos:line="7" pos:column="35">(<argument><expr><name pos:line="7" pos:column="36">macroName<pos:position pos:line="7" pos:column="45"/></name></expr></argument>)<pos:position pos:line="7" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="47"/></decl_stmt>
    <while pos:line="8" pos:column="5">while <condition pos:line="8" pos:column="11">(<decl><type><specifier pos:line="8" pos:column="12">const<pos:position pos:line="8" pos:column="17"/></specifier> <name pos:line="8" pos:column="18">char<pos:position pos:line="8" pos:column="22"/></name><modifier pos:line="8" pos:column="22">*<pos:position pos:line="8" pos:column="23"/></modifier></type> <name pos:line="8" pos:column="24">macroPos<pos:position pos:line="8" pos:column="32"/></name> <init pos:line="8" pos:column="33">= <expr><call><name pos:line="8" pos:column="35">strstr<pos:position pos:line="8" pos:column="41"/></name><argument_list pos:line="8" pos:column="41">(<argument><expr><name pos:line="8" pos:column="42">line<pos:position pos:line="8" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="48">macroName<pos:position pos:line="8" pos:column="57"/></name></expr></argument>)<pos:position pos:line="8" pos:column="58"/></argument_list></call></expr></init></decl>)<pos:position pos:line="8" pos:column="59"/></condition> <comment type="line" pos:line="8" pos:column="60">// we would replace all occurrences</comment>
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="9" pos:column="9">ReplaceSubstr<pos:position pos:line="9" pos:column="22"/></name><argument_list pos:line="9" pos:column="22">(<argument><expr><name pos:line="9" pos:column="23">line<pos:position pos:line="9" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="29">len<pos:position pos:line="9" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="34">macroPos<pos:position pos:line="9" pos:column="42"/></name> <operator pos:line="9" pos:column="43">-<pos:position pos:line="9" pos:column="44"/></operator> <name pos:line="9" pos:column="45">line<pos:position pos:line="9" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="51">macroNameLen<pos:position pos:line="9" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="65">substStr<pos:position pos:line="9" pos:column="73"/></name></expr></argument>)<pos:position pos:line="9" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="75"/></expr_stmt></block></while>
}<pos:position pos:line="10" pos:column="2"/></block></function></unit>
