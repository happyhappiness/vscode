<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5593_squid-3.3.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">do_unlink<pos:position pos:line="2" pos:column="10"/></name><parameter_list pos:line="2" pos:column="10">(<parameter><decl><type><name pos:line="2" pos:column="11">diomsg<pos:position pos:line="2" pos:column="17"/></name> <modifier pos:line="2" pos:column="18">*<pos:position pos:line="2" pos:column="19"/></modifier></type> <name pos:line="2" pos:column="20">r<pos:position pos:line="2" pos:column="21"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="23">int<pos:position pos:line="2" pos:column="26"/></name></type> <name pos:line="2" pos:column="27">len<pos:position pos:line="2" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="32">const<pos:position pos:line="2" pos:column="37"/></specifier> <name pos:line="2" pos:column="38">char<pos:position pos:line="2" pos:column="42"/></name> <modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier></type><name pos:line="2" pos:column="44">buf<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="48"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><call><name pos:line="4" pos:column="9">unlink<pos:position pos:line="4" pos:column="15"/></name><argument_list pos:line="4" pos:column="15">(<argument><expr><name pos:line="4" pos:column="16">buf<pos:position pos:line="4" pos:column="19"/></name></expr></argument>)<pos:position pos:line="4" pos:column="20"/></argument_list></call> <operator pos:line="4" pos:column="21">&lt;<pos:position pos:line="4" pos:column="25"/></operator> <literal type="number" pos:line="4" pos:column="23">0<pos:position pos:line="4" pos:column="24"/></literal></expr>)<pos:position pos:line="4" pos:column="25"/></condition><then pos:line="4" pos:column="25"> <block pos:line="4" pos:column="26">{
        <macro><name pos:line="5" pos:column="9">DEBUG<pos:position pos:line="5" pos:column="14"/></name><argument_list pos:line="5" pos:column="14">(<argument><literal type="number" pos:line="5" pos:column="15">1<pos:position pos:line="5" pos:column="16"/></literal></argument>)<pos:position pos:line="5" pos:column="17"/></argument_list></macro> <block pos:line="5" pos:column="18">{
            <expr_stmt><expr><call><name pos:line="6" pos:column="13">fprintf<pos:position pos:line="6" pos:column="20"/></name><argument_list pos:line="6" pos:column="20">(<argument><expr><name pos:line="6" pos:column="21">stderr<pos:position pos:line="6" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="29">"%d UNLNK id %d %s: "<pos:position pos:line="6" pos:column="50"/></literal></expr></argument>, <argument><expr><operator pos:line="6" pos:column="52">(<pos:position pos:line="6" pos:column="53"/></operator><name pos:line="6" pos:column="53">int<pos:position pos:line="6" pos:column="56"/></name><operator pos:line="6" pos:column="56">)<pos:position pos:line="6" pos:column="57"/></operator> <name pos:line="6" pos:column="58">mypid<pos:position pos:line="6" pos:column="63"/></name></expr></argument>, <argument><expr><name><name pos:line="6" pos:column="65">r<pos:position pos:line="6" pos:column="66"/></name><operator pos:line="6" pos:column="66">-&gt;<pos:position pos:line="6" pos:column="71"/></operator><name pos:line="6" pos:column="68">id<pos:position pos:line="6" pos:column="70"/></name></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="72">buf<pos:position pos:line="6" pos:column="75"/></name></expr></argument>)<pos:position pos:line="6" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="77"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="7" pos:column="13">perror<pos:position pos:line="7" pos:column="19"/></name><argument_list pos:line="7" pos:column="19">(<argument><expr><literal type="string" pos:line="7" pos:column="20">"unlink"<pos:position pos:line="7" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="30"/></expr_stmt>
        }<pos:position pos:line="8" pos:column="10"/></block>

        <return pos:line="10" pos:column="9">return <expr><operator pos:line="10" pos:column="16">-<pos:position pos:line="10" pos:column="17"/></operator><name pos:line="10" pos:column="17">errno<pos:position pos:line="10" pos:column="22"/></name></expr>;<pos:position pos:line="10" pos:column="23"/></return>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>

    <macro><name pos:line="13" pos:column="5">DEBUG<pos:position pos:line="13" pos:column="10"/></name><argument_list pos:line="13" pos:column="10">(<argument><literal type="number" pos:line="13" pos:column="11">2<pos:position pos:line="13" pos:column="12"/></literal></argument>)<pos:position pos:line="13" pos:column="13"/></argument_list></macro> <block pos:line="13" pos:column="14">{
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">fprintf<pos:position pos:line="14" pos:column="16"/></name><argument_list pos:line="14" pos:column="16">(<argument><expr><name pos:line="14" pos:column="17">stderr<pos:position pos:line="14" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="25">"%d UNLNK %s\n"<pos:position pos:line="14" pos:column="40"/></literal></expr></argument>, <argument><expr><operator pos:line="14" pos:column="42">(<pos:position pos:line="14" pos:column="43"/></operator><name pos:line="14" pos:column="43">int<pos:position pos:line="14" pos:column="46"/></name><operator pos:line="14" pos:column="46">)<pos:position pos:line="14" pos:column="47"/></operator> <name pos:line="14" pos:column="48">mypid<pos:position pos:line="14" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="55">buf<pos:position pos:line="14" pos:column="58"/></name></expr></argument>)<pos:position pos:line="14" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="60"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block>
    <return pos:line="16" pos:column="5">return <expr><literal type="number" pos:line="16" pos:column="12">0<pos:position pos:line="16" pos:column="13"/></literal></expr>;<pos:position pos:line="16" pos:column="14"/></return>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
