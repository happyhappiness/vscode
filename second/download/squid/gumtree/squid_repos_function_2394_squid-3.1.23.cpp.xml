<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2394_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">FwdState<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">completed<pos:position pos:line="2" pos:column="20"/></name></name><parameter_list pos:line="2" pos:column="20">()<pos:position pos:line="2" pos:column="22"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name><name pos:line="4" pos:column="9">flags<pos:position pos:line="4" pos:column="14"/></name><operator pos:line="4" pos:column="14">.<pos:position pos:line="4" pos:column="15"/></operator><name pos:line="4" pos:column="15">forward_completed<pos:position pos:line="4" pos:column="32"/></name></name> <operator pos:line="4" pos:column="33">==<pos:position pos:line="4" pos:column="35"/></operator> <literal type="number" pos:line="4" pos:column="36">1<pos:position pos:line="4" pos:column="37"/></literal></expr>)<pos:position pos:line="4" pos:column="38"/></condition><then pos:line="4" pos:column="38"> <block pos:line="4" pos:column="39">{
        <expr_stmt><expr><call><name pos:line="5" pos:column="9">debugs<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">(<argument><expr><literal type="number" pos:line="5" pos:column="16">17<pos:position pos:line="5" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="20">1<pos:position pos:line="5" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="5" pos:column="23">HERE<pos:position pos:line="5" pos:column="27"/></name> <operator pos:line="5" pos:column="28">&lt;&lt;<pos:position pos:line="5" pos:column="36"/></operator> <literal type="string" pos:line="5" pos:column="31">"FwdState::completed called on a completed request! Bad!"<pos:position pos:line="5" pos:column="88"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="90"/></expr_stmt>
        <return pos:line="6" pos:column="9">return;<pos:position pos:line="6" pos:column="16"/></return>
    }<pos:position pos:line="7" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="9" pos:column="5">flags<pos:position pos:line="9" pos:column="10"/></name><operator pos:line="9" pos:column="10">.<pos:position pos:line="9" pos:column="11"/></operator><name pos:line="9" pos:column="11">forward_completed<pos:position pos:line="9" pos:column="28"/></name></name> <operator pos:line="9" pos:column="29">=<pos:position pos:line="9" pos:column="30"/></operator> <literal type="number" pos:line="9" pos:column="31">1<pos:position pos:line="9" pos:column="32"/></literal></expr>;<pos:position pos:line="9" pos:column="33"/></expr_stmt>

<cpp:if pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">if<pos:position pos:line="11" pos:column="4"/></cpp:directive> <expr><name pos:line="11" pos:column="5">URL_CHECKSUM_DEBUG<pos:position pos:line="11" pos:column="23"/></name></expr></cpp:if>

    <expr_stmt><expr><call><name><name pos:line="13" pos:column="5">entry<pos:position pos:line="13" pos:column="10"/></name><operator pos:line="13" pos:column="10">-&gt;<pos:position pos:line="13" pos:column="15"/></operator><name pos:line="13" pos:column="12">mem_obj<pos:position pos:line="13" pos:column="19"/></name><operator pos:line="13" pos:column="19">-&gt;<pos:position pos:line="13" pos:column="24"/></operator><name pos:line="13" pos:column="21">checkUrlChecksum<pos:position pos:line="13" pos:column="37"/></name></name><argument_list pos:line="13" pos:column="37">()<pos:position pos:line="13" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="40"/></expr_stmt>
<cpp:endif pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">endif<pos:position pos:line="14" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">if<pos:position pos:line="15" pos:column="4"/></cpp:directive> <expr><name pos:line="15" pos:column="5">WIP_FWD_LOG<pos:position pos:line="15" pos:column="16"/></name></expr></cpp:if>

    <expr_stmt><expr><call><name pos:line="17" pos:column="5">log<pos:position pos:line="17" pos:column="8"/></name><argument_list pos:line="17" pos:column="8">()<pos:position pos:line="17" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="11"/></expr_stmt>
<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif<pos:position pos:line="18" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name><name pos:line="20" pos:column="9">entry<pos:position pos:line="20" pos:column="14"/></name><operator pos:line="20" pos:column="14">-&gt;<pos:position pos:line="20" pos:column="19"/></operator><name pos:line="20" pos:column="16">store_status<pos:position pos:line="20" pos:column="28"/></name></name> <operator pos:line="20" pos:column="29">==<pos:position pos:line="20" pos:column="31"/></operator> <name pos:line="20" pos:column="32">STORE_PENDING<pos:position pos:line="20" pos:column="45"/></name></expr>)<pos:position pos:line="20" pos:column="46"/></condition><then pos:line="20" pos:column="46"> <block pos:line="20" pos:column="47">{
        <if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><call><name><name pos:line="21" pos:column="13">entry<pos:position pos:line="21" pos:column="18"/></name><operator pos:line="21" pos:column="18">-&gt;<pos:position pos:line="21" pos:column="23"/></operator><name pos:line="21" pos:column="20">isEmpty<pos:position pos:line="21" pos:column="27"/></name></name><argument_list pos:line="21" pos:column="27">()<pos:position pos:line="21" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="30"/></condition><then pos:line="21" pos:column="30"> <block pos:line="21" pos:column="31">{
            <expr_stmt><expr><call><name pos:line="22" pos:column="13">assert<pos:position pos:line="22" pos:column="19"/></name><argument_list pos:line="22" pos:column="19">(<argument><expr><name pos:line="22" pos:column="20">err<pos:position pos:line="22" pos:column="23"/></name></expr></argument>)<pos:position pos:line="22" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="25"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="23" pos:column="13">errorAppendEntry<pos:position pos:line="23" pos:column="29"/></name><argument_list pos:line="23" pos:column="29">(<argument><expr><name pos:line="23" pos:column="30">entry<pos:position pos:line="23" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="37">err<pos:position pos:line="23" pos:column="40"/></name></expr></argument>)<pos:position pos:line="23" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="42"/></expr_stmt>
            <expr_stmt><expr><name pos:line="24" pos:column="13">err<pos:position pos:line="24" pos:column="16"/></name> <operator pos:line="24" pos:column="17">=<pos:position pos:line="24" pos:column="18"/></operator> <name pos:line="24" pos:column="19">NULL<pos:position pos:line="24" pos:column="23"/></name></expr>;<pos:position pos:line="24" pos:column="24"/></expr_stmt>
        }<pos:position pos:line="25" pos:column="10"/></block></then> <else pos:line="25" pos:column="11">else <block pos:line="25" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="26" pos:column="13">EBIT_CLR<pos:position pos:line="26" pos:column="21"/></name><argument_list pos:line="26" pos:column="21">(<argument><expr><name><name pos:line="26" pos:column="22">entry<pos:position pos:line="26" pos:column="27"/></name><operator pos:line="26" pos:column="27">-&gt;<pos:position pos:line="26" pos:column="32"/></operator><name pos:line="26" pos:column="29">flags<pos:position pos:line="26" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="36">ENTRY_FWD_HDR_WAIT<pos:position pos:line="26" pos:column="54"/></name></expr></argument>)<pos:position pos:line="26" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="56"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="27" pos:column="13">entry<pos:position pos:line="27" pos:column="18"/></name><operator pos:line="27" pos:column="18">-&gt;<pos:position pos:line="27" pos:column="23"/></operator><name pos:line="27" pos:column="20">complete<pos:position pos:line="27" pos:column="28"/></name></name><argument_list pos:line="27" pos:column="28">()<pos:position pos:line="27" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="31"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="28" pos:column="13">entry<pos:position pos:line="28" pos:column="18"/></name><operator pos:line="28" pos:column="18">-&gt;<pos:position pos:line="28" pos:column="23"/></operator><name pos:line="28" pos:column="20">releaseRequest<pos:position pos:line="28" pos:column="34"/></name></name><argument_list pos:line="28" pos:column="34">()<pos:position pos:line="28" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="37"/></expr_stmt>
        }<pos:position pos:line="29" pos:column="10"/></block></else></if>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>

    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><call><name pos:line="32" pos:column="9">storePendingNClients<pos:position pos:line="32" pos:column="29"/></name><argument_list pos:line="32" pos:column="29">(<argument><expr><name pos:line="32" pos:column="30">entry<pos:position pos:line="32" pos:column="35"/></name></expr></argument>)<pos:position pos:line="32" pos:column="36"/></argument_list></call> <operator pos:line="32" pos:column="37">&gt;<pos:position pos:line="32" pos:column="41"/></operator> <literal type="number" pos:line="32" pos:column="39">0<pos:position pos:line="32" pos:column="40"/></literal></expr>)<pos:position pos:line="32" pos:column="41"/></condition><then pos:line="32" pos:column="41">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="33" pos:column="9">assert<pos:position pos:line="33" pos:column="15"/></name><argument_list pos:line="33" pos:column="15">(<argument><expr><operator pos:line="33" pos:column="16">!<pos:position pos:line="33" pos:column="17"/></operator><call><name pos:line="33" pos:column="17">EBIT_TEST<pos:position pos:line="33" pos:column="26"/></name><argument_list pos:line="33" pos:column="26">(<argument><expr><name><name pos:line="33" pos:column="27">entry<pos:position pos:line="33" pos:column="32"/></name><operator pos:line="33" pos:column="32">-&gt;<pos:position pos:line="33" pos:column="37"/></operator><name pos:line="33" pos:column="34">flags<pos:position pos:line="33" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="41">ENTRY_FWD_HDR_WAIT<pos:position pos:line="33" pos:column="59"/></name></expr></argument>)<pos:position pos:line="33" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="62"/></expr_stmt></block></then></if>

}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
