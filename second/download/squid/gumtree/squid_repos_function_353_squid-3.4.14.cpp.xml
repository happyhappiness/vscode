<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_353_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">manage_request<pos:position pos:line="2" pos:column="15"/></name><parameter_list pos:line="2" pos:column="15">()<pos:position pos:line="2" pos:column="17"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">ntlmhdr<pos:position pos:line="4" pos:column="12"/></name> <modifier pos:line="4" pos:column="13">*<pos:position pos:line="4" pos:column="14"/></modifier></type><name pos:line="4" pos:column="14">fast_header<pos:position pos:line="4" pos:column="25"/></name></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name></type> <name><name pos:line="5" pos:column="10">buf<pos:position pos:line="5" pos:column="13"/></name><index pos:line="5" pos:column="13">[<expr><name pos:line="5" pos:column="14">HELPER_INPUT_BUFFER<pos:position pos:line="5" pos:column="33"/></name></expr>]<pos:position pos:line="5" pos:column="34"/></index></name></decl>;<pos:position pos:line="5" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name></type> <name><name pos:line="6" pos:column="10">decoded<pos:position pos:line="6" pos:column="17"/></name><index pos:line="6" pos:column="17">[<expr><name pos:line="6" pos:column="18">HELPER_INPUT_BUFFER<pos:position pos:line="6" pos:column="37"/></name></expr>]<pos:position pos:line="6" pos:column="38"/></index></name></decl>;<pos:position pos:line="6" pos:column="39"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">decodedLen<pos:position pos:line="7" pos:column="19"/></name></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">char<pos:position pos:line="8" pos:column="9"/></name></type> <name><name pos:line="8" pos:column="10">helper_command<pos:position pos:line="8" pos:column="24"/></name><index pos:line="8" pos:column="24">[<expr><literal type="number" pos:line="8" pos:column="25">3<pos:position pos:line="8" pos:column="26"/></literal></expr>]<pos:position pos:line="8" pos:column="27"/></index></name></decl>;<pos:position pos:line="8" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">oversized<pos:position pos:line="9" pos:column="18"/></name> <init pos:line="9" pos:column="19">= <expr><literal type="number" pos:line="9" pos:column="21">0<pos:position pos:line="9" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">char<pos:position pos:line="10" pos:column="9"/></name> <modifier pos:line="10" pos:column="10">*<pos:position pos:line="10" pos:column="11"/></modifier></type> <name pos:line="10" pos:column="12">ErrorMessage<pos:position pos:line="10" pos:column="24"/></name></decl>;<pos:position pos:line="10" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><specifier pos:line="11" pos:column="5">static<pos:position pos:line="11" pos:column="11"/></specifier> <type><name pos:line="11" pos:column="12">ntlm_negotiate<pos:position pos:line="11" pos:column="26"/></name></type> <name pos:line="11" pos:column="27">local_nego<pos:position pos:line="11" pos:column="37"/></name></decl>;<pos:position pos:line="11" pos:column="38"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">char<pos:position pos:line="12" pos:column="9"/></name></type> <name><name pos:line="12" pos:column="10">domain<pos:position pos:line="12" pos:column="16"/></name><index pos:line="12" pos:column="16">[<expr><name pos:line="12" pos:column="17">DNLEN<pos:position pos:line="12" pos:column="22"/></name><operator pos:line="12" pos:column="22">+<pos:position pos:line="12" pos:column="23"/></operator><literal type="number" pos:line="12" pos:column="23">1<pos:position pos:line="12" pos:column="24"/></literal></expr>]<pos:position pos:line="12" pos:column="25"/></index></name></decl>;<pos:position pos:line="12" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">char<pos:position pos:line="13" pos:column="9"/></name></type> <name><name pos:line="13" pos:column="10">user<pos:position pos:line="13" pos:column="14"/></name><index pos:line="13" pos:column="14">[<expr><name pos:line="13" pos:column="15">UNLEN<pos:position pos:line="13" pos:column="20"/></name><operator pos:line="13" pos:column="20">+<pos:position pos:line="13" pos:column="21"/></operator><literal type="number" pos:line="13" pos:column="21">1<pos:position pos:line="13" pos:column="22"/></literal></expr>]<pos:position pos:line="13" pos:column="23"/></index></name></decl>;<pos:position pos:line="13" pos:column="24"/></decl_stmt>

    <comment type="block" pos:line="15" pos:column="5">/* NP: for some reason this helper sometimes needs to accept
     * from clients that send no negotiate packet. */</comment>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><call><name pos:line="17" pos:column="9">memcpy<pos:position pos:line="17" pos:column="15"/></name><argument_list pos:line="17" pos:column="15">(<argument><expr><name><name pos:line="17" pos:column="16">local_nego<pos:position pos:line="17" pos:column="26"/></name><operator pos:line="17" pos:column="26">.<pos:position pos:line="17" pos:column="27"/></operator><name pos:line="17" pos:column="27">hdr<pos:position pos:line="17" pos:column="30"/></name><operator pos:line="17" pos:column="30">.<pos:position pos:line="17" pos:column="31"/></operator><name pos:line="17" pos:column="31">signature<pos:position pos:line="17" pos:column="40"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="42">"NTLMSSP"<pos:position pos:line="17" pos:column="51"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="53">8<pos:position pos:line="17" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="55"/></argument_list></call> <operator pos:line="17" pos:column="56">!=<pos:position pos:line="17" pos:column="58"/></operator> <literal type="number" pos:line="17" pos:column="59">0<pos:position pos:line="17" pos:column="60"/></literal></expr>)<pos:position pos:line="17" pos:column="61"/></condition><then pos:line="17" pos:column="61"> <block pos:line="17" pos:column="62">{
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">memset<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><operator pos:line="18" pos:column="16">&amp;<pos:position pos:line="18" pos:column="21"/></operator><name pos:line="18" pos:column="17">local_nego<pos:position pos:line="18" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="29">0<pos:position pos:line="18" pos:column="30"/></literal></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="32">sizeof<argument_list pos:line="18" pos:column="38">(<argument><expr><name pos:line="18" pos:column="39">ntlm_negotiate<pos:position pos:line="18" pos:column="53"/></name></expr></argument>)<pos:position pos:line="18" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="18" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="56"/></expr_stmt>	<comment type="block" pos:line="18" pos:column="57">/* reset */</comment>
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">memcpy<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><name><name pos:line="19" pos:column="16">local_nego<pos:position pos:line="19" pos:column="26"/></name><operator pos:line="19" pos:column="26">.<pos:position pos:line="19" pos:column="27"/></operator><name pos:line="19" pos:column="27">hdr<pos:position pos:line="19" pos:column="30"/></name><operator pos:line="19" pos:column="30">.<pos:position pos:line="19" pos:column="31"/></operator><name pos:line="19" pos:column="31">signature<pos:position pos:line="19" pos:column="40"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="42">"NTLMSSP"<pos:position pos:line="19" pos:column="51"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="53">8<pos:position pos:line="19" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="56"/></expr_stmt>     <comment type="block" pos:line="19" pos:column="61">/* set the signature */</comment>
        <expr_stmt><expr><name><name pos:line="20" pos:column="9">local_nego<pos:position pos:line="20" pos:column="19"/></name><operator pos:line="20" pos:column="19">.<pos:position pos:line="20" pos:column="20"/></operator><name pos:line="20" pos:column="20">hdr<pos:position pos:line="20" pos:column="23"/></name><operator pos:line="20" pos:column="23">.<pos:position pos:line="20" pos:column="24"/></operator><name pos:line="20" pos:column="24">type<pos:position pos:line="20" pos:column="28"/></name></name> <operator pos:line="20" pos:column="29">=<pos:position pos:line="20" pos:column="30"/></operator> <call><name pos:line="20" pos:column="31">le32toh<pos:position pos:line="20" pos:column="38"/></name><argument_list pos:line="20" pos:column="38">(<argument><expr><name pos:line="20" pos:column="39">NTLM_NEGOTIATE<pos:position pos:line="20" pos:column="53"/></name></expr></argument>)<pos:position pos:line="20" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="55"/></expr_stmt>      <comment type="block" pos:line="20" pos:column="61">/* this is a challenge */</comment>
        <expr_stmt><expr><name><name pos:line="21" pos:column="9">local_nego<pos:position pos:line="21" pos:column="19"/></name><operator pos:line="21" pos:column="19">.<pos:position pos:line="21" pos:column="20"/></operator><name pos:line="21" pos:column="20">flags<pos:position pos:line="21" pos:column="25"/></name></name> <operator pos:line="21" pos:column="26">=<pos:position pos:line="21" pos:column="27"/></operator> <call><name pos:line="21" pos:column="28">le32toh<pos:position pos:line="21" pos:column="35"/></name><argument_list pos:line="21" pos:column="35">(<argument><expr><name pos:line="21" pos:column="36">NTLM_NEGOTIATE_ALWAYS_SIGN<pos:position pos:line="21" pos:column="62"/></name> <operator pos:line="21" pos:column="63">|<pos:position pos:line="21" pos:column="64"/></operator>
                                   <name pos:line="22" pos:column="36">NTLM_NEGOTIATE_USE_NTLM<pos:position pos:line="22" pos:column="59"/></name> <operator pos:line="22" pos:column="60">|<pos:position pos:line="22" pos:column="61"/></operator>
                                   <name pos:line="23" pos:column="36">NTLM_NEGOTIATE_USE_LM<pos:position pos:line="23" pos:column="57"/></name> <operator pos:line="23" pos:column="58">|<pos:position pos:line="23" pos:column="59"/></operator>
                                   <name pos:line="24" pos:column="36">NTLM_NEGOTIATE_ASCII<pos:position pos:line="24" pos:column="56"/></name></expr></argument> )<pos:position pos:line="24" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="59"/></expr_stmt>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>

    <do pos:line="27" pos:column="5">do <block pos:line="27" pos:column="8">{
        <if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><call><name pos:line="28" pos:column="13">fgets<pos:position pos:line="28" pos:column="18"/></name><argument_list pos:line="28" pos:column="18">(<argument><expr><name pos:line="28" pos:column="19">buf<pos:position pos:line="28" pos:column="22"/></name></expr></argument>, <argument><expr><sizeof pos:line="28" pos:column="24">sizeof<argument_list pos:line="28" pos:column="30">(<argument><expr><name pos:line="28" pos:column="31">buf<pos:position pos:line="28" pos:column="34"/></name></expr></argument>)<pos:position pos:line="28" pos:column="35"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="28" pos:column="37">stdin<pos:position pos:line="28" pos:column="42"/></name></expr></argument>)<pos:position pos:line="28" pos:column="43"/></argument_list></call> <operator pos:line="28" pos:column="44">==<pos:position pos:line="28" pos:column="46"/></operator> <name pos:line="28" pos:column="47">NULL<pos:position pos:line="28" pos:column="51"/></name></expr>)<pos:position pos:line="28" pos:column="52"/></condition><then pos:line="28" pos:column="52">
            <block type="pseudo"><return pos:line="29" pos:column="13">return <expr><literal type="number" pos:line="29" pos:column="20">0<pos:position pos:line="29" pos:column="21"/></literal></expr>;<pos:position pos:line="29" pos:column="22"/></return></block></then></if>

        <decl_stmt><decl><type><name pos:line="31" pos:column="9">char<pos:position pos:line="31" pos:column="13"/></name> <modifier pos:line="31" pos:column="14">*<pos:position pos:line="31" pos:column="15"/></modifier></type><name pos:line="31" pos:column="15">c<pos:position pos:line="31" pos:column="16"/></name> <init pos:line="31" pos:column="17">= <expr><cast type="static" pos:line="31" pos:column="19">static_cast<argument_list type="generic" pos:line="31" pos:column="30">&lt;<argument><expr><name pos:line="31" pos:column="31">char<pos:position pos:line="31" pos:column="35"/></name><operator pos:line="31" pos:column="35">*<pos:position pos:line="31" pos:column="36"/></operator></expr></argument>&gt;<pos:position pos:line="31" pos:column="40"/></argument_list><argument_list pos:line="31" pos:column="37">(<argument><expr><call><name pos:line="31" pos:column="38">memchr<pos:position pos:line="31" pos:column="44"/></name><argument_list pos:line="31" pos:column="44">(<argument><expr><name pos:line="31" pos:column="45">buf<pos:position pos:line="31" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="31" pos:column="50">'\n'<pos:position pos:line="31" pos:column="54"/></literal></expr></argument>, <argument><expr><sizeof pos:line="31" pos:column="56">sizeof<argument_list pos:line="31" pos:column="62">(<argument><expr><name pos:line="31" pos:column="63">buf<pos:position pos:line="31" pos:column="66"/></name></expr></argument>)<pos:position pos:line="31" pos:column="67"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="31" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="31" pos:column="69"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="31" pos:column="70"/></decl_stmt>
        <if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name pos:line="32" pos:column="13">c<pos:position pos:line="32" pos:column="14"/></name></expr>)<pos:position pos:line="32" pos:column="15"/></condition><then pos:line="32" pos:column="15"> <block pos:line="32" pos:column="16">{
            <if pos:line="33" pos:column="13">if <condition pos:line="33" pos:column="16">(<expr><name pos:line="33" pos:column="17">oversized<pos:position pos:line="33" pos:column="26"/></name></expr>)<pos:position pos:line="33" pos:column="27"/></condition><then pos:line="33" pos:column="27"> <block pos:line="33" pos:column="28">{
                <expr_stmt><expr><call><name pos:line="34" pos:column="17">helperfail<pos:position pos:line="34" pos:column="27"/></name><argument_list pos:line="34" pos:column="27">(<argument><expr><literal type="string" pos:line="34" pos:column="28">"messge=\"illegal request received\""<pos:position pos:line="34" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="67"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="35" pos:column="17">fprintf<pos:position pos:line="35" pos:column="24"/></name><argument_list pos:line="35" pos:column="24">(<argument><expr><name pos:line="35" pos:column="25">stderr<pos:position pos:line="35" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="33">"Illegal request received: '%s'\n"<pos:position pos:line="35" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="69">buf<pos:position pos:line="35" pos:column="72"/></name></expr></argument>)<pos:position pos:line="35" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="74"/></expr_stmt>
                <return pos:line="36" pos:column="17">return <expr><literal type="number" pos:line="36" pos:column="24">1<pos:position pos:line="36" pos:column="25"/></literal></expr>;<pos:position pos:line="36" pos:column="26"/></return>
            }<pos:position pos:line="37" pos:column="14"/></block></then></if>
            <expr_stmt><expr><operator pos:line="38" pos:column="13">*<pos:position pos:line="38" pos:column="14"/></operator><name pos:line="38" pos:column="14">c<pos:position pos:line="38" pos:column="15"/></name> <operator pos:line="38" pos:column="16">=<pos:position pos:line="38" pos:column="17"/></operator> <literal type="char" pos:line="38" pos:column="18">'\0'<pos:position pos:line="38" pos:column="22"/></literal></expr>;<pos:position pos:line="38" pos:column="23"/></expr_stmt>
        }<pos:position pos:line="39" pos:column="10"/></block></then> <else pos:line="39" pos:column="11">else <block pos:line="39" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="40" pos:column="13">fprintf<pos:position pos:line="40" pos:column="20"/></name><argument_list pos:line="40" pos:column="20">(<argument><expr><name pos:line="40" pos:column="21">stderr<pos:position pos:line="40" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="29">"No newline in '%s'\n"<pos:position pos:line="40" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="53">buf<pos:position pos:line="40" pos:column="56"/></name></expr></argument>)<pos:position pos:line="40" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="58"/></expr_stmt>
            <expr_stmt><expr><name pos:line="41" pos:column="13">oversized<pos:position pos:line="41" pos:column="22"/></name> <operator pos:line="41" pos:column="23">=<pos:position pos:line="41" pos:column="24"/></operator> <literal type="number" pos:line="41" pos:column="25">1<pos:position pos:line="41" pos:column="26"/></literal></expr>;<pos:position pos:line="41" pos:column="27"/></expr_stmt>
            <continue pos:line="42" pos:column="13">continue;<pos:position pos:line="42" pos:column="22"/></continue>
        }<pos:position pos:line="43" pos:column="10"/></block></else></if>
    }<pos:position pos:line="44" pos:column="6"/></block> while <condition pos:line="44" pos:column="13">(<expr><literal type="boolean" pos:line="44" pos:column="14">false<pos:position pos:line="44" pos:column="19"/></literal></expr>)<pos:position pos:line="44" pos:column="20"/></condition>;<pos:position pos:line="44" pos:column="21"/></do>

    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><operator pos:line="46" pos:column="9">(<pos:position pos:line="46" pos:column="10"/></operator><call><name pos:line="46" pos:column="10">strlen<pos:position pos:line="46" pos:column="16"/></name><argument_list pos:line="46" pos:column="16">(<argument><expr><name pos:line="46" pos:column="17">buf<pos:position pos:line="46" pos:column="20"/></name></expr></argument>)<pos:position pos:line="46" pos:column="21"/></argument_list></call> <operator pos:line="46" pos:column="22">&gt;<pos:position pos:line="46" pos:column="26"/></operator> <literal type="number" pos:line="46" pos:column="24">3<pos:position pos:line="46" pos:column="25"/></literal><operator pos:line="46" pos:column="25">)<pos:position pos:line="46" pos:column="26"/></operator> <operator pos:line="46" pos:column="27">&amp;&amp;<pos:position pos:line="46" pos:column="37"/></operator> <name pos:line="46" pos:column="30">NTLM_packet_debug_enabled<pos:position pos:line="46" pos:column="55"/></name></expr>)<pos:position pos:line="46" pos:column="56"/></condition><then pos:line="46" pos:column="56"> <block pos:line="46" pos:column="57">{
        <expr_stmt><expr><name pos:line="47" pos:column="9">decodedLen<pos:position pos:line="47" pos:column="19"/></name> <operator pos:line="47" pos:column="20">=<pos:position pos:line="47" pos:column="21"/></operator> <call><name pos:line="47" pos:column="22">base64_decode<pos:position pos:line="47" pos:column="35"/></name><argument_list pos:line="47" pos:column="35">(<argument><expr><name pos:line="47" pos:column="36">decoded<pos:position pos:line="47" pos:column="43"/></name></expr></argument>, <argument><expr><sizeof pos:line="47" pos:column="45">sizeof<argument_list pos:line="47" pos:column="51">(<argument><expr><name pos:line="47" pos:column="52">decoded<pos:position pos:line="47" pos:column="59"/></name></expr></argument>)<pos:position pos:line="47" pos:column="60"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="47" pos:column="62">buf<pos:position pos:line="47" pos:column="65"/></name><operator pos:line="47" pos:column="65">+<pos:position pos:line="47" pos:column="66"/></operator><literal type="number" pos:line="47" pos:column="66">3<pos:position pos:line="47" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="69"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="48" pos:column="9">strncpy<pos:position pos:line="48" pos:column="16"/></name><argument_list pos:line="48" pos:column="16">(<argument><expr><name pos:line="48" pos:column="17">helper_command<pos:position pos:line="48" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="33">buf<pos:position pos:line="48" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="48" pos:column="38">2<pos:position pos:line="48" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="49" pos:column="9">debug<pos:position pos:line="49" pos:column="14"/></name><argument_list pos:line="49" pos:column="14">(<argument><expr><literal type="string" pos:line="49" pos:column="15">"Got '%s' from Squid with data:\n"<pos:position pos:line="49" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="51">helper_command<pos:position pos:line="49" pos:column="65"/></name></expr></argument>)<pos:position pos:line="49" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="67"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="50" pos:column="9">hex_dump<pos:position pos:line="50" pos:column="17"/></name><argument_list pos:line="50" pos:column="17">(<argument><expr><cast type="reinterpret" pos:line="50" pos:column="18">reinterpret_cast<argument_list type="generic" pos:line="50" pos:column="34">&lt;<argument><expr><name pos:line="50" pos:column="35">unsigned<pos:position pos:line="50" pos:column="43"/></name> <name pos:line="50" pos:column="44">char<pos:position pos:line="50" pos:column="48"/></name><operator pos:line="50" pos:column="48">*<pos:position pos:line="50" pos:column="49"/></operator></expr></argument>&gt;<pos:position pos:line="50" pos:column="53"/></argument_list><argument_list pos:line="50" pos:column="50">(<argument><expr><name pos:line="50" pos:column="51">decoded<pos:position pos:line="50" pos:column="58"/></name></expr></argument>)<pos:position pos:line="50" pos:column="59"/></argument_list></cast></expr></argument>, <argument><expr><name pos:line="50" pos:column="61">decodedLen<pos:position pos:line="50" pos:column="71"/></name></expr></argument>)<pos:position pos:line="50" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="73"/></expr_stmt>
    }<pos:position pos:line="51" pos:column="6"/></block></then> <else pos:line="51" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="52" pos:column="9">debug<pos:position pos:line="52" pos:column="14"/></name><argument_list pos:line="52" pos:column="14">(<argument><expr><literal type="string" pos:line="52" pos:column="15">"Got '%s' from Squid\n"<pos:position pos:line="52" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="52" pos:column="40">buf<pos:position pos:line="52" pos:column="43"/></name></expr></argument>)<pos:position pos:line="52" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="45"/></expr_stmt></block></else></if>
    <if pos:line="53" pos:column="5">if <condition pos:line="53" pos:column="8">(<expr><call><name pos:line="53" pos:column="9">memcmp<pos:position pos:line="53" pos:column="15"/></name><argument_list pos:line="53" pos:column="15">(<argument><expr><name pos:line="53" pos:column="16">buf<pos:position pos:line="53" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="21">"YR"<pos:position pos:line="53" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="53" pos:column="27">2<pos:position pos:line="53" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="29"/></argument_list></call> <operator pos:line="53" pos:column="30">==<pos:position pos:line="53" pos:column="32"/></operator> <literal type="number" pos:line="53" pos:column="33">0<pos:position pos:line="53" pos:column="34"/></literal></expr>)<pos:position pos:line="53" pos:column="35"/></condition><then pos:line="53" pos:column="35"> <block pos:line="53" pos:column="36">{	<comment type="block" pos:line="53" pos:column="41">/* refresh-request */</comment>
        <comment type="block" pos:line="54" pos:column="9">/* figure out what we got */</comment>
        <if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><call><name pos:line="55" pos:column="13">strlen<pos:position pos:line="55" pos:column="19"/></name><argument_list pos:line="55" pos:column="19">(<argument><expr><name pos:line="55" pos:column="20">buf<pos:position pos:line="55" pos:column="23"/></name></expr></argument>)<pos:position pos:line="55" pos:column="24"/></argument_list></call> <operator pos:line="55" pos:column="25">&gt;<pos:position pos:line="55" pos:column="29"/></operator> <literal type="number" pos:line="55" pos:column="27">3<pos:position pos:line="55" pos:column="28"/></literal></expr>)<pos:position pos:line="55" pos:column="29"/></condition><then pos:line="55" pos:column="29">
            <block type="pseudo"><expr_stmt><expr><name pos:line="56" pos:column="13">decodedLen<pos:position pos:line="56" pos:column="23"/></name> <operator pos:line="56" pos:column="24">=<pos:position pos:line="56" pos:column="25"/></operator> <call><name pos:line="56" pos:column="26">base64_decode<pos:position pos:line="56" pos:column="39"/></name><argument_list pos:line="56" pos:column="39">(<argument><expr><name pos:line="56" pos:column="40">decoded<pos:position pos:line="56" pos:column="47"/></name></expr></argument>, <argument><expr><sizeof pos:line="56" pos:column="49">sizeof<argument_list pos:line="56" pos:column="55">(<argument><expr><name pos:line="56" pos:column="56">decoded<pos:position pos:line="56" pos:column="63"/></name></expr></argument>)<pos:position pos:line="56" pos:column="64"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="56" pos:column="66">buf<pos:position pos:line="56" pos:column="69"/></name><operator pos:line="56" pos:column="69">+<pos:position pos:line="56" pos:column="70"/></operator><literal type="number" pos:line="56" pos:column="70">3<pos:position pos:line="56" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="73"/></expr_stmt></block></then>
        <else pos:line="57" pos:column="9">else <block pos:line="57" pos:column="14">{
            <expr_stmt><expr><call><name pos:line="58" pos:column="13">debug<pos:position pos:line="58" pos:column="18"/></name><argument_list pos:line="58" pos:column="18">(<argument><expr><literal type="string" pos:line="58" pos:column="19">"Negotiate packet not supplied - self generated\n"<pos:position pos:line="58" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="71"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="59" pos:column="13">memcpy<pos:position pos:line="59" pos:column="19"/></name><argument_list pos:line="59" pos:column="19">(<argument><expr><name pos:line="59" pos:column="20">decoded<pos:position pos:line="59" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="59" pos:column="29">&amp;<pos:position pos:line="59" pos:column="34"/></operator><name pos:line="59" pos:column="30">local_nego<pos:position pos:line="59" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="59" pos:column="42">sizeof<argument_list pos:line="59" pos:column="48">(<argument><expr><name pos:line="59" pos:column="49">local_nego<pos:position pos:line="59" pos:column="59"/></name></expr></argument>)<pos:position pos:line="59" pos:column="60"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="59" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="62"/></expr_stmt>
            <expr_stmt><expr><name pos:line="60" pos:column="13">decodedLen<pos:position pos:line="60" pos:column="23"/></name> <operator pos:line="60" pos:column="24">=<pos:position pos:line="60" pos:column="25"/></operator> <sizeof pos:line="60" pos:column="26">sizeof<argument_list pos:line="60" pos:column="32">(<argument><expr><name pos:line="60" pos:column="33">local_nego<pos:position pos:line="60" pos:column="43"/></name></expr></argument>)<pos:position pos:line="60" pos:column="44"/></argument_list></sizeof></expr>;<pos:position pos:line="60" pos:column="45"/></expr_stmt>
        }<pos:position pos:line="61" pos:column="10"/></block></else></if>
        <if pos:line="62" pos:column="9">if <condition pos:line="62" pos:column="12">(<expr><operator pos:line="62" pos:column="13">(<pos:position pos:line="62" pos:column="14"/></operator><name pos:line="62" pos:column="14">size_t<pos:position pos:line="62" pos:column="20"/></name><operator pos:line="62" pos:column="20">)<pos:position pos:line="62" pos:column="21"/></operator><name pos:line="62" pos:column="21">decodedLen<pos:position pos:line="62" pos:column="31"/></name> <operator pos:line="62" pos:column="32">&lt;<pos:position pos:line="62" pos:column="36"/></operator> <sizeof pos:line="62" pos:column="34">sizeof<argument_list pos:line="62" pos:column="40">(<argument><expr><name pos:line="62" pos:column="41">ntlmhdr<pos:position pos:line="62" pos:column="48"/></name></expr></argument>)<pos:position pos:line="62" pos:column="49"/></argument_list></sizeof></expr>)<pos:position pos:line="62" pos:column="50"/></condition><then pos:line="62" pos:column="50"> <block pos:line="62" pos:column="51">{		<comment type="block" pos:line="62" pos:column="65">/* decoding failure, return error */</comment>
            <expr_stmt><expr><call><name pos:line="63" pos:column="13">SEND_ERR<pos:position pos:line="63" pos:column="21"/></name><argument_list pos:line="63" pos:column="21">(<argument><expr><literal type="string" pos:line="63" pos:column="22">"message=\"Packet format error, couldn't base64-decode\""<pos:position pos:line="63" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="81"/></expr_stmt>
            <return pos:line="64" pos:column="13">return <expr><literal type="number" pos:line="64" pos:column="20">1<pos:position pos:line="64" pos:column="21"/></literal></expr>;<pos:position pos:line="64" pos:column="22"/></return>
        }<pos:position pos:line="65" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="66" pos:column="9">/* fast-track-decode request type. */</comment>
        <expr_stmt><expr><name pos:line="67" pos:column="9">fast_header<pos:position pos:line="67" pos:column="20"/></name> <operator pos:line="67" pos:column="21">=<pos:position pos:line="67" pos:column="22"/></operator> <operator pos:line="67" pos:column="23">(<pos:position pos:line="67" pos:column="24"/></operator>struct <name pos:line="67" pos:column="31">_ntlmhdr<pos:position pos:line="67" pos:column="39"/></name> <operator pos:line="67" pos:column="40">*<pos:position pos:line="67" pos:column="41"/></operator><operator pos:line="67" pos:column="41">)<pos:position pos:line="67" pos:column="42"/></operator> <name pos:line="67" pos:column="43">decoded<pos:position pos:line="67" pos:column="50"/></name></expr>;<pos:position pos:line="67" pos:column="51"/></expr_stmt>

        <comment type="block" pos:line="69" pos:column="9">/* sanity-check: it IS a NTLMSSP packet, isn't it? */</comment>
        <if pos:line="70" pos:column="9">if <condition pos:line="70" pos:column="12">(<expr><call><name pos:line="70" pos:column="13">ntlm_validate_packet<pos:position pos:line="70" pos:column="33"/></name><argument_list pos:line="70" pos:column="33">(<argument><expr><name pos:line="70" pos:column="34">fast_header<pos:position pos:line="70" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="47">NTLM_ANY<pos:position pos:line="70" pos:column="55"/></name></expr></argument>)<pos:position pos:line="70" pos:column="56"/></argument_list></call> <operator pos:line="70" pos:column="57">!=<pos:position pos:line="70" pos:column="59"/></operator> <name pos:line="70" pos:column="60">NTLM_ERR_NONE<pos:position pos:line="70" pos:column="73"/></name></expr>)<pos:position pos:line="70" pos:column="74"/></condition><then pos:line="70" pos:column="74"> <block pos:line="70" pos:column="75">{
            <expr_stmt><expr><call><name pos:line="71" pos:column="13">SEND_ERR<pos:position pos:line="71" pos:column="21"/></name><argument_list pos:line="71" pos:column="21">(<argument><expr><literal type="string" pos:line="71" pos:column="22">"message=\"Broken authentication packet\""<pos:position pos:line="71" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="66"/></expr_stmt>
            <return pos:line="72" pos:column="13">return <expr><literal type="number" pos:line="72" pos:column="20">1<pos:position pos:line="72" pos:column="21"/></literal></expr>;<pos:position pos:line="72" pos:column="22"/></return>
        }<pos:position pos:line="73" pos:column="10"/></block></then></if>
        <switch pos:line="74" pos:column="9">switch <condition pos:line="74" pos:column="16">(<expr><name><name pos:line="74" pos:column="17">fast_header<pos:position pos:line="74" pos:column="28"/></name><operator pos:line="74" pos:column="28">-&gt;<pos:position pos:line="74" pos:column="33"/></operator><name pos:line="74" pos:column="30">type<pos:position pos:line="74" pos:column="34"/></name></name></expr>)<pos:position pos:line="74" pos:column="35"/></condition> <block pos:line="74" pos:column="36">{
        <case pos:line="75" pos:column="9">case <expr><name pos:line="75" pos:column="14">NTLM_NEGOTIATE<pos:position pos:line="75" pos:column="28"/></name></expr>:<pos:position pos:line="75" pos:column="29"/></case> <block pos:line="75" pos:column="30">{
            <comment type="block" pos:line="76" pos:column="13">/* Obtain challenge against SSPI */</comment>
            <expr_stmt><expr><call><name pos:line="77" pos:column="13">debug<pos:position pos:line="77" pos:column="18"/></name><argument_list pos:line="77" pos:column="18">(<argument><expr><literal type="string" pos:line="77" pos:column="19">"attempting SSPI challenge retrieval\n"<pos:position pos:line="77" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="60"/></expr_stmt>
            <decl_stmt><decl><type><name pos:line="78" pos:column="13">char<pos:position pos:line="78" pos:column="17"/></name> <modifier pos:line="78" pos:column="18">*<pos:position pos:line="78" pos:column="19"/></modifier></type><name pos:line="78" pos:column="19">c<pos:position pos:line="78" pos:column="20"/></name> <init pos:line="78" pos:column="21">= <expr><operator pos:line="78" pos:column="23">(<pos:position pos:line="78" pos:column="24"/></operator><name pos:line="78" pos:column="24">char<pos:position pos:line="78" pos:column="28"/></name> <operator pos:line="78" pos:column="29">*<pos:position pos:line="78" pos:column="30"/></operator><operator pos:line="78" pos:column="30">)<pos:position pos:line="78" pos:column="31"/></operator> <call><name pos:line="78" pos:column="32">SSP_MakeChallenge<pos:position pos:line="78" pos:column="49"/></name><argument_list pos:line="78" pos:column="49">(<argument><expr><operator pos:line="78" pos:column="50">(<pos:position pos:line="78" pos:column="51"/></operator><name pos:line="78" pos:column="51">ntlm_negotiate<pos:position pos:line="78" pos:column="65"/></name> <operator pos:line="78" pos:column="66">*<pos:position pos:line="78" pos:column="67"/></operator><operator pos:line="78" pos:column="67">)<pos:position pos:line="78" pos:column="68"/></operator> <name pos:line="78" pos:column="69">decoded<pos:position pos:line="78" pos:column="76"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="78">decodedLen<pos:position pos:line="78" pos:column="88"/></name></expr></argument>)<pos:position pos:line="78" pos:column="89"/></argument_list></call></expr></init></decl>;<pos:position pos:line="78" pos:column="90"/></decl_stmt>
            <if pos:line="79" pos:column="13">if <condition pos:line="79" pos:column="16">(<expr><name pos:line="79" pos:column="17">c<pos:position pos:line="79" pos:column="18"/></name></expr>)<pos:position pos:line="79" pos:column="19"/></condition><then pos:line="79" pos:column="19"> <block pos:line="79" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="80" pos:column="17">SEND_TT<pos:position pos:line="80" pos:column="24"/></name><argument_list pos:line="80" pos:column="24">(<argument><expr><name pos:line="80" pos:column="25">c<pos:position pos:line="80" pos:column="26"/></name></expr></argument>)<pos:position pos:line="80" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="28"/></expr_stmt>
                <if pos:line="81" pos:column="17">if <condition pos:line="81" pos:column="20">(<expr><name pos:line="81" pos:column="21">NTLM_packet_debug_enabled<pos:position pos:line="81" pos:column="46"/></name></expr>)<pos:position pos:line="81" pos:column="47"/></condition><then pos:line="81" pos:column="47"> <block pos:line="81" pos:column="48">{
                    <expr_stmt><expr><name pos:line="82" pos:column="21">decodedLen<pos:position pos:line="82" pos:column="31"/></name> <operator pos:line="82" pos:column="32">=<pos:position pos:line="82" pos:column="33"/></operator> <call><name pos:line="82" pos:column="34">base64_decode<pos:position pos:line="82" pos:column="47"/></name><argument_list pos:line="82" pos:column="47">(<argument><expr><name pos:line="82" pos:column="48">decoded<pos:position pos:line="82" pos:column="55"/></name></expr></argument>, <argument><expr><sizeof pos:line="82" pos:column="57">sizeof<argument_list pos:line="82" pos:column="63">(<argument><expr><name pos:line="82" pos:column="64">decoded<pos:position pos:line="82" pos:column="71"/></name></expr></argument>)<pos:position pos:line="82" pos:column="72"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="82" pos:column="74">c<pos:position pos:line="82" pos:column="75"/></name></expr></argument>)<pos:position pos:line="82" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="77"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="83" pos:column="21">debug<pos:position pos:line="83" pos:column="26"/></name><argument_list pos:line="83" pos:column="26">(<argument><expr><literal type="string" pos:line="83" pos:column="27">"send 'TT' to squid with data:\n"<pos:position pos:line="83" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="62"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="84" pos:column="21">hex_dump<pos:position pos:line="84" pos:column="29"/></name><argument_list pos:line="84" pos:column="29">(<argument><expr><cast type="reinterpret" pos:line="84" pos:column="30">reinterpret_cast<argument_list type="generic" pos:line="84" pos:column="46">&lt;<argument><expr><name pos:line="84" pos:column="47">unsigned<pos:position pos:line="84" pos:column="55"/></name> <name pos:line="84" pos:column="56">char<pos:position pos:line="84" pos:column="60"/></name><operator pos:line="84" pos:column="60">*<pos:position pos:line="84" pos:column="61"/></operator></expr></argument>&gt;<pos:position pos:line="84" pos:column="65"/></argument_list><argument_list pos:line="84" pos:column="62">(<argument><expr><name pos:line="84" pos:column="63">decoded<pos:position pos:line="84" pos:column="70"/></name></expr></argument>)<pos:position pos:line="84" pos:column="71"/></argument_list></cast></expr></argument>, <argument><expr><name pos:line="84" pos:column="73">decodedLen<pos:position pos:line="84" pos:column="83"/></name></expr></argument>)<pos:position pos:line="84" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="85"/></expr_stmt>
                    <if pos:line="85" pos:column="21">if <condition pos:line="85" pos:column="24">(<expr><name pos:line="85" pos:column="25">NTLM_LocalCall<pos:position pos:line="85" pos:column="39"/></name></expr>)<pos:position pos:line="85" pos:column="40"/></condition><then pos:line="85" pos:column="40"> <block pos:line="85" pos:column="41">{
                        <expr_stmt><expr><call><name pos:line="86" pos:column="25">debug<pos:position pos:line="86" pos:column="30"/></name><argument_list pos:line="86" pos:column="30">(<argument><expr><literal type="string" pos:line="86" pos:column="31">"NTLM Local Call detected\n"<pos:position pos:line="86" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="61"/></expr_stmt>
                    }<pos:position pos:line="87" pos:column="22"/></block></then></if>
                }<pos:position pos:line="88" pos:column="18"/></block></then></if>
                <expr_stmt><expr><name pos:line="89" pos:column="17">have_challenge<pos:position pos:line="89" pos:column="31"/></name> <operator pos:line="89" pos:column="32">=<pos:position pos:line="89" pos:column="33"/></operator> <literal type="number" pos:line="89" pos:column="34">1<pos:position pos:line="89" pos:column="35"/></literal></expr>;<pos:position pos:line="89" pos:column="36"/></expr_stmt>
            }<pos:position pos:line="90" pos:column="14"/></block></then> <else pos:line="90" pos:column="15">else
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="91" pos:column="17">helperfail<pos:position pos:line="91" pos:column="27"/></name><argument_list pos:line="91" pos:column="27">(<argument><expr><literal type="string" pos:line="91" pos:column="28">"message=\"can't obtain challenge\""<pos:position pos:line="91" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="91" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="66"/></expr_stmt></block></else></if>

            <return pos:line="93" pos:column="13">return <expr><literal type="number" pos:line="93" pos:column="20">1<pos:position pos:line="93" pos:column="21"/></literal></expr>;<pos:position pos:line="93" pos:column="22"/></return>
        }<pos:position pos:line="94" pos:column="10"/></block>
        <comment type="block" pos:line="95" pos:column="9">/* notreached */</comment>
        <case pos:line="96" pos:column="9">case <expr><name pos:line="96" pos:column="14">NTLM_CHALLENGE<pos:position pos:line="96" pos:column="28"/></name></expr>:<pos:position pos:line="96" pos:column="29"/></case>
            <expr_stmt><expr><call><name pos:line="97" pos:column="13">SEND_ERR<pos:position pos:line="97" pos:column="21"/></name><argument_list pos:line="97" pos:column="21">(<argument><expr><literal type="string" pos:line="97" pos:column="22">"message=\"Got a challenge. We refuse to have our authority disputed\""<pos:position pos:line="97" pos:column="93"/></literal></expr></argument>)<pos:position pos:line="97" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="95"/></expr_stmt>
            <return pos:line="98" pos:column="13">return <expr><literal type="number" pos:line="98" pos:column="20">1<pos:position pos:line="98" pos:column="21"/></literal></expr>;<pos:position pos:line="98" pos:column="22"/></return>
            <comment type="block" pos:line="99" pos:column="13">/* notreached */</comment>
        <case pos:line="100" pos:column="9">case <expr><name pos:line="100" pos:column="14">NTLM_AUTHENTICATE<pos:position pos:line="100" pos:column="31"/></name></expr>:<pos:position pos:line="100" pos:column="32"/></case>
            <expr_stmt><expr><call><name pos:line="101" pos:column="13">SEND_ERR<pos:position pos:line="101" pos:column="21"/></name><argument_list pos:line="101" pos:column="21">(<argument><expr><literal type="string" pos:line="101" pos:column="22">"message=\"Got authentication request instead of negotiate request\""<pos:position pos:line="101" pos:column="91"/></literal></expr></argument>)<pos:position pos:line="101" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="93"/></expr_stmt>
            <return pos:line="102" pos:column="13">return <expr><literal type="number" pos:line="102" pos:column="20">1<pos:position pos:line="102" pos:column="21"/></literal></expr>;<pos:position pos:line="102" pos:column="22"/></return>
            <comment type="block" pos:line="103" pos:column="13">/* notreached */</comment>
        <default pos:line="104" pos:column="9">default:<pos:position pos:line="104" pos:column="17"/></default>
            <expr_stmt><expr><call><name pos:line="105" pos:column="13">helperfail<pos:position pos:line="105" pos:column="23"/></name><argument_list pos:line="105" pos:column="23">(<argument><expr><literal type="string" pos:line="105" pos:column="24">"message=\"unknown refresh-request packet type\""<pos:position pos:line="105" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="105" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="75"/></expr_stmt>
            <return pos:line="106" pos:column="13">return <expr><literal type="number" pos:line="106" pos:column="20">1<pos:position pos:line="106" pos:column="21"/></literal></expr>;<pos:position pos:line="106" pos:column="22"/></return>
        }<pos:position pos:line="107" pos:column="10"/></block></switch>
        <return pos:line="108" pos:column="9">return <expr><literal type="number" pos:line="108" pos:column="16">1<pos:position pos:line="108" pos:column="17"/></literal></expr>;<pos:position pos:line="108" pos:column="18"/></return>
    }<pos:position pos:line="109" pos:column="6"/></block></then></if>
    <if pos:line="110" pos:column="5">if <condition pos:line="110" pos:column="8">(<expr><call><name pos:line="110" pos:column="9">memcmp<pos:position pos:line="110" pos:column="15"/></name><argument_list pos:line="110" pos:column="15">(<argument><expr><name pos:line="110" pos:column="16">buf<pos:position pos:line="110" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="110" pos:column="21">"KK "<pos:position pos:line="110" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="110" pos:column="28">3<pos:position pos:line="110" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="110" pos:column="30"/></argument_list></call> <operator pos:line="110" pos:column="31">==<pos:position pos:line="110" pos:column="33"/></operator> <literal type="number" pos:line="110" pos:column="34">0<pos:position pos:line="110" pos:column="35"/></literal></expr>)<pos:position pos:line="110" pos:column="36"/></condition><then pos:line="110" pos:column="36"> <block pos:line="110" pos:column="37">{	<comment type="block" pos:line="110" pos:column="41">/* authenticate-request */</comment>
        <if pos:line="111" pos:column="9">if <condition pos:line="111" pos:column="12">(<expr><operator pos:line="111" pos:column="13">!<pos:position pos:line="111" pos:column="14"/></operator><name pos:line="111" pos:column="14">have_challenge<pos:position pos:line="111" pos:column="28"/></name></expr>)<pos:position pos:line="111" pos:column="29"/></condition><then pos:line="111" pos:column="29"> <block pos:line="111" pos:column="30">{
            <expr_stmt><expr><call><name pos:line="112" pos:column="13">helperfail<pos:position pos:line="112" pos:column="23"/></name><argument_list pos:line="112" pos:column="23">(<argument><expr><literal type="string" pos:line="112" pos:column="24">"message=\"invalid challenge\""<pos:position pos:line="112" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="112" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="57"/></expr_stmt>
            <return pos:line="113" pos:column="13">return <expr><literal type="number" pos:line="113" pos:column="20">1<pos:position pos:line="113" pos:column="21"/></literal></expr>;<pos:position pos:line="113" pos:column="22"/></return>
        }<pos:position pos:line="114" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="115" pos:column="9">/* figure out what we got */</comment>
        <expr_stmt><expr><name pos:line="116" pos:column="9">decodedLen<pos:position pos:line="116" pos:column="19"/></name> <operator pos:line="116" pos:column="20">=<pos:position pos:line="116" pos:column="21"/></operator> <call><name pos:line="116" pos:column="22">base64_decode<pos:position pos:line="116" pos:column="35"/></name><argument_list pos:line="116" pos:column="35">(<argument><expr><name pos:line="116" pos:column="36">decoded<pos:position pos:line="116" pos:column="43"/></name></expr></argument>, <argument><expr><sizeof pos:line="116" pos:column="45">sizeof<argument_list pos:line="116" pos:column="51">(<argument><expr><name pos:line="116" pos:column="52">decoded<pos:position pos:line="116" pos:column="59"/></name></expr></argument>)<pos:position pos:line="116" pos:column="60"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="116" pos:column="62">buf<pos:position pos:line="116" pos:column="65"/></name><operator pos:line="116" pos:column="65">+<pos:position pos:line="116" pos:column="66"/></operator><literal type="number" pos:line="116" pos:column="66">3<pos:position pos:line="116" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="116" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="69"/></expr_stmt>

        <if pos:line="118" pos:column="9">if <condition pos:line="118" pos:column="12">(<expr><operator pos:line="118" pos:column="13">(<pos:position pos:line="118" pos:column="14"/></operator><name pos:line="118" pos:column="14">size_t<pos:position pos:line="118" pos:column="20"/></name><operator pos:line="118" pos:column="20">)<pos:position pos:line="118" pos:column="21"/></operator><name pos:line="118" pos:column="21">decodedLen<pos:position pos:line="118" pos:column="31"/></name> <operator pos:line="118" pos:column="32">&lt;<pos:position pos:line="118" pos:column="36"/></operator> <sizeof pos:line="118" pos:column="34">sizeof<argument_list pos:line="118" pos:column="40">(<argument><expr><name pos:line="118" pos:column="41">ntlmhdr<pos:position pos:line="118" pos:column="48"/></name></expr></argument>)<pos:position pos:line="118" pos:column="49"/></argument_list></sizeof></expr>)<pos:position pos:line="118" pos:column="50"/></condition><then pos:line="118" pos:column="50"> <block pos:line="118" pos:column="51">{		<comment type="block" pos:line="118" pos:column="65">/* decoding failure, return error */</comment>
            <expr_stmt><expr><call><name pos:line="119" pos:column="13">SEND_ERR<pos:position pos:line="119" pos:column="21"/></name><argument_list pos:line="119" pos:column="21">(<argument><expr><literal type="string" pos:line="119" pos:column="22">"message=\"Packet format error, couldn't base64-decode\""<pos:position pos:line="119" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="119" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="81"/></expr_stmt>
            <return pos:line="120" pos:column="13">return <expr><literal type="number" pos:line="120" pos:column="20">1<pos:position pos:line="120" pos:column="21"/></literal></expr>;<pos:position pos:line="120" pos:column="22"/></return>
        }<pos:position pos:line="121" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="122" pos:column="9">/* fast-track-decode request type. */</comment>
        <expr_stmt><expr><name pos:line="123" pos:column="9">fast_header<pos:position pos:line="123" pos:column="20"/></name> <operator pos:line="123" pos:column="21">=<pos:position pos:line="123" pos:column="22"/></operator> <operator pos:line="123" pos:column="23">(<pos:position pos:line="123" pos:column="24"/></operator>struct <name pos:line="123" pos:column="31">_ntlmhdr<pos:position pos:line="123" pos:column="39"/></name> <operator pos:line="123" pos:column="40">*<pos:position pos:line="123" pos:column="41"/></operator><operator pos:line="123" pos:column="41">)<pos:position pos:line="123" pos:column="42"/></operator> <name pos:line="123" pos:column="43">decoded<pos:position pos:line="123" pos:column="50"/></name></expr>;<pos:position pos:line="123" pos:column="51"/></expr_stmt>

        <comment type="block" pos:line="125" pos:column="9">/* sanity-check: it IS a NTLMSSP packet, isn't it? */</comment>
        <if pos:line="126" pos:column="9">if <condition pos:line="126" pos:column="12">(<expr><call><name pos:line="126" pos:column="13">ntlm_validate_packet<pos:position pos:line="126" pos:column="33"/></name><argument_list pos:line="126" pos:column="33">(<argument><expr><name pos:line="126" pos:column="34">fast_header<pos:position pos:line="126" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="47">NTLM_ANY<pos:position pos:line="126" pos:column="55"/></name></expr></argument>)<pos:position pos:line="126" pos:column="56"/></argument_list></call> <operator pos:line="126" pos:column="57">!=<pos:position pos:line="126" pos:column="59"/></operator> <name pos:line="126" pos:column="60">NTLM_ERR_NONE<pos:position pos:line="126" pos:column="73"/></name></expr>)<pos:position pos:line="126" pos:column="74"/></condition><then pos:line="126" pos:column="74"> <block pos:line="126" pos:column="75">{
            <expr_stmt><expr><call><name pos:line="127" pos:column="13">SEND_ERR<pos:position pos:line="127" pos:column="21"/></name><argument_list pos:line="127" pos:column="21">(<argument><expr><literal type="string" pos:line="127" pos:column="22">"message=\"Broken authentication packet\""<pos:position pos:line="127" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="127" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="66"/></expr_stmt>
            <return pos:line="128" pos:column="13">return <expr><literal type="number" pos:line="128" pos:column="20">1<pos:position pos:line="128" pos:column="21"/></literal></expr>;<pos:position pos:line="128" pos:column="22"/></return>
        }<pos:position pos:line="129" pos:column="10"/></block></then></if>
        <switch pos:line="130" pos:column="9">switch <condition pos:line="130" pos:column="16">(<expr><name><name pos:line="130" pos:column="17">fast_header<pos:position pos:line="130" pos:column="28"/></name><operator pos:line="130" pos:column="28">-&gt;<pos:position pos:line="130" pos:column="33"/></operator><name pos:line="130" pos:column="30">type<pos:position pos:line="130" pos:column="34"/></name></name></expr>)<pos:position pos:line="130" pos:column="35"/></condition> <block pos:line="130" pos:column="36">{
        <case pos:line="131" pos:column="9">case <expr><name pos:line="131" pos:column="14">NTLM_NEGOTIATE<pos:position pos:line="131" pos:column="28"/></name></expr>:<pos:position pos:line="131" pos:column="29"/></case>
            <expr_stmt><expr><call><name pos:line="132" pos:column="13">SEND_ERR<pos:position pos:line="132" pos:column="21"/></name><argument_list pos:line="132" pos:column="21">(<argument><expr><literal type="string" pos:line="132" pos:column="22">"message=\"Invalid negotiation request received\""<pos:position pos:line="132" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="132" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="74"/></expr_stmt>
            <return pos:line="133" pos:column="13">return <expr><literal type="number" pos:line="133" pos:column="20">1<pos:position pos:line="133" pos:column="21"/></literal></expr>;<pos:position pos:line="133" pos:column="22"/></return>
            <comment type="block" pos:line="134" pos:column="13">/* notreached */</comment>
        <case pos:line="135" pos:column="9">case <expr><name pos:line="135" pos:column="14">NTLM_CHALLENGE<pos:position pos:line="135" pos:column="28"/></name></expr>:<pos:position pos:line="135" pos:column="29"/></case>
            <expr_stmt><expr><call><name pos:line="136" pos:column="13">SEND_ERR<pos:position pos:line="136" pos:column="21"/></name><argument_list pos:line="136" pos:column="21">(<argument><expr><literal type="string" pos:line="136" pos:column="22">"message=\"Got a challenge. We refuse to have our authority disputed\""<pos:position pos:line="136" pos:column="93"/></literal></expr></argument>)<pos:position pos:line="136" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="95"/></expr_stmt>
            <return pos:line="137" pos:column="13">return <expr><literal type="number" pos:line="137" pos:column="20">1<pos:position pos:line="137" pos:column="21"/></literal></expr>;<pos:position pos:line="137" pos:column="22"/></return>
            <comment type="block" pos:line="138" pos:column="13">/* notreached */</comment>
        <case pos:line="139" pos:column="9">case <expr><name pos:line="139" pos:column="14">NTLM_AUTHENTICATE<pos:position pos:line="139" pos:column="31"/></name></expr>:<pos:position pos:line="139" pos:column="32"/></case> <block pos:line="139" pos:column="33">{
            <comment type="block" pos:line="140" pos:column="13">/* check against SSPI */</comment>
            <decl_stmt><decl><type><name pos:line="141" pos:column="13">int<pos:position pos:line="141" pos:column="16"/></name></type> <name pos:line="141" pos:column="17">err<pos:position pos:line="141" pos:column="20"/></name> <init pos:line="141" pos:column="21">= <expr><call><name pos:line="141" pos:column="23">ntlm_check_auth<pos:position pos:line="141" pos:column="38"/></name><argument_list pos:line="141" pos:column="38">(<argument><expr><operator pos:line="141" pos:column="39">(<pos:position pos:line="141" pos:column="40"/></operator><name pos:line="141" pos:column="40">ntlm_authenticate<pos:position pos:line="141" pos:column="57"/></name> <operator pos:line="141" pos:column="58">*<pos:position pos:line="141" pos:column="59"/></operator><operator pos:line="141" pos:column="59">)<pos:position pos:line="141" pos:column="60"/></operator> <name pos:line="141" pos:column="61">decoded<pos:position pos:line="141" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="141" pos:column="70">user<pos:position pos:line="141" pos:column="74"/></name></expr></argument>, <argument><expr><name pos:line="141" pos:column="76">domain<pos:position pos:line="141" pos:column="82"/></name></expr></argument>, <argument><expr><name pos:line="141" pos:column="84">decodedLen<pos:position pos:line="141" pos:column="94"/></name></expr></argument>)<pos:position pos:line="141" pos:column="95"/></argument_list></call></expr></init></decl>;<pos:position pos:line="141" pos:column="96"/></decl_stmt>
            <expr_stmt><expr><name pos:line="142" pos:column="13">have_challenge<pos:position pos:line="142" pos:column="27"/></name> <operator pos:line="142" pos:column="28">=<pos:position pos:line="142" pos:column="29"/></operator> <literal type="number" pos:line="142" pos:column="30">0<pos:position pos:line="142" pos:column="31"/></literal></expr>;<pos:position pos:line="142" pos:column="32"/></expr_stmt>
            <if pos:line="143" pos:column="13">if <condition pos:line="143" pos:column="16">(<expr><name pos:line="143" pos:column="17">err<pos:position pos:line="143" pos:column="20"/></name> <operator pos:line="143" pos:column="21">!=<pos:position pos:line="143" pos:column="23"/></operator> <name pos:line="143" pos:column="24">NTLM_ERR_NONE<pos:position pos:line="143" pos:column="37"/></name></expr>)<pos:position pos:line="143" pos:column="38"/></condition><then pos:line="143" pos:column="38"> <block pos:line="143" pos:column="39">{
<cpp:if pos:line="144" pos:column="1">#<cpp:directive pos:line="144" pos:column="2">if<pos:position pos:line="144" pos:column="4"/></cpp:directive> <expr><name pos:line="144" pos:column="5">FAIL_DEBUG<pos:position pos:line="144" pos:column="15"/></name></expr></cpp:if>
                <expr_stmt><expr><name pos:line="145" pos:column="17">fail_debug_enabled<pos:position pos:line="145" pos:column="35"/></name> <operator pos:line="145" pos:column="36">=<pos:position pos:line="145" pos:column="37"/></operator><literal type="number" pos:line="145" pos:column="37">1<pos:position pos:line="145" pos:column="38"/></literal></expr>;<pos:position pos:line="145" pos:column="39"/></expr_stmt>
<cpp:endif pos:line="146" pos:column="1">#<cpp:directive pos:line="146" pos:column="2">endif<pos:position pos:line="146" pos:column="7"/></cpp:directive></cpp:endif>
                <switch pos:line="147" pos:column="17">switch <condition pos:line="147" pos:column="24">(<expr><name pos:line="147" pos:column="25">err<pos:position pos:line="147" pos:column="28"/></name></expr>)<pos:position pos:line="147" pos:column="29"/></condition> <block pos:line="147" pos:column="30">{
                <case pos:line="148" pos:column="17">case <expr><name pos:line="148" pos:column="22">NTLM_ERR_NONE<pos:position pos:line="148" pos:column="35"/></name></expr>:<pos:position pos:line="148" pos:column="36"/></case>
                    <break pos:line="149" pos:column="21">break;<pos:position pos:line="149" pos:column="27"/></break>
                <case pos:line="150" pos:column="17">case <expr><name pos:line="150" pos:column="22">NTLM_BAD_NTGROUP<pos:position pos:line="150" pos:column="38"/></name></expr>:<pos:position pos:line="150" pos:column="39"/></case>
                    <expr_stmt><expr><call><name pos:line="151" pos:column="21">SEND_ERR<pos:position pos:line="151" pos:column="29"/></name><argument_list pos:line="151" pos:column="29">(<argument><expr><literal type="string" pos:line="151" pos:column="30">"message=\"Incorrect Group Membership\""<pos:position pos:line="151" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="151" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="72"/></expr_stmt>
                    <return pos:line="152" pos:column="21">return <expr><literal type="number" pos:line="152" pos:column="28">1<pos:position pos:line="152" pos:column="29"/></literal></expr>;<pos:position pos:line="152" pos:column="30"/></return>
                <case pos:line="153" pos:column="17">case <expr><name pos:line="153" pos:column="22">NTLM_BAD_REQUEST<pos:position pos:line="153" pos:column="38"/></name></expr>:<pos:position pos:line="153" pos:column="39"/></case>
                    <expr_stmt><expr><call><name pos:line="154" pos:column="21">SEND_ERR<pos:position pos:line="154" pos:column="29"/></name><argument_list pos:line="154" pos:column="29">(<argument><expr><literal type="string" pos:line="154" pos:column="30">"message=\"Incorrect Request Format\""<pos:position pos:line="154" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="154" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="70"/></expr_stmt>
                    <return pos:line="155" pos:column="21">return <expr><literal type="number" pos:line="155" pos:column="28">1<pos:position pos:line="155" pos:column="29"/></literal></expr>;<pos:position pos:line="155" pos:column="30"/></return>
                <case pos:line="156" pos:column="17">case <expr><name pos:line="156" pos:column="22">NTLM_SSPI_ERROR<pos:position pos:line="156" pos:column="37"/></name></expr>:<pos:position pos:line="156" pos:column="38"/></case>
                    <expr_stmt><expr><call><name pos:line="157" pos:column="21">FormatMessage<pos:position pos:line="157" pos:column="34"/></name><argument_list pos:line="157" pos:column="34">(
                        <argument><expr><name pos:line="158" pos:column="25">FORMAT_MESSAGE_ALLOCATE_BUFFER<pos:position pos:line="158" pos:column="55"/></name> <operator pos:line="158" pos:column="56">|<pos:position pos:line="158" pos:column="57"/></operator>
                        <name pos:line="159" pos:column="25">FORMAT_MESSAGE_FROM_SYSTEM<pos:position pos:line="159" pos:column="51"/></name> <operator pos:line="159" pos:column="52">|<pos:position pos:line="159" pos:column="53"/></operator>
                        <name pos:line="160" pos:column="25">FORMAT_MESSAGE_IGNORE_INSERTS<pos:position pos:line="160" pos:column="54"/></name></expr></argument>,
                        <argument><expr><name pos:line="161" pos:column="25">NULL<pos:position pos:line="161" pos:column="29"/></name></expr></argument>,
                        <argument><expr><call><name pos:line="162" pos:column="25">GetLastError<pos:position pos:line="162" pos:column="37"/></name><argument_list pos:line="162" pos:column="37">()<pos:position pos:line="162" pos:column="39"/></argument_list></call></expr></argument>,
                        <argument><expr><call><name pos:line="163" pos:column="25">MAKELANGID<pos:position pos:line="163" pos:column="35"/></name><argument_list pos:line="163" pos:column="35">(<argument><expr><name pos:line="163" pos:column="36">LANG_NEUTRAL<pos:position pos:line="163" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="163" pos:column="50">SUBLANG_DEFAULT<pos:position pos:line="163" pos:column="65"/></name></expr></argument>)<pos:position pos:line="163" pos:column="66"/></argument_list></call></expr></argument>, <comment type="line" pos:line="163" pos:column="68">// Default language</comment>
                        <argument><expr><operator pos:line="164" pos:column="25">(<pos:position pos:line="164" pos:column="26"/></operator><name pos:line="164" pos:column="26">LPTSTR<pos:position pos:line="164" pos:column="32"/></name><operator pos:line="164" pos:column="32">)<pos:position pos:line="164" pos:column="33"/></operator> <operator pos:line="164" pos:column="34">&amp;<pos:position pos:line="164" pos:column="39"/></operator><name pos:line="164" pos:column="35">ErrorMessage<pos:position pos:line="164" pos:column="47"/></name></expr></argument>,
                        <argument><expr><literal type="number" pos:line="165" pos:column="25">0<pos:position pos:line="165" pos:column="26"/></literal></expr></argument>,
                        <argument><expr><name pos:line="166" pos:column="25">NULL<pos:position pos:line="166" pos:column="29"/></name></expr></argument>)<pos:position pos:line="166" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="31"/></expr_stmt>
                    <if pos:line="167" pos:column="21">if <condition pos:line="167" pos:column="24">(<expr><name><name pos:line="167" pos:column="25">ErrorMessage<pos:position pos:line="167" pos:column="37"/></name><index pos:line="167" pos:column="37">[<expr><call><name pos:line="167" pos:column="38">strlen<pos:position pos:line="167" pos:column="44"/></name><argument_list pos:line="167" pos:column="44">(<argument><expr><name pos:line="167" pos:column="45">ErrorMessage<pos:position pos:line="167" pos:column="57"/></name></expr></argument>)<pos:position pos:line="167" pos:column="58"/></argument_list></call> <operator pos:line="167" pos:column="59">-<pos:position pos:line="167" pos:column="60"/></operator> <literal type="number" pos:line="167" pos:column="61">1<pos:position pos:line="167" pos:column="62"/></literal></expr>]<pos:position pos:line="167" pos:column="63"/></index></name> <operator pos:line="167" pos:column="64">==<pos:position pos:line="167" pos:column="66"/></operator> <literal type="char" pos:line="167" pos:column="67">'\n'<pos:position pos:line="167" pos:column="71"/></literal></expr>)<pos:position pos:line="167" pos:column="72"/></condition><then pos:line="167" pos:column="72">
                        <block type="pseudo"><expr_stmt><expr><name><name pos:line="168" pos:column="25">ErrorMessage<pos:position pos:line="168" pos:column="37"/></name><index pos:line="168" pos:column="37">[<expr><call><name pos:line="168" pos:column="38">strlen<pos:position pos:line="168" pos:column="44"/></name><argument_list pos:line="168" pos:column="44">(<argument><expr><name pos:line="168" pos:column="45">ErrorMessage<pos:position pos:line="168" pos:column="57"/></name></expr></argument>)<pos:position pos:line="168" pos:column="58"/></argument_list></call> <operator pos:line="168" pos:column="59">-<pos:position pos:line="168" pos:column="60"/></operator> <literal type="number" pos:line="168" pos:column="61">1<pos:position pos:line="168" pos:column="62"/></literal></expr>]<pos:position pos:line="168" pos:column="63"/></index></name> <operator pos:line="168" pos:column="64">=<pos:position pos:line="168" pos:column="65"/></operator> <literal type="char" pos:line="168" pos:column="66">'\0'<pos:position pos:line="168" pos:column="70"/></literal></expr>;<pos:position pos:line="168" pos:column="71"/></expr_stmt></block></then></if>
                    <if pos:line="169" pos:column="21">if <condition pos:line="169" pos:column="24">(<expr><name><name pos:line="169" pos:column="25">ErrorMessage<pos:position pos:line="169" pos:column="37"/></name><index pos:line="169" pos:column="37">[<expr><call><name pos:line="169" pos:column="38">strlen<pos:position pos:line="169" pos:column="44"/></name><argument_list pos:line="169" pos:column="44">(<argument><expr><name pos:line="169" pos:column="45">ErrorMessage<pos:position pos:line="169" pos:column="57"/></name></expr></argument>)<pos:position pos:line="169" pos:column="58"/></argument_list></call> <operator pos:line="169" pos:column="59">-<pos:position pos:line="169" pos:column="60"/></operator> <literal type="number" pos:line="169" pos:column="61">1<pos:position pos:line="169" pos:column="62"/></literal></expr>]<pos:position pos:line="169" pos:column="63"/></index></name> <operator pos:line="169" pos:column="64">==<pos:position pos:line="169" pos:column="66"/></operator> <literal type="char" pos:line="169" pos:column="67">'\r'<pos:position pos:line="169" pos:column="71"/></literal></expr>)<pos:position pos:line="169" pos:column="72"/></condition><then pos:line="169" pos:column="72">
                        <block type="pseudo"><expr_stmt><expr><name><name pos:line="170" pos:column="25">ErrorMessage<pos:position pos:line="170" pos:column="37"/></name><index pos:line="170" pos:column="37">[<expr><call><name pos:line="170" pos:column="38">strlen<pos:position pos:line="170" pos:column="44"/></name><argument_list pos:line="170" pos:column="44">(<argument><expr><name pos:line="170" pos:column="45">ErrorMessage<pos:position pos:line="170" pos:column="57"/></name></expr></argument>)<pos:position pos:line="170" pos:column="58"/></argument_list></call> <operator pos:line="170" pos:column="59">-<pos:position pos:line="170" pos:column="60"/></operator> <literal type="number" pos:line="170" pos:column="61">1<pos:position pos:line="170" pos:column="62"/></literal></expr>]<pos:position pos:line="170" pos:column="63"/></index></name> <operator pos:line="170" pos:column="64">=<pos:position pos:line="170" pos:column="65"/></operator> <literal type="char" pos:line="170" pos:column="66">'\0'<pos:position pos:line="170" pos:column="70"/></literal></expr>;<pos:position pos:line="170" pos:column="71"/></expr_stmt></block></then></if>
                    <expr_stmt><expr><call><name pos:line="171" pos:column="21">SEND_ERR<pos:position pos:line="171" pos:column="29"/></name><argument_list pos:line="171" pos:column="29">(<argument><expr><name pos:line="171" pos:column="30">ErrorMessage<pos:position pos:line="171" pos:column="42"/></name></expr></argument>)<pos:position pos:line="171" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="171" pos:column="44"/></expr_stmt> <comment type="line" pos:line="171" pos:column="45">// TODO update to new syntax</comment>
                    <expr_stmt><expr><call><name pos:line="172" pos:column="21">LocalFree<pos:position pos:line="172" pos:column="30"/></name><argument_list pos:line="172" pos:column="30">(<argument><expr><name pos:line="172" pos:column="31">ErrorMessage<pos:position pos:line="172" pos:column="43"/></name></expr></argument>)<pos:position pos:line="172" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="172" pos:column="45"/></expr_stmt>
                    <return pos:line="173" pos:column="21">return <expr><literal type="number" pos:line="173" pos:column="28">1<pos:position pos:line="173" pos:column="29"/></literal></expr>;<pos:position pos:line="173" pos:column="30"/></return>
                <default pos:line="174" pos:column="17">default:<pos:position pos:line="174" pos:column="25"/></default>
                    <expr_stmt><expr><call><name pos:line="175" pos:column="21">SEND_ERR<pos:position pos:line="175" pos:column="29"/></name><argument_list pos:line="175" pos:column="29">(<argument><expr><literal type="string" pos:line="175" pos:column="30">"message=\"Unknown Error\""<pos:position pos:line="175" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="175" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="175" pos:column="59"/></expr_stmt>
                    <return pos:line="176" pos:column="21">return <expr><literal type="number" pos:line="176" pos:column="28">1<pos:position pos:line="176" pos:column="29"/></literal></expr>;<pos:position pos:line="176" pos:column="30"/></return>
                }<pos:position pos:line="177" pos:column="18"/></block></switch>
            }<pos:position pos:line="178" pos:column="14"/></block></then></if>
            <comment type="block" pos:line="179" pos:column="13">/* let's lowercase them for our convenience */</comment>
            <expr_stmt><expr><call><name pos:line="180" pos:column="13">lc<pos:position pos:line="180" pos:column="15"/></name><argument_list pos:line="180" pos:column="15">(<argument><expr><name pos:line="180" pos:column="16">domain<pos:position pos:line="180" pos:column="22"/></name></expr></argument>)<pos:position pos:line="180" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="180" pos:column="24"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="181" pos:column="13">lc<pos:position pos:line="181" pos:column="15"/></name><argument_list pos:line="181" pos:column="15">(<argument><expr><name pos:line="181" pos:column="16">user<pos:position pos:line="181" pos:column="20"/></name></expr></argument>)<pos:position pos:line="181" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="181" pos:column="22"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="182" pos:column="13">fprintf<pos:position pos:line="182" pos:column="20"/></name><argument_list pos:line="182" pos:column="20">(<argument><expr><name pos:line="182" pos:column="21">stdout<pos:position pos:line="182" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="182" pos:column="29">"OK user=\"%s\\%s\""<pos:position pos:line="182" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="182" pos:column="51">domain<pos:position pos:line="182" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="182" pos:column="59">user<pos:position pos:line="182" pos:column="63"/></name></expr></argument>)<pos:position pos:line="182" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="182" pos:column="65"/></expr_stmt>
            <return pos:line="183" pos:column="13">return <expr><literal type="number" pos:line="183" pos:column="20">1<pos:position pos:line="183" pos:column="21"/></literal></expr>;<pos:position pos:line="183" pos:column="22"/></return>
        }<pos:position pos:line="184" pos:column="10"/></block>
        <default pos:line="185" pos:column="9">default:<pos:position pos:line="185" pos:column="17"/></default>
            <expr_stmt><expr><call><name pos:line="186" pos:column="13">helperfail<pos:position pos:line="186" pos:column="23"/></name><argument_list pos:line="186" pos:column="23">(<argument><expr><literal type="string" pos:line="186" pos:column="24">"message=\"unknown authentication packet type\""<pos:position pos:line="186" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="186" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="186" pos:column="74"/></expr_stmt>
            <return pos:line="187" pos:column="13">return <expr><literal type="number" pos:line="187" pos:column="20">1<pos:position pos:line="187" pos:column="21"/></literal></expr>;<pos:position pos:line="187" pos:column="22"/></return>
        }<pos:position pos:line="188" pos:column="10"/></block></switch>
        <return pos:line="189" pos:column="9">return <expr><literal type="number" pos:line="189" pos:column="16">1<pos:position pos:line="189" pos:column="17"/></literal></expr>;<pos:position pos:line="189" pos:column="18"/></return>
    }<pos:position pos:line="190" pos:column="6"/></block></then> <else pos:line="190" pos:column="7">else <block pos:line="190" pos:column="12">{	<comment type="block" pos:line="190" pos:column="17">/* not an auth-request */</comment>
        <expr_stmt><expr><call><name pos:line="191" pos:column="9">helperfail<pos:position pos:line="191" pos:column="19"/></name><argument_list pos:line="191" pos:column="19">(<argument><expr><literal type="string" pos:line="191" pos:column="20">"message=\"illegal request received\""<pos:position pos:line="191" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="191" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="191" pos:column="60"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="192" pos:column="9">fprintf<pos:position pos:line="192" pos:column="16"/></name><argument_list pos:line="192" pos:column="16">(<argument><expr><name pos:line="192" pos:column="17">stderr<pos:position pos:line="192" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="192" pos:column="25">"Illegal request received: '%s'\n"<pos:position pos:line="192" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="192" pos:column="61">buf<pos:position pos:line="192" pos:column="64"/></name></expr></argument>)<pos:position pos:line="192" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="192" pos:column="66"/></expr_stmt>
        <return pos:line="193" pos:column="9">return <expr><literal type="number" pos:line="193" pos:column="16">1<pos:position pos:line="193" pos:column="17"/></literal></expr>;<pos:position pos:line="193" pos:column="18"/></return>
    }<pos:position pos:line="194" pos:column="6"/></block></else></if>
    <expr_stmt><expr><call><name pos:line="195" pos:column="5">helperfail<pos:position pos:line="195" pos:column="15"/></name><argument_list pos:line="195" pos:column="15">(<argument><expr><literal type="string" pos:line="195" pos:column="16">"message=\"detected protocol error\""<pos:position pos:line="195" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="195" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="195" pos:column="55"/></expr_stmt>
    <return pos:line="196" pos:column="5">return <expr><literal type="number" pos:line="196" pos:column="12">1<pos:position pos:line="196" pos:column="13"/></literal></expr>;<pos:position pos:line="196" pos:column="14"/></return>
    <comment type="block" format="doxygen" pos:line="197" pos:column="5">/********* END ********/</comment>
}<pos:position pos:line="198" pos:column="2"/></block></function></unit>
