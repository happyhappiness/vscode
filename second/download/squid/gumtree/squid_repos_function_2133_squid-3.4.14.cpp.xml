<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2133_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">mem_hdr<pos:position pos:line="2" pos:column="8"/></name><operator pos:line="2" pos:column="8">::<pos:position pos:line="2" pos:column="10"/></operator><name pos:line="2" pos:column="10">debugDump<pos:position pos:line="2" pos:column="19"/></name></name><parameter_list pos:line="2" pos:column="19">()<pos:position pos:line="2" pos:column="21"/></parameter_list> <specifier pos:line="2" pos:column="22">const<pos:position pos:line="2" pos:column="27"/></specifier>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name> <argument_list pos:line="4" pos:column="12">(<argument><expr><literal type="number" pos:line="4" pos:column="13">19<pos:position pos:line="4" pos:column="15"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="17">0<pos:position pos:line="4" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="20">"mem_hdr::debugDump: lowest offset: "<pos:position pos:line="4" pos:column="57"/></literal> <operator pos:line="4" pos:column="58">&lt;&lt;<pos:position pos:line="4" pos:column="66"/></operator> <call><name pos:line="4" pos:column="61">lowestOffset<pos:position pos:line="4" pos:column="73"/></name><argument_list pos:line="4" pos:column="73">()<pos:position pos:line="4" pos:column="75"/></argument_list></call> <operator pos:line="4" pos:column="76">&lt;&lt;<pos:position pos:line="4" pos:column="84"/></operator> <literal type="string" pos:line="4" pos:column="79">" highest offset + 1: "<pos:position pos:line="4" pos:column="102"/></literal> <operator pos:line="4" pos:column="103">&lt;&lt;<pos:position pos:line="4" pos:column="111"/></operator> <call><name pos:line="4" pos:column="106">endOffset<pos:position pos:line="4" pos:column="115"/></name><argument_list pos:line="4" pos:column="115">()<pos:position pos:line="4" pos:column="117"/></argument_list></call> <operator pos:line="4" pos:column="118">&lt;&lt;<pos:position pos:line="4" pos:column="126"/></operator> <literal type="string" pos:line="4" pos:column="121">"."<pos:position pos:line="4" pos:column="124"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="125"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="126"/></expr_stmt>
    <decl_stmt><decl><type><name><name pos:line="5" pos:column="5">std<pos:position pos:line="5" pos:column="8"/></name><operator pos:line="5" pos:column="8">::<pos:position pos:line="5" pos:column="10"/></operator><name pos:line="5" pos:column="10">ostringstream<pos:position pos:line="5" pos:column="23"/></name></name></type> <name pos:line="5" pos:column="24">result<pos:position pos:line="5" pos:column="30"/></name></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">PointerPrinter<pos:position pos:line="6" pos:column="19"/></name><argument_list type="generic" pos:line="6" pos:column="19">&lt;<argument><expr><name pos:line="6" pos:column="20">mem_node<pos:position pos:line="6" pos:column="28"/></name> <modifier pos:line="6" pos:column="29">*<pos:position pos:line="6" pos:column="30"/></modifier></expr></argument>&gt;<pos:position pos:line="6" pos:column="34"/></argument_list></name></type> <name pos:line="6" pos:column="32">foo<pos:position pos:line="6" pos:column="35"/></name><argument_list pos:line="6" pos:column="35">(<argument><expr><name pos:line="6" pos:column="36">result<pos:position pos:line="6" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="44">" - "<pos:position pos:line="6" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="50"/></argument_list></decl>;<pos:position pos:line="6" pos:column="51"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">for_each<pos:position pos:line="7" pos:column="13"/></name> <argument_list pos:line="7" pos:column="14">(<argument><expr><call><name pos:line="7" pos:column="15">getNodes<pos:position pos:line="7" pos:column="23"/></name><argument_list pos:line="7" pos:column="23">()<pos:position pos:line="7" pos:column="25"/></argument_list></call><operator pos:line="7" pos:column="25">.<pos:position pos:line="7" pos:column="26"/></operator><call><name pos:line="7" pos:column="26">begin<pos:position pos:line="7" pos:column="31"/></name><argument_list pos:line="7" pos:column="31">()<pos:position pos:line="7" pos:column="33"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="7" pos:column="35">getNodes<pos:position pos:line="7" pos:column="43"/></name><argument_list pos:line="7" pos:column="43">()<pos:position pos:line="7" pos:column="45"/></argument_list></call><operator pos:line="7" pos:column="45">.<pos:position pos:line="7" pos:column="46"/></operator><call><name pos:line="7" pos:column="46">end<pos:position pos:line="7" pos:column="49"/></name><argument_list pos:line="7" pos:column="49">()<pos:position pos:line="7" pos:column="51"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="7" pos:column="53">foo<pos:position pos:line="7" pos:column="56"/></name></expr></argument>)<pos:position pos:line="7" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">debugs<pos:position pos:line="8" pos:column="11"/></name> <argument_list pos:line="8" pos:column="12">(<argument><expr><literal type="number" pos:line="8" pos:column="13">19<pos:position pos:line="8" pos:column="15"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="17">0<pos:position pos:line="8" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="20">"mem_hdr::debugDump: Current available data is: "<pos:position pos:line="8" pos:column="69"/></literal> <operator pos:line="8" pos:column="70">&lt;&lt;<pos:position pos:line="8" pos:column="78"/></operator> <call><name><name pos:line="8" pos:column="73">result<pos:position pos:line="8" pos:column="79"/></name><operator pos:line="8" pos:column="79">.<pos:position pos:line="8" pos:column="80"/></operator><name pos:line="8" pos:column="80">str<pos:position pos:line="8" pos:column="83"/></name></name><argument_list pos:line="8" pos:column="83">()<pos:position pos:line="8" pos:column="85"/></argument_list></call> <operator pos:line="8" pos:column="86">&lt;&lt;<pos:position pos:line="8" pos:column="94"/></operator> <literal type="string" pos:line="8" pos:column="89">"."<pos:position pos:line="8" pos:column="92"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="94"/></expr_stmt>
}<pos:position pos:line="9" pos:column="2"/></block></function></unit>
