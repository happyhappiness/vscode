<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4725_squid-3.4.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">asnAddNet<pos:position pos:line="2" pos:column="10"/></name><parameter_list pos:line="2" pos:column="10">(<parameter><decl><type><name pos:line="2" pos:column="11">char<pos:position pos:line="2" pos:column="15"/></name> <modifier pos:line="2" pos:column="16">*<pos:position pos:line="2" pos:column="17"/></modifier></type><name pos:line="2" pos:column="17">as_string<pos:position pos:line="2" pos:column="26"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="28">int<pos:position pos:line="2" pos:column="31"/></name></type> <name pos:line="2" pos:column="32">as_number<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="42"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">struct<pos:position pos:line="4" pos:column="11"/></name> <name pos:line="4" pos:column="12">squid_radix_node<pos:position pos:line="4" pos:column="28"/></name></name> <modifier pos:line="4" pos:column="29">*<pos:position pos:line="4" pos:column="30"/></modifier></type><name pos:line="4" pos:column="30">rn<pos:position pos:line="4" pos:column="32"/></name></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="5" pos:column="5">CbDataList<pos:position pos:line="5" pos:column="15"/></name><argument_list type="generic" pos:line="5" pos:column="15">&lt;<argument><expr><name pos:line="5" pos:column="16">int<pos:position pos:line="5" pos:column="19"/></name></expr></argument>&gt;<pos:position pos:line="5" pos:column="23"/></argument_list></name> <modifier pos:line="5" pos:column="21">*<pos:position pos:line="5" pos:column="22"/></modifier><modifier pos:line="5" pos:column="22">*<pos:position pos:line="5" pos:column="23"/></modifier></type><name pos:line="5" pos:column="23">Tail<pos:position pos:line="5" pos:column="27"/></name> <init pos:line="5" pos:column="28">= <expr><name pos:line="5" pos:column="30">NULL<pos:position pos:line="5" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">CbDataList<pos:position pos:line="6" pos:column="15"/></name><argument_list type="generic" pos:line="6" pos:column="15">&lt;<argument><expr><name pos:line="6" pos:column="16">int<pos:position pos:line="6" pos:column="19"/></name></expr></argument>&gt;<pos:position pos:line="6" pos:column="23"/></argument_list></name> <modifier pos:line="6" pos:column="21">*<pos:position pos:line="6" pos:column="22"/></modifier></type><name pos:line="6" pos:column="22">q<pos:position pos:line="6" pos:column="23"/></name> <init pos:line="6" pos:column="24">= <expr><name pos:line="6" pos:column="26">NULL<pos:position pos:line="6" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">as_info<pos:position pos:line="7" pos:column="12"/></name> <modifier pos:line="7" pos:column="13">*<pos:position pos:line="7" pos:column="14"/></modifier></type><name pos:line="7" pos:column="14">asinfo<pos:position pos:line="7" pos:column="20"/></name> <init pos:line="7" pos:column="21">= <expr><name pos:line="7" pos:column="23">NULL<pos:position pos:line="7" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>

    <decl_stmt><decl><type><name><name pos:line="9" pos:column="5">Ip<pos:position pos:line="9" pos:column="7"/></name><operator pos:line="9" pos:column="7">::<pos:position pos:line="9" pos:column="9"/></operator><name pos:line="9" pos:column="9">Address<pos:position pos:line="9" pos:column="16"/></name></name></type> <name pos:line="9" pos:column="17">mask<pos:position pos:line="9" pos:column="21"/></name></decl>;<pos:position pos:line="9" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="10" pos:column="5">Ip<pos:position pos:line="10" pos:column="7"/></name><operator pos:line="10" pos:column="7">::<pos:position pos:line="10" pos:column="9"/></operator><name pos:line="10" pos:column="9">Address<pos:position pos:line="10" pos:column="16"/></name></name></type> <name pos:line="10" pos:column="17">addr<pos:position pos:line="10" pos:column="21"/></name></decl>;<pos:position pos:line="10" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">char<pos:position pos:line="11" pos:column="9"/></name> <modifier pos:line="11" pos:column="10">*<pos:position pos:line="11" pos:column="11"/></modifier></type><name pos:line="11" pos:column="11">t<pos:position pos:line="11" pos:column="12"/></name></decl>;<pos:position pos:line="11" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">int<pos:position pos:line="12" pos:column="8"/></name></type> <name pos:line="12" pos:column="9">bitl<pos:position pos:line="12" pos:column="13"/></name></decl>;<pos:position pos:line="12" pos:column="14"/></decl_stmt>

    <expr_stmt><expr><name pos:line="14" pos:column="5">t<pos:position pos:line="14" pos:column="6"/></name> <operator pos:line="14" pos:column="7">=<pos:position pos:line="14" pos:column="8"/></operator> <call><name pos:line="14" pos:column="9">strchr<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><name pos:line="14" pos:column="16">as_string<pos:position pos:line="14" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="14" pos:column="27">'/'<pos:position pos:line="14" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="32"/></expr_stmt>

    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name pos:line="16" pos:column="9">t<pos:position pos:line="16" pos:column="10"/></name> <operator pos:line="16" pos:column="11">==<pos:position pos:line="16" pos:column="13"/></operator> <name pos:line="16" pos:column="14">NULL<pos:position pos:line="16" pos:column="18"/></name></expr>)<pos:position pos:line="16" pos:column="19"/></condition><then pos:line="16" pos:column="19"> <block pos:line="16" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">debugs<pos:position pos:line="17" pos:column="15"/></name><argument_list pos:line="17" pos:column="15">(<argument><expr><literal type="number" pos:line="17" pos:column="16">53<pos:position pos:line="17" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="20">3<pos:position pos:line="17" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="23">"asnAddNet: failed, invalid response from whois server."<pos:position pos:line="17" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="81"/></expr_stmt>
        <return pos:line="18" pos:column="9">return <expr><literal type="number" pos:line="18" pos:column="16">0<pos:position pos:line="18" pos:column="17"/></literal></expr>;<pos:position pos:line="18" pos:column="18"/></return>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>

    <expr_stmt><expr><operator pos:line="21" pos:column="5">*<pos:position pos:line="21" pos:column="6"/></operator><name pos:line="21" pos:column="6">t<pos:position pos:line="21" pos:column="7"/></name> <operator pos:line="21" pos:column="8">=<pos:position pos:line="21" pos:column="9"/></operator> <literal type="char" pos:line="21" pos:column="10">'\0'<pos:position pos:line="21" pos:column="14"/></literal></expr>;<pos:position pos:line="21" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><name pos:line="22" pos:column="5">addr<pos:position pos:line="22" pos:column="9"/></name> <operator pos:line="22" pos:column="10">=<pos:position pos:line="22" pos:column="11"/></operator> <name pos:line="22" pos:column="12">as_string<pos:position pos:line="22" pos:column="21"/></name></expr>;<pos:position pos:line="22" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name pos:line="23" pos:column="5">bitl<pos:position pos:line="23" pos:column="9"/></name> <operator pos:line="23" pos:column="10">=<pos:position pos:line="23" pos:column="11"/></operator> <call><name pos:line="23" pos:column="12">atoi<pos:position pos:line="23" pos:column="16"/></name><argument_list pos:line="23" pos:column="16">(<argument><expr><name pos:line="23" pos:column="17">t<pos:position pos:line="23" pos:column="18"/></name> <operator pos:line="23" pos:column="19">+<pos:position pos:line="23" pos:column="20"/></operator> <literal type="number" pos:line="23" pos:column="21">1<pos:position pos:line="23" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="24"/></expr_stmt>

    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name pos:line="25" pos:column="9">bitl<pos:position pos:line="25" pos:column="13"/></name> <operator pos:line="25" pos:column="14">&lt;<pos:position pos:line="25" pos:column="18"/></operator> <literal type="number" pos:line="25" pos:column="16">0<pos:position pos:line="25" pos:column="17"/></literal></expr>)<pos:position pos:line="25" pos:column="18"/></condition><then pos:line="25" pos:column="18">
        <block type="pseudo"><expr_stmt><expr><name pos:line="26" pos:column="9">bitl<pos:position pos:line="26" pos:column="13"/></name> <operator pos:line="26" pos:column="14">=<pos:position pos:line="26" pos:column="15"/></operator> <literal type="number" pos:line="26" pos:column="16">0<pos:position pos:line="26" pos:column="17"/></literal></expr>;<pos:position pos:line="26" pos:column="18"/></expr_stmt></block></then></if>

    <comment type="line" pos:line="28" pos:column="5">// INET6 TODO : find a better way of identifying the base IPA family for mask than this.</comment>
    <expr_stmt><expr><name pos:line="29" pos:column="5">t<pos:position pos:line="29" pos:column="6"/></name> <operator pos:line="29" pos:column="7">=<pos:position pos:line="29" pos:column="8"/></operator> <call><name pos:line="29" pos:column="9">strchr<pos:position pos:line="29" pos:column="15"/></name><argument_list pos:line="29" pos:column="15">(<argument><expr><name pos:line="29" pos:column="16">as_string<pos:position pos:line="29" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="29" pos:column="27">'.'<pos:position pos:line="29" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="32"/></expr_stmt>

    <comment type="line" pos:line="31" pos:column="5">// generate Netbits Format Mask</comment>
    <expr_stmt><expr><call><name><name pos:line="32" pos:column="5">mask<pos:position pos:line="32" pos:column="9"/></name><operator pos:line="32" pos:column="9">.<pos:position pos:line="32" pos:column="10"/></operator><name pos:line="32" pos:column="10">setNoAddr<pos:position pos:line="32" pos:column="19"/></name></name><argument_list pos:line="32" pos:column="19">()<pos:position pos:line="32" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="33" pos:column="5">mask<pos:position pos:line="33" pos:column="9"/></name><operator pos:line="33" pos:column="9">.<pos:position pos:line="33" pos:column="10"/></operator><name pos:line="33" pos:column="10">applyMask<pos:position pos:line="33" pos:column="19"/></name></name><argument_list pos:line="33" pos:column="19">(<argument><expr><name pos:line="33" pos:column="20">bitl<pos:position pos:line="33" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="26">(<pos:position pos:line="33" pos:column="27"/></operator><ternary><condition><expr><name pos:line="33" pos:column="27">t<pos:position pos:line="33" pos:column="28"/></name><operator pos:line="33" pos:column="28">!=<pos:position pos:line="33" pos:column="30"/></operator><name pos:line="33" pos:column="30">NULL<pos:position pos:line="33" pos:column="34"/></name></expr>?<pos:position pos:line="33" pos:column="35"/></condition><then><expr><name pos:line="33" pos:column="35">AF_INET<pos:position pos:line="33" pos:column="42"/></name></expr></then><else pos:line="33" pos:column="42">:<expr><name pos:line="33" pos:column="43">AF_INET6<pos:position pos:line="33" pos:column="51"/></name></expr></else></ternary><operator pos:line="33" pos:column="51">)<pos:position pos:line="33" pos:column="52"/></operator></expr></argument> )<pos:position pos:line="33" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="55"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="35" pos:column="5">debugs<pos:position pos:line="35" pos:column="11"/></name><argument_list pos:line="35" pos:column="11">(<argument><expr><literal type="number" pos:line="35" pos:column="12">53<pos:position pos:line="35" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="16">3<pos:position pos:line="35" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="19">"asnAddNet: called for "<pos:position pos:line="35" pos:column="43"/></literal> <operator pos:line="35" pos:column="44">&lt;&lt;<pos:position pos:line="35" pos:column="52"/></operator> <name pos:line="35" pos:column="47">addr<pos:position pos:line="35" pos:column="51"/></name> <operator pos:line="35" pos:column="52">&lt;&lt;<pos:position pos:line="35" pos:column="60"/></operator> <literal type="string" pos:line="35" pos:column="55">"/"<pos:position pos:line="35" pos:column="58"/></literal> <operator pos:line="35" pos:column="59">&lt;&lt;<pos:position pos:line="35" pos:column="67"/></operator> <name pos:line="35" pos:column="62">mask<pos:position pos:line="35" pos:column="66"/></name></expr></argument> )<pos:position pos:line="35" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="69"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="37" pos:column="5">rtentry_t<pos:position pos:line="37" pos:column="14"/></name> <modifier pos:line="37" pos:column="15">*<pos:position pos:line="37" pos:column="16"/></modifier></type><name pos:line="37" pos:column="16">e<pos:position pos:line="37" pos:column="17"/></name> <init pos:line="37" pos:column="18">= <expr><operator pos:line="37" pos:column="20">(<pos:position pos:line="37" pos:column="21"/></operator><name pos:line="37" pos:column="21">rtentry_t<pos:position pos:line="37" pos:column="30"/></name> <operator pos:line="37" pos:column="31">*<pos:position pos:line="37" pos:column="32"/></operator><operator pos:line="37" pos:column="32">)<pos:position pos:line="37" pos:column="33"/></operator><call><name pos:line="37" pos:column="33">xcalloc<pos:position pos:line="37" pos:column="40"/></name><argument_list pos:line="37" pos:column="40">(<argument><expr><literal type="number" pos:line="37" pos:column="41">1<pos:position pos:line="37" pos:column="42"/></literal></expr></argument>, <argument><expr><sizeof pos:line="37" pos:column="44">sizeof<argument_list pos:line="37" pos:column="50">(<argument><expr><name pos:line="37" pos:column="51">rtentry_t<pos:position pos:line="37" pos:column="60"/></name></expr></argument>)<pos:position pos:line="37" pos:column="61"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="37" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="37" pos:column="63"/></decl_stmt>

    <expr_stmt><expr><name><name pos:line="39" pos:column="5">e<pos:position pos:line="39" pos:column="6"/></name><operator pos:line="39" pos:column="6">-&gt;<pos:position pos:line="39" pos:column="11"/></operator><name pos:line="39" pos:column="8">e_addr<pos:position pos:line="39" pos:column="14"/></name><operator pos:line="39" pos:column="14">.<pos:position pos:line="39" pos:column="15"/></operator><name pos:line="39" pos:column="15">addr<pos:position pos:line="39" pos:column="19"/></name></name> <operator pos:line="39" pos:column="20">=<pos:position pos:line="39" pos:column="21"/></operator> <name pos:line="39" pos:column="22">addr<pos:position pos:line="39" pos:column="26"/></name></expr>;<pos:position pos:line="39" pos:column="27"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="41" pos:column="5">e<pos:position pos:line="41" pos:column="6"/></name><operator pos:line="41" pos:column="6">-&gt;<pos:position pos:line="41" pos:column="11"/></operator><name pos:line="41" pos:column="8">e_mask<pos:position pos:line="41" pos:column="14"/></name><operator pos:line="41" pos:column="14">.<pos:position pos:line="41" pos:column="15"/></operator><name pos:line="41" pos:column="15">addr<pos:position pos:line="41" pos:column="19"/></name></name> <operator pos:line="41" pos:column="20">=<pos:position pos:line="41" pos:column="21"/></operator> <name pos:line="41" pos:column="22">mask<pos:position pos:line="41" pos:column="26"/></name></expr>;<pos:position pos:line="41" pos:column="27"/></expr_stmt>

    <expr_stmt><expr><name pos:line="43" pos:column="5">rn<pos:position pos:line="43" pos:column="7"/></name> <operator pos:line="43" pos:column="8">=<pos:position pos:line="43" pos:column="9"/></operator> <call><name pos:line="43" pos:column="10">squid_rn_lookup<pos:position pos:line="43" pos:column="25"/></name><argument_list pos:line="43" pos:column="25">(<argument><expr><operator pos:line="43" pos:column="26">&amp;<pos:position pos:line="43" pos:column="31"/></operator><name><name pos:line="43" pos:column="27">e<pos:position pos:line="43" pos:column="28"/></name><operator pos:line="43" pos:column="28">-&gt;<pos:position pos:line="43" pos:column="33"/></operator><name pos:line="43" pos:column="30">e_addr<pos:position pos:line="43" pos:column="36"/></name></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="38">&amp;<pos:position pos:line="43" pos:column="43"/></operator><name><name pos:line="43" pos:column="39">e<pos:position pos:line="43" pos:column="40"/></name><operator pos:line="43" pos:column="40">-&gt;<pos:position pos:line="43" pos:column="45"/></operator><name pos:line="43" pos:column="42">e_mask<pos:position pos:line="43" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="50">AS_tree_head<pos:position pos:line="43" pos:column="62"/></name></expr></argument>)<pos:position pos:line="43" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="64"/></expr_stmt>

    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><name pos:line="45" pos:column="9">rn<pos:position pos:line="45" pos:column="11"/></name> <operator pos:line="45" pos:column="12">!=<pos:position pos:line="45" pos:column="14"/></operator> <name pos:line="45" pos:column="15">NULL<pos:position pos:line="45" pos:column="19"/></name></expr>)<pos:position pos:line="45" pos:column="20"/></condition><then pos:line="45" pos:column="20"> <block pos:line="45" pos:column="21">{
        <expr_stmt><expr><name pos:line="46" pos:column="9">asinfo<pos:position pos:line="46" pos:column="15"/></name> <operator pos:line="46" pos:column="16">=<pos:position pos:line="46" pos:column="17"/></operator> <operator pos:line="46" pos:column="18">(<pos:position pos:line="46" pos:column="19"/></operator><operator pos:line="46" pos:column="19">(<pos:position pos:line="46" pos:column="20"/></operator><name pos:line="46" pos:column="20">rtentry_t<pos:position pos:line="46" pos:column="29"/></name> <operator pos:line="46" pos:column="30">*<pos:position pos:line="46" pos:column="31"/></operator><operator pos:line="46" pos:column="31">)<pos:position pos:line="46" pos:column="32"/></operator> <name pos:line="46" pos:column="33">rn<pos:position pos:line="46" pos:column="35"/></name><operator pos:line="46" pos:column="35">)<pos:position pos:line="46" pos:column="36"/></operator><operator pos:line="46" pos:column="36">-&gt;<pos:position pos:line="46" pos:column="41"/></operator><name pos:line="46" pos:column="38">e_info<pos:position pos:line="46" pos:column="44"/></name></expr>;<pos:position pos:line="46" pos:column="45"/></expr_stmt>

        <if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><call><name><name pos:line="48" pos:column="13">asinfo<pos:position pos:line="48" pos:column="19"/></name><operator pos:line="48" pos:column="19">-&gt;<pos:position pos:line="48" pos:column="24"/></operator><name pos:line="48" pos:column="21">as_number<pos:position pos:line="48" pos:column="30"/></name><operator pos:line="48" pos:column="30">-&gt;<pos:position pos:line="48" pos:column="35"/></operator><name pos:line="48" pos:column="32">find<pos:position pos:line="48" pos:column="36"/></name></name><argument_list pos:line="48" pos:column="36">(<argument><expr><name pos:line="48" pos:column="37">as_number<pos:position pos:line="48" pos:column="46"/></name></expr></argument>)<pos:position pos:line="48" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="48"/></condition><then pos:line="48" pos:column="48"> <block pos:line="48" pos:column="49">{
            <expr_stmt><expr><call><name pos:line="49" pos:column="13">debugs<pos:position pos:line="49" pos:column="19"/></name><argument_list pos:line="49" pos:column="19">(<argument><expr><literal type="number" pos:line="49" pos:column="20">53<pos:position pos:line="49" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="49" pos:column="24">3<pos:position pos:line="49" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="27">"asnAddNet: Ignoring repeated network '"<pos:position pos:line="49" pos:column="67"/></literal> <operator pos:line="49" pos:column="68">&lt;&lt;<pos:position pos:line="49" pos:column="76"/></operator> <name pos:line="49" pos:column="71">addr<pos:position pos:line="49" pos:column="75"/></name> <operator pos:line="49" pos:column="76">&lt;&lt;<pos:position pos:line="49" pos:column="84"/></operator> <literal type="string" pos:line="49" pos:column="79">"/"<pos:position pos:line="49" pos:column="82"/></literal> <operator pos:line="49" pos:column="83">&lt;&lt;<pos:position pos:line="49" pos:column="91"/></operator> <name pos:line="49" pos:column="86">bitl<pos:position pos:line="49" pos:column="90"/></name> <operator pos:line="49" pos:column="91">&lt;&lt;<pos:position pos:line="49" pos:column="99"/></operator> <literal type="string" pos:line="49" pos:column="94">"' for AS "<pos:position pos:line="49" pos:column="105"/></literal> <operator pos:line="49" pos:column="106">&lt;&lt;<pos:position pos:line="49" pos:column="114"/></operator> <name pos:line="49" pos:column="109">as_number<pos:position pos:line="49" pos:column="118"/></name></expr></argument>)<pos:position pos:line="49" pos:column="119"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="120"/></expr_stmt>
        }<pos:position pos:line="50" pos:column="10"/></block></then> <else pos:line="50" pos:column="11">else <block pos:line="50" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="51" pos:column="13">debugs<pos:position pos:line="51" pos:column="19"/></name><argument_list pos:line="51" pos:column="19">(<argument><expr><literal type="number" pos:line="51" pos:column="20">53<pos:position pos:line="51" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="51" pos:column="24">3<pos:position pos:line="51" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="27">"asnAddNet: Warning: Found a network with multiple AS numbers!"<pos:position pos:line="51" pos:column="90"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="92"/></expr_stmt>

            <for pos:line="53" pos:column="13">for <control pos:line="53" pos:column="17">(<init><expr><name pos:line="53" pos:column="18">Tail<pos:position pos:line="53" pos:column="22"/></name> <operator pos:line="53" pos:column="23">=<pos:position pos:line="53" pos:column="24"/></operator> <operator pos:line="53" pos:column="25">&amp;<pos:position pos:line="53" pos:column="30"/></operator><name><name pos:line="53" pos:column="26">asinfo<pos:position pos:line="53" pos:column="32"/></name><operator pos:line="53" pos:column="32">-&gt;<pos:position pos:line="53" pos:column="37"/></operator><name pos:line="53" pos:column="34">as_number<pos:position pos:line="53" pos:column="43"/></name></name></expr>;<pos:position pos:line="53" pos:column="44"/></init> <condition><expr><operator pos:line="53" pos:column="45">*<pos:position pos:line="53" pos:column="46"/></operator><name pos:line="53" pos:column="46">Tail<pos:position pos:line="53" pos:column="50"/></name></expr>;<pos:position pos:line="53" pos:column="51"/></condition> <incr><expr><name pos:line="53" pos:column="52">Tail<pos:position pos:line="53" pos:column="56"/></name> <operator pos:line="53" pos:column="57">=<pos:position pos:line="53" pos:column="58"/></operator> <operator pos:line="53" pos:column="59">&amp;<pos:position pos:line="53" pos:column="64"/></operator><name><operator pos:line="53" pos:column="60">(<pos:position pos:line="53" pos:column="61"/></operator><operator pos:line="53" pos:column="61">*<pos:position pos:line="53" pos:column="62"/></operator><name pos:line="53" pos:column="62">Tail<pos:position pos:line="53" pos:column="66"/></name><operator pos:line="53" pos:column="66">)<pos:position pos:line="53" pos:column="67"/></operator><operator pos:line="53" pos:column="67">-&gt;<pos:position pos:line="53" pos:column="72"/></operator><name pos:line="53" pos:column="69">next<pos:position pos:line="53" pos:column="73"/></name></name></expr></incr>)<pos:position pos:line="53" pos:column="74"/></control><block type="pseudo"><empty_stmt pos:line="53" pos:column="74">;<pos:position pos:line="53" pos:column="75"/></empty_stmt></block></for>
            <expr_stmt><expr><name pos:line="54" pos:column="13">q<pos:position pos:line="54" pos:column="14"/></name> <operator pos:line="54" pos:column="15">=<pos:position pos:line="54" pos:column="16"/></operator> <operator pos:line="54" pos:column="17">new<pos:position pos:line="54" pos:column="20"/></operator> <call><name><name pos:line="54" pos:column="21">CbDataList<pos:position pos:line="54" pos:column="31"/></name><argument_list type="generic" pos:line="54" pos:column="31">&lt;<argument><expr><name pos:line="54" pos:column="32">int<pos:position pos:line="54" pos:column="35"/></name></expr></argument>&gt;<pos:position pos:line="54" pos:column="39"/></argument_list></name> <argument_list pos:line="54" pos:column="37">(<argument><expr><name pos:line="54" pos:column="38">as_number<pos:position pos:line="54" pos:column="47"/></name></expr></argument>)<pos:position pos:line="54" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="49"/></expr_stmt>

            <expr_stmt><expr><operator pos:line="56" pos:column="13">*<pos:position pos:line="56" pos:column="14"/></operator><operator pos:line="56" pos:column="14">(<pos:position pos:line="56" pos:column="15"/></operator><name pos:line="56" pos:column="15">Tail<pos:position pos:line="56" pos:column="19"/></name><operator pos:line="56" pos:column="19">)<pos:position pos:line="56" pos:column="20"/></operator> <operator pos:line="56" pos:column="21">=<pos:position pos:line="56" pos:column="22"/></operator> <name pos:line="56" pos:column="23">q<pos:position pos:line="56" pos:column="24"/></name></expr>;<pos:position pos:line="56" pos:column="25"/></expr_stmt>

            <expr_stmt><expr><name><name pos:line="58" pos:column="13">e<pos:position pos:line="58" pos:column="14"/></name><operator pos:line="58" pos:column="14">-&gt;<pos:position pos:line="58" pos:column="19"/></operator><name pos:line="58" pos:column="16">e_info<pos:position pos:line="58" pos:column="22"/></name></name> <operator pos:line="58" pos:column="23">=<pos:position pos:line="58" pos:column="24"/></operator> <name pos:line="58" pos:column="25">asinfo<pos:position pos:line="58" pos:column="31"/></name></expr>;<pos:position pos:line="58" pos:column="32"/></expr_stmt>
        }<pos:position pos:line="59" pos:column="10"/></block></else></if>
    }<pos:position pos:line="60" pos:column="6"/></block></then> <else pos:line="60" pos:column="7">else <block pos:line="60" pos:column="12">{
        <expr_stmt><expr><name pos:line="61" pos:column="9">q<pos:position pos:line="61" pos:column="10"/></name> <operator pos:line="61" pos:column="11">=<pos:position pos:line="61" pos:column="12"/></operator> <operator pos:line="61" pos:column="13">new<pos:position pos:line="61" pos:column="16"/></operator> <call><name><name pos:line="61" pos:column="17">CbDataList<pos:position pos:line="61" pos:column="27"/></name><argument_list type="generic" pos:line="61" pos:column="27">&lt;<argument><expr><name pos:line="61" pos:column="28">int<pos:position pos:line="61" pos:column="31"/></name></expr></argument>&gt;<pos:position pos:line="61" pos:column="35"/></argument_list></name> <argument_list pos:line="61" pos:column="33">(<argument><expr><name pos:line="61" pos:column="34">as_number<pos:position pos:line="61" pos:column="43"/></name></expr></argument>)<pos:position pos:line="61" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><name pos:line="62" pos:column="9">asinfo<pos:position pos:line="62" pos:column="15"/></name> <operator pos:line="62" pos:column="16">=<pos:position pos:line="62" pos:column="17"/></operator> <operator pos:line="62" pos:column="18">(<pos:position pos:line="62" pos:column="19"/></operator><name pos:line="62" pos:column="19">as_info<pos:position pos:line="62" pos:column="26"/></name> <operator pos:line="62" pos:column="27">*<pos:position pos:line="62" pos:column="28"/></operator><operator pos:line="62" pos:column="28">)<pos:position pos:line="62" pos:column="29"/></operator><call><name pos:line="62" pos:column="29">xmalloc<pos:position pos:line="62" pos:column="36"/></name><argument_list pos:line="62" pos:column="36">(<argument><expr><sizeof pos:line="62" pos:column="37">sizeof<argument_list pos:line="62" pos:column="43">(<argument><expr><name pos:line="62" pos:column="44">as_info<pos:position pos:line="62" pos:column="51"/></name></expr></argument>)<pos:position pos:line="62" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="62" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="54"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="63" pos:column="9">asinfo<pos:position pos:line="63" pos:column="15"/></name><operator pos:line="63" pos:column="15">-&gt;<pos:position pos:line="63" pos:column="20"/></operator><name pos:line="63" pos:column="17">as_number<pos:position pos:line="63" pos:column="26"/></name></name> <operator pos:line="63" pos:column="27">=<pos:position pos:line="63" pos:column="28"/></operator> <name pos:line="63" pos:column="29">q<pos:position pos:line="63" pos:column="30"/></name></expr>;<pos:position pos:line="63" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="64" pos:column="9">squid_rn_addroute<pos:position pos:line="64" pos:column="26"/></name><argument_list pos:line="64" pos:column="26">(<argument><expr><operator pos:line="64" pos:column="27">&amp;<pos:position pos:line="64" pos:column="32"/></operator><name><name pos:line="64" pos:column="28">e<pos:position pos:line="64" pos:column="29"/></name><operator pos:line="64" pos:column="29">-&gt;<pos:position pos:line="64" pos:column="34"/></operator><name pos:line="64" pos:column="31">e_addr<pos:position pos:line="64" pos:column="37"/></name></name></expr></argument>, <argument><expr><operator pos:line="64" pos:column="39">&amp;<pos:position pos:line="64" pos:column="44"/></operator><name><name pos:line="64" pos:column="40">e<pos:position pos:line="64" pos:column="41"/></name><operator pos:line="64" pos:column="41">-&gt;<pos:position pos:line="64" pos:column="46"/></operator><name pos:line="64" pos:column="43">e_mask<pos:position pos:line="64" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="51">AS_tree_head<pos:position pos:line="64" pos:column="63"/></name></expr></argument>, <argument><expr><name><name pos:line="64" pos:column="65">e<pos:position pos:line="64" pos:column="66"/></name><operator pos:line="64" pos:column="66">-&gt;<pos:position pos:line="64" pos:column="71"/></operator><name pos:line="64" pos:column="68">e_nodes<pos:position pos:line="64" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="64" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="77"/></expr_stmt>
        <expr_stmt><expr><name pos:line="65" pos:column="9">rn<pos:position pos:line="65" pos:column="11"/></name> <operator pos:line="65" pos:column="12">=<pos:position pos:line="65" pos:column="13"/></operator> <call><name pos:line="65" pos:column="14">squid_rn_match<pos:position pos:line="65" pos:column="28"/></name><argument_list pos:line="65" pos:column="28">(<argument><expr><operator pos:line="65" pos:column="29">&amp;<pos:position pos:line="65" pos:column="34"/></operator><name><name pos:line="65" pos:column="30">e<pos:position pos:line="65" pos:column="31"/></name><operator pos:line="65" pos:column="31">-&gt;<pos:position pos:line="65" pos:column="36"/></operator><name pos:line="65" pos:column="33">e_addr<pos:position pos:line="65" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="41">AS_tree_head<pos:position pos:line="65" pos:column="53"/></name></expr></argument>)<pos:position pos:line="65" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="55"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="66" pos:column="9">assert<pos:position pos:line="66" pos:column="15"/></name><argument_list pos:line="66" pos:column="15">(<argument><expr><name pos:line="66" pos:column="16">rn<pos:position pos:line="66" pos:column="18"/></name> <operator pos:line="66" pos:column="19">!=<pos:position pos:line="66" pos:column="21"/></operator> <name pos:line="66" pos:column="22">NULL<pos:position pos:line="66" pos:column="26"/></name></expr></argument>)<pos:position pos:line="66" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="28"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="67" pos:column="9">e<pos:position pos:line="67" pos:column="10"/></name><operator pos:line="67" pos:column="10">-&gt;<pos:position pos:line="67" pos:column="15"/></operator><name pos:line="67" pos:column="12">e_info<pos:position pos:line="67" pos:column="18"/></name></name> <operator pos:line="67" pos:column="19">=<pos:position pos:line="67" pos:column="20"/></operator> <name pos:line="67" pos:column="21">asinfo<pos:position pos:line="67" pos:column="27"/></name></expr>;<pos:position pos:line="67" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="68" pos:column="6"/></block></else></if>

    <if pos:line="70" pos:column="5">if <condition pos:line="70" pos:column="8">(<expr><name pos:line="70" pos:column="9">rn<pos:position pos:line="70" pos:column="11"/></name> <operator pos:line="70" pos:column="12">==<pos:position pos:line="70" pos:column="14"/></operator> <literal type="number" pos:line="70" pos:column="15">0<pos:position pos:line="70" pos:column="16"/></literal></expr>)<pos:position pos:line="70" pos:column="17"/></condition><then pos:line="70" pos:column="17"> <block pos:line="70" pos:column="18">{ 		<comment type="block" pos:line="70" pos:column="33">/* assert might expand to nothing */</comment>
        <expr_stmt><expr><call><name pos:line="71" pos:column="9">xfree<pos:position pos:line="71" pos:column="14"/></name><argument_list pos:line="71" pos:column="14">(<argument><expr><name pos:line="71" pos:column="15">asinfo<pos:position pos:line="71" pos:column="21"/></name></expr></argument>)<pos:position pos:line="71" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="72" pos:column="9">delete<pos:position pos:line="72" pos:column="15"/></operator> <name pos:line="72" pos:column="16">q<pos:position pos:line="72" pos:column="17"/></name></expr>;<pos:position pos:line="72" pos:column="18"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="73" pos:column="9">xfree<pos:position pos:line="73" pos:column="14"/></name><argument_list pos:line="73" pos:column="14">(<argument><expr><name pos:line="73" pos:column="15">e<pos:position pos:line="73" pos:column="16"/></name></expr></argument>)<pos:position pos:line="73" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="18"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="74" pos:column="9">debugs<pos:position pos:line="74" pos:column="15"/></name><argument_list pos:line="74" pos:column="15">(<argument><expr><literal type="number" pos:line="74" pos:column="16">53<pos:position pos:line="74" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="74" pos:column="20">3<pos:position pos:line="74" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="74" pos:column="23">"asnAddNet: Could not add entry."<pos:position pos:line="74" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="58"/></expr_stmt>
        <return pos:line="75" pos:column="9">return <expr><literal type="number" pos:line="75" pos:column="16">0<pos:position pos:line="75" pos:column="17"/></literal></expr>;<pos:position pos:line="75" pos:column="18"/></return>
    }<pos:position pos:line="76" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="78" pos:column="5">e<pos:position pos:line="78" pos:column="6"/></name><operator pos:line="78" pos:column="6">-&gt;<pos:position pos:line="78" pos:column="11"/></operator><name pos:line="78" pos:column="8">e_info<pos:position pos:line="78" pos:column="14"/></name></name> <operator pos:line="78" pos:column="15">=<pos:position pos:line="78" pos:column="16"/></operator> <name pos:line="78" pos:column="17">asinfo<pos:position pos:line="78" pos:column="23"/></name></expr>;<pos:position pos:line="78" pos:column="24"/></expr_stmt>
    <return pos:line="79" pos:column="5">return <expr><literal type="number" pos:line="79" pos:column="12">1<pos:position pos:line="79" pos:column="13"/></literal></expr>;<pos:position pos:line="79" pos:column="14"/></return>
}<pos:position pos:line="80" pos:column="2"/></block></function></unit>
