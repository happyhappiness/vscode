<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3289_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">MemStore<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">startCaching<pos:position pos:line="2" pos:column="23"/></name></name><parameter_list pos:line="2" pos:column="23">(<parameter><decl><type><name pos:line="2" pos:column="24">StoreEntry<pos:position pos:line="2" pos:column="34"/></name> <modifier pos:line="2" pos:column="35">&amp;<pos:position pos:line="2" pos:column="40"/></modifier></type><name pos:line="2" pos:column="36">e<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="38"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">sfileno<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">index<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><literal type="number" pos:line="4" pos:column="21">0<pos:position pos:line="4" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="5" pos:column="5">Ipc<pos:position pos:line="5" pos:column="8"/></name><operator pos:line="5" pos:column="8">::<pos:position pos:line="5" pos:column="10"/></operator><name pos:line="5" pos:column="10">StoreMapAnchor<pos:position pos:line="5" pos:column="24"/></name></name> <modifier pos:line="5" pos:column="25">*<pos:position pos:line="5" pos:column="26"/></modifier></type><name pos:line="5" pos:column="26">slot<pos:position pos:line="5" pos:column="30"/></name> <init pos:line="5" pos:column="31">= <expr><call><name><name pos:line="5" pos:column="33">map<pos:position pos:line="5" pos:column="36"/></name><operator pos:line="5" pos:column="36">-&gt;<pos:position pos:line="5" pos:column="41"/></operator><name pos:line="5" pos:column="38">openForWriting<pos:position pos:line="5" pos:column="52"/></name></name><argument_list pos:line="5" pos:column="52">(<argument><expr><cast type="reinterpret" pos:line="5" pos:column="53">reinterpret_cast<argument_list type="generic" pos:line="5" pos:column="69">&lt;<argument><expr><specifier pos:line="5" pos:column="70">const<pos:position pos:line="5" pos:column="75"/></specifier> <name pos:line="5" pos:column="76">cache_key<pos:position pos:line="5" pos:column="85"/></name> <operator pos:line="5" pos:column="86">*<pos:position pos:line="5" pos:column="87"/></operator></expr></argument>&gt;<pos:position pos:line="5" pos:column="91"/></argument_list><argument_list pos:line="5" pos:column="88">(<argument><expr><name><name pos:line="5" pos:column="89">e<pos:position pos:line="5" pos:column="90"/></name><operator pos:line="5" pos:column="90">.<pos:position pos:line="5" pos:column="91"/></operator><name pos:line="5" pos:column="91">key<pos:position pos:line="5" pos:column="94"/></name></name></expr></argument>)<pos:position pos:line="5" pos:column="95"/></argument_list></cast></expr></argument>, <argument><expr><name pos:line="5" pos:column="97">index<pos:position pos:line="5" pos:column="102"/></name></expr></argument>)<pos:position pos:line="5" pos:column="103"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="104"/></decl_stmt>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">!<pos:position pos:line="6" pos:column="10"/></operator><name pos:line="6" pos:column="10">slot<pos:position pos:line="6" pos:column="14"/></name></expr>)<pos:position pos:line="6" pos:column="15"/></condition><then pos:line="6" pos:column="15"> <block pos:line="6" pos:column="16">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">debugs<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><literal type="number" pos:line="7" pos:column="16">20<pos:position pos:line="7" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="20">5<pos:position pos:line="7" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="23">HERE<pos:position pos:line="7" pos:column="27"/></name> <operator pos:line="7" pos:column="28">&lt;&lt;<pos:position pos:line="7" pos:column="36"/></operator> <literal type="string" pos:line="7" pos:column="31">"No room in mem-cache map to index "<pos:position pos:line="7" pos:column="67"/></literal> <operator pos:line="7" pos:column="68">&lt;&lt;<pos:position pos:line="7" pos:column="76"/></operator> <name pos:line="7" pos:column="71">e<pos:position pos:line="7" pos:column="72"/></name></expr></argument>)<pos:position pos:line="7" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="74"/></expr_stmt>
        <return pos:line="8" pos:column="9">return <expr><literal type="boolean" pos:line="8" pos:column="16">false<pos:position pos:line="8" pos:column="21"/></literal></expr>;<pos:position pos:line="8" pos:column="22"/></return>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="11" pos:column="5">assert<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><name><name pos:line="11" pos:column="12">e<pos:position pos:line="11" pos:column="13"/></name><operator pos:line="11" pos:column="13">.<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="14">mem_obj<pos:position pos:line="11" pos:column="21"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="12" pos:column="5">e<pos:position pos:line="12" pos:column="6"/></name><operator pos:line="12" pos:column="6">.<pos:position pos:line="12" pos:column="7"/></operator><name pos:line="12" pos:column="7">mem_obj<pos:position pos:line="12" pos:column="14"/></name><operator pos:line="12" pos:column="14">-&gt;<pos:position pos:line="12" pos:column="19"/></operator><name pos:line="12" pos:column="16">memCache<pos:position pos:line="12" pos:column="24"/></name><operator pos:line="12" pos:column="24">.<pos:position pos:line="12" pos:column="25"/></operator><name pos:line="12" pos:column="25">index<pos:position pos:line="12" pos:column="30"/></name></name> <operator pos:line="12" pos:column="31">=<pos:position pos:line="12" pos:column="32"/></operator> <name pos:line="12" pos:column="33">index<pos:position pos:line="12" pos:column="38"/></name></expr>;<pos:position pos:line="12" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="13" pos:column="5">e<pos:position pos:line="13" pos:column="6"/></name><operator pos:line="13" pos:column="6">.<pos:position pos:line="13" pos:column="7"/></operator><name pos:line="13" pos:column="7">mem_obj<pos:position pos:line="13" pos:column="14"/></name><operator pos:line="13" pos:column="14">-&gt;<pos:position pos:line="13" pos:column="19"/></operator><name pos:line="13" pos:column="16">memCache<pos:position pos:line="13" pos:column="24"/></name><operator pos:line="13" pos:column="24">.<pos:position pos:line="13" pos:column="25"/></operator><name pos:line="13" pos:column="25">io<pos:position pos:line="13" pos:column="27"/></name></name> <operator pos:line="13" pos:column="28">=<pos:position pos:line="13" pos:column="29"/></operator> <name><name pos:line="13" pos:column="30">MemObject<pos:position pos:line="13" pos:column="39"/></name><operator pos:line="13" pos:column="39">::<pos:position pos:line="13" pos:column="41"/></operator><name pos:line="13" pos:column="41">ioWriting<pos:position pos:line="13" pos:column="50"/></name></name></expr>;<pos:position pos:line="13" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="14" pos:column="5">slot<pos:position pos:line="14" pos:column="9"/></name><operator pos:line="14" pos:column="9">-&gt;<pos:position pos:line="14" pos:column="14"/></operator><name pos:line="14" pos:column="11">set<pos:position pos:line="14" pos:column="14"/></name></name><argument_list pos:line="14" pos:column="14">(<argument><expr><name pos:line="14" pos:column="15">e<pos:position pos:line="14" pos:column="16"/></name></expr></argument>)<pos:position pos:line="14" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="15" pos:column="5">map<pos:position pos:line="15" pos:column="8"/></name><operator pos:line="15" pos:column="8">-&gt;<pos:position pos:line="15" pos:column="13"/></operator><name pos:line="15" pos:column="10">startAppending<pos:position pos:line="15" pos:column="24"/></name></name><argument_list pos:line="15" pos:column="24">(<argument><expr><name pos:line="15" pos:column="25">index<pos:position pos:line="15" pos:column="30"/></name></expr></argument>)<pos:position pos:line="15" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="16" pos:column="5">e<pos:position pos:line="16" pos:column="6"/></name><operator pos:line="16" pos:column="6">.<pos:position pos:line="16" pos:column="7"/></operator><name pos:line="16" pos:column="7">memOutDecision<pos:position pos:line="16" pos:column="21"/></name></name><argument_list pos:line="16" pos:column="21">(<argument><expr><literal type="boolean" pos:line="16" pos:column="22">true<pos:position pos:line="16" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="28"/></expr_stmt>
    <return pos:line="17" pos:column="5">return <expr><literal type="boolean" pos:line="17" pos:column="12">true<pos:position pos:line="17" pos:column="16"/></literal></expr>;<pos:position pos:line="17" pos:column="17"/></return>
}<pos:position pos:line="18" pos:column="2"/></block></function></unit>
