<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7645_squid-3.5.27.cpp" pos:tabs="8"><decl_stmt><decl><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">regcomp<pos:position pos:line="2" pos:column="8"/></name><argument_list pos:line="2" pos:column="8">(<argument><expr><name pos:line="2" pos:column="9">preg<pos:position pos:line="2" pos:column="13"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="15">pattern<pos:position pos:line="2" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="24">cflags<pos:position pos:line="2" pos:column="30"/></name></expr></argument>)<pos:position pos:line="2" pos:column="31"/></argument_list>
<name pos:line="3" pos:column="1">regex_t<pos:position pos:line="3" pos:column="8"/></name> <modifier pos:line="3" pos:column="9">*<pos:position pos:line="3" pos:column="10"/></modifier><name pos:line="3" pos:column="10">preg<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
<decl_stmt><decl><type><specifier pos:line="4" pos:column="1">const<pos:position pos:line="4" pos:column="6"/></specifier> <name pos:line="4" pos:column="7">char<pos:position pos:line="4" pos:column="11"/></name> <modifier pos:line="4" pos:column="12">*<pos:position pos:line="4" pos:column="13"/></modifier></type><name pos:line="4" pos:column="13">pattern<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="5" pos:column="1">int<pos:position pos:line="5" pos:column="4"/></name></type> <name pos:line="5" pos:column="5">cflags<pos:position pos:line="5" pos:column="11"/></name></decl>;<pos:position pos:line="5" pos:column="12"/></decl_stmt>
<block pos:line="6" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">reg_errcode_t<pos:position pos:line="7" pos:column="18"/></name></type> <name pos:line="7" pos:column="19">ret<pos:position pos:line="7" pos:column="22"/></name></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">unsigned<pos:position pos:line="8" pos:column="13"/></name></type> <name pos:line="8" pos:column="14">syntax<pos:position pos:line="8" pos:column="20"/></name>
        <init pos:line="9" pos:column="9">= <expr><ternary><condition><expr><operator pos:line="9" pos:column="11">(<pos:position pos:line="9" pos:column="12"/></operator><name pos:line="9" pos:column="12">cflags<pos:position pos:line="9" pos:column="18"/></name> <operator pos:line="9" pos:column="19">&amp;<pos:position pos:line="9" pos:column="24"/></operator> <name pos:line="9" pos:column="21">REG_EXTENDED<pos:position pos:line="9" pos:column="33"/></name><operator pos:line="9" pos:column="33">)<pos:position pos:line="9" pos:column="34"/></operator></expr> ?<pos:position pos:line="9" pos:column="36"/></condition><then pos:line="9" pos:column="36">
          <expr><name pos:line="10" pos:column="11">RE_SYNTAX_POSIX_EXTENDED<pos:position pos:line="10" pos:column="35"/></name></expr> <pos:position pos:line="10" pos:column="36"/></then><else pos:line="10" pos:column="36">: <expr><name pos:line="10" pos:column="38">RE_SYNTAX_POSIX_BASIC<pos:position pos:line="10" pos:column="59"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="10" pos:column="60"/></decl_stmt>

    <comment type="block" pos:line="12" pos:column="5">/* regex_compile will allocate the space for the compiled pattern.  */</comment>
    <expr_stmt><expr><name><name pos:line="13" pos:column="5">preg<pos:position pos:line="13" pos:column="9"/></name><operator pos:line="13" pos:column="9">-&gt;<pos:position pos:line="13" pos:column="14"/></operator><name pos:line="13" pos:column="11">buffer<pos:position pos:line="13" pos:column="17"/></name></name> <operator pos:line="13" pos:column="18">=<pos:position pos:line="13" pos:column="19"/></operator> <literal type="number" pos:line="13" pos:column="20">0<pos:position pos:line="13" pos:column="21"/></literal></expr>;<pos:position pos:line="13" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="14" pos:column="5">preg<pos:position pos:line="14" pos:column="9"/></name><operator pos:line="14" pos:column="9">-&gt;<pos:position pos:line="14" pos:column="14"/></operator><name pos:line="14" pos:column="11">allocated<pos:position pos:line="14" pos:column="20"/></name></name> <operator pos:line="14" pos:column="21">=<pos:position pos:line="14" pos:column="22"/></operator> <literal type="number" pos:line="14" pos:column="23">0<pos:position pos:line="14" pos:column="24"/></literal></expr>;<pos:position pos:line="14" pos:column="25"/></expr_stmt>

    <comment type="block" pos:line="16" pos:column="5">/* Don't bother to use a fastmap when searching.  This simplifies the
     * REG_NEWLINE case: if we used a fastmap, we'd have to put all the
     * characters after newlines into the fastmap.  This way, we just try
     * every character.  */</comment>
    <expr_stmt><expr><name><name pos:line="20" pos:column="5">preg<pos:position pos:line="20" pos:column="9"/></name><operator pos:line="20" pos:column="9">-&gt;<pos:position pos:line="20" pos:column="14"/></operator><name pos:line="20" pos:column="11">fastmap<pos:position pos:line="20" pos:column="18"/></name></name> <operator pos:line="20" pos:column="19">=<pos:position pos:line="20" pos:column="20"/></operator> <literal type="number" pos:line="20" pos:column="21">0<pos:position pos:line="20" pos:column="22"/></literal></expr>;<pos:position pos:line="20" pos:column="23"/></expr_stmt>

    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><name pos:line="22" pos:column="9">cflags<pos:position pos:line="22" pos:column="15"/></name> <operator pos:line="22" pos:column="16">&amp;<pos:position pos:line="22" pos:column="21"/></operator> <name pos:line="22" pos:column="18">REG_ICASE<pos:position pos:line="22" pos:column="27"/></name></expr>)<pos:position pos:line="22" pos:column="28"/></condition><then pos:line="22" pos:column="28"> <block pos:line="22" pos:column="29">{
        <decl_stmt><decl><type><name pos:line="23" pos:column="9">unsigned<pos:position pos:line="23" pos:column="17"/></name></type> <name pos:line="23" pos:column="18">i<pos:position pos:line="23" pos:column="19"/></name></decl>;<pos:position pos:line="23" pos:column="20"/></decl_stmt>

        <expr_stmt><expr><name><name pos:line="25" pos:column="9">preg<pos:position pos:line="25" pos:column="13"/></name><operator pos:line="25" pos:column="13">-&gt;<pos:position pos:line="25" pos:column="18"/></operator><name pos:line="25" pos:column="15">translate<pos:position pos:line="25" pos:column="24"/></name></name> <operator pos:line="25" pos:column="25">=<pos:position pos:line="25" pos:column="26"/></operator> <operator pos:line="25" pos:column="27">(<pos:position pos:line="25" pos:column="28"/></operator><name pos:line="25" pos:column="28">char<pos:position pos:line="25" pos:column="32"/></name> <operator pos:line="25" pos:column="33">*<pos:position pos:line="25" pos:column="34"/></operator><operator pos:line="25" pos:column="34">)<pos:position pos:line="25" pos:column="35"/></operator> <call><name pos:line="25" pos:column="36">malloc<pos:position pos:line="25" pos:column="42"/></name><argument_list pos:line="25" pos:column="42">(<argument><expr><name pos:line="25" pos:column="43">CHAR_SET_SIZE<pos:position pos:line="25" pos:column="56"/></name></expr></argument>)<pos:position pos:line="25" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="58"/></expr_stmt>
        <if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name><name pos:line="26" pos:column="13">preg<pos:position pos:line="26" pos:column="17"/></name><operator pos:line="26" pos:column="17">-&gt;<pos:position pos:line="26" pos:column="22"/></operator><name pos:line="26" pos:column="19">translate<pos:position pos:line="26" pos:column="28"/></name></name> <operator pos:line="26" pos:column="29">==<pos:position pos:line="26" pos:column="31"/></operator> <name pos:line="26" pos:column="32">NULL<pos:position pos:line="26" pos:column="36"/></name></expr>)<pos:position pos:line="26" pos:column="37"/></condition><then pos:line="26" pos:column="37">
            <block type="pseudo"><return pos:line="27" pos:column="13">return <expr><operator pos:line="27" pos:column="20">(<pos:position pos:line="27" pos:column="21"/></operator><name pos:line="27" pos:column="21">int<pos:position pos:line="27" pos:column="24"/></name><operator pos:line="27" pos:column="24">)<pos:position pos:line="27" pos:column="25"/></operator> <name pos:line="27" pos:column="26">REG_ESPACE<pos:position pos:line="27" pos:column="36"/></name></expr>;<pos:position pos:line="27" pos:column="37"/></return></block></then></if>

        <comment type="block" pos:line="29" pos:column="9">/* Map uppercase characters to corresponding lowercase ones.  */</comment>
        <for pos:line="30" pos:column="9">for <control pos:line="30" pos:column="13">(<init><expr><name pos:line="30" pos:column="14">i<pos:position pos:line="30" pos:column="15"/></name> <operator pos:line="30" pos:column="16">=<pos:position pos:line="30" pos:column="17"/></operator> <literal type="number" pos:line="30" pos:column="18">0<pos:position pos:line="30" pos:column="19"/></literal></expr>;<pos:position pos:line="30" pos:column="20"/></init> <condition><expr><name pos:line="30" pos:column="21">i<pos:position pos:line="30" pos:column="22"/></name> <operator pos:line="30" pos:column="23">&lt;<pos:position pos:line="30" pos:column="27"/></operator> <name pos:line="30" pos:column="25">CHAR_SET_SIZE<pos:position pos:line="30" pos:column="38"/></name></expr>;<pos:position pos:line="30" pos:column="39"/></condition> <incr><expr><name pos:line="30" pos:column="40">i<pos:position pos:line="30" pos:column="41"/></name><operator pos:line="30" pos:column="41">++<pos:position pos:line="30" pos:column="43"/></operator></expr></incr>)<pos:position pos:line="30" pos:column="44"/></control>
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="31" pos:column="13">preg<pos:position pos:line="31" pos:column="17"/></name><operator pos:line="31" pos:column="17">-&gt;<pos:position pos:line="31" pos:column="22"/></operator><name pos:line="31" pos:column="19">translate<pos:position pos:line="31" pos:column="28"/></name><index pos:line="31" pos:column="28">[<expr><name pos:line="31" pos:column="29">i<pos:position pos:line="31" pos:column="30"/></name></expr>]<pos:position pos:line="31" pos:column="31"/></index></name> <operator pos:line="31" pos:column="32">=<pos:position pos:line="31" pos:column="33"/></operator> <ternary><condition><expr><call><name pos:line="31" pos:column="34">ISUPPER<pos:position pos:line="31" pos:column="41"/></name><argument_list pos:line="31" pos:column="41">(<argument><expr><name pos:line="31" pos:column="42">i<pos:position pos:line="31" pos:column="43"/></name></expr></argument>)<pos:position pos:line="31" pos:column="44"/></argument_list></call></expr> ?<pos:position pos:line="31" pos:column="46"/></condition><then pos:line="31" pos:column="46"> <expr><call><name pos:line="31" pos:column="47">tolower<pos:position pos:line="31" pos:column="54"/></name><argument_list pos:line="31" pos:column="54">(<argument><expr><name pos:line="31" pos:column="55">i<pos:position pos:line="31" pos:column="56"/></name></expr></argument>)<pos:position pos:line="31" pos:column="57"/></argument_list></call></expr> <pos:position pos:line="31" pos:column="58"/></then><else pos:line="31" pos:column="58">: <expr><name pos:line="31" pos:column="60">i<pos:position pos:line="31" pos:column="61"/></name></expr></else></ternary></expr>;<pos:position pos:line="31" pos:column="62"/></expr_stmt></block></for>
    }<pos:position pos:line="32" pos:column="6"/></block></then> <else pos:line="32" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="33" pos:column="9">preg<pos:position pos:line="33" pos:column="13"/></name><operator pos:line="33" pos:column="13">-&gt;<pos:position pos:line="33" pos:column="18"/></operator><name pos:line="33" pos:column="15">translate<pos:position pos:line="33" pos:column="24"/></name></name> <operator pos:line="33" pos:column="25">=<pos:position pos:line="33" pos:column="26"/></operator> <name pos:line="33" pos:column="27">NULL<pos:position pos:line="33" pos:column="31"/></name></expr>;<pos:position pos:line="33" pos:column="32"/></expr_stmt></block></else></if>

    <comment type="block" pos:line="35" pos:column="5">/* If REG_NEWLINE is set, newlines are treated differently.  */</comment>
    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><name pos:line="36" pos:column="9">cflags<pos:position pos:line="36" pos:column="15"/></name> <operator pos:line="36" pos:column="16">&amp;<pos:position pos:line="36" pos:column="21"/></operator> <name pos:line="36" pos:column="18">REG_NEWLINE<pos:position pos:line="36" pos:column="29"/></name></expr>)<pos:position pos:line="36" pos:column="30"/></condition><then pos:line="36" pos:column="30"> <block pos:line="36" pos:column="31">{ <comment type="block" pos:line="36" pos:column="33">/* REG_NEWLINE implies neither . nor [^...] match newline.  */</comment>
        <expr_stmt><expr><name pos:line="37" pos:column="9">syntax<pos:position pos:line="37" pos:column="15"/></name> <operator pos:line="37" pos:column="16">&amp;=<pos:position pos:line="37" pos:column="22"/></operator> <operator pos:line="37" pos:column="19">~<pos:position pos:line="37" pos:column="20"/></operator><name pos:line="37" pos:column="20">RE_DOT_NEWLINE<pos:position pos:line="37" pos:column="34"/></name></expr>;<pos:position pos:line="37" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><name pos:line="38" pos:column="9">syntax<pos:position pos:line="38" pos:column="15"/></name> <operator pos:line="38" pos:column="16">|=<pos:position pos:line="38" pos:column="18"/></operator> <name pos:line="38" pos:column="19">RE_HAT_LISTS_NOT_NEWLINE<pos:position pos:line="38" pos:column="43"/></name></expr>;<pos:position pos:line="38" pos:column="44"/></expr_stmt>
        <comment type="block" pos:line="39" pos:column="9">/* It also changes the matching behavior.  */</comment>
        <expr_stmt><expr><name><name pos:line="40" pos:column="9">preg<pos:position pos:line="40" pos:column="13"/></name><operator pos:line="40" pos:column="13">-&gt;<pos:position pos:line="40" pos:column="18"/></operator><name pos:line="40" pos:column="15">newline_anchor<pos:position pos:line="40" pos:column="29"/></name></name> <operator pos:line="40" pos:column="30">=<pos:position pos:line="40" pos:column="31"/></operator> <literal type="number" pos:line="40" pos:column="32">1<pos:position pos:line="40" pos:column="33"/></literal></expr>;<pos:position pos:line="40" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="41" pos:column="6"/></block></then> <else pos:line="41" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="42" pos:column="9">preg<pos:position pos:line="42" pos:column="13"/></name><operator pos:line="42" pos:column="13">-&gt;<pos:position pos:line="42" pos:column="18"/></operator><name pos:line="42" pos:column="15">newline_anchor<pos:position pos:line="42" pos:column="29"/></name></name> <operator pos:line="42" pos:column="30">=<pos:position pos:line="42" pos:column="31"/></operator> <literal type="number" pos:line="42" pos:column="32">0<pos:position pos:line="42" pos:column="33"/></literal></expr>;<pos:position pos:line="42" pos:column="34"/></expr_stmt></block></else></if>

    <expr_stmt><expr><name><name pos:line="44" pos:column="5">preg<pos:position pos:line="44" pos:column="9"/></name><operator pos:line="44" pos:column="9">-&gt;<pos:position pos:line="44" pos:column="14"/></operator><name pos:line="44" pos:column="11">no_sub<pos:position pos:line="44" pos:column="17"/></name></name> <operator pos:line="44" pos:column="18">=<pos:position pos:line="44" pos:column="19"/></operator> <operator pos:line="44" pos:column="20">!<pos:position pos:line="44" pos:column="21"/></operator><operator pos:line="44" pos:column="21">!<pos:position pos:line="44" pos:column="22"/></operator><operator pos:line="44" pos:column="22">(<pos:position pos:line="44" pos:column="23"/></operator><name pos:line="44" pos:column="23">cflags<pos:position pos:line="44" pos:column="29"/></name> <operator pos:line="44" pos:column="30">&amp;<pos:position pos:line="44" pos:column="35"/></operator> <name pos:line="44" pos:column="32">REG_NOSUB<pos:position pos:line="44" pos:column="41"/></name><operator pos:line="44" pos:column="41">)<pos:position pos:line="44" pos:column="42"/></operator></expr>;<pos:position pos:line="44" pos:column="43"/></expr_stmt>

    <comment type="block" pos:line="46" pos:column="5">/* POSIX says a null character in the pattern terminates it, so we
     * can use strlen here in compiling the pattern.  */</comment>
    <expr_stmt><expr><name pos:line="48" pos:column="5">ret<pos:position pos:line="48" pos:column="8"/></name> <operator pos:line="48" pos:column="9">=<pos:position pos:line="48" pos:column="10"/></operator> <call><name pos:line="48" pos:column="11">regex_compile<pos:position pos:line="48" pos:column="24"/></name><argument_list pos:line="48" pos:column="24">(<argument><expr><name pos:line="48" pos:column="25">pattern<pos:position pos:line="48" pos:column="32"/></name></expr></argument>, <argument><expr><call><name pos:line="48" pos:column="34">strlen<pos:position pos:line="48" pos:column="40"/></name><argument_list pos:line="48" pos:column="40">(<argument><expr><name pos:line="48" pos:column="41">pattern<pos:position pos:line="48" pos:column="48"/></name></expr></argument>)<pos:position pos:line="48" pos:column="49"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="48" pos:column="51">syntax<pos:position pos:line="48" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="59">preg<pos:position pos:line="48" pos:column="63"/></name></expr></argument>)<pos:position pos:line="48" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="65"/></expr_stmt>

    <comment type="block" pos:line="50" pos:column="5">/* POSIX doesn't distinguish between an unmatched open-group and an
     * unmatched close-group: both are REG_EPAREN.  */</comment>
    <if pos:line="52" pos:column="5">if <condition pos:line="52" pos:column="8">(<expr><name pos:line="52" pos:column="9">ret<pos:position pos:line="52" pos:column="12"/></name> <operator pos:line="52" pos:column="13">==<pos:position pos:line="52" pos:column="15"/></operator> <name pos:line="52" pos:column="16">REG_ERPAREN<pos:position pos:line="52" pos:column="27"/></name></expr>)<pos:position pos:line="52" pos:column="28"/></condition><then pos:line="52" pos:column="28">
        <block type="pseudo"><expr_stmt><expr><name pos:line="53" pos:column="9">ret<pos:position pos:line="53" pos:column="12"/></name> <operator pos:line="53" pos:column="13">=<pos:position pos:line="53" pos:column="14"/></operator> <name pos:line="53" pos:column="15">REG_EPAREN<pos:position pos:line="53" pos:column="25"/></name></expr>;<pos:position pos:line="53" pos:column="26"/></expr_stmt></block></then></if>

    <return pos:line="55" pos:column="5">return <expr><operator pos:line="55" pos:column="12">(<pos:position pos:line="55" pos:column="13"/></operator><name pos:line="55" pos:column="13">int<pos:position pos:line="55" pos:column="16"/></name><operator pos:line="55" pos:column="16">)<pos:position pos:line="55" pos:column="17"/></operator> <name pos:line="55" pos:column="18">ret<pos:position pos:line="55" pos:column="21"/></name></expr>;<pos:position pos:line="55" pos:column="22"/></return>
}<pos:position pos:line="56" pos:column="2"/></block></unit>
