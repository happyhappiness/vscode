<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6478_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ipc<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">Mem<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">PageStack<pos:position pos:line="2" pos:column="20"/></name><operator pos:line="2" pos:column="20">::<pos:position pos:line="2" pos:column="22"/></operator><name pos:line="2" pos:column="22">pop<pos:position pos:line="2" pos:column="25"/></name></name><parameter_list pos:line="2" pos:column="25">(<parameter><decl><type><name pos:line="2" pos:column="26">PageId<pos:position pos:line="2" pos:column="32"/></name> <modifier pos:line="2" pos:column="33">&amp;<pos:position pos:line="2" pos:column="38"/></modifier></type><name pos:line="2" pos:column="34">page<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="39"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">Must<pos:position pos:line="4" pos:column="9"/></name><argument_list pos:line="4" pos:column="9">(<argument><expr><operator pos:line="4" pos:column="10">!<pos:position pos:line="4" pos:column="11"/></operator><name pos:line="4" pos:column="11">page<pos:position pos:line="4" pos:column="15"/></name></expr></argument>)<pos:position pos:line="4" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="17"/></expr_stmt>

    <comment type="line" pos:line="6" pos:column="5">// we may fail to dequeue, but be conservative to prevent long searches</comment>
    <expr_stmt><expr><operator pos:line="7" pos:column="5">--<pos:position pos:line="7" pos:column="7"/></operator><name pos:line="7" pos:column="7">theSize<pos:position pos:line="7" pos:column="14"/></name></expr>;<pos:position pos:line="7" pos:column="15"/></expr_stmt>

    <comment type="line" pos:line="9" pos:column="5">// find a Readable slot, starting with theLastReadable and going left</comment>
    <while pos:line="10" pos:column="5">while <condition pos:line="10" pos:column="11">(<expr><name pos:line="10" pos:column="12">theSize<pos:position pos:line="10" pos:column="19"/></name> <operator pos:line="10" pos:column="20">&gt;=<pos:position pos:line="10" pos:column="25"/></operator> <literal type="number" pos:line="10" pos:column="23">0<pos:position pos:line="10" pos:column="24"/></literal></expr>)<pos:position pos:line="10" pos:column="25"/></condition> <block pos:line="10" pos:column="26">{
        <decl_stmt><decl><type><specifier pos:line="11" pos:column="9">const<pos:position pos:line="11" pos:column="14"/></specifier> <name pos:line="11" pos:column="15">Offset<pos:position pos:line="11" pos:column="21"/></name></type> <name pos:line="11" pos:column="22">idx<pos:position pos:line="11" pos:column="25"/></name> <init pos:line="11" pos:column="26">= <expr><name pos:line="11" pos:column="28">theLastReadable<pos:position pos:line="11" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="44"/></decl_stmt>
        <comment type="line" pos:line="12" pos:column="9">// mark the slot at ids Writable while extracting its current value</comment>
        <decl_stmt><decl><type><specifier pos:line="13" pos:column="9">const<pos:position pos:line="13" pos:column="14"/></specifier> <name pos:line="13" pos:column="15">Value<pos:position pos:line="13" pos:column="20"/></name></type> <name pos:line="13" pos:column="21">value<pos:position pos:line="13" pos:column="26"/></name> <init pos:line="13" pos:column="27">= <expr><name><name pos:line="13" pos:column="29">theItems<pos:position pos:line="13" pos:column="37"/></name><index pos:line="13" pos:column="37">[<expr><name pos:line="13" pos:column="38">idx<pos:position pos:line="13" pos:column="41"/></name></expr>]<pos:position pos:line="13" pos:column="42"/></index></name><operator pos:line="13" pos:column="42">.<pos:position pos:line="13" pos:column="43"/></operator><call><name pos:line="13" pos:column="43">fetchAndAnd<pos:position pos:line="13" pos:column="54"/></name><argument_list pos:line="13" pos:column="54">(<argument><expr><literal type="number" pos:line="13" pos:column="55">0<pos:position pos:line="13" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="58"/></decl_stmt> <comment type="line" pos:line="13" pos:column="59">// works if Writable is 0</comment>
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">const<pos:position pos:line="14" pos:column="14"/></specifier> <name pos:line="14" pos:column="15">bool<pos:position pos:line="14" pos:column="19"/></name></type> <name pos:line="14" pos:column="20">popped<pos:position pos:line="14" pos:column="26"/></name> <init pos:line="14" pos:column="27">= <expr><name pos:line="14" pos:column="29">value<pos:position pos:line="14" pos:column="34"/></name> <operator pos:line="14" pos:column="35">!=<pos:position pos:line="14" pos:column="37"/></operator> <name pos:line="14" pos:column="38">Writable<pos:position pos:line="14" pos:column="46"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="47"/></decl_stmt>
        <comment type="line" pos:line="15" pos:column="9">// theItems[idx] is probably not Readable [any more]</comment>

        <comment type="line" pos:line="17" pos:column="9">// Whether we popped a Readable value or not, we should try going left</comment>
        <comment type="line" pos:line="18" pos:column="9">// to maintain the index (and make progress).</comment>
        <comment type="line" pos:line="19" pos:column="9">// We may fail if others already updated the index, but that is OK.</comment>
        <expr_stmt><expr><call><name><name pos:line="20" pos:column="9">theLastReadable<pos:position pos:line="20" pos:column="24"/></name><operator pos:line="20" pos:column="24">.<pos:position pos:line="20" pos:column="25"/></operator><name pos:line="20" pos:column="25">swap_if<pos:position pos:line="20" pos:column="32"/></name></name><argument_list pos:line="20" pos:column="32">(<argument><expr><name pos:line="20" pos:column="33">idx<pos:position pos:line="20" pos:column="36"/></name></expr></argument>, <argument><expr><call><name pos:line="20" pos:column="38">prev<pos:position pos:line="20" pos:column="42"/></name><argument_list pos:line="20" pos:column="42">(<argument><expr><name pos:line="20" pos:column="43">idx<pos:position pos:line="20" pos:column="46"/></name></expr></argument>)<pos:position pos:line="20" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="49"/></expr_stmt> <comment type="line" pos:line="20" pos:column="50">// may fail or lie</comment>

        <if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name pos:line="22" pos:column="13">popped<pos:position pos:line="22" pos:column="19"/></name></expr>)<pos:position pos:line="22" pos:column="20"/></condition><then pos:line="22" pos:column="20"> <block pos:line="22" pos:column="21">{
            <comment type="line" pos:line="23" pos:column="13">// the slot we emptied may already be filled, but that is OK</comment>
            <expr_stmt><expr><name pos:line="24" pos:column="13">theFirstWritable<pos:position pos:line="24" pos:column="29"/></name> <operator pos:line="24" pos:column="30">=<pos:position pos:line="24" pos:column="31"/></operator> <name pos:line="24" pos:column="32">idx<pos:position pos:line="24" pos:column="35"/></name></expr>;<pos:position pos:line="24" pos:column="36"/></expr_stmt> <comment type="line" pos:line="24" pos:column="37">// may lie</comment>
            <expr_stmt><expr><name><name pos:line="25" pos:column="13">page<pos:position pos:line="25" pos:column="17"/></name><operator pos:line="25" pos:column="17">.<pos:position pos:line="25" pos:column="18"/></operator><name pos:line="25" pos:column="18">pool<pos:position pos:line="25" pos:column="22"/></name></name> <operator pos:line="25" pos:column="23">=<pos:position pos:line="25" pos:column="24"/></operator> <name pos:line="25" pos:column="25">thePoolId<pos:position pos:line="25" pos:column="34"/></name></expr>;<pos:position pos:line="25" pos:column="35"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="26" pos:column="13">page<pos:position pos:line="26" pos:column="17"/></name><operator pos:line="26" pos:column="17">.<pos:position pos:line="26" pos:column="18"/></operator><name pos:line="26" pos:column="18">number<pos:position pos:line="26" pos:column="24"/></name></name> <operator pos:line="26" pos:column="25">=<pos:position pos:line="26" pos:column="26"/></operator> <name pos:line="26" pos:column="27">value<pos:position pos:line="26" pos:column="32"/></name></expr>;<pos:position pos:line="26" pos:column="33"/></expr_stmt>
            <return pos:line="27" pos:column="13">return <expr><literal type="boolean" pos:line="27" pos:column="20">true<pos:position pos:line="27" pos:column="24"/></literal></expr>;<pos:position pos:line="27" pos:column="25"/></return>
        }<pos:position pos:line="28" pos:column="10"/></block></then></if>
        <comment type="line" pos:line="29" pos:column="9">// TODO: report suspiciously long loops</comment>
    }<pos:position pos:line="30" pos:column="6"/></block></while>

    <expr_stmt><expr><operator pos:line="32" pos:column="5">++<pos:position pos:line="32" pos:column="7"/></operator><name pos:line="32" pos:column="7">theSize<pos:position pos:line="32" pos:column="14"/></name></expr>;<pos:position pos:line="32" pos:column="15"/></expr_stmt>
    <return pos:line="33" pos:column="5">return <expr><literal type="boolean" pos:line="33" pos:column="12">false<pos:position pos:line="33" pos:column="17"/></literal></expr>;<pos:position pos:line="33" pos:column="18"/></return>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
