<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2278_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ServerStateData<pos:position pos:line="2" pos:column="16"/></name><operator pos:line="2" pos:column="16">::<pos:position pos:line="2" pos:column="18"/></operator><name pos:line="2" pos:column="18">adaptVirginReplyBody<pos:position pos:line="2" pos:column="38"/></name></name><parameter_list pos:line="2" pos:column="38">(<parameter><decl><type><specifier pos:line="2" pos:column="39">const<pos:position pos:line="2" pos:column="44"/></specifier> <name pos:line="2" pos:column="45">char<pos:position pos:line="2" pos:column="49"/></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="51">data<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="57">ssize_t<pos:position pos:line="2" pos:column="64"/></name></type> <name pos:line="2" pos:column="65">len<pos:position pos:line="2" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="69"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">startedAdaptation<pos:position pos:line="4" pos:column="29"/></name></expr></argument>)<pos:position pos:line="4" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="31"/></expr_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">!<pos:position pos:line="6" pos:column="10"/></operator><name pos:line="6" pos:column="10">virginBodyDestination<pos:position pos:line="6" pos:column="31"/></name></expr>)<pos:position pos:line="6" pos:column="32"/></condition><then pos:line="6" pos:column="32"> <block pos:line="6" pos:column="33">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">debugs<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><literal type="number" pos:line="7" pos:column="16">11<pos:position pos:line="7" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="7" pos:column="19">3<pos:position pos:line="7" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="22">HERE<pos:position pos:line="7" pos:column="26"/></name> <operator pos:line="7" pos:column="27">&lt;&lt;<pos:position pos:line="7" pos:column="35"/></operator> <literal type="string" pos:line="7" pos:column="30">"ICAP does not want more virgin body"<pos:position pos:line="7" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="69"/></expr_stmt>
        <return pos:line="8" pos:column="9">return;<pos:position pos:line="8" pos:column="16"/></return>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="11" pos:column="5">// grow overflow area if already overflowed</comment>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">responseBodyBuffer<pos:position pos:line="12" pos:column="27"/></name></expr>)<pos:position pos:line="12" pos:column="28"/></condition><then pos:line="12" pos:column="28"> <block pos:line="12" pos:column="29">{
        <expr_stmt><expr><call><name><name pos:line="13" pos:column="9">responseBodyBuffer<pos:position pos:line="13" pos:column="27"/></name><operator pos:line="13" pos:column="27">-&gt;<pos:position pos:line="13" pos:column="32"/></operator><name pos:line="13" pos:column="29">append<pos:position pos:line="13" pos:column="35"/></name></name><argument_list pos:line="13" pos:column="35">(<argument><expr><name pos:line="13" pos:column="36">data<pos:position pos:line="13" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="42">len<pos:position pos:line="13" pos:column="45"/></name></expr></argument>)<pos:position pos:line="13" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><name pos:line="14" pos:column="9">data<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">=<pos:position pos:line="14" pos:column="15"/></operator> <call><name><name pos:line="14" pos:column="16">responseBodyBuffer<pos:position pos:line="14" pos:column="34"/></name><operator pos:line="14" pos:column="34">-&gt;<pos:position pos:line="14" pos:column="39"/></operator><name pos:line="14" pos:column="36">content<pos:position pos:line="14" pos:column="43"/></name></name><argument_list pos:line="14" pos:column="43">()<pos:position pos:line="14" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="46"/></expr_stmt>
        <expr_stmt><expr><name pos:line="15" pos:column="9">len<pos:position pos:line="15" pos:column="12"/></name> <operator pos:line="15" pos:column="13">=<pos:position pos:line="15" pos:column="14"/></operator> <call><name><name pos:line="15" pos:column="15">responseBodyBuffer<pos:position pos:line="15" pos:column="33"/></name><operator pos:line="15" pos:column="33">-&gt;<pos:position pos:line="15" pos:column="38"/></operator><name pos:line="15" pos:column="35">contentSize<pos:position pos:line="15" pos:column="46"/></name></name><argument_list pos:line="15" pos:column="46">()<pos:position pos:line="15" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="49"/></expr_stmt>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><specifier pos:line="18" pos:column="5">const<pos:position pos:line="18" pos:column="10"/></specifier> <name pos:line="18" pos:column="11">ssize_t<pos:position pos:line="18" pos:column="18"/></name></type> <name pos:line="18" pos:column="19">putSize<pos:position pos:line="18" pos:column="26"/></name> <init pos:line="18" pos:column="27">= <expr><call><name><name pos:line="18" pos:column="29">virginBodyDestination<pos:position pos:line="18" pos:column="50"/></name><operator pos:line="18" pos:column="50">-&gt;<pos:position pos:line="18" pos:column="55"/></operator><name pos:line="18" pos:column="52">putMoreData<pos:position pos:line="18" pos:column="63"/></name></name><argument_list pos:line="18" pos:column="63">(<argument><expr><name pos:line="18" pos:column="64">data<pos:position pos:line="18" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="70">len<pos:position pos:line="18" pos:column="73"/></name></expr></argument>)<pos:position pos:line="18" pos:column="74"/></argument_list></call></expr></init></decl>;<pos:position pos:line="18" pos:column="75"/></decl_stmt>
    <expr_stmt><expr><name pos:line="19" pos:column="5">data<pos:position pos:line="19" pos:column="9"/></name> <operator pos:line="19" pos:column="10">+=<pos:position pos:line="19" pos:column="12"/></operator> <name pos:line="19" pos:column="13">putSize<pos:position pos:line="19" pos:column="20"/></name></expr>;<pos:position pos:line="19" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name pos:line="20" pos:column="5">len<pos:position pos:line="20" pos:column="8"/></name> <operator pos:line="20" pos:column="9">-=<pos:position pos:line="20" pos:column="11"/></operator> <name pos:line="20" pos:column="12">putSize<pos:position pos:line="20" pos:column="19"/></name></expr>;<pos:position pos:line="20" pos:column="20"/></expr_stmt>

    <comment type="line" pos:line="22" pos:column="5">// if we had overflow area, shrink it as necessary</comment>
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><name pos:line="23" pos:column="9">responseBodyBuffer<pos:position pos:line="23" pos:column="27"/></name></expr>)<pos:position pos:line="23" pos:column="28"/></condition><then pos:line="23" pos:column="28"> <block pos:line="23" pos:column="29">{
        <if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">putSize<pos:position pos:line="24" pos:column="20"/></name> <operator pos:line="24" pos:column="21">==<pos:position pos:line="24" pos:column="23"/></operator> <call><name><name pos:line="24" pos:column="24">responseBodyBuffer<pos:position pos:line="24" pos:column="42"/></name><operator pos:line="24" pos:column="42">-&gt;<pos:position pos:line="24" pos:column="47"/></operator><name pos:line="24" pos:column="44">contentSize<pos:position pos:line="24" pos:column="55"/></name></name><argument_list pos:line="24" pos:column="55">()<pos:position pos:line="24" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="58"/></condition><then pos:line="24" pos:column="58"> <block pos:line="24" pos:column="59">{
            <expr_stmt><expr><operator pos:line="25" pos:column="13">delete<pos:position pos:line="25" pos:column="19"/></operator> <name pos:line="25" pos:column="20">responseBodyBuffer<pos:position pos:line="25" pos:column="38"/></name></expr>;<pos:position pos:line="25" pos:column="39"/></expr_stmt>
            <expr_stmt><expr><name pos:line="26" pos:column="13">responseBodyBuffer<pos:position pos:line="26" pos:column="31"/></name> <operator pos:line="26" pos:column="32">=<pos:position pos:line="26" pos:column="33"/></operator> <name pos:line="26" pos:column="34">NULL<pos:position pos:line="26" pos:column="38"/></name></expr>;<pos:position pos:line="26" pos:column="39"/></expr_stmt>
        }<pos:position pos:line="27" pos:column="10"/></block></then> <else pos:line="27" pos:column="11">else <block pos:line="27" pos:column="16">{
            <expr_stmt><expr><call><name><name pos:line="28" pos:column="13">responseBodyBuffer<pos:position pos:line="28" pos:column="31"/></name><operator pos:line="28" pos:column="31">-&gt;<pos:position pos:line="28" pos:column="36"/></operator><name pos:line="28" pos:column="33">consume<pos:position pos:line="28" pos:column="40"/></name></name><argument_list pos:line="28" pos:column="40">(<argument><expr><name pos:line="28" pos:column="41">putSize<pos:position pos:line="28" pos:column="48"/></name></expr></argument>)<pos:position pos:line="28" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="50"/></expr_stmt>
        }<pos:position pos:line="29" pos:column="10"/></block></else></if>
        <return pos:line="30" pos:column="9">return;<pos:position pos:line="30" pos:column="16"/></return>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="33" pos:column="5">// if we did not have an overflow area, create it as needed</comment>
    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">(<expr><name pos:line="34" pos:column="9">len<pos:position pos:line="34" pos:column="12"/></name> <operator pos:line="34" pos:column="13">&gt;<pos:position pos:line="34" pos:column="17"/></operator> <literal type="number" pos:line="34" pos:column="15">0<pos:position pos:line="34" pos:column="16"/></literal></expr>)<pos:position pos:line="34" pos:column="17"/></condition><then pos:line="34" pos:column="17"> <block pos:line="34" pos:column="18">{
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">assert<pos:position pos:line="35" pos:column="15"/></name><argument_list pos:line="35" pos:column="15">(<argument><expr><operator pos:line="35" pos:column="16">!<pos:position pos:line="35" pos:column="17"/></operator><name pos:line="35" pos:column="17">responseBodyBuffer<pos:position pos:line="35" pos:column="35"/></name></expr></argument>)<pos:position pos:line="35" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><name pos:line="36" pos:column="9">responseBodyBuffer<pos:position pos:line="36" pos:column="27"/></name> <operator pos:line="36" pos:column="28">=<pos:position pos:line="36" pos:column="29"/></operator> <operator pos:line="36" pos:column="30">new<pos:position pos:line="36" pos:column="33"/></operator> <name pos:line="36" pos:column="34">MemBuf<pos:position pos:line="36" pos:column="40"/></name></expr>;<pos:position pos:line="36" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="37" pos:column="9">responseBodyBuffer<pos:position pos:line="37" pos:column="27"/></name><operator pos:line="37" pos:column="27">-&gt;<pos:position pos:line="37" pos:column="32"/></operator><name pos:line="37" pos:column="29">init<pos:position pos:line="37" pos:column="33"/></name></name><argument_list pos:line="37" pos:column="33">(<argument><expr><literal type="number" pos:line="37" pos:column="34">4096<pos:position pos:line="37" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="40">SQUID_TCP_SO_RCVBUF<pos:position pos:line="37" pos:column="59"/></name> <operator pos:line="37" pos:column="60">*<pos:position pos:line="37" pos:column="61"/></operator> <literal type="number" pos:line="37" pos:column="62">10<pos:position pos:line="37" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="66"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="38" pos:column="9">responseBodyBuffer<pos:position pos:line="38" pos:column="27"/></name><operator pos:line="38" pos:column="27">-&gt;<pos:position pos:line="38" pos:column="32"/></operator><name pos:line="38" pos:column="29">append<pos:position pos:line="38" pos:column="35"/></name></name><argument_list pos:line="38" pos:column="35">(<argument><expr><name pos:line="38" pos:column="36">data<pos:position pos:line="38" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="42">len<pos:position pos:line="38" pos:column="45"/></name></expr></argument>)<pos:position pos:line="38" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="47"/></expr_stmt>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
