<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6219_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Log<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">TcpLogger<pos:position pos:line="2" pos:column="15"/></name><operator pos:line="2" pos:column="15">::<pos:position pos:line="2" pos:column="17"/></operator><name pos:line="2" pos:column="17">appendChunk<pos:position pos:line="2" pos:column="28"/></name></name><parameter_list pos:line="2" pos:column="28">(<parameter><decl><type><specifier pos:line="2" pos:column="29">const<pos:position pos:line="2" pos:column="34"/></specifier> <name pos:line="2" pos:column="35">char<pos:position pos:line="2" pos:column="39"/></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier></type><name pos:line="2" pos:column="41">chunk<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="48">const<pos:position pos:line="2" pos:column="53"/></specifier> <name pos:line="2" pos:column="54">size_t<pos:position pos:line="2" pos:column="60"/></name></type> <name pos:line="2" pos:column="61">len<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="65"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">Must<pos:position pos:line="4" pos:column="9"/></name><argument_list pos:line="4" pos:column="9">(<argument><expr><name pos:line="4" pos:column="10">len<pos:position pos:line="4" pos:column="13"/></name> <operator pos:line="4" pos:column="14">&lt;=<pos:position pos:line="4" pos:column="19"/></operator> <name pos:line="4" pos:column="17">IoBufSize<pos:position pos:line="4" pos:column="26"/></name></expr></argument>)<pos:position pos:line="4" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="28"/></expr_stmt>
    <comment type="line" pos:line="5" pos:column="5">// add a buffer if there is not one that can accomodate len bytes</comment>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">bool<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">addBuffer<pos:position pos:line="6" pos:column="19"/></name> <init pos:line="6" pos:column="20">= <expr><call><name><name pos:line="6" pos:column="22">buffers<pos:position pos:line="6" pos:column="29"/></name><operator pos:line="6" pos:column="29">.<pos:position pos:line="6" pos:column="30"/></operator><name pos:line="6" pos:column="30">empty<pos:position pos:line="6" pos:column="35"/></name></name><argument_list pos:line="6" pos:column="35">()<pos:position pos:line="6" pos:column="37"/></argument_list></call> <operator pos:line="6" pos:column="38">||<pos:position pos:line="6" pos:column="40"/></operator>
                     <operator pos:line="7" pos:column="22">(<pos:position pos:line="7" pos:column="23"/></operator><call><name><name pos:line="7" pos:column="23">buffers<pos:position pos:line="7" pos:column="30"/></name><operator pos:line="7" pos:column="30">.<pos:position pos:line="7" pos:column="31"/></operator><name pos:line="7" pos:column="31">back<pos:position pos:line="7" pos:column="35"/></name></name><argument_list pos:line="7" pos:column="35">()<pos:position pos:line="7" pos:column="37"/></argument_list></call><operator pos:line="7" pos:column="37">-&gt;<pos:position pos:line="7" pos:column="42"/></operator><name pos:line="7" pos:column="39">size<pos:position pos:line="7" pos:column="43"/></name><operator pos:line="7" pos:column="43">+<pos:position pos:line="7" pos:column="44"/></operator><name pos:line="7" pos:column="44">len<pos:position pos:line="7" pos:column="47"/></name> <operator pos:line="7" pos:column="48">&gt;<pos:position pos:line="7" pos:column="52"/></operator> <name pos:line="7" pos:column="50">IoBufSize<pos:position pos:line="7" pos:column="59"/></name><operator pos:line="7" pos:column="59">)<pos:position pos:line="7" pos:column="60"/></operator></expr></init></decl>;<pos:position pos:line="7" pos:column="61"/></decl_stmt>
    <comment type="line" pos:line="8" pos:column="5">// also add a buffer if there is only one and that one is being written</comment>
    <expr_stmt><expr><name pos:line="9" pos:column="5">addBuffer<pos:position pos:line="9" pos:column="14"/></name> <operator pos:line="9" pos:column="15">=<pos:position pos:line="9" pos:column="16"/></operator> <name pos:line="9" pos:column="17">addBuffer<pos:position pos:line="9" pos:column="26"/></name> <operator pos:line="9" pos:column="27">||<pos:position pos:line="9" pos:column="29"/></operator> <operator pos:line="9" pos:column="30">(<pos:position pos:line="9" pos:column="31"/></operator><name pos:line="9" pos:column="31">writeScheduled<pos:position pos:line="9" pos:column="45"/></name> <operator pos:line="9" pos:column="46">&amp;&amp;<pos:position pos:line="9" pos:column="56"/></operator> <call><name><name pos:line="9" pos:column="49">buffers<pos:position pos:line="9" pos:column="56"/></name><operator pos:line="9" pos:column="56">.<pos:position pos:line="9" pos:column="57"/></operator><name pos:line="9" pos:column="57">size<pos:position pos:line="9" pos:column="61"/></name></name><argument_list pos:line="9" pos:column="61">()<pos:position pos:line="9" pos:column="63"/></argument_list></call> <operator pos:line="9" pos:column="64">==<pos:position pos:line="9" pos:column="66"/></operator> <literal type="number" pos:line="9" pos:column="67">1<pos:position pos:line="9" pos:column="68"/></literal><operator pos:line="9" pos:column="68">)<pos:position pos:line="9" pos:column="69"/></operator></expr>;<pos:position pos:line="9" pos:column="70"/></expr_stmt>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name pos:line="11" pos:column="9">addBuffer<pos:position pos:line="11" pos:column="18"/></name></expr>)<pos:position pos:line="11" pos:column="19"/></condition><then pos:line="11" pos:column="19"> <block pos:line="11" pos:column="20">{
        <expr_stmt><expr><call><name><name pos:line="12" pos:column="9">buffers<pos:position pos:line="12" pos:column="16"/></name><operator pos:line="12" pos:column="16">.<pos:position pos:line="12" pos:column="17"/></operator><name pos:line="12" pos:column="17">push_back<pos:position pos:line="12" pos:column="26"/></name></name><argument_list pos:line="12" pos:column="26">(<argument><expr><operator pos:line="12" pos:column="27">new<pos:position pos:line="12" pos:column="30"/></operator> <call><name pos:line="12" pos:column="31">MemBlob<pos:position pos:line="12" pos:column="38"/></name><argument_list pos:line="12" pos:column="38">(<argument><expr><name pos:line="12" pos:column="39">IoBufSize<pos:position pos:line="12" pos:column="48"/></name></expr></argument>)<pos:position pos:line="12" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="51"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">debugs<pos:position pos:line="13" pos:column="15"/></name><argument_list pos:line="13" pos:column="15">(<argument><expr><name pos:line="13" pos:column="16">MY_DEBUG_SECTION<pos:position pos:line="13" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="34">7<pos:position pos:line="13" pos:column="35"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="37">"added buffer #"<pos:position pos:line="13" pos:column="53"/></literal> <operator pos:line="13" pos:column="54">&lt;&lt;<pos:position pos:line="13" pos:column="62"/></operator> <call><name><name pos:line="13" pos:column="57">buffers<pos:position pos:line="13" pos:column="64"/></name><operator pos:line="13" pos:column="64">.<pos:position pos:line="13" pos:column="65"/></operator><name pos:line="13" pos:column="65">size<pos:position pos:line="13" pos:column="69"/></name></name><argument_list pos:line="13" pos:column="69">()<pos:position pos:line="13" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="73"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="16" pos:column="5">Must<pos:position pos:line="16" pos:column="9"/></name><argument_list pos:line="16" pos:column="9">(<argument><expr><operator pos:line="16" pos:column="10">!<pos:position pos:line="16" pos:column="11"/></operator><call><name><name pos:line="16" pos:column="11">buffers<pos:position pos:line="16" pos:column="18"/></name><operator pos:line="16" pos:column="18">.<pos:position pos:line="16" pos:column="19"/></operator><name pos:line="16" pos:column="19">empty<pos:position pos:line="16" pos:column="24"/></name></name><argument_list pos:line="16" pos:column="24">()<pos:position pos:line="16" pos:column="26"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="17" pos:column="5">buffers<pos:position pos:line="17" pos:column="12"/></name><operator pos:line="17" pos:column="12">.<pos:position pos:line="17" pos:column="13"/></operator><name pos:line="17" pos:column="13">back<pos:position pos:line="17" pos:column="17"/></name></name><argument_list pos:line="17" pos:column="17">()<pos:position pos:line="17" pos:column="19"/></argument_list></call><operator pos:line="17" pos:column="19">-&gt;<pos:position pos:line="17" pos:column="24"/></operator><call><name pos:line="17" pos:column="21">append<pos:position pos:line="17" pos:column="27"/></name><argument_list pos:line="17" pos:column="27">(<argument><expr><name pos:line="17" pos:column="28">chunk<pos:position pos:line="17" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="35">len<pos:position pos:line="17" pos:column="38"/></name></expr></argument>)<pos:position pos:line="17" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name pos:line="18" pos:column="5">bufferedSize<pos:position pos:line="18" pos:column="17"/></name> <operator pos:line="18" pos:column="18">+=<pos:position pos:line="18" pos:column="20"/></operator> <name pos:line="18" pos:column="21">len<pos:position pos:line="18" pos:column="24"/></name></expr>;<pos:position pos:line="18" pos:column="25"/></expr_stmt>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
