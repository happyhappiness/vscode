<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3497_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Icap<pos:position pos:line="1" pos:column="22"/></name><operator pos:line="1" pos:column="22">::<pos:position pos:line="1" pos:column="24"/></operator><name pos:line="1" pos:column="24">ModXact<pos:position pos:line="1" pos:column="31"/></name><operator pos:line="1" pos:column="31">::<pos:position pos:line="1" pos:column="33"/></operator><name pos:line="1" pos:column="33">start<pos:position pos:line="1" pos:column="38"/></name></name><parameter_list pos:line="1" pos:column="38">()<pos:position pos:line="1" pos:column="40"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name><name pos:line="3" pos:column="5">Adaptation<pos:position pos:line="3" pos:column="15"/></name><operator pos:line="3" pos:column="15">::<pos:position pos:line="3" pos:column="17"/></operator><name pos:line="3" pos:column="17">Icap<pos:position pos:line="3" pos:column="21"/></name><operator pos:line="3" pos:column="21">::<pos:position pos:line="3" pos:column="23"/></operator><name pos:line="3" pos:column="23">Xaction<pos:position pos:line="3" pos:column="30"/></name><operator pos:line="3" pos:column="30">::<pos:position pos:line="3" pos:column="32"/></operator><name pos:line="3" pos:column="32">start<pos:position pos:line="3" pos:column="37"/></name></name><argument_list pos:line="3" pos:column="37">()<pos:position pos:line="3" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="40"/></expr_stmt>

    <comment type="line" pos:line="5" pos:column="5">// reserve an adaptation history slot (attempts are known at this time)</comment>
    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">Adaptation<pos:position pos:line="6" pos:column="15"/></name><operator pos:line="6" pos:column="15">::<pos:position pos:line="6" pos:column="17"/></operator><name pos:line="6" pos:column="17">History<pos:position pos:line="6" pos:column="24"/></name><operator pos:line="6" pos:column="24">::<pos:position pos:line="6" pos:column="26"/></operator><name pos:line="6" pos:column="26">Pointer<pos:position pos:line="6" pos:column="33"/></name></name></type> <name pos:line="6" pos:column="34">ah<pos:position pos:line="6" pos:column="36"/></name> <init pos:line="6" pos:column="37">= <expr><call><name pos:line="6" pos:column="39">virginRequest<pos:position pos:line="6" pos:column="52"/></name><argument_list pos:line="6" pos:column="52">()<pos:position pos:line="6" pos:column="54"/></argument_list></call><operator pos:line="6" pos:column="54">.<pos:position pos:line="6" pos:column="55"/></operator><call><name pos:line="6" pos:column="55">adaptLogHistory<pos:position pos:line="6" pos:column="70"/></name><argument_list pos:line="6" pos:column="70">()<pos:position pos:line="6" pos:column="72"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="73"/></decl_stmt>
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name pos:line="7" pos:column="9">ah<pos:position pos:line="7" pos:column="11"/></name> <operator pos:line="7" pos:column="12">!=<pos:position pos:line="7" pos:column="14"/></operator> <name pos:line="7" pos:column="15">NULL<pos:position pos:line="7" pos:column="19"/></name></expr>)<pos:position pos:line="7" pos:column="20"/></condition><then pos:line="7" pos:column="20">
        <block type="pseudo"><expr_stmt><expr><name pos:line="8" pos:column="9">adaptHistoryId<pos:position pos:line="8" pos:column="23"/></name> <operator pos:line="8" pos:column="24">=<pos:position pos:line="8" pos:column="25"/></operator> <call><name><name pos:line="8" pos:column="26">ah<pos:position pos:line="8" pos:column="28"/></name><operator pos:line="8" pos:column="28">-&gt;<pos:position pos:line="8" pos:column="33"/></operator><name pos:line="8" pos:column="30">recordXactStart<pos:position pos:line="8" pos:column="45"/></name></name><argument_list pos:line="8" pos:column="45">(<argument><expr><call><name pos:line="8" pos:column="46">service<pos:position pos:line="8" pos:column="53"/></name><argument_list pos:line="8" pos:column="53">()<pos:position pos:line="8" pos:column="55"/></argument_list></call><operator pos:line="8" pos:column="55">.<pos:position pos:line="8" pos:column="56"/></operator><call><name pos:line="8" pos:column="56">cfg<pos:position pos:line="8" pos:column="59"/></name><argument_list pos:line="8" pos:column="59">()<pos:position pos:line="8" pos:column="61"/></argument_list></call><operator pos:line="8" pos:column="61">.<pos:position pos:line="8" pos:column="62"/></operator><name pos:line="8" pos:column="62">key<pos:position pos:line="8" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="67">icap_tr_start<pos:position pos:line="8" pos:column="80"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="82">attempts<pos:position pos:line="8" pos:column="90"/></name> <operator pos:line="8" pos:column="91">&gt;<pos:position pos:line="8" pos:column="95"/></operator> <literal type="number" pos:line="8" pos:column="93">1<pos:position pos:line="8" pos:column="94"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="95"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="96"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="10" pos:column="5">estimateVirginBody<pos:position pos:line="10" pos:column="23"/></name><argument_list pos:line="10" pos:column="23">()<pos:position pos:line="10" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="26"/></expr_stmt> <comment type="line" pos:line="10" pos:column="27">// before virgin disappears!</comment>

    <expr_stmt><expr><name pos:line="12" pos:column="5">canStartBypass<pos:position pos:line="12" pos:column="19"/></name> <operator pos:line="12" pos:column="20">=<pos:position pos:line="12" pos:column="21"/></operator> <call><name pos:line="12" pos:column="22">service<pos:position pos:line="12" pos:column="29"/></name><argument_list pos:line="12" pos:column="29">()<pos:position pos:line="12" pos:column="31"/></argument_list></call><operator pos:line="12" pos:column="31">.<pos:position pos:line="12" pos:column="32"/></operator><call><name pos:line="12" pos:column="32">cfg<pos:position pos:line="12" pos:column="35"/></name><argument_list pos:line="12" pos:column="35">()<pos:position pos:line="12" pos:column="37"/></argument_list></call><operator pos:line="12" pos:column="37">.<pos:position pos:line="12" pos:column="38"/></operator><name pos:line="12" pos:column="38">bypass<pos:position pos:line="12" pos:column="44"/></name></expr>;<pos:position pos:line="12" pos:column="45"/></expr_stmt>

    <comment type="line" pos:line="14" pos:column="5">// it is an ICAP violation to send request to a service w/o known OPTIONS</comment>
    <comment type="line" pos:line="15" pos:column="5">// and the service may is too busy for us: honor Max-Connections and such</comment>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><call><name pos:line="16" pos:column="9">service<pos:position pos:line="16" pos:column="16"/></name><argument_list pos:line="16" pos:column="16">()<pos:position pos:line="16" pos:column="18"/></argument_list></call><operator pos:line="16" pos:column="18">.<pos:position pos:line="16" pos:column="19"/></operator><call><name pos:line="16" pos:column="19">up<pos:position pos:line="16" pos:column="21"/></name><argument_list pos:line="16" pos:column="21">()<pos:position pos:line="16" pos:column="23"/></argument_list></call> <operator pos:line="16" pos:column="24">&amp;&amp;<pos:position pos:line="16" pos:column="34"/></operator> <call><name pos:line="16" pos:column="27">service<pos:position pos:line="16" pos:column="34"/></name><argument_list pos:line="16" pos:column="34">()<pos:position pos:line="16" pos:column="36"/></argument_list></call><operator pos:line="16" pos:column="36">.<pos:position pos:line="16" pos:column="37"/></operator><call><name pos:line="16" pos:column="37">availableForNew<pos:position pos:line="16" pos:column="52"/></name><argument_list pos:line="16" pos:column="52">()<pos:position pos:line="16" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="55"/></condition><then pos:line="16" pos:column="55">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="9">startWriting<pos:position pos:line="17" pos:column="21"/></name><argument_list pos:line="17" pos:column="21">()<pos:position pos:line="17" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="24"/></expr_stmt></block></then>
    <else pos:line="18" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="19" pos:column="9">waitForService<pos:position pos:line="19" pos:column="23"/></name><argument_list pos:line="19" pos:column="23">()<pos:position pos:line="19" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="26"/></expr_stmt></block></else></if>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
