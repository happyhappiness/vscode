<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3756_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type>
<name><name pos:line="2" pos:column="1">Ip<pos:position pos:line="2" pos:column="3"/></name><operator pos:line="2" pos:column="3">::<pos:position pos:line="2" pos:column="5"/></operator><name pos:line="2" pos:column="5">Address<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">ToURL<pos:position pos:line="2" pos:column="19"/></name></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name pos:line="2" pos:column="20">char<pos:position pos:line="2" pos:column="24"/></name><modifier pos:line="2" pos:column="24">*<pos:position pos:line="2" pos:column="25"/></modifier></type> <name pos:line="2" pos:column="26">buf<pos:position pos:line="2" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="31">unsigned<pos:position pos:line="2" pos:column="39"/></name> <name pos:line="2" pos:column="40">int<pos:position pos:line="2" pos:column="43"/></name></type> <name pos:line="2" pos:column="44">blen<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="49"/></parameter_list> <specifier pos:line="2" pos:column="50">const<pos:position pos:line="2" pos:column="55"/></specifier>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">p<pos:position pos:line="4" pos:column="12"/></name> <init pos:line="4" pos:column="13">= <expr><name pos:line="4" pos:column="15">buf<pos:position pos:line="4" pos:column="18"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>

    <comment type="line" pos:line="6" pos:column="5">// Ensure we have a buffer.</comment>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">buf<pos:position pos:line="8" pos:column="12"/></name> <operator pos:line="8" pos:column="13">==<pos:position pos:line="8" pos:column="15"/></operator> <name pos:line="8" pos:column="16">NULL<pos:position pos:line="8" pos:column="20"/></name></expr>)<pos:position pos:line="8" pos:column="21"/></condition><then pos:line="8" pos:column="21"> <block pos:line="8" pos:column="22">{
        <return pos:line="9" pos:column="9">return <expr><name pos:line="9" pos:column="16">NULL<pos:position pos:line="9" pos:column="20"/></name></expr>;<pos:position pos:line="9" pos:column="21"/></return>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="12" pos:column="5">p<pos:position pos:line="12" pos:column="6"/></name> <operator pos:line="12" pos:column="7">+=<pos:position pos:line="12" pos:column="9"/></operator> <call><name pos:line="12" pos:column="10">ToHostname<pos:position pos:line="12" pos:column="20"/></name><argument_list pos:line="12" pos:column="20">(<argument><expr><name pos:line="12" pos:column="21">p<pos:position pos:line="12" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="24">blen<pos:position pos:line="12" pos:column="28"/></name></expr></argument>)<pos:position pos:line="12" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="30"/></expr_stmt>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name><name pos:line="14" pos:column="9">m_SocketAddr<pos:position pos:line="14" pos:column="21"/></name><operator pos:line="14" pos:column="21">.<pos:position pos:line="14" pos:column="22"/></operator><name pos:line="14" pos:column="22">sin6_port<pos:position pos:line="14" pos:column="31"/></name></name> <operator pos:line="14" pos:column="32">&gt;<pos:position pos:line="14" pos:column="36"/></operator> <literal type="number" pos:line="14" pos:column="34">0<pos:position pos:line="14" pos:column="35"/></literal> <operator pos:line="14" pos:column="36">&amp;&amp;<pos:position pos:line="14" pos:column="46"/></operator> <name pos:line="14" pos:column="39">p<pos:position pos:line="14" pos:column="40"/></name> <operator pos:line="14" pos:column="41">&lt;=<pos:position pos:line="14" pos:column="46"/></operator> <operator pos:line="14" pos:column="44">(<pos:position pos:line="14" pos:column="45"/></operator><name pos:line="14" pos:column="45">buf<pos:position pos:line="14" pos:column="48"/></name><operator pos:line="14" pos:column="48">+<pos:position pos:line="14" pos:column="49"/></operator><name pos:line="14" pos:column="49">blen<pos:position pos:line="14" pos:column="53"/></name><operator pos:line="14" pos:column="53">-<pos:position pos:line="14" pos:column="54"/></operator><literal type="number" pos:line="14" pos:column="54">7<pos:position pos:line="14" pos:column="55"/></literal><operator pos:line="14" pos:column="55">)<pos:position pos:line="14" pos:column="56"/></operator></expr> )<pos:position pos:line="14" pos:column="58"/></condition><then pos:line="14" pos:column="58"> <block pos:line="14" pos:column="59">{
        <comment type="line" pos:line="15" pos:column="9">// ':port' (short int) needs at most 6 bytes plus 1 for 0-terminator</comment>
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">snprintf<pos:position pos:line="16" pos:column="17"/></name><argument_list pos:line="16" pos:column="17">(<argument><expr><name pos:line="16" pos:column="18">p<pos:position pos:line="16" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="21">7<pos:position pos:line="16" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="24">":%d"<pos:position pos:line="16" pos:column="29"/></literal></expr></argument>, <argument><expr><call><name pos:line="16" pos:column="31">GetPort<pos:position pos:line="16" pos:column="38"/></name><argument_list pos:line="16" pos:column="38">()<pos:position pos:line="16" pos:column="40"/></argument_list></call></expr></argument> )<pos:position pos:line="16" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="43"/></expr_stmt>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="19" pos:column="5">// force a null-terminated string</comment>
    <expr_stmt><expr><name><name pos:line="20" pos:column="5">buf<pos:position pos:line="20" pos:column="8"/></name><index pos:line="20" pos:column="8">[<expr><name pos:line="20" pos:column="9">blen<pos:position pos:line="20" pos:column="13"/></name><operator pos:line="20" pos:column="13">-<pos:position pos:line="20" pos:column="14"/></operator><literal type="number" pos:line="20" pos:column="14">1<pos:position pos:line="20" pos:column="15"/></literal></expr>]<pos:position pos:line="20" pos:column="16"/></index></name> <operator pos:line="20" pos:column="17">=<pos:position pos:line="20" pos:column="18"/></operator> <literal type="char" pos:line="20" pos:column="19">'\0'<pos:position pos:line="20" pos:column="23"/></literal></expr>;<pos:position pos:line="20" pos:column="24"/></expr_stmt>

    <return pos:line="22" pos:column="5">return <expr><name pos:line="22" pos:column="12">buf<pos:position pos:line="22" pos:column="15"/></name></expr>;<pos:position pos:line="22" pos:column="16"/></return>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
