<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1320_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">mcastJoinGroups<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><specifier pos:line="2" pos:column="17">const<pos:position pos:line="2" pos:column="22"/></specifier> <name pos:line="2" pos:column="23">ipcache_addrs<pos:position pos:line="2" pos:column="36"/></name> <modifier pos:line="2" pos:column="37">*<pos:position pos:line="2" pos:column="38"/></modifier></type><name pos:line="2" pos:column="38">ia<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="42">const<pos:position pos:line="2" pos:column="47"/></specifier> <name pos:line="2" pos:column="48">DnsLookupDetails<pos:position pos:line="2" pos:column="64"/></name> <modifier pos:line="2" pos:column="65">&amp;<pos:position pos:line="2" pos:column="70"/></modifier></type></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="68">void<pos:position pos:line="2" pos:column="72"/></name> <modifier pos:line="2" pos:column="73">*<pos:position pos:line="2" pos:column="74"/></modifier></type><name pos:line="2" pos:column="74">datanotused<pos:position pos:line="2" pos:column="85"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="86"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:ifdef pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">ifdef<pos:position pos:line="4" pos:column="7"/></cpp:directive> <name pos:line="4" pos:column="8">IP_MULTICAST_TTL<pos:position pos:line="4" pos:column="24"/></name></cpp:ifdef>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">fd<pos:position pos:line="5" pos:column="11"/></name> <init pos:line="5" pos:column="12">= <expr><name pos:line="5" pos:column="14">theInIcpConnection<pos:position pos:line="5" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>

    <decl_stmt><decl><type><name><name pos:line="7" pos:column="5">struct<pos:position pos:line="7" pos:column="11"/></name> <name pos:line="7" pos:column="12">ip_mreq<pos:position pos:line="7" pos:column="19"/></name></name></type> <name pos:line="7" pos:column="20">mr<pos:position pos:line="7" pos:column="22"/></name></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">i<pos:position pos:line="8" pos:column="10"/></name></decl>;<pos:position pos:line="8" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">x<pos:position pos:line="9" pos:column="10"/></name></decl>;<pos:position pos:line="9" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">char<pos:position pos:line="10" pos:column="9"/></name></type> <name pos:line="10" pos:column="10">c<pos:position pos:line="10" pos:column="11"/></name> <init pos:line="10" pos:column="12">= <expr><literal type="number" pos:line="10" pos:column="14">0<pos:position pos:line="10" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="16"/></decl_stmt>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">ia<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">==<pos:position pos:line="12" pos:column="14"/></operator> <name pos:line="12" pos:column="15">NULL<pos:position pos:line="12" pos:column="19"/></name></expr>)<pos:position pos:line="12" pos:column="20"/></condition><then pos:line="12" pos:column="20"> <block pos:line="12" pos:column="21">{
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">debugs<pos:position pos:line="13" pos:column="15"/></name><argument_list pos:line="13" pos:column="15">(<argument><expr><literal type="number" pos:line="13" pos:column="16">7<pos:position pos:line="13" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="19">0<pos:position pos:line="13" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="22">"comm_join_mcast_groups: Unknown host"<pos:position pos:line="13" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="62"/></expr_stmt>
        <return pos:line="14" pos:column="9">return;<pos:position pos:line="14" pos:column="16"/></return>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>

    <for pos:line="17" pos:column="5">for <control pos:line="17" pos:column="9">(<init><expr><name pos:line="17" pos:column="10">i<pos:position pos:line="17" pos:column="11"/></name> <operator pos:line="17" pos:column="12">=<pos:position pos:line="17" pos:column="13"/></operator> <literal type="number" pos:line="17" pos:column="14">0<pos:position pos:line="17" pos:column="15"/></literal></expr>;<pos:position pos:line="17" pos:column="16"/></init> <condition><expr><name pos:line="17" pos:column="17">i<pos:position pos:line="17" pos:column="18"/></name> <operator pos:line="17" pos:column="19">&lt;<pos:position pos:line="17" pos:column="23"/></operator> <operator pos:line="17" pos:column="21">(<pos:position pos:line="17" pos:column="22"/></operator><name pos:line="17" pos:column="22">int<pos:position pos:line="17" pos:column="25"/></name><operator pos:line="17" pos:column="25">)<pos:position pos:line="17" pos:column="26"/></operator> <name><name pos:line="17" pos:column="27">ia<pos:position pos:line="17" pos:column="29"/></name><operator pos:line="17" pos:column="29">-&gt;<pos:position pos:line="17" pos:column="34"/></operator><name pos:line="17" pos:column="31">count<pos:position pos:line="17" pos:column="36"/></name></name></expr>;<pos:position pos:line="17" pos:column="37"/></condition> <incr><expr><name pos:line="17" pos:column="38">i<pos:position pos:line="17" pos:column="39"/></name><operator pos:line="17" pos:column="39">++<pos:position pos:line="17" pos:column="41"/></operator></expr></incr>)<pos:position pos:line="17" pos:column="42"/></control> <block pos:line="17" pos:column="43">{
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">debugs<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><literal type="number" pos:line="18" pos:column="16">7<pos:position pos:line="18" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="19">9<pos:position pos:line="18" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="22">"Listening for ICP requests on "<pos:position pos:line="18" pos:column="54"/></literal> <operator pos:line="18" pos:column="55">&lt;&lt;<pos:position pos:line="18" pos:column="63"/></operator> <name><name pos:line="18" pos:column="58">ia<pos:position pos:line="18" pos:column="60"/></name><operator pos:line="18" pos:column="60">-&gt;<pos:position pos:line="18" pos:column="65"/></operator><name pos:line="18" pos:column="62">in_addrs<pos:position pos:line="18" pos:column="70"/></name><index pos:line="18" pos:column="70">[<expr><name pos:line="18" pos:column="71">i<pos:position pos:line="18" pos:column="72"/></name></expr>]<pos:position pos:line="18" pos:column="73"/></index></name></expr></argument> )<pos:position pos:line="18" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="76"/></expr_stmt>

        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">( <expr><operator pos:line="20" pos:column="14">!<pos:position pos:line="20" pos:column="15"/></operator> <name><name pos:line="20" pos:column="16">ia<pos:position pos:line="20" pos:column="18"/></name><operator pos:line="20" pos:column="18">-&gt;<pos:position pos:line="20" pos:column="23"/></operator><name pos:line="20" pos:column="20">in_addrs<pos:position pos:line="20" pos:column="28"/></name><index pos:line="20" pos:column="28">[<expr><name pos:line="20" pos:column="29">i<pos:position pos:line="20" pos:column="30"/></name></expr>]<pos:position pos:line="20" pos:column="31"/></index></name><operator pos:line="20" pos:column="31">.<pos:position pos:line="20" pos:column="32"/></operator><call><name pos:line="20" pos:column="32">IsIPv4<pos:position pos:line="20" pos:column="38"/></name><argument_list pos:line="20" pos:column="38">()<pos:position pos:line="20" pos:column="40"/></argument_list></call></expr> )<pos:position pos:line="20" pos:column="42"/></condition><then pos:line="20" pos:column="42"> <block pos:line="20" pos:column="43">{
            <expr_stmt><expr><call><name pos:line="21" pos:column="13">debugs<pos:position pos:line="21" pos:column="19"/></name><argument_list pos:line="21" pos:column="19">(<argument><expr><literal type="number" pos:line="21" pos:column="20">7<pos:position pos:line="21" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="23">9<pos:position pos:line="21" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="26">"ERROR: IPv6 Multicast Listen has not been implemented!"<pos:position pos:line="21" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="84"/></expr_stmt>
            <continue pos:line="22" pos:column="13">continue;<pos:position pos:line="22" pos:column="22"/></continue>
        }<pos:position pos:line="23" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name><name pos:line="25" pos:column="9">ia<pos:position pos:line="25" pos:column="11"/></name><operator pos:line="25" pos:column="11">-&gt;<pos:position pos:line="25" pos:column="16"/></operator><name pos:line="25" pos:column="13">in_addrs<pos:position pos:line="25" pos:column="21"/></name><index pos:line="25" pos:column="21">[<expr><name pos:line="25" pos:column="22">i<pos:position pos:line="25" pos:column="23"/></name></expr>]<pos:position pos:line="25" pos:column="24"/></index></name><operator pos:line="25" pos:column="24">.<pos:position pos:line="25" pos:column="25"/></operator><call><name pos:line="25" pos:column="25">GetInAddr<pos:position pos:line="25" pos:column="34"/></name><argument_list pos:line="25" pos:column="34">(<argument><expr><name><name pos:line="25" pos:column="35">mr<pos:position pos:line="25" pos:column="37"/></name><operator pos:line="25" pos:column="37">.<pos:position pos:line="25" pos:column="38"/></operator><name pos:line="25" pos:column="38">imr_multiaddr<pos:position pos:line="25" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="53"/></expr_stmt>

        <expr_stmt><expr><name><name pos:line="27" pos:column="9">mr<pos:position pos:line="27" pos:column="11"/></name><operator pos:line="27" pos:column="11">.<pos:position pos:line="27" pos:column="12"/></operator><name pos:line="27" pos:column="12">imr_interface<pos:position pos:line="27" pos:column="25"/></name><operator pos:line="27" pos:column="25">.<pos:position pos:line="27" pos:column="26"/></operator><name pos:line="27" pos:column="26">s_addr<pos:position pos:line="27" pos:column="32"/></name></name> <operator pos:line="27" pos:column="33">=<pos:position pos:line="27" pos:column="34"/></operator> <name pos:line="27" pos:column="35">INADDR_ANY<pos:position pos:line="27" pos:column="45"/></name></expr>;<pos:position pos:line="27" pos:column="46"/></expr_stmt>
        <expr_stmt><expr><name pos:line="28" pos:column="9">x<pos:position pos:line="28" pos:column="10"/></name> <operator pos:line="28" pos:column="11">=<pos:position pos:line="28" pos:column="12"/></operator> <call><name pos:line="28" pos:column="13">setsockopt<pos:position pos:line="28" pos:column="23"/></name><argument_list pos:line="28" pos:column="23">(<argument><expr><name pos:line="28" pos:column="24">fd<pos:position pos:line="28" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="28">IPPROTO_IP<pos:position pos:line="28" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="40">IP_ADD_MEMBERSHIP<pos:position pos:line="28" pos:column="57"/></name></expr></argument>,
                       <argument><expr><operator pos:line="29" pos:column="24">(<pos:position pos:line="29" pos:column="25"/></operator><name pos:line="29" pos:column="25">char<pos:position pos:line="29" pos:column="29"/></name> <operator pos:line="29" pos:column="30">*<pos:position pos:line="29" pos:column="31"/></operator><operator pos:line="29" pos:column="31">)<pos:position pos:line="29" pos:column="32"/></operator> <operator pos:line="29" pos:column="33">&amp;<pos:position pos:line="29" pos:column="38"/></operator><name pos:line="29" pos:column="34">mr<pos:position pos:line="29" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="29" pos:column="38">sizeof<argument_list pos:line="29" pos:column="44">(<argument><expr pos:line="29" pos:column="45">struct <name pos:line="29" pos:column="52">ip_mreq<pos:position pos:line="29" pos:column="59"/></name></expr></argument>)<pos:position pos:line="29" pos:column="60"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="29" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="62"/></expr_stmt>

        <if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><name pos:line="31" pos:column="13">x<pos:position pos:line="31" pos:column="14"/></name> <operator pos:line="31" pos:column="15">&lt;<pos:position pos:line="31" pos:column="19"/></operator> <literal type="number" pos:line="31" pos:column="17">0<pos:position pos:line="31" pos:column="18"/></literal></expr>)<pos:position pos:line="31" pos:column="19"/></condition><then pos:line="31" pos:column="19">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="13">debugs<pos:position pos:line="32" pos:column="19"/></name><argument_list pos:line="32" pos:column="19">(<argument><expr><literal type="number" pos:line="32" pos:column="20">7<pos:position pos:line="32" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="23">1<pos:position pos:line="32" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="26">"comm_join_mcast_groups: FD "<pos:position pos:line="32" pos:column="55"/></literal> <operator pos:line="32" pos:column="56">&lt;&lt;<pos:position pos:line="32" pos:column="64"/></operator> <name pos:line="32" pos:column="59">fd<pos:position pos:line="32" pos:column="61"/></name> <operator pos:line="32" pos:column="62">&lt;&lt;<pos:position pos:line="32" pos:column="70"/></operator> <literal type="string" pos:line="32" pos:column="65">", IP="<pos:position pos:line="32" pos:column="72"/></literal> <operator pos:line="32" pos:column="73">&lt;&lt;<pos:position pos:line="32" pos:column="81"/></operator> <name><name pos:line="32" pos:column="76">ia<pos:position pos:line="32" pos:column="78"/></name><operator pos:line="32" pos:column="78">-&gt;<pos:position pos:line="32" pos:column="83"/></operator><name pos:line="32" pos:column="80">in_addrs<pos:position pos:line="32" pos:column="88"/></name><index pos:line="32" pos:column="88">[<expr><name pos:line="32" pos:column="89">i<pos:position pos:line="32" pos:column="90"/></name></expr>]<pos:position pos:line="32" pos:column="91"/></index></name></expr></argument>)<pos:position pos:line="32" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="93"/></expr_stmt></block></then></if>

        <expr_stmt><expr><name pos:line="34" pos:column="9">x<pos:position pos:line="34" pos:column="10"/></name> <operator pos:line="34" pos:column="11">=<pos:position pos:line="34" pos:column="12"/></operator> <call><name pos:line="34" pos:column="13">setsockopt<pos:position pos:line="34" pos:column="23"/></name><argument_list pos:line="34" pos:column="23">(<argument><expr><name pos:line="34" pos:column="24">fd<pos:position pos:line="34" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="28">IPPROTO_IP<pos:position pos:line="34" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="40">IP_MULTICAST_LOOP<pos:position pos:line="34" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="59">&amp;<pos:position pos:line="34" pos:column="64"/></operator><name pos:line="34" pos:column="60">c<pos:position pos:line="34" pos:column="61"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="63">1<pos:position pos:line="34" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="66"/></expr_stmt>

        <if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><name pos:line="36" pos:column="13">x<pos:position pos:line="36" pos:column="14"/></name> <operator pos:line="36" pos:column="15">&lt;<pos:position pos:line="36" pos:column="19"/></operator> <literal type="number" pos:line="36" pos:column="17">0<pos:position pos:line="36" pos:column="18"/></literal></expr>)<pos:position pos:line="36" pos:column="19"/></condition><then pos:line="36" pos:column="19">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="13">debugs<pos:position pos:line="37" pos:column="19"/></name><argument_list pos:line="37" pos:column="19">(<argument><expr><literal type="number" pos:line="37" pos:column="20">7<pos:position pos:line="37" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="23">1<pos:position pos:line="37" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="26">"Can't disable multicast loopback: "<pos:position pos:line="37" pos:column="62"/></literal> <operator pos:line="37" pos:column="63">&lt;&lt;<pos:position pos:line="37" pos:column="71"/></operator> <call><name pos:line="37" pos:column="66">xstrerror<pos:position pos:line="37" pos:column="75"/></name><argument_list pos:line="37" pos:column="75">()<pos:position pos:line="37" pos:column="77"/></argument_list></call></expr></argument>)<pos:position pos:line="37" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="79"/></expr_stmt></block></then></if>
    }<pos:position pos:line="38" pos:column="6"/></block></for>

<cpp:endif pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">endif<pos:position pos:line="40" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
