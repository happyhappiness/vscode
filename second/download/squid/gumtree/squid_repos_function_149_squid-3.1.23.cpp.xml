<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_149_squid-3.1.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">build_filter<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><name pos:line="2" pos:column="14">char<pos:position pos:line="2" pos:column="18"/></name> <modifier pos:line="2" pos:column="19">*<pos:position pos:line="2" pos:column="20"/></modifier></type><name pos:line="2" pos:column="20">filter<pos:position pos:line="2" pos:column="26"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="28">int<pos:position pos:line="2" pos:column="31"/></name></type> <name pos:line="2" pos:column="32">size<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="38">const<pos:position pos:line="2" pos:column="43"/></specifier> <name pos:line="2" pos:column="44">char<pos:position pos:line="2" pos:column="48"/></name> <modifier pos:line="2" pos:column="49">*<pos:position pos:line="2" pos:column="50"/></modifier><specifier pos:line="2" pos:column="50">template<pos:position pos:line="2" pos:column="58"/></specifier></type></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="60">const<pos:position pos:line="2" pos:column="65"/></specifier> <name pos:line="2" pos:column="66">char<pos:position pos:line="2" pos:column="70"/></name> <modifier pos:line="2" pos:column="71">*<pos:position pos:line="2" pos:column="72"/></modifier></type><name pos:line="2" pos:column="72">user<pos:position pos:line="2" pos:column="76"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="78">const<pos:position pos:line="2" pos:column="83"/></specifier> <name pos:line="2" pos:column="84">char<pos:position pos:line="2" pos:column="88"/></name> <modifier pos:line="2" pos:column="89">*<pos:position pos:line="2" pos:column="90"/></modifier></type><name pos:line="2" pos:column="90">group<pos:position pos:line="2" pos:column="95"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="96"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">n<pos:position pos:line="4" pos:column="10"/></name></decl>;<pos:position pos:line="4" pos:column="11"/></decl_stmt>
    <while pos:line="5" pos:column="5">while <condition pos:line="5" pos:column="11">(<expr><operator pos:line="5" pos:column="12">*<pos:position pos:line="5" pos:column="13"/></operator></expr></condition></while><template pos:line="5" pos:column="13">template <parameter><type><modifier pos:line="5" pos:column="22">&amp;&amp;<pos:position pos:line="5" pos:column="32"/></modifier></type> <name pos:line="5" pos:column="25">size<pos:position pos:line="5" pos:column="29"/></name></parameter> &gt; <expr_stmt><expr><literal type="number" pos:line="5" pos:column="32">0<pos:position pos:line="5" pos:column="33"/></literal></expr></expr_stmt></template>)<pos:position pos:line="5" pos:column="34"/></block> <block pos:line="5" pos:column="35">{
        <switch pos:line="6" pos:column="9">switch <condition pos:line="6" pos:column="16">(<expr><operator pos:line="6" pos:column="17">*<pos:position pos:line="6" pos:column="18"/></operator></expr></condition></switch><template pos:line="6" pos:column="18">template) <block pos:line="6" pos:column="28">{
        <case pos:line="7" pos:column="9">case <expr><literal type="char" pos:line="7" pos:column="14">'%'<pos:position pos:line="7" pos:column="17"/></literal></expr>:<pos:position pos:line="7" pos:column="18"/></case>
            <template pos:line="8" pos:column="13">template++<empty_stmt pos:line="8" pos:column="23">;<pos:position pos:line="8" pos:column="24"/></empty_stmt></template>
            <switch pos:line="9" pos:column="13">switch <condition pos:line="9" pos:column="20">(<expr><operator pos:line="9" pos:column="21">*<pos:position pos:line="9" pos:column="22"/></operator></expr></condition></switch><template pos:line="9" pos:column="22">template) <block pos:line="9" pos:column="32">{
            <case pos:line="10" pos:column="13">case <expr><literal type="char" pos:line="10" pos:column="18">'u'<pos:position pos:line="10" pos:column="21"/></literal></expr>:<pos:position pos:line="10" pos:column="22"/></case>
            <case pos:line="11" pos:column="13">case <expr><literal type="char" pos:line="11" pos:column="18">'v'<pos:position pos:line="11" pos:column="21"/></literal></expr>:<pos:position pos:line="11" pos:column="22"/></case>
                <template pos:line="12" pos:column="17">template++<empty_stmt pos:line="12" pos:column="27">;<pos:position pos:line="12" pos:column="28"/></empty_stmt></template>
                <expr_stmt><expr><name pos:line="13" pos:column="17">n<pos:position pos:line="13" pos:column="18"/></name> <operator pos:line="13" pos:column="19">=<pos:position pos:line="13" pos:column="20"/></operator> <call><name pos:line="13" pos:column="21">ldap_escape_value<pos:position pos:line="13" pos:column="38"/></name><argument_list pos:line="13" pos:column="38">(<argument><expr><name pos:line="13" pos:column="39">filter<pos:position pos:line="13" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="47">size<pos:position pos:line="13" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="53">user<pos:position pos:line="13" pos:column="57"/></name></expr></argument>)<pos:position pos:line="13" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="59"/></expr_stmt>
                <expr_stmt><expr><name pos:line="14" pos:column="17">size<pos:position pos:line="14" pos:column="21"/></name> <operator pos:line="14" pos:column="22">-=<pos:position pos:line="14" pos:column="24"/></operator> <name pos:line="14" pos:column="25">n<pos:position pos:line="14" pos:column="26"/></name></expr>;<pos:position pos:line="14" pos:column="27"/></expr_stmt>
                <expr_stmt><expr><name pos:line="15" pos:column="17">filter<pos:position pos:line="15" pos:column="23"/></name> <operator pos:line="15" pos:column="24">+=<pos:position pos:line="15" pos:column="26"/></operator> <name pos:line="15" pos:column="27">n<pos:position pos:line="15" pos:column="28"/></name></expr>;<pos:position pos:line="15" pos:column="29"/></expr_stmt>
                <break pos:line="16" pos:column="17">break;<pos:position pos:line="16" pos:column="23"/></break>
            <case pos:line="17" pos:column="13">case <expr><literal type="char" pos:line="17" pos:column="18">'g'<pos:position pos:line="17" pos:column="21"/></literal></expr>:<pos:position pos:line="17" pos:column="22"/></case>
            <case pos:line="18" pos:column="13">case <expr><literal type="char" pos:line="18" pos:column="18">'a'<pos:position pos:line="18" pos:column="21"/></literal></expr>:<pos:position pos:line="18" pos:column="22"/></case>
                <template pos:line="19" pos:column="17">template++<empty_stmt pos:line="19" pos:column="27">;<pos:position pos:line="19" pos:column="28"/></empty_stmt></template>
                <expr_stmt><expr><name pos:line="20" pos:column="17">n<pos:position pos:line="20" pos:column="18"/></name> <operator pos:line="20" pos:column="19">=<pos:position pos:line="20" pos:column="20"/></operator> <call><name pos:line="20" pos:column="21">ldap_escape_value<pos:position pos:line="20" pos:column="38"/></name><argument_list pos:line="20" pos:column="38">(<argument><expr><name pos:line="20" pos:column="39">filter<pos:position pos:line="20" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="47">size<pos:position pos:line="20" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="53">group<pos:position pos:line="20" pos:column="58"/></name></expr></argument>)<pos:position pos:line="20" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="60"/></expr_stmt>
                <expr_stmt><expr><name pos:line="21" pos:column="17">size<pos:position pos:line="21" pos:column="21"/></name> <operator pos:line="21" pos:column="22">-=<pos:position pos:line="21" pos:column="24"/></operator> <name pos:line="21" pos:column="25">n<pos:position pos:line="21" pos:column="26"/></name></expr>;<pos:position pos:line="21" pos:column="27"/></expr_stmt>
                <expr_stmt><expr><name pos:line="22" pos:column="17">filter<pos:position pos:line="22" pos:column="23"/></name> <operator pos:line="22" pos:column="24">+=<pos:position pos:line="22" pos:column="26"/></operator> <name pos:line="22" pos:column="27">n<pos:position pos:line="22" pos:column="28"/></name></expr>;<pos:position pos:line="22" pos:column="29"/></expr_stmt>
                <break pos:line="23" pos:column="17">break;<pos:position pos:line="23" pos:column="23"/></break>
            <default pos:line="24" pos:column="13">default:<pos:position pos:line="24" pos:column="21"/></default>
                <macro><name pos:line="25" pos:column="17">fprintf<pos:position pos:line="25" pos:column="24"/></name><argument_list pos:line="25" pos:column="24">(<argument pos:line="25" pos:column="25">stderr<pos:position pos:line="25" pos:column="31"/></argument>, <argument><literal type="string" pos:line="25" pos:column="33">"ERROR: Unknown filter template string %%%c\n"<pos:position pos:line="25" pos:column="79"/></literal></argument>, <argument pos:line="25" pos:column="81">*template<pos:position pos:line="25" pos:column="90"/></argument>)<pos:position pos:line="25" pos:column="91"/></argument_list></macro><empty_stmt pos:line="25" pos:column="91">;<pos:position pos:line="25" pos:column="92"/></empty_stmt>
                <return pos:line="26" pos:column="17">return <expr><literal type="number" pos:line="26" pos:column="24">1<pos:position pos:line="26" pos:column="25"/></literal></expr>;<pos:position pos:line="26" pos:column="26"/></return>
                <break pos:line="27" pos:column="17">break;<pos:position pos:line="27" pos:column="23"/></break>
            }<pos:position pos:line="28" pos:column="14"/></block></template>
            <break pos:line="29" pos:column="13">break;<pos:position pos:line="29" pos:column="19"/></break>
        <case pos:line="30" pos:column="9">case <expr><literal type="char" pos:line="30" pos:column="14">'\\'<pos:position pos:line="30" pos:column="18"/></literal></expr>:<pos:position pos:line="30" pos:column="19"/></case>
            <template pos:line="31" pos:column="13">template++<empty_stmt pos:line="31" pos:column="23">;<pos:position pos:line="31" pos:column="24"/></empty_stmt></template>
            <if pos:line="32" pos:column="13">if <condition pos:line="32" pos:column="16">(<expr><operator pos:line="32" pos:column="17">*<pos:position pos:line="32" pos:column="18"/></operator></expr></condition></if><template pos:line="32" pos:column="18">template) <block pos:line="32" pos:column="28">{
                <expr_stmt><expr><operator pos:line="33" pos:column="17">*<pos:position pos:line="33" pos:column="18"/></operator><name pos:line="33" pos:column="18">filter<pos:position pos:line="33" pos:column="24"/></name><operator pos:line="33" pos:column="24">++<pos:position pos:line="33" pos:column="26"/></operator> <operator pos:line="33" pos:column="27">=<pos:position pos:line="33" pos:column="28"/></operator> <operator pos:line="33" pos:column="29">*<pos:position pos:line="33" pos:column="30"/></operator></expr></expr_stmt><template pos:line="33" pos:column="30">template++<empty_stmt pos:line="33" pos:column="40">;<pos:position pos:line="33" pos:column="41"/></empty_stmt></template>
                <expr_stmt><expr><name pos:line="34" pos:column="17">size<pos:position pos:line="34" pos:column="21"/></name><operator pos:line="34" pos:column="21">--<pos:position pos:line="34" pos:column="23"/></operator></expr>;<pos:position pos:line="34" pos:column="24"/></expr_stmt>
            }<pos:position pos:line="35" pos:column="14"/></block></template>
            <break pos:line="36" pos:column="13">break;<pos:position pos:line="36" pos:column="19"/></break>
        <default pos:line="37" pos:column="9">default:<pos:position pos:line="37" pos:column="17"/></default>
            <expr_stmt><expr><operator pos:line="38" pos:column="13">*<pos:position pos:line="38" pos:column="14"/></operator><name pos:line="38" pos:column="14">filter<pos:position pos:line="38" pos:column="20"/></name><operator pos:line="38" pos:column="20">++<pos:position pos:line="38" pos:column="22"/></operator> <operator pos:line="38" pos:column="23">=<pos:position pos:line="38" pos:column="24"/></operator> <operator pos:line="38" pos:column="25">*<pos:position pos:line="38" pos:column="26"/></operator></expr></expr_stmt><template pos:line="38" pos:column="26">template++<empty_stmt pos:line="38" pos:column="36">;<pos:position pos:line="38" pos:column="37"/></empty_stmt></template>
            <expr_stmt><expr><name pos:line="39" pos:column="13">size<pos:position pos:line="39" pos:column="17"/></name><operator pos:line="39" pos:column="17">--<pos:position pos:line="39" pos:column="19"/></operator></expr>;<pos:position pos:line="39" pos:column="20"/></expr_stmt>
            <break pos:line="40" pos:column="13">break;<pos:position pos:line="40" pos:column="19"/></break>
        }<pos:position pos:line="41" pos:column="10"/></block></template>
    }<pos:position pos:line="42" pos:column="6"/></block></function>
    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><name pos:line="43" pos:column="9">size<pos:position pos:line="43" pos:column="13"/></name> <operator pos:line="43" pos:column="14">&lt;=<pos:position pos:line="43" pos:column="19"/></operator> <literal type="number" pos:line="43" pos:column="17">0<pos:position pos:line="43" pos:column="18"/></literal></expr>)<pos:position pos:line="43" pos:column="19"/></condition><then pos:line="43" pos:column="19"> <block pos:line="43" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="44" pos:column="9">fprintf<pos:position pos:line="44" pos:column="16"/></name><argument_list pos:line="44" pos:column="16">(<argument><expr><name pos:line="44" pos:column="17">stderr<pos:position pos:line="44" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="25">"ERROR: Filter too large\n"<pos:position pos:line="44" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="54"/></expr_stmt>
        <return pos:line="45" pos:column="9">return <expr><literal type="number" pos:line="45" pos:column="16">1<pos:position pos:line="45" pos:column="17"/></literal></expr>;<pos:position pos:line="45" pos:column="18"/></return>
    }<pos:position pos:line="46" pos:column="6"/></block></then></if>
    <expr_stmt><expr><operator pos:line="47" pos:column="5">*<pos:position pos:line="47" pos:column="6"/></operator><name pos:line="47" pos:column="6">filter<pos:position pos:line="47" pos:column="12"/></name> <operator pos:line="47" pos:column="13">=<pos:position pos:line="47" pos:column="14"/></operator> <literal type="char" pos:line="47" pos:column="15">'\0'<pos:position pos:line="47" pos:column="19"/></literal></expr>;<pos:position pos:line="47" pos:column="20"/></expr_stmt>
    <return pos:line="48" pos:column="5">return <expr><literal type="number" pos:line="48" pos:column="12">0<pos:position pos:line="48" pos:column="13"/></literal></expr>;<pos:position pos:line="48" pos:column="14"/></return>
}</unit>
