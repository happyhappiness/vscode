<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4433_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">create_gd<pos:position pos:line="2" pos:column="10"/></name><parameter_list pos:line="2" pos:column="10">(<parameter><decl><type><name><name pos:line="2" pos:column="11">struct<pos:position pos:line="2" pos:column="17"/></name> <name pos:line="2" pos:column="18">main_args<pos:position pos:line="2" pos:column="27"/></name></name> <modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier></type><name pos:line="2" pos:column="29">margs<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="35"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">gp<pos:position pos:line="4" pos:column="13"/></name></decl>, <modifier pos:line="4" pos:column="15">*<pos:position pos:line="4" pos:column="16"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="16">dp<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">p<pos:position pos:line="5" pos:column="12"/></name></decl>;<pos:position pos:line="5" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">struct<pos:position pos:line="6" pos:column="11"/></name> <name pos:line="6" pos:column="12">gdstruct<pos:position pos:line="6" pos:column="20"/></name></name> <modifier pos:line="6" pos:column="21">*<pos:position pos:line="6" pos:column="22"/></modifier></type><name pos:line="6" pos:column="22">gdsp<pos:position pos:line="6" pos:column="26"/></name> <init pos:line="6" pos:column="27">= <expr><name pos:line="6" pos:column="29">NULL<pos:position pos:line="6" pos:column="33"/></name></expr></init></decl>, <modifier pos:line="6" pos:column="35">*<pos:position pos:line="6" pos:column="36"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="36">gdspn<pos:position pos:line="6" pos:column="41"/></name> <init pos:line="6" pos:column="42">= <expr><name pos:line="6" pos:column="44">NULL<pos:position pos:line="6" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="49"/></decl_stmt>
    <comment type="block" pos:line="7" pos:column="5">/*
     *  Group list format:
     *
     *     glist=Pattern1[:Pattern2]
     *
     *     Pattern=Group           Group for all domains(including non Kerberos domains using ldap url options) if no
     *                             other group definition for domain exists or users without
     *                             domain information.
     *                             gdstruct.domain=NULL, gdstruct.group=Group
     *
     *  or Pattern=Group@          Group for all Kerberos domains if no other group definition
     *                             exists
     *                             gdstruct.domain="", gdstruct.group=Group
     *
     *  or Pattern=Group@Domain    Group for a specific Kerberos domain
     *                             gdstruct.domain=Domain, gdstruct.group=Group
     *
     *
     */</comment>
    <decl_stmt><decl><type><name pos:line="26" pos:column="5">char<pos:position pos:line="26" pos:column="9"/></name> <modifier pos:line="26" pos:column="10">*<pos:position pos:line="26" pos:column="11"/></modifier></type><name pos:line="26" pos:column="11">hp1<pos:position pos:line="26" pos:column="14"/></name> <init pos:line="26" pos:column="15">= <expr><call><name pos:line="26" pos:column="17">hex_utf_char<pos:position pos:line="26" pos:column="29"/></name><argument_list pos:line="26" pos:column="29">(<argument><expr><name pos:line="26" pos:column="30">margs<pos:position pos:line="26" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="37">0<pos:position pos:line="26" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="26" pos:column="40"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="27" pos:column="5">char<pos:position pos:line="27" pos:column="9"/></name> <modifier pos:line="27" pos:column="10">*<pos:position pos:line="27" pos:column="11"/></modifier></type><name pos:line="27" pos:column="11">hp2<pos:position pos:line="27" pos:column="14"/></name> <init pos:line="27" pos:column="15">= <expr><call><name pos:line="27" pos:column="17">hex_utf_char<pos:position pos:line="27" pos:column="29"/></name><argument_list pos:line="27" pos:column="29">(<argument><expr><name pos:line="27" pos:column="30">margs<pos:position pos:line="27" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="37">1<pos:position pos:line="27" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="27" pos:column="40"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="28" pos:column="5">char<pos:position pos:line="28" pos:column="9"/></name> <modifier pos:line="28" pos:column="10">*<pos:position pos:line="28" pos:column="11"/></modifier></type><name pos:line="28" pos:column="11">up<pos:position pos:line="28" pos:column="13"/></name> <init pos:line="28" pos:column="14">= <expr><call><name pos:line="28" pos:column="16">utf8dup<pos:position pos:line="28" pos:column="23"/></name><argument_list pos:line="28" pos:column="23">(<argument><expr><name pos:line="28" pos:column="24">margs<pos:position pos:line="28" pos:column="29"/></name></expr></argument>)<pos:position pos:line="28" pos:column="30"/></argument_list></call></expr></init></decl>;<pos:position pos:line="28" pos:column="31"/></decl_stmt>

    <comment type="line" pos:line="30" pos:column="5">// NP: will point to the start of a temporary assembly buffer used by 'p' and 'gp'</comment>
    <comment type="line" pos:line="31" pos:column="5">//     for catenation of the hp1, hp2, and up buffer contents from above.</comment>
    <comment type="line" pos:line="32" pos:column="5">//     necessary for xfree() because both p and gp move over the assembly area</comment>
    <decl_stmt><decl><type><name pos:line="33" pos:column="5">char<pos:position pos:line="33" pos:column="9"/></name> <modifier pos:line="33" pos:column="10">*<pos:position pos:line="33" pos:column="11"/></modifier></type><name pos:line="33" pos:column="11">gpbuf<pos:position pos:line="33" pos:column="16"/></name> <init pos:line="33" pos:column="17">= <expr><name pos:line="33" pos:column="19">NULL<pos:position pos:line="33" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="33" pos:column="24"/></decl_stmt>

    <comment type="line" pos:line="35" pos:column="5">// release the allocated UTF decoding buffers</comment>
<cpp:define pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">define<pos:position pos:line="36" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="36" pos:column="9">cleanup<pos:position pos:line="36" pos:column="16"/></name><parameter_list pos:line="36" pos:column="16">()<pos:position pos:line="36" pos:column="18"/></parameter_list></cpp:macro> <cpp:value pos:line="36" pos:column="19">{ \
    xfree(gpbuf); \
    xfree(hp1); \
    xfree(hp2); \
    xfree(up); \
    free_gd(gdsp); \
 }<pos:position pos:line="42" pos:column="3"/></cpp:value></cpp:define>

    <expr_stmt><expr><name pos:line="44" pos:column="5">p<pos:position pos:line="44" pos:column="6"/></name> <operator pos:line="44" pos:column="7">=<pos:position pos:line="44" pos:column="8"/></operator> <name pos:line="44" pos:column="9">up<pos:position pos:line="44" pos:column="11"/></name></expr>;<pos:position pos:line="44" pos:column="12"/></expr_stmt>
    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><name pos:line="45" pos:column="9">hp1<pos:position pos:line="45" pos:column="12"/></name></expr>)<pos:position pos:line="45" pos:column="13"/></condition><then pos:line="45" pos:column="13"> <block pos:line="45" pos:column="14">{
        <if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><name pos:line="46" pos:column="13">hp2<pos:position pos:line="46" pos:column="16"/></name></expr>)<pos:position pos:line="46" pos:column="17"/></condition><then pos:line="46" pos:column="17"> <block pos:line="46" pos:column="18">{
            <if pos:line="47" pos:column="13">if <condition pos:line="47" pos:column="16">(<expr><name pos:line="47" pos:column="17">up<pos:position pos:line="47" pos:column="19"/></name></expr>)<pos:position pos:line="47" pos:column="20"/></condition><then pos:line="47" pos:column="20"> <block pos:line="47" pos:column="21">{
                <expr_stmt><expr><name pos:line="48" pos:column="17">gpbuf<pos:position pos:line="48" pos:column="22"/></name> <operator pos:line="48" pos:column="23">=<pos:position pos:line="48" pos:column="24"/></operator> <name pos:line="48" pos:column="25">p<pos:position pos:line="48" pos:column="26"/></name> <operator pos:line="48" pos:column="27">=<pos:position pos:line="48" pos:column="28"/></operator> <operator pos:line="48" pos:column="29">(<pos:position pos:line="48" pos:column="30"/></operator><name pos:line="48" pos:column="30">char<pos:position pos:line="48" pos:column="34"/></name> <operator pos:line="48" pos:column="35">*<pos:position pos:line="48" pos:column="36"/></operator><operator pos:line="48" pos:column="36">)<pos:position pos:line="48" pos:column="37"/></operator> <call><name pos:line="48" pos:column="38">xmalloc<pos:position pos:line="48" pos:column="45"/></name><argument_list pos:line="48" pos:column="45">(<argument><expr><call><name pos:line="48" pos:column="46">strlen<pos:position pos:line="48" pos:column="52"/></name><argument_list pos:line="48" pos:column="52">(<argument><expr><name pos:line="48" pos:column="53">up<pos:position pos:line="48" pos:column="55"/></name></expr></argument>)<pos:position pos:line="48" pos:column="56"/></argument_list></call> <operator pos:line="48" pos:column="57">+<pos:position pos:line="48" pos:column="58"/></operator> <call><name pos:line="48" pos:column="59">strlen<pos:position pos:line="48" pos:column="65"/></name><argument_list pos:line="48" pos:column="65">(<argument><expr><name pos:line="48" pos:column="66">hp1<pos:position pos:line="48" pos:column="69"/></name></expr></argument>)<pos:position pos:line="48" pos:column="70"/></argument_list></call> <operator pos:line="48" pos:column="71">+<pos:position pos:line="48" pos:column="72"/></operator> <call><name pos:line="48" pos:column="73">strlen<pos:position pos:line="48" pos:column="79"/></name><argument_list pos:line="48" pos:column="79">(<argument><expr><name pos:line="48" pos:column="80">hp2<pos:position pos:line="48" pos:column="83"/></name></expr></argument>)<pos:position pos:line="48" pos:column="84"/></argument_list></call> <operator pos:line="48" pos:column="85">+<pos:position pos:line="48" pos:column="86"/></operator> <literal type="number" pos:line="48" pos:column="87">2<pos:position pos:line="48" pos:column="88"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="90"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="49" pos:column="17">strcpy<pos:position pos:line="49" pos:column="23"/></name><argument_list pos:line="49" pos:column="23">(<argument><expr><name pos:line="49" pos:column="24">p<pos:position pos:line="49" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="27">up<pos:position pos:line="49" pos:column="29"/></name></expr></argument>)<pos:position pos:line="49" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="31"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="50" pos:column="17">strcat<pos:position pos:line="50" pos:column="23"/></name><argument_list pos:line="50" pos:column="23">(<argument><expr><name pos:line="50" pos:column="24">p<pos:position pos:line="50" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="27">":"<pos:position pos:line="50" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="32"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="51" pos:column="17">strcat<pos:position pos:line="51" pos:column="23"/></name><argument_list pos:line="51" pos:column="23">(<argument><expr><name pos:line="51" pos:column="24">p<pos:position pos:line="51" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="27">hp1<pos:position pos:line="51" pos:column="30"/></name></expr></argument>)<pos:position pos:line="51" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="32"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="52" pos:column="17">strcat<pos:position pos:line="52" pos:column="23"/></name><argument_list pos:line="52" pos:column="23">(<argument><expr><name pos:line="52" pos:column="24">p<pos:position pos:line="52" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="27">":"<pos:position pos:line="52" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="32"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="53" pos:column="17">strcat<pos:position pos:line="53" pos:column="23"/></name><argument_list pos:line="53" pos:column="23">(<argument><expr><name pos:line="53" pos:column="24">p<pos:position pos:line="53" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="27">hp2<pos:position pos:line="53" pos:column="30"/></name></expr></argument>)<pos:position pos:line="53" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="32"/></expr_stmt>
            }<pos:position pos:line="54" pos:column="14"/></block></then> <else pos:line="54" pos:column="15">else <block pos:line="54" pos:column="20">{
                <expr_stmt><expr><name pos:line="55" pos:column="17">gpbuf<pos:position pos:line="55" pos:column="22"/></name> <operator pos:line="55" pos:column="23">=<pos:position pos:line="55" pos:column="24"/></operator> <name pos:line="55" pos:column="25">p<pos:position pos:line="55" pos:column="26"/></name> <operator pos:line="55" pos:column="27">=<pos:position pos:line="55" pos:column="28"/></operator> <operator pos:line="55" pos:column="29">(<pos:position pos:line="55" pos:column="30"/></operator><name pos:line="55" pos:column="30">char<pos:position pos:line="55" pos:column="34"/></name> <operator pos:line="55" pos:column="35">*<pos:position pos:line="55" pos:column="36"/></operator><operator pos:line="55" pos:column="36">)<pos:position pos:line="55" pos:column="37"/></operator> <call><name pos:line="55" pos:column="38">xmalloc<pos:position pos:line="55" pos:column="45"/></name><argument_list pos:line="55" pos:column="45">(<argument><expr><call><name pos:line="55" pos:column="46">strlen<pos:position pos:line="55" pos:column="52"/></name><argument_list pos:line="55" pos:column="52">(<argument><expr><name pos:line="55" pos:column="53">hp1<pos:position pos:line="55" pos:column="56"/></name></expr></argument>)<pos:position pos:line="55" pos:column="57"/></argument_list></call> <operator pos:line="55" pos:column="58">+<pos:position pos:line="55" pos:column="59"/></operator> <call><name pos:line="55" pos:column="60">strlen<pos:position pos:line="55" pos:column="66"/></name><argument_list pos:line="55" pos:column="66">(<argument><expr><name pos:line="55" pos:column="67">hp2<pos:position pos:line="55" pos:column="70"/></name></expr></argument>)<pos:position pos:line="55" pos:column="71"/></argument_list></call> <operator pos:line="55" pos:column="72">+<pos:position pos:line="55" pos:column="73"/></operator> <literal type="number" pos:line="55" pos:column="74">1<pos:position pos:line="55" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="77"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="56" pos:column="17">strcpy<pos:position pos:line="56" pos:column="23"/></name><argument_list pos:line="56" pos:column="23">(<argument><expr><name pos:line="56" pos:column="24">p<pos:position pos:line="56" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="27">hp1<pos:position pos:line="56" pos:column="30"/></name></expr></argument>)<pos:position pos:line="56" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="32"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="57" pos:column="17">strcat<pos:position pos:line="57" pos:column="23"/></name><argument_list pos:line="57" pos:column="23">(<argument><expr><name pos:line="57" pos:column="24">p<pos:position pos:line="57" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="27">":"<pos:position pos:line="57" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="32"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="58" pos:column="17">strcat<pos:position pos:line="58" pos:column="23"/></name><argument_list pos:line="58" pos:column="23">(<argument><expr><name pos:line="58" pos:column="24">p<pos:position pos:line="58" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="27">hp2<pos:position pos:line="58" pos:column="30"/></name></expr></argument>)<pos:position pos:line="58" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="32"/></expr_stmt>
            }<pos:position pos:line="59" pos:column="14"/></block></else></if>
        }<pos:position pos:line="60" pos:column="10"/></block></then> <else pos:line="60" pos:column="11">else <block pos:line="60" pos:column="16">{
            <if pos:line="61" pos:column="13">if <condition pos:line="61" pos:column="16">(<expr><name pos:line="61" pos:column="17">up<pos:position pos:line="61" pos:column="19"/></name></expr>)<pos:position pos:line="61" pos:column="20"/></condition><then pos:line="61" pos:column="20"> <block pos:line="61" pos:column="21">{
                <expr_stmt><expr><name pos:line="62" pos:column="17">gpbuf<pos:position pos:line="62" pos:column="22"/></name> <operator pos:line="62" pos:column="23">=<pos:position pos:line="62" pos:column="24"/></operator> <name pos:line="62" pos:column="25">p<pos:position pos:line="62" pos:column="26"/></name> <operator pos:line="62" pos:column="27">=<pos:position pos:line="62" pos:column="28"/></operator> <operator pos:line="62" pos:column="29">(<pos:position pos:line="62" pos:column="30"/></operator><name pos:line="62" pos:column="30">char<pos:position pos:line="62" pos:column="34"/></name> <operator pos:line="62" pos:column="35">*<pos:position pos:line="62" pos:column="36"/></operator><operator pos:line="62" pos:column="36">)<pos:position pos:line="62" pos:column="37"/></operator> <call><name pos:line="62" pos:column="38">xmalloc<pos:position pos:line="62" pos:column="45"/></name><argument_list pos:line="62" pos:column="45">(<argument><expr><call><name pos:line="62" pos:column="46">strlen<pos:position pos:line="62" pos:column="52"/></name><argument_list pos:line="62" pos:column="52">(<argument><expr><name pos:line="62" pos:column="53">up<pos:position pos:line="62" pos:column="55"/></name></expr></argument>)<pos:position pos:line="62" pos:column="56"/></argument_list></call> <operator pos:line="62" pos:column="57">+<pos:position pos:line="62" pos:column="58"/></operator> <call><name pos:line="62" pos:column="59">strlen<pos:position pos:line="62" pos:column="65"/></name><argument_list pos:line="62" pos:column="65">(<argument><expr><name pos:line="62" pos:column="66">hp1<pos:position pos:line="62" pos:column="69"/></name></expr></argument>)<pos:position pos:line="62" pos:column="70"/></argument_list></call> <operator pos:line="62" pos:column="71">+<pos:position pos:line="62" pos:column="72"/></operator> <literal type="number" pos:line="62" pos:column="73">1<pos:position pos:line="62" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="76"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="63" pos:column="17">strcpy<pos:position pos:line="63" pos:column="23"/></name><argument_list pos:line="63" pos:column="23">(<argument><expr><name pos:line="63" pos:column="24">p<pos:position pos:line="63" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="27">up<pos:position pos:line="63" pos:column="29"/></name></expr></argument>)<pos:position pos:line="63" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="31"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="64" pos:column="17">strcat<pos:position pos:line="64" pos:column="23"/></name><argument_list pos:line="64" pos:column="23">(<argument><expr><name pos:line="64" pos:column="24">p<pos:position pos:line="64" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="27">":"<pos:position pos:line="64" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="32"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="65" pos:column="17">strcat<pos:position pos:line="65" pos:column="23"/></name><argument_list pos:line="65" pos:column="23">(<argument><expr><name pos:line="65" pos:column="24">p<pos:position pos:line="65" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="27">hp1<pos:position pos:line="65" pos:column="30"/></name></expr></argument>)<pos:position pos:line="65" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="32"/></expr_stmt>
            }<pos:position pos:line="66" pos:column="14"/></block></then> <else pos:line="66" pos:column="15">else
                <block type="pseudo"><expr_stmt><expr><name pos:line="67" pos:column="17">p<pos:position pos:line="67" pos:column="18"/></name> <operator pos:line="67" pos:column="19">=<pos:position pos:line="67" pos:column="20"/></operator> <name pos:line="67" pos:column="21">hp1<pos:position pos:line="67" pos:column="24"/></name></expr>;<pos:position pos:line="67" pos:column="25"/></expr_stmt></block></else></if>
        }<pos:position pos:line="68" pos:column="10"/></block></else></if>
    }<pos:position pos:line="69" pos:column="6"/></block></then> <else pos:line="69" pos:column="7">else <block pos:line="69" pos:column="12">{
        <if pos:line="70" pos:column="9">if <condition pos:line="70" pos:column="12">(<expr><name pos:line="70" pos:column="13">hp2<pos:position pos:line="70" pos:column="16"/></name></expr>)<pos:position pos:line="70" pos:column="17"/></condition><then pos:line="70" pos:column="17"> <block pos:line="70" pos:column="18">{
            <if pos:line="71" pos:column="13">if <condition pos:line="71" pos:column="16">(<expr><name pos:line="71" pos:column="17">up<pos:position pos:line="71" pos:column="19"/></name></expr>)<pos:position pos:line="71" pos:column="20"/></condition><then pos:line="71" pos:column="20"> <block pos:line="71" pos:column="21">{
                <expr_stmt><expr><name pos:line="72" pos:column="17">gpbuf<pos:position pos:line="72" pos:column="22"/></name> <operator pos:line="72" pos:column="23">=<pos:position pos:line="72" pos:column="24"/></operator> <name pos:line="72" pos:column="25">p<pos:position pos:line="72" pos:column="26"/></name> <operator pos:line="72" pos:column="27">=<pos:position pos:line="72" pos:column="28"/></operator> <operator pos:line="72" pos:column="29">(<pos:position pos:line="72" pos:column="30"/></operator><name pos:line="72" pos:column="30">char<pos:position pos:line="72" pos:column="34"/></name> <operator pos:line="72" pos:column="35">*<pos:position pos:line="72" pos:column="36"/></operator><operator pos:line="72" pos:column="36">)<pos:position pos:line="72" pos:column="37"/></operator> <call><name pos:line="72" pos:column="38">xmalloc<pos:position pos:line="72" pos:column="45"/></name><argument_list pos:line="72" pos:column="45">(<argument><expr><call><name pos:line="72" pos:column="46">strlen<pos:position pos:line="72" pos:column="52"/></name><argument_list pos:line="72" pos:column="52">(<argument><expr><name pos:line="72" pos:column="53">up<pos:position pos:line="72" pos:column="55"/></name></expr></argument>)<pos:position pos:line="72" pos:column="56"/></argument_list></call> <operator pos:line="72" pos:column="57">+<pos:position pos:line="72" pos:column="58"/></operator> <call><name pos:line="72" pos:column="59">strlen<pos:position pos:line="72" pos:column="65"/></name><argument_list pos:line="72" pos:column="65">(<argument><expr><name pos:line="72" pos:column="66">hp2<pos:position pos:line="72" pos:column="69"/></name></expr></argument>)<pos:position pos:line="72" pos:column="70"/></argument_list></call> <operator pos:line="72" pos:column="71">+<pos:position pos:line="72" pos:column="72"/></operator> <literal type="number" pos:line="72" pos:column="73">1<pos:position pos:line="72" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="76"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="73" pos:column="17">strcpy<pos:position pos:line="73" pos:column="23"/></name><argument_list pos:line="73" pos:column="23">(<argument><expr><name pos:line="73" pos:column="24">p<pos:position pos:line="73" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="27">up<pos:position pos:line="73" pos:column="29"/></name></expr></argument>)<pos:position pos:line="73" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="31"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="74" pos:column="17">strcat<pos:position pos:line="74" pos:column="23"/></name><argument_list pos:line="74" pos:column="23">(<argument><expr><name pos:line="74" pos:column="24">p<pos:position pos:line="74" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="74" pos:column="27">":"<pos:position pos:line="74" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="32"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="75" pos:column="17">strcat<pos:position pos:line="75" pos:column="23"/></name><argument_list pos:line="75" pos:column="23">(<argument><expr><name pos:line="75" pos:column="24">p<pos:position pos:line="75" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="27">hp2<pos:position pos:line="75" pos:column="30"/></name></expr></argument>)<pos:position pos:line="75" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="32"/></expr_stmt>
            }<pos:position pos:line="76" pos:column="14"/></block></then> <else pos:line="76" pos:column="15">else
                <block type="pseudo"><expr_stmt><expr><name pos:line="77" pos:column="17">p<pos:position pos:line="77" pos:column="18"/></name> <operator pos:line="77" pos:column="19">=<pos:position pos:line="77" pos:column="20"/></operator> <name pos:line="77" pos:column="21">hp2<pos:position pos:line="77" pos:column="24"/></name></expr>;<pos:position pos:line="77" pos:column="25"/></expr_stmt></block></else></if>
        }<pos:position pos:line="78" pos:column="10"/></block></then> <else pos:line="78" pos:column="11">else
            <block type="pseudo"><expr_stmt><expr><name pos:line="79" pos:column="13">p<pos:position pos:line="79" pos:column="14"/></name> <operator pos:line="79" pos:column="15">=<pos:position pos:line="79" pos:column="16"/></operator> <name pos:line="79" pos:column="17">up<pos:position pos:line="79" pos:column="19"/></name></expr>;<pos:position pos:line="79" pos:column="20"/></expr_stmt></block></else></if>
    }<pos:position pos:line="80" pos:column="6"/></block></else></if>
    <expr_stmt><expr><name pos:line="81" pos:column="5">gp<pos:position pos:line="81" pos:column="7"/></name> <operator pos:line="81" pos:column="8">=<pos:position pos:line="81" pos:column="9"/></operator> <name pos:line="81" pos:column="10">p<pos:position pos:line="81" pos:column="11"/></name></expr>;<pos:position pos:line="81" pos:column="12"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="82" pos:column="5">debug<pos:position pos:line="82" pos:column="10"/></name><argument_list pos:line="82" pos:column="10">(<argument><expr><operator pos:line="82" pos:column="11">(<pos:position pos:line="82" pos:column="12"/></operator><name pos:line="82" pos:column="12">char<pos:position pos:line="82" pos:column="16"/></name> <operator pos:line="82" pos:column="17">*<pos:position pos:line="82" pos:column="18"/></operator><operator pos:line="82" pos:column="18">)<pos:position pos:line="82" pos:column="19"/></operator> <literal type="string" pos:line="82" pos:column="20">"%s| %s: INFO: Group list %s\n"<pos:position pos:line="82" pos:column="51"/></literal></expr></argument>, <argument><expr><call><name pos:line="82" pos:column="53">LogTime<pos:position pos:line="82" pos:column="60"/></name><argument_list pos:line="82" pos:column="60">()<pos:position pos:line="82" pos:column="62"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="82" pos:column="64">PROGRAM<pos:position pos:line="82" pos:column="71"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="82" pos:column="73">p<pos:position pos:line="82" pos:column="74"/></name></expr> ?<pos:position pos:line="82" pos:column="76"/></condition><then pos:line="82" pos:column="76"> <expr><name pos:line="82" pos:column="77">p<pos:position pos:line="82" pos:column="78"/></name></expr> <pos:position pos:line="82" pos:column="79"/></then><else pos:line="82" pos:column="79">: <expr><literal type="string" pos:line="82" pos:column="81">"NULL"<pos:position pos:line="82" pos:column="87"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="82" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="89"/></expr_stmt>
    <expr_stmt><expr><name pos:line="83" pos:column="5">dp<pos:position pos:line="83" pos:column="7"/></name> <operator pos:line="83" pos:column="8">=<pos:position pos:line="83" pos:column="9"/></operator> <name pos:line="83" pos:column="10">NULL<pos:position pos:line="83" pos:column="14"/></name></expr>;<pos:position pos:line="83" pos:column="15"/></expr_stmt>

    <if pos:line="85" pos:column="5">if <condition pos:line="85" pos:column="8">(<expr><operator pos:line="85" pos:column="9">!<pos:position pos:line="85" pos:column="10"/></operator><name pos:line="85" pos:column="10">p<pos:position pos:line="85" pos:column="11"/></name></expr>)<pos:position pos:line="85" pos:column="12"/></condition><then pos:line="85" pos:column="12"> <block pos:line="85" pos:column="13">{
        <expr_stmt><expr><call><name pos:line="86" pos:column="9">debug<pos:position pos:line="86" pos:column="14"/></name><argument_list pos:line="86" pos:column="14">(<argument><expr><operator pos:line="86" pos:column="15">(<pos:position pos:line="86" pos:column="16"/></operator><name pos:line="86" pos:column="16">char<pos:position pos:line="86" pos:column="20"/></name> <operator pos:line="86" pos:column="21">*<pos:position pos:line="86" pos:column="22"/></operator><operator pos:line="86" pos:column="22">)<pos:position pos:line="86" pos:column="23"/></operator> <literal type="string" pos:line="86" pos:column="24">"%s| %s: ERROR: No groups defined.\n"<pos:position pos:line="86" pos:column="61"/></literal></expr></argument>, <argument><expr><call><name pos:line="86" pos:column="63">LogTime<pos:position pos:line="86" pos:column="70"/></name><argument_list pos:line="86" pos:column="70">()<pos:position pos:line="86" pos:column="72"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="86" pos:column="74">PROGRAM<pos:position pos:line="86" pos:column="81"/></name></expr></argument>)<pos:position pos:line="86" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="83"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="87" pos:column="9">cleanup<pos:position pos:line="87" pos:column="16"/></name><argument_list pos:line="87" pos:column="16">()<pos:position pos:line="87" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="19"/></expr_stmt>
        <return pos:line="88" pos:column="9">return <expr><operator pos:line="88" pos:column="16">(<pos:position pos:line="88" pos:column="17"/></operator><literal type="number" pos:line="88" pos:column="17">1<pos:position pos:line="88" pos:column="18"/></literal><operator pos:line="88" pos:column="18">)<pos:position pos:line="88" pos:column="19"/></operator></expr>;<pos:position pos:line="88" pos:column="20"/></return>
    }<pos:position pos:line="89" pos:column="6"/></block></then></if>
    <while pos:line="90" pos:column="5">while <condition pos:line="90" pos:column="11">(<expr><operator pos:line="90" pos:column="12">*<pos:position pos:line="90" pos:column="13"/></operator><name pos:line="90" pos:column="13">p<pos:position pos:line="90" pos:column="14"/></name></expr>)<pos:position pos:line="90" pos:column="15"/></condition> <block pos:line="90" pos:column="16">{        <comment type="block" pos:line="90" pos:column="25">/* loop over group list */</comment>
        <if pos:line="91" pos:column="9">if <condition pos:line="91" pos:column="12">(<expr><operator pos:line="91" pos:column="13">*<pos:position pos:line="91" pos:column="14"/></operator><name pos:line="91" pos:column="14">p<pos:position pos:line="91" pos:column="15"/></name> <operator pos:line="91" pos:column="16">==<pos:position pos:line="91" pos:column="18"/></operator> <literal type="char" pos:line="91" pos:column="19">'\n'<pos:position pos:line="91" pos:column="23"/></literal> <operator pos:line="91" pos:column="24">||<pos:position pos:line="91" pos:column="26"/></operator> <operator pos:line="91" pos:column="27">*<pos:position pos:line="91" pos:column="28"/></operator><name pos:line="91" pos:column="28">p<pos:position pos:line="91" pos:column="29"/></name> <operator pos:line="91" pos:column="30">==<pos:position pos:line="91" pos:column="32"/></operator> <literal type="char" pos:line="91" pos:column="33">'\r'<pos:position pos:line="91" pos:column="37"/></literal></expr>)<pos:position pos:line="91" pos:column="38"/></condition><then pos:line="91" pos:column="38"> <block pos:line="91" pos:column="39">{     <comment type="block" pos:line="91" pos:column="45">/* Ignore CR and LF if exist */</comment>
            <expr_stmt><expr><operator pos:line="92" pos:column="13">++<pos:position pos:line="92" pos:column="15"/></operator><name pos:line="92" pos:column="15">p<pos:position pos:line="92" pos:column="16"/></name></expr>;<pos:position pos:line="92" pos:column="17"/></expr_stmt>
            <continue pos:line="93" pos:column="13">continue;<pos:position pos:line="93" pos:column="22"/></continue>
        }<pos:position pos:line="94" pos:column="10"/></block></then></if>
        <if pos:line="95" pos:column="9">if <condition pos:line="95" pos:column="12">(<expr><operator pos:line="95" pos:column="13">*<pos:position pos:line="95" pos:column="14"/></operator><name pos:line="95" pos:column="14">p<pos:position pos:line="95" pos:column="15"/></name> <operator pos:line="95" pos:column="16">==<pos:position pos:line="95" pos:column="18"/></operator> <literal type="char" pos:line="95" pos:column="19">'@'<pos:position pos:line="95" pos:column="22"/></literal></expr>)<pos:position pos:line="95" pos:column="23"/></condition><then pos:line="95" pos:column="23"> <block pos:line="95" pos:column="24">{    <comment type="block" pos:line="95" pos:column="29">/* end of group name - start of domain name */</comment>
            <if pos:line="96" pos:column="13">if <condition pos:line="96" pos:column="16">(<expr><name pos:line="96" pos:column="17">p<pos:position pos:line="96" pos:column="18"/></name> <operator pos:line="96" pos:column="19">==<pos:position pos:line="96" pos:column="21"/></operator> <name pos:line="96" pos:column="22">gp<pos:position pos:line="96" pos:column="24"/></name></expr>)<pos:position pos:line="96" pos:column="25"/></condition><then pos:line="96" pos:column="25"> <block pos:line="96" pos:column="26">{  <comment type="block" pos:line="96" pos:column="29">/* empty group name not allowed */</comment>
                <expr_stmt><expr><call><name pos:line="97" pos:column="17">debug<pos:position pos:line="97" pos:column="22"/></name><argument_list pos:line="97" pos:column="22">(<argument><expr><operator pos:line="97" pos:column="23">(<pos:position pos:line="97" pos:column="24"/></operator><name pos:line="97" pos:column="24">char<pos:position pos:line="97" pos:column="28"/></name> <operator pos:line="97" pos:column="29">*<pos:position pos:line="97" pos:column="30"/></operator><operator pos:line="97" pos:column="30">)<pos:position pos:line="97" pos:column="31"/></operator> <literal type="string" pos:line="97" pos:column="32">"%s| %s: ERROR: No group defined for domain %s\n"<pos:position pos:line="97" pos:column="81"/></literal></expr></argument>, <argument><expr><call><name pos:line="97" pos:column="83">LogTime<pos:position pos:line="97" pos:column="90"/></name><argument_list pos:line="97" pos:column="90">()<pos:position pos:line="97" pos:column="92"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="97" pos:column="94">PROGRAM<pos:position pos:line="97" pos:column="101"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="103">p<pos:position pos:line="97" pos:column="104"/></name></expr></argument>)<pos:position pos:line="97" pos:column="105"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="106"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="98" pos:column="17">cleanup<pos:position pos:line="98" pos:column="24"/></name><argument_list pos:line="98" pos:column="24">()<pos:position pos:line="98" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="27"/></expr_stmt>
                <return pos:line="99" pos:column="17">return <expr><operator pos:line="99" pos:column="24">(<pos:position pos:line="99" pos:column="25"/></operator><literal type="number" pos:line="99" pos:column="25">1<pos:position pos:line="99" pos:column="26"/></literal><operator pos:line="99" pos:column="26">)<pos:position pos:line="99" pos:column="27"/></operator></expr>;<pos:position pos:line="99" pos:column="28"/></return>
            }<pos:position pos:line="100" pos:column="14"/></block></then></if>
            <if pos:line="101" pos:column="13">if <condition pos:line="101" pos:column="16">(<expr><name pos:line="101" pos:column="17">dp<pos:position pos:line="101" pos:column="19"/></name></expr>)<pos:position pos:line="101" pos:column="20"/></condition><then pos:line="101" pos:column="20"> <block pos:line="101" pos:column="21">{  <comment type="block" pos:line="101" pos:column="24">/* end of domain name - twice */</comment>
                <expr_stmt><expr><call><name pos:line="102" pos:column="17">debug<pos:position pos:line="102" pos:column="22"/></name><argument_list pos:line="102" pos:column="22">(<argument><expr><operator pos:line="102" pos:column="23">(<pos:position pos:line="102" pos:column="24"/></operator><name pos:line="102" pos:column="24">char<pos:position pos:line="102" pos:column="28"/></name> <operator pos:line="102" pos:column="29">*<pos:position pos:line="102" pos:column="30"/></operator><operator pos:line="102" pos:column="30">)<pos:position pos:line="102" pos:column="31"/></operator> <literal type="string" pos:line="102" pos:column="32">"%s| %s: @ is not allowed in group name %s@%s\n"<pos:position pos:line="102" pos:column="80"/></literal></expr></argument>,<argument><expr><call><name pos:line="102" pos:column="81">LogTime<pos:position pos:line="102" pos:column="88"/></name><argument_list pos:line="102" pos:column="88">()<pos:position pos:line="102" pos:column="90"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="102" pos:column="92">PROGRAM<pos:position pos:line="102" pos:column="99"/></name></expr></argument>,<argument><expr><name pos:line="102" pos:column="100">gp<pos:position pos:line="102" pos:column="102"/></name></expr></argument>,<argument><expr><name pos:line="102" pos:column="103">dp<pos:position pos:line="102" pos:column="105"/></name></expr></argument>)<pos:position pos:line="102" pos:column="106"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="107"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="103" pos:column="17">cleanup<pos:position pos:line="103" pos:column="24"/></name><argument_list pos:line="103" pos:column="24">()<pos:position pos:line="103" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="27"/></expr_stmt>
                <return pos:line="104" pos:column="17">return<expr><operator pos:line="104" pos:column="23">(<pos:position pos:line="104" pos:column="24"/></operator><literal type="number" pos:line="104" pos:column="24">1<pos:position pos:line="104" pos:column="25"/></literal><operator pos:line="104" pos:column="25">)<pos:position pos:line="104" pos:column="26"/></operator></expr>;<pos:position pos:line="104" pos:column="27"/></return>
            }<pos:position pos:line="105" pos:column="14"/></block></then></if>
            <expr_stmt><expr><operator pos:line="106" pos:column="13">*<pos:position pos:line="106" pos:column="14"/></operator><name pos:line="106" pos:column="14">p<pos:position pos:line="106" pos:column="15"/></name> <operator pos:line="106" pos:column="16">=<pos:position pos:line="106" pos:column="17"/></operator> <literal type="char" pos:line="106" pos:column="18">'\0'<pos:position pos:line="106" pos:column="22"/></literal></expr>;<pos:position pos:line="106" pos:column="23"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="107" pos:column="13">++<pos:position pos:line="107" pos:column="15"/></operator><name pos:line="107" pos:column="15">p<pos:position pos:line="107" pos:column="16"/></name></expr>;<pos:position pos:line="107" pos:column="17"/></expr_stmt>
            <expr_stmt><expr><name pos:line="108" pos:column="13">gdsp<pos:position pos:line="108" pos:column="17"/></name> <operator pos:line="108" pos:column="18">=<pos:position pos:line="108" pos:column="19"/></operator> <call><name pos:line="108" pos:column="20">init_gd<pos:position pos:line="108" pos:column="27"/></name><argument_list pos:line="108" pos:column="27">()<pos:position pos:line="108" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="30"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="109" pos:column="13">gdsp<pos:position pos:line="109" pos:column="17"/></name><operator pos:line="109" pos:column="17">-&gt;<pos:position pos:line="109" pos:column="22"/></operator><name pos:line="109" pos:column="19">group<pos:position pos:line="109" pos:column="24"/></name></name> <operator pos:line="109" pos:column="25">=<pos:position pos:line="109" pos:column="26"/></operator> <call><name pos:line="109" pos:column="27">xstrdup<pos:position pos:line="109" pos:column="34"/></name><argument_list pos:line="109" pos:column="34">(<argument><expr><name pos:line="109" pos:column="35">gp<pos:position pos:line="109" pos:column="37"/></name></expr></argument>)<pos:position pos:line="109" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="39"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="110" pos:column="13">gdsp<pos:position pos:line="110" pos:column="17"/></name><operator pos:line="110" pos:column="17">-&gt;<pos:position pos:line="110" pos:column="22"/></operator><name pos:line="110" pos:column="19">next<pos:position pos:line="110" pos:column="23"/></name></name> <operator pos:line="110" pos:column="24">=<pos:position pos:line="110" pos:column="25"/></operator> <name pos:line="110" pos:column="26">gdspn<pos:position pos:line="110" pos:column="31"/></name></expr>;<pos:position pos:line="110" pos:column="32"/></expr_stmt>
            <expr_stmt><expr><name pos:line="111" pos:column="13">dp<pos:position pos:line="111" pos:column="15"/></name> <operator pos:line="111" pos:column="16">=<pos:position pos:line="111" pos:column="17"/></operator> <name pos:line="111" pos:column="18">p<pos:position pos:line="111" pos:column="19"/></name></expr>;<pos:position pos:line="111" pos:column="20"/></expr_stmt>     <comment type="block" pos:line="111" pos:column="25">/* after @ starts new domain name */</comment>
        }<pos:position pos:line="112" pos:column="10"/></block></then> <elseif pos:line="112" pos:column="11">else <if pos:line="112" pos:column="16">if <condition pos:line="112" pos:column="19">(<expr><operator pos:line="112" pos:column="20">*<pos:position pos:line="112" pos:column="21"/></operator><name pos:line="112" pos:column="21">p<pos:position pos:line="112" pos:column="22"/></name> <operator pos:line="112" pos:column="23">==<pos:position pos:line="112" pos:column="25"/></operator> <literal type="char" pos:line="112" pos:column="26">':'<pos:position pos:line="112" pos:column="29"/></literal></expr>)<pos:position pos:line="112" pos:column="30"/></condition><then pos:line="112" pos:column="30"> <block pos:line="112" pos:column="31">{ <comment type="block" pos:line="112" pos:column="33">/* end of group name or end of domain name */</comment>
            <if pos:line="113" pos:column="13">if <condition pos:line="113" pos:column="16">(<expr><name pos:line="113" pos:column="17">p<pos:position pos:line="113" pos:column="18"/></name> <operator pos:line="113" pos:column="19">==<pos:position pos:line="113" pos:column="21"/></operator> <name pos:line="113" pos:column="22">gp<pos:position pos:line="113" pos:column="24"/></name></expr>)<pos:position pos:line="113" pos:column="25"/></condition><then pos:line="113" pos:column="25"> <block pos:line="113" pos:column="26">{  <comment type="block" pos:line="113" pos:column="29">/* empty group name not allowed */</comment>
                <expr_stmt><expr><call><name pos:line="114" pos:column="17">debug<pos:position pos:line="114" pos:column="22"/></name><argument_list pos:line="114" pos:column="22">(<argument><expr><operator pos:line="114" pos:column="23">(<pos:position pos:line="114" pos:column="24"/></operator><name pos:line="114" pos:column="24">char<pos:position pos:line="114" pos:column="28"/></name> <operator pos:line="114" pos:column="29">*<pos:position pos:line="114" pos:column="30"/></operator><operator pos:line="114" pos:column="30">)<pos:position pos:line="114" pos:column="31"/></operator> <literal type="string" pos:line="114" pos:column="32">"%s| %s: ERROR: No group defined for domain %s\n"<pos:position pos:line="114" pos:column="81"/></literal></expr></argument>, <argument><expr><call><name pos:line="114" pos:column="83">LogTime<pos:position pos:line="114" pos:column="90"/></name><argument_list pos:line="114" pos:column="90">()<pos:position pos:line="114" pos:column="92"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="114" pos:column="94">PROGRAM<pos:position pos:line="114" pos:column="101"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="103">p<pos:position pos:line="114" pos:column="104"/></name></expr></argument>)<pos:position pos:line="114" pos:column="105"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="106"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="115" pos:column="17">cleanup<pos:position pos:line="115" pos:column="24"/></name><argument_list pos:line="115" pos:column="24">()<pos:position pos:line="115" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="27"/></expr_stmt>
                <return pos:line="116" pos:column="17">return <expr><operator pos:line="116" pos:column="24">(<pos:position pos:line="116" pos:column="25"/></operator><literal type="number" pos:line="116" pos:column="25">1<pos:position pos:line="116" pos:column="26"/></literal><operator pos:line="116" pos:column="26">)<pos:position pos:line="116" pos:column="27"/></operator></expr>;<pos:position pos:line="116" pos:column="28"/></return>
            }<pos:position pos:line="117" pos:column="14"/></block></then></if>
            <expr_stmt><expr><operator pos:line="118" pos:column="13">*<pos:position pos:line="118" pos:column="14"/></operator><name pos:line="118" pos:column="14">p<pos:position pos:line="118" pos:column="15"/></name> <operator pos:line="118" pos:column="16">=<pos:position pos:line="118" pos:column="17"/></operator> <literal type="char" pos:line="118" pos:column="18">'\0'<pos:position pos:line="118" pos:column="22"/></literal></expr>;<pos:position pos:line="118" pos:column="23"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="119" pos:column="13">++<pos:position pos:line="119" pos:column="15"/></operator><name pos:line="119" pos:column="15">p<pos:position pos:line="119" pos:column="16"/></name></expr>;<pos:position pos:line="119" pos:column="17"/></expr_stmt>
            <if pos:line="120" pos:column="13">if <condition pos:line="120" pos:column="16">(<expr><name pos:line="120" pos:column="17">dp<pos:position pos:line="120" pos:column="19"/></name></expr>)<pos:position pos:line="120" pos:column="20"/></condition><then pos:line="120" pos:column="20"> <block pos:line="120" pos:column="21">{       <comment type="block" pos:line="120" pos:column="29">/* end of domain name */</comment>
                <expr_stmt><expr><name><name pos:line="121" pos:column="17">gdsp<pos:position pos:line="121" pos:column="21"/></name><operator pos:line="121" pos:column="21">-&gt;<pos:position pos:line="121" pos:column="26"/></operator><name pos:line="121" pos:column="23">domain<pos:position pos:line="121" pos:column="29"/></name></name> <operator pos:line="121" pos:column="30">=<pos:position pos:line="121" pos:column="31"/></operator> <call><name pos:line="121" pos:column="32">xstrdup<pos:position pos:line="121" pos:column="39"/></name><argument_list pos:line="121" pos:column="39">(<argument><expr><name pos:line="121" pos:column="40">dp<pos:position pos:line="121" pos:column="42"/></name></expr></argument>)<pos:position pos:line="121" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="44"/></expr_stmt>
                <expr_stmt><expr><name pos:line="122" pos:column="17">dp<pos:position pos:line="122" pos:column="19"/></name> <operator pos:line="122" pos:column="20">=<pos:position pos:line="122" pos:column="21"/></operator> <name pos:line="122" pos:column="22">NULL<pos:position pos:line="122" pos:column="26"/></name></expr>;<pos:position pos:line="122" pos:column="27"/></expr_stmt>
            }<pos:position pos:line="123" pos:column="14"/></block></then> <else pos:line="123" pos:column="15">else <block pos:line="123" pos:column="20">{        <comment type="block" pos:line="123" pos:column="29">/* end of group name and no domain name */</comment>
                <expr_stmt><expr><name pos:line="124" pos:column="17">gdsp<pos:position pos:line="124" pos:column="21"/></name> <operator pos:line="124" pos:column="22">=<pos:position pos:line="124" pos:column="23"/></operator> <call><name pos:line="124" pos:column="24">init_gd<pos:position pos:line="124" pos:column="31"/></name><argument_list pos:line="124" pos:column="31">()<pos:position pos:line="124" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="34"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="125" pos:column="17">gdsp<pos:position pos:line="125" pos:column="21"/></name><operator pos:line="125" pos:column="21">-&gt;<pos:position pos:line="125" pos:column="26"/></operator><name pos:line="125" pos:column="23">group<pos:position pos:line="125" pos:column="28"/></name></name> <operator pos:line="125" pos:column="29">=<pos:position pos:line="125" pos:column="30"/></operator> <call><name pos:line="125" pos:column="31">xstrdup<pos:position pos:line="125" pos:column="38"/></name><argument_list pos:line="125" pos:column="38">(<argument><expr><name pos:line="125" pos:column="39">gp<pos:position pos:line="125" pos:column="41"/></name></expr></argument>)<pos:position pos:line="125" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="43"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="126" pos:column="17">gdsp<pos:position pos:line="126" pos:column="21"/></name><operator pos:line="126" pos:column="21">-&gt;<pos:position pos:line="126" pos:column="26"/></operator><name pos:line="126" pos:column="23">next<pos:position pos:line="126" pos:column="27"/></name></name> <operator pos:line="126" pos:column="28">=<pos:position pos:line="126" pos:column="29"/></operator> <name pos:line="126" pos:column="30">gdspn<pos:position pos:line="126" pos:column="35"/></name></expr>;<pos:position pos:line="126" pos:column="36"/></expr_stmt>
            }<pos:position pos:line="127" pos:column="14"/></block></else></if>
            <expr_stmt><expr><name pos:line="128" pos:column="13">gdspn<pos:position pos:line="128" pos:column="18"/></name> <operator pos:line="128" pos:column="19">=<pos:position pos:line="128" pos:column="20"/></operator> <name pos:line="128" pos:column="21">gdsp<pos:position pos:line="128" pos:column="25"/></name></expr>;<pos:position pos:line="128" pos:column="26"/></expr_stmt>
            <expr_stmt><expr><name pos:line="129" pos:column="13">gp<pos:position pos:line="129" pos:column="15"/></name> <operator pos:line="129" pos:column="16">=<pos:position pos:line="129" pos:column="17"/></operator> <name pos:line="129" pos:column="18">p<pos:position pos:line="129" pos:column="19"/></name></expr>;<pos:position pos:line="129" pos:column="20"/></expr_stmt>     <comment type="block" pos:line="129" pos:column="25">/* after : starts new group name */</comment>
            <expr_stmt><expr><call><name pos:line="130" pos:column="13">debug<pos:position pos:line="130" pos:column="18"/></name><argument_list pos:line="130" pos:column="18">(<argument><expr><operator pos:line="130" pos:column="19">(<pos:position pos:line="130" pos:column="20"/></operator><name pos:line="130" pos:column="20">char<pos:position pos:line="130" pos:column="24"/></name> <operator pos:line="130" pos:column="25">*<pos:position pos:line="130" pos:column="26"/></operator><operator pos:line="130" pos:column="26">)<pos:position pos:line="130" pos:column="27"/></operator> <literal type="string" pos:line="130" pos:column="28">"%s| %s: INFO: Group %s  Domain %s\n"<pos:position pos:line="130" pos:column="65"/></literal></expr></argument>, <argument><expr><call><name pos:line="130" pos:column="67">LogTime<pos:position pos:line="130" pos:column="74"/></name><argument_list pos:line="130" pos:column="74">()<pos:position pos:line="130" pos:column="76"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="130" pos:column="78">PROGRAM<pos:position pos:line="130" pos:column="85"/></name></expr></argument>, <argument><expr><name><name pos:line="130" pos:column="87">gdsp<pos:position pos:line="130" pos:column="91"/></name><operator pos:line="130" pos:column="91">-&gt;<pos:position pos:line="130" pos:column="96"/></operator><name pos:line="130" pos:column="93">group<pos:position pos:line="130" pos:column="98"/></name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name pos:line="130" pos:column="100">gdsp<pos:position pos:line="130" pos:column="104"/></name><operator pos:line="130" pos:column="104">-&gt;<pos:position pos:line="130" pos:column="109"/></operator><name pos:line="130" pos:column="106">domain<pos:position pos:line="130" pos:column="112"/></name></name></expr> ?<pos:position pos:line="130" pos:column="114"/></condition><then pos:line="130" pos:column="114"> <expr><name><name pos:line="130" pos:column="115">gdsp<pos:position pos:line="130" pos:column="119"/></name><operator pos:line="130" pos:column="119">-&gt;<pos:position pos:line="130" pos:column="124"/></operator><name pos:line="130" pos:column="121">domain<pos:position pos:line="130" pos:column="127"/></name></name></expr> <pos:position pos:line="130" pos:column="128"/></then><else pos:line="130" pos:column="128">: <expr><literal type="string" pos:line="130" pos:column="130">"NULL"<pos:position pos:line="130" pos:column="136"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="130" pos:column="137"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="138"/></expr_stmt>
        }<pos:position pos:line="131" pos:column="10"/></block></then></if></elseif> <else pos:line="131" pos:column="11">else
            <block type="pseudo"><expr_stmt><expr><operator pos:line="132" pos:column="13">++<pos:position pos:line="132" pos:column="15"/></operator><name pos:line="132" pos:column="15">p<pos:position pos:line="132" pos:column="16"/></name></expr>;<pos:position pos:line="132" pos:column="17"/></expr_stmt></block></else></if>
    }<pos:position pos:line="133" pos:column="6"/></block></while>
    <if pos:line="134" pos:column="5">if <condition pos:line="134" pos:column="8">(<expr><name pos:line="134" pos:column="9">p<pos:position pos:line="134" pos:column="10"/></name> <operator pos:line="134" pos:column="11">==<pos:position pos:line="134" pos:column="13"/></operator> <name pos:line="134" pos:column="14">gp<pos:position pos:line="134" pos:column="16"/></name></expr>)<pos:position pos:line="134" pos:column="17"/></condition><then pos:line="134" pos:column="17"> <block pos:line="134" pos:column="18">{      <comment type="block" pos:line="134" pos:column="25">/* empty group name not allowed */</comment>
        <expr_stmt><expr><call><name pos:line="135" pos:column="9">debug<pos:position pos:line="135" pos:column="14"/></name><argument_list pos:line="135" pos:column="14">(<argument><expr><operator pos:line="135" pos:column="15">(<pos:position pos:line="135" pos:column="16"/></operator><name pos:line="135" pos:column="16">char<pos:position pos:line="135" pos:column="20"/></name> <operator pos:line="135" pos:column="21">*<pos:position pos:line="135" pos:column="22"/></operator><operator pos:line="135" pos:column="22">)<pos:position pos:line="135" pos:column="23"/></operator> <literal type="string" pos:line="135" pos:column="24">"%s| %s: ERROR: No group defined for domain %s\n"<pos:position pos:line="135" pos:column="73"/></literal></expr></argument>, <argument><expr><call><name pos:line="135" pos:column="75">LogTime<pos:position pos:line="135" pos:column="82"/></name><argument_list pos:line="135" pos:column="82">()<pos:position pos:line="135" pos:column="84"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="135" pos:column="86">PROGRAM<pos:position pos:line="135" pos:column="93"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="95">p<pos:position pos:line="135" pos:column="96"/></name></expr></argument>)<pos:position pos:line="135" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="98"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="136" pos:column="9">cleanup<pos:position pos:line="136" pos:column="16"/></name><argument_list pos:line="136" pos:column="16">()<pos:position pos:line="136" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="19"/></expr_stmt>
        <return pos:line="137" pos:column="9">return <expr><operator pos:line="137" pos:column="16">(<pos:position pos:line="137" pos:column="17"/></operator><literal type="number" pos:line="137" pos:column="17">1<pos:position pos:line="137" pos:column="18"/></literal><operator pos:line="137" pos:column="18">)<pos:position pos:line="137" pos:column="19"/></operator></expr>;<pos:position pos:line="137" pos:column="20"/></return>
    }<pos:position pos:line="138" pos:column="6"/></block></then></if>
    <if pos:line="139" pos:column="5">if <condition pos:line="139" pos:column="8">(<expr><name pos:line="139" pos:column="9">dp<pos:position pos:line="139" pos:column="11"/></name></expr>)<pos:position pos:line="139" pos:column="12"/></condition><then pos:line="139" pos:column="12"> <block pos:line="139" pos:column="13">{           <comment type="block" pos:line="139" pos:column="25">/* end of domain name */</comment>
        <expr_stmt><expr><name><name pos:line="140" pos:column="9">gdsp<pos:position pos:line="140" pos:column="13"/></name><operator pos:line="140" pos:column="13">-&gt;<pos:position pos:line="140" pos:column="18"/></operator><name pos:line="140" pos:column="15">domain<pos:position pos:line="140" pos:column="21"/></name></name> <operator pos:line="140" pos:column="22">=<pos:position pos:line="140" pos:column="23"/></operator> <call><name pos:line="140" pos:column="24">xstrdup<pos:position pos:line="140" pos:column="31"/></name><argument_list pos:line="140" pos:column="31">(<argument><expr><name pos:line="140" pos:column="32">dp<pos:position pos:line="140" pos:column="34"/></name></expr></argument>)<pos:position pos:line="140" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="141" pos:column="6"/></block></then> <else pos:line="141" pos:column="7">else <block pos:line="141" pos:column="12">{            <comment type="block" pos:line="141" pos:column="25">/* end of group name and no domain name */</comment>
        <expr_stmt><expr><name pos:line="142" pos:column="9">gdsp<pos:position pos:line="142" pos:column="13"/></name> <operator pos:line="142" pos:column="14">=<pos:position pos:line="142" pos:column="15"/></operator> <call><name pos:line="142" pos:column="16">init_gd<pos:position pos:line="142" pos:column="23"/></name><argument_list pos:line="142" pos:column="23">()<pos:position pos:line="142" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="143" pos:column="9">gdsp<pos:position pos:line="143" pos:column="13"/></name><operator pos:line="143" pos:column="13">-&gt;<pos:position pos:line="143" pos:column="18"/></operator><name pos:line="143" pos:column="15">group<pos:position pos:line="143" pos:column="20"/></name></name> <operator pos:line="143" pos:column="21">=<pos:position pos:line="143" pos:column="22"/></operator> <call><name pos:line="143" pos:column="23">xstrdup<pos:position pos:line="143" pos:column="30"/></name><argument_list pos:line="143" pos:column="30">(<argument><expr><name pos:line="143" pos:column="31">gp<pos:position pos:line="143" pos:column="33"/></name></expr></argument>)<pos:position pos:line="143" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="35"/></expr_stmt>
        <if pos:line="144" pos:column="9">if <condition pos:line="144" pos:column="12">(<expr><name pos:line="144" pos:column="13">gdspn<pos:position pos:line="144" pos:column="18"/></name></expr>)<pos:position pos:line="144" pos:column="19"/></condition><then pos:line="144" pos:column="19">      <comment type="block" pos:line="144" pos:column="25">/* Have already an existing structure */</comment>
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="145" pos:column="13">gdsp<pos:position pos:line="145" pos:column="17"/></name><operator pos:line="145" pos:column="17">-&gt;<pos:position pos:line="145" pos:column="22"/></operator><name pos:line="145" pos:column="19">next<pos:position pos:line="145" pos:column="23"/></name></name> <operator pos:line="145" pos:column="24">=<pos:position pos:line="145" pos:column="25"/></operator> <name pos:line="145" pos:column="26">gdspn<pos:position pos:line="145" pos:column="31"/></name></expr>;<pos:position pos:line="145" pos:column="32"/></expr_stmt></block></then></if>
    }<pos:position pos:line="146" pos:column="6"/></block></else></if>
    <expr_stmt><expr><call><name pos:line="147" pos:column="5">debug<pos:position pos:line="147" pos:column="10"/></name><argument_list pos:line="147" pos:column="10">(<argument><expr><operator pos:line="147" pos:column="11">(<pos:position pos:line="147" pos:column="12"/></operator><name pos:line="147" pos:column="12">char<pos:position pos:line="147" pos:column="16"/></name> <operator pos:line="147" pos:column="17">*<pos:position pos:line="147" pos:column="18"/></operator><operator pos:line="147" pos:column="18">)<pos:position pos:line="147" pos:column="19"/></operator> <literal type="string" pos:line="147" pos:column="20">"%s| %s: INFO: Group %s  Domain %s\n"<pos:position pos:line="147" pos:column="57"/></literal></expr></argument>, <argument><expr><call><name pos:line="147" pos:column="59">LogTime<pos:position pos:line="147" pos:column="66"/></name><argument_list pos:line="147" pos:column="66">()<pos:position pos:line="147" pos:column="68"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="147" pos:column="70">PROGRAM<pos:position pos:line="147" pos:column="77"/></name></expr></argument>, <argument><expr><name><name pos:line="147" pos:column="79">gdsp<pos:position pos:line="147" pos:column="83"/></name><operator pos:line="147" pos:column="83">-&gt;<pos:position pos:line="147" pos:column="88"/></operator><name pos:line="147" pos:column="85">group<pos:position pos:line="147" pos:column="90"/></name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name pos:line="147" pos:column="92">gdsp<pos:position pos:line="147" pos:column="96"/></name><operator pos:line="147" pos:column="96">-&gt;<pos:position pos:line="147" pos:column="101"/></operator><name pos:line="147" pos:column="98">domain<pos:position pos:line="147" pos:column="104"/></name></name></expr> ?<pos:position pos:line="147" pos:column="106"/></condition><then pos:line="147" pos:column="106"> <expr><name><name pos:line="147" pos:column="107">gdsp<pos:position pos:line="147" pos:column="111"/></name><operator pos:line="147" pos:column="111">-&gt;<pos:position pos:line="147" pos:column="116"/></operator><name pos:line="147" pos:column="113">domain<pos:position pos:line="147" pos:column="119"/></name></name></expr> <pos:position pos:line="147" pos:column="120"/></then><else pos:line="147" pos:column="120">: <expr><literal type="string" pos:line="147" pos:column="122">"NULL"<pos:position pos:line="147" pos:column="128"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="147" pos:column="129"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="130"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="149" pos:column="5">margs<pos:position pos:line="149" pos:column="10"/></name><operator pos:line="149" pos:column="10">-&gt;<pos:position pos:line="149" pos:column="15"/></operator><name pos:line="149" pos:column="12">groups<pos:position pos:line="149" pos:column="18"/></name></name> <operator pos:line="149" pos:column="19">=<pos:position pos:line="149" pos:column="20"/></operator> <name pos:line="149" pos:column="21">gdsp<pos:position pos:line="149" pos:column="25"/></name></expr>;<pos:position pos:line="149" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="150" pos:column="5">gdsp<pos:position pos:line="150" pos:column="9"/></name> <operator pos:line="150" pos:column="10">=<pos:position pos:line="150" pos:column="11"/></operator> <name pos:line="150" pos:column="12">NULL<pos:position pos:line="150" pos:column="16"/></name></expr>;<pos:position pos:line="150" pos:column="17"/></expr_stmt> <comment type="line" pos:line="150" pos:column="18">// prevent the cleanup() deallocating it.</comment>
    <expr_stmt><expr><call><name pos:line="151" pos:column="5">cleanup<pos:position pos:line="151" pos:column="12"/></name><argument_list pos:line="151" pos:column="12">()<pos:position pos:line="151" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="15"/></expr_stmt>
    <return pos:line="152" pos:column="5">return <expr><operator pos:line="152" pos:column="12">(<pos:position pos:line="152" pos:column="13"/></operator><literal type="number" pos:line="152" pos:column="13">0<pos:position pos:line="152" pos:column="14"/></literal><operator pos:line="152" pos:column="14">)<pos:position pos:line="152" pos:column="15"/></operator></expr>;<pos:position pos:line="152" pos:column="16"/></return>
}<pos:position pos:line="153" pos:column="2"/></block></function></unit>
