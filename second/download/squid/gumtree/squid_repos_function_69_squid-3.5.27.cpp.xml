<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_69_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">SigFunc<pos:position pos:line="1" pos:column="8"/></name><modifier pos:line="1" pos:column="8">*<pos:position pos:line="1" pos:column="9"/></modifier></type>
<name pos:line="2" pos:column="1">Signal<pos:position pos:line="2" pos:column="7"/></name><parameter_list pos:line="2" pos:column="7">( <parameter><decl><type><name pos:line="2" pos:column="9">int<pos:position pos:line="2" pos:column="12"/></name></type> <name pos:line="2" pos:column="13">signo<pos:position pos:line="2" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="20">SigFunc<pos:position pos:line="2" pos:column="27"/></name><modifier pos:line="2" pos:column="27">*<pos:position pos:line="2" pos:column="28"/></modifier></type> <name pos:line="2" pos:column="29">newhandler<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="41">bool<pos:position pos:line="2" pos:column="45"/></name></type> <name pos:line="2" pos:column="46">doInterrupt<pos:position pos:line="2" pos:column="57"/></name></decl></parameter> )<pos:position pos:line="2" pos:column="59"/></parameter_list>
<comment type="line" pos:line="3" pos:column="1">// purpose: install reliable signals</comment>
<comment type="line" pos:line="4" pos:column="1">// paramtr: signo (IN): signal for which a handler is to be installed</comment>
<comment type="line" pos:line="5" pos:column="1">//          newhandler (IN): function pointer to the signal handler</comment>
<comment type="line" pos:line="6" pos:column="1">//          doInterrupt (IN): interrupted system calls wanted!</comment>
<comment type="line" pos:line="7" pos:column="1">// returns: the old signal handler, or SIG_ERR in case of error.</comment>
<block pos:line="8" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="9" pos:column="5">struct<pos:position pos:line="9" pos:column="11"/></name> <name pos:line="9" pos:column="12">sigaction<pos:position pos:line="9" pos:column="21"/></name></name></type> <name pos:line="9" pos:column="22">action<pos:position pos:line="9" pos:column="28"/></name></decl>, <decl><type ref="prev"/><name pos:line="9" pos:column="30">old<pos:position pos:line="9" pos:column="33"/></name></decl>;<pos:position pos:line="9" pos:column="34"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="11" pos:column="5">memset<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">( <argument><expr><operator pos:line="11" pos:column="13">&amp;<pos:position pos:line="11" pos:column="18"/></operator><name pos:line="11" pos:column="14">old<pos:position pos:line="11" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="19">0<pos:position pos:line="11" pos:column="20"/></literal></expr></argument>, <argument><expr><sizeof pos:line="11" pos:column="22">sizeof<argument_list pos:line="11" pos:column="28">(<argument><expr><name pos:line="11" pos:column="29">old<pos:position pos:line="11" pos:column="32"/></name></expr></argument>)<pos:position pos:line="11" pos:column="33"/></argument_list></sizeof></expr></argument> )<pos:position pos:line="11" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">memset<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">( <argument><expr><operator pos:line="12" pos:column="13">&amp;<pos:position pos:line="12" pos:column="18"/></operator><name pos:line="12" pos:column="14">action<pos:position pos:line="12" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="22">0<pos:position pos:line="12" pos:column="23"/></literal></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="25">sizeof<argument_list pos:line="12" pos:column="31">(<argument><expr><name pos:line="12" pos:column="32">action<pos:position pos:line="12" pos:column="38"/></name></expr></argument>)<pos:position pos:line="12" pos:column="39"/></argument_list></sizeof></expr></argument> )<pos:position pos:line="12" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="42"/></expr_stmt>

    <comment type="line" pos:line="14" pos:column="5">// action.sa_handler = newhandler; I HATE TYPE-OVERCORRECTNESS !</comment>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">memmove<pos:position pos:line="15" pos:column="12"/></name><argument_list pos:line="15" pos:column="12">( <argument><expr><operator pos:line="15" pos:column="14">&amp;<pos:position pos:line="15" pos:column="19"/></operator><name><name pos:line="15" pos:column="15">action<pos:position pos:line="15" pos:column="21"/></name><operator pos:line="15" pos:column="21">.<pos:position pos:line="15" pos:column="22"/></operator><name pos:line="15" pos:column="22">sa_handler<pos:position pos:line="15" pos:column="32"/></name></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="34">&amp;<pos:position pos:line="15" pos:column="39"/></operator><name pos:line="15" pos:column="35">newhandler<pos:position pos:line="15" pos:column="45"/></name></expr></argument>, <argument><expr><sizeof pos:line="15" pos:column="47">sizeof<argument_list pos:line="15" pos:column="53">(<argument><expr><name pos:line="15" pos:column="54">SigFunc<pos:position pos:line="15" pos:column="61"/></name><operator pos:line="15" pos:column="61">*<pos:position pos:line="15" pos:column="62"/></operator></expr></argument>)<pos:position pos:line="15" pos:column="63"/></argument_list></sizeof></expr></argument> )<pos:position pos:line="15" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="66"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">sigemptyset<pos:position pos:line="16" pos:column="16"/></name><argument_list pos:line="16" pos:column="16">( <argument><expr><operator pos:line="16" pos:column="18">&amp;<pos:position pos:line="16" pos:column="23"/></operator><name><name pos:line="16" pos:column="19">action<pos:position pos:line="16" pos:column="25"/></name><operator pos:line="16" pos:column="25">.<pos:position pos:line="16" pos:column="26"/></operator><name pos:line="16" pos:column="26">sa_mask<pos:position pos:line="16" pos:column="33"/></name></name></expr></argument> )<pos:position pos:line="16" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="36"/></expr_stmt>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">( <expr><name pos:line="18" pos:column="10">signo<pos:position pos:line="18" pos:column="15"/></name> <operator pos:line="18" pos:column="16">==<pos:position pos:line="18" pos:column="18"/></operator> <name pos:line="18" pos:column="19">SIGCHLD<pos:position pos:line="18" pos:column="26"/></name></expr> )<pos:position pos:line="18" pos:column="28"/></condition><then pos:line="18" pos:column="28"> <block pos:line="18" pos:column="29">{
        <expr_stmt><expr><name><name pos:line="19" pos:column="9">action<pos:position pos:line="19" pos:column="15"/></name><operator pos:line="19" pos:column="15">.<pos:position pos:line="19" pos:column="16"/></operator><name pos:line="19" pos:column="16">sa_flags<pos:position pos:line="19" pos:column="24"/></name></name> <operator pos:line="19" pos:column="25">|=<pos:position pos:line="19" pos:column="27"/></operator> <name pos:line="19" pos:column="28">SA_NOCLDSTOP<pos:position pos:line="19" pos:column="40"/></name></expr>;<pos:position pos:line="19" pos:column="41"/></expr_stmt>

<cpp:ifdef pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">ifdef<pos:position pos:line="21" pos:column="7"/></cpp:directive> <name pos:line="21" pos:column="8">SA_NODEFER<pos:position pos:line="21" pos:column="18"/></name></cpp:ifdef>
        <expr_stmt><expr><name><name pos:line="22" pos:column="9">action<pos:position pos:line="22" pos:column="15"/></name><operator pos:line="22" pos:column="15">.<pos:position pos:line="22" pos:column="16"/></operator><name pos:line="22" pos:column="16">sa_flags<pos:position pos:line="22" pos:column="24"/></name></name> <operator pos:line="22" pos:column="25">|=<pos:position pos:line="22" pos:column="27"/></operator> <name pos:line="22" pos:column="28">SA_NODEFER<pos:position pos:line="22" pos:column="38"/></name></expr>;<pos:position pos:line="22" pos:column="39"/></expr_stmt>   <comment type="line" pos:line="22" pos:column="42">// SYSV: don't block current signal</comment>
<cpp:endif pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">endif<pos:position pos:line="23" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>

    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">( <expr><name pos:line="26" pos:column="10">signo<pos:position pos:line="26" pos:column="15"/></name> <operator pos:line="26" pos:column="16">==<pos:position pos:line="26" pos:column="18"/></operator> <name pos:line="26" pos:column="19">SIGALRM<pos:position pos:line="26" pos:column="26"/></name> <operator pos:line="26" pos:column="27">||<pos:position pos:line="26" pos:column="29"/></operator> <name pos:line="26" pos:column="30">doInterrupt<pos:position pos:line="26" pos:column="41"/></name></expr> )<pos:position pos:line="26" pos:column="43"/></condition><then pos:line="26" pos:column="43"> <block pos:line="26" pos:column="44">{
<cpp:ifdef pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">ifdef<pos:position pos:line="27" pos:column="7"/></cpp:directive> <name pos:line="27" pos:column="8">SA_INTERRUPT<pos:position pos:line="27" pos:column="20"/></name></cpp:ifdef>
        <expr_stmt><expr><name><name pos:line="28" pos:column="9">action<pos:position pos:line="28" pos:column="15"/></name><operator pos:line="28" pos:column="15">.<pos:position pos:line="28" pos:column="16"/></operator><name pos:line="28" pos:column="16">sa_flags<pos:position pos:line="28" pos:column="24"/></name></name> <operator pos:line="28" pos:column="25">|=<pos:position pos:line="28" pos:column="27"/></operator> <name pos:line="28" pos:column="28">SA_INTERRUPT<pos:position pos:line="28" pos:column="40"/></name></expr>;<pos:position pos:line="28" pos:column="41"/></expr_stmt> <comment type="line" pos:line="28" pos:column="42">// SunOS, obsoleted by POSIX</comment>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif<pos:position pos:line="29" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="30" pos:column="6"/></block></then> <else pos:line="30" pos:column="7">else <block pos:line="30" pos:column="12">{
<cpp:ifdef pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">ifdef<pos:position pos:line="31" pos:column="7"/></cpp:directive> <name pos:line="31" pos:column="8">SA_RESTART<pos:position pos:line="31" pos:column="18"/></name></cpp:ifdef>
        <expr_stmt><expr><name><name pos:line="32" pos:column="9">action<pos:position pos:line="32" pos:column="15"/></name><operator pos:line="32" pos:column="15">.<pos:position pos:line="32" pos:column="16"/></operator><name pos:line="32" pos:column="16">sa_flags<pos:position pos:line="32" pos:column="24"/></name></name> <operator pos:line="32" pos:column="25">|=<pos:position pos:line="32" pos:column="27"/></operator> <name pos:line="32" pos:column="28">SA_RESTART<pos:position pos:line="32" pos:column="38"/></name></expr>;<pos:position pos:line="32" pos:column="39"/></expr_stmt>   <comment type="line" pos:line="32" pos:column="42">// BSD, SVR4</comment>
<cpp:endif pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">endif<pos:position pos:line="33" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="34" pos:column="6"/></block></else></if>

    <return pos:line="36" pos:column="5">return <expr><ternary><condition><expr><operator pos:line="36" pos:column="12">(<pos:position pos:line="36" pos:column="13"/></operator> <call><name pos:line="36" pos:column="14">sigaction<pos:position pos:line="36" pos:column="23"/></name><argument_list pos:line="36" pos:column="23">( <argument><expr><name pos:line="36" pos:column="25">signo<pos:position pos:line="36" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="32">&amp;<pos:position pos:line="36" pos:column="37"/></operator><name pos:line="36" pos:column="33">action<pos:position pos:line="36" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="41">&amp;<pos:position pos:line="36" pos:column="46"/></operator><name pos:line="36" pos:column="42">old<pos:position pos:line="36" pos:column="45"/></name></expr></argument> )<pos:position pos:line="36" pos:column="47"/></argument_list></call> <operator pos:line="36" pos:column="48">&lt;<pos:position pos:line="36" pos:column="52"/></operator> <literal type="number" pos:line="36" pos:column="50">0<pos:position pos:line="36" pos:column="51"/></literal> <operator pos:line="36" pos:column="52">)<pos:position pos:line="36" pos:column="53"/></operator></expr> ?<pos:position pos:line="36" pos:column="55"/></condition><then pos:line="36" pos:column="55">
           <expr><operator pos:line="37" pos:column="12">(<pos:position pos:line="37" pos:column="13"/></operator><name pos:line="37" pos:column="13">SigFunc<pos:position pos:line="37" pos:column="20"/></name><operator pos:line="37" pos:column="20">*<pos:position pos:line="37" pos:column="21"/></operator><operator pos:line="37" pos:column="21">)<pos:position pos:line="37" pos:column="22"/></operator> <name pos:line="37" pos:column="23">SIG_ERR<pos:position pos:line="37" pos:column="30"/></name></expr> <pos:position pos:line="37" pos:column="31"/></then><else pos:line="37" pos:column="31">:
           <expr><operator pos:line="38" pos:column="12">(<pos:position pos:line="38" pos:column="13"/></operator><name pos:line="38" pos:column="13">SigFunc<pos:position pos:line="38" pos:column="20"/></name><operator pos:line="38" pos:column="20">*<pos:position pos:line="38" pos:column="21"/></operator><operator pos:line="38" pos:column="21">)<pos:position pos:line="38" pos:column="22"/></operator> <name><name pos:line="38" pos:column="23">old<pos:position pos:line="38" pos:column="26"/></name><operator pos:line="38" pos:column="26">.<pos:position pos:line="38" pos:column="27"/></operator><name pos:line="38" pos:column="27">sa_handler<pos:position pos:line="38" pos:column="37"/></name></name></expr></else></ternary></expr>;<pos:position pos:line="38" pos:column="38"/></return>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
