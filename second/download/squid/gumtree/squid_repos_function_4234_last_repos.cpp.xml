<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4234_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ACLRegexData<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">match<pos:position pos:line="2" pos:column="20"/></name></name><parameter_list pos:line="2" pos:column="20">(<parameter><decl><type><name pos:line="2" pos:column="21">char<pos:position pos:line="2" pos:column="25"/></name> <specifier pos:line="2" pos:column="26">const<pos:position pos:line="2" pos:column="31"/></specifier> <modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type><name pos:line="2" pos:column="33">word<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="38"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">!<pos:position pos:line="4" pos:column="10"/></operator><name pos:line="4" pos:column="10">word<pos:position pos:line="4" pos:column="14"/></name></expr>)<pos:position pos:line="4" pos:column="15"/></condition><then pos:line="4" pos:column="15">
        <block type="pseudo"><return pos:line="5" pos:column="9">return <expr><literal type="number" pos:line="5" pos:column="16">0<pos:position pos:line="5" pos:column="17"/></literal></expr>;<pos:position pos:line="5" pos:column="18"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">debugs<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><literal type="number" pos:line="7" pos:column="12">28<pos:position pos:line="7" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="16">3<pos:position pos:line="7" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="19">"checking '"<pos:position pos:line="7" pos:column="31"/></literal> <operator pos:line="7" pos:column="32">&lt;&lt;<pos:position pos:line="7" pos:column="40"/></operator> <name pos:line="7" pos:column="35">word<pos:position pos:line="7" pos:column="39"/></name> <operator pos:line="7" pos:column="40">&lt;&lt;<pos:position pos:line="7" pos:column="48"/></operator> <literal type="string" pos:line="7" pos:column="43">"'"<pos:position pos:line="7" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="48"/></expr_stmt>

    <comment type="line" pos:line="9" pos:column="5">// walk the list of patterns to see if one matches</comment>
    <for pos:line="10" pos:column="5">for <control pos:line="10" pos:column="9">(<init><expr><name pos:line="10" pos:column="10">auto<pos:position pos:line="10" pos:column="14"/></name> <operator pos:line="10" pos:column="15">&amp;<pos:position pos:line="10" pos:column="20"/></operator><name pos:line="10" pos:column="16">i<pos:position pos:line="10" pos:column="17"/></name> <operator pos:line="10" pos:column="18">:<pos:position pos:line="10" pos:column="19"/></operator> <name pos:line="10" pos:column="20">data<pos:position pos:line="10" pos:column="24"/></name></expr></init>)<pos:position pos:line="10" pos:column="25"/></control> <block pos:line="10" pos:column="26">{
        <if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><call><name><name pos:line="11" pos:column="13">i<pos:position pos:line="11" pos:column="14"/></name><operator pos:line="11" pos:column="14">.<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="15">match<pos:position pos:line="11" pos:column="20"/></name></name><argument_list pos:line="11" pos:column="20">(<argument><expr><name pos:line="11" pos:column="21">word<pos:position pos:line="11" pos:column="25"/></name></expr></argument>)<pos:position pos:line="11" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="27"/></condition><then pos:line="11" pos:column="27"> <block pos:line="11" pos:column="28">{
            <expr_stmt><expr><call><name pos:line="12" pos:column="13">debugs<pos:position pos:line="12" pos:column="19"/></name><argument_list pos:line="12" pos:column="19">(<argument><expr><literal type="number" pos:line="12" pos:column="20">28<pos:position pos:line="12" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="24">2<pos:position pos:line="12" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="char" pos:line="12" pos:column="27">'\''<pos:position pos:line="12" pos:column="31"/></literal> <operator pos:line="12" pos:column="32">&lt;&lt;<pos:position pos:line="12" pos:column="40"/></operator> <call><name><name pos:line="12" pos:column="35">i<pos:position pos:line="12" pos:column="36"/></name><operator pos:line="12" pos:column="36">.<pos:position pos:line="12" pos:column="37"/></operator><name pos:line="12" pos:column="37">c_str<pos:position pos:line="12" pos:column="42"/></name></name><argument_list pos:line="12" pos:column="42">()<pos:position pos:line="12" pos:column="44"/></argument_list></call> <operator pos:line="12" pos:column="45">&lt;&lt;<pos:position pos:line="12" pos:column="53"/></operator> <literal type="string" pos:line="12" pos:column="48">"' found in '"<pos:position pos:line="12" pos:column="62"/></literal> <operator pos:line="12" pos:column="63">&lt;&lt;<pos:position pos:line="12" pos:column="71"/></operator> <name pos:line="12" pos:column="66">word<pos:position pos:line="12" pos:column="70"/></name> <operator pos:line="12" pos:column="71">&lt;&lt;<pos:position pos:line="12" pos:column="79"/></operator> <literal type="char" pos:line="12" pos:column="74">'\''<pos:position pos:line="12" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="80"/></expr_stmt>
            <comment type="line" pos:line="13" pos:column="13">// TODO: old code also popped the pattern to second place of the list</comment>
            <comment type="line" pos:line="14" pos:column="13">// in order to reduce patterns search times.</comment>
            <return pos:line="15" pos:column="13">return <expr><literal type="number" pos:line="15" pos:column="20">1<pos:position pos:line="15" pos:column="21"/></literal></expr>;<pos:position pos:line="15" pos:column="22"/></return>
        }<pos:position pos:line="16" pos:column="10"/></block></then></if>
    }<pos:position pos:line="17" pos:column="6"/></block></for>

    <return pos:line="19" pos:column="5">return <expr><literal type="number" pos:line="19" pos:column="12">0<pos:position pos:line="19" pos:column="13"/></literal></expr>;<pos:position pos:line="19" pos:column="14"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
