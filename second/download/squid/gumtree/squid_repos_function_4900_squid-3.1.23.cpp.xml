<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4900_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">AuthUserRequest<pos:position pos:line="1" pos:column="16"/></name> <modifier pos:line="1" pos:column="17">*<pos:position pos:line="1" pos:column="18"/></modifier></type>
<name><name pos:line="2" pos:column="1">AuthBasicConfig<pos:position pos:line="2" pos:column="16"/></name><operator pos:line="2" pos:column="16">::<pos:position pos:line="2" pos:column="18"/></operator><name pos:line="2" pos:column="18">decode<pos:position pos:line="2" pos:column="24"/></name></name><parameter_list pos:line="2" pos:column="24">(<parameter><decl><type><name pos:line="2" pos:column="25">char<pos:position pos:line="2" pos:column="29"/></name> <specifier pos:line="2" pos:column="30">const<pos:position pos:line="2" pos:column="35"/></specifier> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type><name pos:line="2" pos:column="37">proxy_auth<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="48"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">AuthBasicUserRequest<pos:position pos:line="4" pos:column="25"/></name> <modifier pos:line="4" pos:column="26">*<pos:position pos:line="4" pos:column="27"/></modifier></type><name pos:line="4" pos:column="27">auth_user_request<pos:position pos:line="4" pos:column="44"/></name> <init pos:line="4" pos:column="45">= <expr><operator pos:line="4" pos:column="47">new<pos:position pos:line="4" pos:column="50"/></operator> <call><name pos:line="4" pos:column="51">AuthBasicUserRequest<pos:position pos:line="4" pos:column="71"/></name><argument_list pos:line="4" pos:column="71">()<pos:position pos:line="4" pos:column="73"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="74"/></decl_stmt>
    <comment type="block" pos:line="5" pos:column="5">/* decode the username */</comment>
    <comment type="block" pos:line="6" pos:column="5">/* trim BASIC from string */</comment>

    <while pos:line="8" pos:column="5">while <condition pos:line="8" pos:column="11">(<expr><call><name pos:line="8" pos:column="12">xisgraph<pos:position pos:line="8" pos:column="20"/></name><argument_list pos:line="8" pos:column="20">(<argument><expr><operator pos:line="8" pos:column="21">*<pos:position pos:line="8" pos:column="22"/></operator><name pos:line="8" pos:column="22">proxy_auth<pos:position pos:line="8" pos:column="32"/></name></expr></argument>)<pos:position pos:line="8" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="34"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="9" pos:column="9">proxy_auth<pos:position pos:line="9" pos:column="19"/></name><operator pos:line="9" pos:column="19">++<pos:position pos:line="9" pos:column="21"/></operator></expr>;<pos:position pos:line="9" pos:column="22"/></expr_stmt></block></while>

    <decl_stmt><decl><type><name pos:line="11" pos:column="5">BasicUser<pos:position pos:line="11" pos:column="14"/></name> <modifier pos:line="11" pos:column="15">*<pos:position pos:line="11" pos:column="16"/></modifier></type><name pos:line="11" pos:column="16">basic_auth<pos:position pos:line="11" pos:column="26"/></name></decl>, <decl><type ref="prev"/><name pos:line="11" pos:column="28">local_basic<pos:position pos:line="11" pos:column="39"/></name><argument_list pos:line="11" pos:column="39">(<argument><expr><operator pos:line="11" pos:column="40">&amp;<pos:position pos:line="11" pos:column="45"/></operator><name pos:line="11" pos:column="41">basicConfig<pos:position pos:line="11" pos:column="52"/></name></expr></argument>)<pos:position pos:line="11" pos:column="53"/></argument_list></decl>;<pos:position pos:line="11" pos:column="54"/></decl_stmt>

    <comment type="block" pos:line="13" pos:column="5">/* Trim leading whitespace before decoding */</comment>
    <while pos:line="14" pos:column="5">while <condition pos:line="14" pos:column="11">(<expr><call><name pos:line="14" pos:column="12">xisspace<pos:position pos:line="14" pos:column="20"/></name><argument_list pos:line="14" pos:column="20">(<argument><expr><operator pos:line="14" pos:column="21">*<pos:position pos:line="14" pos:column="22"/></operator><name pos:line="14" pos:column="22">proxy_auth<pos:position pos:line="14" pos:column="32"/></name></expr></argument>)<pos:position pos:line="14" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="34"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="15" pos:column="9">proxy_auth<pos:position pos:line="15" pos:column="19"/></name><operator pos:line="15" pos:column="19">++<pos:position pos:line="15" pos:column="21"/></operator></expr>;<pos:position pos:line="15" pos:column="22"/></expr_stmt></block></while>

    <expr_stmt><expr><call><name><name pos:line="17" pos:column="5">local_basic<pos:position pos:line="17" pos:column="16"/></name><operator pos:line="17" pos:column="16">.<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="17">decode<pos:position pos:line="17" pos:column="23"/></name></name><argument_list pos:line="17" pos:column="23">(<argument><expr><name pos:line="17" pos:column="24">proxy_auth<pos:position pos:line="17" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="36">auth_user_request<pos:position pos:line="17" pos:column="53"/></name></expr></argument>)<pos:position pos:line="17" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="55"/></expr_stmt>

    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><operator pos:line="19" pos:column="9">!<pos:position pos:line="19" pos:column="10"/></operator><call><name><name pos:line="19" pos:column="10">local_basic<pos:position pos:line="19" pos:column="21"/></name><operator pos:line="19" pos:column="21">.<pos:position pos:line="19" pos:column="22"/></operator><name pos:line="19" pos:column="22">valid<pos:position pos:line="19" pos:column="27"/></name></name><argument_list pos:line="19" pos:column="27">()<pos:position pos:line="19" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="30"/></condition><then pos:line="19" pos:column="30"> <block pos:line="19" pos:column="31">{
        <expr_stmt><expr><call><name><name pos:line="20" pos:column="9">local_basic<pos:position pos:line="20" pos:column="20"/></name><operator pos:line="20" pos:column="20">.<pos:position pos:line="20" pos:column="21"/></operator><name pos:line="20" pos:column="21">makeLoggingInstance<pos:position pos:line="20" pos:column="40"/></name></name><argument_list pos:line="20" pos:column="40">(<argument><expr><name pos:line="20" pos:column="41">auth_user_request<pos:position pos:line="20" pos:column="58"/></name></expr></argument>)<pos:position pos:line="20" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="60"/></expr_stmt>
        <return pos:line="21" pos:column="9">return <expr><name pos:line="21" pos:column="16">auth_user_request<pos:position pos:line="21" pos:column="33"/></name></expr>;<pos:position pos:line="21" pos:column="34"/></return>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="24" pos:column="5">/* now lookup and see if we have a matching auth_user structure in
     * memory. */</comment>

    <decl_stmt><decl><type><name pos:line="27" pos:column="5">AuthUser<pos:position pos:line="27" pos:column="13"/></name> <modifier pos:line="27" pos:column="14">*<pos:position pos:line="27" pos:column="15"/></modifier></type><name pos:line="27" pos:column="15">auth_user<pos:position pos:line="27" pos:column="24"/></name></decl>;<pos:position pos:line="27" pos:column="25"/></decl_stmt>

    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><operator pos:line="29" pos:column="9">(<pos:position pos:line="29" pos:column="10"/></operator><name pos:line="29" pos:column="10">auth_user<pos:position pos:line="29" pos:column="19"/></name> <operator pos:line="29" pos:column="20">=<pos:position pos:line="29" pos:column="21"/></operator> <call><name pos:line="29" pos:column="22">authBasicAuthUserFindUsername<pos:position pos:line="29" pos:column="51"/></name><argument_list pos:line="29" pos:column="51">(<argument><expr><call><name><name pos:line="29" pos:column="52">local_basic<pos:position pos:line="29" pos:column="63"/></name><operator pos:line="29" pos:column="63">.<pos:position pos:line="29" pos:column="64"/></operator><name pos:line="29" pos:column="64">username<pos:position pos:line="29" pos:column="72"/></name></name><argument_list pos:line="29" pos:column="72">()<pos:position pos:line="29" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="29" pos:column="75"/></argument_list></call><operator pos:line="29" pos:column="75">)<pos:position pos:line="29" pos:column="76"/></operator> <operator pos:line="29" pos:column="77">==<pos:position pos:line="29" pos:column="79"/></operator> <name pos:line="29" pos:column="80">NULL<pos:position pos:line="29" pos:column="84"/></name></expr>)<pos:position pos:line="29" pos:column="85"/></condition><then pos:line="29" pos:column="85"> <block pos:line="29" pos:column="86">{
        <expr_stmt><expr><name pos:line="30" pos:column="9">auth_user<pos:position pos:line="30" pos:column="18"/></name> <operator pos:line="30" pos:column="19">=<pos:position pos:line="30" pos:column="20"/></operator> <call><name><name pos:line="30" pos:column="21">local_basic<pos:position pos:line="30" pos:column="32"/></name><operator pos:line="30" pos:column="32">.<pos:position pos:line="30" pos:column="33"/></operator><name pos:line="30" pos:column="33">makeCachedFrom<pos:position pos:line="30" pos:column="47"/></name></name><argument_list pos:line="30" pos:column="47">()<pos:position pos:line="30" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><name pos:line="31" pos:column="9">basic_auth<pos:position pos:line="31" pos:column="19"/></name> <operator pos:line="31" pos:column="20">=<pos:position pos:line="31" pos:column="21"/></operator> <cast type="dynamic" pos:line="31" pos:column="22">dynamic_cast<argument_list type="generic" pos:line="31" pos:column="34">&lt;<argument><expr><name pos:line="31" pos:column="35">BasicUser<pos:position pos:line="31" pos:column="44"/></name> <operator pos:line="31" pos:column="45">*<pos:position pos:line="31" pos:column="46"/></operator></expr></argument>&gt;<pos:position pos:line="31" pos:column="50"/></argument_list><argument_list pos:line="31" pos:column="47">(<argument><expr><name pos:line="31" pos:column="48">auth_user<pos:position pos:line="31" pos:column="57"/></name></expr></argument>)<pos:position pos:line="31" pos:column="58"/></argument_list></cast></expr>;<pos:position pos:line="31" pos:column="59"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">assert<pos:position pos:line="32" pos:column="15"/></name> <argument_list pos:line="32" pos:column="16">(<argument><expr><name pos:line="32" pos:column="17">basic_auth<pos:position pos:line="32" pos:column="27"/></name></expr></argument>)<pos:position pos:line="32" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="33" pos:column="6"/></block></then> <else pos:line="33" pos:column="7">else <block pos:line="33" pos:column="12">{
        <expr_stmt><expr><name pos:line="34" pos:column="9">basic_auth<pos:position pos:line="34" pos:column="19"/></name> <operator pos:line="34" pos:column="20">=<pos:position pos:line="34" pos:column="21"/></operator> <cast type="dynamic" pos:line="34" pos:column="22">dynamic_cast<argument_list type="generic" pos:line="34" pos:column="34">&lt;<argument><expr><name pos:line="34" pos:column="35">BasicUser<pos:position pos:line="34" pos:column="44"/></name> <operator pos:line="34" pos:column="45">*<pos:position pos:line="34" pos:column="46"/></operator></expr></argument>&gt;<pos:position pos:line="34" pos:column="50"/></argument_list><argument_list pos:line="34" pos:column="47">(<argument><expr><name pos:line="34" pos:column="48">auth_user<pos:position pos:line="34" pos:column="57"/></name></expr></argument>)<pos:position pos:line="34" pos:column="58"/></argument_list></cast></expr>;<pos:position pos:line="34" pos:column="59"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">assert<pos:position pos:line="35" pos:column="15"/></name> <argument_list pos:line="35" pos:column="16">(<argument><expr><name pos:line="35" pos:column="17">basic_auth<pos:position pos:line="35" pos:column="27"/></name></expr></argument>)<pos:position pos:line="35" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="36" pos:column="9">basic_auth<pos:position pos:line="36" pos:column="19"/></name><operator pos:line="36" pos:column="19">-&gt;<pos:position pos:line="36" pos:column="24"/></operator><name pos:line="36" pos:column="21">updateCached<pos:position pos:line="36" pos:column="33"/></name></name> <argument_list pos:line="36" pos:column="34">(<argument><expr><operator pos:line="36" pos:column="35">&amp;<pos:position pos:line="36" pos:column="40"/></operator><name pos:line="36" pos:column="36">local_basic<pos:position pos:line="36" pos:column="47"/></name></expr></argument>)<pos:position pos:line="36" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="49"/></expr_stmt>
    }<pos:position pos:line="37" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="39" pos:column="5">/* link the request to the in-cache user */</comment>
    <expr_stmt><expr><call><name><name pos:line="40" pos:column="5">auth_user_request<pos:position pos:line="40" pos:column="22"/></name><operator pos:line="40" pos:column="22">-&gt;<pos:position pos:line="40" pos:column="27"/></operator><name pos:line="40" pos:column="24">user<pos:position pos:line="40" pos:column="28"/></name></name><argument_list pos:line="40" pos:column="28">(<argument><expr><name pos:line="40" pos:column="29">basic_auth<pos:position pos:line="40" pos:column="39"/></name></expr></argument>)<pos:position pos:line="40" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="41"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="42" pos:column="5">basic_auth<pos:position pos:line="42" pos:column="15"/></name><operator pos:line="42" pos:column="15">-&gt;<pos:position pos:line="42" pos:column="20"/></operator><name pos:line="42" pos:column="17">addRequest<pos:position pos:line="42" pos:column="27"/></name></name><argument_list pos:line="42" pos:column="27">(<argument><expr><name pos:line="42" pos:column="28">auth_user_request<pos:position pos:line="42" pos:column="45"/></name></expr></argument>)<pos:position pos:line="42" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="47"/></expr_stmt>

    <return pos:line="44" pos:column="5">return <expr><name pos:line="44" pos:column="12">auth_user_request<pos:position pos:line="44" pos:column="29"/></name></expr>;<pos:position pos:line="44" pos:column="30"/></return>
}<pos:position pos:line="45" pos:column="2"/></block></function></unit>
