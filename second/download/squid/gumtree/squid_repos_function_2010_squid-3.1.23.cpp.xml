<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2010_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HttpStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">sendComplete<pos:position pos:line="2" pos:column="28"/></name></name><parameter_list pos:line="2" pos:column="28">(<parameter><decl><type><specifier pos:line="2" pos:column="29">const<pos:position pos:line="2" pos:column="34"/></specifier> <name pos:line="2" pos:column="35">CommIoCbParams<pos:position pos:line="2" pos:column="49"/></name> <modifier pos:line="2" pos:column="50">&amp;<pos:position pos:line="2" pos:column="55"/></modifier></type><name pos:line="2" pos:column="51">io<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="54"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">11<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">5<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="19">"httpSendComplete: FD "<pos:position pos:line="4" pos:column="42"/></literal> <operator pos:line="4" pos:column="43">&lt;&lt;<pos:position pos:line="4" pos:column="51"/></operator> <name pos:line="4" pos:column="46">fd<pos:position pos:line="4" pos:column="48"/></name> <operator pos:line="4" pos:column="49">&lt;&lt;<pos:position pos:line="4" pos:column="57"/></operator> <literal type="string" pos:line="4" pos:column="52">": size "<pos:position pos:line="4" pos:column="61"/></literal> <operator pos:line="4" pos:column="62">&lt;&lt;<pos:position pos:line="4" pos:column="70"/></operator> <name><name pos:line="4" pos:column="65">io<pos:position pos:line="4" pos:column="67"/></name><operator pos:line="4" pos:column="67">.<pos:position pos:line="4" pos:column="68"/></operator><name pos:line="4" pos:column="68">size<pos:position pos:line="4" pos:column="72"/></name></name> <operator pos:line="4" pos:column="73">&lt;&lt;<pos:position pos:line="4" pos:column="81"/></operator> <literal type="string" pos:line="4" pos:column="76">": errflag "<pos:position pos:line="4" pos:column="88"/></literal> <operator pos:line="4" pos:column="89">&lt;&lt;<pos:position pos:line="4" pos:column="97"/></operator> <name><name pos:line="4" pos:column="92">io<pos:position pos:line="4" pos:column="94"/></name><operator pos:line="4" pos:column="94">.<pos:position pos:line="4" pos:column="95"/></operator><name pos:line="4" pos:column="95">flag<pos:position pos:line="4" pos:column="99"/></name></name> <operator pos:line="4" pos:column="100">&lt;&lt;<pos:position pos:line="4" pos:column="108"/></operator> <literal type="string" pos:line="4" pos:column="103">"."<pos:position pos:line="4" pos:column="106"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="107"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="108"/></expr_stmt>
<cpp:if pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">if<pos:position pos:line="5" pos:column="4"/></cpp:directive> <expr><name pos:line="5" pos:column="5">URL_CHECKSUM_DEBUG<pos:position pos:line="5" pos:column="23"/></name></expr></cpp:if>

    <expr_stmt><expr><call><name><name pos:line="7" pos:column="5">entry<pos:position pos:line="7" pos:column="10"/></name><operator pos:line="7" pos:column="10">-&gt;<pos:position pos:line="7" pos:column="15"/></operator><name pos:line="7" pos:column="12">mem_obj<pos:position pos:line="7" pos:column="19"/></name><operator pos:line="7" pos:column="19">-&gt;<pos:position pos:line="7" pos:column="24"/></operator><name pos:line="7" pos:column="21">checkUrlChecksum<pos:position pos:line="7" pos:column="37"/></name></name><argument_list pos:line="7" pos:column="37">()<pos:position pos:line="7" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="40"/></expr_stmt>
<cpp:endif pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">endif<pos:position pos:line="8" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name><name pos:line="10" pos:column="9">io<pos:position pos:line="10" pos:column="11"/></name><operator pos:line="10" pos:column="11">.<pos:position pos:line="10" pos:column="12"/></operator><name pos:line="10" pos:column="12">size<pos:position pos:line="10" pos:column="16"/></name></name> <operator pos:line="10" pos:column="17">&gt;<pos:position pos:line="10" pos:column="21"/></operator> <literal type="number" pos:line="10" pos:column="19">0<pos:position pos:line="10" pos:column="20"/></literal></expr>)<pos:position pos:line="10" pos:column="21"/></condition><then pos:line="10" pos:column="21"> <block pos:line="10" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">fd_bytes<pos:position pos:line="11" pos:column="17"/></name><argument_list pos:line="11" pos:column="17">(<argument><expr><name pos:line="11" pos:column="18">fd<pos:position pos:line="11" pos:column="20"/></name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="22">io<pos:position pos:line="11" pos:column="24"/></name><operator pos:line="11" pos:column="24">.<pos:position pos:line="11" pos:column="25"/></operator><name pos:line="11" pos:column="25">size<pos:position pos:line="11" pos:column="29"/></name></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="31">FD_WRITE<pos:position pos:line="11" pos:column="39"/></name></expr></argument>)<pos:position pos:line="11" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">kb_incr<pos:position pos:line="12" pos:column="16"/></name><argument_list pos:line="12" pos:column="16">(<argument><expr><operator pos:line="12" pos:column="17">&amp;<pos:position pos:line="12" pos:column="22"/></operator><name><name pos:line="12" pos:column="18">statCounter<pos:position pos:line="12" pos:column="29"/></name><operator pos:line="12" pos:column="29">.<pos:position pos:line="12" pos:column="30"/></operator><name pos:line="12" pos:column="30">server<pos:position pos:line="12" pos:column="36"/></name><operator pos:line="12" pos:column="36">.<pos:position pos:line="12" pos:column="37"/></operator><name pos:line="12" pos:column="37">all<pos:position pos:line="12" pos:column="40"/></name><operator pos:line="12" pos:column="40">.<pos:position pos:line="12" pos:column="41"/></operator><name pos:line="12" pos:column="41">kbytes_out<pos:position pos:line="12" pos:column="51"/></name></name></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="53">io<pos:position pos:line="12" pos:column="55"/></name><operator pos:line="12" pos:column="55">.<pos:position pos:line="12" pos:column="56"/></operator><name pos:line="12" pos:column="56">size<pos:position pos:line="12" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="62"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">kb_incr<pos:position pos:line="13" pos:column="16"/></name><argument_list pos:line="13" pos:column="16">(<argument><expr><operator pos:line="13" pos:column="17">&amp;<pos:position pos:line="13" pos:column="22"/></operator><name><name pos:line="13" pos:column="18">statCounter<pos:position pos:line="13" pos:column="29"/></name><operator pos:line="13" pos:column="29">.<pos:position pos:line="13" pos:column="30"/></operator><name pos:line="13" pos:column="30">server<pos:position pos:line="13" pos:column="36"/></name><operator pos:line="13" pos:column="36">.<pos:position pos:line="13" pos:column="37"/></operator><name pos:line="13" pos:column="37">http<pos:position pos:line="13" pos:column="41"/></name><operator pos:line="13" pos:column="41">.<pos:position pos:line="13" pos:column="42"/></operator><name pos:line="13" pos:column="42">kbytes_out<pos:position pos:line="13" pos:column="52"/></name></name></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="54">io<pos:position pos:line="13" pos:column="56"/></name><operator pos:line="13" pos:column="56">.<pos:position pos:line="13" pos:column="57"/></operator><name pos:line="13" pos:column="57">size<pos:position pos:line="13" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="63"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name><name pos:line="16" pos:column="9">io<pos:position pos:line="16" pos:column="11"/></name><operator pos:line="16" pos:column="11">.<pos:position pos:line="16" pos:column="12"/></operator><name pos:line="16" pos:column="12">flag<pos:position pos:line="16" pos:column="16"/></name></name> <operator pos:line="16" pos:column="17">==<pos:position pos:line="16" pos:column="19"/></operator> <name pos:line="16" pos:column="20">COMM_ERR_CLOSING<pos:position pos:line="16" pos:column="36"/></name></expr>)<pos:position pos:line="16" pos:column="37"/></condition><then pos:line="16" pos:column="37">
        <block type="pseudo"><return pos:line="17" pos:column="9">return;<pos:position pos:line="17" pos:column="16"/></return></block></then></if>

    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name><name pos:line="19" pos:column="9">io<pos:position pos:line="19" pos:column="11"/></name><operator pos:line="19" pos:column="11">.<pos:position pos:line="19" pos:column="12"/></operator><name pos:line="19" pos:column="12">flag<pos:position pos:line="19" pos:column="16"/></name></name></expr>)<pos:position pos:line="19" pos:column="17"/></condition><then pos:line="19" pos:column="17"> <block pos:line="19" pos:column="18">{
        <decl_stmt><decl><type><name pos:line="20" pos:column="9">ErrorState<pos:position pos:line="20" pos:column="19"/></name> <modifier pos:line="20" pos:column="20">*<pos:position pos:line="20" pos:column="21"/></modifier></type><name pos:line="20" pos:column="21">err<pos:position pos:line="20" pos:column="24"/></name></decl>;<pos:position pos:line="20" pos:column="25"/></decl_stmt>
        <expr_stmt><expr><name pos:line="21" pos:column="9">err<pos:position pos:line="21" pos:column="12"/></name> <operator pos:line="21" pos:column="13">=<pos:position pos:line="21" pos:column="14"/></operator> <call><name pos:line="21" pos:column="15">errorCon<pos:position pos:line="21" pos:column="23"/></name><argument_list pos:line="21" pos:column="23">(<argument><expr><name pos:line="21" pos:column="24">ERR_WRITE_ERROR<pos:position pos:line="21" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="41">HTTP_BAD_GATEWAY<pos:position pos:line="21" pos:column="57"/></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="59">fwd<pos:position pos:line="21" pos:column="62"/></name><operator pos:line="21" pos:column="62">-&gt;<pos:position pos:line="21" pos:column="67"/></operator><name pos:line="21" pos:column="64">request<pos:position pos:line="21" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="73"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="22" pos:column="9">err<pos:position pos:line="22" pos:column="12"/></name><operator pos:line="22" pos:column="12">-&gt;<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="14">xerrno<pos:position pos:line="22" pos:column="20"/></name></name> <operator pos:line="22" pos:column="21">=<pos:position pos:line="22" pos:column="22"/></operator> <name><name pos:line="22" pos:column="23">io<pos:position pos:line="22" pos:column="25"/></name><operator pos:line="22" pos:column="25">.<pos:position pos:line="22" pos:column="26"/></operator><name pos:line="22" pos:column="26">xerrno<pos:position pos:line="22" pos:column="32"/></name></name></expr>;<pos:position pos:line="22" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="23" pos:column="9">fwd<pos:position pos:line="23" pos:column="12"/></name><operator pos:line="23" pos:column="12">-&gt;<pos:position pos:line="23" pos:column="17"/></operator><name pos:line="23" pos:column="14">fail<pos:position pos:line="23" pos:column="18"/></name></name><argument_list pos:line="23" pos:column="18">(<argument><expr><name pos:line="23" pos:column="19">err<pos:position pos:line="23" pos:column="22"/></name></expr></argument>)<pos:position pos:line="23" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">comm_close<pos:position pos:line="24" pos:column="19"/></name><argument_list pos:line="24" pos:column="19">(<argument><expr><name pos:line="24" pos:column="20">fd<pos:position pos:line="24" pos:column="22"/></name></expr></argument>)<pos:position pos:line="24" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="24"/></expr_stmt>
        <return pos:line="25" pos:column="9">return;<pos:position pos:line="25" pos:column="16"/></return>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="28" pos:column="5">/*
     * Set the read timeout here because it hasn't been set yet.
     * We only set the read timeout after the request has been
     * fully written to the server-side.  If we start the timeout
     * after connection establishment, then we are likely to hit
     * the timeout for POST/PUT requests that have very large
     * request bodies.
     */</comment>
    <typedef pos:line="36" pos:column="5">typedef <type><name><name pos:line="36" pos:column="13">CommCbMemFunT<pos:position pos:line="36" pos:column="26"/></name><argument_list type="generic" pos:line="36" pos:column="26">&lt;<argument><expr><name pos:line="36" pos:column="27">HttpStateData<pos:position pos:line="36" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="42">CommTimeoutCbParams<pos:position pos:line="36" pos:column="61"/></name></expr></argument>&gt;<pos:position pos:line="36" pos:column="65"/></argument_list></name></type> <name pos:line="36" pos:column="63">TimeoutDialer<pos:position pos:line="36" pos:column="76"/></name>;<pos:position pos:line="36" pos:column="77"/></typedef>
    <decl_stmt><decl><type><name><name pos:line="37" pos:column="5">AsyncCall<pos:position pos:line="37" pos:column="14"/></name><operator pos:line="37" pos:column="14">::<pos:position pos:line="37" pos:column="16"/></operator><name pos:line="37" pos:column="16">Pointer<pos:position pos:line="37" pos:column="23"/></name></name></type> <name pos:line="37" pos:column="24">timeoutCall<pos:position pos:line="37" pos:column="35"/></name> <init pos:line="37" pos:column="36">=  <expr><call><name pos:line="37" pos:column="39">JobCallback<pos:position pos:line="37" pos:column="50"/></name><argument_list pos:line="37" pos:column="50">(<argument><expr><literal type="number" pos:line="37" pos:column="51">11<pos:position pos:line="37" pos:column="53"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="55">5<pos:position pos:line="37" pos:column="56"/></literal></expr></argument>,
                                      <argument><expr><name pos:line="38" pos:column="39">TimeoutDialer<pos:position pos:line="38" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="54">this<pos:position pos:line="38" pos:column="58"/></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="60">HttpStateData<pos:position pos:line="38" pos:column="73"/></name><operator pos:line="38" pos:column="73">::<pos:position pos:line="38" pos:column="75"/></operator><name pos:line="38" pos:column="75">httpTimeout<pos:position pos:line="38" pos:column="86"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="87"/></argument_list></call></expr></init></decl>;<pos:position pos:line="38" pos:column="88"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="40" pos:column="5">commSetTimeout<pos:position pos:line="40" pos:column="19"/></name><argument_list pos:line="40" pos:column="19">(<argument><expr><name pos:line="40" pos:column="20">fd<pos:position pos:line="40" pos:column="22"/></name></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="24">Config<pos:position pos:line="40" pos:column="30"/></name><operator pos:line="40" pos:column="30">.<pos:position pos:line="40" pos:column="31"/></operator><name pos:line="40" pos:column="31">Timeout<pos:position pos:line="40" pos:column="38"/></name><operator pos:line="40" pos:column="38">.<pos:position pos:line="40" pos:column="39"/></operator><name pos:line="40" pos:column="39">read<pos:position pos:line="40" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="45">timeoutCall<pos:position pos:line="40" pos:column="56"/></name></expr></argument>)<pos:position pos:line="40" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="58"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="42" pos:column="5">flags<pos:position pos:line="42" pos:column="10"/></name><operator pos:line="42" pos:column="10">.<pos:position pos:line="42" pos:column="11"/></operator><name pos:line="42" pos:column="11">request_sent<pos:position pos:line="42" pos:column="23"/></name></name> <operator pos:line="42" pos:column="24">=<pos:position pos:line="42" pos:column="25"/></operator> <literal type="number" pos:line="42" pos:column="26">1<pos:position pos:line="42" pos:column="27"/></literal></expr>;<pos:position pos:line="42" pos:column="28"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="44" pos:column="5">orig_request<pos:position pos:line="44" pos:column="17"/></name><operator pos:line="44" pos:column="17">-&gt;<pos:position pos:line="44" pos:column="22"/></operator><name pos:line="44" pos:column="19">hier<pos:position pos:line="44" pos:column="23"/></name><operator pos:line="44" pos:column="23">.<pos:position pos:line="44" pos:column="24"/></operator><name pos:line="44" pos:column="24">peer_http_request_sent<pos:position pos:line="44" pos:column="46"/></name></name> <operator pos:line="44" pos:column="47">=<pos:position pos:line="44" pos:column="48"/></operator> <name pos:line="44" pos:column="49">current_time<pos:position pos:line="44" pos:column="61"/></name></expr>;<pos:position pos:line="44" pos:column="62"/></expr_stmt>
}<pos:position pos:line="45" pos:column="2"/></block></function></unit>
