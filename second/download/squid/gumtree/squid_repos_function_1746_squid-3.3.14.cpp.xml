<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1746_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">peerDigestSwapInCBlock<pos:position pos:line="2" pos:column="23"/></name><parameter_list pos:line="2" pos:column="23">(<parameter><decl><type><name pos:line="2" pos:column="24">void<pos:position pos:line="2" pos:column="28"/></name> <modifier pos:line="2" pos:column="29">*<pos:position pos:line="2" pos:column="30"/></modifier></type><name pos:line="2" pos:column="30">data<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="36">char<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">buf<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="47">ssize_t<pos:position pos:line="2" pos:column="54"/></name></type> <name pos:line="2" pos:column="55">size<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="60"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">DigestFetchState<pos:position pos:line="4" pos:column="21"/></name> <modifier pos:line="4" pos:column="22">*<pos:position pos:line="4" pos:column="23"/></modifier></type><name pos:line="4" pos:column="23">fetch<pos:position pos:line="4" pos:column="28"/></name> <init pos:line="4" pos:column="29">= <expr><operator pos:line="4" pos:column="31">(<pos:position pos:line="4" pos:column="32"/></operator><name pos:line="4" pos:column="32">DigestFetchState<pos:position pos:line="4" pos:column="48"/></name> <operator pos:line="4" pos:column="49">*<pos:position pos:line="4" pos:column="50"/></operator><operator pos:line="4" pos:column="50">)<pos:position pos:line="4" pos:column="51"/></operator><name pos:line="4" pos:column="51">data<pos:position pos:line="4" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="56"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><name><name pos:line="6" pos:column="12">fetch<pos:position pos:line="6" pos:column="17"/></name><operator pos:line="6" pos:column="17">-&gt;<pos:position pos:line="6" pos:column="22"/></operator><name pos:line="6" pos:column="19">state<pos:position pos:line="6" pos:column="24"/></name></name> <operator pos:line="6" pos:column="25">==<pos:position pos:line="6" pos:column="27"/></operator> <name pos:line="6" pos:column="28">DIGEST_READ_CBLOCK<pos:position pos:line="6" pos:column="46"/></name></expr></argument>)<pos:position pos:line="6" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="48"/></expr_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><call><name pos:line="8" pos:column="9">peerDigestFetchedEnough<pos:position pos:line="8" pos:column="32"/></name><argument_list pos:line="8" pos:column="32">(<argument><expr><name pos:line="8" pos:column="33">fetch<pos:position pos:line="8" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="40">buf<pos:position pos:line="8" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="45">size<pos:position pos:line="8" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="51">"peerDigestSwapInCBlock"<pos:position pos:line="8" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="76"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="77"/></condition><then pos:line="8" pos:column="77">
        <block type="pseudo"><return pos:line="9" pos:column="9">return <expr><operator pos:line="9" pos:column="16">-<pos:position pos:line="9" pos:column="17"/></operator><literal type="number" pos:line="9" pos:column="17">1<pos:position pos:line="9" pos:column="18"/></literal></expr>;<pos:position pos:line="9" pos:column="19"/></return></block></then></if>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name pos:line="11" pos:column="9">size<pos:position pos:line="11" pos:column="13"/></name> <operator pos:line="11" pos:column="14">&gt;=<pos:position pos:line="11" pos:column="19"/></operator> <operator pos:line="11" pos:column="17">(<pos:position pos:line="11" pos:column="18"/></operator><name pos:line="11" pos:column="18">ssize_t<pos:position pos:line="11" pos:column="25"/></name><operator pos:line="11" pos:column="25">)<pos:position pos:line="11" pos:column="26"/></operator><name pos:line="11" pos:column="26">StoreDigestCBlockSize<pos:position pos:line="11" pos:column="47"/></name></expr>)<pos:position pos:line="11" pos:column="48"/></condition><then pos:line="11" pos:column="48"> <block pos:line="11" pos:column="49">{
        <decl_stmt><decl><type><name pos:line="12" pos:column="9">PeerDigest<pos:position pos:line="12" pos:column="19"/></name> <modifier pos:line="12" pos:column="20">*<pos:position pos:line="12" pos:column="21"/></modifier></type><name pos:line="12" pos:column="21">pd<pos:position pos:line="12" pos:column="23"/></name> <init pos:line="12" pos:column="24">= <expr><name><name pos:line="12" pos:column="26">fetch<pos:position pos:line="12" pos:column="31"/></name><operator pos:line="12" pos:column="31">-&gt;<pos:position pos:line="12" pos:column="36"/></operator><name pos:line="12" pos:column="33">pd<pos:position pos:line="12" pos:column="35"/></name></name></expr></init></decl>;<pos:position pos:line="12" pos:column="36"/></decl_stmt>

        <expr_stmt><expr><call><name pos:line="14" pos:column="9">assert<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><name pos:line="14" pos:column="16">pd<pos:position pos:line="14" pos:column="18"/></name> <operator pos:line="14" pos:column="19">&amp;&amp;<pos:position pos:line="14" pos:column="29"/></operator> <call><name><name pos:line="14" pos:column="22">fetch<pos:position pos:line="14" pos:column="27"/></name><operator pos:line="14" pos:column="27">-&gt;<pos:position pos:line="14" pos:column="32"/></operator><name pos:line="14" pos:column="29">entry<pos:position pos:line="14" pos:column="34"/></name><operator pos:line="14" pos:column="34">-&gt;<pos:position pos:line="14" pos:column="39"/></operator><name pos:line="14" pos:column="36">getReply<pos:position pos:line="14" pos:column="44"/></name></name><argument_list pos:line="14" pos:column="44">()<pos:position pos:line="14" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="48"/></expr_stmt>

        <if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><call><name pos:line="16" pos:column="13">peerDigestSetCBlock<pos:position pos:line="16" pos:column="32"/></name><argument_list pos:line="16" pos:column="32">(<argument><expr><name pos:line="16" pos:column="33">pd<pos:position pos:line="16" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="37">buf<pos:position pos:line="16" pos:column="40"/></name></expr></argument>)<pos:position pos:line="16" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="42"/></condition><then pos:line="16" pos:column="42"> <block pos:line="16" pos:column="43">{
            <comment type="block" pos:line="17" pos:column="13">/* XXX: soon we will have variable header size */</comment>
            <comment type="block" pos:line="18" pos:column="13">/* switch to CD buffer and fetch digest guts */</comment>
            <expr_stmt><expr><name pos:line="19" pos:column="13">buf<pos:position pos:line="19" pos:column="16"/></name> <operator pos:line="19" pos:column="17">=<pos:position pos:line="19" pos:column="18"/></operator> <name pos:line="19" pos:column="19">NULL<pos:position pos:line="19" pos:column="23"/></name></expr>;<pos:position pos:line="19" pos:column="24"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="20" pos:column="13">assert<pos:position pos:line="20" pos:column="19"/></name><argument_list pos:line="20" pos:column="19">(<argument><expr><name><name pos:line="20" pos:column="20">pd<pos:position pos:line="20" pos:column="22"/></name><operator pos:line="20" pos:column="22">-&gt;<pos:position pos:line="20" pos:column="27"/></operator><name pos:line="20" pos:column="24">cd<pos:position pos:line="20" pos:column="26"/></name><operator pos:line="20" pos:column="26">-&gt;<pos:position pos:line="20" pos:column="31"/></operator><name pos:line="20" pos:column="28">mask<pos:position pos:line="20" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="21" pos:column="13">fetch<pos:position pos:line="21" pos:column="18"/></name><operator pos:line="21" pos:column="18">-&gt;<pos:position pos:line="21" pos:column="23"/></operator><name pos:line="21" pos:column="20">state<pos:position pos:line="21" pos:column="25"/></name></name> <operator pos:line="21" pos:column="26">=<pos:position pos:line="21" pos:column="27"/></operator> <name pos:line="21" pos:column="28">DIGEST_READ_MASK<pos:position pos:line="21" pos:column="44"/></name></expr>;<pos:position pos:line="21" pos:column="45"/></expr_stmt>
            <return pos:line="22" pos:column="13">return <expr><name pos:line="22" pos:column="20">StoreDigestCBlockSize<pos:position pos:line="22" pos:column="41"/></name></expr>;<pos:position pos:line="22" pos:column="42"/></return>
        }<pos:position pos:line="23" pos:column="10"/></block></then> <else pos:line="23" pos:column="11">else <block pos:line="23" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="24" pos:column="13">peerDigestFetchAbort<pos:position pos:line="24" pos:column="33"/></name><argument_list pos:line="24" pos:column="33">(<argument><expr><name pos:line="24" pos:column="34">fetch<pos:position pos:line="24" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="41">buf<pos:position pos:line="24" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="46">"invalid digest cblock"<pos:position pos:line="24" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="71"/></expr_stmt>
            <return pos:line="25" pos:column="13">return <expr><operator pos:line="25" pos:column="20">-<pos:position pos:line="25" pos:column="21"/></operator><literal type="number" pos:line="25" pos:column="21">1<pos:position pos:line="25" pos:column="22"/></literal></expr>;<pos:position pos:line="25" pos:column="23"/></return>
        }<pos:position pos:line="26" pos:column="10"/></block></else></if>
    }<pos:position pos:line="27" pos:column="6"/></block></then> <else pos:line="27" pos:column="7">else <block pos:line="27" pos:column="12">{
        <comment type="block" pos:line="28" pos:column="9">/* need more data, do we have space? */</comment>

        <if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name pos:line="30" pos:column="13">size<pos:position pos:line="30" pos:column="17"/></name> <operator pos:line="30" pos:column="18">&gt;=<pos:position pos:line="30" pos:column="23"/></operator> <name pos:line="30" pos:column="21">SM_PAGE_SIZE<pos:position pos:line="30" pos:column="33"/></name></expr>)<pos:position pos:line="30" pos:column="34"/></condition><then pos:line="30" pos:column="34"> <block pos:line="30" pos:column="35">{
            <expr_stmt><expr><call><name pos:line="31" pos:column="13">peerDigestFetchAbort<pos:position pos:line="31" pos:column="33"/></name><argument_list pos:line="31" pos:column="33">(<argument><expr><name pos:line="31" pos:column="34">fetch<pos:position pos:line="31" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="41">buf<pos:position pos:line="31" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="46">"digest cblock too big"<pos:position pos:line="31" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="71"/></expr_stmt>
            <return pos:line="32" pos:column="13">return <expr><operator pos:line="32" pos:column="20">-<pos:position pos:line="32" pos:column="21"/></operator><literal type="number" pos:line="32" pos:column="21">1<pos:position pos:line="32" pos:column="22"/></literal></expr>;<pos:position pos:line="32" pos:column="23"/></return>
        }<pos:position pos:line="33" pos:column="10"/></block></then> <else pos:line="33" pos:column="11">else <block pos:line="33" pos:column="16">{
            <return pos:line="34" pos:column="13">return <expr><literal type="number" pos:line="34" pos:column="20">0<pos:position pos:line="34" pos:column="21"/></literal></expr>;<pos:position pos:line="34" pos:column="22"/></return>		<comment type="block" pos:line="34" pos:column="33">/* We need more data */</comment>
        }<pos:position pos:line="35" pos:column="10"/></block></else></if>
    }<pos:position pos:line="36" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="38" pos:column="5">fatal<pos:position pos:line="38" pos:column="10"/></name><argument_list pos:line="38" pos:column="10">(<argument><expr><literal type="string" pos:line="38" pos:column="11">"peerDigestSwapInCBlock(): shouldn't get here!\n"<pos:position pos:line="38" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="62"/></expr_stmt>
    <return pos:line="39" pos:column="5">return <expr><literal type="number" pos:line="39" pos:column="12">0<pos:position pos:line="39" pos:column="13"/></literal></expr>;<pos:position pos:line="39" pos:column="14"/></return> <comment type="block" pos:line="39" pos:column="15">/* keep gcc happy */</comment>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
