<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7714_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">u_char<pos:position pos:line="1" pos:column="7"/></name> <modifier pos:line="1" pos:column="8">*<pos:position pos:line="1" pos:column="9"/></modifier></type>
<name pos:line="2" pos:column="1">snmp_pdu_decode<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name pos:line="2" pos:column="17">u_char<pos:position pos:line="2" pos:column="23"/></name> <modifier pos:line="2" pos:column="24">*<pos:position pos:line="2" pos:column="25"/></modifier></type> <name pos:line="2" pos:column="26">Packet<pos:position pos:line="2" pos:column="32"/></name></decl></parameter>,    <comment type="block" pos:line="2" pos:column="37">/* data */</comment>
                <parameter><decl><type><name pos:line="3" pos:column="17">int<pos:position pos:line="3" pos:column="20"/></name> <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type><name pos:line="3" pos:column="22">Length<pos:position pos:line="3" pos:column="28"/></name></decl></parameter>,        <comment type="block" pos:line="3" pos:column="37">/* &amp;length */</comment>
                <parameter><decl><type><name><name pos:line="4" pos:column="17">struct<pos:position pos:line="4" pos:column="23"/></name> <name pos:line="4" pos:column="24">snmp_pdu<pos:position pos:line="4" pos:column="32"/></name></name> <modifier pos:line="4" pos:column="33">*<pos:position pos:line="4" pos:column="34"/></modifier></type> <name pos:line="4" pos:column="35">PDU<pos:position pos:line="4" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="39"/></parameter_list>
<block pos:line="5" pos:column="1">{   <comment type="block" pos:line="5" pos:column="5">/* pdu */</comment>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">u_char<pos:position pos:line="6" pos:column="11"/></name> <modifier pos:line="6" pos:column="12">*<pos:position pos:line="6" pos:column="13"/></modifier></type><name pos:line="6" pos:column="13">bufp<pos:position pos:line="6" pos:column="17"/></name></decl>;<pos:position pos:line="6" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">u_char<pos:position pos:line="7" pos:column="11"/></name></type> <name pos:line="7" pos:column="12">PDUType<pos:position pos:line="7" pos:column="19"/></name></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">u_char<pos:position pos:line="8" pos:column="11"/></name></type> <name pos:line="8" pos:column="12">ASNType<pos:position pos:line="8" pos:column="19"/></name></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>
<cpp:if pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">if<pos:position pos:line="9" pos:column="4"/></cpp:directive> <expr><name pos:line="9" pos:column="5">UNUSED_CODE<pos:position pos:line="9" pos:column="16"/></name></expr></cpp:if>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">four<pos:position pos:line="10" pos:column="13"/></name></decl>;<pos:position pos:line="10" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">oid<pos:position pos:line="11" pos:column="8"/></name></type> <name><name pos:line="11" pos:column="9">objid<pos:position pos:line="11" pos:column="14"/></name><index pos:line="11" pos:column="14">[<expr><name pos:line="11" pos:column="15">MAX_NAME_LEN<pos:position pos:line="11" pos:column="27"/></name></expr>]<pos:position pos:line="11" pos:column="28"/></index></name></decl>;<pos:position pos:line="11" pos:column="29"/></decl_stmt>
<cpp:endif pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">endif<pos:position pos:line="12" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><name pos:line="14" pos:column="5">bufp<pos:position pos:line="14" pos:column="9"/></name> <operator pos:line="14" pos:column="10">=<pos:position pos:line="14" pos:column="11"/></operator> <call><name pos:line="14" pos:column="12">asn_parse_header<pos:position pos:line="14" pos:column="28"/></name><argument_list pos:line="14" pos:column="28">(<argument><expr><name pos:line="14" pos:column="29">Packet<pos:position pos:line="14" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="37">Length<pos:position pos:line="14" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="45">&amp;<pos:position pos:line="14" pos:column="50"/></operator><name pos:line="14" pos:column="46">PDUType<pos:position pos:line="14" pos:column="53"/></name></expr></argument>)<pos:position pos:line="14" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="55"/></expr_stmt>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">bufp<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">==<pos:position pos:line="15" pos:column="16"/></operator> <name pos:line="15" pos:column="17">NULL<pos:position pos:line="15" pos:column="21"/></name></expr>)<pos:position pos:line="15" pos:column="22"/></condition><then pos:line="15" pos:column="22">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="9">ASN_PARSE_ERROR<pos:position pos:line="16" pos:column="24"/></name><argument_list pos:line="16" pos:column="24">(<argument><expr><name pos:line="16" pos:column="25">NULL<pos:position pos:line="16" pos:column="29"/></name></expr></argument>)<pos:position pos:line="16" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="31"/></expr_stmt></block></then></if>

<cpp:if pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">if<pos:position pos:line="18" pos:column="4"/></cpp:directive> <expr><name pos:line="18" pos:column="5">DEBUG_PDU_DECODE<pos:position pos:line="18" pos:column="21"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">snmplib_debug<pos:position pos:line="19" pos:column="18"/></name><argument_list pos:line="19" pos:column="18">(<argument><expr><literal type="number" pos:line="19" pos:column="19">8<pos:position pos:line="19" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="22">"PDU Type: %d\n"<pos:position pos:line="19" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="40">PDUType<pos:position pos:line="19" pos:column="47"/></name></expr></argument>)<pos:position pos:line="19" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="49"/></expr_stmt>
<cpp:endif pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">endif<pos:position pos:line="20" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><name><name pos:line="22" pos:column="5">PDU<pos:position pos:line="22" pos:column="8"/></name><operator pos:line="22" pos:column="8">-&gt;<pos:position pos:line="22" pos:column="13"/></operator><name pos:line="22" pos:column="10">command<pos:position pos:line="22" pos:column="17"/></name></name> <operator pos:line="22" pos:column="18">=<pos:position pos:line="22" pos:column="19"/></operator> <name pos:line="22" pos:column="20">PDUType<pos:position pos:line="22" pos:column="27"/></name></expr>;<pos:position pos:line="22" pos:column="28"/></expr_stmt>
    <switch pos:line="23" pos:column="5">switch <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">PDUType<pos:position pos:line="23" pos:column="20"/></name></expr>)<pos:position pos:line="23" pos:column="21"/></condition> <block pos:line="23" pos:column="22">{

<cpp:if pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">if<pos:position pos:line="25" pos:column="4"/></cpp:directive> <expr><name pos:line="25" pos:column="5">TRP_REQ_MSG<pos:position pos:line="25" pos:column="16"/></name></expr></cpp:if>
    <case pos:line="26" pos:column="5">case <expr><name pos:line="26" pos:column="10">TRP_REQ_MSG<pos:position pos:line="26" pos:column="21"/></name></expr>:<pos:position pos:line="26" pos:column="22"/></case>

        <comment type="block" pos:line="28" pos:column="9">/* SNMPv1 Trap Message */</comment>

        <comment type="block" pos:line="30" pos:column="9">/* enterprise */</comment>
        <expr_stmt><expr><name><name pos:line="31" pos:column="9">PDU<pos:position pos:line="31" pos:column="12"/></name><operator pos:line="31" pos:column="12">-&gt;<pos:position pos:line="31" pos:column="17"/></operator><name pos:line="31" pos:column="14">enterprise_length<pos:position pos:line="31" pos:column="31"/></name></name> <operator pos:line="31" pos:column="32">=<pos:position pos:line="31" pos:column="33"/></operator> <name pos:line="31" pos:column="34">MAX_NAME_LEN<pos:position pos:line="31" pos:column="46"/></name></expr>;<pos:position pos:line="31" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><name pos:line="32" pos:column="9">bufp<pos:position pos:line="32" pos:column="13"/></name> <operator pos:line="32" pos:column="14">=<pos:position pos:line="32" pos:column="15"/></operator> <call><name pos:line="32" pos:column="16">asn_parse_objid<pos:position pos:line="32" pos:column="31"/></name><argument_list pos:line="32" pos:column="31">(<argument><expr><name pos:line="32" pos:column="32">bufp<pos:position pos:line="32" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="38">Length<pos:position pos:line="32" pos:column="44"/></name></expr></argument>,
                               <argument><expr><operator pos:line="33" pos:column="32">&amp;<pos:position pos:line="33" pos:column="37"/></operator><name pos:line="33" pos:column="33">ASNType<pos:position pos:line="33" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="42">objid<pos:position pos:line="33" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="49">&amp;<pos:position pos:line="33" pos:column="54"/></operator><name><name pos:line="33" pos:column="50">PDU<pos:position pos:line="33" pos:column="53"/></name><operator pos:line="33" pos:column="53">-&gt;<pos:position pos:line="33" pos:column="58"/></operator><name pos:line="33" pos:column="55">enterprise_length<pos:position pos:line="33" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="74"/></expr_stmt>
        <if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name pos:line="34" pos:column="13">bufp<pos:position pos:line="34" pos:column="17"/></name> <operator pos:line="34" pos:column="18">==<pos:position pos:line="34" pos:column="20"/></operator> <name pos:line="34" pos:column="21">NULL<pos:position pos:line="34" pos:column="25"/></name></expr>)<pos:position pos:line="34" pos:column="26"/></condition><then pos:line="34" pos:column="26">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="13">ASN_PARSE_ERROR<pos:position pos:line="35" pos:column="28"/></name><argument_list pos:line="35" pos:column="28">(<argument><expr><name pos:line="35" pos:column="29">NULL<pos:position pos:line="35" pos:column="33"/></name></expr></argument>)<pos:position pos:line="35" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="35"/></expr_stmt></block></then></if>

        <expr_stmt><expr><name><name pos:line="37" pos:column="9">PDU<pos:position pos:line="37" pos:column="12"/></name><operator pos:line="37" pos:column="12">-&gt;<pos:position pos:line="37" pos:column="17"/></operator><name pos:line="37" pos:column="14">enterprise<pos:position pos:line="37" pos:column="24"/></name></name> <operator pos:line="37" pos:column="25">=<pos:position pos:line="37" pos:column="26"/></operator> <operator pos:line="37" pos:column="27">(<pos:position pos:line="37" pos:column="28"/></operator><name pos:line="37" pos:column="28">oid<pos:position pos:line="37" pos:column="31"/></name> <operator pos:line="37" pos:column="32">*<pos:position pos:line="37" pos:column="33"/></operator><operator pos:line="37" pos:column="33">)<pos:position pos:line="37" pos:column="34"/></operator> <call><name pos:line="37" pos:column="35">xmalloc<pos:position pos:line="37" pos:column="42"/></name><argument_list pos:line="37" pos:column="42">(<argument><expr><name><name pos:line="37" pos:column="43">PDU<pos:position pos:line="37" pos:column="46"/></name><operator pos:line="37" pos:column="46">-&gt;<pos:position pos:line="37" pos:column="51"/></operator><name pos:line="37" pos:column="48">enterprise_length<pos:position pos:line="37" pos:column="65"/></name></name> <operator pos:line="37" pos:column="66">*<pos:position pos:line="37" pos:column="67"/></operator> <sizeof pos:line="37" pos:column="68">sizeof<argument_list pos:line="37" pos:column="74">(<argument><expr><name pos:line="37" pos:column="75">oid<pos:position pos:line="37" pos:column="78"/></name></expr></argument>)<pos:position pos:line="37" pos:column="79"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="37" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="81"/></expr_stmt>
        <if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name><name pos:line="38" pos:column="13">PDU<pos:position pos:line="38" pos:column="16"/></name><operator pos:line="38" pos:column="16">-&gt;<pos:position pos:line="38" pos:column="21"/></operator><name pos:line="38" pos:column="18">enterprise<pos:position pos:line="38" pos:column="28"/></name></name> <operator pos:line="38" pos:column="29">==<pos:position pos:line="38" pos:column="31"/></operator> <name pos:line="38" pos:column="32">NULL<pos:position pos:line="38" pos:column="36"/></name></expr>)<pos:position pos:line="38" pos:column="37"/></condition><then pos:line="38" pos:column="37"> <block pos:line="38" pos:column="38">{
            <expr_stmt><expr><call><name pos:line="39" pos:column="13">snmp_set_api_error<pos:position pos:line="39" pos:column="31"/></name><argument_list pos:line="39" pos:column="31">(<argument><expr><name pos:line="39" pos:column="32">SNMPERR_OS_ERR<pos:position pos:line="39" pos:column="46"/></name></expr></argument>)<pos:position pos:line="39" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="48"/></expr_stmt>
            <return pos:line="40" pos:column="13">return <expr><operator pos:line="40" pos:column="20">(<pos:position pos:line="40" pos:column="21"/></operator><name pos:line="40" pos:column="21">NULL<pos:position pos:line="40" pos:column="25"/></name><operator pos:line="40" pos:column="25">)<pos:position pos:line="40" pos:column="26"/></operator></expr>;<pos:position pos:line="40" pos:column="27"/></return>
        }<pos:position pos:line="41" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="42" pos:column="9">memcpy<pos:position pos:line="42" pos:column="15"/></name><argument_list pos:line="42" pos:column="15">(<argument><expr><operator pos:line="42" pos:column="16">(<pos:position pos:line="42" pos:column="17"/></operator><name pos:line="42" pos:column="17">char<pos:position pos:line="42" pos:column="21"/></name> <operator pos:line="42" pos:column="22">*<pos:position pos:line="42" pos:column="23"/></operator><operator pos:line="42" pos:column="23">)<pos:position pos:line="42" pos:column="24"/></operator> <name><name pos:line="42" pos:column="25">PDU<pos:position pos:line="42" pos:column="28"/></name><operator pos:line="42" pos:column="28">-&gt;<pos:position pos:line="42" pos:column="33"/></operator><name pos:line="42" pos:column="30">enterprise<pos:position pos:line="42" pos:column="40"/></name></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="42">(<pos:position pos:line="42" pos:column="43"/></operator><name pos:line="42" pos:column="43">char<pos:position pos:line="42" pos:column="47"/></name> <operator pos:line="42" pos:column="48">*<pos:position pos:line="42" pos:column="49"/></operator><operator pos:line="42" pos:column="49">)<pos:position pos:line="42" pos:column="50"/></operator> <name pos:line="42" pos:column="51">objid<pos:position pos:line="42" pos:column="56"/></name></expr></argument>,
               <argument><expr><name><name pos:line="43" pos:column="16">PDU<pos:position pos:line="43" pos:column="19"/></name><operator pos:line="43" pos:column="19">-&gt;<pos:position pos:line="43" pos:column="24"/></operator><name pos:line="43" pos:column="21">enterprise_length<pos:position pos:line="43" pos:column="38"/></name></name> <operator pos:line="43" pos:column="39">*<pos:position pos:line="43" pos:column="40"/></operator> <sizeof pos:line="43" pos:column="41">sizeof<argument_list pos:line="43" pos:column="47">(<argument><expr><name pos:line="43" pos:column="48">oid<pos:position pos:line="43" pos:column="51"/></name></expr></argument>)<pos:position pos:line="43" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="43" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="54"/></expr_stmt>

        <comment type="block" pos:line="45" pos:column="9">/* Agent-addr */</comment>
        <expr_stmt><expr><name pos:line="46" pos:column="9">four<pos:position pos:line="46" pos:column="13"/></name> <operator pos:line="46" pos:column="14">=<pos:position pos:line="46" pos:column="15"/></operator> <literal type="number" pos:line="46" pos:column="16">4<pos:position pos:line="46" pos:column="17"/></literal></expr>;<pos:position pos:line="46" pos:column="18"/></expr_stmt>
        <expr_stmt><expr><name pos:line="47" pos:column="9">bufp<pos:position pos:line="47" pos:column="13"/></name> <operator pos:line="47" pos:column="14">=<pos:position pos:line="47" pos:column="15"/></operator> <call><name pos:line="47" pos:column="16">asn_parse_string<pos:position pos:line="47" pos:column="32"/></name><argument_list pos:line="47" pos:column="32">(<argument><expr><name pos:line="47" pos:column="33">bufp<pos:position pos:line="47" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="39">Length<pos:position pos:line="47" pos:column="45"/></name></expr></argument>,
                                <argument><expr><operator pos:line="48" pos:column="33">&amp;<pos:position pos:line="48" pos:column="38"/></operator><name pos:line="48" pos:column="34">ASNType<pos:position pos:line="48" pos:column="41"/></name></expr></argument>,
                                <argument><expr><operator pos:line="49" pos:column="33">(<pos:position pos:line="49" pos:column="34"/></operator><name pos:line="49" pos:column="34">u_char<pos:position pos:line="49" pos:column="40"/></name> <operator pos:line="49" pos:column="41">*<pos:position pos:line="49" pos:column="42"/></operator><operator pos:line="49" pos:column="42">)<pos:position pos:line="49" pos:column="43"/></operator> <operator pos:line="49" pos:column="44">&amp;<pos:position pos:line="49" pos:column="49"/></operator> <name><name pos:line="49" pos:column="46">PDU<pos:position pos:line="49" pos:column="49"/></name><operator pos:line="49" pos:column="49">-&gt;<pos:position pos:line="49" pos:column="54"/></operator><name pos:line="49" pos:column="51">agent_addr<pos:position pos:line="49" pos:column="61"/></name><operator pos:line="49" pos:column="61">.<pos:position pos:line="49" pos:column="62"/></operator><name pos:line="49" pos:column="62">sin_addr<pos:position pos:line="49" pos:column="70"/></name><operator pos:line="49" pos:column="70">.<pos:position pos:line="49" pos:column="71"/></operator><name pos:line="49" pos:column="71">s_addr<pos:position pos:line="49" pos:column="77"/></name></name></expr></argument>,
                                <argument><expr><operator pos:line="50" pos:column="33">&amp;<pos:position pos:line="50" pos:column="38"/></operator><name pos:line="50" pos:column="34">four<pos:position pos:line="50" pos:column="38"/></name></expr></argument>)<pos:position pos:line="50" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="40"/></expr_stmt>
        <if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><name pos:line="51" pos:column="13">bufp<pos:position pos:line="51" pos:column="17"/></name> <operator pos:line="51" pos:column="18">==<pos:position pos:line="51" pos:column="20"/></operator> <name pos:line="51" pos:column="21">NULL<pos:position pos:line="51" pos:column="25"/></name></expr>)<pos:position pos:line="51" pos:column="26"/></condition><then pos:line="51" pos:column="26">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="52" pos:column="13">ASN_PARSE_ERROR<pos:position pos:line="52" pos:column="28"/></name><argument_list pos:line="52" pos:column="28">(<argument><expr><name pos:line="52" pos:column="29">NULL<pos:position pos:line="52" pos:column="33"/></name></expr></argument>)<pos:position pos:line="52" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="35"/></expr_stmt></block></then></if>

        <comment type="block" pos:line="54" pos:column="9">/* Generic trap */</comment>
        <expr_stmt><expr><name pos:line="55" pos:column="9">bufp<pos:position pos:line="55" pos:column="13"/></name> <operator pos:line="55" pos:column="14">=<pos:position pos:line="55" pos:column="15"/></operator> <call><name pos:line="55" pos:column="16">asn_parse_int<pos:position pos:line="55" pos:column="29"/></name><argument_list pos:line="55" pos:column="29">(<argument><expr><name pos:line="55" pos:column="30">bufp<pos:position pos:line="55" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="36">Length<pos:position pos:line="55" pos:column="42"/></name></expr></argument>,
                             <argument><expr><operator pos:line="56" pos:column="30">&amp;<pos:position pos:line="56" pos:column="35"/></operator><name pos:line="56" pos:column="31">ASNType<pos:position pos:line="56" pos:column="38"/></name></expr></argument>,
                             <argument><expr><operator pos:line="57" pos:column="30">(<pos:position pos:line="57" pos:column="31"/></operator><name pos:line="57" pos:column="31">int<pos:position pos:line="57" pos:column="34"/></name> <operator pos:line="57" pos:column="35">*<pos:position pos:line="57" pos:column="36"/></operator><operator pos:line="57" pos:column="36">)<pos:position pos:line="57" pos:column="37"/></operator> <operator pos:line="57" pos:column="38">&amp;<pos:position pos:line="57" pos:column="43"/></operator><name><name pos:line="57" pos:column="39">PDU<pos:position pos:line="57" pos:column="42"/></name><operator pos:line="57" pos:column="42">-&gt;<pos:position pos:line="57" pos:column="47"/></operator><name pos:line="57" pos:column="44">trap_type<pos:position pos:line="57" pos:column="53"/></name></name></expr></argument>,
                             <argument><expr><sizeof pos:line="58" pos:column="30">sizeof<argument_list pos:line="58" pos:column="36">(<argument><expr><name><name pos:line="58" pos:column="37">PDU<pos:position pos:line="58" pos:column="40"/></name><operator pos:line="58" pos:column="40">-&gt;<pos:position pos:line="58" pos:column="45"/></operator><name pos:line="58" pos:column="42">trap_type<pos:position pos:line="58" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="58" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="54"/></expr_stmt>
        <if pos:line="59" pos:column="9">if <condition pos:line="59" pos:column="12">(<expr><name pos:line="59" pos:column="13">bufp<pos:position pos:line="59" pos:column="17"/></name> <operator pos:line="59" pos:column="18">==<pos:position pos:line="59" pos:column="20"/></operator> <name pos:line="59" pos:column="21">NULL<pos:position pos:line="59" pos:column="25"/></name></expr>)<pos:position pos:line="59" pos:column="26"/></condition><then pos:line="59" pos:column="26">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="60" pos:column="13">ASN_PARSE_ERROR<pos:position pos:line="60" pos:column="28"/></name><argument_list pos:line="60" pos:column="28">(<argument><expr><name pos:line="60" pos:column="29">NULL<pos:position pos:line="60" pos:column="33"/></name></expr></argument>)<pos:position pos:line="60" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="35"/></expr_stmt></block></then></if>

        <comment type="block" pos:line="62" pos:column="9">/* Specific Trap */</comment>
        <expr_stmt><expr><name pos:line="63" pos:column="9">bufp<pos:position pos:line="63" pos:column="13"/></name> <operator pos:line="63" pos:column="14">=<pos:position pos:line="63" pos:column="15"/></operator> <call><name pos:line="63" pos:column="16">asn_parse_int<pos:position pos:line="63" pos:column="29"/></name><argument_list pos:line="63" pos:column="29">(<argument><expr><name pos:line="63" pos:column="30">bufp<pos:position pos:line="63" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="36">Length<pos:position pos:line="63" pos:column="42"/></name></expr></argument>,
                             <argument><expr><operator pos:line="64" pos:column="30">&amp;<pos:position pos:line="64" pos:column="35"/></operator><name pos:line="64" pos:column="31">ASNType<pos:position pos:line="64" pos:column="38"/></name></expr></argument>,
                             <argument><expr><operator pos:line="65" pos:column="30">(<pos:position pos:line="65" pos:column="31"/></operator><name pos:line="65" pos:column="31">int<pos:position pos:line="65" pos:column="34"/></name> <operator pos:line="65" pos:column="35">*<pos:position pos:line="65" pos:column="36"/></operator><operator pos:line="65" pos:column="36">)<pos:position pos:line="65" pos:column="37"/></operator> <operator pos:line="65" pos:column="38">&amp;<pos:position pos:line="65" pos:column="43"/></operator><name><name pos:line="65" pos:column="39">PDU<pos:position pos:line="65" pos:column="42"/></name><operator pos:line="65" pos:column="42">-&gt;<pos:position pos:line="65" pos:column="47"/></operator><name pos:line="65" pos:column="44">specific_type<pos:position pos:line="65" pos:column="57"/></name></name></expr></argument>,
                             <argument><expr><sizeof pos:line="66" pos:column="30">sizeof<argument_list pos:line="66" pos:column="36">(<argument><expr><name><name pos:line="66" pos:column="37">PDU<pos:position pos:line="66" pos:column="40"/></name><operator pos:line="66" pos:column="40">-&gt;<pos:position pos:line="66" pos:column="45"/></operator><name pos:line="66" pos:column="42">specific_type<pos:position pos:line="66" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="66" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="66" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="58"/></expr_stmt>
        <if pos:line="67" pos:column="9">if <condition pos:line="67" pos:column="12">(<expr><name pos:line="67" pos:column="13">bufp<pos:position pos:line="67" pos:column="17"/></name> <operator pos:line="67" pos:column="18">==<pos:position pos:line="67" pos:column="20"/></operator> <name pos:line="67" pos:column="21">NULL<pos:position pos:line="67" pos:column="25"/></name></expr>)<pos:position pos:line="67" pos:column="26"/></condition><then pos:line="67" pos:column="26">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="68" pos:column="13">ASN_PARSE_ERROR<pos:position pos:line="68" pos:column="28"/></name><argument_list pos:line="68" pos:column="28">(<argument><expr><name pos:line="68" pos:column="29">NULL<pos:position pos:line="68" pos:column="33"/></name></expr></argument>)<pos:position pos:line="68" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="35"/></expr_stmt></block></then></if>

        <comment type="block" pos:line="70" pos:column="9">/* Timestamp */</comment>
        <expr_stmt><expr><name pos:line="71" pos:column="9">bufp<pos:position pos:line="71" pos:column="13"/></name> <operator pos:line="71" pos:column="14">=<pos:position pos:line="71" pos:column="15"/></operator> <call><name pos:line="71" pos:column="16">asn_parse_unsigned_int<pos:position pos:line="71" pos:column="38"/></name><argument_list pos:line="71" pos:column="38">(<argument><expr><name pos:line="71" pos:column="39">bufp<pos:position pos:line="71" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="45">Length<pos:position pos:line="71" pos:column="51"/></name></expr></argument>,
                                      <argument><expr><operator pos:line="72" pos:column="39">&amp;<pos:position pos:line="72" pos:column="44"/></operator><name pos:line="72" pos:column="40">ASNType<pos:position pos:line="72" pos:column="47"/></name></expr></argument>,
                                      <argument><expr><operator pos:line="73" pos:column="39">&amp;<pos:position pos:line="73" pos:column="44"/></operator><name><name pos:line="73" pos:column="40">PDU<pos:position pos:line="73" pos:column="43"/></name><operator pos:line="73" pos:column="43">-&gt;<pos:position pos:line="73" pos:column="48"/></operator><name pos:line="73" pos:column="45">time<pos:position pos:line="73" pos:column="49"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="73" pos:column="51">sizeof<argument_list pos:line="73" pos:column="57">(<argument><expr><name><name pos:line="73" pos:column="58">PDU<pos:position pos:line="73" pos:column="61"/></name><operator pos:line="73" pos:column="61">-&gt;<pos:position pos:line="73" pos:column="66"/></operator><name pos:line="73" pos:column="63">time<pos:position pos:line="73" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="73" pos:column="68"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="73" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="70"/></expr_stmt>
        <if pos:line="74" pos:column="9">if <condition pos:line="74" pos:column="12">(<expr><name pos:line="74" pos:column="13">bufp<pos:position pos:line="74" pos:column="17"/></name> <operator pos:line="74" pos:column="18">==<pos:position pos:line="74" pos:column="20"/></operator> <name pos:line="74" pos:column="21">NULL<pos:position pos:line="74" pos:column="25"/></name></expr>)<pos:position pos:line="74" pos:column="26"/></condition><then pos:line="74" pos:column="26">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="75" pos:column="13">ASN_PARSE_ERROR<pos:position pos:line="75" pos:column="28"/></name><argument_list pos:line="75" pos:column="28">(<argument><expr><name pos:line="75" pos:column="29">NULL<pos:position pos:line="75" pos:column="33"/></name></expr></argument>)<pos:position pos:line="75" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="35"/></expr_stmt></block></then></if>
        <break pos:line="76" pos:column="9">break;<pos:position pos:line="76" pos:column="15"/></break>
<cpp:endif pos:line="77" pos:column="1">#<cpp:directive pos:line="77" pos:column="2">endif<pos:position pos:line="77" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" format="doxygen" pos:line="79" pos:column="5">/**********************************************************************/</comment>

    <case pos:line="81" pos:column="5">case <expr><name pos:line="81" pos:column="10">SNMP_PDU_GETBULK<pos:position pos:line="81" pos:column="26"/></name></expr>:<pos:position pos:line="81" pos:column="27"/></case>

        <comment type="block" pos:line="83" pos:column="9">/* SNMPv2 Bulk Request */</comment>

        <comment type="block" pos:line="85" pos:column="9">/* request id */</comment>
        <expr_stmt><expr><name pos:line="86" pos:column="9">bufp<pos:position pos:line="86" pos:column="13"/></name> <operator pos:line="86" pos:column="14">=<pos:position pos:line="86" pos:column="15"/></operator> <call><name pos:line="86" pos:column="16">asn_parse_int<pos:position pos:line="86" pos:column="29"/></name><argument_list pos:line="86" pos:column="29">(<argument><expr><name pos:line="86" pos:column="30">bufp<pos:position pos:line="86" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="36">Length<pos:position pos:line="86" pos:column="42"/></name></expr></argument>,
                             <argument><expr><operator pos:line="87" pos:column="30">&amp;<pos:position pos:line="87" pos:column="35"/></operator><name pos:line="87" pos:column="31">ASNType<pos:position pos:line="87" pos:column="38"/></name></expr></argument>,
                             <argument><expr><operator pos:line="88" pos:column="30">&amp;<pos:position pos:line="88" pos:column="35"/></operator><name><name pos:line="88" pos:column="31">PDU<pos:position pos:line="88" pos:column="34"/></name><operator pos:line="88" pos:column="34">-&gt;<pos:position pos:line="88" pos:column="39"/></operator><name pos:line="88" pos:column="36">reqid<pos:position pos:line="88" pos:column="41"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="88" pos:column="43">sizeof<argument_list pos:line="88" pos:column="49">(<argument><expr><name><name pos:line="88" pos:column="50">PDU<pos:position pos:line="88" pos:column="53"/></name><operator pos:line="88" pos:column="53">-&gt;<pos:position pos:line="88" pos:column="58"/></operator><name pos:line="88" pos:column="55">reqid<pos:position pos:line="88" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="88" pos:column="61"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="88" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="63"/></expr_stmt>
        <if pos:line="89" pos:column="9">if <condition pos:line="89" pos:column="12">(<expr><name pos:line="89" pos:column="13">bufp<pos:position pos:line="89" pos:column="17"/></name> <operator pos:line="89" pos:column="18">==<pos:position pos:line="89" pos:column="20"/></operator> <name pos:line="89" pos:column="21">NULL<pos:position pos:line="89" pos:column="25"/></name></expr>)<pos:position pos:line="89" pos:column="26"/></condition><then pos:line="89" pos:column="26">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="90" pos:column="13">ASN_PARSE_ERROR<pos:position pos:line="90" pos:column="28"/></name><argument_list pos:line="90" pos:column="28">(<argument><expr><name pos:line="90" pos:column="29">NULL<pos:position pos:line="90" pos:column="33"/></name></expr></argument>)<pos:position pos:line="90" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="35"/></expr_stmt></block></then></if>

        <comment type="block" pos:line="92" pos:column="9">/* non-repeaters */</comment>
        <expr_stmt><expr><name pos:line="93" pos:column="9">bufp<pos:position pos:line="93" pos:column="13"/></name> <operator pos:line="93" pos:column="14">=<pos:position pos:line="93" pos:column="15"/></operator> <call><name pos:line="93" pos:column="16">asn_parse_int<pos:position pos:line="93" pos:column="29"/></name><argument_list pos:line="93" pos:column="29">(<argument><expr><name pos:line="93" pos:column="30">bufp<pos:position pos:line="93" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="36">Length<pos:position pos:line="93" pos:column="42"/></name></expr></argument>,
                             <argument><expr><operator pos:line="94" pos:column="30">&amp;<pos:position pos:line="94" pos:column="35"/></operator><name pos:line="94" pos:column="31">ASNType<pos:position pos:line="94" pos:column="38"/></name></expr></argument>,
                             <argument><expr><operator pos:line="95" pos:column="30">&amp;<pos:position pos:line="95" pos:column="35"/></operator><name><name pos:line="95" pos:column="31">PDU<pos:position pos:line="95" pos:column="34"/></name><operator pos:line="95" pos:column="34">-&gt;<pos:position pos:line="95" pos:column="39"/></operator><name pos:line="95" pos:column="36">non_repeaters<pos:position pos:line="95" pos:column="49"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="95" pos:column="51">sizeof<argument_list pos:line="95" pos:column="57">(<argument><expr><name><name pos:line="95" pos:column="58">PDU<pos:position pos:line="95" pos:column="61"/></name><operator pos:line="95" pos:column="61">-&gt;<pos:position pos:line="95" pos:column="66"/></operator><name pos:line="95" pos:column="63">non_repeaters<pos:position pos:line="95" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="95" pos:column="77"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="95" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="79"/></expr_stmt>
        <if pos:line="96" pos:column="9">if <condition pos:line="96" pos:column="12">(<expr><name pos:line="96" pos:column="13">bufp<pos:position pos:line="96" pos:column="17"/></name> <operator pos:line="96" pos:column="18">==<pos:position pos:line="96" pos:column="20"/></operator> <name pos:line="96" pos:column="21">NULL<pos:position pos:line="96" pos:column="25"/></name></expr>)<pos:position pos:line="96" pos:column="26"/></condition><then pos:line="96" pos:column="26">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="97" pos:column="13">ASN_PARSE_ERROR<pos:position pos:line="97" pos:column="28"/></name><argument_list pos:line="97" pos:column="28">(<argument><expr><name pos:line="97" pos:column="29">NULL<pos:position pos:line="97" pos:column="33"/></name></expr></argument>)<pos:position pos:line="97" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="35"/></expr_stmt></block></then></if>

        <comment type="block" pos:line="99" pos:column="9">/* max-repetitions */</comment>
        <expr_stmt><expr><name pos:line="100" pos:column="9">bufp<pos:position pos:line="100" pos:column="13"/></name> <operator pos:line="100" pos:column="14">=<pos:position pos:line="100" pos:column="15"/></operator> <call><name pos:line="100" pos:column="16">asn_parse_int<pos:position pos:line="100" pos:column="29"/></name><argument_list pos:line="100" pos:column="29">(<argument><expr><name pos:line="100" pos:column="30">bufp<pos:position pos:line="100" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="36">Length<pos:position pos:line="100" pos:column="42"/></name></expr></argument>,
                             <argument><expr><operator pos:line="101" pos:column="30">&amp;<pos:position pos:line="101" pos:column="35"/></operator><name pos:line="101" pos:column="31">ASNType<pos:position pos:line="101" pos:column="38"/></name></expr></argument>,
                             <argument><expr><operator pos:line="102" pos:column="30">&amp;<pos:position pos:line="102" pos:column="35"/></operator><name><name pos:line="102" pos:column="31">PDU<pos:position pos:line="102" pos:column="34"/></name><operator pos:line="102" pos:column="34">-&gt;<pos:position pos:line="102" pos:column="39"/></operator><name pos:line="102" pos:column="36">max_repetitions<pos:position pos:line="102" pos:column="51"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="102" pos:column="53">sizeof<argument_list pos:line="102" pos:column="59">(<argument><expr><name><name pos:line="102" pos:column="60">PDU<pos:position pos:line="102" pos:column="63"/></name><operator pos:line="102" pos:column="63">-&gt;<pos:position pos:line="102" pos:column="68"/></operator><name pos:line="102" pos:column="65">max_repetitions<pos:position pos:line="102" pos:column="80"/></name></name></expr></argument>)<pos:position pos:line="102" pos:column="81"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="102" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="83"/></expr_stmt>
        <if pos:line="103" pos:column="9">if <condition pos:line="103" pos:column="12">(<expr><name pos:line="103" pos:column="13">bufp<pos:position pos:line="103" pos:column="17"/></name> <operator pos:line="103" pos:column="18">==<pos:position pos:line="103" pos:column="20"/></operator> <name pos:line="103" pos:column="21">NULL<pos:position pos:line="103" pos:column="25"/></name></expr>)<pos:position pos:line="103" pos:column="26"/></condition><then pos:line="103" pos:column="26">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="104" pos:column="13">ASN_PARSE_ERROR<pos:position pos:line="104" pos:column="28"/></name><argument_list pos:line="104" pos:column="28">(<argument><expr><name pos:line="104" pos:column="29">NULL<pos:position pos:line="104" pos:column="33"/></name></expr></argument>)<pos:position pos:line="104" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="35"/></expr_stmt></block></then></if>
        <break pos:line="105" pos:column="9">break;<pos:position pos:line="105" pos:column="15"/></break>

    <comment type="block" format="doxygen" pos:line="107" pos:column="5">/**********************************************************************/</comment>

    <default pos:line="109" pos:column="5">default:<pos:position pos:line="109" pos:column="13"/></default>

        <comment type="block" pos:line="111" pos:column="9">/* Normal PDU Encoding */</comment>

        <comment type="block" pos:line="113" pos:column="9">/* request id */</comment>
        <expr_stmt><expr><name pos:line="114" pos:column="9">bufp<pos:position pos:line="114" pos:column="13"/></name> <operator pos:line="114" pos:column="14">=<pos:position pos:line="114" pos:column="15"/></operator> <call><name pos:line="114" pos:column="16">asn_parse_int<pos:position pos:line="114" pos:column="29"/></name><argument_list pos:line="114" pos:column="29">(<argument><expr><name pos:line="114" pos:column="30">bufp<pos:position pos:line="114" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="36">Length<pos:position pos:line="114" pos:column="42"/></name></expr></argument>,
                             <argument><expr><operator pos:line="115" pos:column="30">&amp;<pos:position pos:line="115" pos:column="35"/></operator><name pos:line="115" pos:column="31">ASNType<pos:position pos:line="115" pos:column="38"/></name></expr></argument>,
                             <argument><expr><operator pos:line="116" pos:column="30">&amp;<pos:position pos:line="116" pos:column="35"/></operator><name><name pos:line="116" pos:column="31">PDU<pos:position pos:line="116" pos:column="34"/></name><operator pos:line="116" pos:column="34">-&gt;<pos:position pos:line="116" pos:column="39"/></operator><name pos:line="116" pos:column="36">reqid<pos:position pos:line="116" pos:column="41"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="116" pos:column="43">sizeof<argument_list pos:line="116" pos:column="49">(<argument><expr><name><name pos:line="116" pos:column="50">PDU<pos:position pos:line="116" pos:column="53"/></name><operator pos:line="116" pos:column="53">-&gt;<pos:position pos:line="116" pos:column="58"/></operator><name pos:line="116" pos:column="55">reqid<pos:position pos:line="116" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="116" pos:column="61"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="116" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="63"/></expr_stmt>
        <if pos:line="117" pos:column="9">if <condition pos:line="117" pos:column="12">(<expr><name pos:line="117" pos:column="13">bufp<pos:position pos:line="117" pos:column="17"/></name> <operator pos:line="117" pos:column="18">==<pos:position pos:line="117" pos:column="20"/></operator> <name pos:line="117" pos:column="21">NULL<pos:position pos:line="117" pos:column="25"/></name></expr>)<pos:position pos:line="117" pos:column="26"/></condition><then pos:line="117" pos:column="26">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="118" pos:column="13">ASN_PARSE_ERROR<pos:position pos:line="118" pos:column="28"/></name><argument_list pos:line="118" pos:column="28">(<argument><expr><name pos:line="118" pos:column="29">NULL<pos:position pos:line="118" pos:column="33"/></name></expr></argument>)<pos:position pos:line="118" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="35"/></expr_stmt></block></then></if>

<cpp:if pos:line="120" pos:column="1">#<cpp:directive pos:line="120" pos:column="2">if<pos:position pos:line="120" pos:column="4"/></cpp:directive> <expr><name pos:line="120" pos:column="5">DEBUG_PDU_DECODE<pos:position pos:line="120" pos:column="21"/></name></expr></cpp:if>
        <expr_stmt><expr><call><name pos:line="121" pos:column="9">snmplib_debug<pos:position pos:line="121" pos:column="22"/></name><argument_list pos:line="121" pos:column="22">(<argument><expr><literal type="number" pos:line="121" pos:column="23">8<pos:position pos:line="121" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="121" pos:column="26">"PDU Request ID: %d\n"<pos:position pos:line="121" pos:column="48"/></literal></expr></argument>, <argument><expr><name><name pos:line="121" pos:column="50">PDU<pos:position pos:line="121" pos:column="53"/></name><operator pos:line="121" pos:column="53">-&gt;<pos:position pos:line="121" pos:column="58"/></operator><name pos:line="121" pos:column="55">reqid<pos:position pos:line="121" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="121" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="62"/></expr_stmt>
<cpp:endif pos:line="122" pos:column="1">#<cpp:directive pos:line="122" pos:column="2">endif<pos:position pos:line="122" pos:column="7"/></cpp:directive></cpp:endif>

        <comment type="block" pos:line="124" pos:column="9">/* error status */</comment>
        <expr_stmt><expr><name pos:line="125" pos:column="9">bufp<pos:position pos:line="125" pos:column="13"/></name> <operator pos:line="125" pos:column="14">=<pos:position pos:line="125" pos:column="15"/></operator> <call><name pos:line="125" pos:column="16">asn_parse_int<pos:position pos:line="125" pos:column="29"/></name><argument_list pos:line="125" pos:column="29">(<argument><expr><name pos:line="125" pos:column="30">bufp<pos:position pos:line="125" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="125" pos:column="36">Length<pos:position pos:line="125" pos:column="42"/></name></expr></argument>,
                             <argument><expr><operator pos:line="126" pos:column="30">&amp;<pos:position pos:line="126" pos:column="35"/></operator><name pos:line="126" pos:column="31">ASNType<pos:position pos:line="126" pos:column="38"/></name></expr></argument>,
                             <argument><expr><operator pos:line="127" pos:column="30">&amp;<pos:position pos:line="127" pos:column="35"/></operator><name><name pos:line="127" pos:column="31">PDU<pos:position pos:line="127" pos:column="34"/></name><operator pos:line="127" pos:column="34">-&gt;<pos:position pos:line="127" pos:column="39"/></operator><name pos:line="127" pos:column="36">errstat<pos:position pos:line="127" pos:column="43"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="127" pos:column="45">sizeof<argument_list pos:line="127" pos:column="51">(<argument><expr><name><name pos:line="127" pos:column="52">PDU<pos:position pos:line="127" pos:column="55"/></name><operator pos:line="127" pos:column="55">-&gt;<pos:position pos:line="127" pos:column="60"/></operator><name pos:line="127" pos:column="57">errstat<pos:position pos:line="127" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="127" pos:column="65"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="127" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="67"/></expr_stmt>
        <if pos:line="128" pos:column="9">if <condition pos:line="128" pos:column="12">(<expr><name pos:line="128" pos:column="13">bufp<pos:position pos:line="128" pos:column="17"/></name> <operator pos:line="128" pos:column="18">==<pos:position pos:line="128" pos:column="20"/></operator> <name pos:line="128" pos:column="21">NULL<pos:position pos:line="128" pos:column="25"/></name></expr>)<pos:position pos:line="128" pos:column="26"/></condition><then pos:line="128" pos:column="26">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="129" pos:column="13">ASN_PARSE_ERROR<pos:position pos:line="129" pos:column="28"/></name><argument_list pos:line="129" pos:column="28">(<argument><expr><name pos:line="129" pos:column="29">NULL<pos:position pos:line="129" pos:column="33"/></name></expr></argument>)<pos:position pos:line="129" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="35"/></expr_stmt></block></then></if>

<cpp:if pos:line="131" pos:column="1">#<cpp:directive pos:line="131" pos:column="2">if<pos:position pos:line="131" pos:column="4"/></cpp:directive> <expr><name pos:line="131" pos:column="5">DEBUG_PDU_DECODE<pos:position pos:line="131" pos:column="21"/></name></expr></cpp:if>
        <expr_stmt><expr><call><name pos:line="132" pos:column="9">snmplib_debug<pos:position pos:line="132" pos:column="22"/></name><argument_list pos:line="132" pos:column="22">(<argument><expr><literal type="number" pos:line="132" pos:column="23">8<pos:position pos:line="132" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="132" pos:column="26">"PDU Error Status: %d\n"<pos:position pos:line="132" pos:column="50"/></literal></expr></argument>, <argument><expr><name><name pos:line="132" pos:column="52">PDU<pos:position pos:line="132" pos:column="55"/></name><operator pos:line="132" pos:column="55">-&gt;<pos:position pos:line="132" pos:column="60"/></operator><name pos:line="132" pos:column="57">errstat<pos:position pos:line="132" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="132" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="66"/></expr_stmt>
<cpp:endif pos:line="133" pos:column="1">#<cpp:directive pos:line="133" pos:column="2">endif<pos:position pos:line="133" pos:column="7"/></cpp:directive></cpp:endif>

        <comment type="block" pos:line="135" pos:column="9">/* error index */</comment>
        <expr_stmt><expr><name pos:line="136" pos:column="9">bufp<pos:position pos:line="136" pos:column="13"/></name> <operator pos:line="136" pos:column="14">=<pos:position pos:line="136" pos:column="15"/></operator> <call><name pos:line="136" pos:column="16">asn_parse_int<pos:position pos:line="136" pos:column="29"/></name><argument_list pos:line="136" pos:column="29">(<argument><expr><name pos:line="136" pos:column="30">bufp<pos:position pos:line="136" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="136" pos:column="36">Length<pos:position pos:line="136" pos:column="42"/></name></expr></argument>,
                             <argument><expr><operator pos:line="137" pos:column="30">&amp;<pos:position pos:line="137" pos:column="35"/></operator><name pos:line="137" pos:column="31">ASNType<pos:position pos:line="137" pos:column="38"/></name></expr></argument>,
                             <argument><expr><operator pos:line="138" pos:column="30">&amp;<pos:position pos:line="138" pos:column="35"/></operator><name><name pos:line="138" pos:column="31">PDU<pos:position pos:line="138" pos:column="34"/></name><operator pos:line="138" pos:column="34">-&gt;<pos:position pos:line="138" pos:column="39"/></operator><name pos:line="138" pos:column="36">errindex<pos:position pos:line="138" pos:column="44"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="138" pos:column="46">sizeof<argument_list pos:line="138" pos:column="52">(<argument><expr><name><name pos:line="138" pos:column="53">PDU<pos:position pos:line="138" pos:column="56"/></name><operator pos:line="138" pos:column="56">-&gt;<pos:position pos:line="138" pos:column="61"/></operator><name pos:line="138" pos:column="58">errindex<pos:position pos:line="138" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="138" pos:column="67"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="138" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="69"/></expr_stmt>
        <if pos:line="139" pos:column="9">if <condition pos:line="139" pos:column="12">(<expr><name pos:line="139" pos:column="13">bufp<pos:position pos:line="139" pos:column="17"/></name> <operator pos:line="139" pos:column="18">==<pos:position pos:line="139" pos:column="20"/></operator> <name pos:line="139" pos:column="21">NULL<pos:position pos:line="139" pos:column="25"/></name></expr>)<pos:position pos:line="139" pos:column="26"/></condition><then pos:line="139" pos:column="26">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="140" pos:column="13">ASN_PARSE_ERROR<pos:position pos:line="140" pos:column="28"/></name><argument_list pos:line="140" pos:column="28">(<argument><expr><name pos:line="140" pos:column="29">NULL<pos:position pos:line="140" pos:column="33"/></name></expr></argument>)<pos:position pos:line="140" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="35"/></expr_stmt></block></then></if>

<cpp:if pos:line="142" pos:column="1">#<cpp:directive pos:line="142" pos:column="2">if<pos:position pos:line="142" pos:column="4"/></cpp:directive> <expr><name pos:line="142" pos:column="5">DEBUG_PDU_DECODE<pos:position pos:line="142" pos:column="21"/></name></expr></cpp:if>
        <expr_stmt><expr><call><name pos:line="143" pos:column="9">snmplib_debug<pos:position pos:line="143" pos:column="22"/></name><argument_list pos:line="143" pos:column="22">(<argument><expr><literal type="number" pos:line="143" pos:column="23">8<pos:position pos:line="143" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="143" pos:column="26">"PDU Error Index: %d\n"<pos:position pos:line="143" pos:column="49"/></literal></expr></argument>, <argument><expr><name><name pos:line="143" pos:column="51">PDU<pos:position pos:line="143" pos:column="54"/></name><operator pos:line="143" pos:column="54">-&gt;<pos:position pos:line="143" pos:column="59"/></operator><name pos:line="143" pos:column="56">errindex<pos:position pos:line="143" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="143" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="66"/></expr_stmt>
<cpp:endif pos:line="144" pos:column="1">#<cpp:directive pos:line="144" pos:column="2">endif<pos:position pos:line="144" pos:column="7"/></cpp:directive></cpp:endif>

        <break pos:line="146" pos:column="9">break;<pos:position pos:line="146" pos:column="15"/></break>
    }<pos:position pos:line="147" pos:column="6"/></block></switch>

    <return pos:line="149" pos:column="5">return <expr><operator pos:line="149" pos:column="12">(<pos:position pos:line="149" pos:column="13"/></operator><name pos:line="149" pos:column="13">bufp<pos:position pos:line="149" pos:column="17"/></name><operator pos:line="149" pos:column="17">)<pos:position pos:line="149" pos:column="18"/></operator></expr>;<pos:position pos:line="149" pos:column="19"/></return>
}<pos:position pos:line="150" pos:column="2"/></block></function></unit>
