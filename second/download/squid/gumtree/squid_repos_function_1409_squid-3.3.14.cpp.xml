<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1409_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">icpHandleUdp<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><name pos:line="2" pos:column="14">int<pos:position pos:line="2" pos:column="17"/></name></type> <name pos:line="2" pos:column="18">sock<pos:position pos:line="2" pos:column="22"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="24">void<pos:position pos:line="2" pos:column="28"/></name> <modifier pos:line="2" pos:column="29">*<pos:position pos:line="2" pos:column="30"/></modifier></type><name pos:line="2" pos:column="30">data<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="35"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name> <modifier pos:line="4" pos:column="9">*<pos:position pos:line="4" pos:column="10"/></modifier></type><name pos:line="4" pos:column="10">N<pos:position pos:line="4" pos:column="11"/></name> <init pos:line="4" pos:column="12">= <expr><operator pos:line="4" pos:column="14">&amp;<pos:position pos:line="4" pos:column="19"/></operator><name pos:line="4" pos:column="15">incoming_sockets_accepted<pos:position pos:line="4" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="41"/></decl_stmt>

    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">Ip<pos:position pos:line="6" pos:column="7"/></name><operator pos:line="6" pos:column="7">::<pos:position pos:line="6" pos:column="9"/></operator><name pos:line="6" pos:column="9">Address<pos:position pos:line="6" pos:column="16"/></name></name></type> <name pos:line="6" pos:column="17">from<pos:position pos:line="6" pos:column="21"/></name></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">LOCAL_ARRAY<pos:position pos:line="7" pos:column="16"/></name><argument_list pos:line="7" pos:column="16">(<argument><expr><name pos:line="7" pos:column="17">char<pos:position pos:line="7" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="23">buf<pos:position pos:line="7" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="28">SQUID_UDP_SO_RCVBUF<pos:position pos:line="7" pos:column="47"/></name></expr></argument>)<pos:position pos:line="7" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="49"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">len<pos:position pos:line="8" pos:column="12"/></name></decl>;<pos:position pos:line="8" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">icp_version<pos:position pos:line="9" pos:column="20"/></name></decl>;<pos:position pos:line="9" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">max<pos:position pos:line="10" pos:column="12"/></name> <init pos:line="10" pos:column="13">= <expr><name pos:line="10" pos:column="15">INCOMING_UDP_MAX<pos:position pos:line="10" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="32"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="11" pos:column="5">Comm<pos:position pos:line="11" pos:column="9"/></name><operator pos:line="11" pos:column="9">::<pos:position pos:line="11" pos:column="11"/></operator><name pos:line="11" pos:column="11">SetSelect<pos:position pos:line="11" pos:column="20"/></name></name><argument_list pos:line="11" pos:column="20">(<argument><expr><name pos:line="11" pos:column="21">sock<pos:position pos:line="11" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="27">COMM_SELECT_READ<pos:position pos:line="11" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="45">icpHandleUdp<pos:position pos:line="11" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="59">NULL<pos:position pos:line="11" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="65">0<pos:position pos:line="11" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="68"/></expr_stmt>

    <while pos:line="13" pos:column="5">while <condition pos:line="13" pos:column="11">(<expr><name pos:line="13" pos:column="12">max<pos:position pos:line="13" pos:column="15"/></name></expr>)<pos:position pos:line="13" pos:column="16"/></condition> <block pos:line="13" pos:column="17">{
        <expr_stmt><expr><operator pos:line="14" pos:column="9">--<pos:position pos:line="14" pos:column="11"/></operator><name pos:line="14" pos:column="11">max<pos:position pos:line="14" pos:column="14"/></name></expr>;<pos:position pos:line="14" pos:column="15"/></expr_stmt>
        <expr_stmt><expr><name pos:line="15" pos:column="9">len<pos:position pos:line="15" pos:column="12"/></name> <operator pos:line="15" pos:column="13">=<pos:position pos:line="15" pos:column="14"/></operator> <call><name pos:line="15" pos:column="15">comm_udp_recvfrom<pos:position pos:line="15" pos:column="32"/></name><argument_list pos:line="15" pos:column="32">(<argument><expr><name pos:line="15" pos:column="33">sock<pos:position pos:line="15" pos:column="37"/></name></expr></argument>,
                                <argument><expr><name pos:line="16" pos:column="33">buf<pos:position pos:line="16" pos:column="36"/></name></expr></argument>,
                                <argument><expr><name pos:line="17" pos:column="33">SQUID_UDP_SO_RCVBUF<pos:position pos:line="17" pos:column="52"/></name> <operator pos:line="17" pos:column="53">-<pos:position pos:line="17" pos:column="54"/></operator> <literal type="number" pos:line="17" pos:column="55">1<pos:position pos:line="17" pos:column="56"/></literal></expr></argument>,
                                <argument><expr><literal type="number" pos:line="18" pos:column="33">0<pos:position pos:line="18" pos:column="34"/></literal></expr></argument>,
                                <argument><expr><name pos:line="19" pos:column="33">from<pos:position pos:line="19" pos:column="37"/></name></expr></argument>)<pos:position pos:line="19" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="39"/></expr_stmt>

        <if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name pos:line="21" pos:column="13">len<pos:position pos:line="21" pos:column="16"/></name> <operator pos:line="21" pos:column="17">==<pos:position pos:line="21" pos:column="19"/></operator> <literal type="number" pos:line="21" pos:column="20">0<pos:position pos:line="21" pos:column="21"/></literal></expr>)<pos:position pos:line="21" pos:column="22"/></condition><then pos:line="21" pos:column="22">
            <block type="pseudo"><break pos:line="22" pos:column="13">break;<pos:position pos:line="22" pos:column="19"/></break></block></then></if>

        <if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">len<pos:position pos:line="24" pos:column="16"/></name> <operator pos:line="24" pos:column="17">&lt;<pos:position pos:line="24" pos:column="21"/></operator> <literal type="number" pos:line="24" pos:column="19">0<pos:position pos:line="24" pos:column="20"/></literal></expr>)<pos:position pos:line="24" pos:column="21"/></condition><then pos:line="24" pos:column="21"> <block pos:line="24" pos:column="22">{
            <if pos:line="25" pos:column="13">if <condition pos:line="25" pos:column="16">(<expr><call><name pos:line="25" pos:column="17">ignoreErrno<pos:position pos:line="25" pos:column="28"/></name><argument_list pos:line="25" pos:column="28">(<argument><expr><name pos:line="25" pos:column="29">errno<pos:position pos:line="25" pos:column="34"/></name></expr></argument>)<pos:position pos:line="25" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="36"/></condition><then pos:line="25" pos:column="36">
                <block type="pseudo"><break pos:line="26" pos:column="17">break;<pos:position pos:line="26" pos:column="23"/></break></block></then></if>

<cpp:if pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">if<pos:position pos:line="28" pos:column="4"/></cpp:directive> <expr><name pos:line="28" pos:column="5">_SQUID_LINUX_<pos:position pos:line="28" pos:column="18"/></name></expr></cpp:if>
            <comment type="block" pos:line="29" pos:column="13">/* Some Linux systems seem to set the FD for reading and then
             * return ECONNREFUSED when sendto() fails and generates an ICMP
             * port unreachable message. */</comment>
            <comment type="block" pos:line="32" pos:column="13">/* or maybe an EHOSTUNREACH "No route to host" message */</comment>
            <if pos:line="33" pos:column="13">if <condition pos:line="33" pos:column="16">(<expr><name pos:line="33" pos:column="17">errno<pos:position pos:line="33" pos:column="22"/></name> <operator pos:line="33" pos:column="23">!=<pos:position pos:line="33" pos:column="25"/></operator> <name pos:line="33" pos:column="26">ECONNREFUSED<pos:position pos:line="33" pos:column="38"/></name> <operator pos:line="33" pos:column="39">&amp;&amp;<pos:position pos:line="33" pos:column="49"/></operator> <name pos:line="33" pos:column="42">errno<pos:position pos:line="33" pos:column="47"/></name> <operator pos:line="33" pos:column="48">!=<pos:position pos:line="33" pos:column="50"/></operator> <name pos:line="33" pos:column="51">EHOSTUNREACH<pos:position pos:line="33" pos:column="63"/></name></expr>)<pos:position pos:line="33" pos:column="64"/></condition><then pos:line="33" pos:column="64">
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif<pos:position pos:line="34" pos:column="7"/></cpp:directive></cpp:endif>

                <block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="17">debugs<pos:position pos:line="36" pos:column="23"/></name><argument_list pos:line="36" pos:column="23">(<argument><expr><literal type="number" pos:line="36" pos:column="24">50<pos:position pos:line="36" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="28">DBG_IMPORTANT<pos:position pos:line="36" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="43">"icpHandleUdp: FD "<pos:position pos:line="36" pos:column="62"/></literal> <operator pos:line="36" pos:column="63">&lt;&lt;<pos:position pos:line="36" pos:column="71"/></operator> <name pos:line="36" pos:column="66">sock<pos:position pos:line="36" pos:column="70"/></name> <operator pos:line="36" pos:column="71">&lt;&lt;<pos:position pos:line="36" pos:column="79"/></operator> <literal type="string" pos:line="36" pos:column="74">" recvfrom: "<pos:position pos:line="36" pos:column="87"/></literal> <operator pos:line="36" pos:column="88">&lt;&lt;<pos:position pos:line="36" pos:column="96"/></operator> <call><name pos:line="36" pos:column="91">xstrerror<pos:position pos:line="36" pos:column="100"/></name><argument_list pos:line="36" pos:column="100">()<pos:position pos:line="36" pos:column="102"/></argument_list></call></expr></argument>)<pos:position pos:line="36" pos:column="103"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="104"/></expr_stmt></block></then></if>

            <break pos:line="38" pos:column="13">break;<pos:position pos:line="38" pos:column="19"/></break>
        }<pos:position pos:line="39" pos:column="10"/></block></then></if>

        <expr_stmt><expr><operator pos:line="41" pos:column="9">++<pos:position pos:line="41" pos:column="11"/></operator><operator pos:line="41" pos:column="11">(<pos:position pos:line="41" pos:column="12"/></operator><operator pos:line="41" pos:column="12">*<pos:position pos:line="41" pos:column="13"/></operator><name pos:line="41" pos:column="13">N<pos:position pos:line="41" pos:column="14"/></name><operator pos:line="41" pos:column="14">)<pos:position pos:line="41" pos:column="15"/></operator></expr>;<pos:position pos:line="41" pos:column="16"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="42" pos:column="9">icpCount<pos:position pos:line="42" pos:column="17"/></name><argument_list pos:line="42" pos:column="17">(<argument><expr><name pos:line="42" pos:column="18">buf<pos:position pos:line="42" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="23">RECV<pos:position pos:line="42" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="29">(<pos:position pos:line="42" pos:column="30"/></operator><name pos:line="42" pos:column="30">size_t<pos:position pos:line="42" pos:column="36"/></name><operator pos:line="42" pos:column="36">)<pos:position pos:line="42" pos:column="37"/></operator> <name pos:line="42" pos:column="38">len<pos:position pos:line="42" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="42" pos:column="43">0<pos:position pos:line="42" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="46"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="43" pos:column="9">buf<pos:position pos:line="43" pos:column="12"/></name><index pos:line="43" pos:column="12">[<expr><name pos:line="43" pos:column="13">len<pos:position pos:line="43" pos:column="16"/></name></expr>]<pos:position pos:line="43" pos:column="17"/></index></name> <operator pos:line="43" pos:column="18">=<pos:position pos:line="43" pos:column="19"/></operator> <literal type="char" pos:line="43" pos:column="20">'\0'<pos:position pos:line="43" pos:column="24"/></literal></expr>;<pos:position pos:line="43" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="44" pos:column="9">debugs<pos:position pos:line="44" pos:column="15"/></name><argument_list pos:line="44" pos:column="15">(<argument><expr><literal type="number" pos:line="44" pos:column="16">12<pos:position pos:line="44" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="20">4<pos:position pos:line="44" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="23">"icpHandleUdp: FD "<pos:position pos:line="44" pos:column="42"/></literal> <operator pos:line="44" pos:column="43">&lt;&lt;<pos:position pos:line="44" pos:column="51"/></operator> <name pos:line="44" pos:column="46">sock<pos:position pos:line="44" pos:column="50"/></name> <operator pos:line="44" pos:column="51">&lt;&lt;<pos:position pos:line="44" pos:column="59"/></operator> <literal type="string" pos:line="44" pos:column="54">": received "<pos:position pos:line="44" pos:column="67"/></literal> <operator pos:line="44" pos:column="68">&lt;&lt;<pos:position pos:line="44" pos:column="76"/></operator>
               <operator pos:line="45" pos:column="16">(<pos:position pos:line="45" pos:column="17"/></operator><name pos:line="45" pos:column="17">unsigned<pos:position pos:line="45" pos:column="25"/></name> <name pos:line="45" pos:column="26">long<pos:position pos:line="45" pos:column="30"/></name> <name pos:line="45" pos:column="31">int<pos:position pos:line="45" pos:column="34"/></name><operator pos:line="45" pos:column="34">)<pos:position pos:line="45" pos:column="35"/></operator><name pos:line="45" pos:column="35">len<pos:position pos:line="45" pos:column="38"/></name> <operator pos:line="45" pos:column="39">&lt;&lt;<pos:position pos:line="45" pos:column="47"/></operator> <literal type="string" pos:line="45" pos:column="42">" bytes from "<pos:position pos:line="45" pos:column="56"/></literal> <operator pos:line="45" pos:column="57">&lt;&lt;<pos:position pos:line="45" pos:column="65"/></operator> <name pos:line="45" pos:column="60">from<pos:position pos:line="45" pos:column="64"/></name></expr></argument>)<pos:position pos:line="45" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="66"/></expr_stmt>

<cpp:ifdef pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">ifdef<pos:position pos:line="47" pos:column="7"/></cpp:directive> <name pos:line="47" pos:column="8">ICP_PACKET_DUMP<pos:position pos:line="47" pos:column="23"/></name></cpp:ifdef>

        <expr_stmt><expr><call><name pos:line="49" pos:column="9">icpPktDump<pos:position pos:line="49" pos:column="19"/></name><argument_list pos:line="49" pos:column="19">(<argument><expr><name pos:line="49" pos:column="20">buf<pos:position pos:line="49" pos:column="23"/></name></expr></argument>)<pos:position pos:line="49" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="25"/></expr_stmt>
<cpp:endif pos:line="50" pos:column="1">#<cpp:directive pos:line="50" pos:column="2">endif<pos:position pos:line="50" pos:column="7"/></cpp:directive></cpp:endif>

        <if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><operator pos:line="52" pos:column="13">(<pos:position pos:line="52" pos:column="14"/></operator><name pos:line="52" pos:column="14">size_t<pos:position pos:line="52" pos:column="20"/></name><operator pos:line="52" pos:column="20">)<pos:position pos:line="52" pos:column="21"/></operator> <name pos:line="52" pos:column="22">len<pos:position pos:line="52" pos:column="25"/></name> <operator pos:line="52" pos:column="26">&lt;<pos:position pos:line="52" pos:column="30"/></operator> <sizeof pos:line="52" pos:column="28">sizeof<argument_list pos:line="52" pos:column="34">(<argument><expr><name pos:line="52" pos:column="35">icp_common_t<pos:position pos:line="52" pos:column="47"/></name></expr></argument>)<pos:position pos:line="52" pos:column="48"/></argument_list></sizeof></expr>)<pos:position pos:line="52" pos:column="49"/></condition><then pos:line="52" pos:column="49"> <block pos:line="52" pos:column="50">{
            <expr_stmt><expr><call><name pos:line="53" pos:column="13">debugs<pos:position pos:line="53" pos:column="19"/></name><argument_list pos:line="53" pos:column="19">(<argument><expr><literal type="number" pos:line="53" pos:column="20">12<pos:position pos:line="53" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="53" pos:column="24">4<pos:position pos:line="53" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="27">"icpHandleUdp: Ignoring too-small UDP packet"<pos:position pos:line="53" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="74"/></expr_stmt>
            <break pos:line="54" pos:column="13">break;<pos:position pos:line="54" pos:column="19"/></break>
        }<pos:position pos:line="55" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="57" pos:column="9">icp_version<pos:position pos:line="57" pos:column="20"/></name> <operator pos:line="57" pos:column="21">=<pos:position pos:line="57" pos:column="22"/></operator> <operator pos:line="57" pos:column="23">(<pos:position pos:line="57" pos:column="24"/></operator><name pos:line="57" pos:column="24">int<pos:position pos:line="57" pos:column="27"/></name><operator pos:line="57" pos:column="27">)<pos:position pos:line="57" pos:column="28"/></operator> <name><name pos:line="57" pos:column="29">buf<pos:position pos:line="57" pos:column="32"/></name><index pos:line="57" pos:column="32">[<expr><literal type="number" pos:line="57" pos:column="33">1<pos:position pos:line="57" pos:column="34"/></literal></expr>]<pos:position pos:line="57" pos:column="35"/></index></name></expr>;<pos:position pos:line="57" pos:column="36"/></expr_stmt>	<comment type="block" pos:line="57" pos:column="41">/* cheat! */</comment>

        <if pos:line="59" pos:column="9">if <condition pos:line="59" pos:column="12">(<expr><name><name pos:line="59" pos:column="13">icpOutgoingConn<pos:position pos:line="59" pos:column="28"/></name><operator pos:line="59" pos:column="28">-&gt;<pos:position pos:line="59" pos:column="33"/></operator><name pos:line="59" pos:column="30">local<pos:position pos:line="59" pos:column="35"/></name></name> <operator pos:line="59" pos:column="36">==<pos:position pos:line="59" pos:column="38"/></operator> <name pos:line="59" pos:column="39">from<pos:position pos:line="59" pos:column="43"/></name></expr>)<pos:position pos:line="59" pos:column="44"/></condition><then pos:line="59" pos:column="44">
            <comment type="line" pos:line="60" pos:column="13">// ignore ICP packets which loop back (multicast usually)</comment>
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="61" pos:column="13">debugs<pos:position pos:line="61" pos:column="19"/></name><argument_list pos:line="61" pos:column="19">(<argument><expr><literal type="number" pos:line="61" pos:column="20">12<pos:position pos:line="61" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="61" pos:column="24">4<pos:position pos:line="61" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="27">"icpHandleUdp: Ignoring UDP packet sent by myself"<pos:position pos:line="61" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="79"/></expr_stmt></block></then>
        <elseif pos:line="62" pos:column="9">else <if pos:line="62" pos:column="14">if <condition pos:line="62" pos:column="17">(<expr><name pos:line="62" pos:column="18">icp_version<pos:position pos:line="62" pos:column="29"/></name> <operator pos:line="62" pos:column="30">==<pos:position pos:line="62" pos:column="32"/></operator> <name pos:line="62" pos:column="33">ICP_VERSION_2<pos:position pos:line="62" pos:column="46"/></name></expr>)<pos:position pos:line="62" pos:column="47"/></condition><then pos:line="62" pos:column="47">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="63" pos:column="13">icpHandleIcpV2<pos:position pos:line="63" pos:column="27"/></name><argument_list pos:line="63" pos:column="27">(<argument><expr><name pos:line="63" pos:column="28">sock<pos:position pos:line="63" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="34">from<pos:position pos:line="63" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="40">buf<pos:position pos:line="63" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="45">len<pos:position pos:line="63" pos:column="48"/></name></expr></argument>)<pos:position pos:line="63" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="50"/></expr_stmt></block></then></if></elseif>
        <elseif pos:line="64" pos:column="9">else <if pos:line="64" pos:column="14">if <condition pos:line="64" pos:column="17">(<expr><name pos:line="64" pos:column="18">icp_version<pos:position pos:line="64" pos:column="29"/></name> <operator pos:line="64" pos:column="30">==<pos:position pos:line="64" pos:column="32"/></operator> <name pos:line="64" pos:column="33">ICP_VERSION_3<pos:position pos:line="64" pos:column="46"/></name></expr>)<pos:position pos:line="64" pos:column="47"/></condition><then pos:line="64" pos:column="47">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="65" pos:column="13">icpHandleIcpV3<pos:position pos:line="65" pos:column="27"/></name><argument_list pos:line="65" pos:column="27">(<argument><expr><name pos:line="65" pos:column="28">sock<pos:position pos:line="65" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="34">from<pos:position pos:line="65" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="40">buf<pos:position pos:line="65" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="45">len<pos:position pos:line="65" pos:column="48"/></name></expr></argument>)<pos:position pos:line="65" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="50"/></expr_stmt></block></then></if></elseif>
        <else pos:line="66" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="67" pos:column="13">debugs<pos:position pos:line="67" pos:column="19"/></name><argument_list pos:line="67" pos:column="19">(<argument><expr><literal type="number" pos:line="67" pos:column="20">12<pos:position pos:line="67" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="67" pos:column="24">DBG_IMPORTANT<pos:position pos:line="67" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="39">"WARNING: Unused ICP version "<pos:position pos:line="67" pos:column="69"/></literal> <operator pos:line="67" pos:column="70">&lt;&lt;<pos:position pos:line="67" pos:column="78"/></operator> <name pos:line="67" pos:column="73">icp_version<pos:position pos:line="67" pos:column="84"/></name> <operator pos:line="67" pos:column="85">&lt;&lt;<pos:position pos:line="67" pos:column="93"/></operator>
                   <literal type="string" pos:line="68" pos:column="20">" received from "<pos:position pos:line="68" pos:column="37"/></literal> <operator pos:line="68" pos:column="38">&lt;&lt;<pos:position pos:line="68" pos:column="46"/></operator> <name pos:line="68" pos:column="41">from<pos:position pos:line="68" pos:column="45"/></name></expr></argument>)<pos:position pos:line="68" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="47"/></expr_stmt></block></else></if>
    }<pos:position pos:line="69" pos:column="6"/></block></while>
}<pos:position pos:line="70" pos:column="2"/></block></function></unit>
