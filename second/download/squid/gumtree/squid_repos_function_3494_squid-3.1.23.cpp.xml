<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3494_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ConnStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">requestTimeout<pos:position pos:line="2" pos:column="30"/></name></name><parameter_list pos:line="2" pos:column="30">(<parameter><decl><type><specifier pos:line="2" pos:column="31">const<pos:position pos:line="2" pos:column="36"/></specifier> <name pos:line="2" pos:column="37">CommTimeoutCbParams<pos:position pos:line="2" pos:column="56"/></name> <modifier pos:line="2" pos:column="57">&amp;<pos:position pos:line="2" pos:column="62"/></modifier></type><name pos:line="2" pos:column="58">io<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="61"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:if pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">if<pos:position pos:line="4" pos:column="4"/></cpp:directive> <expr><name pos:line="4" pos:column="5">THIS_CONFUSES_PERSISTENT_CONNECTION_AWARE_BROWSERS_AND_USERS<pos:position pos:line="4" pos:column="65"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">debugs<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><literal type="number" pos:line="5" pos:column="12">33<pos:position pos:line="5" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="16">3<pos:position pos:line="5" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="19">"requestTimeout: FD "<pos:position pos:line="5" pos:column="40"/></literal> <operator pos:line="5" pos:column="41">&lt;&lt;<pos:position pos:line="5" pos:column="49"/></operator> <name><name pos:line="5" pos:column="44">io<pos:position pos:line="5" pos:column="46"/></name><operator pos:line="5" pos:column="46">.<pos:position pos:line="5" pos:column="47"/></operator><name pos:line="5" pos:column="47">fd<pos:position pos:line="5" pos:column="49"/></name></name> <operator pos:line="5" pos:column="50">&lt;&lt;<pos:position pos:line="5" pos:column="58"/></operator> <literal type="string" pos:line="5" pos:column="53">": lifetime is expired."<pos:position pos:line="5" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="79"/></expr_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><call><name pos:line="7" pos:column="9">COMMIO_FD_WRITECB<pos:position pos:line="7" pos:column="26"/></name><argument_list pos:line="7" pos:column="26">(<argument><expr><name><name pos:line="7" pos:column="27">io<pos:position pos:line="7" pos:column="29"/></name><operator pos:line="7" pos:column="29">.<pos:position pos:line="7" pos:column="30"/></operator><name pos:line="7" pos:column="30">fd<pos:position pos:line="7" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="33"/></argument_list></call><operator pos:line="7" pos:column="33">-&gt;<pos:position pos:line="7" pos:column="38"/></operator><name pos:line="7" pos:column="35">active<pos:position pos:line="7" pos:column="41"/></name></expr>)<pos:position pos:line="7" pos:column="42"/></condition><then pos:line="7" pos:column="42"> <block pos:line="7" pos:column="43">{
        <comment type="block" pos:line="8" pos:column="9">/* FIXME: If this code is reinstated, check the conn counters,
         * not the fd table state
         */</comment>
        <comment type="block" pos:line="11" pos:column="9">/*
         * Some data has been sent to the client, just close the FD
         */</comment>
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">comm_close<pos:position pos:line="14" pos:column="19"/></name><argument_list pos:line="14" pos:column="19">(<argument><expr><name><name pos:line="14" pos:column="20">io<pos:position pos:line="14" pos:column="22"/></name><operator pos:line="14" pos:column="22">.<pos:position pos:line="14" pos:column="23"/></operator><name pos:line="14" pos:column="23">fd<pos:position pos:line="14" pos:column="25"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></then> <elseif pos:line="15" pos:column="7">else <if pos:line="15" pos:column="12">if <condition pos:line="15" pos:column="15">(<expr><name pos:line="15" pos:column="16">nrequests<pos:position pos:line="15" pos:column="25"/></name></expr>)<pos:position pos:line="15" pos:column="26"/></condition><then pos:line="15" pos:column="26"> <block pos:line="15" pos:column="27">{
        <comment type="block" pos:line="16" pos:column="9">/*
         * assume its a persistent connection; just close it
         */</comment>
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">comm_close<pos:position pos:line="19" pos:column="19"/></name><argument_list pos:line="19" pos:column="19">(<argument><expr><name><name pos:line="19" pos:column="20">io<pos:position pos:line="19" pos:column="22"/></name><operator pos:line="19" pos:column="22">.<pos:position pos:line="19" pos:column="23"/></operator><name pos:line="19" pos:column="23">fd<pos:position pos:line="19" pos:column="25"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if></elseif> <else pos:line="20" pos:column="7">else <block pos:line="20" pos:column="12">{
        <comment type="block" pos:line="21" pos:column="9">/*
         * Generate an error
         */</comment>
        <decl_stmt><decl><type><name pos:line="24" pos:column="9">ClientHttpRequest<pos:position pos:line="24" pos:column="26"/></name> <modifier pos:line="24" pos:column="27">*<pos:position pos:line="24" pos:column="28"/></modifier><modifier pos:line="24" pos:column="28">*<pos:position pos:line="24" pos:column="29"/></modifier></type><name pos:line="24" pos:column="29">H<pos:position pos:line="24" pos:column="30"/></name></decl>;<pos:position pos:line="24" pos:column="31"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="25" pos:column="9">clientStreamNode<pos:position pos:line="25" pos:column="25"/></name> <modifier pos:line="25" pos:column="26">*<pos:position pos:line="25" pos:column="27"/></modifier></type><name pos:line="25" pos:column="27">node<pos:position pos:line="25" pos:column="31"/></name></decl>;<pos:position pos:line="25" pos:column="32"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="26" pos:column="9">ClientHttpRequest<pos:position pos:line="26" pos:column="26"/></name> <modifier pos:line="26" pos:column="27">*<pos:position pos:line="26" pos:column="28"/></modifier></type><name pos:line="26" pos:column="28">http<pos:position pos:line="26" pos:column="32"/></name> <init pos:line="26" pos:column="33">=
            <expr><call><name pos:line="27" pos:column="13">parseHttpRequestAbort<pos:position pos:line="27" pos:column="34"/></name><argument_list pos:line="27" pos:column="34">(<argument><expr><name pos:line="27" pos:column="35">this<pos:position pos:line="27" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="41">"error:Connection%20lifetime%20expired"<pos:position pos:line="27" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="81"/></argument_list></call></expr></init></decl>;<pos:position pos:line="27" pos:column="82"/></decl_stmt>
        <expr_stmt><expr><name pos:line="28" pos:column="9">node<pos:position pos:line="28" pos:column="13"/></name> <operator pos:line="28" pos:column="14">=<pos:position pos:line="28" pos:column="15"/></operator> <name><name pos:line="28" pos:column="16">http<pos:position pos:line="28" pos:column="20"/></name><operator pos:line="28" pos:column="20">-&gt;<pos:position pos:line="28" pos:column="25"/></operator><name pos:line="28" pos:column="22">client_stream<pos:position pos:line="28" pos:column="35"/></name><operator pos:line="28" pos:column="35">.<pos:position pos:line="28" pos:column="36"/></operator><name pos:line="28" pos:column="36">tail<pos:position pos:line="28" pos:column="40"/></name><operator pos:line="28" pos:column="40">-&gt;<pos:position pos:line="28" pos:column="45"/></operator><name pos:line="28" pos:column="42">prev<pos:position pos:line="28" pos:column="46"/></name><operator pos:line="28" pos:column="46">-&gt;<pos:position pos:line="28" pos:column="51"/></operator><name pos:line="28" pos:column="48">data<pos:position pos:line="28" pos:column="52"/></name></name></expr>;<pos:position pos:line="28" pos:column="53"/></expr_stmt>
        <decl_stmt><decl><type><name pos:line="29" pos:column="9">clientReplyContext<pos:position pos:line="29" pos:column="27"/></name> <modifier pos:line="29" pos:column="28">*<pos:position pos:line="29" pos:column="29"/></modifier></type><name pos:line="29" pos:column="29">repContext<pos:position pos:line="29" pos:column="39"/></name> <init pos:line="29" pos:column="40">= <expr><cast type="dynamic" pos:line="29" pos:column="42">dynamic_cast<argument_list type="generic" pos:line="29" pos:column="54">&lt;<argument><expr><name pos:line="29" pos:column="55">clientReplyContext<pos:position pos:line="29" pos:column="73"/></name> <operator pos:line="29" pos:column="74">*<pos:position pos:line="29" pos:column="75"/></operator></expr></argument>&gt;<pos:position pos:line="29" pos:column="79"/></argument_list><argument_list pos:line="29" pos:column="76">(<argument><expr><call><name><name pos:line="29" pos:column="77">node<pos:position pos:line="29" pos:column="81"/></name><operator pos:line="29" pos:column="81">-&gt;<pos:position pos:line="29" pos:column="86"/></operator><name pos:line="29" pos:column="83">data<pos:position pos:line="29" pos:column="87"/></name><operator pos:line="29" pos:column="87">.<pos:position pos:line="29" pos:column="88"/></operator><name pos:line="29" pos:column="88">getRaw<pos:position pos:line="29" pos:column="94"/></name></name><argument_list pos:line="29" pos:column="94">()<pos:position pos:line="29" pos:column="96"/></argument_list></call></expr></argument>)<pos:position pos:line="29" pos:column="97"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="29" pos:column="98"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">assert<pos:position pos:line="30" pos:column="15"/></name> <argument_list pos:line="30" pos:column="16">(<argument><expr><name pos:line="30" pos:column="17">repContext<pos:position pos:line="30" pos:column="27"/></name></expr></argument>)<pos:position pos:line="30" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="31" pos:column="9">repContext<pos:position pos:line="31" pos:column="19"/></name><operator pos:line="31" pos:column="19">-&gt;<pos:position pos:line="31" pos:column="24"/></operator><name pos:line="31" pos:column="21">setReplyToError<pos:position pos:line="31" pos:column="36"/></name></name><argument_list pos:line="31" pos:column="36">(<argument><expr><name pos:line="31" pos:column="37">ERR_LIFETIME_EXP<pos:position pos:line="31" pos:column="53"/></name></expr></argument>,
                                    <argument><expr><name pos:line="32" pos:column="37">HTTP_REQUEST_TIMEOUT<pos:position pos:line="32" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="59">METHOD_NONE<pos:position pos:line="32" pos:column="70"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="72">"N/A"<pos:position pos:line="32" pos:column="77"/></literal></expr></argument>, <argument><expr><operator pos:line="32" pos:column="79">&amp;<pos:position pos:line="32" pos:column="84"/></operator><name><name pos:line="32" pos:column="80">peer<pos:position pos:line="32" pos:column="84"/></name><operator pos:line="32" pos:column="84">.<pos:position pos:line="32" pos:column="85"/></operator><name pos:line="32" pos:column="85">sin_addr<pos:position pos:line="32" pos:column="93"/></name></name></expr></argument>,
                                    <argument><expr><name pos:line="33" pos:column="37">NULL<pos:position pos:line="33" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="43">NULL<pos:position pos:line="33" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="49">NULL<pos:position pos:line="33" pos:column="53"/></name></expr></argument>)<pos:position pos:line="33" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="55"/></expr_stmt>
        <comment type="block" pos:line="34" pos:column="9">/* No requests can be outstanded */</comment>
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">assert<pos:position pos:line="35" pos:column="15"/></name><argument_list pos:line="35" pos:column="15">(<argument><expr><name pos:line="35" pos:column="16">chr<pos:position pos:line="35" pos:column="19"/></name> <operator pos:line="35" pos:column="20">==<pos:position pos:line="35" pos:column="22"/></operator> <name pos:line="35" pos:column="23">NULL<pos:position pos:line="35" pos:column="27"/></name></expr></argument>)<pos:position pos:line="35" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="29"/></expr_stmt>
        <comment type="block" pos:line="36" pos:column="9">/* add to the client request queue */</comment>

        <for pos:line="38" pos:column="9">for <control pos:line="38" pos:column="13">(<init><expr><name pos:line="38" pos:column="14">H<pos:position pos:line="38" pos:column="15"/></name> <operator pos:line="38" pos:column="16">=<pos:position pos:line="38" pos:column="17"/></operator> <operator pos:line="38" pos:column="18">&amp;<pos:position pos:line="38" pos:column="23"/></operator><name pos:line="38" pos:column="19">chr<pos:position pos:line="38" pos:column="22"/></name></expr>;<pos:position pos:line="38" pos:column="23"/></init> <condition><expr><operator pos:line="38" pos:column="24">*<pos:position pos:line="38" pos:column="25"/></operator><name pos:line="38" pos:column="25">H<pos:position pos:line="38" pos:column="26"/></name></expr>;<pos:position pos:line="38" pos:column="27"/></condition> <incr><expr><name pos:line="38" pos:column="28">H<pos:position pos:line="38" pos:column="29"/></name> <operator pos:line="38" pos:column="30">=<pos:position pos:line="38" pos:column="31"/></operator> <operator pos:line="38" pos:column="32">&amp;<pos:position pos:line="38" pos:column="37"/></operator><name><operator pos:line="38" pos:column="33">(<pos:position pos:line="38" pos:column="34"/></operator><operator pos:line="38" pos:column="34">*<pos:position pos:line="38" pos:column="35"/></operator><name pos:line="38" pos:column="35">H<pos:position pos:line="38" pos:column="36"/></name><operator pos:line="38" pos:column="36">)<pos:position pos:line="38" pos:column="37"/></operator><operator pos:line="38" pos:column="37">-&gt;<pos:position pos:line="38" pos:column="42"/></operator><name pos:line="38" pos:column="39">next<pos:position pos:line="38" pos:column="43"/></name></name></expr></incr>)<pos:position pos:line="38" pos:column="44"/></control><block type="pseudo"><empty_stmt pos:line="38" pos:column="44">;<pos:position pos:line="38" pos:column="45"/></empty_stmt></block></for>
        <expr_stmt><expr><operator pos:line="39" pos:column="9">*<pos:position pos:line="39" pos:column="10"/></operator><name pos:line="39" pos:column="10">H<pos:position pos:line="39" pos:column="11"/></name> <operator pos:line="39" pos:column="12">=<pos:position pos:line="39" pos:column="13"/></operator> <name pos:line="39" pos:column="14">http<pos:position pos:line="39" pos:column="18"/></name></expr>;<pos:position pos:line="39" pos:column="19"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="41" pos:column="9">clientStreamRead<pos:position pos:line="41" pos:column="25"/></name><argument_list pos:line="41" pos:column="25">(<argument><expr><name><name pos:line="41" pos:column="26">http<pos:position pos:line="41" pos:column="30"/></name><operator pos:line="41" pos:column="30">-&gt;<pos:position pos:line="41" pos:column="35"/></operator><name pos:line="41" pos:column="32">client_stream<pos:position pos:line="41" pos:column="45"/></name><operator pos:line="41" pos:column="45">.<pos:position pos:line="41" pos:column="46"/></operator><name pos:line="41" pos:column="46">tail<pos:position pos:line="41" pos:column="50"/></name><operator pos:line="41" pos:column="50">-&gt;<pos:position pos:line="41" pos:column="55"/></operator><name pos:line="41" pos:column="52">data<pos:position pos:line="41" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="58">http<pos:position pos:line="41" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="64">0<pos:position pos:line="41" pos:column="65"/></literal></expr></argument>,
                         <argument><expr><name pos:line="42" pos:column="26">HTTP_REQBUF_SZ<pos:position pos:line="42" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="42">context<pos:position pos:line="42" pos:column="49"/></name><operator pos:line="42" pos:column="49">-&gt;<pos:position pos:line="42" pos:column="54"/></operator><name pos:line="42" pos:column="51">reqbuf<pos:position pos:line="42" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="59"/></expr_stmt>

        <comment type="block" pos:line="44" pos:column="9">/*
         * if we don't close() here, we still need a timeout handler!
         */</comment>
        <typedef pos:line="47" pos:column="9">typedef <type><name><name pos:line="47" pos:column="17">CommCbMemFunT<pos:position pos:line="47" pos:column="30"/></name><argument_list type="generic" pos:line="47" pos:column="30">&lt;<argument><expr><name pos:line="47" pos:column="31">ConnStateData<pos:position pos:line="47" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="46">CommTimeoutCbParams<pos:position pos:line="47" pos:column="65"/></name></expr></argument>&gt;<pos:position pos:line="47" pos:column="69"/></argument_list></name></type> <name pos:line="47" pos:column="67">TimeoutDialer<pos:position pos:line="47" pos:column="80"/></name>;<pos:position pos:line="47" pos:column="81"/></typedef>
        <decl_stmt><decl><type><name><name pos:line="48" pos:column="9">AsyncCall<pos:position pos:line="48" pos:column="18"/></name><operator pos:line="48" pos:column="18">::<pos:position pos:line="48" pos:column="20"/></operator><name pos:line="48" pos:column="20">Pointer<pos:position pos:line="48" pos:column="27"/></name></name></type> <name pos:line="48" pos:column="28">timeoutCall<pos:position pos:line="48" pos:column="39"/></name> <init pos:line="48" pos:column="40">=  <expr><call><name pos:line="48" pos:column="43">JobCallback<pos:position pos:line="48" pos:column="54"/></name><argument_list pos:line="48" pos:column="54">(<argument><expr><literal type="number" pos:line="48" pos:column="55">33<pos:position pos:line="48" pos:column="57"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="48" pos:column="59">5<pos:position pos:line="48" pos:column="60"/></literal></expr></argument>,
                                          <argument><expr><name pos:line="49" pos:column="43">TimeoutDialer<pos:position pos:line="49" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="58">this<pos:position pos:line="49" pos:column="62"/></name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="64">ConnStateData<pos:position pos:line="49" pos:column="77"/></name><operator pos:line="49" pos:column="77">::<pos:position pos:line="49" pos:column="79"/></operator><name pos:line="49" pos:column="79">requestTimeout<pos:position pos:line="49" pos:column="93"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="94"/></argument_list></call></expr></init></decl>;<pos:position pos:line="49" pos:column="95"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="50" pos:column="9">commSetTimeout<pos:position pos:line="50" pos:column="23"/></name><argument_list pos:line="50" pos:column="23">(<argument><expr><name><name pos:line="50" pos:column="24">io<pos:position pos:line="50" pos:column="26"/></name><operator pos:line="50" pos:column="26">.<pos:position pos:line="50" pos:column="27"/></operator><name pos:line="50" pos:column="27">fd<pos:position pos:line="50" pos:column="29"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="50" pos:column="31">30<pos:position pos:line="50" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="50" pos:column="35">timeoutCall<pos:position pos:line="50" pos:column="46"/></name></expr></argument>)<pos:position pos:line="50" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="48"/></expr_stmt>

        <comment type="block" pos:line="52" pos:column="9">/*
         * Aha, but we don't want a read handler!
         */</comment>
        <expr_stmt><expr><call><name pos:line="55" pos:column="9">commSetSelect<pos:position pos:line="55" pos:column="22"/></name><argument_list pos:line="55" pos:column="22">(<argument><expr><name><name pos:line="55" pos:column="23">io<pos:position pos:line="55" pos:column="25"/></name><operator pos:line="55" pos:column="25">.<pos:position pos:line="55" pos:column="26"/></operator><name pos:line="55" pos:column="26">fd<pos:position pos:line="55" pos:column="28"/></name></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="30">COMM_SELECT_READ<pos:position pos:line="55" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="48">NULL<pos:position pos:line="55" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="54">NULL<pos:position pos:line="55" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="55" pos:column="60">0<pos:position pos:line="55" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="63"/></expr_stmt>
    }<pos:position pos:line="56" pos:column="6"/></block></else></if>

<cpp:else pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">else<pos:position pos:line="58" pos:column="6"/></cpp:directive></cpp:else>
    <comment type="block" pos:line="59" pos:column="5">/*
    * Just close the connection to not confuse browsers
    * using persistent connections. Some browsers opens
    * an connection and then does not use it until much
    * later (presumeably because the request triggering
    * the open has already been completed on another
    * connection)
    */</comment>
    <expr_stmt><expr><call><name pos:line="67" pos:column="5">debugs<pos:position pos:line="67" pos:column="11"/></name><argument_list pos:line="67" pos:column="11">(<argument><expr><literal type="number" pos:line="67" pos:column="12">33<pos:position pos:line="67" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="67" pos:column="16">3<pos:position pos:line="67" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="19">"requestTimeout: FD "<pos:position pos:line="67" pos:column="40"/></literal> <operator pos:line="67" pos:column="41">&lt;&lt;<pos:position pos:line="67" pos:column="49"/></operator> <name><name pos:line="67" pos:column="44">io<pos:position pos:line="67" pos:column="46"/></name><operator pos:line="67" pos:column="46">.<pos:position pos:line="67" pos:column="47"/></operator><name pos:line="67" pos:column="47">fd<pos:position pos:line="67" pos:column="49"/></name></name> <operator pos:line="67" pos:column="50">&lt;&lt;<pos:position pos:line="67" pos:column="58"/></operator> <literal type="string" pos:line="67" pos:column="53">": lifetime is expired."<pos:position pos:line="67" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="79"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="69" pos:column="5">comm_close<pos:position pos:line="69" pos:column="15"/></name><argument_list pos:line="69" pos:column="15">(<argument><expr><name><name pos:line="69" pos:column="16">io<pos:position pos:line="69" pos:column="18"/></name><operator pos:line="69" pos:column="18">.<pos:position pos:line="69" pos:column="19"/></operator><name pos:line="69" pos:column="19">fd<pos:position pos:line="69" pos:column="21"/></name></name></expr></argument>)<pos:position pos:line="69" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="23"/></expr_stmt>

<cpp:endif pos:line="71" pos:column="1">#<cpp:directive pos:line="71" pos:column="2">endif<pos:position pos:line="71" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="72" pos:column="2"/></block></function></unit>
