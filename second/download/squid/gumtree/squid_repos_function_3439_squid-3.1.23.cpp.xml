<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3439_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ClientSocketContext<pos:position pos:line="2" pos:column="20"/></name><operator pos:line="2" pos:column="20">::<pos:position pos:line="2" pos:column="22"/></operator><name pos:line="2" pos:column="22">sendBody<pos:position pos:line="2" pos:column="30"/></name></name><parameter_list pos:line="2" pos:column="30">(<parameter><decl><type><name pos:line="2" pos:column="31">HttpReply<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type> <name pos:line="2" pos:column="43">rep<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="48">StoreIOBuffer<pos:position pos:line="2" pos:column="61"/></name></type> <name pos:line="2" pos:column="62">bodyData<pos:position pos:line="2" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="71"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">rep<pos:position pos:line="4" pos:column="15"/></name> <operator pos:line="4" pos:column="16">==<pos:position pos:line="4" pos:column="18"/></operator> <name pos:line="4" pos:column="19">NULL<pos:position pos:line="4" pos:column="23"/></name></expr></argument>)<pos:position pos:line="4" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="25"/></expr_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">!<pos:position pos:line="6" pos:column="10"/></operator><call><name pos:line="6" pos:column="10">multipartRangeRequest<pos:position pos:line="6" pos:column="31"/></name><argument_list pos:line="6" pos:column="31">()<pos:position pos:line="6" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="34"/></condition><then pos:line="6" pos:column="34"> <block pos:line="6" pos:column="35">{
        <decl_stmt><decl><type><name pos:line="7" pos:column="9">size_t<pos:position pos:line="7" pos:column="15"/></name></type> <name pos:line="7" pos:column="16">length<pos:position pos:line="7" pos:column="22"/></name> <init pos:line="7" pos:column="23">= <expr><call><name pos:line="7" pos:column="25">lengthToSend<pos:position pos:line="7" pos:column="37"/></name><argument_list pos:line="7" pos:column="37">(<argument><expr><call><name><name pos:line="7" pos:column="38">bodyData<pos:position pos:line="7" pos:column="46"/></name><operator pos:line="7" pos:column="46">.<pos:position pos:line="7" pos:column="47"/></operator><name pos:line="7" pos:column="47">range<pos:position pos:line="7" pos:column="52"/></name></name><argument_list pos:line="7" pos:column="52">()<pos:position pos:line="7" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="56"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">noteSentBodyBytes<pos:position pos:line="8" pos:column="26"/></name> <argument_list pos:line="8" pos:column="27">(<argument><expr><name pos:line="8" pos:column="28">length<pos:position pos:line="8" pos:column="34"/></name></expr></argument>)<pos:position pos:line="8" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="36"/></expr_stmt>
        <decl_stmt><decl><type><name><name pos:line="9" pos:column="9">AsyncCall<pos:position pos:line="9" pos:column="18"/></name><operator pos:line="9" pos:column="18">::<pos:position pos:line="9" pos:column="20"/></operator><name pos:line="9" pos:column="20">Pointer<pos:position pos:line="9" pos:column="27"/></name></name></type> <name pos:line="9" pos:column="28">call<pos:position pos:line="9" pos:column="32"/></name> <init pos:line="9" pos:column="33">= <expr><call><name pos:line="9" pos:column="35">commCbCall<pos:position pos:line="9" pos:column="45"/></name><argument_list pos:line="9" pos:column="45">(<argument><expr><literal type="number" pos:line="9" pos:column="46">33<pos:position pos:line="9" pos:column="48"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="50">5<pos:position pos:line="9" pos:column="51"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="53">"clientWriteBodyComplete"<pos:position pos:line="9" pos:column="78"/></literal></expr></argument>,
                                             <argument><expr><call><name pos:line="10" pos:column="46">CommIoCbPtrFun<pos:position pos:line="10" pos:column="60"/></name><argument_list pos:line="10" pos:column="60">(<argument><expr><name pos:line="10" pos:column="61">clientWriteBodyComplete<pos:position pos:line="10" pos:column="84"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="86">this<pos:position pos:line="10" pos:column="90"/></name></expr></argument>)<pos:position pos:line="10" pos:column="91"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="92"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="93"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">comm_write<pos:position pos:line="11" pos:column="19"/></name><argument_list pos:line="11" pos:column="19">(<argument><expr><call><name pos:line="11" pos:column="20">fd<pos:position pos:line="11" pos:column="22"/></name><argument_list pos:line="11" pos:column="22">()<pos:position pos:line="11" pos:column="24"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="26">bodyData<pos:position pos:line="11" pos:column="34"/></name><operator pos:line="11" pos:column="34">.<pos:position pos:line="11" pos:column="35"/></operator><name pos:line="11" pos:column="35">data<pos:position pos:line="11" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="41">length<pos:position pos:line="11" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="49">call<pos:position pos:line="11" pos:column="53"/></name></expr></argument> )<pos:position pos:line="11" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="56"/></expr_stmt>
        <return pos:line="12" pos:column="9">return;<pos:position pos:line="12" pos:column="16"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="15" pos:column="5">MemBuf<pos:position pos:line="15" pos:column="11"/></name></type> <name pos:line="15" pos:column="12">mb<pos:position pos:line="15" pos:column="14"/></name></decl>;<pos:position pos:line="15" pos:column="15"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="16" pos:column="5">mb<pos:position pos:line="16" pos:column="7"/></name><operator pos:line="16" pos:column="7">.<pos:position pos:line="16" pos:column="8"/></operator><name pos:line="16" pos:column="8">init<pos:position pos:line="16" pos:column="12"/></name></name><argument_list pos:line="16" pos:column="12">()<pos:position pos:line="16" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">packRange<pos:position pos:line="17" pos:column="14"/></name><argument_list pos:line="17" pos:column="14">(<argument><expr><name pos:line="17" pos:column="15">bodyData<pos:position pos:line="17" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="25">&amp;<pos:position pos:line="17" pos:column="30"/></operator><name pos:line="17" pos:column="26">mb<pos:position pos:line="17" pos:column="28"/></name></expr></argument>)<pos:position pos:line="17" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="30"/></expr_stmt>

    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><call><name><name pos:line="19" pos:column="9">mb<pos:position pos:line="19" pos:column="11"/></name><operator pos:line="19" pos:column="11">.<pos:position pos:line="19" pos:column="12"/></operator><name pos:line="19" pos:column="12">contentSize<pos:position pos:line="19" pos:column="23"/></name></name><argument_list pos:line="19" pos:column="23">()<pos:position pos:line="19" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="26"/></condition><then pos:line="19" pos:column="26"> <block pos:line="19" pos:column="27">{
        <comment type="block" pos:line="20" pos:column="9">/* write */</comment>
        <decl_stmt><decl><type><name><name pos:line="21" pos:column="9">AsyncCall<pos:position pos:line="21" pos:column="18"/></name><operator pos:line="21" pos:column="18">::<pos:position pos:line="21" pos:column="20"/></operator><name pos:line="21" pos:column="20">Pointer<pos:position pos:line="21" pos:column="27"/></name></name></type> <name pos:line="21" pos:column="28">call<pos:position pos:line="21" pos:column="32"/></name> <init pos:line="21" pos:column="33">= <expr><call><name pos:line="21" pos:column="35">commCbCall<pos:position pos:line="21" pos:column="45"/></name><argument_list pos:line="21" pos:column="45">(<argument><expr><literal type="number" pos:line="21" pos:column="46">33<pos:position pos:line="21" pos:column="48"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="50">5<pos:position pos:line="21" pos:column="51"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="53">"clientWriteComplete"<pos:position pos:line="21" pos:column="74"/></literal></expr></argument>,
                                             <argument><expr><call><name pos:line="22" pos:column="46">CommIoCbPtrFun<pos:position pos:line="22" pos:column="60"/></name><argument_list pos:line="22" pos:column="60">(<argument><expr><name pos:line="22" pos:column="61">clientWriteComplete<pos:position pos:line="22" pos:column="80"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="82">this<pos:position pos:line="22" pos:column="86"/></name></expr></argument>)<pos:position pos:line="22" pos:column="87"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="88"/></argument_list></call></expr></init></decl>;<pos:position pos:line="22" pos:column="89"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="23" pos:column="9">comm_write_mbuf<pos:position pos:line="23" pos:column="24"/></name><argument_list pos:line="23" pos:column="24">(<argument><expr><call><name pos:line="23" pos:column="25">fd<pos:position pos:line="23" pos:column="27"/></name><argument_list pos:line="23" pos:column="27">()<pos:position pos:line="23" pos:column="29"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="23" pos:column="31">&amp;<pos:position pos:line="23" pos:column="36"/></operator><name pos:line="23" pos:column="32">mb<pos:position pos:line="23" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="36">call<pos:position pos:line="23" pos:column="40"/></name></expr></argument>)<pos:position pos:line="23" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="24" pos:column="6"/></block></then>  <else pos:line="24" pos:column="8">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="9">writeComplete<pos:position pos:line="25" pos:column="22"/></name><argument_list pos:line="25" pos:column="22">(<argument><expr><call><name pos:line="25" pos:column="23">fd<pos:position pos:line="25" pos:column="25"/></name><argument_list pos:line="25" pos:column="25">()<pos:position pos:line="25" pos:column="27"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="25" pos:column="29">NULL<pos:position pos:line="25" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="35">0<pos:position pos:line="25" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="38">COMM_OK<pos:position pos:line="25" pos:column="45"/></name></expr></argument>)<pos:position pos:line="25" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="47"/></expr_stmt></block></else></if>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
