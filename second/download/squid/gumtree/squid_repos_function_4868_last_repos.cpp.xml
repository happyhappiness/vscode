<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4868_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HttpRequestMethod<pos:position pos:line="2" pos:column="18"/></name><operator pos:line="2" pos:column="18">::<pos:position pos:line="2" pos:column="20"/></operator><name pos:line="2" pos:column="20">HttpRequestMethodXXX<pos:position pos:line="2" pos:column="40"/></name></name><parameter_list pos:line="2" pos:column="40">(<parameter><decl><type><name pos:line="2" pos:column="41">char<pos:position pos:line="2" pos:column="45"/></name> <specifier pos:line="2" pos:column="46">const<pos:position pos:line="2" pos:column="51"/></specifier> <modifier pos:line="2" pos:column="52">*<pos:position pos:line="2" pos:column="53"/></modifier></type><name pos:line="2" pos:column="53">begin<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="59"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// XXX: performance regression due to this method no longer being a constructor</comment>
    <comment type="line" pos:line="5" pos:column="5">// ensure the members are empty/default values before any of the early-return</comment>
    <comment type="line" pos:line="6" pos:column="5">// optimizations can be used.</comment>
    <expr_stmt><expr><name pos:line="7" pos:column="5">theMethod<pos:position pos:line="7" pos:column="14"/></name> <operator pos:line="7" pos:column="15">=<pos:position pos:line="7" pos:column="16"/></operator> <name><name pos:line="7" pos:column="17">Http<pos:position pos:line="7" pos:column="21"/></name><operator pos:line="7" pos:column="21">::<pos:position pos:line="7" pos:column="23"/></operator><name pos:line="7" pos:column="23">METHOD_NONE<pos:position pos:line="7" pos:column="34"/></name></name></expr>;<pos:position pos:line="7" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="8" pos:column="5">theImage<pos:position pos:line="8" pos:column="13"/></name><operator pos:line="8" pos:column="13">.<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">clear<pos:position pos:line="8" pos:column="19"/></name></name><argument_list pos:line="8" pos:column="19">()<pos:position pos:line="8" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="22"/></expr_stmt>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">begin<pos:position pos:line="10" pos:column="14"/></name> <operator pos:line="10" pos:column="15">==<pos:position pos:line="10" pos:column="17"/></operator> <name pos:line="10" pos:column="18">NULL<pos:position pos:line="10" pos:column="22"/></name></expr>)<pos:position pos:line="10" pos:column="23"/></condition><then pos:line="10" pos:column="23">
        <block type="pseudo"><return pos:line="11" pos:column="9">return;<pos:position pos:line="11" pos:column="16"/></return></block></then></if>

    <decl_stmt><decl><type><name pos:line="13" pos:column="5">char<pos:position pos:line="13" pos:column="9"/></name> <specifier pos:line="13" pos:column="10">const<pos:position pos:line="13" pos:column="15"/></specifier> <modifier pos:line="13" pos:column="16">*<pos:position pos:line="13" pos:column="17"/></modifier></type><name pos:line="13" pos:column="17">end<pos:position pos:line="13" pos:column="20"/></name> <init pos:line="13" pos:column="21">= <expr><name pos:line="13" pos:column="23">begin<pos:position pos:line="13" pos:column="28"/></name> <operator pos:line="13" pos:column="29">+<pos:position pos:line="13" pos:column="30"/></operator> <call><name pos:line="13" pos:column="31">strcspn<pos:position pos:line="13" pos:column="38"/></name><argument_list pos:line="13" pos:column="38">(<argument><expr><name pos:line="13" pos:column="39">begin<pos:position pos:line="13" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="46">w_space<pos:position pos:line="13" pos:column="53"/></name></expr></argument>)<pos:position pos:line="13" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="55"/></decl_stmt>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">end<pos:position pos:line="15" pos:column="12"/></name> <operator pos:line="15" pos:column="13">==<pos:position pos:line="15" pos:column="15"/></operator> <name pos:line="15" pos:column="16">begin<pos:position pos:line="15" pos:column="21"/></name></expr>)<pos:position pos:line="15" pos:column="22"/></condition><then pos:line="15" pos:column="22">
        <block type="pseudo"><return pos:line="16" pos:column="9">return;<pos:position pos:line="16" pos:column="16"/></return></block></then></if>

    <comment type="line" pos:line="18" pos:column="5">// TODO: Optimize this linear search.</comment>
    <for pos:line="19" pos:column="5">for <control pos:line="19" pos:column="9">(<init><expr><operator pos:line="19" pos:column="10">++<pos:position pos:line="19" pos:column="12"/></operator><name pos:line="19" pos:column="12">theMethod<pos:position pos:line="19" pos:column="21"/></name></expr>;<pos:position pos:line="19" pos:column="22"/></init> <condition><expr><name pos:line="19" pos:column="23">theMethod<pos:position pos:line="19" pos:column="32"/></name> <operator pos:line="19" pos:column="33">&lt;<pos:position pos:line="19" pos:column="37"/></operator> <name><name pos:line="19" pos:column="35">Http<pos:position pos:line="19" pos:column="39"/></name><operator pos:line="19" pos:column="39">::<pos:position pos:line="19" pos:column="41"/></operator><name pos:line="19" pos:column="41">METHOD_ENUM_END<pos:position pos:line="19" pos:column="56"/></name></name></expr>;<pos:position pos:line="19" pos:column="57"/></condition> <incr><expr><operator pos:line="19" pos:column="58">++<pos:position pos:line="19" pos:column="60"/></operator><name pos:line="19" pos:column="60">theMethod<pos:position pos:line="19" pos:column="69"/></name></expr></incr>)<pos:position pos:line="19" pos:column="70"/></control> <block pos:line="19" pos:column="71">{
        <comment type="line" pos:line="20" pos:column="9">// RFC 2616 section 5.1.1 - Method names are case-sensitive</comment>
        <comment type="line" pos:line="21" pos:column="9">// NP: this is not a HTTP_VIOLATIONS case since there is no MUST/SHOULD involved.</comment>
        <if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><literal type="number" pos:line="22" pos:column="13">0<pos:position pos:line="22" pos:column="14"/></literal> <operator pos:line="22" pos:column="15">==<pos:position pos:line="22" pos:column="17"/></operator> <call><name pos:line="22" pos:column="18">image<pos:position pos:line="22" pos:column="23"/></name><argument_list pos:line="22" pos:column="23">()<pos:position pos:line="22" pos:column="25"/></argument_list></call><operator pos:line="22" pos:column="25">.<pos:position pos:line="22" pos:column="26"/></operator><call><name pos:line="22" pos:column="26">caseCmp<pos:position pos:line="22" pos:column="33"/></name><argument_list pos:line="22" pos:column="33">(<argument><expr><name pos:line="22" pos:column="34">begin<pos:position pos:line="22" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="41">end<pos:position pos:line="22" pos:column="44"/></name><operator pos:line="22" pos:column="44">-<pos:position pos:line="22" pos:column="45"/></operator><name pos:line="22" pos:column="45">begin<pos:position pos:line="22" pos:column="50"/></name></expr></argument>)<pos:position pos:line="22" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="52"/></condition><then pos:line="22" pos:column="52"> <block pos:line="22" pos:column="53">{

            <comment type="line" pos:line="24" pos:column="13">// relaxed parser allows mixed-case and corrects them on output</comment>
            <if pos:line="25" pos:column="13">if <condition pos:line="25" pos:column="16">(<expr><name><name pos:line="25" pos:column="17">Config<pos:position pos:line="25" pos:column="23"/></name><operator pos:line="25" pos:column="23">.<pos:position pos:line="25" pos:column="24"/></operator><name pos:line="25" pos:column="24">onoff<pos:position pos:line="25" pos:column="29"/></name><operator pos:line="25" pos:column="29">.<pos:position pos:line="25" pos:column="30"/></operator><name pos:line="25" pos:column="30">relaxed_header_parser<pos:position pos:line="25" pos:column="51"/></name></name></expr>)<pos:position pos:line="25" pos:column="52"/></condition><then pos:line="25" pos:column="52">
                <block type="pseudo"><return pos:line="26" pos:column="17">return;<pos:position pos:line="26" pos:column="24"/></return></block></then></if>

            <if pos:line="28" pos:column="13">if <condition pos:line="28" pos:column="16">(<expr><literal type="number" pos:line="28" pos:column="17">0<pos:position pos:line="28" pos:column="18"/></literal> <operator pos:line="28" pos:column="19">==<pos:position pos:line="28" pos:column="21"/></operator> <call><name pos:line="28" pos:column="22">image<pos:position pos:line="28" pos:column="27"/></name><argument_list pos:line="28" pos:column="27">()<pos:position pos:line="28" pos:column="29"/></argument_list></call><operator pos:line="28" pos:column="29">.<pos:position pos:line="28" pos:column="30"/></operator><call><name pos:line="28" pos:column="30">cmp<pos:position pos:line="28" pos:column="33"/></name><argument_list pos:line="28" pos:column="33">(<argument><expr><name pos:line="28" pos:column="34">begin<pos:position pos:line="28" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="41">end<pos:position pos:line="28" pos:column="44"/></name><operator pos:line="28" pos:column="44">-<pos:position pos:line="28" pos:column="45"/></operator><name pos:line="28" pos:column="45">begin<pos:position pos:line="28" pos:column="50"/></name></expr></argument>)<pos:position pos:line="28" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="52"/></condition><then pos:line="28" pos:column="52">
                <block type="pseudo"><return pos:line="29" pos:column="17">return;<pos:position pos:line="29" pos:column="24"/></return></block></then></if>
        }<pos:position pos:line="30" pos:column="10"/></block></then></if>
    }<pos:position pos:line="31" pos:column="6"/></block></for>

    <comment type="line" pos:line="33" pos:column="5">// if method not found and method string is not null then it is other method</comment>
    <expr_stmt><expr><name pos:line="34" pos:column="5">theMethod<pos:position pos:line="34" pos:column="14"/></name> <operator pos:line="34" pos:column="15">=<pos:position pos:line="34" pos:column="16"/></operator> <name><name pos:line="34" pos:column="17">Http<pos:position pos:line="34" pos:column="21"/></name><operator pos:line="34" pos:column="21">::<pos:position pos:line="34" pos:column="23"/></operator><name pos:line="34" pos:column="23">METHOD_OTHER<pos:position pos:line="34" pos:column="35"/></name></name></expr>;<pos:position pos:line="34" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="35" pos:column="5">theImage<pos:position pos:line="35" pos:column="13"/></name><operator pos:line="35" pos:column="13">.<pos:position pos:line="35" pos:column="14"/></operator><name pos:line="35" pos:column="14">assign<pos:position pos:line="35" pos:column="20"/></name></name><argument_list pos:line="35" pos:column="20">(<argument><expr><name pos:line="35" pos:column="21">begin<pos:position pos:line="35" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="28">end<pos:position pos:line="35" pos:column="31"/></name><operator pos:line="35" pos:column="31">-<pos:position pos:line="35" pos:column="32"/></operator><name pos:line="35" pos:column="32">begin<pos:position pos:line="35" pos:column="37"/></name></expr></argument>)<pos:position pos:line="35" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="39"/></expr_stmt>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
