<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3592_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Icap<pos:position pos:line="1" pos:column="22"/></name><operator pos:line="1" pos:column="22">::<pos:position pos:line="1" pos:column="24"/></operator><name pos:line="1" pos:column="24">ModXact<pos:position pos:line="1" pos:column="31"/></name><operator pos:line="1" pos:column="31">::<pos:position pos:line="1" pos:column="33"/></operator><name pos:line="1" pos:column="33">clearError<pos:position pos:line="1" pos:column="43"/></name></name><parameter_list pos:line="1" pos:column="43">()<pos:position pos:line="1" pos:column="45"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">HttpRequest<pos:position pos:line="3" pos:column="16"/></name> <modifier pos:line="3" pos:column="17">*<pos:position pos:line="3" pos:column="18"/></modifier></type><name pos:line="3" pos:column="18">request<pos:position pos:line="3" pos:column="25"/></name> <init pos:line="3" pos:column="26">= <expr><cast type="dynamic" pos:line="3" pos:column="28">dynamic_cast<argument_list type="generic" pos:line="3" pos:column="40">&lt;<argument><expr><name pos:line="3" pos:column="41">HttpRequest<pos:position pos:line="3" pos:column="52"/></name><operator pos:line="3" pos:column="52">*<pos:position pos:line="3" pos:column="53"/></operator></expr></argument>&gt;<pos:position pos:line="3" pos:column="57"/></argument_list><argument_list pos:line="3" pos:column="54">(<argument><expr><name><name pos:line="3" pos:column="55">adapted<pos:position pos:line="3" pos:column="62"/></name><operator pos:line="3" pos:column="62">.<pos:position pos:line="3" pos:column="63"/></operator><name pos:line="3" pos:column="63">header<pos:position pos:line="3" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="3" pos:column="70"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="3" pos:column="71"/></decl_stmt>
    <comment type="line" pos:line="4" pos:column="5">// if no adapted request, update virgin (and inherit its properties later)</comment>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><operator pos:line="5" pos:column="9">!<pos:position pos:line="5" pos:column="10"/></operator><name pos:line="5" pos:column="10">request<pos:position pos:line="5" pos:column="17"/></name></expr>)<pos:position pos:line="5" pos:column="18"/></condition><then pos:line="5" pos:column="18">
        <block type="pseudo"><expr_stmt><expr><name pos:line="6" pos:column="9">request<pos:position pos:line="6" pos:column="16"/></name> <operator pos:line="6" pos:column="17">=<pos:position pos:line="6" pos:column="18"/></operator> <cast type="const" pos:line="6" pos:column="19">const_cast<argument_list type="generic" pos:line="6" pos:column="29">&lt;<argument><expr><name pos:line="6" pos:column="30">HttpRequest<pos:position pos:line="6" pos:column="41"/></name><operator pos:line="6" pos:column="41">*<pos:position pos:line="6" pos:column="42"/></operator></expr></argument>&gt;<pos:position pos:line="6" pos:column="46"/></argument_list><argument_list pos:line="6" pos:column="43">(<argument><expr><operator pos:line="6" pos:column="44">&amp;<pos:position pos:line="6" pos:column="49"/></operator><call><name pos:line="6" pos:column="45">virginRequest<pos:position pos:line="6" pos:column="58"/></name><argument_list pos:line="6" pos:column="58">()<pos:position pos:line="6" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="61"/></argument_list></cast></expr>;<pos:position pos:line="6" pos:column="62"/></expr_stmt></block></then></if>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">request<pos:position pos:line="8" pos:column="16"/></name></expr>)<pos:position pos:line="8" pos:column="17"/></condition><then pos:line="8" pos:column="17">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="9" pos:column="9">request<pos:position pos:line="9" pos:column="16"/></name><operator pos:line="9" pos:column="16">-&gt;<pos:position pos:line="9" pos:column="21"/></operator><name pos:line="9" pos:column="18">clearError<pos:position pos:line="9" pos:column="28"/></name></name><argument_list pos:line="9" pos:column="28">()<pos:position pos:line="9" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="31"/></expr_stmt></block></then></if>
}<pos:position pos:line="10" pos:column="2"/></block></function></unit>
