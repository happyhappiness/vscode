<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7391_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Security<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">PeerConnector<pos:position pos:line="2" pos:column="24"/></name><operator pos:line="2" pos:column="24">::<pos:position pos:line="2" pos:column="26"/></operator><name pos:line="2" pos:column="26">negotiate<pos:position pos:line="2" pos:column="35"/></name></name><parameter_list pos:line="2" pos:column="35">()<pos:position pos:line="2" pos:column="37"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">!<pos:position pos:line="4" pos:column="10"/></operator><call><name><name pos:line="4" pos:column="10">Comm<pos:position pos:line="4" pos:column="14"/></name><operator pos:line="4" pos:column="14">::<pos:position pos:line="4" pos:column="16"/></operator><name pos:line="4" pos:column="16">IsConnOpen<pos:position pos:line="4" pos:column="26"/></name></name><argument_list pos:line="4" pos:column="26">(<argument><expr><call><name pos:line="4" pos:column="27">serverConnection<pos:position pos:line="4" pos:column="43"/></name><argument_list pos:line="4" pos:column="43">()<pos:position pos:line="4" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="47"/></condition><then pos:line="4" pos:column="47">
        <block type="pseudo"><return pos:line="5" pos:column="9">return;<pos:position pos:line="5" pos:column="16"/></return></block></then></if>

    <decl_stmt><decl><type><specifier pos:line="7" pos:column="5">const<pos:position pos:line="7" pos:column="10"/></specifier> <name pos:line="7" pos:column="11">int<pos:position pos:line="7" pos:column="14"/></name></type> <name pos:line="7" pos:column="15">fd<pos:position pos:line="7" pos:column="17"/></name> <init pos:line="7" pos:column="18">= <expr><call><name pos:line="7" pos:column="20">serverConnection<pos:position pos:line="7" pos:column="36"/></name><argument_list pos:line="7" pos:column="36">()<pos:position pos:line="7" pos:column="38"/></argument_list></call><operator pos:line="7" pos:column="38">-&gt;<pos:position pos:line="7" pos:column="43"/></operator><name pos:line="7" pos:column="40">fd<pos:position pos:line="7" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="43"/></decl_stmt>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name><name pos:line="8" pos:column="9">fd_table<pos:position pos:line="8" pos:column="17"/></name><index pos:line="8" pos:column="17">[<expr><name pos:line="8" pos:column="18">fd<pos:position pos:line="8" pos:column="20"/></name></expr>]<pos:position pos:line="8" pos:column="21"/></index></name><operator pos:line="8" pos:column="21">.<pos:position pos:line="8" pos:column="22"/></operator><call><name pos:line="8" pos:column="22">closing<pos:position pos:line="8" pos:column="29"/></name><argument_list pos:line="8" pos:column="29">()<pos:position pos:line="8" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="32"/></condition><then pos:line="8" pos:column="32">
        <block type="pseudo"><return pos:line="9" pos:column="9">return;<pos:position pos:line="9" pos:column="16"/></return></block></then></if>

<cpp:if pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">if<pos:position pos:line="11" pos:column="4"/></cpp:directive> <expr><name pos:line="11" pos:column="5">USE_OPENSSL<pos:position pos:line="11" pos:column="16"/></name></expr></cpp:if>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">auto<pos:position pos:line="12" pos:column="9"/></name></type> <name pos:line="12" pos:column="10">session<pos:position pos:line="12" pos:column="17"/></name> <init pos:line="12" pos:column="18">= <expr><name><name pos:line="12" pos:column="20">fd_table<pos:position pos:line="12" pos:column="28"/></name><index pos:line="12" pos:column="28">[<expr><name pos:line="12" pos:column="29">fd<pos:position pos:line="12" pos:column="31"/></name></expr>]<pos:position pos:line="12" pos:column="32"/></index></name><operator pos:line="12" pos:column="32">.<pos:position pos:line="12" pos:column="33"/></operator><call><name><name pos:line="12" pos:column="33">ssl<pos:position pos:line="12" pos:column="36"/></name><operator pos:line="12" pos:column="36">.<pos:position pos:line="12" pos:column="37"/></operator><name pos:line="12" pos:column="37">get<pos:position pos:line="12" pos:column="40"/></name></name><argument_list pos:line="12" pos:column="40">()<pos:position pos:line="12" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="43"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">debugs<pos:position pos:line="13" pos:column="11"/></name><argument_list pos:line="13" pos:column="11">(<argument><expr><literal type="number" pos:line="13" pos:column="12">83<pos:position pos:line="13" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="16">5<pos:position pos:line="13" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="19">"SSL_connect session="<pos:position pos:line="13" pos:column="41"/></literal> <operator pos:line="13" pos:column="42">&lt;&lt;<pos:position pos:line="13" pos:column="50"/></operator> <operator pos:line="13" pos:column="45">(<pos:position pos:line="13" pos:column="46"/></operator><name pos:line="13" pos:column="46">void<pos:position pos:line="13" pos:column="50"/></name><operator pos:line="13" pos:column="50">*<pos:position pos:line="13" pos:column="51"/></operator><operator pos:line="13" pos:column="51">)<pos:position pos:line="13" pos:column="52"/></operator><name pos:line="13" pos:column="52">session<pos:position pos:line="13" pos:column="59"/></name></expr></argument>)<pos:position pos:line="13" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="61"/></expr_stmt>
    <decl_stmt><decl><type><specifier pos:line="14" pos:column="5">const<pos:position pos:line="14" pos:column="10"/></specifier> <name pos:line="14" pos:column="11">int<pos:position pos:line="14" pos:column="14"/></name></type> <name pos:line="14" pos:column="15">result<pos:position pos:line="14" pos:column="21"/></name> <init pos:line="14" pos:column="22">= <expr><call><name pos:line="14" pos:column="24">SSL_connect<pos:position pos:line="14" pos:column="35"/></name><argument_list pos:line="14" pos:column="35">(<argument><expr><name pos:line="14" pos:column="36">session<pos:position pos:line="14" pos:column="43"/></name></expr></argument>)<pos:position pos:line="14" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="45"/></decl_stmt>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">result<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">&lt;=<pos:position pos:line="15" pos:column="21"/></operator> <literal type="number" pos:line="15" pos:column="19">0<pos:position pos:line="15" pos:column="20"/></literal></expr>)<pos:position pos:line="15" pos:column="21"/></condition><then pos:line="15" pos:column="21"> <block pos:line="15" pos:column="22">{
<cpp:elif pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">elif<pos:position pos:line="16" pos:column="6"/></cpp:directive> <expr><name pos:line="16" pos:column="7">USE_GNUTLS<pos:position pos:line="16" pos:column="17"/></name></expr></cpp:elif>
    <decl_stmt><decl><type><name pos:line="17" pos:column="5">auto<pos:position pos:line="17" pos:column="9"/></name></type> <name pos:line="17" pos:column="10">session<pos:position pos:line="17" pos:column="17"/></name> <init pos:line="17" pos:column="18">= <expr><name><name pos:line="17" pos:column="20">fd_table<pos:position pos:line="17" pos:column="28"/></name><index pos:line="17" pos:column="28">[<expr><name pos:line="17" pos:column="29">fd<pos:position pos:line="17" pos:column="31"/></name></expr>]<pos:position pos:line="17" pos:column="32"/></index></name><operator pos:line="17" pos:column="32">.<pos:position pos:line="17" pos:column="33"/></operator><call><name><name pos:line="17" pos:column="33">ssl<pos:position pos:line="17" pos:column="36"/></name><operator pos:line="17" pos:column="36">.<pos:position pos:line="17" pos:column="37"/></operator><name pos:line="17" pos:column="37">get<pos:position pos:line="17" pos:column="40"/></name></name><argument_list pos:line="17" pos:column="40">()<pos:position pos:line="17" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="17" pos:column="43"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="18" pos:column="5">const<pos:position pos:line="18" pos:column="10"/></specifier> <name pos:line="18" pos:column="11">int<pos:position pos:line="18" pos:column="14"/></name></type> <name pos:line="18" pos:column="15">result<pos:position pos:line="18" pos:column="21"/></name> <init pos:line="18" pos:column="22">= <expr><call><name pos:line="18" pos:column="24">gnutls_handshake<pos:position pos:line="18" pos:column="40"/></name><argument_list pos:line="18" pos:column="40">(<argument><expr><name pos:line="18" pos:column="41">session<pos:position pos:line="18" pos:column="48"/></name></expr></argument>)<pos:position pos:line="18" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="18" pos:column="50"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">debugs<pos:position pos:line="19" pos:column="11"/></name><argument_list pos:line="19" pos:column="11">(<argument><expr><literal type="number" pos:line="19" pos:column="12">83<pos:position pos:line="19" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="16">5<pos:position pos:line="19" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="19">"gnutls_handshake session="<pos:position pos:line="19" pos:column="46"/></literal> <operator pos:line="19" pos:column="47">&lt;&lt;<pos:position pos:line="19" pos:column="55"/></operator> <operator pos:line="19" pos:column="50">(<pos:position pos:line="19" pos:column="51"/></operator><name pos:line="19" pos:column="51">void<pos:position pos:line="19" pos:column="55"/></name><operator pos:line="19" pos:column="55">*<pos:position pos:line="19" pos:column="56"/></operator><operator pos:line="19" pos:column="56">)<pos:position pos:line="19" pos:column="57"/></operator><name pos:line="19" pos:column="57">session<pos:position pos:line="19" pos:column="64"/></name> <operator pos:line="19" pos:column="65">&lt;&lt;<pos:position pos:line="19" pos:column="73"/></operator> <literal type="string" pos:line="19" pos:column="68">", result="<pos:position pos:line="19" pos:column="79"/></literal> <operator pos:line="19" pos:column="80">&lt;&lt;<pos:position pos:line="19" pos:column="88"/></operator> <name pos:line="19" pos:column="83">result<pos:position pos:line="19" pos:column="89"/></name></expr></argument>)<pos:position pos:line="19" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="91"/></expr_stmt>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name pos:line="21" pos:column="9">result<pos:position pos:line="21" pos:column="15"/></name> <operator pos:line="21" pos:column="16">==<pos:position pos:line="21" pos:column="18"/></operator> <name pos:line="21" pos:column="19">GNUTLS_E_SUCCESS<pos:position pos:line="21" pos:column="35"/></name></expr>)<pos:position pos:line="21" pos:column="36"/></condition><then pos:line="21" pos:column="36"> <block pos:line="21" pos:column="37">{
        <decl_stmt><decl><type><name pos:line="22" pos:column="9">char<pos:position pos:line="22" pos:column="13"/></name> <modifier pos:line="22" pos:column="14">*<pos:position pos:line="22" pos:column="15"/></modifier></type><name pos:line="22" pos:column="15">desc<pos:position pos:line="22" pos:column="19"/></name> <init pos:line="22" pos:column="20">= <expr><call><name pos:line="22" pos:column="22">gnutls_session_get_desc<pos:position pos:line="22" pos:column="45"/></name><argument_list pos:line="22" pos:column="45">(<argument><expr><name pos:line="22" pos:column="46">session<pos:position pos:line="22" pos:column="53"/></name></expr></argument>)<pos:position pos:line="22" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="22" pos:column="55"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="23" pos:column="9">debugs<pos:position pos:line="23" pos:column="15"/></name><argument_list pos:line="23" pos:column="15">(<argument><expr><literal type="number" pos:line="23" pos:column="16">83<pos:position pos:line="23" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="20">2<pos:position pos:line="23" pos:column="21"/></literal></expr></argument>, <argument><expr><call><name pos:line="23" pos:column="23">serverConnection<pos:position pos:line="23" pos:column="39"/></name><argument_list pos:line="23" pos:column="39">()<pos:position pos:line="23" pos:column="41"/></argument_list></call> <operator pos:line="23" pos:column="42">&lt;&lt;<pos:position pos:line="23" pos:column="50"/></operator> <literal type="string" pos:line="23" pos:column="45">" TLS Session info: "<pos:position pos:line="23" pos:column="66"/></literal> <operator pos:line="23" pos:column="67">&lt;&lt;<pos:position pos:line="23" pos:column="75"/></operator> <name pos:line="23" pos:column="70">desc<pos:position pos:line="23" pos:column="74"/></name></expr></argument>)<pos:position pos:line="23" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="76"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">gnutls_free<pos:position pos:line="24" pos:column="20"/></name><argument_list pos:line="24" pos:column="20">(<argument><expr><name pos:line="24" pos:column="21">desc<pos:position pos:line="24" pos:column="25"/></name></expr></argument>)<pos:position pos:line="24" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>

    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name pos:line="27" pos:column="9">result<pos:position pos:line="27" pos:column="15"/></name> <operator pos:line="27" pos:column="16">!=<pos:position pos:line="27" pos:column="18"/></operator> <name pos:line="27" pos:column="19">GNUTLS_E_SUCCESS<pos:position pos:line="27" pos:column="35"/></name></expr>)<pos:position pos:line="27" pos:column="36"/></condition><then pos:line="27" pos:column="36"> <block pos:line="27" pos:column="37">{
        <comment type="line" pos:line="28" pos:column="9">// debug the TLS session state so far</comment>
        <decl_stmt><decl><type><name pos:line="29" pos:column="9">auto<pos:position pos:line="29" pos:column="13"/></name></type> <name pos:line="29" pos:column="14">descIn<pos:position pos:line="29" pos:column="20"/></name> <init pos:line="29" pos:column="21">= <expr><call><name pos:line="29" pos:column="23">gnutls_handshake_get_last_in<pos:position pos:line="29" pos:column="51"/></name><argument_list pos:line="29" pos:column="51">(<argument><expr><name pos:line="29" pos:column="52">session<pos:position pos:line="29" pos:column="59"/></name></expr></argument>)<pos:position pos:line="29" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="29" pos:column="61"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">debugs<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><literal type="number" pos:line="30" pos:column="16">83<pos:position pos:line="30" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="20">2<pos:position pos:line="30" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="23">"handshake IN: "<pos:position pos:line="30" pos:column="39"/></literal> <operator pos:line="30" pos:column="40">&lt;&lt;<pos:position pos:line="30" pos:column="48"/></operator> <call><name pos:line="30" pos:column="43">gnutls_handshake_description_get_name<pos:position pos:line="30" pos:column="80"/></name><argument_list pos:line="30" pos:column="80">(<argument><expr><name pos:line="30" pos:column="81">descIn<pos:position pos:line="30" pos:column="87"/></name></expr></argument>)<pos:position pos:line="30" pos:column="88"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="90"/></expr_stmt>
        <decl_stmt><decl><type><name pos:line="31" pos:column="9">auto<pos:position pos:line="31" pos:column="13"/></name></type> <name pos:line="31" pos:column="14">descOut<pos:position pos:line="31" pos:column="21"/></name> <init pos:line="31" pos:column="22">= <expr><call><name pos:line="31" pos:column="24">gnutls_handshake_get_last_out<pos:position pos:line="31" pos:column="53"/></name><argument_list pos:line="31" pos:column="53">(<argument><expr><name pos:line="31" pos:column="54">session<pos:position pos:line="31" pos:column="61"/></name></expr></argument>)<pos:position pos:line="31" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="31" pos:column="63"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">debugs<pos:position pos:line="32" pos:column="15"/></name><argument_list pos:line="32" pos:column="15">(<argument><expr><literal type="number" pos:line="32" pos:column="16">83<pos:position pos:line="32" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="20">2<pos:position pos:line="32" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="23">"handshake OUT: "<pos:position pos:line="32" pos:column="40"/></literal> <operator pos:line="32" pos:column="41">&lt;&lt;<pos:position pos:line="32" pos:column="49"/></operator> <call><name pos:line="32" pos:column="44">gnutls_handshake_description_get_name<pos:position pos:line="32" pos:column="81"/></name><argument_list pos:line="32" pos:column="81">(<argument><expr><name pos:line="32" pos:column="82">descOut<pos:position pos:line="32" pos:column="89"/></name></expr></argument>)<pos:position pos:line="32" pos:column="90"/></argument_list></call></expr></argument>)<pos:position pos:line="32" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="92"/></expr_stmt>
<cpp:else pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">else<pos:position pos:line="33" pos:column="6"/></cpp:directive></cpp:else>
    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">(<decl><type><specifier pos:line="34" pos:column="9">const<pos:position pos:line="34" pos:column="14"/></specifier> <name pos:line="34" pos:column="15">int<pos:position pos:line="34" pos:column="18"/></name></type> <name pos:line="34" pos:column="19">result<pos:position pos:line="34" pos:column="25"/></name> <init pos:line="34" pos:column="26">= <expr><operator pos:line="34" pos:column="28">-<pos:position pos:line="34" pos:column="29"/></operator><literal type="number" pos:line="34" pos:column="29">1<pos:position pos:line="34" pos:column="30"/></literal></expr></init></decl>)<pos:position pos:line="34" pos:column="31"/></condition><then pos:line="34" pos:column="31"> <block pos:line="34" pos:column="32">{
<cpp:endif pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">endif<pos:position pos:line="35" pos:column="7"/></cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">handleNegotiateError<pos:position pos:line="36" pos:column="29"/></name><argument_list pos:line="36" pos:column="29">(<argument><expr><name pos:line="36" pos:column="30">result<pos:position pos:line="36" pos:column="36"/></name></expr></argument>)<pos:position pos:line="36" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="38"/></expr_stmt>
        <return pos:line="37" pos:column="9">return;<pos:position pos:line="37" pos:column="16"/></return> <comment type="line" pos:line="37" pos:column="17">// we might be gone by now</comment>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="40" pos:column="5">recordNegotiationDetails<pos:position pos:line="40" pos:column="29"/></name><argument_list pos:line="40" pos:column="29">()<pos:position pos:line="40" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="32"/></expr_stmt>

    <if pos:line="42" pos:column="5">if <condition pos:line="42" pos:column="8">(<expr><operator pos:line="42" pos:column="9">!<pos:position pos:line="42" pos:column="10"/></operator><call><name pos:line="42" pos:column="10">sslFinalized<pos:position pos:line="42" pos:column="22"/></name><argument_list pos:line="42" pos:column="22">()<pos:position pos:line="42" pos:column="24"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="25"/></condition><then pos:line="42" pos:column="25">
        <block type="pseudo"><return pos:line="43" pos:column="9">return;<pos:position pos:line="43" pos:column="16"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="45" pos:column="5">callBack<pos:position pos:line="45" pos:column="13"/></name><argument_list pos:line="45" pos:column="13">()<pos:position pos:line="45" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="16"/></expr_stmt>
}<pos:position pos:line="46" pos:column="2"/></block></then></if>

<function><type><name pos:line="48" pos:column="1">bool<pos:position pos:line="48" pos:column="5"/></name></type>
<name><name pos:line="49" pos:column="1">Security<pos:position pos:line="49" pos:column="9"/></name><operator pos:line="49" pos:column="9">::<pos:position pos:line="49" pos:column="11"/></operator><name pos:line="49" pos:column="11">PeerConnector<pos:position pos:line="49" pos:column="24"/></name><operator pos:line="49" pos:column="24">::<pos:position pos:line="49" pos:column="26"/></operator><name pos:line="49" pos:column="26">sslFinalized<pos:position pos:line="49" pos:column="38"/></name></name><parameter_list pos:line="49" pos:column="38">()<pos:position pos:line="49" pos:column="40"/></parameter_list>
<block pos:line="50" pos:column="1">{
<cpp:if pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">if<pos:position pos:line="51" pos:column="4"/></cpp:directive> <expr><name pos:line="51" pos:column="5">USE_OPENSSL<pos:position pos:line="51" pos:column="16"/></name></expr></cpp:if>
    <if pos:line="52" pos:column="5">if <condition pos:line="52" pos:column="8">(<expr><name><name pos:line="52" pos:column="9">Ssl<pos:position pos:line="52" pos:column="12"/></name><operator pos:line="52" pos:column="12">::<pos:position pos:line="52" pos:column="14"/></operator><name pos:line="52" pos:column="14">TheConfig<pos:position pos:line="52" pos:column="23"/></name><operator pos:line="52" pos:column="23">.<pos:position pos:line="52" pos:column="24"/></operator><name pos:line="52" pos:column="24">ssl_crt_validator<pos:position pos:line="52" pos:column="41"/></name></name> <operator pos:line="52" pos:column="42">&amp;&amp;<pos:position pos:line="52" pos:column="52"/></operator> <name pos:line="52" pos:column="45">useCertValidator_<pos:position pos:line="52" pos:column="62"/></name></expr>)<pos:position pos:line="52" pos:column="63"/></condition><then pos:line="52" pos:column="63"> <block pos:line="52" pos:column="64">{
        <decl_stmt><decl><type><specifier pos:line="53" pos:column="9">const<pos:position pos:line="53" pos:column="14"/></specifier> <name pos:line="53" pos:column="15">int<pos:position pos:line="53" pos:column="18"/></name></type> <name pos:line="53" pos:column="19">fd<pos:position pos:line="53" pos:column="21"/></name> <init pos:line="53" pos:column="22">= <expr><call><name pos:line="53" pos:column="24">serverConnection<pos:position pos:line="53" pos:column="40"/></name><argument_list pos:line="53" pos:column="40">()<pos:position pos:line="53" pos:column="42"/></argument_list></call><operator pos:line="53" pos:column="42">-&gt;<pos:position pos:line="53" pos:column="47"/></operator><name pos:line="53" pos:column="44">fd<pos:position pos:line="53" pos:column="46"/></name></expr></init></decl>;<pos:position pos:line="53" pos:column="47"/></decl_stmt>
        <decl_stmt><decl><type><name><name pos:line="54" pos:column="9">Security<pos:position pos:line="54" pos:column="17"/></name><operator pos:line="54" pos:column="17">::<pos:position pos:line="54" pos:column="19"/></operator><name pos:line="54" pos:column="19">SessionPointer<pos:position pos:line="54" pos:column="33"/></name></name></type> <name pos:line="54" pos:column="34">session<pos:position pos:line="54" pos:column="41"/></name><argument_list pos:line="54" pos:column="41">(<argument><expr><name><name pos:line="54" pos:column="42">fd_table<pos:position pos:line="54" pos:column="50"/></name><index pos:line="54" pos:column="50">[<expr><name pos:line="54" pos:column="51">fd<pos:position pos:line="54" pos:column="53"/></name></expr>]<pos:position pos:line="54" pos:column="54"/></index></name><operator pos:line="54" pos:column="54">.<pos:position pos:line="54" pos:column="55"/></operator><name pos:line="54" pos:column="55">ssl<pos:position pos:line="54" pos:column="58"/></name></expr></argument>)<pos:position pos:line="54" pos:column="59"/></argument_list></decl>;<pos:position pos:line="54" pos:column="60"/></decl_stmt>

        <decl_stmt><decl><type><name><name pos:line="56" pos:column="9">Ssl<pos:position pos:line="56" pos:column="12"/></name><operator pos:line="56" pos:column="12">::<pos:position pos:line="56" pos:column="14"/></operator><name pos:line="56" pos:column="14">CertValidationRequest<pos:position pos:line="56" pos:column="35"/></name></name></type> <name pos:line="56" pos:column="36">validationRequest<pos:position pos:line="56" pos:column="53"/></name></decl>;<pos:position pos:line="56" pos:column="54"/></decl_stmt>
        <comment type="line" pos:line="57" pos:column="9">// WARNING: Currently we do not use any locking for 'errors' member</comment>
        <comment type="line" pos:line="58" pos:column="9">// of the Ssl::CertValidationRequest class. In this code the</comment>
        <comment type="line" pos:line="59" pos:column="9">// Ssl::CertValidationRequest object used only to pass data to</comment>
        <comment type="line" pos:line="60" pos:column="9">// Ssl::CertValidationHelper::submit method.</comment>
        <expr_stmt><expr><name><name pos:line="61" pos:column="9">validationRequest<pos:position pos:line="61" pos:column="26"/></name><operator pos:line="61" pos:column="26">.<pos:position pos:line="61" pos:column="27"/></operator><name pos:line="61" pos:column="27">ssl<pos:position pos:line="61" pos:column="30"/></name></name> <operator pos:line="61" pos:column="31">=<pos:position pos:line="61" pos:column="32"/></operator> <name pos:line="61" pos:column="33">session<pos:position pos:line="61" pos:column="40"/></name></expr>;<pos:position pos:line="61" pos:column="41"/></expr_stmt>
        <if pos:line="62" pos:column="9">if <condition pos:line="62" pos:column="12">(<decl><type><name pos:line="62" pos:column="13">SBuf<pos:position pos:line="62" pos:column="17"/></name> <modifier pos:line="62" pos:column="18">*<pos:position pos:line="62" pos:column="19"/></modifier></type><name pos:line="62" pos:column="19">dName<pos:position pos:line="62" pos:column="24"/></name> <init pos:line="62" pos:column="25">= <expr><operator pos:line="62" pos:column="27">(<pos:position pos:line="62" pos:column="28"/></operator><name pos:line="62" pos:column="28">SBuf<pos:position pos:line="62" pos:column="32"/></name> <operator pos:line="62" pos:column="33">*<pos:position pos:line="62" pos:column="34"/></operator><operator pos:line="62" pos:column="34">)<pos:position pos:line="62" pos:column="35"/></operator><call><name pos:line="62" pos:column="35">SSL_get_ex_data<pos:position pos:line="62" pos:column="50"/></name><argument_list pos:line="62" pos:column="50">(<argument><expr><call><name><name pos:line="62" pos:column="51">session<pos:position pos:line="62" pos:column="58"/></name><operator pos:line="62" pos:column="58">.<pos:position pos:line="62" pos:column="59"/></operator><name pos:line="62" pos:column="59">get<pos:position pos:line="62" pos:column="62"/></name></name><argument_list pos:line="62" pos:column="62">()<pos:position pos:line="62" pos:column="64"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="62" pos:column="66">ssl_ex_index_server<pos:position pos:line="62" pos:column="85"/></name></expr></argument>)<pos:position pos:line="62" pos:column="86"/></argument_list></call></expr></init></decl>)<pos:position pos:line="62" pos:column="87"/></condition><then pos:line="62" pos:column="87">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="63" pos:column="13">validationRequest<pos:position pos:line="63" pos:column="30"/></name><operator pos:line="63" pos:column="30">.<pos:position pos:line="63" pos:column="31"/></operator><name pos:line="63" pos:column="31">domainName<pos:position pos:line="63" pos:column="41"/></name></name> <operator pos:line="63" pos:column="42">=<pos:position pos:line="63" pos:column="43"/></operator> <call><name><name pos:line="63" pos:column="44">dName<pos:position pos:line="63" pos:column="49"/></name><operator pos:line="63" pos:column="49">-&gt;<pos:position pos:line="63" pos:column="54"/></operator><name pos:line="63" pos:column="51">c_str<pos:position pos:line="63" pos:column="56"/></name></name><argument_list pos:line="63" pos:column="56">()<pos:position pos:line="63" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="59"/></expr_stmt></block></then></if>
        <if pos:line="64" pos:column="9">if <condition pos:line="64" pos:column="12">(<decl><type><name><name pos:line="64" pos:column="13">Security<pos:position pos:line="64" pos:column="21"/></name><operator pos:line="64" pos:column="21">::<pos:position pos:line="64" pos:column="23"/></operator><name pos:line="64" pos:column="23">CertErrors<pos:position pos:line="64" pos:column="33"/></name></name> <modifier pos:line="64" pos:column="34">*<pos:position pos:line="64" pos:column="35"/></modifier></type><name pos:line="64" pos:column="35">errs<pos:position pos:line="64" pos:column="39"/></name> <init pos:line="64" pos:column="40">= <expr><cast type="static" pos:line="64" pos:column="42">static_cast<argument_list type="generic" pos:line="64" pos:column="53">&lt;<argument><expr><name><name pos:line="64" pos:column="54">Security<pos:position pos:line="64" pos:column="62"/></name><operator pos:line="64" pos:column="62">::<pos:position pos:line="64" pos:column="64"/></operator><name pos:line="64" pos:column="64">CertErrors<pos:position pos:line="64" pos:column="74"/></name></name> <operator pos:line="64" pos:column="75">*<pos:position pos:line="64" pos:column="76"/></operator></expr></argument>&gt;<pos:position pos:line="64" pos:column="80"/></argument_list><argument_list pos:line="64" pos:column="77">(<argument><expr><call><name pos:line="64" pos:column="78">SSL_get_ex_data<pos:position pos:line="64" pos:column="93"/></name><argument_list pos:line="64" pos:column="93">(<argument><expr><call><name><name pos:line="64" pos:column="94">session<pos:position pos:line="64" pos:column="101"/></name><operator pos:line="64" pos:column="101">.<pos:position pos:line="64" pos:column="102"/></operator><name pos:line="64" pos:column="102">get<pos:position pos:line="64" pos:column="105"/></name></name><argument_list pos:line="64" pos:column="105">()<pos:position pos:line="64" pos:column="107"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="64" pos:column="109">ssl_ex_index_ssl_errors<pos:position pos:line="64" pos:column="132"/></name></expr></argument>)<pos:position pos:line="64" pos:column="133"/></argument_list></call></expr></argument>)<pos:position pos:line="64" pos:column="134"/></argument_list></cast></expr></init></decl>)<pos:position pos:line="64" pos:column="135"/></condition><then pos:line="64" pos:column="135">
            <comment type="line" pos:line="65" pos:column="13">// validationRequest disappears on return so no need to cbdataReference</comment>
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="66" pos:column="13">validationRequest<pos:position pos:line="66" pos:column="30"/></name><operator pos:line="66" pos:column="30">.<pos:position pos:line="66" pos:column="31"/></operator><name pos:line="66" pos:column="31">errors<pos:position pos:line="66" pos:column="37"/></name></name> <operator pos:line="66" pos:column="38">=<pos:position pos:line="66" pos:column="39"/></operator> <name pos:line="66" pos:column="40">errs<pos:position pos:line="66" pos:column="44"/></name></expr>;<pos:position pos:line="66" pos:column="45"/></expr_stmt></block></then></if>
        <try pos:line="67" pos:column="9">try <block pos:line="67" pos:column="13">{
            <expr_stmt><expr><call><name pos:line="68" pos:column="13">debugs<pos:position pos:line="68" pos:column="19"/></name><argument_list pos:line="68" pos:column="19">(<argument><expr><literal type="number" pos:line="68" pos:column="20">83<pos:position pos:line="68" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="68" pos:column="24">5<pos:position pos:line="68" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="68" pos:column="27">"Sending SSL certificate for validation to ssl_crtvd."<pos:position pos:line="68" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="83"/></expr_stmt>
            <decl_stmt><decl><type><name><name pos:line="69" pos:column="13">AsyncCall<pos:position pos:line="69" pos:column="22"/></name><operator pos:line="69" pos:column="22">::<pos:position pos:line="69" pos:column="24"/></operator><name pos:line="69" pos:column="24">Pointer<pos:position pos:line="69" pos:column="31"/></name></name></type> <name pos:line="69" pos:column="32">call<pos:position pos:line="69" pos:column="36"/></name> <init pos:line="69" pos:column="37">= <expr><call><name pos:line="69" pos:column="39">asyncCall<pos:position pos:line="69" pos:column="48"/></name><argument_list pos:line="69" pos:column="48">(<argument><expr><literal type="number" pos:line="69" pos:column="49">83<pos:position pos:line="69" pos:column="51"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="69" pos:column="52">5<pos:position pos:line="69" pos:column="53"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="55">"Security::PeerConnector::sslCrtvdHandleReply"<pos:position pos:line="69" pos:column="101"/></literal></expr></argument>, <argument><expr><call><name><name pos:line="69" pos:column="103">Ssl<pos:position pos:line="69" pos:column="106"/></name><operator pos:line="69" pos:column="106">::<pos:position pos:line="69" pos:column="108"/></operator><name pos:line="69" pos:column="108">CertValidationHelper<pos:position pos:line="69" pos:column="128"/></name><operator pos:line="69" pos:column="128">::<pos:position pos:line="69" pos:column="130"/></operator><name pos:line="69" pos:column="130">CbDialer<pos:position pos:line="69" pos:column="138"/></name></name><argument_list pos:line="69" pos:column="138">(<argument><expr><name pos:line="69" pos:column="139">this<pos:position pos:line="69" pos:column="143"/></name></expr></argument>, <argument><expr><operator pos:line="69" pos:column="145">&amp;<pos:position pos:line="69" pos:column="150"/></operator><name><name pos:line="69" pos:column="146">Security<pos:position pos:line="69" pos:column="154"/></name><operator pos:line="69" pos:column="154">::<pos:position pos:line="69" pos:column="156"/></operator><name pos:line="69" pos:column="156">PeerConnector<pos:position pos:line="69" pos:column="169"/></name><operator pos:line="69" pos:column="169">::<pos:position pos:line="69" pos:column="171"/></operator><name pos:line="69" pos:column="171">sslCrtvdHandleReply<pos:position pos:line="69" pos:column="190"/></name></name></expr></argument>, <argument><expr><literal type="null" pos:line="69" pos:column="192">nullptr<pos:position pos:line="69" pos:column="199"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="200"/></argument_list></call></expr></argument>)<pos:position pos:line="69" pos:column="201"/></argument_list></call></expr></init></decl>;<pos:position pos:line="69" pos:column="202"/></decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="70" pos:column="13">Ssl<pos:position pos:line="70" pos:column="16"/></name><operator pos:line="70" pos:column="16">::<pos:position pos:line="70" pos:column="18"/></operator><name pos:line="70" pos:column="18">CertValidationHelper<pos:position pos:line="70" pos:column="38"/></name><operator pos:line="70" pos:column="38">::<pos:position pos:line="70" pos:column="40"/></operator><name pos:line="70" pos:column="40">GetInstance<pos:position pos:line="70" pos:column="51"/></name></name><argument_list pos:line="70" pos:column="51">()<pos:position pos:line="70" pos:column="53"/></argument_list></call><operator pos:line="70" pos:column="53">-&gt;<pos:position pos:line="70" pos:column="58"/></operator><call><name pos:line="70" pos:column="55">sslSubmit<pos:position pos:line="70" pos:column="64"/></name><argument_list pos:line="70" pos:column="64">(<argument><expr><name pos:line="70" pos:column="65">validationRequest<pos:position pos:line="70" pos:column="82"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="84">call<pos:position pos:line="70" pos:column="88"/></name></expr></argument>)<pos:position pos:line="70" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="90"/></expr_stmt>
            <return pos:line="71" pos:column="13">return <expr><literal type="boolean" pos:line="71" pos:column="20">false<pos:position pos:line="71" pos:column="25"/></literal></expr>;<pos:position pos:line="71" pos:column="26"/></return>
        }<pos:position pos:line="72" pos:column="10"/></block> <catch pos:line="72" pos:column="11">catch <parameter_list pos:line="72" pos:column="17">(<parameter><decl><type><specifier pos:line="72" pos:column="18">const<pos:position pos:line="72" pos:column="23"/></specifier> <name><name pos:line="72" pos:column="24">std<pos:position pos:line="72" pos:column="27"/></name><operator pos:line="72" pos:column="27">::<pos:position pos:line="72" pos:column="29"/></operator><name pos:line="72" pos:column="29">exception<pos:position pos:line="72" pos:column="38"/></name></name> <modifier pos:line="72" pos:column="39">&amp;<pos:position pos:line="72" pos:column="44"/></modifier></type><name pos:line="72" pos:column="40">e<pos:position pos:line="72" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="72" pos:column="42"/></parameter_list> <block pos:line="72" pos:column="43">{
            <expr_stmt><expr><call><name pos:line="73" pos:column="13">debugs<pos:position pos:line="73" pos:column="19"/></name><argument_list pos:line="73" pos:column="19">(<argument><expr><literal type="number" pos:line="73" pos:column="20">83<pos:position pos:line="73" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="73" pos:column="24">DBG_IMPORTANT<pos:position pos:line="73" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="39">"ERROR: Failed to compose ssl_crtvd "<pos:position pos:line="73" pos:column="76"/></literal> <operator pos:line="73" pos:column="77">&lt;&lt;<pos:position pos:line="73" pos:column="85"/></operator>
                   <literal type="string" pos:line="74" pos:column="20">"request for "<pos:position pos:line="74" pos:column="34"/></literal> <operator pos:line="74" pos:column="35">&lt;&lt;<pos:position pos:line="74" pos:column="43"/></operator> <name><name pos:line="74" pos:column="38">validationRequest<pos:position pos:line="74" pos:column="55"/></name><operator pos:line="74" pos:column="55">.<pos:position pos:line="74" pos:column="56"/></operator><name pos:line="74" pos:column="56">domainName<pos:position pos:line="74" pos:column="66"/></name></name> <operator pos:line="74" pos:column="67">&lt;&lt;<pos:position pos:line="74" pos:column="75"/></operator>
                   <literal type="string" pos:line="75" pos:column="20">" certificate: "<pos:position pos:line="75" pos:column="36"/></literal> <operator pos:line="75" pos:column="37">&lt;&lt;<pos:position pos:line="75" pos:column="45"/></operator> <call><name><name pos:line="75" pos:column="40">e<pos:position pos:line="75" pos:column="41"/></name><operator pos:line="75" pos:column="41">.<pos:position pos:line="75" pos:column="42"/></operator><name pos:line="75" pos:column="42">what<pos:position pos:line="75" pos:column="46"/></name></name><argument_list pos:line="75" pos:column="46">()<pos:position pos:line="75" pos:column="48"/></argument_list></call> <operator pos:line="75" pos:column="49">&lt;&lt;<pos:position pos:line="75" pos:column="57"/></operator> <literal type="string" pos:line="75" pos:column="52">"; will now block to "<pos:position pos:line="75" pos:column="74"/></literal> <operator pos:line="75" pos:column="75">&lt;&lt;<pos:position pos:line="75" pos:column="83"/></operator>
                   <literal type="string" pos:line="76" pos:column="20">"validate that certificate."<pos:position pos:line="76" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="50"/></expr_stmt>
            <comment type="line" pos:line="77" pos:column="13">// fall through to do blocking in-process generation.</comment>
            <decl_stmt><decl><type><name pos:line="78" pos:column="13">ErrorState<pos:position pos:line="78" pos:column="23"/></name> <modifier pos:line="78" pos:column="24">*<pos:position pos:line="78" pos:column="25"/></modifier></type><name pos:line="78" pos:column="25">anErr<pos:position pos:line="78" pos:column="30"/></name> <init pos:line="78" pos:column="31">= <expr><operator pos:line="78" pos:column="33">new<pos:position pos:line="78" pos:column="36"/></operator> <call><name pos:line="78" pos:column="37">ErrorState<pos:position pos:line="78" pos:column="47"/></name><argument_list pos:line="78" pos:column="47">(<argument><expr><name pos:line="78" pos:column="48">ERR_GATEWAY_FAILURE<pos:position pos:line="78" pos:column="67"/></name></expr></argument>, <argument><expr><name><name pos:line="78" pos:column="69">Http<pos:position pos:line="78" pos:column="73"/></name><operator pos:line="78" pos:column="73">::<pos:position pos:line="78" pos:column="75"/></operator><name pos:line="78" pos:column="75">scInternalServerError<pos:position pos:line="78" pos:column="96"/></name></name></expr></argument>, <argument><expr><call><name><name pos:line="78" pos:column="98">request<pos:position pos:line="78" pos:column="105"/></name><operator pos:line="78" pos:column="105">.<pos:position pos:line="78" pos:column="106"/></operator><name pos:line="78" pos:column="106">getRaw<pos:position pos:line="78" pos:column="112"/></name></name><argument_list pos:line="78" pos:column="112">()<pos:position pos:line="78" pos:column="114"/></argument_list></call></expr></argument>)<pos:position pos:line="78" pos:column="115"/></argument_list></call></expr></init></decl>;<pos:position pos:line="78" pos:column="116"/></decl_stmt>

            <expr_stmt><expr><call><name pos:line="80" pos:column="13">noteNegotiationDone<pos:position pos:line="80" pos:column="32"/></name><argument_list pos:line="80" pos:column="32">(<argument><expr><name pos:line="80" pos:column="33">anErr<pos:position pos:line="80" pos:column="38"/></name></expr></argument>)<pos:position pos:line="80" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="40"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="81" pos:column="13">bail<pos:position pos:line="81" pos:column="17"/></name><argument_list pos:line="81" pos:column="17">(<argument><expr><name pos:line="81" pos:column="18">anErr<pos:position pos:line="81" pos:column="23"/></name></expr></argument>)<pos:position pos:line="81" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="25"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="82" pos:column="13">serverConn<pos:position pos:line="82" pos:column="23"/></name><operator pos:line="82" pos:column="23">-&gt;<pos:position pos:line="82" pos:column="28"/></operator><name pos:line="82" pos:column="25">close<pos:position pos:line="82" pos:column="30"/></name></name><argument_list pos:line="82" pos:column="30">()<pos:position pos:line="82" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="33"/></expr_stmt>
            <return pos:line="83" pos:column="13">return <expr><literal type="boolean" pos:line="83" pos:column="20">true<pos:position pos:line="83" pos:column="24"/></literal></expr>;<pos:position pos:line="83" pos:column="25"/></return>
        }<pos:position pos:line="84" pos:column="10"/></block></catch></try>
    }<pos:position pos:line="85" pos:column="6"/></block></then></if>
<cpp:endif pos:line="86" pos:column="1">#<cpp:directive pos:line="86" pos:column="2">endif<pos:position pos:line="86" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="88" pos:column="5">noteNegotiationDone<pos:position pos:line="88" pos:column="24"/></name><argument_list pos:line="88" pos:column="24">(<argument><expr><name pos:line="88" pos:column="25">NULL<pos:position pos:line="88" pos:column="29"/></name></expr></argument>)<pos:position pos:line="88" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="31"/></expr_stmt>
    <return pos:line="89" pos:column="5">return <expr><literal type="boolean" pos:line="89" pos:column="12">true<pos:position pos:line="89" pos:column="16"/></literal></expr>;<pos:position pos:line="89" pos:column="17"/></return>
}<pos:position pos:line="90" pos:column="2"/></block></function>

<cpp:if pos:line="92" pos:column="1">#<cpp:directive pos:line="92" pos:column="2">if<pos:position pos:line="92" pos:column="4"/></cpp:directive> <expr><name pos:line="92" pos:column="5">USE_OPENSSL<pos:position pos:line="92" pos:column="16"/></name></expr></cpp:if>
<function><type><name pos:line="93" pos:column="1">void<pos:position pos:line="93" pos:column="5"/></name></type>
<name><name pos:line="94" pos:column="1">Security<pos:position pos:line="94" pos:column="9"/></name><operator pos:line="94" pos:column="9">::<pos:position pos:line="94" pos:column="11"/></operator><name pos:line="94" pos:column="11">PeerConnector<pos:position pos:line="94" pos:column="24"/></name><operator pos:line="94" pos:column="24">::<pos:position pos:line="94" pos:column="26"/></operator><name pos:line="94" pos:column="26">sslCrtvdHandleReply<pos:position pos:line="94" pos:column="45"/></name></name><parameter_list pos:line="94" pos:column="45">(<parameter><decl><type><name><name pos:line="94" pos:column="46">Ssl<pos:position pos:line="94" pos:column="49"/></name><operator pos:line="94" pos:column="49">::<pos:position pos:line="94" pos:column="51"/></operator><name pos:line="94" pos:column="51">CertValidationResponse<pos:position pos:line="94" pos:column="73"/></name><operator pos:line="94" pos:column="73">::<pos:position pos:line="94" pos:column="75"/></operator><name pos:line="94" pos:column="75">Pointer<pos:position pos:line="94" pos:column="82"/></name></name></type> <name pos:line="94" pos:column="83">validationResponse<pos:position pos:line="94" pos:column="101"/></name></decl></parameter>)<pos:position pos:line="94" pos:column="102"/></parameter_list>
<block pos:line="95" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="96" pos:column="5">Must<pos:position pos:line="96" pos:column="9"/></name><argument_list pos:line="96" pos:column="9">(<argument><expr><name pos:line="96" pos:column="10">validationResponse<pos:position pos:line="96" pos:column="28"/></name> <operator pos:line="96" pos:column="29">!=<pos:position pos:line="96" pos:column="31"/></operator> <name pos:line="96" pos:column="32">NULL<pos:position pos:line="96" pos:column="36"/></name></expr></argument>)<pos:position pos:line="96" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="38"/></expr_stmt>

    <decl_stmt><decl><type><name><name pos:line="98" pos:column="5">Ssl<pos:position pos:line="98" pos:column="8"/></name><operator pos:line="98" pos:column="8">::<pos:position pos:line="98" pos:column="10"/></operator><name pos:line="98" pos:column="10">ErrorDetail<pos:position pos:line="98" pos:column="21"/></name></name> <modifier pos:line="98" pos:column="22">*<pos:position pos:line="98" pos:column="23"/></modifier></type><name pos:line="98" pos:column="23">errDetails<pos:position pos:line="98" pos:column="33"/></name> <init pos:line="98" pos:column="34">= <expr><name pos:line="98" pos:column="36">NULL<pos:position pos:line="98" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="98" pos:column="41"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="99" pos:column="5">bool<pos:position pos:line="99" pos:column="9"/></name></type> <name pos:line="99" pos:column="10">validatorFailed<pos:position pos:line="99" pos:column="25"/></name> <init pos:line="99" pos:column="26">= <expr><literal type="boolean" pos:line="99" pos:column="28">false<pos:position pos:line="99" pos:column="33"/></literal></expr></init></decl>;<pos:position pos:line="99" pos:column="34"/></decl_stmt>
    <if pos:line="100" pos:column="5">if <condition pos:line="100" pos:column="8">(<expr><operator pos:line="100" pos:column="9">!<pos:position pos:line="100" pos:column="10"/></operator><call><name><name pos:line="100" pos:column="10">Comm<pos:position pos:line="100" pos:column="14"/></name><operator pos:line="100" pos:column="14">::<pos:position pos:line="100" pos:column="16"/></operator><name pos:line="100" pos:column="16">IsConnOpen<pos:position pos:line="100" pos:column="26"/></name></name><argument_list pos:line="100" pos:column="26">(<argument><expr><call><name pos:line="100" pos:column="27">serverConnection<pos:position pos:line="100" pos:column="43"/></name><argument_list pos:line="100" pos:column="43">()<pos:position pos:line="100" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="100" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="100" pos:column="47"/></condition><then pos:line="100" pos:column="47"> <block pos:line="100" pos:column="48">{
        <return pos:line="101" pos:column="9">return;<pos:position pos:line="101" pos:column="16"/></return>
    }<pos:position pos:line="102" pos:column="6"/></block></then></if>

    <if pos:line="104" pos:column="5">if <condition pos:line="104" pos:column="8">(<expr><call><name><name pos:line="104" pos:column="9">Debug<pos:position pos:line="104" pos:column="14"/></name><operator pos:line="104" pos:column="14">::<pos:position pos:line="104" pos:column="16"/></operator><name pos:line="104" pos:column="16">Enabled<pos:position pos:line="104" pos:column="23"/></name></name><argument_list pos:line="104" pos:column="23">(<argument><expr><literal type="number" pos:line="104" pos:column="24">83<pos:position pos:line="104" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="104" pos:column="28">5<pos:position pos:line="104" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="104" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="104" pos:column="31"/></condition><then pos:line="104" pos:column="31"> <block pos:line="104" pos:column="32">{
        <decl_stmt><decl><type><name><name pos:line="105" pos:column="9">Security<pos:position pos:line="105" pos:column="17"/></name><operator pos:line="105" pos:column="17">::<pos:position pos:line="105" pos:column="19"/></operator><name pos:line="105" pos:column="19">SessionPointer<pos:position pos:line="105" pos:column="33"/></name></name></type> <name pos:line="105" pos:column="34">ssl<pos:position pos:line="105" pos:column="37"/></name><argument_list pos:line="105" pos:column="37">(<argument><expr><name><name pos:line="105" pos:column="38">fd_table<pos:position pos:line="105" pos:column="46"/></name><index pos:line="105" pos:column="46">[<expr><call><name pos:line="105" pos:column="47">serverConnection<pos:position pos:line="105" pos:column="63"/></name><argument_list pos:line="105" pos:column="63">()<pos:position pos:line="105" pos:column="65"/></argument_list></call><operator pos:line="105" pos:column="65">-&gt;<pos:position pos:line="105" pos:column="70"/></operator><name pos:line="105" pos:column="67">fd<pos:position pos:line="105" pos:column="69"/></name></expr>]<pos:position pos:line="105" pos:column="70"/></index></name><operator pos:line="105" pos:column="70">.<pos:position pos:line="105" pos:column="71"/></operator><name pos:line="105" pos:column="71">ssl<pos:position pos:line="105" pos:column="74"/></name></expr></argument>)<pos:position pos:line="105" pos:column="75"/></argument_list></decl>;<pos:position pos:line="105" pos:column="76"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="106" pos:column="9">SBuf<pos:position pos:line="106" pos:column="13"/></name> <modifier pos:line="106" pos:column="14">*<pos:position pos:line="106" pos:column="15"/></modifier></type><name pos:line="106" pos:column="15">server<pos:position pos:line="106" pos:column="21"/></name> <init pos:line="106" pos:column="22">= <expr><cast type="static" pos:line="106" pos:column="24">static_cast<argument_list type="generic" pos:line="106" pos:column="35">&lt;<argument><expr><name pos:line="106" pos:column="36">SBuf<pos:position pos:line="106" pos:column="40"/></name> <operator pos:line="106" pos:column="41">*<pos:position pos:line="106" pos:column="42"/></operator></expr></argument>&gt;<pos:position pos:line="106" pos:column="46"/></argument_list><argument_list pos:line="106" pos:column="43">(<argument><expr><call><name pos:line="106" pos:column="44">SSL_get_ex_data<pos:position pos:line="106" pos:column="59"/></name><argument_list pos:line="106" pos:column="59">(<argument><expr><call><name><name pos:line="106" pos:column="60">ssl<pos:position pos:line="106" pos:column="63"/></name><operator pos:line="106" pos:column="63">.<pos:position pos:line="106" pos:column="64"/></operator><name pos:line="106" pos:column="64">get<pos:position pos:line="106" pos:column="67"/></name></name><argument_list pos:line="106" pos:column="67">()<pos:position pos:line="106" pos:column="69"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="106" pos:column="71">ssl_ex_index_server<pos:position pos:line="106" pos:column="90"/></name></expr></argument>)<pos:position pos:line="106" pos:column="91"/></argument_list></call></expr></argument>)<pos:position pos:line="106" pos:column="92"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="106" pos:column="93"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="107" pos:column="9">debugs<pos:position pos:line="107" pos:column="15"/></name><argument_list pos:line="107" pos:column="15">(<argument><expr><literal type="number" pos:line="107" pos:column="16">83<pos:position pos:line="107" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="107" pos:column="19">5<pos:position pos:line="107" pos:column="20"/></literal></expr></argument>, <argument><expr><call><name pos:line="107" pos:column="22">RawPointer<pos:position pos:line="107" pos:column="32"/></name><argument_list pos:line="107" pos:column="32">(<argument><expr><literal type="string" pos:line="107" pos:column="33">"host"<pos:position pos:line="107" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="107" pos:column="41">server<pos:position pos:line="107" pos:column="47"/></name></expr></argument>)<pos:position pos:line="107" pos:column="48"/></argument_list></call> <operator pos:line="107" pos:column="49">&lt;&lt;<pos:position pos:line="107" pos:column="57"/></operator> <literal type="string" pos:line="107" pos:column="52">" cert validation result: "<pos:position pos:line="107" pos:column="79"/></literal> <operator pos:line="107" pos:column="80">&lt;&lt;<pos:position pos:line="107" pos:column="88"/></operator> <name><name pos:line="107" pos:column="83">validationResponse<pos:position pos:line="107" pos:column="101"/></name><operator pos:line="107" pos:column="101">-&gt;<pos:position pos:line="107" pos:column="106"/></operator><name pos:line="107" pos:column="103">resultCode<pos:position pos:line="107" pos:column="113"/></name></name></expr></argument>)<pos:position pos:line="107" pos:column="114"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="115"/></expr_stmt>
    }<pos:position pos:line="108" pos:column="6"/></block></then></if>

    <if pos:line="110" pos:column="5">if <condition pos:line="110" pos:column="8">(<expr><name><name pos:line="110" pos:column="9">validationResponse<pos:position pos:line="110" pos:column="27"/></name><operator pos:line="110" pos:column="27">-&gt;<pos:position pos:line="110" pos:column="32"/></operator><name pos:line="110" pos:column="29">resultCode<pos:position pos:line="110" pos:column="39"/></name></name> <operator pos:line="110" pos:column="40">==<pos:position pos:line="110" pos:column="42"/></operator> <name><operator pos:line="110" pos:column="43">::<pos:position pos:line="110" pos:column="45"/></operator><name pos:line="110" pos:column="45">Helper<pos:position pos:line="110" pos:column="51"/></name><operator pos:line="110" pos:column="51">::<pos:position pos:line="110" pos:column="53"/></operator><name pos:line="110" pos:column="53">Error<pos:position pos:line="110" pos:column="58"/></name></name></expr>)<pos:position pos:line="110" pos:column="59"/></condition><then pos:line="110" pos:column="59"> <block pos:line="110" pos:column="60">{
        <if pos:line="111" pos:column="9">if <condition pos:line="111" pos:column="12">(<decl><type><name><name pos:line="111" pos:column="13">Security<pos:position pos:line="111" pos:column="21"/></name><operator pos:line="111" pos:column="21">::<pos:position pos:line="111" pos:column="23"/></operator><name pos:line="111" pos:column="23">CertErrors<pos:position pos:line="111" pos:column="33"/></name></name> <modifier pos:line="111" pos:column="34">*<pos:position pos:line="111" pos:column="35"/></modifier></type><name pos:line="111" pos:column="35">errs<pos:position pos:line="111" pos:column="39"/></name> <init pos:line="111" pos:column="40">= <expr><call><name pos:line="111" pos:column="42">sslCrtvdCheckForErrors<pos:position pos:line="111" pos:column="64"/></name><argument_list pos:line="111" pos:column="64">(<argument><expr><operator pos:line="111" pos:column="65">*<pos:position pos:line="111" pos:column="66"/></operator><name pos:line="111" pos:column="66">validationResponse<pos:position pos:line="111" pos:column="84"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="86">errDetails<pos:position pos:line="111" pos:column="96"/></name></expr></argument>)<pos:position pos:line="111" pos:column="97"/></argument_list></call></expr></init></decl>)<pos:position pos:line="111" pos:column="98"/></condition><then pos:line="111" pos:column="98"> <block pos:line="111" pos:column="99">{
            <decl_stmt><decl><type><name><name pos:line="112" pos:column="13">Security<pos:position pos:line="112" pos:column="21"/></name><operator pos:line="112" pos:column="21">::<pos:position pos:line="112" pos:column="23"/></operator><name pos:line="112" pos:column="23">SessionPointer<pos:position pos:line="112" pos:column="37"/></name></name></type> <name pos:line="112" pos:column="38">session<pos:position pos:line="112" pos:column="45"/></name><argument_list pos:line="112" pos:column="45">(<argument><expr><name><name pos:line="112" pos:column="46">fd_table<pos:position pos:line="112" pos:column="54"/></name><index pos:line="112" pos:column="54">[<expr><call><name pos:line="112" pos:column="55">serverConnection<pos:position pos:line="112" pos:column="71"/></name><argument_list pos:line="112" pos:column="71">()<pos:position pos:line="112" pos:column="73"/></argument_list></call><operator pos:line="112" pos:column="73">-&gt;<pos:position pos:line="112" pos:column="78"/></operator><name pos:line="112" pos:column="75">fd<pos:position pos:line="112" pos:column="77"/></name></expr>]<pos:position pos:line="112" pos:column="78"/></index></name><operator pos:line="112" pos:column="78">.<pos:position pos:line="112" pos:column="79"/></operator><name pos:line="112" pos:column="79">ssl<pos:position pos:line="112" pos:column="82"/></name></expr></argument>)<pos:position pos:line="112" pos:column="83"/></argument_list></decl>;<pos:position pos:line="112" pos:column="84"/></decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="113" pos:column="13">Security<pos:position pos:line="113" pos:column="21"/></name><operator pos:line="113" pos:column="21">::<pos:position pos:line="113" pos:column="23"/></operator><name pos:line="113" pos:column="23">CertErrors<pos:position pos:line="113" pos:column="33"/></name></name> <modifier pos:line="113" pos:column="34">*<pos:position pos:line="113" pos:column="35"/></modifier></type><name pos:line="113" pos:column="35">oldErrs<pos:position pos:line="113" pos:column="42"/></name> <init pos:line="113" pos:column="43">= <expr><cast type="static" pos:line="113" pos:column="45">static_cast<argument_list type="generic" pos:line="113" pos:column="56">&lt;<argument><expr><name><name pos:line="113" pos:column="57">Security<pos:position pos:line="113" pos:column="65"/></name><operator pos:line="113" pos:column="65">::<pos:position pos:line="113" pos:column="67"/></operator><name pos:line="113" pos:column="67">CertErrors<pos:position pos:line="113" pos:column="77"/></name></name><operator pos:line="113" pos:column="77">*<pos:position pos:line="113" pos:column="78"/></operator></expr></argument>&gt;<pos:position pos:line="113" pos:column="82"/></argument_list><argument_list pos:line="113" pos:column="79">(<argument><expr><call><name pos:line="113" pos:column="80">SSL_get_ex_data<pos:position pos:line="113" pos:column="95"/></name><argument_list pos:line="113" pos:column="95">(<argument><expr><call><name><name pos:line="113" pos:column="96">session<pos:position pos:line="113" pos:column="103"/></name><operator pos:line="113" pos:column="103">.<pos:position pos:line="113" pos:column="104"/></operator><name pos:line="113" pos:column="104">get<pos:position pos:line="113" pos:column="107"/></name></name><argument_list pos:line="113" pos:column="107">()<pos:position pos:line="113" pos:column="109"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="113" pos:column="111">ssl_ex_index_ssl_errors<pos:position pos:line="113" pos:column="134"/></name></expr></argument>)<pos:position pos:line="113" pos:column="135"/></argument_list></call></expr></argument>)<pos:position pos:line="113" pos:column="136"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="113" pos:column="137"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="114" pos:column="13">SSL_set_ex_data<pos:position pos:line="114" pos:column="28"/></name><argument_list pos:line="114" pos:column="28">(<argument><expr><call><name><name pos:line="114" pos:column="29">session<pos:position pos:line="114" pos:column="36"/></name><operator pos:line="114" pos:column="36">.<pos:position pos:line="114" pos:column="37"/></operator><name pos:line="114" pos:column="37">get<pos:position pos:line="114" pos:column="40"/></name></name><argument_list pos:line="114" pos:column="40">()<pos:position pos:line="114" pos:column="42"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="114" pos:column="44">ssl_ex_index_ssl_errors<pos:position pos:line="114" pos:column="67"/></name></expr></argument>,  <argument><expr><operator pos:line="114" pos:column="70">(<pos:position pos:line="114" pos:column="71"/></operator><name pos:line="114" pos:column="71">void<pos:position pos:line="114" pos:column="75"/></name> <operator pos:line="114" pos:column="76">*<pos:position pos:line="114" pos:column="77"/></operator><operator pos:line="114" pos:column="77">)<pos:position pos:line="114" pos:column="78"/></operator><name pos:line="114" pos:column="78">errs<pos:position pos:line="114" pos:column="82"/></name></expr></argument>)<pos:position pos:line="114" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="84"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="115" pos:column="13">delete<pos:position pos:line="115" pos:column="19"/></operator> <name pos:line="115" pos:column="20">oldErrs<pos:position pos:line="115" pos:column="27"/></name></expr>;<pos:position pos:line="115" pos:column="28"/></expr_stmt>
        }<pos:position pos:line="116" pos:column="10"/></block></then></if>
    }<pos:position pos:line="117" pos:column="6"/></block></then> <elseif pos:line="117" pos:column="7">else <if pos:line="117" pos:column="12">if <condition pos:line="117" pos:column="15">(<expr><name><name pos:line="117" pos:column="16">validationResponse<pos:position pos:line="117" pos:column="34"/></name><operator pos:line="117" pos:column="34">-&gt;<pos:position pos:line="117" pos:column="39"/></operator><name pos:line="117" pos:column="36">resultCode<pos:position pos:line="117" pos:column="46"/></name></name> <operator pos:line="117" pos:column="47">!=<pos:position pos:line="117" pos:column="49"/></operator> <name><operator pos:line="117" pos:column="50">::<pos:position pos:line="117" pos:column="52"/></operator><name pos:line="117" pos:column="52">Helper<pos:position pos:line="117" pos:column="58"/></name><operator pos:line="117" pos:column="58">::<pos:position pos:line="117" pos:column="60"/></operator><name pos:line="117" pos:column="60">Okay<pos:position pos:line="117" pos:column="64"/></name></name></expr>)<pos:position pos:line="117" pos:column="65"/></condition><then pos:line="117" pos:column="65">
        <block type="pseudo"><expr_stmt><expr><name pos:line="118" pos:column="9">validatorFailed<pos:position pos:line="118" pos:column="24"/></name> <operator pos:line="118" pos:column="25">=<pos:position pos:line="118" pos:column="26"/></operator> <literal type="boolean" pos:line="118" pos:column="27">true<pos:position pos:line="118" pos:column="31"/></literal></expr>;<pos:position pos:line="118" pos:column="32"/></expr_stmt></block></then></if></elseif></if>

    <if pos:line="120" pos:column="5">if <condition pos:line="120" pos:column="8">(<expr><operator pos:line="120" pos:column="9">!<pos:position pos:line="120" pos:column="10"/></operator><name pos:line="120" pos:column="10">errDetails<pos:position pos:line="120" pos:column="20"/></name> <operator pos:line="120" pos:column="21">&amp;&amp;<pos:position pos:line="120" pos:column="31"/></operator> <operator pos:line="120" pos:column="24">!<pos:position pos:line="120" pos:column="25"/></operator><name pos:line="120" pos:column="25">validatorFailed<pos:position pos:line="120" pos:column="40"/></name></expr>)<pos:position pos:line="120" pos:column="41"/></condition><then pos:line="120" pos:column="41"> <block pos:line="120" pos:column="42">{
        <expr_stmt><expr><call><name pos:line="121" pos:column="9">noteNegotiationDone<pos:position pos:line="121" pos:column="28"/></name><argument_list pos:line="121" pos:column="28">(<argument><expr><name pos:line="121" pos:column="29">NULL<pos:position pos:line="121" pos:column="33"/></name></expr></argument>)<pos:position pos:line="121" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="122" pos:column="9">callBack<pos:position pos:line="122" pos:column="17"/></name><argument_list pos:line="122" pos:column="17">()<pos:position pos:line="122" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="20"/></expr_stmt>
        <return pos:line="123" pos:column="9">return;<pos:position pos:line="123" pos:column="16"/></return>
    }<pos:position pos:line="124" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="126" pos:column="5">ErrorState<pos:position pos:line="126" pos:column="15"/></name> <modifier pos:line="126" pos:column="16">*<pos:position pos:line="126" pos:column="17"/></modifier></type><name pos:line="126" pos:column="17">anErr<pos:position pos:line="126" pos:column="22"/></name> <init pos:line="126" pos:column="23">= <expr><name pos:line="126" pos:column="25">NULL<pos:position pos:line="126" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="126" pos:column="30"/></decl_stmt>
    <if pos:line="127" pos:column="5">if <condition pos:line="127" pos:column="8">(<expr><name pos:line="127" pos:column="9">validatorFailed<pos:position pos:line="127" pos:column="24"/></name></expr>)<pos:position pos:line="127" pos:column="25"/></condition><then pos:line="127" pos:column="25"> <block pos:line="127" pos:column="26">{
        <expr_stmt><expr><name pos:line="128" pos:column="9">anErr<pos:position pos:line="128" pos:column="14"/></name> <operator pos:line="128" pos:column="15">=<pos:position pos:line="128" pos:column="16"/></operator> <operator pos:line="128" pos:column="17">new<pos:position pos:line="128" pos:column="20"/></operator> <call><name pos:line="128" pos:column="21">ErrorState<pos:position pos:line="128" pos:column="31"/></name><argument_list pos:line="128" pos:column="31">(<argument><expr><name pos:line="128" pos:column="32">ERR_GATEWAY_FAILURE<pos:position pos:line="128" pos:column="51"/></name></expr></argument>, <argument><expr><name><name pos:line="128" pos:column="53">Http<pos:position pos:line="128" pos:column="57"/></name><operator pos:line="128" pos:column="57">::<pos:position pos:line="128" pos:column="59"/></operator><name pos:line="128" pos:column="59">scInternalServerError<pos:position pos:line="128" pos:column="80"/></name></name></expr></argument>, <argument><expr><call><name><name pos:line="128" pos:column="82">request<pos:position pos:line="128" pos:column="89"/></name><operator pos:line="128" pos:column="89">.<pos:position pos:line="128" pos:column="90"/></operator><name pos:line="128" pos:column="90">getRaw<pos:position pos:line="128" pos:column="96"/></name></name><argument_list pos:line="128" pos:column="96">()<pos:position pos:line="128" pos:column="98"/></argument_list></call></expr></argument>)<pos:position pos:line="128" pos:column="99"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="100"/></expr_stmt>
    }<pos:position pos:line="129" pos:column="6"/></block></then>  <else pos:line="129" pos:column="8">else <block pos:line="129" pos:column="13">{
        <expr_stmt><expr><name pos:line="130" pos:column="9">anErr<pos:position pos:line="130" pos:column="14"/></name> <operator pos:line="130" pos:column="15">=<pos:position pos:line="130" pos:column="16"/></operator>  <operator pos:line="130" pos:column="18">new<pos:position pos:line="130" pos:column="21"/></operator> <call><name pos:line="130" pos:column="22">ErrorState<pos:position pos:line="130" pos:column="32"/></name><argument_list pos:line="130" pos:column="32">(<argument><expr><name pos:line="130" pos:column="33">ERR_SECURE_CONNECT_FAIL<pos:position pos:line="130" pos:column="56"/></name></expr></argument>, <argument><expr><name><name pos:line="130" pos:column="58">Http<pos:position pos:line="130" pos:column="62"/></name><operator pos:line="130" pos:column="62">::<pos:position pos:line="130" pos:column="64"/></operator><name pos:line="130" pos:column="64">scServiceUnavailable<pos:position pos:line="130" pos:column="84"/></name></name></expr></argument>, <argument><expr><call><name><name pos:line="130" pos:column="86">request<pos:position pos:line="130" pos:column="93"/></name><operator pos:line="130" pos:column="93">.<pos:position pos:line="130" pos:column="94"/></operator><name pos:line="130" pos:column="94">getRaw<pos:position pos:line="130" pos:column="100"/></name></name><argument_list pos:line="130" pos:column="100">()<pos:position pos:line="130" pos:column="102"/></argument_list></call></expr></argument>)<pos:position pos:line="130" pos:column="103"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="104"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="131" pos:column="9">anErr<pos:position pos:line="131" pos:column="14"/></name><operator pos:line="131" pos:column="14">-&gt;<pos:position pos:line="131" pos:column="19"/></operator><name pos:line="131" pos:column="16">detail<pos:position pos:line="131" pos:column="22"/></name></name> <operator pos:line="131" pos:column="23">=<pos:position pos:line="131" pos:column="24"/></operator> <name pos:line="131" pos:column="25">errDetails<pos:position pos:line="131" pos:column="35"/></name></expr>;<pos:position pos:line="131" pos:column="36"/></expr_stmt>
        <comment type="block" pos:line="132" pos:column="9">/*anErr-&gt;xerrno= Should preserved*/</comment>
    }<pos:position pos:line="133" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="135" pos:column="5">noteNegotiationDone<pos:position pos:line="135" pos:column="24"/></name><argument_list pos:line="135" pos:column="24">(<argument><expr><name pos:line="135" pos:column="25">anErr<pos:position pos:line="135" pos:column="30"/></name></expr></argument>)<pos:position pos:line="135" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="136" pos:column="5">bail<pos:position pos:line="136" pos:column="9"/></name><argument_list pos:line="136" pos:column="9">(<argument><expr><name pos:line="136" pos:column="10">anErr<pos:position pos:line="136" pos:column="15"/></name></expr></argument>)<pos:position pos:line="136" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="137" pos:column="5">serverConn<pos:position pos:line="137" pos:column="15"/></name><operator pos:line="137" pos:column="15">-&gt;<pos:position pos:line="137" pos:column="20"/></operator><name pos:line="137" pos:column="17">close<pos:position pos:line="137" pos:column="22"/></name></name><argument_list pos:line="137" pos:column="22">()<pos:position pos:line="137" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="25"/></expr_stmt>
    <return pos:line="138" pos:column="5">return;<pos:position pos:line="138" pos:column="12"/></return>
}<pos:position pos:line="139" pos:column="2"/></block></function>
<cpp:endif pos:line="140" pos:column="1">#<cpp:directive pos:line="140" pos:column="2">endif<pos:position pos:line="140" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="142" pos:column="1">#<cpp:directive pos:line="142" pos:column="2">if<pos:position pos:line="142" pos:column="4"/></cpp:directive> <expr><name pos:line="142" pos:column="5">USE_OPENSSL<pos:position pos:line="142" pos:column="16"/></name></expr></cpp:if>
<comment type="line" format="doxygen" pos:line="143" pos:column="1">/// Checks errors in the cert. validator response against sslproxy_cert_error.</comment>
<comment type="line" format="doxygen" pos:line="144" pos:column="1">/// The first honored error, if any, is returned via errDetails parameter.</comment>
<comment type="line" format="doxygen" pos:line="145" pos:column="1">/// The method returns all seen errors except SSL_ERROR_NONE as Security::CertErrors.</comment>
<function><type><name><name pos:line="146" pos:column="1">Security<pos:position pos:line="146" pos:column="9"/></name><operator pos:line="146" pos:column="9">::<pos:position pos:line="146" pos:column="11"/></operator><name pos:line="146" pos:column="11">CertErrors<pos:position pos:line="146" pos:column="21"/></name></name> <modifier pos:line="146" pos:column="22">*<pos:position pos:line="146" pos:column="23"/></modifier></type>
<name><name pos:line="147" pos:column="1">Security<pos:position pos:line="147" pos:column="9"/></name><operator pos:line="147" pos:column="9">::<pos:position pos:line="147" pos:column="11"/></operator><name pos:line="147" pos:column="11">PeerConnector<pos:position pos:line="147" pos:column="24"/></name><operator pos:line="147" pos:column="24">::<pos:position pos:line="147" pos:column="26"/></operator><name pos:line="147" pos:column="26">sslCrtvdCheckForErrors<pos:position pos:line="147" pos:column="48"/></name></name><parameter_list pos:line="147" pos:column="48">(<parameter><decl><type><name><name pos:line="147" pos:column="49">Ssl<pos:position pos:line="147" pos:column="52"/></name><operator pos:line="147" pos:column="52">::<pos:position pos:line="147" pos:column="54"/></operator><name pos:line="147" pos:column="54">CertValidationResponse<pos:position pos:line="147" pos:column="76"/></name></name> <specifier pos:line="147" pos:column="77">const<pos:position pos:line="147" pos:column="82"/></specifier> <modifier pos:line="147" pos:column="83">&amp;<pos:position pos:line="147" pos:column="88"/></modifier></type><name pos:line="147" pos:column="84">resp<pos:position pos:line="147" pos:column="88"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="147" pos:column="90">Ssl<pos:position pos:line="147" pos:column="93"/></name><operator pos:line="147" pos:column="93">::<pos:position pos:line="147" pos:column="95"/></operator><name pos:line="147" pos:column="95">ErrorDetail<pos:position pos:line="147" pos:column="106"/></name></name> <modifier pos:line="147" pos:column="107">*<pos:position pos:line="147" pos:column="108"/></modifier><modifier pos:line="147" pos:column="108">&amp;<pos:position pos:line="147" pos:column="113"/></modifier></type> <name pos:line="147" pos:column="110">errDetails<pos:position pos:line="147" pos:column="120"/></name></decl></parameter>)<pos:position pos:line="147" pos:column="121"/></parameter_list>
<block pos:line="148" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="149" pos:column="5">ACLFilledChecklist<pos:position pos:line="149" pos:column="23"/></name> <modifier pos:line="149" pos:column="24">*<pos:position pos:line="149" pos:column="25"/></modifier></type><name pos:line="149" pos:column="25">check<pos:position pos:line="149" pos:column="30"/></name> <init pos:line="149" pos:column="31">= <expr><name pos:line="149" pos:column="33">NULL<pos:position pos:line="149" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="149" pos:column="38"/></decl_stmt>
    <if pos:line="150" pos:column="5">if <condition pos:line="150" pos:column="8">(<decl><type><name pos:line="150" pos:column="9">acl_access<pos:position pos:line="150" pos:column="19"/></name> <modifier pos:line="150" pos:column="20">*<pos:position pos:line="150" pos:column="21"/></modifier></type><name pos:line="150" pos:column="21">acl<pos:position pos:line="150" pos:column="24"/></name> <init pos:line="150" pos:column="25">= <expr><name><operator pos:line="150" pos:column="27">::<pos:position pos:line="150" pos:column="29"/></operator><name pos:line="150" pos:column="29">Config<pos:position pos:line="150" pos:column="35"/></name><operator pos:line="150" pos:column="35">.<pos:position pos:line="150" pos:column="36"/></operator><name pos:line="150" pos:column="36">ssl_client<pos:position pos:line="150" pos:column="46"/></name><operator pos:line="150" pos:column="46">.<pos:position pos:line="150" pos:column="47"/></operator><name pos:line="150" pos:column="47">cert_error<pos:position pos:line="150" pos:column="57"/></name></name></expr></init></decl>)<pos:position pos:line="150" pos:column="58"/></condition><then pos:line="150" pos:column="58"> <block pos:line="150" pos:column="59">{
        <expr_stmt><expr><name pos:line="151" pos:column="9">check<pos:position pos:line="151" pos:column="14"/></name> <operator pos:line="151" pos:column="15">=<pos:position pos:line="151" pos:column="16"/></operator> <operator pos:line="151" pos:column="17">new<pos:position pos:line="151" pos:column="20"/></operator> <call><name pos:line="151" pos:column="21">ACLFilledChecklist<pos:position pos:line="151" pos:column="39"/></name><argument_list pos:line="151" pos:column="39">(<argument><expr><name pos:line="151" pos:column="40">acl<pos:position pos:line="151" pos:column="43"/></name></expr></argument>, <argument><expr><call><name><name pos:line="151" pos:column="45">request<pos:position pos:line="151" pos:column="52"/></name><operator pos:line="151" pos:column="52">.<pos:position pos:line="151" pos:column="53"/></operator><name pos:line="151" pos:column="53">getRaw<pos:position pos:line="151" pos:column="59"/></name></name><argument_list pos:line="151" pos:column="59">()<pos:position pos:line="151" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="151" pos:column="63">dash_str<pos:position pos:line="151" pos:column="71"/></name></expr></argument>)<pos:position pos:line="151" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="73"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="152" pos:column="9">check<pos:position pos:line="152" pos:column="14"/></name><operator pos:line="152" pos:column="14">-&gt;<pos:position pos:line="152" pos:column="19"/></operator><name pos:line="152" pos:column="16">al<pos:position pos:line="152" pos:column="18"/></name></name> <operator pos:line="152" pos:column="19">=<pos:position pos:line="152" pos:column="20"/></operator> <name pos:line="152" pos:column="21">al<pos:position pos:line="152" pos:column="23"/></name></expr>;<pos:position pos:line="152" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="153" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name><name pos:line="155" pos:column="5">Security<pos:position pos:line="155" pos:column="13"/></name><operator pos:line="155" pos:column="13">::<pos:position pos:line="155" pos:column="15"/></operator><name pos:line="155" pos:column="15">CertErrors<pos:position pos:line="155" pos:column="25"/></name></name> <modifier pos:line="155" pos:column="26">*<pos:position pos:line="155" pos:column="27"/></modifier></type><name pos:line="155" pos:column="27">errs<pos:position pos:line="155" pos:column="31"/></name> <init pos:line="155" pos:column="32">= <expr><literal type="null" pos:line="155" pos:column="34">nullptr<pos:position pos:line="155" pos:column="41"/></literal></expr></init></decl>;<pos:position pos:line="155" pos:column="42"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="156" pos:column="5">Security<pos:position pos:line="156" pos:column="13"/></name><operator pos:line="156" pos:column="13">::<pos:position pos:line="156" pos:column="15"/></operator><name pos:line="156" pos:column="15">SessionPointer<pos:position pos:line="156" pos:column="29"/></name></name></type> <name pos:line="156" pos:column="30">session<pos:position pos:line="156" pos:column="37"/></name><argument_list pos:line="156" pos:column="37">(<argument><expr><name><name pos:line="156" pos:column="38">fd_table<pos:position pos:line="156" pos:column="46"/></name><index pos:line="156" pos:column="46">[<expr><call><name pos:line="156" pos:column="47">serverConnection<pos:position pos:line="156" pos:column="63"/></name><argument_list pos:line="156" pos:column="63">()<pos:position pos:line="156" pos:column="65"/></argument_list></call><operator pos:line="156" pos:column="65">-&gt;<pos:position pos:line="156" pos:column="70"/></operator><name pos:line="156" pos:column="67">fd<pos:position pos:line="156" pos:column="69"/></name></expr>]<pos:position pos:line="156" pos:column="70"/></index></name><operator pos:line="156" pos:column="70">.<pos:position pos:line="156" pos:column="71"/></operator><name pos:line="156" pos:column="71">ssl<pos:position pos:line="156" pos:column="74"/></name></expr></argument>)<pos:position pos:line="156" pos:column="75"/></argument_list></decl>;<pos:position pos:line="156" pos:column="76"/></decl_stmt>
    <typedef pos:line="157" pos:column="5">typedef <type><name><name pos:line="157" pos:column="13">Ssl<pos:position pos:line="157" pos:column="16"/></name><operator pos:line="157" pos:column="16">::<pos:position pos:line="157" pos:column="18"/></operator><name pos:line="157" pos:column="18">CertValidationResponse<pos:position pos:line="157" pos:column="40"/></name><operator pos:line="157" pos:column="40">::<pos:position pos:line="157" pos:column="42"/></operator><name pos:line="157" pos:column="42">RecvdErrors<pos:position pos:line="157" pos:column="53"/></name><operator pos:line="157" pos:column="53">::<pos:position pos:line="157" pos:column="55"/></operator><name pos:line="157" pos:column="55">const_iterator<pos:position pos:line="157" pos:column="69"/></name></name></type> <name pos:line="157" pos:column="70">SVCRECI<pos:position pos:line="157" pos:column="77"/></name>;<pos:position pos:line="157" pos:column="78"/></typedef>
    <for pos:line="158" pos:column="5">for <control pos:line="158" pos:column="9">(<init><decl><type><name pos:line="158" pos:column="10">SVCRECI<pos:position pos:line="158" pos:column="17"/></name></type> <name pos:line="158" pos:column="18">i<pos:position pos:line="158" pos:column="19"/></name> <init pos:line="158" pos:column="20">= <expr><call><name><name pos:line="158" pos:column="22">resp<pos:position pos:line="158" pos:column="26"/></name><operator pos:line="158" pos:column="26">.<pos:position pos:line="158" pos:column="27"/></operator><name pos:line="158" pos:column="27">errors<pos:position pos:line="158" pos:column="33"/></name><operator pos:line="158" pos:column="33">.<pos:position pos:line="158" pos:column="34"/></operator><name pos:line="158" pos:column="34">begin<pos:position pos:line="158" pos:column="39"/></name></name><argument_list pos:line="158" pos:column="39">()<pos:position pos:line="158" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="158" pos:column="42"/></init> <condition><expr><name pos:line="158" pos:column="43">i<pos:position pos:line="158" pos:column="44"/></name> <operator pos:line="158" pos:column="45">!=<pos:position pos:line="158" pos:column="47"/></operator> <call><name><name pos:line="158" pos:column="48">resp<pos:position pos:line="158" pos:column="52"/></name><operator pos:line="158" pos:column="52">.<pos:position pos:line="158" pos:column="53"/></operator><name pos:line="158" pos:column="53">errors<pos:position pos:line="158" pos:column="59"/></name><operator pos:line="158" pos:column="59">.<pos:position pos:line="158" pos:column="60"/></operator><name pos:line="158" pos:column="60">end<pos:position pos:line="158" pos:column="63"/></name></name><argument_list pos:line="158" pos:column="63">()<pos:position pos:line="158" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="158" pos:column="66"/></condition> <incr><expr><operator pos:line="158" pos:column="67">++<pos:position pos:line="158" pos:column="69"/></operator><name pos:line="158" pos:column="69">i<pos:position pos:line="158" pos:column="70"/></name></expr></incr>)<pos:position pos:line="158" pos:column="71"/></control> <block pos:line="158" pos:column="72">{
        <expr_stmt><expr><call><name pos:line="159" pos:column="9">debugs<pos:position pos:line="159" pos:column="15"/></name><argument_list pos:line="159" pos:column="15">(<argument><expr><literal type="number" pos:line="159" pos:column="16">83<pos:position pos:line="159" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="159" pos:column="20">7<pos:position pos:line="159" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="159" pos:column="23">"Error item: "<pos:position pos:line="159" pos:column="37"/></literal> <operator pos:line="159" pos:column="38">&lt;&lt;<pos:position pos:line="159" pos:column="46"/></operator> <name><name pos:line="159" pos:column="41">i<pos:position pos:line="159" pos:column="42"/></name><operator pos:line="159" pos:column="42">-&gt;<pos:position pos:line="159" pos:column="47"/></operator><name pos:line="159" pos:column="44">error_no<pos:position pos:line="159" pos:column="52"/></name></name> <operator pos:line="159" pos:column="53">&lt;&lt;<pos:position pos:line="159" pos:column="61"/></operator> <literal type="string" pos:line="159" pos:column="56">" "<pos:position pos:line="159" pos:column="59"/></literal> <operator pos:line="159" pos:column="60">&lt;&lt;<pos:position pos:line="159" pos:column="68"/></operator> <name><name pos:line="159" pos:column="63">i<pos:position pos:line="159" pos:column="64"/></name><operator pos:line="159" pos:column="64">-&gt;<pos:position pos:line="159" pos:column="69"/></operator><name pos:line="159" pos:column="66">error_reason<pos:position pos:line="159" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="159" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="159" pos:column="80"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="161" pos:column="9">assert<pos:position pos:line="161" pos:column="15"/></name><argument_list pos:line="161" pos:column="15">(<argument><expr><name><name pos:line="161" pos:column="16">i<pos:position pos:line="161" pos:column="17"/></name><operator pos:line="161" pos:column="17">-&gt;<pos:position pos:line="161" pos:column="22"/></operator><name pos:line="161" pos:column="19">error_no<pos:position pos:line="161" pos:column="27"/></name></name> <operator pos:line="161" pos:column="28">!=<pos:position pos:line="161" pos:column="30"/></operator> <name pos:line="161" pos:column="31">SSL_ERROR_NONE<pos:position pos:line="161" pos:column="45"/></name></expr></argument>)<pos:position pos:line="161" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="161" pos:column="47"/></expr_stmt>

        <if pos:line="163" pos:column="9">if <condition pos:line="163" pos:column="12">(<expr><operator pos:line="163" pos:column="13">!<pos:position pos:line="163" pos:column="14"/></operator><name pos:line="163" pos:column="14">errDetails<pos:position pos:line="163" pos:column="24"/></name></expr>)<pos:position pos:line="163" pos:column="25"/></condition><then pos:line="163" pos:column="25"> <block pos:line="163" pos:column="26">{
            <decl_stmt><decl><type><name pos:line="164" pos:column="13">bool<pos:position pos:line="164" pos:column="17"/></name></type> <name pos:line="164" pos:column="18">allowed<pos:position pos:line="164" pos:column="25"/></name> <init pos:line="164" pos:column="26">= <expr><literal type="boolean" pos:line="164" pos:column="28">false<pos:position pos:line="164" pos:column="33"/></literal></expr></init></decl>;<pos:position pos:line="164" pos:column="34"/></decl_stmt>
            <if pos:line="165" pos:column="13">if <condition pos:line="165" pos:column="16">(<expr><name pos:line="165" pos:column="17">check<pos:position pos:line="165" pos:column="22"/></name></expr>)<pos:position pos:line="165" pos:column="23"/></condition><then pos:line="165" pos:column="23"> <block pos:line="165" pos:column="24">{
                <expr_stmt><expr><name><name pos:line="166" pos:column="17">check<pos:position pos:line="166" pos:column="22"/></name><operator pos:line="166" pos:column="22">-&gt;<pos:position pos:line="166" pos:column="27"/></operator><name pos:line="166" pos:column="24">sslErrors<pos:position pos:line="166" pos:column="33"/></name></name> <operator pos:line="166" pos:column="34">=<pos:position pos:line="166" pos:column="35"/></operator> <operator pos:line="166" pos:column="36">new<pos:position pos:line="166" pos:column="39"/></operator> <call><name><name pos:line="166" pos:column="40">Security<pos:position pos:line="166" pos:column="48"/></name><operator pos:line="166" pos:column="48">::<pos:position pos:line="166" pos:column="50"/></operator><name pos:line="166" pos:column="50">CertErrors<pos:position pos:line="166" pos:column="60"/></name></name><argument_list pos:line="166" pos:column="60">(<argument><expr><call><name><name pos:line="166" pos:column="61">Security<pos:position pos:line="166" pos:column="69"/></name><operator pos:line="166" pos:column="69">::<pos:position pos:line="166" pos:column="71"/></operator><name pos:line="166" pos:column="71">CertError<pos:position pos:line="166" pos:column="80"/></name></name><argument_list pos:line="166" pos:column="80">(<argument><expr><name><name pos:line="166" pos:column="81">i<pos:position pos:line="166" pos:column="82"/></name><operator pos:line="166" pos:column="82">-&gt;<pos:position pos:line="166" pos:column="87"/></operator><name pos:line="166" pos:column="84">error_no<pos:position pos:line="166" pos:column="92"/></name></name></expr></argument>, <argument><expr><name><name pos:line="166" pos:column="94">i<pos:position pos:line="166" pos:column="95"/></name><operator pos:line="166" pos:column="95">-&gt;<pos:position pos:line="166" pos:column="100"/></operator><name pos:line="166" pos:column="97">cert<pos:position pos:line="166" pos:column="101"/></name></name></expr></argument>, <argument><expr><name><name pos:line="166" pos:column="103">i<pos:position pos:line="166" pos:column="104"/></name><operator pos:line="166" pos:column="104">-&gt;<pos:position pos:line="166" pos:column="109"/></operator><name pos:line="166" pos:column="106">error_depth<pos:position pos:line="166" pos:column="117"/></name></name></expr></argument>)<pos:position pos:line="166" pos:column="118"/></argument_list></call></expr></argument>)<pos:position pos:line="166" pos:column="119"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="120"/></expr_stmt>
                <if pos:line="167" pos:column="17">if <condition pos:line="167" pos:column="20">(<expr><call><name><name pos:line="167" pos:column="21">check<pos:position pos:line="167" pos:column="26"/></name><operator pos:line="167" pos:column="26">-&gt;<pos:position pos:line="167" pos:column="31"/></operator><name pos:line="167" pos:column="28">fastCheck<pos:position pos:line="167" pos:column="37"/></name></name><argument_list pos:line="167" pos:column="37">()<pos:position pos:line="167" pos:column="39"/></argument_list></call><operator pos:line="167" pos:column="39">.<pos:position pos:line="167" pos:column="40"/></operator><call><name pos:line="167" pos:column="40">allowed<pos:position pos:line="167" pos:column="47"/></name><argument_list pos:line="167" pos:column="47">()<pos:position pos:line="167" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="167" pos:column="50"/></condition><then pos:line="167" pos:column="50">
                    <block type="pseudo"><expr_stmt><expr><name pos:line="168" pos:column="21">allowed<pos:position pos:line="168" pos:column="28"/></name> <operator pos:line="168" pos:column="29">=<pos:position pos:line="168" pos:column="30"/></operator> <literal type="boolean" pos:line="168" pos:column="31">true<pos:position pos:line="168" pos:column="35"/></literal></expr>;<pos:position pos:line="168" pos:column="36"/></expr_stmt></block></then></if>
            }<pos:position pos:line="169" pos:column="14"/></block></then></if>
            <comment type="line" pos:line="170" pos:column="13">// else the Config.ssl_client.cert_error access list is not defined</comment>
            <comment type="line" pos:line="171" pos:column="13">// and the first error will cause the error page</comment>

            <if pos:line="173" pos:column="13">if <condition pos:line="173" pos:column="16">(<expr><name pos:line="173" pos:column="17">allowed<pos:position pos:line="173" pos:column="24"/></name></expr>)<pos:position pos:line="173" pos:column="25"/></condition><then pos:line="173" pos:column="25"> <block pos:line="173" pos:column="26">{
                <expr_stmt><expr><call><name pos:line="174" pos:column="17">debugs<pos:position pos:line="174" pos:column="23"/></name><argument_list pos:line="174" pos:column="23">(<argument><expr><literal type="number" pos:line="174" pos:column="24">83<pos:position pos:line="174" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="174" pos:column="28">3<pos:position pos:line="174" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="174" pos:column="31">"bypassing SSL error "<pos:position pos:line="174" pos:column="53"/></literal> <operator pos:line="174" pos:column="54">&lt;&lt;<pos:position pos:line="174" pos:column="62"/></operator> <name><name pos:line="174" pos:column="57">i<pos:position pos:line="174" pos:column="58"/></name><operator pos:line="174" pos:column="58">-&gt;<pos:position pos:line="174" pos:column="63"/></operator><name pos:line="174" pos:column="60">error_no<pos:position pos:line="174" pos:column="68"/></name></name> <operator pos:line="174" pos:column="69">&lt;&lt;<pos:position pos:line="174" pos:column="77"/></operator> <literal type="string" pos:line="174" pos:column="72">" in "<pos:position pos:line="174" pos:column="78"/></literal> <operator pos:line="174" pos:column="79">&lt;&lt;<pos:position pos:line="174" pos:column="87"/></operator> <literal type="string" pos:line="174" pos:column="82">"buffer"<pos:position pos:line="174" pos:column="90"/></literal></expr></argument>)<pos:position pos:line="174" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="174" pos:column="92"/></expr_stmt>
            }<pos:position pos:line="175" pos:column="14"/></block></then> <else pos:line="175" pos:column="15">else <block pos:line="175" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="176" pos:column="17">debugs<pos:position pos:line="176" pos:column="23"/></name><argument_list pos:line="176" pos:column="23">(<argument><expr><literal type="number" pos:line="176" pos:column="24">83<pos:position pos:line="176" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="176" pos:column="28">5<pos:position pos:line="176" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="176" pos:column="31">"confirming SSL error "<pos:position pos:line="176" pos:column="54"/></literal> <operator pos:line="176" pos:column="55">&lt;&lt;<pos:position pos:line="176" pos:column="63"/></operator> <name><name pos:line="176" pos:column="58">i<pos:position pos:line="176" pos:column="59"/></name><operator pos:line="176" pos:column="59">-&gt;<pos:position pos:line="176" pos:column="64"/></operator><name pos:line="176" pos:column="61">error_no<pos:position pos:line="176" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="176" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="176" pos:column="71"/></expr_stmt>
                <decl_stmt><decl><type><name pos:line="177" pos:column="17">X509<pos:position pos:line="177" pos:column="21"/></name> <modifier pos:line="177" pos:column="22">*<pos:position pos:line="177" pos:column="23"/></modifier></type><name pos:line="177" pos:column="23">brokenCert<pos:position pos:line="177" pos:column="33"/></name> <init pos:line="177" pos:column="34">= <expr><call><name><name pos:line="177" pos:column="36">i<pos:position pos:line="177" pos:column="37"/></name><operator pos:line="177" pos:column="37">-&gt;<pos:position pos:line="177" pos:column="42"/></operator><name pos:line="177" pos:column="39">cert<pos:position pos:line="177" pos:column="43"/></name><operator pos:line="177" pos:column="43">.<pos:position pos:line="177" pos:column="44"/></operator><name pos:line="177" pos:column="44">get<pos:position pos:line="177" pos:column="47"/></name></name><argument_list pos:line="177" pos:column="47">()<pos:position pos:line="177" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="177" pos:column="50"/></decl_stmt>
                <decl_stmt><decl><type><name><name pos:line="178" pos:column="17">Security<pos:position pos:line="178" pos:column="25"/></name><operator pos:line="178" pos:column="25">::<pos:position pos:line="178" pos:column="27"/></operator><name pos:line="178" pos:column="27">CertPointer<pos:position pos:line="178" pos:column="38"/></name></name></type> <name pos:line="178" pos:column="39">peerCert<pos:position pos:line="178" pos:column="47"/></name><argument_list pos:line="178" pos:column="47">(<argument><expr><call><name pos:line="178" pos:column="48">SSL_get_peer_certificate<pos:position pos:line="178" pos:column="72"/></name><argument_list pos:line="178" pos:column="72">(<argument><expr><call><name><name pos:line="178" pos:column="73">session<pos:position pos:line="178" pos:column="80"/></name><operator pos:line="178" pos:column="80">.<pos:position pos:line="178" pos:column="81"/></operator><name pos:line="178" pos:column="81">get<pos:position pos:line="178" pos:column="84"/></name></name><argument_list pos:line="178" pos:column="84">()<pos:position pos:line="178" pos:column="86"/></argument_list></call></expr></argument>)<pos:position pos:line="178" pos:column="87"/></argument_list></call></expr></argument>)<pos:position pos:line="178" pos:column="88"/></argument_list></decl>;<pos:position pos:line="178" pos:column="89"/></decl_stmt>
                <decl_stmt><decl><type><specifier pos:line="179" pos:column="17">const<pos:position pos:line="179" pos:column="22"/></specifier> <name pos:line="179" pos:column="23">char<pos:position pos:line="179" pos:column="27"/></name> <modifier pos:line="179" pos:column="28">*<pos:position pos:line="179" pos:column="29"/></modifier></type><name pos:line="179" pos:column="29">aReason<pos:position pos:line="179" pos:column="36"/></name> <init pos:line="179" pos:column="37">= <expr><ternary><condition><expr><call><name><name pos:line="179" pos:column="39">i<pos:position pos:line="179" pos:column="40"/></name><operator pos:line="179" pos:column="40">-&gt;<pos:position pos:line="179" pos:column="45"/></operator><name pos:line="179" pos:column="42">error_reason<pos:position pos:line="179" pos:column="54"/></name><operator pos:line="179" pos:column="54">.<pos:position pos:line="179" pos:column="55"/></operator><name pos:line="179" pos:column="55">empty<pos:position pos:line="179" pos:column="60"/></name></name><argument_list pos:line="179" pos:column="60">()<pos:position pos:line="179" pos:column="62"/></argument_list></call></expr> ?<pos:position pos:line="179" pos:column="64"/></condition><then pos:line="179" pos:column="64"> <expr><name pos:line="179" pos:column="65">NULL<pos:position pos:line="179" pos:column="69"/></name></expr> <pos:position pos:line="179" pos:column="70"/></then><else pos:line="179" pos:column="70">: <expr><call><name><name pos:line="179" pos:column="72">i<pos:position pos:line="179" pos:column="73"/></name><operator pos:line="179" pos:column="73">-&gt;<pos:position pos:line="179" pos:column="78"/></operator><name pos:line="179" pos:column="75">error_reason<pos:position pos:line="179" pos:column="87"/></name><operator pos:line="179" pos:column="87">.<pos:position pos:line="179" pos:column="88"/></operator><name pos:line="179" pos:column="88">c_str<pos:position pos:line="179" pos:column="93"/></name></name><argument_list pos:line="179" pos:column="93">()<pos:position pos:line="179" pos:column="95"/></argument_list></call></expr></else></ternary></expr></init></decl>;<pos:position pos:line="179" pos:column="96"/></decl_stmt>
                <expr_stmt><expr><name pos:line="180" pos:column="17">errDetails<pos:position pos:line="180" pos:column="27"/></name> <operator pos:line="180" pos:column="28">=<pos:position pos:line="180" pos:column="29"/></operator> <operator pos:line="180" pos:column="30">new<pos:position pos:line="180" pos:column="33"/></operator> <call><name><name pos:line="180" pos:column="34">Ssl<pos:position pos:line="180" pos:column="37"/></name><operator pos:line="180" pos:column="37">::<pos:position pos:line="180" pos:column="39"/></operator><name pos:line="180" pos:column="39">ErrorDetail<pos:position pos:line="180" pos:column="50"/></name></name><argument_list pos:line="180" pos:column="50">(<argument><expr><name><name pos:line="180" pos:column="51">i<pos:position pos:line="180" pos:column="52"/></name><operator pos:line="180" pos:column="52">-&gt;<pos:position pos:line="180" pos:column="57"/></operator><name pos:line="180" pos:column="54">error_no<pos:position pos:line="180" pos:column="62"/></name></name></expr></argument>, <argument><expr><call><name><name pos:line="180" pos:column="64">peerCert<pos:position pos:line="180" pos:column="72"/></name><operator pos:line="180" pos:column="72">.<pos:position pos:line="180" pos:column="73"/></operator><name pos:line="180" pos:column="73">get<pos:position pos:line="180" pos:column="76"/></name></name><argument_list pos:line="180" pos:column="76">()<pos:position pos:line="180" pos:column="78"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="180" pos:column="80">brokenCert<pos:position pos:line="180" pos:column="90"/></name></expr></argument>, <argument><expr><name pos:line="180" pos:column="92">aReason<pos:position pos:line="180" pos:column="99"/></name></expr></argument>)<pos:position pos:line="180" pos:column="100"/></argument_list></call></expr>;<pos:position pos:line="180" pos:column="101"/></expr_stmt>
            }<pos:position pos:line="181" pos:column="14"/></block></else></if>
            <if pos:line="182" pos:column="13">if <condition pos:line="182" pos:column="16">(<expr><name pos:line="182" pos:column="17">check<pos:position pos:line="182" pos:column="22"/></name></expr>)<pos:position pos:line="182" pos:column="23"/></condition><then pos:line="182" pos:column="23"> <block pos:line="182" pos:column="24">{
                <expr_stmt><expr><operator pos:line="183" pos:column="17">delete<pos:position pos:line="183" pos:column="23"/></operator> <name><name pos:line="183" pos:column="24">check<pos:position pos:line="183" pos:column="29"/></name><operator pos:line="183" pos:column="29">-&gt;<pos:position pos:line="183" pos:column="34"/></operator><name pos:line="183" pos:column="31">sslErrors<pos:position pos:line="183" pos:column="40"/></name></name></expr>;<pos:position pos:line="183" pos:column="41"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="184" pos:column="17">check<pos:position pos:line="184" pos:column="22"/></name><operator pos:line="184" pos:column="22">-&gt;<pos:position pos:line="184" pos:column="27"/></operator><name pos:line="184" pos:column="24">sslErrors<pos:position pos:line="184" pos:column="33"/></name></name> <operator pos:line="184" pos:column="34">=<pos:position pos:line="184" pos:column="35"/></operator> <name pos:line="184" pos:column="36">NULL<pos:position pos:line="184" pos:column="40"/></name></expr>;<pos:position pos:line="184" pos:column="41"/></expr_stmt>
            }<pos:position pos:line="185" pos:column="14"/></block></then></if>
        }<pos:position pos:line="186" pos:column="10"/></block></then></if>

        <if pos:line="188" pos:column="9">if <condition pos:line="188" pos:column="12">(<expr><operator pos:line="188" pos:column="13">!<pos:position pos:line="188" pos:column="14"/></operator><name pos:line="188" pos:column="14">errs<pos:position pos:line="188" pos:column="18"/></name></expr>)<pos:position pos:line="188" pos:column="19"/></condition><then pos:line="188" pos:column="19">
            <block type="pseudo"><expr_stmt><expr><name pos:line="189" pos:column="13">errs<pos:position pos:line="189" pos:column="17"/></name> <operator pos:line="189" pos:column="18">=<pos:position pos:line="189" pos:column="19"/></operator> <operator pos:line="189" pos:column="20">new<pos:position pos:line="189" pos:column="23"/></operator> <call><name><name pos:line="189" pos:column="24">Security<pos:position pos:line="189" pos:column="32"/></name><operator pos:line="189" pos:column="32">::<pos:position pos:line="189" pos:column="34"/></operator><name pos:line="189" pos:column="34">CertErrors<pos:position pos:line="189" pos:column="44"/></name></name><argument_list pos:line="189" pos:column="44">(<argument><expr><call><name><name pos:line="189" pos:column="45">Security<pos:position pos:line="189" pos:column="53"/></name><operator pos:line="189" pos:column="53">::<pos:position pos:line="189" pos:column="55"/></operator><name pos:line="189" pos:column="55">CertError<pos:position pos:line="189" pos:column="64"/></name></name><argument_list pos:line="189" pos:column="64">(<argument><expr><name><name pos:line="189" pos:column="65">i<pos:position pos:line="189" pos:column="66"/></name><operator pos:line="189" pos:column="66">-&gt;<pos:position pos:line="189" pos:column="71"/></operator><name pos:line="189" pos:column="68">error_no<pos:position pos:line="189" pos:column="76"/></name></name></expr></argument>, <argument><expr><name><name pos:line="189" pos:column="78">i<pos:position pos:line="189" pos:column="79"/></name><operator pos:line="189" pos:column="79">-&gt;<pos:position pos:line="189" pos:column="84"/></operator><name pos:line="189" pos:column="81">cert<pos:position pos:line="189" pos:column="85"/></name></name></expr></argument>, <argument><expr><name><name pos:line="189" pos:column="87">i<pos:position pos:line="189" pos:column="88"/></name><operator pos:line="189" pos:column="88">-&gt;<pos:position pos:line="189" pos:column="93"/></operator><name pos:line="189" pos:column="90">error_depth<pos:position pos:line="189" pos:column="101"/></name></name></expr></argument>)<pos:position pos:line="189" pos:column="102"/></argument_list></call></expr></argument>)<pos:position pos:line="189" pos:column="103"/></argument_list></call></expr>;<pos:position pos:line="189" pos:column="104"/></expr_stmt></block></then>
        <else pos:line="190" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="191" pos:column="13">errs<pos:position pos:line="191" pos:column="17"/></name><operator pos:line="191" pos:column="17">-&gt;<pos:position pos:line="191" pos:column="22"/></operator><name pos:line="191" pos:column="19">push_back_unique<pos:position pos:line="191" pos:column="35"/></name></name><argument_list pos:line="191" pos:column="35">(<argument><expr><call><name><name pos:line="191" pos:column="36">Security<pos:position pos:line="191" pos:column="44"/></name><operator pos:line="191" pos:column="44">::<pos:position pos:line="191" pos:column="46"/></operator><name pos:line="191" pos:column="46">CertError<pos:position pos:line="191" pos:column="55"/></name></name><argument_list pos:line="191" pos:column="55">(<argument><expr><name><name pos:line="191" pos:column="56">i<pos:position pos:line="191" pos:column="57"/></name><operator pos:line="191" pos:column="57">-&gt;<pos:position pos:line="191" pos:column="62"/></operator><name pos:line="191" pos:column="59">error_no<pos:position pos:line="191" pos:column="67"/></name></name></expr></argument>, <argument><expr><name><name pos:line="191" pos:column="69">i<pos:position pos:line="191" pos:column="70"/></name><operator pos:line="191" pos:column="70">-&gt;<pos:position pos:line="191" pos:column="75"/></operator><name pos:line="191" pos:column="72">cert<pos:position pos:line="191" pos:column="76"/></name></name></expr></argument>, <argument><expr><name><name pos:line="191" pos:column="78">i<pos:position pos:line="191" pos:column="79"/></name><operator pos:line="191" pos:column="79">-&gt;<pos:position pos:line="191" pos:column="84"/></operator><name pos:line="191" pos:column="81">error_depth<pos:position pos:line="191" pos:column="92"/></name></name></expr></argument>)<pos:position pos:line="191" pos:column="93"/></argument_list></call></expr></argument>)<pos:position pos:line="191" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="191" pos:column="95"/></expr_stmt></block></else></if>
    }<pos:position pos:line="192" pos:column="6"/></block></for>
    <if pos:line="193" pos:column="5">if <condition pos:line="193" pos:column="8">(<expr><name pos:line="193" pos:column="9">check<pos:position pos:line="193" pos:column="14"/></name></expr>)<pos:position pos:line="193" pos:column="15"/></condition><then pos:line="193" pos:column="15">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="194" pos:column="9">delete<pos:position pos:line="194" pos:column="15"/></operator> <name pos:line="194" pos:column="16">check<pos:position pos:line="194" pos:column="21"/></name></expr>;<pos:position pos:line="194" pos:column="22"/></expr_stmt></block></then></if>

    <return pos:line="196" pos:column="5">return <expr><name pos:line="196" pos:column="12">errs<pos:position pos:line="196" pos:column="16"/></name></expr>;<pos:position pos:line="196" pos:column="17"/></return>
}<pos:position pos:line="197" pos:column="2"/></block></function>
<cpp:endif pos:line="198" pos:column="1">#<cpp:directive pos:line="198" pos:column="2">endif<pos:position pos:line="198" pos:column="7"/></cpp:directive></cpp:endif>

<comment type="line" format="doxygen" pos:line="200" pos:column="1">/// A wrapper for Comm::SetSelect() notifications.</comment>
<function><type><name pos:line="201" pos:column="1">void<pos:position pos:line="201" pos:column="5"/></name></type>
<name><name pos:line="202" pos:column="1">Security<pos:position pos:line="202" pos:column="9"/></name><operator pos:line="202" pos:column="9">::<pos:position pos:line="202" pos:column="11"/></operator><name pos:line="202" pos:column="11">PeerConnector<pos:position pos:line="202" pos:column="24"/></name><operator pos:line="202" pos:column="24">::<pos:position pos:line="202" pos:column="26"/></operator><name pos:line="202" pos:column="26">NegotiateSsl<pos:position pos:line="202" pos:column="38"/></name></name><parameter_list pos:line="202" pos:column="38">(<parameter><decl><type><name pos:line="202" pos:column="39">int<pos:position pos:line="202" pos:column="42"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="202" pos:column="44">void<pos:position pos:line="202" pos:column="48"/></name> <modifier pos:line="202" pos:column="49">*<pos:position pos:line="202" pos:column="50"/></modifier></type><name pos:line="202" pos:column="50">data<pos:position pos:line="202" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="202" pos:column="55"/></parameter_list>
<block pos:line="203" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="204" pos:column="5">PeerConnector<pos:position pos:line="204" pos:column="18"/></name> <modifier pos:line="204" pos:column="19">*<pos:position pos:line="204" pos:column="20"/></modifier></type><name pos:line="204" pos:column="20">pc<pos:position pos:line="204" pos:column="22"/></name> <init pos:line="204" pos:column="23">= <expr><cast type="static" pos:line="204" pos:column="25">static_cast<argument_list type="generic" pos:line="204" pos:column="36">&lt;<argument><expr><name><name pos:line="204" pos:column="37">Security<pos:position pos:line="204" pos:column="45"/></name><operator pos:line="204" pos:column="45">::<pos:position pos:line="204" pos:column="47"/></operator><name pos:line="204" pos:column="47">PeerConnector<pos:position pos:line="204" pos:column="60"/></name></name> <operator pos:line="204" pos:column="61">*<pos:position pos:line="204" pos:column="62"/></operator></expr></argument>&gt;<pos:position pos:line="204" pos:column="66"/></argument_list><argument_list pos:line="204" pos:column="63">(<argument><expr><name pos:line="204" pos:column="64">data<pos:position pos:line="204" pos:column="68"/></name></expr></argument>)<pos:position pos:line="204" pos:column="69"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="204" pos:column="70"/></decl_stmt>
    <comment type="line" pos:line="205" pos:column="5">// Use job calls to add done() checks and other job logic/protections.</comment>
    <expr_stmt><expr><call><name pos:line="206" pos:column="5">CallJobHere<pos:position pos:line="206" pos:column="16"/></name><argument_list pos:line="206" pos:column="16">(<argument><expr><literal type="number" pos:line="206" pos:column="17">83<pos:position pos:line="206" pos:column="19"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="206" pos:column="21">7<pos:position pos:line="206" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="206" pos:column="24">pc<pos:position pos:line="206" pos:column="26"/></name></expr></argument>, <argument><expr><name><name pos:line="206" pos:column="28">Security<pos:position pos:line="206" pos:column="36"/></name><operator pos:line="206" pos:column="36">::<pos:position pos:line="206" pos:column="38"/></operator><name pos:line="206" pos:column="38">PeerConnector<pos:position pos:line="206" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="206" pos:column="53">negotiate<pos:position pos:line="206" pos:column="62"/></name></expr></argument>)<pos:position pos:line="206" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="206" pos:column="64"/></expr_stmt>
}<pos:position pos:line="207" pos:column="2"/></block></function>

<function><type><name pos:line="209" pos:column="1">void<pos:position pos:line="209" pos:column="5"/></name></type>
<name><name pos:line="210" pos:column="1">Security<pos:position pos:line="210" pos:column="9"/></name><operator pos:line="210" pos:column="9">::<pos:position pos:line="210" pos:column="11"/></operator><name pos:line="210" pos:column="11">PeerConnector<pos:position pos:line="210" pos:column="24"/></name><operator pos:line="210" pos:column="24">::<pos:position pos:line="210" pos:column="26"/></operator><name pos:line="210" pos:column="26">handleNegotiateError<pos:position pos:line="210" pos:column="46"/></name></name><parameter_list pos:line="210" pos:column="46">(<parameter><decl><type><specifier pos:line="210" pos:column="47">const<pos:position pos:line="210" pos:column="52"/></specifier> <name pos:line="210" pos:column="53">int<pos:position pos:line="210" pos:column="56"/></name></type> <name pos:line="210" pos:column="57">ret<pos:position pos:line="210" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="210" pos:column="61"/></parameter_list>
<block pos:line="211" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="212" pos:column="5">const<pos:position pos:line="212" pos:column="10"/></specifier> <name pos:line="212" pos:column="11">int<pos:position pos:line="212" pos:column="14"/></name></type> <name pos:line="212" pos:column="15">fd<pos:position pos:line="212" pos:column="17"/></name> <init pos:line="212" pos:column="18">= <expr><call><name pos:line="212" pos:column="20">serverConnection<pos:position pos:line="212" pos:column="36"/></name><argument_list pos:line="212" pos:column="36">()<pos:position pos:line="212" pos:column="38"/></argument_list></call><operator pos:line="212" pos:column="38">-&gt;<pos:position pos:line="212" pos:column="43"/></operator><name pos:line="212" pos:column="40">fd<pos:position pos:line="212" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="212" pos:column="43"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="213" pos:column="5">const<pos:position pos:line="213" pos:column="10"/></specifier> <name><name pos:line="213" pos:column="11">Security<pos:position pos:line="213" pos:column="19"/></name><operator pos:line="213" pos:column="19">::<pos:position pos:line="213" pos:column="21"/></operator><name pos:line="213" pos:column="21">SessionPointer<pos:position pos:line="213" pos:column="35"/></name></name></type> <name pos:line="213" pos:column="36">session<pos:position pos:line="213" pos:column="43"/></name><argument_list pos:line="213" pos:column="43">(<argument><expr><name><name pos:line="213" pos:column="44">fd_table<pos:position pos:line="213" pos:column="52"/></name><index pos:line="213" pos:column="52">[<expr><name pos:line="213" pos:column="53">fd<pos:position pos:line="213" pos:column="55"/></name></expr>]<pos:position pos:line="213" pos:column="56"/></index></name><operator pos:line="213" pos:column="56">.<pos:position pos:line="213" pos:column="57"/></operator><name pos:line="213" pos:column="57">ssl<pos:position pos:line="213" pos:column="60"/></name></expr></argument>)<pos:position pos:line="213" pos:column="61"/></argument_list></decl>;<pos:position pos:line="213" pos:column="62"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="214" pos:column="5">unsigned<pos:position pos:line="214" pos:column="13"/></name> <name pos:line="214" pos:column="14">long<pos:position pos:line="214" pos:column="18"/></name></type> <name pos:line="214" pos:column="19">ssl_lib_error<pos:position pos:line="214" pos:column="32"/></name> <init pos:line="214" pos:column="33">= <expr><name pos:line="214" pos:column="35">ret<pos:position pos:line="214" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="214" pos:column="39"/></decl_stmt>

<cpp:if pos:line="216" pos:column="1">#<cpp:directive pos:line="216" pos:column="2">if<pos:position pos:line="216" pos:column="4"/></cpp:directive> <expr><name pos:line="216" pos:column="5">USE_OPENSSL<pos:position pos:line="216" pos:column="16"/></name></expr></cpp:if>
    <decl_stmt><decl><type><specifier pos:line="217" pos:column="5">const<pos:position pos:line="217" pos:column="10"/></specifier> <name pos:line="217" pos:column="11">int<pos:position pos:line="217" pos:column="14"/></name></type> <name pos:line="217" pos:column="15">ssl_error<pos:position pos:line="217" pos:column="24"/></name> <init pos:line="217" pos:column="25">= <expr><call><name pos:line="217" pos:column="27">SSL_get_error<pos:position pos:line="217" pos:column="40"/></name><argument_list pos:line="217" pos:column="40">(<argument><expr><call><name><name pos:line="217" pos:column="41">session<pos:position pos:line="217" pos:column="48"/></name><operator pos:line="217" pos:column="48">.<pos:position pos:line="217" pos:column="49"/></operator><name pos:line="217" pos:column="49">get<pos:position pos:line="217" pos:column="52"/></name></name><argument_list pos:line="217" pos:column="52">()<pos:position pos:line="217" pos:column="54"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="217" pos:column="56">ret<pos:position pos:line="217" pos:column="59"/></name></expr></argument>)<pos:position pos:line="217" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="217" pos:column="61"/></decl_stmt>

    <switch pos:line="219" pos:column="5">switch <condition pos:line="219" pos:column="12">(<expr><name pos:line="219" pos:column="13">ssl_error<pos:position pos:line="219" pos:column="22"/></name></expr>)<pos:position pos:line="219" pos:column="23"/></condition> <block pos:line="219" pos:column="24">{
    <case pos:line="220" pos:column="5">case <expr><name pos:line="220" pos:column="10">SSL_ERROR_WANT_READ<pos:position pos:line="220" pos:column="29"/></name></expr>:<pos:position pos:line="220" pos:column="30"/></case>
        <expr_stmt><expr><call><name pos:line="221" pos:column="9">noteWantRead<pos:position pos:line="221" pos:column="21"/></name><argument_list pos:line="221" pos:column="21">()<pos:position pos:line="221" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="221" pos:column="24"/></expr_stmt>
        <return pos:line="222" pos:column="9">return;<pos:position pos:line="222" pos:column="16"/></return>

    <case pos:line="224" pos:column="5">case <expr><name pos:line="224" pos:column="10">SSL_ERROR_WANT_WRITE<pos:position pos:line="224" pos:column="30"/></name></expr>:<pos:position pos:line="224" pos:column="31"/></case>
        <expr_stmt><expr><call><name pos:line="225" pos:column="9">noteWantWrite<pos:position pos:line="225" pos:column="22"/></name><argument_list pos:line="225" pos:column="22">()<pos:position pos:line="225" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="225" pos:column="25"/></expr_stmt>
        <return pos:line="226" pos:column="9">return;<pos:position pos:line="226" pos:column="16"/></return>

    <case pos:line="228" pos:column="5">case <expr><name pos:line="228" pos:column="10">SSL_ERROR_SSL<pos:position pos:line="228" pos:column="23"/></name></expr>:<pos:position pos:line="228" pos:column="24"/></case>
    <case pos:line="229" pos:column="5">case <expr><name pos:line="229" pos:column="10">SSL_ERROR_SYSCALL<pos:position pos:line="229" pos:column="27"/></name></expr>:<pos:position pos:line="229" pos:column="28"/></case>
        <expr_stmt><expr><name pos:line="230" pos:column="9">ssl_lib_error<pos:position pos:line="230" pos:column="22"/></name> <operator pos:line="230" pos:column="23">=<pos:position pos:line="230" pos:column="24"/></operator> <call><name pos:line="230" pos:column="25">ERR_get_error<pos:position pos:line="230" pos:column="38"/></name><argument_list pos:line="230" pos:column="38">()<pos:position pos:line="230" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="230" pos:column="41"/></expr_stmt>
        <comment type="line" pos:line="231" pos:column="9">// proceed to the general error handling code</comment>
        <break pos:line="232" pos:column="9">break;<pos:position pos:line="232" pos:column="15"/></break>
    <default pos:line="233" pos:column="5">default:<pos:position pos:line="233" pos:column="13"/></default>
        <comment type="line" pos:line="234" pos:column="9">// no special error handling for all other errors</comment>
        <expr_stmt><expr><name pos:line="235" pos:column="9">ssl_lib_error<pos:position pos:line="235" pos:column="22"/></name> <operator pos:line="235" pos:column="23">=<pos:position pos:line="235" pos:column="24"/></operator> <name pos:line="235" pos:column="25">SSL_ERROR_NONE<pos:position pos:line="235" pos:column="39"/></name></expr>;<pos:position pos:line="235" pos:column="40"/></expr_stmt>
        <break pos:line="236" pos:column="9">break;<pos:position pos:line="236" pos:column="15"/></break>
    }<pos:position pos:line="237" pos:column="6"/></block></switch>

<cpp:elif pos:line="239" pos:column="1">#<cpp:directive pos:line="239" pos:column="2">elif<pos:position pos:line="239" pos:column="6"/></cpp:directive> <expr><name pos:line="239" pos:column="7">USE_GNUTLS<pos:position pos:line="239" pos:column="17"/></name></expr></cpp:elif>
    <decl_stmt><decl><type><specifier pos:line="240" pos:column="5">const<pos:position pos:line="240" pos:column="10"/></specifier> <name pos:line="240" pos:column="11">int<pos:position pos:line="240" pos:column="14"/></name></type> <name pos:line="240" pos:column="15">ssl_error<pos:position pos:line="240" pos:column="24"/></name> <init pos:line="240" pos:column="25">= <expr><name pos:line="240" pos:column="27">ret<pos:position pos:line="240" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="240" pos:column="31"/></decl_stmt>

    <switch pos:line="242" pos:column="5">switch <condition pos:line="242" pos:column="12">(<expr><name pos:line="242" pos:column="13">ret<pos:position pos:line="242" pos:column="16"/></name></expr>)<pos:position pos:line="242" pos:column="17"/></condition> <block pos:line="242" pos:column="18">{
    <case pos:line="243" pos:column="5">case <expr><name pos:line="243" pos:column="10">GNUTLS_E_WARNING_ALERT_RECEIVED<pos:position pos:line="243" pos:column="41"/></name></expr>:<pos:position pos:line="243" pos:column="42"/></case> <block pos:line="243" pos:column="43">{
        <decl_stmt><decl><type><name pos:line="244" pos:column="9">auto<pos:position pos:line="244" pos:column="13"/></name></type> <name pos:line="244" pos:column="14">alert<pos:position pos:line="244" pos:column="19"/></name> <init pos:line="244" pos:column="20">= <expr><call><name pos:line="244" pos:column="22">gnutls_alert_get<pos:position pos:line="244" pos:column="38"/></name><argument_list pos:line="244" pos:column="38">(<argument><expr><call><name><name pos:line="244" pos:column="39">session<pos:position pos:line="244" pos:column="46"/></name><operator pos:line="244" pos:column="46">.<pos:position pos:line="244" pos:column="47"/></operator><name pos:line="244" pos:column="47">get<pos:position pos:line="244" pos:column="50"/></name></name><argument_list pos:line="244" pos:column="50">()<pos:position pos:line="244" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="244" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="244" pos:column="54"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="245" pos:column="9">debugs<pos:position pos:line="245" pos:column="15"/></name><argument_list pos:line="245" pos:column="15">(<argument><expr><literal type="number" pos:line="245" pos:column="16">83<pos:position pos:line="245" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="245" pos:column="20">DBG_IMPORTANT<pos:position pos:line="245" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="245" pos:column="35">"TLS ALERT: "<pos:position pos:line="245" pos:column="48"/></literal> <operator pos:line="245" pos:column="49">&lt;&lt;<pos:position pos:line="245" pos:column="57"/></operator> <call><name pos:line="245" pos:column="52">gnutls_alert_get_name<pos:position pos:line="245" pos:column="73"/></name><argument_list pos:line="245" pos:column="73">(<argument><expr><name pos:line="245" pos:column="74">alert<pos:position pos:line="245" pos:column="79"/></name></expr></argument>)<pos:position pos:line="245" pos:column="80"/></argument_list></call></expr></argument>)<pos:position pos:line="245" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="245" pos:column="82"/></expr_stmt>
    }<pos:position pos:line="246" pos:column="6"/></block>
    <comment type="line" pos:line="247" pos:column="5">// drop through to next case</comment>

    <case pos:line="249" pos:column="5">case <expr><name pos:line="249" pos:column="10">GNUTLS_E_AGAIN<pos:position pos:line="249" pos:column="24"/></name></expr>:<pos:position pos:line="249" pos:column="25"/></case>
    <case pos:line="250" pos:column="5">case <expr><name pos:line="250" pos:column="10">GNUTLS_E_INTERRUPTED<pos:position pos:line="250" pos:column="30"/></name></expr>:<pos:position pos:line="250" pos:column="31"/></case>
        <if pos:line="251" pos:column="9">if <condition pos:line="251" pos:column="12">(<expr><call><name pos:line="251" pos:column="13">gnutls_record_get_direction<pos:position pos:line="251" pos:column="40"/></name><argument_list pos:line="251" pos:column="40">(<argument><expr><call><name><name pos:line="251" pos:column="41">session<pos:position pos:line="251" pos:column="48"/></name><operator pos:line="251" pos:column="48">.<pos:position pos:line="251" pos:column="49"/></operator><name pos:line="251" pos:column="49">get<pos:position pos:line="251" pos:column="52"/></name></name><argument_list pos:line="251" pos:column="52">()<pos:position pos:line="251" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="251" pos:column="55"/></argument_list></call> <operator pos:line="251" pos:column="56">==<pos:position pos:line="251" pos:column="58"/></operator> <literal type="number" pos:line="251" pos:column="59">0<pos:position pos:line="251" pos:column="60"/></literal></expr>)<pos:position pos:line="251" pos:column="61"/></condition><then pos:line="251" pos:column="61">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="252" pos:column="13">noteWantRead<pos:position pos:line="252" pos:column="25"/></name><argument_list pos:line="252" pos:column="25">()<pos:position pos:line="252" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="252" pos:column="28"/></expr_stmt></block></then>
        <else pos:line="253" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="254" pos:column="13">noteWantWrite<pos:position pos:line="254" pos:column="26"/></name><argument_list pos:line="254" pos:column="26">()<pos:position pos:line="254" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="254" pos:column="29"/></expr_stmt></block></else></if>
        <return pos:line="255" pos:column="9">return;<pos:position pos:line="255" pos:column="16"/></return>

    <default pos:line="257" pos:column="5">default:<pos:position pos:line="257" pos:column="13"/></default>
        <comment type="line" pos:line="258" pos:column="9">// no special error handling for all other errors</comment>
        <break pos:line="259" pos:column="9">break;<pos:position pos:line="259" pos:column="15"/></break>
    }<pos:position pos:line="260" pos:column="6"/></block></switch>

<cpp:else pos:line="262" pos:column="1">#<cpp:directive pos:line="262" pos:column="2">else<pos:position pos:line="262" pos:column="6"/></cpp:directive></cpp:else>
    <comment type="line" pos:line="263" pos:column="5">// this avoids unused variable compiler warnings.</comment>
    <expr_stmt><expr><call><name pos:line="264" pos:column="5">Must<pos:position pos:line="264" pos:column="9"/></name><argument_list pos:line="264" pos:column="9">(<argument><expr><operator pos:line="264" pos:column="10">!<pos:position pos:line="264" pos:column="11"/></operator><name pos:line="264" pos:column="11">session<pos:position pos:line="264" pos:column="18"/></name></expr></argument>)<pos:position pos:line="264" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="264" pos:column="20"/></expr_stmt>
    <decl_stmt><decl><type><specifier pos:line="265" pos:column="5">const<pos:position pos:line="265" pos:column="10"/></specifier> <name pos:line="265" pos:column="11">int<pos:position pos:line="265" pos:column="14"/></name></type> <name pos:line="265" pos:column="15">ssl_error<pos:position pos:line="265" pos:column="24"/></name> <init pos:line="265" pos:column="25">= <expr><name pos:line="265" pos:column="27">ret<pos:position pos:line="265" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="265" pos:column="31"/></decl_stmt>
<cpp:endif pos:line="266" pos:column="1">#<cpp:directive pos:line="266" pos:column="2">endif<pos:position pos:line="266" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="line" pos:line="268" pos:column="5">// Log connection details, if any</comment>
    <expr_stmt><expr><call><name pos:line="269" pos:column="5">recordNegotiationDetails<pos:position pos:line="269" pos:column="29"/></name><argument_list pos:line="269" pos:column="29">()<pos:position pos:line="269" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="269" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="270" pos:column="5">noteNegotiationError<pos:position pos:line="270" pos:column="25"/></name><argument_list pos:line="270" pos:column="25">(<argument><expr><name pos:line="270" pos:column="26">ret<pos:position pos:line="270" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="270" pos:column="31">ssl_error<pos:position pos:line="270" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="270" pos:column="42">ssl_lib_error<pos:position pos:line="270" pos:column="55"/></name></expr></argument>)<pos:position pos:line="270" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="270" pos:column="57"/></expr_stmt>
}<pos:position pos:line="271" pos:column="2"/></block></function>

<function><type><name pos:line="273" pos:column="1">void<pos:position pos:line="273" pos:column="5"/></name></type>
<name><name pos:line="274" pos:column="1">Security<pos:position pos:line="274" pos:column="9"/></name><operator pos:line="274" pos:column="9">::<pos:position pos:line="274" pos:column="11"/></operator><name pos:line="274" pos:column="11">PeerConnector<pos:position pos:line="274" pos:column="24"/></name><operator pos:line="274" pos:column="24">::<pos:position pos:line="274" pos:column="26"/></operator><name pos:line="274" pos:column="26">noteWantRead<pos:position pos:line="274" pos:column="38"/></name></name><parameter_list pos:line="274" pos:column="38">()<pos:position pos:line="274" pos:column="40"/></parameter_list>
<block pos:line="275" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="276" pos:column="5">const<pos:position pos:line="276" pos:column="10"/></specifier> <name pos:line="276" pos:column="11">int<pos:position pos:line="276" pos:column="14"/></name></type> <name pos:line="276" pos:column="15">fd<pos:position pos:line="276" pos:column="17"/></name> <init pos:line="276" pos:column="18">= <expr><call><name pos:line="276" pos:column="20">serverConnection<pos:position pos:line="276" pos:column="36"/></name><argument_list pos:line="276" pos:column="36">()<pos:position pos:line="276" pos:column="38"/></argument_list></call><operator pos:line="276" pos:column="38">-&gt;<pos:position pos:line="276" pos:column="43"/></operator><name pos:line="276" pos:column="40">fd<pos:position pos:line="276" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="276" pos:column="43"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="277" pos:column="5">debugs<pos:position pos:line="277" pos:column="11"/></name><argument_list pos:line="277" pos:column="11">(<argument><expr><literal type="number" pos:line="277" pos:column="12">83<pos:position pos:line="277" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="277" pos:column="16">5<pos:position pos:line="277" pos:column="17"/></literal></expr></argument>, <argument><expr><call><name pos:line="277" pos:column="19">serverConnection<pos:position pos:line="277" pos:column="35"/></name><argument_list pos:line="277" pos:column="35">()<pos:position pos:line="277" pos:column="37"/></argument_list></call></expr></argument>)<pos:position pos:line="277" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="277" pos:column="39"/></expr_stmt>
<cpp:if pos:line="278" pos:column="1">#<cpp:directive pos:line="278" pos:column="2">if<pos:position pos:line="278" pos:column="4"/></cpp:directive> <expr><name pos:line="278" pos:column="5">USE_OPENSSL<pos:position pos:line="278" pos:column="16"/></name></expr></cpp:if>
    <decl_stmt><decl><type><name><name pos:line="279" pos:column="5">Security<pos:position pos:line="279" pos:column="13"/></name><operator pos:line="279" pos:column="13">::<pos:position pos:line="279" pos:column="15"/></operator><name pos:line="279" pos:column="15">SessionPointer<pos:position pos:line="279" pos:column="29"/></name></name></type> <name pos:line="279" pos:column="30">session<pos:position pos:line="279" pos:column="37"/></name><argument_list pos:line="279" pos:column="37">(<argument><expr><name><name pos:line="279" pos:column="38">fd_table<pos:position pos:line="279" pos:column="46"/></name><index pos:line="279" pos:column="46">[<expr><name pos:line="279" pos:column="47">fd<pos:position pos:line="279" pos:column="49"/></name></expr>]<pos:position pos:line="279" pos:column="50"/></index></name><operator pos:line="279" pos:column="50">.<pos:position pos:line="279" pos:column="51"/></operator><name pos:line="279" pos:column="51">ssl<pos:position pos:line="279" pos:column="54"/></name></expr></argument>)<pos:position pos:line="279" pos:column="55"/></argument_list></decl>;<pos:position pos:line="279" pos:column="56"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="280" pos:column="5">BIO<pos:position pos:line="280" pos:column="8"/></name> <modifier pos:line="280" pos:column="9">*<pos:position pos:line="280" pos:column="10"/></modifier></type><name pos:line="280" pos:column="10">b<pos:position pos:line="280" pos:column="11"/></name> <init pos:line="280" pos:column="12">= <expr><call><name pos:line="280" pos:column="14">SSL_get_rbio<pos:position pos:line="280" pos:column="26"/></name><argument_list pos:line="280" pos:column="26">(<argument><expr><call><name><name pos:line="280" pos:column="27">session<pos:position pos:line="280" pos:column="34"/></name><operator pos:line="280" pos:column="34">.<pos:position pos:line="280" pos:column="35"/></operator><name pos:line="280" pos:column="35">get<pos:position pos:line="280" pos:column="38"/></name></name><argument_list pos:line="280" pos:column="38">()<pos:position pos:line="280" pos:column="40"/></argument_list></call></expr></argument>)<pos:position pos:line="280" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="280" pos:column="42"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="281" pos:column="5">Ssl<pos:position pos:line="281" pos:column="8"/></name><operator pos:line="281" pos:column="8">::<pos:position pos:line="281" pos:column="10"/></operator><name pos:line="281" pos:column="10">ServerBio<pos:position pos:line="281" pos:column="19"/></name></name> <modifier pos:line="281" pos:column="20">*<pos:position pos:line="281" pos:column="21"/></modifier></type><name pos:line="281" pos:column="21">srvBio<pos:position pos:line="281" pos:column="27"/></name> <init pos:line="281" pos:column="28">= <expr><cast type="static" pos:line="281" pos:column="30">static_cast<argument_list type="generic" pos:line="281" pos:column="41">&lt;<argument><expr><name><name pos:line="281" pos:column="42">Ssl<pos:position pos:line="281" pos:column="45"/></name><operator pos:line="281" pos:column="45">::<pos:position pos:line="281" pos:column="47"/></operator><name pos:line="281" pos:column="47">ServerBio<pos:position pos:line="281" pos:column="56"/></name></name> <operator pos:line="281" pos:column="57">*<pos:position pos:line="281" pos:column="58"/></operator></expr></argument>&gt;<pos:position pos:line="281" pos:column="62"/></argument_list><argument_list pos:line="281" pos:column="59">(<argument><expr><call><name pos:line="281" pos:column="60">BIO_get_data<pos:position pos:line="281" pos:column="72"/></name><argument_list pos:line="281" pos:column="72">(<argument><expr><name pos:line="281" pos:column="73">b<pos:position pos:line="281" pos:column="74"/></name></expr></argument>)<pos:position pos:line="281" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="281" pos:column="76"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="281" pos:column="77"/></decl_stmt>
    <if pos:line="282" pos:column="5">if <condition pos:line="282" pos:column="8">(<expr><call><name><name pos:line="282" pos:column="9">srvBio<pos:position pos:line="282" pos:column="15"/></name><operator pos:line="282" pos:column="15">-&gt;<pos:position pos:line="282" pos:column="20"/></operator><name pos:line="282" pos:column="17">holdRead<pos:position pos:line="282" pos:column="25"/></name></name><argument_list pos:line="282" pos:column="25">()<pos:position pos:line="282" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="282" pos:column="28"/></condition><then pos:line="282" pos:column="28"> <block pos:line="282" pos:column="29">{
        <if pos:line="283" pos:column="9">if <condition pos:line="283" pos:column="12">(<expr><call><name><name pos:line="283" pos:column="13">srvBio<pos:position pos:line="283" pos:column="19"/></name><operator pos:line="283" pos:column="19">-&gt;<pos:position pos:line="283" pos:column="24"/></operator><name pos:line="283" pos:column="21">gotHello<pos:position pos:line="283" pos:column="29"/></name></name><argument_list pos:line="283" pos:column="29">()<pos:position pos:line="283" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="283" pos:column="32"/></condition><then pos:line="283" pos:column="32"> <block pos:line="283" pos:column="33">{
            <if pos:line="284" pos:column="13">if <condition pos:line="284" pos:column="16">(<expr><call><name pos:line="284" pos:column="17">checkForMissingCertificates<pos:position pos:line="284" pos:column="44"/></name><argument_list pos:line="284" pos:column="44">()<pos:position pos:line="284" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="284" pos:column="47"/></condition><then pos:line="284" pos:column="47">
                <block type="pseudo"><return pos:line="285" pos:column="17">return;<pos:position pos:line="285" pos:column="24"/></return></block></then></if> <comment type="line" pos:line="285" pos:column="25">// Wait to download certificates before proceed.</comment>

            <expr_stmt><expr><call><name><name pos:line="287" pos:column="13">srvBio<pos:position pos:line="287" pos:column="19"/></name><operator pos:line="287" pos:column="19">-&gt;<pos:position pos:line="287" pos:column="24"/></operator><name pos:line="287" pos:column="21">holdRead<pos:position pos:line="287" pos:column="29"/></name></name><argument_list pos:line="287" pos:column="29">(<argument><expr><literal type="boolean" pos:line="287" pos:column="30">false<pos:position pos:line="287" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="287" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="287" pos:column="37"/></expr_stmt>
            <comment type="line" pos:line="288" pos:column="13">// schedule a negotiateSSl to allow openSSL parse received data</comment>
            <expr_stmt><expr><call><name><name pos:line="289" pos:column="13">Security<pos:position pos:line="289" pos:column="21"/></name><operator pos:line="289" pos:column="21">::<pos:position pos:line="289" pos:column="23"/></operator><name pos:line="289" pos:column="23">PeerConnector<pos:position pos:line="289" pos:column="36"/></name><operator pos:line="289" pos:column="36">::<pos:position pos:line="289" pos:column="38"/></operator><name pos:line="289" pos:column="38">NegotiateSsl<pos:position pos:line="289" pos:column="50"/></name></name><argument_list pos:line="289" pos:column="50">(<argument><expr><name pos:line="289" pos:column="51">fd<pos:position pos:line="289" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="289" pos:column="55">this<pos:position pos:line="289" pos:column="59"/></name></expr></argument>)<pos:position pos:line="289" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="289" pos:column="61"/></expr_stmt>
            <return pos:line="290" pos:column="13">return;<pos:position pos:line="290" pos:column="20"/></return>
        }<pos:position pos:line="291" pos:column="10"/></block></then> <elseif pos:line="291" pos:column="11">else <if pos:line="291" pos:column="16">if <condition pos:line="291" pos:column="19">(<expr><call><name><name pos:line="291" pos:column="20">srvBio<pos:position pos:line="291" pos:column="26"/></name><operator pos:line="291" pos:column="26">-&gt;<pos:position pos:line="291" pos:column="31"/></operator><name pos:line="291" pos:column="28">gotHelloFailed<pos:position pos:line="291" pos:column="42"/></name></name><argument_list pos:line="291" pos:column="42">()<pos:position pos:line="291" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="291" pos:column="45"/></condition><then pos:line="291" pos:column="45"> <block pos:line="291" pos:column="46">{
            <expr_stmt><expr><call><name><name pos:line="292" pos:column="13">srvBio<pos:position pos:line="292" pos:column="19"/></name><operator pos:line="292" pos:column="19">-&gt;<pos:position pos:line="292" pos:column="24"/></operator><name pos:line="292" pos:column="21">holdRead<pos:position pos:line="292" pos:column="29"/></name></name><argument_list pos:line="292" pos:column="29">(<argument><expr><literal type="boolean" pos:line="292" pos:column="30">false<pos:position pos:line="292" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="292" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="292" pos:column="37"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="293" pos:column="13">debugs<pos:position pos:line="293" pos:column="19"/></name><argument_list pos:line="293" pos:column="19">(<argument><expr><literal type="number" pos:line="293" pos:column="20">83<pos:position pos:line="293" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="293" pos:column="24">DBG_IMPORTANT<pos:position pos:line="293" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="293" pos:column="39">"Error parsing SSL Server Hello Message on FD "<pos:position pos:line="293" pos:column="86"/></literal> <operator pos:line="293" pos:column="87">&lt;&lt;<pos:position pos:line="293" pos:column="95"/></operator> <name pos:line="293" pos:column="90">fd<pos:position pos:line="293" pos:column="92"/></name></expr></argument>)<pos:position pos:line="293" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="293" pos:column="94"/></expr_stmt>
            <comment type="line" pos:line="294" pos:column="13">// schedule a negotiateSSl to allow openSSL parse received data</comment>
            <expr_stmt><expr><call><name><name pos:line="295" pos:column="13">Security<pos:position pos:line="295" pos:column="21"/></name><operator pos:line="295" pos:column="21">::<pos:position pos:line="295" pos:column="23"/></operator><name pos:line="295" pos:column="23">PeerConnector<pos:position pos:line="295" pos:column="36"/></name><operator pos:line="295" pos:column="36">::<pos:position pos:line="295" pos:column="38"/></operator><name pos:line="295" pos:column="38">NegotiateSsl<pos:position pos:line="295" pos:column="50"/></name></name><argument_list pos:line="295" pos:column="50">(<argument><expr><name pos:line="295" pos:column="51">fd<pos:position pos:line="295" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="295" pos:column="55">this<pos:position pos:line="295" pos:column="59"/></name></expr></argument>)<pos:position pos:line="295" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="295" pos:column="61"/></expr_stmt>
            <return pos:line="296" pos:column="13">return;<pos:position pos:line="296" pos:column="20"/></return>
        }<pos:position pos:line="297" pos:column="10"/></block></then></if></elseif></if>
    }<pos:position pos:line="298" pos:column="6"/></block></then></if>
<cpp:endif pos:line="299" pos:column="1">#<cpp:directive pos:line="299" pos:column="2">endif<pos:position pos:line="299" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name pos:line="300" pos:column="5">setReadTimeout<pos:position pos:line="300" pos:column="19"/></name><argument_list pos:line="300" pos:column="19">()<pos:position pos:line="300" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="300" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="301" pos:column="5">Comm<pos:position pos:line="301" pos:column="9"/></name><operator pos:line="301" pos:column="9">::<pos:position pos:line="301" pos:column="11"/></operator><name pos:line="301" pos:column="11">SetSelect<pos:position pos:line="301" pos:column="20"/></name></name><argument_list pos:line="301" pos:column="20">(<argument><expr><name pos:line="301" pos:column="21">fd<pos:position pos:line="301" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="301" pos:column="25">COMM_SELECT_READ<pos:position pos:line="301" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="301" pos:column="43">&amp;<pos:position pos:line="301" pos:column="48"/></operator><name pos:line="301" pos:column="44">NegotiateSsl<pos:position pos:line="301" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="301" pos:column="58">this<pos:position pos:line="301" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="301" pos:column="64">0<pos:position pos:line="301" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="301" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="301" pos:column="67"/></expr_stmt>
}<pos:position pos:line="302" pos:column="2"/></block></function>

<function><type><name pos:line="304" pos:column="1">void<pos:position pos:line="304" pos:column="5"/></name></type>
<name><name pos:line="305" pos:column="1">Security<pos:position pos:line="305" pos:column="9"/></name><operator pos:line="305" pos:column="9">::<pos:position pos:line="305" pos:column="11"/></operator><name pos:line="305" pos:column="11">PeerConnector<pos:position pos:line="305" pos:column="24"/></name><operator pos:line="305" pos:column="24">::<pos:position pos:line="305" pos:column="26"/></operator><name pos:line="305" pos:column="26">noteWantWrite<pos:position pos:line="305" pos:column="39"/></name></name><parameter_list pos:line="305" pos:column="39">()<pos:position pos:line="305" pos:column="41"/></parameter_list>
<block pos:line="306" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="307" pos:column="5">const<pos:position pos:line="307" pos:column="10"/></specifier> <name pos:line="307" pos:column="11">int<pos:position pos:line="307" pos:column="14"/></name></type> <name pos:line="307" pos:column="15">fd<pos:position pos:line="307" pos:column="17"/></name> <init pos:line="307" pos:column="18">= <expr><call><name pos:line="307" pos:column="20">serverConnection<pos:position pos:line="307" pos:column="36"/></name><argument_list pos:line="307" pos:column="36">()<pos:position pos:line="307" pos:column="38"/></argument_list></call><operator pos:line="307" pos:column="38">-&gt;<pos:position pos:line="307" pos:column="43"/></operator><name pos:line="307" pos:column="40">fd<pos:position pos:line="307" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="307" pos:column="43"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="308" pos:column="5">debugs<pos:position pos:line="308" pos:column="11"/></name><argument_list pos:line="308" pos:column="11">(<argument><expr><literal type="number" pos:line="308" pos:column="12">83<pos:position pos:line="308" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="308" pos:column="16">5<pos:position pos:line="308" pos:column="17"/></literal></expr></argument>, <argument><expr><call><name pos:line="308" pos:column="19">serverConnection<pos:position pos:line="308" pos:column="35"/></name><argument_list pos:line="308" pos:column="35">()<pos:position pos:line="308" pos:column="37"/></argument_list></call></expr></argument>)<pos:position pos:line="308" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="308" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="309" pos:column="5">Comm<pos:position pos:line="309" pos:column="9"/></name><operator pos:line="309" pos:column="9">::<pos:position pos:line="309" pos:column="11"/></operator><name pos:line="309" pos:column="11">SetSelect<pos:position pos:line="309" pos:column="20"/></name></name><argument_list pos:line="309" pos:column="20">(<argument><expr><name pos:line="309" pos:column="21">fd<pos:position pos:line="309" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="309" pos:column="25">COMM_SELECT_WRITE<pos:position pos:line="309" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="309" pos:column="44">&amp;<pos:position pos:line="309" pos:column="49"/></operator><name pos:line="309" pos:column="45">NegotiateSsl<pos:position pos:line="309" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="309" pos:column="59">this<pos:position pos:line="309" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="309" pos:column="65">0<pos:position pos:line="309" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="309" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="309" pos:column="68"/></expr_stmt>
    <return pos:line="310" pos:column="5">return;<pos:position pos:line="310" pos:column="12"/></return>
}<pos:position pos:line="311" pos:column="2"/></block></function>

<function><type><name pos:line="313" pos:column="1">void<pos:position pos:line="313" pos:column="5"/></name></type>
<name><name pos:line="314" pos:column="1">Security<pos:position pos:line="314" pos:column="9"/></name><operator pos:line="314" pos:column="9">::<pos:position pos:line="314" pos:column="11"/></operator><name pos:line="314" pos:column="11">PeerConnector<pos:position pos:line="314" pos:column="24"/></name><operator pos:line="314" pos:column="24">::<pos:position pos:line="314" pos:column="26"/></operator><name pos:line="314" pos:column="26">noteNegotiationError<pos:position pos:line="314" pos:column="46"/></name></name><parameter_list pos:line="314" pos:column="46">(<parameter><decl><type><specifier pos:line="314" pos:column="47">const<pos:position pos:line="314" pos:column="52"/></specifier> <name pos:line="314" pos:column="53">int<pos:position pos:line="314" pos:column="56"/></name></type> <name pos:line="314" pos:column="57">ret<pos:position pos:line="314" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="314" pos:column="62">const<pos:position pos:line="314" pos:column="67"/></specifier> <name pos:line="314" pos:column="68">int<pos:position pos:line="314" pos:column="71"/></name></type> <name pos:line="314" pos:column="72">ssl_error<pos:position pos:line="314" pos:column="81"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="314" pos:column="83">const<pos:position pos:line="314" pos:column="88"/></specifier> <name pos:line="314" pos:column="89">int<pos:position pos:line="314" pos:column="92"/></name></type> <name pos:line="314" pos:column="93">ssl_lib_error<pos:position pos:line="314" pos:column="106"/></name></decl></parameter>)<pos:position pos:line="314" pos:column="107"/></parameter_list>
<block pos:line="315" pos:column="1">{
<cpp:if pos:line="316" pos:column="1">#<cpp:directive pos:line="316" pos:column="2">if<pos:position pos:line="316" pos:column="4"/></cpp:directive> <expr><call><name pos:line="316" pos:column="5">defined<pos:position pos:line="316" pos:column="12"/></name><argument_list pos:line="316" pos:column="12">(<argument><expr><name pos:line="316" pos:column="13">EPROTO<pos:position pos:line="316" pos:column="19"/></name></expr></argument>)<pos:position pos:line="316" pos:column="20"/></argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name pos:line="317" pos:column="5">int<pos:position pos:line="317" pos:column="8"/></name></type> <name pos:line="317" pos:column="9">sysErrNo<pos:position pos:line="317" pos:column="17"/></name> <init pos:line="317" pos:column="18">= <expr><name pos:line="317" pos:column="20">EPROTO<pos:position pos:line="317" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="317" pos:column="27"/></decl_stmt>
<cpp:else pos:line="318" pos:column="1">#<cpp:directive pos:line="318" pos:column="2">else<pos:position pos:line="318" pos:column="6"/></cpp:directive></cpp:else>
    <decl_stmt><decl><type><name pos:line="319" pos:column="5">int<pos:position pos:line="319" pos:column="8"/></name></type> <name pos:line="319" pos:column="9">sysErrNo<pos:position pos:line="319" pos:column="17"/></name> <init pos:line="319" pos:column="18">= <expr><name pos:line="319" pos:column="20">EACCES<pos:position pos:line="319" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="319" pos:column="27"/></decl_stmt>
<cpp:endif pos:line="320" pos:column="1">#<cpp:directive pos:line="320" pos:column="2">endif<pos:position pos:line="320" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="322" pos:column="1">#<cpp:directive pos:line="322" pos:column="2">if<pos:position pos:line="322" pos:column="4"/></cpp:directive> <expr><name pos:line="322" pos:column="5">USE_OPENSSL<pos:position pos:line="322" pos:column="16"/></name></expr></cpp:if>
    <comment type="line" pos:line="323" pos:column="5">// store/report errno when ssl_error is SSL_ERROR_SYSCALL, ssl_lib_error is 0, and ret is -1</comment>
    <if pos:line="324" pos:column="5">if <condition pos:line="324" pos:column="8">(<expr><name pos:line="324" pos:column="9">ssl_error<pos:position pos:line="324" pos:column="18"/></name> <operator pos:line="324" pos:column="19">==<pos:position pos:line="324" pos:column="21"/></operator> <name pos:line="324" pos:column="22">SSL_ERROR_SYSCALL<pos:position pos:line="324" pos:column="39"/></name> <operator pos:line="324" pos:column="40">&amp;&amp;<pos:position pos:line="324" pos:column="50"/></operator> <name pos:line="324" pos:column="43">ret<pos:position pos:line="324" pos:column="46"/></name> <operator pos:line="324" pos:column="47">==<pos:position pos:line="324" pos:column="49"/></operator> <operator pos:line="324" pos:column="50">-<pos:position pos:line="324" pos:column="51"/></operator><literal type="number" pos:line="324" pos:column="51">1<pos:position pos:line="324" pos:column="52"/></literal> <operator pos:line="324" pos:column="53">&amp;&amp;<pos:position pos:line="324" pos:column="63"/></operator> <name pos:line="324" pos:column="56">ssl_lib_error<pos:position pos:line="324" pos:column="69"/></name> <operator pos:line="324" pos:column="70">==<pos:position pos:line="324" pos:column="72"/></operator> <literal type="number" pos:line="324" pos:column="73">0<pos:position pos:line="324" pos:column="74"/></literal></expr>)<pos:position pos:line="324" pos:column="75"/></condition><then pos:line="324" pos:column="75">
        <block type="pseudo"><expr_stmt><expr><name pos:line="325" pos:column="9">sysErrNo<pos:position pos:line="325" pos:column="17"/></name> <operator pos:line="325" pos:column="18">=<pos:position pos:line="325" pos:column="19"/></operator> <name pos:line="325" pos:column="20">errno<pos:position pos:line="325" pos:column="25"/></name></expr>;<pos:position pos:line="325" pos:column="26"/></expr_stmt></block></then></if>
<cpp:endif pos:line="326" pos:column="1">#<cpp:directive pos:line="326" pos:column="2">endif<pos:position pos:line="326" pos:column="7"/></cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name pos:line="327" pos:column="5">int<pos:position pos:line="327" pos:column="8"/></name></type> <name pos:line="327" pos:column="9">xerr<pos:position pos:line="327" pos:column="13"/></name> <init pos:line="327" pos:column="14">= <expr><name pos:line="327" pos:column="16">errno<pos:position pos:line="327" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="327" pos:column="22"/></decl_stmt>

    <decl_stmt><decl><type><specifier pos:line="329" pos:column="5">const<pos:position pos:line="329" pos:column="10"/></specifier> <name pos:line="329" pos:column="11">int<pos:position pos:line="329" pos:column="14"/></name></type> <name pos:line="329" pos:column="15">fd<pos:position pos:line="329" pos:column="17"/></name> <init pos:line="329" pos:column="18">= <expr><call><name pos:line="329" pos:column="20">serverConnection<pos:position pos:line="329" pos:column="36"/></name><argument_list pos:line="329" pos:column="36">()<pos:position pos:line="329" pos:column="38"/></argument_list></call><operator pos:line="329" pos:column="38">-&gt;<pos:position pos:line="329" pos:column="43"/></operator><name pos:line="329" pos:column="40">fd<pos:position pos:line="329" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="329" pos:column="43"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="330" pos:column="5">debugs<pos:position pos:line="330" pos:column="11"/></name><argument_list pos:line="330" pos:column="11">(<argument><expr><literal type="number" pos:line="330" pos:column="12">83<pos:position pos:line="330" pos:column="14"/></literal></expr></argument>, <argument><expr><name pos:line="330" pos:column="16">DBG_IMPORTANT<pos:position pos:line="330" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="330" pos:column="31">"ERROR: negotiating TLS on FD "<pos:position pos:line="330" pos:column="62"/></literal> <operator pos:line="330" pos:column="63">&lt;&lt;<pos:position pos:line="330" pos:column="71"/></operator> <name pos:line="330" pos:column="66">fd<pos:position pos:line="330" pos:column="68"/></name> <operator pos:line="330" pos:column="69">&lt;&lt;<pos:position pos:line="330" pos:column="77"/></operator>
           <literal type="string" pos:line="331" pos:column="12">": "<pos:position pos:line="331" pos:column="16"/></literal> <operator pos:line="331" pos:column="17">&lt;&lt;<pos:position pos:line="331" pos:column="25"/></operator> <call><name><name pos:line="331" pos:column="20">Security<pos:position pos:line="331" pos:column="28"/></name><operator pos:line="331" pos:column="28">::<pos:position pos:line="331" pos:column="30"/></operator><name pos:line="331" pos:column="30">ErrorString<pos:position pos:line="331" pos:column="41"/></name></name><argument_list pos:line="331" pos:column="41">(<argument><expr><name pos:line="331" pos:column="42">ssl_lib_error<pos:position pos:line="331" pos:column="55"/></name></expr></argument>)<pos:position pos:line="331" pos:column="56"/></argument_list></call> <operator pos:line="331" pos:column="57">&lt;&lt;<pos:position pos:line="331" pos:column="65"/></operator> <literal type="string" pos:line="331" pos:column="60">" ("<pos:position pos:line="331" pos:column="64"/></literal> <operator pos:line="331" pos:column="65">&lt;&lt;<pos:position pos:line="331" pos:column="73"/></operator>
           <name pos:line="332" pos:column="12">ssl_error<pos:position pos:line="332" pos:column="21"/></name> <operator pos:line="332" pos:column="22">&lt;&lt;<pos:position pos:line="332" pos:column="30"/></operator> <literal type="string" pos:line="332" pos:column="25">"/"<pos:position pos:line="332" pos:column="28"/></literal> <operator pos:line="332" pos:column="29">&lt;&lt;<pos:position pos:line="332" pos:column="37"/></operator> <name pos:line="332" pos:column="32">ret<pos:position pos:line="332" pos:column="35"/></name> <operator pos:line="332" pos:column="36">&lt;&lt;<pos:position pos:line="332" pos:column="44"/></operator> <literal type="string" pos:line="332" pos:column="39">"/"<pos:position pos:line="332" pos:column="42"/></literal> <operator pos:line="332" pos:column="43">&lt;&lt;<pos:position pos:line="332" pos:column="51"/></operator> <name pos:line="332" pos:column="46">xerr<pos:position pos:line="332" pos:column="50"/></name> <operator pos:line="332" pos:column="51">&lt;&lt;<pos:position pos:line="332" pos:column="59"/></operator> <literal type="string" pos:line="332" pos:column="54">")"<pos:position pos:line="332" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="332" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="332" pos:column="59"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="334" pos:column="5">ErrorState<pos:position pos:line="334" pos:column="15"/></name> <modifier pos:line="334" pos:column="16">*<pos:position pos:line="334" pos:column="17"/></modifier></type><name pos:line="334" pos:column="17">anErr<pos:position pos:line="334" pos:column="22"/></name> <init pos:line="334" pos:column="23">= <expr><name pos:line="334" pos:column="25">NULL<pos:position pos:line="334" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="334" pos:column="30"/></decl_stmt>
    <if pos:line="335" pos:column="5">if <condition pos:line="335" pos:column="8">(<expr><name pos:line="335" pos:column="9">request<pos:position pos:line="335" pos:column="16"/></name> <operator pos:line="335" pos:column="17">!=<pos:position pos:line="335" pos:column="19"/></operator> <name pos:line="335" pos:column="20">NULL<pos:position pos:line="335" pos:column="24"/></name></expr>)<pos:position pos:line="335" pos:column="25"/></condition><then pos:line="335" pos:column="25">
        <block type="pseudo"><expr_stmt><expr><name pos:line="336" pos:column="9">anErr<pos:position pos:line="336" pos:column="14"/></name> <operator pos:line="336" pos:column="15">=<pos:position pos:line="336" pos:column="16"/></operator> <call><name><name pos:line="336" pos:column="17">ErrorState<pos:position pos:line="336" pos:column="27"/></name><operator pos:line="336" pos:column="27">::<pos:position pos:line="336" pos:column="29"/></operator><name pos:line="336" pos:column="29">NewForwarding<pos:position pos:line="336" pos:column="42"/></name></name><argument_list pos:line="336" pos:column="42">(<argument><expr><name pos:line="336" pos:column="43">ERR_SECURE_CONNECT_FAIL<pos:position pos:line="336" pos:column="66"/></name></expr></argument>, <argument><expr><call><name><name pos:line="336" pos:column="68">request<pos:position pos:line="336" pos:column="75"/></name><operator pos:line="336" pos:column="75">.<pos:position pos:line="336" pos:column="76"/></operator><name pos:line="336" pos:column="76">getRaw<pos:position pos:line="336" pos:column="82"/></name></name><argument_list pos:line="336" pos:column="82">()<pos:position pos:line="336" pos:column="84"/></argument_list></call></expr></argument>)<pos:position pos:line="336" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="336" pos:column="86"/></expr_stmt></block></then>
    <else pos:line="337" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="338" pos:column="9">anErr<pos:position pos:line="338" pos:column="14"/></name> <operator pos:line="338" pos:column="15">=<pos:position pos:line="338" pos:column="16"/></operator> <operator pos:line="338" pos:column="17">new<pos:position pos:line="338" pos:column="20"/></operator> <call><name pos:line="338" pos:column="21">ErrorState<pos:position pos:line="338" pos:column="31"/></name><argument_list pos:line="338" pos:column="31">(<argument><expr><name pos:line="338" pos:column="32">ERR_SECURE_CONNECT_FAIL<pos:position pos:line="338" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="338" pos:column="57">Http<pos:position pos:line="338" pos:column="61"/></name><operator pos:line="338" pos:column="61">::<pos:position pos:line="338" pos:column="63"/></operator><name pos:line="338" pos:column="63">scServiceUnavailable<pos:position pos:line="338" pos:column="83"/></name></name></expr></argument>, <argument><expr><name pos:line="338" pos:column="85">NULL<pos:position pos:line="338" pos:column="89"/></name></expr></argument>)<pos:position pos:line="338" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="338" pos:column="91"/></expr_stmt></block></else></if>
    <expr_stmt><expr><name><name pos:line="339" pos:column="5">anErr<pos:position pos:line="339" pos:column="10"/></name><operator pos:line="339" pos:column="10">-&gt;<pos:position pos:line="339" pos:column="15"/></operator><name pos:line="339" pos:column="12">xerrno<pos:position pos:line="339" pos:column="18"/></name></name> <operator pos:line="339" pos:column="19">=<pos:position pos:line="339" pos:column="20"/></operator> <name pos:line="339" pos:column="21">sysErrNo<pos:position pos:line="339" pos:column="29"/></name></expr>;<pos:position pos:line="339" pos:column="30"/></expr_stmt>

<cpp:if pos:line="341" pos:column="1">#<cpp:directive pos:line="341" pos:column="2">if<pos:position pos:line="341" pos:column="4"/></cpp:directive> <expr><name pos:line="341" pos:column="5">USE_OPENSSL<pos:position pos:line="341" pos:column="16"/></name></expr></cpp:if>
    <decl_stmt><decl><type><name><name pos:line="342" pos:column="5">Security<pos:position pos:line="342" pos:column="13"/></name><operator pos:line="342" pos:column="13">::<pos:position pos:line="342" pos:column="15"/></operator><name pos:line="342" pos:column="15">SessionPointer<pos:position pos:line="342" pos:column="29"/></name></name></type> <name pos:line="342" pos:column="30">session<pos:position pos:line="342" pos:column="37"/></name><argument_list pos:line="342" pos:column="37">(<argument><expr><name><name pos:line="342" pos:column="38">fd_table<pos:position pos:line="342" pos:column="46"/></name><index pos:line="342" pos:column="46">[<expr><name pos:line="342" pos:column="47">fd<pos:position pos:line="342" pos:column="49"/></name></expr>]<pos:position pos:line="342" pos:column="50"/></index></name><operator pos:line="342" pos:column="50">.<pos:position pos:line="342" pos:column="51"/></operator><name pos:line="342" pos:column="51">ssl<pos:position pos:line="342" pos:column="54"/></name></expr></argument>)<pos:position pos:line="342" pos:column="55"/></argument_list></decl>;<pos:position pos:line="342" pos:column="56"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="343" pos:column="5">Ssl<pos:position pos:line="343" pos:column="8"/></name><operator pos:line="343" pos:column="8">::<pos:position pos:line="343" pos:column="10"/></operator><name pos:line="343" pos:column="10">ErrorDetail<pos:position pos:line="343" pos:column="21"/></name></name> <modifier pos:line="343" pos:column="22">*<pos:position pos:line="343" pos:column="23"/></modifier></type><name pos:line="343" pos:column="23">errFromFailure<pos:position pos:line="343" pos:column="37"/></name> <init pos:line="343" pos:column="38">= <expr><cast type="static" pos:line="343" pos:column="40">static_cast<argument_list type="generic" pos:line="343" pos:column="51">&lt;<argument><expr><name><name pos:line="343" pos:column="52">Ssl<pos:position pos:line="343" pos:column="55"/></name><operator pos:line="343" pos:column="55">::<pos:position pos:line="343" pos:column="57"/></operator><name pos:line="343" pos:column="57">ErrorDetail<pos:position pos:line="343" pos:column="68"/></name></name> <operator pos:line="343" pos:column="69">*<pos:position pos:line="343" pos:column="70"/></operator></expr></argument>&gt;<pos:position pos:line="343" pos:column="74"/></argument_list><argument_list pos:line="343" pos:column="71">(<argument><expr><call><name pos:line="343" pos:column="72">SSL_get_ex_data<pos:position pos:line="343" pos:column="87"/></name><argument_list pos:line="343" pos:column="87">(<argument><expr><call><name><name pos:line="343" pos:column="88">session<pos:position pos:line="343" pos:column="95"/></name><operator pos:line="343" pos:column="95">.<pos:position pos:line="343" pos:column="96"/></operator><name pos:line="343" pos:column="96">get<pos:position pos:line="343" pos:column="99"/></name></name><argument_list pos:line="343" pos:column="99">()<pos:position pos:line="343" pos:column="101"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="343" pos:column="103">ssl_ex_index_ssl_error_detail<pos:position pos:line="343" pos:column="132"/></name></expr></argument>)<pos:position pos:line="343" pos:column="133"/></argument_list></call></expr></argument>)<pos:position pos:line="343" pos:column="134"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="343" pos:column="135"/></decl_stmt>
    <if pos:line="344" pos:column="5">if <condition pos:line="344" pos:column="8">(<expr><name pos:line="344" pos:column="9">errFromFailure<pos:position pos:line="344" pos:column="23"/></name> <operator pos:line="344" pos:column="24">!=<pos:position pos:line="344" pos:column="26"/></operator> <name pos:line="344" pos:column="27">NULL<pos:position pos:line="344" pos:column="31"/></name></expr>)<pos:position pos:line="344" pos:column="32"/></condition><then pos:line="344" pos:column="32"> <block pos:line="344" pos:column="33">{
        <comment type="line" pos:line="345" pos:column="9">// The errFromFailure is attached to the ssl object</comment>
        <comment type="line" pos:line="346" pos:column="9">// and will be released when ssl object destroyed.</comment>
        <comment type="line" pos:line="347" pos:column="9">// Copy errFromFailure to a new Ssl::ErrorDetail object</comment>
        <expr_stmt><expr><name><name pos:line="348" pos:column="9">anErr<pos:position pos:line="348" pos:column="14"/></name><operator pos:line="348" pos:column="14">-&gt;<pos:position pos:line="348" pos:column="19"/></operator><name pos:line="348" pos:column="16">detail<pos:position pos:line="348" pos:column="22"/></name></name> <operator pos:line="348" pos:column="23">=<pos:position pos:line="348" pos:column="24"/></operator> <operator pos:line="348" pos:column="25">new<pos:position pos:line="348" pos:column="28"/></operator> <call><name><name pos:line="348" pos:column="29">Ssl<pos:position pos:line="348" pos:column="32"/></name><operator pos:line="348" pos:column="32">::<pos:position pos:line="348" pos:column="34"/></operator><name pos:line="348" pos:column="34">ErrorDetail<pos:position pos:line="348" pos:column="45"/></name></name><argument_list pos:line="348" pos:column="45">(<argument><expr><operator pos:line="348" pos:column="46">*<pos:position pos:line="348" pos:column="47"/></operator><name pos:line="348" pos:column="47">errFromFailure<pos:position pos:line="348" pos:column="61"/></name></expr></argument>)<pos:position pos:line="348" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="348" pos:column="63"/></expr_stmt>
    }<pos:position pos:line="349" pos:column="6"/></block></then> <else pos:line="349" pos:column="7">else <block pos:line="349" pos:column="12">{
        <comment type="line" pos:line="350" pos:column="9">// server_cert can be NULL here</comment>
        <decl_stmt><decl><type><name pos:line="351" pos:column="9">X509<pos:position pos:line="351" pos:column="13"/></name> <modifier pos:line="351" pos:column="14">*<pos:position pos:line="351" pos:column="15"/></modifier></type><name pos:line="351" pos:column="15">server_cert<pos:position pos:line="351" pos:column="26"/></name> <init pos:line="351" pos:column="27">= <expr><call><name pos:line="351" pos:column="29">SSL_get_peer_certificate<pos:position pos:line="351" pos:column="53"/></name><argument_list pos:line="351" pos:column="53">(<argument><expr><call><name><name pos:line="351" pos:column="54">session<pos:position pos:line="351" pos:column="61"/></name><operator pos:line="351" pos:column="61">.<pos:position pos:line="351" pos:column="62"/></operator><name pos:line="351" pos:column="62">get<pos:position pos:line="351" pos:column="65"/></name></name><argument_list pos:line="351" pos:column="65">()<pos:position pos:line="351" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="351" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="351" pos:column="69"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="352" pos:column="9">anErr<pos:position pos:line="352" pos:column="14"/></name><operator pos:line="352" pos:column="14">-&gt;<pos:position pos:line="352" pos:column="19"/></operator><name pos:line="352" pos:column="16">detail<pos:position pos:line="352" pos:column="22"/></name></name> <operator pos:line="352" pos:column="23">=<pos:position pos:line="352" pos:column="24"/></operator> <operator pos:line="352" pos:column="25">new<pos:position pos:line="352" pos:column="28"/></operator> <call><name><name pos:line="352" pos:column="29">Ssl<pos:position pos:line="352" pos:column="32"/></name><operator pos:line="352" pos:column="32">::<pos:position pos:line="352" pos:column="34"/></operator><name pos:line="352" pos:column="34">ErrorDetail<pos:position pos:line="352" pos:column="45"/></name></name><argument_list pos:line="352" pos:column="45">(<argument><expr><name pos:line="352" pos:column="46">SQUID_ERR_SSL_HANDSHAKE<pos:position pos:line="352" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="352" pos:column="71">server_cert<pos:position pos:line="352" pos:column="82"/></name></expr></argument>, <argument><expr><name pos:line="352" pos:column="84">NULL<pos:position pos:line="352" pos:column="88"/></name></expr></argument>)<pos:position pos:line="352" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="352" pos:column="90"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="353" pos:column="9">X509_free<pos:position pos:line="353" pos:column="18"/></name><argument_list pos:line="353" pos:column="18">(<argument><expr><name pos:line="353" pos:column="19">server_cert<pos:position pos:line="353" pos:column="30"/></name></expr></argument>)<pos:position pos:line="353" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="353" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="354" pos:column="6"/></block></else></if>

    <if pos:line="356" pos:column="5">if <condition pos:line="356" pos:column="8">(<expr><name pos:line="356" pos:column="9">ssl_lib_error<pos:position pos:line="356" pos:column="22"/></name> <operator pos:line="356" pos:column="23">!=<pos:position pos:line="356" pos:column="25"/></operator> <name pos:line="356" pos:column="26">SSL_ERROR_NONE<pos:position pos:line="356" pos:column="40"/></name></expr>)<pos:position pos:line="356" pos:column="41"/></condition><then pos:line="356" pos:column="41">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="357" pos:column="9">anErr<pos:position pos:line="357" pos:column="14"/></name><operator pos:line="357" pos:column="14">-&gt;<pos:position pos:line="357" pos:column="19"/></operator><name pos:line="357" pos:column="16">detail<pos:position pos:line="357" pos:column="22"/></name><operator pos:line="357" pos:column="22">-&gt;<pos:position pos:line="357" pos:column="27"/></operator><name pos:line="357" pos:column="24">setLibError<pos:position pos:line="357" pos:column="35"/></name></name><argument_list pos:line="357" pos:column="35">(<argument><expr><name pos:line="357" pos:column="36">ssl_lib_error<pos:position pos:line="357" pos:column="49"/></name></expr></argument>)<pos:position pos:line="357" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="357" pos:column="51"/></expr_stmt></block></then></if>
<cpp:endif pos:line="358" pos:column="1">#<cpp:directive pos:line="358" pos:column="2">endif<pos:position pos:line="358" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="360" pos:column="5">noteNegotiationDone<pos:position pos:line="360" pos:column="24"/></name><argument_list pos:line="360" pos:column="24">(<argument><expr><name pos:line="360" pos:column="25">anErr<pos:position pos:line="360" pos:column="30"/></name></expr></argument>)<pos:position pos:line="360" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="360" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="361" pos:column="5">bail<pos:position pos:line="361" pos:column="9"/></name><argument_list pos:line="361" pos:column="9">(<argument><expr><name pos:line="361" pos:column="10">anErr<pos:position pos:line="361" pos:column="15"/></name></expr></argument>)<pos:position pos:line="361" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="361" pos:column="17"/></expr_stmt>
}<pos:position pos:line="362" pos:column="2"/></block></function>

<function><type><name pos:line="364" pos:column="1">void<pos:position pos:line="364" pos:column="5"/></name></type>
<name><name pos:line="365" pos:column="1">Security<pos:position pos:line="365" pos:column="9"/></name><operator pos:line="365" pos:column="9">::<pos:position pos:line="365" pos:column="11"/></operator><name pos:line="365" pos:column="11">PeerConnector<pos:position pos:line="365" pos:column="24"/></name><operator pos:line="365" pos:column="24">::<pos:position pos:line="365" pos:column="26"/></operator><name pos:line="365" pos:column="26">bail<pos:position pos:line="365" pos:column="30"/></name></name><parameter_list pos:line="365" pos:column="30">(<parameter><decl><type><name pos:line="365" pos:column="31">ErrorState<pos:position pos:line="365" pos:column="41"/></name> <modifier pos:line="365" pos:column="42">*<pos:position pos:line="365" pos:column="43"/></modifier></type><name pos:line="365" pos:column="43">error<pos:position pos:line="365" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="365" pos:column="49"/></parameter_list>
<block pos:line="366" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="367" pos:column="5">Must<pos:position pos:line="367" pos:column="9"/></name><argument_list pos:line="367" pos:column="9">(<argument><expr><name pos:line="367" pos:column="10">error<pos:position pos:line="367" pos:column="15"/></name></expr></argument>)<pos:position pos:line="367" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="367" pos:column="17"/></expr_stmt> <comment type="line" pos:line="367" pos:column="18">// or the recepient will not know there was a problem</comment>
    <expr_stmt><expr><call><name pos:line="368" pos:column="5">Must<pos:position pos:line="368" pos:column="9"/></name><argument_list pos:line="368" pos:column="9">(<argument><expr><name pos:line="368" pos:column="10">callback<pos:position pos:line="368" pos:column="18"/></name> <operator pos:line="368" pos:column="19">!=<pos:position pos:line="368" pos:column="21"/></operator> <name pos:line="368" pos:column="22">NULL<pos:position pos:line="368" pos:column="26"/></name></expr></argument>)<pos:position pos:line="368" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="368" pos:column="28"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="369" pos:column="5">CbDialer<pos:position pos:line="369" pos:column="13"/></name> <modifier pos:line="369" pos:column="14">*<pos:position pos:line="369" pos:column="15"/></modifier></type><name pos:line="369" pos:column="15">dialer<pos:position pos:line="369" pos:column="21"/></name> <init pos:line="369" pos:column="22">= <expr><cast type="dynamic" pos:line="369" pos:column="24">dynamic_cast<argument_list type="generic" pos:line="369" pos:column="36">&lt;<argument><expr><name pos:line="369" pos:column="37">CbDialer<pos:position pos:line="369" pos:column="45"/></name><operator pos:line="369" pos:column="45">*<pos:position pos:line="369" pos:column="46"/></operator></expr></argument>&gt;<pos:position pos:line="369" pos:column="50"/></argument_list><argument_list pos:line="369" pos:column="47">(<argument><expr><call><name><name pos:line="369" pos:column="48">callback<pos:position pos:line="369" pos:column="56"/></name><operator pos:line="369" pos:column="56">-&gt;<pos:position pos:line="369" pos:column="61"/></operator><name pos:line="369" pos:column="58">getDialer<pos:position pos:line="369" pos:column="67"/></name></name><argument_list pos:line="369" pos:column="67">()<pos:position pos:line="369" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="369" pos:column="70"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="369" pos:column="71"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="370" pos:column="5">Must<pos:position pos:line="370" pos:column="9"/></name><argument_list pos:line="370" pos:column="9">(<argument><expr><name pos:line="370" pos:column="10">dialer<pos:position pos:line="370" pos:column="16"/></name></expr></argument>)<pos:position pos:line="370" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="370" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="371" pos:column="5">dialer<pos:position pos:line="371" pos:column="11"/></name><operator pos:line="371" pos:column="11">-&gt;<pos:position pos:line="371" pos:column="16"/></operator><name pos:line="371" pos:column="13">answer<pos:position pos:line="371" pos:column="19"/></name></name><argument_list pos:line="371" pos:column="19">()<pos:position pos:line="371" pos:column="21"/></argument_list></call><operator pos:line="371" pos:column="21">.<pos:position pos:line="371" pos:column="22"/></operator><name pos:line="371" pos:column="22">error<pos:position pos:line="371" pos:column="27"/></name> <operator pos:line="371" pos:column="28">=<pos:position pos:line="371" pos:column="29"/></operator> <name pos:line="371" pos:column="30">error<pos:position pos:line="371" pos:column="35"/></name></expr>;<pos:position pos:line="371" pos:column="36"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="373" pos:column="5">callBack<pos:position pos:line="373" pos:column="13"/></name><argument_list pos:line="373" pos:column="13">()<pos:position pos:line="373" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="373" pos:column="16"/></expr_stmt>
    <comment type="line" pos:line="374" pos:column="5">// Our job is done. The callabck recepient will probably close the failed</comment>
    <comment type="line" pos:line="375" pos:column="5">// peer connection and try another peer or go direct (if possible). We</comment>
    <comment type="line" pos:line="376" pos:column="5">// can close the connection ourselves (our error notification would reach</comment>
    <comment type="line" pos:line="377" pos:column="5">// the recepient before the fd-closure notification), but we would rather</comment>
    <comment type="line" pos:line="378" pos:column="5">// minimize the number of fd-closure notifications and let the recepient</comment>
    <comment type="line" pos:line="379" pos:column="5">// manage the TCP state of the connection.</comment>
}<pos:position pos:line="380" pos:column="2"/></block></function>

<function><type><name pos:line="382" pos:column="1">void<pos:position pos:line="382" pos:column="5"/></name></type>
<name><name pos:line="383" pos:column="1">Security<pos:position pos:line="383" pos:column="9"/></name><operator pos:line="383" pos:column="9">::<pos:position pos:line="383" pos:column="11"/></operator><name pos:line="383" pos:column="11">PeerConnector<pos:position pos:line="383" pos:column="24"/></name><operator pos:line="383" pos:column="24">::<pos:position pos:line="383" pos:column="26"/></operator><name pos:line="383" pos:column="26">callBack<pos:position pos:line="383" pos:column="34"/></name></name><parameter_list pos:line="383" pos:column="34">()<pos:position pos:line="383" pos:column="36"/></parameter_list>
<block pos:line="384" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="385" pos:column="5">debugs<pos:position pos:line="385" pos:column="11"/></name><argument_list pos:line="385" pos:column="11">(<argument><expr><literal type="number" pos:line="385" pos:column="12">83<pos:position pos:line="385" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="385" pos:column="16">5<pos:position pos:line="385" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="385" pos:column="19">"TLS setup ended for "<pos:position pos:line="385" pos:column="41"/></literal> <operator pos:line="385" pos:column="42">&lt;&lt;<pos:position pos:line="385" pos:column="50"/></operator> <call><name pos:line="385" pos:column="45">serverConnection<pos:position pos:line="385" pos:column="61"/></name><argument_list pos:line="385" pos:column="61">()<pos:position pos:line="385" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="385" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="385" pos:column="65"/></expr_stmt>

    <decl_stmt><decl><type><name><name pos:line="387" pos:column="5">AsyncCall<pos:position pos:line="387" pos:column="14"/></name><operator pos:line="387" pos:column="14">::<pos:position pos:line="387" pos:column="16"/></operator><name pos:line="387" pos:column="16">Pointer<pos:position pos:line="387" pos:column="23"/></name></name></type> <name pos:line="387" pos:column="24">cb<pos:position pos:line="387" pos:column="26"/></name> <init pos:line="387" pos:column="27">= <expr><name pos:line="387" pos:column="29">callback<pos:position pos:line="387" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="387" pos:column="38"/></decl_stmt>
    <comment type="line" pos:line="388" pos:column="5">// Do this now so that if we throw below, swanSong() assert that we _tried_</comment>
    <comment type="line" pos:line="389" pos:column="5">// to call back holds.</comment>
    <expr_stmt><expr><name pos:line="390" pos:column="5">callback<pos:position pos:line="390" pos:column="13"/></name> <operator pos:line="390" pos:column="14">=<pos:position pos:line="390" pos:column="15"/></operator> <name pos:line="390" pos:column="16">NULL<pos:position pos:line="390" pos:column="20"/></name></expr>;<pos:position pos:line="390" pos:column="21"/></expr_stmt> <comment type="line" pos:line="390" pos:column="22">// this should make done() true</comment>

    <comment type="line" pos:line="392" pos:column="5">// remove close handler</comment>
    <expr_stmt><expr><call><name pos:line="393" pos:column="5">comm_remove_close_handler<pos:position pos:line="393" pos:column="30"/></name><argument_list pos:line="393" pos:column="30">(<argument><expr><call><name pos:line="393" pos:column="31">serverConnection<pos:position pos:line="393" pos:column="47"/></name><argument_list pos:line="393" pos:column="47">()<pos:position pos:line="393" pos:column="49"/></argument_list></call><operator pos:line="393" pos:column="49">-&gt;<pos:position pos:line="393" pos:column="54"/></operator><name pos:line="393" pos:column="51">fd<pos:position pos:line="393" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="393" pos:column="55">closeHandler<pos:position pos:line="393" pos:column="67"/></name></expr></argument>)<pos:position pos:line="393" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="393" pos:column="69"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="395" pos:column="5">CbDialer<pos:position pos:line="395" pos:column="13"/></name> <modifier pos:line="395" pos:column="14">*<pos:position pos:line="395" pos:column="15"/></modifier></type><name pos:line="395" pos:column="15">dialer<pos:position pos:line="395" pos:column="21"/></name> <init pos:line="395" pos:column="22">= <expr><cast type="dynamic" pos:line="395" pos:column="24">dynamic_cast<argument_list type="generic" pos:line="395" pos:column="36">&lt;<argument><expr><name pos:line="395" pos:column="37">CbDialer<pos:position pos:line="395" pos:column="45"/></name><operator pos:line="395" pos:column="45">*<pos:position pos:line="395" pos:column="46"/></operator></expr></argument>&gt;<pos:position pos:line="395" pos:column="50"/></argument_list><argument_list pos:line="395" pos:column="47">(<argument><expr><call><name><name pos:line="395" pos:column="48">cb<pos:position pos:line="395" pos:column="50"/></name><operator pos:line="395" pos:column="50">-&gt;<pos:position pos:line="395" pos:column="55"/></operator><name pos:line="395" pos:column="52">getDialer<pos:position pos:line="395" pos:column="61"/></name></name><argument_list pos:line="395" pos:column="61">()<pos:position pos:line="395" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="395" pos:column="64"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="395" pos:column="65"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="396" pos:column="5">Must<pos:position pos:line="396" pos:column="9"/></name><argument_list pos:line="396" pos:column="9">(<argument><expr><name pos:line="396" pos:column="10">dialer<pos:position pos:line="396" pos:column="16"/></name></expr></argument>)<pos:position pos:line="396" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="396" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="397" pos:column="5">dialer<pos:position pos:line="397" pos:column="11"/></name><operator pos:line="397" pos:column="11">-&gt;<pos:position pos:line="397" pos:column="16"/></operator><name pos:line="397" pos:column="13">answer<pos:position pos:line="397" pos:column="19"/></name></name><argument_list pos:line="397" pos:column="19">()<pos:position pos:line="397" pos:column="21"/></argument_list></call><operator pos:line="397" pos:column="21">.<pos:position pos:line="397" pos:column="22"/></operator><name pos:line="397" pos:column="22">conn<pos:position pos:line="397" pos:column="26"/></name> <operator pos:line="397" pos:column="27">=<pos:position pos:line="397" pos:column="28"/></operator> <call><name pos:line="397" pos:column="29">serverConnection<pos:position pos:line="397" pos:column="45"/></name><argument_list pos:line="397" pos:column="45">()<pos:position pos:line="397" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="397" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="398" pos:column="5">ScheduleCallHere<pos:position pos:line="398" pos:column="21"/></name><argument_list pos:line="398" pos:column="21">(<argument><expr><name pos:line="398" pos:column="22">cb<pos:position pos:line="398" pos:column="24"/></name></expr></argument>)<pos:position pos:line="398" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="398" pos:column="26"/></expr_stmt>
}<pos:position pos:line="399" pos:column="2"/></block></function>

<function><type><name pos:line="401" pos:column="1">void<pos:position pos:line="401" pos:column="5"/></name></type>
<name><name pos:line="402" pos:column="1">Security<pos:position pos:line="402" pos:column="9"/></name><operator pos:line="402" pos:column="9">::<pos:position pos:line="402" pos:column="11"/></operator><name pos:line="402" pos:column="11">PeerConnector<pos:position pos:line="402" pos:column="24"/></name><operator pos:line="402" pos:column="24">::<pos:position pos:line="402" pos:column="26"/></operator><name pos:line="402" pos:column="26">swanSong<pos:position pos:line="402" pos:column="34"/></name></name><parameter_list pos:line="402" pos:column="34">()<pos:position pos:line="402" pos:column="36"/></parameter_list>
<block pos:line="403" pos:column="1">{
    <comment type="line" pos:line="404" pos:column="5">// XXX: unregister fd-closure monitoring and CommSetSelect interest, if any</comment>
    <expr_stmt><expr><call><name><name pos:line="405" pos:column="5">AsyncJob<pos:position pos:line="405" pos:column="13"/></name><operator pos:line="405" pos:column="13">::<pos:position pos:line="405" pos:column="15"/></operator><name pos:line="405" pos:column="15">swanSong<pos:position pos:line="405" pos:column="23"/></name></name><argument_list pos:line="405" pos:column="23">()<pos:position pos:line="405" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="405" pos:column="26"/></expr_stmt>
    <if pos:line="406" pos:column="5">if <condition pos:line="406" pos:column="8">(<expr><name pos:line="406" pos:column="9">callback<pos:position pos:line="406" pos:column="17"/></name> <operator pos:line="406" pos:column="18">!=<pos:position pos:line="406" pos:column="20"/></operator> <name pos:line="406" pos:column="21">NULL<pos:position pos:line="406" pos:column="25"/></name></expr>)<pos:position pos:line="406" pos:column="26"/></condition><then pos:line="406" pos:column="26"> <block pos:line="406" pos:column="27">{ <comment type="line" pos:line="406" pos:column="29">// paranoid: we have left the caller waiting</comment>
        <expr_stmt><expr><call><name pos:line="407" pos:column="9">debugs<pos:position pos:line="407" pos:column="15"/></name><argument_list pos:line="407" pos:column="15">(<argument><expr><literal type="number" pos:line="407" pos:column="16">83<pos:position pos:line="407" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="407" pos:column="20">DBG_IMPORTANT<pos:position pos:line="407" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="407" pos:column="35">"BUG: Unexpected state while connecting to a cache_peer or origin server"<pos:position pos:line="407" pos:column="108"/></literal></expr></argument>)<pos:position pos:line="407" pos:column="109"/></argument_list></call></expr>;<pos:position pos:line="407" pos:column="110"/></expr_stmt>
        <decl_stmt><decl><type><name pos:line="408" pos:column="9">ErrorState<pos:position pos:line="408" pos:column="19"/></name> <modifier pos:line="408" pos:column="20">*<pos:position pos:line="408" pos:column="21"/></modifier></type><name pos:line="408" pos:column="21">anErr<pos:position pos:line="408" pos:column="26"/></name> <init pos:line="408" pos:column="27">= <expr><operator pos:line="408" pos:column="29">new<pos:position pos:line="408" pos:column="32"/></operator> <call><name pos:line="408" pos:column="33">ErrorState<pos:position pos:line="408" pos:column="43"/></name><argument_list pos:line="408" pos:column="43">(<argument><expr><name pos:line="408" pos:column="44">ERR_GATEWAY_FAILURE<pos:position pos:line="408" pos:column="63"/></name></expr></argument>, <argument><expr><name><name pos:line="408" pos:column="65">Http<pos:position pos:line="408" pos:column="69"/></name><operator pos:line="408" pos:column="69">::<pos:position pos:line="408" pos:column="71"/></operator><name pos:line="408" pos:column="71">scInternalServerError<pos:position pos:line="408" pos:column="92"/></name></name></expr></argument>, <argument><expr><call><name><name pos:line="408" pos:column="94">request<pos:position pos:line="408" pos:column="101"/></name><operator pos:line="408" pos:column="101">.<pos:position pos:line="408" pos:column="102"/></operator><name pos:line="408" pos:column="102">getRaw<pos:position pos:line="408" pos:column="108"/></name></name><argument_list pos:line="408" pos:column="108">()<pos:position pos:line="408" pos:column="110"/></argument_list></call></expr></argument>)<pos:position pos:line="408" pos:column="111"/></argument_list></call></expr></init></decl>;<pos:position pos:line="408" pos:column="112"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="409" pos:column="9">bail<pos:position pos:line="409" pos:column="13"/></name><argument_list pos:line="409" pos:column="13">(<argument><expr><name pos:line="409" pos:column="14">anErr<pos:position pos:line="409" pos:column="19"/></name></expr></argument>)<pos:position pos:line="409" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="409" pos:column="21"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="410" pos:column="9">assert<pos:position pos:line="410" pos:column="15"/></name><argument_list pos:line="410" pos:column="15">(<argument><expr><operator pos:line="410" pos:column="16">!<pos:position pos:line="410" pos:column="17"/></operator><name pos:line="410" pos:column="17">callback<pos:position pos:line="410" pos:column="25"/></name></expr></argument>)<pos:position pos:line="410" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="410" pos:column="27"/></expr_stmt>
        <return pos:line="411" pos:column="9">return;<pos:position pos:line="411" pos:column="16"/></return>
    }<pos:position pos:line="412" pos:column="6"/></block></then></if>
}<pos:position pos:line="413" pos:column="2"/></block></function>

<function><type><specifier pos:line="415" pos:column="1">const<pos:position pos:line="415" pos:column="6"/></specifier> <name pos:line="415" pos:column="7">char<pos:position pos:line="415" pos:column="11"/></name> <modifier pos:line="415" pos:column="12">*<pos:position pos:line="415" pos:column="13"/></modifier></type>
<name><name pos:line="416" pos:column="1">Security<pos:position pos:line="416" pos:column="9"/></name><operator pos:line="416" pos:column="9">::<pos:position pos:line="416" pos:column="11"/></operator><name pos:line="416" pos:column="11">PeerConnector<pos:position pos:line="416" pos:column="24"/></name><operator pos:line="416" pos:column="24">::<pos:position pos:line="416" pos:column="26"/></operator><name pos:line="416" pos:column="26">status<pos:position pos:line="416" pos:column="32"/></name></name><parameter_list pos:line="416" pos:column="32">()<pos:position pos:line="416" pos:column="34"/></parameter_list> <specifier pos:line="416" pos:column="35">const<pos:position pos:line="416" pos:column="40"/></specifier>
<block pos:line="417" pos:column="1">{
    <decl_stmt><decl><specifier pos:line="418" pos:column="5">static<pos:position pos:line="418" pos:column="11"/></specifier> <type><name pos:line="418" pos:column="12">MemBuf<pos:position pos:line="418" pos:column="18"/></name></type> <name pos:line="418" pos:column="19">buf<pos:position pos:line="418" pos:column="22"/></name></decl>;<pos:position pos:line="418" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="419" pos:column="5">buf<pos:position pos:line="419" pos:column="8"/></name><operator pos:line="419" pos:column="8">.<pos:position pos:line="419" pos:column="9"/></operator><name pos:line="419" pos:column="9">reset<pos:position pos:line="419" pos:column="14"/></name></name><argument_list pos:line="419" pos:column="14">()<pos:position pos:line="419" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="419" pos:column="17"/></expr_stmt>

    <comment type="line" pos:line="421" pos:column="5">// TODO: redesign AsyncJob::status() API to avoid this</comment>
    <comment type="line" pos:line="422" pos:column="5">// id and stop reason reporting duplication.</comment>
    <expr_stmt><expr><call><name><name pos:line="423" pos:column="5">buf<pos:position pos:line="423" pos:column="8"/></name><operator pos:line="423" pos:column="8">.<pos:position pos:line="423" pos:column="9"/></operator><name pos:line="423" pos:column="9">append<pos:position pos:line="423" pos:column="15"/></name></name><argument_list pos:line="423" pos:column="15">(<argument><expr><literal type="string" pos:line="423" pos:column="16">" ["<pos:position pos:line="423" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="423" pos:column="22">2<pos:position pos:line="423" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="423" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="423" pos:column="25"/></expr_stmt>
    <if pos:line="424" pos:column="5">if <condition pos:line="424" pos:column="8">(<expr><name pos:line="424" pos:column="9">stopReason<pos:position pos:line="424" pos:column="19"/></name> <operator pos:line="424" pos:column="20">!=<pos:position pos:line="424" pos:column="22"/></operator> <name pos:line="424" pos:column="23">NULL<pos:position pos:line="424" pos:column="27"/></name></expr>)<pos:position pos:line="424" pos:column="28"/></condition><then pos:line="424" pos:column="28"> <block pos:line="424" pos:column="29">{
        <expr_stmt><expr><call><name><name pos:line="425" pos:column="9">buf<pos:position pos:line="425" pos:column="12"/></name><operator pos:line="425" pos:column="12">.<pos:position pos:line="425" pos:column="13"/></operator><name pos:line="425" pos:column="13">append<pos:position pos:line="425" pos:column="19"/></name></name><argument_list pos:line="425" pos:column="19">(<argument><expr><literal type="string" pos:line="425" pos:column="20">"Stopped, reason:"<pos:position pos:line="425" pos:column="38"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="425" pos:column="40">16<pos:position pos:line="425" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="425" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="425" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="426" pos:column="9">buf<pos:position pos:line="426" pos:column="12"/></name><operator pos:line="426" pos:column="12">.<pos:position pos:line="426" pos:column="13"/></operator><name pos:line="426" pos:column="13">appendf<pos:position pos:line="426" pos:column="20"/></name></name><argument_list pos:line="426" pos:column="20">(<argument><expr><literal type="string" pos:line="426" pos:column="21">"%s"<pos:position pos:line="426" pos:column="25"/></literal></expr></argument>,<argument><expr><name pos:line="426" pos:column="26">stopReason<pos:position pos:line="426" pos:column="36"/></name></expr></argument>)<pos:position pos:line="426" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="426" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="427" pos:column="6"/></block></then></if>
    <if pos:line="428" pos:column="5">if <condition pos:line="428" pos:column="8">(<expr><name pos:line="428" pos:column="9">serverConn<pos:position pos:line="428" pos:column="19"/></name> <operator pos:line="428" pos:column="20">!=<pos:position pos:line="428" pos:column="22"/></operator> <name pos:line="428" pos:column="23">NULL<pos:position pos:line="428" pos:column="27"/></name></expr>)<pos:position pos:line="428" pos:column="28"/></condition><then pos:line="428" pos:column="28">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="429" pos:column="9">buf<pos:position pos:line="429" pos:column="12"/></name><operator pos:line="429" pos:column="12">.<pos:position pos:line="429" pos:column="13"/></operator><name pos:line="429" pos:column="13">appendf<pos:position pos:line="429" pos:column="20"/></name></name><argument_list pos:line="429" pos:column="20">(<argument><expr><literal type="string" pos:line="429" pos:column="21">" FD %d"<pos:position pos:line="429" pos:column="29"/></literal></expr></argument>, <argument><expr><name><name pos:line="429" pos:column="31">serverConn<pos:position pos:line="429" pos:column="41"/></name><operator pos:line="429" pos:column="41">-&gt;<pos:position pos:line="429" pos:column="46"/></operator><name pos:line="429" pos:column="43">fd<pos:position pos:line="429" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="429" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="429" pos:column="47"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name><name pos:line="430" pos:column="5">buf<pos:position pos:line="430" pos:column="8"/></name><operator pos:line="430" pos:column="8">.<pos:position pos:line="430" pos:column="9"/></operator><name pos:line="430" pos:column="9">appendf<pos:position pos:line="430" pos:column="16"/></name></name><argument_list pos:line="430" pos:column="16">(<argument><expr><literal type="string" pos:line="430" pos:column="17">" %s%u]"<pos:position pos:line="430" pos:column="25"/></literal></expr></argument>, <argument><expr><call><name><name pos:line="430" pos:column="27">id<pos:position pos:line="430" pos:column="29"/></name><operator pos:line="430" pos:column="29">.<pos:position pos:line="430" pos:column="30"/></operator><name pos:line="430" pos:column="30">prefix<pos:position pos:line="430" pos:column="36"/></name></name><argument_list pos:line="430" pos:column="36">()<pos:position pos:line="430" pos:column="38"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="430" pos:column="40">id<pos:position pos:line="430" pos:column="42"/></name><operator pos:line="430" pos:column="42">.<pos:position pos:line="430" pos:column="43"/></operator><name pos:line="430" pos:column="43">value<pos:position pos:line="430" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="430" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="430" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="431" pos:column="5">buf<pos:position pos:line="431" pos:column="8"/></name><operator pos:line="431" pos:column="8">.<pos:position pos:line="431" pos:column="9"/></operator><name pos:line="431" pos:column="9">terminate<pos:position pos:line="431" pos:column="18"/></name></name><argument_list pos:line="431" pos:column="18">()<pos:position pos:line="431" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="431" pos:column="21"/></expr_stmt>

    <return pos:line="433" pos:column="5">return <expr><call><name><name pos:line="433" pos:column="12">buf<pos:position pos:line="433" pos:column="15"/></name><operator pos:line="433" pos:column="15">.<pos:position pos:line="433" pos:column="16"/></operator><name pos:line="433" pos:column="16">content<pos:position pos:line="433" pos:column="23"/></name></name><argument_list pos:line="433" pos:column="23">()<pos:position pos:line="433" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="433" pos:column="26"/></return>
}<pos:position pos:line="434" pos:column="2"/></block></function>

<cpp:if pos:line="436" pos:column="1">#<cpp:directive pos:line="436" pos:column="2">if<pos:position pos:line="436" pos:column="4"/></cpp:directive> <expr><name pos:line="436" pos:column="5">USE_OPENSSL<pos:position pos:line="436" pos:column="16"/></name></expr></cpp:if>
<comment type="line" format="doxygen" pos:line="437" pos:column="1">/// CallDialer to allow use Downloader objects within PeerConnector class.</comment>
<class pos:line="438" pos:column="1">class <name pos:line="438" pos:column="7">PeerConnectorCertDownloaderDialer<pos:position pos:line="438" pos:column="40"/></name><super pos:line="438" pos:column="40">: <specifier pos:line="438" pos:column="42">public<pos:position pos:line="438" pos:column="48"/></specifier> <name><name pos:line="438" pos:column="49">Downloader<pos:position pos:line="438" pos:column="59"/></name><operator pos:line="438" pos:column="59">::<pos:position pos:line="438" pos:column="61"/></operator><name pos:line="438" pos:column="61">CbDialer<pos:position pos:line="438" pos:column="69"/></name></name></super>
<block pos:line="439" pos:column="1">{<private type="default" pos:line="439" pos:column="2">
<pos:position pos:line="439" pos:column="3"/></private><public pos:line="440" pos:column="1">public:
    <typedef pos:line="441" pos:column="5">typedef <function_decl><type><name pos:line="441" pos:column="13">void<pos:position pos:line="441" pos:column="17"/></name></type> (<name><name pos:line="441" pos:column="19">Security<pos:position pos:line="441" pos:column="27"/></name><operator pos:line="441" pos:column="27">::<pos:position pos:line="441" pos:column="29"/></operator><name pos:line="441" pos:column="29">PeerConnector<pos:position pos:line="441" pos:column="42"/></name><operator pos:line="441" pos:column="42">::<pos:position pos:line="441" pos:column="44"/></operator><modifier pos:line="441" pos:column="44">*<pos:position pos:line="441" pos:column="45"/></modifier><name pos:line="441" pos:column="45">Method<pos:position pos:line="441" pos:column="51"/></name></name>)<parameter_list pos:line="441" pos:column="52">(<parameter><decl><type><name pos:line="441" pos:column="53">SBuf<pos:position pos:line="441" pos:column="57"/></name> <modifier pos:line="441" pos:column="58">&amp;<pos:position pos:line="441" pos:column="63"/></modifier></type><name pos:line="441" pos:column="59">object<pos:position pos:line="441" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="441" pos:column="67">int<pos:position pos:line="441" pos:column="70"/></name></type> <name pos:line="441" pos:column="71">status<pos:position pos:line="441" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="441" pos:column="78"/></parameter_list>;<pos:position pos:line="441" pos:column="79"/></function_decl></typedef>

    <constructor><name pos:line="443" pos:column="5">PeerConnectorCertDownloaderDialer<pos:position pos:line="443" pos:column="38"/></name><parameter_list pos:line="443" pos:column="38">(<parameter><decl><type><name pos:line="443" pos:column="39">Method<pos:position pos:line="443" pos:column="45"/></name></type> <name pos:line="443" pos:column="46">method<pos:position pos:line="443" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="443" pos:column="54">Security<pos:position pos:line="443" pos:column="62"/></name><operator pos:line="443" pos:column="62">::<pos:position pos:line="443" pos:column="64"/></operator><name pos:line="443" pos:column="64">PeerConnector<pos:position pos:line="443" pos:column="77"/></name></name> <modifier pos:line="443" pos:column="78">*<pos:position pos:line="443" pos:column="79"/></modifier></type><name pos:line="443" pos:column="79">pc<pos:position pos:line="443" pos:column="81"/></name></decl></parameter>)<pos:position pos:line="443" pos:column="82"/></parameter_list><member_init_list pos:line="443" pos:column="82">:
        <call><name pos:line="444" pos:column="9">method_<pos:position pos:line="444" pos:column="16"/></name><argument_list pos:line="444" pos:column="16">(<argument><expr><name pos:line="444" pos:column="17">method<pos:position pos:line="444" pos:column="23"/></name></expr></argument>)<pos:position pos:line="444" pos:column="24"/></argument_list></call>,
        <call><name pos:line="445" pos:column="9">peerConnector_<pos:position pos:line="445" pos:column="23"/></name><argument_list pos:line="445" pos:column="23">(<argument><expr><name pos:line="445" pos:column="24">pc<pos:position pos:line="445" pos:column="26"/></name></expr></argument>)<pos:position pos:line="445" pos:column="27"/></argument_list></call> <pos:position pos:line="445" pos:column="28"/></member_init_list><block pos:line="445" pos:column="28">{}<pos:position pos:line="445" pos:column="30"/></block></constructor>

    <comment type="block" pos:line="447" pos:column="5">/* CallDialer API */</comment>
    <function><specifier pos:line="448" pos:column="5">virtual<pos:position pos:line="448" pos:column="12"/></specifier> <type><name pos:line="448" pos:column="13">bool<pos:position pos:line="448" pos:column="17"/></name></type> <name pos:line="448" pos:column="18">canDial<pos:position pos:line="448" pos:column="25"/></name><parameter_list pos:line="448" pos:column="25">(<parameter><decl><type><name pos:line="448" pos:column="26">AsyncCall<pos:position pos:line="448" pos:column="35"/></name> <modifier pos:line="448" pos:column="36">&amp;<pos:position pos:line="448" pos:column="41"/></modifier></type><name pos:line="448" pos:column="37">call<pos:position pos:line="448" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="448" pos:column="42"/></parameter_list> <block pos:line="448" pos:column="43">{ <return pos:line="448" pos:column="45">return <expr><call><name><name pos:line="448" pos:column="52">peerConnector_<pos:position pos:line="448" pos:column="66"/></name><operator pos:line="448" pos:column="66">.<pos:position pos:line="448" pos:column="67"/></operator><name pos:line="448" pos:column="67">valid<pos:position pos:line="448" pos:column="72"/></name></name><argument_list pos:line="448" pos:column="72">()<pos:position pos:line="448" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="448" pos:column="75"/></return> }<pos:position pos:line="448" pos:column="77"/></block></function>
    <function><specifier pos:line="449" pos:column="5">virtual<pos:position pos:line="449" pos:column="12"/></specifier> <type><name pos:line="449" pos:column="13">void<pos:position pos:line="449" pos:column="17"/></name></type> <name pos:line="449" pos:column="18">dial<pos:position pos:line="449" pos:column="22"/></name><parameter_list pos:line="449" pos:column="22">(<parameter><decl><type><name pos:line="449" pos:column="23">AsyncCall<pos:position pos:line="449" pos:column="32"/></name> <modifier pos:line="449" pos:column="33">&amp;<pos:position pos:line="449" pos:column="38"/></modifier></type><name pos:line="449" pos:column="34">call<pos:position pos:line="449" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="449" pos:column="39"/></parameter_list> <block pos:line="449" pos:column="40">{ <expr_stmt><expr><operator pos:line="449" pos:column="42">(<pos:position pos:line="449" pos:column="43"/></operator><operator pos:line="449" pos:column="43">(<pos:position pos:line="449" pos:column="44"/></operator><operator pos:line="449" pos:column="44">&amp;<pos:position pos:line="449" pos:column="49"/></operator><operator pos:line="449" pos:column="45">(<pos:position pos:line="449" pos:column="46"/></operator><operator pos:line="449" pos:column="46">*<pos:position pos:line="449" pos:column="47"/></operator><name pos:line="449" pos:column="47">peerConnector_<pos:position pos:line="449" pos:column="61"/></name><operator pos:line="449" pos:column="61">)<pos:position pos:line="449" pos:column="62"/></operator><operator pos:line="449" pos:column="62">)<pos:position pos:line="449" pos:column="63"/></operator><operator pos:line="449" pos:column="63">-&gt;*<pos:position pos:line="449" pos:column="69"/></operator><name pos:line="449" pos:column="66">method_<pos:position pos:line="449" pos:column="73"/></name><operator pos:line="449" pos:column="73">)<pos:position pos:line="449" pos:column="74"/></operator><operator pos:line="449" pos:column="74">(<pos:position pos:line="449" pos:column="75"/></operator><name pos:line="449" pos:column="75">object<pos:position pos:line="449" pos:column="81"/></name><operator pos:line="449" pos:column="81">,<pos:position pos:line="449" pos:column="82"/></operator> <name pos:line="449" pos:column="83">status<pos:position pos:line="449" pos:column="89"/></name><operator pos:line="449" pos:column="89">)<pos:position pos:line="449" pos:column="90"/></operator></expr>;<pos:position pos:line="449" pos:column="91"/></expr_stmt> }<pos:position pos:line="449" pos:column="93"/></block></function>
    <decl_stmt><decl><type><name pos:line="450" pos:column="5">Method<pos:position pos:line="450" pos:column="11"/></name></type> <name pos:line="450" pos:column="12">method_<pos:position pos:line="450" pos:column="19"/></name></decl>;<pos:position pos:line="450" pos:column="20"/></decl_stmt> <comment type="line" format="doxygen" pos:line="450" pos:column="21">///&lt; The Security::PeerConnector method to dial</comment>
    <decl_stmt><decl><type><name><name pos:line="451" pos:column="5">CbcPointer<pos:position pos:line="451" pos:column="15"/></name><argument_list type="generic" pos:line="451" pos:column="15">&lt;<argument><expr><name><name pos:line="451" pos:column="16">Security<pos:position pos:line="451" pos:column="24"/></name><operator pos:line="451" pos:column="24">::<pos:position pos:line="451" pos:column="26"/></operator><name pos:line="451" pos:column="26">PeerConnector<pos:position pos:line="451" pos:column="39"/></name></name></expr></argument>&gt;<pos:position pos:line="451" pos:column="43"/></argument_list></name></type> <name pos:line="451" pos:column="41">peerConnector_<pos:position pos:line="451" pos:column="55"/></name></decl>;<pos:position pos:line="451" pos:column="56"/></decl_stmt> <comment type="line" format="doxygen" pos:line="451" pos:column="57">///&lt; The Security::PeerConnector object</comment>
<pos:position pos:line="451" pos:column="97"/></public>}<pos:position pos:line="452" pos:column="2"/></block>;<pos:position pos:line="452" pos:column="3"/></class>

<function><type><name pos:line="454" pos:column="1">void<pos:position pos:line="454" pos:column="5"/></name></type>
<name><name pos:line="455" pos:column="1">Security<pos:position pos:line="455" pos:column="9"/></name><operator pos:line="455" pos:column="9">::<pos:position pos:line="455" pos:column="11"/></operator><name pos:line="455" pos:column="11">PeerConnector<pos:position pos:line="455" pos:column="24"/></name><operator pos:line="455" pos:column="24">::<pos:position pos:line="455" pos:column="26"/></operator><name pos:line="455" pos:column="26">startCertDownloading<pos:position pos:line="455" pos:column="46"/></name></name><parameter_list pos:line="455" pos:column="46">(<parameter><decl><type><name pos:line="455" pos:column="47">SBuf<pos:position pos:line="455" pos:column="51"/></name> <modifier pos:line="455" pos:column="52">&amp;<pos:position pos:line="455" pos:column="57"/></modifier></type><name pos:line="455" pos:column="53">url<pos:position pos:line="455" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="455" pos:column="57"/></parameter_list>
<block pos:line="456" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="457" pos:column="5">AsyncCall<pos:position pos:line="457" pos:column="14"/></name><operator pos:line="457" pos:column="14">::<pos:position pos:line="457" pos:column="16"/></operator><name pos:line="457" pos:column="16">Pointer<pos:position pos:line="457" pos:column="23"/></name></name></type> <name pos:line="457" pos:column="24">certCallback<pos:position pos:line="457" pos:column="36"/></name> <init pos:line="457" pos:column="37">= <expr><call><name pos:line="457" pos:column="39">asyncCall<pos:position pos:line="457" pos:column="48"/></name><argument_list pos:line="457" pos:column="48">(<argument><expr><literal type="number" pos:line="457" pos:column="49">81<pos:position pos:line="457" pos:column="51"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="457" pos:column="53">4<pos:position pos:line="457" pos:column="54"/></literal></expr></argument>,
                                      <argument><expr><literal type="string" pos:line="458" pos:column="39">"Security::PeerConnector::certDownloadingDone"<pos:position pos:line="458" pos:column="85"/></literal></expr></argument>,
                                      <argument><expr><call><name pos:line="459" pos:column="39">PeerConnectorCertDownloaderDialer<pos:position pos:line="459" pos:column="72"/></name><argument_list pos:line="459" pos:column="72">(<argument><expr><operator pos:line="459" pos:column="73">&amp;<pos:position pos:line="459" pos:column="78"/></operator><name><name pos:line="459" pos:column="74">Security<pos:position pos:line="459" pos:column="82"/></name><operator pos:line="459" pos:column="82">::<pos:position pos:line="459" pos:column="84"/></operator><name pos:line="459" pos:column="84">PeerConnector<pos:position pos:line="459" pos:column="97"/></name><operator pos:line="459" pos:column="97">::<pos:position pos:line="459" pos:column="99"/></operator><name pos:line="459" pos:column="99">certDownloadingDone<pos:position pos:line="459" pos:column="118"/></name></name></expr></argument>, <argument><expr><name pos:line="459" pos:column="120">this<pos:position pos:line="459" pos:column="124"/></name></expr></argument>)<pos:position pos:line="459" pos:column="125"/></argument_list></call></expr></argument>)<pos:position pos:line="459" pos:column="126"/></argument_list></call></expr></init></decl>;<pos:position pos:line="459" pos:column="127"/></decl_stmt>

    <decl_stmt><decl><type><specifier pos:line="461" pos:column="5">const<pos:position pos:line="461" pos:column="10"/></specifier> <name pos:line="461" pos:column="11">Downloader<pos:position pos:line="461" pos:column="21"/></name> <modifier pos:line="461" pos:column="22">*<pos:position pos:line="461" pos:column="23"/></modifier></type><name pos:line="461" pos:column="23">csd<pos:position pos:line="461" pos:column="26"/></name> <init pos:line="461" pos:column="27">= <expr><operator pos:line="461" pos:column="29">(<pos:position pos:line="461" pos:column="30"/></operator><ternary><condition><expr><name pos:line="461" pos:column="30">request<pos:position pos:line="461" pos:column="37"/></name></expr> ?<pos:position pos:line="461" pos:column="39"/></condition><then pos:line="461" pos:column="39"> <expr><cast type="dynamic" pos:line="461" pos:column="40">dynamic_cast<argument_list type="generic" pos:line="461" pos:column="52">&lt;<argument><expr><specifier pos:line="461" pos:column="53">const<pos:position pos:line="461" pos:column="58"/></specifier> <name pos:line="461" pos:column="59">Downloader<pos:position pos:line="461" pos:column="69"/></name><operator pos:line="461" pos:column="69">*<pos:position pos:line="461" pos:column="70"/></operator></expr></argument>&gt;<pos:position pos:line="461" pos:column="74"/></argument_list><argument_list pos:line="461" pos:column="71">(<argument><expr><call><name><name pos:line="461" pos:column="72">request<pos:position pos:line="461" pos:column="79"/></name><operator pos:line="461" pos:column="79">-&gt;<pos:position pos:line="461" pos:column="84"/></operator><name pos:line="461" pos:column="81">downloader<pos:position pos:line="461" pos:column="91"/></name><operator pos:line="461" pos:column="91">.<pos:position pos:line="461" pos:column="92"/></operator><name pos:line="461" pos:column="92">valid<pos:position pos:line="461" pos:column="97"/></name></name><argument_list pos:line="461" pos:column="97">()<pos:position pos:line="461" pos:column="99"/></argument_list></call></expr></argument>)<pos:position pos:line="461" pos:column="100"/></argument_list></cast></expr> <pos:position pos:line="461" pos:column="101"/></then><else pos:line="461" pos:column="101">: <expr><literal type="null" pos:line="461" pos:column="103">nullptr<pos:position pos:line="461" pos:column="110"/></literal></expr></else></ternary><operator pos:line="461" pos:column="110">)<pos:position pos:line="461" pos:column="111"/></operator></expr></init></decl>;<pos:position pos:line="461" pos:column="112"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="462" pos:column="5">Downloader<pos:position pos:line="462" pos:column="15"/></name> <modifier pos:line="462" pos:column="16">*<pos:position pos:line="462" pos:column="17"/></modifier></type><name pos:line="462" pos:column="17">dl<pos:position pos:line="462" pos:column="19"/></name> <init pos:line="462" pos:column="20">= <expr><operator pos:line="462" pos:column="22">new<pos:position pos:line="462" pos:column="25"/></operator> <call><name pos:line="462" pos:column="26">Downloader<pos:position pos:line="462" pos:column="36"/></name><argument_list pos:line="462" pos:column="36">(<argument><expr><name pos:line="462" pos:column="37">url<pos:position pos:line="462" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="462" pos:column="42">certCallback<pos:position pos:line="462" pos:column="54"/></name></expr></argument>, <argument><expr><name><name pos:line="462" pos:column="56">XactionInitiator<pos:position pos:line="462" pos:column="72"/></name><operator pos:line="462" pos:column="72">::<pos:position pos:line="462" pos:column="74"/></operator><name pos:line="462" pos:column="74">initCertFetcher<pos:position pos:line="462" pos:column="89"/></name></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="462" pos:column="91">csd<pos:position pos:line="462" pos:column="94"/></name></expr> ?<pos:position pos:line="462" pos:column="96"/></condition><then pos:line="462" pos:column="96"> <expr><call><name><name pos:line="462" pos:column="97">csd<pos:position pos:line="462" pos:column="100"/></name><operator pos:line="462" pos:column="100">-&gt;<pos:position pos:line="462" pos:column="105"/></operator><name pos:line="462" pos:column="102">nestedLevel<pos:position pos:line="462" pos:column="113"/></name></name><argument_list pos:line="462" pos:column="113">()<pos:position pos:line="462" pos:column="115"/></argument_list></call> <operator pos:line="462" pos:column="116">+<pos:position pos:line="462" pos:column="117"/></operator> <literal type="number" pos:line="462" pos:column="118">1<pos:position pos:line="462" pos:column="119"/></literal></expr> <pos:position pos:line="462" pos:column="120"/></then><else pos:line="462" pos:column="120">: <expr><literal type="number" pos:line="462" pos:column="122">1<pos:position pos:line="462" pos:column="123"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="462" pos:column="124"/></argument_list></call></expr></init></decl>;<pos:position pos:line="462" pos:column="125"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="463" pos:column="5">AsyncJob<pos:position pos:line="463" pos:column="13"/></name><operator pos:line="463" pos:column="13">::<pos:position pos:line="463" pos:column="15"/></operator><name pos:line="463" pos:column="15">Start<pos:position pos:line="463" pos:column="20"/></name></name><argument_list pos:line="463" pos:column="20">(<argument><expr><name pos:line="463" pos:column="21">dl<pos:position pos:line="463" pos:column="23"/></name></expr></argument>)<pos:position pos:line="463" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="463" pos:column="25"/></expr_stmt>
}<pos:position pos:line="464" pos:column="2"/></block></function>

<function><type><name pos:line="466" pos:column="1">void<pos:position pos:line="466" pos:column="5"/></name></type>
<name><name pos:line="467" pos:column="1">Security<pos:position pos:line="467" pos:column="9"/></name><operator pos:line="467" pos:column="9">::<pos:position pos:line="467" pos:column="11"/></operator><name pos:line="467" pos:column="11">PeerConnector<pos:position pos:line="467" pos:column="24"/></name><operator pos:line="467" pos:column="24">::<pos:position pos:line="467" pos:column="26"/></operator><name pos:line="467" pos:column="26">certDownloadingDone<pos:position pos:line="467" pos:column="45"/></name></name><parameter_list pos:line="467" pos:column="45">(<parameter><decl><type><name pos:line="467" pos:column="46">SBuf<pos:position pos:line="467" pos:column="50"/></name> <modifier pos:line="467" pos:column="51">&amp;<pos:position pos:line="467" pos:column="56"/></modifier></type><name pos:line="467" pos:column="52">obj<pos:position pos:line="467" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="467" pos:column="57">int<pos:position pos:line="467" pos:column="60"/></name></type> <name pos:line="467" pos:column="61">downloadStatus<pos:position pos:line="467" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="467" pos:column="76"/></parameter_list>
<block pos:line="468" pos:column="1">{
    <expr_stmt><expr><operator pos:line="469" pos:column="5">++<pos:position pos:line="469" pos:column="7"/></operator><name pos:line="469" pos:column="7">certsDownloads<pos:position pos:line="469" pos:column="21"/></name></expr>;<pos:position pos:line="469" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="470" pos:column="5">debugs<pos:position pos:line="470" pos:column="11"/></name><argument_list pos:line="470" pos:column="11">(<argument><expr><literal type="number" pos:line="470" pos:column="12">81<pos:position pos:line="470" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="470" pos:column="16">5<pos:position pos:line="470" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="470" pos:column="19">"Certificate downloading status: "<pos:position pos:line="470" pos:column="53"/></literal> <operator pos:line="470" pos:column="54">&lt;&lt;<pos:position pos:line="470" pos:column="62"/></operator> <name pos:line="470" pos:column="57">downloadStatus<pos:position pos:line="470" pos:column="71"/></name> <operator pos:line="470" pos:column="72">&lt;&lt;<pos:position pos:line="470" pos:column="80"/></operator> <literal type="string" pos:line="470" pos:column="75">" certificate size: "<pos:position pos:line="470" pos:column="96"/></literal> <operator pos:line="470" pos:column="97">&lt;&lt;<pos:position pos:line="470" pos:column="105"/></operator> <call><name><name pos:line="470" pos:column="100">obj<pos:position pos:line="470" pos:column="103"/></name><operator pos:line="470" pos:column="103">.<pos:position pos:line="470" pos:column="104"/></operator><name pos:line="470" pos:column="104">length<pos:position pos:line="470" pos:column="110"/></name></name><argument_list pos:line="470" pos:column="110">()<pos:position pos:line="470" pos:column="112"/></argument_list></call></expr></argument>)<pos:position pos:line="470" pos:column="113"/></argument_list></call></expr>;<pos:position pos:line="470" pos:column="114"/></expr_stmt>

    <comment type="line" pos:line="472" pos:column="5">// get ServerBio from SSL object</comment>
    <decl_stmt><decl><type><specifier pos:line="473" pos:column="5">const<pos:position pos:line="473" pos:column="10"/></specifier> <name pos:line="473" pos:column="11">int<pos:position pos:line="473" pos:column="14"/></name></type> <name pos:line="473" pos:column="15">fd<pos:position pos:line="473" pos:column="17"/></name> <init pos:line="473" pos:column="18">= <expr><call><name pos:line="473" pos:column="20">serverConnection<pos:position pos:line="473" pos:column="36"/></name><argument_list pos:line="473" pos:column="36">()<pos:position pos:line="473" pos:column="38"/></argument_list></call><operator pos:line="473" pos:column="38">-&gt;<pos:position pos:line="473" pos:column="43"/></operator><name pos:line="473" pos:column="40">fd<pos:position pos:line="473" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="473" pos:column="43"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="474" pos:column="5">Security<pos:position pos:line="474" pos:column="13"/></name><operator pos:line="474" pos:column="13">::<pos:position pos:line="474" pos:column="15"/></operator><name pos:line="474" pos:column="15">SessionPointer<pos:position pos:line="474" pos:column="29"/></name></name></type> <name pos:line="474" pos:column="30">session<pos:position pos:line="474" pos:column="37"/></name><argument_list pos:line="474" pos:column="37">(<argument><expr><name><name pos:line="474" pos:column="38">fd_table<pos:position pos:line="474" pos:column="46"/></name><index pos:line="474" pos:column="46">[<expr><name pos:line="474" pos:column="47">fd<pos:position pos:line="474" pos:column="49"/></name></expr>]<pos:position pos:line="474" pos:column="50"/></index></name><operator pos:line="474" pos:column="50">.<pos:position pos:line="474" pos:column="51"/></operator><name pos:line="474" pos:column="51">ssl<pos:position pos:line="474" pos:column="54"/></name></expr></argument>)<pos:position pos:line="474" pos:column="55"/></argument_list></decl>;<pos:position pos:line="474" pos:column="56"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="475" pos:column="5">BIO<pos:position pos:line="475" pos:column="8"/></name> <modifier pos:line="475" pos:column="9">*<pos:position pos:line="475" pos:column="10"/></modifier></type><name pos:line="475" pos:column="10">b<pos:position pos:line="475" pos:column="11"/></name> <init pos:line="475" pos:column="12">= <expr><call><name pos:line="475" pos:column="14">SSL_get_rbio<pos:position pos:line="475" pos:column="26"/></name><argument_list pos:line="475" pos:column="26">(<argument><expr><call><name><name pos:line="475" pos:column="27">session<pos:position pos:line="475" pos:column="34"/></name><operator pos:line="475" pos:column="34">.<pos:position pos:line="475" pos:column="35"/></operator><name pos:line="475" pos:column="35">get<pos:position pos:line="475" pos:column="38"/></name></name><argument_list pos:line="475" pos:column="38">()<pos:position pos:line="475" pos:column="40"/></argument_list></call></expr></argument>)<pos:position pos:line="475" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="475" pos:column="42"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="476" pos:column="5">Ssl<pos:position pos:line="476" pos:column="8"/></name><operator pos:line="476" pos:column="8">::<pos:position pos:line="476" pos:column="10"/></operator><name pos:line="476" pos:column="10">ServerBio<pos:position pos:line="476" pos:column="19"/></name></name> <modifier pos:line="476" pos:column="20">*<pos:position pos:line="476" pos:column="21"/></modifier></type><name pos:line="476" pos:column="21">srvBio<pos:position pos:line="476" pos:column="27"/></name> <init pos:line="476" pos:column="28">= <expr><cast type="static" pos:line="476" pos:column="30">static_cast<argument_list type="generic" pos:line="476" pos:column="41">&lt;<argument><expr><name><name pos:line="476" pos:column="42">Ssl<pos:position pos:line="476" pos:column="45"/></name><operator pos:line="476" pos:column="45">::<pos:position pos:line="476" pos:column="47"/></operator><name pos:line="476" pos:column="47">ServerBio<pos:position pos:line="476" pos:column="56"/></name></name> <operator pos:line="476" pos:column="57">*<pos:position pos:line="476" pos:column="58"/></operator></expr></argument>&gt;<pos:position pos:line="476" pos:column="62"/></argument_list><argument_list pos:line="476" pos:column="59">(<argument><expr><call><name pos:line="476" pos:column="60">BIO_get_data<pos:position pos:line="476" pos:column="72"/></name><argument_list pos:line="476" pos:column="72">(<argument><expr><name pos:line="476" pos:column="73">b<pos:position pos:line="476" pos:column="74"/></name></expr></argument>)<pos:position pos:line="476" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="476" pos:column="76"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="476" pos:column="77"/></decl_stmt>

    <comment type="line" pos:line="478" pos:column="5">// Parse Certificate. Assume that it is in DER format.</comment>
    <comment type="line" pos:line="479" pos:column="5">// According to RFC 4325:</comment>
    <comment type="line" pos:line="480" pos:column="5">//  The server must provide a DER encoded certificate or a collection</comment>
    <comment type="line" pos:line="481" pos:column="5">// collection of certificates in a "certs-only" CMS message.</comment>
    <comment type="line" pos:line="482" pos:column="5">//  The applications MUST accept DER encoded certificates and SHOULD</comment>
    <comment type="line" pos:line="483" pos:column="5">// be able to accept collection of certificates.</comment>
    <comment type="line" pos:line="484" pos:column="5">// TODO: support collection of certificates</comment>
    <decl_stmt><decl><type><specifier pos:line="485" pos:column="5">const<pos:position pos:line="485" pos:column="10"/></specifier> <name pos:line="485" pos:column="11">unsigned<pos:position pos:line="485" pos:column="19"/></name> <name pos:line="485" pos:column="20">char<pos:position pos:line="485" pos:column="24"/></name> <modifier pos:line="485" pos:column="25">*<pos:position pos:line="485" pos:column="26"/></modifier></type><name pos:line="485" pos:column="26">raw<pos:position pos:line="485" pos:column="29"/></name> <init pos:line="485" pos:column="30">= <expr><operator pos:line="485" pos:column="32">(<pos:position pos:line="485" pos:column="33"/></operator><specifier pos:line="485" pos:column="33">const<pos:position pos:line="485" pos:column="38"/></specifier> <name pos:line="485" pos:column="39">unsigned<pos:position pos:line="485" pos:column="47"/></name> <name pos:line="485" pos:column="48">char<pos:position pos:line="485" pos:column="52"/></name><operator pos:line="485" pos:column="52">*<pos:position pos:line="485" pos:column="53"/></operator><operator pos:line="485" pos:column="53">)<pos:position pos:line="485" pos:column="54"/></operator><call><name><name pos:line="485" pos:column="54">obj<pos:position pos:line="485" pos:column="57"/></name><operator pos:line="485" pos:column="57">.<pos:position pos:line="485" pos:column="58"/></operator><name pos:line="485" pos:column="58">rawContent<pos:position pos:line="485" pos:column="68"/></name></name><argument_list pos:line="485" pos:column="68">()<pos:position pos:line="485" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="485" pos:column="71"/></decl_stmt>
    <if pos:line="486" pos:column="5">if <condition pos:line="486" pos:column="8">(<decl><type><name pos:line="486" pos:column="9">X509<pos:position pos:line="486" pos:column="13"/></name> <modifier pos:line="486" pos:column="14">*<pos:position pos:line="486" pos:column="15"/></modifier></type><name pos:line="486" pos:column="15">cert<pos:position pos:line="486" pos:column="19"/></name> <init pos:line="486" pos:column="20">= <expr><call><name pos:line="486" pos:column="22">d2i_X509<pos:position pos:line="486" pos:column="30"/></name><argument_list pos:line="486" pos:column="30">(<argument><expr><name pos:line="486" pos:column="31">NULL<pos:position pos:line="486" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="486" pos:column="37">&amp;<pos:position pos:line="486" pos:column="42"/></operator><name pos:line="486" pos:column="38">raw<pos:position pos:line="486" pos:column="41"/></name></expr></argument>, <argument><expr><call><name><name pos:line="486" pos:column="43">obj<pos:position pos:line="486" pos:column="46"/></name><operator pos:line="486" pos:column="46">.<pos:position pos:line="486" pos:column="47"/></operator><name pos:line="486" pos:column="47">length<pos:position pos:line="486" pos:column="53"/></name></name><argument_list pos:line="486" pos:column="53">()<pos:position pos:line="486" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="486" pos:column="56"/></argument_list></call></expr></init></decl>)<pos:position pos:line="486" pos:column="57"/></condition><then pos:line="486" pos:column="57"> <block pos:line="486" pos:column="58">{
        <decl_stmt><decl><type><name pos:line="487" pos:column="9">char<pos:position pos:line="487" pos:column="13"/></name></type> <name><name pos:line="487" pos:column="14">buffer<pos:position pos:line="487" pos:column="20"/></name><index pos:line="487" pos:column="20">[<expr><literal type="number" pos:line="487" pos:column="21">1024<pos:position pos:line="487" pos:column="25"/></literal></expr>]<pos:position pos:line="487" pos:column="26"/></index></name></decl>;<pos:position pos:line="487" pos:column="27"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="488" pos:column="9">debugs<pos:position pos:line="488" pos:column="15"/></name><argument_list pos:line="488" pos:column="15">(<argument><expr><literal type="number" pos:line="488" pos:column="16">81<pos:position pos:line="488" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="488" pos:column="20">5<pos:position pos:line="488" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="488" pos:column="23">"Retrieved certificate: "<pos:position pos:line="488" pos:column="48"/></literal> <operator pos:line="488" pos:column="49">&lt;&lt;<pos:position pos:line="488" pos:column="57"/></operator> <call><name pos:line="488" pos:column="52">X509_NAME_oneline<pos:position pos:line="488" pos:column="69"/></name><argument_list pos:line="488" pos:column="69">(<argument><expr><call><name pos:line="488" pos:column="70">X509_get_subject_name<pos:position pos:line="488" pos:column="91"/></name><argument_list pos:line="488" pos:column="91">(<argument><expr><name pos:line="488" pos:column="92">cert<pos:position pos:line="488" pos:column="96"/></name></expr></argument>)<pos:position pos:line="488" pos:column="97"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="488" pos:column="99">buffer<pos:position pos:line="488" pos:column="105"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="488" pos:column="107">1024<pos:position pos:line="488" pos:column="111"/></literal></expr></argument>)<pos:position pos:line="488" pos:column="112"/></argument_list></call></expr></argument>)<pos:position pos:line="488" pos:column="113"/></argument_list></call></expr>;<pos:position pos:line="488" pos:column="114"/></expr_stmt>
        <decl_stmt><decl><type><specifier pos:line="489" pos:column="9">const<pos:position pos:line="489" pos:column="14"/></specifier> <name><name pos:line="489" pos:column="15">Security<pos:position pos:line="489" pos:column="23"/></name><operator pos:line="489" pos:column="23">::<pos:position pos:line="489" pos:column="25"/></operator><name pos:line="489" pos:column="25">CertList<pos:position pos:line="489" pos:column="33"/></name></name> <modifier pos:line="489" pos:column="34">&amp;<pos:position pos:line="489" pos:column="39"/></modifier></type><name pos:line="489" pos:column="35">certsList<pos:position pos:line="489" pos:column="44"/></name> <init pos:line="489" pos:column="45">= <expr><call><name><name pos:line="489" pos:column="47">srvBio<pos:position pos:line="489" pos:column="53"/></name><operator pos:line="489" pos:column="53">-&gt;<pos:position pos:line="489" pos:column="58"/></operator><name pos:line="489" pos:column="55">serverCertificatesIfAny<pos:position pos:line="489" pos:column="78"/></name></name><argument_list pos:line="489" pos:column="78">()<pos:position pos:line="489" pos:column="80"/></argument_list></call></expr></init></decl>;<pos:position pos:line="489" pos:column="81"/></decl_stmt>
        <if pos:line="490" pos:column="9">if <condition pos:line="490" pos:column="12">(<decl><type><specifier pos:line="490" pos:column="13">const<pos:position pos:line="490" pos:column="18"/></specifier> <name pos:line="490" pos:column="19">char<pos:position pos:line="490" pos:column="23"/></name> <modifier pos:line="490" pos:column="24">*<pos:position pos:line="490" pos:column="25"/></modifier></type><name pos:line="490" pos:column="25">issuerUri<pos:position pos:line="490" pos:column="34"/></name> <init pos:line="490" pos:column="35">= <expr><call><name><name pos:line="490" pos:column="37">Ssl<pos:position pos:line="490" pos:column="40"/></name><operator pos:line="490" pos:column="40">::<pos:position pos:line="490" pos:column="42"/></operator><name pos:line="490" pos:column="42">uriOfIssuerIfMissing<pos:position pos:line="490" pos:column="62"/></name></name><argument_list pos:line="490" pos:column="62">(<argument><expr><name pos:line="490" pos:column="63">cert<pos:position pos:line="490" pos:column="67"/></name></expr></argument>,  <argument><expr><name pos:line="490" pos:column="70">certsList<pos:position pos:line="490" pos:column="79"/></name></expr></argument>)<pos:position pos:line="490" pos:column="80"/></argument_list></call></expr></init></decl>)<pos:position pos:line="490" pos:column="81"/></condition><then pos:line="490" pos:column="81"> <block pos:line="490" pos:column="82">{
            <expr_stmt><expr><call><name><name pos:line="491" pos:column="13">urlsOfMissingCerts<pos:position pos:line="491" pos:column="31"/></name><operator pos:line="491" pos:column="31">.<pos:position pos:line="491" pos:column="32"/></operator><name pos:line="491" pos:column="32">push<pos:position pos:line="491" pos:column="36"/></name></name><argument_list pos:line="491" pos:column="36">(<argument><expr><call><name pos:line="491" pos:column="37">SBuf<pos:position pos:line="491" pos:column="41"/></name><argument_list pos:line="491" pos:column="41">(<argument><expr><name pos:line="491" pos:column="42">issuerUri<pos:position pos:line="491" pos:column="51"/></name></expr></argument>)<pos:position pos:line="491" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="491" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="491" pos:column="54"/></expr_stmt>
        }<pos:position pos:line="492" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name><name pos:line="493" pos:column="9">Ssl<pos:position pos:line="493" pos:column="12"/></name><operator pos:line="493" pos:column="12">::<pos:position pos:line="493" pos:column="14"/></operator><name pos:line="493" pos:column="14">SSL_add_untrusted_cert<pos:position pos:line="493" pos:column="36"/></name></name><argument_list pos:line="493" pos:column="36">(<argument><expr><call><name><name pos:line="493" pos:column="37">session<pos:position pos:line="493" pos:column="44"/></name><operator pos:line="493" pos:column="44">.<pos:position pos:line="493" pos:column="45"/></operator><name pos:line="493" pos:column="45">get<pos:position pos:line="493" pos:column="48"/></name></name><argument_list pos:line="493" pos:column="48">()<pos:position pos:line="493" pos:column="50"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="493" pos:column="52">cert<pos:position pos:line="493" pos:column="56"/></name></expr></argument>)<pos:position pos:line="493" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="493" pos:column="58"/></expr_stmt>
    }<pos:position pos:line="494" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="496" pos:column="5">// Check if there are URIs to download from and if yes start downloading</comment>
    <comment type="line" pos:line="497" pos:column="5">// the first in queue.</comment>
    <if pos:line="498" pos:column="5">if <condition pos:line="498" pos:column="8">(<expr><call><name><name pos:line="498" pos:column="9">urlsOfMissingCerts<pos:position pos:line="498" pos:column="27"/></name><operator pos:line="498" pos:column="27">.<pos:position pos:line="498" pos:column="28"/></operator><name pos:line="498" pos:column="28">size<pos:position pos:line="498" pos:column="32"/></name></name><argument_list pos:line="498" pos:column="32">()<pos:position pos:line="498" pos:column="34"/></argument_list></call> <operator pos:line="498" pos:column="35">&amp;&amp;<pos:position pos:line="498" pos:column="45"/></operator> <name pos:line="498" pos:column="38">certsDownloads<pos:position pos:line="498" pos:column="52"/></name> <operator pos:line="498" pos:column="53">&lt;=<pos:position pos:line="498" pos:column="58"/></operator> <name pos:line="498" pos:column="56">MaxCertsDownloads<pos:position pos:line="498" pos:column="73"/></name></expr>)<pos:position pos:line="498" pos:column="74"/></condition><then pos:line="498" pos:column="74"> <block pos:line="498" pos:column="75">{
        <expr_stmt><expr><call><name pos:line="499" pos:column="9">startCertDownloading<pos:position pos:line="499" pos:column="29"/></name><argument_list pos:line="499" pos:column="29">(<argument><expr><call><name><name pos:line="499" pos:column="30">urlsOfMissingCerts<pos:position pos:line="499" pos:column="48"/></name><operator pos:line="499" pos:column="48">.<pos:position pos:line="499" pos:column="49"/></operator><name pos:line="499" pos:column="49">front<pos:position pos:line="499" pos:column="54"/></name></name><argument_list pos:line="499" pos:column="54">()<pos:position pos:line="499" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="499" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="499" pos:column="58"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="500" pos:column="9">urlsOfMissingCerts<pos:position pos:line="500" pos:column="27"/></name><operator pos:line="500" pos:column="27">.<pos:position pos:line="500" pos:column="28"/></operator><name pos:line="500" pos:column="28">pop<pos:position pos:line="500" pos:column="31"/></name></name><argument_list pos:line="500" pos:column="31">()<pos:position pos:line="500" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="500" pos:column="34"/></expr_stmt>
        <return pos:line="501" pos:column="9">return;<pos:position pos:line="501" pos:column="16"/></return>
    }<pos:position pos:line="502" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="504" pos:column="5">srvBio<pos:position pos:line="504" pos:column="11"/></name><operator pos:line="504" pos:column="11">-&gt;<pos:position pos:line="504" pos:column="16"/></operator><name pos:line="504" pos:column="13">holdRead<pos:position pos:line="504" pos:column="21"/></name></name><argument_list pos:line="504" pos:column="21">(<argument><expr><literal type="boolean" pos:line="504" pos:column="22">false<pos:position pos:line="504" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="504" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="504" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="505" pos:column="5">Security<pos:position pos:line="505" pos:column="13"/></name><operator pos:line="505" pos:column="13">::<pos:position pos:line="505" pos:column="15"/></operator><name pos:line="505" pos:column="15">PeerConnector<pos:position pos:line="505" pos:column="28"/></name><operator pos:line="505" pos:column="28">::<pos:position pos:line="505" pos:column="30"/></operator><name pos:line="505" pos:column="30">NegotiateSsl<pos:position pos:line="505" pos:column="42"/></name></name><argument_list pos:line="505" pos:column="42">(<argument><expr><call><name pos:line="505" pos:column="43">serverConnection<pos:position pos:line="505" pos:column="59"/></name><argument_list pos:line="505" pos:column="59">()<pos:position pos:line="505" pos:column="61"/></argument_list></call><operator pos:line="505" pos:column="61">-&gt;<pos:position pos:line="505" pos:column="66"/></operator><name pos:line="505" pos:column="63">fd<pos:position pos:line="505" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="505" pos:column="67">this<pos:position pos:line="505" pos:column="71"/></name></expr></argument>)<pos:position pos:line="505" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="505" pos:column="73"/></expr_stmt>
}<pos:position pos:line="506" pos:column="2"/></block></function>

<function><type><name pos:line="508" pos:column="1">bool<pos:position pos:line="508" pos:column="5"/></name></type>
<name><name pos:line="509" pos:column="1">Security<pos:position pos:line="509" pos:column="9"/></name><operator pos:line="509" pos:column="9">::<pos:position pos:line="509" pos:column="11"/></operator><name pos:line="509" pos:column="11">PeerConnector<pos:position pos:line="509" pos:column="24"/></name><operator pos:line="509" pos:column="24">::<pos:position pos:line="509" pos:column="26"/></operator><name pos:line="509" pos:column="26">checkForMissingCertificates<pos:position pos:line="509" pos:column="53"/></name></name><parameter_list pos:line="509" pos:column="53">()<pos:position pos:line="509" pos:column="55"/></parameter_list>
<block pos:line="510" pos:column="1">{
    <comment type="line" pos:line="511" pos:column="5">// Check for nested SSL certificates downloads. For example when the</comment>
    <comment type="line" pos:line="512" pos:column="5">// certificate located in an SSL site which requires to download a</comment>
    <comment type="line" pos:line="513" pos:column="5">// a missing certificate (... from an SSL site which requires to ...).</comment>

    <decl_stmt><decl><type><specifier pos:line="515" pos:column="5">const<pos:position pos:line="515" pos:column="10"/></specifier> <name pos:line="515" pos:column="11">Downloader<pos:position pos:line="515" pos:column="21"/></name> <modifier pos:line="515" pos:column="22">*<pos:position pos:line="515" pos:column="23"/></modifier></type><name pos:line="515" pos:column="23">csd<pos:position pos:line="515" pos:column="26"/></name> <init pos:line="515" pos:column="27">= <expr><operator pos:line="515" pos:column="29">(<pos:position pos:line="515" pos:column="30"/></operator><ternary><condition><expr><name pos:line="515" pos:column="30">request<pos:position pos:line="515" pos:column="37"/></name></expr> ?<pos:position pos:line="515" pos:column="39"/></condition><then pos:line="515" pos:column="39"> <expr><call><name><name pos:line="515" pos:column="40">request<pos:position pos:line="515" pos:column="47"/></name><operator pos:line="515" pos:column="47">-&gt;<pos:position pos:line="515" pos:column="52"/></operator><name pos:line="515" pos:column="49">downloader<pos:position pos:line="515" pos:column="59"/></name><operator pos:line="515" pos:column="59">.<pos:position pos:line="515" pos:column="60"/></operator><name pos:line="515" pos:column="60">get<pos:position pos:line="515" pos:column="63"/></name></name><argument_list pos:line="515" pos:column="63">()<pos:position pos:line="515" pos:column="65"/></argument_list></call></expr> <pos:position pos:line="515" pos:column="66"/></then><else pos:line="515" pos:column="66">: <expr><literal type="null" pos:line="515" pos:column="68">nullptr<pos:position pos:line="515" pos:column="75"/></literal></expr></else></ternary><operator pos:line="515" pos:column="75">)<pos:position pos:line="515" pos:column="76"/></operator></expr></init></decl>;<pos:position pos:line="515" pos:column="77"/></decl_stmt>
    <if pos:line="516" pos:column="5">if <condition pos:line="516" pos:column="8">(<expr><name pos:line="516" pos:column="9">csd<pos:position pos:line="516" pos:column="12"/></name> <operator pos:line="516" pos:column="13">&amp;&amp;<pos:position pos:line="516" pos:column="23"/></operator> <call><name><name pos:line="516" pos:column="16">csd<pos:position pos:line="516" pos:column="19"/></name><operator pos:line="516" pos:column="19">-&gt;<pos:position pos:line="516" pos:column="24"/></operator><name pos:line="516" pos:column="21">nestedLevel<pos:position pos:line="516" pos:column="32"/></name></name><argument_list pos:line="516" pos:column="32">()<pos:position pos:line="516" pos:column="34"/></argument_list></call> <operator pos:line="516" pos:column="35">&gt;=<pos:position pos:line="516" pos:column="40"/></operator> <name pos:line="516" pos:column="38">MaxNestedDownloads<pos:position pos:line="516" pos:column="56"/></name></expr>)<pos:position pos:line="516" pos:column="57"/></condition><then pos:line="516" pos:column="57">
        <block type="pseudo"><return pos:line="517" pos:column="9">return <expr><literal type="boolean" pos:line="517" pos:column="16">false<pos:position pos:line="517" pos:column="21"/></literal></expr>;<pos:position pos:line="517" pos:column="22"/></return></block></then></if>

    <decl_stmt><decl><type><specifier pos:line="519" pos:column="5">const<pos:position pos:line="519" pos:column="10"/></specifier> <name pos:line="519" pos:column="11">int<pos:position pos:line="519" pos:column="14"/></name></type> <name pos:line="519" pos:column="15">fd<pos:position pos:line="519" pos:column="17"/></name> <init pos:line="519" pos:column="18">= <expr><call><name pos:line="519" pos:column="20">serverConnection<pos:position pos:line="519" pos:column="36"/></name><argument_list pos:line="519" pos:column="36">()<pos:position pos:line="519" pos:column="38"/></argument_list></call><operator pos:line="519" pos:column="38">-&gt;<pos:position pos:line="519" pos:column="43"/></operator><name pos:line="519" pos:column="40">fd<pos:position pos:line="519" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="519" pos:column="43"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="520" pos:column="5">Security<pos:position pos:line="520" pos:column="13"/></name><operator pos:line="520" pos:column="13">::<pos:position pos:line="520" pos:column="15"/></operator><name pos:line="520" pos:column="15">SessionPointer<pos:position pos:line="520" pos:column="29"/></name></name></type> <name pos:line="520" pos:column="30">session<pos:position pos:line="520" pos:column="37"/></name><argument_list pos:line="520" pos:column="37">(<argument><expr><name><name pos:line="520" pos:column="38">fd_table<pos:position pos:line="520" pos:column="46"/></name><index pos:line="520" pos:column="46">[<expr><name pos:line="520" pos:column="47">fd<pos:position pos:line="520" pos:column="49"/></name></expr>]<pos:position pos:line="520" pos:column="50"/></index></name><operator pos:line="520" pos:column="50">.<pos:position pos:line="520" pos:column="51"/></operator><name pos:line="520" pos:column="51">ssl<pos:position pos:line="520" pos:column="54"/></name></expr></argument>)<pos:position pos:line="520" pos:column="55"/></argument_list></decl>;<pos:position pos:line="520" pos:column="56"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="521" pos:column="5">BIO<pos:position pos:line="521" pos:column="8"/></name> <modifier pos:line="521" pos:column="9">*<pos:position pos:line="521" pos:column="10"/></modifier></type><name pos:line="521" pos:column="10">b<pos:position pos:line="521" pos:column="11"/></name> <init pos:line="521" pos:column="12">= <expr><call><name pos:line="521" pos:column="14">SSL_get_rbio<pos:position pos:line="521" pos:column="26"/></name><argument_list pos:line="521" pos:column="26">(<argument><expr><call><name><name pos:line="521" pos:column="27">session<pos:position pos:line="521" pos:column="34"/></name><operator pos:line="521" pos:column="34">.<pos:position pos:line="521" pos:column="35"/></operator><name pos:line="521" pos:column="35">get<pos:position pos:line="521" pos:column="38"/></name></name><argument_list pos:line="521" pos:column="38">()<pos:position pos:line="521" pos:column="40"/></argument_list></call></expr></argument>)<pos:position pos:line="521" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="521" pos:column="42"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="522" pos:column="5">Ssl<pos:position pos:line="522" pos:column="8"/></name><operator pos:line="522" pos:column="8">::<pos:position pos:line="522" pos:column="10"/></operator><name pos:line="522" pos:column="10">ServerBio<pos:position pos:line="522" pos:column="19"/></name></name> <modifier pos:line="522" pos:column="20">*<pos:position pos:line="522" pos:column="21"/></modifier></type><name pos:line="522" pos:column="21">srvBio<pos:position pos:line="522" pos:column="27"/></name> <init pos:line="522" pos:column="28">= <expr><cast type="static" pos:line="522" pos:column="30">static_cast<argument_list type="generic" pos:line="522" pos:column="41">&lt;<argument><expr><name><name pos:line="522" pos:column="42">Ssl<pos:position pos:line="522" pos:column="45"/></name><operator pos:line="522" pos:column="45">::<pos:position pos:line="522" pos:column="47"/></operator><name pos:line="522" pos:column="47">ServerBio<pos:position pos:line="522" pos:column="56"/></name></name> <operator pos:line="522" pos:column="57">*<pos:position pos:line="522" pos:column="58"/></operator></expr></argument>&gt;<pos:position pos:line="522" pos:column="62"/></argument_list><argument_list pos:line="522" pos:column="59">(<argument><expr><call><name pos:line="522" pos:column="60">BIO_get_data<pos:position pos:line="522" pos:column="72"/></name><argument_list pos:line="522" pos:column="72">(<argument><expr><name pos:line="522" pos:column="73">b<pos:position pos:line="522" pos:column="74"/></name></expr></argument>)<pos:position pos:line="522" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="522" pos:column="76"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="522" pos:column="77"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="523" pos:column="5">const<pos:position pos:line="523" pos:column="10"/></specifier> <name><name pos:line="523" pos:column="11">Security<pos:position pos:line="523" pos:column="19"/></name><operator pos:line="523" pos:column="19">::<pos:position pos:line="523" pos:column="21"/></operator><name pos:line="523" pos:column="21">CertList<pos:position pos:line="523" pos:column="29"/></name></name> <modifier pos:line="523" pos:column="30">&amp;<pos:position pos:line="523" pos:column="35"/></modifier></type><name pos:line="523" pos:column="31">certs<pos:position pos:line="523" pos:column="36"/></name> <init pos:line="523" pos:column="37">= <expr><call><name><name pos:line="523" pos:column="39">srvBio<pos:position pos:line="523" pos:column="45"/></name><operator pos:line="523" pos:column="45">-&gt;<pos:position pos:line="523" pos:column="50"/></operator><name pos:line="523" pos:column="47">serverCertificatesIfAny<pos:position pos:line="523" pos:column="70"/></name></name><argument_list pos:line="523" pos:column="70">()<pos:position pos:line="523" pos:column="72"/></argument_list></call></expr></init></decl>;<pos:position pos:line="523" pos:column="73"/></decl_stmt>

    <if pos:line="525" pos:column="5">if <condition pos:line="525" pos:column="8">(<expr><call><name><name pos:line="525" pos:column="9">certs<pos:position pos:line="525" pos:column="14"/></name><operator pos:line="525" pos:column="14">.<pos:position pos:line="525" pos:column="15"/></operator><name pos:line="525" pos:column="15">size<pos:position pos:line="525" pos:column="19"/></name></name><argument_list pos:line="525" pos:column="19">()<pos:position pos:line="525" pos:column="21"/></argument_list></call></expr>)<pos:position pos:line="525" pos:column="22"/></condition><then pos:line="525" pos:column="22"> <block pos:line="525" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="526" pos:column="9">debugs<pos:position pos:line="526" pos:column="15"/></name><argument_list pos:line="526" pos:column="15">(<argument><expr><literal type="number" pos:line="526" pos:column="16">83<pos:position pos:line="526" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="526" pos:column="20">5<pos:position pos:line="526" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="526" pos:column="23">"SSL server sent "<pos:position pos:line="526" pos:column="41"/></literal> <operator pos:line="526" pos:column="42">&lt;&lt;<pos:position pos:line="526" pos:column="50"/></operator> <call><name><name pos:line="526" pos:column="45">certs<pos:position pos:line="526" pos:column="50"/></name><operator pos:line="526" pos:column="50">.<pos:position pos:line="526" pos:column="51"/></operator><name pos:line="526" pos:column="51">size<pos:position pos:line="526" pos:column="55"/></name></name><argument_list pos:line="526" pos:column="55">()<pos:position pos:line="526" pos:column="57"/></argument_list></call> <operator pos:line="526" pos:column="58">&lt;&lt;<pos:position pos:line="526" pos:column="66"/></operator> <literal type="string" pos:line="526" pos:column="61">" certificates"<pos:position pos:line="526" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="526" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="526" pos:column="78"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="527" pos:column="9">Ssl<pos:position pos:line="527" pos:column="12"/></name><operator pos:line="527" pos:column="12">::<pos:position pos:line="527" pos:column="14"/></operator><name pos:line="527" pos:column="14">missingChainCertificatesUrls<pos:position pos:line="527" pos:column="42"/></name></name><argument_list pos:line="527" pos:column="42">(<argument><expr><name pos:line="527" pos:column="43">urlsOfMissingCerts<pos:position pos:line="527" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="527" pos:column="63">certs<pos:position pos:line="527" pos:column="68"/></name></expr></argument>)<pos:position pos:line="527" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="527" pos:column="70"/></expr_stmt>
        <if pos:line="528" pos:column="9">if <condition pos:line="528" pos:column="12">(<expr><call><name><name pos:line="528" pos:column="13">urlsOfMissingCerts<pos:position pos:line="528" pos:column="31"/></name><operator pos:line="528" pos:column="31">.<pos:position pos:line="528" pos:column="32"/></operator><name pos:line="528" pos:column="32">size<pos:position pos:line="528" pos:column="36"/></name></name><argument_list pos:line="528" pos:column="36">()<pos:position pos:line="528" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="528" pos:column="39"/></condition><then pos:line="528" pos:column="39"> <block pos:line="528" pos:column="40">{
            <expr_stmt><expr><call><name pos:line="529" pos:column="13">startCertDownloading<pos:position pos:line="529" pos:column="33"/></name><argument_list pos:line="529" pos:column="33">(<argument><expr><call><name><name pos:line="529" pos:column="34">urlsOfMissingCerts<pos:position pos:line="529" pos:column="52"/></name><operator pos:line="529" pos:column="52">.<pos:position pos:line="529" pos:column="53"/></operator><name pos:line="529" pos:column="53">front<pos:position pos:line="529" pos:column="58"/></name></name><argument_list pos:line="529" pos:column="58">()<pos:position pos:line="529" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="529" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="529" pos:column="62"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="530" pos:column="13">urlsOfMissingCerts<pos:position pos:line="530" pos:column="31"/></name><operator pos:line="530" pos:column="31">.<pos:position pos:line="530" pos:column="32"/></operator><name pos:line="530" pos:column="32">pop<pos:position pos:line="530" pos:column="35"/></name></name><argument_list pos:line="530" pos:column="35">()<pos:position pos:line="530" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="530" pos:column="38"/></expr_stmt>
            <return pos:line="531" pos:column="13">return <expr><literal type="boolean" pos:line="531" pos:column="20">true<pos:position pos:line="531" pos:column="24"/></literal></expr>;<pos:position pos:line="531" pos:column="25"/></return>
        }<pos:position pos:line="532" pos:column="10"/></block></then></if>
    }<pos:position pos:line="533" pos:column="6"/></block></then></if>

    <return pos:line="535" pos:column="5">return <expr><literal type="boolean" pos:line="535" pos:column="12">false<pos:position pos:line="535" pos:column="17"/></literal></expr>;<pos:position pos:line="535" pos:column="18"/></return>
}<pos:position pos:line="536" pos:column="2"/></block></function></block></then></if></block></function></unit>
