<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4893_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Http<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">One<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">RequestParser<pos:position pos:line="2" pos:column="25"/></name><operator pos:line="2" pos:column="25">::<pos:position pos:line="2" pos:column="27"/></operator><name pos:line="2" pos:column="27">doParse<pos:position pos:line="2" pos:column="34"/></name></name><parameter_list pos:line="2" pos:column="34">(<parameter><decl><type><specifier pos:line="2" pos:column="35">const<pos:position pos:line="2" pos:column="40"/></specifier> <name pos:line="2" pos:column="41">SBuf<pos:position pos:line="2" pos:column="45"/></name> <modifier pos:line="2" pos:column="46">&amp;<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="47">aBuf<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="52"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><name pos:line="4" pos:column="5">buf_<pos:position pos:line="4" pos:column="9"/></name> <operator pos:line="4" pos:column="10">=<pos:position pos:line="4" pos:column="11"/></operator> <name pos:line="4" pos:column="12">aBuf<pos:position pos:line="4" pos:column="16"/></name></expr>;<pos:position pos:line="4" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">debugs<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><literal type="number" pos:line="5" pos:column="12">74<pos:position pos:line="5" pos:column="14"/></literal></expr></argument>, <argument><expr><name pos:line="5" pos:column="16">DBG_DATA<pos:position pos:line="5" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="26">"Parse buf={length="<pos:position pos:line="5" pos:column="46"/></literal> <operator pos:line="5" pos:column="47">&lt;&lt;<pos:position pos:line="5" pos:column="55"/></operator> <call><name><name pos:line="5" pos:column="50">aBuf<pos:position pos:line="5" pos:column="54"/></name><operator pos:line="5" pos:column="54">.<pos:position pos:line="5" pos:column="55"/></operator><name pos:line="5" pos:column="55">length<pos:position pos:line="5" pos:column="61"/></name></name><argument_list pos:line="5" pos:column="61">()<pos:position pos:line="5" pos:column="63"/></argument_list></call> <operator pos:line="5" pos:column="64">&lt;&lt;<pos:position pos:line="5" pos:column="72"/></operator> <literal type="string" pos:line="5" pos:column="67">", data='"<pos:position pos:line="5" pos:column="77"/></literal> <operator pos:line="5" pos:column="78">&lt;&lt;<pos:position pos:line="5" pos:column="86"/></operator> <name pos:line="5" pos:column="81">aBuf<pos:position pos:line="5" pos:column="85"/></name> <operator pos:line="5" pos:column="86">&lt;&lt;<pos:position pos:line="5" pos:column="94"/></operator> <literal type="string" pos:line="5" pos:column="89">"'}"<pos:position pos:line="5" pos:column="93"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="95"/></expr_stmt>

    <comment type="line" pos:line="7" pos:column="5">// stage 1: locate the request-line</comment>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">parsingStage_<pos:position pos:line="8" pos:column="22"/></name> <operator pos:line="8" pos:column="23">==<pos:position pos:line="8" pos:column="25"/></operator> <name pos:line="8" pos:column="26">HTTP_PARSE_NONE<pos:position pos:line="8" pos:column="41"/></name></expr>)<pos:position pos:line="8" pos:column="42"/></condition><then pos:line="8" pos:column="42"> <block pos:line="8" pos:column="43">{
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">skipGarbageLines<pos:position pos:line="9" pos:column="25"/></name><argument_list pos:line="9" pos:column="25">()<pos:position pos:line="9" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="28"/></expr_stmt>

        <comment type="line" pos:line="11" pos:column="9">// if we hit something before EOS treat it as a message</comment>
        <if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><operator pos:line="12" pos:column="13">!<pos:position pos:line="12" pos:column="14"/></operator><call><name><name pos:line="12" pos:column="14">buf_<pos:position pos:line="12" pos:column="18"/></name><operator pos:line="12" pos:column="18">.<pos:position pos:line="12" pos:column="19"/></operator><name pos:line="12" pos:column="19">isEmpty<pos:position pos:line="12" pos:column="26"/></name></name><argument_list pos:line="12" pos:column="26">()<pos:position pos:line="12" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="29"/></condition><then pos:line="12" pos:column="29">
            <block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="13">parsingStage_<pos:position pos:line="13" pos:column="26"/></name> <operator pos:line="13" pos:column="27">=<pos:position pos:line="13" pos:column="28"/></operator> <name pos:line="13" pos:column="29">HTTP_PARSE_FIRST<pos:position pos:line="13" pos:column="45"/></name></expr>;<pos:position pos:line="13" pos:column="46"/></expr_stmt></block></then>
        <else pos:line="14" pos:column="9">else
            <block type="pseudo"><return pos:line="15" pos:column="13">return <expr><literal type="boolean" pos:line="15" pos:column="20">false<pos:position pos:line="15" pos:column="25"/></literal></expr>;<pos:position pos:line="15" pos:column="26"/></return></block></else></if>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="18" pos:column="5">// stage 2: parse the request-line</comment>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name pos:line="19" pos:column="9">parsingStage_<pos:position pos:line="19" pos:column="22"/></name> <operator pos:line="19" pos:column="23">==<pos:position pos:line="19" pos:column="25"/></operator> <name pos:line="19" pos:column="26">HTTP_PARSE_FIRST<pos:position pos:line="19" pos:column="42"/></name></expr>)<pos:position pos:line="19" pos:column="43"/></condition><then pos:line="19" pos:column="43"> <block pos:line="19" pos:column="44">{
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">PROF_start<pos:position pos:line="20" pos:column="19"/></name><argument_list pos:line="20" pos:column="19">(<argument><expr><name pos:line="20" pos:column="20">HttpParserParseReqLine<pos:position pos:line="20" pos:column="42"/></name></expr></argument>)<pos:position pos:line="20" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="44"/></expr_stmt>
        <decl_stmt><decl><type><specifier pos:line="21" pos:column="9">const<pos:position pos:line="21" pos:column="14"/></specifier> <name pos:line="21" pos:column="15">int<pos:position pos:line="21" pos:column="18"/></name></type> <name pos:line="21" pos:column="19">retcode<pos:position pos:line="21" pos:column="26"/></name> <init pos:line="21" pos:column="27">= <expr><call><name pos:line="21" pos:column="29">parseRequestFirstLine<pos:position pos:line="21" pos:column="50"/></name><argument_list pos:line="21" pos:column="50">()<pos:position pos:line="21" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="21" pos:column="53"/></decl_stmt>

        <comment type="line" pos:line="23" pos:column="9">// first-line (or a look-alike) found successfully.</comment>
        <if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">retcode<pos:position pos:line="24" pos:column="20"/></name> <operator pos:line="24" pos:column="21">&gt;<pos:position pos:line="24" pos:column="25"/></operator> <literal type="number" pos:line="24" pos:column="23">0<pos:position pos:line="24" pos:column="24"/></literal></expr>)<pos:position pos:line="24" pos:column="25"/></condition><then pos:line="24" pos:column="25"> <block pos:line="24" pos:column="26">{
            <expr_stmt><expr><name pos:line="25" pos:column="13">parsingStage_<pos:position pos:line="25" pos:column="26"/></name> <operator pos:line="25" pos:column="27">=<pos:position pos:line="25" pos:column="28"/></operator> <name pos:line="25" pos:column="29">HTTP_PARSE_MIME<pos:position pos:line="25" pos:column="44"/></name></expr>;<pos:position pos:line="25" pos:column="45"/></expr_stmt>
        }<pos:position pos:line="26" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="28" pos:column="9">debugs<pos:position pos:line="28" pos:column="15"/></name><argument_list pos:line="28" pos:column="15">(<argument><expr><literal type="number" pos:line="28" pos:column="16">74<pos:position pos:line="28" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="20">5<pos:position pos:line="28" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="23">"request-line: retval "<pos:position pos:line="28" pos:column="46"/></literal> <operator pos:line="28" pos:column="47">&lt;&lt;<pos:position pos:line="28" pos:column="55"/></operator> <name pos:line="28" pos:column="50">retcode<pos:position pos:line="28" pos:column="57"/></name> <operator pos:line="28" pos:column="58">&lt;&lt;<pos:position pos:line="28" pos:column="66"/></operator> <literal type="string" pos:line="28" pos:column="61">": line={"<pos:position pos:line="28" pos:column="71"/></literal> <operator pos:line="28" pos:column="72">&lt;&lt;<pos:position pos:line="28" pos:column="80"/></operator> <call><name><name pos:line="28" pos:column="75">aBuf<pos:position pos:line="28" pos:column="79"/></name><operator pos:line="28" pos:column="79">.<pos:position pos:line="28" pos:column="80"/></operator><name pos:line="28" pos:column="80">length<pos:position pos:line="28" pos:column="86"/></name></name><argument_list pos:line="28" pos:column="86">()<pos:position pos:line="28" pos:column="88"/></argument_list></call> <operator pos:line="28" pos:column="89">&lt;&lt;<pos:position pos:line="28" pos:column="97"/></operator> <literal type="string" pos:line="28" pos:column="92">", data='"<pos:position pos:line="28" pos:column="102"/></literal> <operator pos:line="28" pos:column="103">&lt;&lt;<pos:position pos:line="28" pos:column="111"/></operator> <name pos:line="28" pos:column="106">aBuf<pos:position pos:line="28" pos:column="110"/></name> <operator pos:line="28" pos:column="111">&lt;&lt;<pos:position pos:line="28" pos:column="119"/></operator> <literal type="string" pos:line="28" pos:column="114">"'}"<pos:position pos:line="28" pos:column="118"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="119"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="120"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">debugs<pos:position pos:line="29" pos:column="15"/></name><argument_list pos:line="29" pos:column="15">(<argument><expr><literal type="number" pos:line="29" pos:column="16">74<pos:position pos:line="29" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="20">5<pos:position pos:line="29" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="23">"request-line: method: "<pos:position pos:line="29" pos:column="47"/></literal> <operator pos:line="29" pos:column="48">&lt;&lt;<pos:position pos:line="29" pos:column="56"/></operator> <name pos:line="29" pos:column="51">method_<pos:position pos:line="29" pos:column="58"/></name></expr></argument>)<pos:position pos:line="29" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="60"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">debugs<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><literal type="number" pos:line="30" pos:column="16">74<pos:position pos:line="30" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="20">5<pos:position pos:line="30" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="23">"request-line: url: "<pos:position pos:line="30" pos:column="44"/></literal> <operator pos:line="30" pos:column="45">&lt;&lt;<pos:position pos:line="30" pos:column="53"/></operator> <name pos:line="30" pos:column="48">uri_<pos:position pos:line="30" pos:column="52"/></name></expr></argument>)<pos:position pos:line="30" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="54"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="31" pos:column="9">debugs<pos:position pos:line="31" pos:column="15"/></name><argument_list pos:line="31" pos:column="15">(<argument><expr><literal type="number" pos:line="31" pos:column="16">74<pos:position pos:line="31" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="20">5<pos:position pos:line="31" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="23">"request-line: proto: "<pos:position pos:line="31" pos:column="46"/></literal> <operator pos:line="31" pos:column="47">&lt;&lt;<pos:position pos:line="31" pos:column="55"/></operator> <name pos:line="31" pos:column="50">msgProtocol_<pos:position pos:line="31" pos:column="62"/></name></expr></argument>)<pos:position pos:line="31" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="64"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">debugs<pos:position pos:line="32" pos:column="15"/></name><argument_list pos:line="32" pos:column="15">(<argument><expr><literal type="number" pos:line="32" pos:column="16">74<pos:position pos:line="32" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="20">5<pos:position pos:line="32" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="23">"Parser: bytes processed="<pos:position pos:line="32" pos:column="49"/></literal> <operator pos:line="32" pos:column="50">&lt;&lt;<pos:position pos:line="32" pos:column="58"/></operator> <operator pos:line="32" pos:column="53">(<pos:position pos:line="32" pos:column="54"/></operator><call><name><name pos:line="32" pos:column="54">aBuf<pos:position pos:line="32" pos:column="58"/></name><operator pos:line="32" pos:column="58">.<pos:position pos:line="32" pos:column="59"/></operator><name pos:line="32" pos:column="59">length<pos:position pos:line="32" pos:column="65"/></name></name><argument_list pos:line="32" pos:column="65">()<pos:position pos:line="32" pos:column="67"/></argument_list></call><operator pos:line="32" pos:column="67">-<pos:position pos:line="32" pos:column="68"/></operator><call><name><name pos:line="32" pos:column="68">buf_<pos:position pos:line="32" pos:column="72"/></name><operator pos:line="32" pos:column="72">.<pos:position pos:line="32" pos:column="73"/></operator><name pos:line="32" pos:column="73">length<pos:position pos:line="32" pos:column="79"/></name></name><argument_list pos:line="32" pos:column="79">()<pos:position pos:line="32" pos:column="81"/></argument_list></call><operator pos:line="32" pos:column="81">)<pos:position pos:line="32" pos:column="82"/></operator></expr></argument>)<pos:position pos:line="32" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="84"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="33" pos:column="9">PROF_stop<pos:position pos:line="33" pos:column="18"/></name><argument_list pos:line="33" pos:column="18">(<argument><expr><name pos:line="33" pos:column="19">HttpParserParseReqLine<pos:position pos:line="33" pos:column="41"/></name></expr></argument>)<pos:position pos:line="33" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="43"/></expr_stmt>

        <comment type="line" pos:line="35" pos:column="9">// syntax errors already</comment>
        <if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><name pos:line="36" pos:column="13">retcode<pos:position pos:line="36" pos:column="20"/></name> <operator pos:line="36" pos:column="21">&lt;<pos:position pos:line="36" pos:column="25"/></operator> <literal type="number" pos:line="36" pos:column="23">0<pos:position pos:line="36" pos:column="24"/></literal></expr>)<pos:position pos:line="36" pos:column="25"/></condition><then pos:line="36" pos:column="25"> <block pos:line="36" pos:column="26">{
            <expr_stmt><expr><name pos:line="37" pos:column="13">parsingStage_<pos:position pos:line="37" pos:column="26"/></name> <operator pos:line="37" pos:column="27">=<pos:position pos:line="37" pos:column="28"/></operator> <name pos:line="37" pos:column="29">HTTP_PARSE_DONE<pos:position pos:line="37" pos:column="44"/></name></expr>;<pos:position pos:line="37" pos:column="45"/></expr_stmt>
            <return pos:line="38" pos:column="13">return <expr><literal type="boolean" pos:line="38" pos:column="20">false<pos:position pos:line="38" pos:column="25"/></literal></expr>;<pos:position pos:line="38" pos:column="26"/></return>
        }<pos:position pos:line="39" pos:column="10"/></block></then></if>
    }<pos:position pos:line="40" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="42" pos:column="5">// stage 3: locate the mime header block</comment>
    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><name pos:line="43" pos:column="9">parsingStage_<pos:position pos:line="43" pos:column="22"/></name> <operator pos:line="43" pos:column="23">==<pos:position pos:line="43" pos:column="25"/></operator> <name pos:line="43" pos:column="26">HTTP_PARSE_MIME<pos:position pos:line="43" pos:column="41"/></name></expr>)<pos:position pos:line="43" pos:column="42"/></condition><then pos:line="43" pos:column="42"> <block pos:line="43" pos:column="43">{
        <comment type="line" pos:line="44" pos:column="9">// HTTP/1.x request-line is valid and parsing completed.</comment>
        <if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><operator pos:line="45" pos:column="13">!<pos:position pos:line="45" pos:column="14"/></operator><call><name pos:line="45" pos:column="14">grabMimeBlock<pos:position pos:line="45" pos:column="27"/></name><argument_list pos:line="45" pos:column="27">(<argument><expr><literal type="string" pos:line="45" pos:column="28">"Request"<pos:position pos:line="45" pos:column="37"/></literal></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="39">Config<pos:position pos:line="45" pos:column="45"/></name><operator pos:line="45" pos:column="45">.<pos:position pos:line="45" pos:column="46"/></operator><name pos:line="45" pos:column="46">maxRequestHeaderSize<pos:position pos:line="45" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="68"/></condition><then pos:line="45" pos:column="68"> <block pos:line="45" pos:column="69">{
            <if pos:line="46" pos:column="13">if <condition pos:line="46" pos:column="16">(<expr><name pos:line="46" pos:column="17">parseStatusCode<pos:position pos:line="46" pos:column="32"/></name> <operator pos:line="46" pos:column="33">==<pos:position pos:line="46" pos:column="35"/></operator> <name><name pos:line="46" pos:column="36">Http<pos:position pos:line="46" pos:column="40"/></name><operator pos:line="46" pos:column="40">::<pos:position pos:line="46" pos:column="42"/></operator><name pos:line="46" pos:column="42">scHeaderTooLarge<pos:position pos:line="46" pos:column="58"/></name></name></expr>)<pos:position pos:line="46" pos:column="59"/></condition><then pos:line="46" pos:column="59">
                <block type="pseudo"><expr_stmt><expr><name pos:line="47" pos:column="17">parseStatusCode<pos:position pos:line="47" pos:column="32"/></name> <operator pos:line="47" pos:column="33">=<pos:position pos:line="47" pos:column="34"/></operator> <name><name pos:line="47" pos:column="35">Http<pos:position pos:line="47" pos:column="39"/></name><operator pos:line="47" pos:column="39">::<pos:position pos:line="47" pos:column="41"/></operator><name pos:line="47" pos:column="41">scRequestHeaderFieldsTooLarge<pos:position pos:line="47" pos:column="70"/></name></name></expr>;<pos:position pos:line="47" pos:column="71"/></expr_stmt></block></then></if>
            <return pos:line="48" pos:column="13">return <expr><literal type="boolean" pos:line="48" pos:column="20">false<pos:position pos:line="48" pos:column="25"/></literal></expr>;<pos:position pos:line="48" pos:column="26"/></return>
        }<pos:position pos:line="49" pos:column="10"/></block></then></if>
    }<pos:position pos:line="50" pos:column="6"/></block></then></if>

    <return pos:line="52" pos:column="5">return <expr><operator pos:line="52" pos:column="12">!<pos:position pos:line="52" pos:column="13"/></operator><call><name pos:line="52" pos:column="13">needsMoreData<pos:position pos:line="52" pos:column="26"/></name><argument_list pos:line="52" pos:column="26">()<pos:position pos:line="52" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="29"/></return>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
