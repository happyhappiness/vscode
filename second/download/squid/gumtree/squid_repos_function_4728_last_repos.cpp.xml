<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4728_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">SBuf<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">startsWith<pos:position pos:line="2" pos:column="17"/></name></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><specifier pos:line="2" pos:column="18">const<pos:position pos:line="2" pos:column="23"/></specifier> <name pos:line="2" pos:column="24">SBuf<pos:position pos:line="2" pos:column="28"/></name> <modifier pos:line="2" pos:column="29">&amp;<pos:position pos:line="2" pos:column="34"/></modifier></type><name pos:line="2" pos:column="30">S<pos:position pos:line="2" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="33">const<pos:position pos:line="2" pos:column="38"/></specifier> <name pos:line="2" pos:column="39">SBufCaseSensitive<pos:position pos:line="2" pos:column="56"/></name></type> <name pos:line="2" pos:column="57">isCaseSensitive<pos:position pos:line="2" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="73"/></parameter_list> <specifier pos:line="2" pos:column="74">const<pos:position pos:line="2" pos:column="79"/></specifier>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">24<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">8<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="19">id<pos:position pos:line="4" pos:column="21"/></name> <operator pos:line="4" pos:column="22">&lt;&lt;<pos:position pos:line="4" pos:column="30"/></operator> <literal type="string" pos:line="4" pos:column="25">" startsWith "<pos:position pos:line="4" pos:column="39"/></literal> <operator pos:line="4" pos:column="40">&lt;&lt;<pos:position pos:line="4" pos:column="48"/></operator> <name><name pos:line="4" pos:column="43">S<pos:position pos:line="4" pos:column="44"/></name><operator pos:line="4" pos:column="44">.<pos:position pos:line="4" pos:column="45"/></operator><name pos:line="4" pos:column="45">id<pos:position pos:line="4" pos:column="47"/></name></name> <operator pos:line="4" pos:column="48">&lt;&lt;<pos:position pos:line="4" pos:column="56"/></operator> <literal type="string" pos:line="4" pos:column="51">", caseSensitive: "<pos:position pos:line="4" pos:column="70"/></literal> <operator pos:line="4" pos:column="71">&lt;&lt;<pos:position pos:line="4" pos:column="79"/></operator>
           <name pos:line="5" pos:column="12">isCaseSensitive<pos:position pos:line="5" pos:column="27"/></name></expr></argument>)<pos:position pos:line="5" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="29"/></expr_stmt>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><call><name pos:line="6" pos:column="9">length<pos:position pos:line="6" pos:column="15"/></name><argument_list pos:line="6" pos:column="15">()<pos:position pos:line="6" pos:column="17"/></argument_list></call> <operator pos:line="6" pos:column="18">&lt;<pos:position pos:line="6" pos:column="22"/></operator> <call><name><name pos:line="6" pos:column="20">S<pos:position pos:line="6" pos:column="21"/></name><operator pos:line="6" pos:column="21">.<pos:position pos:line="6" pos:column="22"/></operator><name pos:line="6" pos:column="22">length<pos:position pos:line="6" pos:column="28"/></name></name><argument_list pos:line="6" pos:column="28">()<pos:position pos:line="6" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="31"/></condition><then pos:line="6" pos:column="31"> <block pos:line="6" pos:column="32">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">debugs<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><literal type="number" pos:line="7" pos:column="16">24<pos:position pos:line="7" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="20">8<pos:position pos:line="7" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="23">"no, too short"<pos:position pos:line="7" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="8" pos:column="9">++<pos:position pos:line="8" pos:column="11"/></operator><name><name pos:line="8" pos:column="11">stats<pos:position pos:line="8" pos:column="16"/></name><operator pos:line="8" pos:column="16">.<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="17">compareFast<pos:position pos:line="8" pos:column="28"/></name></name></expr>;<pos:position pos:line="8" pos:column="29"/></expr_stmt>
        <return pos:line="9" pos:column="9">return <expr><literal type="boolean" pos:line="9" pos:column="16">false<pos:position pos:line="9" pos:column="21"/></literal></expr>;<pos:position pos:line="9" pos:column="22"/></return>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>
    <return pos:line="11" pos:column="5">return <expr><operator pos:line="11" pos:column="12">(<pos:position pos:line="11" pos:column="13"/></operator><call><name pos:line="11" pos:column="13">compare<pos:position pos:line="11" pos:column="20"/></name><argument_list pos:line="11" pos:column="20">(<argument><expr><name pos:line="11" pos:column="21">S<pos:position pos:line="11" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="24">isCaseSensitive<pos:position pos:line="11" pos:column="39"/></name></expr></argument>, <argument><expr><call><name><name pos:line="11" pos:column="41">S<pos:position pos:line="11" pos:column="42"/></name><operator pos:line="11" pos:column="42">.<pos:position pos:line="11" pos:column="43"/></operator><name pos:line="11" pos:column="43">length<pos:position pos:line="11" pos:column="49"/></name></name><argument_list pos:line="11" pos:column="49">()<pos:position pos:line="11" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="52"/></argument_list></call> <operator pos:line="11" pos:column="53">==<pos:position pos:line="11" pos:column="55"/></operator> <literal type="number" pos:line="11" pos:column="56">0<pos:position pos:line="11" pos:column="57"/></literal><operator pos:line="11" pos:column="57">)<pos:position pos:line="11" pos:column="58"/></operator></expr>;<pos:position pos:line="11" pos:column="59"/></return>
}<pos:position pos:line="12" pos:column="2"/></block></function></unit>
