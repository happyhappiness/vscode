<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5093_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Comm<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">SetSelect<pos:position pos:line="2" pos:column="16"/></name></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name pos:line="2" pos:column="17">int<pos:position pos:line="2" pos:column="20"/></name></type> <name pos:line="2" pos:column="21">fd<pos:position pos:line="2" pos:column="23"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="25">unsigned<pos:position pos:line="2" pos:column="33"/></name> <name pos:line="2" pos:column="34">int<pos:position pos:line="2" pos:column="37"/></name></type> <name pos:line="2" pos:column="38">type<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="44">PF<pos:position pos:line="2" pos:column="46"/></name> <modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier></type> <name pos:line="2" pos:column="49">handler<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="58">void<pos:position pos:line="2" pos:column="62"/></name> <modifier pos:line="2" pos:column="63">*<pos:position pos:line="2" pos:column="64"/></modifier></type><name pos:line="2" pos:column="64">client_data<pos:position pos:line="2" pos:column="75"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="77">time_t<pos:position pos:line="2" pos:column="83"/></name></type> <name pos:line="2" pos:column="84">timeout<pos:position pos:line="2" pos:column="91"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="92"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">fd<pos:position pos:line="4" pos:column="14"/></name> <operator pos:line="4" pos:column="15">&gt;=<pos:position pos:line="4" pos:column="20"/></operator> <literal type="number" pos:line="4" pos:column="18">0<pos:position pos:line="4" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">debugs<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><literal type="number" pos:line="5" pos:column="12">5<pos:position pos:line="5" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="15">5<pos:position pos:line="5" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="5" pos:column="18">HERE<pos:position pos:line="5" pos:column="22"/></name> <operator pos:line="5" pos:column="23">&lt;&lt;<pos:position pos:line="5" pos:column="31"/></operator> <literal type="string" pos:line="5" pos:column="26">"FD "<pos:position pos:line="5" pos:column="31"/></literal> <operator pos:line="5" pos:column="32">&lt;&lt;<pos:position pos:line="5" pos:column="40"/></operator> <name pos:line="5" pos:column="35">fd<pos:position pos:line="5" pos:column="37"/></name> <operator pos:line="5" pos:column="38">&lt;&lt;<pos:position pos:line="5" pos:column="46"/></operator> <literal type="string" pos:line="5" pos:column="41">", type="<pos:position pos:line="5" pos:column="50"/></literal> <operator pos:line="5" pos:column="51">&lt;&lt;<pos:position pos:line="5" pos:column="59"/></operator> <name pos:line="5" pos:column="54">type<pos:position pos:line="5" pos:column="58"/></name> <operator pos:line="5" pos:column="59">&lt;&lt;<pos:position pos:line="5" pos:column="67"/></operator>
           <literal type="string" pos:line="6" pos:column="12">", handler="<pos:position pos:line="6" pos:column="24"/></literal> <operator pos:line="6" pos:column="25">&lt;&lt;<pos:position pos:line="6" pos:column="33"/></operator> <name pos:line="6" pos:column="28">handler<pos:position pos:line="6" pos:column="35"/></name> <operator pos:line="6" pos:column="36">&lt;&lt;<pos:position pos:line="6" pos:column="44"/></operator> <literal type="string" pos:line="6" pos:column="39">", client_data="<pos:position pos:line="6" pos:column="55"/></literal> <operator pos:line="6" pos:column="56">&lt;&lt;<pos:position pos:line="6" pos:column="64"/></operator> <name pos:line="6" pos:column="59">client_data<pos:position pos:line="6" pos:column="70"/></name> <operator pos:line="6" pos:column="71">&lt;&lt;<pos:position pos:line="6" pos:column="79"/></operator>
           <literal type="string" pos:line="7" pos:column="12">", timeout="<pos:position pos:line="7" pos:column="24"/></literal> <operator pos:line="7" pos:column="25">&lt;&lt;<pos:position pos:line="7" pos:column="33"/></operator> <name pos:line="7" pos:column="28">timeout<pos:position pos:line="7" pos:column="35"/></name></expr></argument>)<pos:position pos:line="7" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="37"/></expr_stmt>

    <comment type="block" pos:line="9" pos:column="5">/* POLLIN/POLLOUT are defined in &lt;sys/poll.h&gt; */</comment>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">fde<pos:position pos:line="10" pos:column="8"/></name> <modifier pos:line="10" pos:column="9">*<pos:position pos:line="10" pos:column="10"/></modifier></type><name pos:line="10" pos:column="10">F<pos:position pos:line="10" pos:column="11"/></name> <init pos:line="10" pos:column="12">= <expr><operator pos:line="10" pos:column="14">&amp;<pos:position pos:line="10" pos:column="19"/></operator><name><name pos:line="10" pos:column="15">fd_table<pos:position pos:line="10" pos:column="23"/></name><index pos:line="10" pos:column="23">[<expr><name pos:line="10" pos:column="24">fd<pos:position pos:line="10" pos:column="26"/></name></expr>]<pos:position pos:line="10" pos:column="27"/></index></name></expr></init></decl>;<pos:position pos:line="10" pos:column="28"/></decl_stmt>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">!<pos:position pos:line="11" pos:column="10"/></operator><name><name pos:line="11" pos:column="10">F<pos:position pos:line="11" pos:column="11"/></name><operator pos:line="11" pos:column="11">-&gt;<pos:position pos:line="11" pos:column="16"/></operator><name pos:line="11" pos:column="13">flags<pos:position pos:line="11" pos:column="18"/></name><operator pos:line="11" pos:column="18">.<pos:position pos:line="11" pos:column="19"/></operator><name pos:line="11" pos:column="19">open<pos:position pos:line="11" pos:column="23"/></name></name></expr>)<pos:position pos:line="11" pos:column="24"/></condition><then pos:line="11" pos:column="24"> <block pos:line="11" pos:column="25">{
        <comment type="block" pos:line="12" pos:column="9">/* remove from poll set */</comment>
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">comm_update_fd<pos:position pos:line="13" pos:column="23"/></name><argument_list pos:line="13" pos:column="23">( <argument><expr><name pos:line="13" pos:column="25">fd<pos:position pos:line="13" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="29">POLLREMOVE<pos:position pos:line="13" pos:column="39"/></name></expr></argument> )<pos:position pos:line="13" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="14" pos:column="9">devpoll_state<pos:position pos:line="14" pos:column="22"/></name><index pos:line="14" pos:column="22">[<expr><name pos:line="14" pos:column="23">fd<pos:position pos:line="14" pos:column="25"/></name></expr>]<pos:position pos:line="14" pos:column="26"/></index></name><operator pos:line="14" pos:column="26">.<pos:position pos:line="14" pos:column="27"/></operator><name pos:line="14" pos:column="27">state<pos:position pos:line="14" pos:column="32"/></name> <operator pos:line="14" pos:column="33">=<pos:position pos:line="14" pos:column="34"/></operator> <literal type="number" pos:line="14" pos:column="35">0<pos:position pos:line="14" pos:column="36"/></literal></expr>;<pos:position pos:line="14" pos:column="37"/></expr_stmt>
        <return pos:line="15" pos:column="9">return;<pos:position pos:line="15" pos:column="16"/></return>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="18" pos:column="5">pollfd_events_t<pos:position pos:line="18" pos:column="20"/></name></type> <name pos:line="18" pos:column="21">state_old<pos:position pos:line="18" pos:column="30"/></name> <init pos:line="18" pos:column="31">= <expr><name><name pos:line="18" pos:column="33">devpoll_state<pos:position pos:line="18" pos:column="46"/></name><index pos:line="18" pos:column="46">[<expr><name pos:line="18" pos:column="47">fd<pos:position pos:line="18" pos:column="49"/></name></expr>]<pos:position pos:line="18" pos:column="50"/></index></name><operator pos:line="18" pos:column="50">.<pos:position pos:line="18" pos:column="51"/></operator><name pos:line="18" pos:column="51">state<pos:position pos:line="18" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="18" pos:column="57"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="19" pos:column="5">pollfd_events_t<pos:position pos:line="19" pos:column="20"/></name></type> <name pos:line="19" pos:column="21">state_new<pos:position pos:line="19" pos:column="30"/></name> <init pos:line="19" pos:column="31">= <expr><literal type="number" pos:line="19" pos:column="33">0<pos:position pos:line="19" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="19" pos:column="35"/></decl_stmt> <comment type="block" pos:line="19" pos:column="36">/* new state (derive from old state) */</comment>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">( <expr><name pos:line="21" pos:column="10">type<pos:position pos:line="21" pos:column="14"/></name> <operator pos:line="21" pos:column="15">&amp;<pos:position pos:line="21" pos:column="20"/></operator> <name pos:line="21" pos:column="17">COMM_SELECT_READ<pos:position pos:line="21" pos:column="33"/></name></expr> )<pos:position pos:line="21" pos:column="35"/></condition><then pos:line="21" pos:column="35"> <block pos:line="21" pos:column="36">{
        <if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">( <expr><name pos:line="22" pos:column="14">handler<pos:position pos:line="22" pos:column="21"/></name> <operator pos:line="22" pos:column="22">!=<pos:position pos:line="22" pos:column="24"/></operator> <name pos:line="22" pos:column="25">NULL<pos:position pos:line="22" pos:column="29"/></name></expr> )<pos:position pos:line="22" pos:column="31"/></condition><then pos:line="22" pos:column="31"> <block pos:line="22" pos:column="32">{
            <comment type="block" pos:line="23" pos:column="13">/* we want to POLLIN */</comment>
            <expr_stmt><expr><name pos:line="24" pos:column="13">state_new<pos:position pos:line="24" pos:column="22"/></name> <operator pos:line="24" pos:column="23">|=<pos:position pos:line="24" pos:column="25"/></operator> <name pos:line="24" pos:column="26">POLLIN<pos:position pos:line="24" pos:column="32"/></name></expr>;<pos:position pos:line="24" pos:column="33"/></expr_stmt>
        }<pos:position pos:line="25" pos:column="10"/></block></then> <else pos:line="25" pos:column="11">else <block pos:line="25" pos:column="16">{
            <empty_stmt pos:line="26" pos:column="13">;<pos:position pos:line="26" pos:column="14"/></empty_stmt> <comment type="block" pos:line="26" pos:column="15">/* we want to clear POLLIN because handler is NULL */</comment>
        }<pos:position pos:line="27" pos:column="10"/></block></else></if>

        <expr_stmt><expr><name><name pos:line="29" pos:column="9">F<pos:position pos:line="29" pos:column="10"/></name><operator pos:line="29" pos:column="10">-&gt;<pos:position pos:line="29" pos:column="15"/></operator><name pos:line="29" pos:column="12">read_handler<pos:position pos:line="29" pos:column="24"/></name></name> <operator pos:line="29" pos:column="25">=<pos:position pos:line="29" pos:column="26"/></operator> <name pos:line="29" pos:column="27">handler<pos:position pos:line="29" pos:column="34"/></name></expr>;<pos:position pos:line="29" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="30" pos:column="9">F<pos:position pos:line="30" pos:column="10"/></name><operator pos:line="30" pos:column="10">-&gt;<pos:position pos:line="30" pos:column="15"/></operator><name pos:line="30" pos:column="12">read_data<pos:position pos:line="30" pos:column="21"/></name></name> <operator pos:line="30" pos:column="22">=<pos:position pos:line="30" pos:column="23"/></operator> <name pos:line="30" pos:column="24">client_data<pos:position pos:line="30" pos:column="35"/></name></expr>;<pos:position pos:line="30" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="31" pos:column="6"/></block></then> <elseif pos:line="31" pos:column="7">else <if pos:line="31" pos:column="12">if <condition pos:line="31" pos:column="15">( <expr><name pos:line="31" pos:column="17">state_old<pos:position pos:line="31" pos:column="26"/></name> <operator pos:line="31" pos:column="27">&amp;<pos:position pos:line="31" pos:column="32"/></operator> <name pos:line="31" pos:column="29">POLLIN<pos:position pos:line="31" pos:column="35"/></name></expr> )<pos:position pos:line="31" pos:column="37"/></condition><then pos:line="31" pos:column="37"> <block pos:line="31" pos:column="38">{
        <comment type="block" pos:line="32" pos:column="9">/* we're not changing reading state so take from existing */</comment>
        <expr_stmt><expr><name pos:line="33" pos:column="9">state_new<pos:position pos:line="33" pos:column="18"/></name> <operator pos:line="33" pos:column="19">|=<pos:position pos:line="33" pos:column="21"/></operator> <name pos:line="33" pos:column="22">POLLIN<pos:position pos:line="33" pos:column="28"/></name></expr>;<pos:position pos:line="33" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if></elseif></if>

    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">( <expr><name pos:line="36" pos:column="10">type<pos:position pos:line="36" pos:column="14"/></name> <operator pos:line="36" pos:column="15">&amp;<pos:position pos:line="36" pos:column="20"/></operator> <name pos:line="36" pos:column="17">COMM_SELECT_WRITE<pos:position pos:line="36" pos:column="34"/></name></expr> )<pos:position pos:line="36" pos:column="36"/></condition><then pos:line="36" pos:column="36"> <block pos:line="36" pos:column="37">{
        <if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">( <expr><name pos:line="37" pos:column="14">handler<pos:position pos:line="37" pos:column="21"/></name> <operator pos:line="37" pos:column="22">!=<pos:position pos:line="37" pos:column="24"/></operator> <name pos:line="37" pos:column="25">NULL<pos:position pos:line="37" pos:column="29"/></name></expr> )<pos:position pos:line="37" pos:column="31"/></condition><then pos:line="37" pos:column="31"> <block pos:line="37" pos:column="32">{
            <comment type="block" pos:line="38" pos:column="13">/* we want to POLLOUT */</comment>
            <expr_stmt><expr><name pos:line="39" pos:column="13">state_new<pos:position pos:line="39" pos:column="22"/></name> <operator pos:line="39" pos:column="23">|=<pos:position pos:line="39" pos:column="25"/></operator> <name pos:line="39" pos:column="26">POLLOUT<pos:position pos:line="39" pos:column="33"/></name></expr>;<pos:position pos:line="39" pos:column="34"/></expr_stmt>
        }<pos:position pos:line="40" pos:column="10"/></block></then> <else pos:line="40" pos:column="11">else <block pos:line="40" pos:column="16">{
            <empty_stmt pos:line="41" pos:column="13">;<pos:position pos:line="41" pos:column="14"/></empty_stmt> <comment type="block" pos:line="41" pos:column="15">/* we want to clear POLLOUT because handler is NULL */</comment>
        }<pos:position pos:line="42" pos:column="10"/></block></else></if>

        <expr_stmt><expr><name><name pos:line="44" pos:column="9">F<pos:position pos:line="44" pos:column="10"/></name><operator pos:line="44" pos:column="10">-&gt;<pos:position pos:line="44" pos:column="15"/></operator><name pos:line="44" pos:column="12">write_handler<pos:position pos:line="44" pos:column="25"/></name></name> <operator pos:line="44" pos:column="26">=<pos:position pos:line="44" pos:column="27"/></operator> <name pos:line="44" pos:column="28">handler<pos:position pos:line="44" pos:column="35"/></name></expr>;<pos:position pos:line="44" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="45" pos:column="9">F<pos:position pos:line="45" pos:column="10"/></name><operator pos:line="45" pos:column="10">-&gt;<pos:position pos:line="45" pos:column="15"/></operator><name pos:line="45" pos:column="12">write_data<pos:position pos:line="45" pos:column="22"/></name></name> <operator pos:line="45" pos:column="23">=<pos:position pos:line="45" pos:column="24"/></operator> <name pos:line="45" pos:column="25">client_data<pos:position pos:line="45" pos:column="36"/></name></expr>;<pos:position pos:line="45" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="46" pos:column="6"/></block></then> <elseif pos:line="46" pos:column="7">else <if pos:line="46" pos:column="12">if <condition pos:line="46" pos:column="15">( <expr><name pos:line="46" pos:column="17">state_old<pos:position pos:line="46" pos:column="26"/></name> <operator pos:line="46" pos:column="27">&amp;<pos:position pos:line="46" pos:column="32"/></operator> <name pos:line="46" pos:column="29">POLLOUT<pos:position pos:line="46" pos:column="36"/></name></expr> )<pos:position pos:line="46" pos:column="38"/></condition><then pos:line="46" pos:column="38"> <block pos:line="46" pos:column="39">{
        <comment type="block" pos:line="47" pos:column="9">/* we're not changing writing state so take from existing */</comment>
        <expr_stmt><expr><name pos:line="48" pos:column="9">state_new<pos:position pos:line="48" pos:column="18"/></name> <operator pos:line="48" pos:column="19">|=<pos:position pos:line="48" pos:column="21"/></operator> <name pos:line="48" pos:column="22">POLLOUT<pos:position pos:line="48" pos:column="29"/></name></expr>;<pos:position pos:line="48" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="49" pos:column="6"/></block></then></if></elseif></if>

    <if pos:line="51" pos:column="5">if <condition pos:line="51" pos:column="8">( <decl><type><name pos:line="51" pos:column="10">pollfd_events_t<pos:position pos:line="51" pos:column="25"/></name></type> <name pos:line="51" pos:column="26">bits_changed<pos:position pos:line="51" pos:column="38"/></name> <init pos:line="51" pos:column="39">= <expr><operator pos:line="51" pos:column="41">(<pos:position pos:line="51" pos:column="42"/></operator><name pos:line="51" pos:column="42">state_old<pos:position pos:line="51" pos:column="51"/></name> <operator pos:line="51" pos:column="52">^<pos:position pos:line="51" pos:column="53"/></operator> <name pos:line="51" pos:column="54">state_new<pos:position pos:line="51" pos:column="63"/></name><operator pos:line="51" pos:column="63">)<pos:position pos:line="51" pos:column="64"/></operator></expr></init></decl> )<pos:position pos:line="51" pos:column="66"/></condition><then pos:line="51" pos:column="66"> <block pos:line="51" pos:column="67">{
        <comment type="block" pos:line="52" pos:column="9">/* something has changed, update /dev/poll of what to listen for */</comment>

        <comment type="block" pos:line="54" pos:column="9">/* did any bits clear? (in which case a poll remove is necessary) */</comment>
        <if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">( <expr><name pos:line="55" pos:column="14">bits_changed<pos:position pos:line="55" pos:column="26"/></name> <operator pos:line="55" pos:column="27">&amp;<pos:position pos:line="55" pos:column="32"/></operator> <name pos:line="55" pos:column="29">state_old<pos:position pos:line="55" pos:column="38"/></name></expr> )<pos:position pos:line="55" pos:column="40"/></condition><then pos:line="55" pos:column="40"> <block pos:line="55" pos:column="41">{
            <expr_stmt><expr><call><name pos:line="56" pos:column="13">comm_update_fd<pos:position pos:line="56" pos:column="27"/></name><argument_list pos:line="56" pos:column="27">( <argument><expr><name pos:line="56" pos:column="29">fd<pos:position pos:line="56" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="33">POLLREMOVE<pos:position pos:line="56" pos:column="43"/></name></expr></argument> )<pos:position pos:line="56" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="46"/></expr_stmt>
            <comment type="block" pos:line="57" pos:column="13">/* existing state cleared, so update with all required events */</comment>
            <if pos:line="58" pos:column="13">if <condition pos:line="58" pos:column="16">( <expr><name pos:line="58" pos:column="18">state_new<pos:position pos:line="58" pos:column="27"/></name></expr> )<pos:position pos:line="58" pos:column="29"/></condition><then pos:line="58" pos:column="29">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="59" pos:column="17">comm_update_fd<pos:position pos:line="59" pos:column="31"/></name><argument_list pos:line="59" pos:column="31">( <argument><expr><name pos:line="59" pos:column="33">fd<pos:position pos:line="59" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="37">state_new<pos:position pos:line="59" pos:column="46"/></name></expr></argument> )<pos:position pos:line="59" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="49"/></expr_stmt></block></then></if>
        }<pos:position pos:line="60" pos:column="10"/></block></then> <else pos:line="60" pos:column="11">else <block pos:line="60" pos:column="16">{
            <comment type="block" pos:line="61" pos:column="13">/* only update with new required event */</comment>
            <if pos:line="62" pos:column="13">if <condition pos:line="62" pos:column="16">( <decl><type><name pos:line="62" pos:column="18">pollfd_events_t<pos:position pos:line="62" pos:column="33"/></name></type> <name pos:line="62" pos:column="34">newly_set_only<pos:position pos:line="62" pos:column="48"/></name> <init pos:line="62" pos:column="49">= <expr><operator pos:line="62" pos:column="51">(<pos:position pos:line="62" pos:column="52"/></operator><name pos:line="62" pos:column="52">bits_changed<pos:position pos:line="62" pos:column="64"/></name> <operator pos:line="62" pos:column="65">&amp;<pos:position pos:line="62" pos:column="70"/></operator> <name pos:line="62" pos:column="67">state_new<pos:position pos:line="62" pos:column="76"/></name><operator pos:line="62" pos:column="76">)<pos:position pos:line="62" pos:column="77"/></operator></expr></init></decl> )<pos:position pos:line="62" pos:column="79"/></condition><then pos:line="62" pos:column="79">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="63" pos:column="17">comm_update_fd<pos:position pos:line="63" pos:column="31"/></name><argument_list pos:line="63" pos:column="31">( <argument><expr><name pos:line="63" pos:column="33">fd<pos:position pos:line="63" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="37">newly_set_only<pos:position pos:line="63" pos:column="51"/></name></expr></argument> )<pos:position pos:line="63" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="54"/></expr_stmt></block></then></if>
        }<pos:position pos:line="64" pos:column="10"/></block></else></if>

        <expr_stmt><expr><name><name pos:line="66" pos:column="9">devpoll_state<pos:position pos:line="66" pos:column="22"/></name><index pos:line="66" pos:column="22">[<expr><name pos:line="66" pos:column="23">fd<pos:position pos:line="66" pos:column="25"/></name></expr>]<pos:position pos:line="66" pos:column="26"/></index></name><operator pos:line="66" pos:column="26">.<pos:position pos:line="66" pos:column="27"/></operator><name pos:line="66" pos:column="27">state<pos:position pos:line="66" pos:column="32"/></name> <operator pos:line="66" pos:column="33">=<pos:position pos:line="66" pos:column="34"/></operator> <name pos:line="66" pos:column="35">state_new<pos:position pos:line="66" pos:column="44"/></name></expr>;<pos:position pos:line="66" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="67" pos:column="6"/></block></then></if>

    <if pos:line="69" pos:column="5">if <condition pos:line="69" pos:column="8">(<expr><name pos:line="69" pos:column="9">timeout<pos:position pos:line="69" pos:column="16"/></name></expr>)<pos:position pos:line="69" pos:column="17"/></condition><then pos:line="69" pos:column="17">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="70" pos:column="9">F<pos:position pos:line="70" pos:column="10"/></name><operator pos:line="70" pos:column="10">-&gt;<pos:position pos:line="70" pos:column="15"/></operator><name pos:line="70" pos:column="12">timeout<pos:position pos:line="70" pos:column="19"/></name></name> <operator pos:line="70" pos:column="20">=<pos:position pos:line="70" pos:column="21"/></operator> <name pos:line="70" pos:column="22">squid_curtime<pos:position pos:line="70" pos:column="35"/></name> <operator pos:line="70" pos:column="36">+<pos:position pos:line="70" pos:column="37"/></operator> <name pos:line="70" pos:column="38">timeout<pos:position pos:line="70" pos:column="45"/></name></expr>;<pos:position pos:line="70" pos:column="46"/></expr_stmt></block></then></if>
}<pos:position pos:line="71" pos:column="2"/></block></function></unit>
