<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5586_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Comm<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">ConnOpener<pos:position pos:line="2" pos:column="17"/></name><operator pos:line="2" pos:column="17">::<pos:position pos:line="2" pos:column="19"/></operator><name pos:line="2" pos:column="19">start<pos:position pos:line="2" pos:column="24"/></name></name><parameter_list pos:line="2" pos:column="24">()<pos:position pos:line="2" pos:column="26"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">Must<pos:position pos:line="4" pos:column="9"/></name><argument_list pos:line="4" pos:column="9">(<argument><expr><name pos:line="4" pos:column="10">conn_<pos:position pos:line="4" pos:column="15"/></name> <operator pos:line="4" pos:column="16">!=<pos:position pos:line="4" pos:column="18"/></operator> <name pos:line="4" pos:column="19">NULL<pos:position pos:line="4" pos:column="23"/></name></expr></argument>)<pos:position pos:line="4" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="25"/></expr_stmt>

    <comment type="block" pos:line="6" pos:column="5">/* outbound sockets have no need to be protocol agnostic. */</comment>
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><operator pos:line="7" pos:column="9">!<pos:position pos:line="7" pos:column="10"/></operator><operator pos:line="7" pos:column="10">(<pos:position pos:line="7" pos:column="11"/></operator><name><name pos:line="7" pos:column="11">Ip<pos:position pos:line="7" pos:column="13"/></name><operator pos:line="7" pos:column="13">::<pos:position pos:line="7" pos:column="15"/></operator><name pos:line="7" pos:column="15">EnableIpv6<pos:position pos:line="7" pos:column="25"/></name></name><operator pos:line="7" pos:column="25">&amp;<pos:position pos:line="7" pos:column="30"/></operator><name pos:line="7" pos:column="26">IPV6_SPECIAL_V4MAPPING<pos:position pos:line="7" pos:column="48"/></name><operator pos:line="7" pos:column="48">)<pos:position pos:line="7" pos:column="49"/></operator> <operator pos:line="7" pos:column="50">&amp;&amp;<pos:position pos:line="7" pos:column="60"/></operator> <call><name><name pos:line="7" pos:column="53">conn_<pos:position pos:line="7" pos:column="58"/></name><operator pos:line="7" pos:column="58">-&gt;<pos:position pos:line="7" pos:column="63"/></operator><name pos:line="7" pos:column="60">remote<pos:position pos:line="7" pos:column="66"/></name><operator pos:line="7" pos:column="66">.<pos:position pos:line="7" pos:column="67"/></operator><name pos:line="7" pos:column="67">isIPv4<pos:position pos:line="7" pos:column="73"/></name></name><argument_list pos:line="7" pos:column="73">()<pos:position pos:line="7" pos:column="75"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="76"/></condition><then pos:line="7" pos:column="76"> <block pos:line="7" pos:column="77">{
        <expr_stmt><expr><call><name><name pos:line="8" pos:column="9">conn_<pos:position pos:line="8" pos:column="14"/></name><operator pos:line="8" pos:column="14">-&gt;<pos:position pos:line="8" pos:column="19"/></operator><name pos:line="8" pos:column="16">local<pos:position pos:line="8" pos:column="21"/></name><operator pos:line="8" pos:column="21">.<pos:position pos:line="8" pos:column="22"/></operator><name pos:line="8" pos:column="22">setIPv4<pos:position pos:line="8" pos:column="29"/></name></name><argument_list pos:line="8" pos:column="29">()<pos:position pos:line="8" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="11" pos:column="5">conn_<pos:position pos:line="11" pos:column="10"/></name><operator pos:line="11" pos:column="10">-&gt;<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="12">noteStart<pos:position pos:line="11" pos:column="21"/></name></name><argument_list pos:line="11" pos:column="21">()<pos:position pos:line="11" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="24"/></expr_stmt>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><call><name pos:line="12" pos:column="9">createFd<pos:position pos:line="12" pos:column="17"/></name><argument_list pos:line="12" pos:column="17">()<pos:position pos:line="12" pos:column="19"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="20"/></condition><then pos:line="12" pos:column="20">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="9">doConnect<pos:position pos:line="13" pos:column="18"/></name><argument_list pos:line="13" pos:column="18">()<pos:position pos:line="13" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="21"/></expr_stmt></block></then></if>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
