<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5004_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">AsyncJob<pos:position pos:line="1" pos:column="14"/></name><operator pos:line="1" pos:column="14">::<pos:position pos:line="1" pos:column="16"/></operator><name pos:line="1" pos:column="16">callStart<pos:position pos:line="1" pos:column="25"/></name></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">AsyncCall<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">&amp;<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="37">call<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="42"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <comment type="line" pos:line="3" pos:column="5">// we must be called asynchronously and hence, the caller must lock us</comment>
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">Must<pos:position pos:line="4" pos:column="9"/></name><argument_list pos:line="4" pos:column="9">(<argument><expr><call><name pos:line="4" pos:column="10">cbdataReferenceValid<pos:position pos:line="4" pos:column="30"/></name><argument_list pos:line="4" pos:column="30">(<argument><expr><call><name pos:line="4" pos:column="31">toCbdata<pos:position pos:line="4" pos:column="39"/></name><argument_list pos:line="4" pos:column="39">()<pos:position pos:line="4" pos:column="41"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="42"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="44"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="6" pos:column="5">Must<pos:position pos:line="6" pos:column="9"/></name><argument_list pos:line="6" pos:column="9">(<argument><expr><operator pos:line="6" pos:column="10">!<pos:position pos:line="6" pos:column="11"/></operator><name pos:line="6" pos:column="11">inCall<pos:position pos:line="6" pos:column="17"/></name></expr></argument>)<pos:position pos:line="6" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="19"/></expr_stmt> <comment type="line" pos:line="6" pos:column="20">// see AsyncJob::canBeCalled</comment>

    <expr_stmt><expr><name pos:line="8" pos:column="5">inCall<pos:position pos:line="8" pos:column="11"/></name> <operator pos:line="8" pos:column="12">=<pos:position pos:line="8" pos:column="13"/></operator> <operator pos:line="8" pos:column="14">&amp;<pos:position pos:line="8" pos:column="19"/></operator><name pos:line="8" pos:column="15">call<pos:position pos:line="8" pos:column="19"/></name></expr>;<pos:position pos:line="8" pos:column="20"/></expr_stmt> <comment type="line" pos:line="8" pos:column="21">// XXX: ugly, but safe if callStart/callEnd,Ex are paired</comment>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">debugs<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><name><name pos:line="9" pos:column="12">inCall<pos:position pos:line="9" pos:column="18"/></name><operator pos:line="9" pos:column="18">-&gt;<pos:position pos:line="9" pos:column="23"/></operator><name pos:line="9" pos:column="20">debugSection<pos:position pos:line="9" pos:column="32"/></name></name></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="34">inCall<pos:position pos:line="9" pos:column="40"/></name><operator pos:line="9" pos:column="40">-&gt;<pos:position pos:line="9" pos:column="45"/></operator><name pos:line="9" pos:column="42">debugLevel<pos:position pos:line="9" pos:column="52"/></name></name></expr></argument>,
           <argument><expr><name pos:line="10" pos:column="12">typeName<pos:position pos:line="10" pos:column="20"/></name> <operator pos:line="10" pos:column="21">&lt;&lt;<pos:position pos:line="10" pos:column="29"/></operator> <literal type="string" pos:line="10" pos:column="24">" status in:"<pos:position pos:line="10" pos:column="37"/></literal> <operator pos:line="10" pos:column="38">&lt;&lt;<pos:position pos:line="10" pos:column="46"/></operator> <call><name pos:line="10" pos:column="41">status<pos:position pos:line="10" pos:column="47"/></name><argument_list pos:line="10" pos:column="47">()<pos:position pos:line="10" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="51"/></expr_stmt>
}<pos:position pos:line="11" pos:column="2"/></block></function></unit>
