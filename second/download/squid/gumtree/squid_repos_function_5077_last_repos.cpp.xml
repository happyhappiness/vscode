<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5077_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Fs<pos:position pos:line="2" pos:column="3"/></name><operator pos:line="2" pos:column="3">::<pos:position pos:line="2" pos:column="5"/></operator><name pos:line="2" pos:column="5">Ufs<pos:position pos:line="2" pos:column="8"/></name><operator pos:line="2" pos:column="8">::<pos:position pos:line="2" pos:column="10"/></operator><name pos:line="2" pos:column="10">UFSStoreState<pos:position pos:line="2" pos:column="23"/></name><operator pos:line="2" pos:column="23">::<pos:position pos:line="2" pos:column="25"/></operator><name pos:line="2" pos:column="25">write<pos:position pos:line="2" pos:column="30"/></name></name><parameter_list pos:line="2" pos:column="30">(<parameter><decl><type><name pos:line="2" pos:column="31">char<pos:position pos:line="2" pos:column="35"/></name> <specifier pos:line="2" pos:column="36">const<pos:position pos:line="2" pos:column="41"/></specifier> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="43">buf<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="48">size_t<pos:position pos:line="2" pos:column="54"/></name></type> <name pos:line="2" pos:column="55">size<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="61">off_t<pos:position pos:line="2" pos:column="66"/></name></type> <name pos:line="2" pos:column="67">aOffset<pos:position pos:line="2" pos:column="74"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="76">FREE<pos:position pos:line="2" pos:column="80"/></name> <modifier pos:line="2" pos:column="81">*<pos:position pos:line="2" pos:column="82"/></modifier></type> <name pos:line="2" pos:column="83">free_func<pos:position pos:line="2" pos:column="92"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="93"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">79<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">3<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="19">"UFSStoreState::write: dirn "<pos:position pos:line="4" pos:column="48"/></literal> <operator pos:line="4" pos:column="49">&lt;&lt;<pos:position pos:line="4" pos:column="57"/></operator> <name pos:line="4" pos:column="52">swap_dirn<pos:position pos:line="4" pos:column="61"/></name>  <operator pos:line="4" pos:column="63">&lt;&lt;<pos:position pos:line="4" pos:column="71"/></operator> <literal type="string" pos:line="4" pos:column="66">", fileno "<pos:position pos:line="4" pos:column="77"/></literal><operator pos:line="4" pos:column="77">&lt;&lt;<pos:position pos:line="4" pos:column="85"/></operator>
           <call><name><name pos:line="5" pos:column="12">std<pos:position pos:line="5" pos:column="15"/></name><operator pos:line="5" pos:column="15">::<pos:position pos:line="5" pos:column="17"/></operator><name pos:line="5" pos:column="17">setfill<pos:position pos:line="5" pos:column="24"/></name></name><argument_list pos:line="5" pos:column="24">(<argument><expr><literal type="char" pos:line="5" pos:column="25">'0'<pos:position pos:line="5" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="29"/></argument_list></call> <operator pos:line="5" pos:column="30">&lt;&lt;<pos:position pos:line="5" pos:column="38"/></operator> <name><name pos:line="5" pos:column="33">std<pos:position pos:line="5" pos:column="36"/></name><operator pos:line="5" pos:column="36">::<pos:position pos:line="5" pos:column="38"/></operator><name pos:line="5" pos:column="38">hex<pos:position pos:line="5" pos:column="41"/></name></name> <operator pos:line="5" pos:column="42">&lt;&lt;<pos:position pos:line="5" pos:column="50"/></operator> <name><name pos:line="5" pos:column="45">std<pos:position pos:line="5" pos:column="48"/></name><operator pos:line="5" pos:column="48">::<pos:position pos:line="5" pos:column="50"/></operator><name pos:line="5" pos:column="50">uppercase<pos:position pos:line="5" pos:column="59"/></name></name> <operator pos:line="5" pos:column="60">&lt;&lt;<pos:position pos:line="5" pos:column="68"/></operator> <call><name><name pos:line="5" pos:column="63">std<pos:position pos:line="5" pos:column="66"/></name><operator pos:line="5" pos:column="66">::<pos:position pos:line="5" pos:column="68"/></operator><name pos:line="5" pos:column="68">setw<pos:position pos:line="5" pos:column="72"/></name></name><argument_list pos:line="5" pos:column="72">(<argument><expr><literal type="number" pos:line="5" pos:column="73">8<pos:position pos:line="5" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="75"/></argument_list></call> <operator pos:line="5" pos:column="76">&lt;&lt;<pos:position pos:line="5" pos:column="84"/></operator> <name pos:line="5" pos:column="79">swap_filen<pos:position pos:line="5" pos:column="89"/></name></expr></argument>)<pos:position pos:line="5" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="91"/></expr_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><call><name><name pos:line="7" pos:column="9">theFile<pos:position pos:line="7" pos:column="16"/></name><operator pos:line="7" pos:column="16">-&gt;<pos:position pos:line="7" pos:column="21"/></operator><name pos:line="7" pos:column="18">error<pos:position pos:line="7" pos:column="23"/></name></name><argument_list pos:line="7" pos:column="23">()<pos:position pos:line="7" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="26"/></condition><then pos:line="7" pos:column="26"> <block pos:line="7" pos:column="27">{
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">debugs<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><literal type="number" pos:line="8" pos:column="16">79<pos:position pos:line="8" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="20">DBG_IMPORTANT<pos:position pos:line="8" pos:column="33"/></name></expr></argument>,<argument><expr><name pos:line="8" pos:column="34">HERE<pos:position pos:line="8" pos:column="38"/></name> <operator pos:line="8" pos:column="39">&lt;&lt;<pos:position pos:line="8" pos:column="47"/></operator> <literal type="string" pos:line="8" pos:column="42">"avoid write on theFile with error"<pos:position pos:line="8" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="79"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">debugs<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><literal type="number" pos:line="9" pos:column="16">79<pos:position pos:line="9" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="20">DBG_IMPORTANT<pos:position pos:line="9" pos:column="33"/></name></expr></argument>,<argument><expr><name pos:line="9" pos:column="34">HERE<pos:position pos:line="9" pos:column="38"/></name> <operator pos:line="9" pos:column="39">&lt;&lt;<pos:position pos:line="9" pos:column="47"/></operator> <literal type="string" pos:line="9" pos:column="42">"calling free_func for "<pos:position pos:line="9" pos:column="66"/></literal> <operator pos:line="9" pos:column="67">&lt;&lt;<pos:position pos:line="9" pos:column="75"/></operator> <operator pos:line="9" pos:column="70">(<pos:position pos:line="9" pos:column="71"/></operator><name pos:line="9" pos:column="71">void<pos:position pos:line="9" pos:column="75"/></name><operator pos:line="9" pos:column="75">*<pos:position pos:line="9" pos:column="76"/></operator><operator pos:line="9" pos:column="76">)<pos:position pos:line="9" pos:column="77"/></operator> <name pos:line="9" pos:column="78">buf<pos:position pos:line="9" pos:column="81"/></name></expr></argument>)<pos:position pos:line="9" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="83"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">free_func<pos:position pos:line="10" pos:column="18"/></name><argument_list pos:line="10" pos:column="18">(<argument><expr><operator pos:line="10" pos:column="19">(<pos:position pos:line="10" pos:column="20"/></operator><name pos:line="10" pos:column="20">void<pos:position pos:line="10" pos:column="24"/></name><operator pos:line="10" pos:column="24">*<pos:position pos:line="10" pos:column="25"/></operator><operator pos:line="10" pos:column="25">)<pos:position pos:line="10" pos:column="26"/></operator><name pos:line="10" pos:column="26">buf<pos:position pos:line="10" pos:column="29"/></name></expr></argument>)<pos:position pos:line="10" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="31"/></expr_stmt>
        <return pos:line="11" pos:column="9">return <expr><literal type="boolean" pos:line="11" pos:column="16">false<pos:position pos:line="11" pos:column="21"/></literal></expr>;<pos:position pos:line="11" pos:column="22"/></return>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><specifier pos:line="14" pos:column="5">const<pos:position pos:line="14" pos:column="10"/></specifier> <name><name pos:line="14" pos:column="11">Store<pos:position pos:line="14" pos:column="16"/></name><operator pos:line="14" pos:column="16">::<pos:position pos:line="14" pos:column="18"/></operator><name pos:line="14" pos:column="18">Disk<pos:position pos:line="14" pos:column="22"/></name></name> <modifier pos:line="14" pos:column="23">&amp;<pos:position pos:line="14" pos:column="28"/></modifier></type><name pos:line="14" pos:column="24">dir<pos:position pos:line="14" pos:column="27"/></name> <init pos:line="14" pos:column="28">= <expr><operator pos:line="14" pos:column="30">*<pos:position pos:line="14" pos:column="31"/></operator><call><name pos:line="14" pos:column="31">INDEXSD<pos:position pos:line="14" pos:column="38"/></name><argument_list pos:line="14" pos:column="38">(<argument><expr><name pos:line="14" pos:column="39">swap_dirn<pos:position pos:line="14" pos:column="48"/></name></expr></argument>)<pos:position pos:line="14" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="50"/></decl_stmt>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><cast type="static" pos:line="15" pos:column="9">static_cast<argument_list type="generic" pos:line="15" pos:column="20">&lt;<argument><expr><name pos:line="15" pos:column="21">uint64_t<pos:position pos:line="15" pos:column="29"/></name></expr></argument>&gt;<pos:position pos:line="15" pos:column="33"/></argument_list><argument_list pos:line="15" pos:column="30">(<argument><expr><name pos:line="15" pos:column="31">offset_<pos:position pos:line="15" pos:column="38"/></name> <operator pos:line="15" pos:column="39">+<pos:position pos:line="15" pos:column="40"/></operator> <name pos:line="15" pos:column="41">size<pos:position pos:line="15" pos:column="45"/></name></expr></argument>)<pos:position pos:line="15" pos:column="46"/></argument_list></cast> <operator pos:line="15" pos:column="47">&gt;<pos:position pos:line="15" pos:column="51"/></operator> <cast type="static" pos:line="15" pos:column="49">static_cast<argument_list type="generic" pos:line="15" pos:column="60">&lt;<argument><expr><name pos:line="15" pos:column="61">uint64_t<pos:position pos:line="15" pos:column="69"/></name></expr></argument>&gt;<pos:position pos:line="15" pos:column="73"/></argument_list><argument_list pos:line="15" pos:column="70">(<argument><expr><call><name><name pos:line="15" pos:column="71">dir<pos:position pos:line="15" pos:column="74"/></name><operator pos:line="15" pos:column="74">.<pos:position pos:line="15" pos:column="75"/></operator><name pos:line="15" pos:column="75">maxObjectSize<pos:position pos:line="15" pos:column="88"/></name></name><argument_list pos:line="15" pos:column="88">()<pos:position pos:line="15" pos:column="90"/></argument_list></call></expr></argument>)<pos:position pos:line="15" pos:column="91"/></argument_list></cast></expr>)<pos:position pos:line="15" pos:column="92"/></condition><then pos:line="15" pos:column="92"> <block pos:line="15" pos:column="93">{
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">debugs<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><literal type="number" pos:line="16" pos:column="16">79<pos:position pos:line="16" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="20">2<pos:position pos:line="16" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="23">"accepted unknown-size entry grew too big: "<pos:position pos:line="16" pos:column="67"/></literal> <operator pos:line="16" pos:column="68">&lt;&lt;<pos:position pos:line="16" pos:column="76"/></operator>
               <operator pos:line="17" pos:column="16">(<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="17">offset_<pos:position pos:line="17" pos:column="24"/></name> <operator pos:line="17" pos:column="25">+<pos:position pos:line="17" pos:column="26"/></operator> <name pos:line="17" pos:column="27">size<pos:position pos:line="17" pos:column="31"/></name><operator pos:line="17" pos:column="31">)<pos:position pos:line="17" pos:column="32"/></operator> <operator pos:line="17" pos:column="33">&lt;&lt;<pos:position pos:line="17" pos:column="41"/></operator> <literal type="string" pos:line="17" pos:column="36">" &gt; "<pos:position pos:line="17" pos:column="44"/></literal> <operator pos:line="17" pos:column="42">&lt;&lt;<pos:position pos:line="17" pos:column="50"/></operator> <call><name><name pos:line="17" pos:column="45">dir<pos:position pos:line="17" pos:column="48"/></name><operator pos:line="17" pos:column="48">.<pos:position pos:line="17" pos:column="49"/></operator><name pos:line="17" pos:column="49">maxObjectSize<pos:position pos:line="17" pos:column="62"/></name></name><argument_list pos:line="17" pos:column="62">()<pos:position pos:line="17" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="66"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">free_func<pos:position pos:line="18" pos:column="18"/></name><argument_list pos:line="18" pos:column="18">(<argument><expr><operator pos:line="18" pos:column="19">(<pos:position pos:line="18" pos:column="20"/></operator><name pos:line="18" pos:column="20">void<pos:position pos:line="18" pos:column="24"/></name><operator pos:line="18" pos:column="24">*<pos:position pos:line="18" pos:column="25"/></operator><operator pos:line="18" pos:column="25">)<pos:position pos:line="18" pos:column="26"/></operator><name pos:line="18" pos:column="26">buf<pos:position pos:line="18" pos:column="29"/></name></expr></argument>)<pos:position pos:line="18" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">tryClosing<pos:position pos:line="19" pos:column="19"/></name><argument_list pos:line="19" pos:column="19">()<pos:position pos:line="19" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="22"/></expr_stmt>
        <return pos:line="20" pos:column="9">return <expr><literal type="boolean" pos:line="20" pos:column="16">false<pos:position pos:line="20" pos:column="21"/></literal></expr>;<pos:position pos:line="20" pos:column="22"/></return>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="23" pos:column="5">debugs<pos:position pos:line="23" pos:column="11"/></name><argument_list pos:line="23" pos:column="11">(<argument><expr><literal type="number" pos:line="23" pos:column="12">79<pos:position pos:line="23" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="16">3<pos:position pos:line="23" pos:column="17"/></literal></expr></argument>, <argument><expr><operator pos:line="23" pos:column="19">(<pos:position pos:line="23" pos:column="20"/></operator><name pos:line="23" pos:column="20">void<pos:position pos:line="23" pos:column="24"/></name><operator pos:line="23" pos:column="24">*<pos:position pos:line="23" pos:column="25"/></operator><operator pos:line="23" pos:column="25">)<pos:position pos:line="23" pos:column="26"/></operator><name pos:line="23" pos:column="26">this<pos:position pos:line="23" pos:column="30"/></name> <operator pos:line="23" pos:column="31">&lt;&lt;<pos:position pos:line="23" pos:column="39"/></operator> <literal type="string" pos:line="23" pos:column="34">" queueing write of size "<pos:position pos:line="23" pos:column="60"/></literal> <operator pos:line="23" pos:column="61">&lt;&lt;<pos:position pos:line="23" pos:column="69"/></operator> <name pos:line="23" pos:column="64">size<pos:position pos:line="23" pos:column="68"/></name></expr></argument>)<pos:position pos:line="23" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="70"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="24" pos:column="5">pending_writes<pos:position pos:line="24" pos:column="19"/></name><operator pos:line="24" pos:column="19">.<pos:position pos:line="24" pos:column="20"/></operator><name pos:line="24" pos:column="20">emplace<pos:position pos:line="24" pos:column="27"/></name></name><argument_list pos:line="24" pos:column="27">(<argument><expr><name pos:line="24" pos:column="28">buf<pos:position pos:line="24" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="33">size<pos:position pos:line="24" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="39">aOffset<pos:position pos:line="24" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="48">free_func<pos:position pos:line="24" pos:column="57"/></name></expr></argument>)<pos:position pos:line="24" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="59"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">drainWriteQueue<pos:position pos:line="25" pos:column="20"/></name><argument_list pos:line="25" pos:column="20">()<pos:position pos:line="25" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="23"/></expr_stmt>
    <return pos:line="26" pos:column="5">return <expr><literal type="boolean" pos:line="26" pos:column="12">true<pos:position pos:line="26" pos:column="16"/></literal></expr>;<pos:position pos:line="26" pos:column="17"/></return>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
