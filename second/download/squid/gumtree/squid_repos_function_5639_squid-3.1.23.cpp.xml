<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5639_squid-3.1.23.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">struct<pos:position pos:line="1" pos:column="7"/></name> <name pos:line="1" pos:column="8">squid_radix_node<pos:position pos:line="1" pos:column="24"/></name></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type>
<name pos:line="2" pos:column="1">squid_rn_insert<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name pos:line="2" pos:column="17">void<pos:position pos:line="2" pos:column="21"/></name> <modifier pos:line="2" pos:column="22">*<pos:position pos:line="2" pos:column="23"/></modifier></type><name pos:line="2" pos:column="23">v_arg<pos:position pos:line="2" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="30">struct<pos:position pos:line="2" pos:column="36"/></name> <name pos:line="2" pos:column="37">squid_radix_node_head<pos:position pos:line="2" pos:column="58"/></name></name> <modifier pos:line="2" pos:column="59">*<pos:position pos:line="2" pos:column="60"/></modifier></type><name pos:line="2" pos:column="60">head<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="66">int<pos:position pos:line="2" pos:column="69"/></name> <modifier pos:line="2" pos:column="70">*<pos:position pos:line="2" pos:column="71"/></modifier></type><name pos:line="2" pos:column="71">dupentry<pos:position pos:line="2" pos:column="79"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="81">struct<pos:position pos:line="2" pos:column="87"/></name> <name pos:line="2" pos:column="88">squid_radix_node<pos:position pos:line="2" pos:column="104"/></name></name></type> <name><name pos:line="2" pos:column="105">nodes<pos:position pos:line="2" pos:column="110"/></name><index pos:line="2" pos:column="110">[<expr><literal type="number" pos:line="2" pos:column="111">2<pos:position pos:line="2" pos:column="112"/></literal></expr>]<pos:position pos:line="2" pos:column="113"/></index></name></decl></parameter>)<pos:position pos:line="2" pos:column="114"/></parameter_list> <block pos:line="2" pos:column="115">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">caddr_t<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">v<pos:position pos:line="3" pos:column="14"/></name> <init pos:line="3" pos:column="15">= <expr><name pos:line="3" pos:column="17">v_arg<pos:position pos:line="3" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">struct<pos:position pos:line="4" pos:column="11"/></name> <name pos:line="4" pos:column="12">squid_radix_node<pos:position pos:line="4" pos:column="28"/></name></name> <modifier pos:line="4" pos:column="29">*<pos:position pos:line="4" pos:column="30"/></modifier></type><name pos:line="4" pos:column="30">top<pos:position pos:line="4" pos:column="33"/></name> <init pos:line="4" pos:column="34">= <expr><name><name pos:line="4" pos:column="36">head<pos:position pos:line="4" pos:column="40"/></name><operator pos:line="4" pos:column="40">-&gt;<pos:position pos:line="4" pos:column="45"/></operator><name pos:line="4" pos:column="42">rnh_treetop<pos:position pos:line="4" pos:column="53"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="54"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">head_off<pos:position pos:line="5" pos:column="17"/></name> <init pos:line="5" pos:column="18">= <expr><name><name pos:line="5" pos:column="20">top<pos:position pos:line="5" pos:column="23"/></name><operator pos:line="5" pos:column="23">-&gt;<pos:position pos:line="5" pos:column="28"/></operator><name pos:line="5" pos:column="25">rn_off<pos:position pos:line="5" pos:column="31"/></name></name></expr></init></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="33">vlen<pos:position pos:line="5" pos:column="37"/></name> <init pos:line="5" pos:column="38">= <expr><operator pos:line="5" pos:column="40">(<pos:position pos:line="5" pos:column="41"/></operator><name pos:line="5" pos:column="41">int<pos:position pos:line="5" pos:column="44"/></name><operator pos:line="5" pos:column="44">)<pos:position pos:line="5" pos:column="45"/></operator> <operator pos:line="5" pos:column="46">*<pos:position pos:line="5" pos:column="47"/></operator><operator pos:line="5" pos:column="47">(<pos:position pos:line="5" pos:column="48"/></operator><operator pos:line="5" pos:column="48">(<pos:position pos:line="5" pos:column="49"/></operator><name pos:line="5" pos:column="49">u_char<pos:position pos:line="5" pos:column="55"/></name> <operator pos:line="5" pos:column="56">*<pos:position pos:line="5" pos:column="57"/></operator><operator pos:line="5" pos:column="57">)<pos:position pos:line="5" pos:column="58"/></operator> <name pos:line="5" pos:column="59">v<pos:position pos:line="5" pos:column="60"/></name><operator pos:line="5" pos:column="60">)<pos:position pos:line="5" pos:column="61"/></operator></expr></init></decl>;<pos:position pos:line="5" pos:column="62"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">register<pos:position pos:line="6" pos:column="13"/></specifier> <name><name pos:line="6" pos:column="14">struct<pos:position pos:line="6" pos:column="20"/></name> <name pos:line="6" pos:column="21">squid_radix_node<pos:position pos:line="6" pos:column="37"/></name></name> <modifier pos:line="6" pos:column="38">*<pos:position pos:line="6" pos:column="39"/></modifier></type><name pos:line="6" pos:column="39">t<pos:position pos:line="6" pos:column="40"/></name> <init pos:line="6" pos:column="41">= <expr><call><name pos:line="6" pos:column="43">squid_rn_search<pos:position pos:line="6" pos:column="58"/></name><argument_list pos:line="6" pos:column="58">(<argument><expr><name pos:line="6" pos:column="59">v_arg<pos:position pos:line="6" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="66">top<pos:position pos:line="6" pos:column="69"/></name></expr></argument>)<pos:position pos:line="6" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="71"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="7" pos:column="5">register<pos:position pos:line="7" pos:column="13"/></specifier> <name pos:line="7" pos:column="14">caddr_t<pos:position pos:line="7" pos:column="21"/></name></type> <name pos:line="7" pos:column="22">cp<pos:position pos:line="7" pos:column="24"/></name> <init pos:line="7" pos:column="25">= <expr><name pos:line="7" pos:column="27">v<pos:position pos:line="7" pos:column="28"/></name> <operator pos:line="7" pos:column="29">+<pos:position pos:line="7" pos:column="30"/></operator> <name pos:line="7" pos:column="31">head_off<pos:position pos:line="7" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="40"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="8" pos:column="5">register<pos:position pos:line="8" pos:column="13"/></specifier> <name pos:line="8" pos:column="14">int<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">b<pos:position pos:line="8" pos:column="19"/></name></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="9" pos:column="5">struct<pos:position pos:line="9" pos:column="11"/></name> <name pos:line="9" pos:column="12">squid_radix_node<pos:position pos:line="9" pos:column="28"/></name></name> <modifier pos:line="9" pos:column="29">*<pos:position pos:line="9" pos:column="30"/></modifier></type><name pos:line="9" pos:column="30">tt<pos:position pos:line="9" pos:column="32"/></name></decl>;<pos:position pos:line="9" pos:column="33"/></decl_stmt>
    <comment type="block" pos:line="10" pos:column="5">/*
     * Find first bit at which v and t-&gt;rn_key differ
     */</comment>
    <block pos:line="13" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">register<pos:position pos:line="14" pos:column="17"/></specifier> <name pos:line="14" pos:column="18">caddr_t<pos:position pos:line="14" pos:column="25"/></name></type> <name pos:line="14" pos:column="26">cp2<pos:position pos:line="14" pos:column="29"/></name> <init pos:line="14" pos:column="30">= <expr><name><name pos:line="14" pos:column="32">t<pos:position pos:line="14" pos:column="33"/></name><operator pos:line="14" pos:column="33">-&gt;<pos:position pos:line="14" pos:column="38"/></operator><name pos:line="14" pos:column="35">rn_key<pos:position pos:line="14" pos:column="41"/></name></name> <operator pos:line="14" pos:column="42">+<pos:position pos:line="14" pos:column="43"/></operator> <name pos:line="14" pos:column="44">head_off<pos:position pos:line="14" pos:column="52"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="53"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="15" pos:column="9">register<pos:position pos:line="15" pos:column="17"/></specifier> <name pos:line="15" pos:column="18">int<pos:position pos:line="15" pos:column="21"/></name></type> <name pos:line="15" pos:column="22">cmp_res<pos:position pos:line="15" pos:column="29"/></name></decl>;<pos:position pos:line="15" pos:column="30"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="16" pos:column="9">caddr_t<pos:position pos:line="16" pos:column="16"/></name></type> <name pos:line="16" pos:column="17">cplim<pos:position pos:line="16" pos:column="22"/></name> <init pos:line="16" pos:column="23">= <expr><name pos:line="16" pos:column="25">v<pos:position pos:line="16" pos:column="26"/></name> <operator pos:line="16" pos:column="27">+<pos:position pos:line="16" pos:column="28"/></operator> <name pos:line="16" pos:column="29">vlen<pos:position pos:line="16" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="16" pos:column="34"/></decl_stmt>

        <while pos:line="18" pos:column="9">while <condition pos:line="18" pos:column="15">(<expr><name pos:line="18" pos:column="16">cp<pos:position pos:line="18" pos:column="18"/></name> <operator pos:line="18" pos:column="19">&lt;<pos:position pos:line="18" pos:column="23"/></operator> <name pos:line="18" pos:column="21">cplim<pos:position pos:line="18" pos:column="26"/></name></expr>)<pos:position pos:line="18" pos:column="27"/></condition>
            <block type="pseudo"><if pos:line="19" pos:column="13">if <condition pos:line="19" pos:column="16">(<expr><operator pos:line="19" pos:column="17">*<pos:position pos:line="19" pos:column="18"/></operator><name pos:line="19" pos:column="18">cp2<pos:position pos:line="19" pos:column="21"/></name><operator pos:line="19" pos:column="21">++<pos:position pos:line="19" pos:column="23"/></operator> <operator pos:line="19" pos:column="24">!=<pos:position pos:line="19" pos:column="26"/></operator> <operator pos:line="19" pos:column="27">*<pos:position pos:line="19" pos:column="28"/></operator><name pos:line="19" pos:column="28">cp<pos:position pos:line="19" pos:column="30"/></name><operator pos:line="19" pos:column="30">++<pos:position pos:line="19" pos:column="32"/></operator></expr>)<pos:position pos:line="19" pos:column="33"/></condition><then pos:line="19" pos:column="33">
                <block type="pseudo"><goto pos:line="20" pos:column="17">goto <name pos:line="20" pos:column="22">on1<pos:position pos:line="20" pos:column="25"/></name>;<pos:position pos:line="20" pos:column="26"/></goto></block></then></if></block></while>
        <expr_stmt><expr><operator pos:line="21" pos:column="9">*<pos:position pos:line="21" pos:column="10"/></operator><name pos:line="21" pos:column="10">dupentry<pos:position pos:line="21" pos:column="18"/></name> <operator pos:line="21" pos:column="19">=<pos:position pos:line="21" pos:column="20"/></operator> <literal type="number" pos:line="21" pos:column="21">1<pos:position pos:line="21" pos:column="22"/></literal></expr>;<pos:position pos:line="21" pos:column="23"/></expr_stmt>
        <return pos:line="22" pos:column="9">return <expr><name pos:line="22" pos:column="16">t<pos:position pos:line="22" pos:column="17"/></name></expr>;<pos:position pos:line="22" pos:column="18"/></return>
<label><name pos:line="23" pos:column="1">on1<pos:position pos:line="23" pos:column="4"/></name>:<pos:position pos:line="23" pos:column="5"/></label>
        <expr_stmt><expr><operator pos:line="24" pos:column="9">*<pos:position pos:line="24" pos:column="10"/></operator><name pos:line="24" pos:column="10">dupentry<pos:position pos:line="24" pos:column="18"/></name> <operator pos:line="24" pos:column="19">=<pos:position pos:line="24" pos:column="20"/></operator> <literal type="number" pos:line="24" pos:column="21">0<pos:position pos:line="24" pos:column="22"/></literal></expr>;<pos:position pos:line="24" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><name pos:line="25" pos:column="9">cmp_res<pos:position pos:line="25" pos:column="16"/></name> <operator pos:line="25" pos:column="17">=<pos:position pos:line="25" pos:column="18"/></operator> <operator pos:line="25" pos:column="19">(<pos:position pos:line="25" pos:column="20"/></operator><name><name pos:line="25" pos:column="20">cp<pos:position pos:line="25" pos:column="22"/></name><index pos:line="25" pos:column="22">[<expr><operator pos:line="25" pos:column="23">-<pos:position pos:line="25" pos:column="24"/></operator><literal type="number" pos:line="25" pos:column="24">1<pos:position pos:line="25" pos:column="25"/></literal></expr>]<pos:position pos:line="25" pos:column="26"/></index></name> <operator pos:line="25" pos:column="27">^<pos:position pos:line="25" pos:column="28"/></operator> <name><name pos:line="25" pos:column="29">cp2<pos:position pos:line="25" pos:column="32"/></name><index pos:line="25" pos:column="32">[<expr><operator pos:line="25" pos:column="33">-<pos:position pos:line="25" pos:column="34"/></operator><literal type="number" pos:line="25" pos:column="34">1<pos:position pos:line="25" pos:column="35"/></literal></expr>]<pos:position pos:line="25" pos:column="36"/></index></name><operator pos:line="25" pos:column="36">)<pos:position pos:line="25" pos:column="37"/></operator> <operator pos:line="25" pos:column="38">&amp;<pos:position pos:line="25" pos:column="43"/></operator> <literal type="number" pos:line="25" pos:column="40">0xff<pos:position pos:line="25" pos:column="44"/></literal></expr>;<pos:position pos:line="25" pos:column="45"/></expr_stmt>
        <for pos:line="26" pos:column="9">for <control pos:line="26" pos:column="13">(<init><expr><name pos:line="26" pos:column="14">b<pos:position pos:line="26" pos:column="15"/></name> <operator pos:line="26" pos:column="16">=<pos:position pos:line="26" pos:column="17"/></operator> <operator pos:line="26" pos:column="18">(<pos:position pos:line="26" pos:column="19"/></operator><name pos:line="26" pos:column="19">cp<pos:position pos:line="26" pos:column="21"/></name> <operator pos:line="26" pos:column="22">-<pos:position pos:line="26" pos:column="23"/></operator> <name pos:line="26" pos:column="24">v<pos:position pos:line="26" pos:column="25"/></name><operator pos:line="26" pos:column="25">)<pos:position pos:line="26" pos:column="26"/></operator> <operator pos:line="26" pos:column="27">&lt;&lt;<pos:position pos:line="26" pos:column="35"/></operator> <literal type="number" pos:line="26" pos:column="30">3<pos:position pos:line="26" pos:column="31"/></literal></expr>;<pos:position pos:line="26" pos:column="32"/></init> <condition><expr><name pos:line="26" pos:column="33">cmp_res<pos:position pos:line="26" pos:column="40"/></name></expr>;<pos:position pos:line="26" pos:column="41"/></condition> <incr><expr><name pos:line="26" pos:column="42">b<pos:position pos:line="26" pos:column="43"/></name><operator pos:line="26" pos:column="43">--<pos:position pos:line="26" pos:column="45"/></operator></expr></incr>)<pos:position pos:line="26" pos:column="46"/></control>
            <block type="pseudo"><expr_stmt><expr><name pos:line="27" pos:column="13">cmp_res<pos:position pos:line="27" pos:column="20"/></name> <operator pos:line="27" pos:column="21">&gt;&gt;=<pos:position pos:line="27" pos:column="30"/></operator> <literal type="number" pos:line="27" pos:column="25">1<pos:position pos:line="27" pos:column="26"/></literal></expr>;<pos:position pos:line="27" pos:column="27"/></expr_stmt></block></for>
    }<pos:position pos:line="28" pos:column="6"/></block>
    <block pos:line="29" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="30" pos:column="9">register<pos:position pos:line="30" pos:column="17"/></specifier> <name><name pos:line="30" pos:column="18">struct<pos:position pos:line="30" pos:column="24"/></name> <name pos:line="30" pos:column="25">squid_radix_node<pos:position pos:line="30" pos:column="41"/></name></name> <modifier pos:line="30" pos:column="42">*<pos:position pos:line="30" pos:column="43"/></modifier></type><name pos:line="30" pos:column="43">p<pos:position pos:line="30" pos:column="44"/></name></decl>, <modifier pos:line="30" pos:column="46">*<pos:position pos:line="30" pos:column="47"/></modifier><decl><type ref="prev"/><name pos:line="30" pos:column="47">x<pos:position pos:line="30" pos:column="48"/></name> <init pos:line="30" pos:column="49">= <expr><name pos:line="30" pos:column="51">top<pos:position pos:line="30" pos:column="54"/></name></expr></init></decl>;<pos:position pos:line="30" pos:column="55"/></decl_stmt>
        <expr_stmt><expr><name pos:line="31" pos:column="9">cp<pos:position pos:line="31" pos:column="11"/></name> <operator pos:line="31" pos:column="12">=<pos:position pos:line="31" pos:column="13"/></operator> <name pos:line="31" pos:column="14">v<pos:position pos:line="31" pos:column="15"/></name></expr>;<pos:position pos:line="31" pos:column="16"/></expr_stmt>
        <do pos:line="32" pos:column="9">do <block pos:line="32" pos:column="12">{
            <expr_stmt><expr><name pos:line="33" pos:column="13">p<pos:position pos:line="33" pos:column="14"/></name> <operator pos:line="33" pos:column="15">=<pos:position pos:line="33" pos:column="16"/></operator> <name pos:line="33" pos:column="17">x<pos:position pos:line="33" pos:column="18"/></name></expr>;<pos:position pos:line="33" pos:column="19"/></expr_stmt>
            <if pos:line="34" pos:column="13">if <condition pos:line="34" pos:column="16">(<expr><name><name pos:line="34" pos:column="17">cp<pos:position pos:line="34" pos:column="19"/></name><index pos:line="34" pos:column="19">[<expr><name><name pos:line="34" pos:column="20">x<pos:position pos:line="34" pos:column="21"/></name><operator pos:line="34" pos:column="21">-&gt;<pos:position pos:line="34" pos:column="26"/></operator><name pos:line="34" pos:column="23">rn_off<pos:position pos:line="34" pos:column="29"/></name></name></expr>]<pos:position pos:line="34" pos:column="30"/></index></name> <operator pos:line="34" pos:column="31">&amp;<pos:position pos:line="34" pos:column="36"/></operator> <name><name pos:line="34" pos:column="33">x<pos:position pos:line="34" pos:column="34"/></name><operator pos:line="34" pos:column="34">-&gt;<pos:position pos:line="34" pos:column="39"/></operator><name pos:line="34" pos:column="36">rn_bmask<pos:position pos:line="34" pos:column="44"/></name></name></expr>)<pos:position pos:line="34" pos:column="45"/></condition><then pos:line="34" pos:column="45">
                <block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="17">x<pos:position pos:line="35" pos:column="18"/></name> <operator pos:line="35" pos:column="19">=<pos:position pos:line="35" pos:column="20"/></operator> <name><name pos:line="35" pos:column="21">x<pos:position pos:line="35" pos:column="22"/></name><operator pos:line="35" pos:column="22">-&gt;<pos:position pos:line="35" pos:column="27"/></operator><name pos:line="35" pos:column="24">rn_r<pos:position pos:line="35" pos:column="28"/></name></name></expr>;<pos:position pos:line="35" pos:column="29"/></expr_stmt></block></then>
            <else pos:line="36" pos:column="13">else
                <block type="pseudo"><expr_stmt><expr><name pos:line="37" pos:column="17">x<pos:position pos:line="37" pos:column="18"/></name> <operator pos:line="37" pos:column="19">=<pos:position pos:line="37" pos:column="20"/></operator> <name><name pos:line="37" pos:column="21">x<pos:position pos:line="37" pos:column="22"/></name><operator pos:line="37" pos:column="22">-&gt;<pos:position pos:line="37" pos:column="27"/></operator><name pos:line="37" pos:column="24">rn_l<pos:position pos:line="37" pos:column="28"/></name></name></expr>;<pos:position pos:line="37" pos:column="29"/></expr_stmt></block></else></if>
        }<pos:position pos:line="38" pos:column="10"/></block> while <condition pos:line="38" pos:column="17">(<expr><name pos:line="38" pos:column="18">b<pos:position pos:line="38" pos:column="19"/></name> <operator pos:line="38" pos:column="20">&gt;<pos:position pos:line="38" pos:column="24"/></operator> <operator pos:line="38" pos:column="22">(<pos:position pos:line="38" pos:column="23"/></operator><name pos:line="38" pos:column="23">unsigned<pos:position pos:line="38" pos:column="31"/></name><operator pos:line="38" pos:column="31">)<pos:position pos:line="38" pos:column="32"/></operator> <name><name pos:line="38" pos:column="33">x<pos:position pos:line="38" pos:column="34"/></name><operator pos:line="38" pos:column="34">-&gt;<pos:position pos:line="38" pos:column="39"/></operator><name pos:line="38" pos:column="36">rn_b<pos:position pos:line="38" pos:column="40"/></name></name></expr>)<pos:position pos:line="38" pos:column="41"/></condition>;<pos:position pos:line="38" pos:column="42"/></do>	<comment type="block" pos:line="38" pos:column="49">/* x-&gt;rn_b &lt; b &amp;&amp; x-&gt;rn_b &gt;= 0 */</comment>
<cpp:ifdef pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">ifdef<pos:position pos:line="39" pos:column="7"/></cpp:directive> <name pos:line="39" pos:column="8">RN_DEBUG<pos:position pos:line="39" pos:column="16"/></name></cpp:ifdef>
        <if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><name pos:line="40" pos:column="13">rn_debug<pos:position pos:line="40" pos:column="21"/></name></expr>)<pos:position pos:line="40" pos:column="22"/></condition><then pos:line="40" pos:column="22">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="41" pos:column="13">fprintf<pos:position pos:line="41" pos:column="20"/></name><argument_list pos:line="41" pos:column="20">(<argument><expr><name pos:line="41" pos:column="21">stderr<pos:position pos:line="41" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="29">"squid_rn_insert: Going In:\n"<pos:position pos:line="41" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="61"/></expr_stmt></block></then></if>
        <expr_stmt><expr><call><name pos:line="42" pos:column="9">traverse<pos:position pos:line="42" pos:column="17"/></name><argument_list pos:line="42" pos:column="17">(<argument><expr><name pos:line="42" pos:column="18">p<pos:position pos:line="42" pos:column="19"/></name></expr></argument>)<pos:position pos:line="42" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="21"/></expr_stmt>
<cpp:endif pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">endif<pos:position pos:line="43" pos:column="7"/></cpp:directive></cpp:endif>
        <expr_stmt><expr><name pos:line="44" pos:column="9">t<pos:position pos:line="44" pos:column="10"/></name> <operator pos:line="44" pos:column="11">=<pos:position pos:line="44" pos:column="12"/></operator> <call><name pos:line="44" pos:column="13">squid_rn_newpair<pos:position pos:line="44" pos:column="29"/></name><argument_list pos:line="44" pos:column="29">(<argument><expr><name pos:line="44" pos:column="30">v_arg<pos:position pos:line="44" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="37">b<pos:position pos:line="44" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="40">nodes<pos:position pos:line="44" pos:column="45"/></name></expr></argument>)<pos:position pos:line="44" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><name pos:line="45" pos:column="9">tt<pos:position pos:line="45" pos:column="11"/></name> <operator pos:line="45" pos:column="12">=<pos:position pos:line="45" pos:column="13"/></operator> <name><name pos:line="45" pos:column="14">t<pos:position pos:line="45" pos:column="15"/></name><operator pos:line="45" pos:column="15">-&gt;<pos:position pos:line="45" pos:column="20"/></operator><name pos:line="45" pos:column="17">rn_l<pos:position pos:line="45" pos:column="21"/></name></name></expr>;<pos:position pos:line="45" pos:column="22"/></expr_stmt>
        <if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><operator pos:line="46" pos:column="13">(<pos:position pos:line="46" pos:column="14"/></operator><name><name pos:line="46" pos:column="14">cp<pos:position pos:line="46" pos:column="16"/></name><index pos:line="46" pos:column="16">[<expr><name><name pos:line="46" pos:column="17">p<pos:position pos:line="46" pos:column="18"/></name><operator pos:line="46" pos:column="18">-&gt;<pos:position pos:line="46" pos:column="23"/></operator><name pos:line="46" pos:column="20">rn_off<pos:position pos:line="46" pos:column="26"/></name></name></expr>]<pos:position pos:line="46" pos:column="27"/></index></name> <operator pos:line="46" pos:column="28">&amp;<pos:position pos:line="46" pos:column="33"/></operator> <name><name pos:line="46" pos:column="30">p<pos:position pos:line="46" pos:column="31"/></name><operator pos:line="46" pos:column="31">-&gt;<pos:position pos:line="46" pos:column="36"/></operator><name pos:line="46" pos:column="33">rn_bmask<pos:position pos:line="46" pos:column="41"/></name></name><operator pos:line="46" pos:column="41">)<pos:position pos:line="46" pos:column="42"/></operator> <operator pos:line="46" pos:column="43">==<pos:position pos:line="46" pos:column="45"/></operator> <literal type="number" pos:line="46" pos:column="46">0<pos:position pos:line="46" pos:column="47"/></literal></expr>)<pos:position pos:line="46" pos:column="48"/></condition><then pos:line="46" pos:column="48">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="47" pos:column="13">p<pos:position pos:line="47" pos:column="14"/></name><operator pos:line="47" pos:column="14">-&gt;<pos:position pos:line="47" pos:column="19"/></operator><name pos:line="47" pos:column="16">rn_l<pos:position pos:line="47" pos:column="20"/></name></name> <operator pos:line="47" pos:column="21">=<pos:position pos:line="47" pos:column="22"/></operator> <name pos:line="47" pos:column="23">t<pos:position pos:line="47" pos:column="24"/></name></expr>;<pos:position pos:line="47" pos:column="25"/></expr_stmt></block></then>
        <else pos:line="48" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="49" pos:column="13">p<pos:position pos:line="49" pos:column="14"/></name><operator pos:line="49" pos:column="14">-&gt;<pos:position pos:line="49" pos:column="19"/></operator><name pos:line="49" pos:column="16">rn_r<pos:position pos:line="49" pos:column="20"/></name></name> <operator pos:line="49" pos:column="21">=<pos:position pos:line="49" pos:column="22"/></operator> <name pos:line="49" pos:column="23">t<pos:position pos:line="49" pos:column="24"/></name></expr>;<pos:position pos:line="49" pos:column="25"/></expr_stmt></block></else></if>
        <expr_stmt><expr><name><name pos:line="50" pos:column="9">x<pos:position pos:line="50" pos:column="10"/></name><operator pos:line="50" pos:column="10">-&gt;<pos:position pos:line="50" pos:column="15"/></operator><name pos:line="50" pos:column="12">rn_p<pos:position pos:line="50" pos:column="16"/></name></name> <operator pos:line="50" pos:column="17">=<pos:position pos:line="50" pos:column="18"/></operator> <name pos:line="50" pos:column="19">t<pos:position pos:line="50" pos:column="20"/></name></expr>;<pos:position pos:line="50" pos:column="21"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="51" pos:column="9">t<pos:position pos:line="51" pos:column="10"/></name><operator pos:line="51" pos:column="10">-&gt;<pos:position pos:line="51" pos:column="15"/></operator><name pos:line="51" pos:column="12">rn_p<pos:position pos:line="51" pos:column="16"/></name></name> <operator pos:line="51" pos:column="17">=<pos:position pos:line="51" pos:column="18"/></operator> <name pos:line="51" pos:column="19">p<pos:position pos:line="51" pos:column="20"/></name></expr>;<pos:position pos:line="51" pos:column="21"/></expr_stmt>		<comment type="block" pos:line="51" pos:column="33">/* frees x, p as temp vars below */</comment>
        <if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><operator pos:line="52" pos:column="13">(<pos:position pos:line="52" pos:column="14"/></operator><name><name pos:line="52" pos:column="14">cp<pos:position pos:line="52" pos:column="16"/></name><index pos:line="52" pos:column="16">[<expr><name><name pos:line="52" pos:column="17">t<pos:position pos:line="52" pos:column="18"/></name><operator pos:line="52" pos:column="18">-&gt;<pos:position pos:line="52" pos:column="23"/></operator><name pos:line="52" pos:column="20">rn_off<pos:position pos:line="52" pos:column="26"/></name></name></expr>]<pos:position pos:line="52" pos:column="27"/></index></name> <operator pos:line="52" pos:column="28">&amp;<pos:position pos:line="52" pos:column="33"/></operator> <name><name pos:line="52" pos:column="30">t<pos:position pos:line="52" pos:column="31"/></name><operator pos:line="52" pos:column="31">-&gt;<pos:position pos:line="52" pos:column="36"/></operator><name pos:line="52" pos:column="33">rn_bmask<pos:position pos:line="52" pos:column="41"/></name></name><operator pos:line="52" pos:column="41">)<pos:position pos:line="52" pos:column="42"/></operator> <operator pos:line="52" pos:column="43">==<pos:position pos:line="52" pos:column="45"/></operator> <literal type="number" pos:line="52" pos:column="46">0<pos:position pos:line="52" pos:column="47"/></literal></expr>)<pos:position pos:line="52" pos:column="48"/></condition><then pos:line="52" pos:column="48"> <block pos:line="52" pos:column="49">{
            <expr_stmt><expr><name><name pos:line="53" pos:column="13">t<pos:position pos:line="53" pos:column="14"/></name><operator pos:line="53" pos:column="14">-&gt;<pos:position pos:line="53" pos:column="19"/></operator><name pos:line="53" pos:column="16">rn_r<pos:position pos:line="53" pos:column="20"/></name></name> <operator pos:line="53" pos:column="21">=<pos:position pos:line="53" pos:column="22"/></operator> <name pos:line="53" pos:column="23">x<pos:position pos:line="53" pos:column="24"/></name></expr>;<pos:position pos:line="53" pos:column="25"/></expr_stmt>
        }<pos:position pos:line="54" pos:column="10"/></block></then> <else pos:line="54" pos:column="11">else <block pos:line="54" pos:column="16">{
            <expr_stmt><expr><name><name pos:line="55" pos:column="13">t<pos:position pos:line="55" pos:column="14"/></name><operator pos:line="55" pos:column="14">-&gt;<pos:position pos:line="55" pos:column="19"/></operator><name pos:line="55" pos:column="16">rn_r<pos:position pos:line="55" pos:column="20"/></name></name> <operator pos:line="55" pos:column="21">=<pos:position pos:line="55" pos:column="22"/></operator> <name pos:line="55" pos:column="23">tt<pos:position pos:line="55" pos:column="25"/></name></expr>;<pos:position pos:line="55" pos:column="26"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="56" pos:column="13">t<pos:position pos:line="56" pos:column="14"/></name><operator pos:line="56" pos:column="14">-&gt;<pos:position pos:line="56" pos:column="19"/></operator><name pos:line="56" pos:column="16">rn_l<pos:position pos:line="56" pos:column="20"/></name></name> <operator pos:line="56" pos:column="21">=<pos:position pos:line="56" pos:column="22"/></operator> <name pos:line="56" pos:column="23">x<pos:position pos:line="56" pos:column="24"/></name></expr>;<pos:position pos:line="56" pos:column="25"/></expr_stmt>
        }<pos:position pos:line="57" pos:column="10"/></block></else></if>
<cpp:ifdef pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">ifdef<pos:position pos:line="58" pos:column="7"/></cpp:directive> <name pos:line="58" pos:column="8">RN_DEBUG<pos:position pos:line="58" pos:column="16"/></name></cpp:ifdef>
        <if pos:line="59" pos:column="9">if <condition pos:line="59" pos:column="12">(<expr><name pos:line="59" pos:column="13">rn_debug<pos:position pos:line="59" pos:column="21"/></name></expr>)<pos:position pos:line="59" pos:column="22"/></condition><then pos:line="59" pos:column="22">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="60" pos:column="13">log<pos:position pos:line="60" pos:column="16"/></name><argument_list pos:line="60" pos:column="16">(<argument><expr><name pos:line="60" pos:column="17">LOG_DEBUG<pos:position pos:line="60" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="28">"squid_rn_insert: Coming Out:\n"<pos:position pos:line="60" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="61"/></argument_list></call></expr><operator pos:line="60" pos:column="61">,<pos:position pos:line="60" pos:column="62"/></operator> <expr><call><name pos:line="60" pos:column="63">traverse<pos:position pos:line="60" pos:column="71"/></name><argument_list pos:line="60" pos:column="71">(<argument><expr><name pos:line="60" pos:column="72">p<pos:position pos:line="60" pos:column="73"/></name></expr></argument>)<pos:position pos:line="60" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="75"/></expr_stmt></block></then></if>
<cpp:endif pos:line="61" pos:column="1">#<cpp:directive pos:line="61" pos:column="2">endif<pos:position pos:line="61" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="62" pos:column="6"/></block>
    <return pos:line="63" pos:column="5">return <expr><operator pos:line="63" pos:column="12">(<pos:position pos:line="63" pos:column="13"/></operator><name pos:line="63" pos:column="13">tt<pos:position pos:line="63" pos:column="15"/></name><operator pos:line="63" pos:column="15">)<pos:position pos:line="63" pos:column="16"/></operator></expr>;<pos:position pos:line="63" pos:column="17"/></return>
}<pos:position pos:line="64" pos:column="2"/></block></function></unit>
