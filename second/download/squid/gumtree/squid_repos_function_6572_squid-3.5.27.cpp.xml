<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6572_squid-3.5.27.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">ESIElement<pos:position pos:line="1" pos:column="11"/></name><operator pos:line="1" pos:column="11">::<pos:position pos:line="1" pos:column="13"/></operator><name pos:line="1" pos:column="13">Pointer<pos:position pos:line="1" pos:column="20"/></name></name></type>
<name><name pos:line="2" pos:column="1">esiTry<pos:position pos:line="2" pos:column="7"/></name><operator pos:line="2" pos:column="7">::<pos:position pos:line="2" pos:column="9"/></operator><name pos:line="2" pos:column="9">makeUsable<pos:position pos:line="2" pos:column="19"/></name></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name pos:line="2" pos:column="20">esiTreeParentPtr<pos:position pos:line="2" pos:column="36"/></name></type> <name pos:line="2" pos:column="37">newParent<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="48">ESIVarState<pos:position pos:line="2" pos:column="59"/></name> <modifier pos:line="2" pos:column="60">&amp;<pos:position pos:line="2" pos:column="65"/></modifier></type><name pos:line="2" pos:column="61">newVarState<pos:position pos:line="2" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="73"/></parameter_list> <specifier pos:line="2" pos:column="74">const<pos:position pos:line="2" pos:column="79"/></specifier>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">86<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">5<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="19">"esiTry::makeUsable: making usable Try from "<pos:position pos:line="4" pos:column="64"/></literal> <operator pos:line="4" pos:column="65">&lt;&lt;<pos:position pos:line="4" pos:column="73"/></operator> <name pos:line="4" pos:column="68">this<pos:position pos:line="4" pos:column="72"/></name></expr></argument>)<pos:position pos:line="4" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="74"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">esiTry<pos:position pos:line="5" pos:column="11"/></name> <modifier pos:line="5" pos:column="12">*<pos:position pos:line="5" pos:column="13"/></modifier></type><name pos:line="5" pos:column="13">resultT<pos:position pos:line="5" pos:column="20"/></name> <init pos:line="5" pos:column="21">= <expr><operator pos:line="5" pos:column="23">new<pos:position pos:line="5" pos:column="26"/></operator> <call><name pos:line="5" pos:column="27">esiTry<pos:position pos:line="5" pos:column="33"/></name> <argument_list pos:line="5" pos:column="34">(<argument><expr><operator pos:line="5" pos:column="35">*<pos:position pos:line="5" pos:column="36"/></operator><name pos:line="5" pos:column="36">this<pos:position pos:line="5" pos:column="40"/></name></expr></argument>)<pos:position pos:line="5" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="42"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">ESIElement<pos:position pos:line="6" pos:column="15"/></name><operator pos:line="6" pos:column="15">::<pos:position pos:line="6" pos:column="17"/></operator><name pos:line="6" pos:column="17">Pointer<pos:position pos:line="6" pos:column="24"/></name></name></type> <name pos:line="6" pos:column="25">result<pos:position pos:line="6" pos:column="31"/></name> <init pos:line="6" pos:column="32">= <expr><name pos:line="6" pos:column="34">resultT<pos:position pos:line="6" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="42"/></decl_stmt>

    <expr_stmt><expr><name><name pos:line="8" pos:column="5">resultT<pos:position pos:line="8" pos:column="12"/></name><operator pos:line="8" pos:column="12">-&gt;<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="14">parent<pos:position pos:line="8" pos:column="20"/></name></name> <operator pos:line="8" pos:column="21">=<pos:position pos:line="8" pos:column="22"/></operator> <name pos:line="8" pos:column="23">newParent<pos:position pos:line="8" pos:column="32"/></name></expr>;<pos:position pos:line="8" pos:column="33"/></expr_stmt>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><call><name><name pos:line="10" pos:column="9">attempt<pos:position pos:line="10" pos:column="16"/></name><operator pos:line="10" pos:column="16">.<pos:position pos:line="10" pos:column="17"/></operator><name pos:line="10" pos:column="17">getRaw<pos:position pos:line="10" pos:column="23"/></name></name><argument_list pos:line="10" pos:column="23">()<pos:position pos:line="10" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="26"/></condition><then pos:line="10" pos:column="26">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="11" pos:column="9">resultT<pos:position pos:line="11" pos:column="16"/></name><operator pos:line="11" pos:column="16">-&gt;<pos:position pos:line="11" pos:column="21"/></operator><name pos:line="11" pos:column="18">attempt<pos:position pos:line="11" pos:column="25"/></name></name> <operator pos:line="11" pos:column="26">=<pos:position pos:line="11" pos:column="27"/></operator> <call><name><name pos:line="11" pos:column="28">attempt<pos:position pos:line="11" pos:column="35"/></name><operator pos:line="11" pos:column="35">-&gt;<pos:position pos:line="11" pos:column="40"/></operator><name pos:line="11" pos:column="37">makeUsable<pos:position pos:line="11" pos:column="47"/></name></name><argument_list pos:line="11" pos:column="47">(<argument><expr><name pos:line="11" pos:column="48">resultT<pos:position pos:line="11" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="57">newVarState<pos:position pos:line="11" pos:column="68"/></name></expr></argument>)<pos:position pos:line="11" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="70"/></expr_stmt></block></then></if>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><call><name><name pos:line="13" pos:column="9">except<pos:position pos:line="13" pos:column="15"/></name><operator pos:line="13" pos:column="15">.<pos:position pos:line="13" pos:column="16"/></operator><name pos:line="13" pos:column="16">getRaw<pos:position pos:line="13" pos:column="22"/></name></name><argument_list pos:line="13" pos:column="22">()<pos:position pos:line="13" pos:column="24"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="25"/></condition><then pos:line="13" pos:column="25">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="14" pos:column="9">resultT<pos:position pos:line="14" pos:column="16"/></name><operator pos:line="14" pos:column="16">-&gt;<pos:position pos:line="14" pos:column="21"/></operator><name pos:line="14" pos:column="18">except<pos:position pos:line="14" pos:column="24"/></name></name>  <operator pos:line="14" pos:column="26">=<pos:position pos:line="14" pos:column="27"/></operator> <call><name><name pos:line="14" pos:column="28">except<pos:position pos:line="14" pos:column="34"/></name><operator pos:line="14" pos:column="34">-&gt;<pos:position pos:line="14" pos:column="39"/></operator><name pos:line="14" pos:column="36">makeUsable<pos:position pos:line="14" pos:column="46"/></name></name><argument_list pos:line="14" pos:column="46">(<argument><expr><name pos:line="14" pos:column="47">resultT<pos:position pos:line="14" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="56">newVarState<pos:position pos:line="14" pos:column="67"/></name></expr></argument>)<pos:position pos:line="14" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="69"/></expr_stmt></block></then></if>

    <return pos:line="16" pos:column="5">return <expr><name pos:line="16" pos:column="12">result<pos:position pos:line="16" pos:column="18"/></name></expr>;<pos:position pos:line="16" pos:column="19"/></return>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
