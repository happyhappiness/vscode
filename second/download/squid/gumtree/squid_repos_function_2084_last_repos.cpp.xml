<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2084_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">StoreMetaVary<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">checkConsistency<pos:position pos:line="2" pos:column="32"/></name></name><parameter_list pos:line="2" pos:column="32">(<parameter><decl><type><name pos:line="2" pos:column="33">StoreEntry<pos:position pos:line="2" pos:column="43"/></name> <modifier pos:line="2" pos:column="44">*<pos:position pos:line="2" pos:column="45"/></modifier></type><name pos:line="2" pos:column="45">e<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="47"/></parameter_list> <specifier pos:line="2" pos:column="48">const<pos:position pos:line="2" pos:column="53"/></specifier>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name> <argument_list pos:line="4" pos:column="12">(<argument><expr><call><name pos:line="4" pos:column="13">getType<pos:position pos:line="4" pos:column="20"/></name><argument_list pos:line="4" pos:column="20">()<pos:position pos:line="4" pos:column="22"/></argument_list></call> <operator pos:line="4" pos:column="23">==<pos:position pos:line="4" pos:column="25"/></operator> <name pos:line="4" pos:column="26">STORE_META_VARY_HEADERS<pos:position pos:line="4" pos:column="49"/></name></expr></argument>)<pos:position pos:line="4" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="51"/></expr_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><call><name><name pos:line="6" pos:column="9">e<pos:position pos:line="6" pos:column="10"/></name><operator pos:line="6" pos:column="10">-&gt;<pos:position pos:line="6" pos:column="15"/></operator><name pos:line="6" pos:column="12">mem_obj<pos:position pos:line="6" pos:column="19"/></name><operator pos:line="6" pos:column="19">-&gt;<pos:position pos:line="6" pos:column="24"/></operator><name pos:line="6" pos:column="21">vary_headers<pos:position pos:line="6" pos:column="33"/></name><operator pos:line="6" pos:column="33">.<pos:position pos:line="6" pos:column="34"/></operator><name pos:line="6" pos:column="34">isEmpty<pos:position pos:line="6" pos:column="41"/></name></name><argument_list pos:line="6" pos:column="41">()<pos:position pos:line="6" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="44"/></condition><then pos:line="6" pos:column="44"> <block pos:line="6" pos:column="45">{
        <comment type="block" pos:line="7" pos:column="9">/* XXX separate this mutator from the query */</comment>
        <comment type="block" pos:line="8" pos:column="9">/* Assume the object is OK.. remember the vary request headers */</comment>
        <expr_stmt><expr><call><name><name pos:line="9" pos:column="9">e<pos:position pos:line="9" pos:column="10"/></name><operator pos:line="9" pos:column="10">-&gt;<pos:position pos:line="9" pos:column="15"/></operator><name pos:line="9" pos:column="12">mem_obj<pos:position pos:line="9" pos:column="19"/></name><operator pos:line="9" pos:column="19">-&gt;<pos:position pos:line="9" pos:column="24"/></operator><name pos:line="9" pos:column="21">vary_headers<pos:position pos:line="9" pos:column="33"/></name><operator pos:line="9" pos:column="33">.<pos:position pos:line="9" pos:column="34"/></operator><name pos:line="9" pos:column="34">assign<pos:position pos:line="9" pos:column="40"/></name></name><argument_list pos:line="9" pos:column="40">(<argument><expr><cast type="static" pos:line="9" pos:column="41">static_cast<argument_list type="generic" pos:line="9" pos:column="52">&lt;<argument><expr><specifier pos:line="9" pos:column="53">const<pos:position pos:line="9" pos:column="58"/></specifier> <name pos:line="9" pos:column="59">char<pos:position pos:line="9" pos:column="63"/></name> <operator pos:line="9" pos:column="64">*<pos:position pos:line="9" pos:column="65"/></operator></expr></argument>&gt;<pos:position pos:line="9" pos:column="69"/></argument_list><argument_list pos:line="9" pos:column="66">(<argument><expr><name pos:line="9" pos:column="67">value<pos:position pos:line="9" pos:column="72"/></name></expr></argument>)<pos:position pos:line="9" pos:column="73"/></argument_list></cast></expr></argument>, <argument><expr><name pos:line="9" pos:column="75">length<pos:position pos:line="9" pos:column="81"/></name></expr></argument>)<pos:position pos:line="9" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="83"/></expr_stmt>
        <comment type="block" pos:line="10" pos:column="9">/* entries created before SBuf vary handling may include string terminator */</comment>
        <decl_stmt><decl><specifier pos:line="11" pos:column="9">static<pos:position pos:line="11" pos:column="15"/></specifier> <type><specifier pos:line="11" pos:column="16">const<pos:position pos:line="11" pos:column="21"/></specifier> <name pos:line="11" pos:column="22">SBuf<pos:position pos:line="11" pos:column="26"/></name></type> <name pos:line="11" pos:column="27">nul<pos:position pos:line="11" pos:column="30"/></name><argument_list pos:line="11" pos:column="30">(<argument><expr><literal type="string" pos:line="11" pos:column="31">"\0"<pos:position pos:line="11" pos:column="35"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="37">1<pos:position pos:line="11" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="39"/></argument_list></decl>;<pos:position pos:line="11" pos:column="40"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="12" pos:column="9">e<pos:position pos:line="12" pos:column="10"/></name><operator pos:line="12" pos:column="10">-&gt;<pos:position pos:line="12" pos:column="15"/></operator><name pos:line="12" pos:column="12">mem_obj<pos:position pos:line="12" pos:column="19"/></name><operator pos:line="12" pos:column="19">-&gt;<pos:position pos:line="12" pos:column="24"/></operator><name pos:line="12" pos:column="21">vary_headers<pos:position pos:line="12" pos:column="33"/></name><operator pos:line="12" pos:column="33">.<pos:position pos:line="12" pos:column="34"/></operator><name pos:line="12" pos:column="34">trim<pos:position pos:line="12" pos:column="38"/></name></name><argument_list pos:line="12" pos:column="38">(<argument><expr><name pos:line="12" pos:column="39">nul<pos:position pos:line="12" pos:column="42"/></name></expr></argument>)<pos:position pos:line="12" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="44"/></expr_stmt>
        <return pos:line="13" pos:column="9">return <expr><literal type="boolean" pos:line="13" pos:column="16">true<pos:position pos:line="13" pos:column="20"/></literal></expr>;<pos:position pos:line="13" pos:column="21"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><call><name><name pos:line="16" pos:column="9">e<pos:position pos:line="16" pos:column="10"/></name><operator pos:line="16" pos:column="10">-&gt;<pos:position pos:line="16" pos:column="15"/></operator><name pos:line="16" pos:column="12">mem_obj<pos:position pos:line="16" pos:column="19"/></name><operator pos:line="16" pos:column="19">-&gt;<pos:position pos:line="16" pos:column="24"/></operator><name pos:line="16" pos:column="21">vary_headers<pos:position pos:line="16" pos:column="33"/></name><operator pos:line="16" pos:column="33">.<pos:position pos:line="16" pos:column="34"/></operator><name pos:line="16" pos:column="34">cmp<pos:position pos:line="16" pos:column="37"/></name></name><argument_list pos:line="16" pos:column="37">(<argument><expr><cast type="static" pos:line="16" pos:column="38">static_cast<argument_list type="generic" pos:line="16" pos:column="49">&lt;<argument><expr><specifier pos:line="16" pos:column="50">const<pos:position pos:line="16" pos:column="55"/></specifier> <name pos:line="16" pos:column="56">char<pos:position pos:line="16" pos:column="60"/></name> <operator pos:line="16" pos:column="61">*<pos:position pos:line="16" pos:column="62"/></operator></expr></argument>&gt;<pos:position pos:line="16" pos:column="66"/></argument_list><argument_list pos:line="16" pos:column="63">(<argument><expr><name pos:line="16" pos:column="64">value<pos:position pos:line="16" pos:column="69"/></name></expr></argument>)<pos:position pos:line="16" pos:column="70"/></argument_list></cast></expr></argument>, <argument><expr><name pos:line="16" pos:column="72">length<pos:position pos:line="16" pos:column="78"/></name></expr></argument>)<pos:position pos:line="16" pos:column="79"/></argument_list></call> <operator pos:line="16" pos:column="80">!=<pos:position pos:line="16" pos:column="82"/></operator> <literal type="number" pos:line="16" pos:column="83">0<pos:position pos:line="16" pos:column="84"/></literal></expr>)<pos:position pos:line="16" pos:column="85"/></condition><then pos:line="16" pos:column="85">
        <block type="pseudo"><return pos:line="17" pos:column="9">return <expr><literal type="boolean" pos:line="17" pos:column="16">false<pos:position pos:line="17" pos:column="21"/></literal></expr>;<pos:position pos:line="17" pos:column="22"/></return></block></then></if>

    <return pos:line="19" pos:column="5">return <expr><literal type="boolean" pos:line="19" pos:column="12">true<pos:position pos:line="19" pos:column="16"/></literal></expr>;<pos:position pos:line="19" pos:column="17"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
