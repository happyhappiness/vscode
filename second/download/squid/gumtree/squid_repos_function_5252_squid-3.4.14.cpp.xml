<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5252_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Auth<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">UserRequest<pos:position pos:line="2" pos:column="18"/></name><operator pos:line="2" pos:column="18">::<pos:position pos:line="2" pos:column="20"/></operator><name pos:line="2" pos:column="20">valid<pos:position pos:line="2" pos:column="25"/></name></name><parameter_list pos:line="2" pos:column="25">()<pos:position pos:line="2" pos:column="27"/></parameter_list> <specifier pos:line="2" pos:column="28">const<pos:position pos:line="2" pos:column="33"/></specifier>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">29<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">9<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="19">HERE<pos:position pos:line="4" pos:column="23"/></name> <operator pos:line="4" pos:column="24">&lt;&lt;<pos:position pos:line="4" pos:column="32"/></operator> <literal type="string" pos:line="4" pos:column="27">"Validating Auth::UserRequest '"<pos:position pos:line="4" pos:column="59"/></literal> <operator pos:line="4" pos:column="60">&lt;&lt;<pos:position pos:line="4" pos:column="68"/></operator> <name pos:line="4" pos:column="63">this<pos:position pos:line="4" pos:column="67"/></name> <operator pos:line="4" pos:column="68">&lt;&lt;<pos:position pos:line="4" pos:column="76"/></operator> <literal type="string" pos:line="4" pos:column="71">"'."<pos:position pos:line="4" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="77"/></expr_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><call><name pos:line="6" pos:column="9">user<pos:position pos:line="6" pos:column="13"/></name><argument_list pos:line="6" pos:column="13">()<pos:position pos:line="6" pos:column="15"/></argument_list></call> <operator pos:line="6" pos:column="16">==<pos:position pos:line="6" pos:column="18"/></operator> <name pos:line="6" pos:column="19">NULL<pos:position pos:line="6" pos:column="23"/></name></expr>)<pos:position pos:line="6" pos:column="24"/></condition><then pos:line="6" pos:column="24"> <block pos:line="6" pos:column="25">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">debugs<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><literal type="number" pos:line="7" pos:column="16">29<pos:position pos:line="7" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="20">4<pos:position pos:line="7" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="23">HERE<pos:position pos:line="7" pos:column="27"/></name> <operator pos:line="7" pos:column="28">&lt;&lt;<pos:position pos:line="7" pos:column="36"/></operator> <literal type="string" pos:line="7" pos:column="31">"No associated Auth::User data"<pos:position pos:line="7" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="64"/></expr_stmt>
        <return pos:line="8" pos:column="9">return <expr><literal type="boolean" pos:line="8" pos:column="16">false<pos:position pos:line="8" pos:column="21"/></literal></expr>;<pos:position pos:line="8" pos:column="22"/></return>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><call><name pos:line="11" pos:column="9">user<pos:position pos:line="11" pos:column="13"/></name><argument_list pos:line="11" pos:column="13">()<pos:position pos:line="11" pos:column="15"/></argument_list></call><operator pos:line="11" pos:column="15">-&gt;<pos:position pos:line="11" pos:column="20"/></operator><name pos:line="11" pos:column="17">auth_type<pos:position pos:line="11" pos:column="26"/></name> <operator pos:line="11" pos:column="27">==<pos:position pos:line="11" pos:column="29"/></operator> <name><name pos:line="11" pos:column="30">Auth<pos:position pos:line="11" pos:column="34"/></name><operator pos:line="11" pos:column="34">::<pos:position pos:line="11" pos:column="36"/></operator><name pos:line="11" pos:column="36">AUTH_UNKNOWN<pos:position pos:line="11" pos:column="48"/></name></name></expr>)<pos:position pos:line="11" pos:column="49"/></condition><then pos:line="11" pos:column="49"> <block pos:line="11" pos:column="50">{
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">debugs<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><literal type="number" pos:line="12" pos:column="16">29<pos:position pos:line="12" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="20">4<pos:position pos:line="12" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="23">HERE<pos:position pos:line="12" pos:column="27"/></name> <operator pos:line="12" pos:column="28">&lt;&lt;<pos:position pos:line="12" pos:column="36"/></operator> <literal type="string" pos:line="12" pos:column="31">"Auth::User '"<pos:position pos:line="12" pos:column="45"/></literal> <operator pos:line="12" pos:column="46">&lt;&lt;<pos:position pos:line="12" pos:column="54"/></operator> <call><name pos:line="12" pos:column="49">user<pos:position pos:line="12" pos:column="53"/></name><argument_list pos:line="12" pos:column="53">()<pos:position pos:line="12" pos:column="55"/></argument_list></call> <operator pos:line="12" pos:column="56">&lt;&lt;<pos:position pos:line="12" pos:column="64"/></operator> <literal type="string" pos:line="12" pos:column="59">"' uses unknown scheme."<pos:position pos:line="12" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="85"/></expr_stmt>
        <return pos:line="13" pos:column="9">return <expr><literal type="boolean" pos:line="13" pos:column="16">false<pos:position pos:line="13" pos:column="21"/></literal></expr>;<pos:position pos:line="13" pos:column="22"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><call><name pos:line="16" pos:column="9">user<pos:position pos:line="16" pos:column="13"/></name><argument_list pos:line="16" pos:column="13">()<pos:position pos:line="16" pos:column="15"/></argument_list></call><operator pos:line="16" pos:column="15">-&gt;<pos:position pos:line="16" pos:column="20"/></operator><name pos:line="16" pos:column="17">auth_type<pos:position pos:line="16" pos:column="26"/></name> <operator pos:line="16" pos:column="27">==<pos:position pos:line="16" pos:column="29"/></operator> <name><name pos:line="16" pos:column="30">Auth<pos:position pos:line="16" pos:column="34"/></name><operator pos:line="16" pos:column="34">::<pos:position pos:line="16" pos:column="36"/></operator><name pos:line="16" pos:column="36">AUTH_BROKEN<pos:position pos:line="16" pos:column="47"/></name></name></expr>)<pos:position pos:line="16" pos:column="48"/></condition><then pos:line="16" pos:column="48"> <block pos:line="16" pos:column="49">{
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">debugs<pos:position pos:line="17" pos:column="15"/></name><argument_list pos:line="17" pos:column="15">(<argument><expr><literal type="number" pos:line="17" pos:column="16">29<pos:position pos:line="17" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="20">4<pos:position pos:line="17" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="23">HERE<pos:position pos:line="17" pos:column="27"/></name> <operator pos:line="17" pos:column="28">&lt;&lt;<pos:position pos:line="17" pos:column="36"/></operator> <literal type="string" pos:line="17" pos:column="31">"Auth::User '"<pos:position pos:line="17" pos:column="45"/></literal> <operator pos:line="17" pos:column="46">&lt;&lt;<pos:position pos:line="17" pos:column="54"/></operator> <call><name pos:line="17" pos:column="49">user<pos:position pos:line="17" pos:column="53"/></name><argument_list pos:line="17" pos:column="53">()<pos:position pos:line="17" pos:column="55"/></argument_list></call> <operator pos:line="17" pos:column="56">&lt;&lt;<pos:position pos:line="17" pos:column="64"/></operator> <literal type="string" pos:line="17" pos:column="59">"' is broken for it's scheme."<pos:position pos:line="17" pos:column="89"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="91"/></expr_stmt>
        <return pos:line="18" pos:column="9">return <expr><literal type="boolean" pos:line="18" pos:column="16">false<pos:position pos:line="18" pos:column="21"/></literal></expr>;<pos:position pos:line="18" pos:column="22"/></return>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="21" pos:column="5">/* any other sanity checks that we need in the future */</comment>

    <comment type="block" pos:line="23" pos:column="5">/* finally return ok */</comment>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">debugs<pos:position pos:line="24" pos:column="11"/></name><argument_list pos:line="24" pos:column="11">(<argument><expr><literal type="number" pos:line="24" pos:column="12">29<pos:position pos:line="24" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="16">5<pos:position pos:line="24" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="19">HERE<pos:position pos:line="24" pos:column="23"/></name> <operator pos:line="24" pos:column="24">&lt;&lt;<pos:position pos:line="24" pos:column="32"/></operator> <literal type="string" pos:line="24" pos:column="27">"Validated. Auth::UserRequest '"<pos:position pos:line="24" pos:column="59"/></literal> <operator pos:line="24" pos:column="60">&lt;&lt;<pos:position pos:line="24" pos:column="68"/></operator> <name pos:line="24" pos:column="63">this<pos:position pos:line="24" pos:column="67"/></name> <operator pos:line="24" pos:column="68">&lt;&lt;<pos:position pos:line="24" pos:column="76"/></operator> <literal type="string" pos:line="24" pos:column="71">"'."<pos:position pos:line="24" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="77"/></expr_stmt>
    <return pos:line="25" pos:column="5">return <expr><literal type="boolean" pos:line="25" pos:column="12">true<pos:position pos:line="25" pos:column="16"/></literal></expr>;<pos:position pos:line="25" pos:column="17"/></return>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
