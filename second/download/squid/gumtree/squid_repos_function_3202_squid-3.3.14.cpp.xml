<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3202_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">MemStore<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">copyFromShm<pos:position pos:line="2" pos:column="22"/></name></name><parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><name pos:line="2" pos:column="23">StoreEntry<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">&amp;<pos:position pos:line="2" pos:column="39"/></modifier></type><name pos:line="2" pos:column="35">e<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="38">const<pos:position pos:line="2" pos:column="43"/></specifier> <name><name pos:line="2" pos:column="44">MemStoreMap<pos:position pos:line="2" pos:column="55"/></name><operator pos:line="2" pos:column="55">::<pos:position pos:line="2" pos:column="57"/></operator><name pos:line="2" pos:column="57">Extras<pos:position pos:line="2" pos:column="63"/></name></name> <modifier pos:line="2" pos:column="64">&amp;<pos:position pos:line="2" pos:column="69"/></modifier></type><name pos:line="2" pos:column="65">extras<pos:position pos:line="2" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="72"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name><name pos:line="4" pos:column="11">Ipc<pos:position pos:line="4" pos:column="14"/></name><operator pos:line="4" pos:column="14">::<pos:position pos:line="4" pos:column="16"/></operator><name pos:line="4" pos:column="16">Mem<pos:position pos:line="4" pos:column="19"/></name><operator pos:line="4" pos:column="19">::<pos:position pos:line="4" pos:column="21"/></operator><name pos:line="4" pos:column="21">PageId<pos:position pos:line="4" pos:column="27"/></name></name> <modifier pos:line="4" pos:column="28">&amp;<pos:position pos:line="4" pos:column="33"/></modifier></type><name pos:line="4" pos:column="29">page<pos:position pos:line="4" pos:column="33"/></name> <init pos:line="4" pos:column="34">= <expr><name><name pos:line="4" pos:column="36">extras<pos:position pos:line="4" pos:column="42"/></name><operator pos:line="4" pos:column="42">.<pos:position pos:line="4" pos:column="43"/></operator><name pos:line="4" pos:column="43">page<pos:position pos:line="4" pos:column="47"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="48"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="6" pos:column="5">StoreIOBuffer<pos:position pos:line="6" pos:column="18"/></name></type> <name pos:line="6" pos:column="19">sourceBuf<pos:position pos:line="6" pos:column="28"/></name><argument_list pos:line="6" pos:column="28">(<argument><expr><name><name pos:line="6" pos:column="29">extras<pos:position pos:line="6" pos:column="35"/></name><operator pos:line="6" pos:column="35">.<pos:position pos:line="6" pos:column="36"/></operator><name pos:line="6" pos:column="36">storedSize<pos:position pos:line="6" pos:column="46"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="48">0<pos:position pos:line="6" pos:column="49"/></literal></expr></argument>,
                            <argument><expr><cast type="static" pos:line="7" pos:column="29">static_cast<argument_list type="generic" pos:line="7" pos:column="40">&lt;<argument><expr><name pos:line="7" pos:column="41">char<pos:position pos:line="7" pos:column="45"/></name><operator pos:line="7" pos:column="45">*<pos:position pos:line="7" pos:column="46"/></operator></expr></argument>&gt;<pos:position pos:line="7" pos:column="50"/></argument_list><argument_list pos:line="7" pos:column="47">(<argument><expr><call><name pos:line="7" pos:column="48">PagePointer<pos:position pos:line="7" pos:column="59"/></name><argument_list pos:line="7" pos:column="59">(<argument><expr><name pos:line="7" pos:column="60">page<pos:position pos:line="7" pos:column="64"/></name></expr></argument>)<pos:position pos:line="7" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="66"/></argument_list></cast></expr></argument>)<pos:position pos:line="7" pos:column="67"/></argument_list></decl>;<pos:position pos:line="7" pos:column="68"/></decl_stmt>

    <comment type="line" pos:line="9" pos:column="5">// XXX: We do not know the URLs yet, only the key, but we need to parse and</comment>
    <comment type="line" pos:line="10" pos:column="5">// store the response for the Root().get() callers to be happy because they</comment>
    <comment type="line" pos:line="11" pos:column="5">// expect IN_MEMORY entries to already have the response headers and body.</comment>
    <comment type="line" pos:line="12" pos:column="5">// At least one caller calls createMemObject() if there is not one, so</comment>
    <comment type="line" pos:line="13" pos:column="5">// we hide the true object until that happens (to avoid leaking TBD URLs).</comment>
    <expr_stmt><expr><call><name><name pos:line="14" pos:column="5">e<pos:position pos:line="14" pos:column="6"/></name><operator pos:line="14" pos:column="6">.<pos:position pos:line="14" pos:column="7"/></operator><name pos:line="14" pos:column="7">createMemObject<pos:position pos:line="14" pos:column="22"/></name></name><argument_list pos:line="14" pos:column="22">(<argument><expr><literal type="string" pos:line="14" pos:column="23">"TBD"<pos:position pos:line="14" pos:column="28"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="30">"TBD"<pos:position pos:line="14" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="37"/></expr_stmt>

    <comment type="line" pos:line="16" pos:column="5">// emulate the usual Store code but w/o inapplicable checks and callbacks:</comment>

    <comment type="line" pos:line="18" pos:column="5">// from store_client::readBody():</comment>
    <decl_stmt><decl><type><name pos:line="19" pos:column="5">HttpReply<pos:position pos:line="19" pos:column="14"/></name> <modifier pos:line="19" pos:column="15">*<pos:position pos:line="19" pos:column="16"/></modifier></type><name pos:line="19" pos:column="16">rep<pos:position pos:line="19" pos:column="19"/></name> <init pos:line="19" pos:column="20">= <expr><operator pos:line="19" pos:column="22">(<pos:position pos:line="19" pos:column="23"/></operator><name pos:line="19" pos:column="23">HttpReply<pos:position pos:line="19" pos:column="32"/></name> <operator pos:line="19" pos:column="33">*<pos:position pos:line="19" pos:column="34"/></operator><operator pos:line="19" pos:column="34">)<pos:position pos:line="19" pos:column="35"/></operator><call><name><name pos:line="19" pos:column="35">e<pos:position pos:line="19" pos:column="36"/></name><operator pos:line="19" pos:column="36">.<pos:position pos:line="19" pos:column="37"/></operator><name pos:line="19" pos:column="37">getReply<pos:position pos:line="19" pos:column="45"/></name></name><argument_list pos:line="19" pos:column="45">()<pos:position pos:line="19" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="19" pos:column="48"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="20" pos:column="5">const<pos:position pos:line="20" pos:column="10"/></specifier> <name pos:line="20" pos:column="11">ssize_t<pos:position pos:line="20" pos:column="18"/></name></type> <name pos:line="20" pos:column="19">end<pos:position pos:line="20" pos:column="22"/></name> <init pos:line="20" pos:column="23">= <expr><call><name pos:line="20" pos:column="25">headersEnd<pos:position pos:line="20" pos:column="35"/></name><argument_list pos:line="20" pos:column="35">(<argument><expr><name><name pos:line="20" pos:column="36">sourceBuf<pos:position pos:line="20" pos:column="45"/></name><operator pos:line="20" pos:column="45">.<pos:position pos:line="20" pos:column="46"/></operator><name pos:line="20" pos:column="46">data<pos:position pos:line="20" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="52">sourceBuf<pos:position pos:line="20" pos:column="61"/></name><operator pos:line="20" pos:column="61">.<pos:position pos:line="20" pos:column="62"/></operator><name pos:line="20" pos:column="62">length<pos:position pos:line="20" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="20" pos:column="70"/></decl_stmt>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><operator pos:line="21" pos:column="9">!<pos:position pos:line="21" pos:column="10"/></operator><call><name><name pos:line="21" pos:column="10">rep<pos:position pos:line="21" pos:column="13"/></name><operator pos:line="21" pos:column="13">-&gt;<pos:position pos:line="21" pos:column="18"/></operator><name pos:line="21" pos:column="15">parseCharBuf<pos:position pos:line="21" pos:column="27"/></name></name><argument_list pos:line="21" pos:column="27">(<argument><expr><name><name pos:line="21" pos:column="28">sourceBuf<pos:position pos:line="21" pos:column="37"/></name><operator pos:line="21" pos:column="37">.<pos:position pos:line="21" pos:column="38"/></operator><name pos:line="21" pos:column="38">data<pos:position pos:line="21" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="44">end<pos:position pos:line="21" pos:column="47"/></name></expr></argument>)<pos:position pos:line="21" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="49"/></condition><then pos:line="21" pos:column="49"> <block pos:line="21" pos:column="50">{
        <expr_stmt><expr><call><name pos:line="22" pos:column="9">debugs<pos:position pos:line="22" pos:column="15"/></name><argument_list pos:line="22" pos:column="15">(<argument><expr><literal type="number" pos:line="22" pos:column="16">20<pos:position pos:line="22" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="20">DBG_IMPORTANT<pos:position pos:line="22" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="35">"Could not parse mem-cached headers: "<pos:position pos:line="22" pos:column="73"/></literal> <operator pos:line="22" pos:column="74">&lt;&lt;<pos:position pos:line="22" pos:column="82"/></operator> <name pos:line="22" pos:column="77">e<pos:position pos:line="22" pos:column="78"/></name></expr></argument>)<pos:position pos:line="22" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="80"/></expr_stmt>
        <return pos:line="23" pos:column="9">return <expr><literal type="boolean" pos:line="23" pos:column="16">false<pos:position pos:line="23" pos:column="21"/></literal></expr>;<pos:position pos:line="23" pos:column="22"/></return>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>
    <comment type="line" pos:line="25" pos:column="5">// local memory stores both headers and body</comment>
    <expr_stmt><expr><name><name pos:line="26" pos:column="5">e<pos:position pos:line="26" pos:column="6"/></name><operator pos:line="26" pos:column="6">.<pos:position pos:line="26" pos:column="7"/></operator><name pos:line="26" pos:column="7">mem_obj<pos:position pos:line="26" pos:column="14"/></name><operator pos:line="26" pos:column="14">-&gt;<pos:position pos:line="26" pos:column="19"/></operator><name pos:line="26" pos:column="16">object_sz<pos:position pos:line="26" pos:column="25"/></name></name> <operator pos:line="26" pos:column="26">=<pos:position pos:line="26" pos:column="27"/></operator> <name><name pos:line="26" pos:column="28">sourceBuf<pos:position pos:line="26" pos:column="37"/></name><operator pos:line="26" pos:column="37">.<pos:position pos:line="26" pos:column="38"/></operator><name pos:line="26" pos:column="38">length<pos:position pos:line="26" pos:column="44"/></name></name></expr>;<pos:position pos:line="26" pos:column="45"/></expr_stmt> <comment type="line" pos:line="26" pos:column="46">// from StoreEntry::complete()</comment>

    <expr_stmt><expr><call><name pos:line="28" pos:column="5">storeGetMemSpace<pos:position pos:line="28" pos:column="21"/></name><argument_list pos:line="28" pos:column="21">(<argument><expr><name><name pos:line="28" pos:column="22">sourceBuf<pos:position pos:line="28" pos:column="31"/></name><operator pos:line="28" pos:column="31">.<pos:position pos:line="28" pos:column="32"/></operator><name pos:line="28" pos:column="32">length<pos:position pos:line="28" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="40"/></expr_stmt> <comment type="line" pos:line="28" pos:column="41">// from StoreEntry::write()</comment>

    <expr_stmt><expr><call><name pos:line="30" pos:column="5">assert<pos:position pos:line="30" pos:column="11"/></name><argument_list pos:line="30" pos:column="11">(<argument><expr><call><name><name pos:line="30" pos:column="12">e<pos:position pos:line="30" pos:column="13"/></name><operator pos:line="30" pos:column="13">.<pos:position pos:line="30" pos:column="14"/></operator><name pos:line="30" pos:column="14">mem_obj<pos:position pos:line="30" pos:column="21"/></name><operator pos:line="30" pos:column="21">-&gt;<pos:position pos:line="30" pos:column="26"/></operator><name pos:line="30" pos:column="23">data_hdr<pos:position pos:line="30" pos:column="31"/></name><operator pos:line="30" pos:column="31">.<pos:position pos:line="30" pos:column="32"/></operator><name pos:line="30" pos:column="32">write<pos:position pos:line="30" pos:column="37"/></name></name><argument_list pos:line="30" pos:column="37">(<argument><expr><name pos:line="30" pos:column="38">sourceBuf<pos:position pos:line="30" pos:column="47"/></name></expr></argument>)<pos:position pos:line="30" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="50"/></expr_stmt> <comment type="line" pos:line="30" pos:column="51">// from MemObject::write()</comment>
    <decl_stmt><decl><type><specifier pos:line="31" pos:column="5">const<pos:position pos:line="31" pos:column="10"/></specifier> <name pos:line="31" pos:column="11">int64_t<pos:position pos:line="31" pos:column="18"/></name></type> <name pos:line="31" pos:column="19">written<pos:position pos:line="31" pos:column="26"/></name> <init pos:line="31" pos:column="27">= <expr><call><name><name pos:line="31" pos:column="29">e<pos:position pos:line="31" pos:column="30"/></name><operator pos:line="31" pos:column="30">.<pos:position pos:line="31" pos:column="31"/></operator><name pos:line="31" pos:column="31">mem_obj<pos:position pos:line="31" pos:column="38"/></name><operator pos:line="31" pos:column="38">-&gt;<pos:position pos:line="31" pos:column="43"/></operator><name pos:line="31" pos:column="40">endOffset<pos:position pos:line="31" pos:column="49"/></name></name><argument_list pos:line="31" pos:column="49">()<pos:position pos:line="31" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="31" pos:column="52"/></decl_stmt>
    <comment type="line" pos:line="32" pos:column="5">// we should write all because StoreEntry::write() never fails</comment>
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">assert<pos:position pos:line="33" pos:column="11"/></name><argument_list pos:line="33" pos:column="11">(<argument><expr><name pos:line="33" pos:column="12">written<pos:position pos:line="33" pos:column="19"/></name> <operator pos:line="33" pos:column="20">&gt;=<pos:position pos:line="33" pos:column="25"/></operator> <literal type="number" pos:line="33" pos:column="23">0<pos:position pos:line="33" pos:column="24"/></literal> <operator pos:line="33" pos:column="25">&amp;&amp;<pos:position pos:line="33" pos:column="35"/></operator>
           <cast type="static" pos:line="34" pos:column="12">static_cast<argument_list type="generic" pos:line="34" pos:column="23">&lt;<argument><expr><name pos:line="34" pos:column="24">size_t<pos:position pos:line="34" pos:column="30"/></name></expr></argument>&gt;<pos:position pos:line="34" pos:column="34"/></argument_list><argument_list pos:line="34" pos:column="31">(<argument><expr><name pos:line="34" pos:column="32">written<pos:position pos:line="34" pos:column="39"/></name></expr></argument>)<pos:position pos:line="34" pos:column="40"/></argument_list></cast> <operator pos:line="34" pos:column="41">==<pos:position pos:line="34" pos:column="43"/></operator> <name><name pos:line="34" pos:column="44">sourceBuf<pos:position pos:line="34" pos:column="53"/></name><operator pos:line="34" pos:column="53">.<pos:position pos:line="34" pos:column="54"/></operator><name pos:line="34" pos:column="54">length<pos:position pos:line="34" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="62"/></expr_stmt>
    <comment type="line" pos:line="35" pos:column="5">// would be nice to call validLength() here, but it needs e.key</comment>

    <expr_stmt><expr><call><name pos:line="37" pos:column="5">debugs<pos:position pos:line="37" pos:column="11"/></name><argument_list pos:line="37" pos:column="11">(<argument><expr><literal type="number" pos:line="37" pos:column="12">20<pos:position pos:line="37" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="16">7<pos:position pos:line="37" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="19">HERE<pos:position pos:line="37" pos:column="23"/></name> <operator pos:line="37" pos:column="24">&lt;&lt;<pos:position pos:line="37" pos:column="32"/></operator> <literal type="string" pos:line="37" pos:column="27">"mem-loaded all "<pos:position pos:line="37" pos:column="44"/></literal> <operator pos:line="37" pos:column="45">&lt;&lt;<pos:position pos:line="37" pos:column="53"/></operator> <name pos:line="37" pos:column="48">written<pos:position pos:line="37" pos:column="55"/></name> <operator pos:line="37" pos:column="56">&lt;&lt;<pos:position pos:line="37" pos:column="64"/></operator> <literal type="string" pos:line="37" pos:column="59">" bytes of "<pos:position pos:line="37" pos:column="71"/></literal> <operator pos:line="37" pos:column="72">&lt;&lt;<pos:position pos:line="37" pos:column="80"/></operator> <name pos:line="37" pos:column="75">e<pos:position pos:line="37" pos:column="76"/></name> <operator pos:line="37" pos:column="77">&lt;&lt;<pos:position pos:line="37" pos:column="85"/></operator>
           <literal type="string" pos:line="38" pos:column="12">" from "<pos:position pos:line="38" pos:column="20"/></literal> <operator pos:line="38" pos:column="21">&lt;&lt;<pos:position pos:line="38" pos:column="29"/></operator> <name pos:line="38" pos:column="24">page<pos:position pos:line="38" pos:column="28"/></name></expr></argument>)<pos:position pos:line="38" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="30"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="40" pos:column="5">e<pos:position pos:line="40" pos:column="6"/></name><operator pos:line="40" pos:column="6">.<pos:position pos:line="40" pos:column="7"/></operator><name pos:line="40" pos:column="7">hideMemObject<pos:position pos:line="40" pos:column="20"/></name></name><argument_list pos:line="40" pos:column="20">()<pos:position pos:line="40" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="23"/></expr_stmt>

    <return pos:line="42" pos:column="5">return <expr><literal type="boolean" pos:line="42" pos:column="12">true<pos:position pos:line="42" pos:column="16"/></literal></expr>;<pos:position pos:line="42" pos:column="17"/></return>
}<pos:position pos:line="43" pos:column="2"/></block></function></unit>
