<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1897_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">neighborsHtcpReply<pos:position pos:line="2" pos:column="19"/></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><specifier pos:line="2" pos:column="20">const<pos:position pos:line="2" pos:column="25"/></specifier> <name pos:line="2" pos:column="26">cache_key<pos:position pos:line="2" pos:column="35"/></name> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type> <name pos:line="2" pos:column="38">key<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="43">HtcpReplyData<pos:position pos:line="2" pos:column="56"/></name> <modifier pos:line="2" pos:column="57">*<pos:position pos:line="2" pos:column="58"/></modifier></type> <name pos:line="2" pos:column="59">htcp<pos:position pos:line="2" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="65">const<pos:position pos:line="2" pos:column="70"/></specifier> <name><name pos:line="2" pos:column="71">Ip<pos:position pos:line="2" pos:column="73"/></name><operator pos:line="2" pos:column="73">::<pos:position pos:line="2" pos:column="75"/></operator><name pos:line="2" pos:column="75">Address<pos:position pos:line="2" pos:column="82"/></name></name> <modifier pos:line="2" pos:column="83">&amp;<pos:position pos:line="2" pos:column="88"/></modifier></type><name pos:line="2" pos:column="84">from<pos:position pos:line="2" pos:column="88"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="89"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">StoreEntry<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">e<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><call><name><name pos:line="4" pos:column="21">Store<pos:position pos:line="4" pos:column="26"/></name><operator pos:line="4" pos:column="26">::<pos:position pos:line="4" pos:column="28"/></operator><name pos:line="4" pos:column="28">Root<pos:position pos:line="4" pos:column="32"/></name></name><argument_list pos:line="4" pos:column="32">()<pos:position pos:line="4" pos:column="34"/></argument_list></call><operator pos:line="4" pos:column="34">.<pos:position pos:line="4" pos:column="35"/></operator><call><name pos:line="4" pos:column="35">get<pos:position pos:line="4" pos:column="38"/></name><argument_list pos:line="4" pos:column="38">(<argument><expr><name pos:line="4" pos:column="39">key<pos:position pos:line="4" pos:column="42"/></name></expr></argument>)<pos:position pos:line="4" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="44"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">MemObject<pos:position pos:line="5" pos:column="14"/></name> <modifier pos:line="5" pos:column="15">*<pos:position pos:line="5" pos:column="16"/></modifier></type><name pos:line="5" pos:column="16">mem<pos:position pos:line="5" pos:column="19"/></name> <init pos:line="5" pos:column="20">= <expr><name pos:line="5" pos:column="22">NULL<pos:position pos:line="5" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">CachePeer<pos:position pos:line="6" pos:column="14"/></name> <modifier pos:line="6" pos:column="15">*<pos:position pos:line="6" pos:column="16"/></modifier></type><name pos:line="6" pos:column="16">p<pos:position pos:line="6" pos:column="17"/></name></decl>;<pos:position pos:line="6" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">peer_t<pos:position pos:line="7" pos:column="11"/></name></type> <name pos:line="7" pos:column="12">ntype<pos:position pos:line="7" pos:column="17"/></name> <init pos:line="7" pos:column="18">= <expr><name pos:line="7" pos:column="20">PEER_NONE<pos:position pos:line="7" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="30"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">debugs<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><literal type="number" pos:line="8" pos:column="12">15<pos:position pos:line="8" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="16">6<pos:position pos:line="8" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="19">"neighborsHtcpReply: "<pos:position pos:line="8" pos:column="41"/></literal> <operator pos:line="8" pos:column="42">&lt;&lt;<pos:position pos:line="8" pos:column="50"/></operator>
           <operator pos:line="9" pos:column="12">(<pos:position pos:line="9" pos:column="13"/></operator><ternary><condition><expr><name><name pos:line="9" pos:column="13">htcp<pos:position pos:line="9" pos:column="17"/></name><operator pos:line="9" pos:column="17">-&gt;<pos:position pos:line="9" pos:column="22"/></operator><name pos:line="9" pos:column="19">hit<pos:position pos:line="9" pos:column="22"/></name></name></expr> ?<pos:position pos:line="9" pos:column="24"/></condition><then pos:line="9" pos:column="24"> <expr><literal type="string" pos:line="9" pos:column="25">"HIT"<pos:position pos:line="9" pos:column="30"/></literal></expr> <pos:position pos:line="9" pos:column="31"/></then><else pos:line="9" pos:column="31">: <expr><literal type="string" pos:line="9" pos:column="33">"MISS"<pos:position pos:line="9" pos:column="39"/></literal></expr></else></ternary><operator pos:line="9" pos:column="39">)<pos:position pos:line="9" pos:column="40"/></operator> <operator pos:line="9" pos:column="41">&lt;&lt;<pos:position pos:line="9" pos:column="49"/></operator> <literal type="string" pos:line="9" pos:column="44">" "<pos:position pos:line="9" pos:column="47"/></literal> <operator pos:line="9" pos:column="48">&lt;&lt;<pos:position pos:line="9" pos:column="56"/></operator>
           <call><name pos:line="10" pos:column="12">storeKeyText<pos:position pos:line="10" pos:column="24"/></name><argument_list pos:line="10" pos:column="24">(<argument><expr><name pos:line="10" pos:column="25">key<pos:position pos:line="10" pos:column="28"/></name></expr></argument>)<pos:position pos:line="10" pos:column="29"/></argument_list></call></expr></argument>  )<pos:position pos:line="10" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="33"/></expr_stmt>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">NULL<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">!=<pos:position pos:line="12" pos:column="16"/></operator> <name pos:line="12" pos:column="17">e<pos:position pos:line="12" pos:column="18"/></name></expr>)<pos:position pos:line="12" pos:column="19"/></condition><then pos:line="12" pos:column="19">
        <block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="9">mem<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">=<pos:position pos:line="13" pos:column="14"/></operator> <name><name pos:line="13" pos:column="15">e<pos:position pos:line="13" pos:column="16"/></name><operator pos:line="13" pos:column="16">-&gt;<pos:position pos:line="13" pos:column="21"/></operator><name pos:line="13" pos:column="18">mem_obj<pos:position pos:line="13" pos:column="25"/></name></name></expr>;<pos:position pos:line="13" pos:column="26"/></expr_stmt></block></then></if>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><operator pos:line="15" pos:column="9">(<pos:position pos:line="15" pos:column="10"/></operator><name pos:line="15" pos:column="10">p<pos:position pos:line="15" pos:column="11"/></name> <operator pos:line="15" pos:column="12">=<pos:position pos:line="15" pos:column="13"/></operator> <call><name pos:line="15" pos:column="14">whichPeer<pos:position pos:line="15" pos:column="23"/></name><argument_list pos:line="15" pos:column="23">(<argument><expr><name pos:line="15" pos:column="24">from<pos:position pos:line="15" pos:column="28"/></name></expr></argument>)<pos:position pos:line="15" pos:column="29"/></argument_list></call><operator pos:line="15" pos:column="29">)<pos:position pos:line="15" pos:column="30"/></operator></expr>)<pos:position pos:line="15" pos:column="31"/></condition><then pos:line="15" pos:column="31">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="9">neighborAliveHtcp<pos:position pos:line="16" pos:column="26"/></name><argument_list pos:line="16" pos:column="26">(<argument><expr><name pos:line="16" pos:column="27">p<pos:position pos:line="16" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="30">mem<pos:position pos:line="16" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="35">htcp<pos:position pos:line="16" pos:column="39"/></name></expr></argument>)<pos:position pos:line="16" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="41"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="18" pos:column="5">/* Does the entry exist? */</comment>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name pos:line="19" pos:column="9">NULL<pos:position pos:line="19" pos:column="13"/></name> <operator pos:line="19" pos:column="14">==<pos:position pos:line="19" pos:column="16"/></operator> <name pos:line="19" pos:column="17">e<pos:position pos:line="19" pos:column="18"/></name></expr>)<pos:position pos:line="19" pos:column="19"/></condition><then pos:line="19" pos:column="19"> <block pos:line="19" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">debugs<pos:position pos:line="20" pos:column="15"/></name><argument_list pos:line="20" pos:column="15">(<argument><expr><literal type="number" pos:line="20" pos:column="16">12<pos:position pos:line="20" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="20">3<pos:position pos:line="20" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="23">"neighyborsHtcpReply: Cache key '"<pos:position pos:line="20" pos:column="57"/></literal> <operator pos:line="20" pos:column="58">&lt;&lt;<pos:position pos:line="20" pos:column="66"/></operator> <call><name pos:line="20" pos:column="61">storeKeyText<pos:position pos:line="20" pos:column="73"/></name><argument_list pos:line="20" pos:column="73">(<argument><expr><name pos:line="20" pos:column="74">key<pos:position pos:line="20" pos:column="77"/></name></expr></argument>)<pos:position pos:line="20" pos:column="78"/></argument_list></call> <operator pos:line="20" pos:column="79">&lt;&lt;<pos:position pos:line="20" pos:column="87"/></operator> <literal type="string" pos:line="20" pos:column="82">"' not found"<pos:position pos:line="20" pos:column="95"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="96"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="97"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">neighborCountIgnored<pos:position pos:line="21" pos:column="29"/></name><argument_list pos:line="21" pos:column="29">(<argument><expr><name pos:line="21" pos:column="30">p<pos:position pos:line="21" pos:column="31"/></name></expr></argument>)<pos:position pos:line="21" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="33"/></expr_stmt>
        <return pos:line="22" pos:column="9">return;<pos:position pos:line="22" pos:column="16"/></return>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="25" pos:column="5">/* check if someone is already fetching it */</comment>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><call><name pos:line="26" pos:column="9">EBIT_TEST<pos:position pos:line="26" pos:column="18"/></name><argument_list pos:line="26" pos:column="18">(<argument><expr><name><name pos:line="26" pos:column="19">e<pos:position pos:line="26" pos:column="20"/></name><operator pos:line="26" pos:column="20">-&gt;<pos:position pos:line="26" pos:column="25"/></operator><name pos:line="26" pos:column="22">flags<pos:position pos:line="26" pos:column="27"/></name></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="29">ENTRY_DISPATCHED<pos:position pos:line="26" pos:column="45"/></name></expr></argument>)<pos:position pos:line="26" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="47"/></condition><then pos:line="26" pos:column="47"> <block pos:line="26" pos:column="48">{
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">debugs<pos:position pos:line="27" pos:column="15"/></name><argument_list pos:line="27" pos:column="15">(<argument><expr><literal type="number" pos:line="27" pos:column="16">15<pos:position pos:line="27" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="20">3<pos:position pos:line="27" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="23">"neighborsUdpAck: '"<pos:position pos:line="27" pos:column="43"/></literal> <operator pos:line="27" pos:column="44">&lt;&lt;<pos:position pos:line="27" pos:column="52"/></operator> <call><name pos:line="27" pos:column="47">storeKeyText<pos:position pos:line="27" pos:column="59"/></name><argument_list pos:line="27" pos:column="59">(<argument><expr><name pos:line="27" pos:column="60">key<pos:position pos:line="27" pos:column="63"/></name></expr></argument>)<pos:position pos:line="27" pos:column="64"/></argument_list></call> <operator pos:line="27" pos:column="65">&lt;&lt;<pos:position pos:line="27" pos:column="73"/></operator> <literal type="string" pos:line="27" pos:column="68">"' already being fetched."<pos:position pos:line="27" pos:column="94"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="95"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="96"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">neighborCountIgnored<pos:position pos:line="28" pos:column="29"/></name><argument_list pos:line="28" pos:column="29">(<argument><expr><name pos:line="28" pos:column="30">p<pos:position pos:line="28" pos:column="31"/></name></expr></argument>)<pos:position pos:line="28" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="33"/></expr_stmt>
        <return pos:line="29" pos:column="9">return;<pos:position pos:line="29" pos:column="16"/></return>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>

    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><name pos:line="32" pos:column="9">mem<pos:position pos:line="32" pos:column="12"/></name> <operator pos:line="32" pos:column="13">==<pos:position pos:line="32" pos:column="15"/></operator> <name pos:line="32" pos:column="16">NULL<pos:position pos:line="32" pos:column="20"/></name></expr>)<pos:position pos:line="32" pos:column="21"/></condition><then pos:line="32" pos:column="21"> <block pos:line="32" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="33" pos:column="9">debugs<pos:position pos:line="33" pos:column="15"/></name><argument_list pos:line="33" pos:column="15">(<argument><expr><literal type="number" pos:line="33" pos:column="16">15<pos:position pos:line="33" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="20">2<pos:position pos:line="33" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="23">"Ignoring reply for missing mem_obj: "<pos:position pos:line="33" pos:column="61"/></literal> <operator pos:line="33" pos:column="62">&lt;&lt;<pos:position pos:line="33" pos:column="70"/></operator> <call><name pos:line="33" pos:column="65">storeKeyText<pos:position pos:line="33" pos:column="77"/></name><argument_list pos:line="33" pos:column="77">(<argument><expr><name pos:line="33" pos:column="78">key<pos:position pos:line="33" pos:column="81"/></name></expr></argument>)<pos:position pos:line="33" pos:column="82"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="84"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="34" pos:column="9">neighborCountIgnored<pos:position pos:line="34" pos:column="29"/></name><argument_list pos:line="34" pos:column="29">(<argument><expr><name pos:line="34" pos:column="30">p<pos:position pos:line="34" pos:column="31"/></name></expr></argument>)<pos:position pos:line="34" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="33"/></expr_stmt>
        <return pos:line="35" pos:column="9">return;<pos:position pos:line="35" pos:column="16"/></return>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if>

    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><name><name pos:line="38" pos:column="9">e<pos:position pos:line="38" pos:column="10"/></name><operator pos:line="38" pos:column="10">-&gt;<pos:position pos:line="38" pos:column="15"/></operator><name pos:line="38" pos:column="12">ping_status<pos:position pos:line="38" pos:column="23"/></name></name> <operator pos:line="38" pos:column="24">!=<pos:position pos:line="38" pos:column="26"/></operator> <name pos:line="38" pos:column="27">PING_WAITING<pos:position pos:line="38" pos:column="39"/></name></expr>)<pos:position pos:line="38" pos:column="40"/></condition><then pos:line="38" pos:column="40"> <block pos:line="38" pos:column="41">{
        <expr_stmt><expr><call><name pos:line="39" pos:column="9">debugs<pos:position pos:line="39" pos:column="15"/></name><argument_list pos:line="39" pos:column="15">(<argument><expr><literal type="number" pos:line="39" pos:column="16">15<pos:position pos:line="39" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="20">2<pos:position pos:line="39" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="23">"neighborsUdpAck: Entry "<pos:position pos:line="39" pos:column="48"/></literal> <operator pos:line="39" pos:column="49">&lt;&lt;<pos:position pos:line="39" pos:column="57"/></operator> <call><name pos:line="39" pos:column="52">storeKeyText<pos:position pos:line="39" pos:column="64"/></name><argument_list pos:line="39" pos:column="64">(<argument><expr><name pos:line="39" pos:column="65">key<pos:position pos:line="39" pos:column="68"/></name></expr></argument>)<pos:position pos:line="39" pos:column="69"/></argument_list></call> <operator pos:line="39" pos:column="70">&lt;&lt;<pos:position pos:line="39" pos:column="78"/></operator> <literal type="string" pos:line="39" pos:column="73">" is not PING_WAITING"<pos:position pos:line="39" pos:column="95"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="96"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="97"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="40" pos:column="9">neighborCountIgnored<pos:position pos:line="40" pos:column="29"/></name><argument_list pos:line="40" pos:column="29">(<argument><expr><name pos:line="40" pos:column="30">p<pos:position pos:line="40" pos:column="31"/></name></expr></argument>)<pos:position pos:line="40" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="33"/></expr_stmt>
        <return pos:line="41" pos:column="9">return;<pos:position pos:line="41" pos:column="16"/></return>
    }<pos:position pos:line="42" pos:column="6"/></block></then></if>

    <if pos:line="44" pos:column="5">if <condition pos:line="44" pos:column="8">(<expr><name><name pos:line="44" pos:column="9">e<pos:position pos:line="44" pos:column="10"/></name><operator pos:line="44" pos:column="10">-&gt;<pos:position pos:line="44" pos:column="15"/></operator><name pos:line="44" pos:column="12">lock_count<pos:position pos:line="44" pos:column="22"/></name></name> <operator pos:line="44" pos:column="23">==<pos:position pos:line="44" pos:column="25"/></operator> <literal type="number" pos:line="44" pos:column="26">0<pos:position pos:line="44" pos:column="27"/></literal></expr>)<pos:position pos:line="44" pos:column="28"/></condition><then pos:line="44" pos:column="28"> <block pos:line="44" pos:column="29">{
        <comment type="line" pos:line="45" pos:column="9">// TODO: many entries are unlocked; why is this reported at level 1?</comment>
        <expr_stmt><expr><call><name pos:line="46" pos:column="9">debugs<pos:position pos:line="46" pos:column="15"/></name><argument_list pos:line="46" pos:column="15">(<argument><expr><literal type="number" pos:line="46" pos:column="16">12<pos:position pos:line="46" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="20">DBG_IMPORTANT<pos:position pos:line="46" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="35">"neighborsUdpAck: '"<pos:position pos:line="46" pos:column="55"/></literal> <operator pos:line="46" pos:column="56">&lt;&lt;<pos:position pos:line="46" pos:column="64"/></operator> <call><name pos:line="46" pos:column="59">storeKeyText<pos:position pos:line="46" pos:column="71"/></name><argument_list pos:line="46" pos:column="71">(<argument><expr><name pos:line="46" pos:column="72">key<pos:position pos:line="46" pos:column="75"/></name></expr></argument>)<pos:position pos:line="46" pos:column="76"/></argument_list></call> <operator pos:line="46" pos:column="77">&lt;&lt;<pos:position pos:line="46" pos:column="85"/></operator> <literal type="string" pos:line="46" pos:column="80">"' has no locks"<pos:position pos:line="46" pos:column="96"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="98"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="47" pos:column="9">neighborCountIgnored<pos:position pos:line="47" pos:column="29"/></name><argument_list pos:line="47" pos:column="29">(<argument><expr><name pos:line="47" pos:column="30">p<pos:position pos:line="47" pos:column="31"/></name></expr></argument>)<pos:position pos:line="47" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="33"/></expr_stmt>
        <return pos:line="48" pos:column="9">return;<pos:position pos:line="48" pos:column="16"/></return>
    }<pos:position pos:line="49" pos:column="6"/></block></then></if>

    <if pos:line="51" pos:column="5">if <condition pos:line="51" pos:column="8">(<expr><name pos:line="51" pos:column="9">p<pos:position pos:line="51" pos:column="10"/></name></expr>)<pos:position pos:line="51" pos:column="11"/></condition><then pos:line="51" pos:column="11"> <block pos:line="51" pos:column="12">{
        <expr_stmt><expr><name pos:line="52" pos:column="9">ntype<pos:position pos:line="52" pos:column="14"/></name> <operator pos:line="52" pos:column="15">=<pos:position pos:line="52" pos:column="16"/></operator> <call><name pos:line="52" pos:column="17">neighborType<pos:position pos:line="52" pos:column="29"/></name><argument_list pos:line="52" pos:column="29">(<argument><expr><name pos:line="52" pos:column="30">p<pos:position pos:line="52" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="52" pos:column="33">mem<pos:position pos:line="52" pos:column="36"/></name><operator pos:line="52" pos:column="36">-&gt;<pos:position pos:line="52" pos:column="41"/></operator><name pos:line="52" pos:column="38">request<pos:position pos:line="52" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="53" pos:column="9">neighborUpdateRtt<pos:position pos:line="53" pos:column="26"/></name><argument_list pos:line="53" pos:column="26">(<argument><expr><name pos:line="53" pos:column="27">p<pos:position pos:line="53" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="30">mem<pos:position pos:line="53" pos:column="33"/></name></expr></argument>)<pos:position pos:line="53" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="54" pos:column="6"/></block></then></if>

    <if pos:line="56" pos:column="5">if <condition pos:line="56" pos:column="8">(<expr><call><name pos:line="56" pos:column="9">ignoreMulticastReply<pos:position pos:line="56" pos:column="29"/></name><argument_list pos:line="56" pos:column="29">(<argument><expr><name pos:line="56" pos:column="30">p<pos:position pos:line="56" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="33">mem<pos:position pos:line="56" pos:column="36"/></name></expr></argument>)<pos:position pos:line="56" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="56" pos:column="38"/></condition><then pos:line="56" pos:column="38"> <block pos:line="56" pos:column="39">{
        <expr_stmt><expr><call><name pos:line="57" pos:column="9">neighborCountIgnored<pos:position pos:line="57" pos:column="29"/></name><argument_list pos:line="57" pos:column="29">(<argument><expr><name pos:line="57" pos:column="30">p<pos:position pos:line="57" pos:column="31"/></name></expr></argument>)<pos:position pos:line="57" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="33"/></expr_stmt>
        <return pos:line="58" pos:column="9">return;<pos:position pos:line="58" pos:column="16"/></return>
    }<pos:position pos:line="59" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="61" pos:column="5">debugs<pos:position pos:line="61" pos:column="11"/></name><argument_list pos:line="61" pos:column="11">(<argument><expr><literal type="number" pos:line="61" pos:column="12">15<pos:position pos:line="61" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="61" pos:column="16">3<pos:position pos:line="61" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="19">"neighborsHtcpReply: e = "<pos:position pos:line="61" pos:column="45"/></literal> <operator pos:line="61" pos:column="46">&lt;&lt;<pos:position pos:line="61" pos:column="54"/></operator> <name pos:line="61" pos:column="49">e<pos:position pos:line="61" pos:column="50"/></name></expr></argument>)<pos:position pos:line="61" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="62" pos:column="5">mem<pos:position pos:line="62" pos:column="8"/></name><operator pos:line="62" pos:column="8">-&gt;<pos:position pos:line="62" pos:column="13"/></operator><name pos:line="62" pos:column="10">ping_reply_callback<pos:position pos:line="62" pos:column="29"/></name></name><argument_list pos:line="62" pos:column="29">(<argument><expr><name pos:line="62" pos:column="30">p<pos:position pos:line="62" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="33">ntype<pos:position pos:line="62" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="62" pos:column="40">AnyP<pos:position pos:line="62" pos:column="44"/></name><operator pos:line="62" pos:column="44">::<pos:position pos:line="62" pos:column="46"/></operator><name pos:line="62" pos:column="46">PROTO_HTCP<pos:position pos:line="62" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="58">htcp<pos:position pos:line="62" pos:column="62"/></name></expr></argument>, <argument><expr><name><name pos:line="62" pos:column="64">mem<pos:position pos:line="62" pos:column="67"/></name><operator pos:line="62" pos:column="67">-&gt;<pos:position pos:line="62" pos:column="72"/></operator><name pos:line="62" pos:column="69">ircb_data<pos:position pos:line="62" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="62" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="80"/></expr_stmt>
}<pos:position pos:line="63" pos:column="2"/></block></function></unit>
