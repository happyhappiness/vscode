<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6422_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">IcmpSquid<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">SendEcho<pos:position pos:line="2" pos:column="20"/></name></name><parameter_list pos:line="2" pos:column="20">(<parameter><decl><type><name><name pos:line="2" pos:column="21">Ip<pos:position pos:line="2" pos:column="23"/></name><operator pos:line="2" pos:column="23">::<pos:position pos:line="2" pos:column="25"/></operator><name pos:line="2" pos:column="25">Address<pos:position pos:line="2" pos:column="32"/></name></name> <modifier pos:line="2" pos:column="33">&amp;<pos:position pos:line="2" pos:column="38"/></modifier></type><name pos:line="2" pos:column="34">to<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="38">int<pos:position pos:line="2" pos:column="41"/></name></type> <name pos:line="2" pos:column="42">opcode<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="50">const<pos:position pos:line="2" pos:column="55"/></specifier> <name pos:line="2" pos:column="56">char<pos:position pos:line="2" pos:column="60"/></name> <modifier pos:line="2" pos:column="61">*<pos:position pos:line="2" pos:column="62"/></modifier></type><name pos:line="2" pos:column="62">payload<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="71">int<pos:position pos:line="2" pos:column="74"/></name></type> <name pos:line="2" pos:column="75">len<pos:position pos:line="2" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="79"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><specifier pos:line="4" pos:column="5">static<pos:position pos:line="4" pos:column="11"/></specifier> <type><name pos:line="4" pos:column="12">pingerEchoData<pos:position pos:line="4" pos:column="26"/></name></type> <name pos:line="4" pos:column="27">pecho<pos:position pos:line="4" pos:column="32"/></name></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">x<pos:position pos:line="5" pos:column="10"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="12">slen<pos:position pos:line="5" pos:column="16"/></name></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>

    <comment type="block" format="doxygen" pos:line="7" pos:column="5">/** \li Does nothing if the pinger socket is not available. */</comment>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">icmp_sock<pos:position pos:line="8" pos:column="18"/></name> <operator pos:line="8" pos:column="19">&lt;<pos:position pos:line="8" pos:column="23"/></operator> <literal type="number" pos:line="8" pos:column="21">0<pos:position pos:line="8" pos:column="22"/></literal></expr>)<pos:position pos:line="8" pos:column="23"/></condition><then pos:line="8" pos:column="23"> <block pos:line="8" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">debugs<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><literal type="number" pos:line="9" pos:column="16">37<pos:position pos:line="9" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="20">2<pos:position pos:line="9" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="23">HERE<pos:position pos:line="9" pos:column="27"/></name> <operator pos:line="9" pos:column="28">&lt;&lt;<pos:position pos:line="9" pos:column="36"/></operator> <literal type="string" pos:line="9" pos:column="31">" Socket Closed. Aborted send to "<pos:position pos:line="9" pos:column="65"/></literal> <operator pos:line="9" pos:column="66">&lt;&lt;<pos:position pos:line="9" pos:column="74"/></operator> <name><name pos:line="9" pos:column="69">pecho<pos:position pos:line="9" pos:column="74"/></name><operator pos:line="9" pos:column="74">.<pos:position pos:line="9" pos:column="75"/></operator><name pos:line="9" pos:column="75">to<pos:position pos:line="9" pos:column="77"/></name></name> <operator pos:line="9" pos:column="78">&lt;&lt;<pos:position pos:line="9" pos:column="86"/></operator> <literal type="string" pos:line="9" pos:column="81">", opcode "<pos:position pos:line="9" pos:column="92"/></literal> <operator pos:line="9" pos:column="93">&lt;&lt;<pos:position pos:line="9" pos:column="101"/></operator> <name pos:line="9" pos:column="96">opcode<pos:position pos:line="9" pos:column="102"/></name> <operator pos:line="9" pos:column="103">&lt;&lt;<pos:position pos:line="9" pos:column="111"/></operator> <literal type="string" pos:line="9" pos:column="106">", len "<pos:position pos:line="9" pos:column="114"/></literal> <operator pos:line="9" pos:column="115">&lt;&lt;<pos:position pos:line="9" pos:column="123"/></operator> <name><name pos:line="9" pos:column="118">pecho<pos:position pos:line="9" pos:column="123"/></name><operator pos:line="9" pos:column="123">.<pos:position pos:line="9" pos:column="124"/></operator><name pos:line="9" pos:column="124">psize<pos:position pos:line="9" pos:column="129"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="130"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="131"/></expr_stmt>
        <return pos:line="10" pos:column="9">return;<pos:position pos:line="10" pos:column="16"/></return>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>

    <comment type="block" format="doxygen" pos:line="13" pos:column="5">/** \li  If no payload is given or is set as NULL it will ignore payload and len */</comment>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><operator pos:line="14" pos:column="9">!<pos:position pos:line="14" pos:column="10"/></operator><name pos:line="14" pos:column="10">payload<pos:position pos:line="14" pos:column="17"/></name></expr>)<pos:position pos:line="14" pos:column="18"/></condition><then pos:line="14" pos:column="18">
        <block type="pseudo"><expr_stmt><expr><name pos:line="15" pos:column="9">len<pos:position pos:line="15" pos:column="12"/></name> <operator pos:line="15" pos:column="13">=<pos:position pos:line="15" pos:column="14"/></operator> <literal type="number" pos:line="15" pos:column="15">0<pos:position pos:line="15" pos:column="16"/></literal></expr>;<pos:position pos:line="15" pos:column="17"/></expr_stmt></block></then>

    <comment type="block" format="doxygen" pos:line="17" pos:column="5">/** \li Otherwise if len is 0, uses strlen() to detect length of payload.
     \bug This will result in part of the payload being truncated if it contains a NULL character.
     \bug Or it may result in a buffer over-run if the payload is not nul-terminated properly.
     */</comment>
    <elseif pos:line="21" pos:column="5">else <if pos:line="21" pos:column="10">if <condition pos:line="21" pos:column="13">(<expr><name pos:line="21" pos:column="14">payload<pos:position pos:line="21" pos:column="21"/></name> <operator pos:line="21" pos:column="22">&amp;&amp;<pos:position pos:line="21" pos:column="32"/></operator> <name pos:line="21" pos:column="25">len<pos:position pos:line="21" pos:column="28"/></name> <operator pos:line="21" pos:column="29">==<pos:position pos:line="21" pos:column="31"/></operator> <literal type="number" pos:line="21" pos:column="32">0<pos:position pos:line="21" pos:column="33"/></literal></expr>)<pos:position pos:line="21" pos:column="34"/></condition><then pos:line="21" pos:column="34">
        <block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="9">len<pos:position pos:line="22" pos:column="12"/></name> <operator pos:line="22" pos:column="13">=<pos:position pos:line="22" pos:column="14"/></operator> <call><name pos:line="22" pos:column="15">strlen<pos:position pos:line="22" pos:column="21"/></name><argument_list pos:line="22" pos:column="21">(<argument><expr><name pos:line="22" pos:column="22">payload<pos:position pos:line="22" pos:column="29"/></name></expr></argument>)<pos:position pos:line="22" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="31"/></expr_stmt></block></then></if></elseif></if>

    <comment type="block" format="doxygen" pos:line="24" pos:column="5">/** \li
     \bug If length specified or auto-detected is greater than the possible payload squid will die with an assert.
     \todo This should perhapse be reduced to a truncated payload? or no payload. A WARNING is due anyway.
     */</comment>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">assert<pos:position pos:line="28" pos:column="11"/></name><argument_list pos:line="28" pos:column="11">(<argument><expr><name pos:line="28" pos:column="12">len<pos:position pos:line="28" pos:column="15"/></name> <operator pos:line="28" pos:column="16">&lt;=<pos:position pos:line="28" pos:column="21"/></operator> <name pos:line="28" pos:column="19">PINGER_PAYLOAD_SZ<pos:position pos:line="28" pos:column="36"/></name></expr></argument>)<pos:position pos:line="28" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="38"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="30" pos:column="5">pecho<pos:position pos:line="30" pos:column="10"/></name><operator pos:line="30" pos:column="10">.<pos:position pos:line="30" pos:column="11"/></operator><name pos:line="30" pos:column="11">to<pos:position pos:line="30" pos:column="13"/></name></name> <operator pos:line="30" pos:column="14">=<pos:position pos:line="30" pos:column="15"/></operator> <name pos:line="30" pos:column="16">to<pos:position pos:line="30" pos:column="18"/></name></expr>;<pos:position pos:line="30" pos:column="19"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="32" pos:column="5">pecho<pos:position pos:line="32" pos:column="10"/></name><operator pos:line="32" pos:column="10">.<pos:position pos:line="32" pos:column="11"/></operator><name pos:line="32" pos:column="11">opcode<pos:position pos:line="32" pos:column="17"/></name></name> <operator pos:line="32" pos:column="18">=<pos:position pos:line="32" pos:column="19"/></operator> <operator pos:line="32" pos:column="20">(<pos:position pos:line="32" pos:column="21"/></operator><name pos:line="32" pos:column="21">unsigned<pos:position pos:line="32" pos:column="29"/></name> <name pos:line="32" pos:column="30">char<pos:position pos:line="32" pos:column="34"/></name><operator pos:line="32" pos:column="34">)<pos:position pos:line="32" pos:column="35"/></operator> <name pos:line="32" pos:column="36">opcode<pos:position pos:line="32" pos:column="42"/></name></expr>;<pos:position pos:line="32" pos:column="43"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="34" pos:column="5">pecho<pos:position pos:line="34" pos:column="10"/></name><operator pos:line="34" pos:column="10">.<pos:position pos:line="34" pos:column="11"/></operator><name pos:line="34" pos:column="11">psize<pos:position pos:line="34" pos:column="16"/></name></name> <operator pos:line="34" pos:column="17">=<pos:position pos:line="34" pos:column="18"/></operator> <name pos:line="34" pos:column="19">len<pos:position pos:line="34" pos:column="22"/></name></expr>;<pos:position pos:line="34" pos:column="23"/></expr_stmt>

    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><name pos:line="36" pos:column="9">len<pos:position pos:line="36" pos:column="12"/></name> <operator pos:line="36" pos:column="13">&gt;<pos:position pos:line="36" pos:column="17"/></operator> <literal type="number" pos:line="36" pos:column="15">0<pos:position pos:line="36" pos:column="16"/></literal></expr>)<pos:position pos:line="36" pos:column="17"/></condition><then pos:line="36" pos:column="17">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="9">memcpy<pos:position pos:line="37" pos:column="15"/></name><argument_list pos:line="37" pos:column="15">(<argument><expr><name><name pos:line="37" pos:column="16">pecho<pos:position pos:line="37" pos:column="21"/></name><operator pos:line="37" pos:column="21">.<pos:position pos:line="37" pos:column="22"/></operator><name pos:line="37" pos:column="22">payload<pos:position pos:line="37" pos:column="29"/></name></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="31">payload<pos:position pos:line="37" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="40">len<pos:position pos:line="37" pos:column="43"/></name></expr></argument>)<pos:position pos:line="37" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="45"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name pos:line="39" pos:column="5">slen<pos:position pos:line="39" pos:column="9"/></name> <operator pos:line="39" pos:column="10">=<pos:position pos:line="39" pos:column="11"/></operator> <sizeof pos:line="39" pos:column="12">sizeof<argument_list pos:line="39" pos:column="18">(<argument><expr><name pos:line="39" pos:column="19">pingerEchoData<pos:position pos:line="39" pos:column="33"/></name></expr></argument>)<pos:position pos:line="39" pos:column="34"/></argument_list></sizeof> <operator pos:line="39" pos:column="35">-<pos:position pos:line="39" pos:column="36"/></operator> <name pos:line="39" pos:column="37">PINGER_PAYLOAD_SZ<pos:position pos:line="39" pos:column="54"/></name> <operator pos:line="39" pos:column="55">+<pos:position pos:line="39" pos:column="56"/></operator> <name><name pos:line="39" pos:column="57">pecho<pos:position pos:line="39" pos:column="62"/></name><operator pos:line="39" pos:column="62">.<pos:position pos:line="39" pos:column="63"/></operator><name pos:line="39" pos:column="63">psize<pos:position pos:line="39" pos:column="68"/></name></name></expr>;<pos:position pos:line="39" pos:column="69"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="41" pos:column="5">debugs<pos:position pos:line="41" pos:column="11"/></name><argument_list pos:line="41" pos:column="11">(<argument><expr><literal type="number" pos:line="41" pos:column="12">37<pos:position pos:line="41" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="16">2<pos:position pos:line="41" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="19">HERE<pos:position pos:line="41" pos:column="23"/></name> <operator pos:line="41" pos:column="24">&lt;&lt;<pos:position pos:line="41" pos:column="32"/></operator> <literal type="string" pos:line="41" pos:column="27">"to "<pos:position pos:line="41" pos:column="32"/></literal> <operator pos:line="41" pos:column="33">&lt;&lt;<pos:position pos:line="41" pos:column="41"/></operator> <name><name pos:line="41" pos:column="36">pecho<pos:position pos:line="41" pos:column="41"/></name><operator pos:line="41" pos:column="41">.<pos:position pos:line="41" pos:column="42"/></operator><name pos:line="41" pos:column="42">to<pos:position pos:line="41" pos:column="44"/></name></name> <operator pos:line="41" pos:column="45">&lt;&lt;<pos:position pos:line="41" pos:column="53"/></operator> <literal type="string" pos:line="41" pos:column="48">", opcode "<pos:position pos:line="41" pos:column="59"/></literal> <operator pos:line="41" pos:column="60">&lt;&lt;<pos:position pos:line="41" pos:column="68"/></operator> <name pos:line="41" pos:column="63">opcode<pos:position pos:line="41" pos:column="69"/></name> <operator pos:line="41" pos:column="70">&lt;&lt;<pos:position pos:line="41" pos:column="78"/></operator> <literal type="string" pos:line="41" pos:column="73">", len "<pos:position pos:line="41" pos:column="81"/></literal> <operator pos:line="41" pos:column="82">&lt;&lt;<pos:position pos:line="41" pos:column="90"/></operator> <name><name pos:line="41" pos:column="85">pecho<pos:position pos:line="41" pos:column="90"/></name><operator pos:line="41" pos:column="90">.<pos:position pos:line="41" pos:column="91"/></operator><name pos:line="41" pos:column="91">psize<pos:position pos:line="41" pos:column="96"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="98"/></expr_stmt>

    <expr_stmt><expr><name pos:line="43" pos:column="5">x<pos:position pos:line="43" pos:column="6"/></name> <operator pos:line="43" pos:column="7">=<pos:position pos:line="43" pos:column="8"/></operator> <call><name pos:line="43" pos:column="9">comm_udp_send<pos:position pos:line="43" pos:column="22"/></name><argument_list pos:line="43" pos:column="22">(<argument><expr><name pos:line="43" pos:column="23">icmp_sock<pos:position pos:line="43" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="34">(<pos:position pos:line="43" pos:column="35"/></operator><name pos:line="43" pos:column="35">char<pos:position pos:line="43" pos:column="39"/></name> <operator pos:line="43" pos:column="40">*<pos:position pos:line="43" pos:column="41"/></operator><operator pos:line="43" pos:column="41">)<pos:position pos:line="43" pos:column="42"/></operator><operator pos:line="43" pos:column="42">&amp;<pos:position pos:line="43" pos:column="47"/></operator><name pos:line="43" pos:column="43">pecho<pos:position pos:line="43" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="50">slen<pos:position pos:line="43" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="56">0<pos:position pos:line="43" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="59"/></expr_stmt>

    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><name pos:line="45" pos:column="9">x<pos:position pos:line="45" pos:column="10"/></name> <operator pos:line="45" pos:column="11">&lt;<pos:position pos:line="45" pos:column="15"/></operator> <literal type="number" pos:line="45" pos:column="13">0<pos:position pos:line="45" pos:column="14"/></literal></expr>)<pos:position pos:line="45" pos:column="15"/></condition><then pos:line="45" pos:column="15"> <block pos:line="45" pos:column="16">{
        <expr_stmt><expr><call><name pos:line="46" pos:column="9">debugs<pos:position pos:line="46" pos:column="15"/></name><argument_list pos:line="46" pos:column="15">(<argument><expr><literal type="number" pos:line="46" pos:column="16">37<pos:position pos:line="46" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="20">DBG_IMPORTANT<pos:position pos:line="46" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="35">HERE<pos:position pos:line="46" pos:column="39"/></name> <operator pos:line="46" pos:column="40">&lt;&lt;<pos:position pos:line="46" pos:column="48"/></operator> <literal type="string" pos:line="46" pos:column="43">"send: "<pos:position pos:line="46" pos:column="51"/></literal> <operator pos:line="46" pos:column="52">&lt;&lt;<pos:position pos:line="46" pos:column="60"/></operator> <call><name pos:line="46" pos:column="55">xstrerror<pos:position pos:line="46" pos:column="64"/></name><argument_list pos:line="46" pos:column="64">()<pos:position pos:line="46" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="46" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="68"/></expr_stmt>

        <comment type="block" format="doxygen" pos:line="48" pos:column="9">/** \li  If the send results in ECONNREFUSED or EPIPE errors from helper, will cleanly shutdown the module. */</comment>
        <comment type="block" format="doxygen" pos:line="49" pos:column="9">/** \todo This should try restarting the helper a few times?? before giving up? */</comment>
        <if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><name pos:line="50" pos:column="13">errno<pos:position pos:line="50" pos:column="18"/></name> <operator pos:line="50" pos:column="19">==<pos:position pos:line="50" pos:column="21"/></operator> <name pos:line="50" pos:column="22">ECONNREFUSED<pos:position pos:line="50" pos:column="34"/></name> <operator pos:line="50" pos:column="35">||<pos:position pos:line="50" pos:column="37"/></operator> <name pos:line="50" pos:column="38">errno<pos:position pos:line="50" pos:column="43"/></name> <operator pos:line="50" pos:column="44">==<pos:position pos:line="50" pos:column="46"/></operator> <name pos:line="50" pos:column="47">EPIPE<pos:position pos:line="50" pos:column="52"/></name></expr>)<pos:position pos:line="50" pos:column="53"/></condition><then pos:line="50" pos:column="53"> <block pos:line="50" pos:column="54">{
            <expr_stmt><expr><call><name pos:line="51" pos:column="13">Close<pos:position pos:line="51" pos:column="18"/></name><argument_list pos:line="51" pos:column="18">()<pos:position pos:line="51" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="21"/></expr_stmt>
            <return pos:line="52" pos:column="13">return;<pos:position pos:line="52" pos:column="20"/></return>
        }<pos:position pos:line="53" pos:column="10"/></block></then></if>
        <comment type="block" format="doxygen" pos:line="54" pos:column="9">/** All other send errors are ignored. */</comment>
    }<pos:position pos:line="55" pos:column="6"/></block></then> <elseif pos:line="55" pos:column="7">else <if pos:line="55" pos:column="12">if <condition pos:line="55" pos:column="15">(<expr><name pos:line="55" pos:column="16">x<pos:position pos:line="55" pos:column="17"/></name> <operator pos:line="55" pos:column="18">!=<pos:position pos:line="55" pos:column="20"/></operator> <name pos:line="55" pos:column="21">slen<pos:position pos:line="55" pos:column="25"/></name></expr>)<pos:position pos:line="55" pos:column="26"/></condition><then pos:line="55" pos:column="26"> <block pos:line="55" pos:column="27">{
        <expr_stmt><expr><call><name pos:line="56" pos:column="9">debugs<pos:position pos:line="56" pos:column="15"/></name><argument_list pos:line="56" pos:column="15">(<argument><expr><literal type="number" pos:line="56" pos:column="16">37<pos:position pos:line="56" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="56" pos:column="20">DBG_IMPORTANT<pos:position pos:line="56" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="35">HERE<pos:position pos:line="56" pos:column="39"/></name> <operator pos:line="56" pos:column="40">&lt;&lt;<pos:position pos:line="56" pos:column="48"/></operator> <literal type="string" pos:line="56" pos:column="43">"Wrote "<pos:position pos:line="56" pos:column="51"/></literal> <operator pos:line="56" pos:column="52">&lt;&lt;<pos:position pos:line="56" pos:column="60"/></operator> <name pos:line="56" pos:column="55">x<pos:position pos:line="56" pos:column="56"/></name> <operator pos:line="56" pos:column="57">&lt;&lt;<pos:position pos:line="56" pos:column="65"/></operator> <literal type="string" pos:line="56" pos:column="60">" of "<pos:position pos:line="56" pos:column="66"/></literal> <operator pos:line="56" pos:column="67">&lt;&lt;<pos:position pos:line="56" pos:column="75"/></operator> <name pos:line="56" pos:column="70">slen<pos:position pos:line="56" pos:column="74"/></name> <operator pos:line="56" pos:column="75">&lt;&lt;<pos:position pos:line="56" pos:column="83"/></operator> <literal type="string" pos:line="56" pos:column="78">" bytes"<pos:position pos:line="56" pos:column="86"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="88"/></expr_stmt>
    }<pos:position pos:line="57" pos:column="6"/></block></then></if></elseif></if>
}<pos:position pos:line="58" pos:column="2"/></block></function></unit>
