<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4568_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">acl_ip_data<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">DecodeMask<pos:position pos:line="2" pos:column="24"/></name></name><parameter_list pos:line="2" pos:column="24">(<parameter><decl><type><specifier pos:line="2" pos:column="25">const<pos:position pos:line="2" pos:column="30"/></specifier> <name pos:line="2" pos:column="31">char<pos:position pos:line="2" pos:column="35"/></name> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type><name pos:line="2" pos:column="37">asc<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="42">Ip<pos:position pos:line="2" pos:column="44"/></name><operator pos:line="2" pos:column="44">::<pos:position pos:line="2" pos:column="46"/></operator><name pos:line="2" pos:column="46">Address<pos:position pos:line="2" pos:column="53"/></name></name> <modifier pos:line="2" pos:column="54">&amp;<pos:position pos:line="2" pos:column="59"/></modifier></type><name pos:line="2" pos:column="55">mask<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="61">int<pos:position pos:line="2" pos:column="64"/></name></type> <name pos:line="2" pos:column="65">ctype<pos:position pos:line="2" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="71"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">junk<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">a1<pos:position pos:line="5" pos:column="11"/></name> <init pos:line="5" pos:column="12">= <expr><literal type="number" pos:line="5" pos:column="14">0<pos:position pos:line="5" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>

    <comment type="block" pos:line="7" pos:column="5">/* default is a mask that doesn't change any IP */</comment>
    <expr_stmt><expr><call><name><name pos:line="8" pos:column="5">mask<pos:position pos:line="8" pos:column="9"/></name><operator pos:line="8" pos:column="9">.<pos:position pos:line="8" pos:column="10"/></operator><name pos:line="8" pos:column="10">setNoAddr<pos:position pos:line="8" pos:column="19"/></name></name><argument_list pos:line="8" pos:column="19">()<pos:position pos:line="8" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="22"/></expr_stmt>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><operator pos:line="10" pos:column="9">!<pos:position pos:line="10" pos:column="10"/></operator><name pos:line="10" pos:column="10">asc<pos:position pos:line="10" pos:column="13"/></name> <operator pos:line="10" pos:column="14">||<pos:position pos:line="10" pos:column="16"/></operator> <operator pos:line="10" pos:column="17">!<pos:position pos:line="10" pos:column="18"/></operator><operator pos:line="10" pos:column="18">*<pos:position pos:line="10" pos:column="19"/></operator><name pos:line="10" pos:column="19">asc<pos:position pos:line="10" pos:column="22"/></name></expr>)<pos:position pos:line="10" pos:column="23"/></condition><then pos:line="10" pos:column="23"> <block pos:line="10" pos:column="24">{
        <return pos:line="11" pos:column="9">return <expr><literal type="boolean" pos:line="11" pos:column="16">true<pos:position pos:line="11" pos:column="20"/></literal></expr>;<pos:position pos:line="11" pos:column="21"/></return>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="14" pos:column="5">/* An int mask 128, 32 */</comment>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><operator pos:line="15" pos:column="9">(<pos:position pos:line="15" pos:column="10"/></operator><call><name pos:line="15" pos:column="10">sscanf<pos:position pos:line="15" pos:column="16"/></name><argument_list pos:line="15" pos:column="16">(<argument><expr><name pos:line="15" pos:column="17">asc<pos:position pos:line="15" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="22">"%d%c"<pos:position pos:line="15" pos:column="28"/></literal></expr></argument>, <argument><expr><operator pos:line="15" pos:column="30">&amp;<pos:position pos:line="15" pos:column="35"/></operator><name pos:line="15" pos:column="31">a1<pos:position pos:line="15" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="35">&amp;<pos:position pos:line="15" pos:column="40"/></operator><name pos:line="15" pos:column="36">junk<pos:position pos:line="15" pos:column="40"/></name></expr></argument>)<pos:position pos:line="15" pos:column="41"/></argument_list></call><operator pos:line="15" pos:column="41">==<pos:position pos:line="15" pos:column="43"/></operator><literal type="number" pos:line="15" pos:column="43">1<pos:position pos:line="15" pos:column="44"/></literal><operator pos:line="15" pos:column="44">)<pos:position pos:line="15" pos:column="45"/></operator> <operator pos:line="15" pos:column="46">&amp;&amp;<pos:position pos:line="15" pos:column="56"/></operator>
            <operator pos:line="16" pos:column="13">(<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="14">a1<pos:position pos:line="16" pos:column="16"/></name> <operator pos:line="16" pos:column="17">&lt;=<pos:position pos:line="16" pos:column="22"/></operator> <literal type="number" pos:line="16" pos:column="20">128<pos:position pos:line="16" pos:column="23"/></literal><operator pos:line="16" pos:column="23">)<pos:position pos:line="16" pos:column="24"/></operator> <operator pos:line="16" pos:column="25">&amp;&amp;<pos:position pos:line="16" pos:column="35"/></operator> <operator pos:line="16" pos:column="28">(<pos:position pos:line="16" pos:column="29"/></operator><name pos:line="16" pos:column="29">a1<pos:position pos:line="16" pos:column="31"/></name>  <operator pos:line="16" pos:column="33">&gt;=<pos:position pos:line="16" pos:column="38"/></operator> <literal type="number" pos:line="16" pos:column="36">0<pos:position pos:line="16" pos:column="37"/></literal><operator pos:line="16" pos:column="37">)<pos:position pos:line="16" pos:column="38"/></operator></expr>
       )<pos:position pos:line="17" pos:column="9"/></condition><then pos:line="17" pos:column="9"> <block pos:line="17" pos:column="10">{
        <return pos:line="18" pos:column="9">return <expr><call><name><name pos:line="18" pos:column="16">mask<pos:position pos:line="18" pos:column="20"/></name><operator pos:line="18" pos:column="20">.<pos:position pos:line="18" pos:column="21"/></operator><name pos:line="18" pos:column="21">applyMask<pos:position pos:line="18" pos:column="30"/></name></name><argument_list pos:line="18" pos:column="30">(<argument><expr><name pos:line="18" pos:column="31">a1<pos:position pos:line="18" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="35">ctype<pos:position pos:line="18" pos:column="40"/></name></expr></argument>)<pos:position pos:line="18" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="42"/></return>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="21" pos:column="5">/* dotted notation */</comment>
    <comment type="block" pos:line="22" pos:column="5">/* assignment returns true if asc contained an IP address as text */</comment>
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><operator pos:line="23" pos:column="9">(<pos:position pos:line="23" pos:column="10"/></operator><name pos:line="23" pos:column="10">mask<pos:position pos:line="23" pos:column="14"/></name> <operator pos:line="23" pos:column="15">=<pos:position pos:line="23" pos:column="16"/></operator> <name pos:line="23" pos:column="17">asc<pos:position pos:line="23" pos:column="20"/></name><operator pos:line="23" pos:column="20">)<pos:position pos:line="23" pos:column="21"/></operator></expr>)<pos:position pos:line="23" pos:column="22"/></condition><then pos:line="23" pos:column="22"> <block pos:line="23" pos:column="23">{
        <comment type="block" pos:line="24" pos:column="9">/* HACK: IPv4 netmasks don't cleanly map to IPv6 masks. */</comment>
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">debugs<pos:position pos:line="25" pos:column="15"/></name><argument_list pos:line="25" pos:column="15">(<argument><expr><literal type="number" pos:line="25" pos:column="16">28<pos:position pos:line="25" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="20">DBG_CRITICAL<pos:position pos:line="25" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="34">"WARNING: Netmasks are deprecated. Please use CIDR masks instead."<pos:position pos:line="25" pos:column="100"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="101"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="102"/></expr_stmt>
        <if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><call><name><name pos:line="26" pos:column="13">mask<pos:position pos:line="26" pos:column="17"/></name><operator pos:line="26" pos:column="17">.<pos:position pos:line="26" pos:column="18"/></operator><name pos:line="26" pos:column="18">isIPv4<pos:position pos:line="26" pos:column="24"/></name></name><argument_list pos:line="26" pos:column="24">()<pos:position pos:line="26" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="27"/></condition><then pos:line="26" pos:column="27"> <block pos:line="26" pos:column="28">{
            <comment type="block" pos:line="27" pos:column="13">/* locate what CIDR mask was _probably_ meant to be in its native protocol format. */</comment>
            <comment type="block" pos:line="28" pos:column="13">/* this will completely crap out with a security fail-open if the admin is playing mask tricks */</comment>
            <comment type="block" pos:line="29" pos:column="13">/* however, thats their fault, and we do warn. see bug 2601 for the effects if we don't do this. */</comment>
            <decl_stmt><decl><type><name pos:line="30" pos:column="13">unsigned<pos:position pos:line="30" pos:column="21"/></name> <name pos:line="30" pos:column="22">int<pos:position pos:line="30" pos:column="25"/></name></type> <name pos:line="30" pos:column="26">m<pos:position pos:line="30" pos:column="27"/></name> <init pos:line="30" pos:column="28">= <expr><call><name><name pos:line="30" pos:column="30">mask<pos:position pos:line="30" pos:column="34"/></name><operator pos:line="30" pos:column="34">.<pos:position pos:line="30" pos:column="35"/></operator><name pos:line="30" pos:column="35">cidr<pos:position pos:line="30" pos:column="39"/></name></name><argument_list pos:line="30" pos:column="39">()<pos:position pos:line="30" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="30" pos:column="42"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="31" pos:column="13">debugs<pos:position pos:line="31" pos:column="19"/></name><argument_list pos:line="31" pos:column="19">(<argument><expr><literal type="number" pos:line="31" pos:column="20">28<pos:position pos:line="31" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="24">DBG_CRITICAL<pos:position pos:line="31" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="38">"WARNING: IPv4 netmasks are particularly nasty when used to compare IPv6 to IPv4 ranges."<pos:position pos:line="31" pos:column="127"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="128"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="129"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="32" pos:column="13">debugs<pos:position pos:line="32" pos:column="19"/></name><argument_list pos:line="32" pos:column="19">(<argument><expr><literal type="number" pos:line="32" pos:column="20">28<pos:position pos:line="32" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="24">DBG_CRITICAL<pos:position pos:line="32" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="38">"WARNING: For now we will assume you meant to write /"<pos:position pos:line="32" pos:column="92"/></literal> <operator pos:line="32" pos:column="93">&lt;&lt;<pos:position pos:line="32" pos:column="101"/></operator> <name pos:line="32" pos:column="96">m<pos:position pos:line="32" pos:column="97"/></name></expr></argument>)<pos:position pos:line="32" pos:column="98"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="99"/></expr_stmt>
            <comment type="block" pos:line="33" pos:column="13">/* reset the mask completely, and crop to the CIDR boundary back properly. */</comment>
            <expr_stmt><expr><call><name><name pos:line="34" pos:column="13">mask<pos:position pos:line="34" pos:column="17"/></name><operator pos:line="34" pos:column="17">.<pos:position pos:line="34" pos:column="18"/></operator><name pos:line="34" pos:column="18">setNoAddr<pos:position pos:line="34" pos:column="27"/></name></name><argument_list pos:line="34" pos:column="27">()<pos:position pos:line="34" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="30"/></expr_stmt>
            <return pos:line="35" pos:column="13">return <expr><call><name><name pos:line="35" pos:column="20">mask<pos:position pos:line="35" pos:column="24"/></name><operator pos:line="35" pos:column="24">.<pos:position pos:line="35" pos:column="25"/></operator><name pos:line="35" pos:column="25">applyMask<pos:position pos:line="35" pos:column="34"/></name></name><argument_list pos:line="35" pos:column="34">(<argument><expr><name pos:line="35" pos:column="35">m<pos:position pos:line="35" pos:column="36"/></name></expr></argument>,<argument><expr><name pos:line="35" pos:column="37">AF_INET<pos:position pos:line="35" pos:column="44"/></name></expr></argument>)<pos:position pos:line="35" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="46"/></return>
        }<pos:position pos:line="36" pos:column="10"/></block></then></if>
        <return pos:line="37" pos:column="9">return <expr><literal type="boolean" pos:line="37" pos:column="16">true<pos:position pos:line="37" pos:column="20"/></literal></expr>;<pos:position pos:line="37" pos:column="21"/></return>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>

    <return pos:line="40" pos:column="5">return <expr><literal type="boolean" pos:line="40" pos:column="12">false<pos:position pos:line="40" pos:column="17"/></literal></expr>;<pos:position pos:line="40" pos:column="18"/></return>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
