<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6124_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">AsyncJob<pos:position pos:line="1" pos:column="14"/></name><operator pos:line="1" pos:column="14">::<pos:position pos:line="1" pos:column="16"/></operator><name pos:line="1" pos:column="16">deleteThis<pos:position pos:line="1" pos:column="26"/></name></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><specifier pos:line="1" pos:column="27">const<pos:position pos:line="1" pos:column="32"/></specifier> <name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">aReason<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="47"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="3" pos:column="5">Must<pos:position pos:line="3" pos:column="9"/></name><argument_list pos:line="3" pos:column="9">(<argument><expr><name pos:line="3" pos:column="10">aReason<pos:position pos:line="3" pos:column="17"/></name></expr></argument>)<pos:position pos:line="3" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><name pos:line="4" pos:column="5">stopReason<pos:position pos:line="4" pos:column="15"/></name> <operator pos:line="4" pos:column="16">=<pos:position pos:line="4" pos:column="17"/></operator> <name pos:line="4" pos:column="18">aReason<pos:position pos:line="4" pos:column="25"/></name></expr>;<pos:position pos:line="4" pos:column="26"/></expr_stmt>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><name pos:line="5" pos:column="9">inCall<pos:position pos:line="5" pos:column="15"/></name> <operator pos:line="5" pos:column="16">!=<pos:position pos:line="5" pos:column="18"/></operator> <name pos:line="5" pos:column="19">NULL<pos:position pos:line="5" pos:column="23"/></name></expr>)<pos:position pos:line="5" pos:column="24"/></condition><then pos:line="5" pos:column="24"> <block pos:line="5" pos:column="25">{
        <comment type="line" pos:line="6" pos:column="9">// if we are in-call, then the call wrapper will delete us</comment>
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">debugs<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><literal type="number" pos:line="7" pos:column="16">93<pos:position pos:line="7" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="20">4<pos:position pos:line="7" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="23">typeName<pos:position pos:line="7" pos:column="31"/></name> <operator pos:line="7" pos:column="32">&lt;&lt;<pos:position pos:line="7" pos:column="40"/></operator> <literal type="string" pos:line="7" pos:column="35">" will NOT delete in-call job, reason: "<pos:position pos:line="7" pos:column="75"/></literal> <operator pos:line="7" pos:column="76">&lt;&lt;<pos:position pos:line="7" pos:column="84"/></operator> <name pos:line="7" pos:column="79">stopReason<pos:position pos:line="7" pos:column="89"/></name></expr></argument>)<pos:position pos:line="7" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="91"/></expr_stmt>
        <return pos:line="8" pos:column="9">return;<pos:position pos:line="8" pos:column="16"/></return>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="11" pos:column="5">// there is no call wrapper waiting for our return, so we fake it</comment>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">debugs<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><literal type="number" pos:line="12" pos:column="12">93<pos:position pos:line="12" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="16">5<pos:position pos:line="12" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="19">typeName<pos:position pos:line="12" pos:column="27"/></name> <operator pos:line="12" pos:column="28">&lt;&lt;<pos:position pos:line="12" pos:column="36"/></operator> <literal type="string" pos:line="12" pos:column="31">" will delete this, reason: "<pos:position pos:line="12" pos:column="60"/></literal> <operator pos:line="12" pos:column="61">&lt;&lt;<pos:position pos:line="12" pos:column="69"/></operator> <name pos:line="12" pos:column="64">stopReason<pos:position pos:line="12" pos:column="74"/></name></expr></argument>)<pos:position pos:line="12" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="76"/></expr_stmt>
    <decl_stmt><decl><type><name><name pos:line="13" pos:column="5">CbcPointer<pos:position pos:line="13" pos:column="15"/></name><argument_list type="generic" pos:line="13" pos:column="15">&lt;<argument><expr><name pos:line="13" pos:column="16">AsyncJob<pos:position pos:line="13" pos:column="24"/></name></expr></argument>&gt;<pos:position pos:line="13" pos:column="28"/></argument_list></name></type> <name pos:line="13" pos:column="26">self<pos:position pos:line="13" pos:column="30"/></name><argument_list pos:line="13" pos:column="30">(<argument><expr><name pos:line="13" pos:column="31">this<pos:position pos:line="13" pos:column="35"/></name></expr></argument>)<pos:position pos:line="13" pos:column="36"/></argument_list></decl>;<pos:position pos:line="13" pos:column="37"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="14" pos:column="5">AsyncCall<pos:position pos:line="14" pos:column="14"/></name><operator pos:line="14" pos:column="14">::<pos:position pos:line="14" pos:column="16"/></operator><name pos:line="14" pos:column="16">Pointer<pos:position pos:line="14" pos:column="23"/></name></name></type> <name pos:line="14" pos:column="24">fakeCall<pos:position pos:line="14" pos:column="32"/></name> <init pos:line="14" pos:column="33">= <expr><call><name pos:line="14" pos:column="35">asyncCall<pos:position pos:line="14" pos:column="44"/></name><argument_list pos:line="14" pos:column="44">(<argument><expr><literal type="number" pos:line="14" pos:column="45">93<pos:position pos:line="14" pos:column="47"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="14" pos:column="48">4<pos:position pos:line="14" pos:column="49"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="51">"FAKE-deleteThis"<pos:position pos:line="14" pos:column="68"/></literal></expr></argument>,
                                            <argument><expr><call><name pos:line="15" pos:column="45">JobMemFun<pos:position pos:line="15" pos:column="54"/></name><argument_list pos:line="15" pos:column="54">(<argument><expr><name pos:line="15" pos:column="55">self<pos:position pos:line="15" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="61">&amp;<pos:position pos:line="15" pos:column="66"/></operator><name><name pos:line="15" pos:column="62">AsyncJob<pos:position pos:line="15" pos:column="70"/></name><operator pos:line="15" pos:column="70">::<pos:position pos:line="15" pos:column="72"/></operator><name pos:line="15" pos:column="72">deleteThis<pos:position pos:line="15" pos:column="82"/></name></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="84">aReason<pos:position pos:line="15" pos:column="91"/></name></expr></argument>)<pos:position pos:line="15" pos:column="92"/></argument_list></call></expr></argument>)<pos:position pos:line="15" pos:column="93"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="94"/></decl_stmt>
    <expr_stmt><expr><name pos:line="16" pos:column="5">inCall<pos:position pos:line="16" pos:column="11"/></name> <operator pos:line="16" pos:column="12">=<pos:position pos:line="16" pos:column="13"/></operator> <name pos:line="16" pos:column="14">fakeCall<pos:position pos:line="16" pos:column="22"/></name></expr>;<pos:position pos:line="16" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">callEnd<pos:position pos:line="17" pos:column="12"/></name><argument_list pos:line="17" pos:column="12">()<pos:position pos:line="17" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="15"/></expr_stmt>
<comment type="line" pos:line="18" pos:column="1">//    delete fakeCall;</comment>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
