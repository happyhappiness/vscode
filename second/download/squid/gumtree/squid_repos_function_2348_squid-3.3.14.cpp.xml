<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2348_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">storeUnregister<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name pos:line="2" pos:column="17">store_client<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type> <name pos:line="2" pos:column="32">sc<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="36">StoreEntry<pos:position pos:line="2" pos:column="46"/></name> <modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier></type> <name pos:line="2" pos:column="49">e<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="52">void<pos:position pos:line="2" pos:column="56"/></name> <modifier pos:line="2" pos:column="57">*<pos:position pos:line="2" pos:column="58"/></modifier></type><name pos:line="2" pos:column="58">data<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="63"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">MemObject<pos:position pos:line="4" pos:column="14"/></name> <modifier pos:line="4" pos:column="15">*<pos:position pos:line="4" pos:column="16"/></modifier></type><name pos:line="4" pos:column="16">mem<pos:position pos:line="4" pos:column="19"/></name> <init pos:line="4" pos:column="20">= <expr><name><name pos:line="4" pos:column="22">e<pos:position pos:line="4" pos:column="23"/></name><operator pos:line="4" pos:column="23">-&gt;<pos:position pos:line="4" pos:column="28"/></operator><name pos:line="4" pos:column="25">mem_obj<pos:position pos:line="4" pos:column="32"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>
<cpp:if pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">if<pos:position pos:line="5" pos:column="4"/></cpp:directive> <expr><name pos:line="5" pos:column="5">STORE_CLIENT_LIST_DEBUG<pos:position pos:line="5" pos:column="28"/></name></expr></cpp:if>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><name pos:line="7" pos:column="12">sc<pos:position pos:line="7" pos:column="14"/></name> <operator pos:line="7" pos:column="15">==<pos:position pos:line="7" pos:column="17"/></operator> <call><name pos:line="7" pos:column="18">storeClientListSearch<pos:position pos:line="7" pos:column="39"/></name><argument_list pos:line="7" pos:column="39">(<argument><expr><name><name pos:line="7" pos:column="40">e<pos:position pos:line="7" pos:column="41"/></name><operator pos:line="7" pos:column="41">-&gt;<pos:position pos:line="7" pos:column="46"/></operator><name pos:line="7" pos:column="43">mem_obj<pos:position pos:line="7" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="52">data<pos:position pos:line="7" pos:column="56"/></name></expr></argument>)<pos:position pos:line="7" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="59"/></expr_stmt>
<cpp:endif pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">endif<pos:position pos:line="8" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">mem<pos:position pos:line="10" pos:column="12"/></name> <operator pos:line="10" pos:column="13">==<pos:position pos:line="10" pos:column="15"/></operator> <name pos:line="10" pos:column="16">NULL<pos:position pos:line="10" pos:column="20"/></name></expr>)<pos:position pos:line="10" pos:column="21"/></condition><then pos:line="10" pos:column="21">
        <block type="pseudo"><return pos:line="11" pos:column="9">return <expr><literal type="number" pos:line="11" pos:column="16">0<pos:position pos:line="11" pos:column="17"/></literal></expr>;<pos:position pos:line="11" pos:column="18"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="13" pos:column="5">debugs<pos:position pos:line="13" pos:column="11"/></name><argument_list pos:line="13" pos:column="11">(<argument><expr><literal type="number" pos:line="13" pos:column="12">90<pos:position pos:line="13" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="16">3<pos:position pos:line="13" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="19">"storeUnregister: called for '"<pos:position pos:line="13" pos:column="50"/></literal> <operator pos:line="13" pos:column="51">&lt;&lt;<pos:position pos:line="13" pos:column="59"/></operator> <call><name><name pos:line="13" pos:column="54">e<pos:position pos:line="13" pos:column="55"/></name><operator pos:line="13" pos:column="55">-&gt;<pos:position pos:line="13" pos:column="60"/></operator><name pos:line="13" pos:column="57">getMD5Text<pos:position pos:line="13" pos:column="67"/></name></name><argument_list pos:line="13" pos:column="67">()<pos:position pos:line="13" pos:column="69"/></argument_list></call> <operator pos:line="13" pos:column="70">&lt;&lt;<pos:position pos:line="13" pos:column="78"/></operator> <literal type="string" pos:line="13" pos:column="73">"'"<pos:position pos:line="13" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="78"/></expr_stmt>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">sc<pos:position pos:line="15" pos:column="11"/></name> <operator pos:line="15" pos:column="12">==<pos:position pos:line="15" pos:column="14"/></operator> <name pos:line="15" pos:column="15">NULL<pos:position pos:line="15" pos:column="19"/></name></expr>)<pos:position pos:line="15" pos:column="20"/></condition><then pos:line="15" pos:column="20"> <block pos:line="15" pos:column="21">{
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">debugs<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><literal type="number" pos:line="16" pos:column="16">90<pos:position pos:line="16" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="20">3<pos:position pos:line="16" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="23">"storeUnregister: No matching client for '"<pos:position pos:line="16" pos:column="66"/></literal> <operator pos:line="16" pos:column="67">&lt;&lt;<pos:position pos:line="16" pos:column="75"/></operator> <call><name><name pos:line="16" pos:column="70">e<pos:position pos:line="16" pos:column="71"/></name><operator pos:line="16" pos:column="71">-&gt;<pos:position pos:line="16" pos:column="76"/></operator><name pos:line="16" pos:column="73">getMD5Text<pos:position pos:line="16" pos:column="83"/></name></name><argument_list pos:line="16" pos:column="83">()<pos:position pos:line="16" pos:column="85"/></argument_list></call> <operator pos:line="16" pos:column="86">&lt;&lt;<pos:position pos:line="16" pos:column="94"/></operator> <literal type="string" pos:line="16" pos:column="89">"'"<pos:position pos:line="16" pos:column="92"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="94"/></expr_stmt>
        <return pos:line="17" pos:column="9">return <expr><literal type="number" pos:line="17" pos:column="16">0<pos:position pos:line="17" pos:column="17"/></literal></expr>;<pos:position pos:line="17" pos:column="18"/></return>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><call><name><name pos:line="20" pos:column="9">mem<pos:position pos:line="20" pos:column="12"/></name><operator pos:line="20" pos:column="12">-&gt;<pos:position pos:line="20" pos:column="17"/></operator><name pos:line="20" pos:column="14">clientCount<pos:position pos:line="20" pos:column="25"/></name></name><argument_list pos:line="20" pos:column="25">()<pos:position pos:line="20" pos:column="27"/></argument_list></call> <operator pos:line="20" pos:column="28">==<pos:position pos:line="20" pos:column="30"/></operator> <literal type="number" pos:line="20" pos:column="31">0<pos:position pos:line="20" pos:column="32"/></literal></expr>)<pos:position pos:line="20" pos:column="33"/></condition><then pos:line="20" pos:column="33"> <block pos:line="20" pos:column="34">{
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">debugs<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><literal type="number" pos:line="21" pos:column="16">90<pos:position pos:line="21" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="20">3<pos:position pos:line="21" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="23">"storeUnregister: Consistency failure - store client being unregistered is not in the mem object's list for '"<pos:position pos:line="21" pos:column="133"/></literal> <operator pos:line="21" pos:column="134">&lt;&lt;<pos:position pos:line="21" pos:column="142"/></operator> <call><name><name pos:line="21" pos:column="137">e<pos:position pos:line="21" pos:column="138"/></name><operator pos:line="21" pos:column="138">-&gt;<pos:position pos:line="21" pos:column="143"/></operator><name pos:line="21" pos:column="140">getMD5Text<pos:position pos:line="21" pos:column="150"/></name></name><argument_list pos:line="21" pos:column="150">()<pos:position pos:line="21" pos:column="152"/></argument_list></call> <operator pos:line="21" pos:column="153">&lt;&lt;<pos:position pos:line="21" pos:column="161"/></operator> <literal type="string" pos:line="21" pos:column="156">"'"<pos:position pos:line="21" pos:column="159"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="160"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="161"/></expr_stmt>
        <return pos:line="22" pos:column="9">return <expr><literal type="number" pos:line="22" pos:column="16">0<pos:position pos:line="22" pos:column="17"/></literal></expr>;<pos:position pos:line="22" pos:column="18"/></return>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="25" pos:column="5">dlinkDelete<pos:position pos:line="25" pos:column="16"/></name><argument_list pos:line="25" pos:column="16">(<argument><expr><operator pos:line="25" pos:column="17">&amp;<pos:position pos:line="25" pos:column="22"/></operator><name><name pos:line="25" pos:column="18">sc<pos:position pos:line="25" pos:column="20"/></name><operator pos:line="25" pos:column="20">-&gt;<pos:position pos:line="25" pos:column="25"/></operator><name pos:line="25" pos:column="22">node<pos:position pos:line="25" pos:column="26"/></name></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="28">&amp;<pos:position pos:line="25" pos:column="33"/></operator><name><name pos:line="25" pos:column="29">mem<pos:position pos:line="25" pos:column="32"/></name><operator pos:line="25" pos:column="32">-&gt;<pos:position pos:line="25" pos:column="37"/></operator><name pos:line="25" pos:column="34">clients<pos:position pos:line="25" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="26" pos:column="5">--<pos:position pos:line="26" pos:column="7"/></operator> <name><name pos:line="26" pos:column="8">mem<pos:position pos:line="26" pos:column="11"/></name><operator pos:line="26" pos:column="11">-&gt;<pos:position pos:line="26" pos:column="16"/></operator><name pos:line="26" pos:column="13">nclients<pos:position pos:line="26" pos:column="21"/></name></name></expr>;<pos:position pos:line="26" pos:column="22"/></expr_stmt>

    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><name><name pos:line="28" pos:column="9">e<pos:position pos:line="28" pos:column="10"/></name><operator pos:line="28" pos:column="10">-&gt;<pos:position pos:line="28" pos:column="15"/></operator><name pos:line="28" pos:column="12">store_status<pos:position pos:line="28" pos:column="24"/></name></name> <operator pos:line="28" pos:column="25">==<pos:position pos:line="28" pos:column="27"/></operator> <name pos:line="28" pos:column="28">STORE_OK<pos:position pos:line="28" pos:column="36"/></name> <operator pos:line="28" pos:column="37">&amp;&amp;<pos:position pos:line="28" pos:column="47"/></operator> <name><name pos:line="28" pos:column="40">e<pos:position pos:line="28" pos:column="41"/></name><operator pos:line="28" pos:column="41">-&gt;<pos:position pos:line="28" pos:column="46"/></operator><name pos:line="28" pos:column="43">swap_status<pos:position pos:line="28" pos:column="54"/></name></name> <operator pos:line="28" pos:column="55">!=<pos:position pos:line="28" pos:column="57"/></operator> <name pos:line="28" pos:column="58">SWAPOUT_DONE<pos:position pos:line="28" pos:column="70"/></name></expr>)<pos:position pos:line="28" pos:column="71"/></condition><then pos:line="28" pos:column="71">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="29" pos:column="9">e<pos:position pos:line="29" pos:column="10"/></name><operator pos:line="29" pos:column="10">-&gt;<pos:position pos:line="29" pos:column="15"/></operator><name pos:line="29" pos:column="12">swapOut<pos:position pos:line="29" pos:column="19"/></name></name><argument_list pos:line="29" pos:column="19">()<pos:position pos:line="29" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="22"/></expr_stmt></block></then></if>

    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><name><name pos:line="31" pos:column="9">sc<pos:position pos:line="31" pos:column="11"/></name><operator pos:line="31" pos:column="11">-&gt;<pos:position pos:line="31" pos:column="16"/></operator><name pos:line="31" pos:column="13">swapin_sio<pos:position pos:line="31" pos:column="23"/></name></name> <operator pos:line="31" pos:column="24">!=<pos:position pos:line="31" pos:column="26"/></operator> <name pos:line="31" pos:column="27">NULL<pos:position pos:line="31" pos:column="31"/></name></expr>)<pos:position pos:line="31" pos:column="32"/></condition><then pos:line="31" pos:column="32"> <block pos:line="31" pos:column="33">{
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">storeClose<pos:position pos:line="32" pos:column="19"/></name><argument_list pos:line="32" pos:column="19">(<argument><expr><name><name pos:line="32" pos:column="20">sc<pos:position pos:line="32" pos:column="22"/></name><operator pos:line="32" pos:column="22">-&gt;<pos:position pos:line="32" pos:column="27"/></operator><name pos:line="32" pos:column="24">swapin_sio<pos:position pos:line="32" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="36">StoreIOState<pos:position pos:line="32" pos:column="48"/></name><operator pos:line="32" pos:column="48">::<pos:position pos:line="32" pos:column="50"/></operator><name pos:line="32" pos:column="50">readerDone<pos:position pos:line="32" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="62"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="33" pos:column="9">sc<pos:position pos:line="33" pos:column="11"/></name><operator pos:line="33" pos:column="11">-&gt;<pos:position pos:line="33" pos:column="16"/></operator><name pos:line="33" pos:column="13">swapin_sio<pos:position pos:line="33" pos:column="23"/></name></name> <operator pos:line="33" pos:column="24">=<pos:position pos:line="33" pos:column="25"/></operator> <name pos:line="33" pos:column="26">NULL<pos:position pos:line="33" pos:column="30"/></name></expr>;<pos:position pos:line="33" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="34" pos:column="9">++<pos:position pos:line="34" pos:column="11"/></operator><name><name pos:line="34" pos:column="11">statCounter<pos:position pos:line="34" pos:column="22"/></name><operator pos:line="34" pos:column="22">.<pos:position pos:line="34" pos:column="23"/></operator><name pos:line="34" pos:column="23">swap<pos:position pos:line="34" pos:column="27"/></name><operator pos:line="34" pos:column="27">.<pos:position pos:line="34" pos:column="28"/></operator><name pos:line="34" pos:column="28">ins<pos:position pos:line="34" pos:column="31"/></name></name></expr>;<pos:position pos:line="34" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>

    <if pos:line="37" pos:column="5">if <condition pos:line="37" pos:column="8">(<expr><call><name><name pos:line="37" pos:column="9">sc<pos:position pos:line="37" pos:column="11"/></name><operator pos:line="37" pos:column="11">-&gt;<pos:position pos:line="37" pos:column="16"/></operator><name pos:line="37" pos:column="13">_callback<pos:position pos:line="37" pos:column="22"/></name><operator pos:line="37" pos:column="22">.<pos:position pos:line="37" pos:column="23"/></operator><name pos:line="37" pos:column="23">pending<pos:position pos:line="37" pos:column="30"/></name></name><argument_list pos:line="37" pos:column="30">()<pos:position pos:line="37" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="33"/></condition><then pos:line="37" pos:column="33"> <block pos:line="37" pos:column="34">{
        <comment type="block" pos:line="38" pos:column="9">/* callback with ssize = -1 to indicate unexpected termination */</comment>
        <expr_stmt><expr><call><name pos:line="39" pos:column="9">debugs<pos:position pos:line="39" pos:column="15"/></name><argument_list pos:line="39" pos:column="15">(<argument><expr><literal type="number" pos:line="39" pos:column="16">90<pos:position pos:line="39" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="20">3<pos:position pos:line="39" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="23">"storeUnregister: store_client for "<pos:position pos:line="39" pos:column="59"/></literal> <operator pos:line="39" pos:column="60">&lt;&lt;<pos:position pos:line="39" pos:column="68"/></operator> <name><name pos:line="39" pos:column="63">mem<pos:position pos:line="39" pos:column="66"/></name><operator pos:line="39" pos:column="66">-&gt;<pos:position pos:line="39" pos:column="71"/></operator><name pos:line="39" pos:column="68">url<pos:position pos:line="39" pos:column="71"/></name></name> <operator pos:line="39" pos:column="72">&lt;&lt;<pos:position pos:line="39" pos:column="80"/></operator> <literal type="string" pos:line="39" pos:column="75">" has a callback"<pos:position pos:line="39" pos:column="92"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="94"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="40" pos:column="9">sc<pos:position pos:line="40" pos:column="11"/></name><operator pos:line="40" pos:column="11">-&gt;<pos:position pos:line="40" pos:column="16"/></operator><name pos:line="40" pos:column="13">fail<pos:position pos:line="40" pos:column="17"/></name></name><argument_list pos:line="40" pos:column="17">()<pos:position pos:line="40" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="41" pos:column="6"/></block></then></if>

<cpp:if pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">if<pos:position pos:line="43" pos:column="4"/></cpp:directive> <expr><name pos:line="43" pos:column="5">STORE_CLIENT_LIST_DEBUG<pos:position pos:line="43" pos:column="28"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="44" pos:column="5">cbdataReferenceDone<pos:position pos:line="44" pos:column="24"/></name><argument_list pos:line="44" pos:column="24">(<argument><expr><name><name pos:line="44" pos:column="25">sc<pos:position pos:line="44" pos:column="27"/></name><operator pos:line="44" pos:column="27">-&gt;<pos:position pos:line="44" pos:column="32"/></operator><name pos:line="44" pos:column="29">owner<pos:position pos:line="44" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="36"/></expr_stmt>

<cpp:endif pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">endif<pos:position pos:line="46" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><operator pos:line="48" pos:column="5">delete<pos:position pos:line="48" pos:column="11"/></operator> <name pos:line="48" pos:column="12">sc<pos:position pos:line="48" pos:column="14"/></name></expr>;<pos:position pos:line="48" pos:column="15"/></expr_stmt>

    <comment type="line" pos:line="50" pos:column="5">// This old assert seemed to imply that a locked entry cannot be deleted,</comment>
    <comment type="line" pos:line="51" pos:column="5">// but this entry may be deleted because StoreEntry::abort() unlocks it.</comment>
    <expr_stmt><expr><call><name pos:line="52" pos:column="5">assert<pos:position pos:line="52" pos:column="11"/></name><argument_list pos:line="52" pos:column="11">(<argument><expr><name><name pos:line="52" pos:column="12">e<pos:position pos:line="52" pos:column="13"/></name><operator pos:line="52" pos:column="13">-&gt;<pos:position pos:line="52" pos:column="18"/></operator><name pos:line="52" pos:column="15">lock_count<pos:position pos:line="52" pos:column="25"/></name></name> <operator pos:line="52" pos:column="26">&gt;<pos:position pos:line="52" pos:column="30"/></operator> <literal type="number" pos:line="52" pos:column="28">0<pos:position pos:line="52" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="31"/></expr_stmt>
    <comment type="line" pos:line="53" pos:column="5">// Since lock_count of 1 is not sufficient to prevent entry destruction,</comment>
    <comment type="line" pos:line="54" pos:column="5">// we must lock again so that we can dereference e after CheckQuickAbort().</comment>
    <comment type="line" pos:line="55" pos:column="5">// Do not call expensive StoreEntry::lock() here; e "use" has been counted.</comment>
    <comment type="line" pos:line="56" pos:column="5">// TODO: Separate entry locking from "use" counting to make locking cheap.</comment>
    <expr_stmt><expr><operator pos:line="57" pos:column="5">++<pos:position pos:line="57" pos:column="7"/></operator><name><name pos:line="57" pos:column="7">e<pos:position pos:line="57" pos:column="8"/></name><operator pos:line="57" pos:column="8">-&gt;<pos:position pos:line="57" pos:column="13"/></operator><name pos:line="57" pos:column="10">lock_count<pos:position pos:line="57" pos:column="20"/></name></name></expr>;<pos:position pos:line="57" pos:column="21"/></expr_stmt>

    <if pos:line="59" pos:column="5">if <condition pos:line="59" pos:column="8">(<expr><name><name pos:line="59" pos:column="9">mem<pos:position pos:line="59" pos:column="12"/></name><operator pos:line="59" pos:column="12">-&gt;<pos:position pos:line="59" pos:column="17"/></operator><name pos:line="59" pos:column="14">nclients<pos:position pos:line="59" pos:column="22"/></name></name> <operator pos:line="59" pos:column="23">==<pos:position pos:line="59" pos:column="25"/></operator> <literal type="number" pos:line="59" pos:column="26">0<pos:position pos:line="59" pos:column="27"/></literal></expr>)<pos:position pos:line="59" pos:column="28"/></condition><then pos:line="59" pos:column="28">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="60" pos:column="9">CheckQuickAbort<pos:position pos:line="60" pos:column="24"/></name><argument_list pos:line="60" pos:column="24">(<argument><expr><name pos:line="60" pos:column="25">e<pos:position pos:line="60" pos:column="26"/></name></expr></argument>)<pos:position pos:line="60" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="28"/></expr_stmt></block></then>
    <else pos:line="61" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="62" pos:column="9">mem<pos:position pos:line="62" pos:column="12"/></name><operator pos:line="62" pos:column="12">-&gt;<pos:position pos:line="62" pos:column="17"/></operator><name pos:line="62" pos:column="14">kickReads<pos:position pos:line="62" pos:column="23"/></name></name><argument_list pos:line="62" pos:column="23">()<pos:position pos:line="62" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="26"/></expr_stmt></block></else></if>

<cpp:if pos:line="64" pos:column="1">#<cpp:directive pos:line="64" pos:column="2">if<pos:position pos:line="64" pos:column="4"/></cpp:directive> <expr><name pos:line="64" pos:column="5">USE_ADAPTATION<pos:position pos:line="64" pos:column="19"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name><name pos:line="65" pos:column="5">e<pos:position pos:line="65" pos:column="6"/></name><operator pos:line="65" pos:column="6">-&gt;<pos:position pos:line="65" pos:column="11"/></operator><name pos:line="65" pos:column="8">kickProducer<pos:position pos:line="65" pos:column="20"/></name></name><argument_list pos:line="65" pos:column="20">()<pos:position pos:line="65" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="23"/></expr_stmt>
<cpp:endif pos:line="66" pos:column="1">#<cpp:directive pos:line="66" pos:column="2">endif<pos:position pos:line="66" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name><name pos:line="68" pos:column="5">e<pos:position pos:line="68" pos:column="6"/></name><operator pos:line="68" pos:column="6">-&gt;<pos:position pos:line="68" pos:column="11"/></operator><name pos:line="68" pos:column="8">unlock<pos:position pos:line="68" pos:column="14"/></name></name><argument_list pos:line="68" pos:column="14">()<pos:position pos:line="68" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="17"/></expr_stmt> <comment type="line" pos:line="68" pos:column="18">// after the "++e-&gt;lock_count" above</comment>
    <return pos:line="69" pos:column="5">return <expr><literal type="number" pos:line="69" pos:column="12">1<pos:position pos:line="69" pos:column="13"/></literal></expr>;<pos:position pos:line="69" pos:column="14"/></return>
}<pos:position pos:line="70" pos:column="2"/></block></function></unit>
