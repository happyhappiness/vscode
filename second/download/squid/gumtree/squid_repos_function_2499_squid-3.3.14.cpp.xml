<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2499_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">FtpStateData<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">listenForDataChannel<pos:position pos:line="2" pos:column="35"/></name></name><parameter_list pos:line="2" pos:column="35">(<parameter><decl><type><specifier pos:line="2" pos:column="36">const<pos:position pos:line="2" pos:column="41"/></specifier> <name><name pos:line="2" pos:column="42">Comm<pos:position pos:line="2" pos:column="46"/></name><operator pos:line="2" pos:column="46">::<pos:position pos:line="2" pos:column="48"/></operator><name pos:line="2" pos:column="48">ConnectionPointer<pos:position pos:line="2" pos:column="65"/></name></name> <modifier pos:line="2" pos:column="66">&amp;<pos:position pos:line="2" pos:column="71"/></modifier></type><name pos:line="2" pos:column="67">conn<pos:position pos:line="2" pos:column="71"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="73">const<pos:position pos:line="2" pos:column="78"/></specifier> <name pos:line="2" pos:column="79">char<pos:position pos:line="2" pos:column="83"/></name> <modifier pos:line="2" pos:column="84">*<pos:position pos:line="2" pos:column="85"/></modifier></type><name pos:line="2" pos:column="85">note<pos:position pos:line="2" pos:column="89"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="90"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><operator pos:line="4" pos:column="12">!<pos:position pos:line="4" pos:column="13"/></operator><call><name><name pos:line="4" pos:column="13">Comm<pos:position pos:line="4" pos:column="17"/></name><operator pos:line="4" pos:column="17">::<pos:position pos:line="4" pos:column="19"/></operator><name pos:line="4" pos:column="19">IsConnOpen<pos:position pos:line="4" pos:column="29"/></name></name><argument_list pos:line="4" pos:column="29">(<argument><expr><name><name pos:line="4" pos:column="30">data<pos:position pos:line="4" pos:column="34"/></name><operator pos:line="4" pos:column="34">.<pos:position pos:line="4" pos:column="35"/></operator><name pos:line="4" pos:column="35">conn<pos:position pos:line="4" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="4" pos:column="40"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="42"/></expr_stmt>

    <typedef pos:line="6" pos:column="5">typedef <type><name><name pos:line="6" pos:column="13">CommCbMemFunT<pos:position pos:line="6" pos:column="26"/></name><argument_list type="generic" pos:line="6" pos:column="26">&lt;<argument><expr><name pos:line="6" pos:column="27">FtpStateData<pos:position pos:line="6" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="41">CommAcceptCbParams<pos:position pos:line="6" pos:column="59"/></name></expr></argument>&gt;<pos:position pos:line="6" pos:column="63"/></argument_list></name></type> <name pos:line="6" pos:column="61">AcceptDialer<pos:position pos:line="6" pos:column="73"/></name>;<pos:position pos:line="6" pos:column="74"/></typedef>
    <typedef pos:line="7" pos:column="5">typedef <type><name><name pos:line="7" pos:column="13">AsyncCallT<pos:position pos:line="7" pos:column="23"/></name><argument_list type="generic" pos:line="7" pos:column="23">&lt;<argument><expr><name pos:line="7" pos:column="24">AcceptDialer<pos:position pos:line="7" pos:column="36"/></name></expr></argument>&gt;<pos:position pos:line="7" pos:column="40"/></argument_list></name></type> <name pos:line="7" pos:column="38">AcceptCall<pos:position pos:line="7" pos:column="48"/></name>;<pos:position pos:line="7" pos:column="49"/></typedef>
    <decl_stmt><decl><type><name><name pos:line="8" pos:column="5">RefCount<pos:position pos:line="8" pos:column="13"/></name><argument_list type="generic" pos:line="8" pos:column="13">&lt;<argument><expr><name pos:line="8" pos:column="14">AcceptCall<pos:position pos:line="8" pos:column="24"/></name></expr></argument>&gt;<pos:position pos:line="8" pos:column="28"/></argument_list></name></type> <name pos:line="8" pos:column="26">call<pos:position pos:line="8" pos:column="30"/></name> <init pos:line="8" pos:column="31">= <expr><cast type="static" pos:line="8" pos:column="33">static_cast<argument_list type="generic" pos:line="8" pos:column="44">&lt;<argument><expr><name pos:line="8" pos:column="45">AcceptCall<pos:position pos:line="8" pos:column="55"/></name><operator pos:line="8" pos:column="55">*<pos:position pos:line="8" pos:column="56"/></operator></expr></argument>&gt;<pos:position pos:line="8" pos:column="60"/></argument_list><argument_list pos:line="8" pos:column="57">(<argument><expr><call><name pos:line="8" pos:column="58">JobCallback<pos:position pos:line="8" pos:column="69"/></name><argument_list pos:line="8" pos:column="69">(<argument><expr><literal type="number" pos:line="8" pos:column="70">11<pos:position pos:line="8" pos:column="72"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="74">5<pos:position pos:line="8" pos:column="75"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="77">AcceptDialer<pos:position pos:line="8" pos:column="89"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="91">this<pos:position pos:line="8" pos:column="95"/></name></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="97">FtpStateData<pos:position pos:line="8" pos:column="109"/></name><operator pos:line="8" pos:column="109">::<pos:position pos:line="8" pos:column="111"/></operator><name pos:line="8" pos:column="111">ftpAcceptDataConnection<pos:position pos:line="8" pos:column="134"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="135"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="136"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="8" pos:column="137"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="9" pos:column="5">Subscription<pos:position pos:line="9" pos:column="17"/></name><operator pos:line="9" pos:column="17">::<pos:position pos:line="9" pos:column="19"/></operator><name pos:line="9" pos:column="19">Pointer<pos:position pos:line="9" pos:column="26"/></name></name></type> <name pos:line="9" pos:column="27">sub<pos:position pos:line="9" pos:column="30"/></name> <init pos:line="9" pos:column="31">= <expr><operator pos:line="9" pos:column="33">new<pos:position pos:line="9" pos:column="36"/></operator> <call><name><name pos:line="9" pos:column="37">CallSubscription<pos:position pos:line="9" pos:column="53"/></name><argument_list type="generic" pos:line="9" pos:column="53">&lt;<argument><expr><name pos:line="9" pos:column="54">AcceptCall<pos:position pos:line="9" pos:column="64"/></name></expr></argument>&gt;<pos:position pos:line="9" pos:column="68"/></argument_list></name><argument_list pos:line="9" pos:column="65">(<argument><expr><name pos:line="9" pos:column="66">call<pos:position pos:line="9" pos:column="70"/></name></expr></argument>)<pos:position pos:line="9" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="72"/></decl_stmt>

    <comment type="block" pos:line="11" pos:column="5">/* open the conn if its not already open */</comment>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><operator pos:line="12" pos:column="9">!<pos:position pos:line="12" pos:column="10"/></operator><call><name><name pos:line="12" pos:column="10">Comm<pos:position pos:line="12" pos:column="14"/></name><operator pos:line="12" pos:column="14">::<pos:position pos:line="12" pos:column="16"/></operator><name pos:line="12" pos:column="16">IsConnOpen<pos:position pos:line="12" pos:column="26"/></name></name><argument_list pos:line="12" pos:column="26">(<argument><expr><name pos:line="12" pos:column="27">conn<pos:position pos:line="12" pos:column="31"/></name></expr></argument>)<pos:position pos:line="12" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="33"/></condition><then pos:line="12" pos:column="33"> <block pos:line="12" pos:column="34">{
        <expr_stmt><expr><name><name pos:line="13" pos:column="9">conn<pos:position pos:line="13" pos:column="13"/></name><operator pos:line="13" pos:column="13">-&gt;<pos:position pos:line="13" pos:column="18"/></operator><name pos:line="13" pos:column="15">fd<pos:position pos:line="13" pos:column="17"/></name></name> <operator pos:line="13" pos:column="18">=<pos:position pos:line="13" pos:column="19"/></operator> <call><name pos:line="13" pos:column="20">comm_open_listener<pos:position pos:line="13" pos:column="38"/></name><argument_list pos:line="13" pos:column="38">(<argument><expr><name pos:line="13" pos:column="39">SOCK_STREAM<pos:position pos:line="13" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="52">IPPROTO_TCP<pos:position pos:line="13" pos:column="63"/></name></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="65">conn<pos:position pos:line="13" pos:column="69"/></name><operator pos:line="13" pos:column="69">-&gt;<pos:position pos:line="13" pos:column="74"/></operator><name pos:line="13" pos:column="71">local<pos:position pos:line="13" pos:column="76"/></name></name></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="78">conn<pos:position pos:line="13" pos:column="82"/></name><operator pos:line="13" pos:column="82">-&gt;<pos:position pos:line="13" pos:column="87"/></operator><name pos:line="13" pos:column="84">flags<pos:position pos:line="13" pos:column="89"/></name></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="91">note<pos:position pos:line="13" pos:column="95"/></name></expr></argument>)<pos:position pos:line="13" pos:column="96"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="97"/></expr_stmt>
        <if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><operator pos:line="14" pos:column="13">!<pos:position pos:line="14" pos:column="14"/></operator><call><name><name pos:line="14" pos:column="14">Comm<pos:position pos:line="14" pos:column="18"/></name><operator pos:line="14" pos:column="18">::<pos:position pos:line="14" pos:column="20"/></operator><name pos:line="14" pos:column="20">IsConnOpen<pos:position pos:line="14" pos:column="30"/></name></name><argument_list pos:line="14" pos:column="30">(<argument><expr><name pos:line="14" pos:column="31">conn<pos:position pos:line="14" pos:column="35"/></name></expr></argument>)<pos:position pos:line="14" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="37"/></condition><then pos:line="14" pos:column="37"> <block pos:line="14" pos:column="38">{
            <expr_stmt><expr><call><name pos:line="15" pos:column="13">debugs<pos:position pos:line="15" pos:column="19"/></name><argument_list pos:line="15" pos:column="19">(<argument><expr><literal type="number" pos:line="15" pos:column="20">5<pos:position pos:line="15" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="23">DBG_CRITICAL<pos:position pos:line="15" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="37">HERE<pos:position pos:line="15" pos:column="41"/></name> <operator pos:line="15" pos:column="42">&lt;&lt;<pos:position pos:line="15" pos:column="50"/></operator> <literal type="string" pos:line="15" pos:column="45">"comm_open_listener failed:"<pos:position pos:line="15" pos:column="73"/></literal> <operator pos:line="15" pos:column="74">&lt;&lt;<pos:position pos:line="15" pos:column="82"/></operator> <name><name pos:line="15" pos:column="77">conn<pos:position pos:line="15" pos:column="81"/></name><operator pos:line="15" pos:column="81">-&gt;<pos:position pos:line="15" pos:column="86"/></operator><name pos:line="15" pos:column="83">local<pos:position pos:line="15" pos:column="88"/></name></name> <operator pos:line="15" pos:column="89">&lt;&lt;<pos:position pos:line="15" pos:column="97"/></operator> <literal type="string" pos:line="15" pos:column="92">" error: "<pos:position pos:line="15" pos:column="102"/></literal> <operator pos:line="15" pos:column="103">&lt;&lt;<pos:position pos:line="15" pos:column="111"/></operator> <name pos:line="15" pos:column="106">errno<pos:position pos:line="15" pos:column="111"/></name></expr></argument>)<pos:position pos:line="15" pos:column="112"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="113"/></expr_stmt>
            <return pos:line="16" pos:column="13">return;<pos:position pos:line="16" pos:column="20"/></return>
        }<pos:position pos:line="17" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">debugs<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><literal type="number" pos:line="18" pos:column="16">9<pos:position pos:line="18" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="19">3<pos:position pos:line="18" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="22">HERE<pos:position pos:line="18" pos:column="26"/></name> <operator pos:line="18" pos:column="27">&lt;&lt;<pos:position pos:line="18" pos:column="35"/></operator> <literal type="string" pos:line="18" pos:column="30">"Unconnected data socket created on "<pos:position pos:line="18" pos:column="67"/></literal> <operator pos:line="18" pos:column="68">&lt;&lt;<pos:position pos:line="18" pos:column="76"/></operator> <name pos:line="18" pos:column="71">conn<pos:position pos:line="18" pos:column="75"/></name></expr></argument>)<pos:position pos:line="18" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="77"/></expr_stmt>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="21" pos:column="5">assert<pos:position pos:line="21" pos:column="11"/></name><argument_list pos:line="21" pos:column="11">(<argument><expr><call><name><name pos:line="21" pos:column="12">Comm<pos:position pos:line="21" pos:column="16"/></name><operator pos:line="21" pos:column="16">::<pos:position pos:line="21" pos:column="18"/></operator><name pos:line="21" pos:column="18">IsConnOpen<pos:position pos:line="21" pos:column="28"/></name></name><argument_list pos:line="21" pos:column="28">(<argument><expr><name pos:line="21" pos:column="29">conn<pos:position pos:line="21" pos:column="33"/></name></expr></argument>)<pos:position pos:line="21" pos:column="34"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="22" pos:column="5">AsyncJob<pos:position pos:line="22" pos:column="13"/></name><operator pos:line="22" pos:column="13">::<pos:position pos:line="22" pos:column="15"/></operator><name pos:line="22" pos:column="15">Start<pos:position pos:line="22" pos:column="20"/></name></name><argument_list pos:line="22" pos:column="20">(<argument><expr><operator pos:line="22" pos:column="21">new<pos:position pos:line="22" pos:column="24"/></operator> <call><name><name pos:line="22" pos:column="25">Comm<pos:position pos:line="22" pos:column="29"/></name><operator pos:line="22" pos:column="29">::<pos:position pos:line="22" pos:column="31"/></operator><name pos:line="22" pos:column="31">TcpAcceptor<pos:position pos:line="22" pos:column="42"/></name></name><argument_list pos:line="22" pos:column="42">(<argument><expr><name pos:line="22" pos:column="43">conn<pos:position pos:line="22" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="49">note<pos:position pos:line="22" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="55">sub<pos:position pos:line="22" pos:column="58"/></name></expr></argument>)<pos:position pos:line="22" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="61"/></expr_stmt>

    <comment type="line" pos:line="24" pos:column="5">// Ensure we have a copy of the FD opened for listening and a close handler on it.</comment>
    <expr_stmt><expr><call><name><name pos:line="25" pos:column="5">data<pos:position pos:line="25" pos:column="9"/></name><operator pos:line="25" pos:column="9">.<pos:position pos:line="25" pos:column="10"/></operator><name pos:line="25" pos:column="10">opened<pos:position pos:line="25" pos:column="16"/></name></name><argument_list pos:line="25" pos:column="16">(<argument><expr><name pos:line="25" pos:column="17">conn<pos:position pos:line="25" pos:column="21"/></name></expr></argument>, <argument><expr><call><name pos:line="25" pos:column="23">dataCloser<pos:position pos:line="25" pos:column="33"/></name><argument_list pos:line="25" pos:column="33">()<pos:position pos:line="25" pos:column="35"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">switchTimeoutToDataChannel<pos:position pos:line="26" pos:column="31"/></name><argument_list pos:line="26" pos:column="31">()<pos:position pos:line="26" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="34"/></expr_stmt>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
