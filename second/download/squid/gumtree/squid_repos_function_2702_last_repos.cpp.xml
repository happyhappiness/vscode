<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2702_last_repos.cpp" pos:tabs="8"><function type="operator"><type><name pos:line="1" pos:column="1">StoreInfoStats<pos:position pos:line="1" pos:column="15"/></name> <modifier pos:line="1" pos:column="16">&amp;<pos:position pos:line="1" pos:column="21"/></modifier></type>
<name><name pos:line="2" pos:column="1">StoreInfoStats<pos:position pos:line="2" pos:column="15"/></name><operator pos:line="2" pos:column="15">::<pos:position pos:line="2" pos:column="17"/></operator><name pos:line="2" pos:column="17">operator <name pos:line="2" pos:column="26">+=<pos:position pos:line="2" pos:column="28"/></name></name></name><parameter_list pos:line="2" pos:column="28">(<parameter><decl><type><specifier pos:line="2" pos:column="29">const<pos:position pos:line="2" pos:column="34"/></specifier> <name pos:line="2" pos:column="35">StoreInfoStats<pos:position pos:line="2" pos:column="49"/></name> <modifier pos:line="2" pos:column="50">&amp;<pos:position pos:line="2" pos:column="55"/></modifier></type><name pos:line="2" pos:column="51">stats<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="57"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><name><name pos:line="4" pos:column="5">swap<pos:position pos:line="4" pos:column="9"/></name><operator pos:line="4" pos:column="9">.<pos:position pos:line="4" pos:column="10"/></operator><name pos:line="4" pos:column="10">size<pos:position pos:line="4" pos:column="14"/></name></name> <operator pos:line="4" pos:column="15">+=<pos:position pos:line="4" pos:column="17"/></operator> <name><name pos:line="4" pos:column="18">stats<pos:position pos:line="4" pos:column="23"/></name><operator pos:line="4" pos:column="23">.<pos:position pos:line="4" pos:column="24"/></operator><name pos:line="4" pos:column="24">swap<pos:position pos:line="4" pos:column="28"/></name><operator pos:line="4" pos:column="28">.<pos:position pos:line="4" pos:column="29"/></operator><name pos:line="4" pos:column="29">size<pos:position pos:line="4" pos:column="33"/></name></name></expr>;<pos:position pos:line="4" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="5" pos:column="5">swap<pos:position pos:line="5" pos:column="9"/></name><operator pos:line="5" pos:column="9">.<pos:position pos:line="5" pos:column="10"/></operator><name pos:line="5" pos:column="10">capacity<pos:position pos:line="5" pos:column="18"/></name></name> <operator pos:line="5" pos:column="19">+=<pos:position pos:line="5" pos:column="21"/></operator> <name><name pos:line="5" pos:column="22">stats<pos:position pos:line="5" pos:column="27"/></name><operator pos:line="5" pos:column="27">.<pos:position pos:line="5" pos:column="28"/></operator><name pos:line="5" pos:column="28">swap<pos:position pos:line="5" pos:column="32"/></name><operator pos:line="5" pos:column="32">.<pos:position pos:line="5" pos:column="33"/></operator><name pos:line="5" pos:column="33">capacity<pos:position pos:line="5" pos:column="41"/></name></name></expr>;<pos:position pos:line="5" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="6" pos:column="5">swap<pos:position pos:line="6" pos:column="9"/></name><operator pos:line="6" pos:column="9">.<pos:position pos:line="6" pos:column="10"/></operator><name pos:line="6" pos:column="10">count<pos:position pos:line="6" pos:column="15"/></name></name> <operator pos:line="6" pos:column="16">+=<pos:position pos:line="6" pos:column="18"/></operator> <name><name pos:line="6" pos:column="19">stats<pos:position pos:line="6" pos:column="24"/></name><operator pos:line="6" pos:column="24">.<pos:position pos:line="6" pos:column="25"/></operator><name pos:line="6" pos:column="25">swap<pos:position pos:line="6" pos:column="29"/></name><operator pos:line="6" pos:column="29">.<pos:position pos:line="6" pos:column="30"/></operator><name pos:line="6" pos:column="30">count<pos:position pos:line="6" pos:column="35"/></name></name></expr>;<pos:position pos:line="6" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="7" pos:column="5">swap<pos:position pos:line="7" pos:column="9"/></name><operator pos:line="7" pos:column="9">.<pos:position pos:line="7" pos:column="10"/></operator><name pos:line="7" pos:column="10">open_disk_fd<pos:position pos:line="7" pos:column="22"/></name></name> <operator pos:line="7" pos:column="23">+=<pos:position pos:line="7" pos:column="25"/></operator> <name><name pos:line="7" pos:column="26">stats<pos:position pos:line="7" pos:column="31"/></name><operator pos:line="7" pos:column="31">.<pos:position pos:line="7" pos:column="32"/></operator><name pos:line="7" pos:column="32">swap<pos:position pos:line="7" pos:column="36"/></name><operator pos:line="7" pos:column="36">.<pos:position pos:line="7" pos:column="37"/></operator><name pos:line="7" pos:column="37">open_disk_fd<pos:position pos:line="7" pos:column="49"/></name></name></expr>;<pos:position pos:line="7" pos:column="50"/></expr_stmt>

    <comment type="line" pos:line="9" pos:column="5">// Assume that either all workers use shared memory cache or none do.</comment>
    <comment type="line" pos:line="10" pos:column="5">// It is possible but difficult to report correct stats for an arbitrary</comment>
    <comment type="line" pos:line="11" pos:column="5">// mix, and only rather unusual deployments can benefit from mixing.</comment>

    <comment type="line" pos:line="13" pos:column="5">// If workers share memory, we will get shared stats from those workers</comment>
    <comment type="line" pos:line="14" pos:column="5">// and non-shared stats from other processes. Ignore order and also</comment>
    <comment type="line" pos:line="15" pos:column="5">// ignore other processes stats because they are zero in most setups.</comment>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name><name pos:line="16" pos:column="9">stats<pos:position pos:line="16" pos:column="14"/></name><operator pos:line="16" pos:column="14">.<pos:position pos:line="16" pos:column="15"/></operator><name pos:line="16" pos:column="15">mem<pos:position pos:line="16" pos:column="18"/></name><operator pos:line="16" pos:column="18">.<pos:position pos:line="16" pos:column="19"/></operator><name pos:line="16" pos:column="19">shared<pos:position pos:line="16" pos:column="25"/></name></name></expr>)<pos:position pos:line="16" pos:column="26"/></condition><then pos:line="16" pos:column="26"> <block pos:line="16" pos:column="27">{ <comment type="line" pos:line="16" pos:column="29">// workers share memory</comment>
        <comment type="line" pos:line="17" pos:column="9">// use the latest reported stats, they all should be about the same</comment>
        <expr_stmt><expr><name><name pos:line="18" pos:column="9">mem<pos:position pos:line="18" pos:column="12"/></name><operator pos:line="18" pos:column="12">.<pos:position pos:line="18" pos:column="13"/></operator><name pos:line="18" pos:column="13">shared<pos:position pos:line="18" pos:column="19"/></name></name> <operator pos:line="18" pos:column="20">=<pos:position pos:line="18" pos:column="21"/></operator> <literal type="boolean" pos:line="18" pos:column="22">true<pos:position pos:line="18" pos:column="26"/></literal></expr>;<pos:position pos:line="18" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="19" pos:column="9">mem<pos:position pos:line="19" pos:column="12"/></name><operator pos:line="19" pos:column="12">.<pos:position pos:line="19" pos:column="13"/></operator><name pos:line="19" pos:column="13">size<pos:position pos:line="19" pos:column="17"/></name></name> <operator pos:line="19" pos:column="18">=<pos:position pos:line="19" pos:column="19"/></operator> <name><name pos:line="19" pos:column="20">stats<pos:position pos:line="19" pos:column="25"/></name><operator pos:line="19" pos:column="25">.<pos:position pos:line="19" pos:column="26"/></operator><name pos:line="19" pos:column="26">mem<pos:position pos:line="19" pos:column="29"/></name><operator pos:line="19" pos:column="29">.<pos:position pos:line="19" pos:column="30"/></operator><name pos:line="19" pos:column="30">size<pos:position pos:line="19" pos:column="34"/></name></name></expr>;<pos:position pos:line="19" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="20" pos:column="9">mem<pos:position pos:line="20" pos:column="12"/></name><operator pos:line="20" pos:column="12">.<pos:position pos:line="20" pos:column="13"/></operator><name pos:line="20" pos:column="13">capacity<pos:position pos:line="20" pos:column="21"/></name></name> <operator pos:line="20" pos:column="22">=<pos:position pos:line="20" pos:column="23"/></operator> <name><name pos:line="20" pos:column="24">stats<pos:position pos:line="20" pos:column="29"/></name><operator pos:line="20" pos:column="29">.<pos:position pos:line="20" pos:column="30"/></operator><name pos:line="20" pos:column="30">mem<pos:position pos:line="20" pos:column="33"/></name><operator pos:line="20" pos:column="33">.<pos:position pos:line="20" pos:column="34"/></operator><name pos:line="20" pos:column="34">capacity<pos:position pos:line="20" pos:column="42"/></name></name></expr>;<pos:position pos:line="20" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="21" pos:column="9">mem<pos:position pos:line="21" pos:column="12"/></name><operator pos:line="21" pos:column="12">.<pos:position pos:line="21" pos:column="13"/></operator><name pos:line="21" pos:column="13">count<pos:position pos:line="21" pos:column="18"/></name></name> <operator pos:line="21" pos:column="19">=<pos:position pos:line="21" pos:column="20"/></operator> <name><name pos:line="21" pos:column="21">stats<pos:position pos:line="21" pos:column="26"/></name><operator pos:line="21" pos:column="26">.<pos:position pos:line="21" pos:column="27"/></operator><name pos:line="21" pos:column="27">mem<pos:position pos:line="21" pos:column="30"/></name><operator pos:line="21" pos:column="30">.<pos:position pos:line="21" pos:column="31"/></operator><name pos:line="21" pos:column="31">count<pos:position pos:line="21" pos:column="36"/></name></name></expr>;<pos:position pos:line="21" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="22" pos:column="6"/></block></then> <elseif pos:line="22" pos:column="7">else <if pos:line="22" pos:column="12">if <condition pos:line="22" pos:column="15">(<expr><operator pos:line="22" pos:column="16">!<pos:position pos:line="22" pos:column="17"/></operator><name><name pos:line="22" pos:column="17">mem<pos:position pos:line="22" pos:column="20"/></name><operator pos:line="22" pos:column="20">.<pos:position pos:line="22" pos:column="21"/></operator><name pos:line="22" pos:column="21">shared<pos:position pos:line="22" pos:column="27"/></name></name></expr>)<pos:position pos:line="22" pos:column="28"/></condition><then pos:line="22" pos:column="28"> <block pos:line="22" pos:column="29">{ <comment type="line" pos:line="22" pos:column="31">// do not corrupt shared stats, if any</comment>
        <comment type="line" pos:line="23" pos:column="9">// workers do not share so we must add everything up</comment>
        <expr_stmt><expr><name><name pos:line="24" pos:column="9">mem<pos:position pos:line="24" pos:column="12"/></name><operator pos:line="24" pos:column="12">.<pos:position pos:line="24" pos:column="13"/></operator><name pos:line="24" pos:column="13">size<pos:position pos:line="24" pos:column="17"/></name></name> <operator pos:line="24" pos:column="18">+=<pos:position pos:line="24" pos:column="20"/></operator> <name><name pos:line="24" pos:column="21">stats<pos:position pos:line="24" pos:column="26"/></name><operator pos:line="24" pos:column="26">.<pos:position pos:line="24" pos:column="27"/></operator><name pos:line="24" pos:column="27">mem<pos:position pos:line="24" pos:column="30"/></name><operator pos:line="24" pos:column="30">.<pos:position pos:line="24" pos:column="31"/></operator><name pos:line="24" pos:column="31">size<pos:position pos:line="24" pos:column="35"/></name></name></expr>;<pos:position pos:line="24" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="25" pos:column="9">mem<pos:position pos:line="25" pos:column="12"/></name><operator pos:line="25" pos:column="12">.<pos:position pos:line="25" pos:column="13"/></operator><name pos:line="25" pos:column="13">capacity<pos:position pos:line="25" pos:column="21"/></name></name> <operator pos:line="25" pos:column="22">+=<pos:position pos:line="25" pos:column="24"/></operator> <name><name pos:line="25" pos:column="25">stats<pos:position pos:line="25" pos:column="30"/></name><operator pos:line="25" pos:column="30">.<pos:position pos:line="25" pos:column="31"/></operator><name pos:line="25" pos:column="31">mem<pos:position pos:line="25" pos:column="34"/></name><operator pos:line="25" pos:column="34">.<pos:position pos:line="25" pos:column="35"/></operator><name pos:line="25" pos:column="35">capacity<pos:position pos:line="25" pos:column="43"/></name></name></expr>;<pos:position pos:line="25" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="26" pos:column="9">mem<pos:position pos:line="26" pos:column="12"/></name><operator pos:line="26" pos:column="12">.<pos:position pos:line="26" pos:column="13"/></operator><name pos:line="26" pos:column="13">count<pos:position pos:line="26" pos:column="18"/></name></name> <operator pos:line="26" pos:column="19">+=<pos:position pos:line="26" pos:column="21"/></operator> <name><name pos:line="26" pos:column="22">stats<pos:position pos:line="26" pos:column="27"/></name><operator pos:line="26" pos:column="27">.<pos:position pos:line="26" pos:column="28"/></operator><name pos:line="26" pos:column="28">mem<pos:position pos:line="26" pos:column="31"/></name><operator pos:line="26" pos:column="31">.<pos:position pos:line="26" pos:column="32"/></operator><name pos:line="26" pos:column="32">count<pos:position pos:line="26" pos:column="37"/></name></name></expr>;<pos:position pos:line="26" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if></elseif></if>

    <expr_stmt><expr><name pos:line="29" pos:column="5">store_entry_count<pos:position pos:line="29" pos:column="22"/></name> <operator pos:line="29" pos:column="23">+=<pos:position pos:line="29" pos:column="25"/></operator> <name><name pos:line="29" pos:column="26">stats<pos:position pos:line="29" pos:column="31"/></name><operator pos:line="29" pos:column="31">.<pos:position pos:line="29" pos:column="32"/></operator><name pos:line="29" pos:column="32">store_entry_count<pos:position pos:line="29" pos:column="49"/></name></name></expr>;<pos:position pos:line="29" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><name pos:line="30" pos:column="5">mem_object_count<pos:position pos:line="30" pos:column="21"/></name> <operator pos:line="30" pos:column="22">+=<pos:position pos:line="30" pos:column="24"/></operator> <name><name pos:line="30" pos:column="25">stats<pos:position pos:line="30" pos:column="30"/></name><operator pos:line="30" pos:column="30">.<pos:position pos:line="30" pos:column="31"/></operator><name pos:line="30" pos:column="31">mem_object_count<pos:position pos:line="30" pos:column="47"/></name></name></expr>;<pos:position pos:line="30" pos:column="48"/></expr_stmt>

    <return pos:line="32" pos:column="5">return <expr><operator pos:line="32" pos:column="12">*<pos:position pos:line="32" pos:column="13"/></operator><name pos:line="32" pos:column="13">this<pos:position pos:line="32" pos:column="17"/></name></expr>;<pos:position pos:line="32" pos:column="18"/></return>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
