<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2264_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">mem_node<pos:position pos:line="1" pos:column="9"/></name> <modifier pos:line="1" pos:column="10">*<pos:position pos:line="1" pos:column="11"/></modifier></type>
<name><name pos:line="2" pos:column="1">mem_hdr<pos:position pos:line="2" pos:column="8"/></name><operator pos:line="2" pos:column="8">::<pos:position pos:line="2" pos:column="10"/></operator><name pos:line="2" pos:column="10">nodeToRecieve<pos:position pos:line="2" pos:column="23"/></name></name><parameter_list pos:line="2" pos:column="23">(<parameter><decl><type><name pos:line="2" pos:column="24">int64_t<pos:position pos:line="2" pos:column="31"/></name></type> <name pos:line="2" pos:column="32">offset<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="39"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/* case 1: Nothing in memory */</comment>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">!<pos:position pos:line="6" pos:column="10"/></operator><call><name><name pos:line="6" pos:column="10">nodes<pos:position pos:line="6" pos:column="15"/></name><operator pos:line="6" pos:column="15">.<pos:position pos:line="6" pos:column="16"/></operator><name pos:line="6" pos:column="16">size<pos:position pos:line="6" pos:column="20"/></name></name><argument_list pos:line="6" pos:column="20">()<pos:position pos:line="6" pos:column="22"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="23"/></condition><then pos:line="6" pos:column="23"> <block pos:line="6" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">appendNode<pos:position pos:line="7" pos:column="19"/></name> <argument_list pos:line="7" pos:column="20">(<argument><expr><operator pos:line="7" pos:column="21">new<pos:position pos:line="7" pos:column="24"/></operator> <call><name pos:line="7" pos:column="25">mem_node<pos:position pos:line="7" pos:column="33"/></name><argument_list pos:line="7" pos:column="33">(<argument><expr><name pos:line="7" pos:column="34">offset<pos:position pos:line="7" pos:column="40"/></name></expr></argument>)<pos:position pos:line="7" pos:column="41"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="43"/></expr_stmt>
        <return pos:line="8" pos:column="9">return <expr><call><name><name pos:line="8" pos:column="16">nodes<pos:position pos:line="8" pos:column="21"/></name><operator pos:line="8" pos:column="21">.<pos:position pos:line="8" pos:column="22"/></operator><name pos:line="8" pos:column="22">start<pos:position pos:line="8" pos:column="27"/></name></name><argument_list pos:line="8" pos:column="27">()<pos:position pos:line="8" pos:column="29"/></argument_list></call><operator pos:line="8" pos:column="29">-&gt;<pos:position pos:line="8" pos:column="34"/></operator><name pos:line="8" pos:column="31">data<pos:position pos:line="8" pos:column="35"/></name></expr>;<pos:position pos:line="8" pos:column="36"/></return>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="11" pos:column="5">mem_node<pos:position pos:line="11" pos:column="13"/></name> <modifier pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></modifier></type><name pos:line="11" pos:column="15">candidate<pos:position pos:line="11" pos:column="24"/></name> <init pos:line="11" pos:column="25">= <expr><name pos:line="11" pos:column="27">NULL<pos:position pos:line="11" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="32"/></decl_stmt>
    <comment type="block" pos:line="12" pos:column="5">/* case 2: location fits within an extant node */</comment>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name pos:line="14" pos:column="9">offset<pos:position pos:line="14" pos:column="15"/></name> <operator pos:line="14" pos:column="16">&gt;<pos:position pos:line="14" pos:column="20"/></operator> <literal type="number" pos:line="14" pos:column="18">0<pos:position pos:line="14" pos:column="19"/></literal></expr>)<pos:position pos:line="14" pos:column="20"/></condition><then pos:line="14" pos:column="20"> <block pos:line="14" pos:column="21">{
        <decl_stmt><decl><type><name pos:line="15" pos:column="9">mem_node<pos:position pos:line="15" pos:column="17"/></name></type> <name pos:line="15" pos:column="18">search<pos:position pos:line="15" pos:column="24"/></name> <argument_list pos:line="15" pos:column="25">(<argument><expr><name pos:line="15" pos:column="26">offset<pos:position pos:line="15" pos:column="32"/></name> <operator pos:line="15" pos:column="33">-<pos:position pos:line="15" pos:column="34"/></operator> <literal type="number" pos:line="15" pos:column="35">1<pos:position pos:line="15" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="37"/></argument_list></decl>;<pos:position pos:line="15" pos:column="38"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="16" pos:column="9">search<pos:position pos:line="16" pos:column="15"/></name><operator pos:line="16" pos:column="15">.<pos:position pos:line="16" pos:column="16"/></operator><name pos:line="16" pos:column="16">nodeBuffer<pos:position pos:line="16" pos:column="26"/></name><operator pos:line="16" pos:column="26">.<pos:position pos:line="16" pos:column="27"/></operator><name pos:line="16" pos:column="27">length<pos:position pos:line="16" pos:column="33"/></name></name> <operator pos:line="16" pos:column="34">=<pos:position pos:line="16" pos:column="35"/></operator> <literal type="number" pos:line="16" pos:column="36">1<pos:position pos:line="16" pos:column="37"/></literal></expr>;<pos:position pos:line="16" pos:column="38"/></expr_stmt>
        <decl_stmt><decl><type><name pos:line="17" pos:column="9">mem_node<pos:position pos:line="17" pos:column="17"/></name> <modifier pos:line="17" pos:column="18">*<pos:position pos:line="17" pos:column="19"/></modifier><specifier pos:line="17" pos:column="19">const<pos:position pos:line="17" pos:column="24"/></specifier> <modifier pos:line="17" pos:column="25">*<pos:position pos:line="17" pos:column="26"/></modifier></type><name pos:line="17" pos:column="26">leadup<pos:position pos:line="17" pos:column="32"/></name> <init pos:line="17" pos:column="33">=  <expr><call><name><name pos:line="17" pos:column="36">nodes<pos:position pos:line="17" pos:column="41"/></name><operator pos:line="17" pos:column="41">.<pos:position pos:line="17" pos:column="42"/></operator><name pos:line="17" pos:column="42">find<pos:position pos:line="17" pos:column="46"/></name></name> <argument_list pos:line="17" pos:column="47">(<argument><expr><operator pos:line="17" pos:column="48">&amp;<pos:position pos:line="17" pos:column="53"/></operator><name pos:line="17" pos:column="49">search<pos:position pos:line="17" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="57">NodeCompare<pos:position pos:line="17" pos:column="68"/></name></expr></argument>)<pos:position pos:line="17" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="17" pos:column="70"/></decl_stmt>

        <if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">leadup<pos:position pos:line="19" pos:column="19"/></name></expr>)<pos:position pos:line="19" pos:column="20"/></condition><then pos:line="19" pos:column="20">
            <block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="13">candidate<pos:position pos:line="20" pos:column="22"/></name> <operator pos:line="20" pos:column="23">=<pos:position pos:line="20" pos:column="24"/></operator> <operator pos:line="20" pos:column="25">*<pos:position pos:line="20" pos:column="26"/></operator><name pos:line="20" pos:column="26">leadup<pos:position pos:line="20" pos:column="32"/></name></expr>;<pos:position pos:line="20" pos:column="33"/></expr_stmt></block></then></if>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>

    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><name pos:line="23" pos:column="9">candidate<pos:position pos:line="23" pos:column="18"/></name> <operator pos:line="23" pos:column="19">&amp;&amp;<pos:position pos:line="23" pos:column="29"/></operator> <call><name><name pos:line="23" pos:column="22">candidate<pos:position pos:line="23" pos:column="31"/></name><operator pos:line="23" pos:column="31">-&gt;<pos:position pos:line="23" pos:column="36"/></operator><name pos:line="23" pos:column="33">canAccept<pos:position pos:line="23" pos:column="42"/></name></name><argument_list pos:line="23" pos:column="42">(<argument><expr><name pos:line="23" pos:column="43">offset<pos:position pos:line="23" pos:column="49"/></name></expr></argument>)<pos:position pos:line="23" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="51"/></condition><then pos:line="23" pos:column="51">
        <block type="pseudo"><return pos:line="24" pos:column="9">return <expr><name pos:line="24" pos:column="16">candidate<pos:position pos:line="24" pos:column="25"/></name></expr>;<pos:position pos:line="24" pos:column="26"/></return></block></then></if>

    <comment type="block" pos:line="26" pos:column="5">/* candidate can't accept, so we need a new node */</comment>
    <expr_stmt><expr><name pos:line="27" pos:column="5">candidate<pos:position pos:line="27" pos:column="14"/></name> <operator pos:line="27" pos:column="15">=<pos:position pos:line="27" pos:column="16"/></operator> <operator pos:line="27" pos:column="17">new<pos:position pos:line="27" pos:column="20"/></operator> <call><name pos:line="27" pos:column="21">mem_node<pos:position pos:line="27" pos:column="29"/></name><argument_list pos:line="27" pos:column="29">(<argument><expr><name pos:line="27" pos:column="30">offset<pos:position pos:line="27" pos:column="36"/></name></expr></argument>)<pos:position pos:line="27" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="38"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="29" pos:column="5">appendNode<pos:position pos:line="29" pos:column="15"/></name> <argument_list pos:line="29" pos:column="16">(<argument><expr><name pos:line="29" pos:column="17">candidate<pos:position pos:line="29" pos:column="26"/></name></expr></argument>)<pos:position pos:line="29" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="28"/></expr_stmt>

    <comment type="block" pos:line="31" pos:column="5">/* simpler to write than a indented if */</comment>
    <return pos:line="32" pos:column="5">return <expr><name pos:line="32" pos:column="12">candidate<pos:position pos:line="32" pos:column="21"/></name></expr>;<pos:position pos:line="32" pos:column="22"/></return>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
