<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1604_squid-3.1.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">httpHdrScParseInit<pos:position pos:line="2" pos:column="19"/></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name pos:line="2" pos:column="20">HttpHdrSc<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type> <name pos:line="2" pos:column="32">sc<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="36">const<pos:position pos:line="2" pos:column="41"/></specifier> <name pos:line="2" pos:column="42">String<pos:position pos:line="2" pos:column="48"/></name> <modifier pos:line="2" pos:column="49">*<pos:position pos:line="2" pos:column="50"/></modifier></type> <name pos:line="2" pos:column="51">str<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="55"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">item<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">char<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">p<pos:position pos:line="5" pos:column="18"/></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>		<comment type="block" pos:line="5" pos:column="33">/* '=' parameter */</comment>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">char<pos:position pos:line="6" pos:column="15"/></name> <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type><name pos:line="6" pos:column="17">pos<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><name pos:line="6" pos:column="23">NULL<pos:position pos:line="6" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="7" pos:column="5">const<pos:position pos:line="7" pos:column="10"/></specifier> <name pos:line="7" pos:column="11">char<pos:position pos:line="7" pos:column="15"/></name> <modifier pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></modifier></type><name pos:line="7" pos:column="17">target<pos:position pos:line="7" pos:column="23"/></name> <init pos:line="7" pos:column="24">= <expr><name pos:line="7" pos:column="26">NULL<pos:position pos:line="7" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="31"/></decl_stmt> <comment type="block" pos:line="7" pos:column="32">/* ;foo */</comment>
    <decl_stmt><decl><type><specifier pos:line="8" pos:column="5">const<pos:position pos:line="8" pos:column="10"/></specifier> <name pos:line="8" pos:column="11">char<pos:position pos:line="8" pos:column="15"/></name> <modifier pos:line="8" pos:column="16">*<pos:position pos:line="8" pos:column="17"/></modifier></type><name pos:line="8" pos:column="17">temp<pos:position pos:line="8" pos:column="21"/></name> <init pos:line="8" pos:column="22">= <expr><name pos:line="8" pos:column="24">NULL<pos:position pos:line="8" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="29"/></decl_stmt> <comment type="block" pos:line="8" pos:column="30">/* temp buffer */</comment>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">type<pos:position pos:line="9" pos:column="13"/></name></decl>;<pos:position pos:line="9" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">ilen<pos:position pos:line="10" pos:column="13"/></name></decl>;<pos:position pos:line="10" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">int<pos:position pos:line="11" pos:column="8"/></name></type> <name pos:line="11" pos:column="9">initiallen<pos:position pos:line="11" pos:column="19"/></name></decl>;<pos:position pos:line="11" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">HttpHdrScTarget<pos:position pos:line="12" pos:column="20"/></name> <modifier pos:line="12" pos:column="21">*<pos:position pos:line="12" pos:column="22"/></modifier></type><name pos:line="12" pos:column="22">sct<pos:position pos:line="12" pos:column="25"/></name></decl>;<pos:position pos:line="12" pos:column="26"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">assert<pos:position pos:line="13" pos:column="11"/></name><argument_list pos:line="13" pos:column="11">(<argument><expr><name pos:line="13" pos:column="12">sc<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">&amp;&amp;<pos:position pos:line="13" pos:column="25"/></operator> <name pos:line="13" pos:column="18">str<pos:position pos:line="13" pos:column="21"/></name></expr></argument>)<pos:position pos:line="13" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="23"/></expr_stmt>

    <comment type="block" pos:line="15" pos:column="5">/* iterate through comma separated list */</comment>

    <while pos:line="17" pos:column="5">while <condition pos:line="17" pos:column="11">(<expr><call><name pos:line="17" pos:column="12">strListGetItem<pos:position pos:line="17" pos:column="26"/></name><argument_list pos:line="17" pos:column="26">(<argument><expr><name pos:line="17" pos:column="27">str<pos:position pos:line="17" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="17" pos:column="32">','<pos:position pos:line="17" pos:column="35"/></literal></expr></argument>, <argument><expr><operator pos:line="17" pos:column="37">&amp;<pos:position pos:line="17" pos:column="42"/></operator><name pos:line="17" pos:column="38">item<pos:position pos:line="17" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="44">&amp;<pos:position pos:line="17" pos:column="49"/></operator><name pos:line="17" pos:column="45">ilen<pos:position pos:line="17" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="51">&amp;<pos:position pos:line="17" pos:column="56"/></operator><name pos:line="17" pos:column="52">pos<pos:position pos:line="17" pos:column="55"/></name></expr></argument>)<pos:position pos:line="17" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="57"/></condition> <block pos:line="17" pos:column="58">{
        <expr_stmt><expr><name pos:line="18" pos:column="9">initiallen<pos:position pos:line="18" pos:column="19"/></name> <operator pos:line="18" pos:column="20">=<pos:position pos:line="18" pos:column="21"/></operator> <name pos:line="18" pos:column="22">ilen<pos:position pos:line="18" pos:column="26"/></name></expr>;<pos:position pos:line="18" pos:column="27"/></expr_stmt>
        <comment type="block" pos:line="19" pos:column="9">/* decrease ilen to still match the token for  '=' statements */</comment>

        <if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><operator pos:line="21" pos:column="13">(<pos:position pos:line="21" pos:column="14"/></operator><name pos:line="21" pos:column="14">p<pos:position pos:line="21" pos:column="15"/></name> <operator pos:line="21" pos:column="16">=<pos:position pos:line="21" pos:column="17"/></operator> <call><name pos:line="21" pos:column="18">strchr<pos:position pos:line="21" pos:column="24"/></name><argument_list pos:line="21" pos:column="24">(<argument><expr><name pos:line="21" pos:column="25">item<pos:position pos:line="21" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="21" pos:column="31">'='<pos:position pos:line="21" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="35"/></argument_list></call><operator pos:line="21" pos:column="35">)<pos:position pos:line="21" pos:column="36"/></operator> <operator pos:line="21" pos:column="37">&amp;&amp;<pos:position pos:line="21" pos:column="47"/></operator> <operator pos:line="21" pos:column="40">(<pos:position pos:line="21" pos:column="41"/></operator><name pos:line="21" pos:column="41">p<pos:position pos:line="21" pos:column="42"/></name> <operator pos:line="21" pos:column="43">-<pos:position pos:line="21" pos:column="44"/></operator> <name pos:line="21" pos:column="45">item<pos:position pos:line="21" pos:column="49"/></name> <operator pos:line="21" pos:column="50">&lt;<pos:position pos:line="21" pos:column="54"/></operator> <name pos:line="21" pos:column="52">ilen<pos:position pos:line="21" pos:column="56"/></name><operator pos:line="21" pos:column="56">)<pos:position pos:line="21" pos:column="57"/></operator></expr>)<pos:position pos:line="21" pos:column="58"/></condition><then pos:line="21" pos:column="58">
            <block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="13">ilen<pos:position pos:line="22" pos:column="17"/></name> <operator pos:line="22" pos:column="18">=<pos:position pos:line="22" pos:column="19"/></operator> <name pos:line="22" pos:column="20">p<pos:position pos:line="22" pos:column="21"/></name><operator pos:line="22" pos:column="21">++<pos:position pos:line="22" pos:column="23"/></operator> <operator pos:line="22" pos:column="24">-<pos:position pos:line="22" pos:column="25"/></operator> <name pos:line="22" pos:column="26">item<pos:position pos:line="22" pos:column="30"/></name></expr>;<pos:position pos:line="22" pos:column="31"/></expr_stmt></block></then>

        <comment type="block" pos:line="24" pos:column="9">/* decrease ilen to still match the token for ';' qualified non '=' statments */</comment>
        <elseif pos:line="25" pos:column="9">else <if pos:line="25" pos:column="14">if <condition pos:line="25" pos:column="17">(<expr><operator pos:line="25" pos:column="18">(<pos:position pos:line="25" pos:column="19"/></operator><name pos:line="25" pos:column="19">p<pos:position pos:line="25" pos:column="20"/></name> <operator pos:line="25" pos:column="21">=<pos:position pos:line="25" pos:column="22"/></operator> <call><name pos:line="25" pos:column="23">strchr<pos:position pos:line="25" pos:column="29"/></name><argument_list pos:line="25" pos:column="29">(<argument><expr><name pos:line="25" pos:column="30">item<pos:position pos:line="25" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="25" pos:column="36">';'<pos:position pos:line="25" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="40"/></argument_list></call><operator pos:line="25" pos:column="40">)<pos:position pos:line="25" pos:column="41"/></operator> <operator pos:line="25" pos:column="42">&amp;&amp;<pos:position pos:line="25" pos:column="52"/></operator> <operator pos:line="25" pos:column="45">(<pos:position pos:line="25" pos:column="46"/></operator><name pos:line="25" pos:column="46">p<pos:position pos:line="25" pos:column="47"/></name> <operator pos:line="25" pos:column="48">-<pos:position pos:line="25" pos:column="49"/></operator> <name pos:line="25" pos:column="50">item<pos:position pos:line="25" pos:column="54"/></name> <operator pos:line="25" pos:column="55">&lt;<pos:position pos:line="25" pos:column="59"/></operator> <name pos:line="25" pos:column="57">ilen<pos:position pos:line="25" pos:column="61"/></name><operator pos:line="25" pos:column="61">)<pos:position pos:line="25" pos:column="62"/></operator></expr>)<pos:position pos:line="25" pos:column="63"/></condition><then pos:line="25" pos:column="63">
            <block type="pseudo"><expr_stmt><expr><name pos:line="26" pos:column="13">ilen<pos:position pos:line="26" pos:column="17"/></name> <operator pos:line="26" pos:column="18">=<pos:position pos:line="26" pos:column="19"/></operator> <name pos:line="26" pos:column="20">p<pos:position pos:line="26" pos:column="21"/></name><operator pos:line="26" pos:column="21">++<pos:position pos:line="26" pos:column="23"/></operator> <operator pos:line="26" pos:column="24">-<pos:position pos:line="26" pos:column="25"/></operator> <name pos:line="26" pos:column="26">item<pos:position pos:line="26" pos:column="30"/></name></expr>;<pos:position pos:line="26" pos:column="31"/></expr_stmt></block></then></if></elseif></if>

        <comment type="block" pos:line="28" pos:column="9">/* find type */</comment>
        <expr_stmt><expr><name pos:line="29" pos:column="9">type<pos:position pos:line="29" pos:column="13"/></name> <operator pos:line="29" pos:column="14">=<pos:position pos:line="29" pos:column="15"/></operator> <call><name pos:line="29" pos:column="16">httpHeaderIdByName<pos:position pos:line="29" pos:column="34"/></name><argument_list pos:line="29" pos:column="34">(<argument><expr><name pos:line="29" pos:column="35">item<pos:position pos:line="29" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="41">ilen<pos:position pos:line="29" pos:column="45"/></name></expr></argument>,
                                  <argument><expr><name pos:line="30" pos:column="35">ScFieldsInfo<pos:position pos:line="30" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="49">SC_ENUM_END<pos:position pos:line="30" pos:column="60"/></name></expr></argument>)<pos:position pos:line="30" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="62"/></expr_stmt>

        <if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name pos:line="32" pos:column="13">type<pos:position pos:line="32" pos:column="17"/></name> <operator pos:line="32" pos:column="18">&lt;<pos:position pos:line="32" pos:column="22"/></operator> <literal type="number" pos:line="32" pos:column="20">0<pos:position pos:line="32" pos:column="21"/></literal></expr>)<pos:position pos:line="32" pos:column="22"/></condition><then pos:line="32" pos:column="22"> <block pos:line="32" pos:column="23">{
            <expr_stmt><expr><call><name pos:line="33" pos:column="13">debugs<pos:position pos:line="33" pos:column="19"/></name><argument_list pos:line="33" pos:column="19">(<argument><expr><literal type="number" pos:line="33" pos:column="20">90<pos:position pos:line="33" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="24">2<pos:position pos:line="33" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="27">"hdr sc: unknown control-directive: near '"<pos:position pos:line="33" pos:column="70"/></literal> <operator pos:line="33" pos:column="71">&lt;&lt;<pos:position pos:line="33" pos:column="79"/></operator> <name pos:line="33" pos:column="74">item<pos:position pos:line="33" pos:column="78"/></name> <operator pos:line="33" pos:column="79">&lt;&lt;<pos:position pos:line="33" pos:column="87"/></operator> <literal type="string" pos:line="33" pos:column="82">"' in '"<pos:position pos:line="33" pos:column="90"/></literal> <operator pos:line="33" pos:column="91">&lt;&lt;<pos:position pos:line="33" pos:column="99"/></operator> <name pos:line="33" pos:column="94">str<pos:position pos:line="33" pos:column="97"/></name> <operator pos:line="33" pos:column="98">&lt;&lt;<pos:position pos:line="33" pos:column="106"/></operator> <literal type="string" pos:line="33" pos:column="101">"'"<pos:position pos:line="33" pos:column="104"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="105"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="106"/></expr_stmt>
            <expr_stmt><expr><name pos:line="34" pos:column="13">type<pos:position pos:line="34" pos:column="17"/></name> <operator pos:line="34" pos:column="18">=<pos:position pos:line="34" pos:column="19"/></operator> <name pos:line="34" pos:column="20">SC_OTHER<pos:position pos:line="34" pos:column="28"/></name></expr>;<pos:position pos:line="34" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="35" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="37" pos:column="9">/* Is this a targeted directive? */</comment>
        <comment type="block" pos:line="38" pos:column="9">/* TODO sometime: implement a strnrchr that looks at a substring */</comment>
        <expr_stmt><expr><name pos:line="39" pos:column="9">temp<pos:position pos:line="39" pos:column="13"/></name> <operator pos:line="39" pos:column="14">=<pos:position pos:line="39" pos:column="15"/></operator> <call><name pos:line="39" pos:column="16">xstrndup<pos:position pos:line="39" pos:column="24"/></name> <argument_list pos:line="39" pos:column="25">(<argument><expr><name pos:line="39" pos:column="26">item<pos:position pos:line="39" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="32">initiallen<pos:position pos:line="39" pos:column="42"/></name> <operator pos:line="39" pos:column="43">+<pos:position pos:line="39" pos:column="44"/></operator> <literal type="number" pos:line="39" pos:column="45">1<pos:position pos:line="39" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="48"/></expr_stmt>

        <if pos:line="41" pos:column="9">if <condition pos:line="41" pos:column="12">(<expr><operator pos:line="41" pos:column="13">!<pos:position pos:line="41" pos:column="14"/></operator><operator pos:line="41" pos:column="14">(<pos:position pos:line="41" pos:column="15"/></operator><operator pos:line="41" pos:column="15">(<pos:position pos:line="41" pos:column="16"/></operator><name pos:line="41" pos:column="16">target<pos:position pos:line="41" pos:column="22"/></name> <operator pos:line="41" pos:column="23">=<pos:position pos:line="41" pos:column="24"/></operator> <call><name pos:line="41" pos:column="25">strrchr<pos:position pos:line="41" pos:column="32"/></name> <argument_list pos:line="41" pos:column="33">(<argument><expr><name pos:line="41" pos:column="34">temp<pos:position pos:line="41" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="41" pos:column="40">';'<pos:position pos:line="41" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="44"/></argument_list></call><operator pos:line="41" pos:column="44">)<pos:position pos:line="41" pos:column="45"/></operator> <operator pos:line="41" pos:column="46">&amp;&amp;<pos:position pos:line="41" pos:column="56"/></operator> <operator pos:line="41" pos:column="49">!<pos:position pos:line="41" pos:column="50"/></operator><call><name pos:line="41" pos:column="50">strchr<pos:position pos:line="41" pos:column="56"/></name> <argument_list pos:line="41" pos:column="57">(<argument><expr><name pos:line="41" pos:column="58">target<pos:position pos:line="41" pos:column="64"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="41" pos:column="66">'"'<pos:position pos:line="41" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="70"/></argument_list></call> <operator pos:line="41" pos:column="71">&amp;&amp;<pos:position pos:line="41" pos:column="81"/></operator> <operator pos:line="41" pos:column="74">*<pos:position pos:line="41" pos:column="75"/></operator><operator pos:line="41" pos:column="75">(<pos:position pos:line="41" pos:column="76"/></operator><name pos:line="41" pos:column="76">target<pos:position pos:line="41" pos:column="82"/></name> <operator pos:line="41" pos:column="83">+<pos:position pos:line="41" pos:column="84"/></operator> <literal type="number" pos:line="41" pos:column="85">1<pos:position pos:line="41" pos:column="86"/></literal><operator pos:line="41" pos:column="86">)<pos:position pos:line="41" pos:column="87"/></operator> <operator pos:line="41" pos:column="88">!=<pos:position pos:line="41" pos:column="90"/></operator> <literal type="char" pos:line="41" pos:column="91">'\0'<pos:position pos:line="41" pos:column="95"/></literal><operator pos:line="41" pos:column="95">)<pos:position pos:line="41" pos:column="96"/></operator></expr>)<pos:position pos:line="41" pos:column="97"/></condition><then pos:line="41" pos:column="97">
            <block type="pseudo"><expr_stmt><expr><name pos:line="42" pos:column="13">target<pos:position pos:line="42" pos:column="19"/></name> <operator pos:line="42" pos:column="20">=<pos:position pos:line="42" pos:column="21"/></operator> <name pos:line="42" pos:column="22">NULL<pos:position pos:line="42" pos:column="26"/></name></expr>;<pos:position pos:line="42" pos:column="27"/></expr_stmt></block></then>
        <else pos:line="43" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><operator pos:line="44" pos:column="13">++<pos:position pos:line="44" pos:column="15"/></operator><name pos:line="44" pos:column="15">target<pos:position pos:line="44" pos:column="21"/></name></expr>;<pos:position pos:line="44" pos:column="22"/></expr_stmt></block></else></if>

        <expr_stmt><expr><name pos:line="46" pos:column="9">sct<pos:position pos:line="46" pos:column="12"/></name> <operator pos:line="46" pos:column="13">=<pos:position pos:line="46" pos:column="14"/></operator> <call><name pos:line="46" pos:column="15">httpHdrScFindTarget<pos:position pos:line="46" pos:column="34"/></name> <argument_list pos:line="46" pos:column="35">(<argument><expr><name pos:line="46" pos:column="36">sc<pos:position pos:line="46" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="40">target<pos:position pos:line="46" pos:column="46"/></name></expr></argument>)<pos:position pos:line="46" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="48"/></expr_stmt>

        <if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><operator pos:line="48" pos:column="13">!<pos:position pos:line="48" pos:column="14"/></operator><name pos:line="48" pos:column="14">sct<pos:position pos:line="48" pos:column="17"/></name></expr>)<pos:position pos:line="48" pos:column="18"/></condition><then pos:line="48" pos:column="18"> <block pos:line="48" pos:column="19">{
            <expr_stmt><expr><name pos:line="49" pos:column="13">sct<pos:position pos:line="49" pos:column="16"/></name> <operator pos:line="49" pos:column="17">=<pos:position pos:line="49" pos:column="18"/></operator> <call><name pos:line="49" pos:column="19">httpHdrScTargetCreate<pos:position pos:line="49" pos:column="40"/></name> <argument_list pos:line="49" pos:column="41">(<argument><expr><name pos:line="49" pos:column="42">target<pos:position pos:line="49" pos:column="48"/></name></expr></argument>)<pos:position pos:line="49" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="50"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="50" pos:column="13">dlinkAdd<pos:position pos:line="50" pos:column="21"/></name><argument_list pos:line="50" pos:column="21">(<argument><expr><name pos:line="50" pos:column="22">sct<pos:position pos:line="50" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="27">&amp;<pos:position pos:line="50" pos:column="32"/></operator><name><name pos:line="50" pos:column="28">sct<pos:position pos:line="50" pos:column="31"/></name><operator pos:line="50" pos:column="31">-&gt;<pos:position pos:line="50" pos:column="36"/></operator><name pos:line="50" pos:column="33">node<pos:position pos:line="50" pos:column="37"/></name></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="39">&amp;<pos:position pos:line="50" pos:column="44"/></operator><name><name pos:line="50" pos:column="40">sc<pos:position pos:line="50" pos:column="42"/></name><operator pos:line="50" pos:column="42">-&gt;<pos:position pos:line="50" pos:column="47"/></operator><name pos:line="50" pos:column="44">targets<pos:position pos:line="50" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="53"/></expr_stmt>
        }<pos:position pos:line="51" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="53" pos:column="9">safe_free<pos:position pos:line="53" pos:column="18"/></name> <argument_list pos:line="53" pos:column="19">(<argument><expr><name pos:line="53" pos:column="20">temp<pos:position pos:line="53" pos:column="24"/></name></expr></argument>)<pos:position pos:line="53" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="26"/></expr_stmt>

        <if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><call><name pos:line="55" pos:column="13">EBIT_TEST<pos:position pos:line="55" pos:column="22"/></name><argument_list pos:line="55" pos:column="22">(<argument><expr><name><name pos:line="55" pos:column="23">sct<pos:position pos:line="55" pos:column="26"/></name><operator pos:line="55" pos:column="26">-&gt;<pos:position pos:line="55" pos:column="31"/></operator><name pos:line="55" pos:column="28">mask<pos:position pos:line="55" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="34">type<pos:position pos:line="55" pos:column="38"/></name></expr></argument>)<pos:position pos:line="55" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="40"/></condition><then pos:line="55" pos:column="40"> <block pos:line="55" pos:column="41">{
            <if pos:line="56" pos:column="13">if <condition pos:line="56" pos:column="16">(<expr><name pos:line="56" pos:column="17">type<pos:position pos:line="56" pos:column="21"/></name> <operator pos:line="56" pos:column="22">!=<pos:position pos:line="56" pos:column="24"/></operator> <name pos:line="56" pos:column="25">SC_OTHER<pos:position pos:line="56" pos:column="33"/></name></expr>)<pos:position pos:line="56" pos:column="34"/></condition><then pos:line="56" pos:column="34">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="57" pos:column="17">debugs<pos:position pos:line="57" pos:column="23"/></name><argument_list pos:line="57" pos:column="23">(<argument><expr><literal type="number" pos:line="57" pos:column="24">90<pos:position pos:line="57" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="57" pos:column="28">2<pos:position pos:line="57" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="31">"hdr sc: ignoring duplicate control-directive: near '"<pos:position pos:line="57" pos:column="85"/></literal> <operator pos:line="57" pos:column="86">&lt;&lt;<pos:position pos:line="57" pos:column="94"/></operator> <name pos:line="57" pos:column="89">item<pos:position pos:line="57" pos:column="93"/></name> <operator pos:line="57" pos:column="94">&lt;&lt;<pos:position pos:line="57" pos:column="102"/></operator> <literal type="string" pos:line="57" pos:column="97">"' in '"<pos:position pos:line="57" pos:column="105"/></literal> <operator pos:line="57" pos:column="106">&lt;&lt;<pos:position pos:line="57" pos:column="114"/></operator> <name pos:line="57" pos:column="109">str<pos:position pos:line="57" pos:column="112"/></name> <operator pos:line="57" pos:column="113">&lt;&lt;<pos:position pos:line="57" pos:column="121"/></operator> <literal type="string" pos:line="57" pos:column="116">"'"<pos:position pos:line="57" pos:column="119"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="120"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="121"/></expr_stmt></block></then></if>

            <expr_stmt><expr><name><name pos:line="59" pos:column="13">ScFieldsInfo<pos:position pos:line="59" pos:column="25"/></name><index pos:line="59" pos:column="25">[<expr><name pos:line="59" pos:column="26">type<pos:position pos:line="59" pos:column="30"/></name></expr>]<pos:position pos:line="59" pos:column="31"/></index></name><operator pos:line="59" pos:column="31">.<pos:position pos:line="59" pos:column="32"/></operator><name><name pos:line="59" pos:column="32">stat<pos:position pos:line="59" pos:column="36"/></name><operator pos:line="59" pos:column="36">.<pos:position pos:line="59" pos:column="37"/></operator><name pos:line="59" pos:column="37">repCount<pos:position pos:line="59" pos:column="45"/></name></name><operator pos:line="59" pos:column="45">++<pos:position pos:line="59" pos:column="47"/></operator></expr>;<pos:position pos:line="59" pos:column="48"/></expr_stmt>

            <continue pos:line="61" pos:column="13">continue;<pos:position pos:line="61" pos:column="22"/></continue>
        }<pos:position pos:line="62" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="64" pos:column="9">/* update mask */</comment>
        <expr_stmt><expr><call><name pos:line="65" pos:column="9">EBIT_SET<pos:position pos:line="65" pos:column="17"/></name><argument_list pos:line="65" pos:column="17">(<argument><expr><name><name pos:line="65" pos:column="18">sct<pos:position pos:line="65" pos:column="21"/></name><operator pos:line="65" pos:column="21">-&gt;<pos:position pos:line="65" pos:column="26"/></operator><name pos:line="65" pos:column="23">mask<pos:position pos:line="65" pos:column="27"/></name></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="29">type<pos:position pos:line="65" pos:column="33"/></name></expr></argument>)<pos:position pos:line="65" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="35"/></expr_stmt>

        <comment type="block" pos:line="67" pos:column="9">/* post-processing special cases */</comment>
        <switch pos:line="68" pos:column="9">switch <condition pos:line="68" pos:column="16">(<expr><name pos:line="68" pos:column="17">type<pos:position pos:line="68" pos:column="21"/></name></expr>)<pos:position pos:line="68" pos:column="22"/></condition> <block pos:line="68" pos:column="23">{

        <case pos:line="70" pos:column="9">case <expr><name pos:line="70" pos:column="14">SC_MAX_AGE<pos:position pos:line="70" pos:column="24"/></name></expr>:<pos:position pos:line="70" pos:column="25"/></case>

            <if pos:line="72" pos:column="13">if <condition pos:line="72" pos:column="16">(<expr><operator pos:line="72" pos:column="17">!<pos:position pos:line="72" pos:column="18"/></operator><name pos:line="72" pos:column="18">p<pos:position pos:line="72" pos:column="19"/></name> <operator pos:line="72" pos:column="20">||<pos:position pos:line="72" pos:column="22"/></operator> <operator pos:line="72" pos:column="23">!<pos:position pos:line="72" pos:column="24"/></operator><call><name pos:line="72" pos:column="24">httpHeaderParseInt<pos:position pos:line="72" pos:column="42"/></name><argument_list pos:line="72" pos:column="42">(<argument><expr><name pos:line="72" pos:column="43">p<pos:position pos:line="72" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="72" pos:column="46">&amp;<pos:position pos:line="72" pos:column="51"/></operator><name><name pos:line="72" pos:column="47">sct<pos:position pos:line="72" pos:column="50"/></name><operator pos:line="72" pos:column="50">-&gt;<pos:position pos:line="72" pos:column="55"/></operator><name pos:line="72" pos:column="52">max_age<pos:position pos:line="72" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="72" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="72" pos:column="61"/></condition><then pos:line="72" pos:column="61"> <block pos:line="72" pos:column="62">{
                <expr_stmt><expr><call><name pos:line="73" pos:column="17">debugs<pos:position pos:line="73" pos:column="23"/></name><argument_list pos:line="73" pos:column="23">(<argument><expr><literal type="number" pos:line="73" pos:column="24">90<pos:position pos:line="73" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="73" pos:column="28">2<pos:position pos:line="73" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="31">"sc: invalid max-age specs near '"<pos:position pos:line="73" pos:column="65"/></literal> <operator pos:line="73" pos:column="66">&lt;&lt;<pos:position pos:line="73" pos:column="74"/></operator> <name pos:line="73" pos:column="69">item<pos:position pos:line="73" pos:column="73"/></name> <operator pos:line="73" pos:column="74">&lt;&lt;<pos:position pos:line="73" pos:column="82"/></operator> <literal type="string" pos:line="73" pos:column="77">"'"<pos:position pos:line="73" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="82"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="74" pos:column="17">sct<pos:position pos:line="74" pos:column="20"/></name><operator pos:line="74" pos:column="20">-&gt;<pos:position pos:line="74" pos:column="25"/></operator><name pos:line="74" pos:column="22">max_age<pos:position pos:line="74" pos:column="29"/></name></name> <operator pos:line="74" pos:column="30">=<pos:position pos:line="74" pos:column="31"/></operator> <operator pos:line="74" pos:column="32">-<pos:position pos:line="74" pos:column="33"/></operator><literal type="number" pos:line="74" pos:column="33">1<pos:position pos:line="74" pos:column="34"/></literal></expr>;<pos:position pos:line="74" pos:column="35"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="75" pos:column="17">EBIT_CLR<pos:position pos:line="75" pos:column="25"/></name><argument_list pos:line="75" pos:column="25">(<argument><expr><name><name pos:line="75" pos:column="26">sct<pos:position pos:line="75" pos:column="29"/></name><operator pos:line="75" pos:column="29">-&gt;<pos:position pos:line="75" pos:column="34"/></operator><name pos:line="75" pos:column="31">mask<pos:position pos:line="75" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="37">type<pos:position pos:line="75" pos:column="41"/></name></expr></argument>)<pos:position pos:line="75" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="43"/></expr_stmt>
            }<pos:position pos:line="76" pos:column="14"/></block></then></if>

            <if pos:line="78" pos:column="13">if <condition pos:line="78" pos:column="16">(<expr><operator pos:line="78" pos:column="17">(<pos:position pos:line="78" pos:column="18"/></operator><name pos:line="78" pos:column="18">p<pos:position pos:line="78" pos:column="19"/></name> <operator pos:line="78" pos:column="20">=<pos:position pos:line="78" pos:column="21"/></operator> <call><name pos:line="78" pos:column="22">strchr<pos:position pos:line="78" pos:column="28"/></name> <argument_list pos:line="78" pos:column="29">(<argument><expr><name pos:line="78" pos:column="30">p<pos:position pos:line="78" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="78" pos:column="33">'+'<pos:position pos:line="78" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="78" pos:column="37"/></argument_list></call><operator pos:line="78" pos:column="37">)<pos:position pos:line="78" pos:column="38"/></operator></expr>)<pos:position pos:line="78" pos:column="39"/></condition><then pos:line="78" pos:column="39">
                <block type="pseudo"><if pos:line="79" pos:column="17">if <condition pos:line="79" pos:column="20">(<expr><operator pos:line="79" pos:column="21">!<pos:position pos:line="79" pos:column="22"/></operator><call><name pos:line="79" pos:column="22">httpHeaderParseInt<pos:position pos:line="79" pos:column="40"/></name><argument_list pos:line="79" pos:column="40">(<argument><expr><operator pos:line="79" pos:column="41">++<pos:position pos:line="79" pos:column="43"/></operator><name pos:line="79" pos:column="43">p<pos:position pos:line="79" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="79" pos:column="46">&amp;<pos:position pos:line="79" pos:column="51"/></operator><name><name pos:line="79" pos:column="47">sct<pos:position pos:line="79" pos:column="50"/></name><operator pos:line="79" pos:column="50">-&gt;<pos:position pos:line="79" pos:column="55"/></operator><name pos:line="79" pos:column="52">max_stale<pos:position pos:line="79" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="79" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="79" pos:column="63"/></condition><then pos:line="79" pos:column="63"> <block pos:line="79" pos:column="64">{
                    <expr_stmt><expr><call><name pos:line="80" pos:column="21">debugs<pos:position pos:line="80" pos:column="27"/></name><argument_list pos:line="80" pos:column="27">(<argument><expr><literal type="number" pos:line="80" pos:column="28">90<pos:position pos:line="80" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="80" pos:column="32">2<pos:position pos:line="80" pos:column="33"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="80" pos:column="35">"sc: invalid max-stale specs near '"<pos:position pos:line="80" pos:column="71"/></literal> <operator pos:line="80" pos:column="72">&lt;&lt;<pos:position pos:line="80" pos:column="80"/></operator> <name pos:line="80" pos:column="75">item<pos:position pos:line="80" pos:column="79"/></name> <operator pos:line="80" pos:column="80">&lt;&lt;<pos:position pos:line="80" pos:column="88"/></operator> <literal type="string" pos:line="80" pos:column="83">"'"<pos:position pos:line="80" pos:column="86"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="88"/></expr_stmt>
                    <expr_stmt><expr><name><name pos:line="81" pos:column="21">sct<pos:position pos:line="81" pos:column="24"/></name><operator pos:line="81" pos:column="24">-&gt;<pos:position pos:line="81" pos:column="29"/></operator><name pos:line="81" pos:column="26">max_stale<pos:position pos:line="81" pos:column="35"/></name></name> <operator pos:line="81" pos:column="36">=<pos:position pos:line="81" pos:column="37"/></operator> <literal type="number" pos:line="81" pos:column="38">0<pos:position pos:line="81" pos:column="39"/></literal></expr>;<pos:position pos:line="81" pos:column="40"/></expr_stmt>
                    <comment type="block" pos:line="82" pos:column="21">/* leave the max-age alone */</comment>
                }<pos:position pos:line="83" pos:column="18"/></block></then></if></block></then></if>

            <break pos:line="85" pos:column="13">break;<pos:position pos:line="85" pos:column="19"/></break>

        <case pos:line="87" pos:column="9">case <expr><name pos:line="87" pos:column="14">SC_CONTENT<pos:position pos:line="87" pos:column="24"/></name></expr>:<pos:position pos:line="87" pos:column="25"/></case>

            <if pos:line="89" pos:column="13">if <condition pos:line="89" pos:column="16">(<expr><operator pos:line="89" pos:column="17">!<pos:position pos:line="89" pos:column="18"/></operator><name pos:line="89" pos:column="18">p<pos:position pos:line="89" pos:column="19"/></name> <operator pos:line="89" pos:column="20">||<pos:position pos:line="89" pos:column="22"/></operator> <operator pos:line="89" pos:column="23">!<pos:position pos:line="89" pos:column="24"/></operator><call><name pos:line="89" pos:column="24">httpHeaderParseQuotedString<pos:position pos:line="89" pos:column="51"/></name><argument_list pos:line="89" pos:column="51">(<argument><expr><name pos:line="89" pos:column="52">p<pos:position pos:line="89" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="89" pos:column="55">&amp;<pos:position pos:line="89" pos:column="60"/></operator><name><name pos:line="89" pos:column="56">sct<pos:position pos:line="89" pos:column="59"/></name><operator pos:line="89" pos:column="59">-&gt;<pos:position pos:line="89" pos:column="64"/></operator><name pos:line="89" pos:column="61">content<pos:position pos:line="89" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="89" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="89" pos:column="70"/></condition><then pos:line="89" pos:column="70"> <block pos:line="89" pos:column="71">{
                <expr_stmt><expr><call><name pos:line="90" pos:column="17">debugs<pos:position pos:line="90" pos:column="23"/></name><argument_list pos:line="90" pos:column="23">(<argument><expr><literal type="number" pos:line="90" pos:column="24">90<pos:position pos:line="90" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="90" pos:column="28">2<pos:position pos:line="90" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="90" pos:column="31">"sc: invalid content= quoted string near '"<pos:position pos:line="90" pos:column="74"/></literal> <operator pos:line="90" pos:column="75">&lt;&lt;<pos:position pos:line="90" pos:column="83"/></operator> <name pos:line="90" pos:column="78">item<pos:position pos:line="90" pos:column="82"/></name> <operator pos:line="90" pos:column="83">&lt;&lt;<pos:position pos:line="90" pos:column="91"/></operator> <literal type="string" pos:line="90" pos:column="86">"'"<pos:position pos:line="90" pos:column="89"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="91"/></expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="91" pos:column="17">sct<pos:position pos:line="91" pos:column="20"/></name><operator pos:line="91" pos:column="20">-&gt;<pos:position pos:line="91" pos:column="25"/></operator><name pos:line="91" pos:column="22">content<pos:position pos:line="91" pos:column="29"/></name><operator pos:line="91" pos:column="29">.<pos:position pos:line="91" pos:column="30"/></operator><name pos:line="91" pos:column="30">clean<pos:position pos:line="91" pos:column="35"/></name></name><argument_list pos:line="91" pos:column="35">()<pos:position pos:line="91" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="38"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="92" pos:column="17">EBIT_CLR<pos:position pos:line="92" pos:column="25"/></name><argument_list pos:line="92" pos:column="25">(<argument><expr><name><name pos:line="92" pos:column="26">sct<pos:position pos:line="92" pos:column="29"/></name><operator pos:line="92" pos:column="29">-&gt;<pos:position pos:line="92" pos:column="34"/></operator><name pos:line="92" pos:column="31">mask<pos:position pos:line="92" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="37">type<pos:position pos:line="92" pos:column="41"/></name></expr></argument>)<pos:position pos:line="92" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="43"/></expr_stmt>
            }<pos:position pos:line="93" pos:column="14"/></block></then></if>

        <default pos:line="95" pos:column="9">default:<pos:position pos:line="95" pos:column="17"/></default>
            <break pos:line="96" pos:column="13">break;<pos:position pos:line="96" pos:column="19"/></break>
        }<pos:position pos:line="97" pos:column="10"/></block></switch>
    }<pos:position pos:line="98" pos:column="6"/></block></while>

    <return pos:line="100" pos:column="5">return <expr><name><name pos:line="100" pos:column="12">sc<pos:position pos:line="100" pos:column="14"/></name><operator pos:line="100" pos:column="14">-&gt;<pos:position pos:line="100" pos:column="19"/></operator><name pos:line="100" pos:column="16">targets<pos:position pos:line="100" pos:column="23"/></name><operator pos:line="100" pos:column="23">.<pos:position pos:line="100" pos:column="24"/></operator><name pos:line="100" pos:column="24">head<pos:position pos:line="100" pos:column="28"/></name></name> <operator pos:line="100" pos:column="29">!=<pos:position pos:line="100" pos:column="31"/></operator> <name pos:line="100" pos:column="32">NULL<pos:position pos:line="100" pos:column="36"/></name></expr>;<pos:position pos:line="100" pos:column="37"/></return>
}<pos:position pos:line="101" pos:column="2"/></block></function></unit>
