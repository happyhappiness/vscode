<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2527_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">FtpStateData<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">writeCommand<pos:position pos:line="2" pos:column="27"/></name></name><parameter_list pos:line="2" pos:column="27">(<parameter><decl><type><specifier pos:line="2" pos:column="28">const<pos:position pos:line="2" pos:column="33"/></specifier> <name pos:line="2" pos:column="34">char<pos:position pos:line="2" pos:column="38"/></name> <modifier pos:line="2" pos:column="39">*<pos:position pos:line="2" pos:column="40"/></modifier></type><name pos:line="2" pos:column="40">buf<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="44"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">ebuf<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>
    <comment type="block" pos:line="5" pos:column="5">/* trace FTP protocol communications at level 2 */</comment>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">debugs<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><literal type="number" pos:line="6" pos:column="12">9<pos:position pos:line="6" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="15">2<pos:position pos:line="6" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="18">"ftp&lt;&lt; "<pos:position pos:line="6" pos:column="32"/></literal> <operator pos:line="6" pos:column="27">&lt;&lt;<pos:position pos:line="6" pos:column="35"/></operator> <name pos:line="6" pos:column="30">buf<pos:position pos:line="6" pos:column="33"/></name></expr></argument>)<pos:position pos:line="6" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="35"/></expr_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name><name pos:line="8" pos:column="9">Config<pos:position pos:line="8" pos:column="15"/></name><operator pos:line="8" pos:column="15">.<pos:position pos:line="8" pos:column="16"/></operator><name pos:line="8" pos:column="16">Ftp<pos:position pos:line="8" pos:column="19"/></name><operator pos:line="8" pos:column="19">.<pos:position pos:line="8" pos:column="20"/></operator><name pos:line="8" pos:column="20">telnet<pos:position pos:line="8" pos:column="26"/></name></name></expr>)<pos:position pos:line="8" pos:column="27"/></condition><then pos:line="8" pos:column="27">
        <block type="pseudo"><expr_stmt><expr><name pos:line="9" pos:column="9">ebuf<pos:position pos:line="9" pos:column="13"/></name> <operator pos:line="9" pos:column="14">=<pos:position pos:line="9" pos:column="15"/></operator> <call><name pos:line="9" pos:column="16">escapeIAC<pos:position pos:line="9" pos:column="25"/></name><argument_list pos:line="9" pos:column="25">(<argument><expr><name pos:line="9" pos:column="26">buf<pos:position pos:line="9" pos:column="29"/></name></expr></argument>)<pos:position pos:line="9" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="31"/></expr_stmt></block></then>
    <else pos:line="10" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="9">ebuf<pos:position pos:line="11" pos:column="13"/></name> <operator pos:line="11" pos:column="14">=<pos:position pos:line="11" pos:column="15"/></operator> <call><name pos:line="11" pos:column="16">xstrdup<pos:position pos:line="11" pos:column="23"/></name><argument_list pos:line="11" pos:column="23">(<argument><expr><name pos:line="11" pos:column="24">buf<pos:position pos:line="11" pos:column="27"/></name></expr></argument>)<pos:position pos:line="11" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="29"/></expr_stmt></block></else></if>

    <expr_stmt><expr><call><name pos:line="13" pos:column="5">safe_free<pos:position pos:line="13" pos:column="14"/></name><argument_list pos:line="13" pos:column="14">(<argument><expr><name><name pos:line="13" pos:column="15">ctrl<pos:position pos:line="13" pos:column="19"/></name><operator pos:line="13" pos:column="19">.<pos:position pos:line="13" pos:column="20"/></operator><name pos:line="13" pos:column="20">last_command<pos:position pos:line="13" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="34"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="15" pos:column="5">safe_free<pos:position pos:line="15" pos:column="14"/></name><argument_list pos:line="15" pos:column="14">(<argument><expr><name><name pos:line="15" pos:column="15">ctrl<pos:position pos:line="15" pos:column="19"/></name><operator pos:line="15" pos:column="19">.<pos:position pos:line="15" pos:column="20"/></operator><name pos:line="15" pos:column="20">last_reply<pos:position pos:line="15" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="32"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="17" pos:column="5">ctrl<pos:position pos:line="17" pos:column="9"/></name><operator pos:line="17" pos:column="9">.<pos:position pos:line="17" pos:column="10"/></operator><name pos:line="17" pos:column="10">last_command<pos:position pos:line="17" pos:column="22"/></name></name> <operator pos:line="17" pos:column="23">=<pos:position pos:line="17" pos:column="24"/></operator> <name pos:line="17" pos:column="25">ebuf<pos:position pos:line="17" pos:column="29"/></name></expr>;<pos:position pos:line="17" pos:column="30"/></expr_stmt>

    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><operator pos:line="19" pos:column="9">!<pos:position pos:line="19" pos:column="10"/></operator><call><name pos:line="19" pos:column="10">canSend<pos:position pos:line="19" pos:column="17"/></name><argument_list pos:line="19" pos:column="17">(<argument><expr><name><name pos:line="19" pos:column="18">ctrl<pos:position pos:line="19" pos:column="22"/></name><operator pos:line="19" pos:column="22">.<pos:position pos:line="19" pos:column="23"/></operator><name pos:line="19" pos:column="23">fd<pos:position pos:line="19" pos:column="25"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="27"/></condition><then pos:line="19" pos:column="27"> <block pos:line="19" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">debugs<pos:position pos:line="20" pos:column="15"/></name><argument_list pos:line="20" pos:column="15">(<argument><expr><literal type="number" pos:line="20" pos:column="16">9<pos:position pos:line="20" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="19">2<pos:position pos:line="20" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="22">HERE<pos:position pos:line="20" pos:column="26"/></name> <operator pos:line="20" pos:column="27">&lt;&lt;<pos:position pos:line="20" pos:column="35"/></operator> <literal type="string" pos:line="20" pos:column="30">"cannot send to closing ctrl FD "<pos:position pos:line="20" pos:column="63"/></literal> <operator pos:line="20" pos:column="64">&lt;&lt;<pos:position pos:line="20" pos:column="72"/></operator> <name><name pos:line="20" pos:column="67">ctrl<pos:position pos:line="20" pos:column="71"/></name><operator pos:line="20" pos:column="71">.<pos:position pos:line="20" pos:column="72"/></operator><name pos:line="20" pos:column="72">fd<pos:position pos:line="20" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="76"/></expr_stmt>
        <comment type="line" pos:line="21" pos:column="9">// TODO: assert(ctrl.closer != NULL);</comment>
        <return pos:line="22" pos:column="9">return;<pos:position pos:line="22" pos:column="16"/></return>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>

    <typedef pos:line="25" pos:column="5">typedef <type><name><name pos:line="25" pos:column="13">CommCbMemFunT<pos:position pos:line="25" pos:column="26"/></name><argument_list type="generic" pos:line="25" pos:column="26">&lt;<argument><expr><name pos:line="25" pos:column="27">FtpStateData<pos:position pos:line="25" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="41">CommIoCbParams<pos:position pos:line="25" pos:column="55"/></name></expr></argument>&gt;<pos:position pos:line="25" pos:column="59"/></argument_list></name></type> <name pos:line="25" pos:column="57">Dialer<pos:position pos:line="25" pos:column="63"/></name>;<pos:position pos:line="25" pos:column="64"/></typedef>
    <decl_stmt><decl><type><name><name pos:line="26" pos:column="5">AsyncCall<pos:position pos:line="26" pos:column="14"/></name><operator pos:line="26" pos:column="14">::<pos:position pos:line="26" pos:column="16"/></operator><name pos:line="26" pos:column="16">Pointer<pos:position pos:line="26" pos:column="23"/></name></name></type> <name pos:line="26" pos:column="24">call<pos:position pos:line="26" pos:column="28"/></name> <init pos:line="26" pos:column="29">= <expr><call><name pos:line="26" pos:column="31">JobCallback<pos:position pos:line="26" pos:column="42"/></name><argument_list pos:line="26" pos:column="42">(<argument><expr><literal type="number" pos:line="26" pos:column="43">9<pos:position pos:line="26" pos:column="44"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="46">5<pos:position pos:line="26" pos:column="47"/></literal></expr></argument>,
                                          <argument><expr><name pos:line="27" pos:column="43">Dialer<pos:position pos:line="27" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="51">this<pos:position pos:line="27" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="57">FtpStateData<pos:position pos:line="27" pos:column="69"/></name><operator pos:line="27" pos:column="69">::<pos:position pos:line="27" pos:column="71"/></operator><name pos:line="27" pos:column="71">ftpWriteCommandCallback<pos:position pos:line="27" pos:column="94"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="95"/></argument_list></call></expr></init></decl>;<pos:position pos:line="27" pos:column="96"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">comm_write<pos:position pos:line="28" pos:column="15"/></name><argument_list pos:line="28" pos:column="15">(<argument><expr><name><name pos:line="28" pos:column="16">ctrl<pos:position pos:line="28" pos:column="20"/></name><operator pos:line="28" pos:column="20">.<pos:position pos:line="28" pos:column="21"/></operator><name pos:line="28" pos:column="21">fd<pos:position pos:line="28" pos:column="23"/></name></name></expr></argument>,
               <argument><expr><name><name pos:line="29" pos:column="16">ctrl<pos:position pos:line="29" pos:column="20"/></name><operator pos:line="29" pos:column="20">.<pos:position pos:line="29" pos:column="21"/></operator><name pos:line="29" pos:column="21">last_command<pos:position pos:line="29" pos:column="33"/></name></name></expr></argument>,
               <argument><expr><call><name pos:line="30" pos:column="16">strlen<pos:position pos:line="30" pos:column="22"/></name><argument_list pos:line="30" pos:column="22">(<argument><expr><name><name pos:line="30" pos:column="23">ctrl<pos:position pos:line="30" pos:column="27"/></name><operator pos:line="30" pos:column="27">.<pos:position pos:line="30" pos:column="28"/></operator><name pos:line="30" pos:column="28">last_command<pos:position pos:line="30" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="41"/></argument_list></call></expr></argument>,
               <argument><expr><name pos:line="31" pos:column="16">call<pos:position pos:line="31" pos:column="20"/></name></expr></argument>)<pos:position pos:line="31" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="22"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="33" pos:column="5">scheduleReadControlReply<pos:position pos:line="33" pos:column="29"/></name><argument_list pos:line="33" pos:column="29">(<argument><expr><literal type="number" pos:line="33" pos:column="30">0<pos:position pos:line="33" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="33"/></expr_stmt>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
