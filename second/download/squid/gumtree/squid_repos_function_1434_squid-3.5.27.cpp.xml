<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1434_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type>
<name><name pos:line="2" pos:column="1">SBuf<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">rawSpace<pos:position pos:line="2" pos:column="15"/></name></name><parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><name pos:line="2" pos:column="16">size_type<pos:position pos:line="2" pos:column="25"/></name></type> <name pos:line="2" pos:column="26">minSpace<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="35"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">Must<pos:position pos:line="4" pos:column="9"/></name><argument_list pos:line="4" pos:column="9">(<argument><expr><call><name pos:line="4" pos:column="10">length<pos:position pos:line="4" pos:column="16"/></name><argument_list pos:line="4" pos:column="16">()<pos:position pos:line="4" pos:column="18"/></argument_list></call> <operator pos:line="4" pos:column="19">&lt;=<pos:position pos:line="4" pos:column="24"/></operator> <name pos:line="4" pos:column="22">maxSize<pos:position pos:line="4" pos:column="29"/></name> <operator pos:line="4" pos:column="30">-<pos:position pos:line="4" pos:column="31"/></operator> <name pos:line="4" pos:column="32">minSpace<pos:position pos:line="4" pos:column="40"/></name></expr></argument>)<pos:position pos:line="4" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">debugs<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><literal type="number" pos:line="5" pos:column="12">24<pos:position pos:line="5" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="16">7<pos:position pos:line="5" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="19">"reserving "<pos:position pos:line="5" pos:column="31"/></literal> <operator pos:line="5" pos:column="32">&lt;&lt;<pos:position pos:line="5" pos:column="40"/></operator> <name pos:line="5" pos:column="35">minSpace<pos:position pos:line="5" pos:column="43"/></name> <operator pos:line="5" pos:column="44">&lt;&lt;<pos:position pos:line="5" pos:column="52"/></operator> <literal type="string" pos:line="5" pos:column="47">" for "<pos:position pos:line="5" pos:column="54"/></literal> <operator pos:line="5" pos:column="55">&lt;&lt;<pos:position pos:line="5" pos:column="63"/></operator> <name pos:line="5" pos:column="58">id<pos:position pos:line="5" pos:column="60"/></name></expr></argument>)<pos:position pos:line="5" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="6" pos:column="5">++<pos:position pos:line="6" pos:column="7"/></operator><name><name pos:line="6" pos:column="7">stats<pos:position pos:line="6" pos:column="12"/></name><operator pos:line="6" pos:column="12">.<pos:position pos:line="6" pos:column="13"/></operator><name pos:line="6" pos:column="13">rawAccess<pos:position pos:line="6" pos:column="22"/></name></name></expr>;<pos:position pos:line="6" pos:column="23"/></expr_stmt>
    <comment type="line" pos:line="7" pos:column="5">// we're not concerned about RefCounts here,</comment>
    <comment type="line" pos:line="8" pos:column="5">// the store knows the last-used portion. If</comment>
    <comment type="line" pos:line="9" pos:column="5">// it's available, we're effectively claiming ownership</comment>
    <comment type="line" pos:line="10" pos:column="5">// of it. If it's not, we need to go away (realloc)</comment>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><call><name><name pos:line="11" pos:column="9">store_<pos:position pos:line="11" pos:column="15"/></name><operator pos:line="11" pos:column="15">-&gt;<pos:position pos:line="11" pos:column="20"/></operator><name pos:line="11" pos:column="17">canAppend<pos:position pos:line="11" pos:column="26"/></name></name><argument_list pos:line="11" pos:column="26">(<argument><expr><name pos:line="11" pos:column="27">off_<pos:position pos:line="11" pos:column="31"/></name><operator pos:line="11" pos:column="31">+<pos:position pos:line="11" pos:column="32"/></operator><name pos:line="11" pos:column="32">len_<pos:position pos:line="11" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="38">minSpace<pos:position pos:line="11" pos:column="46"/></name></expr></argument>)<pos:position pos:line="11" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="48"/></condition><then pos:line="11" pos:column="48"> <block pos:line="11" pos:column="49">{
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">debugs<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><literal type="number" pos:line="12" pos:column="16">24<pos:position pos:line="12" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="20">7<pos:position pos:line="12" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="23">id<pos:position pos:line="12" pos:column="25"/></name> <operator pos:line="12" pos:column="26">&lt;&lt;<pos:position pos:line="12" pos:column="34"/></operator> <literal type="string" pos:line="12" pos:column="29">" not growing"<pos:position pos:line="12" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="45"/></expr_stmt>
        <return pos:line="13" pos:column="9">return <expr><call><name pos:line="13" pos:column="16">bufEnd<pos:position pos:line="13" pos:column="22"/></name><argument_list pos:line="13" pos:column="22">()<pos:position pos:line="13" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="25"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>
    <comment type="line" pos:line="15" pos:column="5">// TODO: we may try to memmove before realloc'ing in order to avoid</comment>
    <comment type="line" pos:line="16" pos:column="5">//   one allocation operation, if we're the sole owners of a MemBlob.</comment>
    <comment type="line" pos:line="17" pos:column="5">//   Maybe some heuristic on off_ and length()?</comment>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">cow<pos:position pos:line="18" pos:column="8"/></name><argument_list pos:line="18" pos:column="8">(<argument><expr><name pos:line="18" pos:column="9">minSpace<pos:position pos:line="18" pos:column="17"/></name><operator pos:line="18" pos:column="17">+<pos:position pos:line="18" pos:column="18"/></operator><call><name pos:line="18" pos:column="18">length<pos:position pos:line="18" pos:column="24"/></name><argument_list pos:line="18" pos:column="24">()<pos:position pos:line="18" pos:column="26"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="28"/></expr_stmt>
    <return pos:line="19" pos:column="5">return <expr><call><name pos:line="19" pos:column="12">bufEnd<pos:position pos:line="19" pos:column="18"/></name><argument_list pos:line="19" pos:column="18">()<pos:position pos:line="19" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="21"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
