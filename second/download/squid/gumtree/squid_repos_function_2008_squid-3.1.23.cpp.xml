<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2008_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HttpStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">processReplyBody<pos:position pos:line="2" pos:column="32"/></name></name><parameter_list pos:line="2" pos:column="32">()<pos:position pos:line="2" pos:column="34"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">AsyncCall<pos:position pos:line="4" pos:column="14"/></name><operator pos:line="4" pos:column="14">::<pos:position pos:line="4" pos:column="16"/></operator><name pos:line="4" pos:column="16">Pointer<pos:position pos:line="4" pos:column="23"/></name></name></type> <name pos:line="4" pos:column="24">call<pos:position pos:line="4" pos:column="28"/></name></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">IpAddress<pos:position pos:line="5" pos:column="14"/></name></type> <name pos:line="5" pos:column="15">client_addr<pos:position pos:line="5" pos:column="26"/></name></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">bool<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">ispinned<pos:position pos:line="6" pos:column="18"/></name> <init pos:line="6" pos:column="19">= <expr><literal type="boolean" pos:line="6" pos:column="21">false<pos:position pos:line="6" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="27"/></decl_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><operator pos:line="8" pos:column="9">!<pos:position pos:line="8" pos:column="10"/></operator><name><name pos:line="8" pos:column="10">flags<pos:position pos:line="8" pos:column="15"/></name><operator pos:line="8" pos:column="15">.<pos:position pos:line="8" pos:column="16"/></operator><name pos:line="8" pos:column="16">headers_parsed<pos:position pos:line="8" pos:column="30"/></name></name></expr>)<pos:position pos:line="8" pos:column="31"/></condition><then pos:line="8" pos:column="31"> <block pos:line="8" pos:column="32">{
        <expr_stmt><expr><name><name pos:line="9" pos:column="9">flags<pos:position pos:line="9" pos:column="14"/></name><operator pos:line="9" pos:column="14">.<pos:position pos:line="9" pos:column="15"/></operator><name pos:line="9" pos:column="15">do_next_read<pos:position pos:line="9" pos:column="27"/></name></name> <operator pos:line="9" pos:column="28">=<pos:position pos:line="9" pos:column="29"/></operator> <literal type="number" pos:line="9" pos:column="30">1<pos:position pos:line="9" pos:column="31"/></literal></expr>;<pos:position pos:line="9" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">maybeReadVirginBody<pos:position pos:line="10" pos:column="28"/></name><argument_list pos:line="10" pos:column="28">()<pos:position pos:line="10" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="31"/></expr_stmt>
        <return pos:line="11" pos:column="9">return;<pos:position pos:line="11" pos:column="16"/></return>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>

<cpp:if pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">if<pos:position pos:line="14" pos:column="4"/></cpp:directive> <expr><name pos:line="14" pos:column="5">USE_ADAPTATION<pos:position pos:line="14" pos:column="19"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">debugs<pos:position pos:line="15" pos:column="11"/></name><argument_list pos:line="15" pos:column="11">(<argument><expr><literal type="number" pos:line="15" pos:column="12">11<pos:position pos:line="15" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="15" pos:column="15">5<pos:position pos:line="15" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="18">HERE<pos:position pos:line="15" pos:column="22"/></name> <operator pos:line="15" pos:column="23">&lt;&lt;<pos:position pos:line="15" pos:column="31"/></operator> <literal type="string" pos:line="15" pos:column="26">"adaptationAccessCheckPending="<pos:position pos:line="15" pos:column="57"/></literal> <operator pos:line="15" pos:column="58">&lt;&lt;<pos:position pos:line="15" pos:column="66"/></operator> <name pos:line="15" pos:column="61">adaptationAccessCheckPending<pos:position pos:line="15" pos:column="89"/></name></expr></argument>)<pos:position pos:line="15" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="91"/></expr_stmt>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name pos:line="16" pos:column="9">adaptationAccessCheckPending<pos:position pos:line="16" pos:column="37"/></name></expr>)<pos:position pos:line="16" pos:column="38"/></condition><then pos:line="16" pos:column="38">
        <block type="pseudo"><return pos:line="17" pos:column="9">return;<pos:position pos:line="17" pos:column="16"/></return></block></then></if>

<cpp:endif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">endif<pos:position pos:line="19" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="21" pos:column="5">/*
     * At this point the reply headers have been parsed and consumed.
     * That means header content has been removed from readBuf and
     * it contains only body data.
     */</comment>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name><name pos:line="26" pos:column="9">flags<pos:position pos:line="26" pos:column="14"/></name><operator pos:line="26" pos:column="14">.<pos:position pos:line="26" pos:column="15"/></operator><name pos:line="26" pos:column="15">chunked<pos:position pos:line="26" pos:column="22"/></name></name></expr>)<pos:position pos:line="26" pos:column="23"/></condition><then pos:line="26" pos:column="23"> <block pos:line="26" pos:column="24">{
        <if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><operator pos:line="27" pos:column="13">!<pos:position pos:line="27" pos:column="14"/></operator><call><name pos:line="27" pos:column="14">decodeAndWriteReplyBody<pos:position pos:line="27" pos:column="37"/></name><argument_list pos:line="27" pos:column="37">()<pos:position pos:line="27" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="40"/></condition><then pos:line="27" pos:column="40"> <block pos:line="27" pos:column="41">{
            <expr_stmt><expr><name><name pos:line="28" pos:column="13">flags<pos:position pos:line="28" pos:column="18"/></name><operator pos:line="28" pos:column="18">.<pos:position pos:line="28" pos:column="19"/></operator><name pos:line="28" pos:column="19">do_next_read<pos:position pos:line="28" pos:column="31"/></name></name> <operator pos:line="28" pos:column="32">=<pos:position pos:line="28" pos:column="33"/></operator> <literal type="number" pos:line="28" pos:column="34">0<pos:position pos:line="28" pos:column="35"/></literal></expr>;<pos:position pos:line="28" pos:column="36"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="29" pos:column="13">serverComplete<pos:position pos:line="29" pos:column="27"/></name><argument_list pos:line="29" pos:column="27">()<pos:position pos:line="29" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="30"/></expr_stmt>
            <return pos:line="30" pos:column="13">return;<pos:position pos:line="30" pos:column="20"/></return>
        }<pos:position pos:line="31" pos:column="10"/></block></then></if>
    }<pos:position pos:line="32" pos:column="6"/></block></then> <else pos:line="32" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="33" pos:column="9">writeReplyBody<pos:position pos:line="33" pos:column="23"/></name><argument_list pos:line="33" pos:column="23">()<pos:position pos:line="33" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="26"/></expr_stmt></block></else></if>

    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><call><name pos:line="35" pos:column="9">EBIT_TEST<pos:position pos:line="35" pos:column="18"/></name><argument_list pos:line="35" pos:column="18">(<argument><expr><name><name pos:line="35" pos:column="19">entry<pos:position pos:line="35" pos:column="24"/></name><operator pos:line="35" pos:column="24">-&gt;<pos:position pos:line="35" pos:column="29"/></operator><name pos:line="35" pos:column="26">flags<pos:position pos:line="35" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="33">ENTRY_ABORTED<pos:position pos:line="35" pos:column="46"/></name></expr></argument>)<pos:position pos:line="35" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="48"/></condition><then pos:line="35" pos:column="48"> <block pos:line="35" pos:column="49">{
        <comment type="block" pos:line="36" pos:column="9">/*
         * The above writeReplyBody() call could ABORT this entry,
         * in that case, the server FD should already be closed.
         * there's nothing for us to do.
         */</comment>
        <expr_stmt><expr><operator pos:line="41" pos:column="9">(<pos:position pos:line="41" pos:column="10"/></operator><name pos:line="41" pos:column="10">void<pos:position pos:line="41" pos:column="14"/></name><operator pos:line="41" pos:column="14">)<pos:position pos:line="41" pos:column="15"/></operator> <literal type="number" pos:line="41" pos:column="16">0<pos:position pos:line="41" pos:column="17"/></literal></expr>;<pos:position pos:line="41" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="42" pos:column="6"/></block></then> <else pos:line="42" pos:column="7">else
        <block type="pseudo"><switch pos:line="43" pos:column="9">switch <condition pos:line="43" pos:column="16">(<expr><call><name pos:line="43" pos:column="17">persistentConnStatus<pos:position pos:line="43" pos:column="37"/></name><argument_list pos:line="43" pos:column="37">()<pos:position pos:line="43" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="43" pos:column="40"/></condition> <block pos:line="43" pos:column="41">{
        <case pos:line="44" pos:column="9">case <expr><name pos:line="44" pos:column="14">INCOMPLETE_MSG<pos:position pos:line="44" pos:column="28"/></name></expr>:<pos:position pos:line="44" pos:column="29"/></case>
            <expr_stmt><expr><call><name pos:line="45" pos:column="13">debugs<pos:position pos:line="45" pos:column="19"/></name><argument_list pos:line="45" pos:column="19">(<argument><expr><literal type="number" pos:line="45" pos:column="20">11<pos:position pos:line="45" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="45" pos:column="24">5<pos:position pos:line="45" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="27">"processReplyBody: INCOMPLETE_MSG"<pos:position pos:line="45" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="63"/></expr_stmt>
            <comment type="block" pos:line="46" pos:column="13">/* Wait for more data or EOF condition */</comment>
            <if pos:line="47" pos:column="13">if <condition pos:line="47" pos:column="16">(<expr><name><name pos:line="47" pos:column="17">flags<pos:position pos:line="47" pos:column="22"/></name><operator pos:line="47" pos:column="22">.<pos:position pos:line="47" pos:column="23"/></operator><name pos:line="47" pos:column="23">keepalive_broken<pos:position pos:line="47" pos:column="39"/></name></name></expr>)<pos:position pos:line="47" pos:column="40"/></condition><then pos:line="47" pos:column="40"> <block pos:line="47" pos:column="41">{
                <expr_stmt><expr><name pos:line="48" pos:column="17">call<pos:position pos:line="48" pos:column="21"/></name> <operator pos:line="48" pos:column="22">=<pos:position pos:line="48" pos:column="23"/></operator> <name pos:line="48" pos:column="24">NULL<pos:position pos:line="48" pos:column="28"/></name></expr>;<pos:position pos:line="48" pos:column="29"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="49" pos:column="17">commSetTimeout<pos:position pos:line="49" pos:column="31"/></name><argument_list pos:line="49" pos:column="31">(<argument><expr><name pos:line="49" pos:column="32">fd<pos:position pos:line="49" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="49" pos:column="36">10<pos:position pos:line="49" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="40">call<pos:position pos:line="49" pos:column="44"/></name></expr></argument>)<pos:position pos:line="49" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="46"/></expr_stmt>
            }<pos:position pos:line="50" pos:column="14"/></block></then> <else pos:line="50" pos:column="15">else <block pos:line="50" pos:column="20">{
                <expr_stmt><expr><name pos:line="51" pos:column="17">call<pos:position pos:line="51" pos:column="21"/></name> <operator pos:line="51" pos:column="22">=<pos:position pos:line="51" pos:column="23"/></operator> <name pos:line="51" pos:column="24">NULL<pos:position pos:line="51" pos:column="28"/></name></expr>;<pos:position pos:line="51" pos:column="29"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="52" pos:column="17">commSetTimeout<pos:position pos:line="52" pos:column="31"/></name><argument_list pos:line="52" pos:column="31">(<argument><expr><name pos:line="52" pos:column="32">fd<pos:position pos:line="52" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="52" pos:column="36">Config<pos:position pos:line="52" pos:column="42"/></name><operator pos:line="52" pos:column="42">.<pos:position pos:line="52" pos:column="43"/></operator><name pos:line="52" pos:column="43">Timeout<pos:position pos:line="52" pos:column="50"/></name><operator pos:line="52" pos:column="50">.<pos:position pos:line="52" pos:column="51"/></operator><name pos:line="52" pos:column="51">read<pos:position pos:line="52" pos:column="55"/></name></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="57">call<pos:position pos:line="52" pos:column="61"/></name></expr></argument>)<pos:position pos:line="52" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="63"/></expr_stmt>
            }<pos:position pos:line="53" pos:column="14"/></block></else></if>

            <expr_stmt><expr><name><name pos:line="55" pos:column="13">flags<pos:position pos:line="55" pos:column="18"/></name><operator pos:line="55" pos:column="18">.<pos:position pos:line="55" pos:column="19"/></operator><name pos:line="55" pos:column="19">do_next_read<pos:position pos:line="55" pos:column="31"/></name></name> <operator pos:line="55" pos:column="32">=<pos:position pos:line="55" pos:column="33"/></operator> <literal type="number" pos:line="55" pos:column="34">1<pos:position pos:line="55" pos:column="35"/></literal></expr>;<pos:position pos:line="55" pos:column="36"/></expr_stmt>
            <break pos:line="56" pos:column="13">break;<pos:position pos:line="56" pos:column="19"/></break>

        <case pos:line="58" pos:column="9">case <expr><name pos:line="58" pos:column="14">COMPLETE_PERSISTENT_MSG<pos:position pos:line="58" pos:column="37"/></name></expr>:<pos:position pos:line="58" pos:column="38"/></case>
            <expr_stmt><expr><call><name pos:line="59" pos:column="13">debugs<pos:position pos:line="59" pos:column="19"/></name><argument_list pos:line="59" pos:column="19">(<argument><expr><literal type="number" pos:line="59" pos:column="20">11<pos:position pos:line="59" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="59" pos:column="24">5<pos:position pos:line="59" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="59" pos:column="27">"processReplyBody: COMPLETE_PERSISTENT_MSG"<pos:position pos:line="59" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="72"/></expr_stmt>
            <comment type="block" pos:line="60" pos:column="13">/* yes we have to clear all these! */</comment>
            <expr_stmt><expr><name pos:line="61" pos:column="13">call<pos:position pos:line="61" pos:column="17"/></name> <operator pos:line="61" pos:column="18">=<pos:position pos:line="61" pos:column="19"/></operator> <name pos:line="61" pos:column="20">NULL<pos:position pos:line="61" pos:column="24"/></name></expr>;<pos:position pos:line="61" pos:column="25"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="62" pos:column="13">commSetTimeout<pos:position pos:line="62" pos:column="27"/></name><argument_list pos:line="62" pos:column="27">(<argument><expr><name pos:line="62" pos:column="28">fd<pos:position pos:line="62" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="62" pos:column="32">-<pos:position pos:line="62" pos:column="33"/></operator><literal type="number" pos:line="62" pos:column="33">1<pos:position pos:line="62" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="62" pos:column="36">call<pos:position pos:line="62" pos:column="40"/></name></expr></argument>)<pos:position pos:line="62" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="42"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="63" pos:column="13">flags<pos:position pos:line="63" pos:column="18"/></name><operator pos:line="63" pos:column="18">.<pos:position pos:line="63" pos:column="19"/></operator><name pos:line="63" pos:column="19">do_next_read<pos:position pos:line="63" pos:column="31"/></name></name> <operator pos:line="63" pos:column="32">=<pos:position pos:line="63" pos:column="33"/></operator> <literal type="number" pos:line="63" pos:column="34">0<pos:position pos:line="63" pos:column="35"/></literal></expr>;<pos:position pos:line="63" pos:column="36"/></expr_stmt>

            <expr_stmt><expr><call><name pos:line="65" pos:column="13">comm_remove_close_handler<pos:position pos:line="65" pos:column="38"/></name><argument_list pos:line="65" pos:column="38">(<argument><expr><name pos:line="65" pos:column="39">fd<pos:position pos:line="65" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="43">closeHandler<pos:position pos:line="65" pos:column="55"/></name></expr></argument>)<pos:position pos:line="65" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="57"/></expr_stmt>
            <expr_stmt><expr><name pos:line="66" pos:column="13">closeHandler<pos:position pos:line="66" pos:column="25"/></name> <operator pos:line="66" pos:column="26">=<pos:position pos:line="66" pos:column="27"/></operator> <name pos:line="66" pos:column="28">NULL<pos:position pos:line="66" pos:column="32"/></name></expr>;<pos:position pos:line="66" pos:column="33"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="67" pos:column="13">fwd<pos:position pos:line="67" pos:column="16"/></name><operator pos:line="67" pos:column="16">-&gt;<pos:position pos:line="67" pos:column="21"/></operator><name pos:line="67" pos:column="18">unregister<pos:position pos:line="67" pos:column="28"/></name></name><argument_list pos:line="67" pos:column="28">(<argument><expr><name pos:line="67" pos:column="29">fd<pos:position pos:line="67" pos:column="31"/></name></expr></argument>)<pos:position pos:line="67" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="33"/></expr_stmt>

            <if pos:line="69" pos:column="13">if <condition pos:line="69" pos:column="16">(<expr><name><name pos:line="69" pos:column="17">orig_request<pos:position pos:line="69" pos:column="29"/></name><operator pos:line="69" pos:column="29">-&gt;<pos:position pos:line="69" pos:column="34"/></operator><name pos:line="69" pos:column="31">flags<pos:position pos:line="69" pos:column="36"/></name><operator pos:line="69" pos:column="36">.<pos:position pos:line="69" pos:column="37"/></operator><name pos:line="69" pos:column="37">spoof_client_ip<pos:position pos:line="69" pos:column="52"/></name></name></expr>)<pos:position pos:line="69" pos:column="53"/></condition><then pos:line="69" pos:column="53">
                <block type="pseudo"><expr_stmt><expr><name pos:line="70" pos:column="17">client_addr<pos:position pos:line="70" pos:column="28"/></name> <operator pos:line="70" pos:column="29">=<pos:position pos:line="70" pos:column="30"/></operator> <name><name pos:line="70" pos:column="31">orig_request<pos:position pos:line="70" pos:column="43"/></name><operator pos:line="70" pos:column="43">-&gt;<pos:position pos:line="70" pos:column="48"/></operator><name pos:line="70" pos:column="45">client_addr<pos:position pos:line="70" pos:column="56"/></name></name></expr>;<pos:position pos:line="70" pos:column="57"/></expr_stmt></block></then></if>


            <if pos:line="73" pos:column="13">if <condition pos:line="73" pos:column="16">(<expr><name><name pos:line="73" pos:column="17">request<pos:position pos:line="73" pos:column="24"/></name><operator pos:line="73" pos:column="24">-&gt;<pos:position pos:line="73" pos:column="29"/></operator><name pos:line="73" pos:column="26">flags<pos:position pos:line="73" pos:column="31"/></name><operator pos:line="73" pos:column="31">.<pos:position pos:line="73" pos:column="32"/></operator><name pos:line="73" pos:column="32">pinned<pos:position pos:line="73" pos:column="38"/></name></name></expr>)<pos:position pos:line="73" pos:column="39"/></condition><then pos:line="73" pos:column="39"> <block pos:line="73" pos:column="40">{
                <expr_stmt><expr><name pos:line="74" pos:column="17">ispinned<pos:position pos:line="74" pos:column="25"/></name> <operator pos:line="74" pos:column="26">=<pos:position pos:line="74" pos:column="27"/></operator> <literal type="boolean" pos:line="74" pos:column="28">true<pos:position pos:line="74" pos:column="32"/></literal></expr>;<pos:position pos:line="74" pos:column="33"/></expr_stmt>
            }<pos:position pos:line="75" pos:column="14"/></block></then> <elseif pos:line="75" pos:column="15">else <if pos:line="75" pos:column="20">if <condition pos:line="75" pos:column="23">(<expr><name><name pos:line="75" pos:column="24">request<pos:position pos:line="75" pos:column="31"/></name><operator pos:line="75" pos:column="31">-&gt;<pos:position pos:line="75" pos:column="36"/></operator><name pos:line="75" pos:column="33">flags<pos:position pos:line="75" pos:column="38"/></name><operator pos:line="75" pos:column="38">.<pos:position pos:line="75" pos:column="39"/></operator><name pos:line="75" pos:column="39">connection_auth<pos:position pos:line="75" pos:column="54"/></name></name> <operator pos:line="75" pos:column="55">&amp;&amp;<pos:position pos:line="75" pos:column="65"/></operator> <name><name pos:line="75" pos:column="58">request<pos:position pos:line="75" pos:column="65"/></name><operator pos:line="75" pos:column="65">-&gt;<pos:position pos:line="75" pos:column="70"/></operator><name pos:line="75" pos:column="67">flags<pos:position pos:line="75" pos:column="72"/></name><operator pos:line="75" pos:column="72">.<pos:position pos:line="75" pos:column="73"/></operator><name pos:line="75" pos:column="73">auth_sent<pos:position pos:line="75" pos:column="82"/></name></name></expr>)<pos:position pos:line="75" pos:column="83"/></condition><then pos:line="75" pos:column="83"> <block pos:line="75" pos:column="84">{
                <expr_stmt><expr><name pos:line="76" pos:column="17">ispinned<pos:position pos:line="76" pos:column="25"/></name> <operator pos:line="76" pos:column="26">=<pos:position pos:line="76" pos:column="27"/></operator> <literal type="boolean" pos:line="76" pos:column="28">true<pos:position pos:line="76" pos:column="32"/></literal></expr>;<pos:position pos:line="76" pos:column="33"/></expr_stmt>
            }<pos:position pos:line="77" pos:column="14"/></block></then></if></elseif></if>

            <if pos:line="79" pos:column="13">if <condition pos:line="79" pos:column="16">(<expr><call><name><name pos:line="79" pos:column="17">orig_request<pos:position pos:line="79" pos:column="29"/></name><operator pos:line="79" pos:column="29">-&gt;<pos:position pos:line="79" pos:column="34"/></operator><name pos:line="79" pos:column="31">pinnedConnection<pos:position pos:line="79" pos:column="47"/></name></name><argument_list pos:line="79" pos:column="47">()<pos:position pos:line="79" pos:column="49"/></argument_list></call> <operator pos:line="79" pos:column="50">&amp;&amp;<pos:position pos:line="79" pos:column="60"/></operator> <name pos:line="79" pos:column="53">ispinned<pos:position pos:line="79" pos:column="61"/></name></expr>)<pos:position pos:line="79" pos:column="62"/></condition><then pos:line="79" pos:column="62"> <block pos:line="79" pos:column="63">{
                <expr_stmt><expr><call><name><name pos:line="80" pos:column="17">orig_request<pos:position pos:line="80" pos:column="29"/></name><operator pos:line="80" pos:column="29">-&gt;<pos:position pos:line="80" pos:column="34"/></operator><name pos:line="80" pos:column="31">pinnedConnection<pos:position pos:line="80" pos:column="47"/></name></name><argument_list pos:line="80" pos:column="47">()<pos:position pos:line="80" pos:column="49"/></argument_list></call><operator pos:line="80" pos:column="49">-&gt;<pos:position pos:line="80" pos:column="54"/></operator><call><name pos:line="80" pos:column="51">pinConnection<pos:position pos:line="80" pos:column="64"/></name><argument_list pos:line="80" pos:column="64">(<argument><expr><name pos:line="80" pos:column="65">fd<pos:position pos:line="80" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="69">orig_request<pos:position pos:line="80" pos:column="81"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="83">_peer<pos:position pos:line="80" pos:column="88"/></name></expr></argument>,
                        <argument><expr><operator pos:line="81" pos:column="25">(<pos:position pos:line="81" pos:column="26"/></operator><name><name pos:line="81" pos:column="26">request<pos:position pos:line="81" pos:column="33"/></name><operator pos:line="81" pos:column="33">-&gt;<pos:position pos:line="81" pos:column="38"/></operator><name pos:line="81" pos:column="35">flags<pos:position pos:line="81" pos:column="40"/></name><operator pos:line="81" pos:column="40">.<pos:position pos:line="81" pos:column="41"/></operator><name pos:line="81" pos:column="41">connection_auth<pos:position pos:line="81" pos:column="56"/></name></name> <operator pos:line="81" pos:column="57">!=<pos:position pos:line="81" pos:column="59"/></operator> <literal type="number" pos:line="81" pos:column="60">0<pos:position pos:line="81" pos:column="61"/></literal><operator pos:line="81" pos:column="61">)<pos:position pos:line="81" pos:column="62"/></operator></expr></argument>)<pos:position pos:line="81" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="64"/></expr_stmt>
            }<pos:position pos:line="82" pos:column="14"/></block></then> <else pos:line="82" pos:column="15">else <block pos:line="82" pos:column="20">{
                <expr_stmt><expr><call><name><name pos:line="83" pos:column="17">fwd<pos:position pos:line="83" pos:column="20"/></name><operator pos:line="83" pos:column="20">-&gt;<pos:position pos:line="83" pos:column="25"/></operator><name pos:line="83" pos:column="22">pconnPush<pos:position pos:line="83" pos:column="31"/></name></name><argument_list pos:line="83" pos:column="31">(<argument><expr><name pos:line="83" pos:column="32">fd<pos:position pos:line="83" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="36">_peer<pos:position pos:line="83" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="43">request<pos:position pos:line="83" pos:column="50"/></name></expr></argument>, <argument><expr><call><name><name pos:line="83" pos:column="52">orig_request<pos:position pos:line="83" pos:column="64"/></name><operator pos:line="83" pos:column="64">-&gt;<pos:position pos:line="83" pos:column="69"/></operator><name pos:line="83" pos:column="66">GetHost<pos:position pos:line="83" pos:column="73"/></name></name><argument_list pos:line="83" pos:column="73">()<pos:position pos:line="83" pos:column="75"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="83" pos:column="77">client_addr<pos:position pos:line="83" pos:column="88"/></name></expr></argument>)<pos:position pos:line="83" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="90"/></expr_stmt>
            }<pos:position pos:line="84" pos:column="14"/></block></else></if>

            <expr_stmt><expr><name pos:line="86" pos:column="13">fd<pos:position pos:line="86" pos:column="15"/></name> <operator pos:line="86" pos:column="16">=<pos:position pos:line="86" pos:column="17"/></operator> <operator pos:line="86" pos:column="18">-<pos:position pos:line="86" pos:column="19"/></operator><literal type="number" pos:line="86" pos:column="19">1<pos:position pos:line="86" pos:column="20"/></literal></expr>;<pos:position pos:line="86" pos:column="21"/></expr_stmt>

            <expr_stmt><expr><call><name pos:line="88" pos:column="13">serverComplete<pos:position pos:line="88" pos:column="27"/></name><argument_list pos:line="88" pos:column="27">()<pos:position pos:line="88" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="30"/></expr_stmt>
            <return pos:line="89" pos:column="13">return;<pos:position pos:line="89" pos:column="20"/></return>

        <case pos:line="91" pos:column="9">case <expr><name pos:line="91" pos:column="14">COMPLETE_NONPERSISTENT_MSG<pos:position pos:line="91" pos:column="40"/></name></expr>:<pos:position pos:line="91" pos:column="41"/></case>
            <expr_stmt><expr><call><name pos:line="92" pos:column="13">debugs<pos:position pos:line="92" pos:column="19"/></name><argument_list pos:line="92" pos:column="19">(<argument><expr><literal type="number" pos:line="92" pos:column="20">11<pos:position pos:line="92" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="92" pos:column="24">5<pos:position pos:line="92" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="92" pos:column="27">"processReplyBody: COMPLETE_NONPERSISTENT_MSG"<pos:position pos:line="92" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="92" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="75"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="93" pos:column="13">serverComplete<pos:position pos:line="93" pos:column="27"/></name><argument_list pos:line="93" pos:column="27">()<pos:position pos:line="93" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="30"/></expr_stmt>
            <return pos:line="94" pos:column="13">return;<pos:position pos:line="94" pos:column="20"/></return>
        }<pos:position pos:line="95" pos:column="10"/></block></switch></block></else></if>

    <expr_stmt><expr><call><name pos:line="97" pos:column="5">maybeReadVirginBody<pos:position pos:line="97" pos:column="24"/></name><argument_list pos:line="97" pos:column="24">()<pos:position pos:line="97" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="27"/></expr_stmt>
}<pos:position pos:line="98" pos:column="2"/></block></function></unit>
