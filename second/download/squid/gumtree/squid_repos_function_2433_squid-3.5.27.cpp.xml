<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2433_squid-3.5.27.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">httpHdrMangle<pos:position pos:line="2" pos:column="14"/></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><name pos:line="2" pos:column="15">HttpHeaderEntry<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type> <name pos:line="2" pos:column="33">e<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="36">HttpRequest<pos:position pos:line="2" pos:column="47"/></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type> <name pos:line="2" pos:column="50">request<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="59">int<pos:position pos:line="2" pos:column="62"/></name></type> <name pos:line="2" pos:column="63">req_or_rep<pos:position pos:line="2" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="74"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">retval<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>

    <comment type="block" pos:line="6" pos:column="5">/* check with anonymizer tables */</comment>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">HeaderManglers<pos:position pos:line="7" pos:column="19"/></name> <modifier pos:line="7" pos:column="20">*<pos:position pos:line="7" pos:column="21"/></modifier></type><name pos:line="7" pos:column="21">hms<pos:position pos:line="7" pos:column="24"/></name> <init pos:line="7" pos:column="25">= <expr><name pos:line="7" pos:column="27">NULL<pos:position pos:line="7" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="32"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">assert<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><name pos:line="8" pos:column="12">e<pos:position pos:line="8" pos:column="13"/></name></expr></argument>)<pos:position pos:line="8" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="15"/></expr_stmt>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">ROR_REQUEST<pos:position pos:line="10" pos:column="20"/></name> <operator pos:line="10" pos:column="21">==<pos:position pos:line="10" pos:column="23"/></operator> <name pos:line="10" pos:column="24">req_or_rep<pos:position pos:line="10" pos:column="34"/></name></expr>)<pos:position pos:line="10" pos:column="35"/></condition><then pos:line="10" pos:column="35"> <block pos:line="10" pos:column="36">{
        <expr_stmt><expr><name pos:line="11" pos:column="9">hms<pos:position pos:line="11" pos:column="12"/></name> <operator pos:line="11" pos:column="13">=<pos:position pos:line="11" pos:column="14"/></operator> <name><name pos:line="11" pos:column="15">Config<pos:position pos:line="11" pos:column="21"/></name><operator pos:line="11" pos:column="21">.<pos:position pos:line="11" pos:column="22"/></operator><name pos:line="11" pos:column="22">request_header_access<pos:position pos:line="11" pos:column="43"/></name></name></expr>;<pos:position pos:line="11" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="12" pos:column="6"/></block></then> <elseif pos:line="12" pos:column="7">else <if pos:line="12" pos:column="12">if <condition pos:line="12" pos:column="15">(<expr><name pos:line="12" pos:column="16">ROR_REPLY<pos:position pos:line="12" pos:column="25"/></name> <operator pos:line="12" pos:column="26">==<pos:position pos:line="12" pos:column="28"/></operator> <name pos:line="12" pos:column="29">req_or_rep<pos:position pos:line="12" pos:column="39"/></name></expr>)<pos:position pos:line="12" pos:column="40"/></condition><then pos:line="12" pos:column="40"> <block pos:line="12" pos:column="41">{
        <expr_stmt><expr><name pos:line="13" pos:column="9">hms<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">=<pos:position pos:line="13" pos:column="14"/></operator> <name><name pos:line="13" pos:column="15">Config<pos:position pos:line="13" pos:column="21"/></name><operator pos:line="13" pos:column="21">.<pos:position pos:line="13" pos:column="22"/></operator><name pos:line="13" pos:column="22">reply_header_access<pos:position pos:line="13" pos:column="41"/></name></name></expr>;<pos:position pos:line="13" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if></elseif> <else pos:line="14" pos:column="7">else <block pos:line="14" pos:column="12">{
        <comment type="block" pos:line="15" pos:column="9">/* error. But let's call it "request". */</comment>
        <expr_stmt><expr><name pos:line="16" pos:column="9">hms<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">=<pos:position pos:line="16" pos:column="14"/></operator> <name><name pos:line="16" pos:column="15">Config<pos:position pos:line="16" pos:column="21"/></name><operator pos:line="16" pos:column="21">.<pos:position pos:line="16" pos:column="22"/></operator><name pos:line="16" pos:column="22">request_header_access<pos:position pos:line="16" pos:column="43"/></name></name></expr>;<pos:position pos:line="16" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="17" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="19" pos:column="5">/* manglers are not configured for this message kind */</comment>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><operator pos:line="20" pos:column="9">!<pos:position pos:line="20" pos:column="10"/></operator><name pos:line="20" pos:column="10">hms<pos:position pos:line="20" pos:column="13"/></name></expr>)<pos:position pos:line="20" pos:column="14"/></condition><then pos:line="20" pos:column="14">
        <block type="pseudo"><return pos:line="21" pos:column="9">return <expr><literal type="number" pos:line="21" pos:column="16">1<pos:position pos:line="21" pos:column="17"/></literal></expr>;<pos:position pos:line="21" pos:column="18"/></return></block></then></if>

    <decl_stmt><decl><type><specifier pos:line="23" pos:column="5">const<pos:position pos:line="23" pos:column="10"/></specifier> <name pos:line="23" pos:column="11">headerMangler<pos:position pos:line="23" pos:column="24"/></name> <modifier pos:line="23" pos:column="25">*<pos:position pos:line="23" pos:column="26"/></modifier></type><name pos:line="23" pos:column="26">hm<pos:position pos:line="23" pos:column="28"/></name> <init pos:line="23" pos:column="29">= <expr><call><name><name pos:line="23" pos:column="31">hms<pos:position pos:line="23" pos:column="34"/></name><operator pos:line="23" pos:column="34">-&gt;<pos:position pos:line="23" pos:column="39"/></operator><name pos:line="23" pos:column="36">find<pos:position pos:line="23" pos:column="40"/></name></name><argument_list pos:line="23" pos:column="40">(<argument><expr><operator pos:line="23" pos:column="41">*<pos:position pos:line="23" pos:column="42"/></operator><name pos:line="23" pos:column="42">e<pos:position pos:line="23" pos:column="43"/></name></expr></argument>)<pos:position pos:line="23" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="23" pos:column="45"/></decl_stmt>

    <comment type="block" pos:line="25" pos:column="5">/* mangler or checklist went away. default allow */</comment>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><operator pos:line="26" pos:column="9">!<pos:position pos:line="26" pos:column="10"/></operator><name pos:line="26" pos:column="10">hm<pos:position pos:line="26" pos:column="12"/></name> <operator pos:line="26" pos:column="13">||<pos:position pos:line="26" pos:column="15"/></operator> <operator pos:line="26" pos:column="16">!<pos:position pos:line="26" pos:column="17"/></operator><name><name pos:line="26" pos:column="17">hm<pos:position pos:line="26" pos:column="19"/></name><operator pos:line="26" pos:column="19">-&gt;<pos:position pos:line="26" pos:column="24"/></operator><name pos:line="26" pos:column="21">access_list<pos:position pos:line="26" pos:column="32"/></name></name></expr>)<pos:position pos:line="26" pos:column="33"/></condition><then pos:line="26" pos:column="33"> <block pos:line="26" pos:column="34">{
        <return pos:line="27" pos:column="9">return <expr><literal type="number" pos:line="27" pos:column="16">1<pos:position pos:line="27" pos:column="17"/></literal></expr>;<pos:position pos:line="27" pos:column="18"/></return>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="30" pos:column="5">ACLFilledChecklist<pos:position pos:line="30" pos:column="23"/></name></type> <name pos:line="30" pos:column="24">checklist<pos:position pos:line="30" pos:column="33"/></name><argument_list pos:line="30" pos:column="33">(<argument><expr><name><name pos:line="30" pos:column="34">hm<pos:position pos:line="30" pos:column="36"/></name><operator pos:line="30" pos:column="36">-&gt;<pos:position pos:line="30" pos:column="41"/></operator><name pos:line="30" pos:column="38">access_list<pos:position pos:line="30" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="51">request<pos:position pos:line="30" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="60">NULL<pos:position pos:line="30" pos:column="64"/></name></expr></argument>)<pos:position pos:line="30" pos:column="65"/></argument_list></decl>;<pos:position pos:line="30" pos:column="66"/></decl_stmt>

    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><call><name><name pos:line="32" pos:column="9">checklist<pos:position pos:line="32" pos:column="18"/></name><operator pos:line="32" pos:column="18">.<pos:position pos:line="32" pos:column="19"/></operator><name pos:line="32" pos:column="19">fastCheck<pos:position pos:line="32" pos:column="28"/></name></name><argument_list pos:line="32" pos:column="28">()<pos:position pos:line="32" pos:column="30"/></argument_list></call> <operator pos:line="32" pos:column="31">==<pos:position pos:line="32" pos:column="33"/></operator> <name pos:line="32" pos:column="34">ACCESS_ALLOWED<pos:position pos:line="32" pos:column="48"/></name></expr>)<pos:position pos:line="32" pos:column="49"/></condition><then pos:line="32" pos:column="49"> <block pos:line="32" pos:column="50">{
        <comment type="block" pos:line="33" pos:column="9">/* aclCheckFast returns true for allow. */</comment>
        <expr_stmt><expr><name pos:line="34" pos:column="9">retval<pos:position pos:line="34" pos:column="15"/></name> <operator pos:line="34" pos:column="16">=<pos:position pos:line="34" pos:column="17"/></operator> <literal type="number" pos:line="34" pos:column="18">1<pos:position pos:line="34" pos:column="19"/></literal></expr>;<pos:position pos:line="34" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="35" pos:column="6"/></block></then> <elseif pos:line="35" pos:column="7">else <if pos:line="35" pos:column="12">if <condition pos:line="35" pos:column="15">(<expr><name pos:line="35" pos:column="16">NULL<pos:position pos:line="35" pos:column="20"/></name> <operator pos:line="35" pos:column="21">==<pos:position pos:line="35" pos:column="23"/></operator> <name><name pos:line="35" pos:column="24">hm<pos:position pos:line="35" pos:column="26"/></name><operator pos:line="35" pos:column="26">-&gt;<pos:position pos:line="35" pos:column="31"/></operator><name pos:line="35" pos:column="28">replacement<pos:position pos:line="35" pos:column="39"/></name></name></expr>)<pos:position pos:line="35" pos:column="40"/></condition><then pos:line="35" pos:column="40"> <block pos:line="35" pos:column="41">{
        <comment type="block" pos:line="36" pos:column="9">/* It was denied, and we don't have any replacement */</comment>
        <expr_stmt><expr><name pos:line="37" pos:column="9">retval<pos:position pos:line="37" pos:column="15"/></name> <operator pos:line="37" pos:column="16">=<pos:position pos:line="37" pos:column="17"/></operator> <literal type="number" pos:line="37" pos:column="18">0<pos:position pos:line="37" pos:column="19"/></literal></expr>;<pos:position pos:line="37" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if></elseif> <else pos:line="38" pos:column="7">else <block pos:line="38" pos:column="12">{
        <comment type="block" pos:line="39" pos:column="9">/* It was denied, but we have a replacement. Replace the
         * header on the fly, and return that the new header
         * is allowed.
         */</comment>
        <expr_stmt><expr><name><name pos:line="43" pos:column="9">e<pos:position pos:line="43" pos:column="10"/></name><operator pos:line="43" pos:column="10">-&gt;<pos:position pos:line="43" pos:column="15"/></operator><name pos:line="43" pos:column="12">value<pos:position pos:line="43" pos:column="17"/></name></name> <operator pos:line="43" pos:column="18">=<pos:position pos:line="43" pos:column="19"/></operator> <name><name pos:line="43" pos:column="20">hm<pos:position pos:line="43" pos:column="22"/></name><operator pos:line="43" pos:column="22">-&gt;<pos:position pos:line="43" pos:column="27"/></operator><name pos:line="43" pos:column="24">replacement<pos:position pos:line="43" pos:column="35"/></name></name></expr>;<pos:position pos:line="43" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><name pos:line="44" pos:column="9">retval<pos:position pos:line="44" pos:column="15"/></name> <operator pos:line="44" pos:column="16">=<pos:position pos:line="44" pos:column="17"/></operator> <literal type="number" pos:line="44" pos:column="18">1<pos:position pos:line="44" pos:column="19"/></literal></expr>;<pos:position pos:line="44" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="45" pos:column="6"/></block></else></if>

    <return pos:line="47" pos:column="5">return <expr><name pos:line="47" pos:column="12">retval<pos:position pos:line="47" pos:column="18"/></name></expr>;<pos:position pos:line="47" pos:column="19"/></return>
}<pos:position pos:line="48" pos:column="2"/></block></function></unit>
