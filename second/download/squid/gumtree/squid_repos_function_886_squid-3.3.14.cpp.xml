<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_886_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">comm_lingering_close<pos:position pos:line="2" pos:column="21"/></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><name pos:line="2" pos:column="22">int<pos:position pos:line="2" pos:column="25"/></name></type> <name pos:line="2" pos:column="26">fd<pos:position pos:line="2" pos:column="28"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="29"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:if pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">if<pos:position pos:line="4" pos:column="4"/></cpp:directive> <expr><name pos:line="4" pos:column="5">USE_SSL<pos:position pos:line="4" pos:column="12"/></name></expr></cpp:if>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><name><name pos:line="5" pos:column="9">fd_table<pos:position pos:line="5" pos:column="17"/></name><index pos:line="5" pos:column="17">[<expr><name pos:line="5" pos:column="18">fd<pos:position pos:line="5" pos:column="20"/></name></expr>]<pos:position pos:line="5" pos:column="21"/></index></name><operator pos:line="5" pos:column="21">.<pos:position pos:line="5" pos:column="22"/></operator><name pos:line="5" pos:column="22">ssl<pos:position pos:line="5" pos:column="25"/></name></expr>)<pos:position pos:line="5" pos:column="26"/></condition><then pos:line="5" pos:column="26">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="6" pos:column="9">ssl_shutdown_method<pos:position pos:line="6" pos:column="28"/></name><argument_list pos:line="6" pos:column="28">(<argument><expr><name><name pos:line="6" pos:column="29">fd_table<pos:position pos:line="6" pos:column="37"/></name><index pos:line="6" pos:column="37">[<expr><name pos:line="6" pos:column="38">fd<pos:position pos:line="6" pos:column="40"/></name></expr>]<pos:position pos:line="6" pos:column="41"/></index></name><operator pos:line="6" pos:column="41">.<pos:position pos:line="6" pos:column="42"/></operator><name pos:line="6" pos:column="42">ssl<pos:position pos:line="6" pos:column="45"/></name></expr></argument>)<pos:position pos:line="6" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="47"/></expr_stmt></block></then></if>
<cpp:endif pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">endif<pos:position pos:line="7" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><call><name pos:line="9" pos:column="9">shutdown<pos:position pos:line="9" pos:column="17"/></name><argument_list pos:line="9" pos:column="17">(<argument><expr><name pos:line="9" pos:column="18">fd<pos:position pos:line="9" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="22">1<pos:position pos:line="9" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="24"/></argument_list></call> <operator pos:line="9" pos:column="25">&lt;<pos:position pos:line="9" pos:column="29"/></operator> <literal type="number" pos:line="9" pos:column="27">0<pos:position pos:line="9" pos:column="28"/></literal></expr>)<pos:position pos:line="9" pos:column="29"/></condition><then pos:line="9" pos:column="29"> <block pos:line="9" pos:column="30">{
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">comm_close<pos:position pos:line="10" pos:column="19"/></name><argument_list pos:line="10" pos:column="19">(<argument><expr><name pos:line="10" pos:column="20">fd<pos:position pos:line="10" pos:column="22"/></name></expr></argument>)<pos:position pos:line="10" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="24"/></expr_stmt>
        <return pos:line="11" pos:column="9">return;<pos:position pos:line="11" pos:column="16"/></return>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="14" pos:column="5">fd_note<pos:position pos:line="14" pos:column="12"/></name><argument_list pos:line="14" pos:column="12">(<argument><expr><name pos:line="14" pos:column="13">fd<pos:position pos:line="14" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="17">"lingering close"<pos:position pos:line="14" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="36"/></expr_stmt>
    <decl_stmt><decl><type><name><name pos:line="15" pos:column="5">AsyncCall<pos:position pos:line="15" pos:column="14"/></name><operator pos:line="15" pos:column="14">::<pos:position pos:line="15" pos:column="16"/></operator><name pos:line="15" pos:column="16">Pointer<pos:position pos:line="15" pos:column="23"/></name></name></type> <name pos:line="15" pos:column="24">call<pos:position pos:line="15" pos:column="28"/></name> <init pos:line="15" pos:column="29">= <expr><call><name pos:line="15" pos:column="31">commCbCall<pos:position pos:line="15" pos:column="41"/></name><argument_list pos:line="15" pos:column="41">(<argument><expr><literal type="number" pos:line="15" pos:column="42">5<pos:position pos:line="15" pos:column="43"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="15" pos:column="44">4<pos:position pos:line="15" pos:column="45"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="47">"commLingerTimeout"<pos:position pos:line="15" pos:column="66"/></literal></expr></argument>, <argument><expr><call><name pos:line="15" pos:column="68">FdeCbPtrFun<pos:position pos:line="15" pos:column="79"/></name><argument_list pos:line="15" pos:column="79">(<argument><expr><name pos:line="15" pos:column="80">commLingerTimeout<pos:position pos:line="15" pos:column="97"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="99">NULL<pos:position pos:line="15" pos:column="103"/></name></expr></argument>)<pos:position pos:line="15" pos:column="104"/></argument_list></call></expr></argument>)<pos:position pos:line="15" pos:column="105"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="106"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="17" pos:column="5">debugs<pos:position pos:line="17" pos:column="11"/></name><argument_list pos:line="17" pos:column="11">(<argument><expr><literal type="number" pos:line="17" pos:column="12">5<pos:position pos:line="17" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="15">3<pos:position pos:line="17" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="18">HERE<pos:position pos:line="17" pos:column="22"/></name> <operator pos:line="17" pos:column="23">&lt;&lt;<pos:position pos:line="17" pos:column="31"/></operator> <literal type="string" pos:line="17" pos:column="26">"FD "<pos:position pos:line="17" pos:column="31"/></literal> <operator pos:line="17" pos:column="32">&lt;&lt;<pos:position pos:line="17" pos:column="40"/></operator> <name pos:line="17" pos:column="35">fd<pos:position pos:line="17" pos:column="37"/></name> <operator pos:line="17" pos:column="38">&lt;&lt;<pos:position pos:line="17" pos:column="46"/></operator> <literal type="string" pos:line="17" pos:column="41">" timeout "<pos:position pos:line="17" pos:column="52"/></literal> <operator pos:line="17" pos:column="53">&lt;&lt;<pos:position pos:line="17" pos:column="61"/></operator> <name pos:line="17" pos:column="56">timeout<pos:position pos:line="17" pos:column="63"/></name></expr></argument>)<pos:position pos:line="17" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="65"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">assert<pos:position pos:line="18" pos:column="11"/></name><argument_list pos:line="18" pos:column="11">(<argument><expr><name><name pos:line="18" pos:column="12">fd_table<pos:position pos:line="18" pos:column="20"/></name><index pos:line="18" pos:column="20">[<expr><name pos:line="18" pos:column="21">fd<pos:position pos:line="18" pos:column="23"/></name></expr>]<pos:position pos:line="18" pos:column="24"/></index></name><operator pos:line="18" pos:column="24">.<pos:position pos:line="18" pos:column="25"/></operator><name><name pos:line="18" pos:column="25">flags<pos:position pos:line="18" pos:column="30"/></name><operator pos:line="18" pos:column="30">.<pos:position pos:line="18" pos:column="31"/></operator><name pos:line="18" pos:column="31">open<pos:position pos:line="18" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="37"/></expr_stmt>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name pos:line="19" pos:column="9">callback<pos:position pos:line="19" pos:column="17"/></name> <operator pos:line="19" pos:column="18">!=<pos:position pos:line="19" pos:column="20"/></operator> <name pos:line="19" pos:column="21">NULL<pos:position pos:line="19" pos:column="25"/></name></expr>)<pos:position pos:line="19" pos:column="26"/></condition><then pos:line="19" pos:column="26"> <block pos:line="19" pos:column="27">{
        <typedef pos:line="20" pos:column="9">typedef <type><name pos:line="20" pos:column="17">FdeCbParams<pos:position pos:line="20" pos:column="28"/></name></type> <name pos:line="20" pos:column="29">Params<pos:position pos:line="20" pos:column="35"/></name>;<pos:position pos:line="20" pos:column="36"/></typedef>
        <decl_stmt><decl><type><name pos:line="21" pos:column="9">Params<pos:position pos:line="21" pos:column="15"/></name> <modifier pos:line="21" pos:column="16">&amp;<pos:position pos:line="21" pos:column="21"/></modifier></type><name pos:line="21" pos:column="17">params<pos:position pos:line="21" pos:column="23"/></name> <init pos:line="21" pos:column="24">= <expr><call><name><name pos:line="21" pos:column="26">GetCommParams<pos:position pos:line="21" pos:column="39"/></name><argument_list type="generic" pos:line="21" pos:column="39">&lt;<argument><expr><name pos:line="21" pos:column="40">Params<pos:position pos:line="21" pos:column="46"/></name></expr></argument>&gt;<pos:position pos:line="21" pos:column="50"/></argument_list></name><argument_list pos:line="21" pos:column="47">(<argument><expr><name pos:line="21" pos:column="48">callback<pos:position pos:line="21" pos:column="56"/></name></expr></argument>)<pos:position pos:line="21" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="21" pos:column="58"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="22" pos:column="9">params<pos:position pos:line="22" pos:column="15"/></name><operator pos:line="22" pos:column="15">.<pos:position pos:line="22" pos:column="16"/></operator><name pos:line="22" pos:column="16">fd<pos:position pos:line="22" pos:column="18"/></name></name> <operator pos:line="22" pos:column="19">=<pos:position pos:line="22" pos:column="20"/></operator> <name pos:line="22" pos:column="21">fd<pos:position pos:line="22" pos:column="23"/></name></expr>;<pos:position pos:line="22" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="23" pos:column="9">fd_table<pos:position pos:line="23" pos:column="17"/></name><index pos:line="23" pos:column="17">[<expr><name pos:line="23" pos:column="18">fd<pos:position pos:line="23" pos:column="20"/></name></expr>]<pos:position pos:line="23" pos:column="21"/></index></name><operator pos:line="23" pos:column="21">.<pos:position pos:line="23" pos:column="22"/></operator><name pos:line="23" pos:column="22">timeoutHandler<pos:position pos:line="23" pos:column="36"/></name> <operator pos:line="23" pos:column="37">=<pos:position pos:line="23" pos:column="38"/></operator> <name pos:line="23" pos:column="39">callback<pos:position pos:line="23" pos:column="47"/></name></expr>;<pos:position pos:line="23" pos:column="48"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="24" pos:column="9">fd_table<pos:position pos:line="24" pos:column="17"/></name><index pos:line="24" pos:column="17">[<expr><name pos:line="24" pos:column="18">fd<pos:position pos:line="24" pos:column="20"/></name></expr>]<pos:position pos:line="24" pos:column="21"/></index></name><operator pos:line="24" pos:column="21">.<pos:position pos:line="24" pos:column="22"/></operator><name pos:line="24" pos:column="22">timeout<pos:position pos:line="24" pos:column="29"/></name> <operator pos:line="24" pos:column="30">=<pos:position pos:line="24" pos:column="31"/></operator> <name pos:line="24" pos:column="32">squid_curtime<pos:position pos:line="24" pos:column="45"/></name> <operator pos:line="24" pos:column="46">+<pos:position pos:line="24" pos:column="47"/></operator> <cast type="static" pos:line="24" pos:column="48">static_cast<argument_list type="generic" pos:line="24" pos:column="59">&lt;<argument><expr><name pos:line="24" pos:column="60">time_t<pos:position pos:line="24" pos:column="66"/></name></expr></argument>&gt;<pos:position pos:line="24" pos:column="70"/></argument_list><argument_list pos:line="24" pos:column="67">(<argument><expr><literal type="number" pos:line="24" pos:column="68">10<pos:position pos:line="24" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="71"/></argument_list></cast></expr>;<pos:position pos:line="24" pos:column="72"/></expr_stmt>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="27" pos:column="5">Comm<pos:position pos:line="27" pos:column="9"/></name><operator pos:line="27" pos:column="9">::<pos:position pos:line="27" pos:column="11"/></operator><name pos:line="27" pos:column="11">SetSelect<pos:position pos:line="27" pos:column="20"/></name></name><argument_list pos:line="27" pos:column="20">(<argument><expr><name pos:line="27" pos:column="21">fd<pos:position pos:line="27" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="25">COMM_SELECT_READ<pos:position pos:line="27" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="43">commLingerClose<pos:position pos:line="27" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="60">NULL<pos:position pos:line="27" pos:column="64"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="66">0<pos:position pos:line="27" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="69"/></expr_stmt>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
