<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_475_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HttpReply<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">sanityCheckStartLine<pos:position pos:line="2" pos:column="32"/></name></name><parameter_list pos:line="2" pos:column="32">(<parameter><decl><type><specifier pos:line="2" pos:column="33">const<pos:position pos:line="2" pos:column="38"/></specifier> <name pos:line="2" pos:column="39">char<pos:position pos:line="2" pos:column="43"/></name> <modifier pos:line="2" pos:column="44">*<pos:position pos:line="2" pos:column="45"/></modifier></type><name pos:line="2" pos:column="45">buf<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="50">const<pos:position pos:line="2" pos:column="55"/></specifier> <name pos:line="2" pos:column="56">size_t<pos:position pos:line="2" pos:column="62"/></name></type> <name pos:line="2" pos:column="63">hdr_len<pos:position pos:line="2" pos:column="70"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="72">Http<pos:position pos:line="2" pos:column="76"/></name><operator pos:line="2" pos:column="76">::<pos:position pos:line="2" pos:column="78"/></operator><name pos:line="2" pos:column="78">StatusCode<pos:position pos:line="2" pos:column="88"/></name></name> <modifier pos:line="2" pos:column="89">*<pos:position pos:line="2" pos:column="90"/></modifier></type><name pos:line="2" pos:column="90">error<pos:position pos:line="2" pos:column="95"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="96"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// hack warning: using psize instead of size here due to type mismatches with MemBuf.</comment>

    <comment type="line" pos:line="6" pos:column="5">// content is long enough to possibly hold a reply</comment>
    <comment type="line" pos:line="7" pos:column="5">// 4 being magic size of a 3-digit number plus space delimiter</comment>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">hdr_len<pos:position pos:line="8" pos:column="16"/></name> <operator pos:line="8" pos:column="17">&lt;<pos:position pos:line="8" pos:column="21"/></operator> <call pos:line="8" pos:column="19">(<name pos:line="8" pos:column="20">size_t<pos:position pos:line="8" pos:column="26"/></name>)<argument_list pos:line="8" pos:column="27">(<argument><expr><call><name><name pos:line="8" pos:column="28">protoPrefix<pos:position pos:line="8" pos:column="39"/></name><operator pos:line="8" pos:column="39">.<pos:position pos:line="8" pos:column="40"/></operator><name pos:line="8" pos:column="40">psize<pos:position pos:line="8" pos:column="45"/></name></name><argument_list pos:line="8" pos:column="45">()<pos:position pos:line="8" pos:column="47"/></argument_list></call> <operator pos:line="8" pos:column="48">+<pos:position pos:line="8" pos:column="49"/></operator> <literal type="number" pos:line="8" pos:column="50">4<pos:position pos:line="8" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="53"/></condition><then pos:line="8" pos:column="53"> <block pos:line="8" pos:column="54">{
        <if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">hdr_len<pos:position pos:line="9" pos:column="20"/></name> <operator pos:line="9" pos:column="21">&gt;<pos:position pos:line="9" pos:column="25"/></operator> <literal type="number" pos:line="9" pos:column="23">0<pos:position pos:line="9" pos:column="24"/></literal></expr>)<pos:position pos:line="9" pos:column="25"/></condition><then pos:line="9" pos:column="25"> <block pos:line="9" pos:column="26">{
            <expr_stmt><expr><call><name pos:line="10" pos:column="13">debugs<pos:position pos:line="10" pos:column="19"/></name><argument_list pos:line="10" pos:column="19">(<argument><expr><literal type="number" pos:line="10" pos:column="20">58<pos:position pos:line="10" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="24">3<pos:position pos:line="10" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="27">"Too small reply header ("<pos:position pos:line="10" pos:column="53"/></literal> <operator pos:line="10" pos:column="54">&lt;&lt;<pos:position pos:line="10" pos:column="62"/></operator> <name pos:line="10" pos:column="57">hdr_len<pos:position pos:line="10" pos:column="64"/></name> <operator pos:line="10" pos:column="65">&lt;&lt;<pos:position pos:line="10" pos:column="73"/></operator> <literal type="string" pos:line="10" pos:column="68">" bytes)"<pos:position pos:line="10" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="79"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="11" pos:column="13">*<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="14">error<pos:position pos:line="11" pos:column="19"/></name> <operator pos:line="11" pos:column="20">=<pos:position pos:line="11" pos:column="21"/></operator> <name><name pos:line="11" pos:column="22">Http<pos:position pos:line="11" pos:column="26"/></name><operator pos:line="11" pos:column="26">::<pos:position pos:line="11" pos:column="28"/></operator><name pos:line="11" pos:column="28">scInvalidHeader<pos:position pos:line="11" pos:column="43"/></name></name></expr>;<pos:position pos:line="11" pos:column="44"/></expr_stmt>
        }<pos:position pos:line="12" pos:column="10"/></block></then></if>
        <return pos:line="13" pos:column="9">return <expr><literal type="boolean" pos:line="13" pos:column="16">false<pos:position pos:line="13" pos:column="21"/></literal></expr>;<pos:position pos:line="13" pos:column="22"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="16" pos:column="5">int<pos:position pos:line="16" pos:column="8"/></name></type> <name pos:line="16" pos:column="9">pos<pos:position pos:line="16" pos:column="12"/></name></decl>;<pos:position pos:line="16" pos:column="13"/></decl_stmt>
    <comment type="line" pos:line="17" pos:column="5">// catch missing or mismatched protocol identifier</comment>
    <comment type="line" pos:line="18" pos:column="5">// allow special-case for ICY protocol (non-HTTP identifier) in response to faked HTTP request.</comment>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><call><name pos:line="19" pos:column="9">strncmp<pos:position pos:line="19" pos:column="16"/></name><argument_list pos:line="19" pos:column="16">(<argument><expr><name pos:line="19" pos:column="17">buf<pos:position pos:line="19" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="22">"ICY"<pos:position pos:line="19" pos:column="27"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="29">3<pos:position pos:line="19" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="31"/></argument_list></call> <operator pos:line="19" pos:column="32">==<pos:position pos:line="19" pos:column="34"/></operator> <literal type="number" pos:line="19" pos:column="35">0<pos:position pos:line="19" pos:column="36"/></literal></expr>)<pos:position pos:line="19" pos:column="37"/></condition><then pos:line="19" pos:column="37"> <block pos:line="19" pos:column="38">{
        <expr_stmt><expr><name pos:line="20" pos:column="9">protoPrefix<pos:position pos:line="20" pos:column="20"/></name> <operator pos:line="20" pos:column="21">=<pos:position pos:line="20" pos:column="22"/></operator> <literal type="string" pos:line="20" pos:column="23">"ICY"<pos:position pos:line="20" pos:column="28"/></literal></expr>;<pos:position pos:line="20" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name pos:line="21" pos:column="9">pos<pos:position pos:line="21" pos:column="12"/></name> <operator pos:line="21" pos:column="13">=<pos:position pos:line="21" pos:column="14"/></operator> <call><name><name pos:line="21" pos:column="15">protoPrefix<pos:position pos:line="21" pos:column="26"/></name><operator pos:line="21" pos:column="26">.<pos:position pos:line="21" pos:column="27"/></operator><name pos:line="21" pos:column="27">psize<pos:position pos:line="21" pos:column="32"/></name></name><argument_list pos:line="21" pos:column="32">()<pos:position pos:line="21" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="22" pos:column="6"/></block></then> <else pos:line="22" pos:column="7">else <block pos:line="22" pos:column="12">{

        <if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><call><name><name pos:line="24" pos:column="13">protoPrefix<pos:position pos:line="24" pos:column="24"/></name><operator pos:line="24" pos:column="24">.<pos:position pos:line="24" pos:column="25"/></operator><name pos:line="24" pos:column="25">cmp<pos:position pos:line="24" pos:column="28"/></name></name><argument_list pos:line="24" pos:column="28">(<argument><expr><name pos:line="24" pos:column="29">buf<pos:position pos:line="24" pos:column="32"/></name></expr></argument>, <argument><expr><call><name><name pos:line="24" pos:column="34">protoPrefix<pos:position pos:line="24" pos:column="45"/></name><operator pos:line="24" pos:column="45">.<pos:position pos:line="24" pos:column="46"/></operator><name pos:line="24" pos:column="46">size<pos:position pos:line="24" pos:column="50"/></name></name><argument_list pos:line="24" pos:column="50">()<pos:position pos:line="24" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="53"/></argument_list></call> <operator pos:line="24" pos:column="54">!=<pos:position pos:line="24" pos:column="56"/></operator> <literal type="number" pos:line="24" pos:column="57">0<pos:position pos:line="24" pos:column="58"/></literal></expr>)<pos:position pos:line="24" pos:column="59"/></condition><then pos:line="24" pos:column="59"> <block pos:line="24" pos:column="60">{
            <expr_stmt><expr><call><name pos:line="25" pos:column="13">debugs<pos:position pos:line="25" pos:column="19"/></name><argument_list pos:line="25" pos:column="19">(<argument><expr><literal type="number" pos:line="25" pos:column="20">58<pos:position pos:line="25" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="24">3<pos:position pos:line="25" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="27">"missing protocol prefix ("<pos:position pos:line="25" pos:column="54"/></literal> <operator pos:line="25" pos:column="55">&lt;&lt;<pos:position pos:line="25" pos:column="63"/></operator> <name pos:line="25" pos:column="58">protoPrefix<pos:position pos:line="25" pos:column="69"/></name> <operator pos:line="25" pos:column="70">&lt;&lt;<pos:position pos:line="25" pos:column="78"/></operator> <literal type="string" pos:line="25" pos:column="73">") in '"<pos:position pos:line="25" pos:column="81"/></literal> <operator pos:line="25" pos:column="82">&lt;&lt;<pos:position pos:line="25" pos:column="90"/></operator> <name pos:line="25" pos:column="85">buf<pos:position pos:line="25" pos:column="88"/></name> <operator pos:line="25" pos:column="89">&lt;&lt;<pos:position pos:line="25" pos:column="97"/></operator> <literal type="string" pos:line="25" pos:column="92">"'"<pos:position pos:line="25" pos:column="95"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="96"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="97"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="26" pos:column="13">*<pos:position pos:line="26" pos:column="14"/></operator><name pos:line="26" pos:column="14">error<pos:position pos:line="26" pos:column="19"/></name> <operator pos:line="26" pos:column="20">=<pos:position pos:line="26" pos:column="21"/></operator> <name><name pos:line="26" pos:column="22">Http<pos:position pos:line="26" pos:column="26"/></name><operator pos:line="26" pos:column="26">::<pos:position pos:line="26" pos:column="28"/></operator><name pos:line="26" pos:column="28">scInvalidHeader<pos:position pos:line="26" pos:column="43"/></name></name></expr>;<pos:position pos:line="26" pos:column="44"/></expr_stmt>
            <return pos:line="27" pos:column="13">return <expr><literal type="boolean" pos:line="27" pos:column="20">false<pos:position pos:line="27" pos:column="25"/></literal></expr>;<pos:position pos:line="27" pos:column="26"/></return>
        }<pos:position pos:line="28" pos:column="10"/></block></then></if>

        <comment type="line" pos:line="30" pos:column="9">// catch missing or negative status value (negative '-' is not a digit)</comment>
        <expr_stmt><expr><name pos:line="31" pos:column="9">pos<pos:position pos:line="31" pos:column="12"/></name> <operator pos:line="31" pos:column="13">=<pos:position pos:line="31" pos:column="14"/></operator> <call><name><name pos:line="31" pos:column="15">protoPrefix<pos:position pos:line="31" pos:column="26"/></name><operator pos:line="31" pos:column="26">.<pos:position pos:line="31" pos:column="27"/></operator><name pos:line="31" pos:column="27">psize<pos:position pos:line="31" pos:column="32"/></name></name><argument_list pos:line="31" pos:column="32">()<pos:position pos:line="31" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="35"/></expr_stmt>

        <comment type="line" pos:line="33" pos:column="9">// skip arbitrary number of digits and a dot in the verion portion</comment>
        <while pos:line="34" pos:column="9">while <condition pos:line="34" pos:column="15">(<expr><operator pos:line="34" pos:column="16">(<pos:position pos:line="34" pos:column="17"/></operator><name pos:line="34" pos:column="17">size_t<pos:position pos:line="34" pos:column="23"/></name><operator pos:line="34" pos:column="23">)<pos:position pos:line="34" pos:column="24"/></operator><name pos:line="34" pos:column="24">pos<pos:position pos:line="34" pos:column="27"/></name> <operator pos:line="34" pos:column="28">&lt;=<pos:position pos:line="34" pos:column="33"/></operator> <name pos:line="34" pos:column="31">hdr_len<pos:position pos:line="34" pos:column="38"/></name> <operator pos:line="34" pos:column="39">&amp;&amp;<pos:position pos:line="34" pos:column="49"/></operator> <operator pos:line="34" pos:column="42">(<pos:position pos:line="34" pos:column="43"/></operator><operator pos:line="34" pos:column="43">*<pos:position pos:line="34" pos:column="44"/></operator><operator pos:line="34" pos:column="44">(<pos:position pos:line="34" pos:column="45"/></operator><name pos:line="34" pos:column="45">buf<pos:position pos:line="34" pos:column="48"/></name><operator pos:line="34" pos:column="48">+<pos:position pos:line="34" pos:column="49"/></operator><name pos:line="34" pos:column="49">pos<pos:position pos:line="34" pos:column="52"/></name><operator pos:line="34" pos:column="52">)<pos:position pos:line="34" pos:column="53"/></operator> <operator pos:line="34" pos:column="54">==<pos:position pos:line="34" pos:column="56"/></operator> <literal type="char" pos:line="34" pos:column="57">'.'<pos:position pos:line="34" pos:column="60"/></literal> <operator pos:line="34" pos:column="61">||<pos:position pos:line="34" pos:column="63"/></operator> <call><name pos:line="34" pos:column="64">xisdigit<pos:position pos:line="34" pos:column="72"/></name><argument_list pos:line="34" pos:column="72">(<argument><expr><operator pos:line="34" pos:column="73">*<pos:position pos:line="34" pos:column="74"/></operator><operator pos:line="34" pos:column="74">(<pos:position pos:line="34" pos:column="75"/></operator><name pos:line="34" pos:column="75">buf<pos:position pos:line="34" pos:column="78"/></name><operator pos:line="34" pos:column="78">+<pos:position pos:line="34" pos:column="79"/></operator><name pos:line="34" pos:column="79">pos<pos:position pos:line="34" pos:column="82"/></name><operator pos:line="34" pos:column="82">)<pos:position pos:line="34" pos:column="83"/></operator></expr></argument>)<pos:position pos:line="34" pos:column="84"/></argument_list></call> <operator pos:line="34" pos:column="85">)<pos:position pos:line="34" pos:column="86"/></operator></expr> )<pos:position pos:line="34" pos:column="88"/></condition> <block type="pseudo"><expr_stmt><expr><operator pos:line="34" pos:column="89">++<pos:position pos:line="34" pos:column="91"/></operator><name pos:line="34" pos:column="91">pos<pos:position pos:line="34" pos:column="94"/></name></expr>;<pos:position pos:line="34" pos:column="95"/></expr_stmt></block></while>

        <comment type="line" pos:line="36" pos:column="9">// catch missing version info</comment>
        <if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><name pos:line="37" pos:column="13">pos<pos:position pos:line="37" pos:column="16"/></name> <operator pos:line="37" pos:column="17">==<pos:position pos:line="37" pos:column="19"/></operator> <call><name><name pos:line="37" pos:column="20">protoPrefix<pos:position pos:line="37" pos:column="31"/></name><operator pos:line="37" pos:column="31">.<pos:position pos:line="37" pos:column="32"/></operator><name pos:line="37" pos:column="32">psize<pos:position pos:line="37" pos:column="37"/></name></name><argument_list pos:line="37" pos:column="37">()<pos:position pos:line="37" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="40"/></condition><then pos:line="37" pos:column="40"> <block pos:line="37" pos:column="41">{
            <expr_stmt><expr><call><name pos:line="38" pos:column="13">debugs<pos:position pos:line="38" pos:column="19"/></name><argument_list pos:line="38" pos:column="19">(<argument><expr><literal type="number" pos:line="38" pos:column="20">58<pos:position pos:line="38" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="24">3<pos:position pos:line="38" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="27">"missing protocol version numbers (ie. "<pos:position pos:line="38" pos:column="67"/></literal> <operator pos:line="38" pos:column="68">&lt;&lt;<pos:position pos:line="38" pos:column="76"/></operator> <name pos:line="38" pos:column="71">protoPrefix<pos:position pos:line="38" pos:column="82"/></name> <operator pos:line="38" pos:column="83">&lt;&lt;<pos:position pos:line="38" pos:column="91"/></operator> <literal type="string" pos:line="38" pos:column="86">"/1.0) in '"<pos:position pos:line="38" pos:column="98"/></literal> <operator pos:line="38" pos:column="99">&lt;&lt;<pos:position pos:line="38" pos:column="107"/></operator> <name pos:line="38" pos:column="102">buf<pos:position pos:line="38" pos:column="105"/></name> <operator pos:line="38" pos:column="106">&lt;&lt;<pos:position pos:line="38" pos:column="114"/></operator> <literal type="string" pos:line="38" pos:column="109">"'"<pos:position pos:line="38" pos:column="112"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="113"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="114"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="39" pos:column="13">*<pos:position pos:line="39" pos:column="14"/></operator><name pos:line="39" pos:column="14">error<pos:position pos:line="39" pos:column="19"/></name> <operator pos:line="39" pos:column="20">=<pos:position pos:line="39" pos:column="21"/></operator> <name><name pos:line="39" pos:column="22">Http<pos:position pos:line="39" pos:column="26"/></name><operator pos:line="39" pos:column="26">::<pos:position pos:line="39" pos:column="28"/></operator><name pos:line="39" pos:column="28">scInvalidHeader<pos:position pos:line="39" pos:column="43"/></name></name></expr>;<pos:position pos:line="39" pos:column="44"/></expr_stmt>
            <return pos:line="40" pos:column="13">return <expr><literal type="boolean" pos:line="40" pos:column="20">false<pos:position pos:line="40" pos:column="25"/></literal></expr>;<pos:position pos:line="40" pos:column="26"/></return>
        }<pos:position pos:line="41" pos:column="10"/></block></then></if>
    }<pos:position pos:line="42" pos:column="6"/></block></else></if>

    <comment type="line" pos:line="44" pos:column="5">// skip arbitrary number of spaces...</comment>
    <while pos:line="45" pos:column="5">while <condition pos:line="45" pos:column="11">(<expr><operator pos:line="45" pos:column="12">(<pos:position pos:line="45" pos:column="13"/></operator><name pos:line="45" pos:column="13">size_t<pos:position pos:line="45" pos:column="19"/></name><operator pos:line="45" pos:column="19">)<pos:position pos:line="45" pos:column="20"/></operator><name pos:line="45" pos:column="20">pos<pos:position pos:line="45" pos:column="23"/></name> <operator pos:line="45" pos:column="24">&lt;=<pos:position pos:line="45" pos:column="29"/></operator> <name pos:line="45" pos:column="27">hdr_len<pos:position pos:line="45" pos:column="34"/></name> <operator pos:line="45" pos:column="35">&amp;&amp;<pos:position pos:line="45" pos:column="45"/></operator> <operator pos:line="45" pos:column="38">(<pos:position pos:line="45" pos:column="39"/></operator><name pos:line="45" pos:column="39">char<pos:position pos:line="45" pos:column="43"/></name><operator pos:line="45" pos:column="43">)<pos:position pos:line="45" pos:column="44"/></operator><operator pos:line="45" pos:column="44">*<pos:position pos:line="45" pos:column="45"/></operator><operator pos:line="45" pos:column="45">(<pos:position pos:line="45" pos:column="46"/></operator><name pos:line="45" pos:column="46">buf<pos:position pos:line="45" pos:column="49"/></name><operator pos:line="45" pos:column="49">+<pos:position pos:line="45" pos:column="50"/></operator><name pos:line="45" pos:column="50">pos<pos:position pos:line="45" pos:column="53"/></name><operator pos:line="45" pos:column="53">)<pos:position pos:line="45" pos:column="54"/></operator> <operator pos:line="45" pos:column="55">==<pos:position pos:line="45" pos:column="57"/></operator> <literal type="char" pos:line="45" pos:column="58">' '<pos:position pos:line="45" pos:column="61"/></literal></expr>)<pos:position pos:line="45" pos:column="62"/></condition> <block type="pseudo"><expr_stmt><expr><operator pos:line="45" pos:column="63">++<pos:position pos:line="45" pos:column="65"/></operator><name pos:line="45" pos:column="65">pos<pos:position pos:line="45" pos:column="68"/></name></expr>;<pos:position pos:line="45" pos:column="69"/></expr_stmt></block></while>

    <if pos:line="47" pos:column="5">if <condition pos:line="47" pos:column="8">(<expr><operator pos:line="47" pos:column="9">(<pos:position pos:line="47" pos:column="10"/></operator><name pos:line="47" pos:column="10">size_t<pos:position pos:line="47" pos:column="16"/></name><operator pos:line="47" pos:column="16">)<pos:position pos:line="47" pos:column="17"/></operator><name pos:line="47" pos:column="17">pos<pos:position pos:line="47" pos:column="20"/></name> <operator pos:line="47" pos:column="21">&lt;<pos:position pos:line="47" pos:column="25"/></operator> <name pos:line="47" pos:column="23">hdr_len<pos:position pos:line="47" pos:column="30"/></name> <operator pos:line="47" pos:column="31">&amp;&amp;<pos:position pos:line="47" pos:column="41"/></operator> <operator pos:line="47" pos:column="34">!<pos:position pos:line="47" pos:column="35"/></operator><call><name pos:line="47" pos:column="35">xisdigit<pos:position pos:line="47" pos:column="43"/></name><argument_list pos:line="47" pos:column="43">(<argument><expr><operator pos:line="47" pos:column="44">*<pos:position pos:line="47" pos:column="45"/></operator><operator pos:line="47" pos:column="45">(<pos:position pos:line="47" pos:column="46"/></operator><name pos:line="47" pos:column="46">buf<pos:position pos:line="47" pos:column="49"/></name><operator pos:line="47" pos:column="49">+<pos:position pos:line="47" pos:column="50"/></operator><name pos:line="47" pos:column="50">pos<pos:position pos:line="47" pos:column="53"/></name><operator pos:line="47" pos:column="53">)<pos:position pos:line="47" pos:column="54"/></operator></expr></argument>)<pos:position pos:line="47" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="56"/></condition><then pos:line="47" pos:column="56"> <block pos:line="47" pos:column="57">{
        <expr_stmt><expr><call><name pos:line="48" pos:column="9">debugs<pos:position pos:line="48" pos:column="15"/></name><argument_list pos:line="48" pos:column="15">(<argument><expr><literal type="number" pos:line="48" pos:column="16">58<pos:position pos:line="48" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="48" pos:column="20">3<pos:position pos:line="48" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="23">"missing or invalid status number in '"<pos:position pos:line="48" pos:column="62"/></literal> <operator pos:line="48" pos:column="63">&lt;&lt;<pos:position pos:line="48" pos:column="71"/></operator> <name pos:line="48" pos:column="66">buf<pos:position pos:line="48" pos:column="69"/></name> <operator pos:line="48" pos:column="70">&lt;&lt;<pos:position pos:line="48" pos:column="78"/></operator> <literal type="string" pos:line="48" pos:column="73">"'"<pos:position pos:line="48" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="78"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="49" pos:column="9">*<pos:position pos:line="49" pos:column="10"/></operator><name pos:line="49" pos:column="10">error<pos:position pos:line="49" pos:column="15"/></name> <operator pos:line="49" pos:column="16">=<pos:position pos:line="49" pos:column="17"/></operator> <name><name pos:line="49" pos:column="18">Http<pos:position pos:line="49" pos:column="22"/></name><operator pos:line="49" pos:column="22">::<pos:position pos:line="49" pos:column="24"/></operator><name pos:line="49" pos:column="24">scInvalidHeader<pos:position pos:line="49" pos:column="39"/></name></name></expr>;<pos:position pos:line="49" pos:column="40"/></expr_stmt>
        <return pos:line="50" pos:column="9">return <expr><literal type="boolean" pos:line="50" pos:column="16">false<pos:position pos:line="50" pos:column="21"/></literal></expr>;<pos:position pos:line="50" pos:column="22"/></return>
    }<pos:position pos:line="51" pos:column="6"/></block></then></if>

    <return pos:line="53" pos:column="5">return <expr><literal type="boolean" pos:line="53" pos:column="12">true<pos:position pos:line="53" pos:column="16"/></literal></expr>;<pos:position pos:line="53" pos:column="17"/></return>
}<pos:position pos:line="54" pos:column="2"/></block></function></unit>
