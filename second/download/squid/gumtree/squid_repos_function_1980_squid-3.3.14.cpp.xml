<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1980_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">BodyPipe<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">setConsumerIfNotLate<pos:position pos:line="2" pos:column="31"/></name></name><parameter_list pos:line="2" pos:column="31">(<parameter><decl><type><specifier pos:line="2" pos:column="32">const<pos:position pos:line="2" pos:column="37"/></specifier> <name><name pos:line="2" pos:column="38">Consumer<pos:position pos:line="2" pos:column="46"/></name><operator pos:line="2" pos:column="46">::<pos:position pos:line="2" pos:column="48"/></operator><name pos:line="2" pos:column="48">Pointer<pos:position pos:line="2" pos:column="55"/></name></name> <modifier pos:line="2" pos:column="56">&amp;<pos:position pos:line="2" pos:column="61"/></modifier></type><name pos:line="2" pos:column="57">aConsumer<pos:position pos:line="2" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="67"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><operator pos:line="4" pos:column="12">!<pos:position pos:line="4" pos:column="13"/></operator><name pos:line="4" pos:column="13">theConsumer<pos:position pos:line="4" pos:column="24"/></name></expr></argument>)<pos:position pos:line="4" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><call><name><name pos:line="5" pos:column="12">aConsumer<pos:position pos:line="5" pos:column="21"/></name><operator pos:line="5" pos:column="21">.<pos:position pos:line="5" pos:column="22"/></operator><name pos:line="5" pos:column="22">set<pos:position pos:line="5" pos:column="25"/></name></name><argument_list pos:line="5" pos:column="25">()<pos:position pos:line="5" pos:column="27"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="29"/></expr_stmt> <comment type="line" pos:line="5" pos:column="30">// but might be invalid</comment>

    <comment type="line" pos:line="7" pos:column="5">// TODO: convert this into an exception and remove IfNotLate suffix</comment>
    <comment type="line" pos:line="8" pos:column="5">// If there is something consumed already, we are in an auto-consuming mode</comment>
    <comment type="line" pos:line="9" pos:column="5">// and it is too late to attach a real consumer to the pipe.</comment>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">theGetSize<pos:position pos:line="10" pos:column="19"/></name> <operator pos:line="10" pos:column="20">&gt;<pos:position pos:line="10" pos:column="24"/></operator> <literal type="number" pos:line="10" pos:column="22">0<pos:position pos:line="10" pos:column="23"/></literal></expr>)<pos:position pos:line="10" pos:column="24"/></condition><then pos:line="10" pos:column="24"> <block pos:line="10" pos:column="25">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">assert<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><name pos:line="11" pos:column="16">mustAutoConsume<pos:position pos:line="11" pos:column="31"/></name></expr></argument>)<pos:position pos:line="11" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="33"/></expr_stmt>
        <return pos:line="12" pos:column="9">return <expr><literal type="boolean" pos:line="12" pos:column="16">false<pos:position pos:line="12" pos:column="21"/></literal></expr>;<pos:position pos:line="12" pos:column="22"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="15" pos:column="5">Must<pos:position pos:line="15" pos:column="9"/></name><argument_list pos:line="15" pos:column="9">(<argument><expr><operator pos:line="15" pos:column="10">!<pos:position pos:line="15" pos:column="11"/></operator><name pos:line="15" pos:column="11">abortedConsumption<pos:position pos:line="15" pos:column="29"/></name></expr></argument>)<pos:position pos:line="15" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="31"/></expr_stmt> <comment type="line" pos:line="15" pos:column="32">// did not promise to never consume</comment>

    <expr_stmt><expr><name pos:line="17" pos:column="5">theConsumer<pos:position pos:line="17" pos:column="16"/></name> <operator pos:line="17" pos:column="17">=<pos:position pos:line="17" pos:column="18"/></operator> <name pos:line="17" pos:column="19">aConsumer<pos:position pos:line="17" pos:column="28"/></name></expr>;<pos:position pos:line="17" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">debugs<pos:position pos:line="18" pos:column="11"/></name><argument_list pos:line="18" pos:column="11">(<argument><expr><literal type="number" pos:line="18" pos:column="12">91<pos:position pos:line="18" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="18" pos:column="15">7<pos:position pos:line="18" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="18">HERE<pos:position pos:line="18" pos:column="22"/></name> <operator pos:line="18" pos:column="23">&lt;&lt;<pos:position pos:line="18" pos:column="31"/></operator> <literal type="string" pos:line="18" pos:column="26">"set consumer"<pos:position pos:line="18" pos:column="40"/></literal> <operator pos:line="18" pos:column="41">&lt;&lt;<pos:position pos:line="18" pos:column="49"/></operator> <call><name pos:line="18" pos:column="44">status<pos:position pos:line="18" pos:column="50"/></name><argument_list pos:line="18" pos:column="50">()<pos:position pos:line="18" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="54"/></expr_stmt>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><call><name><name pos:line="19" pos:column="9">theBuf<pos:position pos:line="19" pos:column="15"/></name><operator pos:line="19" pos:column="15">.<pos:position pos:line="19" pos:column="16"/></operator><name pos:line="19" pos:column="16">hasContent<pos:position pos:line="19" pos:column="26"/></name></name><argument_list pos:line="19" pos:column="26">()<pos:position pos:line="19" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="29"/></condition><then pos:line="19" pos:column="29">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="9">scheduleBodyDataNotification<pos:position pos:line="20" pos:column="37"/></name><argument_list pos:line="20" pos:column="37">()<pos:position pos:line="20" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="40"/></expr_stmt></block></then></if>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><operator pos:line="21" pos:column="9">!<pos:position pos:line="21" pos:column="10"/></operator><name pos:line="21" pos:column="10">theProducer<pos:position pos:line="21" pos:column="21"/></name></expr>)<pos:position pos:line="21" pos:column="22"/></condition><then pos:line="21" pos:column="22">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="9">scheduleBodyEndNotification<pos:position pos:line="22" pos:column="36"/></name><argument_list pos:line="22" pos:column="36">()<pos:position pos:line="22" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="39"/></expr_stmt></block></then></if>

    <return pos:line="24" pos:column="5">return <expr><literal type="boolean" pos:line="24" pos:column="12">true<pos:position pos:line="24" pos:column="16"/></literal></expr>;<pos:position pos:line="24" pos:column="17"/></return>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
