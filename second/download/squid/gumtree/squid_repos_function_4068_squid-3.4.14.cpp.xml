<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4068_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Icap<pos:position pos:line="1" pos:column="22"/></name><operator pos:line="1" pos:column="22">::<pos:position pos:line="1" pos:column="24"/></operator><name pos:line="1" pos:column="24">ModXact<pos:position pos:line="1" pos:column="31"/></name><operator pos:line="1" pos:column="31">::<pos:position pos:line="1" pos:column="33"/></operator><name pos:line="1" pos:column="33">parseIcapHead<pos:position pos:line="1" pos:column="46"/></name></name><parameter_list pos:line="1" pos:column="46">()<pos:position pos:line="1" pos:column="48"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="3" pos:column="5">Must<pos:position pos:line="3" pos:column="9"/></name><argument_list pos:line="3" pos:column="9">(<argument><expr><name><name pos:line="3" pos:column="10">state<pos:position pos:line="3" pos:column="15"/></name><operator pos:line="3" pos:column="15">.<pos:position pos:line="3" pos:column="16"/></operator><name pos:line="3" pos:column="16">sending<pos:position pos:line="3" pos:column="23"/></name></name> <operator pos:line="3" pos:column="24">==<pos:position pos:line="3" pos:column="26"/></operator> <name><name pos:line="3" pos:column="27">State<pos:position pos:line="3" pos:column="32"/></name><operator pos:line="3" pos:column="32">::<pos:position pos:line="3" pos:column="34"/></operator><name pos:line="3" pos:column="34">sendingUndecided<pos:position pos:line="3" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="3" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="52"/></expr_stmt>

    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><operator pos:line="5" pos:column="9">!<pos:position pos:line="5" pos:column="10"/></operator><call><name pos:line="5" pos:column="10">parseHead<pos:position pos:line="5" pos:column="19"/></name><argument_list pos:line="5" pos:column="19">(<argument><expr><call><name><name pos:line="5" pos:column="20">icapReply<pos:position pos:line="5" pos:column="29"/></name><operator pos:line="5" pos:column="29">.<pos:position pos:line="5" pos:column="30"/></operator><name pos:line="5" pos:column="30">getRaw<pos:position pos:line="5" pos:column="36"/></name></name><argument_list pos:line="5" pos:column="36">()<pos:position pos:line="5" pos:column="38"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="40"/></condition><then pos:line="5" pos:column="40">
        <block type="pseudo"><return pos:line="6" pos:column="9">return;<pos:position pos:line="6" pos:column="16"/></return></block></then></if>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><call><name pos:line="8" pos:column="9">httpHeaderHasConnDir<pos:position pos:line="8" pos:column="29"/></name><argument_list pos:line="8" pos:column="29">(<argument><expr><operator pos:line="8" pos:column="30">&amp;<pos:position pos:line="8" pos:column="35"/></operator><name><name pos:line="8" pos:column="31">icapReply<pos:position pos:line="8" pos:column="40"/></name><operator pos:line="8" pos:column="40">-&gt;<pos:position pos:line="8" pos:column="45"/></operator><name pos:line="8" pos:column="42">header<pos:position pos:line="8" pos:column="48"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="50">"close"<pos:position pos:line="8" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="59"/></condition><then pos:line="8" pos:column="59"> <block pos:line="8" pos:column="60">{
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">debugs<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><literal type="number" pos:line="9" pos:column="16">93<pos:position pos:line="9" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="20">5<pos:position pos:line="9" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="23">HERE<pos:position pos:line="9" pos:column="27"/></name> <operator pos:line="9" pos:column="28">&lt;&lt;<pos:position pos:line="9" pos:column="36"/></operator> <literal type="string" pos:line="9" pos:column="31">"found connection close"<pos:position pos:line="9" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="57"/></expr_stmt>
        <expr_stmt><expr><name pos:line="10" pos:column="9">reuseConnection<pos:position pos:line="10" pos:column="24"/></name> <operator pos:line="10" pos:column="25">=<pos:position pos:line="10" pos:column="26"/></operator> <literal type="boolean" pos:line="10" pos:column="27">false<pos:position pos:line="10" pos:column="32"/></literal></expr>;<pos:position pos:line="10" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>

    <switch pos:line="13" pos:column="5">switch <condition pos:line="13" pos:column="12">(<expr><call><name><name pos:line="13" pos:column="13">icapReply<pos:position pos:line="13" pos:column="22"/></name><operator pos:line="13" pos:column="22">-&gt;<pos:position pos:line="13" pos:column="27"/></operator><name pos:line="13" pos:column="24">sline<pos:position pos:line="13" pos:column="29"/></name><operator pos:line="13" pos:column="29">.<pos:position pos:line="13" pos:column="30"/></operator><name pos:line="13" pos:column="30">status<pos:position pos:line="13" pos:column="36"/></name></name><argument_list pos:line="13" pos:column="36">()<pos:position pos:line="13" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="39"/></condition> <block pos:line="13" pos:column="40">{

    <case pos:line="15" pos:column="5">case <expr><name><name pos:line="15" pos:column="10">Http<pos:position pos:line="15" pos:column="14"/></name><operator pos:line="15" pos:column="14">::<pos:position pos:line="15" pos:column="16"/></operator><name pos:line="15" pos:column="16">scContinue<pos:position pos:line="15" pos:column="26"/></name></name></expr>:<pos:position pos:line="15" pos:column="27"/></case>
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">handle100Continue<pos:position pos:line="16" pos:column="26"/></name><argument_list pos:line="16" pos:column="26">()<pos:position pos:line="16" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="29"/></expr_stmt>
        <break pos:line="17" pos:column="9">break;<pos:position pos:line="17" pos:column="15"/></break>

    <case pos:line="19" pos:column="5">case <expr><name><name pos:line="19" pos:column="10">Http<pos:position pos:line="19" pos:column="14"/></name><operator pos:line="19" pos:column="14">::<pos:position pos:line="19" pos:column="16"/></operator><name pos:line="19" pos:column="16">scOkay<pos:position pos:line="19" pos:column="22"/></name></name></expr>:<pos:position pos:line="19" pos:column="23"/></case>
    <case pos:line="20" pos:column="5">case <expr><name><name pos:line="20" pos:column="10">Http<pos:position pos:line="20" pos:column="14"/></name><operator pos:line="20" pos:column="14">::<pos:position pos:line="20" pos:column="16"/></operator><name pos:line="20" pos:column="16">scCreated<pos:position pos:line="20" pos:column="25"/></name></name></expr>:<pos:position pos:line="20" pos:column="26"/></case> <comment type="line" pos:line="20" pos:column="27">// Symantec Scan Engine 5.0 and later when modifying HTTP msg</comment>

        <if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><operator pos:line="22" pos:column="13">!<pos:position pos:line="22" pos:column="14"/></operator><call><name pos:line="22" pos:column="14">validate200Ok<pos:position pos:line="22" pos:column="27"/></name><argument_list pos:line="22" pos:column="27">()<pos:position pos:line="22" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="30"/></condition><then pos:line="22" pos:column="30"> <block pos:line="22" pos:column="31">{
            <throw pos:line="23" pos:column="13">throw <expr><call><name pos:line="23" pos:column="19">TexcHere<pos:position pos:line="23" pos:column="27"/></name><argument_list pos:line="23" pos:column="27">(<argument><expr><literal type="string" pos:line="23" pos:column="28">"Invalid ICAP Response"<pos:position pos:line="23" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="53"/></throw>
        }<pos:position pos:line="24" pos:column="10"/></block></then> <else pos:line="24" pos:column="11">else <block pos:line="24" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="25" pos:column="13">handle200Ok<pos:position pos:line="25" pos:column="24"/></name><argument_list pos:line="25" pos:column="24">()<pos:position pos:line="25" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="27"/></expr_stmt>
        }<pos:position pos:line="26" pos:column="10"/></block></else></if>

        <break pos:line="28" pos:column="9">break;<pos:position pos:line="28" pos:column="15"/></break>

    <case pos:line="30" pos:column="5">case <expr><name><name pos:line="30" pos:column="10">Http<pos:position pos:line="30" pos:column="14"/></name><operator pos:line="30" pos:column="14">::<pos:position pos:line="30" pos:column="16"/></operator><name pos:line="30" pos:column="16">scNoContent<pos:position pos:line="30" pos:column="27"/></name></name></expr>:<pos:position pos:line="30" pos:column="28"/></case>
        <expr_stmt><expr><call><name pos:line="31" pos:column="9">handle204NoContent<pos:position pos:line="31" pos:column="27"/></name><argument_list pos:line="31" pos:column="27">()<pos:position pos:line="31" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="30"/></expr_stmt>
        <break pos:line="32" pos:column="9">break;<pos:position pos:line="32" pos:column="15"/></break>

    <case pos:line="34" pos:column="5">case <expr><name><name pos:line="34" pos:column="10">Http<pos:position pos:line="34" pos:column="14"/></name><operator pos:line="34" pos:column="14">::<pos:position pos:line="34" pos:column="16"/></operator><name pos:line="34" pos:column="16">scPartialContent<pos:position pos:line="34" pos:column="32"/></name></name></expr>:<pos:position pos:line="34" pos:column="33"/></case>
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">handle206PartialContent<pos:position pos:line="35" pos:column="32"/></name><argument_list pos:line="35" pos:column="32">()<pos:position pos:line="35" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="35"/></expr_stmt>
        <break pos:line="36" pos:column="9">break;<pos:position pos:line="36" pos:column="15"/></break>

    <default pos:line="38" pos:column="5">default:<pos:position pos:line="38" pos:column="13"/></default>
        <expr_stmt><expr><call><name pos:line="39" pos:column="9">debugs<pos:position pos:line="39" pos:column="15"/></name><argument_list pos:line="39" pos:column="15">(<argument><expr><literal type="number" pos:line="39" pos:column="16">93<pos:position pos:line="39" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="20">5<pos:position pos:line="39" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="23">"ICAP status "<pos:position pos:line="39" pos:column="37"/></literal> <operator pos:line="39" pos:column="38">&lt;&lt;<pos:position pos:line="39" pos:column="46"/></operator> <call><name><name pos:line="39" pos:column="41">icapReply<pos:position pos:line="39" pos:column="50"/></name><operator pos:line="39" pos:column="50">-&gt;<pos:position pos:line="39" pos:column="55"/></operator><name pos:line="39" pos:column="52">sline<pos:position pos:line="39" pos:column="57"/></name><operator pos:line="39" pos:column="57">.<pos:position pos:line="39" pos:column="58"/></operator><name pos:line="39" pos:column="58">status<pos:position pos:line="39" pos:column="64"/></name></name><argument_list pos:line="39" pos:column="64">()<pos:position pos:line="39" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="39" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="40" pos:column="9">handleUnknownScode<pos:position pos:line="40" pos:column="27"/></name><argument_list pos:line="40" pos:column="27">()<pos:position pos:line="40" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="30"/></expr_stmt>
        <break pos:line="41" pos:column="9">break;<pos:position pos:line="41" pos:column="15"/></break>
    }<pos:position pos:line="42" pos:column="6"/></block></switch>

    <decl_stmt><decl><type><specifier pos:line="44" pos:column="5">const<pos:position pos:line="44" pos:column="10"/></specifier> <name pos:line="44" pos:column="11">HttpRequest<pos:position pos:line="44" pos:column="22"/></name> <modifier pos:line="44" pos:column="23">*<pos:position pos:line="44" pos:column="24"/></modifier></type><name pos:line="44" pos:column="24">request<pos:position pos:line="44" pos:column="31"/></name> <init pos:line="44" pos:column="32">= <expr><cast type="dynamic" pos:line="44" pos:column="34">dynamic_cast<argument_list type="generic" pos:line="44" pos:column="46">&lt;<argument><expr><name pos:line="44" pos:column="47">HttpRequest<pos:position pos:line="44" pos:column="58"/></name><operator pos:line="44" pos:column="58">*<pos:position pos:line="44" pos:column="59"/></operator></expr></argument>&gt;<pos:position pos:line="44" pos:column="63"/></argument_list><argument_list pos:line="44" pos:column="60">(<argument><expr><name><name pos:line="44" pos:column="61">adapted<pos:position pos:line="44" pos:column="68"/></name><operator pos:line="44" pos:column="68">.<pos:position pos:line="44" pos:column="69"/></operator><name pos:line="44" pos:column="69">header<pos:position pos:line="44" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="76"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="44" pos:column="77"/></decl_stmt>
    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><operator pos:line="45" pos:column="9">!<pos:position pos:line="45" pos:column="10"/></operator><name pos:line="45" pos:column="10">request<pos:position pos:line="45" pos:column="17"/></name></expr>)<pos:position pos:line="45" pos:column="18"/></condition><then pos:line="45" pos:column="18">
        <block type="pseudo"><expr_stmt><expr><name pos:line="46" pos:column="9">request<pos:position pos:line="46" pos:column="16"/></name> <operator pos:line="46" pos:column="17">=<pos:position pos:line="46" pos:column="18"/></operator> <operator pos:line="46" pos:column="19">&amp;<pos:position pos:line="46" pos:column="24"/></operator><call><name pos:line="46" pos:column="20">virginRequest<pos:position pos:line="46" pos:column="33"/></name><argument_list pos:line="46" pos:column="33">()<pos:position pos:line="46" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="36"/></expr_stmt></block></then></if>

    <comment type="line" pos:line="48" pos:column="5">// update the cross-transactional database if needed (all status codes!)</comment>
    <if pos:line="49" pos:column="5">if <condition pos:line="49" pos:column="8">(<decl><type><specifier pos:line="49" pos:column="9">const<pos:position pos:line="49" pos:column="14"/></specifier> <name pos:line="49" pos:column="15">char<pos:position pos:line="49" pos:column="19"/></name> <modifier pos:line="49" pos:column="20">*<pos:position pos:line="49" pos:column="21"/></modifier></type><name pos:line="49" pos:column="21">xxName<pos:position pos:line="49" pos:column="27"/></name> <init pos:line="49" pos:column="28">= <expr><name><name pos:line="49" pos:column="30">Adaptation<pos:position pos:line="49" pos:column="40"/></name><operator pos:line="49" pos:column="40">::<pos:position pos:line="49" pos:column="42"/></operator><name pos:line="49" pos:column="42">Config<pos:position pos:line="49" pos:column="48"/></name><operator pos:line="49" pos:column="48">::<pos:position pos:line="49" pos:column="50"/></operator><name pos:line="49" pos:column="50">masterx_shared_name<pos:position pos:line="49" pos:column="69"/></name></name></expr></init></decl>)<pos:position pos:line="49" pos:column="70"/></condition><then pos:line="49" pos:column="70"> <block pos:line="49" pos:column="71">{
        <decl_stmt><decl><type><name><name pos:line="50" pos:column="9">Adaptation<pos:position pos:line="50" pos:column="19"/></name><operator pos:line="50" pos:column="19">::<pos:position pos:line="50" pos:column="21"/></operator><name pos:line="50" pos:column="21">History<pos:position pos:line="50" pos:column="28"/></name><operator pos:line="50" pos:column="28">::<pos:position pos:line="50" pos:column="30"/></operator><name pos:line="50" pos:column="30">Pointer<pos:position pos:line="50" pos:column="37"/></name></name></type> <name pos:line="50" pos:column="38">ah<pos:position pos:line="50" pos:column="40"/></name> <init pos:line="50" pos:column="41">= <expr><call><name><name pos:line="50" pos:column="43">request<pos:position pos:line="50" pos:column="50"/></name><operator pos:line="50" pos:column="50">-&gt;<pos:position pos:line="50" pos:column="55"/></operator><name pos:line="50" pos:column="52">adaptHistory<pos:position pos:line="50" pos:column="64"/></name></name><argument_list pos:line="50" pos:column="64">(<argument><expr><literal type="boolean" pos:line="50" pos:column="65">true<pos:position pos:line="50" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="50" pos:column="71"/></decl_stmt>
        <if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><name pos:line="51" pos:column="13">ah<pos:position pos:line="51" pos:column="15"/></name> <operator pos:line="51" pos:column="16">!=<pos:position pos:line="51" pos:column="18"/></operator> <name pos:line="51" pos:column="19">NULL<pos:position pos:line="51" pos:column="23"/></name></expr>)<pos:position pos:line="51" pos:column="24"/></condition><then pos:line="51" pos:column="24"> <block pos:line="51" pos:column="25">{ <comment type="line" pos:line="51" pos:column="27">// TODO: reorder checks to avoid creating history</comment>
            <decl_stmt><decl><type><specifier pos:line="52" pos:column="13">const<pos:position pos:line="52" pos:column="18"/></specifier> <name pos:line="52" pos:column="19">String<pos:position pos:line="52" pos:column="25"/></name></type> <name pos:line="52" pos:column="26">val<pos:position pos:line="52" pos:column="29"/></name> <init pos:line="52" pos:column="30">= <expr><call><name><name pos:line="52" pos:column="32">icapReply<pos:position pos:line="52" pos:column="41"/></name><operator pos:line="52" pos:column="41">-&gt;<pos:position pos:line="52" pos:column="46"/></operator><name pos:line="52" pos:column="43">header<pos:position pos:line="52" pos:column="49"/></name><operator pos:line="52" pos:column="49">.<pos:position pos:line="52" pos:column="50"/></operator><name pos:line="52" pos:column="50">getByName<pos:position pos:line="52" pos:column="59"/></name></name><argument_list pos:line="52" pos:column="59">(<argument><expr><name pos:line="52" pos:column="60">xxName<pos:position pos:line="52" pos:column="66"/></name></expr></argument>)<pos:position pos:line="52" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="52" pos:column="68"/></decl_stmt>
            <if pos:line="53" pos:column="13">if <condition pos:line="53" pos:column="16">(<expr><call><name><name pos:line="53" pos:column="17">val<pos:position pos:line="53" pos:column="20"/></name><operator pos:line="53" pos:column="20">.<pos:position pos:line="53" pos:column="21"/></operator><name pos:line="53" pos:column="21">size<pos:position pos:line="53" pos:column="25"/></name></name><argument_list pos:line="53" pos:column="25">()<pos:position pos:line="53" pos:column="27"/></argument_list></call> <operator pos:line="53" pos:column="28">&gt;<pos:position pos:line="53" pos:column="32"/></operator> <literal type="number" pos:line="53" pos:column="30">0<pos:position pos:line="53" pos:column="31"/></literal></expr>)<pos:position pos:line="53" pos:column="32"/></condition><then pos:line="53" pos:column="32"> <comment type="line" pos:line="53" pos:column="33">// XXX: HttpHeader lacks empty value detection</comment>
                <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="54" pos:column="17">ah<pos:position pos:line="54" pos:column="19"/></name><operator pos:line="54" pos:column="19">-&gt;<pos:position pos:line="54" pos:column="24"/></operator><name pos:line="54" pos:column="21">updateXxRecord<pos:position pos:line="54" pos:column="35"/></name></name><argument_list pos:line="54" pos:column="35">(<argument><expr><name pos:line="54" pos:column="36">xxName<pos:position pos:line="54" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="44">val<pos:position pos:line="54" pos:column="47"/></name></expr></argument>)<pos:position pos:line="54" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="49"/></expr_stmt></block></then></if>
        }<pos:position pos:line="55" pos:column="10"/></block></then></if>
    }<pos:position pos:line="56" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="58" pos:column="5">// update the adaptation plan if needed (all status codes!)</comment>
    <if pos:line="59" pos:column="5">if <condition pos:line="59" pos:column="8">(<expr><call><name pos:line="59" pos:column="9">service<pos:position pos:line="59" pos:column="16"/></name><argument_list pos:line="59" pos:column="16">()<pos:position pos:line="59" pos:column="18"/></argument_list></call><operator pos:line="59" pos:column="18">.<pos:position pos:line="59" pos:column="19"/></operator><call><name pos:line="59" pos:column="19">cfg<pos:position pos:line="59" pos:column="22"/></name><argument_list pos:line="59" pos:column="22">()<pos:position pos:line="59" pos:column="24"/></argument_list></call><operator pos:line="59" pos:column="24">.<pos:position pos:line="59" pos:column="25"/></operator><name pos:line="59" pos:column="25">routing<pos:position pos:line="59" pos:column="32"/></name></expr>)<pos:position pos:line="59" pos:column="33"/></condition><then pos:line="59" pos:column="33"> <block pos:line="59" pos:column="34">{
        <decl_stmt><decl><type><name pos:line="60" pos:column="9">String<pos:position pos:line="60" pos:column="15"/></name></type> <name pos:line="60" pos:column="16">services<pos:position pos:line="60" pos:column="24"/></name></decl>;<pos:position pos:line="60" pos:column="25"/></decl_stmt>
        <if pos:line="61" pos:column="9">if <condition pos:line="61" pos:column="12">(<expr><call><name><name pos:line="61" pos:column="13">icapReply<pos:position pos:line="61" pos:column="22"/></name><operator pos:line="61" pos:column="22">-&gt;<pos:position pos:line="61" pos:column="27"/></operator><name pos:line="61" pos:column="24">header<pos:position pos:line="61" pos:column="30"/></name><operator pos:line="61" pos:column="30">.<pos:position pos:line="61" pos:column="31"/></operator><name pos:line="61" pos:column="31">getList<pos:position pos:line="61" pos:column="38"/></name></name><argument_list pos:line="61" pos:column="38">(<argument><expr><name pos:line="61" pos:column="39">HDR_X_NEXT_SERVICES<pos:position pos:line="61" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="61" pos:column="60">&amp;<pos:position pos:line="61" pos:column="65"/></operator><name pos:line="61" pos:column="61">services<pos:position pos:line="61" pos:column="69"/></name></expr></argument>)<pos:position pos:line="61" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="61" pos:column="71"/></condition><then pos:line="61" pos:column="71"> <block pos:line="61" pos:column="72">{
            <decl_stmt><decl><type><name><name pos:line="62" pos:column="13">Adaptation<pos:position pos:line="62" pos:column="23"/></name><operator pos:line="62" pos:column="23">::<pos:position pos:line="62" pos:column="25"/></operator><name pos:line="62" pos:column="25">History<pos:position pos:line="62" pos:column="32"/></name><operator pos:line="62" pos:column="32">::<pos:position pos:line="62" pos:column="34"/></operator><name pos:line="62" pos:column="34">Pointer<pos:position pos:line="62" pos:column="41"/></name></name></type> <name pos:line="62" pos:column="42">ah<pos:position pos:line="62" pos:column="44"/></name> <init pos:line="62" pos:column="45">= <expr><call><name><name pos:line="62" pos:column="47">request<pos:position pos:line="62" pos:column="54"/></name><operator pos:line="62" pos:column="54">-&gt;<pos:position pos:line="62" pos:column="59"/></operator><name pos:line="62" pos:column="56">adaptHistory<pos:position pos:line="62" pos:column="68"/></name></name><argument_list pos:line="62" pos:column="68">(<argument><expr><literal type="boolean" pos:line="62" pos:column="69">true<pos:position pos:line="62" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="74"/></argument_list></call></expr></init></decl>;<pos:position pos:line="62" pos:column="75"/></decl_stmt>
            <if pos:line="63" pos:column="13">if <condition pos:line="63" pos:column="16">(<expr><name pos:line="63" pos:column="17">ah<pos:position pos:line="63" pos:column="19"/></name> <operator pos:line="63" pos:column="20">!=<pos:position pos:line="63" pos:column="22"/></operator> <name pos:line="63" pos:column="23">NULL<pos:position pos:line="63" pos:column="27"/></name></expr>)<pos:position pos:line="63" pos:column="28"/></condition><then pos:line="63" pos:column="28">
                <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="64" pos:column="17">ah<pos:position pos:line="64" pos:column="19"/></name><operator pos:line="64" pos:column="19">-&gt;<pos:position pos:line="64" pos:column="24"/></operator><name pos:line="64" pos:column="21">updateNextServices<pos:position pos:line="64" pos:column="39"/></name></name><argument_list pos:line="64" pos:column="39">(<argument><expr><name pos:line="64" pos:column="40">services<pos:position pos:line="64" pos:column="48"/></name></expr></argument>)<pos:position pos:line="64" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="50"/></expr_stmt></block></then></if>
        }<pos:position pos:line="65" pos:column="10"/></block></then></if>
    }<pos:position pos:line="66" pos:column="6"/></block></then></if> <comment type="line" pos:line="66" pos:column="7">// TODO: else warn (occasionally!) if we got HDR_X_NEXT_SERVICES</comment>

    <comment type="line" pos:line="68" pos:column="5">// We need to store received ICAP headers for &lt;icapLastHeader logformat option.</comment>
    <comment type="line" pos:line="69" pos:column="5">// If we already have stored headers from previous ICAP transaction related to this</comment>
    <comment type="line" pos:line="70" pos:column="5">// request, old headers will be replaced with the new one.</comment>

    <decl_stmt><decl><type><name><name pos:line="72" pos:column="5">Adaptation<pos:position pos:line="72" pos:column="15"/></name><operator pos:line="72" pos:column="15">::<pos:position pos:line="72" pos:column="17"/></operator><name pos:line="72" pos:column="17">History<pos:position pos:line="72" pos:column="24"/></name><operator pos:line="72" pos:column="24">::<pos:position pos:line="72" pos:column="26"/></operator><name pos:line="72" pos:column="26">Pointer<pos:position pos:line="72" pos:column="33"/></name></name></type> <name pos:line="72" pos:column="34">ah<pos:position pos:line="72" pos:column="36"/></name> <init pos:line="72" pos:column="37">= <expr><call><name><name pos:line="72" pos:column="39">request<pos:position pos:line="72" pos:column="46"/></name><operator pos:line="72" pos:column="46">-&gt;<pos:position pos:line="72" pos:column="51"/></operator><name pos:line="72" pos:column="48">adaptLogHistory<pos:position pos:line="72" pos:column="63"/></name></name><argument_list pos:line="72" pos:column="63">()<pos:position pos:line="72" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="72" pos:column="66"/></decl_stmt>
    <if pos:line="73" pos:column="5">if <condition pos:line="73" pos:column="8">(<expr><name pos:line="73" pos:column="9">ah<pos:position pos:line="73" pos:column="11"/></name> <operator pos:line="73" pos:column="12">!=<pos:position pos:line="73" pos:column="14"/></operator> <name pos:line="73" pos:column="15">NULL<pos:position pos:line="73" pos:column="19"/></name></expr>)<pos:position pos:line="73" pos:column="20"/></condition><then pos:line="73" pos:column="20">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="74" pos:column="9">ah<pos:position pos:line="74" pos:column="11"/></name><operator pos:line="74" pos:column="11">-&gt;<pos:position pos:line="74" pos:column="16"/></operator><name pos:line="74" pos:column="13">recordMeta<pos:position pos:line="74" pos:column="23"/></name></name><argument_list pos:line="74" pos:column="23">(<argument><expr><operator pos:line="74" pos:column="24">&amp;<pos:position pos:line="74" pos:column="29"/></operator><name><name pos:line="74" pos:column="25">icapReply<pos:position pos:line="74" pos:column="34"/></name><operator pos:line="74" pos:column="34">-&gt;<pos:position pos:line="74" pos:column="39"/></operator><name pos:line="74" pos:column="36">header<pos:position pos:line="74" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="74" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="44"/></expr_stmt></block></then></if>

    <comment type="line" pos:line="76" pos:column="5">// handle100Continue() manages state.writing on its own.</comment>
    <comment type="line" pos:line="77" pos:column="5">// Non-100 status means the server needs no postPreview data from us.</comment>
    <if pos:line="78" pos:column="5">if <condition pos:line="78" pos:column="8">(<expr><name><name pos:line="78" pos:column="9">state<pos:position pos:line="78" pos:column="14"/></name><operator pos:line="78" pos:column="14">.<pos:position pos:line="78" pos:column="15"/></operator><name pos:line="78" pos:column="15">writing<pos:position pos:line="78" pos:column="22"/></name></name> <operator pos:line="78" pos:column="23">==<pos:position pos:line="78" pos:column="25"/></operator> <name><name pos:line="78" pos:column="26">State<pos:position pos:line="78" pos:column="31"/></name><operator pos:line="78" pos:column="31">::<pos:position pos:line="78" pos:column="33"/></operator><name pos:line="78" pos:column="33">writingPaused<pos:position pos:line="78" pos:column="46"/></name></name></expr>)<pos:position pos:line="78" pos:column="47"/></condition><then pos:line="78" pos:column="47">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="79" pos:column="9">stopWriting<pos:position pos:line="79" pos:column="20"/></name><argument_list pos:line="79" pos:column="20">(<argument><expr><literal type="boolean" pos:line="79" pos:column="21">true<pos:position pos:line="79" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="27"/></expr_stmt></block></then></if>
}<pos:position pos:line="80" pos:column="2"/></block></function></unit>
