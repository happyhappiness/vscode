<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5766_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">IpcIoFile<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">write<pos:position pos:line="2" pos:column="17"/></name></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><name pos:line="2" pos:column="18">WriteRequest<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type><name pos:line="2" pos:column="32">writeRequest<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="45"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">79<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="4" pos:column="15">3<pos:position pos:line="4" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="18">HERE<pos:position pos:line="4" pos:column="22"/></name> <operator pos:line="4" pos:column="23">&lt;&lt;<pos:position pos:line="4" pos:column="31"/></operator> <literal type="string" pos:line="4" pos:column="26">"(disker"<pos:position pos:line="4" pos:column="35"/></literal> <operator pos:line="4" pos:column="36">&lt;&lt;<pos:position pos:line="4" pos:column="44"/></operator> <name pos:line="4" pos:column="39">diskId<pos:position pos:line="4" pos:column="45"/></name> <operator pos:line="4" pos:column="46">&lt;&lt;<pos:position pos:line="4" pos:column="54"/></operator> <literal type="string" pos:line="4" pos:column="49">", "<pos:position pos:line="4" pos:column="53"/></literal> <operator pos:line="4" pos:column="54">&lt;&lt;<pos:position pos:line="4" pos:column="62"/></operator> <name><name pos:line="4" pos:column="57">writeRequest<pos:position pos:line="4" pos:column="69"/></name><operator pos:line="4" pos:column="69">-&gt;<pos:position pos:line="4" pos:column="74"/></operator><name pos:line="4" pos:column="71">len<pos:position pos:line="4" pos:column="74"/></name></name> <operator pos:line="4" pos:column="75">&lt;&lt;<pos:position pos:line="4" pos:column="83"/></operator> <literal type="string" pos:line="4" pos:column="78">", "<pos:position pos:line="4" pos:column="82"/></literal> <operator pos:line="4" pos:column="83">&lt;&lt;<pos:position pos:line="4" pos:column="91"/></operator>
           <name><name pos:line="5" pos:column="12">writeRequest<pos:position pos:line="5" pos:column="24"/></name><operator pos:line="5" pos:column="24">-&gt;<pos:position pos:line="5" pos:column="29"/></operator><name pos:line="5" pos:column="26">offset<pos:position pos:line="5" pos:column="32"/></name></name> <operator pos:line="5" pos:column="33">&lt;&lt;<pos:position pos:line="5" pos:column="41"/></operator> <literal type="string" pos:line="5" pos:column="36">")"<pos:position pos:line="5" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="41"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><name pos:line="7" pos:column="12">ioRequestor<pos:position pos:line="7" pos:column="23"/></name> <operator pos:line="7" pos:column="24">!=<pos:position pos:line="7" pos:column="26"/></operator> <name pos:line="7" pos:column="27">NULL<pos:position pos:line="7" pos:column="31"/></name></expr></argument>)<pos:position pos:line="7" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">assert<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><name><name pos:line="8" pos:column="12">writeRequest<pos:position pos:line="8" pos:column="24"/></name><operator pos:line="8" pos:column="24">-&gt;<pos:position pos:line="8" pos:column="29"/></operator><name pos:line="8" pos:column="26">len<pos:position pos:line="8" pos:column="29"/></name></name> <operator pos:line="8" pos:column="30">&gt;<pos:position pos:line="8" pos:column="34"/></operator> <literal type="number" pos:line="8" pos:column="32">0<pos:position pos:line="8" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="35"/></expr_stmt> <comment type="line" pos:line="8" pos:column="36">// TODO: work around mmap failures on zero-len?</comment>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">assert<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><name><name pos:line="9" pos:column="12">writeRequest<pos:position pos:line="9" pos:column="24"/></name><operator pos:line="9" pos:column="24">-&gt;<pos:position pos:line="9" pos:column="29"/></operator><name pos:line="9" pos:column="26">offset<pos:position pos:line="9" pos:column="32"/></name></name> <operator pos:line="9" pos:column="33">&gt;=<pos:position pos:line="9" pos:column="38"/></operator> <literal type="number" pos:line="9" pos:column="36">0<pos:position pos:line="9" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">Must<pos:position pos:line="10" pos:column="9"/></name><argument_list pos:line="10" pos:column="9">(<argument><expr><operator pos:line="10" pos:column="10">!<pos:position pos:line="10" pos:column="11"/></operator><name pos:line="10" pos:column="11">error_<pos:position pos:line="10" pos:column="17"/></name></expr></argument>)<pos:position pos:line="10" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="19"/></expr_stmt>

    <comment type="line" pos:line="12" pos:column="5">//assert(minOffset &lt; 0 || minOffset &lt;= writeRequest-&gt;offset);</comment>
    <comment type="line" pos:line="13" pos:column="5">//assert(maxOffset &lt; 0 || writeRequest-&gt;offset + writeRequest-&gt;len &lt;= (uint64_t)maxOffset);</comment>

    <decl_stmt><decl><type><name pos:line="15" pos:column="5">IpcIoPendingRequest<pos:position pos:line="15" pos:column="24"/></name> <modifier pos:line="15" pos:column="25">*<pos:position pos:line="15" pos:column="26"/></modifier><specifier pos:line="15" pos:column="26">const<pos:position pos:line="15" pos:column="31"/></specifier></type> <name pos:line="15" pos:column="32">pending<pos:position pos:line="15" pos:column="39"/></name> <init pos:line="15" pos:column="40">= <expr><operator pos:line="15" pos:column="42">new<pos:position pos:line="15" pos:column="45"/></operator> <call><name pos:line="15" pos:column="46">IpcIoPendingRequest<pos:position pos:line="15" pos:column="65"/></name><argument_list pos:line="15" pos:column="65">(<argument><expr><name pos:line="15" pos:column="66">this<pos:position pos:line="15" pos:column="70"/></name></expr></argument>)<pos:position pos:line="15" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="72"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="16" pos:column="5">pending<pos:position pos:line="16" pos:column="12"/></name><operator pos:line="16" pos:column="12">-&gt;<pos:position pos:line="16" pos:column="17"/></operator><name pos:line="16" pos:column="14">writeRequest<pos:position pos:line="16" pos:column="26"/></name></name> <operator pos:line="16" pos:column="27">=<pos:position pos:line="16" pos:column="28"/></operator> <name pos:line="16" pos:column="29">writeRequest<pos:position pos:line="16" pos:column="41"/></name></expr>;<pos:position pos:line="16" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">push<pos:position pos:line="17" pos:column="9"/></name><argument_list pos:line="17" pos:column="9">(<argument><expr><name pos:line="17" pos:column="10">pending<pos:position pos:line="17" pos:column="17"/></name></expr></argument>)<pos:position pos:line="17" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="19"/></expr_stmt>
}<pos:position pos:line="18" pos:column="2"/></block></function></unit>
