<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4319_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Icap<pos:position pos:line="1" pos:column="22"/></name><operator pos:line="1" pos:column="22">::<pos:position pos:line="1" pos:column="24"/></operator><name pos:line="1" pos:column="24">OptXact<pos:position pos:line="1" pos:column="31"/></name><operator pos:line="1" pos:column="31">::<pos:position pos:line="1" pos:column="33"/></operator><name pos:line="1" pos:column="33">handleCommRead<pos:position pos:line="1" pos:column="47"/></name></name><parameter_list pos:line="1" pos:column="47">(<parameter><decl><type><name pos:line="1" pos:column="48">size_t<pos:position pos:line="1" pos:column="54"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="55"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <if pos:line="3" pos:column="5">if <condition pos:line="3" pos:column="8">(<expr><call><name pos:line="3" pos:column="9">parseResponse<pos:position pos:line="3" pos:column="22"/></name><argument_list pos:line="3" pos:column="22">()<pos:position pos:line="3" pos:column="24"/></argument_list></call></expr>)<pos:position pos:line="3" pos:column="25"/></condition><then pos:line="3" pos:column="25"> <block pos:line="3" pos:column="26">{
        <expr_stmt><expr><call><name pos:line="4" pos:column="9">Must<pos:position pos:line="4" pos:column="13"/></name><argument_list pos:line="4" pos:column="13">(<argument><expr><name pos:line="4" pos:column="14">icapReply<pos:position pos:line="4" pos:column="23"/></name> <operator pos:line="4" pos:column="24">!=<pos:position pos:line="4" pos:column="26"/></operator> <name pos:line="4" pos:column="27">NULL<pos:position pos:line="4" pos:column="31"/></name></expr></argument>)<pos:position pos:line="4" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="33"/></expr_stmt>
        <comment type="line" pos:line="5" pos:column="9">// We read everything if there is no response body. If there is a body,</comment>
        <comment type="line" pos:line="6" pos:column="9">// we cannot parse it because we do not support any opt-body-types, so</comment>
        <comment type="line" pos:line="7" pos:column="9">// we leave readAll false which forces connection closure.</comment>
        <expr_stmt><expr><name pos:line="8" pos:column="9">readAll<pos:position pos:line="8" pos:column="16"/></name> <operator pos:line="8" pos:column="17">=<pos:position pos:line="8" pos:column="18"/></operator> <operator pos:line="8" pos:column="19">!<pos:position pos:line="8" pos:column="20"/></operator><call><name><name pos:line="8" pos:column="20">icapReply<pos:position pos:line="8" pos:column="29"/></name><operator pos:line="8" pos:column="29">-&gt;<pos:position pos:line="8" pos:column="34"/></operator><name pos:line="8" pos:column="31">header<pos:position pos:line="8" pos:column="37"/></name><operator pos:line="8" pos:column="37">.<pos:position pos:line="8" pos:column="38"/></operator><name pos:line="8" pos:column="38">getByNameListMember<pos:position pos:line="8" pos:column="57"/></name></name><argument_list pos:line="8" pos:column="57">(<argument><expr><literal type="string" pos:line="8" pos:column="58">"Encapsulated"<pos:position pos:line="8" pos:column="72"/></literal></expr></argument>,
                  <argument><expr><literal type="string" pos:line="9" pos:column="19">"opt-body"<pos:position pos:line="9" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="char" pos:line="9" pos:column="31">','<pos:position pos:line="9" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="35"/></argument_list></call><operator pos:line="9" pos:column="35">.<pos:position pos:line="9" pos:column="36"/></operator><call><name pos:line="9" pos:column="36">size<pos:position pos:line="9" pos:column="40"/></name><argument_list pos:line="9" pos:column="40">()<pos:position pos:line="9" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">debugs<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><literal type="number" pos:line="10" pos:column="16">93<pos:position pos:line="10" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="20">7<pos:position pos:line="10" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="23">HERE<pos:position pos:line="10" pos:column="27"/></name> <operator pos:line="10" pos:column="28">&lt;&lt;<pos:position pos:line="10" pos:column="36"/></operator> <literal type="string" pos:line="10" pos:column="31">"readAll="<pos:position pos:line="10" pos:column="41"/></literal> <operator pos:line="10" pos:column="42">&lt;&lt;<pos:position pos:line="10" pos:column="50"/></operator> <name pos:line="10" pos:column="45">readAll<pos:position pos:line="10" pos:column="52"/></name></expr></argument>)<pos:position pos:line="10" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="54"/></expr_stmt>
        <expr_stmt><expr><name pos:line="11" pos:column="9">icap_tio_finish<pos:position pos:line="11" pos:column="24"/></name> <operator pos:line="11" pos:column="25">=<pos:position pos:line="11" pos:column="26"/></operator> <name pos:line="11" pos:column="27">current_time<pos:position pos:line="11" pos:column="39"/></name></expr>;<pos:position pos:line="11" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">setOutcome<pos:position pos:line="12" pos:column="19"/></name><argument_list pos:line="12" pos:column="19">(<argument><expr><name pos:line="12" pos:column="20">xoOpt<pos:position pos:line="12" pos:column="25"/></name></expr></argument>)<pos:position pos:line="12" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">sendAnswer<pos:position pos:line="13" pos:column="19"/></name><argument_list pos:line="13" pos:column="19">(<argument><expr><call><name><name pos:line="13" pos:column="20">Answer<pos:position pos:line="13" pos:column="26"/></name><operator pos:line="13" pos:column="26">::<pos:position pos:line="13" pos:column="28"/></operator><name pos:line="13" pos:column="28">Forward<pos:position pos:line="13" pos:column="35"/></name></name><argument_list pos:line="13" pos:column="35">(<argument><expr><call><name><name pos:line="13" pos:column="36">icapReply<pos:position pos:line="13" pos:column="45"/></name><operator pos:line="13" pos:column="45">.<pos:position pos:line="13" pos:column="46"/></operator><name pos:line="13" pos:column="46">getRaw<pos:position pos:line="13" pos:column="52"/></name></name><argument_list pos:line="13" pos:column="52">()<pos:position pos:line="13" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="57"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">Must<pos:position pos:line="14" pos:column="13"/></name><argument_list pos:line="14" pos:column="13">(<argument><expr><call><name pos:line="14" pos:column="14">done<pos:position pos:line="14" pos:column="18"/></name><argument_list pos:line="14" pos:column="18">()<pos:position pos:line="14" pos:column="20"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="22"/></expr_stmt> <comment type="line" pos:line="14" pos:column="23">// there should be nothing else to do</comment>
        <return pos:line="15" pos:column="9">return;<pos:position pos:line="15" pos:column="16"/></return>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="18" pos:column="5">scheduleRead<pos:position pos:line="18" pos:column="17"/></name><argument_list pos:line="18" pos:column="17">()<pos:position pos:line="18" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="20"/></expr_stmt>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
