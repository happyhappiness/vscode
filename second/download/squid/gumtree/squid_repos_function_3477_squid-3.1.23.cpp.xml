<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3477_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">ConnStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">connReadWasError<pos:position pos:line="2" pos:column="32"/></name></name><parameter_list pos:line="2" pos:column="32">(<parameter><decl><type><name pos:line="2" pos:column="33">comm_err_t<pos:position pos:line="2" pos:column="43"/></name></type> <name pos:line="2" pos:column="44">flag<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="50">int<pos:position pos:line="2" pos:column="53"/></name></type> <name pos:line="2" pos:column="54">size<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="60">int<pos:position pos:line="2" pos:column="63"/></name></type> <name pos:line="2" pos:column="64">xerrno<pos:position pos:line="2" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="71"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">flag<pos:position pos:line="4" pos:column="13"/></name> <operator pos:line="4" pos:column="14">!=<pos:position pos:line="4" pos:column="16"/></operator> <name pos:line="4" pos:column="17">COMM_OK<pos:position pos:line="4" pos:column="24"/></name></expr>)<pos:position pos:line="4" pos:column="25"/></condition><then pos:line="4" pos:column="25"> <block pos:line="4" pos:column="26">{
        <expr_stmt><expr><call><name pos:line="5" pos:column="9">debugs<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">(<argument><expr><literal type="number" pos:line="5" pos:column="16">33<pos:position pos:line="5" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="20">2<pos:position pos:line="5" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="23">"connReadWasError: FD "<pos:position pos:line="5" pos:column="46"/></literal> <operator pos:line="5" pos:column="47">&lt;&lt;<pos:position pos:line="5" pos:column="55"/></operator> <name pos:line="5" pos:column="50">fd<pos:position pos:line="5" pos:column="52"/></name> <operator pos:line="5" pos:column="53">&lt;&lt;<pos:position pos:line="5" pos:column="61"/></operator> <literal type="string" pos:line="5" pos:column="56">": got flag "<pos:position pos:line="5" pos:column="69"/></literal> <operator pos:line="5" pos:column="70">&lt;&lt;<pos:position pos:line="5" pos:column="78"/></operator> <name pos:line="5" pos:column="73">flag<pos:position pos:line="5" pos:column="77"/></name></expr></argument>)<pos:position pos:line="5" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="79"/></expr_stmt>
        <return pos:line="6" pos:column="9">return <expr><literal type="number" pos:line="6" pos:column="16">1<pos:position pos:line="6" pos:column="17"/></literal></expr>;<pos:position pos:line="6" pos:column="18"/></return>
    }<pos:position pos:line="7" pos:column="6"/></block></then></if>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">size<pos:position pos:line="9" pos:column="13"/></name> <operator pos:line="9" pos:column="14">&lt;<pos:position pos:line="9" pos:column="18"/></operator> <literal type="number" pos:line="9" pos:column="16">0<pos:position pos:line="9" pos:column="17"/></literal></expr>)<pos:position pos:line="9" pos:column="18"/></condition><then pos:line="9" pos:column="18"> <block pos:line="9" pos:column="19">{
        <if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><call><name pos:line="10" pos:column="14">ignoreErrno<pos:position pos:line="10" pos:column="25"/></name><argument_list pos:line="10" pos:column="25">(<argument><expr><name pos:line="10" pos:column="26">xerrno<pos:position pos:line="10" pos:column="32"/></name></expr></argument>)<pos:position pos:line="10" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="34"/></condition><then pos:line="10" pos:column="34"> <block pos:line="10" pos:column="35">{
            <expr_stmt><expr><call><name pos:line="11" pos:column="13">debugs<pos:position pos:line="11" pos:column="19"/></name><argument_list pos:line="11" pos:column="19">(<argument><expr><literal type="number" pos:line="11" pos:column="20">33<pos:position pos:line="11" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="24">2<pos:position pos:line="11" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="27">"connReadWasError: FD "<pos:position pos:line="11" pos:column="50"/></literal> <operator pos:line="11" pos:column="51">&lt;&lt;<pos:position pos:line="11" pos:column="59"/></operator> <name pos:line="11" pos:column="54">fd<pos:position pos:line="11" pos:column="56"/></name> <operator pos:line="11" pos:column="57">&lt;&lt;<pos:position pos:line="11" pos:column="65"/></operator> <literal type="string" pos:line="11" pos:column="60">": "<pos:position pos:line="11" pos:column="64"/></literal> <operator pos:line="11" pos:column="65">&lt;&lt;<pos:position pos:line="11" pos:column="73"/></operator> <call><name pos:line="11" pos:column="68">xstrerr<pos:position pos:line="11" pos:column="75"/></name><argument_list pos:line="11" pos:column="75">(<argument><expr><name pos:line="11" pos:column="76">xerrno<pos:position pos:line="11" pos:column="82"/></name></expr></argument>)<pos:position pos:line="11" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="85"/></expr_stmt>
            <return pos:line="12" pos:column="13">return <expr><literal type="number" pos:line="12" pos:column="20">1<pos:position pos:line="12" pos:column="21"/></literal></expr>;<pos:position pos:line="12" pos:column="22"/></return>
        }<pos:position pos:line="13" pos:column="10"/></block></then> <elseif pos:line="13" pos:column="11">else <if pos:line="13" pos:column="16">if <condition pos:line="13" pos:column="19">(<expr><name><name pos:line="13" pos:column="20">in<pos:position pos:line="13" pos:column="22"/></name><operator pos:line="13" pos:column="22">.<pos:position pos:line="13" pos:column="23"/></operator><name pos:line="13" pos:column="23">notYetUsed<pos:position pos:line="13" pos:column="33"/></name></name> <operator pos:line="13" pos:column="34">==<pos:position pos:line="13" pos:column="36"/></operator> <literal type="number" pos:line="13" pos:column="37">0<pos:position pos:line="13" pos:column="38"/></literal></expr>)<pos:position pos:line="13" pos:column="39"/></condition><then pos:line="13" pos:column="39"> <block pos:line="13" pos:column="40">{
            <expr_stmt><expr><call><name pos:line="14" pos:column="13">debugs<pos:position pos:line="14" pos:column="19"/></name><argument_list pos:line="14" pos:column="19">(<argument><expr><literal type="number" pos:line="14" pos:column="20">33<pos:position pos:line="14" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="24">2<pos:position pos:line="14" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="27">"connReadWasError: FD "<pos:position pos:line="14" pos:column="50"/></literal> <operator pos:line="14" pos:column="51">&lt;&lt;<pos:position pos:line="14" pos:column="59"/></operator> <name pos:line="14" pos:column="54">fd<pos:position pos:line="14" pos:column="56"/></name> <operator pos:line="14" pos:column="57">&lt;&lt;<pos:position pos:line="14" pos:column="65"/></operator> <literal type="string" pos:line="14" pos:column="60">": no data to process ("<pos:position pos:line="14" pos:column="84"/></literal> <operator pos:line="14" pos:column="85">&lt;&lt;<pos:position pos:line="14" pos:column="93"/></operator> <call><name pos:line="14" pos:column="88">xstrerr<pos:position pos:line="14" pos:column="95"/></name><argument_list pos:line="14" pos:column="95">(<argument><expr><name pos:line="14" pos:column="96">xerrno<pos:position pos:line="14" pos:column="102"/></name></expr></argument>)<pos:position pos:line="14" pos:column="103"/></argument_list></call> <operator pos:line="14" pos:column="104">&lt;&lt;<pos:position pos:line="14" pos:column="112"/></operator> <literal type="string" pos:line="14" pos:column="107">")"<pos:position pos:line="14" pos:column="110"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="111"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="112"/></expr_stmt>
        }<pos:position pos:line="15" pos:column="10"/></block></then></if></elseif></if>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>

    <return pos:line="18" pos:column="5">return <expr><literal type="number" pos:line="18" pos:column="12">0<pos:position pos:line="18" pos:column="13"/></literal></expr>;<pos:position pos:line="18" pos:column="14"/></return>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
