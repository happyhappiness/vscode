<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3063_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ConnStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">splice<pos:position pos:line="2" pos:column="22"/></name></name><parameter_list pos:line="2" pos:column="22">()<pos:position pos:line="2" pos:column="24"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// normally we can splice here, because we just got client hello message</comment>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name><name pos:line="6" pos:column="9">fd_table<pos:position pos:line="6" pos:column="17"/></name><index pos:line="6" pos:column="17">[<expr><name><name pos:line="6" pos:column="18">clientConnection<pos:position pos:line="6" pos:column="34"/></name><operator pos:line="6" pos:column="34">-&gt;<pos:position pos:line="6" pos:column="39"/></operator><name pos:line="6" pos:column="36">fd<pos:position pos:line="6" pos:column="38"/></name></name></expr>]<pos:position pos:line="6" pos:column="39"/></index></name><operator pos:line="6" pos:column="39">.<pos:position pos:line="6" pos:column="40"/></operator><call><name><name pos:line="6" pos:column="40">ssl<pos:position pos:line="6" pos:column="43"/></name><operator pos:line="6" pos:column="43">.<pos:position pos:line="6" pos:column="44"/></operator><name pos:line="6" pos:column="44">get<pos:position pos:line="6" pos:column="47"/></name></name><argument_list pos:line="6" pos:column="47">()<pos:position pos:line="6" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="50"/></condition><then pos:line="6" pos:column="50"> <block pos:line="6" pos:column="51">{
        <comment type="line" pos:line="7" pos:column="9">// Restore default read methods</comment>
        <expr_stmt><expr><name><name pos:line="8" pos:column="9">fd_table<pos:position pos:line="8" pos:column="17"/></name><index pos:line="8" pos:column="17">[<expr><name><name pos:line="8" pos:column="18">clientConnection<pos:position pos:line="8" pos:column="34"/></name><operator pos:line="8" pos:column="34">-&gt;<pos:position pos:line="8" pos:column="39"/></operator><name pos:line="8" pos:column="36">fd<pos:position pos:line="8" pos:column="38"/></name></name></expr>]<pos:position pos:line="8" pos:column="39"/></index></name><operator pos:line="8" pos:column="39">.<pos:position pos:line="8" pos:column="40"/></operator><name pos:line="8" pos:column="40">read_method<pos:position pos:line="8" pos:column="51"/></name> <operator pos:line="8" pos:column="52">=<pos:position pos:line="8" pos:column="53"/></operator> <operator pos:line="8" pos:column="54">&amp;<pos:position pos:line="8" pos:column="59"/></operator><name pos:line="8" pos:column="55">default_read_method<pos:position pos:line="8" pos:column="74"/></name></expr>;<pos:position pos:line="8" pos:column="75"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="9" pos:column="9">fd_table<pos:position pos:line="9" pos:column="17"/></name><index pos:line="9" pos:column="17">[<expr><name><name pos:line="9" pos:column="18">clientConnection<pos:position pos:line="9" pos:column="34"/></name><operator pos:line="9" pos:column="34">-&gt;<pos:position pos:line="9" pos:column="39"/></operator><name pos:line="9" pos:column="36">fd<pos:position pos:line="9" pos:column="38"/></name></name></expr>]<pos:position pos:line="9" pos:column="39"/></index></name><operator pos:line="9" pos:column="39">.<pos:position pos:line="9" pos:column="40"/></operator><name pos:line="9" pos:column="40">write_method<pos:position pos:line="9" pos:column="52"/></name> <operator pos:line="9" pos:column="53">=<pos:position pos:line="9" pos:column="54"/></operator> <operator pos:line="9" pos:column="55">&amp;<pos:position pos:line="9" pos:column="60"/></operator><name pos:line="9" pos:column="56">default_write_method<pos:position pos:line="9" pos:column="76"/></name></expr>;<pos:position pos:line="9" pos:column="77"/></expr_stmt>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="12" pos:column="5">// XXX: assuming that there was an HTTP/1.1 CONNECT to begin with...</comment>
    <comment type="line" pos:line="13" pos:column="5">// reset the current protocol to HTTP/1.1 (was "HTTPS" for the bumping process)</comment>
    <expr_stmt><expr><name pos:line="14" pos:column="5">transferProtocol<pos:position pos:line="14" pos:column="21"/></name> <operator pos:line="14" pos:column="22">=<pos:position pos:line="14" pos:column="23"/></operator> <call><name><name pos:line="14" pos:column="24">Http<pos:position pos:line="14" pos:column="28"/></name><operator pos:line="14" pos:column="28">::<pos:position pos:line="14" pos:column="30"/></operator><name pos:line="14" pos:column="30">ProtocolVersion<pos:position pos:line="14" pos:column="45"/></name></name><argument_list pos:line="14" pos:column="45">()<pos:position pos:line="14" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">assert<pos:position pos:line="15" pos:column="11"/></name><argument_list pos:line="15" pos:column="11">(<argument><expr><operator pos:line="15" pos:column="12">!<pos:position pos:line="15" pos:column="13"/></operator><call><name><name pos:line="15" pos:column="13">pipeline<pos:position pos:line="15" pos:column="21"/></name><operator pos:line="15" pos:column="21">.<pos:position pos:line="15" pos:column="22"/></operator><name pos:line="15" pos:column="22">empty<pos:position pos:line="15" pos:column="27"/></name></name><argument_list pos:line="15" pos:column="27">()<pos:position pos:line="15" pos:column="29"/></argument_list></call></expr></argument>)<pos:position pos:line="15" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="31"/></expr_stmt>
    <decl_stmt><decl><type><name><name pos:line="16" pos:column="5">Http<pos:position pos:line="16" pos:column="9"/></name><operator pos:line="16" pos:column="9">::<pos:position pos:line="16" pos:column="11"/></operator><name pos:line="16" pos:column="11">StreamPointer<pos:position pos:line="16" pos:column="24"/></name></name></type> <name pos:line="16" pos:column="25">context<pos:position pos:line="16" pos:column="32"/></name> <init pos:line="16" pos:column="33">= <expr><call><name><name pos:line="16" pos:column="35">pipeline<pos:position pos:line="16" pos:column="43"/></name><operator pos:line="16" pos:column="43">.<pos:position pos:line="16" pos:column="44"/></operator><name pos:line="16" pos:column="44">front<pos:position pos:line="16" pos:column="49"/></name></name><argument_list pos:line="16" pos:column="49">()<pos:position pos:line="16" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="52"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">Must<pos:position pos:line="17" pos:column="9"/></name><argument_list pos:line="17" pos:column="9">(<argument><expr><name pos:line="17" pos:column="10">context<pos:position pos:line="17" pos:column="17"/></name></expr></argument>)<pos:position pos:line="17" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">Must<pos:position pos:line="18" pos:column="9"/></name><argument_list pos:line="18" pos:column="9">(<argument><expr><name><name pos:line="18" pos:column="10">context<pos:position pos:line="18" pos:column="17"/></name><operator pos:line="18" pos:column="17">-&gt;<pos:position pos:line="18" pos:column="22"/></operator><name pos:line="18" pos:column="19">http<pos:position pos:line="18" pos:column="23"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="25"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="19" pos:column="5">ClientHttpRequest<pos:position pos:line="19" pos:column="22"/></name> <modifier pos:line="19" pos:column="23">*<pos:position pos:line="19" pos:column="24"/></modifier></type><name pos:line="19" pos:column="24">http<pos:position pos:line="19" pos:column="28"/></name> <init pos:line="19" pos:column="29">= <expr><name><name pos:line="19" pos:column="31">context<pos:position pos:line="19" pos:column="38"/></name><operator pos:line="19" pos:column="38">-&gt;<pos:position pos:line="19" pos:column="43"/></operator><name pos:line="19" pos:column="40">http<pos:position pos:line="19" pos:column="44"/></name></name></expr></init></decl>;<pos:position pos:line="19" pos:column="45"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="20" pos:column="5">HttpRequest<pos:position pos:line="20" pos:column="16"/></name><operator pos:line="20" pos:column="16">::<pos:position pos:line="20" pos:column="18"/></operator><name pos:line="20" pos:column="18">Pointer<pos:position pos:line="20" pos:column="25"/></name></name></type> <name pos:line="20" pos:column="26">request<pos:position pos:line="20" pos:column="33"/></name> <init pos:line="20" pos:column="34">= <expr><name><name pos:line="20" pos:column="36">http<pos:position pos:line="20" pos:column="40"/></name><operator pos:line="20" pos:column="40">-&gt;<pos:position pos:line="20" pos:column="45"/></operator><name pos:line="20" pos:column="42">request<pos:position pos:line="20" pos:column="49"/></name></name></expr></init></decl>;<pos:position pos:line="20" pos:column="50"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="21" pos:column="5">context<pos:position pos:line="21" pos:column="12"/></name><operator pos:line="21" pos:column="12">-&gt;<pos:position pos:line="21" pos:column="17"/></operator><name pos:line="21" pos:column="14">finished<pos:position pos:line="21" pos:column="22"/></name></name><argument_list pos:line="21" pos:column="22">()<pos:position pos:line="21" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="25"/></expr_stmt>
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><call><name pos:line="22" pos:column="9">transparent<pos:position pos:line="22" pos:column="20"/></name><argument_list pos:line="22" pos:column="20">()<pos:position pos:line="22" pos:column="22"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="23"/></condition><then pos:line="22" pos:column="23"> <block pos:line="22" pos:column="24">{
        <comment type="line" pos:line="23" pos:column="9">// For transparent connections, make a new fake CONNECT request, now</comment>
        <comment type="line" pos:line="24" pos:column="9">// with SNI as target. doCallout() checks, adaptations may need that.</comment>
        <return pos:line="25" pos:column="9">return <expr><call><name pos:line="25" pos:column="16">fakeAConnectRequest<pos:position pos:line="25" pos:column="35"/></name><argument_list pos:line="25" pos:column="35">(<argument><expr><literal type="string" pos:line="25" pos:column="36">"splice"<pos:position pos:line="25" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="46">preservedClientData<pos:position pos:line="25" pos:column="65"/></name></expr></argument>)<pos:position pos:line="25" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="67"/></return>
    }<pos:position pos:line="26" pos:column="6"/></block></then> <else pos:line="26" pos:column="7">else <block pos:line="26" pos:column="12">{
        <comment type="line" pos:line="27" pos:column="9">// For non transparent connections  make a new tunneled CONNECT, which</comment>
        <comment type="line" pos:line="28" pos:column="9">// also sets the HttpRequest::flags::forceTunnel flag to avoid</comment>
        <comment type="line" pos:line="29" pos:column="9">// respond with "Connection Established" to the client.</comment>
        <comment type="line" pos:line="30" pos:column="9">// This fake CONNECT request required to allow use of SNI in</comment>
        <comment type="line" pos:line="31" pos:column="9">// doCallout() checks and adaptations.</comment>
        <return pos:line="32" pos:column="9">return <expr><call><name pos:line="32" pos:column="16">initiateTunneledRequest<pos:position pos:line="32" pos:column="39"/></name><argument_list pos:line="32" pos:column="39">(<argument><expr><name pos:line="32" pos:column="40">request<pos:position pos:line="32" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="49">Http<pos:position pos:line="32" pos:column="53"/></name><operator pos:line="32" pos:column="53">::<pos:position pos:line="32" pos:column="55"/></operator><name pos:line="32" pos:column="55">METHOD_CONNECT<pos:position pos:line="32" pos:column="69"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="71">"splice"<pos:position pos:line="32" pos:column="79"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="81">preservedClientData<pos:position pos:line="32" pos:column="100"/></name></expr></argument>)<pos:position pos:line="32" pos:column="101"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="102"/></return>
    }<pos:position pos:line="33" pos:column="6"/></block></else></if>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
