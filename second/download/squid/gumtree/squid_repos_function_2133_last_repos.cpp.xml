<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2133_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">htcpHexdump<pos:position pos:line="2" pos:column="12"/></name><parameter_list pos:line="2" pos:column="12">(<parameter><decl><type><specifier pos:line="2" pos:column="13">const<pos:position pos:line="2" pos:column="18"/></specifier> <name pos:line="2" pos:column="19">char<pos:position pos:line="2" pos:column="23"/></name> <modifier pos:line="2" pos:column="24">*<pos:position pos:line="2" pos:column="25"/></modifier></type><name pos:line="2" pos:column="25">tag<pos:position pos:line="2" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="30">const<pos:position pos:line="2" pos:column="35"/></specifier> <name pos:line="2" pos:column="36">char<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">s<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="45">int<pos:position pos:line="2" pos:column="48"/></name></type> <name pos:line="2" pos:column="49">sz<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="52"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:if pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">if<pos:position pos:line="4" pos:column="4"/></cpp:directive> <expr><name pos:line="4" pos:column="5">USE_HEXDUMP<pos:position pos:line="4" pos:column="16"/></name></expr></cpp:if>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name></type> <name><name pos:line="5" pos:column="10">hex<pos:position pos:line="5" pos:column="13"/></name><index pos:line="5" pos:column="13">[<expr><literal type="number" pos:line="5" pos:column="14">80<pos:position pos:line="5" pos:column="16"/></literal></expr>]<pos:position pos:line="5" pos:column="17"/></index></name></decl>;<pos:position pos:line="5" pos:column="18"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">debugs<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><literal type="number" pos:line="6" pos:column="12">31<pos:position pos:line="6" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="16">3<pos:position pos:line="6" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="19">"htcpHexdump "<pos:position pos:line="6" pos:column="33"/></literal> <operator pos:line="6" pos:column="34">&lt;&lt;<pos:position pos:line="6" pos:column="42"/></operator> <name pos:line="6" pos:column="37">tag<pos:position pos:line="6" pos:column="40"/></name></expr></argument>)<pos:position pos:line="6" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">memset<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><name pos:line="7" pos:column="12">hex<pos:position pos:line="7" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="7" pos:column="17">'\0'<pos:position pos:line="7" pos:column="21"/></literal></expr></argument>, <argument><expr><sizeof pos:line="7" pos:column="23">sizeof<argument_list pos:line="7" pos:column="29">(<argument><expr><name pos:line="7" pos:column="30">hex<pos:position pos:line="7" pos:column="33"/></name></expr></argument>)<pos:position pos:line="7" pos:column="34"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="7" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="36"/></expr_stmt>

    <for pos:line="9" pos:column="5">for <control pos:line="9" pos:column="9">(<init><decl><type><name pos:line="9" pos:column="10">int<pos:position pos:line="9" pos:column="13"/></name></type> <name pos:line="9" pos:column="14">i<pos:position pos:line="9" pos:column="15"/></name> <init pos:line="9" pos:column="16">= <expr><literal type="number" pos:line="9" pos:column="18">0<pos:position pos:line="9" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="20"/></init> <condition><expr><name pos:line="9" pos:column="21">i<pos:position pos:line="9" pos:column="22"/></name> <operator pos:line="9" pos:column="23">&lt;<pos:position pos:line="9" pos:column="27"/></operator> <name pos:line="9" pos:column="25">sz<pos:position pos:line="9" pos:column="27"/></name></expr>;<pos:position pos:line="9" pos:column="28"/></condition> <incr><expr><operator pos:line="9" pos:column="29">++<pos:position pos:line="9" pos:column="31"/></operator><name pos:line="9" pos:column="31">i<pos:position pos:line="9" pos:column="32"/></name></expr></incr>)<pos:position pos:line="9" pos:column="33"/></control> <block pos:line="9" pos:column="34">{
        <decl_stmt><decl><type><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">k<pos:position pos:line="10" pos:column="14"/></name> <init pos:line="10" pos:column="15">= <expr><name pos:line="10" pos:column="17">i<pos:position pos:line="10" pos:column="18"/></name> <operator pos:line="10" pos:column="19">%<pos:position pos:line="10" pos:column="20"/></operator> <literal type="number" pos:line="10" pos:column="21">16<pos:position pos:line="10" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="24"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">snprintf<pos:position pos:line="11" pos:column="17"/></name><argument_list pos:line="11" pos:column="17">(<argument><expr><operator pos:line="11" pos:column="18">&amp;<pos:position pos:line="11" pos:column="23"/></operator><name><name pos:line="11" pos:column="19">hex<pos:position pos:line="11" pos:column="22"/></name><index pos:line="11" pos:column="22">[<expr><name pos:line="11" pos:column="23">k<pos:position pos:line="11" pos:column="24"/></name> <operator pos:line="11" pos:column="25">*<pos:position pos:line="11" pos:column="26"/></operator> <literal type="number" pos:line="11" pos:column="27">3<pos:position pos:line="11" pos:column="28"/></literal></expr>]<pos:position pos:line="11" pos:column="29"/></index></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="31">4<pos:position pos:line="11" pos:column="32"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="34">" %02x"<pos:position pos:line="11" pos:column="41"/></literal></expr></argument>, <argument><expr><operator pos:line="11" pos:column="43">(<pos:position pos:line="11" pos:column="44"/></operator><name pos:line="11" pos:column="44">int<pos:position pos:line="11" pos:column="47"/></name><operator pos:line="11" pos:column="47">)<pos:position pos:line="11" pos:column="48"/></operator> <operator pos:line="11" pos:column="49">*<pos:position pos:line="11" pos:column="50"/></operator><operator pos:line="11" pos:column="50">(<pos:position pos:line="11" pos:column="51"/></operator><name pos:line="11" pos:column="51">s<pos:position pos:line="11" pos:column="52"/></name> <operator pos:line="11" pos:column="53">+<pos:position pos:line="11" pos:column="54"/></operator> <name pos:line="11" pos:column="55">i<pos:position pos:line="11" pos:column="56"/></name><operator pos:line="11" pos:column="56">)<pos:position pos:line="11" pos:column="57"/></operator></expr></argument>)<pos:position pos:line="11" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="59"/></expr_stmt>

        <if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">k<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">&lt;<pos:position pos:line="13" pos:column="19"/></operator> <literal type="number" pos:line="13" pos:column="17">15<pos:position pos:line="13" pos:column="19"/></literal> <operator pos:line="13" pos:column="20">&amp;&amp;<pos:position pos:line="13" pos:column="30"/></operator> <name pos:line="13" pos:column="23">i<pos:position pos:line="13" pos:column="24"/></name> <operator pos:line="13" pos:column="25">&lt;<pos:position pos:line="13" pos:column="29"/></operator> <operator pos:line="13" pos:column="27">(<pos:position pos:line="13" pos:column="28"/></operator><name pos:line="13" pos:column="28">sz<pos:position pos:line="13" pos:column="30"/></name> <operator pos:line="13" pos:column="31">-<pos:position pos:line="13" pos:column="32"/></operator> <literal type="number" pos:line="13" pos:column="33">1<pos:position pos:line="13" pos:column="34"/></literal><operator pos:line="13" pos:column="34">)<pos:position pos:line="13" pos:column="35"/></operator></expr>)<pos:position pos:line="13" pos:column="36"/></condition><then pos:line="13" pos:column="36">
            <block type="pseudo"><continue pos:line="14" pos:column="13">continue;<pos:position pos:line="14" pos:column="22"/></continue></block></then></if>

        <expr_stmt><expr><call><name pos:line="16" pos:column="9">debugs<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><literal type="number" pos:line="16" pos:column="16">31<pos:position pos:line="16" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="20">3<pos:position pos:line="16" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="23">"\t"<pos:position pos:line="16" pos:column="27"/></literal> <operator pos:line="16" pos:column="28">&lt;&lt;<pos:position pos:line="16" pos:column="36"/></operator> <name pos:line="16" pos:column="31">hex<pos:position pos:line="16" pos:column="34"/></name></expr></argument>)<pos:position pos:line="16" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="36"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="18" pos:column="9">memset<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><name pos:line="18" pos:column="16">hex<pos:position pos:line="18" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="18" pos:column="21">'\0'<pos:position pos:line="18" pos:column="25"/></literal></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="27">sizeof<argument_list pos:line="18" pos:column="33">(<argument><expr><name pos:line="18" pos:column="34">hex<pos:position pos:line="18" pos:column="37"/></name></expr></argument>)<pos:position pos:line="18" pos:column="38"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="18" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="40"/></expr_stmt>
    }<pos:position pos:line="19" pos:column="6"/></block></for>
<cpp:endif pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">endif<pos:position pos:line="20" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
