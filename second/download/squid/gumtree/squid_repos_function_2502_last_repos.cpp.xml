<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2502_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">StoreEntry<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">checkCachable<pos:position pos:line="2" pos:column="26"/></name></name><parameter_list pos:line="2" pos:column="26">()<pos:position pos:line="2" pos:column="28"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// XXX: This method is used for both memory and disk caches, but some</comment>
    <comment type="line" pos:line="5" pos:column="5">// checks are specific to disk caches. Move them to mayStartSwapOut().</comment>

    <comment type="line" pos:line="7" pos:column="5">// XXX: This method may be called several times, sometimes with different</comment>
    <comment type="line" pos:line="8" pos:column="5">// outcomes, making store_check_cachable_hist counters misleading.</comment>

    <comment type="line" pos:line="10" pos:column="5">// check this first to optimize handling of repeated calls for uncachables</comment>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><call><name pos:line="11" pos:column="9">EBIT_TEST<pos:position pos:line="11" pos:column="18"/></name><argument_list pos:line="11" pos:column="18">(<argument><expr><name pos:line="11" pos:column="19">flags<pos:position pos:line="11" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="26">RELEASE_REQUEST<pos:position pos:line="11" pos:column="41"/></name></expr></argument>)<pos:position pos:line="11" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="43"/></condition><then pos:line="11" pos:column="43"> <block pos:line="11" pos:column="44">{
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">debugs<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><literal type="number" pos:line="12" pos:column="16">20<pos:position pos:line="12" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="20">2<pos:position pos:line="12" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="23">"StoreEntry::checkCachable: NO: not cachable"<pos:position pos:line="12" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="70"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="13" pos:column="9">++<pos:position pos:line="13" pos:column="11"/></operator><name><name pos:line="13" pos:column="11">store_check_cachable_hist<pos:position pos:line="13" pos:column="36"/></name><operator pos:line="13" pos:column="36">.<pos:position pos:line="13" pos:column="37"/></operator><name pos:line="13" pos:column="37">no<pos:position pos:line="13" pos:column="39"/></name><operator pos:line="13" pos:column="39">.<pos:position pos:line="13" pos:column="40"/></operator><name pos:line="13" pos:column="40">not_entry_cachable<pos:position pos:line="13" pos:column="58"/></name></name></expr>;<pos:position pos:line="13" pos:column="59"/></expr_stmt> <comment type="line" pos:line="13" pos:column="60">// TODO: rename?</comment>
        <return pos:line="14" pos:column="9">return <expr><literal type="number" pos:line="14" pos:column="16">0<pos:position pos:line="14" pos:column="17"/></literal></expr>;<pos:position pos:line="14" pos:column="18"/></return> <comment type="line" pos:line="14" pos:column="19">// avoid rerequesting release below</comment>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>

<cpp:if pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">if<pos:position pos:line="17" pos:column="4"/></cpp:directive> <expr><name pos:line="17" pos:column="5">CACHE_ALL_METHODS<pos:position pos:line="17" pos:column="22"/></name></expr></cpp:if>

    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name><name pos:line="19" pos:column="9">mem_obj<pos:position pos:line="19" pos:column="16"/></name><operator pos:line="19" pos:column="16">-&gt;<pos:position pos:line="19" pos:column="21"/></operator><name pos:line="19" pos:column="18">method<pos:position pos:line="19" pos:column="24"/></name></name> <operator pos:line="19" pos:column="25">!=<pos:position pos:line="19" pos:column="27"/></operator> <name><name pos:line="19" pos:column="28">Http<pos:position pos:line="19" pos:column="32"/></name><operator pos:line="19" pos:column="32">::<pos:position pos:line="19" pos:column="34"/></operator><name pos:line="19" pos:column="34">METHOD_GET<pos:position pos:line="19" pos:column="44"/></name></name></expr>)<pos:position pos:line="19" pos:column="45"/></condition><then pos:line="19" pos:column="45"> <block pos:line="19" pos:column="46">{
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">debugs<pos:position pos:line="20" pos:column="15"/></name><argument_list pos:line="20" pos:column="15">(<argument><expr><literal type="number" pos:line="20" pos:column="16">20<pos:position pos:line="20" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="20">2<pos:position pos:line="20" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="23">"StoreEntry::checkCachable: NO: non-GET method"<pos:position pos:line="20" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="72"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="21" pos:column="9">++<pos:position pos:line="21" pos:column="11"/></operator><name><name pos:line="21" pos:column="11">store_check_cachable_hist<pos:position pos:line="21" pos:column="36"/></name><operator pos:line="21" pos:column="36">.<pos:position pos:line="21" pos:column="37"/></operator><name pos:line="21" pos:column="37">no<pos:position pos:line="21" pos:column="39"/></name><operator pos:line="21" pos:column="39">.<pos:position pos:line="21" pos:column="40"/></operator><name pos:line="21" pos:column="40">non_get<pos:position pos:line="21" pos:column="47"/></name></name></expr>;<pos:position pos:line="21" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="22" pos:column="6"/></block></then> <elseif pos:line="22" pos:column="7">else
<cpp:endif pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">endif<pos:position pos:line="23" pos:column="7"/></cpp:directive></cpp:endif>
        <if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">store_status<pos:position pos:line="24" pos:column="25"/></name> <operator pos:line="24" pos:column="26">==<pos:position pos:line="24" pos:column="28"/></operator> <name pos:line="24" pos:column="29">STORE_OK<pos:position pos:line="24" pos:column="37"/></name> <operator pos:line="24" pos:column="38">&amp;&amp;<pos:position pos:line="24" pos:column="48"/></operator> <call><name pos:line="24" pos:column="41">EBIT_TEST<pos:position pos:line="24" pos:column="50"/></name><argument_list pos:line="24" pos:column="50">(<argument><expr><name pos:line="24" pos:column="51">flags<pos:position pos:line="24" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="58">ENTRY_BAD_LENGTH<pos:position pos:line="24" pos:column="74"/></name></expr></argument>)<pos:position pos:line="24" pos:column="75"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="76"/></condition><then pos:line="24" pos:column="76"> <block pos:line="24" pos:column="77">{
            <expr_stmt><expr><call><name pos:line="25" pos:column="13">debugs<pos:position pos:line="25" pos:column="19"/></name><argument_list pos:line="25" pos:column="19">(<argument><expr><literal type="number" pos:line="25" pos:column="20">20<pos:position pos:line="25" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="24">2<pos:position pos:line="25" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="27">"StoreEntry::checkCachable: NO: wrong content-length"<pos:position pos:line="25" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="82"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="26" pos:column="13">++<pos:position pos:line="26" pos:column="15"/></operator><name><name pos:line="26" pos:column="15">store_check_cachable_hist<pos:position pos:line="26" pos:column="40"/></name><operator pos:line="26" pos:column="40">.<pos:position pos:line="26" pos:column="41"/></operator><name pos:line="26" pos:column="41">no<pos:position pos:line="26" pos:column="43"/></name><operator pos:line="26" pos:column="43">.<pos:position pos:line="26" pos:column="44"/></operator><name pos:line="26" pos:column="44">wrong_content_length<pos:position pos:line="26" pos:column="64"/></name></name></expr>;<pos:position pos:line="26" pos:column="65"/></expr_stmt>
        }<pos:position pos:line="27" pos:column="10"/></block></then></if></elseif> <elseif pos:line="27" pos:column="11">else <if pos:line="27" pos:column="16">if <condition pos:line="27" pos:column="19">(<expr><call><name pos:line="27" pos:column="20">EBIT_TEST<pos:position pos:line="27" pos:column="29"/></name><argument_list pos:line="27" pos:column="29">(<argument><expr><name pos:line="27" pos:column="30">flags<pos:position pos:line="27" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="37">ENTRY_NEGCACHED<pos:position pos:line="27" pos:column="52"/></name></expr></argument>)<pos:position pos:line="27" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="54"/></condition><then pos:line="27" pos:column="54"> <block pos:line="27" pos:column="55">{
            <expr_stmt><expr><call><name pos:line="28" pos:column="13">debugs<pos:position pos:line="28" pos:column="19"/></name><argument_list pos:line="28" pos:column="19">(<argument><expr><literal type="number" pos:line="28" pos:column="20">20<pos:position pos:line="28" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="24">3<pos:position pos:line="28" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="27">"StoreEntry::checkCachable: NO: negative cached"<pos:position pos:line="28" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="77"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="29" pos:column="13">++<pos:position pos:line="29" pos:column="15"/></operator><name><name pos:line="29" pos:column="15">store_check_cachable_hist<pos:position pos:line="29" pos:column="40"/></name><operator pos:line="29" pos:column="40">.<pos:position pos:line="29" pos:column="41"/></operator><name pos:line="29" pos:column="41">no<pos:position pos:line="29" pos:column="43"/></name><operator pos:line="29" pos:column="43">.<pos:position pos:line="29" pos:column="44"/></operator><name pos:line="29" pos:column="44">negative_cached<pos:position pos:line="29" pos:column="59"/></name></name></expr>;<pos:position pos:line="29" pos:column="60"/></expr_stmt>
            <return pos:line="30" pos:column="13">return <expr><literal type="number" pos:line="30" pos:column="20">0<pos:position pos:line="30" pos:column="21"/></literal></expr>;<pos:position pos:line="30" pos:column="22"/></return>           <comment type="block" pos:line="30" pos:column="33">/* avoid release call below */</comment>
        }<pos:position pos:line="31" pos:column="10"/></block></then></if></elseif> <elseif pos:line="31" pos:column="11">else <if pos:line="31" pos:column="16">if <condition pos:line="31" pos:column="19">(<expr><operator pos:line="31" pos:column="20">!<pos:position pos:line="31" pos:column="21"/></operator><name pos:line="31" pos:column="21">mem_obj<pos:position pos:line="31" pos:column="28"/></name> <operator pos:line="31" pos:column="29">||<pos:position pos:line="31" pos:column="31"/></operator> <operator pos:line="31" pos:column="32">!<pos:position pos:line="31" pos:column="33"/></operator><call><name pos:line="31" pos:column="33">getReply<pos:position pos:line="31" pos:column="41"/></name><argument_list pos:line="31" pos:column="41">()<pos:position pos:line="31" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="44"/></condition><then pos:line="31" pos:column="44"> <block pos:line="31" pos:column="45">{
            <comment type="line" pos:line="32" pos:column="13">// XXX: In bug 4131, we forgetHit() without mem_obj, so we need</comment>
            <comment type="line" pos:line="33" pos:column="13">// this segfault protection, but how can we get such a HIT?</comment>
            <expr_stmt><expr><call><name pos:line="34" pos:column="13">debugs<pos:position pos:line="34" pos:column="19"/></name><argument_list pos:line="34" pos:column="19">(<argument><expr><literal type="number" pos:line="34" pos:column="20">20<pos:position pos:line="34" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="24">2<pos:position pos:line="34" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="27">"StoreEntry::checkCachable: NO: missing parts: "<pos:position pos:line="34" pos:column="75"/></literal> <operator pos:line="34" pos:column="76">&lt;&lt;<pos:position pos:line="34" pos:column="84"/></operator> <operator pos:line="34" pos:column="79">*<pos:position pos:line="34" pos:column="80"/></operator><name pos:line="34" pos:column="80">this<pos:position pos:line="34" pos:column="84"/></name></expr></argument>)<pos:position pos:line="34" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="86"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="35" pos:column="13">++<pos:position pos:line="35" pos:column="15"/></operator><name><name pos:line="35" pos:column="15">store_check_cachable_hist<pos:position pos:line="35" pos:column="40"/></name><operator pos:line="35" pos:column="40">.<pos:position pos:line="35" pos:column="41"/></operator><name pos:line="35" pos:column="41">no<pos:position pos:line="35" pos:column="43"/></name><operator pos:line="35" pos:column="43">.<pos:position pos:line="35" pos:column="44"/></operator><name pos:line="35" pos:column="44">missing_parts<pos:position pos:line="35" pos:column="57"/></name></name></expr>;<pos:position pos:line="35" pos:column="58"/></expr_stmt>
        }<pos:position pos:line="36" pos:column="10"/></block></then></if></elseif> <elseif pos:line="36" pos:column="11">else <if pos:line="36" pos:column="16">if <condition pos:line="36" pos:column="19">(<expr><call><name pos:line="36" pos:column="20">checkTooBig<pos:position pos:line="36" pos:column="31"/></name><argument_list pos:line="36" pos:column="31">()<pos:position pos:line="36" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="34"/></condition><then pos:line="36" pos:column="34"> <block pos:line="36" pos:column="35">{
            <expr_stmt><expr><call><name pos:line="37" pos:column="13">debugs<pos:position pos:line="37" pos:column="19"/></name><argument_list pos:line="37" pos:column="19">(<argument><expr><literal type="number" pos:line="37" pos:column="20">20<pos:position pos:line="37" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="24">2<pos:position pos:line="37" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="27">"StoreEntry::checkCachable: NO: too big"<pos:position pos:line="37" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="69"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="38" pos:column="13">++<pos:position pos:line="38" pos:column="15"/></operator><name><name pos:line="38" pos:column="15">store_check_cachable_hist<pos:position pos:line="38" pos:column="40"/></name><operator pos:line="38" pos:column="40">.<pos:position pos:line="38" pos:column="41"/></operator><name pos:line="38" pos:column="41">no<pos:position pos:line="38" pos:column="43"/></name><operator pos:line="38" pos:column="43">.<pos:position pos:line="38" pos:column="44"/></operator><name pos:line="38" pos:column="44">too_big<pos:position pos:line="38" pos:column="51"/></name></name></expr>;<pos:position pos:line="38" pos:column="52"/></expr_stmt>
        }<pos:position pos:line="39" pos:column="10"/></block></then></if></elseif> <elseif pos:line="39" pos:column="11">else <if pos:line="39" pos:column="16">if <condition pos:line="39" pos:column="19">(<expr><call><name pos:line="39" pos:column="20">checkTooSmall<pos:position pos:line="39" pos:column="33"/></name><argument_list pos:line="39" pos:column="33">()<pos:position pos:line="39" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="36"/></condition><then pos:line="39" pos:column="36"> <block pos:line="39" pos:column="37">{
            <expr_stmt><expr><call><name pos:line="40" pos:column="13">debugs<pos:position pos:line="40" pos:column="19"/></name><argument_list pos:line="40" pos:column="19">(<argument><expr><literal type="number" pos:line="40" pos:column="20">20<pos:position pos:line="40" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="24">2<pos:position pos:line="40" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="27">"StoreEntry::checkCachable: NO: too small"<pos:position pos:line="40" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="71"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="41" pos:column="13">++<pos:position pos:line="41" pos:column="15"/></operator><name><name pos:line="41" pos:column="15">store_check_cachable_hist<pos:position pos:line="41" pos:column="40"/></name><operator pos:line="41" pos:column="40">.<pos:position pos:line="41" pos:column="41"/></operator><name pos:line="41" pos:column="41">no<pos:position pos:line="41" pos:column="43"/></name><operator pos:line="41" pos:column="43">.<pos:position pos:line="41" pos:column="44"/></operator><name pos:line="41" pos:column="44">too_small<pos:position pos:line="41" pos:column="53"/></name></name></expr>;<pos:position pos:line="41" pos:column="54"/></expr_stmt>
        }<pos:position pos:line="42" pos:column="10"/></block></then></if></elseif> <elseif pos:line="42" pos:column="11">else <if pos:line="42" pos:column="16">if <condition pos:line="42" pos:column="19">(<expr><call><name pos:line="42" pos:column="20">EBIT_TEST<pos:position pos:line="42" pos:column="29"/></name><argument_list pos:line="42" pos:column="29">(<argument><expr><name pos:line="42" pos:column="30">flags<pos:position pos:line="42" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="37">KEY_PRIVATE<pos:position pos:line="42" pos:column="48"/></name></expr></argument>)<pos:position pos:line="42" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="50"/></condition><then pos:line="42" pos:column="50"> <block pos:line="42" pos:column="51">{
            <expr_stmt><expr><call><name pos:line="43" pos:column="13">debugs<pos:position pos:line="43" pos:column="19"/></name><argument_list pos:line="43" pos:column="19">(<argument><expr><literal type="number" pos:line="43" pos:column="20">20<pos:position pos:line="43" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="24">3<pos:position pos:line="43" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="27">"StoreEntry::checkCachable: NO: private key"<pos:position pos:line="43" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="73"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="44" pos:column="13">++<pos:position pos:line="44" pos:column="15"/></operator><name><name pos:line="44" pos:column="15">store_check_cachable_hist<pos:position pos:line="44" pos:column="40"/></name><operator pos:line="44" pos:column="40">.<pos:position pos:line="44" pos:column="41"/></operator><name pos:line="44" pos:column="41">no<pos:position pos:line="44" pos:column="43"/></name><operator pos:line="44" pos:column="43">.<pos:position pos:line="44" pos:column="44"/></operator><name pos:line="44" pos:column="44">private_key<pos:position pos:line="44" pos:column="55"/></name></name></expr>;<pos:position pos:line="44" pos:column="56"/></expr_stmt>
        }<pos:position pos:line="45" pos:column="10"/></block></then></if></elseif> <elseif pos:line="45" pos:column="11">else <if pos:line="45" pos:column="16">if <condition pos:line="45" pos:column="19">(<expr><name pos:line="45" pos:column="20">swap_status<pos:position pos:line="45" pos:column="31"/></name> <operator pos:line="45" pos:column="32">!=<pos:position pos:line="45" pos:column="34"/></operator> <name pos:line="45" pos:column="35">SWAPOUT_NONE<pos:position pos:line="45" pos:column="47"/></name></expr>)<pos:position pos:line="45" pos:column="48"/></condition><then pos:line="45" pos:column="48"> <block pos:line="45" pos:column="49">{
            <comment type="block" pos:line="46" pos:column="13">/*
             * here we checked the swap_status because the remaining
             * cases are only relevant only if we haven't started swapping
             * out the object yet.
             */</comment>
            <return pos:line="51" pos:column="13">return <expr><literal type="number" pos:line="51" pos:column="20">1<pos:position pos:line="51" pos:column="21"/></literal></expr>;<pos:position pos:line="51" pos:column="22"/></return>
        }<pos:position pos:line="52" pos:column="10"/></block></then></if></elseif> <elseif pos:line="52" pos:column="11">else <if pos:line="52" pos:column="16">if <condition pos:line="52" pos:column="19">(<expr><call><name pos:line="52" pos:column="20">storeTooManyDiskFilesOpen<pos:position pos:line="52" pos:column="45"/></name><argument_list pos:line="52" pos:column="45">()<pos:position pos:line="52" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="48"/></condition><then pos:line="52" pos:column="48"> <block pos:line="52" pos:column="49">{
            <expr_stmt><expr><call><name pos:line="53" pos:column="13">debugs<pos:position pos:line="53" pos:column="19"/></name><argument_list pos:line="53" pos:column="19">(<argument><expr><literal type="number" pos:line="53" pos:column="20">20<pos:position pos:line="53" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="53" pos:column="24">2<pos:position pos:line="53" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="27">"StoreEntry::checkCachable: NO: too many disk files open"<pos:position pos:line="53" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="86"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="54" pos:column="13">++<pos:position pos:line="54" pos:column="15"/></operator><name><name pos:line="54" pos:column="15">store_check_cachable_hist<pos:position pos:line="54" pos:column="40"/></name><operator pos:line="54" pos:column="40">.<pos:position pos:line="54" pos:column="41"/></operator><name pos:line="54" pos:column="41">no<pos:position pos:line="54" pos:column="43"/></name><operator pos:line="54" pos:column="43">.<pos:position pos:line="54" pos:column="44"/></operator><name pos:line="54" pos:column="44">too_many_open_files<pos:position pos:line="54" pos:column="63"/></name></name></expr>;<pos:position pos:line="54" pos:column="64"/></expr_stmt>
        }<pos:position pos:line="55" pos:column="10"/></block></then></if></elseif> <elseif pos:line="55" pos:column="11">else <if pos:line="55" pos:column="16">if <condition pos:line="55" pos:column="19">(<expr><call><name pos:line="55" pos:column="20">fdNFree<pos:position pos:line="55" pos:column="27"/></name><argument_list pos:line="55" pos:column="27">()<pos:position pos:line="55" pos:column="29"/></argument_list></call> <operator pos:line="55" pos:column="30">&lt;<pos:position pos:line="55" pos:column="34"/></operator> <name pos:line="55" pos:column="32">RESERVED_FD<pos:position pos:line="55" pos:column="43"/></name></expr>)<pos:position pos:line="55" pos:column="44"/></condition><then pos:line="55" pos:column="44"> <block pos:line="55" pos:column="45">{
            <expr_stmt><expr><call><name pos:line="56" pos:column="13">debugs<pos:position pos:line="56" pos:column="19"/></name><argument_list pos:line="56" pos:column="19">(<argument><expr><literal type="number" pos:line="56" pos:column="20">20<pos:position pos:line="56" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="56" pos:column="24">2<pos:position pos:line="56" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="27">"StoreEntry::checkCachable: NO: too many FD's open"<pos:position pos:line="56" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="80"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="57" pos:column="13">++<pos:position pos:line="57" pos:column="15"/></operator><name><name pos:line="57" pos:column="15">store_check_cachable_hist<pos:position pos:line="57" pos:column="40"/></name><operator pos:line="57" pos:column="40">.<pos:position pos:line="57" pos:column="41"/></operator><name pos:line="57" pos:column="41">no<pos:position pos:line="57" pos:column="43"/></name><operator pos:line="57" pos:column="43">.<pos:position pos:line="57" pos:column="44"/></operator><name pos:line="57" pos:column="44">too_many_open_fds<pos:position pos:line="57" pos:column="61"/></name></name></expr>;<pos:position pos:line="57" pos:column="62"/></expr_stmt>
        }<pos:position pos:line="58" pos:column="10"/></block></then></if></elseif> <else pos:line="58" pos:column="11">else <block pos:line="58" pos:column="16">{
            <expr_stmt><expr><operator pos:line="59" pos:column="13">++<pos:position pos:line="59" pos:column="15"/></operator><name><name pos:line="59" pos:column="15">store_check_cachable_hist<pos:position pos:line="59" pos:column="40"/></name><operator pos:line="59" pos:column="40">.<pos:position pos:line="59" pos:column="41"/></operator><name pos:line="59" pos:column="41">yes<pos:position pos:line="59" pos:column="44"/></name><operator pos:line="59" pos:column="44">.<pos:position pos:line="59" pos:column="45"/></operator><name pos:line="59" pos:column="45">Default<pos:position pos:line="59" pos:column="52"/></name></name></expr>;<pos:position pos:line="59" pos:column="53"/></expr_stmt>
            <return pos:line="60" pos:column="13">return <expr><literal type="number" pos:line="60" pos:column="20">1<pos:position pos:line="60" pos:column="21"/></literal></expr>;<pos:position pos:line="60" pos:column="22"/></return>
        }<pos:position pos:line="61" pos:column="10"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="63" pos:column="5">releaseRequest<pos:position pos:line="63" pos:column="19"/></name><argument_list pos:line="63" pos:column="19">()<pos:position pos:line="63" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="22"/></expr_stmt>
    <return pos:line="64" pos:column="5">return <expr><literal type="number" pos:line="64" pos:column="12">0<pos:position pos:line="64" pos:column="13"/></literal></expr>;<pos:position pos:line="64" pos:column="14"/></return>
}<pos:position pos:line="65" pos:column="2"/></block></function></unit>
