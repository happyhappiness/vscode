<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7467_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Security<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">PeerOptions<pos:position pos:line="2" pos:column="22"/></name><operator pos:line="2" pos:column="22">::<pos:position pos:line="2" pos:column="24"/></operator><name pos:line="2" pos:column="24">parseOptions<pos:position pos:line="2" pos:column="36"/></name></name><parameter_list pos:line="2" pos:column="36">()<pos:position pos:line="2" pos:column="38"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:if pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">if<pos:position pos:line="4" pos:column="4"/></cpp:directive> <expr><name pos:line="4" pos:column="5">USE_OPENSSL<pos:position pos:line="4" pos:column="16"/></name></expr></cpp:if>
    <decl_stmt><decl><type><name><operator pos:line="5" pos:column="5">::<pos:position pos:line="5" pos:column="7"/></operator><name pos:line="5" pos:column="7">Parser<pos:position pos:line="5" pos:column="13"/></name><operator pos:line="5" pos:column="13">::<pos:position pos:line="5" pos:column="15"/></operator><name pos:line="5" pos:column="15">Tokenizer<pos:position pos:line="5" pos:column="24"/></name></name></type> <name pos:line="5" pos:column="25">tok<pos:position pos:line="5" pos:column="28"/></name><argument_list pos:line="5" pos:column="28">(<argument><expr><name pos:line="5" pos:column="29">sslOptions<pos:position pos:line="5" pos:column="39"/></name></expr></argument>)<pos:position pos:line="5" pos:column="40"/></argument_list></decl>;<pos:position pos:line="5" pos:column="41"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">long<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">op<pos:position pos:line="6" pos:column="12"/></name> <init pos:line="6" pos:column="13">= <expr><literal type="number" pos:line="6" pos:column="15">0<pos:position pos:line="6" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>

    <while pos:line="8" pos:column="5">while <condition pos:line="8" pos:column="11">(<expr><operator pos:line="8" pos:column="12">!<pos:position pos:line="8" pos:column="13"/></operator><call><name><name pos:line="8" pos:column="13">tok<pos:position pos:line="8" pos:column="16"/></name><operator pos:line="8" pos:column="16">.<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="17">atEnd<pos:position pos:line="8" pos:column="22"/></name></name><argument_list pos:line="8" pos:column="22">()<pos:position pos:line="8" pos:column="24"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="25"/></condition> <block pos:line="8" pos:column="26">{
        <enum pos:line="9" pos:column="9">enum <block pos:line="9" pos:column="14">{
            <decl><name pos:line="10" pos:column="13">MODE_ADD<pos:position pos:line="10" pos:column="21"/></name></decl>, <decl><name pos:line="10" pos:column="23">MODE_REMOVE<pos:position pos:line="10" pos:column="34"/></name></decl>
        }<pos:position pos:line="11" pos:column="10"/></block> <decl><name pos:line="11" pos:column="11">mode<pos:position pos:line="11" pos:column="15"/></name></decl>;<pos:position pos:line="11" pos:column="16"/></enum>

        <if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><call><name><name pos:line="13" pos:column="13">tok<pos:position pos:line="13" pos:column="16"/></name><operator pos:line="13" pos:column="16">.<pos:position pos:line="13" pos:column="17"/></operator><name pos:line="13" pos:column="17">skip<pos:position pos:line="13" pos:column="21"/></name></name><argument_list pos:line="13" pos:column="21">(<argument><expr><literal type="char" pos:line="13" pos:column="22">'-'<pos:position pos:line="13" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="26"/></argument_list></call> <operator pos:line="13" pos:column="27">||<pos:position pos:line="13" pos:column="29"/></operator> <call><name><name pos:line="13" pos:column="30">tok<pos:position pos:line="13" pos:column="33"/></name><operator pos:line="13" pos:column="33">.<pos:position pos:line="13" pos:column="34"/></operator><name pos:line="13" pos:column="34">skip<pos:position pos:line="13" pos:column="38"/></name></name><argument_list pos:line="13" pos:column="38">(<argument><expr><literal type="char" pos:line="13" pos:column="39">'!'<pos:position pos:line="13" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="44"/></condition><then pos:line="13" pos:column="44">
            <block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="13">mode<pos:position pos:line="14" pos:column="17"/></name> <operator pos:line="14" pos:column="18">=<pos:position pos:line="14" pos:column="19"/></operator> <name pos:line="14" pos:column="20">MODE_REMOVE<pos:position pos:line="14" pos:column="31"/></name></expr>;<pos:position pos:line="14" pos:column="32"/></expr_stmt></block></then>
        <else pos:line="15" pos:column="9">else <block pos:line="15" pos:column="14">{
            <expr_stmt><expr><operator pos:line="16" pos:column="13">(<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="14">void<pos:position pos:line="16" pos:column="18"/></name><operator pos:line="16" pos:column="18">)<pos:position pos:line="16" pos:column="19"/></operator><call><name><name pos:line="16" pos:column="19">tok<pos:position pos:line="16" pos:column="22"/></name><operator pos:line="16" pos:column="22">.<pos:position pos:line="16" pos:column="23"/></operator><name pos:line="16" pos:column="23">skip<pos:position pos:line="16" pos:column="27"/></name></name><argument_list pos:line="16" pos:column="27">(<argument><expr><literal type="char" pos:line="16" pos:column="28">'+'<pos:position pos:line="16" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="33"/></expr_stmt> <comment type="line" pos:line="16" pos:column="34">// default action is add. ignore if missing operator</comment>
            <expr_stmt><expr><name pos:line="17" pos:column="13">mode<pos:position pos:line="17" pos:column="17"/></name> <operator pos:line="17" pos:column="18">=<pos:position pos:line="17" pos:column="19"/></operator> <name pos:line="17" pos:column="20">MODE_ADD<pos:position pos:line="17" pos:column="28"/></name></expr>;<pos:position pos:line="17" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="18" pos:column="10"/></block></else></if>

        <decl_stmt><decl><specifier pos:line="20" pos:column="9">static<pos:position pos:line="20" pos:column="15"/></specifier> <type><specifier pos:line="20" pos:column="16">const<pos:position pos:line="20" pos:column="21"/></specifier> <name pos:line="20" pos:column="22">CharacterSet<pos:position pos:line="20" pos:column="34"/></name></type> <name pos:line="20" pos:column="35">optChars<pos:position pos:line="20" pos:column="43"/></name> <init pos:line="20" pos:column="44">= <expr><call><name pos:line="20" pos:column="46">CharacterSet<pos:position pos:line="20" pos:column="58"/></name><argument_list pos:line="20" pos:column="58">(<argument><expr><literal type="string" pos:line="20" pos:column="59">"TLS-option"<pos:position pos:line="20" pos:column="71"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="73">"_"<pos:position pos:line="20" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="77"/></argument_list></call> <operator pos:line="20" pos:column="78">+<pos:position pos:line="20" pos:column="79"/></operator> <name><name pos:line="20" pos:column="80">CharacterSet<pos:position pos:line="20" pos:column="92"/></name><operator pos:line="20" pos:column="92">::<pos:position pos:line="20" pos:column="94"/></operator><name pos:line="20" pos:column="94">ALPHA<pos:position pos:line="20" pos:column="99"/></name></name> <operator pos:line="20" pos:column="100">+<pos:position pos:line="20" pos:column="101"/></operator> <name><name pos:line="20" pos:column="102">CharacterSet<pos:position pos:line="20" pos:column="114"/></name><operator pos:line="20" pos:column="114">::<pos:position pos:line="20" pos:column="116"/></operator><name pos:line="20" pos:column="116">DIGIT<pos:position pos:line="20" pos:column="121"/></name></name></expr></init></decl>;<pos:position pos:line="20" pos:column="122"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="21" pos:column="9">int64_t<pos:position pos:line="21" pos:column="16"/></name></type> <name pos:line="21" pos:column="17">hex<pos:position pos:line="21" pos:column="20"/></name> <init pos:line="21" pos:column="21">= <expr><literal type="number" pos:line="21" pos:column="23">0<pos:position pos:line="21" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="21" pos:column="25"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="22" pos:column="9">SBuf<pos:position pos:line="22" pos:column="13"/></name></type> <name pos:line="22" pos:column="14">option<pos:position pos:line="22" pos:column="20"/></name></decl>;<pos:position pos:line="22" pos:column="21"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="23" pos:column="9">long<pos:position pos:line="23" pos:column="13"/></name></type> <name pos:line="23" pos:column="14">value<pos:position pos:line="23" pos:column="19"/></name> <init pos:line="23" pos:column="20">= <expr><literal type="number" pos:line="23" pos:column="22">0<pos:position pos:line="23" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="23" pos:column="24"/></decl_stmt>

        <comment type="line" pos:line="25" pos:column="9">// Bug 4429: identify the full option name before determining text or numeric</comment>
        <if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><call><name><name pos:line="26" pos:column="13">tok<pos:position pos:line="26" pos:column="16"/></name><operator pos:line="26" pos:column="16">.<pos:position pos:line="26" pos:column="17"/></operator><name pos:line="26" pos:column="17">prefix<pos:position pos:line="26" pos:column="23"/></name></name><argument_list pos:line="26" pos:column="23">(<argument><expr><name pos:line="26" pos:column="24">option<pos:position pos:line="26" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="32">optChars<pos:position pos:line="26" pos:column="40"/></name></expr></argument>)<pos:position pos:line="26" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="42"/></condition><then pos:line="26" pos:column="42"> <block pos:line="26" pos:column="43">{

            <comment type="line" pos:line="28" pos:column="13">// find the named option in our supported set</comment>
            <for pos:line="29" pos:column="13">for <control pos:line="29" pos:column="17">(<init><decl><type><name><name pos:line="29" pos:column="18">struct<pos:position pos:line="29" pos:column="24"/></name> <name pos:line="29" pos:column="25">ssl_option<pos:position pos:line="29" pos:column="35"/></name></name> <modifier pos:line="29" pos:column="36">*<pos:position pos:line="29" pos:column="37"/></modifier><name pos:line="29" pos:column="37">opttmp<pos:position pos:line="29" pos:column="43"/></name></type> <init pos:line="29" pos:column="44">= <expr><name pos:line="29" pos:column="46">ssl_options<pos:position pos:line="29" pos:column="57"/></name></expr></init></decl>;<pos:position pos:line="29" pos:column="58"/></init> <condition><expr><name><name pos:line="29" pos:column="59">opttmp<pos:position pos:line="29" pos:column="65"/></name><operator pos:line="29" pos:column="65">-&gt;<pos:position pos:line="29" pos:column="70"/></operator><name pos:line="29" pos:column="67">name<pos:position pos:line="29" pos:column="71"/></name></name></expr>;<pos:position pos:line="29" pos:column="72"/></condition> <incr><expr><operator pos:line="29" pos:column="73">++<pos:position pos:line="29" pos:column="75"/></operator><name pos:line="29" pos:column="75">opttmp<pos:position pos:line="29" pos:column="81"/></name></expr></incr>)<pos:position pos:line="29" pos:column="82"/></control> <block pos:line="29" pos:column="83">{
                <if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><call><name><name pos:line="30" pos:column="21">option<pos:position pos:line="30" pos:column="27"/></name><operator pos:line="30" pos:column="27">.<pos:position pos:line="30" pos:column="28"/></operator><name pos:line="30" pos:column="28">cmp<pos:position pos:line="30" pos:column="31"/></name></name><argument_list pos:line="30" pos:column="31">(<argument><expr><name><name pos:line="30" pos:column="32">opttmp<pos:position pos:line="30" pos:column="38"/></name><operator pos:line="30" pos:column="38">-&gt;<pos:position pos:line="30" pos:column="43"/></operator><name pos:line="30" pos:column="40">name<pos:position pos:line="30" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="45"/></argument_list></call> <operator pos:line="30" pos:column="46">==<pos:position pos:line="30" pos:column="48"/></operator> <literal type="number" pos:line="30" pos:column="49">0<pos:position pos:line="30" pos:column="50"/></literal></expr>)<pos:position pos:line="30" pos:column="51"/></condition><then pos:line="30" pos:column="51"> <block pos:line="30" pos:column="52">{
                    <expr_stmt><expr><name pos:line="31" pos:column="21">value<pos:position pos:line="31" pos:column="26"/></name> <operator pos:line="31" pos:column="27">=<pos:position pos:line="31" pos:column="28"/></operator> <name><name pos:line="31" pos:column="29">opttmp<pos:position pos:line="31" pos:column="35"/></name><operator pos:line="31" pos:column="35">-&gt;<pos:position pos:line="31" pos:column="40"/></operator><name pos:line="31" pos:column="37">value<pos:position pos:line="31" pos:column="42"/></name></name></expr>;<pos:position pos:line="31" pos:column="43"/></expr_stmt>
                    <break pos:line="32" pos:column="21">break;<pos:position pos:line="32" pos:column="27"/></break>
                }<pos:position pos:line="33" pos:column="18"/></block></then></if>
            }<pos:position pos:line="34" pos:column="14"/></block></for>

            <comment type="line" pos:line="36" pos:column="13">// Special case.. hex specification</comment>
            <decl_stmt><decl><type><name><operator pos:line="37" pos:column="13">::<pos:position pos:line="37" pos:column="15"/></operator><name pos:line="37" pos:column="15">Parser<pos:position pos:line="37" pos:column="21"/></name><operator pos:line="37" pos:column="21">::<pos:position pos:line="37" pos:column="23"/></operator><name pos:line="37" pos:column="23">Tokenizer<pos:position pos:line="37" pos:column="32"/></name></name></type> <name pos:line="37" pos:column="33">tmp<pos:position pos:line="37" pos:column="36"/></name><argument_list pos:line="37" pos:column="36">(<argument><expr><name pos:line="37" pos:column="37">option<pos:position pos:line="37" pos:column="43"/></name></expr></argument>)<pos:position pos:line="37" pos:column="44"/></argument_list></decl>;<pos:position pos:line="37" pos:column="45"/></decl_stmt>
            <if pos:line="38" pos:column="13">if <condition pos:line="38" pos:column="16">(<expr><operator pos:line="38" pos:column="17">!<pos:position pos:line="38" pos:column="18"/></operator><name pos:line="38" pos:column="18">value<pos:position pos:line="38" pos:column="23"/></name> <operator pos:line="38" pos:column="24">&amp;&amp;<pos:position pos:line="38" pos:column="34"/></operator> <call><name><name pos:line="38" pos:column="27">tmp<pos:position pos:line="38" pos:column="30"/></name><operator pos:line="38" pos:column="30">.<pos:position pos:line="38" pos:column="31"/></operator><name pos:line="38" pos:column="31">int64<pos:position pos:line="38" pos:column="36"/></name></name><argument_list pos:line="38" pos:column="36">(<argument><expr><name pos:line="38" pos:column="37">hex<pos:position pos:line="38" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="42">16<pos:position pos:line="38" pos:column="44"/></literal></expr></argument>, <argument><expr><literal type="boolean" pos:line="38" pos:column="46">false<pos:position pos:line="38" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="52"/></argument_list></call> <operator pos:line="38" pos:column="53">&amp;&amp;<pos:position pos:line="38" pos:column="63"/></operator> <call><name><name pos:line="38" pos:column="56">tmp<pos:position pos:line="38" pos:column="59"/></name><operator pos:line="38" pos:column="59">.<pos:position pos:line="38" pos:column="60"/></operator><name pos:line="38" pos:column="60">atEnd<pos:position pos:line="38" pos:column="65"/></name></name><argument_list pos:line="38" pos:column="65">()<pos:position pos:line="38" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="68"/></condition><then pos:line="38" pos:column="68"> <block pos:line="38" pos:column="69">{
                <expr_stmt><expr><name pos:line="39" pos:column="17">value<pos:position pos:line="39" pos:column="22"/></name> <operator pos:line="39" pos:column="23">=<pos:position pos:line="39" pos:column="24"/></operator> <name pos:line="39" pos:column="25">hex<pos:position pos:line="39" pos:column="28"/></name></expr>;<pos:position pos:line="39" pos:column="29"/></expr_stmt>
            }<pos:position pos:line="40" pos:column="14"/></block></then></if>
        }<pos:position pos:line="41" pos:column="10"/></block></then></if>

        <if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><name pos:line="43" pos:column="13">value<pos:position pos:line="43" pos:column="18"/></name></expr>)<pos:position pos:line="43" pos:column="19"/></condition><then pos:line="43" pos:column="19"> <block pos:line="43" pos:column="20">{
            <switch pos:line="44" pos:column="13">switch <condition pos:line="44" pos:column="20">(<expr><name pos:line="44" pos:column="21">mode<pos:position pos:line="44" pos:column="25"/></name></expr>)<pos:position pos:line="44" pos:column="26"/></condition> <block pos:line="44" pos:column="27">{
            <case pos:line="45" pos:column="13">case <expr><name pos:line="45" pos:column="18">MODE_ADD<pos:position pos:line="45" pos:column="26"/></name></expr>:<pos:position pos:line="45" pos:column="27"/></case>
                <expr_stmt><expr><name pos:line="46" pos:column="17">op<pos:position pos:line="46" pos:column="19"/></name> <operator pos:line="46" pos:column="20">|=<pos:position pos:line="46" pos:column="22"/></operator> <name pos:line="46" pos:column="23">value<pos:position pos:line="46" pos:column="28"/></name></expr>;<pos:position pos:line="46" pos:column="29"/></expr_stmt>
                <break pos:line="47" pos:column="17">break;<pos:position pos:line="47" pos:column="23"/></break>
            <case pos:line="48" pos:column="13">case <expr><name pos:line="48" pos:column="18">MODE_REMOVE<pos:position pos:line="48" pos:column="29"/></name></expr>:<pos:position pos:line="48" pos:column="30"/></case>
                <expr_stmt><expr><name pos:line="49" pos:column="17">op<pos:position pos:line="49" pos:column="19"/></name> <operator pos:line="49" pos:column="20">&amp;=<pos:position pos:line="49" pos:column="26"/></operator> <operator pos:line="49" pos:column="23">~<pos:position pos:line="49" pos:column="24"/></operator><name pos:line="49" pos:column="24">value<pos:position pos:line="49" pos:column="29"/></name></expr>;<pos:position pos:line="49" pos:column="30"/></expr_stmt>
                <break pos:line="50" pos:column="17">break;<pos:position pos:line="50" pos:column="23"/></break>
            }<pos:position pos:line="51" pos:column="14"/></block></switch>
        }<pos:position pos:line="52" pos:column="10"/></block></then> <else pos:line="52" pos:column="11">else <block pos:line="52" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="53" pos:column="13">debugs<pos:position pos:line="53" pos:column="19"/></name><argument_list pos:line="53" pos:column="19">(<argument><expr><literal type="number" pos:line="53" pos:column="20">83<pos:position pos:line="53" pos:column="22"/></literal></expr></argument>, <argument><expr><call><name pos:line="53" pos:column="24">DBG_PARSE_NOTE<pos:position pos:line="53" pos:column="38"/></name><argument_list pos:line="53" pos:column="38">(<argument><expr><literal type="number" pos:line="53" pos:column="39">1<pos:position pos:line="53" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="41"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="43">"ERROR: Unknown TLS option "<pos:position pos:line="53" pos:column="71"/></literal> <operator pos:line="53" pos:column="72">&lt;&lt;<pos:position pos:line="53" pos:column="80"/></operator> <name pos:line="53" pos:column="75">option<pos:position pos:line="53" pos:column="81"/></name></expr></argument>)<pos:position pos:line="53" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="83"/></expr_stmt>
        }<pos:position pos:line="54" pos:column="10"/></block></else></if>

        <decl_stmt><decl><specifier pos:line="56" pos:column="9">static<pos:position pos:line="56" pos:column="15"/></specifier> <type><specifier pos:line="56" pos:column="16">const<pos:position pos:line="56" pos:column="21"/></specifier> <name pos:line="56" pos:column="22">CharacterSet<pos:position pos:line="56" pos:column="34"/></name></type> <name pos:line="56" pos:column="35">delims<pos:position pos:line="56" pos:column="41"/></name><argument_list pos:line="56" pos:column="41">(<argument><expr><literal type="string" pos:line="56" pos:column="42">"TLS-option-delim"<pos:position pos:line="56" pos:column="60"/></literal></expr></argument>,<argument><expr><literal type="string" pos:line="56" pos:column="61">":,"<pos:position pos:line="56" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="66"/></argument_list></decl>;<pos:position pos:line="56" pos:column="67"/></decl_stmt>
        <if pos:line="57" pos:column="9">if <condition pos:line="57" pos:column="12">(<expr><operator pos:line="57" pos:column="13">!<pos:position pos:line="57" pos:column="14"/></operator><call><name><name pos:line="57" pos:column="14">tok<pos:position pos:line="57" pos:column="17"/></name><operator pos:line="57" pos:column="17">.<pos:position pos:line="57" pos:column="18"/></operator><name pos:line="57" pos:column="18">skipAll<pos:position pos:line="57" pos:column="25"/></name></name><argument_list pos:line="57" pos:column="25">(<argument><expr><name pos:line="57" pos:column="26">delims<pos:position pos:line="57" pos:column="32"/></name></expr></argument>)<pos:position pos:line="57" pos:column="33"/></argument_list></call> <operator pos:line="57" pos:column="34">&amp;&amp;<pos:position pos:line="57" pos:column="44"/></operator> <operator pos:line="57" pos:column="37">!<pos:position pos:line="57" pos:column="38"/></operator><call><name><name pos:line="57" pos:column="38">tok<pos:position pos:line="57" pos:column="41"/></name><operator pos:line="57" pos:column="41">.<pos:position pos:line="57" pos:column="42"/></operator><name pos:line="57" pos:column="42">atEnd<pos:position pos:line="57" pos:column="47"/></name></name><argument_list pos:line="57" pos:column="47">()<pos:position pos:line="57" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="57" pos:column="50"/></condition><then pos:line="57" pos:column="50"> <block pos:line="57" pos:column="51">{
            <expr_stmt><expr><call><name pos:line="58" pos:column="13">fatalf<pos:position pos:line="58" pos:column="19"/></name><argument_list pos:line="58" pos:column="19">(<argument><expr><literal type="string" pos:line="58" pos:column="20">"Unknown TLS option '"<pos:position pos:line="58" pos:column="42"/></literal> <name pos:line="58" pos:column="43">SQUIDSBUFPH<pos:position pos:line="58" pos:column="54"/></name> <literal type="string" pos:line="58" pos:column="55">"'"<pos:position pos:line="58" pos:column="58"/></literal></expr></argument>, <argument><expr><call><name pos:line="58" pos:column="60">SQUIDSBUFPRINT<pos:position pos:line="58" pos:column="74"/></name><argument_list pos:line="58" pos:column="74">(<argument><expr><call><name><name pos:line="58" pos:column="75">tok<pos:position pos:line="58" pos:column="78"/></name><operator pos:line="58" pos:column="78">.<pos:position pos:line="58" pos:column="79"/></operator><name pos:line="58" pos:column="79">remaining<pos:position pos:line="58" pos:column="88"/></name></name><argument_list pos:line="58" pos:column="88">()<pos:position pos:line="58" pos:column="90"/></argument_list></call></expr></argument>)<pos:position pos:line="58" pos:column="91"/></argument_list></call></expr></argument>)<pos:position pos:line="58" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="93"/></expr_stmt>
        }<pos:position pos:line="59" pos:column="10"/></block></then></if>

    }<pos:position pos:line="61" pos:column="6"/></block></while>

<cpp:if pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">if<pos:position pos:line="63" pos:column="4"/></cpp:directive> <expr><name pos:line="63" pos:column="5">SSL_OP_NO_SSLv2<pos:position pos:line="63" pos:column="20"/></name></expr></cpp:if>
    <comment type="line" pos:line="64" pos:column="5">// compliance with RFC 6176: Prohibiting Secure Sockets Layer (SSL) Version 2.0</comment>
    <expr_stmt><expr><name pos:line="65" pos:column="5">op<pos:position pos:line="65" pos:column="7"/></name> <operator pos:line="65" pos:column="8">=<pos:position pos:line="65" pos:column="9"/></operator> <name pos:line="65" pos:column="10">op<pos:position pos:line="65" pos:column="12"/></name> <operator pos:line="65" pos:column="13">|<pos:position pos:line="65" pos:column="14"/></operator> <name pos:line="65" pos:column="15">SSL_OP_NO_SSLv2<pos:position pos:line="65" pos:column="30"/></name></expr>;<pos:position pos:line="65" pos:column="31"/></expr_stmt>
<cpp:endif pos:line="66" pos:column="1">#<cpp:directive pos:line="66" pos:column="2">endif<pos:position pos:line="66" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><name pos:line="67" pos:column="5">parsedOptions<pos:position pos:line="67" pos:column="18"/></name> <operator pos:line="67" pos:column="19">=<pos:position pos:line="67" pos:column="20"/></operator> <name pos:line="67" pos:column="21">op<pos:position pos:line="67" pos:column="23"/></name></expr>;<pos:position pos:line="67" pos:column="24"/></expr_stmt>

<cpp:elif pos:line="69" pos:column="1">#<cpp:directive pos:line="69" pos:column="2">elif<pos:position pos:line="69" pos:column="6"/></cpp:directive> <expr><name pos:line="69" pos:column="7">USE_GNUTLS<pos:position pos:line="69" pos:column="17"/></name></expr></cpp:elif>
    <if pos:line="70" pos:column="5">if <condition pos:line="70" pos:column="8">(<expr><call><name><name pos:line="70" pos:column="9">sslOptions<pos:position pos:line="70" pos:column="19"/></name><operator pos:line="70" pos:column="19">.<pos:position pos:line="70" pos:column="20"/></operator><name pos:line="70" pos:column="20">isEmpty<pos:position pos:line="70" pos:column="27"/></name></name><argument_list pos:line="70" pos:column="27">()<pos:position pos:line="70" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="70" pos:column="30"/></condition><then pos:line="70" pos:column="30"> <block pos:line="70" pos:column="31">{
        <expr_stmt><expr><call><name><name pos:line="71" pos:column="9">parsedOptions<pos:position pos:line="71" pos:column="22"/></name><operator pos:line="71" pos:column="22">.<pos:position pos:line="71" pos:column="23"/></operator><name pos:line="71" pos:column="23">reset<pos:position pos:line="71" pos:column="28"/></name></name><argument_list pos:line="71" pos:column="28">()<pos:position pos:line="71" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="31"/></expr_stmt>
        <return pos:line="72" pos:column="9">return;<pos:position pos:line="72" pos:column="16"/></return>
    }<pos:position pos:line="73" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><specifier pos:line="75" pos:column="5">const<pos:position pos:line="75" pos:column="10"/></specifier> <name pos:line="75" pos:column="11">char<pos:position pos:line="75" pos:column="15"/></name> <modifier pos:line="75" pos:column="16">*<pos:position pos:line="75" pos:column="17"/></modifier></type><name pos:line="75" pos:column="17">err<pos:position pos:line="75" pos:column="20"/></name> <init pos:line="75" pos:column="21">= <expr><literal type="null" pos:line="75" pos:column="23">nullptr<pos:position pos:line="75" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="75" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="76" pos:column="5">const<pos:position pos:line="76" pos:column="10"/></specifier> <name pos:line="76" pos:column="11">char<pos:position pos:line="76" pos:column="15"/></name> <modifier pos:line="76" pos:column="16">*<pos:position pos:line="76" pos:column="17"/></modifier></type><name pos:line="76" pos:column="17">priorities<pos:position pos:line="76" pos:column="27"/></name> <init pos:line="76" pos:column="28">= <expr><call><name><name pos:line="76" pos:column="30">sslOptions<pos:position pos:line="76" pos:column="40"/></name><operator pos:line="76" pos:column="40">.<pos:position pos:line="76" pos:column="41"/></operator><name pos:line="76" pos:column="41">c_str<pos:position pos:line="76" pos:column="46"/></name></name><argument_list pos:line="76" pos:column="46">()<pos:position pos:line="76" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="76" pos:column="49"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="77" pos:column="5">gnutls_priority_t<pos:position pos:line="77" pos:column="22"/></name></type> <name pos:line="77" pos:column="23">op<pos:position pos:line="77" pos:column="25"/></name></decl>;<pos:position pos:line="77" pos:column="26"/></decl_stmt>
    <if pos:line="78" pos:column="5">if <condition pos:line="78" pos:column="8">(<expr><call><name pos:line="78" pos:column="9">gnutls_priority_init<pos:position pos:line="78" pos:column="29"/></name><argument_list pos:line="78" pos:column="29">(<argument><expr><operator pos:line="78" pos:column="30">&amp;<pos:position pos:line="78" pos:column="35"/></operator><name pos:line="78" pos:column="31">op<pos:position pos:line="78" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="35">priorities<pos:position pos:line="78" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="78" pos:column="47">&amp;<pos:position pos:line="78" pos:column="52"/></operator><name pos:line="78" pos:column="48">err<pos:position pos:line="78" pos:column="51"/></name></expr></argument>)<pos:position pos:line="78" pos:column="52"/></argument_list></call> <operator pos:line="78" pos:column="53">!=<pos:position pos:line="78" pos:column="55"/></operator> <name pos:line="78" pos:column="56">GNUTLS_E_SUCCESS<pos:position pos:line="78" pos:column="72"/></name></expr>)<pos:position pos:line="78" pos:column="73"/></condition><then pos:line="78" pos:column="73"> <block pos:line="78" pos:column="74">{
        <expr_stmt><expr><call><name pos:line="79" pos:column="9">fatalf<pos:position pos:line="79" pos:column="15"/></name><argument_list pos:line="79" pos:column="15">(<argument><expr><literal type="string" pos:line="79" pos:column="16">"Unknown TLS option '%s'"<pos:position pos:line="79" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="79" pos:column="43">err<pos:position pos:line="79" pos:column="46"/></name></expr></argument>)<pos:position pos:line="79" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="80" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="81" pos:column="5">parsedOptions<pos:position pos:line="81" pos:column="18"/></name> <operator pos:line="81" pos:column="19">=<pos:position pos:line="81" pos:column="20"/></operator> <call><name><name pos:line="81" pos:column="21">Security<pos:position pos:line="81" pos:column="29"/></name><operator pos:line="81" pos:column="29">::<pos:position pos:line="81" pos:column="31"/></operator><name pos:line="81" pos:column="31">ParsedOptions<pos:position pos:line="81" pos:column="44"/></name></name><argument_list pos:line="81" pos:column="44">(<argument><expr><name pos:line="81" pos:column="45">op<pos:position pos:line="81" pos:column="47"/></name></expr></argument>, <argument><expr><lambda><capture pos:line="81" pos:column="49">[]<pos:position pos:line="81" pos:column="51"/></capture><parameter_list pos:line="81" pos:column="51">(<parameter><decl><type><name pos:line="81" pos:column="52">gnutls_priority_t<pos:position pos:line="81" pos:column="69"/></name></type> <name pos:line="81" pos:column="70">p<pos:position pos:line="81" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="81" pos:column="72"/></parameter_list> <block pos:line="81" pos:column="73">{
        <expr_stmt><expr><call><name pos:line="82" pos:column="9">debugs<pos:position pos:line="82" pos:column="15"/></name><argument_list pos:line="82" pos:column="15">(<argument><expr><literal type="number" pos:line="82" pos:column="16">83<pos:position pos:line="82" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="82" pos:column="20">5<pos:position pos:line="82" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="82" pos:column="23">"gnutls_priority_deinit p="<pos:position pos:line="82" pos:column="50"/></literal> <operator pos:line="82" pos:column="51">&lt;&lt;<pos:position pos:line="82" pos:column="59"/></operator> <operator pos:line="82" pos:column="54">(<pos:position pos:line="82" pos:column="55"/></operator><name pos:line="82" pos:column="55">void<pos:position pos:line="82" pos:column="59"/></name><operator pos:line="82" pos:column="59">*<pos:position pos:line="82" pos:column="60"/></operator><operator pos:line="82" pos:column="60">)<pos:position pos:line="82" pos:column="61"/></operator><name pos:line="82" pos:column="61">p<pos:position pos:line="82" pos:column="62"/></name></expr></argument>)<pos:position pos:line="82" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="64"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="83" pos:column="9">gnutls_priority_deinit<pos:position pos:line="83" pos:column="31"/></name><argument_list pos:line="83" pos:column="31">(<argument><expr><name pos:line="83" pos:column="32">p<pos:position pos:line="83" pos:column="33"/></name></expr></argument>)<pos:position pos:line="83" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="84" pos:column="6"/></block></lambda></expr></argument>)<pos:position pos:line="84" pos:column="7"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="8"/></expr_stmt>
<cpp:endif pos:line="85" pos:column="1">#<cpp:directive pos:line="85" pos:column="2">endif<pos:position pos:line="85" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="86" pos:column="2"/></block></function></unit>
