<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3320_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">memNodeWriteComplete<pos:position pos:line="2" pos:column="21"/></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><name pos:line="2" pos:column="22">void<pos:position pos:line="2" pos:column="26"/></name><modifier pos:line="2" pos:column="26">*<pos:position pos:line="2" pos:column="27"/></modifier></type> <name pos:line="2" pos:column="28">d<pos:position pos:line="2" pos:column="29"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="30"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">mem_node<pos:position pos:line="4" pos:column="13"/></name><modifier pos:line="4" pos:column="13">*<pos:position pos:line="4" pos:column="14"/></modifier></type> <name pos:line="4" pos:column="15">n<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><operator pos:line="4" pos:column="19">(<pos:position pos:line="4" pos:column="20"/></operator><name pos:line="4" pos:column="20">mem_node<pos:position pos:line="4" pos:column="28"/></name><operator pos:line="4" pos:column="28">*<pos:position pos:line="4" pos:column="29"/></operator><operator pos:line="4" pos:column="29">)<pos:position pos:line="4" pos:column="30"/></operator><operator pos:line="4" pos:column="30">(<pos:position pos:line="4" pos:column="31"/></operator><operator pos:line="4" pos:column="31">(<pos:position pos:line="4" pos:column="32"/></operator><name pos:line="4" pos:column="32">char<pos:position pos:line="4" pos:column="36"/></name><operator pos:line="4" pos:column="36">*<pos:position pos:line="4" pos:column="37"/></operator><operator pos:line="4" pos:column="37">)<pos:position pos:line="4" pos:column="38"/></operator><name pos:line="4" pos:column="38">d<pos:position pos:line="4" pos:column="39"/></name> <operator pos:line="4" pos:column="40">-<pos:position pos:line="4" pos:column="41"/></operator> <name pos:line="4" pos:column="42">_mem_node_data_offset<pos:position pos:line="4" pos:column="63"/></name><operator pos:line="4" pos:column="63">)<pos:position pos:line="4" pos:column="64"/></operator></expr></init></decl>;<pos:position pos:line="4" pos:column="65"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><name><name pos:line="5" pos:column="12">n<pos:position pos:line="5" pos:column="13"/></name><operator pos:line="5" pos:column="13">-&gt;<pos:position pos:line="5" pos:column="18"/></operator><name pos:line="5" pos:column="15">write_pending<pos:position pos:line="5" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="5" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="6" pos:column="5">n<pos:position pos:line="6" pos:column="6"/></name><operator pos:line="6" pos:column="6">-&gt;<pos:position pos:line="6" pos:column="11"/></operator><name pos:line="6" pos:column="8">write_pending<pos:position pos:line="6" pos:column="21"/></name></name> <operator pos:line="6" pos:column="22">=<pos:position pos:line="6" pos:column="23"/></operator> <literal type="boolean" pos:line="6" pos:column="24">false<pos:position pos:line="6" pos:column="29"/></literal></expr>;<pos:position pos:line="6" pos:column="30"/></expr_stmt>
}<pos:position pos:line="7" pos:column="2"/></block></function></unit>
