<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4912_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Http<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">One<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">TeChunkedParser<pos:position pos:line="2" pos:column="27"/></name><operator pos:line="2" pos:column="27">::<pos:position pos:line="2" pos:column="29"/></operator><name pos:line="2" pos:column="29">parseChunkBody<pos:position pos:line="2" pos:column="43"/></name></name><parameter_list pos:line="2" pos:column="43">(<parameter><decl><type><name><name pos:line="2" pos:column="44">Http1<pos:position pos:line="2" pos:column="49"/></name><operator pos:line="2" pos:column="49">::<pos:position pos:line="2" pos:column="51"/></operator><name pos:line="2" pos:column="51">Tokenizer<pos:position pos:line="2" pos:column="60"/></name></name> <modifier pos:line="2" pos:column="61">&amp;<pos:position pos:line="2" pos:column="66"/></modifier></type><name pos:line="2" pos:column="62">tok<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="66"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">theLeftBodySize<pos:position pos:line="4" pos:column="24"/></name> <operator pos:line="4" pos:column="25">&gt;<pos:position pos:line="4" pos:column="29"/></operator> <literal type="number" pos:line="4" pos:column="27">0<pos:position pos:line="4" pos:column="28"/></literal></expr>)<pos:position pos:line="4" pos:column="29"/></condition><then pos:line="4" pos:column="29"> <block pos:line="4" pos:column="30">{
        <expr_stmt><expr><name pos:line="5" pos:column="9">buf_<pos:position pos:line="5" pos:column="13"/></name> <operator pos:line="5" pos:column="14">=<pos:position pos:line="5" pos:column="15"/></operator> <call><name><name pos:line="5" pos:column="16">tok<pos:position pos:line="5" pos:column="19"/></name><operator pos:line="5" pos:column="19">.<pos:position pos:line="5" pos:column="20"/></operator><name pos:line="5" pos:column="20">remaining<pos:position pos:line="5" pos:column="29"/></name></name><argument_list pos:line="5" pos:column="29">()<pos:position pos:line="5" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="32"/></expr_stmt> <comment type="line" pos:line="5" pos:column="33">// sync buffers before buf_ use</comment>

        <comment type="line" pos:line="7" pos:column="9">// TODO fix type mismatches and casting for these</comment>
        <decl_stmt><decl><type><specifier pos:line="8" pos:column="9">const<pos:position pos:line="8" pos:column="14"/></specifier> <name pos:line="8" pos:column="15">size_t<pos:position pos:line="8" pos:column="21"/></name></type> <name pos:line="8" pos:column="22">availSize<pos:position pos:line="8" pos:column="31"/></name> <init pos:line="8" pos:column="32">= <expr><call><name pos:line="8" pos:column="34">min<pos:position pos:line="8" pos:column="37"/></name><argument_list pos:line="8" pos:column="37">(<argument><expr><name pos:line="8" pos:column="38">theLeftBodySize<pos:position pos:line="8" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="55">(<pos:position pos:line="8" pos:column="56"/></operator><name pos:line="8" pos:column="56">uint64_t<pos:position pos:line="8" pos:column="64"/></name><operator pos:line="8" pos:column="64">)<pos:position pos:line="8" pos:column="65"/></operator><call><name><name pos:line="8" pos:column="65">buf_<pos:position pos:line="8" pos:column="69"/></name><operator pos:line="8" pos:column="69">.<pos:position pos:line="8" pos:column="70"/></operator><name pos:line="8" pos:column="70">length<pos:position pos:line="8" pos:column="76"/></name></name><argument_list pos:line="8" pos:column="76">()<pos:position pos:line="8" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="79"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="80"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="9" pos:column="9">const<pos:position pos:line="9" pos:column="14"/></specifier> <name pos:line="9" pos:column="15">size_t<pos:position pos:line="9" pos:column="21"/></name></type> <name pos:line="9" pos:column="22">safeSize<pos:position pos:line="9" pos:column="30"/></name> <init pos:line="9" pos:column="31">= <expr><call><name pos:line="9" pos:column="33">min<pos:position pos:line="9" pos:column="36"/></name><argument_list pos:line="9" pos:column="36">(<argument><expr><name pos:line="9" pos:column="37">availSize<pos:position pos:line="9" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="48">(<pos:position pos:line="9" pos:column="49"/></operator><name pos:line="9" pos:column="49">size_t<pos:position pos:line="9" pos:column="55"/></name><operator pos:line="9" pos:column="55">)<pos:position pos:line="9" pos:column="56"/></operator><call><name><name pos:line="9" pos:column="56">theOut<pos:position pos:line="9" pos:column="62"/></name><operator pos:line="9" pos:column="62">-&gt;<pos:position pos:line="9" pos:column="67"/></operator><name pos:line="9" pos:column="64">potentialSpaceSize<pos:position pos:line="9" pos:column="82"/></name></name><argument_list pos:line="9" pos:column="82">()<pos:position pos:line="9" pos:column="84"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="85"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="86"/></decl_stmt>

        <expr_stmt><expr><call><name><name pos:line="11" pos:column="9">theOut<pos:position pos:line="11" pos:column="15"/></name><operator pos:line="11" pos:column="15">-&gt;<pos:position pos:line="11" pos:column="20"/></operator><name pos:line="11" pos:column="17">append<pos:position pos:line="11" pos:column="23"/></name></name><argument_list pos:line="11" pos:column="23">(<argument><expr><call><name><name pos:line="11" pos:column="24">buf_<pos:position pos:line="11" pos:column="28"/></name><operator pos:line="11" pos:column="28">.<pos:position pos:line="11" pos:column="29"/></operator><name pos:line="11" pos:column="29">rawContent<pos:position pos:line="11" pos:column="39"/></name></name><argument_list pos:line="11" pos:column="39">()<pos:position pos:line="11" pos:column="41"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="11" pos:column="43">safeSize<pos:position pos:line="11" pos:column="51"/></name></expr></argument>)<pos:position pos:line="11" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="53"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="12" pos:column="9">buf_<pos:position pos:line="12" pos:column="13"/></name><operator pos:line="12" pos:column="13">.<pos:position pos:line="12" pos:column="14"/></operator><name pos:line="12" pos:column="14">consume<pos:position pos:line="12" pos:column="21"/></name></name><argument_list pos:line="12" pos:column="21">(<argument><expr><name pos:line="12" pos:column="22">safeSize<pos:position pos:line="12" pos:column="30"/></name></expr></argument>)<pos:position pos:line="12" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><name pos:line="13" pos:column="9">theLeftBodySize<pos:position pos:line="13" pos:column="24"/></name> <operator pos:line="13" pos:column="25">-=<pos:position pos:line="13" pos:column="27"/></operator> <name pos:line="13" pos:column="28">safeSize<pos:position pos:line="13" pos:column="36"/></name></expr>;<pos:position pos:line="13" pos:column="37"/></expr_stmt>

        <expr_stmt><expr><call><name><name pos:line="15" pos:column="9">tok<pos:position pos:line="15" pos:column="12"/></name><operator pos:line="15" pos:column="12">.<pos:position pos:line="15" pos:column="13"/></operator><name pos:line="15" pos:column="13">reset<pos:position pos:line="15" pos:column="18"/></name></name><argument_list pos:line="15" pos:column="18">(<argument><expr><name pos:line="15" pos:column="19">buf_<pos:position pos:line="15" pos:column="23"/></name></expr></argument>)<pos:position pos:line="15" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="25"/></expr_stmt> <comment type="line" pos:line="15" pos:column="26">// sync buffers after consume()</comment>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name pos:line="18" pos:column="9">theLeftBodySize<pos:position pos:line="18" pos:column="24"/></name> <operator pos:line="18" pos:column="25">==<pos:position pos:line="18" pos:column="27"/></operator> <literal type="number" pos:line="18" pos:column="28">0<pos:position pos:line="18" pos:column="29"/></literal></expr>)<pos:position pos:line="18" pos:column="30"/></condition><then pos:line="18" pos:column="30">
        <block type="pseudo"><return pos:line="19" pos:column="9">return <expr><call><name pos:line="19" pos:column="16">parseChunkEnd<pos:position pos:line="19" pos:column="29"/></name><argument_list pos:line="19" pos:column="29">(<argument><expr><name pos:line="19" pos:column="30">tok<pos:position pos:line="19" pos:column="33"/></name></expr></argument>)<pos:position pos:line="19" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="35"/></return></block></then>
    <else pos:line="20" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="9">Must<pos:position pos:line="21" pos:column="13"/></name><argument_list pos:line="21" pos:column="13">(<argument><expr><call><name pos:line="21" pos:column="14">needsMoreData<pos:position pos:line="21" pos:column="27"/></name><argument_list pos:line="21" pos:column="27">()<pos:position pos:line="21" pos:column="29"/></argument_list></call> <operator pos:line="21" pos:column="30">||<pos:position pos:line="21" pos:column="32"/></operator> <call><name pos:line="21" pos:column="33">needsMoreSpace<pos:position pos:line="21" pos:column="47"/></name><argument_list pos:line="21" pos:column="47">()<pos:position pos:line="21" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="51"/></expr_stmt></block></else></if>

    <return pos:line="23" pos:column="5">return <expr><literal type="boolean" pos:line="23" pos:column="12">true<pos:position pos:line="23" pos:column="16"/></literal></expr>;<pos:position pos:line="23" pos:column="17"/></return>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
