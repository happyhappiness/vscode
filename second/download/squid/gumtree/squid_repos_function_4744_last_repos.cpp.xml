<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4744_last_repos.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">SBuf<pos:position pos:line="1" pos:column="5"/></name><operator pos:line="1" pos:column="5">::<pos:position pos:line="1" pos:column="7"/></operator><name pos:line="1" pos:column="7">size_type<pos:position pos:line="1" pos:column="16"/></name></name></type>
<name><name pos:line="2" pos:column="1">SBuf<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">findFirstOf<pos:position pos:line="2" pos:column="18"/></name></name><parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><specifier pos:line="2" pos:column="19">const<pos:position pos:line="2" pos:column="24"/></specifier> <name pos:line="2" pos:column="25">CharacterSet<pos:position pos:line="2" pos:column="37"/></name> <modifier pos:line="2" pos:column="38">&amp;<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="39">set<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="44">size_type<pos:position pos:line="2" pos:column="53"/></name></type> <name pos:line="2" pos:column="54">startPos<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="63"/></parameter_list> <specifier pos:line="2" pos:column="64">const<pos:position pos:line="2" pos:column="69"/></specifier>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><operator pos:line="4" pos:column="5">++<pos:position pos:line="4" pos:column="7"/></operator><name><name pos:line="4" pos:column="7">stats<pos:position pos:line="4" pos:column="12"/></name><operator pos:line="4" pos:column="12">.<pos:position pos:line="4" pos:column="13"/></operator><name pos:line="4" pos:column="13">find<pos:position pos:line="4" pos:column="17"/></name></name></expr>;<pos:position pos:line="4" pos:column="18"/></expr_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">startPos<pos:position pos:line="6" pos:column="17"/></name> <operator pos:line="6" pos:column="18">==<pos:position pos:line="6" pos:column="20"/></operator> <name pos:line="6" pos:column="21">npos<pos:position pos:line="6" pos:column="25"/></name></expr>)<pos:position pos:line="6" pos:column="26"/></condition><then pos:line="6" pos:column="26">
        <block type="pseudo"><return pos:line="7" pos:column="9">return <expr><name pos:line="7" pos:column="16">npos<pos:position pos:line="7" pos:column="20"/></name></expr>;<pos:position pos:line="7" pos:column="21"/></return></block></then></if>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">startPos<pos:position pos:line="9" pos:column="17"/></name> <operator pos:line="9" pos:column="18">&gt;=<pos:position pos:line="9" pos:column="23"/></operator> <call><name pos:line="9" pos:column="21">length<pos:position pos:line="9" pos:column="27"/></name><argument_list pos:line="9" pos:column="27">()<pos:position pos:line="9" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="30"/></condition><then pos:line="9" pos:column="30">
        <block type="pseudo"><return pos:line="10" pos:column="9">return <expr><name pos:line="10" pos:column="16">npos<pos:position pos:line="10" pos:column="20"/></name></expr>;<pos:position pos:line="10" pos:column="21"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="12" pos:column="5">debugs<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><literal type="number" pos:line="12" pos:column="12">24<pos:position pos:line="12" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="16">7<pos:position pos:line="12" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="19">"first of characterset "<pos:position pos:line="12" pos:column="43"/></literal> <operator pos:line="12" pos:column="44">&lt;&lt;<pos:position pos:line="12" pos:column="52"/></operator> <name><name pos:line="12" pos:column="47">set<pos:position pos:line="12" pos:column="50"/></name><operator pos:line="12" pos:column="50">.<pos:position pos:line="12" pos:column="51"/></operator><name pos:line="12" pos:column="51">name<pos:position pos:line="12" pos:column="55"/></name></name> <operator pos:line="12" pos:column="56">&lt;&lt;<pos:position pos:line="12" pos:column="64"/></operator> <literal type="string" pos:line="12" pos:column="59">" in id "<pos:position pos:line="12" pos:column="68"/></literal> <operator pos:line="12" pos:column="69">&lt;&lt;<pos:position pos:line="12" pos:column="77"/></operator> <name pos:line="12" pos:column="72">id<pos:position pos:line="12" pos:column="74"/></name></expr></argument>)<pos:position pos:line="12" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="76"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">char<pos:position pos:line="13" pos:column="9"/></name> <modifier pos:line="13" pos:column="10">*<pos:position pos:line="13" pos:column="11"/></modifier></type><name pos:line="13" pos:column="11">cur<pos:position pos:line="13" pos:column="14"/></name> <init pos:line="13" pos:column="15">= <expr><call><name pos:line="13" pos:column="17">buf<pos:position pos:line="13" pos:column="20"/></name><argument_list pos:line="13" pos:column="20">()<pos:position pos:line="13" pos:column="22"/></argument_list></call><operator pos:line="13" pos:column="22">+<pos:position pos:line="13" pos:column="23"/></operator><name pos:line="13" pos:column="23">startPos<pos:position pos:line="13" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="14" pos:column="5">const<pos:position pos:line="14" pos:column="10"/></specifier> <name pos:line="14" pos:column="11">char<pos:position pos:line="14" pos:column="15"/></name> <modifier pos:line="14" pos:column="16">*<pos:position pos:line="14" pos:column="17"/></modifier></type><name pos:line="14" pos:column="17">bufend<pos:position pos:line="14" pos:column="23"/></name> <init pos:line="14" pos:column="24">= <expr><call><name pos:line="14" pos:column="26">bufEnd<pos:position pos:line="14" pos:column="32"/></name><argument_list pos:line="14" pos:column="32">()<pos:position pos:line="14" pos:column="34"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="35"/></decl_stmt>
    <while pos:line="15" pos:column="5">while <condition pos:line="15" pos:column="11">(<expr><name pos:line="15" pos:column="12">cur<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">&lt;<pos:position pos:line="15" pos:column="20"/></operator> <name pos:line="15" pos:column="18">bufend<pos:position pos:line="15" pos:column="24"/></name></expr>)<pos:position pos:line="15" pos:column="25"/></condition> <block pos:line="15" pos:column="26">{
        <if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name><name pos:line="16" pos:column="13">set<pos:position pos:line="16" pos:column="16"/></name><index pos:line="16" pos:column="16">[<expr><operator pos:line="16" pos:column="17">*<pos:position pos:line="16" pos:column="18"/></operator><name pos:line="16" pos:column="18">cur<pos:position pos:line="16" pos:column="21"/></name></expr>]<pos:position pos:line="16" pos:column="22"/></index></name></expr>)<pos:position pos:line="16" pos:column="23"/></condition><then pos:line="16" pos:column="23">
            <block type="pseudo"><return pos:line="17" pos:column="13">return <expr><name pos:line="17" pos:column="20">cur<pos:position pos:line="17" pos:column="23"/></name><operator pos:line="17" pos:column="23">-<pos:position pos:line="17" pos:column="24"/></operator><call><name pos:line="17" pos:column="24">buf<pos:position pos:line="17" pos:column="27"/></name><argument_list pos:line="17" pos:column="27">()<pos:position pos:line="17" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="30"/></return></block></then></if>
        <expr_stmt><expr><operator pos:line="18" pos:column="9">++<pos:position pos:line="18" pos:column="11"/></operator><name pos:line="18" pos:column="11">cur<pos:position pos:line="18" pos:column="14"/></name></expr>;<pos:position pos:line="18" pos:column="15"/></expr_stmt>
    }<pos:position pos:line="19" pos:column="6"/></block></while>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">debugs<pos:position pos:line="20" pos:column="11"/></name><argument_list pos:line="20" pos:column="11">(<argument><expr><literal type="number" pos:line="20" pos:column="12">24<pos:position pos:line="20" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="16">7<pos:position pos:line="20" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="19">"not found"<pos:position pos:line="20" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="32"/></expr_stmt>
    <return pos:line="21" pos:column="5">return <expr><name pos:line="21" pos:column="12">npos<pos:position pos:line="21" pos:column="16"/></name></expr>;<pos:position pos:line="21" pos:column="17"/></return>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
