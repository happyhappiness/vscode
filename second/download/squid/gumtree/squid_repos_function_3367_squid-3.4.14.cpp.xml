<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3367_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">unlinkdInit<pos:position pos:line="2" pos:column="12"/></name><parameter_list pos:line="2" pos:column="12">(<parameter><decl><type><name pos:line="2" pos:column="13">void<pos:position pos:line="2" pos:column="17"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="18"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">unlinkd_wfd<pos:position pos:line="4" pos:column="20"/></name> <operator pos:line="4" pos:column="21">&gt;=<pos:position pos:line="4" pos:column="26"/></operator> <literal type="number" pos:line="4" pos:column="24">0<pos:position pos:line="4" pos:column="25"/></literal></expr>)<pos:position pos:line="4" pos:column="26"/></condition><then pos:line="4" pos:column="26">
        <block type="pseudo"><return pos:line="5" pos:column="9">return;<pos:position pos:line="5" pos:column="16"/></return></block></then></if> <comment type="line" pos:line="5" pos:column="17">// unlinkd already started</comment>

    <decl_stmt><decl><type><specifier pos:line="7" pos:column="5">const<pos:position pos:line="7" pos:column="10"/></specifier> <name pos:line="7" pos:column="11">char<pos:position pos:line="7" pos:column="15"/></name> <modifier pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></modifier></type><name><name pos:line="7" pos:column="17">args<pos:position pos:line="7" pos:column="21"/></name><index pos:line="7" pos:column="21">[<expr><literal type="number" pos:line="7" pos:column="22">2<pos:position pos:line="7" pos:column="23"/></literal></expr>]<pos:position pos:line="7" pos:column="24"/></index></name></decl>;<pos:position pos:line="7" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="8" pos:column="5">Ip<pos:position pos:line="8" pos:column="7"/></name><operator pos:line="8" pos:column="7">::<pos:position pos:line="8" pos:column="9"/></operator><name pos:line="8" pos:column="9">Address<pos:position pos:line="8" pos:column="16"/></name></name></type> <name pos:line="8" pos:column="17">localhost<pos:position pos:line="8" pos:column="26"/></name></decl>;<pos:position pos:line="8" pos:column="27"/></decl_stmt>

    <expr_stmt><expr><name><name pos:line="10" pos:column="5">args<pos:position pos:line="10" pos:column="9"/></name><index pos:line="10" pos:column="9">[<expr><literal type="number" pos:line="10" pos:column="10">0<pos:position pos:line="10" pos:column="11"/></literal></expr>]<pos:position pos:line="10" pos:column="12"/></index></name> <operator pos:line="10" pos:column="13">=<pos:position pos:line="10" pos:column="14"/></operator> <literal type="string" pos:line="10" pos:column="15">"(unlinkd)"<pos:position pos:line="10" pos:column="26"/></literal></expr>;<pos:position pos:line="10" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="11" pos:column="5">args<pos:position pos:line="11" pos:column="9"/></name><index pos:line="11" pos:column="9">[<expr><literal type="number" pos:line="11" pos:column="10">1<pos:position pos:line="11" pos:column="11"/></literal></expr>]<pos:position pos:line="11" pos:column="12"/></index></name> <operator pos:line="11" pos:column="13">=<pos:position pos:line="11" pos:column="14"/></operator> <name pos:line="11" pos:column="15">NULL<pos:position pos:line="11" pos:column="19"/></name></expr>;<pos:position pos:line="11" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="12" pos:column="5">localhost<pos:position pos:line="12" pos:column="14"/></name><operator pos:line="12" pos:column="14">.<pos:position pos:line="12" pos:column="15"/></operator><name pos:line="12" pos:column="15">setLocalhost<pos:position pos:line="12" pos:column="27"/></name></name><argument_list pos:line="12" pos:column="27">()<pos:position pos:line="12" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="30"/></expr_stmt>

    <expr_stmt><expr><name pos:line="14" pos:column="5">pid<pos:position pos:line="14" pos:column="8"/></name> <operator pos:line="14" pos:column="9">=<pos:position pos:line="14" pos:column="10"/></operator> <call><name pos:line="14" pos:column="11">ipcCreate<pos:position pos:line="14" pos:column="20"/></name><argument_list pos:line="14" pos:column="20">(
<cpp:if pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">if<pos:position pos:line="15" pos:column="4"/></cpp:directive> <expr><name pos:line="15" pos:column="5">USE_POLL<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">&amp;&amp;<pos:position pos:line="15" pos:column="24"/></operator> <name pos:line="15" pos:column="17">_SQUID_OSF_<pos:position pos:line="15" pos:column="28"/></name></expr></cpp:if>
              <comment type="block" pos:line="16" pos:column="15">/* pipes and poll() don't get along on DUNIX -DW */</comment>
              <argument><expr><name pos:line="17" pos:column="15">IPC_STREAM<pos:position pos:line="17" pos:column="25"/></name></expr></argument>,
<cpp:elif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">elif<pos:position pos:line="18" pos:column="6"/></cpp:directive> <expr><name pos:line="18" pos:column="7">_SQUID_WINDOWS_<pos:position pos:line="18" pos:column="22"/></name></expr></cpp:elif>
              <comment type="block" pos:line="19" pos:column="15">/* select() will fail on a pipe */</comment>
              <argument><expr><name pos:line="20" pos:column="15">IPC_TCP_SOCKET<pos:position pos:line="20" pos:column="29"/></name></expr></argument>,
<cpp:else pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">else<pos:position pos:line="21" pos:column="6"/></cpp:directive></cpp:else>
              <comment type="block" pos:line="22" pos:column="15">/* We currently need to use FIFO.. see below */</comment>
              <argument><expr><name pos:line="23" pos:column="15">IPC_FIFO<pos:position pos:line="23" pos:column="23"/></name></expr></argument>,
<cpp:endif pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">endif<pos:position pos:line="24" pos:column="7"/></cpp:directive></cpp:endif>
              <argument><expr><name><name pos:line="25" pos:column="15">Config<pos:position pos:line="25" pos:column="21"/></name><operator pos:line="25" pos:column="21">.<pos:position pos:line="25" pos:column="22"/></operator><name pos:line="25" pos:column="22">Program<pos:position pos:line="25" pos:column="29"/></name><operator pos:line="25" pos:column="29">.<pos:position pos:line="25" pos:column="30"/></operator><name pos:line="25" pos:column="30">unlinkd<pos:position pos:line="25" pos:column="37"/></name></name></expr></argument>,
              <argument><expr><name pos:line="26" pos:column="15">args<pos:position pos:line="26" pos:column="19"/></name></expr></argument>,
              <argument><expr><literal type="string" pos:line="27" pos:column="15">"unlinkd"<pos:position pos:line="27" pos:column="24"/></literal></expr></argument>,
              <argument><expr><name pos:line="28" pos:column="15">localhost<pos:position pos:line="28" pos:column="24"/></name></expr></argument>,
              <argument><expr><operator pos:line="29" pos:column="15">&amp;<pos:position pos:line="29" pos:column="20"/></operator><name pos:line="29" pos:column="16">unlinkd_rfd<pos:position pos:line="29" pos:column="27"/></name></expr></argument>,
              <argument><expr><operator pos:line="30" pos:column="15">&amp;<pos:position pos:line="30" pos:column="20"/></operator><name pos:line="30" pos:column="16">unlinkd_wfd<pos:position pos:line="30" pos:column="27"/></name></expr></argument>,
              <argument><expr><operator pos:line="31" pos:column="15">&amp;<pos:position pos:line="31" pos:column="20"/></operator><name pos:line="31" pos:column="16">hIpc<pos:position pos:line="31" pos:column="20"/></name></expr></argument>)<pos:position pos:line="31" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="22"/></expr_stmt>

    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><name pos:line="33" pos:column="9">pid<pos:position pos:line="33" pos:column="12"/></name> <operator pos:line="33" pos:column="13">&lt;<pos:position pos:line="33" pos:column="17"/></operator> <literal type="number" pos:line="33" pos:column="15">0<pos:position pos:line="33" pos:column="16"/></literal></expr>)<pos:position pos:line="33" pos:column="17"/></condition><then pos:line="33" pos:column="17">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="9">fatal<pos:position pos:line="34" pos:column="14"/></name><argument_list pos:line="34" pos:column="14">(<argument><expr><literal type="string" pos:line="34" pos:column="15">"Failed to create unlinkd subprocess"<pos:position pos:line="34" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="54"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="36" pos:column="5">xusleep<pos:position pos:line="36" pos:column="12"/></name><argument_list pos:line="36" pos:column="12">(<argument><expr><literal type="number" pos:line="36" pos:column="13">250000<pos:position pos:line="36" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="21"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="38" pos:column="5">fd_note<pos:position pos:line="38" pos:column="12"/></name><argument_list pos:line="38" pos:column="12">(<argument><expr><name pos:line="38" pos:column="13">unlinkd_wfd<pos:position pos:line="38" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="26">"squid -&gt; unlinkd"<pos:position pos:line="38" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="46"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="40" pos:column="5">fd_note<pos:position pos:line="40" pos:column="12"/></name><argument_list pos:line="40" pos:column="12">(<argument><expr><name pos:line="40" pos:column="13">unlinkd_rfd<pos:position pos:line="40" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="26">"unlinkd -&gt; squid"<pos:position pos:line="40" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="46"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="42" pos:column="5">commUnsetFdTimeout<pos:position pos:line="42" pos:column="23"/></name><argument_list pos:line="42" pos:column="23">(<argument><expr><name pos:line="42" pos:column="24">unlinkd_rfd<pos:position pos:line="42" pos:column="35"/></name></expr></argument>)<pos:position pos:line="42" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">commUnsetFdTimeout<pos:position pos:line="43" pos:column="23"/></name><argument_list pos:line="43" pos:column="23">(<argument><expr><name pos:line="43" pos:column="24">unlinkd_wfd<pos:position pos:line="43" pos:column="35"/></name></expr></argument>)<pos:position pos:line="43" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="37"/></expr_stmt>

    <comment type="block" pos:line="45" pos:column="5">/*
    * unlinkd_rfd should already be non-blocking because of
    * ipcCreate.  We change unlinkd_wfd to blocking mode because
    * we never want to lose an unlink request, and we don't have
    * code to retry if we get EWOULDBLOCK.  Unfortunately, we can
    * do this only for the IPC_FIFO case.
    */</comment>
    <expr_stmt><expr><call><name pos:line="52" pos:column="5">assert<pos:position pos:line="52" pos:column="11"/></name><argument_list pos:line="52" pos:column="11">(<argument><expr><name><name pos:line="52" pos:column="12">fd_table<pos:position pos:line="52" pos:column="20"/></name><index pos:line="52" pos:column="20">[<expr><name pos:line="52" pos:column="21">unlinkd_rfd<pos:position pos:line="52" pos:column="32"/></name></expr>]<pos:position pos:line="52" pos:column="33"/></index></name><operator pos:line="52" pos:column="33">.<pos:position pos:line="52" pos:column="34"/></operator><name><name pos:line="52" pos:column="34">flags<pos:position pos:line="52" pos:column="39"/></name><operator pos:line="52" pos:column="39">.<pos:position pos:line="52" pos:column="40"/></operator><name pos:line="52" pos:column="40">nonblocking<pos:position pos:line="52" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="53"/></expr_stmt>

    <if pos:line="54" pos:column="5">if <condition pos:line="54" pos:column="8">(<expr><name pos:line="54" pos:column="9">FD_PIPE<pos:position pos:line="54" pos:column="16"/></name> <operator pos:line="54" pos:column="17">==<pos:position pos:line="54" pos:column="19"/></operator> <name><name pos:line="54" pos:column="20">fd_table<pos:position pos:line="54" pos:column="28"/></name><index pos:line="54" pos:column="28">[<expr><name pos:line="54" pos:column="29">unlinkd_wfd<pos:position pos:line="54" pos:column="40"/></name></expr>]<pos:position pos:line="54" pos:column="41"/></index></name><operator pos:line="54" pos:column="41">.<pos:position pos:line="54" pos:column="42"/></operator><name pos:line="54" pos:column="42">type<pos:position pos:line="54" pos:column="46"/></name></expr>)<pos:position pos:line="54" pos:column="47"/></condition><then pos:line="54" pos:column="47">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="55" pos:column="9">commUnsetNonBlocking<pos:position pos:line="55" pos:column="29"/></name><argument_list pos:line="55" pos:column="29">(<argument><expr><name pos:line="55" pos:column="30">unlinkd_wfd<pos:position pos:line="55" pos:column="41"/></name></expr></argument>)<pos:position pos:line="55" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="43"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="57" pos:column="5">debugs<pos:position pos:line="57" pos:column="11"/></name><argument_list pos:line="57" pos:column="11">(<argument><expr><literal type="number" pos:line="57" pos:column="12">2<pos:position pos:line="57" pos:column="13"/></literal></expr></argument>, <argument><expr><name pos:line="57" pos:column="15">DBG_IMPORTANT<pos:position pos:line="57" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="30">"Unlinkd pipe opened on FD "<pos:position pos:line="57" pos:column="58"/></literal> <operator pos:line="57" pos:column="59">&lt;&lt;<pos:position pos:line="57" pos:column="67"/></operator> <name pos:line="57" pos:column="62">unlinkd_wfd<pos:position pos:line="57" pos:column="73"/></name></expr></argument>)<pos:position pos:line="57" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="75"/></expr_stmt>

<cpp:if pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">if<pos:position pos:line="59" pos:column="4"/></cpp:directive> <expr><name pos:line="59" pos:column="5">_SQUID_WINDOWS_<pos:position pos:line="59" pos:column="20"/></name></expr></cpp:if>

    <expr_stmt><expr><call><name pos:line="61" pos:column="5">debugs<pos:position pos:line="61" pos:column="11"/></name><argument_list pos:line="61" pos:column="11">(<argument><expr><literal type="number" pos:line="61" pos:column="12">2<pos:position pos:line="61" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="61" pos:column="15">4<pos:position pos:line="61" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="18">"Unlinkd handle: 0x"<pos:position pos:line="61" pos:column="38"/></literal> <operator pos:line="61" pos:column="39">&lt;&lt;<pos:position pos:line="61" pos:column="47"/></operator> <name><name pos:line="61" pos:column="42">std<pos:position pos:line="61" pos:column="45"/></name><operator pos:line="61" pos:column="45">::<pos:position pos:line="61" pos:column="47"/></operator><name pos:line="61" pos:column="47">hex<pos:position pos:line="61" pos:column="50"/></name></name> <operator pos:line="61" pos:column="51">&lt;&lt;<pos:position pos:line="61" pos:column="59"/></operator> <name pos:line="61" pos:column="54">hIpc<pos:position pos:line="61" pos:column="58"/></name> <operator pos:line="61" pos:column="59">&lt;&lt;<pos:position pos:line="61" pos:column="67"/></operator> <name><name pos:line="61" pos:column="62">std<pos:position pos:line="61" pos:column="65"/></name><operator pos:line="61" pos:column="65">::<pos:position pos:line="61" pos:column="67"/></operator><name pos:line="61" pos:column="67">dec<pos:position pos:line="61" pos:column="70"/></name></name> <operator pos:line="61" pos:column="71">&lt;&lt;<pos:position pos:line="61" pos:column="79"/></operator> <literal type="string" pos:line="61" pos:column="74">", PID: "<pos:position pos:line="61" pos:column="83"/></literal> <operator pos:line="61" pos:column="84">&lt;&lt;<pos:position pos:line="61" pos:column="92"/></operator> <name pos:line="61" pos:column="87">pid<pos:position pos:line="61" pos:column="90"/></name></expr></argument>)<pos:position pos:line="61" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="92"/></expr_stmt>

<cpp:endif pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">endif<pos:position pos:line="63" pos:column="7"/></cpp:directive></cpp:endif>

}<pos:position pos:line="65" pos:column="2"/></block></function></unit>
