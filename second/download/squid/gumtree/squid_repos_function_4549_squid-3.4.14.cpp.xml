<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4549_squid-3.4.14.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">Eui<pos:position pos:line="1" pos:column="4"/></name><operator pos:line="1" pos:column="4">::<pos:position pos:line="1" pos:column="6"/></operator><name pos:line="1" pos:column="6">Eui64<pos:position pos:line="1" pos:column="11"/></name></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type>
<name pos:line="2" pos:column="1">aclParseEuiData<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><specifier pos:line="2" pos:column="17">const<pos:position pos:line="2" pos:column="22"/></specifier> <name pos:line="2" pos:column="23">char<pos:position pos:line="2" pos:column="27"/></name> <modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier></type><name pos:line="2" pos:column="29">t<pos:position pos:line="2" pos:column="30"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="31"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name></type> <name><name pos:line="4" pos:column="10">buf<pos:position pos:line="4" pos:column="13"/></name><index pos:line="4" pos:column="13">[<expr><literal type="number" pos:line="4" pos:column="14">256<pos:position pos:line="4" pos:column="17"/></literal></expr>]<pos:position pos:line="4" pos:column="18"/></index></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="5" pos:column="5">Eui<pos:position pos:line="5" pos:column="8"/></name><operator pos:line="5" pos:column="8">::<pos:position pos:line="5" pos:column="10"/></operator><name pos:line="5" pos:column="10">Eui64<pos:position pos:line="5" pos:column="15"/></name></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">q<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><operator pos:line="5" pos:column="21">new<pos:position pos:line="5" pos:column="24"/></operator> <name><name pos:line="5" pos:column="25">Eui<pos:position pos:line="5" pos:column="28"/></name><operator pos:line="5" pos:column="28">::<pos:position pos:line="5" pos:column="30"/></operator><name pos:line="5" pos:column="30">Eui64<pos:position pos:line="5" pos:column="35"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="36"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">debugs<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><literal type="number" pos:line="6" pos:column="12">28<pos:position pos:line="6" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="16">5<pos:position pos:line="6" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="19">"aclParseEuiData: "<pos:position pos:line="6" pos:column="38"/></literal> <operator pos:line="6" pos:column="39">&lt;&lt;<pos:position pos:line="6" pos:column="47"/></operator> <name pos:line="6" pos:column="42">t<pos:position pos:line="6" pos:column="43"/></name></expr></argument>)<pos:position pos:line="6" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="45"/></expr_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><call><name pos:line="8" pos:column="9">sscanf<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><name pos:line="8" pos:column="16">t<pos:position pos:line="8" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="19">"%[0-9a-fA-F:]"<pos:position pos:line="8" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="36">buf<pos:position pos:line="8" pos:column="39"/></name></expr></argument>)<pos:position pos:line="8" pos:column="40"/></argument_list></call> <operator pos:line="8" pos:column="41">!=<pos:position pos:line="8" pos:column="43"/></operator> <literal type="number" pos:line="8" pos:column="44">1<pos:position pos:line="8" pos:column="45"/></literal></expr>)<pos:position pos:line="8" pos:column="46"/></condition><then pos:line="8" pos:column="46"> <block pos:line="8" pos:column="47">{
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">debugs<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><literal type="number" pos:line="9" pos:column="16">28<pos:position pos:line="9" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="20">DBG_CRITICAL<pos:position pos:line="9" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="34">"aclParseEuiData: Bad EUI-64 address: '"<pos:position pos:line="9" pos:column="74"/></literal> <operator pos:line="9" pos:column="75">&lt;&lt;<pos:position pos:line="9" pos:column="83"/></operator> <name pos:line="9" pos:column="78">t<pos:position pos:line="9" pos:column="79"/></name> <operator pos:line="9" pos:column="80">&lt;&lt;<pos:position pos:line="9" pos:column="88"/></operator> <literal type="string" pos:line="9" pos:column="83">"'"<pos:position pos:line="9" pos:column="86"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="88"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">safe_free<pos:position pos:line="10" pos:column="18"/></name><argument_list pos:line="10" pos:column="18">(<argument><expr><name pos:line="10" pos:column="19">q<pos:position pos:line="10" pos:column="20"/></name></expr></argument>)<pos:position pos:line="10" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="22"/></expr_stmt>
        <return pos:line="11" pos:column="9">return <expr><name pos:line="11" pos:column="16">NULL<pos:position pos:line="11" pos:column="20"/></name></expr>;<pos:position pos:line="11" pos:column="21"/></return>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><operator pos:line="14" pos:column="9">!<pos:position pos:line="14" pos:column="10"/></operator><call><name><name pos:line="14" pos:column="10">q<pos:position pos:line="14" pos:column="11"/></name><operator pos:line="14" pos:column="11">-&gt;<pos:position pos:line="14" pos:column="16"/></operator><name pos:line="14" pos:column="13">decode<pos:position pos:line="14" pos:column="19"/></name></name><argument_list pos:line="14" pos:column="19">(<argument><expr><name pos:line="14" pos:column="20">buf<pos:position pos:line="14" pos:column="23"/></name></expr></argument>)<pos:position pos:line="14" pos:column="24"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="25"/></condition><then pos:line="14" pos:column="25"> <block pos:line="14" pos:column="26">{
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">debugs<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><literal type="number" pos:line="15" pos:column="16">28<pos:position pos:line="15" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="20">DBG_CRITICAL<pos:position pos:line="15" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="34">""<pos:position pos:line="15" pos:column="36"/></literal> <operator pos:line="15" pos:column="37">&lt;&lt;<pos:position pos:line="15" pos:column="45"/></operator> <name pos:line="15" pos:column="40">cfg_filename<pos:position pos:line="15" pos:column="52"/></name> <operator pos:line="15" pos:column="53">&lt;&lt;<pos:position pos:line="15" pos:column="61"/></operator> <literal type="string" pos:line="15" pos:column="56">" line "<pos:position pos:line="15" pos:column="64"/></literal> <operator pos:line="15" pos:column="65">&lt;&lt;<pos:position pos:line="15" pos:column="73"/></operator> <name pos:line="15" pos:column="68">config_lineno<pos:position pos:line="15" pos:column="81"/></name> <operator pos:line="15" pos:column="82">&lt;&lt;<pos:position pos:line="15" pos:column="90"/></operator> <literal type="string" pos:line="15" pos:column="85">": "<pos:position pos:line="15" pos:column="89"/></literal> <operator pos:line="15" pos:column="90">&lt;&lt;<pos:position pos:line="15" pos:column="98"/></operator> <name pos:line="15" pos:column="93">config_input_line<pos:position pos:line="15" pos:column="110"/></name></expr></argument>)<pos:position pos:line="15" pos:column="111"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="112"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">debugs<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><literal type="number" pos:line="16" pos:column="16">28<pos:position pos:line="16" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="20">DBG_CRITICAL<pos:position pos:line="16" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="34">"aclParseEuiData: Ignoring invalid EUI-64 acl entry: can't parse '"<pos:position pos:line="16" pos:column="101"/></literal> <operator pos:line="16" pos:column="102">&lt;&lt;<pos:position pos:line="16" pos:column="110"/></operator> <name pos:line="16" pos:column="105">buf<pos:position pos:line="16" pos:column="108"/></name> <operator pos:line="16" pos:column="109">&lt;&lt;<pos:position pos:line="16" pos:column="117"/></operator> <literal type="string" pos:line="16" pos:column="112">"'"<pos:position pos:line="16" pos:column="115"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="116"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="117"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">safe_free<pos:position pos:line="17" pos:column="18"/></name><argument_list pos:line="17" pos:column="18">(<argument><expr><name pos:line="17" pos:column="19">q<pos:position pos:line="17" pos:column="20"/></name></expr></argument>)<pos:position pos:line="17" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="22"/></expr_stmt>
        <return pos:line="18" pos:column="9">return <expr><name pos:line="18" pos:column="16">NULL<pos:position pos:line="18" pos:column="20"/></name></expr>;<pos:position pos:line="18" pos:column="21"/></return>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>

    <return pos:line="21" pos:column="5">return <expr><name pos:line="21" pos:column="12">q<pos:position pos:line="21" pos:column="13"/></name></expr>;<pos:position pos:line="21" pos:column="14"/></return>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
