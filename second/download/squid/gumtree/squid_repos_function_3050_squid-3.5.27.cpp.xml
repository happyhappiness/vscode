<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3050_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">StoreEntry<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">setPublicKey<pos:position pos:line="2" pos:column="25"/></name></name><parameter_list pos:line="2" pos:column="25">(<parameter><decl><type><specifier pos:line="2" pos:column="26">const<pos:position pos:line="2" pos:column="31"/></specifier> <name pos:line="2" pos:column="32">KeyScope<pos:position pos:line="2" pos:column="40"/></name></type> <name pos:line="2" pos:column="41">scope<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="47"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">key<pos:position pos:line="4" pos:column="12"/></name> <operator pos:line="4" pos:column="13">&amp;&amp;<pos:position pos:line="4" pos:column="23"/></operator> <operator pos:line="4" pos:column="16">!<pos:position pos:line="4" pos:column="17"/></operator><call><name pos:line="4" pos:column="17">EBIT_TEST<pos:position pos:line="4" pos:column="26"/></name><argument_list pos:line="4" pos:column="26">(<argument><expr><name pos:line="4" pos:column="27">flags<pos:position pos:line="4" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="34">KEY_PRIVATE<pos:position pos:line="4" pos:column="45"/></name></expr></argument>)<pos:position pos:line="4" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="47"/></condition><then pos:line="4" pos:column="47">
        <block type="pseudo"><return pos:line="5" pos:column="9">return;<pos:position pos:line="5" pos:column="16"/></return></block></then></if>                 <comment type="block" pos:line="5" pos:column="33">/* is already public */</comment>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><name pos:line="7" pos:column="12">mem_obj<pos:position pos:line="7" pos:column="19"/></name></expr></argument>)<pos:position pos:line="7" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="21"/></expr_stmt>

    <comment type="block" pos:line="9" pos:column="5">/*
     * We can't make RELEASE_REQUEST objects public.  Depending on
     * when RELEASE_REQUEST gets set, we might not be swapping out
     * the object.  If we're not swapping out, then subsequent
     * store clients won't be able to access object data which has
     * been freed from memory.
     *
     * If RELEASE_REQUEST is set, setPublicKey() should not be called.
     */</comment>
<cpp:if pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">if<pos:position pos:line="18" pos:column="4"/></cpp:directive> <expr><name pos:line="18" pos:column="5">MORE_DEBUG_OUTPUT<pos:position pos:line="18" pos:column="22"/></name></expr></cpp:if>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><call><name pos:line="20" pos:column="9">EBIT_TEST<pos:position pos:line="20" pos:column="18"/></name><argument_list pos:line="20" pos:column="18">(<argument><expr><name pos:line="20" pos:column="19">flags<pos:position pos:line="20" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="26">RELEASE_REQUEST<pos:position pos:line="20" pos:column="41"/></name></expr></argument>)<pos:position pos:line="20" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="43"/></condition><then pos:line="20" pos:column="43">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="9">debugs<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><literal type="number" pos:line="21" pos:column="16">20<pos:position pos:line="21" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="20">DBG_IMPORTANT<pos:position pos:line="21" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="35">"assertion failed: RELEASE key "<pos:position pos:line="21" pos:column="67"/></literal> <operator pos:line="21" pos:column="68">&lt;&lt;<pos:position pos:line="21" pos:column="76"/></operator> <name pos:line="21" pos:column="71">key<pos:position pos:line="21" pos:column="74"/></name> <operator pos:line="21" pos:column="75">&lt;&lt;<pos:position pos:line="21" pos:column="83"/></operator> <literal type="string" pos:line="21" pos:column="78">", url "<pos:position pos:line="21" pos:column="86"/></literal> <operator pos:line="21" pos:column="87">&lt;&lt;<pos:position pos:line="21" pos:column="95"/></operator> <name><name pos:line="21" pos:column="90">mem_obj<pos:position pos:line="21" pos:column="97"/></name><operator pos:line="21" pos:column="97">-&gt;<pos:position pos:line="21" pos:column="102"/></operator><name pos:line="21" pos:column="99">url<pos:position pos:line="21" pos:column="102"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="103"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="104"/></expr_stmt></block></then></if>

<cpp:endif pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">endif<pos:position pos:line="23" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="25" pos:column="5">assert<pos:position pos:line="25" pos:column="11"/></name><argument_list pos:line="25" pos:column="11">(<argument><expr><operator pos:line="25" pos:column="12">!<pos:position pos:line="25" pos:column="13"/></operator><call><name pos:line="25" pos:column="13">EBIT_TEST<pos:position pos:line="25" pos:column="22"/></name><argument_list pos:line="25" pos:column="22">(<argument><expr><name pos:line="25" pos:column="23">flags<pos:position pos:line="25" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="30">RELEASE_REQUEST<pos:position pos:line="25" pos:column="45"/></name></expr></argument>)<pos:position pos:line="25" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="48"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="27" pos:column="5">adjustVary<pos:position pos:line="27" pos:column="15"/></name><argument_list pos:line="27" pos:column="15">()<pos:position pos:line="27" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">forcePublicKey<pos:position pos:line="28" pos:column="19"/></name><argument_list pos:line="28" pos:column="19">(<argument><expr><call><name pos:line="28" pos:column="20">calcPublicKey<pos:position pos:line="28" pos:column="33"/></name><argument_list pos:line="28" pos:column="33">(<argument><expr><name pos:line="28" pos:column="34">scope<pos:position pos:line="28" pos:column="39"/></name></expr></argument>)<pos:position pos:line="28" pos:column="40"/></argument_list></call></expr></argument>)<pos:position pos:line="28" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="42"/></expr_stmt>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
