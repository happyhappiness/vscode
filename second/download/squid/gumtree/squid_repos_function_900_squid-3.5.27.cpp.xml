<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_900_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">comm_set_transparent<pos:position pos:line="2" pos:column="21"/></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><name pos:line="2" pos:column="22">int<pos:position pos:line="2" pos:column="25"/></name></type> <name pos:line="2" pos:column="26">fd<pos:position pos:line="2" pos:column="28"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="29"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:if pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">if<pos:position pos:line="4" pos:column="4"/></cpp:directive> <expr><name pos:line="4" pos:column="5">_SQUID_LINUX_<pos:position pos:line="4" pos:column="18"/></name> <operator pos:line="4" pos:column="19">&amp;&amp;<pos:position pos:line="4" pos:column="29"/></operator> <call><name pos:line="4" pos:column="22">defined<pos:position pos:line="4" pos:column="29"/></name><argument_list pos:line="4" pos:column="29">(<argument><expr><name pos:line="4" pos:column="30">IP_TRANSPARENT<pos:position pos:line="4" pos:column="44"/></name></expr></argument>)<pos:position pos:line="4" pos:column="45"/></argument_list></call></expr></cpp:if> <comment type="line" pos:line="4" pos:column="46">// Linux</comment>
<cpp:define pos:line="5" pos:column="1"># <cpp:directive pos:line="5" pos:column="3">define<pos:position pos:line="5" pos:column="9"/></cpp:directive> <cpp:macro><name pos:line="5" pos:column="10">soLevel<pos:position pos:line="5" pos:column="17"/></name></cpp:macro> <cpp:value pos:line="5" pos:column="18">SOL_IP<pos:position pos:line="5" pos:column="24"/></cpp:value></cpp:define>
<cpp:define pos:line="6" pos:column="1"># <cpp:directive pos:line="6" pos:column="3">define<pos:position pos:line="6" pos:column="9"/></cpp:directive> <cpp:macro><name pos:line="6" pos:column="10">soFlag<pos:position pos:line="6" pos:column="16"/></name></cpp:macro>  <cpp:value pos:line="6" pos:column="18">IP_TRANSPARENT<pos:position pos:line="6" pos:column="32"/></cpp:value></cpp:define>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">bool<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">doneSuid<pos:position pos:line="7" pos:column="18"/></name> <init pos:line="7" pos:column="19">= <expr><literal type="boolean" pos:line="7" pos:column="21">false<pos:position pos:line="7" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="27"/></decl_stmt>

<cpp:elif pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">elif<pos:position pos:line="9" pos:column="6"/></cpp:directive> <expr><call><name pos:line="9" pos:column="7">defined<pos:position pos:line="9" pos:column="14"/></name><argument_list pos:line="9" pos:column="14">(<argument><expr><name pos:line="9" pos:column="15">SO_BINDANY<pos:position pos:line="9" pos:column="25"/></name></expr></argument>)<pos:position pos:line="9" pos:column="26"/></argument_list></call></expr></cpp:elif> <comment type="line" pos:line="9" pos:column="27">// OpenBSD 4.7+ and NetBSD with PF</comment>
<cpp:define pos:line="10" pos:column="1"># <cpp:directive pos:line="10" pos:column="3">define<pos:position pos:line="10" pos:column="9"/></cpp:directive> <cpp:macro><name pos:line="10" pos:column="10">soLevel<pos:position pos:line="10" pos:column="17"/></name></cpp:macro> <cpp:value pos:line="10" pos:column="18">SOL_SOCKET<pos:position pos:line="10" pos:column="28"/></cpp:value></cpp:define>
<cpp:define pos:line="11" pos:column="1"># <cpp:directive pos:line="11" pos:column="3">define<pos:position pos:line="11" pos:column="9"/></cpp:directive> <cpp:macro><name pos:line="11" pos:column="10">soFlag<pos:position pos:line="11" pos:column="16"/></name></cpp:macro>  <cpp:value pos:line="11" pos:column="18">SO_BINDANY<pos:position pos:line="11" pos:column="28"/></cpp:value></cpp:define>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">enter_suid<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">()<pos:position pos:line="12" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="18"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">bool<pos:position pos:line="13" pos:column="9"/></name></type> <name pos:line="13" pos:column="10">doneSuid<pos:position pos:line="13" pos:column="18"/></name> <init pos:line="13" pos:column="19">= <expr><literal type="boolean" pos:line="13" pos:column="21">true<pos:position pos:line="13" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="26"/></decl_stmt>

<cpp:elif pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">elif<pos:position pos:line="15" pos:column="6"/></cpp:directive> <expr><call><name pos:line="15" pos:column="7">defined<pos:position pos:line="15" pos:column="14"/></name><argument_list pos:line="15" pos:column="14">(<argument><expr><name pos:line="15" pos:column="15">IP_BINDANY<pos:position pos:line="15" pos:column="25"/></name></expr></argument>)<pos:position pos:line="15" pos:column="26"/></argument_list></call></expr></cpp:elif> <comment type="line" pos:line="15" pos:column="27">// FreeBSD with IPFW</comment>
<cpp:define pos:line="16" pos:column="1"># <cpp:directive pos:line="16" pos:column="3">define<pos:position pos:line="16" pos:column="9"/></cpp:directive> <cpp:macro><name pos:line="16" pos:column="10">soLevel<pos:position pos:line="16" pos:column="17"/></name></cpp:macro> <cpp:value pos:line="16" pos:column="18">IPPROTO_IP<pos:position pos:line="16" pos:column="28"/></cpp:value></cpp:define>
<cpp:define pos:line="17" pos:column="1"># <cpp:directive pos:line="17" pos:column="3">define<pos:position pos:line="17" pos:column="9"/></cpp:directive> <cpp:macro><name pos:line="17" pos:column="10">soFlag<pos:position pos:line="17" pos:column="16"/></name></cpp:macro>  <cpp:value pos:line="17" pos:column="18">IP_BINDANY<pos:position pos:line="17" pos:column="28"/></cpp:value></cpp:define>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">enter_suid<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">()<pos:position pos:line="18" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="18"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="19" pos:column="5">bool<pos:position pos:line="19" pos:column="9"/></name></type> <name pos:line="19" pos:column="10">doneSuid<pos:position pos:line="19" pos:column="18"/></name> <init pos:line="19" pos:column="19">= <expr><literal type="boolean" pos:line="19" pos:column="21">true<pos:position pos:line="19" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="19" pos:column="26"/></decl_stmt>

<cpp:else pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">else<pos:position pos:line="21" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">debugs<pos:position pos:line="22" pos:column="11"/></name><argument_list pos:line="22" pos:column="11">(<argument><expr><literal type="number" pos:line="22" pos:column="12">50<pos:position pos:line="22" pos:column="14"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="16">DBG_CRITICAL<pos:position pos:line="22" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="30">"WARNING: comm_open: setsockopt(TPROXY) not supported on this platform"<pos:position pos:line="22" pos:column="101"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="102"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="103"/></expr_stmt>
<cpp:endif pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">endif<pos:position pos:line="23" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="23" pos:column="8">/* sockopt */</comment>

<cpp:if pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">if<pos:position pos:line="25" pos:column="4"/></cpp:directive> <expr><call><name pos:line="25" pos:column="5">defined<pos:position pos:line="25" pos:column="12"/></name><argument_list pos:line="25" pos:column="12">(<argument><expr><name pos:line="25" pos:column="13">soLevel<pos:position pos:line="25" pos:column="20"/></name></expr></argument>)<pos:position pos:line="25" pos:column="21"/></argument_list></call> <operator pos:line="25" pos:column="22">&amp;&amp;<pos:position pos:line="25" pos:column="32"/></operator> <call><name pos:line="25" pos:column="25">defined<pos:position pos:line="25" pos:column="32"/></name><argument_list pos:line="25" pos:column="32">(<argument><expr><name pos:line="25" pos:column="33">soFlag<pos:position pos:line="25" pos:column="39"/></name></expr></argument>)<pos:position pos:line="25" pos:column="40"/></argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name pos:line="26" pos:column="5">int<pos:position pos:line="26" pos:column="8"/></name></type> <name pos:line="26" pos:column="9">tos<pos:position pos:line="26" pos:column="12"/></name> <init pos:line="26" pos:column="13">= <expr><literal type="number" pos:line="26" pos:column="15">1<pos:position pos:line="26" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="26" pos:column="17"/></decl_stmt>
    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><call><name pos:line="27" pos:column="9">setsockopt<pos:position pos:line="27" pos:column="19"/></name><argument_list pos:line="27" pos:column="19">(<argument><expr><name pos:line="27" pos:column="20">fd<pos:position pos:line="27" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="24">soLevel<pos:position pos:line="27" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="33">soFlag<pos:position pos:line="27" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="41">(<pos:position pos:line="27" pos:column="42"/></operator><name pos:line="27" pos:column="42">char<pos:position pos:line="27" pos:column="46"/></name> <operator pos:line="27" pos:column="47">*<pos:position pos:line="27" pos:column="48"/></operator><operator pos:line="27" pos:column="48">)<pos:position pos:line="27" pos:column="49"/></operator> <operator pos:line="27" pos:column="50">&amp;<pos:position pos:line="27" pos:column="55"/></operator><name pos:line="27" pos:column="51">tos<pos:position pos:line="27" pos:column="54"/></name></expr></argument>, <argument><expr><sizeof pos:line="27" pos:column="56">sizeof<argument_list pos:line="27" pos:column="62">(<argument><expr><name pos:line="27" pos:column="63">int<pos:position pos:line="27" pos:column="66"/></name></expr></argument>)<pos:position pos:line="27" pos:column="67"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="27" pos:column="68"/></argument_list></call> <operator pos:line="27" pos:column="69">&lt;<pos:position pos:line="27" pos:column="73"/></operator> <literal type="number" pos:line="27" pos:column="71">0<pos:position pos:line="27" pos:column="72"/></literal></expr>)<pos:position pos:line="27" pos:column="73"/></condition><then pos:line="27" pos:column="73"> <block pos:line="27" pos:column="74">{
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">debugs<pos:position pos:line="28" pos:column="15"/></name><argument_list pos:line="28" pos:column="15">(<argument><expr><literal type="number" pos:line="28" pos:column="16">50<pos:position pos:line="28" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="20">DBG_IMPORTANT<pos:position pos:line="28" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="35">"comm_open: setsockopt(TPROXY) on FD "<pos:position pos:line="28" pos:column="73"/></literal> <operator pos:line="28" pos:column="74">&lt;&lt;<pos:position pos:line="28" pos:column="82"/></operator> <name pos:line="28" pos:column="77">fd<pos:position pos:line="28" pos:column="79"/></name> <operator pos:line="28" pos:column="80">&lt;&lt;<pos:position pos:line="28" pos:column="88"/></operator> <literal type="string" pos:line="28" pos:column="83">": "<pos:position pos:line="28" pos:column="87"/></literal> <operator pos:line="28" pos:column="88">&lt;&lt;<pos:position pos:line="28" pos:column="96"/></operator> <call><name pos:line="28" pos:column="91">xstrerror<pos:position pos:line="28" pos:column="100"/></name><argument_list pos:line="28" pos:column="100">()<pos:position pos:line="28" pos:column="102"/></argument_list></call></expr></argument>)<pos:position pos:line="28" pos:column="103"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="104"/></expr_stmt>
    }<pos:position pos:line="29" pos:column="6"/></block></then> <else pos:line="29" pos:column="7">else <block pos:line="29" pos:column="12">{
        <comment type="block" pos:line="30" pos:column="9">/* mark the socket as having transparent options */</comment>
        <expr_stmt><expr><name><name pos:line="31" pos:column="9">fd_table<pos:position pos:line="31" pos:column="17"/></name><index pos:line="31" pos:column="17">[<expr><name pos:line="31" pos:column="18">fd<pos:position pos:line="31" pos:column="20"/></name></expr>]<pos:position pos:line="31" pos:column="21"/></index></name><operator pos:line="31" pos:column="21">.<pos:position pos:line="31" pos:column="22"/></operator><name><name pos:line="31" pos:column="22">flags<pos:position pos:line="31" pos:column="27"/></name><operator pos:line="31" pos:column="27">.<pos:position pos:line="31" pos:column="28"/></operator><name pos:line="31" pos:column="28">transparent<pos:position pos:line="31" pos:column="39"/></name></name> <operator pos:line="31" pos:column="40">=<pos:position pos:line="31" pos:column="41"/></operator> <literal type="boolean" pos:line="31" pos:column="42">true<pos:position pos:line="31" pos:column="46"/></literal></expr>;<pos:position pos:line="31" pos:column="47"/></expr_stmt>
    }<pos:position pos:line="32" pos:column="6"/></block></else></if>
    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><name pos:line="33" pos:column="9">doneSuid<pos:position pos:line="33" pos:column="17"/></name></expr>)<pos:position pos:line="33" pos:column="18"/></condition><then pos:line="33" pos:column="18">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="9">leave_suid<pos:position pos:line="34" pos:column="19"/></name><argument_list pos:line="34" pos:column="19">()<pos:position pos:line="34" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="22"/></expr_stmt></block></then></if>
<cpp:endif pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">endif<pos:position pos:line="35" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
