<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5547_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">time_t<pos:position pos:line="1" pos:column="7"/></name></type>
<name><name pos:line="2" pos:column="1">Comm<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">Connection<pos:position pos:line="2" pos:column="17"/></name><operator pos:line="2" pos:column="17">::<pos:position pos:line="2" pos:column="19"/></operator><name pos:line="2" pos:column="19">connectTimeout<pos:position pos:line="2" pos:column="33"/></name></name><parameter_list pos:line="2" pos:column="33">(<parameter><decl><type><specifier pos:line="2" pos:column="34">const<pos:position pos:line="2" pos:column="39"/></specifier> <name pos:line="2" pos:column="40">time_t<pos:position pos:line="2" pos:column="46"/></name></type> <name pos:line="2" pos:column="47">fwdStart<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="56"/></parameter_list> <specifier pos:line="2" pos:column="57">const<pos:position pos:line="2" pos:column="62"/></specifier>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// a connection opening timeout (ignoring forwarding time limits for now)</comment>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">CachePeer<pos:position pos:line="5" pos:column="20"/></name> <modifier pos:line="5" pos:column="21">*<pos:position pos:line="5" pos:column="22"/></modifier></type><name pos:line="5" pos:column="22">peer<pos:position pos:line="5" pos:column="26"/></name> <init pos:line="5" pos:column="27">= <expr><call><name pos:line="5" pos:column="29">getPeer<pos:position pos:line="5" pos:column="36"/></name><argument_list pos:line="5" pos:column="36">()<pos:position pos:line="5" pos:column="38"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="39"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">time_t<pos:position pos:line="6" pos:column="17"/></name></type> <name pos:line="6" pos:column="18">ctimeout<pos:position pos:line="6" pos:column="26"/></name> <init pos:line="6" pos:column="27">= <expr><ternary><condition><expr><name pos:line="6" pos:column="29">peer<pos:position pos:line="6" pos:column="33"/></name></expr> ?<pos:position pos:line="6" pos:column="35"/></condition><then pos:line="6" pos:column="35"> <expr><call><name pos:line="6" pos:column="36">peerConnectTimeout<pos:position pos:line="6" pos:column="54"/></name><argument_list pos:line="6" pos:column="54">(<argument><expr><name pos:line="6" pos:column="55">peer<pos:position pos:line="6" pos:column="59"/></name></expr></argument>)<pos:position pos:line="6" pos:column="60"/></argument_list></call></expr> <pos:position pos:line="6" pos:column="61"/></then><else pos:line="6" pos:column="61">: <expr><name><name pos:line="6" pos:column="63">Config<pos:position pos:line="6" pos:column="69"/></name><operator pos:line="6" pos:column="69">.<pos:position pos:line="6" pos:column="70"/></operator><name pos:line="6" pos:column="70">Timeout<pos:position pos:line="6" pos:column="77"/></name><operator pos:line="6" pos:column="77">.<pos:position pos:line="6" pos:column="78"/></operator><name pos:line="6" pos:column="78">connect<pos:position pos:line="6" pos:column="85"/></name></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="6" pos:column="86"/></decl_stmt>

    <comment type="line" pos:line="8" pos:column="5">// time we have left to finish the whole forwarding process</comment>
    <decl_stmt><decl><type><specifier pos:line="9" pos:column="5">const<pos:position pos:line="9" pos:column="10"/></specifier> <name pos:line="9" pos:column="11">time_t<pos:position pos:line="9" pos:column="17"/></name></type> <name pos:line="9" pos:column="18">fwdTimeLeft<pos:position pos:line="9" pos:column="29"/></name> <init pos:line="9" pos:column="30">= <expr><call><name><name pos:line="9" pos:column="32">FwdState<pos:position pos:line="9" pos:column="40"/></name><operator pos:line="9" pos:column="40">::<pos:position pos:line="9" pos:column="42"/></operator><name pos:line="9" pos:column="42">ForwardTimeout<pos:position pos:line="9" pos:column="56"/></name></name><argument_list pos:line="9" pos:column="56">(<argument><expr><name pos:line="9" pos:column="57">fwdStart<pos:position pos:line="9" pos:column="65"/></name></expr></argument>)<pos:position pos:line="9" pos:column="66"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="67"/></decl_stmt>

    <comment type="line" pos:line="11" pos:column="5">// The caller decided to connect. If there is no time left, to protect</comment>
    <comment type="line" pos:line="12" pos:column="5">// connecting code from trying to establish a connection while a zero (i.e.,</comment>
    <comment type="line" pos:line="13" pos:column="5">// "immediate") timeout notification is firing, ensure a positive timeout.</comment>
    <comment type="line" pos:line="14" pos:column="5">// XXX: This hack gives some timed-out forwarding sequences more time than</comment>
    <comment type="line" pos:line="15" pos:column="5">// some sequences that have not quite reached the forwarding timeout yet!</comment>
    <decl_stmt><decl><type><specifier pos:line="16" pos:column="5">const<pos:position pos:line="16" pos:column="10"/></specifier> <name pos:line="16" pos:column="11">time_t<pos:position pos:line="16" pos:column="17"/></name></type> <name pos:line="16" pos:column="18">ftimeout<pos:position pos:line="16" pos:column="26"/></name> <init pos:line="16" pos:column="27">= <expr><ternary><condition><expr><name pos:line="16" pos:column="29">fwdTimeLeft<pos:position pos:line="16" pos:column="40"/></name></expr> ?<pos:position pos:line="16" pos:column="42"/></condition><then pos:line="16" pos:column="42"> <expr><name pos:line="16" pos:column="43">fwdTimeLeft<pos:position pos:line="16" pos:column="54"/></name></expr> <pos:position pos:line="16" pos:column="55"/></then><else pos:line="16" pos:column="55">: <expr><literal type="number" pos:line="16" pos:column="57">5<pos:position pos:line="16" pos:column="58"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="16" pos:column="59"/></decl_stmt> <comment type="line" pos:line="16" pos:column="60">// seconds</comment>

    <return pos:line="18" pos:column="5">return <expr><call><name pos:line="18" pos:column="12">min<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><name pos:line="18" pos:column="16">ctimeout<pos:position pos:line="18" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="26">ftimeout<pos:position pos:line="18" pos:column="34"/></name></expr></argument>)<pos:position pos:line="18" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="36"/></return>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
