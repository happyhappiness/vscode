<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1228_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">CpuAffinitySet<pos:position pos:line="2" pos:column="15"/></name><operator pos:line="2" pos:column="15">::<pos:position pos:line="2" pos:column="17"/></operator><name pos:line="2" pos:column="17">apply<pos:position pos:line="2" pos:column="22"/></name></name><parameter_list pos:line="2" pos:column="22">()<pos:position pos:line="2" pos:column="24"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">Must<pos:position pos:line="4" pos:column="9"/></name><argument_list pos:line="4" pos:column="9">(<argument><expr><call><name pos:line="4" pos:column="10">CPU_COUNT<pos:position pos:line="4" pos:column="19"/></name><argument_list pos:line="4" pos:column="19">(<argument><expr><operator pos:line="4" pos:column="20">&amp;<pos:position pos:line="4" pos:column="25"/></operator><name pos:line="4" pos:column="21">theCpuSet<pos:position pos:line="4" pos:column="30"/></name></expr></argument>)<pos:position pos:line="4" pos:column="31"/></argument_list></call> <operator pos:line="4" pos:column="32">&gt;<pos:position pos:line="4" pos:column="36"/></operator> <literal type="number" pos:line="4" pos:column="34">0<pos:position pos:line="4" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="37"/></expr_stmt> <comment type="line" pos:line="4" pos:column="38">// CPU affinity mask set</comment>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">Must<pos:position pos:line="5" pos:column="9"/></name><argument_list pos:line="5" pos:column="9">(<argument><expr><operator pos:line="5" pos:column="10">!<pos:position pos:line="5" pos:column="11"/></operator><call><name pos:line="5" pos:column="11">applied<pos:position pos:line="5" pos:column="18"/></name><argument_list pos:line="5" pos:column="18">()<pos:position pos:line="5" pos:column="20"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="22"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="7" pos:column="5">bool<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">success<pos:position pos:line="7" pos:column="17"/></name> <init pos:line="7" pos:column="18">= <expr><literal type="boolean" pos:line="7" pos:column="20">false<pos:position pos:line="7" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><call><name pos:line="8" pos:column="9">sched_getaffinity<pos:position pos:line="8" pos:column="26"/></name><argument_list pos:line="8" pos:column="26">(<argument><expr><literal type="number" pos:line="8" pos:column="27">0<pos:position pos:line="8" pos:column="28"/></literal></expr></argument>, <argument><expr><sizeof pos:line="8" pos:column="30">sizeof<argument_list pos:line="8" pos:column="36">(<argument><expr><name pos:line="8" pos:column="37">theOrigCpuSet<pos:position pos:line="8" pos:column="50"/></name></expr></argument>)<pos:position pos:line="8" pos:column="51"/></argument_list></sizeof></expr></argument>, <argument><expr><operator pos:line="8" pos:column="53">&amp;<pos:position pos:line="8" pos:column="58"/></operator><name pos:line="8" pos:column="54">theOrigCpuSet<pos:position pos:line="8" pos:column="67"/></name></expr></argument>)<pos:position pos:line="8" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="69"/></condition><then pos:line="8" pos:column="69"> <block pos:line="8" pos:column="70">{
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">debugs<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><literal type="number" pos:line="9" pos:column="16">54<pos:position pos:line="9" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="20">DBG_IMPORTANT<pos:position pos:line="9" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="35">"ERROR: failed to get CPU affinity for "<pos:position pos:line="9" pos:column="75"/></literal>
               <literal type="string" pos:line="10" pos:column="16">"process PID "<pos:position pos:line="10" pos:column="30"/></literal> <operator pos:line="10" pos:column="31">&lt;&lt;<pos:position pos:line="10" pos:column="39"/></operator> <call><name pos:line="10" pos:column="34">getpid<pos:position pos:line="10" pos:column="40"/></name><argument_list pos:line="10" pos:column="40">()<pos:position pos:line="10" pos:column="42"/></argument_list></call> <operator pos:line="10" pos:column="43">&lt;&lt;<pos:position pos:line="10" pos:column="51"/></operator> <literal type="string" pos:line="10" pos:column="46">", ignoring CPU affinity for "<pos:position pos:line="10" pos:column="76"/></literal>
               <literal type="string" pos:line="11" pos:column="16">"this process: "<pos:position pos:line="11" pos:column="32"/></literal> <operator pos:line="11" pos:column="33">&lt;&lt;<pos:position pos:line="11" pos:column="41"/></operator> <call><name pos:line="11" pos:column="36">xstrerror<pos:position pos:line="11" pos:column="45"/></name><argument_list pos:line="11" pos:column="45">()<pos:position pos:line="11" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="49"/></expr_stmt>
    }<pos:position pos:line="12" pos:column="6"/></block></then> <else pos:line="12" pos:column="7">else <block pos:line="12" pos:column="12">{
        <decl_stmt><decl><type><name pos:line="13" pos:column="9">cpu_set_t<pos:position pos:line="13" pos:column="18"/></name></type> <name pos:line="13" pos:column="19">cpuSet<pos:position pos:line="13" pos:column="25"/></name></decl>;<pos:position pos:line="13" pos:column="26"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">memcpy<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><operator pos:line="14" pos:column="16">&amp;<pos:position pos:line="14" pos:column="21"/></operator><name pos:line="14" pos:column="17">cpuSet<pos:position pos:line="14" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="25">&amp;<pos:position pos:line="14" pos:column="30"/></operator><name pos:line="14" pos:column="26">theCpuSet<pos:position pos:line="14" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="14" pos:column="37">sizeof<argument_list pos:line="14" pos:column="43">(<argument><expr><name pos:line="14" pos:column="44">cpuSet<pos:position pos:line="14" pos:column="50"/></name></expr></argument>)<pos:position pos:line="14" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="14" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="53"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="15" pos:column="9">(<pos:position pos:line="15" pos:column="10"/></operator><name pos:line="15" pos:column="10">void<pos:position pos:line="15" pos:column="14"/></name><operator pos:line="15" pos:column="14">)<pos:position pos:line="15" pos:column="15"/></operator> <call><name pos:line="15" pos:column="16">CPU_AND<pos:position pos:line="15" pos:column="23"/></name><argument_list pos:line="15" pos:column="23">(<argument><expr><operator pos:line="15" pos:column="24">&amp;<pos:position pos:line="15" pos:column="29"/></operator><name pos:line="15" pos:column="25">cpuSet<pos:position pos:line="15" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="33">&amp;<pos:position pos:line="15" pos:column="38"/></operator><name pos:line="15" pos:column="34">cpuSet<pos:position pos:line="15" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="42">&amp;<pos:position pos:line="15" pos:column="47"/></operator><name pos:line="15" pos:column="43">theOrigCpuSet<pos:position pos:line="15" pos:column="56"/></name></expr></argument>)<pos:position pos:line="15" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="58"/></expr_stmt>
        <if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><call><name pos:line="16" pos:column="13">CPU_COUNT<pos:position pos:line="16" pos:column="22"/></name><argument_list pos:line="16" pos:column="22">(<argument><expr><operator pos:line="16" pos:column="23">&amp;<pos:position pos:line="16" pos:column="28"/></operator><name pos:line="16" pos:column="24">cpuSet<pos:position pos:line="16" pos:column="30"/></name></expr></argument>)<pos:position pos:line="16" pos:column="31"/></argument_list></call> <operator pos:line="16" pos:column="32">&lt;=<pos:position pos:line="16" pos:column="37"/></operator> <literal type="number" pos:line="16" pos:column="35">0<pos:position pos:line="16" pos:column="36"/></literal></expr>)<pos:position pos:line="16" pos:column="37"/></condition><then pos:line="16" pos:column="37"> <block pos:line="16" pos:column="38">{
            <expr_stmt><expr><call><name pos:line="17" pos:column="13">debugs<pos:position pos:line="17" pos:column="19"/></name><argument_list pos:line="17" pos:column="19">(<argument><expr><literal type="number" pos:line="17" pos:column="20">54<pos:position pos:line="17" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="24">DBG_IMPORTANT<pos:position pos:line="17" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="39">"ERROR: invalid CPU affinity for process "<pos:position pos:line="17" pos:column="81"/></literal>
                   <literal type="string" pos:line="18" pos:column="20">"PID "<pos:position pos:line="18" pos:column="26"/></literal> <operator pos:line="18" pos:column="27">&lt;&lt;<pos:position pos:line="18" pos:column="35"/></operator> <call><name pos:line="18" pos:column="30">getpid<pos:position pos:line="18" pos:column="36"/></name><argument_list pos:line="18" pos:column="36">()<pos:position pos:line="18" pos:column="38"/></argument_list></call> <operator pos:line="18" pos:column="39">&lt;&lt;<pos:position pos:line="18" pos:column="47"/></operator> <literal type="string" pos:line="18" pos:column="42">", may be caused by an invalid core in "<pos:position pos:line="18" pos:column="82"/></literal>
                   <literal type="string" pos:line="19" pos:column="20">"'cpu_affinity_map' or by external affinity restrictions"<pos:position pos:line="19" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="79"/></expr_stmt>
        }<pos:position pos:line="20" pos:column="10"/></block></then> <elseif pos:line="20" pos:column="11">else <if pos:line="20" pos:column="16">if <condition pos:line="20" pos:column="19">(<expr><call><name pos:line="20" pos:column="20">sched_setaffinity<pos:position pos:line="20" pos:column="37"/></name><argument_list pos:line="20" pos:column="37">(<argument><expr><literal type="number" pos:line="20" pos:column="38">0<pos:position pos:line="20" pos:column="39"/></literal></expr></argument>, <argument><expr><sizeof pos:line="20" pos:column="41">sizeof<argument_list pos:line="20" pos:column="47">(<argument><expr><name pos:line="20" pos:column="48">cpuSet<pos:position pos:line="20" pos:column="54"/></name></expr></argument>)<pos:position pos:line="20" pos:column="55"/></argument_list></sizeof></expr></argument>, <argument><expr><operator pos:line="20" pos:column="57">&amp;<pos:position pos:line="20" pos:column="62"/></operator><name pos:line="20" pos:column="58">cpuSet<pos:position pos:line="20" pos:column="64"/></name></expr></argument>)<pos:position pos:line="20" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="66"/></condition><then pos:line="20" pos:column="66"> <block pos:line="20" pos:column="67">{
            <expr_stmt><expr><call><name pos:line="21" pos:column="13">debugs<pos:position pos:line="21" pos:column="19"/></name><argument_list pos:line="21" pos:column="19">(<argument><expr><literal type="number" pos:line="21" pos:column="20">54<pos:position pos:line="21" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="24">DBG_IMPORTANT<pos:position pos:line="21" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="39">"ERROR: failed to set CPU affinity for "<pos:position pos:line="21" pos:column="79"/></literal>
                   <literal type="string" pos:line="22" pos:column="20">"process PID "<pos:position pos:line="22" pos:column="34"/></literal> <operator pos:line="22" pos:column="35">&lt;&lt;<pos:position pos:line="22" pos:column="43"/></operator> <call><name pos:line="22" pos:column="38">getpid<pos:position pos:line="22" pos:column="44"/></name><argument_list pos:line="22" pos:column="44">()<pos:position pos:line="22" pos:column="46"/></argument_list></call> <operator pos:line="22" pos:column="47">&lt;&lt;<pos:position pos:line="22" pos:column="55"/></operator> <literal type="string" pos:line="22" pos:column="50">": "<pos:position pos:line="22" pos:column="54"/></literal> <operator pos:line="22" pos:column="55">&lt;&lt;<pos:position pos:line="22" pos:column="63"/></operator> <call><name pos:line="22" pos:column="58">xstrerror<pos:position pos:line="22" pos:column="67"/></name><argument_list pos:line="22" pos:column="67">()<pos:position pos:line="22" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="71"/></expr_stmt>
        }<pos:position pos:line="23" pos:column="10"/></block></then></if></elseif> <else pos:line="23" pos:column="11">else
            <block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="13">success<pos:position pos:line="24" pos:column="20"/></name> <operator pos:line="24" pos:column="21">=<pos:position pos:line="24" pos:column="22"/></operator> <literal type="boolean" pos:line="24" pos:column="23">true<pos:position pos:line="24" pos:column="27"/></literal></expr>;<pos:position pos:line="24" pos:column="28"/></expr_stmt></block></else></if>
    }<pos:position pos:line="25" pos:column="6"/></block></else></if>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><operator pos:line="26" pos:column="9">!<pos:position pos:line="26" pos:column="10"/></operator><name pos:line="26" pos:column="10">success<pos:position pos:line="26" pos:column="17"/></name></expr>)<pos:position pos:line="26" pos:column="18"/></condition><then pos:line="26" pos:column="18">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="9">CPU_ZERO<pos:position pos:line="27" pos:column="17"/></name><argument_list pos:line="27" pos:column="17">(<argument><expr><operator pos:line="27" pos:column="18">&amp;<pos:position pos:line="27" pos:column="23"/></operator><name pos:line="27" pos:column="19">theOrigCpuSet<pos:position pos:line="27" pos:column="32"/></name></expr></argument>)<pos:position pos:line="27" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="34"/></expr_stmt></block></then></if>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
