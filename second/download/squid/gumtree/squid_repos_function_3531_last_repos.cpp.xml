<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3531_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Icap<pos:position pos:line="1" pos:column="22"/></name><operator pos:line="1" pos:column="22">::<pos:position pos:line="1" pos:column="24"/></operator><name pos:line="1" pos:column="24">ModXact<pos:position pos:line="1" pos:column="31"/></name><operator pos:line="1" pos:column="31">::<pos:position pos:line="1" pos:column="33"/></operator><name pos:line="1" pos:column="33">bypassFailure<pos:position pos:line="1" pos:column="46"/></name></name><parameter_list pos:line="1" pos:column="46">()<pos:position pos:line="1" pos:column="48"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="3" pos:column="5">disableBypass<pos:position pos:line="3" pos:column="18"/></name><argument_list pos:line="3" pos:column="18">(<argument><expr><literal type="string" pos:line="3" pos:column="19">"already started to bypass"<pos:position pos:line="3" pos:column="46"/></literal></expr></argument>, <argument><expr><literal type="boolean" pos:line="3" pos:column="48">false<pos:position pos:line="3" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="55"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="5" pos:column="5">Must<pos:position pos:line="5" pos:column="9"/></name><argument_list pos:line="5" pos:column="9">(<argument><expr><operator pos:line="5" pos:column="10">!<pos:position pos:line="5" pos:column="11"/></operator><name pos:line="5" pos:column="11">isRetriable<pos:position pos:line="5" pos:column="22"/></name></expr></argument>)<pos:position pos:line="5" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="24"/></expr_stmt> <comment type="line" pos:line="5" pos:column="25">// or we should not be bypassing</comment>
    <comment type="line" pos:line="6" pos:column="5">// TODO: should the same be enforced for isRepeatable? Check icap_repeat??</comment>

    <expr_stmt><expr><call><name pos:line="8" pos:column="5">prepEchoing<pos:position pos:line="8" pos:column="16"/></name><argument_list pos:line="8" pos:column="16">()<pos:position pos:line="8" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="19"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="10" pos:column="5">startSending<pos:position pos:line="10" pos:column="17"/></name><argument_list pos:line="10" pos:column="17">()<pos:position pos:line="10" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="20"/></expr_stmt>

    <comment type="line" pos:line="12" pos:column="5">// end all activities associated with the ICAP server</comment>

    <expr_stmt><expr><call><name pos:line="14" pos:column="5">stopParsing<pos:position pos:line="14" pos:column="16"/></name><argument_list pos:line="14" pos:column="16">()<pos:position pos:line="14" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="19"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="16" pos:column="5">stopWriting<pos:position pos:line="16" pos:column="16"/></name><argument_list pos:line="16" pos:column="16">(<argument><expr><literal type="boolean" pos:line="16" pos:column="17">true<pos:position pos:line="16" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="23"/></expr_stmt> <comment type="line" pos:line="16" pos:column="24">// or should we force it?</comment>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><call><name pos:line="17" pos:column="9">haveConnection<pos:position pos:line="17" pos:column="23"/></name><argument_list pos:line="17" pos:column="23">()<pos:position pos:line="17" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="26"/></condition><then pos:line="17" pos:column="26"> <block pos:line="17" pos:column="27">{
        <expr_stmt><expr><name pos:line="18" pos:column="9">reuseConnection<pos:position pos:line="18" pos:column="24"/></name> <operator pos:line="18" pos:column="25">=<pos:position pos:line="18" pos:column="26"/></operator> <literal type="boolean" pos:line="18" pos:column="27">false<pos:position pos:line="18" pos:column="32"/></literal></expr>;<pos:position pos:line="18" pos:column="33"/></expr_stmt> <comment type="line" pos:line="18" pos:column="34">// be conservative</comment>
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">cancelRead<pos:position pos:line="19" pos:column="19"/></name><argument_list pos:line="19" pos:column="19">()<pos:position pos:line="19" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="22"/></expr_stmt> <comment type="line" pos:line="19" pos:column="23">// may not work; and we cannot stop connecting either</comment>
        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><operator pos:line="20" pos:column="13">!<pos:position pos:line="20" pos:column="14"/></operator><call><name pos:line="20" pos:column="14">doneWithIo<pos:position pos:line="20" pos:column="24"/></name><argument_list pos:line="20" pos:column="24">()<pos:position pos:line="20" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="27"/></condition><then pos:line="20" pos:column="27">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="13">debugs<pos:position pos:line="21" pos:column="19"/></name><argument_list pos:line="21" pos:column="19">(<argument><expr><literal type="number" pos:line="21" pos:column="20">93<pos:position pos:line="21" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="24">7<pos:position pos:line="21" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="27">HERE<pos:position pos:line="21" pos:column="31"/></name> <operator pos:line="21" pos:column="32">&lt;&lt;<pos:position pos:line="21" pos:column="40"/></operator> <literal type="string" pos:line="21" pos:column="35">"Warning: bypass failed to stop I/O"<pos:position pos:line="21" pos:column="71"/></literal> <operator pos:line="21" pos:column="72">&lt;&lt;<pos:position pos:line="21" pos:column="80"/></operator> <call><name pos:line="21" pos:column="75">status<pos:position pos:line="21" pos:column="81"/></name><argument_list pos:line="21" pos:column="81">()<pos:position pos:line="21" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="85"/></expr_stmt></block></then></if>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="24" pos:column="5">service<pos:position pos:line="24" pos:column="12"/></name><argument_list pos:line="24" pos:column="12">()<pos:position pos:line="24" pos:column="14"/></argument_list></call><operator pos:line="24" pos:column="14">.<pos:position pos:line="24" pos:column="15"/></operator><call><name pos:line="24" pos:column="15">noteFailure<pos:position pos:line="24" pos:column="26"/></name><argument_list pos:line="24" pos:column="26">()<pos:position pos:line="24" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="29"/></expr_stmt> <comment type="line" pos:line="24" pos:column="30">// we are bypassing, but this is still a failure</comment>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
