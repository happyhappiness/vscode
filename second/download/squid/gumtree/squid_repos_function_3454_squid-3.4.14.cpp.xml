<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3454_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">clientStreamNode<pos:position pos:line="1" pos:column="17"/></name> <modifier pos:line="1" pos:column="18">*<pos:position pos:line="1" pos:column="19"/></modifier></type>
<name><name pos:line="2" pos:column="1">clientReplyContext<pos:position pos:line="2" pos:column="19"/></name><operator pos:line="2" pos:column="19">::<pos:position pos:line="2" pos:column="21"/></operator><name pos:line="2" pos:column="21">next<pos:position pos:line="2" pos:column="25"/></name></name><parameter_list pos:line="2" pos:column="25">()<pos:position pos:line="2" pos:column="27"/></parameter_list> <specifier pos:line="2" pos:column="28">const<pos:position pos:line="2" pos:column="33"/></specifier>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name> <argument_list pos:line="4" pos:column="12">( <argument><expr><operator pos:line="4" pos:column="14">(<pos:position pos:line="4" pos:column="15"/></operator><name pos:line="4" pos:column="15">clientStreamNode<pos:position pos:line="4" pos:column="31"/></name><operator pos:line="4" pos:column="31">*<pos:position pos:line="4" pos:column="32"/></operator><operator pos:line="4" pos:column="32">)<pos:position pos:line="4" pos:column="33"/></operator><name><name pos:line="4" pos:column="33">http<pos:position pos:line="4" pos:column="37"/></name><operator pos:line="4" pos:column="37">-&gt;<pos:position pos:line="4" pos:column="42"/></operator><name pos:line="4" pos:column="39">client_stream<pos:position pos:line="4" pos:column="52"/></name><operator pos:line="4" pos:column="52">.<pos:position pos:line="4" pos:column="53"/></operator><name pos:line="4" pos:column="53">head<pos:position pos:line="4" pos:column="57"/></name><operator pos:line="4" pos:column="57">-&gt;<pos:position pos:line="4" pos:column="62"/></operator><name pos:line="4" pos:column="59">next<pos:position pos:line="4" pos:column="63"/></name><operator pos:line="4" pos:column="63">-&gt;<pos:position pos:line="4" pos:column="68"/></operator><name pos:line="4" pos:column="65">data<pos:position pos:line="4" pos:column="69"/></name></name> <operator pos:line="4" pos:column="70">==<pos:position pos:line="4" pos:column="72"/></operator> <call><name pos:line="4" pos:column="73">getNextNode<pos:position pos:line="4" pos:column="84"/></name><argument_list pos:line="4" pos:column="84">()<pos:position pos:line="4" pos:column="86"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="88"/></expr_stmt>
    <return pos:line="5" pos:column="5">return <expr><call><name pos:line="5" pos:column="12">getNextNode<pos:position pos:line="5" pos:column="23"/></name><argument_list pos:line="5" pos:column="23">()<pos:position pos:line="5" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="26"/></return>
}<pos:position pos:line="6" pos:column="2"/></block></function></unit>
