<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4855_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Http<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">Stream<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">packRange<pos:position pos:line="2" pos:column="24"/></name></name><parameter_list pos:line="2" pos:column="24">(<parameter><decl><type><name pos:line="2" pos:column="25">StoreIOBuffer<pos:position pos:line="2" pos:column="38"/></name> <specifier pos:line="2" pos:column="39">const<pos:position pos:line="2" pos:column="44"/></specifier> <modifier pos:line="2" pos:column="45">&amp;<pos:position pos:line="2" pos:column="50"/></modifier></type><name pos:line="2" pos:column="46">source<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="54">MemBuf<pos:position pos:line="2" pos:column="60"/></name> <modifier pos:line="2" pos:column="61">*<pos:position pos:line="2" pos:column="62"/></modifier></type><name pos:line="2" pos:column="62">mb<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="65"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">HttpHdrRangeIter<pos:position pos:line="4" pos:column="21"/></name> <modifier pos:line="4" pos:column="22">*<pos:position pos:line="4" pos:column="23"/></modifier></type> <name pos:line="4" pos:column="24">i<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><operator pos:line="4" pos:column="28">&amp;<pos:position pos:line="4" pos:column="33"/></operator><name><name pos:line="4" pos:column="29">http<pos:position pos:line="4" pos:column="33"/></name><operator pos:line="4" pos:column="33">-&gt;<pos:position pos:line="4" pos:column="38"/></operator><name pos:line="4" pos:column="35">range_iter<pos:position pos:line="4" pos:column="45"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="46"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="5" pos:column="5">Range<pos:position pos:line="5" pos:column="10"/></name><argument_list type="generic" pos:line="5" pos:column="10">&lt;<argument><expr><name pos:line="5" pos:column="11">int64_t<pos:position pos:line="5" pos:column="18"/></name></expr></argument>&gt;<pos:position pos:line="5" pos:column="22"/></argument_list></name></type> <name pos:line="5" pos:column="20">available<pos:position pos:line="5" pos:column="29"/></name><argument_list pos:line="5" pos:column="29">(<argument><expr><call><name><name pos:line="5" pos:column="30">source<pos:position pos:line="5" pos:column="36"/></name><operator pos:line="5" pos:column="36">.<pos:position pos:line="5" pos:column="37"/></operator><name pos:line="5" pos:column="37">range<pos:position pos:line="5" pos:column="42"/></name></name><argument_list pos:line="5" pos:column="42">()<pos:position pos:line="5" pos:column="44"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="45"/></argument_list></decl>;<pos:position pos:line="5" pos:column="46"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name> <specifier pos:line="6" pos:column="10">const<pos:position pos:line="6" pos:column="15"/></specifier> <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type><name pos:line="6" pos:column="17">buf<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><name><name pos:line="6" pos:column="23">source<pos:position pos:line="6" pos:column="29"/></name><operator pos:line="6" pos:column="29">.<pos:position pos:line="6" pos:column="30"/></operator><name pos:line="6" pos:column="30">data<pos:position pos:line="6" pos:column="34"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt>

    <while pos:line="8" pos:column="5">while <condition pos:line="8" pos:column="11">(<expr><call><name><name pos:line="8" pos:column="12">i<pos:position pos:line="8" pos:column="13"/></name><operator pos:line="8" pos:column="13">-&gt;<pos:position pos:line="8" pos:column="18"/></operator><name pos:line="8" pos:column="15">currentSpec<pos:position pos:line="8" pos:column="26"/></name></name><argument_list pos:line="8" pos:column="26">()<pos:position pos:line="8" pos:column="28"/></argument_list></call> <operator pos:line="8" pos:column="29">&amp;&amp;<pos:position pos:line="8" pos:column="39"/></operator> <call><name><name pos:line="8" pos:column="32">available<pos:position pos:line="8" pos:column="41"/></name><operator pos:line="8" pos:column="41">.<pos:position pos:line="8" pos:column="42"/></operator><name pos:line="8" pos:column="42">size<pos:position pos:line="8" pos:column="46"/></name></name><argument_list pos:line="8" pos:column="46">()<pos:position pos:line="8" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="49"/></condition> <block pos:line="8" pos:column="50">{
        <decl_stmt><decl><type><specifier pos:line="9" pos:column="9">const<pos:position pos:line="9" pos:column="14"/></specifier> <name pos:line="9" pos:column="15">size_t<pos:position pos:line="9" pos:column="21"/></name></type> <name pos:line="9" pos:column="22">copy_sz<pos:position pos:line="9" pos:column="29"/></name> <init pos:line="9" pos:column="30">= <expr><call><name pos:line="9" pos:column="32">lengthToSend<pos:position pos:line="9" pos:column="44"/></name><argument_list pos:line="9" pos:column="44">(<argument><expr><name pos:line="9" pos:column="45">available<pos:position pos:line="9" pos:column="54"/></name></expr></argument>)<pos:position pos:line="9" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="56"/></decl_stmt>
        <if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">copy_sz<pos:position pos:line="10" pos:column="20"/></name></expr>)<pos:position pos:line="10" pos:column="21"/></condition><then pos:line="10" pos:column="21"> <block pos:line="10" pos:column="22">{
            <comment type="line" pos:line="11" pos:column="13">// intersection of "have" and "need" ranges must not be empty</comment>
            <expr_stmt><expr><call><name pos:line="12" pos:column="13">assert<pos:position pos:line="12" pos:column="19"/></name><argument_list pos:line="12" pos:column="19">(<argument><expr><name><name pos:line="12" pos:column="20">http<pos:position pos:line="12" pos:column="24"/></name><operator pos:line="12" pos:column="24">-&gt;<pos:position pos:line="12" pos:column="29"/></operator><name pos:line="12" pos:column="26">out<pos:position pos:line="12" pos:column="29"/></name><operator pos:line="12" pos:column="29">.<pos:position pos:line="12" pos:column="30"/></operator><name pos:line="12" pos:column="30">offset<pos:position pos:line="12" pos:column="36"/></name></name> <operator pos:line="12" pos:column="37">&lt;<pos:position pos:line="12" pos:column="41"/></operator> <call><name><name pos:line="12" pos:column="39">i<pos:position pos:line="12" pos:column="40"/></name><operator pos:line="12" pos:column="40">-&gt;<pos:position pos:line="12" pos:column="45"/></operator><name pos:line="12" pos:column="42">currentSpec<pos:position pos:line="12" pos:column="53"/></name></name><argument_list pos:line="12" pos:column="53">()<pos:position pos:line="12" pos:column="55"/></argument_list></call><operator pos:line="12" pos:column="55">-&gt;<pos:position pos:line="12" pos:column="60"/></operator><name pos:line="12" pos:column="57">offset<pos:position pos:line="12" pos:column="63"/></name> <operator pos:line="12" pos:column="64">+<pos:position pos:line="12" pos:column="65"/></operator> <call><name><name pos:line="12" pos:column="66">i<pos:position pos:line="12" pos:column="67"/></name><operator pos:line="12" pos:column="67">-&gt;<pos:position pos:line="12" pos:column="72"/></operator><name pos:line="12" pos:column="69">currentSpec<pos:position pos:line="12" pos:column="80"/></name></name><argument_list pos:line="12" pos:column="80">()<pos:position pos:line="12" pos:column="82"/></argument_list></call><operator pos:line="12" pos:column="82">-&gt;<pos:position pos:line="12" pos:column="87"/></operator><name pos:line="12" pos:column="84">length<pos:position pos:line="12" pos:column="90"/></name></expr></argument>)<pos:position pos:line="12" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="92"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="13" pos:column="13">assert<pos:position pos:line="13" pos:column="19"/></name><argument_list pos:line="13" pos:column="19">(<argument><expr><name><name pos:line="13" pos:column="20">http<pos:position pos:line="13" pos:column="24"/></name><operator pos:line="13" pos:column="24">-&gt;<pos:position pos:line="13" pos:column="29"/></operator><name pos:line="13" pos:column="26">out<pos:position pos:line="13" pos:column="29"/></name><operator pos:line="13" pos:column="29">.<pos:position pos:line="13" pos:column="30"/></operator><name pos:line="13" pos:column="30">offset<pos:position pos:line="13" pos:column="36"/></name></name> <operator pos:line="13" pos:column="37">+<pos:position pos:line="13" pos:column="38"/></operator> <operator pos:line="13" pos:column="39">(<pos:position pos:line="13" pos:column="40"/></operator><name pos:line="13" pos:column="40">int64_t<pos:position pos:line="13" pos:column="47"/></name><operator pos:line="13" pos:column="47">)<pos:position pos:line="13" pos:column="48"/></operator><call><name><name pos:line="13" pos:column="48">available<pos:position pos:line="13" pos:column="57"/></name><operator pos:line="13" pos:column="57">.<pos:position pos:line="13" pos:column="58"/></operator><name pos:line="13" pos:column="58">size<pos:position pos:line="13" pos:column="62"/></name></name><argument_list pos:line="13" pos:column="62">()<pos:position pos:line="13" pos:column="64"/></argument_list></call> <operator pos:line="13" pos:column="65">&gt;<pos:position pos:line="13" pos:column="69"/></operator> <call><name><name pos:line="13" pos:column="67">i<pos:position pos:line="13" pos:column="68"/></name><operator pos:line="13" pos:column="68">-&gt;<pos:position pos:line="13" pos:column="73"/></operator><name pos:line="13" pos:column="70">currentSpec<pos:position pos:line="13" pos:column="81"/></name></name><argument_list pos:line="13" pos:column="81">()<pos:position pos:line="13" pos:column="83"/></argument_list></call><operator pos:line="13" pos:column="83">-&gt;<pos:position pos:line="13" pos:column="88"/></operator><name pos:line="13" pos:column="85">offset<pos:position pos:line="13" pos:column="91"/></name></expr></argument>)<pos:position pos:line="13" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="93"/></expr_stmt>

            <comment type="block" pos:line="15" pos:column="13">/*
             * put boundary and headers at the beginning of a range in a
             * multi-range
             */</comment>
            <if pos:line="19" pos:column="13">if <condition pos:line="19" pos:column="16">(<expr><call><name><name pos:line="19" pos:column="17">http<pos:position pos:line="19" pos:column="21"/></name><operator pos:line="19" pos:column="21">-&gt;<pos:position pos:line="19" pos:column="26"/></operator><name pos:line="19" pos:column="23">multipartRangeRequest<pos:position pos:line="19" pos:column="44"/></name></name><argument_list pos:line="19" pos:column="44">()<pos:position pos:line="19" pos:column="46"/></argument_list></call> <operator pos:line="19" pos:column="47">&amp;&amp;<pos:position pos:line="19" pos:column="57"/></operator> <call><name><name pos:line="19" pos:column="50">i<pos:position pos:line="19" pos:column="51"/></name><operator pos:line="19" pos:column="51">-&gt;<pos:position pos:line="19" pos:column="56"/></operator><name pos:line="19" pos:column="53">debt<pos:position pos:line="19" pos:column="57"/></name></name><argument_list pos:line="19" pos:column="57">()<pos:position pos:line="19" pos:column="59"/></argument_list></call> <operator pos:line="19" pos:column="60">==<pos:position pos:line="19" pos:column="62"/></operator> <call><name><name pos:line="19" pos:column="63">i<pos:position pos:line="19" pos:column="64"/></name><operator pos:line="19" pos:column="64">-&gt;<pos:position pos:line="19" pos:column="69"/></operator><name pos:line="19" pos:column="66">currentSpec<pos:position pos:line="19" pos:column="77"/></name></name><argument_list pos:line="19" pos:column="77">()<pos:position pos:line="19" pos:column="79"/></argument_list></call><operator pos:line="19" pos:column="79">-&gt;<pos:position pos:line="19" pos:column="84"/></operator><name pos:line="19" pos:column="81">length<pos:position pos:line="19" pos:column="87"/></name></expr>)<pos:position pos:line="19" pos:column="88"/></condition><then pos:line="19" pos:column="88"> <block pos:line="19" pos:column="89">{
                <expr_stmt><expr><call><name pos:line="20" pos:column="17">assert<pos:position pos:line="20" pos:column="23"/></name><argument_list pos:line="20" pos:column="23">(<argument><expr><call><name><name pos:line="20" pos:column="24">http<pos:position pos:line="20" pos:column="28"/></name><operator pos:line="20" pos:column="28">-&gt;<pos:position pos:line="20" pos:column="33"/></operator><name pos:line="20" pos:column="30">memObject<pos:position pos:line="20" pos:column="39"/></name></name><argument_list pos:line="20" pos:column="39">()<pos:position pos:line="20" pos:column="41"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="43"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="21" pos:column="17">clientPackRangeHdr<pos:position pos:line="21" pos:column="35"/></name><argument_list pos:line="21" pos:column="35">(
                    <argument><expr><call><name><name pos:line="22" pos:column="21">http<pos:position pos:line="22" pos:column="25"/></name><operator pos:line="22" pos:column="25">-&gt;<pos:position pos:line="22" pos:column="30"/></operator><name pos:line="22" pos:column="27">memObject<pos:position pos:line="22" pos:column="36"/></name></name><argument_list pos:line="22" pos:column="36">()<pos:position pos:line="22" pos:column="38"/></argument_list></call><operator pos:line="22" pos:column="38">-&gt;<pos:position pos:line="22" pos:column="43"/></operator><call><name pos:line="22" pos:column="40">getReply<pos:position pos:line="22" pos:column="48"/></name><argument_list pos:line="22" pos:column="48">()<pos:position pos:line="22" pos:column="50"/></argument_list></call></expr></argument>,  <comment type="block" pos:line="22" pos:column="53">/* original reply */</comment>
                    <argument><expr><call><name><name pos:line="23" pos:column="21">i<pos:position pos:line="23" pos:column="22"/></name><operator pos:line="23" pos:column="22">-&gt;<pos:position pos:line="23" pos:column="27"/></operator><name pos:line="23" pos:column="24">currentSpec<pos:position pos:line="23" pos:column="35"/></name></name><argument_list pos:line="23" pos:column="35">()<pos:position pos:line="23" pos:column="37"/></argument_list></call></expr></argument>,       <comment type="block" pos:line="23" pos:column="45">/* current range */</comment>
                    <argument><expr><name><name pos:line="24" pos:column="21">i<pos:position pos:line="24" pos:column="22"/></name><operator pos:line="24" pos:column="22">-&gt;<pos:position pos:line="24" pos:column="27"/></operator><name pos:line="24" pos:column="24">boundary<pos:position pos:line="24" pos:column="32"/></name></name></expr></argument>,    <comment type="block" pos:line="24" pos:column="37">/* boundary, the same for all */</comment>
                    <argument><expr><name pos:line="25" pos:column="21">mb<pos:position pos:line="25" pos:column="23"/></name></expr></argument>)<pos:position pos:line="25" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="25"/></expr_stmt>
            }<pos:position pos:line="26" pos:column="14"/></block></then></if>

            <comment type="line" pos:line="28" pos:column="13">// append content</comment>
            <expr_stmt><expr><call><name pos:line="29" pos:column="13">debugs<pos:position pos:line="29" pos:column="19"/></name><argument_list pos:line="29" pos:column="19">(<argument><expr><literal type="number" pos:line="29" pos:column="20">33<pos:position pos:line="29" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="24">3<pos:position pos:line="29" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="27">"appending "<pos:position pos:line="29" pos:column="39"/></literal> <operator pos:line="29" pos:column="40">&lt;&lt;<pos:position pos:line="29" pos:column="48"/></operator> <name pos:line="29" pos:column="43">copy_sz<pos:position pos:line="29" pos:column="50"/></name> <operator pos:line="29" pos:column="51">&lt;&lt;<pos:position pos:line="29" pos:column="59"/></operator> <literal type="string" pos:line="29" pos:column="54">" bytes"<pos:position pos:line="29" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="64"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="30" pos:column="13">noteSentBodyBytes<pos:position pos:line="30" pos:column="30"/></name><argument_list pos:line="30" pos:column="30">(<argument><expr><name pos:line="30" pos:column="31">copy_sz<pos:position pos:line="30" pos:column="38"/></name></expr></argument>)<pos:position pos:line="30" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="40"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="31" pos:column="13">mb<pos:position pos:line="31" pos:column="15"/></name><operator pos:line="31" pos:column="15">-&gt;<pos:position pos:line="31" pos:column="20"/></operator><name pos:line="31" pos:column="17">append<pos:position pos:line="31" pos:column="23"/></name></name><argument_list pos:line="31" pos:column="23">(<argument><expr><name pos:line="31" pos:column="24">buf<pos:position pos:line="31" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="29">copy_sz<pos:position pos:line="31" pos:column="36"/></name></expr></argument>)<pos:position pos:line="31" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="38"/></expr_stmt>

            <comment type="line" pos:line="33" pos:column="13">// update offsets</comment>
            <expr_stmt><expr><name><name pos:line="34" pos:column="13">available<pos:position pos:line="34" pos:column="22"/></name><operator pos:line="34" pos:column="22">.<pos:position pos:line="34" pos:column="23"/></operator><name pos:line="34" pos:column="23">start<pos:position pos:line="34" pos:column="28"/></name></name> <operator pos:line="34" pos:column="29">+=<pos:position pos:line="34" pos:column="31"/></operator> <name pos:line="34" pos:column="32">copy_sz<pos:position pos:line="34" pos:column="39"/></name></expr>;<pos:position pos:line="34" pos:column="40"/></expr_stmt>
            <expr_stmt><expr><name pos:line="35" pos:column="13">buf<pos:position pos:line="35" pos:column="16"/></name> <operator pos:line="35" pos:column="17">+=<pos:position pos:line="35" pos:column="19"/></operator> <name pos:line="35" pos:column="20">copy_sz<pos:position pos:line="35" pos:column="27"/></name></expr>;<pos:position pos:line="35" pos:column="28"/></expr_stmt>
        }<pos:position pos:line="36" pos:column="10"/></block></then></if>

        <if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><operator pos:line="38" pos:column="13">!<pos:position pos:line="38" pos:column="14"/></operator><call><name pos:line="38" pos:column="14">canPackMoreRanges<pos:position pos:line="38" pos:column="31"/></name><argument_list pos:line="38" pos:column="31">()<pos:position pos:line="38" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="34"/></condition><then pos:line="38" pos:column="34"> <block pos:line="38" pos:column="35">{
            <expr_stmt><expr><call><name pos:line="39" pos:column="13">debugs<pos:position pos:line="39" pos:column="19"/></name><argument_list pos:line="39" pos:column="19">(<argument><expr><literal type="number" pos:line="39" pos:column="20">33<pos:position pos:line="39" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="24">3<pos:position pos:line="39" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="27">"Returning because !canPackMoreRanges."<pos:position pos:line="39" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="68"/></expr_stmt>
            <if pos:line="40" pos:column="13">if <condition pos:line="40" pos:column="16">(<expr><call><name><name pos:line="40" pos:column="17">i<pos:position pos:line="40" pos:column="18"/></name><operator pos:line="40" pos:column="18">-&gt;<pos:position pos:line="40" pos:column="23"/></operator><name pos:line="40" pos:column="20">debt<pos:position pos:line="40" pos:column="24"/></name></name><argument_list pos:line="40" pos:column="24">()<pos:position pos:line="40" pos:column="26"/></argument_list></call> <operator pos:line="40" pos:column="27">==<pos:position pos:line="40" pos:column="29"/></operator> <literal type="number" pos:line="40" pos:column="30">0<pos:position pos:line="40" pos:column="31"/></literal></expr>)<pos:position pos:line="40" pos:column="32"/></condition><then pos:line="40" pos:column="32">
                <comment type="line" pos:line="41" pos:column="17">// put terminating boundary for multiparts</comment>
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="42" pos:column="17">clientPackTermBound<pos:position pos:line="42" pos:column="36"/></name><argument_list pos:line="42" pos:column="36">(<argument><expr><name><name pos:line="42" pos:column="37">i<pos:position pos:line="42" pos:column="38"/></name><operator pos:line="42" pos:column="38">-&gt;<pos:position pos:line="42" pos:column="43"/></operator><name pos:line="42" pos:column="40">boundary<pos:position pos:line="42" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="50">mb<pos:position pos:line="42" pos:column="52"/></name></expr></argument>)<pos:position pos:line="42" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="54"/></expr_stmt></block></then></if>
            <return pos:line="43" pos:column="13">return;<pos:position pos:line="43" pos:column="20"/></return>
        }<pos:position pos:line="44" pos:column="10"/></block></then></if>

        <decl_stmt><decl><type><name pos:line="46" pos:column="9">int64_t<pos:position pos:line="46" pos:column="16"/></name></type> <name pos:line="46" pos:column="17">nextOffset<pos:position pos:line="46" pos:column="27"/></name> <init pos:line="46" pos:column="28">= <expr><call><name pos:line="46" pos:column="30">getNextRangeOffset<pos:position pos:line="46" pos:column="48"/></name><argument_list pos:line="46" pos:column="48">()<pos:position pos:line="46" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="46" pos:column="51"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="47" pos:column="9">assert<pos:position pos:line="47" pos:column="15"/></name><argument_list pos:line="47" pos:column="15">(<argument><expr><name pos:line="47" pos:column="16">nextOffset<pos:position pos:line="47" pos:column="26"/></name> <operator pos:line="47" pos:column="27">&gt;=<pos:position pos:line="47" pos:column="32"/></operator> <name><name pos:line="47" pos:column="30">http<pos:position pos:line="47" pos:column="34"/></name><operator pos:line="47" pos:column="34">-&gt;<pos:position pos:line="47" pos:column="39"/></operator><name pos:line="47" pos:column="36">out<pos:position pos:line="47" pos:column="39"/></name><operator pos:line="47" pos:column="39">.<pos:position pos:line="47" pos:column="40"/></operator><name pos:line="47" pos:column="40">offset<pos:position pos:line="47" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="48"/></expr_stmt>
        <decl_stmt><decl><type><name pos:line="48" pos:column="9">int64_t<pos:position pos:line="48" pos:column="16"/></name></type> <name pos:line="48" pos:column="17">skip<pos:position pos:line="48" pos:column="21"/></name> <init pos:line="48" pos:column="22">= <expr><name pos:line="48" pos:column="24">nextOffset<pos:position pos:line="48" pos:column="34"/></name> <operator pos:line="48" pos:column="35">-<pos:position pos:line="48" pos:column="36"/></operator> <name><name pos:line="48" pos:column="37">http<pos:position pos:line="48" pos:column="41"/></name><operator pos:line="48" pos:column="41">-&gt;<pos:position pos:line="48" pos:column="46"/></operator><name pos:line="48" pos:column="43">out<pos:position pos:line="48" pos:column="46"/></name><operator pos:line="48" pos:column="46">.<pos:position pos:line="48" pos:column="47"/></operator><name pos:line="48" pos:column="47">offset<pos:position pos:line="48" pos:column="53"/></name></name></expr></init></decl>;<pos:position pos:line="48" pos:column="54"/></decl_stmt>
        <comment type="block" pos:line="49" pos:column="9">/* adjust for not to be transmitted bytes */</comment>
        <expr_stmt><expr><name><name pos:line="50" pos:column="9">http<pos:position pos:line="50" pos:column="13"/></name><operator pos:line="50" pos:column="13">-&gt;<pos:position pos:line="50" pos:column="18"/></operator><name pos:line="50" pos:column="15">out<pos:position pos:line="50" pos:column="18"/></name><operator pos:line="50" pos:column="18">.<pos:position pos:line="50" pos:column="19"/></operator><name pos:line="50" pos:column="19">offset<pos:position pos:line="50" pos:column="25"/></name></name> <operator pos:line="50" pos:column="26">=<pos:position pos:line="50" pos:column="27"/></operator> <name pos:line="50" pos:column="28">nextOffset<pos:position pos:line="50" pos:column="38"/></name></expr>;<pos:position pos:line="50" pos:column="39"/></expr_stmt>

        <if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><call><name><name pos:line="52" pos:column="13">available<pos:position pos:line="52" pos:column="22"/></name><operator pos:line="52" pos:column="22">.<pos:position pos:line="52" pos:column="23"/></operator><name pos:line="52" pos:column="23">size<pos:position pos:line="52" pos:column="27"/></name></name><argument_list pos:line="52" pos:column="27">()<pos:position pos:line="52" pos:column="29"/></argument_list></call> <operator pos:line="52" pos:column="30">&lt;=<pos:position pos:line="52" pos:column="35"/></operator> <operator pos:line="52" pos:column="33">(<pos:position pos:line="52" pos:column="34"/></operator><name pos:line="52" pos:column="34">uint64_t<pos:position pos:line="52" pos:column="42"/></name><operator pos:line="52" pos:column="42">)<pos:position pos:line="52" pos:column="43"/></operator><name pos:line="52" pos:column="43">skip<pos:position pos:line="52" pos:column="47"/></name></expr>)<pos:position pos:line="52" pos:column="48"/></condition><then pos:line="52" pos:column="48">
            <block type="pseudo"><return pos:line="53" pos:column="13">return;<pos:position pos:line="53" pos:column="20"/></return></block></then></if>

        <expr_stmt><expr><name><name pos:line="55" pos:column="9">available<pos:position pos:line="55" pos:column="18"/></name><operator pos:line="55" pos:column="18">.<pos:position pos:line="55" pos:column="19"/></operator><name pos:line="55" pos:column="19">start<pos:position pos:line="55" pos:column="24"/></name></name> <operator pos:line="55" pos:column="25">+=<pos:position pos:line="55" pos:column="27"/></operator> <name pos:line="55" pos:column="28">skip<pos:position pos:line="55" pos:column="32"/></name></expr>;<pos:position pos:line="55" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name pos:line="56" pos:column="9">buf<pos:position pos:line="56" pos:column="12"/></name> <operator pos:line="56" pos:column="13">+=<pos:position pos:line="56" pos:column="15"/></operator> <name pos:line="56" pos:column="16">skip<pos:position pos:line="56" pos:column="20"/></name></expr>;<pos:position pos:line="56" pos:column="21"/></expr_stmt>

        <if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><name pos:line="58" pos:column="13">copy_sz<pos:position pos:line="58" pos:column="20"/></name> <operator pos:line="58" pos:column="21">==<pos:position pos:line="58" pos:column="23"/></operator> <literal type="number" pos:line="58" pos:column="24">0<pos:position pos:line="58" pos:column="25"/></literal></expr>)<pos:position pos:line="58" pos:column="26"/></condition><then pos:line="58" pos:column="26">
            <block type="pseudo"><return pos:line="59" pos:column="13">return;<pos:position pos:line="59" pos:column="20"/></return></block></then></if>
    }<pos:position pos:line="60" pos:column="6"/></block></while>
}<pos:position pos:line="61" pos:column="2"/></block></function></unit>
