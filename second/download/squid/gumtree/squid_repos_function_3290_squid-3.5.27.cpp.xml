<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3290_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">MemStore<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">copyToShm<pos:position pos:line="2" pos:column="20"/></name></name><parameter_list pos:line="2" pos:column="20">(<parameter><decl><type><name pos:line="2" pos:column="21">StoreEntry<pos:position pos:line="2" pos:column="31"/></name> <modifier pos:line="2" pos:column="32">&amp;<pos:position pos:line="2" pos:column="37"/></modifier></type><name pos:line="2" pos:column="33">e<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="35"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// prevents remote readers from getting ENTRY_FWD_HDR_WAIT entries and</comment>
    <comment type="line" pos:line="5" pos:column="5">// not knowing when the wait is over</comment>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><call><name pos:line="6" pos:column="9">EBIT_TEST<pos:position pos:line="6" pos:column="18"/></name><argument_list pos:line="6" pos:column="18">(<argument><expr><name><name pos:line="6" pos:column="19">e<pos:position pos:line="6" pos:column="20"/></name><operator pos:line="6" pos:column="20">.<pos:position pos:line="6" pos:column="21"/></operator><name pos:line="6" pos:column="21">flags<pos:position pos:line="6" pos:column="26"/></name></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="28">ENTRY_FWD_HDR_WAIT<pos:position pos:line="6" pos:column="46"/></name></expr></argument>)<pos:position pos:line="6" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="48"/></condition><then pos:line="6" pos:column="48"> <block pos:line="6" pos:column="49">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">debugs<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><literal type="number" pos:line="7" pos:column="16">20<pos:position pos:line="7" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="20">5<pos:position pos:line="7" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="23">"postponing copying "<pos:position pos:line="7" pos:column="44"/></literal> <operator pos:line="7" pos:column="45">&lt;&lt;<pos:position pos:line="7" pos:column="53"/></operator> <name pos:line="7" pos:column="48">e<pos:position pos:line="7" pos:column="49"/></name> <operator pos:line="7" pos:column="50">&lt;&lt;<pos:position pos:line="7" pos:column="58"/></operator> <literal type="string" pos:line="7" pos:column="53">" for ENTRY_FWD_HDR_WAIT"<pos:position pos:line="7" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="80"/></expr_stmt>
        <return pos:line="8" pos:column="9">return;<pos:position pos:line="8" pos:column="16"/></return>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="11" pos:column="5">assert<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><name pos:line="11" pos:column="12">map<pos:position pos:line="11" pos:column="15"/></name></expr></argument>)<pos:position pos:line="11" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">assert<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><name><name pos:line="12" pos:column="12">e<pos:position pos:line="12" pos:column="13"/></name><operator pos:line="12" pos:column="13">.<pos:position pos:line="12" pos:column="14"/></operator><name pos:line="12" pos:column="14">mem_obj<pos:position pos:line="12" pos:column="21"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="23"/></expr_stmt>

    <decl_stmt><decl><type><specifier pos:line="14" pos:column="5">const<pos:position pos:line="14" pos:column="10"/></specifier> <name pos:line="14" pos:column="11">int32_t<pos:position pos:line="14" pos:column="18"/></name></type> <name pos:line="14" pos:column="19">index<pos:position pos:line="14" pos:column="24"/></name> <init pos:line="14" pos:column="25">= <expr><name><name pos:line="14" pos:column="27">e<pos:position pos:line="14" pos:column="28"/></name><operator pos:line="14" pos:column="28">.<pos:position pos:line="14" pos:column="29"/></operator><name pos:line="14" pos:column="29">mem_obj<pos:position pos:line="14" pos:column="36"/></name><operator pos:line="14" pos:column="36">-&gt;<pos:position pos:line="14" pos:column="41"/></operator><name pos:line="14" pos:column="38">memCache<pos:position pos:line="14" pos:column="46"/></name><operator pos:line="14" pos:column="46">.<pos:position pos:line="14" pos:column="47"/></operator><name pos:line="14" pos:column="47">index<pos:position pos:line="14" pos:column="52"/></name></name></expr></init></decl>;<pos:position pos:line="14" pos:column="53"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">assert<pos:position pos:line="15" pos:column="11"/></name><argument_list pos:line="15" pos:column="11">(<argument><expr><name pos:line="15" pos:column="12">index<pos:position pos:line="15" pos:column="17"/></name> <operator pos:line="15" pos:column="18">&gt;=<pos:position pos:line="15" pos:column="23"/></operator> <literal type="number" pos:line="15" pos:column="21">0<pos:position pos:line="15" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="24"/></expr_stmt>
    <decl_stmt><decl><type><name><name pos:line="16" pos:column="5">Ipc<pos:position pos:line="16" pos:column="8"/></name><operator pos:line="16" pos:column="8">::<pos:position pos:line="16" pos:column="10"/></operator><name pos:line="16" pos:column="10">StoreMapAnchor<pos:position pos:line="16" pos:column="24"/></name></name> <modifier pos:line="16" pos:column="25">&amp;<pos:position pos:line="16" pos:column="30"/></modifier></type><name pos:line="16" pos:column="26">anchor<pos:position pos:line="16" pos:column="32"/></name> <init pos:line="16" pos:column="33">= <expr><call><name><name pos:line="16" pos:column="35">map<pos:position pos:line="16" pos:column="38"/></name><operator pos:line="16" pos:column="38">-&gt;<pos:position pos:line="16" pos:column="43"/></operator><name pos:line="16" pos:column="40">writeableEntry<pos:position pos:line="16" pos:column="54"/></name></name><argument_list pos:line="16" pos:column="54">(<argument><expr><name pos:line="16" pos:column="55">index<pos:position pos:line="16" pos:column="60"/></name></expr></argument>)<pos:position pos:line="16" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="62"/></decl_stmt>

    <decl_stmt><decl><type><specifier pos:line="18" pos:column="5">const<pos:position pos:line="18" pos:column="10"/></specifier> <name pos:line="18" pos:column="11">int64_t<pos:position pos:line="18" pos:column="18"/></name></type> <name pos:line="18" pos:column="19">eSize<pos:position pos:line="18" pos:column="24"/></name> <init pos:line="18" pos:column="25">= <expr><call><name><name pos:line="18" pos:column="27">e<pos:position pos:line="18" pos:column="28"/></name><operator pos:line="18" pos:column="28">.<pos:position pos:line="18" pos:column="29"/></operator><name pos:line="18" pos:column="29">mem_obj<pos:position pos:line="18" pos:column="36"/></name><operator pos:line="18" pos:column="36">-&gt;<pos:position pos:line="18" pos:column="41"/></operator><name pos:line="18" pos:column="38">endOffset<pos:position pos:line="18" pos:column="47"/></name></name><argument_list pos:line="18" pos:column="47">()<pos:position pos:line="18" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="18" pos:column="50"/></decl_stmt>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name><name pos:line="19" pos:column="9">e<pos:position pos:line="19" pos:column="10"/></name><operator pos:line="19" pos:column="10">.<pos:position pos:line="19" pos:column="11"/></operator><name pos:line="19" pos:column="11">mem_obj<pos:position pos:line="19" pos:column="18"/></name><operator pos:line="19" pos:column="18">-&gt;<pos:position pos:line="19" pos:column="23"/></operator><name pos:line="19" pos:column="20">memCache<pos:position pos:line="19" pos:column="28"/></name><operator pos:line="19" pos:column="28">.<pos:position pos:line="19" pos:column="29"/></operator><name pos:line="19" pos:column="29">offset<pos:position pos:line="19" pos:column="35"/></name></name> <operator pos:line="19" pos:column="36">&gt;=<pos:position pos:line="19" pos:column="41"/></operator> <name pos:line="19" pos:column="39">eSize<pos:position pos:line="19" pos:column="44"/></name></expr>)<pos:position pos:line="19" pos:column="45"/></condition><then pos:line="19" pos:column="45"> <block pos:line="19" pos:column="46">{
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">debugs<pos:position pos:line="20" pos:column="15"/></name><argument_list pos:line="20" pos:column="15">(<argument><expr><literal type="number" pos:line="20" pos:column="16">20<pos:position pos:line="20" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="20">5<pos:position pos:line="20" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="23">"postponing copying "<pos:position pos:line="20" pos:column="44"/></literal> <operator pos:line="20" pos:column="45">&lt;&lt;<pos:position pos:line="20" pos:column="53"/></operator> <name pos:line="20" pos:column="48">e<pos:position pos:line="20" pos:column="49"/></name> <operator pos:line="20" pos:column="50">&lt;&lt;<pos:position pos:line="20" pos:column="58"/></operator> <literal type="string" pos:line="20" pos:column="53">" for lack of news: "<pos:position pos:line="20" pos:column="74"/></literal> <operator pos:line="20" pos:column="75">&lt;&lt;<pos:position pos:line="20" pos:column="83"/></operator>
               <name><name pos:line="21" pos:column="16">e<pos:position pos:line="21" pos:column="17"/></name><operator pos:line="21" pos:column="17">.<pos:position pos:line="21" pos:column="18"/></operator><name pos:line="21" pos:column="18">mem_obj<pos:position pos:line="21" pos:column="25"/></name><operator pos:line="21" pos:column="25">-&gt;<pos:position pos:line="21" pos:column="30"/></operator><name pos:line="21" pos:column="27">memCache<pos:position pos:line="21" pos:column="35"/></name><operator pos:line="21" pos:column="35">.<pos:position pos:line="21" pos:column="36"/></operator><name pos:line="21" pos:column="36">offset<pos:position pos:line="21" pos:column="42"/></name></name> <operator pos:line="21" pos:column="43">&lt;&lt;<pos:position pos:line="21" pos:column="51"/></operator> <literal type="string" pos:line="21" pos:column="46">" &gt;= "<pos:position pos:line="21" pos:column="55"/></literal> <operator pos:line="21" pos:column="53">&lt;&lt;<pos:position pos:line="21" pos:column="61"/></operator> <name pos:line="21" pos:column="56">eSize<pos:position pos:line="21" pos:column="61"/></name></expr></argument>)<pos:position pos:line="21" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="63"/></expr_stmt>
        <return pos:line="22" pos:column="9">return;<pos:position pos:line="22" pos:column="16"/></return> <comment type="line" pos:line="22" pos:column="17">// nothing to do (yet)</comment>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>

    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name><name pos:line="25" pos:column="9">anchor<pos:position pos:line="25" pos:column="15"/></name><operator pos:line="25" pos:column="15">.<pos:position pos:line="25" pos:column="16"/></operator><name pos:line="25" pos:column="16">start<pos:position pos:line="25" pos:column="21"/></name></name> <operator pos:line="25" pos:column="22">&lt;<pos:position pos:line="25" pos:column="26"/></operator> <literal type="number" pos:line="25" pos:column="24">0<pos:position pos:line="25" pos:column="25"/></literal></expr>)<pos:position pos:line="25" pos:column="26"/></condition><then pos:line="25" pos:column="26"> <block pos:line="25" pos:column="27">{ <comment type="line" pos:line="25" pos:column="29">// must allocate the very first slot for e</comment>
        <decl_stmt><decl><type><name><name pos:line="26" pos:column="9">Ipc<pos:position pos:line="26" pos:column="12"/></name><operator pos:line="26" pos:column="12">::<pos:position pos:line="26" pos:column="14"/></operator><name pos:line="26" pos:column="14">Mem<pos:position pos:line="26" pos:column="17"/></name><operator pos:line="26" pos:column="17">::<pos:position pos:line="26" pos:column="19"/></operator><name pos:line="26" pos:column="19">PageId<pos:position pos:line="26" pos:column="25"/></name></name></type> <name pos:line="26" pos:column="26">page<pos:position pos:line="26" pos:column="30"/></name></decl>;<pos:position pos:line="26" pos:column="31"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="27" pos:column="9">anchor<pos:position pos:line="27" pos:column="15"/></name><operator pos:line="27" pos:column="15">.<pos:position pos:line="27" pos:column="16"/></operator><name pos:line="27" pos:column="16">start<pos:position pos:line="27" pos:column="21"/></name></name> <operator pos:line="27" pos:column="22">=<pos:position pos:line="27" pos:column="23"/></operator> <call><name pos:line="27" pos:column="24">reserveSapForWriting<pos:position pos:line="27" pos:column="44"/></name><argument_list pos:line="27" pos:column="44">(<argument><expr><name pos:line="27" pos:column="45">page<pos:position pos:line="27" pos:column="49"/></name></expr></argument>)<pos:position pos:line="27" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="51"/></expr_stmt> <comment type="line" pos:line="27" pos:column="52">// throws</comment>
        <expr_stmt><expr><name><name pos:line="28" pos:column="9">extras<pos:position pos:line="28" pos:column="15"/></name><operator pos:line="28" pos:column="15">-&gt;<pos:position pos:line="28" pos:column="20"/></operator><name pos:line="28" pos:column="17">items<pos:position pos:line="28" pos:column="22"/></name><index pos:line="28" pos:column="22">[<expr><name><name pos:line="28" pos:column="23">anchor<pos:position pos:line="28" pos:column="29"/></name><operator pos:line="28" pos:column="29">.<pos:position pos:line="28" pos:column="30"/></operator><name pos:line="28" pos:column="30">start<pos:position pos:line="28" pos:column="35"/></name></name></expr>]<pos:position pos:line="28" pos:column="36"/></index></name><operator pos:line="28" pos:column="36">.<pos:position pos:line="28" pos:column="37"/></operator><name pos:line="28" pos:column="37">page<pos:position pos:line="28" pos:column="41"/></name> <operator pos:line="28" pos:column="42">=<pos:position pos:line="28" pos:column="43"/></operator> <name pos:line="28" pos:column="44">page<pos:position pos:line="28" pos:column="48"/></name></expr>;<pos:position pos:line="28" pos:column="49"/></expr_stmt>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="31" pos:column="5">lastWritingSlice<pos:position pos:line="31" pos:column="21"/></name> <operator pos:line="31" pos:column="22">=<pos:position pos:line="31" pos:column="23"/></operator> <name><name pos:line="31" pos:column="24">anchor<pos:position pos:line="31" pos:column="30"/></name><operator pos:line="31" pos:column="30">.<pos:position pos:line="31" pos:column="31"/></operator><name pos:line="31" pos:column="31">start<pos:position pos:line="31" pos:column="36"/></name></name></expr>;<pos:position pos:line="31" pos:column="37"/></expr_stmt>
    <decl_stmt><decl><type><specifier pos:line="32" pos:column="5">const<pos:position pos:line="32" pos:column="10"/></specifier> <name pos:line="32" pos:column="11">size_t<pos:position pos:line="32" pos:column="17"/></name></type> <name pos:line="32" pos:column="18">sliceCapacity<pos:position pos:line="32" pos:column="31"/></name> <init pos:line="32" pos:column="32">= <expr><call><name><name pos:line="32" pos:column="34">Ipc<pos:position pos:line="32" pos:column="37"/></name><operator pos:line="32" pos:column="37">::<pos:position pos:line="32" pos:column="39"/></operator><name pos:line="32" pos:column="39">Mem<pos:position pos:line="32" pos:column="42"/></name><operator pos:line="32" pos:column="42">::<pos:position pos:line="32" pos:column="44"/></operator><name pos:line="32" pos:column="44">PageSize<pos:position pos:line="32" pos:column="52"/></name></name><argument_list pos:line="32" pos:column="52">()<pos:position pos:line="32" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="32" pos:column="55"/></decl_stmt>

    <comment type="line" pos:line="34" pos:column="5">// fill, skip slices that are already full</comment>
    <comment type="line" pos:line="35" pos:column="5">// Optimize: remember lastWritingSlice in e.mem_obj</comment>
    <while pos:line="36" pos:column="5">while <condition pos:line="36" pos:column="11">(<expr><name><name pos:line="36" pos:column="12">e<pos:position pos:line="36" pos:column="13"/></name><operator pos:line="36" pos:column="13">.<pos:position pos:line="36" pos:column="14"/></operator><name pos:line="36" pos:column="14">mem_obj<pos:position pos:line="36" pos:column="21"/></name><operator pos:line="36" pos:column="21">-&gt;<pos:position pos:line="36" pos:column="26"/></operator><name pos:line="36" pos:column="23">memCache<pos:position pos:line="36" pos:column="31"/></name><operator pos:line="36" pos:column="31">.<pos:position pos:line="36" pos:column="32"/></operator><name pos:line="36" pos:column="32">offset<pos:position pos:line="36" pos:column="38"/></name></name> <operator pos:line="36" pos:column="39">&lt;<pos:position pos:line="36" pos:column="43"/></operator> <name pos:line="36" pos:column="41">eSize<pos:position pos:line="36" pos:column="46"/></name></expr>)<pos:position pos:line="36" pos:column="47"/></condition> <block pos:line="36" pos:column="48">{
        <decl_stmt><decl><type><name><name pos:line="37" pos:column="9">Ipc<pos:position pos:line="37" pos:column="12"/></name><operator pos:line="37" pos:column="12">::<pos:position pos:line="37" pos:column="14"/></operator><name pos:line="37" pos:column="14">StoreMap<pos:position pos:line="37" pos:column="22"/></name><operator pos:line="37" pos:column="22">::<pos:position pos:line="37" pos:column="24"/></operator><name pos:line="37" pos:column="24">Slice<pos:position pos:line="37" pos:column="29"/></name></name> <modifier pos:line="37" pos:column="30">&amp;<pos:position pos:line="37" pos:column="35"/></modifier></type><name pos:line="37" pos:column="31">slice<pos:position pos:line="37" pos:column="36"/></name> <init pos:line="37" pos:column="37">=
            <expr><call><name><name pos:line="38" pos:column="13">map<pos:position pos:line="38" pos:column="16"/></name><operator pos:line="38" pos:column="16">-&gt;<pos:position pos:line="38" pos:column="21"/></operator><name pos:line="38" pos:column="18">writeableSlice<pos:position pos:line="38" pos:column="32"/></name></name><argument_list pos:line="38" pos:column="32">(<argument><expr><name><name pos:line="38" pos:column="33">e<pos:position pos:line="38" pos:column="34"/></name><operator pos:line="38" pos:column="34">.<pos:position pos:line="38" pos:column="35"/></operator><name pos:line="38" pos:column="35">mem_obj<pos:position pos:line="38" pos:column="42"/></name><operator pos:line="38" pos:column="42">-&gt;<pos:position pos:line="38" pos:column="47"/></operator><name pos:line="38" pos:column="44">memCache<pos:position pos:line="38" pos:column="52"/></name><operator pos:line="38" pos:column="52">.<pos:position pos:line="38" pos:column="53"/></operator><name pos:line="38" pos:column="53">index<pos:position pos:line="38" pos:column="58"/></name></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="60">lastWritingSlice<pos:position pos:line="38" pos:column="76"/></name></expr></argument>)<pos:position pos:line="38" pos:column="77"/></argument_list></call></expr></init></decl>;<pos:position pos:line="38" pos:column="78"/></decl_stmt>

        <if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><name><name pos:line="40" pos:column="13">slice<pos:position pos:line="40" pos:column="18"/></name><operator pos:line="40" pos:column="18">.<pos:position pos:line="40" pos:column="19"/></operator><name pos:line="40" pos:column="19">size<pos:position pos:line="40" pos:column="23"/></name></name> <operator pos:line="40" pos:column="24">&gt;=<pos:position pos:line="40" pos:column="29"/></operator> <name pos:line="40" pos:column="27">sliceCapacity<pos:position pos:line="40" pos:column="40"/></name></expr>)<pos:position pos:line="40" pos:column="41"/></condition><then pos:line="40" pos:column="41"> <block pos:line="40" pos:column="42">{
            <if pos:line="41" pos:column="13">if <condition pos:line="41" pos:column="16">(<expr><name><name pos:line="41" pos:column="17">slice<pos:position pos:line="41" pos:column="22"/></name><operator pos:line="41" pos:column="22">.<pos:position pos:line="41" pos:column="23"/></operator><name pos:line="41" pos:column="23">next<pos:position pos:line="41" pos:column="27"/></name></name> <operator pos:line="41" pos:column="28">&gt;=<pos:position pos:line="41" pos:column="33"/></operator> <literal type="number" pos:line="41" pos:column="31">0<pos:position pos:line="41" pos:column="32"/></literal></expr>)<pos:position pos:line="41" pos:column="33"/></condition><then pos:line="41" pos:column="33"> <block pos:line="41" pos:column="34">{
                <expr_stmt><expr><name pos:line="42" pos:column="17">lastWritingSlice<pos:position pos:line="42" pos:column="33"/></name> <operator pos:line="42" pos:column="34">=<pos:position pos:line="42" pos:column="35"/></operator> <name><name pos:line="42" pos:column="36">slice<pos:position pos:line="42" pos:column="41"/></name><operator pos:line="42" pos:column="41">.<pos:position pos:line="42" pos:column="42"/></operator><name pos:line="42" pos:column="42">next<pos:position pos:line="42" pos:column="46"/></name></name></expr>;<pos:position pos:line="42" pos:column="47"/></expr_stmt>
                <continue pos:line="43" pos:column="17">continue;<pos:position pos:line="43" pos:column="26"/></continue>
            }<pos:position pos:line="44" pos:column="14"/></block></then></if>

            <decl_stmt><decl><type><name><name pos:line="46" pos:column="13">Ipc<pos:position pos:line="46" pos:column="16"/></name><operator pos:line="46" pos:column="16">::<pos:position pos:line="46" pos:column="18"/></operator><name pos:line="46" pos:column="18">Mem<pos:position pos:line="46" pos:column="21"/></name><operator pos:line="46" pos:column="21">::<pos:position pos:line="46" pos:column="23"/></operator><name pos:line="46" pos:column="23">PageId<pos:position pos:line="46" pos:column="29"/></name></name></type> <name pos:line="46" pos:column="30">page<pos:position pos:line="46" pos:column="34"/></name></decl>;<pos:position pos:line="46" pos:column="35"/></decl_stmt>
            <expr_stmt><expr><name><name pos:line="47" pos:column="13">slice<pos:position pos:line="47" pos:column="18"/></name><operator pos:line="47" pos:column="18">.<pos:position pos:line="47" pos:column="19"/></operator><name pos:line="47" pos:column="19">next<pos:position pos:line="47" pos:column="23"/></name></name> <operator pos:line="47" pos:column="24">=<pos:position pos:line="47" pos:column="25"/></operator> <name pos:line="47" pos:column="26">lastWritingSlice<pos:position pos:line="47" pos:column="42"/></name> <operator pos:line="47" pos:column="43">=<pos:position pos:line="47" pos:column="44"/></operator> <call><name pos:line="47" pos:column="45">reserveSapForWriting<pos:position pos:line="47" pos:column="65"/></name><argument_list pos:line="47" pos:column="65">(<argument><expr><name pos:line="47" pos:column="66">page<pos:position pos:line="47" pos:column="70"/></name></expr></argument>)<pos:position pos:line="47" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="72"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="48" pos:column="13">extras<pos:position pos:line="48" pos:column="19"/></name><operator pos:line="48" pos:column="19">-&gt;<pos:position pos:line="48" pos:column="24"/></operator><name pos:line="48" pos:column="21">items<pos:position pos:line="48" pos:column="26"/></name><index pos:line="48" pos:column="26">[<expr><name pos:line="48" pos:column="27">lastWritingSlice<pos:position pos:line="48" pos:column="43"/></name></expr>]<pos:position pos:line="48" pos:column="44"/></index></name><operator pos:line="48" pos:column="44">.<pos:position pos:line="48" pos:column="45"/></operator><name pos:line="48" pos:column="45">page<pos:position pos:line="48" pos:column="49"/></name> <operator pos:line="48" pos:column="50">=<pos:position pos:line="48" pos:column="51"/></operator> <name pos:line="48" pos:column="52">page<pos:position pos:line="48" pos:column="56"/></name></expr>;<pos:position pos:line="48" pos:column="57"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="49" pos:column="13">debugs<pos:position pos:line="49" pos:column="19"/></name><argument_list pos:line="49" pos:column="19">(<argument><expr><literal type="number" pos:line="49" pos:column="20">20<pos:position pos:line="49" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="49" pos:column="24">7<pos:position pos:line="49" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="27">"entry "<pos:position pos:line="49" pos:column="35"/></literal> <operator pos:line="49" pos:column="36">&lt;&lt;<pos:position pos:line="49" pos:column="44"/></operator> <name pos:line="49" pos:column="39">index<pos:position pos:line="49" pos:column="44"/></name> <operator pos:line="49" pos:column="45">&lt;&lt;<pos:position pos:line="49" pos:column="53"/></operator> <literal type="string" pos:line="49" pos:column="48">" new slice: "<pos:position pos:line="49" pos:column="62"/></literal> <operator pos:line="49" pos:column="63">&lt;&lt;<pos:position pos:line="49" pos:column="71"/></operator> <name pos:line="49" pos:column="66">lastWritingSlice<pos:position pos:line="49" pos:column="82"/></name></expr></argument>)<pos:position pos:line="49" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="84"/></expr_stmt>
        }<pos:position pos:line="50" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="52" pos:column="9">copyToShmSlice<pos:position pos:line="52" pos:column="23"/></name><argument_list pos:line="52" pos:column="23">(<argument><expr><name pos:line="52" pos:column="24">e<pos:position pos:line="52" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="27">anchor<pos:position pos:line="52" pos:column="33"/></name></expr></argument>)<pos:position pos:line="52" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="53" pos:column="6"/></block></while>

    <expr_stmt><expr><call><name pos:line="55" pos:column="5">debugs<pos:position pos:line="55" pos:column="11"/></name><argument_list pos:line="55" pos:column="11">(<argument><expr><literal type="number" pos:line="55" pos:column="12">20<pos:position pos:line="55" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="55" pos:column="16">7<pos:position pos:line="55" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="19">"mem-cached available "<pos:position pos:line="55" pos:column="42"/></literal> <operator pos:line="55" pos:column="43">&lt;&lt;<pos:position pos:line="55" pos:column="51"/></operator> <name pos:line="55" pos:column="46">eSize<pos:position pos:line="55" pos:column="51"/></name> <operator pos:line="55" pos:column="52">&lt;&lt;<pos:position pos:line="55" pos:column="60"/></operator> <literal type="string" pos:line="55" pos:column="55">" bytes of "<pos:position pos:line="55" pos:column="67"/></literal> <operator pos:line="55" pos:column="68">&lt;&lt;<pos:position pos:line="55" pos:column="76"/></operator> <name pos:line="55" pos:column="71">e<pos:position pos:line="55" pos:column="72"/></name></expr></argument>)<pos:position pos:line="55" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="74"/></expr_stmt>
}<pos:position pos:line="56" pos:column="2"/></block></function></unit>
