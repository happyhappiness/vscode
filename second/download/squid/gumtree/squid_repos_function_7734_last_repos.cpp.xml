<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7734_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">parse_asntype<pos:position pos:line="2" pos:column="14"/></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><name pos:line="2" pos:column="15">FILE<pos:position pos:line="2" pos:column="19"/></name> <modifier pos:line="2" pos:column="20">*<pos:position pos:line="2" pos:column="21"/></modifier></type><name pos:line="2" pos:column="21">fp<pos:position pos:line="2" pos:column="23"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="24"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">type<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name></type> <name><name pos:line="5" pos:column="10">token<pos:position pos:line="5" pos:column="15"/></name><index pos:line="5" pos:column="15">[<expr><literal type="number" pos:line="5" pos:column="16">64<pos:position pos:line="5" pos:column="18"/></literal></expr>]<pos:position pos:line="5" pos:column="19"/></index></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>

    <expr_stmt><expr><name pos:line="7" pos:column="5">type<pos:position pos:line="7" pos:column="9"/></name> <operator pos:line="7" pos:column="10">=<pos:position pos:line="7" pos:column="11"/></operator> <call><name pos:line="7" pos:column="12">get_token<pos:position pos:line="7" pos:column="21"/></name><argument_list pos:line="7" pos:column="21">(<argument><expr><name pos:line="7" pos:column="22">fp<pos:position pos:line="7" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="26">token<pos:position pos:line="7" pos:column="31"/></name></expr></argument>)<pos:position pos:line="7" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="33"/></expr_stmt>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">type<pos:position pos:line="8" pos:column="13"/></name> <operator pos:line="8" pos:column="14">!=<pos:position pos:line="8" pos:column="16"/></operator> <name pos:line="8" pos:column="17">SEQUENCE<pos:position pos:line="8" pos:column="25"/></name></expr>)<pos:position pos:line="8" pos:column="26"/></condition><then pos:line="8" pos:column="26"> <block pos:line="8" pos:column="27">{
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">print_error<pos:position pos:line="9" pos:column="20"/></name><argument_list pos:line="9" pos:column="20">(<argument><expr><literal type="string" pos:line="9" pos:column="21">"Not a sequence"<pos:position pos:line="9" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="39">token<pos:position pos:line="9" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="46">type<pos:position pos:line="9" pos:column="50"/></name></expr></argument>)<pos:position pos:line="9" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="52"/></expr_stmt> <comment type="block" pos:line="9" pos:column="53">/* should we handle this */</comment>
        <return pos:line="10" pos:column="9">return <expr><name pos:line="10" pos:column="16">ENDOFFILE<pos:position pos:line="10" pos:column="25"/></name></expr>;<pos:position pos:line="10" pos:column="26"/></return>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>
    <while pos:line="12" pos:column="5">while <condition pos:line="12" pos:column="11">(<expr><operator pos:line="12" pos:column="12">(<pos:position pos:line="12" pos:column="13"/></operator><name pos:line="12" pos:column="13">type<pos:position pos:line="12" pos:column="17"/></name> <operator pos:line="12" pos:column="18">=<pos:position pos:line="12" pos:column="19"/></operator> <call><name pos:line="12" pos:column="20">get_token<pos:position pos:line="12" pos:column="29"/></name><argument_list pos:line="12" pos:column="29">(<argument><expr><name pos:line="12" pos:column="30">fp<pos:position pos:line="12" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="34">token<pos:position pos:line="12" pos:column="39"/></name></expr></argument>)<pos:position pos:line="12" pos:column="40"/></argument_list></call><operator pos:line="12" pos:column="40">)<pos:position pos:line="12" pos:column="41"/></operator> <operator pos:line="12" pos:column="42">!=<pos:position pos:line="12" pos:column="44"/></operator> <name pos:line="12" pos:column="45">ENDOFFILE<pos:position pos:line="12" pos:column="54"/></name></expr>)<pos:position pos:line="12" pos:column="55"/></condition> <block pos:line="12" pos:column="56">{
        <if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">type<pos:position pos:line="13" pos:column="17"/></name> <operator pos:line="13" pos:column="18">==<pos:position pos:line="13" pos:column="20"/></operator> <name pos:line="13" pos:column="21">RIGHTBRACKET<pos:position pos:line="13" pos:column="33"/></name></expr>)<pos:position pos:line="13" pos:column="34"/></condition><then pos:line="13" pos:column="34">
            <block type="pseudo"><return pos:line="14" pos:column="13">return <expr><name pos:line="14" pos:column="20">type<pos:position pos:line="14" pos:column="24"/></name></expr>;<pos:position pos:line="14" pos:column="25"/></return></block></then></if>
    }<pos:position pos:line="15" pos:column="6"/></block></while>
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">print_error<pos:position pos:line="16" pos:column="16"/></name><argument_list pos:line="16" pos:column="16">(<argument><expr><literal type="string" pos:line="16" pos:column="17">"Expected \"}\""<pos:position pos:line="16" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="35">token<pos:position pos:line="16" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="42">type<pos:position pos:line="16" pos:column="46"/></name></expr></argument>)<pos:position pos:line="16" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="48"/></expr_stmt>
    <return pos:line="17" pos:column="5">return <expr><name pos:line="17" pos:column="12">ENDOFFILE<pos:position pos:line="17" pos:column="21"/></name></expr>;<pos:position pos:line="17" pos:column="22"/></return>
}<pos:position pos:line="18" pos:column="2"/></block></function></unit>
