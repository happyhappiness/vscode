<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5794_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Auth<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">Negotiate<pos:position pos:line="2" pos:column="16"/></name><operator pos:line="2" pos:column="16">::<pos:position pos:line="2" pos:column="18"/></operator><name pos:line="2" pos:column="18">Config<pos:position pos:line="2" pos:column="24"/></name><operator pos:line="2" pos:column="24">::<pos:position pos:line="2" pos:column="26"/></operator><name pos:line="2" pos:column="26">dump<pos:position pos:line="2" pos:column="30"/></name></name><parameter_list pos:line="2" pos:column="30">(<parameter><decl><type><name pos:line="2" pos:column="31">StoreEntry<pos:position pos:line="2" pos:column="41"/></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type> <name pos:line="2" pos:column="44">entry<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="51">const<pos:position pos:line="2" pos:column="56"/></specifier> <name pos:line="2" pos:column="57">char<pos:position pos:line="2" pos:column="61"/></name> <modifier pos:line="2" pos:column="62">*<pos:position pos:line="2" pos:column="63"/></modifier></type><name pos:line="2" pos:column="63">name<pos:position pos:line="2" pos:column="67"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="69">Auth<pos:position pos:line="2" pos:column="73"/></name><operator pos:line="2" pos:column="73">::<pos:position pos:line="2" pos:column="75"/></operator><name pos:line="2" pos:column="75">Config<pos:position pos:line="2" pos:column="81"/></name></name> <modifier pos:line="2" pos:column="82">*<pos:position pos:line="2" pos:column="83"/></modifier></type> <name pos:line="2" pos:column="84">scheme<pos:position pos:line="2" pos:column="90"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="91"/></parameter_list> <specifier pos:line="2" pos:column="92">const<pos:position pos:line="2" pos:column="97"/></specifier>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">!<pos:position pos:line="4" pos:column="10"/></operator><call><name><name pos:line="4" pos:column="10">Auth<pos:position pos:line="4" pos:column="14"/></name><operator pos:line="4" pos:column="14">::<pos:position pos:line="4" pos:column="16"/></operator><name pos:line="4" pos:column="16">Config<pos:position pos:line="4" pos:column="22"/></name><operator pos:line="4" pos:column="22">::<pos:position pos:line="4" pos:column="24"/></operator><name pos:line="4" pos:column="24">dump<pos:position pos:line="4" pos:column="28"/></name></name><argument_list pos:line="4" pos:column="28">(<argument><expr><name pos:line="4" pos:column="29">entry<pos:position pos:line="4" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="36">name<pos:position pos:line="4" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="42">scheme<pos:position pos:line="4" pos:column="48"/></name></expr></argument>)<pos:position pos:line="4" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="50"/></condition><then pos:line="4" pos:column="50">
        <block type="pseudo"><return pos:line="5" pos:column="9">return <expr><literal type="boolean" pos:line="5" pos:column="16">false<pos:position pos:line="5" pos:column="21"/></literal></expr>;<pos:position pos:line="5" pos:column="22"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">storeAppendPrintf<pos:position pos:line="7" pos:column="22"/></name><argument_list pos:line="7" pos:column="22">(<argument><expr><name pos:line="7" pos:column="23">entry<pos:position pos:line="7" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="30">"%s negotiate keep_alive %s\n"<pos:position pos:line="7" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="62">name<pos:position pos:line="7" pos:column="66"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="7" pos:column="68">keep_alive<pos:position pos:line="7" pos:column="78"/></name></expr> ?<pos:position pos:line="7" pos:column="80"/></condition><then pos:line="7" pos:column="80"> <expr><literal type="string" pos:line="7" pos:column="81">"on"<pos:position pos:line="7" pos:column="85"/></literal></expr> <pos:position pos:line="7" pos:column="86"/></then><else pos:line="7" pos:column="86">: <expr><literal type="string" pos:line="7" pos:column="88">"off"<pos:position pos:line="7" pos:column="93"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="7" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="95"/></expr_stmt>
    <return pos:line="8" pos:column="5">return <expr><literal type="boolean" pos:line="8" pos:column="12">true<pos:position pos:line="8" pos:column="16"/></literal></expr>;<pos:position pos:line="8" pos:column="17"/></return>
}<pos:position pos:line="9" pos:column="2"/></block></function></unit>
