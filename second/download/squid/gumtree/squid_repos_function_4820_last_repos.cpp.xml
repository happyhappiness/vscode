<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4820_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Parser<pos:position pos:line="2" pos:column="7"/></name><operator pos:line="2" pos:column="7">::<pos:position pos:line="2" pos:column="9"/></operator><name pos:line="2" pos:column="9">Tokenizer<pos:position pos:line="2" pos:column="18"/></name><operator pos:line="2" pos:column="18">::<pos:position pos:line="2" pos:column="20"/></operator><name pos:line="2" pos:column="20">prefix<pos:position pos:line="2" pos:column="26"/></name></name><parameter_list pos:line="2" pos:column="26">(<parameter><decl><type><name pos:line="2" pos:column="27">SBuf<pos:position pos:line="2" pos:column="31"/></name> <modifier pos:line="2" pos:column="32">&amp;<pos:position pos:line="2" pos:column="37"/></modifier></type><name pos:line="2" pos:column="33">returnedToken<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="48">const<pos:position pos:line="2" pos:column="53"/></specifier> <name pos:line="2" pos:column="54">CharacterSet<pos:position pos:line="2" pos:column="66"/></name> <modifier pos:line="2" pos:column="67">&amp;<pos:position pos:line="2" pos:column="72"/></modifier></type><name pos:line="2" pos:column="68">tokenChars<pos:position pos:line="2" pos:column="78"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="80">const<pos:position pos:line="2" pos:column="85"/></specifier> <name><name pos:line="2" pos:column="86">SBuf<pos:position pos:line="2" pos:column="90"/></name><operator pos:line="2" pos:column="90">::<pos:position pos:line="2" pos:column="92"/></operator><name pos:line="2" pos:column="92">size_type<pos:position pos:line="2" pos:column="101"/></name></name></type> <name pos:line="2" pos:column="102">limit<pos:position pos:line="2" pos:column="107"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="108"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">SBuf<pos:position pos:line="4" pos:column="9"/></name><operator pos:line="4" pos:column="9">::<pos:position pos:line="4" pos:column="11"/></operator><name pos:line="4" pos:column="11">size_type<pos:position pos:line="4" pos:column="20"/></name></name></type> <name pos:line="4" pos:column="21">prefixLen<pos:position pos:line="4" pos:column="30"/></name> <init pos:line="4" pos:column="31">= <expr><call><name><name pos:line="4" pos:column="33">buf_<pos:position pos:line="4" pos:column="37"/></name><operator pos:line="4" pos:column="37">.<pos:position pos:line="4" pos:column="38"/></operator><name pos:line="4" pos:column="38">substr<pos:position pos:line="4" pos:column="44"/></name></name><argument_list pos:line="4" pos:column="44">(<argument><expr><literal type="number" pos:line="4" pos:column="45">0<pos:position pos:line="4" pos:column="46"/></literal></expr></argument>,<argument><expr><name pos:line="4" pos:column="47">limit<pos:position pos:line="4" pos:column="52"/></name></expr></argument>)<pos:position pos:line="4" pos:column="53"/></argument_list></call><operator pos:line="4" pos:column="53">.<pos:position pos:line="4" pos:column="54"/></operator><call><name pos:line="4" pos:column="54">findFirstNotOf<pos:position pos:line="4" pos:column="68"/></name><argument_list pos:line="4" pos:column="68">(<argument><expr><name pos:line="4" pos:column="69">tokenChars<pos:position pos:line="4" pos:column="79"/></name></expr></argument>)<pos:position pos:line="4" pos:column="80"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="81"/></decl_stmt>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><name pos:line="5" pos:column="9">prefixLen<pos:position pos:line="5" pos:column="18"/></name> <operator pos:line="5" pos:column="19">==<pos:position pos:line="5" pos:column="21"/></operator> <literal type="number" pos:line="5" pos:column="22">0<pos:position pos:line="5" pos:column="23"/></literal></expr>)<pos:position pos:line="5" pos:column="24"/></condition><then pos:line="5" pos:column="24"> <block pos:line="5" pos:column="25">{
        <expr_stmt><expr><call><name pos:line="6" pos:column="9">debugs<pos:position pos:line="6" pos:column="15"/></name><argument_list pos:line="6" pos:column="15">(<argument><expr><literal type="number" pos:line="6" pos:column="16">24<pos:position pos:line="6" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="20">8<pos:position pos:line="6" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="23">"no prefix for set "<pos:position pos:line="6" pos:column="43"/></literal> <operator pos:line="6" pos:column="44">&lt;&lt;<pos:position pos:line="6" pos:column="52"/></operator> <name><name pos:line="6" pos:column="47">tokenChars<pos:position pos:line="6" pos:column="57"/></name><operator pos:line="6" pos:column="57">.<pos:position pos:line="6" pos:column="58"/></operator><name pos:line="6" pos:column="58">name<pos:position pos:line="6" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="64"/></expr_stmt>
        <return pos:line="7" pos:column="9">return <expr><literal type="boolean" pos:line="7" pos:column="16">false<pos:position pos:line="7" pos:column="21"/></literal></expr>;<pos:position pos:line="7" pos:column="22"/></return>
    }<pos:position pos:line="8" pos:column="6"/></block></then></if>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">prefixLen<pos:position pos:line="9" pos:column="18"/></name> <operator pos:line="9" pos:column="19">==<pos:position pos:line="9" pos:column="21"/></operator> <name><name pos:line="9" pos:column="22">SBuf<pos:position pos:line="9" pos:column="26"/></name><operator pos:line="9" pos:column="26">::<pos:position pos:line="9" pos:column="28"/></operator><name pos:line="9" pos:column="28">npos<pos:position pos:line="9" pos:column="32"/></name></name> <operator pos:line="9" pos:column="33">&amp;&amp;<pos:position pos:line="9" pos:column="43"/></operator> <operator pos:line="9" pos:column="36">(<pos:position pos:line="9" pos:column="37"/></operator><call><name pos:line="9" pos:column="37">atEnd<pos:position pos:line="9" pos:column="42"/></name><argument_list pos:line="9" pos:column="42">()<pos:position pos:line="9" pos:column="44"/></argument_list></call> <operator pos:line="9" pos:column="45">||<pos:position pos:line="9" pos:column="47"/></operator> <name pos:line="9" pos:column="48">limit<pos:position pos:line="9" pos:column="53"/></name> <operator pos:line="9" pos:column="54">==<pos:position pos:line="9" pos:column="56"/></operator> <literal type="number" pos:line="9" pos:column="57">0<pos:position pos:line="9" pos:column="58"/></literal><operator pos:line="9" pos:column="58">)<pos:position pos:line="9" pos:column="59"/></operator></expr>)<pos:position pos:line="9" pos:column="60"/></condition><then pos:line="9" pos:column="60"> <block pos:line="9" pos:column="61">{
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">debugs<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><literal type="number" pos:line="10" pos:column="16">24<pos:position pos:line="10" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="20">8<pos:position pos:line="10" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="23">"no char in set "<pos:position pos:line="10" pos:column="40"/></literal> <operator pos:line="10" pos:column="41">&lt;&lt;<pos:position pos:line="10" pos:column="49"/></operator> <name><name pos:line="10" pos:column="44">tokenChars<pos:position pos:line="10" pos:column="54"/></name><operator pos:line="10" pos:column="54">.<pos:position pos:line="10" pos:column="55"/></operator><name pos:line="10" pos:column="55">name<pos:position pos:line="10" pos:column="59"/></name></name> <operator pos:line="10" pos:column="60">&lt;&lt;<pos:position pos:line="10" pos:column="68"/></operator> <literal type="string" pos:line="10" pos:column="63">" while looking for prefix"<pos:position pos:line="10" pos:column="90"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="92"/></expr_stmt>
        <return pos:line="11" pos:column="9">return <expr><literal type="boolean" pos:line="11" pos:column="16">false<pos:position pos:line="11" pos:column="21"/></literal></expr>;<pos:position pos:line="11" pos:column="22"/></return>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">prefixLen<pos:position pos:line="13" pos:column="18"/></name> <operator pos:line="13" pos:column="19">==<pos:position pos:line="13" pos:column="21"/></operator> <name><name pos:line="13" pos:column="22">SBuf<pos:position pos:line="13" pos:column="26"/></name><operator pos:line="13" pos:column="26">::<pos:position pos:line="13" pos:column="28"/></operator><name pos:line="13" pos:column="28">npos<pos:position pos:line="13" pos:column="32"/></name></name> <operator pos:line="13" pos:column="33">&amp;&amp;<pos:position pos:line="13" pos:column="43"/></operator> <name pos:line="13" pos:column="36">limit<pos:position pos:line="13" pos:column="41"/></name> <operator pos:line="13" pos:column="42">&gt;<pos:position pos:line="13" pos:column="46"/></operator> <literal type="number" pos:line="13" pos:column="44">0<pos:position pos:line="13" pos:column="45"/></literal></expr>)<pos:position pos:line="13" pos:column="46"/></condition><then pos:line="13" pos:column="46"> <block pos:line="13" pos:column="47">{
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">debugs<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><literal type="number" pos:line="14" pos:column="16">24<pos:position pos:line="14" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="20">8<pos:position pos:line="14" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="23">"whole haystack matched"<pos:position pos:line="14" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><name pos:line="15" pos:column="9">prefixLen<pos:position pos:line="15" pos:column="18"/></name> <operator pos:line="15" pos:column="19">=<pos:position pos:line="15" pos:column="20"/></operator> <name pos:line="15" pos:column="21">limit<pos:position pos:line="15" pos:column="26"/></name></expr>;<pos:position pos:line="15" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">debugs<pos:position pos:line="17" pos:column="11"/></name><argument_list pos:line="17" pos:column="11">(<argument><expr><literal type="number" pos:line="17" pos:column="12">24<pos:position pos:line="17" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="16">8<pos:position pos:line="17" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="19">"found with length "<pos:position pos:line="17" pos:column="39"/></literal> <operator pos:line="17" pos:column="40">&lt;&lt;<pos:position pos:line="17" pos:column="48"/></operator> <name pos:line="17" pos:column="43">prefixLen<pos:position pos:line="17" pos:column="52"/></name></expr></argument>)<pos:position pos:line="17" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><name pos:line="18" pos:column="5">returnedToken<pos:position pos:line="18" pos:column="18"/></name> <operator pos:line="18" pos:column="19">=<pos:position pos:line="18" pos:column="20"/></operator> <call><name pos:line="18" pos:column="21">consume<pos:position pos:line="18" pos:column="28"/></name><argument_list pos:line="18" pos:column="28">(<argument><expr><name pos:line="18" pos:column="29">prefixLen<pos:position pos:line="18" pos:column="38"/></name></expr></argument>)<pos:position pos:line="18" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="40"/></expr_stmt> <comment type="line" pos:line="18" pos:column="41">// cannot be empty after the npos check</comment>
    <return pos:line="19" pos:column="5">return <expr><literal type="boolean" pos:line="19" pos:column="12">true<pos:position pos:line="19" pos:column="16"/></literal></expr>;<pos:position pos:line="19" pos:column="17"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
