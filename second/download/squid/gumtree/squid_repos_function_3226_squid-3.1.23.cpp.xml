<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3226_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">PconnPool<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">push<pos:position pos:line="2" pos:column="16"/></name></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name pos:line="2" pos:column="17">int<pos:position pos:line="2" pos:column="20"/></name></type> <name pos:line="2" pos:column="21">fd<pos:position pos:line="2" pos:column="23"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="25">const<pos:position pos:line="2" pos:column="30"/></specifier> <name pos:line="2" pos:column="31">char<pos:position pos:line="2" pos:column="35"/></name> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type><name pos:line="2" pos:column="37">host<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="43">unsigned<pos:position pos:line="2" pos:column="51"/></name> <name pos:line="2" pos:column="52">short<pos:position pos:line="2" pos:column="57"/></name></type> <name pos:line="2" pos:column="58">port<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="64">const<pos:position pos:line="2" pos:column="69"/></specifier> <name pos:line="2" pos:column="70">char<pos:position pos:line="2" pos:column="74"/></name> <modifier pos:line="2" pos:column="75">*<pos:position pos:line="2" pos:column="76"/></modifier></type><name pos:line="2" pos:column="76">domain<pos:position pos:line="2" pos:column="82"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="84">IpAddress<pos:position pos:line="2" pos:column="93"/></name> <modifier pos:line="2" pos:column="94">&amp;<pos:position pos:line="2" pos:column="99"/></modifier></type><name pos:line="2" pos:column="95">client_address<pos:position pos:line="2" pos:column="109"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="110"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">IdleConnList<pos:position pos:line="4" pos:column="17"/></name> <modifier pos:line="4" pos:column="18">*<pos:position pos:line="4" pos:column="19"/></modifier></type><name pos:line="4" pos:column="19">list<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">char<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">aKey<pos:position pos:line="5" pos:column="21"/></name></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">LOCAL_ARRAY<pos:position pos:line="6" pos:column="16"/></name><argument_list pos:line="6" pos:column="16">(<argument><expr><name pos:line="6" pos:column="17">char<pos:position pos:line="6" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="23">desc<pos:position pos:line="6" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="29">FD_DESC_SZ<pos:position pos:line="6" pos:column="39"/></name></expr></argument>)<pos:position pos:line="6" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="41"/></expr_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><call><name pos:line="8" pos:column="9">fdUsageHigh<pos:position pos:line="8" pos:column="20"/></name><argument_list pos:line="8" pos:column="20">()<pos:position pos:line="8" pos:column="22"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="23"/></condition><then pos:line="8" pos:column="23"> <block pos:line="8" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">debugs<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><literal type="number" pos:line="9" pos:column="16">48<pos:position pos:line="9" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="20">3<pos:position pos:line="9" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="23">"PconnPool::push: Not many unused FDs"<pos:position pos:line="9" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="63"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">comm_close<pos:position pos:line="10" pos:column="19"/></name><argument_list pos:line="10" pos:column="19">(<argument><expr><name pos:line="10" pos:column="20">fd<pos:position pos:line="10" pos:column="22"/></name></expr></argument>)<pos:position pos:line="10" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="24"/></expr_stmt>
        <return pos:line="11" pos:column="9">return;<pos:position pos:line="11" pos:column="16"/></return>
    }<pos:position pos:line="12" pos:column="6"/></block></then> <elseif pos:line="12" pos:column="7">else <if pos:line="12" pos:column="12">if <condition pos:line="12" pos:column="15">(<expr><name pos:line="12" pos:column="16">shutting_down<pos:position pos:line="12" pos:column="29"/></name></expr>)<pos:position pos:line="12" pos:column="30"/></condition><then pos:line="12" pos:column="30"> <block pos:line="12" pos:column="31">{
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">comm_close<pos:position pos:line="13" pos:column="19"/></name><argument_list pos:line="13" pos:column="19">(<argument><expr><name pos:line="13" pos:column="20">fd<pos:position pos:line="13" pos:column="22"/></name></expr></argument>)<pos:position pos:line="13" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">debugs<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><literal type="number" pos:line="14" pos:column="16">48<pos:position pos:line="14" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="20">3<pos:position pos:line="14" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="23">"PconnPool::push: Squid is shutting down. Refusing to do anything"<pos:position pos:line="14" pos:column="89"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="91"/></expr_stmt>
        <return pos:line="15" pos:column="9">return;<pos:position pos:line="15" pos:column="16"/></return>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if></elseif></if>

    <expr_stmt><expr><name pos:line="18" pos:column="5">aKey<pos:position pos:line="18" pos:column="9"/></name> <operator pos:line="18" pos:column="10">=<pos:position pos:line="18" pos:column="11"/></operator> <call><name pos:line="18" pos:column="12">key<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><name pos:line="18" pos:column="16">host<pos:position pos:line="18" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="22">port<pos:position pos:line="18" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="28">domain<pos:position pos:line="18" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="36">client_address<pos:position pos:line="18" pos:column="50"/></name></expr></argument>)<pos:position pos:line="18" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="52"/></expr_stmt>

    <expr_stmt><expr><name pos:line="20" pos:column="5">list<pos:position pos:line="20" pos:column="9"/></name> <operator pos:line="20" pos:column="10">=<pos:position pos:line="20" pos:column="11"/></operator> <operator pos:line="20" pos:column="12">(<pos:position pos:line="20" pos:column="13"/></operator><name pos:line="20" pos:column="13">IdleConnList<pos:position pos:line="20" pos:column="25"/></name> <operator pos:line="20" pos:column="26">*<pos:position pos:line="20" pos:column="27"/></operator><operator pos:line="20" pos:column="27">)<pos:position pos:line="20" pos:column="28"/></operator> <call><name pos:line="20" pos:column="29">hash_lookup<pos:position pos:line="20" pos:column="40"/></name><argument_list pos:line="20" pos:column="40">(<argument><expr><name pos:line="20" pos:column="41">table<pos:position pos:line="20" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="48">aKey<pos:position pos:line="20" pos:column="52"/></name></expr></argument>)<pos:position pos:line="20" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="54"/></expr_stmt>

    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><name pos:line="22" pos:column="9">list<pos:position pos:line="22" pos:column="13"/></name> <operator pos:line="22" pos:column="14">==<pos:position pos:line="22" pos:column="16"/></operator> <name pos:line="22" pos:column="17">NULL<pos:position pos:line="22" pos:column="21"/></name></expr>)<pos:position pos:line="22" pos:column="22"/></condition><then pos:line="22" pos:column="22"> <block pos:line="22" pos:column="23">{
        <expr_stmt><expr><name pos:line="23" pos:column="9">list<pos:position pos:line="23" pos:column="13"/></name> <operator pos:line="23" pos:column="14">=<pos:position pos:line="23" pos:column="15"/></operator> <operator pos:line="23" pos:column="16">new<pos:position pos:line="23" pos:column="19"/></operator> <call><name pos:line="23" pos:column="20">IdleConnList<pos:position pos:line="23" pos:column="32"/></name><argument_list pos:line="23" pos:column="32">(<argument><expr><name pos:line="23" pos:column="33">aKey<pos:position pos:line="23" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="39">this<pos:position pos:line="23" pos:column="43"/></name></expr></argument>)<pos:position pos:line="23" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">debugs<pos:position pos:line="24" pos:column="15"/></name><argument_list pos:line="24" pos:column="15">(<argument><expr><literal type="number" pos:line="24" pos:column="16">48<pos:position pos:line="24" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="20">3<pos:position pos:line="24" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="23">"PconnPool::push: new IdleConnList for {"<pos:position pos:line="24" pos:column="64"/></literal> <operator pos:line="24" pos:column="65">&lt;&lt;<pos:position pos:line="24" pos:column="73"/></operator> <call><name pos:line="24" pos:column="68">hashKeyStr<pos:position pos:line="24" pos:column="78"/></name><argument_list pos:line="24" pos:column="78">(<argument><expr><operator pos:line="24" pos:column="79">&amp;<pos:position pos:line="24" pos:column="84"/></operator><name><name pos:line="24" pos:column="80">list<pos:position pos:line="24" pos:column="84"/></name><operator pos:line="24" pos:column="84">-&gt;<pos:position pos:line="24" pos:column="89"/></operator><name pos:line="24" pos:column="86">hash<pos:position pos:line="24" pos:column="90"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="91"/></argument_list></call> <operator pos:line="24" pos:column="92">&lt;&lt;<pos:position pos:line="24" pos:column="100"/></operator> <literal type="string" pos:line="24" pos:column="95">"}"<pos:position pos:line="24" pos:column="98"/></literal></expr></argument> )<pos:position pos:line="24" pos:column="100"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="101"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">hash_join<pos:position pos:line="25" pos:column="18"/></name><argument_list pos:line="25" pos:column="18">(<argument><expr><name pos:line="25" pos:column="19">table<pos:position pos:line="25" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="26">&amp;<pos:position pos:line="25" pos:column="31"/></operator><name><name pos:line="25" pos:column="27">list<pos:position pos:line="25" pos:column="31"/></name><operator pos:line="25" pos:column="31">-&gt;<pos:position pos:line="25" pos:column="36"/></operator><name pos:line="25" pos:column="33">hash<pos:position pos:line="25" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="26" pos:column="6"/></block></then> <else pos:line="26" pos:column="7">else <block pos:line="26" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">debugs<pos:position pos:line="27" pos:column="15"/></name><argument_list pos:line="27" pos:column="15">(<argument><expr><literal type="number" pos:line="27" pos:column="16">48<pos:position pos:line="27" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="20">3<pos:position pos:line="27" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="23">"PconnPool::push: found IdleConnList for {"<pos:position pos:line="27" pos:column="66"/></literal> <operator pos:line="27" pos:column="67">&lt;&lt;<pos:position pos:line="27" pos:column="75"/></operator> <call><name pos:line="27" pos:column="70">hashKeyStr<pos:position pos:line="27" pos:column="80"/></name><argument_list pos:line="27" pos:column="80">(<argument><expr><operator pos:line="27" pos:column="81">&amp;<pos:position pos:line="27" pos:column="86"/></operator><name><name pos:line="27" pos:column="82">list<pos:position pos:line="27" pos:column="86"/></name><operator pos:line="27" pos:column="86">-&gt;<pos:position pos:line="27" pos:column="91"/></operator><name pos:line="27" pos:column="88">hash<pos:position pos:line="27" pos:column="92"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="93"/></argument_list></call> <operator pos:line="27" pos:column="94">&lt;&lt;<pos:position pos:line="27" pos:column="102"/></operator> <literal type="string" pos:line="27" pos:column="97">"}"<pos:position pos:line="27" pos:column="100"/></literal></expr></argument> )<pos:position pos:line="27" pos:column="102"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="103"/></expr_stmt>
    }<pos:position pos:line="28" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name><name pos:line="30" pos:column="5">list<pos:position pos:line="30" pos:column="9"/></name><operator pos:line="30" pos:column="9">-&gt;<pos:position pos:line="30" pos:column="14"/></operator><name pos:line="30" pos:column="11">push<pos:position pos:line="30" pos:column="15"/></name></name><argument_list pos:line="30" pos:column="15">(<argument><expr><name pos:line="30" pos:column="16">fd<pos:position pos:line="30" pos:column="18"/></name></expr></argument>)<pos:position pos:line="30" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="20"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="32" pos:column="5">assert<pos:position pos:line="32" pos:column="11"/></name><argument_list pos:line="32" pos:column="11">(<argument><expr><operator pos:line="32" pos:column="12">!<pos:position pos:line="32" pos:column="13"/></operator><call><name pos:line="32" pos:column="13">comm_has_incomplete_write<pos:position pos:line="32" pos:column="38"/></name><argument_list pos:line="32" pos:column="38">(<argument><expr><name pos:line="32" pos:column="39">fd<pos:position pos:line="32" pos:column="41"/></name></expr></argument>)<pos:position pos:line="32" pos:column="42"/></argument_list></call></expr></argument>)<pos:position pos:line="32" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">snprintf<pos:position pos:line="33" pos:column="13"/></name><argument_list pos:line="33" pos:column="13">(<argument><expr><name pos:line="33" pos:column="14">desc<pos:position pos:line="33" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="20">FD_DESC_SZ<pos:position pos:line="33" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="32">"%s idle connection"<pos:position pos:line="33" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="54">host<pos:position pos:line="33" pos:column="58"/></name></expr></argument>)<pos:position pos:line="33" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="60"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">fd_note<pos:position pos:line="34" pos:column="12"/></name><argument_list pos:line="34" pos:column="12">(<argument><expr><name pos:line="34" pos:column="13">fd<pos:position pos:line="34" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="17">desc<pos:position pos:line="34" pos:column="21"/></name></expr></argument>)<pos:position pos:line="34" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">debugs<pos:position pos:line="35" pos:column="11"/></name><argument_list pos:line="35" pos:column="11">(<argument><expr><literal type="number" pos:line="35" pos:column="12">48<pos:position pos:line="35" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="16">3<pos:position pos:line="35" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="19">"PconnPool::push: pushed FD "<pos:position pos:line="35" pos:column="48"/></literal> <operator pos:line="35" pos:column="49">&lt;&lt;<pos:position pos:line="35" pos:column="57"/></operator> <name pos:line="35" pos:column="52">fd<pos:position pos:line="35" pos:column="54"/></name> <operator pos:line="35" pos:column="55">&lt;&lt;<pos:position pos:line="35" pos:column="63"/></operator> <literal type="string" pos:line="35" pos:column="58">" for "<pos:position pos:line="35" pos:column="65"/></literal> <operator pos:line="35" pos:column="66">&lt;&lt;<pos:position pos:line="35" pos:column="74"/></operator> <name pos:line="35" pos:column="69">aKey<pos:position pos:line="35" pos:column="73"/></name></expr></argument>)<pos:position pos:line="35" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="75"/></expr_stmt>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
