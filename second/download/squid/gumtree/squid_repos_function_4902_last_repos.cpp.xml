<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4902_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Http<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">One<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">Parser<pos:position pos:line="2" pos:column="18"/></name><operator pos:line="2" pos:column="18">::<pos:position pos:line="2" pos:column="20"/></operator><name pos:line="2" pos:column="20">unfoldMime<pos:position pos:line="2" pos:column="30"/></name></name><parameter_list pos:line="2" pos:column="30">()<pos:position pos:line="2" pos:column="32"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">Http1<pos:position pos:line="4" pos:column="10"/></name><operator pos:line="4" pos:column="10">::<pos:position pos:line="4" pos:column="12"/></operator><name pos:line="4" pos:column="12">Tokenizer<pos:position pos:line="4" pos:column="21"/></name></name></type> <name pos:line="4" pos:column="22">tok<pos:position pos:line="4" pos:column="25"/></name><argument_list pos:line="4" pos:column="25">(<argument><expr><name pos:line="4" pos:column="26">mimeHeaderBlock_<pos:position pos:line="4" pos:column="42"/></name></expr></argument>)<pos:position pos:line="4" pos:column="43"/></argument_list></decl>;<pos:position pos:line="4" pos:column="44"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <specifier pos:line="5" pos:column="11">auto<pos:position pos:line="5" pos:column="15"/></specifier></type> <name pos:line="5" pos:column="16">szLimit<pos:position pos:line="5" pos:column="23"/></name> <init pos:line="5" pos:column="24">= <expr><call><name><name pos:line="5" pos:column="26">mimeHeaderBlock_<pos:position pos:line="5" pos:column="42"/></name><operator pos:line="5" pos:column="42">.<pos:position pos:line="5" pos:column="43"/></operator><name pos:line="5" pos:column="43">length<pos:position pos:line="5" pos:column="49"/></name></name><argument_list pos:line="5" pos:column="49">()<pos:position pos:line="5" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="52"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="6" pos:column="5">mimeHeaderBlock_<pos:position pos:line="6" pos:column="21"/></name><operator pos:line="6" pos:column="21">.<pos:position pos:line="6" pos:column="22"/></operator><name pos:line="6" pos:column="22">clear<pos:position pos:line="6" pos:column="27"/></name></name><argument_list pos:line="6" pos:column="27">()<pos:position pos:line="6" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="30"/></expr_stmt>
    <comment type="line" pos:line="7" pos:column="5">// prevent the mime sender being able to make append() realloc/grow multiple times.</comment>
    <expr_stmt><expr><call><name><name pos:line="8" pos:column="5">mimeHeaderBlock_<pos:position pos:line="8" pos:column="21"/></name><operator pos:line="8" pos:column="21">.<pos:position pos:line="8" pos:column="22"/></operator><name pos:line="8" pos:column="22">reserveSpace<pos:position pos:line="8" pos:column="34"/></name></name><argument_list pos:line="8" pos:column="34">(<argument><expr><name pos:line="8" pos:column="35">szLimit<pos:position pos:line="8" pos:column="42"/></name></expr></argument>)<pos:position pos:line="8" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="44"/></expr_stmt>

    <decl_stmt><decl><specifier pos:line="10" pos:column="5">static<pos:position pos:line="10" pos:column="11"/></specifier> <type><specifier pos:line="10" pos:column="12">const<pos:position pos:line="10" pos:column="17"/></specifier> <name pos:line="10" pos:column="18">CharacterSet<pos:position pos:line="10" pos:column="30"/></name></type> <name pos:line="10" pos:column="31">nonCRLF<pos:position pos:line="10" pos:column="38"/></name> <init pos:line="10" pos:column="39">= <expr><operator pos:line="10" pos:column="41">(<pos:position pos:line="10" pos:column="42"/></operator><name><name pos:line="10" pos:column="42">CharacterSet<pos:position pos:line="10" pos:column="54"/></name><operator pos:line="10" pos:column="54">::<pos:position pos:line="10" pos:column="56"/></operator><name pos:line="10" pos:column="56">CR<pos:position pos:line="10" pos:column="58"/></name></name> <operator pos:line="10" pos:column="59">+<pos:position pos:line="10" pos:column="60"/></operator> <name><name pos:line="10" pos:column="61">CharacterSet<pos:position pos:line="10" pos:column="73"/></name><operator pos:line="10" pos:column="73">::<pos:position pos:line="10" pos:column="75"/></operator><name pos:line="10" pos:column="75">LF<pos:position pos:line="10" pos:column="77"/></name></name><operator pos:line="10" pos:column="77">)<pos:position pos:line="10" pos:column="78"/></operator><operator pos:line="10" pos:column="78">.<pos:position pos:line="10" pos:column="79"/></operator><call><name pos:line="10" pos:column="79">complement<pos:position pos:line="10" pos:column="89"/></name><argument_list pos:line="10" pos:column="89">()<pos:position pos:line="10" pos:column="91"/></argument_list></call><operator pos:line="10" pos:column="91">.<pos:position pos:line="10" pos:column="92"/></operator><call><name pos:line="10" pos:column="92">rename<pos:position pos:line="10" pos:column="98"/></name><argument_list pos:line="10" pos:column="98">(<argument><expr><literal type="string" pos:line="10" pos:column="99">"non-CRLF"<pos:position pos:line="10" pos:column="109"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="110"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="111"/></decl_stmt>

    <while pos:line="12" pos:column="5">while <condition pos:line="12" pos:column="11">(<expr><operator pos:line="12" pos:column="12">!<pos:position pos:line="12" pos:column="13"/></operator><call><name><name pos:line="12" pos:column="13">tok<pos:position pos:line="12" pos:column="16"/></name><operator pos:line="12" pos:column="16">.<pos:position pos:line="12" pos:column="17"/></operator><name pos:line="12" pos:column="17">atEnd<pos:position pos:line="12" pos:column="22"/></name></name><argument_list pos:line="12" pos:column="22">()<pos:position pos:line="12" pos:column="24"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="25"/></condition> <block pos:line="12" pos:column="26">{
        <decl_stmt><decl><type><specifier pos:line="13" pos:column="9">const<pos:position pos:line="13" pos:column="14"/></specifier> <name pos:line="13" pos:column="15">SBuf<pos:position pos:line="13" pos:column="19"/></name></type> <name pos:line="13" pos:column="20">all<pos:position pos:line="13" pos:column="23"/></name><argument_list pos:line="13" pos:column="23">(<argument><expr><call><name><name pos:line="13" pos:column="24">tok<pos:position pos:line="13" pos:column="27"/></name><operator pos:line="13" pos:column="27">.<pos:position pos:line="13" pos:column="28"/></operator><name pos:line="13" pos:column="28">remaining<pos:position pos:line="13" pos:column="37"/></name></name><argument_list pos:line="13" pos:column="37">()<pos:position pos:line="13" pos:column="39"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="40"/></argument_list></decl>;<pos:position pos:line="13" pos:column="41"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">const<pos:position pos:line="14" pos:column="14"/></specifier> <specifier pos:line="14" pos:column="15">auto<pos:position pos:line="14" pos:column="19"/></specifier></type> <name pos:line="14" pos:column="20">blobLen<pos:position pos:line="14" pos:column="27"/></name> <init pos:line="14" pos:column="28">= <expr><call><name><name pos:line="14" pos:column="30">tok<pos:position pos:line="14" pos:column="33"/></name><operator pos:line="14" pos:column="33">.<pos:position pos:line="14" pos:column="34"/></operator><name pos:line="14" pos:column="34">skipAll<pos:position pos:line="14" pos:column="41"/></name></name><argument_list pos:line="14" pos:column="41">(<argument><expr><name pos:line="14" pos:column="42">nonCRLF<pos:position pos:line="14" pos:column="49"/></name></expr></argument>)<pos:position pos:line="14" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="51"/></decl_stmt> <comment type="line" pos:line="14" pos:column="52">// may not be there</comment>
        <decl_stmt><decl><type><specifier pos:line="15" pos:column="9">const<pos:position pos:line="15" pos:column="14"/></specifier> <specifier pos:line="15" pos:column="15">auto<pos:position pos:line="15" pos:column="19"/></specifier></type> <name pos:line="15" pos:column="20">crLen<pos:position pos:line="15" pos:column="25"/></name> <init pos:line="15" pos:column="26">= <expr><call><name><name pos:line="15" pos:column="28">tok<pos:position pos:line="15" pos:column="31"/></name><operator pos:line="15" pos:column="31">.<pos:position pos:line="15" pos:column="32"/></operator><name pos:line="15" pos:column="32">skipAll<pos:position pos:line="15" pos:column="39"/></name></name><argument_list pos:line="15" pos:column="39">(<argument><expr><name><name pos:line="15" pos:column="40">CharacterSet<pos:position pos:line="15" pos:column="52"/></name><operator pos:line="15" pos:column="52">::<pos:position pos:line="15" pos:column="54"/></operator><name pos:line="15" pos:column="54">CR<pos:position pos:line="15" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="58"/></decl_stmt> <comment type="line" pos:line="15" pos:column="59">// may not be there</comment>
        <decl_stmt><decl><type><specifier pos:line="16" pos:column="9">const<pos:position pos:line="16" pos:column="14"/></specifier> <specifier pos:line="16" pos:column="15">auto<pos:position pos:line="16" pos:column="19"/></specifier></type> <name pos:line="16" pos:column="20">lfLen<pos:position pos:line="16" pos:column="25"/></name> <init pos:line="16" pos:column="26">= <expr><call><name><name pos:line="16" pos:column="28">tok<pos:position pos:line="16" pos:column="31"/></name><operator pos:line="16" pos:column="31">.<pos:position pos:line="16" pos:column="32"/></operator><name pos:line="16" pos:column="32">skipOne<pos:position pos:line="16" pos:column="39"/></name></name><argument_list pos:line="16" pos:column="39">(<argument><expr><name><name pos:line="16" pos:column="40">CharacterSet<pos:position pos:line="16" pos:column="52"/></name><operator pos:line="16" pos:column="52">::<pos:position pos:line="16" pos:column="54"/></operator><name pos:line="16" pos:column="54">LF<pos:position pos:line="16" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="58"/></decl_stmt> <comment type="line" pos:line="16" pos:column="59">// may not be there</comment>

        <if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">lfLen<pos:position pos:line="18" pos:column="18"/></name> <operator pos:line="18" pos:column="19">&amp;&amp;<pos:position pos:line="18" pos:column="29"/></operator> <call><name><name pos:line="18" pos:column="22">tok<pos:position pos:line="18" pos:column="25"/></name><operator pos:line="18" pos:column="25">.<pos:position pos:line="18" pos:column="26"/></operator><name pos:line="18" pos:column="26">skipAll<pos:position pos:line="18" pos:column="33"/></name></name><argument_list pos:line="18" pos:column="33">(<argument><expr><name><name pos:line="18" pos:column="34">CharacterSet<pos:position pos:line="18" pos:column="46"/></name><operator pos:line="18" pos:column="46">::<pos:position pos:line="18" pos:column="48"/></operator><name pos:line="18" pos:column="48">WSP<pos:position pos:line="18" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="53"/></condition><then pos:line="18" pos:column="53"> <block pos:line="18" pos:column="54">{ <comment type="line" pos:line="18" pos:column="56">// obs-fold!</comment>
            <expr_stmt><expr><call><name><name pos:line="19" pos:column="13">mimeHeaderBlock_<pos:position pos:line="19" pos:column="29"/></name><operator pos:line="19" pos:column="29">.<pos:position pos:line="19" pos:column="30"/></operator><name pos:line="19" pos:column="30">append<pos:position pos:line="19" pos:column="36"/></name></name><argument_list pos:line="19" pos:column="36">(<argument><expr><call><name><name pos:line="19" pos:column="37">all<pos:position pos:line="19" pos:column="40"/></name><operator pos:line="19" pos:column="40">.<pos:position pos:line="19" pos:column="41"/></operator><name pos:line="19" pos:column="41">substr<pos:position pos:line="19" pos:column="47"/></name></name><argument_list pos:line="19" pos:column="47">(<argument><expr><literal type="number" pos:line="19" pos:column="48">0<pos:position pos:line="19" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="51">blobLen<pos:position pos:line="19" pos:column="58"/></name></expr></argument>)<pos:position pos:line="19" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="61"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="20" pos:column="13">mimeHeaderBlock_<pos:position pos:line="20" pos:column="29"/></name><operator pos:line="20" pos:column="29">.<pos:position pos:line="20" pos:column="30"/></operator><name pos:line="20" pos:column="30">append<pos:position pos:line="20" pos:column="36"/></name></name><argument_list pos:line="20" pos:column="36">(<argument><expr><literal type="char" pos:line="20" pos:column="37">' '<pos:position pos:line="20" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="42"/></expr_stmt> <comment type="line" pos:line="20" pos:column="43">// replace one obs-fold with one SP</comment>
        }<pos:position pos:line="21" pos:column="10"/></block></then> <else pos:line="21" pos:column="11">else
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="22" pos:column="13">mimeHeaderBlock_<pos:position pos:line="22" pos:column="29"/></name><operator pos:line="22" pos:column="29">.<pos:position pos:line="22" pos:column="30"/></operator><name pos:line="22" pos:column="30">append<pos:position pos:line="22" pos:column="36"/></name></name><argument_list pos:line="22" pos:column="36">(<argument><expr><call><name><name pos:line="22" pos:column="37">all<pos:position pos:line="22" pos:column="40"/></name><operator pos:line="22" pos:column="40">.<pos:position pos:line="22" pos:column="41"/></operator><name pos:line="22" pos:column="41">substr<pos:position pos:line="22" pos:column="47"/></name></name><argument_list pos:line="22" pos:column="47">(<argument><expr><literal type="number" pos:line="22" pos:column="48">0<pos:position pos:line="22" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="51">blobLen<pos:position pos:line="22" pos:column="58"/></name> <operator pos:line="22" pos:column="59">+<pos:position pos:line="22" pos:column="60"/></operator> <name pos:line="22" pos:column="61">crLen<pos:position pos:line="22" pos:column="66"/></name> <operator pos:line="22" pos:column="67">+<pos:position pos:line="22" pos:column="68"/></operator> <name pos:line="22" pos:column="69">lfLen<pos:position pos:line="22" pos:column="74"/></name></expr></argument>)<pos:position pos:line="22" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="77"/></expr_stmt></block></else></if>
    }<pos:position pos:line="23" pos:column="6"/></block></while>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
