<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7459_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Security<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">HandshakeParser<pos:position pos:line="2" pos:column="26"/></name><operator pos:line="2" pos:column="26">::<pos:position pos:line="2" pos:column="28"/></operator><name pos:line="2" pos:column="28">ParseCertificate<pos:position pos:line="2" pos:column="44"/></name></name><parameter_list pos:line="2" pos:column="44">(<parameter><decl><type><specifier pos:line="2" pos:column="45">const<pos:position pos:line="2" pos:column="50"/></specifier> <name pos:line="2" pos:column="51">SBuf<pos:position pos:line="2" pos:column="55"/></name> <modifier pos:line="2" pos:column="56">&amp;<pos:position pos:line="2" pos:column="61"/></modifier></type><name pos:line="2" pos:column="57">raw<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="62">Security<pos:position pos:line="2" pos:column="70"/></name><operator pos:line="2" pos:column="70">::<pos:position pos:line="2" pos:column="72"/></operator><name pos:line="2" pos:column="72">CertPointer<pos:position pos:line="2" pos:column="83"/></name></name> <modifier pos:line="2" pos:column="84">&amp;<pos:position pos:line="2" pos:column="89"/></modifier></type><name pos:line="2" pos:column="85">pCert<pos:position pos:line="2" pos:column="90"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="91"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:if pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">if<pos:position pos:line="4" pos:column="4"/></cpp:directive> <expr><name pos:line="4" pos:column="5">USE_OPENSSL<pos:position pos:line="4" pos:column="16"/></name></expr></cpp:if>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">auto<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">x509Start<pos:position pos:line="5" pos:column="19"/></name> <init pos:line="5" pos:column="20">= <expr><cast type="reinterpret" pos:line="5" pos:column="22">reinterpret_cast<argument_list type="generic" pos:line="5" pos:column="38">&lt;<argument><expr><specifier pos:line="5" pos:column="39">const<pos:position pos:line="5" pos:column="44"/></specifier> <name pos:line="5" pos:column="45">unsigned<pos:position pos:line="5" pos:column="53"/></name> <name pos:line="5" pos:column="54">char<pos:position pos:line="5" pos:column="58"/></name> <operator pos:line="5" pos:column="59">*<pos:position pos:line="5" pos:column="60"/></operator></expr></argument>&gt;<pos:position pos:line="5" pos:column="64"/></argument_list><argument_list pos:line="5" pos:column="61">(<argument><expr><call><name><name pos:line="5" pos:column="62">raw<pos:position pos:line="5" pos:column="65"/></name><operator pos:line="5" pos:column="65">.<pos:position pos:line="5" pos:column="66"/></operator><name pos:line="5" pos:column="66">rawContent<pos:position pos:line="5" pos:column="76"/></name></name><argument_list pos:line="5" pos:column="76">()<pos:position pos:line="5" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="79"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="5" pos:column="80"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">auto<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">x509Pos<pos:position pos:line="6" pos:column="17"/></name> <init pos:line="6" pos:column="18">= <expr><name pos:line="6" pos:column="20">x509Start<pos:position pos:line="6" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">X509<pos:position pos:line="7" pos:column="9"/></name> <modifier pos:line="7" pos:column="10">*<pos:position pos:line="7" pos:column="11"/></modifier></type><name pos:line="7" pos:column="11">x509<pos:position pos:line="7" pos:column="15"/></name> <init pos:line="7" pos:column="16">= <expr><call><name pos:line="7" pos:column="18">d2i_X509<pos:position pos:line="7" pos:column="26"/></name><argument_list pos:line="7" pos:column="26">(<argument><expr><literal type="null" pos:line="7" pos:column="27">nullptr<pos:position pos:line="7" pos:column="34"/></literal></expr></argument>, <argument><expr><operator pos:line="7" pos:column="36">&amp;<pos:position pos:line="7" pos:column="41"/></operator><name pos:line="7" pos:column="37">x509Pos<pos:position pos:line="7" pos:column="44"/></name></expr></argument>, <argument><expr><call><name><name pos:line="7" pos:column="46">raw<pos:position pos:line="7" pos:column="49"/></name><operator pos:line="7" pos:column="49">.<pos:position pos:line="7" pos:column="50"/></operator><name pos:line="7" pos:column="50">length<pos:position pos:line="7" pos:column="56"/></name></name><argument_list pos:line="7" pos:column="56">()<pos:position pos:line="7" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="60"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="8" pos:column="5">pCert<pos:position pos:line="8" pos:column="10"/></name><operator pos:line="8" pos:column="10">.<pos:position pos:line="8" pos:column="11"/></operator><name pos:line="8" pos:column="11">resetWithoutLocking<pos:position pos:line="8" pos:column="30"/></name></name><argument_list pos:line="8" pos:column="30">(<argument><expr><name pos:line="8" pos:column="31">x509<pos:position pos:line="8" pos:column="35"/></name></expr></argument>)<pos:position pos:line="8" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">Must<pos:position pos:line="9" pos:column="9"/></name><argument_list pos:line="9" pos:column="9">(<argument><expr><name pos:line="9" pos:column="10">x509<pos:position pos:line="9" pos:column="14"/></name></expr></argument>)<pos:position pos:line="9" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="16"/></expr_stmt> <comment type="line" pos:line="9" pos:column="17">// successfully parsed</comment>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">Must<pos:position pos:line="10" pos:column="9"/></name><argument_list pos:line="10" pos:column="9">(<argument><expr><name pos:line="10" pos:column="10">x509Pos<pos:position pos:line="10" pos:column="17"/></name> <operator pos:line="10" pos:column="18">==<pos:position pos:line="10" pos:column="20"/></operator> <name pos:line="10" pos:column="21">x509Start<pos:position pos:line="10" pos:column="30"/></name> <operator pos:line="10" pos:column="31">+<pos:position pos:line="10" pos:column="32"/></operator> <call><name><name pos:line="10" pos:column="33">raw<pos:position pos:line="10" pos:column="36"/></name><operator pos:line="10" pos:column="36">.<pos:position pos:line="10" pos:column="37"/></operator><name pos:line="10" pos:column="37">length<pos:position pos:line="10" pos:column="43"/></name></name><argument_list pos:line="10" pos:column="43">()<pos:position pos:line="10" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="47"/></expr_stmt> <comment type="line" pos:line="10" pos:column="48">// no leftovers</comment>
<cpp:else pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">else<pos:position pos:line="11" pos:column="6"/></cpp:directive></cpp:else>
    <comment type="line" pos:line="12" pos:column="5">// workaround GCC -O3 error with unused variables. see bug 4663.</comment>
    <expr_stmt><expr><operator pos:line="13" pos:column="5">(<pos:position pos:line="13" pos:column="6"/></operator><name pos:line="13" pos:column="6">void<pos:position pos:line="13" pos:column="10"/></name><operator pos:line="13" pos:column="10">)<pos:position pos:line="13" pos:column="11"/></operator><name pos:line="13" pos:column="11">pCert<pos:position pos:line="13" pos:column="16"/></name></expr>;<pos:position pos:line="13" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">debugs<pos:position pos:line="14" pos:column="11"/></name><argument_list pos:line="14" pos:column="11">(<argument><expr><literal type="number" pos:line="14" pos:column="12">83<pos:position pos:line="14" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="16">2<pos:position pos:line="14" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="19">"TLS parsing is not supported without OpenSSL. "<pos:position pos:line="14" pos:column="67"/></literal> <operator pos:line="14" pos:column="68">&lt;&lt;<pos:position pos:line="14" pos:column="76"/></operator> <name pos:line="14" pos:column="71">raw<pos:position pos:line="14" pos:column="74"/></name></expr></argument>)<pos:position pos:line="14" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="76"/></expr_stmt>
<cpp:endif pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">endif<pos:position pos:line="15" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
