<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5679_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">hashFreeItems<pos:position pos:line="2" pos:column="14"/></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><name pos:line="2" pos:column="15">hash_table<pos:position pos:line="2" pos:column="25"/></name> <modifier pos:line="2" pos:column="26">*<pos:position pos:line="2" pos:column="27"/></modifier></type> <name pos:line="2" pos:column="28">hid<pos:position pos:line="2" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="33">HASHFREE<pos:position pos:line="2" pos:column="41"/></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type> <name pos:line="2" pos:column="44">free_func<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="54"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">hash_link<pos:position pos:line="4" pos:column="14"/></name> <modifier pos:line="4" pos:column="15">*<pos:position pos:line="4" pos:column="16"/></modifier></type><name pos:line="4" pos:column="16">l<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">hash_link<pos:position pos:line="5" pos:column="14"/></name> <modifier pos:line="5" pos:column="15">*<pos:position pos:line="5" pos:column="16"/></modifier><modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">list<pos:position pos:line="5" pos:column="21"/></name></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">i<pos:position pos:line="6" pos:column="10"/></name> <init pos:line="6" pos:column="11">= <expr><literal type="number" pos:line="6" pos:column="13">0<pos:position pos:line="6" pos:column="14"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">j<pos:position pos:line="7" pos:column="10"/></name></decl>;<pos:position pos:line="7" pos:column="11"/></decl_stmt>
    <expr_stmt><expr><name pos:line="8" pos:column="5">list<pos:position pos:line="8" pos:column="9"/></name> <operator pos:line="8" pos:column="10">=<pos:position pos:line="8" pos:column="11"/></operator> <call><name pos:line="8" pos:column="12">xcalloc<pos:position pos:line="8" pos:column="19"/></name><argument_list pos:line="8" pos:column="19">(<argument><expr><name><name pos:line="8" pos:column="20">hid<pos:position pos:line="8" pos:column="23"/></name><operator pos:line="8" pos:column="23">-&gt;<pos:position pos:line="8" pos:column="28"/></operator><name pos:line="8" pos:column="25">count<pos:position pos:line="8" pos:column="30"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="8" pos:column="32">sizeof<argument_list pos:line="8" pos:column="38">(<argument><expr><name pos:line="8" pos:column="39">hash_link<pos:position pos:line="8" pos:column="48"/></name> <operator pos:line="8" pos:column="49">*<pos:position pos:line="8" pos:column="50"/></operator></expr></argument>)<pos:position pos:line="8" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="8" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">hash_first<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><name pos:line="9" pos:column="16">hid<pos:position pos:line="9" pos:column="19"/></name></expr></argument>)<pos:position pos:line="9" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="21"/></expr_stmt>
    <while pos:line="10" pos:column="5">while <condition pos:line="10" pos:column="11">(<expr><operator pos:line="10" pos:column="12">(<pos:position pos:line="10" pos:column="13"/></operator><name pos:line="10" pos:column="13">l<pos:position pos:line="10" pos:column="14"/></name> <operator pos:line="10" pos:column="15">=<pos:position pos:line="10" pos:column="16"/></operator> <call><name pos:line="10" pos:column="17">hash_next<pos:position pos:line="10" pos:column="26"/></name><argument_list pos:line="10" pos:column="26">(<argument><expr><name pos:line="10" pos:column="27">hid<pos:position pos:line="10" pos:column="30"/></name></expr></argument>)<pos:position pos:line="10" pos:column="31"/></argument_list></call><operator pos:line="10" pos:column="31">)<pos:position pos:line="10" pos:column="32"/></operator> <operator pos:line="10" pos:column="33">&amp;&amp;<pos:position pos:line="10" pos:column="43"/></operator> <name pos:line="10" pos:column="36">i<pos:position pos:line="10" pos:column="37"/></name> <operator pos:line="10" pos:column="38">&lt;<pos:position pos:line="10" pos:column="42"/></operator> <name><name pos:line="10" pos:column="40">hid<pos:position pos:line="10" pos:column="43"/></name><operator pos:line="10" pos:column="43">-&gt;<pos:position pos:line="10" pos:column="48"/></operator><name pos:line="10" pos:column="45">count<pos:position pos:line="10" pos:column="50"/></name></name></expr>)<pos:position pos:line="10" pos:column="51"/></condition> <block pos:line="10" pos:column="52">{
        <expr_stmt><expr><operator pos:line="11" pos:column="9">*<pos:position pos:line="11" pos:column="10"/></operator><operator pos:line="11" pos:column="10">(<pos:position pos:line="11" pos:column="11"/></operator><name pos:line="11" pos:column="11">list<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">+<pos:position pos:line="11" pos:column="17"/></operator> <name pos:line="11" pos:column="18">i<pos:position pos:line="11" pos:column="19"/></name><operator pos:line="11" pos:column="19">)<pos:position pos:line="11" pos:column="20"/></operator> <operator pos:line="11" pos:column="21">=<pos:position pos:line="11" pos:column="22"/></operator> <name pos:line="11" pos:column="23">l<pos:position pos:line="11" pos:column="24"/></name></expr>;<pos:position pos:line="11" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><name pos:line="12" pos:column="9">i<pos:position pos:line="12" pos:column="10"/></name><operator pos:line="12" pos:column="10">++<pos:position pos:line="12" pos:column="12"/></operator></expr>;<pos:position pos:line="12" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="13" pos:column="6"/></block></while>
    <for pos:line="14" pos:column="5">for <control pos:line="14" pos:column="9">(<init><expr><name pos:line="14" pos:column="10">j<pos:position pos:line="14" pos:column="11"/></name> <operator pos:line="14" pos:column="12">=<pos:position pos:line="14" pos:column="13"/></operator> <literal type="number" pos:line="14" pos:column="14">0<pos:position pos:line="14" pos:column="15"/></literal></expr>;<pos:position pos:line="14" pos:column="16"/></init> <condition><expr><name pos:line="14" pos:column="17">j<pos:position pos:line="14" pos:column="18"/></name> <operator pos:line="14" pos:column="19">&lt;<pos:position pos:line="14" pos:column="23"/></operator> <name pos:line="14" pos:column="21">i<pos:position pos:line="14" pos:column="22"/></name></expr>;<pos:position pos:line="14" pos:column="23"/></condition> <incr><expr><name pos:line="14" pos:column="24">j<pos:position pos:line="14" pos:column="25"/></name><operator pos:line="14" pos:column="25">++<pos:position pos:line="14" pos:column="27"/></operator></expr></incr>)<pos:position pos:line="14" pos:column="28"/></control>
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="9">free_func<pos:position pos:line="15" pos:column="18"/></name><argument_list pos:line="15" pos:column="18">(<argument><expr><operator pos:line="15" pos:column="19">*<pos:position pos:line="15" pos:column="20"/></operator><operator pos:line="15" pos:column="20">(<pos:position pos:line="15" pos:column="21"/></operator><name pos:line="15" pos:column="21">list<pos:position pos:line="15" pos:column="25"/></name> <operator pos:line="15" pos:column="26">+<pos:position pos:line="15" pos:column="27"/></operator> <name pos:line="15" pos:column="28">j<pos:position pos:line="15" pos:column="29"/></name><operator pos:line="15" pos:column="29">)<pos:position pos:line="15" pos:column="30"/></operator></expr></argument>)<pos:position pos:line="15" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="32"/></expr_stmt></block></for>
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">xfree<pos:position pos:line="16" pos:column="10"/></name><argument_list pos:line="16" pos:column="10">(<argument><expr><name pos:line="16" pos:column="11">list<pos:position pos:line="16" pos:column="15"/></name></expr></argument>)<pos:position pos:line="16" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="17"/></expr_stmt>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
