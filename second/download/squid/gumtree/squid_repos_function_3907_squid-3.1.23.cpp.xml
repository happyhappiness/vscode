<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3907_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Icap<pos:position pos:line="1" pos:column="22"/></name><operator pos:line="1" pos:column="22">::<pos:position pos:line="1" pos:column="24"/></operator><name pos:line="1" pos:column="24">ModXact<pos:position pos:line="1" pos:column="31"/></name><operator pos:line="1" pos:column="31">::<pos:position pos:line="1" pos:column="33"/></operator><name pos:line="1" pos:column="33">callException<pos:position pos:line="1" pos:column="46"/></name></name><parameter_list pos:line="1" pos:column="46">(<parameter><decl><type><specifier pos:line="1" pos:column="47">const<pos:position pos:line="1" pos:column="52"/></specifier> <name><name pos:line="1" pos:column="53">std<pos:position pos:line="1" pos:column="56"/></name><operator pos:line="1" pos:column="56">::<pos:position pos:line="1" pos:column="58"/></operator><name pos:line="1" pos:column="58">exception<pos:position pos:line="1" pos:column="67"/></name></name> <modifier pos:line="1" pos:column="68">&amp;<pos:position pos:line="1" pos:column="73"/></modifier></type><name pos:line="1" pos:column="69">e<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="71"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <if pos:line="3" pos:column="5">if <condition pos:line="3" pos:column="8">(<expr><operator pos:line="3" pos:column="9">!<pos:position pos:line="3" pos:column="10"/></operator><name pos:line="3" pos:column="10">canStartBypass<pos:position pos:line="3" pos:column="24"/></name> <operator pos:line="3" pos:column="25">||<pos:position pos:line="3" pos:column="27"/></operator> <name pos:line="3" pos:column="28">isRetriable<pos:position pos:line="3" pos:column="39"/></name></expr>)<pos:position pos:line="3" pos:column="40"/></condition><then pos:line="3" pos:column="40"> <block pos:line="3" pos:column="41">{
        <expr_stmt><expr><call><name><name pos:line="4" pos:column="9">Adaptation<pos:position pos:line="4" pos:column="19"/></name><operator pos:line="4" pos:column="19">::<pos:position pos:line="4" pos:column="21"/></operator><name pos:line="4" pos:column="21">Icap<pos:position pos:line="4" pos:column="25"/></name><operator pos:line="4" pos:column="25">::<pos:position pos:line="4" pos:column="27"/></operator><name pos:line="4" pos:column="27">Xaction<pos:position pos:line="4" pos:column="34"/></name><operator pos:line="4" pos:column="34">::<pos:position pos:line="4" pos:column="36"/></operator><name pos:line="4" pos:column="36">callException<pos:position pos:line="4" pos:column="49"/></name></name><argument_list pos:line="4" pos:column="49">(<argument><expr><name pos:line="4" pos:column="50">e<pos:position pos:line="4" pos:column="51"/></name></expr></argument>)<pos:position pos:line="4" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="53"/></expr_stmt>
        <return pos:line="5" pos:column="9">return;<pos:position pos:line="5" pos:column="16"/></return>
    }<pos:position pos:line="6" pos:column="6"/></block></then></if>

    <try pos:line="8" pos:column="5">try <block pos:line="8" pos:column="9">{
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">debugs<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><literal type="number" pos:line="9" pos:column="16">93<pos:position pos:line="9" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="20">3<pos:position pos:line="9" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="23">HERE<pos:position pos:line="9" pos:column="27"/></name> <operator pos:line="9" pos:column="28">&lt;&lt;<pos:position pos:line="9" pos:column="36"/></operator> <literal type="string" pos:line="9" pos:column="31">"bypassing "<pos:position pos:line="9" pos:column="43"/></literal> <operator pos:line="9" pos:column="44">&lt;&lt;<pos:position pos:line="9" pos:column="52"/></operator> <name pos:line="9" pos:column="47">inCall<pos:position pos:line="9" pos:column="53"/></name> <operator pos:line="9" pos:column="54">&lt;&lt;<pos:position pos:line="9" pos:column="62"/></operator> <literal type="string" pos:line="9" pos:column="57">" exception: "<pos:position pos:line="9" pos:column="71"/></literal> <operator pos:line="9" pos:column="72">&lt;&lt;<pos:position pos:line="9" pos:column="80"/></operator>
               <call><name><name pos:line="10" pos:column="16">e<pos:position pos:line="10" pos:column="17"/></name><operator pos:line="10" pos:column="17">.<pos:position pos:line="10" pos:column="18"/></operator><name pos:line="10" pos:column="18">what<pos:position pos:line="10" pos:column="22"/></name></name><argument_list pos:line="10" pos:column="22">()<pos:position pos:line="10" pos:column="24"/></argument_list></call> <operator pos:line="10" pos:column="25">&lt;&lt;<pos:position pos:line="10" pos:column="33"/></operator> <literal type="char" pos:line="10" pos:column="28">' '<pos:position pos:line="10" pos:column="31"/></literal> <operator pos:line="10" pos:column="32">&lt;&lt;<pos:position pos:line="10" pos:column="40"/></operator> <call><name pos:line="10" pos:column="35">status<pos:position pos:line="10" pos:column="41"/></name><argument_list pos:line="10" pos:column="41">()<pos:position pos:line="10" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">bypassFailure<pos:position pos:line="11" pos:column="22"/></name><argument_list pos:line="11" pos:column="22">()<pos:position pos:line="11" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="12" pos:column="6"/></block> <catch pos:line="12" pos:column="7">catch <parameter_list pos:line="12" pos:column="13">(<parameter><decl><type><specifier pos:line="12" pos:column="14">const<pos:position pos:line="12" pos:column="19"/></specifier> <name><name pos:line="12" pos:column="20">std<pos:position pos:line="12" pos:column="23"/></name><operator pos:line="12" pos:column="23">::<pos:position pos:line="12" pos:column="25"/></operator><name pos:line="12" pos:column="25">exception<pos:position pos:line="12" pos:column="34"/></name></name> <modifier pos:line="12" pos:column="35">&amp;<pos:position pos:line="12" pos:column="40"/></modifier></type><name pos:line="12" pos:column="36">bypassE<pos:position pos:line="12" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="12" pos:column="44"/></parameter_list> <block pos:line="12" pos:column="45">{
        <expr_stmt><expr><call><name><name pos:line="13" pos:column="9">Adaptation<pos:position pos:line="13" pos:column="19"/></name><operator pos:line="13" pos:column="19">::<pos:position pos:line="13" pos:column="21"/></operator><name pos:line="13" pos:column="21">Icap<pos:position pos:line="13" pos:column="25"/></name><operator pos:line="13" pos:column="25">::<pos:position pos:line="13" pos:column="27"/></operator><name pos:line="13" pos:column="27">Xaction<pos:position pos:line="13" pos:column="34"/></name><operator pos:line="13" pos:column="34">::<pos:position pos:line="13" pos:column="36"/></operator><name pos:line="13" pos:column="36">callException<pos:position pos:line="13" pos:column="49"/></name></name><argument_list pos:line="13" pos:column="49">(<argument><expr><name pos:line="13" pos:column="50">bypassE<pos:position pos:line="13" pos:column="57"/></name></expr></argument>)<pos:position pos:line="13" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="59"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></catch></try>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
