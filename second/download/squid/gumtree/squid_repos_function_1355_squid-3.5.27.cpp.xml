<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1355_squid-3.5.27.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">peerHandleHtcpReply<pos:position pos:line="2" pos:column="20"/></name><parameter_list pos:line="2" pos:column="20">(<parameter><decl><type><name pos:line="2" pos:column="21">CachePeer<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type> <name pos:line="2" pos:column="33">p<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="36">peer_t<pos:position pos:line="2" pos:column="42"/></name></type> <name pos:line="2" pos:column="43">type<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="49">HtcpReplyData<pos:position pos:line="2" pos:column="62"/></name> <modifier pos:line="2" pos:column="63">*<pos:position pos:line="2" pos:column="64"/></modifier></type> <name pos:line="2" pos:column="65">htcp<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="71">void<pos:position pos:line="2" pos:column="75"/></name> <modifier pos:line="2" pos:column="76">*<pos:position pos:line="2" pos:column="77"/></modifier></type><name pos:line="2" pos:column="77">data<pos:position pos:line="2" pos:column="81"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="82"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">ps_state<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">psstate<pos:position pos:line="4" pos:column="22"/></name> <init pos:line="4" pos:column="23">= <expr><operator pos:line="4" pos:column="25">(<pos:position pos:line="4" pos:column="26"/></operator><name pos:line="4" pos:column="26">ps_state<pos:position pos:line="4" pos:column="34"/></name> <operator pos:line="4" pos:column="35">*<pos:position pos:line="4" pos:column="36"/></operator><operator pos:line="4" pos:column="36">)<pos:position pos:line="4" pos:column="37"/></operator><name pos:line="4" pos:column="37">data<pos:position pos:line="4" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="42"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">debugs<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><literal type="number" pos:line="5" pos:column="12">44<pos:position pos:line="5" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="16">3<pos:position pos:line="5" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="19">""<pos:position pos:line="5" pos:column="21"/></literal> <operator pos:line="5" pos:column="22">&lt;&lt;<pos:position pos:line="5" pos:column="30"/></operator> <operator pos:line="5" pos:column="25">(<pos:position pos:line="5" pos:column="26"/></operator><ternary><condition><expr><name><name pos:line="5" pos:column="26">htcp<pos:position pos:line="5" pos:column="30"/></name><operator pos:line="5" pos:column="30">-&gt;<pos:position pos:line="5" pos:column="35"/></operator><name pos:line="5" pos:column="32">hit<pos:position pos:line="5" pos:column="35"/></name></name></expr> ?<pos:position pos:line="5" pos:column="37"/></condition><then pos:line="5" pos:column="37"> <expr><literal type="string" pos:line="5" pos:column="38">"HIT"<pos:position pos:line="5" pos:column="43"/></literal></expr> <pos:position pos:line="5" pos:column="44"/></then><else pos:line="5" pos:column="44">: <expr><literal type="string" pos:line="5" pos:column="46">"MISS"<pos:position pos:line="5" pos:column="52"/></literal></expr></else></ternary><operator pos:line="5" pos:column="52">)<pos:position pos:line="5" pos:column="53"/></operator> <operator pos:line="5" pos:column="54">&lt;&lt;<pos:position pos:line="5" pos:column="62"/></operator> <literal type="string" pos:line="5" pos:column="57">" "<pos:position pos:line="5" pos:column="60"/></literal> <operator pos:line="5" pos:column="61">&lt;&lt;<pos:position pos:line="5" pos:column="69"/></operator> <call><name><name pos:line="5" pos:column="64">psstate<pos:position pos:line="5" pos:column="71"/></name><operator pos:line="5" pos:column="71">-&gt;<pos:position pos:line="5" pos:column="76"/></operator><name pos:line="5" pos:column="73">url<pos:position pos:line="5" pos:column="76"/></name></name><argument_list pos:line="5" pos:column="76">()<pos:position pos:line="5" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="80"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="6" pos:column="5">++<pos:position pos:line="6" pos:column="7"/></operator> <name><name pos:line="6" pos:column="8">psstate<pos:position pos:line="6" pos:column="15"/></name><operator pos:line="6" pos:column="15">-&gt;<pos:position pos:line="6" pos:column="20"/></operator><name pos:line="6" pos:column="17">ping<pos:position pos:line="6" pos:column="21"/></name><operator pos:line="6" pos:column="21">.<pos:position pos:line="6" pos:column="22"/></operator><name pos:line="6" pos:column="22">n_recv<pos:position pos:line="6" pos:column="28"/></name></name></expr>;<pos:position pos:line="6" pos:column="29"/></expr_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name><name pos:line="8" pos:column="9">htcp<pos:position pos:line="8" pos:column="13"/></name><operator pos:line="8" pos:column="13">-&gt;<pos:position pos:line="8" pos:column="18"/></operator><name pos:line="8" pos:column="15">hit<pos:position pos:line="8" pos:column="18"/></name></name></expr>)<pos:position pos:line="8" pos:column="19"/></condition><then pos:line="8" pos:column="19"> <block pos:line="8" pos:column="20">{
        <expr_stmt><expr><name><name pos:line="9" pos:column="9">psstate<pos:position pos:line="9" pos:column="16"/></name><operator pos:line="9" pos:column="16">-&gt;<pos:position pos:line="9" pos:column="21"/></operator><name pos:line="9" pos:column="18">hit<pos:position pos:line="9" pos:column="21"/></name></name> <operator pos:line="9" pos:column="22">=<pos:position pos:line="9" pos:column="23"/></operator> <name pos:line="9" pos:column="24">p<pos:position pos:line="9" pos:column="25"/></name></expr>;<pos:position pos:line="9" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="10" pos:column="9">psstate<pos:position pos:line="10" pos:column="16"/></name><operator pos:line="10" pos:column="16">-&gt;<pos:position pos:line="10" pos:column="21"/></operator><name pos:line="10" pos:column="18">hit_type<pos:position pos:line="10" pos:column="26"/></name></name> <operator pos:line="10" pos:column="27">=<pos:position pos:line="10" pos:column="28"/></operator> <name pos:line="10" pos:column="29">type<pos:position pos:line="10" pos:column="33"/></name></expr>;<pos:position pos:line="10" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">peerSelectFoo<pos:position pos:line="11" pos:column="22"/></name><argument_list pos:line="11" pos:column="22">(<argument><expr><name pos:line="11" pos:column="23">psstate<pos:position pos:line="11" pos:column="30"/></name></expr></argument>)<pos:position pos:line="11" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="32"/></expr_stmt>
        <return pos:line="12" pos:column="9">return;<pos:position pos:line="12" pos:column="16"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">type<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">==<pos:position pos:line="15" pos:column="16"/></operator> <name pos:line="15" pos:column="17">PEER_PARENT<pos:position pos:line="15" pos:column="28"/></name></expr>)<pos:position pos:line="15" pos:column="29"/></condition><then pos:line="15" pos:column="29">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="9">peerHtcpParentMiss<pos:position pos:line="16" pos:column="27"/></name><argument_list pos:line="16" pos:column="27">(<argument><expr><name pos:line="16" pos:column="28">p<pos:position pos:line="16" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="31">htcp<pos:position pos:line="16" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="37">psstate<pos:position pos:line="16" pos:column="44"/></name></expr></argument>)<pos:position pos:line="16" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="46"/></expr_stmt></block></then></if>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name><name pos:line="18" pos:column="9">psstate<pos:position pos:line="18" pos:column="16"/></name><operator pos:line="18" pos:column="16">-&gt;<pos:position pos:line="18" pos:column="21"/></operator><name pos:line="18" pos:column="18">ping<pos:position pos:line="18" pos:column="22"/></name><operator pos:line="18" pos:column="22">.<pos:position pos:line="18" pos:column="23"/></operator><name pos:line="18" pos:column="23">n_recv<pos:position pos:line="18" pos:column="29"/></name></name> <operator pos:line="18" pos:column="30">&lt;<pos:position pos:line="18" pos:column="34"/></operator> <name><name pos:line="18" pos:column="32">psstate<pos:position pos:line="18" pos:column="39"/></name><operator pos:line="18" pos:column="39">-&gt;<pos:position pos:line="18" pos:column="44"/></operator><name pos:line="18" pos:column="41">ping<pos:position pos:line="18" pos:column="45"/></name><operator pos:line="18" pos:column="45">.<pos:position pos:line="18" pos:column="46"/></operator><name pos:line="18" pos:column="46">n_replies_expected<pos:position pos:line="18" pos:column="64"/></name></name></expr>)<pos:position pos:line="18" pos:column="65"/></condition><then pos:line="18" pos:column="65">
        <block type="pseudo"><return pos:line="19" pos:column="9">return;<pos:position pos:line="19" pos:column="16"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="21" pos:column="5">peerSelectFoo<pos:position pos:line="21" pos:column="18"/></name><argument_list pos:line="21" pos:column="18">(<argument><expr><name pos:line="21" pos:column="19">psstate<pos:position pos:line="21" pos:column="26"/></name></expr></argument>)<pos:position pos:line="21" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="28"/></expr_stmt>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
