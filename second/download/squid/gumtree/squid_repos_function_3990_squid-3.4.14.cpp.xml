<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3990_squid-3.4.14.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name><name pos:line="1" pos:column="7">libecap<pos:position pos:line="1" pos:column="14"/></name><operator pos:line="1" pos:column="14">::<pos:position pos:line="1" pos:column="16"/></operator><name pos:line="1" pos:column="16">Area<pos:position pos:line="1" pos:column="20"/></name></name></type>
<name><name pos:line="2" pos:column="1">Adaptation<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">Ecap<pos:position pos:line="2" pos:column="17"/></name><operator pos:line="2" pos:column="17">::<pos:position pos:line="2" pos:column="19"/></operator><name pos:line="2" pos:column="19">XactionRep<pos:position pos:line="2" pos:column="29"/></name><operator pos:line="2" pos:column="29">::<pos:position pos:line="2" pos:column="31"/></operator><name pos:line="2" pos:column="31">clientIpValue<pos:position pos:line="2" pos:column="44"/></name></name><parameter_list pos:line="2" pos:column="44">()<pos:position pos:line="2" pos:column="46"/></parameter_list> <specifier pos:line="2" pos:column="47">const<pos:position pos:line="2" pos:column="52"/></specifier>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">HttpRequest<pos:position pos:line="4" pos:column="22"/></name> <modifier pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></modifier></type><name pos:line="4" pos:column="24">request<pos:position pos:line="4" pos:column="31"/></name> <init pos:line="4" pos:column="32">= <expr><cast type="dynamic" pos:line="4" pos:column="34">dynamic_cast<argument_list type="generic" pos:line="4" pos:column="46">&lt;<argument><expr><specifier pos:line="4" pos:column="47">const<pos:position pos:line="4" pos:column="52"/></specifier> <name pos:line="4" pos:column="53">HttpRequest<pos:position pos:line="4" pos:column="64"/></name><operator pos:line="4" pos:column="64">*<pos:position pos:line="4" pos:column="65"/></operator></expr></argument>&gt;<pos:position pos:line="4" pos:column="69"/></argument_list><argument_list pos:line="4" pos:column="66">(<argument><expr><ternary><condition><expr><name pos:line="4" pos:column="67">theCauseRep<pos:position pos:line="4" pos:column="78"/></name></expr> ?<pos:position pos:line="4" pos:column="80"/></condition><then pos:line="4" pos:column="80">
                                 <expr><call><name><name pos:line="5" pos:column="34">theCauseRep<pos:position pos:line="5" pos:column="45"/></name><operator pos:line="5" pos:column="45">-&gt;<pos:position pos:line="5" pos:column="50"/></operator><name pos:line="5" pos:column="47">raw<pos:position pos:line="5" pos:column="50"/></name></name><argument_list pos:line="5" pos:column="50">()<pos:position pos:line="5" pos:column="52"/></argument_list></call><operator pos:line="5" pos:column="52">.<pos:position pos:line="5" pos:column="53"/></operator><name pos:line="5" pos:column="53">header<pos:position pos:line="5" pos:column="59"/></name></expr> <pos:position pos:line="5" pos:column="60"/></then><else pos:line="5" pos:column="60">: <expr><call><name><name pos:line="5" pos:column="62">theVirginRep<pos:position pos:line="5" pos:column="74"/></name><operator pos:line="5" pos:column="74">.<pos:position pos:line="5" pos:column="75"/></operator><name pos:line="5" pos:column="75">raw<pos:position pos:line="5" pos:column="78"/></name></name><argument_list pos:line="5" pos:column="78">()<pos:position pos:line="5" pos:column="80"/></argument_list></call><operator pos:line="5" pos:column="80">.<pos:position pos:line="5" pos:column="81"/></operator><name pos:line="5" pos:column="81">header<pos:position pos:line="5" pos:column="87"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="5" pos:column="88"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="5" pos:column="89"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">Must<pos:position pos:line="6" pos:column="9"/></name><argument_list pos:line="6" pos:column="9">(<argument><expr><name pos:line="6" pos:column="10">request<pos:position pos:line="6" pos:column="17"/></name></expr></argument>)<pos:position pos:line="6" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="19"/></expr_stmt>
    <comment type="line" pos:line="7" pos:column="5">// TODO: move this logic into HttpRequest::clientIp(bool) and</comment>
    <comment type="line" pos:line="8" pos:column="5">// HttpRequest::clientIpString(bool) and reuse everywhere</comment>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name><name pos:line="9" pos:column="9">TheConfig<pos:position pos:line="9" pos:column="18"/></name><operator pos:line="9" pos:column="18">.<pos:position pos:line="9" pos:column="19"/></operator><name pos:line="9" pos:column="19">send_client_ip<pos:position pos:line="9" pos:column="33"/></name></name> <operator pos:line="9" pos:column="34">&amp;&amp;<pos:position pos:line="9" pos:column="44"/></operator> <name pos:line="9" pos:column="37">request<pos:position pos:line="9" pos:column="44"/></name></expr>)<pos:position pos:line="9" pos:column="45"/></condition><then pos:line="9" pos:column="45"> <block pos:line="9" pos:column="46">{
        <decl_stmt><decl><type><name><name pos:line="10" pos:column="9">Ip<pos:position pos:line="10" pos:column="11"/></name><operator pos:line="10" pos:column="11">::<pos:position pos:line="10" pos:column="13"/></operator><name pos:line="10" pos:column="13">Address<pos:position pos:line="10" pos:column="20"/></name></name></type> <name pos:line="10" pos:column="21">client_addr<pos:position pos:line="10" pos:column="32"/></name></decl>;<pos:position pos:line="10" pos:column="33"/></decl_stmt>
<cpp:if pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">if<pos:position pos:line="11" pos:column="4"/></cpp:directive> <expr><name pos:line="11" pos:column="5">FOLLOW_X_FORWARDED_FOR<pos:position pos:line="11" pos:column="27"/></name></expr></cpp:if>
        <if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name><name pos:line="12" pos:column="13">TheConfig<pos:position pos:line="12" pos:column="22"/></name><operator pos:line="12" pos:column="22">.<pos:position pos:line="12" pos:column="23"/></operator><name pos:line="12" pos:column="23">use_indirect_client<pos:position pos:line="12" pos:column="42"/></name></name></expr>)<pos:position pos:line="12" pos:column="43"/></condition><then pos:line="12" pos:column="43"> <block pos:line="12" pos:column="44">{
            <expr_stmt><expr><name pos:line="13" pos:column="13">client_addr<pos:position pos:line="13" pos:column="24"/></name> <operator pos:line="13" pos:column="25">=<pos:position pos:line="13" pos:column="26"/></operator> <name><name pos:line="13" pos:column="27">request<pos:position pos:line="13" pos:column="34"/></name><operator pos:line="13" pos:column="34">-&gt;<pos:position pos:line="13" pos:column="39"/></operator><name pos:line="13" pos:column="36">indirect_client_addr<pos:position pos:line="13" pos:column="56"/></name></name></expr>;<pos:position pos:line="13" pos:column="57"/></expr_stmt>
        }<pos:position pos:line="14" pos:column="10"/></block></then> <else pos:line="14" pos:column="11">else
<cpp:endif pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">endif<pos:position pos:line="15" pos:column="7"/></cpp:directive></cpp:endif>
            <block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="13">client_addr<pos:position pos:line="16" pos:column="24"/></name> <operator pos:line="16" pos:column="25">=<pos:position pos:line="16" pos:column="26"/></operator> <name><name pos:line="16" pos:column="27">request<pos:position pos:line="16" pos:column="34"/></name><operator pos:line="16" pos:column="34">-&gt;<pos:position pos:line="16" pos:column="39"/></operator><name pos:line="16" pos:column="36">client_addr<pos:position pos:line="16" pos:column="47"/></name></name></expr>;<pos:position pos:line="16" pos:column="48"/></expr_stmt></block></else></if>
        <if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><operator pos:line="17" pos:column="13">!<pos:position pos:line="17" pos:column="14"/></operator><call><name><name pos:line="17" pos:column="14">client_addr<pos:position pos:line="17" pos:column="25"/></name><operator pos:line="17" pos:column="25">.<pos:position pos:line="17" pos:column="26"/></operator><name pos:line="17" pos:column="26">isAnyAddr<pos:position pos:line="17" pos:column="35"/></name></name><argument_list pos:line="17" pos:column="35">()<pos:position pos:line="17" pos:column="37"/></argument_list></call> <operator pos:line="17" pos:column="38">&amp;&amp;<pos:position pos:line="17" pos:column="48"/></operator> <operator pos:line="17" pos:column="41">!<pos:position pos:line="17" pos:column="42"/></operator><call><name><name pos:line="17" pos:column="42">client_addr<pos:position pos:line="17" pos:column="53"/></name><operator pos:line="17" pos:column="53">.<pos:position pos:line="17" pos:column="54"/></operator><name pos:line="17" pos:column="54">isNoAddr<pos:position pos:line="17" pos:column="62"/></name></name><argument_list pos:line="17" pos:column="62">()<pos:position pos:line="17" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="65"/></condition><then pos:line="17" pos:column="65"> <block pos:line="17" pos:column="66">{
            <decl_stmt><decl><type><name pos:line="18" pos:column="13">char<pos:position pos:line="18" pos:column="17"/></name></type> <name><name pos:line="18" pos:column="18">ntoabuf<pos:position pos:line="18" pos:column="25"/></name><index pos:line="18" pos:column="25">[<expr><name pos:line="18" pos:column="26">MAX_IPSTRLEN<pos:position pos:line="18" pos:column="38"/></name></expr>]<pos:position pos:line="18" pos:column="39"/></index></name> <init pos:line="18" pos:column="40">= <expr><literal type="string" pos:line="18" pos:column="42">""<pos:position pos:line="18" pos:column="44"/></literal></expr></init></decl>;<pos:position pos:line="18" pos:column="45"/></decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="19" pos:column="13">client_addr<pos:position pos:line="19" pos:column="24"/></name><operator pos:line="19" pos:column="24">.<pos:position pos:line="19" pos:column="25"/></operator><name pos:line="19" pos:column="25">toStr<pos:position pos:line="19" pos:column="30"/></name></name><argument_list pos:line="19" pos:column="30">(<argument><expr><name pos:line="19" pos:column="31">ntoabuf<pos:position pos:line="19" pos:column="38"/></name></expr></argument>,<argument><expr><name pos:line="19" pos:column="39">MAX_IPSTRLEN<pos:position pos:line="19" pos:column="51"/></name></expr></argument>)<pos:position pos:line="19" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="53"/></expr_stmt>
            <return pos:line="20" pos:column="13">return <expr><call><name><name pos:line="20" pos:column="20">libecap<pos:position pos:line="20" pos:column="27"/></name><operator pos:line="20" pos:column="27">::<pos:position pos:line="20" pos:column="29"/></operator><name pos:line="20" pos:column="29">Area<pos:position pos:line="20" pos:column="33"/></name><operator pos:line="20" pos:column="33">::<pos:position pos:line="20" pos:column="35"/></operator><name pos:line="20" pos:column="35">FromTempBuffer<pos:position pos:line="20" pos:column="49"/></name></name><argument_list pos:line="20" pos:column="49">(<argument><expr><name pos:line="20" pos:column="50">ntoabuf<pos:position pos:line="20" pos:column="57"/></name></expr></argument>, <argument><expr><call><name pos:line="20" pos:column="59">strlen<pos:position pos:line="20" pos:column="65"/></name><argument_list pos:line="20" pos:column="65">(<argument><expr><name pos:line="20" pos:column="66">ntoabuf<pos:position pos:line="20" pos:column="73"/></name></expr></argument>)<pos:position pos:line="20" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="76"/></return>
        }<pos:position pos:line="21" pos:column="10"/></block></then></if>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>
    <return pos:line="23" pos:column="5">return <expr><call><name><name pos:line="23" pos:column="12">libecap<pos:position pos:line="23" pos:column="19"/></name><operator pos:line="23" pos:column="19">::<pos:position pos:line="23" pos:column="21"/></operator><name pos:line="23" pos:column="21">Area<pos:position pos:line="23" pos:column="25"/></name></name><argument_list pos:line="23" pos:column="25">()<pos:position pos:line="23" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="28"/></return>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
