<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2939_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">size_t<pos:position pos:line="1" pos:column="7"/></name></type>
<name><name pos:line="2" pos:column="1">StoreEntry<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">bytesWanted<pos:position pos:line="2" pos:column="24"/></name></name> <parameter_list pos:line="2" pos:column="25">(<parameter><decl><type><name><name pos:line="2" pos:column="26">Range<pos:position pos:line="2" pos:column="31"/></name><argument_list type="generic" pos:line="2" pos:column="31">&lt;<argument><expr><name pos:line="2" pos:column="32">size_t<pos:position pos:line="2" pos:column="38"/></name></expr></argument>&gt;<pos:position pos:line="2" pos:column="42"/></argument_list></name> <specifier pos:line="2" pos:column="40">const<pos:position pos:line="2" pos:column="45"/></specifier></type> <name pos:line="2" pos:column="46">aRange<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="54">bool<pos:position pos:line="2" pos:column="58"/></name></type> <name pos:line="2" pos:column="59">ignoreDelayPools<pos:position pos:line="2" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="76"/></parameter_list> <specifier pos:line="2" pos:column="77">const<pos:position pos:line="2" pos:column="82"/></specifier>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">mem_obj<pos:position pos:line="4" pos:column="16"/></name> <operator pos:line="4" pos:column="17">==<pos:position pos:line="4" pos:column="19"/></operator> <name pos:line="4" pos:column="20">NULL<pos:position pos:line="4" pos:column="24"/></name></expr>)<pos:position pos:line="4" pos:column="25"/></condition><then pos:line="4" pos:column="25">
        <block type="pseudo"><return pos:line="5" pos:column="9">return <expr><name><name pos:line="5" pos:column="16">aRange<pos:position pos:line="5" pos:column="22"/></name><operator pos:line="5" pos:column="22">.<pos:position pos:line="5" pos:column="23"/></operator><name pos:line="5" pos:column="23">end<pos:position pos:line="5" pos:column="26"/></name></name></expr>;<pos:position pos:line="5" pos:column="27"/></return></block></then></if>

<cpp:if pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">if<pos:position pos:line="7" pos:column="4"/></cpp:directive> <expr><name pos:line="7" pos:column="5">URL_CHECKSUM_DEBUG<pos:position pos:line="7" pos:column="23"/></name></expr></cpp:if>

    <expr_stmt><expr><call><name><name pos:line="9" pos:column="5">mem_obj<pos:position pos:line="9" pos:column="12"/></name><operator pos:line="9" pos:column="12">-&gt;<pos:position pos:line="9" pos:column="17"/></operator><name pos:line="9" pos:column="14">checkUrlChecksum<pos:position pos:line="9" pos:column="30"/></name></name><argument_list pos:line="9" pos:column="30">()<pos:position pos:line="9" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="33"/></expr_stmt>

<cpp:endif pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">endif<pos:position pos:line="11" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><operator pos:line="13" pos:column="9">!<pos:position pos:line="13" pos:column="10"/></operator><call><name><name pos:line="13" pos:column="10">mem_obj<pos:position pos:line="13" pos:column="17"/></name><operator pos:line="13" pos:column="17">-&gt;<pos:position pos:line="13" pos:column="22"/></operator><name pos:line="13" pos:column="19">readAheadPolicyCanRead<pos:position pos:line="13" pos:column="41"/></name></name><argument_list pos:line="13" pos:column="41">()<pos:position pos:line="13" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="44"/></condition><then pos:line="13" pos:column="44">
        <block type="pseudo"><return pos:line="14" pos:column="9">return <expr><literal type="number" pos:line="14" pos:column="16">0<pos:position pos:line="14" pos:column="17"/></literal></expr>;<pos:position pos:line="14" pos:column="18"/></return></block></then></if>

    <return pos:line="16" pos:column="5">return <expr><call><name><name pos:line="16" pos:column="12">mem_obj<pos:position pos:line="16" pos:column="19"/></name><operator pos:line="16" pos:column="19">-&gt;<pos:position pos:line="16" pos:column="24"/></operator><name pos:line="16" pos:column="21">mostBytesWanted<pos:position pos:line="16" pos:column="36"/></name></name><argument_list pos:line="16" pos:column="36">(<argument><expr><name><name pos:line="16" pos:column="37">aRange<pos:position pos:line="16" pos:column="43"/></name><operator pos:line="16" pos:column="43">.<pos:position pos:line="16" pos:column="44"/></operator><name pos:line="16" pos:column="44">end<pos:position pos:line="16" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="49">ignoreDelayPools<pos:position pos:line="16" pos:column="65"/></name></expr></argument>)<pos:position pos:line="16" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="67"/></return>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
