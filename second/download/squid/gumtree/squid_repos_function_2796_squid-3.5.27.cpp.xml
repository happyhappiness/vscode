<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2796_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HttpHeader<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">packInto<pos:position pos:line="2" pos:column="21"/></name></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><name pos:line="2" pos:column="22">Packer<pos:position pos:line="2" pos:column="28"/></name> <modifier pos:line="2" pos:column="29">*<pos:position pos:line="2" pos:column="30"/></modifier></type> <name pos:line="2" pos:column="31">p<pos:position pos:line="2" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="34">bool<pos:position pos:line="2" pos:column="38"/></name></type> <name pos:line="2" pos:column="39">mask_sensitive_info<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="59"/></parameter_list> <specifier pos:line="2" pos:column="60">const<pos:position pos:line="2" pos:column="65"/></specifier>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">HttpHeaderPos<pos:position pos:line="4" pos:column="18"/></name></type> <name pos:line="4" pos:column="19">pos<pos:position pos:line="4" pos:column="22"/></name> <init pos:line="4" pos:column="23">= <expr><name pos:line="4" pos:column="25">HttpHeaderInitPos<pos:position pos:line="4" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="43"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">HttpHeaderEntry<pos:position pos:line="5" pos:column="26"/></name> <modifier pos:line="5" pos:column="27">*<pos:position pos:line="5" pos:column="28"/></modifier></type><name pos:line="5" pos:column="28">e<pos:position pos:line="5" pos:column="29"/></name></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><name pos:line="6" pos:column="12">p<pos:position pos:line="6" pos:column="13"/></name></expr></argument>)<pos:position pos:line="6" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">debugs<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><literal type="number" pos:line="7" pos:column="12">55<pos:position pos:line="7" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="16">7<pos:position pos:line="7" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="19">this<pos:position pos:line="7" pos:column="23"/></name> <operator pos:line="7" pos:column="24">&lt;&lt;<pos:position pos:line="7" pos:column="32"/></operator> <literal type="string" pos:line="7" pos:column="27">" into "<pos:position pos:line="7" pos:column="35"/></literal> <operator pos:line="7" pos:column="36">&lt;&lt;<pos:position pos:line="7" pos:column="44"/></operator> <name pos:line="7" pos:column="39">p<pos:position pos:line="7" pos:column="40"/></name> <operator pos:line="7" pos:column="41">&lt;&lt;<pos:position pos:line="7" pos:column="49"/></operator>
           <operator pos:line="8" pos:column="12">(<pos:position pos:line="8" pos:column="13"/></operator><ternary><condition><expr><name pos:line="8" pos:column="13">mask_sensitive_info<pos:position pos:line="8" pos:column="32"/></name></expr> ?<pos:position pos:line="8" pos:column="34"/></condition><then pos:line="8" pos:column="34"> <expr><literal type="string" pos:line="8" pos:column="35">" while masking"<pos:position pos:line="8" pos:column="51"/></literal></expr> <pos:position pos:line="8" pos:column="52"/></then><else pos:line="8" pos:column="52">: <expr><literal type="string" pos:line="8" pos:column="54">""<pos:position pos:line="8" pos:column="56"/></literal></expr></else></ternary><operator pos:line="8" pos:column="56">)<pos:position pos:line="8" pos:column="57"/></operator></expr></argument>)<pos:position pos:line="8" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="59"/></expr_stmt>
    <comment type="block" pos:line="9" pos:column="5">/* pack all entries one by one */</comment>
    <while pos:line="10" pos:column="5">while <condition pos:line="10" pos:column="11">(<expr><operator pos:line="10" pos:column="12">(<pos:position pos:line="10" pos:column="13"/></operator><name pos:line="10" pos:column="13">e<pos:position pos:line="10" pos:column="14"/></name> <operator pos:line="10" pos:column="15">=<pos:position pos:line="10" pos:column="16"/></operator> <call><name pos:line="10" pos:column="17">getEntry<pos:position pos:line="10" pos:column="25"/></name><argument_list pos:line="10" pos:column="25">(<argument><expr><operator pos:line="10" pos:column="26">&amp;<pos:position pos:line="10" pos:column="31"/></operator><name pos:line="10" pos:column="27">pos<pos:position pos:line="10" pos:column="30"/></name></expr></argument>)<pos:position pos:line="10" pos:column="31"/></argument_list></call><operator pos:line="10" pos:column="31">)<pos:position pos:line="10" pos:column="32"/></operator></expr>)<pos:position pos:line="10" pos:column="33"/></condition> <block pos:line="10" pos:column="34">{
        <if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">!<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="14">mask_sensitive_info<pos:position pos:line="11" pos:column="33"/></name></expr>)<pos:position pos:line="11" pos:column="34"/></condition><then pos:line="11" pos:column="34"> <block pos:line="11" pos:column="35">{
            <expr_stmt><expr><call><name><name pos:line="12" pos:column="13">e<pos:position pos:line="12" pos:column="14"/></name><operator pos:line="12" pos:column="14">-&gt;<pos:position pos:line="12" pos:column="19"/></operator><name pos:line="12" pos:column="16">packInto<pos:position pos:line="12" pos:column="24"/></name></name><argument_list pos:line="12" pos:column="24">(<argument><expr><name pos:line="12" pos:column="25">p<pos:position pos:line="12" pos:column="26"/></name></expr></argument>)<pos:position pos:line="12" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="28"/></expr_stmt>
            <continue pos:line="13" pos:column="13">continue;<pos:position pos:line="13" pos:column="22"/></continue>
        }<pos:position pos:line="14" pos:column="10"/></block></then></if>

        <decl_stmt><decl><type><name pos:line="16" pos:column="9">bool<pos:position pos:line="16" pos:column="13"/></name></type> <name pos:line="16" pos:column="14">maskThisEntry<pos:position pos:line="16" pos:column="27"/></name> <init pos:line="16" pos:column="28">= <expr><literal type="boolean" pos:line="16" pos:column="30">false<pos:position pos:line="16" pos:column="35"/></literal></expr></init></decl>;<pos:position pos:line="16" pos:column="36"/></decl_stmt>
        <switch pos:line="17" pos:column="9">switch <condition pos:line="17" pos:column="16">(<expr><name><name pos:line="17" pos:column="17">e<pos:position pos:line="17" pos:column="18"/></name><operator pos:line="17" pos:column="18">-&gt;<pos:position pos:line="17" pos:column="23"/></operator><name pos:line="17" pos:column="20">id<pos:position pos:line="17" pos:column="22"/></name></name></expr>)<pos:position pos:line="17" pos:column="23"/></condition> <block pos:line="17" pos:column="24">{
        <case pos:line="18" pos:column="9">case <expr><name pos:line="18" pos:column="14">HDR_AUTHORIZATION<pos:position pos:line="18" pos:column="31"/></name></expr>:<pos:position pos:line="18" pos:column="32"/></case>
        <case pos:line="19" pos:column="9">case <expr><name pos:line="19" pos:column="14">HDR_PROXY_AUTHORIZATION<pos:position pos:line="19" pos:column="37"/></name></expr>:<pos:position pos:line="19" pos:column="38"/></case>
            <expr_stmt><expr><name pos:line="20" pos:column="13">maskThisEntry<pos:position pos:line="20" pos:column="26"/></name> <operator pos:line="20" pos:column="27">=<pos:position pos:line="20" pos:column="28"/></operator> <literal type="boolean" pos:line="20" pos:column="29">true<pos:position pos:line="20" pos:column="33"/></literal></expr>;<pos:position pos:line="20" pos:column="34"/></expr_stmt>
            <break pos:line="21" pos:column="13">break;<pos:position pos:line="21" pos:column="19"/></break>

        <case pos:line="23" pos:column="9">case <expr><name pos:line="23" pos:column="14">HDR_FTP_ARGUMENTS<pos:position pos:line="23" pos:column="31"/></name></expr>:<pos:position pos:line="23" pos:column="32"/></case>
            <if pos:line="24" pos:column="13">if <condition pos:line="24" pos:column="16">(<decl><type><specifier pos:line="24" pos:column="17">const<pos:position pos:line="24" pos:column="22"/></specifier> <name pos:line="24" pos:column="23">HttpHeaderEntry<pos:position pos:line="24" pos:column="38"/></name> <modifier pos:line="24" pos:column="39">*<pos:position pos:line="24" pos:column="40"/></modifier></type><name pos:line="24" pos:column="40">cmd<pos:position pos:line="24" pos:column="43"/></name> <init pos:line="24" pos:column="44">= <expr><call><name pos:line="24" pos:column="46">findEntry<pos:position pos:line="24" pos:column="55"/></name><argument_list pos:line="24" pos:column="55">(<argument><expr><name pos:line="24" pos:column="56">HDR_FTP_COMMAND<pos:position pos:line="24" pos:column="71"/></name></expr></argument>)<pos:position pos:line="24" pos:column="72"/></argument_list></call></expr></init></decl>)<pos:position pos:line="24" pos:column="73"/></condition><then pos:line="24" pos:column="73">
                <block type="pseudo"><expr_stmt><expr><name pos:line="25" pos:column="17">maskThisEntry<pos:position pos:line="25" pos:column="30"/></name> <operator pos:line="25" pos:column="31">=<pos:position pos:line="25" pos:column="32"/></operator> <operator pos:line="25" pos:column="33">(<pos:position pos:line="25" pos:column="34"/></operator><name><name pos:line="25" pos:column="34">cmd<pos:position pos:line="25" pos:column="37"/></name><operator pos:line="25" pos:column="37">-&gt;<pos:position pos:line="25" pos:column="42"/></operator><name pos:line="25" pos:column="39">value<pos:position pos:line="25" pos:column="44"/></name></name> <operator pos:line="25" pos:column="45">==<pos:position pos:line="25" pos:column="47"/></operator> <literal type="string" pos:line="25" pos:column="48">"PASS"<pos:position pos:line="25" pos:column="54"/></literal><operator pos:line="25" pos:column="54">)<pos:position pos:line="25" pos:column="55"/></operator></expr>;<pos:position pos:line="25" pos:column="56"/></expr_stmt></block></then></if>
            <break pos:line="26" pos:column="13">break;<pos:position pos:line="26" pos:column="19"/></break>

        <default pos:line="28" pos:column="9">default:<pos:position pos:line="28" pos:column="17"/></default>
            <break pos:line="29" pos:column="13">break;<pos:position pos:line="29" pos:column="19"/></break>
        }<pos:position pos:line="30" pos:column="10"/></block></switch>
        <if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><name pos:line="31" pos:column="13">maskThisEntry<pos:position pos:line="31" pos:column="26"/></name></expr>)<pos:position pos:line="31" pos:column="27"/></condition><then pos:line="31" pos:column="27"> <block pos:line="31" pos:column="28">{
            <expr_stmt><expr><call><name pos:line="32" pos:column="13">packerAppend<pos:position pos:line="32" pos:column="25"/></name><argument_list pos:line="32" pos:column="25">(<argument><expr><name pos:line="32" pos:column="26">p<pos:position pos:line="32" pos:column="27"/></name></expr></argument>, <argument><expr><call><name><name pos:line="32" pos:column="29">e<pos:position pos:line="32" pos:column="30"/></name><operator pos:line="32" pos:column="30">-&gt;<pos:position pos:line="32" pos:column="35"/></operator><name pos:line="32" pos:column="32">name<pos:position pos:line="32" pos:column="36"/></name><operator pos:line="32" pos:column="36">.<pos:position pos:line="32" pos:column="37"/></operator><name pos:line="32" pos:column="37">rawBuf<pos:position pos:line="32" pos:column="43"/></name></name><argument_list pos:line="32" pos:column="43">()<pos:position pos:line="32" pos:column="45"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="32" pos:column="47">e<pos:position pos:line="32" pos:column="48"/></name><operator pos:line="32" pos:column="48">-&gt;<pos:position pos:line="32" pos:column="53"/></operator><name pos:line="32" pos:column="50">name<pos:position pos:line="32" pos:column="54"/></name><operator pos:line="32" pos:column="54">.<pos:position pos:line="32" pos:column="55"/></operator><name pos:line="32" pos:column="55">size<pos:position pos:line="32" pos:column="59"/></name></name><argument_list pos:line="32" pos:column="59">()<pos:position pos:line="32" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="32" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="63"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="33" pos:column="13">packerAppend<pos:position pos:line="33" pos:column="25"/></name><argument_list pos:line="33" pos:column="25">(<argument><expr><name pos:line="33" pos:column="26">p<pos:position pos:line="33" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="29">": ** NOT DISPLAYED **\r\n"<pos:position pos:line="33" pos:column="56"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="58">23<pos:position pos:line="33" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="62"/></expr_stmt>
        }<pos:position pos:line="34" pos:column="10"/></block></then> <else pos:line="34" pos:column="11">else <block pos:line="34" pos:column="16">{
            <expr_stmt><expr><call><name><name pos:line="35" pos:column="13">e<pos:position pos:line="35" pos:column="14"/></name><operator pos:line="35" pos:column="14">-&gt;<pos:position pos:line="35" pos:column="19"/></operator><name pos:line="35" pos:column="16">packInto<pos:position pos:line="35" pos:column="24"/></name></name><argument_list pos:line="35" pos:column="24">(<argument><expr><name pos:line="35" pos:column="25">p<pos:position pos:line="35" pos:column="26"/></name></expr></argument>)<pos:position pos:line="35" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="28"/></expr_stmt>
        }<pos:position pos:line="36" pos:column="10"/></block></else></if>

    }<pos:position pos:line="38" pos:column="6"/></block></while>
    <comment type="block" pos:line="39" pos:column="5">/* Pack in the "special" entries */</comment>

    <comment type="block" pos:line="41" pos:column="5">/* Cache-Control */</comment>
}<pos:position pos:line="42" pos:column="2"/></block></function></unit>
