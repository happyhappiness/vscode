<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_521_squid-3.4.14.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">struct<pos:position pos:line="1" pos:column="7"/></name> <name pos:line="1" pos:column="8">snmp_pdu<pos:position pos:line="1" pos:column="16"/></name></name> <modifier pos:line="1" pos:column="17">*<pos:position pos:line="1" pos:column="18"/></modifier></type>
<name pos:line="2" pos:column="1">snmp_fix_pdu<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><name><name pos:line="2" pos:column="14">struct<pos:position pos:line="2" pos:column="20"/></name> <name pos:line="2" pos:column="21">snmp_pdu<pos:position pos:line="2" pos:column="29"/></name></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">pdu<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="36">int<pos:position pos:line="2" pos:column="39"/></name></type> <name pos:line="2" pos:column="40">command<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="48"/></parameter_list> <block pos:line="2" pos:column="49">{
    <decl_stmt><decl><type><name><name pos:line="3" pos:column="5">struct<pos:position pos:line="3" pos:column="11"/></name> <name pos:line="3" pos:column="12">variable_list<pos:position pos:line="3" pos:column="25"/></name></name> <modifier pos:line="3" pos:column="26">*<pos:position pos:line="3" pos:column="27"/></modifier></type><name pos:line="3" pos:column="27">var<pos:position pos:line="3" pos:column="30"/></name></decl>, <modifier pos:line="3" pos:column="32">*<pos:position pos:line="3" pos:column="33"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="33">newvar<pos:position pos:line="3" pos:column="39"/></name></decl>;<pos:position pos:line="3" pos:column="40"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">struct<pos:position pos:line="4" pos:column="11"/></name> <name pos:line="4" pos:column="12">snmp_pdu<pos:position pos:line="4" pos:column="20"/></name></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier></type><name pos:line="4" pos:column="22">newpdu<pos:position pos:line="4" pos:column="28"/></name></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">i<pos:position pos:line="5" pos:column="10"/></name></decl>;<pos:position pos:line="5" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">copied<pos:position pos:line="6" pos:column="15"/></name> <init pos:line="6" pos:column="16">= <expr><literal type="number" pos:line="6" pos:column="18">0<pos:position pos:line="6" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>

<cpp:if pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">if<pos:position pos:line="8" pos:column="4"/></cpp:directive> <expr><name pos:line="8" pos:column="5">DEBUG_PDU<pos:position pos:line="8" pos:column="14"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">snmplib_debug<pos:position pos:line="9" pos:column="18"/></name><argument_list pos:line="9" pos:column="18">(<argument><expr><literal type="number" pos:line="9" pos:column="19">8<pos:position pos:line="9" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="22">"PDU %x:  Fixing.  Err index is %d\n"<pos:position pos:line="9" pos:column="59"/></literal></expr></argument>,
                  <argument><expr><operator pos:line="10" pos:column="19">(<pos:position pos:line="10" pos:column="20"/></operator><name pos:line="10" pos:column="20">unsigned<pos:position pos:line="10" pos:column="28"/></name> <name pos:line="10" pos:column="29">int<pos:position pos:line="10" pos:column="32"/></name><operator pos:line="10" pos:column="32">)<pos:position pos:line="10" pos:column="33"/></operator> <name pos:line="10" pos:column="34">pdu<pos:position pos:line="10" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="39">(<pos:position pos:line="10" pos:column="40"/></operator><name pos:line="10" pos:column="40">unsigned<pos:position pos:line="10" pos:column="48"/></name> <name pos:line="10" pos:column="49">int<pos:position pos:line="10" pos:column="52"/></name><operator pos:line="10" pos:column="52">)<pos:position pos:line="10" pos:column="53"/></operator> <name><name pos:line="10" pos:column="54">pdu<pos:position pos:line="10" pos:column="57"/></name><operator pos:line="10" pos:column="57">-&gt;<pos:position pos:line="10" pos:column="62"/></operator><name pos:line="10" pos:column="59">errindex<pos:position pos:line="10" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="69"/></expr_stmt>
<cpp:endif pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">endif<pos:position pos:line="11" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name><name pos:line="13" pos:column="9">pdu<pos:position pos:line="13" pos:column="12"/></name><operator pos:line="13" pos:column="12">-&gt;<pos:position pos:line="13" pos:column="17"/></operator><name pos:line="13" pos:column="14">command<pos:position pos:line="13" pos:column="21"/></name></name> <operator pos:line="13" pos:column="22">!=<pos:position pos:line="13" pos:column="24"/></operator> <name pos:line="13" pos:column="25">SNMP_PDU_RESPONSE<pos:position pos:line="13" pos:column="42"/></name> <operator pos:line="13" pos:column="43">||<pos:position pos:line="13" pos:column="45"/></operator>
            <name><name pos:line="14" pos:column="13">pdu<pos:position pos:line="14" pos:column="16"/></name><operator pos:line="14" pos:column="16">-&gt;<pos:position pos:line="14" pos:column="21"/></operator><name pos:line="14" pos:column="18">errstat<pos:position pos:line="14" pos:column="25"/></name></name> <operator pos:line="14" pos:column="26">==<pos:position pos:line="14" pos:column="28"/></operator> <name pos:line="14" pos:column="29">SNMP_ERR_NOERROR<pos:position pos:line="14" pos:column="45"/></name> <operator pos:line="14" pos:column="46">||<pos:position pos:line="14" pos:column="48"/></operator>
            <name><name pos:line="15" pos:column="13">pdu<pos:position pos:line="15" pos:column="16"/></name><operator pos:line="15" pos:column="16">-&gt;<pos:position pos:line="15" pos:column="21"/></operator><name pos:line="15" pos:column="18">errindex<pos:position pos:line="15" pos:column="26"/></name></name> <operator pos:line="15" pos:column="27">&lt;=<pos:position pos:line="15" pos:column="32"/></operator> <literal type="number" pos:line="15" pos:column="30">0<pos:position pos:line="15" pos:column="31"/></literal></expr>)<pos:position pos:line="15" pos:column="32"/></condition><then pos:line="15" pos:column="32"> <block pos:line="15" pos:column="33">{
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">snmp_set_api_error<pos:position pos:line="16" pos:column="27"/></name><argument_list pos:line="16" pos:column="27">(<argument><expr><name pos:line="16" pos:column="28">SNMPERR_UNABLE_TO_FIX<pos:position pos:line="16" pos:column="49"/></name></expr></argument>)<pos:position pos:line="16" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="51"/></expr_stmt>
        <return pos:line="17" pos:column="9">return <expr><operator pos:line="17" pos:column="16">(<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="17">NULL<pos:position pos:line="17" pos:column="21"/></name><operator pos:line="17" pos:column="21">)<pos:position pos:line="17" pos:column="22"/></operator></expr>;<pos:position pos:line="17" pos:column="23"/></return>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="19" pos:column="5">/* clone the pdu */</comment>
    <expr_stmt><expr><name pos:line="20" pos:column="5">newpdu<pos:position pos:line="20" pos:column="11"/></name> <operator pos:line="20" pos:column="12">=<pos:position pos:line="20" pos:column="13"/></operator> <call><name pos:line="20" pos:column="14">snmp_pdu_clone<pos:position pos:line="20" pos:column="28"/></name><argument_list pos:line="20" pos:column="28">(<argument><expr><name pos:line="20" pos:column="29">pdu<pos:position pos:line="20" pos:column="32"/></name></expr></argument>)<pos:position pos:line="20" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="34"/></expr_stmt>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name pos:line="21" pos:column="9">newpdu<pos:position pos:line="21" pos:column="15"/></name> <operator pos:line="21" pos:column="16">==<pos:position pos:line="21" pos:column="18"/></operator> <name pos:line="21" pos:column="19">NULL<pos:position pos:line="21" pos:column="23"/></name></expr>)<pos:position pos:line="21" pos:column="24"/></condition><then pos:line="21" pos:column="24">
        <block type="pseudo"><return pos:line="22" pos:column="9">return <expr><operator pos:line="22" pos:column="16">(<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="17">NULL<pos:position pos:line="22" pos:column="21"/></name><operator pos:line="22" pos:column="21">)<pos:position pos:line="22" pos:column="22"/></operator></expr>;<pos:position pos:line="22" pos:column="23"/></return></block></then></if>

    <expr_stmt><expr><name><name pos:line="24" pos:column="5">newpdu<pos:position pos:line="24" pos:column="11"/></name><operator pos:line="24" pos:column="11">-&gt;<pos:position pos:line="24" pos:column="16"/></operator><name pos:line="24" pos:column="13">variables<pos:position pos:line="24" pos:column="22"/></name></name> <operator pos:line="24" pos:column="23">=<pos:position pos:line="24" pos:column="24"/></operator> <literal type="number" pos:line="24" pos:column="25">0<pos:position pos:line="24" pos:column="26"/></literal></expr>;<pos:position pos:line="24" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="25" pos:column="5">newpdu<pos:position pos:line="25" pos:column="11"/></name><operator pos:line="25" pos:column="11">-&gt;<pos:position pos:line="25" pos:column="16"/></operator><name pos:line="25" pos:column="13">command<pos:position pos:line="25" pos:column="20"/></name></name> <operator pos:line="25" pos:column="21">=<pos:position pos:line="25" pos:column="22"/></operator> <name pos:line="25" pos:column="23">command<pos:position pos:line="25" pos:column="30"/></name></expr>;<pos:position pos:line="25" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="26" pos:column="5">newpdu<pos:position pos:line="26" pos:column="11"/></name><operator pos:line="26" pos:column="11">-&gt;<pos:position pos:line="26" pos:column="16"/></operator><name pos:line="26" pos:column="13">reqid<pos:position pos:line="26" pos:column="18"/></name></name> <operator pos:line="26" pos:column="19">=<pos:position pos:line="26" pos:column="20"/></operator> <name pos:line="26" pos:column="21">SNMP_DEFAULT_REQID<pos:position pos:line="26" pos:column="39"/></name></expr>;<pos:position pos:line="26" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="27" pos:column="5">newpdu<pos:position pos:line="27" pos:column="11"/></name><operator pos:line="27" pos:column="11">-&gt;<pos:position pos:line="27" pos:column="16"/></operator><name pos:line="27" pos:column="13">errstat<pos:position pos:line="27" pos:column="20"/></name></name> <operator pos:line="27" pos:column="21">=<pos:position pos:line="27" pos:column="22"/></operator> <name pos:line="27" pos:column="23">SNMP_DEFAULT_ERRSTAT<pos:position pos:line="27" pos:column="43"/></name></expr>;<pos:position pos:line="27" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="28" pos:column="5">newpdu<pos:position pos:line="28" pos:column="11"/></name><operator pos:line="28" pos:column="11">-&gt;<pos:position pos:line="28" pos:column="16"/></operator><name pos:line="28" pos:column="13">errindex<pos:position pos:line="28" pos:column="21"/></name></name> <operator pos:line="28" pos:column="22">=<pos:position pos:line="28" pos:column="23"/></operator> <name pos:line="28" pos:column="24">SNMP_DEFAULT_ERRINDEX<pos:position pos:line="28" pos:column="45"/></name></expr>;<pos:position pos:line="28" pos:column="46"/></expr_stmt>

    <comment type="block" pos:line="30" pos:column="5">/* Loop through the variables, removing whatever isn't necessary */</comment>

    <expr_stmt><expr><name pos:line="32" pos:column="5">var<pos:position pos:line="32" pos:column="8"/></name> <operator pos:line="32" pos:column="9">=<pos:position pos:line="32" pos:column="10"/></operator> <name><name pos:line="32" pos:column="11">pdu<pos:position pos:line="32" pos:column="14"/></name><operator pos:line="32" pos:column="14">-&gt;<pos:position pos:line="32" pos:column="19"/></operator><name pos:line="32" pos:column="16">variables<pos:position pos:line="32" pos:column="25"/></name></name></expr>;<pos:position pos:line="32" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="33" pos:column="5">i<pos:position pos:line="33" pos:column="6"/></name> <operator pos:line="33" pos:column="7">=<pos:position pos:line="33" pos:column="8"/></operator> <literal type="number" pos:line="33" pos:column="9">1<pos:position pos:line="33" pos:column="10"/></literal></expr>;<pos:position pos:line="33" pos:column="11"/></expr_stmt>

    <comment type="block" pos:line="35" pos:column="5">/* skip first variable if necessary */</comment>
    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><name><name pos:line="36" pos:column="9">pdu<pos:position pos:line="36" pos:column="12"/></name><operator pos:line="36" pos:column="12">-&gt;<pos:position pos:line="36" pos:column="17"/></operator><name pos:line="36" pos:column="14">errindex<pos:position pos:line="36" pos:column="22"/></name></name> <operator pos:line="36" pos:column="23">==<pos:position pos:line="36" pos:column="25"/></operator> <name pos:line="36" pos:column="26">i<pos:position pos:line="36" pos:column="27"/></name></expr>)<pos:position pos:line="36" pos:column="28"/></condition><then pos:line="36" pos:column="28"> <block pos:line="36" pos:column="29">{
        <expr_stmt><expr><name pos:line="37" pos:column="9">var<pos:position pos:line="37" pos:column="12"/></name> <operator pos:line="37" pos:column="13">=<pos:position pos:line="37" pos:column="14"/></operator> <name><name pos:line="37" pos:column="15">var<pos:position pos:line="37" pos:column="18"/></name><operator pos:line="37" pos:column="18">-&gt;<pos:position pos:line="37" pos:column="23"/></operator><name pos:line="37" pos:column="20">next_variable<pos:position pos:line="37" pos:column="33"/></name></name></expr>;<pos:position pos:line="37" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><name pos:line="38" pos:column="9">i<pos:position pos:line="38" pos:column="10"/></name><operator pos:line="38" pos:column="10">++<pos:position pos:line="38" pos:column="12"/></operator></expr>;<pos:position pos:line="38" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if>
    <if pos:line="40" pos:column="5">if <condition pos:line="40" pos:column="8">(<expr><name pos:line="40" pos:column="9">var<pos:position pos:line="40" pos:column="12"/></name> <operator pos:line="40" pos:column="13">!=<pos:position pos:line="40" pos:column="15"/></operator> <name pos:line="40" pos:column="16">NULL<pos:position pos:line="40" pos:column="20"/></name></expr>)<pos:position pos:line="40" pos:column="21"/></condition><then pos:line="40" pos:column="21"> <block pos:line="40" pos:column="22">{

        <comment type="block" pos:line="42" pos:column="9">/* VAR is the first uncopied variable */</comment>

        <comment type="block" pos:line="44" pos:column="9">/* Clone this variable */</comment>
        <expr_stmt><expr><name><name pos:line="45" pos:column="9">newpdu<pos:position pos:line="45" pos:column="15"/></name><operator pos:line="45" pos:column="15">-&gt;<pos:position pos:line="45" pos:column="20"/></operator><name pos:line="45" pos:column="17">variables<pos:position pos:line="45" pos:column="26"/></name></name> <operator pos:line="45" pos:column="27">=<pos:position pos:line="45" pos:column="28"/></operator> <call><name pos:line="45" pos:column="29">snmp_var_clone<pos:position pos:line="45" pos:column="43"/></name><argument_list pos:line="45" pos:column="43">(<argument><expr><name pos:line="45" pos:column="44">var<pos:position pos:line="45" pos:column="47"/></name></expr></argument>)<pos:position pos:line="45" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="49"/></expr_stmt>
        <if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><name><name pos:line="46" pos:column="13">newpdu<pos:position pos:line="46" pos:column="19"/></name><operator pos:line="46" pos:column="19">-&gt;<pos:position pos:line="46" pos:column="24"/></operator><name pos:line="46" pos:column="21">variables<pos:position pos:line="46" pos:column="30"/></name></name> <operator pos:line="46" pos:column="31">==<pos:position pos:line="46" pos:column="33"/></operator> <name pos:line="46" pos:column="34">NULL<pos:position pos:line="46" pos:column="38"/></name></expr>)<pos:position pos:line="46" pos:column="39"/></condition><then pos:line="46" pos:column="39"> <block pos:line="46" pos:column="40">{
            <expr_stmt><expr><call><name pos:line="47" pos:column="13">snmp_pdu_free<pos:position pos:line="47" pos:column="26"/></name><argument_list pos:line="47" pos:column="26">(<argument><expr><name pos:line="47" pos:column="27">newpdu<pos:position pos:line="47" pos:column="33"/></name></expr></argument>)<pos:position pos:line="47" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="35"/></expr_stmt>
            <return pos:line="48" pos:column="13">return <expr><operator pos:line="48" pos:column="20">(<pos:position pos:line="48" pos:column="21"/></operator><name pos:line="48" pos:column="21">NULL<pos:position pos:line="48" pos:column="25"/></name><operator pos:line="48" pos:column="25">)<pos:position pos:line="48" pos:column="26"/></operator></expr>;<pos:position pos:line="48" pos:column="27"/></return>
        }<pos:position pos:line="49" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="50" pos:column="9">copied<pos:position pos:line="50" pos:column="15"/></name><operator pos:line="50" pos:column="15">++<pos:position pos:line="50" pos:column="17"/></operator></expr>;<pos:position pos:line="50" pos:column="18"/></expr_stmt>

        <expr_stmt><expr><name pos:line="52" pos:column="9">newvar<pos:position pos:line="52" pos:column="15"/></name> <operator pos:line="52" pos:column="16">=<pos:position pos:line="52" pos:column="17"/></operator> <name><name pos:line="52" pos:column="18">newpdu<pos:position pos:line="52" pos:column="24"/></name><operator pos:line="52" pos:column="24">-&gt;<pos:position pos:line="52" pos:column="29"/></operator><name pos:line="52" pos:column="26">variables<pos:position pos:line="52" pos:column="35"/></name></name></expr>;<pos:position pos:line="52" pos:column="36"/></expr_stmt>

        <comment type="block" pos:line="54" pos:column="9">/* VAR has been copied to NEWVAR. */</comment>
        <while pos:line="55" pos:column="9">while <condition pos:line="55" pos:column="15">(<expr><name><name pos:line="55" pos:column="16">var<pos:position pos:line="55" pos:column="19"/></name><operator pos:line="55" pos:column="19">-&gt;<pos:position pos:line="55" pos:column="24"/></operator><name pos:line="55" pos:column="21">next_variable<pos:position pos:line="55" pos:column="34"/></name></name></expr>)<pos:position pos:line="55" pos:column="35"/></condition> <block pos:line="55" pos:column="36">{

            <comment type="block" pos:line="57" pos:column="13">/* Skip the item that was bad */</comment>
            <if pos:line="58" pos:column="13">if <condition pos:line="58" pos:column="16">(<expr><operator pos:line="58" pos:column="17">++<pos:position pos:line="58" pos:column="19"/></operator><name pos:line="58" pos:column="19">i<pos:position pos:line="58" pos:column="20"/></name> <operator pos:line="58" pos:column="21">==<pos:position pos:line="58" pos:column="23"/></operator> <name><name pos:line="58" pos:column="24">pdu<pos:position pos:line="58" pos:column="27"/></name><operator pos:line="58" pos:column="27">-&gt;<pos:position pos:line="58" pos:column="32"/></operator><name pos:line="58" pos:column="29">errindex<pos:position pos:line="58" pos:column="37"/></name></name></expr>)<pos:position pos:line="58" pos:column="38"/></condition><then pos:line="58" pos:column="38"> <block pos:line="58" pos:column="39">{
                <expr_stmt><expr><name pos:line="59" pos:column="17">var<pos:position pos:line="59" pos:column="20"/></name> <operator pos:line="59" pos:column="21">=<pos:position pos:line="59" pos:column="22"/></operator> <name><name pos:line="59" pos:column="23">var<pos:position pos:line="59" pos:column="26"/></name><operator pos:line="59" pos:column="26">-&gt;<pos:position pos:line="59" pos:column="31"/></operator><name pos:line="59" pos:column="28">next_variable<pos:position pos:line="59" pos:column="41"/></name></name></expr>;<pos:position pos:line="59" pos:column="42"/></expr_stmt>
                <continue pos:line="60" pos:column="17">continue;<pos:position pos:line="60" pos:column="26"/></continue>
            }<pos:position pos:line="61" pos:column="14"/></block></then></if>
            <comment type="block" pos:line="62" pos:column="13">/* Copy this var */</comment>
            <expr_stmt><expr><name><name pos:line="63" pos:column="13">newvar<pos:position pos:line="63" pos:column="19"/></name><operator pos:line="63" pos:column="19">-&gt;<pos:position pos:line="63" pos:column="24"/></operator><name pos:line="63" pos:column="21">next_variable<pos:position pos:line="63" pos:column="34"/></name></name> <operator pos:line="63" pos:column="35">=<pos:position pos:line="63" pos:column="36"/></operator> <call><name pos:line="63" pos:column="37">snmp_var_clone<pos:position pos:line="63" pos:column="51"/></name><argument_list pos:line="63" pos:column="51">(<argument><expr><name><name pos:line="63" pos:column="52">var<pos:position pos:line="63" pos:column="55"/></name><operator pos:line="63" pos:column="55">-&gt;<pos:position pos:line="63" pos:column="60"/></operator><name pos:line="63" pos:column="57">next_variable<pos:position pos:line="63" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="63" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="72"/></expr_stmt>
            <if pos:line="64" pos:column="13">if <condition pos:line="64" pos:column="16">(<expr><name><name pos:line="64" pos:column="17">newvar<pos:position pos:line="64" pos:column="23"/></name><operator pos:line="64" pos:column="23">-&gt;<pos:position pos:line="64" pos:column="28"/></operator><name pos:line="64" pos:column="25">next_variable<pos:position pos:line="64" pos:column="38"/></name></name> <operator pos:line="64" pos:column="39">==<pos:position pos:line="64" pos:column="41"/></operator> <name pos:line="64" pos:column="42">NULL<pos:position pos:line="64" pos:column="46"/></name></expr>)<pos:position pos:line="64" pos:column="47"/></condition><then pos:line="64" pos:column="47"> <block pos:line="64" pos:column="48">{
                <expr_stmt><expr><call><name pos:line="65" pos:column="17">snmp_pdu_free<pos:position pos:line="65" pos:column="30"/></name><argument_list pos:line="65" pos:column="30">(<argument><expr><name pos:line="65" pos:column="31">newpdu<pos:position pos:line="65" pos:column="37"/></name></expr></argument>)<pos:position pos:line="65" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="39"/></expr_stmt>
                <return pos:line="66" pos:column="17">return <expr><operator pos:line="66" pos:column="24">(<pos:position pos:line="66" pos:column="25"/></operator><name pos:line="66" pos:column="25">NULL<pos:position pos:line="66" pos:column="29"/></name><operator pos:line="66" pos:column="29">)<pos:position pos:line="66" pos:column="30"/></operator></expr>;<pos:position pos:line="66" pos:column="31"/></return>
            }<pos:position pos:line="67" pos:column="14"/></block></then></if>
            <comment type="block" pos:line="68" pos:column="13">/* Move to the next one */</comment>
            <expr_stmt><expr><name pos:line="69" pos:column="13">newvar<pos:position pos:line="69" pos:column="19"/></name> <operator pos:line="69" pos:column="20">=<pos:position pos:line="69" pos:column="21"/></operator> <name><name pos:line="69" pos:column="22">newvar<pos:position pos:line="69" pos:column="28"/></name><operator pos:line="69" pos:column="28">-&gt;<pos:position pos:line="69" pos:column="33"/></operator><name pos:line="69" pos:column="30">next_variable<pos:position pos:line="69" pos:column="43"/></name></name></expr>;<pos:position pos:line="69" pos:column="44"/></expr_stmt>
            <expr_stmt><expr><name pos:line="70" pos:column="13">var<pos:position pos:line="70" pos:column="16"/></name> <operator pos:line="70" pos:column="17">=<pos:position pos:line="70" pos:column="18"/></operator> <name><name pos:line="70" pos:column="19">var<pos:position pos:line="70" pos:column="22"/></name><operator pos:line="70" pos:column="22">-&gt;<pos:position pos:line="70" pos:column="27"/></operator><name pos:line="70" pos:column="24">next_variable<pos:position pos:line="70" pos:column="37"/></name></name></expr>;<pos:position pos:line="70" pos:column="38"/></expr_stmt>
            <expr_stmt><expr><name pos:line="71" pos:column="13">copied<pos:position pos:line="71" pos:column="19"/></name><operator pos:line="71" pos:column="19">++<pos:position pos:line="71" pos:column="21"/></operator></expr>;<pos:position pos:line="71" pos:column="22"/></expr_stmt>
        }<pos:position pos:line="72" pos:column="10"/></block></while>
        <expr_stmt><expr><name><name pos:line="73" pos:column="9">newvar<pos:position pos:line="73" pos:column="15"/></name><operator pos:line="73" pos:column="15">-&gt;<pos:position pos:line="73" pos:column="20"/></operator><name pos:line="73" pos:column="17">next_variable<pos:position pos:line="73" pos:column="30"/></name></name> <operator pos:line="73" pos:column="31">=<pos:position pos:line="73" pos:column="32"/></operator> <name pos:line="73" pos:column="33">NULL<pos:position pos:line="73" pos:column="37"/></name></expr>;<pos:position pos:line="73" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="74" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="75" pos:column="5">/* If we didn't copy anything, free the new pdu. */</comment>
    <if pos:line="76" pos:column="5">if <condition pos:line="76" pos:column="8">(<expr><name pos:line="76" pos:column="9">i<pos:position pos:line="76" pos:column="10"/></name> <operator pos:line="76" pos:column="11">&lt;<pos:position pos:line="76" pos:column="15"/></operator> <name><name pos:line="76" pos:column="13">pdu<pos:position pos:line="76" pos:column="16"/></name><operator pos:line="76" pos:column="16">-&gt;<pos:position pos:line="76" pos:column="21"/></operator><name pos:line="76" pos:column="18">errindex<pos:position pos:line="76" pos:column="26"/></name></name> <operator pos:line="76" pos:column="27">||<pos:position pos:line="76" pos:column="29"/></operator> <name pos:line="76" pos:column="30">copied<pos:position pos:line="76" pos:column="36"/></name> <operator pos:line="76" pos:column="37">==<pos:position pos:line="76" pos:column="39"/></operator> <literal type="number" pos:line="76" pos:column="40">0<pos:position pos:line="76" pos:column="41"/></literal></expr>)<pos:position pos:line="76" pos:column="42"/></condition><then pos:line="76" pos:column="42"> <block pos:line="76" pos:column="43">{
        <expr_stmt><expr><call><name pos:line="77" pos:column="9">snmp_free_pdu<pos:position pos:line="77" pos:column="22"/></name><argument_list pos:line="77" pos:column="22">(<argument><expr><name pos:line="77" pos:column="23">newpdu<pos:position pos:line="77" pos:column="29"/></name></expr></argument>)<pos:position pos:line="77" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="78" pos:column="9">snmp_set_api_error<pos:position pos:line="78" pos:column="27"/></name><argument_list pos:line="78" pos:column="27">(<argument><expr><name pos:line="78" pos:column="28">SNMPERR_UNABLE_TO_FIX<pos:position pos:line="78" pos:column="49"/></name></expr></argument>)<pos:position pos:line="78" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="51"/></expr_stmt>
        <return pos:line="79" pos:column="9">return <expr><operator pos:line="79" pos:column="16">(<pos:position pos:line="79" pos:column="17"/></operator><name pos:line="79" pos:column="17">NULL<pos:position pos:line="79" pos:column="21"/></name><operator pos:line="79" pos:column="21">)<pos:position pos:line="79" pos:column="22"/></operator></expr>;<pos:position pos:line="79" pos:column="23"/></return>
    }<pos:position pos:line="80" pos:column="6"/></block></then></if>
<cpp:if pos:line="81" pos:column="1">#<cpp:directive pos:line="81" pos:column="2">if<pos:position pos:line="81" pos:column="4"/></cpp:directive> <expr><name pos:line="81" pos:column="5">DEBUG_PDU<pos:position pos:line="81" pos:column="14"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="82" pos:column="5">snmplib_debug<pos:position pos:line="82" pos:column="18"/></name><argument_list pos:line="82" pos:column="18">(<argument><expr><literal type="number" pos:line="82" pos:column="19">8<pos:position pos:line="82" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="82" pos:column="22">"PDU %x:  Fixed PDU is %x\n"<pos:position pos:line="82" pos:column="50"/></literal></expr></argument>,
                  <argument><expr><operator pos:line="83" pos:column="19">(<pos:position pos:line="83" pos:column="20"/></operator><name pos:line="83" pos:column="20">unsigned<pos:position pos:line="83" pos:column="28"/></name> <name pos:line="83" pos:column="29">int<pos:position pos:line="83" pos:column="32"/></name><operator pos:line="83" pos:column="32">)<pos:position pos:line="83" pos:column="33"/></operator> <name pos:line="83" pos:column="34">pdu<pos:position pos:line="83" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="83" pos:column="39">(<pos:position pos:line="83" pos:column="40"/></operator><name pos:line="83" pos:column="40">unsigned<pos:position pos:line="83" pos:column="48"/></name> <name pos:line="83" pos:column="49">int<pos:position pos:line="83" pos:column="52"/></name><operator pos:line="83" pos:column="52">)<pos:position pos:line="83" pos:column="53"/></operator> <name pos:line="83" pos:column="54">newpdu<pos:position pos:line="83" pos:column="60"/></name></expr></argument>)<pos:position pos:line="83" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="62"/></expr_stmt>
<cpp:endif pos:line="84" pos:column="1">#<cpp:directive pos:line="84" pos:column="2">endif<pos:position pos:line="84" pos:column="7"/></cpp:directive></cpp:endif>
    <return pos:line="85" pos:column="5">return <expr><operator pos:line="85" pos:column="12">(<pos:position pos:line="85" pos:column="13"/></operator><name pos:line="85" pos:column="13">newpdu<pos:position pos:line="85" pos:column="19"/></name><operator pos:line="85" pos:column="19">)<pos:position pos:line="85" pos:column="20"/></operator></expr>;<pos:position pos:line="85" pos:column="21"/></return>
}<pos:position pos:line="86" pos:column="2"/></block></function></unit>
