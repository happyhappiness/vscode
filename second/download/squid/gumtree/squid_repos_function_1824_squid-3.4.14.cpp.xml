<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1824_squid-3.4.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">external_acl_cache_touch<pos:position pos:line="2" pos:column="25"/></name><parameter_list pos:line="2" pos:column="25">(<parameter><decl><type><name pos:line="2" pos:column="26">external_acl<pos:position pos:line="2" pos:column="38"/></name> <modifier pos:line="2" pos:column="39">*<pos:position pos:line="2" pos:column="40"/></modifier></type> <name pos:line="2" pos:column="41">def<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="46">const<pos:position pos:line="2" pos:column="51"/></specifier> <name pos:line="2" pos:column="52">ExternalACLEntryPointer<pos:position pos:line="2" pos:column="75"/></name> <modifier pos:line="2" pos:column="76">&amp;<pos:position pos:line="2" pos:column="81"/></modifier></type><name pos:line="2" pos:column="77">entry<pos:position pos:line="2" pos:column="82"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="83"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// this must not be done when nothing is being cached.</comment>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><name><name pos:line="5" pos:column="9">def<pos:position pos:line="5" pos:column="12"/></name><operator pos:line="5" pos:column="12">-&gt;<pos:position pos:line="5" pos:column="17"/></operator><name pos:line="5" pos:column="14">cache_size<pos:position pos:line="5" pos:column="24"/></name></name> <operator pos:line="5" pos:column="25">&lt;=<pos:position pos:line="5" pos:column="30"/></operator> <literal type="number" pos:line="5" pos:column="28">0<pos:position pos:line="5" pos:column="29"/></literal> <operator pos:line="5" pos:column="30">||<pos:position pos:line="5" pos:column="32"/></operator> <operator pos:line="5" pos:column="33">(<pos:position pos:line="5" pos:column="34"/></operator><name><name pos:line="5" pos:column="34">def<pos:position pos:line="5" pos:column="37"/></name><operator pos:line="5" pos:column="37">-&gt;<pos:position pos:line="5" pos:column="42"/></operator><name pos:line="5" pos:column="39">ttl<pos:position pos:line="5" pos:column="42"/></name></name> <operator pos:line="5" pos:column="43">&lt;=<pos:position pos:line="5" pos:column="48"/></operator> <literal type="number" pos:line="5" pos:column="46">0<pos:position pos:line="5" pos:column="47"/></literal> <operator pos:line="5" pos:column="48">&amp;&amp;<pos:position pos:line="5" pos:column="58"/></operator> <name><name pos:line="5" pos:column="51">entry<pos:position pos:line="5" pos:column="56"/></name><operator pos:line="5" pos:column="56">-&gt;<pos:position pos:line="5" pos:column="61"/></operator><name pos:line="5" pos:column="58">result<pos:position pos:line="5" pos:column="64"/></name></name> <operator pos:line="5" pos:column="65">==<pos:position pos:line="5" pos:column="67"/></operator> <literal type="number" pos:line="5" pos:column="68">1<pos:position pos:line="5" pos:column="69"/></literal><operator pos:line="5" pos:column="69">)<pos:position pos:line="5" pos:column="70"/></operator> <operator pos:line="5" pos:column="71">||<pos:position pos:line="5" pos:column="73"/></operator> <operator pos:line="5" pos:column="74">(<pos:position pos:line="5" pos:column="75"/></operator><name><name pos:line="5" pos:column="75">def<pos:position pos:line="5" pos:column="78"/></name><operator pos:line="5" pos:column="78">-&gt;<pos:position pos:line="5" pos:column="83"/></operator><name pos:line="5" pos:column="80">negative_ttl<pos:position pos:line="5" pos:column="92"/></name></name> <operator pos:line="5" pos:column="93">&lt;=<pos:position pos:line="5" pos:column="98"/></operator> <literal type="number" pos:line="5" pos:column="96">0<pos:position pos:line="5" pos:column="97"/></literal> <operator pos:line="5" pos:column="98">&amp;&amp;<pos:position pos:line="5" pos:column="108"/></operator> <name><name pos:line="5" pos:column="101">entry<pos:position pos:line="5" pos:column="106"/></name><operator pos:line="5" pos:column="106">-&gt;<pos:position pos:line="5" pos:column="111"/></operator><name pos:line="5" pos:column="108">result<pos:position pos:line="5" pos:column="114"/></name></name> <operator pos:line="5" pos:column="115">!=<pos:position pos:line="5" pos:column="117"/></operator> <literal type="number" pos:line="5" pos:column="118">1<pos:position pos:line="5" pos:column="119"/></literal><operator pos:line="5" pos:column="119">)<pos:position pos:line="5" pos:column="120"/></operator></expr>)<pos:position pos:line="5" pos:column="121"/></condition><then pos:line="5" pos:column="121">
        <block type="pseudo"><return pos:line="6" pos:column="9">return;<pos:position pos:line="6" pos:column="16"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="8" pos:column="5">dlinkDelete<pos:position pos:line="8" pos:column="16"/></name><argument_list pos:line="8" pos:column="16">(<argument><expr><operator pos:line="8" pos:column="17">&amp;<pos:position pos:line="8" pos:column="22"/></operator><name><name pos:line="8" pos:column="18">entry<pos:position pos:line="8" pos:column="23"/></name><operator pos:line="8" pos:column="23">-&gt;<pos:position pos:line="8" pos:column="28"/></operator><name pos:line="8" pos:column="25">lru<pos:position pos:line="8" pos:column="28"/></name></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="30">&amp;<pos:position pos:line="8" pos:column="35"/></operator><name><name pos:line="8" pos:column="31">def<pos:position pos:line="8" pos:column="34"/></name><operator pos:line="8" pos:column="34">-&gt;<pos:position pos:line="8" pos:column="39"/></operator><name pos:line="8" pos:column="36">lru_list<pos:position pos:line="8" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="46"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">ExternalACLEntry<pos:position pos:line="9" pos:column="21"/></name> <modifier pos:line="9" pos:column="22">*<pos:position pos:line="9" pos:column="23"/></modifier></type><name pos:line="9" pos:column="23">e<pos:position pos:line="9" pos:column="24"/></name> <init pos:line="9" pos:column="25">= <expr><cast type="const" pos:line="9" pos:column="27">const_cast<argument_list type="generic" pos:line="9" pos:column="37">&lt;<argument><expr><name pos:line="9" pos:column="38">ExternalACLEntry<pos:position pos:line="9" pos:column="54"/></name> <operator pos:line="9" pos:column="55">*<pos:position pos:line="9" pos:column="56"/></operator></expr></argument>&gt;<pos:position pos:line="9" pos:column="60"/></argument_list><argument_list pos:line="9" pos:column="57">(<argument><expr><call><name><name pos:line="9" pos:column="58">entry<pos:position pos:line="9" pos:column="63"/></name><operator pos:line="9" pos:column="63">.<pos:position pos:line="9" pos:column="64"/></operator><name pos:line="9" pos:column="64">getRaw<pos:position pos:line="9" pos:column="70"/></name></name><argument_list pos:line="9" pos:column="70">()<pos:position pos:line="9" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="73"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="9" pos:column="74"/></decl_stmt> <comment type="line" pos:line="9" pos:column="75">// XXX: make hash a std::map of Pointer.</comment>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">dlinkAdd<pos:position pos:line="10" pos:column="13"/></name><argument_list pos:line="10" pos:column="13">(<argument><expr><name pos:line="10" pos:column="14">e<pos:position pos:line="10" pos:column="15"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="17">&amp;<pos:position pos:line="10" pos:column="22"/></operator><name><name pos:line="10" pos:column="18">entry<pos:position pos:line="10" pos:column="23"/></name><operator pos:line="10" pos:column="23">-&gt;<pos:position pos:line="10" pos:column="28"/></operator><name pos:line="10" pos:column="25">lru<pos:position pos:line="10" pos:column="28"/></name></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="30">&amp;<pos:position pos:line="10" pos:column="35"/></operator><name><name pos:line="10" pos:column="31">def<pos:position pos:line="10" pos:column="34"/></name><operator pos:line="10" pos:column="34">-&gt;<pos:position pos:line="10" pos:column="39"/></operator><name pos:line="10" pos:column="36">lru_list<pos:position pos:line="10" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="46"/></expr_stmt>
}<pos:position pos:line="11" pos:column="2"/></block></function></unit>
