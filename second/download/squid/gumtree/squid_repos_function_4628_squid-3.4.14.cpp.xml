<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4628_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">Acl<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">AndNode<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">doMatch<pos:position pos:line="2" pos:column="22"/></name></name><parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><name pos:line="2" pos:column="23">ACLChecklist<pos:position pos:line="2" pos:column="35"/></name> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type><name pos:line="2" pos:column="37">checklist<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="48">Nodes<pos:position pos:line="2" pos:column="53"/></name><operator pos:line="2" pos:column="53">::<pos:position pos:line="2" pos:column="55"/></operator><name pos:line="2" pos:column="55">const_iterator<pos:position pos:line="2" pos:column="69"/></name></name></type> <name pos:line="2" pos:column="70">start<pos:position pos:line="2" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="76"/></parameter_list> <specifier pos:line="2" pos:column="77">const<pos:position pos:line="2" pos:column="82"/></specifier>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// find the first node that does not match</comment>
    <for pos:line="5" pos:column="5">for <control pos:line="5" pos:column="9">(<init><decl><type><name><name pos:line="5" pos:column="10">Nodes<pos:position pos:line="5" pos:column="15"/></name><operator pos:line="5" pos:column="15">::<pos:position pos:line="5" pos:column="17"/></operator><name pos:line="5" pos:column="17">const_iterator<pos:position pos:line="5" pos:column="31"/></name></name></type> <name pos:line="5" pos:column="32">i<pos:position pos:line="5" pos:column="33"/></name> <init pos:line="5" pos:column="34">= <expr><name pos:line="5" pos:column="36">start<pos:position pos:line="5" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="42"/></init> <condition><expr><name pos:line="5" pos:column="43">i<pos:position pos:line="5" pos:column="44"/></name> <operator pos:line="5" pos:column="45">!=<pos:position pos:line="5" pos:column="47"/></operator> <call><name><name pos:line="5" pos:column="48">nodes<pos:position pos:line="5" pos:column="53"/></name><operator pos:line="5" pos:column="53">.<pos:position pos:line="5" pos:column="54"/></operator><name pos:line="5" pos:column="54">end<pos:position pos:line="5" pos:column="57"/></name></name><argument_list pos:line="5" pos:column="57">()<pos:position pos:line="5" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="60"/></condition> <incr><expr><operator pos:line="5" pos:column="61">++<pos:position pos:line="5" pos:column="63"/></operator><name pos:line="5" pos:column="63">i<pos:position pos:line="5" pos:column="64"/></name></expr></incr>)<pos:position pos:line="5" pos:column="65"/></control> <block pos:line="5" pos:column="66">{
        <if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><operator pos:line="6" pos:column="13">!<pos:position pos:line="6" pos:column="14"/></operator><call><name><name pos:line="6" pos:column="14">checklist<pos:position pos:line="6" pos:column="23"/></name><operator pos:line="6" pos:column="23">-&gt;<pos:position pos:line="6" pos:column="28"/></operator><name pos:line="6" pos:column="25">matchChild<pos:position pos:line="6" pos:column="35"/></name></name><argument_list pos:line="6" pos:column="35">(<argument><expr><name pos:line="6" pos:column="36">this<pos:position pos:line="6" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="42">i<pos:position pos:line="6" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="6" pos:column="45">*<pos:position pos:line="6" pos:column="46"/></operator><name pos:line="6" pos:column="46">i<pos:position pos:line="6" pos:column="47"/></name></expr></argument>)<pos:position pos:line="6" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="49"/></condition><then pos:line="6" pos:column="49">
            <block type="pseudo"><return pos:line="7" pos:column="13">return <expr><ternary><condition><expr><call><name><name pos:line="7" pos:column="20">checklist<pos:position pos:line="7" pos:column="29"/></name><operator pos:line="7" pos:column="29">-&gt;<pos:position pos:line="7" pos:column="34"/></operator><name pos:line="7" pos:column="31">keepMatching<pos:position pos:line="7" pos:column="43"/></name></name><argument_list pos:line="7" pos:column="43">()<pos:position pos:line="7" pos:column="45"/></argument_list></call></expr> ?<pos:position pos:line="7" pos:column="47"/></condition><then pos:line="7" pos:column="47"> <expr><literal type="number" pos:line="7" pos:column="48">0<pos:position pos:line="7" pos:column="49"/></literal></expr> <pos:position pos:line="7" pos:column="50"/></then><else pos:line="7" pos:column="50">: <expr><operator pos:line="7" pos:column="52">-<pos:position pos:line="7" pos:column="53"/></operator><literal type="number" pos:line="7" pos:column="53">1<pos:position pos:line="7" pos:column="54"/></literal></expr></else></ternary></expr>;<pos:position pos:line="7" pos:column="55"/></return></block></then></if>
    }<pos:position pos:line="8" pos:column="6"/></block></for>

    <comment type="line" pos:line="10" pos:column="5">// one and not zero on empty because in math empty product equals identity</comment>
    <return pos:line="11" pos:column="5">return <expr><literal type="number" pos:line="11" pos:column="12">1<pos:position pos:line="11" pos:column="13"/></literal></expr>;<pos:position pos:line="11" pos:column="14"/></return> <comment type="line" pos:line="11" pos:column="15">// no mismatches found (i.e., all kids matched)</comment>
}<pos:position pos:line="12" pos:column="2"/></block></function></unit>
