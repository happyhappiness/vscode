<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3782_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">unsigned<pos:position pos:line="1" pos:column="9"/></name> <name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type>
<name><name pos:line="2" pos:column="1">Ip<pos:position pos:line="2" pos:column="3"/></name><operator pos:line="2" pos:column="3">::<pos:position pos:line="2" pos:column="5"/></operator><name pos:line="2" pos:column="5">Address<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">toHostStr<pos:position pos:line="2" pos:column="23"/></name></name><parameter_list pos:line="2" pos:column="23">(<parameter><decl><type><name pos:line="2" pos:column="24">char<pos:position pos:line="2" pos:column="28"/></name> <modifier pos:line="2" pos:column="29">*<pos:position pos:line="2" pos:column="30"/></modifier></type><name pos:line="2" pos:column="30">buf<pos:position pos:line="2" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="35">const<pos:position pos:line="2" pos:column="40"/></specifier> <name pos:line="2" pos:column="41">unsigned<pos:position pos:line="2" pos:column="49"/></name> <name pos:line="2" pos:column="50">int<pos:position pos:line="2" pos:column="53"/></name></type> <name pos:line="2" pos:column="54">blen<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="59"/></parameter_list> <specifier pos:line="2" pos:column="60">const<pos:position pos:line="2" pos:column="65"/></specifier>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">p<pos:position pos:line="4" pos:column="12"/></name> <init pos:line="4" pos:column="13">= <expr><name pos:line="4" pos:column="15">buf<pos:position pos:line="4" pos:column="18"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><call><name pos:line="6" pos:column="9">isIPv6<pos:position pos:line="6" pos:column="15"/></name><argument_list pos:line="6" pos:column="15">()<pos:position pos:line="6" pos:column="17"/></argument_list></call> <operator pos:line="6" pos:column="18">&amp;&amp;<pos:position pos:line="6" pos:column="28"/></operator> <name pos:line="6" pos:column="21">blen<pos:position pos:line="6" pos:column="25"/></name> <operator pos:line="6" pos:column="26">&gt;<pos:position pos:line="6" pos:column="30"/></operator> <literal type="number" pos:line="6" pos:column="28">0<pos:position pos:line="6" pos:column="29"/></literal></expr>)<pos:position pos:line="6" pos:column="30"/></condition><then pos:line="6" pos:column="30"> <block pos:line="6" pos:column="31">{
        <expr_stmt><expr><operator pos:line="7" pos:column="9">*<pos:position pos:line="7" pos:column="10"/></operator><name pos:line="7" pos:column="10">p<pos:position pos:line="7" pos:column="11"/></name> <operator pos:line="7" pos:column="12">=<pos:position pos:line="7" pos:column="13"/></operator> <literal type="char" pos:line="7" pos:column="14">'['<pos:position pos:line="7" pos:column="17"/></literal></expr>;<pos:position pos:line="7" pos:column="18"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="8" pos:column="9">++<pos:position pos:line="8" pos:column="11"/></operator><name pos:line="8" pos:column="11">p<pos:position pos:line="8" pos:column="12"/></name></expr>;<pos:position pos:line="8" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="11" pos:column="5">/* 8 being space for [ ] : and port digits */</comment>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">( <expr><call><name pos:line="12" pos:column="10">isIPv6<pos:position pos:line="12" pos:column="16"/></name><argument_list pos:line="12" pos:column="16">()<pos:position pos:line="12" pos:column="18"/></argument_list></call></expr> )<pos:position pos:line="12" pos:column="20"/></condition><then pos:line="12" pos:column="20">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="9">toStr<pos:position pos:line="13" pos:column="14"/></name><argument_list pos:line="13" pos:column="14">(<argument><expr><name pos:line="13" pos:column="15">p<pos:position pos:line="13" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="18">blen<pos:position pos:line="13" pos:column="22"/></name><operator pos:line="13" pos:column="22">-<pos:position pos:line="13" pos:column="23"/></operator><literal type="number" pos:line="13" pos:column="23">8<pos:position pos:line="13" pos:column="24"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="26">AF_INET6<pos:position pos:line="13" pos:column="34"/></name></expr></argument>)<pos:position pos:line="13" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="36"/></expr_stmt></block></then>
    <else pos:line="14" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="9">toStr<pos:position pos:line="15" pos:column="14"/></name><argument_list pos:line="15" pos:column="14">(<argument><expr><name pos:line="15" pos:column="15">p<pos:position pos:line="15" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="18">blen<pos:position pos:line="15" pos:column="22"/></name><operator pos:line="15" pos:column="22">-<pos:position pos:line="15" pos:column="23"/></operator><literal type="number" pos:line="15" pos:column="23">8<pos:position pos:line="15" pos:column="24"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="26">AF_INET<pos:position pos:line="15" pos:column="33"/></name></expr></argument>)<pos:position pos:line="15" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="35"/></expr_stmt></block></else></if>

    <comment type="line" pos:line="17" pos:column="5">// find the end of the new string</comment>
    <while pos:line="18" pos:column="5">while <condition pos:line="18" pos:column="11">(<expr><operator pos:line="18" pos:column="12">*<pos:position pos:line="18" pos:column="13"/></operator><name pos:line="18" pos:column="13">p<pos:position pos:line="18" pos:column="14"/></name> <operator pos:line="18" pos:column="15">!=<pos:position pos:line="18" pos:column="17"/></operator> <literal type="char" pos:line="18" pos:column="18">'\0'<pos:position pos:line="18" pos:column="22"/></literal> <operator pos:line="18" pos:column="23">&amp;&amp;<pos:position pos:line="18" pos:column="33"/></operator> <name pos:line="18" pos:column="26">p<pos:position pos:line="18" pos:column="27"/></name> <operator pos:line="18" pos:column="28">&lt;<pos:position pos:line="18" pos:column="32"/></operator> <name pos:line="18" pos:column="30">buf<pos:position pos:line="18" pos:column="33"/></name><operator pos:line="18" pos:column="33">+<pos:position pos:line="18" pos:column="34"/></operator><name pos:line="18" pos:column="34">blen<pos:position pos:line="18" pos:column="38"/></name></expr>)<pos:position pos:line="18" pos:column="39"/></condition>
        <block type="pseudo"><expr_stmt><expr><operator pos:line="19" pos:column="9">++<pos:position pos:line="19" pos:column="11"/></operator><name pos:line="19" pos:column="11">p<pos:position pos:line="19" pos:column="12"/></name></expr>;<pos:position pos:line="19" pos:column="13"/></expr_stmt></block></while>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><call><name pos:line="21" pos:column="9">isIPv6<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">()<pos:position pos:line="21" pos:column="17"/></argument_list></call> <operator pos:line="21" pos:column="18">&amp;&amp;<pos:position pos:line="21" pos:column="28"/></operator> <name pos:line="21" pos:column="21">p<pos:position pos:line="21" pos:column="22"/></name> <operator pos:line="21" pos:column="23">&lt;<pos:position pos:line="21" pos:column="27"/></operator> <operator pos:line="21" pos:column="25">(<pos:position pos:line="21" pos:column="26"/></operator><name pos:line="21" pos:column="26">buf<pos:position pos:line="21" pos:column="29"/></name><operator pos:line="21" pos:column="29">+<pos:position pos:line="21" pos:column="30"/></operator><name pos:line="21" pos:column="30">blen<pos:position pos:line="21" pos:column="34"/></name><operator pos:line="21" pos:column="34">-<pos:position pos:line="21" pos:column="35"/></operator><literal type="number" pos:line="21" pos:column="35">1<pos:position pos:line="21" pos:column="36"/></literal><operator pos:line="21" pos:column="36">)<pos:position pos:line="21" pos:column="37"/></operator></expr> )<pos:position pos:line="21" pos:column="39"/></condition><then pos:line="21" pos:column="39"> <block pos:line="21" pos:column="40">{
        <expr_stmt><expr><operator pos:line="22" pos:column="9">*<pos:position pos:line="22" pos:column="10"/></operator><name pos:line="22" pos:column="10">p<pos:position pos:line="22" pos:column="11"/></name> <operator pos:line="22" pos:column="12">=<pos:position pos:line="22" pos:column="13"/></operator> <literal type="char" pos:line="22" pos:column="14">']'<pos:position pos:line="22" pos:column="17"/></literal></expr>;<pos:position pos:line="22" pos:column="18"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="23" pos:column="9">++<pos:position pos:line="23" pos:column="11"/></operator><name pos:line="23" pos:column="11">p<pos:position pos:line="23" pos:column="12"/></name></expr>;<pos:position pos:line="23" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="26" pos:column="5">/* terminate just in case. */</comment>
    <expr_stmt><expr><operator pos:line="27" pos:column="5">*<pos:position pos:line="27" pos:column="6"/></operator><name pos:line="27" pos:column="6">p<pos:position pos:line="27" pos:column="7"/></name> <operator pos:line="27" pos:column="8">=<pos:position pos:line="27" pos:column="9"/></operator> <literal type="char" pos:line="27" pos:column="10">'\0'<pos:position pos:line="27" pos:column="14"/></literal></expr>;<pos:position pos:line="27" pos:column="15"/></expr_stmt>

    <comment type="block" pos:line="29" pos:column="5">/* return size of buffer now used */</comment>
    <return pos:line="30" pos:column="5">return <expr><operator pos:line="30" pos:column="12">(<pos:position pos:line="30" pos:column="13"/></operator><name pos:line="30" pos:column="13">p<pos:position pos:line="30" pos:column="14"/></name> <operator pos:line="30" pos:column="15">-<pos:position pos:line="30" pos:column="16"/></operator> <name pos:line="30" pos:column="17">buf<pos:position pos:line="30" pos:column="20"/></name><operator pos:line="30" pos:column="20">)<pos:position pos:line="30" pos:column="21"/></operator></expr>;<pos:position pos:line="30" pos:column="22"/></return>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
