<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2737_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">HttpHeader<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">parse<pos:position pos:line="2" pos:column="18"/></name></name><parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><specifier pos:line="2" pos:column="19">const<pos:position pos:line="2" pos:column="24"/></specifier> <name pos:line="2" pos:column="25">char<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">header_start<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="45">const<pos:position pos:line="2" pos:column="50"/></specifier> <name pos:line="2" pos:column="51">char<pos:position pos:line="2" pos:column="55"/></name> <modifier pos:line="2" pos:column="56">*<pos:position pos:line="2" pos:column="57"/></modifier></type><name pos:line="2" pos:column="57">header_end<pos:position pos:line="2" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="68"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">field_ptr<pos:position pos:line="4" pos:column="26"/></name> <init pos:line="4" pos:column="27">= <expr><name pos:line="4" pos:column="29">header_start<pos:position pos:line="4" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="42"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">HttpHeaderEntry<pos:position pos:line="5" pos:column="20"/></name> <modifier pos:line="5" pos:column="21">*<pos:position pos:line="5" pos:column="22"/></modifier></type><name pos:line="5" pos:column="22">e<pos:position pos:line="5" pos:column="23"/></name></decl>, <modifier pos:line="5" pos:column="25">*<pos:position pos:line="5" pos:column="26"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="26">e2<pos:position pos:line="5" pos:column="28"/></name></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">PROF_start<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><name pos:line="7" pos:column="16">HttpHeaderParse<pos:position pos:line="7" pos:column="31"/></name></expr></argument>)<pos:position pos:line="7" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="33"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="9" pos:column="5">assert<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><name pos:line="9" pos:column="12">header_start<pos:position pos:line="9" pos:column="24"/></name> <operator pos:line="9" pos:column="25">&amp;&amp;<pos:position pos:line="9" pos:column="35"/></operator> <name pos:line="9" pos:column="28">header_end<pos:position pos:line="9" pos:column="38"/></name></expr></argument>)<pos:position pos:line="9" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">debugs<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><literal type="number" pos:line="10" pos:column="12">55<pos:position pos:line="10" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="16">7<pos:position pos:line="10" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="19">"parsing hdr: ("<pos:position pos:line="10" pos:column="35"/></literal> <operator pos:line="10" pos:column="36">&lt;&lt;<pos:position pos:line="10" pos:column="44"/></operator> <name pos:line="10" pos:column="39">this<pos:position pos:line="10" pos:column="43"/></name> <operator pos:line="10" pos:column="44">&lt;&lt;<pos:position pos:line="10" pos:column="52"/></operator> <literal type="string" pos:line="10" pos:column="47">")"<pos:position pos:line="10" pos:column="50"/></literal> <operator pos:line="10" pos:column="51">&lt;&lt;<pos:position pos:line="10" pos:column="59"/></operator> <name><name pos:line="10" pos:column="54">std<pos:position pos:line="10" pos:column="57"/></name><operator pos:line="10" pos:column="57">::<pos:position pos:line="10" pos:column="59"/></operator><name pos:line="10" pos:column="59">endl<pos:position pos:line="10" pos:column="63"/></name></name> <operator pos:line="10" pos:column="64">&lt;&lt;<pos:position pos:line="10" pos:column="72"/></operator> <call><name pos:line="10" pos:column="67">getStringPrefix<pos:position pos:line="10" pos:column="82"/></name><argument_list pos:line="10" pos:column="82">(<argument><expr><name pos:line="10" pos:column="83">header_start<pos:position pos:line="10" pos:column="95"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="97">header_end<pos:position pos:line="10" pos:column="107"/></name></expr></argument>)<pos:position pos:line="10" pos:column="108"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="109"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="110"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="11" pos:column="5">HttpHeaderStats<pos:position pos:line="11" pos:column="20"/></name><index pos:line="11" pos:column="20">[<expr><name pos:line="11" pos:column="21">owner<pos:position pos:line="11" pos:column="26"/></name></expr>]<pos:position pos:line="11" pos:column="27"/></index></name><operator pos:line="11" pos:column="27">.<pos:position pos:line="11" pos:column="28"/></operator><name pos:line="11" pos:column="28">parsedCount<pos:position pos:line="11" pos:column="39"/></name><operator pos:line="11" pos:column="39">++<pos:position pos:line="11" pos:column="41"/></operator></expr>;<pos:position pos:line="11" pos:column="42"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="13" pos:column="5">char<pos:position pos:line="13" pos:column="9"/></name> <modifier pos:line="13" pos:column="10">*<pos:position pos:line="13" pos:column="11"/></modifier></type><name pos:line="13" pos:column="11">nulpos<pos:position pos:line="13" pos:column="17"/></name></decl>;<pos:position pos:line="13" pos:column="18"/></decl_stmt>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><operator pos:line="14" pos:column="9">(<pos:position pos:line="14" pos:column="10"/></operator><name pos:line="14" pos:column="10">nulpos<pos:position pos:line="14" pos:column="16"/></name> <operator pos:line="14" pos:column="17">=<pos:position pos:line="14" pos:column="18"/></operator> <operator pos:line="14" pos:column="19">(<pos:position pos:line="14" pos:column="20"/></operator><name pos:line="14" pos:column="20">char<pos:position pos:line="14" pos:column="24"/></name><operator pos:line="14" pos:column="24">*<pos:position pos:line="14" pos:column="25"/></operator><operator pos:line="14" pos:column="25">)<pos:position pos:line="14" pos:column="26"/></operator><call><name pos:line="14" pos:column="26">memchr<pos:position pos:line="14" pos:column="32"/></name><argument_list pos:line="14" pos:column="32">(<argument><expr><name pos:line="14" pos:column="33">header_start<pos:position pos:line="14" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="14" pos:column="47">'\0'<pos:position pos:line="14" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="53">header_end<pos:position pos:line="14" pos:column="63"/></name> <operator pos:line="14" pos:column="64">-<pos:position pos:line="14" pos:column="65"/></operator> <name pos:line="14" pos:column="66">header_start<pos:position pos:line="14" pos:column="78"/></name></expr></argument>)<pos:position pos:line="14" pos:column="79"/></argument_list></call><operator pos:line="14" pos:column="79">)<pos:position pos:line="14" pos:column="80"/></operator></expr>)<pos:position pos:line="14" pos:column="81"/></condition><then pos:line="14" pos:column="81"> <block pos:line="14" pos:column="82">{
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">debugs<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><literal type="number" pos:line="15" pos:column="16">55<pos:position pos:line="15" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="20">1<pos:position pos:line="15" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="23">"WARNING: HTTP header contains NULL characters {"<pos:position pos:line="15" pos:column="72"/></literal> <operator pos:line="15" pos:column="73">&lt;&lt;<pos:position pos:line="15" pos:column="81"/></operator>
               <call><name pos:line="16" pos:column="16">getStringPrefix<pos:position pos:line="16" pos:column="31"/></name><argument_list pos:line="16" pos:column="31">(<argument><expr><name pos:line="16" pos:column="32">header_start<pos:position pos:line="16" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="46">nulpos<pos:position pos:line="16" pos:column="52"/></name></expr></argument>)<pos:position pos:line="16" pos:column="53"/></argument_list></call> <operator pos:line="16" pos:column="54">&lt;&lt;<pos:position pos:line="16" pos:column="62"/></operator> <literal type="string" pos:line="16" pos:column="57">"}\nNULL\n{"<pos:position pos:line="16" pos:column="69"/></literal> <operator pos:line="16" pos:column="70">&lt;&lt;<pos:position pos:line="16" pos:column="78"/></operator> <call><name pos:line="16" pos:column="73">getStringPrefix<pos:position pos:line="16" pos:column="88"/></name><argument_list pos:line="16" pos:column="88">(<argument><expr><name pos:line="16" pos:column="89">nulpos<pos:position pos:line="16" pos:column="95"/></name><operator pos:line="16" pos:column="95">+<pos:position pos:line="16" pos:column="96"/></operator><literal type="number" pos:line="16" pos:column="96">1<pos:position pos:line="16" pos:column="97"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="99">header_end<pos:position pos:line="16" pos:column="109"/></name></expr></argument>)<pos:position pos:line="16" pos:column="110"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="111"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="112"/></expr_stmt>
        <goto pos:line="17" pos:column="9">goto <name pos:line="17" pos:column="14">reset<pos:position pos:line="17" pos:column="19"/></name>;<pos:position pos:line="17" pos:column="20"/></goto>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="20" pos:column="5">/* common format headers are "&lt;name&gt;:[ws]&lt;value&gt;" lines delimited by &lt;CRLF&gt;.
     * continuation lines start with a (single) space or tab */</comment>
    <while pos:line="22" pos:column="5">while <condition pos:line="22" pos:column="11">(<expr><name pos:line="22" pos:column="12">field_ptr<pos:position pos:line="22" pos:column="21"/></name> <operator pos:line="22" pos:column="22">&lt;<pos:position pos:line="22" pos:column="26"/></operator> <name pos:line="22" pos:column="24">header_end<pos:position pos:line="22" pos:column="34"/></name></expr>)<pos:position pos:line="22" pos:column="35"/></condition> <block pos:line="22" pos:column="36">{
        <decl_stmt><decl><type><specifier pos:line="23" pos:column="9">const<pos:position pos:line="23" pos:column="14"/></specifier> <name pos:line="23" pos:column="15">char<pos:position pos:line="23" pos:column="19"/></name> <modifier pos:line="23" pos:column="20">*<pos:position pos:line="23" pos:column="21"/></modifier></type><name pos:line="23" pos:column="21">field_start<pos:position pos:line="23" pos:column="32"/></name> <init pos:line="23" pos:column="33">= <expr><name pos:line="23" pos:column="35">field_ptr<pos:position pos:line="23" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="23" pos:column="45"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="24" pos:column="9">const<pos:position pos:line="24" pos:column="14"/></specifier> <name pos:line="24" pos:column="15">char<pos:position pos:line="24" pos:column="19"/></name> <modifier pos:line="24" pos:column="20">*<pos:position pos:line="24" pos:column="21"/></modifier></type><name pos:line="24" pos:column="21">field_end<pos:position pos:line="24" pos:column="30"/></name></decl>;<pos:position pos:line="24" pos:column="31"/></decl_stmt>

        <do pos:line="26" pos:column="9">do <block pos:line="26" pos:column="12">{
            <decl_stmt><decl><type><specifier pos:line="27" pos:column="13">const<pos:position pos:line="27" pos:column="18"/></specifier> <name pos:line="27" pos:column="19">char<pos:position pos:line="27" pos:column="23"/></name> <modifier pos:line="27" pos:column="24">*<pos:position pos:line="27" pos:column="25"/></modifier></type><name pos:line="27" pos:column="25">this_line<pos:position pos:line="27" pos:column="34"/></name> <init pos:line="27" pos:column="35">= <expr><name pos:line="27" pos:column="37">field_ptr<pos:position pos:line="27" pos:column="46"/></name></expr></init></decl>;<pos:position pos:line="27" pos:column="47"/></decl_stmt>
            <expr_stmt><expr><name pos:line="28" pos:column="13">field_ptr<pos:position pos:line="28" pos:column="22"/></name> <operator pos:line="28" pos:column="23">=<pos:position pos:line="28" pos:column="24"/></operator> <operator pos:line="28" pos:column="25">(<pos:position pos:line="28" pos:column="26"/></operator><specifier pos:line="28" pos:column="26">const<pos:position pos:line="28" pos:column="31"/></specifier> <name pos:line="28" pos:column="32">char<pos:position pos:line="28" pos:column="36"/></name> <operator pos:line="28" pos:column="37">*<pos:position pos:line="28" pos:column="38"/></operator><operator pos:line="28" pos:column="38">)<pos:position pos:line="28" pos:column="39"/></operator><call><name pos:line="28" pos:column="39">memchr<pos:position pos:line="28" pos:column="45"/></name><argument_list pos:line="28" pos:column="45">(<argument><expr><name pos:line="28" pos:column="46">field_ptr<pos:position pos:line="28" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="28" pos:column="57">'\n'<pos:position pos:line="28" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="63">header_end<pos:position pos:line="28" pos:column="73"/></name> <operator pos:line="28" pos:column="74">-<pos:position pos:line="28" pos:column="75"/></operator> <name pos:line="28" pos:column="76">field_ptr<pos:position pos:line="28" pos:column="85"/></name></expr></argument>)<pos:position pos:line="28" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="87"/></expr_stmt>

            <if pos:line="30" pos:column="13">if <condition pos:line="30" pos:column="16">(<expr><operator pos:line="30" pos:column="17">!<pos:position pos:line="30" pos:column="18"/></operator><name pos:line="30" pos:column="18">field_ptr<pos:position pos:line="30" pos:column="27"/></name></expr>)<pos:position pos:line="30" pos:column="28"/></condition><then pos:line="30" pos:column="28">
                <block type="pseudo"><goto pos:line="31" pos:column="17">goto <name pos:line="31" pos:column="22">reset<pos:position pos:line="31" pos:column="27"/></name>;<pos:position pos:line="31" pos:column="28"/></goto></block></then></if>	<comment type="block" pos:line="31" pos:column="33">/* missing &lt;LF&gt; */</comment>

            <expr_stmt><expr><name pos:line="33" pos:column="13">field_end<pos:position pos:line="33" pos:column="22"/></name> <operator pos:line="33" pos:column="23">=<pos:position pos:line="33" pos:column="24"/></operator> <name pos:line="33" pos:column="25">field_ptr<pos:position pos:line="33" pos:column="34"/></name></expr>;<pos:position pos:line="33" pos:column="35"/></expr_stmt>

            <expr_stmt><expr><name pos:line="35" pos:column="13">field_ptr<pos:position pos:line="35" pos:column="22"/></name><operator pos:line="35" pos:column="22">++<pos:position pos:line="35" pos:column="24"/></operator></expr>;<pos:position pos:line="35" pos:column="25"/></expr_stmt>	<comment type="block" pos:line="35" pos:column="33">/* Move to next line */</comment>

            <if pos:line="37" pos:column="13">if <condition pos:line="37" pos:column="16">(<expr><name pos:line="37" pos:column="17">field_end<pos:position pos:line="37" pos:column="26"/></name> <operator pos:line="37" pos:column="27">&gt;<pos:position pos:line="37" pos:column="31"/></operator> <name pos:line="37" pos:column="29">this_line<pos:position pos:line="37" pos:column="38"/></name> <operator pos:line="37" pos:column="39">&amp;&amp;<pos:position pos:line="37" pos:column="49"/></operator> <name><name pos:line="37" pos:column="42">field_end<pos:position pos:line="37" pos:column="51"/></name><index pos:line="37" pos:column="51">[<expr><operator pos:line="37" pos:column="52">-<pos:position pos:line="37" pos:column="53"/></operator><literal type="number" pos:line="37" pos:column="53">1<pos:position pos:line="37" pos:column="54"/></literal></expr>]<pos:position pos:line="37" pos:column="55"/></index></name> <operator pos:line="37" pos:column="56">==<pos:position pos:line="37" pos:column="58"/></operator> <literal type="char" pos:line="37" pos:column="59">'\r'<pos:position pos:line="37" pos:column="63"/></literal></expr>)<pos:position pos:line="37" pos:column="64"/></condition><then pos:line="37" pos:column="64"> <block pos:line="37" pos:column="65">{
                <expr_stmt><expr><name pos:line="38" pos:column="17">field_end<pos:position pos:line="38" pos:column="26"/></name><operator pos:line="38" pos:column="26">--<pos:position pos:line="38" pos:column="28"/></operator></expr>;<pos:position pos:line="38" pos:column="29"/></expr_stmt>	<comment type="block" pos:line="38" pos:column="33">/* Ignore CR LF */</comment>
                <comment type="block" pos:line="39" pos:column="17">/* Ignore CR CR LF in relaxed mode */</comment>

                <if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><name><name pos:line="41" pos:column="21">Config<pos:position pos:line="41" pos:column="27"/></name><operator pos:line="41" pos:column="27">.<pos:position pos:line="41" pos:column="28"/></operator><name pos:line="41" pos:column="28">onoff<pos:position pos:line="41" pos:column="33"/></name><operator pos:line="41" pos:column="33">.<pos:position pos:line="41" pos:column="34"/></operator><name pos:line="41" pos:column="34">relaxed_header_parser<pos:position pos:line="41" pos:column="55"/></name></name> <operator pos:line="41" pos:column="56">&amp;&amp;<pos:position pos:line="41" pos:column="66"/></operator> <name pos:line="41" pos:column="59">field_end<pos:position pos:line="41" pos:column="68"/></name> <operator pos:line="41" pos:column="69">&gt;<pos:position pos:line="41" pos:column="73"/></operator> <name pos:line="41" pos:column="71">this_line<pos:position pos:line="41" pos:column="80"/></name> <operator pos:line="41" pos:column="81">+<pos:position pos:line="41" pos:column="82"/></operator> <literal type="number" pos:line="41" pos:column="83">1<pos:position pos:line="41" pos:column="84"/></literal> <operator pos:line="41" pos:column="85">&amp;&amp;<pos:position pos:line="41" pos:column="95"/></operator> <name><name pos:line="41" pos:column="88">field_end<pos:position pos:line="41" pos:column="97"/></name><index pos:line="41" pos:column="97">[<expr><operator pos:line="41" pos:column="98">-<pos:position pos:line="41" pos:column="99"/></operator><literal type="number" pos:line="41" pos:column="99">1<pos:position pos:line="41" pos:column="100"/></literal></expr>]<pos:position pos:line="41" pos:column="101"/></index></name> <operator pos:line="41" pos:column="102">==<pos:position pos:line="41" pos:column="104"/></operator> <literal type="char" pos:line="41" pos:column="105">'\r'<pos:position pos:line="41" pos:column="109"/></literal></expr>)<pos:position pos:line="41" pos:column="110"/></condition><then pos:line="41" pos:column="110"> <block pos:line="41" pos:column="111">{
                    <expr_stmt><expr><call><name pos:line="42" pos:column="21">debugs<pos:position pos:line="42" pos:column="27"/></name><argument_list pos:line="42" pos:column="27">(<argument><expr><literal type="number" pos:line="42" pos:column="28">55<pos:position pos:line="42" pos:column="30"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name pos:line="42" pos:column="32">Config<pos:position pos:line="42" pos:column="38"/></name><operator pos:line="42" pos:column="38">.<pos:position pos:line="42" pos:column="39"/></operator><name pos:line="42" pos:column="39">onoff<pos:position pos:line="42" pos:column="44"/></name><operator pos:line="42" pos:column="44">.<pos:position pos:line="42" pos:column="45"/></operator><name pos:line="42" pos:column="45">relaxed_header_parser<pos:position pos:line="42" pos:column="66"/></name></name> <operator pos:line="42" pos:column="67">&lt;=<pos:position pos:line="42" pos:column="72"/></operator> <literal type="number" pos:line="42" pos:column="70">0<pos:position pos:line="42" pos:column="71"/></literal></expr> ?<pos:position pos:line="42" pos:column="73"/></condition><then pos:line="42" pos:column="73"> <expr><literal type="number" pos:line="42" pos:column="74">1<pos:position pos:line="42" pos:column="75"/></literal></expr> <pos:position pos:line="42" pos:column="76"/></then><else pos:line="42" pos:column="76">: <expr><literal type="number" pos:line="42" pos:column="78">2<pos:position pos:line="42" pos:column="79"/></literal></expr></else></ternary></expr></argument>,
                           <argument><expr><literal type="string" pos:line="43" pos:column="28">"WARNING: Double CR characters in HTTP header {"<pos:position pos:line="43" pos:column="76"/></literal> <operator pos:line="43" pos:column="77">&lt;&lt;<pos:position pos:line="43" pos:column="85"/></operator> <call><name pos:line="43" pos:column="80">getStringPrefix<pos:position pos:line="43" pos:column="95"/></name><argument_list pos:line="43" pos:column="95">(<argument><expr><name pos:line="43" pos:column="96">field_start<pos:position pos:line="43" pos:column="107"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="109">field_end<pos:position pos:line="43" pos:column="118"/></name></expr></argument>)<pos:position pos:line="43" pos:column="119"/></argument_list></call> <operator pos:line="43" pos:column="120">&lt;&lt;<pos:position pos:line="43" pos:column="128"/></operator> <literal type="string" pos:line="43" pos:column="123">"}"<pos:position pos:line="43" pos:column="126"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="127"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="128"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="44" pos:column="21">field_end<pos:position pos:line="44" pos:column="30"/></name><operator pos:line="44" pos:column="30">--<pos:position pos:line="44" pos:column="32"/></operator></expr>;<pos:position pos:line="44" pos:column="33"/></expr_stmt>
                }<pos:position pos:line="45" pos:column="18"/></block></then></if>
            }<pos:position pos:line="46" pos:column="14"/></block></then></if>

            <comment type="block" pos:line="48" pos:column="13">/* Barf on stray CR characters */</comment>
            <if pos:line="49" pos:column="13">if <condition pos:line="49" pos:column="16">(<expr><call><name pos:line="49" pos:column="17">memchr<pos:position pos:line="49" pos:column="23"/></name><argument_list pos:line="49" pos:column="23">(<argument><expr><name pos:line="49" pos:column="24">this_line<pos:position pos:line="49" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="49" pos:column="35">'\r'<pos:position pos:line="49" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="41">field_end<pos:position pos:line="49" pos:column="50"/></name> <operator pos:line="49" pos:column="51">-<pos:position pos:line="49" pos:column="52"/></operator> <name pos:line="49" pos:column="53">this_line<pos:position pos:line="49" pos:column="62"/></name></expr></argument>)<pos:position pos:line="49" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="49" pos:column="64"/></condition><then pos:line="49" pos:column="64"> <block pos:line="49" pos:column="65">{
                <expr_stmt><expr><call><name pos:line="50" pos:column="17">debugs<pos:position pos:line="50" pos:column="23"/></name><argument_list pos:line="50" pos:column="23">(<argument><expr><literal type="number" pos:line="50" pos:column="24">55<pos:position pos:line="50" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="50" pos:column="28">1<pos:position pos:line="50" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="31">"WARNING: suspicious CR characters in HTTP header {"<pos:position pos:line="50" pos:column="83"/></literal> <operator pos:line="50" pos:column="84">&lt;&lt;<pos:position pos:line="50" pos:column="92"/></operator>
                       <call><name pos:line="51" pos:column="24">getStringPrefix<pos:position pos:line="51" pos:column="39"/></name><argument_list pos:line="51" pos:column="39">(<argument><expr><name pos:line="51" pos:column="40">field_start<pos:position pos:line="51" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="53">field_end<pos:position pos:line="51" pos:column="62"/></name></expr></argument>)<pos:position pos:line="51" pos:column="63"/></argument_list></call> <operator pos:line="51" pos:column="64">&lt;&lt;<pos:position pos:line="51" pos:column="72"/></operator> <literal type="string" pos:line="51" pos:column="67">"}"<pos:position pos:line="51" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="72"/></expr_stmt>

                <if pos:line="53" pos:column="17">if <condition pos:line="53" pos:column="20">(<expr><name><name pos:line="53" pos:column="21">Config<pos:position pos:line="53" pos:column="27"/></name><operator pos:line="53" pos:column="27">.<pos:position pos:line="53" pos:column="28"/></operator><name pos:line="53" pos:column="28">onoff<pos:position pos:line="53" pos:column="33"/></name><operator pos:line="53" pos:column="33">.<pos:position pos:line="53" pos:column="34"/></operator><name pos:line="53" pos:column="34">relaxed_header_parser<pos:position pos:line="53" pos:column="55"/></name></name></expr>)<pos:position pos:line="53" pos:column="56"/></condition><then pos:line="53" pos:column="56"> <block pos:line="53" pos:column="57">{
                    <decl_stmt><decl><type><name pos:line="54" pos:column="21">char<pos:position pos:line="54" pos:column="25"/></name> <modifier pos:line="54" pos:column="26">*<pos:position pos:line="54" pos:column="27"/></modifier></type><name pos:line="54" pos:column="27">p<pos:position pos:line="54" pos:column="28"/></name> <init pos:line="54" pos:column="29">= <expr><operator pos:line="54" pos:column="31">(<pos:position pos:line="54" pos:column="32"/></operator><name pos:line="54" pos:column="32">char<pos:position pos:line="54" pos:column="36"/></name> <operator pos:line="54" pos:column="37">*<pos:position pos:line="54" pos:column="38"/></operator><operator pos:line="54" pos:column="38">)<pos:position pos:line="54" pos:column="39"/></operator> <name pos:line="54" pos:column="40">this_line<pos:position pos:line="54" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="54" pos:column="50"/></decl_stmt>	<comment type="block" pos:line="54" pos:column="57">/* XXX Warning! This destroys original header content and violates specifications somewhat */</comment>

                    <while pos:line="56" pos:column="21">while <condition pos:line="56" pos:column="27">(<expr><operator pos:line="56" pos:column="28">(<pos:position pos:line="56" pos:column="29"/></operator><name pos:line="56" pos:column="29">p<pos:position pos:line="56" pos:column="30"/></name> <operator pos:line="56" pos:column="31">=<pos:position pos:line="56" pos:column="32"/></operator> <operator pos:line="56" pos:column="33">(<pos:position pos:line="56" pos:column="34"/></operator><name pos:line="56" pos:column="34">char<pos:position pos:line="56" pos:column="38"/></name> <operator pos:line="56" pos:column="39">*<pos:position pos:line="56" pos:column="40"/></operator><operator pos:line="56" pos:column="40">)<pos:position pos:line="56" pos:column="41"/></operator><call><name pos:line="56" pos:column="41">memchr<pos:position pos:line="56" pos:column="47"/></name><argument_list pos:line="56" pos:column="47">(<argument><expr><name pos:line="56" pos:column="48">p<pos:position pos:line="56" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="56" pos:column="51">'\r'<pos:position pos:line="56" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="56" pos:column="57">field_end<pos:position pos:line="56" pos:column="66"/></name> <operator pos:line="56" pos:column="67">-<pos:position pos:line="56" pos:column="68"/></operator> <name pos:line="56" pos:column="69">p<pos:position pos:line="56" pos:column="70"/></name></expr></argument>)<pos:position pos:line="56" pos:column="71"/></argument_list></call><operator pos:line="56" pos:column="71">)<pos:position pos:line="56" pos:column="72"/></operator> <operator pos:line="56" pos:column="73">!=<pos:position pos:line="56" pos:column="75"/></operator> <name pos:line="56" pos:column="76">NULL<pos:position pos:line="56" pos:column="80"/></name></expr>)<pos:position pos:line="56" pos:column="81"/></condition>
                        <block type="pseudo"><expr_stmt><expr><operator pos:line="57" pos:column="25">*<pos:position pos:line="57" pos:column="26"/></operator><name pos:line="57" pos:column="26">p<pos:position pos:line="57" pos:column="27"/></name><operator pos:line="57" pos:column="27">++<pos:position pos:line="57" pos:column="29"/></operator> <operator pos:line="57" pos:column="30">=<pos:position pos:line="57" pos:column="31"/></operator> <literal type="char" pos:line="57" pos:column="32">' '<pos:position pos:line="57" pos:column="35"/></literal></expr>;<pos:position pos:line="57" pos:column="36"/></expr_stmt></block></while>
                }<pos:position pos:line="58" pos:column="18"/></block></then> <else pos:line="58" pos:column="19">else
                    <block type="pseudo"><goto pos:line="59" pos:column="21">goto <name pos:line="59" pos:column="26">reset<pos:position pos:line="59" pos:column="31"/></name>;<pos:position pos:line="59" pos:column="32"/></goto></block></else></if>
            }<pos:position pos:line="60" pos:column="14"/></block></then></if>

            <if pos:line="62" pos:column="13">if <condition pos:line="62" pos:column="16">(<expr><name pos:line="62" pos:column="17">this_line<pos:position pos:line="62" pos:column="26"/></name> <operator pos:line="62" pos:column="27">+<pos:position pos:line="62" pos:column="28"/></operator> <literal type="number" pos:line="62" pos:column="29">1<pos:position pos:line="62" pos:column="30"/></literal> <operator pos:line="62" pos:column="31">==<pos:position pos:line="62" pos:column="33"/></operator> <name pos:line="62" pos:column="34">field_end<pos:position pos:line="62" pos:column="43"/></name> <operator pos:line="62" pos:column="44">&amp;&amp;<pos:position pos:line="62" pos:column="54"/></operator> <name pos:line="62" pos:column="47">this_line<pos:position pos:line="62" pos:column="56"/></name> <operator pos:line="62" pos:column="57">&gt;<pos:position pos:line="62" pos:column="61"/></operator> <name pos:line="62" pos:column="59">field_start<pos:position pos:line="62" pos:column="70"/></name></expr>)<pos:position pos:line="62" pos:column="71"/></condition><then pos:line="62" pos:column="71"> <block pos:line="62" pos:column="72">{
                <expr_stmt><expr><call><name pos:line="63" pos:column="17">debugs<pos:position pos:line="63" pos:column="23"/></name><argument_list pos:line="63" pos:column="23">(<argument><expr><literal type="number" pos:line="63" pos:column="24">55<pos:position pos:line="63" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="63" pos:column="28">1<pos:position pos:line="63" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="31">"WARNING: Blank continuation line in HTTP header {"<pos:position pos:line="63" pos:column="82"/></literal> <operator pos:line="63" pos:column="83">&lt;&lt;<pos:position pos:line="63" pos:column="91"/></operator>
                       <call><name pos:line="64" pos:column="24">getStringPrefix<pos:position pos:line="64" pos:column="39"/></name><argument_list pos:line="64" pos:column="39">(<argument><expr><name pos:line="64" pos:column="40">header_start<pos:position pos:line="64" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="54">header_end<pos:position pos:line="64" pos:column="64"/></name></expr></argument>)<pos:position pos:line="64" pos:column="65"/></argument_list></call> <operator pos:line="64" pos:column="66">&lt;&lt;<pos:position pos:line="64" pos:column="74"/></operator> <literal type="string" pos:line="64" pos:column="69">"}"<pos:position pos:line="64" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="74"/></expr_stmt>
                <goto pos:line="65" pos:column="17">goto <name pos:line="65" pos:column="22">reset<pos:position pos:line="65" pos:column="27"/></name>;<pos:position pos:line="65" pos:column="28"/></goto>
            }<pos:position pos:line="66" pos:column="14"/></block></then></if>
        }<pos:position pos:line="67" pos:column="10"/></block> while <condition pos:line="67" pos:column="17">(<expr><name pos:line="67" pos:column="18">field_ptr<pos:position pos:line="67" pos:column="27"/></name> <operator pos:line="67" pos:column="28">&lt;<pos:position pos:line="67" pos:column="32"/></operator> <name pos:line="67" pos:column="30">header_end<pos:position pos:line="67" pos:column="40"/></name> <operator pos:line="67" pos:column="41">&amp;&amp;<pos:position pos:line="67" pos:column="51"/></operator> <operator pos:line="67" pos:column="44">(<pos:position pos:line="67" pos:column="45"/></operator><operator pos:line="67" pos:column="45">*<pos:position pos:line="67" pos:column="46"/></operator><name pos:line="67" pos:column="46">field_ptr<pos:position pos:line="67" pos:column="55"/></name> <operator pos:line="67" pos:column="56">==<pos:position pos:line="67" pos:column="58"/></operator> <literal type="char" pos:line="67" pos:column="59">' '<pos:position pos:line="67" pos:column="62"/></literal> <operator pos:line="67" pos:column="63">||<pos:position pos:line="67" pos:column="65"/></operator> <operator pos:line="67" pos:column="66">*<pos:position pos:line="67" pos:column="67"/></operator><name pos:line="67" pos:column="67">field_ptr<pos:position pos:line="67" pos:column="76"/></name> <operator pos:line="67" pos:column="77">==<pos:position pos:line="67" pos:column="79"/></operator> <literal type="char" pos:line="67" pos:column="80">'\t'<pos:position pos:line="67" pos:column="84"/></literal><operator pos:line="67" pos:column="84">)<pos:position pos:line="67" pos:column="85"/></operator></expr>)<pos:position pos:line="67" pos:column="86"/></condition>;<pos:position pos:line="67" pos:column="87"/></do>

        <if pos:line="69" pos:column="9">if <condition pos:line="69" pos:column="12">(<expr><name pos:line="69" pos:column="13">field_start<pos:position pos:line="69" pos:column="24"/></name> <operator pos:line="69" pos:column="25">==<pos:position pos:line="69" pos:column="27"/></operator> <name pos:line="69" pos:column="28">field_end<pos:position pos:line="69" pos:column="37"/></name></expr>)<pos:position pos:line="69" pos:column="38"/></condition><then pos:line="69" pos:column="38"> <block pos:line="69" pos:column="39">{
            <if pos:line="70" pos:column="13">if <condition pos:line="70" pos:column="16">(<expr><name pos:line="70" pos:column="17">field_ptr<pos:position pos:line="70" pos:column="26"/></name> <operator pos:line="70" pos:column="27">&lt;<pos:position pos:line="70" pos:column="31"/></operator> <name pos:line="70" pos:column="29">header_end<pos:position pos:line="70" pos:column="39"/></name></expr>)<pos:position pos:line="70" pos:column="40"/></condition><then pos:line="70" pos:column="40"> <block pos:line="70" pos:column="41">{
                <expr_stmt><expr><call><name pos:line="71" pos:column="17">debugs<pos:position pos:line="71" pos:column="23"/></name><argument_list pos:line="71" pos:column="23">(<argument><expr><literal type="number" pos:line="71" pos:column="24">55<pos:position pos:line="71" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="71" pos:column="28">1<pos:position pos:line="71" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="71" pos:column="31">"WARNING: unparseable HTTP header field near {"<pos:position pos:line="71" pos:column="78"/></literal> <operator pos:line="71" pos:column="79">&lt;&lt;<pos:position pos:line="71" pos:column="87"/></operator>
                       <call><name pos:line="72" pos:column="24">getStringPrefix<pos:position pos:line="72" pos:column="39"/></name><argument_list pos:line="72" pos:column="39">(<argument><expr><name pos:line="72" pos:column="40">field_start<pos:position pos:line="72" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="53">header_end<pos:position pos:line="72" pos:column="63"/></name></expr></argument>)<pos:position pos:line="72" pos:column="64"/></argument_list></call> <operator pos:line="72" pos:column="65">&lt;&lt;<pos:position pos:line="72" pos:column="73"/></operator> <literal type="string" pos:line="72" pos:column="68">"}"<pos:position pos:line="72" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="73"/></expr_stmt>
                <goto pos:line="73" pos:column="17">goto <name pos:line="73" pos:column="22">reset<pos:position pos:line="73" pos:column="27"/></name>;<pos:position pos:line="73" pos:column="28"/></goto>
            }<pos:position pos:line="74" pos:column="14"/></block></then></if>

            <break pos:line="76" pos:column="13">break;<pos:position pos:line="76" pos:column="19"/></break>		<comment type="block" pos:line="76" pos:column="33">/* terminating blank line */</comment>
        }<pos:position pos:line="77" pos:column="10"/></block></then></if>

        <if pos:line="79" pos:column="9">if <condition pos:line="79" pos:column="12">(<expr><operator pos:line="79" pos:column="13">(<pos:position pos:line="79" pos:column="14"/></operator><name pos:line="79" pos:column="14">e<pos:position pos:line="79" pos:column="15"/></name> <operator pos:line="79" pos:column="16">=<pos:position pos:line="79" pos:column="17"/></operator> <call><name><name pos:line="79" pos:column="18">HttpHeaderEntry<pos:position pos:line="79" pos:column="33"/></name><operator pos:line="79" pos:column="33">::<pos:position pos:line="79" pos:column="35"/></operator><name pos:line="79" pos:column="35">parse<pos:position pos:line="79" pos:column="40"/></name></name><argument_list pos:line="79" pos:column="40">(<argument><expr><name pos:line="79" pos:column="41">field_start<pos:position pos:line="79" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="54">field_end<pos:position pos:line="79" pos:column="63"/></name></expr></argument>)<pos:position pos:line="79" pos:column="64"/></argument_list></call><operator pos:line="79" pos:column="64">)<pos:position pos:line="79" pos:column="65"/></operator> <operator pos:line="79" pos:column="66">==<pos:position pos:line="79" pos:column="68"/></operator> <name pos:line="79" pos:column="69">NULL<pos:position pos:line="79" pos:column="73"/></name></expr>)<pos:position pos:line="79" pos:column="74"/></condition><then pos:line="79" pos:column="74"> <block pos:line="79" pos:column="75">{
            <expr_stmt><expr><call><name pos:line="80" pos:column="13">debugs<pos:position pos:line="80" pos:column="19"/></name><argument_list pos:line="80" pos:column="19">(<argument><expr><literal type="number" pos:line="80" pos:column="20">55<pos:position pos:line="80" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="80" pos:column="24">1<pos:position pos:line="80" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="80" pos:column="27">"WARNING: unparseable HTTP header field {"<pos:position pos:line="80" pos:column="69"/></literal> <operator pos:line="80" pos:column="70">&lt;&lt;<pos:position pos:line="80" pos:column="78"/></operator>
                   <call><name pos:line="81" pos:column="20">getStringPrefix<pos:position pos:line="81" pos:column="35"/></name><argument_list pos:line="81" pos:column="35">(<argument><expr><name pos:line="81" pos:column="36">field_start<pos:position pos:line="81" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="49">field_end<pos:position pos:line="81" pos:column="58"/></name></expr></argument>)<pos:position pos:line="81" pos:column="59"/></argument_list></call> <operator pos:line="81" pos:column="60">&lt;&lt;<pos:position pos:line="81" pos:column="68"/></operator> <literal type="string" pos:line="81" pos:column="63">"}"<pos:position pos:line="81" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="81" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="68"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="82" pos:column="13">debugs<pos:position pos:line="82" pos:column="19"/></name><argument_list pos:line="82" pos:column="19">(<argument><expr><literal type="number" pos:line="82" pos:column="20">55<pos:position pos:line="82" pos:column="22"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name pos:line="82" pos:column="24">Config<pos:position pos:line="82" pos:column="30"/></name><operator pos:line="82" pos:column="30">.<pos:position pos:line="82" pos:column="31"/></operator><name pos:line="82" pos:column="31">onoff<pos:position pos:line="82" pos:column="36"/></name><operator pos:line="82" pos:column="36">.<pos:position pos:line="82" pos:column="37"/></operator><name pos:line="82" pos:column="37">relaxed_header_parser<pos:position pos:line="82" pos:column="58"/></name></name> <operator pos:line="82" pos:column="59">&lt;=<pos:position pos:line="82" pos:column="64"/></operator> <literal type="number" pos:line="82" pos:column="62">0<pos:position pos:line="82" pos:column="63"/></literal></expr> ?<pos:position pos:line="82" pos:column="65"/></condition><then pos:line="82" pos:column="65"> <expr><literal type="number" pos:line="82" pos:column="66">1<pos:position pos:line="82" pos:column="67"/></literal></expr> <pos:position pos:line="82" pos:column="68"/></then><else pos:line="82" pos:column="68">: <expr><literal type="number" pos:line="82" pos:column="70">2<pos:position pos:line="82" pos:column="71"/></literal></expr></else></ternary></expr></argument>,
                   <argument><expr><literal type="string" pos:line="83" pos:column="20">" in {"<pos:position pos:line="83" pos:column="27"/></literal> <operator pos:line="83" pos:column="28">&lt;&lt;<pos:position pos:line="83" pos:column="36"/></operator> <call><name pos:line="83" pos:column="31">getStringPrefix<pos:position pos:line="83" pos:column="46"/></name><argument_list pos:line="83" pos:column="46">(<argument><expr><name pos:line="83" pos:column="47">header_start<pos:position pos:line="83" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="61">header_end<pos:position pos:line="83" pos:column="71"/></name></expr></argument>)<pos:position pos:line="83" pos:column="72"/></argument_list></call> <operator pos:line="83" pos:column="73">&lt;&lt;<pos:position pos:line="83" pos:column="81"/></operator> <literal type="string" pos:line="83" pos:column="76">"}"<pos:position pos:line="83" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="81"/></expr_stmt>

            <if pos:line="85" pos:column="13">if <condition pos:line="85" pos:column="16">(<expr><name><name pos:line="85" pos:column="17">Config<pos:position pos:line="85" pos:column="23"/></name><operator pos:line="85" pos:column="23">.<pos:position pos:line="85" pos:column="24"/></operator><name pos:line="85" pos:column="24">onoff<pos:position pos:line="85" pos:column="29"/></name><operator pos:line="85" pos:column="29">.<pos:position pos:line="85" pos:column="30"/></operator><name pos:line="85" pos:column="30">relaxed_header_parser<pos:position pos:line="85" pos:column="51"/></name></name></expr>)<pos:position pos:line="85" pos:column="52"/></condition><then pos:line="85" pos:column="52">
                <block type="pseudo"><continue pos:line="86" pos:column="17">continue;<pos:position pos:line="86" pos:column="26"/></continue></block></then>
            <else pos:line="87" pos:column="13">else
                <block type="pseudo"><goto pos:line="88" pos:column="17">goto <name pos:line="88" pos:column="22">reset<pos:position pos:line="88" pos:column="27"/></name>;<pos:position pos:line="88" pos:column="28"/></goto></block></else></if>
        }<pos:position pos:line="89" pos:column="10"/></block></then></if>

        <if pos:line="91" pos:column="9">if <condition pos:line="91" pos:column="12">(<expr><name><name pos:line="91" pos:column="13">e<pos:position pos:line="91" pos:column="14"/></name><operator pos:line="91" pos:column="14">-&gt;<pos:position pos:line="91" pos:column="19"/></operator><name pos:line="91" pos:column="16">id<pos:position pos:line="91" pos:column="18"/></name></name> <operator pos:line="91" pos:column="19">==<pos:position pos:line="91" pos:column="21"/></operator> <name pos:line="91" pos:column="22">HDR_CONTENT_LENGTH<pos:position pos:line="91" pos:column="40"/></name> <operator pos:line="91" pos:column="41">&amp;&amp;<pos:position pos:line="91" pos:column="51"/></operator> <operator pos:line="91" pos:column="44">(<pos:position pos:line="91" pos:column="45"/></operator><name pos:line="91" pos:column="45">e2<pos:position pos:line="91" pos:column="47"/></name> <operator pos:line="91" pos:column="48">=<pos:position pos:line="91" pos:column="49"/></operator> <call><name pos:line="91" pos:column="50">findEntry<pos:position pos:line="91" pos:column="59"/></name><argument_list pos:line="91" pos:column="59">(<argument><expr><name><name pos:line="91" pos:column="60">e<pos:position pos:line="91" pos:column="61"/></name><operator pos:line="91" pos:column="61">-&gt;<pos:position pos:line="91" pos:column="66"/></operator><name pos:line="91" pos:column="63">id<pos:position pos:line="91" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="91" pos:column="66"/></argument_list></call><operator pos:line="91" pos:column="66">)<pos:position pos:line="91" pos:column="67"/></operator> <operator pos:line="91" pos:column="68">!=<pos:position pos:line="91" pos:column="70"/></operator> <name pos:line="91" pos:column="71">NULL<pos:position pos:line="91" pos:column="75"/></name></expr>)<pos:position pos:line="91" pos:column="76"/></condition><then pos:line="91" pos:column="76"> <block pos:line="91" pos:column="77">{
<comment type="line" pos:line="92" pos:column="1">//            if (e-&gt;value.cmp(e2-&gt;value.termedBuf()) != 0) {</comment>
            <if pos:line="93" pos:column="13">if <condition pos:line="93" pos:column="16">(<expr><name><name pos:line="93" pos:column="17">e<pos:position pos:line="93" pos:column="18"/></name><operator pos:line="93" pos:column="18">-&gt;<pos:position pos:line="93" pos:column="23"/></operator><name pos:line="93" pos:column="20">value<pos:position pos:line="93" pos:column="25"/></name></name> <operator pos:line="93" pos:column="26">!=<pos:position pos:line="93" pos:column="28"/></operator> <name><name pos:line="93" pos:column="29">e2<pos:position pos:line="93" pos:column="31"/></name><operator pos:line="93" pos:column="31">-&gt;<pos:position pos:line="93" pos:column="36"/></operator><name pos:line="93" pos:column="33">value<pos:position pos:line="93" pos:column="38"/></name></name></expr>)<pos:position pos:line="93" pos:column="39"/></condition><then pos:line="93" pos:column="39"> <block pos:line="93" pos:column="40">{
                <decl_stmt><decl><type><name pos:line="94" pos:column="17">int64_t<pos:position pos:line="94" pos:column="24"/></name></type> <name pos:line="94" pos:column="25">l1<pos:position pos:line="94" pos:column="27"/></name></decl>, <decl><type ref="prev"/><name pos:line="94" pos:column="29">l2<pos:position pos:line="94" pos:column="31"/></name></decl>;<pos:position pos:line="94" pos:column="32"/></decl_stmt>
                <expr_stmt><expr><call><name pos:line="95" pos:column="17">debugs<pos:position pos:line="95" pos:column="23"/></name><argument_list pos:line="95" pos:column="23">(<argument><expr><literal type="number" pos:line="95" pos:column="24">55<pos:position pos:line="95" pos:column="26"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name pos:line="95" pos:column="28">Config<pos:position pos:line="95" pos:column="34"/></name><operator pos:line="95" pos:column="34">.<pos:position pos:line="95" pos:column="35"/></operator><name pos:line="95" pos:column="35">onoff<pos:position pos:line="95" pos:column="40"/></name><operator pos:line="95" pos:column="40">.<pos:position pos:line="95" pos:column="41"/></operator><name pos:line="95" pos:column="41">relaxed_header_parser<pos:position pos:line="95" pos:column="62"/></name></name> <operator pos:line="95" pos:column="63">&lt;=<pos:position pos:line="95" pos:column="68"/></operator> <literal type="number" pos:line="95" pos:column="66">0<pos:position pos:line="95" pos:column="67"/></literal></expr> ?<pos:position pos:line="95" pos:column="69"/></condition><then pos:line="95" pos:column="69"> <expr><literal type="number" pos:line="95" pos:column="70">1<pos:position pos:line="95" pos:column="71"/></literal></expr> <pos:position pos:line="95" pos:column="72"/></then><else pos:line="95" pos:column="72">: <expr><literal type="number" pos:line="95" pos:column="74">2<pos:position pos:line="95" pos:column="75"/></literal></expr></else></ternary></expr></argument>,
                       <argument><expr><literal type="string" pos:line="96" pos:column="24">"WARNING: found two conflicting content-length headers in {"<pos:position pos:line="96" pos:column="84"/></literal> <operator pos:line="96" pos:column="85">&lt;&lt;<pos:position pos:line="96" pos:column="93"/></operator> <call><name pos:line="96" pos:column="88">getStringPrefix<pos:position pos:line="96" pos:column="103"/></name><argument_list pos:line="96" pos:column="103">(<argument><expr><name pos:line="96" pos:column="104">header_start<pos:position pos:line="96" pos:column="116"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="118">header_end<pos:position pos:line="96" pos:column="128"/></name></expr></argument>)<pos:position pos:line="96" pos:column="129"/></argument_list></call> <operator pos:line="96" pos:column="130">&lt;&lt;<pos:position pos:line="96" pos:column="138"/></operator> <literal type="string" pos:line="96" pos:column="133">"}"<pos:position pos:line="96" pos:column="136"/></literal></expr></argument>)<pos:position pos:line="96" pos:column="137"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="138"/></expr_stmt>

                <if pos:line="98" pos:column="17">if <condition pos:line="98" pos:column="20">(<expr><operator pos:line="98" pos:column="21">!<pos:position pos:line="98" pos:column="22"/></operator><name><name pos:line="98" pos:column="22">Config<pos:position pos:line="98" pos:column="28"/></name><operator pos:line="98" pos:column="28">.<pos:position pos:line="98" pos:column="29"/></operator><name pos:line="98" pos:column="29">onoff<pos:position pos:line="98" pos:column="34"/></name><operator pos:line="98" pos:column="34">.<pos:position pos:line="98" pos:column="35"/></operator><name pos:line="98" pos:column="35">relaxed_header_parser<pos:position pos:line="98" pos:column="56"/></name></name></expr>)<pos:position pos:line="98" pos:column="57"/></condition><then pos:line="98" pos:column="57"> <block pos:line="98" pos:column="58">{
                    <expr_stmt><expr><operator pos:line="99" pos:column="21">delete<pos:position pos:line="99" pos:column="27"/></operator> <name pos:line="99" pos:column="28">e<pos:position pos:line="99" pos:column="29"/></name></expr>;<pos:position pos:line="99" pos:column="30"/></expr_stmt>
                    <goto pos:line="100" pos:column="21">goto <name pos:line="100" pos:column="26">reset<pos:position pos:line="100" pos:column="31"/></name>;<pos:position pos:line="100" pos:column="32"/></goto>
                }<pos:position pos:line="101" pos:column="18"/></block></then></if>

                <if pos:line="103" pos:column="17">if <condition pos:line="103" pos:column="20">(<expr><operator pos:line="103" pos:column="21">!<pos:position pos:line="103" pos:column="22"/></operator><call><name pos:line="103" pos:column="22">httpHeaderParseOffset<pos:position pos:line="103" pos:column="43"/></name><argument_list pos:line="103" pos:column="43">(<argument><expr><call><name><name pos:line="103" pos:column="44">e<pos:position pos:line="103" pos:column="45"/></name><operator pos:line="103" pos:column="45">-&gt;<pos:position pos:line="103" pos:column="50"/></operator><name pos:line="103" pos:column="47">value<pos:position pos:line="103" pos:column="52"/></name><operator pos:line="103" pos:column="52">.<pos:position pos:line="103" pos:column="53"/></operator><name pos:line="103" pos:column="53">termedBuf<pos:position pos:line="103" pos:column="62"/></name></name><argument_list pos:line="103" pos:column="62">()<pos:position pos:line="103" pos:column="64"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="103" pos:column="66">&amp;<pos:position pos:line="103" pos:column="71"/></operator><name pos:line="103" pos:column="67">l1<pos:position pos:line="103" pos:column="69"/></name></expr></argument>)<pos:position pos:line="103" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="103" pos:column="71"/></condition><then pos:line="103" pos:column="71"> <block pos:line="103" pos:column="72">{
                    <expr_stmt><expr><call><name pos:line="104" pos:column="21">debugs<pos:position pos:line="104" pos:column="27"/></name><argument_list pos:line="104" pos:column="27">(<argument><expr><literal type="number" pos:line="104" pos:column="28">55<pos:position pos:line="104" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="104" pos:column="32">1<pos:position pos:line="104" pos:column="33"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="104" pos:column="35">"WARNING: Unparseable content-length '"<pos:position pos:line="104" pos:column="74"/></literal> <operator pos:line="104" pos:column="75">&lt;&lt;<pos:position pos:line="104" pos:column="83"/></operator> <name><name pos:line="104" pos:column="78">e<pos:position pos:line="104" pos:column="79"/></name><operator pos:line="104" pos:column="79">-&gt;<pos:position pos:line="104" pos:column="84"/></operator><name pos:line="104" pos:column="81">value<pos:position pos:line="104" pos:column="86"/></name></name> <operator pos:line="104" pos:column="87">&lt;&lt;<pos:position pos:line="104" pos:column="95"/></operator> <literal type="string" pos:line="104" pos:column="90">"'"<pos:position pos:line="104" pos:column="93"/></literal></expr></argument>)<pos:position pos:line="104" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="95"/></expr_stmt>
                    <expr_stmt><expr><operator pos:line="105" pos:column="21">delete<pos:position pos:line="105" pos:column="27"/></operator> <name pos:line="105" pos:column="28">e<pos:position pos:line="105" pos:column="29"/></name></expr>;<pos:position pos:line="105" pos:column="30"/></expr_stmt>
                    <continue pos:line="106" pos:column="21">continue;<pos:position pos:line="106" pos:column="30"/></continue>
                }<pos:position pos:line="107" pos:column="18"/></block></then> <elseif pos:line="107" pos:column="19">else <if pos:line="107" pos:column="24">if <condition pos:line="107" pos:column="27">(<expr><operator pos:line="107" pos:column="28">!<pos:position pos:line="107" pos:column="29"/></operator><call><name pos:line="107" pos:column="29">httpHeaderParseOffset<pos:position pos:line="107" pos:column="50"/></name><argument_list pos:line="107" pos:column="50">(<argument><expr><call><name><name pos:line="107" pos:column="51">e2<pos:position pos:line="107" pos:column="53"/></name><operator pos:line="107" pos:column="53">-&gt;<pos:position pos:line="107" pos:column="58"/></operator><name pos:line="107" pos:column="55">value<pos:position pos:line="107" pos:column="60"/></name><operator pos:line="107" pos:column="60">.<pos:position pos:line="107" pos:column="61"/></operator><name pos:line="107" pos:column="61">termedBuf<pos:position pos:line="107" pos:column="70"/></name></name><argument_list pos:line="107" pos:column="70">()<pos:position pos:line="107" pos:column="72"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="107" pos:column="74">&amp;<pos:position pos:line="107" pos:column="79"/></operator><name pos:line="107" pos:column="75">l2<pos:position pos:line="107" pos:column="77"/></name></expr></argument>)<pos:position pos:line="107" pos:column="78"/></argument_list></call></expr>)<pos:position pos:line="107" pos:column="79"/></condition><then pos:line="107" pos:column="79"> <block pos:line="107" pos:column="80">{
                    <expr_stmt><expr><call><name pos:line="108" pos:column="21">debugs<pos:position pos:line="108" pos:column="27"/></name><argument_list pos:line="108" pos:column="27">(<argument><expr><literal type="number" pos:line="108" pos:column="28">55<pos:position pos:line="108" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="108" pos:column="32">1<pos:position pos:line="108" pos:column="33"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="108" pos:column="35">"WARNING: Unparseable content-length '"<pos:position pos:line="108" pos:column="74"/></literal> <operator pos:line="108" pos:column="75">&lt;&lt;<pos:position pos:line="108" pos:column="83"/></operator> <name><name pos:line="108" pos:column="78">e2<pos:position pos:line="108" pos:column="80"/></name><operator pos:line="108" pos:column="80">-&gt;<pos:position pos:line="108" pos:column="85"/></operator><name pos:line="108" pos:column="82">value<pos:position pos:line="108" pos:column="87"/></name></name> <operator pos:line="108" pos:column="88">&lt;&lt;<pos:position pos:line="108" pos:column="96"/></operator> <literal type="string" pos:line="108" pos:column="91">"'"<pos:position pos:line="108" pos:column="94"/></literal></expr></argument>)<pos:position pos:line="108" pos:column="95"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="96"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="109" pos:column="21">delById<pos:position pos:line="109" pos:column="28"/></name><argument_list pos:line="109" pos:column="28">(<argument><expr><name><name pos:line="109" pos:column="29">e2<pos:position pos:line="109" pos:column="31"/></name><operator pos:line="109" pos:column="31">-&gt;<pos:position pos:line="109" pos:column="36"/></operator><name pos:line="109" pos:column="33">id<pos:position pos:line="109" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="109" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="37"/></expr_stmt>
                }<pos:position pos:line="110" pos:column="18"/></block></then></if></elseif> <elseif pos:line="110" pos:column="19">else <if pos:line="110" pos:column="24">if <condition pos:line="110" pos:column="27">(<expr><name pos:line="110" pos:column="28">l1<pos:position pos:line="110" pos:column="30"/></name> <operator pos:line="110" pos:column="31">&gt;<pos:position pos:line="110" pos:column="35"/></operator> <name pos:line="110" pos:column="33">l2<pos:position pos:line="110" pos:column="35"/></name></expr>)<pos:position pos:line="110" pos:column="36"/></condition><then pos:line="110" pos:column="36"> <block pos:line="110" pos:column="37">{
                    <expr_stmt><expr><call><name pos:line="111" pos:column="21">delById<pos:position pos:line="111" pos:column="28"/></name><argument_list pos:line="111" pos:column="28">(<argument><expr><name><name pos:line="111" pos:column="29">e2<pos:position pos:line="111" pos:column="31"/></name><operator pos:line="111" pos:column="31">-&gt;<pos:position pos:line="111" pos:column="36"/></operator><name pos:line="111" pos:column="33">id<pos:position pos:line="111" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="111" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="37"/></expr_stmt>
                }<pos:position pos:line="112" pos:column="18"/></block></then></if></elseif> <else pos:line="112" pos:column="19">else <block pos:line="112" pos:column="24">{
                    <expr_stmt><expr><operator pos:line="113" pos:column="21">delete<pos:position pos:line="113" pos:column="27"/></operator> <name pos:line="113" pos:column="28">e<pos:position pos:line="113" pos:column="29"/></name></expr>;<pos:position pos:line="113" pos:column="30"/></expr_stmt>
                    <continue pos:line="114" pos:column="21">continue;<pos:position pos:line="114" pos:column="30"/></continue>
                }<pos:position pos:line="115" pos:column="18"/></block></else></if>
            }<pos:position pos:line="116" pos:column="14"/></block></then> <else pos:line="116" pos:column="15">else <block pos:line="116" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="117" pos:column="17">debugs<pos:position pos:line="117" pos:column="23"/></name><argument_list pos:line="117" pos:column="23">(<argument><expr><literal type="number" pos:line="117" pos:column="24">55<pos:position pos:line="117" pos:column="26"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name pos:line="117" pos:column="28">Config<pos:position pos:line="117" pos:column="34"/></name><operator pos:line="117" pos:column="34">.<pos:position pos:line="117" pos:column="35"/></operator><name pos:line="117" pos:column="35">onoff<pos:position pos:line="117" pos:column="40"/></name><operator pos:line="117" pos:column="40">.<pos:position pos:line="117" pos:column="41"/></operator><name pos:line="117" pos:column="41">relaxed_header_parser<pos:position pos:line="117" pos:column="62"/></name></name> <operator pos:line="117" pos:column="63">&lt;=<pos:position pos:line="117" pos:column="68"/></operator> <literal type="number" pos:line="117" pos:column="66">0<pos:position pos:line="117" pos:column="67"/></literal></expr> ?<pos:position pos:line="117" pos:column="69"/></condition><then pos:line="117" pos:column="69"> <expr><literal type="number" pos:line="117" pos:column="70">1<pos:position pos:line="117" pos:column="71"/></literal></expr> <pos:position pos:line="117" pos:column="72"/></then><else pos:line="117" pos:column="72">: <expr><literal type="number" pos:line="117" pos:column="74">2<pos:position pos:line="117" pos:column="75"/></literal></expr></else></ternary></expr></argument>,
                       <argument><expr><literal type="string" pos:line="118" pos:column="24">"NOTICE: found double content-length header"<pos:position pos:line="118" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="118" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="70"/></expr_stmt>

                <if pos:line="120" pos:column="17">if <condition pos:line="120" pos:column="20">(<expr><name><name pos:line="120" pos:column="21">Config<pos:position pos:line="120" pos:column="27"/></name><operator pos:line="120" pos:column="27">.<pos:position pos:line="120" pos:column="28"/></operator><name pos:line="120" pos:column="28">onoff<pos:position pos:line="120" pos:column="33"/></name><operator pos:line="120" pos:column="33">.<pos:position pos:line="120" pos:column="34"/></operator><name pos:line="120" pos:column="34">relaxed_header_parser<pos:position pos:line="120" pos:column="55"/></name></name></expr>)<pos:position pos:line="120" pos:column="56"/></condition><then pos:line="120" pos:column="56"> <block pos:line="120" pos:column="57">{
                    <expr_stmt><expr><operator pos:line="121" pos:column="21">delete<pos:position pos:line="121" pos:column="27"/></operator> <name pos:line="121" pos:column="28">e<pos:position pos:line="121" pos:column="29"/></name></expr>;<pos:position pos:line="121" pos:column="30"/></expr_stmt>
                    <continue pos:line="122" pos:column="21">continue;<pos:position pos:line="122" pos:column="30"/></continue>
                }<pos:position pos:line="123" pos:column="18"/></block></then> <else pos:line="123" pos:column="19">else <block pos:line="123" pos:column="24">{
                    <expr_stmt><expr><operator pos:line="124" pos:column="21">delete<pos:position pos:line="124" pos:column="27"/></operator> <name pos:line="124" pos:column="28">e<pos:position pos:line="124" pos:column="29"/></name></expr>;<pos:position pos:line="124" pos:column="30"/></expr_stmt>
                    <goto pos:line="125" pos:column="21">goto <name pos:line="125" pos:column="26">reset<pos:position pos:line="125" pos:column="31"/></name>;<pos:position pos:line="125" pos:column="32"/></goto>
                }<pos:position pos:line="126" pos:column="18"/></block></else></if>
            }<pos:position pos:line="127" pos:column="14"/></block></else></if>
        }<pos:position pos:line="128" pos:column="10"/></block></then></if>

        <if pos:line="130" pos:column="9">if <condition pos:line="130" pos:column="12">(<expr><name><name pos:line="130" pos:column="13">e<pos:position pos:line="130" pos:column="14"/></name><operator pos:line="130" pos:column="14">-&gt;<pos:position pos:line="130" pos:column="19"/></operator><name pos:line="130" pos:column="16">id<pos:position pos:line="130" pos:column="18"/></name></name> <operator pos:line="130" pos:column="19">==<pos:position pos:line="130" pos:column="21"/></operator> <name pos:line="130" pos:column="22">HDR_OTHER<pos:position pos:line="130" pos:column="31"/></name> <operator pos:line="130" pos:column="32">&amp;&amp;<pos:position pos:line="130" pos:column="42"/></operator> <call><name pos:line="130" pos:column="35">stringHasWhitespace<pos:position pos:line="130" pos:column="54"/></name><argument_list pos:line="130" pos:column="54">(<argument><expr><call><name><name pos:line="130" pos:column="55">e<pos:position pos:line="130" pos:column="56"/></name><operator pos:line="130" pos:column="56">-&gt;<pos:position pos:line="130" pos:column="61"/></operator><name pos:line="130" pos:column="58">name<pos:position pos:line="130" pos:column="62"/></name><operator pos:line="130" pos:column="62">.<pos:position pos:line="130" pos:column="63"/></operator><name pos:line="130" pos:column="63">termedBuf<pos:position pos:line="130" pos:column="72"/></name></name><argument_list pos:line="130" pos:column="72">()<pos:position pos:line="130" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="130" pos:column="75"/></argument_list></call></expr>)<pos:position pos:line="130" pos:column="76"/></condition><then pos:line="130" pos:column="76"> <block pos:line="130" pos:column="77">{
            <expr_stmt><expr><call><name pos:line="131" pos:column="13">debugs<pos:position pos:line="131" pos:column="19"/></name><argument_list pos:line="131" pos:column="19">(<argument><expr><literal type="number" pos:line="131" pos:column="20">55<pos:position pos:line="131" pos:column="22"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name pos:line="131" pos:column="24">Config<pos:position pos:line="131" pos:column="30"/></name><operator pos:line="131" pos:column="30">.<pos:position pos:line="131" pos:column="31"/></operator><name pos:line="131" pos:column="31">onoff<pos:position pos:line="131" pos:column="36"/></name><operator pos:line="131" pos:column="36">.<pos:position pos:line="131" pos:column="37"/></operator><name pos:line="131" pos:column="37">relaxed_header_parser<pos:position pos:line="131" pos:column="58"/></name></name> <operator pos:line="131" pos:column="59">&lt;=<pos:position pos:line="131" pos:column="64"/></operator> <literal type="number" pos:line="131" pos:column="62">0<pos:position pos:line="131" pos:column="63"/></literal></expr> ?<pos:position pos:line="131" pos:column="65"/></condition><then pos:line="131" pos:column="65"> <expr><literal type="number" pos:line="131" pos:column="66">1<pos:position pos:line="131" pos:column="67"/></literal></expr> <pos:position pos:line="131" pos:column="68"/></then><else pos:line="131" pos:column="68">: <expr><literal type="number" pos:line="131" pos:column="70">2<pos:position pos:line="131" pos:column="71"/></literal></expr></else></ternary></expr></argument>,
                   <argument><expr><literal type="string" pos:line="132" pos:column="20">"WARNING: found whitespace in HTTP header name {"<pos:position pos:line="132" pos:column="69"/></literal> <operator pos:line="132" pos:column="70">&lt;&lt;<pos:position pos:line="132" pos:column="78"/></operator>
                   <call><name pos:line="133" pos:column="20">getStringPrefix<pos:position pos:line="133" pos:column="35"/></name><argument_list pos:line="133" pos:column="35">(<argument><expr><name pos:line="133" pos:column="36">field_start<pos:position pos:line="133" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="133" pos:column="49">field_end<pos:position pos:line="133" pos:column="58"/></name></expr></argument>)<pos:position pos:line="133" pos:column="59"/></argument_list></call> <operator pos:line="133" pos:column="60">&lt;&lt;<pos:position pos:line="133" pos:column="68"/></operator> <literal type="string" pos:line="133" pos:column="63">"}"<pos:position pos:line="133" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="133" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="68"/></expr_stmt>

            <if pos:line="135" pos:column="13">if <condition pos:line="135" pos:column="16">(<expr><operator pos:line="135" pos:column="17">!<pos:position pos:line="135" pos:column="18"/></operator><name><name pos:line="135" pos:column="18">Config<pos:position pos:line="135" pos:column="24"/></name><operator pos:line="135" pos:column="24">.<pos:position pos:line="135" pos:column="25"/></operator><name pos:line="135" pos:column="25">onoff<pos:position pos:line="135" pos:column="30"/></name><operator pos:line="135" pos:column="30">.<pos:position pos:line="135" pos:column="31"/></operator><name pos:line="135" pos:column="31">relaxed_header_parser<pos:position pos:line="135" pos:column="52"/></name></name></expr>)<pos:position pos:line="135" pos:column="53"/></condition><then pos:line="135" pos:column="53"> <block pos:line="135" pos:column="54">{
                <expr_stmt><expr><operator pos:line="136" pos:column="17">delete<pos:position pos:line="136" pos:column="23"/></operator> <name pos:line="136" pos:column="24">e<pos:position pos:line="136" pos:column="25"/></name></expr>;<pos:position pos:line="136" pos:column="26"/></expr_stmt>
                <goto pos:line="137" pos:column="17">goto <name pos:line="137" pos:column="22">reset<pos:position pos:line="137" pos:column="27"/></name>;<pos:position pos:line="137" pos:column="28"/></goto>
            }<pos:position pos:line="138" pos:column="14"/></block></then></if>
        }<pos:position pos:line="139" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="141" pos:column="9">addEntry<pos:position pos:line="141" pos:column="17"/></name><argument_list pos:line="141" pos:column="17">(<argument><expr><name pos:line="141" pos:column="18">e<pos:position pos:line="141" pos:column="19"/></name></expr></argument>)<pos:position pos:line="141" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="142" pos:column="6"/></block></while>

    <if pos:line="144" pos:column="5">if <condition pos:line="144" pos:column="8">(<expr><call><name pos:line="144" pos:column="9">chunked<pos:position pos:line="144" pos:column="16"/></name><argument_list pos:line="144" pos:column="16">()<pos:position pos:line="144" pos:column="18"/></argument_list></call></expr>)<pos:position pos:line="144" pos:column="19"/></condition><then pos:line="144" pos:column="19"> <block pos:line="144" pos:column="20">{
        <comment type="line" pos:line="145" pos:column="9">// RFC 2616 section 4.4: ignore Content-Length with Transfer-Encoding</comment>
        <expr_stmt><expr><call><name pos:line="146" pos:column="9">delById<pos:position pos:line="146" pos:column="16"/></name><argument_list pos:line="146" pos:column="16">(<argument><expr><name pos:line="146" pos:column="17">HDR_CONTENT_LENGTH<pos:position pos:line="146" pos:column="35"/></name></expr></argument>)<pos:position pos:line="146" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="147" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="149" pos:column="5">PROF_stop<pos:position pos:line="149" pos:column="14"/></name><argument_list pos:line="149" pos:column="14">(<argument><expr><name pos:line="149" pos:column="15">HttpHeaderParse<pos:position pos:line="149" pos:column="30"/></name></expr></argument>)<pos:position pos:line="149" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="32"/></expr_stmt>
    <return pos:line="150" pos:column="5">return <expr><literal type="number" pos:line="150" pos:column="12">1<pos:position pos:line="150" pos:column="13"/></literal></expr>;<pos:position pos:line="150" pos:column="14"/></return>			<comment type="block" pos:line="150" pos:column="33">/* even if no fields where found, it is a valid header */</comment>
<label><name pos:line="151" pos:column="1">reset<pos:position pos:line="151" pos:column="6"/></name>:<pos:position pos:line="151" pos:column="7"/></label>
    <expr_stmt><expr><call><name pos:line="152" pos:column="5">PROF_stop<pos:position pos:line="152" pos:column="14"/></name><argument_list pos:line="152" pos:column="14">(<argument><expr><name pos:line="152" pos:column="15">HttpHeaderParse<pos:position pos:line="152" pos:column="30"/></name></expr></argument>)<pos:position pos:line="152" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="152" pos:column="32"/></expr_stmt>
    <return pos:line="153" pos:column="5">return <expr><call><name pos:line="153" pos:column="12">reset<pos:position pos:line="153" pos:column="17"/></name><argument_list pos:line="153" pos:column="17">()<pos:position pos:line="153" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="153" pos:column="20"/></return>
}<pos:position pos:line="154" pos:column="2"/></block></function></unit>
