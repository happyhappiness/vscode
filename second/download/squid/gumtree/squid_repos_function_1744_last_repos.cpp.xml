<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1744_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">ssize_t<pos:position pos:line="1" pos:column="8"/></name></type>
<name><name pos:line="2" pos:column="1">mem_hdr<pos:position pos:line="2" pos:column="8"/></name><operator pos:line="2" pos:column="8">::<pos:position pos:line="2" pos:column="10"/></operator><name pos:line="2" pos:column="10">copy<pos:position pos:line="2" pos:column="14"/></name></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><name pos:line="2" pos:column="15">StoreIOBuffer<pos:position pos:line="2" pos:column="28"/></name> <specifier pos:line="2" pos:column="29">const<pos:position pos:line="2" pos:column="34"/></specifier> <modifier pos:line="2" pos:column="35">&amp;<pos:position pos:line="2" pos:column="40"/></modifier></type><name pos:line="2" pos:column="36">target<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="43"/></parameter_list> <specifier pos:line="2" pos:column="44">const<pos:position pos:line="2" pos:column="49"/></specifier>
<block pos:line="3" pos:column="1">{

    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><call><name><name pos:line="5" pos:column="12">target<pos:position pos:line="5" pos:column="18"/></name><operator pos:line="5" pos:column="18">.<pos:position pos:line="5" pos:column="19"/></operator><name pos:line="5" pos:column="19">range<pos:position pos:line="5" pos:column="24"/></name></name><argument_list pos:line="5" pos:column="24">()<pos:position pos:line="5" pos:column="26"/></argument_list></call><operator pos:line="5" pos:column="26">.<pos:position pos:line="5" pos:column="27"/></operator><name pos:line="5" pos:column="27">end<pos:position pos:line="5" pos:column="30"/></name> <operator pos:line="5" pos:column="31">&gt;<pos:position pos:line="5" pos:column="35"/></operator> <call><name><name pos:line="5" pos:column="33">target<pos:position pos:line="5" pos:column="39"/></name><operator pos:line="5" pos:column="39">.<pos:position pos:line="5" pos:column="40"/></operator><name pos:line="5" pos:column="40">range<pos:position pos:line="5" pos:column="45"/></name></name><argument_list pos:line="5" pos:column="45">()<pos:position pos:line="5" pos:column="47"/></argument_list></call><operator pos:line="5" pos:column="47">.<pos:position pos:line="5" pos:column="48"/></operator><name pos:line="5" pos:column="48">start<pos:position pos:line="5" pos:column="53"/></name></expr></argument>)<pos:position pos:line="5" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">debugs<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><literal type="number" pos:line="6" pos:column="12">19<pos:position pos:line="6" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="16">6<pos:position pos:line="6" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="19">"memCopy: "<pos:position pos:line="6" pos:column="30"/></literal> <operator pos:line="6" pos:column="31">&lt;&lt;<pos:position pos:line="6" pos:column="39"/></operator> <name pos:line="6" pos:column="34">this<pos:position pos:line="6" pos:column="38"/></name> <operator pos:line="6" pos:column="39">&lt;&lt;<pos:position pos:line="6" pos:column="47"/></operator> <literal type="string" pos:line="6" pos:column="42">" "<pos:position pos:line="6" pos:column="45"/></literal> <operator pos:line="6" pos:column="46">&lt;&lt;<pos:position pos:line="6" pos:column="54"/></operator> <call><name><name pos:line="6" pos:column="49">target<pos:position pos:line="6" pos:column="55"/></name><operator pos:line="6" pos:column="55">.<pos:position pos:line="6" pos:column="56"/></operator><name pos:line="6" pos:column="56">range<pos:position pos:line="6" pos:column="61"/></name></name><argument_list pos:line="6" pos:column="61">()<pos:position pos:line="6" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="65"/></expr_stmt>

    <comment type="block" pos:line="8" pos:column="5">/* we shouldn't ever ask for absent offsets */</comment>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><call><name><name pos:line="10" pos:column="9">nodes<pos:position pos:line="10" pos:column="14"/></name><operator pos:line="10" pos:column="14">.<pos:position pos:line="10" pos:column="15"/></operator><name pos:line="10" pos:column="15">size<pos:position pos:line="10" pos:column="19"/></name></name><argument_list pos:line="10" pos:column="19">()<pos:position pos:line="10" pos:column="21"/></argument_list></call> <operator pos:line="10" pos:column="22">==<pos:position pos:line="10" pos:column="24"/></operator> <literal type="number" pos:line="10" pos:column="25">0<pos:position pos:line="10" pos:column="26"/></literal></expr>)<pos:position pos:line="10" pos:column="27"/></condition><then pos:line="10" pos:column="27"> <block pos:line="10" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">debugs<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><literal type="number" pos:line="11" pos:column="16">19<pos:position pos:line="11" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="20">DBG_IMPORTANT<pos:position pos:line="11" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="35">"mem_hdr::copy: No data to read"<pos:position pos:line="11" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="69"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">debugDump<pos:position pos:line="12" pos:column="18"/></name><argument_list pos:line="12" pos:column="18">()<pos:position pos:line="12" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="21"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">assert<pos:position pos:line="13" pos:column="15"/></name> <argument_list pos:line="13" pos:column="16">(<argument><expr><literal type="number" pos:line="13" pos:column="17">0<pos:position pos:line="13" pos:column="18"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="20"/></expr_stmt>
        <return pos:line="14" pos:column="9">return <expr><literal type="number" pos:line="14" pos:column="16">0<pos:position pos:line="14" pos:column="17"/></literal></expr>;<pos:position pos:line="14" pos:column="18"/></return>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="17" pos:column="5">/* RC: the next assert is nearly useless */</comment>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">assert<pos:position pos:line="18" pos:column="11"/></name><argument_list pos:line="18" pos:column="11">(<argument><expr><name><name pos:line="18" pos:column="12">target<pos:position pos:line="18" pos:column="18"/></name><operator pos:line="18" pos:column="18">.<pos:position pos:line="18" pos:column="19"/></operator><name pos:line="18" pos:column="19">length<pos:position pos:line="18" pos:column="25"/></name></name> <operator pos:line="18" pos:column="26">&gt;<pos:position pos:line="18" pos:column="30"/></operator> <literal type="number" pos:line="18" pos:column="28">0<pos:position pos:line="18" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="31"/></expr_stmt>

    <comment type="block" pos:line="20" pos:column="5">/* Seek our way into store */</comment>
    <decl_stmt><decl><type><name pos:line="21" pos:column="5">mem_node<pos:position pos:line="21" pos:column="13"/></name> <modifier pos:line="21" pos:column="14">*<pos:position pos:line="21" pos:column="15"/></modifier></type><name pos:line="21" pos:column="15">p<pos:position pos:line="21" pos:column="16"/></name> <init pos:line="21" pos:column="17">= <expr><call><name pos:line="21" pos:column="19">getBlockContainingLocation<pos:position pos:line="21" pos:column="45"/></name><argument_list pos:line="21" pos:column="45">(<argument><expr><name><name pos:line="21" pos:column="46">target<pos:position pos:line="21" pos:column="52"/></name><operator pos:line="21" pos:column="52">.<pos:position pos:line="21" pos:column="53"/></operator><name pos:line="21" pos:column="53">offset<pos:position pos:line="21" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="21" pos:column="61"/></decl_stmt>

    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><operator pos:line="23" pos:column="9">!<pos:position pos:line="23" pos:column="10"/></operator><name pos:line="23" pos:column="10">p<pos:position pos:line="23" pos:column="11"/></name></expr>)<pos:position pos:line="23" pos:column="12"/></condition><then pos:line="23" pos:column="12"> <block pos:line="23" pos:column="13">{
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">debugs<pos:position pos:line="24" pos:column="15"/></name><argument_list pos:line="24" pos:column="15">(<argument><expr><literal type="number" pos:line="24" pos:column="16">19<pos:position pos:line="24" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="20">DBG_IMPORTANT<pos:position pos:line="24" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="35">"memCopy: could not find start of "<pos:position pos:line="24" pos:column="70"/></literal> <operator pos:line="24" pos:column="71">&lt;&lt;<pos:position pos:line="24" pos:column="79"/></operator> <call><name><name pos:line="24" pos:column="74">target<pos:position pos:line="24" pos:column="80"/></name><operator pos:line="24" pos:column="80">.<pos:position pos:line="24" pos:column="81"/></operator><name pos:line="24" pos:column="81">range<pos:position pos:line="24" pos:column="86"/></name></name><argument_list pos:line="24" pos:column="86">()<pos:position pos:line="24" pos:column="88"/></argument_list></call> <operator pos:line="24" pos:column="89">&lt;&lt;<pos:position pos:line="24" pos:column="97"/></operator>
               <literal type="string" pos:line="25" pos:column="16">" in memory."<pos:position pos:line="25" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">debugDump<pos:position pos:line="26" pos:column="18"/></name><argument_list pos:line="26" pos:column="18">()<pos:position pos:line="26" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="21"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">fatal_dump<pos:position pos:line="27" pos:column="19"/></name><argument_list pos:line="27" pos:column="19">(<argument><expr><literal type="string" pos:line="27" pos:column="20">"Squid has attempted to read data from memory that is not present. This is an indication of of (pre-3.0) code that hasn't been updated to deal with sparse objects in memory. Squid should coredump.allowing to review the cause. Immediately preceding this message is a dump of the available data in the format [start,end). The [ means from the value, the ) means up to the value. I.e. [1,5) means that there are 4 bytes of data, at offsets 1,2,3,4.\n"<pos:position pos:line="27" pos:column="468"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="469"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="470"/></expr_stmt>
        <return pos:line="28" pos:column="9">return <expr><literal type="number" pos:line="28" pos:column="16">0<pos:position pos:line="28" pos:column="17"/></literal></expr>;<pos:position pos:line="28" pos:column="18"/></return>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="31" pos:column="5">size_t<pos:position pos:line="31" pos:column="11"/></name></type> <name pos:line="31" pos:column="12">bytes_to_go<pos:position pos:line="31" pos:column="23"/></name> <init pos:line="31" pos:column="24">= <expr><name><name pos:line="31" pos:column="26">target<pos:position pos:line="31" pos:column="32"/></name><operator pos:line="31" pos:column="32">.<pos:position pos:line="31" pos:column="33"/></operator><name pos:line="31" pos:column="33">length<pos:position pos:line="31" pos:column="39"/></name></name></expr></init></decl>;<pos:position pos:line="31" pos:column="40"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="32" pos:column="5">char<pos:position pos:line="32" pos:column="9"/></name> <modifier pos:line="32" pos:column="10">*<pos:position pos:line="32" pos:column="11"/></modifier></type><name pos:line="32" pos:column="11">ptr_to_buf<pos:position pos:line="32" pos:column="21"/></name> <init pos:line="32" pos:column="22">= <expr><name><name pos:line="32" pos:column="24">target<pos:position pos:line="32" pos:column="30"/></name><operator pos:line="32" pos:column="30">.<pos:position pos:line="32" pos:column="31"/></operator><name pos:line="32" pos:column="31">data<pos:position pos:line="32" pos:column="35"/></name></name></expr></init></decl>;<pos:position pos:line="32" pos:column="36"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="33" pos:column="5">int64_t<pos:position pos:line="33" pos:column="12"/></name></type> <name pos:line="33" pos:column="13">location<pos:position pos:line="33" pos:column="21"/></name> <init pos:line="33" pos:column="22">= <expr><name><name pos:line="33" pos:column="24">target<pos:position pos:line="33" pos:column="30"/></name><operator pos:line="33" pos:column="30">.<pos:position pos:line="33" pos:column="31"/></operator><name pos:line="33" pos:column="31">offset<pos:position pos:line="33" pos:column="37"/></name></name></expr></init></decl>;<pos:position pos:line="33" pos:column="38"/></decl_stmt>

    <comment type="block" pos:line="35" pos:column="5">/* Start copying begining with this block until
     * we're satiated */</comment>

    <while pos:line="38" pos:column="5">while <condition pos:line="38" pos:column="11">(<expr><name pos:line="38" pos:column="12">p<pos:position pos:line="38" pos:column="13"/></name> <operator pos:line="38" pos:column="14">&amp;&amp;<pos:position pos:line="38" pos:column="24"/></operator> <name pos:line="38" pos:column="17">bytes_to_go<pos:position pos:line="38" pos:column="28"/></name> <operator pos:line="38" pos:column="29">&gt;<pos:position pos:line="38" pos:column="33"/></operator> <literal type="number" pos:line="38" pos:column="31">0<pos:position pos:line="38" pos:column="32"/></literal></expr>)<pos:position pos:line="38" pos:column="33"/></condition> <block pos:line="38" pos:column="34">{
        <decl_stmt><decl><type><name pos:line="39" pos:column="9">size_t<pos:position pos:line="39" pos:column="15"/></name></type> <name pos:line="39" pos:column="16">bytes_to_copy<pos:position pos:line="39" pos:column="29"/></name> <init pos:line="39" pos:column="30">= <expr><call><name pos:line="39" pos:column="32">copyAvailable<pos:position pos:line="39" pos:column="45"/></name> <argument_list pos:line="39" pos:column="46">(<argument><expr><name pos:line="39" pos:column="47">p<pos:position pos:line="39" pos:column="48"/></name></expr></argument>,
                                              <argument><expr><name pos:line="40" pos:column="47">location<pos:position pos:line="40" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="57">bytes_to_go<pos:position pos:line="40" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="70">ptr_to_buf<pos:position pos:line="40" pos:column="80"/></name></expr></argument>)<pos:position pos:line="40" pos:column="81"/></argument_list></call></expr></init></decl>;<pos:position pos:line="40" pos:column="82"/></decl_stmt>

        <comment type="block" pos:line="42" pos:column="9">/* hit a sparse patch */</comment>

        <if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name pos:line="44" pos:column="13">bytes_to_copy<pos:position pos:line="44" pos:column="26"/></name> <operator pos:line="44" pos:column="27">==<pos:position pos:line="44" pos:column="29"/></operator> <literal type="number" pos:line="44" pos:column="30">0<pos:position pos:line="44" pos:column="31"/></literal></expr>)<pos:position pos:line="44" pos:column="32"/></condition><then pos:line="44" pos:column="32">
            <block type="pseudo"><return pos:line="45" pos:column="13">return <expr><name><name pos:line="45" pos:column="20">target<pos:position pos:line="45" pos:column="26"/></name><operator pos:line="45" pos:column="26">.<pos:position pos:line="45" pos:column="27"/></operator><name pos:line="45" pos:column="27">length<pos:position pos:line="45" pos:column="33"/></name></name> <operator pos:line="45" pos:column="34">-<pos:position pos:line="45" pos:column="35"/></operator> <name pos:line="45" pos:column="36">bytes_to_go<pos:position pos:line="45" pos:column="47"/></name></expr>;<pos:position pos:line="45" pos:column="48"/></return></block></then></if>

        <expr_stmt><expr><name pos:line="47" pos:column="9">location<pos:position pos:line="47" pos:column="17"/></name> <operator pos:line="47" pos:column="18">+=<pos:position pos:line="47" pos:column="20"/></operator> <name pos:line="47" pos:column="21">bytes_to_copy<pos:position pos:line="47" pos:column="34"/></name></expr>;<pos:position pos:line="47" pos:column="35"/></expr_stmt>

        <expr_stmt><expr><name pos:line="49" pos:column="9">ptr_to_buf<pos:position pos:line="49" pos:column="19"/></name> <operator pos:line="49" pos:column="20">+=<pos:position pos:line="49" pos:column="22"/></operator> <name pos:line="49" pos:column="23">bytes_to_copy<pos:position pos:line="49" pos:column="36"/></name></expr>;<pos:position pos:line="49" pos:column="37"/></expr_stmt>

        <expr_stmt><expr><name pos:line="51" pos:column="9">bytes_to_go<pos:position pos:line="51" pos:column="20"/></name> <operator pos:line="51" pos:column="21">-=<pos:position pos:line="51" pos:column="23"/></operator> <name pos:line="51" pos:column="24">bytes_to_copy<pos:position pos:line="51" pos:column="37"/></name></expr>;<pos:position pos:line="51" pos:column="38"/></expr_stmt>

        <expr_stmt><expr><name pos:line="53" pos:column="9">p<pos:position pos:line="53" pos:column="10"/></name> <operator pos:line="53" pos:column="11">=<pos:position pos:line="53" pos:column="12"/></operator> <call><name pos:line="53" pos:column="13">getBlockContainingLocation<pos:position pos:line="53" pos:column="39"/></name><argument_list pos:line="53" pos:column="39">(<argument><expr><name pos:line="53" pos:column="40">location<pos:position pos:line="53" pos:column="48"/></name></expr></argument>)<pos:position pos:line="53" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="50"/></expr_stmt>
    }<pos:position pos:line="54" pos:column="6"/></block></while>

    <return pos:line="56" pos:column="5">return <expr><name><name pos:line="56" pos:column="12">target<pos:position pos:line="56" pos:column="18"/></name><operator pos:line="56" pos:column="18">.<pos:position pos:line="56" pos:column="19"/></operator><name pos:line="56" pos:column="19">length<pos:position pos:line="56" pos:column="25"/></name></name> <operator pos:line="56" pos:column="26">-<pos:position pos:line="56" pos:column="27"/></operator> <name pos:line="56" pos:column="28">bytes_to_go<pos:position pos:line="56" pos:column="39"/></name></expr>;<pos:position pos:line="56" pos:column="40"/></return>
}<pos:position pos:line="57" pos:column="2"/></block></function></unit>
