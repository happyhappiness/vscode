<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_function_770.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">parseCommandline<pos:position pos:line="2" pos:column="17"/></name><parameter_list pos:line="2" pos:column="17">( <parameter><decl><type><name pos:line="2" pos:column="19">int<pos:position pos:line="2" pos:column="22"/></name></type> <name pos:line="2" pos:column="23">argc<pos:position pos:line="2" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="29">char<pos:position pos:line="2" pos:column="33"/></name><modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier></type> <name><name pos:line="2" pos:column="35">argv<pos:position pos:line="2" pos:column="39"/></name><index pos:line="2" pos:column="39">[]<pos:position pos:line="2" pos:column="41"/></index></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="43">REList<pos:position pos:line="2" pos:column="49"/></name><modifier pos:line="2" pos:column="49">*<pos:position pos:line="2" pos:column="50"/></modifier><modifier pos:line="2" pos:column="50">&amp;<pos:position pos:line="2" pos:column="55"/></modifier></type> <name pos:line="2" pos:column="52">head<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>,
                  <parameter><decl><type><name pos:line="3" pos:column="19">char<pos:position pos:line="3" pos:column="23"/></name><modifier pos:line="3" pos:column="23">*<pos:position pos:line="3" pos:column="24"/></modifier><modifier pos:line="3" pos:column="24">&amp;<pos:position pos:line="3" pos:column="29"/></modifier></type> <name pos:line="3" pos:column="26">conffile<pos:position pos:line="3" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="36">char<pos:position pos:line="3" pos:column="40"/></name><modifier pos:line="3" pos:column="40">*<pos:position pos:line="3" pos:column="41"/></modifier><modifier pos:line="3" pos:column="41">&amp;<pos:position pos:line="3" pos:column="46"/></modifier></type> <name pos:line="3" pos:column="43">copydir<pos:position pos:line="3" pos:column="50"/></name></decl></parameter>,
                  <parameter><decl><type><name><name pos:line="4" pos:column="19">struct<pos:position pos:line="4" pos:column="25"/></name> <name pos:line="4" pos:column="26">in_addr<pos:position pos:line="4" pos:column="33"/></name></name><modifier pos:line="4" pos:column="33">&amp;<pos:position pos:line="4" pos:column="38"/></modifier></type> <name pos:line="4" pos:column="35">serverHost<pos:position pos:line="4" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="47">unsigned<pos:position pos:line="4" pos:column="55"/></name> <name pos:line="4" pos:column="56">short<pos:position pos:line="4" pos:column="61"/></name><modifier pos:line="4" pos:column="61">&amp;<pos:position pos:line="4" pos:column="66"/></modifier></type> <name pos:line="4" pos:column="63">serverPort<pos:position pos:line="4" pos:column="73"/></name></decl></parameter> )<pos:position pos:line="4" pos:column="75"/></parameter_list>
<comment type="line" pos:line="5" pos:column="1">// paramtr: argc: see ::main().</comment>
<comment type="line" pos:line="6" pos:column="1">//          argv: see ::main().</comment>
<comment type="line" pos:line="7" pos:column="1">// returns: Does terminate the program on errors!</comment>
<comment type="line" pos:line="8" pos:column="1">// purpose: suck in any commandline options, and set the global vars.</comment>
<block pos:line="9" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">option<pos:position pos:line="10" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="10" pos:column="17">port<pos:position pos:line="10" pos:column="21"/></name></decl>, <decl><type ref="prev"/><name pos:line="10" pos:column="23">showme<pos:position pos:line="10" pos:column="29"/></name> <init pos:line="10" pos:column="30">= <expr><literal type="number" pos:line="10" pos:column="32">0<pos:position pos:line="10" pos:column="33"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">char<pos:position pos:line="11" pos:column="9"/></name><modifier pos:line="11" pos:column="9">*<pos:position pos:line="11" pos:column="10"/></modifier></type> <name pos:line="11" pos:column="11">ptr<pos:position pos:line="11" pos:column="14"/></name></decl>, <modifier pos:line="11" pos:column="16">*<pos:position pos:line="11" pos:column="17"/></modifier><decl><type ref="prev"/><name pos:line="11" pos:column="17">colon<pos:position pos:line="11" pos:column="22"/></name></decl>;<pos:position pos:line="11" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">FILE<pos:position pos:line="12" pos:column="9"/></name><modifier pos:line="12" pos:column="9">*<pos:position pos:line="12" pos:column="10"/></modifier></type> <name pos:line="12" pos:column="11">rfile<pos:position pos:line="12" pos:column="16"/></name></decl>;<pos:position pos:line="12" pos:column="17"/></decl_stmt>

    <comment type="line" pos:line="14" pos:column="5">// program basename</comment>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">( <expr><operator pos:line="15" pos:column="10">(<pos:position pos:line="15" pos:column="11"/></operator><name pos:line="15" pos:column="11">ptr<pos:position pos:line="15" pos:column="14"/></name> <operator pos:line="15" pos:column="15">=<pos:position pos:line="15" pos:column="16"/></operator> <call><name pos:line="15" pos:column="17">strrchr<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">(<argument><expr><name><name pos:line="15" pos:column="25">argv<pos:position pos:line="15" pos:column="29"/></name><index pos:line="15" pos:column="29">[<expr><literal type="number" pos:line="15" pos:column="30">0<pos:position pos:line="15" pos:column="31"/></literal></expr>]<pos:position pos:line="15" pos:column="32"/></index></name></expr></argument>,<argument><expr><literal type="char" pos:line="15" pos:column="33">'/'<pos:position pos:line="15" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="37"/></argument_list></call><operator pos:line="15" pos:column="37">)<pos:position pos:line="15" pos:column="38"/></operator> <operator pos:line="15" pos:column="39">==<pos:position pos:line="15" pos:column="41"/></operator> <name pos:line="15" pos:column="42">NULL<pos:position pos:line="15" pos:column="46"/></name></expr> )<pos:position pos:line="15" pos:column="48"/></condition><then pos:line="15" pos:column="48">
        <block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="9">ptr<pos:position pos:line="16" pos:column="12"/></name><operator pos:line="16" pos:column="12">=<pos:position pos:line="16" pos:column="13"/></operator><name><name pos:line="16" pos:column="13">argv<pos:position pos:line="16" pos:column="17"/></name><index pos:line="16" pos:column="17">[<expr><literal type="number" pos:line="16" pos:column="18">0<pos:position pos:line="16" pos:column="19"/></literal></expr>]<pos:position pos:line="16" pos:column="20"/></index></name></expr>;<pos:position pos:line="16" pos:column="21"/></expr_stmt></block></then>
    <else pos:line="17" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><operator pos:line="18" pos:column="9">++<pos:position pos:line="18" pos:column="11"/></operator><name pos:line="18" pos:column="11">ptr<pos:position pos:line="18" pos:column="14"/></name></expr>;<pos:position pos:line="18" pos:column="15"/></expr_stmt></block></else></if>
    <expr_stmt><expr><name><operator pos:line="19" pos:column="5">::<pos:position pos:line="19" pos:column="7"/></operator><name pos:line="19" pos:column="7">programname<pos:position pos:line="19" pos:column="18"/></name></name> <operator pos:line="19" pos:column="19">=<pos:position pos:line="19" pos:column="20"/></operator> <name pos:line="19" pos:column="21">ptr<pos:position pos:line="19" pos:column="24"/></name></expr>;<pos:position pos:line="19" pos:column="25"/></expr_stmt>

    <comment type="line" pos:line="21" pos:column="5">// extract commandline parameters</comment>
    <decl_stmt><decl><type><name pos:line="22" pos:column="5">REList<pos:position pos:line="22" pos:column="11"/></name><modifier pos:line="22" pos:column="11">*<pos:position pos:line="22" pos:column="12"/></modifier></type> <name pos:line="22" pos:column="13">tail<pos:position pos:line="22" pos:column="17"/></name> <init pos:line="22" pos:column="18">= <expr><name pos:line="22" pos:column="20">head<pos:position pos:line="22" pos:column="24"/></name> <operator pos:line="22" pos:column="25">=<pos:position pos:line="22" pos:column="26"/></operator> <literal type="number" pos:line="22" pos:column="27">0<pos:position pos:line="22" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="22" pos:column="29"/></decl_stmt>
    <expr_stmt><expr><name pos:line="23" pos:column="5">opterr<pos:position pos:line="23" pos:column="11"/></name> <operator pos:line="23" pos:column="12">=<pos:position pos:line="23" pos:column="13"/></operator> <literal type="number" pos:line="23" pos:column="14">0<pos:position pos:line="23" pos:column="15"/></literal></expr>;<pos:position pos:line="23" pos:column="16"/></expr_stmt>
    <while pos:line="24" pos:column="5">while <condition pos:line="24" pos:column="11">( <expr><operator pos:line="24" pos:column="13">(<pos:position pos:line="24" pos:column="14"/></operator><name pos:line="24" pos:column="14">option<pos:position pos:line="24" pos:column="20"/></name> <operator pos:line="24" pos:column="21">=<pos:position pos:line="24" pos:column="22"/></operator> <call><name pos:line="24" pos:column="23">getopt<pos:position pos:line="24" pos:column="29"/></name><argument_list pos:line="24" pos:column="29">( <argument><expr><name pos:line="24" pos:column="31">argc<pos:position pos:line="24" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="37">argv<pos:position pos:line="24" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="43">"ac:C:d:E:e:F:f:Hnp:P:sv"<pos:position pos:line="24" pos:column="68"/></literal></expr></argument> )<pos:position pos:line="24" pos:column="70"/></argument_list></call><operator pos:line="24" pos:column="70">)<pos:position pos:line="24" pos:column="71"/></operator> <operator pos:line="24" pos:column="72">!=<pos:position pos:line="24" pos:column="74"/></operator> <operator pos:line="24" pos:column="75">-<pos:position pos:line="24" pos:column="76"/></operator><literal type="number" pos:line="24" pos:column="76">1<pos:position pos:line="24" pos:column="77"/></literal></expr> )<pos:position pos:line="24" pos:column="79"/></condition> <block pos:line="24" pos:column="80">{
        <switch pos:line="25" pos:column="9">switch <condition pos:line="25" pos:column="16">( <expr><name pos:line="25" pos:column="18">option<pos:position pos:line="25" pos:column="24"/></name></expr> )<pos:position pos:line="25" pos:column="26"/></condition> <block pos:line="25" pos:column="27">{
        <case pos:line="26" pos:column="9">case <expr><literal type="char" pos:line="26" pos:column="14">'a'<pos:position pos:line="26" pos:column="17"/></literal></expr>:<pos:position pos:line="26" pos:column="18"/></case>
            <expr_stmt><expr><name><operator pos:line="27" pos:column="13">::<pos:position pos:line="27" pos:column="15"/></operator><name pos:line="27" pos:column="15">iamalive<pos:position pos:line="27" pos:column="23"/></name></name> <operator pos:line="27" pos:column="24">=<pos:position pos:line="27" pos:column="25"/></operator> <operator pos:line="27" pos:column="26">!<pos:position pos:line="27" pos:column="27"/></operator> <name><operator pos:line="27" pos:column="28">::<pos:position pos:line="27" pos:column="30"/></operator><name pos:line="27" pos:column="30">iamalive<pos:position pos:line="27" pos:column="38"/></name></name></expr>;<pos:position pos:line="27" pos:column="39"/></expr_stmt>
            <break pos:line="28" pos:column="13">break;<pos:position pos:line="28" pos:column="19"/></break>
        <case pos:line="29" pos:column="9">case <expr><literal type="char" pos:line="29" pos:column="14">'C'<pos:position pos:line="29" pos:column="17"/></literal></expr>:<pos:position pos:line="29" pos:column="18"/></case>
            <if pos:line="30" pos:column="13">if <condition pos:line="30" pos:column="16">( <expr><name pos:line="30" pos:column="18">optarg<pos:position pos:line="30" pos:column="24"/></name> <operator pos:line="30" pos:column="25">&amp;&amp;<pos:position pos:line="30" pos:column="35"/></operator> <operator pos:line="30" pos:column="28">*<pos:position pos:line="30" pos:column="29"/></operator><name pos:line="30" pos:column="29">optarg<pos:position pos:line="30" pos:column="35"/></name></expr> )<pos:position pos:line="30" pos:column="37"/></condition><then pos:line="30" pos:column="37"> <block pos:line="30" pos:column="38">{
                <if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">( <expr><name pos:line="31" pos:column="22">copydir<pos:position pos:line="31" pos:column="29"/></name></expr> )<pos:position pos:line="31" pos:column="31"/></condition><then pos:line="31" pos:column="31"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="32">xfree<pos:position pos:line="31" pos:column="37"/></name><argument_list pos:line="31" pos:column="37">( <argument><expr><operator pos:line="31" pos:column="39">(<pos:position pos:line="31" pos:column="40"/></operator><name pos:line="31" pos:column="40">void<pos:position pos:line="31" pos:column="44"/></name><operator pos:line="31" pos:column="44">*<pos:position pos:line="31" pos:column="45"/></operator><operator pos:line="31" pos:column="45">)<pos:position pos:line="31" pos:column="46"/></operator> <name pos:line="31" pos:column="47">copydir<pos:position pos:line="31" pos:column="54"/></name></expr></argument> )<pos:position pos:line="31" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="57"/></expr_stmt></block></then></if>
                <expr_stmt><expr><name pos:line="32" pos:column="17">copydir<pos:position pos:line="32" pos:column="24"/></name> <operator pos:line="32" pos:column="25">=<pos:position pos:line="32" pos:column="26"/></operator> <call><name pos:line="32" pos:column="27">xstrdup<pos:position pos:line="32" pos:column="34"/></name><argument_list pos:line="32" pos:column="34">(<argument><expr><name pos:line="32" pos:column="35">optarg<pos:position pos:line="32" pos:column="41"/></name></expr></argument>)<pos:position pos:line="32" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="43"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="33" pos:column="17">assert<pos:position pos:line="33" pos:column="23"/></name><argument_list pos:line="33" pos:column="23">(<argument><expr><name pos:line="33" pos:column="24">copydir<pos:position pos:line="33" pos:column="31"/></name></expr></argument>)<pos:position pos:line="33" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="33"/></expr_stmt>
            }<pos:position pos:line="34" pos:column="14"/></block></then></if>
            <break pos:line="35" pos:column="13">break;<pos:position pos:line="35" pos:column="19"/></break>
        <case pos:line="36" pos:column="9">case <expr><literal type="char" pos:line="36" pos:column="14">'c'<pos:position pos:line="36" pos:column="17"/></literal></expr>:<pos:position pos:line="36" pos:column="18"/></case>
            <if pos:line="37" pos:column="13">if <condition pos:line="37" pos:column="16">( <expr><operator pos:line="37" pos:column="18">!<pos:position pos:line="37" pos:column="19"/></operator><name pos:line="37" pos:column="19">optarg<pos:position pos:line="37" pos:column="25"/></name> <operator pos:line="37" pos:column="26">||<pos:position pos:line="37" pos:column="28"/></operator> <operator pos:line="37" pos:column="29">!<pos:position pos:line="37" pos:column="30"/></operator><operator pos:line="37" pos:column="30">*<pos:position pos:line="37" pos:column="31"/></operator><name pos:line="37" pos:column="31">optarg<pos:position pos:line="37" pos:column="37"/></name></expr> )<pos:position pos:line="37" pos:column="39"/></condition><then pos:line="37" pos:column="39"> <block pos:line="37" pos:column="40">{
                <expr_stmt><expr><call><name pos:line="38" pos:column="17">fprintf<pos:position pos:line="38" pos:column="24"/></name><argument_list pos:line="38" pos:column="24">( <argument><expr><name pos:line="38" pos:column="26">stderr<pos:position pos:line="38" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="34">"%c requires a regex pattern argument!\n"<pos:position pos:line="38" pos:column="75"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="77">option<pos:position pos:line="38" pos:column="83"/></name></expr></argument> )<pos:position pos:line="38" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="86"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="39" pos:column="17">exit<pos:position pos:line="39" pos:column="21"/></name><argument_list pos:line="39" pos:column="21">(<argument><expr><literal type="number" pos:line="39" pos:column="22">1<pos:position pos:line="39" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="25"/></expr_stmt>
            }<pos:position pos:line="40" pos:column="14"/></block></then></if>
            <if pos:line="41" pos:column="13">if <condition pos:line="41" pos:column="16">( <expr><operator pos:line="41" pos:column="18">*<pos:position pos:line="41" pos:column="19"/></operator><name pos:line="41" pos:column="19">conffile<pos:position pos:line="41" pos:column="27"/></name></expr> )<pos:position pos:line="41" pos:column="29"/></condition><then pos:line="41" pos:column="29"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="41" pos:column="30">xfree<pos:position pos:line="41" pos:column="35"/></name><argument_list pos:line="41" pos:column="35">(<argument><expr><operator pos:line="41" pos:column="36">(<pos:position pos:line="41" pos:column="37"/></operator><name pos:line="41" pos:column="37">void<pos:position pos:line="41" pos:column="41"/></name><operator pos:line="41" pos:column="41">*<pos:position pos:line="41" pos:column="42"/></operator><operator pos:line="41" pos:column="42">)<pos:position pos:line="41" pos:column="43"/></operator> <name pos:line="41" pos:column="44">conffile<pos:position pos:line="41" pos:column="52"/></name></expr></argument>)<pos:position pos:line="41" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="54"/></expr_stmt></block></then></if>
            <expr_stmt><expr><name pos:line="42" pos:column="13">conffile<pos:position pos:line="42" pos:column="21"/></name> <operator pos:line="42" pos:column="22">=<pos:position pos:line="42" pos:column="23"/></operator> <call><name pos:line="42" pos:column="24">xstrdup<pos:position pos:line="42" pos:column="31"/></name><argument_list pos:line="42" pos:column="31">(<argument><expr><name pos:line="42" pos:column="32">optarg<pos:position pos:line="42" pos:column="38"/></name></expr></argument>)<pos:position pos:line="42" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="40"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="43" pos:column="13">assert<pos:position pos:line="43" pos:column="19"/></name><argument_list pos:line="43" pos:column="19">(<argument><expr><name pos:line="43" pos:column="20">conffile<pos:position pos:line="43" pos:column="28"/></name></expr></argument>)<pos:position pos:line="43" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="30"/></expr_stmt>
            <break pos:line="44" pos:column="13">break;<pos:position pos:line="44" pos:column="19"/></break>

        <case pos:line="46" pos:column="9">case <expr><literal type="char" pos:line="46" pos:column="14">'d'<pos:position pos:line="46" pos:column="17"/></literal></expr>:<pos:position pos:line="46" pos:column="18"/></case>
            <if pos:line="47" pos:column="13">if <condition pos:line="47" pos:column="16">( <expr><operator pos:line="47" pos:column="18">!<pos:position pos:line="47" pos:column="19"/></operator><name pos:line="47" pos:column="19">optarg<pos:position pos:line="47" pos:column="25"/></name> <operator pos:line="47" pos:column="26">||<pos:position pos:line="47" pos:column="28"/></operator> <operator pos:line="47" pos:column="29">!<pos:position pos:line="47" pos:column="30"/></operator><operator pos:line="47" pos:column="30">*<pos:position pos:line="47" pos:column="31"/></operator><name pos:line="47" pos:column="31">optarg<pos:position pos:line="47" pos:column="37"/></name></expr> )<pos:position pos:line="47" pos:column="39"/></condition><then pos:line="47" pos:column="39"> <block pos:line="47" pos:column="40">{
                <expr_stmt><expr><call><name pos:line="48" pos:column="17">fprintf<pos:position pos:line="48" pos:column="24"/></name><argument_list pos:line="48" pos:column="24">( <argument><expr><name pos:line="48" pos:column="26">stderr<pos:position pos:line="48" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="34">"%c expects a mask parameter. Debug disabled.\n"<pos:position pos:line="48" pos:column="82"/></literal></expr></argument>, <argument><expr><name pos:line="48" pos:column="84">option<pos:position pos:line="48" pos:column="90"/></name></expr></argument> )<pos:position pos:line="48" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="93"/></expr_stmt>
                <expr_stmt><expr><name><operator pos:line="49" pos:column="17">::<pos:position pos:line="49" pos:column="19"/></operator><name pos:line="49" pos:column="19">debugFlag<pos:position pos:line="49" pos:column="28"/></name></name> <operator pos:line="49" pos:column="29">=<pos:position pos:line="49" pos:column="30"/></operator> <literal type="number" pos:line="49" pos:column="31">0<pos:position pos:line="49" pos:column="32"/></literal></expr>;<pos:position pos:line="49" pos:column="33"/></expr_stmt>
            }<pos:position pos:line="50" pos:column="14"/></block></then> <else pos:line="50" pos:column="15">else
                <block type="pseudo"><expr_stmt><expr><name><operator pos:line="51" pos:column="17">::<pos:position pos:line="51" pos:column="19"/></operator><name pos:line="51" pos:column="19">debugFlag<pos:position pos:line="51" pos:column="28"/></name></name> <operator pos:line="51" pos:column="29">=<pos:position pos:line="51" pos:column="30"/></operator> <operator pos:line="51" pos:column="31">(<pos:position pos:line="51" pos:column="32"/></operator><call><name pos:line="51" pos:column="32">strtoul<pos:position pos:line="51" pos:column="39"/></name><argument_list pos:line="51" pos:column="39">(<argument><expr><name pos:line="51" pos:column="40">optarg<pos:position pos:line="51" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="48">NULL<pos:position pos:line="51" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="51" pos:column="54">0<pos:position pos:line="51" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="56"/></argument_list></call> <operator pos:line="51" pos:column="57">&amp;<pos:position pos:line="51" pos:column="62"/></operator> <literal type="number" pos:line="51" pos:column="59">0xFFFFFFFF<pos:position pos:line="51" pos:column="69"/></literal><operator pos:line="51" pos:column="69">)<pos:position pos:line="51" pos:column="70"/></operator></expr>;<pos:position pos:line="51" pos:column="71"/></expr_stmt></block></else></if>
            <break pos:line="52" pos:column="13">break;<pos:position pos:line="52" pos:column="19"/></break>

        <case pos:line="54" pos:column="9">case <expr><literal type="char" pos:line="54" pos:column="14">'E'<pos:position pos:line="54" pos:column="17"/></literal></expr>:<pos:position pos:line="54" pos:column="18"/></case>
        <case pos:line="55" pos:column="9">case <expr><literal type="char" pos:line="55" pos:column="14">'e'<pos:position pos:line="55" pos:column="17"/></literal></expr>:<pos:position pos:line="55" pos:column="18"/></case>
            <if pos:line="56" pos:column="13">if <condition pos:line="56" pos:column="16">( <expr><operator pos:line="56" pos:column="18">!<pos:position pos:line="56" pos:column="19"/></operator><name pos:line="56" pos:column="19">optarg<pos:position pos:line="56" pos:column="25"/></name> <operator pos:line="56" pos:column="26">||<pos:position pos:line="56" pos:column="28"/></operator> <operator pos:line="56" pos:column="29">!<pos:position pos:line="56" pos:column="30"/></operator><operator pos:line="56" pos:column="30">*<pos:position pos:line="56" pos:column="31"/></operator><name pos:line="56" pos:column="31">optarg<pos:position pos:line="56" pos:column="37"/></name></expr> )<pos:position pos:line="56" pos:column="39"/></condition><then pos:line="56" pos:column="39"> <block pos:line="56" pos:column="40">{
                <expr_stmt><expr><call><name pos:line="57" pos:column="17">fprintf<pos:position pos:line="57" pos:column="24"/></name><argument_list pos:line="57" pos:column="24">( <argument><expr><name pos:line="57" pos:column="26">stderr<pos:position pos:line="57" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="34">"%c requires a regex pattern argument!\n"<pos:position pos:line="57" pos:column="75"/></literal></expr></argument>, <argument><expr><name pos:line="57" pos:column="77">option<pos:position pos:line="57" pos:column="83"/></name></expr></argument> )<pos:position pos:line="57" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="86"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="58" pos:column="17">exit<pos:position pos:line="58" pos:column="21"/></name><argument_list pos:line="58" pos:column="21">(<argument><expr><literal type="number" pos:line="58" pos:column="22">1<pos:position pos:line="58" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="25"/></expr_stmt>
            }<pos:position pos:line="59" pos:column="14"/></block></then></if>
            <if pos:line="60" pos:column="13">if <condition pos:line="60" pos:column="16">( <expr><name pos:line="60" pos:column="18">head<pos:position pos:line="60" pos:column="22"/></name> <operator pos:line="60" pos:column="23">==<pos:position pos:line="60" pos:column="25"/></operator> <literal type="number" pos:line="60" pos:column="26">0<pos:position pos:line="60" pos:column="27"/></literal></expr> )<pos:position pos:line="60" pos:column="29"/></condition><then pos:line="60" pos:column="29">
                <block type="pseudo"><expr_stmt><expr><name pos:line="61" pos:column="17">tail<pos:position pos:line="61" pos:column="21"/></name> <operator pos:line="61" pos:column="22">=<pos:position pos:line="61" pos:column="23"/></operator> <name pos:line="61" pos:column="24">head<pos:position pos:line="61" pos:column="28"/></name> <operator pos:line="61" pos:column="29">=<pos:position pos:line="61" pos:column="30"/></operator> <operator pos:line="61" pos:column="31">new<pos:position pos:line="61" pos:column="34"/></operator> <call><name pos:line="61" pos:column="35">REList<pos:position pos:line="61" pos:column="41"/></name><argument_list pos:line="61" pos:column="41">( <argument><expr><name pos:line="61" pos:column="43">optarg<pos:position pos:line="61" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="51">option<pos:position pos:line="61" pos:column="57"/></name><operator pos:line="61" pos:column="57">==<pos:position pos:line="61" pos:column="59"/></operator><literal type="char" pos:line="61" pos:column="59">'E'<pos:position pos:line="61" pos:column="62"/></literal></expr></argument> )<pos:position pos:line="61" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="65"/></expr_stmt></block></then>
            <else pos:line="62" pos:column="13">else <block pos:line="62" pos:column="18">{
                <expr_stmt><expr><name><name pos:line="63" pos:column="17">tail<pos:position pos:line="63" pos:column="21"/></name><operator pos:line="63" pos:column="21">-&gt;<pos:position pos:line="63" pos:column="26"/></operator><name pos:line="63" pos:column="23">next<pos:position pos:line="63" pos:column="27"/></name></name> <operator pos:line="63" pos:column="28">=<pos:position pos:line="63" pos:column="29"/></operator> <operator pos:line="63" pos:column="30">new<pos:position pos:line="63" pos:column="33"/></operator> <call><name pos:line="63" pos:column="34">REList<pos:position pos:line="63" pos:column="40"/></name><argument_list pos:line="63" pos:column="40">( <argument><expr><name pos:line="63" pos:column="42">optarg<pos:position pos:line="63" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="50">option<pos:position pos:line="63" pos:column="56"/></name><operator pos:line="63" pos:column="56">==<pos:position pos:line="63" pos:column="58"/></operator><literal type="char" pos:line="63" pos:column="58">'E'<pos:position pos:line="63" pos:column="61"/></literal></expr></argument> )<pos:position pos:line="63" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="64"/></expr_stmt>
                <expr_stmt><expr><name pos:line="64" pos:column="17">tail<pos:position pos:line="64" pos:column="21"/></name> <operator pos:line="64" pos:column="22">=<pos:position pos:line="64" pos:column="23"/></operator> <name><name pos:line="64" pos:column="24">tail<pos:position pos:line="64" pos:column="28"/></name><operator pos:line="64" pos:column="28">-&gt;<pos:position pos:line="64" pos:column="33"/></operator><name pos:line="64" pos:column="30">next<pos:position pos:line="64" pos:column="34"/></name></name></expr>;<pos:position pos:line="64" pos:column="35"/></expr_stmt>
            }<pos:position pos:line="65" pos:column="14"/></block></else></if>
            <break pos:line="66" pos:column="13">break;<pos:position pos:line="66" pos:column="19"/></break>

        <case pos:line="68" pos:column="9">case <expr><literal type="char" pos:line="68" pos:column="14">'f'<pos:position pos:line="68" pos:column="17"/></literal></expr>:<pos:position pos:line="68" pos:column="18"/></case>
            <if pos:line="69" pos:column="13">if <condition pos:line="69" pos:column="16">( <expr><operator pos:line="69" pos:column="18">!<pos:position pos:line="69" pos:column="19"/></operator><name pos:line="69" pos:column="19">optarg<pos:position pos:line="69" pos:column="25"/></name> <operator pos:line="69" pos:column="26">||<pos:position pos:line="69" pos:column="28"/></operator> <operator pos:line="69" pos:column="29">!<pos:position pos:line="69" pos:column="30"/></operator><operator pos:line="69" pos:column="30">*<pos:position pos:line="69" pos:column="31"/></operator><name pos:line="69" pos:column="31">optarg<pos:position pos:line="69" pos:column="37"/></name></expr> )<pos:position pos:line="69" pos:column="39"/></condition><then pos:line="69" pos:column="39"> <block pos:line="69" pos:column="40">{
                <expr_stmt><expr><call><name pos:line="70" pos:column="17">fprintf<pos:position pos:line="70" pos:column="24"/></name><argument_list pos:line="70" pos:column="24">( <argument><expr><name pos:line="70" pos:column="26">stderr<pos:position pos:line="70" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="70" pos:column="34">"%c requires a filename argument!\n"<pos:position pos:line="70" pos:column="70"/></literal></expr></argument>, <argument><expr><name pos:line="70" pos:column="72">option<pos:position pos:line="70" pos:column="78"/></name></expr></argument> )<pos:position pos:line="70" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="81"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="71" pos:column="17">exit<pos:position pos:line="71" pos:column="21"/></name><argument_list pos:line="71" pos:column="21">(<argument><expr><literal type="number" pos:line="71" pos:column="22">1<pos:position pos:line="71" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="25"/></expr_stmt>
            }<pos:position pos:line="72" pos:column="14"/></block></then></if>
            <if pos:line="73" pos:column="13">if <condition pos:line="73" pos:column="16">( <expr><operator pos:line="73" pos:column="18">(<pos:position pos:line="73" pos:column="19"/></operator><name pos:line="73" pos:column="19">rfile<pos:position pos:line="73" pos:column="24"/></name> <operator pos:line="73" pos:column="25">=<pos:position pos:line="73" pos:column="26"/></operator> <call><name pos:line="73" pos:column="27">fopen<pos:position pos:line="73" pos:column="32"/></name><argument_list pos:line="73" pos:column="32">( <argument><expr><name pos:line="73" pos:column="34">optarg<pos:position pos:line="73" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="42">"r"<pos:position pos:line="73" pos:column="45"/></literal></expr></argument> )<pos:position pos:line="73" pos:column="47"/></argument_list></call><operator pos:line="73" pos:column="47">)<pos:position pos:line="73" pos:column="48"/></operator> <operator pos:line="73" pos:column="49">!=<pos:position pos:line="73" pos:column="51"/></operator> <name pos:line="73" pos:column="52">NULL<pos:position pos:line="73" pos:column="56"/></name></expr> )<pos:position pos:line="73" pos:column="58"/></condition><then pos:line="73" pos:column="58"> <block pos:line="73" pos:column="59">{
                <decl_stmt><decl><type><name pos:line="74" pos:column="17">unsigned<pos:position pos:line="74" pos:column="25"/></name> <name pos:line="74" pos:column="26">long<pos:position pos:line="74" pos:column="30"/></name></type> <name pos:line="74" pos:column="31">lineno<pos:position pos:line="74" pos:column="37"/></name> <init pos:line="74" pos:column="38">= <expr><literal type="number" pos:line="74" pos:column="40">0<pos:position pos:line="74" pos:column="41"/></literal></expr></init></decl>;<pos:position pos:line="74" pos:column="42"/></decl_stmt>
<cpp:define pos:line="75" pos:column="1">#<cpp:directive pos:line="75" pos:column="2">define<pos:position pos:line="75" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="75" pos:column="9">LINESIZE<pos:position pos:line="75" pos:column="17"/></name></cpp:macro> <cpp:value pos:line="75" pos:column="18">512<pos:position pos:line="75" pos:column="21"/></cpp:value></cpp:define>
                <decl_stmt><decl><type><name pos:line="76" pos:column="17">char<pos:position pos:line="76" pos:column="21"/></name></type> <name><name pos:line="76" pos:column="22">line<pos:position pos:line="76" pos:column="26"/></name><index pos:line="76" pos:column="26">[<expr><name pos:line="76" pos:column="27">LINESIZE<pos:position pos:line="76" pos:column="35"/></name></expr>]<pos:position pos:line="76" pos:column="36"/></index></name></decl>;<pos:position pos:line="76" pos:column="37"/></decl_stmt>
                <while pos:line="77" pos:column="17">while <condition pos:line="77" pos:column="23">( <expr><call><name pos:line="77" pos:column="25">fgets<pos:position pos:line="77" pos:column="30"/></name><argument_list pos:line="77" pos:column="30">( <argument><expr><name pos:line="77" pos:column="32">line<pos:position pos:line="77" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="38">LINESIZE<pos:position pos:line="77" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="48">rfile<pos:position pos:line="77" pos:column="53"/></name></expr></argument> )<pos:position pos:line="77" pos:column="55"/></argument_list></call> <operator pos:line="77" pos:column="56">!=<pos:position pos:line="77" pos:column="58"/></operator> <name pos:line="77" pos:column="59">NULL<pos:position pos:line="77" pos:column="63"/></name></expr> )<pos:position pos:line="77" pos:column="65"/></condition> <block pos:line="77" pos:column="66">{
                    <expr_stmt><expr><operator pos:line="78" pos:column="21">++<pos:position pos:line="78" pos:column="23"/></operator><name pos:line="78" pos:column="23">lineno<pos:position pos:line="78" pos:column="29"/></name></expr>;<pos:position pos:line="78" pos:column="30"/></expr_stmt>
                    <decl_stmt><decl><type><name pos:line="79" pos:column="21">int<pos:position pos:line="79" pos:column="24"/></name></type> <name pos:line="79" pos:column="25">len<pos:position pos:line="79" pos:column="28"/></name> <init pos:line="79" pos:column="29">= <expr><call><name pos:line="79" pos:column="31">strlen<pos:position pos:line="79" pos:column="37"/></name><argument_list pos:line="79" pos:column="37">(<argument><expr><name pos:line="79" pos:column="38">line<pos:position pos:line="79" pos:column="42"/></name></expr></argument>)<pos:position pos:line="79" pos:column="43"/></argument_list></call><operator pos:line="79" pos:column="43">-<pos:position pos:line="79" pos:column="44"/></operator><literal type="number" pos:line="79" pos:column="44">1<pos:position pos:line="79" pos:column="45"/></literal></expr></init></decl>;<pos:position pos:line="79" pos:column="46"/></decl_stmt>
                    <if pos:line="80" pos:column="21">if <condition pos:line="80" pos:column="24">( <expr><name pos:line="80" pos:column="26">len<pos:position pos:line="80" pos:column="29"/></name><operator pos:line="80" pos:column="29">+<pos:position pos:line="80" pos:column="30"/></operator><literal type="number" pos:line="80" pos:column="30">2<pos:position pos:line="80" pos:column="31"/></literal> <operator pos:line="80" pos:column="32">&gt;=<pos:position pos:line="80" pos:column="37"/></operator> <name pos:line="80" pos:column="35">LINESIZE<pos:position pos:line="80" pos:column="43"/></name></expr> )<pos:position pos:line="80" pos:column="45"/></condition><then pos:line="80" pos:column="45"> <block pos:line="80" pos:column="46">{
                        <expr_stmt><expr><call><name pos:line="81" pos:column="25">fprintf<pos:position pos:line="81" pos:column="32"/></name><argument_list pos:line="81" pos:column="32">( <argument><expr><name pos:line="81" pos:column="34">stderr<pos:position pos:line="81" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="81" pos:column="42">"%s:%lu: line too long, sorry.\n"<pos:position pos:line="81" pos:column="75"/></literal></expr></argument>,
                                 <argument><expr><name pos:line="82" pos:column="34">optarg<pos:position pos:line="82" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="42">lineno<pos:position pos:line="82" pos:column="48"/></name></expr></argument> )<pos:position pos:line="82" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="51"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="83" pos:column="25">exit<pos:position pos:line="83" pos:column="29"/></name><argument_list pos:line="83" pos:column="29">(<argument><expr><literal type="number" pos:line="83" pos:column="30">1<pos:position pos:line="83" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="33"/></expr_stmt>
                    }<pos:position pos:line="84" pos:column="22"/></block></then></if>

                    <comment type="line" pos:line="86" pos:column="21">// remove trailing line breaks</comment>
                    <while pos:line="87" pos:column="21">while <condition pos:line="87" pos:column="27">( <expr><name pos:line="87" pos:column="29">len<pos:position pos:line="87" pos:column="32"/></name> <operator pos:line="87" pos:column="33">&gt;<pos:position pos:line="87" pos:column="37"/></operator> <literal type="number" pos:line="87" pos:column="35">0<pos:position pos:line="87" pos:column="36"/></literal> <operator pos:line="87" pos:column="37">&amp;&amp;<pos:position pos:line="87" pos:column="47"/></operator> <operator pos:line="87" pos:column="40">(<pos:position pos:line="87" pos:column="41"/></operator> <name><name pos:line="87" pos:column="42">line<pos:position pos:line="87" pos:column="46"/></name><index pos:line="87" pos:column="46">[<expr><name pos:line="87" pos:column="47">len<pos:position pos:line="87" pos:column="50"/></name></expr>]<pos:position pos:line="87" pos:column="51"/></index></name> <operator pos:line="87" pos:column="52">==<pos:position pos:line="87" pos:column="54"/></operator> <literal type="char" pos:line="87" pos:column="55">'\n'<pos:position pos:line="87" pos:column="59"/></literal> <operator pos:line="87" pos:column="60">||<pos:position pos:line="87" pos:column="62"/></operator> <name><name pos:line="87" pos:column="63">line<pos:position pos:line="87" pos:column="67"/></name><index pos:line="87" pos:column="67">[<expr><name pos:line="87" pos:column="68">len<pos:position pos:line="87" pos:column="71"/></name></expr>]<pos:position pos:line="87" pos:column="72"/></index></name> <operator pos:line="87" pos:column="73">==<pos:position pos:line="87" pos:column="75"/></operator> <literal type="char" pos:line="87" pos:column="76">'\r'<pos:position pos:line="87" pos:column="80"/></literal> <operator pos:line="87" pos:column="81">)<pos:position pos:line="87" pos:column="82"/></operator></expr> )<pos:position pos:line="87" pos:column="84"/></condition> <block pos:line="87" pos:column="85">{
                        <expr_stmt><expr><name><name pos:line="88" pos:column="25">line<pos:position pos:line="88" pos:column="29"/></name><index pos:line="88" pos:column="29">[<expr><name pos:line="88" pos:column="30">len<pos:position pos:line="88" pos:column="33"/></name></expr>]<pos:position pos:line="88" pos:column="34"/></index></name> <operator pos:line="88" pos:column="35">=<pos:position pos:line="88" pos:column="36"/></operator> <literal type="char" pos:line="88" pos:column="37">'\0'<pos:position pos:line="88" pos:column="41"/></literal></expr>;<pos:position pos:line="88" pos:column="42"/></expr_stmt>
                        <expr_stmt><expr><operator pos:line="89" pos:column="25">--<pos:position pos:line="89" pos:column="27"/></operator><name pos:line="89" pos:column="27">len<pos:position pos:line="89" pos:column="30"/></name></expr>;<pos:position pos:line="89" pos:column="31"/></expr_stmt>
                    }<pos:position pos:line="90" pos:column="22"/></block></while>

                    <comment type="line" pos:line="92" pos:column="21">// insert into list of expressions</comment>
                    <if pos:line="93" pos:column="21">if <condition pos:line="93" pos:column="24">( <expr><name pos:line="93" pos:column="26">head<pos:position pos:line="93" pos:column="30"/></name> <operator pos:line="93" pos:column="31">==<pos:position pos:line="93" pos:column="33"/></operator> <literal type="number" pos:line="93" pos:column="34">0<pos:position pos:line="93" pos:column="35"/></literal></expr> )<pos:position pos:line="93" pos:column="37"/></condition><then pos:line="93" pos:column="37"> <block type="pseudo"><expr_stmt><expr><name pos:line="93" pos:column="38">tail<pos:position pos:line="93" pos:column="42"/></name> <operator pos:line="93" pos:column="43">=<pos:position pos:line="93" pos:column="44"/></operator> <name pos:line="93" pos:column="45">head<pos:position pos:line="93" pos:column="49"/></name> <operator pos:line="93" pos:column="50">=<pos:position pos:line="93" pos:column="51"/></operator> <operator pos:line="93" pos:column="52">new<pos:position pos:line="93" pos:column="55"/></operator> <call><name pos:line="93" pos:column="56">REList<pos:position pos:line="93" pos:column="62"/></name><argument_list pos:line="93" pos:column="62">(<argument><expr><name pos:line="93" pos:column="63">line<pos:position pos:line="93" pos:column="67"/></name></expr></argument>,<argument><expr><name pos:line="93" pos:column="68">option<pos:position pos:line="93" pos:column="74"/></name><operator pos:line="93" pos:column="74">==<pos:position pos:line="93" pos:column="76"/></operator><literal type="char" pos:line="93" pos:column="76">'F'<pos:position pos:line="93" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="81"/></expr_stmt></block></then>
                    <else pos:line="94" pos:column="21">else <block pos:line="94" pos:column="26">{
                        <expr_stmt><expr><name><name pos:line="95" pos:column="25">tail<pos:position pos:line="95" pos:column="29"/></name><operator pos:line="95" pos:column="29">-&gt;<pos:position pos:line="95" pos:column="34"/></operator><name pos:line="95" pos:column="31">next<pos:position pos:line="95" pos:column="35"/></name></name> <operator pos:line="95" pos:column="36">=<pos:position pos:line="95" pos:column="37"/></operator> <operator pos:line="95" pos:column="38">new<pos:position pos:line="95" pos:column="41"/></operator> <call><name pos:line="95" pos:column="42">REList<pos:position pos:line="95" pos:column="48"/></name><argument_list pos:line="95" pos:column="48">(<argument><expr><name pos:line="95" pos:column="49">line<pos:position pos:line="95" pos:column="53"/></name></expr></argument>,<argument><expr><name pos:line="95" pos:column="54">option<pos:position pos:line="95" pos:column="60"/></name><operator pos:line="95" pos:column="60">==<pos:position pos:line="95" pos:column="62"/></operator><literal type="char" pos:line="95" pos:column="62">'F'<pos:position pos:line="95" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="95" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="67"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="96" pos:column="25">tail<pos:position pos:line="96" pos:column="29"/></name> <operator pos:line="96" pos:column="30">=<pos:position pos:line="96" pos:column="31"/></operator> <name><name pos:line="96" pos:column="32">tail<pos:position pos:line="96" pos:column="36"/></name><operator pos:line="96" pos:column="36">-&gt;<pos:position pos:line="96" pos:column="41"/></operator><name pos:line="96" pos:column="38">next<pos:position pos:line="96" pos:column="42"/></name></name></expr>;<pos:position pos:line="96" pos:column="43"/></expr_stmt>
                    }<pos:position pos:line="97" pos:column="22"/></block></else></if>
                }<pos:position pos:line="98" pos:column="18"/></block></while>
                <expr_stmt><expr><call><name pos:line="99" pos:column="17">fclose<pos:position pos:line="99" pos:column="23"/></name><argument_list pos:line="99" pos:column="23">(<argument><expr><name pos:line="99" pos:column="24">rfile<pos:position pos:line="99" pos:column="29"/></name></expr></argument>)<pos:position pos:line="99" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="31"/></expr_stmt>
            }<pos:position pos:line="100" pos:column="14"/></block></then> <else pos:line="100" pos:column="15">else
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="101" pos:column="17">fprintf<pos:position pos:line="101" pos:column="24"/></name><argument_list pos:line="101" pos:column="24">( <argument><expr><name pos:line="101" pos:column="26">stderr<pos:position pos:line="101" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="101" pos:column="34">"unable to open %s: %s\n"<pos:position pos:line="101" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="101" pos:column="61">optarg<pos:position pos:line="101" pos:column="67"/></name></expr></argument>, <argument><expr><call><name pos:line="101" pos:column="69">strerror<pos:position pos:line="101" pos:column="77"/></name><argument_list pos:line="101" pos:column="77">(<argument><expr><name pos:line="101" pos:column="78">errno<pos:position pos:line="101" pos:column="83"/></name></expr></argument>)<pos:position pos:line="101" pos:column="84"/></argument_list></call></expr></argument>)<pos:position pos:line="101" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="86"/></expr_stmt></block></else></if>
            <break pos:line="102" pos:column="13">break;<pos:position pos:line="102" pos:column="19"/></break>

        <case pos:line="104" pos:column="9">case <expr><literal type="char" pos:line="104" pos:column="14">'H'<pos:position pos:line="104" pos:column="17"/></literal></expr>:<pos:position pos:line="104" pos:column="18"/></case>
            <expr_stmt><expr><name><operator pos:line="105" pos:column="13">::<pos:position pos:line="105" pos:column="15"/></operator><name pos:line="105" pos:column="15">envelope<pos:position pos:line="105" pos:column="23"/></name></name> <operator pos:line="105" pos:column="24">=<pos:position pos:line="105" pos:column="25"/></operator> <operator pos:line="105" pos:column="26">!<pos:position pos:line="105" pos:column="27"/></operator> <name><operator pos:line="105" pos:column="28">::<pos:position pos:line="105" pos:column="30"/></operator><name pos:line="105" pos:column="30">envelope<pos:position pos:line="105" pos:column="38"/></name></name></expr>;<pos:position pos:line="105" pos:column="39"/></expr_stmt>
            <break pos:line="106" pos:column="13">break;<pos:position pos:line="106" pos:column="19"/></break>
        <case pos:line="107" pos:column="9">case <expr><literal type="char" pos:line="107" pos:column="14">'n'<pos:position pos:line="107" pos:column="17"/></literal></expr>:<pos:position pos:line="107" pos:column="18"/></case>
            <expr_stmt><expr><name><operator pos:line="108" pos:column="13">::<pos:position pos:line="108" pos:column="15"/></operator><name pos:line="108" pos:column="15">no_fork<pos:position pos:line="108" pos:column="22"/></name></name> <operator pos:line="108" pos:column="23">=<pos:position pos:line="108" pos:column="24"/></operator> <operator pos:line="108" pos:column="25">!<pos:position pos:line="108" pos:column="26"/></operator> <name><operator pos:line="108" pos:column="27">::<pos:position pos:line="108" pos:column="29"/></operator><name pos:line="108" pos:column="29">no_fork<pos:position pos:line="108" pos:column="36"/></name></name></expr>;<pos:position pos:line="108" pos:column="37"/></expr_stmt>
            <break pos:line="109" pos:column="13">break;<pos:position pos:line="109" pos:column="19"/></break>
        <case pos:line="110" pos:column="9">case <expr><literal type="char" pos:line="110" pos:column="14">'p'<pos:position pos:line="110" pos:column="17"/></literal></expr>:<pos:position pos:line="110" pos:column="18"/></case>
            <if pos:line="111" pos:column="13">if <condition pos:line="111" pos:column="16">( <expr><operator pos:line="111" pos:column="18">!<pos:position pos:line="111" pos:column="19"/></operator><name pos:line="111" pos:column="19">optarg<pos:position pos:line="111" pos:column="25"/></name> <operator pos:line="111" pos:column="26">||<pos:position pos:line="111" pos:column="28"/></operator> <operator pos:line="111" pos:column="29">!<pos:position pos:line="111" pos:column="30"/></operator><operator pos:line="111" pos:column="30">*<pos:position pos:line="111" pos:column="31"/></operator><name pos:line="111" pos:column="31">optarg<pos:position pos:line="111" pos:column="37"/></name></expr> )<pos:position pos:line="111" pos:column="39"/></condition><then pos:line="111" pos:column="39"> <block pos:line="111" pos:column="40">{
                <expr_stmt><expr><call><name pos:line="112" pos:column="17">fprintf<pos:position pos:line="112" pos:column="24"/></name><argument_list pos:line="112" pos:column="24">( <argument><expr><name pos:line="112" pos:column="26">stderr<pos:position pos:line="112" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="112" pos:column="34">"%c requires a port argument!\n"<pos:position pos:line="112" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="112" pos:column="68">option<pos:position pos:line="112" pos:column="74"/></name></expr></argument> )<pos:position pos:line="112" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="77"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="113" pos:column="17">exit<pos:position pos:line="113" pos:column="21"/></name><argument_list pos:line="113" pos:column="21">(<argument><expr><literal type="number" pos:line="113" pos:column="22">1<pos:position pos:line="113" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="113" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="25"/></expr_stmt>
            }<pos:position pos:line="114" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name pos:line="115" pos:column="13">colon<pos:position pos:line="115" pos:column="18"/></name> <operator pos:line="115" pos:column="19">=<pos:position pos:line="115" pos:column="20"/></operator> <call><name pos:line="115" pos:column="21">strchr<pos:position pos:line="115" pos:column="27"/></name><argument_list pos:line="115" pos:column="27">( <argument><expr><name pos:line="115" pos:column="29">optarg<pos:position pos:line="115" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="115" pos:column="37">':'<pos:position pos:line="115" pos:column="40"/></literal></expr></argument> )<pos:position pos:line="115" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="43"/></expr_stmt>
            <if pos:line="116" pos:column="13">if <condition pos:line="116" pos:column="16">( <expr><name pos:line="116" pos:column="18">colon<pos:position pos:line="116" pos:column="23"/></name> <operator pos:line="116" pos:column="24">==<pos:position pos:line="116" pos:column="26"/></operator> <literal type="number" pos:line="116" pos:column="27">0<pos:position pos:line="116" pos:column="28"/></literal></expr> )<pos:position pos:line="116" pos:column="30"/></condition><then pos:line="116" pos:column="30"> <block pos:line="116" pos:column="31">{
                <comment type="line" pos:line="117" pos:column="17">// no colon, only look at host</comment>

                <comment type="line" pos:line="119" pos:column="17">// fix: see if somebody just put in there a port (no periods)</comment>
                <comment type="line" pos:line="120" pos:column="17">// give port number precedence over host names</comment>
                <expr_stmt><expr><name pos:line="121" pos:column="17">port<pos:position pos:line="121" pos:column="21"/></name> <operator pos:line="121" pos:column="22">=<pos:position pos:line="121" pos:column="23"/></operator> <call><name pos:line="121" pos:column="24">checkForPortOnly<pos:position pos:line="121" pos:column="40"/></name><argument_list pos:line="121" pos:column="40">( <argument><expr><name pos:line="121" pos:column="42">optarg<pos:position pos:line="121" pos:column="48"/></name></expr></argument> )<pos:position pos:line="121" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="51"/></expr_stmt>
                <if pos:line="122" pos:column="17">if <condition pos:line="122" pos:column="20">( <expr><name pos:line="122" pos:column="22">port<pos:position pos:line="122" pos:column="26"/></name> <operator pos:line="122" pos:column="27">==<pos:position pos:line="122" pos:column="29"/></operator> <operator pos:line="122" pos:column="30">-<pos:position pos:line="122" pos:column="31"/></operator><literal type="number" pos:line="122" pos:column="31">1<pos:position pos:line="122" pos:column="32"/></literal></expr> )<pos:position pos:line="122" pos:column="34"/></condition><then pos:line="122" pos:column="34"> <block pos:line="122" pos:column="35">{
                    <comment type="line" pos:line="123" pos:column="21">// assume that main() did set the default port</comment>
                    <if pos:line="124" pos:column="21">if <condition pos:line="124" pos:column="24">( <expr><call><name pos:line="124" pos:column="26">convertHostname<pos:position pos:line="124" pos:column="41"/></name><argument_list pos:line="124" pos:column="41">(<argument><expr><name pos:line="124" pos:column="42">optarg<pos:position pos:line="124" pos:column="48"/></name></expr></argument>,<argument><expr><name pos:line="124" pos:column="49">serverHost<pos:position pos:line="124" pos:column="59"/></name></expr></argument>)<pos:position pos:line="124" pos:column="60"/></argument_list></call> <operator pos:line="124" pos:column="61">==<pos:position pos:line="124" pos:column="63"/></operator> <operator pos:line="124" pos:column="64">-<pos:position pos:line="124" pos:column="65"/></operator><literal type="number" pos:line="124" pos:column="65">1<pos:position pos:line="124" pos:column="66"/></literal></expr> )<pos:position pos:line="124" pos:column="68"/></condition><then pos:line="124" pos:column="68"> <block pos:line="124" pos:column="69">{
                        <expr_stmt><expr><call><name pos:line="125" pos:column="25">fprintf<pos:position pos:line="125" pos:column="32"/></name><argument_list pos:line="125" pos:column="32">( <argument><expr><name pos:line="125" pos:column="34">stderr<pos:position pos:line="125" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="125" pos:column="42">"unable to resolve host %s!\n"<pos:position pos:line="125" pos:column="72"/></literal></expr></argument>, <argument><expr><name pos:line="125" pos:column="74">optarg<pos:position pos:line="125" pos:column="80"/></name></expr></argument> )<pos:position pos:line="125" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="83"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="126" pos:column="25">exit<pos:position pos:line="126" pos:column="29"/></name><argument_list pos:line="126" pos:column="29">(<argument><expr><literal type="number" pos:line="126" pos:column="30">1<pos:position pos:line="126" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="126" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="33"/></expr_stmt>
                    }<pos:position pos:line="127" pos:column="22"/></block></then></if>
                }<pos:position pos:line="128" pos:column="18"/></block></then> <else pos:line="128" pos:column="19">else <block pos:line="128" pos:column="24">{
                    <comment type="line" pos:line="129" pos:column="21">// assume that main() did set the default host</comment>
                    <expr_stmt><expr><name pos:line="130" pos:column="21">serverPort<pos:position pos:line="130" pos:column="31"/></name> <operator pos:line="130" pos:column="32">=<pos:position pos:line="130" pos:column="33"/></operator> <name pos:line="130" pos:column="34">port<pos:position pos:line="130" pos:column="38"/></name></expr>;<pos:position pos:line="130" pos:column="39"/></expr_stmt>
                }<pos:position pos:line="131" pos:column="18"/></block></else></if>
            }<pos:position pos:line="132" pos:column="14"/></block></then> <else pos:line="132" pos:column="15">else <block pos:line="132" pos:column="20">{
                <comment type="line" pos:line="133" pos:column="17">// colon used, port is extra</comment>
                <expr_stmt><expr><operator pos:line="134" pos:column="17">*<pos:position pos:line="134" pos:column="18"/></operator><name pos:line="134" pos:column="18">colon<pos:position pos:line="134" pos:column="23"/></name> <operator pos:line="134" pos:column="24">=<pos:position pos:line="134" pos:column="25"/></operator> <literal type="number" pos:line="134" pos:column="26">0<pos:position pos:line="134" pos:column="27"/></literal></expr>;<pos:position pos:line="134" pos:column="28"/></expr_stmt>
                <expr_stmt><expr><operator pos:line="135" pos:column="17">++<pos:position pos:line="135" pos:column="19"/></operator><name pos:line="135" pos:column="19">colon<pos:position pos:line="135" pos:column="24"/></name></expr>;<pos:position pos:line="135" pos:column="25"/></expr_stmt>
                <if pos:line="136" pos:column="17">if <condition pos:line="136" pos:column="20">( <expr><call><name pos:line="136" pos:column="22">convertHostname<pos:position pos:line="136" pos:column="37"/></name><argument_list pos:line="136" pos:column="37">(<argument><expr><name pos:line="136" pos:column="38">optarg<pos:position pos:line="136" pos:column="44"/></name></expr></argument>,<argument><expr><name pos:line="136" pos:column="45">serverHost<pos:position pos:line="136" pos:column="55"/></name></expr></argument>)<pos:position pos:line="136" pos:column="56"/></argument_list></call> <operator pos:line="136" pos:column="57">==<pos:position pos:line="136" pos:column="59"/></operator> <operator pos:line="136" pos:column="60">-<pos:position pos:line="136" pos:column="61"/></operator><literal type="number" pos:line="136" pos:column="61">1<pos:position pos:line="136" pos:column="62"/></literal></expr> )<pos:position pos:line="136" pos:column="64"/></condition><then pos:line="136" pos:column="64"> <block pos:line="136" pos:column="65">{
                    <expr_stmt><expr><call><name pos:line="137" pos:column="21">fprintf<pos:position pos:line="137" pos:column="28"/></name><argument_list pos:line="137" pos:column="28">( <argument><expr><name pos:line="137" pos:column="30">stderr<pos:position pos:line="137" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="137" pos:column="38">"unable to resolve host %s!\n"<pos:position pos:line="137" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="137" pos:column="70">optarg<pos:position pos:line="137" pos:column="76"/></name></expr></argument> )<pos:position pos:line="137" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="79"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="138" pos:column="21">exit<pos:position pos:line="138" pos:column="25"/></name><argument_list pos:line="138" pos:column="25">(<argument><expr><literal type="number" pos:line="138" pos:column="26">1<pos:position pos:line="138" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="138" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="29"/></expr_stmt>
                }<pos:position pos:line="139" pos:column="18"/></block></then></if>
                <if pos:line="140" pos:column="17">if <condition pos:line="140" pos:column="20">( <expr><call><name pos:line="140" pos:column="22">convertPortname<pos:position pos:line="140" pos:column="37"/></name><argument_list pos:line="140" pos:column="37">(<argument><expr><name pos:line="140" pos:column="38">colon<pos:position pos:line="140" pos:column="43"/></name></expr></argument>,<argument><expr><name pos:line="140" pos:column="44">serverPort<pos:position pos:line="140" pos:column="54"/></name></expr></argument>)<pos:position pos:line="140" pos:column="55"/></argument_list></call> <operator pos:line="140" pos:column="56">==<pos:position pos:line="140" pos:column="58"/></operator> <operator pos:line="140" pos:column="59">-<pos:position pos:line="140" pos:column="60"/></operator><literal type="number" pos:line="140" pos:column="60">1<pos:position pos:line="140" pos:column="61"/></literal></expr> )<pos:position pos:line="140" pos:column="63"/></condition><then pos:line="140" pos:column="63"> <block pos:line="140" pos:column="64">{
                    <expr_stmt><expr><call><name pos:line="141" pos:column="21">fprintf<pos:position pos:line="141" pos:column="28"/></name><argument_list pos:line="141" pos:column="28">( <argument><expr><name pos:line="141" pos:column="30">stderr<pos:position pos:line="141" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="141" pos:column="38">"unable to resolve port %s!\n"<pos:position pos:line="141" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="141" pos:column="70">colon<pos:position pos:line="141" pos:column="75"/></name></expr></argument> )<pos:position pos:line="141" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="78"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="142" pos:column="21">exit<pos:position pos:line="142" pos:column="25"/></name><argument_list pos:line="142" pos:column="25">(<argument><expr><literal type="number" pos:line="142" pos:column="26">1<pos:position pos:line="142" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="142" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="29"/></expr_stmt>
                }<pos:position pos:line="143" pos:column="18"/></block></then></if>
            }<pos:position pos:line="144" pos:column="14"/></block></else></if>
            <break pos:line="145" pos:column="13">break;<pos:position pos:line="145" pos:column="19"/></break>
        <case pos:line="146" pos:column="9">case <expr><literal type="char" pos:line="146" pos:column="14">'P'<pos:position pos:line="146" pos:column="17"/></literal></expr>:<pos:position pos:line="146" pos:column="18"/></case>
            <if pos:line="147" pos:column="13">if <condition pos:line="147" pos:column="16">( <expr><operator pos:line="147" pos:column="18">!<pos:position pos:line="147" pos:column="19"/></operator><name pos:line="147" pos:column="19">optarg<pos:position pos:line="147" pos:column="25"/></name> <operator pos:line="147" pos:column="26">||<pos:position pos:line="147" pos:column="28"/></operator> <operator pos:line="147" pos:column="29">!<pos:position pos:line="147" pos:column="30"/></operator><operator pos:line="147" pos:column="30">*<pos:position pos:line="147" pos:column="31"/></operator><name pos:line="147" pos:column="31">optarg<pos:position pos:line="147" pos:column="37"/></name></expr> )<pos:position pos:line="147" pos:column="39"/></condition><then pos:line="147" pos:column="39"> <block pos:line="147" pos:column="40">{
                <expr_stmt><expr><call><name pos:line="148" pos:column="17">fprintf<pos:position pos:line="148" pos:column="24"/></name><argument_list pos:line="148" pos:column="24">( <argument><expr><name pos:line="148" pos:column="26">stderr<pos:position pos:line="148" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="148" pos:column="34">"%c requires a mode argument!\n"<pos:position pos:line="148" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="148" pos:column="68">option<pos:position pos:line="148" pos:column="74"/></name></expr></argument> )<pos:position pos:line="148" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="77"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="149" pos:column="17">exit<pos:position pos:line="149" pos:column="21"/></name><argument_list pos:line="149" pos:column="21">(<argument><expr><literal type="number" pos:line="149" pos:column="22">1<pos:position pos:line="149" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="149" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="25"/></expr_stmt>
            }<pos:position pos:line="150" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name><operator pos:line="151" pos:column="13">::<pos:position pos:line="151" pos:column="15"/></operator><name pos:line="151" pos:column="15">purgeMode<pos:position pos:line="151" pos:column="24"/></name></name> <operator pos:line="151" pos:column="25">=<pos:position pos:line="151" pos:column="26"/></operator> <operator pos:line="151" pos:column="27">(<pos:position pos:line="151" pos:column="28"/></operator> <call><name pos:line="151" pos:column="29">strtol<pos:position pos:line="151" pos:column="35"/></name><argument_list pos:line="151" pos:column="35">( <argument><expr><name pos:line="151" pos:column="37">optarg<pos:position pos:line="151" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="151" pos:column="45">0<pos:position pos:line="151" pos:column="46"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="151" pos:column="48">0<pos:position pos:line="151" pos:column="49"/></literal></expr></argument> )<pos:position pos:line="151" pos:column="51"/></argument_list></call> <operator pos:line="151" pos:column="52">&amp;<pos:position pos:line="151" pos:column="57"/></operator> <literal type="number" pos:line="151" pos:column="54">0x07<pos:position pos:line="151" pos:column="58"/></literal> <operator pos:line="151" pos:column="59">)<pos:position pos:line="151" pos:column="60"/></operator></expr>;<pos:position pos:line="151" pos:column="61"/></expr_stmt>
            <break pos:line="152" pos:column="13">break;<pos:position pos:line="152" pos:column="19"/></break>
        <case pos:line="153" pos:column="9">case <expr><literal type="char" pos:line="153" pos:column="14">'s'<pos:position pos:line="153" pos:column="17"/></literal></expr>:<pos:position pos:line="153" pos:column="18"/></case>
            <expr_stmt><expr><name pos:line="154" pos:column="13">showme<pos:position pos:line="154" pos:column="19"/></name><operator pos:line="154" pos:column="19">=<pos:position pos:line="154" pos:column="20"/></operator><literal type="number" pos:line="154" pos:column="20">1<pos:position pos:line="154" pos:column="21"/></literal></expr>;<pos:position pos:line="154" pos:column="22"/></expr_stmt>
            <break pos:line="155" pos:column="13">break;<pos:position pos:line="155" pos:column="19"/></break>
        <case pos:line="156" pos:column="9">case <expr><literal type="char" pos:line="156" pos:column="14">'v'<pos:position pos:line="156" pos:column="17"/></literal></expr>:<pos:position pos:line="156" pos:column="18"/></case>
            <expr_stmt><expr><name><operator pos:line="157" pos:column="13">::<pos:position pos:line="157" pos:column="15"/></operator><name pos:line="157" pos:column="15">verbose<pos:position pos:line="157" pos:column="22"/></name></name> <operator pos:line="157" pos:column="23">=<pos:position pos:line="157" pos:column="24"/></operator> <operator pos:line="157" pos:column="25">!<pos:position pos:line="157" pos:column="26"/></operator> <name><operator pos:line="157" pos:column="27">::<pos:position pos:line="157" pos:column="29"/></operator><name pos:line="157" pos:column="29">verbose<pos:position pos:line="157" pos:column="36"/></name></name></expr>;<pos:position pos:line="157" pos:column="37"/></expr_stmt>
            <break pos:line="158" pos:column="13">break;<pos:position pos:line="158" pos:column="19"/></break>
        <case pos:line="159" pos:column="9">case <expr><literal type="char" pos:line="159" pos:column="14">'?'<pos:position pos:line="159" pos:column="17"/></literal></expr>:<pos:position pos:line="159" pos:column="18"/></case>
        <default pos:line="160" pos:column="9">default:<pos:position pos:line="160" pos:column="17"/></default>
            <expr_stmt><expr><call><name pos:line="161" pos:column="13">helpMe<pos:position pos:line="161" pos:column="19"/></name><argument_list pos:line="161" pos:column="19">()<pos:position pos:line="161" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="161" pos:column="22"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="162" pos:column="13">exit<pos:position pos:line="162" pos:column="17"/></name><argument_list pos:line="162" pos:column="17">(<argument><expr><literal type="number" pos:line="162" pos:column="18">1<pos:position pos:line="162" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="162" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="21"/></expr_stmt>
        }<pos:position pos:line="163" pos:column="10"/></block></switch>
    }<pos:position pos:line="164" pos:column="6"/></block></while>

    <comment type="line" pos:line="166" pos:column="5">// adjust</comment>
    <if pos:line="167" pos:column="5">if <condition pos:line="167" pos:column="8">( <expr><operator pos:line="167" pos:column="10">!<pos:position pos:line="167" pos:column="11"/></operator> <call><name pos:line="167" pos:column="12">isatty<pos:position pos:line="167" pos:column="18"/></name><argument_list pos:line="167" pos:column="18">(<argument><expr><call><name pos:line="167" pos:column="19">fileno<pos:position pos:line="167" pos:column="25"/></name><argument_list pos:line="167" pos:column="25">(<argument><expr><name pos:line="167" pos:column="26">stdout<pos:position pos:line="167" pos:column="32"/></name></expr></argument>)<pos:position pos:line="167" pos:column="33"/></argument_list></call></expr></argument>)<pos:position pos:line="167" pos:column="34"/></argument_list></call> <operator pos:line="167" pos:column="35">||<pos:position pos:line="167" pos:column="37"/></operator> <operator pos:line="167" pos:column="38">(<pos:position pos:line="167" pos:column="39"/></operator><name><operator pos:line="167" pos:column="39">::<pos:position pos:line="167" pos:column="41"/></operator><name pos:line="167" pos:column="41">debugFlag<pos:position pos:line="167" pos:column="50"/></name></name> <operator pos:line="167" pos:column="51">&amp;<pos:position pos:line="167" pos:column="56"/></operator> <literal type="number" pos:line="167" pos:column="53">0x01<pos:position pos:line="167" pos:column="57"/></literal><operator pos:line="167" pos:column="57">)<pos:position pos:line="167" pos:column="58"/></operator></expr> )<pos:position pos:line="167" pos:column="60"/></condition><then pos:line="167" pos:column="60"> <block type="pseudo"><expr_stmt><expr><name><operator pos:line="167" pos:column="61">::<pos:position pos:line="167" pos:column="63"/></operator><name pos:line="167" pos:column="63">iamalive<pos:position pos:line="167" pos:column="71"/></name></name> <operator pos:line="167" pos:column="72">=<pos:position pos:line="167" pos:column="73"/></operator> <literal type="boolean" pos:line="167" pos:column="74">false<pos:position pos:line="167" pos:column="79"/></literal></expr>;<pos:position pos:line="167" pos:column="80"/></expr_stmt></block></then></if>
    <if pos:line="168" pos:column="5">if <condition pos:line="168" pos:column="8">( <expr><name pos:line="168" pos:column="10">head<pos:position pos:line="168" pos:column="14"/></name> <operator pos:line="168" pos:column="15">==<pos:position pos:line="168" pos:column="17"/></operator> <literal type="number" pos:line="168" pos:column="18">0<pos:position pos:line="168" pos:column="19"/></literal></expr> )<pos:position pos:line="168" pos:column="21"/></condition><then pos:line="168" pos:column="21"> <block pos:line="168" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="169" pos:column="9">fputs<pos:position pos:line="169" pos:column="14"/></name><argument_list pos:line="169" pos:column="14">( <argument><expr><literal type="string" pos:line="169" pos:column="16">"There was no regular expression defined. If you intend\n"<pos:position pos:line="169" pos:column="74"/></literal></expr></argument>, <argument><expr><name pos:line="169" pos:column="76">stderr<pos:position pos:line="169" pos:column="82"/></name></expr></argument> )<pos:position pos:line="169" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="169" pos:column="85"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="170" pos:column="9">fputs<pos:position pos:line="170" pos:column="14"/></name><argument_list pos:line="170" pos:column="14">( <argument><expr><literal type="string" pos:line="170" pos:column="16">"to match all possible URLs, use \"-e .\" instead.\n"<pos:position pos:line="170" pos:column="69"/></literal></expr></argument>, <argument><expr><name pos:line="170" pos:column="71">stderr<pos:position pos:line="170" pos:column="77"/></name></expr></argument> )<pos:position pos:line="170" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="170" pos:column="80"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="171" pos:column="9">exit<pos:position pos:line="171" pos:column="13"/></name><argument_list pos:line="171" pos:column="13">(<argument><expr><literal type="number" pos:line="171" pos:column="14">1<pos:position pos:line="171" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="171" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="171" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="172" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="174" pos:column="5">// postcondition: head != 0</comment>
    <expr_stmt><expr><call><name pos:line="175" pos:column="5">assert<pos:position pos:line="175" pos:column="11"/></name><argument_list pos:line="175" pos:column="11">( <argument><expr><name pos:line="175" pos:column="13">head<pos:position pos:line="175" pos:column="17"/></name> <operator pos:line="175" pos:column="18">!=<pos:position pos:line="175" pos:column="20"/></operator> <literal type="number" pos:line="175" pos:column="21">0<pos:position pos:line="175" pos:column="22"/></literal></expr></argument> )<pos:position pos:line="175" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="175" pos:column="25"/></expr_stmt>

    <comment type="line" pos:line="177" pos:column="5">// make sure that the copy out directory is there and accessible</comment>
    <if pos:line="178" pos:column="5">if <condition pos:line="178" pos:column="8">( <expr><name pos:line="178" pos:column="10">copydir<pos:position pos:line="178" pos:column="17"/></name> <operator pos:line="178" pos:column="18">&amp;&amp;<pos:position pos:line="178" pos:column="28"/></operator> <operator pos:line="178" pos:column="21">*<pos:position pos:line="178" pos:column="22"/></operator><name pos:line="178" pos:column="22">copydir<pos:position pos:line="178" pos:column="29"/></name></expr> )<pos:position pos:line="178" pos:column="31"/></condition><then pos:line="178" pos:column="31">
        <block type="pseudo"><if pos:line="179" pos:column="9">if <condition pos:line="179" pos:column="12">( <expr><call><name pos:line="179" pos:column="14">assert_copydir<pos:position pos:line="179" pos:column="28"/></name><argument_list pos:line="179" pos:column="28">( <argument><expr><name pos:line="179" pos:column="30">copydir<pos:position pos:line="179" pos:column="37"/></name></expr></argument> )<pos:position pos:line="179" pos:column="39"/></argument_list></call> <operator pos:line="179" pos:column="40">!=<pos:position pos:line="179" pos:column="42"/></operator> <literal type="number" pos:line="179" pos:column="43">0<pos:position pos:line="179" pos:column="44"/></literal></expr> )<pos:position pos:line="179" pos:column="46"/></condition><then pos:line="179" pos:column="46"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="179" pos:column="47">exit<pos:position pos:line="179" pos:column="51"/></name><argument_list pos:line="179" pos:column="51">(<argument><expr><literal type="number" pos:line="179" pos:column="52">1<pos:position pos:line="179" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="179" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="179" pos:column="55"/></expr_stmt></block></then></if></block></then></if>

    <comment type="line" pos:line="181" pos:column="5">// show results</comment>
    <if pos:line="182" pos:column="5">if <condition pos:line="182" pos:column="8">( <expr><name pos:line="182" pos:column="10">showme<pos:position pos:line="182" pos:column="16"/></name></expr> )<pos:position pos:line="182" pos:column="18"/></condition><then pos:line="182" pos:column="18"> <block pos:line="182" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="183" pos:column="9">printf<pos:position pos:line="183" pos:column="15"/></name><argument_list pos:line="183" pos:column="15">( <argument><expr><literal type="string" pos:line="183" pos:column="17">"#\n# Currently active values for %s:\n"<pos:position pos:line="183" pos:column="57"/></literal></expr></argument>,
                <argument><expr><name><operator pos:line="184" pos:column="17">::<pos:position pos:line="184" pos:column="19"/></operator><name pos:line="184" pos:column="19">programname<pos:position pos:line="184" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="184" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="184" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="185" pos:column="9">printf<pos:position pos:line="185" pos:column="15"/></name><argument_list pos:line="185" pos:column="15">( <argument><expr><literal type="string" pos:line="185" pos:column="17">"# Debug level       : "<pos:position pos:line="185" pos:column="41"/></literal></expr></argument> )<pos:position pos:line="185" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="185" pos:column="44"/></expr_stmt>
        <if pos:line="186" pos:column="9">if <condition pos:line="186" pos:column="12">( <expr><name><operator pos:line="186" pos:column="14">::<pos:position pos:line="186" pos:column="16"/></operator><name pos:line="186" pos:column="16">debugFlag<pos:position pos:line="186" pos:column="25"/></name></name></expr> )<pos:position pos:line="186" pos:column="27"/></condition><then pos:line="186" pos:column="27"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="186" pos:column="28">printf<pos:position pos:line="186" pos:column="34"/></name><argument_list pos:line="186" pos:column="34">( <argument><expr><literal type="string" pos:line="186" pos:column="36">"%#6.4x"<pos:position pos:line="186" pos:column="44"/></literal></expr></argument>, <argument><expr><name><operator pos:line="186" pos:column="46">::<pos:position pos:line="186" pos:column="48"/></operator><name pos:line="186" pos:column="48">debugFlag<pos:position pos:line="186" pos:column="57"/></name></name></expr></argument> )<pos:position pos:line="186" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="186" pos:column="60"/></expr_stmt></block></then>
        <else pos:line="187" pos:column="9">else <block type="pseudo"><expr_stmt><expr><call><name pos:line="187" pos:column="14">printf<pos:position pos:line="187" pos:column="20"/></name><argument_list pos:line="187" pos:column="20">( <argument><expr><literal type="string" pos:line="187" pos:column="22">"production level"<pos:position pos:line="187" pos:column="40"/></literal></expr></argument> )<pos:position pos:line="187" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="187" pos:column="43"/></expr_stmt></block></else></if> <comment type="line" pos:line="187" pos:column="44">// printf omits 0x prefix for 0!</comment>
        <expr_stmt><expr><call><name pos:line="188" pos:column="9">printf<pos:position pos:line="188" pos:column="15"/></name><argument_list pos:line="188" pos:column="15">( <argument><expr><literal type="string" pos:line="188" pos:column="17">" + %s mode"<pos:position pos:line="188" pos:column="29"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><name><operator pos:line="188" pos:column="31">::<pos:position pos:line="188" pos:column="33"/></operator><name pos:line="188" pos:column="33">no_fork<pos:position pos:line="188" pos:column="40"/></name></name></expr> ?<pos:position pos:line="188" pos:column="42"/></condition><then pos:line="188" pos:column="42"> <expr><literal type="string" pos:line="188" pos:column="43">"linear"<pos:position pos:line="188" pos:column="51"/></literal></expr> <pos:position pos:line="188" pos:column="52"/></then><else pos:line="188" pos:column="52">: <expr><literal type="string" pos:line="188" pos:column="54">"parallel"<pos:position pos:line="188" pos:column="64"/></literal></expr></else></ternary></expr></argument> )<pos:position pos:line="188" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="188" pos:column="67"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="189" pos:column="9">puts<pos:position pos:line="189" pos:column="13"/></name><argument_list pos:line="189" pos:column="13">( <argument><expr><ternary><condition><expr><name><operator pos:line="189" pos:column="15">::<pos:position pos:line="189" pos:column="17"/></operator><name pos:line="189" pos:column="17">verbose<pos:position pos:line="189" pos:column="24"/></name></name></expr> ?<pos:position pos:line="189" pos:column="26"/></condition><then pos:line="189" pos:column="26"> <expr><literal type="string" pos:line="189" pos:column="27">" + extra verbosity"<pos:position pos:line="189" pos:column="47"/></literal></expr> <pos:position pos:line="189" pos:column="48"/></then><else pos:line="189" pos:column="48">: <expr><literal type="string" pos:line="189" pos:column="50">""<pos:position pos:line="189" pos:column="52"/></literal></expr></else></ternary></expr></argument> )<pos:position pos:line="189" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="189" pos:column="55"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="191" pos:column="9">printf<pos:position pos:line="191" pos:column="15"/></name><argument_list pos:line="191" pos:column="15">( <argument><expr><literal type="string" pos:line="191" pos:column="17">"# Copy-out directory: %s "<pos:position pos:line="191" pos:column="44"/></literal></expr></argument>,
                <argument><expr><ternary><condition><expr><name pos:line="192" pos:column="17">copydir<pos:position pos:line="192" pos:column="24"/></name></expr> ?<pos:position pos:line="192" pos:column="26"/></condition><then pos:line="192" pos:column="26"> <expr><name pos:line="192" pos:column="27">copydir<pos:position pos:line="192" pos:column="34"/></name></expr> <pos:position pos:line="192" pos:column="35"/></then><else pos:line="192" pos:column="35">: <expr><literal type="string" pos:line="192" pos:column="37">"copy-out mode disabled"<pos:position pos:line="192" pos:column="61"/></literal></expr></else></ternary></expr></argument> )<pos:position pos:line="192" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="192" pos:column="64"/></expr_stmt>
        <if pos:line="193" pos:column="9">if <condition pos:line="193" pos:column="12">( <expr><name pos:line="193" pos:column="14">copydir<pos:position pos:line="193" pos:column="21"/></name></expr> )<pos:position pos:line="193" pos:column="23"/></condition><then pos:line="193" pos:column="23">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="194" pos:column="13">printf<pos:position pos:line="194" pos:column="19"/></name><argument_list pos:line="194" pos:column="19">( <argument><expr><literal type="string" pos:line="194" pos:column="21">"(%s HTTP header)\n"<pos:position pos:line="194" pos:column="41"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><name><operator pos:line="194" pos:column="43">::<pos:position pos:line="194" pos:column="45"/></operator><name pos:line="194" pos:column="45">envelope<pos:position pos:line="194" pos:column="53"/></name></name></expr> ?<pos:position pos:line="194" pos:column="55"/></condition><then pos:line="194" pos:column="55"> <expr><literal type="string" pos:line="194" pos:column="56">"prepend"<pos:position pos:line="194" pos:column="65"/></literal></expr> <pos:position pos:line="194" pos:column="66"/></then><else pos:line="194" pos:column="66">: <expr><literal type="string" pos:line="194" pos:column="68">"no"<pos:position pos:line="194" pos:column="72"/></literal></expr></else></ternary></expr></argument> )<pos:position pos:line="194" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="194" pos:column="75"/></expr_stmt></block></then>
        <else pos:line="195" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="196" pos:column="13">puts<pos:position pos:line="196" pos:column="17"/></name><argument_list pos:line="196" pos:column="17">(<argument><expr><literal type="string" pos:line="196" pos:column="18">""<pos:position pos:line="196" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="196" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="196" pos:column="22"/></expr_stmt></block></else></if>

        <expr_stmt><expr><call><name pos:line="198" pos:column="9">printf<pos:position pos:line="198" pos:column="15"/></name><argument_list pos:line="198" pos:column="15">( <argument><expr><literal type="string" pos:line="198" pos:column="17">"# Squid config file : %s\n"<pos:position pos:line="198" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="198" pos:column="47">conffile<pos:position pos:line="198" pos:column="55"/></name></expr></argument> )<pos:position pos:line="198" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="198" pos:column="58"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="199" pos:column="9">printf<pos:position pos:line="199" pos:column="15"/></name><argument_list pos:line="199" pos:column="15">( <argument><expr><literal type="string" pos:line="199" pos:column="17">"# Cacheserveraddress: %s:%u\n"<pos:position pos:line="199" pos:column="48"/></literal></expr></argument>,
                <argument><expr><call><name pos:line="200" pos:column="17">inet_ntoa<pos:position pos:line="200" pos:column="26"/></name><argument_list pos:line="200" pos:column="26">( <argument><expr><name pos:line="200" pos:column="28">serverHost<pos:position pos:line="200" pos:column="38"/></name></expr></argument> )<pos:position pos:line="200" pos:column="40"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="200" pos:column="42">ntohs<pos:position pos:line="200" pos:column="47"/></name><argument_list pos:line="200" pos:column="47">( <argument><expr><name pos:line="200" pos:column="49">serverPort<pos:position pos:line="200" pos:column="59"/></name></expr></argument> )<pos:position pos:line="200" pos:column="61"/></argument_list></call></expr></argument> )<pos:position pos:line="200" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="200" pos:column="64"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="201" pos:column="9">printf<pos:position pos:line="201" pos:column="15"/></name><argument_list pos:line="201" pos:column="15">( <argument><expr><literal type="string" pos:line="201" pos:column="17">"# purge mode        : 0x%02x\n"<pos:position pos:line="201" pos:column="49"/></literal></expr></argument>, <argument><expr><name><operator pos:line="201" pos:column="51">::<pos:position pos:line="201" pos:column="53"/></operator><name pos:line="201" pos:column="53">purgeMode<pos:position pos:line="201" pos:column="62"/></name></name></expr></argument> )<pos:position pos:line="201" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="201" pos:column="65"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="202" pos:column="9">printf<pos:position pos:line="202" pos:column="15"/></name><argument_list pos:line="202" pos:column="15">( <argument><expr><literal type="string" pos:line="202" pos:column="17">"# Regular expression: "<pos:position pos:line="202" pos:column="41"/></literal></expr></argument> )<pos:position pos:line="202" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="202" pos:column="44"/></expr_stmt>

        <decl_stmt><decl><type><name pos:line="204" pos:column="9">unsigned<pos:position pos:line="204" pos:column="17"/></name></type> <name pos:line="204" pos:column="18">count<pos:position pos:line="204" pos:column="23"/></name><argument_list pos:line="204" pos:column="23">(<argument><expr><literal type="number" pos:line="204" pos:column="24">0<pos:position pos:line="204" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="204" pos:column="26"/></argument_list></decl>;<pos:position pos:line="204" pos:column="27"/></decl_stmt>
        <for pos:line="205" pos:column="9">for <control pos:line="205" pos:column="13">( <init><expr><name pos:line="205" pos:column="15">tail<pos:position pos:line="205" pos:column="19"/></name> <operator pos:line="205" pos:column="20">=<pos:position pos:line="205" pos:column="21"/></operator> <name pos:line="205" pos:column="22">head<pos:position pos:line="205" pos:column="26"/></name></expr>;<pos:position pos:line="205" pos:column="27"/></init> <condition><expr><name pos:line="205" pos:column="28">tail<pos:position pos:line="205" pos:column="32"/></name> <operator pos:line="205" pos:column="33">!=<pos:position pos:line="205" pos:column="35"/></operator> <name pos:line="205" pos:column="36">NULL<pos:position pos:line="205" pos:column="40"/></name></expr>;<pos:position pos:line="205" pos:column="41"/></condition> <incr><expr><name pos:line="205" pos:column="42">tail<pos:position pos:line="205" pos:column="46"/></name> <operator pos:line="205" pos:column="47">=<pos:position pos:line="205" pos:column="48"/></operator> <name><name pos:line="205" pos:column="49">tail<pos:position pos:line="205" pos:column="53"/></name><operator pos:line="205" pos:column="53">-&gt;<pos:position pos:line="205" pos:column="58"/></operator><name pos:line="205" pos:column="55">next<pos:position pos:line="205" pos:column="59"/></name></name></expr></incr> )<pos:position pos:line="205" pos:column="61"/></control> <block pos:line="205" pos:column="62">{
            <if pos:line="206" pos:column="13">if <condition pos:line="206" pos:column="16">( <expr><name pos:line="206" pos:column="18">count<pos:position pos:line="206" pos:column="23"/></name><operator pos:line="206" pos:column="23">++<pos:position pos:line="206" pos:column="25"/></operator></expr> )<pos:position pos:line="206" pos:column="27"/></condition><then pos:line="206" pos:column="27">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="207" pos:column="17">printf<pos:position pos:line="207" pos:column="23"/></name><argument_list pos:line="207" pos:column="23">( <argument><expr><literal type="string" pos:line="207" pos:column="25">"#%22u"<pos:position pos:line="207" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="207" pos:column="34">count<pos:position pos:line="207" pos:column="39"/></name></expr></argument> )<pos:position pos:line="207" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="207" pos:column="42"/></expr_stmt></block></then>
<cpp:if pos:line="208" pos:column="1">#<cpp:directive pos:line="208" pos:column="2">if<pos:position pos:line="208" pos:column="4"/></cpp:directive> <expr><call><name pos:line="208" pos:column="5">defined<pos:position pos:line="208" pos:column="12"/></name><argument_list pos:line="208" pos:column="12">(<argument><expr><name pos:line="208" pos:column="13">LINUX<pos:position pos:line="208" pos:column="18"/></name></expr></argument>)<pos:position pos:line="208" pos:column="19"/></argument_list></call> <operator pos:line="208" pos:column="20">&amp;&amp;<pos:position pos:line="208" pos:column="30"/></operator> <name pos:line="208" pos:column="23">putc<pos:position pos:line="208" pos:column="27"/></name><operator pos:line="208" pos:column="27">==<pos:position pos:line="208" pos:column="29"/></operator><name pos:line="208" pos:column="29">_IO_putc<pos:position pos:line="208" pos:column="37"/></name></expr></cpp:if>
            <comment type="line" pos:line="209" pos:column="13">// I HATE BROKEN LINUX HEADERS!</comment>
            <comment type="line" pos:line="210" pos:column="13">// purge.o(.text+0x1040): undefined reference to `_IO_putc'</comment>
            <comment type="line" pos:line="211" pos:column="13">// If your compilation breaks here, remove the undefinition</comment>
<cpp:undef pos:line="212" pos:column="1">#<cpp:directive pos:line="212" pos:column="2">undef<pos:position pos:line="212" pos:column="7"/></cpp:directive> <name pos:line="212" pos:column="8">putc<pos:position pos:line="212" pos:column="12"/></name></cpp:undef>
<cpp:endif pos:line="213" pos:column="1">#<cpp:directive pos:line="213" pos:column="2">endif<pos:position pos:line="213" pos:column="7"/></cpp:directive></cpp:endif>
            <else pos:line="214" pos:column="13">else <block type="pseudo"><expr_stmt><expr><call><name pos:line="214" pos:column="18">putchar<pos:position pos:line="214" pos:column="25"/></name><argument_list pos:line="214" pos:column="25">(<argument><expr><literal type="char" pos:line="214" pos:column="26">'1'<pos:position pos:line="214" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="214" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="214" pos:column="31"/></expr_stmt></block></else></if>
            <expr_stmt><expr><call><name pos:line="215" pos:column="13">printf<pos:position pos:line="215" pos:column="19"/></name><argument_list pos:line="215" pos:column="19">( <argument><expr><literal type="string" pos:line="215" pos:column="21">" \"%s\"\n"<pos:position pos:line="215" pos:column="32"/></literal></expr></argument>, <argument><expr><name><name pos:line="215" pos:column="34">tail<pos:position pos:line="215" pos:column="38"/></name><operator pos:line="215" pos:column="38">-&gt;<pos:position pos:line="215" pos:column="43"/></operator><name pos:line="215" pos:column="40">data<pos:position pos:line="215" pos:column="44"/></name></name></expr></argument> )<pos:position pos:line="215" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="215" pos:column="47"/></expr_stmt>
        }<pos:position pos:line="216" pos:column="10"/></block></for>
        <expr_stmt><expr><call><name pos:line="217" pos:column="9">puts<pos:position pos:line="217" pos:column="13"/></name><argument_list pos:line="217" pos:column="13">( <argument><expr><literal type="string" pos:line="217" pos:column="15">"#"<pos:position pos:line="217" pos:column="18"/></literal></expr></argument> )<pos:position pos:line="217" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="217" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="218" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="219" pos:column="5">fflush<pos:position pos:line="219" pos:column="11"/></name><argument_list pos:line="219" pos:column="11">( <argument><expr><name pos:line="219" pos:column="13">stdout<pos:position pos:line="219" pos:column="19"/></name></expr></argument> )<pos:position pos:line="219" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="219" pos:column="22"/></expr_stmt>
}<pos:position pos:line="220" pos:column="2"/></block></function></unit>
