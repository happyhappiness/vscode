<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4457_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">ssl_read_method<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name pos:line="2" pos:column="17">int<pos:position pos:line="2" pos:column="20"/></name></type> <name pos:line="2" pos:column="21">fd<pos:position pos:line="2" pos:column="23"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="25">char<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">buf<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="36">int<pos:position pos:line="2" pos:column="39"/></name></type> <name pos:line="2" pos:column="40">len<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="44"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">SSL<pos:position pos:line="4" pos:column="8"/></name> <modifier pos:line="4" pos:column="9">*<pos:position pos:line="4" pos:column="10"/></modifier></type><name pos:line="4" pos:column="10">ssl<pos:position pos:line="4" pos:column="13"/></name> <init pos:line="4" pos:column="14">= <expr><name><name pos:line="4" pos:column="16">fd_table<pos:position pos:line="4" pos:column="24"/></name><index pos:line="4" pos:column="24">[<expr><name pos:line="4" pos:column="25">fd<pos:position pos:line="4" pos:column="27"/></name></expr>]<pos:position pos:line="4" pos:column="28"/></index></name><operator pos:line="4" pos:column="28">.<pos:position pos:line="4" pos:column="29"/></operator><name pos:line="4" pos:column="29">ssl<pos:position pos:line="4" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>

<cpp:if pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">if<pos:position pos:line="6" pos:column="4"/></cpp:directive> <expr><name pos:line="6" pos:column="5">DONT_DO_THIS<pos:position pos:line="6" pos:column="17"/></name></expr></cpp:if>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><operator pos:line="8" pos:column="9">!<pos:position pos:line="8" pos:column="10"/></operator><call><name pos:line="8" pos:column="10">SSL_is_init_finished<pos:position pos:line="8" pos:column="30"/></name><argument_list pos:line="8" pos:column="30">(<argument><expr><name pos:line="8" pos:column="31">ssl<pos:position pos:line="8" pos:column="34"/></name></expr></argument>)<pos:position pos:line="8" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="36"/></condition><then pos:line="8" pos:column="36"> <block pos:line="8" pos:column="37">{
        <expr_stmt><expr><name pos:line="9" pos:column="9">errno<pos:position pos:line="9" pos:column="14"/></name> <operator pos:line="9" pos:column="15">=<pos:position pos:line="9" pos:column="16"/></operator> <name pos:line="9" pos:column="17">ENOTCONN<pos:position pos:line="9" pos:column="25"/></name></expr>;<pos:position pos:line="9" pos:column="26"/></expr_stmt>
        <return pos:line="10" pos:column="9">return <expr><operator pos:line="10" pos:column="16">-<pos:position pos:line="10" pos:column="17"/></operator><literal type="number" pos:line="10" pos:column="17">1<pos:position pos:line="10" pos:column="18"/></literal></expr>;<pos:position pos:line="10" pos:column="19"/></return>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>

<cpp:endif pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">endif<pos:position pos:line="13" pos:column="7"/></cpp:directive></cpp:endif>

    <decl_stmt><decl><type><name pos:line="15" pos:column="5">int<pos:position pos:line="15" pos:column="8"/></name></type> <name pos:line="15" pos:column="9">i<pos:position pos:line="15" pos:column="10"/></name> <init pos:line="15" pos:column="11">= <expr><call><name pos:line="15" pos:column="13">SSL_read<pos:position pos:line="15" pos:column="21"/></name><argument_list pos:line="15" pos:column="21">(<argument><expr><name pos:line="15" pos:column="22">ssl<pos:position pos:line="15" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="27">buf<pos:position pos:line="15" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="32">len<pos:position pos:line="15" pos:column="35"/></name></expr></argument>)<pos:position pos:line="15" pos:column="36"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="37"/></decl_stmt>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name pos:line="16" pos:column="9">i<pos:position pos:line="16" pos:column="10"/></name> <operator pos:line="16" pos:column="11">&gt;<pos:position pos:line="16" pos:column="15"/></operator> <literal type="number" pos:line="16" pos:column="13">0<pos:position pos:line="16" pos:column="14"/></literal></expr>)<pos:position pos:line="16" pos:column="15"/></condition><then pos:line="16" pos:column="15"> <block pos:line="16" pos:column="16">{
        <expr_stmt><expr><operator pos:line="17" pos:column="9">(<pos:position pos:line="17" pos:column="10"/></operator><name pos:line="17" pos:column="10">void<pos:position pos:line="17" pos:column="14"/></name><operator pos:line="17" pos:column="14">)<pos:position pos:line="17" pos:column="15"/></operator><call><name pos:line="17" pos:column="15">VALGRIND_MAKE_MEM_DEFINED<pos:position pos:line="17" pos:column="40"/></name><argument_list pos:line="17" pos:column="40">(<argument><expr><name pos:line="17" pos:column="41">buf<pos:position pos:line="17" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="46">i<pos:position pos:line="17" pos:column="47"/></name></expr></argument>)<pos:position pos:line="17" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="49"/></expr_stmt>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">i<pos:position pos:line="20" pos:column="10"/></name> <operator pos:line="20" pos:column="11">&gt;<pos:position pos:line="20" pos:column="15"/></operator> <literal type="number" pos:line="20" pos:column="13">0<pos:position pos:line="20" pos:column="14"/></literal> <operator pos:line="20" pos:column="15">&amp;&amp;<pos:position pos:line="20" pos:column="25"/></operator> <call><name pos:line="20" pos:column="18">SSL_pending<pos:position pos:line="20" pos:column="29"/></name><argument_list pos:line="20" pos:column="29">(<argument><expr><name pos:line="20" pos:column="30">ssl<pos:position pos:line="20" pos:column="33"/></name></expr></argument>)<pos:position pos:line="20" pos:column="34"/></argument_list></call> <operator pos:line="20" pos:column="35">&gt;<pos:position pos:line="20" pos:column="39"/></operator> <literal type="number" pos:line="20" pos:column="37">0<pos:position pos:line="20" pos:column="38"/></literal></expr>)<pos:position pos:line="20" pos:column="39"/></condition><then pos:line="20" pos:column="39"> <block pos:line="20" pos:column="40">{
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">debugs<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><literal type="number" pos:line="21" pos:column="16">83<pos:position pos:line="21" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="20">2<pos:position pos:line="21" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="23">"SSL FD "<pos:position pos:line="21" pos:column="32"/></literal> <operator pos:line="21" pos:column="33">&lt;&lt;<pos:position pos:line="21" pos:column="41"/></operator> <name pos:line="21" pos:column="36">fd<pos:position pos:line="21" pos:column="38"/></name> <operator pos:line="21" pos:column="39">&lt;&lt;<pos:position pos:line="21" pos:column="47"/></operator> <literal type="string" pos:line="21" pos:column="42">" is pending"<pos:position pos:line="21" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="57"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="22" pos:column="9">fd_table<pos:position pos:line="22" pos:column="17"/></name><index pos:line="22" pos:column="17">[<expr><name pos:line="22" pos:column="18">fd<pos:position pos:line="22" pos:column="20"/></name></expr>]<pos:position pos:line="22" pos:column="21"/></index></name><operator pos:line="22" pos:column="21">.<pos:position pos:line="22" pos:column="22"/></operator><name><name pos:line="22" pos:column="22">flags<pos:position pos:line="22" pos:column="27"/></name><operator pos:line="22" pos:column="27">.<pos:position pos:line="22" pos:column="28"/></operator><name pos:line="22" pos:column="28">read_pending<pos:position pos:line="22" pos:column="40"/></name></name> <operator pos:line="22" pos:column="41">=<pos:position pos:line="22" pos:column="42"/></operator> <literal type="boolean" pos:line="22" pos:column="43">true<pos:position pos:line="22" pos:column="47"/></literal></expr>;<pos:position pos:line="22" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="23" pos:column="6"/></block></then> <else pos:line="23" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="24" pos:column="9">fd_table<pos:position pos:line="24" pos:column="17"/></name><index pos:line="24" pos:column="17">[<expr><name pos:line="24" pos:column="18">fd<pos:position pos:line="24" pos:column="20"/></name></expr>]<pos:position pos:line="24" pos:column="21"/></index></name><operator pos:line="24" pos:column="21">.<pos:position pos:line="24" pos:column="22"/></operator><name><name pos:line="24" pos:column="22">flags<pos:position pos:line="24" pos:column="27"/></name><operator pos:line="24" pos:column="27">.<pos:position pos:line="24" pos:column="28"/></operator><name pos:line="24" pos:column="28">read_pending<pos:position pos:line="24" pos:column="40"/></name></name> <operator pos:line="24" pos:column="41">=<pos:position pos:line="24" pos:column="42"/></operator> <literal type="boolean" pos:line="24" pos:column="43">false<pos:position pos:line="24" pos:column="48"/></literal></expr>;<pos:position pos:line="24" pos:column="49"/></expr_stmt></block></else></if>

    <return pos:line="26" pos:column="5">return <expr><name pos:line="26" pos:column="12">i<pos:position pos:line="26" pos:column="13"/></name></expr>;<pos:position pos:line="26" pos:column="14"/></return>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
