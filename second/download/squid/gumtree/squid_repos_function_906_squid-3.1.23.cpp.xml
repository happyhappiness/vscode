<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_906_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">comm_write<pos:position pos:line="2" pos:column="11"/></name><parameter_list pos:line="2" pos:column="11">(<parameter><decl><type><name pos:line="2" pos:column="12">int<pos:position pos:line="2" pos:column="15"/></name></type> <name pos:line="2" pos:column="16">fd<pos:position pos:line="2" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="20">const<pos:position pos:line="2" pos:column="25"/></specifier> <name pos:line="2" pos:column="26">char<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type><name pos:line="2" pos:column="32">buf<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="37">int<pos:position pos:line="2" pos:column="40"/></name></type> <name pos:line="2" pos:column="41">size<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="47">IOCB<pos:position pos:line="2" pos:column="51"/></name> <modifier pos:line="2" pos:column="52">*<pos:position pos:line="2" pos:column="53"/></modifier></type> <name pos:line="2" pos:column="54">handler<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="63">void<pos:position pos:line="2" pos:column="67"/></name> <modifier pos:line="2" pos:column="68">*<pos:position pos:line="2" pos:column="69"/></modifier></type><name pos:line="2" pos:column="69">handler_data<pos:position pos:line="2" pos:column="81"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="83">FREE<pos:position pos:line="2" pos:column="87"/></name> <modifier pos:line="2" pos:column="88">*<pos:position pos:line="2" pos:column="89"/></modifier></type> <name pos:line="2" pos:column="90">free_func<pos:position pos:line="2" pos:column="99"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="100"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">AsyncCall<pos:position pos:line="4" pos:column="14"/></name><operator pos:line="4" pos:column="14">::<pos:position pos:line="4" pos:column="16"/></operator><name pos:line="4" pos:column="16">Pointer<pos:position pos:line="4" pos:column="23"/></name></name></type> <name pos:line="4" pos:column="24">call<pos:position pos:line="4" pos:column="28"/></name> <init pos:line="4" pos:column="29">= <expr><call><name pos:line="4" pos:column="31">commCbCall<pos:position pos:line="4" pos:column="41"/></name><argument_list pos:line="4" pos:column="41">(<argument><expr><literal type="number" pos:line="4" pos:column="42">5<pos:position pos:line="4" pos:column="43"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="4" pos:column="44">5<pos:position pos:line="4" pos:column="45"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="47">"SomeCommWriteHander"<pos:position pos:line="4" pos:column="68"/></literal></expr></argument>,
                                         <argument><expr><call><name pos:line="5" pos:column="42">CommIoCbPtrFun<pos:position pos:line="5" pos:column="56"/></name><argument_list pos:line="5" pos:column="56">(<argument><expr><name pos:line="5" pos:column="57">handler<pos:position pos:line="5" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="66">handler_data<pos:position pos:line="5" pos:column="78"/></name></expr></argument>)<pos:position pos:line="5" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="80"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="81"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">comm_write<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><name pos:line="7" pos:column="16">fd<pos:position pos:line="7" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="20">buf<pos:position pos:line="7" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="25">size<pos:position pos:line="7" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="31">call<pos:position pos:line="7" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="37">free_func<pos:position pos:line="7" pos:column="46"/></name></expr></argument>)<pos:position pos:line="7" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="48"/></expr_stmt>
}<pos:position pos:line="8" pos:column="2"/></block></function></unit>
