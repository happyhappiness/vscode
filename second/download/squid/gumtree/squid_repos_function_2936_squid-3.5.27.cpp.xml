<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2936_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">ChunkedCodingParser<pos:position pos:line="1" pos:column="25"/></name><operator pos:line="1" pos:column="25">::<pos:position pos:line="1" pos:column="27"/></operator><name pos:line="1" pos:column="27">parseChunkEnd<pos:position pos:line="1" pos:column="40"/></name></name><parameter_list pos:line="1" pos:column="40">()<pos:position pos:line="1" pos:column="42"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="3" pos:column="5">Must<pos:position pos:line="3" pos:column="9"/></name><argument_list pos:line="3" pos:column="9">(<argument><expr><name pos:line="3" pos:column="10">theLeftBodySize<pos:position pos:line="3" pos:column="25"/></name> <operator pos:line="3" pos:column="26">==<pos:position pos:line="3" pos:column="28"/></operator> <literal type="number" pos:line="3" pos:column="29">0<pos:position pos:line="3" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="32"/></expr_stmt> <comment type="line" pos:line="3" pos:column="33">// Should(), really</comment>

    <decl_stmt><decl><type><name pos:line="5" pos:column="5">size_t<pos:position pos:line="5" pos:column="11"/></name></type> <name pos:line="5" pos:column="12">crlfBeg<pos:position pos:line="5" pos:column="19"/></name> <init pos:line="5" pos:column="20">= <expr><literal type="number" pos:line="5" pos:column="22">0<pos:position pos:line="5" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">size_t<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">crlfEnd<pos:position pos:line="6" pos:column="19"/></name> <init pos:line="6" pos:column="20">= <expr><literal type="number" pos:line="6" pos:column="22">0<pos:position pos:line="6" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><call><name pos:line="8" pos:column="9">findCrlf<pos:position pos:line="8" pos:column="17"/></name><argument_list pos:line="8" pos:column="17">(<argument><expr><name pos:line="8" pos:column="18">crlfBeg<pos:position pos:line="8" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="27">crlfEnd<pos:position pos:line="8" pos:column="34"/></name></expr></argument>)<pos:position pos:line="8" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="36"/></condition><then pos:line="8" pos:column="36"> <block pos:line="8" pos:column="37">{
        <if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">crlfBeg<pos:position pos:line="9" pos:column="20"/></name> <operator pos:line="9" pos:column="21">!=<pos:position pos:line="9" pos:column="23"/></operator> <literal type="number" pos:line="9" pos:column="24">0<pos:position pos:line="9" pos:column="25"/></literal></expr>)<pos:position pos:line="9" pos:column="26"/></condition><then pos:line="9" pos:column="26"> <block pos:line="9" pos:column="27">{
            <throw pos:line="10" pos:column="13">throw <expr><call><name pos:line="10" pos:column="19">TexcHere<pos:position pos:line="10" pos:column="27"/></name><argument_list pos:line="10" pos:column="27">(<argument><expr><literal type="string" pos:line="10" pos:column="28">"found data between chunk end and CRLF"<pos:position pos:line="10" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="69"/></throw>
            <return pos:line="11" pos:column="13">return;<pos:position pos:line="11" pos:column="20"/></return>
        }<pos:position pos:line="12" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name><name pos:line="14" pos:column="9">theIn<pos:position pos:line="14" pos:column="14"/></name><operator pos:line="14" pos:column="14">-&gt;<pos:position pos:line="14" pos:column="19"/></operator><name pos:line="14" pos:column="16">consume<pos:position pos:line="14" pos:column="23"/></name></name><argument_list pos:line="14" pos:column="23">(<argument><expr><name pos:line="14" pos:column="24">crlfEnd<pos:position pos:line="14" pos:column="31"/></name></expr></argument>)<pos:position pos:line="14" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name pos:line="15" pos:column="9">theChunkSize<pos:position pos:line="15" pos:column="21"/></name> <operator pos:line="15" pos:column="22">=<pos:position pos:line="15" pos:column="23"/></operator> <literal type="number" pos:line="15" pos:column="24">0<pos:position pos:line="15" pos:column="25"/></literal></expr>;<pos:position pos:line="15" pos:column="26"/></expr_stmt> <comment type="line" pos:line="15" pos:column="27">// done with the current chunk</comment>
        <expr_stmt><expr><name pos:line="16" pos:column="9">theStep<pos:position pos:line="16" pos:column="16"/></name> <operator pos:line="16" pos:column="17">=<pos:position pos:line="16" pos:column="18"/></operator> <name pos:line="16" pos:column="19">psChunkSize<pos:position pos:line="16" pos:column="30"/></name></expr>;<pos:position pos:line="16" pos:column="31"/></expr_stmt>
        <return pos:line="17" pos:column="9">return;<pos:position pos:line="17" pos:column="16"/></return>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="20" pos:column="5">doNeedMoreData<pos:position pos:line="20" pos:column="19"/></name> <operator pos:line="20" pos:column="20">=<pos:position pos:line="20" pos:column="21"/></operator> <literal type="boolean" pos:line="20" pos:column="22">true<pos:position pos:line="20" pos:column="26"/></literal></expr>;<pos:position pos:line="20" pos:column="27"/></expr_stmt>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
