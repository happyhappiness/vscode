<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6149_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type>
<name><name pos:line="2" pos:column="1">ESIVariableUserAgent<pos:position pos:line="2" pos:column="21"/></name><operator pos:line="2" pos:column="21">::<pos:position pos:line="2" pos:column="23"/></operator><name pos:line="2" pos:column="23">getProductVersion<pos:position pos:line="2" pos:column="40"/></name></name> <parameter_list pos:line="2" pos:column="41">(<parameter><decl><type><name pos:line="2" pos:column="42">char<pos:position pos:line="2" pos:column="46"/></name> <specifier pos:line="2" pos:column="47">const<pos:position pos:line="2" pos:column="52"/></specifier> <modifier pos:line="2" pos:column="53">*<pos:position pos:line="2" pos:column="54"/></modifier></type><name pos:line="2" pos:column="54">s<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="56"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <specifier pos:line="4" pos:column="10">const<pos:position pos:line="4" pos:column="15"/></specifier> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">t<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">len<pos:position pos:line="5" pos:column="12"/></name></decl>;<pos:position pos:line="5" pos:column="13"/></decl_stmt>
    <expr_stmt><expr><name pos:line="6" pos:column="5">t<pos:position pos:line="6" pos:column="6"/></name> <operator pos:line="6" pos:column="7">=<pos:position pos:line="6" pos:column="8"/></operator> <call><name pos:line="6" pos:column="9">index<pos:position pos:line="6" pos:column="14"/></name> <argument_list pos:line="6" pos:column="15">(<argument><expr><name pos:line="6" pos:column="16">s<pos:position pos:line="6" pos:column="17"/></name></expr></argument>,<argument><expr><literal type="char" pos:line="6" pos:column="18">'/'<pos:position pos:line="6" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="23"/></expr_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><operator pos:line="8" pos:column="9">!<pos:position pos:line="8" pos:column="10"/></operator><name pos:line="8" pos:column="10">t<pos:position pos:line="8" pos:column="11"/></name> <operator pos:line="8" pos:column="12">||<pos:position pos:line="8" pos:column="14"/></operator> <operator pos:line="8" pos:column="15">!<pos:position pos:line="8" pos:column="16"/></operator><operator pos:line="8" pos:column="16">*<pos:position pos:line="8" pos:column="17"/></operator><operator pos:line="8" pos:column="17">(<pos:position pos:line="8" pos:column="18"/></operator><operator pos:line="8" pos:column="18">++<pos:position pos:line="8" pos:column="20"/></operator><name pos:line="8" pos:column="20">t<pos:position pos:line="8" pos:column="21"/></name><operator pos:line="8" pos:column="21">)<pos:position pos:line="8" pos:column="22"/></operator></expr>)<pos:position pos:line="8" pos:column="23"/></condition><then pos:line="8" pos:column="23">
        <block type="pseudo"><return pos:line="9" pos:column="9">return <expr><call><name pos:line="9" pos:column="16">xstrdup<pos:position pos:line="9" pos:column="23"/></name> <argument_list pos:line="9" pos:column="24">(<argument><expr><literal type="string" pos:line="9" pos:column="25">""<pos:position pos:line="9" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="29"/></return></block></then></if>

    <expr_stmt><expr><name pos:line="11" pos:column="5">len<pos:position pos:line="11" pos:column="8"/></name> <operator pos:line="11" pos:column="9">=<pos:position pos:line="11" pos:column="10"/></operator> <call><name pos:line="11" pos:column="11">strcspn<pos:position pos:line="11" pos:column="18"/></name> <argument_list pos:line="11" pos:column="19">(<argument><expr><name pos:line="11" pos:column="20">t<pos:position pos:line="11" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="23">" \r\n()&lt;&gt;@,;:\\\"/[]?={}"<pos:position pos:line="11" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="51"/></expr_stmt>

    <return pos:line="13" pos:column="5">return <expr><call><name pos:line="13" pos:column="12">xstrndup<pos:position pos:line="13" pos:column="20"/></name> <argument_list pos:line="13" pos:column="21">(<argument><expr><name pos:line="13" pos:column="22">t<pos:position pos:line="13" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="25">len<pos:position pos:line="13" pos:column="28"/></name> <operator pos:line="13" pos:column="29">+<pos:position pos:line="13" pos:column="30"/></operator> <literal type="number" pos:line="13" pos:column="31">1<pos:position pos:line="13" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="34"/></return>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
