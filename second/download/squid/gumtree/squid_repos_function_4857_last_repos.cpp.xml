<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4857_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Http<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">ContentLengthInterpreter<pos:position pos:line="2" pos:column="31"/></name><operator pos:line="2" pos:column="31">::<pos:position pos:line="2" pos:column="33"/></operator><name pos:line="2" pos:column="33">goodSuffix<pos:position pos:line="2" pos:column="43"/></name></name><parameter_list pos:line="2" pos:column="43">(<parameter><decl><type><specifier pos:line="2" pos:column="44">const<pos:position pos:line="2" pos:column="49"/></specifier> <name pos:line="2" pos:column="50">char<pos:position pos:line="2" pos:column="54"/></name> <modifier pos:line="2" pos:column="55">*<pos:position pos:line="2" pos:column="56"/></modifier></type><name pos:line="2" pos:column="56">suffix<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="64">const<pos:position pos:line="2" pos:column="69"/></specifier> <name pos:line="2" pos:column="70">char<pos:position pos:line="2" pos:column="74"/></name> <modifier pos:line="2" pos:column="75">*<pos:position pos:line="2" pos:column="76"/></modifier> <specifier pos:line="2" pos:column="77">const<pos:position pos:line="2" pos:column="82"/></specifier></type> <name pos:line="2" pos:column="83">end<pos:position pos:line="2" pos:column="86"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="87"/></parameter_list> <specifier pos:line="2" pos:column="88">const<pos:position pos:line="2" pos:column="93"/></specifier>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// optimize for the common case that does not need delimiters</comment>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><name pos:line="5" pos:column="9">suffix<pos:position pos:line="5" pos:column="15"/></name> <operator pos:line="5" pos:column="16">==<pos:position pos:line="5" pos:column="18"/></operator> <name pos:line="5" pos:column="19">end<pos:position pos:line="5" pos:column="22"/></name></expr>)<pos:position pos:line="5" pos:column="23"/></condition><then pos:line="5" pos:column="23">
        <block type="pseudo"><return pos:line="6" pos:column="9">return <expr><literal type="boolean" pos:line="6" pos:column="16">true<pos:position pos:line="6" pos:column="20"/></literal></expr>;<pos:position pos:line="6" pos:column="21"/></return></block></then></if>

    <for pos:line="8" pos:column="5">for <control pos:line="8" pos:column="9">(<init><decl><type><specifier pos:line="8" pos:column="10">const<pos:position pos:line="8" pos:column="15"/></specifier> <name pos:line="8" pos:column="16">CharacterSet<pos:position pos:line="8" pos:column="28"/></name> <modifier pos:line="8" pos:column="29">&amp;<pos:position pos:line="8" pos:column="34"/></modifier></type><name pos:line="8" pos:column="30">delimiters<pos:position pos:line="8" pos:column="40"/></name> <init pos:line="8" pos:column="41">= <expr><call><name><name pos:line="8" pos:column="43">Http<pos:position pos:line="8" pos:column="47"/></name><operator pos:line="8" pos:column="47">::<pos:position pos:line="8" pos:column="49"/></operator><name pos:line="8" pos:column="49">One<pos:position pos:line="8" pos:column="52"/></name><operator pos:line="8" pos:column="52">::<pos:position pos:line="8" pos:column="54"/></operator><name pos:line="8" pos:column="54">Parser<pos:position pos:line="8" pos:column="60"/></name><operator pos:line="8" pos:column="60">::<pos:position pos:line="8" pos:column="62"/></operator><name pos:line="8" pos:column="62">DelimiterCharacters<pos:position pos:line="8" pos:column="81"/></name></name><argument_list pos:line="8" pos:column="81">()<pos:position pos:line="8" pos:column="83"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="84"/></init>
            <condition><expr><name pos:line="9" pos:column="13">suffix<pos:position pos:line="9" pos:column="19"/></name> <operator pos:line="9" pos:column="20">&lt;<pos:position pos:line="9" pos:column="24"/></operator> <name pos:line="9" pos:column="22">end<pos:position pos:line="9" pos:column="25"/></name></expr>;<pos:position pos:line="9" pos:column="26"/></condition> <incr><expr><operator pos:line="9" pos:column="27">++<pos:position pos:line="9" pos:column="29"/></operator><name pos:line="9" pos:column="29">suffix<pos:position pos:line="9" pos:column="35"/></name></expr></incr>)<pos:position pos:line="9" pos:column="36"/></control> <block pos:line="9" pos:column="37">{
        <if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><name><name pos:line="10" pos:column="14">delimiters<pos:position pos:line="10" pos:column="24"/></name><index pos:line="10" pos:column="24">[<expr><operator pos:line="10" pos:column="25">*<pos:position pos:line="10" pos:column="26"/></operator><name pos:line="10" pos:column="26">suffix<pos:position pos:line="10" pos:column="32"/></name></expr>]<pos:position pos:line="10" pos:column="33"/></index></name></expr>)<pos:position pos:line="10" pos:column="34"/></condition><then pos:line="10" pos:column="34">
            <block type="pseudo"><return pos:line="11" pos:column="13">return <expr><literal type="boolean" pos:line="11" pos:column="20">false<pos:position pos:line="11" pos:column="25"/></literal></expr>;<pos:position pos:line="11" pos:column="26"/></return></block></then></if>
    }<pos:position pos:line="12" pos:column="6"/></block></for>
    <comment type="line" pos:line="13" pos:column="5">// needsSanitizing = true; // TODO: Always remove trailing whitespace?</comment>
    <return pos:line="14" pos:column="5">return <expr><literal type="boolean" pos:line="14" pos:column="12">true<pos:position pos:line="14" pos:column="16"/></literal></expr>;<pos:position pos:line="14" pos:column="17"/></return> <comment type="line" pos:line="14" pos:column="18">// including empty suffix</comment>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
