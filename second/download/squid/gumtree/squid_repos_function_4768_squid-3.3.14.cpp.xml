<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4768_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">CossSwapDir<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">readCompleted<pos:position pos:line="2" pos:column="27"/></name></name><parameter_list pos:line="2" pos:column="27">(<parameter><decl><type><specifier pos:line="2" pos:column="28">const<pos:position pos:line="2" pos:column="33"/></specifier> <name pos:line="2" pos:column="34">char<pos:position pos:line="2" pos:column="38"/></name> <modifier pos:line="2" pos:column="39">*<pos:position pos:line="2" pos:column="40"/></modifier></type><name pos:line="2" pos:column="40">buf<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="45">int<pos:position pos:line="2" pos:column="48"/></name></type> <name pos:line="2" pos:column="49">len<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="54">int<pos:position pos:line="2" pos:column="57"/></name></type> <name pos:line="2" pos:column="58">errflag<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="67">RefCount<pos:position pos:line="2" pos:column="75"/></name><argument_list type="generic" pos:line="2" pos:column="75">&lt;<argument><expr><name pos:line="2" pos:column="76">ReadRequest<pos:position pos:line="2" pos:column="87"/></name></expr></argument>&gt;<pos:position pos:line="2" pos:column="91"/></argument_list></name></type> <name pos:line="2" pos:column="89">aRequest<pos:position pos:line="2" pos:column="97"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="98"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">CossRead<pos:position pos:line="4" pos:column="13"/></name><modifier pos:line="4" pos:column="13">*<pos:position pos:line="4" pos:column="14"/></modifier></type> <name pos:line="4" pos:column="15">cossRead<pos:position pos:line="4" pos:column="23"/></name><init pos:line="4" pos:column="23">= <expr><cast type="dynamic" pos:line="4" pos:column="25">dynamic_cast<argument_list type="generic" pos:line="4" pos:column="37">&lt;<argument><expr><name pos:line="4" pos:column="38">CossRead<pos:position pos:line="4" pos:column="46"/></name> <operator pos:line="4" pos:column="47">*<pos:position pos:line="4" pos:column="48"/></operator></expr></argument>&gt;<pos:position pos:line="4" pos:column="52"/></argument_list><argument_list pos:line="4" pos:column="49">(<argument><expr><call><name><name pos:line="4" pos:column="50">aRequest<pos:position pos:line="4" pos:column="58"/></name><operator pos:line="4" pos:column="58">.<pos:position pos:line="4" pos:column="59"/></operator><name pos:line="4" pos:column="59">getRaw<pos:position pos:line="4" pos:column="65"/></name></name><argument_list pos:line="4" pos:column="65">()<pos:position pos:line="4" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="68"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="4" pos:column="69"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name> <argument_list pos:line="5" pos:column="12">(<argument><expr><name pos:line="5" pos:column="13">cossRead<pos:position pos:line="5" pos:column="21"/></name></expr></argument>)<pos:position pos:line="5" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="23"/></expr_stmt>
    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">StoreIOState<pos:position pos:line="6" pos:column="17"/></name><operator pos:line="6" pos:column="17">::<pos:position pos:line="6" pos:column="19"/></operator><name pos:line="6" pos:column="19">Pointer<pos:position pos:line="6" pos:column="26"/></name></name></type> <name pos:line="6" pos:column="27">sio<pos:position pos:line="6" pos:column="30"/></name> <init pos:line="6" pos:column="31">=  <expr><name><name pos:line="6" pos:column="34">cossRead<pos:position pos:line="6" pos:column="42"/></name><operator pos:line="6" pos:column="42">-&gt;<pos:position pos:line="6" pos:column="47"/></operator><name pos:line="6" pos:column="44">sio<pos:position pos:line="6" pos:column="47"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="48"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">void<pos:position pos:line="7" pos:column="9"/></name> <modifier pos:line="7" pos:column="10">*<pos:position pos:line="7" pos:column="11"/></modifier></type><name pos:line="7" pos:column="11">cbdata<pos:position pos:line="7" pos:column="17"/></name></decl>;<pos:position pos:line="7" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="8" pos:column="5">StoreIOState<pos:position pos:line="8" pos:column="17"/></name><operator pos:line="8" pos:column="17">::<pos:position pos:line="8" pos:column="19"/></operator><name pos:line="8" pos:column="19">STRCB<pos:position pos:line="8" pos:column="24"/></name></name> <modifier pos:line="8" pos:column="25">*<pos:position pos:line="8" pos:column="26"/></modifier></type><name pos:line="8" pos:column="26">callback<pos:position pos:line="8" pos:column="34"/></name> <init pos:line="8" pos:column="35">= <expr><name><name pos:line="8" pos:column="37">sio<pos:position pos:line="8" pos:column="40"/></name><operator pos:line="8" pos:column="40">-&gt;<pos:position pos:line="8" pos:column="45"/></operator><name pos:line="8" pos:column="42">read<pos:position pos:line="8" pos:column="46"/></name><operator pos:line="8" pos:column="46">.<pos:position pos:line="8" pos:column="47"/></operator><name pos:line="8" pos:column="47">callback<pos:position pos:line="8" pos:column="55"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="56"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">char<pos:position pos:line="9" pos:column="9"/></name> <modifier pos:line="9" pos:column="10">*<pos:position pos:line="9" pos:column="11"/></modifier></type><name pos:line="9" pos:column="11">p<pos:position pos:line="9" pos:column="12"/></name></decl>;<pos:position pos:line="9" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">CossState<pos:position pos:line="10" pos:column="14"/></name> <modifier pos:line="10" pos:column="15">*<pos:position pos:line="10" pos:column="16"/></modifier></type><name pos:line="10" pos:column="16">cstate<pos:position pos:line="10" pos:column="22"/></name> <init pos:line="10" pos:column="23">= <expr><cast type="dynamic" pos:line="10" pos:column="25">dynamic_cast<argument_list type="generic" pos:line="10" pos:column="37">&lt;<argument><expr><name pos:line="10" pos:column="38">CossState<pos:position pos:line="10" pos:column="47"/></name> <operator pos:line="10" pos:column="48">*<pos:position pos:line="10" pos:column="49"/></operator></expr></argument>&gt;<pos:position pos:line="10" pos:column="53"/></argument_list><argument_list pos:line="10" pos:column="50">(<argument><expr><call><name><name pos:line="10" pos:column="51">sio<pos:position pos:line="10" pos:column="54"/></name><operator pos:line="10" pos:column="54">.<pos:position pos:line="10" pos:column="55"/></operator><name pos:line="10" pos:column="55">getRaw<pos:position pos:line="10" pos:column="61"/></name></name><argument_list pos:line="10" pos:column="61">()<pos:position pos:line="10" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="64"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="10" pos:column="65"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">ssize_t<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">rlen<pos:position pos:line="11" pos:column="17"/></name></decl>;<pos:position pos:line="11" pos:column="18"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="13" pos:column="5">debugs<pos:position pos:line="13" pos:column="11"/></name><argument_list pos:line="13" pos:column="11">(<argument><expr><literal type="number" pos:line="13" pos:column="12">79<pos:position pos:line="13" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="16">3<pos:position pos:line="13" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="19">"storeCossReadDone: fileno "<pos:position pos:line="13" pos:column="47"/></literal> <operator pos:line="13" pos:column="48">&lt;&lt;<pos:position pos:line="13" pos:column="56"/></operator> <name><name pos:line="13" pos:column="51">sio<pos:position pos:line="13" pos:column="54"/></name><operator pos:line="13" pos:column="54">-&gt;<pos:position pos:line="13" pos:column="59"/></operator><name pos:line="13" pos:column="56">swap_filen<pos:position pos:line="13" pos:column="66"/></name></name> <operator pos:line="13" pos:column="67">&lt;&lt;<pos:position pos:line="13" pos:column="75"/></operator> <literal type="string" pos:line="13" pos:column="70">", len "<pos:position pos:line="13" pos:column="78"/></literal> <operator pos:line="13" pos:column="79">&lt;&lt;<pos:position pos:line="13" pos:column="87"/></operator> <name pos:line="13" pos:column="82">len<pos:position pos:line="13" pos:column="85"/></name></expr></argument>)<pos:position pos:line="13" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="87"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="14" pos:column="5">cstate<pos:position pos:line="14" pos:column="11"/></name><operator pos:line="14" pos:column="11">-&gt;<pos:position pos:line="14" pos:column="16"/></operator><name pos:line="14" pos:column="13">flags<pos:position pos:line="14" pos:column="18"/></name><operator pos:line="14" pos:column="18">.<pos:position pos:line="14" pos:column="19"/></operator><name pos:line="14" pos:column="19">reading<pos:position pos:line="14" pos:column="26"/></name></name> <operator pos:line="14" pos:column="27">=<pos:position pos:line="14" pos:column="28"/></operator> <literal type="number" pos:line="14" pos:column="29">0<pos:position pos:line="14" pos:column="30"/></literal></expr>;<pos:position pos:line="14" pos:column="31"/></expr_stmt>

    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name pos:line="16" pos:column="9">errflag<pos:position pos:line="16" pos:column="16"/></name></expr>)<pos:position pos:line="16" pos:column="17"/></condition><then pos:line="16" pos:column="17"> <block pos:line="16" pos:column="18">{
        <expr_stmt><expr><operator pos:line="17" pos:column="9">++<pos:position pos:line="17" pos:column="11"/></operator> <call><name><name pos:line="17" pos:column="12">StoreFScoss<pos:position pos:line="17" pos:column="23"/></name><operator pos:line="17" pos:column="23">::<pos:position pos:line="17" pos:column="25"/></operator><name pos:line="17" pos:column="25">GetInstance<pos:position pos:line="17" pos:column="36"/></name></name><argument_list pos:line="17" pos:column="36">()<pos:position pos:line="17" pos:column="38"/></argument_list></call><operator pos:line="17" pos:column="38">.<pos:position pos:line="17" pos:column="39"/></operator><name><name pos:line="17" pos:column="39">stats<pos:position pos:line="17" pos:column="44"/></name><operator pos:line="17" pos:column="44">.<pos:position pos:line="17" pos:column="45"/></operator><name pos:line="17" pos:column="45">read<pos:position pos:line="17" pos:column="49"/></name><operator pos:line="17" pos:column="49">.<pos:position pos:line="17" pos:column="50"/></operator><name pos:line="17" pos:column="50">fail<pos:position pos:line="17" pos:column="54"/></name></name></expr>;<pos:position pos:line="17" pos:column="55"/></expr_stmt>

        <if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">errflag<pos:position pos:line="19" pos:column="20"/></name> <operator pos:line="19" pos:column="21">&gt;<pos:position pos:line="19" pos:column="25"/></operator> <literal type="number" pos:line="19" pos:column="23">0<pos:position pos:line="19" pos:column="24"/></literal></expr>)<pos:position pos:line="19" pos:column="25"/></condition><then pos:line="19" pos:column="25"> <block pos:line="19" pos:column="26">{
            <expr_stmt><expr><name pos:line="20" pos:column="13">errno<pos:position pos:line="20" pos:column="18"/></name> <operator pos:line="20" pos:column="19">=<pos:position pos:line="20" pos:column="20"/></operator> <name pos:line="20" pos:column="21">errflag<pos:position pos:line="20" pos:column="28"/></name></expr>;<pos:position pos:line="20" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="21" pos:column="13">debugs<pos:position pos:line="21" pos:column="19"/></name><argument_list pos:line="21" pos:column="19">(<argument><expr><literal type="number" pos:line="21" pos:column="20">79<pos:position pos:line="21" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="24">DBG_IMPORTANT<pos:position pos:line="21" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="39">"storeCossReadDone: error: "<pos:position pos:line="21" pos:column="67"/></literal> <operator pos:line="21" pos:column="68">&lt;&lt;<pos:position pos:line="21" pos:column="76"/></operator> <call><name pos:line="21" pos:column="71">xstrerror<pos:position pos:line="21" pos:column="80"/></name><argument_list pos:line="21" pos:column="80">()<pos:position pos:line="21" pos:column="82"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="84"/></expr_stmt>
        }<pos:position pos:line="22" pos:column="10"/></block></then> <else pos:line="22" pos:column="11">else <block pos:line="22" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="23" pos:column="13">debugs<pos:position pos:line="23" pos:column="19"/></name><argument_list pos:line="23" pos:column="19">(<argument><expr><literal type="number" pos:line="23" pos:column="20">79<pos:position pos:line="23" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="24">DBG_IMPORTANT<pos:position pos:line="23" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="39">"storeCossReadDone: got failure ("<pos:position pos:line="23" pos:column="73"/></literal> <operator pos:line="23" pos:column="74">&lt;&lt;<pos:position pos:line="23" pos:column="82"/></operator> <name pos:line="23" pos:column="77">errflag<pos:position pos:line="23" pos:column="84"/></name> <operator pos:line="23" pos:column="85">&lt;&lt;<pos:position pos:line="23" pos:column="93"/></operator> <literal type="string" pos:line="23" pos:column="88">")"<pos:position pos:line="23" pos:column="91"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="93"/></expr_stmt>
        }<pos:position pos:line="24" pos:column="10"/></block></else></if>

        <expr_stmt><expr><name pos:line="26" pos:column="9">rlen<pos:position pos:line="26" pos:column="13"/></name> <operator pos:line="26" pos:column="14">=<pos:position pos:line="26" pos:column="15"/></operator> <operator pos:line="26" pos:column="16">-<pos:position pos:line="26" pos:column="17"/></operator><literal type="number" pos:line="26" pos:column="17">1<pos:position pos:line="26" pos:column="18"/></literal></expr>;<pos:position pos:line="26" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="27" pos:column="6"/></block></then> <else pos:line="27" pos:column="7">else <block pos:line="27" pos:column="12">{
        <expr_stmt><expr><operator pos:line="28" pos:column="9">++<pos:position pos:line="28" pos:column="11"/></operator> <call><name><name pos:line="28" pos:column="12">StoreFScoss<pos:position pos:line="28" pos:column="23"/></name><operator pos:line="28" pos:column="23">::<pos:position pos:line="28" pos:column="25"/></operator><name pos:line="28" pos:column="25">GetInstance<pos:position pos:line="28" pos:column="36"/></name></name><argument_list pos:line="28" pos:column="36">()<pos:position pos:line="28" pos:column="38"/></argument_list></call><operator pos:line="28" pos:column="38">.<pos:position pos:line="28" pos:column="39"/></operator><name><name pos:line="28" pos:column="39">stats<pos:position pos:line="28" pos:column="44"/></name><operator pos:line="28" pos:column="44">.<pos:position pos:line="28" pos:column="45"/></operator><name pos:line="28" pos:column="45">read<pos:position pos:line="28" pos:column="49"/></name><operator pos:line="28" pos:column="49">.<pos:position pos:line="28" pos:column="50"/></operator><name pos:line="28" pos:column="50">success<pos:position pos:line="28" pos:column="57"/></name></name></expr>;<pos:position pos:line="28" pos:column="58"/></expr_stmt>

        <if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name><name pos:line="30" pos:column="13">cstate<pos:position pos:line="30" pos:column="19"/></name><operator pos:line="30" pos:column="19">-&gt;<pos:position pos:line="30" pos:column="24"/></operator><name pos:line="30" pos:column="21">readbuffer<pos:position pos:line="30" pos:column="31"/></name></name> <operator pos:line="30" pos:column="32">==<pos:position pos:line="30" pos:column="34"/></operator> <name pos:line="30" pos:column="35">NULL<pos:position pos:line="30" pos:column="39"/></name></expr>)<pos:position pos:line="30" pos:column="40"/></condition><then pos:line="30" pos:column="40"> <block pos:line="30" pos:column="41">{
            <expr_stmt><expr><name><name pos:line="31" pos:column="13">cstate<pos:position pos:line="31" pos:column="19"/></name><operator pos:line="31" pos:column="19">-&gt;<pos:position pos:line="31" pos:column="24"/></operator><name pos:line="31" pos:column="21">readbuffer<pos:position pos:line="31" pos:column="31"/></name></name> <operator pos:line="31" pos:column="32">=<pos:position pos:line="31" pos:column="33"/></operator> <operator pos:line="31" pos:column="34">(<pos:position pos:line="31" pos:column="35"/></operator><name pos:line="31" pos:column="35">char<pos:position pos:line="31" pos:column="39"/></name> <operator pos:line="31" pos:column="40">*<pos:position pos:line="31" pos:column="41"/></operator><operator pos:line="31" pos:column="41">)<pos:position pos:line="31" pos:column="42"/></operator><call><name pos:line="31" pos:column="42">xmalloc<pos:position pos:line="31" pos:column="49"/></name><argument_list pos:line="31" pos:column="49">(<argument><expr><name><name pos:line="31" pos:column="50">cstate<pos:position pos:line="31" pos:column="56"/></name><operator pos:line="31" pos:column="56">-&gt;<pos:position pos:line="31" pos:column="61"/></operator><name pos:line="31" pos:column="58">st_size<pos:position pos:line="31" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="67"/></expr_stmt>
            <expr_stmt><expr><name pos:line="32" pos:column="13">p<pos:position pos:line="32" pos:column="14"/></name> <operator pos:line="32" pos:column="15">=<pos:position pos:line="32" pos:column="16"/></operator> <call><name pos:line="32" pos:column="17">storeCossMemPointerFromDiskOffset<pos:position pos:line="32" pos:column="50"/></name><argument_list pos:line="32" pos:column="50">(<argument><expr><call><name pos:line="32" pos:column="51">storeCossFilenoToDiskOffset<pos:position pos:line="32" pos:column="78"/></name><argument_list pos:line="32" pos:column="78">(<argument><expr><name><name pos:line="32" pos:column="79">sio<pos:position pos:line="32" pos:column="82"/></name><operator pos:line="32" pos:column="82">-&gt;<pos:position pos:line="32" pos:column="87"/></operator><name pos:line="32" pos:column="84">swap_filen<pos:position pos:line="32" pos:column="94"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="95"/></argument_list></call></expr></argument>,
                                                  <argument><expr><name pos:line="33" pos:column="51">NULL<pos:position pos:line="33" pos:column="55"/></name></expr></argument>)<pos:position pos:line="33" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="57"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="34" pos:column="13">memcpy<pos:position pos:line="34" pos:column="19"/></name><argument_list pos:line="34" pos:column="19">(<argument><expr><name><name pos:line="34" pos:column="20">cstate<pos:position pos:line="34" pos:column="26"/></name><operator pos:line="34" pos:column="26">-&gt;<pos:position pos:line="34" pos:column="31"/></operator><name pos:line="34" pos:column="28">readbuffer<pos:position pos:line="34" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="40">p<pos:position pos:line="34" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="43">cstate<pos:position pos:line="34" pos:column="49"/></name><operator pos:line="34" pos:column="49">-&gt;<pos:position pos:line="34" pos:column="54"/></operator><name pos:line="34" pos:column="51">st_size<pos:position pos:line="34" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="60"/></expr_stmt>
        }<pos:position pos:line="35" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name><name pos:line="37" pos:column="9">sio<pos:position pos:line="37" pos:column="12"/></name><operator pos:line="37" pos:column="12">-&gt;<pos:position pos:line="37" pos:column="17"/></operator><name pos:line="37" pos:column="14">offset_<pos:position pos:line="37" pos:column="21"/></name></name> <operator pos:line="37" pos:column="22">+=<pos:position pos:line="37" pos:column="24"/></operator> <name pos:line="37" pos:column="25">len<pos:position pos:line="37" pos:column="28"/></name></expr>;<pos:position pos:line="37" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="38" pos:column="9">memcpy<pos:position pos:line="38" pos:column="15"/></name><argument_list pos:line="38" pos:column="15">(<argument><expr><name><name pos:line="38" pos:column="16">cstate<pos:position pos:line="38" pos:column="22"/></name><operator pos:line="38" pos:column="22">-&gt;<pos:position pos:line="38" pos:column="27"/></operator><name pos:line="38" pos:column="24">requestbuf<pos:position pos:line="38" pos:column="34"/></name></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="36">&amp;<pos:position pos:line="38" pos:column="41"/></operator><name><name pos:line="38" pos:column="37">cstate<pos:position pos:line="38" pos:column="43"/></name><operator pos:line="38" pos:column="43">-&gt;<pos:position pos:line="38" pos:column="48"/></operator><name pos:line="38" pos:column="45">readbuffer<pos:position pos:line="38" pos:column="55"/></name><index pos:line="38" pos:column="55">[<expr><name><name pos:line="38" pos:column="56">cstate<pos:position pos:line="38" pos:column="62"/></name><operator pos:line="38" pos:column="62">-&gt;<pos:position pos:line="38" pos:column="67"/></operator><name pos:line="38" pos:column="64">requestoffset<pos:position pos:line="38" pos:column="77"/></name></name></expr>]<pos:position pos:line="38" pos:column="78"/></index></name></expr></argument>,
               <argument><expr><name><name pos:line="39" pos:column="16">cstate<pos:position pos:line="39" pos:column="22"/></name><operator pos:line="39" pos:column="22">-&gt;<pos:position pos:line="39" pos:column="27"/></operator><name pos:line="39" pos:column="24">requestlen<pos:position pos:line="39" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><name pos:line="40" pos:column="9">rlen<pos:position pos:line="40" pos:column="13"/></name> <operator pos:line="40" pos:column="14">=<pos:position pos:line="40" pos:column="15"/></operator> <operator pos:line="40" pos:column="16">(<pos:position pos:line="40" pos:column="17"/></operator><name pos:line="40" pos:column="17">size_t<pos:position pos:line="40" pos:column="23"/></name><operator pos:line="40" pos:column="23">)<pos:position pos:line="40" pos:column="24"/></operator> <name><name pos:line="40" pos:column="25">cstate<pos:position pos:line="40" pos:column="31"/></name><operator pos:line="40" pos:column="31">-&gt;<pos:position pos:line="40" pos:column="36"/></operator><name pos:line="40" pos:column="33">requestlen<pos:position pos:line="40" pos:column="43"/></name></name></expr>;<pos:position pos:line="40" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="41" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="43" pos:column="5">assert<pos:position pos:line="43" pos:column="11"/></name><argument_list pos:line="43" pos:column="11">(<argument><expr><name pos:line="43" pos:column="12">callback<pos:position pos:line="43" pos:column="20"/></name></expr></argument>)<pos:position pos:line="43" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="44" pos:column="5">sio<pos:position pos:line="44" pos:column="8"/></name><operator pos:line="44" pos:column="8">-&gt;<pos:position pos:line="44" pos:column="13"/></operator><name pos:line="44" pos:column="10">read<pos:position pos:line="44" pos:column="14"/></name><operator pos:line="44" pos:column="14">.<pos:position pos:line="44" pos:column="15"/></operator><name pos:line="44" pos:column="15">callback<pos:position pos:line="44" pos:column="23"/></name></name> <operator pos:line="44" pos:column="24">=<pos:position pos:line="44" pos:column="25"/></operator> <name pos:line="44" pos:column="26">NULL<pos:position pos:line="44" pos:column="30"/></name></expr>;<pos:position pos:line="44" pos:column="31"/></expr_stmt>

    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><call><name pos:line="46" pos:column="9">cbdataReferenceValidDone<pos:position pos:line="46" pos:column="33"/></name><argument_list pos:line="46" pos:column="33">(<argument><expr><name><name pos:line="46" pos:column="34">sio<pos:position pos:line="46" pos:column="37"/></name><operator pos:line="46" pos:column="37">-&gt;<pos:position pos:line="46" pos:column="42"/></operator><name pos:line="46" pos:column="39">read<pos:position pos:line="46" pos:column="43"/></name><operator pos:line="46" pos:column="43">.<pos:position pos:line="46" pos:column="44"/></operator><name pos:line="46" pos:column="44">callback_data<pos:position pos:line="46" pos:column="57"/></name></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="59">&amp;<pos:position pos:line="46" pos:column="64"/></operator><name pos:line="46" pos:column="60">cbdata<pos:position pos:line="46" pos:column="66"/></name></expr></argument>)<pos:position pos:line="46" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="68"/></condition><then pos:line="46" pos:column="68">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="9">callback<pos:position pos:line="47" pos:column="17"/></name><argument_list pos:line="47" pos:column="17">(<argument><expr><name pos:line="47" pos:column="18">cbdata<pos:position pos:line="47" pos:column="24"/></name></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="26">cstate<pos:position pos:line="47" pos:column="32"/></name><operator pos:line="47" pos:column="32">-&gt;<pos:position pos:line="47" pos:column="37"/></operator><name pos:line="47" pos:column="34">requestbuf<pos:position pos:line="47" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="46">rlen<pos:position pos:line="47" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="52">sio<pos:position pos:line="47" pos:column="55"/></name></expr></argument>)<pos:position pos:line="47" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="57"/></expr_stmt></block></then></if>
}<pos:position pos:line="48" pos:column="2"/></block></function></unit>
