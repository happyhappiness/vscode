<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1279_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">EventScheduler<pos:position pos:line="2" pos:column="15"/></name><operator pos:line="2" pos:column="15">::<pos:position pos:line="2" pos:column="17"/></operator><name pos:line="2" pos:column="17">checkEvents<pos:position pos:line="2" pos:column="28"/></name></name><parameter_list pos:line="2" pos:column="28">(<parameter><decl><type><name pos:line="2" pos:column="29">int<pos:position pos:line="2" pos:column="32"/></name></type> <name pos:line="2" pos:column="33">timeout<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="41"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">result<pos:position pos:line="4" pos:column="15"/></name> <init pos:line="4" pos:column="16">= <expr><call><name pos:line="4" pos:column="18">timeRemaining<pos:position pos:line="4" pos:column="31"/></name><argument_list pos:line="4" pos:column="31">()<pos:position pos:line="4" pos:column="33"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><name pos:line="5" pos:column="9">result<pos:position pos:line="5" pos:column="15"/></name> <operator pos:line="5" pos:column="16">!=<pos:position pos:line="5" pos:column="18"/></operator> <literal type="number" pos:line="5" pos:column="19">0<pos:position pos:line="5" pos:column="20"/></literal></expr>)<pos:position pos:line="5" pos:column="21"/></condition><then pos:line="5" pos:column="21">
        <block type="pseudo"><return pos:line="6" pos:column="9">return <expr><name pos:line="6" pos:column="16">result<pos:position pos:line="6" pos:column="22"/></name></expr>;<pos:position pos:line="6" pos:column="23"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="8" pos:column="5">PROF_start<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><name pos:line="8" pos:column="16">eventRun<pos:position pos:line="8" pos:column="24"/></name></expr></argument>)<pos:position pos:line="8" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="26"/></expr_stmt>

    <do pos:line="10" pos:column="5">do <block pos:line="10" pos:column="8">{
        <decl_stmt><decl><type><name pos:line="11" pos:column="9">ev_entry<pos:position pos:line="11" pos:column="17"/></name> <modifier pos:line="11" pos:column="18">*<pos:position pos:line="11" pos:column="19"/></modifier></type><name pos:line="11" pos:column="19">event<pos:position pos:line="11" pos:column="24"/></name> <init pos:line="11" pos:column="25">= <expr><name pos:line="11" pos:column="27">tasks<pos:position pos:line="11" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="33"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">assert<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><name pos:line="12" pos:column="16">event<pos:position pos:line="12" pos:column="21"/></name></expr></argument>)<pos:position pos:line="12" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="23"/></expr_stmt>

        <comment type="block" pos:line="14" pos:column="9">/* XXX assumes event-&gt;name is static memory! */</comment>
        <decl_stmt><decl><type><name><name pos:line="15" pos:column="9">AsyncCall<pos:position pos:line="15" pos:column="18"/></name><operator pos:line="15" pos:column="18">::<pos:position pos:line="15" pos:column="20"/></operator><name pos:line="15" pos:column="20">Pointer<pos:position pos:line="15" pos:column="27"/></name></name></type> <name pos:line="15" pos:column="28">call<pos:position pos:line="15" pos:column="32"/></name> <init pos:line="15" pos:column="33">= <expr><call><name pos:line="15" pos:column="35">asyncCall<pos:position pos:line="15" pos:column="44"/></name><argument_list pos:line="15" pos:column="44">(<argument><expr><literal type="number" pos:line="15" pos:column="45">41<pos:position pos:line="15" pos:column="47"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="15" pos:column="48">5<pos:position pos:line="15" pos:column="49"/></literal></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="51">event<pos:position pos:line="15" pos:column="56"/></name><operator pos:line="15" pos:column="56">-&gt;<pos:position pos:line="15" pos:column="61"/></operator><name pos:line="15" pos:column="58">name<pos:position pos:line="15" pos:column="62"/></name></name></expr></argument>,
                                            <argument><expr><call><name pos:line="16" pos:column="45">EventDialer<pos:position pos:line="16" pos:column="56"/></name><argument_list pos:line="16" pos:column="56">(<argument><expr><name><name pos:line="16" pos:column="57">event<pos:position pos:line="16" pos:column="62"/></name><operator pos:line="16" pos:column="62">-&gt;<pos:position pos:line="16" pos:column="67"/></operator><name pos:line="16" pos:column="64">func<pos:position pos:line="16" pos:column="68"/></name></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="70">event<pos:position pos:line="16" pos:column="75"/></name><operator pos:line="16" pos:column="75">-&gt;<pos:position pos:line="16" pos:column="80"/></operator><name pos:line="16" pos:column="77">arg<pos:position pos:line="16" pos:column="80"/></name></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="82">event<pos:position pos:line="16" pos:column="87"/></name><operator pos:line="16" pos:column="87">-&gt;<pos:position pos:line="16" pos:column="92"/></operator><name pos:line="16" pos:column="89">cbdata<pos:position pos:line="16" pos:column="95"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="96"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="97"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="98"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">ScheduleCallHere<pos:position pos:line="17" pos:column="25"/></name><argument_list pos:line="17" pos:column="25">(<argument><expr><name pos:line="17" pos:column="26">call<pos:position pos:line="17" pos:column="30"/></name></expr></argument>)<pos:position pos:line="17" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="32"/></expr_stmt>

        <expr_stmt><expr><name pos:line="19" pos:column="9">last_event_ran<pos:position pos:line="19" pos:column="23"/></name> <operator pos:line="19" pos:column="24">=<pos:position pos:line="19" pos:column="25"/></operator> <name><name pos:line="19" pos:column="26">event<pos:position pos:line="19" pos:column="31"/></name><operator pos:line="19" pos:column="31">-&gt;<pos:position pos:line="19" pos:column="36"/></operator><name pos:line="19" pos:column="33">name<pos:position pos:line="19" pos:column="37"/></name></name></expr>;<pos:position pos:line="19" pos:column="38"/></expr_stmt> <comment type="line" pos:line="19" pos:column="39">// XXX: move this to AsyncCallQueue</comment>
        <decl_stmt><decl><type><specifier pos:line="20" pos:column="9">const<pos:position pos:line="20" pos:column="14"/></specifier> <name pos:line="20" pos:column="15">bool<pos:position pos:line="20" pos:column="19"/></name></type> <name pos:line="20" pos:column="20">heavy<pos:position pos:line="20" pos:column="25"/></name> <init pos:line="20" pos:column="26">= <expr><name><name pos:line="20" pos:column="28">event<pos:position pos:line="20" pos:column="33"/></name><operator pos:line="20" pos:column="33">-&gt;<pos:position pos:line="20" pos:column="38"/></operator><name pos:line="20" pos:column="35">weight<pos:position pos:line="20" pos:column="41"/></name></name> <operator pos:line="20" pos:column="42">&amp;&amp;<pos:position pos:line="20" pos:column="52"/></operator>
                           <operator pos:line="21" pos:column="28">(<pos:position pos:line="21" pos:column="29"/></operator><operator pos:line="21" pos:column="29">!<pos:position pos:line="21" pos:column="30"/></operator><name><name pos:line="21" pos:column="30">event<pos:position pos:line="21" pos:column="35"/></name><operator pos:line="21" pos:column="35">-&gt;<pos:position pos:line="21" pos:column="40"/></operator><name pos:line="21" pos:column="37">cbdata<pos:position pos:line="21" pos:column="43"/></name></name> <operator pos:line="21" pos:column="44">||<pos:position pos:line="21" pos:column="46"/></operator> <call><name pos:line="21" pos:column="47">cbdataReferenceValid<pos:position pos:line="21" pos:column="67"/></name><argument_list pos:line="21" pos:column="67">(<argument><expr><name><name pos:line="21" pos:column="68">event<pos:position pos:line="21" pos:column="73"/></name><operator pos:line="21" pos:column="73">-&gt;<pos:position pos:line="21" pos:column="78"/></operator><name pos:line="21" pos:column="75">arg<pos:position pos:line="21" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="79"/></argument_list></call><operator pos:line="21" pos:column="79">)<pos:position pos:line="21" pos:column="80"/></operator></expr></init></decl>;<pos:position pos:line="21" pos:column="81"/></decl_stmt>

        <expr_stmt><expr><name pos:line="23" pos:column="9">tasks<pos:position pos:line="23" pos:column="14"/></name> <operator pos:line="23" pos:column="15">=<pos:position pos:line="23" pos:column="16"/></operator> <name><name pos:line="23" pos:column="17">event<pos:position pos:line="23" pos:column="22"/></name><operator pos:line="23" pos:column="22">-&gt;<pos:position pos:line="23" pos:column="27"/></operator><name pos:line="23" pos:column="24">next<pos:position pos:line="23" pos:column="28"/></name></name></expr>;<pos:position pos:line="23" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="24" pos:column="9">delete<pos:position pos:line="24" pos:column="15"/></operator> <name pos:line="24" pos:column="16">event<pos:position pos:line="24" pos:column="21"/></name></expr>;<pos:position pos:line="24" pos:column="22"/></expr_stmt>

        <expr_stmt><expr><name pos:line="26" pos:column="9">result<pos:position pos:line="26" pos:column="15"/></name> <operator pos:line="26" pos:column="16">=<pos:position pos:line="26" pos:column="17"/></operator> <call><name pos:line="26" pos:column="18">timeRemaining<pos:position pos:line="26" pos:column="31"/></name><argument_list pos:line="26" pos:column="31">()<pos:position pos:line="26" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="34"/></expr_stmt>

        <comment type="line" pos:line="28" pos:column="9">// XXX: We may be called again during the same event loop iteration.</comment>
        <comment type="line" pos:line="29" pos:column="9">// Is there a point in breaking now?</comment>
        <if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name pos:line="30" pos:column="13">heavy<pos:position pos:line="30" pos:column="18"/></name></expr>)<pos:position pos:line="30" pos:column="19"/></condition><then pos:line="30" pos:column="19">
            <block type="pseudo"><break pos:line="31" pos:column="13">break;<pos:position pos:line="31" pos:column="19"/></break></block></then></if> <comment type="line" pos:line="31" pos:column="20">// do not dequeue events following a heavy event</comment>
    }<pos:position pos:line="32" pos:column="6"/></block> while <condition pos:line="32" pos:column="13">(<expr><name pos:line="32" pos:column="14">result<pos:position pos:line="32" pos:column="20"/></name> <operator pos:line="32" pos:column="21">==<pos:position pos:line="32" pos:column="23"/></operator> <literal type="number" pos:line="32" pos:column="24">0<pos:position pos:line="32" pos:column="25"/></literal></expr>)<pos:position pos:line="32" pos:column="26"/></condition>;<pos:position pos:line="32" pos:column="27"/></do>

    <expr_stmt><expr><call><name pos:line="34" pos:column="5">PROF_stop<pos:position pos:line="34" pos:column="14"/></name><argument_list pos:line="34" pos:column="14">(<argument><expr><name pos:line="34" pos:column="15">eventRun<pos:position pos:line="34" pos:column="23"/></name></expr></argument>)<pos:position pos:line="34" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="25"/></expr_stmt>
    <return pos:line="35" pos:column="5">return <expr><name pos:line="35" pos:column="12">result<pos:position pos:line="35" pos:column="18"/></name></expr>;<pos:position pos:line="35" pos:column="19"/></return>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
