<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7183_last_repos.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name><name pos:line="1" pos:column="7">Ipc<pos:position pos:line="1" pos:column="10"/></name><operator pos:line="1" pos:column="10">::<pos:position pos:line="1" pos:column="12"/></operator><name pos:line="1" pos:column="12">MemMap<pos:position pos:line="1" pos:column="18"/></name><operator pos:line="1" pos:column="18">::<pos:position pos:line="1" pos:column="20"/></operator><name pos:line="1" pos:column="20">Slot<pos:position pos:line="1" pos:column="24"/></name></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type>
<name><name pos:line="2" pos:column="1">Ipc<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">MemMap<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">peekAtReader<pos:position pos:line="2" pos:column="26"/></name></name><parameter_list pos:line="2" pos:column="26">(<parameter><decl><type><specifier pos:line="2" pos:column="27">const<pos:position pos:line="2" pos:column="32"/></specifier> <name pos:line="2" pos:column="33">sfileno<pos:position pos:line="2" pos:column="40"/></name></type> <name pos:line="2" pos:column="41">fileno<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="48"/></parameter_list> <specifier pos:line="2" pos:column="49">const<pos:position pos:line="2" pos:column="54"/></specifier>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><call><name pos:line="4" pos:column="12">valid<pos:position pos:line="4" pos:column="17"/></name><argument_list pos:line="4" pos:column="17">(<argument><expr><name pos:line="4" pos:column="18">fileno<pos:position pos:line="4" pos:column="24"/></name></expr></argument>)<pos:position pos:line="4" pos:column="25"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="27"/></expr_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">Slot<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">&amp;<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="17">s<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><name><name pos:line="5" pos:column="21">shared<pos:position pos:line="5" pos:column="27"/></name><operator pos:line="5" pos:column="27">-&gt;<pos:position pos:line="5" pos:column="32"/></operator><name pos:line="5" pos:column="29">slots<pos:position pos:line="5" pos:column="34"/></name><index pos:line="5" pos:column="34">[<expr><name pos:line="5" pos:column="35">fileno<pos:position pos:line="5" pos:column="41"/></name></expr>]<pos:position pos:line="5" pos:column="42"/></index></name></expr></init></decl>;<pos:position pos:line="5" pos:column="43"/></decl_stmt>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><call><name><name pos:line="6" pos:column="9">s<pos:position pos:line="6" pos:column="10"/></name><operator pos:line="6" pos:column="10">.<pos:position pos:line="6" pos:column="11"/></operator><name pos:line="6" pos:column="11">reading<pos:position pos:line="6" pos:column="18"/></name></name><argument_list pos:line="6" pos:column="18">()<pos:position pos:line="6" pos:column="20"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="21"/></condition><then pos:line="6" pos:column="21">
        <block type="pseudo"><return pos:line="7" pos:column="9">return <expr><operator pos:line="7" pos:column="16">&amp;<pos:position pos:line="7" pos:column="21"/></operator><name pos:line="7" pos:column="17">s<pos:position pos:line="7" pos:column="18"/></name></expr>;<pos:position pos:line="7" pos:column="19"/></return></block></then></if> <comment type="line" pos:line="7" pos:column="20">// immediate access by lock holder so no locking</comment>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><call><name><name pos:line="8" pos:column="9">s<pos:position pos:line="8" pos:column="10"/></name><operator pos:line="8" pos:column="10">.<pos:position pos:line="8" pos:column="11"/></operator><name pos:line="8" pos:column="11">writing<pos:position pos:line="8" pos:column="18"/></name></name><argument_list pos:line="8" pos:column="18">()<pos:position pos:line="8" pos:column="20"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="21"/></condition><then pos:line="8" pos:column="21">
        <block type="pseudo"><return pos:line="9" pos:column="9">return <expr><name pos:line="9" pos:column="16">NULL<pos:position pos:line="9" pos:column="20"/></name></expr>;<pos:position pos:line="9" pos:column="21"/></return></block></then></if> <comment type="line" pos:line="9" pos:column="22">// cannot read the slot when it is being written</comment>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">assert<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><literal type="boolean" pos:line="10" pos:column="12">false<pos:position pos:line="10" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="19"/></expr_stmt> <comment type="line" pos:line="10" pos:column="20">// must be locked for reading or writing</comment>
    <return pos:line="11" pos:column="5">return <expr><name pos:line="11" pos:column="12">NULL<pos:position pos:line="11" pos:column="16"/></name></expr>;<pos:position pos:line="11" pos:column="17"/></return>
}<pos:position pos:line="12" pos:column="2"/></block></function></unit>
