<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6079_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">esiWhen<pos:position pos:line="2" pos:column="8"/></name><operator pos:line="2" pos:column="8">::<pos:position pos:line="2" pos:column="10"/></operator><name pos:line="2" pos:column="10">evaluate<pos:position pos:line="2" pos:column="18"/></name></name><parameter_list pos:line="2" pos:column="18">()<pos:position pos:line="2" pos:column="20"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">!<pos:position pos:line="4" pos:column="10"/></operator><name pos:line="4" pos:column="10">unevaluatedExpression<pos:position pos:line="4" pos:column="31"/></name></expr>)<pos:position pos:line="4" pos:column="32"/></condition><then pos:line="4" pos:column="32">
        <block type="pseudo"><return pos:line="5" pos:column="9">return;<pos:position pos:line="5" pos:column="16"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><name pos:line="7" pos:column="12">varState<pos:position pos:line="7" pos:column="20"/></name></expr></argument>)<pos:position pos:line="7" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="22"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="9" pos:column="5">varState<pos:position pos:line="9" pos:column="13"/></name><operator pos:line="9" pos:column="13">-&gt;<pos:position pos:line="9" pos:column="18"/></operator><name pos:line="9" pos:column="15">feedData<pos:position pos:line="9" pos:column="23"/></name></name><argument_list pos:line="9" pos:column="23">(<argument><expr><name pos:line="9" pos:column="24">unevaluatedExpression<pos:position pos:line="9" pos:column="45"/></name></expr></argument>, <argument><expr><call><name pos:line="9" pos:column="47">strlen<pos:position pos:line="9" pos:column="53"/></name> <argument_list pos:line="9" pos:column="54">(<argument><expr><name pos:line="9" pos:column="55">unevaluatedExpression<pos:position pos:line="9" pos:column="76"/></name></expr></argument>)<pos:position pos:line="9" pos:column="77"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="79"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="11" pos:column="5">char<pos:position pos:line="11" pos:column="9"/></name> <specifier pos:line="11" pos:column="10">const<pos:position pos:line="11" pos:column="15"/></specifier> <modifier pos:line="11" pos:column="16">*<pos:position pos:line="11" pos:column="17"/></modifier></type><name pos:line="11" pos:column="17">expression<pos:position pos:line="11" pos:column="27"/></name> <init pos:line="11" pos:column="28">= <expr><call><name><name pos:line="11" pos:column="30">varState<pos:position pos:line="11" pos:column="38"/></name><operator pos:line="11" pos:column="38">-&gt;<pos:position pos:line="11" pos:column="43"/></operator><name pos:line="11" pos:column="40">extractChar<pos:position pos:line="11" pos:column="51"/></name></name> <argument_list pos:line="11" pos:column="52">()<pos:position pos:line="11" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="55"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="13" pos:column="5">setTestResult<pos:position pos:line="13" pos:column="18"/></name><argument_list pos:line="13" pos:column="18">(<argument><expr><call><name><name pos:line="13" pos:column="19">ESIExpression<pos:position pos:line="13" pos:column="32"/></name><operator pos:line="13" pos:column="32">::<pos:position pos:line="13" pos:column="34"/></operator><name pos:line="13" pos:column="34">Evaluate<pos:position pos:line="13" pos:column="42"/></name></name> <argument_list pos:line="13" pos:column="43">(<argument><expr><name pos:line="13" pos:column="44">expression<pos:position pos:line="13" pos:column="54"/></name></expr></argument>)<pos:position pos:line="13" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="57"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="15" pos:column="5">safe_free<pos:position pos:line="15" pos:column="14"/></name> <argument_list pos:line="15" pos:column="15">(<argument><expr><name pos:line="15" pos:column="16">expression<pos:position pos:line="15" pos:column="26"/></name></expr></argument>)<pos:position pos:line="15" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="28"/></expr_stmt>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
