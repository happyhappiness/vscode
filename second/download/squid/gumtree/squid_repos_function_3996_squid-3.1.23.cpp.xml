<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3996_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Icap<pos:position pos:line="1" pos:column="22"/></name><operator pos:line="1" pos:column="22">::<pos:position pos:line="1" pos:column="24"/></operator><name pos:line="1" pos:column="24">Xaction<pos:position pos:line="1" pos:column="31"/></name><operator pos:line="1" pos:column="31">::<pos:position pos:line="1" pos:column="33"/></operator><name pos:line="1" pos:column="33">noteCommRead<pos:position pos:line="1" pos:column="45"/></name></name><parameter_list pos:line="1" pos:column="45">(<parameter><decl><type><specifier pos:line="1" pos:column="46">const<pos:position pos:line="1" pos:column="51"/></specifier> <name pos:line="1" pos:column="52">CommIoCbParams<pos:position pos:line="1" pos:column="66"/></name> <modifier pos:line="1" pos:column="67">&amp;<pos:position pos:line="1" pos:column="72"/></modifier></type><name pos:line="1" pos:column="68">io<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="71"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="3" pos:column="5">Must<pos:position pos:line="3" pos:column="9"/></name><argument_list pos:line="3" pos:column="9">(<argument><expr><name pos:line="3" pos:column="10">reader<pos:position pos:line="3" pos:column="16"/></name> <operator pos:line="3" pos:column="17">!=<pos:position pos:line="3" pos:column="19"/></operator> <name pos:line="3" pos:column="20">NULL<pos:position pos:line="3" pos:column="24"/></name></expr></argument>)<pos:position pos:line="3" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="4" pos:column="5">reader<pos:position pos:line="4" pos:column="11"/></name> <operator pos:line="4" pos:column="12">=<pos:position pos:line="4" pos:column="13"/></operator> <name pos:line="4" pos:column="14">NULL<pos:position pos:line="4" pos:column="18"/></name></expr>;<pos:position pos:line="4" pos:column="19"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="6" pos:column="5">Must<pos:position pos:line="6" pos:column="9"/></name><argument_list pos:line="6" pos:column="9">(<argument><expr><name><name pos:line="6" pos:column="10">io<pos:position pos:line="6" pos:column="12"/></name><operator pos:line="6" pos:column="12">.<pos:position pos:line="6" pos:column="13"/></operator><name pos:line="6" pos:column="13">flag<pos:position pos:line="6" pos:column="17"/></name></name> <operator pos:line="6" pos:column="18">==<pos:position pos:line="6" pos:column="20"/></operator> <name pos:line="6" pos:column="21">COMM_OK<pos:position pos:line="6" pos:column="28"/></name></expr></argument>)<pos:position pos:line="6" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="30"/></expr_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><operator pos:line="8" pos:column="9">!<pos:position pos:line="8" pos:column="10"/></operator><name><name pos:line="8" pos:column="10">io<pos:position pos:line="8" pos:column="12"/></name><operator pos:line="8" pos:column="12">.<pos:position pos:line="8" pos:column="13"/></operator><name pos:line="8" pos:column="13">size<pos:position pos:line="8" pos:column="17"/></name></name></expr>)<pos:position pos:line="8" pos:column="18"/></condition><then pos:line="8" pos:column="18"> <block pos:line="8" pos:column="19">{
        <expr_stmt><expr><name pos:line="9" pos:column="9">commEof<pos:position pos:line="9" pos:column="16"/></name> <operator pos:line="9" pos:column="17">=<pos:position pos:line="9" pos:column="18"/></operator> <literal type="boolean" pos:line="9" pos:column="19">true<pos:position pos:line="9" pos:column="23"/></literal></expr>;<pos:position pos:line="9" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><name pos:line="10" pos:column="9">reuseConnection<pos:position pos:line="10" pos:column="24"/></name> <operator pos:line="10" pos:column="25">=<pos:position pos:line="10" pos:column="26"/></operator> <literal type="boolean" pos:line="10" pos:column="27">false<pos:position pos:line="10" pos:column="32"/></literal></expr>;<pos:position pos:line="10" pos:column="33"/></expr_stmt>

        <comment type="line" pos:line="12" pos:column="9">// detect a pconn race condition: eof on the first pconn read</comment>
        <if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><operator pos:line="13" pos:column="13">!<pos:position pos:line="13" pos:column="14"/></operator><name><name pos:line="13" pos:column="14">al<pos:position pos:line="13" pos:column="16"/></name><operator pos:line="13" pos:column="16">.<pos:position pos:line="13" pos:column="17"/></operator><name pos:line="13" pos:column="17">icap<pos:position pos:line="13" pos:column="21"/></name><operator pos:line="13" pos:column="21">.<pos:position pos:line="13" pos:column="22"/></operator><name pos:line="13" pos:column="22">bytesRead<pos:position pos:line="13" pos:column="31"/></name></name> <operator pos:line="13" pos:column="32">&amp;&amp;<pos:position pos:line="13" pos:column="42"/></operator> <call><name pos:line="13" pos:column="35">retriable<pos:position pos:line="13" pos:column="44"/></name><argument_list pos:line="13" pos:column="44">()<pos:position pos:line="13" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="47"/></condition><then pos:line="13" pos:column="47"> <block pos:line="13" pos:column="48">{
            <expr_stmt><expr><call><name pos:line="14" pos:column="13">setOutcome<pos:position pos:line="14" pos:column="23"/></name><argument_list pos:line="14" pos:column="23">(<argument><expr><name pos:line="14" pos:column="24">xoRace<pos:position pos:line="14" pos:column="30"/></name></expr></argument>)<pos:position pos:line="14" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="32"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="15" pos:column="13">mustStop<pos:position pos:line="15" pos:column="21"/></name><argument_list pos:line="15" pos:column="21">(<argument><expr><literal type="string" pos:line="15" pos:column="22">"pconn race"<pos:position pos:line="15" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="36"/></expr_stmt>
            <return pos:line="16" pos:column="13">return;<pos:position pos:line="16" pos:column="20"/></return>
        }<pos:position pos:line="17" pos:column="10"/></block></then></if>
    }<pos:position pos:line="18" pos:column="6"/></block></then> <else pos:line="18" pos:column="7">else <block pos:line="18" pos:column="12">{

        <expr_stmt><expr><name><name pos:line="20" pos:column="9">al<pos:position pos:line="20" pos:column="11"/></name><operator pos:line="20" pos:column="11">.<pos:position pos:line="20" pos:column="12"/></operator><name pos:line="20" pos:column="12">icap<pos:position pos:line="20" pos:column="16"/></name><operator pos:line="20" pos:column="16">.<pos:position pos:line="20" pos:column="17"/></operator><name pos:line="20" pos:column="17">bytesRead<pos:position pos:line="20" pos:column="26"/></name></name><operator pos:line="20" pos:column="26">+=<pos:position pos:line="20" pos:column="28"/></operator><name><name pos:line="20" pos:column="28">io<pos:position pos:line="20" pos:column="30"/></name><operator pos:line="20" pos:column="30">.<pos:position pos:line="20" pos:column="31"/></operator><name pos:line="20" pos:column="31">size<pos:position pos:line="20" pos:column="35"/></name></name></expr>;<pos:position pos:line="20" pos:column="36"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="22" pos:column="9">updateTimeout<pos:position pos:line="22" pos:column="22"/></name><argument_list pos:line="22" pos:column="22">()<pos:position pos:line="22" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="25"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="24" pos:column="9">debugs<pos:position pos:line="24" pos:column="15"/></name><argument_list pos:line="24" pos:column="15">(<argument><expr><literal type="number" pos:line="24" pos:column="16">93<pos:position pos:line="24" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="20">3<pos:position pos:line="24" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="23">HERE<pos:position pos:line="24" pos:column="27"/></name> <operator pos:line="24" pos:column="28">&lt;&lt;<pos:position pos:line="24" pos:column="36"/></operator> <literal type="string" pos:line="24" pos:column="31">"read "<pos:position pos:line="24" pos:column="38"/></literal> <operator pos:line="24" pos:column="39">&lt;&lt;<pos:position pos:line="24" pos:column="47"/></operator> <name><name pos:line="24" pos:column="42">io<pos:position pos:line="24" pos:column="44"/></name><operator pos:line="24" pos:column="44">.<pos:position pos:line="24" pos:column="45"/></operator><name pos:line="24" pos:column="45">size<pos:position pos:line="24" pos:column="49"/></name></name> <operator pos:line="24" pos:column="50">&lt;&lt;<pos:position pos:line="24" pos:column="58"/></operator> <literal type="string" pos:line="24" pos:column="53">" bytes"<pos:position pos:line="24" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="63"/></expr_stmt>

        <comment type="block" pos:line="26" pos:column="9">/*
         * See comments in Adaptation::Icap::Xaction.h about why we use commBuf
         * here instead of reading directly into readBuf.buf.
         */</comment>

        <expr_stmt><expr><call><name><name pos:line="31" pos:column="9">readBuf<pos:position pos:line="31" pos:column="16"/></name><operator pos:line="31" pos:column="16">.<pos:position pos:line="31" pos:column="17"/></operator><name pos:line="31" pos:column="17">append<pos:position pos:line="31" pos:column="23"/></name></name><argument_list pos:line="31" pos:column="23">(<argument><expr><name pos:line="31" pos:column="24">commBuf<pos:position pos:line="31" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="33">io<pos:position pos:line="31" pos:column="35"/></name><operator pos:line="31" pos:column="35">.<pos:position pos:line="31" pos:column="36"/></operator><name pos:line="31" pos:column="36">size<pos:position pos:line="31" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">disableRetries<pos:position pos:line="32" pos:column="23"/></name><argument_list pos:line="32" pos:column="23">()<pos:position pos:line="32" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="26"/></expr_stmt> <comment type="line" pos:line="32" pos:column="27">// because pconn did not fail</comment>
    }<pos:position pos:line="33" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="35" pos:column="5">handleCommRead<pos:position pos:line="35" pos:column="19"/></name><argument_list pos:line="35" pos:column="19">(<argument><expr><name><name pos:line="35" pos:column="20">io<pos:position pos:line="35" pos:column="22"/></name><operator pos:line="35" pos:column="22">.<pos:position pos:line="35" pos:column="23"/></operator><name pos:line="35" pos:column="23">size<pos:position pos:line="35" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="29"/></expr_stmt>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
