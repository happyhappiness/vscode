<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5296_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">IcmpSquid<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">Open<pos:position pos:line="2" pos:column="16"/></name></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name pos:line="2" pos:column="17">void<pos:position pos:line="2" pos:column="21"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="22"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:if pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">if<pos:position pos:line="4" pos:column="4"/></cpp:directive> <expr><name pos:line="4" pos:column="5">USE_ICMP<pos:position pos:line="4" pos:column="13"/></name></expr></cpp:if>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">char<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name><name pos:line="5" pos:column="17">args<pos:position pos:line="5" pos:column="21"/></name><index pos:line="5" pos:column="21">[<expr><literal type="number" pos:line="5" pos:column="22">2<pos:position pos:line="5" pos:column="23"/></literal></expr>]<pos:position pos:line="5" pos:column="24"/></index></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">rfd<pos:position pos:line="6" pos:column="12"/></name></decl>;<pos:position pos:line="6" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">wfd<pos:position pos:line="7" pos:column="12"/></name></decl>;<pos:position pos:line="7" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">IpAddress<pos:position pos:line="8" pos:column="14"/></name></type> <name pos:line="8" pos:column="15">localhost<pos:position pos:line="8" pos:column="24"/></name></decl>;<pos:position pos:line="8" pos:column="25"/></decl_stmt>

    <comment type="block" pos:line="10" pos:column="5">/* User configured disabled. */</comment>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">!<pos:position pos:line="11" pos:column="10"/></operator><name><name pos:line="11" pos:column="10">Config<pos:position pos:line="11" pos:column="16"/></name><operator pos:line="11" pos:column="16">.<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="17">pinger<pos:position pos:line="11" pos:column="23"/></name><operator pos:line="11" pos:column="23">.<pos:position pos:line="11" pos:column="24"/></operator><name pos:line="11" pos:column="24">enable<pos:position pos:line="11" pos:column="30"/></name></name></expr>)<pos:position pos:line="11" pos:column="31"/></condition><then pos:line="11" pos:column="31"> <block pos:line="11" pos:column="32">{
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">Close<pos:position pos:line="12" pos:column="14"/></name><argument_list pos:line="12" pos:column="14">()<pos:position pos:line="12" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="17"/></expr_stmt>
        <return pos:line="13" pos:column="9">return <expr><operator pos:line="13" pos:column="16">-<pos:position pos:line="13" pos:column="17"/></operator><literal type="number" pos:line="13" pos:column="17">1<pos:position pos:line="13" pos:column="18"/></literal></expr>;<pos:position pos:line="13" pos:column="19"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="16" pos:column="5">args<pos:position pos:line="16" pos:column="9"/></name><index pos:line="16" pos:column="9">[<expr><literal type="number" pos:line="16" pos:column="10">0<pos:position pos:line="16" pos:column="11"/></literal></expr>]<pos:position pos:line="16" pos:column="12"/></index></name> <operator pos:line="16" pos:column="13">=<pos:position pos:line="16" pos:column="14"/></operator> <literal type="string" pos:line="16" pos:column="15">"(pinger)"<pos:position pos:line="16" pos:column="25"/></literal></expr>;<pos:position pos:line="16" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="17" pos:column="5">args<pos:position pos:line="17" pos:column="9"/></name><index pos:line="17" pos:column="9">[<expr><literal type="number" pos:line="17" pos:column="10">1<pos:position pos:line="17" pos:column="11"/></literal></expr>]<pos:position pos:line="17" pos:column="12"/></index></name> <operator pos:line="17" pos:column="13">=<pos:position pos:line="17" pos:column="14"/></operator> <name pos:line="17" pos:column="15">NULL<pos:position pos:line="17" pos:column="19"/></name></expr>;<pos:position pos:line="17" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="18" pos:column="5">localhost<pos:position pos:line="18" pos:column="14"/></name><operator pos:line="18" pos:column="14">.<pos:position pos:line="18" pos:column="15"/></operator><name pos:line="18" pos:column="15">SetLocalhost<pos:position pos:line="18" pos:column="27"/></name></name><argument_list pos:line="18" pos:column="27">()<pos:position pos:line="18" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="30"/></expr_stmt>

    <comment type="block" pos:line="20" pos:column="5">/*
     * Do NOT use IPC_DGRAM (=IPC_UNIX_DGRAM) here because you can't
     * send() more than 4096 bytes on a socketpair() socket (at
     * least on FreeBSD).
     */</comment>
    <expr_stmt><expr><name pos:line="25" pos:column="5">pid<pos:position pos:line="25" pos:column="8"/></name> <operator pos:line="25" pos:column="9">=<pos:position pos:line="25" pos:column="10"/></operator> <call><name pos:line="25" pos:column="11">ipcCreate<pos:position pos:line="25" pos:column="20"/></name><argument_list pos:line="25" pos:column="20">(<argument><expr><name pos:line="25" pos:column="21">IPC_UDP_SOCKET<pos:position pos:line="25" pos:column="35"/></name></expr></argument>,
                    <argument><expr><name><name pos:line="26" pos:column="21">Config<pos:position pos:line="26" pos:column="27"/></name><operator pos:line="26" pos:column="27">.<pos:position pos:line="26" pos:column="28"/></operator><name pos:line="26" pos:column="28">pinger<pos:position pos:line="26" pos:column="34"/></name><operator pos:line="26" pos:column="34">.<pos:position pos:line="26" pos:column="35"/></operator><name pos:line="26" pos:column="35">program<pos:position pos:line="26" pos:column="42"/></name></name></expr></argument>,
                    <argument><expr><name pos:line="27" pos:column="21">args<pos:position pos:line="27" pos:column="25"/></name></expr></argument>,
                    <argument><expr><literal type="string" pos:line="28" pos:column="21">"Pinger Socket"<pos:position pos:line="28" pos:column="36"/></literal></expr></argument>,
                    <argument><expr><name pos:line="29" pos:column="21">localhost<pos:position pos:line="29" pos:column="30"/></name></expr></argument>,
                    <argument><expr><operator pos:line="30" pos:column="21">&amp;<pos:position pos:line="30" pos:column="26"/></operator><name pos:line="30" pos:column="22">rfd<pos:position pos:line="30" pos:column="25"/></name></expr></argument>,
                    <argument><expr><operator pos:line="31" pos:column="21">&amp;<pos:position pos:line="31" pos:column="26"/></operator><name pos:line="31" pos:column="22">wfd<pos:position pos:line="31" pos:column="25"/></name></expr></argument>,
                    <argument><expr><operator pos:line="32" pos:column="21">&amp;<pos:position pos:line="32" pos:column="26"/></operator><name pos:line="32" pos:column="22">hIpc<pos:position pos:line="32" pos:column="26"/></name></expr></argument>)<pos:position pos:line="32" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="28"/></expr_stmt>

    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">(<expr><name pos:line="34" pos:column="9">pid<pos:position pos:line="34" pos:column="12"/></name> <operator pos:line="34" pos:column="13">&lt;<pos:position pos:line="34" pos:column="17"/></operator> <literal type="number" pos:line="34" pos:column="15">0<pos:position pos:line="34" pos:column="16"/></literal></expr>)<pos:position pos:line="34" pos:column="17"/></condition><then pos:line="34" pos:column="17">
        <block type="pseudo"><return pos:line="35" pos:column="9">return <expr><operator pos:line="35" pos:column="16">-<pos:position pos:line="35" pos:column="17"/></operator><literal type="number" pos:line="35" pos:column="17">1<pos:position pos:line="35" pos:column="18"/></literal></expr>;<pos:position pos:line="35" pos:column="19"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="37" pos:column="5">assert<pos:position pos:line="37" pos:column="11"/></name><argument_list pos:line="37" pos:column="11">(<argument><expr><name pos:line="37" pos:column="12">rfd<pos:position pos:line="37" pos:column="15"/></name> <operator pos:line="37" pos:column="16">==<pos:position pos:line="37" pos:column="18"/></operator> <name pos:line="37" pos:column="19">wfd<pos:position pos:line="37" pos:column="22"/></name></expr></argument>)<pos:position pos:line="37" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="24"/></expr_stmt>

    <expr_stmt><expr><name pos:line="39" pos:column="5">icmp_sock<pos:position pos:line="39" pos:column="14"/></name> <operator pos:line="39" pos:column="15">=<pos:position pos:line="39" pos:column="16"/></operator> <name pos:line="39" pos:column="17">rfd<pos:position pos:line="39" pos:column="20"/></name></expr>;<pos:position pos:line="39" pos:column="21"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="41" pos:column="5">fd_note<pos:position pos:line="41" pos:column="12"/></name><argument_list pos:line="41" pos:column="12">(<argument><expr><name pos:line="41" pos:column="13">icmp_sock<pos:position pos:line="41" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="24">"pinger"<pos:position pos:line="41" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="34"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="43" pos:column="5">commSetSelect<pos:position pos:line="43" pos:column="18"/></name><argument_list pos:line="43" pos:column="18">(<argument><expr><name pos:line="43" pos:column="19">icmp_sock<pos:position pos:line="43" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="30">COMM_SELECT_READ<pos:position pos:line="43" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="48">icmpSquidRecv<pos:position pos:line="43" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="63">NULL<pos:position pos:line="43" pos:column="67"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="69">0<pos:position pos:line="43" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="72"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="45" pos:column="5">commSetTimeout<pos:position pos:line="45" pos:column="19"/></name><argument_list pos:line="45" pos:column="19">(<argument><expr><name pos:line="45" pos:column="20">icmp_sock<pos:position pos:line="45" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="31">-<pos:position pos:line="45" pos:column="32"/></operator><literal type="number" pos:line="45" pos:column="32">1<pos:position pos:line="45" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="45" pos:column="35">NULL<pos:position pos:line="45" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="41">NULL<pos:position pos:line="45" pos:column="45"/></name></expr></argument>)<pos:position pos:line="45" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="47"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="47" pos:column="5">debugs<pos:position pos:line="47" pos:column="11"/></name><argument_list pos:line="47" pos:column="11">(<argument><expr><literal type="number" pos:line="47" pos:column="12">37<pos:position pos:line="47" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="16">1<pos:position pos:line="47" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="19">HERE<pos:position pos:line="47" pos:column="23"/></name> <operator pos:line="47" pos:column="24">&lt;&lt;<pos:position pos:line="47" pos:column="32"/></operator> <literal type="string" pos:line="47" pos:column="27">"Pinger socket opened on FD "<pos:position pos:line="47" pos:column="56"/></literal> <operator pos:line="47" pos:column="57">&lt;&lt;<pos:position pos:line="47" pos:column="65"/></operator> <name pos:line="47" pos:column="60">icmp_sock<pos:position pos:line="47" pos:column="69"/></name></expr></argument>)<pos:position pos:line="47" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="71"/></expr_stmt>

    <comment type="block" pos:line="49" pos:column="5">/* Tests the pinger immediately using localhost */</comment>
    <if pos:line="50" pos:column="5">if <condition pos:line="50" pos:column="8">(<expr><name><name pos:line="50" pos:column="9">Ip<pos:position pos:line="50" pos:column="11"/></name><operator pos:line="50" pos:column="11">::<pos:position pos:line="50" pos:column="13"/></operator><name pos:line="50" pos:column="13">EnableIpv6<pos:position pos:line="50" pos:column="23"/></name></name></expr>)<pos:position pos:line="50" pos:column="24"/></condition><then pos:line="50" pos:column="24">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="51" pos:column="9">SendEcho<pos:position pos:line="51" pos:column="17"/></name><argument_list pos:line="51" pos:column="17">(<argument><expr><name pos:line="51" pos:column="18">localhost<pos:position pos:line="51" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="29">S_ICMP_ECHO<pos:position pos:line="51" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="42">"ip6-localhost"<pos:position pos:line="51" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="59"/></expr_stmt></block></then></if>
    <if pos:line="52" pos:column="5">if <condition pos:line="52" pos:column="8">(<expr><call><name><name pos:line="52" pos:column="9">localhost<pos:position pos:line="52" pos:column="18"/></name><operator pos:line="52" pos:column="18">.<pos:position pos:line="52" pos:column="19"/></operator><name pos:line="52" pos:column="19">SetIPv4<pos:position pos:line="52" pos:column="26"/></name></name><argument_list pos:line="52" pos:column="26">()<pos:position pos:line="52" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="29"/></condition><then pos:line="52" pos:column="29">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="53" pos:column="9">SendEcho<pos:position pos:line="53" pos:column="17"/></name><argument_list pos:line="53" pos:column="17">(<argument><expr><name pos:line="53" pos:column="18">localhost<pos:position pos:line="53" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="29">S_ICMP_ECHO<pos:position pos:line="53" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="42">"localhost"<pos:position pos:line="53" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="55"/></expr_stmt></block></then></if>

<cpp:ifdef pos:line="55" pos:column="1">#<cpp:directive pos:line="55" pos:column="2">ifdef<pos:position pos:line="55" pos:column="7"/></cpp:directive> <name pos:line="55" pos:column="8">_SQUID_MSWIN_<pos:position pos:line="55" pos:column="21"/></name></cpp:ifdef>

    <expr_stmt><expr><call><name pos:line="57" pos:column="5">debugs<pos:position pos:line="57" pos:column="11"/></name><argument_list pos:line="57" pos:column="11">(<argument><expr><literal type="number" pos:line="57" pos:column="12">37<pos:position pos:line="57" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="57" pos:column="16">4<pos:position pos:line="57" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="57" pos:column="19">HERE<pos:position pos:line="57" pos:column="23"/></name> <operator pos:line="57" pos:column="24">&lt;&lt;<pos:position pos:line="57" pos:column="32"/></operator> <literal type="string" pos:line="57" pos:column="27">"Pinger handle: 0x"<pos:position pos:line="57" pos:column="46"/></literal> <operator pos:line="57" pos:column="47">&lt;&lt;<pos:position pos:line="57" pos:column="55"/></operator> <name><name pos:line="57" pos:column="50">std<pos:position pos:line="57" pos:column="53"/></name><operator pos:line="57" pos:column="53">::<pos:position pos:line="57" pos:column="55"/></operator><name pos:line="57" pos:column="55">hex<pos:position pos:line="57" pos:column="58"/></name></name> <operator pos:line="57" pos:column="59">&lt;&lt;<pos:position pos:line="57" pos:column="67"/></operator> <name pos:line="57" pos:column="62">hIpc<pos:position pos:line="57" pos:column="66"/></name> <operator pos:line="57" pos:column="67">&lt;&lt;<pos:position pos:line="57" pos:column="75"/></operator> <name><name pos:line="57" pos:column="70">std<pos:position pos:line="57" pos:column="73"/></name><operator pos:line="57" pos:column="73">::<pos:position pos:line="57" pos:column="75"/></operator><name pos:line="57" pos:column="75">dec<pos:position pos:line="57" pos:column="78"/></name></name> <operator pos:line="57" pos:column="79">&lt;&lt;<pos:position pos:line="57" pos:column="87"/></operator> <literal type="string" pos:line="57" pos:column="82">", PID: "<pos:position pos:line="57" pos:column="91"/></literal> <operator pos:line="57" pos:column="92">&lt;&lt;<pos:position pos:line="57" pos:column="100"/></operator> <name pos:line="57" pos:column="95">pid<pos:position pos:line="57" pos:column="98"/></name></expr></argument>)<pos:position pos:line="57" pos:column="99"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="100"/></expr_stmt>

<cpp:endif pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">endif<pos:position pos:line="59" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="59" pos:column="8">/* _SQUID_MSWIN_ */</comment>
    <return pos:line="60" pos:column="5">return <expr><name pos:line="60" pos:column="12">icmp_sock<pos:position pos:line="60" pos:column="21"/></name></expr>;<pos:position pos:line="60" pos:column="22"/></return>
<cpp:else pos:line="61" pos:column="1">#<cpp:directive pos:line="61" pos:column="2">else<pos:position pos:line="61" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="61" pos:column="7">/* USE_ICMP */</comment>
    <return pos:line="62" pos:column="5">return <expr><operator pos:line="62" pos:column="12">-<pos:position pos:line="62" pos:column="13"/></operator><literal type="number" pos:line="62" pos:column="13">1<pos:position pos:line="62" pos:column="14"/></literal></expr>;<pos:position pos:line="62" pos:column="15"/></return>
<cpp:endif pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">endif<pos:position pos:line="63" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="63" pos:column="8">/* USE_ICMP */</comment>
}<pos:position pos:line="64" pos:column="2"/></block></function></unit>
