<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4401_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">Ssl<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">ClientBio<pos:position pos:line="2" pos:column="15"/></name><operator pos:line="2" pos:column="15">::<pos:position pos:line="2" pos:column="17"/></operator><name pos:line="2" pos:column="17">read<pos:position pos:line="2" pos:column="21"/></name></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><name pos:line="2" pos:column="22">char<pos:position pos:line="2" pos:column="26"/></name> <modifier pos:line="2" pos:column="27">*<pos:position pos:line="2" pos:column="28"/></modifier></type><name pos:line="2" pos:column="28">buf<pos:position pos:line="2" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="33">int<pos:position pos:line="2" pos:column="36"/></name></type> <name pos:line="2" pos:column="37">size<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="43">BIO<pos:position pos:line="2" pos:column="46"/></name> <modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier></type><name pos:line="2" pos:column="48">table<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="54"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">abortReason<pos:position pos:line="4" pos:column="20"/></name></expr>)<pos:position pos:line="4" pos:column="21"/></condition><then pos:line="4" pos:column="21"> <block pos:line="4" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="5" pos:column="9">debugs<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">(<argument><expr><literal type="number" pos:line="5" pos:column="16">83<pos:position pos:line="5" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="20">3<pos:position pos:line="5" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="23">"BIO on FD "<pos:position pos:line="5" pos:column="35"/></literal> <operator pos:line="5" pos:column="36">&lt;&lt;<pos:position pos:line="5" pos:column="44"/></operator> <name pos:line="5" pos:column="39">fd_<pos:position pos:line="5" pos:column="42"/></name> <operator pos:line="5" pos:column="43">&lt;&lt;<pos:position pos:line="5" pos:column="51"/></operator> <literal type="string" pos:line="5" pos:column="46">" is aborted"<pos:position pos:line="5" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="61"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="6" pos:column="9">BIO_clear_retry_flags<pos:position pos:line="6" pos:column="30"/></name><argument_list pos:line="6" pos:column="30">(<argument><expr><name pos:line="6" pos:column="31">table<pos:position pos:line="6" pos:column="36"/></name></expr></argument>)<pos:position pos:line="6" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="38"/></expr_stmt>
        <return pos:line="7" pos:column="9">return <expr><operator pos:line="7" pos:column="16">-<pos:position pos:line="7" pos:column="17"/></operator><literal type="number" pos:line="7" pos:column="17">1<pos:position pos:line="7" pos:column="18"/></literal></expr>;<pos:position pos:line="7" pos:column="19"/></return>
    }<pos:position pos:line="8" pos:column="6"/></block></then></if>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">helloState<pos:position pos:line="10" pos:column="19"/></name> <operator pos:line="10" pos:column="20">&lt;<pos:position pos:line="10" pos:column="24"/></operator> <name pos:line="10" pos:column="22">atHelloReceived<pos:position pos:line="10" pos:column="37"/></name></expr>)<pos:position pos:line="10" pos:column="38"/></condition><then pos:line="10" pos:column="38"> <block pos:line="10" pos:column="39">{
        <decl_stmt><decl><type><name pos:line="11" pos:column="9">int<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">bytes<pos:position pos:line="11" pos:column="18"/></name> <init pos:line="11" pos:column="19">= <expr><call><name pos:line="11" pos:column="21">readAndBuffer<pos:position pos:line="11" pos:column="34"/></name><argument_list pos:line="11" pos:column="34">(<argument><expr><name pos:line="11" pos:column="35">buf<pos:position pos:line="11" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="40">size<pos:position pos:line="11" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="46">table<pos:position pos:line="11" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="53">"TLS client Hello"<pos:position pos:line="11" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="72"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="73"/></decl_stmt>
        <if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">bytes<pos:position pos:line="12" pos:column="18"/></name> <operator pos:line="12" pos:column="19">&lt;=<pos:position pos:line="12" pos:column="24"/></operator> <literal type="number" pos:line="12" pos:column="22">0<pos:position pos:line="12" pos:column="23"/></literal></expr>)<pos:position pos:line="12" pos:column="24"/></condition><then pos:line="12" pos:column="24">
            <block type="pseudo"><return pos:line="13" pos:column="13">return <expr><name pos:line="13" pos:column="20">bytes<pos:position pos:line="13" pos:column="25"/></name></expr>;<pos:position pos:line="13" pos:column="26"/></return></block></then></if>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name pos:line="16" pos:column="9">helloState<pos:position pos:line="16" pos:column="19"/></name> <operator pos:line="16" pos:column="20">==<pos:position pos:line="16" pos:column="22"/></operator> <name pos:line="16" pos:column="23">atHelloNone<pos:position pos:line="16" pos:column="34"/></name></expr>)<pos:position pos:line="16" pos:column="35"/></condition><then pos:line="16" pos:column="35"> <block pos:line="16" pos:column="36">{
        <decl_stmt><decl><type><specifier pos:line="17" pos:column="9">const<pos:position pos:line="17" pos:column="14"/></specifier> <name pos:line="17" pos:column="15">int<pos:position pos:line="17" pos:column="18"/></name></type> <name pos:line="17" pos:column="19">helloSize<pos:position pos:line="17" pos:column="28"/></name> <init pos:line="17" pos:column="29">= <expr><call><name><name pos:line="17" pos:column="31">features<pos:position pos:line="17" pos:column="39"/></name><operator pos:line="17" pos:column="39">.<pos:position pos:line="17" pos:column="40"/></operator><name pos:line="17" pos:column="40">parseMsgHead<pos:position pos:line="17" pos:column="52"/></name></name><argument_list pos:line="17" pos:column="52">(<argument><expr><name pos:line="17" pos:column="53">rbuf<pos:position pos:line="17" pos:column="57"/></name></expr></argument>)<pos:position pos:line="17" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="17" pos:column="59"/></decl_stmt>
        <if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">helloSize<pos:position pos:line="18" pos:column="22"/></name> <operator pos:line="18" pos:column="23">==<pos:position pos:line="18" pos:column="25"/></operator> <literal type="number" pos:line="18" pos:column="26">0<pos:position pos:line="18" pos:column="27"/></literal></expr>)<pos:position pos:line="18" pos:column="28"/></condition><then pos:line="18" pos:column="28"> <block pos:line="18" pos:column="29">{
            <comment type="line" pos:line="19" pos:column="13">// Not enough bytes to get hello message size</comment>
            <expr_stmt><expr><call><name pos:line="20" pos:column="13">BIO_set_retry_read<pos:position pos:line="20" pos:column="31"/></name><argument_list pos:line="20" pos:column="31">(<argument><expr><name pos:line="20" pos:column="32">table<pos:position pos:line="20" pos:column="37"/></name></expr></argument>)<pos:position pos:line="20" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="39"/></expr_stmt>
            <return pos:line="21" pos:column="13">return <expr><operator pos:line="21" pos:column="20">-<pos:position pos:line="21" pos:column="21"/></operator><literal type="number" pos:line="21" pos:column="21">1<pos:position pos:line="21" pos:column="22"/></literal></expr>;<pos:position pos:line="21" pos:column="23"/></return>
        }<pos:position pos:line="22" pos:column="10"/></block></then> <elseif pos:line="22" pos:column="11">else <if pos:line="22" pos:column="16">if <condition pos:line="22" pos:column="19">(<expr><name pos:line="22" pos:column="20">helloSize<pos:position pos:line="22" pos:column="29"/></name> <operator pos:line="22" pos:column="30">&lt;<pos:position pos:line="22" pos:column="34"/></operator> <literal type="number" pos:line="22" pos:column="32">0<pos:position pos:line="22" pos:column="33"/></literal></expr>)<pos:position pos:line="22" pos:column="34"/></condition><then pos:line="22" pos:column="34"> <block pos:line="22" pos:column="35">{
            <return pos:line="23" pos:column="13">return <expr><operator pos:line="23" pos:column="20">-<pos:position pos:line="23" pos:column="21"/></operator><literal type="number" pos:line="23" pos:column="21">1<pos:position pos:line="23" pos:column="22"/></literal></expr>;<pos:position pos:line="23" pos:column="23"/></return>
        }<pos:position pos:line="24" pos:column="10"/></block></then></if></elseif></if>

        <expr_stmt><expr><name pos:line="26" pos:column="9">helloState<pos:position pos:line="26" pos:column="19"/></name> <operator pos:line="26" pos:column="20">=<pos:position pos:line="26" pos:column="21"/></operator> <name pos:line="26" pos:column="22">atHelloStarted<pos:position pos:line="26" pos:column="36"/></name></expr>;<pos:position pos:line="26" pos:column="37"/></expr_stmt> <comment type="line" pos:line="26" pos:column="38">//Next state</comment>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>

    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><name pos:line="29" pos:column="9">helloState<pos:position pos:line="29" pos:column="19"/></name> <operator pos:line="29" pos:column="20">==<pos:position pos:line="29" pos:column="22"/></operator> <name pos:line="29" pos:column="23">atHelloStarted<pos:position pos:line="29" pos:column="37"/></name></expr>)<pos:position pos:line="29" pos:column="38"/></condition><then pos:line="29" pos:column="38"> <block pos:line="29" pos:column="39">{
        <decl_stmt><decl><type><specifier pos:line="30" pos:column="9">const<pos:position pos:line="30" pos:column="14"/></specifier> <name pos:line="30" pos:column="15">unsigned<pos:position pos:line="30" pos:column="23"/></name> <name pos:line="30" pos:column="24">char<pos:position pos:line="30" pos:column="28"/></name> <modifier pos:line="30" pos:column="29">*<pos:position pos:line="30" pos:column="30"/></modifier></type><name pos:line="30" pos:column="30">head<pos:position pos:line="30" pos:column="34"/></name> <init pos:line="30" pos:column="35">= <expr><operator pos:line="30" pos:column="37">(<pos:position pos:line="30" pos:column="38"/></operator><specifier pos:line="30" pos:column="38">const<pos:position pos:line="30" pos:column="43"/></specifier> <name pos:line="30" pos:column="44">unsigned<pos:position pos:line="30" pos:column="52"/></name> <name pos:line="30" pos:column="53">char<pos:position pos:line="30" pos:column="57"/></name> <operator pos:line="30" pos:column="58">*<pos:position pos:line="30" pos:column="59"/></operator><operator pos:line="30" pos:column="59">)<pos:position pos:line="30" pos:column="60"/></operator><call><name><name pos:line="30" pos:column="60">rbuf<pos:position pos:line="30" pos:column="64"/></name><operator pos:line="30" pos:column="64">.<pos:position pos:line="30" pos:column="65"/></operator><name pos:line="30" pos:column="65">content<pos:position pos:line="30" pos:column="72"/></name></name><argument_list pos:line="30" pos:column="72">()<pos:position pos:line="30" pos:column="74"/></argument_list></call></expr></init></decl>;<pos:position pos:line="30" pos:column="75"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="31" pos:column="9">const<pos:position pos:line="31" pos:column="14"/></specifier> <name pos:line="31" pos:column="15">char<pos:position pos:line="31" pos:column="19"/></name> <modifier pos:line="31" pos:column="20">*<pos:position pos:line="31" pos:column="21"/></modifier></type><name pos:line="31" pos:column="21">s<pos:position pos:line="31" pos:column="22"/></name> <init pos:line="31" pos:column="23">= <expr><call><name pos:line="31" pos:column="25">objToString<pos:position pos:line="31" pos:column="36"/></name><argument_list pos:line="31" pos:column="36">(<argument><expr><name pos:line="31" pos:column="37">head<pos:position pos:line="31" pos:column="41"/></name></expr></argument>, <argument><expr><call><name><name pos:line="31" pos:column="43">rbuf<pos:position pos:line="31" pos:column="47"/></name><operator pos:line="31" pos:column="47">.<pos:position pos:line="31" pos:column="48"/></operator><name pos:line="31" pos:column="48">contentSize<pos:position pos:line="31" pos:column="59"/></name></name><argument_list pos:line="31" pos:column="59">()<pos:position pos:line="31" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="31" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="31" pos:column="63"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">debugs<pos:position pos:line="32" pos:column="15"/></name><argument_list pos:line="32" pos:column="15">(<argument><expr><literal type="number" pos:line="32" pos:column="16">83<pos:position pos:line="32" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="20">7<pos:position pos:line="32" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="23">"SSL Header: "<pos:position pos:line="32" pos:column="37"/></literal> <operator pos:line="32" pos:column="38">&lt;&lt;<pos:position pos:line="32" pos:column="46"/></operator> <name pos:line="32" pos:column="41">s<pos:position pos:line="32" pos:column="42"/></name></expr></argument>)<pos:position pos:line="32" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="44"/></expr_stmt>

        <if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><operator pos:line="34" pos:column="13">!<pos:position pos:line="34" pos:column="14"/></operator><call><name><name pos:line="34" pos:column="14">features<pos:position pos:line="34" pos:column="22"/></name><operator pos:line="34" pos:column="22">.<pos:position pos:line="34" pos:column="23"/></operator><name pos:line="34" pos:column="23">helloRecord<pos:position pos:line="34" pos:column="34"/></name></name><argument_list pos:line="34" pos:column="34">(<argument><expr><name pos:line="34" pos:column="35">rbuf<pos:position pos:line="34" pos:column="39"/></name></expr></argument>)<pos:position pos:line="34" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="41"/></condition><then pos:line="34" pos:column="41"> <block pos:line="34" pos:column="42">{
            <expr_stmt><expr><call><name pos:line="35" pos:column="13">BIO_set_retry_read<pos:position pos:line="35" pos:column="31"/></name><argument_list pos:line="35" pos:column="31">(<argument><expr><name pos:line="35" pos:column="32">table<pos:position pos:line="35" pos:column="37"/></name></expr></argument>)<pos:position pos:line="35" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="39"/></expr_stmt>
            <return pos:line="36" pos:column="13">return <expr><operator pos:line="36" pos:column="20">-<pos:position pos:line="36" pos:column="21"/></operator><literal type="number" pos:line="36" pos:column="21">1<pos:position pos:line="36" pos:column="22"/></literal></expr>;<pos:position pos:line="36" pos:column="23"/></return>
        }<pos:position pos:line="37" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name><name pos:line="38" pos:column="9">features<pos:position pos:line="38" pos:column="17"/></name><operator pos:line="38" pos:column="17">.<pos:position pos:line="38" pos:column="18"/></operator><name pos:line="38" pos:column="18">get<pos:position pos:line="38" pos:column="21"/></name></name><argument_list pos:line="38" pos:column="21">(<argument><expr><name pos:line="38" pos:column="22">rbuf<pos:position pos:line="38" pos:column="26"/></name></expr></argument>)<pos:position pos:line="38" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="28"/></expr_stmt>
        <expr_stmt><expr><name pos:line="39" pos:column="9">helloState<pos:position pos:line="39" pos:column="19"/></name> <operator pos:line="39" pos:column="20">=<pos:position pos:line="39" pos:column="21"/></operator> <name pos:line="39" pos:column="22">atHelloReceived<pos:position pos:line="39" pos:column="37"/></name></expr>;<pos:position pos:line="39" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="40" pos:column="6"/></block></then></if>

    <if pos:line="42" pos:column="5">if <condition pos:line="42" pos:column="8">(<expr><name pos:line="42" pos:column="9">holdRead_<pos:position pos:line="42" pos:column="18"/></name></expr>)<pos:position pos:line="42" pos:column="19"/></condition><then pos:line="42" pos:column="19"> <block pos:line="42" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="43" pos:column="9">debugs<pos:position pos:line="43" pos:column="15"/></name><argument_list pos:line="43" pos:column="15">(<argument><expr><literal type="number" pos:line="43" pos:column="16">83<pos:position pos:line="43" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="20">7<pos:position pos:line="43" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="23">"Hold flag is set, retry latter. (Hold "<pos:position pos:line="43" pos:column="63"/></literal> <operator pos:line="43" pos:column="64">&lt;&lt;<pos:position pos:line="43" pos:column="72"/></operator> <name pos:line="43" pos:column="67">size<pos:position pos:line="43" pos:column="71"/></name> <operator pos:line="43" pos:column="72">&lt;&lt;<pos:position pos:line="43" pos:column="80"/></operator> <literal type="string" pos:line="43" pos:column="75">"bytes)"<pos:position pos:line="43" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="85"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="44" pos:column="9">BIO_set_retry_read<pos:position pos:line="44" pos:column="27"/></name><argument_list pos:line="44" pos:column="27">(<argument><expr><name pos:line="44" pos:column="28">table<pos:position pos:line="44" pos:column="33"/></name></expr></argument>)<pos:position pos:line="44" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="35"/></expr_stmt>
        <return pos:line="45" pos:column="9">return <expr><operator pos:line="45" pos:column="16">-<pos:position pos:line="45" pos:column="17"/></operator><literal type="number" pos:line="45" pos:column="17">1<pos:position pos:line="45" pos:column="18"/></literal></expr>;<pos:position pos:line="45" pos:column="19"/></return>
    }<pos:position pos:line="46" pos:column="6"/></block></then></if>

    <if pos:line="48" pos:column="5">if <condition pos:line="48" pos:column="8">(<expr><name pos:line="48" pos:column="9">helloState<pos:position pos:line="48" pos:column="19"/></name> <operator pos:line="48" pos:column="20">==<pos:position pos:line="48" pos:column="22"/></operator> <name pos:line="48" pos:column="23">atHelloReceived<pos:position pos:line="48" pos:column="38"/></name></expr>)<pos:position pos:line="48" pos:column="39"/></condition><then pos:line="48" pos:column="39"> <block pos:line="48" pos:column="40">{
        <if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><call><name><name pos:line="49" pos:column="13">rbuf<pos:position pos:line="49" pos:column="17"/></name><operator pos:line="49" pos:column="17">.<pos:position pos:line="49" pos:column="18"/></operator><name pos:line="49" pos:column="18">hasContent<pos:position pos:line="49" pos:column="28"/></name></name><argument_list pos:line="49" pos:column="28">()<pos:position pos:line="49" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="49" pos:column="31"/></condition><then pos:line="49" pos:column="31"> <block pos:line="49" pos:column="32">{
            <decl_stmt><decl><type><name pos:line="50" pos:column="13">int<pos:position pos:line="50" pos:column="16"/></name></type> <name pos:line="50" pos:column="17">bytes<pos:position pos:line="50" pos:column="22"/></name> <init pos:line="50" pos:column="23">= <expr><operator pos:line="50" pos:column="25">(<pos:position pos:line="50" pos:column="26"/></operator><ternary><condition><expr><name pos:line="50" pos:column="26">size<pos:position pos:line="50" pos:column="30"/></name> <operator pos:line="50" pos:column="31">&lt;=<pos:position pos:line="50" pos:column="36"/></operator> <call><name><name pos:line="50" pos:column="34">rbuf<pos:position pos:line="50" pos:column="38"/></name><operator pos:line="50" pos:column="38">.<pos:position pos:line="50" pos:column="39"/></operator><name pos:line="50" pos:column="39">contentSize<pos:position pos:line="50" pos:column="50"/></name></name><argument_list pos:line="50" pos:column="50">()<pos:position pos:line="50" pos:column="52"/></argument_list></call></expr> ?<pos:position pos:line="50" pos:column="54"/></condition><then pos:line="50" pos:column="54"> <expr><name pos:line="50" pos:column="55">size<pos:position pos:line="50" pos:column="59"/></name></expr> <pos:position pos:line="50" pos:column="60"/></then><else pos:line="50" pos:column="60">: <expr><call><name><name pos:line="50" pos:column="62">rbuf<pos:position pos:line="50" pos:column="66"/></name><operator pos:line="50" pos:column="66">.<pos:position pos:line="50" pos:column="67"/></operator><name pos:line="50" pos:column="67">contentSize<pos:position pos:line="50" pos:column="78"/></name></name><argument_list pos:line="50" pos:column="78">()<pos:position pos:line="50" pos:column="80"/></argument_list></call></expr></else></ternary><operator pos:line="50" pos:column="80">)<pos:position pos:line="50" pos:column="81"/></operator></expr></init></decl>;<pos:position pos:line="50" pos:column="82"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="51" pos:column="13">memcpy<pos:position pos:line="51" pos:column="19"/></name><argument_list pos:line="51" pos:column="19">(<argument><expr><name pos:line="51" pos:column="20">buf<pos:position pos:line="51" pos:column="23"/></name></expr></argument>, <argument><expr><call><name><name pos:line="51" pos:column="25">rbuf<pos:position pos:line="51" pos:column="29"/></name><operator pos:line="51" pos:column="29">.<pos:position pos:line="51" pos:column="30"/></operator><name pos:line="51" pos:column="30">content<pos:position pos:line="51" pos:column="37"/></name></name><argument_list pos:line="51" pos:column="37">()<pos:position pos:line="51" pos:column="39"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="51" pos:column="41">bytes<pos:position pos:line="51" pos:column="46"/></name></expr></argument>)<pos:position pos:line="51" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="48"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="52" pos:column="13">rbuf<pos:position pos:line="52" pos:column="17"/></name><operator pos:line="52" pos:column="17">.<pos:position pos:line="52" pos:column="18"/></operator><name pos:line="52" pos:column="18">consume<pos:position pos:line="52" pos:column="25"/></name></name><argument_list pos:line="52" pos:column="25">(<argument><expr><name pos:line="52" pos:column="26">bytes<pos:position pos:line="52" pos:column="31"/></name></expr></argument>)<pos:position pos:line="52" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="33"/></expr_stmt>
            <return pos:line="53" pos:column="13">return <expr><name pos:line="53" pos:column="20">bytes<pos:position pos:line="53" pos:column="25"/></name></expr>;<pos:position pos:line="53" pos:column="26"/></return>
        }<pos:position pos:line="54" pos:column="10"/></block></then> <else pos:line="54" pos:column="11">else
            <block type="pseudo"><return pos:line="55" pos:column="13">return <expr><call><name><name pos:line="55" pos:column="20">Ssl<pos:position pos:line="55" pos:column="23"/></name><operator pos:line="55" pos:column="23">::<pos:position pos:line="55" pos:column="25"/></operator><name pos:line="55" pos:column="25">Bio<pos:position pos:line="55" pos:column="28"/></name><operator pos:line="55" pos:column="28">::<pos:position pos:line="55" pos:column="30"/></operator><name pos:line="55" pos:column="30">read<pos:position pos:line="55" pos:column="34"/></name></name><argument_list pos:line="55" pos:column="34">(<argument><expr><name pos:line="55" pos:column="35">buf<pos:position pos:line="55" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="40">size<pos:position pos:line="55" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="46">table<pos:position pos:line="55" pos:column="51"/></name></expr></argument>)<pos:position pos:line="55" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="53"/></return></block></else></if>
    }<pos:position pos:line="56" pos:column="6"/></block></then></if>

    <return pos:line="58" pos:column="5">return <expr><operator pos:line="58" pos:column="12">-<pos:position pos:line="58" pos:column="13"/></operator><literal type="number" pos:line="58" pos:column="13">1<pos:position pos:line="58" pos:column="14"/></literal></expr>;<pos:position pos:line="58" pos:column="15"/></return>
}<pos:position pos:line="59" pos:column="2"/></block></function></unit>
