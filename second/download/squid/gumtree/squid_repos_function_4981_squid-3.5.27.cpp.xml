<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4981_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Acl<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">InnerNode<pos:position pos:line="2" pos:column="15"/></name><operator pos:line="2" pos:column="15">::<pos:position pos:line="2" pos:column="17"/></operator><name pos:line="2" pos:column="17">resumeMatchingAt<pos:position pos:line="2" pos:column="33"/></name></name><parameter_list pos:line="2" pos:column="33">(<parameter><decl><type><name pos:line="2" pos:column="34">ACLChecklist<pos:position pos:line="2" pos:column="46"/></name> <modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier></type><name pos:line="2" pos:column="48">checklist<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="59">Acl<pos:position pos:line="2" pos:column="62"/></name><operator pos:line="2" pos:column="62">::<pos:position pos:line="2" pos:column="64"/></operator><name pos:line="2" pos:column="64">Nodes<pos:position pos:line="2" pos:column="69"/></name><operator pos:line="2" pos:column="69">::<pos:position pos:line="2" pos:column="71"/></operator><name pos:line="2" pos:column="71">const_iterator<pos:position pos:line="2" pos:column="85"/></name></name></type> <name pos:line="2" pos:column="86">pos<pos:position pos:line="2" pos:column="89"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="90"/></parameter_list> <specifier pos:line="2" pos:column="91">const<pos:position pos:line="2" pos:column="96"/></specifier>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">28<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">5<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="19">"checking "<pos:position pos:line="4" pos:column="30"/></literal> <operator pos:line="4" pos:column="31">&lt;&lt;<pos:position pos:line="4" pos:column="39"/></operator> <name pos:line="4" pos:column="34">name<pos:position pos:line="4" pos:column="38"/></name> <operator pos:line="4" pos:column="39">&lt;&lt;<pos:position pos:line="4" pos:column="47"/></operator> <literal type="string" pos:line="4" pos:column="42">" at "<pos:position pos:line="4" pos:column="48"/></literal> <operator pos:line="4" pos:column="49">&lt;&lt;<pos:position pos:line="4" pos:column="57"/></operator> <operator pos:line="4" pos:column="52">(<pos:position pos:line="4" pos:column="53"/></operator><name pos:line="4" pos:column="53">pos<pos:position pos:line="4" pos:column="56"/></name><operator pos:line="4" pos:column="56">-<pos:position pos:line="4" pos:column="57"/></operator><call><name><name pos:line="4" pos:column="57">nodes<pos:position pos:line="4" pos:column="62"/></name><operator pos:line="4" pos:column="62">.<pos:position pos:line="4" pos:column="63"/></operator><name pos:line="4" pos:column="63">begin<pos:position pos:line="4" pos:column="68"/></name></name><argument_list pos:line="4" pos:column="68">()<pos:position pos:line="4" pos:column="70"/></argument_list></call><operator pos:line="4" pos:column="70">)<pos:position pos:line="4" pos:column="71"/></operator></expr></argument>)<pos:position pos:line="4" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="73"/></expr_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">int<pos:position pos:line="5" pos:column="14"/></name></type> <name pos:line="5" pos:column="15">result<pos:position pos:line="5" pos:column="21"/></name> <init pos:line="5" pos:column="22">= <expr><call><name pos:line="5" pos:column="24">doMatch<pos:position pos:line="5" pos:column="31"/></name><argument_list pos:line="5" pos:column="31">(<argument><expr><name pos:line="5" pos:column="32">checklist<pos:position pos:line="5" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="43">pos<pos:position pos:line="5" pos:column="46"/></name></expr></argument>)<pos:position pos:line="5" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="48"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">char<pos:position pos:line="6" pos:column="15"/></name> <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type><name pos:line="6" pos:column="17">extra<pos:position pos:line="6" pos:column="22"/></name> <init pos:line="6" pos:column="23">= <expr><ternary><condition><expr><call><name><name pos:line="6" pos:column="25">checklist<pos:position pos:line="6" pos:column="34"/></name><operator pos:line="6" pos:column="34">-&gt;<pos:position pos:line="6" pos:column="39"/></operator><name pos:line="6" pos:column="36">asyncInProgress<pos:position pos:line="6" pos:column="51"/></name></name><argument_list pos:line="6" pos:column="51">()<pos:position pos:line="6" pos:column="53"/></argument_list></call></expr> ?<pos:position pos:line="6" pos:column="55"/></condition><then pos:line="6" pos:column="55"> <expr><literal type="string" pos:line="6" pos:column="56">" async"<pos:position pos:line="6" pos:column="64"/></literal></expr> <pos:position pos:line="6" pos:column="65"/></then><else pos:line="6" pos:column="65">: <expr><literal type="string" pos:line="6" pos:column="67">""<pos:position pos:line="6" pos:column="69"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="6" pos:column="70"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">debugs<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><literal type="number" pos:line="7" pos:column="12">28<pos:position pos:line="7" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="16">3<pos:position pos:line="7" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="19">"checked: "<pos:position pos:line="7" pos:column="30"/></literal> <operator pos:line="7" pos:column="31">&lt;&lt;<pos:position pos:line="7" pos:column="39"/></operator> <name pos:line="7" pos:column="34">name<pos:position pos:line="7" pos:column="38"/></name> <operator pos:line="7" pos:column="39">&lt;&lt;<pos:position pos:line="7" pos:column="47"/></operator> <literal type="string" pos:line="7" pos:column="42">" = "<pos:position pos:line="7" pos:column="47"/></literal> <operator pos:line="7" pos:column="48">&lt;&lt;<pos:position pos:line="7" pos:column="56"/></operator> <name pos:line="7" pos:column="51">result<pos:position pos:line="7" pos:column="57"/></name> <operator pos:line="7" pos:column="58">&lt;&lt;<pos:position pos:line="7" pos:column="66"/></operator> <name pos:line="7" pos:column="61">extra<pos:position pos:line="7" pos:column="66"/></name></expr></argument>)<pos:position pos:line="7" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="68"/></expr_stmt>

    <comment type="line" pos:line="9" pos:column="5">// merges async and failures (-1) into "not matched"</comment>
    <return pos:line="10" pos:column="5">return <expr><name pos:line="10" pos:column="12">result<pos:position pos:line="10" pos:column="18"/></name> <operator pos:line="10" pos:column="19">==<pos:position pos:line="10" pos:column="21"/></operator> <literal type="number" pos:line="10" pos:column="22">1<pos:position pos:line="10" pos:column="23"/></literal></expr>;<pos:position pos:line="10" pos:column="24"/></return>
}<pos:position pos:line="11" pos:column="2"/></block></function></unit>
