<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1130_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">downloaderRecipient<pos:position pos:line="2" pos:column="20"/></name><parameter_list pos:line="2" pos:column="20">(<parameter><decl><type><name pos:line="2" pos:column="21">clientStreamNode<pos:position pos:line="2" pos:column="37"/></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type> <name pos:line="2" pos:column="40">node<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="46">ClientHttpRequest<pos:position pos:line="2" pos:column="63"/></name> <modifier pos:line="2" pos:column="64">*<pos:position pos:line="2" pos:column="65"/></modifier></type> <name pos:line="2" pos:column="66">http<pos:position pos:line="2" pos:column="70"/></name></decl></parameter>,
                    <parameter><decl><type><name pos:line="3" pos:column="21">HttpReply<pos:position pos:line="3" pos:column="30"/></name> <modifier pos:line="3" pos:column="31">*<pos:position pos:line="3" pos:column="32"/></modifier></type> <name pos:line="3" pos:column="33">rep<pos:position pos:line="3" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="38">StoreIOBuffer<pos:position pos:line="3" pos:column="51"/></name></type> <name pos:line="3" pos:column="52">receivedData<pos:position pos:line="3" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="65"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">debugs<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><literal type="number" pos:line="5" pos:column="12">33<pos:position pos:line="5" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="16">6<pos:position pos:line="5" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="5" pos:column="19">MYNAME<pos:position pos:line="5" pos:column="25"/></name></expr></argument>)<pos:position pos:line="5" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="27"/></expr_stmt>
    <comment type="block" pos:line="6" pos:column="5">/* Test preconditions */</comment>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><name pos:line="7" pos:column="12">node<pos:position pos:line="7" pos:column="16"/></name></expr></argument>)<pos:position pos:line="7" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="18"/></expr_stmt>

    <comment type="block" pos:line="9" pos:column="5">/* TODO: handle this rather than asserting
     * - it should only ever happen if we cause an abort and
     * the callback chain loops back to here, so we can simply return.
     * However, that itself shouldn't happen, so it stays as an assert for now.
     */</comment>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">assert<pos:position pos:line="14" pos:column="11"/></name><argument_list pos:line="14" pos:column="11">(<argument><expr><call><name pos:line="14" pos:column="12">cbdataReferenceValid<pos:position pos:line="14" pos:column="32"/></name><argument_list pos:line="14" pos:column="32">(<argument><expr><name pos:line="14" pos:column="33">node<pos:position pos:line="14" pos:column="37"/></name></expr></argument>)<pos:position pos:line="14" pos:column="38"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">assert<pos:position pos:line="15" pos:column="11"/></name><argument_list pos:line="15" pos:column="11">(<argument><expr><operator pos:line="15" pos:column="12">!<pos:position pos:line="15" pos:column="13"/></operator><name><name pos:line="15" pos:column="13">node<pos:position pos:line="15" pos:column="17"/></name><operator pos:line="15" pos:column="17">-&gt;<pos:position pos:line="15" pos:column="22"/></operator><name pos:line="15" pos:column="19">node<pos:position pos:line="15" pos:column="23"/></name><operator pos:line="15" pos:column="23">.<pos:position pos:line="15" pos:column="24"/></operator><name pos:line="15" pos:column="24">next<pos:position pos:line="15" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="30"/></expr_stmt>
    <decl_stmt><decl><type><name><name pos:line="16" pos:column="5">DownloaderContext<pos:position pos:line="16" pos:column="22"/></name><operator pos:line="16" pos:column="22">::<pos:position pos:line="16" pos:column="24"/></operator><name pos:line="16" pos:column="24">Pointer<pos:position pos:line="16" pos:column="31"/></name></name></type> <name pos:line="16" pos:column="32">context<pos:position pos:line="16" pos:column="39"/></name> <init pos:line="16" pos:column="40">= <expr><cast type="dynamic" pos:line="16" pos:column="42">dynamic_cast<argument_list type="generic" pos:line="16" pos:column="54">&lt;<argument><expr><name pos:line="16" pos:column="55">DownloaderContext<pos:position pos:line="16" pos:column="72"/></name> <operator pos:line="16" pos:column="73">*<pos:position pos:line="16" pos:column="74"/></operator></expr></argument>&gt;<pos:position pos:line="16" pos:column="78"/></argument_list><argument_list pos:line="16" pos:column="75">(<argument><expr><call><name><name pos:line="16" pos:column="76">node<pos:position pos:line="16" pos:column="80"/></name><operator pos:line="16" pos:column="80">-&gt;<pos:position pos:line="16" pos:column="85"/></operator><name pos:line="16" pos:column="82">data<pos:position pos:line="16" pos:column="86"/></name><operator pos:line="16" pos:column="86">.<pos:position pos:line="16" pos:column="87"/></operator><name pos:line="16" pos:column="87">getRaw<pos:position pos:line="16" pos:column="93"/></name></name><argument_list pos:line="16" pos:column="93">()<pos:position pos:line="16" pos:column="95"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="96"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="16" pos:column="97"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">assert<pos:position pos:line="17" pos:column="11"/></name><argument_list pos:line="17" pos:column="11">(<argument><expr><name pos:line="17" pos:column="12">context<pos:position pos:line="17" pos:column="19"/></name></expr></argument>)<pos:position pos:line="17" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="21"/></expr_stmt>

    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><call><name><name pos:line="19" pos:column="9">context<pos:position pos:line="19" pos:column="16"/></name><operator pos:line="19" pos:column="16">-&gt;<pos:position pos:line="19" pos:column="21"/></operator><name pos:line="19" pos:column="18">downloader<pos:position pos:line="19" pos:column="28"/></name><operator pos:line="19" pos:column="28">.<pos:position pos:line="19" pos:column="29"/></operator><name pos:line="19" pos:column="29">valid<pos:position pos:line="19" pos:column="34"/></name></name><argument_list pos:line="19" pos:column="34">()<pos:position pos:line="19" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="37"/></condition><then pos:line="19" pos:column="37">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="20" pos:column="9">context<pos:position pos:line="20" pos:column="16"/></name><operator pos:line="20" pos:column="16">-&gt;<pos:position pos:line="20" pos:column="21"/></operator><name pos:line="20" pos:column="18">downloader<pos:position pos:line="20" pos:column="28"/></name><operator pos:line="20" pos:column="28">-&gt;<pos:position pos:line="20" pos:column="33"/></operator><name pos:line="20" pos:column="30">handleReply<pos:position pos:line="20" pos:column="41"/></name></name><argument_list pos:line="20" pos:column="41">(<argument><expr><name pos:line="20" pos:column="42">node<pos:position pos:line="20" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="48">http<pos:position pos:line="20" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="54">rep<pos:position pos:line="20" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="59">receivedData<pos:position pos:line="20" pos:column="71"/></name></expr></argument>)<pos:position pos:line="20" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="73"/></expr_stmt></block></then></if>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
