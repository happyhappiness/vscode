<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3219_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">IdleConnList<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">push<pos:position pos:line="2" pos:column="19"/></name></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name pos:line="2" pos:column="20">int<pos:position pos:line="2" pos:column="23"/></name></type> <name pos:line="2" pos:column="24">fd<pos:position pos:line="2" pos:column="26"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="27"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">nfds<pos:position pos:line="4" pos:column="13"/></name> <operator pos:line="4" pos:column="14">==<pos:position pos:line="4" pos:column="16"/></operator> <name pos:line="4" pos:column="17">nfds_alloc<pos:position pos:line="4" pos:column="27"/></name></expr>)<pos:position pos:line="4" pos:column="28"/></condition><then pos:line="4" pos:column="28"> <block pos:line="4" pos:column="29">{
        <expr_stmt><expr><call><name pos:line="5" pos:column="9">debugs<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">(<argument><expr><literal type="number" pos:line="5" pos:column="16">48<pos:position pos:line="5" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="20">3<pos:position pos:line="5" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="23">"IdleConnList::push: growing FD array"<pos:position pos:line="5" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="63"/></expr_stmt>
        <expr_stmt><expr><name pos:line="6" pos:column="9">nfds_alloc<pos:position pos:line="6" pos:column="19"/></name> <operator pos:line="6" pos:column="20">&lt;&lt;=<pos:position pos:line="6" pos:column="29"/></operator> <literal type="number" pos:line="6" pos:column="24">1<pos:position pos:line="6" pos:column="25"/></literal></expr>;<pos:position pos:line="6" pos:column="26"/></expr_stmt>
        <decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name> <modifier pos:line="7" pos:column="13">*<pos:position pos:line="7" pos:column="14"/></modifier></type><name pos:line="7" pos:column="14">old<pos:position pos:line="7" pos:column="17"/></name> <init pos:line="7" pos:column="18">= <expr><name pos:line="7" pos:column="20">fds<pos:position pos:line="7" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>
        <expr_stmt><expr><name pos:line="8" pos:column="9">fds<pos:position pos:line="8" pos:column="12"/></name> <operator pos:line="8" pos:column="13">=<pos:position pos:line="8" pos:column="14"/></operator> <operator pos:line="8" pos:column="15">(<pos:position pos:line="8" pos:column="16"/></operator><name pos:line="8" pos:column="16">int<pos:position pos:line="8" pos:column="19"/></name> <operator pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></operator><operator pos:line="8" pos:column="21">)<pos:position pos:line="8" pos:column="22"/></operator><call><name pos:line="8" pos:column="22">xmalloc<pos:position pos:line="8" pos:column="29"/></name><argument_list pos:line="8" pos:column="29">(<argument><expr><name pos:line="8" pos:column="30">nfds_alloc<pos:position pos:line="8" pos:column="40"/></name> <operator pos:line="8" pos:column="41">*<pos:position pos:line="8" pos:column="42"/></operator> <sizeof pos:line="8" pos:column="43">sizeof<argument_list pos:line="8" pos:column="49">(<argument><expr><name pos:line="8" pos:column="50">int<pos:position pos:line="8" pos:column="53"/></name></expr></argument>)<pos:position pos:line="8" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="8" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="56"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">xmemcpy<pos:position pos:line="9" pos:column="16"/></name><argument_list pos:line="9" pos:column="16">(<argument><expr><name pos:line="9" pos:column="17">fds<pos:position pos:line="9" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="22">old<pos:position pos:line="9" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="27">nfds<pos:position pos:line="9" pos:column="31"/></name> <operator pos:line="9" pos:column="32">*<pos:position pos:line="9" pos:column="33"/></operator> <sizeof pos:line="9" pos:column="34">sizeof<argument_list pos:line="9" pos:column="40">(<argument><expr><name pos:line="9" pos:column="41">int<pos:position pos:line="9" pos:column="44"/></name></expr></argument>)<pos:position pos:line="9" pos:column="45"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="47"/></expr_stmt>

        <if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">nfds<pos:position pos:line="11" pos:column="17"/></name> <operator pos:line="11" pos:column="18">==<pos:position pos:line="11" pos:column="20"/></operator> <name pos:line="11" pos:column="21">PCONN_FDS_SZ<pos:position pos:line="11" pos:column="33"/></name></expr>)<pos:position pos:line="11" pos:column="34"/></condition><then pos:line="11" pos:column="34">
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="12" pos:column="13">pconn_fds_pool<pos:position pos:line="12" pos:column="27"/></name><operator pos:line="12" pos:column="27">-&gt;<pos:position pos:line="12" pos:column="32"/></operator><name pos:line="12" pos:column="29">free<pos:position pos:line="12" pos:column="33"/></name></name><argument_list pos:line="12" pos:column="33">(<argument><expr><name pos:line="12" pos:column="34">old<pos:position pos:line="12" pos:column="37"/></name></expr></argument>)<pos:position pos:line="12" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="39"/></expr_stmt></block></then>
        <else pos:line="13" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="13">xfree<pos:position pos:line="14" pos:column="18"/></name><argument_list pos:line="14" pos:column="18">(<argument><expr><name pos:line="14" pos:column="19">old<pos:position pos:line="14" pos:column="22"/></name></expr></argument>)<pos:position pos:line="14" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="24"/></expr_stmt></block></else></if>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="17" pos:column="5">fds<pos:position pos:line="17" pos:column="8"/></name><index pos:line="17" pos:column="8">[<expr><name pos:line="17" pos:column="9">nfds<pos:position pos:line="17" pos:column="13"/></name><operator pos:line="17" pos:column="13">++<pos:position pos:line="17" pos:column="15"/></operator></expr>]<pos:position pos:line="17" pos:column="16"/></index></name> <operator pos:line="17" pos:column="17">=<pos:position pos:line="17" pos:column="18"/></operator> <name pos:line="17" pos:column="19">fd<pos:position pos:line="17" pos:column="21"/></name></expr>;<pos:position pos:line="17" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">comm_read<pos:position pos:line="18" pos:column="14"/></name><argument_list pos:line="18" pos:column="14">(<argument><expr><name pos:line="18" pos:column="15">fd<pos:position pos:line="18" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="19">fakeReadBuf<pos:position pos:line="18" pos:column="30"/></name></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="32">sizeof<argument_list pos:line="18" pos:column="38">(<argument><expr><name pos:line="18" pos:column="39">fakeReadBuf<pos:position pos:line="18" pos:column="50"/></name></expr></argument>)<pos:position pos:line="18" pos:column="51"/></argument_list></sizeof></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="53">IdleConnList<pos:position pos:line="18" pos:column="65"/></name><operator pos:line="18" pos:column="65">::<pos:position pos:line="18" pos:column="67"/></operator><name pos:line="18" pos:column="67">read<pos:position pos:line="18" pos:column="71"/></name></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="73">this<pos:position pos:line="18" pos:column="77"/></name></expr></argument>)<pos:position pos:line="18" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="79"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">commSetTimeout<pos:position pos:line="19" pos:column="19"/></name><argument_list pos:line="19" pos:column="19">(<argument><expr><name pos:line="19" pos:column="20">fd<pos:position pos:line="19" pos:column="22"/></name></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="24">Config<pos:position pos:line="19" pos:column="30"/></name><operator pos:line="19" pos:column="30">.<pos:position pos:line="19" pos:column="31"/></operator><name pos:line="19" pos:column="31">Timeout<pos:position pos:line="19" pos:column="38"/></name><operator pos:line="19" pos:column="38">.<pos:position pos:line="19" pos:column="39"/></operator><name pos:line="19" pos:column="39">pconn<pos:position pos:line="19" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="46">IdleConnList<pos:position pos:line="19" pos:column="58"/></name><operator pos:line="19" pos:column="58">::<pos:position pos:line="19" pos:column="60"/></operator><name pos:line="19" pos:column="60">timeout<pos:position pos:line="19" pos:column="67"/></name></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="69">this<pos:position pos:line="19" pos:column="73"/></name></expr></argument>)<pos:position pos:line="19" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="75"/></expr_stmt>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
