<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6290_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type>
<name pos:line="2" pos:column="1">squidaio_thread_loop<pos:position pos:line="2" pos:column="21"/></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><name pos:line="2" pos:column="22">void<pos:position pos:line="2" pos:column="26"/></name> <modifier pos:line="2" pos:column="27">*<pos:position pos:line="2" pos:column="28"/></modifier></type><name pos:line="2" pos:column="28">ptr<pos:position pos:line="2" pos:column="31"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="32"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">squidaio_thread_t<pos:position pos:line="4" pos:column="22"/></name> <modifier pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></modifier></type><name pos:line="4" pos:column="24">threadp<pos:position pos:line="4" pos:column="31"/></name> <init pos:line="4" pos:column="32">= <expr><operator pos:line="4" pos:column="34">(<pos:position pos:line="4" pos:column="35"/></operator><name pos:line="4" pos:column="35">squidaio_thread_t<pos:position pos:line="4" pos:column="52"/></name> <operator pos:line="4" pos:column="53">*<pos:position pos:line="4" pos:column="54"/></operator><operator pos:line="4" pos:column="54">)<pos:position pos:line="4" pos:column="55"/></operator><name pos:line="4" pos:column="55">ptr<pos:position pos:line="4" pos:column="58"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="59"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">squidaio_request_t<pos:position pos:line="5" pos:column="23"/></name> <modifier pos:line="5" pos:column="24">*<pos:position pos:line="5" pos:column="25"/></modifier></type><name pos:line="5" pos:column="25">request<pos:position pos:line="5" pos:column="32"/></name></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">sigset_t<pos:position pos:line="6" pos:column="13"/></name></type> <name pos:line="6" pos:column="14">newSig<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>

    <comment type="block" pos:line="8" pos:column="5">/*
     * Make sure to ignore signals which may possibly get sent to
     * the parent squid thread.  Causes havoc with mutex's and
     * condition waits otherwise
     */</comment>

    <expr_stmt><expr><call><name pos:line="14" pos:column="5">sigemptyset<pos:position pos:line="14" pos:column="16"/></name><argument_list pos:line="14" pos:column="16">(<argument><expr><operator pos:line="14" pos:column="17">&amp;<pos:position pos:line="14" pos:column="22"/></operator><name pos:line="14" pos:column="18">newSig<pos:position pos:line="14" pos:column="24"/></name></expr></argument>)<pos:position pos:line="14" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">sigaddset<pos:position pos:line="15" pos:column="14"/></name><argument_list pos:line="15" pos:column="14">(<argument><expr><operator pos:line="15" pos:column="15">&amp;<pos:position pos:line="15" pos:column="20"/></operator><name pos:line="15" pos:column="16">newSig<pos:position pos:line="15" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="24">SIGPIPE<pos:position pos:line="15" pos:column="31"/></name></expr></argument>)<pos:position pos:line="15" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">sigaddset<pos:position pos:line="16" pos:column="14"/></name><argument_list pos:line="16" pos:column="14">(<argument><expr><operator pos:line="16" pos:column="15">&amp;<pos:position pos:line="16" pos:column="20"/></operator><name pos:line="16" pos:column="16">newSig<pos:position pos:line="16" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="24">SIGCHLD<pos:position pos:line="16" pos:column="31"/></name></expr></argument>)<pos:position pos:line="16" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="33"/></expr_stmt>
<cpp:if pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">if<pos:position pos:line="17" pos:column="4"/></cpp:directive> <expr><call><name pos:line="17" pos:column="5">defined<pos:position pos:line="17" pos:column="12"/></name><argument_list pos:line="17" pos:column="12">(<argument><expr><name pos:line="17" pos:column="13">_SQUID_LINUX_THREADS_<pos:position pos:line="17" pos:column="34"/></name></expr></argument>)<pos:position pos:line="17" pos:column="35"/></argument_list></call></expr></cpp:if>

    <expr_stmt><expr><call><name pos:line="19" pos:column="5">sigaddset<pos:position pos:line="19" pos:column="14"/></name><argument_list pos:line="19" pos:column="14">(<argument><expr><operator pos:line="19" pos:column="15">&amp;<pos:position pos:line="19" pos:column="20"/></operator><name pos:line="19" pos:column="16">newSig<pos:position pos:line="19" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="24">SIGQUIT<pos:position pos:line="19" pos:column="31"/></name></expr></argument>)<pos:position pos:line="19" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">sigaddset<pos:position pos:line="20" pos:column="14"/></name><argument_list pos:line="20" pos:column="14">(<argument><expr><operator pos:line="20" pos:column="15">&amp;<pos:position pos:line="20" pos:column="20"/></operator><name pos:line="20" pos:column="16">newSig<pos:position pos:line="20" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="24">SIGTRAP<pos:position pos:line="20" pos:column="31"/></name></expr></argument>)<pos:position pos:line="20" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="33"/></expr_stmt>
<cpp:else pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">else<pos:position pos:line="21" pos:column="6"/></cpp:directive></cpp:else>

    <expr_stmt><expr><call><name pos:line="23" pos:column="5">sigaddset<pos:position pos:line="23" pos:column="14"/></name><argument_list pos:line="23" pos:column="14">(<argument><expr><operator pos:line="23" pos:column="15">&amp;<pos:position pos:line="23" pos:column="20"/></operator><name pos:line="23" pos:column="16">newSig<pos:position pos:line="23" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="24">SIGUSR1<pos:position pos:line="23" pos:column="31"/></name></expr></argument>)<pos:position pos:line="23" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">sigaddset<pos:position pos:line="24" pos:column="14"/></name><argument_list pos:line="24" pos:column="14">(<argument><expr><operator pos:line="24" pos:column="15">&amp;<pos:position pos:line="24" pos:column="20"/></operator><name pos:line="24" pos:column="16">newSig<pos:position pos:line="24" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="24">SIGUSR2<pos:position pos:line="24" pos:column="31"/></name></expr></argument>)<pos:position pos:line="24" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="33"/></expr_stmt>
<cpp:endif pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">endif<pos:position pos:line="25" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="27" pos:column="5">sigaddset<pos:position pos:line="27" pos:column="14"/></name><argument_list pos:line="27" pos:column="14">(<argument><expr><operator pos:line="27" pos:column="15">&amp;<pos:position pos:line="27" pos:column="20"/></operator><name pos:line="27" pos:column="16">newSig<pos:position pos:line="27" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="24">SIGHUP<pos:position pos:line="27" pos:column="30"/></name></expr></argument>)<pos:position pos:line="27" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">sigaddset<pos:position pos:line="28" pos:column="14"/></name><argument_list pos:line="28" pos:column="14">(<argument><expr><operator pos:line="28" pos:column="15">&amp;<pos:position pos:line="28" pos:column="20"/></operator><name pos:line="28" pos:column="16">newSig<pos:position pos:line="28" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="24">SIGTERM<pos:position pos:line="28" pos:column="31"/></name></expr></argument>)<pos:position pos:line="28" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">sigaddset<pos:position pos:line="29" pos:column="14"/></name><argument_list pos:line="29" pos:column="14">(<argument><expr><operator pos:line="29" pos:column="15">&amp;<pos:position pos:line="29" pos:column="20"/></operator><name pos:line="29" pos:column="16">newSig<pos:position pos:line="29" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="24">SIGINT<pos:position pos:line="29" pos:column="30"/></name></expr></argument>)<pos:position pos:line="29" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">sigaddset<pos:position pos:line="30" pos:column="14"/></name><argument_list pos:line="30" pos:column="14">(<argument><expr><operator pos:line="30" pos:column="15">&amp;<pos:position pos:line="30" pos:column="20"/></operator><name pos:line="30" pos:column="16">newSig<pos:position pos:line="30" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="24">SIGALRM<pos:position pos:line="30" pos:column="31"/></name></expr></argument>)<pos:position pos:line="30" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">pthread_sigmask<pos:position pos:line="31" pos:column="20"/></name><argument_list pos:line="31" pos:column="20">(<argument><expr><name pos:line="31" pos:column="21">SIG_BLOCK<pos:position pos:line="31" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="32">&amp;<pos:position pos:line="31" pos:column="37"/></operator><name pos:line="31" pos:column="33">newSig<pos:position pos:line="31" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="41">NULL<pos:position pos:line="31" pos:column="45"/></name></expr></argument>)<pos:position pos:line="31" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="47"/></expr_stmt>

    <while pos:line="33" pos:column="5">while <condition pos:line="33" pos:column="11">(<expr><literal type="number" pos:line="33" pos:column="12">1<pos:position pos:line="33" pos:column="13"/></literal></expr>)<pos:position pos:line="33" pos:column="14"/></condition> <block pos:line="33" pos:column="15">{
        <expr_stmt><expr><name><name pos:line="34" pos:column="9">threadp<pos:position pos:line="34" pos:column="16"/></name><operator pos:line="34" pos:column="16">-&gt;<pos:position pos:line="34" pos:column="21"/></operator><name pos:line="34" pos:column="18">current_req<pos:position pos:line="34" pos:column="29"/></name></name> <operator pos:line="34" pos:column="30">=<pos:position pos:line="34" pos:column="31"/></operator> <name pos:line="34" pos:column="32">request<pos:position pos:line="34" pos:column="39"/></name> <operator pos:line="34" pos:column="40">=<pos:position pos:line="34" pos:column="41"/></operator> <name pos:line="34" pos:column="42">NULL<pos:position pos:line="34" pos:column="46"/></name></expr>;<pos:position pos:line="34" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><name pos:line="35" pos:column="9">request<pos:position pos:line="35" pos:column="16"/></name> <operator pos:line="35" pos:column="17">=<pos:position pos:line="35" pos:column="18"/></operator> <name pos:line="35" pos:column="19">NULL<pos:position pos:line="35" pos:column="23"/></name></expr>;<pos:position pos:line="35" pos:column="24"/></expr_stmt>
        <comment type="block" pos:line="36" pos:column="9">/* Get a request to process */</comment>
        <expr_stmt><expr><name><name pos:line="37" pos:column="9">threadp<pos:position pos:line="37" pos:column="16"/></name><operator pos:line="37" pos:column="16">-&gt;<pos:position pos:line="37" pos:column="21"/></operator><name pos:line="37" pos:column="18">status<pos:position pos:line="37" pos:column="24"/></name></name> <operator pos:line="37" pos:column="25">=<pos:position pos:line="37" pos:column="26"/></operator> <name pos:line="37" pos:column="27">_THREAD_WAITING<pos:position pos:line="37" pos:column="42"/></name></expr>;<pos:position pos:line="37" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="38" pos:column="9">pthread_mutex_lock<pos:position pos:line="38" pos:column="27"/></name><argument_list pos:line="38" pos:column="27">(<argument><expr><operator pos:line="38" pos:column="28">&amp;<pos:position pos:line="38" pos:column="33"/></operator><name><name pos:line="38" pos:column="29">request_queue<pos:position pos:line="38" pos:column="42"/></name><operator pos:line="38" pos:column="42">.<pos:position pos:line="38" pos:column="43"/></operator><name pos:line="38" pos:column="43">mutex<pos:position pos:line="38" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="50"/></expr_stmt>

        <while pos:line="40" pos:column="9">while <condition pos:line="40" pos:column="15">(<expr><operator pos:line="40" pos:column="16">!<pos:position pos:line="40" pos:column="17"/></operator><name><name pos:line="40" pos:column="17">request_queue<pos:position pos:line="40" pos:column="30"/></name><operator pos:line="40" pos:column="30">.<pos:position pos:line="40" pos:column="31"/></operator><name pos:line="40" pos:column="31">head<pos:position pos:line="40" pos:column="35"/></name></name></expr>)<pos:position pos:line="40" pos:column="36"/></condition> <block pos:line="40" pos:column="37">{
            <expr_stmt><expr><call><name pos:line="41" pos:column="13">pthread_cond_wait<pos:position pos:line="41" pos:column="30"/></name><argument_list pos:line="41" pos:column="30">(<argument><expr><operator pos:line="41" pos:column="31">&amp;<pos:position pos:line="41" pos:column="36"/></operator><name><name pos:line="41" pos:column="32">request_queue<pos:position pos:line="41" pos:column="45"/></name><operator pos:line="41" pos:column="45">.<pos:position pos:line="41" pos:column="46"/></operator><name pos:line="41" pos:column="46">cond<pos:position pos:line="41" pos:column="50"/></name></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="52">&amp;<pos:position pos:line="41" pos:column="57"/></operator><name><name pos:line="41" pos:column="53">request_queue<pos:position pos:line="41" pos:column="66"/></name><operator pos:line="41" pos:column="66">.<pos:position pos:line="41" pos:column="67"/></operator><name pos:line="41" pos:column="67">mutex<pos:position pos:line="41" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="74"/></expr_stmt>
        }<pos:position pos:line="42" pos:column="10"/></block></while>

        <expr_stmt><expr><name pos:line="44" pos:column="9">request<pos:position pos:line="44" pos:column="16"/></name> <operator pos:line="44" pos:column="17">=<pos:position pos:line="44" pos:column="18"/></operator> <name><name pos:line="44" pos:column="19">request_queue<pos:position pos:line="44" pos:column="32"/></name><operator pos:line="44" pos:column="32">.<pos:position pos:line="44" pos:column="33"/></operator><name pos:line="44" pos:column="33">head<pos:position pos:line="44" pos:column="37"/></name></name></expr>;<pos:position pos:line="44" pos:column="38"/></expr_stmt>

        <if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><name pos:line="46" pos:column="13">request<pos:position pos:line="46" pos:column="20"/></name></expr>)<pos:position pos:line="46" pos:column="21"/></condition><then pos:line="46" pos:column="21">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="47" pos:column="13">request_queue<pos:position pos:line="47" pos:column="26"/></name><operator pos:line="47" pos:column="26">.<pos:position pos:line="47" pos:column="27"/></operator><name pos:line="47" pos:column="27">head<pos:position pos:line="47" pos:column="31"/></name></name> <operator pos:line="47" pos:column="32">=<pos:position pos:line="47" pos:column="33"/></operator> <name><name pos:line="47" pos:column="34">request<pos:position pos:line="47" pos:column="41"/></name><operator pos:line="47" pos:column="41">-&gt;<pos:position pos:line="47" pos:column="46"/></operator><name pos:line="47" pos:column="43">next<pos:position pos:line="47" pos:column="47"/></name></name></expr>;<pos:position pos:line="47" pos:column="48"/></expr_stmt></block></then></if>

        <if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><operator pos:line="49" pos:column="13">!<pos:position pos:line="49" pos:column="14"/></operator><name><name pos:line="49" pos:column="14">request_queue<pos:position pos:line="49" pos:column="27"/></name><operator pos:line="49" pos:column="27">.<pos:position pos:line="49" pos:column="28"/></operator><name pos:line="49" pos:column="28">head<pos:position pos:line="49" pos:column="32"/></name></name></expr>)<pos:position pos:line="49" pos:column="33"/></condition><then pos:line="49" pos:column="33">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="50" pos:column="13">request_queue<pos:position pos:line="50" pos:column="26"/></name><operator pos:line="50" pos:column="26">.<pos:position pos:line="50" pos:column="27"/></operator><name pos:line="50" pos:column="27">tailp<pos:position pos:line="50" pos:column="32"/></name></name> <operator pos:line="50" pos:column="33">=<pos:position pos:line="50" pos:column="34"/></operator> <operator pos:line="50" pos:column="35">&amp;<pos:position pos:line="50" pos:column="40"/></operator><name><name pos:line="50" pos:column="36">request_queue<pos:position pos:line="50" pos:column="49"/></name><operator pos:line="50" pos:column="49">.<pos:position pos:line="50" pos:column="50"/></operator><name pos:line="50" pos:column="50">head<pos:position pos:line="50" pos:column="54"/></name></name></expr>;<pos:position pos:line="50" pos:column="55"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name pos:line="52" pos:column="9">pthread_mutex_unlock<pos:position pos:line="52" pos:column="29"/></name><argument_list pos:line="52" pos:column="29">(<argument><expr><operator pos:line="52" pos:column="30">&amp;<pos:position pos:line="52" pos:column="35"/></operator><name><name pos:line="52" pos:column="31">request_queue<pos:position pos:line="52" pos:column="44"/></name><operator pos:line="52" pos:column="44">.<pos:position pos:line="52" pos:column="45"/></operator><name pos:line="52" pos:column="45">mutex<pos:position pos:line="52" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="52"/></expr_stmt>

        <comment type="block" pos:line="54" pos:column="9">/* process the request */</comment>
        <expr_stmt><expr><name><name pos:line="55" pos:column="9">threadp<pos:position pos:line="55" pos:column="16"/></name><operator pos:line="55" pos:column="16">-&gt;<pos:position pos:line="55" pos:column="21"/></operator><name pos:line="55" pos:column="18">status<pos:position pos:line="55" pos:column="24"/></name></name> <operator pos:line="55" pos:column="25">=<pos:position pos:line="55" pos:column="26"/></operator> <name pos:line="55" pos:column="27">_THREAD_BUSY<pos:position pos:line="55" pos:column="39"/></name></expr>;<pos:position pos:line="55" pos:column="40"/></expr_stmt>

        <expr_stmt><expr><name><name pos:line="57" pos:column="9">request<pos:position pos:line="57" pos:column="16"/></name><operator pos:line="57" pos:column="16">-&gt;<pos:position pos:line="57" pos:column="21"/></operator><name pos:line="57" pos:column="18">next<pos:position pos:line="57" pos:column="22"/></name></name> <operator pos:line="57" pos:column="23">=<pos:position pos:line="57" pos:column="24"/></operator> <name pos:line="57" pos:column="25">NULL<pos:position pos:line="57" pos:column="29"/></name></expr>;<pos:position pos:line="57" pos:column="30"/></expr_stmt>

        <expr_stmt><expr><name><name pos:line="59" pos:column="9">threadp<pos:position pos:line="59" pos:column="16"/></name><operator pos:line="59" pos:column="16">-&gt;<pos:position pos:line="59" pos:column="21"/></operator><name pos:line="59" pos:column="18">current_req<pos:position pos:line="59" pos:column="29"/></name></name> <operator pos:line="59" pos:column="30">=<pos:position pos:line="59" pos:column="31"/></operator> <name pos:line="59" pos:column="32">request<pos:position pos:line="59" pos:column="39"/></name></expr>;<pos:position pos:line="59" pos:column="40"/></expr_stmt>

        <expr_stmt><expr><name pos:line="61" pos:column="9">errno<pos:position pos:line="61" pos:column="14"/></name> <operator pos:line="61" pos:column="15">=<pos:position pos:line="61" pos:column="16"/></operator> <literal type="number" pos:line="61" pos:column="17">0<pos:position pos:line="61" pos:column="18"/></literal></expr>;<pos:position pos:line="61" pos:column="19"/></expr_stmt>

        <if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><operator pos:line="63" pos:column="13">!<pos:position pos:line="63" pos:column="14"/></operator><name><name pos:line="63" pos:column="14">request<pos:position pos:line="63" pos:column="21"/></name><operator pos:line="63" pos:column="21">-&gt;<pos:position pos:line="63" pos:column="26"/></operator><name pos:line="63" pos:column="23">cancelled<pos:position pos:line="63" pos:column="32"/></name></name></expr>)<pos:position pos:line="63" pos:column="33"/></condition><then pos:line="63" pos:column="33"> <block pos:line="63" pos:column="34">{
            <switch pos:line="64" pos:column="13">switch <condition pos:line="64" pos:column="20">(<expr><name><name pos:line="64" pos:column="21">request<pos:position pos:line="64" pos:column="28"/></name><operator pos:line="64" pos:column="28">-&gt;<pos:position pos:line="64" pos:column="33"/></operator><name pos:line="64" pos:column="30">request_type<pos:position pos:line="64" pos:column="42"/></name></name></expr>)<pos:position pos:line="64" pos:column="43"/></condition> <block pos:line="64" pos:column="44">{

            <case pos:line="66" pos:column="13">case <expr><name pos:line="66" pos:column="18">_AIO_OP_OPEN<pos:position pos:line="66" pos:column="30"/></name></expr>:<pos:position pos:line="66" pos:column="31"/></case>
                <expr_stmt><expr><call><name pos:line="67" pos:column="17">squidaio_do_open<pos:position pos:line="67" pos:column="33"/></name><argument_list pos:line="67" pos:column="33">(<argument><expr><name pos:line="67" pos:column="34">request<pos:position pos:line="67" pos:column="41"/></name></expr></argument>)<pos:position pos:line="67" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="43"/></expr_stmt>
                <break pos:line="68" pos:column="17">break;<pos:position pos:line="68" pos:column="23"/></break>

            <case pos:line="70" pos:column="13">case <expr><name pos:line="70" pos:column="18">_AIO_OP_READ<pos:position pos:line="70" pos:column="30"/></name></expr>:<pos:position pos:line="70" pos:column="31"/></case>
                <expr_stmt><expr><call><name pos:line="71" pos:column="17">squidaio_do_read<pos:position pos:line="71" pos:column="33"/></name><argument_list pos:line="71" pos:column="33">(<argument><expr><name pos:line="71" pos:column="34">request<pos:position pos:line="71" pos:column="41"/></name></expr></argument>)<pos:position pos:line="71" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="43"/></expr_stmt>
                <break pos:line="72" pos:column="17">break;<pos:position pos:line="72" pos:column="23"/></break>

            <case pos:line="74" pos:column="13">case <expr><name pos:line="74" pos:column="18">_AIO_OP_WRITE<pos:position pos:line="74" pos:column="31"/></name></expr>:<pos:position pos:line="74" pos:column="32"/></case>
                <expr_stmt><expr><call><name pos:line="75" pos:column="17">squidaio_do_write<pos:position pos:line="75" pos:column="34"/></name><argument_list pos:line="75" pos:column="34">(<argument><expr><name pos:line="75" pos:column="35">request<pos:position pos:line="75" pos:column="42"/></name></expr></argument>)<pos:position pos:line="75" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="44"/></expr_stmt>
                <break pos:line="76" pos:column="17">break;<pos:position pos:line="76" pos:column="23"/></break>

            <case pos:line="78" pos:column="13">case <expr><name pos:line="78" pos:column="18">_AIO_OP_CLOSE<pos:position pos:line="78" pos:column="31"/></name></expr>:<pos:position pos:line="78" pos:column="32"/></case>
                <expr_stmt><expr><call><name pos:line="79" pos:column="17">squidaio_do_close<pos:position pos:line="79" pos:column="34"/></name><argument_list pos:line="79" pos:column="34">(<argument><expr><name pos:line="79" pos:column="35">request<pos:position pos:line="79" pos:column="42"/></name></expr></argument>)<pos:position pos:line="79" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="44"/></expr_stmt>
                <break pos:line="80" pos:column="17">break;<pos:position pos:line="80" pos:column="23"/></break>

            <case pos:line="82" pos:column="13">case <expr><name pos:line="82" pos:column="18">_AIO_OP_UNLINK<pos:position pos:line="82" pos:column="32"/></name></expr>:<pos:position pos:line="82" pos:column="33"/></case>
                <expr_stmt><expr><call><name pos:line="83" pos:column="17">squidaio_do_unlink<pos:position pos:line="83" pos:column="35"/></name><argument_list pos:line="83" pos:column="35">(<argument><expr><name pos:line="83" pos:column="36">request<pos:position pos:line="83" pos:column="43"/></name></expr></argument>)<pos:position pos:line="83" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="45"/></expr_stmt>
                <break pos:line="84" pos:column="17">break;<pos:position pos:line="84" pos:column="23"/></break>

<cpp:if pos:line="86" pos:column="1">#<cpp:directive pos:line="86" pos:column="2">if<pos:position pos:line="86" pos:column="4"/></cpp:directive> <expr><name pos:line="86" pos:column="5">AIO_OPENDIR<pos:position pos:line="86" pos:column="16"/></name></expr></cpp:if>         <comment type="block" pos:line="86" pos:column="25">/* Opendir not implemented yet */</comment>

            <case pos:line="88" pos:column="13">case <expr><name pos:line="88" pos:column="18">_AIO_OP_OPENDIR<pos:position pos:line="88" pos:column="33"/></name></expr>:<pos:position pos:line="88" pos:column="34"/></case>
                <expr_stmt><expr><call><name pos:line="89" pos:column="17">squidaio_do_opendir<pos:position pos:line="89" pos:column="36"/></name><argument_list pos:line="89" pos:column="36">(<argument><expr><name pos:line="89" pos:column="37">request<pos:position pos:line="89" pos:column="44"/></name></expr></argument>)<pos:position pos:line="89" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="46"/></expr_stmt>
                <break pos:line="90" pos:column="17">break;<pos:position pos:line="90" pos:column="23"/></break>
<cpp:endif pos:line="91" pos:column="1">#<cpp:directive pos:line="91" pos:column="2">endif<pos:position pos:line="91" pos:column="7"/></cpp:directive></cpp:endif>

            <case pos:line="93" pos:column="13">case <expr><name pos:line="93" pos:column="18">_AIO_OP_STAT<pos:position pos:line="93" pos:column="30"/></name></expr>:<pos:position pos:line="93" pos:column="31"/></case>
                <expr_stmt><expr><call><name pos:line="94" pos:column="17">squidaio_do_stat<pos:position pos:line="94" pos:column="33"/></name><argument_list pos:line="94" pos:column="33">(<argument><expr><name pos:line="94" pos:column="34">request<pos:position pos:line="94" pos:column="41"/></name></expr></argument>)<pos:position pos:line="94" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="43"/></expr_stmt>
                <break pos:line="95" pos:column="17">break;<pos:position pos:line="95" pos:column="23"/></break>

            <default pos:line="97" pos:column="13">default:<pos:position pos:line="97" pos:column="21"/></default>
                <expr_stmt><expr><name><name pos:line="98" pos:column="17">request<pos:position pos:line="98" pos:column="24"/></name><operator pos:line="98" pos:column="24">-&gt;<pos:position pos:line="98" pos:column="29"/></operator><name pos:line="98" pos:column="26">ret<pos:position pos:line="98" pos:column="29"/></name></name> <operator pos:line="98" pos:column="30">=<pos:position pos:line="98" pos:column="31"/></operator> <operator pos:line="98" pos:column="32">-<pos:position pos:line="98" pos:column="33"/></operator><literal type="number" pos:line="98" pos:column="33">1<pos:position pos:line="98" pos:column="34"/></literal></expr>;<pos:position pos:line="98" pos:column="35"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="99" pos:column="17">request<pos:position pos:line="99" pos:column="24"/></name><operator pos:line="99" pos:column="24">-&gt;<pos:position pos:line="99" pos:column="29"/></operator><name pos:line="99" pos:column="26">err<pos:position pos:line="99" pos:column="29"/></name></name> <operator pos:line="99" pos:column="30">=<pos:position pos:line="99" pos:column="31"/></operator> <name pos:line="99" pos:column="32">EINVAL<pos:position pos:line="99" pos:column="38"/></name></expr>;<pos:position pos:line="99" pos:column="39"/></expr_stmt>
                <break pos:line="100" pos:column="17">break;<pos:position pos:line="100" pos:column="23"/></break>
            }<pos:position pos:line="101" pos:column="14"/></block></switch>
        }<pos:position pos:line="102" pos:column="10"/></block></then> <else pos:line="102" pos:column="11">else <block pos:line="102" pos:column="16">{        <comment type="block" pos:line="102" pos:column="25">/* cancelled */</comment>
            <expr_stmt><expr><name><name pos:line="103" pos:column="13">request<pos:position pos:line="103" pos:column="20"/></name><operator pos:line="103" pos:column="20">-&gt;<pos:position pos:line="103" pos:column="25"/></operator><name pos:line="103" pos:column="22">ret<pos:position pos:line="103" pos:column="25"/></name></name> <operator pos:line="103" pos:column="26">=<pos:position pos:line="103" pos:column="27"/></operator> <operator pos:line="103" pos:column="28">-<pos:position pos:line="103" pos:column="29"/></operator><literal type="number" pos:line="103" pos:column="29">1<pos:position pos:line="103" pos:column="30"/></literal></expr>;<pos:position pos:line="103" pos:column="31"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="104" pos:column="13">request<pos:position pos:line="104" pos:column="20"/></name><operator pos:line="104" pos:column="20">-&gt;<pos:position pos:line="104" pos:column="25"/></operator><name pos:line="104" pos:column="22">err<pos:position pos:line="104" pos:column="25"/></name></name> <operator pos:line="104" pos:column="26">=<pos:position pos:line="104" pos:column="27"/></operator> <name pos:line="104" pos:column="28">EINTR<pos:position pos:line="104" pos:column="33"/></name></expr>;<pos:position pos:line="104" pos:column="34"/></expr_stmt>
        }<pos:position pos:line="105" pos:column="10"/></block></else></if>

        <expr_stmt><expr><name><name pos:line="107" pos:column="9">threadp<pos:position pos:line="107" pos:column="16"/></name><operator pos:line="107" pos:column="16">-&gt;<pos:position pos:line="107" pos:column="21"/></operator><name pos:line="107" pos:column="18">status<pos:position pos:line="107" pos:column="24"/></name></name> <operator pos:line="107" pos:column="25">=<pos:position pos:line="107" pos:column="26"/></operator> <name pos:line="107" pos:column="27">_THREAD_DONE<pos:position pos:line="107" pos:column="39"/></name></expr>;<pos:position pos:line="107" pos:column="40"/></expr_stmt>
        <comment type="block" pos:line="108" pos:column="9">/* put the request in the done queue */</comment>
        <expr_stmt><expr><call><name pos:line="109" pos:column="9">pthread_mutex_lock<pos:position pos:line="109" pos:column="27"/></name><argument_list pos:line="109" pos:column="27">(<argument><expr><operator pos:line="109" pos:column="28">&amp;<pos:position pos:line="109" pos:column="33"/></operator><name><name pos:line="109" pos:column="29">done_queue<pos:position pos:line="109" pos:column="39"/></name><operator pos:line="109" pos:column="39">.<pos:position pos:line="109" pos:column="40"/></operator><name pos:line="109" pos:column="40">mutex<pos:position pos:line="109" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="109" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="110" pos:column="9">*<pos:position pos:line="110" pos:column="10"/></operator><name><name pos:line="110" pos:column="10">done_queue<pos:position pos:line="110" pos:column="20"/></name><operator pos:line="110" pos:column="20">.<pos:position pos:line="110" pos:column="21"/></operator><name pos:line="110" pos:column="21">tailp<pos:position pos:line="110" pos:column="26"/></name></name> <operator pos:line="110" pos:column="27">=<pos:position pos:line="110" pos:column="28"/></operator> <name pos:line="110" pos:column="29">request<pos:position pos:line="110" pos:column="36"/></name></expr>;<pos:position pos:line="110" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="111" pos:column="9">done_queue<pos:position pos:line="111" pos:column="19"/></name><operator pos:line="111" pos:column="19">.<pos:position pos:line="111" pos:column="20"/></operator><name pos:line="111" pos:column="20">tailp<pos:position pos:line="111" pos:column="25"/></name></name> <operator pos:line="111" pos:column="26">=<pos:position pos:line="111" pos:column="27"/></operator> <operator pos:line="111" pos:column="28">&amp;<pos:position pos:line="111" pos:column="33"/></operator><name><name pos:line="111" pos:column="29">request<pos:position pos:line="111" pos:column="36"/></name><operator pos:line="111" pos:column="36">-&gt;<pos:position pos:line="111" pos:column="41"/></operator><name pos:line="111" pos:column="38">next<pos:position pos:line="111" pos:column="42"/></name></name></expr>;<pos:position pos:line="111" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="112" pos:column="9">pthread_mutex_unlock<pos:position pos:line="112" pos:column="29"/></name><argument_list pos:line="112" pos:column="29">(<argument><expr><operator pos:line="112" pos:column="30">&amp;<pos:position pos:line="112" pos:column="35"/></operator><name><name pos:line="112" pos:column="31">done_queue<pos:position pos:line="112" pos:column="41"/></name><operator pos:line="112" pos:column="41">.<pos:position pos:line="112" pos:column="42"/></operator><name pos:line="112" pos:column="42">mutex<pos:position pos:line="112" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="112" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="113" pos:column="9">CommIO<pos:position pos:line="113" pos:column="15"/></name><operator pos:line="113" pos:column="15">::<pos:position pos:line="113" pos:column="17"/></operator><name pos:line="113" pos:column="17">NotifyIOCompleted<pos:position pos:line="113" pos:column="34"/></name></name><argument_list pos:line="113" pos:column="34">()<pos:position pos:line="113" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="114" pos:column="9">++<pos:position pos:line="114" pos:column="11"/></operator> <name><name pos:line="114" pos:column="12">threadp<pos:position pos:line="114" pos:column="19"/></name><operator pos:line="114" pos:column="19">-&gt;<pos:position pos:line="114" pos:column="24"/></operator><name pos:line="114" pos:column="21">requests<pos:position pos:line="114" pos:column="29"/></name></name></expr>;<pos:position pos:line="114" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="115" pos:column="6"/></block></while>               <comment type="block" pos:line="115" pos:column="21">/* while forever */</comment>

    <return pos:line="117" pos:column="5">return <expr><name pos:line="117" pos:column="12">NULL<pos:position pos:line="117" pos:column="16"/></name></expr>;<pos:position pos:line="117" pos:column="17"/></return>
}<pos:position pos:line="118" pos:column="2"/></block></function></unit>
