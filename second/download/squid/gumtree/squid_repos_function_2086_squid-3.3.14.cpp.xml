<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2086_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HttpStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">getMoreRequestBody<pos:position pos:line="2" pos:column="34"/></name></name><parameter_list pos:line="2" pos:column="34">(<parameter><decl><type><name pos:line="2" pos:column="35">MemBuf<pos:position pos:line="2" pos:column="41"/></name> <modifier pos:line="2" pos:column="42">&amp;<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="43">buf<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="47"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// parent's implementation can handle the no-encoding case</comment>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><operator pos:line="5" pos:column="9">!<pos:position pos:line="5" pos:column="10"/></operator><name><name pos:line="5" pos:column="10">flags<pos:position pos:line="5" pos:column="15"/></name><operator pos:line="5" pos:column="15">.<pos:position pos:line="5" pos:column="16"/></operator><name pos:line="5" pos:column="16">chunked_request<pos:position pos:line="5" pos:column="31"/></name></name></expr>)<pos:position pos:line="5" pos:column="32"/></condition><then pos:line="5" pos:column="32">
        <block type="pseudo"><return pos:line="6" pos:column="9">return <expr><call><name><name pos:line="6" pos:column="16">ServerStateData<pos:position pos:line="6" pos:column="31"/></name><operator pos:line="6" pos:column="31">::<pos:position pos:line="6" pos:column="33"/></operator><name pos:line="6" pos:column="33">getMoreRequestBody<pos:position pos:line="6" pos:column="51"/></name></name><argument_list pos:line="6" pos:column="51">(<argument><expr><name pos:line="6" pos:column="52">buf<pos:position pos:line="6" pos:column="55"/></name></expr></argument>)<pos:position pos:line="6" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="57"/></return></block></then></if>

    <decl_stmt><decl><type><name pos:line="8" pos:column="5">MemBuf<pos:position pos:line="8" pos:column="11"/></name></type> <name pos:line="8" pos:column="12">raw<pos:position pos:line="8" pos:column="15"/></name></decl>;<pos:position pos:line="8" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="10" pos:column="5">Must<pos:position pos:line="10" pos:column="9"/></name><argument_list pos:line="10" pos:column="9">(<argument><expr><name pos:line="10" pos:column="10">requestBodySource<pos:position pos:line="10" pos:column="27"/></name> <operator pos:line="10" pos:column="28">!=<pos:position pos:line="10" pos:column="30"/></operator> <name pos:line="10" pos:column="31">NULL<pos:position pos:line="10" pos:column="35"/></name></expr></argument>)<pos:position pos:line="10" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="37"/></expr_stmt>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">!<pos:position pos:line="11" pos:column="10"/></operator><call><name><name pos:line="11" pos:column="10">requestBodySource<pos:position pos:line="11" pos:column="27"/></name><operator pos:line="11" pos:column="27">-&gt;<pos:position pos:line="11" pos:column="32"/></operator><name pos:line="11" pos:column="29">getMoreData<pos:position pos:line="11" pos:column="40"/></name></name><argument_list pos:line="11" pos:column="40">(<argument><expr><name pos:line="11" pos:column="41">raw<pos:position pos:line="11" pos:column="44"/></name></expr></argument>)<pos:position pos:line="11" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="46"/></condition><then pos:line="11" pos:column="46">
        <block type="pseudo"><return pos:line="12" pos:column="9">return <expr><literal type="boolean" pos:line="12" pos:column="16">false<pos:position pos:line="12" pos:column="21"/></literal></expr>;<pos:position pos:line="12" pos:column="22"/></return></block></then></if> <comment type="line" pos:line="12" pos:column="23">// no request body bytes to chunk yet</comment>

    <comment type="line" pos:line="14" pos:column="5">// optimization: pre-allocate buffer size that should be enough</comment>
    <decl_stmt><decl><type><specifier pos:line="15" pos:column="5">const<pos:position pos:line="15" pos:column="10"/></specifier> <name pos:line="15" pos:column="11">mb_size_t<pos:position pos:line="15" pos:column="20"/></name></type> <name pos:line="15" pos:column="21">rawDataSize<pos:position pos:line="15" pos:column="32"/></name> <init pos:line="15" pos:column="33">= <expr><call><name><name pos:line="15" pos:column="35">raw<pos:position pos:line="15" pos:column="38"/></name><operator pos:line="15" pos:column="38">.<pos:position pos:line="15" pos:column="39"/></operator><name pos:line="15" pos:column="39">contentSize<pos:position pos:line="15" pos:column="50"/></name></name><argument_list pos:line="15" pos:column="50">()<pos:position pos:line="15" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="53"/></decl_stmt>
    <comment type="line" pos:line="16" pos:column="5">// we may need to send: hex-chunk-size CRLF raw-data CRLF last-chunk</comment>
    <expr_stmt><expr><call><name><name pos:line="17" pos:column="5">buf<pos:position pos:line="17" pos:column="8"/></name><operator pos:line="17" pos:column="8">.<pos:position pos:line="17" pos:column="9"/></operator><name pos:line="17" pos:column="9">init<pos:position pos:line="17" pos:column="13"/></name></name><argument_list pos:line="17" pos:column="13">(<argument><expr><literal type="number" pos:line="17" pos:column="14">16<pos:position pos:line="17" pos:column="16"/></literal> <operator pos:line="17" pos:column="17">+<pos:position pos:line="17" pos:column="18"/></operator> <literal type="number" pos:line="17" pos:column="19">2<pos:position pos:line="17" pos:column="20"/></literal> <operator pos:line="17" pos:column="21">+<pos:position pos:line="17" pos:column="22"/></operator> <name pos:line="17" pos:column="23">rawDataSize<pos:position pos:line="17" pos:column="34"/></name> <operator pos:line="17" pos:column="35">+<pos:position pos:line="17" pos:column="36"/></operator> <literal type="number" pos:line="17" pos:column="37">2<pos:position pos:line="17" pos:column="38"/></literal> <operator pos:line="17" pos:column="39">+<pos:position pos:line="17" pos:column="40"/></operator> <literal type="number" pos:line="17" pos:column="41">5<pos:position pos:line="17" pos:column="42"/></literal></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="44">raw<pos:position pos:line="17" pos:column="47"/></name><operator pos:line="17" pos:column="47">.<pos:position pos:line="17" pos:column="48"/></operator><name pos:line="17" pos:column="48">max_capacity<pos:position pos:line="17" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="62"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="19" pos:column="5">buf<pos:position pos:line="19" pos:column="8"/></name><operator pos:line="19" pos:column="8">.<pos:position pos:line="19" pos:column="9"/></operator><name pos:line="19" pos:column="9">Printf<pos:position pos:line="19" pos:column="15"/></name></name><argument_list pos:line="19" pos:column="15">(<argument><expr><literal type="string" pos:line="19" pos:column="16">"%x\r\n"<pos:position pos:line="19" pos:column="24"/></literal></expr></argument>, <argument><expr><cast type="static" pos:line="19" pos:column="26">static_cast<argument_list type="generic" pos:line="19" pos:column="37">&lt;<argument><expr><name pos:line="19" pos:column="38">unsigned<pos:position pos:line="19" pos:column="46"/></name> <name pos:line="19" pos:column="47">int<pos:position pos:line="19" pos:column="50"/></name></expr></argument>&gt;<pos:position pos:line="19" pos:column="54"/></argument_list><argument_list pos:line="19" pos:column="51">(<argument><expr><name pos:line="19" pos:column="52">rawDataSize<pos:position pos:line="19" pos:column="63"/></name></expr></argument>)<pos:position pos:line="19" pos:column="64"/></argument_list></cast></expr></argument>)<pos:position pos:line="19" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="66"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="20" pos:column="5">buf<pos:position pos:line="20" pos:column="8"/></name><operator pos:line="20" pos:column="8">.<pos:position pos:line="20" pos:column="9"/></operator><name pos:line="20" pos:column="9">append<pos:position pos:line="20" pos:column="15"/></name></name><argument_list pos:line="20" pos:column="15">(<argument><expr><call><name><name pos:line="20" pos:column="16">raw<pos:position pos:line="20" pos:column="19"/></name><operator pos:line="20" pos:column="19">.<pos:position pos:line="20" pos:column="20"/></operator><name pos:line="20" pos:column="20">content<pos:position pos:line="20" pos:column="27"/></name></name><argument_list pos:line="20" pos:column="27">()<pos:position pos:line="20" pos:column="29"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="20" pos:column="31">rawDataSize<pos:position pos:line="20" pos:column="42"/></name></expr></argument>)<pos:position pos:line="20" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="21" pos:column="5">buf<pos:position pos:line="21" pos:column="8"/></name><operator pos:line="21" pos:column="8">.<pos:position pos:line="21" pos:column="9"/></operator><name pos:line="21" pos:column="9">Printf<pos:position pos:line="21" pos:column="15"/></name></name><argument_list pos:line="21" pos:column="15">(<argument><expr><literal type="string" pos:line="21" pos:column="16">"\r\n"<pos:position pos:line="21" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="24"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="23" pos:column="5">Must<pos:position pos:line="23" pos:column="9"/></name><argument_list pos:line="23" pos:column="9">(<argument><expr><name pos:line="23" pos:column="10">rawDataSize<pos:position pos:line="23" pos:column="21"/></name> <operator pos:line="23" pos:column="22">&gt;<pos:position pos:line="23" pos:column="26"/></operator> <literal type="number" pos:line="23" pos:column="24">0<pos:position pos:line="23" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="27"/></expr_stmt> <comment type="line" pos:line="23" pos:column="28">// we did not accidently created last-chunk above</comment>

    <comment type="line" pos:line="25" pos:column="5">// Do not send last-chunk unless we successfully received everything</comment>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name pos:line="26" pos:column="9">receivedWholeRequestBody<pos:position pos:line="26" pos:column="33"/></name></expr>)<pos:position pos:line="26" pos:column="34"/></condition><then pos:line="26" pos:column="34"> <block pos:line="26" pos:column="35">{
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">Must<pos:position pos:line="27" pos:column="13"/></name><argument_list pos:line="27" pos:column="13">(<argument><expr><operator pos:line="27" pos:column="14">!<pos:position pos:line="27" pos:column="15"/></operator><name><name pos:line="27" pos:column="15">flags<pos:position pos:line="27" pos:column="20"/></name><operator pos:line="27" pos:column="20">.<pos:position pos:line="27" pos:column="21"/></operator><name pos:line="27" pos:column="21">sentLastChunk<pos:position pos:line="27" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="28" pos:column="9">flags<pos:position pos:line="28" pos:column="14"/></name><operator pos:line="28" pos:column="14">.<pos:position pos:line="28" pos:column="15"/></operator><name pos:line="28" pos:column="15">sentLastChunk<pos:position pos:line="28" pos:column="28"/></name></name> <operator pos:line="28" pos:column="29">=<pos:position pos:line="28" pos:column="30"/></operator> <literal type="boolean" pos:line="28" pos:column="31">true<pos:position pos:line="28" pos:column="35"/></literal></expr>;<pos:position pos:line="28" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="29" pos:column="9">buf<pos:position pos:line="29" pos:column="12"/></name><operator pos:line="29" pos:column="12">.<pos:position pos:line="29" pos:column="13"/></operator><name pos:line="29" pos:column="13">append<pos:position pos:line="29" pos:column="19"/></name></name><argument_list pos:line="29" pos:column="19">(<argument><expr><literal type="string" pos:line="29" pos:column="20">"0\r\n\r\n"<pos:position pos:line="29" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="33">5<pos:position pos:line="29" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>

    <return pos:line="32" pos:column="5">return <expr><literal type="boolean" pos:line="32" pos:column="12">true<pos:position pos:line="32" pos:column="16"/></literal></expr>;<pos:position pos:line="32" pos:column="17"/></return>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
