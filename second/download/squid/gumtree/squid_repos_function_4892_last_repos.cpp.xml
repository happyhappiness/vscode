<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4892_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Http<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">One<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">RequestParser<pos:position pos:line="2" pos:column="25"/></name><operator pos:line="2" pos:column="25">::<pos:position pos:line="2" pos:column="27"/></operator><name pos:line="2" pos:column="27">parse<pos:position pos:line="2" pos:column="32"/></name></name><parameter_list pos:line="2" pos:column="32">(<parameter><decl><type><specifier pos:line="2" pos:column="33">const<pos:position pos:line="2" pos:column="38"/></specifier> <name pos:line="2" pos:column="39">SBuf<pos:position pos:line="2" pos:column="43"/></name> <modifier pos:line="2" pos:column="44">&amp;<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="45">aBuf<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="50"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">bool<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">result<pos:position pos:line="4" pos:column="22"/></name> <init pos:line="4" pos:column="23">= <expr><call><name pos:line="4" pos:column="25">doParse<pos:position pos:line="4" pos:column="32"/></name><argument_list pos:line="4" pos:column="32">(<argument><expr><name pos:line="4" pos:column="33">aBuf<pos:position pos:line="4" pos:column="37"/></name></expr></argument>)<pos:position pos:line="4" pos:column="38"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><name pos:line="5" pos:column="9">preserveParsed_<pos:position pos:line="5" pos:column="24"/></name></expr>)<pos:position pos:line="5" pos:column="25"/></condition><then pos:line="5" pos:column="25"> <block pos:line="5" pos:column="26">{
        <expr_stmt><expr><call><name pos:line="6" pos:column="9">assert<pos:position pos:line="6" pos:column="15"/></name><argument_list pos:line="6" pos:column="15">(<argument><expr><call><name><name pos:line="6" pos:column="16">aBuf<pos:position pos:line="6" pos:column="20"/></name><operator pos:line="6" pos:column="20">.<pos:position pos:line="6" pos:column="21"/></operator><name pos:line="6" pos:column="21">length<pos:position pos:line="6" pos:column="27"/></name></name><argument_list pos:line="6" pos:column="27">()<pos:position pos:line="6" pos:column="29"/></argument_list></call> <operator pos:line="6" pos:column="30">&gt;=<pos:position pos:line="6" pos:column="35"/></operator> <call><name pos:line="6" pos:column="33">remaining<pos:position pos:line="6" pos:column="42"/></name><argument_list pos:line="6" pos:column="42">()<pos:position pos:line="6" pos:column="44"/></argument_list></call><operator pos:line="6" pos:column="44">.<pos:position pos:line="6" pos:column="45"/></operator><call><name pos:line="6" pos:column="45">length<pos:position pos:line="6" pos:column="51"/></name><argument_list pos:line="6" pos:column="51">()<pos:position pos:line="6" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="55"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="7" pos:column="9">parsed_<pos:position pos:line="7" pos:column="16"/></name><operator pos:line="7" pos:column="16">.<pos:position pos:line="7" pos:column="17"/></operator><name pos:line="7" pos:column="17">append<pos:position pos:line="7" pos:column="23"/></name></name><argument_list pos:line="7" pos:column="23">(<argument><expr><call><name><name pos:line="7" pos:column="24">aBuf<pos:position pos:line="7" pos:column="28"/></name><operator pos:line="7" pos:column="28">.<pos:position pos:line="7" pos:column="29"/></operator><name pos:line="7" pos:column="29">substr<pos:position pos:line="7" pos:column="35"/></name></name><argument_list pos:line="7" pos:column="35">(<argument><expr><literal type="number" pos:line="7" pos:column="36">0<pos:position pos:line="7" pos:column="37"/></literal></expr></argument>, <argument><expr><call><name><name pos:line="7" pos:column="39">aBuf<pos:position pos:line="7" pos:column="43"/></name><operator pos:line="7" pos:column="43">.<pos:position pos:line="7" pos:column="44"/></operator><name pos:line="7" pos:column="44">length<pos:position pos:line="7" pos:column="50"/></name></name><argument_list pos:line="7" pos:column="50">()<pos:position pos:line="7" pos:column="52"/></argument_list></call> <operator pos:line="7" pos:column="53">-<pos:position pos:line="7" pos:column="54"/></operator> <call><name pos:line="7" pos:column="55">remaining<pos:position pos:line="7" pos:column="64"/></name><argument_list pos:line="7" pos:column="64">()<pos:position pos:line="7" pos:column="66"/></argument_list></call><operator pos:line="7" pos:column="66">.<pos:position pos:line="7" pos:column="67"/></operator><call><name pos:line="7" pos:column="67">length<pos:position pos:line="7" pos:column="73"/></name><argument_list pos:line="7" pos:column="73">()<pos:position pos:line="7" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="78"/></expr_stmt> <comment type="line" pos:line="7" pos:column="79">// newly parsed bytes</comment>
    }<pos:position pos:line="8" pos:column="6"/></block></then></if>

    <return pos:line="10" pos:column="5">return <expr><name pos:line="10" pos:column="12">result<pos:position pos:line="10" pos:column="18"/></name></expr>;<pos:position pos:line="10" pos:column="19"/></return>
}<pos:position pos:line="11" pos:column="2"/></block></function></unit>
