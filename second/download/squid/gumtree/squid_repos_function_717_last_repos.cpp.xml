<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_717_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">parseConfigFile<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><specifier pos:line="2" pos:column="17">const<pos:position pos:line="2" pos:column="22"/></specifier> <name pos:line="2" pos:column="23">char<pos:position pos:line="2" pos:column="27"/></name> <modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier></type><name pos:line="2" pos:column="29">file_name<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="39"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <try pos:line="4" pos:column="5">try <block pos:line="4" pos:column="9">{
        <return pos:line="5" pos:column="9">return <expr><call><name pos:line="5" pos:column="16">parseConfigFileOrThrow<pos:position pos:line="5" pos:column="38"/></name><argument_list pos:line="5" pos:column="38">(<argument><expr><name pos:line="5" pos:column="39">file_name<pos:position pos:line="5" pos:column="48"/></name></expr></argument>)<pos:position pos:line="5" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="50"/></return>
    }<pos:position pos:line="6" pos:column="6"/></block>
    <catch pos:line="7" pos:column="5">catch <parameter_list pos:line="7" pos:column="11">(<parameter><decl><type><specifier pos:line="7" pos:column="12">const<pos:position pos:line="7" pos:column="17"/></specifier> <name><name pos:line="7" pos:column="18">std<pos:position pos:line="7" pos:column="21"/></name><operator pos:line="7" pos:column="21">::<pos:position pos:line="7" pos:column="23"/></operator><name pos:line="7" pos:column="23">exception<pos:position pos:line="7" pos:column="32"/></name></name> <modifier pos:line="7" pos:column="33">&amp;<pos:position pos:line="7" pos:column="38"/></modifier></type><name pos:line="7" pos:column="34">ex<pos:position pos:line="7" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="7" pos:column="37"/></parameter_list> <block pos:line="7" pos:column="38">{
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">debugs<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><literal type="number" pos:line="8" pos:column="16">3<pos:position pos:line="8" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="19">DBG_CRITICAL<pos:position pos:line="8" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="33">"FATAL: bad configuration: "<pos:position pos:line="8" pos:column="61"/></literal> <operator pos:line="8" pos:column="62">&lt;&lt;<pos:position pos:line="8" pos:column="70"/></operator> <call><name><name pos:line="8" pos:column="65">ex<pos:position pos:line="8" pos:column="67"/></name><operator pos:line="8" pos:column="67">.<pos:position pos:line="8" pos:column="68"/></operator><name pos:line="8" pos:column="68">what<pos:position pos:line="8" pos:column="72"/></name></name><argument_list pos:line="8" pos:column="72">()<pos:position pos:line="8" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="76"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">self_destruct<pos:position pos:line="9" pos:column="22"/></name><argument_list pos:line="9" pos:column="22">()<pos:position pos:line="9" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="25"/></expr_stmt>
        <return pos:line="10" pos:column="9">return <expr><literal type="number" pos:line="10" pos:column="16">1<pos:position pos:line="10" pos:column="17"/></literal></expr>;<pos:position pos:line="10" pos:column="18"/></return> <comment type="line" pos:line="10" pos:column="19">// not reached</comment>
    }<pos:position pos:line="11" pos:column="6"/></block></catch></try>
}<pos:position pos:line="12" pos:column="2"/></block></function></unit>
