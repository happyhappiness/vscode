<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_571_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">u_char<pos:position pos:line="1" pos:column="7"/></name> <modifier pos:line="1" pos:column="8">*<pos:position pos:line="1" pos:column="9"/></modifier></type>
<name pos:line="2" pos:column="1">asn_parse_length<pos:position pos:line="2" pos:column="17"/></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><name pos:line="2" pos:column="18">u_char<pos:position pos:line="2" pos:column="24"/></name> <modifier pos:line="2" pos:column="25">*<pos:position pos:line="2" pos:column="26"/></modifier></type> <name pos:line="2" pos:column="27">data<pos:position pos:line="2" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="33">u_int<pos:position pos:line="2" pos:column="38"/></name> <modifier pos:line="2" pos:column="39">*<pos:position pos:line="2" pos:column="40"/></modifier></type> <name pos:line="2" pos:column="41">length<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="48"/></parameter_list>
<comment type="block" pos:line="3" pos:column="1">/*    u_char  *data;   IN - pointer to start of length field */</comment>
<comment type="block" pos:line="4" pos:column="1">/*    u_int  *length; OUT - value of length field */</comment>
<block pos:line="5" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">u_char<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">lengthbyte<pos:position pos:line="6" pos:column="22"/></name> <init pos:line="6" pos:column="23">= <expr><operator pos:line="6" pos:column="25">*<pos:position pos:line="6" pos:column="26"/></operator><name pos:line="6" pos:column="26">data<pos:position pos:line="6" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="31"/></decl_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">lengthbyte<pos:position pos:line="8" pos:column="19"/></name> <operator pos:line="8" pos:column="20">&amp;<pos:position pos:line="8" pos:column="25"/></operator> <name pos:line="8" pos:column="22">ASN_LONG_LEN<pos:position pos:line="8" pos:column="34"/></name></expr>)<pos:position pos:line="8" pos:column="35"/></condition><then pos:line="8" pos:column="35"> <block pos:line="8" pos:column="36">{
        <expr_stmt><expr><name pos:line="9" pos:column="9">lengthbyte<pos:position pos:line="9" pos:column="19"/></name> <operator pos:line="9" pos:column="20">&amp;=<pos:position pos:line="9" pos:column="26"/></operator> <operator pos:line="9" pos:column="23">~<pos:position pos:line="9" pos:column="24"/></operator><name pos:line="9" pos:column="24">ASN_LONG_LEN<pos:position pos:line="9" pos:column="36"/></name></expr>;<pos:position pos:line="9" pos:column="37"/></expr_stmt>	<comment type="block" pos:line="9" pos:column="41">/* turn MSb off */</comment>

        <if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">lengthbyte<pos:position pos:line="11" pos:column="23"/></name> <operator pos:line="11" pos:column="24">==<pos:position pos:line="11" pos:column="26"/></operator> <literal type="number" pos:line="11" pos:column="27">0<pos:position pos:line="11" pos:column="28"/></literal></expr>)<pos:position pos:line="11" pos:column="29"/></condition><then pos:line="11" pos:column="29"> <block pos:line="11" pos:column="30">{
            <expr_stmt><expr><call><name pos:line="12" pos:column="13">snmp_set_api_error<pos:position pos:line="12" pos:column="31"/></name><argument_list pos:line="12" pos:column="31">(<argument><expr><name pos:line="12" pos:column="32">SNMPERR_ASN_DECODE<pos:position pos:line="12" pos:column="50"/></name></expr></argument>)<pos:position pos:line="12" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="52"/></expr_stmt>
            <return pos:line="13" pos:column="13">return <expr><operator pos:line="13" pos:column="20">(<pos:position pos:line="13" pos:column="21"/></operator><name pos:line="13" pos:column="21">NULL<pos:position pos:line="13" pos:column="25"/></name><operator pos:line="13" pos:column="25">)<pos:position pos:line="13" pos:column="26"/></operator></expr>;<pos:position pos:line="13" pos:column="27"/></return>
        }<pos:position pos:line="14" pos:column="10"/></block></then></if>
        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">lengthbyte<pos:position pos:line="15" pos:column="23"/></name> <operator pos:line="15" pos:column="24">&gt;<pos:position pos:line="15" pos:column="28"/></operator> <sizeof pos:line="15" pos:column="26">sizeof<argument_list pos:line="15" pos:column="32">(<argument><expr><name pos:line="15" pos:column="33">int<pos:position pos:line="15" pos:column="36"/></name></expr></argument>)<pos:position pos:line="15" pos:column="37"/></argument_list></sizeof></expr>)<pos:position pos:line="15" pos:column="38"/></condition><then pos:line="15" pos:column="38"> <block pos:line="15" pos:column="39">{
            <expr_stmt><expr><call><name pos:line="16" pos:column="13">snmp_set_api_error<pos:position pos:line="16" pos:column="31"/></name><argument_list pos:line="16" pos:column="31">(<argument><expr><name pos:line="16" pos:column="32">SNMPERR_ASN_DECODE<pos:position pos:line="16" pos:column="50"/></name></expr></argument>)<pos:position pos:line="16" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="52"/></expr_stmt>
            <return pos:line="17" pos:column="13">return <expr><operator pos:line="17" pos:column="20">(<pos:position pos:line="17" pos:column="21"/></operator><name pos:line="17" pos:column="21">NULL<pos:position pos:line="17" pos:column="25"/></name><operator pos:line="17" pos:column="25">)<pos:position pos:line="17" pos:column="26"/></operator></expr>;<pos:position pos:line="17" pos:column="27"/></return>
        }<pos:position pos:line="18" pos:column="10"/></block></then></if>
        <expr_stmt><expr><operator pos:line="19" pos:column="9">*<pos:position pos:line="19" pos:column="10"/></operator><name pos:line="19" pos:column="10">length<pos:position pos:line="19" pos:column="16"/></name> <operator pos:line="19" pos:column="17">=<pos:position pos:line="19" pos:column="18"/></operator> <operator pos:line="19" pos:column="19">(<pos:position pos:line="19" pos:column="20"/></operator><name pos:line="19" pos:column="20">u_int<pos:position pos:line="19" pos:column="25"/></name><operator pos:line="19" pos:column="25">)<pos:position pos:line="19" pos:column="26"/></operator> <literal type="number" pos:line="19" pos:column="27">0<pos:position pos:line="19" pos:column="28"/></literal></expr>;<pos:position pos:line="19" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">memcpy<pos:position pos:line="20" pos:column="15"/></name><argument_list pos:line="20" pos:column="15">(<argument><expr><operator pos:line="20" pos:column="16">(<pos:position pos:line="20" pos:column="17"/></operator><name pos:line="20" pos:column="17">char<pos:position pos:line="20" pos:column="21"/></name> <operator pos:line="20" pos:column="22">*<pos:position pos:line="20" pos:column="23"/></operator><operator pos:line="20" pos:column="23">)<pos:position pos:line="20" pos:column="24"/></operator> <operator pos:line="20" pos:column="25">(<pos:position pos:line="20" pos:column="26"/></operator><name pos:line="20" pos:column="26">length<pos:position pos:line="20" pos:column="32"/></name><operator pos:line="20" pos:column="32">)<pos:position pos:line="20" pos:column="33"/></operator></expr></argument>, <argument><expr><operator pos:line="20" pos:column="35">(<pos:position pos:line="20" pos:column="36"/></operator><name pos:line="20" pos:column="36">char<pos:position pos:line="20" pos:column="40"/></name> <operator pos:line="20" pos:column="41">*<pos:position pos:line="20" pos:column="42"/></operator><operator pos:line="20" pos:column="42">)<pos:position pos:line="20" pos:column="43"/></operator> <name pos:line="20" pos:column="44">data<pos:position pos:line="20" pos:column="48"/></name> <operator pos:line="20" pos:column="49">+<pos:position pos:line="20" pos:column="50"/></operator> <literal type="number" pos:line="20" pos:column="51">1<pos:position pos:line="20" pos:column="52"/></literal></expr></argument>, <argument><expr><operator pos:line="20" pos:column="54">(<pos:position pos:line="20" pos:column="55"/></operator><name pos:line="20" pos:column="55">int<pos:position pos:line="20" pos:column="58"/></name><operator pos:line="20" pos:column="58">)<pos:position pos:line="20" pos:column="59"/></operator> <name pos:line="20" pos:column="60">lengthbyte<pos:position pos:line="20" pos:column="70"/></name></expr></argument>)<pos:position pos:line="20" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="72"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="21" pos:column="9">*<pos:position pos:line="21" pos:column="10"/></operator><name pos:line="21" pos:column="10">length<pos:position pos:line="21" pos:column="16"/></name> <operator pos:line="21" pos:column="17">=<pos:position pos:line="21" pos:column="18"/></operator> <call><name pos:line="21" pos:column="19">ntohl<pos:position pos:line="21" pos:column="24"/></name><argument_list pos:line="21" pos:column="24">(<argument><expr><operator pos:line="21" pos:column="25">*<pos:position pos:line="21" pos:column="26"/></operator><name pos:line="21" pos:column="26">length<pos:position pos:line="21" pos:column="32"/></name></expr></argument>)<pos:position pos:line="21" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="22" pos:column="9">*<pos:position pos:line="22" pos:column="10"/></operator><name pos:line="22" pos:column="10">length<pos:position pos:line="22" pos:column="16"/></name> <operator pos:line="22" pos:column="17">&gt;&gt;=<pos:position pos:line="22" pos:column="26"/></operator> <operator pos:line="22" pos:column="21">(<pos:position pos:line="22" pos:column="22"/></operator><literal type="number" pos:line="22" pos:column="22">8<pos:position pos:line="22" pos:column="23"/></literal> <operator pos:line="22" pos:column="24">*<pos:position pos:line="22" pos:column="25"/></operator> <operator pos:line="22" pos:column="26">(<pos:position pos:line="22" pos:column="27"/></operator><operator pos:line="22" pos:column="27">(<pos:position pos:line="22" pos:column="28"/></operator><sizeof pos:line="22" pos:column="28">sizeof <name><pos:position pos:line="22" pos:column="35"/></name></sizeof>*<name pos:line="22" pos:column="36">length<pos:position pos:line="22" pos:column="42"/></name><operator pos:line="22" pos:column="42">)<pos:position pos:line="22" pos:column="43"/></operator> <operator pos:line="22" pos:column="44">-<pos:position pos:line="22" pos:column="45"/></operator> <name pos:line="22" pos:column="46">lengthbyte<pos:position pos:line="22" pos:column="56"/></name><operator pos:line="22" pos:column="56">)<pos:position pos:line="22" pos:column="57"/></operator><operator pos:line="22" pos:column="57">)<pos:position pos:line="22" pos:column="58"/></operator></expr>;<pos:position pos:line="22" pos:column="59"/></expr_stmt>
        <return pos:line="23" pos:column="9">return <expr><operator pos:line="23" pos:column="16">(<pos:position pos:line="23" pos:column="17"/></operator><name pos:line="23" pos:column="17">data<pos:position pos:line="23" pos:column="21"/></name> <operator pos:line="23" pos:column="22">+<pos:position pos:line="23" pos:column="23"/></operator> <name pos:line="23" pos:column="24">lengthbyte<pos:position pos:line="23" pos:column="34"/></name> <operator pos:line="23" pos:column="35">+<pos:position pos:line="23" pos:column="36"/></operator> <literal type="number" pos:line="23" pos:column="37">1<pos:position pos:line="23" pos:column="38"/></literal><operator pos:line="23" pos:column="38">)<pos:position pos:line="23" pos:column="39"/></operator></expr>;<pos:position pos:line="23" pos:column="40"/></return>

    }<pos:position pos:line="25" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="26" pos:column="5">/* short asnlength */</comment>

    <expr_stmt><expr><operator pos:line="28" pos:column="5">*<pos:position pos:line="28" pos:column="6"/></operator><name pos:line="28" pos:column="6">length<pos:position pos:line="28" pos:column="12"/></name> <operator pos:line="28" pos:column="13">=<pos:position pos:line="28" pos:column="14"/></operator> <operator pos:line="28" pos:column="15">(<pos:position pos:line="28" pos:column="16"/></operator><name pos:line="28" pos:column="16">int<pos:position pos:line="28" pos:column="19"/></name><operator pos:line="28" pos:column="19">)<pos:position pos:line="28" pos:column="20"/></operator> <name pos:line="28" pos:column="21">lengthbyte<pos:position pos:line="28" pos:column="31"/></name></expr>;<pos:position pos:line="28" pos:column="32"/></expr_stmt>
    <return pos:line="29" pos:column="5">return <expr><operator pos:line="29" pos:column="12">(<pos:position pos:line="29" pos:column="13"/></operator><name pos:line="29" pos:column="13">data<pos:position pos:line="29" pos:column="17"/></name> <operator pos:line="29" pos:column="18">+<pos:position pos:line="29" pos:column="19"/></operator> <literal type="number" pos:line="29" pos:column="20">1<pos:position pos:line="29" pos:column="21"/></literal><operator pos:line="29" pos:column="21">)<pos:position pos:line="29" pos:column="22"/></operator></expr>;<pos:position pos:line="29" pos:column="23"/></return>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
