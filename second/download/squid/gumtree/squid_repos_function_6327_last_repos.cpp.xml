<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6327_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">DWORD<pos:position pos:line="1" pos:column="13"/></name> <name pos:line="1" pos:column="14">WINAPI<pos:position pos:line="1" pos:column="20"/></name></type>
<name pos:line="2" pos:column="1">squidaio_thread_loop<pos:position pos:line="2" pos:column="21"/></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><name pos:line="2" pos:column="22">LPVOID<pos:position pos:line="2" pos:column="28"/></name></type> <name pos:line="2" pos:column="29">lpParam<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="37"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">squidaio_thread_t<pos:position pos:line="4" pos:column="22"/></name> <modifier pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></modifier></type><name pos:line="4" pos:column="24">threadp<pos:position pos:line="4" pos:column="31"/></name> <init pos:line="4" pos:column="32">= <expr><operator pos:line="4" pos:column="34">(<pos:position pos:line="4" pos:column="35"/></operator><name pos:line="4" pos:column="35">squidaio_thread_t<pos:position pos:line="4" pos:column="52"/></name> <operator pos:line="4" pos:column="53">*<pos:position pos:line="4" pos:column="54"/></operator><operator pos:line="4" pos:column="54">)<pos:position pos:line="4" pos:column="55"/></operator><name pos:line="4" pos:column="55">lpParam<pos:position pos:line="4" pos:column="62"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="63"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">squidaio_request_t<pos:position pos:line="5" pos:column="23"/></name> <modifier pos:line="5" pos:column="24">*<pos:position pos:line="5" pos:column="25"/></modifier></type><name pos:line="5" pos:column="25">request<pos:position pos:line="5" pos:column="32"/></name></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">HANDLE<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">cond<pos:position pos:line="6" pos:column="16"/></name></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt> <comment type="block" pos:line="6" pos:column="18">/* local copy of the event queue because win32 event handles
                              * don't atomically release the mutex as cond variables do. */</comment>

    <comment type="block" pos:line="9" pos:column="5">/* lock the thread info */</comment>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name pos:line="11" pos:column="9">WAIT_FAILED<pos:position pos:line="11" pos:column="20"/></name> <operator pos:line="11" pos:column="21">==<pos:position pos:line="11" pos:column="23"/></operator> <call><name pos:line="11" pos:column="24">WaitForSingleObject<pos:position pos:line="11" pos:column="43"/></name><argument_list pos:line="11" pos:column="43">(<argument><expr><name><name pos:line="11" pos:column="44">request_queue<pos:position pos:line="11" pos:column="57"/></name><operator pos:line="11" pos:column="57">.<pos:position pos:line="11" pos:column="58"/></operator><name pos:line="11" pos:column="58">mutex<pos:position pos:line="11" pos:column="63"/></name></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="65">INFINITE<pos:position pos:line="11" pos:column="73"/></name></expr></argument>)<pos:position pos:line="11" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="75"/></condition><then pos:line="11" pos:column="75"> <block pos:line="11" pos:column="76">{
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">fatal<pos:position pos:line="12" pos:column="14"/></name><argument_list pos:line="12" pos:column="14">(<argument><expr><literal type="string" pos:line="12" pos:column="15">"Can't get ownership of mutex\n"<pos:position pos:line="12" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="49"/></expr_stmt>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="15" pos:column="5">/* duplicate the handle */</comment>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><operator pos:line="16" pos:column="9">!<pos:position pos:line="16" pos:column="10"/></operator><call><name pos:line="16" pos:column="10">DuplicateHandle<pos:position pos:line="16" pos:column="25"/></name><argument_list pos:line="16" pos:column="25">(<argument><expr><call><name pos:line="16" pos:column="26">GetCurrentProcess<pos:position pos:line="16" pos:column="43"/></name><argument_list pos:line="16" pos:column="43">()<pos:position pos:line="16" pos:column="45"/></argument_list></call></expr></argument>,    <comment type="block" pos:line="16" pos:column="50">/* pseudo handle, don't close */</comment>
                         <argument><expr><name><name pos:line="17" pos:column="26">request_queue<pos:position pos:line="17" pos:column="39"/></name><operator pos:line="17" pos:column="39">.<pos:position pos:line="17" pos:column="40"/></operator><name pos:line="17" pos:column="40">cond<pos:position pos:line="17" pos:column="44"/></name></name></expr></argument>,     <comment type="block" pos:line="17" pos:column="50">/* handle to copy */</comment>
                         <argument><expr><call><name pos:line="18" pos:column="26">GetCurrentProcess<pos:position pos:line="18" pos:column="43"/></name><argument_list pos:line="18" pos:column="43">()<pos:position pos:line="18" pos:column="45"/></argument_list></call></expr></argument>,    <comment type="block" pos:line="18" pos:column="50">/* pseudo handle, don't close */</comment>
                         <argument><expr><operator pos:line="19" pos:column="26">&amp;<pos:position pos:line="19" pos:column="31"/></operator><name pos:line="19" pos:column="27">cond<pos:position pos:line="19" pos:column="31"/></name></expr></argument>,
                         <argument><expr><literal type="number" pos:line="20" pos:column="26">0<pos:position pos:line="20" pos:column="27"/></literal></expr></argument>,                      <comment type="block" pos:line="20" pos:column="50">/* required access */</comment>
                         <argument><expr><name pos:line="21" pos:column="26">FALSE<pos:position pos:line="21" pos:column="31"/></name></expr></argument>,                  <comment type="block" pos:line="21" pos:column="50">/* child process's don't inherit the handle */</comment>
                         <argument><expr><name pos:line="22" pos:column="26">DUPLICATE_SAME_ACCESS<pos:position pos:line="22" pos:column="47"/></name></expr></argument>)<pos:position pos:line="22" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="49"/></condition><then pos:line="22" pos:column="49">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="9">fatal<pos:position pos:line="23" pos:column="14"/></name><argument_list pos:line="23" pos:column="14">(<argument><expr><literal type="string" pos:line="23" pos:column="15">"Can't duplicate mutex handle\n"<pos:position pos:line="23" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="49"/></expr_stmt></block></then></if>

    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><operator pos:line="25" pos:column="9">!<pos:position pos:line="25" pos:column="10"/></operator><call><name pos:line="25" pos:column="10">ReleaseMutex<pos:position pos:line="25" pos:column="22"/></name><argument_list pos:line="25" pos:column="22">(<argument><expr><name><name pos:line="25" pos:column="23">request_queue<pos:position pos:line="25" pos:column="36"/></name><operator pos:line="25" pos:column="36">.<pos:position pos:line="25" pos:column="37"/></operator><name pos:line="25" pos:column="37">mutex<pos:position pos:line="25" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="44"/></condition><then pos:line="25" pos:column="44"> <block pos:line="25" pos:column="45">{
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">CloseHandle<pos:position pos:line="26" pos:column="20"/></name><argument_list pos:line="26" pos:column="20">(<argument><expr><name pos:line="26" pos:column="21">cond<pos:position pos:line="26" pos:column="25"/></name></expr></argument>)<pos:position pos:line="26" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">fatal<pos:position pos:line="27" pos:column="14"/></name><argument_list pos:line="27" pos:column="14">(<argument><expr><literal type="string" pos:line="27" pos:column="15">"Can't release mutex\n"<pos:position pos:line="27" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="40"/></expr_stmt>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="30" pos:column="5">Sleep<pos:position pos:line="30" pos:column="10"/></name><argument_list pos:line="30" pos:column="10">(<argument><expr><literal type="number" pos:line="30" pos:column="11">0<pos:position pos:line="30" pos:column="12"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="14"/></expr_stmt>

    <while pos:line="32" pos:column="5">while <condition pos:line="32" pos:column="11">(<expr><literal type="number" pos:line="32" pos:column="12">1<pos:position pos:line="32" pos:column="13"/></literal></expr>)<pos:position pos:line="32" pos:column="14"/></condition> <block pos:line="32" pos:column="15">{
        <decl_stmt><decl><type><name pos:line="33" pos:column="9">DWORD<pos:position pos:line="33" pos:column="14"/></name></type> <name pos:line="33" pos:column="15">rv<pos:position pos:line="33" pos:column="17"/></name></decl>;<pos:position pos:line="33" pos:column="18"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="34" pos:column="9">threadp<pos:position pos:line="34" pos:column="16"/></name><operator pos:line="34" pos:column="16">-&gt;<pos:position pos:line="34" pos:column="21"/></operator><name pos:line="34" pos:column="18">current_req<pos:position pos:line="34" pos:column="29"/></name></name> <operator pos:line="34" pos:column="30">=<pos:position pos:line="34" pos:column="31"/></operator> <name pos:line="34" pos:column="32">request<pos:position pos:line="34" pos:column="39"/></name> <operator pos:line="34" pos:column="40">=<pos:position pos:line="34" pos:column="41"/></operator> <name pos:line="34" pos:column="42">NULL<pos:position pos:line="34" pos:column="46"/></name></expr>;<pos:position pos:line="34" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><name pos:line="35" pos:column="9">request<pos:position pos:line="35" pos:column="16"/></name> <operator pos:line="35" pos:column="17">=<pos:position pos:line="35" pos:column="18"/></operator> <name pos:line="35" pos:column="19">NULL<pos:position pos:line="35" pos:column="23"/></name></expr>;<pos:position pos:line="35" pos:column="24"/></expr_stmt>
        <comment type="block" pos:line="36" pos:column="9">/* Get a request to process */</comment>
        <expr_stmt><expr><name><name pos:line="37" pos:column="9">threadp<pos:position pos:line="37" pos:column="16"/></name><operator pos:line="37" pos:column="16">-&gt;<pos:position pos:line="37" pos:column="21"/></operator><name pos:line="37" pos:column="18">status<pos:position pos:line="37" pos:column="24"/></name></name> <operator pos:line="37" pos:column="25">=<pos:position pos:line="37" pos:column="26"/></operator> <name pos:line="37" pos:column="27">_THREAD_WAITING<pos:position pos:line="37" pos:column="42"/></name></expr>;<pos:position pos:line="37" pos:column="43"/></expr_stmt>

        <if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><name><name pos:line="39" pos:column="13">threadp<pos:position pos:line="39" pos:column="20"/></name><operator pos:line="39" pos:column="20">-&gt;<pos:position pos:line="39" pos:column="25"/></operator><name pos:line="39" pos:column="22">exit<pos:position pos:line="39" pos:column="26"/></name></name></expr>)<pos:position pos:line="39" pos:column="27"/></condition><then pos:line="39" pos:column="27"> <block pos:line="39" pos:column="28">{
            <expr_stmt><expr><call><name pos:line="40" pos:column="13">CloseHandle<pos:position pos:line="40" pos:column="24"/></name><argument_list pos:line="40" pos:column="24">(<argument><expr><name><name pos:line="40" pos:column="25">request_queue<pos:position pos:line="40" pos:column="38"/></name><operator pos:line="40" pos:column="38">.<pos:position pos:line="40" pos:column="39"/></operator><name pos:line="40" pos:column="39">mutex<pos:position pos:line="40" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="46"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="41" pos:column="13">CloseHandle<pos:position pos:line="41" pos:column="24"/></name><argument_list pos:line="41" pos:column="24">(<argument><expr><name pos:line="41" pos:column="25">cond<pos:position pos:line="41" pos:column="29"/></name></expr></argument>)<pos:position pos:line="41" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="31"/></expr_stmt>
            <return pos:line="42" pos:column="13">return <expr><literal type="number" pos:line="42" pos:column="20">0<pos:position pos:line="42" pos:column="21"/></literal></expr>;<pos:position pos:line="42" pos:column="22"/></return>
        }<pos:position pos:line="43" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="45" pos:column="9">rv<pos:position pos:line="45" pos:column="11"/></name> <operator pos:line="45" pos:column="12">=<pos:position pos:line="45" pos:column="13"/></operator> <call><name pos:line="45" pos:column="14">WaitForSingleObject<pos:position pos:line="45" pos:column="33"/></name><argument_list pos:line="45" pos:column="33">(<argument><expr><name><name pos:line="45" pos:column="34">request_queue<pos:position pos:line="45" pos:column="47"/></name><operator pos:line="45" pos:column="47">.<pos:position pos:line="45" pos:column="48"/></operator><name pos:line="45" pos:column="48">mutex<pos:position pos:line="45" pos:column="53"/></name></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="55">INFINITE<pos:position pos:line="45" pos:column="63"/></name></expr></argument>)<pos:position pos:line="45" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="65"/></expr_stmt>

        <if pos:line="47" pos:column="9">if <condition pos:line="47" pos:column="12">(<expr><name pos:line="47" pos:column="13">rv<pos:position pos:line="47" pos:column="15"/></name> <operator pos:line="47" pos:column="16">==<pos:position pos:line="47" pos:column="18"/></operator> <name pos:line="47" pos:column="19">WAIT_FAILED<pos:position pos:line="47" pos:column="30"/></name></expr>)<pos:position pos:line="47" pos:column="31"/></condition><then pos:line="47" pos:column="31"> <block pos:line="47" pos:column="32">{
            <expr_stmt><expr><call><name pos:line="48" pos:column="13">CloseHandle<pos:position pos:line="48" pos:column="24"/></name><argument_list pos:line="48" pos:column="24">(<argument><expr><name pos:line="48" pos:column="25">cond<pos:position pos:line="48" pos:column="29"/></name></expr></argument>)<pos:position pos:line="48" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="31"/></expr_stmt>
            <return pos:line="49" pos:column="13">return <expr><literal type="number" pos:line="49" pos:column="20">1<pos:position pos:line="49" pos:column="21"/></literal></expr>;<pos:position pos:line="49" pos:column="22"/></return>
        }<pos:position pos:line="50" pos:column="10"/></block></then></if>

        <while pos:line="52" pos:column="9">while <condition pos:line="52" pos:column="15">(<expr><operator pos:line="52" pos:column="16">!<pos:position pos:line="52" pos:column="17"/></operator><name><name pos:line="52" pos:column="17">request_queue<pos:position pos:line="52" pos:column="30"/></name><operator pos:line="52" pos:column="30">.<pos:position pos:line="52" pos:column="31"/></operator><name pos:line="52" pos:column="31">head<pos:position pos:line="52" pos:column="35"/></name></name></expr>)<pos:position pos:line="52" pos:column="36"/></condition> <block pos:line="52" pos:column="37">{
            <if pos:line="53" pos:column="13">if <condition pos:line="53" pos:column="16">(<expr><operator pos:line="53" pos:column="17">!<pos:position pos:line="53" pos:column="18"/></operator><call><name pos:line="53" pos:column="18">ReleaseMutex<pos:position pos:line="53" pos:column="30"/></name><argument_list pos:line="53" pos:column="30">(<argument><expr><name><name pos:line="53" pos:column="31">request_queue<pos:position pos:line="53" pos:column="44"/></name><operator pos:line="53" pos:column="44">.<pos:position pos:line="53" pos:column="45"/></operator><name pos:line="53" pos:column="45">mutex<pos:position pos:line="53" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="53" pos:column="52"/></condition><then pos:line="53" pos:column="52"> <block pos:line="53" pos:column="53">{
                <expr_stmt><expr><call><name pos:line="54" pos:column="17">CloseHandle<pos:position pos:line="54" pos:column="28"/></name><argument_list pos:line="54" pos:column="28">(<argument><expr><name pos:line="54" pos:column="29">cond<pos:position pos:line="54" pos:column="33"/></name></expr></argument>)<pos:position pos:line="54" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="35"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="55" pos:column="17">threadp<pos:position pos:line="55" pos:column="24"/></name><operator pos:line="55" pos:column="24">-&gt;<pos:position pos:line="55" pos:column="29"/></operator><name pos:line="55" pos:column="26">status<pos:position pos:line="55" pos:column="32"/></name></name> <operator pos:line="55" pos:column="33">=<pos:position pos:line="55" pos:column="34"/></operator> <name pos:line="55" pos:column="35">_THREAD_FAILED<pos:position pos:line="55" pos:column="49"/></name></expr>;<pos:position pos:line="55" pos:column="50"/></expr_stmt>
                <return pos:line="56" pos:column="17">return <expr><literal type="number" pos:line="56" pos:column="24">1<pos:position pos:line="56" pos:column="25"/></literal></expr>;<pos:position pos:line="56" pos:column="26"/></return>
            }<pos:position pos:line="57" pos:column="14"/></block></then></if>

            <expr_stmt><expr><call><name pos:line="59" pos:column="13">Sleep<pos:position pos:line="59" pos:column="18"/></name><argument_list pos:line="59" pos:column="18">(<argument><expr><literal type="number" pos:line="59" pos:column="19">0<pos:position pos:line="59" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="22"/></expr_stmt>
            <expr_stmt><expr><name pos:line="60" pos:column="13">rv<pos:position pos:line="60" pos:column="15"/></name> <operator pos:line="60" pos:column="16">=<pos:position pos:line="60" pos:column="17"/></operator> <call><name pos:line="60" pos:column="18">WaitForSingleObject<pos:position pos:line="60" pos:column="37"/></name><argument_list pos:line="60" pos:column="37">(<argument><expr><name pos:line="60" pos:column="38">cond<pos:position pos:line="60" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="44">INFINITE<pos:position pos:line="60" pos:column="52"/></name></expr></argument>)<pos:position pos:line="60" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="54"/></expr_stmt>

            <if pos:line="62" pos:column="13">if <condition pos:line="62" pos:column="16">(<expr><name pos:line="62" pos:column="17">rv<pos:position pos:line="62" pos:column="19"/></name> <operator pos:line="62" pos:column="20">==<pos:position pos:line="62" pos:column="22"/></operator> <name pos:line="62" pos:column="23">WAIT_FAILED<pos:position pos:line="62" pos:column="34"/></name></expr>)<pos:position pos:line="62" pos:column="35"/></condition><then pos:line="62" pos:column="35"> <block pos:line="62" pos:column="36">{
                <expr_stmt><expr><call><name pos:line="63" pos:column="17">CloseHandle<pos:position pos:line="63" pos:column="28"/></name><argument_list pos:line="63" pos:column="28">(<argument><expr><name pos:line="63" pos:column="29">cond<pos:position pos:line="63" pos:column="33"/></name></expr></argument>)<pos:position pos:line="63" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="35"/></expr_stmt>
                <return pos:line="64" pos:column="17">return <expr><literal type="number" pos:line="64" pos:column="24">1<pos:position pos:line="64" pos:column="25"/></literal></expr>;<pos:position pos:line="64" pos:column="26"/></return>
            }<pos:position pos:line="65" pos:column="14"/></block></then></if>

            <expr_stmt><expr><name pos:line="67" pos:column="13">rv<pos:position pos:line="67" pos:column="15"/></name> <operator pos:line="67" pos:column="16">=<pos:position pos:line="67" pos:column="17"/></operator> <call><name pos:line="67" pos:column="18">WaitForSingleObject<pos:position pos:line="67" pos:column="37"/></name><argument_list pos:line="67" pos:column="37">(<argument><expr><name><name pos:line="67" pos:column="38">request_queue<pos:position pos:line="67" pos:column="51"/></name><operator pos:line="67" pos:column="51">.<pos:position pos:line="67" pos:column="52"/></operator><name pos:line="67" pos:column="52">mutex<pos:position pos:line="67" pos:column="57"/></name></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="59">INFINITE<pos:position pos:line="67" pos:column="67"/></name></expr></argument>)<pos:position pos:line="67" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="69"/></expr_stmt>

            <if pos:line="69" pos:column="13">if <condition pos:line="69" pos:column="16">(<expr><name pos:line="69" pos:column="17">rv<pos:position pos:line="69" pos:column="19"/></name> <operator pos:line="69" pos:column="20">==<pos:position pos:line="69" pos:column="22"/></operator> <name pos:line="69" pos:column="23">WAIT_FAILED<pos:position pos:line="69" pos:column="34"/></name></expr>)<pos:position pos:line="69" pos:column="35"/></condition><then pos:line="69" pos:column="35"> <block pos:line="69" pos:column="36">{
                <expr_stmt><expr><call><name pos:line="70" pos:column="17">CloseHandle<pos:position pos:line="70" pos:column="28"/></name><argument_list pos:line="70" pos:column="28">(<argument><expr><name pos:line="70" pos:column="29">cond<pos:position pos:line="70" pos:column="33"/></name></expr></argument>)<pos:position pos:line="70" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="35"/></expr_stmt>
                <return pos:line="71" pos:column="17">return <expr><literal type="number" pos:line="71" pos:column="24">1<pos:position pos:line="71" pos:column="25"/></literal></expr>;<pos:position pos:line="71" pos:column="26"/></return>
            }<pos:position pos:line="72" pos:column="14"/></block></then></if>
        }<pos:position pos:line="73" pos:column="10"/></block></while>

        <expr_stmt><expr><name pos:line="75" pos:column="9">request<pos:position pos:line="75" pos:column="16"/></name> <operator pos:line="75" pos:column="17">=<pos:position pos:line="75" pos:column="18"/></operator> <name><name pos:line="75" pos:column="19">request_queue<pos:position pos:line="75" pos:column="32"/></name><operator pos:line="75" pos:column="32">.<pos:position pos:line="75" pos:column="33"/></operator><name pos:line="75" pos:column="33">head<pos:position pos:line="75" pos:column="37"/></name></name></expr>;<pos:position pos:line="75" pos:column="38"/></expr_stmt>

        <if pos:line="77" pos:column="9">if <condition pos:line="77" pos:column="12">(<expr><name pos:line="77" pos:column="13">request<pos:position pos:line="77" pos:column="20"/></name></expr>)<pos:position pos:line="77" pos:column="21"/></condition><then pos:line="77" pos:column="21">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="78" pos:column="13">request_queue<pos:position pos:line="78" pos:column="26"/></name><operator pos:line="78" pos:column="26">.<pos:position pos:line="78" pos:column="27"/></operator><name pos:line="78" pos:column="27">head<pos:position pos:line="78" pos:column="31"/></name></name> <operator pos:line="78" pos:column="32">=<pos:position pos:line="78" pos:column="33"/></operator> <name><name pos:line="78" pos:column="34">request<pos:position pos:line="78" pos:column="41"/></name><operator pos:line="78" pos:column="41">-&gt;<pos:position pos:line="78" pos:column="46"/></operator><name pos:line="78" pos:column="43">next<pos:position pos:line="78" pos:column="47"/></name></name></expr>;<pos:position pos:line="78" pos:column="48"/></expr_stmt></block></then></if>

        <if pos:line="80" pos:column="9">if <condition pos:line="80" pos:column="12">(<expr><operator pos:line="80" pos:column="13">!<pos:position pos:line="80" pos:column="14"/></operator><name><name pos:line="80" pos:column="14">request_queue<pos:position pos:line="80" pos:column="27"/></name><operator pos:line="80" pos:column="27">.<pos:position pos:line="80" pos:column="28"/></operator><name pos:line="80" pos:column="28">head<pos:position pos:line="80" pos:column="32"/></name></name></expr>)<pos:position pos:line="80" pos:column="33"/></condition><then pos:line="80" pos:column="33">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="81" pos:column="13">request_queue<pos:position pos:line="81" pos:column="26"/></name><operator pos:line="81" pos:column="26">.<pos:position pos:line="81" pos:column="27"/></operator><name pos:line="81" pos:column="27">tailp<pos:position pos:line="81" pos:column="32"/></name></name> <operator pos:line="81" pos:column="33">=<pos:position pos:line="81" pos:column="34"/></operator> <operator pos:line="81" pos:column="35">&amp;<pos:position pos:line="81" pos:column="40"/></operator><name><name pos:line="81" pos:column="36">request_queue<pos:position pos:line="81" pos:column="49"/></name><operator pos:line="81" pos:column="49">.<pos:position pos:line="81" pos:column="50"/></operator><name pos:line="81" pos:column="50">head<pos:position pos:line="81" pos:column="54"/></name></name></expr>;<pos:position pos:line="81" pos:column="55"/></expr_stmt></block></then></if>

        <if pos:line="83" pos:column="9">if <condition pos:line="83" pos:column="12">(<expr><operator pos:line="83" pos:column="13">!<pos:position pos:line="83" pos:column="14"/></operator><call><name pos:line="83" pos:column="14">ReleaseMutex<pos:position pos:line="83" pos:column="26"/></name><argument_list pos:line="83" pos:column="26">(<argument><expr><name><name pos:line="83" pos:column="27">request_queue<pos:position pos:line="83" pos:column="40"/></name><operator pos:line="83" pos:column="40">.<pos:position pos:line="83" pos:column="41"/></operator><name pos:line="83" pos:column="41">mutex<pos:position pos:line="83" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="83" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="83" pos:column="48"/></condition><then pos:line="83" pos:column="48"> <block pos:line="83" pos:column="49">{
            <expr_stmt><expr><call><name pos:line="84" pos:column="13">CloseHandle<pos:position pos:line="84" pos:column="24"/></name><argument_list pos:line="84" pos:column="24">(<argument><expr><name pos:line="84" pos:column="25">cond<pos:position pos:line="84" pos:column="29"/></name></expr></argument>)<pos:position pos:line="84" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="31"/></expr_stmt>
            <return pos:line="85" pos:column="13">return <expr><literal type="number" pos:line="85" pos:column="20">1<pos:position pos:line="85" pos:column="21"/></literal></expr>;<pos:position pos:line="85" pos:column="22"/></return>
        }<pos:position pos:line="86" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="88" pos:column="9">Sleep<pos:position pos:line="88" pos:column="14"/></name><argument_list pos:line="88" pos:column="14">(<argument><expr><literal type="number" pos:line="88" pos:column="15">0<pos:position pos:line="88" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="18"/></expr_stmt>

        <comment type="block" pos:line="90" pos:column="9">/* process the request */</comment>
        <expr_stmt><expr><name><name pos:line="91" pos:column="9">threadp<pos:position pos:line="91" pos:column="16"/></name><operator pos:line="91" pos:column="16">-&gt;<pos:position pos:line="91" pos:column="21"/></operator><name pos:line="91" pos:column="18">status<pos:position pos:line="91" pos:column="24"/></name></name> <operator pos:line="91" pos:column="25">=<pos:position pos:line="91" pos:column="26"/></operator> <name pos:line="91" pos:column="27">_THREAD_BUSY<pos:position pos:line="91" pos:column="39"/></name></expr>;<pos:position pos:line="91" pos:column="40"/></expr_stmt>

        <expr_stmt><expr><name><name pos:line="93" pos:column="9">request<pos:position pos:line="93" pos:column="16"/></name><operator pos:line="93" pos:column="16">-&gt;<pos:position pos:line="93" pos:column="21"/></operator><name pos:line="93" pos:column="18">next<pos:position pos:line="93" pos:column="22"/></name></name> <operator pos:line="93" pos:column="23">=<pos:position pos:line="93" pos:column="24"/></operator> <name pos:line="93" pos:column="25">NULL<pos:position pos:line="93" pos:column="29"/></name></expr>;<pos:position pos:line="93" pos:column="30"/></expr_stmt>

        <expr_stmt><expr><name><name pos:line="95" pos:column="9">threadp<pos:position pos:line="95" pos:column="16"/></name><operator pos:line="95" pos:column="16">-&gt;<pos:position pos:line="95" pos:column="21"/></operator><name pos:line="95" pos:column="18">current_req<pos:position pos:line="95" pos:column="29"/></name></name> <operator pos:line="95" pos:column="30">=<pos:position pos:line="95" pos:column="31"/></operator> <name pos:line="95" pos:column="32">request<pos:position pos:line="95" pos:column="39"/></name></expr>;<pos:position pos:line="95" pos:column="40"/></expr_stmt>

        <expr_stmt><expr><name pos:line="97" pos:column="9">errno<pos:position pos:line="97" pos:column="14"/></name> <operator pos:line="97" pos:column="15">=<pos:position pos:line="97" pos:column="16"/></operator> <literal type="number" pos:line="97" pos:column="17">0<pos:position pos:line="97" pos:column="18"/></literal></expr>;<pos:position pos:line="97" pos:column="19"/></expr_stmt>

        <if pos:line="99" pos:column="9">if <condition pos:line="99" pos:column="12">(<expr><operator pos:line="99" pos:column="13">!<pos:position pos:line="99" pos:column="14"/></operator><name><name pos:line="99" pos:column="14">request<pos:position pos:line="99" pos:column="21"/></name><operator pos:line="99" pos:column="21">-&gt;<pos:position pos:line="99" pos:column="26"/></operator><name pos:line="99" pos:column="23">cancelled<pos:position pos:line="99" pos:column="32"/></name></name></expr>)<pos:position pos:line="99" pos:column="33"/></condition><then pos:line="99" pos:column="33"> <block pos:line="99" pos:column="34">{
            <switch pos:line="100" pos:column="13">switch <condition pos:line="100" pos:column="20">(<expr><name><name pos:line="100" pos:column="21">request<pos:position pos:line="100" pos:column="28"/></name><operator pos:line="100" pos:column="28">-&gt;<pos:position pos:line="100" pos:column="33"/></operator><name pos:line="100" pos:column="30">request_type<pos:position pos:line="100" pos:column="42"/></name></name></expr>)<pos:position pos:line="100" pos:column="43"/></condition> <block pos:line="100" pos:column="44">{

            <case pos:line="102" pos:column="13">case <expr><name pos:line="102" pos:column="18">_AIO_OP_OPEN<pos:position pos:line="102" pos:column="30"/></name></expr>:<pos:position pos:line="102" pos:column="31"/></case>
                <expr_stmt><expr><call><name pos:line="103" pos:column="17">squidaio_do_open<pos:position pos:line="103" pos:column="33"/></name><argument_list pos:line="103" pos:column="33">(<argument><expr><name pos:line="103" pos:column="34">request<pos:position pos:line="103" pos:column="41"/></name></expr></argument>)<pos:position pos:line="103" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="43"/></expr_stmt>
                <break pos:line="104" pos:column="17">break;<pos:position pos:line="104" pos:column="23"/></break>

            <case pos:line="106" pos:column="13">case <expr><name pos:line="106" pos:column="18">_AIO_OP_READ<pos:position pos:line="106" pos:column="30"/></name></expr>:<pos:position pos:line="106" pos:column="31"/></case>
                <expr_stmt><expr><call><name pos:line="107" pos:column="17">squidaio_do_read<pos:position pos:line="107" pos:column="33"/></name><argument_list pos:line="107" pos:column="33">(<argument><expr><name pos:line="107" pos:column="34">request<pos:position pos:line="107" pos:column="41"/></name></expr></argument>)<pos:position pos:line="107" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="43"/></expr_stmt>
                <break pos:line="108" pos:column="17">break;<pos:position pos:line="108" pos:column="23"/></break>

            <case pos:line="110" pos:column="13">case <expr><name pos:line="110" pos:column="18">_AIO_OP_WRITE<pos:position pos:line="110" pos:column="31"/></name></expr>:<pos:position pos:line="110" pos:column="32"/></case>
                <expr_stmt><expr><call><name pos:line="111" pos:column="17">squidaio_do_write<pos:position pos:line="111" pos:column="34"/></name><argument_list pos:line="111" pos:column="34">(<argument><expr><name pos:line="111" pos:column="35">request<pos:position pos:line="111" pos:column="42"/></name></expr></argument>)<pos:position pos:line="111" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="44"/></expr_stmt>
                <break pos:line="112" pos:column="17">break;<pos:position pos:line="112" pos:column="23"/></break>

            <case pos:line="114" pos:column="13">case <expr><name pos:line="114" pos:column="18">_AIO_OP_CLOSE<pos:position pos:line="114" pos:column="31"/></name></expr>:<pos:position pos:line="114" pos:column="32"/></case>
                <expr_stmt><expr><call><name pos:line="115" pos:column="17">squidaio_do_close<pos:position pos:line="115" pos:column="34"/></name><argument_list pos:line="115" pos:column="34">(<argument><expr><name pos:line="115" pos:column="35">request<pos:position pos:line="115" pos:column="42"/></name></expr></argument>)<pos:position pos:line="115" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="44"/></expr_stmt>
                <break pos:line="116" pos:column="17">break;<pos:position pos:line="116" pos:column="23"/></break>

            <case pos:line="118" pos:column="13">case <expr><name pos:line="118" pos:column="18">_AIO_OP_UNLINK<pos:position pos:line="118" pos:column="32"/></name></expr>:<pos:position pos:line="118" pos:column="33"/></case>
                <expr_stmt><expr><call><name pos:line="119" pos:column="17">squidaio_do_unlink<pos:position pos:line="119" pos:column="35"/></name><argument_list pos:line="119" pos:column="35">(<argument><expr><name pos:line="119" pos:column="36">request<pos:position pos:line="119" pos:column="43"/></name></expr></argument>)<pos:position pos:line="119" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="45"/></expr_stmt>
                <break pos:line="120" pos:column="17">break;<pos:position pos:line="120" pos:column="23"/></break>

<cpp:if pos:line="122" pos:column="1">#<cpp:directive pos:line="122" pos:column="2">if<pos:position pos:line="122" pos:column="4"/></cpp:directive> <expr><name pos:line="122" pos:column="5">AIO_OPENDIR<pos:position pos:line="122" pos:column="16"/></name></expr></cpp:if>         <comment type="block" pos:line="122" pos:column="25">/* Opendir not implemented yet */</comment>

            <case pos:line="124" pos:column="13">case <expr><name pos:line="124" pos:column="18">_AIO_OP_OPENDIR<pos:position pos:line="124" pos:column="33"/></name></expr>:<pos:position pos:line="124" pos:column="34"/></case>
                <expr_stmt><expr><call><name pos:line="125" pos:column="17">squidaio_do_opendir<pos:position pos:line="125" pos:column="36"/></name><argument_list pos:line="125" pos:column="36">(<argument><expr><name pos:line="125" pos:column="37">request<pos:position pos:line="125" pos:column="44"/></name></expr></argument>)<pos:position pos:line="125" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="46"/></expr_stmt>
                <break pos:line="126" pos:column="17">break;<pos:position pos:line="126" pos:column="23"/></break>
<cpp:endif pos:line="127" pos:column="1">#<cpp:directive pos:line="127" pos:column="2">endif<pos:position pos:line="127" pos:column="7"/></cpp:directive></cpp:endif>

            <case pos:line="129" pos:column="13">case <expr><name pos:line="129" pos:column="18">_AIO_OP_STAT<pos:position pos:line="129" pos:column="30"/></name></expr>:<pos:position pos:line="129" pos:column="31"/></case>
                <expr_stmt><expr><call><name pos:line="130" pos:column="17">squidaio_do_stat<pos:position pos:line="130" pos:column="33"/></name><argument_list pos:line="130" pos:column="33">(<argument><expr><name pos:line="130" pos:column="34">request<pos:position pos:line="130" pos:column="41"/></name></expr></argument>)<pos:position pos:line="130" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="43"/></expr_stmt>
                <break pos:line="131" pos:column="17">break;<pos:position pos:line="131" pos:column="23"/></break>

            <default pos:line="133" pos:column="13">default:<pos:position pos:line="133" pos:column="21"/></default>
                <expr_stmt><expr><name><name pos:line="134" pos:column="17">request<pos:position pos:line="134" pos:column="24"/></name><operator pos:line="134" pos:column="24">-&gt;<pos:position pos:line="134" pos:column="29"/></operator><name pos:line="134" pos:column="26">ret<pos:position pos:line="134" pos:column="29"/></name></name> <operator pos:line="134" pos:column="30">=<pos:position pos:line="134" pos:column="31"/></operator> <operator pos:line="134" pos:column="32">-<pos:position pos:line="134" pos:column="33"/></operator><literal type="number" pos:line="134" pos:column="33">1<pos:position pos:line="134" pos:column="34"/></literal></expr>;<pos:position pos:line="134" pos:column="35"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="135" pos:column="17">request<pos:position pos:line="135" pos:column="24"/></name><operator pos:line="135" pos:column="24">-&gt;<pos:position pos:line="135" pos:column="29"/></operator><name pos:line="135" pos:column="26">err<pos:position pos:line="135" pos:column="29"/></name></name> <operator pos:line="135" pos:column="30">=<pos:position pos:line="135" pos:column="31"/></operator> <name pos:line="135" pos:column="32">EINVAL<pos:position pos:line="135" pos:column="38"/></name></expr>;<pos:position pos:line="135" pos:column="39"/></expr_stmt>
                <break pos:line="136" pos:column="17">break;<pos:position pos:line="136" pos:column="23"/></break>
            }<pos:position pos:line="137" pos:column="14"/></block></switch>
        }<pos:position pos:line="138" pos:column="10"/></block></then> <else pos:line="138" pos:column="11">else <block pos:line="138" pos:column="16">{        <comment type="block" pos:line="138" pos:column="25">/* cancelled */</comment>
            <expr_stmt><expr><name><name pos:line="139" pos:column="13">request<pos:position pos:line="139" pos:column="20"/></name><operator pos:line="139" pos:column="20">-&gt;<pos:position pos:line="139" pos:column="25"/></operator><name pos:line="139" pos:column="22">ret<pos:position pos:line="139" pos:column="25"/></name></name> <operator pos:line="139" pos:column="26">=<pos:position pos:line="139" pos:column="27"/></operator> <operator pos:line="139" pos:column="28">-<pos:position pos:line="139" pos:column="29"/></operator><literal type="number" pos:line="139" pos:column="29">1<pos:position pos:line="139" pos:column="30"/></literal></expr>;<pos:position pos:line="139" pos:column="31"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="140" pos:column="13">request<pos:position pos:line="140" pos:column="20"/></name><operator pos:line="140" pos:column="20">-&gt;<pos:position pos:line="140" pos:column="25"/></operator><name pos:line="140" pos:column="22">err<pos:position pos:line="140" pos:column="25"/></name></name> <operator pos:line="140" pos:column="26">=<pos:position pos:line="140" pos:column="27"/></operator> <name pos:line="140" pos:column="28">EINTR<pos:position pos:line="140" pos:column="33"/></name></expr>;<pos:position pos:line="140" pos:column="34"/></expr_stmt>
        }<pos:position pos:line="141" pos:column="10"/></block></else></if>

        <expr_stmt><expr><name><name pos:line="143" pos:column="9">threadp<pos:position pos:line="143" pos:column="16"/></name><operator pos:line="143" pos:column="16">-&gt;<pos:position pos:line="143" pos:column="21"/></operator><name pos:line="143" pos:column="18">status<pos:position pos:line="143" pos:column="24"/></name></name> <operator pos:line="143" pos:column="25">=<pos:position pos:line="143" pos:column="26"/></operator> <name pos:line="143" pos:column="27">_THREAD_DONE<pos:position pos:line="143" pos:column="39"/></name></expr>;<pos:position pos:line="143" pos:column="40"/></expr_stmt>
        <comment type="block" pos:line="144" pos:column="9">/* put the request in the done queue */</comment>
        <expr_stmt><expr><name pos:line="145" pos:column="9">rv<pos:position pos:line="145" pos:column="11"/></name> <operator pos:line="145" pos:column="12">=<pos:position pos:line="145" pos:column="13"/></operator> <call><name pos:line="145" pos:column="14">WaitForSingleObject<pos:position pos:line="145" pos:column="33"/></name><argument_list pos:line="145" pos:column="33">(<argument><expr><name><name pos:line="145" pos:column="34">done_queue<pos:position pos:line="145" pos:column="44"/></name><operator pos:line="145" pos:column="44">.<pos:position pos:line="145" pos:column="45"/></operator><name pos:line="145" pos:column="45">mutex<pos:position pos:line="145" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="145" pos:column="52">INFINITE<pos:position pos:line="145" pos:column="60"/></name></expr></argument>)<pos:position pos:line="145" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="62"/></expr_stmt>

        <if pos:line="147" pos:column="9">if <condition pos:line="147" pos:column="12">(<expr><name pos:line="147" pos:column="13">rv<pos:position pos:line="147" pos:column="15"/></name> <operator pos:line="147" pos:column="16">==<pos:position pos:line="147" pos:column="18"/></operator> <name pos:line="147" pos:column="19">WAIT_FAILED<pos:position pos:line="147" pos:column="30"/></name></expr>)<pos:position pos:line="147" pos:column="31"/></condition><then pos:line="147" pos:column="31"> <block pos:line="147" pos:column="32">{
            <expr_stmt><expr><call><name pos:line="148" pos:column="13">CloseHandle<pos:position pos:line="148" pos:column="24"/></name><argument_list pos:line="148" pos:column="24">(<argument><expr><name pos:line="148" pos:column="25">cond<pos:position pos:line="148" pos:column="29"/></name></expr></argument>)<pos:position pos:line="148" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="31"/></expr_stmt>
            <return pos:line="149" pos:column="13">return <expr><literal type="number" pos:line="149" pos:column="20">1<pos:position pos:line="149" pos:column="21"/></literal></expr>;<pos:position pos:line="149" pos:column="22"/></return>
        }<pos:position pos:line="150" pos:column="10"/></block></then></if>

        <expr_stmt><expr><operator pos:line="152" pos:column="9">*<pos:position pos:line="152" pos:column="10"/></operator><name><name pos:line="152" pos:column="10">done_queue<pos:position pos:line="152" pos:column="20"/></name><operator pos:line="152" pos:column="20">.<pos:position pos:line="152" pos:column="21"/></operator><name pos:line="152" pos:column="21">tailp<pos:position pos:line="152" pos:column="26"/></name></name> <operator pos:line="152" pos:column="27">=<pos:position pos:line="152" pos:column="28"/></operator> <name pos:line="152" pos:column="29">request<pos:position pos:line="152" pos:column="36"/></name></expr>;<pos:position pos:line="152" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="153" pos:column="9">done_queue<pos:position pos:line="153" pos:column="19"/></name><operator pos:line="153" pos:column="19">.<pos:position pos:line="153" pos:column="20"/></operator><name pos:line="153" pos:column="20">tailp<pos:position pos:line="153" pos:column="25"/></name></name> <operator pos:line="153" pos:column="26">=<pos:position pos:line="153" pos:column="27"/></operator> <operator pos:line="153" pos:column="28">&amp;<pos:position pos:line="153" pos:column="33"/></operator><name><name pos:line="153" pos:column="29">request<pos:position pos:line="153" pos:column="36"/></name><operator pos:line="153" pos:column="36">-&gt;<pos:position pos:line="153" pos:column="41"/></operator><name pos:line="153" pos:column="38">next<pos:position pos:line="153" pos:column="42"/></name></name></expr>;<pos:position pos:line="153" pos:column="43"/></expr_stmt>

        <if pos:line="155" pos:column="9">if <condition pos:line="155" pos:column="12">(<expr><operator pos:line="155" pos:column="13">!<pos:position pos:line="155" pos:column="14"/></operator><call><name pos:line="155" pos:column="14">ReleaseMutex<pos:position pos:line="155" pos:column="26"/></name><argument_list pos:line="155" pos:column="26">(<argument><expr><name><name pos:line="155" pos:column="27">done_queue<pos:position pos:line="155" pos:column="37"/></name><operator pos:line="155" pos:column="37">.<pos:position pos:line="155" pos:column="38"/></operator><name pos:line="155" pos:column="38">mutex<pos:position pos:line="155" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="155" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="155" pos:column="45"/></condition><then pos:line="155" pos:column="45"> <block pos:line="155" pos:column="46">{
            <expr_stmt><expr><call><name pos:line="156" pos:column="13">CloseHandle<pos:position pos:line="156" pos:column="24"/></name><argument_list pos:line="156" pos:column="24">(<argument><expr><name pos:line="156" pos:column="25">cond<pos:position pos:line="156" pos:column="29"/></name></expr></argument>)<pos:position pos:line="156" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="31"/></expr_stmt>
            <return pos:line="157" pos:column="13">return <expr><literal type="number" pos:line="157" pos:column="20">1<pos:position pos:line="157" pos:column="21"/></literal></expr>;<pos:position pos:line="157" pos:column="22"/></return>
        }<pos:position pos:line="158" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name><name pos:line="160" pos:column="9">CommIO<pos:position pos:line="160" pos:column="15"/></name><operator pos:line="160" pos:column="15">::<pos:position pos:line="160" pos:column="17"/></operator><name pos:line="160" pos:column="17">NotifyIOCompleted<pos:position pos:line="160" pos:column="34"/></name></name><argument_list pos:line="160" pos:column="34">()<pos:position pos:line="160" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="160" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="161" pos:column="9">Sleep<pos:position pos:line="161" pos:column="14"/></name><argument_list pos:line="161" pos:column="14">(<argument><expr><literal type="number" pos:line="161" pos:column="15">0<pos:position pos:line="161" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="161" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="161" pos:column="18"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="162" pos:column="9">++<pos:position pos:line="162" pos:column="11"/></operator> <name><name pos:line="162" pos:column="12">threadp<pos:position pos:line="162" pos:column="19"/></name><operator pos:line="162" pos:column="19">-&gt;<pos:position pos:line="162" pos:column="24"/></operator><name pos:line="162" pos:column="21">requests<pos:position pos:line="162" pos:column="29"/></name></name></expr>;<pos:position pos:line="162" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="163" pos:column="6"/></block></while>               <comment type="block" pos:line="163" pos:column="21">/* while forever */</comment>

    <expr_stmt><expr><call><name pos:line="165" pos:column="5">CloseHandle<pos:position pos:line="165" pos:column="16"/></name><argument_list pos:line="165" pos:column="16">(<argument><expr><name pos:line="165" pos:column="17">cond<pos:position pos:line="165" pos:column="21"/></name></expr></argument>)<pos:position pos:line="165" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="165" pos:column="23"/></expr_stmt>

    <return pos:line="167" pos:column="5">return <expr><literal type="number" pos:line="167" pos:column="12">0<pos:position pos:line="167" pos:column="13"/></literal></expr>;<pos:position pos:line="167" pos:column="14"/></return>
}<pos:position pos:line="168" pos:column="2"/></block></function></unit>
