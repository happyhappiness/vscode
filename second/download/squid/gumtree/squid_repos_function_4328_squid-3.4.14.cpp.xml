<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4328_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ssl<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">CertValidationMsg<pos:position pos:line="2" pos:column="23"/></name><operator pos:line="2" pos:column="23">::<pos:position pos:line="2" pos:column="25"/></operator><name pos:line="2" pos:column="25">composeRequest<pos:position pos:line="2" pos:column="39"/></name></name><parameter_list pos:line="2" pos:column="39">(<parameter><decl><type><name pos:line="2" pos:column="40">CertValidationRequest<pos:position pos:line="2" pos:column="61"/></name> <specifier pos:line="2" pos:column="62">const<pos:position pos:line="2" pos:column="67"/></specifier> <modifier pos:line="2" pos:column="68">&amp;<pos:position pos:line="2" pos:column="73"/></modifier></type><name pos:line="2" pos:column="69">vcert<pos:position pos:line="2" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="75"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name><name pos:line="4" pos:column="5">body<pos:position pos:line="4" pos:column="9"/></name><operator pos:line="4" pos:column="9">.<pos:position pos:line="4" pos:column="10"/></operator><name pos:line="4" pos:column="10">clear<pos:position pos:line="4" pos:column="15"/></name></name><argument_list pos:line="4" pos:column="15">()<pos:position pos:line="4" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><name pos:line="5" pos:column="5">body<pos:position pos:line="5" pos:column="9"/></name> <operator pos:line="5" pos:column="10">+=<pos:position pos:line="5" pos:column="12"/></operator> <name><name pos:line="5" pos:column="13">Ssl<pos:position pos:line="5" pos:column="16"/></name><operator pos:line="5" pos:column="16">::<pos:position pos:line="5" pos:column="18"/></operator><name pos:line="5" pos:column="18">CertValidationMsg<pos:position pos:line="5" pos:column="35"/></name><operator pos:line="5" pos:column="35">::<pos:position pos:line="5" pos:column="37"/></operator><name pos:line="5" pos:column="37">param_host<pos:position pos:line="5" pos:column="47"/></name></name> <operator pos:line="5" pos:column="48">+<pos:position pos:line="5" pos:column="49"/></operator> <literal type="string" pos:line="5" pos:column="50">"="<pos:position pos:line="5" pos:column="53"/></literal> <operator pos:line="5" pos:column="54">+<pos:position pos:line="5" pos:column="55"/></operator> <name><name pos:line="5" pos:column="56">vcert<pos:position pos:line="5" pos:column="61"/></name><operator pos:line="5" pos:column="61">.<pos:position pos:line="5" pos:column="62"/></operator><name pos:line="5" pos:column="62">domainName<pos:position pos:line="5" pos:column="72"/></name></name></expr>;<pos:position pos:line="5" pos:column="73"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">STACK_OF<pos:position pos:line="6" pos:column="13"/></name><argument_list pos:line="6" pos:column="13">(<argument><expr><name pos:line="6" pos:column="14">X509<pos:position pos:line="6" pos:column="18"/></name></expr></argument>)<pos:position pos:line="6" pos:column="19"/></argument_list></call> <operator pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></operator><name pos:line="6" pos:column="21">peerCerts<pos:position pos:line="6" pos:column="30"/></name> <operator pos:line="6" pos:column="31">=<pos:position pos:line="6" pos:column="32"/></operator> static_cast<operator pos:line="6" pos:column="44">&lt;<pos:position pos:line="6" pos:column="48"/></operator><call><name pos:line="6" pos:column="45">STACK_OF<pos:position pos:line="6" pos:column="53"/></name><argument_list pos:line="6" pos:column="53">(<argument><expr><name pos:line="6" pos:column="54">X509<pos:position pos:line="6" pos:column="58"/></name></expr></argument>)<pos:position pos:line="6" pos:column="59"/></argument_list></call> <operator pos:line="6" pos:column="60">*<pos:position pos:line="6" pos:column="61"/></operator><operator pos:line="6" pos:column="61">&gt;<pos:position pos:line="6" pos:column="65"/></operator><operator pos:line="6" pos:column="62">(<pos:position pos:line="6" pos:column="63"/></operator><call><name pos:line="6" pos:column="63">SSL_get_ex_data<pos:position pos:line="6" pos:column="78"/></name><argument_list pos:line="6" pos:column="78">(<argument><expr><name><name pos:line="6" pos:column="79">vcert<pos:position pos:line="6" pos:column="84"/></name><operator pos:line="6" pos:column="84">.<pos:position pos:line="6" pos:column="85"/></operator><name pos:line="6" pos:column="85">ssl<pos:position pos:line="6" pos:column="88"/></name></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="90">ssl_ex_index_ssl_cert_chain<pos:position pos:line="6" pos:column="117"/></name></expr></argument>)<pos:position pos:line="6" pos:column="118"/></argument_list></call><operator pos:line="6" pos:column="118">)<pos:position pos:line="6" pos:column="119"/></operator></expr>;<pos:position pos:line="6" pos:column="120"/></expr_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><operator pos:line="8" pos:column="9">!<pos:position pos:line="8" pos:column="10"/></operator><name pos:line="8" pos:column="10">peerCerts<pos:position pos:line="8" pos:column="19"/></name></expr>)<pos:position pos:line="8" pos:column="20"/></condition><then pos:line="8" pos:column="20">
        <block type="pseudo"><expr_stmt><expr><name pos:line="9" pos:column="9">peerCerts<pos:position pos:line="9" pos:column="18"/></name> <operator pos:line="9" pos:column="19">=<pos:position pos:line="9" pos:column="20"/></operator> <call><name pos:line="9" pos:column="21">SSL_get_peer_cert_chain<pos:position pos:line="9" pos:column="44"/></name><argument_list pos:line="9" pos:column="44">(<argument><expr><name><name pos:line="9" pos:column="45">vcert<pos:position pos:line="9" pos:column="50"/></name><operator pos:line="9" pos:column="50">.<pos:position pos:line="9" pos:column="51"/></operator><name pos:line="9" pos:column="51">ssl<pos:position pos:line="9" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="56"/></expr_stmt></block></then></if>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name pos:line="11" pos:column="9">peerCerts<pos:position pos:line="11" pos:column="18"/></name></expr>)<pos:position pos:line="11" pos:column="19"/></condition><then pos:line="11" pos:column="19"> <block pos:line="11" pos:column="20">{
        <decl_stmt><decl><type><name><name pos:line="12" pos:column="9">Ssl<pos:position pos:line="12" pos:column="12"/></name><operator pos:line="12" pos:column="12">::<pos:position pos:line="12" pos:column="14"/></operator><name pos:line="12" pos:column="14">BIO_Pointer<pos:position pos:line="12" pos:column="25"/></name></name></type> <name pos:line="12" pos:column="26">bio<pos:position pos:line="12" pos:column="29"/></name><argument_list pos:line="12" pos:column="29">(<argument><expr><call><name pos:line="12" pos:column="30">BIO_new<pos:position pos:line="12" pos:column="37"/></name><argument_list pos:line="12" pos:column="37">(<argument><expr><call><name pos:line="12" pos:column="38">BIO_s_mem<pos:position pos:line="12" pos:column="47"/></name><argument_list pos:line="12" pos:column="47">()<pos:position pos:line="12" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="51"/></argument_list></decl>;<pos:position pos:line="12" pos:column="52"/></decl_stmt>
        <for pos:line="13" pos:column="9">for <control pos:line="13" pos:column="13">(<init><decl><type><name pos:line="13" pos:column="14">int<pos:position pos:line="13" pos:column="17"/></name></type> <name pos:line="13" pos:column="18">i<pos:position pos:line="13" pos:column="19"/></name> <init pos:line="13" pos:column="20">= <expr><literal type="number" pos:line="13" pos:column="22">0<pos:position pos:line="13" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="24"/></init> <condition><expr><name pos:line="13" pos:column="25">i<pos:position pos:line="13" pos:column="26"/></name> <operator pos:line="13" pos:column="27">&lt;<pos:position pos:line="13" pos:column="31"/></operator> <call><name pos:line="13" pos:column="29">sk_X509_num<pos:position pos:line="13" pos:column="40"/></name><argument_list pos:line="13" pos:column="40">(<argument><expr><name pos:line="13" pos:column="41">peerCerts<pos:position pos:line="13" pos:column="50"/></name></expr></argument>)<pos:position pos:line="13" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="52"/></condition> <incr><expr><operator pos:line="13" pos:column="53">++<pos:position pos:line="13" pos:column="55"/></operator><name pos:line="13" pos:column="55">i<pos:position pos:line="13" pos:column="56"/></name></expr></incr>)<pos:position pos:line="13" pos:column="57"/></control> <block pos:line="13" pos:column="58">{
            <decl_stmt><decl><type><name pos:line="14" pos:column="13">X509<pos:position pos:line="14" pos:column="17"/></name> <modifier pos:line="14" pos:column="18">*<pos:position pos:line="14" pos:column="19"/></modifier></type><name pos:line="14" pos:column="19">cert<pos:position pos:line="14" pos:column="23"/></name> <init pos:line="14" pos:column="24">= <expr><call><name pos:line="14" pos:column="26">sk_X509_value<pos:position pos:line="14" pos:column="39"/></name><argument_list pos:line="14" pos:column="39">(<argument><expr><name pos:line="14" pos:column="40">peerCerts<pos:position pos:line="14" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="51">i<pos:position pos:line="14" pos:column="52"/></name></expr></argument>)<pos:position pos:line="14" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="54"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="15" pos:column="13">PEM_write_bio_X509<pos:position pos:line="15" pos:column="31"/></name><argument_list pos:line="15" pos:column="31">(<argument><expr><call><name><name pos:line="15" pos:column="32">bio<pos:position pos:line="15" pos:column="35"/></name><operator pos:line="15" pos:column="35">.<pos:position pos:line="15" pos:column="36"/></operator><name pos:line="15" pos:column="36">get<pos:position pos:line="15" pos:column="39"/></name></name><argument_list pos:line="15" pos:column="39">()<pos:position pos:line="15" pos:column="41"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="15" pos:column="43">cert<pos:position pos:line="15" pos:column="47"/></name></expr></argument>)<pos:position pos:line="15" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="49"/></expr_stmt>
            <expr_stmt><expr><name pos:line="16" pos:column="13">body<pos:position pos:line="16" pos:column="17"/></name> <operator pos:line="16" pos:column="18">=<pos:position pos:line="16" pos:column="19"/></operator> <name pos:line="16" pos:column="20">body<pos:position pos:line="16" pos:column="24"/></name> <operator pos:line="16" pos:column="25">+<pos:position pos:line="16" pos:column="26"/></operator> <literal type="string" pos:line="16" pos:column="27">"\n"<pos:position pos:line="16" pos:column="31"/></literal> <operator pos:line="16" pos:column="32">+<pos:position pos:line="16" pos:column="33"/></operator> <name pos:line="16" pos:column="34">param_cert<pos:position pos:line="16" pos:column="44"/></name> <operator pos:line="16" pos:column="45">+<pos:position pos:line="16" pos:column="46"/></operator> <call><name pos:line="16" pos:column="47">xitoa<pos:position pos:line="16" pos:column="52"/></name><argument_list pos:line="16" pos:column="52">(<argument><expr><name pos:line="16" pos:column="53">i<pos:position pos:line="16" pos:column="54"/></name></expr></argument>)<pos:position pos:line="16" pos:column="55"/></argument_list></call> <operator pos:line="16" pos:column="56">+<pos:position pos:line="16" pos:column="57"/></operator> <literal type="string" pos:line="16" pos:column="58">"="<pos:position pos:line="16" pos:column="61"/></literal></expr>;<pos:position pos:line="16" pos:column="62"/></expr_stmt>
            <decl_stmt><decl><type><name pos:line="17" pos:column="13">char<pos:position pos:line="17" pos:column="17"/></name> <modifier pos:line="17" pos:column="18">*<pos:position pos:line="17" pos:column="19"/></modifier></type><name pos:line="17" pos:column="19">ptr<pos:position pos:line="17" pos:column="22"/></name></decl>;<pos:position pos:line="17" pos:column="23"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="18" pos:column="13">long<pos:position pos:line="18" pos:column="17"/></name></type> <name pos:line="18" pos:column="18">len<pos:position pos:line="18" pos:column="21"/></name> <init pos:line="18" pos:column="22">= <expr><call><name pos:line="18" pos:column="24">BIO_get_mem_data<pos:position pos:line="18" pos:column="40"/></name><argument_list pos:line="18" pos:column="40">(<argument><expr><call><name><name pos:line="18" pos:column="41">bio<pos:position pos:line="18" pos:column="44"/></name><operator pos:line="18" pos:column="44">.<pos:position pos:line="18" pos:column="45"/></operator><name pos:line="18" pos:column="45">get<pos:position pos:line="18" pos:column="48"/></name></name><argument_list pos:line="18" pos:column="48">()<pos:position pos:line="18" pos:column="50"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="18" pos:column="52">&amp;<pos:position pos:line="18" pos:column="57"/></operator><name pos:line="18" pos:column="53">ptr<pos:position pos:line="18" pos:column="56"/></name></expr></argument>)<pos:position pos:line="18" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="18" pos:column="58"/></decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="19" pos:column="13">body<pos:position pos:line="19" pos:column="17"/></name><operator pos:line="19" pos:column="17">.<pos:position pos:line="19" pos:column="18"/></operator><name pos:line="19" pos:column="18">append<pos:position pos:line="19" pos:column="24"/></name></name><argument_list pos:line="19" pos:column="24">(<argument><expr><name pos:line="19" pos:column="25">ptr<pos:position pos:line="19" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="30">(<pos:position pos:line="19" pos:column="31"/></operator><ternary><condition><expr><name><name pos:line="19" pos:column="31">ptr<pos:position pos:line="19" pos:column="34"/></name><index pos:line="19" pos:column="34">[<expr><name pos:line="19" pos:column="35">len<pos:position pos:line="19" pos:column="38"/></name><operator pos:line="19" pos:column="38">-<pos:position pos:line="19" pos:column="39"/></operator><literal type="number" pos:line="19" pos:column="39">1<pos:position pos:line="19" pos:column="40"/></literal></expr>]<pos:position pos:line="19" pos:column="41"/></index></name> <operator pos:line="19" pos:column="42">==<pos:position pos:line="19" pos:column="44"/></operator> <literal type="char" pos:line="19" pos:column="45">'\n'<pos:position pos:line="19" pos:column="49"/></literal></expr> ?<pos:position pos:line="19" pos:column="51"/></condition><then pos:line="19" pos:column="51"> <expr><name pos:line="19" pos:column="52">len<pos:position pos:line="19" pos:column="55"/></name> <operator pos:line="19" pos:column="56">-<pos:position pos:line="19" pos:column="57"/></operator> <literal type="number" pos:line="19" pos:column="58">1<pos:position pos:line="19" pos:column="59"/></literal></expr> <pos:position pos:line="19" pos:column="60"/></then><else pos:line="19" pos:column="60">: <expr><name pos:line="19" pos:column="62">len<pos:position pos:line="19" pos:column="65"/></name></expr></else></ternary><operator pos:line="19" pos:column="65">)<pos:position pos:line="19" pos:column="66"/></operator></expr></argument>)<pos:position pos:line="19" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="68"/></expr_stmt>
            <if pos:line="20" pos:column="13">if <condition pos:line="20" pos:column="16">(<expr><operator pos:line="20" pos:column="17">!<pos:position pos:line="20" pos:column="18"/></operator><call><name pos:line="20" pos:column="18">BIO_reset<pos:position pos:line="20" pos:column="27"/></name><argument_list pos:line="20" pos:column="27">(<argument><expr><call><name><name pos:line="20" pos:column="28">bio<pos:position pos:line="20" pos:column="31"/></name><operator pos:line="20" pos:column="31">.<pos:position pos:line="20" pos:column="32"/></operator><name pos:line="20" pos:column="32">get<pos:position pos:line="20" pos:column="35"/></name></name><argument_list pos:line="20" pos:column="35">()<pos:position pos:line="20" pos:column="37"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="39"/></condition><then pos:line="20" pos:column="39"> <block pos:line="20" pos:column="40">{
                <comment type="line" pos:line="21" pos:column="17">// print an error?</comment>
            }<pos:position pos:line="22" pos:column="14"/></block></then></if>
        }<pos:position pos:line="23" pos:column="10"/></block></for>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>

    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name><name pos:line="26" pos:column="9">vcert<pos:position pos:line="26" pos:column="14"/></name><operator pos:line="26" pos:column="14">.<pos:position pos:line="26" pos:column="15"/></operator><name pos:line="26" pos:column="15">errors<pos:position pos:line="26" pos:column="21"/></name></name></expr>)<pos:position pos:line="26" pos:column="22"/></condition><then pos:line="26" pos:column="22"> <block pos:line="26" pos:column="23">{
        <decl_stmt><decl><type><name pos:line="27" pos:column="9">int<pos:position pos:line="27" pos:column="12"/></name></type> <name pos:line="27" pos:column="13">i<pos:position pos:line="27" pos:column="14"/></name> <init pos:line="27" pos:column="15">= <expr><literal type="number" pos:line="27" pos:column="17">0<pos:position pos:line="27" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="27" pos:column="19"/></decl_stmt>
        <for pos:line="28" pos:column="9">for <control pos:line="28" pos:column="13">(<init><decl><type><specifier pos:line="28" pos:column="14">const<pos:position pos:line="28" pos:column="19"/></specifier> <name><name pos:line="28" pos:column="20">Ssl<pos:position pos:line="28" pos:column="23"/></name><operator pos:line="28" pos:column="23">::<pos:position pos:line="28" pos:column="25"/></operator><name pos:line="28" pos:column="25">CertErrors<pos:position pos:line="28" pos:column="35"/></name></name> <modifier pos:line="28" pos:column="36">*<pos:position pos:line="28" pos:column="37"/></modifier></type><name pos:line="28" pos:column="37">err<pos:position pos:line="28" pos:column="40"/></name> <init pos:line="28" pos:column="41">= <expr><name><name pos:line="28" pos:column="43">vcert<pos:position pos:line="28" pos:column="48"/></name><operator pos:line="28" pos:column="48">.<pos:position pos:line="28" pos:column="49"/></operator><name pos:line="28" pos:column="49">errors<pos:position pos:line="28" pos:column="55"/></name></name></expr></init></decl>;<pos:position pos:line="28" pos:column="56"/></init> <condition><expr><name pos:line="28" pos:column="57">err<pos:position pos:line="28" pos:column="60"/></name></expr>;<pos:position pos:line="28" pos:column="61"/></condition> <incr><expr><name pos:line="28" pos:column="62">err<pos:position pos:line="28" pos:column="65"/></name> <operator pos:line="28" pos:column="66">=<pos:position pos:line="28" pos:column="67"/></operator> <name><name pos:line="28" pos:column="68">err<pos:position pos:line="28" pos:column="71"/></name><operator pos:line="28" pos:column="71">-&gt;<pos:position pos:line="28" pos:column="76"/></operator><name pos:line="28" pos:column="73">next<pos:position pos:line="28" pos:column="77"/></name></name></expr><operator pos:line="28" pos:column="77">,<pos:position pos:line="28" pos:column="78"/></operator> <expr><operator pos:line="28" pos:column="79">++<pos:position pos:line="28" pos:column="81"/></operator><name pos:line="28" pos:column="81">i<pos:position pos:line="28" pos:column="82"/></name></expr></incr>)<pos:position pos:line="28" pos:column="83"/></control> <block pos:line="28" pos:column="84">{
            <expr_stmt><expr><name pos:line="29" pos:column="13">body<pos:position pos:line="29" pos:column="17"/></name> <operator pos:line="29" pos:column="18">+=<pos:position pos:line="29" pos:column="20"/></operator><literal type="string" pos:line="29" pos:column="20">"\n"<pos:position pos:line="29" pos:column="24"/></literal></expr>;<pos:position pos:line="29" pos:column="25"/></expr_stmt>
            <expr_stmt><expr><name pos:line="30" pos:column="13">body<pos:position pos:line="30" pos:column="17"/></name> <operator pos:line="30" pos:column="18">=<pos:position pos:line="30" pos:column="19"/></operator> <name pos:line="30" pos:column="20">body<pos:position pos:line="30" pos:column="24"/></name> <operator pos:line="30" pos:column="25">+<pos:position pos:line="30" pos:column="26"/></operator> <name pos:line="30" pos:column="27">param_error_name<pos:position pos:line="30" pos:column="43"/></name> <operator pos:line="30" pos:column="44">+<pos:position pos:line="30" pos:column="45"/></operator> <call><name pos:line="30" pos:column="46">xitoa<pos:position pos:line="30" pos:column="51"/></name><argument_list pos:line="30" pos:column="51">(<argument><expr><name pos:line="30" pos:column="52">i<pos:position pos:line="30" pos:column="53"/></name></expr></argument>)<pos:position pos:line="30" pos:column="54"/></argument_list></call> <operator pos:line="30" pos:column="55">+<pos:position pos:line="30" pos:column="56"/></operator> <literal type="string" pos:line="30" pos:column="57">"="<pos:position pos:line="30" pos:column="60"/></literal> <operator pos:line="30" pos:column="61">+<pos:position pos:line="30" pos:column="62"/></operator> <call><name pos:line="30" pos:column="63">GetErrorName<pos:position pos:line="30" pos:column="75"/></name><argument_list pos:line="30" pos:column="75">(<argument><expr><name><name pos:line="30" pos:column="76">err<pos:position pos:line="30" pos:column="79"/></name><operator pos:line="30" pos:column="79">-&gt;<pos:position pos:line="30" pos:column="84"/></operator><name pos:line="30" pos:column="81">element<pos:position pos:line="30" pos:column="88"/></name><operator pos:line="30" pos:column="88">.<pos:position pos:line="30" pos:column="89"/></operator><name pos:line="30" pos:column="89">code<pos:position pos:line="30" pos:column="93"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="94"/></argument_list></call> <operator pos:line="30" pos:column="95">+<pos:position pos:line="30" pos:column="96"/></operator> <literal type="string" pos:line="30" pos:column="97">"\n"<pos:position pos:line="30" pos:column="101"/></literal></expr>;<pos:position pos:line="30" pos:column="102"/></expr_stmt>
            <decl_stmt><decl><type><name pos:line="31" pos:column="13">int<pos:position pos:line="31" pos:column="16"/></name></type> <name pos:line="31" pos:column="17">errorCertPos<pos:position pos:line="31" pos:column="29"/></name> <init pos:line="31" pos:column="30">= <expr><operator pos:line="31" pos:column="32">-<pos:position pos:line="31" pos:column="33"/></operator><literal type="number" pos:line="31" pos:column="33">1<pos:position pos:line="31" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="31" pos:column="35"/></decl_stmt>
            <if pos:line="32" pos:column="13">if <condition pos:line="32" pos:column="16">(<expr><call><name><name pos:line="32" pos:column="17">err<pos:position pos:line="32" pos:column="20"/></name><operator pos:line="32" pos:column="20">-&gt;<pos:position pos:line="32" pos:column="25"/></operator><name pos:line="32" pos:column="22">element<pos:position pos:line="32" pos:column="29"/></name><operator pos:line="32" pos:column="29">.<pos:position pos:line="32" pos:column="30"/></operator><name pos:line="32" pos:column="30">cert<pos:position pos:line="32" pos:column="34"/></name><operator pos:line="32" pos:column="34">.<pos:position pos:line="32" pos:column="35"/></operator><name pos:line="32" pos:column="35">get<pos:position pos:line="32" pos:column="38"/></name></name><argument_list pos:line="32" pos:column="38">()<pos:position pos:line="32" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="41"/></condition><then pos:line="32" pos:column="41">
                <block type="pseudo"><expr_stmt><expr><name pos:line="33" pos:column="17">errorCertPos<pos:position pos:line="33" pos:column="29"/></name> <operator pos:line="33" pos:column="30">=<pos:position pos:line="33" pos:column="31"/></operator> <call><name pos:line="33" pos:column="32">sk_X509_find<pos:position pos:line="33" pos:column="44"/></name><argument_list pos:line="33" pos:column="44">(<argument><expr><name pos:line="33" pos:column="45">peerCerts<pos:position pos:line="33" pos:column="54"/></name></expr></argument>, <argument><expr><call><name><name pos:line="33" pos:column="56">err<pos:position pos:line="33" pos:column="59"/></name><operator pos:line="33" pos:column="59">-&gt;<pos:position pos:line="33" pos:column="64"/></operator><name pos:line="33" pos:column="61">element<pos:position pos:line="33" pos:column="68"/></name><operator pos:line="33" pos:column="68">.<pos:position pos:line="33" pos:column="69"/></operator><name pos:line="33" pos:column="69">cert<pos:position pos:line="33" pos:column="73"/></name><operator pos:line="33" pos:column="73">.<pos:position pos:line="33" pos:column="74"/></operator><name pos:line="33" pos:column="74">get<pos:position pos:line="33" pos:column="77"/></name></name><argument_list pos:line="33" pos:column="77">()<pos:position pos:line="33" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="81"/></expr_stmt></block></then></if>
            <if pos:line="34" pos:column="13">if <condition pos:line="34" pos:column="16">(<expr><name pos:line="34" pos:column="17">errorCertPos<pos:position pos:line="34" pos:column="29"/></name> <operator pos:line="34" pos:column="30">&lt;<pos:position pos:line="34" pos:column="34"/></operator> <literal type="number" pos:line="34" pos:column="32">0<pos:position pos:line="34" pos:column="33"/></literal></expr>)<pos:position pos:line="34" pos:column="34"/></condition><then pos:line="34" pos:column="34"> <block pos:line="34" pos:column="35">{
                <comment type="line" pos:line="35" pos:column="17">// assert this error ?</comment>
                <expr_stmt><expr><call><name pos:line="36" pos:column="17">debugs<pos:position pos:line="36" pos:column="23"/></name><argument_list pos:line="36" pos:column="23">(<argument><expr><literal type="number" pos:line="36" pos:column="24">83<pos:position pos:line="36" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="28">4<pos:position pos:line="36" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="31">"WARNING: wrong cert in cert validator request"<pos:position pos:line="36" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="80"/></expr_stmt>
            }<pos:position pos:line="37" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name pos:line="38" pos:column="13">body<pos:position pos:line="38" pos:column="17"/></name> <operator pos:line="38" pos:column="18">+=<pos:position pos:line="38" pos:column="20"/></operator> <name pos:line="38" pos:column="21">param_error_cert<pos:position pos:line="38" pos:column="37"/></name> <operator pos:line="38" pos:column="38">+<pos:position pos:line="38" pos:column="39"/></operator> <call><name pos:line="38" pos:column="40">xitoa<pos:position pos:line="38" pos:column="45"/></name><argument_list pos:line="38" pos:column="45">(<argument><expr><name pos:line="38" pos:column="46">i<pos:position pos:line="38" pos:column="47"/></name></expr></argument>)<pos:position pos:line="38" pos:column="48"/></argument_list></call> <operator pos:line="38" pos:column="49">+<pos:position pos:line="38" pos:column="50"/></operator> <literal type="string" pos:line="38" pos:column="51">"="<pos:position pos:line="38" pos:column="54"/></literal></expr>;<pos:position pos:line="38" pos:column="55"/></expr_stmt>
            <expr_stmt><expr><name pos:line="39" pos:column="13">body<pos:position pos:line="39" pos:column="17"/></name> <operator pos:line="39" pos:column="18">+=<pos:position pos:line="39" pos:column="20"/></operator> <name pos:line="39" pos:column="21">param_cert<pos:position pos:line="39" pos:column="31"/></name> <operator pos:line="39" pos:column="32">+<pos:position pos:line="39" pos:column="33"/></operator> <call><name pos:line="39" pos:column="34">xitoa<pos:position pos:line="39" pos:column="39"/></name><argument_list pos:line="39" pos:column="39">(<argument><expr><operator pos:line="39" pos:column="40">(<pos:position pos:line="39" pos:column="41"/></operator><ternary><condition><expr><name pos:line="39" pos:column="41">errorCertPos<pos:position pos:line="39" pos:column="53"/></name> <operator pos:line="39" pos:column="54">&gt;=<pos:position pos:line="39" pos:column="59"/></operator> <literal type="number" pos:line="39" pos:column="57">0<pos:position pos:line="39" pos:column="58"/></literal></expr> ?<pos:position pos:line="39" pos:column="60"/></condition><then pos:line="39" pos:column="60"> <expr><name pos:line="39" pos:column="61">errorCertPos<pos:position pos:line="39" pos:column="73"/></name></expr> <pos:position pos:line="39" pos:column="74"/></then><else pos:line="39" pos:column="74">: <expr><literal type="number" pos:line="39" pos:column="76">0<pos:position pos:line="39" pos:column="77"/></literal></expr></else></ternary><operator pos:line="39" pos:column="77">)<pos:position pos:line="39" pos:column="78"/></operator></expr></argument>)<pos:position pos:line="39" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="80"/></expr_stmt>
        }<pos:position pos:line="40" pos:column="10"/></block></for>
    }<pos:position pos:line="41" pos:column="6"/></block></then></if>
}<pos:position pos:line="42" pos:column="2"/></block></function></unit>
