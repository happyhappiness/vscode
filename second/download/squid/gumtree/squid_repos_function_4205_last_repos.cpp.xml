<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4205_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Acl<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">OptionsParser<pos:position pos:line="2" pos:column="19"/></name><operator pos:line="2" pos:column="19">::<pos:position pos:line="2" pos:column="21"/></operator><name pos:line="2" pos:column="21">parse<pos:position pos:line="2" pos:column="26"/></name></name><parameter_list pos:line="2" pos:column="26">()<pos:position pos:line="2" pos:column="28"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name><name pos:line="4" pos:column="5">flagsToSkip<pos:position pos:line="4" pos:column="16"/></name><operator pos:line="4" pos:column="16">.<pos:position pos:line="4" pos:column="17"/></operator><name pos:line="4" pos:column="17">clear<pos:position pos:line="4" pos:column="22"/></name></name><argument_list pos:line="4" pos:column="22">()<pos:position pos:line="4" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="25"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="6" pos:column="5">OptionExtractor<pos:position pos:line="6" pos:column="20"/></name></type> <name pos:line="6" pos:column="21">oex<pos:position pos:line="6" pos:column="24"/></name></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>
    <while pos:line="7" pos:column="5">while <condition pos:line="7" pos:column="11">(<expr><call><name><name pos:line="7" pos:column="12">oex<pos:position pos:line="7" pos:column="15"/></name><operator pos:line="7" pos:column="15">.<pos:position pos:line="7" pos:column="16"/></operator><name pos:line="7" pos:column="16">extractOne<pos:position pos:line="7" pos:column="26"/></name></name><argument_list pos:line="7" pos:column="26">()<pos:position pos:line="7" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="29"/></condition> <block pos:line="7" pos:column="30">{
        <comment type="block" pos:line="8" pos:column="9">/* const */</comment> <decl_stmt><decl><type><name pos:line="8" pos:column="21">auto<pos:position pos:line="8" pos:column="25"/></name></type> <name pos:line="8" pos:column="26">rawName<pos:position pos:line="8" pos:column="33"/></name> <init pos:line="8" pos:column="34">= <expr><name><name pos:line="8" pos:column="36">oex<pos:position pos:line="8" pos:column="39"/></name><operator pos:line="8" pos:column="39">.<pos:position pos:line="8" pos:column="40"/></operator><name pos:line="8" pos:column="40">name<pos:position pos:line="8" pos:column="44"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="45"/></decl_stmt>
        <if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<decl><type><specifier pos:line="9" pos:column="13">const<pos:position pos:line="9" pos:column="18"/></specifier> <name pos:line="9" pos:column="19">Option<pos:position pos:line="9" pos:column="25"/></name> <modifier pos:line="9" pos:column="26">*<pos:position pos:line="9" pos:column="27"/></modifier></type><name pos:line="9" pos:column="27">optionPtr<pos:position pos:line="9" pos:column="36"/></name> <init pos:line="9" pos:column="37">= <expr><call><name pos:line="9" pos:column="39">findOption<pos:position pos:line="9" pos:column="49"/></name><argument_list pos:line="9" pos:column="49">(<argument><expr><name pos:line="9" pos:column="50">rawName<pos:position pos:line="9" pos:column="57"/></name></expr></argument>)<pos:position pos:line="9" pos:column="58"/></argument_list></call></expr></init></decl>)<pos:position pos:line="9" pos:column="59"/></condition><then pos:line="9" pos:column="59"> <block pos:line="9" pos:column="60">{
            <decl_stmt><decl><type><specifier pos:line="10" pos:column="13">const<pos:position pos:line="10" pos:column="18"/></specifier> <name pos:line="10" pos:column="19">Option<pos:position pos:line="10" pos:column="25"/></name> <modifier pos:line="10" pos:column="26">&amp;<pos:position pos:line="10" pos:column="31"/></modifier></type><name pos:line="10" pos:column="27">option<pos:position pos:line="10" pos:column="33"/></name> <init pos:line="10" pos:column="34">= <expr><operator pos:line="10" pos:column="36">*<pos:position pos:line="10" pos:column="37"/></operator><name pos:line="10" pos:column="37">optionPtr<pos:position pos:line="10" pos:column="46"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="47"/></decl_stmt>
            <if pos:line="11" pos:column="13">if <condition pos:line="11" pos:column="16">(<expr><call><name><name pos:line="11" pos:column="17">option<pos:position pos:line="11" pos:column="23"/></name><operator pos:line="11" pos:column="23">.<pos:position pos:line="11" pos:column="24"/></operator><name pos:line="11" pos:column="24">configured<pos:position pos:line="11" pos:column="34"/></name></name><argument_list pos:line="11" pos:column="34">()<pos:position pos:line="11" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="37"/></condition><then pos:line="11" pos:column="37">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="17">debugs<pos:position pos:line="12" pos:column="23"/></name><argument_list pos:line="12" pos:column="23">(<argument><expr><literal type="number" pos:line="12" pos:column="24">28<pos:position pos:line="12" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="28">7<pos:position pos:line="12" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="31">"acl uses multiple "<pos:position pos:line="12" pos:column="51"/></literal> <operator pos:line="12" pos:column="52">&lt;&lt;<pos:position pos:line="12" pos:column="60"/></operator> <name pos:line="12" pos:column="55">rawName<pos:position pos:line="12" pos:column="62"/></name> <operator pos:line="12" pos:column="63">&lt;&lt;<pos:position pos:line="12" pos:column="71"/></operator> <literal type="string" pos:line="12" pos:column="66">" options"<pos:position pos:line="12" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="78"/></expr_stmt></block></then></if>
            <switch pos:line="13" pos:column="13">switch <condition pos:line="13" pos:column="20">(<expr><name><name pos:line="13" pos:column="21">option<pos:position pos:line="13" pos:column="27"/></name><operator pos:line="13" pos:column="27">.<pos:position pos:line="13" pos:column="28"/></operator><name pos:line="13" pos:column="28">valueExpectation<pos:position pos:line="13" pos:column="44"/></name></name></expr>)<pos:position pos:line="13" pos:column="45"/></condition>
            <block pos:line="14" pos:column="13">{
            <case pos:line="15" pos:column="13">case <expr><name><name pos:line="15" pos:column="18">Option<pos:position pos:line="15" pos:column="24"/></name><operator pos:line="15" pos:column="24">::<pos:position pos:line="15" pos:column="26"/></operator><name pos:line="15" pos:column="26">valueNone<pos:position pos:line="15" pos:column="35"/></name></name></expr>:<pos:position pos:line="15" pos:column="36"/></case>
                <if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><name><name pos:line="16" pos:column="21">oex<pos:position pos:line="16" pos:column="24"/></name><operator pos:line="16" pos:column="24">.<pos:position pos:line="16" pos:column="25"/></operator><name pos:line="16" pos:column="25">hasValue<pos:position pos:line="16" pos:column="33"/></name></name></expr>)<pos:position pos:line="16" pos:column="34"/></condition><then pos:line="16" pos:column="34">
                    <block type="pseudo"><throw pos:line="17" pos:column="21">throw <expr><call><name pos:line="17" pos:column="27">TexcHere<pos:position pos:line="17" pos:column="35"/></name><argument_list pos:line="17" pos:column="35">(<argument><expr><call><name pos:line="17" pos:column="36">ToSBuf<pos:position pos:line="17" pos:column="42"/></name><argument_list pos:line="17" pos:column="42">(<argument><expr><literal type="string" pos:line="17" pos:column="43">"unexpected value for an ACL option: "<pos:position pos:line="17" pos:column="81"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="83">rawName<pos:position pos:line="17" pos:column="90"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="17" pos:column="92">'='<pos:position pos:line="17" pos:column="95"/></literal></expr></argument>, <argument><expr><call><name><name pos:line="17" pos:column="97">oex<pos:position pos:line="17" pos:column="100"/></name><operator pos:line="17" pos:column="100">.<pos:position pos:line="17" pos:column="101"/></operator><name pos:line="17" pos:column="101">value<pos:position pos:line="17" pos:column="106"/></name></name><argument_list pos:line="17" pos:column="106">()<pos:position pos:line="17" pos:column="108"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="109"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="110"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="111"/></throw></block></then></if>
                <expr_stmt><expr><call><name><name pos:line="18" pos:column="17">option<pos:position pos:line="18" pos:column="23"/></name><operator pos:line="18" pos:column="23">.<pos:position pos:line="18" pos:column="24"/></operator><name pos:line="18" pos:column="24">configureDefault<pos:position pos:line="18" pos:column="40"/></name></name><argument_list pos:line="18" pos:column="40">()<pos:position pos:line="18" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="43"/></expr_stmt>
                <break pos:line="19" pos:column="17">break;<pos:position pos:line="19" pos:column="23"/></break>
            <case pos:line="20" pos:column="13">case <expr><name><name pos:line="20" pos:column="18">Option<pos:position pos:line="20" pos:column="24"/></name><operator pos:line="20" pos:column="24">::<pos:position pos:line="20" pos:column="26"/></operator><name pos:line="20" pos:column="26">valueRequired<pos:position pos:line="20" pos:column="39"/></name></name></expr>:<pos:position pos:line="20" pos:column="40"/></case>
                <if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><operator pos:line="21" pos:column="21">!<pos:position pos:line="21" pos:column="22"/></operator><name><name pos:line="21" pos:column="22">oex<pos:position pos:line="21" pos:column="25"/></name><operator pos:line="21" pos:column="25">.<pos:position pos:line="21" pos:column="26"/></operator><name pos:line="21" pos:column="26">hasValue<pos:position pos:line="21" pos:column="34"/></name></name></expr>)<pos:position pos:line="21" pos:column="35"/></condition><then pos:line="21" pos:column="35">
                    <block type="pseudo"><throw pos:line="22" pos:column="21">throw <expr><call><name pos:line="22" pos:column="27">TexcHere<pos:position pos:line="22" pos:column="35"/></name><argument_list pos:line="22" pos:column="35">(<argument><expr><call><name pos:line="22" pos:column="36">ToSBuf<pos:position pos:line="22" pos:column="42"/></name><argument_list pos:line="22" pos:column="42">(<argument><expr><literal type="string" pos:line="22" pos:column="43">"missing required value for ACL option "<pos:position pos:line="22" pos:column="83"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="85">rawName<pos:position pos:line="22" pos:column="92"/></name></expr></argument>)<pos:position pos:line="22" pos:column="93"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="95"/></throw></block></then></if>
                <expr_stmt><expr><call><name><name pos:line="23" pos:column="17">option<pos:position pos:line="23" pos:column="23"/></name><operator pos:line="23" pos:column="23">.<pos:position pos:line="23" pos:column="24"/></operator><name pos:line="23" pos:column="24">configureWith<pos:position pos:line="23" pos:column="37"/></name></name><argument_list pos:line="23" pos:column="37">(<argument><expr><call><name><name pos:line="23" pos:column="38">oex<pos:position pos:line="23" pos:column="41"/></name><operator pos:line="23" pos:column="41">.<pos:position pos:line="23" pos:column="42"/></operator><name pos:line="23" pos:column="42">value<pos:position pos:line="23" pos:column="47"/></name></name><argument_list pos:line="23" pos:column="47">()<pos:position pos:line="23" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="51"/></expr_stmt>
                <break pos:line="24" pos:column="17">break;<pos:position pos:line="24" pos:column="23"/></break>
            <case pos:line="25" pos:column="13">case <expr><name><name pos:line="25" pos:column="18">Option<pos:position pos:line="25" pos:column="24"/></name><operator pos:line="25" pos:column="24">::<pos:position pos:line="25" pos:column="26"/></operator><name pos:line="25" pos:column="26">valueOptional<pos:position pos:line="25" pos:column="39"/></name></name></expr>:<pos:position pos:line="25" pos:column="40"/></case>
                <if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><name><name pos:line="26" pos:column="21">oex<pos:position pos:line="26" pos:column="24"/></name><operator pos:line="26" pos:column="24">.<pos:position pos:line="26" pos:column="25"/></operator><name pos:line="26" pos:column="25">hasValue<pos:position pos:line="26" pos:column="33"/></name></name></expr>)<pos:position pos:line="26" pos:column="34"/></condition><then pos:line="26" pos:column="34">
                    <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="27" pos:column="21">option<pos:position pos:line="27" pos:column="27"/></name><operator pos:line="27" pos:column="27">.<pos:position pos:line="27" pos:column="28"/></operator><name pos:line="27" pos:column="28">configureWith<pos:position pos:line="27" pos:column="41"/></name></name><argument_list pos:line="27" pos:column="41">(<argument><expr><call><name><name pos:line="27" pos:column="42">oex<pos:position pos:line="27" pos:column="45"/></name><operator pos:line="27" pos:column="45">.<pos:position pos:line="27" pos:column="46"/></operator><name pos:line="27" pos:column="46">value<pos:position pos:line="27" pos:column="51"/></name></name><argument_list pos:line="27" pos:column="51">()<pos:position pos:line="27" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="55"/></expr_stmt></block></then>
                <else pos:line="28" pos:column="17">else
                    <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="29" pos:column="21">option<pos:position pos:line="29" pos:column="27"/></name><operator pos:line="29" pos:column="27">.<pos:position pos:line="29" pos:column="28"/></operator><name pos:line="29" pos:column="28">configureDefault<pos:position pos:line="29" pos:column="44"/></name></name><argument_list pos:line="29" pos:column="44">()<pos:position pos:line="29" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="47"/></expr_stmt></block></else></if>
                <break pos:line="30" pos:column="17">break;<pos:position pos:line="30" pos:column="23"/></break>
            }<pos:position pos:line="31" pos:column="14"/></block></switch>
        }<pos:position pos:line="32" pos:column="10"/></block></then></if>
        <comment type="line" pos:line="33" pos:column="9">// else skip supported parameter flag</comment>
    }<pos:position pos:line="34" pos:column="6"/></block></while>

    <comment type="block" pos:line="36" pos:column="5">/* hack: regex code wants to parse all -i and +i flags itself */</comment>
    <for pos:line="37" pos:column="5">for <control pos:line="37" pos:column="9">(<init><decl><type><specifier pos:line="37" pos:column="10">const<pos:position pos:line="37" pos:column="15"/></specifier> <specifier pos:line="37" pos:column="16">auto<pos:position pos:line="37" pos:column="20"/></specifier></type> <name pos:line="37" pos:column="21">name<pos:position pos:line="37" pos:column="25"/></name><range pos:line="37" pos:column="25">: <expr><name pos:line="37" pos:column="27">flagsToSkip<pos:position pos:line="37" pos:column="38"/></name></expr></range></decl></init>)<pos:position pos:line="37" pos:column="39"/></control>
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="38" pos:column="9">ConfigParser<pos:position pos:line="38" pos:column="21"/></name><operator pos:line="38" pos:column="21">::<pos:position pos:line="38" pos:column="23"/></operator><name pos:line="38" pos:column="23">TokenPutBack<pos:position pos:line="38" pos:column="35"/></name></name><argument_list pos:line="38" pos:column="35">(<argument><expr><name pos:line="38" pos:column="36">name<pos:position pos:line="38" pos:column="40"/></name></expr></argument>)<pos:position pos:line="38" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="42"/></expr_stmt></block></for>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
