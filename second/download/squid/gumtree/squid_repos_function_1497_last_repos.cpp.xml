<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1497_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type>
<name pos:line="2" pos:column="1">makeExternalAclKey<pos:position pos:line="2" pos:column="19"/></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name pos:line="2" pos:column="20">ACLFilledChecklist<pos:position pos:line="2" pos:column="38"/></name> <modifier pos:line="2" pos:column="39">*<pos:position pos:line="2" pos:column="40"/></modifier></type> <name pos:line="2" pos:column="41">ch<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="45">external_acl_data<pos:position pos:line="2" pos:column="62"/></name> <modifier pos:line="2" pos:column="63">*<pos:position pos:line="2" pos:column="64"/></modifier></type> <name pos:line="2" pos:column="65">acl_data<pos:position pos:line="2" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="74"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><specifier pos:line="4" pos:column="5">static<pos:position pos:line="4" pos:column="11"/></specifier> <type><name pos:line="4" pos:column="12">MemBuf<pos:position pos:line="4" pos:column="18"/></name></type> <name pos:line="4" pos:column="19">mb<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="5" pos:column="5">mb<pos:position pos:line="5" pos:column="7"/></name><operator pos:line="5" pos:column="7">.<pos:position pos:line="5" pos:column="8"/></operator><name pos:line="5" pos:column="8">reset<pos:position pos:line="5" pos:column="13"/></name></name><argument_list pos:line="5" pos:column="13">()<pos:position pos:line="5" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="16"/></expr_stmt>

    <comment type="line" pos:line="7" pos:column="5">// check for special case tokens in the format</comment>
    <for pos:line="8" pos:column="5">for <control pos:line="8" pos:column="9">(<init><decl><type><name><name pos:line="8" pos:column="10">Format<pos:position pos:line="8" pos:column="16"/></name><operator pos:line="8" pos:column="16">::<pos:position pos:line="8" pos:column="18"/></operator><name pos:line="8" pos:column="18">Token<pos:position pos:line="8" pos:column="23"/></name></name> <modifier pos:line="8" pos:column="24">*<pos:position pos:line="8" pos:column="25"/></modifier></type><name pos:line="8" pos:column="25">t<pos:position pos:line="8" pos:column="26"/></name> <init pos:line="8" pos:column="27">= <expr><name><name pos:line="8" pos:column="29">acl_data<pos:position pos:line="8" pos:column="37"/></name><operator pos:line="8" pos:column="37">-&gt;<pos:position pos:line="8" pos:column="42"/></operator><name pos:line="8" pos:column="39">def<pos:position pos:line="8" pos:column="42"/></name><operator pos:line="8" pos:column="42">-&gt;<pos:position pos:line="8" pos:column="47"/></operator><name pos:line="8" pos:column="44">format<pos:position pos:line="8" pos:column="50"/></name><operator pos:line="8" pos:column="50">.<pos:position pos:line="8" pos:column="51"/></operator><name pos:line="8" pos:column="51">format<pos:position pos:line="8" pos:column="57"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="58"/></init> <condition><expr><name pos:line="8" pos:column="59">t<pos:position pos:line="8" pos:column="60"/></name></expr> ;<pos:position pos:line="8" pos:column="62"/></condition> <incr><expr><name pos:line="8" pos:column="63">t<pos:position pos:line="8" pos:column="64"/></name> <operator pos:line="8" pos:column="65">=<pos:position pos:line="8" pos:column="66"/></operator> <name><name pos:line="8" pos:column="67">t<pos:position pos:line="8" pos:column="68"/></name><operator pos:line="8" pos:column="68">-&gt;<pos:position pos:line="8" pos:column="73"/></operator><name pos:line="8" pos:column="70">next<pos:position pos:line="8" pos:column="74"/></name></name></expr></incr>)<pos:position pos:line="8" pos:column="75"/></control> <block pos:line="8" pos:column="76">{

        <if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name><name pos:line="10" pos:column="13">t<pos:position pos:line="10" pos:column="14"/></name><operator pos:line="10" pos:column="14">-&gt;<pos:position pos:line="10" pos:column="19"/></operator><name pos:line="10" pos:column="16">type<pos:position pos:line="10" pos:column="20"/></name></name> <operator pos:line="10" pos:column="21">==<pos:position pos:line="10" pos:column="23"/></operator> <name><name pos:line="10" pos:column="24">Format<pos:position pos:line="10" pos:column="30"/></name><operator pos:line="10" pos:column="30">::<pos:position pos:line="10" pos:column="32"/></operator><name pos:line="10" pos:column="32">LFT_EXT_ACL_NAME<pos:position pos:line="10" pos:column="48"/></name></name></expr>)<pos:position pos:line="10" pos:column="49"/></condition><then pos:line="10" pos:column="49"> <block pos:line="10" pos:column="50">{
            <comment type="line" pos:line="11" pos:column="13">// setup for %ACL</comment>
            <expr_stmt><expr><call><name pos:line="12" pos:column="13">safe_free<pos:position pos:line="12" pos:column="22"/></name><argument_list pos:line="12" pos:column="22">(<argument><expr><name><name pos:line="12" pos:column="23">ch<pos:position pos:line="12" pos:column="25"/></name><operator pos:line="12" pos:column="25">-&gt;<pos:position pos:line="12" pos:column="30"/></operator><name pos:line="12" pos:column="27">al<pos:position pos:line="12" pos:column="29"/></name><operator pos:line="12" pos:column="29">-&gt;<pos:position pos:line="12" pos:column="34"/></operator><name pos:line="12" pos:column="31">lastAclName<pos:position pos:line="12" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="44"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="13" pos:column="13">ch<pos:position pos:line="13" pos:column="15"/></name><operator pos:line="13" pos:column="15">-&gt;<pos:position pos:line="13" pos:column="20"/></operator><name pos:line="13" pos:column="17">al<pos:position pos:line="13" pos:column="19"/></name><operator pos:line="13" pos:column="19">-&gt;<pos:position pos:line="13" pos:column="24"/></operator><name pos:line="13" pos:column="21">lastAclName<pos:position pos:line="13" pos:column="32"/></name></name> <operator pos:line="13" pos:column="33">=<pos:position pos:line="13" pos:column="34"/></operator> <call><name pos:line="13" pos:column="35">xstrdup<pos:position pos:line="13" pos:column="42"/></name><argument_list pos:line="13" pos:column="42">(<argument><expr><name><name pos:line="13" pos:column="43">acl_data<pos:position pos:line="13" pos:column="51"/></name><operator pos:line="13" pos:column="51">-&gt;<pos:position pos:line="13" pos:column="56"/></operator><name pos:line="13" pos:column="53">name<pos:position pos:line="13" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="59"/></expr_stmt>
        }<pos:position pos:line="14" pos:column="10"/></block></then></if>

        <if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name><name pos:line="16" pos:column="13">t<pos:position pos:line="16" pos:column="14"/></name><operator pos:line="16" pos:column="14">-&gt;<pos:position pos:line="16" pos:column="19"/></operator><name pos:line="16" pos:column="16">type<pos:position pos:line="16" pos:column="20"/></name></name> <operator pos:line="16" pos:column="21">==<pos:position pos:line="16" pos:column="23"/></operator> <name><name pos:line="16" pos:column="24">Format<pos:position pos:line="16" pos:column="30"/></name><operator pos:line="16" pos:column="30">::<pos:position pos:line="16" pos:column="32"/></operator><name pos:line="16" pos:column="32">LFT_EXT_ACL_DATA<pos:position pos:line="16" pos:column="48"/></name></name></expr>)<pos:position pos:line="16" pos:column="49"/></condition><then pos:line="16" pos:column="49"> <block pos:line="16" pos:column="50">{
            <comment type="line" pos:line="17" pos:column="13">// setup string for %DATA</comment>
            <decl_stmt><decl><type><name pos:line="18" pos:column="13">SBuf<pos:position pos:line="18" pos:column="17"/></name></type> <name pos:line="18" pos:column="18">sb<pos:position pos:line="18" pos:column="20"/></name></decl>;<pos:position pos:line="18" pos:column="21"/></decl_stmt>
            <for pos:line="19" pos:column="13">for <control pos:line="19" pos:column="17">(<init><decl><type><name pos:line="19" pos:column="18">auto<pos:position pos:line="19" pos:column="22"/></name></type> <name pos:line="19" pos:column="23">arg<pos:position pos:line="19" pos:column="26"/></name> <init pos:line="19" pos:column="27">= <expr><name><name pos:line="19" pos:column="29">acl_data<pos:position pos:line="19" pos:column="37"/></name><operator pos:line="19" pos:column="37">-&gt;<pos:position pos:line="19" pos:column="42"/></operator><name pos:line="19" pos:column="39">arguments<pos:position pos:line="19" pos:column="48"/></name></name></expr></init></decl>;<pos:position pos:line="19" pos:column="49"/></init> <condition><expr><name pos:line="19" pos:column="50">arg<pos:position pos:line="19" pos:column="53"/></name></expr>;<pos:position pos:line="19" pos:column="54"/></condition> <incr><expr><name pos:line="19" pos:column="55">arg<pos:position pos:line="19" pos:column="58"/></name> <operator pos:line="19" pos:column="59">=<pos:position pos:line="19" pos:column="60"/></operator> <name><name pos:line="19" pos:column="61">arg<pos:position pos:line="19" pos:column="64"/></name><operator pos:line="19" pos:column="64">-&gt;<pos:position pos:line="19" pos:column="69"/></operator><name pos:line="19" pos:column="66">next<pos:position pos:line="19" pos:column="70"/></name></name></expr></incr>)<pos:position pos:line="19" pos:column="71"/></control> <block pos:line="19" pos:column="72">{
                <if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><call><name><name pos:line="20" pos:column="21">sb<pos:position pos:line="20" pos:column="23"/></name><operator pos:line="20" pos:column="23">.<pos:position pos:line="20" pos:column="24"/></operator><name pos:line="20" pos:column="24">length<pos:position pos:line="20" pos:column="30"/></name></name><argument_list pos:line="20" pos:column="30">()<pos:position pos:line="20" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="33"/></condition><then pos:line="20" pos:column="33">
                    <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="21" pos:column="21">sb<pos:position pos:line="21" pos:column="23"/></name><operator pos:line="21" pos:column="23">.<pos:position pos:line="21" pos:column="24"/></operator><name pos:line="21" pos:column="24">append<pos:position pos:line="21" pos:column="30"/></name></name><argument_list pos:line="21" pos:column="30">(<argument><expr><literal type="string" pos:line="21" pos:column="31">" "<pos:position pos:line="21" pos:column="34"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="36">1<pos:position pos:line="21" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="39"/></expr_stmt></block></then></if>

                <if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><name><name pos:line="23" pos:column="21">acl_data<pos:position pos:line="23" pos:column="29"/></name><operator pos:line="23" pos:column="29">-&gt;<pos:position pos:line="23" pos:column="34"/></operator><name pos:line="23" pos:column="31">def<pos:position pos:line="23" pos:column="34"/></name><operator pos:line="23" pos:column="34">-&gt;<pos:position pos:line="23" pos:column="39"/></operator><name pos:line="23" pos:column="36">quote<pos:position pos:line="23" pos:column="41"/></name></name> <operator pos:line="23" pos:column="42">==<pos:position pos:line="23" pos:column="44"/></operator> <name><name pos:line="23" pos:column="45">Format<pos:position pos:line="23" pos:column="51"/></name><operator pos:line="23" pos:column="51">::<pos:position pos:line="23" pos:column="53"/></operator><name pos:line="23" pos:column="53">LOG_QUOTE_URL<pos:position pos:line="23" pos:column="66"/></name></name></expr>)<pos:position pos:line="23" pos:column="67"/></condition><then pos:line="23" pos:column="67"> <block pos:line="23" pos:column="68">{
                    <decl_stmt><decl><type><specifier pos:line="24" pos:column="21">const<pos:position pos:line="24" pos:column="26"/></specifier> <name pos:line="24" pos:column="27">char<pos:position pos:line="24" pos:column="31"/></name> <modifier pos:line="24" pos:column="32">*<pos:position pos:line="24" pos:column="33"/></modifier></type><name pos:line="24" pos:column="33">quoted<pos:position pos:line="24" pos:column="39"/></name> <init pos:line="24" pos:column="40">= <expr><call><name pos:line="24" pos:column="42">rfc1738_escape<pos:position pos:line="24" pos:column="56"/></name><argument_list pos:line="24" pos:column="56">(<argument><expr><name><name pos:line="24" pos:column="57">arg<pos:position pos:line="24" pos:column="60"/></name><operator pos:line="24" pos:column="60">-&gt;<pos:position pos:line="24" pos:column="65"/></operator><name pos:line="24" pos:column="62">key<pos:position pos:line="24" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="66"/></argument_list></call></expr></init></decl>;<pos:position pos:line="24" pos:column="67"/></decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="25" pos:column="21">sb<pos:position pos:line="25" pos:column="23"/></name><operator pos:line="25" pos:column="23">.<pos:position pos:line="25" pos:column="24"/></operator><name pos:line="25" pos:column="24">append<pos:position pos:line="25" pos:column="30"/></name></name><argument_list pos:line="25" pos:column="30">(<argument><expr><name pos:line="25" pos:column="31">quoted<pos:position pos:line="25" pos:column="37"/></name></expr></argument>, <argument><expr><call><name pos:line="25" pos:column="39">strlen<pos:position pos:line="25" pos:column="45"/></name><argument_list pos:line="25" pos:column="45">(<argument><expr><name pos:line="25" pos:column="46">quoted<pos:position pos:line="25" pos:column="52"/></name></expr></argument>)<pos:position pos:line="25" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="55"/></expr_stmt>
                }<pos:position pos:line="26" pos:column="18"/></block></then> <else pos:line="26" pos:column="19">else <block pos:line="26" pos:column="24">{
                    <decl_stmt><decl><specifier pos:line="27" pos:column="21">static<pos:position pos:line="27" pos:column="27"/></specifier> <type><name pos:line="27" pos:column="28">MemBuf<pos:position pos:line="27" pos:column="34"/></name></type> <name pos:line="27" pos:column="35">mb2<pos:position pos:line="27" pos:column="38"/></name></decl>;<pos:position pos:line="27" pos:column="39"/></decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="28" pos:column="21">mb2<pos:position pos:line="28" pos:column="24"/></name><operator pos:line="28" pos:column="24">.<pos:position pos:line="28" pos:column="25"/></operator><name pos:line="28" pos:column="25">init<pos:position pos:line="28" pos:column="29"/></name></name><argument_list pos:line="28" pos:column="29">()<pos:position pos:line="28" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="32"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="29" pos:column="21">strwordquote<pos:position pos:line="29" pos:column="33"/></name><argument_list pos:line="29" pos:column="33">(<argument><expr><operator pos:line="29" pos:column="34">&amp;<pos:position pos:line="29" pos:column="39"/></operator><name pos:line="29" pos:column="35">mb2<pos:position pos:line="29" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="40">arg<pos:position pos:line="29" pos:column="43"/></name><operator pos:line="29" pos:column="43">-&gt;<pos:position pos:line="29" pos:column="48"/></operator><name pos:line="29" pos:column="45">key<pos:position pos:line="29" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="50"/></expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="30" pos:column="21">sb<pos:position pos:line="30" pos:column="23"/></name><operator pos:line="30" pos:column="23">.<pos:position pos:line="30" pos:column="24"/></operator><name pos:line="30" pos:column="24">append<pos:position pos:line="30" pos:column="30"/></name></name><argument_list pos:line="30" pos:column="30">(<argument><expr><name><name pos:line="30" pos:column="31">mb2<pos:position pos:line="30" pos:column="34"/></name><operator pos:line="30" pos:column="34">.<pos:position pos:line="30" pos:column="35"/></operator><name pos:line="30" pos:column="35">buf<pos:position pos:line="30" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="40">mb2<pos:position pos:line="30" pos:column="43"/></name><operator pos:line="30" pos:column="43">.<pos:position pos:line="30" pos:column="44"/></operator><name pos:line="30" pos:column="44">size<pos:position pos:line="30" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="50"/></expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="31" pos:column="21">mb2<pos:position pos:line="31" pos:column="24"/></name><operator pos:line="31" pos:column="24">.<pos:position pos:line="31" pos:column="25"/></operator><name pos:line="31" pos:column="25">clean<pos:position pos:line="31" pos:column="30"/></name></name><argument_list pos:line="31" pos:column="30">()<pos:position pos:line="31" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="33"/></expr_stmt>
                }<pos:position pos:line="32" pos:column="18"/></block></else></if>
            }<pos:position pos:line="33" pos:column="14"/></block></for>

            <expr_stmt><expr><name><name pos:line="35" pos:column="13">ch<pos:position pos:line="35" pos:column="15"/></name><operator pos:line="35" pos:column="15">-&gt;<pos:position pos:line="35" pos:column="20"/></operator><name pos:line="35" pos:column="17">al<pos:position pos:line="35" pos:column="19"/></name><operator pos:line="35" pos:column="19">-&gt;<pos:position pos:line="35" pos:column="24"/></operator><name pos:line="35" pos:column="21">lastAclData<pos:position pos:line="35" pos:column="32"/></name></name> <operator pos:line="35" pos:column="33">=<pos:position pos:line="35" pos:column="34"/></operator> <name pos:line="35" pos:column="35">sb<pos:position pos:line="35" pos:column="37"/></name></expr>;<pos:position pos:line="35" pos:column="38"/></expr_stmt>
        }<pos:position pos:line="36" pos:column="10"/></block></then></if>

<cpp:if pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">if<pos:position pos:line="38" pos:column="4"/></cpp:directive> <expr><name pos:line="38" pos:column="5">USE_IDENT<pos:position pos:line="38" pos:column="14"/></name></expr></cpp:if>
        <if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><name><name pos:line="39" pos:column="13">t<pos:position pos:line="39" pos:column="14"/></name><operator pos:line="39" pos:column="14">-&gt;<pos:position pos:line="39" pos:column="19"/></operator><name pos:line="39" pos:column="16">type<pos:position pos:line="39" pos:column="20"/></name></name> <operator pos:line="39" pos:column="21">==<pos:position pos:line="39" pos:column="23"/></operator> <name><name pos:line="39" pos:column="24">Format<pos:position pos:line="39" pos:column="30"/></name><operator pos:line="39" pos:column="30">::<pos:position pos:line="39" pos:column="32"/></operator><name pos:line="39" pos:column="32">LFT_USER_IDENT<pos:position pos:line="39" pos:column="46"/></name></name></expr>)<pos:position pos:line="39" pos:column="47"/></condition><then pos:line="39" pos:column="47"> <block pos:line="39" pos:column="48">{
            <if pos:line="40" pos:column="13">if <condition pos:line="40" pos:column="16">(<expr><operator pos:line="40" pos:column="17">!<pos:position pos:line="40" pos:column="18"/></operator><operator pos:line="40" pos:column="18">*<pos:position pos:line="40" pos:column="19"/></operator><name><name pos:line="40" pos:column="19">ch<pos:position pos:line="40" pos:column="21"/></name><operator pos:line="40" pos:column="21">-&gt;<pos:position pos:line="40" pos:column="26"/></operator><name pos:line="40" pos:column="23">rfc931<pos:position pos:line="40" pos:column="29"/></name></name></expr>)<pos:position pos:line="40" pos:column="30"/></condition><then pos:line="40" pos:column="30"> <block pos:line="40" pos:column="31">{
                <comment type="line" pos:line="41" pos:column="17">// if we fail to go async, we still return NULL and the caller</comment>
                <comment type="line" pos:line="42" pos:column="17">// will detect the failure in ACLExternal::match().</comment>
                <expr_stmt><expr><operator pos:line="43" pos:column="17">(<pos:position pos:line="43" pos:column="18"/></operator><name pos:line="43" pos:column="18">void<pos:position pos:line="43" pos:column="22"/></name><operator pos:line="43" pos:column="22">)<pos:position pos:line="43" pos:column="23"/></operator><call><name><name pos:line="43" pos:column="23">ch<pos:position pos:line="43" pos:column="25"/></name><operator pos:line="43" pos:column="25">-&gt;<pos:position pos:line="43" pos:column="30"/></operator><name pos:line="43" pos:column="27">goAsync<pos:position pos:line="43" pos:column="34"/></name></name><argument_list pos:line="43" pos:column="34">(<argument><expr><call><name><name pos:line="43" pos:column="35">IdentLookup<pos:position pos:line="43" pos:column="46"/></name><operator pos:line="43" pos:column="46">::<pos:position pos:line="43" pos:column="48"/></operator><name pos:line="43" pos:column="48">Instance<pos:position pos:line="43" pos:column="56"/></name></name><argument_list pos:line="43" pos:column="56">()<pos:position pos:line="43" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="43" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="60"/></expr_stmt>
                <return pos:line="44" pos:column="17">return <expr><name pos:line="44" pos:column="24">NULL<pos:position pos:line="44" pos:column="28"/></name></expr>;<pos:position pos:line="44" pos:column="29"/></return>
            }<pos:position pos:line="45" pos:column="14"/></block></then></if>
        }<pos:position pos:line="46" pos:column="10"/></block></then></if>
<cpp:endif pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">endif<pos:position pos:line="47" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="48" pos:column="6"/></block></for>

    <comment type="line" pos:line="50" pos:column="5">// assemble the full helper lookup string</comment>
    <expr_stmt><expr><call><name><name pos:line="51" pos:column="5">acl_data<pos:position pos:line="51" pos:column="13"/></name><operator pos:line="51" pos:column="13">-&gt;<pos:position pos:line="51" pos:column="18"/></operator><name pos:line="51" pos:column="15">def<pos:position pos:line="51" pos:column="18"/></name><operator pos:line="51" pos:column="18">-&gt;<pos:position pos:line="51" pos:column="23"/></operator><name pos:line="51" pos:column="20">format<pos:position pos:line="51" pos:column="26"/></name><operator pos:line="51" pos:column="26">.<pos:position pos:line="51" pos:column="27"/></operator><name pos:line="51" pos:column="27">assemble<pos:position pos:line="51" pos:column="35"/></name></name><argument_list pos:line="51" pos:column="35">(<argument><expr><name pos:line="51" pos:column="36">mb<pos:position pos:line="51" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="40">ch<pos:position pos:line="51" pos:column="42"/></name><operator pos:line="51" pos:column="42">-&gt;<pos:position pos:line="51" pos:column="47"/></operator><name pos:line="51" pos:column="44">al<pos:position pos:line="51" pos:column="46"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="51" pos:column="48">0<pos:position pos:line="51" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="51"/></expr_stmt>

    <return pos:line="53" pos:column="5">return <expr><name><name pos:line="53" pos:column="12">mb<pos:position pos:line="53" pos:column="14"/></name><operator pos:line="53" pos:column="14">.<pos:position pos:line="53" pos:column="15"/></operator><name pos:line="53" pos:column="15">buf<pos:position pos:line="53" pos:column="18"/></name></name></expr>;<pos:position pos:line="53" pos:column="19"/></return>
}<pos:position pos:line="54" pos:column="2"/></block></function></unit>
