<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5775_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Auth<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">Config<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">parse<pos:position pos:line="2" pos:column="20"/></name></name><parameter_list pos:line="2" pos:column="20">(<parameter><decl><type><name><name pos:line="2" pos:column="21">Auth<pos:position pos:line="2" pos:column="25"/></name><operator pos:line="2" pos:column="25">::<pos:position pos:line="2" pos:column="27"/></operator><name pos:line="2" pos:column="27">Config<pos:position pos:line="2" pos:column="33"/></name></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type> <name pos:line="2" pos:column="36">scheme<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="44">int<pos:position pos:line="2" pos:column="47"/></name></type> <name pos:line="2" pos:column="48">n_configured<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="62">char<pos:position pos:line="2" pos:column="66"/></name> <modifier pos:line="2" pos:column="67">*<pos:position pos:line="2" pos:column="68"/></modifier></type><name pos:line="2" pos:column="68">param_str<pos:position pos:line="2" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="78"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><call><name pos:line="4" pos:column="9">strcmp<pos:position pos:line="4" pos:column="15"/></name><argument_list pos:line="4" pos:column="15">(<argument><expr><name pos:line="4" pos:column="16">param_str<pos:position pos:line="4" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="27">"program"<pos:position pos:line="4" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="37"/></argument_list></call> <operator pos:line="4" pos:column="38">==<pos:position pos:line="4" pos:column="40"/></operator> <literal type="number" pos:line="4" pos:column="41">0<pos:position pos:line="4" pos:column="42"/></literal></expr>)<pos:position pos:line="4" pos:column="43"/></condition><then pos:line="4" pos:column="43"> <block pos:line="4" pos:column="44">{
        <if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">authenticateProgram<pos:position pos:line="5" pos:column="32"/></name></expr>)<pos:position pos:line="5" pos:column="33"/></condition><then pos:line="5" pos:column="33">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="6" pos:column="13">wordlistDestroy<pos:position pos:line="6" pos:column="28"/></name><argument_list pos:line="6" pos:column="28">(<argument><expr><operator pos:line="6" pos:column="29">&amp;<pos:position pos:line="6" pos:column="34"/></operator><name pos:line="6" pos:column="30">authenticateProgram<pos:position pos:line="6" pos:column="49"/></name></expr></argument>)<pos:position pos:line="6" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="51"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name pos:line="8" pos:column="9">parse_wordlist<pos:position pos:line="8" pos:column="23"/></name><argument_list pos:line="8" pos:column="23">(<argument><expr><operator pos:line="8" pos:column="24">&amp;<pos:position pos:line="8" pos:column="29"/></operator><name pos:line="8" pos:column="25">authenticateProgram<pos:position pos:line="8" pos:column="44"/></name></expr></argument>)<pos:position pos:line="8" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="46"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="10" pos:column="9">requirePathnameExists<pos:position pos:line="10" pos:column="30"/></name><argument_list pos:line="10" pos:column="30">(<argument><expr><literal type="string" pos:line="10" pos:column="31">"Authentication helper program"<pos:position pos:line="10" pos:column="62"/></literal></expr></argument>, <argument><expr><name><name pos:line="10" pos:column="64">authenticateProgram<pos:position pos:line="10" pos:column="83"/></name><operator pos:line="10" pos:column="83">-&gt;<pos:position pos:line="10" pos:column="88"/></operator><name pos:line="10" pos:column="85">key<pos:position pos:line="10" pos:column="88"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="90"/></expr_stmt>

    }<pos:position pos:line="12" pos:column="6"/></block></then> <elseif pos:line="12" pos:column="7">else <if pos:line="12" pos:column="12">if <condition pos:line="12" pos:column="15">(<expr><call><name pos:line="12" pos:column="16">strcmp<pos:position pos:line="12" pos:column="22"/></name><argument_list pos:line="12" pos:column="22">(<argument><expr><name pos:line="12" pos:column="23">param_str<pos:position pos:line="12" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="34">"realm"<pos:position pos:line="12" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="42"/></argument_list></call> <operator pos:line="12" pos:column="43">==<pos:position pos:line="12" pos:column="45"/></operator> <literal type="number" pos:line="12" pos:column="46">0<pos:position pos:line="12" pos:column="47"/></literal></expr>)<pos:position pos:line="12" pos:column="48"/></condition><then pos:line="12" pos:column="48"> <block pos:line="12" pos:column="49">{
        <expr_stmt><expr><call><name><name pos:line="13" pos:column="9">realm<pos:position pos:line="13" pos:column="14"/></name><operator pos:line="13" pos:column="14">.<pos:position pos:line="13" pos:column="15"/></operator><name pos:line="13" pos:column="15">clear<pos:position pos:line="13" pos:column="20"/></name></name><argument_list pos:line="13" pos:column="20">()<pos:position pos:line="13" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="23"/></expr_stmt>

        <decl_stmt><decl><type><name pos:line="15" pos:column="9">char<pos:position pos:line="15" pos:column="13"/></name> <modifier pos:line="15" pos:column="14">*<pos:position pos:line="15" pos:column="15"/></modifier></type><name pos:line="15" pos:column="15">token<pos:position pos:line="15" pos:column="20"/></name> <init pos:line="15" pos:column="21">= <expr><call><name><name pos:line="15" pos:column="23">ConfigParser<pos:position pos:line="15" pos:column="35"/></name><operator pos:line="15" pos:column="35">::<pos:position pos:line="15" pos:column="37"/></operator><name pos:line="15" pos:column="37">NextQuotedOrToEol<pos:position pos:line="15" pos:column="54"/></name></name><argument_list pos:line="15" pos:column="54">()<pos:position pos:line="15" pos:column="56"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="57"/></decl_stmt>

        <while pos:line="17" pos:column="9">while <condition pos:line="17" pos:column="15">(<expr><name pos:line="17" pos:column="16">token<pos:position pos:line="17" pos:column="21"/></name> <operator pos:line="17" pos:column="22">&amp;&amp;<pos:position pos:line="17" pos:column="32"/></operator> <operator pos:line="17" pos:column="25">*<pos:position pos:line="17" pos:column="26"/></operator><name pos:line="17" pos:column="26">token<pos:position pos:line="17" pos:column="31"/></name> <operator pos:line="17" pos:column="32">&amp;&amp;<pos:position pos:line="17" pos:column="42"/></operator> <call><name pos:line="17" pos:column="35">xisspace<pos:position pos:line="17" pos:column="43"/></name><argument_list pos:line="17" pos:column="43">(<argument><expr><operator pos:line="17" pos:column="44">*<pos:position pos:line="17" pos:column="45"/></operator><name pos:line="17" pos:column="45">token<pos:position pos:line="17" pos:column="50"/></name></expr></argument>)<pos:position pos:line="17" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="52"/></condition>
            <block type="pseudo"><expr_stmt><expr><operator pos:line="18" pos:column="13">++<pos:position pos:line="18" pos:column="15"/></operator><name pos:line="18" pos:column="15">token<pos:position pos:line="18" pos:column="20"/></name></expr>;<pos:position pos:line="18" pos:column="21"/></expr_stmt></block></while>

        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><operator pos:line="20" pos:column="13">!<pos:position pos:line="20" pos:column="14"/></operator><name pos:line="20" pos:column="14">token<pos:position pos:line="20" pos:column="19"/></name> <operator pos:line="20" pos:column="20">||<pos:position pos:line="20" pos:column="22"/></operator> <operator pos:line="20" pos:column="23">!<pos:position pos:line="20" pos:column="24"/></operator><operator pos:line="20" pos:column="24">*<pos:position pos:line="20" pos:column="25"/></operator><name pos:line="20" pos:column="25">token<pos:position pos:line="20" pos:column="30"/></name></expr>)<pos:position pos:line="20" pos:column="31"/></condition><then pos:line="20" pos:column="31"> <block pos:line="20" pos:column="32">{
            <expr_stmt><expr><call><name pos:line="21" pos:column="13">debugs<pos:position pos:line="21" pos:column="19"/></name><argument_list pos:line="21" pos:column="19">(<argument><expr><literal type="number" pos:line="21" pos:column="20">29<pos:position pos:line="21" pos:column="22"/></literal></expr></argument>, <argument><expr><call><name pos:line="21" pos:column="24">DBG_PARSE_NOTE<pos:position pos:line="21" pos:column="38"/></name><argument_list pos:line="21" pos:column="38">(<argument><expr><name pos:line="21" pos:column="39">DBG_IMPORTANT<pos:position pos:line="21" pos:column="52"/></name></expr></argument>)<pos:position pos:line="21" pos:column="53"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="55">"ERROR: Missing auth_param "<pos:position pos:line="21" pos:column="83"/></literal> <operator pos:line="21" pos:column="84">&lt;&lt;<pos:position pos:line="21" pos:column="92"/></operator> <call><name><name pos:line="21" pos:column="87">scheme<pos:position pos:line="21" pos:column="93"/></name><operator pos:line="21" pos:column="93">-&gt;<pos:position pos:line="21" pos:column="98"/></operator><name pos:line="21" pos:column="95">type<pos:position pos:line="21" pos:column="99"/></name></name><argument_list pos:line="21" pos:column="99">()<pos:position pos:line="21" pos:column="101"/></argument_list></call> <operator pos:line="21" pos:column="102">&lt;&lt;<pos:position pos:line="21" pos:column="110"/></operator> <literal type="string" pos:line="21" pos:column="105">" realm"<pos:position pos:line="21" pos:column="113"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="114"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="115"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="22" pos:column="13">self_destruct<pos:position pos:line="22" pos:column="26"/></name><argument_list pos:line="22" pos:column="26">()<pos:position pos:line="22" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="29"/></expr_stmt>
            <return pos:line="23" pos:column="13">return;<pos:position pos:line="23" pos:column="20"/></return>
        }<pos:position pos:line="24" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="26" pos:column="9">realm<pos:position pos:line="26" pos:column="14"/></name> <operator pos:line="26" pos:column="15">=<pos:position pos:line="26" pos:column="16"/></operator> <name pos:line="26" pos:column="17">token<pos:position pos:line="26" pos:column="22"/></name></expr>;<pos:position pos:line="26" pos:column="23"/></expr_stmt>

    }<pos:position pos:line="28" pos:column="6"/></block></then></if></elseif> <elseif pos:line="28" pos:column="7">else <if pos:line="28" pos:column="12">if <condition pos:line="28" pos:column="15">(<expr><call><name pos:line="28" pos:column="16">strcmp<pos:position pos:line="28" pos:column="22"/></name><argument_list pos:line="28" pos:column="22">(<argument><expr><name pos:line="28" pos:column="23">param_str<pos:position pos:line="28" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="34">"children"<pos:position pos:line="28" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="45"/></argument_list></call> <operator pos:line="28" pos:column="46">==<pos:position pos:line="28" pos:column="48"/></operator> <literal type="number" pos:line="28" pos:column="49">0<pos:position pos:line="28" pos:column="50"/></literal></expr>)<pos:position pos:line="28" pos:column="51"/></condition><then pos:line="28" pos:column="51"> <block pos:line="28" pos:column="52">{
        <expr_stmt><expr><call><name><name pos:line="29" pos:column="9">authenticateChildren<pos:position pos:line="29" pos:column="29"/></name><operator pos:line="29" pos:column="29">.<pos:position pos:line="29" pos:column="30"/></operator><name pos:line="29" pos:column="30">parseConfig<pos:position pos:line="29" pos:column="41"/></name></name><argument_list pos:line="29" pos:column="41">()<pos:position pos:line="29" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="44"/></expr_stmt>

    }<pos:position pos:line="31" pos:column="6"/></block></then></if></elseif> <elseif pos:line="31" pos:column="7">else <if pos:line="31" pos:column="12">if <condition pos:line="31" pos:column="15">(<expr><call><name pos:line="31" pos:column="16">strcmp<pos:position pos:line="31" pos:column="22"/></name><argument_list pos:line="31" pos:column="22">(<argument><expr><name pos:line="31" pos:column="23">param_str<pos:position pos:line="31" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="34">"key_extras"<pos:position pos:line="31" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="47"/></argument_list></call> <operator pos:line="31" pos:column="48">==<pos:position pos:line="31" pos:column="50"/></operator> <literal type="number" pos:line="31" pos:column="51">0<pos:position pos:line="31" pos:column="52"/></literal></expr>)<pos:position pos:line="31" pos:column="53"/></condition><then pos:line="31" pos:column="53"> <block pos:line="31" pos:column="54">{
        <expr_stmt><expr><name pos:line="32" pos:column="9">keyExtrasLine<pos:position pos:line="32" pos:column="22"/></name> <operator pos:line="32" pos:column="23">=<pos:position pos:line="32" pos:column="24"/></operator> <call><name><name pos:line="32" pos:column="25">ConfigParser<pos:position pos:line="32" pos:column="37"/></name><operator pos:line="32" pos:column="37">::<pos:position pos:line="32" pos:column="39"/></operator><name pos:line="32" pos:column="39">NextQuotedToken<pos:position pos:line="32" pos:column="54"/></name></name><argument_list pos:line="32" pos:column="54">()<pos:position pos:line="32" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="57"/></expr_stmt>
        <decl_stmt><decl><type><name><name pos:line="33" pos:column="9">Format<pos:position pos:line="33" pos:column="15"/></name><operator pos:line="33" pos:column="15">::<pos:position pos:line="33" pos:column="17"/></operator><name pos:line="33" pos:column="17">Format<pos:position pos:line="33" pos:column="23"/></name></name> <modifier pos:line="33" pos:column="24">*<pos:position pos:line="33" pos:column="25"/></modifier></type><name pos:line="33" pos:column="25">nlf<pos:position pos:line="33" pos:column="28"/></name> <init pos:line="33" pos:column="29">=  <expr><operator pos:line="33" pos:column="32">new<pos:position pos:line="33" pos:column="35"/></operator> <call><name><operator pos:line="33" pos:column="36">::<pos:position pos:line="33" pos:column="38"/></operator><name pos:line="33" pos:column="38">Format<pos:position pos:line="33" pos:column="44"/></name><operator pos:line="33" pos:column="44">::<pos:position pos:line="33" pos:column="46"/></operator><name pos:line="33" pos:column="46">Format<pos:position pos:line="33" pos:column="52"/></name></name><argument_list pos:line="33" pos:column="52">(<argument><expr><call><name><name pos:line="33" pos:column="53">scheme<pos:position pos:line="33" pos:column="59"/></name><operator pos:line="33" pos:column="59">-&gt;<pos:position pos:line="33" pos:column="64"/></operator><name pos:line="33" pos:column="61">type<pos:position pos:line="33" pos:column="65"/></name></name><argument_list pos:line="33" pos:column="65">()<pos:position pos:line="33" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="33" pos:column="69"/></decl_stmt>
        <if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><operator pos:line="34" pos:column="13">!<pos:position pos:line="34" pos:column="14"/></operator><call><name><name pos:line="34" pos:column="14">nlf<pos:position pos:line="34" pos:column="17"/></name><operator pos:line="34" pos:column="17">-&gt;<pos:position pos:line="34" pos:column="22"/></operator><name pos:line="34" pos:column="19">parse<pos:position pos:line="34" pos:column="24"/></name></name><argument_list pos:line="34" pos:column="24">(<argument><expr><call><name><name pos:line="34" pos:column="25">keyExtrasLine<pos:position pos:line="34" pos:column="38"/></name><operator pos:line="34" pos:column="38">.<pos:position pos:line="34" pos:column="39"/></operator><name pos:line="34" pos:column="39">termedBuf<pos:position pos:line="34" pos:column="48"/></name></name><argument_list pos:line="34" pos:column="48">()<pos:position pos:line="34" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="34" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="52"/></condition><then pos:line="34" pos:column="52"> <block pos:line="34" pos:column="53">{
            <expr_stmt><expr><call><name pos:line="35" pos:column="13">debugs<pos:position pos:line="35" pos:column="19"/></name><argument_list pos:line="35" pos:column="19">(<argument><expr><literal type="number" pos:line="35" pos:column="20">29<pos:position pos:line="35" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="24">DBG_CRITICAL<pos:position pos:line="35" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="38">"FATAL: Failed parsing key_extras formatting value"<pos:position pos:line="35" pos:column="89"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="91"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="36" pos:column="13">self_destruct<pos:position pos:line="36" pos:column="26"/></name><argument_list pos:line="36" pos:column="26">()<pos:position pos:line="36" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="29"/></expr_stmt>
            <return pos:line="37" pos:column="13">return;<pos:position pos:line="37" pos:column="20"/></return>
        }<pos:position pos:line="38" pos:column="10"/></block></then></if>
        <if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><name pos:line="39" pos:column="13">keyExtras<pos:position pos:line="39" pos:column="22"/></name></expr>)<pos:position pos:line="39" pos:column="23"/></condition><then pos:line="39" pos:column="23">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="40" pos:column="13">delete<pos:position pos:line="40" pos:column="19"/></operator> <name pos:line="40" pos:column="20">keyExtras<pos:position pos:line="40" pos:column="29"/></name></expr>;<pos:position pos:line="40" pos:column="30"/></expr_stmt></block></then></if>

        <expr_stmt><expr><name pos:line="42" pos:column="9">keyExtras<pos:position pos:line="42" pos:column="18"/></name> <operator pos:line="42" pos:column="19">=<pos:position pos:line="42" pos:column="20"/></operator> <name pos:line="42" pos:column="21">nlf<pos:position pos:line="42" pos:column="24"/></name></expr>;<pos:position pos:line="42" pos:column="25"/></expr_stmt>

        <if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<decl><type><name pos:line="44" pos:column="13">char<pos:position pos:line="44" pos:column="17"/></name> <modifier pos:line="44" pos:column="18">*<pos:position pos:line="44" pos:column="19"/></modifier></type><name pos:line="44" pos:column="19">t<pos:position pos:line="44" pos:column="20"/></name> <init pos:line="44" pos:column="21">= <expr><call><name pos:line="44" pos:column="23">strtok<pos:position pos:line="44" pos:column="29"/></name><argument_list pos:line="44" pos:column="29">(<argument><expr><name pos:line="44" pos:column="30">NULL<pos:position pos:line="44" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="36">w_space<pos:position pos:line="44" pos:column="43"/></name></expr></argument>)<pos:position pos:line="44" pos:column="44"/></argument_list></call></expr></init></decl>)<pos:position pos:line="44" pos:column="45"/></condition><then pos:line="44" pos:column="45"> <block pos:line="44" pos:column="46">{
            <expr_stmt><expr><call><name pos:line="45" pos:column="13">debugs<pos:position pos:line="45" pos:column="19"/></name><argument_list pos:line="45" pos:column="19">(<argument><expr><literal type="number" pos:line="45" pos:column="20">29<pos:position pos:line="45" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="45" pos:column="24">DBG_CRITICAL<pos:position pos:line="45" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="38">"FATAL: Unexpected argument '"<pos:position pos:line="45" pos:column="68"/></literal> <operator pos:line="45" pos:column="69">&lt;&lt;<pos:position pos:line="45" pos:column="77"/></operator> <name pos:line="45" pos:column="72">t<pos:position pos:line="45" pos:column="73"/></name> <operator pos:line="45" pos:column="74">&lt;&lt;<pos:position pos:line="45" pos:column="82"/></operator> <literal type="string" pos:line="45" pos:column="77">"' after request_format specification"<pos:position pos:line="45" pos:column="115"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="116"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="117"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="46" pos:column="13">self_destruct<pos:position pos:line="46" pos:column="26"/></name><argument_list pos:line="46" pos:column="26">()<pos:position pos:line="46" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="47" pos:column="10"/></block></then></if>
    }<pos:position pos:line="48" pos:column="6"/></block></then></if></elseif> <else pos:line="48" pos:column="7">else <block pos:line="48" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="49" pos:column="9">debugs<pos:position pos:line="49" pos:column="15"/></name><argument_list pos:line="49" pos:column="15">(<argument><expr><literal type="number" pos:line="49" pos:column="16">29<pos:position pos:line="49" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="20">DBG_CRITICAL<pos:position pos:line="49" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="34">"Unrecognised "<pos:position pos:line="49" pos:column="49"/></literal> <operator pos:line="49" pos:column="50">&lt;&lt;<pos:position pos:line="49" pos:column="58"/></operator> <call><name><name pos:line="49" pos:column="53">scheme<pos:position pos:line="49" pos:column="59"/></name><operator pos:line="49" pos:column="59">-&gt;<pos:position pos:line="49" pos:column="64"/></operator><name pos:line="49" pos:column="61">type<pos:position pos:line="49" pos:column="65"/></name></name><argument_list pos:line="49" pos:column="65">()<pos:position pos:line="49" pos:column="67"/></argument_list></call> <operator pos:line="49" pos:column="68">&lt;&lt;<pos:position pos:line="49" pos:column="76"/></operator> <literal type="string" pos:line="49" pos:column="71">" auth scheme parameter '"<pos:position pos:line="49" pos:column="97"/></literal> <operator pos:line="49" pos:column="98">&lt;&lt;<pos:position pos:line="49" pos:column="106"/></operator> <name pos:line="49" pos:column="101">param_str<pos:position pos:line="49" pos:column="110"/></name> <operator pos:line="49" pos:column="111">&lt;&lt;<pos:position pos:line="49" pos:column="119"/></operator> <literal type="string" pos:line="49" pos:column="114">"'"<pos:position pos:line="49" pos:column="117"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="118"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="119"/></expr_stmt>
    }<pos:position pos:line="50" pos:column="6"/></block></else></if>
}<pos:position pos:line="51" pos:column="2"/></block></function></unit>
