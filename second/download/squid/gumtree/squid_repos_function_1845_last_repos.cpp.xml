<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1845_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">FwdState<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">connectedToPeer<pos:position pos:line="2" pos:column="26"/></name></name><parameter_list pos:line="2" pos:column="26">(<parameter><decl><type><name><name pos:line="2" pos:column="27">Security<pos:position pos:line="2" pos:column="35"/></name><operator pos:line="2" pos:column="35">::<pos:position pos:line="2" pos:column="37"/></operator><name pos:line="2" pos:column="37">EncryptorAnswer<pos:position pos:line="2" pos:column="52"/></name></name> <modifier pos:line="2" pos:column="53">&amp;<pos:position pos:line="2" pos:column="58"/></modifier></type><name pos:line="2" pos:column="54">answer<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="61"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<decl><type><name pos:line="4" pos:column="9">ErrorState<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">error<pos:position pos:line="4" pos:column="26"/></name> <init pos:line="4" pos:column="27">= <expr><call><name><name pos:line="4" pos:column="29">answer<pos:position pos:line="4" pos:column="35"/></name><operator pos:line="4" pos:column="35">.<pos:position pos:line="4" pos:column="36"/></operator><name pos:line="4" pos:column="36">error<pos:position pos:line="4" pos:column="41"/></name><operator pos:line="4" pos:column="41">.<pos:position pos:line="4" pos:column="42"/></operator><name pos:line="4" pos:column="42">get<pos:position pos:line="4" pos:column="45"/></name></name><argument_list pos:line="4" pos:column="45">()<pos:position pos:line="4" pos:column="47"/></argument_list></call></expr></init></decl>)<pos:position pos:line="4" pos:column="48"/></condition><then pos:line="4" pos:column="48"> <block pos:line="4" pos:column="49">{
        <expr_stmt><expr><call><name pos:line="5" pos:column="9">fail<pos:position pos:line="5" pos:column="13"/></name><argument_list pos:line="5" pos:column="13">(<argument><expr><name pos:line="5" pos:column="14">error<pos:position pos:line="5" pos:column="19"/></name></expr></argument>)<pos:position pos:line="5" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="21"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="6" pos:column="9">answer<pos:position pos:line="6" pos:column="15"/></name><operator pos:line="6" pos:column="15">.<pos:position pos:line="6" pos:column="16"/></operator><name pos:line="6" pos:column="16">error<pos:position pos:line="6" pos:column="21"/></name><operator pos:line="6" pos:column="21">.<pos:position pos:line="6" pos:column="22"/></operator><name pos:line="6" pos:column="22">clear<pos:position pos:line="6" pos:column="27"/></name></name><argument_list pos:line="6" pos:column="27">()<pos:position pos:line="6" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="30"/></expr_stmt> <comment type="line" pos:line="6" pos:column="31">// preserve error for errorSendComplete()</comment>
        <if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<decl><type><name pos:line="7" pos:column="13">CachePeer<pos:position pos:line="7" pos:column="22"/></name> <modifier pos:line="7" pos:column="23">*<pos:position pos:line="7" pos:column="24"/></modifier></type><name pos:line="7" pos:column="24">p<pos:position pos:line="7" pos:column="25"/></name> <init pos:line="7" pos:column="26">= <expr><call><name pos:line="7" pos:column="28">serverConnection<pos:position pos:line="7" pos:column="44"/></name><argument_list pos:line="7" pos:column="44">()<pos:position pos:line="7" pos:column="46"/></argument_list></call><operator pos:line="7" pos:column="46">-&gt;<pos:position pos:line="7" pos:column="51"/></operator><call><name pos:line="7" pos:column="48">getPeer<pos:position pos:line="7" pos:column="55"/></name><argument_list pos:line="7" pos:column="55">()<pos:position pos:line="7" pos:column="57"/></argument_list></call></expr></init></decl>)<pos:position pos:line="7" pos:column="58"/></condition><then pos:line="7" pos:column="58">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="8" pos:column="13">peerConnectFailed<pos:position pos:line="8" pos:column="30"/></name><argument_list pos:line="8" pos:column="30">(<argument><expr><name pos:line="8" pos:column="31">p<pos:position pos:line="8" pos:column="32"/></name></expr></argument>)<pos:position pos:line="8" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="34"/></expr_stmt></block></then></if>
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">serverConnection<pos:position pos:line="9" pos:column="25"/></name><argument_list pos:line="9" pos:column="25">()<pos:position pos:line="9" pos:column="27"/></argument_list></call><operator pos:line="9" pos:column="27">-&gt;<pos:position pos:line="9" pos:column="32"/></operator><call><name pos:line="9" pos:column="29">close<pos:position pos:line="9" pos:column="34"/></name><argument_list pos:line="9" pos:column="34">()<pos:position pos:line="9" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="37"/></expr_stmt>
        <return pos:line="10" pos:column="9">return;<pos:position pos:line="10" pos:column="16"/></return>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name><name pos:line="13" pos:column="9">answer<pos:position pos:line="13" pos:column="15"/></name><operator pos:line="13" pos:column="15">.<pos:position pos:line="13" pos:column="16"/></operator><name pos:line="13" pos:column="16">tunneled<pos:position pos:line="13" pos:column="24"/></name></name></expr>)<pos:position pos:line="13" pos:column="25"/></condition><then pos:line="13" pos:column="25"> <block pos:line="13" pos:column="26">{
        <comment type="line" pos:line="14" pos:column="9">// TODO: When ConnStateData establishes tunnels, its state changes</comment>
        <comment type="line" pos:line="15" pos:column="9">// [in ways that may affect logging?]. Consider informing</comment>
        <comment type="line" pos:line="16" pos:column="9">// ConnStateData about our tunnel or otherwise unifying tunnel</comment>
        <comment type="line" pos:line="17" pos:column="9">// establishment [side effects].</comment>
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">unregister<pos:position pos:line="18" pos:column="19"/></name><argument_list pos:line="18" pos:column="19">(<argument><expr><name pos:line="18" pos:column="20">serverConn<pos:position pos:line="18" pos:column="30"/></name></expr></argument>)<pos:position pos:line="18" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="32"/></expr_stmt> <comment type="line" pos:line="18" pos:column="33">// async call owns it now</comment>
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">complete<pos:position pos:line="19" pos:column="17"/></name><argument_list pos:line="19" pos:column="17">()<pos:position pos:line="19" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="20"/></expr_stmt> <comment type="line" pos:line="19" pos:column="21">// destroys us</comment>
        <return pos:line="20" pos:column="9">return;<pos:position pos:line="20" pos:column="16"/></return>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="23" pos:column="5">// should reach ConnStateData before the dispatched Client job starts</comment>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">CallJobHere1<pos:position pos:line="24" pos:column="17"/></name><argument_list pos:line="24" pos:column="17">(<argument><expr><literal type="number" pos:line="24" pos:column="18">17<pos:position pos:line="24" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="22">4<pos:position pos:line="24" pos:column="23"/></literal></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="25">request<pos:position pos:line="24" pos:column="32"/></name><operator pos:line="24" pos:column="32">-&gt;<pos:position pos:line="24" pos:column="37"/></operator><name pos:line="24" pos:column="34">clientConnectionManager<pos:position pos:line="24" pos:column="57"/></name></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="59">ConnStateData<pos:position pos:line="24" pos:column="72"/></name></expr></argument>,
                 <argument><expr><name><name pos:line="25" pos:column="18">ConnStateData<pos:position pos:line="25" pos:column="31"/></name><operator pos:line="25" pos:column="31">::<pos:position pos:line="25" pos:column="33"/></operator><name pos:line="25" pos:column="33">notePeerConnection<pos:position pos:line="25" pos:column="51"/></name></name></expr></argument>, <argument><expr><call><name pos:line="25" pos:column="53">serverConnection<pos:position pos:line="25" pos:column="69"/></name><argument_list pos:line="25" pos:column="69">()<pos:position pos:line="25" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="73"/></expr_stmt>

    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><call><name pos:line="27" pos:column="9">serverConnection<pos:position pos:line="27" pos:column="25"/></name><argument_list pos:line="27" pos:column="25">()<pos:position pos:line="27" pos:column="27"/></argument_list></call><operator pos:line="27" pos:column="27">-&gt;<pos:position pos:line="27" pos:column="32"/></operator><call><name pos:line="27" pos:column="29">getPeer<pos:position pos:line="27" pos:column="36"/></name><argument_list pos:line="27" pos:column="36">()<pos:position pos:line="27" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="39"/></condition><then pos:line="27" pos:column="39">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="9">peerConnectSucceded<pos:position pos:line="28" pos:column="28"/></name><argument_list pos:line="28" pos:column="28">(<argument><expr><call><name pos:line="28" pos:column="29">serverConnection<pos:position pos:line="28" pos:column="45"/></name><argument_list pos:line="28" pos:column="45">()<pos:position pos:line="28" pos:column="47"/></argument_list></call><operator pos:line="28" pos:column="47">-&gt;<pos:position pos:line="28" pos:column="52"/></operator><call><name pos:line="28" pos:column="49">getPeer<pos:position pos:line="28" pos:column="56"/></name><argument_list pos:line="28" pos:column="56">()<pos:position pos:line="28" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="28" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="60"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name><name pos:line="30" pos:column="5">flags<pos:position pos:line="30" pos:column="10"/></name><operator pos:line="30" pos:column="10">.<pos:position pos:line="30" pos:column="11"/></operator><name pos:line="30" pos:column="11">connected_okay<pos:position pos:line="30" pos:column="25"/></name></name> <operator pos:line="30" pos:column="26">=<pos:position pos:line="30" pos:column="27"/></operator> <literal type="boolean" pos:line="30" pos:column="28">true<pos:position pos:line="30" pos:column="32"/></literal></expr>;<pos:position pos:line="30" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">dispatch<pos:position pos:line="31" pos:column="13"/></name><argument_list pos:line="31" pos:column="13">()<pos:position pos:line="31" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="16"/></expr_stmt>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
