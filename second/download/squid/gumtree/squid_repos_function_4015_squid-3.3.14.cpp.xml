<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4015_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Icap<pos:position pos:line="1" pos:column="22"/></name><operator pos:line="1" pos:column="22">::<pos:position pos:line="1" pos:column="24"/></operator><name pos:line="1" pos:column="24">ModXact<pos:position pos:line="1" pos:column="31"/></name><operator pos:line="1" pos:column="31">::<pos:position pos:line="1" pos:column="33"/></operator><name pos:line="1" pos:column="33">handleCommWroteHeaders<pos:position pos:line="1" pos:column="55"/></name></name><parameter_list pos:line="1" pos:column="55">()<pos:position pos:line="1" pos:column="57"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="3" pos:column="5">Must<pos:position pos:line="3" pos:column="9"/></name><argument_list pos:line="3" pos:column="9">(<argument><expr><name><name pos:line="3" pos:column="10">state<pos:position pos:line="3" pos:column="15"/></name><operator pos:line="3" pos:column="15">.<pos:position pos:line="3" pos:column="16"/></operator><name pos:line="3" pos:column="16">writing<pos:position pos:line="3" pos:column="23"/></name></name> <operator pos:line="3" pos:column="24">==<pos:position pos:line="3" pos:column="26"/></operator> <name><name pos:line="3" pos:column="27">State<pos:position pos:line="3" pos:column="32"/></name><operator pos:line="3" pos:column="32">::<pos:position pos:line="3" pos:column="34"/></operator><name pos:line="3" pos:column="34">writingHeaders<pos:position pos:line="3" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="3" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="50"/></expr_stmt>

    <comment type="line" pos:line="5" pos:column="5">// determine next step</comment>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><call><name><name pos:line="6" pos:column="9">preview<pos:position pos:line="6" pos:column="16"/></name><operator pos:line="6" pos:column="16">.<pos:position pos:line="6" pos:column="17"/></operator><name pos:line="6" pos:column="17">enabled<pos:position pos:line="6" pos:column="24"/></name></name><argument_list pos:line="6" pos:column="24">()<pos:position pos:line="6" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="27"/></condition><then pos:line="6" pos:column="27"> <block pos:line="6" pos:column="28">{
        <if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><call><name><name pos:line="7" pos:column="13">preview<pos:position pos:line="7" pos:column="20"/></name><operator pos:line="7" pos:column="20">.<pos:position pos:line="7" pos:column="21"/></operator><name pos:line="7" pos:column="21">done<pos:position pos:line="7" pos:column="25"/></name></name><argument_list pos:line="7" pos:column="25">()<pos:position pos:line="7" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="28"/></condition><then pos:line="7" pos:column="28">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="8" pos:column="13">decideWritingAfterPreview<pos:position pos:line="8" pos:column="38"/></name><argument_list pos:line="8" pos:column="38">(<argument><expr><literal type="string" pos:line="8" pos:column="39">"zero-size"<pos:position pos:line="8" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="52"/></expr_stmt></block></then>
        <else pos:line="9" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="10" pos:column="13">state<pos:position pos:line="10" pos:column="18"/></name><operator pos:line="10" pos:column="18">.<pos:position pos:line="10" pos:column="19"/></operator><name pos:line="10" pos:column="19">writing<pos:position pos:line="10" pos:column="26"/></name></name> <operator pos:line="10" pos:column="27">=<pos:position pos:line="10" pos:column="28"/></operator> <name><name pos:line="10" pos:column="29">State<pos:position pos:line="10" pos:column="34"/></name><operator pos:line="10" pos:column="34">::<pos:position pos:line="10" pos:column="36"/></operator><name pos:line="10" pos:column="36">writingPreview<pos:position pos:line="10" pos:column="50"/></name></name></expr>;<pos:position pos:line="10" pos:column="51"/></expr_stmt></block></else></if>
    }<pos:position pos:line="11" pos:column="6"/></block></then> <elseif pos:line="11" pos:column="7">else <if pos:line="11" pos:column="12">if <condition pos:line="11" pos:column="15">(<expr><call><name><name pos:line="11" pos:column="16">virginBody<pos:position pos:line="11" pos:column="26"/></name><operator pos:line="11" pos:column="26">.<pos:position pos:line="11" pos:column="27"/></operator><name pos:line="11" pos:column="27">expected<pos:position pos:line="11" pos:column="35"/></name></name><argument_list pos:line="11" pos:column="35">()<pos:position pos:line="11" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="38"/></condition><then pos:line="11" pos:column="38"> <block pos:line="11" pos:column="39">{
        <expr_stmt><expr><name><name pos:line="12" pos:column="9">state<pos:position pos:line="12" pos:column="14"/></name><operator pos:line="12" pos:column="14">.<pos:position pos:line="12" pos:column="15"/></operator><name pos:line="12" pos:column="15">writing<pos:position pos:line="12" pos:column="22"/></name></name> <operator pos:line="12" pos:column="23">=<pos:position pos:line="12" pos:column="24"/></operator> <name><name pos:line="12" pos:column="25">State<pos:position pos:line="12" pos:column="30"/></name><operator pos:line="12" pos:column="30">::<pos:position pos:line="12" pos:column="32"/></operator><name pos:line="12" pos:column="32">writingPrime<pos:position pos:line="12" pos:column="44"/></name></name></expr>;<pos:position pos:line="12" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if></elseif> <else pos:line="13" pos:column="7">else <block pos:line="13" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">stopWriting<pos:position pos:line="14" pos:column="20"/></name><argument_list pos:line="14" pos:column="20">(<argument><expr><literal type="boolean" pos:line="14" pos:column="21">true<pos:position pos:line="14" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="27"/></expr_stmt>
        <return pos:line="15" pos:column="9">return;<pos:position pos:line="15" pos:column="16"/></return>
    }<pos:position pos:line="16" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="18" pos:column="5">writeMore<pos:position pos:line="18" pos:column="14"/></name><argument_list pos:line="18" pos:column="14">()<pos:position pos:line="18" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="17"/></expr_stmt>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
