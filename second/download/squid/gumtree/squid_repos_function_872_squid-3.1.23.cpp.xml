<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_872_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">ConnectStateData<pos:position pos:line="2" pos:column="17"/></name><operator pos:line="2" pos:column="17">::<pos:position pos:line="2" pos:column="19"/></operator><name pos:line="2" pos:column="19">commResetFD<pos:position pos:line="2" pos:column="30"/></name></name><parameter_list pos:line="2" pos:column="30">()<pos:position pos:line="2" pos:column="32"/></parameter_list>
<block pos:line="3" pos:column="1">{

<comment type="line" pos:line="5" pos:column="1">// XXX: do we have to check this?</comment>
<comment type="line" pos:line="6" pos:column="1">//</comment>
<comment type="line" pos:line="7" pos:column="1">//    if (!cbdataReferenceValid(callback.data))</comment>
<comment type="line" pos:line="8" pos:column="1">//        return 0;</comment>

    <expr_stmt><expr><name><name pos:line="10" pos:column="5">statCounter<pos:position pos:line="10" pos:column="16"/></name><operator pos:line="10" pos:column="16">.<pos:position pos:line="10" pos:column="17"/></operator><name pos:line="10" pos:column="17">syscalls<pos:position pos:line="10" pos:column="25"/></name><operator pos:line="10" pos:column="25">.<pos:position pos:line="10" pos:column="26"/></operator><name pos:line="10" pos:column="26">sock<pos:position pos:line="10" pos:column="30"/></name><operator pos:line="10" pos:column="30">.<pos:position pos:line="10" pos:column="31"/></operator><name pos:line="10" pos:column="31">sockets<pos:position pos:line="10" pos:column="38"/></name></name><operator pos:line="10" pos:column="38">++<pos:position pos:line="10" pos:column="40"/></operator></expr>;<pos:position pos:line="10" pos:column="41"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="12" pos:column="5">fde<pos:position pos:line="12" pos:column="8"/></name> <modifier pos:line="12" pos:column="9">*<pos:position pos:line="12" pos:column="10"/></modifier></type><name pos:line="12" pos:column="10">F<pos:position pos:line="12" pos:column="11"/></name> <init pos:line="12" pos:column="12">= <expr><operator pos:line="12" pos:column="14">&amp;<pos:position pos:line="12" pos:column="19"/></operator><name><name pos:line="12" pos:column="15">fd_table<pos:position pos:line="12" pos:column="23"/></name><index pos:line="12" pos:column="23">[<expr><name pos:line="12" pos:column="24">fd<pos:position pos:line="12" pos:column="26"/></name></expr>]<pos:position pos:line="12" pos:column="27"/></index></name></expr></init></decl>;<pos:position pos:line="12" pos:column="28"/></decl_stmt>

    <decl_stmt><decl><type><name><name pos:line="14" pos:column="5">struct<pos:position pos:line="14" pos:column="11"/></name> <name pos:line="14" pos:column="12">addrinfo<pos:position pos:line="14" pos:column="20"/></name></name> <modifier pos:line="14" pos:column="21">*<pos:position pos:line="14" pos:column="22"/></modifier></type><name pos:line="14" pos:column="22">AI<pos:position pos:line="14" pos:column="24"/></name> <init pos:line="14" pos:column="25">= <expr><name pos:line="14" pos:column="27">NULL<pos:position pos:line="14" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="32"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="15" pos:column="5">F<pos:position pos:line="15" pos:column="6"/></name><operator pos:line="15" pos:column="6">-&gt;<pos:position pos:line="15" pos:column="11"/></operator><name pos:line="15" pos:column="8">local_addr<pos:position pos:line="15" pos:column="18"/></name><operator pos:line="15" pos:column="18">.<pos:position pos:line="15" pos:column="19"/></operator><name pos:line="15" pos:column="19">GetAddrInfo<pos:position pos:line="15" pos:column="30"/></name></name><argument_list pos:line="15" pos:column="30">(<argument><expr><name pos:line="15" pos:column="31">AI<pos:position pos:line="15" pos:column="33"/></name></expr></argument>)<pos:position pos:line="15" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="35"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="16" pos:column="5">int<pos:position pos:line="16" pos:column="8"/></name></type> <name pos:line="16" pos:column="9">new_family<pos:position pos:line="16" pos:column="19"/></name> <init pos:line="16" pos:column="20">= <expr><name><name pos:line="16" pos:column="22">AI<pos:position pos:line="16" pos:column="24"/></name><operator pos:line="16" pos:column="24">-&gt;<pos:position pos:line="16" pos:column="29"/></operator><name pos:line="16" pos:column="26">ai_family<pos:position pos:line="16" pos:column="35"/></name></name></expr></init></decl>;<pos:position pos:line="16" pos:column="36"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="18" pos:column="5">int<pos:position pos:line="18" pos:column="8"/></name></type> <name pos:line="18" pos:column="9">fd2<pos:position pos:line="18" pos:column="12"/></name> <init pos:line="18" pos:column="13">= <expr><call><name pos:line="18" pos:column="15">socket<pos:position pos:line="18" pos:column="21"/></name><argument_list pos:line="18" pos:column="21">(<argument><expr><name pos:line="18" pos:column="22">new_family<pos:position pos:line="18" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="34">AI<pos:position pos:line="18" pos:column="36"/></name><operator pos:line="18" pos:column="36">-&gt;<pos:position pos:line="18" pos:column="41"/></operator><name pos:line="18" pos:column="38">ai_socktype<pos:position pos:line="18" pos:column="49"/></name></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="51">AI<pos:position pos:line="18" pos:column="53"/></name><operator pos:line="18" pos:column="53">-&gt;<pos:position pos:line="18" pos:column="58"/></operator><name pos:line="18" pos:column="55">ai_protocol<pos:position pos:line="18" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="18" pos:column="68"/></decl_stmt>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">fd2<pos:position pos:line="20" pos:column="12"/></name> <operator pos:line="20" pos:column="13">&lt;<pos:position pos:line="20" pos:column="17"/></operator> <literal type="number" pos:line="20" pos:column="15">0<pos:position pos:line="20" pos:column="16"/></literal></expr>)<pos:position pos:line="20" pos:column="17"/></condition><then pos:line="20" pos:column="17"> <block pos:line="20" pos:column="18">{
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">debugs<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><literal type="number" pos:line="21" pos:column="16">5<pos:position pos:line="21" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="19">DBG_CRITICAL<pos:position pos:line="21" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="33">HERE<pos:position pos:line="21" pos:column="37"/></name> <operator pos:line="21" pos:column="38">&lt;&lt;<pos:position pos:line="21" pos:column="46"/></operator> <literal type="string" pos:line="21" pos:column="41">"WARNING: FD "<pos:position pos:line="21" pos:column="55"/></literal> <operator pos:line="21" pos:column="56">&lt;&lt;<pos:position pos:line="21" pos:column="64"/></operator> <name pos:line="21" pos:column="59">fd2<pos:position pos:line="21" pos:column="62"/></name> <operator pos:line="21" pos:column="63">&lt;&lt;<pos:position pos:line="21" pos:column="71"/></operator> <literal type="string" pos:line="21" pos:column="66">" socket failed to allocate: "<pos:position pos:line="21" pos:column="96"/></literal> <operator pos:line="21" pos:column="97">&lt;&lt;<pos:position pos:line="21" pos:column="105"/></operator> <call><name pos:line="21" pos:column="100">xstrerror<pos:position pos:line="21" pos:column="109"/></name><argument_list pos:line="21" pos:column="109">()<pos:position pos:line="21" pos:column="111"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="112"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="113"/></expr_stmt>

        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">ENFILE<pos:position pos:line="23" pos:column="19"/></name> <operator pos:line="23" pos:column="20">==<pos:position pos:line="23" pos:column="22"/></operator> <name pos:line="23" pos:column="23">errno<pos:position pos:line="23" pos:column="28"/></name> <operator pos:line="23" pos:column="29">||<pos:position pos:line="23" pos:column="31"/></operator> <name pos:line="23" pos:column="32">EMFILE<pos:position pos:line="23" pos:column="38"/></name> <operator pos:line="23" pos:column="39">==<pos:position pos:line="23" pos:column="41"/></operator> <name pos:line="23" pos:column="42">errno<pos:position pos:line="23" pos:column="47"/></name></expr>)<pos:position pos:line="23" pos:column="48"/></condition><then pos:line="23" pos:column="48">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="13">fdAdjustReserved<pos:position pos:line="24" pos:column="29"/></name><argument_list pos:line="24" pos:column="29">()<pos:position pos:line="24" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="32"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name><name pos:line="26" pos:column="9">F<pos:position pos:line="26" pos:column="10"/></name><operator pos:line="26" pos:column="10">-&gt;<pos:position pos:line="26" pos:column="15"/></operator><name pos:line="26" pos:column="12">local_addr<pos:position pos:line="26" pos:column="22"/></name><operator pos:line="26" pos:column="22">.<pos:position pos:line="26" pos:column="23"/></operator><name pos:line="26" pos:column="23">FreeAddrInfo<pos:position pos:line="26" pos:column="35"/></name></name><argument_list pos:line="26" pos:column="35">(<argument><expr><name pos:line="26" pos:column="36">AI<pos:position pos:line="26" pos:column="38"/></name></expr></argument>)<pos:position pos:line="26" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="40"/></expr_stmt>
        <return pos:line="27" pos:column="9">return <expr><literal type="number" pos:line="27" pos:column="16">0<pos:position pos:line="27" pos:column="17"/></literal></expr>;<pos:position pos:line="27" pos:column="18"/></return>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>

<cpp:ifdef pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">ifdef<pos:position pos:line="30" pos:column="7"/></cpp:directive> <name pos:line="30" pos:column="8">_SQUID_MSWIN_<pos:position pos:line="30" pos:column="21"/></name></cpp:ifdef>

    <comment type="block" pos:line="32" pos:column="5">/* On Windows dup2() can't work correctly on Sockets, the          */</comment>
    <comment type="block" pos:line="33" pos:column="5">/* workaround is to close the destination Socket before call them. */</comment>
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">close<pos:position pos:line="34" pos:column="10"/></name><argument_list pos:line="34" pos:column="10">(<argument><expr><name pos:line="34" pos:column="11">fd<pos:position pos:line="34" pos:column="13"/></name></expr></argument>)<pos:position pos:line="34" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="15"/></expr_stmt>

<cpp:endif pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">endif<pos:position pos:line="36" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><call><name pos:line="38" pos:column="9">dup2<pos:position pos:line="38" pos:column="13"/></name><argument_list pos:line="38" pos:column="13">(<argument><expr><name pos:line="38" pos:column="14">fd2<pos:position pos:line="38" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="19">fd<pos:position pos:line="38" pos:column="21"/></name></expr></argument>)<pos:position pos:line="38" pos:column="22"/></argument_list></call> <operator pos:line="38" pos:column="23">&lt;<pos:position pos:line="38" pos:column="27"/></operator> <literal type="number" pos:line="38" pos:column="25">0<pos:position pos:line="38" pos:column="26"/></literal></expr>)<pos:position pos:line="38" pos:column="27"/></condition><then pos:line="38" pos:column="27"> <block pos:line="38" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="39" pos:column="9">debugs<pos:position pos:line="39" pos:column="15"/></name><argument_list pos:line="39" pos:column="15">(<argument><expr><literal type="number" pos:line="39" pos:column="16">5<pos:position pos:line="39" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="39" pos:column="19">DBG_CRITICAL<pos:position pos:line="39" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="33">HERE<pos:position pos:line="39" pos:column="37"/></name> <operator pos:line="39" pos:column="38">&lt;&lt;<pos:position pos:line="39" pos:column="46"/></operator> <literal type="string" pos:line="39" pos:column="41">"WARNING: dup2(FD "<pos:position pos:line="39" pos:column="60"/></literal> <operator pos:line="39" pos:column="61">&lt;&lt;<pos:position pos:line="39" pos:column="69"/></operator> <name pos:line="39" pos:column="64">fd2<pos:position pos:line="39" pos:column="67"/></name> <operator pos:line="39" pos:column="68">&lt;&lt;<pos:position pos:line="39" pos:column="76"/></operator> <literal type="string" pos:line="39" pos:column="71">", FD "<pos:position pos:line="39" pos:column="78"/></literal> <operator pos:line="39" pos:column="79">&lt;&lt;<pos:position pos:line="39" pos:column="87"/></operator> <name pos:line="39" pos:column="82">fd<pos:position pos:line="39" pos:column="84"/></name> <operator pos:line="39" pos:column="85">&lt;&lt;<pos:position pos:line="39" pos:column="93"/></operator> <literal type="string" pos:line="39" pos:column="88">") failed: "<pos:position pos:line="39" pos:column="100"/></literal> <operator pos:line="39" pos:column="101">&lt;&lt;<pos:position pos:line="39" pos:column="109"/></operator> <call><name pos:line="39" pos:column="104">xstrerror<pos:position pos:line="39" pos:column="113"/></name><argument_list pos:line="39" pos:column="113">()<pos:position pos:line="39" pos:column="115"/></argument_list></call></expr></argument>)<pos:position pos:line="39" pos:column="116"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="117"/></expr_stmt>

        <if pos:line="41" pos:column="9">if <condition pos:line="41" pos:column="12">(<expr><name pos:line="41" pos:column="13">ENFILE<pos:position pos:line="41" pos:column="19"/></name> <operator pos:line="41" pos:column="20">==<pos:position pos:line="41" pos:column="22"/></operator> <name pos:line="41" pos:column="23">errno<pos:position pos:line="41" pos:column="28"/></name> <operator pos:line="41" pos:column="29">||<pos:position pos:line="41" pos:column="31"/></operator> <name pos:line="41" pos:column="32">EMFILE<pos:position pos:line="41" pos:column="38"/></name> <operator pos:line="41" pos:column="39">==<pos:position pos:line="41" pos:column="41"/></operator> <name pos:line="41" pos:column="42">errno<pos:position pos:line="41" pos:column="47"/></name></expr>)<pos:position pos:line="41" pos:column="48"/></condition><then pos:line="41" pos:column="48">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="42" pos:column="13">fdAdjustReserved<pos:position pos:line="42" pos:column="29"/></name><argument_list pos:line="42" pos:column="29">()<pos:position pos:line="42" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="32"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name pos:line="44" pos:column="9">close<pos:position pos:line="44" pos:column="14"/></name><argument_list pos:line="44" pos:column="14">(<argument><expr><name pos:line="44" pos:column="15">fd2<pos:position pos:line="44" pos:column="18"/></name></expr></argument>)<pos:position pos:line="44" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="20"/></expr_stmt>

        <expr_stmt><expr><call><name><name pos:line="46" pos:column="9">F<pos:position pos:line="46" pos:column="10"/></name><operator pos:line="46" pos:column="10">-&gt;<pos:position pos:line="46" pos:column="15"/></operator><name pos:line="46" pos:column="12">local_addr<pos:position pos:line="46" pos:column="22"/></name><operator pos:line="46" pos:column="22">.<pos:position pos:line="46" pos:column="23"/></operator><name pos:line="46" pos:column="23">FreeAddrInfo<pos:position pos:line="46" pos:column="35"/></name></name><argument_list pos:line="46" pos:column="35">(<argument><expr><name pos:line="46" pos:column="36">AI<pos:position pos:line="46" pos:column="38"/></name></expr></argument>)<pos:position pos:line="46" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="40"/></expr_stmt>
        <return pos:line="47" pos:column="9">return <expr><literal type="number" pos:line="47" pos:column="16">0<pos:position pos:line="47" pos:column="17"/></literal></expr>;<pos:position pos:line="47" pos:column="18"/></return>
    }<pos:position pos:line="48" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="49" pos:column="5">commResetSelect<pos:position pos:line="49" pos:column="20"/></name><argument_list pos:line="49" pos:column="20">(<argument><expr><name pos:line="49" pos:column="21">fd<pos:position pos:line="49" pos:column="23"/></name></expr></argument>)<pos:position pos:line="49" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="25"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="51" pos:column="5">close<pos:position pos:line="51" pos:column="10"/></name><argument_list pos:line="51" pos:column="10">(<argument><expr><name pos:line="51" pos:column="11">fd2<pos:position pos:line="51" pos:column="14"/></name></expr></argument>)<pos:position pos:line="51" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="16"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="53" pos:column="5">debugs<pos:position pos:line="53" pos:column="11"/></name><argument_list pos:line="53" pos:column="11">(<argument><expr><literal type="number" pos:line="53" pos:column="12">50<pos:position pos:line="53" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="53" pos:column="16">3<pos:position pos:line="53" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="19">"commResetFD: Reset socket FD "<pos:position pos:line="53" pos:column="50"/></literal> <operator pos:line="53" pos:column="51">&lt;&lt;<pos:position pos:line="53" pos:column="59"/></operator> <name pos:line="53" pos:column="54">fd<pos:position pos:line="53" pos:column="56"/></name> <operator pos:line="53" pos:column="57">&lt;&lt;<pos:position pos:line="53" pos:column="65"/></operator> <literal type="string" pos:line="53" pos:column="60">"-&gt;"<pos:position pos:line="53" pos:column="67"/></literal> <operator pos:line="53" pos:column="65">&lt;&lt;<pos:position pos:line="53" pos:column="73"/></operator> <name pos:line="53" pos:column="68">fd2<pos:position pos:line="53" pos:column="71"/></name> <operator pos:line="53" pos:column="72">&lt;&lt;<pos:position pos:line="53" pos:column="80"/></operator> <literal type="string" pos:line="53" pos:column="75">" : family="<pos:position pos:line="53" pos:column="87"/></literal> <operator pos:line="53" pos:column="88">&lt;&lt;<pos:position pos:line="53" pos:column="96"/></operator> <name pos:line="53" pos:column="91">new_family<pos:position pos:line="53" pos:column="101"/></name></expr></argument> )<pos:position pos:line="53" pos:column="103"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="104"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="55" pos:column="5">debugs<pos:position pos:line="55" pos:column="11"/></name><argument_list pos:line="55" pos:column="11">(<argument><expr><literal type="number" pos:line="55" pos:column="12">50<pos:position pos:line="55" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="55" pos:column="16">3<pos:position pos:line="55" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="19">"commResetFD: Reset socket FD "<pos:position pos:line="55" pos:column="50"/></literal> <operator pos:line="55" pos:column="51">&lt;&lt;<pos:position pos:line="55" pos:column="59"/></operator> <name pos:line="55" pos:column="54">fd<pos:position pos:line="55" pos:column="56"/></name> <operator pos:line="55" pos:column="57">&lt;&lt;<pos:position pos:line="55" pos:column="65"/></operator> <literal type="string" pos:line="55" pos:column="60">"-&gt;"<pos:position pos:line="55" pos:column="67"/></literal> <operator pos:line="55" pos:column="65">&lt;&lt;<pos:position pos:line="55" pos:column="73"/></operator> <name pos:line="55" pos:column="68">fd2<pos:position pos:line="55" pos:column="71"/></name> <operator pos:line="55" pos:column="72">&lt;&lt;<pos:position pos:line="55" pos:column="80"/></operator> <literal type="string" pos:line="55" pos:column="75">" : family="<pos:position pos:line="55" pos:column="87"/></literal> <operator pos:line="55" pos:column="88">&lt;&lt;<pos:position pos:line="55" pos:column="96"/></operator> <name pos:line="55" pos:column="91">new_family<pos:position pos:line="55" pos:column="101"/></name></expr></argument> )<pos:position pos:line="55" pos:column="103"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="104"/></expr_stmt>

    <comment type="block" pos:line="57" pos:column="5">/* INET6: copy the new sockets family type to the FDE table */</comment>
    <expr_stmt><expr><name><name pos:line="58" pos:column="5">F<pos:position pos:line="58" pos:column="6"/></name><operator pos:line="58" pos:column="6">-&gt;<pos:position pos:line="58" pos:column="11"/></operator><name pos:line="58" pos:column="8">sock_family<pos:position pos:line="58" pos:column="19"/></name></name> <operator pos:line="58" pos:column="20">=<pos:position pos:line="58" pos:column="21"/></operator> <name pos:line="58" pos:column="22">new_family<pos:position pos:line="58" pos:column="32"/></name></expr>;<pos:position pos:line="58" pos:column="33"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="60" pos:column="5">F<pos:position pos:line="60" pos:column="6"/></name><operator pos:line="60" pos:column="6">-&gt;<pos:position pos:line="60" pos:column="11"/></operator><name pos:line="60" pos:column="8">flags<pos:position pos:line="60" pos:column="13"/></name><operator pos:line="60" pos:column="13">.<pos:position pos:line="60" pos:column="14"/></operator><name pos:line="60" pos:column="14">called_connect<pos:position pos:line="60" pos:column="28"/></name></name> <operator pos:line="60" pos:column="29">=<pos:position pos:line="60" pos:column="30"/></operator> <literal type="number" pos:line="60" pos:column="31">0<pos:position pos:line="60" pos:column="32"/></literal></expr>;<pos:position pos:line="60" pos:column="33"/></expr_stmt>

    <comment type="block" pos:line="62" pos:column="5">/*
     * yuck, this has assumptions about comm_open() arguments for
     * the original socket
     */</comment>

    <comment type="block" pos:line="67" pos:column="5">/* MUST be done before binding or face OS Error: "(99) Cannot assign requested address"... */</comment>
    <if pos:line="68" pos:column="5">if <condition pos:line="68" pos:column="8">( <expr><name><name pos:line="68" pos:column="10">F<pos:position pos:line="68" pos:column="11"/></name><operator pos:line="68" pos:column="11">-&gt;<pos:position pos:line="68" pos:column="16"/></operator><name pos:line="68" pos:column="13">flags<pos:position pos:line="68" pos:column="18"/></name><operator pos:line="68" pos:column="18">.<pos:position pos:line="68" pos:column="19"/></operator><name pos:line="68" pos:column="19">transparent<pos:position pos:line="68" pos:column="30"/></name></name></expr> )<pos:position pos:line="68" pos:column="32"/></condition><then pos:line="68" pos:column="32"> <block pos:line="68" pos:column="33">{
        <expr_stmt><expr><call><name pos:line="69" pos:column="9">comm_set_transparent<pos:position pos:line="69" pos:column="29"/></name><argument_list pos:line="69" pos:column="29">(<argument><expr><name pos:line="69" pos:column="30">fd<pos:position pos:line="69" pos:column="32"/></name></expr></argument>)<pos:position pos:line="69" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="70" pos:column="6"/></block></then></if>

    <if pos:line="72" pos:column="5">if <condition pos:line="72" pos:column="8">(<expr><call><name pos:line="72" pos:column="9">commBind<pos:position pos:line="72" pos:column="17"/></name><argument_list pos:line="72" pos:column="17">(<argument><expr><name pos:line="72" pos:column="18">fd<pos:position pos:line="72" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="72" pos:column="22">*<pos:position pos:line="72" pos:column="23"/></operator><name pos:line="72" pos:column="23">AI<pos:position pos:line="72" pos:column="25"/></name></expr></argument>)<pos:position pos:line="72" pos:column="26"/></argument_list></call> <operator pos:line="72" pos:column="27">!=<pos:position pos:line="72" pos:column="29"/></operator> <name pos:line="72" pos:column="30">COMM_OK<pos:position pos:line="72" pos:column="37"/></name></expr>)<pos:position pos:line="72" pos:column="38"/></condition><then pos:line="72" pos:column="38"> <block pos:line="72" pos:column="39">{
        <expr_stmt><expr><call><name pos:line="73" pos:column="9">debugs<pos:position pos:line="73" pos:column="15"/></name><argument_list pos:line="73" pos:column="15">(<argument><expr><literal type="number" pos:line="73" pos:column="16">5<pos:position pos:line="73" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="73" pos:column="19">DBG_CRITICAL<pos:position pos:line="73" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="33">"WARNING: Reset of FD "<pos:position pos:line="73" pos:column="56"/></literal> <operator pos:line="73" pos:column="57">&lt;&lt;<pos:position pos:line="73" pos:column="65"/></operator> <name pos:line="73" pos:column="60">fd<pos:position pos:line="73" pos:column="62"/></name> <operator pos:line="73" pos:column="63">&lt;&lt;<pos:position pos:line="73" pos:column="71"/></operator> <literal type="string" pos:line="73" pos:column="66">" for "<pos:position pos:line="73" pos:column="73"/></literal> <operator pos:line="73" pos:column="74">&lt;&lt;<pos:position pos:line="73" pos:column="82"/></operator> <name><name pos:line="73" pos:column="77">F<pos:position pos:line="73" pos:column="78"/></name><operator pos:line="73" pos:column="78">-&gt;<pos:position pos:line="73" pos:column="83"/></operator><name pos:line="73" pos:column="80">local_addr<pos:position pos:line="73" pos:column="90"/></name></name> <operator pos:line="73" pos:column="91">&lt;&lt;<pos:position pos:line="73" pos:column="99"/></operator> <literal type="string" pos:line="73" pos:column="94">" failed to bind: "<pos:position pos:line="73" pos:column="113"/></literal> <operator pos:line="73" pos:column="114">&lt;&lt;<pos:position pos:line="73" pos:column="122"/></operator> <call><name pos:line="73" pos:column="117">xstrerror<pos:position pos:line="73" pos:column="126"/></name><argument_list pos:line="73" pos:column="126">()<pos:position pos:line="73" pos:column="128"/></argument_list></call></expr></argument>)<pos:position pos:line="73" pos:column="129"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="130"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="74" pos:column="9">F<pos:position pos:line="74" pos:column="10"/></name><operator pos:line="74" pos:column="10">-&gt;<pos:position pos:line="74" pos:column="15"/></operator><name pos:line="74" pos:column="12">local_addr<pos:position pos:line="74" pos:column="22"/></name><operator pos:line="74" pos:column="22">.<pos:position pos:line="74" pos:column="23"/></operator><name pos:line="74" pos:column="23">FreeAddrInfo<pos:position pos:line="74" pos:column="35"/></name></name><argument_list pos:line="74" pos:column="35">(<argument><expr><name pos:line="74" pos:column="36">AI<pos:position pos:line="74" pos:column="38"/></name></expr></argument>)<pos:position pos:line="74" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="40"/></expr_stmt>
        <return pos:line="75" pos:column="9">return <expr><literal type="number" pos:line="75" pos:column="16">0<pos:position pos:line="75" pos:column="17"/></literal></expr>;<pos:position pos:line="75" pos:column="18"/></return>
    }<pos:position pos:line="76" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name><name pos:line="77" pos:column="5">F<pos:position pos:line="77" pos:column="6"/></name><operator pos:line="77" pos:column="6">-&gt;<pos:position pos:line="77" pos:column="11"/></operator><name pos:line="77" pos:column="8">local_addr<pos:position pos:line="77" pos:column="18"/></name><operator pos:line="77" pos:column="18">.<pos:position pos:line="77" pos:column="19"/></operator><name pos:line="77" pos:column="19">FreeAddrInfo<pos:position pos:line="77" pos:column="31"/></name></name><argument_list pos:line="77" pos:column="31">(<argument><expr><name pos:line="77" pos:column="32">AI<pos:position pos:line="77" pos:column="34"/></name></expr></argument>)<pos:position pos:line="77" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="36"/></expr_stmt>

    <if pos:line="79" pos:column="5">if <condition pos:line="79" pos:column="8">(<expr><name><name pos:line="79" pos:column="9">F<pos:position pos:line="79" pos:column="10"/></name><operator pos:line="79" pos:column="10">-&gt;<pos:position pos:line="79" pos:column="15"/></operator><name pos:line="79" pos:column="12">tos<pos:position pos:line="79" pos:column="15"/></name></name></expr>)<pos:position pos:line="79" pos:column="16"/></condition><then pos:line="79" pos:column="16">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="80" pos:column="9">comm_set_tos<pos:position pos:line="80" pos:column="21"/></name><argument_list pos:line="80" pos:column="21">(<argument><expr><name pos:line="80" pos:column="22">fd<pos:position pos:line="80" pos:column="24"/></name></expr></argument>, <argument><expr><name><name pos:line="80" pos:column="26">F<pos:position pos:line="80" pos:column="27"/></name><operator pos:line="80" pos:column="27">-&gt;<pos:position pos:line="80" pos:column="32"/></operator><name pos:line="80" pos:column="29">tos<pos:position pos:line="80" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="80" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="34"/></expr_stmt></block></then></if>

    <if pos:line="82" pos:column="5">if <condition pos:line="82" pos:column="8">( <expr><name><name pos:line="82" pos:column="10">Ip<pos:position pos:line="82" pos:column="12"/></name><operator pos:line="82" pos:column="12">::<pos:position pos:line="82" pos:column="14"/></operator><name pos:line="82" pos:column="14">EnableIpv6<pos:position pos:line="82" pos:column="24"/></name></name><operator pos:line="82" pos:column="24">&amp;<pos:position pos:line="82" pos:column="29"/></operator><name pos:line="82" pos:column="25">IPV6_SPECIAL_SPLITSTACK<pos:position pos:line="82" pos:column="48"/></name> <operator pos:line="82" pos:column="49">&amp;&amp;<pos:position pos:line="82" pos:column="59"/></operator> <call><name><name pos:line="82" pos:column="52">F<pos:position pos:line="82" pos:column="53"/></name><operator pos:line="82" pos:column="53">-&gt;<pos:position pos:line="82" pos:column="58"/></operator><name pos:line="82" pos:column="55">local_addr<pos:position pos:line="82" pos:column="65"/></name><operator pos:line="82" pos:column="65">.<pos:position pos:line="82" pos:column="66"/></operator><name pos:line="82" pos:column="66">IsIPv6<pos:position pos:line="82" pos:column="72"/></name></name><argument_list pos:line="82" pos:column="72">()<pos:position pos:line="82" pos:column="74"/></argument_list></call></expr> )<pos:position pos:line="82" pos:column="76"/></condition><then pos:line="82" pos:column="76">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="83" pos:column="9">comm_set_v6only<pos:position pos:line="83" pos:column="24"/></name><argument_list pos:line="83" pos:column="24">(<argument><expr><name pos:line="83" pos:column="25">fd<pos:position pos:line="83" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="83" pos:column="29">1<pos:position pos:line="83" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="32"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="85" pos:column="5">copyFDFlags<pos:position pos:line="85" pos:column="16"/></name><argument_list pos:line="85" pos:column="16">(<argument><expr><name pos:line="85" pos:column="17">fd<pos:position pos:line="85" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="21">F<pos:position pos:line="85" pos:column="22"/></name></expr></argument>)<pos:position pos:line="85" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="24"/></expr_stmt>

    <return pos:line="87" pos:column="5">return <expr><literal type="number" pos:line="87" pos:column="12">1<pos:position pos:line="87" pos:column="13"/></literal></expr>;<pos:position pos:line="87" pos:column="14"/></return>
}<pos:position pos:line="88" pos:column="2"/></block></function></unit>
