<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4555_squid-3.3.14.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">ACLChecklist<pos:position pos:line="1" pos:column="13"/></name><operator pos:line="1" pos:column="13">::<pos:position pos:line="1" pos:column="15"/></operator><name pos:line="1" pos:column="15">NodeMatchingResult<pos:position pos:line="1" pos:column="33"/></name></name></type>
<name><name pos:line="2" pos:column="1">ACLChecklist<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">matchNode<pos:position pos:line="2" pos:column="24"/></name></name><parameter_list pos:line="2" pos:column="24">(<parameter><decl><type><specifier pos:line="2" pos:column="25">const<pos:position pos:line="2" pos:column="30"/></specifier> <name pos:line="2" pos:column="31">ACLList<pos:position pos:line="2" pos:column="38"/></name> <modifier pos:line="2" pos:column="39">&amp;<pos:position pos:line="2" pos:column="44"/></modifier></type><name pos:line="2" pos:column="40">node<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="46">bool<pos:position pos:line="2" pos:column="50"/></name> <specifier pos:line="2" pos:column="51">const<pos:position pos:line="2" pos:column="56"/></specifier></type> <name pos:line="2" pos:column="57">fast<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="62"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">bool<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">nodeMatched<pos:position pos:line="4" pos:column="27"/></name> <init pos:line="4" pos:column="28">= <expr><call><name><name pos:line="4" pos:column="30">node<pos:position pos:line="4" pos:column="34"/></name><operator pos:line="4" pos:column="34">.<pos:position pos:line="4" pos:column="35"/></operator><name pos:line="4" pos:column="35">matches<pos:position pos:line="4" pos:column="42"/></name></name><argument_list pos:line="4" pos:column="42">(<argument><expr><name pos:line="4" pos:column="43">this<pos:position pos:line="4" pos:column="47"/></name></expr></argument>)<pos:position pos:line="4" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="49"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">bool<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">needsAsync<pos:position pos:line="5" pos:column="26"/></name> <init pos:line="5" pos:column="27">= <expr><call><name pos:line="5" pos:column="29">asyncNeeded<pos:position pos:line="5" pos:column="40"/></name><argument_list pos:line="5" pos:column="40">()<pos:position pos:line="5" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="43"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">bool<pos:position pos:line="6" pos:column="15"/></name></type> <name pos:line="6" pos:column="16">matchFinished<pos:position pos:line="6" pos:column="29"/></name> <init pos:line="6" pos:column="30">= <expr><call><name pos:line="6" pos:column="32">finished<pos:position pos:line="6" pos:column="40"/></name><argument_list pos:line="6" pos:column="40">()<pos:position pos:line="6" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="43"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="8" pos:column="5">debugs<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><literal type="number" pos:line="8" pos:column="12">28<pos:position pos:line="8" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="16">3<pos:position pos:line="8" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="19">HERE<pos:position pos:line="8" pos:column="23"/></name> <operator pos:line="8" pos:column="24">&lt;&lt;<pos:position pos:line="8" pos:column="32"/></operator> <name pos:line="8" pos:column="27">this<pos:position pos:line="8" pos:column="31"/></name> <operator pos:line="8" pos:column="32">&lt;&lt;<pos:position pos:line="8" pos:column="40"/></operator>
           <literal type="string" pos:line="9" pos:column="12">" matched="<pos:position pos:line="9" pos:column="23"/></literal> <operator pos:line="9" pos:column="24">&lt;&lt;<pos:position pos:line="9" pos:column="32"/></operator> <name pos:line="9" pos:column="27">nodeMatched<pos:position pos:line="9" pos:column="38"/></name> <operator pos:line="9" pos:column="39">&lt;&lt;<pos:position pos:line="9" pos:column="47"/></operator>
           <literal type="string" pos:line="10" pos:column="12">" async="<pos:position pos:line="10" pos:column="21"/></literal> <operator pos:line="10" pos:column="22">&lt;&lt;<pos:position pos:line="10" pos:column="30"/></operator> <name pos:line="10" pos:column="25">needsAsync<pos:position pos:line="10" pos:column="35"/></name> <operator pos:line="10" pos:column="36">&lt;&lt;<pos:position pos:line="10" pos:column="44"/></operator>
           <literal type="string" pos:line="11" pos:column="12">" finished="<pos:position pos:line="11" pos:column="24"/></literal> <operator pos:line="11" pos:column="25">&lt;&lt;<pos:position pos:line="11" pos:column="33"/></operator> <name pos:line="11" pos:column="28">matchFinished<pos:position pos:line="11" pos:column="41"/></name></expr></argument>)<pos:position pos:line="11" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="43"/></expr_stmt>

    <comment type="block" pos:line="13" pos:column="5">/* There are eight possible outcomes of the matches() call based on
       (matched, async, finished) permutations. We support these four:
       matched,!async,!finished: a match (must check next rule node)
       !matched,!async,!finished: a mismatch (whole rule fails to match)
       !matched,!async,finished: error or special condition (propagate)
       !matched,async,!finished: ACL needs to make an async call (pause)
     */</comment>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name pos:line="21" pos:column="9">nodeMatched<pos:position pos:line="21" pos:column="20"/></name></expr>)<pos:position pos:line="21" pos:column="21"/></condition><then pos:line="21" pos:column="21"> <block pos:line="21" pos:column="22">{
        <comment type="line" pos:line="22" pos:column="9">// matches() should return false in all special cases</comment>
        <expr_stmt><expr><call><name pos:line="23" pos:column="9">assert<pos:position pos:line="23" pos:column="15"/></name><argument_list pos:line="23" pos:column="15">(<argument><expr><operator pos:line="23" pos:column="16">!<pos:position pos:line="23" pos:column="17"/></operator><name pos:line="23" pos:column="17">needsAsync<pos:position pos:line="23" pos:column="27"/></name> <operator pos:line="23" pos:column="28">&amp;&amp;<pos:position pos:line="23" pos:column="38"/></operator> <operator pos:line="23" pos:column="31">!<pos:position pos:line="23" pos:column="32"/></operator><name pos:line="23" pos:column="32">matchFinished<pos:position pos:line="23" pos:column="45"/></name></expr></argument>)<pos:position pos:line="23" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="47"/></expr_stmt>
        <return pos:line="24" pos:column="9">return <expr><name pos:line="24" pos:column="16">nmrMatch<pos:position pos:line="24" pos:column="24"/></name></expr>;<pos:position pos:line="24" pos:column="25"/></return>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>

    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name pos:line="27" pos:column="9">matchFinished<pos:position pos:line="27" pos:column="22"/></name></expr>)<pos:position pos:line="27" pos:column="23"/></condition><then pos:line="27" pos:column="23"> <block pos:line="27" pos:column="24">{
        <comment type="line" pos:line="28" pos:column="9">// we cannot be done and need an async call at the same time</comment>
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">assert<pos:position pos:line="29" pos:column="15"/></name><argument_list pos:line="29" pos:column="15">(<argument><expr><operator pos:line="29" pos:column="16">!<pos:position pos:line="29" pos:column="17"/></operator><name pos:line="29" pos:column="17">needsAsync<pos:position pos:line="29" pos:column="27"/></name></expr></argument>)<pos:position pos:line="29" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">debugs<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><literal type="number" pos:line="30" pos:column="16">28<pos:position pos:line="30" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="20">3<pos:position pos:line="30" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="23">HERE<pos:position pos:line="30" pos:column="27"/></name> <operator pos:line="30" pos:column="28">&lt;&lt;<pos:position pos:line="30" pos:column="36"/></operator> <name pos:line="30" pos:column="31">this<pos:position pos:line="30" pos:column="35"/></name> <operator pos:line="30" pos:column="36">&lt;&lt;<pos:position pos:line="30" pos:column="44"/></operator> <literal type="string" pos:line="30" pos:column="39">" exception: "<pos:position pos:line="30" pos:column="53"/></literal> <operator pos:line="30" pos:column="54">&lt;&lt;<pos:position pos:line="30" pos:column="62"/></operator> <call><name pos:line="30" pos:column="57">currentAnswer<pos:position pos:line="30" pos:column="70"/></name><argument_list pos:line="30" pos:column="70">()<pos:position pos:line="30" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="74"/></expr_stmt>
        <return pos:line="31" pos:column="9">return <expr><name pos:line="31" pos:column="16">nmrFinished<pos:position pos:line="31" pos:column="27"/></name></expr>;<pos:position pos:line="31" pos:column="28"/></return>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>

    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">(<expr><operator pos:line="34" pos:column="9">!<pos:position pos:line="34" pos:column="10"/></operator><name pos:line="34" pos:column="10">needsAsync<pos:position pos:line="34" pos:column="20"/></name></expr>)<pos:position pos:line="34" pos:column="21"/></condition><then pos:line="34" pos:column="21"> <block pos:line="34" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">debugs<pos:position pos:line="35" pos:column="15"/></name><argument_list pos:line="35" pos:column="15">(<argument><expr><literal type="number" pos:line="35" pos:column="16">28<pos:position pos:line="35" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="20">3<pos:position pos:line="35" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="23">HERE<pos:position pos:line="35" pos:column="27"/></name> <operator pos:line="35" pos:column="28">&lt;&lt;<pos:position pos:line="35" pos:column="36"/></operator> <name pos:line="35" pos:column="31">this<pos:position pos:line="35" pos:column="35"/></name> <operator pos:line="35" pos:column="36">&lt;&lt;<pos:position pos:line="35" pos:column="44"/></operator> <literal type="string" pos:line="35" pos:column="39">" simple mismatch"<pos:position pos:line="35" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="59"/></expr_stmt>
        <return pos:line="36" pos:column="9">return <expr><name pos:line="36" pos:column="16">nmrMismatch<pos:position pos:line="36" pos:column="27"/></name></expr>;<pos:position pos:line="36" pos:column="28"/></return>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="39" pos:column="5">/* we need an async call */</comment>

    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><name pos:line="41" pos:column="9">fast<pos:position pos:line="41" pos:column="13"/></name></expr>)<pos:position pos:line="41" pos:column="14"/></condition><then pos:line="41" pos:column="14"> <block pos:line="41" pos:column="15">{
        <expr_stmt><expr><call><name pos:line="42" pos:column="9">changeState<pos:position pos:line="42" pos:column="20"/></name><argument_list pos:line="42" pos:column="20">(<argument><expr><call><name><name pos:line="42" pos:column="21">NullState<pos:position pos:line="42" pos:column="30"/></name><operator pos:line="42" pos:column="30">::<pos:position pos:line="42" pos:column="32"/></operator><name pos:line="42" pos:column="32">Instance<pos:position pos:line="42" pos:column="40"/></name></name><argument_list pos:line="42" pos:column="40">()<pos:position pos:line="42" pos:column="42"/></argument_list></call></expr></argument>)<pos:position pos:line="42" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="44"/></expr_stmt> <comment type="line" pos:line="42" pos:column="45">// disable async checks</comment>
        <expr_stmt><expr><call><name pos:line="43" pos:column="9">markFinished<pos:position pos:line="43" pos:column="21"/></name><argument_list pos:line="43" pos:column="21">(<argument><expr><name pos:line="43" pos:column="22">ACCESS_DUNNO<pos:position pos:line="43" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="36">"async required but prohibited"<pos:position pos:line="43" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="69"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="44" pos:column="9">debugs<pos:position pos:line="44" pos:column="15"/></name><argument_list pos:line="44" pos:column="15">(<argument><expr><literal type="number" pos:line="44" pos:column="16">28<pos:position pos:line="44" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="20">3<pos:position pos:line="44" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="44" pos:column="23">HERE<pos:position pos:line="44" pos:column="27"/></name> <operator pos:line="44" pos:column="28">&lt;&lt;<pos:position pos:line="44" pos:column="36"/></operator> <name pos:line="44" pos:column="31">this<pos:position pos:line="44" pos:column="35"/></name> <operator pos:line="44" pos:column="36">&lt;&lt;<pos:position pos:line="44" pos:column="44"/></operator> <literal type="string" pos:line="44" pos:column="39">" DUNNO because cannot async"<pos:position pos:line="44" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="70"/></expr_stmt>
        <return pos:line="45" pos:column="9">return <expr><name pos:line="45" pos:column="16">nmrFinished<pos:position pos:line="45" pos:column="27"/></name></expr>;<pos:position pos:line="45" pos:column="28"/></return>
    }<pos:position pos:line="46" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="48" pos:column="5">debugs<pos:position pos:line="48" pos:column="11"/></name><argument_list pos:line="48" pos:column="11">(<argument><expr><literal type="number" pos:line="48" pos:column="12">28<pos:position pos:line="48" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="48" pos:column="16">3<pos:position pos:line="48" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="48" pos:column="19">HERE<pos:position pos:line="48" pos:column="23"/></name> <operator pos:line="48" pos:column="24">&lt;&lt;<pos:position pos:line="48" pos:column="32"/></operator> <name pos:line="48" pos:column="27">this<pos:position pos:line="48" pos:column="31"/></name> <operator pos:line="48" pos:column="32">&lt;&lt;<pos:position pos:line="48" pos:column="40"/></operator> <literal type="string" pos:line="48" pos:column="35">" going async"<pos:position pos:line="48" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="51"/></expr_stmt>
    <return pos:line="49" pos:column="5">return <expr><name pos:line="49" pos:column="12">nmrNeedsAsync<pos:position pos:line="49" pos:column="25"/></name></expr>;<pos:position pos:line="49" pos:column="26"/></return>
}<pos:position pos:line="50" pos:column="2"/></block></function></unit>
