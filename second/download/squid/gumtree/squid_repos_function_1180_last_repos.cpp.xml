<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1180_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">SignalEngine<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">handleStoppedChild<pos:position pos:line="2" pos:column="33"/></name></name><parameter_list pos:line="2" pos:column="33">()<pos:position pos:line="2" pos:column="35"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// no AvoidSignalAction() call: This code can run at any time because it</comment>
    <comment type="line" pos:line="5" pos:column="5">// does not depend on Squid state. It does not need debugging because it</comment>
    <comment type="line" pos:line="6" pos:column="5">// handles an "internal" signal, not an external/admin command.</comment>
    <expr_stmt><expr><name pos:line="7" pos:column="5">do_handle_stopped_child<pos:position pos:line="7" pos:column="28"/></name> <operator pos:line="7" pos:column="29">=<pos:position pos:line="7" pos:column="30"/></operator> <literal type="number" pos:line="7" pos:column="31">0<pos:position pos:line="7" pos:column="32"/></literal></expr>;<pos:position pos:line="7" pos:column="33"/></expr_stmt>
<cpp:if pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">if<pos:position pos:line="8" pos:column="4"/></cpp:directive> <expr><operator pos:line="8" pos:column="5">!<pos:position pos:line="8" pos:column="6"/></operator><name pos:line="8" pos:column="6">_SQUID_WINDOWS_<pos:position pos:line="8" pos:column="21"/></name></expr></cpp:if>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">PidStatus<pos:position pos:line="9" pos:column="14"/></name></type> <name pos:line="9" pos:column="15">status<pos:position pos:line="9" pos:column="21"/></name></decl>;<pos:position pos:line="9" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">pid_t<pos:position pos:line="10" pos:column="10"/></name></type> <name pos:line="10" pos:column="11">pid<pos:position pos:line="10" pos:column="14"/></name></decl>;<pos:position pos:line="10" pos:column="15"/></decl_stmt>

    <do pos:line="12" pos:column="5">do <block pos:line="12" pos:column="8">{
        <expr_stmt><expr><name pos:line="13" pos:column="9">pid<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">=<pos:position pos:line="13" pos:column="14"/></operator> <call><name pos:line="13" pos:column="15">WaitForAnyPid<pos:position pos:line="13" pos:column="28"/></name><argument_list pos:line="13" pos:column="28">(<argument><expr><name pos:line="13" pos:column="29">status<pos:position pos:line="13" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="37">WNOHANG<pos:position pos:line="13" pos:column="44"/></name></expr></argument>)<pos:position pos:line="13" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="46"/></expr_stmt>

<cpp:if pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">if<pos:position pos:line="15" pos:column="4"/></cpp:directive> <expr><name pos:line="15" pos:column="5">HAVE_SIGACTION<pos:position pos:line="15" pos:column="19"/></name></expr></cpp:if>

    }<pos:position pos:line="17" pos:column="6"/></block> while <condition pos:line="17" pos:column="13">(<expr><name pos:line="17" pos:column="14">pid<pos:position pos:line="17" pos:column="17"/></name> <operator pos:line="17" pos:column="18">&gt;<pos:position pos:line="17" pos:column="22"/></operator> <literal type="number" pos:line="17" pos:column="20">0<pos:position pos:line="17" pos:column="21"/></literal></expr>)<pos:position pos:line="17" pos:column="22"/></condition>;<pos:position pos:line="17" pos:column="23"/></do>

<cpp:else pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">else<pos:position pos:line="19" pos:column="6"/></cpp:directive></cpp:else>

    }<pos:position pos:line="21" pos:column="6"/></block></function></unit>
