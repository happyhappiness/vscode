<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5415_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">mem_type<pos:position pos:line="1" pos:column="16"/></name></type>
<name pos:line="2" pos:column="1">memFindStringSizeType<pos:position pos:line="2" pos:column="22"/></name><parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><name pos:line="2" pos:column="23">size_t<pos:position pos:line="2" pos:column="29"/></name></type> <name pos:line="2" pos:column="30">net_size<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="40">bool<pos:position pos:line="2" pos:column="44"/></name></type> <name pos:line="2" pos:column="45">fuzzy<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="51"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">mem_type<pos:position pos:line="4" pos:column="13"/></name></type> <name pos:line="4" pos:column="14">type<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><name pos:line="4" pos:column="21">MEM_NONE<pos:position pos:line="4" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
    <for pos:line="5" pos:column="5">for <control pos:line="5" pos:column="9">(<init><decl><type><name pos:line="5" pos:column="10">unsigned<pos:position pos:line="5" pos:column="18"/></name> <name pos:line="5" pos:column="19">int<pos:position pos:line="5" pos:column="22"/></name></type> <name pos:line="5" pos:column="23">i<pos:position pos:line="5" pos:column="24"/></name> <init pos:line="5" pos:column="25">= <expr><literal type="number" pos:line="5" pos:column="27">0<pos:position pos:line="5" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="29"/></init> <condition><expr><name pos:line="5" pos:column="30">i<pos:position pos:line="5" pos:column="31"/></name> <operator pos:line="5" pos:column="32">&lt;<pos:position pos:line="5" pos:column="36"/></operator> <name pos:line="5" pos:column="34">mem_str_pool_count<pos:position pos:line="5" pos:column="52"/></name></expr>;<pos:position pos:line="5" pos:column="53"/></condition> <incr><expr><operator pos:line="5" pos:column="54">++<pos:position pos:line="5" pos:column="56"/></operator><name pos:line="5" pos:column="56">i<pos:position pos:line="5" pos:column="57"/></name></expr></incr>)<pos:position pos:line="5" pos:column="58"/></control> <block pos:line="5" pos:column="59">{
        <expr_stmt><expr><name pos:line="6" pos:column="9">auto<pos:position pos:line="6" pos:column="13"/></name> <operator pos:line="6" pos:column="14">&amp;<pos:position pos:line="6" pos:column="19"/></operator><name pos:line="6" pos:column="15">pool<pos:position pos:line="6" pos:column="19"/></name> <operator pos:line="6" pos:column="20">=<pos:position pos:line="6" pos:column="21"/></operator> <call><name pos:line="6" pos:column="22">GetStrPool<pos:position pos:line="6" pos:column="32"/></name><argument_list pos:line="6" pos:column="32">(<argument><expr><name pos:line="6" pos:column="33">i<pos:position pos:line="6" pos:column="34"/></name></expr></argument>)<pos:position pos:line="6" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="36"/></expr_stmt>
        <if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">fuzzy<pos:position pos:line="7" pos:column="18"/></name> <operator pos:line="7" pos:column="19">&amp;&amp;<pos:position pos:line="7" pos:column="29"/></operator> <name pos:line="7" pos:column="22">net_size<pos:position pos:line="7" pos:column="30"/></name> <operator pos:line="7" pos:column="31">&lt;<pos:position pos:line="7" pos:column="35"/></operator> <call><name><name pos:line="7" pos:column="33">pool<pos:position pos:line="7" pos:column="37"/></name><operator pos:line="7" pos:column="37">.<pos:position pos:line="7" pos:column="38"/></operator><name pos:line="7" pos:column="38">objectSize<pos:position pos:line="7" pos:column="48"/></name></name><argument_list pos:line="7" pos:column="48">()<pos:position pos:line="7" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="51"/></condition><then pos:line="7" pos:column="51"> <block pos:line="7" pos:column="52">{
            <expr_stmt><expr><name pos:line="8" pos:column="13">type<pos:position pos:line="8" pos:column="17"/></name> <operator pos:line="8" pos:column="18">=<pos:position pos:line="8" pos:column="19"/></operator> <cast type="static" pos:line="8" pos:column="20">static_cast<argument_list type="generic" pos:line="8" pos:column="31">&lt;<argument><expr><name pos:line="8" pos:column="32">mem_type<pos:position pos:line="8" pos:column="40"/></name></expr></argument>&gt;<pos:position pos:line="8" pos:column="44"/></argument_list><argument_list pos:line="8" pos:column="41">(<argument><expr><name pos:line="8" pos:column="42">i<pos:position pos:line="8" pos:column="43"/></name></expr></argument>)<pos:position pos:line="8" pos:column="44"/></argument_list></cast></expr>;<pos:position pos:line="8" pos:column="45"/></expr_stmt>
            <break pos:line="9" pos:column="13">break;<pos:position pos:line="9" pos:column="19"/></break>
        }<pos:position pos:line="10" pos:column="10"/></block></then> <elseif pos:line="10" pos:column="11">else <if pos:line="10" pos:column="16">if <condition pos:line="10" pos:column="19">(<expr><name pos:line="10" pos:column="20">net_size<pos:position pos:line="10" pos:column="28"/></name> <operator pos:line="10" pos:column="29">==<pos:position pos:line="10" pos:column="31"/></operator> <call><name><name pos:line="10" pos:column="32">pool<pos:position pos:line="10" pos:column="36"/></name><operator pos:line="10" pos:column="36">.<pos:position pos:line="10" pos:column="37"/></operator><name pos:line="10" pos:column="37">objectSize<pos:position pos:line="10" pos:column="47"/></name></name><argument_list pos:line="10" pos:column="47">()<pos:position pos:line="10" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="50"/></condition><then pos:line="10" pos:column="50"> <block pos:line="10" pos:column="51">{
            <expr_stmt><expr><name pos:line="11" pos:column="13">type<pos:position pos:line="11" pos:column="17"/></name> <operator pos:line="11" pos:column="18">=<pos:position pos:line="11" pos:column="19"/></operator> <cast type="static" pos:line="11" pos:column="20">static_cast<argument_list type="generic" pos:line="11" pos:column="31">&lt;<argument><expr><name pos:line="11" pos:column="32">mem_type<pos:position pos:line="11" pos:column="40"/></name></expr></argument>&gt;<pos:position pos:line="11" pos:column="44"/></argument_list><argument_list pos:line="11" pos:column="41">(<argument><expr><name pos:line="11" pos:column="42">i<pos:position pos:line="11" pos:column="43"/></name></expr></argument>)<pos:position pos:line="11" pos:column="44"/></argument_list></cast></expr>;<pos:position pos:line="11" pos:column="45"/></expr_stmt>
            <break pos:line="12" pos:column="13">break;<pos:position pos:line="12" pos:column="19"/></break>
        }<pos:position pos:line="13" pos:column="10"/></block></then></if></elseif></if>
    }<pos:position pos:line="14" pos:column="6"/></block></for>

    <return pos:line="16" pos:column="5">return <expr><name pos:line="16" pos:column="12">type<pos:position pos:line="16" pos:column="16"/></name></expr>;<pos:position pos:line="16" pos:column="17"/></return>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
