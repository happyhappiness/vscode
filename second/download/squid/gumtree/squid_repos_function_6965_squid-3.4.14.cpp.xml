<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6965_squid-3.4.14.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">char<pos:position pos:line="1" pos:column="11"/></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type>
<name pos:line="2" pos:column="1">xstrerr<pos:position pos:line="2" pos:column="8"/></name><parameter_list pos:line="2" pos:column="8">(<parameter><decl><type><name pos:line="2" pos:column="9">int<pos:position pos:line="2" pos:column="12"/></name></type> <name pos:line="2" pos:column="13">error<pos:position pos:line="2" pos:column="18"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="19"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><specifier pos:line="4" pos:column="5">static<pos:position pos:line="4" pos:column="11"/></specifier> <type><name pos:line="4" pos:column="12">char<pos:position pos:line="4" pos:column="16"/></name></type> <name><name pos:line="4" pos:column="17">xstrerror_buf<pos:position pos:line="4" pos:column="30"/></name><index pos:line="4" pos:column="30">[<expr><name pos:line="4" pos:column="31">BUFSIZ<pos:position pos:line="4" pos:column="37"/></name></expr>]<pos:position pos:line="4" pos:column="38"/></index></name></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">error<pos:position pos:line="6" pos:column="14"/></name> <operator pos:line="6" pos:column="15">==<pos:position pos:line="6" pos:column="17"/></operator> <literal type="number" pos:line="6" pos:column="18">0<pos:position pos:line="6" pos:column="19"/></literal></expr>)<pos:position pos:line="6" pos:column="20"/></condition><then pos:line="6" pos:column="20">
        <block type="pseudo"><return pos:line="7" pos:column="9">return <expr><literal type="string" pos:line="7" pos:column="16">"(0) No error."<pos:position pos:line="7" pos:column="31"/></literal></expr>;<pos:position pos:line="7" pos:column="32"/></return></block></then></if>

<cpp:if pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">if<pos:position pos:line="9" pos:column="4"/></cpp:directive> <expr><name pos:line="9" pos:column="5">_SQUID_WINDOWS_<pos:position pos:line="9" pos:column="20"/></name></expr></cpp:if>
    <comment type="line" pos:line="10" pos:column="5">// Description of WSAGetLastError()</comment>
    <for pos:line="11" pos:column="5">for <control pos:line="11" pos:column="9">(<init><decl><type><name pos:line="11" pos:column="10">size_t<pos:position pos:line="11" pos:column="16"/></name></type> <name pos:line="11" pos:column="17">i<pos:position pos:line="11" pos:column="18"/></name> <init pos:line="11" pos:column="19">= <expr><literal type="number" pos:line="11" pos:column="21">0<pos:position pos:line="11" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="23"/></init> <condition><expr><name pos:line="11" pos:column="24">i<pos:position pos:line="11" pos:column="25"/></name> <operator pos:line="11" pos:column="26">&lt;<pos:position pos:line="11" pos:column="30"/></operator> <sizeof pos:line="11" pos:column="28">sizeof<argument_list pos:line="11" pos:column="34">(<argument><expr><name pos:line="11" pos:column="35">_wsaerrtext<pos:position pos:line="11" pos:column="46"/></name></expr></argument>)<pos:position pos:line="11" pos:column="47"/></argument_list></sizeof> <operator pos:line="11" pos:column="48">/<pos:position pos:line="11" pos:column="49"/></operator> <sizeof pos:line="11" pos:column="50">sizeof<argument_list pos:line="11" pos:column="56">(<argument><expr pos:line="11" pos:column="57">struct <name pos:line="11" pos:column="64">_wsaerrtext<pos:position pos:line="11" pos:column="75"/></name></expr></argument>)<pos:position pos:line="11" pos:column="76"/></argument_list></sizeof></expr>;<pos:position pos:line="11" pos:column="77"/></condition> <incr><expr><operator pos:line="11" pos:column="78">++<pos:position pos:line="11" pos:column="80"/></operator><name pos:line="11" pos:column="80">i<pos:position pos:line="11" pos:column="81"/></name></expr></incr>)<pos:position pos:line="11" pos:column="82"/></control> <block pos:line="11" pos:column="83">{
        <if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name><name pos:line="12" pos:column="13">_wsaerrtext<pos:position pos:line="12" pos:column="24"/></name><index pos:line="12" pos:column="24">[<expr><name pos:line="12" pos:column="25">i<pos:position pos:line="12" pos:column="26"/></name></expr>]<pos:position pos:line="12" pos:column="27"/></index></name><operator pos:line="12" pos:column="27">.<pos:position pos:line="12" pos:column="28"/></operator><name pos:line="12" pos:column="28">err<pos:position pos:line="12" pos:column="31"/></name> <operator pos:line="12" pos:column="32">==<pos:position pos:line="12" pos:column="34"/></operator> <name pos:line="12" pos:column="35">error<pos:position pos:line="12" pos:column="40"/></name></expr>)<pos:position pos:line="12" pos:column="41"/></condition><then pos:line="12" pos:column="41"> <block pos:line="12" pos:column="42">{
            <comment type="line" pos:line="13" pos:column="13">// small optimization, save using a temporary buffer and two copies...</comment>
            <expr_stmt><expr><call><name pos:line="14" pos:column="13">snprintf<pos:position pos:line="14" pos:column="21"/></name><argument_list pos:line="14" pos:column="21">(<argument><expr><name pos:line="14" pos:column="22">xstrerror_buf<pos:position pos:line="14" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="37">BUFSIZ<pos:position pos:line="14" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="45">"(%d) %s, %s"<pos:position pos:line="14" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="60">error<pos:position pos:line="14" pos:column="65"/></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="67">_wsaerrtext<pos:position pos:line="14" pos:column="78"/></name><index pos:line="14" pos:column="78">[<expr><name pos:line="14" pos:column="79">i<pos:position pos:line="14" pos:column="80"/></name></expr>]<pos:position pos:line="14" pos:column="81"/></index></name><operator pos:line="14" pos:column="81">.<pos:position pos:line="14" pos:column="82"/></operator><name pos:line="14" pos:column="82">errconst<pos:position pos:line="14" pos:column="90"/></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="92">_wsaerrtext<pos:position pos:line="14" pos:column="103"/></name><index pos:line="14" pos:column="103">[<expr><name pos:line="14" pos:column="104">i<pos:position pos:line="14" pos:column="105"/></name></expr>]<pos:position pos:line="14" pos:column="106"/></index></name><operator pos:line="14" pos:column="106">.<pos:position pos:line="14" pos:column="107"/></operator><name pos:line="14" pos:column="107">errdesc<pos:position pos:line="14" pos:column="114"/></name></expr></argument>)<pos:position pos:line="14" pos:column="115"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="116"/></expr_stmt>
            <return pos:line="15" pos:column="13">return <expr><name pos:line="15" pos:column="20">xstrerror_buf<pos:position pos:line="15" pos:column="33"/></name></expr>;<pos:position pos:line="15" pos:column="34"/></return>
        }<pos:position pos:line="16" pos:column="10"/></block></then></if>
    }<pos:position pos:line="17" pos:column="6"/></block></for>
<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif<pos:position pos:line="18" pos:column="7"/></cpp:directive></cpp:endif>

    <decl_stmt><decl><type><specifier pos:line="20" pos:column="5">const<pos:position pos:line="20" pos:column="10"/></specifier> <name pos:line="20" pos:column="11">char<pos:position pos:line="20" pos:column="15"/></name> <modifier pos:line="20" pos:column="16">*<pos:position pos:line="20" pos:column="17"/></modifier></type><name pos:line="20" pos:column="17">errmsg<pos:position pos:line="20" pos:column="23"/></name> <init pos:line="20" pos:column="24">= <expr><call><name pos:line="20" pos:column="26">strerror<pos:position pos:line="20" pos:column="34"/></name><argument_list pos:line="20" pos:column="34">(<argument><expr><name pos:line="20" pos:column="35">error<pos:position pos:line="20" pos:column="40"/></name></expr></argument>)<pos:position pos:line="20" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="20" pos:column="42"/></decl_stmt>

    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><operator pos:line="22" pos:column="9">!<pos:position pos:line="22" pos:column="10"/></operator><name pos:line="22" pos:column="10">errmsg<pos:position pos:line="22" pos:column="16"/></name> <operator pos:line="22" pos:column="17">||<pos:position pos:line="22" pos:column="19"/></operator> <operator pos:line="22" pos:column="20">!<pos:position pos:line="22" pos:column="21"/></operator><operator pos:line="22" pos:column="21">*<pos:position pos:line="22" pos:column="22"/></operator><name pos:line="22" pos:column="22">errmsg<pos:position pos:line="22" pos:column="28"/></name></expr>)<pos:position pos:line="22" pos:column="29"/></condition><then pos:line="22" pos:column="29">
        <block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="9">errmsg<pos:position pos:line="23" pos:column="15"/></name> <operator pos:line="23" pos:column="16">=<pos:position pos:line="23" pos:column="17"/></operator> <literal type="string" pos:line="23" pos:column="18">"Unknown error"<pos:position pos:line="23" pos:column="33"/></literal></expr>;<pos:position pos:line="23" pos:column="34"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="25" pos:column="5">snprintf<pos:position pos:line="25" pos:column="13"/></name><argument_list pos:line="25" pos:column="13">(<argument><expr><name pos:line="25" pos:column="14">xstrerror_buf<pos:position pos:line="25" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="29">BUFSIZ<pos:position pos:line="25" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="37">"(%d) %s"<pos:position pos:line="25" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="48">error<pos:position pos:line="25" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="55">errmsg<pos:position pos:line="25" pos:column="61"/></name></expr></argument>)<pos:position pos:line="25" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="63"/></expr_stmt>

    <return pos:line="27" pos:column="5">return <expr><name pos:line="27" pos:column="12">xstrerror_buf<pos:position pos:line="27" pos:column="25"/></name></expr>;<pos:position pos:line="27" pos:column="26"/></return>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
