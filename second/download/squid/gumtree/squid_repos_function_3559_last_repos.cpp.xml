<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3559_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Icap<pos:position pos:line="1" pos:column="22"/></name><operator pos:line="1" pos:column="22">::<pos:position pos:line="1" pos:column="24"/></operator><name pos:line="1" pos:column="24">ModXact<pos:position pos:line="1" pos:column="31"/></name><operator pos:line="1" pos:column="31">::<pos:position pos:line="1" pos:column="33"/></operator><name pos:line="1" pos:column="33">makeUsernameHeader<pos:position pos:line="1" pos:column="51"/></name></name><parameter_list pos:line="1" pos:column="51">(<parameter><decl><type><specifier pos:line="1" pos:column="52">const<pos:position pos:line="1" pos:column="57"/></specifier> <name pos:line="1" pos:column="58">HttpRequest<pos:position pos:line="1" pos:column="69"/></name> <modifier pos:line="1" pos:column="70">*<pos:position pos:line="1" pos:column="71"/></modifier></type><name pos:line="1" pos:column="71">request<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="80">MemBuf<pos:position pos:line="1" pos:column="86"/></name> <modifier pos:line="1" pos:column="87">&amp;<pos:position pos:line="1" pos:column="92"/></modifier></type><name pos:line="1" pos:column="88">buf<pos:position pos:line="1" pos:column="91"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="92"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:if pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">if<pos:position pos:line="3" pos:column="4"/></cpp:directive> <expr><name pos:line="3" pos:column="5">USE_AUTH<pos:position pos:line="3" pos:column="13"/></name></expr></cpp:if>
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">struct<pos:position pos:line="4" pos:column="11"/></name> <name pos:line="4" pos:column="12">base64_encode_ctx<pos:position pos:line="4" pos:column="29"/></name></name></type> <name pos:line="4" pos:column="30">ctx<pos:position pos:line="4" pos:column="33"/></name></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">base64_encode_init<pos:position pos:line="5" pos:column="23"/></name><argument_list pos:line="5" pos:column="23">(<argument><expr><operator pos:line="5" pos:column="24">&amp;<pos:position pos:line="5" pos:column="29"/></operator><name pos:line="5" pos:column="25">ctx<pos:position pos:line="5" pos:column="28"/></name></expr></argument>)<pos:position pos:line="5" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="30"/></expr_stmt>

    <decl_stmt><decl><type><specifier pos:line="7" pos:column="5">const<pos:position pos:line="7" pos:column="10"/></specifier> <name pos:line="7" pos:column="11">char<pos:position pos:line="7" pos:column="15"/></name> <modifier pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></modifier></type><name pos:line="7" pos:column="17">value<pos:position pos:line="7" pos:column="22"/></name> <init pos:line="7" pos:column="23">= <expr><name pos:line="7" pos:column="25">NULL<pos:position pos:line="7" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="30"/></decl_stmt>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name><name pos:line="8" pos:column="9">request<pos:position pos:line="8" pos:column="16"/></name><operator pos:line="8" pos:column="16">-&gt;<pos:position pos:line="8" pos:column="21"/></operator><name pos:line="8" pos:column="18">auth_user_request<pos:position pos:line="8" pos:column="35"/></name></name> <operator pos:line="8" pos:column="36">!=<pos:position pos:line="8" pos:column="38"/></operator> <name pos:line="8" pos:column="39">NULL<pos:position pos:line="8" pos:column="43"/></name></expr>)<pos:position pos:line="8" pos:column="44"/></condition><then pos:line="8" pos:column="44"> <block pos:line="8" pos:column="45">{
        <expr_stmt><expr><name pos:line="9" pos:column="9">value<pos:position pos:line="9" pos:column="14"/></name> <operator pos:line="9" pos:column="15">=<pos:position pos:line="9" pos:column="16"/></operator> <call><name><name pos:line="9" pos:column="17">request<pos:position pos:line="9" pos:column="24"/></name><operator pos:line="9" pos:column="24">-&gt;<pos:position pos:line="9" pos:column="29"/></operator><name pos:line="9" pos:column="26">auth_user_request<pos:position pos:line="9" pos:column="43"/></name><operator pos:line="9" pos:column="43">-&gt;<pos:position pos:line="9" pos:column="48"/></operator><name pos:line="9" pos:column="45">username<pos:position pos:line="9" pos:column="53"/></name></name><argument_list pos:line="9" pos:column="53">()<pos:position pos:line="9" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="56"/></expr_stmt>
    }<pos:position pos:line="10" pos:column="6"/></block></then> <elseif pos:line="10" pos:column="7">else <if pos:line="10" pos:column="12">if <condition pos:line="10" pos:column="15">(<expr><call><name><name pos:line="10" pos:column="16">request<pos:position pos:line="10" pos:column="23"/></name><operator pos:line="10" pos:column="23">-&gt;<pos:position pos:line="10" pos:column="28"/></operator><name pos:line="10" pos:column="25">extacl_user<pos:position pos:line="10" pos:column="36"/></name><operator pos:line="10" pos:column="36">.<pos:position pos:line="10" pos:column="37"/></operator><name pos:line="10" pos:column="37">size<pos:position pos:line="10" pos:column="41"/></name></name><argument_list pos:line="10" pos:column="41">()<pos:position pos:line="10" pos:column="43"/></argument_list></call> <operator pos:line="10" pos:column="44">&gt;<pos:position pos:line="10" pos:column="48"/></operator> <literal type="number" pos:line="10" pos:column="46">0<pos:position pos:line="10" pos:column="47"/></literal></expr>)<pos:position pos:line="10" pos:column="48"/></condition><then pos:line="10" pos:column="48"> <block pos:line="10" pos:column="49">{
        <expr_stmt><expr><name pos:line="11" pos:column="9">value<pos:position pos:line="11" pos:column="14"/></name> <operator pos:line="11" pos:column="15">=<pos:position pos:line="11" pos:column="16"/></operator> <call><name><name pos:line="11" pos:column="17">request<pos:position pos:line="11" pos:column="24"/></name><operator pos:line="11" pos:column="24">-&gt;<pos:position pos:line="11" pos:column="29"/></operator><name pos:line="11" pos:column="26">extacl_user<pos:position pos:line="11" pos:column="37"/></name><operator pos:line="11" pos:column="37">.<pos:position pos:line="11" pos:column="38"/></operator><name pos:line="11" pos:column="38">termedBuf<pos:position pos:line="11" pos:column="47"/></name></name><argument_list pos:line="11" pos:column="47">()<pos:position pos:line="11" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="50"/></expr_stmt>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if></elseif></if>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name pos:line="14" pos:column="9">value<pos:position pos:line="14" pos:column="14"/></name></expr>)<pos:position pos:line="14" pos:column="15"/></condition><then pos:line="14" pos:column="15"> <block pos:line="14" pos:column="16">{
        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name><name pos:line="15" pos:column="13">TheConfig<pos:position pos:line="15" pos:column="22"/></name><operator pos:line="15" pos:column="22">.<pos:position pos:line="15" pos:column="23"/></operator><name pos:line="15" pos:column="23">client_username_encode<pos:position pos:line="15" pos:column="45"/></name></name></expr>)<pos:position pos:line="15" pos:column="46"/></condition><then pos:line="15" pos:column="46"> <block pos:line="15" pos:column="47">{
            <decl_stmt><decl><type><name pos:line="16" pos:column="13">uint8_t<pos:position pos:line="16" pos:column="20"/></name></type> <name><name pos:line="16" pos:column="21">base64buf<pos:position pos:line="16" pos:column="30"/></name><index pos:line="16" pos:column="30">[<expr><call><name pos:line="16" pos:column="31">base64_encode_len<pos:position pos:line="16" pos:column="48"/></name><argument_list pos:line="16" pos:column="48">(<argument><expr><name pos:line="16" pos:column="49">MAX_LOGIN_SZ<pos:position pos:line="16" pos:column="61"/></name></expr></argument>)<pos:position pos:line="16" pos:column="62"/></argument_list></call></expr>]<pos:position pos:line="16" pos:column="63"/></index></name></decl>;<pos:position pos:line="16" pos:column="64"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="17" pos:column="13">size_t<pos:position pos:line="17" pos:column="19"/></name></type> <name pos:line="17" pos:column="20">resultLen<pos:position pos:line="17" pos:column="29"/></name> <init pos:line="17" pos:column="30">= <expr><call><name pos:line="17" pos:column="32">base64_encode_update<pos:position pos:line="17" pos:column="52"/></name><argument_list pos:line="17" pos:column="52">(<argument><expr><operator pos:line="17" pos:column="53">&amp;<pos:position pos:line="17" pos:column="58"/></operator><name pos:line="17" pos:column="54">ctx<pos:position pos:line="17" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="59">base64buf<pos:position pos:line="17" pos:column="68"/></name></expr></argument>, <argument><expr><call><name pos:line="17" pos:column="70">strlen<pos:position pos:line="17" pos:column="76"/></name><argument_list pos:line="17" pos:column="76">(<argument><expr><name pos:line="17" pos:column="77">value<pos:position pos:line="17" pos:column="82"/></name></expr></argument>)<pos:position pos:line="17" pos:column="83"/></argument_list></call></expr></argument>, <argument><expr><cast type="reinterpret" pos:line="17" pos:column="85">reinterpret_cast<argument_list type="generic" pos:line="17" pos:column="101">&lt;<argument><expr><specifier pos:line="17" pos:column="102">const<pos:position pos:line="17" pos:column="107"/></specifier> <name pos:line="17" pos:column="108">uint8_t<pos:position pos:line="17" pos:column="115"/></name><operator pos:line="17" pos:column="115">*<pos:position pos:line="17" pos:column="116"/></operator></expr></argument>&gt;<pos:position pos:line="17" pos:column="120"/></argument_list><argument_list pos:line="17" pos:column="117">(<argument><expr><name pos:line="17" pos:column="118">value<pos:position pos:line="17" pos:column="123"/></name></expr></argument>)<pos:position pos:line="17" pos:column="124"/></argument_list></cast></expr></argument>)<pos:position pos:line="17" pos:column="125"/></argument_list></call></expr></init></decl>;<pos:position pos:line="17" pos:column="126"/></decl_stmt>
            <expr_stmt><expr><name pos:line="18" pos:column="13">resultLen<pos:position pos:line="18" pos:column="22"/></name> <operator pos:line="18" pos:column="23">+=<pos:position pos:line="18" pos:column="25"/></operator> <call><name pos:line="18" pos:column="26">base64_encode_final<pos:position pos:line="18" pos:column="45"/></name><argument_list pos:line="18" pos:column="45">(<argument><expr><operator pos:line="18" pos:column="46">&amp;<pos:position pos:line="18" pos:column="51"/></operator><name pos:line="18" pos:column="47">ctx<pos:position pos:line="18" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="52">base64buf<pos:position pos:line="18" pos:column="61"/></name><operator pos:line="18" pos:column="61">+<pos:position pos:line="18" pos:column="62"/></operator><name pos:line="18" pos:column="62">resultLen<pos:position pos:line="18" pos:column="71"/></name></expr></argument>)<pos:position pos:line="18" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="73"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="19" pos:column="13">buf<pos:position pos:line="19" pos:column="16"/></name><operator pos:line="19" pos:column="16">.<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="17">appendf<pos:position pos:line="19" pos:column="24"/></name></name><argument_list pos:line="19" pos:column="24">(<argument><expr><literal type="string" pos:line="19" pos:column="25">"%s: %.*s\r\n"<pos:position pos:line="19" pos:column="39"/></literal></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="41">TheConfig<pos:position pos:line="19" pos:column="50"/></name><operator pos:line="19" pos:column="50">.<pos:position pos:line="19" pos:column="51"/></operator><name pos:line="19" pos:column="51">client_username_header<pos:position pos:line="19" pos:column="73"/></name></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="75">(<pos:position pos:line="19" pos:column="76"/></operator><name pos:line="19" pos:column="76">int<pos:position pos:line="19" pos:column="79"/></name><operator pos:line="19" pos:column="79">)<pos:position pos:line="19" pos:column="80"/></operator><name pos:line="19" pos:column="80">resultLen<pos:position pos:line="19" pos:column="89"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="91">base64buf<pos:position pos:line="19" pos:column="100"/></name></expr></argument>)<pos:position pos:line="19" pos:column="101"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="102"/></expr_stmt>
        }<pos:position pos:line="20" pos:column="10"/></block></then> <else pos:line="20" pos:column="11">else
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="21" pos:column="13">buf<pos:position pos:line="21" pos:column="16"/></name><operator pos:line="21" pos:column="16">.<pos:position pos:line="21" pos:column="17"/></operator><name pos:line="21" pos:column="17">appendf<pos:position pos:line="21" pos:column="24"/></name></name><argument_list pos:line="21" pos:column="24">(<argument><expr><literal type="string" pos:line="21" pos:column="25">"%s: %s\r\n"<pos:position pos:line="21" pos:column="37"/></literal></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="39">TheConfig<pos:position pos:line="21" pos:column="48"/></name><operator pos:line="21" pos:column="48">.<pos:position pos:line="21" pos:column="49"/></operator><name pos:line="21" pos:column="49">client_username_header<pos:position pos:line="21" pos:column="71"/></name></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="73">value<pos:position pos:line="21" pos:column="78"/></name></expr></argument>)<pos:position pos:line="21" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="80"/></expr_stmt></block></else></if>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>
<cpp:endif pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">endif<pos:position pos:line="23" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
