<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2938_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">StoreEntry<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">delayAwareRead<pos:position pos:line="2" pos:column="27"/></name></name><parameter_list pos:line="2" pos:column="27">(<parameter><decl><type><name pos:line="2" pos:column="28">int<pos:position pos:line="2" pos:column="31"/></name></type> <name pos:line="2" pos:column="32">fd<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="36">char<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">buf<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="47">int<pos:position pos:line="2" pos:column="50"/></name></type> <name pos:line="2" pos:column="51">len<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="56">AsyncCall<pos:position pos:line="2" pos:column="65"/></name><operator pos:line="2" pos:column="65">::<pos:position pos:line="2" pos:column="67"/></operator><name pos:line="2" pos:column="67">Pointer<pos:position pos:line="2" pos:column="74"/></name></name></type> <name pos:line="2" pos:column="75">callback<pos:position pos:line="2" pos:column="83"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="84"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">size_t<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">amountToRead<pos:position pos:line="4" pos:column="24"/></name> <init pos:line="4" pos:column="25">= <expr><call><name pos:line="4" pos:column="27">bytesWanted<pos:position pos:line="4" pos:column="38"/></name><argument_list pos:line="4" pos:column="38">(<argument><expr><call><name><name pos:line="4" pos:column="39">Range<pos:position pos:line="4" pos:column="44"/></name><argument_list type="generic" pos:line="4" pos:column="44">&lt;<argument><expr><name pos:line="4" pos:column="45">size_t<pos:position pos:line="4" pos:column="51"/></name></expr></argument>&gt;<pos:position pos:line="4" pos:column="55"/></argument_list></name><argument_list pos:line="4" pos:column="52">(<argument><expr><literal type="number" pos:line="4" pos:column="53">0<pos:position pos:line="4" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="56">len<pos:position pos:line="4" pos:column="59"/></name></expr></argument>)<pos:position pos:line="4" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="62"/></decl_stmt>
    <comment type="block" pos:line="5" pos:column="5">/* sketch: readdeferer* = getdeferer.
     * -&gt;deferRead (fd, buf, len, callback, DelayAwareRead, this)
     */</comment>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">amountToRead<pos:position pos:line="9" pos:column="21"/></name> <operator pos:line="9" pos:column="22">==<pos:position pos:line="9" pos:column="24"/></operator> <literal type="number" pos:line="9" pos:column="25">0<pos:position pos:line="9" pos:column="26"/></literal></expr>)<pos:position pos:line="9" pos:column="27"/></condition><then pos:line="9" pos:column="27"> <block pos:line="9" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">assert<pos:position pos:line="10" pos:column="15"/></name> <argument_list pos:line="10" pos:column="16">(<argument><expr><name pos:line="10" pos:column="17">mem_obj<pos:position pos:line="10" pos:column="24"/></name></expr></argument>)<pos:position pos:line="10" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="26"/></expr_stmt>
        <comment type="block" pos:line="11" pos:column="9">/* read ahead limit */</comment>
        <comment type="block" pos:line="12" pos:column="9">/* Perhaps these two calls should both live in MemObject */</comment>
<cpp:if pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">if<pos:position pos:line="13" pos:column="4"/></cpp:directive> <expr><name pos:line="13" pos:column="5">DELAY_POOLS<pos:position pos:line="13" pos:column="16"/></name></expr></cpp:if>

        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><operator pos:line="15" pos:column="13">!<pos:position pos:line="15" pos:column="14"/></operator><call><name><name pos:line="15" pos:column="14">mem_obj<pos:position pos:line="15" pos:column="21"/></name><operator pos:line="15" pos:column="21">-&gt;<pos:position pos:line="15" pos:column="26"/></operator><name pos:line="15" pos:column="23">readAheadPolicyCanRead<pos:position pos:line="15" pos:column="45"/></name></name><argument_list pos:line="15" pos:column="45">()<pos:position pos:line="15" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="48"/></condition><then pos:line="15" pos:column="48"> <block pos:line="15" pos:column="49">{
<cpp:endif pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">endif<pos:position pos:line="16" pos:column="7"/></cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name><name pos:line="17" pos:column="13">mem_obj<pos:position pos:line="17" pos:column="20"/></name><operator pos:line="17" pos:column="20">-&gt;<pos:position pos:line="17" pos:column="25"/></operator><name pos:line="17" pos:column="22">delayRead<pos:position pos:line="17" pos:column="31"/></name></name><argument_list pos:line="17" pos:column="31">(<argument><expr><call><name pos:line="17" pos:column="32">DeferredRead<pos:position pos:line="17" pos:column="44"/></name><argument_list pos:line="17" pos:column="44">(<argument><expr><name pos:line="17" pos:column="45">DeferReader<pos:position pos:line="17" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="58">this<pos:position pos:line="17" pos:column="62"/></name></expr></argument>, <argument><expr><call><name pos:line="17" pos:column="64">CommRead<pos:position pos:line="17" pos:column="72"/></name><argument_list pos:line="17" pos:column="72">(<argument><expr><name pos:line="17" pos:column="73">fd<pos:position pos:line="17" pos:column="75"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="77">buf<pos:position pos:line="17" pos:column="80"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="82">len<pos:position pos:line="17" pos:column="85"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="87">callback<pos:position pos:line="17" pos:column="95"/></name></expr></argument>)<pos:position pos:line="17" pos:column="96"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="97"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="98"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="99"/></expr_stmt>
            <return pos:line="18" pos:column="13">return;<pos:position pos:line="18" pos:column="20"/></return>
<cpp:if pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">if<pos:position pos:line="19" pos:column="4"/></cpp:directive> <expr><name pos:line="19" pos:column="5">DELAY_POOLS<pos:position pos:line="19" pos:column="16"/></name></expr></cpp:if>

        }<pos:position pos:line="21" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="23" pos:column="9">/* delay id limit */</comment>
        <expr_stmt><expr><call><name><name pos:line="24" pos:column="9">mem_obj<pos:position pos:line="24" pos:column="16"/></name><operator pos:line="24" pos:column="16">-&gt;<pos:position pos:line="24" pos:column="21"/></operator><name pos:line="24" pos:column="18">mostBytesAllowed<pos:position pos:line="24" pos:column="34"/></name></name><argument_list pos:line="24" pos:column="34">()<pos:position pos:line="24" pos:column="36"/></argument_list></call><operator pos:line="24" pos:column="36">.<pos:position pos:line="24" pos:column="37"/></operator><call><name pos:line="24" pos:column="37">delayRead<pos:position pos:line="24" pos:column="46"/></name><argument_list pos:line="24" pos:column="46">(<argument><expr><call><name pos:line="24" pos:column="47">DeferredRead<pos:position pos:line="24" pos:column="59"/></name><argument_list pos:line="24" pos:column="59">(<argument><expr><name pos:line="24" pos:column="60">DeferReader<pos:position pos:line="24" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="73">this<pos:position pos:line="24" pos:column="77"/></name></expr></argument>, <argument><expr><call><name pos:line="24" pos:column="79">CommRead<pos:position pos:line="24" pos:column="87"/></name><argument_list pos:line="24" pos:column="87">(<argument><expr><name pos:line="24" pos:column="88">fd<pos:position pos:line="24" pos:column="90"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="92">buf<pos:position pos:line="24" pos:column="95"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="97">len<pos:position pos:line="24" pos:column="100"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="102">callback<pos:position pos:line="24" pos:column="110"/></name></expr></argument>)<pos:position pos:line="24" pos:column="111"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="112"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="113"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="114"/></expr_stmt>

        <return pos:line="26" pos:column="9">return;<pos:position pos:line="26" pos:column="16"/></return>

<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif<pos:position pos:line="28" pos:column="7"/></cpp:directive></cpp:endif>

    }<pos:position pos:line="30" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="32" pos:column="5">comm_read<pos:position pos:line="32" pos:column="14"/></name><argument_list pos:line="32" pos:column="14">(<argument><expr><name pos:line="32" pos:column="15">fd<pos:position pos:line="32" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="19">buf<pos:position pos:line="32" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="24">amountToRead<pos:position pos:line="32" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="38">callback<pos:position pos:line="32" pos:column="46"/></name></expr></argument>)<pos:position pos:line="32" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="48"/></expr_stmt>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
