<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_631_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">DeferredReadManager<pos:position pos:line="2" pos:column="20"/></name><operator pos:line="2" pos:column="20">::<pos:position pos:line="2" pos:column="22"/></operator><name pos:line="2" pos:column="22">kickReads<pos:position pos:line="2" pos:column="31"/></name></name><parameter_list pos:line="2" pos:column="31">(<parameter><decl><type><name pos:line="2" pos:column="32">int<pos:position pos:line="2" pos:column="35"/></name> <specifier pos:line="2" pos:column="36">const<pos:position pos:line="2" pos:column="41"/></specifier></type> <name pos:line="2" pos:column="42">count<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="48"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/* if we had CbDataList::size() we could consolidate this and flushReads */</comment>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">count<pos:position pos:line="6" pos:column="14"/></name> <operator pos:line="6" pos:column="15">&lt;<pos:position pos:line="6" pos:column="19"/></operator> <literal type="number" pos:line="6" pos:column="17">1<pos:position pos:line="6" pos:column="18"/></literal></expr>)<pos:position pos:line="6" pos:column="19"/></condition><then pos:line="6" pos:column="19"> <block pos:line="6" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">flushReads<pos:position pos:line="7" pos:column="19"/></name><argument_list pos:line="7" pos:column="19">()<pos:position pos:line="7" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="22"/></expr_stmt>
        <return pos:line="8" pos:column="9">return;<pos:position pos:line="8" pos:column="16"/></return>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="11" pos:column="5">size_t<pos:position pos:line="11" pos:column="11"/></name></type> <name pos:line="11" pos:column="12">remaining<pos:position pos:line="11" pos:column="21"/></name> <init pos:line="11" pos:column="22">= <expr><name pos:line="11" pos:column="24">count<pos:position pos:line="11" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="30"/></decl_stmt>

    <while pos:line="13" pos:column="5">while <condition pos:line="13" pos:column="11">(<expr><operator pos:line="13" pos:column="12">!<pos:position pos:line="13" pos:column="13"/></operator><call><name><name pos:line="13" pos:column="13">deferredReads<pos:position pos:line="13" pos:column="26"/></name><operator pos:line="13" pos:column="26">.<pos:position pos:line="13" pos:column="27"/></operator><name pos:line="13" pos:column="27">empty<pos:position pos:line="13" pos:column="32"/></name></name><argument_list pos:line="13" pos:column="32">()<pos:position pos:line="13" pos:column="34"/></argument_list></call> <operator pos:line="13" pos:column="35">&amp;&amp;<pos:position pos:line="13" pos:column="45"/></operator> <name pos:line="13" pos:column="38">remaining<pos:position pos:line="13" pos:column="47"/></name></expr>)<pos:position pos:line="13" pos:column="48"/></condition> <block pos:line="13" pos:column="49">{
        <decl_stmt><decl><type><name pos:line="14" pos:column="9">DeferredRead<pos:position pos:line="14" pos:column="21"/></name></type> <name pos:line="14" pos:column="22">aRead<pos:position pos:line="14" pos:column="27"/></name> <init pos:line="14" pos:column="28">= <expr><call><name pos:line="14" pos:column="30">popHead<pos:position pos:line="14" pos:column="37"/></name><argument_list pos:line="14" pos:column="37">(<argument><expr><name pos:line="14" pos:column="38">deferredReads<pos:position pos:line="14" pos:column="51"/></name></expr></argument>)<pos:position pos:line="14" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="53"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">kickARead<pos:position pos:line="15" pos:column="18"/></name><argument_list pos:line="15" pos:column="18">(<argument><expr><name pos:line="15" pos:column="19">aRead<pos:position pos:line="15" pos:column="24"/></name></expr></argument>)<pos:position pos:line="15" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="26"/></expr_stmt>

        <if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><operator pos:line="17" pos:column="13">!<pos:position pos:line="17" pos:column="14"/></operator><name><name pos:line="17" pos:column="14">aRead<pos:position pos:line="17" pos:column="19"/></name><operator pos:line="17" pos:column="19">.<pos:position pos:line="17" pos:column="20"/></operator><name pos:line="17" pos:column="20">cancelled<pos:position pos:line="17" pos:column="29"/></name></name></expr>)<pos:position pos:line="17" pos:column="30"/></condition><then pos:line="17" pos:column="30">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="18" pos:column="13">--<pos:position pos:line="18" pos:column="15"/></operator><name pos:line="18" pos:column="15">remaining<pos:position pos:line="18" pos:column="24"/></name></expr>;<pos:position pos:line="18" pos:column="25"/></expr_stmt></block></then></if>
    }<pos:position pos:line="19" pos:column="6"/></block></while>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
