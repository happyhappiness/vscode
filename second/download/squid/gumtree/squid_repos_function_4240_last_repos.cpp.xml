<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4240_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ACLRegexData<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">parse<pos:position pos:line="2" pos:column="20"/></name></name><parameter_list pos:line="2" pos:column="20">()<pos:position pos:line="2" pos:column="22"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">28<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">2<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="19">"new Regex line or file"<pos:position pos:line="4" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="45"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="6" pos:column="5">SBufList<pos:position pos:line="6" pos:column="13"/></name></type> <name pos:line="6" pos:column="14">sl<pos:position pos:line="6" pos:column="16"/></name></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>
    <while pos:line="7" pos:column="5">while <condition pos:line="7" pos:column="11">(<decl><type><name pos:line="7" pos:column="12">char<pos:position pos:line="7" pos:column="16"/></name> <modifier pos:line="7" pos:column="17">*<pos:position pos:line="7" pos:column="18"/></modifier></type><name pos:line="7" pos:column="18">t<pos:position pos:line="7" pos:column="19"/></name> <init pos:line="7" pos:column="20">= <expr><call><name><name pos:line="7" pos:column="22">ConfigParser<pos:position pos:line="7" pos:column="34"/></name><operator pos:line="7" pos:column="34">::<pos:position pos:line="7" pos:column="36"/></operator><name pos:line="7" pos:column="36">RegexStrtokFile<pos:position pos:line="7" pos:column="51"/></name></name><argument_list pos:line="7" pos:column="51">()<pos:position pos:line="7" pos:column="53"/></argument_list></call></expr></init></decl>)<pos:position pos:line="7" pos:column="54"/></condition> <block pos:line="7" pos:column="55">{
        <decl_stmt><decl><type><specifier pos:line="8" pos:column="9">const<pos:position pos:line="8" pos:column="14"/></specifier> <name pos:line="8" pos:column="15">char<pos:position pos:line="8" pos:column="19"/></name> <modifier pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></modifier></type><name pos:line="8" pos:column="21">clean<pos:position pos:line="8" pos:column="26"/></name> <init pos:line="8" pos:column="27">= <expr><call><name pos:line="8" pos:column="29">removeUnnecessaryWildcards<pos:position pos:line="8" pos:column="55"/></name><argument_list pos:line="8" pos:column="55">(<argument><expr><name pos:line="8" pos:column="56">t<pos:position pos:line="8" pos:column="57"/></name></expr></argument>)<pos:position pos:line="8" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="59"/></decl_stmt>
        <if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><call><name pos:line="9" pos:column="13">strlen<pos:position pos:line="9" pos:column="19"/></name><argument_list pos:line="9" pos:column="19">(<argument><expr><name pos:line="9" pos:column="20">clean<pos:position pos:line="9" pos:column="25"/></name></expr></argument>)<pos:position pos:line="9" pos:column="26"/></argument_list></call> <operator pos:line="9" pos:column="27">&gt;<pos:position pos:line="9" pos:column="31"/></operator> <name pos:line="9" pos:column="29">BUFSIZ<pos:position pos:line="9" pos:column="35"/></name><operator pos:line="9" pos:column="35">-<pos:position pos:line="9" pos:column="36"/></operator><literal type="number" pos:line="9" pos:column="36">1<pos:position pos:line="9" pos:column="37"/></literal></expr>)<pos:position pos:line="9" pos:column="38"/></condition><then pos:line="9" pos:column="38"> <block pos:line="9" pos:column="39">{
            <expr_stmt><expr><call><name pos:line="10" pos:column="13">debugs<pos:position pos:line="10" pos:column="19"/></name><argument_list pos:line="10" pos:column="19">(<argument><expr><literal type="number" pos:line="10" pos:column="20">28<pos:position pos:line="10" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="24">DBG_CRITICAL<pos:position pos:line="10" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="38">cfg_filename<pos:position pos:line="10" pos:column="50"/></name> <operator pos:line="10" pos:column="51">&lt;&lt;<pos:position pos:line="10" pos:column="59"/></operator> <literal type="string" pos:line="10" pos:column="54">" line "<pos:position pos:line="10" pos:column="62"/></literal> <operator pos:line="10" pos:column="63">&lt;&lt;<pos:position pos:line="10" pos:column="71"/></operator> <name pos:line="10" pos:column="66">config_lineno<pos:position pos:line="10" pos:column="79"/></name> <operator pos:line="10" pos:column="80">&lt;&lt;<pos:position pos:line="10" pos:column="88"/></operator> <literal type="string" pos:line="10" pos:column="83">": "<pos:position pos:line="10" pos:column="87"/></literal> <operator pos:line="10" pos:column="88">&lt;&lt;<pos:position pos:line="10" pos:column="96"/></operator> <name pos:line="10" pos:column="91">config_input_line<pos:position pos:line="10" pos:column="108"/></name></expr></argument>)<pos:position pos:line="10" pos:column="109"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="110"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="11" pos:column="13">debugs<pos:position pos:line="11" pos:column="19"/></name><argument_list pos:line="11" pos:column="19">(<argument><expr><literal type="number" pos:line="11" pos:column="20">28<pos:position pos:line="11" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="24">DBG_CRITICAL<pos:position pos:line="11" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="38">"ERROR: Skipping regular expression. Larger than "<pos:position pos:line="11" pos:column="88"/></literal> <operator pos:line="11" pos:column="89">&lt;&lt;<pos:position pos:line="11" pos:column="97"/></operator> <name pos:line="11" pos:column="92">BUFSIZ<pos:position pos:line="11" pos:column="98"/></name><operator pos:line="11" pos:column="98">-<pos:position pos:line="11" pos:column="99"/></operator><literal type="number" pos:line="11" pos:column="99">1<pos:position pos:line="11" pos:column="100"/></literal> <operator pos:line="11" pos:column="101">&lt;&lt;<pos:position pos:line="11" pos:column="109"/></operator> <literal type="string" pos:line="11" pos:column="104">" characters: '"<pos:position pos:line="11" pos:column="120"/></literal> <operator pos:line="11" pos:column="121">&lt;&lt;<pos:position pos:line="11" pos:column="129"/></operator> <name pos:line="11" pos:column="124">clean<pos:position pos:line="11" pos:column="129"/></name> <operator pos:line="11" pos:column="130">&lt;&lt;<pos:position pos:line="11" pos:column="138"/></operator> <literal type="string" pos:line="11" pos:column="133">"'"<pos:position pos:line="11" pos:column="136"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="137"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="138"/></expr_stmt>
        }<pos:position pos:line="12" pos:column="10"/></block></then> <else pos:line="12" pos:column="11">else <block pos:line="12" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="13" pos:column="13">debugs<pos:position pos:line="13" pos:column="19"/></name><argument_list pos:line="13" pos:column="19">(<argument><expr><literal type="number" pos:line="13" pos:column="20">28<pos:position pos:line="13" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="24">3<pos:position pos:line="13" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="27">"buffering RE '"<pos:position pos:line="13" pos:column="43"/></literal> <operator pos:line="13" pos:column="44">&lt;&lt;<pos:position pos:line="13" pos:column="52"/></operator> <name pos:line="13" pos:column="47">clean<pos:position pos:line="13" pos:column="52"/></name> <operator pos:line="13" pos:column="53">&lt;&lt;<pos:position pos:line="13" pos:column="61"/></operator> <literal type="string" pos:line="13" pos:column="56">"'"<pos:position pos:line="13" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="61"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="14" pos:column="13">sl<pos:position pos:line="14" pos:column="15"/></name><operator pos:line="14" pos:column="15">.<pos:position pos:line="14" pos:column="16"/></operator><name pos:line="14" pos:column="16">emplace_back<pos:position pos:line="14" pos:column="28"/></name></name><argument_list pos:line="14" pos:column="28">(<argument><expr><name pos:line="14" pos:column="29">clean<pos:position pos:line="14" pos:column="34"/></name></expr></argument>)<pos:position pos:line="14" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="36"/></expr_stmt>
        }<pos:position pos:line="15" pos:column="10"/></block></else></if>
    }<pos:position pos:line="16" pos:column="6"/></block></while>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><operator pos:line="18" pos:column="9">!<pos:position pos:line="18" pos:column="10"/></operator><call><name pos:line="18" pos:column="10">compileOptimisedREs<pos:position pos:line="18" pos:column="29"/></name><argument_list pos:line="18" pos:column="29">(<argument><expr><name pos:line="18" pos:column="30">data<pos:position pos:line="18" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="36">sl<pos:position pos:line="18" pos:column="38"/></name></expr></argument>)<pos:position pos:line="18" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="40"/></condition><then pos:line="18" pos:column="40"> <block pos:line="18" pos:column="41">{
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">debugs<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><literal type="number" pos:line="19" pos:column="16">28<pos:position pos:line="19" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="20">DBG_IMPORTANT<pos:position pos:line="19" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="35">"WARNING: optimisation of regular expressions failed; using fallback method without optimisation"<pos:position pos:line="19" pos:column="132"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="133"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="134"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">compileUnoptimisedREs<pos:position pos:line="20" pos:column="30"/></name><argument_list pos:line="20" pos:column="30">(<argument><expr><name pos:line="20" pos:column="31">data<pos:position pos:line="20" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="37">sl<pos:position pos:line="20" pos:column="39"/></name></expr></argument>)<pos:position pos:line="20" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
