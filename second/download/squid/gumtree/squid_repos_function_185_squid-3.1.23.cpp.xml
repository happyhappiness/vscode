<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_185_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">main<pos:position pos:line="2" pos:column="5"/></name><parameter_list pos:line="2" pos:column="5">(<parameter><decl><type><name pos:line="2" pos:column="6">int<pos:position pos:line="2" pos:column="9"/></name></type> <name pos:line="2" pos:column="10">argc<pos:position pos:line="2" pos:column="14"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="16">char<pos:position pos:line="2" pos:column="20"/></name> <modifier pos:line="2" pos:column="21">*<pos:position pos:line="2" pos:column="22"/></modifier></type><name><name pos:line="2" pos:column="22">argv<pos:position pos:line="2" pos:column="26"/></name><index pos:line="2" pos:column="26">[]<pos:position pos:line="2" pos:column="28"/></index></name></decl></parameter>)<pos:position pos:line="2" pos:column="29"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><name pos:line="4" pos:column="5">my_program_name<pos:position pos:line="4" pos:column="20"/></name> <operator pos:line="4" pos:column="21">=<pos:position pos:line="4" pos:column="22"/></operator> <name><name pos:line="4" pos:column="23">argv<pos:position pos:line="4" pos:column="27"/></name><index pos:line="4" pos:column="27">[<expr><literal type="number" pos:line="4" pos:column="28">0<pos:position pos:line="4" pos:column="29"/></literal></expr>]<pos:position pos:line="4" pos:column="30"/></index></name></expr>;<pos:position pos:line="4" pos:column="31"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="6" pos:column="5">process_options<pos:position pos:line="6" pos:column="20"/></name><argument_list pos:line="6" pos:column="20">(<argument><expr><name pos:line="6" pos:column="21">argc<pos:position pos:line="6" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="27">argv<pos:position pos:line="6" pos:column="31"/></name></expr></argument>)<pos:position pos:line="6" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="33"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="8" pos:column="5">debug<pos:position pos:line="8" pos:column="10"/></name><argument_list pos:line="8" pos:column="10">(<argument><expr><literal type="string" pos:line="8" pos:column="11">"%s build "<pos:position pos:line="8" pos:column="22"/></literal> <name pos:line="8" pos:column="23">__DATE__<pos:position pos:line="8" pos:column="31"/></name> <literal type="string" pos:line="8" pos:column="32">", "<pos:position pos:line="8" pos:column="36"/></literal> <name pos:line="8" pos:column="37">__TIME__<pos:position pos:line="8" pos:column="45"/></name> <literal type="string" pos:line="8" pos:column="46">" starting up...\n"<pos:position pos:line="8" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="67">my_program_name<pos:position pos:line="8" pos:column="82"/></name></expr></argument>)<pos:position pos:line="8" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="84"/></expr_stmt>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><call><name pos:line="10" pos:column="9">LoadSecurityDll<pos:position pos:line="10" pos:column="24"/></name><argument_list pos:line="10" pos:column="24">(<argument><expr><name pos:line="10" pos:column="25">SSP_NTLM<pos:position pos:line="10" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="35">NTLM_PACKAGE_NAME<pos:position pos:line="10" pos:column="52"/></name></expr></argument>)<pos:position pos:line="10" pos:column="53"/></argument_list></call> <operator pos:line="10" pos:column="54">==<pos:position pos:line="10" pos:column="56"/></operator> <name pos:line="10" pos:column="57">NULL<pos:position pos:line="10" pos:column="61"/></name></expr>)<pos:position pos:line="10" pos:column="62"/></condition><then pos:line="10" pos:column="62"> <block pos:line="10" pos:column="63">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">fprintf<pos:position pos:line="11" pos:column="16"/></name><argument_list pos:line="11" pos:column="16">(<argument><expr><name pos:line="11" pos:column="17">stderr<pos:position pos:line="11" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="25">"FATAL, can't initialize SSPI, exiting.\n"<pos:position pos:line="11" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="69"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">exit<pos:position pos:line="12" pos:column="13"/></name><argument_list pos:line="12" pos:column="13">(<argument><expr><literal type="number" pos:line="12" pos:column="14">1<pos:position pos:line="12" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">debug<pos:position pos:line="14" pos:column="10"/></name><argument_list pos:line="14" pos:column="10">(<argument><expr><literal type="string" pos:line="14" pos:column="11">"SSPI initialized OK\n"<pos:position pos:line="14" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="36"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="16" pos:column="5">atexit<pos:position pos:line="16" pos:column="11"/></name><argument_list pos:line="16" pos:column="11">(<argument><expr><name pos:line="16" pos:column="12">UnloadSecurityDll<pos:position pos:line="16" pos:column="29"/></name></expr></argument>)<pos:position pos:line="16" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="31"/></expr_stmt>

    <comment type="block" pos:line="18" pos:column="5">/* initialize FDescs */</comment>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">setbuf<pos:position pos:line="19" pos:column="11"/></name><argument_list pos:line="19" pos:column="11">(<argument><expr><name pos:line="19" pos:column="12">stdout<pos:position pos:line="19" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="20">NULL<pos:position pos:line="19" pos:column="24"/></name></expr></argument>)<pos:position pos:line="19" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">setbuf<pos:position pos:line="20" pos:column="11"/></name><argument_list pos:line="20" pos:column="11">(<argument><expr><name pos:line="20" pos:column="12">stderr<pos:position pos:line="20" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="20">NULL<pos:position pos:line="20" pos:column="24"/></name></expr></argument>)<pos:position pos:line="20" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="26"/></expr_stmt>

    <while pos:line="22" pos:column="5">while <condition pos:line="22" pos:column="11">(<expr><call><name pos:line="22" pos:column="12">manage_request<pos:position pos:line="22" pos:column="26"/></name><argument_list pos:line="22" pos:column="26">()<pos:position pos:line="22" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="29"/></condition> <block pos:line="22" pos:column="30">{
        <comment type="block" pos:line="23" pos:column="9">/* everything is done within manage_request */</comment>
    }<pos:position pos:line="24" pos:column="6"/></block></while>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">exit<pos:position pos:line="25" pos:column="9"/></name><argument_list pos:line="25" pos:column="9">(<argument><expr><literal type="number" pos:line="25" pos:column="10">0<pos:position pos:line="25" pos:column="11"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="13"/></expr_stmt>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
