<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3974_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Adaptation<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">Ecap<pos:position pos:line="2" pos:column="17"/></name><operator pos:line="2" pos:column="17">::<pos:position pos:line="2" pos:column="19"/></operator><name pos:line="2" pos:column="19">XactionRep<pos:position pos:line="2" pos:column="29"/></name><operator pos:line="2" pos:column="29">::<pos:position pos:line="2" pos:column="31"/></operator><name pos:line="2" pos:column="31">start<pos:position pos:line="2" pos:column="36"/></name></name><parameter_list pos:line="2" pos:column="36">()<pos:position pos:line="2" pos:column="38"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">Must<pos:position pos:line="4" pos:column="9"/></name><argument_list pos:line="4" pos:column="9">(<argument><expr><name pos:line="4" pos:column="10">theMaster<pos:position pos:line="4" pos:column="19"/></name></expr></argument>)<pos:position pos:line="4" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="21"/></expr_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">!<pos:position pos:line="6" pos:column="10"/></operator><call><name><name pos:line="6" pos:column="10">theVirginRep<pos:position pos:line="6" pos:column="22"/></name><operator pos:line="6" pos:column="22">.<pos:position pos:line="6" pos:column="23"/></operator><name pos:line="6" pos:column="23">raw<pos:position pos:line="6" pos:column="26"/></name></name><argument_list pos:line="6" pos:column="26">()<pos:position pos:line="6" pos:column="28"/></argument_list></call><operator pos:line="6" pos:column="28">.<pos:position pos:line="6" pos:column="29"/></operator><name pos:line="6" pos:column="29">body_pipe<pos:position pos:line="6" pos:column="38"/></name></expr>)<pos:position pos:line="6" pos:column="39"/></condition><then pos:line="6" pos:column="39">
        <block type="pseudo"><expr_stmt><expr><name pos:line="7" pos:column="9">makingVb<pos:position pos:line="7" pos:column="17"/></name> <operator pos:line="7" pos:column="18">=<pos:position pos:line="7" pos:column="19"/></operator> <name pos:line="7" pos:column="20">opNever<pos:position pos:line="7" pos:column="27"/></name></expr>;<pos:position pos:line="7" pos:column="28"/></expr_stmt></block></then></if> <comment type="line" pos:line="7" pos:column="29">// there is nothing to deliver</comment>

    <decl_stmt><decl><type><specifier pos:line="9" pos:column="5">const<pos:position pos:line="9" pos:column="10"/></specifier> <name pos:line="9" pos:column="11">HttpRequest<pos:position pos:line="9" pos:column="22"/></name> <modifier pos:line="9" pos:column="23">*<pos:position pos:line="9" pos:column="24"/></modifier></type><name pos:line="9" pos:column="24">request<pos:position pos:line="9" pos:column="31"/></name> <init pos:line="9" pos:column="32">= <expr><cast type="dynamic" pos:line="9" pos:column="34">dynamic_cast<argument_list type="generic" pos:line="9" pos:column="46">&lt;<argument><expr><specifier pos:line="9" pos:column="47">const<pos:position pos:line="9" pos:column="52"/></specifier> <name pos:line="9" pos:column="53">HttpRequest<pos:position pos:line="9" pos:column="64"/></name><operator pos:line="9" pos:column="64">*<pos:position pos:line="9" pos:column="65"/></operator></expr></argument>&gt;<pos:position pos:line="9" pos:column="69"/></argument_list> <argument_list pos:line="9" pos:column="67">(<argument><expr><ternary><condition><expr><name pos:line="9" pos:column="68">theCauseRep<pos:position pos:line="9" pos:column="79"/></name></expr> ?<pos:position pos:line="9" pos:column="81"/></condition><then pos:line="9" pos:column="81">
                                 <expr><call><name><name pos:line="10" pos:column="34">theCauseRep<pos:position pos:line="10" pos:column="45"/></name><operator pos:line="10" pos:column="45">-&gt;<pos:position pos:line="10" pos:column="50"/></operator><name pos:line="10" pos:column="47">raw<pos:position pos:line="10" pos:column="50"/></name></name><argument_list pos:line="10" pos:column="50">()<pos:position pos:line="10" pos:column="52"/></argument_list></call><operator pos:line="10" pos:column="52">.<pos:position pos:line="10" pos:column="53"/></operator><name pos:line="10" pos:column="53">header<pos:position pos:line="10" pos:column="59"/></name></expr> <pos:position pos:line="10" pos:column="60"/></then><else pos:line="10" pos:column="60">: <expr><call><name><name pos:line="10" pos:column="62">theVirginRep<pos:position pos:line="10" pos:column="74"/></name><operator pos:line="10" pos:column="74">.<pos:position pos:line="10" pos:column="75"/></operator><name pos:line="10" pos:column="75">raw<pos:position pos:line="10" pos:column="78"/></name></name><argument_list pos:line="10" pos:column="78">()<pos:position pos:line="10" pos:column="80"/></argument_list></call><operator pos:line="10" pos:column="80">.<pos:position pos:line="10" pos:column="81"/></operator><name pos:line="10" pos:column="81">header<pos:position pos:line="10" pos:column="87"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="10" pos:column="88"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="10" pos:column="89"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">Must<pos:position pos:line="11" pos:column="9"/></name><argument_list pos:line="11" pos:column="9">(<argument><expr><name pos:line="11" pos:column="10">request<pos:position pos:line="11" pos:column="17"/></name></expr></argument>)<pos:position pos:line="11" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="19"/></expr_stmt>
    <decl_stmt><decl><type><name><name pos:line="12" pos:column="5">Adaptation<pos:position pos:line="12" pos:column="15"/></name><operator pos:line="12" pos:column="15">::<pos:position pos:line="12" pos:column="17"/></operator><name pos:line="12" pos:column="17">History<pos:position pos:line="12" pos:column="24"/></name><operator pos:line="12" pos:column="24">::<pos:position pos:line="12" pos:column="26"/></operator><name pos:line="12" pos:column="26">Pointer<pos:position pos:line="12" pos:column="33"/></name></name></type> <name pos:line="12" pos:column="34">ah<pos:position pos:line="12" pos:column="36"/></name> <init pos:line="12" pos:column="37">= <expr><call><name><name pos:line="12" pos:column="39">request<pos:position pos:line="12" pos:column="46"/></name><operator pos:line="12" pos:column="46">-&gt;<pos:position pos:line="12" pos:column="51"/></operator><name pos:line="12" pos:column="48">adaptLogHistory<pos:position pos:line="12" pos:column="63"/></name></name><argument_list pos:line="12" pos:column="63">()<pos:position pos:line="12" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="66"/></decl_stmt>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">ah<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">!=<pos:position pos:line="13" pos:column="14"/></operator> <name pos:line="13" pos:column="15">NULL<pos:position pos:line="13" pos:column="19"/></name></expr>)<pos:position pos:line="13" pos:column="20"/></condition><then pos:line="13" pos:column="20"> <block pos:line="13" pos:column="21">{
        <comment type="line" pos:line="14" pos:column="9">// retrying=false because ecap never retries transactions</comment>
        <expr_stmt><expr><name pos:line="15" pos:column="9">adaptHistoryId<pos:position pos:line="15" pos:column="23"/></name> <operator pos:line="15" pos:column="24">=<pos:position pos:line="15" pos:column="25"/></operator> <call><name><name pos:line="15" pos:column="26">ah<pos:position pos:line="15" pos:column="28"/></name><operator pos:line="15" pos:column="28">-&gt;<pos:position pos:line="15" pos:column="33"/></operator><name pos:line="15" pos:column="30">recordXactStart<pos:position pos:line="15" pos:column="45"/></name></name><argument_list pos:line="15" pos:column="45">(<argument><expr><call><name pos:line="15" pos:column="46">service<pos:position pos:line="15" pos:column="53"/></name><argument_list pos:line="15" pos:column="53">()<pos:position pos:line="15" pos:column="55"/></argument_list></call><operator pos:line="15" pos:column="55">.<pos:position pos:line="15" pos:column="56"/></operator><call><name pos:line="15" pos:column="56">cfg<pos:position pos:line="15" pos:column="59"/></name><argument_list pos:line="15" pos:column="59">()<pos:position pos:line="15" pos:column="61"/></argument_list></call><operator pos:line="15" pos:column="61">.<pos:position pos:line="15" pos:column="62"/></operator><name pos:line="15" pos:column="62">key<pos:position pos:line="15" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="67">current_time<pos:position pos:line="15" pos:column="79"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="15" pos:column="81">false<pos:position pos:line="15" pos:column="86"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="88"/></expr_stmt>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="18" pos:column="5">theMaster<pos:position pos:line="18" pos:column="14"/></name><operator pos:line="18" pos:column="14">-&gt;<pos:position pos:line="18" pos:column="19"/></operator><name pos:line="18" pos:column="16">start<pos:position pos:line="18" pos:column="21"/></name></name><argument_list pos:line="18" pos:column="21">()<pos:position pos:line="18" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="24"/></expr_stmt>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
