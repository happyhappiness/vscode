<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4872_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">CossSwapDir<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">create<pos:position pos:line="2" pos:column="20"/></name></name><parameter_list pos:line="2" pos:column="20">()<pos:position pos:line="2" pos:column="22"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name> <argument_list pos:line="4" pos:column="12">(<argument><expr><literal type="number" pos:line="4" pos:column="13">47<pos:position pos:line="4" pos:column="15"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="17">3<pos:position pos:line="4" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="20">"Creating swap space in "<pos:position pos:line="4" pos:column="45"/></literal> <operator pos:line="4" pos:column="46">&lt;&lt;<pos:position pos:line="4" pos:column="54"/></operator> <name pos:line="4" pos:column="49">path<pos:position pos:line="4" pos:column="53"/></name></expr></argument>)<pos:position pos:line="4" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="55"/></expr_stmt>

    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">struct<pos:position pos:line="6" pos:column="11"/></name> <name pos:line="6" pos:column="12">stat<pos:position pos:line="6" pos:column="16"/></name></name></type> <name pos:line="6" pos:column="17">swap_sb<pos:position pos:line="6" pos:column="24"/></name></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">swap<pos:position pos:line="7" pos:column="13"/></name></decl>;<pos:position pos:line="7" pos:column="14"/></decl_stmt>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><call><name><operator pos:line="9" pos:column="9">::<pos:position pos:line="9" pos:column="11"/></operator><name pos:line="9" pos:column="11">stat<pos:position pos:line="9" pos:column="15"/></name></name><argument_list pos:line="9" pos:column="15">(<argument><expr><name pos:line="9" pos:column="16">path<pos:position pos:line="9" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="22">&amp;<pos:position pos:line="9" pos:column="27"/></operator><name pos:line="9" pos:column="23">swap_sb<pos:position pos:line="9" pos:column="30"/></name></expr></argument>)<pos:position pos:line="9" pos:column="31"/></argument_list></call> <operator pos:line="9" pos:column="32">&lt;<pos:position pos:line="9" pos:column="36"/></operator> <literal type="number" pos:line="9" pos:column="34">0<pos:position pos:line="9" pos:column="35"/></literal></expr>)<pos:position pos:line="9" pos:column="36"/></condition><then pos:line="9" pos:column="36"> <block pos:line="9" pos:column="37">{
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">debugs<pos:position pos:line="10" pos:column="15"/></name> <argument_list pos:line="10" pos:column="16">(<argument><expr><literal type="number" pos:line="10" pos:column="17">47<pos:position pos:line="10" pos:column="19"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="21">2<pos:position pos:line="10" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="24">"COSS swap space space being allocated."<pos:position pos:line="10" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="66"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">mkdir<pos:position pos:line="11" pos:column="14"/></name><argument_list pos:line="11" pos:column="14">(<argument><expr><name pos:line="11" pos:column="15">path<pos:position pos:line="11" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="21">0700<pos:position pos:line="11" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="14" pos:column="5">/* should check here for directories instead of files, and for file size
     * TODO - if nothing changes, there is nothing to do
     */</comment>
    <expr_stmt><expr><name pos:line="17" pos:column="5">swap<pos:position pos:line="17" pos:column="9"/></name> <operator pos:line="17" pos:column="10">=<pos:position pos:line="17" pos:column="11"/></operator> <call><name pos:line="17" pos:column="12">open<pos:position pos:line="17" pos:column="16"/></name><argument_list pos:line="17" pos:column="16">(<argument><expr><call><name pos:line="17" pos:column="17">stripePath<pos:position pos:line="17" pos:column="27"/></name><argument_list pos:line="17" pos:column="27">()<pos:position pos:line="17" pos:column="29"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="17" pos:column="31">O_WRONLY<pos:position pos:line="17" pos:column="39"/></name> <operator pos:line="17" pos:column="40">|<pos:position pos:line="17" pos:column="41"/></operator> <name pos:line="17" pos:column="42">O_CREAT<pos:position pos:line="17" pos:column="49"/></name> <operator pos:line="17" pos:column="50">|<pos:position pos:line="17" pos:column="51"/></operator> <name pos:line="17" pos:column="52">O_TRUNC<pos:position pos:line="17" pos:column="59"/></name> <operator pos:line="17" pos:column="60">|<pos:position pos:line="17" pos:column="61"/></operator> <name pos:line="17" pos:column="62">O_BINARY<pos:position pos:line="17" pos:column="70"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="72">0600<pos:position pos:line="17" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="78"/></expr_stmt>

    <comment type="block" pos:line="19" pos:column="5">/* TODO just set the file size */</comment>
    <decl_stmt><decl><type><name pos:line="20" pos:column="5">char<pos:position pos:line="20" pos:column="9"/></name></type> <name><name pos:line="20" pos:column="10">block<pos:position pos:line="20" pos:column="15"/></name><index pos:line="20" pos:column="15">[<expr><literal type="number" pos:line="20" pos:column="16">1024<pos:position pos:line="20" pos:column="20"/></literal></expr>]<pos:position pos:line="20" pos:column="21"/></index></name></decl>;<pos:position pos:line="20" pos:column="22"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">Must<pos:position pos:line="21" pos:column="9"/></name><argument_list pos:line="21" pos:column="9">(<argument><expr><call><name pos:line="21" pos:column="10">maxSize<pos:position pos:line="21" pos:column="17"/></name><argument_list pos:line="21" pos:column="17">()<pos:position pos:line="21" pos:column="19"/></argument_list></call> <operator pos:line="21" pos:column="20">%<pos:position pos:line="21" pos:column="21"/></operator> <sizeof pos:line="21" pos:column="22">sizeof<argument_list pos:line="21" pos:column="28">(<argument><expr><name pos:line="21" pos:column="29">block<pos:position pos:line="21" pos:column="34"/></name></expr></argument>)<pos:position pos:line="21" pos:column="35"/></argument_list></sizeof> <operator pos:line="21" pos:column="36">==<pos:position pos:line="21" pos:column="38"/></operator> <literal type="number" pos:line="21" pos:column="39">0<pos:position pos:line="21" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">memset<pos:position pos:line="22" pos:column="11"/></name><argument_list pos:line="22" pos:column="11">(<argument><expr><name pos:line="22" pos:column="12">block<pos:position pos:line="22" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="22" pos:column="19">'\0'<pos:position pos:line="22" pos:column="23"/></literal></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="25">sizeof<argument_list pos:line="22" pos:column="31">(<argument><expr><name pos:line="22" pos:column="32">block<pos:position pos:line="22" pos:column="37"/></name></expr></argument>)<pos:position pos:line="22" pos:column="38"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="40"/></expr_stmt>

    <for pos:line="24" pos:column="5">for <control pos:line="24" pos:column="9">(<init><decl><type><name pos:line="24" pos:column="10">uint64_t<pos:position pos:line="24" pos:column="18"/></name></type> <name pos:line="24" pos:column="19">offset<pos:position pos:line="24" pos:column="25"/></name> <init pos:line="24" pos:column="26">= <expr><literal type="number" pos:line="24" pos:column="28">0<pos:position pos:line="24" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="24" pos:column="30"/></init> <condition><expr><name pos:line="24" pos:column="31">offset<pos:position pos:line="24" pos:column="37"/></name> <operator pos:line="24" pos:column="38">&lt;<pos:position pos:line="24" pos:column="42"/></operator> <call><name pos:line="24" pos:column="40">maxSize<pos:position pos:line="24" pos:column="47"/></name><argument_list pos:line="24" pos:column="47">()<pos:position pos:line="24" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="50"/></condition> <incr><expr><name pos:line="24" pos:column="51">offset<pos:position pos:line="24" pos:column="57"/></name> <operator pos:line="24" pos:column="58">+=<pos:position pos:line="24" pos:column="60"/></operator> <sizeof pos:line="24" pos:column="61">sizeof<argument_list pos:line="24" pos:column="67">(<argument><expr><name pos:line="24" pos:column="68">block<pos:position pos:line="24" pos:column="73"/></name></expr></argument>)<pos:position pos:line="24" pos:column="74"/></argument_list></sizeof></expr></incr>)<pos:position pos:line="24" pos:column="75"/></control> <block pos:line="24" pos:column="76">{
        <if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><call><name pos:line="25" pos:column="13">write<pos:position pos:line="25" pos:column="18"/></name> <argument_list pos:line="25" pos:column="19">(<argument><expr><name pos:line="25" pos:column="20">swap<pos:position pos:line="25" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="26">block<pos:position pos:line="25" pos:column="31"/></name></expr></argument>, <argument><expr><sizeof pos:line="25" pos:column="33">sizeof<argument_list pos:line="25" pos:column="39">(<argument><expr><name pos:line="25" pos:column="40">block<pos:position pos:line="25" pos:column="45"/></name></expr></argument>)<pos:position pos:line="25" pos:column="46"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="25" pos:column="47"/></argument_list></call> <operator pos:line="25" pos:column="48">!=<pos:position pos:line="25" pos:column="50"/></operator> <sizeof pos:line="25" pos:column="51">sizeof<argument_list pos:line="25" pos:column="57">(<argument><expr><name pos:line="25" pos:column="58">block<pos:position pos:line="25" pos:column="63"/></name></expr></argument>)<pos:position pos:line="25" pos:column="64"/></argument_list></sizeof></expr>)<pos:position pos:line="25" pos:column="65"/></condition><then pos:line="25" pos:column="65"> <block pos:line="25" pos:column="66">{
            <expr_stmt><expr><call><name pos:line="26" pos:column="13">debugs<pos:position pos:line="26" pos:column="19"/></name> <argument_list pos:line="26" pos:column="20">(<argument><expr><literal type="number" pos:line="26" pos:column="21">47<pos:position pos:line="26" pos:column="23"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="25">0<pos:position pos:line="26" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="28">"Failed to create COSS swap space in "<pos:position pos:line="26" pos:column="66"/></literal> <operator pos:line="26" pos:column="67">&lt;&lt;<pos:position pos:line="26" pos:column="75"/></operator> <name pos:line="26" pos:column="70">path<pos:position pos:line="26" pos:column="74"/></name></expr></argument>)<pos:position pos:line="26" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="76"/></expr_stmt>
        }<pos:position pos:line="27" pos:column="10"/></block></then></if>
    }<pos:position pos:line="28" pos:column="6"/></block></for>

    <expr_stmt><expr><call><name pos:line="30" pos:column="5">close<pos:position pos:line="30" pos:column="10"/></name> <argument_list pos:line="30" pos:column="11">(<argument><expr><name pos:line="30" pos:column="12">swap<pos:position pos:line="30" pos:column="16"/></name></expr></argument>)<pos:position pos:line="30" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="18"/></expr_stmt>

}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
