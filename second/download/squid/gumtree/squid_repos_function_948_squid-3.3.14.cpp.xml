<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_948_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">GetPercentage<pos:position pos:line="2" pos:column="14"/></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><name pos:line="2" pos:column="15">void<pos:position pos:line="2" pos:column="19"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="20"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">p<pos:position pos:line="4" pos:column="10"/></name></decl>;<pos:position pos:line="4" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">token<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><call><name pos:line="5" pos:column="19">strtok<pos:position pos:line="5" pos:column="25"/></name><argument_list pos:line="5" pos:column="25">(<argument><expr><name pos:line="5" pos:column="26">NULL<pos:position pos:line="5" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="32">w_space<pos:position pos:line="5" pos:column="39"/></name></expr></argument>)<pos:position pos:line="5" pos:column="40"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="41"/></decl_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><operator pos:line="7" pos:column="9">!<pos:position pos:line="7" pos:column="10"/></operator><name pos:line="7" pos:column="10">token<pos:position pos:line="7" pos:column="15"/></name></expr>)<pos:position pos:line="7" pos:column="16"/></condition><then pos:line="7" pos:column="16"> <block pos:line="7" pos:column="17">{
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">debugs<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><literal type="number" pos:line="8" pos:column="16">0<pos:position pos:line="8" pos:column="17"/></literal></expr></argument>, <argument><expr><call><name pos:line="8" pos:column="19">DBG_PARSE_NOTE<pos:position pos:line="8" pos:column="33"/></name><argument_list pos:line="8" pos:column="33">(<argument><expr><name pos:line="8" pos:column="34">DBG_IMPORTANT<pos:position pos:line="8" pos:column="47"/></name></expr></argument>)<pos:position pos:line="8" pos:column="48"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="50">"ERROR: A percentage value is missing."<pos:position pos:line="8" pos:column="89"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="91"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">self_destruct<pos:position pos:line="9" pos:column="22"/></name><argument_list pos:line="9" pos:column="22">()<pos:position pos:line="9" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="12" pos:column="5">//if there is a % in the end of the digits, we remove it and go on.</comment>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">char<pos:position pos:line="13" pos:column="9"/></name><modifier pos:line="13" pos:column="9">*<pos:position pos:line="13" pos:column="10"/></modifier></type> <name pos:line="13" pos:column="11">end<pos:position pos:line="13" pos:column="14"/></name> <init pos:line="13" pos:column="15">= <expr><operator pos:line="13" pos:column="17">&amp;<pos:position pos:line="13" pos:column="22"/></operator><name><name pos:line="13" pos:column="18">token<pos:position pos:line="13" pos:column="23"/></name><index pos:line="13" pos:column="23">[<expr><call><name pos:line="13" pos:column="24">strlen<pos:position pos:line="13" pos:column="30"/></name><argument_list pos:line="13" pos:column="30">(<argument><expr><name pos:line="13" pos:column="31">token<pos:position pos:line="13" pos:column="36"/></name></expr></argument>)<pos:position pos:line="13" pos:column="37"/></argument_list></call><operator pos:line="13" pos:column="37">-<pos:position pos:line="13" pos:column="38"/></operator><literal type="number" pos:line="13" pos:column="38">1<pos:position pos:line="13" pos:column="39"/></literal></expr>]<pos:position pos:line="13" pos:column="40"/></index></name></expr></init></decl>;<pos:position pos:line="13" pos:column="41"/></decl_stmt>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><operator pos:line="14" pos:column="9">*<pos:position pos:line="14" pos:column="10"/></operator><name pos:line="14" pos:column="10">end<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">==<pos:position pos:line="14" pos:column="16"/></operator> <literal type="char" pos:line="14" pos:column="17">'%'<pos:position pos:line="14" pos:column="20"/></literal></expr>)<pos:position pos:line="14" pos:column="21"/></condition><then pos:line="14" pos:column="21"> <block pos:line="14" pos:column="22">{
        <expr_stmt><expr><operator pos:line="15" pos:column="9">*<pos:position pos:line="15" pos:column="10"/></operator><name pos:line="15" pos:column="10">end<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">=<pos:position pos:line="15" pos:column="15"/></operator> <literal type="char" pos:line="15" pos:column="16">'\0'<pos:position pos:line="15" pos:column="20"/></literal></expr>;<pos:position pos:line="15" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="18" pos:column="5">p<pos:position pos:line="18" pos:column="6"/></name> <operator pos:line="18" pos:column="7">=<pos:position pos:line="18" pos:column="8"/></operator> <call><name pos:line="18" pos:column="9">xatoi<pos:position pos:line="18" pos:column="14"/></name><argument_list pos:line="18" pos:column="14">(<argument><expr><name pos:line="18" pos:column="15">token<pos:position pos:line="18" pos:column="20"/></name></expr></argument>)<pos:position pos:line="18" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="22"/></expr_stmt>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name><name pos:line="20" pos:column="9">p<pos:position pos:line="20" pos:column="10"/></name> <argument_list type="generic" pos:line="20" pos:column="11">&lt; <argument><expr><literal type="number" pos:line="20" pos:column="13">0<pos:position pos:line="20" pos:column="14"/></literal> <operator pos:line="20" pos:column="15">||<pos:position pos:line="20" pos:column="17"/></operator> <name pos:line="20" pos:column="18">p<pos:position pos:line="20" pos:column="19"/></name></expr></argument> &gt;<pos:position pos:line="20" pos:column="24"/></argument_list></name> <literal type="number" pos:line="20" pos:column="22">100<pos:position pos:line="20" pos:column="25"/></literal></expr>)<pos:position pos:line="20" pos:column="26"/></condition><then pos:line="20" pos:column="26"> <block pos:line="20" pos:column="27">{
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">debugs<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><literal type="number" pos:line="21" pos:column="16">0<pos:position pos:line="21" pos:column="17"/></literal></expr></argument>, <argument><expr><call><name pos:line="21" pos:column="19">DBG_PARSE_NOTE<pos:position pos:line="21" pos:column="33"/></name><argument_list pos:line="21" pos:column="33">(<argument><expr><name pos:line="21" pos:column="34">DBG_IMPORTANT<pos:position pos:line="21" pos:column="47"/></name></expr></argument>)<pos:position pos:line="21" pos:column="48"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="50">"ERROR: The value '"<pos:position pos:line="21" pos:column="70"/></literal> <operator pos:line="21" pos:column="71">&lt;&lt;<pos:position pos:line="21" pos:column="79"/></operator> <name pos:line="21" pos:column="74">token<pos:position pos:line="21" pos:column="79"/></name> <operator pos:line="21" pos:column="80">&lt;&lt;<pos:position pos:line="21" pos:column="88"/></operator> <literal type="string" pos:line="21" pos:column="83">"' is out of range. A percentage should be within [0, 100]."<pos:position pos:line="21" pos:column="143"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="144"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="145"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="22" pos:column="9">self_destruct<pos:position pos:line="22" pos:column="22"/></name><argument_list pos:line="22" pos:column="22">()<pos:position pos:line="22" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>

    <return pos:line="25" pos:column="5">return <expr><name pos:line="25" pos:column="12">p<pos:position pos:line="25" pos:column="13"/></name></expr>;<pos:position pos:line="25" pos:column="14"/></return>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
