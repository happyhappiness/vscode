<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_function_1390.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Rock<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">Rebuild<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">addSlotToEntry<pos:position pos:line="2" pos:column="30"/></name></name><parameter_list pos:line="2" pos:column="30">(<parameter><decl><type><specifier pos:line="2" pos:column="31">const<pos:position pos:line="2" pos:column="36"/></specifier> <name pos:line="2" pos:column="37">sfileno<pos:position pos:line="2" pos:column="44"/></name></type> <name pos:line="2" pos:column="45">fileno<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="53">const<pos:position pos:line="2" pos:column="58"/></specifier> <name pos:line="2" pos:column="59">SlotId<pos:position pos:line="2" pos:column="65"/></name></type> <name pos:line="2" pos:column="66">slotId<pos:position pos:line="2" pos:column="72"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="74">const<pos:position pos:line="2" pos:column="79"/></specifier> <name pos:line="2" pos:column="80">DbCellHeader<pos:position pos:line="2" pos:column="92"/></name> <modifier pos:line="2" pos:column="93">&amp;<pos:position pos:line="2" pos:column="98"/></modifier></type><name pos:line="2" pos:column="94">header<pos:position pos:line="2" pos:column="100"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="101"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">LoadingEntry<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">le<pos:position pos:line="4" pos:column="20"/></name> <init pos:line="4" pos:column="21">= <expr><call><name pos:line="4" pos:column="23">loadingEntry<pos:position pos:line="4" pos:column="35"/></name><argument_list pos:line="4" pos:column="35">(<argument><expr><name pos:line="4" pos:column="36">fileno<pos:position pos:line="4" pos:column="42"/></name></expr></argument>)<pos:position pos:line="4" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="44"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="5" pos:column="5">Ipc<pos:position pos:line="5" pos:column="8"/></name><operator pos:line="5" pos:column="8">::<pos:position pos:line="5" pos:column="10"/></operator><name pos:line="5" pos:column="10">StoreMapAnchor<pos:position pos:line="5" pos:column="24"/></name></name> <modifier pos:line="5" pos:column="25">&amp;<pos:position pos:line="5" pos:column="30"/></modifier></type><name pos:line="5" pos:column="26">anchor<pos:position pos:line="5" pos:column="32"/></name> <init pos:line="5" pos:column="33">= <expr><call><name><name pos:line="5" pos:column="35">sd<pos:position pos:line="5" pos:column="37"/></name><operator pos:line="5" pos:column="37">-&gt;<pos:position pos:line="5" pos:column="42"/></operator><name pos:line="5" pos:column="39">map<pos:position pos:line="5" pos:column="42"/></name><operator pos:line="5" pos:column="42">-&gt;<pos:position pos:line="5" pos:column="47"/></operator><name pos:line="5" pos:column="44">writeableEntry<pos:position pos:line="5" pos:column="58"/></name></name><argument_list pos:line="5" pos:column="58">(<argument><expr><name pos:line="5" pos:column="59">fileno<pos:position pos:line="5" pos:column="65"/></name></expr></argument>)<pos:position pos:line="5" pos:column="66"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="67"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">debugs<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><literal type="number" pos:line="7" pos:column="12">47<pos:position pos:line="7" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="7" pos:column="15">9<pos:position pos:line="7" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="18">"adding "<pos:position pos:line="7" pos:column="27"/></literal> <operator pos:line="7" pos:column="28">&lt;&lt;<pos:position pos:line="7" pos:column="36"/></operator> <name pos:line="7" pos:column="31">slotId<pos:position pos:line="7" pos:column="37"/></name> <operator pos:line="7" pos:column="38">&lt;&lt;<pos:position pos:line="7" pos:column="46"/></operator> <literal type="string" pos:line="7" pos:column="41">" to entry "<pos:position pos:line="7" pos:column="53"/></literal> <operator pos:line="7" pos:column="54">&lt;&lt;<pos:position pos:line="7" pos:column="62"/></operator> <name pos:line="7" pos:column="57">fileno<pos:position pos:line="7" pos:column="63"/></name></expr></argument>)<pos:position pos:line="7" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="65"/></expr_stmt>
    <comment type="line" pos:line="8" pos:column="5">// we do not need to preserve the order</comment>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><call><name><name pos:line="9" pos:column="9">le<pos:position pos:line="9" pos:column="11"/></name><operator pos:line="9" pos:column="11">.<pos:position pos:line="9" pos:column="12"/></operator><name pos:line="9" pos:column="12">anchored<pos:position pos:line="9" pos:column="20"/></name></name><argument_list pos:line="9" pos:column="20">()<pos:position pos:line="9" pos:column="22"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="23"/></condition><then pos:line="9" pos:column="23"> <block pos:line="9" pos:column="24">{
        <decl_stmt><decl><type><name pos:line="10" pos:column="9">LoadingSlot<pos:position pos:line="10" pos:column="20"/></name></type> <name pos:line="10" pos:column="21">inode<pos:position pos:line="10" pos:column="26"/></name> <init pos:line="10" pos:column="27">= <expr><call><name pos:line="10" pos:column="29">loadingSlot<pos:position pos:line="10" pos:column="40"/></name><argument_list pos:line="10" pos:column="40">(<argument><expr><name><name pos:line="10" pos:column="41">anchor<pos:position pos:line="10" pos:column="47"/></name><operator pos:line="10" pos:column="47">.<pos:position pos:line="10" pos:column="48"/></operator><name pos:line="10" pos:column="48">start<pos:position pos:line="10" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="55"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">chainSlots<pos:position pos:line="11" pos:column="19"/></name><argument_list pos:line="11" pos:column="19">(<argument><expr><name><name pos:line="11" pos:column="20">inode<pos:position pos:line="11" pos:column="25"/></name><operator pos:line="11" pos:column="25">.<pos:position pos:line="11" pos:column="26"/></operator><name pos:line="11" pos:column="26">more<pos:position pos:line="11" pos:column="30"/></name></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="32">slotId<pos:position pos:line="11" pos:column="38"/></name></expr></argument>)<pos:position pos:line="11" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="40"/></expr_stmt>
    }<pos:position pos:line="12" pos:column="6"/></block></then> <else pos:line="12" pos:column="7">else <block pos:line="12" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">chainSlots<pos:position pos:line="13" pos:column="19"/></name><argument_list pos:line="13" pos:column="19">(<argument><expr><name><name pos:line="13" pos:column="20">anchor<pos:position pos:line="13" pos:column="26"/></name><operator pos:line="13" pos:column="26">.<pos:position pos:line="13" pos:column="27"/></operator><name pos:line="13" pos:column="27">start<pos:position pos:line="13" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="34">slotId<pos:position pos:line="13" pos:column="40"/></name></expr></argument>)<pos:position pos:line="13" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></else></if>

    <expr_stmt><expr><name><name pos:line="16" pos:column="5">le<pos:position pos:line="16" pos:column="7"/></name><operator pos:line="16" pos:column="7">.<pos:position pos:line="16" pos:column="8"/></operator><name pos:line="16" pos:column="8">size<pos:position pos:line="16" pos:column="12"/></name></name> <operator pos:line="16" pos:column="13">+=<pos:position pos:line="16" pos:column="15"/></operator> <name><name pos:line="16" pos:column="16">header<pos:position pos:line="16" pos:column="22"/></name><operator pos:line="16" pos:column="22">.<pos:position pos:line="16" pos:column="23"/></operator><name pos:line="16" pos:column="23">payloadSize<pos:position pos:line="16" pos:column="34"/></name></name></expr>;<pos:position pos:line="16" pos:column="35"/></expr_stmt> <comment type="line" pos:line="16" pos:column="36">// must precede freeBadEntry() calls</comment>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name><name pos:line="18" pos:column="9">header<pos:position pos:line="18" pos:column="15"/></name><operator pos:line="18" pos:column="15">.<pos:position pos:line="18" pos:column="16"/></operator><name pos:line="18" pos:column="16">firstSlot<pos:position pos:line="18" pos:column="25"/></name></name> <operator pos:line="18" pos:column="26">==<pos:position pos:line="18" pos:column="28"/></operator> <name pos:line="18" pos:column="29">slotId<pos:position pos:line="18" pos:column="35"/></name></expr>)<pos:position pos:line="18" pos:column="36"/></condition><then pos:line="18" pos:column="36"> <block pos:line="18" pos:column="37">{
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">debugs<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><literal type="number" pos:line="19" pos:column="16">47<pos:position pos:line="19" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="19" pos:column="19">5<pos:position pos:line="19" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="22">"added inode"<pos:position pos:line="19" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="37"/></expr_stmt>

        <if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><call><name><name pos:line="21" pos:column="13">le<pos:position pos:line="21" pos:column="15"/></name><operator pos:line="21" pos:column="15">.<pos:position pos:line="21" pos:column="16"/></operator><name pos:line="21" pos:column="16">anchored<pos:position pos:line="21" pos:column="24"/></name></name><argument_list pos:line="21" pos:column="24">()<pos:position pos:line="21" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="27"/></condition><then pos:line="21" pos:column="27"> <block pos:line="21" pos:column="28">{ <comment type="line" pos:line="21" pos:column="30">// we have already added another inode slot</comment>
            <expr_stmt><expr><call><name pos:line="22" pos:column="13">freeBadEntry<pos:position pos:line="22" pos:column="25"/></name><argument_list pos:line="22" pos:column="25">(<argument><expr><name pos:line="22" pos:column="26">fileno<pos:position pos:line="22" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="34">"inode conflict"<pos:position pos:line="22" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="52"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="23" pos:column="13">++<pos:position pos:line="23" pos:column="15"/></operator><name><name pos:line="23" pos:column="15">counts<pos:position pos:line="23" pos:column="21"/></name><operator pos:line="23" pos:column="21">.<pos:position pos:line="23" pos:column="22"/></operator><name pos:line="23" pos:column="22">clashcount<pos:position pos:line="23" pos:column="32"/></name></name></expr>;<pos:position pos:line="23" pos:column="33"/></expr_stmt>
            <return pos:line="24" pos:column="13">return;<pos:position pos:line="24" pos:column="20"/></return>
        }<pos:position pos:line="25" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name><name pos:line="27" pos:column="9">le<pos:position pos:line="27" pos:column="11"/></name><operator pos:line="27" pos:column="11">.<pos:position pos:line="27" pos:column="12"/></operator><name pos:line="27" pos:column="12">anchored<pos:position pos:line="27" pos:column="20"/></name></name><argument_list pos:line="27" pos:column="20">(<argument><expr><literal type="boolean" pos:line="27" pos:column="21">true<pos:position pos:line="27" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="27"/></expr_stmt>

        <if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><operator pos:line="29" pos:column="13">!<pos:position pos:line="29" pos:column="14"/></operator><call><name pos:line="29" pos:column="14">importEntry<pos:position pos:line="29" pos:column="25"/></name><argument_list pos:line="29" pos:column="25">(<argument><expr><name pos:line="29" pos:column="26">anchor<pos:position pos:line="29" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="34">fileno<pos:position pos:line="29" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="42">header<pos:position pos:line="29" pos:column="48"/></name></expr></argument>)<pos:position pos:line="29" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="50"/></condition><then pos:line="29" pos:column="50"> <block pos:line="29" pos:column="51">{
            <expr_stmt><expr><call><name pos:line="30" pos:column="13">freeBadEntry<pos:position pos:line="30" pos:column="25"/></name><argument_list pos:line="30" pos:column="25">(<argument><expr><name pos:line="30" pos:column="26">fileno<pos:position pos:line="30" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="34">"corrupted metainfo"<pos:position pos:line="30" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="56"/></expr_stmt>
            <return pos:line="31" pos:column="13">return;<pos:position pos:line="31" pos:column="20"/></return>
        }<pos:position pos:line="32" pos:column="10"/></block></then></if>

        <comment type="line" pos:line="34" pos:column="9">// set total entry size and/or check it for consistency</comment>
        <if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<decl><type><specifier pos:line="35" pos:column="13">const<pos:position pos:line="35" pos:column="18"/></specifier> <name pos:line="35" pos:column="19">uint64_t<pos:position pos:line="35" pos:column="27"/></name></type> <name pos:line="35" pos:column="28">totalSize<pos:position pos:line="35" pos:column="37"/></name> <init pos:line="35" pos:column="38">= <expr><name><name pos:line="35" pos:column="40">header<pos:position pos:line="35" pos:column="46"/></name><operator pos:line="35" pos:column="46">.<pos:position pos:line="35" pos:column="47"/></operator><name pos:line="35" pos:column="47">entrySize<pos:position pos:line="35" pos:column="56"/></name></name></expr></init></decl>)<pos:position pos:line="35" pos:column="57"/></condition><then pos:line="35" pos:column="57"> <block pos:line="35" pos:column="58">{
            <expr_stmt><expr><call><name pos:line="36" pos:column="13">assert<pos:position pos:line="36" pos:column="19"/></name><argument_list pos:line="36" pos:column="19">(<argument><expr><name pos:line="36" pos:column="20">totalSize<pos:position pos:line="36" pos:column="29"/></name> <operator pos:line="36" pos:column="30">!=<pos:position pos:line="36" pos:column="32"/></operator> <cast type="static" pos:line="36" pos:column="33">static_cast<argument_list type="generic" pos:line="36" pos:column="44">&lt;<argument><expr><name pos:line="36" pos:column="45">uint64_t<pos:position pos:line="36" pos:column="53"/></name></expr></argument>&gt;<pos:position pos:line="36" pos:column="57"/></argument_list><argument_list pos:line="36" pos:column="54">(<argument><expr><operator pos:line="36" pos:column="55">-<pos:position pos:line="36" pos:column="56"/></operator><literal type="number" pos:line="36" pos:column="56">1<pos:position pos:line="36" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="58"/></argument_list></cast></expr></argument>)<pos:position pos:line="36" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="60"/></expr_stmt>
            <if pos:line="37" pos:column="13">if <condition pos:line="37" pos:column="16">(<expr><operator pos:line="37" pos:column="17">!<pos:position pos:line="37" pos:column="18"/></operator><name><name pos:line="37" pos:column="18">anchor<pos:position pos:line="37" pos:column="24"/></name><operator pos:line="37" pos:column="24">.<pos:position pos:line="37" pos:column="25"/></operator><name pos:line="37" pos:column="25">basics<pos:position pos:line="37" pos:column="31"/></name><operator pos:line="37" pos:column="31">.<pos:position pos:line="37" pos:column="32"/></operator><name pos:line="37" pos:column="32">swap_file_sz<pos:position pos:line="37" pos:column="44"/></name></name></expr>)<pos:position pos:line="37" pos:column="45"/></condition><then pos:line="37" pos:column="45"> <block pos:line="37" pos:column="46">{
                <expr_stmt><expr><name><name pos:line="38" pos:column="17">anchor<pos:position pos:line="38" pos:column="23"/></name><operator pos:line="38" pos:column="23">.<pos:position pos:line="38" pos:column="24"/></operator><name pos:line="38" pos:column="24">basics<pos:position pos:line="38" pos:column="30"/></name><operator pos:line="38" pos:column="30">.<pos:position pos:line="38" pos:column="31"/></operator><name pos:line="38" pos:column="31">swap_file_sz<pos:position pos:line="38" pos:column="43"/></name></name> <operator pos:line="38" pos:column="44">=<pos:position pos:line="38" pos:column="45"/></operator> <name pos:line="38" pos:column="46">totalSize<pos:position pos:line="38" pos:column="55"/></name></expr>;<pos:position pos:line="38" pos:column="56"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="39" pos:column="17">assert<pos:position pos:line="39" pos:column="23"/></name><argument_list pos:line="39" pos:column="23">(<argument><expr><name><name pos:line="39" pos:column="24">anchor<pos:position pos:line="39" pos:column="30"/></name><operator pos:line="39" pos:column="30">.<pos:position pos:line="39" pos:column="31"/></operator><name pos:line="39" pos:column="31">basics<pos:position pos:line="39" pos:column="37"/></name><operator pos:line="39" pos:column="37">.<pos:position pos:line="39" pos:column="38"/></operator><name pos:line="39" pos:column="38">swap_file_sz<pos:position pos:line="39" pos:column="50"/></name></name> <operator pos:line="39" pos:column="51">!=<pos:position pos:line="39" pos:column="53"/></operator> <cast type="static" pos:line="39" pos:column="54">static_cast<argument_list type="generic" pos:line="39" pos:column="65">&lt;<argument><expr><name pos:line="39" pos:column="66">uint64_t<pos:position pos:line="39" pos:column="74"/></name></expr></argument>&gt;<pos:position pos:line="39" pos:column="78"/></argument_list><argument_list pos:line="39" pos:column="75">(<argument><expr><operator pos:line="39" pos:column="76">-<pos:position pos:line="39" pos:column="77"/></operator><literal type="number" pos:line="39" pos:column="77">1<pos:position pos:line="39" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="79"/></argument_list></cast></expr></argument>)<pos:position pos:line="39" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="81"/></expr_stmt>
            }<pos:position pos:line="40" pos:column="14"/></block></then> <elseif pos:line="40" pos:column="15">else <if pos:line="40" pos:column="20">if <condition pos:line="40" pos:column="23">(<expr><name pos:line="40" pos:column="24">totalSize<pos:position pos:line="40" pos:column="33"/></name> <operator pos:line="40" pos:column="34">!=<pos:position pos:line="40" pos:column="36"/></operator> <name><name pos:line="40" pos:column="37">anchor<pos:position pos:line="40" pos:column="43"/></name><operator pos:line="40" pos:column="43">.<pos:position pos:line="40" pos:column="44"/></operator><name pos:line="40" pos:column="44">basics<pos:position pos:line="40" pos:column="50"/></name><operator pos:line="40" pos:column="50">.<pos:position pos:line="40" pos:column="51"/></operator><name pos:line="40" pos:column="51">swap_file_sz<pos:position pos:line="40" pos:column="63"/></name></name></expr>)<pos:position pos:line="40" pos:column="64"/></condition><then pos:line="40" pos:column="64"> <block pos:line="40" pos:column="65">{
                <expr_stmt><expr><call><name pos:line="41" pos:column="17">freeBadEntry<pos:position pos:line="41" pos:column="29"/></name><argument_list pos:line="41" pos:column="29">(<argument><expr><name pos:line="41" pos:column="30">fileno<pos:position pos:line="41" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="38">"size mismatch"<pos:position pos:line="41" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="55"/></expr_stmt>
                <return pos:line="42" pos:column="17">return;<pos:position pos:line="42" pos:column="24"/></return>
            }<pos:position pos:line="43" pos:column="14"/></block></then></if></elseif></if>
        }<pos:position pos:line="44" pos:column="10"/></block></then></if>
    }<pos:position pos:line="45" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><specifier pos:line="47" pos:column="5">const<pos:position pos:line="47" pos:column="10"/></specifier> <name pos:line="47" pos:column="11">uint64_t<pos:position pos:line="47" pos:column="19"/></name></type> <name pos:line="47" pos:column="20">totalSize<pos:position pos:line="47" pos:column="29"/></name> <init pos:line="47" pos:column="30">= <expr><name><name pos:line="47" pos:column="32">anchor<pos:position pos:line="47" pos:column="38"/></name><operator pos:line="47" pos:column="38">.<pos:position pos:line="47" pos:column="39"/></operator><name pos:line="47" pos:column="39">basics<pos:position pos:line="47" pos:column="45"/></name><operator pos:line="47" pos:column="45">.<pos:position pos:line="47" pos:column="46"/></operator><name pos:line="47" pos:column="46">swap_file_sz<pos:position pos:line="47" pos:column="58"/></name></name></expr></init></decl>;<pos:position pos:line="47" pos:column="59"/></decl_stmt> <comment type="line" pos:line="47" pos:column="60">// may be 0/unknown</comment>

    <if pos:line="49" pos:column="5">if <condition pos:line="49" pos:column="8">(<expr><name pos:line="49" pos:column="9">totalSize<pos:position pos:line="49" pos:column="18"/></name> <operator pos:line="49" pos:column="19">&gt;<pos:position pos:line="49" pos:column="23"/></operator> <literal type="number" pos:line="49" pos:column="21">0<pos:position pos:line="49" pos:column="22"/></literal> <operator pos:line="49" pos:column="23">&amp;&amp;<pos:position pos:line="49" pos:column="33"/></operator> <name><name pos:line="49" pos:column="26">le<pos:position pos:line="49" pos:column="28"/></name><operator pos:line="49" pos:column="28">.<pos:position pos:line="49" pos:column="29"/></operator><name pos:line="49" pos:column="29">size<pos:position pos:line="49" pos:column="33"/></name></name> <operator pos:line="49" pos:column="34">&gt;<pos:position pos:line="49" pos:column="38"/></operator> <name pos:line="49" pos:column="36">totalSize<pos:position pos:line="49" pos:column="45"/></name></expr>)<pos:position pos:line="49" pos:column="46"/></condition><then pos:line="49" pos:column="46"> <block pos:line="49" pos:column="47">{ <comment type="line" pos:line="49" pos:column="49">// overflow</comment>
        <expr_stmt><expr><call><name pos:line="50" pos:column="9">debugs<pos:position pos:line="50" pos:column="15"/></name><argument_list pos:line="50" pos:column="15">(<argument><expr><literal type="number" pos:line="50" pos:column="16">47<pos:position pos:line="50" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="50" pos:column="20">8<pos:position pos:line="50" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="23">"overflow: "<pos:position pos:line="50" pos:column="35"/></literal> <operator pos:line="50" pos:column="36">&lt;&lt;<pos:position pos:line="50" pos:column="44"/></operator> <name><name pos:line="50" pos:column="39">le<pos:position pos:line="50" pos:column="41"/></name><operator pos:line="50" pos:column="41">.<pos:position pos:line="50" pos:column="42"/></operator><name pos:line="50" pos:column="42">size<pos:position pos:line="50" pos:column="46"/></name></name> <operator pos:line="50" pos:column="47">&lt;&lt;<pos:position pos:line="50" pos:column="55"/></operator> <literal type="string" pos:line="50" pos:column="50">" &gt; "<pos:position pos:line="50" pos:column="58"/></literal> <operator pos:line="50" pos:column="56">&lt;&lt;<pos:position pos:line="50" pos:column="64"/></operator> <name pos:line="50" pos:column="59">totalSize<pos:position pos:line="50" pos:column="68"/></name></expr></argument>)<pos:position pos:line="50" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="70"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="51" pos:column="9">freeBadEntry<pos:position pos:line="51" pos:column="21"/></name><argument_list pos:line="51" pos:column="21">(<argument><expr><name pos:line="51" pos:column="22">fileno<pos:position pos:line="51" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="30">"overflowing"<pos:position pos:line="51" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="45"/></expr_stmt>
        <return pos:line="52" pos:column="9">return;<pos:position pos:line="52" pos:column="16"/></return>
    }<pos:position pos:line="53" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="55" pos:column="5">mapSlot<pos:position pos:line="55" pos:column="12"/></name><argument_list pos:line="55" pos:column="12">(<argument><expr><name pos:line="55" pos:column="13">slotId<pos:position pos:line="55" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="21">header<pos:position pos:line="55" pos:column="27"/></name></expr></argument>)<pos:position pos:line="55" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="29"/></expr_stmt>
    <if pos:line="56" pos:column="5">if <condition pos:line="56" pos:column="8">(<expr><name pos:line="56" pos:column="9">totalSize<pos:position pos:line="56" pos:column="18"/></name> <operator pos:line="56" pos:column="19">&gt;<pos:position pos:line="56" pos:column="23"/></operator> <literal type="number" pos:line="56" pos:column="21">0<pos:position pos:line="56" pos:column="22"/></literal> <operator pos:line="56" pos:column="23">&amp;&amp;<pos:position pos:line="56" pos:column="33"/></operator> <name><name pos:line="56" pos:column="26">le<pos:position pos:line="56" pos:column="28"/></name><operator pos:line="56" pos:column="28">.<pos:position pos:line="56" pos:column="29"/></operator><name pos:line="56" pos:column="29">size<pos:position pos:line="56" pos:column="33"/></name></name> <operator pos:line="56" pos:column="34">==<pos:position pos:line="56" pos:column="36"/></operator> <name pos:line="56" pos:column="37">totalSize<pos:position pos:line="56" pos:column="46"/></name></expr>)<pos:position pos:line="56" pos:column="47"/></condition><then pos:line="56" pos:column="47">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="57" pos:column="9">finalizeOrFree<pos:position pos:line="57" pos:column="23"/></name><argument_list pos:line="57" pos:column="23">(<argument><expr><name pos:line="57" pos:column="24">fileno<pos:position pos:line="57" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="32">le<pos:position pos:line="57" pos:column="34"/></name></expr></argument>)<pos:position pos:line="57" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="36"/></expr_stmt></block></then></if> <comment type="line" pos:line="57" pos:column="37">// entry is probably fully loaded now</comment>
}<pos:position pos:line="58" pos:column="2"/></block></function></unit>
