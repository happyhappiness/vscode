<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1198_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">OnTerminate<pos:position pos:line="2" pos:column="12"/></name><parameter_list pos:line="2" pos:column="12">()<pos:position pos:line="2" pos:column="14"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// ignore recursive calls to avoid termination loops</comment>
    <decl_stmt><decl><specifier pos:line="5" pos:column="5">static<pos:position pos:line="5" pos:column="11"/></specifier> <type><name pos:line="5" pos:column="12">bool<pos:position pos:line="5" pos:column="16"/></name></type> <name pos:line="5" pos:column="17">terminating<pos:position pos:line="5" pos:column="28"/></name> <init pos:line="5" pos:column="29">= <expr><literal type="boolean" pos:line="5" pos:column="31">false<pos:position pos:line="5" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="37"/></decl_stmt>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">terminating<pos:position pos:line="6" pos:column="20"/></name></expr>)<pos:position pos:line="6" pos:column="21"/></condition><then pos:line="6" pos:column="21">
        <block type="pseudo"><return pos:line="7" pos:column="9">return;<pos:position pos:line="7" pos:column="16"/></return></block></then></if>
    <expr_stmt><expr><name pos:line="8" pos:column="5">terminating<pos:position pos:line="8" pos:column="16"/></name> <operator pos:line="8" pos:column="17">=<pos:position pos:line="8" pos:column="18"/></operator> <literal type="boolean" pos:line="8" pos:column="19">true<pos:position pos:line="8" pos:column="23"/></literal></expr>;<pos:position pos:line="8" pos:column="24"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="10" pos:column="5">debugs<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><literal type="number" pos:line="10" pos:column="12">1<pos:position pos:line="10" pos:column="13"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="15">DBG_CRITICAL<pos:position pos:line="10" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="29">"FATAL: Dying from an exception handling failure; exception: "<pos:position pos:line="10" pos:column="91"/></literal> <operator pos:line="10" pos:column="92">&lt;&lt;<pos:position pos:line="10" pos:column="100"/></operator> <name pos:line="10" pos:column="95">CurrentException<pos:position pos:line="10" pos:column="111"/></name></expr></argument>)<pos:position pos:line="10" pos:column="112"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="113"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">abort<pos:position pos:line="11" pos:column="10"/></name><argument_list pos:line="11" pos:column="10">()<pos:position pos:line="11" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="13"/></expr_stmt>
}<pos:position pos:line="12" pos:column="2"/></block></function></unit>
