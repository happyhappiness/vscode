<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6717_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ESIContext<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">parse<pos:position pos:line="2" pos:column="18"/></name></name><parameter_list pos:line="2" pos:column="18">()<pos:position pos:line="2" pos:column="20"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">!<pos:position pos:line="4" pos:column="10"/></operator><name><name pos:line="4" pos:column="10">parserState<pos:position pos:line="4" pos:column="21"/></name><operator pos:line="4" pos:column="21">.<pos:position pos:line="4" pos:column="22"/></operator><name pos:line="4" pos:column="22">stackdepth<pos:position pos:line="4" pos:column="32"/></name></name></expr>)<pos:position pos:line="4" pos:column="33"/></condition><then pos:line="4" pos:column="33"> <block pos:line="4" pos:column="34">{
        <expr_stmt><expr><call><name pos:line="5" pos:column="9">debugs<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">(<argument><expr><literal type="number" pos:line="5" pos:column="16">86<pos:position pos:line="5" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="20">5<pos:position pos:line="5" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="23">"empty parser stack, inserting the top level node"<pos:position pos:line="5" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="75"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="6" pos:column="9">assert<pos:position pos:line="6" pos:column="15"/></name> <argument_list pos:line="6" pos:column="16">(<argument><expr><call><name><name pos:line="6" pos:column="17">tree<pos:position pos:line="6" pos:column="21"/></name><operator pos:line="6" pos:column="21">.<pos:position pos:line="6" pos:column="22"/></operator><name pos:line="6" pos:column="22">getRaw<pos:position pos:line="6" pos:column="28"/></name></name><argument_list pos:line="6" pos:column="28">()<pos:position pos:line="6" pos:column="30"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="7" pos:column="9">parserState<pos:position pos:line="7" pos:column="20"/></name><operator pos:line="7" pos:column="20">.<pos:position pos:line="7" pos:column="21"/></operator><name pos:line="7" pos:column="21">stack<pos:position pos:line="7" pos:column="26"/></name><index pos:line="7" pos:column="26">[<expr><name><name pos:line="7" pos:column="27">parserState<pos:position pos:line="7" pos:column="38"/></name><operator pos:line="7" pos:column="38">.<pos:position pos:line="7" pos:column="39"/></operator><name pos:line="7" pos:column="39">stackdepth<pos:position pos:line="7" pos:column="49"/></name></name></expr>]<pos:position pos:line="7" pos:column="50"/></index></name> <operator pos:line="7" pos:column="51">=<pos:position pos:line="7" pos:column="52"/></operator> <name pos:line="7" pos:column="53">tree<pos:position pos:line="7" pos:column="57"/></name></expr>;<pos:position pos:line="7" pos:column="58"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="8" pos:column="9">++<pos:position pos:line="8" pos:column="11"/></operator><name><name pos:line="8" pos:column="11">parserState<pos:position pos:line="8" pos:column="22"/></name><operator pos:line="8" pos:column="22">.<pos:position pos:line="8" pos:column="23"/></operator><name pos:line="8" pos:column="23">stackdepth<pos:position pos:line="8" pos:column="33"/></name></name></expr>;<pos:position pos:line="8" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name pos:line="11" pos:column="9">rep<pos:position pos:line="11" pos:column="12"/></name> <operator pos:line="11" pos:column="13">&amp;&amp;<pos:position pos:line="11" pos:column="23"/></operator> <operator pos:line="11" pos:column="16">!<pos:position pos:line="11" pos:column="17"/></operator><call><name><name pos:line="11" pos:column="17">parserState<pos:position pos:line="11" pos:column="28"/></name><operator pos:line="11" pos:column="28">.<pos:position pos:line="11" pos:column="29"/></operator><name pos:line="11" pos:column="29">inited<pos:position pos:line="11" pos:column="35"/></name></name><argument_list pos:line="11" pos:column="35">()<pos:position pos:line="11" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="38"/></condition><then pos:line="11" pos:column="38">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="12" pos:column="9">parserState<pos:position pos:line="12" pos:column="20"/></name><operator pos:line="12" pos:column="20">.<pos:position pos:line="12" pos:column="21"/></operator><name pos:line="12" pos:column="21">init<pos:position pos:line="12" pos:column="25"/></name></name><argument_list pos:line="12" pos:column="25">(<argument><expr><name pos:line="12" pos:column="26">this<pos:position pos:line="12" pos:column="30"/></name></expr></argument>)<pos:position pos:line="12" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="32"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="14" pos:column="5">/* we have data */</comment>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><call><name><name pos:line="15" pos:column="9">buffered<pos:position pos:line="15" pos:column="17"/></name><operator pos:line="15" pos:column="17">.<pos:position pos:line="15" pos:column="18"/></operator><name pos:line="15" pos:column="18">getRaw<pos:position pos:line="15" pos:column="24"/></name></name><argument_list pos:line="15" pos:column="24">()<pos:position pos:line="15" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="27"/></condition><then pos:line="15" pos:column="27"> <block pos:line="15" pos:column="28">{
        <expr_stmt><expr><name><name pos:line="16" pos:column="9">parserState<pos:position pos:line="16" pos:column="20"/></name><operator pos:line="16" pos:column="20">.<pos:position pos:line="16" pos:column="21"/></operator><name pos:line="16" pos:column="21">parsing<pos:position pos:line="16" pos:column="28"/></name></name> <operator pos:line="16" pos:column="29">=<pos:position pos:line="16" pos:column="30"/></operator> <literal type="number" pos:line="16" pos:column="31">1<pos:position pos:line="16" pos:column="32"/></literal></expr>;<pos:position pos:line="16" pos:column="33"/></expr_stmt>
        <comment type="block" pos:line="17" pos:column="9">/* we don't keep any data around */</comment>

        <expr_stmt><expr><call><name pos:line="19" pos:column="9">PROF_start<pos:position pos:line="19" pos:column="19"/></name><argument_list pos:line="19" pos:column="19">(<argument><expr><name pos:line="19" pos:column="20">esiParsing<pos:position pos:line="19" pos:column="30"/></name></expr></argument>)<pos:position pos:line="19" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="32"/></expr_stmt>

        <while pos:line="21" pos:column="9">while <condition pos:line="21" pos:column="15">(<expr><call><name><name pos:line="21" pos:column="16">buffered<pos:position pos:line="21" pos:column="24"/></name><operator pos:line="21" pos:column="24">.<pos:position pos:line="21" pos:column="25"/></operator><name pos:line="21" pos:column="25">getRaw<pos:position pos:line="21" pos:column="31"/></name></name><argument_list pos:line="21" pos:column="31">()<pos:position pos:line="21" pos:column="33"/></argument_list></call> <operator pos:line="21" pos:column="34">&amp;&amp;<pos:position pos:line="21" pos:column="44"/></operator> <operator pos:line="21" pos:column="37">!<pos:position pos:line="21" pos:column="38"/></operator><name><name pos:line="21" pos:column="38">flags<pos:position pos:line="21" pos:column="43"/></name><operator pos:line="21" pos:column="43">.<pos:position pos:line="21" pos:column="44"/></operator><name pos:line="21" pos:column="44">error<pos:position pos:line="21" pos:column="49"/></name></name></expr>)<pos:position pos:line="21" pos:column="50"/></condition>
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="13">parseOneBuffer<pos:position pos:line="22" pos:column="27"/></name><argument_list pos:line="22" pos:column="27">()<pos:position pos:line="22" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="30"/></expr_stmt></block></while>

        <expr_stmt><expr><call><name pos:line="24" pos:column="9">PROF_stop<pos:position pos:line="24" pos:column="18"/></name><argument_list pos:line="24" pos:column="18">(<argument><expr><name pos:line="24" pos:column="19">esiParsing<pos:position pos:line="24" pos:column="29"/></name></expr></argument>)<pos:position pos:line="24" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="31"/></expr_stmt>

        <comment type="block" pos:line="26" pos:column="9">/* Tel the read code to allocate a new buffer */</comment>
        <expr_stmt><expr><name pos:line="27" pos:column="9">incoming<pos:position pos:line="27" pos:column="17"/></name> <operator pos:line="27" pos:column="18">=<pos:position pos:line="27" pos:column="19"/></operator> <name pos:line="27" pos:column="20">NULL<pos:position pos:line="27" pos:column="24"/></name></expr>;<pos:position pos:line="27" pos:column="25"/></expr_stmt>

        <expr_stmt><expr><name><name pos:line="29" pos:column="9">parserState<pos:position pos:line="29" pos:column="20"/></name><operator pos:line="29" pos:column="20">.<pos:position pos:line="29" pos:column="21"/></operator><name pos:line="29" pos:column="21">parsing<pos:position pos:line="29" pos:column="28"/></name></name> <operator pos:line="29" pos:column="29">=<pos:position pos:line="29" pos:column="30"/></operator> <literal type="number" pos:line="29" pos:column="31">0<pos:position pos:line="29" pos:column="32"/></literal></expr>;<pos:position pos:line="29" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
