<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3198_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">Ip<pos:position pos:line="2" pos:column="3"/></name><operator pos:line="2" pos:column="3">::<pos:position pos:line="2" pos:column="5"/></operator><name pos:line="2" pos:column="5">Address<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">cidr<pos:position pos:line="2" pos:column="18"/></name></name><parameter_list pos:line="2" pos:column="18">()<pos:position pos:line="2" pos:column="20"/></parameter_list> <specifier pos:line="2" pos:column="21">const<pos:position pos:line="2" pos:column="26"/></specifier>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">uint8_t<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">shift<pos:position pos:line="4" pos:column="18"/></name></decl>,<decl><type ref="prev"/><name pos:line="4" pos:column="19">ipbyte<pos:position pos:line="4" pos:column="25"/></name></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">uint8_t<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">bit<pos:position pos:line="5" pos:column="16"/></name></decl>,<decl><type ref="prev"/><name pos:line="5" pos:column="17">caught<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">len<pos:position pos:line="6" pos:column="12"/></name> <init pos:line="6" pos:column="13">= <expr><literal type="number" pos:line="6" pos:column="15">0<pos:position pos:line="6" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="7" pos:column="5">const<pos:position pos:line="7" pos:column="10"/></specifier> <name pos:line="7" pos:column="11">uint8_t<pos:position pos:line="7" pos:column="18"/></name> <modifier pos:line="7" pos:column="19">*<pos:position pos:line="7" pos:column="20"/></modifier></type><name pos:line="7" pos:column="20">ptr<pos:position pos:line="7" pos:column="23"/></name><init pos:line="7" pos:column="23">= <expr><name><name pos:line="7" pos:column="25">mSocketAddr_<pos:position pos:line="7" pos:column="37"/></name><operator pos:line="7" pos:column="37">.<pos:position pos:line="7" pos:column="38"/></operator><name pos:line="7" pos:column="38">sin6_addr<pos:position pos:line="7" pos:column="47"/></name><operator pos:line="7" pos:column="47">.<pos:position pos:line="7" pos:column="48"/></operator><name pos:line="7" pos:column="48">s6_addr<pos:position pos:line="7" pos:column="55"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="56"/></decl_stmt>

    <comment type="block" pos:line="9" pos:column="5">/* Let's scan all the bits from Most Significant to Least */</comment>
    <comment type="block" pos:line="10" pos:column="5">/* Until we find an "0" bit. Then, we return */</comment>
    <expr_stmt><expr><name pos:line="11" pos:column="5">shift<pos:position pos:line="11" pos:column="10"/></name><operator pos:line="11" pos:column="10">=<pos:position pos:line="11" pos:column="11"/></operator><literal type="number" pos:line="11" pos:column="11">0<pos:position pos:line="11" pos:column="12"/></literal></expr>;<pos:position pos:line="11" pos:column="13"/></expr_stmt>

    <comment type="block" pos:line="13" pos:column="5">/* return IPv4 CIDR for any Mapped address */</comment>
    <comment type="block" pos:line="14" pos:column="5">/* Thus only check the mapped bit */</comment>

    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">( <expr><operator pos:line="16" pos:column="10">!<pos:position pos:line="16" pos:column="11"/></operator><call><name pos:line="16" pos:column="11">isIPv6<pos:position pos:line="16" pos:column="17"/></name><argument_list pos:line="16" pos:column="17">()<pos:position pos:line="16" pos:column="19"/></argument_list></call></expr> )<pos:position pos:line="16" pos:column="21"/></condition><then pos:line="16" pos:column="21"> <block pos:line="16" pos:column="22">{
        <expr_stmt><expr><name pos:line="17" pos:column="9">shift<pos:position pos:line="17" pos:column="14"/></name> <operator pos:line="17" pos:column="15">=<pos:position pos:line="17" pos:column="16"/></operator> <literal type="number" pos:line="17" pos:column="17">12<pos:position pos:line="17" pos:column="19"/></literal></expr>;<pos:position pos:line="17" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

    <for pos:line="20" pos:column="5">for <control pos:line="20" pos:column="9">(<init pos:line="20" pos:column="10">;<pos:position pos:line="20" pos:column="11"/></init> <condition><expr><name pos:line="20" pos:column="12">shift<pos:position pos:line="20" pos:column="17"/></name><operator pos:line="20" pos:column="17">&lt;<pos:position pos:line="20" pos:column="21"/></operator><sizeof pos:line="20" pos:column="18">sizeof<argument_list pos:line="20" pos:column="24">(<argument><expr><name><name pos:line="20" pos:column="25">mSocketAddr_<pos:position pos:line="20" pos:column="37"/></name><operator pos:line="20" pos:column="37">.<pos:position pos:line="20" pos:column="38"/></operator><name pos:line="20" pos:column="38">sin6_addr<pos:position pos:line="20" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="48"/></argument_list></sizeof></expr> ;<pos:position pos:line="20" pos:column="50"/></condition> <incr><expr><operator pos:line="20" pos:column="51">++<pos:position pos:line="20" pos:column="53"/></operator><name pos:line="20" pos:column="53">shift<pos:position pos:line="20" pos:column="58"/></name></expr></incr>)<pos:position pos:line="20" pos:column="59"/></control> <block pos:line="20" pos:column="60">{
        <expr_stmt><expr><name pos:line="21" pos:column="9">ipbyte<pos:position pos:line="21" pos:column="15"/></name><operator pos:line="21" pos:column="15">=<pos:position pos:line="21" pos:column="16"/></operator> <operator pos:line="21" pos:column="17">*<pos:position pos:line="21" pos:column="18"/></operator><operator pos:line="21" pos:column="18">(<pos:position pos:line="21" pos:column="19"/></operator><name pos:line="21" pos:column="19">ptr<pos:position pos:line="21" pos:column="22"/></name><operator pos:line="21" pos:column="22">+<pos:position pos:line="21" pos:column="23"/></operator><name pos:line="21" pos:column="23">shift<pos:position pos:line="21" pos:column="28"/></name><operator pos:line="21" pos:column="28">)<pos:position pos:line="21" pos:column="29"/></operator></expr>;<pos:position pos:line="21" pos:column="30"/></expr_stmt>

        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">ipbyte<pos:position pos:line="23" pos:column="19"/></name> <operator pos:line="23" pos:column="20">==<pos:position pos:line="23" pos:column="22"/></operator> <literal type="number" pos:line="23" pos:column="23">0xFF<pos:position pos:line="23" pos:column="27"/></literal></expr>)<pos:position pos:line="23" pos:column="28"/></condition><then pos:line="23" pos:column="28"> <block pos:line="23" pos:column="29">{
            <expr_stmt><expr><name pos:line="24" pos:column="13">len<pos:position pos:line="24" pos:column="16"/></name> <operator pos:line="24" pos:column="17">+=<pos:position pos:line="24" pos:column="19"/></operator> <literal type="number" pos:line="24" pos:column="20">8<pos:position pos:line="24" pos:column="21"/></literal></expr>;<pos:position pos:line="24" pos:column="22"/></expr_stmt>
            <continue pos:line="25" pos:column="13">continue ;<pos:position pos:line="25" pos:column="23"/></continue>  <comment type="block" pos:line="25" pos:column="25">/* A short-cut */</comment>
        }<pos:position pos:line="26" pos:column="10"/></block></then></if>

        <for pos:line="28" pos:column="9">for <control pos:line="28" pos:column="13">(<init><expr><name pos:line="28" pos:column="14">caught<pos:position pos:line="28" pos:column="20"/></name> <operator pos:line="28" pos:column="21">=<pos:position pos:line="28" pos:column="22"/></operator> <literal type="number" pos:line="28" pos:column="23">0<pos:position pos:line="28" pos:column="24"/></literal></expr> <operator pos:line="28" pos:column="25">,<pos:position pos:line="28" pos:column="26"/></operator> <expr><name pos:line="28" pos:column="27">bit<pos:position pos:line="28" pos:column="30"/></name><operator pos:line="28" pos:column="30">=<pos:position pos:line="28" pos:column="31"/></operator> <literal type="number" pos:line="28" pos:column="32">7<pos:position pos:line="28" pos:column="33"/></literal></expr> ;<pos:position pos:line="28" pos:column="35"/></init> <condition><expr><operator pos:line="28" pos:column="36">!<pos:position pos:line="28" pos:column="37"/></operator><name pos:line="28" pos:column="37">caught<pos:position pos:line="28" pos:column="43"/></name> <operator pos:line="28" pos:column="44">&amp;&amp;<pos:position pos:line="28" pos:column="54"/></operator> <operator pos:line="28" pos:column="47">(<pos:position pos:line="28" pos:column="48"/></operator><name pos:line="28" pos:column="48">bit<pos:position pos:line="28" pos:column="51"/></name> <operator pos:line="28" pos:column="52">&lt;=<pos:position pos:line="28" pos:column="57"/></operator> <literal type="number" pos:line="28" pos:column="55">7<pos:position pos:line="28" pos:column="56"/></literal><operator pos:line="28" pos:column="56">)<pos:position pos:line="28" pos:column="57"/></operator></expr>;<pos:position pos:line="28" pos:column="58"/></condition> <incr><expr><operator pos:line="28" pos:column="59">--<pos:position pos:line="28" pos:column="61"/></operator><name pos:line="28" pos:column="61">bit<pos:position pos:line="28" pos:column="64"/></name></expr></incr>)<pos:position pos:line="28" pos:column="65"/></control> <block pos:line="28" pos:column="66">{
            <expr_stmt><expr><name pos:line="29" pos:column="13">caught<pos:position pos:line="29" pos:column="19"/></name> <operator pos:line="29" pos:column="20">=<pos:position pos:line="29" pos:column="21"/></operator> <operator pos:line="29" pos:column="22">(<pos:position pos:line="29" pos:column="23"/></operator><operator pos:line="29" pos:column="23">(<pos:position pos:line="29" pos:column="24"/></operator><name pos:line="29" pos:column="24">ipbyte<pos:position pos:line="29" pos:column="30"/></name> <operator pos:line="29" pos:column="31">&amp;<pos:position pos:line="29" pos:column="36"/></operator> <literal type="number" pos:line="29" pos:column="33">0x80<pos:position pos:line="29" pos:column="37"/></literal><operator pos:line="29" pos:column="37">)<pos:position pos:line="29" pos:column="38"/></operator> <operator pos:line="29" pos:column="39">==<pos:position pos:line="29" pos:column="41"/></operator> <literal type="number" pos:line="29" pos:column="42">0x00<pos:position pos:line="29" pos:column="46"/></literal><operator pos:line="29" pos:column="46">)<pos:position pos:line="29" pos:column="47"/></operator></expr>;<pos:position pos:line="29" pos:column="48"/></expr_stmt>  <comment type="block" pos:line="29" pos:column="50">/* Found a '0' at 'bit' ? */</comment>

            <if pos:line="31" pos:column="13">if <condition pos:line="31" pos:column="16">(<expr><operator pos:line="31" pos:column="17">!<pos:position pos:line="31" pos:column="18"/></operator><name pos:line="31" pos:column="18">caught<pos:position pos:line="31" pos:column="24"/></name></expr>)<pos:position pos:line="31" pos:column="25"/></condition><then pos:line="31" pos:column="25">
                <block type="pseudo"><expr_stmt><expr><operator pos:line="32" pos:column="17">++<pos:position pos:line="32" pos:column="19"/></operator><name pos:line="32" pos:column="19">len<pos:position pos:line="32" pos:column="22"/></name></expr>;<pos:position pos:line="32" pos:column="23"/></expr_stmt></block></then></if>

            <expr_stmt><expr><name pos:line="34" pos:column="13">ipbyte<pos:position pos:line="34" pos:column="19"/></name> <operator pos:line="34" pos:column="20">&lt;&lt;=<pos:position pos:line="34" pos:column="29"/></operator> <literal type="number" pos:line="34" pos:column="24">1<pos:position pos:line="34" pos:column="25"/></literal></expr>;<pos:position pos:line="34" pos:column="26"/></expr_stmt>
        }<pos:position pos:line="35" pos:column="10"/></block></for>

        <if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><name pos:line="37" pos:column="13">caught<pos:position pos:line="37" pos:column="19"/></name></expr>)<pos:position pos:line="37" pos:column="20"/></condition><then pos:line="37" pos:column="20">
            <block type="pseudo"><break pos:line="38" pos:column="13">break;<pos:position pos:line="38" pos:column="19"/></break></block></then></if> <comment type="block" pos:line="38" pos:column="20">/* We have found the most significant "0" bit.  */</comment>
    }<pos:position pos:line="39" pos:column="6"/></block></for>

    <return pos:line="41" pos:column="5">return <expr><name pos:line="41" pos:column="12">len<pos:position pos:line="41" pos:column="15"/></name></expr>;<pos:position pos:line="41" pos:column="16"/></return>
}<pos:position pos:line="42" pos:column="2"/></block></function></unit>
