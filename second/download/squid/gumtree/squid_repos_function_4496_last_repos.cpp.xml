<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4496_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Store<pos:position pos:line="2" pos:column="6"/></name><operator pos:line="2" pos:column="6">::<pos:position pos:line="2" pos:column="8"/></operator><name pos:line="2" pos:column="8">Disk<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">objectSizeIsAcceptable<pos:position pos:line="2" pos:column="36"/></name></name><parameter_list pos:line="2" pos:column="36">(<parameter><decl><type><name pos:line="2" pos:column="37">int64_t<pos:position pos:line="2" pos:column="44"/></name></type> <name pos:line="2" pos:column="45">objsize<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="53"/></parameter_list> <specifier pos:line="2" pos:column="54">const<pos:position pos:line="2" pos:column="59"/></specifier>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// need either the expected or the already accumulated object size</comment>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><name pos:line="5" pos:column="12">objsize<pos:position pos:line="5" pos:column="19"/></name> <operator pos:line="5" pos:column="20">&gt;=<pos:position pos:line="5" pos:column="25"/></operator> <literal type="number" pos:line="5" pos:column="23">0<pos:position pos:line="5" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="26"/></expr_stmt>
    <return pos:line="6" pos:column="5">return <expr><call><name pos:line="6" pos:column="12">minObjectSize<pos:position pos:line="6" pos:column="25"/></name><argument_list pos:line="6" pos:column="25">()<pos:position pos:line="6" pos:column="27"/></argument_list></call> <operator pos:line="6" pos:column="28">&lt;=<pos:position pos:line="6" pos:column="33"/></operator> <name pos:line="6" pos:column="31">objsize<pos:position pos:line="6" pos:column="38"/></name> <operator pos:line="6" pos:column="39">&amp;&amp;<pos:position pos:line="6" pos:column="49"/></operator> <name pos:line="6" pos:column="42">objsize<pos:position pos:line="6" pos:column="49"/></name> <operator pos:line="6" pos:column="50">&lt;=<pos:position pos:line="6" pos:column="55"/></operator> <call><name pos:line="6" pos:column="53">maxObjectSize<pos:position pos:line="6" pos:column="66"/></name><argument_list pos:line="6" pos:column="66">()<pos:position pos:line="6" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="69"/></return>
}<pos:position pos:line="7" pos:column="2"/></block></function></unit>
