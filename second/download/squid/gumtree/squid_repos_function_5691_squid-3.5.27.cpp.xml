<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5691_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Comm<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">Write<pos:position pos:line="2" pos:column="12"/></name></name><parameter_list pos:line="2" pos:column="12">(<parameter><decl><type><specifier pos:line="2" pos:column="13">const<pos:position pos:line="2" pos:column="18"/></specifier> <name><name pos:line="2" pos:column="19">Comm<pos:position pos:line="2" pos:column="23"/></name><operator pos:line="2" pos:column="23">::<pos:position pos:line="2" pos:column="25"/></operator><name pos:line="2" pos:column="25">ConnectionPointer<pos:position pos:line="2" pos:column="42"/></name></name> <modifier pos:line="2" pos:column="43">&amp;<pos:position pos:line="2" pos:column="48"/></modifier></type><name pos:line="2" pos:column="44">conn<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="50">const<pos:position pos:line="2" pos:column="55"/></specifier> <name pos:line="2" pos:column="56">char<pos:position pos:line="2" pos:column="60"/></name> <modifier pos:line="2" pos:column="61">*<pos:position pos:line="2" pos:column="62"/></modifier></type><name pos:line="2" pos:column="62">buf<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="67">int<pos:position pos:line="2" pos:column="70"/></name></type> <name pos:line="2" pos:column="71">size<pos:position pos:line="2" pos:column="75"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="77">AsyncCall<pos:position pos:line="2" pos:column="86"/></name><operator pos:line="2" pos:column="86">::<pos:position pos:line="2" pos:column="88"/></operator><name pos:line="2" pos:column="88">Pointer<pos:position pos:line="2" pos:column="95"/></name></name> <modifier pos:line="2" pos:column="96">&amp;<pos:position pos:line="2" pos:column="101"/></modifier></type><name pos:line="2" pos:column="97">callback<pos:position pos:line="2" pos:column="105"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="107">FREE<pos:position pos:line="2" pos:column="111"/></name> <modifier pos:line="2" pos:column="112">*<pos:position pos:line="2" pos:column="113"/></modifier></type> <name pos:line="2" pos:column="114">free_func<pos:position pos:line="2" pos:column="123"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="124"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">5<pos:position pos:line="4" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="15">5<pos:position pos:line="4" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="18">HERE<pos:position pos:line="4" pos:column="22"/></name> <operator pos:line="4" pos:column="23">&lt;&lt;<pos:position pos:line="4" pos:column="31"/></operator> <name pos:line="4" pos:column="26">conn<pos:position pos:line="4" pos:column="30"/></name> <operator pos:line="4" pos:column="31">&lt;&lt;<pos:position pos:line="4" pos:column="39"/></operator> <literal type="string" pos:line="4" pos:column="34">": sz "<pos:position pos:line="4" pos:column="41"/></literal> <operator pos:line="4" pos:column="42">&lt;&lt;<pos:position pos:line="4" pos:column="50"/></operator> <name pos:line="4" pos:column="45">size<pos:position pos:line="4" pos:column="49"/></name> <operator pos:line="4" pos:column="50">&lt;&lt;<pos:position pos:line="4" pos:column="58"/></operator> <literal type="string" pos:line="4" pos:column="53">": asynCall "<pos:position pos:line="4" pos:column="66"/></literal> <operator pos:line="4" pos:column="67">&lt;&lt;<pos:position pos:line="4" pos:column="75"/></operator> <name pos:line="4" pos:column="70">callback<pos:position pos:line="4" pos:column="78"/></name></expr></argument>)<pos:position pos:line="4" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="80"/></expr_stmt>

    <comment type="block" pos:line="6" pos:column="5">/* Make sure we are open, not closing, and not writing */</comment>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><name><name pos:line="7" pos:column="12">fd_table<pos:position pos:line="7" pos:column="20"/></name><index pos:line="7" pos:column="20">[<expr><name><name pos:line="7" pos:column="21">conn<pos:position pos:line="7" pos:column="25"/></name><operator pos:line="7" pos:column="25">-&gt;<pos:position pos:line="7" pos:column="30"/></operator><name pos:line="7" pos:column="27">fd<pos:position pos:line="7" pos:column="29"/></name></name></expr>]<pos:position pos:line="7" pos:column="30"/></index></name><operator pos:line="7" pos:column="30">.<pos:position pos:line="7" pos:column="31"/></operator><name><name pos:line="7" pos:column="31">flags<pos:position pos:line="7" pos:column="36"/></name><operator pos:line="7" pos:column="36">.<pos:position pos:line="7" pos:column="37"/></operator><name pos:line="7" pos:column="37">open<pos:position pos:line="7" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">assert<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><operator pos:line="8" pos:column="12">!<pos:position pos:line="8" pos:column="13"/></operator><name><name pos:line="8" pos:column="13">fd_table<pos:position pos:line="8" pos:column="21"/></name><index pos:line="8" pos:column="21">[<expr><name><name pos:line="8" pos:column="22">conn<pos:position pos:line="8" pos:column="26"/></name><operator pos:line="8" pos:column="26">-&gt;<pos:position pos:line="8" pos:column="31"/></operator><name pos:line="8" pos:column="28">fd<pos:position pos:line="8" pos:column="30"/></name></name></expr>]<pos:position pos:line="8" pos:column="31"/></index></name><operator pos:line="8" pos:column="31">.<pos:position pos:line="8" pos:column="32"/></operator><call><name pos:line="8" pos:column="32">closing<pos:position pos:line="8" pos:column="39"/></name><argument_list pos:line="8" pos:column="39">()<pos:position pos:line="8" pos:column="41"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="43"/></expr_stmt>
    <decl_stmt><decl><type><name><name pos:line="9" pos:column="5">Comm<pos:position pos:line="9" pos:column="9"/></name><operator pos:line="9" pos:column="9">::<pos:position pos:line="9" pos:column="11"/></operator><name pos:line="9" pos:column="11">IoCallback<pos:position pos:line="9" pos:column="21"/></name></name> <modifier pos:line="9" pos:column="22">*<pos:position pos:line="9" pos:column="23"/></modifier></type><name pos:line="9" pos:column="23">ccb<pos:position pos:line="9" pos:column="26"/></name> <init pos:line="9" pos:column="27">= <expr><call><name pos:line="9" pos:column="29">COMMIO_FD_WRITECB<pos:position pos:line="9" pos:column="46"/></name><argument_list pos:line="9" pos:column="46">(<argument><expr><name><name pos:line="9" pos:column="47">conn<pos:position pos:line="9" pos:column="51"/></name><operator pos:line="9" pos:column="51">-&gt;<pos:position pos:line="9" pos:column="56"/></operator><name pos:line="9" pos:column="53">fd<pos:position pos:line="9" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="56"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="57"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">assert<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><operator pos:line="10" pos:column="12">!<pos:position pos:line="10" pos:column="13"/></operator><call><name><name pos:line="10" pos:column="13">ccb<pos:position pos:line="10" pos:column="16"/></name><operator pos:line="10" pos:column="16">-&gt;<pos:position pos:line="10" pos:column="21"/></operator><name pos:line="10" pos:column="18">active<pos:position pos:line="10" pos:column="24"/></name></name><argument_list pos:line="10" pos:column="24">()<pos:position pos:line="10" pos:column="26"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="28"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="12" pos:column="5">fd_table<pos:position pos:line="12" pos:column="13"/></name><index pos:line="12" pos:column="13">[<expr><name><name pos:line="12" pos:column="14">conn<pos:position pos:line="12" pos:column="18"/></name><operator pos:line="12" pos:column="18">-&gt;<pos:position pos:line="12" pos:column="23"/></operator><name pos:line="12" pos:column="20">fd<pos:position pos:line="12" pos:column="22"/></name></name></expr>]<pos:position pos:line="12" pos:column="23"/></index></name><operator pos:line="12" pos:column="23">.<pos:position pos:line="12" pos:column="24"/></operator><name pos:line="12" pos:column="24">writeStart<pos:position pos:line="12" pos:column="34"/></name> <operator pos:line="12" pos:column="35">=<pos:position pos:line="12" pos:column="36"/></operator> <name pos:line="12" pos:column="37">squid_curtime<pos:position pos:line="12" pos:column="50"/></name></expr>;<pos:position pos:line="12" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="13" pos:column="5">ccb<pos:position pos:line="13" pos:column="8"/></name><operator pos:line="13" pos:column="8">-&gt;<pos:position pos:line="13" pos:column="13"/></operator><name pos:line="13" pos:column="10">conn<pos:position pos:line="13" pos:column="14"/></name></name> <operator pos:line="13" pos:column="15">=<pos:position pos:line="13" pos:column="16"/></operator> <name pos:line="13" pos:column="17">conn<pos:position pos:line="13" pos:column="21"/></name></expr>;<pos:position pos:line="13" pos:column="22"/></expr_stmt>
    <comment type="block" pos:line="14" pos:column="5">/* Queue the write */</comment>
    <expr_stmt><expr><call><name><name pos:line="15" pos:column="5">ccb<pos:position pos:line="15" pos:column="8"/></name><operator pos:line="15" pos:column="8">-&gt;<pos:position pos:line="15" pos:column="13"/></operator><name pos:line="15" pos:column="10">setCallback<pos:position pos:line="15" pos:column="21"/></name></name><argument_list pos:line="15" pos:column="21">(<argument><expr><name pos:line="15" pos:column="22">IOCB_WRITE<pos:position pos:line="15" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="34">callback<pos:position pos:line="15" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="44">(<pos:position pos:line="15" pos:column="45"/></operator><name pos:line="15" pos:column="45">char<pos:position pos:line="15" pos:column="49"/></name> <operator pos:line="15" pos:column="50">*<pos:position pos:line="15" pos:column="51"/></operator><operator pos:line="15" pos:column="51">)<pos:position pos:line="15" pos:column="52"/></operator><name pos:line="15" pos:column="52">buf<pos:position pos:line="15" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="57">free_func<pos:position pos:line="15" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="68">size<pos:position pos:line="15" pos:column="72"/></name></expr></argument>)<pos:position pos:line="15" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="74"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="16" pos:column="5">ccb<pos:position pos:line="16" pos:column="8"/></name><operator pos:line="16" pos:column="8">-&gt;<pos:position pos:line="16" pos:column="13"/></operator><name pos:line="16" pos:column="10">selectOrQueueWrite<pos:position pos:line="16" pos:column="28"/></name></name><argument_list pos:line="16" pos:column="28">()<pos:position pos:line="16" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="31"/></expr_stmt>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
