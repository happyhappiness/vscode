<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3241_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type>
<name><name pos:line="2" pos:column="1">Ip<pos:position pos:line="2" pos:column="3"/></name><operator pos:line="2" pos:column="3">::<pos:position pos:line="2" pos:column="5"/></operator><name pos:line="2" pos:column="5">Address<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">toStr<pos:position pos:line="2" pos:column="19"/></name></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name pos:line="2" pos:column="20">char<pos:position pos:line="2" pos:column="24"/></name><modifier pos:line="2" pos:column="24">*<pos:position pos:line="2" pos:column="25"/></modifier></type> <name pos:line="2" pos:column="26">buf<pos:position pos:line="2" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="31">const<pos:position pos:line="2" pos:column="36"/></specifier> <name pos:line="2" pos:column="37">unsigned<pos:position pos:line="2" pos:column="45"/></name> <name pos:line="2" pos:column="46">int<pos:position pos:line="2" pos:column="49"/></name></type> <name pos:line="2" pos:column="50">blen<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="56">int<pos:position pos:line="2" pos:column="59"/></name></type> <name pos:line="2" pos:column="60">force<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="66"/></parameter_list> <specifier pos:line="2" pos:column="67">const<pos:position pos:line="2" pos:column="72"/></specifier>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// Ensure we have a buffer.</comment>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><name pos:line="5" pos:column="9">buf<pos:position pos:line="5" pos:column="12"/></name> <operator pos:line="5" pos:column="13">==<pos:position pos:line="5" pos:column="15"/></operator> <name pos:line="5" pos:column="16">NULL<pos:position pos:line="5" pos:column="20"/></name></expr>)<pos:position pos:line="5" pos:column="21"/></condition><then pos:line="5" pos:column="21"> <block pos:line="5" pos:column="22">{
        <return pos:line="6" pos:column="9">return <expr><name pos:line="6" pos:column="16">NULL<pos:position pos:line="6" pos:column="20"/></name></expr>;<pos:position pos:line="6" pos:column="21"/></return>
    }<pos:position pos:line="7" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="9" pos:column="5">/* some external code may have blindly memset a parent. */</comment>
    <comment type="block" pos:line="10" pos:column="5">/* thats okay, our default is known */</comment>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">( <expr><call><name pos:line="11" pos:column="10">isAnyAddr<pos:position pos:line="11" pos:column="19"/></name><argument_list pos:line="11" pos:column="19">()<pos:position pos:line="11" pos:column="21"/></argument_list></call></expr> )<pos:position pos:line="11" pos:column="23"/></condition><then pos:line="11" pos:column="23"> <block pos:line="11" pos:column="24">{
        <if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><call><name pos:line="12" pos:column="13">isIPv6<pos:position pos:line="12" pos:column="19"/></name><argument_list pos:line="12" pos:column="19">()<pos:position pos:line="12" pos:column="21"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="22"/></condition><then pos:line="12" pos:column="22">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="13">memcpy<pos:position pos:line="13" pos:column="19"/></name><argument_list pos:line="13" pos:column="19">(<argument><expr><name pos:line="13" pos:column="20">buf<pos:position pos:line="13" pos:column="23"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="13" pos:column="24">"::\0"<pos:position pos:line="13" pos:column="30"/></literal></expr></argument>, <argument><expr><call><name pos:line="13" pos:column="32">min<pos:position pos:line="13" pos:column="35"/></name><argument_list pos:line="13" pos:column="35">(<argument><expr><cast type="static" pos:line="13" pos:column="36">static_cast<argument_list type="generic" pos:line="13" pos:column="47">&lt;<argument><expr><name pos:line="13" pos:column="48">unsigned<pos:position pos:line="13" pos:column="56"/></name> <name pos:line="13" pos:column="57">int<pos:position pos:line="13" pos:column="60"/></name></expr></argument>&gt;<pos:position pos:line="13" pos:column="64"/></argument_list><argument_list pos:line="13" pos:column="61">(<argument><expr><literal type="number" pos:line="13" pos:column="62">3<pos:position pos:line="13" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="64"/></argument_list></cast></expr></argument>,<argument><expr><name pos:line="13" pos:column="65">blen<pos:position pos:line="13" pos:column="69"/></name></expr></argument>)<pos:position pos:line="13" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="72"/></expr_stmt></block></then>
        <elseif pos:line="14" pos:column="9">else <if pos:line="14" pos:column="14">if <condition pos:line="14" pos:column="17">(<expr><call><name pos:line="14" pos:column="18">isIPv4<pos:position pos:line="14" pos:column="24"/></name><argument_list pos:line="14" pos:column="24">()<pos:position pos:line="14" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="27"/></condition><then pos:line="14" pos:column="27">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="13">memcpy<pos:position pos:line="15" pos:column="19"/></name><argument_list pos:line="15" pos:column="19">(<argument><expr><name pos:line="15" pos:column="20">buf<pos:position pos:line="15" pos:column="23"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="15" pos:column="24">"0.0.0.0\0"<pos:position pos:line="15" pos:column="35"/></literal></expr></argument>, <argument><expr><call><name pos:line="15" pos:column="37">min<pos:position pos:line="15" pos:column="40"/></name><argument_list pos:line="15" pos:column="40">(<argument><expr><cast type="static" pos:line="15" pos:column="41">static_cast<argument_list type="generic" pos:line="15" pos:column="52">&lt;<argument><expr><name pos:line="15" pos:column="53">unsigned<pos:position pos:line="15" pos:column="61"/></name> <name pos:line="15" pos:column="62">int<pos:position pos:line="15" pos:column="65"/></name></expr></argument>&gt;<pos:position pos:line="15" pos:column="69"/></argument_list><argument_list pos:line="15" pos:column="66">(<argument><expr><literal type="number" pos:line="15" pos:column="67">8<pos:position pos:line="15" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="69"/></argument_list></cast></expr></argument>,<argument><expr><name pos:line="15" pos:column="70">blen<pos:position pos:line="15" pos:column="74"/></name></expr></argument>)<pos:position pos:line="15" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="15" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="77"/></expr_stmt></block></then></if></elseif></if>
        <return pos:line="16" pos:column="9">return <expr><name pos:line="16" pos:column="16">buf<pos:position pos:line="16" pos:column="19"/></name></expr>;<pos:position pos:line="16" pos:column="20"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="19" pos:column="5">memset<pos:position pos:line="19" pos:column="11"/></name><argument_list pos:line="19" pos:column="11">(<argument><expr><name pos:line="19" pos:column="12">buf<pos:position pos:line="19" pos:column="15"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="19" pos:column="16">0<pos:position pos:line="19" pos:column="17"/></literal></expr></argument>,<argument><expr><name pos:line="19" pos:column="18">blen<pos:position pos:line="19" pos:column="22"/></name></expr></argument>)<pos:position pos:line="19" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="24"/></expr_stmt> <comment type="line" pos:line="19" pos:column="25">// clear buffer before write</comment>

    <comment type="block" pos:line="21" pos:column="5">/* Pure-IPv6 CANNOT be displayed in IPv4 format. */</comment>
    <comment type="block" pos:line="22" pos:column="5">/* However IPv4 CAN. */</comment>
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">( <expr><name pos:line="23" pos:column="10">force<pos:position pos:line="23" pos:column="15"/></name> <operator pos:line="23" pos:column="16">==<pos:position pos:line="23" pos:column="18"/></operator> <name pos:line="23" pos:column="19">AF_INET<pos:position pos:line="23" pos:column="26"/></name> <operator pos:line="23" pos:column="27">&amp;&amp;<pos:position pos:line="23" pos:column="37"/></operator> <operator pos:line="23" pos:column="30">!<pos:position pos:line="23" pos:column="31"/></operator><call><name pos:line="23" pos:column="31">isIPv4<pos:position pos:line="23" pos:column="37"/></name><argument_list pos:line="23" pos:column="37">()<pos:position pos:line="23" pos:column="39"/></argument_list></call></expr> )<pos:position pos:line="23" pos:column="41"/></condition><then pos:line="23" pos:column="41"> <block pos:line="23" pos:column="42">{
        <if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">( <expr><call><name pos:line="24" pos:column="14">isIPv6<pos:position pos:line="24" pos:column="20"/></name><argument_list pos:line="24" pos:column="20">()<pos:position pos:line="24" pos:column="22"/></argument_list></call></expr> )<pos:position pos:line="24" pos:column="24"/></condition><then pos:line="24" pos:column="24"> <block pos:line="24" pos:column="25">{
            <expr_stmt><expr><call><name pos:line="25" pos:column="13">memcpy<pos:position pos:line="25" pos:column="19"/></name><argument_list pos:line="25" pos:column="19">(<argument><expr><name pos:line="25" pos:column="20">buf<pos:position pos:line="25" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="25">"{!IPv4}\0"<pos:position pos:line="25" pos:column="36"/></literal></expr></argument>, <argument><expr><call><name pos:line="25" pos:column="38">min<pos:position pos:line="25" pos:column="41"/></name><argument_list pos:line="25" pos:column="41">(<argument><expr><cast type="static" pos:line="25" pos:column="42">static_cast<argument_list type="generic" pos:line="25" pos:column="53">&lt;<argument><expr><name pos:line="25" pos:column="54">unsigned<pos:position pos:line="25" pos:column="62"/></name> <name pos:line="25" pos:column="63">int<pos:position pos:line="25" pos:column="66"/></name></expr></argument>&gt;<pos:position pos:line="25" pos:column="70"/></argument_list><argument_list pos:line="25" pos:column="67">(<argument><expr><literal type="number" pos:line="25" pos:column="68">8<pos:position pos:line="25" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="70"/></argument_list></cast></expr></argument>,<argument><expr><name pos:line="25" pos:column="71">blen<pos:position pos:line="25" pos:column="75"/></name></expr></argument>)<pos:position pos:line="25" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="78"/></expr_stmt>
        }<pos:position pos:line="26" pos:column="10"/></block></then></if>
        <return pos:line="27" pos:column="9">return <expr><name pos:line="27" pos:column="16">buf<pos:position pos:line="27" pos:column="19"/></name></expr>;<pos:position pos:line="27" pos:column="20"/></return>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>

    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">( <expr><name pos:line="30" pos:column="10">force<pos:position pos:line="30" pos:column="15"/></name> <operator pos:line="30" pos:column="16">==<pos:position pos:line="30" pos:column="18"/></operator> <name pos:line="30" pos:column="19">AF_INET6<pos:position pos:line="30" pos:column="27"/></name> <operator pos:line="30" pos:column="28">||<pos:position pos:line="30" pos:column="30"/></operator> <operator pos:line="30" pos:column="31">(<pos:position pos:line="30" pos:column="32"/></operator><name pos:line="30" pos:column="32">force<pos:position pos:line="30" pos:column="37"/></name> <operator pos:line="30" pos:column="38">==<pos:position pos:line="30" pos:column="40"/></operator> <name pos:line="30" pos:column="41">AF_UNSPEC<pos:position pos:line="30" pos:column="50"/></name> <operator pos:line="30" pos:column="51">&amp;&amp;<pos:position pos:line="30" pos:column="61"/></operator> <call><name pos:line="30" pos:column="54">isIPv6<pos:position pos:line="30" pos:column="60"/></name><argument_list pos:line="30" pos:column="60">()<pos:position pos:line="30" pos:column="62"/></argument_list></call><operator pos:line="30" pos:column="62">)<pos:position pos:line="30" pos:column="63"/></operator></expr> )<pos:position pos:line="30" pos:column="65"/></condition><then pos:line="30" pos:column="65"> <block pos:line="30" pos:column="66">{

        <expr_stmt><expr><call><name pos:line="32" pos:column="9">inet_ntop<pos:position pos:line="32" pos:column="18"/></name><argument_list pos:line="32" pos:column="18">(<argument><expr><name pos:line="32" pos:column="19">AF_INET6<pos:position pos:line="32" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="29">&amp;<pos:position pos:line="32" pos:column="34"/></operator><name><name pos:line="32" pos:column="30">mSocketAddr_<pos:position pos:line="32" pos:column="42"/></name><operator pos:line="32" pos:column="42">.<pos:position pos:line="32" pos:column="43"/></operator><name pos:line="32" pos:column="43">sin6_addr<pos:position pos:line="32" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="54">buf<pos:position pos:line="32" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="59">blen<pos:position pos:line="32" pos:column="63"/></name></expr></argument>)<pos:position pos:line="32" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="65"/></expr_stmt>

    }<pos:position pos:line="34" pos:column="6"/></block></then> <elseif pos:line="34" pos:column="7">else  <if pos:line="34" pos:column="13">if <condition pos:line="34" pos:column="16">( <expr><name pos:line="34" pos:column="18">force<pos:position pos:line="34" pos:column="23"/></name> <operator pos:line="34" pos:column="24">==<pos:position pos:line="34" pos:column="26"/></operator> <name pos:line="34" pos:column="27">AF_INET<pos:position pos:line="34" pos:column="34"/></name> <operator pos:line="34" pos:column="35">||<pos:position pos:line="34" pos:column="37"/></operator> <operator pos:line="34" pos:column="38">(<pos:position pos:line="34" pos:column="39"/></operator><name pos:line="34" pos:column="39">force<pos:position pos:line="34" pos:column="44"/></name> <operator pos:line="34" pos:column="45">==<pos:position pos:line="34" pos:column="47"/></operator> <name pos:line="34" pos:column="48">AF_UNSPEC<pos:position pos:line="34" pos:column="57"/></name> <operator pos:line="34" pos:column="58">&amp;&amp;<pos:position pos:line="34" pos:column="68"/></operator> <call><name pos:line="34" pos:column="61">isIPv4<pos:position pos:line="34" pos:column="67"/></name><argument_list pos:line="34" pos:column="67">()<pos:position pos:line="34" pos:column="69"/></argument_list></call><operator pos:line="34" pos:column="69">)<pos:position pos:line="34" pos:column="70"/></operator></expr> )<pos:position pos:line="34" pos:column="72"/></condition><then pos:line="34" pos:column="72"> <block pos:line="34" pos:column="73">{

        <decl_stmt><decl><type><name><name pos:line="36" pos:column="9">struct<pos:position pos:line="36" pos:column="15"/></name> <name pos:line="36" pos:column="16">in_addr<pos:position pos:line="36" pos:column="23"/></name></name></type> <name pos:line="36" pos:column="24">tmp<pos:position pos:line="36" pos:column="27"/></name></decl>;<pos:position pos:line="36" pos:column="28"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">getInAddr<pos:position pos:line="37" pos:column="18"/></name><argument_list pos:line="37" pos:column="18">(<argument><expr><name pos:line="37" pos:column="19">tmp<pos:position pos:line="37" pos:column="22"/></name></expr></argument>)<pos:position pos:line="37" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="38" pos:column="9">inet_ntop<pos:position pos:line="38" pos:column="18"/></name><argument_list pos:line="38" pos:column="18">(<argument><expr><name pos:line="38" pos:column="19">AF_INET<pos:position pos:line="38" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="28">&amp;<pos:position pos:line="38" pos:column="33"/></operator><name pos:line="38" pos:column="29">tmp<pos:position pos:line="38" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="34">buf<pos:position pos:line="38" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="39">blen<pos:position pos:line="38" pos:column="43"/></name></expr></argument>)<pos:position pos:line="38" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if></elseif> <else pos:line="39" pos:column="7">else <block pos:line="39" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="40" pos:column="9">debugs<pos:position pos:line="40" pos:column="15"/></name><argument_list pos:line="40" pos:column="15">(<argument><expr><literal type="number" pos:line="40" pos:column="16">14<pos:position pos:line="40" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="20">DBG_CRITICAL<pos:position pos:line="40" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="34">"WARNING: Corrupt IP Address details OR required to display in unknown format ("<pos:position pos:line="40" pos:column="114"/></literal> <operator pos:line="40" pos:column="115">&lt;&lt;<pos:position pos:line="40" pos:column="123"/></operator>
               <name pos:line="41" pos:column="16">force<pos:position pos:line="41" pos:column="21"/></name> <operator pos:line="41" pos:column="22">&lt;&lt;<pos:position pos:line="41" pos:column="30"/></operator> <literal type="string" pos:line="41" pos:column="25">"). accepted={"<pos:position pos:line="41" pos:column="40"/></literal> <operator pos:line="41" pos:column="41">&lt;&lt;<pos:position pos:line="41" pos:column="49"/></operator> <name pos:line="41" pos:column="44">AF_UNSPEC<pos:position pos:line="41" pos:column="53"/></name> <operator pos:line="41" pos:column="54">&lt;&lt;<pos:position pos:line="41" pos:column="62"/></operator> <literal type="string" pos:line="41" pos:column="57">","<pos:position pos:line="41" pos:column="60"/></literal> <operator pos:line="41" pos:column="61">&lt;&lt;<pos:position pos:line="41" pos:column="69"/></operator> <name pos:line="41" pos:column="64">AF_INET<pos:position pos:line="41" pos:column="71"/></name> <operator pos:line="41" pos:column="72">&lt;&lt;<pos:position pos:line="41" pos:column="80"/></operator> <literal type="string" pos:line="41" pos:column="75">","<pos:position pos:line="41" pos:column="78"/></literal> <operator pos:line="41" pos:column="79">&lt;&lt;<pos:position pos:line="41" pos:column="87"/></operator> <name pos:line="41" pos:column="82">AF_INET6<pos:position pos:line="41" pos:column="90"/></name> <operator pos:line="41" pos:column="91">&lt;&lt;<pos:position pos:line="41" pos:column="99"/></operator> <literal type="string" pos:line="41" pos:column="94">"}"<pos:position pos:line="41" pos:column="97"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="98"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="99"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="42" pos:column="9">fprintf<pos:position pos:line="42" pos:column="16"/></name><argument_list pos:line="42" pos:column="16">(<argument><expr><name pos:line="42" pos:column="17">stderr<pos:position pos:line="42" pos:column="23"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="42" pos:column="24">"WARNING: Corrupt IP Address details OR required to display in unknown format (%d). accepted={%d,%d,%d} "<pos:position pos:line="42" pos:column="129"/></literal></expr></argument>,
                <argument><expr><name pos:line="43" pos:column="17">force<pos:position pos:line="43" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="24">AF_UNSPEC<pos:position pos:line="43" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="35">AF_INET<pos:position pos:line="43" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="44">AF_INET6<pos:position pos:line="43" pos:column="52"/></name></expr></argument>)<pos:position pos:line="43" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="54"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="44" pos:column="9">memcpy<pos:position pos:line="44" pos:column="15"/></name><argument_list pos:line="44" pos:column="15">(<argument><expr><name pos:line="44" pos:column="16">buf<pos:position pos:line="44" pos:column="19"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="44" pos:column="20">"dead:beef::\0"<pos:position pos:line="44" pos:column="35"/></literal></expr></argument>, <argument><expr><call><name pos:line="44" pos:column="37">min<pos:position pos:line="44" pos:column="40"/></name><argument_list pos:line="44" pos:column="40">(<argument><expr><cast type="static" pos:line="44" pos:column="41">static_cast<argument_list type="generic" pos:line="44" pos:column="52">&lt;<argument><expr><name pos:line="44" pos:column="53">unsigned<pos:position pos:line="44" pos:column="61"/></name> <name pos:line="44" pos:column="62">int<pos:position pos:line="44" pos:column="65"/></name></expr></argument>&gt;<pos:position pos:line="44" pos:column="69"/></argument_list><argument_list pos:line="44" pos:column="66">(<argument><expr><literal type="number" pos:line="44" pos:column="67">13<pos:position pos:line="44" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="70"/></argument_list></cast></expr></argument>,<argument><expr><name pos:line="44" pos:column="71">blen<pos:position pos:line="44" pos:column="75"/></name></expr></argument>)<pos:position pos:line="44" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="44" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="78"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="45" pos:column="9">assert<pos:position pos:line="45" pos:column="15"/></name><argument_list pos:line="45" pos:column="15">(<argument><expr><literal type="boolean" pos:line="45" pos:column="16">false<pos:position pos:line="45" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="46" pos:column="6"/></block></else></if>

    <return pos:line="48" pos:column="5">return <expr><name pos:line="48" pos:column="12">buf<pos:position pos:line="48" pos:column="15"/></name></expr>;<pos:position pos:line="48" pos:column="16"/></return>
}<pos:position pos:line="49" pos:column="2"/></block></function></unit>
