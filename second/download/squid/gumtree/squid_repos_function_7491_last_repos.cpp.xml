<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7491_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Security<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">BlindPeerConnector<pos:position pos:line="2" pos:column="29"/></name><operator pos:line="2" pos:column="29">::<pos:position pos:line="2" pos:column="31"/></operator><name pos:line="2" pos:column="31">initialize<pos:position pos:line="2" pos:column="41"/></name></name><parameter_list pos:line="2" pos:column="41">(<parameter><decl><type><name><name pos:line="2" pos:column="42">Security<pos:position pos:line="2" pos:column="50"/></name><operator pos:line="2" pos:column="50">::<pos:position pos:line="2" pos:column="52"/></operator><name pos:line="2" pos:column="52">SessionPointer<pos:position pos:line="2" pos:column="66"/></name></name> <modifier pos:line="2" pos:column="67">&amp;<pos:position pos:line="2" pos:column="72"/></modifier></type><name pos:line="2" pos:column="68">serverSession<pos:position pos:line="2" pos:column="81"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="82"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">!<pos:position pos:line="4" pos:column="10"/></operator><call><name><name pos:line="4" pos:column="10">Security<pos:position pos:line="4" pos:column="18"/></name><operator pos:line="4" pos:column="18">::<pos:position pos:line="4" pos:column="20"/></operator><name pos:line="4" pos:column="20">PeerConnector<pos:position pos:line="4" pos:column="33"/></name><operator pos:line="4" pos:column="33">::<pos:position pos:line="4" pos:column="35"/></operator><name pos:line="4" pos:column="35">initialize<pos:position pos:line="4" pos:column="45"/></name></name><argument_list pos:line="4" pos:column="45">(<argument><expr><name pos:line="4" pos:column="46">serverSession<pos:position pos:line="4" pos:column="59"/></name></expr></argument>)<pos:position pos:line="4" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="61"/></condition><then pos:line="4" pos:column="61"> <block pos:line="4" pos:column="62">{
        <expr_stmt><expr><call><name pos:line="5" pos:column="9">debugs<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">(<argument><expr><literal type="number" pos:line="5" pos:column="16">83<pos:position pos:line="5" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="20">5<pos:position pos:line="5" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="23">"Security::PeerConnector::initialize failed"<pos:position pos:line="5" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="69"/></expr_stmt>
        <return pos:line="6" pos:column="9">return <expr><literal type="boolean" pos:line="6" pos:column="16">false<pos:position pos:line="6" pos:column="21"/></literal></expr>;<pos:position pos:line="6" pos:column="22"/></return>
    }<pos:position pos:line="7" pos:column="6"/></block></then></if>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<decl><type><specifier pos:line="9" pos:column="9">const<pos:position pos:line="9" pos:column="14"/></specifier> <name pos:line="9" pos:column="15">CachePeer<pos:position pos:line="9" pos:column="24"/></name> <modifier pos:line="9" pos:column="25">*<pos:position pos:line="9" pos:column="26"/></modifier></type><name pos:line="9" pos:column="26">peer<pos:position pos:line="9" pos:column="30"/></name> <init pos:line="9" pos:column="31">= <expr><call><name pos:line="9" pos:column="33">serverConnection<pos:position pos:line="9" pos:column="49"/></name><argument_list pos:line="9" pos:column="49">()<pos:position pos:line="9" pos:column="51"/></argument_list></call><operator pos:line="9" pos:column="51">-&gt;<pos:position pos:line="9" pos:column="56"/></operator><call><name pos:line="9" pos:column="53">getPeer<pos:position pos:line="9" pos:column="60"/></name><argument_list pos:line="9" pos:column="60">()<pos:position pos:line="9" pos:column="62"/></argument_list></call></expr></init></decl>)<pos:position pos:line="9" pos:column="63"/></condition><then pos:line="9" pos:column="63"> <block pos:line="9" pos:column="64">{
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">assert<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><name pos:line="10" pos:column="16">peer<pos:position pos:line="10" pos:column="20"/></name></expr></argument>)<pos:position pos:line="10" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="22"/></expr_stmt>

        <comment type="line" pos:line="12" pos:column="9">// NP: domain may be a raw-IP but it is now always set</comment>
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">assert<pos:position pos:line="13" pos:column="15"/></name><argument_list pos:line="13" pos:column="15">(<argument><expr><operator pos:line="13" pos:column="16">!<pos:position pos:line="13" pos:column="17"/></operator><call><name><name pos:line="13" pos:column="17">peer<pos:position pos:line="13" pos:column="21"/></name><operator pos:line="13" pos:column="21">-&gt;<pos:position pos:line="13" pos:column="26"/></operator><name pos:line="13" pos:column="23">secure<pos:position pos:line="13" pos:column="29"/></name><operator pos:line="13" pos:column="29">.<pos:position pos:line="13" pos:column="30"/></operator><name pos:line="13" pos:column="30">sslDomain<pos:position pos:line="13" pos:column="39"/></name><operator pos:line="13" pos:column="39">.<pos:position pos:line="13" pos:column="40"/></operator><name pos:line="13" pos:column="40">isEmpty<pos:position pos:line="13" pos:column="47"/></name></name><argument_list pos:line="13" pos:column="47">()<pos:position pos:line="13" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="51"/></expr_stmt>

<cpp:if pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">if<pos:position pos:line="15" pos:column="4"/></cpp:directive> <expr><name pos:line="15" pos:column="5">USE_OPENSSL<pos:position pos:line="15" pos:column="16"/></name></expr></cpp:if>
        <comment type="line" pos:line="16" pos:column="9">// const loss is okay here, ssl_ex_index_server is only read and not assigned a destructor</comment>
        <decl_stmt><decl><type><name pos:line="17" pos:column="9">SBuf<pos:position pos:line="17" pos:column="13"/></name> <modifier pos:line="17" pos:column="14">*<pos:position pos:line="17" pos:column="15"/></modifier></type><name pos:line="17" pos:column="15">host<pos:position pos:line="17" pos:column="19"/></name> <init pos:line="17" pos:column="20">= <expr><operator pos:line="17" pos:column="22">new<pos:position pos:line="17" pos:column="25"/></operator> <call><name pos:line="17" pos:column="26">SBuf<pos:position pos:line="17" pos:column="30"/></name><argument_list pos:line="17" pos:column="30">(<argument><expr><name><name pos:line="17" pos:column="31">peer<pos:position pos:line="17" pos:column="35"/></name><operator pos:line="17" pos:column="35">-&gt;<pos:position pos:line="17" pos:column="40"/></operator><name pos:line="17" pos:column="37">secure<pos:position pos:line="17" pos:column="43"/></name><operator pos:line="17" pos:column="43">.<pos:position pos:line="17" pos:column="44"/></operator><name pos:line="17" pos:column="44">sslDomain<pos:position pos:line="17" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="17" pos:column="55"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">SSL_set_ex_data<pos:position pos:line="18" pos:column="24"/></name><argument_list pos:line="18" pos:column="24">(<argument><expr><call><name><name pos:line="18" pos:column="25">serverSession<pos:position pos:line="18" pos:column="38"/></name><operator pos:line="18" pos:column="38">.<pos:position pos:line="18" pos:column="39"/></operator><name pos:line="18" pos:column="39">get<pos:position pos:line="18" pos:column="42"/></name></name><argument_list pos:line="18" pos:column="42">()<pos:position pos:line="18" pos:column="44"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="18" pos:column="46">ssl_ex_index_server<pos:position pos:line="18" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="67">host<pos:position pos:line="18" pos:column="71"/></name></expr></argument>)<pos:position pos:line="18" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="73"/></expr_stmt>

        <expr_stmt><expr><call><name><name pos:line="20" pos:column="9">Security<pos:position pos:line="20" pos:column="17"/></name><operator pos:line="20" pos:column="17">::<pos:position pos:line="20" pos:column="19"/></operator><name pos:line="20" pos:column="19">SetSessionResumeData<pos:position pos:line="20" pos:column="39"/></name></name><argument_list pos:line="20" pos:column="39">(<argument><expr><name pos:line="20" pos:column="40">serverSession<pos:position pos:line="20" pos:column="53"/></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="55">peer<pos:position pos:line="20" pos:column="59"/></name><operator pos:line="20" pos:column="59">-&gt;<pos:position pos:line="20" pos:column="64"/></operator><name pos:line="20" pos:column="61">sslSession<pos:position pos:line="20" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="73"/></expr_stmt>
    }<pos:position pos:line="21" pos:column="6"/></block></then> <else pos:line="21" pos:column="7">else <block pos:line="21" pos:column="12">{
        <decl_stmt><decl><type><name pos:line="22" pos:column="9">SBuf<pos:position pos:line="22" pos:column="13"/></name> <modifier pos:line="22" pos:column="14">*<pos:position pos:line="22" pos:column="15"/></modifier></type><name pos:line="22" pos:column="15">hostName<pos:position pos:line="22" pos:column="23"/></name> <init pos:line="22" pos:column="24">= <expr><operator pos:line="22" pos:column="26">new<pos:position pos:line="22" pos:column="29"/></operator> <call><name pos:line="22" pos:column="30">SBuf<pos:position pos:line="22" pos:column="34"/></name><argument_list pos:line="22" pos:column="34">(<argument><expr><call><name><name pos:line="22" pos:column="35">request<pos:position pos:line="22" pos:column="42"/></name><operator pos:line="22" pos:column="42">-&gt;<pos:position pos:line="22" pos:column="47"/></operator><name pos:line="22" pos:column="44">url<pos:position pos:line="22" pos:column="47"/></name><operator pos:line="22" pos:column="47">.<pos:position pos:line="22" pos:column="48"/></operator><name pos:line="22" pos:column="48">host<pos:position pos:line="22" pos:column="52"/></name></name><argument_list pos:line="22" pos:column="52">()<pos:position pos:line="22" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="22" pos:column="56"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="23" pos:column="9">SSL_set_ex_data<pos:position pos:line="23" pos:column="24"/></name><argument_list pos:line="23" pos:column="24">(<argument><expr><call><name><name pos:line="23" pos:column="25">serverSession<pos:position pos:line="23" pos:column="38"/></name><operator pos:line="23" pos:column="38">.<pos:position pos:line="23" pos:column="39"/></operator><name pos:line="23" pos:column="39">get<pos:position pos:line="23" pos:column="42"/></name></name><argument_list pos:line="23" pos:column="42">()<pos:position pos:line="23" pos:column="44"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="23" pos:column="46">ssl_ex_index_server<pos:position pos:line="23" pos:column="65"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="67">(<pos:position pos:line="23" pos:column="68"/></operator><name pos:line="23" pos:column="68">void<pos:position pos:line="23" pos:column="72"/></name><operator pos:line="23" pos:column="72">*<pos:position pos:line="23" pos:column="73"/></operator><operator pos:line="23" pos:column="73">)<pos:position pos:line="23" pos:column="74"/></operator><name pos:line="23" pos:column="74">hostName<pos:position pos:line="23" pos:column="82"/></name></expr></argument>)<pos:position pos:line="23" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="84"/></expr_stmt>
<cpp:endif pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">endif<pos:position pos:line="24" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="25" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="27" pos:column="5">debugs<pos:position pos:line="27" pos:column="11"/></name><argument_list pos:line="27" pos:column="11">(<argument><expr><literal type="number" pos:line="27" pos:column="12">83<pos:position pos:line="27" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="16">5<pos:position pos:line="27" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="19">"success"<pos:position pos:line="27" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="30"/></expr_stmt>
    <return pos:line="28" pos:column="5">return <expr><literal type="boolean" pos:line="28" pos:column="12">true<pos:position pos:line="28" pos:column="16"/></literal></expr>;<pos:position pos:line="28" pos:column="17"/></return>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
