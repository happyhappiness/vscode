<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3810_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">Ssl<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">ServerBio<pos:position pos:line="2" pos:column="15"/></name><operator pos:line="2" pos:column="15">::<pos:position pos:line="2" pos:column="17"/></operator><name pos:line="2" pos:column="17">giveBuffered<pos:position pos:line="2" pos:column="29"/></name></name><parameter_list pos:line="2" pos:column="29">(<parameter><decl><type><name pos:line="2" pos:column="30">char<pos:position pos:line="2" pos:column="34"/></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="36">buf<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="41">const<pos:position pos:line="2" pos:column="46"/></specifier> <name pos:line="2" pos:column="47">int<pos:position pos:line="2" pos:column="50"/></name></type> <name pos:line="2" pos:column="51">size<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="56"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><call><name><name pos:line="4" pos:column="9">rbuf<pos:position pos:line="4" pos:column="13"/></name><operator pos:line="4" pos:column="13">.<pos:position pos:line="4" pos:column="14"/></operator><name pos:line="4" pos:column="14">length<pos:position pos:line="4" pos:column="20"/></name></name><argument_list pos:line="4" pos:column="20">()<pos:position pos:line="4" pos:column="22"/></argument_list></call> <operator pos:line="4" pos:column="23">&lt;=<pos:position pos:line="4" pos:column="28"/></operator> <name pos:line="4" pos:column="26">rbufConsumePos<pos:position pos:line="4" pos:column="40"/></name></expr>)<pos:position pos:line="4" pos:column="41"/></condition><then pos:line="4" pos:column="41">
        <block type="pseudo"><return pos:line="5" pos:column="9">return <expr><operator pos:line="5" pos:column="16">-<pos:position pos:line="5" pos:column="17"/></operator><literal type="number" pos:line="5" pos:column="17">1<pos:position pos:line="5" pos:column="18"/></literal></expr>;<pos:position pos:line="5" pos:column="19"/></return></block></then></if> <comment type="line" pos:line="5" pos:column="20">// buffered nothing yet</comment>

    <decl_stmt><decl><type><specifier pos:line="7" pos:column="5">const<pos:position pos:line="7" pos:column="10"/></specifier> <name pos:line="7" pos:column="11">int<pos:position pos:line="7" pos:column="14"/></name></type> <name pos:line="7" pos:column="15">unsent<pos:position pos:line="7" pos:column="21"/></name> <init pos:line="7" pos:column="22">= <expr><call><name><name pos:line="7" pos:column="24">rbuf<pos:position pos:line="7" pos:column="28"/></name><operator pos:line="7" pos:column="28">.<pos:position pos:line="7" pos:column="29"/></operator><name pos:line="7" pos:column="29">length<pos:position pos:line="7" pos:column="35"/></name></name><argument_list pos:line="7" pos:column="35">()<pos:position pos:line="7" pos:column="37"/></argument_list></call> <operator pos:line="7" pos:column="38">-<pos:position pos:line="7" pos:column="39"/></operator> <name pos:line="7" pos:column="40">rbufConsumePos<pos:position pos:line="7" pos:column="54"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="55"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="8" pos:column="5">const<pos:position pos:line="8" pos:column="10"/></specifier> <name pos:line="8" pos:column="11">int<pos:position pos:line="8" pos:column="14"/></name></type> <name pos:line="8" pos:column="15">bytes<pos:position pos:line="8" pos:column="20"/></name> <init pos:line="8" pos:column="21">= <expr><operator pos:line="8" pos:column="23">(<pos:position pos:line="8" pos:column="24"/></operator><ternary><condition><expr><name pos:line="8" pos:column="24">size<pos:position pos:line="8" pos:column="28"/></name> <operator pos:line="8" pos:column="29">&lt;=<pos:position pos:line="8" pos:column="34"/></operator> <name pos:line="8" pos:column="32">unsent<pos:position pos:line="8" pos:column="38"/></name></expr> ?<pos:position pos:line="8" pos:column="40"/></condition><then pos:line="8" pos:column="40"> <expr><name pos:line="8" pos:column="41">size<pos:position pos:line="8" pos:column="45"/></name></expr> <pos:position pos:line="8" pos:column="46"/></then><else pos:line="8" pos:column="46">: <expr><name pos:line="8" pos:column="48">unsent<pos:position pos:line="8" pos:column="54"/></name></expr></else></ternary><operator pos:line="8" pos:column="54">)<pos:position pos:line="8" pos:column="55"/></operator></expr></init></decl>;<pos:position pos:line="8" pos:column="56"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">memcpy<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><name pos:line="9" pos:column="12">buf<pos:position pos:line="9" pos:column="15"/></name></expr></argument>, <argument><expr><call><name><name pos:line="9" pos:column="17">rbuf<pos:position pos:line="9" pos:column="21"/></name><operator pos:line="9" pos:column="21">.<pos:position pos:line="9" pos:column="22"/></operator><name pos:line="9" pos:column="22">rawContent<pos:position pos:line="9" pos:column="32"/></name></name><argument_list pos:line="9" pos:column="32">()<pos:position pos:line="9" pos:column="34"/></argument_list></call> <operator pos:line="9" pos:column="35">+<pos:position pos:line="9" pos:column="36"/></operator> <name pos:line="9" pos:column="37">rbufConsumePos<pos:position pos:line="9" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="53">bytes<pos:position pos:line="9" pos:column="58"/></name></expr></argument>)<pos:position pos:line="9" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="60"/></expr_stmt>
    <expr_stmt><expr><name pos:line="10" pos:column="5">rbufConsumePos<pos:position pos:line="10" pos:column="19"/></name> <operator pos:line="10" pos:column="20">+=<pos:position pos:line="10" pos:column="22"/></operator> <name pos:line="10" pos:column="23">bytes<pos:position pos:line="10" pos:column="28"/></name></expr>;<pos:position pos:line="10" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">debugs<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><literal type="number" pos:line="11" pos:column="12">83<pos:position pos:line="11" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="16">7<pos:position pos:line="11" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="19">bytes<pos:position pos:line="11" pos:column="24"/></name> <operator pos:line="11" pos:column="25">&lt;&lt;<pos:position pos:line="11" pos:column="33"/></operator> <literal type="string" pos:line="11" pos:column="28">"&lt;="<pos:position pos:line="11" pos:column="35"/></literal> <operator pos:line="11" pos:column="33">&lt;&lt;<pos:position pos:line="11" pos:column="41"/></operator> <name pos:line="11" pos:column="36">size<pos:position pos:line="11" pos:column="40"/></name> <operator pos:line="11" pos:column="41">&lt;&lt;<pos:position pos:line="11" pos:column="49"/></operator> <literal type="string" pos:line="11" pos:column="44">" bytes to OpenSSL"<pos:position pos:line="11" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="65"/></expr_stmt>
    <return pos:line="12" pos:column="5">return <expr><name pos:line="12" pos:column="12">bytes<pos:position pos:line="12" pos:column="17"/></name></expr>;<pos:position pos:line="12" pos:column="18"/></return>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
