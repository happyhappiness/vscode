<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_308_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">create_ls<pos:position pos:line="2" pos:column="10"/></name><parameter_list pos:line="2" pos:column="10">(<parameter><decl><type><name><name pos:line="2" pos:column="11">struct<pos:position pos:line="2" pos:column="17"/></name> <name pos:line="2" pos:column="18">main_args<pos:position pos:line="2" pos:column="27"/></name></name> <modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier></type><name pos:line="2" pos:column="29">margs<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="35"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">np<pos:position pos:line="4" pos:column="13"/></name></decl>, <modifier pos:line="4" pos:column="15">*<pos:position pos:line="4" pos:column="16"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="16">dp<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">p<pos:position pos:line="5" pos:column="12"/></name></decl>;<pos:position pos:line="5" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">struct<pos:position pos:line="6" pos:column="11"/></name> <name pos:line="6" pos:column="12">lsstruct<pos:position pos:line="6" pos:column="20"/></name></name> <modifier pos:line="6" pos:column="21">*<pos:position pos:line="6" pos:column="22"/></modifier></type><name pos:line="6" pos:column="22">lssp<pos:position pos:line="6" pos:column="26"/></name> <init pos:line="6" pos:column="27">= <expr><name pos:line="6" pos:column="29">NULL<pos:position pos:line="6" pos:column="33"/></name></expr></init></decl>, <modifier pos:line="6" pos:column="35">*<pos:position pos:line="6" pos:column="36"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="36">lsspn<pos:position pos:line="6" pos:column="41"/></name> <init pos:line="6" pos:column="42">= <expr><name pos:line="6" pos:column="44">NULL<pos:position pos:line="6" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="49"/></decl_stmt>
    <comment type="block" pos:line="7" pos:column="5">/*
     *  netbios list format:
     *
     *     nlist=Pattern1[:Pattern2]
     *
     *     Pattern=ldap-server@Domain    ldap server Name for a specific Kerberos domain
     *                             lsstruct.domain=Domain, lsstruct.lserver=ldap server
     *
     *
     */</comment>
    <expr_stmt><expr><name pos:line="17" pos:column="5">p<pos:position pos:line="17" pos:column="6"/></name> <operator pos:line="17" pos:column="7">=<pos:position pos:line="17" pos:column="8"/></operator> <name><name pos:line="17" pos:column="9">margs<pos:position pos:line="17" pos:column="14"/></name><operator pos:line="17" pos:column="14">-&gt;<pos:position pos:line="17" pos:column="19"/></operator><name pos:line="17" pos:column="16">llist<pos:position pos:line="17" pos:column="21"/></name></name></expr>;<pos:position pos:line="17" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name pos:line="18" pos:column="5">np<pos:position pos:line="18" pos:column="7"/></name> <operator pos:line="18" pos:column="8">=<pos:position pos:line="18" pos:column="9"/></operator> <name><name pos:line="18" pos:column="10">margs<pos:position pos:line="18" pos:column="15"/></name><operator pos:line="18" pos:column="15">-&gt;<pos:position pos:line="18" pos:column="20"/></operator><name pos:line="18" pos:column="17">llist<pos:position pos:line="18" pos:column="22"/></name></name></expr>;<pos:position pos:line="18" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">debug<pos:position pos:line="19" pos:column="10"/></name><argument_list pos:line="19" pos:column="10">(<argument><expr><operator pos:line="19" pos:column="11">(<pos:position pos:line="19" pos:column="12"/></operator><name pos:line="19" pos:column="12">char<pos:position pos:line="19" pos:column="16"/></name> <operator pos:line="19" pos:column="17">*<pos:position pos:line="19" pos:column="18"/></operator><operator pos:line="19" pos:column="18">)<pos:position pos:line="19" pos:column="19"/></operator> <literal type="string" pos:line="19" pos:column="20">"%s| %s: DEBUG: ldap server list %s\n"<pos:position pos:line="19" pos:column="58"/></literal></expr></argument>, <argument><expr><call><name pos:line="19" pos:column="60">LogTime<pos:position pos:line="19" pos:column="67"/></name><argument_list pos:line="19" pos:column="67">()<pos:position pos:line="19" pos:column="69"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="19" pos:column="71">PROGRAM<pos:position pos:line="19" pos:column="78"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name pos:line="19" pos:column="80">margs<pos:position pos:line="19" pos:column="85"/></name><operator pos:line="19" pos:column="85">-&gt;<pos:position pos:line="19" pos:column="90"/></operator><name pos:line="19" pos:column="87">llist<pos:position pos:line="19" pos:column="92"/></name></name></expr> ?<pos:position pos:line="19" pos:column="94"/></condition><then pos:line="19" pos:column="94"> <expr><name><name pos:line="19" pos:column="95">margs<pos:position pos:line="19" pos:column="100"/></name><operator pos:line="19" pos:column="100">-&gt;<pos:position pos:line="19" pos:column="105"/></operator><name pos:line="19" pos:column="102">llist<pos:position pos:line="19" pos:column="107"/></name></name></expr> <pos:position pos:line="19" pos:column="108"/></then><else pos:line="19" pos:column="108">: <expr><literal type="string" pos:line="19" pos:column="110">"NULL"<pos:position pos:line="19" pos:column="116"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="19" pos:column="117"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="118"/></expr_stmt>
    <expr_stmt><expr><name pos:line="20" pos:column="5">dp<pos:position pos:line="20" pos:column="7"/></name> <operator pos:line="20" pos:column="8">=<pos:position pos:line="20" pos:column="9"/></operator> <name pos:line="20" pos:column="10">NULL<pos:position pos:line="20" pos:column="14"/></name></expr>;<pos:position pos:line="20" pos:column="15"/></expr_stmt>

    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><operator pos:line="22" pos:column="9">!<pos:position pos:line="22" pos:column="10"/></operator><name pos:line="22" pos:column="10">p<pos:position pos:line="22" pos:column="11"/></name></expr>)<pos:position pos:line="22" pos:column="12"/></condition><then pos:line="22" pos:column="12"> <block pos:line="22" pos:column="13">{
        <expr_stmt><expr><call><name pos:line="23" pos:column="9">debug<pos:position pos:line="23" pos:column="14"/></name><argument_list pos:line="23" pos:column="14">(<argument><expr><operator pos:line="23" pos:column="15">(<pos:position pos:line="23" pos:column="16"/></operator><name pos:line="23" pos:column="16">char<pos:position pos:line="23" pos:column="20"/></name> <operator pos:line="23" pos:column="21">*<pos:position pos:line="23" pos:column="22"/></operator><operator pos:line="23" pos:column="22">)<pos:position pos:line="23" pos:column="23"/></operator> <literal type="string" pos:line="23" pos:column="24">"%s| %s: DEBUG: No ldap servers defined.\n"<pos:position pos:line="23" pos:column="67"/></literal></expr></argument>, <argument><expr><call><name pos:line="23" pos:column="69">LogTime<pos:position pos:line="23" pos:column="76"/></name><argument_list pos:line="23" pos:column="76">()<pos:position pos:line="23" pos:column="78"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="23" pos:column="80">PROGRAM<pos:position pos:line="23" pos:column="87"/></name></expr></argument>)<pos:position pos:line="23" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="89"/></expr_stmt>
        <return pos:line="24" pos:column="9">return <expr><operator pos:line="24" pos:column="16">(<pos:position pos:line="24" pos:column="17"/></operator><literal type="number" pos:line="24" pos:column="17">0<pos:position pos:line="24" pos:column="18"/></literal><operator pos:line="24" pos:column="18">)<pos:position pos:line="24" pos:column="19"/></operator></expr>;<pos:position pos:line="24" pos:column="20"/></return>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>
    <while pos:line="26" pos:column="5">while <condition pos:line="26" pos:column="11">(<expr><operator pos:line="26" pos:column="12">*<pos:position pos:line="26" pos:column="13"/></operator><name pos:line="26" pos:column="13">p<pos:position pos:line="26" pos:column="14"/></name></expr>)<pos:position pos:line="26" pos:column="15"/></condition> <block pos:line="26" pos:column="16">{		<comment type="block" pos:line="26" pos:column="33">/* loop over group list */</comment>
        <if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><operator pos:line="27" pos:column="13">*<pos:position pos:line="27" pos:column="14"/></operator><name pos:line="27" pos:column="14">p<pos:position pos:line="27" pos:column="15"/></name> <operator pos:line="27" pos:column="16">==<pos:position pos:line="27" pos:column="18"/></operator> <literal type="char" pos:line="27" pos:column="19">'\n'<pos:position pos:line="27" pos:column="23"/></literal> <operator pos:line="27" pos:column="24">||<pos:position pos:line="27" pos:column="26"/></operator> <operator pos:line="27" pos:column="27">*<pos:position pos:line="27" pos:column="28"/></operator><name pos:line="27" pos:column="28">p<pos:position pos:line="27" pos:column="29"/></name> <operator pos:line="27" pos:column="30">==<pos:position pos:line="27" pos:column="32"/></operator> <literal type="char" pos:line="27" pos:column="33">'\r'<pos:position pos:line="27" pos:column="37"/></literal></expr>)<pos:position pos:line="27" pos:column="38"/></condition><then pos:line="27" pos:column="38"> <block pos:line="27" pos:column="39">{		<comment type="block" pos:line="27" pos:column="49">/* Ignore CR and LF if exist */</comment>
            <expr_stmt><expr><operator pos:line="28" pos:column="13">++<pos:position pos:line="28" pos:column="15"/></operator><name pos:line="28" pos:column="15">p<pos:position pos:line="28" pos:column="16"/></name></expr>;<pos:position pos:line="28" pos:column="17"/></expr_stmt>
            <continue pos:line="29" pos:column="13">continue;<pos:position pos:line="29" pos:column="22"/></continue>
        }<pos:position pos:line="30" pos:column="10"/></block></then></if>
        <if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><operator pos:line="31" pos:column="13">*<pos:position pos:line="31" pos:column="14"/></operator><name pos:line="31" pos:column="14">p<pos:position pos:line="31" pos:column="15"/></name> <operator pos:line="31" pos:column="16">==<pos:position pos:line="31" pos:column="18"/></operator> <literal type="char" pos:line="31" pos:column="19">'@'<pos:position pos:line="31" pos:column="22"/></literal></expr>)<pos:position pos:line="31" pos:column="23"/></condition><then pos:line="31" pos:column="23"> <block pos:line="31" pos:column="24">{	<comment type="block" pos:line="31" pos:column="33">/* end of group name - start of domain name */</comment>
            <if pos:line="32" pos:column="13">if <condition pos:line="32" pos:column="16">(<expr><name pos:line="32" pos:column="17">p<pos:position pos:line="32" pos:column="18"/></name> <operator pos:line="32" pos:column="19">==<pos:position pos:line="32" pos:column="21"/></operator> <name pos:line="32" pos:column="22">np<pos:position pos:line="32" pos:column="24"/></name></expr>)<pos:position pos:line="32" pos:column="25"/></condition><then pos:line="32" pos:column="25"> <block pos:line="32" pos:column="26">{	<comment type="block" pos:line="32" pos:column="33">/* empty group name not allowed */</comment>
                <expr_stmt><expr><call><name pos:line="33" pos:column="17">debug<pos:position pos:line="33" pos:column="22"/></name><argument_list pos:line="33" pos:column="22">(<argument><expr><operator pos:line="33" pos:column="23">(<pos:position pos:line="33" pos:column="24"/></operator><name pos:line="33" pos:column="24">char<pos:position pos:line="33" pos:column="28"/></name> <operator pos:line="33" pos:column="29">*<pos:position pos:line="33" pos:column="30"/></operator><operator pos:line="33" pos:column="30">)<pos:position pos:line="33" pos:column="31"/></operator> <literal type="string" pos:line="33" pos:column="32">"%s| %s: DEBUG: No ldap servers defined for domain %s\n"<pos:position pos:line="33" pos:column="88"/></literal></expr></argument>, <argument><expr><call><name pos:line="33" pos:column="90">LogTime<pos:position pos:line="33" pos:column="97"/></name><argument_list pos:line="33" pos:column="97">()<pos:position pos:line="33" pos:column="99"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="33" pos:column="101">PROGRAM<pos:position pos:line="33" pos:column="108"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="110">p<pos:position pos:line="33" pos:column="111"/></name></expr></argument>)<pos:position pos:line="33" pos:column="112"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="113"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="34" pos:column="17">free_ls<pos:position pos:line="34" pos:column="24"/></name><argument_list pos:line="34" pos:column="24">(<argument><expr><name pos:line="34" pos:column="25">lssp<pos:position pos:line="34" pos:column="29"/></name></expr></argument>)<pos:position pos:line="34" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="31"/></expr_stmt>
                <return pos:line="35" pos:column="17">return <expr><operator pos:line="35" pos:column="24">(<pos:position pos:line="35" pos:column="25"/></operator><literal type="number" pos:line="35" pos:column="25">1<pos:position pos:line="35" pos:column="26"/></literal><operator pos:line="35" pos:column="26">)<pos:position pos:line="35" pos:column="27"/></operator></expr>;<pos:position pos:line="35" pos:column="28"/></return>
            }<pos:position pos:line="36" pos:column="14"/></block></then></if>
            <if pos:line="37" pos:column="13">if <condition pos:line="37" pos:column="16">(<expr><name pos:line="37" pos:column="17">dp<pos:position pos:line="37" pos:column="19"/></name></expr>)<pos:position pos:line="37" pos:column="20"/></condition><then pos:line="37" pos:column="20"> <block pos:line="37" pos:column="21">{  <comment type="block" pos:line="37" pos:column="24">/* end of domain name - twice */</comment>
                <expr_stmt><expr><call><name pos:line="38" pos:column="17">debug<pos:position pos:line="38" pos:column="22"/></name><argument_list pos:line="38" pos:column="22">(<argument><expr><operator pos:line="38" pos:column="23">(<pos:position pos:line="38" pos:column="24"/></operator><name pos:line="38" pos:column="24">char<pos:position pos:line="38" pos:column="28"/></name> <operator pos:line="38" pos:column="29">*<pos:position pos:line="38" pos:column="30"/></operator><operator pos:line="38" pos:column="30">)<pos:position pos:line="38" pos:column="31"/></operator> <literal type="string" pos:line="38" pos:column="32">"%s| %s: @ is not allowed in server name %s@%s\n"<pos:position pos:line="38" pos:column="81"/></literal></expr></argument>,<argument><expr><call><name pos:line="38" pos:column="82">LogTime<pos:position pos:line="38" pos:column="89"/></name><argument_list pos:line="38" pos:column="89">()<pos:position pos:line="38" pos:column="91"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="38" pos:column="93">PROGRAM<pos:position pos:line="38" pos:column="100"/></name></expr></argument>,<argument><expr><name pos:line="38" pos:column="101">np<pos:position pos:line="38" pos:column="103"/></name></expr></argument>,<argument><expr><name pos:line="38" pos:column="104">dp<pos:position pos:line="38" pos:column="106"/></name></expr></argument>)<pos:position pos:line="38" pos:column="107"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="108"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="39" pos:column="17">free_ls<pos:position pos:line="39" pos:column="24"/></name><argument_list pos:line="39" pos:column="24">(<argument><expr><name pos:line="39" pos:column="25">lssp<pos:position pos:line="39" pos:column="29"/></name></expr></argument>)<pos:position pos:line="39" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="31"/></expr_stmt>
                <return pos:line="40" pos:column="17">return<expr><operator pos:line="40" pos:column="23">(<pos:position pos:line="40" pos:column="24"/></operator><literal type="number" pos:line="40" pos:column="24">1<pos:position pos:line="40" pos:column="25"/></literal><operator pos:line="40" pos:column="25">)<pos:position pos:line="40" pos:column="26"/></operator></expr>;<pos:position pos:line="40" pos:column="27"/></return>
            }<pos:position pos:line="41" pos:column="14"/></block></then></if>
            <expr_stmt><expr><operator pos:line="42" pos:column="13">*<pos:position pos:line="42" pos:column="14"/></operator><name pos:line="42" pos:column="14">p<pos:position pos:line="42" pos:column="15"/></name> <operator pos:line="42" pos:column="16">=<pos:position pos:line="42" pos:column="17"/></operator> <literal type="char" pos:line="42" pos:column="18">'\0'<pos:position pos:line="42" pos:column="22"/></literal></expr>;<pos:position pos:line="42" pos:column="23"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="43" pos:column="13">++<pos:position pos:line="43" pos:column="15"/></operator><name pos:line="43" pos:column="15">p<pos:position pos:line="43" pos:column="16"/></name></expr>;<pos:position pos:line="43" pos:column="17"/></expr_stmt>
            <expr_stmt><expr><name pos:line="44" pos:column="13">lssp<pos:position pos:line="44" pos:column="17"/></name> <operator pos:line="44" pos:column="18">=<pos:position pos:line="44" pos:column="19"/></operator> <call><name pos:line="44" pos:column="20">init_ls<pos:position pos:line="44" pos:column="27"/></name><argument_list pos:line="44" pos:column="27">()<pos:position pos:line="44" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="30"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="45" pos:column="13">lssp<pos:position pos:line="45" pos:column="17"/></name><operator pos:line="45" pos:column="17">-&gt;<pos:position pos:line="45" pos:column="22"/></operator><name pos:line="45" pos:column="19">lserver<pos:position pos:line="45" pos:column="26"/></name></name> <operator pos:line="45" pos:column="27">=<pos:position pos:line="45" pos:column="28"/></operator> <call><name pos:line="45" pos:column="29">xstrdup<pos:position pos:line="45" pos:column="36"/></name><argument_list pos:line="45" pos:column="36">(<argument><expr><name pos:line="45" pos:column="37">np<pos:position pos:line="45" pos:column="39"/></name></expr></argument>)<pos:position pos:line="45" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="41"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="46" pos:column="13">lssp<pos:position pos:line="46" pos:column="17"/></name><operator pos:line="46" pos:column="17">-&gt;<pos:position pos:line="46" pos:column="22"/></operator><name pos:line="46" pos:column="19">next<pos:position pos:line="46" pos:column="23"/></name></name> <operator pos:line="46" pos:column="24">=<pos:position pos:line="46" pos:column="25"/></operator> <name pos:line="46" pos:column="26">lsspn<pos:position pos:line="46" pos:column="31"/></name></expr>;<pos:position pos:line="46" pos:column="32"/></expr_stmt>
            <expr_stmt><expr><name pos:line="47" pos:column="13">dp<pos:position pos:line="47" pos:column="15"/></name> <operator pos:line="47" pos:column="16">=<pos:position pos:line="47" pos:column="17"/></operator> <name pos:line="47" pos:column="18">p<pos:position pos:line="47" pos:column="19"/></name></expr>;<pos:position pos:line="47" pos:column="20"/></expr_stmt>		<comment type="block" pos:line="47" pos:column="33">/* after @ starts new domain name */</comment>
        }<pos:position pos:line="48" pos:column="10"/></block></then> <elseif pos:line="48" pos:column="11">else <if pos:line="48" pos:column="16">if <condition pos:line="48" pos:column="19">(<expr><operator pos:line="48" pos:column="20">*<pos:position pos:line="48" pos:column="21"/></operator><name pos:line="48" pos:column="21">p<pos:position pos:line="48" pos:column="22"/></name> <operator pos:line="48" pos:column="23">==<pos:position pos:line="48" pos:column="25"/></operator> <literal type="char" pos:line="48" pos:column="26">':'<pos:position pos:line="48" pos:column="29"/></literal></expr>)<pos:position pos:line="48" pos:column="30"/></condition><then pos:line="48" pos:column="30"> <block pos:line="48" pos:column="31">{	<comment type="block" pos:line="48" pos:column="33">/* end of group name or end of domain name */</comment>
            <if pos:line="49" pos:column="13">if <condition pos:line="49" pos:column="16">(<expr><name pos:line="49" pos:column="17">p<pos:position pos:line="49" pos:column="18"/></name> <operator pos:line="49" pos:column="19">==<pos:position pos:line="49" pos:column="21"/></operator> <name pos:line="49" pos:column="22">np<pos:position pos:line="49" pos:column="24"/></name></expr>)<pos:position pos:line="49" pos:column="25"/></condition><then pos:line="49" pos:column="25"> <block pos:line="49" pos:column="26">{	<comment type="block" pos:line="49" pos:column="33">/* empty group name not allowed */</comment>
                <expr_stmt><expr><call><name pos:line="50" pos:column="17">debug<pos:position pos:line="50" pos:column="22"/></name><argument_list pos:line="50" pos:column="22">(<argument><expr><operator pos:line="50" pos:column="23">(<pos:position pos:line="50" pos:column="24"/></operator><name pos:line="50" pos:column="24">char<pos:position pos:line="50" pos:column="28"/></name> <operator pos:line="50" pos:column="29">*<pos:position pos:line="50" pos:column="30"/></operator><operator pos:line="50" pos:column="30">)<pos:position pos:line="50" pos:column="31"/></operator> <literal type="string" pos:line="50" pos:column="32">"%s| %s: DEBUG: No ldap servers defined for domain %s\n"<pos:position pos:line="50" pos:column="88"/></literal></expr></argument>, <argument><expr><call><name pos:line="50" pos:column="90">LogTime<pos:position pos:line="50" pos:column="97"/></name><argument_list pos:line="50" pos:column="97">()<pos:position pos:line="50" pos:column="99"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="50" pos:column="101">PROGRAM<pos:position pos:line="50" pos:column="108"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="110">p<pos:position pos:line="50" pos:column="111"/></name></expr></argument>)<pos:position pos:line="50" pos:column="112"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="113"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="51" pos:column="17">free_ls<pos:position pos:line="51" pos:column="24"/></name><argument_list pos:line="51" pos:column="24">(<argument><expr><name pos:line="51" pos:column="25">lssp<pos:position pos:line="51" pos:column="29"/></name></expr></argument>)<pos:position pos:line="51" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="31"/></expr_stmt>
                <return pos:line="52" pos:column="17">return <expr><operator pos:line="52" pos:column="24">(<pos:position pos:line="52" pos:column="25"/></operator><literal type="number" pos:line="52" pos:column="25">1<pos:position pos:line="52" pos:column="26"/></literal><operator pos:line="52" pos:column="26">)<pos:position pos:line="52" pos:column="27"/></operator></expr>;<pos:position pos:line="52" pos:column="28"/></return>
            }<pos:position pos:line="53" pos:column="14"/></block></then></if>
            <expr_stmt><expr><operator pos:line="54" pos:column="13">*<pos:position pos:line="54" pos:column="14"/></operator><name pos:line="54" pos:column="14">p<pos:position pos:line="54" pos:column="15"/></name> <operator pos:line="54" pos:column="16">=<pos:position pos:line="54" pos:column="17"/></operator> <literal type="char" pos:line="54" pos:column="18">'\0'<pos:position pos:line="54" pos:column="22"/></literal></expr>;<pos:position pos:line="54" pos:column="23"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="55" pos:column="13">++<pos:position pos:line="55" pos:column="15"/></operator><name pos:line="55" pos:column="15">p<pos:position pos:line="55" pos:column="16"/></name></expr>;<pos:position pos:line="55" pos:column="17"/></expr_stmt>
            <if pos:line="56" pos:column="13">if <condition pos:line="56" pos:column="16">(<expr><name pos:line="56" pos:column="17">dp<pos:position pos:line="56" pos:column="19"/></name></expr>)<pos:position pos:line="56" pos:column="20"/></condition><then pos:line="56" pos:column="20"> <block pos:line="56" pos:column="21">{		<comment type="block" pos:line="56" pos:column="33">/* end of domain name */</comment>
                <expr_stmt><expr><name><name pos:line="57" pos:column="17">lssp<pos:position pos:line="57" pos:column="21"/></name><operator pos:line="57" pos:column="21">-&gt;<pos:position pos:line="57" pos:column="26"/></operator><name pos:line="57" pos:column="23">domain<pos:position pos:line="57" pos:column="29"/></name></name> <operator pos:line="57" pos:column="30">=<pos:position pos:line="57" pos:column="31"/></operator> <call><name pos:line="57" pos:column="32">xstrdup<pos:position pos:line="57" pos:column="39"/></name><argument_list pos:line="57" pos:column="39">(<argument><expr><name pos:line="57" pos:column="40">dp<pos:position pos:line="57" pos:column="42"/></name></expr></argument>)<pos:position pos:line="57" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="44"/></expr_stmt>
                <expr_stmt><expr><name pos:line="58" pos:column="17">dp<pos:position pos:line="58" pos:column="19"/></name> <operator pos:line="58" pos:column="20">=<pos:position pos:line="58" pos:column="21"/></operator> <name pos:line="58" pos:column="22">NULL<pos:position pos:line="58" pos:column="26"/></name></expr>;<pos:position pos:line="58" pos:column="27"/></expr_stmt>
            }<pos:position pos:line="59" pos:column="14"/></block></then> <else pos:line="59" pos:column="15">else <block pos:line="59" pos:column="20">{		<comment type="block" pos:line="59" pos:column="33">/* end of group name and no domain name */</comment>
                <expr_stmt><expr><name pos:line="60" pos:column="17">lssp<pos:position pos:line="60" pos:column="21"/></name> <operator pos:line="60" pos:column="22">=<pos:position pos:line="60" pos:column="23"/></operator> <call><name pos:line="60" pos:column="24">init_ls<pos:position pos:line="60" pos:column="31"/></name><argument_list pos:line="60" pos:column="31">()<pos:position pos:line="60" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="34"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="61" pos:column="17">lssp<pos:position pos:line="61" pos:column="21"/></name><operator pos:line="61" pos:column="21">-&gt;<pos:position pos:line="61" pos:column="26"/></operator><name pos:line="61" pos:column="23">lserver<pos:position pos:line="61" pos:column="30"/></name></name> <operator pos:line="61" pos:column="31">=<pos:position pos:line="61" pos:column="32"/></operator> <call><name pos:line="61" pos:column="33">xstrdup<pos:position pos:line="61" pos:column="40"/></name><argument_list pos:line="61" pos:column="40">(<argument><expr><name pos:line="61" pos:column="41">np<pos:position pos:line="61" pos:column="43"/></name></expr></argument>)<pos:position pos:line="61" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="45"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="62" pos:column="17">lssp<pos:position pos:line="62" pos:column="21"/></name><operator pos:line="62" pos:column="21">-&gt;<pos:position pos:line="62" pos:column="26"/></operator><name pos:line="62" pos:column="23">next<pos:position pos:line="62" pos:column="27"/></name></name> <operator pos:line="62" pos:column="28">=<pos:position pos:line="62" pos:column="29"/></operator> <name pos:line="62" pos:column="30">lsspn<pos:position pos:line="62" pos:column="35"/></name></expr>;<pos:position pos:line="62" pos:column="36"/></expr_stmt>
            }<pos:position pos:line="63" pos:column="14"/></block></else></if>
            <expr_stmt><expr><name pos:line="64" pos:column="13">lsspn<pos:position pos:line="64" pos:column="18"/></name> <operator pos:line="64" pos:column="19">=<pos:position pos:line="64" pos:column="20"/></operator> <name pos:line="64" pos:column="21">lssp<pos:position pos:line="64" pos:column="25"/></name></expr>;<pos:position pos:line="64" pos:column="26"/></expr_stmt>
            <expr_stmt><expr><name pos:line="65" pos:column="13">np<pos:position pos:line="65" pos:column="15"/></name> <operator pos:line="65" pos:column="16">=<pos:position pos:line="65" pos:column="17"/></operator> <name pos:line="65" pos:column="18">p<pos:position pos:line="65" pos:column="19"/></name></expr>;<pos:position pos:line="65" pos:column="20"/></expr_stmt>		<comment type="block" pos:line="65" pos:column="33">/* after : starts new group name */</comment>
            <expr_stmt><expr><call><name pos:line="66" pos:column="13">debug<pos:position pos:line="66" pos:column="18"/></name><argument_list pos:line="66" pos:column="18">(<argument><expr><operator pos:line="66" pos:column="19">(<pos:position pos:line="66" pos:column="20"/></operator><name pos:line="66" pos:column="20">char<pos:position pos:line="66" pos:column="24"/></name> <operator pos:line="66" pos:column="25">*<pos:position pos:line="66" pos:column="26"/></operator><operator pos:line="66" pos:column="26">)<pos:position pos:line="66" pos:column="27"/></operator> <literal type="string" pos:line="66" pos:column="28">"%s| %s: DEBUG: ldap server %s Domain %s\n"<pos:position pos:line="66" pos:column="71"/></literal></expr></argument>, <argument><expr><call><name pos:line="66" pos:column="73">LogTime<pos:position pos:line="66" pos:column="80"/></name><argument_list pos:line="66" pos:column="80">()<pos:position pos:line="66" pos:column="82"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="66" pos:column="84">PROGRAM<pos:position pos:line="66" pos:column="91"/></name></expr></argument>, <argument><expr><name><name pos:line="66" pos:column="93">lssp<pos:position pos:line="66" pos:column="97"/></name><operator pos:line="66" pos:column="97">-&gt;<pos:position pos:line="66" pos:column="102"/></operator><name pos:line="66" pos:column="99">lserver<pos:position pos:line="66" pos:column="106"/></name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name pos:line="66" pos:column="108">lssp<pos:position pos:line="66" pos:column="112"/></name><operator pos:line="66" pos:column="112">-&gt;<pos:position pos:line="66" pos:column="117"/></operator><name pos:line="66" pos:column="114">domain<pos:position pos:line="66" pos:column="120"/></name></name></expr>?<pos:position pos:line="66" pos:column="121"/></condition><then><expr><name><name pos:line="66" pos:column="121">lssp<pos:position pos:line="66" pos:column="125"/></name><operator pos:line="66" pos:column="125">-&gt;<pos:position pos:line="66" pos:column="130"/></operator><name pos:line="66" pos:column="127">domain<pos:position pos:line="66" pos:column="133"/></name></name></expr></then><else pos:line="66" pos:column="133">:<expr><literal type="string" pos:line="66" pos:column="134">"NULL"<pos:position pos:line="66" pos:column="140"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="66" pos:column="141"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="142"/></expr_stmt>
        }<pos:position pos:line="67" pos:column="10"/></block></then></if></elseif> <else pos:line="67" pos:column="11">else
            <block type="pseudo"><expr_stmt><expr><operator pos:line="68" pos:column="13">++<pos:position pos:line="68" pos:column="15"/></operator><name pos:line="68" pos:column="15">p<pos:position pos:line="68" pos:column="16"/></name></expr>;<pos:position pos:line="68" pos:column="17"/></expr_stmt></block></else></if>
    }<pos:position pos:line="69" pos:column="6"/></block></while>
    <if pos:line="70" pos:column="5">if <condition pos:line="70" pos:column="8">(<expr><name pos:line="70" pos:column="9">p<pos:position pos:line="70" pos:column="10"/></name> <operator pos:line="70" pos:column="11">==<pos:position pos:line="70" pos:column="13"/></operator> <name pos:line="70" pos:column="14">np<pos:position pos:line="70" pos:column="16"/></name></expr>)<pos:position pos:line="70" pos:column="17"/></condition><then pos:line="70" pos:column="17"> <block pos:line="70" pos:column="18">{		<comment type="block" pos:line="70" pos:column="33">/* empty group name not allowed */</comment>
        <expr_stmt><expr><call><name pos:line="71" pos:column="9">debug<pos:position pos:line="71" pos:column="14"/></name><argument_list pos:line="71" pos:column="14">(<argument><expr><operator pos:line="71" pos:column="15">(<pos:position pos:line="71" pos:column="16"/></operator><name pos:line="71" pos:column="16">char<pos:position pos:line="71" pos:column="20"/></name> <operator pos:line="71" pos:column="21">*<pos:position pos:line="71" pos:column="22"/></operator><operator pos:line="71" pos:column="22">)<pos:position pos:line="71" pos:column="23"/></operator> <literal type="string" pos:line="71" pos:column="24">"%s| %s: DEBUG: No ldap servers defined for domain %s\n"<pos:position pos:line="71" pos:column="80"/></literal></expr></argument>, <argument><expr><call><name pos:line="71" pos:column="82">LogTime<pos:position pos:line="71" pos:column="89"/></name><argument_list pos:line="71" pos:column="89">()<pos:position pos:line="71" pos:column="91"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="71" pos:column="93">PROGRAM<pos:position pos:line="71" pos:column="100"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="102">p<pos:position pos:line="71" pos:column="103"/></name></expr></argument>)<pos:position pos:line="71" pos:column="104"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="105"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="72" pos:column="9">free_ls<pos:position pos:line="72" pos:column="16"/></name><argument_list pos:line="72" pos:column="16">(<argument><expr><name pos:line="72" pos:column="17">lssp<pos:position pos:line="72" pos:column="21"/></name></expr></argument>)<pos:position pos:line="72" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="23"/></expr_stmt>
        <return pos:line="73" pos:column="9">return <expr><operator pos:line="73" pos:column="16">(<pos:position pos:line="73" pos:column="17"/></operator><literal type="number" pos:line="73" pos:column="17">1<pos:position pos:line="73" pos:column="18"/></literal><operator pos:line="73" pos:column="18">)<pos:position pos:line="73" pos:column="19"/></operator></expr>;<pos:position pos:line="73" pos:column="20"/></return>
    }<pos:position pos:line="74" pos:column="6"/></block></then></if>
    <if pos:line="75" pos:column="5">if <condition pos:line="75" pos:column="8">(<expr><name pos:line="75" pos:column="9">dp<pos:position pos:line="75" pos:column="11"/></name></expr>)<pos:position pos:line="75" pos:column="12"/></condition><then pos:line="75" pos:column="12"> <block pos:line="75" pos:column="13">{			<comment type="block" pos:line="75" pos:column="33">/* end of domain name */</comment>
        <expr_stmt><expr><name><name pos:line="76" pos:column="9">lssp<pos:position pos:line="76" pos:column="13"/></name><operator pos:line="76" pos:column="13">-&gt;<pos:position pos:line="76" pos:column="18"/></operator><name pos:line="76" pos:column="15">domain<pos:position pos:line="76" pos:column="21"/></name></name> <operator pos:line="76" pos:column="22">=<pos:position pos:line="76" pos:column="23"/></operator> <call><name pos:line="76" pos:column="24">xstrdup<pos:position pos:line="76" pos:column="31"/></name><argument_list pos:line="76" pos:column="31">(<argument><expr><name pos:line="76" pos:column="32">dp<pos:position pos:line="76" pos:column="34"/></name></expr></argument>)<pos:position pos:line="76" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="77" pos:column="6"/></block></then> <else pos:line="77" pos:column="7">else <block pos:line="77" pos:column="12">{			<comment type="block" pos:line="77" pos:column="33">/* end of group name and no domain name */</comment>
        <expr_stmt><expr><name pos:line="78" pos:column="9">lssp<pos:position pos:line="78" pos:column="13"/></name> <operator pos:line="78" pos:column="14">=<pos:position pos:line="78" pos:column="15"/></operator> <call><name pos:line="78" pos:column="16">init_ls<pos:position pos:line="78" pos:column="23"/></name><argument_list pos:line="78" pos:column="23">()<pos:position pos:line="78" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="79" pos:column="9">lssp<pos:position pos:line="79" pos:column="13"/></name><operator pos:line="79" pos:column="13">-&gt;<pos:position pos:line="79" pos:column="18"/></operator><name pos:line="79" pos:column="15">lserver<pos:position pos:line="79" pos:column="22"/></name></name> <operator pos:line="79" pos:column="23">=<pos:position pos:line="79" pos:column="24"/></operator> <call><name pos:line="79" pos:column="25">xstrdup<pos:position pos:line="79" pos:column="32"/></name><argument_list pos:line="79" pos:column="32">(<argument><expr><name pos:line="79" pos:column="33">np<pos:position pos:line="79" pos:column="35"/></name></expr></argument>)<pos:position pos:line="79" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="37"/></expr_stmt>
        <if pos:line="80" pos:column="9">if <condition pos:line="80" pos:column="12">(<expr><name pos:line="80" pos:column="13">lsspn<pos:position pos:line="80" pos:column="18"/></name></expr>)<pos:position pos:line="80" pos:column="19"/></condition><then pos:line="80" pos:column="19">		<comment type="block" pos:line="80" pos:column="33">/* Have already an existing structure */</comment>
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="81" pos:column="13">lssp<pos:position pos:line="81" pos:column="17"/></name><operator pos:line="81" pos:column="17">-&gt;<pos:position pos:line="81" pos:column="22"/></operator><name pos:line="81" pos:column="19">next<pos:position pos:line="81" pos:column="23"/></name></name> <operator pos:line="81" pos:column="24">=<pos:position pos:line="81" pos:column="25"/></operator> <name pos:line="81" pos:column="26">lsspn<pos:position pos:line="81" pos:column="31"/></name></expr>;<pos:position pos:line="81" pos:column="32"/></expr_stmt></block></then></if>
    }<pos:position pos:line="82" pos:column="6"/></block></else></if>
    <expr_stmt><expr><call><name pos:line="83" pos:column="5">debug<pos:position pos:line="83" pos:column="10"/></name><argument_list pos:line="83" pos:column="10">(<argument><expr><operator pos:line="83" pos:column="11">(<pos:position pos:line="83" pos:column="12"/></operator><name pos:line="83" pos:column="12">char<pos:position pos:line="83" pos:column="16"/></name> <operator pos:line="83" pos:column="17">*<pos:position pos:line="83" pos:column="18"/></operator><operator pos:line="83" pos:column="18">)<pos:position pos:line="83" pos:column="19"/></operator> <literal type="string" pos:line="83" pos:column="20">"%s| %s: DEBUG: ldap server %s Domain %s\n"<pos:position pos:line="83" pos:column="63"/></literal></expr></argument>, <argument><expr><call><name pos:line="83" pos:column="65">LogTime<pos:position pos:line="83" pos:column="72"/></name><argument_list pos:line="83" pos:column="72">()<pos:position pos:line="83" pos:column="74"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="83" pos:column="76">PROGRAM<pos:position pos:line="83" pos:column="83"/></name></expr></argument>, <argument><expr><name><name pos:line="83" pos:column="85">lssp<pos:position pos:line="83" pos:column="89"/></name><operator pos:line="83" pos:column="89">-&gt;<pos:position pos:line="83" pos:column="94"/></operator><name pos:line="83" pos:column="91">lserver<pos:position pos:line="83" pos:column="98"/></name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name pos:line="83" pos:column="100">lssp<pos:position pos:line="83" pos:column="104"/></name><operator pos:line="83" pos:column="104">-&gt;<pos:position pos:line="83" pos:column="109"/></operator><name pos:line="83" pos:column="106">domain<pos:position pos:line="83" pos:column="112"/></name></name></expr>?<pos:position pos:line="83" pos:column="113"/></condition><then><expr><name><name pos:line="83" pos:column="113">lssp<pos:position pos:line="83" pos:column="117"/></name><operator pos:line="83" pos:column="117">-&gt;<pos:position pos:line="83" pos:column="122"/></operator><name pos:line="83" pos:column="119">domain<pos:position pos:line="83" pos:column="125"/></name></name></expr></then><else pos:line="83" pos:column="125">:<expr><literal type="string" pos:line="83" pos:column="126">"NULL"<pos:position pos:line="83" pos:column="132"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="83" pos:column="133"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="134"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="85" pos:column="5">margs<pos:position pos:line="85" pos:column="10"/></name><operator pos:line="85" pos:column="10">-&gt;<pos:position pos:line="85" pos:column="15"/></operator><name pos:line="85" pos:column="12">lservs<pos:position pos:line="85" pos:column="18"/></name></name> <operator pos:line="85" pos:column="19">=<pos:position pos:line="85" pos:column="20"/></operator> <name pos:line="85" pos:column="21">lssp<pos:position pos:line="85" pos:column="25"/></name></expr>;<pos:position pos:line="85" pos:column="26"/></expr_stmt>
    <return pos:line="86" pos:column="5">return <expr><operator pos:line="86" pos:column="12">(<pos:position pos:line="86" pos:column="13"/></operator><literal type="number" pos:line="86" pos:column="13">0<pos:position pos:line="86" pos:column="14"/></literal><operator pos:line="86" pos:column="14">)<pos:position pos:line="86" pos:column="15"/></operator></expr>;<pos:position pos:line="86" pos:column="16"/></return>
}<pos:position pos:line="87" pos:column="2"/></block></function></unit>
