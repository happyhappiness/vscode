<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4799_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ACLChecklist<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">matchChild<pos:position pos:line="2" pos:column="25"/></name></name><parameter_list pos:line="2" pos:column="25">(<parameter><decl><type><specifier pos:line="2" pos:column="26">const<pos:position pos:line="2" pos:column="31"/></specifier> <name><name pos:line="2" pos:column="32">Acl<pos:position pos:line="2" pos:column="35"/></name><operator pos:line="2" pos:column="35">::<pos:position pos:line="2" pos:column="37"/></operator><name pos:line="2" pos:column="37">InnerNode<pos:position pos:line="2" pos:column="46"/></name></name> <modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier></type><name pos:line="2" pos:column="48">current<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="57">Acl<pos:position pos:line="2" pos:column="60"/></name><operator pos:line="2" pos:column="60">::<pos:position pos:line="2" pos:column="62"/></operator><name pos:line="2" pos:column="62">Nodes<pos:position pos:line="2" pos:column="67"/></name><operator pos:line="2" pos:column="67">::<pos:position pos:line="2" pos:column="69"/></operator><name pos:line="2" pos:column="69">const_iterator<pos:position pos:line="2" pos:column="83"/></name></name></type> <name pos:line="2" pos:column="84">pos<pos:position pos:line="2" pos:column="87"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="89">const<pos:position pos:line="2" pos:column="94"/></specifier> <name pos:line="2" pos:column="95">ACL<pos:position pos:line="2" pos:column="98"/></name> <modifier pos:line="2" pos:column="99">*<pos:position pos:line="2" pos:column="100"/></modifier></type><name pos:line="2" pos:column="100">child<pos:position pos:line="2" pos:column="105"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="106"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">current<pos:position pos:line="4" pos:column="19"/></name> <operator pos:line="4" pos:column="20">&amp;&amp;<pos:position pos:line="4" pos:column="30"/></operator> <name pos:line="4" pos:column="23">child<pos:position pos:line="4" pos:column="28"/></name></expr></argument>)<pos:position pos:line="4" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="30"/></expr_stmt>

    <comment type="line" pos:line="6" pos:column="5">// Remember the current tree location to prevent "async loop" cases where</comment>
    <comment type="line" pos:line="7" pos:column="5">// the same child node wants to go async more than once.</comment>
    <expr_stmt><expr><name pos:line="8" pos:column="5">matchLoc_<pos:position pos:line="8" pos:column="14"/></name> <operator pos:line="8" pos:column="15">=<pos:position pos:line="8" pos:column="16"/></operator> <call><name pos:line="8" pos:column="17">Breadcrumb<pos:position pos:line="8" pos:column="27"/></name><argument_list pos:line="8" pos:column="27">(<argument><expr><name pos:line="8" pos:column="28">current<pos:position pos:line="8" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="37">pos<pos:position pos:line="8" pos:column="40"/></name></expr></argument>)<pos:position pos:line="8" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name pos:line="9" pos:column="5">asyncLoopDepth_<pos:position pos:line="9" pos:column="20"/></name> <operator pos:line="9" pos:column="21">=<pos:position pos:line="9" pos:column="22"/></operator> <literal type="number" pos:line="9" pos:column="23">0<pos:position pos:line="9" pos:column="24"/></literal></expr>;<pos:position pos:line="9" pos:column="25"/></expr_stmt>

    <comment type="line" pos:line="11" pos:column="5">// if there are any breadcrumbs left, then follow them on the way down</comment>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">bool<pos:position pos:line="12" pos:column="9"/></name></type> <name pos:line="12" pos:column="10">result<pos:position pos:line="12" pos:column="16"/></name> <init pos:line="12" pos:column="17">= <expr><literal type="boolean" pos:line="12" pos:column="19">false<pos:position pos:line="12" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="25"/></decl_stmt>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><call><name><name pos:line="13" pos:column="9">matchPath<pos:position pos:line="13" pos:column="18"/></name><operator pos:line="13" pos:column="18">.<pos:position pos:line="13" pos:column="19"/></operator><name pos:line="13" pos:column="19">empty<pos:position pos:line="13" pos:column="24"/></name></name><argument_list pos:line="13" pos:column="24">()<pos:position pos:line="13" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="27"/></condition><then pos:line="13" pos:column="27"> <block pos:line="13" pos:column="28">{
        <expr_stmt><expr><name pos:line="14" pos:column="9">result<pos:position pos:line="14" pos:column="15"/></name> <operator pos:line="14" pos:column="16">=<pos:position pos:line="14" pos:column="17"/></operator> <call><name><name pos:line="14" pos:column="18">child<pos:position pos:line="14" pos:column="23"/></name><operator pos:line="14" pos:column="23">-&gt;<pos:position pos:line="14" pos:column="28"/></operator><name pos:line="14" pos:column="25">matches<pos:position pos:line="14" pos:column="32"/></name></name><argument_list pos:line="14" pos:column="32">(<argument><expr><name pos:line="14" pos:column="33">this<pos:position pos:line="14" pos:column="37"/></name></expr></argument>)<pos:position pos:line="14" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></then> <else pos:line="15" pos:column="7">else <block pos:line="15" pos:column="12">{
        <decl_stmt><decl><type><specifier pos:line="16" pos:column="9">const<pos:position pos:line="16" pos:column="14"/></specifier> <name pos:line="16" pos:column="15">Breadcrumb<pos:position pos:line="16" pos:column="25"/></name></type> <name pos:line="16" pos:column="26">top<pos:position pos:line="16" pos:column="29"/></name><argument_list pos:line="16" pos:column="29">(<argument><expr><call><name><name pos:line="16" pos:column="30">matchPath<pos:position pos:line="16" pos:column="39"/></name><operator pos:line="16" pos:column="39">.<pos:position pos:line="16" pos:column="40"/></operator><name pos:line="16" pos:column="40">top<pos:position pos:line="16" pos:column="43"/></name></name><argument_list pos:line="16" pos:column="43">()<pos:position pos:line="16" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="46"/></argument_list></decl>;<pos:position pos:line="16" pos:column="47"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">assert<pos:position pos:line="17" pos:column="15"/></name><argument_list pos:line="17" pos:column="15">(<argument><expr><name pos:line="17" pos:column="16">child<pos:position pos:line="17" pos:column="21"/></name> <operator pos:line="17" pos:column="22">==<pos:position pos:line="17" pos:column="24"/></operator> <name><name pos:line="17" pos:column="25">top<pos:position pos:line="17" pos:column="28"/></name><operator pos:line="17" pos:column="28">.<pos:position pos:line="17" pos:column="29"/></operator><name pos:line="17" pos:column="29">parent<pos:position pos:line="17" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="18" pos:column="9">matchPath<pos:position pos:line="18" pos:column="18"/></name><operator pos:line="18" pos:column="18">.<pos:position pos:line="18" pos:column="19"/></operator><name pos:line="18" pos:column="19">pop<pos:position pos:line="18" pos:column="22"/></name></name><argument_list pos:line="18" pos:column="22">()<pos:position pos:line="18" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><name pos:line="19" pos:column="9">result<pos:position pos:line="19" pos:column="15"/></name> <operator pos:line="19" pos:column="16">=<pos:position pos:line="19" pos:column="17"/></operator> <call><name><name pos:line="19" pos:column="18">top<pos:position pos:line="19" pos:column="21"/></name><operator pos:line="19" pos:column="21">.<pos:position pos:line="19" pos:column="22"/></operator><name pos:line="19" pos:column="22">parent<pos:position pos:line="19" pos:column="28"/></name><operator pos:line="19" pos:column="28">-&gt;<pos:position pos:line="19" pos:column="33"/></operator><name pos:line="19" pos:column="30">resumeMatchingAt<pos:position pos:line="19" pos:column="46"/></name></name><argument_list pos:line="19" pos:column="46">(<argument><expr><name pos:line="19" pos:column="47">this<pos:position pos:line="19" pos:column="51"/></name></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="53">top<pos:position pos:line="19" pos:column="56"/></name><operator pos:line="19" pos:column="56">.<pos:position pos:line="19" pos:column="57"/></operator><name pos:line="19" pos:column="57">position<pos:position pos:line="19" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="67"/></expr_stmt>
    }<pos:position pos:line="20" pos:column="6"/></block></else></if>

    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><call><name pos:line="22" pos:column="9">asyncInProgress<pos:position pos:line="22" pos:column="24"/></name><argument_list pos:line="22" pos:column="24">()<pos:position pos:line="22" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="27"/></condition><then pos:line="22" pos:column="27"> <block pos:line="22" pos:column="28">{
        <comment type="line" pos:line="23" pos:column="9">// We get here for node N that called goAsync() and then, as the call</comment>
        <comment type="line" pos:line="24" pos:column="9">// stack unwinds, for the nodes higher in the ACL tree that led to N.</comment>
        <expr_stmt><expr><call><name><name pos:line="25" pos:column="9">matchPath<pos:position pos:line="25" pos:column="18"/></name><operator pos:line="25" pos:column="18">.<pos:position pos:line="25" pos:column="19"/></operator><name pos:line="25" pos:column="19">push<pos:position pos:line="25" pos:column="23"/></name></name><argument_list pos:line="25" pos:column="23">(<argument><expr><call><name pos:line="25" pos:column="24">Breadcrumb<pos:position pos:line="25" pos:column="34"/></name><argument_list pos:line="25" pos:column="34">(<argument><expr><name pos:line="25" pos:column="35">current<pos:position pos:line="25" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="44">pos<pos:position pos:line="25" pos:column="47"/></name></expr></argument>)<pos:position pos:line="25" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="50"/></expr_stmt>
    }<pos:position pos:line="26" pos:column="6"/></block></then> <else pos:line="26" pos:column="7">else <block pos:line="26" pos:column="12">{
        <expr_stmt><expr><call><name><name pos:line="27" pos:column="9">asyncLoc_<pos:position pos:line="27" pos:column="18"/></name><operator pos:line="27" pos:column="18">.<pos:position pos:line="27" pos:column="19"/></operator><name pos:line="27" pos:column="19">clear<pos:position pos:line="27" pos:column="24"/></name></name><argument_list pos:line="27" pos:column="24">()<pos:position pos:line="27" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="28" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name><name pos:line="30" pos:column="5">matchLoc_<pos:position pos:line="30" pos:column="14"/></name><operator pos:line="30" pos:column="14">.<pos:position pos:line="30" pos:column="15"/></operator><name pos:line="30" pos:column="15">clear<pos:position pos:line="30" pos:column="20"/></name></name><argument_list pos:line="30" pos:column="20">()<pos:position pos:line="30" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="23"/></expr_stmt>
    <return pos:line="31" pos:column="5">return <expr><name pos:line="31" pos:column="12">result<pos:position pos:line="31" pos:column="18"/></name></expr>;<pos:position pos:line="31" pos:column="19"/></return>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
