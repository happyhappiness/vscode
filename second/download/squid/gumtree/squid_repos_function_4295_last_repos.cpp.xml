<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4295_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">SBufList<pos:position pos:line="1" pos:column="9"/></name></type>
<name><name pos:line="2" pos:column="1">ACLProtocolData<pos:position pos:line="2" pos:column="16"/></name><operator pos:line="2" pos:column="16">::<pos:position pos:line="2" pos:column="18"/></operator><name pos:line="2" pos:column="18">dump<pos:position pos:line="2" pos:column="22"/></name></name><parameter_list pos:line="2" pos:column="22">()<pos:position pos:line="2" pos:column="24"/></parameter_list> <specifier pos:line="2" pos:column="25">const<pos:position pos:line="2" pos:column="30"/></specifier>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">SBufList<pos:position pos:line="4" pos:column="13"/></name></type> <name pos:line="4" pos:column="14">sl<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>
    <for pos:line="5" pos:column="5">for <control pos:line="5" pos:column="9">(<init><decl><type><name><name pos:line="5" pos:column="10">std<pos:position pos:line="5" pos:column="13"/></name><operator pos:line="5" pos:column="13">::<pos:position pos:line="5" pos:column="15"/></operator><name><name pos:line="5" pos:column="15">list<pos:position pos:line="5" pos:column="19"/></name><argument_list type="generic" pos:line="5" pos:column="19">&lt;<argument><expr><name><name pos:line="5" pos:column="20">AnyP<pos:position pos:line="5" pos:column="24"/></name><operator pos:line="5" pos:column="24">::<pos:position pos:line="5" pos:column="26"/></operator><name pos:line="5" pos:column="26">ProtocolType<pos:position pos:line="5" pos:column="38"/></name></name></expr></argument>&gt;<pos:position pos:line="5" pos:column="42"/></argument_list></name><operator pos:line="5" pos:column="39">::<pos:position pos:line="5" pos:column="41"/></operator><name pos:line="5" pos:column="41">const_iterator<pos:position pos:line="5" pos:column="55"/></name></name></type> <name pos:line="5" pos:column="56">itr<pos:position pos:line="5" pos:column="59"/></name> <init pos:line="5" pos:column="60">= <expr><call><name><name pos:line="5" pos:column="62">values<pos:position pos:line="5" pos:column="68"/></name><operator pos:line="5" pos:column="68">.<pos:position pos:line="5" pos:column="69"/></operator><name pos:line="5" pos:column="69">begin<pos:position pos:line="5" pos:column="74"/></name></name><argument_list pos:line="5" pos:column="74">()<pos:position pos:line="5" pos:column="76"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="77"/></init> <condition><expr><name pos:line="5" pos:column="78">itr<pos:position pos:line="5" pos:column="81"/></name> <operator pos:line="5" pos:column="82">!=<pos:position pos:line="5" pos:column="84"/></operator> <call><name><name pos:line="5" pos:column="85">values<pos:position pos:line="5" pos:column="91"/></name><operator pos:line="5" pos:column="91">.<pos:position pos:line="5" pos:column="92"/></operator><name pos:line="5" pos:column="92">end<pos:position pos:line="5" pos:column="95"/></name></name><argument_list pos:line="5" pos:column="95">()<pos:position pos:line="5" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="98"/></condition> <incr><expr><operator pos:line="5" pos:column="99">++<pos:position pos:line="5" pos:column="101"/></operator><name pos:line="5" pos:column="101">itr<pos:position pos:line="5" pos:column="104"/></name></expr></incr>)<pos:position pos:line="5" pos:column="105"/></control> <block pos:line="5" pos:column="106">{
        <expr_stmt><expr><call><name><name pos:line="6" pos:column="9">sl<pos:position pos:line="6" pos:column="11"/></name><operator pos:line="6" pos:column="11">.<pos:position pos:line="6" pos:column="12"/></operator><name pos:line="6" pos:column="12">push_back<pos:position pos:line="6" pos:column="21"/></name></name><argument_list pos:line="6" pos:column="21">(<argument><expr><call><name pos:line="6" pos:column="22">SBuf<pos:position pos:line="6" pos:column="26"/></name><argument_list pos:line="6" pos:column="26">(<argument><expr><name><name pos:line="6" pos:column="27">AnyP<pos:position pos:line="6" pos:column="31"/></name><operator pos:line="6" pos:column="31">::<pos:position pos:line="6" pos:column="33"/></operator><name pos:line="6" pos:column="33">ProtocolType_str<pos:position pos:line="6" pos:column="49"/></name><index pos:line="6" pos:column="49">[<expr><operator pos:line="6" pos:column="50">*<pos:position pos:line="6" pos:column="51"/></operator><name pos:line="6" pos:column="51">itr<pos:position pos:line="6" pos:column="54"/></name></expr>]<pos:position pos:line="6" pos:column="55"/></index></name></expr></argument>)<pos:position pos:line="6" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="58"/></expr_stmt>
    }<pos:position pos:line="7" pos:column="6"/></block></for>

    <return pos:line="9" pos:column="5">return <expr><name pos:line="9" pos:column="12">sl<pos:position pos:line="9" pos:column="14"/></name></expr>;<pos:position pos:line="9" pos:column="15"/></return>
}<pos:position pos:line="10" pos:column="2"/></block></function></unit>
