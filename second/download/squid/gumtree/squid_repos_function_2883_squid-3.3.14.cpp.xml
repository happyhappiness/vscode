<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2883_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">ChunkedCodingParser<pos:position pos:line="1" pos:column="25"/></name><operator pos:line="1" pos:column="25">::<pos:position pos:line="1" pos:column="27"/></operator><name pos:line="1" pos:column="27">findCrlf<pos:position pos:line="1" pos:column="35"/></name></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name pos:line="1" pos:column="36">size_t<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">&amp;<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="44">crlfBeg<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">size_t<pos:position pos:line="1" pos:column="59"/></name> <modifier pos:line="1" pos:column="60">&amp;<pos:position pos:line="1" pos:column="65"/></modifier></type><name pos:line="1" pos:column="61">crlfEnd<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="70">bool<pos:position pos:line="1" pos:column="74"/></name> <modifier pos:line="1" pos:column="75">&amp;<pos:position pos:line="1" pos:column="80"/></modifier></type><name pos:line="1" pos:column="76">quoted<pos:position pos:line="1" pos:column="82"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="84">bool<pos:position pos:line="1" pos:column="88"/></name> <modifier pos:line="1" pos:column="89">&amp;<pos:position pos:line="1" pos:column="94"/></modifier></type><name pos:line="1" pos:column="90">slashed<pos:position pos:line="1" pos:column="97"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="98"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <comment type="line" pos:line="3" pos:column="5">// XXX: This code was copied, with permission, from another software.</comment>
    <comment type="line" pos:line="4" pos:column="5">// There is a similar and probably better code inside httpHeaderParse</comment>
    <comment type="line" pos:line="5" pos:column="5">// but it seems difficult to isolate due to parsing-unrelated bloat.</comment>
    <comment type="line" pos:line="6" pos:column="5">// Such isolation should probably be done before this class is used</comment>
    <comment type="line" pos:line="7" pos:column="5">// for handling of traffic "more external" than ICAP.</comment>

    <decl_stmt><decl><type><specifier pos:line="9" pos:column="5">const<pos:position pos:line="9" pos:column="10"/></specifier> <name pos:line="9" pos:column="11">char<pos:position pos:line="9" pos:column="15"/></name> <modifier pos:line="9" pos:column="16">*<pos:position pos:line="9" pos:column="17"/></modifier></type><name pos:line="9" pos:column="17">buf<pos:position pos:line="9" pos:column="20"/></name> <init pos:line="9" pos:column="21">= <expr><call><name><name pos:line="9" pos:column="23">theIn<pos:position pos:line="9" pos:column="28"/></name><operator pos:line="9" pos:column="28">-&gt;<pos:position pos:line="9" pos:column="33"/></operator><name pos:line="9" pos:column="30">content<pos:position pos:line="9" pos:column="37"/></name></name><argument_list pos:line="9" pos:column="37">()<pos:position pos:line="9" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="40"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">size_t<pos:position pos:line="10" pos:column="11"/></name></type> <name pos:line="10" pos:column="12">size<pos:position pos:line="10" pos:column="16"/></name> <init pos:line="10" pos:column="17">= <expr><call><name><name pos:line="10" pos:column="19">theIn<pos:position pos:line="10" pos:column="24"/></name><operator pos:line="10" pos:column="24">-&gt;<pos:position pos:line="10" pos:column="29"/></operator><name pos:line="10" pos:column="26">contentSize<pos:position pos:line="10" pos:column="37"/></name></name><argument_list pos:line="10" pos:column="37">()<pos:position pos:line="10" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="40"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="12" pos:column="5">ssize_t<pos:position pos:line="12" pos:column="12"/></name></type> <name pos:line="12" pos:column="13">crOff<pos:position pos:line="12" pos:column="18"/></name> <init pos:line="12" pos:column="19">= <expr><operator pos:line="12" pos:column="21">-<pos:position pos:line="12" pos:column="22"/></operator><literal type="number" pos:line="12" pos:column="22">1<pos:position pos:line="12" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="24"/></decl_stmt>

    <for pos:line="14" pos:column="5">for <control pos:line="14" pos:column="9">(<init><decl><type><name pos:line="14" pos:column="10">size_t<pos:position pos:line="14" pos:column="16"/></name></type> <name pos:line="14" pos:column="17">i<pos:position pos:line="14" pos:column="18"/></name> <init pos:line="14" pos:column="19">= <expr><literal type="number" pos:line="14" pos:column="21">0<pos:position pos:line="14" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="23"/></init> <condition><expr><name pos:line="14" pos:column="24">i<pos:position pos:line="14" pos:column="25"/></name> <operator pos:line="14" pos:column="26">&lt;<pos:position pos:line="14" pos:column="30"/></operator> <name pos:line="14" pos:column="28">size<pos:position pos:line="14" pos:column="32"/></name></expr>;<pos:position pos:line="14" pos:column="33"/></condition> <incr><expr><operator pos:line="14" pos:column="34">++<pos:position pos:line="14" pos:column="36"/></operator><name pos:line="14" pos:column="36">i<pos:position pos:line="14" pos:column="37"/></name></expr></incr>)<pos:position pos:line="14" pos:column="38"/></control> <block pos:line="14" pos:column="39">{
        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">slashed<pos:position pos:line="15" pos:column="20"/></name></expr>)<pos:position pos:line="15" pos:column="21"/></condition><then pos:line="15" pos:column="21"> <block pos:line="15" pos:column="22">{
            <expr_stmt><expr><name pos:line="16" pos:column="13">slashed<pos:position pos:line="16" pos:column="20"/></name> <operator pos:line="16" pos:column="21">=<pos:position pos:line="16" pos:column="22"/></operator> <literal type="boolean" pos:line="16" pos:column="23">false<pos:position pos:line="16" pos:column="28"/></literal></expr>;<pos:position pos:line="16" pos:column="29"/></expr_stmt>
            <continue pos:line="17" pos:column="13">continue;<pos:position pos:line="17" pos:column="22"/></continue>
        }<pos:position pos:line="18" pos:column="10"/></block></then></if>

        <decl_stmt><decl><type><specifier pos:line="20" pos:column="9">const<pos:position pos:line="20" pos:column="14"/></specifier> <name pos:line="20" pos:column="15">char<pos:position pos:line="20" pos:column="19"/></name></type> <name pos:line="20" pos:column="20">c<pos:position pos:line="20" pos:column="21"/></name> <init pos:line="20" pos:column="22">= <expr><name><name pos:line="20" pos:column="24">buf<pos:position pos:line="20" pos:column="27"/></name><index pos:line="20" pos:column="27">[<expr><name pos:line="20" pos:column="28">i<pos:position pos:line="20" pos:column="29"/></name></expr>]<pos:position pos:line="20" pos:column="30"/></index></name></expr></init></decl>;<pos:position pos:line="20" pos:column="31"/></decl_stmt>

        <comment type="line" pos:line="22" pos:column="9">// handle quoted strings</comment>
        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">quoted<pos:position pos:line="23" pos:column="19"/></name></expr>)<pos:position pos:line="23" pos:column="20"/></condition><then pos:line="23" pos:column="20"> <block pos:line="23" pos:column="21">{
            <if pos:line="24" pos:column="13">if <condition pos:line="24" pos:column="16">(<expr><name pos:line="24" pos:column="17">c<pos:position pos:line="24" pos:column="18"/></name> <operator pos:line="24" pos:column="19">==<pos:position pos:line="24" pos:column="21"/></operator> <literal type="char" pos:line="24" pos:column="22">'\\'<pos:position pos:line="24" pos:column="26"/></literal></expr>)<pos:position pos:line="24" pos:column="27"/></condition><then pos:line="24" pos:column="27">
                <block type="pseudo"><expr_stmt><expr><name pos:line="25" pos:column="17">slashed<pos:position pos:line="25" pos:column="24"/></name> <operator pos:line="25" pos:column="25">=<pos:position pos:line="25" pos:column="26"/></operator> <literal type="boolean" pos:line="25" pos:column="27">true<pos:position pos:line="25" pos:column="31"/></literal></expr>;<pos:position pos:line="25" pos:column="32"/></expr_stmt></block></then>
            <elseif pos:line="26" pos:column="13">else <if pos:line="26" pos:column="18">if <condition pos:line="26" pos:column="21">(<expr><name pos:line="26" pos:column="22">c<pos:position pos:line="26" pos:column="23"/></name> <operator pos:line="26" pos:column="24">==<pos:position pos:line="26" pos:column="26"/></operator> <literal type="char" pos:line="26" pos:column="27">'"'<pos:position pos:line="26" pos:column="30"/></literal></expr>)<pos:position pos:line="26" pos:column="31"/></condition><then pos:line="26" pos:column="31">
                <block type="pseudo"><expr_stmt><expr><name pos:line="27" pos:column="17">quoted<pos:position pos:line="27" pos:column="23"/></name> <operator pos:line="27" pos:column="24">=<pos:position pos:line="27" pos:column="25"/></operator> <literal type="boolean" pos:line="27" pos:column="26">false<pos:position pos:line="27" pos:column="31"/></literal></expr>;<pos:position pos:line="27" pos:column="32"/></expr_stmt></block></then></if></elseif></if>

            <continue pos:line="29" pos:column="13">continue;<pos:position pos:line="29" pos:column="22"/></continue>
        }<pos:position pos:line="30" pos:column="10"/></block></then> <elseif pos:line="30" pos:column="11">else <if pos:line="30" pos:column="16">if <condition pos:line="30" pos:column="19">(<expr><name pos:line="30" pos:column="20">c<pos:position pos:line="30" pos:column="21"/></name> <operator pos:line="30" pos:column="22">==<pos:position pos:line="30" pos:column="24"/></operator> <literal type="char" pos:line="30" pos:column="25">'"'<pos:position pos:line="30" pos:column="28"/></literal></expr>)<pos:position pos:line="30" pos:column="29"/></condition><then pos:line="30" pos:column="29"> <block pos:line="30" pos:column="30">{
            <expr_stmt><expr><name pos:line="31" pos:column="13">quoted<pos:position pos:line="31" pos:column="19"/></name> <operator pos:line="31" pos:column="20">=<pos:position pos:line="31" pos:column="21"/></operator> <literal type="boolean" pos:line="31" pos:column="22">true<pos:position pos:line="31" pos:column="26"/></literal></expr>;<pos:position pos:line="31" pos:column="27"/></expr_stmt>
            <expr_stmt><expr><name pos:line="32" pos:column="13">crOff<pos:position pos:line="32" pos:column="18"/></name> <operator pos:line="32" pos:column="19">=<pos:position pos:line="32" pos:column="20"/></operator> <operator pos:line="32" pos:column="21">-<pos:position pos:line="32" pos:column="22"/></operator><literal type="number" pos:line="32" pos:column="22">1<pos:position pos:line="32" pos:column="23"/></literal></expr>;<pos:position pos:line="32" pos:column="24"/></expr_stmt>
            <continue pos:line="33" pos:column="13">continue;<pos:position pos:line="33" pos:column="22"/></continue>
        }<pos:position pos:line="34" pos:column="10"/></block></then></if></elseif></if>

        <if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><name pos:line="36" pos:column="13">crOff<pos:position pos:line="36" pos:column="18"/></name> <operator pos:line="36" pos:column="19">&lt;<pos:position pos:line="36" pos:column="23"/></operator> <literal type="number" pos:line="36" pos:column="21">0<pos:position pos:line="36" pos:column="22"/></literal></expr>)<pos:position pos:line="36" pos:column="23"/></condition><then pos:line="36" pos:column="23"> <block pos:line="36" pos:column="24">{ <comment type="line" pos:line="36" pos:column="26">// looking for the first CR or LF</comment>

            <if pos:line="38" pos:column="13">if <condition pos:line="38" pos:column="16">(<expr><name pos:line="38" pos:column="17">c<pos:position pos:line="38" pos:column="18"/></name> <operator pos:line="38" pos:column="19">==<pos:position pos:line="38" pos:column="21"/></operator> <literal type="char" pos:line="38" pos:column="22">'\n'<pos:position pos:line="38" pos:column="26"/></literal></expr>)<pos:position pos:line="38" pos:column="27"/></condition><then pos:line="38" pos:column="27"> <block pos:line="38" pos:column="28">{
                <expr_stmt><expr><name pos:line="39" pos:column="17">crlfBeg<pos:position pos:line="39" pos:column="24"/></name> <operator pos:line="39" pos:column="25">=<pos:position pos:line="39" pos:column="26"/></operator> <name pos:line="39" pos:column="27">i<pos:position pos:line="39" pos:column="28"/></name></expr>;<pos:position pos:line="39" pos:column="29"/></expr_stmt>
                <expr_stmt><expr><name pos:line="40" pos:column="17">crlfEnd<pos:position pos:line="40" pos:column="24"/></name> <operator pos:line="40" pos:column="25">=<pos:position pos:line="40" pos:column="26"/></operator> <operator pos:line="40" pos:column="27">++<pos:position pos:line="40" pos:column="29"/></operator><name pos:line="40" pos:column="29">i<pos:position pos:line="40" pos:column="30"/></name></expr>;<pos:position pos:line="40" pos:column="31"/></expr_stmt>
                <return pos:line="41" pos:column="17">return <expr><literal type="boolean" pos:line="41" pos:column="24">true<pos:position pos:line="41" pos:column="28"/></literal></expr>;<pos:position pos:line="41" pos:column="29"/></return>
            }<pos:position pos:line="42" pos:column="14"/></block></then></if>

            <if pos:line="44" pos:column="13">if <condition pos:line="44" pos:column="16">(<expr><name pos:line="44" pos:column="17">c<pos:position pos:line="44" pos:column="18"/></name> <operator pos:line="44" pos:column="19">==<pos:position pos:line="44" pos:column="21"/></operator> <literal type="char" pos:line="44" pos:column="22">'\r'<pos:position pos:line="44" pos:column="26"/></literal></expr>)<pos:position pos:line="44" pos:column="27"/></condition><then pos:line="44" pos:column="27">
                <block type="pseudo"><expr_stmt><expr><name pos:line="45" pos:column="17">crOff<pos:position pos:line="45" pos:column="22"/></name> <operator pos:line="45" pos:column="23">=<pos:position pos:line="45" pos:column="24"/></operator> <name pos:line="45" pos:column="25">i<pos:position pos:line="45" pos:column="26"/></name></expr>;<pos:position pos:line="45" pos:column="27"/></expr_stmt></block></then></if>
        }<pos:position pos:line="46" pos:column="10"/></block></then> <else pos:line="46" pos:column="11">else <block pos:line="46" pos:column="16">{ <comment type="line" pos:line="46" pos:column="18">// skipping CRs, looking for the first LF</comment>

            <if pos:line="48" pos:column="13">if <condition pos:line="48" pos:column="16">(<expr><name pos:line="48" pos:column="17">c<pos:position pos:line="48" pos:column="18"/></name> <operator pos:line="48" pos:column="19">==<pos:position pos:line="48" pos:column="21"/></operator> <literal type="char" pos:line="48" pos:column="22">'\n'<pos:position pos:line="48" pos:column="26"/></literal></expr>)<pos:position pos:line="48" pos:column="27"/></condition><then pos:line="48" pos:column="27"> <block pos:line="48" pos:column="28">{
                <expr_stmt><expr><name pos:line="49" pos:column="17">crlfBeg<pos:position pos:line="49" pos:column="24"/></name> <operator pos:line="49" pos:column="25">=<pos:position pos:line="49" pos:column="26"/></operator> <name pos:line="49" pos:column="27">crOff<pos:position pos:line="49" pos:column="32"/></name></expr>;<pos:position pos:line="49" pos:column="33"/></expr_stmt>
                <expr_stmt><expr><name pos:line="50" pos:column="17">crlfEnd<pos:position pos:line="50" pos:column="24"/></name> <operator pos:line="50" pos:column="25">=<pos:position pos:line="50" pos:column="26"/></operator> <operator pos:line="50" pos:column="27">++<pos:position pos:line="50" pos:column="29"/></operator><name pos:line="50" pos:column="29">i<pos:position pos:line="50" pos:column="30"/></name></expr>;<pos:position pos:line="50" pos:column="31"/></expr_stmt>
                <return pos:line="51" pos:column="17">return <expr><literal type="boolean" pos:line="51" pos:column="24">true<pos:position pos:line="51" pos:column="28"/></literal></expr>;<pos:position pos:line="51" pos:column="29"/></return>
            }<pos:position pos:line="52" pos:column="14"/></block></then></if>

            <if pos:line="54" pos:column="13">if <condition pos:line="54" pos:column="16">(<expr><name pos:line="54" pos:column="17">c<pos:position pos:line="54" pos:column="18"/></name> <operator pos:line="54" pos:column="19">!=<pos:position pos:line="54" pos:column="21"/></operator> <literal type="char" pos:line="54" pos:column="22">'\r'<pos:position pos:line="54" pos:column="26"/></literal></expr>)<pos:position pos:line="54" pos:column="27"/></condition><then pos:line="54" pos:column="27">
                <block type="pseudo"><expr_stmt><expr><name pos:line="55" pos:column="17">crOff<pos:position pos:line="55" pos:column="22"/></name> <operator pos:line="55" pos:column="23">=<pos:position pos:line="55" pos:column="24"/></operator> <operator pos:line="55" pos:column="25">-<pos:position pos:line="55" pos:column="26"/></operator><literal type="number" pos:line="55" pos:column="26">1<pos:position pos:line="55" pos:column="27"/></literal></expr>;<pos:position pos:line="55" pos:column="28"/></expr_stmt></block></then></if>
        }<pos:position pos:line="56" pos:column="10"/></block></else></if>
    }<pos:position pos:line="57" pos:column="6"/></block></for>

    <return pos:line="59" pos:column="5">return <expr><literal type="boolean" pos:line="59" pos:column="12">false<pos:position pos:line="59" pos:column="17"/></literal></expr>;<pos:position pos:line="59" pos:column="18"/></return>
}<pos:position pos:line="60" pos:column="2"/></block></function></unit>
