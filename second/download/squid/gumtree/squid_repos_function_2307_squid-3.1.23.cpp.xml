<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2307_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">accessLogParseLogFormat<pos:position pos:line="2" pos:column="24"/></name><parameter_list pos:line="2" pos:column="24">(<parameter><decl><type><name pos:line="2" pos:column="25">logformat_token<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier><modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type> <name pos:line="2" pos:column="44">fmt<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="49">char<pos:position pos:line="2" pos:column="53"/></name> <modifier pos:line="2" pos:column="54">*<pos:position pos:line="2" pos:column="55"/></modifier></type><name pos:line="2" pos:column="55">def<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="59"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">cur<pos:position pos:line="4" pos:column="14"/></name></decl>, <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="17">eos<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">logformat_token<pos:position pos:line="5" pos:column="20"/></name> <modifier pos:line="5" pos:column="21">*<pos:position pos:line="5" pos:column="22"/></modifier></type><name pos:line="5" pos:column="22">new_lt<pos:position pos:line="5" pos:column="28"/></name></decl>, <modifier pos:line="5" pos:column="30">*<pos:position pos:line="5" pos:column="31"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="31">last_lt<pos:position pos:line="5" pos:column="38"/></name></decl>;<pos:position pos:line="5" pos:column="39"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">enum<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">log_quote<pos:position pos:line="6" pos:column="19"/></name></name></type> <name pos:line="6" pos:column="20">quote<pos:position pos:line="6" pos:column="25"/></name> <init pos:line="6" pos:column="26">= <expr><name pos:line="6" pos:column="28">LOG_QUOTE_NONE<pos:position pos:line="6" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="43"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="8" pos:column="5">debugs<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><literal type="number" pos:line="8" pos:column="12">46<pos:position pos:line="8" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="16">2<pos:position pos:line="8" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="19">"accessLogParseLogFormat: got definition '"<pos:position pos:line="8" pos:column="62"/></literal> <operator pos:line="8" pos:column="63">&lt;&lt;<pos:position pos:line="8" pos:column="71"/></operator> <name pos:line="8" pos:column="66">def<pos:position pos:line="8" pos:column="69"/></name> <operator pos:line="8" pos:column="70">&lt;&lt;<pos:position pos:line="8" pos:column="78"/></operator> <literal type="string" pos:line="8" pos:column="73">"'"<pos:position pos:line="8" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="78"/></expr_stmt>

    <comment type="block" pos:line="10" pos:column="5">/* very inefficent parser, but who cares, this needs to be simple */</comment>
    <comment type="block" pos:line="11" pos:column="5">/* First off, let's tokenize, we'll optimize in a second pass.
     * A token can either be a %-prefixed sequence (usually a dynamic
     * token but it can be an escaped sequence), or a string. */</comment>
    <expr_stmt><expr><name pos:line="14" pos:column="5">cur<pos:position pos:line="14" pos:column="8"/></name> <operator pos:line="14" pos:column="9">=<pos:position pos:line="14" pos:column="10"/></operator> <name pos:line="14" pos:column="11">def<pos:position pos:line="14" pos:column="14"/></name></expr>;<pos:position pos:line="14" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><name pos:line="15" pos:column="5">eos<pos:position pos:line="15" pos:column="8"/></name> <operator pos:line="15" pos:column="9">=<pos:position pos:line="15" pos:column="10"/></operator> <name pos:line="15" pos:column="11">def<pos:position pos:line="15" pos:column="14"/></name> <operator pos:line="15" pos:column="15">+<pos:position pos:line="15" pos:column="16"/></operator> <call><name pos:line="15" pos:column="17">strlen<pos:position pos:line="15" pos:column="23"/></name><argument_list pos:line="15" pos:column="23">(<argument><expr><name pos:line="15" pos:column="24">def<pos:position pos:line="15" pos:column="27"/></name></expr></argument>)<pos:position pos:line="15" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="16" pos:column="5">*<pos:position pos:line="16" pos:column="6"/></operator><name pos:line="16" pos:column="6">fmt<pos:position pos:line="16" pos:column="9"/></name> <operator pos:line="16" pos:column="10">=<pos:position pos:line="16" pos:column="11"/></operator> <name pos:line="16" pos:column="12">new_lt<pos:position pos:line="16" pos:column="18"/></name> <operator pos:line="16" pos:column="19">=<pos:position pos:line="16" pos:column="20"/></operator> <name pos:line="16" pos:column="21">last_lt<pos:position pos:line="16" pos:column="28"/></name> <operator pos:line="16" pos:column="29">=<pos:position pos:line="16" pos:column="30"/></operator> <operator pos:line="16" pos:column="31">(<pos:position pos:line="16" pos:column="32"/></operator><name pos:line="16" pos:column="32">logformat_token<pos:position pos:line="16" pos:column="47"/></name> <operator pos:line="16" pos:column="48">*<pos:position pos:line="16" pos:column="49"/></operator><operator pos:line="16" pos:column="49">)<pos:position pos:line="16" pos:column="50"/></operator><call><name pos:line="16" pos:column="50">xmalloc<pos:position pos:line="16" pos:column="57"/></name><argument_list pos:line="16" pos:column="57">(<argument><expr><sizeof pos:line="16" pos:column="58">sizeof<argument_list pos:line="16" pos:column="64">(<argument><expr><name pos:line="16" pos:column="65">logformat_token<pos:position pos:line="16" pos:column="80"/></name></expr></argument>)<pos:position pos:line="16" pos:column="81"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="16" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="83"/></expr_stmt>
    <expr_stmt><expr><name pos:line="17" pos:column="5">cur<pos:position pos:line="17" pos:column="8"/></name> <operator pos:line="17" pos:column="9">+=<pos:position pos:line="17" pos:column="11"/></operator> <call><name pos:line="17" pos:column="12">accessLogGetNewLogFormatToken<pos:position pos:line="17" pos:column="41"/></name><argument_list pos:line="17" pos:column="41">(<argument><expr><name pos:line="17" pos:column="42">new_lt<pos:position pos:line="17" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="50">cur<pos:position pos:line="17" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="55">&amp;<pos:position pos:line="17" pos:column="60"/></operator><name pos:line="17" pos:column="56">quote<pos:position pos:line="17" pos:column="61"/></name></expr></argument>)<pos:position pos:line="17" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="63"/></expr_stmt>

    <while pos:line="19" pos:column="5">while <condition pos:line="19" pos:column="11">(<expr><name pos:line="19" pos:column="12">cur<pos:position pos:line="19" pos:column="15"/></name> <operator pos:line="19" pos:column="16">&lt;<pos:position pos:line="19" pos:column="20"/></operator> <name pos:line="19" pos:column="18">eos<pos:position pos:line="19" pos:column="21"/></name></expr>)<pos:position pos:line="19" pos:column="22"/></condition> <block pos:line="19" pos:column="23">{
        <expr_stmt><expr><name pos:line="20" pos:column="9">new_lt<pos:position pos:line="20" pos:column="15"/></name> <operator pos:line="20" pos:column="16">=<pos:position pos:line="20" pos:column="17"/></operator> <operator pos:line="20" pos:column="18">(<pos:position pos:line="20" pos:column="19"/></operator><name pos:line="20" pos:column="19">logformat_token<pos:position pos:line="20" pos:column="34"/></name> <operator pos:line="20" pos:column="35">*<pos:position pos:line="20" pos:column="36"/></operator><operator pos:line="20" pos:column="36">)<pos:position pos:line="20" pos:column="37"/></operator><call><name pos:line="20" pos:column="37">xmalloc<pos:position pos:line="20" pos:column="44"/></name><argument_list pos:line="20" pos:column="44">(<argument><expr><sizeof pos:line="20" pos:column="45">sizeof<argument_list pos:line="20" pos:column="51">(<argument><expr><name pos:line="20" pos:column="52">logformat_token<pos:position pos:line="20" pos:column="67"/></name></expr></argument>)<pos:position pos:line="20" pos:column="68"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="20" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="70"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="21" pos:column="9">last_lt<pos:position pos:line="21" pos:column="16"/></name><operator pos:line="21" pos:column="16">-&gt;<pos:position pos:line="21" pos:column="21"/></operator><name pos:line="21" pos:column="18">next<pos:position pos:line="21" pos:column="22"/></name></name> <operator pos:line="21" pos:column="23">=<pos:position pos:line="21" pos:column="24"/></operator> <name pos:line="21" pos:column="25">new_lt<pos:position pos:line="21" pos:column="31"/></name></expr>;<pos:position pos:line="21" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><name pos:line="22" pos:column="9">last_lt<pos:position pos:line="22" pos:column="16"/></name> <operator pos:line="22" pos:column="17">=<pos:position pos:line="22" pos:column="18"/></operator> <name pos:line="22" pos:column="19">new_lt<pos:position pos:line="22" pos:column="25"/></name></expr>;<pos:position pos:line="22" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><name pos:line="23" pos:column="9">cur<pos:position pos:line="23" pos:column="12"/></name> <operator pos:line="23" pos:column="13">+=<pos:position pos:line="23" pos:column="15"/></operator> <call><name pos:line="23" pos:column="16">accessLogGetNewLogFormatToken<pos:position pos:line="23" pos:column="45"/></name><argument_list pos:line="23" pos:column="45">(<argument><expr><name pos:line="23" pos:column="46">new_lt<pos:position pos:line="23" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="54">cur<pos:position pos:line="23" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="59">&amp;<pos:position pos:line="23" pos:column="64"/></operator><name pos:line="23" pos:column="60">quote<pos:position pos:line="23" pos:column="65"/></name></expr></argument>)<pos:position pos:line="23" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="67"/></expr_stmt>
    }<pos:position pos:line="24" pos:column="6"/></block></while>

    <return pos:line="26" pos:column="5">return <expr><literal type="number" pos:line="26" pos:column="12">1<pos:position pos:line="26" pos:column="13"/></literal></expr>;<pos:position pos:line="26" pos:column="14"/></return>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
