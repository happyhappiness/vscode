<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2179_squid-3.4.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">storeDigestCalcCap<pos:position pos:line="2" pos:column="19"/></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name pos:line="2" pos:column="20">void<pos:position pos:line="2" pos:column="24"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="25"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/*
     * To-Do: Bloom proved that the optimal filter utilization is 50% (half of
     * the bits are off). However, we do not have a formula to calculate the
     * number of _entries_ we want to pre-allocate for.
     */</comment>
    <decl_stmt><decl><type><specifier pos:line="9" pos:column="5">const<pos:position pos:line="9" pos:column="10"/></specifier> <name pos:line="9" pos:column="11">int<pos:position pos:line="9" pos:column="14"/></name></type> <name pos:line="9" pos:column="15">hi_cap<pos:position pos:line="9" pos:column="21"/></name> <init pos:line="9" pos:column="22">= <expr><call><name><name pos:line="9" pos:column="24">Store<pos:position pos:line="9" pos:column="29"/></name><operator pos:line="9" pos:column="29">::<pos:position pos:line="9" pos:column="31"/></operator><name pos:line="9" pos:column="31">Root<pos:position pos:line="9" pos:column="35"/></name></name><argument_list pos:line="9" pos:column="35">()<pos:position pos:line="9" pos:column="37"/></argument_list></call><operator pos:line="9" pos:column="37">.<pos:position pos:line="9" pos:column="38"/></operator><call><name pos:line="9" pos:column="38">maxSize<pos:position pos:line="9" pos:column="45"/></name><argument_list pos:line="9" pos:column="45">()<pos:position pos:line="9" pos:column="47"/></argument_list></call> <operator pos:line="9" pos:column="48">/<pos:position pos:line="9" pos:column="49"/></operator> <name><name pos:line="9" pos:column="50">Config<pos:position pos:line="9" pos:column="56"/></name><operator pos:line="9" pos:column="56">.<pos:position pos:line="9" pos:column="57"/></operator><name pos:line="9" pos:column="57">Store<pos:position pos:line="9" pos:column="62"/></name><operator pos:line="9" pos:column="62">.<pos:position pos:line="9" pos:column="63"/></operator><name pos:line="9" pos:column="63">avgObjectSize<pos:position pos:line="9" pos:column="76"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="77"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="10" pos:column="5">const<pos:position pos:line="10" pos:column="10"/></specifier> <name pos:line="10" pos:column="11">int<pos:position pos:line="10" pos:column="14"/></name></type> <name pos:line="10" pos:column="15">lo_cap<pos:position pos:line="10" pos:column="21"/></name> <init pos:line="10" pos:column="22">= <expr><literal type="number" pos:line="10" pos:column="24">1<pos:position pos:line="10" pos:column="25"/></literal> <operator pos:line="10" pos:column="26">+<pos:position pos:line="10" pos:column="27"/></operator> <call><name><name pos:line="10" pos:column="28">Store<pos:position pos:line="10" pos:column="33"/></name><operator pos:line="10" pos:column="33">::<pos:position pos:line="10" pos:column="35"/></operator><name pos:line="10" pos:column="35">Root<pos:position pos:line="10" pos:column="39"/></name></name><argument_list pos:line="10" pos:column="39">()<pos:position pos:line="10" pos:column="41"/></argument_list></call><operator pos:line="10" pos:column="41">.<pos:position pos:line="10" pos:column="42"/></operator><call><name pos:line="10" pos:column="42">currentSize<pos:position pos:line="10" pos:column="53"/></name><argument_list pos:line="10" pos:column="53">()<pos:position pos:line="10" pos:column="55"/></argument_list></call> <operator pos:line="10" pos:column="56">/<pos:position pos:line="10" pos:column="57"/></operator> <name><name pos:line="10" pos:column="58">Config<pos:position pos:line="10" pos:column="64"/></name><operator pos:line="10" pos:column="64">.<pos:position pos:line="10" pos:column="65"/></operator><name pos:line="10" pos:column="65">Store<pos:position pos:line="10" pos:column="70"/></name><operator pos:line="10" pos:column="70">.<pos:position pos:line="10" pos:column="71"/></operator><name pos:line="10" pos:column="71">avgObjectSize<pos:position pos:line="10" pos:column="84"/></name></name></expr></init></decl>;<pos:position pos:line="10" pos:column="85"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="11" pos:column="5">const<pos:position pos:line="11" pos:column="10"/></specifier> <name pos:line="11" pos:column="11">int<pos:position pos:line="11" pos:column="14"/></name></type> <name pos:line="11" pos:column="15">e_count<pos:position pos:line="11" pos:column="22"/></name> <init pos:line="11" pos:column="23">= <expr><call><name><name pos:line="11" pos:column="25">StoreEntry<pos:position pos:line="11" pos:column="35"/></name><operator pos:line="11" pos:column="35">::<pos:position pos:line="11" pos:column="37"/></operator><name pos:line="11" pos:column="37">inUseCount<pos:position pos:line="11" pos:column="47"/></name></name><argument_list pos:line="11" pos:column="47">()<pos:position pos:line="11" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="50"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">int<pos:position pos:line="12" pos:column="8"/></name></type> <name pos:line="12" pos:column="9">cap<pos:position pos:line="12" pos:column="12"/></name> <init pos:line="12" pos:column="13">= <expr><ternary><condition><expr><name pos:line="12" pos:column="15">e_count<pos:position pos:line="12" pos:column="22"/></name></expr> ?<pos:position pos:line="12" pos:column="24"/></condition><then pos:line="12" pos:column="24"> <expr><name pos:line="12" pos:column="25">e_count<pos:position pos:line="12" pos:column="32"/></name></expr> <pos:position pos:line="12" pos:column="33"/></then><else pos:line="12" pos:column="33">:<expr><name pos:line="12" pos:column="34">hi_cap<pos:position pos:line="12" pos:column="40"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="12" pos:column="41"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">debugs<pos:position pos:line="13" pos:column="11"/></name><argument_list pos:line="13" pos:column="11">(<argument><expr><literal type="number" pos:line="13" pos:column="12">71<pos:position pos:line="13" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="16">2<pos:position pos:line="13" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="19">"storeDigestCalcCap: have: "<pos:position pos:line="13" pos:column="47"/></literal> <operator pos:line="13" pos:column="48">&lt;&lt;<pos:position pos:line="13" pos:column="56"/></operator> <name pos:line="13" pos:column="51">e_count<pos:position pos:line="13" pos:column="58"/></name> <operator pos:line="13" pos:column="59">&lt;&lt;<pos:position pos:line="13" pos:column="67"/></operator> <literal type="string" pos:line="13" pos:column="62">", want "<pos:position pos:line="13" pos:column="71"/></literal> <operator pos:line="13" pos:column="72">&lt;&lt;<pos:position pos:line="13" pos:column="80"/></operator> <name pos:line="13" pos:column="75">cap<pos:position pos:line="13" pos:column="78"/></name> <operator pos:line="13" pos:column="79">&lt;&lt;<pos:position pos:line="13" pos:column="87"/></operator>
           <literal type="string" pos:line="14" pos:column="12">" entries; limits: ["<pos:position pos:line="14" pos:column="33"/></literal> <operator pos:line="14" pos:column="34">&lt;&lt;<pos:position pos:line="14" pos:column="42"/></operator> <name pos:line="14" pos:column="37">lo_cap<pos:position pos:line="14" pos:column="43"/></name> <operator pos:line="14" pos:column="44">&lt;&lt;<pos:position pos:line="14" pos:column="52"/></operator> <literal type="string" pos:line="14" pos:column="47">", "<pos:position pos:line="14" pos:column="51"/></literal> <operator pos:line="14" pos:column="52">&lt;&lt;<pos:position pos:line="14" pos:column="60"/></operator> <name pos:line="14" pos:column="55">hi_cap<pos:position pos:line="14" pos:column="61"/></name> <operator pos:line="14" pos:column="62">&lt;&lt;<pos:position pos:line="14" pos:column="70"/></operator> <literal type="string" pos:line="14" pos:column="65">"]"<pos:position pos:line="14" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="70"/></expr_stmt>

    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name pos:line="16" pos:column="9">cap<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">&lt;<pos:position pos:line="16" pos:column="17"/></operator> <name pos:line="16" pos:column="15">lo_cap<pos:position pos:line="16" pos:column="21"/></name></expr>)<pos:position pos:line="16" pos:column="22"/></condition><then pos:line="16" pos:column="22">
        <block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="9">cap<pos:position pos:line="17" pos:column="12"/></name> <operator pos:line="17" pos:column="13">=<pos:position pos:line="17" pos:column="14"/></operator> <name pos:line="17" pos:column="15">lo_cap<pos:position pos:line="17" pos:column="21"/></name></expr>;<pos:position pos:line="17" pos:column="22"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="19" pos:column="5">/* do not enforce hi_cap limit, average-based estimation may be wrong
     *if (cap &gt; hi_cap)
     *  cap = hi_cap;
     */</comment>
    <return pos:line="23" pos:column="5">return <expr><name pos:line="23" pos:column="12">cap<pos:position pos:line="23" pos:column="15"/></name></expr>;<pos:position pos:line="23" pos:column="16"/></return>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
