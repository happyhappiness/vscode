<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5905_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">netdbBinaryExchange<pos:position pos:line="2" pos:column="20"/></name><parameter_list pos:line="2" pos:column="20">(<parameter><decl><type><name pos:line="2" pos:column="21">StoreEntry<pos:position pos:line="2" pos:column="31"/></name> <modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type> <name pos:line="2" pos:column="34">s<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="36"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">HttpReply<pos:position pos:line="4" pos:column="14"/></name> <modifier pos:line="4" pos:column="15">*<pos:position pos:line="4" pos:column="16"/></modifier></type><name pos:line="4" pos:column="16">reply<pos:position pos:line="4" pos:column="21"/></name> <init pos:line="4" pos:column="22">= <expr><operator pos:line="4" pos:column="24">new<pos:position pos:line="4" pos:column="27"/></operator> <name pos:line="4" pos:column="28">HttpReply<pos:position pos:line="4" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="38"/></decl_stmt>
<cpp:if pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">if<pos:position pos:line="5" pos:column="4"/></cpp:directive> <expr><name pos:line="5" pos:column="5">USE_ICMP<pos:position pos:line="5" pos:column="13"/></name></expr></cpp:if>

    <decl_stmt><decl><type><name><name pos:line="7" pos:column="5">Ip<pos:position pos:line="7" pos:column="7"/></name><operator pos:line="7" pos:column="7">::<pos:position pos:line="7" pos:column="9"/></operator><name pos:line="7" pos:column="9">Address<pos:position pos:line="7" pos:column="16"/></name></name></type> <name pos:line="7" pos:column="17">addr<pos:position pos:line="7" pos:column="21"/></name></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="9" pos:column="5">netdbEntry<pos:position pos:line="9" pos:column="15"/></name> <modifier pos:line="9" pos:column="16">*<pos:position pos:line="9" pos:column="17"/></modifier></type><name pos:line="9" pos:column="17">n<pos:position pos:line="9" pos:column="18"/></name></decl>;<pos:position pos:line="9" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">i<pos:position pos:line="10" pos:column="10"/></name></decl>;<pos:position pos:line="10" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">int<pos:position pos:line="11" pos:column="8"/></name></type> <name pos:line="11" pos:column="9">j<pos:position pos:line="11" pos:column="10"/></name></decl>;<pos:position pos:line="11" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">int<pos:position pos:line="12" pos:column="8"/></name></type> <name pos:line="12" pos:column="9">rec_sz<pos:position pos:line="12" pos:column="15"/></name></decl>;<pos:position pos:line="12" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">char<pos:position pos:line="13" pos:column="9"/></name> <modifier pos:line="13" pos:column="10">*<pos:position pos:line="13" pos:column="11"/></modifier></type><name pos:line="13" pos:column="11">buf<pos:position pos:line="13" pos:column="14"/></name></decl>;<pos:position pos:line="13" pos:column="15"/></decl_stmt>

    <decl_stmt><decl><type><name><name pos:line="15" pos:column="5">struct<pos:position pos:line="15" pos:column="11"/></name> <name pos:line="15" pos:column="12">in_addr<pos:position pos:line="15" pos:column="19"/></name></name></type> <name pos:line="15" pos:column="20">line_addr<pos:position pos:line="15" pos:column="29"/></name></decl>;<pos:position pos:line="15" pos:column="30"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="16" pos:column="5">s<pos:position pos:line="16" pos:column="6"/></name><operator pos:line="16" pos:column="6">-&gt;<pos:position pos:line="16" pos:column="11"/></operator><name pos:line="16" pos:column="8">buffer<pos:position pos:line="16" pos:column="14"/></name></name><argument_list pos:line="16" pos:column="14">()<pos:position pos:line="16" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="17" pos:column="5">reply<pos:position pos:line="17" pos:column="10"/></name><operator pos:line="17" pos:column="10">-&gt;<pos:position pos:line="17" pos:column="15"/></operator><name pos:line="17" pos:column="12">setHeaders<pos:position pos:line="17" pos:column="22"/></name></name><argument_list pos:line="17" pos:column="22">(<argument><expr><name><name pos:line="17" pos:column="23">Http<pos:position pos:line="17" pos:column="27"/></name><operator pos:line="17" pos:column="27">::<pos:position pos:line="17" pos:column="29"/></operator><name pos:line="17" pos:column="29">scOkay<pos:position pos:line="17" pos:column="35"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="37">"OK"<pos:position pos:line="17" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="43">NULL<pos:position pos:line="17" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="49">-<pos:position pos:line="17" pos:column="50"/></operator><literal type="number" pos:line="17" pos:column="50">1<pos:position pos:line="17" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="53">squid_curtime<pos:position pos:line="17" pos:column="66"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="68">-<pos:position pos:line="17" pos:column="69"/></operator><literal type="number" pos:line="17" pos:column="69">2<pos:position pos:line="17" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="72"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="18" pos:column="5">s<pos:position pos:line="18" pos:column="6"/></name><operator pos:line="18" pos:column="6">-&gt;<pos:position pos:line="18" pos:column="11"/></operator><name pos:line="18" pos:column="8">replaceHttpReply<pos:position pos:line="18" pos:column="24"/></name></name><argument_list pos:line="18" pos:column="24">(<argument><expr><name pos:line="18" pos:column="25">reply<pos:position pos:line="18" pos:column="30"/></name></expr></argument>)<pos:position pos:line="18" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name pos:line="19" pos:column="5">rec_sz<pos:position pos:line="19" pos:column="11"/></name> <operator pos:line="19" pos:column="12">=<pos:position pos:line="19" pos:column="13"/></operator> <literal type="number" pos:line="19" pos:column="14">0<pos:position pos:line="19" pos:column="15"/></literal></expr>;<pos:position pos:line="19" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><name pos:line="20" pos:column="5">rec_sz<pos:position pos:line="20" pos:column="11"/></name> <operator pos:line="20" pos:column="12">+=<pos:position pos:line="20" pos:column="14"/></operator> <literal type="number" pos:line="20" pos:column="15">1<pos:position pos:line="20" pos:column="16"/></literal> <operator pos:line="20" pos:column="17">+<pos:position pos:line="20" pos:column="18"/></operator> <sizeof pos:line="20" pos:column="19">sizeof<argument_list pos:line="20" pos:column="25">(<argument><expr pos:line="20" pos:column="26">struct <name pos:line="20" pos:column="33">in_addr<pos:position pos:line="20" pos:column="40"/></name></expr></argument>)<pos:position pos:line="20" pos:column="41"/></argument_list></sizeof></expr>;<pos:position pos:line="20" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name pos:line="21" pos:column="5">rec_sz<pos:position pos:line="21" pos:column="11"/></name> <operator pos:line="21" pos:column="12">+=<pos:position pos:line="21" pos:column="14"/></operator> <literal type="number" pos:line="21" pos:column="15">1<pos:position pos:line="21" pos:column="16"/></literal> <operator pos:line="21" pos:column="17">+<pos:position pos:line="21" pos:column="18"/></operator> <sizeof pos:line="21" pos:column="19">sizeof<argument_list pos:line="21" pos:column="25">(<argument><expr><name pos:line="21" pos:column="26">int<pos:position pos:line="21" pos:column="29"/></name></expr></argument>)<pos:position pos:line="21" pos:column="30"/></argument_list></sizeof></expr>;<pos:position pos:line="21" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name pos:line="22" pos:column="5">rec_sz<pos:position pos:line="22" pos:column="11"/></name> <operator pos:line="22" pos:column="12">+=<pos:position pos:line="22" pos:column="14"/></operator> <literal type="number" pos:line="22" pos:column="15">1<pos:position pos:line="22" pos:column="16"/></literal> <operator pos:line="22" pos:column="17">+<pos:position pos:line="22" pos:column="18"/></operator> <sizeof pos:line="22" pos:column="19">sizeof<argument_list pos:line="22" pos:column="25">(<argument><expr><name pos:line="22" pos:column="26">int<pos:position pos:line="22" pos:column="29"/></name></expr></argument>)<pos:position pos:line="22" pos:column="30"/></argument_list></sizeof></expr>;<pos:position pos:line="22" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name pos:line="23" pos:column="5">buf<pos:position pos:line="23" pos:column="8"/></name> <operator pos:line="23" pos:column="9">=<pos:position pos:line="23" pos:column="10"/></operator> <operator pos:line="23" pos:column="11">(<pos:position pos:line="23" pos:column="12"/></operator><name pos:line="23" pos:column="12">char<pos:position pos:line="23" pos:column="16"/></name> <operator pos:line="23" pos:column="17">*<pos:position pos:line="23" pos:column="18"/></operator><operator pos:line="23" pos:column="18">)<pos:position pos:line="23" pos:column="19"/></operator><call><name pos:line="23" pos:column="19">memAllocate<pos:position pos:line="23" pos:column="30"/></name><argument_list pos:line="23" pos:column="30">(<argument><expr><name pos:line="23" pos:column="31">MEM_4K_BUF<pos:position pos:line="23" pos:column="41"/></name></expr></argument>)<pos:position pos:line="23" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><name pos:line="24" pos:column="5">i<pos:position pos:line="24" pos:column="6"/></name> <operator pos:line="24" pos:column="7">=<pos:position pos:line="24" pos:column="8"/></operator> <literal type="number" pos:line="24" pos:column="9">0<pos:position pos:line="24" pos:column="10"/></literal></expr>;<pos:position pos:line="24" pos:column="11"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">hash_first<pos:position pos:line="25" pos:column="15"/></name><argument_list pos:line="25" pos:column="15">(<argument><expr><name pos:line="25" pos:column="16">addr_table<pos:position pos:line="25" pos:column="26"/></name></expr></argument>)<pos:position pos:line="25" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="28"/></expr_stmt>

    <while pos:line="27" pos:column="5">while <condition pos:line="27" pos:column="11">(<expr><operator pos:line="27" pos:column="12">(<pos:position pos:line="27" pos:column="13"/></operator><name pos:line="27" pos:column="13">n<pos:position pos:line="27" pos:column="14"/></name> <operator pos:line="27" pos:column="15">=<pos:position pos:line="27" pos:column="16"/></operator> <operator pos:line="27" pos:column="17">(<pos:position pos:line="27" pos:column="18"/></operator><name pos:line="27" pos:column="18">netdbEntry<pos:position pos:line="27" pos:column="28"/></name> <operator pos:line="27" pos:column="29">*<pos:position pos:line="27" pos:column="30"/></operator><operator pos:line="27" pos:column="30">)<pos:position pos:line="27" pos:column="31"/></operator> <call><name pos:line="27" pos:column="32">hash_next<pos:position pos:line="27" pos:column="41"/></name><argument_list pos:line="27" pos:column="41">(<argument><expr><name pos:line="27" pos:column="42">addr_table<pos:position pos:line="27" pos:column="52"/></name></expr></argument>)<pos:position pos:line="27" pos:column="53"/></argument_list></call><operator pos:line="27" pos:column="53">)<pos:position pos:line="27" pos:column="54"/></operator></expr>)<pos:position pos:line="27" pos:column="55"/></condition> <block pos:line="27" pos:column="56">{
        <if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><literal type="number" pos:line="28" pos:column="13">0.0<pos:position pos:line="28" pos:column="16"/></literal> <operator pos:line="28" pos:column="17">==<pos:position pos:line="28" pos:column="19"/></operator> <name><name pos:line="28" pos:column="20">n<pos:position pos:line="28" pos:column="21"/></name><operator pos:line="28" pos:column="21">-&gt;<pos:position pos:line="28" pos:column="26"/></operator><name pos:line="28" pos:column="23">rtt<pos:position pos:line="28" pos:column="26"/></name></name></expr>)<pos:position pos:line="28" pos:column="27"/></condition><then pos:line="28" pos:column="27">
            <block type="pseudo"><continue pos:line="29" pos:column="13">continue;<pos:position pos:line="29" pos:column="22"/></continue></block></then></if>

        <if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><name><name pos:line="31" pos:column="13">n<pos:position pos:line="31" pos:column="14"/></name><operator pos:line="31" pos:column="14">-&gt;<pos:position pos:line="31" pos:column="19"/></operator><name pos:line="31" pos:column="16">rtt<pos:position pos:line="31" pos:column="19"/></name></name> <operator pos:line="31" pos:column="20">&gt;<pos:position pos:line="31" pos:column="24"/></operator> <literal type="number" pos:line="31" pos:column="22">60000<pos:position pos:line="31" pos:column="27"/></literal></expr>)<pos:position pos:line="31" pos:column="28"/></condition><then pos:line="31" pos:column="28">	<comment type="block" pos:line="31" pos:column="33">/* RTT &gt; 1 MIN probably bogus */</comment>
            <block type="pseudo"><continue pos:line="32" pos:column="13">continue;<pos:position pos:line="32" pos:column="22"/></continue></block></then></if>

        <if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><operator pos:line="34" pos:column="13">!<pos:position pos:line="34" pos:column="14"/></operator> <operator pos:line="34" pos:column="15">(<pos:position pos:line="34" pos:column="16"/></operator><name pos:line="34" pos:column="16">addr<pos:position pos:line="34" pos:column="20"/></name> <operator pos:line="34" pos:column="21">=<pos:position pos:line="34" pos:column="22"/></operator> <name><name pos:line="34" pos:column="23">n<pos:position pos:line="34" pos:column="24"/></name><operator pos:line="34" pos:column="24">-&gt;<pos:position pos:line="34" pos:column="29"/></operator><name pos:line="34" pos:column="26">network<pos:position pos:line="34" pos:column="33"/></name></name><operator pos:line="34" pos:column="33">)<pos:position pos:line="34" pos:column="34"/></operator></expr> )<pos:position pos:line="34" pos:column="36"/></condition><then pos:line="34" pos:column="36">
            <block type="pseudo"><continue pos:line="35" pos:column="13">continue;<pos:position pos:line="35" pos:column="22"/></continue></block></then></if>

        <comment type="block" pos:line="37" pos:column="9">/* FIXME INET6 : NetDB cannot yet handle IPv6 addresses. Ensure only IPv4 get sent. */</comment>
        <if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">( <expr><operator pos:line="38" pos:column="14">!<pos:position pos:line="38" pos:column="15"/></operator><call><name><name pos:line="38" pos:column="15">addr<pos:position pos:line="38" pos:column="19"/></name><operator pos:line="38" pos:column="19">.<pos:position pos:line="38" pos:column="20"/></operator><name pos:line="38" pos:column="20">isIPv4<pos:position pos:line="38" pos:column="26"/></name></name><argument_list pos:line="38" pos:column="26">()<pos:position pos:line="38" pos:column="28"/></argument_list></call></expr> )<pos:position pos:line="38" pos:column="30"/></condition><then pos:line="38" pos:column="30">
            <block type="pseudo"><continue pos:line="39" pos:column="13">continue;<pos:position pos:line="39" pos:column="22"/></continue></block></then></if>

        <expr_stmt><expr><name><name pos:line="41" pos:column="9">buf<pos:position pos:line="41" pos:column="12"/></name><index pos:line="41" pos:column="12">[<expr><name pos:line="41" pos:column="13">i<pos:position pos:line="41" pos:column="14"/></name></expr>]<pos:position pos:line="41" pos:column="15"/></index></name> <operator pos:line="41" pos:column="16">=<pos:position pos:line="41" pos:column="17"/></operator> <operator pos:line="41" pos:column="18">(<pos:position pos:line="41" pos:column="19"/></operator><name pos:line="41" pos:column="19">char<pos:position pos:line="41" pos:column="23"/></name><operator pos:line="41" pos:column="23">)<pos:position pos:line="41" pos:column="24"/></operator> <name pos:line="41" pos:column="25">NETDB_EX_NETWORK<pos:position pos:line="41" pos:column="41"/></name></expr>;<pos:position pos:line="41" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="42" pos:column="9">++<pos:position pos:line="42" pos:column="11"/></operator><name pos:line="42" pos:column="11">i<pos:position pos:line="42" pos:column="12"/></name></expr>;<pos:position pos:line="42" pos:column="13"/></expr_stmt>

        <expr_stmt><expr><call><name><name pos:line="44" pos:column="9">addr<pos:position pos:line="44" pos:column="13"/></name><operator pos:line="44" pos:column="13">.<pos:position pos:line="44" pos:column="14"/></operator><name pos:line="44" pos:column="14">getInAddr<pos:position pos:line="44" pos:column="23"/></name></name><argument_list pos:line="44" pos:column="23">(<argument><expr><name pos:line="44" pos:column="24">line_addr<pos:position pos:line="44" pos:column="33"/></name></expr></argument>)<pos:position pos:line="44" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="45" pos:column="9">memcpy<pos:position pos:line="45" pos:column="15"/></name><argument_list pos:line="45" pos:column="15">(<argument><expr><operator pos:line="45" pos:column="16">&amp;<pos:position pos:line="45" pos:column="21"/></operator><name><name pos:line="45" pos:column="17">buf<pos:position pos:line="45" pos:column="20"/></name><index pos:line="45" pos:column="20">[<expr><name pos:line="45" pos:column="21">i<pos:position pos:line="45" pos:column="22"/></name></expr>]<pos:position pos:line="45" pos:column="23"/></index></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="25">&amp;<pos:position pos:line="45" pos:column="30"/></operator><name pos:line="45" pos:column="26">line_addr<pos:position pos:line="45" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="45" pos:column="37">sizeof<argument_list pos:line="45" pos:column="43">(<argument><expr pos:line="45" pos:column="44">struct <name pos:line="45" pos:column="51">in_addr<pos:position pos:line="45" pos:column="58"/></name></expr></argument>)<pos:position pos:line="45" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="45" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="61"/></expr_stmt>

        <expr_stmt><expr><name pos:line="47" pos:column="9">i<pos:position pos:line="47" pos:column="10"/></name> <operator pos:line="47" pos:column="11">+=<pos:position pos:line="47" pos:column="13"/></operator> <sizeof pos:line="47" pos:column="14">sizeof<argument_list pos:line="47" pos:column="20">(<argument><expr pos:line="47" pos:column="21">struct <name pos:line="47" pos:column="28">in_addr<pos:position pos:line="47" pos:column="35"/></name></expr></argument>)<pos:position pos:line="47" pos:column="36"/></argument_list></sizeof></expr>;<pos:position pos:line="47" pos:column="37"/></expr_stmt>

        <expr_stmt><expr><name><name pos:line="49" pos:column="9">buf<pos:position pos:line="49" pos:column="12"/></name><index pos:line="49" pos:column="12">[<expr><name pos:line="49" pos:column="13">i<pos:position pos:line="49" pos:column="14"/></name></expr>]<pos:position pos:line="49" pos:column="15"/></index></name> <operator pos:line="49" pos:column="16">=<pos:position pos:line="49" pos:column="17"/></operator> <operator pos:line="49" pos:column="18">(<pos:position pos:line="49" pos:column="19"/></operator><name pos:line="49" pos:column="19">char<pos:position pos:line="49" pos:column="23"/></name><operator pos:line="49" pos:column="23">)<pos:position pos:line="49" pos:column="24"/></operator> <name pos:line="49" pos:column="25">NETDB_EX_RTT<pos:position pos:line="49" pos:column="37"/></name></expr>;<pos:position pos:line="49" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="50" pos:column="9">++<pos:position pos:line="50" pos:column="11"/></operator><name pos:line="50" pos:column="11">i<pos:position pos:line="50" pos:column="12"/></name></expr>;<pos:position pos:line="50" pos:column="13"/></expr_stmt>

        <expr_stmt><expr><name pos:line="52" pos:column="9">j<pos:position pos:line="52" pos:column="10"/></name> <operator pos:line="52" pos:column="11">=<pos:position pos:line="52" pos:column="12"/></operator> <call><name pos:line="52" pos:column="13">htonl<pos:position pos:line="52" pos:column="18"/></name><argument_list pos:line="52" pos:column="18">(<argument><expr><call pos:line="52" pos:column="19">(<name pos:line="52" pos:column="20">int<pos:position pos:line="52" pos:column="23"/></name>) <argument_list pos:line="52" pos:column="25">(<argument><expr><name><name pos:line="52" pos:column="26">n<pos:position pos:line="52" pos:column="27"/></name><operator pos:line="52" pos:column="27">-&gt;<pos:position pos:line="52" pos:column="32"/></operator><name pos:line="52" pos:column="29">rtt<pos:position pos:line="52" pos:column="32"/></name></name> <operator pos:line="52" pos:column="33">*<pos:position pos:line="52" pos:column="34"/></operator> <literal type="number" pos:line="52" pos:column="35">1000<pos:position pos:line="52" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="40"/></argument_list></call></expr></argument>)<pos:position pos:line="52" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="42"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="54" pos:column="9">memcpy<pos:position pos:line="54" pos:column="15"/></name><argument_list pos:line="54" pos:column="15">(<argument><expr><operator pos:line="54" pos:column="16">&amp;<pos:position pos:line="54" pos:column="21"/></operator><name><name pos:line="54" pos:column="17">buf<pos:position pos:line="54" pos:column="20"/></name><index pos:line="54" pos:column="20">[<expr><name pos:line="54" pos:column="21">i<pos:position pos:line="54" pos:column="22"/></name></expr>]<pos:position pos:line="54" pos:column="23"/></index></name></expr></argument>, <argument><expr><operator pos:line="54" pos:column="25">&amp;<pos:position pos:line="54" pos:column="30"/></operator><name pos:line="54" pos:column="26">j<pos:position pos:line="54" pos:column="27"/></name></expr></argument>, <argument><expr><sizeof pos:line="54" pos:column="29">sizeof<argument_list pos:line="54" pos:column="35">(<argument><expr><name pos:line="54" pos:column="36">int<pos:position pos:line="54" pos:column="39"/></name></expr></argument>)<pos:position pos:line="54" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="54" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="42"/></expr_stmt>

        <expr_stmt><expr><name pos:line="56" pos:column="9">i<pos:position pos:line="56" pos:column="10"/></name> <operator pos:line="56" pos:column="11">+=<pos:position pos:line="56" pos:column="13"/></operator> <sizeof pos:line="56" pos:column="14">sizeof<argument_list pos:line="56" pos:column="20">(<argument><expr><name pos:line="56" pos:column="21">int<pos:position pos:line="56" pos:column="24"/></name></expr></argument>)<pos:position pos:line="56" pos:column="25"/></argument_list></sizeof></expr>;<pos:position pos:line="56" pos:column="26"/></expr_stmt>

        <expr_stmt><expr><name><name pos:line="58" pos:column="9">buf<pos:position pos:line="58" pos:column="12"/></name><index pos:line="58" pos:column="12">[<expr><name pos:line="58" pos:column="13">i<pos:position pos:line="58" pos:column="14"/></name></expr>]<pos:position pos:line="58" pos:column="15"/></index></name> <operator pos:line="58" pos:column="16">=<pos:position pos:line="58" pos:column="17"/></operator> <operator pos:line="58" pos:column="18">(<pos:position pos:line="58" pos:column="19"/></operator><name pos:line="58" pos:column="19">char<pos:position pos:line="58" pos:column="23"/></name><operator pos:line="58" pos:column="23">)<pos:position pos:line="58" pos:column="24"/></operator> <name pos:line="58" pos:column="25">NETDB_EX_HOPS<pos:position pos:line="58" pos:column="38"/></name></expr>;<pos:position pos:line="58" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="59" pos:column="9">++<pos:position pos:line="59" pos:column="11"/></operator><name pos:line="59" pos:column="11">i<pos:position pos:line="59" pos:column="12"/></name></expr>;<pos:position pos:line="59" pos:column="13"/></expr_stmt>

        <expr_stmt><expr><name pos:line="61" pos:column="9">j<pos:position pos:line="61" pos:column="10"/></name> <operator pos:line="61" pos:column="11">=<pos:position pos:line="61" pos:column="12"/></operator> <call><name pos:line="61" pos:column="13">htonl<pos:position pos:line="61" pos:column="18"/></name><argument_list pos:line="61" pos:column="18">(<argument><expr><call pos:line="61" pos:column="19">(<name pos:line="61" pos:column="20">int<pos:position pos:line="61" pos:column="23"/></name>) <argument_list pos:line="61" pos:column="25">(<argument><expr><name><name pos:line="61" pos:column="26">n<pos:position pos:line="61" pos:column="27"/></name><operator pos:line="61" pos:column="27">-&gt;<pos:position pos:line="61" pos:column="32"/></operator><name pos:line="61" pos:column="29">hops<pos:position pos:line="61" pos:column="33"/></name></name> <operator pos:line="61" pos:column="34">*<pos:position pos:line="61" pos:column="35"/></operator> <literal type="number" pos:line="61" pos:column="36">1000<pos:position pos:line="61" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="41"/></argument_list></call></expr></argument>)<pos:position pos:line="61" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="43"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="63" pos:column="9">memcpy<pos:position pos:line="63" pos:column="15"/></name><argument_list pos:line="63" pos:column="15">(<argument><expr><operator pos:line="63" pos:column="16">&amp;<pos:position pos:line="63" pos:column="21"/></operator><name><name pos:line="63" pos:column="17">buf<pos:position pos:line="63" pos:column="20"/></name><index pos:line="63" pos:column="20">[<expr><name pos:line="63" pos:column="21">i<pos:position pos:line="63" pos:column="22"/></name></expr>]<pos:position pos:line="63" pos:column="23"/></index></name></expr></argument>, <argument><expr><operator pos:line="63" pos:column="25">&amp;<pos:position pos:line="63" pos:column="30"/></operator><name pos:line="63" pos:column="26">j<pos:position pos:line="63" pos:column="27"/></name></expr></argument>, <argument><expr><sizeof pos:line="63" pos:column="29">sizeof<argument_list pos:line="63" pos:column="35">(<argument><expr><name pos:line="63" pos:column="36">int<pos:position pos:line="63" pos:column="39"/></name></expr></argument>)<pos:position pos:line="63" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="63" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="42"/></expr_stmt>

        <expr_stmt><expr><name pos:line="65" pos:column="9">i<pos:position pos:line="65" pos:column="10"/></name> <operator pos:line="65" pos:column="11">+=<pos:position pos:line="65" pos:column="13"/></operator> <sizeof pos:line="65" pos:column="14">sizeof<argument_list pos:line="65" pos:column="20">(<argument><expr><name pos:line="65" pos:column="21">int<pos:position pos:line="65" pos:column="24"/></name></expr></argument>)<pos:position pos:line="65" pos:column="25"/></argument_list></sizeof></expr>;<pos:position pos:line="65" pos:column="26"/></expr_stmt>

        <if pos:line="67" pos:column="9">if <condition pos:line="67" pos:column="12">(<expr><name pos:line="67" pos:column="13">i<pos:position pos:line="67" pos:column="14"/></name> <operator pos:line="67" pos:column="15">+<pos:position pos:line="67" pos:column="16"/></operator> <name pos:line="67" pos:column="17">rec_sz<pos:position pos:line="67" pos:column="23"/></name> <operator pos:line="67" pos:column="24">&gt;<pos:position pos:line="67" pos:column="28"/></operator> <literal type="number" pos:line="67" pos:column="26">4096<pos:position pos:line="67" pos:column="30"/></literal></expr>)<pos:position pos:line="67" pos:column="31"/></condition><then pos:line="67" pos:column="31"> <block pos:line="67" pos:column="32">{
            <expr_stmt><expr><call><name><name pos:line="68" pos:column="13">s<pos:position pos:line="68" pos:column="14"/></name><operator pos:line="68" pos:column="14">-&gt;<pos:position pos:line="68" pos:column="19"/></operator><name pos:line="68" pos:column="16">append<pos:position pos:line="68" pos:column="22"/></name></name><argument_list pos:line="68" pos:column="22">(<argument><expr><name pos:line="68" pos:column="23">buf<pos:position pos:line="68" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="28">i<pos:position pos:line="68" pos:column="29"/></name></expr></argument>)<pos:position pos:line="68" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="31"/></expr_stmt>
            <expr_stmt><expr><name pos:line="69" pos:column="13">i<pos:position pos:line="69" pos:column="14"/></name> <operator pos:line="69" pos:column="15">=<pos:position pos:line="69" pos:column="16"/></operator> <literal type="number" pos:line="69" pos:column="17">0<pos:position pos:line="69" pos:column="18"/></literal></expr>;<pos:position pos:line="69" pos:column="19"/></expr_stmt>
        }<pos:position pos:line="70" pos:column="10"/></block></then></if>
    }<pos:position pos:line="71" pos:column="6"/></block></while>

    <if pos:line="73" pos:column="5">if <condition pos:line="73" pos:column="8">(<expr><name pos:line="73" pos:column="9">i<pos:position pos:line="73" pos:column="10"/></name> <operator pos:line="73" pos:column="11">&gt;<pos:position pos:line="73" pos:column="15"/></operator> <literal type="number" pos:line="73" pos:column="13">0<pos:position pos:line="73" pos:column="14"/></literal></expr>)<pos:position pos:line="73" pos:column="15"/></condition><then pos:line="73" pos:column="15"> <block pos:line="73" pos:column="16">{
        <expr_stmt><expr><call><name><name pos:line="74" pos:column="9">s<pos:position pos:line="74" pos:column="10"/></name><operator pos:line="74" pos:column="10">-&gt;<pos:position pos:line="74" pos:column="15"/></operator><name pos:line="74" pos:column="12">append<pos:position pos:line="74" pos:column="18"/></name></name><argument_list pos:line="74" pos:column="18">(<argument><expr><name pos:line="74" pos:column="19">buf<pos:position pos:line="74" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="24">i<pos:position pos:line="74" pos:column="25"/></name></expr></argument>)<pos:position pos:line="74" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><name pos:line="75" pos:column="9">i<pos:position pos:line="75" pos:column="10"/></name> <operator pos:line="75" pos:column="11">=<pos:position pos:line="75" pos:column="12"/></operator> <literal type="number" pos:line="75" pos:column="13">0<pos:position pos:line="75" pos:column="14"/></literal></expr>;<pos:position pos:line="75" pos:column="15"/></expr_stmt>
    }<pos:position pos:line="76" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="78" pos:column="5">assert<pos:position pos:line="78" pos:column="11"/></name><argument_list pos:line="78" pos:column="11">(<argument><expr><literal type="number" pos:line="78" pos:column="12">0<pos:position pos:line="78" pos:column="13"/></literal> <operator pos:line="78" pos:column="14">==<pos:position pos:line="78" pos:column="16"/></operator> <name pos:line="78" pos:column="17">i<pos:position pos:line="78" pos:column="18"/></name></expr></argument>)<pos:position pos:line="78" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="79" pos:column="5">s<pos:position pos:line="79" pos:column="6"/></name><operator pos:line="79" pos:column="6">-&gt;<pos:position pos:line="79" pos:column="11"/></operator><name pos:line="79" pos:column="8">flush<pos:position pos:line="79" pos:column="13"/></name></name><argument_list pos:line="79" pos:column="13">()<pos:position pos:line="79" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="80" pos:column="5">memFree<pos:position pos:line="80" pos:column="12"/></name><argument_list pos:line="80" pos:column="12">(<argument><expr><name pos:line="80" pos:column="13">buf<pos:position pos:line="80" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="18">MEM_4K_BUF<pos:position pos:line="80" pos:column="28"/></name></expr></argument>)<pos:position pos:line="80" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="30"/></expr_stmt>
<cpp:else pos:line="81" pos:column="1">#<cpp:directive pos:line="81" pos:column="2">else<pos:position pos:line="81" pos:column="6"/></cpp:directive></cpp:else>

    <expr_stmt><expr><call><name><name pos:line="83" pos:column="5">reply<pos:position pos:line="83" pos:column="10"/></name><operator pos:line="83" pos:column="10">-&gt;<pos:position pos:line="83" pos:column="15"/></operator><name pos:line="83" pos:column="12">setHeaders<pos:position pos:line="83" pos:column="22"/></name></name><argument_list pos:line="83" pos:column="22">(<argument><expr><name><name pos:line="83" pos:column="23">Http<pos:position pos:line="83" pos:column="27"/></name><operator pos:line="83" pos:column="27">::<pos:position pos:line="83" pos:column="29"/></operator><name pos:line="83" pos:column="29">scBadRequest<pos:position pos:line="83" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="83" pos:column="43">"Bad Request"<pos:position pos:line="83" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="83" pos:column="58">NULL<pos:position pos:line="83" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="83" pos:column="64">-<pos:position pos:line="83" pos:column="65"/></operator><literal type="number" pos:line="83" pos:column="65">1<pos:position pos:line="83" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="83" pos:column="68">squid_curtime<pos:position pos:line="83" pos:column="81"/></name></expr></argument>, <argument><expr><operator pos:line="83" pos:column="83">-<pos:position pos:line="83" pos:column="84"/></operator><literal type="number" pos:line="83" pos:column="84">2<pos:position pos:line="83" pos:column="85"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="87"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="84" pos:column="5">s<pos:position pos:line="84" pos:column="6"/></name><operator pos:line="84" pos:column="6">-&gt;<pos:position pos:line="84" pos:column="11"/></operator><name pos:line="84" pos:column="8">replaceHttpReply<pos:position pos:line="84" pos:column="24"/></name></name><argument_list pos:line="84" pos:column="24">(<argument><expr><name pos:line="84" pos:column="25">reply<pos:position pos:line="84" pos:column="30"/></name></expr></argument>)<pos:position pos:line="84" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="85" pos:column="5">storeAppendPrintf<pos:position pos:line="85" pos:column="22"/></name><argument_list pos:line="85" pos:column="22">(<argument><expr><name pos:line="85" pos:column="23">s<pos:position pos:line="85" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="85" pos:column="26">"NETDB support not compiled into this Squid cache.\n"<pos:position pos:line="85" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="85" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="81"/></expr_stmt>
<cpp:endif pos:line="86" pos:column="1">#<cpp:directive pos:line="86" pos:column="2">endif<pos:position pos:line="86" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name><name pos:line="88" pos:column="5">s<pos:position pos:line="88" pos:column="6"/></name><operator pos:line="88" pos:column="6">-&gt;<pos:position pos:line="88" pos:column="11"/></operator><name pos:line="88" pos:column="8">complete<pos:position pos:line="88" pos:column="16"/></name></name><argument_list pos:line="88" pos:column="16">()<pos:position pos:line="88" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="19"/></expr_stmt>
}<pos:position pos:line="89" pos:column="2"/></block></function></unit>
